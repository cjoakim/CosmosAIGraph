{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::lambda\n# aws lambda construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis construct library allows you to define aws lambda functions.\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n```\n\n## handler code\n\nthe `lambda.code` class includes static convenience methods for various types of\nruntime code.\n\n* `lambda.code.frombucket(bucket, key[, objectversion])` - specify an s3 object\n  that contains the archive of your runtime code.\n* `lambda.code.frominline(code)` - inline the handle code as a string. this is\n  limited to supported runtimes and the code cannot exceed 4kib.\n* `lambda.code.fromasset(path)` - specify a directory or a .zip file in the local\n  filesystem which will be zipped and uploaded to s3 before deployment. see also\n  [bundling asset code](#bundling-asset-code).\n* `lambda.code.fromdockerbuild(path, options)` - use the result of a docker\n  build as code. the runtime code is expected to be located at `/asset` in the\n  image and will be zipped and uploaded to s3 as an asset.\n\nthe following example shows how to define a python function and deploy the code\nfrom the local directory `my-lambda-handler` to it:\n\n```python\nlambda_.function(self, \"mylambda\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"my-lambda-handler\")),\n    handler=\"index.main\",\n    runtime=lambda_.runtime.python_3_9\n)\n```\n\nwhen deploying a stack that contains this code, the directory will be zip\narchived and then uploaded to an s3 bucket, then the exact location of the s3\nobjects will be passed when the stack is deployed.\n\nduring synthesis, the cdk expects to find a directory on disk at the asset\ndirectory specified. note that we are referencing the asset directory relatively\nto our cdk project directory. this is especially important when we want to share\nthis construct through a library. different programming languages will have\ndifferent techniques for bundling resources into libraries.\n\n## docker images\n\nlambda functions allow specifying their handlers within docker images. the docker\nimage can be an image from ecr or a local asset that the cdk will package and load\ninto ecr.\n\nthe following `dockerimagefunction` construct uses a local folder with a\ndockerfile as the asset that will be used as the function handler.\n\n```python\nlambda_.dockerimagefunction(self, \"assetfunction\",\n    code=lambda_.dockerimagecode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)\n```\n\nyou can also specify an image that already exists in ecr as the function handler.\n\n```python\nimport aws_cdk.aws_ecr as ecr\n\nrepo = ecr.repository(self, \"repository\")\n\nlambda_.dockerimagefunction(self, \"ecrfunction\",\n    code=lambda_.dockerimagecode.from_ecr(repo)\n)\n```\n\nthe props for these docker image resources allow overriding the image's `cmd`, `entrypoint`, and `workdir`\nconfigurations as well as choosing a specific tag or digest. see their docs for more information.\n\n## execution role\n\nlambda functions assume an iam role during execution. in cdk by default, lambda\nfunctions will use an autogenerated role if one is not provided.\n\nthe autogenerated role is automatically given permissions to execute the lambda\nfunction. to reference the autogenerated role:\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nrole = fn.role\n```\n\nyou can also provide your own iam role. provided iam roles will not automatically\nbe given permissions to execute the lambda function. to provide a role and grant\nit appropriate permissions:\n\n```python\nmy_role = iam.role(self, \"my role\",\n    assumed_by=iam.serviceprincipal(\"lambda.amazonaws.com\")\n)\n\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    role=my_role\n)\n\nmy_role.add_managed_policy(iam.managedpolicy.from_aws_managed_policy_name(\"service-role/awslambdabasicexecutionrole\"))\nmy_role.add_managed_policy(iam.managedpolicy.from_aws_managed_policy_name(\"service-role/awslambdavpcaccessexecutionrole\"))\n```\n\n## function timeout\n\naws lambda functions have a default timeout of 3 seconds, but this can be increased\nup to 15 minutes. the timeout is available as a property of `function` so that\nyou can reference it elsewhere in your stack. for instance, you could use it to create\na cloudwatch alarm to report when your function timed out:\n\n```python\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.alarm(self, \"myalarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.treatmissingdata.ignore,\n        alarm_name=\"my lambda timeout\"\n    )\n```\n\n## resource-based policies\n\naws lambda supports resource-based policies for controlling access to lambda\nfunctions and layers on a per-resource basis. in particular, this allows you to\ngive permission to aws services and other aws accounts to modify and invoke your\nfunctions. you can also restrict permissions given to aws services by providing\na source account or arn (representing the account and identifier of the resource\nthat accesses the function or layer).\n\n```python\n# fn: lambda.function\n\nprincipal = iam.serviceprincipal(\"my-service\")\n\nfn.grant_invoke(principal)\n\n# equivalent to:\nfn.add_permission(\"my-service invocation\",\n    principal=principal\n)\n```\n\nfor more information, see [resource-based\npolicies](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html)\nin the aws lambda developer guide.\n\nproviding an unowned principal (such as account principals, generic arn\nprincipals, service principals, and principals in other accounts) to a call to\n`fn.grantinvoke` will result in a resource-based policy being created. if the\nprincipal in question has conditions limiting the source account or arn of the\noperation (see above), these conditions will be automatically added to the\nresource policy.\n\n```python\n# fn: lambda.function\n\nservice_principal = iam.serviceprincipal(\"my-service\")\nsource_arn = \"arn:aws:s3:::my-bucket\"\nsource_account = \"111122223333\"\nservice_principal_with_conditions = service_principal.with_conditions({\n    \"arnlike\": {\n        \"aws:sourcearn\": source_arn\n    },\n    \"stringequals\": {\n        \"aws:sourceaccount\": source_account\n    }\n})\n\nfn.grant_invoke(service_principal_with_conditions)\n\n# equivalent to:\nfn.add_permission(\"my-service invocation\",\n    principal=service_principal,\n    source_arn=source_arn,\n    source_account=source_account\n)\n```\n\n## versions\n\nyou can use\n[versions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\nto manage the deployment of your aws lambda functions. for example, you can\npublish a new version of a function for beta testing without affecting users of\nthe stable production version.\n\nthe function version includes the following information:\n\n* the function code and all associated dependencies.\n* the lambda runtime that executes the function.\n* all of the function settings, including the environment variables.\n* a unique amazon resource name (arn) to identify this version of the function.\n\nyou could create a version to your lambda function using the `version` construct.\n\n```python\n# fn: lambda.function\n\nversion = lambda_.version(self, \"myversion\",\n    lambda_=fn\n)\n```\n\nthe major caveat to know here is that a function version must always point to a\nspecific 'version' of the function. when the function is modified, the version\nwill continue to point to the 'then version' of the function.\n\none way to ensure that the `lambda.version` always points to the latest version\nof your `lambda.function` is to set an environment variable which changes at\nleast as often as your code does. this makes sure the function always has the\nlatest code. for instance -\n\n```python\ncode_version = \"stringormethodtogetcodeversion\"\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    environment={\n        \"codeversionstring\": code_version\n    }\n)\n```\n\nthe `fn.latestversion` property returns a `lambda.iversion` which represents\nthe `$latest` pseudo-version.\n\nhowever, most aws services require a specific aws lambda version,\nand won't allow you to use `$latest`. therefore, you would normally want\nto use `lambda.currentversion`.\n\nthe `fn.currentversion` property can be used to obtain a `lambda.version`\nresource that represents the aws lambda function defined in your application.\nany change to your function's code or configuration will result in the creation\nof a new version resource. you can specify options for this version through the\n`currentversionoptions` property.\n\nnote: the `currentversion` property is only supported when your aws lambda function\nuses either `lambda.code.fromasset` or `lambda.code.frominline`. other types\nof code providers (such as `lambda.code.frombucket`) require that you define a\n`lambda.version` resource directly since the cdk is unable to determine if\ntheir contents had changed.\n\n### `currentversion`: updated hashing logic\n\nto produce a new lambda version each time the lambda function is modified, the\n`currentversion` property under the hood, computes a new logical id based on the\nproperties of the function. this informs cloudformation that a new\n`aws::lambda::version` resource should be created pointing to the updated lambda\nfunction.\n\nhowever, a bug was introduced in this calculation that caused the logical id to\nchange when it was not required (ex: when the function's `tags` property, or\nwhen the `dependson` clause was modified). this caused the deployment to fail\nsince the lambda service does not allow creating duplicate versions.\n\nthis has been fixed in the aws cdk but *existing* users need to opt-in via a\n[feature flag](https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html). users who have run `cdk init` since this fix will be opted in,\nby default.\n\notherwise, you will need to enable the [feature flag](https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html)\n`@aws-cdk/aws-lambda:recognizeversionprops`. since cloudformation does not\nallow duplicate versions, you will also need to make some modification to\nyour function so that a new version can be created. to efficiently and trivially\nmodify all your lambda functions at once, you can attach the\n`functionversionupgrade` aspect to the stack, which slightly alters the\nfunction description. this aspect is intended for one-time use to upgrade the\nversion of all your functions at the same time, and can safely be removed after\ndeploying once.\n\n```python\nstack = stack()\naspects.of(stack).add(lambda_.functionversionupgrade(lambda_recognize_version_props))\n```\n\nwhen the new logic is in effect, you may rarely come across the following error:\n`the following properties are not recognized as version properties`. this will\noccur, typically when [property overrides](https://docs.aws.amazon.com/cdk/latest/guide/cfn_layer.html#cfn_layer_raw) are used, when a new property\nintroduced in `aws::lambda::function` is used that cdk is still unaware of.\n\nto overcome this error, use the api `function.classifyversionproperty()` to\nrecord whether a new version should be generated when this property is changed.\nthis can be typically determined by checking whether the property can be\nmodified using the *[updatefunctionconfiguration](https://docs.aws.amazon.com/lambda/latest/dg/api_updatefunctionconfiguration.html)* api or not.\n\n### `currentversion`: updated hashing logic for layer versions\n\nan additional update to the hashing logic fixes two issues surrounding layers.\nprior to this change, updating the lambda layer version would have no effect on\nthe function version. also, the order of lambda layers provided to the function\nwas unnecessarily baked into the hash.\n\nthis has been fixed in the aws cdk starting with version 2.27. if you ran\n`cdk init` with an earlier version, you will need to opt-in via a [feature flag](https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html).\nif you run `cdk init` with v2.27 or later, this fix will be opted in, by default.\n\nexisting users will need to enable the [feature flag](https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html)\n`@aws-cdk/aws-lambda:recognizelayerversion`. since cloudformation does not\nallow duplicate versions, they will also need to make some modification to\ntheir function so that a new version can be created. to efficiently and trivially\nmodify all your lambda functions at once, users can attach the\n`functionversionupgrade` aspect to the stack, which slightly alters the\nfunction description. this aspect is intended for one-time use to upgrade the\nversion of all your functions at the same time, and can safely be removed after\ndeploying once.\n\n```python\nstack = stack()\naspects.of(stack).add(lambda_.functionversionupgrade(lambda_recognize_layer_version))\n```\n\n## aliases\n\nyou can define one or more\n[aliases](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\nfor your aws lambda function. a lambda alias is like a pointer to a specific\nlambda function version. users can access the function version using the alias\narn.\n\nthe `version.addalias()` method can be used to define an aws lambda alias that\npoints to a specific version.\n\nthe following example defines an alias named `live` which will always point to a\nversion that represents the function as defined in your cdk app. when you change\nyour lambda code or configuration, a new resource will be created. you can\nspecify options for the current version through the `currentversionoptions`\nproperty.\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    current_version_options=lambda.versionoptions(\n        removal_policy=removalpolicy.retain,  # retain old versions\n        retry_attempts=1\n    ),\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nfn.add_alias(\"live\")\n```\n\n## function url\n\na function url is a dedicated http(s) endpoint for your lambda function. when you create a function url, lambda automatically generates a unique url endpoint for you. function urls can be created for the latest version lambda functions, or function aliases (but not for versions).\n\nfunction urls are dual stack-enabled, supporting ipv4 and ipv6, and cross-origin resource sharing (cors) configuration. after you configure a function url for your function, you can invoke your function through its http(s) endpoint via a web browser, curl, postman, or any http client. to invoke a function using iam authentication your http client must support sigv4 signing.\n\nsee the [invoking function urls](https://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html) section of the aws lambda developer guide\nfor more information on the input and output payloads of functions invoked in this way.\n\n### iam-authenticated function urls\n\nto create a function url which can be called by an iam identity, call `addfunctionurl()`, followed by `grantinvokefunctionurl()`:\n\n```python\n# can be a function or an alias\n# fn: lambda.function\n# my_role: iam.role\n\n\nfn_url = fn.add_function_url()\nfn_url.grant_invoke_url(my_role)\n\ncfnoutput(self, \"theurl\",\n    # the .url attributes will return the unique function url\n    value=fn_url.url\n)\n```\n\ncalls to this url need to be signed with sigv4.\n\n### anonymous function urls\n\nto create a function url which can be called anonymously, pass `authtype: functionurlauthtype.none` to `addfunctionurl()`:\n\n```python\n# can be a function or an alias\n# fn: lambda.function\n\n\nfn_url = fn.add_function_url(\n    auth_type=lambda_.functionurlauthtype.none\n)\n\ncfnoutput(self, \"theurl\",\n    value=fn_url.url\n)\n```\n\n### cors configuration for function urls\n\nif you want your function urls to be invokable from a web page in browser, you\nwill need to configure cross-origin resource sharing to allow the call (if you do\nnot do this, your browser will refuse to make the call):\n\n```python\n# fn: lambda.function\n\n\nfn.add_function_url(\n    auth_type=lambda_.functionurlauthtype.none,\n    cors=lambda.functionurlcorsoptions(\n        # allow this to be called from websites on https://example.com.\n        # can also be ['*'] to allow all domain.\n        allowed_origins=[\"https://example.com\"]\n    )\n)\n```\n\n## layers\n\nthe `lambda.layerversion` class can be used to define lambda layers and manage\ngranting permissions to other aws accounts or organizations.\n\n```python\nlayer = lambda_.layerversion(stack, \"mylayer\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.runtime.nodejs_14_x],\n    license=\"apache-2.0\",\n    description=\"a layer to test the l2 construct\"\n)\n\n# to grant usage by other aws accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# to grant usage to all accounts in some aws ogranization\n# layer.grantusage({ accountid: '*', organizationid });\n\nlambda_.function(stack, \"mylayeredlambda\",\n    code=lambda_.inlinecode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    layers=[layer]\n)\n```\n\nby default, updating a layer creates a new layer version, and cloudformation will delete the old version as part of the stack update.\n\nalternatively, a removal policy can be used to retain the old version:\n\n```python\nlambda_.layerversion(self, \"mylayer\",\n    removal_policy=removalpolicy.retain,\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n```\n\n## architecture\n\nlambda functions, by default, run on compute systems that have the 64 bit x86 architecture.\n\nthe aws lambda service also runs compute on the arm architecture, which can reduce cost\nfor some workloads.\n\na lambda function can be configured to be run on one of these platforms:\n\n```python\nlambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    architecture=lambda_.architecture.arm_64\n)\n```\n\nsimilarly, lambda layer versions can also be tagged with architectures it is compatible with.\n\n```python\nlambda_.layerversion(self, \"mylayer\",\n    removal_policy=removalpolicy.retain,\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.architecture.x86_64, lambda_.architecture.arm_64]\n)\n```\n\n## lambda insights\n\nlambda functions can be configured to use cloudwatch [lambda insights](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/lambda-insights.html)\nwhich provides low-level runtime metrics for a lambda functions.\n\n```python\nlambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.lambdainsightsversion.version_1_0_98_0\n)\n```\n\nif the version of insights is not yet available in the cdk, you can also provide the arn directly as so -\n\n```python\nlayer_arn = \"arn:aws:lambda:us-east-1:580247275435:layer:lambdainsightsextension:14\"\nlambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.lambdainsightsversion.from_insight_version_arn(layer_arn)\n)\n```\n\nif you are deploying an arm_64 lambda function, you must specify a\nlambda insights version >= `1_0_119_0`.\n\n```python\nlambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    architecture=lambda_.architecture.arm_64,\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.lambdainsightsversion.version_1_0_119_0\n)\n```\n\n## event rule target\n\nyou can use an aws lambda function as a target for an amazon cloudwatch event\nrule:\n\n```python\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn: lambda.function\n\nrule = events.rule(self, \"schedule rule\",\n    schedule=events.schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.lambdafunction(fn))\n```\n\n## event sources\n\naws lambda supports a [variety of event sources](https://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html).\n\nin most cases, it is possible to trigger a function as a result of an event by\nusing one of the `add<event>notification` methods on the source construct. for\nexample, the `s3.bucket` construct has an `onevent` method which can be used to\ntrigger a lambda when an event, such as putobject occurs on an s3 bucket.\n\nan alternative way to add event sources to a function is to use `function.addeventsource(source)`.\nthis method accepts an `ieventsource` object. the module **@aws-cdk/aws-lambda-event-sources**\nincludes classes for the various event sources supported by aws lambda.\n\nfor example, the following code adds an sqs queue as an event source for a function:\n\n```python\nimport aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_sqs as sqs\n\n# fn: lambda.function\n\nqueue = sqs.queue(self, \"queue\")\nfn.add_event_source(eventsources.sqseventsource(queue))\n```\n\nthe following code adds an s3 bucket notification as an event source:\n\n```python\nimport aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_s3 as s3\n\n# fn: lambda.function\n\nbucket = s3.bucket(self, \"bucket\")\nfn.add_event_source(eventsources.s3eventsource(bucket,\n    events=[s3.eventtype.object_created, s3.eventtype.object_removed],\n    filters=[s3.notificationkeyfilter(prefix=\"subdir/\")]\n))\n```\n\nsee the documentation for the **@aws-cdk/aws-lambda-event-sources** module for more details.\n\n## imported lambdas\n\nwhen referencing an imported lambda in the cdk, use `fromfunctionarn()` for most use cases:\n\n```python\nfn = lambda_.function.from_function_arn(self, \"function\", \"arn:aws:lambda:us-east-1:123456789012:function:myfn\")\n```\n\nthe `fromfunctionattributes()` api is available for more specific use cases:\n\n```python\nfn = lambda_.function.from_function_attributes(self, \"function\",\n    function_arn=\"arn:aws:lambda:us-east-1:123456789012:function:myfn\",\n    # the following are optional properties for specific use cases and should be used with caution:\n\n    # use case: imported function is in the same account as the stack. this tells the cdk that it\n    # can modify the function's permissions.\n    same_environment=true,\n\n    # use case: imported function is in a different account and user commits to ensuring that the\n    # imported function has the correct permissions outside the cdk.\n    skip_permissions=true\n)\n```\n\nif `fromfunctionarn()` causes an error related to having to provide an account and/or region in a different construct,\nand the lambda is in the same account and region as the stack you're importing it into,\nyou can use `function.fromfunctionname()` instead:\n\n```python\nfn = lambda_.function.from_function_name(self, \"function\", \"myfn\")\n```\n\n## lambda with dlq\n\na dead-letter queue can be automatically created for a lambda function by\nsetting the `deadletterqueueenabled: true` configuration. in such case cdk creates\na `sqs.queue` as `deadletterqueue`.\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue_enabled=true\n)\n```\n\nit is also possible to provide a dead-letter queue instead of getting a new queue created:\n\n```python\nimport aws_cdk.aws_sqs as sqs\n\n\ndlq = sqs.queue(self, \"dlq\")\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue=dlq\n)\n```\n\nyou can also use a `sns.topic` instead of an `sqs.queue` as dead-letter queue:\n\n```python\nimport aws_cdk.aws_sns as sns\n\n\ndlt = sns.topic(self, \"dlq\")\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"// your code here\"),\n    dead_letter_topic=dlt\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/lambda/latest/dg/dlq.html)\nto learn more about aws lambdas and dlqs.\n\n## lambda with x-ray tracing\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    tracing=lambda_.tracing.active\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html)\nto learn more about aws lambda's x-ray support.\n\n## lambda with profiling\n\nthe following code configures the lambda function with codeguru profiling. by default, this creates a new codeguru\nprofiling group -\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.python_3_9,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(\"lambda-handler\"),\n    profiling=true\n)\n```\n\nthe `profilinggroup` property can be used to configure an existing codeguru profiler group.\n\ncodeguru profiling is supported for all java runtimes and python3.6+ runtimes.\n\nsee [the aws documentation](https://docs.aws.amazon.com/codeguru/latest/profiler-ug/setting-up-lambda.html)\nto learn more about aws lambda's profiling support.\n\n## lambda with reserved concurrent executions\n\n```python\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    reserved_concurrent_executions=100\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)\nmanaging concurrency.\n\n## autoscaling\n\nyou can use application autoscaling to automatically configure the provisioned concurrency for your functions. autoscaling can be set to track utilization or be based on a schedule. to configure autoscaling on a function alias:\n\n```python\nimport aws_cdk.aws_autoscaling as autoscaling\n\n# fn: lambda.function\n\nalias = fn.add_alias(\"prod\")\n\n# create autoscaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# configure target tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# configure scheduled scaling\nas.scale_on_schedule(\"scaleupinthemorning\",\n    schedule=autoscaling.schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)\n```\n\n```python\nimport aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.core as cdk\nfrom aws_cdk.cx_api import lambda_recognize_layer_version\nimport aws_cdk.aws_lambda as lambda_\n\n#\n# stack verification steps:\n# aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n# has a mincapacity of 3 and maxcapacity of 50\n#\nclass teststack(cdk.stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        fn = lambda_.function(self, \"mylambda\",\n            code=lambda_.inlinecode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            handler=\"index.handler\",\n            runtime=lambda_.runtime.nodejs_14_x\n        )\n\n        version = fn.current_version\n\n        alias = lambda_.alias(self, \"alias\",\n            alias_name=\"prod\",\n            version=version\n        )\n\n        scaling_target = alias.add_auto_scaling(min_capacity=3, max_capacity=50)\n\n        scaling_target.scale_on_utilization(\n            utilization_target=0.5\n        )\n\n        scaling_target.scale_on_schedule(\"scaleupinthemorning\",\n            schedule=appscaling.schedule.cron(hour=\"8\", minute=\"0\"),\n            min_capacity=20\n        )\n\n        scaling_target.scale_on_schedule(\"scaledownatnight\",\n            schedule=appscaling.schedule.cron(hour=\"20\", minute=\"0\"),\n            max_capacity=20\n        )\n\n        cdk.cfnoutput(self, \"functionname\",\n            value=fn.function_name\n        )\n\napp = cdk.app()\n\nstack = teststack(app, \"aws-lambda-autoscaling\")\n\n# changes the function description when the feature flag is present\n# to validate the changed function hash.\ncdk.aspects.of(stack).add(lambda_.functionversionupgrade(lambda_recognize_layer_version))\n\napp.synth()\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/lambda/latest/dg/invocation-scaling.html) on autoscaling lambda functions.\n\n## log group\n\nlambda functions automatically create a log group with the name `/aws/lambda/<function-name>` upon first execution with\nlog data set to never expire.\n\nthe `logretention` property can be used to set a different expiration period.\n\nit is possible to obtain the function's log group as a `logs.iloggroup` by calling the `loggroup` property of the\n`function` construct.\n\nby default, cdk uses the aws sdk retry options when creating a log group. the `logretentionretryoptions` property\nallows you to customize the maximum number of retries and base backoff duration.\n\n*note* that, if either `logretention` is set or `loggroup` property is called, a [cloudformation custom\nresource](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-resource-cfn-customresource.html) is added\nto the stack that pre-creates the log group as part of the stack deployment, if it already doesn't exist, and sets the\ncorrect log retention period (never expire, by default).\n\n*further note* that, if the log group already exists and the `logretention` is not set, the custom resource will reset\nthe log retention to never expire even if it was configured with a different value.\n\n## filesystem access\n\nyou can configure a function to mount an amazon elastic file system (amazon efs) to a\ndirectory in your runtime environment with the `filesystem` property. to access amazon efs\nfrom lambda function, the amazon efs access point will be required.\n\nthe following sample allows the lambda function to mount the amazon efs access point to `/mnt/msg` in the runtime environment and access the filesystem with the posix identity defined in `posixuser`.\n\n```python\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new vpc\nvpc = ec2.vpc(self, \"vpc\")\n\n# create a new amazon efs filesystem\nfile_system = efs.filesystem(self, \"efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"accesspoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createacl\n    create_acl=efs.acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the posix identity so lambda function will access with this identity\n    posix_user=efs.posixuser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.function(self, \"mylambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.filesystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)\n```\n\n## ephemeral storage\n\nyou can configure ephemeral storage on a function to control the amount of storage it gets for reading\nor writing data, allowing you to use aws lambda for etl jobs, ml inference, or other data-intensive workloads.\nthe ephemeral storage will be accessible in the functions' `/tmp` directory.\n\n```python\nfrom aws_cdk.core import size\n\n\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    ephemeral_storage_size=size.mebibytes(1024)\n)\n```\n\nread more about using this feature in [this aws blog post](https://aws.amazon.com/blogs/aws/aws-lambda-now-supports-up-to-10-gb-ephemeral-storage/).\n\n## singleton function\n\nthe `singletonfunction` construct is a way to guarantee that a lambda function will be guaranteed to be part of the stack,\nonce and only once, irrespective of how many times the construct is declared to be part of the stack. this is guaranteed\nas long as the `uuid` property and the optional `lambdapurpose` property stay the same whenever they're declared into the\nstack.\n\na typical use case of this function is when a higher level construct needs to declare a lambda function as part of it but\nneeds to guarantee that the function is declared once. however, a user of this higher level construct can declare it any\nnumber of times and with different properties. using `singletonfunction` here with a fixed `uuid` will guarantee this.\n\nfor example, the `logretention` construct requires only one single lambda function for all different log groups whose\nretention it seeks to manage.\n\n## bundling asset code\n\nwhen using `lambda.code.fromasset(path)` it is possible to bundle the code by running a\ncommand in a docker container. the asset path will be mounted at `/asset-input`. the\ndocker container is responsible for putting content at `/asset-output`. the content at\n`/asset-output` will be zipped and used as lambda code.\n\nexample with python:\n\n```python\nlambda_.function(self, \"function\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"my-python-handler\"),\n        bundling=bundlingoptions(\n            image=lambda_.runtime.python_3_9.bundling_image,\n            command=[\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"\n            ]\n        )\n    ),\n    runtime=lambda_.runtime.python_3_9,\n    handler=\"index.handler\"\n)\n```\n\nruntimes expose a `bundlingimage` property that points to the [aws sam](https://github.com/awslabs/aws-sam-cli) build image.\n\nuse `cdk.dockerimage.fromregistry(image)` to use an existing image or\n`cdk.dockerimage.frombuild(path)` to build a specific image:\n\n```python\nlambda_.function(self, \"function\",\n    code=lambda_.code.from_asset(\"/path/to/handler\",\n        bundling=bundlingoptions(\n            image=dockerimage.from_build(\"/path/to/dir/with/dockerfile\",\n                build_args={\n                    \"arg1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.runtime.python_3_9,\n    handler=\"index.handler\"\n)\n```\n\n## language-specific apis\n\nlanguage-specific higher level constructs are provided in separate modules:\n\n* `@aws-cdk/aws-lambda-nodejs`: [github](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda-nodejs) & [cdk docs](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html)\n* `@aws-cdk/aws-lambda-python`: [github](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda-python) & [cdk docs](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-python-readme.html)\n\n## code signing\n\ncode signing for aws lambda helps to ensure that only trusted code runs in your lambda functions.\nwhen enabled, aws lambda checks every code deployment and verifies that the code package is signed by a trusted source.\nfor more information, see [configuring code signing for aws lambda](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).\nthe following code configures a function with code signing.\n\n```python\nimport aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.signingprofile(self, \"signingprofile\",\n    platform=signer.platform.aws_lambda_sha384_ecdsa\n)\n\ncode_signing_config = lambda_.codesigningconfig(self, \"codesigningconfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.function(self, \"function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.runtime.nodejs_16_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-lambda",
  "package_url": "https://pypi.org/project/aws-cdk.aws-lambda/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-lambda/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-lambda/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-applicationautoscaling (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-codeguruprofiler (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecr-assets (==1.204.0)",
    "aws-cdk.aws-ecr (==1.204.0)",
    "aws-cdk.aws-efs (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-s3-assets (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-signer (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "aws-cdk.region-info (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::lambda",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_lambda aws_cdk aws_lambda_event_sources aws_lambda_sha384_ecdsa aws_s3",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_lambda",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_applicationautoscaling",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_codeguruprofiler",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecr",
    "pypi_aws_cdk.aws_ecr_assets",
    "pypi_aws_cdk.aws_efs",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_s3_assets",
    "pypi_aws_cdk.aws_signer",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_aws_cdk.region_info",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text provides detailed information about the `aws-cdk.aws-lambda` package version 1.204.0, released on June 19, 2023. This package is part of the AWS Cloud Development Kit (CDK) and is designed for defining AWS Lambda Functions within the CDK framework. The package has reached its end-of-support on June 1, 2023, and users are encouraged to migrate to AWS CDK v2. It includes various features for Lambda functions, such as event sources, dead-letter queues, X-Ray tracing, and more. The package supports Python 3.7 and above, and it's licensed under Apache-2.0. The document also outlines how to use the package, including defining Lambda functions, setting up event sources, and configuring other Lambda-related settings like execution roles, timeouts, and permissions.",
  "embedding": [
    -0.00991677027195692,
    0.027274519205093384,
    -0.022540587931871414,
    -0.019384633749723434,
    0.0036252664867788553,
    0.013453615829348564,
    -0.012392561882734299,
    -0.0017854267498478293,
    -0.01828276924788952,
    -0.01152875553816557,
    0.007815067656338215,
    0.009930374100804329,
    0.0067574153654277325,
    0.02976391464471817,
    -0.01613345555961132,
    0.0014776531606912613,
    0.012426570057868958,
    -0.03781703859567642,
    -0.01701766811311245,
    0.0014317422173917294,
    0.01655515655875206,
    -0.03243015334010124,
    -0.006434338167309761,
    -0.0005203243927098811,
    -0.011113856919109821,
    0.014487463049590588,
    -0.0013977341586723924,
    -0.03792586550116539,
    0.013848110102117062,
    -0.000743502692785114,
    0.03868764638900757,
    0.0030454278457909822,
    -0.024009739980101585,
    -0.008767295628786087,
    -0.013460417278110981,
    -0.012950295582413673,
    -0.0005105470190756023,
    0.014365033246576786,
    0.03781703859567642,
    -0.0035708534996956587,
    0.026866421103477478,
    0.019452650099992752,
    0.015031592920422554,
    0.007019277662038803,
    -0.01756179705262184,
    0.009780737571418285,
    0.006182678043842316,
    -0.03591258451342583,
    -0.02379208616912365,
    0.00278696627356112,
    0.007903489284217358,
    0.04151712357997894,
    -0.028784479945898056,
    -0.02063613198697567,
    0.0030352254398167133,
    -0.014133778400719166,
    -0.00950867310166359,
    0.013807300478219986,
    0.03096100129187107,
    -0.01909896545112133,
    0.012671428732573986,
    0.010590131394565105,
    -0.016718396916985512,
    -0.02078576758503914,
    -0.0007821869803592563,
    -0.010488106869161129,
    -0.013392400927841663,
    0.033899303525686264,
    -0.00914138462394476,
    -0.010766973719000816,
    0.03311031311750412,
    0.032974280416965485,
    0.000837875297293067,
    -0.01594301126897335,
    0.018881313502788544,
    -0.009372640401124954,
    -0.04421056807041168,
    0.01998317614197731,
    -0.0039789509028196335,
    -0.0005615592235699296,
    0.004281623288989067,
    0.010624139569699764,
    0.023084718734025955,
    0.03569493070244789,
    0.009862357750535011,
    0.009943976998329163,
    -0.007570209447294474,
    -0.00032350231776945293,
    -0.00682543171569705,
    -0.01609264686703682,
    -0.0003728141018655151,
    -0.016065441071987152,
    0.000743502692785114,
    0.03468829020857811,
    -0.0036966835614293814,
    0.0034824323374778032,
    -0.010324868373572826,
    0.036021411418914795,
    0.005815390031784773,
    -0.03319193422794342,
    -0.005410693120211363,
    0.008563246577978134,
    -0.037218496203422546,
    0.001509960973635316,
    -0.025274841114878654,
    -0.02513880841434002,
    -0.010182034224271774,
    0.016459934413433075,
    0.028213143348693848,
    0.015562119893729687,
    -0.025900591164827347,
    0.019806334748864174,
    -0.0002669638197403401,
    -0.024975569918751717,
    -0.002809071447700262,
    -0.021806012839078903,
    0.009692316874861717,
    -0.014065762050449848,
    -0.013759689405560493,
    -0.0006121463375166059,
    -0.0009938875446096063,
    0.05563730001449585,
    0.006288102827966213,
    -0.0006669844151474535,
    0.005907211918383837,
    0.0046455105766654015,
    -0.0363478884100914,
    -0.02090819738805294,
    0.0025166014675050974,
    -0.020391274243593216,
    -0.0014130377676337957,
    0.004421056713908911,
    0.02387370727956295,
    -0.03773542121052742,
    -0.015004386194050312,
    0.02549249306321144,
    -0.026390308514237404,
    0.005832394119352102,
    -0.012018472887575626,
    0.005948021542280912,
    0.0022275324445217848,
    0.019996779039502144,
    -0.016187869012355804,
    0.006301706191152334,
    -0.012807461433112621,
    0.013501226902008057,
    0.01987435109913349,
    -0.0013288676273077726,
    0.017929086461663246,
    0.0023737673182040453,
    0.016011027619242668,
    -0.00020330485131125897,
    -0.012542198412120342,
    -0.013902523554861546,
    0.0029587072785943747,
    0.02522042766213417,
    -0.012412967160344124,
    0.0011690293904393911,
    -0.019724715501070023,
    0.00047738911234773695,
    0.007230128161609173,
    0.0409729927778244,
    -0.0076314243488013744,
    -0.001793928793631494,
    0.024649091064929962,
    0.03664715960621834,
    0.011249888688325882,
    -0.026662373915314674,
    -0.008937336504459381,
    0.006526160053908825,
    0.01197766326367855,
    0.012501387856900692,
    -0.029519056901335716,
    0.008556445129215717,
    -0.013664466328918934,
    0.013215558603405952,
    0.009773936122655869,
    0.017684226855635643,
    -0.012460578233003616,
    -0.006852637976408005,
    0.016650380566716194,
    0.009563085623085499,
    -0.001487855683080852,
    0.025519700720906258,
    -0.021955648437142372,
    0.0008438266813755035,
    0.004285024479031563,
    0.013303980231285095,
    0.02206447347998619,
    0.02063613198697567,
    0.009930374100804329,
    0.05218207463622093,
    -0.000519474153406918,
    -0.038633234798908234,
    -0.6176964640617371,
    -0.025587717071175575,
    -0.022282125428318977,
    -0.04470028355717659,
    -0.008712883107364178,
    -0.008304785005748272,
    0.011766812764108181,
    0.03830675780773163,
    -0.02995436079800129,
    0.04886287823319435,
    -0.021085040643811226,
    0.03460667282342911,
    -0.002372066956013441,
    -0.007032881025224924,
    -0.015779772773385048,
    -0.013406004756689072,
    -0.025859780609607697,
    -0.008386404253542423,
    -0.010508512146770954,
    -0.0005020450334995985,
    0.003910935018211603,
    0.01828276924788952,
    -0.02591419406235218,
    -0.01003239769488573,
    0.010889402590692043,
    0.026771198958158493,
    -0.00016823396435938776,
    -0.011141062714159489,
    0.006733609363436699,
    0.006182678043842316,
    -0.010862196795642376,
    0.02452666312456131,
    0.003717088606208563,
    -0.008427214808762074,
    0.04032003879547119,
    0.007801464758813381,
    -0.021302692592144012,
    0.02240455523133278,
    0.0003942817565985024,
    0.04829154163599014,
    -0.02029605209827423,
    0.002397573087364435,
    0.0002867310249712318,
    -0.0005959924892522395,
    4.245702439220622e-05,
    0.005267858970910311,
    0.03449784591794014,
    0.01809232495725155,
    -0.01027725636959076,
    -0.029600676149129868,
    0.005876604467630386,
    -0.02183321863412857,
    0.02707047015428543,
    -0.018622850999236107,
    -0.01678641326725483,
    -0.01613345555961132,
    0.024730712175369263,
    -0.01786107011139393,
    0.016419123858213425,
    0.001946965348906815,
    -0.013548838905990124,
    0.011270293965935707,
    -0.010556123219430447,
    -0.01705847680568695,
    -0.011222682893276215,
    -0.009671911597251892,
    0.01361005287617445,
    -0.015915803611278534,
    -0.014160985127091408,
    0.010168430395424366,
    -0.004023161716759205,
    0.024417836219072342,
    0.005250855349004269,
    0.004213607404381037,
    0.030090391635894775,
    0.01920779049396515,
    0.02337038703262806,
    -0.012310942634940147,
    -0.001392632839269936,
    0.011134261265397072,
    0.03572214022278786,
    -0.012759850360453129,
    -0.018269166350364685,
    -0.022390952333807945,
    0.03199484944343567,
    -0.014269811101257801,
    -0.0125149916857481,
    -0.03501477092504501,
    0.0013552239397540689,
    -0.012474182061851025,
    0.010766973719000816,
    0.021914837881922722,
    -0.011753208935260773,
    -0.037708211690187454,
    -0.014147381298244,
    0.027519378811120987,
    0.012583008036017418,
    0.024091359227895737,
    -0.023696864023804665,
    -0.010148026049137115,
    -0.015276451595127583,
    -0.00038620480336248875,
    0.005437899846583605,
    -0.012283735908567905,
    0.04657753184437752,
    0.025587717071175575,
    -0.021425120532512665,
    0.009617499075829983,
    0.040102384984493256,
    -0.029600676149129868,
    -0.025886988267302513,
    -0.0227582398802042,
    0.009909968823194504,
    -0.02772342599928379,
    0.01678641326725483,
    -0.028675654903054237,
    0.0016221877885982394,
    0.007651829160749912,
    0.018962932750582695,
    -0.004591097589582205,
    0.0043972511775791645,
    -0.0024689901620149612,
    0.028213143348693848,
    -0.027002453804016113,
    0.014977180399000645,
    0.013922927901148796,
    -0.004346238914877176,
    -0.028022699058055878,
    -0.012827866710722446,
    0.020608926191926003,
    -0.007039682473987341,
    0.01543969102203846,
    0.03672878071665764,
    0.00031818856950849295,
    0.021860424429178238,
    -0.016568761318922043,
    0.049107737839221954,
    0.0020234836265444756,
    -0.004968587774783373,
    -0.03457946702837944,
    -0.022037267684936523,
    0.0028056707233190536,
    -9.437256085220724e-05,
    -0.02079937234520912,
    0.0015176127199083567,
    -0.018758883699774742,
    -0.012691834010183811,
    0.0013169647427275777,
    0.0008587052579969168,
    0.014977180399000645,
    -0.007570209447294474,
    -0.0004888668772764504,
    -0.015888597816228867,
    0.02406415157020092,
    -0.0008297983440570533,
    -0.018813297152519226,
    -0.02282625623047352,
    -0.01882690005004406,
    -0.006934257689863443,
    0.009161789901554585,
    0.011277095414698124,
    0.009991588070988655,
    -0.010943816043436527,
    -0.004529882688075304,
    -0.030253631994128227,
    0.01128389686346054,
    -0.009848753921687603,
    0.021343501284718513,
    -0.02248617447912693,
    -0.03912295028567314,
    0.008263975381851196,
    0.012963898479938507,
    -0.0262270700186491,
    0.0136508634313941,
    0.03958546370267868,
    0.021778805181384087,
    -2.1361356630222872e-05,
    -0.009522275999188423,
    0.01933022029697895,
    0.008536040782928467,
    0.015140418894588947,
    0.02633589506149292,
    -0.014473860152065754,
    -0.01897653564810753,
    0.015045195817947388,
    0.023166337981820107,
    0.011583168990910053,
    0.005057008937001228,
    -0.015262848697602749,
    0.0006890897057019174,
    -0.017112890258431435,
    0.02452666312456131,
    -0.0005743122892454267,
    0.029899947345256805,
    -0.03142351284623146,
    0.011583168990910053,
    5.627282735076733e-05,
    -0.0015966816572472453,
    0.005223648622632027,
    0.029600676149129868,
    0.004978789947926998,
    0.020894594490528107,
    -0.00221903040073812,
    -0.004502676427364349,
    -0.01624228246510029,
    -0.021615566685795784,
    0.0028005694039165974,
    -0.0153444679453969,
    0.010590131394565105,
    0.0072709377855062485,
    0.02421378716826439,
    -0.008978146128356457,
    -0.018541231751441956,
    -0.03049848973751068,
    0.024431439116597176,
    0.017153700813651085,
    0.002467289799824357,
    -0.0060194386169314384,
    -0.008733287453651428,
    -0.005077413748949766,
    0.03422578051686287,
    0.004869963973760605,
    0.011331508867442608,
    -0.022499777376651764,
    -0.01605183631181717,
    0.0003519841411616653,
    0.011841630563139915,
    0.018187547102570534,
    -0.00264243152923882,
    -0.0170992873609066,
    -0.00521684717386961,
    0.00825717393308878,
    -0.0005649600643664598,
    -0.008808105252683163,
    0.005754175595939159,
    -0.008964543230831623,
    0.018228357657790184,
    -0.0341169536113739,
    0.03855161368846893,
    -0.008842113427817822,
    0.013562441803514957,
    -0.016065441071987152,
    0.029709501191973686,
    -0.01289588212966919,
    -0.0014419446233659983,
    0.012583008036017418,
    0.013596449978649616,
    0.015276451595127583,
    0.02313913032412529,
    -0.014405843801796436,
    -0.010250049643218517,
    0.019860748201608658,
    0.003645671531558037,
    0.019615888595581055,
    0.01164438296109438,
    0.006383325904607773,
    -0.0030505291651934385,
    0.0010534018510952592,
    0.038905300199985504,
    0.011753208935260773,
    0.008950939401984215,
    0.008297983556985855,
    0.03357282653450966,
    0.017303336411714554,
    0.040020767599344254,
    -0.02976391464471817,
    -0.02875727415084839,
    -0.02017362229526043,
    -0.031668368726968765,
    -0.02892051264643669,
    0.0006512556574307382,
    -0.007577011361718178,
    0.01897653564810753,
    -0.03719129040837288,
    0.021588360890746117,
    0.019955970346927643,
    0.02957346849143505,
    0.024322614073753357,
    0.011753208935260773,
    0.00816195085644722,
    -0.007196119986474514,
    -0.05074013024568558,
    0.0319676399230957,
    0.02124827913939953,
    -0.007917092181742191,
    -0.024091359227895737,
    -0.010250049643218517,
    0.030253631994128227,
    -0.03365444391965866,
    0.045108381658792496,
    0.013576044701039791,
    0.028022699058055878,
    -0.0012013372033834457,
    0.011848432011902332,
    -0.015834184363484383,
    0.0022462368942797184,
    0.027315329760313034,
    -0.022554190829396248,
    0.003982352092862129,
    -0.012929890304803848,
    0.005747373681515455,
    -0.0023737673182040453,
    0.012691834010183811,
    0.018690867349505424,
    0.05454903841018677,
    0.016840824857354164,
    -0.004268020391464233,
    8.735838491702452e-05,
    0.006342516280710697,
    -0.009821547195315361,
    -0.01733054220676422,
    -0.0010542520321905613,
    0.01361005287617445,
    -0.014337827451527119,
    0.018241960555315018,
    -0.016378315165638924,
    0.0007817618898116052,
    -0.0012812562054023147,
    0.008835311979055405,
    -0.009100575000047684,
    -0.0032052660826593637,
    -0.024240994825959206,
    -0.002054091077297926,
    0.025206824764609337,
    0.017616210505366325,
    -0.00017684226622805,
    0.00985555537045002,
    0.03479711711406708,
    -0.005019600037485361,
    -0.02545168437063694,
    -0.04565251246094704,
    -0.015970217064023018,
    0.016391918063163757,
    0.011175070889294147,
    -0.026975248008966446,
    0.004305429290980101,
    0.007100897375494242,
    0.008447619155049324,
    0.019398236647248268,
    0.010114017874002457,
    0.004781542811542749,
    0.00810753833502531,
    -0.010290860198438168,
    -0.01874528080224991,
    -0.0029212983790785074,
    0.014351430349051952,
    0.030933793634176254,
    0.010406487621366978,
    0.003530043875798583,
    0.026390308514237404,
    -0.011222682893276215,
    0.0013297178084030747,
    -0.00014623496099375188,
    -0.024581074714660645,
    0.009114178828895092,
    -0.0020829979330301285,
    0.0033668046817183495,
    0.03525962680578232,
    -0.014963576570153236,
    0.040211211889982224,
    0.012637420557439327,
    0.009120980277657509,
    0.014487463049590588,
    -0.005077413748949766,
    0.009909968823194504,
    -0.00020202953601256013,
    0.012283735908567905,
    0.01563013531267643,
    5.494438300956972e-05,
    -0.03150513023138046,
    -0.008726486004889011,
    0.01432422362267971,
    -0.003448424395173788,
    0.015874994918704033,
    0.019507063552737236,
    -0.0008680574828758836,
    -0.03150513023138046,
    -0.023506417870521545,
    0.006539763417094946,
    -7.859065954107791e-05,
    0.03572214022278786,
    0.002453686436638236,
    0.007114500738680363,
    -0.051501911133527756,
    -0.01054932177066803,
    -0.033137522637844086,
    -0.015466896817088127,
    -0.01901734620332718,
    -0.0021697187330573797,
    -0.003904133103787899,
    0.010195637121796608,
    0.033790476620197296,
    -0.01003239769488573,
    -0.03479711711406708,
    -0.01712649315595627,
    -0.009080170653760433,
    -0.021697185933589935,
    0.03430740162730217,
    0.03512359410524368,
    -0.000507146236486733,
    0.00582219148054719,
    0.00129996077157557,
    -0.0006393528310582042,
    -0.010930212214589119,
    -0.003161055501550436,
    -0.013657664880156517,
    -0.017833862453699112,
    -0.04546206817030907,
    -0.005080814473330975,
    -0.00952907744795084,
    0.005539924371987581,
    -0.004992393311113119,
    0.01794268935918808,
    0.033600032329559326,
    -0.015738962218165398,
    0.02055451273918152,
    0.0061316657811403275,
    -0.026594357565045357,
    0.01120227761566639,
    0.014609891921281815,
    -0.006298305466771126,
    0.017153700813651085,
    -0.0048665632493793964,
    -0.019303014501929283,
    -0.002380568999797106,
    -0.012977502308785915,
    0.019411839544773102,
    0.006720006465911865,
    0.009807944297790527,
    0.003067533252760768,
    0.0071349055506289005,
    -0.00029778367024846375,
    -0.019411839544773102,
    -0.012331347912549973,
    0.006182678043842316,
    -0.021697185933589935,
    0.018894916400313377,
    0.008474825881421566,
    0.015276451595127583,
    -2.810984369716607e-05,
    -0.015154022723436356,
    0.01084179151803255,
    0.0005215996643528342,
    -0.00570656405761838,
    -0.009080170653760433,
    -0.033055901527404785,
    0.007400169037282467,
    0.01492276694625616,
    -0.010984625667333603,
    0.026499133557081223,
    -0.008692477829754353,
    -0.005203243810683489,
    -0.02271742932498455,
    0.005709964781999588,
    0.02391451597213745,
    0.00822316575795412,
    0.01674560271203518,
    0.006294904742389917,
    0.017493780702352524,
    -0.004876765888184309,
    0.033627238124608994,
    0.010515313595533371,
    -0.011617177166044712,
    -0.015385277569293976,
    -0.022227713838219643,
    0.006832233164459467,
    -0.014541875571012497,
    -0.003399112494662404,
    -0.024730712175369263,
    -0.022649414837360382,
    -0.028158729895949364,
    0.02206447347998619,
    0.01632390171289444,
    0.009610697627067566,
    -0.016119852662086487,
    0.008502032607793808,
    -0.028485208749771118,
    -0.006145268678665161,
    0.0010176933137699962,
    -0.01844600960612297,
    0.022159697487950325,
    -0.0013178150402382016,
    0.016378315165638924,
    0.04026562348008156,
    0.039721496403217316,
    0.0017429166473448277,
    0.023247957229614258,
    0.00950867310166359,
    0.004608101677149534,
    -0.011780415661633015,
    -0.006012637168169022,
    0.005125024821609259,
    -0.006543164141476154,
    -0.02780504710972309,
    0.009807944297790527,
    0.026172656565904617,
    0.017357749864459038,
    -0.006546564865857363,
    0.017684226855635643,
    0.017072081565856934,
    -0.008053124882280827,
    -0.01027725636959076,
    -0.00593101792037487,
    -0.019724715501070023,
    -0.014065762050449848,
    -0.01933022029697895,
    -0.012195315212011337,
    0.01054932177066803,
    -0.0407281368970871,
    -0.01790187880396843,
    0.015208435244858265,
    -0.009807944297790527,
    0.015970217064023018,
    -0.007230128161609173,
    0.03243015334010124,
    0.007114500738680363,
    -0.006230289116501808,
    0.025206824764609337,
    0.04347599297761917,
    -0.002492795931175351,
    0.014596289023756981,
    -0.008168752305209637,
    0.0035436470061540604,
    0.029791120439767838,
    0.023247957229614258,
    0.010617338120937347,
    -0.010596932843327522,
    0.01039288379251957,
    0.012787056155502796,
    0.014759528450667858,
    3.831228241324425e-05,
    0.007332152687013149,
    0.038143519312143326,
    -0.033055901527404785,
    -0.011453937739133835,
    -0.01752098836004734,
    -0.05044085532426834,
    -0.02248617447912693,
    0.01099142711609602,
    -0.01802430860698223,
    0.030090391635894775,
    0.008882923051714897,
    -0.028730066493153572,
    -0.01571175642311573,
    0.023696864023804665,
    0.0006431787624023855,
    0.04165315628051758,
    0.007304945960640907,
    0.01469151210039854,
    0.012875477783381939,
    0.013140740804374218,
    -0.024050548672676086,
    -0.0339537151157856,
    -0.005223648622632027,
    -0.015562119893729687,
    0.008202760480344296,
    0.01682722195982933,
    -0.009495069272816181,
    -0.01168519351631403,
    0.010862196795642376,
    0.014392239972949028,
    -0.014160985127091408,
    -0.0203232578933239,
    0.013929729349911213,
    0.0006202232325449586,
    -0.007474986836314201,
    -0.023805690929293633,
    0.010562924668192863,
    -8.475463255308568e-05,
    0.00012933716061525047,
    -0.02460828237235546,
    -0.020037589594721794,
    0.009760333225131035,
    -0.0020710951648652554,
    0.0053290738724172115,
    -0.020704148337244987,
    0.007679035421460867,
    0.004084376152604818,
    0.009841952472925186,
    -0.019398236647248268,
    -0.011889241635799408,
    -0.01790187880396843,
    -0.011073046363890171,
    -0.012555801309645176,
    -0.009556284174323082,
    0.02826755680143833,
    -0.01762981340289116,
    0.001462349551729858,
    0.02875727415084839,
    0.015643740072846413,
    -0.014569082297384739,
    0.01933022029697895,
    0.011481144465506077,
    0.031940434128046036,
    -0.025356460362672806,
    0.004281623288989067,
    -0.01790187880396843,
    -0.01370527595281601,
    0.013718878850340843,
    -0.02090819738805294,
    -0.0025455085560679436,
    -0.01655515655875206,
    -0.005754175595939159,
    -0.011440334841609001,
    0.0077470517717301846,
    -0.027505774050951004,
    -0.018541231751441956,
    -0.026635166257619858,
    0.009209400974214077,
    -0.024200184270739555,
    -0.009161789901554585,
    -0.020282447338104248,
    0.0018211352871730924,
    -0.012004869990050793,
    -0.001911256811581552,
    -0.004295226652175188,
    -0.0033940111752599478,
    -1.8438782717566937e-05,
    0.019398236647248268,
    -0.0007026929524727166,
    -0.001559272757731378,
    0.04377526417374611,
    -0.014487463049590588,
    0.010556123219430447,
    -0.013079526834189892,
    -0.01355564035475254,
    -0.016881635412573814,
    0.006233689840883017,
    -0.0004705874889623374,
    -0.008536040782928467,
    0.028974926099181175,
    -0.008454420603811741,
    -0.04505397006869316,
    -0.03846999630331993,
    0.013895721174776554,
    0.02675759606063366,
    -0.008495230227708817,
    -0.01339920237660408,
    0.0038293153047561646,
    0.006560168229043484,
    0.006056847982108593,
    0.012086489237844944,
    -0.02021443098783493,
    0.03670157119631767,
    -0.02059532329440117,
    -0.017276128754019737,
    0.04246935248374939,
    0.0013110133586451411,
    0.025206824764609337,
    -0.013678069226443768,
    -0.005570531357079744,
    0.0004425307852216065,
    -0.02098981663584709,
    -0.01235855370759964,
    0.0019826740026474,
    0.0030301243532449007,
    -0.0049243769608438015,
    0.027968285605311394,
    -0.006060248706489801,
    -0.027560187503695488,
    -0.013759689405560493,
    0.012440173886716366,
    0.022962288931012154,
    0.005638547707349062,
    0.031124239787459373,
    0.023805690929293633,
    0.01632390171289444,
    0.01886771060526371,
    -0.019724715501070023,
    -0.024581074714660645,
    -0.01779305376112461,
    -0.02987273968756199,
    -0.0408913753926754,
    -0.017112890258431435,
    -0.02128908783197403,
    0.029546262696385384,
    0.010848592966794968,
    -0.004815550986677408,
    -0.014881957322359085,
    1.2035688996547833e-05,
    -0.012480983510613441,
    -0.007855878211557865,
    -0.025084396824240685,
    0.03773542121052742,
    0.011814423836767673,
    0.01733054220676422,
    0.030906587839126587,
    0.017969895154237747,
    -0.017425766214728355,
    0.02845800295472145,
    -0.01844600960612297,
    -0.01087579969316721,
    0.018377993255853653,
    0.00682543171569705,
    0.0017131594941020012,
    -0.01099142711609602,
    -0.015426087193191051,
    -0.003281784476712346,
    0.019656699150800705,
    0.013875316828489304,
    0.001912957290187478,
    0.0273017268627882,
    -0.026199862360954285,
    -0.0019265605369582772,
    -0.008529238402843475,
    -0.005206644535064697,
    -0.025274841114878654,
    0.014147381298244,
    -0.008352396078407764,
    -0.017384955659508705,
    0.0032154684886336327,
    0.002137410920113325,
    0.0016264388104900718,
    0.005482110194861889,
    0.004567291587591171,
    0.020336860790848732,
    -0.01952066645026207,
    0.005910612642765045,
    -0.004441461525857449,
    -0.02345200628042221,
    -0.012807461433112621,
    -0.0052576567977666855,
    0.017915481701493263,
    0.001473402138799429,
    0.022010061889886856,
    0.030362457036972046,
    0.0061758761294186115,
    -0.023996135219931602,
    -0.02532925456762314,
    -0.008053124882280827,
    -0.03931339830160141,
    -0.019996779039502144,
    0.005519519560039043,
    0.0038803275674581528,
    -0.008889724500477314,
    0.000790689024142921,
    0.013943333178758621,
    -0.0077606551349163055,
    -0.023764880374073982,
    0.004278222564607859,
    0.006951261777430773,
    -0.04755696654319763,
    0.012991105206310749,
    -0.00549571355804801,
    0.005767778493463993,
    0.00025314799859188497,
    0.01628309302031994,
    0.00026717636501416564,
    0.010154827497899532,
    0.004506077151745558,
    -0.005091017112135887,
    -0.00837280135601759,
    0.02526123821735382,
    -0.007372962310910225,
    -0.030933793634176254,
    -0.021343501284718513,
    0.0011843331158161163,
    0.0017735239816829562,
    -0.017929086461663246,
    0.025669336318969727,
    0.1677008867263794,
    0.024825934320688248,
    0.014174588024616241,
    0.01802430860698223,
    -0.00810753833502531,
    0.0012021873844787478,
    0.014052159152925014,
    0.013433210551738739,
    -0.03961266949772835,
    0.022200506180524826,
    -0.011889241635799408,
    0.007073690649122,
    -0.023533625528216362,
    0.01378689520061016,
    0.011555962264537811,
    -0.02303030528128147,
    -0.025628525763750076,
    -0.029328610748052597,
    -0.02938302420079708,
    -0.005322271957993507,
    0.03830675780773163,
    -0.0031831609085202217,
    0.007985108532011509,
    -0.02764180675148964,
    0.01128389686346054,
    -0.006703002378344536,
    -0.0059684268198907375,
    0.015385277569293976,
    0.013644061051309109,
    0.020105605944991112,
    -0.016759205609560013,
    0.006182678043842316,
    -0.00031202458194456995,
    -0.0076178209856152534,
    -0.017956292256712914,
    -0.014501065947115421,
    -0.004067372065037489,
    -0.015888597816228867,
    0.026390308514237404,
    0.027546584606170654,
    -0.032022055238485336,
    -0.047801826149225235,
    -0.008638064377009869,
    -0.031233064830303192,
    0.004492473788559437,
    -0.01465070154517889,
    -0.012997906655073166,
    -0.01378689520061016,
    -0.008753692731261253,
    0.02560131996870041,
    -0.010896204970777035,
    0.005482110194861889,
    0.005652151070535183,
    0.016650380566716194,
    0.002042188076302409,
    -0.00403336388990283,
    0.01844600960612297,
    0.015086006373167038,
    -0.008461222052574158,
    0.016065441071987152,
    -0.02522042766213417,
    0.021588360890746117,
    -0.01370527595281601,
    -0.00606364943087101,
    -0.02664876915514469,
    -0.004138789139688015,
    -0.02391451597213745,
    0.0064513422548770905,
    -0.0062268883921206,
    -0.0025676137302070856,
    -0.028702860698103905,
    -0.0340353362262249,
    0.005818790756165981,
    -0.002537006512284279,
    0.00029799624462611973,
    -0.01918058469891548,
    0.02549249306321144,
    0.021384311839938164,
    -0.006138467229902744,
    0.04377526417374611,
    -0.003530043875798583,
    0.001250648987479508,
    -0.007556606084108353,
    -0.014949973672628403,
    0.020608926191926003,
    -0.003944943193346262,
    0.021737996488809586,
    -0.009223004803061485,
    0.0025778161361813545,
    -0.0008183206082321703,
    -0.011834829114377499,
    -0.028947720304131508,
    -0.010889402590692043,
    -0.02290787547826767,
    0.007828671485185623,
    0.016609570011496544,
    0.00013103756646160036,
    -0.019683904945850372,
    -0.010324868373572826,
    0.02621346525847912,
    -0.0249075535684824,
    0.06654710322618484,
    0.006852637976408005,
    0.019819937646389008,
    -0.005097818560898304,
    0.009440656751394272,
    -0.013385599479079247,
    0.02456747181713581,
    0.0006623083027079701,
    -0.013868515379726887,
    -0.0032902865204960108,
    -0.01840519905090332,
    -0.010148026049137115,
    0.004189801402390003,
    -0.007849075831472874,
    0.012215719558298588,
    -0.029355816543102264,
    -0.010522115044295788,
    -0.005699762608855963,
    0.000754555338062346,
    -0.031178653240203857,
    -0.019384633749723434,
    0.0013382198521867394,
    0.004506077151745558,
    -0.014351430349051952,
    -0.013276773504912853,
    -0.012617016211152077,
    0.0035232421942055225,
    -0.013922927901148796,
    -0.030362457036972046,
    0.010080009698867798,
    0.004084376152604818,
    0.02736974135041237,
    -0.007713043596595526,
    -0.00042658948223106563,
    -0.019643094390630722,
    -0.014310620725154877,
    -0.015684548765420914,
    -0.004540085326880217,
    0.022200506180524826,
    -0.012753047980368137,
    0.0019078560872003436,
    0.004315631464123726,
    -0.024785123765468597,
    0.012236124835908413,
    -0.007713043596595526,
    -0.0017667223000898957,
    0.008025918155908585,
    -0.021669980138540268,
    -0.015997424721717834,
    -0.024513060227036476,
    -0.012004869990050793,
    0.024431439116597176,
    -0.010345272719860077,
    0.016963254660367966,
    -0.010474503971636295,
    -0.0002633504627738148,
    -0.013508029282093048,
    0.024499455466866493,
    0.008828510530292988,
    -0.04197963327169418,
    -0.013984142802655697,
    0.003788505680859089,
    0.0012965599307790399,
    -0.030852174386382103,
    -0.015602929517626762,
    -0.17227157950401306,
    -0.00014262158947531134,
    0.005091017112135887,
    -0.05250855162739754,
    0.003961946815252304,
    -0.015779772773385048,
    0.0008310736739076674,
    0.023111924529075623,
    -0.011623978614807129,
    0.0010806083446368575,
    0.01191644836217165,
    0.013970538973808289,
    -0.030008772388100624,
    -0.0037272910121828318,
    0.0009692316525615752,
    -0.019507063552737236,
    -0.012528594583272934,
    0.012637420557439327,
    0.040755342692136765,
    0.0069784680381417274,
    0.02768261730670929,
    -0.02364245057106018,
    0.012970700860023499,
    0.00469652283936739,
    -0.014065762050449848,
    0.008134744130074978,
    -0.002254738938063383,
    -0.004285024479031563,
    0.027097677811980247,
    -0.009134583175182343,
    -0.02984553389251232,
    0.0238328967243433,
    0.003587857587262988,
    -0.012317744083702564,
    0.015602929517626762,
    0.005393689032644033,
    0.015847787261009216,
    -0.029791120439767838,
    -0.021996457129716873,
    0.014501065947115421,
    0.036130234599113464,
    0.032402943819761276,
    -0.0009641304495744407,
    -0.005539924371987581,
    -0.004302028100937605,
    0.026893628761172295,
    0.0020812975708395243,
    -0.014854750595986843,
    -0.01752098836004734,
    -0.03033525124192238,
    0.0361846499145031,
    -0.0361030288040638,
    0.002725751604884863,
    0.005237251985818148,
    0.020336860790848732,
    -0.0036388698499649763,
    0.012215719558298588,
    0.010025596246123314,
    -0.023438403382897377,
    -0.023016702383756638,
    -0.015534913167357445,
    -0.02517961896955967,
    -0.007447780109941959,
    0.001805831678211689,
    -0.012494586408138275,
    0.004941381048411131,
    -0.012297339737415314,
    0.012229323387145996,
    -0.031668368726968765,
    0.004543486051261425,
    0.019493458792567253,
    -0.010345272719860077,
    -0.007515796460211277,
    -0.008080331608653069,
    0.004114983603358269,
    0.017833862453699112,
    -0.04034724459052086,
    0.03876926749944687,
    0.03588537871837616,
    -0.023125527426600456,
    -0.006907050963491201,
    0.028294762596488,
    0.0008782599470578134,
    0.02564212866127491,
    -0.0016561958473175764,
    -0.02052730694413185,
    0.006890046875923872,
    -0.004893769975751638,
    -0.01263061910867691,
    0.0015533212572336197,
    0.018309976905584335,
    -0.01239936426281929,
    0.01855483464896679,
    -0.022703826427459717,
    -0.0038735258858650923,
    0.015684548765420914,
    -0.010290860198438168,
    -0.010794180445373058,
    -0.004366643726825714,
    -0.0032290718518197536,
    0.004944781772792339,
    -0.025166016072034836,
    -0.011297500692307949,
    -0.01994236744940281,
    0.04100019857287407,
    0.008032720535993576,
    -0.023003097623586655,
    0.030199218541383743,
    0.042333319783210754,
    -0.010630941018462181,
    -0.016813619062304497,
    -0.00412858696654439,
    0.02864844724535942,
    -0.004903972148895264,
    0.0004914174787700176,
    0.024363422766327858,
    0.015412484295666218,
    -0.010175231844186783,
    0.005016198847442865,
    0.002550609642639756,
    0.03591258451342583,
    0.022363746538758278,
    -0.013678069226443768,
    -0.002630528761073947,
    -0.023383989930152893,
    -0.017779449000954628,
    -0.08619020134210587,
    -0.032783836126327515,
    0.0013288676273077726,
    0.008359198458492756,
    -0.0339537151157856,
    -0.012766651809215546,
    -0.03904133290052414,
    0.006084054242819548,
    0.01114786509424448,
    -0.012766651809215546,
    -0.01016162894666195,
    0.03256618604063988,
    -0.022921478375792503,
    0.013365195132791996,
    0.001604333519935608,
    -0.01563013531267643,
    -0.03131468594074249,
    -0.0014793536392971873,
    -0.003348100231960416,
    0.014569082297384739,
    0.0036048616748303175,
    -0.0013050619745627046,
    0.0084884287789464,
    -0.015834184363484383,
    -0.008685676380991936,
    0.009542681276798248,
    -0.01962949149310589,
    0.0013144141994416714,
    0.033790476620197296,
    0.016527950763702393,
    -0.010481305420398712,
    -0.01003239769488573,
    -0.003409314900636673,
    0.013276773504912853,
    -0.0030131202656775713,
    -0.027396949008107185,
    -0.03689201921224594,
    -0.020377671346068382,
    0.040374450385570526,
    -0.011372318491339684,
    -0.009250211529433727,
    0.007332152687013149,
    0.016663983464241028,
    -0.017833862453699112,
    -0.018078722059726715,
    0.030852174386382103,
    -0.009059765376150608,
    0.0316411629319191,
    0.010984625667333603,
    -0.033246345818042755,
    -0.027560187503695488,
    -0.029138164594769478,
    -0.027356138452887535,
    -0.015330864116549492,
    0.009338632225990295,
    -0.010018794797360897,
    -0.005131826736032963,
    0.028049904853105545,
    -0.01644633151590824,
    -0.0004735632101073861,
    -0.0044822716154158115,
    -0.01201167143881321,
    -0.01886771060526371,
    0.012270133011043072,
    0.0032188694458454847,
    0.007991909980773926,
    0.021656377241015434,
    -0.004441461525857449,
    0.024662695825099945,
    -0.011324707418680191,
    -0.007713043596595526,
    0.010923410765826702,
    -0.011487945914268494,
    0.007522597908973694,
    -0.014990783296525478,
    -0.008263975381851196,
    -0.00389393069781363,
    -0.0002846055431291461,
    0.004754336550831795,
    -0.0016902040224522352,
    -0.007991909980773926,
    0.0010610535973683,
    -0.0059684268198907375,
    0.002758059184998274,
    0.02290787547826767,
    0.01905815489590168,
    0.005352879408746958,
    -0.003422918263822794,
    0.0339537151157856,
    -0.018201150000095367,
    0.01844600960612297,
    0.0006627333932556212,
    0.0453532412648201,
    0.007529399823397398,
    0.0015490702353417873,
    -0.0071485089138150215,
    -0.008168752305209637,
    -0.008651668205857277,
    -0.02911095879971981,
    0.015657342970371246,
    -0.05044085532426834,
    0.004869963973760605,
    -0.08379603177309036,
    0.027859458699822426,
    -0.017153700813651085,
    -0.01191644836217165,
    0.009773936122655869,
    -0.02298949472606182,
    0.007216524798423052,
    -0.017657021060585976,
    0.019847143441438675,
    0.023778483271598816,
    -0.03591258451342583,
    -0.01716730371117592,
    -0.0028991929721087217,
    0.018609248101711273,
    -0.019656699150800705,
    -0.0013747785706073046,
    0.026730390265583992,
    -0.010229645296931267,
    0.04850919544696808,
    -0.00846802443265915,
    -0.011719201691448689,
    -0.017044873908162117,
    0.021765202283859253,
    0.004349639639258385,
    -0.02298949472606182,
    -0.0011936853406950831,
    -0.011508351191878319,
    -0.003314092056825757,
    0.0005675106658600271,
    0.0028311768546700478,
    0.01733054220676422,
    -0.00814154651015997,
    0.005267858970910311,
    0.035939790308475494,
    0.002380568999797106,
    -0.005832394119352102,
    0.026539944112300873,
    0.021588360890746117,
    0.02418658137321472,
    -0.0012480983277782798,
    0.006985269486904144,
    -0.01863645389676094,
    0.013759689405560493,
    0.01933022029697895,
    0.004421056713908911,
    -0.012324545532464981,
    0.0022105283569544554,
    0.006039843894541264,
    0.037245701998472214,
    0.02122107334434986,
    0.04347599297761917,
    0.004917575512081385,
    -0.024200184270739555,
    -0.026512736454606056,
    -0.009420251473784447,
    -0.009488267824053764,
    0.031097033992409706,
    -0.007917092181742191,
    -0.014229001477360725,
    0.02764180675148964,
    0.030580108985304832,
    -0.005757576320320368,
    0.009862357750535011,
    -0.00021318845392670482,
    0.0018500422593206167,
    -0.033246345818042755,
    -0.038633234798908234,
    -0.010372479446232319,
    -0.013215558603405952,
    -0.007556606084108353,
    -0.03272942453622818,
    -0.03577655181288719,
    0.007910290732979774,
    0.015004386194050312,
    0.02147953398525715,
    -0.033055901527404785,
    -0.007638225797563791,
    -0.01212729886174202,
    -0.01557572279125452,
    0.0056351469829678535,
    0.023846499621868134,
    -0.0012336448999121785,
    -0.01886771060526371,
    0.008447619155049324,
    0.008318387903273106,
    -0.022010061889886856,
    -0.017031271010637283,
    -0.01286187395453453,
    -0.002974010771140456,
    0.006750613451004028,
    -0.0027750632725656033,
    -0.004523081239312887,
    0.008978146128356457,
    0.029083751142024994,
    0.00580518739297986,
    -0.016351107507944107,
    -0.004917575512081385,
    -0.02124827913939953,
    0.014133778400719166,
    0.01767062395811081,
    0.009705919772386551,
    -0.0057983859442174435,
    0.009862357750535011,
    -0.007046484388411045,
    -0.008495230227708817,
    -0.002735954010859132,
    0.00012710537703242153,
    -0.04268700256943703,
    0.02160196378827095,
    -0.012719039805233479,
    0.007556606084108353,
    -0.025614922866225243,
    -0.0012719039805233479,
    0.010052802972495556,
    -0.016663983464241028,
    0.01659596711397171,
    -0.009161789901554585,
    0.009046162478625774,
    -0.02652634121477604,
    0.01670479215681553,
    0.002111904788762331,
    0.01651434786617756,
    0.0498967282474041,
    -0.007944298908114433,
    0.0072981445118784904,
    0.0016094347229227424,
    0.01110705453902483,
    -0.004302028100937605,
    0.0113179050385952,
    -0.011229484342038631,
    0.0071349055506289005,
    -0.0030267233960330486,
    -0.04355761036276817,
    0.005441300570964813,
    0.0021510140504688025,
    0.01274624653160572,
    0.023193543776869774,
    0.015276451595127583,
    -0.01724892295897007,
    0.07612379640340805,
    -0.004376846365630627,
    -0.024730712175369263,
    0.01201167143881321,
    -0.011970861814916134,
    0.021778805181384087,
    0.005135227460414171,
    0.0067880223505198956,
    0.021901234984397888,
    -0.018527628853917122,
    0.00464891130104661,
    0.005519519560039043,
    -0.0239553265273571,
    0.0029349015094339848,
    -0.03291986882686615,
    0.0007741100271232426,
    -0.029927153140306473,
    0.04023841768503189,
    -0.014201794750988483,
    0.0011018633376806974,
    0.023383989930152893,
    0.01844600960612297,
    0.011841630563139915,
    -0.013011510483920574,
    -0.042986273765563965,
    -0.005669155158102512,
    0.0454348586499691,
    0.02875727415084839,
    -0.00021371983166318387,
    -0.047257695347070694,
    0.012651024386286736,
    0.014052159152925014,
    -0.012079687789082527,
    -0.04184360057115555,
    0.001841540215536952,
    0.0024808929301798344,
    -0.000992187182419002,
    -0.02437702752649784,
    -0.0060908556915819645,
    -0.019819937646389008,
    -0.0006176726310513914,
    -0.01484114769846201,
    -0.02221410907804966,
    -0.03506918251514435,
    0.025125205516815186,
    0.0057847825810313225,
    0.011794019490480423,
    -0.009841952472925186,
    -0.022322935983538628
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering"
  ],
  "description": "caching for analytic computations\n---------------------------------\n\nhumans repeat stuff.  caching helps.\n\nnormal caching policies like lru aren't well suited for analytic computations\nwhere both the cost of recomputation and the cost of storage routinely vary by\none million or more.  consider the following computations\n\n```python\n# want this\nnp.std(x)        # tiny result, costly to recompute\n\n# don't want this\nnp.transpose(x)  # huge result, cheap to recompute\n```\n\ncachey tries to hold on to values that have the following characteristics\n\n1. expensive to recompute (in seconds)\n2. cheap to store (in bytes)\n3. frequently used\n4. recenty used\n\nit accomplishes this by adding the following to each items score on each access\n\n    score += compute_time / num_bytes * (1 + eps) ** tick_time\n\nfor some small value of epsilon (which determines the memory halflife.) this\nhas units of inverse bandwidth, has exponential decay of old results and\nroughly linear amplification of repeated results.\n\nexample\n-------\n\n```python\n>>> from cachey import cache\n>>> c = cache(1e9, 1)  # 1 gb, cut off anything with cost 1 or less\n\n>>> c.put('x', 'some value', cost=3)\n>>> c.put('y', 'other value', cost=2)\n\n>>> c.get('x')\n'some value'\n```\n\nthis also has a `memoize` method\n\n```python\n>>> memo_f = c.memoize(f)\n```\n\nstatus\n------\n\ncachey is new and not robust.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "cachey",
  "package_url": "https://pypi.org/project/cachey/",
  "project_url": "https://pypi.org/project/cachey/",
  "project_urls": {
    "Homepage": "http://github.com/dask/cachey/"
  },
  "release_url": "https://pypi.org/project/cachey/0.2.1/",
  "requires_dist": [
    "heapdict"
  ],
  "requires_python": ">=3.6",
  "summary": "caching mindful of computation/storage costs",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "matthew_rocklin",
    "mrocklin@gmail.com"
  ],
  "kwds": "caching cache cachey computations memory",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_cachey",
  "homepage": "http://github.com/dask/cachey/",
  "release_count": 6,
  "dependency_ids": [
    "pypi_heapdict"
  ]
}
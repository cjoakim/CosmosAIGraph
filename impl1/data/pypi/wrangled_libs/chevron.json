{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: text processing :: markup"
  ],
  "description": "[![pypi version](https://badge.fury.io/py/chevron.svg)](https://badge.fury.io/py/chevron)\n[![build status](https://travis-ci.org/noahmorrison/chevron.svg?branch=master)](https://travis-ci.org/noahmorrison/chevron)\n[![coverage status](https://coveralls.io/repos/github/noahmorrison/chevron/badge.svg?branch=master)](https://coveralls.io/github/noahmorrison/chevron?branch=master)\n\na python implementation of the [mustache templating language](http://mustache.github.io).\n\nwhy chevron?\n------------\n\ni'm glad you asked!\n\n### chevron is fast ###\n\nchevron runs in less than half the time of [pystache](http://github.com/defunkt/pystache) (which is not even up to date on the spec).\nand in about 70% the time of [stache](https://github.com/hyperturtle/stache) (a 'trimmed' version of mustache, also not spec compliant).\n\n### chevron is pep8 ###\n\nthe flake8 command is run by [travis](https://travis-ci.org/noahmorrison/chevron) to ensure consistency.\n\n### chevron is spec compliant ###\n\nchevron passes all the unittests provided by the [spec](https://github.com/mustache/spec) (in every version listed below).\n\nif you find a test that chevron does not pass, please [report it.](https://github.com/noahmorrison/chevron/issues/new)\n\n### chevron is python 2 and 3 compatible ###\n\npython 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, and 3.6 are all tested by travis.\n\n\n\nusage\n-----\n\ncommandline usage: (if installed via pypi)\n```\nusage: chevron [-h] [-v] [-d data] [-p partials_path] [-e partials_ext]\n               [-l def_ldel] [-r def_rdel]\n               template\n\npositional arguments:\n  template              the mustache file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -d data, --data data  the json data file\n  -p partials_path, --path partials_path\n                        the directory where your partials reside\n  -e partials_ext, --ext partials_ext\n                        the extension for your mustache partials, 'mustache'\n                        by default\n  -l def_ldel, --left-delimiter def_ldel\n                        the default left delimiter, \"{{\" by default.\n  -r def_rdel, --right-delimiter def_rdel\n                        the default right delimiter, \"}}\" by default.\n```\n\npython usage with strings\n```python\nimport chevron\n\nchevron.render('hello, {{ mustache }}!', {'mustache': 'world'})\n```\n\npython usage with file\n```python\nimport chevron\n\nwith open('file.mustache', 'r') as f:\n    chevron.render(f, {'mustache': 'world'})\n```\n\npython usage with unpacking\n```python\nimport chevron\n\nargs = {\n  'template': 'hello, {{ mustache }}!',\n\n  'data': {\n    'mustache': 'world'\n  }\n}\n\nchevron.render(**args)\n```\n\nchevron supports partials (via dictionaries)\n```python\nimport chevron\n\nargs = {\n    'template': 'hello, {{> thing }}!',\n\n    'partials_dict': {\n        'thing': 'world'\n    }\n}\n\nchevron.render(**args)\n```\n\nchevron supports partials (via the filesystem)\n```python\nimport chevron\n\nargs = {\n    'template': 'hello, {{> thing }}!',\n\n    # defaults to .\n    'partials_path': 'partials/',\n\n    # defaults to mustache\n    'partials_ext': 'ms',\n}\n\n# ./partials/thing.ms will be read and rendered\nchevron.render(**args)\n```\n\nchevron supports lambdas\n```python\nimport chevron\n\ndef first(text, render):\n    # return only first occurance of items\n    result = render(text)\n    return [ x.strip() for x in result.split(\" || \") if x.strip() ][0]\n\ndef inject_x(text, render):\n    # inject data into scope\n    return render(text, {'x': 'data'})\n\nargs = {\n    'template': 'hello, {{# first}} {{x}} || {{y}} || {{z}} {{/ first}}!  {{# inject_x}} {{x}} {{/ inject_x}}',\n\n    'data': {\n        'y': 'foo',\n        'z': 'bar',\n        'first': first,\n        'inject_x': inject_x\n    }\n}\n\nchevron.render(**args)\n```\n\ninstall\n-------\n\n- with git\n```\n$ git clone https://github.com/noahmorrison/chevron.git\n```\n\nor using submodules\n```\n$ git submodules add https://github.com/noahmorrison/chevron.git\n```\n\nalso available on pypi!\n\n- with pip\n```\n$ pip install chevron\n```\n\n\n\ntodo\n---\n\n* get popular\n* have people complain\n* fix those complaints\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "chevron",
  "package_url": "https://pypi.org/project/chevron/",
  "project_url": "https://pypi.org/project/chevron/",
  "project_urls": {
    "Homepage": "https://github.com/noahmorrison/chevron"
  },
  "release_url": "https://pypi.org/project/chevron/0.14.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "mustache templating language renderer",
  "version": "0.14.0",
  "releases": [],
  "developers": [
    "noah@morrison.ph",
    "noah_morrison"
  ],
  "kwds": "chevron mustache pypi py svg",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_chevron",
  "homepage": "https://github.com/noahmorrison/chevron",
  "release_count": 28,
  "dependency_ids": []
}
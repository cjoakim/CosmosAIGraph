{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "![python package](https://github.com/gitpython-developers/gitpython/workflows/python%20package/badge.svg)\n[![documentation status](https://readthedocs.org/projects/gitpython/badge/?version=stable)](https://readthedocs.org/projects/gitpython/?badge=stable)\n[![packaging status](https://repology.org/badge/tiny-repos/python:gitpython.svg)](https://repology.org/metapackage/python:gitpython/versions)\n\n## [gitoxide](https://github.com/byron/gitoxide): a peek into the future\u2026\n\ni started working on gitpython in 2009, back in the days when python was 'my thing' and i had great plans with it.\nof course, back in the days, i didn't really know what i was doing and this shows in many places. somewhat similar to\npython this happens to be 'good enough', but at the same time is deeply flawed and broken beyond repair.\n\nby now, gitpython is widely used and i am sure there is a good reason for that, it's something to be proud of and happy about.\nthe community is maintaining the software and is keeping it relevant for which i am absolutely grateful. for the time to come i am happy to continue maintaining gitpython, remaining hopeful that one day it won't be needed anymore.\n\nmore than 15 years after my first meeting with 'git' i am still in excited about it, and am happy to finally have the tools and\nprobably the skills to scratch that itch of mine: implement `git` in a way that makes tool creation a piece of cake for most.\n\nif you like the idea and want to learn more, please head over to [gitoxide](https://github.com/byron/gitoxide), an\nimplementation of 'git' in [rust](https://www.rust-lang.org).\n\n## gitpython\n\ngitpython is a python library used to interact with git repositories, high-level like git-porcelain,\nor low-level like git-plumbing.\n\nit provides abstractions of git objects for easy access of repository data often backed by calling the `git`\ncommand-line program.\n\n### development status\n\nthis project is in **maintenance mode**, which means that\n\n- \u2026there will be no feature development, unless these are contributed\n- \u2026there will be no bug fixes, unless they are relevant to the safety of users, or contributed\n- \u2026issues will be responded to with waiting times of up to a month\n\nthe project is open to contributions of all kinds, as well as new maintainers.\n\n### requirements\n\ngitpython needs the `git` executable to be installed on the system and available in your `path` for most operations.\nif it is not in your `path`, you can help gitpython find it by setting\nthe `git_python_git_executable=<path/to/git>` environment variable.\n\n- git (1.7.x or newer)\n- python >= 3.7\n\nthe list of dependencies are listed in `./requirements.txt` and `./test-requirements.txt`.\nthe installer takes care of installing them for you.\n\n### install\n\ngitpython and its required package dependencies can be installed in any of the following ways, all of which should typically be done in a [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\n#### from pypi\n\nto obtain and install a copy [from pypi](https://pypi.org/project/gitpython/), run:\n\n```bash\npip install gitpython\n```\n\n(a distribution package can also be downloaded for manual installation at [the pypi page](https://pypi.org/project/gitpython/).)\n\n#### from downloaded source code\n\nif you have downloaded the source code, run this from inside the unpacked `gitpython` directory:\n\n```bash\npip install .\n```\n\n#### by cloning the source code repository\n\nto clone the [the github repository](https://github.com/gitpython-developers/gitpython) from source to work on the code, you can do it like so:\n\n```bash\ngit clone https://github.com/gitpython-developers/gitpython\ncd gitpython\n./init-tests-after-clone.sh\n```\n\non windows, `./init-tests-after-clone.sh` can be run in a git bash shell.\n\nif you are cloning [your own fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks), then replace the above `git clone` command with one that gives the url of your fork. or use this [`gh`](https://cli.github.com/) command (assuming you have `gh` and your fork is called `gitpython`):\n\n```bash\ngh repo clone gitpython\n```\n\nhaving cloned the repo, create and activate your [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\nthen make an [editable install](https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs):\n\n```bash\npip install -e \".[test]\"\n```\n\nin the less common case that you do not want to install test dependencies, `pip install -e .` can be used instead.\n\n### limitations\n\n#### leakage of system resources\n\ngitpython is not suited for long-running processes (like daemons) as it tends to\nleak system resources. it was written in a time where destructors (as implemented\nin the `__del__` method) still ran deterministically.\n\nin case you still want to use it in such a context, you will want to search the\ncodebase for `__del__` implementations and call these yourself when you see fit.\n\nanother way assure proper cleanup of resources is to factor out gitpython into a\nseparate process which can be dropped periodically.\n\n#### windows support\n\nsee [issue #525](https://github.com/gitpython-developers/gitpython/issues/525).\n\n### running tests\n\n_important_: right after cloning this repository, please be sure to have executed\nthe `./init-tests-after-clone.sh` script in the repository root. otherwise\nyou will encounter test failures.\n\n#### install test dependencies\n\nensure testing libraries are installed. this is taken care of already if you installed with:\n\n```bash\npip install -e \".[test]\"\n```\n\notherwise, you can run:\n\n```bash\npip install -r test-requirements.txt\n```\n\n#### test commands\n\nto test, run:\n\n```bash\npytest\n```\n\nto lint, and apply automatic code formatting, run:\n\n```bash\npre-commit run --all-files\n```\n\n- linting without modifying code can be done with: `make lint`\n- auto-formatting without other lint checks can be done with: `black .`\n\nto typecheck, run:\n\n```bash\nmypy -p git\n```\n\n#### ci (and tox)\n\nthe same linting, and running tests on all the different supported python versions, will be performed:\n\n- upon submitting a pull request.\n- on each push, *if* you have a fork with github actions enabled.\n- locally, if you run [`tox`](https://tox.wiki/) (this skips any python versions you don't have installed).\n\n#### configuration files\n\nspecific tools:\n\n- configurations for `mypy`, `pytest`, `coverage.py`, and `black` are in `./pyproject.toml`.\n- configuration for `flake8` is in the `./.flake8` file.\n\norchestration tools:\n\n- configuration for `pre-commit` is in the `./.pre-commit-config.yaml` file.\n- configuration for `tox` is in `./tox.ini`.\n- configuration for github actions (ci) is in files inside `./.github/workflows/`.\n\n### contributions\n\nplease have a look at the [contributions file][contributing].\n\n### infrastructure\n\n- [user documentation](http://gitpython.readthedocs.org)\n- [questions and answers](http://stackexchange.com/filters/167317/gitpython)\n- please post on stack overflow and use the `gitpython` tag\n- [issue tracker](https://github.com/gitpython-developers/gitpython/issues)\n  - post reproducible bugs and feature requests as a new issue.\n    please be sure to provide the following information if posting bugs:\n    - gitpython version (e.g. `import git; git.__version__`)\n    - python version (e.g. `python --version`)\n    - the encountered stack-trace, if applicable\n    - enough information to allow reproducing the issue\n\n### how to make a new release\n\n1. update/verify the **version** in the `version` file.\n2. update/verify that the `doc/source/changes.rst` changelog file was updated. it should include a link to the forthcoming release page: `https://github.com/gitpython-developers/gitpython/releases/tag/<version>`\n3. commit everything.\n4. run `git tag -s <version>` to tag the version in git.\n5. _optionally_ create and activate a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). (then the next step can install `build` and `twine`.)\n6. run `make release`.\n7. go to [github releases](https://github.com/gitpython-developers/gitpython/releases) and publish a new one with the recently pushed tag. generate the changelog.\n\n### how to verify a release (deprecated)\n\nnote that what follows is deprecated and future releases won't be signed anymore.\nmore details about how it came to that can be found [in this issue](https://github.com/gitpython-developers/gitdb/issues/77).\n\n----\n\nplease only use releases from `pypi` as you can verify the respective source\ntarballs.\n\nthis script shows how to verify the tarball was indeed created by the authors of\nthis project:\n\n```bash\ncurl https://files.pythonhosted.org/packages/09/bc/ae32e07e89cc25b9e5c793d19a1e5454d30a8e37d95040991160f942519e/gitpython-3.1.8-py3-none-any.whl > gitpython.whl\ncurl https://files.pythonhosted.org/packages/09/bc/ae32e07e89cc25b9e5c793d19a1e5454d30a8e37d95040991160f942519e/gitpython-3.1.8-py3-none-any.whl.asc >  gitpython-signature.asc\ngpg --verify gitpython-signature.asc gitpython.whl\n```\n\nwhich outputs\n\n```bash\ngpg: signature made fr  4 sep 10:04:50 2020 cst\ngpg:                using rsa key 27c50e7f590947d7273a741e85194c08421980c9\ngpg: good signature from \"sebastian thiel (yubikey usb-c) <byronimo@gmail.com>\" [ultimate]\ngpg:                 aka \"sebastian thiel (in rust i trust) <sebastian.thiel@icloud.com>\" [ultimate]\n```\n\nyou can verify that the keyid indeed matches the release-signature key provided in this\nrepository by looking at the keys details:\n\n```bash\ngpg --list-packets ./release-verification-key.asc\n```\n\nyou can verify that the commit adding it was also signed by it using:\n\n```bash\ngit show --show-signature  ./release-verification-key.asc\n```\n\nif you would like to trust it permanently, you can import and sign it:\n\n```bash\ngpg --import ./release-verification-key.asc\ngpg --edit-key 4c08421980c9\n\n> sign\n> save\n```\n\n### projects using gitpython\n\n- [pydriller](https://github.com/ishepard/pydriller)\n- [kivy designer](https://github.com/kivy/kivy-designer)\n- [prowl](https://github.com/nettitude/prowl)\n- [python taint](https://github.com/python-security/pyt)\n- [buster](https://github.com/axitkhurana/buster)\n- [git-ftp](https://github.com/ezyang/git-ftp)\n- [git-pandas](https://github.com/wdm0006/git-pandas)\n- [pygitup](https://github.com/msiemens/pygitup)\n- [pyjfuzz](https://github.com/mseclab/pyjfuzz)\n- [loki](https://github.com/neo23x0/loki)\n- [omniwallet](https://github.com/omnilayer/omniwallet)\n- [gitviper](https://github.com/beayemx/gitviper)\n- [git gud](https://github.com/bthayer2365/git-gud)\n\n### license\n\n[new bsd license](https://opensource.org/license/bsd-3-clause/). see the [license file][license].\n\n[contributing]: https://github.com/gitpython-developers/gitpython/blob/main/contributing.md\n[license]: https://github.com/gitpython-developers/gitpython/blob/main/license\n",
  "docs_url": "https://pythonhosted.org/GitPython/",
  "keywords": "",
  "license": "bsd",
  "name": "gitpython",
  "package_url": "https://pypi.org/project/GitPython/",
  "project_url": "https://pypi.org/project/GitPython/",
  "project_urls": {
    "Homepage": "https://github.com/gitpython-developers/GitPython"
  },
  "release_url": "https://pypi.org/project/GitPython/3.1.40/",
  "requires_dist": [
    "gitdb <5,>=4.0.1",
    "typing-extensions >=3.7.4.3 ; python_version < \"3.8\"",
    "black ; extra == 'test'",
    "coverage[toml] ; extra == 'test'",
    "ddt !=1.4.3,>=1.1.1 ; extra == 'test'",
    "mypy ; extra == 'test'",
    "pre-commit ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-instafail ; extra == 'test'",
    "pytest-subtests ; extra == 'test'",
    "pytest-sugar ; extra == 'test'",
    "mock ; (python_version < \"3.8\") and extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "gitpython is a python library used to interact with git repositories",
  "version": "3.1.40",
  "releases": [],
  "developers": [
    "byronimo@gmail.com",
    "mtrier@gmail.com",
    "sebastian_thiel"
  ],
  "kwds": "gitpython github git python pygitup",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_gitpython",
  "homepage": "https://github.com/gitpython-developers/gitpython",
  "release_count": 93,
  "dependency_ids": [
    "pypi_black",
    "pypi_coverage",
    "pypi_ddt",
    "pypi_gitdb",
    "pypi_mock",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_instafail",
    "pypi_pytest_subtests",
    "pypi_pytest_sugar",
    "pypi_typing_extensions"
  ]
}
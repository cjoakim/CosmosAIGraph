{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# ioc-hunter\n\nioc hunter finds indicators of compromise (ioc). the parse_iocs function can extract iocs from text.  \nthe type_ioc function can determine the ioc type of a string that you pass in.\n\nthe iocs that are recognized are:\n\n- ssdeep\n- sha256\n- sha1\n- md5\n- email\n- ipv4_public\n- ipv4_private\n- ipv6_public\n- ipv6_private\n- filename\n- domain\n- url\n\n## parse iocs\nthe parse_iocs function parses iocs in the list above from text. there is an option\nto defang the iocs that are passed back as well as an option to provide a whitelist regex.\nthis will also return iocs labeled as ``unknown`` when text is found to be suspicious, but doesn't\nmatch any of the ioc types.\n\n    from ioc_hunter import parse_iocs\n\n    text = \"your text goes here\"\n    whitelist = r\".*internaldomain\\.com.*\"\n    iocs = parse_iocs(text, defang=false, whitelist_regex=whitlist)\n\n```\nparse_iocs\n\nparams:\n    text \u2013 a string to parse.\n    defang \u2013 if true, defang any iocs we can (see defangable). if false, return iocs in their fanged state.\n    whitelist_regex \u2013 any ioc matching this regex will be ignored\n    iocs_to_parse \u2013 a list of ioc types to look for (see ioc_types_search_order for options)\n    whitelist_domains \u2013 a list or csv of domains to exclude from results. excludes domains and urls that match\n    whitelist_ip_cidr_ranges \u2013 a list or csv of cidr ranges to exclude from results. excludes ips and urls that match\nreturns:\n    a dictionary with the ioc type as the key and a list of iocs for each value.\n```\n## type ioc\n\nthe type_ioc function takes in text and determines if that text matches any of the ioc types.\nif it does not match any, it will return ``unkown``.\n\n\n    from ioc_hunter import type_ioc\n    \n    suspected_ioc = \"mydomain.com\"\n    ioc_type = type_ioc(suspected_ioc)\n\n```\ntype_ioc\n\nparams:\n    ioc \u2013 the ioc to classify.\n    types_to_find \u2013 a list of types you want to look for.\nreturns:\n    the type of the ioc as a string, (see ioc_types_search_order for options)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ioc-hunter",
  "package_url": "https://pypi.org/project/ioc-hunter/",
  "project_url": "https://pypi.org/project/ioc-hunter/",
  "project_urls": {
    "Bug Tracker": "https://github.com/swimlane/ioc-hunter/issues",
    "Homepage": "https://github.com/swimlane/ioc-hunter"
  },
  "release_url": "https://pypi.org/project/ioc-hunter/1.3.1/",
  "requires_dist": [
    "ipaddress <2,>=1.0.23",
    "iocextract ==1.13.1",
    "spacy <4,>=3.4.1"
  ],
  "requires_python": ">=3.7",
  "summary": "extract iocs from text.",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "info@swimlane.com",
    "swimlane"
  ],
  "kwds": "iocs_to_parse parse_iocs suspected_ioc ioc_type type_ioc",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ioc_hunter",
  "homepage": "https://github.com/swimlane/ioc-hunter",
  "release_count": 8,
  "dependency_ids": [
    "pypi_iocextract",
    "pypi_ipaddress",
    "pypi_spacy"
  ]
}
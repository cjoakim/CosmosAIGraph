{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: win32 (ms windows)",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: terminals",
    "topic :: text processing :: markup"
  ],
  "description": "# colorclass\n\nyet another ansi color text library for python. provides \"auto colors\" for dark/light terminals. works on linux, os x,\nand windows. for windows support you just need to call ``windows.enable()`` in your application.\n\non linux/os x ``autocolors`` are toggled by calling ``set_light_background()`` and ``set_dark_background()``. on windows\nthis can be done automatically if you call ``windows.enable(auto_colors=true)``. even though the latest windows 10 does\nsupport ansi color codes natively, you still need to run windows.enable() to take advantage of automatically detecting\nthe console's background color.\n\nin python2.x this library subclasses ``unicode``, while on python3.x it subclasses ``str``.\n\n* python 2.6, 2.7, pypy, pypy3, 3.3, 3.4, and 3.5 supported on linux and os x.\n* python 2.6, 2.7, 3.3, 3.4, and 3.5 supported on windows (both 32 and 64 bit versions of python).\n\n## quickstart\ninstall:\n```bash\n    pip install colorclass\n```\n\n## piped command line\nit is possible to pipe curly-bracket tagged (or regular ansi coded) text to python in the command line to produce color\ntext. some examples:\n\n```bash\n    echo \"{red}red{/red}\" |python -m colorclass  # red colored text.\n    echo -e \"\\033[31mred\\033[0m\" | color_disable=true python -m colorclass  # strip colors\n    echo -e \"\\033[31mred\\033[0m\" | color_enable=true python -m colorclass &> file.txt  # force colors.\n```\nexport these environment variables as \"true\" to enable/disable some features:\n\n    =============== ============================================\n    env variable    description\n    =============== ============================================\n    color_enable    force colors even when piping to a file.\n    color_disable   strip all colors from incoming text.\n    color_light     use light colored text for dark backgrounds.\n    color_dark      use dark colored text for light backgrounds.\n    =============== ============================================\n\n## example implementation\n\n![example script screenshot](https://github.com/robpol86/colorclass/raw/master/example.png?raw=true)\n\n![example windows screenshot](https://github.com/robpol86/colorclass/raw/master/example_windows.png?raw=true)\n\nsource code for the example code is: [example.py](https://github.com/robpol86/colorclass/blob/master/example.py)\n\n## usage\n\ndifferent colors are chosen using curly-bracket tags, such as ``{red}{/red}``. for a list of available colors, call\n``colorclass.list_tags()``.\n\nthe available \"auto colors\" tags are:\n\n* autoblack\n* autored\n* autogreen\n* autoyellow\n* autoblue\n* automagenta\n* autocyan\n* autowhite\n* autobgblack\n* autobgred\n* autobggreen\n* autobgyellow\n* autobgblue\n* autobgmagenta\n* autobgcyan\n* autobgwhite\n\nmethods of class instances try to return sane data, such as:\n\n```python\n    from colorclass import color\n    color_string = color('{red}test{/red}')\n\n    >>> color_string\n    u'\\x1b[31mtest\\x1b[39m'\n\n    >>> len(color_string)\n    4\n\n    >>> color_string.istitle()\n    true\n```\nthere are also a couple of helper attributes for all color instances:\n\n```python\n    >>> color_string.value_colors\n    '\\x1b[31mtest\\x1b[39m'\n\n    >>> color_string.value_no_colors\n    'test'\n```\n\n[change log](https://github.com/matthewdeanmartin/colorclass/blob/master/changelog.md)\n",
  "docs_url": null,
  "keywords": "shell,bash,ansi,ascii,terminal,console,colors,automatic",
  "license": "mit",
  "name": "colorclass",
  "package_url": "https://pypi.org/project/colorclass/",
  "project_url": "https://pypi.org/project/colorclass/",
  "project_urls": {
    "Bug Tracker": "https://github.com/matthewdeanmartin/colorclass/issues",
    "Change Log": "https://github.com/matthewdeanmartin/colorclass/blob/master/CHANGELOG.md",
    "Documentation": "https://github.com/matthewdeanmartin/colorclass",
    "Homepage": "https://github.com/matthewdeanmartin/colorclass",
    "Repository": "https://github.com/matthewdeanmartin/colorclass"
  },
  "release_url": "https://pypi.org/project/colorclass/2.2.2/",
  "requires_dist": [],
  "requires_python": ">=2.6",
  "summary": "colorful worry-free console applications for linux, mac os x, and windows.",
  "version": "2.2.2",
  "releases": [],
  "developers": [
    "robpol86",
    "robpol86@gmail.com"
  ],
  "kwds": "color_enable auto_colors color_string color_disable set_dark_background",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_colorclass",
  "homepage": "https://github.com/matthewdeanmartin/colorclass",
  "release_count": 13,
  "dependency_ids": []
}
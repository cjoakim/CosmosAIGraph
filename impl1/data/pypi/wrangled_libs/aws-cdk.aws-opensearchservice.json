{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon opensearch service construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n\n\nfeatures                           | stability\n-----------------------------------|----------------------------------------------------------------\ncfn resources                      | ![stable](https://img.shields.io/badge/stable-success.svg?style=for-the-badge)\nhigher level constructs for domain | ![stable](https://img.shields.io/badge/stable-success.svg?style=for-the-badge)\n\n> **cfn resources:** all classes with the `cfn` prefix in this module ([cfn resources](https://docs.aws.amazon.com/cdk/latest/guide/constructs.html#constructs_lib)) are always\n> stable and safe to use.\n\n<!-- -->\n\n> **stable:** higher level constructs in this module that are marked stable will not undergo any\n> breaking changes. they will strictly follow the [semantic versioning](https://semver.org/) model.\n\n---\n<!--end stability banner-->\n\nsee [migrating to opensearch](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-elasticsearch-readme.html#migrating-to-opensearch) for migration instructions from `@aws-cdk/aws-elasticsearch` to this module, `@aws-cdk/aws-opensearchservice`.\n\n## quick start\n\ncreate a development cluster by simply specifying the version:\n\n```python\ndev_domain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0\n)\n```\n\nto perform version upgrades without replacing the entire domain, specify the `enableversionupgrade` property.\n\n```python\ndev_domain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    enable_version_upgrade=true\n)\n```\n\ncreate a production grade cluster by also specifying things like capacity and az distribution\n\n```python\nprod_domain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    capacity=opensearch.capacityconfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=opensearch.ebsoptions(\n        volume_size=20\n    ),\n    zone_awareness=opensearch.zoneawarenessconfig(\n        availability_zone_count=3\n    ),\n    logging=opensearch.loggingoptions(\n        slow_search_log_enabled=true,\n        app_log_enabled=true,\n        slow_index_log_enabled=true\n    )\n)\n```\n\nthis creates an amazon opensearch service cluster and automatically sets up log groups for\nlogging the domain logs and slow search logs.\n\n## a note about slr\n\nsome cluster configurations (e.g vpc access) require the existence of the [`awsserviceroleforamazonelasticsearchservice`](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/slr.html) service-linked role.\n\nwhen performing such operations via the aws console, this slr is created automatically when needed. however, this is not the behavior when using cloudformation. if an slr is needed, but doesn't exist, you will encounter a failure message simlar to:\n\n```console\nbefore you can proceed, you must enable a service-linked role to give amazon opensearch service...\n```\n\nto resolve this, you need to [create](https://docs.aws.amazon.com/iam/latest/userguide/using-service-linked-roles.html#create-service-linked-role) the slr. we recommend using the aws cli:\n\n```console\naws iam create-service-linked-role --aws-service-name es.amazonaws.com\n```\n\nyou can also create it using the cdk, **but note that only the first application deploying this will succeed**:\n\n```python\nslr = iam.cfnservicelinkedrole(self, \"service linked role\",\n    aws_service_name=\"es.amazonaws.com\"\n)\n```\n\n## importing existing domains\n\nto import an existing domain into your cdk application, use the `domain.fromdomainendpoint` factory method.\nthis method accepts a domain endpoint of an already existing domain:\n\n```python\ndomain_endpoint = \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\"\ndomain = opensearch.domain.from_domain_endpoint(self, \"importeddomain\", domain_endpoint)\n```\n\n## permissions\n\n### iam\n\nhelper methods also exist for managing access to the domain.\n\n```python\n# fn: lambda.function\n# domain: opensearch.domain\n\n\n# grant write access to the app-search index\ndomain.grant_index_write(\"app-search\", fn)\n\n# grant read access to the 'app-search/_search' path\ndomain.grant_path_read(\"app-search/_search\", fn)\n```\n\n## encryption\n\nthe domain can also be created with encryption enabled:\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    ebs=opensearch.ebsoptions(\n        volume_size=100,\n        volume_type=ec2.ebsdevicevolumetype.general_purpose_ssd\n    ),\n    node_to_node_encryption=true,\n    encryption_at_rest=opensearch.encryptionatrestoptions(\n        enabled=true\n    )\n)\n```\n\nthis sets up the domain with node to node encryption and encryption at\nrest. you can also choose to supply your own kms key to use for encryption at\nrest.\n\n## vpc support\n\ndomains can be placed inside a vpc, providing a secure communication between amazon opensearch service and other services within the vpc without the need for an internet gateway, nat device, or vpn connection.\n\n> visit [vpc support for amazon opensearch service domains](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html) for more details.\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\ndomain_props = opensearch.domainprops(\n    version=opensearch.engineversion.opensearch_1_0,\n    removal_policy=removalpolicy.destroy,\n    vpc=vpc,\n    # must be enabled since our vpc contains multiple private subnets.\n    zone_awareness=opensearch.zoneawarenessconfig(\n        enabled=true\n    ),\n    capacity=opensearch.capacityconfig(\n        # must be an even number since the default az count is 2.\n        data_nodes=2\n    )\n)\nopensearch.domain(self, \"domain\", domain_props)\n```\n\nin addition, you can use the `vpcsubnets` property to control which specific subnets will be used, and the `securitygroups` property to control\nwhich security groups will be attached to the domain. by default, cdk will select all *private* subnets in the vpc, and create one dedicated security group.\n\n## metrics\n\nhelper methods exist to access common domain metrics for example:\n\n```python\n# domain: opensearch.domain\n\nfree_storage_space = domain.metric_free_storage_space()\nmaster_sys_memory_utilization = domain.metric(\"mastersysmemoryutilization\")\n```\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n\n## fine grained access control\n\nthe domain can also be created with a master user configured. the password can\nbe supplied or dynamically created if not supplied.\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    enforce_https=true,\n    node_to_node_encryption=true,\n    encryption_at_rest=opensearch.encryptionatrestoptions(\n        enabled=true\n    ),\n    fine_grained_access_control=opensearch.advancedsecurityoptions(\n        master_user_name=\"master-user\"\n    )\n)\n\nmaster_user_password = domain.master_user_password\n```\n\n## using unsigned basic auth\n\nfor convenience, the domain can be configured to allow unsigned http requests\nthat use basic auth. unless the domain is configured to be part of a vpc this\nmeans anyone can access the domain using the configured master username and\npassword.\n\nto enable unsigned basic auth access the domain is configured with an access\npolicy that allows anyonmous requests, https required, node to node encryption,\nencryption at rest and fine grained access control.\n\nif the above settings are not set they will be configured as part of enabling\nunsigned basic auth. if they are set with conflicting values, an error will be\nthrown.\n\nif no master user is configured a default master user is created with the\nusername `admin`.\n\nif no password is configured a default master user password is created and\nstored in the aws secrets manager as secret. the secret has the prefix\n`<domain id>masteruser`.\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    use_unsigned_basic_auth=true\n)\n\nmaster_user_password = domain.master_user_password\n```\n\n## custom access policies\n\nif the domain requires custom access control it can be configured either as a\nconstructor property, or later by means of a helper method.\n\nfor simple permissions the `accesspolicies` constructor may be sufficient:\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    access_policies=[\n        iam.policystatement(\n            actions=[\"es:*eshttppost\", \"es:eshttpput*\"],\n            effect=iam.effect.allow,\n            principals=[iam.accountprincipal(\"123456789012\")],\n            resources=[\"*\"]\n        )\n    ]\n)\n```\n\nfor more complex use-cases, for example, to set the domain up to receive data from a\n[cross-account kinesis firehose](https://aws.amazon.com/premiumsupport/knowledge-center/kinesis-firehose-cross-account-streaming/) the `addaccesspolicies` helper method\nallows for policies that include the explicit domain arn.\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0\n)\ndomain.add_access_policies(\n    iam.policystatement(\n        actions=[\"es:eshttppost\", \"es:eshttpput\"],\n        effect=iam.effect.allow,\n        principals=[iam.accountprincipal(\"123456789012\")],\n        resources=[domain.domain_arn, f\"{domain.domainarn}/*\"]\n    ),\n    iam.policystatement(\n        actions=[\"es:eshttpget\"],\n        effect=iam.effect.allow,\n        principals=[iam.accountprincipal(\"123456789012\")],\n        resources=[f\"{domain.domainarn}/_all/_settings\", f\"{domain.domainarn}/_cluster/stats\", f\"{domain.domainarn}/index-name*/_mapping/type-name\", f\"{domain.domainarn}/roletest*/_mapping/roletest\", f\"{domain.domainarn}/_nodes\", f\"{domain.domainarn}/_nodes/stats\", f\"{domain.domainarn}/_nodes/*/stats\", f\"{domain.domainarn}/_stats\", f\"{domain.domainarn}/index-name*/_stats\", f\"{domain.domainarn}/roletest*/_stat\"\n        ]\n    ))\n```\n\n## audit logs\n\naudit logs can be enabled for a domain, but only when fine grained access control is enabled.\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    enforce_https=true,\n    node_to_node_encryption=true,\n    encryption_at_rest=opensearch.encryptionatrestoptions(\n        enabled=true\n    ),\n    fine_grained_access_control=opensearch.advancedsecurityoptions(\n        master_user_name=\"master-user\"\n    ),\n    logging=opensearch.loggingoptions(\n        audit_log_enabled=true,\n        slow_search_log_enabled=true,\n        app_log_enabled=true,\n        slow_index_log_enabled=true\n    )\n)\n```\n\n## ultrawarm\n\nultrawarm nodes can be enabled to provide a cost-effective way to store large amounts of read-only data.\n\n```python\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    capacity=opensearch.capacityconfig(\n        master_nodes=2,\n        warm_nodes=2,\n        warm_instance_type=\"ultrawarm1.medium.search\"\n    )\n)\n```\n\n## custom endpoint\n\ncustom endpoints can be configured to reach the domain under a custom domain name.\n\n```python\nopensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    custom_endpoint=opensearch.customendpointoptions(\n        domain_name=\"search.example.com\"\n    )\n)\n```\n\nit is also possible to specify a custom certificate instead of the auto-generated one.\n\nadditionally, an automatic cname-record is created if a hosted zone is provided for the custom endpoint\n\n## advanced options\n\n[advanced options](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options) can used to configure additional options.\n\n```python\nopensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_0,\n    advanced_options={\n        \"rest.action.multi.allow_explicit_index\": \"false\",\n        \"indices.fielddata.cache.size\": \"25\",\n        \"indices.query.bool.max_clause_count\": \"2048\"\n    }\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-opensearchservice",
  "package_url": "https://pypi.org/project/aws-cdk.aws-opensearchservice/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-opensearchservice/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-opensearchservice/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-route53 (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::opensearchservice",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "cdk opensearch_1_0 opensearchservice opensearch aws",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_opensearchservice",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 93,
  "dependency_ids": [
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_route53",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
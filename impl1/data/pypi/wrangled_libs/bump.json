{
  "classifiers": [
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "bump\n====\n\nbumps package versions.\n\nexample\n=======\n\nby default, running ``bump`` in a directory with a ``setup.py`` will bump the\n\"patch\" number in place::\n\n  $ bump\n  1.0.1\n  $ git diff setup.py\n  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  modified: setup.py\n  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  @ setup.py:6 @ from setuptools import setup\n\n  setup(\n      name='bump',\n  -    version='1.0.0',\n  +    version='1.0.1',\n      description='bumps package version numbers',\n      long_description=open('readme.rst').read(),\n      license='mit',\n\nconveniently ``bump`` will also return the new version number, so you can use\nit after running the command, for example::\n\n  $ export version=`bump`\n  $ echo \"the new version is $version\"\n  the new version is 1.0.1\n\noptions\n=======\n\nthe ``bump`` command can also bump the major or minor version numbers, or set\nthe pre-release identifier or local version segment::\n\n  $ bump --help\n  usage: bump [options] [input] [output]\n\n  options:\n    -m, --major     bump major number. ex.: 1.2.3 -> 2.2.3\n    -m, --minor     bump minor number. ex.: 1.2.3 -> 1.3.3\n    -p, --patch     bump patch number. ex.: 1.2.3 -> 1.2.4\n    -r, --reset     reset subversions. ex.: major bump from 1.2.3 will be 2.0.0\n                    instead of 2.2.3\n    --pre text      set the pre-release identifier\n    --local text    set the local version segment\n    --canonicalize  canonicalize the new version\n    --help          show this message and exit.\n\nthe `--reset` option should be used alongside with minor or major bump.\n\nyou can configure these options by setting them in a ``.bump`` or ``setup.cfg``\nconfiguration file as well, so you don't have to specify them every time::\n\n  $ cat .bump\n  [bump]\n  input = some_directory/__file__.py\n  minor = true\n  patch = false\n  reset = true\n",
  "docs_url": null,
  "keywords": "bump increment package version",
  "license": "mit",
  "name": "bump",
  "package_url": "https://pypi.org/project/bump/",
  "project_url": "https://pypi.org/project/bump/",
  "project_urls": {
    "Homepage": "https://github.com/di/bump"
  },
  "release_url": "https://pypi.org/project/bump/1.3.2/",
  "requires_dist": [
    "click (<9,>=6)",
    "first",
    "packaging (>=17.1)",
    "toml",
    "pytest ; extra == 'dev'",
    "black ; extra == 'dev'",
    "build ; extra == 'dev'",
    "twine ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "bumps package version numbers",
  "version": "1.3.2",
  "releases": [],
  "developers": [
    "hello@marksteve.com",
    "mark_steve_samson"
  ],
  "kwds": "bump patch git package versions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bump",
  "homepage": "https://github.com/di/bump",
  "release_count": 14,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_click",
    "pypi_first",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_toml",
    "pypi_twine"
  ]
}
{
  "classifiers": [
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": "differentiate, compile, and transform numpy code.\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/google/jax/main/images/jax_logo_250px.png\" alt=\"logo\"></img>\n</div>\n\n# jax: autograd and xla\n\n![continuous integration](https://github.com/google/jax/actions/workflows/ci-build.yaml/badge.svg)\n![pypi version](https://img.shields.io/pypi/v/jax)\n\n[**quickstart**](#quickstart-colab-in-the-cloud)\n| [**transformations**](#transformations)\n| [**install guide**](#installation)\n| [**neural net libraries**](#neural-network-libraries)\n| [**change logs**](https://jax.readthedocs.io/en/latest/changelog.html)\n| [**reference docs**](https://jax.readthedocs.io/en/latest/)\n\n\n## what is jax?\n\njax is [autograd](https://github.com/hips/autograd) and [xla](https://www.tensorflow.org/xla),\nbrought together for high-performance numerical computing, including\nlarge-scale machine learning research.\n\nwith its updated version of [autograd](https://github.com/hips/autograd),\njax can automatically differentiate native\npython and numpy functions. it can differentiate through loops, branches,\nrecursion, and closures, and it can take derivatives of derivatives of\nderivatives. it supports reverse-mode differentiation (a.k.a. backpropagation)\nvia [`grad`](#automatic-differentiation-with-grad) as well as forward-mode differentiation,\nand the two can be composed arbitrarily to any order.\n\nwhat\u2019s new is that jax uses [xla](https://www.tensorflow.org/xla)\nto compile and run your numpy programs on gpus and tpus. compilation happens\nunder the hood by default, with library calls getting just-in-time compiled and\nexecuted. but jax also lets you just-in-time compile your own python functions\ninto xla-optimized kernels using a one-function api,\n[`jit`](#compilation-with-jit). compilation and automatic differentiation can be\ncomposed arbitrarily, so you can express sophisticated algorithms and get\nmaximal performance without leaving python. you can even program multiple gpus\nor tpu cores at once using [`pmap`](#spmd-programming-with-pmap), and\ndifferentiate through the whole thing.\n\ndig a little deeper, and you'll see that jax is really an extensible system for\n[composable function transformations](#transformations). both\n[`grad`](#automatic-differentiation-with-grad) and [`jit`](#compilation-with-jit)\nare instances of such transformations. others are\n[`vmap`](#auto-vectorization-with-vmap) for automatic vectorization and\n[`pmap`](#spmd-programming-with-pmap) for single-program multiple-data (spmd)\nparallel programming of multiple accelerators, with more to come.\n\nthis is a research project, not an official google product. expect bugs and\n[sharp edges](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html).\nplease help by trying it out, [reporting\nbugs](https://github.com/google/jax/issues), and letting us know what you\nthink!\n\n```python\nimport jax.numpy as jnp\nfrom jax import grad, jit, vmap\n\ndef predict(params, inputs):\n  for w, b in params:\n    outputs = jnp.dot(inputs, w) + b\n    inputs = jnp.tanh(outputs)  # inputs to the next layer\n  return outputs                # no activation on last layer\n\ndef loss(params, inputs, targets):\n  preds = predict(params, inputs)\n  return jnp.sum((preds - targets)**2)\n\ngrad_loss = jit(grad(loss))  # compiled gradient evaluation function\nperex_grads = jit(vmap(grad_loss, in_axes=(none, 0, 0)))  # fast per-example grads\n```\n\n### contents\n* [quickstart: colab in the cloud](#quickstart-colab-in-the-cloud)\n* [transformations](#transformations)\n* [current gotchas](#current-gotchas)\n* [installation](#installation)\n* [neural net libraries](#neural-network-libraries)\n* [citing jax](#citing-jax)\n* [reference documentation](#reference-documentation)\n\n## quickstart: colab in the cloud\njump right in using a notebook in your browser, connected to a google cloud gpu.\nhere are some starter notebooks:\n- [the basics: numpy on accelerators, `grad` for differentiation, `jit` for compilation, and `vmap` for vectorization](https://jax.readthedocs.io/en/latest/notebooks/quickstart.html)\n- [training a simple neural network, with tensorflow dataset data loading](https://colab.research.google.com/github/google/jax/blob/main/docs/notebooks/neural_network_with_tfds_data.ipynb)\n\n**jax now runs on cloud tpus.** to try out the preview, see the [cloud tpu\ncolabs](https://github.com/google/jax/tree/main/cloud_tpu_colabs).\n\nfor a deeper dive into jax:\n- [the autodiff cookbook, part 1: easy and powerful automatic differentiation in jax](https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html)\n- [common gotchas and sharp edges](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html)\n- see the [full list of\nnotebooks](https://github.com/google/jax/tree/main/docs/notebooks).\n\n## transformations\n\nat its core, jax is an extensible system for transforming numerical functions.\nhere are four transformations of primary interest: `grad`, `jit`, `vmap`, and\n`pmap`.\n\n### automatic differentiation with `grad`\n\njax has roughly the same api as [autograd](https://github.com/hips/autograd).\nthe most popular function is\n[`grad`](https://jax.readthedocs.io/en/latest/jax.html#jax.grad)\nfor reverse-mode gradients:\n\n```python\nfrom jax import grad\nimport jax.numpy as jnp\n\ndef tanh(x):  # define a function\n  y = jnp.exp(-2.0 * x)\n  return (1.0 - y) / (1.0 + y)\n\ngrad_tanh = grad(tanh)  # obtain its gradient function\nprint(grad_tanh(1.0))   # evaluate it at x = 1.0\n# prints 0.4199743\n```\n\nyou can differentiate to any order with `grad`.\n\n```python\nprint(grad(grad(grad(tanh)))(1.0))\n# prints 0.62162673\n```\n\nfor more advanced autodiff, you can use\n[`jax.vjp`](https://jax.readthedocs.io/en/latest/jax.html#jax.vjp) for\nreverse-mode vector-jacobian products and\n[`jax.jvp`](https://jax.readthedocs.io/en/latest/jax.html#jax.jvp) for\nforward-mode jacobian-vector products. the two can be composed arbitrarily with\none another, and with other jax transformations. here's one way to compose those\nto make a function that efficiently computes [full hessian\nmatrices](https://jax.readthedocs.io/en/latest/_autosummary/jax.hessian.html#jax.hessian):\n\n```python\nfrom jax import jit, jacfwd, jacrev\n\ndef hessian(fun):\n  return jit(jacfwd(jacrev(fun)))\n```\n\nas with [autograd](https://github.com/hips/autograd), you're free to use\ndifferentiation with python control structures:\n\n```python\ndef abs_val(x):\n  if x > 0:\n    return x\n  else:\n    return -x\n\nabs_val_grad = grad(abs_val)\nprint(abs_val_grad(1.0))   # prints 1.0\nprint(abs_val_grad(-1.0))  # prints -1.0 (abs_val is re-evaluated)\n```\n\nsee the [reference docs on automatic\ndifferentiation](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)\nand the [jax autodiff\ncookbook](https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html)\nfor more.\n\n### compilation with `jit`\n\nyou can use xla to compile your functions end-to-end with\n[`jit`](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit),\nused either as an `@jit` decorator or as a higher-order function.\n\n```python\nimport jax.numpy as jnp\nfrom jax import jit\n\ndef slow_f(x):\n  # element-wise ops see a large benefit from fusion\n  return x * x + x * 2.0\n\nx = jnp.ones((5000, 5000))\nfast_f = jit(slow_f)\n%timeit -n10 -r3 fast_f(x)  # ~ 4.5 ms / loop on titan x\n%timeit -n10 -r3 slow_f(x)  # ~ 14.5 ms / loop (also on gpu via jax)\n```\n\nyou can mix `jit` and `grad` and any other jax transformation however you like.\n\nusing `jit` puts constraints on the kind of python control flow\nthe function can use; see\nthe [gotchas\nnotebook](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html#python-control-flow-+-jit)\nfor more.\n\n### auto-vectorization with `vmap`\n\n[`vmap`](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap) is\nthe vectorizing map.\nit has the familiar semantics of mapping a function along array axes, but\ninstead of keeping the loop on the outside, it pushes the loop down into a\nfunction\u2019s primitive operations for better performance.\n\nusing `vmap` can save you from having to carry around batch dimensions in your\ncode. for example, consider this simple *unbatched* neural network prediction\nfunction:\n\n```python\ndef predict(params, input_vec):\n  assert input_vec.ndim == 1\n  activations = input_vec\n  for w, b in params:\n    outputs = jnp.dot(w, activations) + b  # `activations` on the right-hand side!\n    activations = jnp.tanh(outputs)        # inputs to the next layer\n  return outputs                           # no activation on last layer\n```\n\nwe often instead write `jnp.dot(activations, w)` to allow for a batch dimension on the\nleft side of `activations`, but we\u2019ve written this particular prediction function to\napply only to single input vectors. if we wanted to apply this function to a\nbatch of inputs at once, semantically we could just write\n\n```python\nfrom functools import partial\npredictions = jnp.stack(list(map(partial(predict, params), input_batch)))\n```\n\nbut pushing one example through the network at a time would be slow! it\u2019s better\nto vectorize the computation, so that at every layer we\u2019re doing matrix-matrix\nmultiplication rather than matrix-vector multiplication.\n\nthe `vmap` function does that transformation for us. that is, if we write\n\n```python\nfrom jax import vmap\npredictions = vmap(partial(predict, params))(input_batch)\n# or, alternatively\npredictions = vmap(predict, in_axes=(none, 0))(params, input_batch)\n```\n\nthen the `vmap` function will push the outer loop inside the function, and our\nmachine will end up executing matrix-matrix multiplications exactly as if we\u2019d\ndone the batching by hand.\n\nit\u2019s easy enough to manually batch a simple neural network without `vmap`, but\nin other cases manual vectorization can be impractical or impossible. take the\nproblem of efficiently computing per-example gradients: that is, for a fixed set\nof parameters, we want to compute the gradient of our loss function evaluated\nseparately at each example in a batch. with `vmap`, it\u2019s easy:\n\n```python\nper_example_gradients = vmap(partial(grad(loss), params))(inputs, targets)\n```\n\nof course, `vmap` can be arbitrarily composed with `jit`, `grad`, and any other\njax transformation! we use `vmap` with both forward- and reverse-mode automatic\ndifferentiation for fast jacobian and hessian matrix calculations in\n`jax.jacfwd`, `jax.jacrev`, and `jax.hessian`.\n\n### spmd programming with `pmap`\n\nfor parallel programming of multiple accelerators, like multiple gpus, use\n[`pmap`](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap).\nwith `pmap` you write single-program multiple-data (spmd) programs, including\nfast parallel collective communication operations. applying `pmap` will mean\nthat the function you write is compiled by xla (similarly to `jit`), then\nreplicated and executed in parallel across devices.\n\nhere's an example on an 8-gpu machine:\n\n```python\nfrom jax import random, pmap\nimport jax.numpy as jnp\n\n# create 8 random 5000 x 6000 matrices, one per gpu\nkeys = random.split(random.prngkey(0), 8)\nmats = pmap(lambda key: random.normal(key, (5000, 6000)))(keys)\n\n# run a local matmul on each device in parallel (no data transfer)\nresult = pmap(lambda x: jnp.dot(x, x.t))(mats)  # result.shape is (8, 5000, 5000)\n\n# compute the mean on each device in parallel and print the result\nprint(pmap(jnp.mean)(result))\n# prints [1.1566595 1.1805978 ... 1.2321935 1.2015157]\n```\n\nin addition to expressing pure maps, you can use fast [collective communication\noperations](https://jax.readthedocs.io/en/latest/jax.lax.html#parallel-operators)\nbetween devices:\n\n```python\nfrom functools import partial\nfrom jax import lax\n\n@partial(pmap, axis_name='i')\ndef normalize(x):\n  return x / lax.psum(x, 'i')\n\nprint(normalize(jnp.arange(4.)))\n# prints [0.         0.16666667 0.33333334 0.5       ]\n```\n\nyou can even [nest `pmap` functions](https://colab.research.google.com/github/google/jax/blob/main/cloud_tpu_colabs/pmap_cookbook.ipynb#scrollto=mdrscr5monun) for more\nsophisticated communication patterns.\n\nit all composes, so you're free to differentiate through parallel computations:\n\n```python\nfrom jax import grad\n\n@pmap\ndef f(x):\n  y = jnp.sin(x)\n  @pmap\n  def g(z):\n    return jnp.cos(z) * jnp.tan(y.sum()) * jnp.tanh(x).sum()\n  return grad(lambda w: jnp.sum(g(w)))(x)\n\nprint(f(x))\n# [[ 0.        , -0.7170853 ],\n#  [-3.1085174 , -0.4824318 ],\n#  [10.366636  , 13.135289  ],\n#  [ 0.22163185, -0.52112055]]\n\nprint(grad(lambda x: jnp.sum(f(x)))(x))\n# [[ -3.2369726,  -1.6356447],\n#  [  4.7572474,  11.606951 ],\n#  [-98.524414 ,  42.76499  ],\n#  [ -1.6007166,  -1.2568436]]\n```\n\nwhen reverse-mode differentiating a `pmap` function (e.g. with `grad`), the\nbackward pass of the computation is parallelized just like the forward pass.\n\nsee the [spmd\ncookbook](https://colab.research.google.com/github/google/jax/blob/main/cloud_tpu_colabs/pmap_cookbook.ipynb)\nand the [spmd mnist classifier from scratch\nexample](https://github.com/google/jax/blob/main/examples/spmd_mnist_classifier_fromscratch.py)\nfor more.\n\n## current gotchas\n\nfor a more thorough survey of current gotchas, with examples and explanations,\nwe highly recommend reading the [gotchas\nnotebook](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html).\nsome standouts:\n\n1. jax transformations only work on [pure functions](https://en.wikipedia.org/wiki/pure_function), which don't have side-effects and respect [referential transparency](https://en.wikipedia.org/wiki/referential_transparency) (i.e. object identity testing with `is` isn't preserved). if you use a jax transformation on an impure python function, you might see an error like `exception: can't lift traced...`  or `exception: different traces at same level`.\n1. [in-place mutating updates of\n   arrays](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html#in-place-updates), like `x[i] += y`, aren't supported, but [there are functional alternatives](https://jax.readthedocs.io/en/latest/jax.ops.html). under a `jit`, those functional alternatives will reuse buffers in-place automatically.\n1. [random numbers are\n   different](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html#random-numbers), but for [good reasons](https://github.com/google/jax/blob/main/docs/jep/263-prng.md).\n1. if you're looking for [convolution\n   operators](https://jax.readthedocs.io/en/latest/notebooks/convolutions.html),\n   they're in the `jax.lax` package.\n1. jax enforces single-precision (32-bit, e.g. `float32`) values by default, and\n   [to enable\n   double-precision](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html#double-64bit-precision)\n   (64-bit, e.g. `float64`) one needs to set the `jax_enable_x64` variable at\n   startup (or set the environment variable `jax_enable_x64=true`).\n   on tpu, jax uses 32-bit values by default for everything _except_ internal\n   temporary variables in 'matmul-like' operations, such as `jax.numpy.dot` and `lax.conv`.\n   those ops have a `precision` parameter which can be used to simulate\n   true 32-bit, with a cost of possibly slower runtime.\n1. some of numpy's dtype promotion semantics involving a mix of python scalars\n   and numpy types aren't preserved, namely `np.add(1, np.array([2],\n   np.float32)).dtype` is `float64` rather than `float32`.\n1. some transformations, like `jit`, [constrain how you can use python control\n   flow](https://jax.readthedocs.io/en/latest/notebooks/common_gotchas_in_jax.html#control-flow).\n   you'll always get loud errors if something goes wrong. you might have to use\n   [`jit`'s `static_argnums`\n   parameter](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit),\n   [structured control flow\n   primitives](https://jax.readthedocs.io/en/latest/jax.lax.html#control-flow-operators)\n   like\n   [`lax.scan`](https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html#jax.lax.scan),\n   or just use `jit` on smaller subfunctions.\n\n## installation\n\n### supported platforms\n\n|            | linux x86_64 | linux aarch64 | mac x86_64   | mac arm      | windows x86_64 | windows wsl2 x86_64 |\n|------------|--------------|---------------|--------------|--------------|----------------|---------------------|\n| cpu        | yes          | yes           | yes          | yes          | yes            | yes                 |\n| nvidia gpu | yes          | yes           | no           | n/a          | no             | experimental        |\n| google tpu | yes          | n/a           | n/a          | n/a          | n/a            | n/a                 |\n| amd gpu    | experimental | no            | no           | n/a          | no             | no                  |\n| apple gpu  | n/a          | no            | experimental | experimental | n/a            | n/a                 |\n\n\n### instructions\n\n| hardware   | instructions                                                                                                    |\n|------------|-----------------------------------------------------------------------------------------------------------------|\n| cpu        | `pip install -u \"jax[cpu]\"`                                                                                       |\n| nvidia gpu on x86_64 | `pip install -u \"jax[cuda12_pip]\" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html`        |\n| google tpu | `pip install -u \"jax[tpu]\" -f https://storage.googleapis.com/jax-releases/libtpu_releases.html`                 |\n| amd gpu    | use [docker](https://hub.docker.com/r/rocm/jax) or [build from source](https://jax.readthedocs.io/en/latest/developer.html#additional-notes-for-building-a-rocm-jaxlib-for-amd-gpus). |\n| apple gpu  | follow [apple's instructions](https://developer.apple.com/metal/jax/).                                          |\n\nsee [the documentation](https://jax.readthedocs.io/en/latest/installation.html)\nfor information on alternative installation strategies. these include compiling\nfrom source, installing with docker, using other versions of cuda, a\ncommunity-supported conda build, and answers to some frequently-asked questions.\n\n\n\n## neural network libraries\n\nmultiple google research groups develop and share libraries for training neural\nnetworks in jax. if you want a fully featured library for neural network\ntraining with examples and how-to guides, try\n[flax](https://github.com/google/flax).\n\ngoogle x maintains the neural network library\n[equinox](https://github.com/patrick-kidger/equinox). this is used as the\nfoundation for several other libraries in the jax ecosystem.\n\nin addition, deepmind has open-sourced an [ecosystem of libraries around\njax](https://deepmind.com/blog/article/using-jax-to-accelerate-our-research)\nincluding [optax](https://github.com/deepmind/optax) for gradient processing and\noptimization, [rlax](https://github.com/deepmind/rlax) for rl algorithms, and\n[chex](https://github.com/deepmind/chex) for reliable code and testing. (watch\nthe neurips 2020 jax ecosystem at deepmind talk\n[here](https://www.youtube.com/watch?v=idxjxiyzsim))\n\n## citing jax\n\nto cite this repository:\n\n```\n@software{jax2018github,\n  author = {james bradbury and roy frostig and peter hawkins and matthew james johnson and chris leary and dougal maclaurin and george necula and adam paszke and jake vander{p}las and skye wanderman-{m}ilne and qiao zhang},\n  title = {{jax}: composable transformations of {p}ython+{n}um{p}y programs},\n  url = {http://github.com/google/jax},\n  version = {0.3.13},\n  year = {2018},\n}\n```\n\nin the above bibtex entry, names are in alphabetical order, the version number\nis intended to be that from [jax/version.py](../main/jax/version.py), and\nthe year corresponds to the project's open-source release.\n\na nascent version of jax, supporting only automatic differentiation and\ncompilation to xla, was described in a [paper that appeared at sysml\n2018](https://mlsys.org/conferences/2019/doc/2018/146.pdf). we're currently working on\ncovering jax's ideas and capabilities in a more comprehensive and up-to-date\npaper.\n\n## reference documentation\n\nfor details about the jax api, see the\n[reference documentation](https://jax.readthedocs.io/).\n\nfor getting started as a jax developer, see the\n[developer documentation](https://jax.readthedocs.io/en/latest/developer.html).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "jax",
  "package_url": "https://pypi.org/project/jax/",
  "project_url": "https://pypi.org/project/jax/",
  "project_urls": {
    "Homepage": "https://github.com/google/jax"
  },
  "release_url": "https://pypi.org/project/jax/0.4.23/",
  "requires_dist": [
    "ml-dtypes >=0.2.0",
    "numpy >=1.22",
    "opt-einsum",
    "scipy >=1.9",
    "importlib-metadata >=4.6 ; python_version < \"3.10\"",
    "numpy >=1.23.2 ; python_version >= \"3.11\"",
    "numpy >=1.26.0 ; python_version >= \"3.12\"",
    "scipy >=1.11.1 ; python_version >= \"3.12\"",
    "protobuf <4,>=3.13 ; extra == 'australis'",
    "jaxlib ==0.4.22 ; extra == 'ci'",
    "jaxlib ==0.4.23 ; extra == 'cpu'",
    "jaxlib ==0.4.23+cuda11.cudnn86 ; extra == 'cuda'",
    "jaxlib ==0.4.23+cuda11.cudnn86 ; extra == 'cuda11_cudnn86'",
    "jaxlib ==0.4.23+cuda11.cudnn86 ; extra == 'cuda11_local'",
    "jaxlib ==0.4.23+cuda11.cudnn86 ; extra == 'cuda11_pip'",
    "nvidia-cublas-cu11 >=11.11 ; extra == 'cuda11_pip'",
    "nvidia-cuda-cupti-cu11 >=11.8 ; extra == 'cuda11_pip'",
    "nvidia-cuda-nvcc-cu11 >=11.8 ; extra == 'cuda11_pip'",
    "nvidia-cuda-runtime-cu11 >=11.8 ; extra == 'cuda11_pip'",
    "nvidia-cudnn-cu11 >=8.8 ; extra == 'cuda11_pip'",
    "nvidia-cufft-cu11 >=10.9 ; extra == 'cuda11_pip'",
    "nvidia-cusolver-cu11 >=11.4 ; extra == 'cuda11_pip'",
    "nvidia-cusparse-cu11 >=11.7 ; extra == 'cuda11_pip'",
    "nvidia-nccl-cu11 >=2.18.3 ; extra == 'cuda11_pip'",
    "jaxlib ==0.4.23 ; extra == 'cuda12'",
    "jax-cuda12-plugin ==0.4.23 ; extra == 'cuda12'",
    "nvidia-cublas-cu12 >=12.2.5.6 ; extra == 'cuda12'",
    "nvidia-cuda-cupti-cu12 >=12.2.142 ; extra == 'cuda12'",
    "nvidia-cuda-nvcc-cu12 >=12.2.140 ; extra == 'cuda12'",
    "nvidia-cuda-runtime-cu12 >=12.2.140 ; extra == 'cuda12'",
    "nvidia-cudnn-cu12 >=8.9 ; extra == 'cuda12'",
    "nvidia-cufft-cu12 >=11.0.8.103 ; extra == 'cuda12'",
    "nvidia-cusolver-cu12 >=11.5.2 ; extra == 'cuda12'",
    "nvidia-cusparse-cu12 >=12.1.2.141 ; extra == 'cuda12'",
    "nvidia-nccl-cu12 >=2.18.3 ; extra == 'cuda12'",
    "nvidia-nvjitlink-cu12 >=12.2 ; extra == 'cuda12'",
    "jaxlib ==0.4.23+cuda12.cudnn89 ; extra == 'cuda12_local'",
    "jaxlib ==0.4.23+cuda12.cudnn89 ; extra == 'cuda12_pip'",
    "nvidia-cublas-cu12 >=12.2.5.6 ; extra == 'cuda12_pip'",
    "nvidia-cuda-cupti-cu12 >=12.2.142 ; extra == 'cuda12_pip'",
    "nvidia-cuda-nvcc-cu12 >=12.2.140 ; extra == 'cuda12_pip'",
    "nvidia-cuda-runtime-cu12 >=12.2.140 ; extra == 'cuda12_pip'",
    "nvidia-cudnn-cu12 >=8.9 ; extra == 'cuda12_pip'",
    "nvidia-cufft-cu12 >=11.0.8.103 ; extra == 'cuda12_pip'",
    "nvidia-cusolver-cu12 >=11.5.2 ; extra == 'cuda12_pip'",
    "nvidia-cusparse-cu12 >=12.1.2.141 ; extra == 'cuda12_pip'",
    "nvidia-nccl-cu12 >=2.18.3 ; extra == 'cuda12_pip'",
    "nvidia-nvjitlink-cu12 >=12.2 ; extra == 'cuda12_pip'",
    "jaxlib ==0.4.19 ; extra == 'minimum-jaxlib'",
    "jaxlib ==0.4.23 ; extra == 'tpu'",
    "libtpu-nightly ==0.1.dev20231213 ; extra == 'tpu'",
    "requests ; extra == 'tpu'"
  ],
  "requires_python": ">=3.9",
  "summary": "differentiate, compile, and transform numpy code.",
  "version": "0.4.23",
  "releases": [],
  "developers": [
    "jax-dev@google.com",
    "jax_team"
  ],
  "kwds": "jax_logo_250px jax jaxlib jax2018github jax_enable_x64",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_jax",
  "homepage": "https://github.com/google/jax",
  "release_count": 157,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_jax_cuda12_plugin",
    "pypi_jaxlib",
    "pypi_libtpu_nightly",
    "pypi_ml_dtypes",
    "pypi_numpy",
    "pypi_nvidia_cublas_cu11",
    "pypi_nvidia_cublas_cu12",
    "pypi_nvidia_cuda_cupti_cu11",
    "pypi_nvidia_cuda_cupti_cu12",
    "pypi_nvidia_cuda_nvcc_cu11",
    "pypi_nvidia_cuda_nvcc_cu12",
    "pypi_nvidia_cuda_runtime_cu11",
    "pypi_nvidia_cuda_runtime_cu12",
    "pypi_nvidia_cudnn_cu11",
    "pypi_nvidia_cudnn_cu12",
    "pypi_nvidia_cufft_cu11",
    "pypi_nvidia_cufft_cu12",
    "pypi_nvidia_cusolver_cu11",
    "pypi_nvidia_cusolver_cu12",
    "pypi_nvidia_cusparse_cu11",
    "pypi_nvidia_cusparse_cu12",
    "pypi_nvidia_nccl_cu11",
    "pypi_nvidia_nccl_cu12",
    "pypi_nvidia_nvjitlink_cu12",
    "pypi_opt_einsum",
    "pypi_protobuf",
    "pypi_requests",
    "pypi_scipy"
  ],
  "documentation_summary": "JAX version 0.4.25, released on February 26, 2024, is a Python library for high-performance numerical computing, enabling differentiation, compilation, and transformation of NumPy code. It integrates Autograd and XLA for automatic differentiation and just-in-time compilation to GPUs and TPUs, supporting operations like reverse and forward-mode differentiation. JAX allows for sophisticated algorithm expression and performance optimization without leaving Python, offering features like `jit` for compiling Python functions, `grad` for gradients, `vmap` for automatic vectorization, and `pmap` for parallel programming across multiple accelerators. It's designed for large-scale machine learning research and is a research project, not an official Google product. JAX requires Python 3.9 or higher and is licensed under Apache-2.0.",
  "embedding": [
    -0.03917372599244118,
    0.005167983006685972,
    0.008673585951328278,
    -0.012547834776341915,
    -0.0035473366733640432,
    0.020073752850294113,
    0.0034030089154839516,
    -0.019322551786899567,
    -0.01930864155292511,
    -0.0390067920088768,
    0.03263549879193306,
    0.004521115683019161,
    -0.04343052953481674,
    0.014578858390450478,
    0.00200146296992898,
    -0.029324650764465332,
    0.019962463527917862,
    -0.005571405403316021,
    -0.010301187634468079,
    -0.013465968891978264,
    -0.004329837393015623,
    0.008207563310861588,
    -0.010002098977565765,
    -0.006454761605709791,
    -0.02164570987224579,
    0.010774166323244572,
    0.02136748656630516,
    -0.015830859541893005,
    0.00242749135941267,
    -0.004239415284246206,
    0.025359980762004852,
    0.0050601717084646225,
    -0.04262368753552437,
    0.005428816191852093,
    -0.0032169476617127657,
    0.0023492411710321903,
    0.0015650015557184815,
    -0.012220922857522964,
    0.026250291615724564,
    0.00527231628075242,
    0.03544554486870766,
    -0.001150276162661612,
    0.005710516590625048,
    0.0024953079409897327,
    -0.01627601496875286,
    -0.0037247035652399063,
    -0.021659621968865395,
    -0.012346123345196247,
    -0.010948055423796177,
    0.032079052180051804,
    0.03296936675906181,
    0.030548829585313797,
    -0.00038059966755099595,
    -0.014787525869905949,
    -0.0031021807808429003,
    -0.019294729456305504,
    -0.007484185043722391,
    0.015761304646730423,
    0.009223075583577156,
    0.00404118187725544,
    0.014244991354644299,
    0.007056417874991894,
    -0.030632296577095985,
    0.010016010142862797,
    -0.004124648403376341,
    -0.02641722559928894,
    -0.024692246690392494,
    0.005853105802088976,
    0.014759703539311886,
    -0.022049132734537125,
    0.016832461580634117,
    0.03132785111665726,
    -0.0178757943212986,
    -0.017068950459361076,
    0.013869390822947025,
    -0.024107979610562325,
    -0.028100471943616867,
    -0.012186145409941673,
    -0.0178757943212986,
    0.01798708364367485,
    -0.005094949621707201,
    0.004472426604479551,
    0.013994591310620308,
    0.01264521200209856,
    -0.0006399117410182953,
    -0.008750097826123238,
    -0.001670204452238977,
    0.0010050787823274732,
    -0.015830859541893005,
    -0.023523712530732155,
    0.03310847654938698,
    -0.004771515727043152,
    0.024887001141905785,
    0.006552139762789011,
    -0.021242287009954453,
    0.017611483111977577,
    -0.022633399814367294,
    0.005654872395098209,
    -0.0007916299509815872,
    -0.011302788741886616,
    -0.0005907880840823054,
    0.002771791536360979,
    -0.013027768582105637,
    -0.01794535107910633,
    -0.03363709896802902,
    -0.015997793525457382,
    -0.0015502210007980466,
    0.00677819550037384,
    0.02652851492166519,
    0.03959105908870697,
    -0.015803037211298943,
    0.02409406751394272,
    -0.024219268932938576,
    -0.035139501094818115,
    0.02762749418616295,
    -0.03266331925988197,
    0.027015404775738716,
    -0.013048634864389896,
    -0.004743693396449089,
    -0.004733260255306959,
    -0.003443003399297595,
    0.023342866450548172,
    0.006771239917725325,
    0.0077624074183404446,
    0.004503726493567228,
    0.002246646676212549,
    -0.0011563622392714024,
    0.00538012757897377,
    -0.014551036059856415,
    -0.04198377579450607,
    0.01581694930791855,
    0.0011946178274229169,
    0.0035351645201444626,
    0.011671433225274086,
    -0.028768206015229225,
    0.0018727851565927267,
    -0.0054253386333584785,
    -0.011135855689644814,
    -0.025944247841835022,
    -0.016345571726560593,
    0.006225228309631348,
    0.0076998076401650906,
    -0.001970163080841303,
    0.01204703375697136,
    -0.02218824438750744,
    0.00940391980111599,
    0.003156086429953575,
    0.007525918539613485,
    0.008242341689765453,
    0.006621695123612881,
    -3.7195957702351734e-05,
    -0.026625892147421837,
    -0.022271711379289627,
    -0.0030639253091067076,
    -0.0148431695997715,
    0.007908474653959274,
    -0.0029665473848581314,
    0.03803301602602005,
    -0.01505183707922697,
    0.020101575180888176,
    0.015719570219516754,
    0.018863484263420105,
    -0.012881701812148094,
    -0.003971626050770283,
    -0.0024257523473352194,
    0.03266331925988197,
    -0.00028561276849359274,
    -0.016345571726560593,
    -0.018946951255202293,
    -0.0029091639444231987,
    0.014634503051638603,
    0.009793431498110294,
    -0.02676500380039215,
    -0.013612035661935806,
    0.008903119713068008,
    -6.575180304935202e-05,
    0.01217918936163187,
    0.007602429483085871,
    -0.0422619953751564,
    0.02882385067641735,
    0.0335814543068409,
    -0.0004642837739083916,
    0.006225228309631348,
    0.019322551786899567,
    -0.008193652145564556,
    4.502096271608025e-05,
    0.021548332646489143,
    -0.00023692383547313511,
    -0.010558543726801872,
    0.02299508824944496,
    0.04075959697365761,
    0.03608545660972595,
    -0.05066431686282158,
    -0.01659597083926201,
    -0.5889413952827454,
    -0.0011372343869879842,
    0.015302237123250961,
    -0.0379217267036438,
    0.012506101280450821,
    -0.006959040183573961,
    -0.010482032783329487,
    0.017082860693335533,
    -0.019767707213759422,
    0.03391532227396965,
    -0.03422136604785919,
    0.02711278200149536,
    -0.0010650705080479383,
    -0.022229976952075958,
    -0.003289981046691537,
    -0.012652168050408363,
    -0.009953409433364868,
    -0.0470196008682251,
    -0.010475076735019684,
    -0.0006077422294765711,
    -0.014731881208717823,
    0.022355176508426666,
    -0.024914823472499847,
    0.013862435705959797,
    -0.00913265347480774,
    0.024539224803447723,
    0.016679437831044197,
    -0.0019006073707714677,
    0.008193652145564556,
    0.005237538367509842,
    -0.020964065566658974,
    -0.004121170844882727,
    0.01915561780333519,
    -0.014898814260959625,
    0.054642897099256516,
    0.008047585375607014,
    -0.018905218690633774,
    0.05458725243806839,
    0.0185296181589365,
    0.03744874894618988,
    -0.030993985012173653,
    0.0031508696265518665,
    0.002415318973362446,
    0.014161525294184685,
    0.004980182740837336,
    -0.003495170036330819,
    0.010016010142862797,
    0.003265636507421732,
    -0.023064645007252693,
    -0.02804482728242874,
    -0.00823538564145565,
    -0.0054253386333584785,
    0.018501795828342438,
    -0.00699381809681654,
    0.0048584602773189545,
    -0.0048897601664066315,
    0.00786674115806818,
    0.016387304291129112,
    0.011073254980146885,
    0.0025318246334791183,
    0.007574607152491808,
    0.029575051739811897,
    -0.0021092742681503296,
    -0.01841832883656025,
    -0.015747392550110817,
    0.0006155672599561512,
    -0.0252486914396286,
    -0.014286724850535393,
    0.0027943970635533333,
    -0.0020118963439017534,
    0.01670726016163826,
    0.0033908365294337273,
    0.0016432516276836395,
    -0.011351477354764938,
    0.039535414427518845,
    0.02598598040640354,
    0.020532820373773575,
    0.00527231628075242,
    0.022396910935640335,
    0.03388749808073044,
    0.01261043455451727,
    0.004771515727043152,
    -0.015524814836680889,
    -0.016220372170209885,
    0.049134090542793274,
    0.0054357717745006084,
    -0.009466520510613918,
    0.006159150507301092,
    0.00808236375451088,
    -0.020560642704367638,
    0.019795529544353485,
    0.015065748244524002,
    -0.02758575975894928,
    -0.07300557941198349,
    0.008311896584928036,
    -0.00027061483706347644,
    -0.024414023384451866,
    0.006200884003192186,
    -0.026792826130986214,
    -0.010843721218407154,
    -0.014996192418038845,
    0.006941650994122028,
    -0.012533923611044884,
    0.032802432775497437,
    0.0019649462774395943,
    0.018585262820124626,
    -0.013514657504856586,
    0.001864090678282082,
    0.006249572616070509,
    -0.025749491527676582,
    -0.020658019930124283,
    -0.035529013723134995,
    -0.0033230199478566647,
    -0.013361635617911816,
    -0.0032778086606413126,
    -0.03383185341954231,
    0.01569174788892269,
    0.002770052757114172,
    -0.00404118187725544,
    -0.026097269728779793,
    0.014154569245874882,
    -0.03822777047753334,
    -0.0037420925218611956,
    0.007407674100250006,
    0.021923933178186417,
    0.012012256309390068,
    0.020379798486828804,
    -0.021075353026390076,
    -0.04654662311077118,
    -0.007178140338510275,
    6.59148208796978e-05,
    -0.0024970469530671835,
    0.01460668072104454,
    -0.013222523964941502,
    0.04142732918262482,
    -0.0023370690178126097,
    -0.017736684530973434,
    0.01021772064268589,
    0.015524814836680889,
    -0.03188429772853851,
    -0.022174332290887833,
    0.027182336896657944,
    0.027919627726078033,
    -0.017611483111977577,
    -0.018752196803689003,
    0.005512283183634281,
    -0.02817002683877945,
    0.01833486184477806,
    0.0029126417357474566,
    0.016985483467578888,
    -0.030159318819642067,
    0.012603478506207466,
    -0.031411319971084595,
    0.005216671619564295,
    -0.008708364330232143,
    0.009452609345316887,
    -0.006903395522385836,
    -0.026041625067591667,
    -0.03733745962381363,
    -0.03794954717159271,
    0.01686028391122818,
    0.019239084795117378,
    0.006082639098167419,
    0.011998345144093037,
    -0.01503792591392994,
    -0.01802881807088852,
    -0.026319848373532295,
    0.02960287407040596,
    -0.006976428907364607,
    -0.03132785111665726,
    8.748793334234506e-05,
    -0.03182865306735039,
    0.012137455865740776,
    0.010864588432013988,
    -0.0044133043847978115,
    0.02082495391368866,
    -0.009487386792898178,
    0.001759757287800312,
    -0.0010285538155585527,
    -0.0058078947477042675,
    0.005314049776643515,
    0.015010103583335876,
    -0.04037008434534073,
    -0.015858681872487068,
    0.02299508824944496,
    0.01330599095672369,
    0.011254100129008293,
    0.007129451259970665,
    -0.008979630656540394,
    0.0005747033283114433,
    -0.01470405887812376,
    0.02268904447555542,
    -0.03819995000958443,
    0.020755397155880928,
    -0.030020207166671753,
    -0.020727574825286865,
    0.029435940086841583,
    0.007776318583637476,
    0.021339666098356247,
    0.004632404539734125,
    0.014857080765068531,
    0.027488382533192635,
    0.013278168626129627,
    -0.01655423827469349,
    0.001075503882020712,
    -0.01295821275562048,
    0.015496992506086826,
    -0.024107979610562325,
    -0.007616340648382902,
    -0.007838918827474117,
    0.013695502653717995,
    0.018042728304862976,
    -0.023913223296403885,
    -0.022591667249798775,
    0.008054541423916817,
    0.022090865299105644,
    -0.004375048913061619,
    0.0029178583063185215,
    -0.012784323655068874,
    -0.015803037211298943,
    0.01670726016163826,
    0.03305283188819885,
    0.020115485414862633,
    -1.3965464859211352e-05,
    -0.007028595544397831,
    0.03811648115515709,
    0.0008694452699273825,
    -0.002804830437526107,
    0.0023735857103019953,
    -0.02661198191344738,
    0.006600828841328621,
    0.02373237907886505,
    -0.00963345356285572,
    -0.025193046778440475,
    0.016289927065372467,
    -0.0022136077750474215,
    0.004197681788355112,
    -0.024845268577337265,
    0.020560642704367638,
    -0.026834558695554733,
    0.0024483578745275736,
    0.010405520908534527,
    0.003888159291818738,
    -0.005560972262173891,
    0.00347778107970953,
    -0.0045941490679979324,
    0.019865086302161217,
    0.011003699153661728,
    0.01043334323912859,
    -0.011775767430663109,
    -0.0010920233326032758,
    0.019433841109275818,
    0.03116091899573803,
    0.007734585087746382,
    0.0231898445636034,
    -0.02474789135158062,
    0.006339995190501213,
    0.0159282386302948,
    0.039924927055835724,
    -0.0025492135901004076,
    0.013730280101299286,
    0.008207563310861588,
    0.017847973853349686,
    0.010864588432013988,
    0.03500039130449295,
    -0.017625395208597183,
    -0.005651394370943308,
    -0.019628597423434258,
    -0.007671985309571028,
    -0.00904918648302555,
    -0.030326250940561295,
    -0.040815237909555435,
    0.00021203597134444863,
    -0.04078741744160652,
    0.01736108399927616,
    0.017472373321652412,
    0.02277251146733761,
    0.03516732156276703,
    0.0027126693166792393,
    0.02522086910903454,
    -0.0034030089154839516,
    -0.05976219102740288,
    0.02121446467936039,
    -0.0019093018490821123,
    0.005849627777934074,
    0.011087166145443916,
    -0.03088269755244255,
    -0.023607177659869194,
    0.021228376775979996,
    0.028197849169373512,
    -0.00527231628075242,
    -0.00048601991147734225,
    0.004378526471555233,
    0.016888106241822243,
    -0.012520012445747852,
    -0.004771515727043152,
    0.03374838829040527,
    -0.01969815231859684,
    -0.004771515727043152,
    -0.034527409821748734,
    0.0006112200208008289,
    -0.011379299685359001,
    -0.0002921336272265762,
    0.001968424068763852,
    0.03344234451651573,
    -0.0015050098299980164,
    -0.003964670468121767,
    -0.008228430524468422,
    -0.00014889250451233238,
    -0.039257194846868515,
    0.0031247863080352545,
    -0.012693901546299458,
    -0.003241291968151927,
    -0.020811041817069054,
    0.019475573673844337,
    -0.0148431695997715,
    0.014717970043420792,
    -0.007957163266837597,
    0.011587967164814472,
    0.020797131583094597,
    -0.0011589705245569348,
    -0.003891637083142996,
    -0.005251449532806873,
    0.03007585182785988,
    0.03088269755244255,
    0.016651615500450134,
    -0.02017113007605076,
    0.012137455865740776,
    -0.04980182647705078,
    -0.006562572903931141,
    -0.01681854948401451,
    -0.0025283468421548605,
    -0.004844549112021923,
    0.014078058302402496,
    -0.018738284707069397,
    0.0011711427941918373,
    0.0016432516276836395,
    0.0035369035322219133,
    0.023301133885979652,
    0.015983881428837776,
    -0.012714767828583717,
    -0.007748496253043413,
    0.009925587102770805,
    0.011518411338329315,
    0.022229976952075958,
    0.002126663224771619,
    0.015093570575118065,
    -0.024469668045639992,
    0.043569643050432205,
    0.005967872682958841,
    0.01601170375943184,
    0.0039090258069336414,
    -0.00847187452018261,
    -0.02424708940088749,
    -0.005981783382594585,
    0.001034639892168343,
    -0.00879878643900156,
    -0.011685344390571117,
    -0.01264521200209856,
    0.03049318492412567,
    0.017764506861567497,
    0.05428120866417885,
    -0.004521115683019161,
    0.018195750191807747,
    0.004882804583758116,
    0.024497490376234055,
    -0.013340768404304981,
    0.006124372594058514,
    0.00200146296992898,
    -0.018974773585796356,
    0.004135082010179758,
    0.000372339942259714,
    -0.0033004144206643105,
    -0.000378860771888867,
    0.03166171908378601,
    0.0005773116718046367,
    -0.01670726016163826,
    -0.021158820018172264,
    0.011511455290019512,
    0.01252696756273508,
    0.027836160734295845,
    -0.009090919978916645,
    0.022369088605046272,
    -0.025819046422839165,
    -0.011706211604177952,
    -0.023551534861326218,
    -0.02067193202674389,
    -0.014328458346426487,
    0.0068999179638922215,
    -0.006646039895713329,
    -0.014189346693456173,
    -0.0015989098465070128,
    -0.01414065808057785,
    0.006555617321282625,
    -0.00870140828192234,
    -0.03942412883043289,
    -0.024970468133687973,
    0.0029961084946990013,
    0.03441612422466278,
    0.005327960941940546,
    0.020226774737238884,
    0.01062809955328703,
    0.018460063263773918,
    0.010676788166165352,
    -0.005258405115455389,
    -0.029714161530137062,
    -0.013222523964941502,
    -0.0431244857609272,
    0.033275410532951355,
    -0.0065486617386341095,
    0.012617389671504498,
    -0.020296331495046616,
    0.005414905492216349,
    0.012986035086214542,
    0.022007398307323456,
    -0.017973173409700394,
    0.0022449076641350985,
    -0.0020379796624183655,
    0.024678334593772888,
    0.009376098401844501,
    0.022716866806149483,
    0.013146013021469116,
    0.02268904447555542,
    -0.04276279732584953,
    -0.010607232339680195,
    -0.03146696463227272,
    0.010308143682777882,
    -0.01297907903790474,
    -0.008423185907304287,
    0.0006833840161561966,
    0.021923933178186417,
    0.014592769555747509,
    -0.007338118273764849,
    -0.02552691288292408,
    -0.017027216032147408,
    -0.00023105509171728045,
    -0.011268011294305325,
    0.0011181066511198878,
    0.014648414216935635,
    0.0014737098244950175,
    -0.00866663083434105,
    0.013417279347777367,
    -0.021339666098356247,
    -0.0006672992603853345,
    -0.002403146820142865,
    -0.027168426662683487,
    0.007463318295776844,
    0.0205884650349617,
    0.011010655201971531,
    0.023634999990463257,
    0.004834115970879793,
    -0.02782224863767624,
    -0.030437540262937546,
    0.03761567920446396,
    0.03433265537023544,
    0.0261111818253994,
    -0.003950759302824736,
    -0.010259454138576984,
    -0.011414078064262867,
    -0.0074980962090194225,
    -0.013639857992529869,
    -0.002975241746753454,
    0.01169230043888092,
    -0.012401768006384373,
    -0.02203522063791752,
    0.009160475805401802,
    0.005150593817234039,
    -0.00786674115806818,
    0.0011685345089063048,
    -0.026194646954536438,
    -0.01204703375697136,
    -0.011650566942989826,
    -0.007852829992771149,
    0.016762904822826385,
    -0.025276513770222664,
    0.008193652145564556,
    -0.0004262455622665584,
    -0.017305439338088036,
    -0.03733745962381363,
    0.02851780503988266,
    -0.0027370138559490442,
    -0.008610986173152924,
    0.04000839591026306,
    0.041705552488565445,
    0.03733745962381363,
    -0.005877450108528137,
    0.00027191900881007314,
    0.01055158767849207,
    0.010774166323244572,
    -0.007011206820607185,
    0.009230031631886959,
    0.026445047929883003,
    -0.00747027387842536,
    0.015455259941518307,
    0.022118687629699707,
    0.009703009389340878,
    -0.002330113435164094,
    -0.028879495337605476,
    -0.0023979300167411566,
    -0.0023283744230866432,
    -0.012137455865740776,
    -0.011010655201971531,
    0.0039298925548791885,
    -0.02396886795759201,
    -0.016888106241822243,
    0.01136538852006197,
    0.006597350817173719,
    0.019517308101058006,
    -0.037977371364831924,
    0.000985950930044055,
    0.02572166919708252,
    -0.0027126693166792393,
    0.040731772780418396,
    0.020769309252500534,
    0.021770909428596497,
    0.002410102402791381,
    0.021590065211057663,
    0.02999238483607769,
    0.0023927134461700916,
    0.002910902723670006,
    -0.0002584426256362349,
    -0.0189608633518219,
    0.007324207108467817,
    0.017931438982486725,
    0.009974276646971703,
    0.044543422758579254,
    0.007539829704910517,
    0.015455259941518307,
    -0.0037455703131854534,
    0.012972123920917511,
    -0.021047530695796013,
    -0.007247696164995432,
    0.02106144279241562,
    -0.02606944739818573,
    0.0007711979560554028,
    -0.022327354177832603,
    -0.017778417095541954,
    -0.013507702387869358,
    -0.006785151083022356,
    -0.00024887872859835625,
    0.000886399473529309,
    0.014634503051638603,
    -0.023648912087082863,
    0.010829810984432697,
    0.007512007374316454,
    0.01798708364367485,
    0.027071049436926842,
    -0.00508103845641017,
    0.0245948676019907,
    0.03744874894618988,
    0.007658074144273996,
    -0.0019997241906821728,
    -0.0007020770572125912,
    -0.002643113723024726,
    0.01900259591639042,
    0.019865086302161217,
    0.019141707569360733,
    -0.029686339199543,
    -0.01215832307934761,
    0.00027952666277997196,
    -0.005001049488782883,
    -0.03174518793821335,
    -0.024302734062075615,
    0.02253602258861065,
    0.007574607152491808,
    0.002434446709230542,
    -0.026194646954536438,
    -0.011434944346547127,
    -0.012499145232141018,
    -0.0007651118794456124,
    -0.004434171132743359,
    0.009862987324595451,
    -0.0031508696265518665,
    -0.015858681872487068,
    -0.015260503627359867,
    0.021617887541651726,
    0.01612299308180809,
    0.005275793839246035,
    0.024775713682174683,
    0.003787303576245904,
    0.007136406842619181,
    -0.02043544128537178,
    0.00048558518756181,
    0.01744455099105835,
    0.017583660781383514,
    0.03703141212463379,
    -0.006510406266897917,
    0.017277617007493973,
    0.03177300840616226,
    -0.007372896187007427,
    -0.01156014483422041,
    -0.0043437485583126545,
    -0.0019301685970276594,
    0.037198346108198166,
    -0.028142204508185387,
    0.01276345644146204,
    -0.005540105514228344,
    0.0006033950485289097,
    0.016053438186645508,
    -0.018515706062316895,
    -0.0076302518136799335,
    -0.00847187452018261,
    0.003283025464043021,
    0.001412848592735827,
    0.011455811560153961,
    -0.0026309413369745016,
    -0.023899313062429428,
    -0.002382280072197318,
    0.009118742309510708,
    -0.0033038922119885683,
    -0.01258956827223301,
    0.00901440903544426,
    0.00982820987701416,
    -0.03794954717159271,
    -0.0027039749547839165,
    -0.01261043455451727,
    -0.023648912087082863,
    0.0070633734576404095,
    0.02303682267665863,
    0.0007355507113970816,
    -0.02206304296851158,
    0.03383185341954231,
    0.008784875273704529,
    0.028768206015229225,
    0.009487386792898178,
    0.01865481771528721,
    -0.02910207211971283,
    0.028420427814126015,
    -0.019920730963349342,
    -0.003602981334552169,
    0.03519514575600624,
    -0.004969749134033918,
    -0.019475573673844337,
    0.006124372594058514,
    -0.0031195697374641895,
    0.004896715749055147,
    0.005891361273825169,
    -0.011782722547650337,
    -0.006413028575479984,
    -0.0002011679025599733,
    -0.0013893735595047474,
    0.0010728954803198576,
    0.01054463256150484,
    0.0016276015667244792,
    -0.007018162403255701,
    -0.0032343363855034113,
    0.002182307653129101,
    -0.008986586704850197,
    0.009494342841207981,
    -0.01887739636003971,
    0.0004275497340131551,
    0.0023075079079717398,
    -0.037003591656684875,
    -0.015956059098243713,
    -0.010572454892098904,
    -0.019920730963349342,
    0.006760806776583195,
    0.045628488063812256,
    -0.008889208547770977,
    -0.01705503836274147,
    -0.013876346871256828,
    0.024386201053857803,
    0.019239084795117378,
    0.004670660011470318,
    -0.0021353575866669416,
    0.02843433804810047,
    -0.01470405887812376,
    0.03296936675906181,
    -0.007783274166285992,
    -0.012839968316257,
    0.00017486717842984945,
    -0.021548332646489143,
    -0.032579854130744934,
    -0.012659123167395592,
    -0.004253326449543238,
    0.017653217539191246,
    0.009111786261200905,
    -0.024873090907931328,
    -0.012262656353414059,
    -0.022758599370718002,
    -0.008791830390691757,
    -0.014411925338208675,
    -0.027140604332089424,
    0.021701354533433914,
    0.0017719295574352145,
    0.023022910580039024,
    0.004868893418461084,
    0.009897764772176743,
    0.0061521949246525764,
    0.042595863342285156,
    0.0039785816334187984,
    0.02466442435979843,
    0.009097875095903873,
    0.0008298855391331017,
    0.005675738677382469,
    -0.013855480588972569,
    -0.04387568682432175,
    -0.034360479563474655,
    0.012471322901546955,
    0.006058294791728258,
    0.029129894450306892,
    0.015650015324354172,
    -0.002615291392430663,
    0.008520564064383507,
    0.0023214188404381275,
    0.020560642704367638,
    -0.005414905492216349,
    0.025276513770222664,
    0.03658625856041908,
    -0.06276699155569077,
    -0.02210477739572525,
    0.008875297382473946,
    -0.005609660875052214,
    -0.005167983006685972,
    0.006089594680815935,
    -0.0014302375493571162,
    -0.011469722725450993,
    -0.022953355684876442,
    0.0028656916692852974,
    -0.014551036059856415,
    -0.0016649877652525902,
    0.02424708940088749,
    0.029853273183107376,
    0.005460116546601057,
    0.003989014774560928,
    0.0307714082300663,
    0.005985261406749487,
    0.012262656353414059,
    -0.01414065808057785,
    0.0008711841655895114,
    -0.01389025803655386,
    -0.014300636015832424,
    0.024107979610562325,
    -0.026389403268694878,
    -0.004493293352425098,
    -0.01775059476494789,
    0.027961360290646553,
    -0.019099975004792213,
    -0.007776318583637476,
    -0.018000995740294456,
    -0.004868893418461084,
    -0.016136905178427696,
    -0.002124924212694168,
    0.0031213085167109966,
    -0.016693349927663803,
    0.021047530695796013,
    0.006652995478361845,
    0.0002026894362643361,
    0.009918631985783577,
    -0.02253602258861065,
    0.009223075583577156,
    -0.019044330343604088,
    0.0032986754085868597,
    0.015594370663166046,
    -0.006044383626431227,
    -0.03285807743668556,
    0.002825697185471654,
    -0.01935037411749363,
    -0.01239481195807457,
    -0.010363787412643433,
    0.18652035295963287,
    0.005554016679525375,
    0.024692246690392494,
    0.017124595120549202,
    -0.0024744411930441856,
    0.01097587775439024,
    -0.010231631807982922,
    0.01097587775439024,
    -0.02533215843141079,
    0.016373394057154655,
    0.006305217277258635,
    0.00020692797261290252,
    -0.00144675699993968,
    -0.0009346536826342344,
    0.012172234244644642,
    -0.024622689932584763,
    -0.01666552759706974,
    -0.05531063303351402,
    -0.006806017830967903,
    -0.0027370138559490442,
    0.010363787412643433,
    0.004086392931640148,
    -0.001525007071904838,
    -0.03205123171210289,
    0.009125697426497936,
    -0.008325807750225067,
    0.016248194500803947,
    0.019906818866729736,
    0.03260767459869385,
    -0.016415126621723175,
    -0.01865481771528721,
    0.03614110127091408,
    -0.005804416723549366,
    -0.011740989051759243,
    -0.014634503051638603,
    -0.011393210850656033,
    0.0037455703131854534,
    0.01891912892460823,
    0.02312028966844082,
    0.026333758607506752,
    -0.0063156504184007645,
    -0.010356832295656204,
    -0.011671433225274086,
    -0.011087166145443916,
    -0.0019805964548140764,
    -0.006969473324716091,
    -0.024887001141905785,
    -0.008374497294425964,
    -0.016456861048936844,
    0.03374838829040527,
    -0.019572952762246132,
    -0.011281922459602356,
    0.010252499021589756,
    0.029269006103277206,
    -0.007039029151201248,
    0.000549054704606533,
    -0.01019685436040163,
    0.015177036635577679,
    0.0335814543068409,
    0.021631799638271332,
    -0.008673585951328278,
    0.01833486184477806,
    -0.022090865299105644,
    0.014384103007614613,
    -0.029936740174889565,
    -0.004315926227718592,
    -0.028058737516403198,
    -0.004107259679585695,
    0.00578702799975872,
    -0.003672536928206682,
    -0.013222523964941502,
    -0.018460063263773918,
    -0.015830859541893005,
    -0.01122627779841423,
    -0.003630803432315588,
    -0.012819101102650166,
    0.027613582089543343,
    0.022313443943858147,
    0.010461165569722652,
    0.03686448186635971,
    0.02723798155784607,
    0.014168480411171913,
    -0.012471322901546955,
    0.006159150507301092,
    -0.017110683023929596,
    -0.012478278949856758,
    0.02342633344233036,
    -0.01887739636003971,
    -0.0029978472739458084,
    -0.033970966935157776,
    0.0010302927112206817,
    -0.02758575975894928,
    -0.0005890491884201765,
    -0.032385099679231644,
    -0.0035369035322219133,
    0.016637705266475677,
    0.011859233491122723,
    0.023370688781142235,
    -0.020073752850294113,
    0.01377201359719038,
    -0.020296331495046616,
    0.043959155678749084,
    0.012999946251511574,
    -0.003135219682008028,
    -0.008889208547770977,
    0.0019127796404063702,
    -0.007379851769655943,
    0.005933094769716263,
    -0.01029423251748085,
    -0.01064201071858406,
    -0.010600277222692966,
    -0.0030013250652700663,
    -0.005185371730476618,
    -0.023009000346064568,
    0.004893238190561533,
    0.01503792591392994,
    -0.016957661136984825,
    0.011302788741886616,
    0.0409543514251709,
    -0.008506652899086475,
    -0.0008455355418846011,
    -0.01681854948401451,
    -0.0063539063557982445,
    -0.007873696275055408,
    -0.011080211028456688,
    -0.020185042172670364,
    -0.02587469108402729,
    0.027377093210816383,
    -0.007143362425267696,
    0.002072757575660944,
    0.024845268577337265,
    -0.018543528392910957,
    0.045906711369752884,
    0.006972951348870993,
    -0.02277251146733761,
    -0.03155042976140976,
    -0.01748628355562687,
    0.0011068038875237107,
    -0.021631799638271332,
    0.01055158767849207,
    -0.04323577508330345,
    -0.0017823628149926662,
    0.020532820373773575,
    -9.721484821056947e-05,
    0.03391532227396965,
    -0.004774993751198053,
    0.020602375268936157,
    0.005209716036915779,
    0.016025615856051445,
    -0.005543583072721958,
    -0.012520012445747852,
    0.01404327992349863,
    -0.002537041436880827,
    -0.031522609293460846,
    0.036920126527547836,
    -0.011914878152310848,
    0.005724427755922079,
    -0.021548332646489143,
    0.03839470446109772,
    -0.019447751343250275,
    -0.018696552142500877,
    -0.014015458524227142,
    0.006378250662237406,
    0.009000497870147228,
    -0.03174518793821335,
    -0.029269006103277206,
    -0.17528016865253448,
    -0.005387083161622286,
    -0.001996246399357915,
    -0.018126195296645164,
    0.009807342663407326,
    0.0070633734576404095,
    0.0185296181589365,
    0.005741816479712725,
    -0.023342866450548172,
    -0.0017675822600722313,
    0.0245948676019907,
    0.009216120466589928,
    -0.01985117420554161,
    -0.006200884003192186,
    -0.02106144279241562,
    -0.0018501796294003725,
    -0.012213967740535736,
    0.005926139187067747,
    0.03783825784921646,
    0.011511455290019512,
    0.005480983294546604,
    -0.024873090907931328,
    0.0021840466652065516,
    0.010774166323244572,
    -0.008165829814970493,
    -0.011469722725450993,
    -0.004128126427531242,
    -0.004347226582467556,
    0.01367463544011116,
    -0.012130500748753548,
    -0.00451763765886426,
    -0.010906321927905083,
    0.009814298711717129,
    -0.011775767430663109,
    0.013709412887692451,
    0.006260006222873926,
    -0.0013406845973804593,
    0.002930030692368746,
    -0.02823958359658718,
    0.02455313503742218,
    0.018599173054099083,
    0.010169032029807568,
    -0.012193100526928902,
    -0.02284206636250019,
    -0.015204858966171741,
    0.008986586704850197,
    -0.01642903871834278,
    -0.025346068665385246,
    0.031244385987520218,
    -0.030743585899472237,
    0.05255622789263725,
    -0.03897897154092789,
    0.012819101102650166,
    0.018390506505966187,
    0.04799338057637215,
    -0.013834613375365734,
    -0.004761082585901022,
    0.011608833447098732,
    0.015469170175492764,
    0.00735202943906188,
    -0.0013572040479630232,
    -0.022522110491991043,
    0.015399615280330181,
    -0.00399249279871583,
    -0.01577521488070488,
    -0.03789390251040459,
    -0.02470615692436695,
    0.013952857814729214,
    -0.03057665191590786,
    0.008715319447219372,
    0.027015404775738716,
    0.03018714115023613,
    -0.01922517456114292,
    0.011643610894680023,
    -0.0017823628149926662,
    0.009703009389340878,
    -0.02851780503988266,
    0.01480143703520298,
    0.03666972368955612,
    -0.0047889044508337975,
    -0.02529042400419712,
    0.0318564772605896,
    0.0006003519520163536,
    0.006294784136116505,
    -0.00589483929798007,
    -0.001722371089272201,
    0.008339718915522099,
    -0.00019388629880268127,
    0.0003553857677616179,
    -0.01826530694961548,
    -0.016067348420619965,
    -0.009042231366038322,
    0.013236435130238533,
    -0.009369142353534698,
    0.007560696452856064,
    0.02284206636250019,
    0.003241291968151927,
    -0.01149754412472248,
    0.0070946733467280865,
    -0.029241183772683144,
    0.007908474653959274,
    0.004423737525939941,
    -0.04301319643855095,
    -0.018974773585796356,
    0.023203756660223007,
    0.04187248647212982,
    -0.017667127773165703,
    0.014425836503505707,
    0.043180130422115326,
    -0.01573348231613636,
    -0.005679216701537371,
    0.0034586533438414335,
    0.013730280101299286,
    0.02949158474802971,
    -0.007943252101540565,
    0.016095170751214027,
    0.013173835352063179,
    -0.007658074144273996,
    0.042957551777362823,
    0.008617941290140152,
    0.035807233303785324,
    0.009654320776462555,
    -0.018042728304862976,
    0.011921834200620651,
    -0.00637129507958889,
    -0.0338040329515934,
    -0.11340349167585373,
    -0.03285807743668556,
    0.014592769555747509,
    0.002253602258861065,
    -0.020018108189105988,
    0.017027216032147408,
    -0.021826554089784622,
    0.026250291615724564,
    -0.03939630463719368,
    0.026987582445144653,
    -0.0318564772605896,
    0.01620646007359028,
    -0.0031543474178761244,
    -0.0031543474178761244,
    -0.019517308101058006,
    -0.0027039749547839165,
    -0.027168426662683487,
    0.008026719093322754,
    -0.030799230560660362,
    0.03319194167852402,
    -0.009925587102770805,
    0.0105654988437891,
    -0.007901518605649471,
    -0.013723324052989483,
    -0.023801933974027634,
    0.01398763619363308,
    -0.024873090907931328,
    0.02121446467936039,
    0.0009016147814691067,
    -0.012248745188117027,
    0.004354182165116072,
    -0.012666079215705395,
    0.002434446709230542,
    -0.016832461580634117,
    0.014064147137105465,
    0.006625173147767782,
    0.005056693684309721,
    -0.017082860693335533,
    0.006113939452916384,
    -0.012881701812148094,
    -0.010648965835571289,
    0.004781948868185282,
    0.006079161539673805,
    -0.00891703087836504,
    -0.019684242084622383,
    0.013180790469050407,
    -0.011358433403074741,
    0.02331504411995411,
    0.004618493374437094,
    -0.019712064415216446,
    -0.006061772350221872,
    -0.002877863822504878,
    -0.014787525869905949,
    -0.0009363925782963634,
    0.02093624323606491,
    -0.006402594968676567,
    -0.002928291680291295,
    0.014551036059856415,
    -0.017861884087324142,
    -0.023551534861326218,
    -0.018390506505966187,
    0.007025117985904217,
    -0.0008129313355311751,
    -0.0012511317618191242,
    0.02108926512300968,
    -0.002182307653129101,
    -0.0005847019492648542,
    0.0046463157050311565,
    0.02019895240664482,
    -0.02370455674827099,
    -0.024497490376234055,
    0.021423131227493286,
    -0.02106144279241562,
    0.013945902697741985,
    -0.03722617030143738,
    0.005512283183634281,
    0.006180017255246639,
    0.015218770131468773,
    0.004733260255306959,
    0.002587469294667244,
    -0.01868264004588127,
    0.013354679569602013,
    -0.025359980762004852,
    -0.006392161827534437,
    0.0120261674746871,
    0.01596997119486332,
    -0.005101904738694429,
    -0.00858316384255886,
    0.0019562519155442715,
    -0.0470196008682251,
    0.005919183604419231,
    -0.008687497116625309,
    0.03330323100090027,
    -0.012213967740535736,
    -0.020115485414862633,
    -0.015524814836680889,
    -0.008291030302643776,
    -0.015441348776221275,
    -0.014523213729262352,
    0.039841461926698685,
    -0.0056061833165585995,
    -0.02548518031835556,
    -0.0656605064868927,
    -0.00044950321898795664,
    0.01311123464256525,
    -0.007324207108467817,
    0.0028639528900384903,
    -0.025679936632514,
    -0.0021388353779911995,
    -0.03633585944771767,
    0.012262656353414059,
    0.01841832883656025,
    -0.04526679962873459,
    0.00916743092238903,
    -0.005571405403316021,
    -0.0073659406043589115,
    -0.00891703087836504,
    -0.01470405887812376,
    0.03341452032327652,
    -0.014745792374014854,
    0.037059236317873,
    -0.000803367467597127,
    -0.015427437610924244,
    -0.026904115453362465,
    0.041204750537872314,
    -0.004799338057637215,
    -0.01612299308180809,
    -0.011421033181250095,
    -0.022355176508426666,
    0.020268509164452553,
    -0.010669833049178123,
    -0.019183440133929253,
    0.011476677842438221,
    -0.003469086717814207,
    -0.005745294503867626,
    0.017667127773165703,
    -0.004375048913061619,
    0.006732984445989132,
    0.03672536835074425,
    -0.0028622138779610395,
    0.0015771737089380622,
    0.03577941283583641,
    -0.038561638444662094,
    -0.052194539457559586,
    0.04242892935872078,
    0.006628650706261396,
    0.01623428240418434,
    -0.017235882580280304,
    0.0019510352285578847,
    -0.00010688743350328878,
    0.0007485923706553876,
    0.01286083459854126,
    0.05848236754536629,
    -0.0003106093208771199,
    -0.01833486184477806,
    -0.04195595160126686,
    -0.00786674115806818,
    -0.011942700482904911,
    0.012846923433244228,
    -0.028114382177591324,
    0.007685896474868059,
    -0.003835992654785514,
    0.03783825784921646,
    0.020922331139445305,
    0.02396886795759201,
    -0.006573006510734558,
    0.006774717476218939,
    -0.03196776285767555,
    -0.039646703749895096,
    0.005407949909567833,
    -0.022355176508426666,
    -0.009793431498110294,
    -0.002025807509198785,
    -0.029575051739811897,
    0.028740383684635162,
    0.006343472748994827,
    0.02121446467936039,
    -0.028656916692852974,
    0.014411925338208675,
    -0.02069975435733795,
    -0.03266331925988197,
    0.012909523211419582,
    0.03138349577784538,
    -0.03096616268157959,
    -0.007414629217237234,
    0.020658019930124283,
    0.01183141116052866,
    0.017764506861567497,
    -0.041705552488565445,
    -0.01423803623765707,
    -0.019099975004792213,
    0.03157825395464897,
    -0.017820151522755623,
    0.00445851543918252,
    -0.01445365883409977,
    0.00891703087836504,
    0.027265803888440132,
    0.007991940714418888,
    -0.0079641193151474,
    -0.009675187058746815,
    0.014224125072360039,
    0.020504998043179512,
    0.01122627779841423,
    -0.011281922459602356,
    0.0062530506402254105,
    -0.024344468489289284,
    -0.019572952762246132,
    -0.019058240577578545,
    -0.017667127773165703,
    -0.016929838806390762,
    0.015942148864269257,
    0.026431137695908546,
    0.020365886390209198,
    -0.007105106953531504,
    -0.0001204181753564626,
    0.014196302741765976,
    -0.018640907481312752,
    0.030910519883036613,
    0.021492687985301018,
    0.0007603298872709274,
    -0.019865086302161217,
    0.029352473095059395,
    0.023342866450548172,
    -0.006030472461134195,
    0.0565626323223114,
    -0.019336463883519173,
    0.022243889048695564,
    0.012881701812148094,
    0.01206094492226839,
    -0.011434944346547127,
    0.001517181983217597,
    0.0030013250652700663,
    -0.019364286214113235,
    0.027460560202598572,
    -0.017500195652246475,
    -0.009577808901667595,
    -0.03191211819648743,
    -0.004270715173333883,
    0.024233179166913033,
    0.030437540262937546,
    0.004096826072782278,
    0.10338747501373291,
    -0.0118105448782444,
    -0.016053438186645508,
    0.0007059896015562117,
    0.004705437924712896,
    0.008367541246116161,
    -0.005453160963952541,
    0.005171460565179586,
    0.0148431695997715,
    -0.005762683227658272,
    -0.012839968316257,
    0.014731881208717823,
    -0.010182943195104599,
    -0.028489982709288597,
    -0.015524814836680889,
    0.007212918251752853,
    -0.01148363295942545,
    0.012269612401723862,
    0.0020831909496337175,
    0.005727905780076981,
    0.0398692823946476,
    0.027683138847351074,
    -0.01720806211233139,
    0.005595749709755182,
    -0.05408645421266556,
    0.0002154050744138658,
    0.04195595160126686,
    0.01134452223777771,
    -0.008715319447219372,
    -0.03939630463719368,
    0.019252996891736984,
    -0.014071102254092693,
    -0.03803301602602005,
    -0.025067847222089767,
    0.017514105886220932,
    0.016915926709771156,
    0.008861386217176914,
    -0.0020275465212762356,
    0.018279217183589935,
    0.0028656916692852974,
    0.0011746205855160952,
    -0.004037703853100538,
    -0.007658074144273996,
    -0.030548829585313797,
    0.016067348420619965,
    -0.011615789495408535,
    -0.01588650420308113,
    -0.006597350817173719,
    -0.04045354947447777
  ]
}
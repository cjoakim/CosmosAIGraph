{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools",
    "topic :: software development :: code generators"
  ],
  "description": "[![cloudformation cli](https://github.com/aws-cloudformation/cloudformation-cli/actions/workflows/pr-ci.yaml/badge.svg?branch=master)](https://github.com/aws-cloudformation/cloudformation-cli/actions/workflows/pr-ci.yaml)\n\n# aws cloudformation cli\n\nthe cloudformation cli (cfn) allows you to author your own resource providers, hooks, and modules that can be used by cloudformation.\n\n## usage\n\n### documentation\n\nprimary documentation for the cloudformation cli can be found at the [aws documentation](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html) site.\n\n### installation\n\nthis tool can be installed using [pip](https://pypi.org/project/pip/) from the python package index (pypi). it requires python 3. for resource and hook types, the tool requires at least one language plugin. language plugins are not needed to create a module type. the language plugins are also available on pypi and as such can be installed all at once:\n\n```bash\npip install cloudformation-cli cloudformation-cli-java-plugin cloudformation-cli-go-plugin cloudformation-cli-python-plugin cloudformation-cli-typescript-plugin\n```\n\n\n### command: init\n\nto create a project in the current directory, use the `init` command. a wizard will guide you through the creation.\n\n```bash\ncfn init\n```\n\n### command: generate\n\nto refresh auto-generated code, use the `generate` command. usually, plugins try to integrate this command in the native build flow, so please consult a plugin's readme to see if this is necessary.\nin a module project, this will regenerate the module schema.\n\n```bash\ncfn generate\n```\n\n### command: submit\n\nto register a resource provider, module, or hook in your account, use the `submit` command.\n\n```bash\ncfn submit\ncfn submit --dry-run #prepares schema handler package without submitting for registration\ncfn submit --set-default # if successfully registered, set submitted version to be the new default version\n```\n\n### command: package\n\nthis is to create a schema handler package without submitting equivalent to `cfn submit --dry-run`\n\n```bash\ncfn package\n```\n\n### command: test\n\nto run the contract tests for a resource type, use the `test` command.\n\n```bash\ncfn test\ncfn test -- -k contract_delete_update # to run a single test\ncfn test -- --tb=long # exhaustive, informative traceback formatting\ncfn test --enforce-timeout 60  # read/list handler timeout (create/update/delete handler timeout is twice the read/list handler timeout)\ncfn test --enforce-timeout 60 -- -k contract_delete_update # combine arguments\ncfn test --log-group-name cw_log_group --log-role-arn log_delivery_role_arn # handler logs generated by contract tests will be delivered to the specified cw_log_group using the credentials from log_delivery_role_arn\n```\n\nnote:\n* to use your type configuration in contract tests, you will need to save your type configuration json file in `~/.cfn-cli/typeconfiguration.json` or specify the file you would like to use\n    * `--typeconfig ./myresourcetypeconfig.json`\n    * `--typeconfig /test/myresource/config1.json`\n    * `--typeconfig c:\\myresource\\typeconf.json`\n\n* to use `propertytransform` in schema, you will need to install [pyjq](https://pypi.org/project/pyjq/). this feature will not be available to use with contract tests on windows os\n\ninstall pyjq for linux system\n\n```bash\nyum install autoconf automake libtool\npip install pyjq\n```\n\ninstall pyjq for macos system\n\n```bash\nbrew install autoconf automake libtool\nbrew install jq\npip install pyjq\n```\n\ninstall pyjq for ubuntu system\n\n```bash\npip install pyjq\n```\n\n### command: validate\n\nto validate the schema, use the `validate` command.\n\nthis command is automatically run whenever one attempts to submit a resource, module, or hook. errors will prevent you from submitting your resource/module. module fragments will additionally be validated via [`cfn-lint`](https://github.com/aws-cloudformation/cfn-python-lint/) (but resulting warnings will not cause this step to fail).\n\n```bash\ncfn validate\n```\n\n### command: build-image\n\nto build an image for a resource type. this image provides a minimalistic execution environment for the resource handler that does not depend on aws lambda in anyway. this image can be used during cfn invoke and cfn test instead of using sam cli.\n\n```bash\ncfn build-image\ncfn build-image --image-name my-handler --executable target/myjar.jar\n```\n\nthe resulting image can be run in a container by executing the following command:\n\n```\ndocker run image_name handler_entrypoint payload\ndocker run my-test-resource com.my.test.resource.executablehandlerwrapper payload_json # example for a java based-project\n```\n\n\n## development\n\nfor developing, it's strongly suggested to install the development dependencies inside a virtual environment. (this isn't required if you just want to use this tool.)\n\n```bash\npython3 -m venv env\nsource env/bin/activate\npip install -e . -r requirements.txt\npre-commit install\n```\n\nif you're creating a resource or hook type, you will also need to install a language plugin, such as [the java language plugin](https://github.com/aws-cloudformation/cloudformation-cli-java-plugin), also via `pip install`. for example, assuming the plugin is checked out in the same parent directory as this repository:\n\n```bash\npip install -e ../cloudformation-cli-java-plugin\n```\n\n```bash\n# run all hooks on all files, mirrors what the ci runs\npre-commit run --all-files\n# run unit tests only. can also be used for other hooks, e.g. black, flake8, pylint-local\npre-commit run pytest-local\n```\n\nif you want to generate an html coverage report afterwards, run `coverage html`. the report is output to `htmlcov/index.html`.\n\n## plugin system\n\nnew language plugins can be independently developed. as long as they declare the appropriate entry point and are installed in the same environment, they can even be completely separate codebases. for example, a plugin for groovy might have the following entry point:\n\n```python\nentry_points={\n    \"rpdk.v1.languages\": [\"groovy = rpdk.groovy:groovylanguageplugin\"],\n},\n```\n\nplugins must provide the same interface as `languageplugin` (in `plugin_base.py`). and they may inherit from `languageplugin` for the helper methods - but this is not necessary. as long as the class has the same methods, it will work as a plugin.\n\n### supported plugins\n\n#### resource types supported plugins\n| language | status            | github                                                                                                      | pypi                                                                                       |\n| -------- | ----------------- | ----------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |\n| java      | available         | [cloudformation-cli-java-plugin](https://github.com/aws-cloudformation/cloudformation-cli-java-plugin/)     | [cloudformation-cli-java-plugin](https://pypi.org/project/cloudformation-cli-java-plugin/)     |\n| go        | available         | [cloudformation-cli-go-plugin](https://github.com/aws-cloudformation/cloudformation-cli-go-plugin/)         | [cloudformation-cli-go-plugin](https://pypi.org/project/cloudformation-cli-go-plugin/)         |\n| python    | available         | [cloudformation-cli-python-plugin](https://github.com/aws-cloudformation/cloudformation-cli-python-plugin/) | [cloudformation-cli-python-plugin](https://pypi.org/project/cloudformation-cli-python-plugin/) |\n| typescript| available         | [cloudformation-cli-typescript-plugin](https://github.com/aws-cloudformation/cloudformation-cli-typescript-plugin/) | [cloudformation-cli-typescript-plugin](https://pypi.org/project/cloudformation-cli-typescript-plugin/) |\n\n#### hook types supported plugins\n| language | status            | github                                                                                                      | pypi                                                                                       |\n| -------- | ----------------- | ----------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |\n| java      | available         | [cloudformation-cli-java-plugin](https://github.com/aws-cloudformation/cloudformation-cli-java-plugin/)     | [cloudformation-cli-java-plugin](https://pypi.org/project/cloudformation-cli-java-plugin/)     |\n| python    | available         | [cloudformation-cli-python-plugin](https://github.com/aws-cloudformation/cloudformation-cli-python-plugin/) | [cloudformation-cli-python-plugin](https://pypi.org/project/cloudformation-cli-python-plugin/) |\n\n## license\n\nthis library is licensed under the apache 2.0 license.\n\n## community\n\njoin us on discord! connect & interact with cloudformation developers &\nexperts, find channels to discuss and get help for our cli, cfn-lint, cloudformation registry, stacksets,\nguard and more:\n\n[![join our discord](https://discordapp.com/api/guilds/981586120448020580/widget.png?style=banner3)](https://discord.gg/9zpd7ttrwq)\n\n\n",
  "docs_url": null,
  "keywords": "amazon web services aws cloudformation",
  "license": "apache license 2.0",
  "name": "cloudformation-cli",
  "package_url": "https://pypi.org/project/cloudformation-cli/",
  "project_url": "https://pypi.org/project/cloudformation-cli/",
  "project_urls": {
    "Homepage": "https://github.com/aws-cloudformation/aws-cloudformation-rpdk/"
  },
  "release_url": "https://pypi.org/project/cloudformation-cli/0.2.35/",
  "requires_dist": [
    "boto3 >=1.10.20",
    "Jinja2 >=3.1.2",
    "markupsafe >=2.1.0",
    "jsonschema <=4.17.3,>=3.0.0",
    "pytest >=4.5.0",
    "pytest-random-order >=1.0.4",
    "pytest-localserver >=0.5.0",
    "Werkzeug >=2.2.0",
    "PyYAML >=6.0.1",
    "requests >=2.22",
    "hypothesis >=4.32",
    "colorama >=0.4.1",
    "docker >=4.3.1",
    "ordered-set >=4.0.2",
    "cfn-lint >=0.78.1",
    "cfn-flip >=1.2.3",
    "nested-lookup",
    "botocore >=1.31.17"
  ],
  "requires_python": ">=3.6",
  "summary": "",
  "version": "0.2.35",
  "releases": [],
  "developers": [
    "amazon_web_services",
    "aws-cloudformation-developers@amazon.com"
  ],
  "kwds": "cloudformation aws workflows yaml documentation",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_cloudformation_cli",
  "homepage": "https://github.com/aws-cloudformation/aws-cloudformation-rpdk/",
  "release_count": 51,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_botocore",
    "pypi_cfn_flip",
    "pypi_cfn_lint",
    "pypi_colorama",
    "pypi_docker",
    "pypi_hypothesis",
    "pypi_jinja2",
    "pypi_jsonschema",
    "pypi_markupsafe",
    "pypi_nested_lookup",
    "pypi_ordered_set",
    "pypi_pytest",
    "pypi_pytest_localserver",
    "pypi_pytest_random_order",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_werkzeug"
  ]
}
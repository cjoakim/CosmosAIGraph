{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure key vault certificates client library for python\nazure key vault helps solve the following problems:\n- certificate management (this library) - create, manage, and deploy public and private ssl/tls certificates\n- cryptographic key management\n([azure-keyvault-keys](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) - create, store, and control access to the keys used to encrypt your data\n- secrets management\n([azure-keyvault-secrets](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, api keys,\nand other secrets\n- vault administration ([azure-keyvault-administration](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration)) - role-based access control (rbac), and vault-level backup and restore options\n\n[source code][library_src]\n| [package (pypi)][pypi_package_certificates]\n| [package (conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [api reference documentation][reference_docs]\n| [product documentation][azure_keyvault]\n| [samples][certificates_samples]\n\n## _disclaimer_\n\n_azure sdk python packages support for python 2.7 has ended 01 january 2022. for more information and questions, please refer to https://github.com/azure/azure-sdk-for-python/issues/20691_.\n_python 3.7 or later is required to use this package. for more details, please refer to [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy)._\n\n## getting started\n### install the package\ninstall [azure-keyvault-certificates][pypi_package_certificates] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```bash\npip install azure-keyvault-certificates azure-identity\n```\n[azure-identity][azure_identity] is used for azure active directory\nauthentication as demonstrated below.\n\n### prerequisites\n* an [azure subscription][azure_sub]\n* python 3.7 or later\n* an existing [azure key vault][azure_keyvault]. if you need to create one, you can do so using the azure cli by following the steps in [this document][azure_keyvault_cli].\n\n### authenticate the client\nin order to interact with the azure key vault service, you will need an instance of a [certificateclient][certificate_client_docs], as well as a **vault url** and a credential object. this document demonstrates using a [defaultazurecredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nsee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### create a client\nafter configuring your environment for the [defaultazurecredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a certificate client (replacing the value of `vault_url` with your vault's url):\n\n<!-- snippet:hello_world.create_a_certificate_client -->\n\n```python\nvault_url = os.environ[\"vault_url\"]\ncredential = defaultazurecredential()\nclient = certificateclient(vault_url=vault_url, credential=credential)\n```\n\n<!-- end snippet -->\n\n> **note:** for an asynchronous client, import `azure.keyvault.certificates.aio`'s `certificateclient` instead.\n\n## key concepts\n### certificateclient\nwith a [certificateclient][certificate_client_docs] you can get certificates from the vault, create new certificates and new versions of existing certificates, update certificate metadata, and delete certificates. you can also manage certificate issuers, contacts, and management policies of certificates. this is illustrated in the [examples](#examples) below.\n\n## examples\nthis section contains code snippets covering common tasks:\n* [create a certificate](#create-a-certificate)\n* [retrieve a certificate](#retrieve-a-certificate)\n* [update properties of an existing certificate](#update-properties-of-an-existing-certificate)\n* [delete a certificate](#delete-a-certificate)\n* [list properties of certificates](#list-properties-of-certificates)\n* [async operations](#async-operations)\n* [asynchronously create a certificate](#asynchronously-create-a-certificate)\n* [asynchronously list properties of certificates](#asynchronously-list-properties-of-certificates)\n\n### create a certificate\n[begin_create_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.begin_create_certificate)\ncreates a certificate to be stored in the azure key vault. if a certificate with the same name already exists, a new\nversion of the certificate is created. before creating a certificate, a management policy for the certificate can be\ncreated or our default policy will be used. this method returns a long running operation poller.\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient, certificatepolicy\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_poller = certificate_client.begin_create_certificate(\n    certificate_name=\"cert-name\", policy=certificatepolicy.get_default()\n)\nprint(create_certificate_poller.result())\n```\nif you would like to check the status of your certificate creation, you can call `status()` on the poller or\n[get_certificate_operation](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.get_certificate_operation)\nwith the name of the certificate.\n\n### retrieve a certificate\n[get_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.get_certificate)\nretrieves the latest version of a certificate previously stored in the key vault.\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificate = certificate_client.get_certificate(\"cert-name\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\nprint(certificate.policy.issuer_name)\n```\n\n[get_certificate_version](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.get_certificate_version)\nretrieves a specific version of a certificate.\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ncertificate = certificate_client.get_certificate_version(certificate_name=\"cert-name\", version=\"cert-version\")\n\nprint(certificate.name)\nprint(certificate.properties.version)\n```\n\n### update properties of an existing certificate\n[update_certificate_properties](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.update_certificate_properties)\nupdates a certificate previously stored in the key vault.\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the certificate for further use\nupdated_certificate= certificate_client.update_certificate_properties(\n    certificate_name=\"cert-name\", enabled=false\n)\n\nprint(updated_certificate.name)\nprint(updated_certificate.properties.enabled)\n```\n\n### delete a certificate\n[begin_delete_certificate](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.begin_delete_certificate)\nrequests key vault delete a certificate, returning a poller which allows you to wait for the deletion to finish.\nwaiting is helpful when the vault has [soft-delete][soft_delete] enabled, and you want to purge\n(permanently delete) the certificate as soon as possible. when [soft-delete][soft_delete] is disabled,\n`begin_delete_certificate` itself is permanent.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ndeleted_certificate_poller = certificate_client.begin_delete_certificate(\"cert-name\")\n\ndeleted_certificate = deleted_certificate_poller.result()\nprint(deleted_certificate.name)\nprint(deleted_certificate.deleted_on)\n```\n### list properties of certificates\n[list_properties_of_certificates](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient.list_properties_of_certificates)\nlists the properties of all certificates in the specified key vault.\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\n\nfor certificate in certificates:\n    # this list doesn't include versions of the certificates\n    print(certificate.name)\n```\n\n### async operations\nthis library includes a complete set of async apis. to use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nsee\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/client_library_developer.md#transport)\nfor more information.\n\nasync clients and credentials should be closed when they're no longer needed. these\nobjects are async context managers and define async `close` methods. for\nexample:\n\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.certificates.aio import certificateclient\n\ncredential = defaultazurecredential()\n\n# call close when the client and credential are no longer needed\nclient = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.asyncexitstack can help)\nclient = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n### asynchronously create a certificate\n[create_certificate](https://aka.ms/azsdk/python/keyvault-certificates/aio/docs#azure.keyvault.certificates.aio.certificateclient.create_certificate)\ncreates a certificate to be stored in the azure key vault. if a certificate with the same name already exists, a new\nversion of the certificate is created. before creating a certificate, a management policy for the certificate can be\ncreated or our default policy will be used. awaiting `create_certificate` returns your created certificate if creation\nis successful, and a\n[certificateoperation](https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateoperation)\nif it is not.\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.certificates.aio import certificateclient\nfrom azure.keyvault.certificates import certificatepolicy\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncreate_certificate_result = await certificate_client.create_certificate(\n    certificate_name=\"cert-name\", policy=certificatepolicy.get_default()\n)\nprint(create_certificate_result)\n```\n\n### asynchronously list properties of certificates\n[list_properties_of_certificates](https://aka.ms/azsdk/python/keyvault-certificates/aio/docs#azure.keyvault.certificates.aio.certificateclient.list_properties_of_certificates)\nlists all the properties of the certificates in the client's vault:\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.certificates.aio import certificateclient\n\ncredential = defaultazurecredential()\n\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ncertificates = certificate_client.list_properties_of_certificates()\nasync for certificate in certificates:\n    print(certificate.name)\n```\n\n## troubleshooting\n\nsee the `azure-keyvault-certificates`\n[troubleshooting guide](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/troubleshooting.md)\nfor details on how to diagnose various failure scenarios.\n\n### general\nkey vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nfor example, if you try to get a key that doesn't exist in the vault, [certificateclient][certificate_client_docs]\nraises [resourcenotfounderror](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\nfrom azure.core.exceptions import resourcenotfounderror\n\ncredential = defaultazurecredential()\ncertificate_client = certificateclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    certificate_client.get_certificate(\"which-does-not-exist\")\nexcept resourcenotfounderror as e:\n    print(e.message)\n```\n### logging\nthis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.certificates import certificateclient\nimport sys\nimport logging\n\n# create a logger for the 'azure' sdk\nlogger = logging.getlogger('azure')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\ncredential = defaultazurecredential()\n\n# this client will log detailed information about its http sessions, at debug level\nclient = certificateclient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=true\n)\n```\n\nnetwork trace logging can also be enabled for any single operation:\n```python\ncertificate = certificate_client.get_certificate(certificate_name=\"cert-name\", logging_enable=true)\n```\n\n## next steps\nseveral samples are available in the azure sdk for python github repository. these samples provide example code for additional key vault scenarios:\n| file | description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete certificates |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and recover certificates |\n| [import_certificate.py][import_certificate_sample] ([async version][import_certificate_async_sample]) | import pkcs#12 (pfx) and pem-formatted certificates into key vault |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | list certificates |\n| [recover_purge_operations.py][recover_purge_operations_sample] ([async version][recover_purge_operations_async_sample]) | recover and purge certificates |\n| [issuers.py][issuers_sample] ([async version][issuers_async_sample]) | manage certificate issuers |\n| [contacts.py][contacts_sample] ([async version][contacts_async_sample]) | manage certificate contacts |\n| [parse_certificate.py][parse_sample] ([async version][parse_async_sample]) | extract a certificate's private key |\n\n###  additional documentation\nfor more extensive documentation on azure key vault, see the [api reference documentation][reference_docs].\n\n## contributing\nthis project welcomes contributions and suggestions. most contributions require\nyou to agree to a contributor license agreement (cla) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nfor details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether\nyou need to provide a cla and decorate the pr appropriately (e.g., label,\ncomment). simply follow the instructions provided by the bot. you will only\nneed to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct].\nfor more information, see the\n[code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- links -->\n[azure_core_exceptions]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/backup_restore_operations_async.py\n\n[certificate_client_docs]: https://aka.ms/azsdk/python/keyvault-certificates/docs#azure.keyvault.certificates.certificateclient\n[certificates_samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[contacts_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts.py\n[contacts_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/contacts_async.py\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.defaultazurecredential\n\n[hello_world_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/hello_world_async.py\n\n[import_certificate_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate.py\n[import_certificate_async_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples/import_certificate_async.py\n[issuers_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers.py\n[issuers_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/issuers_async.py\n\n[library_src]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/azure/keyvault/certificates\n[list_operations_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/list_operations_async.py\n\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[parse_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate.py\n[parse_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/parse_certificate_async.py\n[pip]: https://pypi.org/project/pip/\n[pypi_package_certificates]: https://pypi.org/project/azure-keyvault-certificates/\n\n[recover_purge_operations_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations.py\n[recover_purge_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-certificates/samples/recover_purge_operations_async.py\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-certificates/docs\n\n[soft_delete]: https://docs.microsoft.com/azure/key-vault/general/soft-delete-overview\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fkeyvault%2fazure-keyvault-certificates%2freadme.png)\n\n\n# release history\n\n## 4.7.0 (2023-03-16)\n\n### features added\n- added support for service api version `7.4`\n- clients each have a `send_request` method that can be used to send custom requests using the\n  client's existing pipeline ([#25172](https://github.com/azure/azure-sdk-for-python/issues/25172))\n\n### bugs fixed\n- the type hints for `keyvaultcertificate.cer` and `deletedcertificate.cer` are now\n  `optional[bytearray]` instead of `optional[bytes]`\n  ([#28959](https://github.com/azure/azure-sdk-for-python/issues/28959))\n\n### other changes\n- python 3.6 is no longer supported. please use python version 3.7 or later.\n- key vault api version `7.4` is now the default\n- updated minimum `azure-core` version to 1.24.0\n- dropped `msrest` requirement\n- added requirement for `isodate>=0.6.1` (`isodate` was required by `msrest`)\n- added requirement for `typing-extensions>=4.0.1`\n\n## 4.6.0 (2022-09-19)\n\n### breaking changes\n- clients verify the challenge resource matches the vault domain. this should affect few customers,\n  who can provide `verify_challenge_resource=false` to client constructors to disable.\n  see https://aka.ms/azsdk/blog/vault-uri for more information.\n\n## 4.5.1 (2022-08-11)\n\n### other changes\n- documentation improvements \n  ([#25039](https://github.com/azure/azure-sdk-for-python/issues/25039))\n\n## 4.5.0b1 (2022-06-07)\n\n### bugs fixed\n- port numbers are now preserved in the `vault_url` property of a `keyvaultcertificateidentifier`\n  ([#24446](https://github.com/azure/azure-sdk-for-python/issues/24446))\n\n## 4.4.0 (2022-03-28)\n\n### features added\n- key vault api version 7.3 is now the default\n- added support for multi-tenant authentication when using `azure-identity`\n  1.8.0 or newer ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n### bugs fixed\n- `keytype` now ignores casing during declaration, which resolves a scenario where key vault\n  keys created with non-standard casing could not be fetched with the sdk\n  ([#22797](https://github.com/azure/azure-sdk-for-python/issues/22797))\n\n### other changes\n- (from 4.4.0b3) python 2.7 is no longer supported. please use python version 3.6 or later.\n- updated minimum `azure-core` version to 1.20.0\n- (from 4.4.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698)). see\n  https://aka.ms/azsdk/python/identity/tokencredential for more details on how to integrate\n  this parameter if `get_token` is implemented by a custom credential.\n\n## 4.4.0b3 (2022-02-08)\n\n### other changes\n- python 2.7 is no longer supported. please use python version 3.6 or later.\n- (from 4.4.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n## 4.4.0b2 (2021-11-11)\n\n### features added\n- added support for multi-tenant authentication when using `azure-identity` 1.7.1 or newer\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n### other changes\n- updated minimum `azure-core` version to 1.15.0\n\n## 4.4.0b1 (2021-09-09)\n\n### features added\n- key vault api version 7.3-preview is now the default\n\n### other changes\n- updated type hints to fix mypy errors\n  ([#19158](https://github.com/azure/azure-sdk-for-python/issues/19158))\n\n## 4.3.0 (2021-06-22)\nthis is the last version to support python 3.5. the next version will require python 2.7 or 3.6+.\n### changed\n- key vault api version 7.2 is now the default\n- updated minimum `msrest` version to 0.6.21\n- the `issuer_name` parameter for `certificatepolicy` is now optional\n\n### added\n- added class `keyvaultcertificateidentifier` that parses out a full id returned by key vault,\n  so users can easily access the certificate's `name`, `vault_url`, and `version`.\n\n\n## 4.2.1 (2020-09-08)\n### fixed\n- correct typing for paging methods\n- fixed incompatibility issues with api version 2016-10-01\n\n\n## 4.2.0 (2020-08-11)\n### fixed\n- fixed an `attributeerror` during `get_certificate_version`\n- `import_certificate` no longer raises `attributeerror` when the `policy`\n  keyword argument isn't passed\n- values of `x-ms-keyvault-region` and `x-ms-keyvault-service-version` headers\n  are no longer redacted in logging output\n\n### changed\n- key vault api version 7.1 is now the default\n- updated minimum `azure-core` version to 1.7.0\n\n### added\n- at construction, clients accept a `customhookpolicy` through the optional\n  keyword argument `custom_hook_policy`\n- all client requests include a unique id in the header `x-ms-client-request-id`\n- dependency on `azure-common` for multiapi support\n\n## 4.2.0b1 (2020-03-10)\n- support for key vault api version 7.1-preview\n([#10124](https://github.com/azure/azure-sdk-for-python/pull/10124))\n  - added `recoverable_days` to `certificateproperties`\n  - added `apiversion` enum identifying key vault versions supported by this package\n\n## 4.1.0 (2020-03-10)\n- `certificateclient` instances have a `close` method which closes opened\nsockets. used as a context manager, a `certificateclient` closes opened sockets\non exit. ([#9906](https://github.com/azure/azure-sdk-for-python/pull/9906))\n- pollers no longer sleep after operation completion\n([#9991](https://github.com/azure/azure-sdk-for-python/pull/9991))\n\n## 4.0.1 (2020-02-11)\n- `azure.keyvault.certificates` defines `__version__`\n- updated `msrest` requirement to >=0.6.0\n- challenge authentication policy requires tls\n([#9457](https://github.com/azure/azure-sdk-for-python/pull/9457))\n- methods no longer raise the internal error `keyvaulterrorexception`\n([#9690](https://github.com/azure/azure-sdk-for-python/issues/9690))\n\n## 4.0.0 (2020-01-08)\n- first ga release\n\n## 4.0.0b7 (2019-12-17)\n- challenge authentication policy preserves request options\n([#8999](https://github.com/azure/azure-sdk-for-python/pull/8999))\n- added `vault_url` property to `certificateoperation`\n- removed `id`, `expires_on`, `not_before`, and `recover_level` properties from `certificatepolicy`\n- removed `vault_url` property from `certificateissuer`\n- removed `vault_url` property from `issuerproperties`\n\n\n## 4.0.0b6 (2019-12-04)\n- updated `msrest` requirement to >=0.6.0\n- renamed `get_policy` to `get_certificate_policy`\n- renamed `update_policy` to `update_certificate_policy`\n- renamed `create_contacts` to `set_contacts`\n- renamed parameter `admin_details` of `create_issuer` and `update_issuer` to `admin_contacts`\n- renamed all `name` parameters to include the name of the object whose name we are referring to.\nfor example, the `name` parameter of `get_certificate` is now `certificate_name`\n- renamed `administratordetails` to `administratorcontact`\n- renamed the `ekus` property of `certificatepolicy` to `enhanced_key_usage`\n- renamed the `curve` property of `certificatepolicy` to `key_curve_name`\n- renamed the `san_upns` property of `certificatepolicy` to `san_user_principal_names`\n- made the `subject_name` property of `certificatepolicy` a kwarg and renamed it to `subject`\n- renamed the `deleted_date` property of `deletedcertificate` to `deleted_on`\n- removed the `issuer_properties` property from `certificateissuer` and added the `provider` property\ndirectly onto `certificateissuer`\n- renamed property `admin_details` of `certificateissuer` to `admin_contacts`\n- renamed the `thumbprint` property of `certificateproperties` to `x509_thumbprint`\n- added `wellknownissuernames` enum class that holds popular issuer names\n- renamed `secretcontenttype` enum class to `certificatecontenttype`\n\n\n## 4.0.0b5 (2019-11-01)\n- removed redundant method `get_pending_certificate_signing_request()`. a pending csr can be retrieved via `get_certificate_operation()`.\n- renamed the sync method `create_certificate` to `begin_create_certificate`\n- renamed `restore_certificate` to `restore_certificate_backup`\n- renamed `get_certificate` to `get_certificate_version`\n- renamed `get_certificate_with_policy` to `get_certificate`\n- renamed `list_certificates` to `list_properties_of_certificates`\n- renamed `list_properties_of_issuers` to `list_properties_of_issuers`\n- renamed `list_certificate_versions` to `list_properties_of_certificate_versions`\n- `create_certificate` now has policy as a required parameter\n- all optional positional parameters besides `version` have been moved to kwargs\n- renamed sync method `delete_certificate` to `begin_delete_certificate`\n- renamed sync method `recover_certificate` to `begin_recover_deleted_certificate`\n- renamed async method `recover_certificate` to `recover_deleted_certificate`\n- the sync method `begin_delete_certificate` and async `delete_certificate` now return pollers that return a `deletedcertificate`\n- the sync method `begin_recover_deleted_certificate` and async `recover_deleted_certificate` now return pollers that return a `keyvaultcertificate`\n\n- renamed enum `actiontype` to `certificatepolicyaction`\n- renamed `certificate` to `keyvaultcertificate`\n- renamed `contact` to `certificatecontact`\n- renamed `issuer` to `certificateissuer`\n- renamed `certificateerror` to `certificateoperationerror`\n- renamed `expires` property of `certificateproperties` and `certificatepolicy` to `expires_on`\n- renamed `created` property of `certificateproperties`, `certificatepolicy`, and `certificateissuer` to `created_on`\n- renamed `updated` property of `certificateproperties`, `certificatepolicy`, and `certificateissuer` to `updated_on`\n- the `vault_endpoint` parameter of `certificateclient` has been renamed to `vault_url`\n- the property `vault_endpoint` has been renamed to `vault_url` in all models\n- `certificatepolicy` now has a public class method `get_default` allowing users to get the default `certificatepolicy`\n- logging can now be enabled properly on the client level\n\n## 4.0.0b4 (2019-10-08)\n- enums `jsonwebkeycurvename` and `jsonwebkeytype` have been renamed to `keycurvename` and `keytype`, respectively.\n- both async and sync versions of `create_certificate` now return pollers that return the created `certificate` if creation is successful,\nand a `certificateoperation` if not.\n- `certificate` now has attribute `properties`, which holds certain properties of the\ncertificate, such as `version`. this changes the shape of the `certificate` type,\nas certain properties of `certificate` (such as `version`) have to be accessed\nthrough the `properties` property.\n\n- `update_certificate` has been renamed to `update_certificate_properties`\n- the `vault_url` parameter of `certificateclient` has been renamed to `vault_endpoint`\n- the property `vault_url` has been renamed to `vault_endpoint` in all models\n\n## 4.0.0b3 (2019-09-11)\nversion 4.0.0b3 is the first preview of our efforts to create a user-friendly and pythonic client library for azure key vault's certificates.\n\n this library is not a direct replacement for `azure-keyvault`. applications\nusing that library would require code changes to use `azure-keyvault-certificates`.\nthis package's\n[documentation](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/readme.md)\nand\n[samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates/samples)\ndemonstrate the new api.\n\n### breaking changes from `azure-keyvault`:\n- packages scoped by functionality\n    - `azure-keyvault-certificates` contains a client for certificate operations\n- client instances are scoped to vaults (an instance interacts with one vault\nonly)\n- authentication using `azure-identity` credentials\n  - see this package's\n  [documentation](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys/readme.md)\n  , and the\n  [azure identity documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md)\n  for more information\n\n### new features:\n- distributed tracing framework opencensus is now supported\n- asynchronous api supported on python 3.5.3+\n    - the `azure.keyvault.certificates.aio` namespace contains an async equivalent of\n    the synchronous client in `azure.keyvault.certificates`\n    - async clients use [aiohttp](https://pypi.org/project/aiohttp/) for transport\n    by default. see [azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md/#transport)\n    for more information about using other transports.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-keyvault-certificates",
  "package_url": "https://pypi.org/project/azure-keyvault-certificates/",
  "project_url": "https://pypi.org/project/azure-keyvault-certificates/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates"
  },
  "release_url": "https://pypi.org/project/azure-keyvault-certificates/4.7.0/",
  "requires_dist": [
    "azure-common (~=1.1)",
    "azure-core (<2.0.0,>=1.24.0)",
    "isodate (>=0.6.1)",
    "typing-extensions (>=4.0.1)"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure key vault certificates client library for python",
  "version": "4.7.0",
  "releases": [],
  "developers": [
    "azurekeyvault@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_keyvault azure_keyvault_cli azure_identity_pypi keyvaultcertificate azure_identity",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_keyvault_certificates",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates",
  "release_count": 23,
  "dependency_ids": [
    "pypi_azure_common",
    "pypi_azure_core",
    "pypi_isodate",
    "pypi_typing_extensions"
  ]
}
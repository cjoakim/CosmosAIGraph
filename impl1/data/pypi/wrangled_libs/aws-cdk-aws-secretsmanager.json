{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# aws secrets manager construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\n```python\nimport aws_cdk.aws_secretsmanager as secretsmanager\n```\n\n## create a new secret in a stack\n\nin order to have secretsmanager generate a new secret value automatically,\nyou can get started with the following:\n\n```python\n# default secret\nsecret = secretsmanager.secret(self, \"secret\")\n# using the default secret\niam.user(self, \"user\",\n    password=secret.secret_value\n)\n# templated secret\ntemplated_secret = secretsmanager.secret(self, \"templatedsecret\",\n    generate_secret_string=secretsmanager.secretstringgenerator(\n        secret_string_template=json.stringify({\"username\": \"user\"}),\n        generate_string_key=\"password\"\n    )\n)\n# using the templated secret\niam.user(self, \"otheruser\",\n    user_name=templated_secret.secret_value_from_json(\"username\").to_string(),\n    password=templated_secret.secret_value_from_json(\"password\")\n)\n```\n\nif you need to use a pre-existing secret, the recommended way is to manually\nprovision the secret in *aws secretsmanager* and use the `secret.fromsecretarn`\nor `secret.fromsecretattributes` method to make it available in your cdk application:\n\n```python\n# encryption_key: kms.key\n\nsecret = secretsmanager.secret.from_secret_attributes(self, \"importedsecret\",\n    secret_arn=\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    # if the secret is encrypted using a kms-hosted cmk, either import or reference that key:\n    encryption_key=encryption_key\n)\n```\n\nsecretsmanager secret values can only be used in select set of properties. for the\nlist of properties, see [the cloudformation dynamic references documentation](https://docs.aws.amazon.com/awscloudformation/latest/userguide/dynamic-references.html).\n\na secret can set `removalpolicy`. if it set to `retain`, that removing a secret will fail.\n\n## grant permission to use the secret to a role\n\nyou must grant permission to a resource for that resource to be allowed to\nuse a secret. this can be achieved with the `secret.grantread` and/or `secret.grantwrite`\nmethod, depending on your need:\n\n```python\nrole = iam.role(self, \"somerole\", assumed_by=iam.accountrootprincipal())\nsecret = secretsmanager.secret(self, \"secret\")\nsecret.grant_read(role)\nsecret.grant_write(role)\n```\n\nif, as in the following example, your secret was created with a kms key:\n\n```python\n# role: iam.role\n\nkey = kms.key(self, \"kms\")\nsecret = secretsmanager.secret(self, \"secret\", encryption_key=key)\nsecret.grant_read(role)\nsecret.grant_write(role)\n```\n\nthen `secret.grantread` and `secret.grantwrite` will also grant the role the\nrelevant encrypt and decrypt permissions to the kms key through the\nsecretsmanager service principal.\n\nthe principal is automatically added to secret resource policy and kms key policy for cross account access:\n\n```python\nother_account = iam.accountprincipal(\"1234\")\nkey = kms.key(self, \"kms\")\nsecret = secretsmanager.secret(self, \"secret\", encryption_key=key)\nsecret.grant_read(other_account)\n```\n\n## rotating a secret\n\n### using a custom lambda function\n\na rotation schedule can be added to a secret using a custom lambda function:\n\n```python\nimport aws_cdk.aws_lambda as lambda_\n\n# fn: lambda.function\n\nsecret = secretsmanager.secret(self, \"secret\")\n\nsecret.add_rotation_schedule(\"rotationschedule\",\n    rotation_lambda=fn,\n    automatically_after=duration.days(15)\n)\n```\n\nnote: the required permissions for lambda to call secretsmanager and the other way round are automatically granted based on [aws documentation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets-required-permissions.html) as long as the lambda is not imported.\n\nsee [overview of the lambda rotation function](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets-lambda-function-overview.html) on how to implement a lambda rotation function.\n\n### using a hosted lambda function\n\nuse the `hostedrotation` prop to rotate a secret with a hosted lambda function:\n\n```python\nsecret = secretsmanager.secret(self, \"secret\")\n\nsecret.add_rotation_schedule(\"rotationschedule\",\n    hosted_rotation=secretsmanager.hostedrotation.mysql_single_user()\n)\n```\n\nhosted rotation is available for secrets representing credentials for mysql, postgresql, oracle,\nmariadb, sqlserver, redshift and mongodb (both for the single and multi user schemes).\n\nwhen deployed in a vpc, the hosted rotation implements `ec2.iconnectable`:\n\n```python\n# my_vpc: ec2.vpc\n# db_connections: ec2.connections\n# secret: secretsmanager.secret\n\n\nmy_hosted_rotation = secretsmanager.hostedrotation.mysql_single_user(vpc=my_vpc)\nsecret.add_rotation_schedule(\"rotationschedule\", hosted_rotation=my_hosted_rotation)\ndb_connections.allow_default_port_from(my_hosted_rotation)\n```\n\nsee also [automating secret creation in aws cloudformation](https://docs.aws.amazon.com/secretsmanager/latest/userguide/integrating_cloudformation.html).\n\n## rotating database credentials\n\ndefine a `secretrotation` to rotate database credentials:\n\n```python\n# my_secret: secretsmanager.secret\n# my_database: ec2.iconnectable\n# my_vpc: ec2.vpc\n\n\nsecretsmanager.secretrotation(self, \"secretrotation\",\n    application=secretsmanager.secretrotationapplication.mysql_rotation_single_user,  # mysql single user scheme\n    secret=my_secret,\n    target=my_database,  # a connectable\n    vpc=my_vpc,  # the vpc where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)\n```\n\nthe secret must be a json string with the following format:\n\n```json\n{\n  \"engine\": \"<required: database engine>\",\n  \"host\": \"<required: instance host name>\",\n  \"username\": \"<required: username>\",\n  \"password\": \"<required: password>\",\n  \"dbname\": \"<optional: database name>\",\n  \"port\": \"<optional: if not specified, default port will be used>\",\n  \"masterarn\": \"<required for multi user rotation: the arn of the master secret which will be used to create users/change passwords>\"\n}\n```\n\nfor the multi user scheme, a `mastersecret` must be specified:\n\n```python\n# my_user_secret: secretsmanager.secret\n# my_master_secret: secretsmanager.secret\n# my_database: ec2.iconnectable\n# my_vpc: ec2.vpc\n\n\nsecretsmanager.secretrotation(self, \"secretrotation\",\n    application=secretsmanager.secretrotationapplication.mysql_rotation_multi_user,\n    secret=my_user_secret,  # the secret that will be rotated\n    master_secret=my_master_secret,  # the secret used for the rotation\n    target=my_database,\n    vpc=my_vpc\n)\n```\n\nsee also [aws-rds](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-rds/readme.md) where\ncredentials generation and rotation is integrated.\n\n## importing secrets\n\nexisting secrets can be imported by arn, name, and other attributes (including the kms key used to encrypt the secret).\nsecrets imported by name should use the short-form of the name (without the secretsmanager-provided suffx);\nthe secret name must exist in the same account and region as the stack.\nimporting by name makes it easier to reference secrets created in different regions, each with their own suffix and arn.\n\n```python\nsecret_complete_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:mysecret-f3gdy9\"\nsecret_partial_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:mysecret\" # no secrets manager suffix\nencryption_key = kms.key.from_key_arn(self, \"myenckey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\")\nmy_secret_from_complete_arn = secretsmanager.secret.from_secret_complete_arn(self, \"secretfromcompletearn\", secret_complete_arn)\nmy_secret_from_partial_arn = secretsmanager.secret.from_secret_partial_arn(self, \"secretfrompartialarn\", secret_partial_arn)\nmy_secret_from_name = secretsmanager.secret.from_secret_name_v2(self, \"secretfromname\", \"mysecret\")\nmy_secret_from_attrs = secretsmanager.secret.from_secret_attributes(self, \"secretfromattributes\",\n    secret_complete_arn=secret_complete_arn,\n    encryption_key=encryption_key\n)\n```\n\n## replicating secrets\n\nsecrets can be replicated to multiple regions by specifying `replicaregions`:\n\n```python\n# my_key: kms.key\n\nsecretsmanager.secret(self, \"secret\",\n    replica_regions=[secretsmanager.replicaregion(\n        region=\"eu-west-1\"\n    ), secretsmanager.replicaregion(\n        region=\"eu-central-1\",\n        encryption_key=my_key\n    )\n    ]\n)\n```\n\nalternatively, use `addreplicaregion()`:\n\n```python\nsecret = secretsmanager.secret(self, \"secret\")\nsecret.add_replica_region(\"eu-west-1\")\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-secretsmanager",
  "package_url": "https://pypi.org/project/aws-cdk.aws-secretsmanager/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-secretsmanager/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-secretsmanager/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-sam (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::secretsmanager",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_secretsmanager aws_cdk from_secret_name_v2 secret_value from_secret_attributes",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_secretsmanager",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_sam",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5"
  ],
  "description": "|build status| |coverage status|\n\n``aflow`` python api\n====================\n\npython api wrapping the aflux api language for aflow library. *note:*\nthis is not an official repo of the aflow consortium and is not\nmaintained by them. `api\ndocumentation <https://rosenbrockc.github.io/aflow/>`__.\n\nif you use this package, please cite it:\n\n::\n\n   @article{2017arxiv171000813r,\n      author = {{rosenbrock}, c.~w.},\n       title = \"{a practical python api for querying aflowlib}\",\n     journal = {arxiv e-prints},\n   archiveprefix = \"arxiv\",\n      eprint = {1710.00813},\n    primaryclass = \"cs.db\",\n    keywords = {computer science - databases},\n        year = 2017,\n       month = sep,\n      adsurl = {http://adsabs.harvard.edu/abs/2017arxiv171000813r},\n     adsnote = {provided by the sao/nasa astrophysics data system}\n   }\n\nquickstart\n----------\n\ninstall ``aflow`` from the python package index:\n\n::\n\n   pip install aflow\n\nor alternatively install ``aflow`` from conda using:\n\n::\n\n   conda install -c conda-forge aflow\n\nopen an ipython notebook or terminal and execute the query from the\npaper:\n\n.. code:: python\n\n   from aflow import *\n\n   result = search(batch_size=20\n           ).select(k.agl_thermal_conductivity_300k\n           ).filter(k.egap > 6).orderby(k.agl_thermal_conductivity_300k, true)\n\n   # now, you can just iterate over the results.\n   for entry in result:\n       print(entry.egap)\n\n``aflow`` supports lazy evaluation. this means that if you didn\u2019t ask\nfor a particular property during the initial query, you can just ask for\nit later and the request will happen transparently in the background.\n\npython 2 support\n================\n\nalthough the package was originally designed to be compatible with both\npython 2 and python 3, python 2 has reached the end of its life. as\nsuch, we don\u2019t guarantee anymore that it will work.\n\n.. |build status| image:: https://travis-ci.org/rosenbrockc/aflow.svg?branch=master\n   :target: https://travis-ci.org/rosenbrockc/aflow\n.. |coverage status| image:: https://coveralls.io/repos/github/rosenbrockc/aflow/badge.svg?branch=master\n   :target: https://coveralls.io/github/rosenbrockc/aflow?branch=master\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aflow",
  "package_url": "https://pypi.org/project/aflow/",
  "project_url": "https://pypi.org/project/aflow/",
  "project_urls": {
    "Homepage": "https://github.com/rosenbrockc/aflow"
  },
  "release_url": "https://pypi.org/project/aflow/0.0.11/",
  "requires_dist": [
    "termcolor",
    "numpy",
    "six",
    "jinja2",
    "beautifulsoup4",
    "ase"
  ],
  "requires_python": "",
  "summary": "python api for searching aflow database.",
  "version": "0.0.11",
  "releases": [],
  "developers": [
    "conrad_w_rosenbrock",
    "rosenbrockc@gmail.com"
  ],
  "kwds": "aflowlib aflow aflux api python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aflow",
  "homepage": "https://github.com/rosenbrockc/aflow",
  "release_count": 12,
  "dependency_ids": [
    "pypi_ase",
    "pypi_beautifulsoup4",
    "pypi_jinja2",
    "pypi_numpy",
    "pypi_six",
    "pypi_termcolor"
  ]
}
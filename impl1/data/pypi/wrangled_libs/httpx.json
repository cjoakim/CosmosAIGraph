{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: asyncio",
    "framework :: trio",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://www.python-httpx.org/\"><img width=\"350\" height=\"208\" src=\"https://raw.githubusercontent.com/encode/httpx/master/docs/img/butterfly.png\" alt='httpx'></a>\n</p>\n\n<p align=\"center\"><strong>httpx</strong> <em>- a next-generation http client for python.</em></p>\n\n<p align=\"center\">\n<a href=\"https://github.com/encode/httpx/actions\">\n    <img src=\"https://github.com/encode/httpx/workflows/test%20suite/badge.svg\" alt=\"test suite\">\n</a>\n<a href=\"https://pypi.org/project/httpx/\">\n    <img src=\"https://badge.fury.io/py/httpx.svg\" alt=\"package version\">\n</a>\n</p>\n\nhttpx is a fully featured http client library for python 3. it includes **an integrated\ncommand line client**, has support for both **http/1.1 and http/2**, and provides both **sync\nand async apis**.\n\n---\n\ninstall httpx using pip:\n\n```shell\n$ pip install httpx\n```\n\nnow, let's get started:\n\n```pycon\n>>> import httpx\n>>> r = httpx.get('https://www.example.org/')\n>>> r\n<response [200 ok]>\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'text/html; charset=utf-8'\n>>> r.text\n'<!doctype html>\\n<html>\\n<head>\\n<title>example domain</title>...'\n```\n\nor, using the command-line client.\n\n```shell\n$ pip install 'httpx[cli]'  # the command line client is an optional dependency.\n```\n\nwhich now allows us to use httpx directly from the command-line...\n\n<p align=\"center\">\n  <img width=\"700\" src=\"https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-help.png\" alt='httpx --help'>\n</p>\n\nsending a request...\n\n<p align=\"center\">\n  <img width=\"700\" src=\"https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-request.png\" alt='httpx http://httpbin.org/json'>\n</p>\n\n## features\n\nhttpx builds on the well-established usability of `requests`, and gives you:\n\n* a broadly [requests-compatible api](https://www.python-httpx.org/compatibility/).\n* an integrated command-line client.\n* http/1.1 [and http/2 support](https://www.python-httpx.org/http2/).\n* standard synchronous interface, but with [async support if you need it](https://www.python-httpx.org/async/).\n* ability to make requests directly to [wsgi applications](https://www.python-httpx.org/advanced/#calling-into-python-web-apps) or [asgi applications](https://www.python-httpx.org/async/#calling-into-python-web-apps).\n* strict timeouts everywhere.\n* fully type annotated.\n* 100% test coverage.\n\nplus all the standard features of `requests`...\n\n* international domains and urls\n* keep-alive & connection pooling\n* sessions with cookie persistence\n* browser-style ssl verification\n* basic/digest authentication\n* elegant key/value cookies\n* automatic decompression\n* automatic content decoding\n* unicode response bodies\n* multipart file uploads\n* http(s) proxy support\n* connection timeouts\n* streaming downloads\n* .netrc support\n* chunked requests\n\n## installation\n\ninstall with pip:\n\n```shell\n$ pip install httpx\n```\n\nor, to include the optional http/2 support, use:\n\n```shell\n$ pip install httpx[http2]\n```\n\nhttpx requires python 3.8+.\n\n## documentation\n\nproject documentation is available at [https://www.python-httpx.org/](https://www.python-httpx.org/).\n\nfor a run-through of all the basics, head over to the [quickstart](https://www.python-httpx.org/quickstart/).\n\nfor more advanced topics, see the [advanced usage](https://www.python-httpx.org/advanced/) section, the [async support](https://www.python-httpx.org/async/) section, or the [http/2](https://www.python-httpx.org/http2/) section.\n\nthe [developer interface](https://www.python-httpx.org/api/) provides a comprehensive api reference.\n\nto find out about tools that integrate with httpx, see [third party packages](https://www.python-httpx.org/third_party_packages/).\n\n## contribute\n\nif you want to contribute with httpx check out the [contributing guide](https://www.python-httpx.org/contributing/) to learn how to start.\n\n## dependencies\n\nthe httpx project relies on these excellent libraries:\n\n* `httpcore` - the underlying transport implementation for `httpx`.\n  * `h11` - http/1.1 support.\n* `certifi` - ssl certificates.\n* `idna` - internationalized domain name support.\n* `sniffio` - async library autodetection.\n\nas well as these optional installs:\n\n* `h2` - http/2 support. *(optional, with `httpx[http2]`)*\n* `socksio` - socks proxy support. *(optional, with `httpx[socks]`)*\n* `rich` - rich terminal support. *(optional, with `httpx[cli]`)*\n* `click` - command line client support. *(optional, with `httpx[cli]`)*\n* `brotli` or `brotlicffi` - decoding for \"brotli\" compressed responses. *(optional, with `httpx[brotli]`)*\n\na huge amount of credit is due to `requests` for the api layout that\nmuch of this work follows, as well as to `urllib3` for plenty of design\ninspiration around the lower-level networking details.\n\n---\n\n<p align=\"center\"><i>httpx is <a href=\"https://github.com/encode/httpx/blob/master/license.md\">bsd licensed</a> code.<br/>designed & crafted with care.</i><br/>&mdash; \ud83e\udd8b &mdash;</p>\n\n## release information\n\n### added\n\n* the `proxy` argument was added. you should use the `proxy` argument instead of the deprecated `proxies`, or use `mounts=` for more complex configurations. (#2879)\n\n### deprecated\n\n* the `proxies` argument is now deprecated. it will still continue to work, but it will be removed in the future. (#2879)\n\n### fixed\n\n* fix cases of double escaping of url path components. allow / as a safe character in the query portion. (#2990)\n* handle `no_proxy` envvar cases when a fully qualified url is supplied as the value. (#2741)\n* allow urls where username or password contains unescaped '@'. (#2986)\n* ensure asgi `raw_path` does not include url query component. (#2999)\n* ensure `response.iter_text()` cannot yield empty strings. (#2998)\n\n\n---\n\n[full changelog](https://github.com/encode/httpx/blob/master/changelog.md)\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "httpx",
  "package_url": "https://pypi.org/project/httpx/",
  "project_url": "https://pypi.org/project/httpx/",
  "project_urls": {
    "Changelog": "https://github.com/encode/httpx/blob/master/CHANGELOG.md",
    "Documentation": "https://www.python-httpx.org",
    "Homepage": "https://github.com/encode/httpx",
    "Source": "https://github.com/encode/httpx"
  },
  "release_url": "https://pypi.org/project/httpx/0.26.0/",
  "requires_dist": [
    "anyio",
    "certifi",
    "httpcore==1.*",
    "idna",
    "sniffio",
    "brotli; (platform_python_implementation == 'CPython') and extra == 'brotli'",
    "brotlicffi; (platform_python_implementation != 'CPython') and extra == 'brotli'",
    "click==8.*; extra == 'cli'",
    "pygments==2.*; extra == 'cli'",
    "rich<14,>=10; extra == 'cli'",
    "h2<5,>=3; extra == 'http2'",
    "socksio==1.*; extra == 'socks'"
  ],
  "requires_python": ">=3.8",
  "summary": "the next generation http client.",
  "version": "0.26.0",
  "releases": [],
  "developers": [
    "tom@tomchristie.com"
  ],
  "kwds": "html href httpx browser urllib3",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_httpx",
  "homepage": "",
  "release_count": 67,
  "dependency_ids": [
    "pypi_anyio",
    "pypi_brotli",
    "pypi_brotlicffi",
    "pypi_certifi",
    "pypi_click",
    "pypi_h2",
    "pypi_httpcore",
    "pypi_idna",
    "pypi_pygments",
    "pypi_rich",
    "pypi_sniffio",
    "pypi_socksio"
  ]
}
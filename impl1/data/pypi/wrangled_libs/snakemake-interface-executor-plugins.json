{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12"
  ],
  "description": "# stable interfaces and functionality for snakemake executor plugins\n\nthis package provides a stable interface for interactions between snakemake and its executor plugins (wip).\n\nplugins should implement the following skeleton to comply with this interface.\nit is recommended to use snakemake's poetry plugin to set up this skeleton (and automated testing) within a python package, see https://github.com/snakemake/poetry-snakemake-plugin.\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import list, generator, optional\nfrom snakemake_interface_executor_plugins.executors.base import submittedjobinfo\nfrom snakemake_interface_executor_plugins.executors.remote import remoteexecutor\nfrom snakemake_interface_executor_plugins.settings import (\n    executorsettingsbase, commonsettings\n)\nfrom snakemake_interface_executor_plugins.workflow import workflowexecutorinterface\nfrom snakemake_interface_executor_plugins.logging import loggerexecutorinterface\nfrom snakemake_interface_executor_plugins.jobs import (\n    jobexecutorinterface,\n)\n\n# optional:\n# define additional settings for your executor.\n# they will occur in the snakemake cli as --<executor-name>-<param-name>\n# omit this class if you don't need any.\n# make sure that all defined fields are optional and specify a default value\n# of none or anything else that makes sense in your case.\n@dataclass\nclass executorsettings(executorsettingsbase):\n    myparam: optional[int] = field(\n        default=none,\n        metadata={\n            \"help\": \"some help text\",\n            # optionally request that setting is also available for specification\n            # via an environment variable. the variable will be named automatically as\n            # snakemake_<executor-name>_<param-name>, all upper case.\n            # this mechanism should only be used for passwords and usernames.\n            # for other items, we rather recommend to let people use a profile\n            # for setting defaults\n            # (https://snakemake.readthedocs.io/en/stable/executing/cli.html#profiles).\n            \"env_var\": false,\n            # optionally specify a function that parses the value given by the user.\n            # this is useful to create complex types from the user input.\n            \"parse_func\": ...,\n            # if a parse_func is specified, you also have to specify an unparse_func\n            # that converts the parsed value back to a string.\n            \"unparse_func\": ...,\n            # optionally specify that setting is required when the executor is in use.\n            \"required\": true,\n        },\n    )\n\n\n# required:\n# specify common settings shared by various executors.\ncommon_settings = commonsettings(\n    # define whether your executor plugin executes locally\n    # or remotely. in virtually all cases, it will be remote execution\n    # (cluster, cloud, etc.). only snakemake's standard execution \n    # plugins (snakemake-executor-plugin-dryrun, snakemake-executor-plugin-local)\n    # are expected to specify false here.\n    non_local_exec=true,\n    # whether the executor implies to not have a shared file system\n    implies_no_shared_fs=true,\n    # whether to deploy workflow sources to default storage provider before execution\n    job_deploy_sources=true,\n    # whether arguments for setting the storage provider shall be passed to jobs\n    pass_default_storage_provider_args=true,\n    # whether arguments for setting default resources shall be passed to jobs\n    pass_default_resources_args=true,\n    # whether environment variables shall be passed to jobs (if false, use \n    # self.envvars() to obtain a dict of environment variables and their values\n    # and pass them e.g. as secrets to the execution backend)\n    pass_envvar_declarations_to_cmd=true,\n    # whether the default storage provider shall be deployed before the job is run on \n    # the remote node. usually set to true if the executor does not assume a shared fs\n    auto_deploy_default_storage_provider=true,\n    # specify initial amount of seconds to sleep before checking for job status\n    init_seconds_before_status_checks=0,\n)\n\n\n# required:\n# implementation of your executor\nclass executor(remoteexecutor):\n    def __post_init__(self):\n        # access workflow\n        self.workflow\n        # access executor specific settings\n        self.workflow.executor_settings\n\n        # important: in your plugin, only access methods and properties of\n        # snakemake objects (like workflow, persistence, etc.) that are\n        # defined in the interfaces found in the\n        # snakemake-interface-executor-plugins and the\n        # snakemake-interface-common package.\n        # other parts of those objects are not guaranteed to remain\n        # stable across new releases.\n\n        # to ensure that the used interfaces are not changing, you should\n        # depend on these packages as >=a.b.c,<d with d=a+1 (i.e. pin the\n        # dependency on this package to be at least the version at time\n        # of development and less than the next major version which would\n        # introduce breaking changes).\n\n        # in case of errors outside of jobs, please raise a workflowerror\n\n    def run_job(self, job: jobexecutorinterface):\n        # implement here how to run a job.\n        # you can access the job's resources, etc.\n        # via the job object.\n        # after submitting the job, you have to call\n        # self.report_job_submission(job_info).\n        # with job_info being of type\n        # snakemake_interface_executor_plugins.executors.base.submittedjobinfo.\n        # if required, make sure to pass the job's id to the job_info object, as keyword\n        # argument 'external_job_id'.\n\n        ...\n\n    async def check_active_jobs(\n        self, active_jobs: list[submittedjobinfo]\n    ) -> generator[submittedjobinfo, none, none]:\n        # check the status of active jobs.\n\n        # you have to iterate over the given list active_jobs.\n        # if you provided it above, each will have its external_jobid set according\n        # to the information you provided at submission time.\n        # for jobs that have finished successfully, you have to call\n        # self.report_job_success(active_job).\n        # for jobs that have errored, you have to call\n        # self.report_job_error(active_job).\n        # this will also take care of providing a proper error message.\n        # usually there is no need to perform additional logging here.\n        # jobs that are still running have to be yielded.\n        #\n        # for queries to the remote middleware, please use\n        # self.status_rate_limiter like this:\n        #\n        # async with self.status_rate_limiter:\n        #    # query remote middleware here\n        #\n        # to modify the time until the next call of this method,\n        # you can set self.next_sleep_seconds here.\n        ...\n\n    def cancel_jobs(self, active_jobs: list[submittedjobinfo]):\n        # cancel all active jobs.\n        # this method is called when snakemake is interrupted.\n        ...\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "snakemake-interface-executor-plugins",
  "package_url": "https://pypi.org/project/snakemake-interface-executor-plugins/",
  "project_url": "https://pypi.org/project/snakemake-interface-executor-plugins/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/snakemake-interface-executor-plugins/8.1.3/",
  "requires_dist": [
    "argparse-dataclass (>=2.0.0,<3.0.0)",
    "throttler (>=1.2.2,<2.0.0)",
    "snakemake-interface-common (>=1.12.0,<2.0.0)"
  ],
  "requires_python": ">=3.11,<4.0",
  "summary": "this package provides a stable interface for interactions between snakemake and its executor plugins.",
  "version": "8.1.3",
  "releases": [],
  "developers": [
    "johannes.koester@uni-due.de"
  ],
  "kwds": "snakemake_interface_executor_plugins executorsettings executor executor_settings remoteexecutor",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_snakemake_interface_executor_plugins",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_argparse_dataclass",
    "pypi_snakemake_interface_common",
    "pypi_throttler"
  ]
}
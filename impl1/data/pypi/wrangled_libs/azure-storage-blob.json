{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "microsoft azure blob storage client library for python\n# azure storage blobs client library for python\nazure blob storage is microsoft's object storage solution for the cloud. blob storage is optimized for storing massive amounts of unstructured data, such as text or binary data.\n\nblob storage is ideal for:\n\n* serving images or documents directly to a browser\n* storing files for distributed access\n* streaming video and audio\n* storing data for backup and restore, disaster recovery, and archiving\n* storing data for analysis by an on-premises or azure-hosted service\n\n[source code](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/azure/storage/blob)\n| [package (pypi)](https://pypi.org/project/azure-storage-blob/)\n| [package (conda)](https://anaconda.org/microsoft/azure-storage/)\n| [api reference documentation](https://aka.ms/azsdk-python-storage-blob-ref)\n| [product documentation](https://docs.microsoft.com/azure/storage/)\n| [samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples)\n\n\n## getting started\n\n### prerequisites\n* python 3.7 or later is required to use this package. for more details, please read our page on [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy).\n* you must have an [azure subscription](https://azure.microsoft.com/free/) and an\n[azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### install the package\ninstall the azure storage blobs client library for python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-blob\n```\n\n### create a storage account\nif you wish to create a new storage account, you can use the\n[azure portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[azure powershell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [azure cli](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### create the client\nthe azure storage blobs client library for python allows you to interact with three types of resources: the storage\naccount itself, blob storage containers, and blobs. interaction with these resources starts with an instance of a\n[client](#clients). to create a client object, you will need the storage account's blob service account url and a\ncredential that allows you to access the storage account:\n\n```python\nfrom azure.storage.blob import blobserviceclient\n\nservice = blobserviceclient(account_url=\"https://<my-storage-account-name>.blob.core.windows.net/\", credential=credential)\n```\n\n#### looking up the account url\nyou can find the storage account's blob service url using the\n[azure portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[azure powershell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [azure cli](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# get the blob service account url for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryendpoints.blob\"\n```\n\n#### types of credentials\nthe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. to use an [azure active directory (aad) token credential](https://docs.microsoft.com/azure/storage/common/storage-auth-aad),\n   provide an instance of the desired credential type obtained from the\n   [azure-identity](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials) library.\n   for example, [defaultazurecredential](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential)\n   can be used to authenticate the client.\n\n   this requires some initial setup:\n   * [install azure-identity](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package)\n   * [register a new aad application](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app) and give permissions to access azure storage\n   * [grant access](https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal) to azure blob data with rbac in the azure portal\n   * set the values of the client id, tenant id, and client secret of the aad application as environment variables:\n     azure_tenant_id, azure_client_id, azure_client_secret\n\n   use the returned token credential to authenticate the client:\n    ```python\n        from azure.identity import defaultazurecredential\n        from azure.storage.blob import blobserviceclient\n        token_credential = defaultazurecredential()\n\n        blob_service_client = blobserviceclient(\n            account_url=\"https://<my_account_name>.blob.core.windows.net\",\n            credential=token_credential\n        )\n    ```\n\n2. to use a [shared access signature (sas) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. if your account url includes the sas token, omit the credential parameter.\n   you can generate a sas token from the azure portal under \"shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account, container, or blob:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.blob import blobserviceclient, generate_account_sas, resourcetypes, accountsaspermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=resourcetypes(service=true),\n        permission=accountsaspermissions(read=true),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    blob_service_client = blobserviceclient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=sas_token)\n    ```\n\n3. to use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. this can be found in the azure portal under the \"access keys\"\n   section or by running the following azure cli command:\n\n    ```az storage account keys list -g myresourcegroup -n mystorageaccount```\n\n    use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.blob import blobserviceclient\n    service = blobserviceclient(account_url=\"https://<my_account_name>.blob.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n    \n    if you are using **customized url** (which means the url is not in this format `<my_account_name>.blob.core.windows.net`),\n    please instantiate the client using the credential below:\n    ```python\n    from azure.storage.blob import blobserviceclient\n    service = blobserviceclient(account_url=\"https://<my_account_name>.blob.core.windows.net\", \n       credential={\"account_name\": \"<your_account_name>\", \"account_key\":\"<account_access_key>\"})\n    ```\n\n4. to use [anonymous public read access](https://docs.microsoft.com/azure/storage/blobs/storage-manage-access-to-resources),\n   simply omit the credential parameter.\n\n#### creating the client from a connection string\ndepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account url and credential separately. to do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.blob import blobserviceclient\n\nconnection_string = \"defaultendpointsprotocol=https;accountname=xxxx;accountkey=xxxx;endpointsuffix=core.windows.net\"\nservice = blobserviceclient.from_connection_string(conn_str=connection_string)\n```\n\nthe connection string to your storage account can be found in the azure portal under the \"access keys\" section or by running the following cli command:\n\n```bash\naz storage account show-connection-string -g myresourcegroup -n mystorageaccount\n```\n\n## key concepts\nthe following components make up the azure blob service:\n* the storage account itself\n* a container within the storage account\n* a blob within a container\n\nthe azure storage blobs client library for python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### clients\nfour different clients are provided to interact with the various components of the blob service:\n1. [blobserviceclient](https://aka.ms/azsdk-python-storage-blob-blobserviceclient) -\n    this client represents interaction with the azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the containers and blobs within. it provides operations to retrieve and configure the\n    account properties as well as list, create, and delete containers within the account. to perform operations on a\n    specific container or blob, retrieve a client using the `get_container_client` or `get_blob_client` methods.\n2. [containerclient](https://aka.ms/azsdk-python-storage-blob-containerclient) -\n    this client represents interaction with a specific container (which need not exist yet), and allows you to acquire\n    preconfigured client instances to access the blobs within. it provides operations to create, delete, or configure a\n    container and includes operations to list, upload, and delete the blobs within it. to perform operations on a\n    specific blob within the container, retrieve a client using the `get_blob_client` method.\n3. [blobclient](https://aka.ms/azsdk-python-storage-blob-blobclient) -\n    this client represents interaction with a specific blob (which need not exist yet). it provides operations to\n    upload, download, delete, and create snapshots of a blob, as well as specific operations per blob type.\n4. [blobleaseclient](https://aka.ms/azsdk-python-storage-blob-blobleaseclient) -\n    this client represents lease interactions with a `containerclient` or `blobclient`. it provides operations to\n    acquire, renew, release, change, and break a lease on a specified resource.\n\n### async clients \nthis library includes a complete async api supported on python 3.5+. to use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nsee\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/client_library_developer.md#transport)\nfor more information.\n\nasync clients and credentials should be closed when they're no longer needed. these\nobjects are async context managers and define async `close` methods.\n\n### blob types\nonce you've initialized a client, you can choose from the different types of blobs:\n* [block blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-block-blobs)\n  store text and binary data, up to approximately 4.75 tib. block blobs are made up of blocks of data that can be\n  managed individually\n* [append blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-append-blobs)\n  are made up of blocks like block blobs, but are optimized for append operations. append blobs are ideal for scenarios\n  such as logging data from virtual machines\n* [page blobs](https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs#about-page-blobs)\n  store random access files up to 8 tib in size. page blobs store virtual hard drive (vhd) files and serve as disks for\n  azure virtual machines\n\n## examples\nthe following sections provide several code snippets covering some of the most common storage blob tasks, including:\n\n* [create a container](#create-a-container \"create a container\")\n* [uploading a blob](#uploading-a-blob \"uploading a blob\")\n* [downloading a blob](#downloading-a-blob \"downloading a blob\")\n* [enumerating blobs](#enumerating-blobs \"enumerating blobs\")\n\nnote that a container must be created before to upload or download a blob.\n\n### create a container\n\ncreate a container from where you can upload or download blobs.\n```python\nfrom azure.storage.blob import containerclient\n\ncontainer_client = containerclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\ncontainer_client.create_container()\n```\n\nuse the async client to upload a blob\n\n```python\nfrom azure.storage.blob.aio import containerclient\n\ncontainer_client = containerclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nawait container_client.create_container()\n```\n\n### uploading a blob\nupload a blob to your container\n\n```python\nfrom azure.storage.blob import blobclient\n\nblob = blobclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./samplesource.txt\", \"rb\") as data:\n    blob.upload_blob(data)\n```\n\nuse the async client to upload a blob\n\n```python\nfrom azure.storage.blob.aio import blobclient\n\nblob = blobclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./samplesource.txt\", \"rb\") as data:\n    await blob.upload_blob(data)\n```\n\n### downloading a blob\ndownload a blob from your container\n\n```python\nfrom azure.storage.blob import blobclient\n\nblob = blobclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./blockdestination.txt\", \"wb\") as my_blob:\n    blob_data = blob.download_blob()\n    blob_data.readinto(my_blob)\n```\n\ndownload a blob asynchronously\n\n```python\nfrom azure.storage.blob.aio import blobclient\n\nblob = blobclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\", blob_name=\"my_blob\")\n\nwith open(\"./blockdestination.txt\", \"wb\") as my_blob:\n    stream = await blob.download_blob()\n    data = await stream.readall()\n    my_blob.write(data)\n```\n\n### enumerating blobs\nlist the blobs in your container\n\n```python\nfrom azure.storage.blob import containerclient\n\ncontainer = containerclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = container.list_blobs()\nfor blob in blob_list:\n    print(blob.name + '\\n')\n```\n\nlist the blobs asynchronously\n\n```python\nfrom azure.storage.blob.aio import containerclient\n\ncontainer = containerclient.from_connection_string(conn_str=\"<connection_string>\", container_name=\"mycontainer\")\n\nblob_list = []\nasync for blob in container.list_blobs():\n    blob_list.append(blob)\nprint(blob_list)\n```\n\n## optional configuration\n\noptional keyword arguments that can be passed in at the client and per-operation level.\n\n### retry policy configuration\n\nuse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): total number of retries to allow. takes precedence over other counts.\npass in `retry_total=0` if you do not want to retry on requests. defaults to 10.\n* __retry_connect__ (int): how many connection-related errors to retry on. defaults to 3.\n* __retry_read__ (int): how many times to retry on read errors. defaults to 3.\n* __retry_status__ (int): how many times to retry on bad status codes. defaults to 3.\n* __retry_to_secondary__ (bool): whether the request should be retried to secondary, if able.\nthis should only be enabled of ra-grs accounts are used and potentially stale data can be handled.\ndefaults to `false`.\n\n### encryption configuration\n\nuse the following keyword arguments when instantiating a client to configure encryption:\n\n* __require_encryption__ (bool): if set to true, will enforce that objects are encrypted and decrypt them.\n* __encryption_version__ (str): specifies the version of encryption to use. current options are `'2.0'` or `'1.0'` and\nthe default value is `'1.0'`. version 1.0 is deprecated, and it is **highly recommended** to use version 2.0.\n* __key_encryption_key__ (object): the user-provided key-encryption-key. the instance must implement the following methods:\n    - `wrap_key(key)`--wraps the specified key using an algorithm of the user's choice.\n    - `get_key_wrap_algorithm()`--returns the algorithm used to wrap the specified symmetric key.\n    - `get_kid()`--returns a string key id for this key-encryption-key.\n* __key_resolver_function__ (callable): the user-provided key resolver. uses the kid string to return a key-encryption-key\nimplementing the interface defined above.\n\n### other client / per-operation configuration\n\nother optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**client keyword arguments:**\n\n* __connection_timeout__ (int): the number of seconds the client will wait to establish a connection to the server.\ndefaults to 20 seconds.\n* __read_timeout__ (int): the number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. this is a socket level timeout and is not affected by overall data size. client-side read \ntimeouts will be automatically retried. defaults to 60 seconds.\n* __transport__ (any): user-provided transport to send the http request.\n\n**per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): the given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): the given callback uses the request before being sent to service.\n* __client_request_id__ (str): optional user specified identification of the request.\n* __user_agent__ (str): appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): enables logging at the debug level. defaults to false. can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): enables logging the request and response body. defaults to false. can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): pass in custom headers as key, value pairs. e.g. `headers={'customvalue': value}`\n\n## troubleshooting\n### general\nstorage blob clients raise exceptions defined in [azure core](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md).\n\nthis list can be used for reference to catch thrown exceptions. to get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### logging\nthis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.blob import blobserviceclient\n\n# create a logger for the 'azure.storage.blob' sdk\nlogger = logging.getlogger('azure.storage.blob')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\n# this client will log detailed information about its http sessions, at debug level\nservice_client = blobserviceclient.from_connection_string(\"your_connection_string\", logging_enable=true)\n```\n\nsimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.get_service_stats(logging_enable=true)\n```\n\n## next steps\n\n### more sample code\n\nget started with our [blob samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples).\n\nseveral storage blobs python sdk samples are available to you in the sdk's github repository. these samples provide example code for additional scenarios commonly encountered while working with storage blobs:\n\n* [blob_samples_container_access_policy.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_container_access_policy.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_container_access_policy_async.py)) - examples to set access policies:\n    * set up access policy for container\n\n* [blob_samples_hello_world.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_hello_world.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_hello_world_async.py)) - examples for common storage blob tasks:\n    * set up a container\n    * create a block, page, or append blob\n    * upload blobs\n    * download blobs\n    * delete blobs\n\n* [blob_samples_authentication.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication_async.py)) - examples for authenticating and creating the client:\n    * from a connection string\n    * from a shared access key\n    * from a shared access signature token\n    * from active directory\n\n* [blob_samples_service.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_service.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_service_async.py)) - examples for interacting with the blob service:\n    * get account information\n    * get and set service properties\n    * get service statistics\n    * create, list, and delete containers\n    * get the blob or container client\n\n* [blob_samples_containers.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_containers.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_containers_async.py)) - examples for interacting with containers:\n    * create a container and delete containers\n    * set metadata on containers\n    * get container properties\n    * acquire a lease on container\n    * set an access policy on a container\n    * upload, list, delete blobs in container\n    * get the blob client to interact with a specific blob\n\n* [blob_samples_common.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_common.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_common_async.py)) - examples common to all types of blobs:\n    * create a snapshot\n    * delete a blob snapshot\n    * soft delete a blob\n    * undelete a blob\n    * acquire a lease on a blob\n    * copy a blob from a url\n\n* [blob_samples_directory_interface.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob/samples/blob_samples_directory_interface.py) - examples for interfacing with blob storage as if it were a directory on a filesystem:\n    * copy (upload or download) a single file or directory\n    * list files or directories at a single level or recursively\n    * delete a single file or recursively delete a directory\n\n### additional documentation\nfor more extensive documentation on azure blob storage, see the [azure blob storage documentation](https://docs.microsoft.com/azure/storage/blobs/) on docs.microsoft.com.\n\n## contributing\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/). for more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-storage-blob",
  "package_url": "https://pypi.org/project/azure-storage-blob/",
  "project_url": "https://pypi.org/project/azure-storage-blob/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob"
  },
  "release_url": "https://pypi.org/project/azure-storage-blob/12.19.0/",
  "requires_dist": [
    "azure-core<2.0.0,>=1.28.0",
    "cryptography>=2.1.4",
    "typing-extensions>=4.3.0",
    "isodate>=0.6.1",
    "azure-core[aio]<2.0.0,>=1.28.0; extra == \"aio\""
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure blob storage client library for python",
  "version": "12.19.0",
  "releases": [],
  "developers": [
    "ascl@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "blob_data storage azure blob_samples_service storageservices",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_storage_blob",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob",
  "release_count": 63,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_cryptography",
    "pypi_isodate",
    "pypi_typing_extensions"
  ],
  "documentation_summary": "The provided HTML text is a detailed README for the Azure Storage Blobs client library for Python, hosted on GitHub under the Azure organization. This library facilitates interaction with Azure Blob storage, which is optimized for storing massive amounts of unstructured data such as text or binary data. It covers various aspects including prerequisites (Python 3.8 or later, Azure subscription, and storage account), installation instructions using pip, and creating a storage account using Azure Portal, PowerShell, or CLI. The document also explains how to create client objects for interacting with storage accounts, containers, and blobs using different types of credentials (Azure Active Directory token, shared access signature token, storage account shared key, or anonymous public read access). Additionally, it provides examples for common tasks like creating a container, uploading, downloading, and enumerating blobs. The README also discusses optional configuration, troubleshooting, logging, and next steps including more sample code and additional documentation.",
  "embedding": [
    -0.008007848635315895,
    -0.004863662179559469,
    0.008014866150915623,
    -0.024690279737114906,
    0.0004539944638963789,
    0.02200930006802082,
    -0.001343999058008194,
    -0.011152033694088459,
    -0.015215612947940826,
    -0.039274249225854874,
    -0.00181422324385494,
    -0.00030792667530477047,
    -0.03276129439473152,
    0.05642690509557724,
    -0.014247091487050056,
    -0.020535463467240334,
    0.014808553270995617,
    -0.03020664118230343,
    0.021686460822820663,
    -0.010695846751332283,
    0.005754983052611351,
    -0.012127573601901531,
    -0.023202406242489815,
    -0.0010501089273020625,
    -0.024044599384069443,
    -0.013096095062792301,
    0.013510173186659813,
    -0.02370772324502468,
    0.016970181837677956,
    -8.213570981752127e-05,
    0.026655396446585655,
    -0.015159467235207558,
    -0.03747757151722908,
    -0.016394682228565216,
    0.01393828820437193,
    0.005625145044177771,
    0.02622026391327381,
    0.0015826203161850572,
    0.0245218425989151,
    -0.0008816703921183944,
    0.004063579253852367,
    0.028171343728899956,
    0.004295182414352894,
    0.01380494050681591,
    -0.03172259032726288,
    -0.012794309295713902,
    0.0018352781189605594,
    -0.015538454055786133,
    0.002161627635359764,
    -0.0037267024163156748,
    0.009130771271884441,
    0.0014510276960209012,
    -0.017321094870567322,
    -0.013320679776370525,
    0.01487873587757349,
    -0.007565697189420462,
    -0.02567283809185028,
    0.0329858772456646,
    -0.00983961671590805,
    -0.015299832448363304,
    0.010113329626619816,
    0.013425953686237335,
    -0.018289616331458092,
    -0.03683188930153847,
    -0.018542274832725525,
    -0.009088662452995777,
    -0.02004418522119522,
    -0.004989991430193186,
    0.013461044989526272,
    -0.02061968296766281,
    0.030403153970837593,
    0.02243039757013321,
    0.0041688536293804646,
    -0.005432142410427332,
    0.04432740435004234,
    -0.008063994348049164,
    -0.021840862929821014,
    0.010408096946775913,
    -0.008850040845572948,
    -0.003356488421559334,
    -0.002682734513655305,
    -0.00391970481723547,
    -0.002637115539982915,
    0.01910373568534851,
    0.012618852779269218,
    0.024690279737114906,
    -0.01266798097640276,
    -0.015384051948785782,
    -0.011102906428277493,
    -0.007986793294548988,
    0.028746841475367546,
    -0.00010264222510159016,
    0.007909592241048813,
    0.018514201045036316,
    0.007488496135920286,
    0.03624235466122627,
    0.006467337720096111,
    0.031076908111572266,
    0.008695638738572598,
    -0.015313869342207909,
    -0.0030529482755810022,
    0.026894018054008484,
    -0.0214899480342865,
    -0.013250497169792652,
    -0.056988365948200226,
    0.0026774706784635782,
    0.014275165274739265,
    -0.0217987522482872,
    0.045787204056978226,
    0.011945098638534546,
    -0.01419796422123909,
    0.018626494333148003,
    -0.005418105982244015,
    -0.027329150587320328,
    -0.005618126597255468,
    0.019244100898504257,
    0.01263990718871355,
    0.011243271641433239,
    0.0037863575853407383,
    0.008646510541439056,
    -0.005309322848916054,
    0.01063970010727644,
    -0.0005211067036725581,
    -0.0005079474067315459,
    0.002179173519834876,
    -0.017096510156989098,
    0.007091963663697243,
    -0.010646718554198742,
    0.008744766935706139,
    -0.030038204044103622,
    0.012092482298612595,
    0.011166070587933064,
    -0.0018475600518286228,
    -0.009011461399495602,
    -0.0003096812579315156,
    0.016324499621987343,
    -0.02428322099149227,
    -0.01262587122619152,
    -0.0255745816975832,
    -0.01003612857311964,
    -0.013004858046770096,
    0.043457139283418655,
    -0.018823005259037018,
    -0.008464035578072071,
    -0.0069129979237914085,
    0.03938654065132141,
    0.012506560422480106,
    0.006839306093752384,
    -0.00643926439806819,
    -0.009523794986307621,
    -0.0010974822798743844,
    -0.012745182029902935,
    -0.020240696147084236,
    -0.016240281984210014,
    -0.00011031846224796027,
    -0.009383429773151875,
    -0.013222424313426018,
    0.013924251310527325,
    -0.022514615207910538,
    -0.01604376919567585,
    -0.014387457631528378,
    0.04727507755160332,
    -0.015089284628629684,
    -0.03132956475019455,
    -0.005326868500560522,
    0.03009434975683689,
    -0.009783471003174782,
    0.001545774401165545,
    -0.023988453671336174,
    0.007425331510603428,
    0.015973586589097977,
    0.0007882396457716823,
    -0.01659119501709938,
    -0.006516465451568365,
    0.013959342613816261,
    0.02664135955274105,
    0.020268769934773445,
    -0.002749407896772027,
    -0.007656934671103954,
    -0.003430180251598358,
    0.03357541188597679,
    0.007249874994158745,
    0.005912893917411566,
    0.04435547813773155,
    -0.017882557585835457,
    -0.0002945481101050973,
    0.0044881850481033325,
    -0.005077719688415527,
    0.0002713000576477498,
    0.02593953348696232,
    0.016731560230255127,
    0.04898753762245178,
    -0.014282182790338993,
    -0.03986378386616707,
    -0.5857169032096863,
    -0.013678612187504768,
    -0.004081124905496836,
    -0.01970730721950531,
    0.009748379699885845,
    0.009818562306463718,
    -0.009509758092463017,
    0.01607184298336506,
    -0.018247507512569427,
    0.03441760689020157,
    -0.010857266373932362,
    0.013482100330293179,
    -0.023749832063913345,
    -0.019089698791503906,
    0.005316340830177069,
    0.0033301699440926313,
    0.005379505455493927,
    -0.003567036706954241,
    -0.0038705768529325724,
    -0.020605646073818207,
    -0.005551453214138746,
    0.0351194329559803,
    -0.025237705558538437,
    -0.00920095480978489,
    0.011966153047978878,
    0.00674455938860774,
    -0.014008470810949802,
    0.0032161229755729437,
    0.021335545927286148,
    0.033098168671131134,
    -0.01283641904592514,
    0.015608636662364006,
    0.030627738684415817,
    0.007551660295575857,
    0.04901561141014099,
    -0.01083621196448803,
    0.002547632670029998,
    0.04831378161907196,
    0.0021212727297097445,
    0.027174748480319977,
    0.0064357551746070385,
    -0.025448253378272057,
    0.00229322025552392,
    0.005905875936150551,
    0.03273322060704231,
    0.006727013736963272,
    0.021756643429398537,
    8.060046820901334e-05,
    -0.008534218184649944,
    0.0301224235445261,
    0.011594184674322605,
    0.0003302974218968302,
    0.012738163582980633,
    -0.05098072811961174,
    0.033406972885131836,
    -0.006663849111646414,
    0.008358761668205261,
    -0.01837383583188057,
    -0.006618230137974024,
    -0.005070701241493225,
    -0.029083719477057457,
    -0.0037863575853407383,
    0.0033336791675537825,
    -0.04595564305782318,
    -0.036130063235759735,
    0.023244516924023628,
    -0.017278986051678658,
    -0.024956975132226944,
    0.009874708950519562,
    -0.006523483898490667,
    0.03169451653957367,
    -0.006983180530369282,
    0.010288786143064499,
    -0.0393584668636322,
    0.008162249810993671,
    0.041856974363327026,
    0.01625431701540947,
    0.02258479967713356,
    0.011088869534432888,
    0.022781310603022575,
    0.0035916005726903677,
    0.0064919013530015945,
    0.0010027355747297406,
    -0.038067106157541275,
    0.04376594349741936,
    0.02624833583831787,
    -0.020423170179128647,
    -0.0052461582235991955,
    0.0043302737176418304,
    -0.021728569641709328,
    0.01419796422123909,
    -0.0025213141925632954,
    -0.02203737385571003,
    -0.05420913174748421,
    0.019665198400616646,
    0.03059966489672661,
    -0.02243039757013321,
    -0.019847672432661057,
    -0.020746011286973953,
    -0.00486717140302062,
    0.0048706806264817715,
    -0.0015589336398988962,
    -0.021321509033441544,
    0.011860879138112068,
    0.04828571155667305,
    -0.0008404380641877651,
    -0.010632681660354137,
    0.013622465543448925,
    -0.006663849111646414,
    -0.01070286426693201,
    0.00794468354433775,
    -0.024213038384914398,
    0.010309841483831406,
    0.0006610334967263043,
    0.0032266504131257534,
    -0.031498003751039505,
    0.023272588849067688,
    0.004063579253852367,
    0.025813203305006027,
    0.002194964559748769,
    0.0012325840070843697,
    -0.004877699073404074,
    -0.010787083767354488,
    0.01598762348294258,
    0.015917440876364708,
    0.0005092633655294776,
    0.011615240015089512,
    -0.011369599960744381,
    -0.005860256962478161,
    -0.004463620949536562,
    0.011902988888323307,
    0.01487873587757349,
    0.018233470618724823,
    -0.01085024792701006,
    0.04550647363066673,
    0.0189212616533041,
    0.011278362944722176,
    -0.02279534749686718,
    0.004109198227524757,
    -0.02234617806971073,
    -0.02779235690832138,
    -0.00010900253255385906,
    0.00549530703574419,
    -0.026444848626852036,
    -0.006814741995185614,
    -0.015412124805152416,
    -0.022304067388176918,
    0.019482722505927086,
    -0.014043562114238739,
    -0.019033553078770638,
    -0.011201161891222,
    -0.025027157738804817,
    -0.021756643429398537,
    0.010513370856642723,
    -0.003247705288231373,
    0.009608014486730099,
    -0.027511626482009888,
    -0.013292606920003891,
    0.008836003951728344,
    0.01816328801214695,
    -0.017208803445100784,
    0.006905979476869106,
    0.0021826825104653835,
    0.021868934854865074,
    -0.052047502249479294,
    -0.015355979092419147,
    -0.010197549127042294,
    0.02122325450181961,
    -0.014240073971450329,
    -0.03705647587776184,
    0.012913620099425316,
    -0.0014501503901556134,
    -0.009123753756284714,
    5.266445441520773e-05,
    0.017124583944678307,
    0.009783471003174782,
    -0.03643886744976044,
    0.0329858772456646,
    0.017854483798146248,
    0.0026020242366939783,
    0.0029897838830947876,
    0.027960795909166336,
    -0.017026327550411224,
    -0.004463620949536562,
    0.03551245480775833,
    0.022205812856554985,
    0.01207844540476799,
    0.027722174301743507,
    0.008625456131994724,
    -0.014780480414628983,
    0.013783886097371578,
    0.013404899276793003,
    -0.0020230168011039495,
    0.01625431701540947,
    -0.017096510156989098,
    0.01419796422123909,
    -0.002679225290194154,
    0.004207454156130552,
    0.005277740303426981,
    0.011159052141010761,
    0.04006029665470123,
    9.78171665337868e-05,
    0.007439367938786745,
    0.007951701991260052,
    -0.005772528704255819,
    -0.005481270141899586,
    0.008106104098260403,
    -0.0034740446135401726,
    0.012288994155824184,
    -0.01197317149490118,
    0.03736528009176254,
    0.005825165659189224,
    -0.004779443144798279,
    -0.002763444557785988,
    -0.006165551953017712,
    0.005688309203833342,
    0.00022962907678447664,
    0.016506975516676903,
    -0.030318934470415115,
    -0.0055654896423220634,
    0.0031371675431728363,
    0.015201576985418797,
    -0.008225414901971817,
    -0.016296427696943283,
    -0.013425953686237335,
    -0.0016747351037338376,
    0.02358139306306839,
    -0.010015074163675308,
    0.010555480606853962,
    -0.015594599768519402,
    0.01262587122619152,
    0.024592025205492973,
    0.018907224759459496,
    -0.026374666020274162,
    0.007551660295575857,
    -0.005407578311860561,
    0.04724700748920441,
    -0.020381061360239983,
    0.009207972325384617,
    -0.03837591037154198,
    0.010506353341042995,
    0.025237705558538437,
    0.02370772324502468,
    -0.016689449548721313,
    0.033070098608732224,
    0.018626494333148003,
    -0.02143380232155323,
    0.019412539899349213,
    -0.005733928177505732,
    -0.001156260259449482,
    -0.01216968335211277,
    0.009151826612651348,
    -0.008365780115127563,
    -0.010864284820854664,
    -0.004997009411454201,
    -0.01313820481300354,
    -0.010281768627464771,
    0.009755398146808147,
    0.014906809665262699,
    -0.007572715170681477,
    0.020774085074663162,
    0.01918795518577099,
    0.026402737945318222,
    0.008843022398650646,
    0.04859451577067375,
    -0.012808346189558506,
    -0.01003612857311964,
    -0.03761793673038483,
    -0.011832806281745434,
    -0.0016010432736948133,
    -0.01894933357834816,
    -0.03054351918399334,
    -0.011180107481777668,
    -0.03941461443901062,
    0.007565697189420462,
    0.005484779365360737,
    0.012646925635635853,
    0.036972254514694214,
    0.008127158507704735,
    -0.012548670172691345,
    -0.016731560230255127,
    -0.011783678084611893,
    0.024872755631804466,
    -0.001550160814076662,
    0.013875123113393784,
    -0.017629899084568024,
    -0.023104151710867882,
    0.019356394186615944,
    -0.020030148327350616,
    0.033603485673666,
    -0.015005065128207207,
    0.010976577177643776,
    -0.0005956758395768702,
    0.0183176901191473,
    -0.032592855393886566,
    -0.0033424519933760166,
    0.026206227019429207,
    -0.005453197285532951,
    0.0017984322039410472,
    -0.0015352469636127353,
    0.02137765660881996,
    0.0015115602873265743,
    -0.010204567573964596,
    0.03862856701016426,
    0.03321046382188797,
    -0.00048513803631067276,
    -0.0011878424556925893,
    -0.0006934929988346994,
    -0.034221094101667404,
    -0.04674169048666954,
    -0.004224999807775021,
    -0.0012036336120218039,
    -0.017966775223612785,
    0.006446282844990492,
    0.015117357484996319,
    0.01774219051003456,
    0.010436169803142548,
    -0.009088662452995777,
    0.022486543282866478,
    0.018022922798991203,
    -0.01819135993719101,
    -0.02104077860713005,
    -0.017180729657411575,
    0.012766236439347267,
    0.019595015794038773,
    0.022261958569288254,
    -0.005263703875243664,
    0.01109588798135519,
    -0.025841277092695236,
    -0.01719476655125618,
    -0.01852823793888092,
    -0.0022721656132489443,
    -0.0020510898903012276,
    0.0008514040964655578,
    -0.007986793294548988,
    0.012920638546347618,
    -0.01350315473973751,
    0.019145846366882324,
    0.01283641904592514,
    0.02863455004990101,
    0.011369599960744381,
    0.022598834708333015,
    0.01994592882692814,
    -0.022177739068865776,
    0.019974002614617348,
    0.010190530680119991,
    0.007425331510603428,
    0.017461460083723068,
    0.05142989754676819,
    0.018205396831035614,
    0.005379505455493927,
    0.00309154880233109,
    -0.017447423189878464,
    -0.016577158123254776,
    -0.004091652575880289,
    -0.0027704627718776464,
    -0.007593770045787096,
    0.023328736424446106,
    -0.014598005451261997,
    0.04713471233844757,
    0.02797483094036579,
    0.005874293390661478,
    -0.016801742836833,
    0.00448116660118103,
    0.024900829419493675,
    -0.007018271833658218,
    -0.008969351649284363,
    0.0031652406323701143,
    -6.744120764778927e-05,
    -0.029139865189790726,
    -0.018514201045036316,
    0.012288994155824184,
    -0.011123960837721825,
    0.015664782375097275,
    0.018247507512569427,
    0.01722283847630024,
    -0.02582724019885063,
    -0.019145846366882324,
    0.030262788757681847,
    -0.006730522494763136,
    0.007825372740626335,
    -0.0127872908487916,
    -0.00993085466325283,
    -0.046966277062892914,
    -0.026599250733852386,
    -0.037646010518074036,
    -0.0004636445955839008,
    -0.003284551203250885,
    -0.017728155478835106,
    0.002684488892555237,
    -0.006783159915357828,
    0.013264534063637257,
    -0.024479731917381287,
    0.014808553270995617,
    0.024409549310803413,
    -0.0035126451402902603,
    -0.02575705759227276,
    -0.01283641904592514,
    0.024199001491069794,
    0.016998253762722015,
    -0.006783159915357828,
    0.0027880084235221148,
    0.014976992271840572,
    0.003331924555823207,
    0.014050580561161041,
    -0.03627042844891548,
    0.00820435956120491,
    -0.030375080183148384,
    0.022290030494332314,
    0.0021019724663347006,
    0.013601411134004593,
    0.00040442790486849844,
    -0.013201368972659111,
    0.043148335069417953,
    -0.006467337720096111,
    0.011811751872301102,
    0.002523068804293871,
    -0.018233470618724823,
    0.03394036367535591,
    0.024255147203803062,
    -0.010646718554198742,
    -0.006000622641295195,
    0.008197341114282608,
    -0.005962022114545107,
    -0.029111791402101517,
    -0.018626494333148003,
    0.003828467335551977,
    -0.01682981662452221,
    0.018626494333148003,
    -0.008085048757493496,
    0.0011738059110939503,
    0.013166277669370174,
    0.0024072672240436077,
    0.01471029780805111,
    0.011166070587933064,
    -0.008442981168627739,
    -0.019426576793193817,
    -0.017307057976722717,
    -0.01847209222614765,
    0.010106311179697514,
    -0.0008452631300315261,
    0.021756643429398537,
    0.008056975901126862,
    -0.009664160199463367,
    0.02198122814297676,
    -0.04702242091298103,
    0.005481270141899586,
    0.019974002614617348,
    0.008028903044760227,
    0.02669750526547432,
    0.014141817577183247,
    -0.03231212496757507,
    -0.020324915647506714,
    0.0035108905285596848,
    0.0007768349605612457,
    -0.011271344497799873,
    -0.0043969471007585526,
    -0.02803097851574421,
    -0.023258553817868233,
    -0.012331103906035423,
    0.0064287371933460236,
    0.010751992464065552,
    -0.008969351649284363,
    -0.004031997174024582,
    -0.025448253378272057,
    0.003200331935659051,
    0.011088869534432888,
    -0.00273537146858871,
    -0.007642898242920637,
    -0.028101161122322083,
    -0.015398088842630386,
    -0.0003932425461243838,
    -0.00859738327562809,
    0.014934882521629333,
    0.016085879877209663,
    -0.006249770987778902,
    -0.01449974998831749,
    -0.029589034616947174,
    -0.0029336377047002316,
    0.0026529068127274513,
    0.011994226835668087,
    -0.008288579061627388,
    0.031048834323883057,
    0.02697823755443096,
    0.026318520307540894,
    0.002768708160147071,
    0.024381475523114204,
    0.016535049304366112,
    0.015664782375097275,
    0.004477657377719879,
    -0.01542616169899702,
    0.019875746220350266,
    -0.009488703683018684,
    -0.01918795518577099,
    -0.009137789718806744,
    0.015327905304729939,
    -0.0029775018338114023,
    -0.03278936445713043,
    -0.005011046305298805,
    0.027497589588165283,
    -0.007123545743525028,
    0.009439575485885143,
    -0.02188297174870968,
    -0.023244516924023628,
    -0.01176262367516756,
    -0.007586752064526081,
    -0.008379817008972168,
    0.015496344305574894,
    -0.023356808349490166,
    -0.03413687273859978,
    0.00977645255625248,
    -0.02321644313633442,
    0.008078031241893768,
    -0.015552490018308163,
    0.008906186558306217,
    -0.008063994348049164,
    0.019538868218660355,
    0.012780273333191872,
    -0.003603882621973753,
    -0.0019616070203483105,
    0.026346592232584953,
    -0.03447375074028969,
    -0.005962022114545107,
    -0.02146187610924244,
    0.012176701799035072,
    -0.004288163967430592,
    0.013734757900238037,
    -0.00036867859307676554,
    -0.007098982110619545,
    -0.005435651633888483,
    -0.01016947627067566,
    -0.032592855393886566,
    0.019454648718237877,
    -0.02358139306306839,
    -0.01813521422445774,
    -0.02025473304092884,
    -0.005884821061044931,
    -0.012920638546347618,
    -0.015243686735630035,
    0.00445660250261426,
    0.017840446904301643,
    0.010380024090409279,
    -0.015959549695253372,
    0.026150081306695938,
    0.012990821152925491,
    -0.015285796485841274,
    0.03315431624650955,
    0.03396843746304512,
    0.028297672048211098,
    0.023595429956912994,
    0.007965738885104656,
    -0.015847258269786835,
    -0.01282238308340311,
    -0.04255880042910576,
    -0.023104151710867882,
    0.00829559750854969,
    0.029224084690213203,
    -0.01353122852742672,
    -0.013215405866503716,
    0.006449791602790356,
    -0.017110547050833702,
    -0.014268146827816963,
    -0.012015281245112419,
    0.02415689080953598,
    0.023651575669646263,
    0.013833013363182545,
    -0.018303653225302696,
    -0.03166644275188446,
    -0.011278362944722176,
    0.01750357076525688,
    -0.020296841859817505,
    0.0005368978017941117,
    0.00022524266387335956,
    -0.03506328538060188,
    -0.027441442012786865,
    0.015398088842630386,
    0.0036530105862766504,
    0.021546093747019768,
    0.01167138572782278,
    0.004930336028337479,
    -0.007895556278526783,
    -0.0054496880620718,
    -0.03865664079785347,
    -0.014976992271840572,
    0.013159260153770447,
    0.01322944276034832,
    -0.024816609919071198,
    0.003923214040696621,
    0.054265279322862625,
    0.013046967796981335,
    -0.013362789526581764,
    -0.014282182790338993,
    0.003044175449758768,
    0.02661328762769699,
    -0.03871278837323189,
    -0.008786876685917377,
    -0.01944061368703842,
    -0.009916817769408226,
    -0.010085256770253181,
    -0.003309115068987012,
    -0.014043562114238739,
    -0.009902781806886196,
    0.007593770045787096,
    0.0008816703921183944,
    0.007867482490837574,
    -0.010064201429486275,
    -0.01451378595083952,
    -0.02125132642686367,
    0.00905357114970684,
    0.005007537081837654,
    0.0030266297981142998,
    0.025265779346227646,
    -0.004418001975864172,
    -0.023693686351180077,
    -0.015959549695253372,
    -0.033042024821043015,
    -0.028620513156056404,
    0.009404484182596207,
    0.00633399048820138,
    0.015215612947940826,
    -0.014282182790338993,
    0.053507305681705475,
    -0.011327491141855717,
    0.008358761668205261,
    -0.02633255533874035,
    0.018570346757769585,
    -0.03781444951891899,
    0.033799998462200165,
    -0.0016247299499809742,
    -0.010113329626619816,
    0.017840446904301643,
    0.03444567695260048,
    -0.042278070002794266,
    -0.026950163766741753,
    -0.016394682228565216,
    0.03933039680123329,
    0.016871925443410873,
    -0.011194143444299698,
    -0.002772217383608222,
    -0.0017633407842367887,
    -0.0030196113511919975,
    -0.00613747863098979,
    0.0007070908905006945,
    0.01900547929108143,
    0.012296012602746487,
    -0.013657556846737862,
    0.007313039153814316,
    -0.0017510588513687253,
    0.006460319273173809,
    -0.002668697852641344,
    0.03548438102006912,
    -0.012345139868557453,
    -0.03598969802260399,
    -0.024325329810380936,
    -0.0030845305882394314,
    0.005691818427294493,
    -0.011215198785066605,
    0.02758180908858776,
    -0.007439367938786745,
    -0.028255563229322433,
    -0.03436145931482315,
    0.027525661513209343,
    0.008211378008127213,
    0.0013773358659818769,
    0.006088350899517536,
    0.020170513540506363,
    0.03155415132641792,
    -0.004698732867836952,
    0.010478279553353786,
    -0.007825372740626335,
    -0.02143380232155323,
    -0.017447423189878464,
    -0.012815364636480808,
    0.014906809665262699,
    -0.011102906428277493,
    0.008681601844727993,
    0.0028967917896807194,
    -0.033435046672821045,
    -0.003979360219091177,
    -0.0018510691588744521,
    -0.0208863765001297,
    0.013818977400660515,
    0.005453197285532951,
    0.037674084305763245,
    0.00585674773901701,
    0.03090846911072731,
    0.020746011286973953,
    0.01795274019241333,
    0.011727532371878624,
    0.04107092693448067,
    -0.009116735309362411,
    0.021911045536398888,
    0.015566526912152767,
    -0.006502429023385048,
    -0.004954900126904249,
    -0.01598762348294258,
    -0.052805475890636444,
    -0.012373213656246662,
    0.007439367938786745,
    0.021110961213707924,
    -0.009804525412619114,
    0.05707258731126785,
    -0.0047618974931538105,
    -0.005867275409400463,
    -0.0020984632428735495,
    0.007825372740626335,
    0.009271137416362762,
    0.01777026429772377,
    -0.003349470207467675,
    -0.018935296684503555,
    -0.017728155478835106,
    0.012008262798190117,
    0.031076908111572266,
    0.0022493561264127493,
    -0.0058883302845060825,
    0.02803097851574421,
    -0.00564619991928339,
    0.02297782152891159,
    -0.0143032381311059,
    -0.00316699524410069,
    0.008927241899073124,
    0.012288994155824184,
    0.028087124228477478,
    0.012948711402714252,
    0.02591145969927311,
    0.03368770331144333,
    -0.00915884505957365,
    -0.008976370096206665,
    -0.0127872908487916,
    0.03144185617566109,
    -0.024086708202958107,
    0.0010711636859923601,
    0.020479317754507065,
    -0.024844681844115257,
    0.0017650953959673643,
    -0.036888036876916885,
    0.041548170149326324,
    0.0007263911538757384,
    0.010822175070643425,
    -0.005182993598282337,
    -0.009979982860386372,
    -0.002859945874661207,
    0.010751992464065552,
    0.0035933551844209433,
    -0.0061058965511620045,
    0.019426576793193817,
    0.006958616431802511,
    -0.003972341772168875,
    0.01970730721950531,
    -0.01628239080309868,
    -0.014892772771418095,
    -0.033098168671131134,
    0.0016949126729741693,
    -0.010857266373932362,
    0.005140884313732386,
    -0.024409549310803413,
    0.004825062118470669,
    0.006604193709790707,
    -0.014808553270995617,
    -0.01586129516363144,
    0.18056610226631165,
    0.008576327934861183,
    0.03629850223660469,
    0.005179484840482473,
    0.013566319830715656,
    0.011495929211378098,
    -0.011425746604800224,
    0.01986170932650566,
    -0.0025265777949243784,
    0.02902757190167904,
    -0.026683470234274864,
    -0.015664782375097275,
    -0.0014466412831097841,
    0.0007399890455417335,
    -0.0019440612522885203,
    0.0037091567646712065,
    -0.003172258846461773,
    -0.02593953348696232,
    -0.0008233310072682798,
    -0.002137063769623637,
    -0.00633399048820138,
    -0.020324915647506714,
    -0.010288786143064499,
    -0.015384051948785782,
    0.02549036405980587,
    -0.0161981713026762,
    0.0029494287446141243,
    -0.008000830188393593,
    0.02839592844247818,
    -0.005828674882650375,
    -0.005372487008571625,
    0.009706269949674606,
    -0.006993707735091448,
    -0.011166070587933064,
    -0.041856974363327026,
    -0.00887109525501728,
    -0.014233055524528027,
    -0.011874916031956673,
    0.006505937781184912,
    0.027623917907476425,
    -0.012043354101479053,
    -0.008007848635315895,
    -0.0032827965915203094,
    -0.019145846366882324,
    -0.01628239080309868,
    0.002528332406654954,
    -0.00850614532828331,
    -0.0031143580563366413,
    0.011474874801933765,
    0.01858438365161419,
    -0.010569517500698566,
    -0.018514201045036316,
    0.012183720245957375,
    0.0021107452921569347,
    -0.006902470253407955,
    -0.011383636854588985,
    -0.007755190599709749,
    0.030655810609459877,
    0.011790696531534195,
    0.024746427312493324,
    -0.028297672048211098,
    0.03714069351553917,
    -0.04396245628595352,
    0.006432245951145887,
    -0.030010130256414413,
    0.0024511313531547785,
    -0.051542188972234726,
    0.026964200660586357,
    -0.002805554075166583,
    0.00486717140302062,
    0.015299832448363304,
    0.016759634017944336,
    -0.035428237169981,
    -0.0015484062023460865,
    -0.021742606535553932,
    -0.01837383583188057,
    0.044804647564888,
    0.01834576204419136,
    0.04163238778710365,
    0.028353817760944366,
    0.0025739511474967003,
    0.02622026391327381,
    -0.0012518842704594135,
    0.006477864924818277,
    -0.008716694079339504,
    -0.009348338469862938,
    0.008864077739417553,
    -0.01682981662452221,
    0.005523379892110825,
    -0.007018271833658218,
    -0.007663952652364969,
    -0.03211561217904091,
    0.016352573409676552,
    -0.012015281245112419,
    0.012506560422480106,
    0.02070390246808529,
    0.006376099772751331,
    0.013734757900238037,
    -0.02727300487458706,
    -0.005326868500560522,
    -0.027413370087742805,
    0.0602448470890522,
    0.009916817769408226,
    -0.0024985047057271004,
    -0.02651503123342991,
    -0.015580563805997372,
    -0.020633719861507416,
    0.017236875370144844,
    0.005947985220700502,
    -0.014696260914206505,
    0.014155854471027851,
    0.0024879772681742907,
    -0.0014791007852181792,
    -0.00920095480978489,
    -0.0021581186447292566,
    0.009994018822908401,
    -0.005147902294993401,
    -0.007748172152787447,
    0.009769434109330177,
    -0.004161835182458162,
    -0.012689035385847092,
    -0.0072428565472364426,
    0.020760048180818558,
    -0.012548670172691345,
    -0.030740030109882355,
    -0.022809384390711784,
    -0.01701229065656662,
    0.006828778423368931,
    -0.0028985461685806513,
    -0.0202828049659729,
    0.016661377623677254,
    -0.01256270706653595,
    0.003096812404692173,
    0.008021884597837925,
    -0.0009264118853025138,
    0.012281975708901882,
    -0.016268353909254074,
    -0.03747757151722908,
    0.004179380834102631,
    -0.009657141752541065,
    -0.016170097514986992,
    -0.013727739453315735,
    -9.458218119107187e-05,
    -0.005284758750349283,
    0.011902988888323307,
    -0.028746841475367546,
    0.0035214179661124945,
    -0.013671593740582466,
    0.010113329626619816,
    -0.006281353533267975,
    -0.015089284628629684,
    8.356130274478346e-05,
    0.005695327650755644,
    -0.016899999231100082,
    0.0004070597642567009,
    -0.034164946526288986,
    -0.015903403982520103,
    -0.023679649457335472,
    0.007867482490837574,
    0.01782641001045704,
    -0.006948089227080345,
    0.007425331510603428,
    -0.003481062827631831,
    -0.015313869342207909,
    -0.01544019766151905,
    -0.03565282002091408,
    -0.17663586139678955,
    0.004800498019903898,
    0.027722174301743507,
    -0.04135165736079216,
    0.016506975516676903,
    -0.015819184482097626,
    -0.019595015794038773,
    -0.004105689004063606,
    -0.005905875936150551,
    -0.026234300807118416,
    0.026964200660586357,
    0.00824646931141615,
    -0.0026143062859773636,
    -0.014387457631528378,
    -0.016113951802253723,
    -0.00534441415220499,
    0.023300662636756897,
    0.0066919224336743355,
    0.025925496593117714,
    -0.01303293090313673,
    0.040762122720479965,
    -0.035737041383981705,
    0.016970181837677956,
    0.012338122352957726,
    0.0020896904170513153,
    -0.04050946608185768,
    -0.005590053740888834,
    0.0024353403132408857,
    -0.01436640229076147,
    -0.02439551241695881,
    0.02091445028781891,
    0.01186789758503437,
    0.011874916031956673,
    0.031862955540418625,
    0.02664135955274105,
    0.023511210456490517,
    0.04643288627266884,
    -0.03009434975683689,
    -0.01646486483514309,
    0.04370979592204094,
    0.008169268257915974,
    0.023384882137179375,
    0.02975747175514698,
    -0.019749417901039124,
    -0.012583761475980282,
    0.005460215732455254,
    0.03545631095767021,
    -0.022023336961865425,
    -0.0004680310084950179,
    -0.02549036405980587,
    0.04410282149910927,
    -0.010323877446353436,
    -0.0017396541079506278,
    -0.003575809532776475,
    0.0058427113108336926,
    0.018289616331458092,
    0.001051863539032638,
    0.004905771929770708,
    -0.008120140992105007,
    -0.011243271641433239,
    0.005182993598282337,
    -0.02358139306306839,
    -0.005811129231005907,
    0.01226092129945755,
    -0.018696676939725876,
    -0.01609991490840912,
    -0.007214783690869808,
    0.01758778840303421,
    -0.012253902852535248,
    0.012127573601901531,
    0.016113951802253723,
    -0.029448669403791428,
    -0.02685190737247467,
    -0.004393438342958689,
    0.01976345293223858,
    0.01782641001045704,
    -0.012703072279691696,
    0.04247458279132843,
    0.014808553270995617,
    -0.006944580003619194,
    -0.027048420161008835,
    0.0490436851978302,
    -0.013903196901082993,
    0.02170049585402012,
    0.01007823832333088,
    -0.006944580003619194,
    -0.020689865574240685,
    -0.03798288851976395,
    0.0052566854283213615,
    0.004165344405919313,
    0.016478901728987694,
    -0.02234617806971073,
    0.02033895254135132,
    -0.007481477688997984,
    -0.021419765427708626,
    0.016815779730677605,
    0.018289616331458092,
    -0.001747549744322896,
    0.011509966105222702,
    -0.00014924793504178524,
    -0.005839202087372541,
    0.024746427312493324,
    -0.02494293823838234,
    -0.0003061721217818558,
    0.04286760464310646,
    0.036579232662916183,
    -0.013924251310527325,
    0.01949675939977169,
    0.0025774603709578514,
    -0.0161981713026762,
    -0.02125132642686367,
    0.004958408884704113,
    0.03214368596673012,
    0.02697823755443096,
    -0.027862539514899254,
    0.013980397954583168,
    -0.017573753371834755,
    -0.008499126881361008,
    0.009299210272729397,
    -0.009502739645540714,
    0.022332141175866127,
    -0.02661328762769699,
    -0.013068022206425667,
    -0.006204152479767799,
    -0.01449974998831749,
    -0.014724334701895714,
    -0.11240464448928833,
    -0.038432057946920395,
    -0.007214783690869808,
    0.006734031718224287,
    -0.011994226835668087,
    -0.018514201045036316,
    -0.006727013736963272,
    0.030768103897571564,
    0.019384466111660004,
    -0.004744351841509342,
    -0.005161938723176718,
    -0.0038144306745380163,
    -0.010815156623721123,
    -0.025434216484427452,
    -0.010394060984253883,
    -0.02687998116016388,
    -0.017391277477145195,
    0.0033863161224871874,
    0.015945512801408768,
    0.0025827239733189344,
    0.014113744720816612,
    0.006793687120079994,
    0.005737437400966883,
    0.005870784632861614,
    -0.013664575293660164,
    -0.006832287646830082,
    -0.041183218359947205,
    0.011011668480932713,
    0.01931428350508213,
    0.0013255761004984379,
    0.014583968557417393,
    -0.018065031617879868,
    -0.012106519192457199,
    0.009327283129096031,
    0.028129233047366142,
    0.028704732656478882,
    -0.03548438102006912,
    -0.022837456315755844,
    0.0006987567176111042,
    -0.027076492086052895,
    -0.009699251502752304,
    0.017601825296878815,
    0.010787083767354488,
    -0.0064919013530015945,
    -0.005597071722149849,
    -0.009615032002329826,
    -0.013383844867348671,
    0.001968625234439969,
    0.004467130172997713,
    0.004105689004063606,
    -0.013622465543448925,
    0.008632474578917027,
    -0.007060381583869457,
    0.011460837908089161,
    0.025476327165961266,
    0.004625041037797928,
    -0.0005728664109483361,
    0.008028903044760227,
    -0.002461658790707588,
    -0.014976992271840572,
    -0.0015150693943724036,
    -0.004116216208785772,
    -0.008000830188393593,
    0.03057159297168255,
    -0.004196926485747099,
    -0.0002890650648623705,
    0.007811336778104305,
    -0.011418728157877922,
    -0.00010280671995133162,
    -0.013720721006393433,
    0.0004947881679981947,
    0.03447375074028969,
    -0.002738880692049861,
    0.0042846547439694405,
    -0.03410880267620087,
    0.004042524378746748,
    0.013061003759503365,
    -0.00859738327562809,
    0.011748586781322956,
    -0.009537831880152225,
    -0.009095679968595505,
    0.014822590164840221,
    -0.033463120460510254,
    -0.029532887041568756,
    0.019903818145394325,
    0.03674767166376114,
    0.000836051651276648,
    0.004361855797469616,
    0.027469515800476074,
    -0.058167438954114914,
    0.032705146819353104,
    0.018177324905991554,
    0.002405512612313032,
    -0.004474148154258728,
    -0.0030090841464698315,
    -0.006881415378302336,
    -0.0217987522482872,
    -0.006102387327700853,
    -0.01507524773478508,
    0.02064775489270687,
    -0.02219177596271038,
    0.002907319227233529,
    -0.07141793519258499,
    0.017896592617034912,
    0.01913180947303772,
    -0.00880793109536171,
    0.037224914878606796,
    -0.025167522951960564,
    0.00337227969430387,
    -0.021770678460597992,
    -0.007277947850525379,
    0.0267957616597414,
    -0.026894018054008484,
    -0.011545057408511639,
    -0.011783678084611893,
    -0.020774085074663162,
    0.004382910672575235,
    -0.01774219051003456,
    0.03680381923913956,
    -0.010365987196564674,
    0.03396843746304512,
    0.006677885539829731,
    0.002996802097186446,
    0.0027055437676608562,
    0.03702840209007263,
    0.0024142854381352663,
    -0.03674767166376114,
    0.007306021172553301,
    -0.005460215732455254,
    0.044636208564043045,
    -0.005846220534294844,
    -0.04561876878142357,
    0.009285173378884792,
    0.007158637512475252,
    -0.013215405866503716,
    0.0245218425989151,
    0.0011115188244730234,
    0.009355355985462666,
    0.037337206304073334,
    0.004807516001164913,
    0.017321094870567322,
    0.01949675939977169,
    -0.02321644313633442,
    -0.020240696147084236,
    0.03323853388428688,
    -0.02664135955274105,
    -0.014134799130260944,
    -0.001208020024932921,
    0.0174053143709898,
    0.013236460275948048,
    0.022654982283711433,
    0.006119932979345322,
    0.04045331850647926,
    -0.0055128526873886585,
    -0.02064775489270687,
    -0.041969265788793564,
    0.010155439376831055,
    -0.0090044429525733,
    0.015384051948785782,
    -0.005133865866810083,
    -0.014794517308473587,
    -0.009509758092463017,
    0.057353317737579346,
    0.0002649397647473961,
    0.017756227403879166,
    0.004172362387180328,
    -0.009741361252963543,
    -0.00947466678917408,
    -0.03736528009176254,
    -0.01141170971095562,
    -0.013840031810104847,
    -0.027343187481164932,
    -0.019875746220350266,
    -0.03775830194354057,
    0.027104565873742104,
    0.007148109842091799,
    0.035765115171670914,
    -0.03568089380860329,
    -0.01847209222614765,
    -0.013615447096526623,
    -0.015636710450053215,
    0.03295780345797539,
    0.01988978311419487,
    -0.012359176762402058,
    -0.020746011286973953,
    0.010583554394543171,
    0.02779235690832138,
    -0.006330481264740229,
    -0.019300248473882675,
    0.013236460275948048,
    -0.016352573409676552,
    -0.001884405966848135,
    -0.009608014486730099,
    0.0003316133515909314,
    0.010408096946775913,
    0.018640529364347458,
    0.01206440944224596,
    0.029111791402101517,
    -0.02070390246808529,
    0.007523587439209223,
    0.029982056468725204,
    -0.005825165659189224,
    0.012983802706003189,
    -0.005790074355900288,
    0.010632681660354137,
    -0.025265779346227646,
    -0.014626078307628632,
    0.014724334701895714,
    0.0024914864916354418,
    -0.039919931441545486,
    -0.009362374432384968,
    0.0060076406225562096,
    -0.009222009219229221,
    -0.005733928177505732,
    -0.006751577369868755,
    0.02182682603597641,
    -0.035400163382291794,
    0.032227903604507446,
    0.006249770987778902,
    -0.007642898242920637,
    -0.005204048473387957,
    -0.014485713094472885,
    -0.009593977592885494,
    0.013018894009292126,
    0.03913388401269913,
    -0.00861141923815012,
    -0.0015308605507016182,
    0.040397170931100845,
    0.008464035578072071,
    0.00788853783160448,
    0.01195913553237915,
    -0.00243358570151031,
    -0.002452885964885354,
    -0.0038495222106575966,
    -0.04014451429247856,
    -0.024058636277914047,
    -0.003656519576907158,
    -0.033013951033353806,
    -0.010253694839775562,
    -0.01755971647799015,
    -0.006565593183040619,
    0.09039533883333206,
    -0.01734916865825653,
    -0.01698421873152256,
    0.0010141403181478381,
    0.0032143685966730118,
    0.03469833731651306,
    0.016001660376787186,
    -0.0007627984159626067,
    0.010590571910142899,
    -0.0077271172776818275,
    -0.006737540941685438,
    0.012689035385847092,
    -0.00824646931141615,
    -0.034586042165756226,
    -0.03910581022500992,
    0.004814534448087215,
    -0.03321046382188797,
    -0.01907566376030445,
    0.025995679199695587,
    -0.0026300973258912563,
    0.014976992271840572,
    -0.015959549695253372,
    0.008695638738572598,
    -0.007263911422342062,
    -0.03436145931482315,
    -0.0057304189540445805,
    0.011467856355011463,
    0.012632889673113823,
    -0.010815156623721123,
    -0.05227208882570267,
    0.020240696147084236,
    0.007916610687971115,
    -0.01889318786561489,
    -0.03837591037154198,
    0.007042835932224989,
    0.005151411518454552,
    -0.010415115393698215,
    -0.018696676939725876,
    -0.017054401338100433,
    -0.010064201429486275,
    -0.00613747863098979,
    -0.00011832367454189807,
    -0.009586959145963192,
    -0.031469929963350296,
    0.02070390246808529,
    0.00516895717009902,
    0.0001507831912022084,
    -0.0010185267310589552,
    -0.026023751124739647
  ]
}
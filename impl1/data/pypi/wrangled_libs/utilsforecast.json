{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "utilsforecast\n================\n\n<!-- warning: this file was autogenerated! do not edit! -->\n\n## install\n\n### pypi\n\n``` sh\npip install utilsforecast\n```\n\n### conda\n\n``` sh\nconda install -c conda-forge utilsforecast\n```\n\n## how to use\n\n### generate synthetic data\n\n``` python\nfrom utilsforecast.data import generate_series\n```\n\n``` python\nseries = generate_series(3, with_trend=true, static_as_categorical=false)\nseries\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>ds</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2000-01-01</td>\n      <td>0.422133</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>2000-01-02</td>\n      <td>1.501407</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>2000-01-03</td>\n      <td>2.568495</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>2000-01-04</td>\n      <td>3.529085</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>2000-01-05</td>\n      <td>4.481929</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>481</th>\n      <td>2</td>\n      <td>2000-06-11</td>\n      <td>163.914625</td>\n    </tr>\n    <tr>\n      <th>482</th>\n      <td>2</td>\n      <td>2000-06-12</td>\n      <td>166.018479</td>\n    </tr>\n    <tr>\n      <th>483</th>\n      <td>2</td>\n      <td>2000-06-13</td>\n      <td>160.839176</td>\n    </tr>\n    <tr>\n      <th>484</th>\n      <td>2</td>\n      <td>2000-06-14</td>\n      <td>162.679603</td>\n    </tr>\n    <tr>\n      <th>485</th>\n      <td>2</td>\n      <td>2000-06-15</td>\n      <td>165.089288</td>\n    </tr>\n  </tbody>\n</table>\n<p>486 rows \u00d7 3 columns</p>\n</div>\n\n### plotting\n\n``` python\nfrom utilsforecast.plotting import plot_series\n```\n\n``` python\nfig = plot_series(series, plot_random=false, max_insample_length=50, engine='matplotlib')\nfig.savefig('imgs/index.png', bbox_inches='tight')\n```\n\n![](https://raw.githubusercontent.com/nixtla/utilsforecast/main/nbs/imgs/index.png)\n\n### preprocessing\n\n``` python\nfrom utilsforecast.preprocessing import fill_gaps\n```\n\n``` python\nserie = series[series['unique_id'].eq(0)].tail(10)\n# drop some points\nwith_gaps = serie.sample(frac=0.5, random_state=0).sort_values('ds')\nwith_gaps\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>ds</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>213</th>\n      <td>0</td>\n      <td>2000-08-01</td>\n      <td>18.543147</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>0</td>\n      <td>2000-08-02</td>\n      <td>19.941764</td>\n    </tr>\n    <tr>\n      <th>216</th>\n      <td>0</td>\n      <td>2000-08-04</td>\n      <td>21.968733</td>\n    </tr>\n    <tr>\n      <th>220</th>\n      <td>0</td>\n      <td>2000-08-08</td>\n      <td>19.091509</td>\n    </tr>\n    <tr>\n      <th>221</th>\n      <td>0</td>\n      <td>2000-08-09</td>\n      <td>20.220739</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n``` python\nfill_gaps(with_gaps, freq='d')\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>ds</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2000-08-01</td>\n      <td>18.543147</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>2000-08-02</td>\n      <td>19.941764</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>2000-08-03</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>2000-08-04</td>\n      <td>21.968733</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>2000-08-05</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>2000-08-06</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>2000-08-07</td>\n      <td>nan</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>2000-08-08</td>\n      <td>19.091509</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>2000-08-09</td>\n      <td>20.220739</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n### evaluating\n\n``` python\nfrom functools import partial\n\nimport numpy as np\n\nfrom utilsforecast.evaluation import evaluate\nfrom utilsforecast.losses import mape, mase\n```\n\n``` python\nvalid = series.groupby('unique_id').tail(7).copy()\ntrain = series.drop(valid.index)\nrng = np.random.randomstate(0)\nvalid['seas_naive'] = train.groupby('unique_id')['y'].tail(7).values\nvalid['rand_model'] = valid['y'] * rng.rand(valid['y'].shape[0])\ndaily_mase = partial(mase, seasonality=7)\nevaluate(valid, metrics=[mape, daily_mase], train_df=train)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>unique_id</th>\n      <th>metric</th>\n      <th>seas_naive</th>\n      <th>rand_model</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>mape</td>\n      <td>0.024139</td>\n      <td>0.440173</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>mape</td>\n      <td>0.054259</td>\n      <td>0.278123</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>mape</td>\n      <td>0.042642</td>\n      <td>0.480316</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>mase</td>\n      <td>0.907149</td>\n      <td>16.418014</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>mase</td>\n      <td>0.991635</td>\n      <td>6.404254</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2</td>\n      <td>mase</td>\n      <td>1.013596</td>\n      <td>11.365040</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n",
  "docs_url": null,
  "keywords": "time-series analysis forecasting",
  "license": "apache software license 2.0",
  "name": "utilsforecast",
  "package_url": "https://pypi.org/project/utilsforecast/",
  "project_url": "https://pypi.org/project/utilsforecast/",
  "project_urls": {
    "Homepage": "https://github.com/Nixtla/utilsforecast"
  },
  "release_url": "https://pypi.org/project/utilsforecast/0.0.23/",
  "requires_dist": [
    "numpy",
    "packaging",
    "pandas >=1.1.1",
    "pandas[plot] ; extra == 'dev'",
    "pyarrow ; extra == 'dev'",
    "plotly-resampler ; extra == 'dev'",
    "nbdev ; extra == 'dev'",
    "plotly ; extra == 'dev'",
    "polars ; extra == 'dev'",
    "numba ; extra == 'dev'",
    "scipy ; extra == 'dev'",
    "pandas[plot] ; extra == 'plotting'",
    "plotly ; extra == 'plotting'",
    "plotly-resampler ; extra == 'plotting'",
    "polars ; extra == 'polars'",
    "numba ; extra == 'scalers'",
    "scipy ; extra == 'scalers'"
  ],
  "requires_python": ">=3.8",
  "summary": "forecasting utilities",
  "version": "0.0.23",
  "releases": [],
  "developers": [
    "business@nixtla.io",
    "nixtla"
  ],
  "kwds": "generate_series dataframe plot_series forecasting with_trend",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_utilsforecast",
  "homepage": "https://github.com/nixtla/utilsforecast",
  "release_count": 23,
  "dependency_ids": [
    "pypi_nbdev",
    "pypi_numba",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_plotly",
    "pypi_plotly_resampler",
    "pypi_polars",
    "pypi_pyarrow",
    "pypi_scipy"
  ]
}
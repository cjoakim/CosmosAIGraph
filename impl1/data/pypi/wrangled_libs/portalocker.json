{
  "classifiers": [
    "development status :: 5 - production/stable",
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: ms-dos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: ironpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: education :: testing",
    "topic :: office/business",
    "topic :: other/nonlisted topic",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: monitoring"
  ],
  "description": "############################################\nportalocker - cross-platform locking library\n############################################\n\n.. image:: https://github.com/wolph/portalocker/actions/workflows/python-package.yml/badge.svg?branch=master\n    :alt: linux test status\n    :target: https://github.com/wolph/portalocker/actions/\n\n.. image:: https://ci.appveyor.com/api/projects/status/mgqry98hgpy4prhh?svg=true\n    :alt: windows tests status\n    :target: https://ci.appveyor.com/project/wolph/portalocker\n\n.. image:: https://coveralls.io/repos/wolph/portalocker/badge.svg?branch=master\n    :alt: coverage status\n    :target: https://coveralls.io/r/wolph/portalocker?branch=master\n\noverview\n--------\n\nportalocker is a library to provide an easy api to file locking.\n\nan important detail to note is that on linux and unix systems the locks are\nadvisory by default. by specifying the `-o mand` option to the mount command it\nis possible to enable mandatory file locking on linux. this is generally not\nrecommended however. for more information about the subject:\n\n - https://en.wikipedia.org/wiki/file_locking\n - http://stackoverflow.com/questions/39292051/portalocker-does-not-seem-to-lock\n - https://stackoverflow.com/questions/12062466/mandatory-file-lock-on-linux\n\nthe module is currently maintained by rick van hattem <wolph@wol.ph>.\nthe project resides at https://github.com/wolph/portalocker . bugs and feature\nrequests can be submitted there. patches are also very welcome.\n\nsecurity contact information\n------------------------------------------------------------------------------\n\nto report a security vulnerability, please use the\n`tidelift security contact <https://tidelift.com/security>`_.\ntidelift will coordinate the fix and disclosure.\n\nredis locks\n-----------\n\nthis library now features a lock based on redis which allows for locks across\nmultiple threads, processes and even distributed locks across multiple\ncomputers.\n\nit is an extremely reliable redis lock that is based on pubsub.\n\nas opposed to most redis locking systems based on key/value pairs,\nthis locking method is based on the pubsub system. the big advantage is\nthat if the connection gets killed due to network issues, crashing\nprocesses or otherwise, it will still immediately unlock instead of\nwaiting for a lock timeout.\n\nfirst make sure you have everything installed correctly:\n\n::\n\n    pip install \"portalocker[redis]\"\n\nusage is really easy:\n\n::\n\n    import portalocker\n\n    lock = portalocker.redislock('some_lock_channel_name')\n\n    with lock:\n        print('do something here')\n\nthe api is essentially identical to the other ``lock`` classes so in addition\nto the ``with`` statement you can also use ``lock.acquire(...)``.\n\npython 2\n--------\n\npython 2 was supported in versions before portalocker 2.0. if you are still\nusing\npython 2,\nyou can run this to install:\n\n::\n\n    pip install \"portalocker<2\"\n\ntips\n----\n\non some networked filesystems it might be needed to force a `os.fsync()` before\nclosing the file so it's actually written before another client reads the file.\neffectively this comes down to:\n\n::\n\n   with portalocker.lock('some_file', 'rb+', timeout=60) as fh:\n       # do what you need to do\n       ...\n\n       # flush and sync to filesystem\n       fh.flush()\n       os.fsync(fh.fileno())\n\nlinks\n-----\n\n* documentation\n    - http://portalocker.readthedocs.org/en/latest/\n* source\n    - https://github.com/wolph/portalocker\n* bug reports\n    - https://github.com/wolph/portalocker/issues\n* package homepage\n    - https://pypi.python.org/pypi/portalocker\n* my blog\n    - http://w.wol.ph/\n\nexamples\n--------\n\nto make sure your cache generation scripts don't race, use the `lock` class:\n\n>>> import portalocker\n>>> with portalocker.lock('somefile', timeout=1) as fh:\n...     print('writing some stuff to my cache...', file=fh)\n\nto customize the opening and locking a manual approach is also possible:\n\n>>> import portalocker\n>>> file = open('somefile', 'r+')\n>>> portalocker.lock(file, portalocker.lockflags.exclusive)\n>>> file.seek(12)\n>>> file.write('foo')\n>>> file.close()\n\nexplicitly unlocking is not needed in most cases but omitting it has been known\nto cause issues:\nhttps://github.com/azuread/microsoft-authentication-extensions-for-python/issues/42#issuecomment-601108266\n\nif needed, it can be done through:\n\n>>> portalocker.unlock(file)\n\ndo note that your data might still be in a buffer so it is possible that your\ndata is not available until you `flush()` or `close()`.\n\nto create a cross platform bounded semaphore across multiple processes you can\nuse the `boundedsemaphore` class which functions somewhat similar to\n`threading.boundedsemaphore`:\n\n>>> import portalocker\n>>> n = 2\n>>> timeout = 0.1\n\n>>> semaphore_a = portalocker.boundedsemaphore(n, timeout=timeout)\n>>> semaphore_b = portalocker.boundedsemaphore(n, timeout=timeout)\n>>> semaphore_c = portalocker.boundedsemaphore(n, timeout=timeout)\n\n>>> semaphore_a.acquire()\n<portalocker.utils.lock object at ...>\n>>> semaphore_b.acquire()\n<portalocker.utils.lock object at ...>\n>>> semaphore_c.acquire()\ntraceback (most recent call last):\n  ...\nportalocker.exceptions.alreadylocked\n\n\nmore examples can be found in the\n`tests <http://portalocker.readthedocs.io/en/latest/_modules/tests/tests.html>`_.\n\n\nversioning\n----------\n\nthis library follows `semantic versioning <http://semver.org/>`_.\n\n\nchangelog\n---------\n\nevery release has a ``git tag`` with a commit message for the tag\nexplaining what was added and/or changed. the list of tags/releases\nincluding the commit messages can be found here:\nhttps://github.com/wolph/portalocker/releases\n\nlicense\n-------\n\nsee the `license <https://github.com/wolph/portalocker/blob/develop/license>`_ file.\n\n",
  "docs_url": null,
  "keywords": "locking,locks,with,statement,windows,linux,unix",
  "license": "bsd-3-clause",
  "name": "portalocker",
  "package_url": "https://pypi.org/project/portalocker/",
  "project_url": "https://pypi.org/project/portalocker/",
  "project_urls": {
    "bugs": "https://github.com/wolph/portalocker/issues",
    "documentation": "https://portalocker.readthedocs.io/en/latest/",
    "repository": "https://github.com/wolph/portalocker/"
  },
  "release_url": "https://pypi.org/project/portalocker/2.8.2/",
  "requires_dist": [
    "pywin32 >=226 ; platform_system == \"Windows\"",
    "sphinx >=1.7.1 ; extra == 'docs'",
    "redis ; extra == 'redis'",
    "pytest >=5.4.1 ; extra == 'tests'",
    "pytest-cov >=2.8.1 ; extra == 'tests'",
    "pytest-timeout >=2.1.0 ; extra == 'tests'",
    "sphinx >=6.0.0 ; extra == 'tests'",
    "pytest-mypy >=0.8.0 ; extra == 'tests'",
    "types-redis ; extra == 'tests'",
    "redis ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "wraps the portalocker recipe for easy usage",
  "version": "2.8.2",
  "releases": [],
  "developers": [
    "wolph@wol.ph"
  ],
  "kwds": "some_lock_channel_name locking lockflags file_locking locks",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_portalocker",
  "homepage": "",
  "release_count": 41,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mypy",
    "pypi_pytest_timeout",
    "pypi_pywin32",
    "pypi_redis",
    "pypi_sphinx",
    "pypi_types_redis"
  ]
}
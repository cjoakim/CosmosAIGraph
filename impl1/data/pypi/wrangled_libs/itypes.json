{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http"
  ],
  "description": "# itypes\n\n[![build status](https://travis-ci.org/pavantatikonda/itypes.svg?branch=master)](https://travis-ci.org/pavantatikonda/itypes)\n\nbasic immutable container types for python.\n\na simple implementation that's designed for simplicity over performance.\n\nuse these in circumstances where it may result in more comprehensible code,\nor when you want to create custom types with restricted, immutable interfaces.\n\nfor an alternative implementation designed for performance,\nplease see [pyrsistent](https://github.com/tobgu/pyrsistent).\n\n### installation\n\ninstall using `pip`:\n\n    pip install itypes\n\n### instantiating dictionaries and lists.\n\n    >>> import itypes\n    >>> d = itypes.dict({'a': 1, 'b': 2, 'c': 3})\n    >>> l = itypes.list(['a', 'b', 'c'])\n\n### on instantiation, nested types are coerced to immutables.\n\n    >>> d = itypes.dict({'a': 123, 'b': ['a', 'b', 'c']})\n    >>> d['b']\n    list(['a', 'b', 'c'])\n\n### assignments and deletions return new copies.\n\nmethods: `set(key, value)`, `delete(key)`\n\n    >>> d2 = d.set('c', 456)\n    >>> d2\n    dict({'a': 123, 'b': ['a', 'b', 'c'], 'c': 456})\n    >>> d3 = d2.delete('a')\n    >>> d3\n    dict({'b': ['a', 'b', 'c'], 'c': 456})\n\n### standard assignments and deletions fail.\n\n    >>> d['z'] = 123\n    typeerror: 'dict' object doesn't support item assignment\n    >>> del(d['c'])\n    typeerror: 'dict' object doesn't support item deletion\n\n### nested lookups.\n\nmethod: `get_in(keys, default=none)`\n\n    >>> d['b'][-1]\n    'c'\n    >>> d['b'][5]\n    indexerror: list index out of range\n    >>> d.get_in(['b', -1])\n    'c'\n    >>> d.get_in(['b', 5])\n    none\n\n### nested assignments and deletions.\n\nmethods: `set_in(keys, value)`, `delete_in(keys)`\n\n    >>> d2 = d.set_in(['b', 1], 'xxx')\n    >>> d2\n    dict({'a': 123, 'b': ['a', 'xxx', 'c']})\n    >>> d3 = d2.delete_in(['b', 0])\n    >>> d3\n    dict({'a': 123, 'b': ['xxx', 'c']})\n\n### equality works against standard types.\n\n    >>> d = itypes.dict({'a': 1, 'b': 2, 'c': 3})\n    >>> d == {'a': 1, 'b': 2, 'c': 3}\n    true\n\n### objects are hashable.\n\n    >>> hash(d)\n    277752239\n\n### shortcuts for switching between mutable and immutable types.\n\nfunctions: `to_mutable(instance)`, `to_immutable(value)`\n\n    >>> value = itypes.to_mutable(d)\n    >>> value\n    {'a': 123, 'b': ['a', 'b', 'c']}\n    >>> itypes.to_immutable(value)\n    dict({'a': 123, 'b': ['a', 'b', 'c']})\n\n### subclassing.\n\nonly private attribute names may be set on instances. use `@property` for attribute access.\n\ndefine a `.clone(self, data)` method if objects have additional state.\n\nexample:\n\n    class configuration(itypes.dict):\n        def __init__(self, title, *args, **kwargs):\n            self._title = title\n            super(configuration, self).__init__(*args, **kwargs)\n\n        @property\n        def title(self):\n            return self._title\n\n        def clone(self, data):\n            return configuration(self._title, data)\n\nusing the custom class:\n\n    >>> config = configuration('worker-process', {'hostname': 'example.com', 'dynos': 4})\n    >>> config.title\n    'worker-process'\n    >>> new = config.set('dynos', 2)\n    >>> new\n    configuration({'dynos': 2, 'hostname': 'example.com'})\n    >>> new.title\n    'worker-process'\n\n### custom immutable objects.\n\nsubclass `itypes.object` for an object that prevents setting public attributes.\n\n    >>> class custom(itypes.object):\n    ...     pass\n\nonly private attribute names may be set on instances. use `@property` for attribute access.\n\n    >>> class document(itypes.object):\n    ... def __init__(self, title, content):\n    ...     self._title = title\n    ...     self._content = title\n    ... @property\n    ... def title(self):\n    ...     return self._title\n    ... @property\n    ... def content(self):\n    ...     return self._content\n\nusing immutable objects:\n\n    >>> doc = document(title='immutability', content='for simplicity')\n    >>> doc.title\n    'immutability'\n    >>> doc.title = 'changed'\n    typeerror: 'document' object doesn't support property assignment.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "itypes",
  "package_url": "https://pypi.org/project/itypes/",
  "project_url": "https://pypi.org/project/itypes/",
  "project_urls": {
    "Homepage": "http://github.com/PavanTatikonda/itypes"
  },
  "release_url": "https://pypi.org/project/itypes/1.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "simple immutable types for python.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "tom@tomchristie.com",
    "tom_christie"
  ],
  "kwds": "to_immutable dict immutables itypes pip",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_itypes",
  "homepage": "http://github.com/pavantatikonda/itypes",
  "release_count": 3,
  "dependency_ids": []
}
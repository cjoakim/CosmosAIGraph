{
  "classifiers": [
    "license :: osi approved :: mit license",
    "license :: osi approved :: python software foundation license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4"
  ],
  "description": "selectors2\n==========\n\n.. image:: https://img.shields.io/travis/sethmichaellarson/selectors2/master.svg?style=flat-square\n    :target: https://travis-ci.org/sethmichaellarson/selectors2\n.. image:: https://img.shields.io/appveyor/ci/sethmichaellarson/selectors2/master.svg?style=flat-square\n    :target: https://ci.appveyor.com/project/sethmichaellarson/selectors2\n.. image:: https://img.shields.io/pypi/v/selectors2.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/selectors2\n.. image:: https://img.shields.io/badge/say-thanks-ff69b4.svg?style=flat-square\n    :target: https://saythanks.io/to/sethmichaellarson\n\nbackported, durable, and portable selectors designed to replace\nthe standard library selectors module.\n\nfeatures\n--------\n\n* support for all major platforms. (linux, mac os, windows)\n* support for python 2.6 or later and **jython**.\n* support many different selectors\n    * ``select.kqueue`` (bsd, mac os)\n    * ``select.devpoll`` (solaris)\n    * ``select.epoll`` (linux 2.5.44+)\n    * ``select.poll`` (linux, mac os)\n    * ``select.select`` - (linux, mac os, windows)\n* support for `pep 475 <https://www.python.org/dev/peps/pep-0475/>`_ (retries system calls on interrupt)\n* support for modules which monkey-patch the standard library after import (like greenlet, gevent)\n* support for systems which define a selector being available but don't actually implement it. ()\n\nabout\n-----\n\nthis module was originally written by me for the `urllib3 <https://github.com/shazow/urllib3>`_ project\n(history in pr `#1001 <https://github.com/shazow/urllib3/pull/1001>`_) but it was decided that it would\nbe beneficial for everyone to have access to this work.\n\nall the additional features that ``selectors2`` provides are real-world problems that have occurred\nand been reported during the lifetime of its maintenance and use within ``urllib3``.\n\nif this work is useful to you, `feel free to say thanks <https://saythanks.io/to/sethmichaellarson>`_,\ntakes only a little time and really brightens my day! :cake:\n\ncan this module be used in place of ``selectors``?\n--------------------------------------------------\n\nyes! this module is a 1-to-1 drop-in replacement for ``selectors`` and\nprovides all selector types that would be available in ``selectors`` including\n``devpollselector``, ``kqueueselector``, ``epollselector``, ``pollselector``, and ``selectselector``.\n\nwhat is different between `selectors2` and `selectors34`?\n---------------------------------------------------------\n\nthis module is similar to ``selectors34`` in that it supports python 2.6 - 3.3\nbut differs in that this module also implements pep 475 for the backported selectors.\nthis allows similar behaviour between python 3.5+ selectors and selectors from before pep 475.\nin ``selectors34``, an interrupted system call would result in an incorrect return of no events, which\nfor some use cases is not an acceptable behavior.\n\ni will also add here that ``selectors2`` also makes large improvements on the test suite surrounding it\nproviding 100% test coverage for each selector.  the test suite is also more robust and tests durability\nof the selectors in many different situations that aren't tested in ``selectors34``.\n\nwhat types of objects are supported?\n------------------------------------\n\nat this current time ``selectors2`` only support the ``selectselector`` for windows which cannot select on non-socket objects.\non linux and mac os, both sockets and pipes are supported (some other types may be supported as well, such as fifos or special file devices).\n\nwhat if i have to support a platform without ``select.select``?\n---------------------------------------------------------------\n\nthere are a few platforms that don't have a selector available, notably\ngoogle appengine. when running on those platforms any call to ``defaultselector()``\nwill raise a ``runtimeerror`` explaining that there are no selectors available.\n\nlicense\n-------\n\nthis module is dual-licensed under mit and psf license.\n\ninstallation\n------------\n\n``$ python -m pip install selectors2``\n\nusage\n-----\n.. code-block:: python\n\n    import sys\n    import selectors2 as selectors\n\n    # use defaultselector, it picks the best\n    # selector available for your platform! :)\n    s = selectors.defaultselector()\n\n    import socket\n\n    # we're going to use google as an example.\n    sock = socket.socket(socket.af_inet, socket.sock_stream)\n    sock.connect((\"www.google.com\", 80))\n\n    # register the file to be watched for write availibility.\n    s.register(sock, selectors.event_write)\n\n    # give a timeout in seconds or no\n    # timeout to block until an event happens.\n    events = s.select(timeout=1.0)\n\n    # loop over all events that happened.\n    for key, event in events:\n        if event & selectors.event_write:\n            key.fileobj.send(b'head / http/1.1\\r\\n\\r\\n')\n\n    # change what event you're waiting for.\n    s.modify(sock, selectors.event_read)\n\n    # timeout of none let's the selector wait as long as it needs to.\n    events = s.select(timeout=none)\n    for key, event in events:\n        if event & selectors.event_read:\n            data = key.fileobj.recv(4096)\n            print(data)\n\n    # stop watching the socket.\n    s.unregister(sock)\n    sock.close()\n\n\nchangelog\n=========\n\nrelease 2.0.2 (july 21, 2020)\n-----------------------------\n\n* [bugfix] added support for ``long`` integers in python 2.x.\n\nrelease 2.0.1 (august 17, 2017)\n-------------------------------\n\n* [bugfix] timeouts would not be properly recalculated after receiving an eintr error.\n\nrelease 2.0.0 (may 30, 2017)\n----------------------------\n\n* [feature] add support for jython with ``jythonselectselector``.\n* [feature] add support for ``/dev/devpoll`` with ``devpollselector``.\n* [change] raises a ``runtimeerror`` instead of ``valueerror`` if there is no selector available.\n* [change] no longer wraps exceptions in ``selectorerror``, raises original exception including\n  in timeout situations.\n* [bugfix] detect defects in a system that defines a selector but does not implement it.\n* [bugfix] can now detect a change in the ``select`` module after import such as when\n  ``gevent.monkey.monkey_patch()`` is called before importing ``selectors2``.\n\nrelease 1.1.1 (february 6, 2017)\n--------------------------------\n\n* [bugfix] platforms that define ``select.kqueue`` would not have ``kqueueselector`` as the ``defaultselector``.\n\nrelease 1.1.0 (january 17, 2017)\n--------------------------------\n\n* [feature] make system calls faster for python versions that support pep 475.\n* [feature] wheels are now universal.\n\nrelease 1.0.0 (november 3, 2016)\n--------------------------------\n\n* initial implementation of ``selectors2``.\n\n\n",
  "docs_url": null,
  "keywords": "async,file,socket,select,backport",
  "license": "mit",
  "name": "selectors2",
  "package_url": "https://pypi.org/project/selectors2/",
  "project_url": "https://pypi.org/project/selectors2/",
  "project_urls": {
    "Homepage": "https://www.github.com/sethmlarson/selectors2"
  },
  "release_url": "https://pypi.org/project/selectors2/2.0.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "back-ported, durable, and portable selectors",
  "version": "2.0.2",
  "releases": [],
  "developers": [
    "seth_michael_larson",
    "sethmichaellarson@gmail.com"
  ],
  "kwds": "selectors2 selectors34 shields selector selectors",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_selectors2",
  "homepage": "https://www.github.com/sethmlarson/selectors2",
  "release_count": 6,
  "dependency_ids": []
}
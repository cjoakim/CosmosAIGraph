{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.6",
    "topic :: scientific/engineering :: astronomy"
  ],
  "description": "pymeeus\n=======\n\n   **library of astronomical algorithms in python**.\n\npymeeus is a python implementation of the astronomical algorithms\ndescribed in the classical book 'astronomical algorithms, 2nd edition,\nwillmann-bell inc. (1998)' by jean meeus.\n\nthere are great astronomical libraries out there. for instance, if\nyou're looking for high precision and speed you should take a look at\n`libnova <http://libnova.sourceforge.net/>`__. for a set of python\nmodules aimed at professional astronomers, you should look at\n`astropy <http://www.astropy.org/>`__. on the other hand, the advantages\nof pymeeus are its simplicity, ease of use, ease of reading, ease of\ninstallation (it has the minimum amount of dependencies) and abundant\ndocumentation.\n\ninstallation\n------------\n\nthe easiest way of installing pymeeus is using pip:\n\n.. code:: sh\n\n   pip install pymeeus\n\nor, for a per-user installation:\n\n.. code:: sh\n\n   pip install --user pymeeus\n\nif you prefer python3, you can use:\n\n.. code:: sh\n\n   pip3 install --user pymeeus\n\nif you have pymeeus already installed, but want to upgrade to the latest\nversion:\n\n.. code:: sh\n\n   pip3 install -u pymeeus\n\nproperly using pymeeus\n----------------------\n\nit is very common to try to run pymeeus like this:\n\n.. code:: sh\n\n   import pymeeus\n\n   mydate = pymeeus.epoch(1992, 10, 13.0)\n\nbut if you do that, you'll get an error like this:\n\n.. code:: sh\n\n   traceback (most recent call last):\n     file \"/home/user/test/test.py\", line 3, in <module>\n       epoch = pymeeus.epoch(1992, 10, 13.0)\n   attributeerror: module 'pymeeus' has no attribute 'epoch'\n\nthis issue points to a misunderstanding that is very common in the\npython world. the keyword ``import`` is used to import **modules**\\ ...\nbut pymeeus is **not** a module: it is a **library** composed of\n**multiple** modules (``angle``, ``epoch``, ``coordinates``, etc). as of\ntoday, the library pymeeus has 19 different modules (if you look into\nthe directory where ``pip`` stores the library, you'll find one \".py\"\nfile per module).\n\ntherefore if you want to use, for example, the module ``angle`` you\nshould use:\n\n.. code:: sh\n\n   import pymeeus.angle\n\ni.e., your *module* is ``pymeeus.angle``, and not just ``angle``.\n\nbut there is more! when you use ``import`` to fetch a module, you must\nthen use the *dot* notation to access the components of the module\n(classes, functions, etc). for instance:\n\n.. code:: sh\n\n   import pymeeus.angle\n\n   i = pymeeus.angle.angle(11.94524)\n\nin this case, you are telling the python interpreter that you want to\nuse the class ``angle`` (with parameter '11.94524') from the module\n``angle`` belonging to the library ``pymeeus``.\n\nthere is, however, a more practical (and common) way to handle modules\nusing the statement ``from <module> import <component>``. for instance:\n\n.. code:: sh\n\n   from pymeeus.angle import angle\n   from pymeeus.epoch import epoch, jde2000\n   from math import sin, cos, tan, acos, atan2, sqrt, radians, log10\n\nthis way is preferred because, among other reasons, only the required\ncomponents are loaded into memory instead of the whole module. also, now\nthe component is directly added to your execution environment, which\nmeans that you no longer need to use the *dot* notation.\n\ntherefore, the script at the beginning would become:\n\n.. code:: sh\n\n   from pymeeus.epoch import epoch\n\n   mydate = epoch(1992, 10, 13.0)\n\nmeta\n----\n\nauthor: dagoberto salazar\n\ndistributed under the gnu lesser general public license v3 (lgplv3). see\n``license.txt`` and ``copying.lesser`` for more information.\n\ndocumentation: https://pymeeus.readthedocs.io/en/latest/\n\ngithub: https://github.com/architest/pymeeus\n\nif you have sphinx installed, you can generate your own, latest\ndocumentation going to directory 'docs' and issuing:\n\n.. code:: sh\n\n   make html\n\nthen the html documentation pages can be found in 'build/html'.\n\ncontributing\n------------\n\nthe preferred method to contribute is through forking and pull requests:\n\n1. fork it (https://github.com/architest/pymeeus/fork)\n2. create your feature branch (``git checkout -b feature/foobar``)\n3. commit your changes (``git commit -am 'add some foobar'``)\n4. push to the branch (``git push origin feature/foobar``)\n5. create a new pull request\n\nplease bear in mind that pymeeus follows the pep8 style guide for python\ncode `(pep8) <https://www.python.org/dev/peps/pep-0008/?>`__. we suggest\nyou install and use a linter like\n`flake8 <http://flake8.pycqa.org/en/latest/>`__ before contributing.\n\nadditionally, pymeeus makes heavy use of automatic tests. as a general\nrule, every function or method added must have a corresponding test in\nthe proper place in ``tests`` directory.\n\nfinally, documentation is also a big thing here. add proper and abundant\ndocumentation to your new code. this also includes in-line comments!!!.\n\ncontributors\n------------\n\n-  `neil freeman <https://github.com/fitnr>`__ - fixed undefined\n   variable in epoch.tt2ut\n-  `molsen234 <https://github.com/molsen234>`__ - fixed bug when using\n   fractional seconds, minutes, hours or days\n-  `sebastian veigl <https://github.com/sebastian1306>`__ - added\n   functionality for jupiter's moons\n-  sophie scholz - added functionality for jupiter's moons\n-  vittorio serra - added functionality for jupiter's moons\n-  michael lutz - added functionality for jupiter's moons\n-  `ben dilday <https://github.com/bdilday>`__ - added ``__hash__()``\n   method to class epoch\n-  `zivoslav <https://github.com/zivoslav>`__ - bug report of winter\n   solstice\n-  `devid <https://github.com/sevdog>`__, `hugo van\n   kemenade <https://github.com/hugovk>`__ - test suggestions\n\nwhat's new\n----------\n\n-  0.5.12\n\n   -  fixed a bug in the computation of the winter solstice. added new\n      tests and information about proper use of the library.\n\n-  0.5.11\n\n   -  added parameter ``local`` to the ``epoch`` class constructor and\n      the methods ``get_date()`` and ``get_full_date()``.\n\n-  0.5.10\n\n   -  added methods ``moon_librations()`` and\n      ``moon_position_angle_axis()``.\n\n-  0.5.9\n\n   -  added method ``moon_maximum_declination()``.\n\n-  0.5.8\n\n   -  fixed several bugs in ``epoch`` class, and added method ``doy()``.\n\n-  0.5.7\n\n   -  added method ``moon_passage_nodes()``.\n\n-  0.5.6\n\n   -  added method ``moon_perigee_apogee()``.\n\n-  0.5.5\n\n   -  added method ``moon_phase()``.\n\n-  0.5.4\n\n   -  added methods ``illuminated_fraction_disk()`` and\n      ``position_bright_limb()`` to ``moon`` class.\n\n-  0.5.3\n\n   -  fixed error in the return type of method\n      ``sun.equation_of_time()``.\n\n-  0.5.2\n\n   -  added methods to compute the moon's longitude of ascending node\n      and perigee.\n\n-  0.5.1\n\n   -  changes in the organization of the documentation.\n\n-  0.5.0\n\n   -  added ``moon`` class and ``position()`` methods.\n\n-  0.4.3\n\n   -  added method ``ring_parameters()`` to saturn class.\n\n-  0.4.2\n\n   -  added method ``__hash__()`` to epoch. now epoch objects can be\n      used as keys in a dictionary.\n\n-  0.4.1\n\n   -  added funtionality to compute the positions of jupiter's galilean\n      moons.\n\n-  0.4.0\n\n   -  added methods to compute saturn's ring inclination and longitude\n      of ascending node.\n\n-  0.3.13\n\n   -  additional encoding changes.\n\n-  0.3.12\n\n   -  deleted ``encoding`` keyword from setup.py, which was giving\n      problems.\n\n-  0.3.11\n\n   -  added encoding specification to setup.py.\n\n-  0.3.10\n\n   -  fixed characters with the wrong encoding.\n\n-  0.3.9\n\n   -  relaxed requirements, added contributor molsen234, and fixed\n      format problems showed by flake8.\n\n-  0.3.8\n\n   -  fixed undefined variable in ``epoch.tt2ut``.\n\n-  0.3.7\n\n   -  fix bug when using fractional seconds, minutes, hours or days,\n      plus documentation improvements.\n\n-  0.3.6\n\n   -  add method to compute rising and setting times of the sun.\n\n-  0.3.5\n\n   -  add method ``magnitude()`` to planet classes.\n\n-  0.3.4\n\n   -  add method to compute the parallax correction to earth class.\n\n-  0.3.3\n\n   -  add methods to compute the passage through the nodes.\n\n-  0.3.2\n\n   -  add methods to compute the perihelion and aphelion of all planets.\n\n-  0.3.1\n\n   -  fix errors in the elongation computation, add tests and examples\n      of use of methods ``geocentric_position()``, and tests and\n      examples for ``pluto`` class.\n\n-  0.3.0\n\n   -  added ``pluto`` class.\n\n\n",
  "docs_url": null,
  "keywords": "meeus astronomy module library",
  "license": "lgplv3",
  "name": "pymeeus",
  "package_url": "https://pypi.org/project/PyMeeus/",
  "project_url": "https://pypi.org/project/PyMeeus/",
  "project_urls": {
    "Download": "https://github.com/architest/pymeeus",
    "Homepage": "https://github.com/architest/pymeeus"
  },
  "release_url": "https://pypi.org/project/PyMeeus/0.5.12/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python implementation of jean meeus astronomical routines",
  "version": "0.5.12",
  "releases": [],
  "developers": [
    "dagoberto.salazar@gmail.com",
    "dagoberto_salazar"
  ],
  "kwds": "astropy astronomy python astronomers pymeeus",
  "license_kwds": "lgplv3",
  "libtype": "pypi",
  "id": "pypi_pymeeus",
  "homepage": "https://github.com/architest/pymeeus",
  "release_count": 62,
  "dependency_ids": []
}
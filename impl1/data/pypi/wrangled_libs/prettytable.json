{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: text processing",
    "typing :: typed"
  ],
  "description": "# prettytable\n\n[![jazzband](https://jazzband.co/static/img/badge.svg)](https://jazzband.co/)\n[![pypi version](https://img.shields.io/pypi/v/prettytable.svg?logo=pypi&logocolor=ffe873)](https://pypi.org/project/prettytable/)\n[![supported python versions](https://img.shields.io/pypi/pyversions/prettytable.svg?logo=python&logocolor=ffe873)](https://pypi.org/project/prettytable/)\n[![pypi downloads](https://img.shields.io/pypi/dm/prettytable.svg)](https://pypistats.org/packages/prettytable)\n[![github actions status](https://github.com/jazzband/prettytable/workflows/test/badge.svg)](https://github.com/jazzband/prettytable/actions)\n[![codecov](https://codecov.io/gh/jazzband/prettytable/branch/main/graph/badge.svg)](https://codecov.io/gh/jazzband/prettytable)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nprettytable lets you print tables in an attractive ascii form:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n| adelaide  | 1295 |  1158259   |      600.5      |\n| brisbane  | 5905 |  1857594   |      1146.4     |\n| darwin    | 112  |   120900   |      1714.7     |\n| hobart    | 1357 |   205556   |      619.5      |\n| melbourne | 1566 |  3806092   |      646.9      |\n| perth     | 5386 |  1554769   |      869.4      |\n| sydney    | 2058 |  4336374   |      1214.8     |\n+-----------+------+------------+-----------------+\n```\n\n## installation\n\ninstall via pip:\n\n    python -m pip install -u prettytable\n\ninstall latest development version:\n\n    python -m pip install -u git+https://github.com/jazzband/prettytable\n\nor from `requirements.txt`:\n\n    -e git://github.com/jazzband/prettytable.git#egg=prettytable\n\n## tutorial on how to use the prettytable api\n\n### getting your data into (and out of) the table\n\nlet's suppose you have a shiny new prettytable:\n\n```python\nfrom prettytable import prettytable\nx = prettytable()\n```\n\nand you want to put some data into it. you have a few options.\n\n#### row by row\n\nyou can add data one row at a time. to do this you can set the field names first using\nthe `field_names` attribute, and then add the rows one at a time using the `add_row`\nmethod:\n\n```python\nx.field_names = [\"city name\", \"area\", \"population\", \"annual rainfall\"]\nx.add_row([\"adelaide\", 1295, 1158259, 600.5])\nx.add_row([\"brisbane\", 5905, 1857594, 1146.4])\nx.add_row([\"darwin\", 112, 120900, 1714.7])\nx.add_row([\"hobart\", 1357, 205556, 619.5])\nx.add_row([\"sydney\", 2058, 4336374, 1214.8])\nx.add_row([\"melbourne\", 1566, 3806092, 646.9])\nx.add_row([\"perth\", 5386, 1554769, 869.4])\n```\n\n#### all rows at once\n\nwhen you have a list of rows, you can add them in one go with `add_rows`:\n\n```python\nx.field_names = [\"city name\", \"area\", \"population\", \"annual rainfall\"]\nx.add_rows(\n    [\n        [\"adelaide\", 1295, 1158259, 600.5],\n        [\"brisbane\", 5905, 1857594, 1146.4],\n        [\"darwin\", 112, 120900, 1714.7],\n        [\"hobart\", 1357, 205556, 619.5],\n        [\"sydney\", 2058, 4336374, 1214.8],\n        [\"melbourne\", 1566, 3806092, 646.9],\n        [\"perth\", 5386, 1554769, 869.4],\n    ]\n)\n```\n\n#### column by column\n\nyou can add data one column at a time as well. to do this you use the `add_column`\nmethod, which takes two arguments - a string which is the name for the field the column\nyou are adding corresponds to, and a list or tuple which contains the column data:\n\n```python\nx.add_column(\"city name\",\n[\"adelaide\",\"brisbane\",\"darwin\",\"hobart\",\"sydney\",\"melbourne\",\"perth\"])\nx.add_column(\"area\", [1295, 5905, 112, 1357, 2058, 1566, 5386])\nx.add_column(\"population\", [1158259, 1857594, 120900, 205556, 4336374, 3806092,\n1554769])\nx.add_column(\"annual rainfall\",[600.5, 1146.4, 1714.7, 619.5, 1214.8, 646.9,\n869.4])\n```\n\n#### mixing and matching\n\nif you really want to, you can even mix and match `add_row` and `add_column` and build\nsome of your table in one way and some of it in the other. tables built this way are\nkind of confusing for other people to read, though, so don't do this unless you have a\ngood reason.\n\n#### importing data from a csv file\n\nif you have your table data in a comma-separated values file (.csv), you can read this\ndata into a prettytable like this:\n\n```python\nfrom prettytable import from_csv\nwith open(\"myfile.csv\") as fp:\n    mytable = from_csv(fp)\n```\n\n#### importing data from a database cursor\n\nif you have your table data in a database which you can access using a library which\nconfirms to the python db-api (e.g. an sqlite database accessible using the `sqlite`\nmodule), then you can build a prettytable using a cursor object, like this:\n\n```python\nimport sqlite3\nfrom prettytable import from_db_cursor\n\nconnection = sqlite3.connect(\"mydb.db\")\ncursor = connection.cursor()\ncursor.execute(\"select field1, field2, field3 from my_table\")\nmytable = from_db_cursor(cursor)\n```\n\n#### getting data out\n\nthere are three ways to get data out of a prettytable, in increasing order of\ncompleteness:\n\n- the `del_row` method takes an integer index of a single row to delete.\n- the `del_column` method takes a field name of a single column to delete.\n- the `clear_rows` method takes no arguments and deletes all the rows in the table - but\n  keeps the field names as they were so you that you can repopulate it with the same\n  kind of data.\n- the `clear` method takes no arguments and deletes all rows and all field names. it's\n  not quite the same as creating a fresh table instance, though - style related\n  settings, discussed later, are maintained.\n\n### displaying your table in ascii form\n\nprettytable's main goal is to let you print tables in an attractive ascii form, like\nthis:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n| adelaide  | 1295 |  1158259   |      600.5      |\n| brisbane  | 5905 |  1857594   |      1146.4     |\n| darwin    | 112  |   120900   |      1714.7     |\n| hobart    | 1357 |   205556   |      619.5      |\n| melbourne | 1566 |  3806092   |      646.9      |\n| perth     | 5386 |  1554769   |      869.4      |\n| sydney    | 2058 |  4336374   |      1214.8     |\n+-----------+------+------------+-----------------+\n```\n\nyou can print tables like this to `stdout` or get string representations of them.\n\n#### printing\n\nto print a table in ascii form, you can just do this:\n\n```python\nprint(x)\n```\n\nthe old `x.printt()` method from versions 0.5 and earlier has been removed.\n\nto pass options changing the look of the table, use the `get_string()` method documented\nbelow:\n\n```python\nprint(x.get_string())\n```\n\n#### stringing\n\nif you don't want to actually print your table in ascii form but just get a string\ncontaining what _would_ be printed if you use `print(x)`, you can use the `get_string`\nmethod:\n\n```python\nmystring = x.get_string()\n```\n\nthis string is guaranteed to look exactly the same as what would be printed by doing\n`print(x)`. you can now do all the usual things you can do with a string, like write\nyour table to a file or insert it into a gui.\n\nthe table can be displayed in several different formats using `get_formatted_string` by\nchanging the `out_format=<text|html|json|csv|latex>`. this function passes through\narguments to the functions that render the table, so additional arguments can be given.\nthis provides a way to let a user choose the output formatting.\n\n```python\ndef my_cli_function(table_format: str = 'text'):\n  ...\n  print(x.get_formatted_string(table_format))\n```\n\n#### controlling which data gets displayed\n\nif you like, you can restrict the output of `print(x)` or `x.get_string` to only the\nfields or rows you like.\n\nthe `fields` argument to these methods takes a list of field names to be printed:\n\n```python\nprint(x.get_string(fields=[\"city name\", \"population\"]))\n```\n\ngives:\n\n```\n+-----------+------------+\n| city name | population |\n+-----------+------------+\n| adelaide  |  1158259   |\n| brisbane  |  1857594   |\n| darwin    |   120900   |\n| hobart    |   205556   |\n| melbourne |  3806092   |\n| perth     |  1554769   |\n| sydney    |  4336374   |\n+-----------+------------+\n```\n\nthe `start` and `end` arguments take the index of the first and last row to print\nrespectively. note that the indexing works like python list slicing - to print the 2nd,\n3rd and 4th rows of the table, set `start` to 1 (the first row is row 0, so the second\nis row 1) and set `end` to 4 (the index of the 4th row, plus 1):\n\n```python\nprint(x.get_string(start=1, end=4))\n```\n\nprints:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n| brisbane  | 5905 |    1857594 | 1146.4          |\n| darwin    | 112  |     120900 | 1714.7          |\n| hobart    | 1357 |     205556 | 619.5           |\n+-----------+------+------------+-----------------+\n```\n\n#### changing the alignment of columns\n\nby default, all columns in a table are centre aligned.\n\n##### all columns at once\n\nyou can change the alignment of all the columns in a table at once by assigning a one\ncharacter string to the `align` attribute. the allowed strings are `\"l\"`, `\"r\"` and\n`\"c\"` for left, right and centre alignment, respectively:\n\n```python\nx.align = \"r\"\nprint(x)\n```\n\ngives:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n|  adelaide | 1295 |    1158259 |           600.5 |\n|  brisbane | 5905 |    1857594 |          1146.4 |\n|    darwin |  112 |     120900 |          1714.7 |\n|    hobart | 1357 |     205556 |           619.5 |\n| melbourne | 1566 |    3806092 |           646.9 |\n|     perth | 5386 |    1554769 |           869.4 |\n|    sydney | 2058 |    4336374 |          1214.8 |\n+-----------+------+------------+-----------------+\n```\n\n##### one column at a time\n\nyou can also change the alignment of individual columns based on the corresponding field\nname by treating the `align` attribute as if it were a dictionary.\n\n```python\nx.align[\"city name\"] = \"l\"\nx.align[\"area\"] = \"c\"\nx.align[\"population\"] = \"r\"\nx.align[\"annual rainfall\"] = \"c\"\nprint(x)\n```\n\ngives:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n| adelaide  | 1295 |    1158259 |      600.5      |\n| brisbane  | 5905 |    1857594 |      1146.4     |\n| darwin    | 112  |     120900 |      1714.7     |\n| hobart    | 1357 |     205556 |      619.5      |\n| melbourne | 1566 |    3806092 |      646.9      |\n| perth     | 5386 |    1554769 |      869.4      |\n| sydney    | 2058 |    4336374 |      1214.8     |\n+-----------+------+------------+-----------------+\n```\n\n##### sorting your table by a field\n\nyou can make sure that your ascii tables are produced with the data sorted by one\nparticular field by giving `get_string` a `sortby` keyword argument, which must be a\nstring containing the name of one field.\n\nfor example, to print the example table we built earlier of australian capital city\ndata, so that the most populated city comes last, we can do this:\n\n```python\nprint(x.get_string(sortby=\"population\"))\n```\n\nto get:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n| darwin    | 112  |   120900   |      1714.7     |\n| hobart    | 1357 |   205556   |      619.5      |\n| adelaide  | 1295 |  1158259   |      600.5      |\n| perth     | 5386 |  1554769   |      869.4      |\n| brisbane  | 5905 |  1857594   |      1146.4     |\n| melbourne | 1566 |  3806092   |      646.9      |\n| sydney    | 2058 |  4336374   |      1214.8     |\n+-----------+------+------------+-----------------+\n```\n\nif we want the most populated city to come _first_, we can also give a\n`reversesort=true` argument.\n\nif you _always_ want your tables to be sorted in a certain way, you can make the setting\nlong-term like this:\n\n```python\nx.sortby = \"population\"\nprint(x)\nprint(x)\nprint(x)\n```\n\nall three tables printed by this code will be sorted by population (you could do\n`x.reversesort = true` as well, if you wanted). the behaviour will persist until you\nturn it off:\n\n```python\nx.sortby = none\n```\n\nif you want to specify a custom sorting function, you can use the `sort_key` keyword\nargument. pass this a function which accepts two lists of values and returns a negative\nor positive value depending on whether the first list should appear before or after the\nsecond one. if your table has n columns, each list will have n+1 elements. each list\ncorresponds to one row of the table. the first element will be whatever data is in the\nrelevant row, in the column specified by the `sort_by` argument. the remaining n\nelements are the data in each of the table's columns, in order, including a repeated\ninstance of the data in the `sort_by` column.\n\n#### adding sections to a table\n\nyou can divide your table into different sections using the `divider` argument. this\nwill add a dividing line into the table under the row who has this field set. so we can\nset up a table like this:\n\n```python\nx = prettytable()\nx.field_names = [\"city name\", \"area\", \"population\", \"annual rainfall\"]\nx.add_row([\"adelaide\", 1295, 1158259, 600.5])\nx.add_row([\"brisbane\", 5905, 1857594, 1146.4])\nx.add_row([\"darwin\", 112, 120900, 1714.7])\nx.add_row([\"hobart\", 1357, 205556, 619.5], divider=true)\nx.add_row([\"melbourne\", 1566, 3806092, 646.9])\nx.add_row([\"perth\", 5386, 1554769, 869.4])\nx.add_row([\"sydney\", 2058, 4336374, 1214.8])\n```\n\nto get a table like this:\n\n```\n+-----------+------+------------+-----------------+\n| city name | area | population | annual rainfall |\n+-----------+------+------------+-----------------+\n|  adelaide | 1295 |  1158259   |      600.5      |\n|  brisbane | 5905 |  1857594   |      1146.4     |\n|   darwin  | 112  |   120900   |      1714.7     |\n|   hobart  | 1357 |   205556   |      619.5      |\n+-----------+------+------------+-----------------+\n| melbourne | 1566 |  3806092   |      646.9      |\n|   perth   | 5386 |  1554769   |      869.4      |\n|   sydney  | 2058 |  4336374   |      1214.8     |\n+-----------+------+------------+-----------------+\n```\n\nany added dividers will be removed if a table is sorted.\n\n### changing the appearance of your table - the easy way\n\nby default, prettytable produces ascii tables that look like the ones used in sql\ndatabase shells. but it can print them in a variety of other formats as well. if the\nformat you want to use is common, prettytable makes this easy for you to do using the\n`set_style` method. if you want to produce an uncommon table, you'll have to do things\nslightly harder (see later).\n\n#### setting a table style\n\nyou can set the style for your table using the `set_style` method before any calls to\n`print` or `get_string`. here's how to print a table in a format which works nicely with\nmicrosoft word's \"convert to table\" feature:\n\n```python\nfrom prettytable import msword_friendly\nx.set_style(msword_friendly)\nprint(x)\n```\n\nin addition to `msword_friendly` you can use these in-built styles for your tables:\n\n- `default` - the default look, used to undo any style changes you may have made\n- `plain_columns` - a borderless style that works well with command line programs for\n  columnar data\n- `markdown` - a style that follows markdown syntax\n- `orgmode` - a table style that fits [org mode](https://orgmode.org/) syntax\n- `single_border` and `double_border` - styles that use continuous single/double border\n  lines with box drawing characters for a fancier display on terminal\n\nother styles are likely to appear in future releases.\n\n### changing the appearance of your table - the hard way\n\nif you want to display your table in a style other than one of the in-built styles\nlisted above, you'll have to set things up the hard way.\n\ndon't worry, it's not really that hard!\n\n#### style options\n\nprettytable has a number of style options which control various aspects of how tables\nare displayed. you have the freedom to set each of these options individually to\nwhatever you prefer. the `set_style` method just does this automatically for you.\n\nthe options are these:\n\n- `border` - a boolean option (must be `true` or `false`). controls whether a border is\n  drawn inside and around the table.\n- `preserve_internal_border` - a boolean option (must be `true` or `false`). controls\n  whether borders are still drawn within the table even when `border=false`.\n- `header` - a boolean option (must be `true` or `false`). controls whether the first\n  row of the table is a header showing the names of all the fields.\n- `hrules` - controls printing of horizontal rules after rows. allowed values: `frame`,\n  `header`, `all`, `none` - note that these are variables defined inside the\n  `prettytable` module so make sure you import them or use `prettytable.frame` etc.\n- `vrules` - controls printing of vertical rules between columns. allowed values:\n  `frame`, `all`, `none`.\n- `int_format` - a string which controls the way integer data is printed. this works\n  like: `print(\"%<int_format>d\" % data)`\n- `float_format` - a string which controls the way floating point data is printed. this\n  works like: `print(\"%<float_format>f\" % data)`\n- `custom_format` - a dictionary of field and callable. this allows you to set any\n  format you want `pf.custom_format[\"my_col_int\"] = ()lambda f, v: f\"{v:,}\"`. the type\n  of the callable if `callable[[str, any], str]`\n- `padding_width` - number of spaces on either side of column data (only used if left\n  and right paddings are `none`).\n- `left_padding_width` - number of spaces on left-hand side of column data.\n- `right_padding_width` - number of spaces on right-hand side of column data.\n- `vertical_char` - single character string used to draw vertical lines. default is `|`.\n- `horizontal_char` - single character string used to draw horizontal lines. default is\n  `-`.\n- `_horizontal_align_char` - single character string used to indicate column alignment\n  in horizontal lines. default is `:` for markdown, otherwise `none`.\n- `junction_char` - single character string used to draw line junctions. default is `+`.\n- `top_junction_char` - single character string used to draw top line junctions. default\n  is `junction_char`.\n- `bottom_junction_char` - single character string used to draw bottom line junctions.\n  default is `junction_char`.\n- `right_junction_char` - single character string used to draw right line junctions.\n  default is `junction_char`.\n- `left_junction_char` - single character string used to draw left line junctions.\n  default is `junction_char`.\n- `top_right_junction_char` - single character string used to draw top-right line\n  junctions. default is `junction_char`.\n- `top_left_junction_char` - single character string used to draw top-left line\n  junctions. default is `junction_char`.\n- `bottom_right_junction_char` - single character string used to draw bottom-right line\n  junctions. default is `junction_char`\n- `bottom_left_junction_char` - single character string used to draw bottom-left line\n  junctions. default is `junction_char`.\n\nyou can set the style options to your own settings in two ways:\n\n#### setting style options for the long term\n\nif you want to print your table with a different style several times, you can set your\noption for the long term just by changing the appropriate attributes. if you never want\nyour tables to have borders you can do this:\n\n```python\nx.border = false\nprint(x)\nprint(x)\nprint(x)\n```\n\nneither of the 3 tables printed by this will have borders, even if you do things like\nadd extra rows in between them. the lack of borders will last until you do:\n\n```python\nx.border = true\n```\n\nto turn them on again. this sort of long-term setting is exactly how `set_style` works.\n`set_style` just sets a bunch of attributes to pre-set values for you.\n\nnote that if you know what style options you want at the moment you are creating your\ntable, you can specify them using keyword arguments to the constructor. for example, the\nfollowing two code blocks are equivalent:\n\n```python\nx = prettytable()\nx.border = false\nx.header = false\nx.padding_width = 5\n\nx = prettytable(border=false, header=false, padding_width=5)\n```\n\n#### changing style options just once\n\nif you don't want to make long-term style changes by changing an attribute like in the\nprevious section, you can make changes that last for just one `get_string` by giving\nthose methods keyword arguments. to print two \"normal\" tables with one borderless table\nbetween them, you could do this:\n\n```python\nprint(x)\nprint(x.get_string(border=false))\nprint(x)\n```\n\n### changing the appearance of your table - with _colors_!\n\nprettytable has the functionality of printing your table with ansi color codes. this\nincludes support for most windows versions through\n[colorama](https://pypi.org/project/colorama/). to get started, import the `colortable`\nclass instead of `prettytable`.\n\n```diff\n-from prettytable import prettytable\n+from prettytable.colortable import colortable\n```\n\nthe `colortable` class can be used the same as `prettytable`, but it adds an extra\nproperty. you can now specify a custom _theme_ that will format your table with colors.\n\n```python\nfrom prettytable.colortable import colortable, themes\n\nx = colortable(theme=themes.ocean)\n\nprint(x)\n```\n\n#### creating a custom theme\n\nthe `theme` class allows you to customize both the characters and colors used in your\ntable.\n\n| argument                                                   | description                                               |\n| ---------------------------------------------------------- | --------------------------------------------------------- |\n| `default_color`                                            | the color to use as default                               |\n| `vertical_char`, `horizontal_char`, and `junction_char`    | the characters used for creating the outline of the table |\n| `vertical_color`, `horizontal_color`, and `junction_color` | the colors used to style each character.                  |\n\n> **note:** colors are formatted with the `theme.format_code(s: str)` function. it\n> accepts a string. if the string starts with an escape code (like `\\x1b`) then it will\n> return the given string. if the string is just whitespace, it will return `\"\"`. if the\n> string is a number (like `\"34\"`), it will automatically format it into an escape code.\n> i recommend you look into the source code for more information.\n\n### displaying your table in json\n\nprettytable will also print your tables in json, as a list of fields and an array of\nrows. just like in ascii form, you can actually get a string representation - just use\n`get_json_string()`.\n\n### displaying your table in html form\n\nprettytable will also print your tables in html form, as `<table>`s. just like in ascii\nform, you can actually get a string representation - just use `get_html_string()`. html\nprinting supports the `fields`, `start`, `end`, `sortby` and `reversesort` arguments in\nexactly the same way as ascii printing.\n\n#### styling html tables\n\nby default, prettytable outputs html for \"vanilla\" tables. the html code is quite\nsimple. it looks like this:\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>city name</th>\n      <th>area</th>\n      <th>population</th>\n      <th>annual rainfall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>adelaide</td>\n      <td>1295</td>\n      <td>1158259</td>\n      <td>600.5</td>\n    </tr>\n    <tr>\n      <td>brisbane</td>\n      <td>5905</td>\n      <td>1857594</td>\n      <td>1146.4</td>\n      ...\n    </tr>\n  </tbody>\n</table>\n```\n\nif you like, you can ask prettytable to do its best to mimic the style options that your\ntable has set using inline css. this is done by giving a `format=true` keyword argument\nto `get_html_string` method. note that if you _always_ want to print formatted html you\ncan do:\n\n```python\nx.format = true\n```\n\nand the setting will persist until you turn it off.\n\njust like with ascii tables, if you want to change the table's style for just one\n`get_html_string` you can pass those methods' keyword arguments - exactly like `print`\nand `get_string`.\n\n#### setting html attributes\n\nyou can provide a dictionary of html attribute name/value pairs to the `get_html_string`\nmethod using the `attributes` keyword argument. this lets you specify common html\nattributes like `id` and `class` that can be used for linking to your tables or\ncustomising their appearance using css. for example:\n\n```python\nprint(x.get_html_string(attributes={\"id\":\"my_table\", \"class\":\"red_table\"}))\n```\n\nwill print:\n\n```html\n<table id=\"my_table\" class=\"red_table\">\n  <thead>\n    <tr>\n      <th>city name</th>\n      <th>area</th>\n      <th>population</th>\n      <th>annual rainfall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      ... ... ...\n    </tr>\n  </tbody>\n</table>\n```\n\n### miscellaneous things\n\n#### copying a table\n\nyou can call the `copy` method on a prettytable object without arguments to return an\nidentical independent copy of the table.\n\nif you want a copy of a prettytable object with just a subset of the rows, you can use\nlist slicing notation:\n\n```python\nnew_table = old_table[0:5]\n```\n\n## contributing\n\nafter editing files, use the [black](https://github.com/psf/black) linter to auto-format\nchanged lines.\n\n```sh\npython -m pip install black\nblack prettytable*.py\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd (3 clause)",
  "name": "prettytable",
  "package_url": "https://pypi.org/project/prettytable/",
  "project_url": "https://pypi.org/project/prettytable/",
  "project_urls": {
    "Changelog": "https://github.com/jazzband/prettytable/releases",
    "Homepage": "https://github.com/jazzband/prettytable",
    "Source": "https://github.com/jazzband/prettytable"
  },
  "release_url": "https://pypi.org/project/prettytable/3.9.0/",
  "requires_dist": [
    "wcwidth",
    "pytest; extra == 'tests'",
    "pytest-cov; extra == 'tests'",
    "pytest-lazy-fixture; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "a simple python library for easily displaying tabular data in a visually appealing ascii table format",
  "version": "3.9.0",
  "releases": [],
  "developers": [
    "jazzband",
    "luke@maurits.id.au"
  ],
  "kwds": "prettytable colortable jazzband pypi mytable",
  "license_kwds": "bsd (3 clause)",
  "libtype": "pypi",
  "id": "pypi_prettytable",
  "homepage": "",
  "release_count": 31,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_lazy_fixture",
    "pypi_wcwidth"
  ]
}
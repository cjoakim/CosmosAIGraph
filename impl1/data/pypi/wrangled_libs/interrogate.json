{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": ".. image:: https://interrogate.readthedocs.io/en/latest/_static/logo_pink.png\n    :alt: pink sloth logo\n\n=================================\n``interrogate``: explain yourself\n=================================\n\n.. image:: https://interrogate.readthedocs.io/en/latest/_static/interrogate_badge.svg\n   :target: https://github.com/econchick/interrogate\n   :alt: documentation coverage\n\n.. image:: https://codecov.io/gh/econchick/interrogate/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/econchick/interrogate\n   :alt: testing coverage\n\n.. image:: https://readthedocs.org/projects/interrogate/badge/?version=latest&style=flat\n   :target: https://interrogate.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. image:: https://github.com/econchick/interrogate/workflows/ci/badge.svg?branch=master\n   :target: https://github.com/econchick/interrogate/actions?workflow=ci\n   :alt: ci status\n\n.. start-readme\n\ninterrogate a codebase for docstring coverage.\n\nwhy do i need this?\n===================\n\n``interrogate`` checks your code base for missing docstrings.\n\ndocumentation should be as important as code itself. and it should live *within* code. python `standardized <https://www.python.org/dev/peps/pep-0257/>`_ docstrings, allowing for developers to navigate libraries as simply as calling ``help()`` on objects, and with powerful tools like `sphinx <https://www.sphinx-doc.org/en/master/>`_, `pydoc <https://docs.python.org/3/library/pydoc.html>`_, and `docutils <https://docutils.sourceforge.io/>`_ to automatically generate html, latex, pdfs, etc.\n\n*enter:* ``interrogate``.\n\n``interrogate`` will tell you which methods, functions, classes, and modules have docstrings, and which do not. use ``interrogate`` to:\n\n* get an understanding of how well your code is documented;\n* add it to ci/cd checks to enforce documentation on newly-added code;\n* assess a new code base for (one aspect of) code quality and maintainability.\n\nlet's get started.\n\nrequirements\n============\n\n``interrogate`` supports python 3.6 and above.\n\n\ninstallation\n============\n\n``interrogate`` is available on `pypi <https://pypi.org/project/interrogate/>`_ and `github <https://github.com/econchick/interrogate>`_. the recommended installation method is `pip <https://pip.pypa.io/en/stable/>`_-installing into a `virtualenv <https://hynek.me/articles/virtualenv-lives/>`_:\n\n.. code-block:: console\n\n    $ pip install interrogate\n\nextras\n------\n\n``interrogate`` provides a way to generate a `shields.io-like coverage badge <#other-usage>`_ as an **svg file**.\nto generate a **png file** instead, install ``interrogate`` with the extras ``[png]``:\n\n.. code-block:: console\n\n    $ pip install interrogate[png]\n\n**notice:** additional system libraries/tools may be required in order to generate a png file of the coverage badge:\n\n* on windows, install visual c++ compiler for cairo;\n* on macos, install ``cairo`` and ``libffi`` (with homebrew for example);\n* on linux, install the ``cairo``, ``python3-dev`` and ``libffi-dev`` packages (names may vary depending on distribution).\n\nrefer to the ``cairosvg`` `documentation <https://cairosvg.org/documentation/>`_ for more information.\n\nusage\n=====\n\ntry it out on a python project:\n\n.. code-block:: console\n\n    $ interrogate [path]\n    result: passed (minimum: 80.0%, actual: 100.0%)\n\n\nadd verbosity to see a summary:\n\n.. code-block:: console\n\n    $ interrogate -v [path]\n\n    ================== coverage for /users/lynn/dev/interrogate/ ====================\n    ------------------------------------ summary ------------------------------------\n    | name                                  |   total |   miss |   cover |   cover% |\n    |---------------------------------------|---------|--------|---------|----------|\n    | src/interrogate/__init__.py           |       1 |      0 |       1 |     100% |\n    | src/interrogate/__main__.py           |       1 |      0 |       1 |     100% |\n    | src/interrogate/badge_gen.py          |       6 |      0 |       6 |     100% |\n    | src/interrogate/cli.py                |       2 |      0 |       2 |     100% |\n    | src/interrogate/config.py             |       8 |      0 |       8 |     100% |\n    | src/interrogate/coverage.py           |      27 |      0 |      27 |     100% |\n    | src/interrogate/utils.py              |      10 |      0 |      10 |     100% |\n    | src/interrogate/visit.py              |      18 |      0 |      18 |     100% |\n    | tests/functional/__init__.py          |       1 |      0 |       1 |     100% |\n    | tests/functional/test_cli.py          |       8 |      0 |       8 |     100% |\n    | tests/functional/test_coverage.py     |      10 |      0 |      10 |     100% |\n    | tests/unit/__init__.py                |       1 |      0 |       1 |     100% |\n    | tests/unit/test_badge_gen.py          |       8 |      0 |       8 |     100% |\n    | tests/unit/test_config.py             |      10 |      0 |      10 |     100% |\n    | tests/unit/test_utils.py              |      13 |      0 |      13 |     100% |\n    |---------------------------------------|---------|--------|---------|----------|\n    | total                                 |     124 |      0 |     124 |   100.0% |\n    ---------------- result: passed (minimum: 80.0%, actual: 100.0%) ----------------\n\n\nadd even *more* verbosity:\n\n\n.. code-block:: console\n\n    $ interrogate -vv [path]\n\n    ================== coverage for /users/lynn/dev/interrogate/ ====================\n    ------------------------------- detailed coverage -------------------------------\n    | name                                                                |  status |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/__init__.py (module)                                | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/__main__.py (module)                                | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/badge_gen.py (module)                               | covered |\n    |   save_badge (l42)                                                  | covered |\n    |   get_badge (l87)                                                   | covered |\n    |   should_generate_badge (l103)                                      | covered |\n    |   get_color (l160)                                                  | covered |\n    |   create (l173)                                                     | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/cli.py (module)                                     | covered |\n    |   main (l258)                                                       | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/config.py (module)                                  | covered |\n    |   interrogateconfig (l19)                                           | covered |\n    |   find_project_root (l61)                                           | covered |\n    |   find_project_config (l89)                                         | covered |\n    |   parse_pyproject_toml (l100)                                       | covered |\n    |   sanitize_list_values (l116)                                       | covered |\n    |   parse_setup_cfg (l139)                                            | covered |\n    |   read_config_file (l173)                                           | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/coverage.py (module)                                | covered |\n    |   baseinterrogateresult (l23)                                       | covered |\n    |     baseinterrogateresult.perc_covered (l37)                        | covered |\n    |   interrogatefileresult (l54)                                       | covered |\n    |     interrogatefileresult.combine (l67)                             | covered |\n    |   interrogateresults (l81)                                          | covered |\n    |     interrogateresults.combine (l93)                                | covered |\n    |   interrogatecoverage (l101)                                        | covered |\n    |     interrogatecoverage._add_common_exclude (l121)                  | covered |\n    |     interrogatecoverage._filter_files (l128)                        | covered |\n    |     interrogatecoverage.get_filenames_from_paths (l141)             | covered |\n    |     interrogatecoverage._filter_nodes (l168)                        | covered |\n    |     interrogatecoverage._filter_inner_nested (l194)                 | covered |\n    |     interrogatecoverage._get_file_coverage (l203)                   | covered |\n    |     interrogatecoverage._get_coverage (l231)                        | covered |\n    |     interrogatecoverage.get_coverage (l248)                         | covered |\n    |     interrogatecoverage._get_filename (l253)                        | covered |\n    |     interrogatecoverage._get_detailed_row (l264)                    | covered |\n    |     interrogatecoverage._create_detailed_table (l281)               | covered |\n    |       interrogatecoverage._create_detailed_table._sort_nodes (l288) | covered |\n    |     interrogatecoverage._print_detailed_table (l315)                | covered |\n    |     interrogatecoverage._create_summary_table (l338)                | covered |\n    |     interrogatecoverage._print_summary_table (l381)                 | covered |\n    |     interrogatecoverage._sort_results (l399)                        | covered |\n    |     interrogatecoverage._get_header_base (l429)                     | covered |\n    |     interrogatecoverage._print_omitted_file_count (l438)            | covered |\n    |     interrogatecoverage.print_results (l469)                        | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/utils.py (module)                                   | covered |\n    |   parse_regex (l21)                                                 | covered |\n    |   smart_open (l40)                                                  | covered |\n    |   get_common_base (l60)                                             | covered |\n    |   outputformatter (l80)                                             | covered |\n    |     outputformatter.should_markup (l90)                             | covered |\n    |     outputformatter.set_detailed_markup (l105)                      | covered |\n    |     outputformatter.set_summary_markup (l129)                       | covered |\n    |     outputformatter._interrogate_line_formatter (l158)              | covered |\n    |     outputformatter.get_table_formatter (l226)                      | covered |\n    |---------------------------------------------------------------------|---------|\n    | src/interrogate/visit.py (module)                                   | covered |\n    |   covnode (l15)                                                     | covered |\n    |   coveragevisitor (l44)                                             | covered |\n    |     coveragevisitor._has_doc (l58)                                  | covered |\n    |     coveragevisitor._visit_helper (l65)                             | covered |\n    |     coveragevisitor._is_nested_func (l112)                          | covered |\n    |     coveragevisitor._is_nested_cls (l121)                           | covered |\n    |     coveragevisitor._is_private (l133)                              | covered |\n    |     coveragevisitor._is_semiprivate (l141)                          | covered |\n    |     coveragevisitor._is_ignored_common (l151)                       | covered |\n    |     coveragevisitor._has_property_decorators (l168)                 | covered |\n    |     coveragevisitor._has_setters (l182)                             | covered |\n    |     coveragevisitor._is_func_ignored (l193)                         | covered |\n    |     coveragevisitor._is_class_ignored (l217)                        | covered |\n    |     coveragevisitor.visit_module (l221)                             | covered |\n    |     coveragevisitor.visit_classdef (l228)                           | covered |\n    |     coveragevisitor.visit_functiondef (l237)                        | covered |\n    |     coveragevisitor.visit_asyncfunctiondef (l246)                   | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/functional/__init__.py (module)                               | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/functional/test_cli.py (module)                               | covered |\n    |   runner (l22)                                                      | covered |\n    |   test_run_no_paths (l30)                                           | covered |\n    |   test_run_shortflags (l77)                                         | covered |\n    |   test_run_longflags (l106)                                         | covered |\n    |   test_run_multiple_flags (l124)                                    | covered |\n    |   test_generate_badge (l135)                                        | covered |\n    |   test_incompatible_options (l170)                                  | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/functional/test_coverage.py (module)                          | covered |\n    |   test_coverage_simple (l60)                                        | covered |\n    |   test_coverage_errors (l73)                                        | covered |\n    |   test_print_results (l101)                                         | covered |\n    |   test_print_results_omit_covered (l130)                            | covered |\n    |   test_print_results_omit_none (l156)                               | covered |\n    |   test_print_results_omit_all_summary (l174)                        | covered |\n    |   test_print_results_omit_all_detailed (l198)                       | covered |\n    |   test_print_results_ignore_module (l226)                           | covered |\n    |   test_print_results_single_file (l253)                             | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/unit/__init__.py (module)                                     | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/unit/test_badge_gen.py (module)                               | covered |\n    |   test_save_badge (l26)                                             | covered |\n    |   test_save_badge_windows (l50)                                     | covered |\n    |   test_save_badge_no_cairo (l62)                                    | covered |\n    |   test_get_badge (l73)                                              | covered |\n    |   test_should_generate (l96)                                        | covered |\n    |   test_get_color (l115)                                             | covered |\n    |   test_create (l136)                                                | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/unit/test_config.py (module)                                  | covered |\n    |   test_find_project_root (l29)                                      | covered |\n    |   test_find_project_config (l48)                                    | covered |\n    |   test_parse_pyproject_toml (l57)                                   | covered |\n    |   test_sanitize_list_values (l93)                                   | covered |\n    |   test_parse_setup_cfg (l98)                                        | covered |\n    |   test_parse_setup_cfg_raises (l123)                                | covered |\n    |   test_read_config_file_none (l134)                                 | covered |\n    |   test_read_config_file (l193)                                      | covered |\n    |   test_read_config_file_raises (l207)                               | covered |\n    |---------------------------------------------------------------------|---------|\n    | tests/unit/test_utils.py (module)                                   | covered |\n    |   test_parse_regex (l32)                                            | covered |\n    |   test_smart_open (l39)                                             | covered |\n    |   test_get_common_base (l69)                                        | covered |\n    |   test_get_common_base_windows (l100)                               | covered |\n    |   test_output_formatter_should_markup (l132)                        | covered |\n    |   test_output_formatter_set_detailed_markup (l163)                  | covered |\n    |   test_output_formatter_set_summary_markup (l206)                   | covered |\n    |   test_output_formatter_interrogate_line_formatter (l258)           | covered |\n    |   test_output_formatter_interrogate_line_formatter_windows (l319)   | covered |\n    |   test_output_formatter_get_table_formatter (l343)                  | covered |\n    |   test_output_formatter_get_table_formatter_py38 (l381)             | covered |\n    |   test_output_formatter_get_table_formatter_raises (l395)           | covered |\n    |---------------------------------------------------------------------|---------|\n\n    ------------------------------------ summary ------------------------------------\n    | name                                  |   total |   miss |   cover |   cover% |\n    |---------------------------------------|---------|--------|---------|----------|\n    | src/interrogate/__init__.py           |       1 |      0 |       1 |     100% |\n    | src/interrogate/__main__.py           |       1 |      0 |       1 |     100% |\n    | src/interrogate/badge_gen.py          |       6 |      0 |       6 |     100% |\n    | src/interrogate/cli.py                |       2 |      0 |       2 |     100% |\n    | src/interrogate/config.py             |       8 |      0 |       8 |     100% |\n    | src/interrogate/coverage.py           |      27 |      0 |      27 |     100% |\n    | src/interrogate/utils.py              |      10 |      0 |      10 |     100% |\n    | src/interrogate/visit.py              |      18 |      0 |      18 |     100% |\n    | tests/functional/__init__.py          |       1 |      0 |       1 |     100% |\n    | tests/functional/test_cli.py          |       8 |      0 |       8 |     100% |\n    | tests/functional/test_coverage.py     |      10 |      0 |      10 |     100% |\n    | tests/unit/__init__.py                |       1 |      0 |       1 |     100% |\n    | tests/unit/test_badge_gen.py          |       8 |      0 |       8 |     100% |\n    | tests/unit/test_config.py             |      10 |      0 |      10 |     100% |\n    | tests/unit/test_utils.py              |      13 |      0 |      13 |     100% |\n    |---------------------------------------|---------|--------|---------|----------|\n    | total                                 |     124 |      0 |     124 |   100.0% |\n    ---------------- result: passed (minimum: 80.0%, actual: 100.0%) ----------------\n\nother usage\n===========\n\ngenerate a `shields.io <https://shields.io/>`_ badge (like this one! |interrogate-badge| ):\n\n.. code-block:: console\n\n    $ interrogate --generate-badge path\n    result: passed (minimum: 80.0%, actual: 100.0%)\n    generated badge to /users/lynn/dev/interrogate/docs/_static/interrogate_badge.svg\n\n`see below <#badge-options>`_ for more badge configuration.\n\nadd it to your ``tox.ini`` file to enforce a level of coverage:\n\n.. code-block:: ini\n\n    [testenv:doc]\n    deps = interrogate\n    skip_install = true\n    commands =\n        interrogate --quiet --fail-under 95 src tests\n\nor use it with `pre-commit <https://pre-commit.com/>`_:\n\n.. code-block:: yaml\n\n    repos:\n      - repo: https://github.com/econchick/interrogate\n        rev: 1.5.0  # or master if you're bold\n        hooks:\n          - id: interrogate\n            args: [--quiet, --fail-under=95]\n\nuse it within your code directly:\n\n.. code-block:: pycon\n\n    >>> from interrogate import coverage\n    >>> cov = coverage.interrogatecoverage(paths=[\"src\"])\n    >>> results = cov.get_coverage()\n    >>> results\n    interrogateresults(total=68, covered=65, missing=3)\n\n\nuse ``interrogate`` with `github actions <https://github.com/features/actions>`_. check out the `action <https://github.com/marketplace/actions/python-interrogate-check>`_ written & maintained by `jack mckew <https://github.com/jackmckew>`_ (thank you, jack!).\n\n\nconfiguration\n=============\n\nconfigure within your ``pyproject.toml`` (``interrogate`` will automatically detect a ``pyproject.toml`` file and pick up default values for the command line options):\n\n.. code-block:: console\n\n    $ interrogate -c pyproject.toml [options] [paths]...\n\n.. code-block:: toml\n\n    [tool.interrogate]\n    ignore-init-method = true\n    ignore-init-module = false\n    ignore-magic = false\n    ignore-semiprivate = false\n    ignore-private = false\n    ignore-property-decorators = false\n    ignore-module = false\n    ignore-nested-functions = false\n    ignore-nested-classes = true\n    ignore-setters = false\n    fail-under = 95\n    exclude = [\"setup.py\", \"docs\", \"build\"]\n    ignore-regex = [\"^get$\", \"^mock_.*\", \".*baseclass.*\"]\n    # possible values: 0 (minimal output), 1 (-v), 2 (-vv)\n    verbose = 0\n    quiet = false\n    whitelist-regex = []\n    color = true\n    omit-covered-files = false\n    generate-badge = \".\"\n    badge-format = \"svg\"\n\n\nor configure within your ``setup.cfg`` (``interrogate`` will automatically detect a ``setup.cfg`` file and pick up default values for the command line options):\n\n.. code-block:: console\n\n    $ interrogate -c setup.cfg [options] [paths]...\n\n.. code-block:: ini\n\n    [tool:interrogate]\n    ignore-init-method = true\n    ignore-init-module = false\n    ignore-magic = false\n    ignore-semiprivate = false\n    ignore-private = false\n    ignore-property-decorators = false\n    ignore-module = false\n    ignore-nested-functions = false\n    ignore-nested-classes = true\n    ignore-setters = false\n    fail-under = 95\n    exclude = setup.py,docs,build\n    ignore-regex = ^get$,^mock_.*,.*baseclass.*\n    ; possible values: 0 (minimal output), 1 (-v), 2 (-vv)\n    verbose = 0\n    quiet = false\n    whitelist-regex =\n    color = true\n    omit-covered-files = false\n    generate-badge = .\n    badge-format = svg\n\n\n.. warning::\n\n    the use of ``setup.cfg`` is not recommended unless for very simple use cases. ``.cfg`` files use a different parser than ``pyproject.toml`` which might cause hard to track down problems. when possible, it is recommended to use ``pyproject.toml`` to define your interrogate configuration.\n\n.. _badge-opts:\n\nbadge options\n=============\n\nbadge format\n------------\n\nthe default file format is ``svg``. use the ``--badge-format`` flag to create a ``png`` file instead.\n**note**: ``interrogate`` must be installed with ``interrogate[png]`` in order to generate ``png`` files (see `above <#extras>`_).\n\n.. code-block:: console\n\n    $ interrogate --generate-badge path --badge-format png\n    result: passed (minimum: 80.0%, actual: 100.0%)\n    generated badge to /users/lynn/dev/interrogate/docs/_static/interrogate_badge.png\n\nbadge style\n-----------\n\nthe following badge styles are available via the ``--badge-style`` flag:\n\n+------------------------------------+--------------------------------+\n| option                             | example                        |\n+====================================+================================+\n| ``flat``                           | |flat-example|                 |\n+------------------------------------+--------------------------------+\n| ``flat-square``                    | |flat-square-example|          |\n+------------------------------------+--------------------------------+\n| ``flat-square-modified`` (default) | |interrogate-badge|            |\n+------------------------------------+--------------------------------+\n| ``for-the-badge``                  | |for-the-badge-example|        |\n+------------------------------------+--------------------------------+\n| ``plastic``                        | |plastic-example|              |\n+------------------------------------+--------------------------------+\n| ``social``                         | |social-example|               |\n+------------------------------------+--------------------------------+\n\n.. end-readme\n\nto view all options available, run ``interrogate --help``:\n\n.. code-block:: console\n\n    interrogate -h\n    usage: interrogate [options] [paths]...\n\n      measure and report on documentation coverage in python modules.\n\n    options:\n      --version                       show the version and exit.\n      -v, --verbose                   level of verbosity.\n\n                                      note: when configuring verbosity in\n                                      pyproject.toml or setup.cfg, `verbose=1`\n                                      maps to `-v`, and `verbose=2` maps to `-vv`.\n                                      `verbose=0` is the equivalent of no verbose\n                                      flags used, producing minimal output.\n      -q, --quiet                     do not print output  [default: false]\n      -f, --fail-under int | float    fail when coverage % is less than a given\n                                      amount.  [default: 80.0]\n\n      -e, --exclude path              exclude paths of files and/or directories.\n                                      multiple `-e/--exclude` invocations\n                                      supported.\n\n      -i, --ignore-init-method        ignore `__init__` method of classes.\n                                      [default: false]\n\n      -i, --ignore-init-module        ignore `__init__.py` modules.  [default:\n                                      false]\n\n      -m, --ignore-magic              ignore all magic methods of classes.\n                                      [default: false]\n\n                                      note: this does not include the `__init__`\n                                      method. to ignore `__init__` methods, use\n                                      `--ignore-init-method`.\n\n      -m, --ignore-module             ignore module-level docstrings.  [default:\n                                      false]\n\n      -n, --ignore-nested-functions   ignore nested functions and methods.\n                                      [default: false]\n\n      -c, --ignore-nested-classes     ignore nested classes.  [default: false]\n\n      -p, --ignore-private            ignore private classes, methods, and\n                                      functions starting with two underscores.\n                                      [default: false]\n\n                                      note: this does not include magic methods;\n                                      use `--ignore-magic` and/or `--ignore-init-\n                                      method` instead.\n\n      -p, --ignore-property-decorators\n                                      ignore methods with property setter/getter\n                                      decorators.  [default: false]\n\n      -s, --ignore-setters            ignore methods with property setter\n                                      decorators.  [default: false]\n\n      -s, --ignore-semiprivate        ignore semiprivate classes, methods, and\n                                      functions starting with a single underscore.\n                                      [default: false]\n\n      -r, --ignore-regex str          regex identifying class, method, and\n                                      function names to ignore. multiple\n                                      `-r/--ignore-regex` invocations supported.\n\n      -w, --whitelist-regex str       regex identifying class, method, and\n                                      function names to include. multiple\n                                      `-w/--whitelist-regex` invocations\n                                      supported.\n\n      -o, --output file               write output to a given file.  [default:\n                                      stdout]\n\n      --color / --no-color            toggle color output on/off when printing to\n                                      stdout.  [default: true]\n\n      --omit-covered-files            omit reporting files that have 100%\n                                      documentation coverage. this option is\n                                      ignored if verbosity is not set.  [default:\n                                      false]\n\n      -g, --generate-badge path       generate a 'shields.io' status badge (an svg\n                                      image) in at a given file or directory. will\n                                      not generate a badge if results did not\n                                      change from an existing badge of the same\n                                      path.\n\n      --badge-format [svg|png]        file format for the generated badge. used\n                                      with the `-g/--generate-badge` flag.\n                                      [default: svg]\n\n                                      note: to generate a png file, interrogate\n                                      must be installed with `interrogate[png]`,\n                                      i.e. `pip install interrogate[png]`.\n\n      --badge-style [flat|flat-square|flat-square-modified|for-the-badge|plastic|social]\n                                      desired style of shields.io badge. used with\n                                      the `-g/--generate-badge` flag. [default:\n                                      flat-square-modified]\n\n      -h, --help                      show this message and exit.\n      -c, --config file               read configuration from `pyproject.toml` or\n                                      `setup.cfg`.\n\n\n.. start-uses-this\n\nusers of interrogate\n====================\n\n* `attrs <https://github.com/python-attrs/attrs>`_\n* `openmmlab <https://github.com/open-mmlab>`_'s ecosystem\n* `pyjanitor <https://github.com/ericmjl/pyjanitor>`_\n* `klio <https://github.com/spotify/klio>`_\n\ninterrogate in the wild\n-----------------------\n\n* `why you should document your tests <https://hynek.me/articles/document-your-tests/>`_ by `hynek schlawack <https://twitter.com/hynek>`_\n* `episode #181: it's time to interrogate your python code <https://pythonbytes.fm/episodes/show/181/it-s-time-to-interrogate-your-python-code>`_ - `pythonbytes podcast <https://pythonbytes.fm/>`_\n\n.. end-uses-this\n\n.. start-credits\n\ncredits\n=======\n\n.. role:: smol\n\n``interrogate`` was inspired by |docstr-coverage|_, which was forked from alexey \"datagreed\" strelkov's |docstring-coverage|_, which was inspired by a 2004 `recipe from james harlow <http://code.activestate.com/recipes/355731/>`_ :smol:`(turtles...)`.\n\nthe cute |sloth| logo is by `justinew <https://thenounproject.com/wojcik.justine/>`_ purchased via `the noun project <https://thenounproject.com/>`_ (but also available under the `creative commons license <https://creativecommons.org/licenses/by/3.0/us/legalcode>`_ with attribution).\n\n\n.. |interrogate-badge|  image:: https://interrogate.readthedocs.io/en/latest/_static/interrogate_badge.svg\n.. |flat-example| image:: https://interrogate.readthedocs.io/en/latest/_static/badge_examples/interrogate_badge_f.svg\n.. |flat-square-example| image:: https://interrogate.readthedocs.io/en/latest/_static/badge_examples/interrogate_badge_fs.svg\n.. |for-the-badge-example| image:: https://interrogate.readthedocs.io/en/latest/_static/badge_examples/interrogate_badge_ftb.svg\n.. |plastic-example| image:: https://interrogate.readthedocs.io/en/latest/_static/badge_examples/interrogate_badge_p.svg\n.. |social-example| image:: https://interrogate.readthedocs.io/en/latest/_static/badge_examples/interrogate_badge_s.svg\n.. |sloth| image:: https://interrogate.readthedocs.io/en/latest/_static/logo_smol.png\n\n.. |docstr-coverage| replace:: ``docstr-coverage``\n.. _docstr-coverage: https://pypi.org/project/docstr-coverage\n.. |docstring-coverage| replace:: ``docstring-coverage``\n.. _docstring-coverage: https://bitbucket.org/datagreed/docstring-coverage\n\n.. end-credits\n\nrelease information\n===================\n\n1.5.0 (2021-09-10)\n------------------\n\nadded\n^^^^^\n\n* set minimum ``click`` version (thank you bildzeitung! `#81 <https://github.com/econchick/interrogate/issues/81>`_, `#82 <https://github.com/econchick/interrogate/pull/82>`_).\n* add ``--omit-covered-files`` flag to skip reporting fully-covered files (`#85 <https://github.com/econchick/interrogate/issues/85>`_).\n* add support for different badge styles via new ``--badge-style`` flag (`#86 <https://github.com/econchick/interrogate/issues/86>`_).\n* add 3.10 support!\n\nfixed\n^^^^^\n* clarify ``verbose`` configuration (`#83 <https://github.com/econchick/interrogate/issues/83>`_).\n\n\n`full changelog <https://interrogate.readthedocs.io/en/latest/#changelog>`_.\n\n",
  "docs_url": null,
  "keywords": "documentation,coverage,quality",
  "license": "",
  "name": "interrogate",
  "package_url": "https://pypi.org/project/interrogate/",
  "project_url": "https://pypi.org/project/interrogate/",
  "project_urls": {
    "Bug Tracker": "https://github.com/econchick/interrogate/issues",
    "Documentation": "https://interrogate.readthedocs.io",
    "Homepage": "https://interrogate.readthedocs.io",
    "Source Code": "https://github.com/econchick/interrogate"
  },
  "release_url": "https://pypi.org/project/interrogate/1.5.0/",
  "requires_dist": [
    "attrs",
    "click (>=7.1)",
    "colorama",
    "py",
    "tabulate",
    "toml",
    "cairosvg ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-autobuild ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-mock ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "sphinx ; extra == 'docs'",
    "sphinx-autobuild ; extra == 'docs'",
    "cairosvg ; extra == 'png'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pytest-mock ; extra == 'tests'"
  ],
  "requires_python": ">=3.6",
  "summary": "interrogate a codebase for docstring coverage.",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "lynn@lynnroot.com",
    "lynn_root"
  ],
  "kwds": "interrogate_badge interrogate_badge_f interrogate_badge_s interrogate_badge_fs interrogate_badge_p",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_interrogate",
  "homepage": "https://interrogate.readthedocs.io",
  "release_count": 14,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_cairosvg",
    "pypi_click",
    "pypi_colorama",
    "pypi_pre_commit",
    "pypi_py",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_sphinx",
    "pypi_sphinx_autobuild",
    "pypi_tabulate",
    "pypi_toml",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: the unlicense (unlicense)",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: security",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. vim: tw=80 lbr\n\ndjango-otp\n==========\n\n.. image:: https://img.shields.io/pypi/v/django-otp?color=blue\n   :target: https://pypi.org/project/django-otp/\n   :alt: pypi\n.. image:: https://img.shields.io/readthedocs/django-otp-official\n   :target: https://django-otp-official.readthedocs.io/\n   :alt: documentation\n.. image:: https://img.shields.io/badge/github-django--otp-green\n   :target: https://github.com/django-otp/django-otp\n   :alt: source\n\nthis project makes it easy to add support for `one-time passwords\n<http://en.wikipedia.org/wiki/one-time_password>`_ (otps) to django. it can be\nintegrated at various levels, depending on how much customization is required.\nit integrates with ``django.contrib.auth``, although it is not a django\nauthentication backend. the primary target is developers wishing to incorporate\notps into their django projects as a form of `two-factor authentication\n<http://en.wikipedia.org/wiki/two-factor_authentication>`_.\n\nseveral simple otp plugins are included and more are available separately. this\npackage also includes an implementation of oath `hotp\n<http://tools.ietf.org/html/rfc4226>`_ and `totp\n<http://tools.ietf.org/html/rfc6238>`_ for convenience, as these are standard\notp algorithms used by multiple plugins.\n\nif you're looking for a higher-level or more opinionated solution, you might be\ninterested in `django-two-factor-auth\n<https://github.com/bouke/django-two-factor-auth>`_.\n\nstatus\n------\n\nthis project is stable and maintained, but is no longer actively used by the\nauthor and is not seeing much ongoing investment.\n\nwell-formed issues and pull requests are welcome, but please see\ncontributing.rst first. general questions and ideas should be directed to the\ndiscussions section; issues should be reserved for confirmed bugs.\n\n.. end-of-doc-intro\n\n\ndevelopment\n-----------\n\nthis project is built and managed with `hatch`_. if you don't have hatch, i\nrecommend installing it with `pipx`_: ``pipx install hatch``.\n\n``pyproject.toml`` defines several useful scripts for development and testing.\nthe default environment includes all dev and test dependencies for quickly\nrunning tests. the ``test`` environment defines the test matrix for running the\nfull validation suite. everything is executed in the context of the django\nproject in test/test\\_project.\n\nas a quick primer, hatch scripts can be run with ``hatch run [<env>:]<script>``.\nto run linters and tests in the default environment, just run\n``hatch run check``. this should run tests with your default python version and\nthe latest django. other scripts include:\n\n* **manage**: run a management command via the test project. this can be used to\n  generate migrations.\n* **lint**: run all linters.\n* **fix**: run all fixers to address linting issues. this may not fix every\n  issue reported by lint.\n* **test**: run all tests.\n* **check**: run linters and tests.\n* **warn**: run tests with all warnings enabled. this is especially useful for\n  seeing deprecation warnings in new versions of django.\n* **cov**: run tests and print a code coverage report.\n\nto run the full test matrix, run ``hatch run test:run``. you will need multiple\nspecific python versions installed for this.\n\nyou can clean up the hatch environments with ``hatch env prune``, for example to\nforce dependency updates.\n\nthe project under ``test`` can be run as a simple interactive test environment.\nrun ``hatch run manage runserver`` and open it in a browser. this has an\nimplementation of the login form and views with different combinations of\ndecorators, which you can experiment with or use to test changes.\n\nconfiguration\n~~~~~~~~~~~~~\n\nby default, the test project uses sqlite. because sqlite doesn't support row\nlocking, some concurrency tests will be skipped. to test against postgresql, you\ncan add a local configuration file that points to your database.\n\nconfiguration is taken from toml files stored under ``test/config``. a config\nfile named ``env-<env-name>.toml`` will be automatically applied when running\ninside a matching hatch environment. for example, ``env-default.toml`` applies\nto the default development environment and ``env-test.toml`` applies to the test\nmatrix environments.\n\nwith a wide-open postgresql install, an ``env-test.toml`` might look like this:\n\n.. code-block:: toml\n\n   [database]\n   engine = \"django.db.backends.postgresql\"\n   name = \"django-otp\"\n   user = \"postgres\"\n\nfor development, the config file can also be used to inject django apps and\nmiddleware, or to override arbitrary django settings. see\n``test/config/sample.toml`` for a full description.\n\nyou can also force a specific config file by setting the environment variable\n``django_otp_config`` to a path.\n\n\nthe future\n----------\n\nonce upon a time, everything was usernames and passwords. or even in the case of\nother authentication mechanisms, a user was either authenticated or not\n(anonymous in django's terminology). then there was two-factor authentication,\nwhich could simply be an implementation detail in a binary authentication state,\nbut could also imply levels or degrees of authentication.\n\nthese days, it's increasingly common to see sites with more nuanced\nauthentication state. a site might remember who you are forever\u2014so you're not\nanonymous\u2014but if you try to do anything private, you have to re-authenticate.\nyou may be able to choose from among all of the authentication mechanisms you\nhave configured, or only from some of them. specific mechanisms may be required\nfor specific actions, such as using your u2f device to access your u2f settings.\n\nin short, the world seems to be moving beyond the assumptions that originally\ninformed django's essential authentication design. if i were still investing in\ndjango generally, i would probably start a new multi-factor authentication\nproject that would reflect these changes. it would incorporate the idea that a\nuser may be authenticated by various combinations of mechanisms at any time and\nthat different combinations may be required to satisfy diverse authorization\nrequirements across the site. it would most likely try to disentangle\nauthentication persistence from sessions, at least to some extent. many sites\nwould not require all of this flexibility, but it would open up possibilities\nfor better experiences by not asking users for more than we require at any\npoint.\n\nif anyone has a mind to take on a project like this, i'd be happy to offer\nwhatever advice or lessons learned that i can.\n\n\n.. _hatch: https://hatch.pypa.io/\n.. _pipx: https://pypa.github.io/pipx/\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "django-otp",
  "package_url": "https://pypi.org/project/django-otp/",
  "project_url": "https://pypi.org/project/django-otp/",
  "project_urls": {
    "Documentation": "https://django-otp-official.readthedocs.io/",
    "Homepage": "https://github.com/django-otp/django-otp"
  },
  "release_url": "https://pypi.org/project/django-otp/1.3.0/",
  "requires_dist": [
    "django>=3.2",
    "qrcode; extra == 'qrcode'"
  ],
  "requires_python": ">=3.7",
  "summary": "a pluggable framework for adding two-factor authentication to django using one-time passwords.",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "psagers@ignorare.net"
  ],
  "kwds": "django_otp_config django time_password passwords otp",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_otp",
  "homepage": "",
  "release_count": 73,
  "dependency_ids": [
    "pypi_django",
    "pypi_qrcode"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: c",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://github.com/amitdev/lru-dict/actions/workflows/tests.yml/badge.svg\n    :target: https://github.com/amitdev/lru-dict/actions/workflows/tests.yml\n\n.. image:: https://github.com/amitdev/lru-dict/actions/workflows/build-and-deploy.yml/badge.svg\n    :target: https://github.com/amitdev/lru-dict/actions/workflows/build-and-deploy.yml\n\nlru dict\n========\n\na fixed size dict like container which evicts least recently used (lru) items\nonce size limit is exceeded. there are many python implementations available\nwhich does similar things. this is a fast and efficient c implementation.\nlru maximum capacity can be modified at run-time.\nif you are looking for pure python version, look `else where <http://www.google.com/search?q=python+lru+dict>`_.\n\nusage\n=====\n\nthis can be used to build a lru cache. usage is almost like a dict.\n\n.. code:: python\n\n  from lru import lru\n  l = lru(5)         # create an lru container that can hold 5 items\n\n  print l.peek_first_item(), l.peek_last_item()  #return the mru key and lru key\n  # would print none none\n\n  for i in range(5):\n     l[i] = str(i)\n  print l.items()    # prints items in mru order\n  # would print [(4, '4'), (3, '3'), (2, '2'), (1, '1'), (0, '0')]\n\n  print l.peek_first_item(), l.peek_last_item()  #return the mru key and lru key\n  # would print (4, '4') (0, '0')\n\n  l[5] = '5'         # inserting one more item should evict the old item\n  print l.items()\n  # would print [(5, '5'), (4, '4'), (3, '3'), (2, '2'), (1, '1')]\n\n  l[3]               # accessing an item would make it mru\n  print l.items()\n  # would print [(3, '3'), (5, '5'), (4, '4'), (2, '2'), (1, '1')]\n  # now 3 is in front\n\n  l.keys()           # can get keys alone in mru order\n  # would print [3, 5, 4, 2, 1]\n\n  del l[4]           # delete an item\n  print l.items()\n  # would print [(3, '3'), (5, '5'), (2, '2'), (1, '1')]\n\n  print l.get_size()\n  # would print 5\n\n  l.set_size(3)\n  print l.items()\n  # would print [(3, '3'), (5, '5'), (2, '2')]\n  print l.get_size()\n  # would print 3\n  print l.has_key(5)\n  # would print true\n  print 2 in l\n  # would print true\n\n  l.get_stats()\n  # would print (1, 0)\n\n\n  l.update(5='0')           # update an item\n  print l.items()\n  # would print [(5, '0'), (3, '3'), (2, '2')]\n\n  l.clear()\n  print l.items()\n  # would print []\n\n  def evicted(key, value):\n    print \"removing: %s, %s\" % (key, value)\n\n  l = lru(1, callback=evicted)\n\n  l[1] = '1'\n  l[2] = '2'\n  # callback would print removing: 1, 1\n\n  l[2] = '3'\n  # doesn't call the evicted callback\n\n  print l.items()\n  # would print [(2, '3')]\n  \n  del l[2]\n  # doesn't call the evicted callback\n\n  print l.items()\n  # would print []\n\ninstall\n=======\n\n::\n\n  pip install lru-dict\n\nor\n\n::\n\n  easy_install lru_dict\n\n\nwhen to use this\n================\n\nlike mentioned above there are many python implementations of an lru. use this\nif you need a faster and memory efficient alternative. it is implemented with a\ndict and associated linked list to keep track of lru order. see code for a more\ndetailed explanation. to see an indicative comparison with a pure python module,\nconsider a `benchmark <https://gist.github.com/amitdev/5773979>`_ against\n`pylru <https://pypi.python.org/pypi/pylru/>`_ (just chosen at random, it should\nbe similar with other python implementations as well).\n\n::\n\n  $ python bench.py pylru.lrucache\n  time : 3.31 s, memory : 453672 kb\n  $ python bench.py lru.lru\n  time : 0.23 s, memory : 124328 kb\n",
  "docs_url": null,
  "keywords": "lru,dict",
  "license": "mit",
  "name": "lru-dict",
  "package_url": "https://pypi.org/project/lru-dict/",
  "project_url": "https://pypi.org/project/lru-dict/",
  "project_urls": {
    "Homepage": "https://github.com/amitdev/lru-dict"
  },
  "release_url": "https://pypi.org/project/lru-dict/1.3.0/",
  "requires_dist": [
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "an dict like lru container.",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "amit_dev"
  ],
  "kwds": "lru_dict workflows lru dict yml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_lru_dict",
  "homepage": "",
  "release_count": 12,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "face recognition\n================\n\n| recognize and manipulate faces from python or from the command line\n  with\n| the world's simplest face recognition library.\n\n| built using `dlib <http://dlib.net/>`__'s state-of-the-art face\n  recognition\n| built with deep learning. the model has an accuracy of 99.38% on the\n| `labeled faces in the wild <http://vis-www.cs.umass.edu/lfw/>`__\n  benchmark.\n\n| this also provides a simple ``face_recognition`` command line tool\n  that lets\n| you do face recognition on a folder of images from the command line!\n\n| |pypi|\n| |build status|\n| |documentation status|\n\nfeatures\n--------\n\nfind faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^\n\nfind all the faces that appear in a picture:\n\n|image3|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\nfind and manipulate facial features in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nget the locations and outlines of each person's eyes, nose, mouth and\nchin.\n\n|image4|\n\n.. code:: python\n\n    import face_recognition\n    image = face_recognition.load_image_file(\"your_file.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n| finding facial features is super useful for lots of important stuff.\n  but you can also use for really stupid stuff\n| like applying `digital\n  make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n  (think 'meitu'):\n\n|image5|\n\nidentify faces in pictures\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nrecognize who appears in each photo.\n\n|image6|\n\n.. code:: python\n\n    import face_recognition\n    known_image = face_recognition.load_image_file(\"biden.jpg\")\n    unknown_image = face_recognition.load_image_file(\"unknown.jpg\")\n\n    biden_encoding = face_recognition.face_encodings(known_image)[0]\n    unknown_encoding = face_recognition.face_encodings(unknown_image)[0]\n\n    results = face_recognition.compare_faces([biden_encoding], unknown_encoding)\n\nyou can even use this library with other python libraries to do\nreal-time face recognition:\n\n|image7|\n\nsee `this\nexample <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\nfor the code.\n\ninstallation\n------------\n\nrequirements\n^^^^^^^^^^^^\n\n-  python 3.3+ or python 2.7\n-  macos or linux (windows not officially supported, but might work)\n\ninstalling on mac or linux\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nfirst, make sure you have dlib already installed with python bindings:\n\n-  `how to install dlib from source on macos or\n   ubuntu <https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf>`__\n\nthen, install this module from pypi using ``pip3`` (or ``pip2`` for\npython 2):\n\n.. code:: bash\n\n    pip3 install face_recognition\n\n| if you are having trouble with installation, you can also try out a\n| `pre-configured\n  vm <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__.\n\ninstalling on raspberry pi 2+\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  `raspberry pi 2+ installation\n   instructions <https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65>`__\n\ninstalling on windows\n^^^^^^^^^^^^^^^^^^^^^\n\nwhile windows isn't officially supported, helpful users have posted\ninstructions on how to install this library:\n\n-  `@masoudr's windows 10 installation guide (dlib +\n   face\\_recognition) <https://github.com/ageitgey/face_recognition/issues/175#issue-257710508>`__\n\ninstalling a pre-configured virtual machine image\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  `download the pre-configured vm\n   image <https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b>`__\n   (for vmware player or virtualbox).\n\nusage\n-----\n\ncommand-line interface\n^^^^^^^^^^^^^^^^^^^^^^\n\n| when you install ``face_recognition``, you get a simple command-line\n  program\n| called ``face_recognition`` that you can use to recognize faces in a\n| photograph or folder full for photographs.\n\n| first, you need to provide a folder with one picture of each person\n  you\n| already know. there should be one image file for each person with the\n| files named according to who is in the picture:\n\n|known|\n\nnext, you need a second folder with the files you want to identify:\n\n|unknown|\n\n| then in you simply run the command ``face_recognition``, passing in\n| the folder of known people and the folder (or single image) with\n  unknown\n| people and it tells you who is in each image:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,barack obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| there's one line in the output for each face. the data is\n  comma-separated\n| with the filename and the name of the person found.\n\n| an ``unknown_person`` is a face in the image that didn't match anyone\n  in\n| your folder of known people.\n\nadjusting tolerance / sensitivity\n'''''''''''''''''''''''''''''''''\n\n| if you are getting multiple matches for the same person, it might be\n  that\n| the people in your photos look very similar and a lower tolerance\n  value\n| is needed to make face comparisons more strict.\n\n| you can do that with the ``--tolerance`` parameter. the default\n  tolerance\n| value is 0.6 and lower numbers make face comparisons more strict:\n\n.. code:: bash\n\n    $ face_recognition --tolerance 0.54 ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,barack obama\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person\n\n| if you want to see the face distance calculated for each match in\n  order\n| to adjust the tolerance setting, you can use ``--show-distance true``:\n\n.. code:: bash\n\n    $ face_recognition --show-distance true ./pictures_of_people_i_know/ ./unknown_pictures/\n\n    /unknown_pictures/unknown.jpg,barack obama,0.378542298956785\n    /face_recognition_test/unknown_pictures/unknown.jpg,unknown_person,none\n\nmore examples\n'''''''''''''\n\n| if you simply want to know the names of the people in each photograph\n  but don't\n| care about file names, you could do this:\n\n.. code:: bash\n\n    $ face_recognition ./pictures_of_people_i_know/ ./unknown_pictures/ | cut -d ',' -f2\n\n    barack obama\n    unknown_person\n\nspeeding up face recognition\n''''''''''''''''''''''''''''\n\n| face recognition can be done in parallel if you have a computer with\n| multiple cpu cores. for example if your system has 4 cpu cores, you\n  can\n| process about 4 times as many images in the same amount of time by\n  using\n| all your cpu cores in parallel.\n\nif you are using python 3.4 or newer, pass in a\n``--cpus <number_of_cpu_cores_to_use>`` parameter:\n\n.. code:: bash\n\n    $ face_recognition --cpus 4 ./pictures_of_people_i_know/ ./unknown_pictures/\n\nyou can also pass in ``--cpus -1`` to use all cpu cores in your system.\n\npython module\n^^^^^^^^^^^^^\n\n| you can import the ``face_recognition`` module and then easily\n  manipulate\n| faces with just a couple of lines of code. it's super easy!\n\napi docs:\n`https://face-recognition.readthedocs.io <https://face-recognition.readthedocs.io/en/latest/face_recognition.html>`__.\n\nautomatically find all the faces in an image\n''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image)\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| see `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n| to try it out.\n\nyou can also opt-in to a somewhat more accurate deep-learning-based face\ndetection model.\n\n| note: gpu acceleration (via nvidia's cuda library) is required for\n  good\n| performance with this model. you'll also want to enable cuda support\n| when compliling ``dlib``.\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_locations = face_recognition.face_locations(image, model=\"cnn\")\n\n    # face_locations is now an array listing the co-ordinates of each face!\n\n| see `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n| to try it out.\n\n| if you have a lot of images and a gpu, you can also\n| `find faces in\n  batches <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__.\n\nautomatically locate the facial features of a person in an image\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    image = face_recognition.load_image_file(\"my_picture.jpg\")\n    face_landmarks_list = face_recognition.face_landmarks(image)\n\n    # face_landmarks_list is now an array with the locations of each facial feature in each face.\n    # face_landmarks_list[0]['left_eye'] would be the location and outline of the first person's left eye.\n\n| see `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n| to try it out.\n\nrecognize faces in images and identify who they are\n'''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    import face_recognition\n\n    picture_of_me = face_recognition.load_image_file(\"me.jpg\")\n    my_face_encoding = face_recognition.face_encodings(picture_of_me)[0]\n\n    # my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!\n\n    unknown_picture = face_recognition.load_image_file(\"unknown.jpg\")\n    unknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]\n\n    # now we can see the two face encodings are of the same person with `compare_faces`!\n\n    results = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)\n\n    if results[0] == true:\n        print(\"it's a picture of me!\")\n    else:\n        print(\"it's not a picture of me!\")\n\n| see `this\n  example <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n| to try it out.\n\npython code examples\n--------------------\n\nall the examples are available\n`here <https://github.com/ageitgey/face_recognition/tree/master/examples>`__.\n\nface detection\n^^^^^^^^^^^^^^\n\n-  `find faces in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture.py>`__\n-  `find faces in a photograph (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py>`__\n-  `find faces in batches of images w/ gpu (using deep\n   learning) <https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py>`__\n\nfacial features\n^^^^^^^^^^^^^^^\n\n-  `identify specific facial features in a\n   photograph <https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py>`__\n-  `apply (horribly ugly) digital\n   make-up <https://github.com/ageitgey/face_recognition/blob/master/examples/digital_makeup.py>`__\n\nfacial recognition\n^^^^^^^^^^^^^^^^^^\n\n-  `find and recognize unknown faces in a photograph based on\n   photographs of known\n   people <https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py>`__\n-  `compare faces by numeric face distance instead of only true/false\n   matches <https://github.com/ageitgey/face_recognition/blob/master/examples/face_distance.py>`__\n-  `recognize faces in live video using your webcam - simple / slower\n   version (requires opencv to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam.py>`__\n-  `recognize faces in live video using your webcam - faster version\n   (requires opencv to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py>`__\n-  `recognize faces in a video file and write out new video file\n   (requires opencv to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_video_file.py>`__\n-  `recognize faces on a raspberry pi w/\n   camera <https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_on_raspberry_pi.py>`__\n-  `run a web service to recognize faces via http (requires flask to be\n   installed) <https://github.com/ageitgey/face_recognition/blob/master/examples/web_service_example.py>`__\n-  `recognize faces with a k-nearest neighbors\n   classifier <https://github.com/ageitgey/face_recognition/blob/master/examples/face_recognition_knn.py>`__\n\n   .. rubric:: how face recognition works\n      :name: how-face-recognition-works\n\n| if you want to learn how face location and recognition work instead of\n| depending on a black box library, `read my\n  article <https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78>`__.\n\ncaveats\n-------\n\n-  the face recognition model is trained on adults and does not work\n   very well on children. it tends to mix\n   up children quite easy using the default comparison threshold of 0.6.\n\ndeployment to cloud hosts (heroku, aws, etc)\n--------------------------------------------\n\n| since ``face_recognition`` depends on ``dlib`` which is written in\n  c++, it can be tricky to deploy an app\n| using it to a cloud hosting provider like heroku or aws.\n\n| to make things easier, there's an example dockerfile in this repo that\n  shows how to run an app built with\n| ``face_recognition`` in a `docker <https://www.docker.com/>`__\n  container. with that, you should be able to deploy\n| to any service that supports docker images.\n\ncommon issues\n-------------\n\nissue: ``illegal instruction (core dumped)`` when using\nface\\_recognition or running examples.\n\n| solution: ``dlib`` is compiled with sse4 or avx support, but your cpu\n  is too old and doesn't support that.\n| you'll need to recompile ``dlib`` after `making the code change\n  outlined\n  here <https://github.com/ageitgey/face_recognition/issues/11#issuecomment-287398611>`__.\n\nissue:\n``runtimeerror: unsupported image type, must be 8bit gray or rgb image.``\nwhen running the webcam examples.\n\nsolution: your webcam probably isn't set up correctly with opencv. `look\nhere for\nmore <https://github.com/ageitgey/face_recognition/issues/21#issuecomment-287779524>`__.\n\nissue: ``memoryerror`` when running ``pip2 install face_recognition``\n\n| solution: the face\\_recognition\\_models file is too big for your\n  available pip cache memory. instead,\n| try ``pip2 --no-cache-dir install face_recognition`` to avoid the\n  issue.\n\nissue:\n``attributeerror: 'module' object has no attribute 'face_recognition_model_v1'``\n\nsolution: the version of ``dlib`` you have installed is too old. you\nneed version 19.7 or newer. upgrade ``dlib``.\n\nissue:\n``attribute error: 'module' object has no attribute 'cnn_face_detection_model_v1'``\n\nsolution: the version of ``dlib`` you have installed is too old. you\nneed version 19.7 or newer. upgrade ``dlib``.\n\nissue: ``typeerror: imread() got an unexpected keyword argument 'mode'``\n\nsolution: the version of ``scipy`` you have installed is too old. you\nneed version 0.17 or newer. upgrade ``scipy``.\n\nthanks\n------\n\n-  many, many thanks to `davis king <https://github.com/davisking>`__\n   (`@nulhom <https://twitter.com/nulhom>`__)\n   for creating dlib and for providing the trained facial feature\n   detection and face encoding models\n   used in this library. for more information on the resnet that powers\n   the face encodings, check out\n   his `blog\n   post <http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html>`__.\n-  thanks to everyone who works on all the awesome python data science\n   libraries like numpy, scipy, scikit-image,\n   pillow, etc, etc that makes this kind of stuff so easy and fun in\n   python.\n-  thanks to `cookiecutter <https://github.com/audreyr/cookiecutter>`__\n   and the\n   `audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage>`__\n   project template\n   for making python project packaging way more tolerable.\n\n.. |pypi| image:: https://img.shields.io/pypi/v/face_recognition.svg\n   :target: https://pypi.python.org/pypi/face_recognition\n.. |build status| image:: https://travis-ci.org/ageitgey/face_recognition.svg?branch=master\n   :target: https://travis-ci.org/ageitgey/face_recognition\n.. |documentation status| image:: https://readthedocs.org/projects/face-recognition/badge/?version=latest\n   :target: http://face-recognition.readthedocs.io/en/latest/?badge=latest\n.. |image3| image:: https://cloud.githubusercontent.com/assets/896692/23625227/42c65360-025d-11e7-94ea-b12f28cb34b4.png\n.. |image4| image:: https://cloud.githubusercontent.com/assets/896692/23625282/7f2d79dc-025d-11e7-8728-d8924596f8fa.png\n.. |image5| image:: https://cloud.githubusercontent.com/assets/896692/23625283/80638760-025d-11e7-80a2-1d2779f7ccab.png\n.. |image6| image:: https://cloud.githubusercontent.com/assets/896692/23625229/45e049b6-025d-11e7-89cc-8a71cf89e713.png\n.. |image7| image:: https://cloud.githubusercontent.com/assets/896692/24430398/36f0e3f0-13cb-11e7-8258-4d0c9ce1e419.gif\n.. |known| image:: https://cloud.githubusercontent.com/assets/896692/23582466/8324810e-00df-11e7-82cf-41515eba704d.png\n.. |unknown| image:: https://cloud.githubusercontent.com/assets/896692/23582465/81f422f8-00df-11e7-8b0d-75364f641f58.png\n\n\n\nhistory\n=======\n\n1.2.3 (2018-08-21)\n------------------\n\n* you can now pass model=\"small\" to face_landmarks() to use the 5-point face model instead of the 68-point model.\n* now officially supporting python 3.7\n* new example of using this library in a jupyter notebook\n\n1.2.2 (2018-04-02)\n------------------\n\n* added the face_detection cli command\n* removed dependencies on scipy to make installation easier\n* cleaned up knn example and fixed a bug with drawing fonts to label detected faces in the demo\n\n\n1.2.1 (2018-02-01)\n------------------\n\n* fixed version numbering inside of module code.\n\n\n1.2.0 (2018-02-01)\n------------------\n\n* fixed a bug where batch size parameter didn't work correctly when doing batch face detections on gpu.\n* updated opencv examples to do proper bgr -> rgb conversion\n* updated webcam examples to avoid common mistakes and reduce support questions\n* added a knn classification example\n* added an example of automatically blurring faces in images or videos\n* updated dockerfile example to use dlib v19.9 which removes the boost dependency.\n\n\n1.1.0 (2017-09-23)\n------------------\n\n* will use dlib's 5-point face pose estimator when possible for speed (instead of 68-point face pose esimator)\n* dlib v19.7 is now the minimum required version\n* face_recognition_models v0.3.0 is now the minimum required version\n\n\n1.0.0 (2017-08-29)\n------------------\n\n* added support for dlib's cnn face detection model via model=\"cnn\" parameter on face detecion call\n* added support for gpu batched face detections using dlib's cnn face detector model\n* added find_faces_in_picture_cnn.py to examples\n* added find_faces_in_batches.py to examples\n* added face_rec_from_video_file.py to examples\n* dlib v19.5 is now the minimum required version\n* face_recognition_models v0.2.0 is now the minimum required version\n\n\n0.2.2 (2017-07-07)\n------------------\n\n* added --show-distance to cli\n* fixed a bug where --tolerance was ignored in cli if testing a single image\n* added benchmark.py to examples\n\n\n0.2.1 (2017-07-03)\n------------------\n\n* added --tolerance to cli\n\n\n0.2.0 (2017-06-03)\n------------------\n\n* the cli can now take advantage of multiple cpus. just pass in the -cpus x parameter where x is the number of cpus to use.\n* added face_distance.py example\n* improved cli tests to actually test the cli functionality\n* updated facerec_on_raspberry_pi.py to capture in rgb (not bgr) format.\n\n\n0.1.14 (2017-04-22)\n-------------------\n\n* fixed a valueerror crash when using the cli on python 2.7\n\n\n0.1.13 (2017-04-20)\n-------------------\n\n* raspberry pi support.\n\n\n0.1.12 (2017-04-13)\n-------------------\n\n* fixed: face landmarks wasn't returning all chin points.\n\n\n0.1.11 (2017-03-30)\n-------------------\n\n* fixed a minor bug in the command-line interface.\n\n\n0.1.10 (2017-03-21)\n-------------------\n\n* minor pref improvements with face comparisons.\n* test updates.\n\n\n0.1.9 (2017-03-16)\n------------------\n\n* fix minimum scipy version required.\n\n\n0.1.8 (2017-03-16)\n------------------\n\n* fix missing pillow dependency.\n\n\n0.1.7 (2017-03-13)\n------------------\n\n* first working release.\n\n\n",
  "docs_url": "https://pythonhosted.org/face-recognition/",
  "keywords": "face_recognition",
  "license": "mit license",
  "name": "face-recognition",
  "package_url": "https://pypi.org/project/face-recognition/",
  "project_url": "https://pypi.org/project/face-recognition/",
  "project_urls": {
    "Homepage": "https://github.com/ageitgey/face_recognition"
  },
  "release_url": "https://pypi.org/project/face-recognition/1.3.0/",
  "requires_dist": [
    "face-recognition-models (>=0.3.0)",
    "Click (>=6.0)",
    "dlib (>=19.7)",
    "numpy",
    "Pillow"
  ],
  "requires_python": "",
  "summary": "recognize faces from python or from the command line",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "adam_geitgey",
    "ageitgey@gmail.com"
  ],
  "kwds": "recognize_faces_in_pictures face_recognition face_recognition_models find_faces_in_picture find_facial_features_in_picture",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_face_recognition",
  "homepage": "https://github.com/ageitgey/face_recognition",
  "release_count": 23,
  "dependency_ids": [
    "pypi_click",
    "pypi_dlib",
    "pypi_face_recognition_models",
    "pypi_numpy",
    "pypi_pillow"
  ]
}
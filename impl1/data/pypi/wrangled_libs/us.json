{
  "classifiers": [
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: https://github.com/unitedstates/python-us/workflows/tests/badge.svg\n   :target: https://github.com/unitedstates/python-us/actions\n\nus: the greatest package in the world\n=====================================\n\na package for easily working with us and state metadata.\n\n* all us states and territories\n* postal abbreviations\n* associated press style abbreviations\n* fips codes\n* capitals\n* years of statehood\n* time zones\n* phonetic state name lookup\n* is contiguous or continental\n* urls to shapefiles for state, census, congressional districts,\n  counties, and census tracts\n\n\ninstallation\n------------\n\nas per usual: ::\n\n    pip install us\n\n\nfeatures\n--------\n\neasy access to state information: ::\n\n    >>> import us\n    >>> us.states.md\n    <state:maryland>\n    >>> us.states.md.fips\n    '24'\n    >>> us.states.md.name\n    'maryland'\n    >>> us.states.md.is_contiguous\n    true\n\nincludes territories too: ::\n\n    >>> us.states.vi.name\n    'virgin islands'\n    >>> us.states.vi.is_territory\n    true\n    >>> us.states.md.is_territory\n    false\n\nlist of all (actual) states: ::\n\n    >>> us.states.states\n    [<state:alabama>, <state:alaska>, <state:arizona>, <state:arkansas>, ...\n    >>> us.states.territories\n    [<state:american samoa>, <state:guam>, <state:northern mariana islands>, ...\n\nand the whole shebang, if you want it: ::\n\n    >>> us.states.states_and_territories\n    [<state:alabama>, <state:alaska>, <state:american samoa>, ...\n\nfor convenience, `states`, `territories`, and `states_and_territories` can be\naccessed directly from the `us` module: ::\n\n    >>> us.states.states\n    [<state:alabama>, <state:alaska>, <state:arizona>, <state:arkansas>, ...\n    >>> us.states\n    [<state:alabama>, <state:alaska>, <state:arizona>, <state:arkansas>, ...\n\nsome states like to be fancy and call themselves commonwealths: ::\n\n    >>> us.states.commonwealths\n    [<state:kentucky>, <state:massachusetts>, <state:pennsylvania>, <state:virginia>]\n\nthere's also a list of obsolete territories: ::\n\n    >>> us.states.obsolete\n    [<state:dakota>, <state:orleans>, <state:philippine islands>]\n\nthe state lookup method allows matching by fips code, abbreviation, and name: ::\n\n    >>> us.states.lookup('24')\n    <state:maryland>\n    >>> us.states.lookup('md')\n    <state:maryland>\n    >>> us.states.lookup('md')\n    <state:maryland>\n    >>> us.states.lookup('maryland')\n    <state:maryland>\n\nget useful information: ::\n\n    >>> state = us.states.lookup('maryland')\n    >>> state.abbr\n    'md'\n\n\nand for those days that you just can't remember how to spell mississippi,\nwe've got phonetic name matching too: ::\n\n    >>> us.states.lookup('misisipi')\n    <state:mississippi>\n\n\nshapefiles\n----------\n\nyou want shapefiles too? as long as you want 2010 shapefiles, we've gotcha covered.\n\n::\n\n    >>> urls = us.states.md.shapefile_urls()\n    >>> sorted(urls.keys())\n    ['block', 'blockgroup', 'cd', 'county', 'state', 'tract', 'zcta']\n    >>> urls['block']\n    'https://www2.census.gov/geo/tiger/tiger2010/tabblock/2010/tl_2010_24_tabblock10.zip'\n\nthe `shapefile_urls()` method on the state object generates shapefile urls for\nthe following regions:\n\n* block\n* blockgroup\n* census tract (tract)\n* congressional district (cd)\n* county\n* state\n* zcta\n\n\nmappings\n--------\n\nmappings between various state attributes are a common need. the `mapping()`\nmethod will generate a lookup between two specified fields.\n\n::\n\n    >>> us.states.mapping('fips', 'abbr')\n    {'01': 'al', '02': 'ak', '04': 'az', '05': 'ar', '06': 'ca', ...\n    >>> us.states.mapping('abbr', 'name')\n    {'al': 'alabama', 'ak': 'alaska', 'az': 'arizona', 'ar': 'arkansas', ...\n\nthis method uses `us.states_and_territories` as the default list of states\nit will create a mapping for, but this can be overridden by passing an\nadditional states argument: ::\n\n    >>> us.states.mapping('fips', 'abbr', states=[us.states.dc])\n    {'11': 'dc'}\n\n\ndc should be granted statehood\n------------------------------\n\nwashington, dc does not appear in `us.states` or any of the\nrelated state lists, but is often treated as a state in practice and\nshould be granted statehood anyway. dc can be automatically included in these\nlists by setting a `dc_statehood` environment variable to any truthy value\nbefore importing this package.\n\n::\n\n    dc_statehood=1\n\n\ncli\n----\n\nwhen you need to know state information right away, there's the *states* script.\n\n::\n\n    $ states md\n\n    *** the great state of maryland (md) ***\n\n      fips code: 24\n\n      other attributes:\n        ap_abbr: md.\n        capital: annapolis\n        capital_tz: america/new_york\n        is_contiguous: true\n        is_continental: true\n        is_obsolete: false\n        name_metaphone: mrlnt\n        statehood_year: 1788\n        time_zones: america/new_york\n\n      shapefiles:\n        tract: https://www2.census.gov/geo/tiger/tiger2010/tract/2010/tl_2010_24_tract10.zip\n        cd: https://www2.census.gov/geo/tiger/tiger2010/cd/111/tl_2010_24_cd111.zip\n        county: https://www2.census.gov/geo/tiger/tiger2010/county/2010/tl_2010_24_county10.zip\n        state: https://www2.census.gov/geo/tiger/tiger2010/state/2010/tl_2010_24_state10.zip\n        zcta: https://www2.census.gov/geo/tiger/tiger2010/zcta5/2010/tl_2010_24_zcta510.zip\n        block: https://www2.census.gov/geo/tiger/tiger2010/tabblock/2010/tl_2010_24_tabblock10.zip\n        blockgroup: https://www2.census.gov/geo/tiger/tiger2010/bg/2010/tl_2010_24_bg10.zip\n\n\nrunning tests\n-------------\n\ngithub actions are set up to automatically run unit tests against any new\ncommits to the repo. to run these tests yourself: ::\n\n    pipenv install --dev\n    pipenv run pytest\n\n\nchangelog\n---------\n\n3.1.1\n~~~~~\n* add support for python 3.11\n* upgrade to jellyfish 0.11.2\n\n\n3.0.0\n~~~~~\n\n* upgrade to jellyfish 0.7.2\n* drop support for python 2.7\n* add us.states.commonwealths list of states that call themselves commonwealths \ud83c\udfa9\n* add dc to states, states_and_territories, states_contiguous, or states_continental when dc_statehood environment variable is set\n* remove `region` parameter from `shapefile_urls()` method\n* `mapping()` no longer includes obsolete states\n* added type annotations\n\n\n2.0.2\n~~~~~\n\n* restore dc in lookup() and mapping()\n\n\n2.0.1\n~~~~~\n\n* fix python 2.7 tests that ran with python 3\n* revert to jellyfish 0.6.1 to support python 2.7\n\n\n2.0.0\n~~~~~\n\n* add support for python 3.7 and 3.8\n* remove support for python 3.4 and 3.5\n* remove pickled objects and database in favor of pure python code\n* upgrade jellyfish to 0.7.2 to fix metaphone bug\n* fixes for in, ky, nd, and nm timezones\n* set az timezone to america/phoenix\n* obsolete entries are no longer included in states_and_territories\n* dc is no longer included in states, states_and_territories, states_contiguous, or states_continental\n\n\n1.0.0\n~~~~~\n\n* full python 3.6 support\n* use pytest\n\n\n0.10.0\n~~~~~~\n\n* upgrade jellyfish to 0.5.3 to fix metaphone bug\n\n0.9.0\n~~~~~\n\n* add information on whether a state is contiguous and/or continental,\n  thanks to `chebee7i <https://github.com/chebee7i>`_\n\n0.8.0\n~~~~~\n\n* add obsolete territories, thanks to `ben chartoff <https://github.com/bchartoff>`_\n* fix packaging error, thanks to `alexander kulakov <https://github.com/momyc>`_\n\n\n0.7.1\n~~~~~\n\n* upgrade to jellyfish 0.5.1 to fix metaphone case bug\n\n0.7\n~~~\n\n* add time zones, thanks to `paul tagliamonte <https://github.com/paultag>`_\n* python 2.6 and 3.2 compatibility\n\n0.6\n~~~\n\n* add ap-style state abbreviations\n* use jellyfish instead of metaphone package\n* update to requests v1.0.4 for tests\n* python 3.3 compatibility\n\n0.5\n~~~\n\n* fix state abbreviation for nebraska\n\n0.4\n~~~\n\n* add state capitals\n* add years of statehood\n\n0.3\n~~~\n\n* add mapping method to generate dicts of arbitrary fields\n\n0.2\n~~~\n\n* add command line script for quick access to state data\n\n0.1\n~~~\n\n* initial release\n* state names and abbreviations\n* fips codes\n* lookup() method\n* shapefile urls for various regions\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "us",
  "package_url": "https://pypi.org/project/us/",
  "project_url": "https://pypi.org/project/us/",
  "project_urls": {
    "Homepage": "https://github.com/unitedstates/python-us"
  },
  "release_url": "https://pypi.org/project/us/3.1.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "us state meta information and other fun stuff",
  "version": "3.1.1",
  "releases": [],
  "developers": [
    "jeremy@jcarbaugh.com",
    "jeremy_carbaugh"
  ],
  "kwds": "states_and_territories states_continental statehood_year states states_contiguous",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_us",
  "homepage": "https://github.com/unitedstates/python-us",
  "release_count": 16,
  "dependency_ids": []
}
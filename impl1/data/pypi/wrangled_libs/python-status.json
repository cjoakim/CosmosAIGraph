{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: internet",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "# status - http status for humans\n\n[![version](https://img.shields.io/pypi/v/python-status.svg)](https://pypi.python.org/pypi/python-status/)\n[![supported](https://img.shields.io/pypi/pyversions/python-status.svg)](https://pypi.python.org/pypi/python-status/)\n![license](https://img.shields.io/pypi/l/python-status.svg)\n\n`status` is a very simple python library which provides human understandable http status codes and improves readability of your code. you don't have to use those ugly http status numbers, but use easily understandable status names.\n\ndon't:\n\n    class pythonpeople(requesthandler):\n        def post(self):\n            # do stuff\n            return ('that worked!', 201)\n\nbut, do this:\n\n    class pythonpeople(requesthandler):\n        def post(self):\n            # do stuff\n            return ('that worked!', status.http_201_created)\n\n\nsee, that looks so much better. you can use this library wherever you want, from custom python scripts to django, flask etc apps. for example, if you were playing with [requests](http://python-requests.org):\n\n    >>> response = requests.delete('http://some-url')\n    >>> response.status_code == status.http_204_no_content\n\n\n## installation\n\n    pip install python-status\n\n\n## usage\n\n`status` comes with http response status codes and also some helpful methods to check the response status. under the hood, status codes are merely an integer variable with meaningful variable names. check `status.py` file.\n\n    >>> import status\n    >>> status.http_200_ok == 200\n    true\n\nfor list of available status codes check `status.py` file.\n\n`status` also comes with some helpful methods to check the status of a response. they are `status.is_informational`, `status.is_success`, `status.is_redirect`, `status.is_client_error` and `status.is_server_error`.\n\n    >>> import status\n    >>> response = requests.delete('http://some-url')\n    >>> if status.is_success(code=response.status_code):\n            print('yay!')\n    >>> \n    yay!\n\n\n# why?\n\nfor every project i was creating a `status.py` file in the root directory. so i thought it's better to release this as a package on pypi and use it.\n\n\n# license\n\nplease check `license` for more details.\n\n\n# credits\n\n`status` is a fork of [django rest framework](https://github.com/tomchristie/django-rest-framework)(drf) and is independently maintained. the fork is entirely stripped of all drf features and is not a submodule of drf. and it doesn't come with any drf functionalities.",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "python-status",
  "package_url": "https://pypi.org/project/python-status/",
  "project_url": "https://pypi.org/project/python-status/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/avinassh/status/"
  },
  "release_url": "https://pypi.org/project/python-status/1.0.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "http status for humans",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "avinash_sajjanshetty",
    "hi@avi.im"
  ],
  "kwds": "status_code pythonpeople pyversions python django",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_python_status",
  "homepage": "https://github.com/avinassh/status/",
  "release_count": 1,
  "dependency_ids": []
}
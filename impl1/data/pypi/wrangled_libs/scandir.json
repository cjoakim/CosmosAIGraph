{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "topic :: system :: filesystems",
    "topic :: system :: operating system"
  ],
  "description": "scandir, a better directory iterator and faster os.walk()\r\n=========================================================\r\n\r\n.. image:: https://img.shields.io/pypi/v/scandir.svg\r\n   :target: https://pypi.python.org/pypi/scandir\r\n   :alt: scandir on pypi (python package index)\r\n\r\n.. image:: https://travis-ci.org/benhoyt/scandir.svg?branch=master\r\n   :target: https://travis-ci.org/benhoyt/scandir\r\n   :alt: travis ci tests (linux)\r\n\r\n.. image:: https://ci.appveyor.com/api/projects/status/github/benhoyt/scandir?branch=master&svg=true\r\n   :target: https://ci.appveyor.com/project/benhoyt/scandir\r\n   :alt: appveyor tests (windows)\r\n\r\n\r\n``scandir()`` is a directory iteration function like ``os.listdir()``,\r\nexcept that instead of returning a list of bare filenames, it yields\r\n``direntry`` objects that include file type and stat information along\r\nwith the name. using ``scandir()`` increases the speed of ``os.walk()``\r\nby 2-20 times (depending on the platform and file system) by avoiding\r\nunnecessary calls to ``os.stat()`` in most cases.\r\n\r\n\r\nnow included in a python near you!\r\n----------------------------------\r\n\r\n``scandir`` has been included in the python 3.5 standard library as\r\n``os.scandir()``, and the related performance improvements to\r\n``os.walk()`` have also been included. so if you're lucky enough to be\r\nusing python 3.5 (release date september 13, 2015) you get the benefit\r\nimmediately, otherwise just\r\n`download this module from pypi <https://pypi.python.org/pypi/scandir>`_,\r\ninstall it with ``pip install scandir``, and then do something like\r\nthis in your code:\r\n\r\n.. code-block:: python\r\n\r\n    # use the built-in version of scandir/walk if possible, otherwise\r\n    # use the scandir module version\r\n    try:\r\n        from os import scandir, walk\r\n    except importerror:\r\n        from scandir import scandir, walk\r\n\r\n`pep 471 <https://www.python.org/dev/peps/pep-0471/>`_, which is the\r\npep that proposes including ``scandir`` in the python standard library,\r\nwas `accepted <https://mail.python.org/pipermail/python-dev/2014-july/135561.html>`_\r\nin july 2014 by victor stinner, the bdfl-delegate for the pep.\r\n\r\nthis ``scandir`` module is intended to work on python 2.7+ and python\r\n3.4+ (and it has been tested on those versions).\r\n\r\n\r\nbackground\r\n----------\r\n\r\npython's built-in ``os.walk()`` is significantly slower than it needs to be,\r\nbecause -- in addition to calling ``listdir()`` on each directory -- it calls\r\n``stat()`` on each file to determine whether the filename is a directory or not.\r\nbut both ``findfirstfile`` / ``findnextfile`` on windows and ``readdir`` on linux/os\r\nx already tell you whether the files returned are directories or not, so\r\nno further ``stat`` system calls are needed. in short, you can reduce the number\r\nof system calls from about 2n to n, where n is the total number of files and\r\ndirectories in the tree.\r\n\r\nin practice, removing all those extra system calls makes ``os.walk()`` about\r\n**7-50 times as fast on windows, and about 3-10 times as fast on linux and mac os\r\nx.** so we're not talking about micro-optimizations. see more benchmarks\r\nin the \"benchmarks\" section below.\r\n\r\nsomewhat relatedly, many people have also asked for a version of\r\n``os.listdir()`` that yields filenames as it iterates instead of returning them\r\nas one big list. this improves memory efficiency for iterating very large\r\ndirectories.\r\n\r\nso as well as a faster ``walk()``, scandir adds a new ``scandir()`` function.\r\nthey're pretty easy to use, but see \"the api\" below for the full docs.\r\n\r\n\r\nbenchmarks\r\n----------\r\n\r\nbelow are results showing how many times as fast ``scandir.walk()`` is than\r\n``os.walk()`` on various systems, found by running ``benchmark.py`` with no\r\narguments:\r\n\r\n====================   ==============   =============\r\nsystem version         python version   times as fast\r\n====================   ==============   =============\r\nwindows 7 64-bit       2.7.7 64-bit     10.4\r\nwindows 7 64-bit ssd   2.7.7 64-bit     10.3\r\nwindows 7 64-bit nfs   2.7.6 64-bit     36.8\r\nwindows 7 64-bit ssd   3.4.1 64-bit     9.9\r\nwindows 7 64-bit ssd   3.5.0 64-bit     9.5\r\nubuntu 14.04 64-bit    2.7.6 64-bit     5.8\r\nmac os x 10.9.3        2.7.5 64-bit     3.8\r\n====================   ==============   =============\r\n\r\nall of the above tests were done using the fast c version of scandir\r\n(source code in ``_scandir.c``).\r\n\r\nnote that the gains are less than the above on smaller directories and greater\r\non larger directories. this is why ``benchmark.py`` creates a test directory\r\ntree with a standardized size.\r\n\r\n\r\nthe api\r\n-------\r\n\r\nwalk()\r\n~~~~~~\r\n\r\nthe api for ``scandir.walk()`` is exactly the same as ``os.walk()``, so just\r\n`read the python docs <https://docs.python.org/3.5/library/os.html#os.walk>`_.\r\n\r\nscandir()\r\n~~~~~~~~~\r\n\r\nthe full docs for ``scandir()`` and the ``direntry`` objects it yields are\r\navailable in the `python documentation here <https://docs.python.org/3.5/library/os.html#os.scandir>`_. \r\nbut below is a brief summary as well.\r\n\r\n    scandir(path='.') -> iterator of direntry objects for given path\r\n\r\nlike ``listdir``, ``scandir`` calls the operating system's directory\r\niteration system calls to get the names of the files in the given\r\n``path``, but it's different from ``listdir`` in two ways:\r\n\r\n* instead of returning bare filename strings, it returns lightweight\r\n  ``direntry`` objects that hold the filename string and provide\r\n  simple methods that allow access to the additional data the\r\n  operating system may have returned.\r\n\r\n* it returns a generator instead of a list, so that ``scandir`` acts\r\n  as a true iterator instead of returning the full list immediately.\r\n\r\n``scandir()`` yields a ``direntry`` object for each file and\r\nsub-directory in ``path``. just like ``listdir``, the ``'.'``\r\nand ``'..'`` pseudo-directories are skipped, and the entries are\r\nyielded in system-dependent order. each ``direntry`` object has the\r\nfollowing attributes and methods:\r\n\r\n* ``name``: the entry's filename, relative to the scandir ``path``\r\n  argument (corresponds to the return values of ``os.listdir``)\r\n\r\n* ``path``: the entry's full path name (not necessarily an absolute\r\n  path) -- the equivalent of ``os.path.join(scandir_path, entry.name)``\r\n\r\n* ``is_dir(*, follow_symlinks=true)``: similar to\r\n  ``pathlib.path.is_dir()``, but the return value is cached on the\r\n  ``direntry`` object; doesn't require a system call in most cases;\r\n  don't follow symbolic links if ``follow_symlinks`` is false\r\n\r\n* ``is_file(*, follow_symlinks=true)``: similar to\r\n  ``pathlib.path.is_file()``, but the return value is cached on the\r\n  ``direntry`` object; doesn't require a system call in most cases; \r\n  don't follow symbolic links if ``follow_symlinks`` is false\r\n\r\n* ``is_symlink()``: similar to ``pathlib.path.is_symlink()``, but the\r\n  return value is cached on the ``direntry`` object; doesn't require a\r\n  system call in most cases\r\n\r\n* ``stat(*, follow_symlinks=true)``: like ``os.stat()``, but the\r\n  return value is cached on the ``direntry`` object; does not require a\r\n  system call on windows (except for symlinks); don't follow symbolic links\r\n  (like ``os.lstat()``) if ``follow_symlinks`` is false\r\n\r\n* ``inode()``: return the inode number of the entry; the return value\r\n  is cached on the ``direntry`` object\r\n\r\nhere's a very simple example of ``scandir()`` showing use of the\r\n``direntry.name`` attribute and the ``direntry.is_dir()`` method:\r\n\r\n.. code-block:: python\r\n\r\n    def subdirs(path):\r\n        \"\"\"yield directory names not starting with '.' under given path.\"\"\"\r\n        for entry in os.scandir(path):\r\n            if not entry.name.startswith('.') and entry.is_dir():\r\n                yield entry.name\r\n\r\nthis ``subdirs()`` function will be significantly faster with scandir\r\nthan ``os.listdir()`` and ``os.path.isdir()`` on both windows and posix\r\nsystems, especially on medium-sized or large directories.\r\n\r\n\r\nfurther reading\r\n---------------\r\n\r\n* `the python docs for scandir <https://docs.python.org/3.5/library/os.html#os.scandir>`_\r\n* `pep 471 <https://www.python.org/dev/peps/pep-0471/>`_, the\r\n  (now-accepted) python enhancement proposal that proposed adding\r\n  ``scandir`` to the standard library -- a lot of details here,\r\n  including rejected ideas and previous discussion\r\n\r\n\r\nflames, comments, bug reports\r\n-----------------------------\r\n\r\nplease send flames, comments, and questions about scandir to ben hoyt:\r\n\r\nhttp://benhoyt.com/\r\n\r\nfile bug reports for the version in the python 3.5 standard library\r\n`here <https://docs.python.org/3.5/bugs.html>`_, or file bug reports\r\nor feature requests for this module at the github project page:\r\n\r\nhttps://github.com/benhoyt/scandir\r\n\r\n\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "new bsd license",
  "name": "scandir",
  "package_url": "https://pypi.org/project/scandir/",
  "project_url": "https://pypi.org/project/scandir/",
  "project_urls": {
    "Homepage": "https://github.com/benhoyt/scandir"
  },
  "release_url": "https://pypi.org/project/scandir/1.10.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "scandir, a better directory iterator and faster os.walk()",
  "version": "1.10.0",
  "releases": [],
  "developers": [
    "ben_hoyt",
    "benhoyt@gmail.com"
  ],
  "kwds": "scandir_path scandir _scandir pathlib listdir",
  "license_kwds": "new bsd license",
  "libtype": "pypi",
  "id": "pypi_scandir",
  "homepage": "https://github.com/benhoyt/scandir",
  "release_count": 16,
  "dependency_ids": []
}
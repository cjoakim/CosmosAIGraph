{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "\npathspec\n========\n\n*pathspec* is a utility library for pattern matching of file paths. so\nfar this only includes git's wildmatch pattern matching which itself is\nderived from rsync's wildmatch. git uses wildmatch for its `gitignore`_\nfiles.\n\n.. _`gitignore`: http://git-scm.com/docs/gitignore\n\n\ntutorial\n--------\n\nsay you have a \"projects\" directory and you want to back it up, but only\ncertain files, and ignore others depending on certain conditions::\n\n\t>>> import pathspec\n\t>>> # the gitignore-style patterns for files to select, but we're including\n\t>>> # instead of ignoring.\n\t>>> spec_text = \"\"\"\n\t...\n\t... # this is a comment because the line begins with a hash: \"#\"\n\t...\n\t... # include several project directories (and all descendants) relative to\n\t... # the current directory. to reference a directory you must end with a\n\t... # slash: \"/\"\n\t... /project-a/\n\t... /project-b/\n\t... /project-c/\n\t...\n\t... # patterns can be negated by prefixing with exclamation mark: \"!\"\n\t...\n\t... # ignore temporary files beginning or ending with \"~\" and ending with\n\t... # \".swp\".\n\t... !~*\n\t... !*~\n\t... !*.swp\n\t...\n\t... # these are python projects so ignore compiled python files from\n\t... # testing.\n\t... !*.pyc\n\t...\n\t... # ignore the build directories but only directly under the project\n\t... # directories.\n\t... !/*/build/\n\t...\n\t... \"\"\"\n\nwe want to use the ``gitwildmatchpattern`` class to compile our patterns. the\n``pathspec`` class provides an interface around pattern implementations::\n\n\t>>> spec = pathspec.pathspec.from_lines(pathspec.patterns.gitwildmatchpattern, spec_text.splitlines())\n\nthat may be a mouthful but it allows for additional patterns to be implemented\nin the future without them having to deal with anything but matching the paths\nsent to them. ``gitwildmatchpattern`` is the implementation of the actual\npattern which internally gets converted into a regular expression. ``pathspec``\nis a simple wrapper around a list of compiled patterns.\n\nto make things simpler, we can use the registered name for a pattern class\ninstead of always having to provide a reference to the class itself. the\n``gitwildmatchpattern`` class is registered as **gitwildmatch**::\n\n\t>>> spec = pathspec.pathspec.from_lines('gitwildmatch', spec_text.splitlines())\n\nif we wanted to manually compile the patterns we can just do the following::\n\n\t>>> patterns = map(pathspec.patterns.gitwildmatchpattern, spec_text.splitlines())\n\t>>> spec = pathspec(patterns)\n\n``pathspec.from_lines()`` is simply a class method which does just that.\n\nif you want to load the patterns from file, you can pass the file instance\ndirectly as well::\n\n\t>>> with open('patterns.list', 'r') as fh:\n\t>>>     spec = pathspec.pathspec.from_lines('gitwildmatch', fh)\n\nyou can perform matching on a whole directory tree with::\n\n\t>>> matches = spec.match_tree('path/to/directory')\n\nor you can perform matching on a specific set of file paths with::\n\n\t>>> matches = spec.match_files(file_paths)\n\nor check to see if an individual file matches::\n\n\t>>> is_matched = spec.match_file(file_path)\n\nthere is a specialized class, ``pathspec.gitignorespec``, which more closely\nimplements the behavior of **gitignore**. this uses ``gitwildmatchpattern``\npattern by default and handles some edge cases differently from the generic\n``pathspec`` class. ``gitignorespec`` can be used without specifying the pattern\nfactory::\n\n\t>>> spec = pathspec.gitignorespec.from_lines(spec_text.splitlines())\n\n\nlicense\n-------\n\n*pathspec* is licensed under the `mozilla public license version 2.0`_. see\n`license`_ or the `faq`_ for more information.\n\nin summary, you may use *pathspec* with any closed or open source project\nwithout affecting the license of the larger work so long as you:\n\n- give credit where credit is due,\n\n- and release any custom changes made to *pathspec*.\n\n.. _`mozilla public license version 2.0`: http://www.mozilla.org/mpl/2.0\n.. _`license`: license\n.. _`faq`: http://www.mozilla.org/mpl/2.0/faq.html\n\n\nsource\n------\n\nthe source code for *pathspec* is available from the github repo\n`cpburnz/python-pathspec`_.\n\n.. _`cpburnz/python-pathspec`: https://github.com/cpburnz/python-pathspec\n\n\ninstallation\n------------\n\n*pathspec* is available for install through `pypi`_::\n\n\tpip install pathspec\n\n*pathspec* can also be built from source. the following packages will be\nrequired:\n\n- `build`_ (>=0.6.0)\n\n*pathspec* can then be built and installed with::\n\n\tpython -m build\n\tpip install dist/pathspec-*-py3-none-any.whl\n\n.. _`pypi`: http://pypi.python.org/pypi/pathspec\n.. _`build`: https://pypi.org/project/build/\n\n\ndocumentation\n-------------\n\ndocumentation for *pathspec* is available on `read the docs`_.\n\n.. _`read the docs`: https://python-path-specification.readthedocs.io\n\n\nother languages\n---------------\n\nthe related project `pathspec-ruby`_ (by *highb*) provides a similar library as\na `ruby gem`_.\n\n.. _`pathspec-ruby`: https://github.com/highb/pathspec-ruby\n.. _`ruby gem`: https://rubygems.org/gems/pathspec\n\n\n\nchange history\n==============\n\n\n0.12.1 (2023-12-10)\n-------------------\n\nbug fixes:\n\n- `issue #84`_: pathspec.match_file() returns none since 0.12.0.\n\n\n.. _`issue #84`: https://github.com/cpburnz/python-pathspec/issues/84\n\n\n0.12.0 (2023-12-09)\n-------------------\n\nmajor changes:\n\n- dropped support of eol python 3.7. see `pull #82`_.\n\n\napi changes:\n\n- signature of protected method `pathspec.pathspec.pathspec._match_file()` (with a leading underscore) has been changed from `def _match_file(patterns: iterable[pattern], file: str) -> bool` to `def _match_file(patterns: iterable[tuple[int, pattern]], file: str) -> tuple[optional[bool], optional[int]]`.\n\nnew features:\n\n- added `pathspec.pathspec.pathspec.check_*()` methods. these methods behave similarly to `.match_*()` but return additional information in the `pathspec.util.checkresult` objects (e.g., `checkresult.index` indicates the index of the last pattern that matched the file).\n- added `pathspec.pattern.regexpattern.pattern` attribute which stores the original, uncompiled pattern.\n\nbug fixes:\n\n- `issue #81`_: gitignorespec behaviors differ from git.\n- `pull #83`_: fix readthedocs builds.\n\nimprovements:\n\n- mark python 3.12 as supported. see `pull #82`_.\n- improve test debugging.\n- improve type hint on *on_error* parameter on `pathspec.pathspec.pathspec.match_tree_entries()`.\n- improve type hint on *on_error* parameter on `pathspec.util.iter_tree_entries()`.\n\n\n.. _`issue #81`: https://github.com/cpburnz/python-pathspec/issues/81\n.. _`pull #82`: https://github.com/cpburnz/python-pathspec/pull/82\n.. _`pull #83`: https://github.com/cpburnz/python-pathspec/pull/83\n\n\n0.11.2 (2023-07-28)\n-------------------\n\nnew features:\n\n- `issue #80`_: match_files with negated path spec. `pathspec.pathspec.match_*()` now have a `negate` parameter to make using *.gitignore* logic easier and more efficient.\n\nbug fixes:\n\n- `pull #76`_: add edge case: patterns that end with an escaped space\n- `issue #77`_/`pull #78`_: negate with caret symbol as with the exclamation mark.\n\n\n.. _`pull #76`: https://github.com/cpburnz/python-pathspec/pull/76\n.. _`issue #77`: https://github.com/cpburnz/python-pathspec/issues/77\n.. _`pull #78`: https://github.com/cpburnz/python-pathspec/pull/78/\n.. _`issue #80`: https://github.com/cpburnz/python-pathspec/issues/80\n\n\n0.11.1 (2023-03-14)\n-------------------\n\nbug fixes:\n\n- `issue #74`_: include directory should override exclude file.\n\nimprovements:\n\n- `pull #75`_: fix partially unknown pathlike type.\n- convert `os.pathlike` to a string properly using `os.fspath`.\n\n\n.. _`issue #74`: https://github.com/cpburnz/python-pathspec/issues/74\n.. _`pull #75`: https://github.com/cpburnz/python-pathspec/pull/75\n\n\n0.11.0 (2023-01-24)\n-------------------\n\nmajor changes:\n\n- changed build backend to `flit_core.buildapi`_ from `setuptools.build_meta`_. building with `setuptools` through `setup.py` is still supported for distributions that need it. see `issue #72`_.\n\nimprovements:\n\n- `issue #72`_/`pull #73`_: please consider switching the build-system to flit_core to ease setuptools bootstrap.\n\n\n.. _`flit_core.buildapi`: https://flit.pypa.io/en/latest/index.html\n.. _`issue #72`: https://github.com/cpburnz/python-pathspec/issues/72\n.. _`pull #73`: https://github.com/cpburnz/python-pathspec/pull/73\n\n\n0.10.3 (2022-12-09)\n-------------------\n\nnew features:\n\n- added utility function `pathspec.util.append_dir_sep()` to aid in distinguishing between directories and files on the file-system. see `issue #65`_.\n\nbug fixes:\n\n- `issue #66`_/`pull #67`_: package not marked as py.typed.\n- `issue #68`_: exports are considered private.\n- `issue #70`_/`pull #71`_: 'self' string literal type is unknown in pyright.\n\nimprovements:\n\n- `issue #65`_: checking directories via match_file() does not work on path objects.\n\n\n.. _`issue #65`: https://github.com/cpburnz/python-pathspec/issues/65\n.. _`issue #66`: https://github.com/cpburnz/python-pathspec/issues/66\n.. _`pull #67`: https://github.com/cpburnz/python-pathspec/pull/67\n.. _`issue #68`: https://github.com/cpburnz/python-pathspec/issues/68\n.. _`issue #70`: https://github.com/cpburnz/python-pathspec/issues/70\n.. _`pull #71`: https://github.com/cpburnz/python-pathspec/pull/71\n\n\n0.10.2 (2022-11-12)\n-------------------\n\nbug fixes:\n\n- fix failing tests on windows.\n- type hint on *root* parameter on `pathspec.pathspec.pathspec.match_tree_entries()`.\n- type hint on *root* parameter on `pathspec.pathspec.pathspec.match_tree_files()`.\n- type hint on *root* parameter on `pathspec.util.iter_tree_entries()`.\n- type hint on *root* parameter on `pathspec.util.iter_tree_files()`.\n- `issue #64`_: indexerror with my .gitignore file when trying to build a python package.\n\nimprovements:\n\n- `pull #58`_: ci: add github actions test workflow.\n\n\n.. _`pull #58`: https://github.com/cpburnz/python-pathspec/pull/58\n.. _`issue #64`: https://github.com/cpburnz/python-pathspec/issues/64\n\n\n0.10.1 (2022-09-02)\n-------------------\n\nbug fixes:\n\n- fix documentation on `pathspec.pattern.regexpattern.match_file()`.\n- `pull #60`_: remove redundant wheel dep from pyproject.toml.\n- `issue #61`_: dist failure for fedora, centos, epel.\n- `issue #62`_: since version 0.10.0 pure wildcard does not work in some cases.\n\nimprovements:\n\n- restore support for legacy installations using `setup.py`. see `issue #61`_.\n\n\n.. _`pull #60`: https://github.com/cpburnz/python-pathspec/pull/60\n.. _`issue #61`: https://github.com/cpburnz/python-pathspec/issues/61\n.. _`issue #62`: https://github.com/cpburnz/python-pathspec/issues/62\n\n\n0.10.0 (2022-08-30)\n-------------------\n\nmajor changes:\n\n- dropped support of eol python 2.7, 3.5, 3.6. see `issue #47`_.\n- the *gitwildmatch* pattern `dir/*` is now handled the same as `dir/`. this means `dir/*` will now match all descendants rather than only direct children. see `issue #19`_.\n- added `pathspec.gitignorespec` class (see new features).\n- changed build system to `pyproject.toml`_ and build backend to `setuptools.build_meta`_ which may have unforeseen consequences.\n- renamed github project from `python-path-specification`_ to `python-pathspec`_. see `issue #35`_.\n\napi changes:\n\n- deprecated: `pathspec.util.match_files()` is an old function no longer used.\n- deprecated: `pathspec.match_files()` is an old function no longer used.\n- deprecated: `pathspec.util.normalize_files()` is no longer used.\n- deprecated: `pathspec.util.iter_tree()` is an alias for `pathspec.util.iter_tree_files()`.\n- deprecated: `pathspec.iter_tree()` is an alias for `pathspec.util.iter_tree_files()`.\n-\tdeprecated: `pathspec.pattern.pattern.match()` is no longer used. use or implement\n\t`pathspec.pattern.pattern.match_file()`.\n\nnew features:\n\n- added class `pathspec.gitignore.gitignorespec` (with alias `pathspec.gitignorespec`) to implement *gitignore* behavior not possible with standard `pathspec` class. the particular *gitignore* behavior implemented is prioritizing patterns matching the file directly over matching an ancestor directory.\n\nbug fixes:\n\n- `issue #19`_: files inside an ignored sub-directory are not matched.\n- `issue #41`_: incorrectly (?) matches files inside directories that do match.\n- `pull #51`_: refactor deprecated unittest aliases for python 3.11 compatibility.\n- `issue #53`_: symlink pathspec_meta.py breaks windows.\n- `issue #54`_: test_util.py uses os.symlink which can fail on windows.\n- `issue #55`_: backslashes at start of pattern not handled correctly.\n- `pull #56`_: pyproject.toml: include subpackages in setuptools config\n- `issue #57`_: `!` doesn't exclude files in directories if the pattern doesn't have a trailing slash.\n\nimprovements:\n\n- support python 3.10, 3.11.\n- modernize code to python 3.7.\n- `issue #52`_: match_files() is not a pure generator function, and it impacts tree_*() gravely.\n\n\n.. _`python-path-specification`: https://github.com/cpburnz/python-path-specification\n.. _`python-pathspec`: https://github.com/cpburnz/python-pathspec\n.. _`pyproject.toml`: https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/\n.. _`setuptools.build_meta`: https://setuptools.pypa.io/en/latest/build_meta.html\n.. _`issue #19`: https://github.com/cpburnz/python-pathspec/issues/19\n.. _`issue #35`: https://github.com/cpburnz/python-pathspec/issues/35\n.. _`issue #41`: https://github.com/cpburnz/python-pathspec/issues/41\n.. _`issue #47`: https://github.com/cpburnz/python-pathspec/issues/47\n.. _`pull #51`: https://github.com/cpburnz/python-pathspec/pull/51\n.. _`issue #52`: https://github.com/cpburnz/python-pathspec/issues/52\n.. _`issue #53`: https://github.com/cpburnz/python-pathspec/issues/53\n.. _`issue #54`: https://github.com/cpburnz/python-pathspec/issues/54\n.. _`issue #55`: https://github.com/cpburnz/python-pathspec/issues/55\n.. _`pull #56`: https://github.com/cpburnz/python-pathspec/pull/56\n.. _`issue #57`: https://github.com/cpburnz/python-pathspec/issues/57\n\n\n0.9.0 (2021-07-17)\n------------------\n\n- `issue #44`_/`pull #50`_: raise `gitwildmatchpatternerror` for invalid git patterns.\n- `pull #45`_: fix for duplicate leading double-asterisk, and edge cases.\n- `issue #46`_: fix matching absolute paths.\n- api change: `util.normalize_files()` now returns a `dict[str, list[pathlike]]` instead of a `dict[str, pathlike]`.\n- added type hinting.\n\n.. _`issue #44`: https://github.com/cpburnz/python-pathspec/issues/44\n.. _`pull #45`: https://github.com/cpburnz/python-pathspec/pull/45\n.. _`issue #46`: https://github.com/cpburnz/python-pathspec/issues/46\n.. _`pull #50`: https://github.com/cpburnz/python-pathspec/pull/50\n\n\n0.8.1 (2020-11-07)\n------------------\n\n- `pull #43`_: add support for addition operator.\n\n.. _`pull #43`: https://github.com/cpburnz/python-pathspec/pull/43\n\n\n0.8.0 (2020-04-09)\n------------------\n\n- `issue #30`_: expose what patterns matched paths. added `util.detailed_match_files()`.\n- `issue #31`_: `match_tree()` doesn't return symlinks.\n- `issue #34`_: support `pathlib.path`\\ s.\n- add `pathspec.match_tree_entries` and `util.iter_tree_entries()` to support directories and symlinks.\n- api change: `match_tree()` has been renamed to `match_tree_files()`. the old name `match_tree()` is still available as an alias.\n- api change: `match_tree_files()` now returns symlinks. this is a bug fix but it will change the returned results.\n\n.. _`issue #30`: https://github.com/cpburnz/python-pathspec/issues/30\n.. _`issue #31`: https://github.com/cpburnz/python-pathspec/issues/31\n.. _`issue #34`: https://github.com/cpburnz/python-pathspec/issues/34\n\n\n0.7.0 (2019-12-27)\n------------------\n\n- `pull #28`_: add support for python 3.8, and drop python 3.4.\n- `pull #29`_: publish bdist wheel.\n\n.. _`pull #28`: https://github.com/cpburnz/python-pathspec/pull/28\n.. _`pull #29`: https://github.com/cpburnz/python-pathspec/pull/29\n\n\n0.6.0 (2019-10-03)\n------------------\n\n- `pull #24`_: drop support for python 2.6, 3.2, and 3.3.\n- `pull #25`_: update readme.rst.\n- `pull #26`_: method to escape gitwildmatch.\n\n.. _`pull #24`: https://github.com/cpburnz/python-pathspec/pull/24\n.. _`pull #25`: https://github.com/cpburnz/python-pathspec/pull/25\n.. _`pull #26`: https://github.com/cpburnz/python-pathspec/pull/26\n\n\n0.5.9 (2018-09-15)\n------------------\n\n- fixed file system error handling.\n\n\n0.5.8 (2018-09-15)\n------------------\n\n- improved type checking.\n- created scripts to test python 2.6 because tox removed support for it.\n- improved byte string handling in python 3.\n- `issue #22`_: handle dangling symlinks.\n\n.. _`issue #22`: https://github.com/cpburnz/python-pathspec/issues/22\n\n\n0.5.7 (2018-08-14)\n------------------\n\n- `issue #21`_: fix collections deprecation warning.\n\n.. _`issue #21`: https://github.com/cpburnz/python-pathspec/issues/21\n\n\n0.5.6 (2018-04-06)\n------------------\n\n- improved unit tests.\n- improved type checking.\n- `issue #20`_: support current directory prefix.\n\n.. _`issue #20`: https://github.com/cpburnz/python-pathspec/issues/20\n\n\n0.5.5 (2017-09-09)\n------------------\n\n- add documentation link to readme.\n\n\n0.5.4 (2017-09-09)\n------------------\n\n- `pull #17`_: add link to ruby implementation of *pathspec*.\n- add sphinx documentation.\n\n.. _`pull #17`: https://github.com/cpburnz/python-pathspec/pull/17\n\n\n0.5.3 (2017-07-01)\n------------------\n\n- `issue #14`_: fix byte strings for python 3.\n- `pull #15`_: include \"license\" in source package.\n- `issue #16`_: support python 2.6.\n\n.. _`issue #14`: https://github.com/cpburnz/python-pathspec/issues/14\n.. _`pull #15`: https://github.com/cpburnz/python-pathspec/pull/15\n.. _`issue #16`: https://github.com/cpburnz/python-pathspec/issues/16\n\n\n0.5.2 (2017-04-04)\n------------------\n\n- fixed change log.\n\n\n0.5.1 (2017-04-04)\n------------------\n\n- `pull #13`_: add equality methods to `pathspec` and `regexpattern`.\n\n.. _`pull #13`: https://github.com/cpburnz/python-pathspec/pull/13\n\n\n0.5.0 (2016-08-22)\n------------------\n\n- `issue #12`_: add `pathspec.match_file()`.\n- renamed `gitignore.gitignorepattern` to `patterns.gitwildmatch.gitwildmatchpattern`.\n- deprecated `gitignore.gitignorepattern`.\n\n.. _`issue #12`: https://github.com/cpburnz/python-pathspec/issues/12\n\n\n0.4.0 (2016-07-15)\n------------------\n\n- `issue #11`_: support converting patterns into regular expressions without compiling them.\n- api change: subclasses of `regexpattern` should implement `pattern_to_regex()`.\n\n.. _`issue #11`: https://github.com/cpburnz/python-pathspec/issues/11\n\n\n0.3.4 (2015-08-24)\n------------------\n\n- `pull #7`_: fixed non-recursive links.\n- `pull #8`_: fixed edge cases in gitignore patterns.\n- `pull #9`_: fixed minor usage documentation.\n- fixed recursion detection.\n- fixed trivial incompatibility with python 3.2.\n\n.. _`pull #7`: https://github.com/cpburnz/python-pathspec/pull/7\n.. _`pull #8`: https://github.com/cpburnz/python-pathspec/pull/8\n.. _`pull #9`: https://github.com/cpburnz/python-pathspec/pull/9\n\n\n0.3.3 (2014-11-21)\n------------------\n\n- improved documentation.\n\n\n0.3.2 (2014-11-08)\n------------------\n\n- `pull #5`_: use tox for testing.\n- `issue #6`_: fixed matching windows paths.\n- improved documentation.\n- api change: `spec.match_tree()` and `spec.match_files()` now return iterators instead of sets.\n\n.. _`pull #5`: https://github.com/cpburnz/python-pathspec/pull/5\n.. _`issue #6`: https://github.com/cpburnz/python-pathspec/issues/6\n\n\n0.3.1 (2014-09-17)\n------------------\n\n- updated readme.\n\n\n0.3.0 (2014-09-17)\n------------------\n\n- `pull #3`_: fixed trailing slash in gitignore patterns.\n- `pull #4`_: fixed test for trailing slash in gitignore patterns.\n- added registered patterns.\n\n.. _`pull #3`: https://github.com/cpburnz/python-pathspec/pull/3\n.. _`pull #4`: https://github.com/cpburnz/python-pathspec/pull/4\n\n\n0.2.2 (2013-12-17)\n------------------\n\n- fixed setup.py.\n\n\n0.2.1 (2013-12-17)\n------------------\n\n- added tests.\n- fixed comment gitignore patterns.\n- fixed relative path gitignore patterns.\n\n\n0.2.0 (2013-12-07)\n------------------\n\n- initial release.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pathspec",
  "package_url": "https://pypi.org/project/pathspec/",
  "project_url": "https://pypi.org/project/pathspec/",
  "project_urls": {
    "Documentation": "https://python-path-specification.readthedocs.io/en/latest/index.html",
    "Issue Tracker": "https://github.com/cpburnz/python-pathspec/issues",
    "Source Code": "https://github.com/cpburnz/python-pathspec"
  },
  "release_url": "https://pypi.org/project/pathspec/0.12.1/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "utility library for gitignore style pattern matching of file paths.",
  "version": "0.12.1",
  "releases": [],
  "developers": [
    "cpburnz@gmail.com"
  ],
  "kwds": "match_files match_tree_files detailed_match_files file_paths rsync",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pathspec",
  "homepage": "",
  "release_count": 31,
  "dependency_ids": []
}
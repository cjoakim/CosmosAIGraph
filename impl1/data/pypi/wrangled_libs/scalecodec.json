{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# python scale codec\n\n[![build status](https://img.shields.io/github/actions/workflow/status/polkascan/py-scale-codec/unittests.yml?branch=master)](https://github.com/polkascan/py-scale-codec/actions/workflows/unittests.yml?query=workflow%3a%22run+unit+tests%22)\n[![latest version](https://img.shields.io/pypi/v/scalecodec.svg)](https://pypi.org/project/scalecodec/) \n[![supported python versions](https://img.shields.io/pypi/pyversions/scalecodec.svg)](https://pypi.org/project/scalecodec/)\n[![license](https://img.shields.io/pypi/l/scalecodec.svg)](https://github.com/polkascan/py-scale-codec/blob/master/license)\n\n\n## description\n[substrate](https://github.com/paritytech/substrate) uses a lightweight and efficient [encoding and decoding program](https://docs.substrate.io/reference/scale-codec/) to optimize how data is sent and received over the network. the program used to serialize and deserialize data is called the scale codec, with scale being an acronym for **s**imple **c**oncatenated **a**ggregate **l**ittle-**e**ndian.\n\n## documentation\nhttps://polkascan.github.io/py-scale-codec/\n\n\n## installation\n```bash\npip install scalecodec\n```\n\n## examples of different types\n\n| type                                                                         | description                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | example scale decoding value                                                | scale encoded value                                                             |\n|------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|---------------------------------------------------------------------------------|\n| `bool`                                                                       | boolean values are encoded using the least significant bit of a single byte.                                                                                                                                                                                                                                                                                                                                                                                                         | `true`                                                                      | `0x01`                                                                          |\n| `u16`                                                                        | basic integers are encoded using a fixed-width little-endian (le) format.                                                                                                                                                                                                                                                                                                                                                                                                            | `42`                                                                        | `0x2a00`                                                                        |\n| `compact`                                                                    | a \"compact\" or general integer encoding is sufficient for encoding large integers (up to 2**536) and is more efficient at encoding most values than the fixed-width version. (though for single-byte values, the fixed-width integer is never worse.)                                                                                                                                                                                                                                | `0`                                                                         | `0x00`                                                                          |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `1`                                                                         | `0x04`                                                                          |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `42`                                                                        | `0xa8`                                                                          |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `69`                                                                        | `0x1501`                                                                        |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `100000000000000`                                                           | `0x0b00407a10f35a`                                                              |\n| `vec`                                                                        | a collection of same-typed values is encoded, prefixed with a compact encoding of the number of items, followed by each item's encoding concatenated in turn.                                                                                                                                                                                                                                                                                                                        | `[4, 8, 15, 16, 23, 42]`                                                    | `0x18040008000f00100017002a00`                                                  |\n| `bitvec`                                                                     | a sequence of bools, represented in a more space efficient bit format                                                                                                                                                                                                                                                                                                                                                                                                             | `0b00000010_01111101`                                                    | `0x287d02`                                                  |\n| `str`,`bytes`, `string`                                                      | strings are vectors of bytes (`vec<u8>`) containing a valid utf8 sequence.                                                                                                                                                                                                                                                                                                                                                                                                           | `\"test\"`                                                                    | `0x1054657374`                                                                  |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `b\"test\"`                                                                   | `0x1054657374`                                                                  |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `[84, 101, 115, 116]`                                                       | `0x1054657374`                                                                  |\n| `[u8; 4]`                                                                    | fixed sized array of in this case an `u8`                                                                                                                                                                                                                                                                                                                                                                                                                                            | `b\"babe\"`                                                                   | `0x62616265`                                                                    |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `\"0x62616265\"`                                                              | `0x62616265`                                                                    |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `[98, 97, 98, 101]`                                                         | `0x62616265`                                                                    |\n| `accountid`                                                                  | an [ss58 formatted](https://docs.substrate.io/reference/address-formats/) representation of an account. see also the [ss58 util functions](https://polkascan.github.io/py-scale-codec/utils/ss58.html)                                                                                                                                                                                                                                                                               | `\"5gdyphlvhcqyptwfygtpy eogqjyzy7j9fsi4brphgefq4pcv\"`                       | `0xb80269ec500e458a630846b99105c397 ee574125823d6f4388e9c7572e115c05`           |\n| `enum` example: `enum intorbool { int(u8), bool(bool),}`                     | a fixed number of variants, each mutually exclusive and potentially implying a further value or series of values. encoded as the first byte identifying the index of the variant that the value is. any further bytes are used to encode any data that the variant implies. thus, no more than 256 variants are supported.                                                                                                                                                           | `{'int': 8}`                                                                | `0x002a`                                                                        |\n|                                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | `{'bool': true}`                                                            | `0x0101`                                                                        |\n| `struct` example: `struct motion { pub votes: vec<accountid>, pub id: u32 }` | for structures, the values are named, but that is irrelevant for the encoding (names are ignored - only order matters). all containers store elements consecutively. the order of the elements is not fixed, depends on the container, and cannot be relied on at decoding. this implicitly means that decoding some byte-array into a specified structure that enforces an order and then re-encoding it could result in a different byte array than the original that was decoded. | `{\"votes\": [\"5gdyphlvhcqyptwfygtpyeo gqjyzy7j9fsi4brphgefq4pcv\"], \"id\": 4}` | `0x04b80269ec500e458a630846b99105c397ee57 4125823d6f4388e9c7572e115c0504000000` |\n\n## license\nhttps://github.com/polkascan/py-scale-codec/blob/master/license\n",
  "docs_url": null,
  "keywords": "scale codec polkascan polkadot substrate blockchain kusama",
  "license": "",
  "name": "scalecodec",
  "package_url": "https://pypi.org/project/scalecodec/",
  "project_url": "https://pypi.org/project/scalecodec/",
  "project_urls": {
    "Homepage": "https://github.com/polkascan/py-scale-codec"
  },
  "release_url": "https://pypi.org/project/scalecodec/1.2.7/",
  "requires_dist": [
    "more-itertools",
    "base58 >=2.0.1",
    "requests >=2.24.0",
    "coverage ; extra == 'test'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.6, <4",
  "summary": "python scale codec library",
  "version": "1.2.7",
  "releases": [],
  "developers": [
    "info@polkascan.org",
    "stichting_polkascan"
  ],
  "kwds": "scalecodec polkadot polkascan scale codec",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_scalecodec",
  "homepage": "https://github.com/polkascan/py-scale-codec",
  "release_count": 243,
  "dependency_ids": [
    "pypi_base58",
    "pypi_coverage",
    "pypi_more_itertools",
    "pypi_pytest",
    "pypi_requests"
  ]
}
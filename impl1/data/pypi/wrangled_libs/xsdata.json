{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: code generators",
    "topic :: text processing :: markup :: xml"
  ],
  "description": ".. image:: https://github.com/tefra/xsdata/raw/main/docs/_static/logo.svg\n    :target: https://xsdata.readthedocs.io/\n\nnaive xml bindings for python\n=============================\n\n.. image:: https://github.com/tefra/xsdata/workflows/tests/badge.svg\n    :target: https://github.com/tefra/xsdata/actions\n\n.. image:: https://readthedocs.org/projects/xsdata/badge\n    :target: https://xsdata.readthedocs.io/\n\n.. image:: https://codecov.io/gh/tefra/xsdata/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/tefra/xsdata\n\n.. image:: https://img.shields.io/github/languages/top/tefra/xsdata.svg\n    :target: https://xsdata.readthedocs.io/\n\n.. image:: https://www.codefactor.io/repository/github/tefra/xsdata/badge\n   :target: https://www.codefactor.io/repository/github/tefra/xsdata\n\n.. image:: https://img.shields.io/pypi/pyversions/xsdata.svg\n    :target: https://pypi.org/pypi/xsdata/\n\n.. image:: https://img.shields.io/pypi/v/xsdata.svg\n    :target: https://pypi.org/pypi/xsdata/\n\n--------\n\nxsdata is a complete data binding library for python allowing developers to access and\nuse xml and json documents as simple objects rather than using dom.\n\nthe code generator supports xml schemas, dtd, wsdl definitions, xml & json documents.\nit produces simple dataclasses with type hints and simple binding metadata.\n\nthe included xml and json parser/serializer are highly optimized and adaptable, with\nmultiple handlers and configuration properties.\n\nxsdata is constantly tested against the\n`w3c xml schema 1.1 test suite <https://github.com/tefra/xsdata-w3c-tests>`_.\n\ngetting started\n---------------\n\n.. code:: console\n\n    $ # install all dependencies\n    $ pip install xsdata[cli,lxml,soap]\n\n.. code:: console\n\n    $ # generate models\n    $ xsdata tests/fixtures/primer/order.xsd --package tests.fixtures.primer\n\n.. code:: python\n\n    >>> # parse xml\n    >>> from pathlib import path\n    >>> from tests.fixtures.primer import purchaseorder\n    >>> from xsdata.formats.dataclass.parsers import xmlparser\n    >>>\n    >>> xml_string = path(\"tests/fixtures/primer/sample.xml\").read_text()\n    >>> parser = xmlparser()\n    >>> order = parser.from_string(xml_string, purchaseorder)\n    >>> order.bill_to\n    usaddress(name='robert smith', street='8 oak avenue', city='old town', state='pa', zip=decimal('95819'), country='us')\n\n\ncheck the `documentation <https://xsdata.readthedocs.io>`_ for more\n\u2728\u2728\u2728\n\nfeatures\n--------\n\n- generate code from:\n\n  - xml schemas 1.0 & 1.1\n  - wsdl 1.1 definitions with soap 1.1 bindings\n  - dtd external definitions\n  - directly from xml and json documents\n  - extensive configuration to customize output\n  - pluggable code writer for custom output formats\n\n- default output:\n\n  - pure python dataclasses with metadata\n  - type hints with support for forward references and unions\n  - enumerations and inner classes\n  - support namespace qualified elements and attributes\n\n- data binding:\n\n  - xml and json parser, serializer\n  - pycode serializer\n  - handlers and writers based on lxml and native xml python\n  - support wildcard elements and attributes\n  - support xinclude statements and unknown properties\n  - customize behaviour through config\n\n\n\nchangelog: 23.8 (2023-08-12)\n----------------------------\n- removed python 3.7 support\n- fixed pycodeserializer not adding imports for nested classes\n- fixed imports ordering\n- added support for strict content wildcard processing (`#803 <https://github.com/tefra/xsdata/pull/803>`_)\n",
  "docs_url": null,
  "keywords": "xsd,wsdl,schema,dtd,binding,xml,json,dataclasses,generator,cli",
  "license": "mit",
  "name": "xsdata",
  "package_url": "https://pypi.org/project/xsdata/",
  "project_url": "https://pypi.org/project/xsdata/",
  "project_urls": {
    "Changelog": "https://xsdata.readthedocs.io/en/latest/changelog.html",
    "Documentation": "https://xsdata.readthedocs.io/",
    "Homepage": "https://github.com/tefra/xsdata",
    "Source": "https://github.com/tefra/xsdata"
  },
  "release_url": "https://pypi.org/project/xsdata/23.8/",
  "requires_dist": [
    "typing-extensions",
    "click >=5.0 ; extra == 'cli'",
    "click-default-group >=1.2 ; extra == 'cli'",
    "docformatter >=1.7.2 ; extra == 'cli'",
    "jinja2 >=2.10 ; extra == 'cli'",
    "toposort >=1.5 ; extra == 'cli'",
    "furo ; extra == 'docs'",
    "sphinx ; extra == 'docs'",
    "sphinx-autobuild ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "sphinx-inline-tabs ; extra == 'docs'",
    "lxml >=4.4.1 ; extra == 'lxml'",
    "requests ; extra == 'soap'",
    "pre-commit ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-benchmark ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "python xml binding",
  "version": "23.8",
  "releases": [],
  "developers": [
    "chris@komposta.net"
  ],
  "kwds": "xsd xsdata xml wsdl lxml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_xsdata",
  "homepage": "",
  "release_count": 47,
  "dependency_ids": [
    "pypi_click",
    "pypi_click_default_group",
    "pypi_docformatter",
    "pypi_furo",
    "pypi_jinja2",
    "pypi_lxml",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_autobuild",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_inline_tabs",
    "pypi_toposort",
    "pypi_typing_extensions"
  ]
}
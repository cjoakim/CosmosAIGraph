{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries"
  ],
  "description": "expiring dict\n-------------\n\n.. image:: https://travis-ci.org/mailgun/expiringdict.svg?branch=master\n    :target: https://travis-ci.org/mailgun/expiringdict\n\n.. image:: https://coveralls.io/repos/github/mailgun/expiringdict/badge.svg?branch=master\n    :target: https://coveralls.io/github/mailgun/expiringdict?branch=master\n\nchangelog_\n\nexpiringdict is a python caching library. the core of the library is expiringdict class which\nis an ordered dictionary with auto-expiring values for caching purposes. expiration happens on\nany access, object is locked during cleanup from expired values. expiringdict can not store\nmore than `max_len` elements - the oldest will be deleted.\n\n**note:** iteration over dict and also keys() do not remove expired values!\n\n.. _changelog: ./changelog.rst\n\ninstallation\n------------\n\nif you wish to install from pypi:\n\n.. code-block:: bash\n\n    pip install expiringdict\n\nif you wish to download the source and install from github:\n\n.. code-block:: bash\n\n    git clone git@github.com:mailgun/expiringdict.git\n    python setup.py install\n\nor to install with test dependencies (`nose <http://readthedocs.org/docs/nose/en/latest/>`_, `mock <http://www.voidspace.org.uk/python/mock/>`_, `coverage <http://nedbatchelder.com/code/coverage/>`_) run from the directory above:\n\n.. code-block:: bash\n\n    pip install -e expiringdict[test]\n\nto run tests with coverage:\n\n.. code-block:: bash\n\n    nosetests --with-coverage --cover-package=expiringdict\n\nusage\n-----\n\ncreate a dictionary with capacity for 100 elements and elements expiring in 10 seconds:\n\n.. code-block:: py\n\n    from expiringdict import expiringdict\n    cache = expiringdict(max_len=100, max_age_seconds=10)\n\nput and get a value there:\n\n.. code-block:: py\n\n     cache[\"key\"] = \"value\"\n     cache.get(\"key\")\n\ncopy from dict or ordereddict:\n\n.. code-block:: py\n\n     from expiringdict import expiringdict\n     my_dict=dict()\n     my_dict['test'] = 1\n     cache = expiringdict(max_len=100, max_age_seconds=10, items=my_dict)\n     assert cache['test'] == 1\n\ncopy from another expiringdict, with or without new length and timeout:\n\n.. code-block:: py\n\n     from expiringdict import expiringdict\n     cache_hour = expiringdict(max_len=100, max_age_seconds=3600)\n     cache_hour['test'] = 1\n     cache_hour_copy = expiringdict(max_len=none, max_age_seconds=none, items=cache_hour)\n     cache_minute_copy = expiringdict(max_len=none, max_age_seconds=60, items=cache_hour)\n     assert cache_minute_copy['test'] == 1\n\n\npickle :\n\n.. code-block:: py\n\n    import dill\n    from expiringdict import expiringdict\n    cache = expiringdict(max_len=100, max_age_seconds=10)\n    cache['test'] = 1\n    pickled_cache = dill.dumps(cache)\n    unpickled_cache = dill.loads(cache)\n    assert unpickled_cache['test'] == 1\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2",
  "name": "expiringdict",
  "package_url": "https://pypi.org/project/expiringdict/",
  "project_url": "https://pypi.org/project/expiringdict/",
  "project_urls": {
    "Homepage": "https://www.mailgun.com/"
  },
  "release_url": "https://pypi.org/project/expiringdict/1.2.2/",
  "requires_dist": [
    "typing ; python_version < \"3.5\"",
    "dill ; extra == 'tests'",
    "coverage ; extra == 'tests'",
    "coveralls ; extra == 'tests'",
    "mock ; extra == 'tests'",
    "nose ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "dictionary with auto-expiring values for caching purposes",
  "version": "1.2.2",
  "releases": [],
  "developers": [
    "admin@mailgun.com",
    "mailgun_technologies_inc"
  ],
  "kwds": "expiringdict mailgun expiring expiration my_dict",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_expiringdict",
  "homepage": "https://www.mailgun.com/",
  "release_count": 9,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_dill",
    "pypi_mock",
    "pypi_nose",
    "pypi_typing"
  ]
}
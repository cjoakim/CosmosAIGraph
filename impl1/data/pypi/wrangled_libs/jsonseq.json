{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "# jsonseq\n\n[rfc 7464 json text sequences](https://tools.ietf.org/html/rfc7464) encoding and decoding for python.\n\n[![build\nstatus](https://travis-ci.com/sgillies/jsonseq.svg?branch=master)](https://travis-ci.com/sgillies/jsonseq)\n[![coverage\nstatus](https://coveralls.io/repos/github/sgillies/jsonseq/badge.svg?branch=master)](https://coveralls.io/github/sgillies/jsonseq?branch=master)\n[![documentation status](https://readthedocs.org/projects/jsonseq/badge/?version=latest)](https://jsonseq.readthedocs.io/en/latest/?badge=latest)\n\n## usage\n\nthe `jsonseq.encode.jsonseqencoder` class takes streams of json-serializable\npython objects and yields for each object its json representation sandwiched\nbetween an optional ascii record separator (rs, `\\x1e`) and a newline (`\\n`).\n\n```python\n>>> from jsonseq.encode import jsonseqencoder\n>>> for chunk in jsonseqencoder().encode(({\"a\": i, \"b\": i} for i in range(3))):\n...     print(repr(chunk))\n...\n'{\"a\": 0, \"b\": 0}\\n'\n'{\"a\": 1, \"b\": 1}\\n'\n'{\"a\": 2, \"b\": 2}\\n'\n```\n\nthe rs allows pretty-printed json to be streamed out in sequences that can be\ndecoded again.\n\n```python\n>>> for chunk in jsonseqencoder(with_rs=true, indent=2).encode(({\"a\": i, \"b\": i} for i in range(3))):\n...     print(repr(chunk))\n...\n'\\x1e{\\n  \"a\": 0,\\n  \"b\": 0\\n}\\n'\n'\\x1e{\\n  \"a\": 1,\\n  \"b\": 1\\n}\\n'\n'\\x1e{\\n  \"a\": 2,\\n  \"b\": 2\\n}\\n'\n```\n\nyou can also get small chunks of the json sequences as they are encoded with\nthe `iterencode()` method.\n\n```python\n>>> for chunk in jsonseqencoder(with_rs=true).iterencode(({\"a\": i} for i in range(3))):\n...     print(repr(chunk))\n...\n'\\x1e'\n'{'\n'\"a\"'\n': '\n'0'\n'}'\n'\\n'\n'\\x1e'\n'{'\n'\"a\"'\n': '\n'1'\n'}'\n'\\n'\n'\\x1e'\n'{'\n'\"a\"'\n': '\n'2'\n'}'\n'\\n'\n```\n\nyou can use either `encode()` or `iterencode()` to copy json text sequences to a file.\n\n```python\nwith open(\"/tmp/example.jsons\", \"w\") as f:\n    for chunk in jsonseqencoder(with_rs=true, indent=2).iterencode(({\"a\": i, \"b\": i} for i in range(3))):\n        f.write(chunk)\n```\n\nthere is no need to add a newline when calling the file's `write()` method.\njsonseqencoder ensures that it's already there where it needs to be.\n\nthe `jsonseq.decode.jsonseqdecoder` class takes streams of json texts\nsandwiched between the optional ascii record separator (rs, `\\x1e`) and\na newline (`\\n`) and yields decoded python objects.\n\n```python\n>>> stream = ['\\x1e', '{', '\"a\"', ': ', '0', '}', '\\n', '\\x1e', '{', '\"a\"', ': ', '1', '}', '\\n', '\\x1e', '{', '\"a\"', ': ', '2', '}', '\\n']\n>>> for obj in jsonseqdecoder().decode(stream):\n...     print(repr(obj))\n...\n{'a': 0}\n{'a': 1}\n{'a': 2}\n```\n\nobjects can be read from a file in the same way.\n\n```python\n>>> with open(\"/tmp/example.jsons\") as f:\n...     for obj in jsonseqdecoder().decode(f):\n...         print(repr(obj))\n...\n{'a': 0, 'b': 0}\n{'a': 1, 'b': 1}\n{'a': 2, 'b': 2}\n````\n\n\n",
  "docs_url": null,
  "keywords": "json rfc7464",
  "license": "",
  "name": "jsonseq",
  "package_url": "https://pypi.org/project/jsonseq/",
  "project_url": "https://pypi.org/project/jsonseq/",
  "project_urls": {
    "Homepage": "https://github.com/sgillies/jsonseq"
  },
  "release_url": "https://pypi.org/project/jsonseq/1.0.0/",
  "requires_dist": [
    "check-manifest ; extra == 'dev'",
    "pytest ; extra == 'test'",
    "pytest-cover ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "python support for rfc 7464 json text sequences",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "sean.gillies@gmail.com",
    "sean_gillies"
  ],
  "kwds": "jsonseqdecoder jsonseqencoder jsonseq jsons json",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jsonseq",
  "homepage": "https://github.com/sgillies/jsonseq",
  "release_count": 2,
  "dependency_ids": [
    "pypi_check_manifest",
    "pypi_pytest",
    "pypi_pytest_cover"
  ]
}
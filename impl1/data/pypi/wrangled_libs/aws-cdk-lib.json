{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "version 2 of the aws cloud development kit library\n# aws cloud development kit library\n\nthe aws cdk construct library provides apis to define your cdk application and add\ncdk constructs to the application.\n\n## usage\n\n### upgrade from cdk 1.x\n\nwhen upgrading from cdk 1.x, remove all dependencies to individual cdk packages\nfrom your dependencies file and follow the rest of the sections.\n\n### installation\n\nto use this package, you need to declare this package and the `constructs` package as\ndependencies.\n\naccording to the kind of project you are developing:\n\nfor projects that are cdk libraries in npm, declare them both under the `devdependencies` **and** `peerdependencies` sections.\nto make sure your library is compatible with the widest range of cdk versions: pick the minimum `aws-cdk-lib` version\nthat your library requires; declare a range dependency with a caret on that version in peerdependencies, and declare a\npoint version dependency on that version in devdependencies.\n\nfor example, let's say the minimum version your library needs is `2.38.0`. your `package.json` should look like this:\n\n```javascript\n{\n  \"peerdependencies\": {\n    \"aws-cdk-lib\": \"^2.38.0\",\n    \"constructs\": \"^10.0.0\"\n  },\n  \"devdependencies\": {\n    /* install the oldest version for testing so we don't accidentally use features from a newer version than we declare */\n    \"aws-cdk-lib\": \"2.38.0\"\n  }\n}\n```\n\nfor cdk apps, declare them under the `dependencies` section. use a caret so you always get the latest version:\n\n```json\n{\n  \"dependencies\": {\n    \"aws-cdk-lib\": \"^2.38.0\",\n    \"constructs\": \"^10.0.0\"\n  }\n}\n```\n\n### use in your code\n\n#### classic import\n\nyou can use a classic import to get access to each service namespaces:\n\n```python\nfrom aws_cdk import stack, app, aws_s3 as s3\n\napp = app()\nstack = stack(app, \"teststack\")\n\ns3.bucket(stack, \"testbucket\")\n```\n\n#### barrel import\n\nalternatively, you can use \"barrel\" imports:\n\n```python\nfrom aws_cdk import app, stack\nfrom aws_cdk.aws_s3 import bucket\n\napp = app()\nstack = stack(app, \"teststack\")\n\nbucket(stack, \"testbucket\")\n```\n\n<!--begin core documentation-->\n\n## stacks and stages\n\na `stack` is the smallest physical unit of deployment, and maps directly onto\na cloudformation stack. you define a stack by defining a subclass of `stack`\n-- let's call it `mystack` -- and instantiating the constructs that make up\nyour application in `mystack`'s constructor. you then instantiate this stack\none or more times to define different instances of your application. for example,\nyou can instantiate it once using few and cheap ec2 instances for testing,\nand once again using more and bigger ec2 instances for production.\n\nwhen your application grows, you may decide that it makes more sense to split it\nout across multiple `stack` classes. this can happen for a number of reasons:\n\n* you could be starting to reach the maximum number of resources allowed in a single\n  stack (this is currently 500).\n* you could decide you want to separate out stateful resources and stateless resources\n  into separate stacks, so that it becomes easy to tear down and recreate the stacks\n  that don't have stateful resources.\n* there could be a single stack with resources (like a vpc) that are shared\n  between multiple instances of other stacks containing your applications.\n\nas soon as your conceptual application starts to encompass multiple stacks,\nit is convenient to wrap them in another construct that represents your\nlogical application. you can then treat that new unit the same way you used\nto be able to treat a single stack: by instantiating it multiple times\nfor different instances of your application.\n\nyou can define a custom subclass of `stage`, holding one or more\n`stack`s, to represent a single logical instance of your application.\n\nas a final note: `stack`s are not a unit of reuse. they describe physical\ndeployment layouts, and as such are best left to application builders to\norganize their deployments with. if you want to vend a reusable construct,\ndefine it as a subclasses of `construct`: the consumers of your construct\nwill decide where to place it in their own stacks.\n\n## stack synthesizers\n\neach stack has a *synthesizer*, an object that determines how and where\nthe stack should be synthesized and deployed. the synthesizer controls\naspects like:\n\n* how does the stack reference assets? (either through cloudformation\n  parameters the cli supplies, or because the stack knows a predefined\n  location where assets will be uploaded).\n* what roles are used to deploy the stack? these can be bootstrapped\n  roles, roles created in some other way, or just the cli's current\n  credentials.\n\nthe following synthesizers are available:\n\n* `defaultstacksynthesizer`: recommended. uses predefined asset locations and\n  roles created by the modern bootstrap template. access control is done by\n  controlling who can assume the deploy role. this is the default stack\n  synthesizer in cdkv2.\n* `legacystacksynthesizer`: uses cloudformation parameters to communicate\n  asset locations, and the cli's current permissions to deploy stacks. this\n  is the default stack synthesizer in cdkv1.\n* `clicredentialsstacksynthesizer`: uses predefined asset locations, and the\n  cli's current permissions.\n\neach of these synthesizers takes configuration arguments. to configure\na stack with a synthesizer, pass it as one of its properties:\n\n```python\nmystack(app, \"mystack\",\n    synthesizer=defaultstacksynthesizer(\n        file_assets_bucket_name=\"my-orgs-asset-bucket\"\n    )\n)\n```\n\nfor more information on bootstrapping accounts and customizing synthesis,\nsee [bootstrapping in the cdk developer guide](https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html).\n\n## nested stacks\n\n[nested stacks](https://docs.aws.amazon.com/awscloudformation/latest/userguide/using-cfn-nested-stacks.html) are stacks created as part of other stacks. you create a nested stack within another stack by using the `nestedstack` construct.\n\nas your infrastructure grows, common patterns can emerge in which you declare the same components in multiple templates. you can separate out these common components and create dedicated templates for them. then use the resource in your template to reference other templates, creating nested stacks.\n\nfor example, assume that you have a load balancer configuration that you use for most of your stacks. instead of copying and pasting the same configurations into your templates, you can create a dedicated template for the load balancer. then, you just use the resource to reference that template from within other templates.\n\nthe following example will define a single top-level stack that contains two nested stacks: each one with a single amazon s3 bucket:\n\n```python\nclass mynestedstack(cfn.nestedstack):\n    def __init__(self, scope, id, *, parameters=none, timeout=none, notifications=none):\n        super().__init__(scope, id, parameters=parameters, timeout=timeout, notifications=notifications)\n\n        s3.bucket(self, \"nestedbucket\")\n\nclass myparentstack(stack):\n    def __init__(self, scope, id, *, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none, crossregionreferences=none, permissionsboundary=none, suppresstemplateindentation=none):\n        super().__init__(scope, id, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting, crossregionreferences=crossregionreferences, permissionsboundary=permissionsboundary, suppresstemplateindentation=suppresstemplateindentation)\n\n        mynestedstack(self, \"nested1\")\n        mynestedstack(self, \"nested2\")\n```\n\nresources references across nested/parent boundaries (even with multiple levels of nesting) will be wired by the aws cdk\nthrough cloudformation parameters and outputs. when a resource from a parent stack is referenced by a nested stack,\na cloudformation parameter will automatically be added to the nested stack and assigned from the parent; when a resource\nfrom a nested stack is referenced by a parent stack, a cloudformation output will be automatically be added to the\nnested stack and referenced using `fn::getatt \"outputs.xxx\"` from the parent.\n\nnested stacks also support the use of docker image and file assets.\n\n## accessing resources in a different stack\n\nyou can access resources in a different stack, as long as they are in the\nsame account and aws region (see [next section](#accessing-resources-in-a-different-stack-and-region) for an exception).\nthe following example defines the stack `stack1`,\nwhich defines an amazon s3 bucket. then it defines a second stack, `stack2`,\nwhich takes the bucket from stack1 as a constructor property.\n\n```python\nprod = {\"account\": \"123456789012\", \"region\": \"us-east-1\"}\n\nstack1 = stackthatprovidesabucket(app, \"stack1\", env=prod)\n\n# stack2 will take a property { bucket: ibucket }\nstack2 = stackthatexpectsabucket(app, \"stack2\",\n    bucket=stack1.bucket,\n    env=prod\n)\n```\n\nif the aws cdk determines that the resource is in the same account and\nregion, but in a different stack, it automatically synthesizes aws\ncloudformation\n[exports](https://docs.aws.amazon.com/awscloudformation/latest/userguide/using-cfn-stack-exports.html)\nin the producing stack and an\n[fn::importvalue](https://docs.aws.amazon.com/awscloudformation/latest/userguide/intrinsic-function-reference-importvalue.html)\nin the consuming stack to transfer that information from one stack to the\nother.\n\n## accessing resources in a different stack and region\n\n> **this feature is currently experimental**\n\nyou can enable the stack property `crossregionreferences`\nin order to access resources in a different stack *and* region. with this feature flag\nenabled it is possible to do something like creating a cloudfront distribution in `us-east-2` and\nan acm certificate in `us-east-1`.\n\n```python\nstack1 = stack(app, \"stack1\",\n    env=environment(\n        region=\"us-east-1\"\n    ),\n    cross_region_references=true\n)\ncert = acm.certificate(stack1, \"cert\",\n    domain_name=\"*.example.com\",\n    validation=acm.certificatevalidation.from_dns(route53.publichostedzone.from_hosted_zone_id(stack1, \"zone\", \"z0329774b51cgxtdqv3x\"))\n)\n\nstack2 = stack(app, \"stack2\",\n    env=environment(\n        region=\"us-east-2\"\n    ),\n    cross_region_references=true\n)\ncloudfront.distribution(stack2, \"distribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.httporigin(\"example.com\")\n    ),\n    domain_names=[\"dev.example.com\"],\n    certificate=cert\n)\n```\n\nwhen the aws cdk determines that the resource is in a different stack *and* is in a different\nregion, it will \"export\" the value by creating a custom resource in the producing stack which\ncreates ssm parameters in the consuming region for each exported value. the parameters will be\ncreated with the name '/cdk/exports/${consumingstackname}/${export-name}'.\nin order to \"import\" the exports into the consuming stack a [ssm dynamic reference](https://docs.aws.amazon.com/awscloudformation/latest/userguide/dynamic-references.html#dynamic-references-ssm)\nis used to reference the ssm parameter which was created.\n\nin order to mimic strong references, a custom resource is also created in the consuming\nstack which marks the ssm parameters as being \"imported\". when a parameter has been successfully\nimported, the producing stack cannot update the value.\n\nsee the [adr](https://github.com/aws/aws-cdk/blob/main/packages/@aws-cdk/core/adr/cross-region-stack-references)\nfor more details on this feature.\n\n### removing automatic cross-stack references\n\nthe automatic references created by cdk when you use resources across stacks\nare convenient, but may block your deployments if you want to remove the\nresources that are referenced in this way. you will see an error like:\n\n```text\nexport stack1:exportsoutputfngetatt-****** cannot be deleted as it is in use by stack1\n```\n\nlet's say there is a bucket in the `stack1`, and the `stack2` references its\n`bucket.bucketname`. you now want to remove the bucket and run into the error above.\n\nit's not safe to remove `stack1.bucket` while `stack2` is still using it, so\nunblocking yourself from this is a two-step process. this is how it works:\n\ndeployment 1: break the relationship\n\n* make sure `stack2` no longer references `bucket.bucketname` (maybe the consumer\n  stack now uses its own bucket, or it writes to an aws dynamodb table, or maybe you just\n  remove the lambda function altogether).\n* in the `stack1` class, call `this.exportvalue(this.bucket.bucketname)`. this\n  will make sure the cloudformation export continues to exist while the relationship\n  between the two stacks is being broken.\n* deploy (this will effectively only change the `stack2`, but it's safe to deploy both).\n\ndeployment 2: remove the resource\n\n* you are now free to remove the `bucket` resource from `stack1`.\n* don't forget to remove the `exportvalue()` call as well.\n* deploy again (this time only the `stack1` will be changed -- the bucket will be deleted).\n\n## durations\n\nto make specifications of time intervals unambiguous, a single class called\n`duration` is used throughout the aws construct library by all constructs\nthat that take a time interval as a parameter (be it for a timeout, a\nrate, or something else).\n\nan instance of duration is constructed by using one of the static factory\nmethods on it:\n\n```python\nduration.seconds(300) # 5 minutes\nduration.minutes(5) # 5 minutes\nduration.hours(1) # 1 hour\nduration.days(7) # 7 days\nduration.parse(\"pt5m\")\n```\n\ndurations can be added or subtracted together:\n\n```python\nduration.minutes(1).plus(duration.seconds(60)) # 2 minutes\nduration.minutes(5).minus(duration.seconds(10))\n```\n\n## size (digital information quantity)\n\nto make specification of digital storage quantities unambiguous, a class called\n`size` is available.\n\nan instance of `size` is initialized through one of its static factory methods:\n\n```python\nsize.kibibytes(200) # 200 kib\nsize.mebibytes(5) # 5 mib\nsize.gibibytes(40) # 40 gib\nsize.tebibytes(200) # 200 tib\nsize.pebibytes(3)\n```\n\ninstances of `size` created with one of the units can be converted into others.\nby default, conversion to a higher unit will fail if the conversion does not produce\na whole number. this can be overridden by unsetting `integral` property.\n\n```python\nsize.mebibytes(2).to_kibibytes() # yields 2048\nsize.kibibytes(2050).to_mebibytes(rounding=sizeroundingbehavior.floor)\n```\n\n## secrets\n\nto help avoid accidental storage of secrets as plain text, we use the `secretvalue` type to\nrepresent secrets. any construct that takes a value that should be a secret (such as\na password or an access key) will take a parameter of type `secretvalue`.\n\nthe best practice is to store secrets in aws secrets manager and reference them using `secretvalue.secretsmanager`:\n\n```python\nsecret = secretvalue.secrets_manager(\"secretid\",\n    json_field=\"password\",  # optional: key of a json field to retrieve (defaults to all content),\n    version_id=\"id\",  # optional: id of the version (default awscurrent)\n    version_stage=\"stage\"\n)\n```\n\nusing aws secrets manager is the recommended way to reference secrets in a cdk app.\n`secretvalue` also supports the following secret sources:\n\n* `secretvalue.unsafeplaintext(secret)`: stores the secret as plain text in your app and the resulting template (not recommended).\n* `secretvalue.secretsmanager(secret)`: refers to a secret stored in secrets manager\n* `secretvalue.ssmsecure(param, version)`: refers to a secret stored as a securestring in the ssm\n  parameter store. if you don't specify the exact version, aws cloudformation uses the latest\n  version of the parameter.\n* `secretvalue.cfnparameter(param)`: refers to a secret passed through a cloudformation parameter (must have `noecho: true`).\n* `secretvalue.cfndynamicreference(dynref)`: refers to a secret described by a cloudformation dynamic reference (used by `ssmsecure` and `secretsmanager`).\n* `secretvalue.resourceattribute(attr)`: refers to a secret returned from a cloudformation resource creation.\n\n`secretvalue`s should only be passed to constructs that accept properties of type\n`secretvalue`. these constructs are written to ensure your secrets will not be\nexposed where they shouldn't be. if you try to use a `secretvalue` in a\ndifferent location, an error about unsafe secret usage will be thrown at\nsynthesis time.\n\nif you rotate the secret's value in secrets manager, you must also change at\nleast one property on the resource where you are using the secret, to force\ncloudformation to re-read the secret.\n\n`secretvalue.ssmsecure()` is only supported for a limited set of resources.\n[click here for a list of supported resources and properties](https://docs.aws.amazon.com/awscloudformation/latest/userguide/dynamic-references.html#template-parameters-dynamic-patterns-resources).\n\n## arn manipulation\n\nsometimes you will need to put together or pick apart amazon resource names\n(arns). the functions `stack.formatarn()` and `stack.parsearn()` exist for\nthis purpose.\n\n`formatarn()` can be used to build an arn from components. it will automatically\nuse the region and account of the stack you're calling it on:\n\n```python\n# stack: stack\n\n\n# builds \"arn:<partition>:lambda:<region>:<account>:function:myfunction\"\nstack.format_arn(\n    service=\"lambda\",\n    resource=\"function\",\n    sep=\":\",\n    resource_name=\"myfunction\"\n)\n```\n\n`parsearn()` can be used to get a single component from an arn. `parsearn()`\nwill correctly deal with both literal arns and deploy-time values (tokens),\nbut in case of a deploy-time value be aware that the result will be another\ndeploy-time value which cannot be inspected in the cdk application.\n\n```python\n# stack: stack\n\n\n# extracts the function name out of an aws lambda function arn\narn_components = stack.parse_arn(arn, \":\")\nfunction_name = arn_components.resource_name\n```\n\nnote that depending on the service, the resource separator can be either\n`:` or `/`, and the resource name can be either the 6th or 7th\ncomponent in the arn. when using these functions, you will need to know\nthe format of the arn you are dealing with.\n\nfor an exhaustive list of arn formats used in aws, see [aws arns and\nnamespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)\nin the aws general reference.\n\n## dependencies\n\n### construct dependencies\n\nsometimes aws resources depend on other resources, and the creation of one\nresource must be completed before the next one can be started.\n\nin general, cloudformation will correctly infer the dependency relationship\nbetween resources based on the property values that are used. in the cases where\nit doesn't, the aws construct library will add the dependency relationship for\nyou.\n\nif you need to add an ordering dependency that is not automatically inferred,\nyou do so by adding a dependency relationship using\n`constructa.node.adddependency(constructb)`. this will add a dependency\nrelationship between all resources in the scope of `constructa` and all\nresources in the scope of `constructb`.\n\nif you want a single object to represent a set of constructs that are not\nnecessarily in the same scope, you can use a `dependencygroup`. the\nfollowing creates a single object that represents a dependency on two\nconstructs, `constructb` and `constructc`:\n\n```python\n# declare the dependable object\nb_and_c = dependencygroup()\nb_and_c.add(construct_b)\nb_and_c.add(construct_c)\n\n# take the dependency\nconstruct_a.node.add_dependency(b_and_c)\n```\n\n### stack dependencies\n\ntwo different stack instances can have a dependency on one another. this\nhappens when an resource from one stack is referenced in another stack. in\nthat case, cdk records the cross-stack referencing of resources,\nautomatically produces the right cloudformation primitives, and adds a\ndependency between the two stacks. you can also manually add a dependency\nbetween two stacks by using the `stacka.adddependency(stackb)` method.\n\na stack dependency has the following implications:\n\n* cyclic dependencies are not allowed, so if `stacka` is using resources from\n  `stackb`, the reverse is not possible anymore.\n* stacks with dependencies between them are treated specially by the cdk\n  toolkit:\n\n  * if `stacka` depends on `stackb`, running `cdk deploy stacka` will also\n    automatically deploy `stackb`.\n  * `stackb`'s deployment will be performed *before* `stacka`'s deployment.\n\n### cfnresource dependencies\n\nto make declaring dependencies between `cfnresource` objects easier, you can declare dependencies from one `cfnresource` object on another by using the `cfnresource1.adddependency(cfnresource2)` method. this method will work for resources both within the same stack and across stacks as it detects the relative location of the two resources and adds the dependency either to the resource or between the relevant stacks, as appropriate. if more complex logic is in needed, you can similarly remove, replace, or view dependencies between `cfnresource` objects with the `cfnresource` `removedependency`, `replacedependency`, and `obtaindependencies` methods, respectively.\n\n## custom resources\n\ncustom resources are cloudformation resources that are implemented by arbitrary\nuser code. they can do arbitrary lookups or modifications during a\ncloudformation deployment.\n\ncustom resources are backed by *custom resource providers*. commonly, these are\nlambda functions that are deployed in the same deployment as the one that\ndefines the custom resource itself, but they can also be backed by lambda\nfunctions deployed previously, or code responding to sns topic events running on\nec2 instances in a completely different account. for more information on custom\nresource providers, see the next section.\n\nonce you have a provider, each definition of a `customresource` construct\nrepresents one invocation. a single provider can be used for the implementation\nof arbitrarily many custom resource definitions. a single definition looks like\nthis:\n\n```python\ncustomresource(self, \"mymagicalresource\",\n    resource_type=\"custom::mycustomresource\",  # must start with 'custom::'\n\n    # the resource properties\n    properties={\n        \"property1\": \"foo\",\n        \"property2\": \"bar\"\n    },\n\n    # the arn of the provider (sns/lambda) which handles\n    # create, update or delete events for this resource type\n    # see next section for details\n    service_token=\"arn\"\n)\n```\n\n### custom resource providers\n\ncustom resources are backed by a **custom resource provider** which can be\nimplemented in one of the following ways. the following table compares the\nvarious provider types (ordered from low-level to high-level):\n\n| provider                                                             | compute type | error handling | submit to cloudformation |   max timeout   | language | footprint |\n| -------------------------------------------------------------------- | :----------: | :------------: | :----------------------: | :-------------: | :------: | :-------: |\n| [sns.topic](#amazon-sns-topic)                                       | self-managed |     manual     |          manual          |    unlimited    |   any    |  depends  |\n| [lambda.function](#aws-lambda-function)                              |  aws lambda  |     manual     |          manual          |      15min      |   any    |   small   |\n| [core.customresourceprovider](#the-corecustomresourceprovider-class) |  aws lambda  |      auto      |           auto           |      15min      | node.js  |   small   |\n| [custom-resources.provider](#the-custom-resource-provider-framework) |  aws lambda  |      auto      |           auto           | unlimited async |   any    |   large   |\n\nlegend:\n\n* **compute type**: which type of compute can be used to execute the handler.\n* **error handling**: whether errors thrown by handler code are automatically\n  trapped and a failed response is submitted to cloudformation. if this is\n  \"manual\", developers must take care of trapping errors. otherwise, events\n  could cause stacks to hang.\n* **submit to cloudformation**: whether the framework takes care of submitting\n  success/failed responses to cloudformation through the event's response url.\n* **max timeout**: maximum allows/possible timeout.\n* **language**: which programming languages can be used to implement handlers.\n* **footprint**: how many resources are used by the provider framework itself.\n\n**a note about singletons**\n\nwhen defining resources for a custom resource provider, you will likely want to\ndefine them as a *stack singleton* so that only a single instance of the\nprovider is created in your stack and which is used by all custom resources of\nthat type.\n\nhere is a basic pattern for defining stack singletons in the cdk. the following\nexamples ensures that only a single sns topic is defined:\n\n```python\ndef get_or_create(self, scope):\n    stack = stack.of(scope)\n    uniqueid = \"globallyuniqueidforsingleton\" # for example, a uuid from `uuidgen`\n    existing = stack.node.try_find_child(uniqueid)\n    if existing:\n        return existing\n    return sns.topic(stack, uniqueid)\n```\n\n#### amazon sns topic\n\nevery time a resource event occurs (create/update/delete), an sns notification\nis sent to the sns topic. users must process these notifications (e.g. through a\nfleet of worker hosts) and submit success/failure responses to the\ncloudformation service.\n\n> you only need to use this type of provider if your custom resource cannot run on aws lambda, for reasons other than the 15\n> minute timeout. if you are considering using this type of provider because you want to write a custom resource provider that may need\n> to wait for more than 15 minutes for the api calls to stabilize, have a look at the [`custom-resources`](#the-custom-resource-provider-framework) module first.\n>\n> refer to the [cloudformation custom resource documentation](https://docs.aws.amazon.com/awscloudformation/latest/userguide/template-custom-resources.html) for information on the contract your custom resource needs to adhere to.\n\nset `servicetoken` to `topic.topicarn`  in order to use this provider:\n\n```python\ntopic = sns.topic(self, \"myprovider\")\n\ncustomresource(self, \"myresource\",\n    service_token=topic.topic_arn\n)\n```\n\n#### aws lambda function\n\nan aws lambda function is called *directly* by cloudformation for all resource\nevents. the handler must take care of explicitly submitting a success/failure\nresponse to the cloudformation service and handle various error cases.\n\n> **we do not recommend you use this provider type.** the cdk has wrappers around lambda functions that make them easier to work with.\n>\n> if you do want to use this provider, refer to the [cloudformation custom resource documentation](https://docs.aws.amazon.com/awscloudformation/latest/userguide/template-custom-resources.html) for information on the contract your custom resource needs to adhere to.\n\nset `servicetoken` to `lambda.functionarn` to use this provider:\n\n```python\nfn = lambda_.function(self, \"myprovider\", function_props)\n\ncustomresource(self, \"myresource\",\n    service_token=fn.function_arn\n)\n```\n\n#### the `core.customresourceprovider` class\n\nthe class [`@aws-cdk/core.customresourceprovider`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_core.customresourceprovider.html) offers a basic low-level\nframework designed to implement simple and slim custom resource providers. it\ncurrently only supports node.js-based user handlers, represents permissions as raw\njson blobs instead of `iam.policystatement` objects, and it does not have\nsupport for asynchronous waiting (handler cannot exceed the 15min lambda\ntimeout).\n\n> **as an application builder, we do not recommend you use this provider type.** this provider exists purely for custom resources that are part of the aws construct library.\n>\n> the [`custom-resources`](#the-custom-resource-provider-framework) provider is more convenient to work with and more fully-featured.\n\nthe provider has a built-in singleton method which uses the resource type as a\nstack-unique identifier and returns the service token:\n\n```python\nservice_token = customresourceprovider.get_or_create(self, \"custom::mycustomresourcetype\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=customresourceproviderruntime.nodejs_18_x,\n    description=\"lambda function created by the custom resource provider\"\n)\n\ncustomresource(self, \"myresource\",\n    resource_type=\"custom::mycustomresourcetype\",\n    service_token=service_token\n)\n```\n\nthe directory (`my-handler` in the above example) must include an `index.js` file. it cannot import\nexternal dependencies or files outside this directory. it must export an async\nfunction named `handler`. this function accepts the cloudformation resource\nevent object and returns an object with the following structure:\n\n```js\nexports.handler = async function(event) {\n  const id = event.physicalresourceid; // only for \"update\" and \"delete\"\n  const props = event.resourceproperties;\n  const oldprops = event.oldresourceproperties; // only for \"update\"s\n\n  switch (event.requesttype) {\n    case \"create\":\n      // ...\n\n    case \"update\":\n      // ...\n\n      // if an error is thrown, a failed response will be submitted to cfn\n      throw new error('failed!');\n\n    case \"delete\":\n      // ...\n  }\n\n  return {\n    // (optional) the value resolved from `resource.ref`\n    // defaults to \"event.physicalresourceid\" or \"event.requestid\"\n    physicalresourceid: \"ref\",\n\n    // (optional) calling `resource.getatt(\"att1\")` on the custom resource in the cdk app\n    // will return the value \"bar\".\n    data: {\n      att1: \"bar\",\n      att2: \"baz\"\n    },\n\n    // (optional) user-visible message\n    reason: \"user-visible message\",\n\n    // (optional) hides values from the console\n    noecho: true\n  };\n}\n```\n\nhere is an complete example of a custom resource that summarizes two numbers:\n\n`sum-handler/index.js`:\n\n```js\nexports.handler = async (e) => {\n  return {\n    data: {\n      result: e.resourceproperties.lhs + e.resourceproperties.rhs,\n    },\n  };\n};\n```\n\n`sum.ts`:\n\n```python\nfrom constructs import construct\nfrom aws_cdk import customresource, customresourceprovider, customresourceproviderruntime, token\n\nclass sum(construct):\n\n    def __init__(self, scope, id, *, lhs, rhs):\n        super().__init__(scope, id)\n\n        resource_type = \"custom::sum\"\n        service_token = customresourceprovider.get_or_create(self, resource_type,\n            code_directory=f\"{__dirname}/sum-handler\",\n            runtime=customresourceproviderruntime.nodejs_18_x\n        )\n\n        resource = customresource(self, \"resource\",\n            resource_type=resource_type,\n            service_token=service_token,\n            properties={\n                \"lhs\": lhs,\n                \"rhs\": rhs\n            }\n        )\n\n        self.result = token.as_number(resource.get_att(\"result\"))\n```\n\nusage will look like this:\n\n```python\nsum = sum(self, \"mysum\", lhs=40, rhs=2)\ncfnoutput(self, \"result\", value=token.as_string(sum.result))\n```\n\nto access the arn of the provider's aws lambda function role, use the `getorcreateprovider()`\nbuilt-in singleton method:\n\n```python\nprovider = customresourceprovider.get_or_create_provider(self, \"custom::mycustomresourcetype\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=customresourceproviderruntime.nodejs_18_x\n)\n\nrole_arn = provider.role_arn\n```\n\nthis role arn can then be used in resource-based iam policies.\n\nto add iam policy statements to this role, use `addtorolepolicy()`:\n\n```python\nprovider = customresourceprovider.get_or_create_provider(self, \"custom::mycustomresourcetype\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=customresourceproviderruntime.nodejs_18_x\n)\nprovider.add_to_role_policy({\n    \"effect\": \"allow\",\n    \"action\": \"s3:getobject\",\n    \"resource\": \"*\"\n})\n```\n\nnote that `addtorolepolicy()` uses direct iam json policy blobs, *not* a\n`iam.policystatement` object like you will see in the rest of the cdk.\n\n#### the custom resource provider framework\n\nthe [`@aws-cdk/custom-resources`](https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html) module includes an advanced framework for\nimplementing custom resource providers.\n\nhandlers are implemented as aws lambda functions, which means that they can be\nimplemented in any lambda-supported runtime. furthermore, this provider has an\nasynchronous mode, which means that users can provide an `iscomplete` lambda\nfunction which is called periodically until the operation is complete. this\nallows implementing providers that can take up to two hours to stabilize.\n\nset `servicetoken` to `provider.servicetoken` to use this type of provider:\n\n```python\nprovider = customresources.provider(self, \"myprovider\",\n    on_event_handler=on_event_handler,\n    is_complete_handler=is_complete_handler\n)\n\ncustomresource(self, \"myresource\",\n    service_token=provider.service_token\n)\n```\n\nsee the [documentation](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-cdk-lib.custom_resources-readme.html) for more details.\n\n## aws cloudformation features\n\na cdk stack synthesizes to an aws cloudformation template. this section\nexplains how this module allows users to access low-level cloudformation\nfeatures when needed.\n\n### stack outputs\n\ncloudformation [stack outputs](https://docs.aws.amazon.com/awscloudformation/latest/userguide/outputs-section-structure.html) and exports are created using\nthe `cfnoutput` class:\n\n```python\ncfnoutput(self, \"outputname\",\n    value=my_bucket.bucket_name,\n    description=\"the name of an s3 bucket\",  # optional\n    export_name=\"theawesomebucket\"\n)\n```\n\n### parameters\n\ncloudformation templates support the use of [parameters](https://docs.aws.amazon.com/awscloudformation/latest/userguide/parameters-section-structure.html) to\ncustomize a template. they enable cloudformation users to input custom values to\na template each time a stack is created or updated. while the cdk design\nphilosophy favors using build-time parameterization, users may need to use\ncloudformation in a number of cases (for example, when migrating an existing\nstack to the aws cdk).\n\ntemplate parameters can be added to a stack by using the `cfnparameter` class:\n\n```python\ncfnparameter(self, \"myparameter\",\n    type=\"number\",\n    default=1337\n)\n```\n\nthe value of parameters can then be obtained using one of the `value` methods.\nas parameters are only resolved at deployment time, the values obtained are\nplaceholder tokens for the real value (`token.isunresolved()` would return `true`\nfor those):\n\n```python\nparam = cfnparameter(self, \"parametername\")\n\n# if the parameter is a string\nparam.value_as_string\n\n# if the parameter is a number\nparam.value_as_number\n\n# if the parameter is a list\nparam.value_as_list\n```\n\n### pseudo parameters\n\ncloudformation supports a number of [pseudo parameters](https://docs.aws.amazon.com/awscloudformation/latest/userguide/pseudo-parameter-reference.html),\nwhich resolve to useful values at deployment time. cloudformation pseudo\nparameters can be obtained from static members of the `aws` class.\n\nit is generally recommended to access pseudo parameters from the scope's `stack`\ninstead, which guarantees the values produced are qualifying the designated\nstack, which is essential in cases where resources are shared cross-stack:\n\n```python\n# \"this\" is the current construct\nstack = stack.of(self)\n\nstack.account # returns the aws::accountid for this stack (or the literal value if known)\nstack.region # returns the aws::region for this stack (or the literal value if known)\nstack.partition\n```\n\n### resource options\n\ncloudformation resources can also specify [resource\nattributes](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-product-attribute-reference.html). the `cfnresource` class allows\naccessing those through the `cfnoptions` property:\n\n```python\nraw_bucket = s3.cfnbucket(self, \"bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = cfncondition(self, \"enablebucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"metadatavalue\"\n}\n```\n\nresource dependencies (the `dependson` attribute) is modified using the\n`cfnresource.adddependency` method:\n\n```python\nresource_a = cfnresource(self, \"resourcea\", resource_props)\nresource_b = cfnresource(self, \"resourceb\", resource_props)\n\nresource_b.add_dependency(resource_a)\n```\n\n#### creationpolicy\n\nsome resources support a [creationpolicy](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-attribute-creationpolicy.html) to be specified as a cfnoption.\n\nthe creation policy is invoked only when aws cloudformation creates the associated resource. currently, the only aws cloudformation resources that support creation policies are `cfnautoscalinggroup`, `cfninstance`, `cfnwaitcondition` and `cfnfleet`.\n\nthe `cfnfleet` resource from the `aws-appstream` module supports specifying `startfleet` as\na property of the creationpolicy on the resource options. setting it to true will make aws cloudformation wait until the fleet is started before continuing with the creation of\nresources that depend on the fleet resource.\n\n```python\nfleet = appstream.cfnfleet(self, \"fleet\",\n    instance_type=\"stream.standard.small\",\n    name=\"fleet\",\n    compute_capacity=appstream.cfnfleet.computecapacityproperty(\n        desired_instances=1\n    ),\n    image_name=\"appstream-amazonlinux2-09-21-2022\"\n)\nfleet.cfn_options.creation_policy = cfncreationpolicy(\n    start_fleet=true\n)\n```\n\nthe properties passed to the level 2 constructs `autoscalinggroup` and `instance` from the\n`aws-ec2` module abstract what is passed into the `cfnoption` properties `resourcesignal` and\n`autoscalingcreationpolicy`, but when using level 1 constructs you can specify these yourself.\n\nthe cfnwaitcondition resource from the `aws-cloudformation` module suppports the `resourcesignal`.\nthe format of the timeout is `pt#h#m#s`. in the example below aws cloudformation will wait for\n3 success signals to occur within 15 minutes before the status of the resource will be set to\n`create_complete`.\n\n```python\n# resource: cfnresource\n\n\nresource.cfn_options.creation_policy = cfncreationpolicy(\n    resource_signal=cfnresourcesignal(\n        count=3,\n        timeout=\"pr15m\"\n    )\n)\n```\n\n### intrinsic functions and condition expressions\n\ncloudformation supports [intrinsic functions](https://docs.aws.amazon.com/awscloudformation/latest/userguide/intrinsic-function-reference.html). these functions\ncan be accessed from the `fn` class, which provides type-safe methods for each\nintrinsic function as well as condition expressions:\n\n```python\n# my_object_or_array: any\n# my_array: any\n\n\n# to use fn::base64\nfn.base64(\"sgvsbg8gq0rliqo=\")\n\n# to compose condition expressions:\nenvironment_parameter = cfnparameter(self, \"environment\")\nfn.condition_and(\n    # the \"environment\" cloudformation template parameter evaluates to \"production\"\n    fn.condition_equals(\"production\", environment_parameter),\n    # the aws::region pseudo-parameter value is not equal to \"us-east-1\"\n    fn.condition_not(fn.condition_equals(\"us-east-1\", aws.region)))\n\n# to use fn::tojsonstring\nfn.to_json_string(my_object_or_array)\n\n# to use fn::length\nfn.len(fn.split(\",\", my_array))\n```\n\nwhen working with deploy-time values (those for which `token.isunresolved`\nreturns `true`), idiomatic conditionals from the programming language cannot be\nused (the value will not be known until deployment time). when conditional logic\nneeds to be expressed with un-resolved values, it is necessary to use\ncloudformation conditions by means of the `cfncondition` class:\n\n```python\nenvironment_parameter = cfnparameter(self, \"environment\")\nis_prod = cfncondition(self, \"isproduction\",\n    expression=fn.condition_equals(\"production\", environment_parameter)\n)\n\n# configuration value that is a different string based on isproduction\nstage = fn.condition_if(is_prod.logical_id, \"beta\", \"prod\").to_string()\n\n# make bucket creation condition to isproduction by accessing\n# and overriding the cloudformation resource\nbucket = s3.bucket(self, \"bucket\")\ncfn_bucket = my_bucket.node.default_child\ncfn_bucket.cfn_options.condition = is_prod\n```\n\n### mappings\n\ncloudformation [mappings](https://docs.aws.amazon.com/awscloudformation/latest/userguide/mappings-section-structure.html) are created and queried using the\n`cfnmappings` class:\n\n```python\nregion_table = cfnmapping(self, \"regiontable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"us east (n. virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"us east (ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(aws.region, \"regionname\")\n```\n\nthis will yield the following template:\n\n```yaml\nmappings:\n  regiontable:\n    us-east-1:\n      regionname: us east (n. virginia)\n    us-east-2:\n      regionname: us east (ohio)\n```\n\nmappings can also be synthesized \"lazily\"; lazy mappings will only render a \"mappings\"\nsection in the synthesized cloudformation template if some `findinmap` call is unable to\nimmediately return a concrete value due to one or both of the keys being unresolved tokens\n(some value only available at deploy-time).\n\nfor example, the following code will not produce anything in the \"mappings\" section. the\ncall to `findinmap` will be able to resolve the value during synthesis and simply return\n`'us east (ohio)'`.\n\n```python\nregion_table = cfnmapping(self, \"regiontable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"us east (n. virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"us east (ohio)\"\n        }\n    },\n    lazy=true\n)\n\nregion_table.find_in_map(\"us-east-2\", \"regionname\")\n```\n\non the other hand, the following code will produce the \"mappings\" section shown above,\nsince the top-level key is an unresolved token. the call to `findinmap` will return a token that resolves to\n`{ \"fn::findinmap\": [ \"regiontable\", { \"ref\": \"aws::region\" }, \"regionname\" ] }`.\n\n```python\n# region_table: cfnmapping\n\n\nregion_table.find_in_map(aws.region, \"regionname\")\n```\n\n### dynamic references\n\ncloudformation supports [dynamically resolving](https://docs.aws.amazon.com/awscloudformation/latest/userguide/dynamic-references.html) values\nfor ssm parameters (including secure strings) and secrets manager. encoding such\nreferences is done using the `cfndynamicreference` class:\n\n```python\ncfndynamicreference(cfndynamicreferenceservice.secrets_manager, \"secret-id:secret-string:json-key:version-stage:version-id\")\n```\n\n### template options & transform\n\ncloudformation templates support a number of options, including which macros or\n[transforms](https://docs.aws.amazon.com/awscloudformation/latest/userguide/transform-section-structure.html) to use when deploying the stack. those can be\nconfigured using the `stack.templateoptions` property:\n\n```python\nstack = stack(app, \"stackname\")\n\nstack.template_options.description = \"this will appear in the aws console\"\nstack.template_options.transforms = [\"aws::serverless-2016-10-31\"]\nstack.template_options.metadata = {\n    \"metadata_key\": \"metadatavalue\"\n}\n```\n\n### emitting raw resources\n\nthe `cfnresource` class allows emitting arbitrary entries in the\n[resources](https://docs.aws.amazon.com/awscloudformation/latest/userguide/resources-section-structure.html) section of the cloudformation template.\n\n```python\ncfnresource(self, \"resourceid\",\n    type=\"aws::s3::bucket\",\n    properties={\n        \"bucketname\": \"bucket-name\"\n    }\n)\n```\n\nas for any other resource, the logical id in the cloudformation template will be\ngenerated by the aws cdk, but the type and properties will be copied verbatim in\nthe synthesized template.\n\n### including raw cloudformation template fragments\n\nwhen migrating a cloudformation stack to the aws cdk, it can be useful to\ninclude fragments of an existing template verbatim in the synthesized template.\nthis can be achieved using the `cfninclude` class.\n\n```python\ncfninclude(self, \"id\",\n    template={\n        \"resources\": {\n            \"bucket\": {\n                \"type\": \"aws::s3::bucket\",\n                \"properties\": {\n                    \"bucketname\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)\n```\n\n### termination protection\n\nyou can prevent a stack from being accidentally deleted by enabling termination\nprotection on the stack. if a user attempts to delete a stack with termination\nprotection enabled, the deletion fails and the stack--including its status--remains\nunchanged. enabling or disabling termination protection on a stack sets it for any\nnested stacks belonging to that stack as well. you can enable termination protection\non a stack by setting the `terminationprotection` prop to `true`.\n\n```python\nstack = stack(app, \"stackname\",\n    termination_protection=true\n)\n```\n\nby default, termination protection is disabled.\n\n### description\n\nyou can add a description of the stack in the same way as `stackprops`.\n\n```python\nstack = stack(app, \"stackname\",\n    description=\"this is a description.\"\n)\n```\n\n### cfnjson\n\n`cfnjson` allows you to postpone the resolution of a json blob from\ndeployment-time. this is useful in cases where the cloudformation json template\ncannot express a certain value.\n\na common example is to use `cfnjson` in order to render a json map which needs\nto use intrinsic functions in keys. since json map keys must be strings, it is\nimpossible to use intrinsics in keys and `cfnjson` can help.\n\nthe following example defines an iam role which can only be assumed by\nprincipals that are tagged with a specific tag.\n\n```python\ntag_param = cfnparameter(self, \"tagname\")\n\nstring_equals = cfnjson(self, \"conditionjson\",\n    value={\n        \"f\"aws:principaltag/{tagparam.valueasstring}\"\": true\n    }\n)\n\nprincipal = iam.accountrootprincipal().with_conditions({\n    \"stringequals\": string_equals\n})\n\niam.role(self, \"myrole\", assumed_by=principal)\n```\n\n**explanation**: since in this example we pass the tag name through a parameter, it\ncan only be resolved during deployment. the resolved value can be represented in\nthe template through a `{ \"ref\": \"tagname\" }`. however, since we want to use\nthis value inside a [`aws:principaltag/tag-name`](https://docs.aws.amazon.com/iam/latest/userguide/reference_policies_condition-keys.html#condition-keys-principaltag)\niam operator, we need it in the *key* of a `stringequals` condition. json keys\n*must be* strings, so to circumvent this limitation, we use `cfnjson`\nto \"delay\" the rendition of this template section to deploy-time. this means\nthat the value of `stringequals` in the template will be `{ \"fn::getatt\": [ \"conditionjson\", \"value\" ] }`, and will only \"expand\" to the operator we synthesized during deployment.\n\n### stack resource limit\n\nwhen deploying to aws cloudformation, it needs to keep in check the amount of resources being added inside a stack. currently it's possible to check the limits in the [aws cloudformation quotas](https://docs.aws.amazon.com/awscloudformation/latest/userguide/cloudformation-limits.html) page.\n\nit's possible to synthesize the project with more resources than the allowed (or even reduce the number of resources).\n\nset the context key `@aws-cdk/core:stackresourcelimit` with the proper value, being 0 for disable the limit of resources.\n\n## app context\n\n[context values](https://docs.aws.amazon.com/cdk/v2/guide/context.html) are key-value pairs that can be associated with an app, stack, or construct.\none common use case for context is to use it for enabling/disabling [feature flags](https://docs.aws.amazon.com/cdk/v2/guide/featureflags.html). there are several places\nwhere context can be specified. they are listed below in the order they are evaluated (items at the\ntop take precedence over those below).\n\n* the `node.setcontext()` method\n* the `postclicontext` prop when you create an `app`\n* the cli via the `--context` cli argument\n* the `cdk.json` file via the `context` key:\n* the `cdk.context.json` file:\n* the `~/.cdk.json` file via the `context` key:\n* the `context` prop when you create an `app`\n\n### examples of setting context\n\n```python\napp(\n    context={\n        \"@aws-cdk/core:newstylestacksynthesis\": true\n    }\n)\n```\n\n```python\napp = app()\napp.node.set_context(\"@aws-cdk/core:newstylestacksynthesis\", true)\n```\n\n```python\napp(\n    post_cli_context={\n        \"@aws-cdk/core:newstylestacksynthesis\": true\n    }\n)\n```\n\n```console\ncdk synth --context @aws-cdk/core:newstylestacksynthesis=true\n```\n\n*cdk.json*\n\n```json\n{\n  \"context\": {\n    \"@aws-cdk/core:newstylestacksynthesis\": true\n  }\n}\n```\n\n*cdk.context.json*\n\n```json\n{\n  \"@aws-cdk/core:newstylestacksynthesis\": true\n}\n```\n\n*~/.cdk.json*\n\n```json\n{\n  \"context\": {\n    \"@aws-cdk/core:newstylestacksynthesis\": true\n  }\n}\n```\n\n## iam permissions boundary\n\nit is possible to apply an [iam permissions boundary](https://docs.aws.amazon.com/iam/latest/userguide/access_policies_boundaries.html)\nto all roles within a specific construct scope. the most common use case would\nbe to apply a permissions boundary at the `stage` level.\n\n```python\nprod_stage = stage(app, \"prodstage\",\n    permissions_boundary=permissionsboundary.from_name(\"cdk-${qualifier}-permissionsboundary\")\n)\n```\n\nany iam roles or users created within this stage will have the default\npermissions boundary attached.\n\nfor more details see the [permissions boundary](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_iam-readme.html#permissions-boundaries) section in the iam guide.\n\n## policy validation\n\nif you or your organization use (or would like to use) any policy validation tool, such as\n[cloudformation\nguard](https://docs.aws.amazon.com/cfn-guard/latest/ug/what-is-guard.html) or\n[opa](https://www.openpolicyagent.org/), to define constraints on your\ncloudformation template, you can incorporate them into the cdk application.\nby using the appropriate plugin, you can make the cdk application check the\ngenerated cloudformation templates against your policies immediately after\nsynthesis. if there are any violations, the synthesis will fail and a report\nwill be printed to the console or to a file (see below).\n\n> **note**\n> this feature is considered experimental, and both the plugin api and the\n> format of the validation report are subject to change in the future.\n\n### for application developers\n\nto use one or more validation plugins in your application, use the\n`policyvalidationbeta1` property of `stage`:\n\n```python\n# globally for the entire app (an app is a stage)\napp = app(\n    policy_validation_beta1=[\n        # these hypothetical classes implement ipolicyvalidationpluginbeta1:\n        thirdpartypluginx(),\n        thirdpartypluginy()\n    ]\n)\n\n# only apply to a particular stage\nprod_stage = stage(app, \"prodstage\",\n    policy_validation_beta1=[\n        thirdpartypluginx()\n    ]\n)\n```\n\nimmediately after synthesis, all plugins registered this way will be invoked to\nvalidate all the templates generated in the scope you defined. in particular, if\nyou register the templates in the `app` object, all templates will be subject to\nvalidation.\n\n> **warning**\n> other than modifying the cloud assembly, plugins can do anything that your cdk\n> application can. they can read data from the filesystem, access the network\n> etc. it's your responsibility as the consumer of a plugin to verify that it is\n> secure to use.\n\nby default, the report will be printed in a human readable format. if you want a\nreport in json format, enable it using the `@aws-cdk/core:validationreportjson`\ncontext passing it directly to the application:\n\n```python\napp = app(\n    context={\"@aws-cdk/core:validationreportjson\": true}\n)\n```\n\nalternatively, you can set this context key-value pair using the `cdk.json` or\n`cdk.context.json` files in your project directory (see\n[runtime context](https://docs.aws.amazon.com/cdk/v2/guide/context.html)).\n\nif you choose the json format, the cdk will print the policy validation report\nto a file called `policy-validation-report.json` in the cloud assembly\ndirectory. for the default, human-readable format, the report will be printed to\nthe standard output.\n\n### for plugin authors\n\nthe communication protocol between the cdk core module and your policy tool is\ndefined by the `ipolicyvalidationpluginbeta1` interface. to create a new plugin you must\nwrite a class that implements this interface. there are two things you need to\nimplement: the plugin name (by overriding the `name` property), and the\n`validate()` method.\n\nthe framework will call `validate()`, passing an `ipolicyvalidationcontextbeta1` object.\nthe location of the templates to be validated is given by `templatepaths`. the\nplugin should return an instance of `policyvalidationpluginreportbeta1`. this object\nrepresents the report that the user wil receive at the end of the synthesis.\n\n```python\n@jsii.implements(ipolicyvalidationpluginbeta1)\nclass myplugin:\n\n    def validate(self, context):\n        # first read the templates using context.templatepaths...\n\n        # ...then perform the validation, and then compose and return the report.\n        # using hard-coded values here for better clarity:\n        return policyvalidationpluginreportbeta1(\n            success=false,\n            violations=[policyviolationbeta1(\n                rule_name=\"ckv_aws_117\",\n                description=\"ensure that aws lambda function is configured inside a vpc\",\n                fix=\"https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1\",\n                violating_resources=[policyviolatingresourcebeta1(\n                    resource_logical_id=\"myfunction3baa72d1\",\n                    template_path=\"/home/johndoe/myapp/cdk.out/myservice.template.json\",\n                    locations=[\"properties/vpcconfig\"]\n                )]\n            )]\n        )\n```\n\nnote that plugins are not allowed to modify anything in the cloud assembly. any\nattempt to do so will result in synthesis failure.\n\nif your plugin depends on an external tool, keep in mind that some developers may\nnot have that tool installed in their workstations yet. to minimize friction, we\nhighly recommend that you provide some installation script along with your\nplugin package, to automate the whole process. better yet, run that script as\npart of the installation of your package. with `npm`, for example, you can run\nadd it to the `postinstall`\n[script](https://docs.npmjs.com/cli/v9/using-npm/scripts) in the `package.json`\nfile.\n\n<!--end core documentation-->\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk-lib",
  "package_url": "https://pypi.org/project/aws-cdk-lib/",
  "project_url": "https://pypi.org/project/aws-cdk-lib/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk-lib/2.116.1/",
  "requires_dist": [
    "aws-cdk.asset-awscli-v1 <3.0.0,>=2.2.201",
    "aws-cdk.asset-kubectl-v20 <3.0.0,>=2.1.2",
    "aws-cdk.asset-node-proxy-agent-v6 <3.0.0,>=2.0.1",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.93.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "version 2 of the aws cloud development kit library",
  "version": "2.116.1",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk cdk_core cdk dependencies aws_iam",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk_lib",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 203,
  "dependency_ids": [
    "pypi_aws_cdk.asset_awscli_v1",
    "pypi_aws_cdk.asset_kubectl_v20",
    "pypi_aws_cdk.asset_node_proxy_agent_v6",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is a PyPI (Python Package Index) page for the `aws-cdk-lib` package version 2.131.0, released on March 1, 2024. It provides a comprehensive overview of the AWS Cloud Development Kit (CDK) library, which allows developers to define cloud infrastructure in code and provision it through AWS CloudFormation. The library supports Python version 3.8 and newer, and it is licensed under the Apache-2.0 license. The page includes instructions for installation, usage, and upgrading from CDK 1.x. It also details various features of the AWS CDK, such as working with stacks, nested stacks, and custom resources, along with advanced topics like intrinsic functions, mappings, and CloudFormation features. Additionally, it mentions accessibility considerations, browser compatibility warnings for IE9 and below, and a note on JavaScript requirement for some features.",
  "embedding": [
    -0.01418203767389059,
    0.01821243204176426,
    -0.01044051069766283,
    -0.03537943959236145,
    0.016300402581691742,
    0.03183048963546753,
    -0.0184737890958786,
    -0.006994729395955801,
    -0.024966439232230186,
    -0.019409170374274254,
    0.007173552643507719,
    0.015653887763619423,
    -0.00315691321156919,
    0.020702198147773743,
    -0.01066060084849596,
    0.0030606240034103394,
    0.008679792284965515,
    -0.011307114735245705,
    -0.008150201290845871,
    0.009938430972397327,
    0.012118695303797722,
    -0.01044051069766283,
    0.0008704724023118615,
    -0.008040156215429306,
    -0.008377168327569962,
    0.008645403198897839,
    0.003082976909354329,
    -0.03493925929069519,
    0.02877674251794815,
    -0.005388761404901743,
    0.03755282610654831,
    0.0012087745126336813,
    -0.01687813736498356,
    -0.016135334968566895,
    -0.028446609154343605,
    -0.028446609154343605,
    0.0024966439232230186,
    0.0003400215646252036,
    0.03229818120598793,
    -0.015062396414577961,
    0.012971543706953526,
    0.006513283122330904,
    0.006496088579297066,
    0.00016581962700001895,
    -0.03471916913986206,
    0.002720172517001629,
    0.017015693709254265,
    -0.02023450657725334,
    -0.015186197124421597,
    0.020358307287096977,
    0.015571354888379574,
    0.0204408410936594,
    -0.006606133189052343,
    -0.026658378541469574,
    -0.011203947477042675,
    -0.01264140848070383,
    -0.01906527951359749,
    0.018336232751607895,
    0.00955327320843935,
    -0.01892772503197193,
    0.00934006180614233,
    0.028474120423197746,
    -0.0007767623174004257,
    -0.028859276324510574,
    -0.016548002138733864,
    -0.0067436895333230495,
    -0.02588806487619877,
    0.026658378541469574,
    -0.010378610342741013,
    0.004343335051089525,
    0.0330134741961956,
    0.05163857340812683,
    -0.00173062807880342,
    -0.02418236806988716,
    0.01995939575135708,
    0.005364689044654369,
    -0.05683819577097893,
    0.009594540111720562,
    -0.0165067370980978,
    0.0032927498687058687,
    -0.0034870479721575975,
    0.003779354738071561,
    0.017084471881389618,
    0.03257329389452934,
    0.008562869392335415,
    0.0021132060792297125,
    0.003696821164339781,
    0.007063507568091154,
    -0.0158051997423172,
    -0.01121082529425621,
    -0.00337872258387506,
    -0.0064788940362632275,
    0.002623883308842778,
    0.0377454049885273,
    -0.01844627782702446,
    0.019491704180836678,
    -0.011609737761318684,
    0.018308721482753754,
    -0.001967052696272731,
    -0.03375627472996712,
    0.004625325091183186,
    0.01503488514572382,
    -0.02676842361688614,
    -0.003492206335067749,
    -0.040964215993881226,
    -0.022008981555700302,
    -0.0018449716735631227,
    0.008837982080876827,
    0.026905979961156845,
    0.033701252192258835,
    -0.015640132129192352,
    0.014993618242442608,
    -0.001996283419430256,
    -0.03755282610654831,
    0.017483385279774666,
    -0.02326074242591858,
    -0.008700425736606121,
    -0.009704585187137127,
    -0.008205223828554153,
    -0.005099893547594547,
    -0.009677073918282986,
    0.04786953330039978,
    0.012056794948875904,
    -0.010619333945214748,
    0.0008150201174430549,
    -0.005230572074651718,
    -0.024938927963376045,
    -0.028281541541218758,
    0.0017074155621230602,
    -0.021802647039294243,
    0.010715622454881668,
    0.0004369556554593146,
    0.012717064470052719,
    -0.04068910330533981,
    -0.020358307287096977,
    0.004683786537498236,
    0.002494924468919635,
    0.016204113140702248,
    -0.011857339181005955,
    -0.0036417986266314983,
    1.8363207345828414e-05,
    0.021651335060596466,
    -0.014305838383734226,
    0.010241053998470306,
    0.0036005317233502865,
    0.018542567268013954,
    0.014195793308317661,
    -0.011547837406396866,
    0.01251760870218277,
    0.0009697707719169557,
    0.010811911895871162,
    0.007032557390630245,
    -0.030014747753739357,
    -0.01416828203946352,
    0.002871484262868762,
    0.030922619625926018,
    0.0028474119026213884,
    -0.0031294021755456924,
    -0.011045757681131363,
    -0.015158685855567455,
    0.013322311453521252,
    0.03155537694692612,
    -0.012249373830854893,
    -0.01932663656771183,
    0.030399905517697334,
    0.04547605663537979,
    0.015406287275254726,
    -0.03224315866827965,
    -0.011238336563110352,
    0.007668754551559687,
    0.008432190865278244,
    0.0030503072775900364,
    -0.030262349173426628,
    0.009367573074996471,
    0.0016532527515664697,
    0.008507846854627132,
    -0.004209217615425587,
    0.012806476093828678,
    -0.02326074242591858,
    0.005440345034003258,
    0.004088856279850006,
    0.014333349652588367,
    -0.010371732525527477,
    0.029024343937635422,
    -0.016561757773160934,
    -0.006038714200258255,
    0.007221696898341179,
    0.020303284749388695,
    0.015089907683432102,
    0.01844627782702446,
    0.015296242199838161,
    0.03928603231906891,
    -0.009395084343850613,
    -0.03408640995621681,
    -0.6074478626251221,
    -0.02617693319916725,
    -0.01625913567841053,
    -0.03881834074854851,
    -0.015915244817733765,
    -0.003208496840670705,
    0.024691326543688774,
    0.04498085752129555,
    -0.04217471182346344,
    0.036782510578632355,
    -0.007187307812273502,
    0.03125275298953056,
    0.004288312513381243,
    -0.0010677794925868511,
    -0.015227464027702808,
    -0.010846300981938839,
    -0.024292413145303726,
    -0.012435074895620346,
    0.009793996810913086,
    0.015117418952286243,
    -0.009601417928934097,
    0.043165113776922226,
    -0.001343751442618668,
    0.0008163097081705928,
    -0.0017796325264498591,
    0.01550257671624422,
    0.012703308835625648,
    -0.016850626096129417,
    0.011884850449860096,
    0.00944322906434536,
    -0.03056497313082218,
    0.02594308741390705,
    0.012496975250542164,
    -0.011843583546578884,
    0.040716614574193954,
    0.005234010983258486,
    -0.028061451390385628,
    0.014856062829494476,
    0.00014035023923497647,
    0.038763318210840225,
    -0.005595095921307802,
    0.01154095958918333,
    -0.0060937367379665375,
    0.009938430972397327,
    0.010633089579641819,
    -0.0023143819998949766,
    0.034609124064445496,
    0.031720444560050964,
    -0.014457149431109428,
    -0.03815807029604912,
    0.018061120063066483,
    -0.03232569247484207,
    0.019161568954586983,
    -0.015131174586713314,
    0.0165067370980978,
    -0.0030279543716460466,
    0.017868541181087494,
    -0.015021129511296749,
    0.028281541541218758,
    0.007005046121776104,
    -0.00967019610106945,
    0.009800874628126621,
    -0.017469629645347595,
    -0.020688442513346672,
    -0.006998168304562569,
    -0.012380052357912064,
    0.0035076814237982035,
    -0.014580950140953064,
    0.0010290918871760368,
    -0.025984354317188263,
    -0.007654998917132616,
    -0.0020908531732857227,
    0.003634920809417963,
    -0.010481777600944042,
    0.033921342343091965,
    0.03411392122507095,
    0.03183048963546753,
    -0.02617693319916725,
    -0.020041929557919502,
    0.011616615578532219,
    0.027291137725114822,
    0.0006568305543623865,
    -0.0038137438241392374,
    -0.023425810039043427,
    0.024540014564990997,
    -0.013996336609125137,
    -0.015227464027702808,
    -0.018515055999159813,
    -0.010591822676360607,
    -0.00016614202468190342,
    0.007572465110570192,
    0.016176601871848106,
    -0.008267123252153397,
    -0.024443725124001503,
    -0.005932108499109745,
    0.029326967895030975,
    0.011327747255563736,
    0.022738028317689896,
    -0.04371533915400505,
    -0.008748570457100868,
    -0.011802316643297672,
    -0.0015045201871544123,
    -0.004876364953815937,
    -0.02522779442369938,
    0.03760784864425659,
    0.013074710965156555,
    -0.018996501341462135,
    0.006152198184281588,
    0.029932215809822083,
    -0.02261422947049141,
    -0.014773529022932053,
    -0.025626707822084427,
    0.0013471903512254357,
    -0.014264571480453014,
    0.02569548599421978,
    -0.02390725538134575,
    0.004807586781680584,
    0.008184590376913548,
    0.015241219662129879,
    0.0073454976081848145,
    -0.0065683056600391865,
    0.002768317237496376,
    0.0014022128889337182,
    -0.010296076536178589,
    0.004986410029232502,
    -0.002298906911164522,
    0.006736811716109514,
    -0.027607515454292297,
    -0.018583834171295166,
    0.008961781859397888,
    0.0006585500086657703,
    0.024773860350251198,
    0.030262349173426628,
    -0.0028646064456552267,
    0.0372777134180069,
    0.008115812204778194,
    0.04437560960650444,
    -0.007373008877038956,
    0.004398357588797808,
    -0.023797212168574333,
    -0.006035275291651487,
    0.0011821230873465538,
    -0.0009396803216077387,
    -0.02965710312128067,
    0.009312550537288189,
    -0.014966107904911041,
    -0.01605280116200447,
    -0.012015528045594692,
    -0.0027648783288896084,
    0.001781351980753243,
    -0.0125038530677557,
    -0.004821342416107655,
    -0.01548882108181715,
    0.02810271829366684,
    0.005103332456201315,
    -0.01907903514802456,
    0.00012412291835062206,
    -0.01054367795586586,
    0.0049520209431648254,
    0.006623327732086182,
    0.004137000534683466,
    0.0017796325264498591,
    -0.011334625072777271,
    -0.007971378043293953,
    -0.013129733502864838,
    0.022738028317689896,
    -0.022958118468523026,
    0.025846797972917557,
    -0.010247931815683842,
    -0.03730522468686104,
    -0.016768092289566994,
    0.012407563626766205,
    -0.013136611320078373,
    0.0017985464073717594,
    0.05337177962064743,
    0.022339116781949997,
    0.004628763999789953,
    0.002809584140777588,
    0.0033322973176836967,
    0.0027855117805302143,
    -0.005350933410227299,
    0.01841876655817032,
    -0.016424203291535378,
    -0.019587993621826172,
    0.028474120423197746,
    0.014856062829494476,
    0.008411557413637638,
    -0.00390659412369132,
    -0.01846003346145153,
    -0.007593098562210798,
    -0.01997315138578415,
    0.015461309812963009,
    -0.0014194073155522346,
    0.03202306851744652,
    -0.03562703728675842,
    0.004890120588243008,
    0.007854455150663853,
    0.009401962161064148,
    0.0025808969512581825,
    0.03205057978630066,
    0.0044568185694515705,
    0.028020184487104416,
    0.0042814346961677074,
    0.005130843725055456,
    -0.006901878863573074,
    -0.015103663317859173,
    -0.002321259817108512,
    -0.007785677444189787,
    0.00620722072198987,
    -0.0022146538831293583,
    0.04569614678621292,
    0.007930111140012741,
    -0.017029449343681335,
    -0.030427416786551476,
    0.02127993479371071,
    0.012820231728255749,
    -0.016644291579723358,
    -0.011307114735245705,
    -0.011451547965407372,
    0.017001938074827194,
    0.030427416786551476,
    0.009230016730725765,
    0.01067435648292303,
    -0.017634697258472443,
    -0.01579144410789013,
    -0.00877608172595501,
    0.016382936388254166,
    0.01822618767619133,
    0.002166509162634611,
    -0.015420042909681797,
    -0.015942756086587906,
    0.01218059565871954,
    0.008975537493824959,
    -0.019931884482502937,
    -0.0005846135900355875,
    -0.0051170880906283855,
    0.022545451298356056,
    -0.023687167093157768,
    0.041817065328359604,
    0.0010909921256825328,
    0.019876861944794655,
    -0.0015965108759701252,
    0.023343276232481003,
    -0.020317040383815765,
    0.00030090403743088245,
    0.021857669577002525,
    0.018363744020462036,
    0.024746349081397057,
    -0.002983248559758067,
    -0.009512006305158138,
    0.0012758331140503287,
    0.00964268483221531,
    -0.0023556489031761885,
    0.028391586616635323,
    0.019808083772659302,
    0.002833656268194318,
    -0.001068639219738543,
    -0.0025619829539209604,
    0.018542567268013954,
    0.02810271829366684,
    -0.008384046144783497,
    0.006135003641247749,
    0.036342330276966095,
    0.011052635498344898,
    0.032188136130571365,
    -0.02198147028684616,
    -0.0017589990748092532,
    -0.039423588663339615,
    -0.026507066562771797,
    -0.025819286704063416,
    0.005113649182021618,
    -0.01687813736498356,
    0.008700425736606121,
    -0.028157740831375122,
    0.027511227875947952,
    -0.005467856302857399,
    0.020344551652669907,
    0.005526317749172449,
    0.017043204978108406,
    0.01262765284627676,
    -0.014058236964046955,
    -0.04024892672896385,
    0.04107426106929779,
    -0.0020409892313182354,
    -0.009099338203668594,
    -0.012228740379214287,
    -0.019945640116930008,
    0.03983625769615173,
    -0.022517940029501915,
    0.04390791803598404,
    -0.007579342927783728,
    0.013645568862557411,
    0.020317040383815765,
    0.012015528045594692,
    -0.015392531640827656,
    -0.019147813320159912,
    0.015942756086587906,
    -0.012359418906271458,
    0.0011735258158296347,
    0.008060789667069912,
    0.0058083077892661095,
    -0.0057979910634458065,
    0.015860222280025482,
    0.022242827340960503,
    0.04145941883325577,
    0.029381990432739258,
    -0.006042153108865023,
    -0.0028869593515992165,
    -0.014443393796682358,
    -0.008666036650538445,
    -0.01141028106212616,
    -0.003930666483938694,
    0.0034887674264609814,
    -0.014305838383734226,
    0.00411292864009738,
    -0.0037827936466783285,
    0.010062231682240963,
    -0.015199952758848667,
    0.00953951757401228,
    -0.0039960057474672794,
    -0.0011073269415646791,
    -0.02544788457453251,
    0.004078539554029703,
    0.02478761598467827,
    0.02614942193031311,
    0.004051028285175562,
    0.01176104974001646,
    0.02111486718058586,
    -0.02221531607210636,
    -0.022875584661960602,
    -0.042477335780858994,
    0.0032428859267383814,
    0.003806866006925702,
    0.005392200313508511,
    -0.02418236806988716,
    -0.009800874628126621,
    0.008837982080876827,
    0.003827499458566308,
    0.018088631331920624,
    0.0045599858276546,
    0.006994729395955801,
    0.021417489275336266,
    -0.0217751357704401,
    -0.02088102139532566,
    -0.001475289580412209,
    0.011740416288375854,
    0.03155537694692612,
    0.016204113140702248,
    -0.0024605353828519583,
    0.022504184395074844,
    -0.02243540622293949,
    0.009202505461871624,
    -0.003714015707373619,
    -0.02592933177947998,
    -0.010371732525527477,
    -0.0036486764438450336,
    -0.009697707369923592,
    0.0452834777534008,
    -0.02130744606256485,
    0.04077163711190224,
    0.010454266332089901,
    0.01995939575135708,
    0.006956901401281357,
    -0.0040544671937823296,
    0.013377333991229534,
    -0.010034720413386822,
    0.006375726778060198,
    0.013673080131411552,
    0.014085748232901096,
    -0.026438288390636444,
    0.014292082749307156,
    0.03488423675298691,
    0.0011288200039416552,
    -0.00500360457226634,
    0.006245048716664314,
    0.019450437277555466,
    -0.0377454049885273,
    -0.02041332982480526,
    0.029024343937635422,
    0.0003595803282223642,
    0.04745686799287796,
    -0.008906759321689606,
    0.02612191066145897,
    -0.04987785592675209,
    -0.007386764511466026,
    -0.03642486408352852,
    -0.02346707694232464,
    -0.018955234438180923,
    -0.003971933387219906,
    -0.01956048235297203,
    0.01581895537674427,
    0.030922619625926018,
    -0.008721059188246727,
    -0.0309776421636343,
    -0.009264405816793442,
    -0.03510432690382004,
    -0.01649298146367073,
    0.01865261234343052,
    0.030895108357071877,
    0.0005244327476248145,
    0.02763502672314644,
    0.00901680439710617,
    -0.013652446679770947,
    -0.00920938327908516,
    -0.012792720459401608,
    -0.010447388514876366,
    -0.00846657995134592,
    -0.05023549869656563,
    -0.0028680453542619944,
    -0.015392531640827656,
    0.001274113659746945,
    -0.0005141160800121725,
    0.022655494511127472,
    0.04586121439933777,
    -0.005240888800472021,
    0.013542401604354382,
    0.019037768244743347,
    -0.028914298862218857,
    0.019216591492295265,
    0.033233560621738434,
    0.002068500267341733,
    0.017400851473212242,
    0.008274001069366932,
    -0.017222028225660324,
    0.007214819081127644,
    -0.013638691045343876,
    0.02550290711224079,
    0.0027046974282711744,
    0.01605280116200447,
    0.009154360741376877,
    0.007070385385304689,
    0.006423871498554945,
    -0.017084471881389618,
    -0.0068021509796381,
    0.000702396035194397,
    -0.03339862823486328,
    0.00205646432004869,
    0.013253533281385899,
    0.016121579334139824,
    0.0021613507997244596,
    -0.0038206216413527727,
    0.0041610728949308395,
    -0.00889988150447607,
    -0.02748371660709381,
    -0.0026720280293375254,
    -0.028859276324510574,
    -0.0007032557623460889,
    0.03100515343248844,
    -0.002873203717172146,
    0.03576459363102913,
    -0.015860222280025482,
    -0.022449161857366562,
    -0.028694210574030876,
    0.005099893547594547,
    0.025392862036824226,
    0.007042874116450548,
    -0.006943145766854286,
    0.004023517016321421,
    0.023123186081647873,
    -0.004508402198553085,
    0.02550290711224079,
    -0.0028680453542619944,
    -0.029161900281906128,
    -0.010612456128001213,
    -0.011781683191657066,
    0.0009499970474280417,
    -0.002242164919152856,
    -0.010385488159954548,
    -0.023810967803001404,
    -0.023453321307897568,
    -0.030344882979989052,
    0.014360860921442509,
    0.010584944859147072,
    0.026204444468021393,
    -0.00603183638304472,
    0.021816402673721313,
    -0.0184737890958786,
    0.005368127953261137,
    -0.007943866774439812,
    -6.931539246579632e-05,
    0.026947246864438057,
    -0.0007780519081279635,
    0.0160390455275774,
    0.0413493737578392,
    0.029024343937635422,
    0.013893169350922108,
    0.024333680048584938,
    -0.013611179776489735,
    0.009188749827444553,
    -0.016217868775129318,
    -0.010667478665709496,
    -9.833114745561033e-06,
    -0.006241609808057547,
    -0.023824723437428474,
    0.022765539586544037,
    0.02324698679149151,
    0.012558874674141407,
    -0.0048419758677482605,
    0.023384543135762215,
    0.010798156261444092,
    0.004938265308737755,
    -0.013851902447640896,
    -0.02238038368523121,
    -0.005770479794591665,
    -0.018061120063066483,
    -0.0057876743376255035,
    -0.016960671171545982,
    0.02616317756474018,
    -0.0487498939037323,
    -0.02638326585292816,
    0.007483053952455521,
    -0.010289198718965054,
    0.0010187751613557339,
    -0.013212266378104687,
    0.024003544822335243,
    0.008961781859397888,
    0.0037724769208580256,
    0.028419097885489464,
    0.03169293329119682,
    0.0009697707719169557,
    0.00362460408359766,
    -0.021197400987148285,
    -0.0032841528300195932,
    0.0195742379873991,
    0.02572299726307392,
    0.01067435648292303,
    -0.0048522925935685635,
    0.013796879909932613,
    0.0040682228282094,
    0.019876861944794655,
    0.01471850648522377,
    -0.0008175992988981307,
    0.032408226281404495,
    -0.018171165138483047,
    -0.020358307287096977,
    -0.00779943261295557,
    -0.04720926657319069,
    -0.011313991621136665,
    0.021211156621575356,
    -0.009092460386455059,
    0.018776413053274155,
    0.025351595133543015,
    -0.008342779241502285,
    0.0016051081474870443,
    0.018322477117180824,
    0.001272394205443561,
    0.04572365805506706,
    0.010419877246022224,
    0.016974426805973053,
    0.024526258930563927,
    0.012373174540698528,
    -0.00511021027341485,
    -0.013982580974698067,
    -0.016809359192848206,
    -0.018528811633586884,
    0.03224315866827965,
    0.030702529475092888,
    -0.00889988150447607,
    -0.015860222280025482,
    -0.005251205526292324,
    0.017414607107639313,
    -0.007544953841716051,
    -0.002312662545591593,
    0.018501300364732742,
    -0.016217868775129318,
    -0.008095178753137589,
    -0.015557599253952503,
    -0.01868012361228466,
    -0.01351489033550024,
    0.001537189818918705,
    0.0012104939669370651,
    -0.00708414101973176,
    0.01396194752305746,
    0.00942947342991829,
    -0.011788561008870602,
    0.00637228786945343,
    -0.00291103171184659,
    0.0010832545813173056,
    0.020770976319909096,
    -0.028033940121531487,
    -0.00313284108415246,
    -0.010131008923053741,
    -0.02038581855595112,
    0.005952741950750351,
    -0.02592933177947998,
    0.030922619625926018,
    -0.013542401604354382,
    -0.007861332967877388,
    0.04151444137096405,
    0.008961781859397888,
    -0.013329189270734787,
    0.00887237023562193,
    -0.001841532764956355,
    0.038103047758340836,
    -0.020798487588763237,
    -0.006399799138307571,
    -0.016644291579723358,
    -0.017400851473212242,
    0.014333349652588367,
    -0.013838146813213825,
    -0.0027648783288896084,
    -0.014333349652588367,
    -0.01109390240162611,
    -0.011135169304907322,
    0.014209548942744732,
    -0.013102222234010696,
    -0.023412054404616356,
    -0.029024343937635422,
    0.0015303120017051697,
    -0.01623162440955639,
    -0.014663483947515488,
    -0.015695154666900635,
    0.012668919749557972,
    -0.00989028625190258,
    -0.007441787049174309,
    -0.005756724160164595,
    -0.027827605605125427,
    0.010736255906522274,
    0.0076206098310649395,
    0.009381328709423542,
    0.011135169304907322,
    0.05571023374795914,
    -0.024732593446969986,
    0.022916851565241814,
    -0.028391586616635323,
    -0.011375891976058483,
    -0.019904373213648796,
    0.011018246412277222,
    0.0040544671937823296,
    -0.00964268483221531,
    0.02745620533823967,
    -0.010591822676360607,
    -0.04407298564910889,
    -0.03491174802184105,
    0.016080312430858612,
    0.010818789713084698,
    0.00488668167963624,
    -0.02132120169699192,
    -2.8182887035654858e-05,
    0.021046089008450508,
    0.0029144706204533577,
    -0.00034754417720250785,
    -0.031720444560050964,
    0.04407298564910889,
    -0.002120083896443248,
    -0.01755216345191002,
    0.03320604935288429,
    -0.009498250670731068,
    0.008377168327569962,
    -0.02375594526529312,
    0.006337898783385754,
    0.007317986339330673,
    -0.019010256975889206,
    -0.015021129511296749,
    -0.009910919703543186,
    0.0032961887773126364,
    -0.020275773480534554,
    0.018184920772910118,
    -0.014264571480453014,
    -0.02370092272758484,
    -0.022036492824554443,
    0.026520822197198868,
    0.029106877744197845,
    -0.012957788072526455,
    0.03006977029144764,
    0.019464192911982536,
    0.020991066470742226,
    0.008218979462981224,
    -0.007063507568091154,
    -0.0195742379873991,
    -0.040331460535526276,
    -0.009133727289736271,
    -0.0465489961206913,
    -0.0034990841522812843,
    -0.014553438872098923,
    0.033508673310279846,
    0.004917631857097149,
    -0.0020427086856216192,
    -0.03383880853652954,
    -0.014305838383734226,
    -0.018625101074576378,
    -0.018845191225409508,
    -0.01384502463042736,
    0.044485654681921005,
    0.013363578356802464,
    0.013336067087948322,
    0.03375627472996712,
    0.012380052357912064,
    -0.008535358123481274,
    0.032875917851924896,
    -0.014856062829494476,
    -0.0029557375237345695,
    0.0073248641565442085,
    0.005344056058675051,
    0.007146041374653578,
    -0.016795603558421135,
    -0.025159016251564026,
    -0.01044051069766283,
    0.01504864078015089,
    0.012827109545469284,
    0.0022662372794002295,
    0.05117088183760643,
    -0.022064004093408585,
    -0.00975960772484541,
    -0.013611179776489735,
    0.003889399813488126,
    -0.01228376291692257,
    0.027566248551011086,
    -0.008954904042184353,
    -0.025530418381094933,
    -0.016094068065285683,
    0.0029437013436108828,
    0.01844627782702446,
    0.007379886694252491,
    0.003399356035515666,
    -0.0016635694773867726,
    -0.02616317756474018,
    -0.0029763709753751755,
    -0.007613732013851404,
    -0.02282056212425232,
    -0.005873647052794695,
    0.004594374913722277,
    0.01449841633439064,
    -0.0027115752454847097,
    0.010371732525527477,
    0.026658378541469574,
    -0.0019085913663730025,
    -0.0050517488270998,
    -0.02704353630542755,
    0.026452044025063515,
    -0.02326074242591858,
    -0.007317986339330673,
    0.00015636264288332313,
    -0.0008343639201484621,
    -0.0012053356040269136,
    0.00013572922034654766,
    0.010612456128001213,
    -0.014415882527828217,
    -0.027181092649698257,
    0.0020942920818924904,
    -0.0004642519634217024,
    -0.03777291625738144,
    5.155668259249069e-05,
    0.004608130548149347,
    0.0034045143984258175,
    0.0011881410609930754,
    0.019491704180836678,
    0.008150201290845871,
    0.005846135783940554,
    -0.001718592015095055,
    -0.00675744516775012,
    -0.014195793308317661,
    0.008012644946575165,
    -0.0014959229156374931,
    -0.020468352362513542,
    -0.02328825369477272,
    0.005966497119516134,
    0.006592377554625273,
    -0.018556322902441025,
    0.02243540622293949,
    0.1667180359363556,
    0.02220156043767929,
    0.024897661060094833,
    0.01841876655817032,
    -0.006829662248492241,
    -0.005670751444995403,
    0.00942947342991829,
    0.02858416549861431,
    -0.02921692281961441,
    0.01645171456038952,
    -0.009601417928934097,
    -0.007648121099919081,
    -0.010811911895871162,
    0.00987653061747551,
    0.0066645946353673935,
    -0.012049917131662369,
    -0.022751783952116966,
    -0.021843913942575455,
    -0.022765539586544037,
    0.007840699516236782,
    0.020289529114961624,
    -0.016616780310869217,
    -0.0027614394202828407,
    -0.02749747224152088,
    0.026892224326729774,
    -0.01998690702021122,
    -0.01241444144397974,
    0.013446112163364887,
    0.00987653061747551,
    0.015227464027702808,
    -0.028639188036322594,
    0.02066093124449253,
    -0.006341337691992521,
    -0.021431244909763336,
    -0.03562703728675842,
    -0.01605280116200447,
    0.012249373830854893,
    -0.01074313372373581,
    0.02679593488574028,
    0.032380715012550354,
    -0.03364622965455055,
    -0.0522163100540638,
    -0.02198147028684616,
    -0.02022075094282627,
    0.005467856302857399,
    -0.02108735591173172,
    -0.020688442513346672,
    -0.013865658082067966,
    0.012118695303797722,
    0.007400520145893097,
    -0.011637249030172825,
    0.011238336563110352,
    0.029492035508155823,
    0.011891728267073631,
    -0.004707858897745609,
    -0.011884850449860096,
    0.028694210574030876,
    0.01976681686937809,
    -0.0012801317498087883,
    0.01668555848300457,
    -0.021142378449440002,
    0.01973930560052395,
    -0.01623162440955639,
    -0.009766485542058945,
    -0.030812574550509453,
    0.007820066064596176,
    -0.02196771465241909,
    0.0017366461688652635,
    -0.009725218638777733,
    0.0017598588019609451,
    -0.016217868775129318,
    -0.03227066993713379,
    -0.0004244896408636123,
    0.004611569456756115,
    0.005557267926633358,
    -0.013638691045343876,
    0.025874309241771698,
    0.0058977194130420685,
    0.006361971143633127,
    0.02921692281961441,
    -0.0016162846004590392,
    0.009745852090418339,
    -0.019037768244743347,
    -0.01165788248181343,
    0.009044315665960312,
    -0.01547506544739008,
    0.030675018206238747,
    -0.024003544822335243,
    -0.0048522925935685635,
    -0.0005313105648383498,
    -0.009051193483173847,
    -0.0043708463199436665,
    0.005883963778614998,
    -0.007696265820413828,
    0.022545451298356056,
    0.036314819008111954,
    -0.0036314819008111954,
    -0.005240888800472021,
    -0.0081364456564188,
    -0.003910033032298088,
    -0.022064004093408585,
    0.056342992931604385,
    0.012146206572651863,
    0.018391255289316177,
    -0.016740581020712852,
    -0.017400851473212242,
    -0.02262798324227333,
    0.028157740831375122,
    -0.0022163731046020985,
    -0.005646679550409317,
    -0.006578621920198202,
    -0.027057291939854622,
    0.003934105392545462,
    0.00038128840969875455,
    -0.01774474047124386,
    0.012029283680021763,
    -0.024031056091189384,
    0.002372843213379383,
    -0.005928669590502977,
    -0.006310387514531612,
    -0.03221564739942551,
    -0.02588806487619877,
    0.01218059565871954,
    -0.00010214617941528559,
    -0.0019790888763964176,
    -0.005368127953261137,
    -0.02502146176993847,
    -0.0019997223280370235,
    -0.013012810610234737,
    -0.0320780910551548,
    0.01738709583878517,
    -0.007489931304007769,
    0.03551699221134186,
    0.009305672720074654,
    -0.01584646664559841,
    -0.017455874010920525,
    -0.006650839000940323,
    -0.008500969037413597,
    0.0007926672114990652,
    0.02220156043767929,
    -0.011926116421818733,
    0.0022954680025577545,
    0.0020942920818924904,
    -0.012098061852157116,
    0.03271085023880005,
    -0.01691940426826477,
    0.01583271101117134,
    -0.005863330326974392,
    -0.012393807992339134,
    -0.01416828203946352,
    -0.015942756086587906,
    -0.01625913567841053,
    0.026974758133292198,
    -0.009030560031533241,
    0.02503521740436554,
    -0.008177712559700012,
    -0.008514724671840668,
    -0.013425478711724281,
    0.01415452640503645,
    -0.0003531324036885053,
    -0.02324698679149151,
    -0.016437958925962448,
    0.015736421570181847,
    0.0071391635574400425,
    -0.02133495733141899,
    -0.006613011006265879,
    -0.17398099601268768,
    -0.002262798370793462,
    0.011754171922802925,
    -0.04200964421033859,
    0.005529756657779217,
    -0.003940983209758997,
    0.002431304659694433,
    0.015406287275254726,
    0.0058770859614014626,
    -0.0077306549064815044,
    0.013109100051224232,
    0.008267123252153397,
    0.0013428917154669762,
    -0.009704585187137127,
    -0.00500360457226634,
    -0.012118695303797722,
    -0.014856062829494476,
    -0.004357090685516596,
    0.020138218998908997,
    0.004463696386665106,
    0.03716766834259033,
    -0.018171165138483047,
    0.003645237535238266,
    0.02061966434121132,
    -0.0014787284890189767,
    -0.006224415265023708,
    -0.015227464027702808,
    -0.01953297108411789,
    0.0036693098954856396,
    -0.0056019737385213375,
    -0.0113208694383502,
    0.02412734553217888,
    0.02393476665019989,
    -0.0025912136770784855,
    0.013858780264854431,
    0.01197426114231348,
    0.009587662294507027,
    -0.018171165138483047,
    -0.02063341997563839,
    0.022875584661960602,
    0.03714015707373619,
    0.029079366475343704,
    0.039175987243652344,
    -0.0215412899851799,
    -0.002537910593673587,
    0.01931288093328476,
    0.0034870479721575975,
    -0.02218780480325222,
    -0.011919239535927773,
    -0.044485654681921005,
    0.0492175854742527,
    -0.015158685855567455,
    0.008507846854627132,
    -0.010241053998470306,
    0.007173552643507719,
    0.014374615624547005,
    -0.01000720914453268,
    -0.002840534085407853,
    -0.004298629239201546,
    -0.008666036650538445,
    -0.0017366461688652635,
    -0.021555045619606972,
    0.002271395642310381,
    -0.012001772411167622,
    -0.017772251740098,
    0.00277003669179976,
    -0.010983857326209545,
    0.014099503867328167,
    -0.0060043251141905785,
    0.011520326137542725,
    0.02349458821117878,
    -0.02349458821117878,
    -0.007661876734346151,
    0.0005007903091609478,
    0.00858350284397602,
    0.012386930175125599,
    -0.03378378599882126,
    0.0182399433106184,
    0.03983625769615173,
    -0.0372777134180069,
    -0.013666202314198017,
    0.023645900189876556,
    -0.000732486427295953,
    0.029024343937635422,
    0.009546395391225815,
    -0.009690829552710056,
    -0.00773753272369504,
    -0.0003499084268696606,
    -0.019436681643128395,
    0.009395084343850613,
    0.009450106881558895,
    -0.02546164020895958,
    0.015667643398046494,
    -0.02394852228462696,
    -0.000569998228456825,
    0.01865261234343052,
    -0.0013093624729663134,
    -0.005185866262763739,
    0.02328825369477272,
    -0.00466315308585763,
    0.003686504438519478,
    -0.0025000828318297863,
    -0.01142403669655323,
    -0.02240789495408535,
    0.047731976956129074,
    0.023783456534147263,
    -0.023136941716074944,
    0.006719617173075676,
    0.03317853808403015,
    -0.0034681339748203754,
    -0.009807752445340157,
    0.008232735097408295,
    0.027112314477562904,
    -0.020936043933033943,
    0.0010729378554970026,
    0.025117749348282814,
    -0.017703475430607796,
    -0.002462254837155342,
    0.0035867763217538595,
    -0.010502411052584648,
    0.03125275298953056,
    0.020495863631367683,
    -0.02089477702975273,
    -0.0022868707310408354,
    -0.018143653869628906,
    -0.023439565673470497,
    -0.09419844299554825,
    -0.032380715012550354,
    0.020592153072357178,
    0.0024863271974027157,
    -0.027745071798563004,
    -0.00313284108415246,
    -0.020578397437930107,
    -0.006117809098213911,
    0.00708414101973176,
    -0.0009947028011083603,
    -0.02041332982480526,
    0.0217751357704401,
    -0.021843913942575455,
    0.01415452640503645,
    0.01755216345191002,
    -0.0061831483617424965,
    -0.027277382090687752,
    -0.011389647610485554,
    -0.010412999428808689,
    -0.00466315308585763,
    0.0006649979623034596,
    0.010777522809803486,
    -0.0033151027746498585,
    -0.008260245434939861,
    -0.0023350154515355825,
    0.01528248656541109,
    -0.03752531483769417,
    0.017194516956806183,
    0.04412800818681717,
    0.014787284657359123,
    0.003065782366320491,
    -0.018171165138483047,
    -0.006341337691992521,
    0.010268565267324448,
    -0.022119026631116867,
    -0.017070716246962547,
    -0.030812574550509453,
    -0.028419097885489464,
    0.048227179795503616,
    -0.014415882527828217,
    -0.009051193483173847,
    -0.005584779195487499,
    0.018762657418847084,
    -0.037002600729465485,
    -0.018817679956555367,
    0.022875584661960602,
    -0.0032102162949740887,
    0.026479555293917656,
    0.012242496013641357,
    -0.0452834777534008,
    -0.0364798866212368,
    -0.009959064424037933,
    -0.00823961291462183,
    -0.00015002215513959527,
    0.018583834171295166,
    0.006413554772734642,
    -0.009168116375803947,
    0.010378610342741013,
    -0.006740250624716282,
    -0.008934270590543747,
    -0.022297849878668785,
    -0.011238336563110352,
    -0.01418203767389059,
    0.00036280430504120886,
    0.01088756788522005,
    0.008170834742486477,
    0.02302689664065838,
    -0.0026926612481474876,
    0.024952683597803116,
    -0.021651335060596466,
    -0.011719782836735249,
    0.03139030933380127,
    -0.018570078536868095,
    0.019409170374274254,
    -0.024086078628897667,
    -0.0023556489031761885,
    -0.009677073918282986,
    0.0070291184820234776,
    0.000773323408793658,
    -0.0028456924483180046,
    0.004573741462081671,
    0.008762326091527939,
    -0.01351489033550024,
    -0.010131008923053741,
    0.012476341798901558,
    0.011836705729365349,
    -0.003614287357777357,
    -0.010234176181256771,
    0.02858416549861431,
    -0.0330134741961956,
    0.024223634973168373,
    -0.014058236964046955,
    0.04333018139004707,
    0.008961781859397888,
    0.0006198623450472951,
    -0.010805034078657627,
    0.006049030926078558,
    -0.027978917583823204,
    -0.041184306144714355,
    0.01953297108411789,
    -0.0663570761680603,
    0.009945308789610863,
    -0.09023682773113251,
    0.017015693709254265,
    -0.012270007282495499,
    -0.022008981555700302,
    -0.00031186555861495435,
    -0.02370092272758484,
    -0.010096619836986065,
    -0.014402126893401146,
    0.013686835765838623,
    0.01885894685983658,
    -0.03188551217317581,
    -0.010523044504225254,
    -0.01951921544969082,
    0.023838479071855545,
    0.0025207162834703922,
    0.005976813845336437,
    0.026961002498865128,
    -0.013239777646958828,
    0.04220222309231758,
    -0.014237060211598873,
    -0.00953951757401228,
    -0.013005932793021202,
    0.042037155479192734,
    -0.001192439696751535,
    -0.028281541541218758,
    0.005103332456201315,
    -0.015887733548879623,
    0.004615008365362883,
    0.0009723499533720315,
    -0.006461699493229389,
    0.021843913942575455,
    -0.009181872010231018,
    -0.0054334672167897224,
    0.024044811725616455,
    0.0166718028485775,
    0.0005149758071638644,
    0.013886291533708572,
    0.032875917851924896,
    0.01581895537674427,
    0.014759773388504982,
    -0.003531753784045577,
    -0.01907903514802456,
    0.0191065464168787,
    0.004081978462636471,
    0.0011176435509696603,
    -0.006203781813383102,
    0.007228574715554714,
    0.004948582034558058,
    0.03606721758842468,
    0.006561427842825651,
    0.04255986958742142,
    0.007056629750877619,
    -0.015296242199838161,
    -0.028020184487104416,
    0.003786232555285096,
    -0.007063507568091154,
    0.028226519003510475,
    -0.01953297108411789,
    -0.01892772503197193,
    0.01096322387456894,
    0.015708910301327705,
    -0.0002697389863897115,
    0.025585440918803215,
    -0.005450661759823561,
    -0.00301591819152236,
    -0.0037655991036444902,
    -0.028914298862218857,
    -0.01187797263264656,
    -0.01775849610567093,
    -0.010344221256673336,
    -0.008205223828554153,
    -0.034829214215278625,
    0.019890617579221725,
    0.014649728313088417,
    0.016768092289566994,
    -0.04266991466283798,
    -0.013342944905161858,
    -0.00285257026553154,
    -0.006626766640692949,
    0.005175549536943436,
    0.014649728313088417,
    -0.0011193630052730441,
    -0.024086078628897667,
    0.008267123252153397,
    -0.0006177130271680653,
    -0.013308555819094181,
    -0.019367903470993042,
    -0.00867291446775198,
    0.003817182732746005,
    0.008280878886580467,
    -0.0015698593342676759,
    0.0013600862585008144,
    0.005811746697872877,
    0.030152304098010063,
    0.011534081771969795,
    -0.00686061242595315,
    -0.00800576712936163,
    -0.013452989980578423,
    0.009869652800261974,
    0.00956702884286642,
    -0.0056982627138495445,
    -0.011809194460511208,
    -0.003419989487156272,
    -0.007613732013851404,
    -0.032435737550258636,
    -0.024732593446969986,
    0.010412999428808689,
    -0.045338500291109085,
    0.004333018325269222,
    0.003775915829464793,
    0.016355425119400024,
    -0.014402126893401146,
    -0.004130122717469931,
    0.004388040862977505,
    -0.026273222640156746,
    -0.01011725328862667,
    -0.004449940752238035,
    0.028474120423197746,
    -0.021678846329450607,
    0.030207326635718346,
    -0.0066542779095470905,
    0.01583271101117134,
    0.049300119280815125,
    -0.002252481644973159,
    0.004346773959696293,
    0.007317986339330673,
    0.006272559519857168,
    -0.010027842596173286,
    0.008507846854627132,
    -0.007778799626976252,
    -0.016300402581691742,
    0.01394819188863039,
    -0.032435737550258636,
    0.011025124229490757,
    -0.00878983736038208,
    -0.00033765731495805085,
    0.005746407434344292,
    0.004432746209204197,
    -0.004116367548704147,
    0.09375826269388199,
    0.012723942287266254,
    -0.03232569247484207,
    0.013886291533708572,
    -0.00934006180614233,
    0.012840865179896355,
    -0.0025052411947399378,
    -0.01471850648522377,
    0.003330577863380313,
    -0.002617005491629243,
    -0.008528480306267738,
    -0.009505128487944603,
    -0.019849350675940514,
    0.01119706965982914,
    -0.033673740923404694,
    -0.005447222851216793,
    -0.022242827340960503,
    0.026892224326729774,
    0.002053025411441922,
    0.010364854708313942,
    0.02132120169699192,
    0.022710517048835754,
    0.006324143148958683,
    -0.01503488514572382,
    -0.03799300268292427,
    -0.009133727289736271,
    0.049960389733314514,
    0.016080312430858612,
    -0.011582226492464542,
    -0.06217537447810173,
    0.008473457768559456,
    0.01778600737452507,
    -0.0182399433106184,
    -0.027346160262823105,
    0.019670527428388596,
    -0.004773197695612907,
    -0.0031534743029624224,
    -0.01868012361228466,
    -0.003958177752792835,
    -0.01998690702021122,
    0.0036280429922044277,
    -0.0028577286284416914,
    -0.03953363373875618,
    -0.034141432493925095,
    0.00675744516775012,
    -0.009044315665960312,
    0.0002596371923573315,
    -0.03361871838569641,
    -0.01295091025531292
  ]
}
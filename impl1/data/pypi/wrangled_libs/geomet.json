{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: gis"
  ],
  "description": "# geomet [![geomet](https://circleci.com/gh/geomet/geomet.svg?style=shield)](https://app.circleci.com/pipelines/github/geomet)\n\npure-python conversion library for common geospatial data formats.\nsupported formats include:\n- [geojson](http://www.geojson.org/geojson-spec.html)\n- [wkt/wkb](http://en.wikipedia.org/wiki/well-known_text) (well-known text/binary)\n- [extended wkb/wkt](https://postgis.net/docs/using_postgis_dbmanagement.html#ewkb_ewkt)\n- [geopackage binary](http://www.geopackage.org/spec/#gpb_format)\n\n\n## install\n\ninstall the latest version from [pypi](https://pypi.org/project/geomet/):\n\n    $ pip install geomet\n\n## functionality\n\nconverion functions are exposed through idiomatic `load/loads/dump/dumps`\ninterfaces.\n\ngeomet is intended to cover all common use cases for dealing with 2d, 3d, and\n4d geometries (including 'z', 'm', and 'zm').\n\n| geometry | wkt/ewkt | wkb/ewkb | geopackage binary | esrijson |\n| -------- | :------: | :------: | :---------------: | :------: |\n| point    | \u2705 | \u2705 | \u2705| \u2705 |\n| linestring    | \u2705 | \u2705 | \u2705| \u2705 |\n| polygon    | \u2705 | \u2705 | \u2705| \u2705 |\n| multipoint    | \u2705 | \u2705 | \u2705| \u2705 |\n| multilinestring    | \u2705 | \u2705 | \u2705| \u2705 |\n| multipolygon    | \u2705 | \u2705 | \u2705| \u2705 |\n| geometrycollection    | \u2705 | \u2705 | \u2705| \u2705 |\n\n## example usage\n\ncoverting a 'point' geojson object to wkt:\n\n    >>> from geomet import wkt\n    >>> point = {'type': 'point', 'coordinates': [116.4, 45.2, 11.1]}\n    >>> wkt.dumps(point, decimals=4)\n    'point (116.4000 45.2000 11.1000)'\n\nconverting a 'point' geojson object to wkb:\n\n    >>> from geomet import wkb\n    >>> wkb.dumps(point)\n    b'\\x00\\x00\\x00\\x10\\x01@]\\x19\\x99\\x99\\x99\\x99\\x9a@f\\x99\\x99\\x99\\x99\\x99\\x9a@&333333'\n    >>> wkb.dumps(point, big_endian=false)\n    b'\\x01\\x01\\x10\\x00\\x00\\x9a\\x99\\x99\\x99\\x99\\x19]@\\x9a\\x99\\x99\\x99\\x99\\x99f@333333&@'\n\nconverting a 'point' geojson object to geopackage binary:\n\n    >>> from geomet import geopackage\n    >>> geopackage.dumps(point)\n    b'gp\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\xe9@]\\x19\\x99\\x99\\x99\\x99\\x9a@f\\x99\\x99\\x99\\x99\\x99\\x9a@&333333'\n    >>> geopackage.dumps(point, big_endian=false)\n    b'gp\\x00\\x01\\x00\\x00\\x00\\x00\\x01\\xe9\\x03\\x00\\x00\\x9a\\x99\\x99\\x99\\x99\\x19]@\\x9a\\x99\\x99\\x99\\x99\\x99f@333333&@'\n\n\nconverting a 'linestring' geojson object to wkt:\n\n    >>> linestring = {'type':'linestring',\n    ...               'coordinates': [[0.0, 0.0, 10.0], [2.0, 1.0, 20.0],\n    ...                               [4.0, 2.0, 30.0], [5.0, 4.0, 40.0]]}\n    >>> wkt.dumps(linestring, decimals=0)\n    'linestring (0 0 10, 2 1 20, 4 2 30, 5 4 40)'\n\nconverting a 'linestring' geojson object to wkb:\n\n    >>> wkb.dumps(linestring)\n    b'\\x00\\x00\\x00\\x10\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@$\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xf0\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00@\\x10\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@>\\x00\\x00\\x00\\x00\\x00\\x00@\\x14\\x00\\x00\\x00\\x00\\x00\\x00@\\x10\\x00\\x00\\x00\\x00\\x00\\x00@d\\x00\\x00\\x00\\x00\\x00\\x00'\n    >>> wkb.dumps(linestring, big_endian=false)\n    b'\\x01\\x02\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00$@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\xf0?\\x00\\x00\\x00\\x00\\x00\\x004@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00>@\\x00\\x00\\x00\\x00\\x00\\x00\\x14@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00d@'\n\nconverting a 'linestring' geojson object to geopackage binary:\n\n    >>> geopackage.dumps(linestring)\n    b'gp\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@$\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00?\\xf0\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00@\\x10\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@>\\x00\\x00\\x00\\x00\\x00\\x00@\\x14\\x00\\x00\\x00\\x00\\x00\\x00@\\x10\\x00\\x00\\x00\\x00\\x00\\x00@d\\x00\\x00\\x00\\x00\\x00\\x00'\n    >>> geopackage.dumps(linestring, big_endian=false)\n    b'gp\\x00\\x01\\x00\\x00\\x00\\x00\\x01\\x02\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00$@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\xf0?\\x00\\x00\\x00\\x00\\x00\\x004@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00>@\\x00\\x00\\x00\\x00\\x00\\x00\\x14@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@\\x00\\x00\\x00\\x00\\x00\\x00d@'\n\nconverting 'point' wkt to geojson:\n\n    >>> wkt.loads('point(10 20)')\n    {'type': 'point', 'coordinates': [10.0, 20.0]}\n\ncoverting 'geometrycollection' wkt to geojson:\n\n    >>> wkt.loads('geometrycollection(point(10 20),polygon(((0 0), (10 30), (30 10), (0 0)))')\n    {'type': 'geometrycollection', 'geometries': [{'type': 'point', 'coordinates': [10.0, 20.0]}, {'type': 'polygon', 'coordinates': [[[0.0, 0.0]], [[10.0, 30.0]], [[30.0, 10.0]], [[0.0, 0.0]]]}]}\n\n[ewkt/ewkb](http://postgis.net/documentation/manual-2.1/using_postgis_dbmanagement.html#ewkb_ewkt) \nare also supported for all geometry types. this uses a custom extension\nto the geojson standard in order to preserve srid information through conversions.\nfor example:\n\n    >>> wkt.loads('srid=4326;point(10 20)')\n    {'type': 'point', 'coordinates': [10.0, 20.0], 'meta': {'srid': '4326'}}\n    >>> wkt.dumps({'type': 'point', 'coordinates': [10.0, 20.0], 'meta': {'srid': '4326'}, 'crs': {'properties': {'name': 'epsg4326'}, 'type': 'name'}})\n    'srid=4326;point (10.0000000000000000 20.0000000000000000)'\n    >>> wkb.loads('\\x00 \\x00\\x00\\x01\\x00\\x00\\x10\\xe6@$\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00')\n    {'meta': {'srid': '4326'}, 'type': 'point', 'coordinates': [10.0, 20.0]}\n    >>> wkb.dumps({'type': 'point', 'coordinates': [10.0, 20.0], 'meta': {'srid': '4326'}, 'crs': {'properties': {'name': 'epsg4326'}, 'type': 'name'}})\n    '\\x00 \\x00\\x00\\x01\\x00\\x00\\x10\\xe6@$\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00'\n\ngeopackage binary supports encoding of srid and envelope information. if your geopackage\nhas an envelope specified, then it will be added into the resulting geojson in a key \ncalled `'bbox'`:\n\n    >>> gpkg = b'gp\\x00\\x03\\x00\\x00\\x00\\x00\\xf0\\x9e\\xa0\\xa7\\x05;#@hz\\xbd\\x93\\x83gc@\\xf0\\x9e\\xa0\\xa7\\x05;#@hz\\xbd\\x93\\x83gc@\\x01\\x01\\x00\\x00\\x00\\xf0\\x9e\\xa0\\xa7\\x05;#@hz\\xbd\\x93\\x83gc@'\n    >>> geopackage.loads(gpkg)\n    >>> {'type': 'point', 'coordinates': [9.615277517659223, 38.55870291467437], 'bbox': (9.615277517659223, 38.55870291467437, 9.615277517659223, 38.55870291467437)}\n    \nin the same way, if a 'bbox' key is present on a `dumps`-ed geometry, it will be added to the \nheader of the geopackage geometry:\n\n    >>> polygon = {'type': 'polygon', 'coordinates': [[[20.0, 20.0], [34.0, 124.0], [70.0, 140.0], [130.0, 130.0], [70.0, 100.0], [110.0, 70.0], [170.0, 20.0], [90.0, 10.0], [20.0, 20.0]]], 'bbox': (20.0, 170.0, 10.0, 140.0)}\n    >>> geopackage.dumps(polygon)\n    b'gp\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x004@\\x00\\x00\\x00\\x00\\x00@e@\\x00\\x00\\x00\\x00\\x00\\x00$@\\x00\\x00\\x00\\x00\\x00\\x80a@\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\t@4\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00@a\\x00\\x00\\x00\\x00\\x00\\x00@_\\x00\\x00\\x00\\x00\\x00\\x00@q\\x80\\x00\\x00\\x00\\x00\\x00@a\\x80\\x00\\x00\\x00\\x00\\x00@`@\\x00\\x00\\x00\\x00\\x00@`@\\x00\\x00\\x00\\x00\\x00@q\\x80\\x00\\x00\\x00\\x00\\x00@y\\x00\\x00\\x00\\x00\\x00\\x00@[\\x80\\x00\\x00\\x00\\x00\\x00@q\\x80\\x00\\x00\\x00\\x00\\x00@e@\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00@v\\x80\\x00\\x00\\x00\\x00\\x00@$\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00@4\\x00\\x00\\x00\\x00\\x00\\x00'\n\nif an integer srid identifier is present in a `'meta'` key (like `'meta': {'srid': 4326}`), then the srid will be included in the\ngeopackage header.\n\n## history\n\nthis library was originally created as the result of a bug report related\nto another project: https://bugs.launchpad.net/openquake-old/+bug/1073909.\nthe source of this issue was largely due to a dependency on\n[geos](https://libgeos.org/), which is written in c/c++. depending on geos\nrequires any data conversion bug fixes to happen upstream, which takes time\nand effort. ultimately, this was the inspiration to create a more\nlightweight, pure-python conversion library as an alterntive tool for\nreliably converting data between various geospatial formats.\n\nthe name \"geomet\" was inspired by \"met\", the german word for\n[mead](http://en.wikipedia.org/wiki/mead). it is also a shortened version of\nthe word \"geometry\".\n\n## limitations\n\n### outputing \"empty\" geometries to binary formats is not supported\n\nattempting to output an empty geometry to a binary format will result in an exception: `valueerror: empty geometries cannot be represented in wkb. reason: the dimensionality of the wkb would be ambiguous.` there are a few reasons for this this limitation:\n- any `emtpy` geometry (e.g., `point empty`, `multipolygon empty`, etc.) cannot be converted into binary format because binary formats such as wkb require an explicit dimension type (2d, z, m, or zm). this means that some objects cannot be reliably converted to and from different formats in a [bijective](https://en.wikipedia.org/wiki/bijection) manner.\n- the [geojson standard](https://www.rfc-editor.org/rfc/rfc7946) does have a way of representing empty geometries; however, details are minimal and the dimensionality of such an object remains ambiguous.\n- representing some geometry types (such as points and lines) as \"empty\" is [deeply flawed to begin with](http://aleph0.clarku.edu/~djoyce/elements/booki/defi1.html). for example, a point can represent any location in 2d, 3d, or 4d space. however, a point is infinitesimally small (it has no size) and it can't contain anything (it can't be \"full\"), therefore, it doesn't make sense for a point to be \"empty\".\n\nas a result, geomet has chosen to not attempt to address these problems, and\nsimply raise an exception instead.\n\nexample:\n\n    >>> import geomet\n    >>> import geomet.wkt as wkt\n    >>> import geomet.wkb as wkb\n    >>> pt = wkt.loads('point empty')\n    >>> pt\n    {'type': 'point', 'coordinates': []}\n    >>> wkb.dumps(pt)\n    traceback (most recent call last):\n    file \"<stdin>\", line 1, in <module>\n    file \"/home/jdoe/geomet/geomet/wkb.py\", line 216, in dumps\n        return _dumps(obj, big_endian)\n    file \"/home/jdoe/geomet/geomet/wkb.py\", line 238, in _dumps\n        raise valueerror(\n    valueerror: empty geometries cannot be represented in wkb. reason: the dimensionality of the wkb would be ambiguous.\n\n\n## see also\n\n- [wellknown](https://github.com/mapbox/wellknown): a similar package for node.js.\n- [geo](https://github.com/bryanjos/geo): a nearly-identical package for elixir.\n",
  "docs_url": null,
  "keywords": "esri,ewkb,ewkt,geojson,geopackage,geospatial,gis,spatial,wkb,wkt",
  "license": "apache-2.0",
  "name": "geomet",
  "package_url": "https://pypi.org/project/geomet/",
  "project_url": "https://pypi.org/project/geomet/",
  "project_urls": {
    "Repository": "https://github.com/geomet/geomet"
  },
  "release_url": "https://pypi.org/project/geomet/1.1.0/",
  "requires_dist": [
    "click"
  ],
  "requires_python": ">=3.7",
  "summary": "pure python conversion library for common geospatial data formats",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "lars.butler@gmail.com"
  ],
  "kwds": "geojson geopackage geos geo ewkb_ewkt",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_geomet",
  "homepage": "",
  "release_count": 9,
  "dependency_ids": [
    "pypi_click"
  ]
}
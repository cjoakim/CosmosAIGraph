{
  "classifiers": [],
  "description": ".. image:: https://github.com/skorch-dev/skorch/blob/master/assets/skorch_bordered.svg\n   :width: 30%\n\n------------\n\n|build| |coverage| |docs| |huggingface| |powered|\n\na scikit-learn compatible neural network library that wraps pytorch.\n\n.. |build| image:: https://github.com/skorch-dev/skorch/workflows/tests/badge.svg\n    :alt: test status\n    :scale: 100%\n\n.. |coverage| image:: https://github.com/skorch-dev/skorch/blob/master/assets/coverage.svg\n    :alt: test coverage\n    :scale: 100%\n\n.. |docs| image:: https://readthedocs.org/projects/skorch/badge/?version=latest\n    :alt: documentation status\n    :scale: 100%\n    :target: https://skorch.readthedocs.io/en/latest/?badge=latest\n\n.. |huggingface| image:: https://github.com/skorch-dev/skorch/actions/workflows/test-hf-integration.yml/badge.svg\n    :alt: hugging face integration\n    :scale: 100%\n    :target: https://github.com/skorch-dev/skorch/actions/workflows/test-hf-integration.yml\n\n.. |powered| image:: https://github.com/skorch-dev/skorch/blob/master/assets/powered.svg\n    :alt: powered by\n    :scale: 100%\n    :target: https://github.com/ottogroup/\n\n=========\nresources\n=========\n\n- `documentation <https://skorch.readthedocs.io/en/latest/?badge=latest>`_\n- `source code <https://github.com/skorch-dev/skorch/>`_\n- `installation <https://github.com/skorch-dev/skorch#installation>`_\n\n========\nexamples\n========\n\nto see more elaborate examples, look `here\n<https://github.com/skorch-dev/skorch/tree/master/notebooks/readme.md>`__.\n\n.. code:: python\n\n    import numpy as np\n    from sklearn.datasets import make_classification\n    from torch import nn\n    from skorch import neuralnetclassifier\n\n    x, y = make_classification(1000, 20, n_informative=10, random_state=0)\n    x = x.astype(np.float32)\n    y = y.astype(np.int64)\n\n    class mymodule(nn.module):\n        def __init__(self, num_units=10, nonlin=nn.relu()):\n            super().__init__()\n\n            self.dense0 = nn.linear(20, num_units)\n            self.nonlin = nonlin\n            self.dropout = nn.dropout(0.5)\n            self.dense1 = nn.linear(num_units, num_units)\n            self.output = nn.linear(num_units, 2)\n            self.softmax = nn.softmax(dim=-1)\n\n        def forward(self, x, **kwargs):\n            x = self.nonlin(self.dense0(x))\n            x = self.dropout(x)\n            x = self.nonlin(self.dense1(x))\n            x = self.softmax(self.output(x))\n            return x\n\n    net = neuralnetclassifier(\n        mymodule,\n        max_epochs=10,\n        lr=0.1,\n        # shuffle training data on each epoch\n        iterator_train__shuffle=true,\n    )\n\n    net.fit(x, y)\n    y_proba = net.predict_proba(x)\n\nin an `sklearn pipeline <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.pipeline.html>`_:\n\n.. code:: python\n\n    from sklearn.pipeline import pipeline\n    from sklearn.preprocessing import standardscaler\n\n    pipe = pipeline([\n        ('scale', standardscaler()),\n        ('net', net),\n    ])\n\n    pipe.fit(x, y)\n    y_proba = pipe.predict_proba(x)\n\nwith `grid search <https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.gridsearchcv.html>`_:\n\n.. code:: python\n\n    from sklearn.model_selection import gridsearchcv\n\n    # deactivate skorch-internal train-valid split and verbose logging\n    net.set_params(train_split=false, verbose=0)\n    params = {\n        'lr': [0.01, 0.02],\n        'max_epochs': [10, 20],\n        'module__num_units': [10, 20],\n    }\n    gs = gridsearchcv(net, params, refit=false, cv=3, scoring='accuracy', verbose=2)\n\n    gs.fit(x, y)\n    print(\"best score: {:.3f}, best params: {}\".format(gs.best_score_, gs.best_params_))\n\n\nskorch also provides many convenient features, among others:\n\n- `learning rate schedulers <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.lrscheduler>`_ (warm restarts, cyclic lr and many more)\n- `scoring using sklearn (and custom) scoring functions <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.epochscoring>`_\n- `early stopping <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.earlystopping>`_\n- `checkpointing <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.checkpoint>`_\n- `parameter freezing/unfreezing <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.freezer>`_\n- `progress bar <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.progressbar>`_ (for cli as well as jupyter)\n- `automatic inference of cli parameters <https://github.com/skorch-dev/skorch/tree/master/examples/cli>`_\n- `integration with gpytorch for gaussian processes <https://skorch.readthedocs.io/en/latest/user/probabilistic.html>`_\n- `integration with hugging face \ud83e\udd17 <https://skorch.readthedocs.io/en/stable/user/huggingface.html>`_\n\n============\ninstallation\n============\n\nskorch requires python 3.8 or higher.\n\nconda installation\n==================\n\nyou need a working conda installation. get the correct miniconda for\nyour system from `here <https://conda.io/miniconda.html>`__.\n\nto install skorch, you need to use the conda-forge channel:\n\n.. code:: bash\n\n    conda install -c conda-forge skorch\n\nwe recommend to use a `conda virtual environment <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>`_.\n\n**note**: the conda channel is *not* managed by the skorch\nmaintainers. more information is available `here\n<https://github.com/conda-forge/skorch-feedstock>`__.\n\npip installation\n================\n\nto install with pip, run:\n\n.. code:: bash\n\n    python -m pip install -u skorch\n\nagain, we recommend to use a `virtual environment\n<https://docs.python.org/3/tutorial/venv.html>`_ for this.\n\nfrom source\n===========\n\nif you would like to use the most recent additions to skorch or\nhelp development, you should install skorch from source.\n\nusing conda\n-----------\n\nto install skorch from source using conda, proceed as follows:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    conda create -n skorch-env python=3.10\n    conda activate skorch-env\n    conda install -c pytorch pytorch\n    python -m pip install -r requirements.txt\n    python -m pip install .\n\nif you want to help developing, run:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    conda create -n skorch-env python=3.10\n    conda activate skorch-env\n    conda install -c pytorch pytorch\n    python -m pip install -r requirements.txt\n    python -m pip install -r requirements-dev.txt\n    python -m pip install -e .\n\n    py.test  # unit tests\n    pylint skorch  # static code checks\n\nyou may adjust the python version to any of the supported python versions.\n\nusing pip\n---------\n\nfor pip, follow these instructions instead:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    # create and activate a virtual environment\n    python -m pip install -r requirements.txt\n    # install pytorch version for your system (see below)\n    python -m pip install .\n\nif you want to help developing, run:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    # create and activate a virtual environment\n    python -m pip install -r requirements.txt\n    # install pytorch version for your system (see below)\n    python -m pip install -r requirements-dev.txt\n    python -m pip install -e .\n\n    py.test  # unit tests\n    pylint skorch  # static code checks\n\npytorch\n=======\n\npytorch is not covered by the dependencies, since the pytorch version\nyou need is dependent on your os and device. for installation\ninstructions for pytorch, visit the `pytorch website\n<http://pytorch.org/>`__. skorch officially supports the last four\nminor pytorch versions, which currently are:\n\n- 1.11.0\n- 1.12.1\n- 1.13.1\n- 2.0.1\n\nhowever, that doesn't mean that older versions don't work, just that\nthey aren't tested. since skorch mostly relies on the stable part of\nthe pytorch api, older pytorch versions should work fine.\n\nin general, running this to install pytorch should work:\n\n.. code:: bash\n\n    # using conda:\n    conda install pytorch pytorch-cuda -c pytorch\n    # using pip\n    python -m pip install torch\n\n==================\nexternal resources\n==================\n\n- @jakubczakon: `blog post\n  <https://neptune.ai/blog/model-training-libraries-pytorch-ecosystem>`_\n  \"8 creators and core contributors talk about their model training\n  libraries from pytorch ecosystem\" 2020\n- @benjaminbossan: `talk 1\n  <https://www.youtube.com/watch?v=qbu_dcbjvek>`_ \"skorch: a\n  scikit-learn compatible neural network library\" at pycon/pydata 2019\n- @githubnemo: `poster <https://github.com/githubnemo/skorch-poster>`_\n  for the pytorch developer conference 2019\n- @thomasjpfan: `talk 2 <https://www.youtube.com/watch?v=0j7falk0bmq>`_\n  \"skorch: a union of scikit learn and pytorch\" at scipy 2019\n- @thomasjpfan: `talk 3 <https://www.youtube.com/watch?v=yaxsxf2cq8m>`_\n  \"skorch - a union of scikit-learn and pytorch\" at pydata 2018\n\n=============\ncommunication\n=============\n\n- `github discussions <https://github.com/skorch-dev/skorch/discussions>`_: \n  user questions, thoughts, install issues, general discussions.\n\n- `github issues <https://github.com/skorch-dev/skorch/issues>`_: bug\n  reports, feature requests, rfcs, etc.\n\n- slack: we run the #skorch channel on the `pytorch slack server\n  <https://pytorch.slack.com/>`_, for which you can `request access\n  here <https://bit.ly/ptslack>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "new bsd 3-clause",
  "name": "skorch",
  "package_url": "https://pypi.org/project/skorch/",
  "project_url": "https://pypi.org/project/skorch/",
  "project_urls": {
    "Homepage": "https://github.com/skorch-dev/skorch"
  },
  "release_url": "https://pypi.org/project/skorch/0.15.0/",
  "requires_dist": [
    "numpy (>=1.13.3)",
    "scikit-learn (>=0.22.0)",
    "scipy (>=1.1.0)",
    "tabulate (>=0.7.7)",
    "tqdm (>=4.14.0)",
    "Sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "accelerate (>=0.22.0) ; extra == 'testing'",
    "fire ; extra == 'testing'",
    "flaky ; extra == 'testing'",
    "future (>=0.17.1) ; extra == 'testing'",
    "gpytorch (>=1.5) ; extra == 'testing'",
    "jupyter ; extra == 'testing'",
    "matplotlib (>=2.0.2) ; extra == 'testing'",
    "neptune ; extra == 'testing'",
    "numpydoc ; extra == 'testing'",
    "openpyxl ; extra == 'testing'",
    "pandas ; extra == 'testing'",
    "pillow ; extra == 'testing'",
    "protobuf (<4.0dev,>=3.12.0) ; extra == 'testing'",
    "pylint ; extra == 'testing'",
    "pytest (>=3.4) ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "sacred ; extra == 'testing'",
    "safetensors (>=0.3.1) ; extra == 'testing'",
    "sphinx ; extra == 'testing'",
    "sphinx-rtd-theme ; extra == 'testing'",
    "tensorboard (>=1.14.0) ; extra == 'testing'",
    "tokenizers ; extra == 'testing'",
    "transformers ; extra == 'testing'",
    "wandb (>=0.12.17) ; extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "scikit-learn compatible neural network library for pytorch",
  "version": "0.15.0",
  "releases": [],
  "developers": [],
  "kwds": "skorch_bordered skorch svg scikit sklearn",
  "license_kwds": "new bsd 3-clause",
  "libtype": "pypi",
  "id": "pypi_skorch",
  "homepage": "https://github.com/skorch-dev/skorch",
  "release_count": 18,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_fire",
    "pypi_flaky",
    "pypi_future",
    "pypi_gpytorch",
    "pypi_jupyter",
    "pypi_matplotlib",
    "pypi_neptune",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_openpyxl",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_protobuf",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sacred",
    "pypi_safetensors",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_tabulate",
    "pypi_tensorboard",
    "pypi_tokenizers",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_wandb"
  ]
}
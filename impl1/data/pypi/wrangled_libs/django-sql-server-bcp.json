{
  "classifiers": [],
  "description": "# django-sql-server-bcp\na utility for using mssql-tools bcp command with django models.\n\n## installation\n\n`pip install django-sql-server-bcp`\n\n## requirements\n\nif on linux or mac, install mssql-tools\n\n- for mac: https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/03/sql-server-command-line-tools-for-mac-preview-now-available/\n- for linux: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools\n\n\n1. on linux, you must use microsoft's driver in your odbc.ini. otherwise, you'll get error `the dsn specified an unsupported driver.`.\nif you're using pyodbc, your driver might look like:\n\n```\n[my_dsn_name]\ndriver = /usr/local/lib/libtdsodbc.so\n\n```\n\nchange it to (e.g. on ubuntu):\n\n```\n[my_dsn_name]\ndriver = /opt/microsoft/msodbcsql/lib64/libmsodbcsql-13.1.so.6.0\n```\n\n2. make sure `bcp` is is accessible to execute\n\n   `sudo ln -s /opt/mssql-tools/bin/bcp /usr/local/bin/bcp`\n\n3. on windows, using bcp via odbc dns name has proven to be painful or straight up broken. *django-sql-server-bcp* will prefer to connect via server host if available. so please set `host` in your django databsaes settings if you're having problems with getting bcp to work on windows. you can leave `dsn` name in your django settings.\n\n\n## usage\n\nexample django model:\n\n\n```python\nfrom django.db import models\n\nclass stockprice(models.model):\n\n    id = models.autofield(primary_key=true)\n    symbol = models.charfield(max_length=50)\n    price = models.decimalfield(max_digits=15, decimal_places=4)\n    timestamp = models.datetimefield()\n\n\n```\n\n**example bcp usage with `stockprice` model.**\n\ncreate a dict with the properties of your model. then save via bcp:\n\n```python\nfrom random import random\nfrom models import stockprice\n\n\nrows = []\nfor i in range(1, row_count):\n    rows.append(dict(\n        symbol='goog',\n        price='%.2f' % (100 * random()),\n        timestamp=str(datetime.datetime.now())\n    ))\n\nbcp = bcp(stockprice)\nbcp.save(rows)\nprint cp.save(rows)\n\n\n```\n\nyou should see output similar to the following:\n\n```\nstarting copy...\n\n499 rows copied.\nnetwork packet size (bytes): 4096\nclock time (ms.) total     : 10     average : (49900.0 rows per sec.)\n```\n\n## caveats\n\n- string data cannot contain commas or newlines because bulk data file format is flimsy csv.\n- untested with long strings, dates, binary data.\n- can't be used in a django transaction involving the same table that bcp is accessing - you'll end up locking the table and bcp won't be able to get a lock on it and bcp will wait indefinitely.\n\n## troublehooting\n\n\n### the dsn specified an unsupported driver\n\n- on linux, see requirements above\n- on windows, when you setup your odbc data source in windows, select \"sql server native client xx\". not \"sql server\" or \"odbc driver xx for sql server\". for more info: https://docs.microsoft.com/en-us/sql/relational-databases/native-client-odbc-bulk-copy-operations/performing-bulk-copy-operations-odbc\n\n### the specified dsn contains an architecture mismatch between the driver and application\n\nin windows, this usually means bcp is 32-bit and you've trying to use a 64-bit odbc connection. add your odbc connection under both 32-bit and 64-bit odbc managers.\n\n### could not find stored procedure 'sp_describe_first_result_set'.\n\nhttps://connect.microsoft.com/sqlserver/feedback/details/2777154/attempt-to-use-bcp-2016-to-export-from-sql-2008-or-earlier-fails-with-obscure-error-message\n\n> this error is due to the version of odbc driver you are using: version 13. you can resolve this issue buy uninstalling the version from program and features, and install the version 13.1 you can find: https://www.microsoft.com/en-us/download/details.aspx?id=53339\n\n### unable to open bcp host data-file\non linux, if www-data can't create a format file, it's a real pain to troubleshoot. `bcp` wants to access a few files covertly and fails without telling you why.\n    - to turn on file access auditing, you may discover that `bcp` is trying to create a `/var/www/.odbc.ini` or access `/etc/localtime`\n\n```bash\n    # install auditd\n    sudo apt install auditd\n    # turn on file access auditing for all files where success=0\n    sudo auditctl -w / -k bcp_debug\n    # run bcp commend as www-data\n    # then search audit log for failures\n    sudo ausearch --interpret --exit -13\n```\n\nsearch the log for `success=no` and try to see what files bcp is being denied access to\n\n- for some reason, bcp tries to create `.odbc.ini` in www-data's home folder (e.g. /var/www/.odbc.ini). make sure www-data's home folder is writeable by www-data\n- another problem was that microsoft docs say to pass `nul` to format command which, on windows is a nul file but on linux, bcp will try to open file named `nul` and fails with permission error. on linux, pass `/dev/null` instead of `nul`.\n\n### bcp is hanging, stuck at \"starting copy...\"\n\n- make sure you are not calling bcp from within a django transaction that accessing the same table as bcp\n- make sure you do not have any active transactions locking the table or hung transactions locking the table\n\ncheck for transaction:\n\n```sql\nselect s.*\nfrom sys.dm_exec_requests r\ninner join sys.dm_exec_sessions s\non s.session_id = r.blocking_session_id;\n```",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-sql-server-bcp",
  "package_url": "https://pypi.org/project/django-sql-server-bcp/",
  "project_url": "https://pypi.org/project/django-sql-server-bcp/",
  "project_urls": {
    "Homepage": "https://github.com/ExoticObjects/django-sql-server-bcp"
  },
  "release_url": "https://pypi.org/project/django-sql-server-bcp/0.1.10/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "utility for using mssql-tools bcp command with django models",
  "version": "0.1.10",
  "releases": [],
  "developers": [
    "exotic_objects_llc",
    "git@extc.co"
  ],
  "kwds": "msodbcsql django libmsodbcsql pyodbc bcp_debug",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_sql_server_bcp",
  "homepage": "https://github.com/exoticobjects/django-sql-server-bcp",
  "release_count": 9,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8"
  ],
  "description": "edx django rest framework extensions  |ci|_ |codecov|_\n==========================================================\n.. |ci| image:: https://github.com/openedx/edx-drf-extensions/workflows/python%20ci/badge.svg?branch=master\n.. _ci: https://github.com/openedx/edx-drf-extensions/actions?query=workflow%3a%22python+ci%22\n\n.. |codecov| image:: https://codecov.io/github/edx/edx-drf-extensions/coverage.svg?branch=master\n.. _codecov: https://codecov.io/github/edx/edx-drf-extensions?branch=master\n\nthis library includes various cross-cutting concerns related to apis. api functionality added to this library must be required for multiple open edx applications or multiple repositories.\n\nsome of these concerns include extensions of `django rest framework <https://www.django-rest-framework.org/>`_ (drf), which is how the repository initially got its name.\n\npublishing a release\n--------------------\n\nafter a pr merges, a new version of the package will automatically be released by travis when the commit is tagged. use::\n\n    git tag -a x.y.z -m \"releasing version x.y.z\"\n    git push origin x.y.z\n\ndo **not** create a github release, or ensure its message points to the changelog.rst and adr 0001-use-changelog.rst.\n\njwt authentication and rest api endpoints\n-----------------------------------------\n\njwt authentication is the preferred method of authentication for open edx api endpoints. see `jwt authentication readme`_ for more details.\n\n.. _jwt authentication readme: ./edx_rest_framework_extensions/auth/jwt/readme.rst\n\ncsrf api\n--------\n\none feature of this library is a ``csrf`` app containing an api endpoint for retrieving csrf tokens from the django service in which it is installed. this is useful for frontend apps attempting to make post, put, and delete requests to a django service with django's csrf middleware enabled.\n\nto make use of this api endpoint:\n\n#. install edx-drf-extensions in your django project.\n#. add ``csrf.apps.csrfappconfig`` to ``installed_apps``.\n#. add ``'edx_rest_framework_extensions.auth.jwt.middleware.jwtauthcookiemiddleware'`` to ``middleware``.\n#. add ``csrf.urls`` to urls.py.\n\nlicense\n-------\n\nthe code in this repository is licensed under apache 2.0 unless otherwise noted.\n\nplease see ``license.txt`` for details.\n\nhow to contribute\n-----------------\n\ncontributions are very welcome.\n\nplease read `how to contribute <https://github.com/openedx/.github/blob/master/contributing.md>`_ for details.\n\n\nreporting security issues\n-------------------------\n\nplease do not report security issues in public. please email security@openedx.org.\n\n\nchange log\n==========\n\n..\n   this file loosely adheres to the structure of https://keepachangelog.com/,\n   but in restructuredtext instead of markdown.\n\n   this project adheres to semantic versioning (https://semver.org/).\n\n.. there should always be an \"unreleased\" section for changes pending release.\n\nunreleased\n----------\n\n[9.0.1] - 2023-12-06\n--------------------\n\nfixed\n~~~~~\n\n* fixed bug for successful jwts where the jwt user id was still using the service user id, rather than the lms user id, so comparison against the lms user id would fail.\n\nupdated\n~~~~~~~\n\n* as part of the bug fix, the custom attribute ``failed_jwt_cookie_user_id`` was renamed to ``jwt_cookie_lms_user_id``, and will be set for all jwt cookies. since this is only a breaking change for recently added monitoring, this won't be versioned as a breaking change.\n\n[9.0.0] - 2023-11-27\n--------------------\n\nfixed\n~~~~~\n* **breaking change**: fixes a bug for any service other than the identity service (lms/cms), where the session's local service user id would never match the jwt lms user id when compared.\n\n  * the custom attribute jwt_auth_mismatch_session_user_id was renamed to jwt_auth_mismatch_session_lms_user_id to make this more clear.\n  * the setting edx_drf_extensions[verify_lms_user_id_property_name] was added to enable choosing the user object property that contains the lms user id, if one exists. if this is set to none (the default), the check will use the lms_user_id property if it is found, and otherwise will skip this additional protection. in case of an unforeseen issue, use 'skip-check' to skip the check, even when there is an lms_user_id property.\n  * the custom attribute jwt_auth_get_lms_user_id_status was added to provide observability into the new functionality.\n  * the breaking change only affects services with enable_forgiving_jwt_cookies enabled. it now requires the new setting verify_lms_user_id_property_name to be set appropriately in order to provide the existing session vs jwt user id check. note that only lms/cms will likely need to set this value.\n\n[8.13.1] - 2023-11-15\n---------------------\n\nfixed\n~~~~~\n* fixed bug where jwtauthentication called with a django request instead of a drf request would fail. also added custom attribute jwt_auth_request_user_not_found to track down these unexpected cases.\n\n[8.13.0] - 2023-10-30\n---------------------\n\nfixed\n~~~~~\n* bug fix for when both enable_set_request_user_for_jwt_cookie and the jwt cookie user vs session user check behind enable_forgiving_jwt_cookies were enabled at the same time.\n\nadded\n~~~~~\n* added custom attributes set_user_from_jwt_status and skip_jwt_vs_session_check.\n\nupdated\n~~~~~~~\n* adr for removing http_use_jwt_cookie, which explains forgiven jwt cookies, was updated to explain the cases where the jwt cookie user and session user do not match.\n\nremoved\n~~~~~~~\n* toggle edx_drf_extensions[enable_jwt_vs_session_user_check] has been removed. this check is now a default part of the enable_forgiving_jwt_cookies functionality. enable_jwt_vs_session_user_check was just a temporary roll-out toggle that was already proven out everywhere enable_forgiving_jwt_cookies was already enabled.\n\n[8.12.0] - 2023-10-16\n---------------------\n\nchanged\n~~~~~~~\n* made changes to the recent enable_jwt_vs_session_user_check custom attributes. although this is technically a breaking change, skipping major release because of limited use of these attributes.\n\n    * the jwt_auth_session_user_id attribute has been renamed to clarify that this attribute only appears in the case of a mismatch.\n    * dropped jwt_auth_and_session_user_mismatch, which is redundant to simply checking for the existence of jwt_auth_mismatch_session_user_id.\n    * updated annotations for jwt_auth_request_user_not_found, because it has proven to be a real case in production and not just in testing.\n\n[8.11.1] - 2023-10-11\n---------------------\n\nadded\n~~~~~\n* added support for django 4.2\n\n[8.11.0] - 2023-10-04\n---------------------\n\nadded\n~~~~~\n* added toggle edx_drf_extensions[enable_jwt_vs_session_user_check] to enable the following:\n\n    * new custom attributes is_jwt_vs_session_user_check_enabled, jwt_auth_session_user_id, jwt_auth_and_session_user_mismatch, and invalid_jwt_cookie_user_id for monitoring and debugging.\n    * when forgiving jwt cookies are also enabled, user mismatches will now result in a failure, rather than a forgiving jwt.\n\nchanged\n~~~~~~~\n* breaking change: for tests only, the test utility method generate_unversioned_payload now requires that the user argument contains an id attribute. in the case of a mock user, you must set user.id.\n\n[8.10.0] - 2023-09-19\n---------------------\n\nadded\n~~~~~\n* (`#354 <https://github.com/openedx/edx-drf-extensions/pull/354>`_) implemented ``verify_jwk_signature_using_keyset`` function.\n  this function allows for easy verification of json web key (jwk) signatures using a provided keyset.\n\n[8.9.3] - 2023-09-13\n--------------------\n\nfixed\n~~~~~\n\n* added more useful exception logging when jwt auth fails.  the exception we\n  get for that did not have enough detail about how the auth check failed so we\n  dig deeper to an exception that is more useful and log that.\n\n[8.9.2] - 2023-08-31\n--------------------\n\nfixed\n~~~~~\n* fixes exceptional case where jwtauthentication should not csrf protect a request that has both a jwt token in the authorization header and a jwt cookie, since the cookie should be ignored.\n\nchanged\n~~~~~~~\n* updated one of the values of the custom attribute jwt_auth_result from 'skipped' to 'n/a'.\n\n\n[8.9.1] - 2023-08-22\n--------------------\n\nremoved\n~~~~~~~\n\n* removed unused direct dependency on ``six``.\n* removed unused direct dependency on ``python-dateutil``.\n\n\nfixed\n~~~~~\n* fixed django 40 middleware deprecation warning\n\n[8.9.0] - 2023-08-14\n--------------------\n\nadded\n~~~~~\n\n* added capability to forgive jwt cookie authentication failures as a replacement for the now deprecated ``use-jwt-cookie`` header. see depr https://github.com/openedx/edx-drf-extensions/issues/371.\n  * for now, this capability must be enabled using the ``enable_forgiving_jwt_cookies`` toggle.\n  * added temporary custom attributes ``is_forgiving_jwt_cookies_enabled`` and ``use_jwt_cookie_requested`` to help with this deprecation.\n* added custom attributes ``has_jwt_cookie`` and ``jwt_auth_result`` for jwt authentication observability.\n\nchanged\n~~~~~~~\n\n* two features that were gated on the presence of the ``use-jwt-cookie`` header will now be gated on the presence of a jwt cookie instead, regardless of the state of the new ``enable_forgiving_jwt_cookies`` toggle. the new behavior should be nearly equivalent in most cases, and should cause no issues in the exceptional cases. the two features include csrf protection for jwt cookies, and the setting of the request user when ``enable_set_request_user_for_jwt_cookie`` is enabled.\n\n[8.8.0] - 2023-05-16\n--------------------\n\nremoved\n~~~~~~~\n\n* removed dependency on ``pyjwkest``. uses existing pyjwt dependency instead.\n\n**warning:** this change causes edx-drf-extensions to become a bit more strict about how it handles unexpected whitespace inside of base64-encoded keys. for example, the following json is hard-wrapped inside a yaml single-quoted string, and edx-drf-extensions will start failing to load this in version 8.8.0::\n\n    jwt_public_signing_jwk_set: '{\n      \"keys\": [\n        {\n          \"e\": \"aqab\",\n          \"kid\": \"prod-key-001\",\n          \"kty\": \"rsa\",\n          \"n\": \"vghpcybpcybqdxn0ihnvbwugzgvtb25zdhjhd\n             glvbib0zxh0ihjhdghlcib0agfuigfjdhvhbcbrz\n             xkgbwf0zxjpywwuicak\"\n          }\n        ]\n      }'\n\nnewlines are ignored within base64, but are illegal inside json strings. however, the yaml parser actually replaces the newlines with single spaces due to the single-quoting, so the json will actually contain a modulus (``n``) value with two spaces breaking up the base64. spaces are in turn not allowed in base64. due to interactions between various base64 parsers, url-safe encoding, and how padding is handled by the python base64 standard library, this will be read as intended by pyjwkest but not by pyjwt. this is not a bug, just a difference in how malformed inputs are handled.\n\nthe safe way to encode this json is without hard wrapping::\n\n    jwt_public_signing_jwk_set: |\n      {\n        \"keys\": [\n          {\n            \"e\": \"aqab\",\n            \"kid\": \"prod-key-001\",\n            \"kty\": \"rsa\",\n            \"n\": \"vghpcybpcybqdxn0ihnvbwugzgvtb25zdhjhdglvbib0zxh0ihjhdghlcib0agfuigfjdhvhbcbrzxkgbwf0zxjpywwuicak\"\n          }\n        ]\n      }\n\nbefore upgrading to version 8.8.0, ensure your keys are properly encoded with no whitespace of any sort inside of runs of base64.\n\n[8.7.0] - 2023-04-14\n--------------------\n\nadded\n~~~~~\n\n* add ``edx_drf_extensions_version`` to help with rollout of changes in this library across services.\n\nremoved\n~~~~~~~\n\n* removed exception case for ``invalidtokenerror`` that was never invoked.\n\n[8.6.0] - 2023-04-12\n--------------------\n\nadded\n~~~~~\n\n* added ``jwt_auth_check_symmetric_key``, ``jwt_auth_asymmetric_verified``, ``jwt_auth_symmetric_verified``, and ``jwt_auth_verification_failed`` custom attributes to aid in deprecation and removal of symmetric keys.\n* added ``jwt_auth_issuer`` and ``jwt_auth_issuer_verification`` custom attributes.\n\nchanged\n~~~~~~~\n\n* changed ``jwt_auth_verify_keys_count`` custom attribute to aid in key rotations, to instead be ``jwt_auth_verify_asymmetric_keys_count`` and ``jwt_auth_verify_all_keys_count``. the latter count is only used in the case that the token can't be verified with the asymmetric keys alone.\n\n[8.5.3] - 2023-04-11\n--------------------\n\nfixed\n~~~~~\n\n* (hopefully) fixed the ability to publish edx-drf-extensions, by adding a ``long_description`` to setup.py. there was no real 8.5.1 or 8.5.2.\n\n[8.5.0] - 2023-04-05\n--------------------\n\nadded\n~~~~~\n\n* added ``jwt_auth_verify_keys_count`` custom attribute to aid in key rotations\n\n[8.4.1] - 2022-12-18\n--------------------\n\nadded\n~~~~~\n\n* additional logging in `authenticate_credentials` within the jwt authentication middleware for debugging purposes.\n\n[8.4.0] - 2022-12-16\n--------------------\n\nadded\n~~~~~\n\n* added custom attribute enduser.id, following opentelemetry convention. this works with some new relic automatic tooling around users. the old custom attribute request_user_id should be considered deprecated.\n\n[8.3.1] - 2022-09-09\n--------------------\n\nfixed\n~~~~~~~\n\n* fixed disabled user error by reverting change to jwtauthentication.\n\n[8.3.0] - 2022-09-07\n--------------------\n\nchanged\n~~~~~~~\n\n* jwtauthentication will fail for disabled users (with unusable password).\n\n[8.2.0] - 2022-08-24\n--------------------\n\nadded\n~~~~~\n\n* added only asymmetric jwt decoding functionality in decoder\n\nchanged\n~~~~~~~\n\n* rename toggle_warnings to toggle_warning for consistency with setting_warning.\n\n[8.1.0] - 2022-01-28\n--------------------\n\ndropped\n~~~~~~~\n\n* dropped support for django22, 30, 31\n\n[8.0.1] - 2021-11-01\n--------------------\n\nchanged\n~~~~~~~\n\n* resolve removedindjango4.0 warnings.\n\n\n[8.0.0] - 2021-09-30\n--------------------\n\nchanged\n~~~~~~~\n\n* **breaking change:** updated ``ensurejwtauthsettingsmiddleware`` to understand and work with permissions combined using drf's in-built support. this allows switching away from ``rest_condition``. any view that still uses ``rest_condition`` will cause the middleware to throw an error.\n\n\n[7.0.1] - 2021-08-10\n--------------------\n\nfixed\n~~~~~\n\n* removed dropped ``require_exp`` and ``require_iat`` options from jwt.decode and instead used ``require`` option with both ``exp`` and ``iat``. for more info visit this: https://pyjwt.readthedocs.io/en/stable/changelog.html#dropped-deprecated-require-options-in-jwt-decode\n* this fixes an error in previous release which had a multiple breaking changes\n\n\n[7.0.0] - 2021-08-03\n--------------------\n\nchanged\n~~~~~~~\n\n* **breaking change:** ``generate_jwt_token``: now returns string (instead of bytes), and no longer requires decoding. this was to keep consistent with change to ``jwt.encode`` in `pyjwt` upgrade (see below).\n* **breaking change:** upgraded dependency ``pyjwt[crypto]`` to 2.1.0, which introduces its own breaking changes that may affect consumers of this library. pay careful attention to the 2.0.0 breaking changes documented in https://pyjwt.readthedocs.io/en/stable/changelog.html#v2-0-0.\n\n[6.6.0] - 2021-07-13\n--------------------\n\nadded\n~~~~~\n\n* added support for django3.1 and 3.2\n\n[6.5.0] - 2021-02-12\n--------------------\n\nadded\n~~~~~\n\n* added a new custom attribute `jwt_auth_failed` to both monitor failures, and to help prepare for future refactors.\n\n\n[6.4.0] - 2021-01-19\n--------------------\n\nadded\n~~~~~\n\n* added a new custom attribute `request_is_staff_or_superuser`\n\n[6.3.0] - 2021-01-12\n--------------------\n\nremoved\n~~~~~~~\n\n* drop support for python 3.5\n\n[6.2.0] - 2020-08-24\n--------------------\n\nupdated\n~~~~~~~\n\n* renamed \"custom metric\" to \"custom attribute\" throughout the repo. this was based on a `decision (adr) captured in edx-django-utils`_.\n\n  * deprecated requestmetricsmiddleware due to rename.  use requestcustomattributesmiddleware instead.\n\n.. _`decision (adr) captured in edx-django-utils`: https://github.com/openedx/edx-django-utils/blob/master/edx_django_utils/monitoring/docs/decisions/0002-custom-monitoring-language.rst\n\n[6.1.2] - 2020-07-19\n--------------------\n\nfixed\n~~~~~~~\n\n* `_get_user_from_jwt` no longer throws an `unsupportedmediatype` error for failing to parse \"new user\" requests.\n\n\n\n[6.1.1] - 2020-07-19\n--------------------\n\nfixed\n~~~~~~~\n\n* latest `drf-jwt` is throwing error in case of any other authorization header. fixing that issue in `jwtauthentication` class.\n\n\n\n[6.1.0] - 2020-06-26\n--------------------\n\nchanged\n~~~~~~~\n\n* update `drf-jwt` to pull in new allow-list(they called it blacklist) feature.\n\nadded\n~~~~~\n\nfixed\n~~~~~\n\n\n\n[6.0.0] - 2020-05-05\n--------------------\n\nchanged\n~~~~~~~\n\n* **breaking change**: renamed 'request_auth_type' to 'request_auth_type_guess'. this makes it more clear that this metric could report the wrong value in certain cases. this could break dashboards or alerts that relied on this metric.\n* **breaking change**: renamed value `session-or-unknown` to `session-or-other`. this name makes it more clear that it is the method of authentication that is in question, not whether or not the user is authenticated. this could break dashboards or alerts that relied on this metric.\n\nadded\n~~~~~\n\n* added 'jwt-cookie' as new value for 'request_auth_type_guess'.\n* added new 'request_authenticated_user_found_in_middleware' metric. helps identify for what middleware step the request user was set, if it was set. example values: 'process_request', 'process_view', 'process_response', or 'process_exception'.\n\nfixed\n~~~~~\n\n* fixed/added setting of authentication metrics for exceptions as well.\n* fixed 'request_auth_type_guess' to be more accurate when recording values of 'unauthenticated' and 'no-user'.\n",
  "docs_url": "https://pythonhosted.org/edx-drf-extensions/",
  "keywords": "",
  "license": "apache 2.0",
  "name": "edx-drf-extensions",
  "package_url": "https://pypi.org/project/edx-drf-extensions/",
  "project_url": "https://pypi.org/project/edx-drf-extensions/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/edx-drf-extensions"
  },
  "release_url": "https://pypi.org/project/edx-drf-extensions/9.0.1/",
  "requires_dist": [
    "Django >=2.2",
    "django-waffle",
    "djangorestframework >=3.9.0",
    "drf-jwt",
    "edx-django-utils >=3.8.0",
    "edx-opaque-keys",
    "pyjwt[crypto] >=2.1.0",
    "requests >=2.7.0",
    "semantic-version"
  ],
  "requires_python": "",
  "summary": "edx extensions of django rest framework",
  "version": "9.0.1",
  "releases": [],
  "developers": [
    "edx",
    "oscm@edx.org"
  ],
  "kwds": "edx_django_utils edx_rest_framework_extensions edx_drf_extensions edx_drf_extensions_version edx",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_edx_drf_extensions",
  "homepage": "https://github.com/openedx/edx-drf-extensions",
  "release_count": 98,
  "dependency_ids": [
    "pypi_django",
    "pypi_django_waffle",
    "pypi_djangorestframework",
    "pypi_drf_jwt",
    "pypi_edx_django_utils",
    "pypi_edx_opaque_keys",
    "pypi_pyjwt",
    "pypi_requests",
    "pypi_semantic_version"
  ]
}
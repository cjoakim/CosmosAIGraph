{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "toposort\n========\n\noverview\n========\n\nimplements a topological sort algorithm.\n\nfrom `wikipedia <http://en.wikipedia.org/wiki/topological_sorting>`_:\nin computer science, a topological sort (sometimes abbreviated topsort\nor toposort) or topological ordering of a directed graph is a linear\nordering of its vertices such that for every directed edge uv from\nvertex u to vertex v, u comes before v in the ordering.\n\ninput data description\n======================\n\nthe input to the toposort function is a dict describing the\ndependencies among the input nodes. each key is a dependent node, the\ncorresponding value is a set containing the dependent nodes.\n\nnote that toposort does not care what the input node values mean: it\njust compares them for equality. the examples here usually use\nintegers, but they could be any hashable type.\n\ntypical usage\n=============\n\nthe interpretation of the input data here is: if 2 depends on 11; 9\ndepends on 11, 8 and 10; 10 depends on 11 and 3 (and so on), then in what\norder should we process the items such that all nodes are processed\nbefore any of their dependencies?::\n\n    >>> from toposort import toposort, toposort_flatten\n    >>> list(toposort({2: {11},\n    ...                9: {11, 8, 10},\n    ...                10: {11, 3},\n    ...                11: {7, 5},\n    ...                8: {7, 3},\n    ...               }))\n    [{3, 5, 7}, {8, 11}, {2, 10}, {9}]\n\nand the answer is: process 3, 5, and 7 (in any order); then process 8\nand 11; then process 2 and 10; then process 9. note that 3, 5, and 7\nare returned first because they do not depend on anything. they are\nthen removed from consideration, and then 8 and 11 don't depend on\nanything remaining. this process continues until all nodes are\nreturned, or a circular dependency is detected.\n\ncircular dependencies\n=====================\n\na circular dependency will raise a cyclicdependencyerror, which is\nderived from valueerror.  here 1 depends on 2, and 2 depends on 1::\n\n    >>> list(toposort({1: {2},\n    ...                2: {1},\n    ...               }))\n    traceback (most recent call last):\n        ...\n    toposort.circulardependencyerror: circular dependencies exist among these items: {1:{2}, 2:{1}}\n\nin addition, the 'data' attribute of the raised cyclicdependencyerror\nwill contain a dict containing the subset of the input data involved\nin the circular dependency.\n\n\nmodule contents\n===============\n\n``toposort(data)``\n\nreturns an iterator describing the dependencies among nodes in the\ninput data. each returned item will be a set. each member of this set\nhas no dependencies in this set, or in any set previously returned.\n\n``toposort_flatten(data, sort=true)``\n\nlike toposort(data), except that it returns a list of all of the\ndepend values, in order. if sort is true, the returned nodes are sorted within\neach group before they are appended to the result::\n\n    >>> toposort_flatten({2: {11},\n    ...                   9: {11, 8, 10},\n    ...                   10: {11, 3},\n    ...                   11: {7, 5},\n    ...                   8: {7, 3},\n    ...                  })\n    [3, 5, 7, 8, 11, 2, 10, 9]\n\nnote that this result is the same as the first example: ``[{3, 5, 7}, {8, 11}, {2, 10}, {9}]``,\nexcept that the result is flattened, and within each set the nodes\nare sorted.\n\n\ntesting\n=======\n\nto test, run 'python setup.py test'. on python >= 3.0, this also runs the doctests.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license version 2.0",
  "name": "toposort",
  "package_url": "https://pypi.org/project/toposort/",
  "project_url": "https://pypi.org/project/toposort/",
  "project_urls": {
    "source": "https://gitlab.com/ericvsmith/toposort"
  },
  "release_url": "https://pypi.org/project/toposort/1.10/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "implements a topological sort algorithm.",
  "version": "1.10",
  "releases": [],
  "developers": [
    "eric@trueblade.com"
  ],
  "kwds": "topological_sorting topsort toposort sort toposort_flatten",
  "license_kwds": "apache license version 2.0",
  "libtype": "pypi",
  "id": "pypi_toposort",
  "homepage": "",
  "release_count": 12,
  "dependency_ids": []
}
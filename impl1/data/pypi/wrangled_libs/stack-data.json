{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: debuggers"
  ],
  "description": "extract data from python stack frames and tracebacks for informative displays\n# stack_data\n\n[![tests](https://github.com/alexmojaki/stack_data/actions/workflows/pytest.yml/badge.svg)](https://github.com/alexmojaki/stack_data/actions/workflows/pytest.yml) [![coverage status](https://coveralls.io/repos/github/alexmojaki/stack_data/badge.svg?branch=master)](https://coveralls.io/github/alexmojaki/stack_data?branch=master) [![supports python versions 3.5+](https://img.shields.io/pypi/pyversions/stack_data.svg)](https://pypi.python.org/pypi/stack_data)\n\nthis is a library that extracts data from stack frames and tracebacks, particularly to display more useful tracebacks than the default. it powers the tracebacks in ipython and [futurecoder](https://futurecoder.io/):\n\n![futurecoder example](https://futurecoder.io/static/img/features/traceback.png)\n\nyou can install it from pypi:\n\n    pip install stack_data\n    \n## basic usage\n\nhere's some code we'd like to inspect:\n\n```python\ndef foo():\n    result = []\n    for i in range(5):\n        row = []\n        result.append(row)\n        print_stack()\n        for j in range(5):\n            row.append(i * j)\n    return result\n```\n\nnote that `foo` calls a function `print_stack()`. in reality we can imagine that an exception was raised at this line, or a debugger stopped there, but this is easy to play with directly. here's a basic implementation:\n\n```python\nimport inspect\nimport stack_data\n\n\ndef print_stack():\n    frame = inspect.currentframe().f_back\n    frame_info = stack_data.frameinfo(frame)\n    print(f\"{frame_info.code.co_name} at line {frame_info.lineno}\")\n    print(\"-----------\")\n    for line in frame_info.lines:\n        print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n```\n\n(beware that this has a major bug - it doesn't account for line gaps, which we'll learn about later)\n\nthe output of one call to `print_stack()` looks like:\n\n```\nfoo at line 9\n-----------\n       6 | for i in range(5):\n       7 |     row = []\n       8 |     result.append(row)\n-->    9 |     print_stack()\n      10 |     for j in range(5):\n```\n\nthe code for `print_stack()` is fairly self-explanatory. if you want to learn more details about a particular class or method i suggest looking through some docstrings. `frameinfo` is a class that accepts either a frame or a traceback object and provides a bunch of nice attributes and properties (which are cached so you don't need to worry about performance). in particular `frame_info.lines` is a list of `line` objects. `line.render()` returns the source code of that line suitable for display. without any arguments it simply strips any common leading indentation. later on we'll see a more powerful use for it.\n\nyou can see that `frame_info.lines` includes some lines of surrounding context. by default it includes 3 pieces of context before the main line and 1 piece after. we can configure the amount of context by passing options:\n\n```python\noptions = stack_data.options(before=1, after=0)\nframe_info = stack_data.frameinfo(frame, options)\n```\n\nthen the output looks like:\n\n```\nfoo at line 9\n-----------\n       8 | result.append(row)\n-->    9 | print_stack()\n```\n\nnote that these parameters are not the number of *lines* before and after to include, but the number of *pieces*. a piece is a range of one or more lines in a file that should logically be grouped together. a piece contains either a single simple statement or a part of a compound statement (loops, if, try/except, etc) that doesn't contain any other statements. most pieces are a single line, but a multi-line statement or `if` condition is a single piece. in the example above, all pieces are one line, because nothing is spread across multiple lines. if we change our code to include some multiline bits:\n\n\n```python\ndef foo():\n    result = []\n    for i in range(5):\n        row = []\n        result.append(\n            row\n        )\n        print_stack()\n        for j in range(\n                5\n        ):\n            row.append(i * j)\n    return result\n```\n\nand then run the original code with the default options, then the output is:\n\n```\nfoo at line 11\n-----------\n       6 | for i in range(5):\n       7 |     row = []\n       8 |     result.append(\n       9 |         row\n      10 |     )\n-->   11 |     print_stack()\n      12 |     for j in range(\n      13 |             5\n      14 |     ):\n```\n\nnow lines 8-10 and lines 12-14 are each a single piece. note that the output is essentially the same as the original in terms of the amount of code. the division of files into pieces means that the edge of the context is intuitive and doesn't crop out parts of statements or expressions. for example, if context was measured in lines instead of pieces, the last line of the above would be `for j in range(` which is much less useful.\n\nhowever, if a piece is very long, including all of it could be cumbersome. for this, `options` has a parameter `max_lines_per_piece`, which is 6 by default. suppose we have a piece in our code that's longer than that:\n\n```python\n        row = [\n            1,\n            2,\n            3,\n            4,\n            5,\n        ]\n```\n\n`frame_info.lines` will truncate this piece so that instead of 7 `line` objects it will produce 5 `line` objects and one `line_gap` in the middle, making 6 objects in total for the piece. our code doesn't currently handle gaps, so it will raise an exception. we can modify it like so:\n\n```python\n    for line in frame_info.lines:\n        if line is stack_data.line_gap:\n            print(\"       (...)\")\n        else:\n            print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n```\n\nnow the output looks like:\n\n```\nfoo at line 15\n-----------\n       6 | for i in range(5):\n       7 |     row = [\n       8 |         1,\n       9 |         2,\n       (...)\n      12 |         5,\n      13 |     ]\n      14 |     result.append(row)\n-->   15 |     print_stack()\n      16 |     for j in range(5):\n```\n\nalternatively, you can flip the condition around and check `if isinstance(line, stack_data.line):`. either way, you should always check for line gaps, or your code may appear to work at first but fail when it encounters a long piece.\n\nnote that the executing piece, i.e. the piece containing the current line being executed (line 15 in this case) is never truncated, no matter how long it is.\n\nthe lines of context never stray outside `frame_info.scope`, which is the innermost function or class definition containing the current line. for example, this is the output for a short function which has neither 3 lines before nor 1 line after the current line:\n\n```\nbar at line 6\n-----------\n       4 | def bar():\n       5 |     foo()\n-->    6 |     print_stack()\n```\n\nsometimes it's nice to ensure that the function signature is always showing. this can be done with `options(include_signature=true)`. the result looks like this:\n\n```\nfoo at line 14\n-----------\n       9 | def foo():\n       (...)\n      11 |     for i in range(5):\n      12 |         row = []\n      13 |         result.append(row)\n-->   14 |         print_stack()\n      15 |         for j in range(5):\n```\n\nto avoid wasting space, pieces never start or end with a blank line, and blank lines between pieces are excluded. so if our code looks like this:\n\n\n```python\n    for i in range(5):\n        row = []\n\n        result.append(row)\n        print_stack()\n\n        for j in range(5):\n```\n\nthe output doesn't change much, except you can see jumps in the line numbers:\n\n```\n      11 |     for i in range(5):\n      12 |         row = []\n      14 |         result.append(row)\n-->   15 |         print_stack()\n      17 |         for j in range(5):\n```\n\n## variables\n\nyou can also inspect variables and other expressions in a frame, e.g:\n\n```python\n    for var in frame_info.variables:\n        print(f\"{var.name} = {repr(var.value)}\")\n```\n\nwhich may output:\n\n```python\nresult = [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8], [0, 3, 6, 9, 12], []]\ni = 4\nrow = []\nj = 4\n```\n\n`frame_info.variables` returns a list of `variable` objects, which have attributes `name`, `value`, and `nodes`, which is a list of all ast representing that expression.\n\na `variable` may refer to an expression other than a simple variable name. it can be any expression evaluated by the library [`pure_eval`](https://github.com/alexmojaki/pure_eval) which it deems 'interesting' (see those docs for more info). this includes expressions like `foo.bar` or `foo[bar]`. in these cases `name` is the source code of that expression. `pure_eval` ensures that it only evaluates expressions that won't have any side effects, e.g. where `foo.bar` is a normal attribute rather than a descriptor such as a property.\n\n`frame_info.variables` is a list of all the interesting expressions found in `frame_info.scope`, e.g. the current function, which may include expressions not visible in `frame_info.lines`. you can restrict the list by using `frame_info.variables_in_lines` or even `frame_info.variables_in_executing_piece`. for more control you can use `frame_info.variables_by_lineno`. see the docstrings for more information.\n\n## rendering lines with ranges and markers\n\nsometimes you may want to insert special characters into the text for display purposes, e.g. html or ansi color codes. `stack_data` provides a few tools to make this easier.\n\nlet's say we have a `line` object where `line.text` (the original raw source code of that line) is `\"foo = bar\"`, so `line.text[6:9]` is `\"bar\"`, and we want to emphasise that part by inserting html at positions 6 and 9 in the text. here's how we can do that directly:\n\n```python\nmarkers = [\n    stack_data.markerinline(position=6, is_start=true, string=\"<b>\"),\n    stack_data.markerinline(position=9, is_start=false, string=\"</b>\"),\n]\nline.render(markers)  # returns \"foo = <b>bar</b>\"\n```\n\nhere `is_start=true` indicates that the marker is the first of a pair. this helps `line.render()` sort and insert the markers correctly so you don't end up with malformed html like `foo<b>.<i></b>bar</i>` where tags overlap.\n\nsince we're inserting html, we should actually use `line.render(markers, escape_html=true)` which will escape special html characters in the python source (but not the markers) so for example `foo = bar < spam` would be rendered as `foo = <b>bar</b> &lt; spam`.\n\nusually though you wouldn't create markers directly yourself. instead you would start with one or more ranges and then convert them, like so:\n\n```python\nranges = [\n    stack_data.rangeinline(start=0, end=3, data=\"foo\"),\n    stack_data.rangeinline(start=6, end=9, data=\"bar\"),\n]\n\ndef convert_ranges(r):\n    if r.data == \"bar\":\n        return \"<b>\", \"</b>\"        \n\n# this results in `markers` being the same as in the above example.\nmarkers = stack_data.markers_from_ranges(ranges, convert_ranges)\n```\n\n`rangeinline` has a `data` attribute which can be any object. `markers_from_ranges` accepts a converter function to which it passes all the `rangeinline` objects. if the converter function returns a pair of strings, it creates two markers from them. otherwise it should return `none` to indicate that the range should be ignored, as with the first range containing `\"foo\"` in this example.\n\nthe reason this is useful is because there are built in tools to create these ranges for you. for example, if we change our `print_stack()` function to contain this:\n\n```python\ndef convert_variable_ranges(r):\n    variable, _node = r.data\n    return f'<span data-value=\"{repr(variable.value)}\">', '</span>'\n\nmarkers = stack_data.markers_from_ranges(line.variable_ranges, convert_variable_ranges)\nprint(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render(markers, escape_html=true)}\")\n```\n\nthen the output becomes:\n\n```\nfoo at line 15\n-----------\n       9 | def foo():\n       (...)\n      11 |     for <span data-value=\"4\">i</span> in range(5):\n      12 |         <span data-value=\"[]\">row</span> = []\n      14 |         <span data-value=\"[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8], [0, 3, 6, 9, 12], []]\">result</span>.append(<span data-value=\"[]\">row</span>)\n-->   15 |         print_stack()\n      17 |         for <span data-value=\"4\">j</span> in range(5):\n```\n\n`line.variable_ranges` is a list of rangeinlines for each variable that appears at least partially in this line. the data attribute of the range is a pair `(variable, node)` where node is the particular ast node from the list `variable.nodes` that corresponds to this range.\n\nyou can also use `line.token_ranges` (e.g. if you want to do your own syntax highlighting) or `line.executing_node_ranges` if you want to highlight the currently executing node identified by the [`executing`](https://github.com/alexmojaki/executing) library. or if you want to make your own range from an ast node, use `line.range_from_node(node, data)`. see the docstrings for more info.\n\n### syntax highlighting with pygments\n\nif you'd like pretty colored text without the work, you can let [pygments](https://pygments.org/) do it for you. just follow these steps:\n\n1. `pip install pygments` separately as it's not a dependency of `stack_data`.\n2. create a pygments formatter object such as `htmlformatter` or `terminal256formatter`.\n3. pass the formatter to `options` in the argument `pygments_formatter`.\n4. use `line.render(pygmented=true)` to get your formatted text. in this case you can't pass any markers to `render`.\n\nif you want, you can also highlight the executing node in the frame in combination with the pygments syntax highlighting. for this you will need:\n\n1. a pygments style - either a style class or a string that names it. see the [documentation on styles](https://pygments.org/docs/styles/) and the [styles gallery](https://blog.yjl.im/2015/08/pygments-styles-gallery.html).\n2. a modification to make to the style for the executing node, which is a string such as `\"bold\"` or `\"bg:#ffff00\"` (yellow background). see the [documentation on style rules](https://pygments.org/docs/styles/#style-rules).\n3. pass these two things to `stack_data.style_with_executing_node(style, modifier)` to get a new style class.\n4. pass the new style to your formatter when you create it.\n\nnote that this doesn't work with `terminalformatter` which just uses the basic ansi colors and doesn't use the style passed to it in general.\n\n## getting the full stack\n\ncurrently `print_stack()` doesn't actually print the stack, it just prints one frame. instead of `frame_info = frameinfo(frame, options)`, let's do this:\n\n```python\nfor frame_info in frameinfo.stack_data(frame, options):\n```\n\nnow the output looks something like this:\n\n```\n<module> at line 18\n-----------\n      14 |         for j in range(5):\n      15 |             row.append(i * j)\n      16 |     return result\n-->   18 | bar()\n\nbar at line 5\n-----------\n       4 | def bar():\n-->    5 |     foo()\n\nfoo at line 13\n-----------\n      10 | for i in range(5):\n      11 |     row = []\n      12 |     result.append(row)\n-->   13 |     print_stack()\n      14 |     for j in range(5):\n```\n\nhowever, just as `frame_info.lines` doesn't always yield `line` objects, `frameinfo.stack_data` doesn't always yield `frameinfo` objects, and we must modify our code to handle that. let's look at some different sample code:\n\n```python\ndef factorial(x):\n    return x * factorial(x - 1)\n\n\ntry:\n    print(factorial(5))\nexcept:\n    print_stack()\n```\n\nin this code we've forgotten to include a base case in our `factorial` function so it will fail with a `recursionerror` and there'll be many frames with similar information. similar to the built in python traceback, `stack_data` avoids showing all of these frames. instead you will get a `repeatedframes` object which summarises the information. see its docstring for more details.\n\nhere is our updated implementation:\n\n```python\ndef print_stack():\n    for frame_info in frameinfo.stack_data(sys.exc_info()[2]):\n        if isinstance(frame_info, frameinfo):\n            print(f\"{frame_info.code.co_name} at line {frame_info.lineno}\")\n            print(\"-----------\")\n            for line in frame_info.lines:\n                print(f\"{'-->' if line.is_current else '   '} {line.lineno:4} | {line.render()}\")\n\n            for var in frame_info.variables:\n                print(f\"{var.name} = {repr(var.value)}\")\n\n            print()\n        else:\n            print(f\"... {frame_info.description} ...\\n\")\n```\n\nand the output:\n\n```\n<module> at line 9\n-----------\n       4 | def factorial(x):\n       5 |     return x * factorial(x - 1)\n       8 | try:\n-->    9 |     print(factorial(5))\n      10 | except:\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = 5\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = 4\n\n... factorial at line 5 (996 times) ...\n\nfactorial at line 5\n-----------\n       4 | def factorial(x):\n-->    5 |     return x * factorial(x - 1)\nx = -993\n```\n\nin addition to handling repeated frames, we've passed a traceback object to `frameinfo.stack_data` instead of a frame.\n\nif you want, you can pass `collapse_repeated_frames=false` to `frameinfo.stack_data` (not to `options`) and it will just yield `frameinfo` objects for the full stack.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "stack-data",
  "package_url": "https://pypi.org/project/stack-data/",
  "project_url": "https://pypi.org/project/stack-data/",
  "project_urls": {
    "Homepage": "http://github.com/alexmojaki/stack_data"
  },
  "release_url": "https://pypi.org/project/stack-data/0.6.3/",
  "requires_dist": [
    "executing >=1.2.0",
    "asttokens >=2.1.0",
    "pure-eval",
    "pytest ; extra == 'tests'",
    "typeguard ; extra == 'tests'",
    "pygments ; extra == 'tests'",
    "littleutils ; extra == 'tests'",
    "cython ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "extract data from python stack frames and tracebacks for informative displays",
  "version": "0.6.3",
  "releases": [],
  "developers": [
    "alex.mojaki@gmail.com",
    "alex_hall"
  ],
  "kwds": "pytest traceback tracebacks pyversions ipython",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_stack_data",
  "homepage": "http://github.com/alexmojaki/stack_data",
  "release_count": 21,
  "dependency_ids": [
    "pypi_asttokens",
    "pypi_cython",
    "pypi_executing",
    "pypi_littleutils",
    "pypi_pure_eval",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text describes the GitHub repository \"alexmojaki/stack_data,\" which is a public library designed to extract data from stack frames and tracebacks, aiming to display more useful tracebacks than the default. It is particularly used in IPython and futurecoder. The library can be installed from PyPI using `pip install stack_data`. The documentation provides examples of basic usage, such as inspecting code with a function `print_stack()` to display the current execution point within a stack frame, alongside surrounding context for better understanding. The library offers customization options for the amount of context shown and handles variables and expressions within frames. It also supports rendering lines with special characters for display purposes, like HTML or ANSI color codes, and integrates with Pygments for syntax highlighting. Advanced features include handling repeated frames in recursive functions to avoid redundancy in output. The repository is licensed under the MIT license and has 39 stars and 16 forks.",
  "embedding": [
    -0.026095744222402573,
    0.009536650963127613,
    0.009464403614401817,
    -0.04921489581465721,
    -0.010165202431380749,
    0.018755413591861725,
    -0.02556111291050911,
    -0.030488383024930954,
    -0.006527548190206289,
    -0.020287057384848595,
    5.8023655583383515e-05,
    0.023668233305215836,
    -0.012166454456746578,
    0.015041898936033249,
    0.01236152183264494,
    -0.012303723953664303,
    0.018712064251303673,
    0.015114146284759045,
    0.017194870859384537,
    -0.019896920770406723,
    0.009905111975967884,
    -0.010201326571404934,
    -0.010663709603250027,
    0.007665444165468216,
    -0.01793179288506508,
    0.038984671235084534,
    0.007824388332664967,
    -0.01985357329249382,
    0.003135535167530179,
    -0.029910404235124588,
    0.033551670610904694,
    -0.02103842981159687,
    -0.018654266372323036,
    -0.026731520891189575,
    -0.030343888327479362,
    -0.011639048345386982,
    -0.00019789001089520752,
    0.005035640671849251,
    0.01946343667805195,
    0.019246695563197136,
    0.022656770423054695,
    0.012217027135193348,
    -0.01716597191989422,
    -0.022020993754267693,
    0.00908871740102768,
    0.018307479098439217,
    0.030286090448498726,
    -0.028725547716021538,
    -0.009558324702084064,
    -0.008517962880432606,
    0.036932848393917084,
    0.02827761322259903,
    -0.03517001122236252,
    -0.03219342231750488,
    0.044417671859264374,
    -0.027352847158908844,
    0.010584237053990364,
    0.01800404116511345,
    -0.0038760704919695854,
    -0.007817164063453674,
    0.03834889456629753,
    0.01128503680229187,
    -0.018206333741545677,
    -0.010223000310361385,
    -0.007376454770565033,
    -0.01696367934346199,
    -0.009825640358030796,
    0.035372305661439896,
    0.0010918381158262491,
    -0.0035184461157768965,
    0.017252668738365173,
    0.027641836553812027,
    0.0024780842941254377,
    0.003558182157576084,
    0.02138521708548069,
    -0.00942105520516634,
    -0.0049453312531113625,
    0.027222802862524986,
    -0.010230225510895252,
    0.0017610292416065931,
    0.011704071424901485,
    -0.031326454132795334,
    0.002595486119389534,
    0.02967921271920204,
    0.02180425077676773,
    0.02943357080221176,
    0.009291009977459908,
    0.04826123267412186,
    -0.010902125388383865,
    -0.0155187314376235,
    0.007152487989515066,
    -0.0009608897962607443,
    0.00105119904037565,
    0.011198339983820915,
    -0.005288506392389536,
    0.007983332499861717,
    -0.02553221397101879,
    0.01898660510778427,
    -0.042683735489845276,
    -0.025763405486941338,
    -0.004920044913887978,
    0.007802714128047228,
    -0.012614388018846512,
    -0.019001053646206856,
    -0.02713610604405403,
    -0.011877465061843395,
    0.03430304303765297,
    0.0047069150023162365,
    0.02242557890713215,
    0.015157494693994522,
    -0.024535201489925385,
    0.06213272362947464,
    -0.00017350653070025146,
    -0.017252668738365173,
    0.035372305661439896,
    0.008337344974279404,
    0.036730553954839706,
    -0.02709275670349598,
    -0.04245254397392273,
    -0.022281084209680557,
    0.007947209291160107,
    -0.001469330512918532,
    0.007694343104958534,
    0.0030054899398237467,
    0.025503315031528473,
    -0.014565066434442997,
    -0.013958188705146313,
    -0.0018305672565475106,
    -0.014774583280086517,
    -0.008857525885105133,
    0.01197861135005951,
    -0.030170494690537453,
    0.016689138486981392,
    0.004631055518984795,
    -0.015822170302271843,
    -0.009392156265676022,
    0.010475866496562958,
    -0.018061839044094086,
    -0.005610006861388683,
    -0.03092186711728573,
    0.011097193695604801,
    0.023653782904148102,
    -0.0006520323804579675,
    -0.003494965611025691,
    -0.03433194383978844,
    0.03210672363638878,
    0.013192366808652878,
    -0.007752140983939171,
    -0.005978468339890242,
    -0.0010945474496111274,
    0.01145843043923378,
    -0.01609671115875244,
    -0.03493881970643997,
    0.0036250108387321234,
    -0.0025792305823415518,
    -0.008041130378842354,
    -0.0028357086703181267,
    0.010902125388383865,
    0.005021191202104092,
    -0.0013943739468231797,
    -0.0017637384589761496,
    0.025965698063373566,
    0.0009446341427974403,
    -0.005819524172693491,
    0.01013630349189043,
    0.04907040297985077,
    0.019795775413513184,
    -0.02316250093281269,
    -0.012549364939332008,
    0.01501299999654293,
    0.023104703053832054,
    0.026659272611141205,
    -0.01400153711438179,
    -0.0073836795054376125,
    0.002030150732025504,
    0.017151521518826485,
    0.014550616964697838,
    -0.0006312612676993012,
    -0.02145746350288391,
    0.02849435620009899,
    0.038435593247413635,
    0.006570896599441767,
    0.012101431377232075,
    0.009847314096987247,
    -0.023451490327715874,
    -0.00488392123952508,
    0.01577882282435894,
    -0.007687118370085955,
    -0.004381801933050156,
    -3.911516978405416e-05,
    0.022440027445554733,
    0.0005847520078532398,
    0.010345821268856525,
    0.0027562365867197514,
    -0.5405257940292358,
    -0.012065308168530464,
    -0.011371733620762825,
    -0.03173103928565979,
    -0.006433626636862755,
    0.005544984247535467,
    -0.032655805349349976,
    0.004295105114579201,
    -0.03005489893257618,
    0.006946582812815905,
    -0.007643769960850477,
    0.0424814447760582,
    0.051844701170921326,
    -0.013177917338907719,
    -0.01765725389122963,
    -0.028537703678011894,
    -0.004873083904385567,
    -0.019145548343658447,
    0.009305459447205067,
    0.006646756548434496,
    0.0002851512690540403,
    0.035892486572265625,
    -0.01692033000290394,
    0.020763888955116272,
    -0.0191888976842165,
    0.030257191509008408,
    0.011342834681272507,
    -0.0131490183994174,
    -0.00584119837731123,
    0.011039395816624165,
    -0.020590495318174362,
    -0.013748670928180218,
    0.0069321333430707455,
    -0.019550133496522903,
    0.05360753461718559,
    0.008705805987119675,
    -0.007744916249066591,
    0.04444657266139984,
    0.014066559262573719,
    0.05123782157897949,
    -0.01627010479569435,
    -0.01810518652200699,
    0.0140376603230834,
    0.011068294756114483,
    0.019839122891426086,
    -0.005906220991164446,
    0.02336479350924492,
    0.03970714658498764,
    0.010461417026817799,
    -0.03326268121600151,
    -0.006086839362978935,
    -0.017223769798874855,
    0.017194870859384537,
    -0.0020554373040795326,
    0.03762642294168472,
    -0.004273430909961462,
    0.008330119773745537,
    0.0007021539495326579,
    0.019737977534532547,
    -0.046064913272857666,
    0.012903377413749695,
    0.01433387491852045,
    -0.006473362911492586,
    0.002730950014665723,
    -0.012180903926491737,
    0.007152487989515066,
    0.0048080612905323505,
    -0.018538670614361763,
    0.020359303802251816,
    -0.025026483461260796,
    0.03953375294804573,
    0.007242796942591667,
    -0.008640783838927746,
    -0.010996047407388687,
    0.0009735330822877586,
    0.05704651027917862,
    0.016038913279771805,
    0.0014386253897100687,
    0.00617353618144989,
    0.015099696815013885,
    0.01842307485640049,
    0.013351310975849628,
    -0.041354384273290634,
    -0.00674790283665061,
    0.04094979912042618,
    0.008055579848587513,
    -0.0030831557232886553,
    -0.01297562476247549,
    0.019564583897590637,
    0.0019958331249654293,
    0.0032132009509950876,
    0.009218762628734112,
    0.0022775977849960327,
    -0.031326454132795334,
    -0.005577495787292719,
    0.026341384276747704,
    -0.008489063940942287,
    0.01748386025428772,
    -0.021515261381864548,
    -0.01975242607295513,
    -0.027916377410292625,
    0.0032673864625394344,
    0.0016815571580082178,
    -0.028739996254444122,
    0.01664579100906849,
    0.008330119773745537,
    0.006169924046844244,
    -0.012686635367572308,
    -0.014897404238581657,
    -0.036932848393917084,
    -0.005411326885223389,
    -0.026370283216238022,
    -0.02005586586892605,
    -0.023176951333880424,
    0.0036250108387321234,
    -0.0366438589990139,
    0.02548886649310589,
    -0.002149358857423067,
    -0.01852422207593918,
    0.0028375147376209497,
    0.028508804738521576,
    -0.006458913441747427,
    0.021515261381864548,
    0.0212407223880291,
    0.014998550526797771,
    -0.00806280504912138,
    0.05129561945796013,
    -0.024260660633444786,
    -0.03441863879561424,
    0.012086981907486916,
    -0.017541658133268356,
    -0.004092812538146973,
    0.022194387391209602,
    -0.027771882712841034,
    0.0171370729804039,
    -0.012426544912159443,
    0.0057256026193499565,
    0.004085587803274393,
    0.0032276504207402468,
    -0.042365849018096924,
    -0.04068971052765846,
    0.027323948219418526,
    -0.015460933558642864,
    -0.017686152830719948,
    -0.03392735868692398,
    -0.010902125388383865,
    -0.016602441668510437,
    0.0019019115716218948,
    0.017816197127103806,
    -0.009305459447205067,
    -0.0028375147376209497,
    -0.0001721518929116428,
    -0.02069164253771305,
    0.02047489956021309,
    0.012303723953664303,
    -0.0007780136656947434,
    0.0069827064871788025,
    -0.012354297563433647,
    -0.005747276823967695,
    -0.005815912038087845,
    0.0010683577274903655,
    -0.006419177167117596,
    -0.0017014251789078116,
    0.011884689331054688,
    -0.03173103928565979,
    -0.0006709973094984889,
    -0.014940752647817135,
    0.03314708545804024,
    0.016501296311616898,
    -0.019969169050455093,
    -0.018134085461497307,
    -0.0191888976842165,
    -0.020662743598222733,
    0.011277811601758003,
    -0.014319425448775291,
    0.010114629752933979,
    -0.00856853649020195,
    0.01783064752817154,
    -0.02420286275446415,
    -0.016038913279771805,
    0.006953807547688484,
    -0.000600556144490838,
    -0.028436558321118355,
    -0.0239283237606287,
    0.014218279160559177,
    0.024751942604780197,
    0.013235715217888355,
    -0.008503513410687447,
    0.017122622579336166,
    0.00023954513017088175,
    -0.005877322051674128,
    0.0030253578443080187,
    -0.03901357203722,
    0.01093824952840805,
    -0.009045368991792202,
    0.01217367872595787,
    0.01485405582934618,
    -0.020142562687397003,
    0.013134568929672241,
    0.027251701802015305,
    0.0030289702117443085,
    0.020778339356184006,
    -0.015099696815013885,
    -0.007264471147209406,
    0.007549848407506943,
    -0.030979664996266365,
    0.02434735745191574,
    -0.02758403867483139,
    0.0038941323291510344,
    -0.018972154706716537,
    0.024780841544270515,
    -0.024304009974002838,
    -0.012412095442414284,
    -0.0033775637857615948,
    0.03019939363002777,
    0.00775936571881175,
    -0.00048766963300295174,
    0.027728533372282982,
    -0.005371590610593557,
    -0.022729016840457916,
    -0.015287539921700954,
    0.023046905174851418,
    0.0174549613147974,
    0.013098444789648056,
    -0.009847314096987247,
    -0.014969651587307453,
    0.01765725389122963,
    0.0010963536333292723,
    0.011248912662267685,
    -0.035545699298381805,
    0.020749440416693687,
    0.022237734869122505,
    -0.0021945133339613676,
    -0.011718520894646645,
    0.029231278225779533,
    -0.006325255613774061,
    0.024824190884828568,
    -0.020489349961280823,
    0.03450533747673035,
    -0.01163182407617569,
    -0.015128595754504204,
    0.01563432812690735,
    0.028190916404128075,
    0.0003483676991891116,
    0.010201326571404934,
    -7.794811972416937e-05,
    0.02106732875108719,
    -0.015070797875523567,
    -0.04199016094207764,
    0.015663227066397667,
    0.00516207329928875,
    0.025344371795654297,
    0.008293996565043926,
    0.018885457888245583,
    0.028581053018569946,
    0.010288023389875889,
    -0.0022757917176932096,
    0.009081492200493813,
    0.029794808477163315,
    0.0017005220288410783,
    0.005823136772960424,
    0.005353529006242752,
    0.025821203365921974,
    -0.003847171552479267,
    0.03219342231750488,
    -0.03410075232386589,
    -0.02434735745191574,
    -0.027020510286092758,
    -0.02970811165869236,
    0.002814034465700388,
    -0.022035442292690277,
    -0.032164521515369415,
    0.005548596847802401,
    0.0024130616802722216,
    0.04274153336882591,
    -0.011089968495070934,
    0.022440027445554733,
    -0.005588332656770945,
    0.006112126167863607,
    -2.328283841279699e-07,
    -0.012072532437741756,
    -0.0004903789376839995,
    0.03092186711728573,
    0.014124357141554356,
    -0.00022419256856665015,
    -0.027699634432792664,
    -0.01985357329249382,
    -0.002591873751953244,
    0.009493302553892136,
    -0.014752909541130066,
    0.015070797875523567,
    0.009832864627242088,
    0.013835367746651173,
    0.004558808170258999,
    0.008214524015784264,
    -0.0020247320644557476,
    0.026789318770170212,
    0.0011225432390347123,
    -0.0021060104481875896,
    -0.007983332499861717,
    0.001914554857648909,
    -0.009681145660579205,
    -0.018654266372323036,
    0.01595221646130085,
    0.05632403492927551,
    -0.01321404054760933,
    -0.0036701655481010675,
    -0.00260812952183187,
    -0.008575760759413242,
    -0.021789802238345146,
    -0.009652246721088886,
    -0.003191526746377349,
    -0.01995471864938736,
    0.007105526980012655,
    0.02817646786570549,
    -0.019044402986764908,
    0.02639918215572834,
    -0.0003966831136494875,
    0.021023979410529137,
    0.026456980034708977,
    -0.022194387391209602,
    -0.03950485214591026,
    -0.011292261071503162,
    0.01286725327372551,
    0.011942487210035324,
    0.023639334365725517,
    -0.030430585145950317,
    -0.009789516218006611,
    -0.013488580472767353,
    -0.04112319275736809,
    -0.012787781655788422,
    0.01302619744092226,
    0.019058851525187492,
    -0.0058737099170684814,
    0.017946243286132812,
    0.01839417591691017,
    0.02748289331793785,
    0.005281281657516956,
    -0.0028447394724935293,
    0.0045190718956291676,
    -0.02284461259841919,
    -0.0043167793191969395,
    0.005815912038087845,
    0.0055847205221652985,
    -0.005353529006242752,
    -0.00044364389032125473,
    0.004407088737934828,
    0.030459484085440636,
    0.03875347971916199,
    0.020850585773587227,
    0.025647809728980064,
    0.030603978782892227,
    0.0011198340216651559,
    -0.03904246911406517,
    0.0023028843570500612,
    0.003681002650409937,
    0.01015075296163559,
    0.03349387273192406,
    -0.046960778534412384,
    0.043868593871593475,
    0.016327902674674988,
    -0.010186877101659775,
    0.019839122891426086,
    0.017194870859384537,
    -0.01585106924176216,
    0.010353045538067818,
    0.009861763566732407,
    -0.0005824943073093891,
    0.0013076771283522248,
    -0.007788264658302069,
    -0.009825640358030796,
    0.02845100685954094,
    -0.007954433560371399,
    -0.024304009974002838,
    0.03178883716464043,
    -0.001126155606471002,
    -0.04620940610766411,
    -0.014615639112889767,
    0.03314708545804024,
    -0.010121854022145271,
    0.011118867434561253,
    -0.010186877101659775,
    -0.016761386767029762,
    -0.00896589644253254,
    -0.015301989391446114,
    -0.007752140983939171,
    0.007882186211645603,
    -0.007694343104958534,
    -0.0033540832810103893,
    -0.004685240797698498,
    -0.00521625904366374,
    0.022902410477399826,
    -0.01699257828295231,
    0.011017721146345139,
    0.006440851371735334,
    -0.03005489893257618,
    -0.005339079536497593,
    -0.0018350827740505338,
    0.023697132244706154,
    0.02437625639140606,
    0.01065648440271616,
    -0.007470376323908567,
    0.022136589512228966,
    -0.0336383692920208,
    0.019347840920090675,
    -0.038608986884355545,
    -0.02632693573832512,
    -0.04305942356586456,
    0.017353814095258713,
    -0.005830361507833004,
    0.004797224421054125,
    -0.00913929007947445,
    -0.010757630690932274,
    0.035921383649110794,
    -0.006588958669453859,
    0.01434832438826561,
    -0.010931024327874184,
    -0.013661974109709263,
    0.006632307078689337,
    0.034187447279691696,
    0.011863015592098236,
    0.02207879163324833,
    0.018379727378487587,
    -0.010540888644754887,
    0.019376739859580994,
    -0.02556111291050911,
    -0.03384066000580788,
    -0.008178400807082653,
    0.003260161727666855,
    -0.006527548190206289,
    -0.01723821833729744,
    0.009146515280008316,
    0.0029946528375148773,
    -0.0027237252797931433,
    0.03779981657862663,
    -0.009760617278516293,
    -0.01150900311768055,
    0.012253151275217533,
    -0.003052450716495514,
    -0.003847171552479267,
    -0.029939303174614906,
    0.03398515656590462,
    -0.027295049279928207,
    -0.020503798499703407,
    0.014189380221068859,
    -0.0336383692920208,
    0.017743950709700584,
    0.02820536680519581,
    -0.001950678532011807,
    -0.008893649093806744,
    0.0026027108542621136,
    -0.021081777289509773,
    -0.02528657391667366,
    0.004504622425884008,
    0.0005928798345848918,
    0.026514777913689613,
    -0.0012065308401361108,
    -0.03262690454721451,
    -0.0007585972198285162,
    0.026485878974199295,
    -0.01999806798994541,
    0.014601189643144608,
    0.005714765749871731,
    -0.016905881464481354,
    -0.006010979879647493,
    0.00312108569778502,
    -0.014651763252913952,
    -0.03797321021556854,
    -0.022541174665093422,
    -0.029274627566337585,
    -0.014774583280086517,
    0.013524704612791538,
    -0.012224252335727215,
    0.016168957576155663,
    -0.00345703586935997,
    0.005443837959319353,
    -0.031153058633208275,
    -0.01149455364793539,
    -0.005472736898809671,
    0.01580772176384926,
    -0.013524704612791538,
    0.00811337772756815,
    0.02943357080221176,
    0.01452171802520752,
    0.018336378037929535,
    0.03563239425420761,
    0.006614245008677244,
    0.0032619680278003216,
    -0.01943453773856163,
    -0.004750263411551714,
    -0.002232443308457732,
    0.010049606673419476,
    0.018408626317977905,
    0.0005048284074291587,
    -0.0031662401743233204,
    0.01817743480205536,
    -0.024231761693954468,
    -0.02664482407271862,
    0.015273090451955795,
    0.005075376480817795,
    0.0009879826102405787,
    -0.013134568929672241,
    -0.009919561445713043,
    -0.0020102825947105885,
    -0.021298520267009735,
    -0.012527691200375557,
    -0.003458841936662793,
    0.027569590136408806,
    -0.02306135557591915,
    0.025647809728980064,
    0.030806271359324455,
    -0.031499847769737244,
    0.013351310975849628,
    0.002965753898024559,
    0.012701084837317467,
    -0.011256137862801552,
    0.005360753741115332,
    0.018871009349822998,
    0.031181957572698593,
    -0.003272805130109191,
    -0.010389169678092003,
    -0.04883921146392822,
    0.019824674353003502,
    0.0020734991412609816,
    -0.007362005300819874,
    0.021197373047471046,
    0.004215633030980825,
    0.013394659385085106,
    -0.000253768841503188,
    0.0069935438223183155,
    -0.0004614799690898508,
    0.008871975354850292,
    0.027295049279928207,
    -0.004970618057996035,
    -0.02323474921286106,
    -0.02165975607931614,
    -0.029621414840221405,
    -0.021284069865942,
    0.015273090451955795,
    0.0020590496715158224,
    -0.0052343206480145454,
    0.015648776665329933,
    -0.024535201489925385,
    -0.01416048128157854,
    0.007398128975182772,
    0.01585106924176216,
    0.021601958200335503,
    0.048116736114025116,
    0.02427511103451252,
    0.02820536680519581,
    -0.013279063627123833,
    -0.011877465061843395,
    -0.020417101681232452,
    -0.013452457264065742,
    -0.006032654084265232,
    0.01814853586256504,
    0.04415758326649666,
    -0.05155571177601814,
    -0.04037182033061981,
    0.003205976216122508,
    0.011053845286369324,
    -0.01365474984049797,
    -0.009912337176501751,
    0.020142562687397003,
    0.02493978664278984,
    0.002292047254741192,
    -0.05097773298621178,
    -0.017296016216278076,
    -0.012787781655788422,
    -0.0014729428803548217,
    -0.008633558638393879,
    0.006849049124866724,
    0.003664746880531311,
    -0.00959444884210825,
    -0.019665729254484177,
    0.031991127878427505,
    -0.014666212722659111,
    -0.0067948633804917336,
    0.01567767560482025,
    -0.004432375077158213,
    -0.018206333741545677,
    -0.012953950092196465,
    0.006549222394824028,
    0.008041130378842354,
    -0.0074342526495456696,
    0.009305459447205067,
    -0.007506499998271465,
    0.00994123611599207,
    0.04921489581465721,
    -0.019145548343658447,
    -0.02306135557591915,
    -0.005537759512662888,
    -0.017888445407152176,
    0.0507754385471344,
    -0.021226271986961365,
    0.001789025031030178,
    -0.03753972426056862,
    -0.027453994378447533,
    0.005367978475987911,
    -0.020142562687397003,
    -0.02259897254407406,
    0.002172839129343629,
    -0.016140058636665344,
    -0.003406462725251913,
    0.00550163583829999,
    -0.016703588888049126,
    0.005714765749871731,
    -0.004493785556405783,
    -0.006249396130442619,
    -0.0078099388629198074,
    -0.008633558638393879,
    -0.011292261071503162,
    0.005761726293712854,
    -0.022064341232180595,
    -0.023292547091841698,
    -0.025084281340241432,
    0.008178400807082653,
    0.016848083585500717,
    0.011884689331054688,
    -0.0021620020270347595,
    0.00617353618144989,
    0.03834889456629753,
    -0.02082168683409691,
    0.022786814719438553,
    -0.020908383652567863,
    0.019766876474022865,
    -0.03441863879561424,
    -5.387507553678006e-05,
    -0.0033522772137075663,
    -0.006563671864569187,
    -0.0002194513363065198,
    -0.0182785801589489,
    -0.015576529316604137,
    -0.0023317832965403795,
    -0.005938732530921698,
    0.021255170926451683,
    0.009673920460045338,
    0.002405836945399642,
    0.0004504170792642981,
    0.027555139735341072,
    0.0001222560676978901,
    -0.007911085151135921,
    -0.01563432812690735,
    0.013279063627123833,
    -0.023971671238541603,
    -0.005646130535751581,
    -0.006567284464836121,
    -0.010490315966308117,
    0.016732487827539444,
    -0.007687118370085955,
    0.0025828429497778416,
    0.03332047909498215,
    -0.027598489075899124,
    -0.02044600062072277,
    -0.013770345598459244,
    -0.00640834029763937,
    -0.025272123515605927,
    0.04042961820960045,
    -0.004183121956884861,
    -0.027367297559976578,
    -0.002969366265460849,
    0.046440597623586655,
    0.006245783530175686,
    -0.0018712064484134316,
    0.0007608549203723669,
    0.04008283093571663,
    0.03904246911406517,
    0.00928378477692604,
    0.0013582502724602818,
    -0.013387434184551239,
    -0.015822170302271843,
    -0.007293370086699724,
    -0.023292547091841698,
    -0.03332047909498215,
    -0.003955542575567961,
    0.025850102305412292,
    0.009023694321513176,
    -0.010598686523735523,
    -0.021775351837277412,
    0.004081975668668747,
    -0.02099508047103882,
    -0.030459484085440636,
    -0.005866485182195902,
    0.031499847769737244,
    0.016978127881884575,
    0.0006001045694574714,
    -0.006989931222051382,
    0.015345337800681591,
    0.00041045527905225754,
    0.03886907547712326,
    -0.03219342231750488,
    0.011783543042838573,
    0.02138521708548069,
    0.021862048655748367,
    0.007846063002943993,
    -0.013864266686141491,
    -0.016082260757684708,
    -0.0209661815315485,
    -0.0022342493757605553,
    0.018018489703536034,
    0.009681145660579205,
    0.010649260133504868,
    0.017845096066594124,
    0.02257007360458374,
    -0.018582019954919815,
    0.0015713799512013793,
    -0.010078505612909794,
    -0.005472736898809671,
    -0.010345821268856525,
    -0.028552154079079628,
    -0.015663227066397667,
    0.0034732914064079523,
    0.02264232002198696,
    -0.003695452120155096,
    -0.0020102825947105885,
    -0.002763461321592331,
    -0.004533521365374327,
    -0.007911085151135921,
    -0.0011324773076921701,
    -0.03407185152173042,
    -0.007687118370085955,
    0.006661206018179655,
    0.033175986260175705,
    -0.009160964749753475,
    -0.009738943539559841,
    0.056757520884275436,
    0.017151521518826485,
    -0.003429942997172475,
    -0.02730949968099594,
    0.029737010598182678,
    -0.025329921394586563,
    -0.009016470052301884,
    0.003850783919915557,
    -0.01835082843899727,
    -0.009081492200493813,
    0.008308446034789085,
    0.04956168308854103,
    -0.011422306299209595,
    0.018235232681035995,
    -0.018018489703536034,
    -0.026211339980363846,
    -0.05112222582101822,
    -0.012043633498251438,
    0.012838354334235191,
    -0.00150184181984514,
    0.006249396130442619,
    0.0033017040695995092,
    -0.004699690267443657,
    -0.01661689206957817,
    -0.005364365875720978,
    -0.025012033060193062,
    -0.03019939363002777,
    0.02051824890077114,
    0.009637797251343727,
    -0.009023694321513176,
    -0.03670165687799454,
    0.015764372423291206,
    -0.001490101683884859,
    -0.021919846534729004,
    0.008041130378842354,
    0.17709271609783173,
    0.010837103240191936,
    -0.009688369929790497,
    0.009673920460045338,
    0.005978468339890242,
    -0.004728589206933975,
    -0.014586740173399448,
    0.008655233308672905,
    -0.016327902674674988,
    0.025098729878664017,
    0.00708746537566185,
    -0.005230708513408899,
    -0.004121711477637291,
    0.007047729101032019,
    0.02696271240711212,
    0.005053702276200056,
    -0.019477887079119682,
    -0.03395625576376915,
    -0.03271360322833061,
    -0.003018133109435439,
    -0.003039807314053178,
    -0.0036936458200216293,
    -0.03779981657862663,
    -0.0372796356678009,
    0.01881321147084236,
    0.005339079536497593,
    0.008871975354850292,
    -0.013177917338907719,
    0.010475866496562958,
    -0.014463920146226883,
    -0.011472879908978939,
    0.0052343206480145454,
    -0.008380693383514881,
    0.0016129221767187119,
    -0.01839417591691017,
    -0.017252668738365173,
    0.00379659840837121,
    -0.015504281967878342,
    0.026456980034708977,
    -0.012231476604938507,
    0.009211537428200245,
    -0.03517001122236252,
    -0.03820440173149109,
    -0.020460451021790504,
    -0.007138038519769907,
    -0.013734221458435059,
    0.002931436290964484,
    0.011306710541248322,
    -0.02953471802175045,
    0.010056831873953342,
    -0.02810421958565712,
    -0.03569019213318825,
    0.02709275670349598,
    0.009796741418540478,
    -0.01810518652200699,
    -0.011270587332546711,
    0.018972154706716537,
    0.02141411602497101,
    -0.005111500155180693,
    0.019766876474022865,
    -0.015590978786349297,
    0.06115015968680382,
    -0.028364310041069984,
    0.010381944477558136,
    -0.054936885833740234,
    0.020041415467858315,
    -0.01775839924812317,
    0.009970135055482388,
    0.005317405331879854,
    0.01908775046467781,
    -0.006509486585855484,
    -0.02054714784026146,
    0.004356515593826771,
    -0.026774868369102478,
    -0.008149501867592335,
    -0.016168957576155663,
    0.03057507984340191,
    0.015388686209917068,
    0.01723821833729744,
    0.007307819556444883,
    -0.004688853397965431,
    -0.011198339983820915,
    -0.010288023389875889,
    0.021197373047471046,
    -0.0037062892224639654,
    -0.013885941356420517,
    0.013900390826165676,
    -0.018582019954919815,
    -0.0013600564561784267,
    -0.04719197005033493,
    -0.029332425445318222,
    -0.011342834681272507,
    0.025748956948518753,
    0.007268083747476339,
    -0.0026189666241407394,
    0.008163951337337494,
    -0.020604945719242096,
    0.04774105176329613,
    -0.00957999937236309,
    0.014138806611299515,
    -0.03332047909498215,
    0.03603697940707207,
    0.0021565835922956467,
    0.01213755551725626,
    -0.007817164063453674,
    0.012751657515764236,
    -0.01337298471480608,
    0.0034209121949970722,
    -0.02274346724152565,
    0.013950963504612446,
    -0.006361379288136959,
    -0.025546664372086525,
    -0.0008267806260846555,
    0.003912194166332483,
    0.018437525257468224,
    0.003168046474456787,
    -0.0063541545532643795,
    -0.02800307422876358,
    -0.0030235517770051956,
    0.0041795093566179276,
    -0.013423558324575424,
    -0.01797514222562313,
    0.0024853090289980173,
    -0.013943739235401154,
    -0.008481839671730995,
    -0.019694628193974495,
    -0.035921383649110794,
    -0.005375203210860491,
    0.0009798547253012657,
    -0.00019348744535818696,
    0.012946725822985172,
    -0.02560446225106716,
    0.04901260510087013,
    -0.002933242591097951,
    -0.016313452273607254,
    -0.02852325513958931,
    -0.027150554582476616,
    0.008958672173321247,
    0.02309025451540947,
    0.019492335617542267,
    -0.019246695563197136,
    0.010613135993480682,
    -0.00010583108087303117,
    -0.0033631143160164356,
    0.010114629752933979,
    0.00419757142663002,
    -0.003406462725251913,
    -0.009897887706756592,
    7.089271821314469e-05,
    -0.01353192888200283,
    -0.041527777910232544,
    -0.007109139580279589,
    -0.005176522769033909,
    0.0038760704919695854,
    0.007380066905170679,
    -0.03621037304401398,
    -0.002100591780617833,
    -0.023971671238541603,
    0.0185964684933424,
    -0.0025485253427177668,
    -0.028812244534492493,
    0.020677192136645317,
    -0.013134568929672241,
    0.03222231939435005,
    -0.03167324140667915,
    -0.03548790141940117,
    -0.18102297186851501,
    0.0074342526495456696,
    0.0038869075942784548,
    -0.01943453773856163,
    0.038464490324258804,
    0.010367495007812977,
    0.02790192700922489,
    0.017715051770210266,
    0.009616122581064701,
    -0.004212020896375179,
    -0.0002869574527721852,
    0.004692465532571077,
    -0.017512759193778038,
    0.003224038053303957,
    -0.014955202117562294,
    -0.020070314407348633,
    0.02030150592327118,
    0.014984101057052612,
    0.037597522139549255,
    0.03242461383342743,
    0.02904343605041504,
    -0.01647239737212658,
    0.024824190884828568,
    -0.0005070861079730093,
    0.006776801776140928,
    -0.00861910916864872,
    -0.004049464128911495,
    0.0007640157709829509,
    0.010909350588917732,
    -0.010692608542740345,
    -0.010425292886793613,
    0.011530677787959576,
    -0.009883438237011433,
    -0.012021959759294987,
    -0.008684132248163223,
    0.03002599999308586,
    0.016587993130087852,
    -0.005656967870891094,
    -0.013438007794320583,
    0.012043633498251438,
    0.03814660385251045,
    0.01992581970989704,
    0.026066845282912254,
    -0.02382717654109001,
    -0.0009726299904286861,
    0.003865233389660716,
    0.013083995319902897,
    -0.03407185152173042,
    0.012267600744962692,
    -0.0057870130985975266,
    0.054214414209127426,
    -0.047625456005334854,
    0.01758500561118126,
    0.008120602928102016,
    0.0033522772137075663,
    -0.006809312850236893,
    0.0021782577969133854,
    0.0029097620863467455,
    0.02271456830203533,
    0.006097676698118448,
    -0.004746651276946068,
    -0.026630373671650887,
    0.003189720679074526,
    0.01382814347743988,
    -0.005552208982408047,
    -0.012686635367572308,
    -0.024838639423251152,
    0.04736536368727684,
    -0.0006971869734115899,
    -0.0023498451337218285,
    0.010844327509403229,
    0.006383053492754698,
    0.014297750778496265,
    0.012477117590606213,
    -0.004255369305610657,
    0.015258640982210636,
    -0.0007879476761445403,
    0.017339365556836128,
    0.02111067622900009,
    -0.008106153458356857,
    -0.026977160945534706,
    0.04826123267412186,
    0.014774583280086517,
    -0.003308928804472089,
    0.019058851525187492,
    -0.015244191512465477,
    0.013279063627123833,
    0.012462668120861053,
    -0.027555139735341072,
    -0.027742983773350716,
    0.017122622579336166,
    0.0009861764265224338,
    -0.007448702119290829,
    -0.02242557890713215,
    0.026485878974199295,
    0.017151521518826485,
    -0.00788941141217947,
    0.004782774951308966,
    0.01587996818125248,
    -0.030083797872066498,
    -0.005024803336709738,
    0.003406462725251913,
    -0.029419122263789177,
    0.014435021206736565,
    0.02590790018439293,
    0.02037375420331955,
    -0.04120989143848419,
    0.0024961461313068867,
    0.024477403610944748,
    0.0063649918884038925,
    -0.01953568495810032,
    0.006090451963245869,
    0.01852422207593918,
    0.01842307485640049,
    -0.014543391764163971,
    0.04155667871236801,
    -0.0046166060492396355,
    -0.006964644882827997,
    -0.009695595130324364,
    -0.010692608542740345,
    0.01824968121945858,
    0.013134568929672241,
    -0.03074847348034382,
    0.02654367685317993,
    -0.016934780403971672,
    -0.04308832064270973,
    -0.13559383153915405,
    -0.04938828945159912,
    -0.001384439878165722,
    -0.008828626945614815,
    -0.004533521365374327,
    -0.00907426793128252,
    -0.01348135620355606,
    -0.012029184028506279,
    -0.008438491262495518,
    0.01502744946628809,
    -0.01010018028318882,
    0.003489547176286578,
    -0.021052878350019455,
    0.0121231060475111,
    -0.004233695100992918,
    0.013416333124041557,
    -0.05583275482058525,
    0.019723527133464813,
    -0.01595221646130085,
    0.01970907859504223,
    0.0037351881619542837,
    -0.009738943539559841,
    0.000974436174146831,
    0.025792304426431656,
    -0.021052878350019455,
    0.01062036119401455,
    -0.03615257516503334,
    0.016732487827539444,
    0.021428564563393593,
    0.01473123487085104,
    0.019492335617542267,
    -0.00844571553170681,
    0.017180420458316803,
    -0.018408626317977905,
    0.004154223017394543,
    -0.0027183066122233868,
    -0.03297369182109833,
    -0.02284461259841919,
    0.0026514779310673475,
    -0.024260660633444786,
    0.018784312531352043,
    0.00964502152055502,
    0.0017827034462243319,
    0.004678016062825918,
    -0.0049055954441428185,
    0.014146031811833382,
    -0.013091220520436764,
    0.04378189519047737,
    -0.006672042887657881,
    -0.005880934651941061,
    -0.023278096690773964,
    -0.009782291948795319,
    0.011971386149525642,
    -0.005588332656770945,
    0.0348232239484787,
    -0.007997781969606876,
    -0.0017194870160892606,
    0.009832864627242088,
    -0.003868845757097006,
    -0.013286287896335125,
    0.006816537585109472,
    0.0076220957562327385,
    -0.0023353956639766693,
    0.006560059729963541,
    -0.005541372112929821,
    0.020561596378684044,
    -0.016457946971058846,
    0.010822653770446777,
    0.03910026699304581,
    -0.008936997503042221,
    -0.03412964940071106,
    0.04401308670639992,
    -0.02845100685954094,
    0.015822170302271843,
    -0.009912337176501751,
    0.004930881783366203,
    -0.011660723015666008,
    0.0071813869290053844,
    0.004880308639258146,
    0.001798959099687636,
    -0.02441960573196411,
    0.011834116652607918,
    -0.015114146284759045,
    -0.009493302553892136,
    0.006812925450503826,
    0.004533521365374327,
    0.04409978538751602,
    0.0084095923230052,
    0.021818701177835464,
    -0.061034563928842545,
    -0.0007324075559154153,
    0.013950963504612446,
    0.04577592387795448,
    0.0023028843570500612,
    0.005996530409902334,
    -0.00011040298704756424,
    -0.0021023980807513,
    0.003308928804472089,
    -0.04077640548348427,
    -0.01422550342977047,
    -0.04314611852169037,
    -0.017859546467661858,
    -0.06635197252035141,
    0.005516085308045149,
    -0.0055341473780572414,
    -0.007744916249066591,
    0.012506016530096531,
    -0.03479432687163353,
    0.017050376161932945,
    -0.013264614157378674,
    0.005469124764204025,
    -0.016804734244942665,
    -0.013676423579454422,
    -0.010179651901125908,
    -0.008012231439352036,
    0.007304207421839237,
    0.010056831873953342,
    -0.01236152183264494,
    0.03464983031153679,
    -0.019131099805235863,
    0.05690201371908188,
    0.012419319711625576,
    -0.01748386025428772,
    -0.0032709988299757242,
    0.03938925638794899,
    -0.015966664999723434,
    -0.032858096063137054,
    -0.0008859331719577312,
    -0.021197373047471046,
    0.015562079846858978,
    -0.0048080612905323505,
    -0.05230708420276642,
    0.0074342526495456696,
    0.001865787897258997,
    -0.013047872111201286,
    0.003709901589900255,
    0.028855592012405396,
    0.010757630690932274,
    0.013250164687633514,
    0.01213755551725626,
    0.030286090448498726,
    -0.006498649250715971,
    -0.03141314908862114,
    -0.04857911914587021,
    0.02103842981159687,
    -0.008626334369182587,
    -0.002797778695821762,
    -0.00640111556276679,
    0.006903234403580427,
    0.027049409225583076,
    -0.008684132248163223,
    0.002897118916735053,
    0.0514112152159214,
    0.016530195251107216,
    -0.00674790283665061,
    -0.029549166560173035,
    0.00419757142663002,
    -0.02713610604405403,
    0.01161737460643053,
    -0.022035442292690277,
    -0.02350928820669651,
    0.0035708253271877766,
    0.036903947591781616,
    0.008763603866100311,
    -0.011133316904306412,
    0.016111159697175026,
    0.01679028570652008,
    -0.02953471802175045,
    -0.03311818838119507,
    -0.02493978664278984,
    0.0013311575166881084,
    0.017426062375307083,
    -0.010837103240191936,
    -0.019145548343658447,
    0.011516228318214417,
    0.01518639363348484,
    0.03849339112639427,
    0.00844571553170681,
    -0.00606155302375555,
    -0.005700316280126572,
    -0.020388202741742134,
    0.03910026699304581,
    0.02340814284980297,
    -0.006635919213294983,
    -0.019058851525187492,
    0.01723821833729744,
    0.04554473236203194,
    -0.018264131620526314,
    -0.023480389267206192,
    0.004753876011818647,
    -0.004172284621745348,
    0.031095260754227638,
    -0.016501296311616898,
    -0.0029567228630185127,
    -0.02548886649310589,
    0.027771882712841034,
    0.014622864313423634,
    -0.008055579848587513,
    -0.02632693573832512,
    -0.001168600982055068,
    0.037770915776491165,
    0.030950766056776047,
    -0.007275308482348919,
    -0.008850300684571266,
    -0.005848423112183809,
    -0.028364310041069984,
    -0.0026370284613221884,
    0.0072825332172214985,
    0.006989931222051382,
    -0.02479529194533825,
    0.014940752647817135,
    0.030459484085440636,
    -0.017989590764045715,
    -0.0280319731682539,
    -0.011863015592098236,
    0.015475383028388023,
    -0.030632877722382545,
    0.025936799123883247,
    -0.0014359161723405123,
    -0.004959780722856522,
    0.004331228788942099,
    0.003814660245552659,
    0.031297553330659866,
    -0.008640783838927746,
    0.02876889519393444,
    -0.01992581970989704,
    -0.0037207386922091246,
    0.02235333062708378,
    0.03788651153445244,
    -0.035054415464401245,
    -0.024043919518589973,
    -0.0121231060475111,
    -0.024737494066357613,
    0.011364508420228958,
    -0.025344371795654297,
    -0.019001053646206856,
    -0.01518639363348484,
    0.024332908913493156,
    0.007867736741900444,
    0.012086981907486916,
    -0.014955202117562294,
    0.09085827320814133,
    0.01644349843263626,
    -0.00736561743542552,
    0.00583397364243865,
    -0.012267600744962692,
    -0.0020969794131815434,
    -0.007463151589035988,
    -0.0019958331249654293,
    0.005122337490320206,
    -0.025618910789489746,
    0.012527691200375557,
    -0.002470859559252858,
    -0.016761386767029762,
    -0.0018802373670041561,
    0.005537759512662888,
    0.015735473483800888,
    -0.021197373047471046,
    0.025170978158712387,
    -0.0168191846460104,
    0.021500812843441963,
    0.039475955069065094,
    0.007614871021360159,
    0.01485405582934618,
    -0.002680376870557666,
    -0.019896920770406723,
    0.021587509661912918,
    0.032858096063137054,
    0.01637125015258789,
    0.005353529006242752,
    -0.04889700934290886,
    0.005144011694937944,
    0.008525188080966473,
    -0.01145843043923378,
    -0.004042239394038916,
    -0.027453994378447533,
    0.001286002923734486,
    -0.023740479722619057,
    0.0038038231432437897,
    0.018365276977419853,
    0.025821203365921974,
    -0.01970907859504223,
    0.00022374102263711393,
    -0.03294479474425316,
    -0.03074847348034382,
    -0.0006895106635056436,
    0.005823136772960424,
    -0.0012381389969959855,
    -0.022309983149170876,
    -0.06461803615093231
  ]
}
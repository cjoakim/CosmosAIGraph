{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "![swarming banner icon](images/swarmslogobanner.png)\n\n<div align=\"center\">\n\nswarms is a modular framework that enables reliable and useful multi-agent collaboration at scale to automate real-world tasks.\n\n\n[![github issues](https://img.shields.io/github/issues/kyegomez/swarms)](https://github.com/kyegomez/swarms/issues) [![github forks](https://img.shields.io/github/forks/kyegomez/swarms)](https://github.com/kyegomez/swarms/network) [![github stars](https://img.shields.io/github/stars/kyegomez/swarms)](https://github.com/kyegomez/swarms/stargazers) [![github license](https://img.shields.io/github/license/kyegomez/swarms)](https://github.com/kyegomez/swarms/blob/main/license)[![github star chart](https://img.shields.io/github/stars/kyegomez/swarms?style=social)](https://star-history.com/#kyegomez/swarms)[![dependency status](https://img.shields.io/librariesio/github/kyegomez/swarms)](https://libraries.io/github/kyegomez/swarms) [![downloads](https://static.pepy.tech/badge/swarms/month)](https://pepy.tech/project/swarms)\n\n[![join the agora discord](https://img.shields.io/discord/1110910277110743103?label=discord&logo=discord&logocolor=white&style=plastic&color=d7b023)![share on twitter](https://img.shields.io/twitter/url/https/twitter.com/cloudposse.svg?style=social&label=share%20%40kyegomez/swarms)](https://twitter.com/intent/tweet?text=check%20out%20this%20amazing%20ai%20project:%20&url=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms) [![share on facebook](https://img.shields.io/badge/share-%20facebook-blue)](https://www.facebook.com/sharer/sharer.php?u=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms) [![share on linkedin](https://img.shields.io/badge/share-%20linkedin-blue)](https://www.linkedin.com/sharearticle?mini=true&url=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms&title=&summary=&source=)\n\n[![share on reddit](https://img.shields.io/badge/-share%20on%20reddit-orange)](https://www.reddit.com/submit?url=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms&title=swarms%20-%20the%20future%20of%20ai) [![share on hacker news](https://img.shields.io/badge/-share%20on%20hacker%20news-orange)](https://news.ycombinator.com/submitlink?u=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms&t=swarms%20-%20the%20future%20of%20ai) [![share on pinterest](https://img.shields.io/badge/-share%20on%20pinterest-red)](https://pinterest.com/pin/create/button/?url=https%3a%2f%2fgithub.com%2fkyegomez%2fswarms&media=https%3a%2f%2fexample.com%2fimage.jpg&description=swarms%20-%20the%20future%20of%20ai) [![share on whatsapp](https://img.shields.io/badge/-share%20on%20whatsapp-green)](https://api.whatsapp.com/send?text=check%20out%20swarms%20-%20the%20future%20of%20ai%20%23swarms%20%23ai%0a%0ahttps%3a%2f%2fgithub.com%2fkyegomez%2fswarms)\n\n</div>\n\n\n----\n\n## installation\n`pip3 install --upgrade swarms`\n\n---\n\n## usage\n\nrun example in collab: <a target=\"_blank\" href=\"https://colab.research.google.com/github/kyegomez/swarms/blob/master/playground/swarms_example.ipynb\">\n<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"open in colab\"/>\n</a>\n\n### `agent` example\n- reliable structure that provides llms autonomy\n- extremely customizeable with stopping conditions, interactivity, dynamical temperature, loop intervals, and so much more\n- enterprise grade + production grade: `agent` is designed and optimized for automating real-world tasks at scale!\n\n```python\nimport os\n\nfrom dotenv import load_dotenv\n\n# import the openaichat model and the agent struct\nfrom swarms.models import openaichat\nfrom swarms.structs import agent\n\n# load the environment variables\nload_dotenv()\n\n# get the api key from the environment\napi_key = os.environ.get(\"openai_api_key\")\n\n# initialize the language model\nllm = openaichat(\n    temperature=0.5,\n    model_name=\"gpt-4\",\n    openai_api_key=api_key,\n    max_tokens=4000\n)\n\n\n## initialize the workflow\nagent = agent(llm=llm, max_loops=1, autosave=true, dashboard=true)\n\n# run the workflow on a task\nagent.run(\"generate a 10,000 word blog on health and wellness.\")\n\n\n\n```\n\n------\n\n### `sequentialworkflow`\n- a sequential swarm of autonomous agents where each agent's outputs are fed into the next agent\n- save and restore workflow states!\n- integrate agent's with various llms and multi-modality models\n\n```python\nimport os \nfrom swarms.models import openaichat\nfrom swarms.structs import agent\nfrom swarms.structs.sequential_workflow import sequentialworkflow\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# load the environment variables\napi_key = os.getenv(\"openai_api_key\")\n\n\n# initialize the language agent\nllm = openaichat(\n    temperature=0.5,\n    model_name=\"gpt-4\",\n    openai_api_key=api_key,\n    max_tokens=4000\n)\n\n\n# initialize the agent with the language agent\nagent1 = agent(llm=llm, max_loops=1)\n\n# create another agent for a different task\nagent2 = agent(llm=llm, max_loops=1)\n\n# create another agent for a different task\nagent3 = agent(llm=llm, max_loops=1)\n\n# create the workflow\nworkflow = sequentialworkflow(max_loops=1)\n\n# add tasks to the workflow\nworkflow.add(\n    agent1, \"generate a 10,000 word blog on health and wellness.\", \n)\n\n# suppose the next task takes the output of the first task as input\nworkflow.add(\n    agent2, \"summarize the generated blog\",\n)\n\n# run the workflow\nworkflow.run()\n\n# output the results\nfor task in workflow.tasks:\n    print(f\"task: {task.description}, result: {task.result}\")\n\n\n```\n\n## `multi modal autonomous agents`\n- run the agent with multiple modalities useful for various real-world tasks in manufacturing, logistics, and health.\n\n```python\n# description: this is an example of how to use the agent class to run a multi-modal workflow\nimport os\nfrom dotenv import load_dotenv\nfrom swarms.models.gpt4_vision_api import gpt4visionapi\nfrom swarms.structs import agent\n\n# load the environment variables\nload_dotenv()\n\n# get the api key from the environment\napi_key = os.environ.get(\"openai_api_key\")\n\n# initialize the language model\nllm = gpt4visionapi(\n    openai_api_key=api_key,\n    max_tokens=500,\n)\n\n# initialize the task\ntask = (\n    \"analyze this image of an assembly line and identify any issues such as\"\n    \" misaligned parts, defects, or deviations from the standard assembly\"\n    \" process. if there is anything unsafe in the image, explain why it is\"\n    \" unsafe and how it could be improved.\"\n)\nimg = \"assembly_line.jpg\"\n\n## initialize the workflow\nagent = agent(\n    llm=llm,\n    max_loops=\"auto\",\n    autosave=true,\n    dashboard=true,\n    multi_modal=true\n)\n\n# run the workflow on a task\nagent.run(task=task, img=img)\n\n\n```\n\n\n### `omnimodalagent`\n- an agent that can understand any modality and conditionally generate any modality.\n\n```python\nfrom swarms.agents.omni_modal_agent import omnimodalagent, openaichat\nfrom swarms.models import openaichat\nfrom dotenv import load_dotenv\nimport os\n\n# load the environment variables\nload_dotenv()\n\n# get the api key from the environment\napi_key = os.environ.get(\"openai_api_key\")\n\n# initialize the language model\nllm = openaichat(\n    temperature=0.5,\n    model_name=\"gpt-4\",\n    openai_api_key=api_key,\n)\n\n\nagent = omnimodalagent(llm)\nagent.run(\"generate a video of a swarm of fish and then make an image out of the video\")\n```\n\n---\n\n### multi-agent swarm for logistics\n- swarms is a framework designed for real-world deployment here is a demo presenting a fully ready to use swarm for a vast array of logistics tasks.\n- swarms is designed to be modular and reliable for real-world deployments.\n- swarms is the first framework that unleases multi-modal autonomous agents in the real world.\n\n```python\nfrom swarms.structs import agent\nimport os\nfrom dotenv import load_dotenv\nfrom swarms.models import gpt4visionapi\nfrom swarms.prompts.logistics import (\n    health_security_agent_prompt,\n    quality_control_agent_prompt,\n    productivity_agent_prompt,\n    safety_agent_prompt,\n    security_agent_prompt,\n    sustainability_agent_prompt,\n    efficiency_agent_prompt,\n)\n\n# load env\nload_dotenv()\napi_key = os.getenv(\"openai_api_key\")\n\n# gpt4visionapi \nllm = gpt4visionapi(openai_api_key=api_key)\n\n# image for analysis\nfactory_image = \"factory_image1.jpg\"\n\n# initialize agents with respective prompts\nhealth_security_agent = agent(\n    llm=llm,\n    sop=health_security_agent_prompt,\n    max_loops=1,\n    multi_modal=true,\n)\n\n# quality control agent\nquality_control_agent = agent(\n    llm=llm,\n    sop=quality_control_agent_prompt,\n    max_loops=1,\n    multi_modal=true,\n)\n\n\n# productivity agent\nproductivity_agent = agent(\n    llm=llm,\n    sop=productivity_agent_prompt,\n    max_loops=1,\n    multi_modal=true,\n)\n\n# initiailize safety agent\nsafety_agent = agent(\n    llm=llm, sop=safety_agent_prompt, max_loops=1, multi_modal=true\n)\n\n# init the security agent\nsecurity_agent = agent(\n    llm=llm, sop=security_agent_prompt, max_loops=1, multi_modal=true\n)\n\n\n# initialize sustainability agent\nsustainability_agent = agent(\n    llm=llm,\n    sop=sustainability_agent_prompt,\n    max_loops=1,\n    multi_modal=true,\n)\n\n\n# initialize efficincy agent\nefficiency_agent = agent(\n    llm=llm,\n    sop=efficiency_agent_prompt,\n    max_loops=1,\n    multi_modal=true,\n)\n\n# run agents with respective tasks on the same image\nhealth_analysis = health_security_agent.run(\n    \"analyze the safety of this factory\", factory_image\n)\nquality_analysis = quality_control_agent.run(\n    \"examine product quality in the factory\", factory_image\n)\nproductivity_analysis = productivity_agent.run(\n    \"evaluate factory productivity\", factory_image\n)\nsafety_analysis = safety_agent.run(\n    \"inspect the factory's adherence to safety standards\",\n    factory_image,\n)\nsecurity_analysis = security_agent.run(\n    \"assess the factory's security measures and systems\",\n    factory_image,\n)\nsustainability_analysis = sustainability_agent.run(\n    \"examine the factory's sustainability practices\", factory_image\n)\nefficiency_analysis = efficiency_agent.run(\n    \"analyze the efficiency of the factory's manufacturing process\",\n    factory_image,\n)\n```\n---\n\n# features \ud83e\udd16 \nthe swarms framework is designed with a strong emphasis on reliability, performance, and production-grade readiness. \nbelow are the key features that make swarms an ideal choice for enterprise-level ai deployments.\n\n## \ud83d\ude80 production-grade readiness\n- **scalable architecture**: built to scale effortlessly with your growing business needs.\n- **enterprise-level security**: incorporates top-notch security features to safeguard your data and operations.\n- **containerization and microservices**: easily deployable in containerized environments, supporting microservices architecture.\n\n## \u2699\ufe0f reliability and robustness\n- **fault tolerance**: designed to handle failures gracefully, ensuring uninterrupted operations.\n- **consistent performance**: maintains high performance even under heavy loads or complex computational demands.\n- **automated backup and recovery**: features automatic backup and recovery processes, reducing the risk of data loss.\n\n## \ud83d\udca1 advanced ai capabilities\n\nthe swarms framework is equipped with a suite of advanced ai capabilities designed to cater to a wide range of applications and scenarios, ensuring versatility and cutting-edge performance.\n\n### multi-modal autonomous agents\n- **versatile model support**: seamlessly works with various ai models, including nlp, computer vision, and more, for comprehensive multi-modal capabilities.\n- **context-aware processing**: employs context-aware processing techniques to ensure relevant and accurate responses from agents.\n\n### function calling models for api execution\n- **automated api interactions**: function calling models that can autonomously execute api calls, enabling seamless integration with external services and data sources.\n- **dynamic response handling**: capable of processing and adapting to responses from apis for real-time decision making.\n\n### varied architectures of swarms\n- **flexible configuration**: supports multiple swarm architectures, from centralized to decentralized, for diverse application needs.\n- **customizable agent roles**: allows customization of agent roles and behaviors within the swarm to optimize performance and efficiency.\n\n### generative models\n- **advanced generative capabilities**: incorporates state-of-the-art generative models to create content, simulate scenarios, or predict outcomes.\n- **creative problem solving**: utilizes generative ai for innovative problem-solving approaches and idea generation.\n\n### enhanced decision-making\n- **ai-powered decision algorithms**: employs advanced algorithms for swift and effective decision-making in complex scenarios.\n- **risk assessment and management**: capable of assessing risks and managing uncertain situations with ai-driven insights.\n\n### real-time adaptation and learning\n- **continuous learning**: agents can continuously learn and adapt from new data, improving their performance and accuracy over time.\n- **environment adaptability**: designed to adapt to different operational environments, enhancing robustness and reliability.\n\n\n## \ud83d\udd04 efficient workflow automation\n- **streamlined task management**: simplifies complex tasks with automated workflows, reducing manual intervention.\n- **customizable workflows**: offers customizable workflow options to fit specific business needs and requirements.\n- **real-time analytics and reporting**: provides real-time insights into agent performance and system health.\n\n## \ud83c\udf10 wide-ranging integration\n- **api-first design**: easily integrates with existing systems and third-party applications via robust apis.\n- **cloud compatibility**: fully compatible with major cloud platforms for flexible deployment options.\n- **continuous integration/continuous deployment (ci/cd)**: supports ci/cd practices for seamless updates and deployment.\n\n## \ud83d\udcca performance optimization\n- **resource management**: efficiently manages computational resources for optimal performance.\n- **load balancing**: automatically balances workloads to maintain system stability and responsiveness.\n- **performance monitoring tools**: includes comprehensive monitoring tools for tracking and optimizing performance.\n\n## \ud83d\udee1\ufe0f security and compliance\n- **data encryption**: implements end-to-end encryption for data at rest and in transit.\n- **compliance standards adherence**: adheres to major compliance standards ensuring legal and ethical usage.\n- **regular security updates**: regular updates to address emerging security threats and vulnerabilities.\n\n## \ud83d\udcac community and support\n- **extensive documentation**: detailed documentation for easy implementation and troubleshooting.\n- **active developer community**: a vibrant community for sharing ideas, solutions, and best practices.\n- **professional support**: access to professional support for enterprise-level assistance and guidance.\n\nswarms framework is not just a tool but a robust, scalable, and secure partner in your ai journey, ready to tackle the challenges of modern ai applications in a business environment.\n\n\n## documentation\n- for documentation, go here, [swarms.apac.ai](https://swarms.apac.ai)\n\n\n## \ud83e\udef6 contributions:\n\nswarms is an open-source project, and contributions are welcome. if you want to contribute, you can create new features, fix bugs, or improve the infrastructure. please refer to the [contributing.md](https://github.com/kyegomez/swarms/blob/master/contributing.md) and our [contributing board](https://github.com/users/kyegomez/projects/1) file in the repository for more information on how to contribute.\n\nto see how to contribute, visit [contribution guidelines](https://github.com/kyegomez/swarms/blob/master/contributing.md)\n\n<a href=\"https://github.com/kyegomez/swarms/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=kyegomez/swarms\" />\n</a>\n\n\n## community\n- [join the swarms community on discord!](https://discord.gg/ajazbmhknr)\n- join our swarms community gathering every thursday at 1pm nyc time to unlock the potential of autonomous agents in automating your daily tasks [sign up here](https://lu.ma/5p2jnc2v)\n\n\n\n## discovery call\nbook a discovery call with the swarms team to learn how to optimize and scale your swarm! [click here to book a time that works for you!](https://calendly.com/swarm-corp/30min?month=2023-11)\n\n# license\napache license\n",
  "docs_url": null,
  "keywords": "artificial intelligence,deep learning,optimizers,prompt engineering",
  "license": "mit",
  "name": "swarms",
  "package_url": "https://pypi.org/project/swarms/",
  "project_url": "https://pypi.org/project/swarms/",
  "project_urls": {
    "Documentation": "https://swarms.apac.ai",
    "Homepage": "https://github.com/kyegomez/swarms",
    "Repository": "https://github.com/kyegomez/swarms"
  },
  "release_url": "https://pypi.org/project/swarms/2.9.9/",
  "requires_dist": [
    "torch (==2.1.1)",
    "transformers (==4.35.0)",
    "openai (==0.28.0)",
    "langchain (==0.0.333)",
    "asyncio (==3.4.3)",
    "einops (==0.7.0)",
    "google-generativeai (==0.3.1)",
    "langchain-experimental (==0.0.10)",
    "playwright (==1.34.0)",
    "weaviate-client (==3.25.3)",
    "opencv-python-headless (==4.8.1.78)",
    "faiss-cpu (==1.7.4)",
    "backoff (==2.2.1)",
    "marshmallow (==3.19.0)",
    "datasets (==2.10.1)",
    "optimum (==1.15.0)",
    "diffusers (==0.17.1)",
    "PyPDF2 (==3.0.1)",
    "accelerate (==0.22.0)",
    "sentencepiece (==0.1.98)",
    "wget (==3.2)",
    "tensorflow (==2.14.0)",
    "httpx (==0.24.1)",
    "tiktoken (==0.4.0)",
    "safetensors (==0.3.3)",
    "attrs (==22.2.0)",
    "ggl (==1.1.0)",
    "ratelimit (==2.2.1)",
    "beautifulsoup4 (==4.11.2)",
    "cohere (==4.24)",
    "huggingface-hub (==0.16.4)",
    "pydantic (==1.10.12)",
    "tenacity (==8.2.2)",
    "Pillow (==9.4.0)",
    "chromadb (==0.4.14)",
    "tabulate (==0.9.0)",
    "termcolor (==2.2.0)",
    "black (==23.3.0)",
    "open_clip_torch (==2.20.0)",
    "soundfile (==0.12.1)",
    "torchvision (==0.16.1)",
    "rich (==13.5.2)"
  ],
  "requires_python": ">=3.6.1,<4.0.0",
  "summary": "swarms - pytorch",
  "version": "2.9.9",
  "releases": [],
  "developers": [
    "kye@apac.ai",
    "kye_gomez"
  ],
  "kwds": "swarm swarmslogobanner swarming swarms swarms_example",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_swarms",
  "homepage": "https://github.com/kyegomez/swarms",
  "release_count": 223,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_asyncio",
    "pypi_attrs",
    "pypi_backoff",
    "pypi_beautifulsoup4",
    "pypi_black",
    "pypi_chromadb",
    "pypi_cohere",
    "pypi_datasets",
    "pypi_diffusers",
    "pypi_einops",
    "pypi_faiss_cpu",
    "pypi_ggl",
    "pypi_google_generativeai",
    "pypi_httpx",
    "pypi_huggingface_hub",
    "pypi_langchain",
    "pypi_langchain_experimental",
    "pypi_marshmallow",
    "pypi_open_clip_torch",
    "pypi_openai",
    "pypi_opencv_python_headless",
    "pypi_optimum",
    "pypi_pillow",
    "pypi_playwright",
    "pypi_pydantic",
    "pypi_pypdf2",
    "pypi_ratelimit",
    "pypi_rich",
    "pypi_safetensors",
    "pypi_sentencepiece",
    "pypi_soundfile",
    "pypi_tabulate",
    "pypi_tenacity",
    "pypi_tensorflow",
    "pypi_termcolor",
    "pypi_tiktoken",
    "pypi_torch",
    "pypi_torchvision",
    "pypi_transformers",
    "pypi_weaviate_client",
    "pypi_wget"
  ]
}
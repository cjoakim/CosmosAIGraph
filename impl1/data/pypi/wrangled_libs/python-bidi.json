{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: implementation :: pypy",
    "topic :: text processing"
  ],
  "description": "===============================\npython bidi\n===============================\n\n.. image:: https://badge.fury.io/py/python-bidi.png\n    :target: http://badge.fury.io/py/python-bidi\n\n.. image:: https://travis-ci.org/meirkriheli/python-bidi.png?branch=master\n        :target: https://travis-ci.org/meirkriheli/python-bidi\n\n`bi-directional`_ (bidi) layout implementation in pure python\n\n`package documentation`_\n\n.. _bi-directional: http://en.wikipedia.org/wiki/bi-directional_text\n.. _package documentation: http://python-bidi.readthedocs.org/en/latest/\n\napi\n----\n\nthe algorithm starts with a single entry point `bidi.algorithm.get_display`.\n\n**required arguments:**\n\n* ``unicode_or_str``: the original unicode or string (i.e.: storage). if it's a string\n  use the optional argument ``encoding`` to specify it's encoding.\n\n**optional arguments:**\n\n* ``encoding``: if unicode_or_str is a string, specifies the encoding. the\n  algorithm uses unicodedata_ which requires unicode. this encoding will be\n  used to decode and encode back to string before returning\n  (default: \"utf-8\").\n\n* ``upper_is_rtl``: true to treat upper case chars as strong 'r' for\n  debugging (default: false).\n\n* ``base_dir``:  'l' or 'r', override the calculated base_level.\n\n* ``debug``: true to display (using `sys.stderr`_) the steps taken with the\n  algorithm (default: false).\n\nreturns the display layout, either as unicode or ``encoding`` encoded string\n(depending on the type of ``unicode_or_str'``).\n\n.. _unicodedata: http://docs.python.org/library/unicodedata.html\n.. _sys.stderr: http://docs.python.org/library/sys.html?highlight=sys.stderr#sys.stderr\n\nexample::\n\n    >>> from bidi.algorithm import get_display\n    >>> get_display(u'car is the car in arabic', upper_is_rtl=true)\n    u'car is rac eht in arabic'\n\n\ncli\n----\n\n``pybidi`` is a command line utility (calling  ``bidi.main``) for running the\nbidi algorithm. the script can get a string as a parameter or read text from\n`stdin`. usage::\n\n    $ pybidi -h\n    usage: pybidi [options]\n\n    options:\n      -h, --help            show this help message and exit\n      -e encoding, --encoding=encoding\n                            text encoding (default: utf-8)\n      -u, --upper-is-rtl    treat upper case chars as strong 'r' for debugging\n                            (default: false).\n      -d, --debug           output to stderr steps taken with the algorithm\n      -b base_dir, --base-dir=base_dir\n                            override base direction [l|r]\n\n\nexamples::\n\n    $ pybidi -u 'car is the car in arabic'\n    car is rac eht in arabic\n\n    $ cat ~/documents/example.txt | pybidi\n    ...\n\ninstallation\n-------------\n\nsee ``docs/install.rst``\n\nrunning tests\n--------------\n\nto run the tests::\n\n    python setup.py test\n\nsome explicit tests are failing right now (see todo)\n\n\n\n\n\n0.4.2\n-----\n\n* type fixes, thanks jwilk\n\n\nhistory\n=========\n\n0.4.1\n-----\n\n* merged fix for mixed rtl and numbers, thanks just van rossum\n\n0.4.0\n-----\n\n* move to cookiecutter template\n* python 3 support (py2.6, 2.7, 3.3, 3.4 and pypy)\n* better docs\n* travis integration\n* tox tests\n* pep8 cleanup\n\n0.3.4\n------\n\n* remove extra newline in console script output\n\n0.3.3\n------\n\n* implement overriding base paragraph direction\n* allow overriding base direction in pybidi console script\n* fix returning display in same encoding\n\n0.3.2\n------\n\n* test for surrogate pairs\n* fix indentation in documentations\n* specify license in setup.py\n\n0.3.1\n-----\n\n* added missing description\n* docs/install.rst\n\n0.3\n---\n\n* apply bidi mirroring\n* move to back function based implementation\n\n0.2\n---\n\n* move the algorithm to a class based implementation\n\n0.1\n---\n\n* initial release\n\n\n",
  "docs_url": null,
  "keywords": "bidi unicode layout",
  "license": "http://www.gnu.org/licenses/lgpl.html",
  "name": "python-bidi",
  "package_url": "https://pypi.org/project/python-bidi/",
  "project_url": "https://pypi.org/project/python-bidi/",
  "project_urls": {
    "Homepage": "https://github.com/MeirKriheli/python-bidi"
  },
  "release_url": "https://pypi.org/project/python-bidi/0.4.2/",
  "requires_dist": [
    "six"
  ],
  "requires_python": "",
  "summary": "pure python implementation of the bidi layout algorithm",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "meir_kriheli",
    "mkriheli@gmail.com"
  ],
  "kwds": "bidi pybidi python directional_text algorithm",
  "license_kwds": "http://www.gnu.org/licenses/lgpl.html",
  "libtype": "pypi",
  "id": "pypi_python_bidi",
  "homepage": "https://github.com/meirkriheli/python-bidi",
  "release_count": 8,
  "dependency_ids": [
    "pypi_six"
  ]
}
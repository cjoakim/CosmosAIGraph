{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure container registry client library for python\n\nazure container registry allows you to store and manage container images and artifacts in a private registry for all types of container deployments.\n\nuse the client library for azure container registry to:\n\n- list images or artifacts in a registry\n- obtain metadata for images and artifacts, repositories and tags\n- set read/write/delete properties on registry items\n- delete images and artifacts, repositories and tags\n\n[source code][source]\n| [package (pypi)][package]\n| [package (conda)](https://anaconda.org/microsoft/azure-containerregistry/)\n| [api reference documentation][docs]\n| [rest api documentation][rest_docs]\n| [product documentation][product_docs]\n\n## _disclaimer_\n\n_azure sdk python packages support for python 2.7 has ended 01 january 2022. for more information and questions, please refer to https://github.com/azure/azure-sdk-for-python/issues/20691_\n_python 3.7 or later is required to use this package. for more details, please refer to [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy)._\n\n## getting started\n\n### install the package\n\ninstall the azure container registry client library for python with [pip][pip_link]:\n\n```bash\npip install --pre azure-containerregistry\n```\n\n### prerequisites\n\n* python 3.7 or later is required to use this package.\n* you need an [azure subscription][azure_sub] and a [container registry account][container_registry_docs] to use this package.\n\nto create a new container registry, you can use the [azure portal][container_registry_create_portal],\n[azure powershell][container_registry_create_ps], or the [azure cli][container_registry_create_cli].\nhere's an example using the azure cli:\n\n```powershell\naz acr create --name mycontainerregistry --resource-group myresourcegroup --location westus --sku basic\n```\n\n### authenticate the client\n\nthe [azure identity library][identity] provides easy azure active directory support for authentication. the `defaultazurecredential` assumes the `azure_client_id`, `azure_tenant_id`, and `azure_client_secret` environment variables are set, for more information refer to the [azure identity environment variables section](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#environment-variables)\n\n```python\n# create a containerregistryclient that will authenticate through active directory\nfrom azure.containerregistry import containerregistryclient\nfrom azure.identity import defaultazurecredential\n\nendpoint = \"https://mycontainerregistry.azurecr.io\"\naudience = \"https://management.azure.com\"\nclient = containerregistryclient(endpoint, defaultazurecredential(), audience=audience)\n```\n\n## key concepts\n\na **registry** stores docker images and [oci artifacts](https://opencontainers.org/).  an image or artifact consists of a **manifest** and **layers**.  an image's manifest describes the layers that make up the image, and is uniquely identified by its **digest**.  an image can also be \"tagged\" to give it a human-readable alias.  an image or artifact can have zero or more **tags** associated with it, and each tag uniquely identifies the image.  a collection of images that share the same name but have different tags, is referred to as a **repository**.\n\nfor more information please see [container registry concepts](https://docs.microsoft.com/azure/container-registry/container-registry-concepts).\n\n\n## examples\n\nthe following sections provide several code snippets covering some of the most common acr service tasks, including:\n\n- registry operations:\n  - [list repositories](#list-repositories)\n  - [list tags with anonymous access](#list-tags-with-anonymous-access)\n  - [set artifact properties](#set-artifact-properties)\n  - [delete images](#delete-images)\n- blob and manifest operations:\n  - [upload images](#upload-images)\n  - [download images](#download-images)\n  - [delete manifest](#delete-manifest)\n  - [delete blob](#delete-blob)\n\nplease note that each sample assumes there is a `containerregistry_endpoint` environment variable set to a string containing the `https://` prefix and the name of the login server, for example \"https://myregistry.azurecr.io\". anonymous access samples are getting endpoint value from environment variable`containerregistry_anonregistry_endpoint`.\n\n### list repositories\n\niterate through the collection of repositories in the registry.\n\n<!-- snippet:sample_delete_tags.list_repository_names -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    # iterate through all the repositories\n    for repository_name in client.list_repository_names():\n        print(repository_name)\n```\n\n<!-- end snippet -->\n\n### list tags with anonymous access\n\niterate through the collection of tags in the repository with anonymous access.\n\n<!-- snippet:sample_list_tags.list_tags_anonymous -->\n\n```python\nwith containerregistryclient(endpoint) as anon_client:\n    manifest = anon_client.get_manifest_properties(\"library/hello-world\", \"latest\")\n    print(f\"tags of {manifest.repository_name}: \")\n    # iterate through all the tags\n    for tag in manifest.tags:\n        print(tag)\n```\n\n<!-- end snippet -->\n\n### set artifact properties\n\nset properties of an artifact.\n\n<!-- snippet:sample_set_image_properties.update_manifest_properties -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    # set permissions on image \"library/hello-world:v1\"\n    client.update_manifest_properties(\n        \"library/hello-world\",\n        \"v1\",\n        can_write=false,\n        can_delete=false\n    )\n```\n\n<!-- end snippet -->\n\n### delete images\n\ndelete images older than the first three in the repository.\n\n<!-- snippet:sample_delete_images.delete_manifests -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    for repository in client.list_repository_names():\n        # keep the three most recent images, delete everything else\n        manifest_count = 0\n        for manifest in client.list_manifest_properties(\n            repository, order_by=artifactmanifestorder.last_updated_on_descending\n        ):\n            manifest_count += 1\n            if manifest_count > 3:\n                # make sure will have the permission to delete the manifest later\n                client.update_manifest_properties(\n                    repository,\n                    manifest.digest,\n                    can_write=true,\n                    can_delete=true\n                )\n                print(f\"deleting {repository}:{manifest.digest}\")\n                client.delete_manifest(repository, manifest.digest)\n```\n\n<!-- end snippet -->\n\n### upload images\n\nto upload a full image, we need to upload individual layers and configuration. after that we can upload a manifest which describes an image or artifact and assign it a tag.\n\n<!-- snippet:sample_set_get_image.upload_blob_and_manifest -->\n\n```python\nself.repository_name = \"sample-oci-image\"\nlayer = bytesio(b\"sample layer\")\nconfig = bytesio(json.dumps(\n    {\n        \"sample config\": \"content\",\n    }).encode())\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    # upload a layer\n    layer_digest, layer_size = client.upload_blob(self.repository_name, layer)\n    print(f\"uploaded layer: digest - {layer_digest}, size - {layer_size}\")\n    # upload a config\n    config_digest, config_size = client.upload_blob(self.repository_name, config)\n    print(f\"uploaded config: digest - {config_digest}, size - {config_size}\")\n    # create an oci image with config and layer info\n    oci_manifest = {\n        \"config\": {\n            \"mediatype\": \"application/vnd.oci.image.config.v1+json\",\n            \"digest\": config_digest,\n            \"sizeinbytes\": config_size,\n        },\n        \"schemaversion\": 2,\n        \"layers\": [\n            {\n                \"mediatype\": \"application/vnd.oci.image.layer.v1.tar\",\n                \"digest\": layer_digest,\n                \"size\": layer_size,\n                \"annotations\": {\n                    \"org.opencontainers.image.ref.name\": \"artifact.txt\",\n                },\n            },\n        ],\n    }\n    # set the image with tag \"latest\"\n    manifest_digest = client.set_manifest(self.repository_name, oci_manifest, tag=\"latest\")\n    print(f\"uploaded manifest: digest - {manifest_digest}\")\n```\n\n<!-- end snippet -->\n\n### download images\n\nto download a full image, we need to download its manifest and then download individual layers and configuration.\n\n<!-- snippet:sample_set_get_image.download_blob_and_manifest -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    # get the image\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    print(f\"got manifest:\\n{received_manifest}\")\n    \n    # download and write out the layers\n    for layer in received_manifest[\"layers\"]:\n        # remove the \"sha256:\" prefix from digest\n        layer_file_name = layer[\"digest\"].split(\":\")[1]\n        try:\n            stream = client.download_blob(self.repository_name, layer[\"digest\"])\n            with open(layer_file_name, \"wb\") as layer_file:\n                for chunk in stream:\n                    layer_file.write(chunk)\n        except digestvalidationerror:\n            print(f\"downloaded layer digest value did not match. deleting file {layer_file_name}.\")\n            os.remove(layer_file_name)\n        print(f\"got layer: {layer_file_name}\")\n    # download and write out the config\n    config_file_name = \"config.json\"\n    try:\n        stream = client.download_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n        with open(config_file_name, \"wb\") as config_file:\n            for chunk in stream:\n                config_file.write(chunk)\n    except digestvalidationerror:\n        print(f\"downloaded config digest value did not match. deleting file {config_file_name}.\")\n        os.remove(config_file_name)\n    print(f\"got config: {config_file_name}\")\n```\n\n<!-- end snippet -->\n\n### delete manifest\n\n<!-- snippet:sample_set_get_image.delete_manifest -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    # delete the image\n    client.delete_manifest(self.repository_name, get_manifest_result.digest)\n```\n\n<!-- end snippet -->\n\n### delete blob\n\n<!-- snippet:sample_set_get_image.delete_blob -->\n\n```python\nwith containerregistryclient(self.endpoint, self.credential) as client:\n    get_manifest_result = client.get_manifest(self.repository_name, \"latest\")\n    received_manifest = get_manifest_result.manifest\n    # delete the layers\n    for layer in received_manifest[\"layers\"]:\n        client.delete_blob(self.repository_name, layer[\"digest\"])\n    # delete the config\n    client.delete_blob(self.repository_name, received_manifest[\"config\"][\"digest\"])\n```\n\n<!-- end snippet -->\n\n\n## troubleshooting\n\nfor infomation about troubleshooting, refer to the [troubleshooting guide].\n### general\nacr client library will raise exceptions defined in [azure core][azure_core_exceptions].\n\n### logging\nthis library uses the standard\n[logging][python_logging] library for logging.\n\nbasic information about http sessions (urls, headers, etc.) is logged at `info` level.\n\ndetailed `debug` level logging, including request/response bodies and **unredacted**\nheaders, can be enabled on the client or per-operation with the `logging_enable` keyword argument.\n\nsee full sdk logging documentation with examples [here][sdk_logging_docs].\n\n### optional configuration\n\noptional keyword arguments can be passed in at the client and per-operation level.\nthe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## next steps\n\n- go further with azure.containerregistry and our [samples][samples].\n- watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?service=container-registry).\n- read more about the [azure container registry service](https://docs.microsoft.com/azure/container-registry/container-registry-intro).\n\n## contributing\n\nthis project welcomes contributions and suggestions.  most contributions require\nyou to agree to a contributor license agreement (cla) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. for\ndetails, visit [cla.microsoft.com][cla].\n\nthis project has adopted the [microsoft open source code of conduct][coc].\nfor more information see the [code of conduct faq][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fcontainerregistry%2fazure-containerregistry%2freadme.png)\n\n<!-- links -->\n[source]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/containerregistry/azure-containerregistry\n[package]: https://pypi.org/project/azure-containerregistry/\n[docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-containerregistry/1.0.0b1/index.html\n[rest_docs]: https://docs.microsoft.com/rest/api/containerregistry/\n[product_docs]:  https://docs.microsoft.com/azure/container-registry\n[pip_link]: https://pypi.org\n[container_registry_docs]: https://docs.microsoft.com/azure/container-registry/container-registry-intro\n[container_registry_create_ps]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-powershell\n[container_registry_create_cli]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-azure-cli\n[container_registry_create_portal]: https://docs.microsoft.com/azure/container-registry/container-registry-get-started-portal\n[container_registry_concepts]: https://docs.microsoft.com/azure/container-registry/container-registry-concepts\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_sub]: https://azure.microsoft.com/free/\n[identity]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md\n[samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/containerregistry/azure-containerregistry/samples\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sdk_logging_docs]: https://docs.microsoft.com/azure/developer/python/azure-sdk-logging\n[troubleshooting guide]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/containerregistry/azure-containerregistry/troubleshooting.md\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-containerregistry",
  "package_url": "https://pypi.org/project/azure-containerregistry/",
  "project_url": "https://pypi.org/project/azure-containerregistry/",
  "project_urls": {
    "Bug Reports": "https://github.com/Azure/azure-sdk-for-python/issues",
    "Homepage": "https://github.com/Azure/azure-sdk-for-python",
    "Source": "https://github.com/Azure/azure-sdk-python"
  },
  "release_url": "https://pypi.org/project/azure-containerregistry/1.2.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "microsoft azure azure container registry client library for python",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "azuresdkengsysadmins@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "container_registry_docs container_registry_concepts container_registry_create_cli azure_core_ref_docs azure_cli",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_containerregistry",
  "homepage": "https://github.com/azure/azure-sdk-for-python",
  "release_count": 14,
  "dependency_ids": []
}
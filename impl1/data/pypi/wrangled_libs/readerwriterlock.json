{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "reader writer lock\n==================\n\n**a python implementation of a solution for the three reader-writer problems.**\n\n[![repo status active](https://www.repostatus.org/badges/latest/active.svg \"repo status active\")](https://www.repostatus.org/#active)\n[![build status](https://travis-ci.org/elarivie/pyreaderwriterlock.svg?branch=master)](https://travis-ci.org/elarivie/pyreaderwriterlock)\n[![coverage status](https://codecov.io/gh/elarivie/pyreaderwriterlock/branch/master/graph/badge.svg)](https://codecov.io/gh/elarivie/pyreaderwriterlock)\n[![bugtracker](https://img.shields.io/github/issues/elarivie/pyreaderwriterlock.svg)][pyreaderwriterlock_bugtracker]\n\n\n[![python version](https://img.shields.io/pypi/pyversions/readerwriterlock.svg)][python]\n[![pypi version](https://img.shields.io/pypi/v/readerwriterlock.svg)][pyreaderwriterlock_pypi]\n\n[![code size in bytes](https://img.shields.io/github/languages/code-size/elarivie/pyreaderwriterlock.svg)][pyreaderwriterlock_repo]\n[![license](https://img.shields.io/pypi/l/readerwriterlock.svg)][pyreaderwriterlock_license]\n\n[![downloads](https://pepy.tech/badge/readerwriterlock)](https://pepy.tech/project/readerwriterlock)\n[![downloads](https://pepy.tech/badge/readerwriterlock/month)](https://pepy.tech/project/readerwriterlock/month)\n[![downloads](https://pepy.tech/badge/readerwriterlock/week)](https://pepy.tech/project/readerwriterlock/week)\n[![pyreaderwriterlock_repo_star](https://img.shields.io/github/stars/elarivie/pyreaderwriterlock.svg?style=social&label=stars)][pyreaderwriterlock_repo_star]\n\nnot only does it implement the reader-writer problems, it is also compliant with the python [lock interface](https://docs.python.org/3/library/threading.html#threading.lock) which among others include support for timeout.\n\nfor reading about the theory behind the reader-writer problems refer to [wikipedia](https://wikipedia.org/wiki/readers\u2013writers_problem).\n\n# installation\n\ninstall the python package [readerwriterlock](https://pypi.python.org/pypi/readerwriterlock)\n\n```bash\npython3 -m pip install -u readerwriterlock\n```\n\n# usage\n\n1. choose a rwlock class base on your access priority need and feature need which is going to be use by the threads:\n\n| priority                                                      | +speed  | +downgradable*         |\n|---------------------------------------------------------------|-----------------|---------------|\n| **reader priority** (*aka first readers-writers problem*)     |   rwlockread    |  rwlockreadd  |\n| **writer priority** (*aka second readers-writers problem*)    |   rwlockwrite   |  rwlockwrited |\n| **fair priority** (*aka third readers-writers problem*)       |   rwlockfair    |  rwlockfaird  |\n\n&ast; **downgradable** feature allows the locks to be atomically downgraded from being locked in write-mode to locked in read-mode\n\n\u24d8 downgradable classes come with a theoretical ~20% negative effect on performance for acquiring and releasing locks.\n\n2. instantiate an instance of the chosen rwlock class:\n\n```python\nfrom readerwriterlock import rwlock\na = rwlock.rwlockfaird()\n```\n3. generate read locks and write locks using the following methods:\n\n```python\n      a_reader_lock = a.gen_rlock()\n\n      a_writer_lock = a.gen_wlock()\n```\n\n4. use the generated read/write locks to protect section in your code:\n\n## pythonic usage example\n\n```python\nwith a.gen_rlock():\n  #read stuff\n\nwith a.gen_wlock():\n  #write stuff\n```\n\n## use case (timeout) example\n```python\nb = a.gen_wlock()\nif b.acquire(blocking=true, timeout=5):\n  try:\n    #do stuff\n  finally:\n    b.release()\n```\n\n## use case (downgrade) example\n\n```python\nb = a.gen_wlock()\nif b.acquire():\n    try:\n        #read/write stuff\n        b = b.downgrade()\n        #read stuff\n    finally:\n        b.release()\n```\n\n## live example\nrefer to the file [test_rwlock.py](tests/test_rwlock.py) which has above 90% line coverage of [rwlock.py](readerwriterlock/rwlock.py).\n\nthe tests can be initiated by doing\n\n```bash\nmake check.test.coverage\n```\n\ncontact\n----\n* project: [github](https://github.com/elarivie/pyreaderwriterlock)\n* \u00e9ric larivi\u00e8re <ericlariviere@hotmail.com>\n\n\n[python]: https://www.python.org\n[pyreaderwriterlock_repo]: https://github.com/elarivie/pyreaderwriterlock\n[pyreaderwriterlock_bugtracker]: https://github.com/elarivie/pyreaderwriterlock/issues\n[pyreaderwriterlock_repo_star]: https://github.com/elarivie/pyreaderwriterlock/stargazers\n[pyreaderwriterlock_pypi]: https://pypi.python.org/pypi/readerwriterlock\n[pyreaderwriterlock_license]: https://github.com/elarivie/pyreaderwriterlock/blob/master/license.txt\n\n",
  "docs_url": null,
  "keywords": "rwlock,read-write lock,lock,priority,reader,writer,fair,read,write,thread,synchronize",
  "license": "mit",
  "name": "readerwriterlock",
  "package_url": "https://pypi.org/project/readerwriterlock/",
  "project_url": "https://pypi.org/project/readerwriterlock/",
  "project_urls": {
    "Download": "https://github.com/elarivie/pyReaderWriterLock",
    "Homepage": "https://github.com/elarivie/pyReaderWriterLock",
    "Source": "https://github.com/elarivie/pyReaderWriterLock",
    "Tracker": "https://github.com/elarivie/pyReaderWriterLock/issues"
  },
  "release_url": "https://pypi.org/project/readerwriterlock/1.0.9/",
  "requires_dist": [
    "typing-extensions"
  ],
  "requires_python": ">=3.6",
  "summary": "a python implementation of the three reader-writer problems.",
  "version": "1.0.9",
  "releases": [],
  "developers": [
    "ericlariviere@hotmail.com"
  ],
  "kwds": "a_writer_lock readerwriterlock pyreaderwriterlock_bugtracker a_reader_lock pyreaderwriterlock",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_readerwriterlock",
  "homepage": "https://github.com/elarivie/pyreaderwriterlock",
  "release_count": 10,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
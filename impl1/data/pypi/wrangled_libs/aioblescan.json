{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "aioblescan\n==========\n\naioblescan is a python 3/asyncio library to listen for ble advertized\npackets.\n\n|pypi version fury.io| |mit license| |github-badge| |downloads|\n\ninstallation\n------------\n\nwe are on pypi so\n\n::\n\n    pip3 install aioblescan\n\nor\n\n::\n\n    python3 -m pip install aioblescan\n\nhow to use\n----------\n\nessentially, you create a function to process the incoming information\nand you attach it to the ``btscanrequester``. you then create a\nbluetooth connection, you issue the scan command and wait for incoming\npackets and process them.\n\nyou can use eddystone or ruuviweather to retrieve specific information\n\nthe easiest way is to look at the ``__main__.py`` file.\n\nyou can run the command:\n\n::\n\n   aioblescan\n\nor you can run the module with\n\n::\n\n   python3 -m aioblescan\n\nadd ``-h`` for help.\n\nto see the ruuvitag weather information try:\n\n::\n\n   python3 -m aioblescan -r\n\nyou will get\n\n::\n\n   weather info {'rssi': -64, 'pressure': 100300, 'temperature': 24, 'mac address': 'fb:86:84:dd:aa:bb', 'tx_power': -7, 'humidity': 36.0}\n   weather info {'rssi': -62, 'pressure': 100300, 'temperature': 24, 'mac address': 'fb:86:84:dd:aa:bb', 'tx_power': -7, 'humidity': 36.0}\n\nto check eddystone beacon\n\n::\n\n   python3 -m aioblescan -e\n\nyou get\n\n::\n\n   google beacon {'tx_power': -7, 'url': 'https://ruu.vi/#begyamr8n', 'mac address': 'fb:86:84:dd:aa:bb', 'rssi': -52}\n   google beacon {'tx_power': -7, 'url': 'https://ruu.vi/#begyamr8n', 'mac address': 'fb:86:84:dd:aa:bb', 'rssi': -53}\n\nto check atc_mithermometer with `custom\nfirmware <https://github.com/atc1441/atc_mithermometer>`__ beacon\n\n::\n\n   python3 -m aioblescan -a\n\nyou get\n\n::\n\n   temperature info {'mac address': 'a4:c1:38:40:52:38', 'temperature': 2.8, 'humidity': 62, 'battery': 72, 'battery_volts': 2.863, 'counter': 103, 'rssi': -76}\n   temperature info {'mac address': 'a4:c1:38:40:52:38', 'temperature': 2.8, 'humidity': 62, 'battery': 72, 'battery_volts': 2.863, 'counter': 103, 'rssi': -77}\n\nto check thermobeacon sensors\n\n::\n\n   python3 -m aioblescan -t\n\nyou get\n\n::\n\n   temperature info {'mac address': '19:c4:00:00:0f:5d', 'max_temperature': 27.0625, 'min_temperature': 21.75, 'max_temp_ts': 0, 'min_temp_ts': 2309}\n   temperature info {'mac address': '19:c4:00:00:0f:5d', 'temperature': 21.75, 'humidity': 49.5, 'battery_volts': 3234, 'counter': 2401, 'rssi': -67}\n\nfor a generic advertise packet scanning\n\n::\n\n   python3 -m aioblescan\n\nyou get\n\n::\n\n   hci event:\n       code:\n           3e\n       length:\n           19\n       le meta:\n           code:\n               02\n           adv report:\n               num reports:\n                   1\n               ev type:\n                   generic adv\n               addr type:\n                   public\n               peer:\n                   54:6c:0e:aa:bb:cc\n               length:\n                   7\n               flags:\n                   simul le - br/edr (host): false\n                   simul le - br/edr (control.): false\n                   br/edr not supported: false\n                   le general disc.: true\n                   le limited disc.: false\n               incomplete uuids:\n                       ff:30\n               rssi:\n                   -67\n   hci event:\n       code:\n           3e\n       length:\n           43\n       le meta:\n           code:\n               02\n           adv report:\n               num reports:\n                   1\n               ev type:\n                   no connection adv\n               addr type:\n                   random\n               peer:\n                   fb:86:84:dd:aa:bb\n               length:\n                   31\n               flags:\n                   simul le - br/edr (host): false\n                   simul le - br/edr (control.): false\n                   br/edr not supported: false\n                   le general disc.: true\n                   le limited disc.: true\n               complete uuids:\n                       fe:aa\n               advertised data:\n                   service data uuid:\n                       fe:aa\n                   adv payload:\n                       10:f9:03:72:75:75:2e:76:69:2f:23:42:45:77:59:41:4d:52:38:6e\n               rssi:\n                   -59\n\nhere the first packet is from a wynd device, the second from a ruuvi tag\n\naioblescan can also send eddystone advertising. try the -a flag when\nrunning the module.\n\nto check tilt hydrometer\n\n::\n\n   python3 -m aioblescan --tilt\n\nyou will see the regular bluetooth beacons from any tilt in range:\n\n::\n\n   {\"uuid\": \"a495bb40c5b14b44b5121370f02d74de\", \"major\": 70, \"minor\": 1054, \"tx_power\": 31, \"rssi\": -58, \"mac\": \"xx:xx:xx:xx:xx:xx\"}\n   {\"uuid\": \"a495bb40c5b14b44b5121370f02d74de\", \"major\": 70, \"minor\": 1054, \"tx_power\": 31, \"rssi\": -74, \"mac\": \"xx:xx:xx:xx:xx:xx\"}\n   {\"uuid\": \"a495bb40c5b14b44b5121370f02d74de\", \"major\": 70, \"minor\": 1054, \"tx_power\": 31, \"rssi\": -57, \"mac\": \"xx:xx:xx:xx:xx:xx\"}\n\nhit ``ctrl-c`` to stop the scan.\n\ninterpreting the tilt data\n--------------------------\n\nthe information from the tilt plugin is returned as a valid json:\n\n::\n\n   {\n   \"uuid\": \"a495bb40c5b14b44b5121370f02d74de\",\n   \"major\": 69,\n   \"minor\": 1056,\n   \"tx_power\": 31,\n   \"rssi\": -49,\n   \"mac\": \"xx:xx:xx:xx:xx:xx\"\n   }\n\nthese keys may be interpreted as:\n\n-  **uuid**: tilt name. the \"40\" in\n   a495bb\\ ``40``\\ c5b14b44b5121370f02d74de is an indication of the\n   color.\n\n   -  10: red\n   -  20: green\n   -  30: black\n   -  40: purple\n   -  50: orange\n   -  60: blue\n   -  70: yellow\n   -  80: pink\n\n-  **major**: temp in degrees f.\n-  **minor**: specific gravity x1000.\n-  **tx_power**: weeks since battery change (0-152 when converted to\n   unsigned 8 bit integer). you will occasionally see ``-59`` which is\n   there to allow ios to compute rssi. this value should be discarded.\n-  **rssi**: received signal strength indication (rssi) is a measurement\n   of the power present in the received radio signal. a lower negative\n   number is stronger.\n-  **mac**: media access control (mac) address of the device.\n\nfaq\n---\n\nwhy not use scapy?\n\n::\n\n   scapy is great and you can do\n\n       import scapy.all as sa\n       test=sa.bluetoothhcisocket(0)\n       command=sa.hci_cmd_le_set_scan_enable(enable=1,filter_dups=0)\n       chdr=sa.hci_command_hdr(len=len(command))\n       hdr=sa.hci_hdr(type=1)\n       test.send(hdr / chdr / command)\n\n   to get things going. but... the great thing with scapy is that there is so\n   many versions to choose from.... and not all have all the same functions ... and\n   installation can be haphazard, with some version not installing at all. also\n   scapy inludes a lot of other protocols and could be an overkill... lastly it\n   is never too late to learn...\n\nwhat can you track?\n\n::\n\n   aioblescan will try to parse all the incoming advertised information. you can see\n   the raw data when it does not know what to do. with eddystone beacon you can see the\n   url, telemetry and uid\n\n.. |pypi version fury.io| image:: https://badge.fury.io/py/aioblescan.svg\n   :target: https://pypi.python.org/pypi/aioblescan\n.. |mit license| image:: https://img.shields.io/badge/license-mit-blue.svg\n   :target: https://lbesson.mit-licen\n.. |github-badge| image:: https://github.com/frawau/aioblescan/workflows/black/badge.svg\n   :target: https://github.com/psf/black\n.. |downloads| image:: https://pepy.tech/badge/aioblescan/month\n   :target: https://pepy.tech/project/aioblescan\n\n\n",
  "docs_url": null,
  "keywords": "bluetooth,advertising,hci,ble",
  "license": "mit",
  "name": "aioblescan",
  "package_url": "https://pypi.org/project/aioblescan/",
  "project_url": "https://pypi.org/project/aioblescan/",
  "project_urls": {
    "Homepage": "http://github.com/frawau/aioblescan"
  },
  "release_url": "https://pypi.org/project/aioblescan/0.2.14/",
  "requires_dist": [
    "pytest ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "scanning bluetooth for advertised info with asyncio.",
  "version": "0.2.14",
  "releases": [],
  "developers": [
    "francois@wautier.eu"
  ],
  "kwds": "btscanrequester bluetoothhcisocket bluetooth ble asyncio",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aioblescan",
  "homepage": "http://github.com/frawau/aioblescan",
  "release_count": 20,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
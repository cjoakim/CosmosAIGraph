{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# include cloudformation templates in the cdk\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis module contains a set of classes whose goal is to facilitate working\nwith existing cloudformation templates in the cdk.\nit can be thought of as an extension of the capabilities of the\n[`cfninclude` class](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_core.cfninclude.html).\n\n## basic usage\n\nassume we have a file with an existing template.\nit could be in json format, in a file `my-template.json`:\n\n```json\n{\n  \"resources\": {\n    \"bucket\": {\n      \"type\": \"aws::s3::bucket\",\n      \"properties\": {\n        \"bucketname\": \"some-bucket-name\"\n      }\n    }\n  }\n}\n```\n\nor it could by in yaml format, in a file `my-template.yaml`:\n\n```yaml\nresources:\n  bucket:\n    type: aws::s3::bucket\n    properties:\n      bucketname: some-bucket-name\n```\n\nit can be included in a cdk application with the following code:\n\n```python\ncfn_template = cfn_inc.cfninclude(self, \"template\",\n    template_file=\"my-template.json\"\n)\n```\n\nor, if your template uses yaml:\n\n```python\ncfn_template = cfn_inc.cfninclude(self, \"template\",\n    template_file=\"my-template.yaml\"\n)\n```\n\n**note**: different yaml parsers sometimes don't agree on what exactly constitutes valid yaml.\nif you get a yaml exception when including your template,\ntry converting it to json, and including that file instead.\nif you're downloading your template from the cloudformation aws console,\nyou can easily get it in json format by clicking the 'view in designer'\nbutton on the 'template' tab -\nonce in designer, select json in the \"choose template language\"\nradio buttons on the bottom pane.\n\nthis will add all resources from `my-template.json` / `my-template.yaml` into the cdk application,\npreserving their original logical ids from the template file.\n\nnote that this including process will *not* execute any\n[cloudformation transforms](https://docs.aws.amazon.com/awscloudformation/latest/userguide/template-macros.html) -\nincluding the [serverless transform](https://docs.aws.amazon.com/awscloudformation/latest/userguide/transform-aws-serverless.html).\n\nany resource from the included template can be retrieved by referring to it by its logical id from the template.\nif you know the class of the cdk object that corresponds to that resource,\nyou can cast the returned object to the correct type:\n\n```python\n# cfn_template: cfn_inc.cfninclude\n\ncfn_bucket = cfn_template.get_resource(\"bucket\")\n```\n\nnote that any resources not present in the latest version of the cloudformation schema\nat the time of publishing the version of this module that you depend on,\nincluding [custom resources](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-resource-cfn-customresource.html),\nwill be returned as instances of the class `cfnresource`,\nand so cannot be cast to a different resource type.\n\nany modifications made to that resource will be reflected in the resulting cdk template;\nfor example, the name of the bucket can be changed:\n\n```python\n# cfn_template: cfn_inc.cfninclude\n\ncfn_bucket = cfn_template.get_resource(\"bucket\")\ncfn_bucket.bucket_name = \"my-bucket-name\"\n```\n\nyou can also refer to the resource when defining other constructs,\nincluding the higher-level ones\n(those whose name does not start with `cfn`),\nfor example:\n\n```python\n# cfn_template: cfn_inc.cfninclude\n\ncfn_bucket = cfn_template.get_resource(\"bucket\")\n\nrole = iam.role(self, \"role\",\n    assumed_by=iam.anyprincipal()\n)\nrole.add_to_policy(iam.policystatement(\n    actions=[\"s3:*\"],\n    resources=[cfn_bucket.attr_arn]\n))\n```\n\n### converting l1 resources to l2\n\nthe resources the `getresource` method returns are what the cdk calls\n[layer 1 resources](https://docs.aws.amazon.com/cdk/latest/guide/cfn_layer.html#cfn_layer_cfn)\n(like `cfnbucket`).\nhowever, in many places in the construct library,\nthe cdk requires so-called layer 2 resources, like `ibucket`.\nthere are two ways of going from an l1 to an l2 resource.\n\n#### using`fromcfn*()` methods\n\nthis is the preferred method of converting an l1 resource to an l2.\nit works by invoking a static method of the class of the l2 resource\nwhose name starts with `fromcfn` -\nfor example, for kms keys, that would be the `kms.fromcfnkey()` method -\nand passing the l1 instance as an argument:\n\n```python\n# cfn_template: cfn_inc.cfninclude\n\ncfn_key = cfn_template.get_resource(\"key\")\nkey = kms.key.from_cfn_key(cfn_key)\n```\n\nthis returns an instance of the `kms.ikey` type that can be passed anywhere in the cdk an `ikey` is expected.\nwhat is more, that `ikey` instance will be mutable -\nwhich means calling any mutating methods on it,\nlike `addtoresourcepolicy()`,\nwill be reflected in the resulting template.\n\nnote that, in some cases, the `fromcfn*()` method might not be able to create an l2 from the underlying l1.\nthis can happen when the underlying l1 heavily uses cloudformation functions.\nfor example, if you tried to create an l2 `ikey`\nfrom an l1 represented as this cloudformation template:\n\n```json\n{\n  \"resources\": {\n    \"key\": {\n      \"type\": \"aws::kms::key\",\n      \"properties\": {\n        \"keypolicy\": {\n          \"statement\": [\n            {\n              \"fn::if\": [\n                \"condition\",\n                {\n                  \"action\": \"kms:if-action\",\n                  \"resource\": \"*\",\n                  \"principal\": \"*\",\n                  \"effect\": \"allow\"\n                },\n                {\n                  \"action\": \"kms:else-action\",\n                  \"resource\": \"*\",\n                  \"principal\": \"*\",\n                  \"effect\": \"allow\"\n                }\n              ]\n            }\n          ],\n          \"version\": \"2012-10-17\"\n        }\n      }\n    }\n  }\n}\n```\n\nthe `key.fromcfnkey()` method does not know how to translate that into cdk l2 concepts,\nand would throw an exception.\n\nin those cases, you need the use the second method of converting an l1 to an l2.\n\n#### using `from*name/arn/attributes()` methods\n\nif the resource you need does not have a `fromcfn*()` method,\nor if it does, but it throws an exception for your particular l1,\nyou need to use the second method of converting an l1 resource to l2.\n\neach l2 class has static factory methods with names like `from*name()`,\n`from*arn()`, and/or `from*attributes()`.\nyou can obtain an l2 resource from an l1 by passing the correct properties of the l1 as the arguments to those methods:\n\n```python\n# cfn_template: cfn_inc.cfninclude\n\n# using from*attributes()\n# private_cfn_subnet1: ec2.cfnsubnet\n# private_cfn_subnet2: ec2.cfnsubnet\n\n\n# using from*name()\ncfn_bucket = cfn_template.get_resource(\"bucket\")\nbucket = s3.bucket.from_bucket_name(self, \"l2bucket\", cfn_bucket.ref)\n\n# using from*arn()\ncfn_key = cfn_template.get_resource(\"key\")\nkey = kms.key.from_key_arn(self, \"l2key\", cfn_key.attr_arn)\ncfn_vpc = cfn_template.get_resource(\"vpc\")\nvpc = ec2.vpc.from_vpc_attributes(self, \"l2vpc\",\n    vpc_id=cfn_vpc.ref,\n    availability_zones=core.fn.get_azs(),\n    private_subnet_ids=[private_cfn_subnet1.ref, private_cfn_subnet2.ref]\n)\n```\n\nas long as they just need to be referenced,\nand not changed in any way, everything should work;\nhowever, note that resources returned from those methods,\nunlike those returned by `fromcfn*()` methods,\nare immutable, which means calling any mutating methods on them will have no effect.\nyou will have to mutate the underlying l1 in order to change them.\n\n## non-resource template elements\n\nin addition to resources,\nyou can also retrieve and mutate all other template elements:\n\n* [parameters](https://docs.aws.amazon.com/awscloudformation/latest/userguide/parameters-section-structure.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  param = cfn_template.get_parameter(\"myparameter\")\n\n  # mutating the parameter\n  param.default = \"mydefault\"\n  ```\n* [conditions](https://docs.aws.amazon.com/awscloudformation/latest/userguide/conditions-section-structure.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  condition = cfn_template.get_condition(\"mycondition\")\n\n  # mutating the condition\n  condition.expression = core.fn.condition_equals(1, 2)\n  ```\n* [mappings](https://docs.aws.amazon.com/awscloudformation/latest/userguide/mappings-section-structure.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  mapping = cfn_template.get_mapping(\"mymapping\")\n\n  # mutating the mapping\n  mapping.set_value(\"my-region\", \"ami\", \"ami-04681a1dbd79675a5\")\n  ```\n* [service catalog template rules](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  # mutating the rule\n  # my_parameter: core.cfnparameter\n\n  rule = cfn_template.get_rule(\"myrule\")\n  rule.add_assertion(core.fn.condition_contains([\"m1.small\"], my_parameter.value_as_string), \"myparameter has to be m1.small\")\n  ```\n* [outputs](https://docs.aws.amazon.com/awscloudformation/latest/userguide/outputs-section-structure.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  # mutating the output\n  # cfn_bucket: s3.cfnbucket\n\n  output = cfn_template.get_output(\"myoutput\")\n  output.value = cfn_bucket.attr_arn\n  ```\n* [hooks for blue-green deployments](https://docs.aws.amazon.com/awscloudformation/latest/userguide/blue-green.html):\n\n  ```python\n  # cfn_template: cfn_inc.cfninclude\n\n  # mutating the hook\n  # my_role: iam.role\n\n  hook = cfn_template.get_hook(\"myoutput\")\n  code_deploy_hook = hook\n  code_deploy_hook.service_role = my_role.role_arn\n  ```\n\n## parameter replacement\n\nif your existing template uses cloudformation parameters,\nyou may want to remove them in favor of build-time values.\nyou can do that using the `parameters` property:\n\n```python\ncfn_inc.cfninclude(self, \"includetemplate\",\n    template_file=\"path/to/my/template\",\n    parameters={\n        \"myparam\": \"my-value\"\n    }\n)\n```\n\nthis will replace all references to `myparam` with the string `'my-value'`,\nand `myparam` will be removed from the 'parameters' section of the resulting template.\n\n## nested stacks\n\nthis module also supports templates that use [nested stacks](https://docs.aws.amazon.com/awscloudformation/latest/userguide/using-cfn-nested-stacks.html).\n\nfor example, if you have the following parent template:\n\n```json\n{\n  \"resources\": {\n    \"childstack\": {\n      \"type\": \"aws::cloudformation::stack\",\n      \"properties\": {\n        \"templateurl\": \"https://my-s3-template-source.s3.amazonaws.com/child-stack.json\"\n      }\n    }\n  }\n}\n```\n\nwhere the child template pointed to by `https://my-s3-template-source.s3.amazonaws.com/child-stack.json` is:\n\n```json\n{\n  \"resources\": {\n    \"mybucket\": {\n      \"type\": \"aws::s3::bucket\"\n    }\n  }\n}\n```\n\nyou can include both the parent stack,\nand the nested stack in your cdk application as follows:\n\n```python\nparent_template = cfn_inc.cfninclude(self, \"parentstack\",\n    template_file=\"path/to/my-parent-template.json\",\n    load_nested_stacks={\n        \"childstack\": cfn_inc.cfnincludeprops(\n            template_file=\"path/to/my-nested-template.json\"\n        )\n    }\n)\n```\n\nhere, `path/to/my-nested-template.json`\nrepresents the path on disk to the downloaded template file from the original template url of the nested stack\n(`https://my-s3-template-source.s3.amazonaws.com/child-stack.json`).\nin the cdk application,\nthis file will be turned into an [asset](https://docs.aws.amazon.com/cdk/latest/guide/assets.html),\nand the `templateurl` property of the nested stack resource\nwill be modified to point to that asset.\n\nthe included nested stack can be accessed with the `getnestedstack` method:\n\n```python\n# parent_template: cfn_inc.cfninclude\n\n\nincluded_child_stack = parent_template.get_nested_stack(\"childstack\")\nchild_stack = included_child_stack.stack\nchild_template = included_child_stack.included_template\n```\n\nnow you can reference resources from `childstack`,\nand modify them like any other included template:\n\n```python\n# child_template: cfn_inc.cfninclude\n\n\ncfn_bucket = child_template.get_resource(\"mybucket\")\ncfn_bucket.bucket_name = \"my-new-bucket-name\"\n\nrole = iam.role(self, \"myrole\",\n    assumed_by=iam.accountrootprincipal()\n)\n\nrole.add_to_policy(iam.policystatement(\n    actions=[\"s3:getobject*\", \"s3:getbucket*\", \"s3:list*\"\n    ],\n    resources=[cfn_bucket.attr_arn]\n))\n```\n\nyou can also include the nested stack after the `cfninclude` object was created,\ninstead of doing it on construction:\n\n```python\n# parent_template: cfn_inc.cfninclude\n\nincluded_child_stack = parent_template.load_nested_stack(\"childtemplate\",\n    template_file=\"path/to/my-nested-template.json\"\n)\n```\n\n## vending cloudformation templates as constructs\n\nin many cases, there are existing cloudformation templates that are not entire applications,\nbut more like specialized fragments, implementing a particular pattern or best practice.\nif you have templates like that,\nyou can use the `cfninclude` class to vend them as cdk constructs:\n\n```python\nfrom constructs import construct\nimport aws_cdk.cloudformation_include as cfn_inc\nimport path as path\n\nclass myconstruct(construct):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        # include a template inside the construct\n        cfn_inc.cfninclude(self, \"myconstruct\",\n            template_file=path.join(__dirname, \"my-template.json\"),\n            preserve_logical_ids=false\n        )\n```\n\nnotice the `preservelogicalids` parameter -\nit makes sure the logical ids of all the included template elements are re-named using cdk's algorithm,\nguaranteeing they are unique within your application.\nwithout that parameter passed,\ninstantiating `myconstruct` twice in the same stack would result in duplicated logical ids.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.cloudformation-include",
  "package_url": "https://pypi.org/project/aws-cdk.cloudformation-include/",
  "project_url": "https://pypi.org/project/aws-cdk.cloudformation-include/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.cloudformation-include/1.204.0/",
  "requires_dist": [
    "aws-cdk.alexa-ask (==1.204.0)",
    "aws-cdk.aws-accessanalyzer (==1.204.0)",
    "aws-cdk.aws-acmpca (==1.204.0)",
    "aws-cdk.aws-amazonmq (==1.204.0)",
    "aws-cdk.aws-amplify (==1.204.0)",
    "aws-cdk.aws-amplifyuibuilder (==1.204.0)",
    "aws-cdk.aws-apigateway (==1.204.0)",
    "aws-cdk.aws-apigatewayv2 (==1.204.0)",
    "aws-cdk.aws-appconfig (==1.204.0)",
    "aws-cdk.aws-appflow (==1.204.0)",
    "aws-cdk.aws-appintegrations (==1.204.0)",
    "aws-cdk.aws-applicationautoscaling (==1.204.0)",
    "aws-cdk.aws-applicationinsights (==1.204.0)",
    "aws-cdk.aws-appmesh (==1.204.0)",
    "aws-cdk.aws-apprunner (==1.204.0)",
    "aws-cdk.aws-appstream (==1.204.0)",
    "aws-cdk.aws-appsync (==1.204.0)",
    "aws-cdk.aws-aps (==1.204.0)",
    "aws-cdk.aws-athena (==1.204.0)",
    "aws-cdk.aws-auditmanager (==1.204.0)",
    "aws-cdk.aws-autoscaling (==1.204.0)",
    "aws-cdk.aws-autoscalingplans (==1.204.0)",
    "aws-cdk.aws-backup (==1.204.0)",
    "aws-cdk.aws-backupgateway (==1.204.0)",
    "aws-cdk.aws-batch (==1.204.0)",
    "aws-cdk.aws-billingconductor (==1.204.0)",
    "aws-cdk.aws-budgets (==1.204.0)",
    "aws-cdk.aws-cassandra (==1.204.0)",
    "aws-cdk.aws-ce (==1.204.0)",
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-chatbot (==1.204.0)",
    "aws-cdk.aws-cloud9 (==1.204.0)",
    "aws-cdk.aws-cloudfront (==1.204.0)",
    "aws-cdk.aws-cloudtrail (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-codeartifact (==1.204.0)",
    "aws-cdk.aws-codebuild (==1.204.0)",
    "aws-cdk.aws-codecommit (==1.204.0)",
    "aws-cdk.aws-codedeploy (==1.204.0)",
    "aws-cdk.aws-codeguruprofiler (==1.204.0)",
    "aws-cdk.aws-codegurureviewer (==1.204.0)",
    "aws-cdk.aws-codepipeline (==1.204.0)",
    "aws-cdk.aws-codestar (==1.204.0)",
    "aws-cdk.aws-codestarconnections (==1.204.0)",
    "aws-cdk.aws-codestarnotifications (==1.204.0)",
    "aws-cdk.aws-cognito (==1.204.0)",
    "aws-cdk.aws-comprehend (==1.204.0)",
    "aws-cdk.aws-config (==1.204.0)",
    "aws-cdk.aws-connect (==1.204.0)",
    "aws-cdk.aws-connectcampaigns (==1.204.0)",
    "aws-cdk.aws-controltower (==1.204.0)",
    "aws-cdk.aws-cur (==1.204.0)",
    "aws-cdk.aws-customerprofiles (==1.204.0)",
    "aws-cdk.aws-databrew (==1.204.0)",
    "aws-cdk.aws-datapipeline (==1.204.0)",
    "aws-cdk.aws-datasync (==1.204.0)",
    "aws-cdk.aws-dax (==1.204.0)",
    "aws-cdk.aws-detective (==1.204.0)",
    "aws-cdk.aws-devopsguru (==1.204.0)",
    "aws-cdk.aws-directoryservice (==1.204.0)",
    "aws-cdk.aws-dlm (==1.204.0)",
    "aws-cdk.aws-dms (==1.204.0)",
    "aws-cdk.aws-docdb (==1.204.0)",
    "aws-cdk.aws-docdbelastic (==1.204.0)",
    "aws-cdk.aws-dynamodb (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecr (==1.204.0)",
    "aws-cdk.aws-ecs (==1.204.0)",
    "aws-cdk.aws-efs (==1.204.0)",
    "aws-cdk.aws-eks (==1.204.0)",
    "aws-cdk.aws-elasticache (==1.204.0)",
    "aws-cdk.aws-elasticbeanstalk (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancing (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancingv2 (==1.204.0)",
    "aws-cdk.aws-elasticsearch (==1.204.0)",
    "aws-cdk.aws-emr (==1.204.0)",
    "aws-cdk.aws-emrcontainers (==1.204.0)",
    "aws-cdk.aws-emrserverless (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-eventschemas (==1.204.0)",
    "aws-cdk.aws-evidently (==1.204.0)",
    "aws-cdk.aws-finspace (==1.204.0)",
    "aws-cdk.aws-fis (==1.204.0)",
    "aws-cdk.aws-fms (==1.204.0)",
    "aws-cdk.aws-forecast (==1.204.0)",
    "aws-cdk.aws-frauddetector (==1.204.0)",
    "aws-cdk.aws-fsx (==1.204.0)",
    "aws-cdk.aws-gamelift (==1.204.0)",
    "aws-cdk.aws-globalaccelerator (==1.204.0)",
    "aws-cdk.aws-glue (==1.204.0)",
    "aws-cdk.aws-grafana (==1.204.0)",
    "aws-cdk.aws-greengrass (==1.204.0)",
    "aws-cdk.aws-greengrassv2 (==1.204.0)",
    "aws-cdk.aws-groundstation (==1.204.0)",
    "aws-cdk.aws-guardduty (==1.204.0)",
    "aws-cdk.aws-healthlake (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-identitystore (==1.204.0)",
    "aws-cdk.aws-imagebuilder (==1.204.0)",
    "aws-cdk.aws-inspector (==1.204.0)",
    "aws-cdk.aws-inspectorv2 (==1.204.0)",
    "aws-cdk.aws-internetmonitor (==1.204.0)",
    "aws-cdk.aws-iot1click (==1.204.0)",
    "aws-cdk.aws-iot (==1.204.0)",
    "aws-cdk.aws-iotanalytics (==1.204.0)",
    "aws-cdk.aws-iotcoredeviceadvisor (==1.204.0)",
    "aws-cdk.aws-iotevents (==1.204.0)",
    "aws-cdk.aws-iotfleethub (==1.204.0)",
    "aws-cdk.aws-iotfleetwise (==1.204.0)",
    "aws-cdk.aws-iotsitewise (==1.204.0)",
    "aws-cdk.aws-iotthingsgraph (==1.204.0)",
    "aws-cdk.aws-iottwinmaker (==1.204.0)",
    "aws-cdk.aws-iotwireless (==1.204.0)",
    "aws-cdk.aws-ivs (==1.204.0)",
    "aws-cdk.aws-ivschat (==1.204.0)",
    "aws-cdk.aws-kafkaconnect (==1.204.0)",
    "aws-cdk.aws-kendra (==1.204.0)",
    "aws-cdk.aws-kendraranking (==1.204.0)",
    "aws-cdk.aws-kinesis (==1.204.0)",
    "aws-cdk.aws-kinesisanalytics (==1.204.0)",
    "aws-cdk.aws-kinesisanalyticsv2 (==1.204.0)",
    "aws-cdk.aws-kinesisfirehose (==1.204.0)",
    "aws-cdk.aws-kinesisvideo (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lakeformation (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-lex (==1.204.0)",
    "aws-cdk.aws-licensemanager (==1.204.0)",
    "aws-cdk.aws-lightsail (==1.204.0)",
    "aws-cdk.aws-location (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-lookoutequipment (==1.204.0)",
    "aws-cdk.aws-lookoutmetrics (==1.204.0)",
    "aws-cdk.aws-lookoutvision (==1.204.0)",
    "aws-cdk.aws-m2 (==1.204.0)",
    "aws-cdk.aws-macie (==1.204.0)",
    "aws-cdk.aws-managedblockchain (==1.204.0)",
    "aws-cdk.aws-mediaconnect (==1.204.0)",
    "aws-cdk.aws-mediaconvert (==1.204.0)",
    "aws-cdk.aws-medialive (==1.204.0)",
    "aws-cdk.aws-mediapackage (==1.204.0)",
    "aws-cdk.aws-mediastore (==1.204.0)",
    "aws-cdk.aws-mediatailor (==1.204.0)",
    "aws-cdk.aws-memorydb (==1.204.0)",
    "aws-cdk.aws-msk (==1.204.0)",
    "aws-cdk.aws-mwaa (==1.204.0)",
    "aws-cdk.aws-neptune (==1.204.0)",
    "aws-cdk.aws-networkfirewall (==1.204.0)",
    "aws-cdk.aws-networkmanager (==1.204.0)",
    "aws-cdk.aws-nimblestudio (==1.204.0)",
    "aws-cdk.aws-oam (==1.204.0)",
    "aws-cdk.aws-omics (==1.204.0)",
    "aws-cdk.aws-opensearchserverless (==1.204.0)",
    "aws-cdk.aws-opensearchservice (==1.204.0)",
    "aws-cdk.aws-opsworks (==1.204.0)",
    "aws-cdk.aws-opsworkscm (==1.204.0)",
    "aws-cdk.aws-organizations (==1.204.0)",
    "aws-cdk.aws-osis (==1.204.0)",
    "aws-cdk.aws-panorama (==1.204.0)",
    "aws-cdk.aws-personalize (==1.204.0)",
    "aws-cdk.aws-pinpoint (==1.204.0)",
    "aws-cdk.aws-pinpointemail (==1.204.0)",
    "aws-cdk.aws-pipes (==1.204.0)",
    "aws-cdk.aws-proton (==1.204.0)",
    "aws-cdk.aws-qldb (==1.204.0)",
    "aws-cdk.aws-quicksight (==1.204.0)",
    "aws-cdk.aws-ram (==1.204.0)",
    "aws-cdk.aws-rds (==1.204.0)",
    "aws-cdk.aws-redshift (==1.204.0)",
    "aws-cdk.aws-redshiftserverless (==1.204.0)",
    "aws-cdk.aws-refactorspaces (==1.204.0)",
    "aws-cdk.aws-rekognition (==1.204.0)",
    "aws-cdk.aws-resiliencehub (==1.204.0)",
    "aws-cdk.aws-resourceexplorer2 (==1.204.0)",
    "aws-cdk.aws-resourcegroups (==1.204.0)",
    "aws-cdk.aws-robomaker (==1.204.0)",
    "aws-cdk.aws-rolesanywhere (==1.204.0)",
    "aws-cdk.aws-route53 (==1.204.0)",
    "aws-cdk.aws-route53recoverycontrol (==1.204.0)",
    "aws-cdk.aws-route53recoveryreadiness (==1.204.0)",
    "aws-cdk.aws-route53resolver (==1.204.0)",
    "aws-cdk.aws-rum (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-s3objectlambda (==1.204.0)",
    "aws-cdk.aws-s3outposts (==1.204.0)",
    "aws-cdk.aws-sagemaker (==1.204.0)",
    "aws-cdk.aws-sam (==1.204.0)",
    "aws-cdk.aws-scheduler (==1.204.0)",
    "aws-cdk.aws-sdb (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.aws-securityhub (==1.204.0)",
    "aws-cdk.aws-servicecatalog (==1.204.0)",
    "aws-cdk.aws-servicecatalogappregistry (==1.204.0)",
    "aws-cdk.aws-servicediscovery (==1.204.0)",
    "aws-cdk.aws-ses (==1.204.0)",
    "aws-cdk.aws-shield (==1.204.0)",
    "aws-cdk.aws-signer (==1.204.0)",
    "aws-cdk.aws-simspaceweaver (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.aws-ssm (==1.204.0)",
    "aws-cdk.aws-ssmcontacts (==1.204.0)",
    "aws-cdk.aws-ssmincidents (==1.204.0)",
    "aws-cdk.aws-sso (==1.204.0)",
    "aws-cdk.aws-stepfunctions (==1.204.0)",
    "aws-cdk.aws-supportapp (==1.204.0)",
    "aws-cdk.aws-synthetics (==1.204.0)",
    "aws-cdk.aws-systemsmanagersap (==1.204.0)",
    "aws-cdk.aws-timestream (==1.204.0)",
    "aws-cdk.aws-transfer (==1.204.0)",
    "aws-cdk.aws-voiceid (==1.204.0)",
    "aws-cdk.aws-vpclattice (==1.204.0)",
    "aws-cdk.aws-waf (==1.204.0)",
    "aws-cdk.aws-wafregional (==1.204.0)",
    "aws-cdk.aws-wafv2 (==1.204.0)",
    "aws-cdk.aws-wisdom (==1.204.0)",
    "aws-cdk.aws-workspaces (==1.204.0)",
    "aws-cdk.aws-xray (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "a package that facilitates working with existing cloudformation templates in the cdk",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk cloudformation cloudformation_include cdk cdk_core",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.cloudformation_include",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 190,
  "dependency_ids": [
    "pypi_aws_cdk.alexa_ask",
    "pypi_aws_cdk.aws_accessanalyzer",
    "pypi_aws_cdk.aws_acmpca",
    "pypi_aws_cdk.aws_amazonmq",
    "pypi_aws_cdk.aws_amplify",
    "pypi_aws_cdk.aws_amplifyuibuilder",
    "pypi_aws_cdk.aws_apigateway",
    "pypi_aws_cdk.aws_apigatewayv2",
    "pypi_aws_cdk.aws_appconfig",
    "pypi_aws_cdk.aws_appflow",
    "pypi_aws_cdk.aws_appintegrations",
    "pypi_aws_cdk.aws_applicationautoscaling",
    "pypi_aws_cdk.aws_applicationinsights",
    "pypi_aws_cdk.aws_appmesh",
    "pypi_aws_cdk.aws_apprunner",
    "pypi_aws_cdk.aws_appstream",
    "pypi_aws_cdk.aws_appsync",
    "pypi_aws_cdk.aws_aps",
    "pypi_aws_cdk.aws_athena",
    "pypi_aws_cdk.aws_auditmanager",
    "pypi_aws_cdk.aws_autoscaling",
    "pypi_aws_cdk.aws_autoscalingplans",
    "pypi_aws_cdk.aws_backup",
    "pypi_aws_cdk.aws_backupgateway",
    "pypi_aws_cdk.aws_batch",
    "pypi_aws_cdk.aws_billingconductor",
    "pypi_aws_cdk.aws_budgets",
    "pypi_aws_cdk.aws_cassandra",
    "pypi_aws_cdk.aws_ce",
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_chatbot",
    "pypi_aws_cdk.aws_cloud9",
    "pypi_aws_cdk.aws_cloudfront",
    "pypi_aws_cdk.aws_cloudtrail",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_codeartifact",
    "pypi_aws_cdk.aws_codebuild",
    "pypi_aws_cdk.aws_codecommit",
    "pypi_aws_cdk.aws_codedeploy",
    "pypi_aws_cdk.aws_codeguruprofiler",
    "pypi_aws_cdk.aws_codegurureviewer",
    "pypi_aws_cdk.aws_codepipeline",
    "pypi_aws_cdk.aws_codestar",
    "pypi_aws_cdk.aws_codestarconnections",
    "pypi_aws_cdk.aws_codestarnotifications",
    "pypi_aws_cdk.aws_cognito",
    "pypi_aws_cdk.aws_comprehend",
    "pypi_aws_cdk.aws_config",
    "pypi_aws_cdk.aws_connect",
    "pypi_aws_cdk.aws_connectcampaigns",
    "pypi_aws_cdk.aws_controltower",
    "pypi_aws_cdk.aws_cur",
    "pypi_aws_cdk.aws_customerprofiles",
    "pypi_aws_cdk.aws_databrew",
    "pypi_aws_cdk.aws_datapipeline",
    "pypi_aws_cdk.aws_datasync",
    "pypi_aws_cdk.aws_dax",
    "pypi_aws_cdk.aws_detective",
    "pypi_aws_cdk.aws_devopsguru",
    "pypi_aws_cdk.aws_directoryservice",
    "pypi_aws_cdk.aws_dlm",
    "pypi_aws_cdk.aws_dms",
    "pypi_aws_cdk.aws_docdb",
    "pypi_aws_cdk.aws_docdbelastic",
    "pypi_aws_cdk.aws_dynamodb",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecr",
    "pypi_aws_cdk.aws_ecs",
    "pypi_aws_cdk.aws_efs",
    "pypi_aws_cdk.aws_eks",
    "pypi_aws_cdk.aws_elasticache",
    "pypi_aws_cdk.aws_elasticbeanstalk",
    "pypi_aws_cdk.aws_elasticloadbalancing",
    "pypi_aws_cdk.aws_elasticloadbalancingv2",
    "pypi_aws_cdk.aws_elasticsearch",
    "pypi_aws_cdk.aws_emr",
    "pypi_aws_cdk.aws_emrcontainers",
    "pypi_aws_cdk.aws_emrserverless",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_eventschemas",
    "pypi_aws_cdk.aws_evidently",
    "pypi_aws_cdk.aws_finspace",
    "pypi_aws_cdk.aws_fis",
    "pypi_aws_cdk.aws_fms",
    "pypi_aws_cdk.aws_forecast",
    "pypi_aws_cdk.aws_frauddetector",
    "pypi_aws_cdk.aws_fsx",
    "pypi_aws_cdk.aws_gamelift",
    "pypi_aws_cdk.aws_globalaccelerator",
    "pypi_aws_cdk.aws_glue",
    "pypi_aws_cdk.aws_grafana",
    "pypi_aws_cdk.aws_greengrass",
    "pypi_aws_cdk.aws_greengrassv2",
    "pypi_aws_cdk.aws_groundstation",
    "pypi_aws_cdk.aws_guardduty",
    "pypi_aws_cdk.aws_healthlake",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_identitystore",
    "pypi_aws_cdk.aws_imagebuilder",
    "pypi_aws_cdk.aws_inspector",
    "pypi_aws_cdk.aws_inspectorv2",
    "pypi_aws_cdk.aws_internetmonitor",
    "pypi_aws_cdk.aws_iot",
    "pypi_aws_cdk.aws_iot1click",
    "pypi_aws_cdk.aws_iotanalytics",
    "pypi_aws_cdk.aws_iotcoredeviceadvisor",
    "pypi_aws_cdk.aws_iotevents",
    "pypi_aws_cdk.aws_iotfleethub",
    "pypi_aws_cdk.aws_iotfleetwise",
    "pypi_aws_cdk.aws_iotsitewise",
    "pypi_aws_cdk.aws_iotthingsgraph",
    "pypi_aws_cdk.aws_iottwinmaker",
    "pypi_aws_cdk.aws_iotwireless",
    "pypi_aws_cdk.aws_ivs",
    "pypi_aws_cdk.aws_ivschat",
    "pypi_aws_cdk.aws_kafkaconnect",
    "pypi_aws_cdk.aws_kendra",
    "pypi_aws_cdk.aws_kendraranking",
    "pypi_aws_cdk.aws_kinesis",
    "pypi_aws_cdk.aws_kinesisanalytics",
    "pypi_aws_cdk.aws_kinesisanalyticsv2",
    "pypi_aws_cdk.aws_kinesisfirehose",
    "pypi_aws_cdk.aws_kinesisvideo",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lakeformation",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_lex",
    "pypi_aws_cdk.aws_licensemanager",
    "pypi_aws_cdk.aws_lightsail",
    "pypi_aws_cdk.aws_location",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_lookoutequipment",
    "pypi_aws_cdk.aws_lookoutmetrics",
    "pypi_aws_cdk.aws_lookoutvision",
    "pypi_aws_cdk.aws_m2",
    "pypi_aws_cdk.aws_macie",
    "pypi_aws_cdk.aws_managedblockchain",
    "pypi_aws_cdk.aws_mediaconnect",
    "pypi_aws_cdk.aws_mediaconvert",
    "pypi_aws_cdk.aws_medialive",
    "pypi_aws_cdk.aws_mediapackage",
    "pypi_aws_cdk.aws_mediastore",
    "pypi_aws_cdk.aws_mediatailor",
    "pypi_aws_cdk.aws_memorydb",
    "pypi_aws_cdk.aws_msk",
    "pypi_aws_cdk.aws_mwaa",
    "pypi_aws_cdk.aws_neptune",
    "pypi_aws_cdk.aws_networkfirewall",
    "pypi_aws_cdk.aws_networkmanager",
    "pypi_aws_cdk.aws_nimblestudio",
    "pypi_aws_cdk.aws_oam",
    "pypi_aws_cdk.aws_omics",
    "pypi_aws_cdk.aws_opensearchserverless",
    "pypi_aws_cdk.aws_opensearchservice",
    "pypi_aws_cdk.aws_opsworks",
    "pypi_aws_cdk.aws_opsworkscm",
    "pypi_aws_cdk.aws_organizations",
    "pypi_aws_cdk.aws_osis",
    "pypi_aws_cdk.aws_panorama",
    "pypi_aws_cdk.aws_personalize",
    "pypi_aws_cdk.aws_pinpoint",
    "pypi_aws_cdk.aws_pinpointemail",
    "pypi_aws_cdk.aws_pipes",
    "pypi_aws_cdk.aws_proton",
    "pypi_aws_cdk.aws_qldb",
    "pypi_aws_cdk.aws_quicksight",
    "pypi_aws_cdk.aws_ram",
    "pypi_aws_cdk.aws_rds",
    "pypi_aws_cdk.aws_redshift",
    "pypi_aws_cdk.aws_redshiftserverless",
    "pypi_aws_cdk.aws_refactorspaces",
    "pypi_aws_cdk.aws_rekognition",
    "pypi_aws_cdk.aws_resiliencehub",
    "pypi_aws_cdk.aws_resourceexplorer2",
    "pypi_aws_cdk.aws_resourcegroups",
    "pypi_aws_cdk.aws_robomaker",
    "pypi_aws_cdk.aws_rolesanywhere",
    "pypi_aws_cdk.aws_route53",
    "pypi_aws_cdk.aws_route53recoverycontrol",
    "pypi_aws_cdk.aws_route53recoveryreadiness",
    "pypi_aws_cdk.aws_route53resolver",
    "pypi_aws_cdk.aws_rum",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_s3objectlambda",
    "pypi_aws_cdk.aws_s3outposts",
    "pypi_aws_cdk.aws_sagemaker",
    "pypi_aws_cdk.aws_sam",
    "pypi_aws_cdk.aws_scheduler",
    "pypi_aws_cdk.aws_sdb",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.aws_securityhub",
    "pypi_aws_cdk.aws_servicecatalog",
    "pypi_aws_cdk.aws_servicecatalogappregistry",
    "pypi_aws_cdk.aws_servicediscovery",
    "pypi_aws_cdk.aws_ses",
    "pypi_aws_cdk.aws_shield",
    "pypi_aws_cdk.aws_signer",
    "pypi_aws_cdk.aws_simspaceweaver",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.aws_ssm",
    "pypi_aws_cdk.aws_ssmcontacts",
    "pypi_aws_cdk.aws_ssmincidents",
    "pypi_aws_cdk.aws_sso",
    "pypi_aws_cdk.aws_stepfunctions",
    "pypi_aws_cdk.aws_supportapp",
    "pypi_aws_cdk.aws_synthetics",
    "pypi_aws_cdk.aws_systemsmanagersap",
    "pypi_aws_cdk.aws_timestream",
    "pypi_aws_cdk.aws_transfer",
    "pypi_aws_cdk.aws_voiceid",
    "pypi_aws_cdk.aws_vpclattice",
    "pypi_aws_cdk.aws_waf",
    "pypi_aws_cdk.aws_wafregional",
    "pypi_aws_cdk.aws_wafv2",
    "pypi_aws_cdk.aws_wisdom",
    "pypi_aws_cdk.aws_workspaces",
    "pypi_aws_cdk.aws_xray",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure schema registry client library for python\n\nazure schema registry is a schema repository service hosted by azure event hubs, providing schema storage, versioning,\nand management. the registry is leveraged by serializers to reduce payload size while describing payload structure with\nschema identifiers rather than full schemas.\n\n[source code][source_code] | [package (pypi)][pypi] | [api reference documentation][api_reference] | [samples][sr_samples] | [changelog][change_log]\n\n## _disclaimer_\n\n_azure sdk python packages support for python 2.7 has ended on 01 january 2022. for more information and questions, please refer to https://github.com/azure/azure-sdk-for-python/issues/20691_\n\n## getting started\n\n### install the package\n\ninstall the azure schema registry client library for python with [pip][pip]:\n\n```bash\npip install azure-schemaregistry\n```\n\n### prerequisites:\nto use this package, you must have:\n* azure subscription - [create a free account][azure_sub]\n* [azure schema registry][schemaregistry_service] - [here is the quickstart guide][quickstart_guide] to create a schema registry group using the azure portal.\n* python 3.7 or later - [install python][python]\n\n### authenticate the client\n\ninteraction with schema registry starts with an instance of schemaregistryclient class. the client constructor takes the fully qualified namespace and an azure active directory credential:\n\n* the fully qualified namespace of the schema registry instance should follow the format: `<yournamespace>.servicebus.windows.net`.\n\n* an aad credential that implements the [tokencredential][token_credential_interface] protocol should be passed to the constructor. there are implementations of the `tokencredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. to use the credential types provided by `azure-identity`, please install the azure identity client library for python with [pip][pip]:\n\n```bash\npip install azure-identity\n```\n\n* additionally, to use the async api,  you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):\n\n```bash\npip install aiohttp\n```\n\n**create client using the azure-identity library:**\n\n```python\nfrom azure.schemaregistry import schemaregistryclient\nfrom azure.identity import defaultazurecredential\n\ncredential = defaultazurecredential()\n# namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net/'\nfully_qualified_namespace = '<< fully qualified namespace of the schema registry >>'\nschema_registry_client = schemaregistryclient(fully_qualified_namespace, credential)\n```\n\n## key concepts\n\n- schema: schema is the organization or structure for data. more detailed information can be found [here][schemas].\n\n- schema group: a logical group of similar schemas based on business criteria, which can hold multiple versions of a schema. more detailed information can be found [here][schema_groups].\n\n- schemaregistryclient: `schemaregistryclient` provides the api for storing and retrieving schemas in schema registry.\n\n## examples\n\nthe following sections provide several code snippets covering some of the most common schema registry tasks, including:\n\n- [register a schema](#register-a-schema)\n- [get the schema by id](#get-the-schema-by-id)\n- [get the schema by version](#get-the-schema-by-version)\n- [get the id of a schema](#get-the-id-of-a-schema)\n\n### register a schema\n\nuse `schemaregistryclient.register_schema` method to register a schema.\n\n```python\nimport os\n\nfrom azure.identity import defaultazurecredential\nfrom azure.schemaregistry import schemaregistryclient\n\ntoken_credential = defaultazurecredential()\nfully_qualified_namespace = os.environ['schema_registry_fully_qualified_namespace']\ngroup_name = os.environ['schema_registry_group']\nname = \"your-schema-name\"\nformat = \"avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"user\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = schemaregistryclient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n### get the schema by id\n\nget the schema definition and its properties by schema id.\n\n```python\nimport os\n\nfrom azure.identity import defaultazurecredential\nfrom azure.schemaregistry import schemaregistryclient\n\ntoken_credential = defaultazurecredential()\nfully_qualified_namespace = os.environ['schema_registry_fully_qualified_namespace']\nschema_id = 'your-schema-id'\n\nschema_registry_client = schemaregistryclient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(schema_id)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n### get the schema by version\n\nget the schema definition and its properties by schema version.\n\n```python\nimport os\n\nfrom azure.identity import defaultazurecredential\nfrom azure.schemaregistry import schemaregistryclient\n\ntoken_credential = defaultazurecredential()\nfully_qualified_namespace = os.environ['schema_registry_fully_qualified_namespace']\ngroup_name = os.environ[\"schemaregistry_group\"]\nname = \"your-schema-name\"\nversion = int(\"<your schema version>\")\n\nschema_registry_client = schemaregistryclient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema = schema_registry_client.get_schema(group_name=group_name, name=name, version=version)\n    definition = schema.definition\n    properties = schema.properties\n```\n\n### get the id of a schema\n\nget the schema id of a schema by schema definition and its properties.\n\n```python\nimport os\n\nfrom azure.identity import defaultazurecredential\nfrom azure.schemaregistry import schemaregistryclient\n\ntoken_credential = defaultazurecredential()\nfully_qualified_namespace = os.environ['schema_registry_fully_qualified_namespace']\ngroup_name = os.environ['schema_registry_group']\nname = \"your-schema-name\"\nformat = \"avro\"\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"user\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\n\"\"\"\n\nschema_registry_client = schemaregistryclient(fully_qualified_namespace=fully_qualified_namespace, credential=token_credential)\nwith schema_registry_client:\n    schema_properties = schema_registry_client.register_schema(group_name, name, definition, format)\n    id = schema_properties.id\n```\n\n## troubleshooting\n\n### general\n\nschema registry clients raise exceptions defined in [azure core][azure_core].\n\n### logging\nthis library uses the standard\n[logging][python_logging] library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.schemaregistry import schemaregistryclient\nfrom azure.identity import defaultazurecredential\n\n# create a logger for the sdk\nlogger = logging.getlogger('azure.schemaregistry')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\ncredential = defaultazurecredential()\n# this client will log detailed information about its http sessions, at debug level\nschema_registry_client = schemaregistryclient(\"your_fully_qualified_namespace\", credential, logging_enable=true)\n```\n\nsimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```py\nschema_registry_client.get_schema(schema_id, logging_enable=true)\n```\n\n## next steps\n\n### more sample code\n\nplease take a look at the [samples][sr_samples] directory for detailed examples of how to use this library to register and retrieve schema to/from schema registry.\n\n## contributing\n\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a\ncontributor license agreement (cla) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. for details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide\na cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions\nprovided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/).\nfor more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- links -->\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-schemaregistry\n[python]: https://www.python.org/downloads/\n[azure_core]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md\n[azure_sub]: https://azure.microsoft.com/free/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sr_samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/samples\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-readme\n[source_code]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[change_log]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry/changelog.md\n[schemas]: https://docs.microsoft.com/azure/event-hubs/schema-registry-overview#schemas\n[schema_groups]: https://docs.microsoft.com/azure/event-hubs/schema-registry-overview#schema-groups\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[schemaregistry_avroserializer_pypi]: https://pypi.org/project/azure-schemaregistry-avroserializer/\n[token_credential_interface]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n[quickstart_guide]: https://docs.microsoft.com/azure/event-hubs/create-schema-registry\n\n# release history\n\n## 1.2.0 (2022-10-10)\n\nthis version and all future versions will require python 3.7+, python 3.6 is no longer supported.\n\n### features added\n\n- `group_name`, `name`, and `version` have been added as optional parameters to the `get_schema` method on the sync and async `schemaregistryclient`.\n- `version` has been added to `schemaproperties`.\n\n### other changes\n\n- updated azure-core minimum dependency to 1.24.0.\n- added distributed tracing support for sync and async `schemaregistryclient`.\n\n## 1.1.0 (2022-05-10)\n\nthis version and all future versions will require python 3.6+. python 2.7 is no longer supported.\n\n### features added\n\n- `group_name` and `name` have been added as instance variables to `schemaproperties`.\n\n### other changes\n\n- updated azure-core minimum dependency to 1.23.0.\n\n## 1.0.0 (2021-11-10)\n\n**note:** this is the first stable release of our efforts to create a user-friendly and pythonic client library for azure schema registry.\n\n### features added\n\n- `schemaregistryclient` is the top-level client class interacting with the azure schema registry service. it provides three methods:\n  - `register_schema`: store schema in the service by providing schema group name, schema name, schema definition, and schema format.\n  - `get_schema`: get schema definition and its properties by schema id.\n  - `get_schema_properties`: get schema properties by providing schema group name, schema name, schema definition, and schema format.\n- `schemaproperties` has the following instance variables: `id` and `format`:\n  - the type of `format` has been changed from `str` to `schemaformat`.\n- `schema` has the following properties: `properties` and `definition`.\n- `schemaformat` provides the schema format to be stored by the service. currently, the only supported format is `avro`.\n- `api_version` has been added as a keyword arg to the sync and async `schemaregistryclient` constructors.\n\n### breaking changes\n\n- `version` instance variable in `schemaproperties` has been removed.  \n- `schema_definition` instance variable in `schema` has been renamed `definition`.\n- `id` parameter in `get_schema` method on sync and async `schemaregistryclient` has been renamed `schema_id`.\n- `schema_definition` parameter in `register_schema` and `get_schema_properties` methods on sync and async `schemaregistryclient` has been renamed `definition`.\n- `serializer` namespace has been removed from `azure.schemaregistry`.\n\n## 1.0.0b3 (2021-10-05)\n\n### breaking changes\n\n- `get_schema_id` method on sync and async `schemaregistryclient` has been renamed `get_schema_properties`.\n- `schema_id` parameter in `get_schema` method on sync and async `schemaregistryclient` has been renamed `id`.\n- `register_schema` and `get_schema_properties` methods on sync and async `schemaregistryclient` now take in the following parameters in the given order:\n  - `group_name`, which has been renamed from `schema_group`\n  - `name`, which has been renamed from `schema_name`\n  - `schema_definition`, which has been renamed from `schema_content`\n  - `format`, which has been renamed from `serialization_type`\n- `endpoint` parameter in `schemaregistryclient` constructor has been renamed `fully_qualified_namespace`\n- `location` instance variable in `schemaproperties` has been removed.\n- `schema` and `schemaproperties` no longer have positional parameters, as they will not be constructed by the user.\n\n### other changes\n\n- updated azure-core dependency to 1.19.0.\n- removed caching support of registered schemas so requests are sent to the service to register schemas, get schema properties, and get schemas.\n\n## 1.0.0b2 (2021-08-17)\n\nthis version and all future versions will require python 2.7 or python 3.6+, python 3.5 is no longer supported.\n\n### features added\n\n- support caching of registered schemas and send requests to the service only if the cache does not have the looked-up schema/schema id.\n\n## 1.0.0b1 (2020-09-09)\n\nversion 1.0.0b1 is the first preview of our efforts to create a user-friendly and pythonic client library for azure schema registry.\n\n**new features**\n\n- `schemaregistryclient` is the top-level client class interacting with the azure schema registry service. it provides three methods:\n  - `register_schema`: store schema into the service.\n  - `get_schema`: get schema content and its properties by schema id.\n  - `get_schema_id`: get schema id and its properties by schema group, schema name, serialization type and schema content.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-schemaregistry",
  "package_url": "https://pypi.org/project/azure-schemaregistry/",
  "project_url": "https://pypi.org/project/azure-schemaregistry/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python"
  },
  "release_url": "https://pypi.org/project/azure-schemaregistry/1.2.0/",
  "requires_dist": [
    "msrest (>=0.6.21)",
    "azure-core (<2.0.0,>=1.24.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure schema registry client library for python",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_core _azure schema_registry_client pypi_azure_identity schema_registry_fully_qualified_namespace",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_schemaregistry",
  "homepage": "https://github.com/azure/azure-sdk-for-python",
  "release_count": 9,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_msrest"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# uuid6\nnew time-based uuid formats which are suited for use as a database key.\n\n[![ci](https://github.com/oittaa/uuid6-python/actions/workflows/main.yml/badge.svg)](https://github.com/oittaa/uuid6-python/actions/workflows/main.yml)\n[![codecov](https://codecov.io/gh/oittaa/uuid6-python/branch/main/graph/badge.svg?token=o59dz6uwqv)](https://codecov.io/gh/oittaa/uuid6-python)\n[![pypi status](https://badge.fury.io/py/uuid6.svg)](https://pypi.org/project/uuid6/)\n[![python versions supported](https://img.shields.io/pypi/pyversions/uuid6.svg?logo=python)](https://pypi.org/project/uuid6/)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nthis module extends immutable uuid objects (the uuid class) with the functions `uuid6()`, `uuid7()`, and `uuid8()` from [the ietf draft][draft repository].\n\n## install\n\n```shell\npip install uuid6\n```\n\n## usage\n\n```python\nimport uuid6\n\nmy_uuid = uuid6.uuid6()\nprint(my_uuid)\nassert my_uuid < uuid6.uuid6()\n\nmy_uuid = uuid6.uuid7()\nprint(my_uuid)\nassert my_uuid < uuid6.uuid7()\n\nmy_uuid = uuid6.uuid8()\nprint(my_uuid)\nassert my_uuid < uuid6.uuid8()\n\nimport uuid\n\nmy_uuid = uuid.uuid(hex=\"c232ab00-9414-11ec-b3c8-9e6bdeced846\")\nassert uuid6.uuid1_to_uuid6(my_uuid) == uuid.uuid(hex=\"1ec9414c-232a-6b00-b3c8-9e6bdeced846\")\n```\n\n## which uuid version should i use?\n\n> implementations should utilize uuid version 7 over uuid version 1 and 6 if possible.\n\nuuid version 7 features a time-ordered value field derived from the widely implemented and well known unix epoch timestamp source, the number of milliseconds since midnight 1 jan 1970 utc, leap seconds excluded. as well as improved entropy characteristics over versions 1 or 6.\n\nif your use case requires greater granularity than uuid version 7 can provide, you might consider uuid version 8. uuid version 8 doesn't provide as good entropy characteristics as uuid version 7, but it utilizes timestamp with nanosecond level of precision.\n\n## functions\n\n### uuid6.uuid1_to_uuid6(*uuid1*)\n\ngenerate a uuid version 6 object from a uuid version 1 object.\n\n### uuid6.uuid6(*node=none*, *clock_seq=none*)\n\ngenerate a uuid from a host id, sequence number, and the current time. if *node* is not given, a random 48-bit number is chosen. if *clock_seq* is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen.\n\n### uuid6.uuid7()\n\ngenerate a uuid from a random number, and the current time.\n\n### uuid6.uuid8()\n\ngenerate a uuid from a random number, and the current time.\n\n## uuid version 6\n\nuuid version 6 is a field-compatible version of uuidv1, reordered for improved db locality. it is expected that uuidv6 will primarily be used in contexts where there are existing v1 uuids. systems that do not involve legacy uuidv1 **should** use uuidv7 instead.\n\n### uuidv6 field and bit layout\n\n```\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                           time_high                           |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |           time_mid            |  ver  |       time_low        |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |var|         clock_seq         |             node              |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                              node                             |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n## uuid version 7\n\nuuid version 7 features a time-ordered value field derived from the widely implemented and well known unix epoch timestamp source, the number of milliseconds seconds since midnight 1 jan 1970 utc, leap seconds excluded. uuid version 7 also has improved entropy characteristics over versions 1 or 6.\n\n### uuidv7 field and bit layout\n\n```\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                           unix_ts_ms                          |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |          unix_ts_ms           |  ver  |       rand_a          |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |var|                        rand_b                             |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                            rand_b                             |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n## uuid version 8\n\nuuid version 8 provides an rfc-compatible format for experimental or vendor-specific use cases.\n\nthis implementation of `uuid8()` sacrifices some entropy for granularity compared to `uuid7()`, while being otherwise compatible.\n\n### uuidv8 field and bit layout\n\n```\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                           unix_ts_ms                          |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |          unix_ts_ms           |  ver  |      subsec_a         |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |var|   subsec_b    |         rand                              |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        |                             rand                              |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n- `unix_ts_ms`: 48 bit big-endian unsigned number of unix epoch timestamp with millisecond level of precision\n- `ver`: the 4 bit uuidv8 version (1000)\n- `subsec_a`: 12 bits allocated to sub-second precision values\n- `var`: 2 bit uuid variant (10)\n- `subsec_b`: 8 bits allocated to sub-second precision values\n- `rand`: the remaining 54 bits are filled with [cryptographically strong random data][python randbits]\n\n 20 extra bits dedicated to sub-second precision provide nanosecond resolution. the `unix_ts_ms`, `subsec_a`,  and `subsec_b` fields guarantee the order of uuids generated within the same nanosecond by monotonically incrementing the timer.\n\n## performance\n\nrun the shell script [bench.sh][bench] to test on your own machine.\n\n### results\n\nmacbook air 2020\n```\npython 3.10.4\nmean +- std dev: 870 ns +- 11 ns\nmean +- std dev: 1.17 us +- 0.01 us\nmean +- std dev: 2.18 us +- 0.02 us\nmean +- std dev: 1.60 us +- 0.02 us\nmean +- std dev: 1.78 us +- 0.02 us\n+-----------+--------+-----------------------+-----------------------+-----------------------+-----------------------+\n| benchmark | uuid1  | uuid4                 | uuid6                 | uuid7                 | uuid8                 |\n+===========+========+=======================+=======================+=======================+=======================+\n| timeit    | 870 ns | 1.17 us: 1.35x slower | 2.18 us: 2.51x slower | 1.60 us: 1.84x slower | 1.78 us: 2.04x slower |\n+-----------+--------+-----------------------+-----------------------+-----------------------+-----------------------+\n```\n\n[draft repository]: https://github.com/ietf-wg-uuidrev/rfc4122bis\n[python randbits]: https://docs.python.org/3/library/secrets.html#secrets.randbits\n[bench]: https://github.com/oittaa/uuid6-python/blob/main/bench.sh\n",
  "docs_url": null,
  "keywords": "uuid,uuid6,uuid7,uuid8,uuidv6,uuidv7,uuidv8",
  "license": "",
  "name": "uuid6",
  "package_url": "https://pypi.org/project/uuid6/",
  "project_url": "https://pypi.org/project/uuid6/",
  "project_urls": {
    "Homepage": "https://github.com/oittaa/uuid6-python"
  },
  "release_url": "https://pypi.org/project/uuid6/2023.5.2/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "new time-based uuid formats which are suited for use as a database key",
  "version": "2023.5.2",
  "releases": [],
  "developers": [
    "oittaa"
  ],
  "kwds": "uuid6 uuidv6 uuid uuids uuid4",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_uuid6",
  "homepage": "https://github.com/oittaa/uuid6-python",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3 :: only",
    "topic :: scientific/engineering"
  ],
  "description": "<a href=\"https://botorch.org\">\n  <img width=\"350\" src=\"https://botorch.org/img/botorch_logo_lockup.png\" alt=\"botorch logo\" />\n</a>\n\n<hr/>\n\n[![support ukraine](https://img.shields.io/badge/support-ukraine-ffd500?style=flat&labelcolor=005bbb)](https://opensource.fb.com/support-ukraine)\n[![lint](https://github.com/pytorch/botorch/workflows/lint/badge.svg)](https://github.com/pytorch/botorch/actions?query=workflow%3alint)\n[![test](https://github.com/pytorch/botorch/workflows/test/badge.svg)](https://github.com/pytorch/botorch/actions?query=workflow%3atest)\n[![docs](https://github.com/pytorch/botorch/workflows/docs/badge.svg)](https://github.com/pytorch/botorch/actions?query=workflow%3adocs)\n[![tutorials](https://github.com/pytorch/botorch/workflows/tutorials/badge.svg)](https://github.com/pytorch/botorch/actions?query=workflow%3atutorials)\n[![codecov](https://img.shields.io/codecov/c/github/pytorch/botorch.svg)](https://codecov.io/github/pytorch/botorch)\n\n[![conda](https://img.shields.io/conda/v/pytorch/botorch.svg)](https://anaconda.org/pytorch/botorch)\n[![pypi](https://img.shields.io/pypi/v/botorch.svg)](https://pypi.org/project/botorch)\n[![license](https://img.shields.io/badge/license-mit-green.svg)](license)\n\n\nbotorch is a library for bayesian optimization built on pytorch.\n\n*botorch is currently in beta and under active development!*\n\n\n#### why botorch ?\nbotorch\n* provides a modular and easily extensible interface for composing bayesian\n  optimization primitives, including probabilistic models, acquisition functions,\n  and optimizers.\n* harnesses the power of pytorch, including auto-differentiation, native support\n  for highly parallelized modern hardware (e.g. gpus) using device-agnostic code,\n  and a dynamic computation graph.\n* supports monte carlo-based acquisition functions via the\n  [reparameterization trick](https://arxiv.org/abs/1312.6114), which makes it\n  straightforward to implement new ideas without having to impose restrictive\n  assumptions about the underlying model.\n* enables seamless integration with deep and/or convolutional architectures in pytorch.\n* has first-class support for state-of-the art probabilistic models in\n  [gpytorch](http://www.gpytorch.ai/), including support for multi-task gaussian\n  processes (gps) deep kernel learning, deep gps, and approximate inference.\n\n\n#### target audience\n\nthe primary audience for hands-on use of botorch are researchers and\nsophisticated practitioners in bayesian optimization and ai.\nwe recommend using botorch as a low-level api for implementing new algorithms\nfor [ax](https://ax.dev). ax has been designed to be an easy-to-use platform\nfor end-users, which at the same time is flexible enough for bayesian\noptimization researchers to plug into for handling of feature transformations,\n(meta-)data management, storage, etc.\nwe recommend that end-users who are not actively doing research on bayesian\noptimization simply use ax.\n\n\n## installation\n\n**installation requirements**\n- python >= 3.9\n- pytorch >= 1.13.1\n- gpytorch == 1.11\n- linear_operator == 0.5.1\n- pyro-ppl >= 1.8.4\n- scipy\n- multiple-dispatch\n\n### prerequisite only for macos users with intel processors:\nbefore installing botorch, we recommend first manually installing pytorch, a required dependency of\nbotorch. installing it according to the [pytorch installation instructions](https://pytorch.org/get-started/locally/)\nensures that it is properly linked against mkl, a library that optimizes mathematical computation for intel processors.\nthis will result in up to an order-of-magnitude speed-up for bayesian optimization, as at the moment,\ninstalling pytorch from pip does not link against mkl.\n\nthe pytorch installation instructions currently recommend:\n1. install [anaconda](https://www.anaconda.com/distribution/#download-section). note that there are different installers for intel and m1 macs.\n2. install pytorch following the [pytorch installation instructions](https://pytorch.org/get-started/locally/).\ncurrently, this suggests running `conda install pytorch torchvision -c pytorch`.\n\nif you want to customize your installation, please follow the [pytorch installation instructions](https://pytorch.org/get-started/locally/) to build from source.\n\n### option 1: installing the latest release\n\nthe latest release of botorch is easily installed either via\n[anaconda](https://www.anaconda.com/distribution/#download-section) (recommended) or pip.\n\n**to install botorch from anaconda**, run\n```bash\nconda install botorch -c pytorch -c gpytorch -c conda-forge\n```\nthe above command installs botorch and any needed dependencies. ` -c pytorch -c gpytorch -c conda-forge` means that the most preferred source to install from is the pytorch channel, the next most preferred is the gpytorch channel,\nand the least preferred is conda-forge.\n\n**alternatively, to install with `pip`**, do\n```bash\npip install botorch\n```\n\n_note_: make sure the `pip` being used is actually the one from the newly created conda environment. if you're using a unix-based os, you can use `which pip` to check.\n\n### option 2: installing from latest main branch\n\nif you would like to try our bleeding edge features (and don't mind potentially\nrunning into the occasional bug here or there), you can install the latest\ndevelopment version directly from github. if you want to also install the\ncurrent `gpytorch` and `linear_operator` development versions, you will need\nto ensure that the `allow_latest_gpytorch_linop` environment variable is set:\n```bash\npip install --upgrade git+https://github.com/cornellius-gp/linear_operator.git\npip install --upgrade git+https://github.com/cornellius-gp/gpytorch.git\nexport allow_latest_gpytorch_linop=true\npip install --upgrade git+https://github.com/pytorch/botorch.git\n```\n\n### option 3: editable/dev install\n\nif you want to [contribute](contributing.md) to botorch, you will want to install editably so that you can change files and have the\nchanges reflected in your local install.\n\nif you want to install the current `gpytorch` and `linear_operator` development versions, as in option 2, do that\nbefore proceeding.\n\n#### option 3a: bare-bones editable install\n\n```bash\ngit clone https://github.com/pytorch/botorch.git\ncd botorch\npip install -e .\n```\n\n#### option 3b: editable install with development and tutorials dependencies\n\n```bash\ngit clone https://github.com/pytorch/botorch.git\ncd botorch\nexport allow_botorch_latest=true\npip install -e \".[dev, tutorials]\"\n```\n\n* `dev`: specifies tools necessary for development\n  (testing, linting, docs building; see [contributing](#contributing) below).\n* `tutorials`: also installs all packages necessary for running the tutorial notebooks.\n* you can also install either the dev or tutorials dependencies without installing both, e.g. by changing the last command to `pip install -e \".[dev]\"`.\n\n## getting started\n\nhere's a quick run down of the main components of a bayesian optimization loop.\nfor more details see our [documentation](https://botorch.org/docs/introduction) and the\n[tutorials](https://botorch.org/tutorials).\n\n1. fit a gaussian process model to data\n  ```python\n  import torch\n  from botorch.models import singletaskgp\n  from botorch.fit import fit_gpytorch_mll\n  from gpytorch.mlls import exactmarginalloglikelihood\n\n  # double precision is highly recommended for gps.\n  # see https://github.com/pytorch/botorch/discussions/1444\n  train_x = torch.rand(10, 2, dtype=torch.double)\n  y = 1 - (train_x - 0.5).norm(dim=-1, keepdim=true)  # explicit output dimension\n  y += 0.1 * torch.rand_like(y)\n  train_y = (y - y.mean()) / y.std()\n\n  gp = singletaskgp(train_x, train_y)\n  mll = exactmarginalloglikelihood(gp.likelihood, gp)\n  fit_gpytorch_mll(mll)\n  ```\n\n2. construct an acquisition function\n  ```python\n  from botorch.acquisition import upperconfidencebound\n\n  ucb = upperconfidencebound(gp, beta=0.1)\n  ```\n\n3. optimize the acquisition function\n  ```python\n  from botorch.optim import optimize_acqf\n\n  bounds = torch.stack([torch.zeros(2), torch.ones(2)])\n  candidate, acq_value = optimize_acqf(\n      ucb, bounds=bounds, q=1, num_restarts=5, raw_samples=20,\n  )\n  ```\n\n\n## citing botorch\n\nif you use botorch, please cite the following paper:\n> [m. balandat, b. karrer, d. r. jiang, s. daulton, b. letham, a. g. wilson, and e. bakshy. botorch: a framework for efficient monte-carlo bayesian optimization. advances in neural information processing systems 33, 2020.](https://arxiv.org/abs/1910.06403)\n\n```\n@inproceedings{balandat2020botorch,\n  title={{botorch: a framework for efficient monte-carlo bayesian optimization}},\n  author={balandat, maximilian and karrer, brian and jiang, daniel r. and daulton, samuel and letham, benjamin and wilson, andrew gordon and bakshy, eytan},\n  booktitle = {advances in neural information processing systems 33},\n  year={2020},\n  url = {http://arxiv.org/abs/1910.06403}\n}\n```\n\nsee [here](https://botorch.org/docs/papers) for an incomplete selection of peer-reviewed papers that build off of botorch.\n\n\n## contributing\nsee the [contributing](contributing.md) file for how to help out.\n\n\n## license\nbotorch is mit licensed, as found in the [license](license) file.\n",
  "docs_url": null,
  "keywords": "bayesian optimization,pytorch",
  "license": "mit",
  "name": "botorch",
  "package_url": "https://pypi.org/project/botorch/",
  "project_url": "https://pypi.org/project/botorch/",
  "project_urls": {
    "Documentation": "https://botorch.org",
    "Homepage": "https://botorch.org",
    "Source": "https://github.com/pytorch/botorch",
    "conda": "https://anaconda.org/pytorch/botorch"
  },
  "release_url": "https://pypi.org/project/botorch/0.9.5/",
  "requires_dist": [
    "multipledispatch",
    "scipy",
    "torch >=1.13.1",
    "pyro-ppl >=1.8.4",
    "gpytorch ==1.11",
    "linear-operator ==0.5.1",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "ufmt ; extra == 'dev'",
    "flake8-docstrings ; extra == 'dev'",
    "black ==22.3.0 ; extra == 'dev'",
    "usort ==1.0.2 ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "ax-platform ; extra == 'tutorials'",
    "cma ; extra == 'tutorials'",
    "jupyter ; extra == 'tutorials'",
    "kaleido ; extra == 'tutorials'",
    "matplotlib ; extra == 'tutorials'",
    "memory-profiler ; extra == 'tutorials'",
    "papermill ; extra == 'tutorials'",
    "pykeops ; extra == 'tutorials'",
    "torchvision ; extra == 'tutorials'"
  ],
  "requires_python": ">=3.9",
  "summary": "bayesian optimization in pytorch",
  "version": "0.9.5",
  "releases": [],
  "developers": [
    "meta_platforms"
  ],
  "kwds": "badge botorch_logo_lockup bayesian pytorch balandat2020botorch",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_botorch",
  "homepage": "https://botorch.org",
  "release_count": 41,
  "dependency_ids": [
    "pypi_ax_platform",
    "pypi_black",
    "pypi_cma",
    "pypi_flake8",
    "pypi_flake8_docstrings",
    "pypi_gpytorch",
    "pypi_jupyter",
    "pypi_kaleido",
    "pypi_linear_operator",
    "pypi_matplotlib",
    "pypi_memory_profiler",
    "pypi_multipledispatch",
    "pypi_papermill",
    "pypi_pykeops",
    "pypi_pyro_ppl",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_torch",
    "pypi_torchvision",
    "pypi_ufmt",
    "pypi_usort"
  ]
}
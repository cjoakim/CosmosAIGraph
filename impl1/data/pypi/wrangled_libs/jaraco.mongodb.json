{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/jaraco.mongodb.svg\n   :target: https://pypi.org/project/jaraco.mongodb\n\n.. image:: https://img.shields.io/pypi/pyversions/jaraco.mongodb.svg\n\n.. image:: https://github.com/project_path/workflows/tests/badge.svg\n   :target: https://github.com/project_path/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/jaracomongodb/badge/?version=latest\n   :target: https://jaracomongodb.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\nmigration manager\n=================\n\n``jaraco.mongodb.migration`` implements the migration manager as featured\nat the `mongoworld 2016 <https://www.mongodb.com/world16>`_ presentation\n`from the polls to the trolls\n<https://combinatronics.com/yougov/mongoworld-2016/merged/index.html#/>`_.\nuse it to load documents of various schema versions into a target version that\nyour application expects.\n\nsessions\n========\n\n``jaraco.mongodb.sessions`` implements a cherrypy sessions store backed by\nmongodb.\n\nby default, the session store will handle sessions with any objects that can\nbe inserted into a mongodb collection naturally.\n\nto support richer objects, one may configure the codec to use ``jaraco.modb``.\n\nfields\n======\n\n``jaraco.mongodb.fields`` provides two functions, encode and decode, which\ntake arbitrary unicode text and transform it into values suitable as keys\non older versions of mongodb by backslash-escaping the values.\n\nmonitor-index-creation\n======================\n\nto monitor an ongoing index operation in a server, simply invoke:\n\n    python -m jaraco.mongodb.monitor-index-creation mongodb://host/db\n\nmove-gridfs\n===========\n\nto move files from one gridfs collection to another, invoke:\n\n    python -m jaraco.mongodb.move-gridfs --help\n\nand follow the usage for moving all or some gridfs files and\noptionally deleting the files after.\n\noplog\n=====\n\nthis package provides an ``oplog`` module, which is based on the\n`mongooplog-alt <https://github.com/asivokon/mongooplog-alt/>`_ project,\nwhich itself is a python remake of `official mongooplog utility\n<https://docs.mongodb.com/manual/reference/program/mongooplog/>`_,\nshipped with mongodb starting from version 2.2 and deprecated in 3.2.\nit reads oplog of a remote\nserver, and applies operations to the local server. this can be used to keep\nindepended replica set loosly synced in much the same way as replica sets\nare synced, and may\nbe useful in various backup and migration scenarios.\n\n``oplog`` implements basic functionality of the official utility and\nadds following features:\n\n* tailable oplog reader: runs forever polling new oplog event which is extremly\n  useful for keeping two independent replica sets in almost real-time sync.\n\n* option to sync only selected databases/collections.\n\n* option to exclude one or more namespaces (i.e. dbs or collections) from\n  being synced.\n\n* ability to \"rename\" dbs/collections on fly, i.e. destination namespaces can\n  differ from the original ones. this feature works on mongodb 1.8 and later.\n  official utility only supports version 2.2.x and higher.\n\n* save last processed timestamp to file, resume from saved point later.\n\n\ninvoke the command as a module script: ``python -m jaraco.mongodb.oplog``.\n\ncommand-line options\n--------------------\n\nusage is as follows::\n\n    $ python -m jaraco.mongodb.oplog  --help\n    usage: oplog.py [--help] [--source host[:port]] [--oplogns oplogns]\n                    [--dest host[:port]] [-w window] [-f] [--ns [ns [ns ...]]]\n                    [-x [exclude [exclude ...]]]\n                    [--rename [ns_old=ns_new [ns_old=ns_new ...]]] [--dry-run]\n                    [--resume-file filename] [-s seconds] [-l log_level]\n\n    optional arguments:\n      --help                show usage information\n      --source host[:port]  hostname of the mongod server from which oplog\n                            operations are going to be pulled. called \"--from\" in\n                            mongooplog.\n      --oplogns oplogns     source namespace for oplog\n      --dest host[:port]    hostname of the mongod server (or replica set as <set\n                            name>/s1,s2) to which oplog operations are going to be\n                            applied. default is \"localhost\". called \"--host\" in\n                            mongooplog.\n      -w window, --window window\n                            time window to query, like \"3 days\" or \"24:00\" (24\n                            hours, 0 minutes).\n      -f, --follow          wait for new data in oplog. makes the utility polling\n                            oplog forever (until interrupted). new data is going\n                            to be applied immediately with at most one second\n                            delay.\n      --ns [ns [ns ...]]    process only these namespaces, ignoring all others.\n                            space separated list of strings in form of ``dname``\n                            or ``dbname.collection``. may be specified multiple\n                            times.\n      -x [exclude [exclude ...]], --exclude [exclude [exclude ...]]\n                            list of space separated namespaces which should be\n                            ignored. can be in form of ``dname`` or\n                            ``dbname.collection``. may be specified multiple\n                            times.\n      --rename [ns_old=ns_new [ns_old=ns_new ...]]\n                            rename database(s) and/or collection(s). operations on\n                            namespace ``ns_old`` from the source server will be\n                            applied to namespace ``ns_new`` on the destination\n                            server. may be specified multiple times.\n      --dry-run             suppress application of ops.\n      --resume-file filename\n                            read from and write to this file the last processed\n                            timestamp.\n      -l log_level, --log-level log_level\n                            set log level (debug, info, warning, error)\n\nexample usages\n--------------\n\nconsider the following sample usage::\n\n    python -m jaraco.mongodb.oplog --source prod.example.com:28000 --dest dev.example.com:28500 -f --exclude logdb data.transactions --seconds 600\n\nthis command is going to take operations from the last 10 minutes from prod,\nand apply them to dev. database ``logdb`` and collection ``transactions`` of\n``data`` database will be omitted. after operations for the last minutes will\nbe applied, command will wait for new changes to come, keep running until\nctrl+c or other termination signal recieved.\n\nthe tool provides a ``--dry-run`` option and when logging at the debug level will\nemit the oplog entries. combine these to use the tool as an oplog cat tool::\n\n    $ python -m jaraco.mongodb.oplog --dry-run -s 0 -f --source prod.example.com --ns survey_tabs -l debug\n\n\ntesting\n-------\n\ntests for ``oplog`` are written in javascript using test harness\nwhich is used for testing mongodb iteself. you can run the oplog suite with::\n\n    mongo tests/oplog.js\n\ntests produce alot of output. succesful execution ends with line like this::\n\n    replsettest stopset *** shut down repl set - test worked ****\n\nthese tests are run as part of the continuous integration and release acceptance\ntests in travis.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "jaraco.mongodb",
  "package_url": "https://pypi.org/project/jaraco.mongodb/",
  "project_url": "https://pypi.org/project/jaraco.mongodb/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/jaraco.mongodb"
  },
  "release_url": "https://pypi.org/project/jaraco.mongodb/12.0.0/",
  "requires_dist": [
    "pymongo >=3.5",
    "python-dateutil",
    "jaraco.services >=2",
    "portend",
    "jaraco.itertools >=2",
    "jaraco.functools >=2",
    "jaraco.ui >=2",
    "jaraco.context >=2",
    "more-itertools",
    "jaraco.logging >=2",
    "tempora",
    "pytimeparse",
    "jaraco.collections >=2",
    "autocommand",
    "cachetools",
    "importlib-metadata ; python_version < \"3.8\"",
    "sphinx >=3.5 ; extra == 'docs'",
    "sphinx <7.2.5 ; extra == 'docs'",
    "jaraco.packaging >=9.3 ; extra == 'docs'",
    "rst.linker >=1.9 ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "cherrypy ; extra == 'docs'",
    "pytest >=6 ; extra == 'testing'",
    "pytest-checkdocs >=2.4 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler >=2.2 ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "cherrypy ; extra == 'testing'",
    "types-python-dateutil ; extra == 'testing'",
    "types-cachetools ; extra == 'testing'",
    "pytest-black >=0.3.7 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy >=0.9.1 ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "routines and classes supporting mongodb environments",
  "version": "12.0.0",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason_r"
  ],
  "kwds": "badge mongoworld mongod image ruff",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jaraco.mongodb",
  "homepage": "https://github.com/jaraco/jaraco.mongodb",
  "release_count": 107,
  "dependency_ids": [
    "pypi_autocommand",
    "pypi_cachetools",
    "pypi_cherrypy",
    "pypi_furo",
    "pypi_importlib_metadata",
    "pypi_jaraco.collections",
    "pypi_jaraco.context",
    "pypi_jaraco.functools",
    "pypi_jaraco.itertools",
    "pypi_jaraco.logging",
    "pypi_jaraco.packaging",
    "pypi_jaraco.services",
    "pypi_jaraco.ui",
    "pypi_more_itertools",
    "pypi_portend",
    "pypi_pymongo",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_python_dateutil",
    "pypi_pytimeparse",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint",
    "pypi_tempora",
    "pypi_types_cachetools",
    "pypi_types_python_dateutil"
  ]
}
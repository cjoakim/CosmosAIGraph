{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<p align=\"center\">\n    <img src=\"readme_logo.png\" />\n</p>\n\n# optimum intel\n\n\ud83e\udd17 optimum intel is the interface between the \ud83e\udd17 transformers and diffusers libraries and the different tools and libraries provided by intel to accelerate end-to-end pipelines on intel architectures.\n\nintel [neural compressor](https://www.intel.com/content/www/us/en/developer/tools/oneapi/neural-compressor.html) is an open-source library enabling the usage of the most popular compression techniques such as quantization, pruning and knowledge distillation. it supports automatic accuracy-driven tuning strategies in order for users to easily generate quantized model. the users can easily apply static, dynamic and aware-training quantization approaches while giving an expected accuracy criteria. it also supports different weight pruning techniques enabling the creation of pruned model giving a predefined sparsity target.\n\n[openvino](https://docs.openvino.ai/latest/index.html) is an open-source toolkit that enables high performance inference capabilities for intel cpus, gpus, and special dl inference accelerators ([see](https://docs.openvino.ai/latest/openvino_docs_ov_ug_supported_plugins_supported_devices.html) the full list of supported devices). it is supplied with a set of tools to optimize your models with compression techniques such as quantization, pruning and knowledge distillation. optimum intel provides a simple interface to optimize your transformers and diffusers models, convert them to the openvino intermediate representation (ir) format and run inference using openvino runtime.\n\n\n## installation\n\nto install the latest release of \ud83e\udd17 optimum intel with the corresponding required dependencies, you can use `pip` as follows:\n\n| accelerator                                                                                                      | installation                                                         |\n|:-----------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------|\n| [intel neural compressor](https://www.intel.com/content/www/us/en/developer/tools/oneapi/neural-compressor.html) | `pip install --upgrade-strategy eager \"optimum[neural-compressor]\"`  |\n| [openvino](https://docs.openvino.ai/latest/index.html)                                                           | `pip install --upgrade-strategy eager \"optimum[openvino,nncf]\"`      |\n\nthe `--upgrade-strategy eager` option is needed to ensure `optimum-intel` is upgraded to the latest version.\n\nwe recommend creating a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment) and upgrading\npip with `python -m pip install --upgrade pip`.\n\noptimum intel is a fast-moving project, and you may want to install from source with the following command:\n\n```bash\npython -m pip install git+https://github.com/huggingface/optimum-intel.git\n```\n\nor to install from source including dependencies:\n\n```bash\npython -m pip install \"optimum-intel[extras]\"@git+https://github.com/huggingface/optimum-intel.git\n```\n\nwhere `extras` can be one or more of `neural-compressor`, `openvino`, `nncf`.\n\n# quick tour\n\n## neural compressor\n\ndynamic quantization can be used through the optimum command-line interface:\n\n```bash\noptimum-cli inc quantize --model distilbert-base-cased-distilled-squad --output ./quantized_distilbert\n```\nnote that quantization is currently only supported for cpus (only cpu backends are available), so we will not be utilizing gpus / cuda in this example.\n\nto load a quantized model hosted locally or on the \ud83e\udd17 hub, you can do as follows :\n```python\nfrom optimum.intel import incmodelforsequenceclassification\n\nmodel_id = \"intel/distilbert-base-uncased-finetuned-sst-2-english-int8-dynamic\"\nmodel = incmodelforsequenceclassification.from_pretrained(model_id)\n```\n\nyou can load many more quantized models hosted on the hub under the intel organization [`here`](https://huggingface.co/intel).\n\nfor more details on the supported compression techniques, please refer to the [documentation](https://huggingface.co/docs/optimum/main/en/intel/optimization_inc).\n\n\n## openvino\n\nbelow are the examples of how to use openvino and its [nncf](https://docs.openvino.ai/latest/tmo_introduction.html) framework to accelerate inference.\n\n#### export:\n\nit is possible to export your model to the [openvino](https://docs.openvino.ai/2023.1/openvino_ir.html) ir format with the cli :\n\n```plain\noptimum-cli export openvino --model gpt2 ov_model\n```\n\nif you add `--int8`, the model linear and embedding weights will be quantized to int8, the activations will be kept in floating point precision.\n\n```plain\noptimum-cli export openvino --model gpt2 --int8 ov_model\n```\n\nto apply quantization on both weights and activations, you can find more information in the [documentation](https://huggingface.co/docs/optimum/main/en/intel/optimization_ov).\n\n#### inference:\n\nto load a model and run inference with openvino runtime, you can just replace your `automodelforxxx` class with the corresponding `ovmodelforxxx` class.\n\n\n```diff\n- from transformers import automodelforseq2seqlm\n+ from optimum.intel import ovmodelforseq2seqlm\n  from transformers import autotokenizer, pipeline\n\n  model_id = \"echarlaix/t5-small-openvino\"\n- model = automodelforseq2seqlm.from_pretrained(model_id)\n+ model = ovmodelforseq2seqlm.from_pretrained(model_id)\n  tokenizer = autotokenizer.from_pretrained(model_id)\n  pipe = pipeline(\"translation_en_to_fr\", model=model, tokenizer=tokenizer)\n  results = pipe(\"he never went out without a book under his arm, and he often came back with two.\")\n\n  [{'translation_text': \"il n'est jamais sorti sans un livre sous son bras, et il est souvent revenu avec deux.\"}]\n```\n\nif you want to load a pytorch checkpoint, set `export=true` to convert your model to the openvino ir.\n\n```python\nfrom optimum.intel import ovmodelforcausallm\n\nmodel = ovmodelforcausallm.from_pretrained(\"gpt2\", export=true)\nmodel.save_pretrained(\"./ov_model\")\n```\n\n\n#### post-training static quantization:\n\npost-training static quantization introduces an additional calibration step where data is fed through the network in order to compute the activations quantization parameters. here is an example on how to apply static quantization on a fine-tuned distilbert.\n\n```python\nfrom functools import partial\nfrom optimum.intel import ovquantizer, ovmodelforsequenceclassification\nfrom transformers import autotokenizer, automodelforsequenceclassification\n\nmodel_id = \"distilbert-base-uncased-finetuned-sst-2-english\"\nmodel = automodelforsequenceclassification.from_pretrained(model_id)\ntokenizer = autotokenizer.from_pretrained(model_id)\ndef preprocess_fn(examples, tokenizer):\n    return tokenizer(\n        examples[\"sentence\"], padding=true, truncation=true, max_length=128\n    )\n\nquantizer = ovquantizer.from_pretrained(model)\ncalibration_dataset = quantizer.get_calibration_dataset(\n    \"glue\",\n    dataset_config_name=\"sst2\",\n    preprocess_function=partial(preprocess_fn, tokenizer=tokenizer),\n    num_samples=100,\n    dataset_split=\"train\",\n    preprocess_batch=true,\n)\n# the directory where the quantized model will be saved\nsave_dir = \"nncf_results\"\n# apply static quantization and save the resulting model in the openvino ir format\nquantizer.quantize(calibration_dataset=calibration_dataset, save_directory=save_dir)\n# load the quantized model\noptimized_model = ovmodelforsequenceclassification.from_pretrained(save_dir)\n```\n\n#### quantization-aware training:\n\nquantization aware training (qat) is applied in order to simulate the effects of quantization during training, to alleviate its effects on the model\u2019s accuracy. here is an example on how to fine-tune a distilbert model on the sst-2 task while applying quantization aware training (qat).\n\n```diff\n  import evaluate\n  import numpy as np\n  from datasets import load_dataset\n  from transformers import automodelforsequenceclassification, autotokenizer, trainingarguments, default_data_collator\n- from transformers import trainer\n+ from optimum.intel import ovconfig, ovmodelforsequenceclassification, ovtrainer\n\n  model_id = \"distilbert-base-uncased-finetuned-sst-2-english\"\n  model = automodelforsequenceclassification.from_pretrained(model_id)\n  tokenizer = autotokenizer.from_pretrained(model_id)\n  dataset = load_dataset(\"glue\", \"sst2\")\n  dataset = dataset.map(\n      lambda examples: tokenizer(examples[\"sentence\"], padding=true, truncation=true, max_length=128), batched=true\n  )\n  metric = evaluate.load(\"glue\", \"sst2\")\n  compute_metrics = lambda p: metric.compute(\n      predictions=np.argmax(p.predictions, axis=1), references=p.label_ids\n  )\n\n  # the directory where the quantized model will be saved\n  save_dir = \"nncf_results\"\n\n  # load the default quantization configuration detailing the quantization we wish to apply\n+ ov_config = ovconfig()\n\n- trainer = trainer(\n+ trainer = ovtrainer(\n      model=model,\n      args=trainingarguments(save_dir, num_train_epochs=1.0, do_train=true, do_eval=true),\n      train_dataset=dataset[\"train\"].select(range(300)),\n      eval_dataset=dataset[\"validation\"],\n      compute_metrics=compute_metrics,\n      tokenizer=tokenizer,\n      data_collator=default_data_collator,\n+     ov_config=ov_config,\n+     task=\"text-classification\",\n  )\n  train_result = trainer.train()\n  metrics = trainer.evaluate()\n  trainer.save_model()\n\n+ optimized_model = ovmodelforsequenceclassification.from_pretrained(save_dir)\n```\n\nyou can find more examples in the [documentation](https://huggingface.co/docs/optimum/intel/index).\n\n\n## running the examples\n\ncheck out the [`examples`](https://github.com/huggingface/optimum-intel/tree/main/examples) directory to see how \ud83e\udd17 optimum intel can be used to optimize models and accelerate inference.\n\ndo not forget to install requirements for every example:\n\n```\ncd <example-folder>\npip install -r requirements.txt\n```\n",
  "docs_url": null,
  "keywords": "transformers,quantization,pruning,knowledge distillation,optimization,training",
  "license": "apache",
  "name": "optimum-intel",
  "package_url": "https://pypi.org/project/optimum-intel/",
  "project_url": "https://pypi.org/project/optimum-intel/",
  "project_urls": {
    "Homepage": "https://www.intel.com"
  },
  "release_url": "https://pypi.org/project/optimum-intel/1.12.2/",
  "requires_dist": [
    "optimum (>=1.14.0)",
    "transformers (>=4.20.0)",
    "datasets (>=1.4.0)",
    "sentencepiece",
    "scipy",
    "accelerate",
    "diffusers ; extra == 'diffusers'",
    "transformers (<4.32.0) ; extra == 'ipex'",
    "intel-extension-for-pytorch ; extra == 'ipex'",
    "onnx ; extra == 'ipex'",
    "neural-compressor (>=2.2.0) ; extra == 'neural-compressor'",
    "onnx ; extra == 'neural-compressor'",
    "onnxruntime (<1.15.0) ; extra == 'neural-compressor'",
    "transformers (>=4.33.0) ; extra == 'neural-compressor'",
    "nncf (>=2.6.0) ; extra == 'nncf'",
    "openvino (>=2023.1.0) ; extra == 'openvino'",
    "onnx ; extra == 'openvino'",
    "onnxruntime ; extra == 'openvino'",
    "transformers (>=4.33.0) ; extra == 'openvino'",
    "black (~=23.1) ; extra == 'quality'",
    "ruff (>=0.0.241) ; extra == 'quality'",
    "pytest ; extra == 'tests'",
    "parameterized ; extra == 'tests'",
    "Pillow ; extra == 'tests'",
    "evaluate ; extra == 'tests'",
    "diffusers ; extra == 'tests'",
    "py-cpuinfo ; extra == 'tests'",
    "sacremoses ; extra == 'tests'",
    "torchaudio ; extra == 'tests'",
    "rjieba ; extra == 'tests'",
    "timm ; extra == 'tests'",
    "invisible-watermark (>=0.2.0) ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "optimum library is an extension of the hugging face transformers library, providing a framework to integrate third-party libraries from hardware partners and interface with their specific functionality.",
  "version": "1.12.2",
  "releases": [],
  "developers": [
    "hardware@huggingface.co",
    "huggingface_inc"
  ],
  "kwds": "compressor compression pruning quantizer optimize",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_optimum_intel",
  "homepage": "https://www.intel.com",
  "release_count": 33,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_black",
    "pypi_datasets",
    "pypi_diffusers",
    "pypi_evaluate",
    "pypi_intel_extension_for_pytorch",
    "pypi_invisible_watermark",
    "pypi_neural_compressor",
    "pypi_nncf",
    "pypi_onnx",
    "pypi_onnxruntime",
    "pypi_openvino",
    "pypi_optimum",
    "pypi_parameterized",
    "pypi_pillow",
    "pypi_py_cpuinfo",
    "pypi_pytest",
    "pypi_rjieba",
    "pypi_ruff",
    "pypi_sacremoses",
    "pypi_scipy",
    "pypi_sentencepiece",
    "pypi_timm",
    "pypi_torchaudio",
    "pypi_transformers"
  ]
}
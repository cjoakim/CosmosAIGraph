{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: win32 (ms windows)",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: windows :: windows 10",
    "operating system :: microsoft :: windows :: windows 7",
    "operating system :: microsoft :: windows :: windows 8",
    "operating system :: microsoft :: windows :: windows 8.1",
    "operating system :: microsoft :: windows :: windows server 2003",
    "operating system :: microsoft :: windows :: windows server 2008",
    "operating system :: microsoft :: windows :: windows vista",
    "operating system :: os independent",
    "operating system :: posix",
    "operating system :: posix :: aix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: bsd :: netbsd",
    "operating system :: posix :: bsd :: openbsd",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: benchmark",
    "topic :: system :: hardware",
    "topic :: system :: hardware :: hardware drivers",
    "topic :: system :: monitoring",
    "topic :: system :: networking",
    "topic :: system :: networking :: monitoring",
    "topic :: system :: networking :: monitoring :: hardware watchdog",
    "topic :: system :: operating system",
    "topic :: system :: systems administration",
    "topic :: utilities"
  ],
  "description": "|  |downloads| |stars| |forks| |contributors| |coverage|\n|  |version| |py-versions| |packages| |license|\n|  |github-actions-wheels|  |github-actions-bsd| |appveyor| |doc| |twitter| |tidelift|\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/psutil.svg\n    :target: https://pepy.tech/project/psutil\n    :alt: downloads\n\n.. |stars| image:: https://img.shields.io/github/stars/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/stargazers\n    :alt: github stars\n\n.. |forks| image:: https://img.shields.io/github/forks/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/network/members\n    :alt: github forks\n\n.. |contributors| image:: https://img.shields.io/github/contributors/giampaolo/psutil.svg\n    :target: https://github.com/giampaolo/psutil/graphs/contributors\n    :alt: contributors\n\n.. |github-actions-wheels| image:: https://img.shields.io/github/actions/workflow/status/giampaolo/psutil/.github/workflows/build.yml?label=linux%2c%20macos%2c%20windows\n    :target: https://github.com/giampaolo/psutil/actions?query=workflow%3abuild\n    :alt: linux, macos, windows\n\n.. |github-actions-bsd| image:: https://img.shields.io/github/actions/workflow/status/giampaolo/psutil/.github/workflows/bsd.yml?label=freebsd,%20netbsd,%20openbsd\n    :target: https://github.com/giampaolo/psutil/actions?query=workflow%3absd-tests\n    :alt: freebsd, netbsd, openbsd\n\n.. |appveyor| image:: https://img.shields.io/appveyor/build/giampaolo/psutil/master.svg?maxage=3600&label=windows%20(py2)\n    :target: https://ci.appveyor.com/project/giampaolo/psutil\n    :alt: windows (appveyor)\n\n.. |coverage| image:: https://coveralls.io/repos/github/giampaolo/psutil/badge.svg?branch=master\n    :target: https://coveralls.io/github/giampaolo/psutil?branch=master\n    :alt: test coverage (coverall.io)\n\n.. |doc| image:: https://readthedocs.org/projects/psutil/badge/?version=latest\n    :target: https://psutil.readthedocs.io/en/latest/\n    :alt: documentation status\n\n.. |version| image:: https://img.shields.io/pypi/v/psutil.svg?label=pypi\n    :target: https://pypi.org/project/psutil\n    :alt: latest version\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/psutil.svg\n    :alt: supported python versions\n\n.. |packages| image:: https://repology.org/badge/tiny-repos/python:psutil.svg\n    :target: https://repology.org/metapackage/python:psutil/versions\n    :alt: binary packages\n\n.. |license| image:: https://img.shields.io/pypi/l/psutil.svg\n    :target: https://github.com/giampaolo/psutil/blob/master/license\n    :alt: license\n\n.. |twitter| image:: https://img.shields.io/twitter/follow/grodola.svg?label=follow&style=flat&logo=twitter&logocolor=4fadff\n    :target: https://twitter.com/grodola\n    :alt: twitter follow\n\n.. |tidelift| image:: https://tidelift.com/badges/github/giampaolo/psutil?style=flat\n    :target: https://tidelift.com/subscription/pkg/pypi-psutil?utm_source=pypi-psutil&utm_medium=referral&utm_campaign=readme\n    :alt: tidelift\n\n-----\n\nquick links\n===========\n\n- `home page <https://github.com/giampaolo/psutil>`_\n- `install <https://github.com/giampaolo/psutil/blob/master/install.rst>`_\n- `documentation <http://psutil.readthedocs.io>`_\n- `download <https://pypi.org/project/psutil/#files>`_\n- `forum <http://groups.google.com/group/psutil/topics>`_\n- `stackoverflow <https://stackoverflow.com/questions/tagged/psutil>`_\n- `blog <https://gmpy.dev/tags/psutil>`_\n- `what's new <https://github.com/giampaolo/psutil/blob/master/history.rst>`_\n\n\nsummary\n=======\n\npsutil (process and system utilities) is a cross-platform library for\nretrieving information on **running processes** and **system utilization**\n(cpu, memory, disks, network, sensors) in python.\nit is useful mainly for **system monitoring**, **profiling and limiting process\nresources** and **management of running processes**.\nit implements many functionalities offered by classic unix command line tools\nsuch as *ps, top, iotop, lsof, netstat, ifconfig, free* and others.\npsutil currently supports the following platforms:\n\n- **linux**\n- **windows**\n- **macos**\n- **freebsd, openbsd**, **netbsd**\n- **sun solaris**\n- **aix**\n\nsupported python versions are **2.7**, **3.6+** and\n`pypy <http://pypy.org/>`__.\n\nfunding\n=======\n\nwhile psutil is free software and will always be, the project would benefit\nimmensely from some funding.\nkeeping up with bug reports and maintenance has become hardly sustainable for\nme alone in terms of time.\nif you're a company that's making significant use of psutil you can consider\nbecoming a sponsor via `github sponsors <https://github.com/sponsors/giampaolo>`__,\n`open collective <https://opencollective.com/psutil>`__ or\n`paypal <https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=a9zs7pkkrm3s8>`__\nand have your logo displayed in here and psutil `doc <https://psutil.readthedocs.io>`__.\n\nsponsors\n========\n\n.. image:: https://github.com/giampaolo/psutil/raw/master/docs/_static/tidelift-logo.png\n  :width: 200\n  :alt: alternative text\n\n`add your logo <https://github.com/sponsors/giampaolo>`__.\n\nexample usages\n==============\n\nthis represents pretty much the whole psutil api.\n\ncpu\n---\n\n.. code-block:: python\n\n    >>> import psutil\n    >>>\n    >>> psutil.cpu_times()\n    scputimes(user=3961.46, nice=169.729, system=2150.659, idle=16900.540, iowait=629.59, irq=0.0, softirq=19.42, steal=0.0, guest=0, guest_nice=0.0)\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_percent(interval=1)\n    ...\n    4.0\n    5.9\n    3.8\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_percent(interval=1, percpu=true)\n    ...\n    [4.0, 6.9, 3.7, 9.2]\n    [7.0, 8.5, 2.4, 2.1]\n    [1.2, 9.0, 9.9, 7.2]\n    >>>\n    >>> for x in range(3):\n    ...     psutil.cpu_times_percent(interval=1, percpu=false)\n    ...\n    scputimes(user=1.5, nice=0.0, system=0.5, idle=96.5, iowait=1.5, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    scputimes(user=1.0, nice=0.0, system=0.0, idle=99.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    scputimes(user=2.0, nice=0.0, system=0.0, idle=98.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)\n    >>>\n    >>> psutil.cpu_count()\n    4\n    >>> psutil.cpu_count(logical=false)\n    2\n    >>>\n    >>> psutil.cpu_stats()\n    scpustats(ctx_switches=20455687, interrupts=6598984, soft_interrupts=2134212, syscalls=0)\n    >>>\n    >>> psutil.cpu_freq()\n    scpufreq(current=931.42925, min=800.0, max=3500.0)\n    >>>\n    >>> psutil.getloadavg()  # also on windows (emulated)\n    (3.14, 3.89, 4.67)\n\nmemory\n------\n\n.. code-block:: python\n\n    >>> psutil.virtual_memory()\n    svmem(total=10367352832, available=6472179712, percent=37.6, used=8186245120, free=2181107712, active=4748992512, inactive=2758115328, buffers=790724608, cached=3500347392, shared=787554304)\n    >>> psutil.swap_memory()\n    sswap(total=2097147904, used=296128512, free=1801019392, percent=14.1, sin=304193536, sout=677842944)\n    >>>\n\ndisks\n-----\n\n.. code-block:: python\n\n    >>> psutil.disk_partitions()\n    [sdiskpart(device='/dev/sda1', mountpoint='/', fstype='ext4', opts='rw,nosuid', maxfile=255, maxpath=4096),\n     sdiskpart(device='/dev/sda2', mountpoint='/home', fstype='ext', opts='rw', maxfile=255, maxpath=4096)]\n    >>>\n    >>> psutil.disk_usage('/')\n    sdiskusage(total=21378641920, used=4809781248, free=15482871808, percent=22.5)\n    >>>\n    >>> psutil.disk_io_counters(perdisk=false)\n    sdiskio(read_count=719566, write_count=1082197, read_bytes=18626220032, write_bytes=24081764352, read_time=5023392, write_time=63199568, read_merged_count=619166, write_merged_count=812396, busy_time=4523412)\n    >>>\n\nnetwork\n-------\n\n.. code-block:: python\n\n    >>> psutil.net_io_counters(pernic=true)\n    {'eth0': netio(bytes_sent=485291293, bytes_recv=6004858642, packets_sent=3251564, packets_recv=4787798, errin=0, errout=0, dropin=0, dropout=0),\n     'lo': netio(bytes_sent=2838627, bytes_recv=2838627, packets_sent=30567, packets_recv=30567, errin=0, errout=0, dropin=0, dropout=0)}\n    >>>\n    >>> psutil.net_connections(kind='tcp')\n    [sconn(fd=115, family=<addressfamily.af_inet: 2>, type=<sockettype.sock_stream: 1>, laddr=addr(ip='10.0.0.1', port=48776), raddr=addr(ip='93.186.135.91', port=80), status='established', pid=1254),\n     sconn(fd=117, family=<addressfamily.af_inet: 2>, type=<sockettype.sock_stream: 1>, laddr=addr(ip='10.0.0.1', port=43761), raddr=addr(ip='72.14.234.100', port=80), status='closing', pid=2987),\n     ...]\n    >>>\n    >>> psutil.net_if_addrs()\n    {'lo': [snicaddr(family=<addressfamily.af_inet: 2>, address='127.0.0.1', netmask='255.0.0.0', broadcast='127.0.0.1', ptp=none),\n            snicaddr(family=<addressfamily.af_inet6: 10>, address='::1', netmask='ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', broadcast=none, ptp=none),\n            snicaddr(family=<addressfamily.af_link: 17>, address='00:00:00:00:00:00', netmask=none, broadcast='00:00:00:00:00:00', ptp=none)],\n     'wlan0': [snicaddr(family=<addressfamily.af_inet: 2>, address='192.168.1.3', netmask='255.255.255.0', broadcast='192.168.1.255', ptp=none),\n               snicaddr(family=<addressfamily.af_inet6: 10>, address='fe80::c685:8ff:fe45:641%wlan0', netmask='ffff:ffff:ffff:ffff::', broadcast=none, ptp=none),\n               snicaddr(family=<addressfamily.af_link: 17>, address='c4:85:08:45:06:41', netmask=none, broadcast='ff:ff:ff:ff:ff:ff', ptp=none)]}\n    >>>\n    >>> psutil.net_if_stats()\n    {'lo': snicstats(isup=true, duplex=<nicduplex.nic_duplex_unknown: 0>, speed=0, mtu=65536, flags='up,loopback,running'),\n     'wlan0': snicstats(isup=true, duplex=<nicduplex.nic_duplex_full: 2>, speed=100, mtu=1500, flags='up,broadcast,running,multicast')}\n    >>>\n\nsensors\n-------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.sensors_temperatures()\n    {'acpitz': [shwtemp(label='', current=47.0, high=103.0, critical=103.0)],\n     'asus': [shwtemp(label='', current=47.0, high=none, critical=none)],\n     'coretemp': [shwtemp(label='physical id 0', current=52.0, high=100.0, critical=100.0),\n                  shwtemp(label='core 0', current=45.0, high=100.0, critical=100.0)]}\n    >>>\n    >>> psutil.sensors_fans()\n    {'asus': [sfan(label='cpu_fan', current=3200)]}\n    >>>\n    >>> psutil.sensors_battery()\n    sbattery(percent=93, secsleft=16628, power_plugged=false)\n    >>>\n\nother system info\n-----------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.users()\n    [suser(name='giampaolo', terminal='pts/2', host='localhost', started=1340737536.0, pid=1352),\n     suser(name='giampaolo', terminal='pts/3', host='localhost', started=1340737792.0, pid=1788)]\n    >>>\n    >>> psutil.boot_time()\n    1365519115.0\n    >>>\n\nprocess management\n------------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> psutil.pids()\n    [1, 2, 3, 4, 5, 6, 7, 46, 48, 50, 51, 178, 182, 222, 223, 224, 268, 1215,\n     1216, 1220, 1221, 1243, 1244, 1301, 1601, 2237, 2355, 2637, 2774, 3932,\n     4176, 4177, 4185, 4187, 4189, 4225, 4243, 4245, 4263, 4282, 4306, 4311,\n     4312, 4313, 4314, 4337, 4339, 4357, 4358, 4363, 4383, 4395, 4408, 4433,\n     4443, 4445, 4446, 5167, 5234, 5235, 5252, 5318, 5424, 5644, 6987, 7054,\n     7055, 7071]\n    >>>\n    >>> p = psutil.process(7055)\n    >>> p\n    psutil.process(pid=7055, name='python3', status='running', started='09:04:44')\n    >>> p.pid\n    7055\n    >>> p.name()\n    'python3'\n    >>> p.exe()\n    '/usr/bin/python3'\n    >>> p.cwd()\n    '/home/giampaolo'\n    >>> p.cmdline()\n    ['/usr/bin/python3', 'main.py']\n    >>>\n    >>> p.ppid()\n    7054\n    >>> p.parent()\n    psutil.process(pid=4699, name='bash', status='sleeping', started='09:06:44')\n    >>> p.parents()\n    [psutil.process(pid=4699, name='bash', started='09:06:44'),\n     psutil.process(pid=4689, name='gnome-terminal-server', status='sleeping', started='0:06:44'),\n     psutil.process(pid=1, name='systemd', status='sleeping', started='05:56:55')]\n    >>> p.children(recursive=true)\n    [psutil.process(pid=29835, name='python3', status='sleeping', started='11:45:38'),\n     psutil.process(pid=29836, name='python3', status='waking', started='11:43:39')]\n    >>>\n    >>> p.status()\n    'running'\n    >>> p.create_time()\n    1267551141.5019531\n    >>> p.terminal()\n    '/dev/pts/0'\n    >>>\n    >>> p.username()\n    'giampaolo'\n    >>> p.uids()\n    puids(real=1000, effective=1000, saved=1000)\n    >>> p.gids()\n    pgids(real=1000, effective=1000, saved=1000)\n    >>>\n    >>> p.cpu_times()\n    pcputimes(user=1.02, system=0.31, children_user=0.32, children_system=0.1, iowait=0.0)\n    >>> p.cpu_percent(interval=1.0)\n    12.1\n    >>> p.cpu_affinity()\n    [0, 1, 2, 3]\n    >>> p.cpu_affinity([0, 1])  # set\n    >>> p.cpu_num()\n    1\n    >>>\n    >>> p.memory_info()\n    pmem(rss=10915840, vms=67608576, shared=3313664, text=2310144, lib=0, data=7262208, dirty=0)\n    >>> p.memory_full_info()  # \"real\" uss memory usage (linux, macos, win only)\n    pfullmem(rss=10199040, vms=52133888, shared=3887104, text=2867200, lib=0, data=5967872, dirty=0, uss=6545408, pss=6872064, swap=0)\n    >>> p.memory_percent()\n    0.7823\n    >>> p.memory_maps()\n    [pmmap_grouped(path='/lib/x8664-linux-gnu/libutil-2.15.so', rss=32768, size=2125824, pss=32768, shared_clean=0, shared_dirty=0, private_clean=20480, private_dirty=12288, referenced=32768, anonymous=12288, swap=0),\n     pmmap_grouped(path='/lib/x8664-linux-gnu/libc-2.15.so', rss=3821568, size=3842048, pss=3821568, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=3821568, referenced=3575808, anonymous=3821568, swap=0),\n     pmmap_grouped(path='[heap]',  rss=32768, size=139264, pss=32768, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=32768, referenced=32768, anonymous=32768, swap=0),\n     pmmap_grouped(path='[stack]', rss=2465792, size=2494464, pss=2465792, shared_clean=0, shared_dirty=0, private_clean=0, private_dirty=2465792, referenced=2277376, anonymous=2465792, swap=0),\n     ...]\n    >>>\n    >>> p.io_counters()\n    pio(read_count=478001, write_count=59371, read_bytes=700416, write_bytes=69632, read_chars=456232, write_chars=517543)\n    >>>\n    >>> p.open_files()\n    [popenfile(path='/home/giampaolo/monit.py', fd=3, position=0, mode='r', flags=32768),\n     popenfile(path='/var/log/monit.log', fd=4, position=235542, mode='a', flags=33793)]\n    >>>\n    >>> p.connections(kind='tcp')\n    [pconn(fd=115, family=<addressfamily.af_inet: 2>, type=<sockettype.sock_stream: 1>, laddr=addr(ip='10.0.0.1', port=48776), raddr=addr(ip='93.186.135.91', port=80), status='established'),\n     pconn(fd=117, family=<addressfamily.af_inet: 2>, type=<sockettype.sock_stream: 1>, laddr=addr(ip='10.0.0.1', port=43761), raddr=addr(ip='72.14.234.100', port=80), status='closing')]\n    >>>\n    >>> p.threads()\n    [pthread(id=5234, user_time=22.5, system_time=9.2891),\n     pthread(id=5237, user_time=0.0707, system_time=1.1)]\n    >>>\n    >>> p.num_threads()\n    4\n    >>> p.num_fds()\n    8\n    >>> p.num_ctx_switches()\n    pctxsw(voluntary=78, involuntary=19)\n    >>>\n    >>> p.nice()\n    0\n    >>> p.nice(10)  # set\n    >>>\n    >>> p.ionice(psutil.ioprio_class_idle)  # io priority (win and linux only)\n    >>> p.ionice()\n    pionice(ioclass=<iopriority.ioprio_class_idle: 3>, value=0)\n    >>>\n    >>> p.rlimit(psutil.rlimit_nofile, (5, 5))  # set resource limits (linux only)\n    >>> p.rlimit(psutil.rlimit_nofile)\n    (5, 5)\n    >>>\n    >>> p.environ()\n    {'lc_paper': 'it_it.utf-8', 'shell': '/bin/bash', 'grep_options': '--color=auto',\n    'xdg_config_dirs': '/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg',\n     ...}\n    >>>\n    >>> p.as_dict()\n    {'status': 'running', 'num_ctx_switches': pctxsw(voluntary=63, involuntary=1), 'pid': 5457, ...}\n    >>> p.is_running()\n    true\n    >>> p.suspend()\n    >>> p.resume()\n    >>>\n    >>> p.terminate()\n    >>> p.kill()\n    >>> p.wait(timeout=3)\n    <exitcode.ex_ok: 0>\n    >>>\n    >>> psutil.test()\n    user         pid %cpu %mem     vsz     rss tty        start    time  command\n    root           1  0.0  0.0   24584    2240            jun17   00:00  init\n    root           2  0.0  0.0       0       0            jun17   00:00  kthreadd\n    ...\n    giampaolo  31475  0.0  0.0   20760    3024 /dev/pts/0 jun19   00:00  python2.4\n    giampaolo  31721  0.0  2.2  773060  181896            00:04   10:30  chrome\n    root       31763  0.0  0.0       0       0            00:05   00:00  kworker/0:1\n    >>>\n\nfurther process apis\n--------------------\n\n.. code-block:: python\n\n    >>> import psutil\n    >>> for proc in psutil.process_iter(['pid', 'name']):\n    ...     print(proc.info)\n    ...\n    {'pid': 1, 'name': 'systemd'}\n    {'pid': 2, 'name': 'kthreadd'}\n    {'pid': 3, 'name': 'ksoftirqd/0'}\n    ...\n    >>>\n    >>> psutil.pid_exists(3)\n    true\n    >>>\n    >>> def on_terminate(proc):\n    ...     print(\"process {} terminated\".format(proc))\n    ...\n    >>> # waits for multiple processes to terminate\n    >>> gone, alive = psutil.wait_procs(procs_list, timeout=3, callback=on_terminate)\n    >>>\n\nwindows services\n----------------\n\n.. code-block:: python\n\n    >>> list(psutil.win_service_iter())\n    [<windowsservice(name='aelookupsvc', display_name='application experience') at 38850096>,\n     <windowsservice(name='alg', display_name='application layer gateway service') at 38850128>,\n     <windowsservice(name='apnmcp', display_name='ask update service') at 38850160>,\n     <windowsservice(name='appidsvc', display_name='application identity') at 38850192>,\n     ...]\n    >>> s = psutil.win_service_get('alg')\n    >>> s.as_dict()\n    {'binpath': 'c:\\\\windows\\\\system32\\\\alg.exe',\n     'description': 'provides support for 3rd party protocol plug-ins for internet connection sharing',\n     'display_name': 'application layer gateway service',\n     'name': 'alg',\n     'pid': none,\n     'start_type': 'manual',\n     'status': 'stopped',\n     'username': 'nt authority\\\\localservice'}\n\nprojects using psutil\n=====================\n\nhere's some i find particularly interesting:\n\n- https://github.com/google/grr\n- https://github.com/facebook/osquery/\n- https://github.com/nicolargo/glances\n- https://github.com/aristocratos/bpytop\n- https://github.com/jahaja/psdash\n- https://github.com/ajenti/ajenti\n- https://github.com/home-assistant/home-assistant/\n\nportings\n========\n\n- go: https://github.com/shirou/gopsutil\n- c: https://github.com/hamon-in/cpslib\n- rust: https://github.com/rust-psutil/rust-psutil\n- nim: https://github.com/johnscillieri/psutil-nim\n\n",
  "docs_url": null,
  "keywords": "ps,top,kill,free,lsof,netstat,nice,tty,ionice,uptime,taskmgr,process,df,iotop,iostat,ifconfig,taskset,who,pidof,pmap,smem,pstree,monitoring,ulimit,prlimit,smem,performance,metrics,agent,observability",
  "license": "bsd-3-clause",
  "name": "psutil",
  "package_url": "https://pypi.org/project/psutil/",
  "project_url": "https://pypi.org/project/psutil/",
  "project_urls": {
    "Homepage": "https://github.com/giampaolo/psutil"
  },
  "release_url": "https://pypi.org/project/psutil/5.9.7/",
  "requires_dist": [
    "enum34; python_version <= \"3.4\" and extra == \"test\"",
    "ipaddress; python_version < \"3.0\" and extra == \"test\"",
    "mock; python_version < \"3.0\" and extra == \"test\"",
    "pywin32; sys_platform == \"win32\" and extra == \"test\"",
    "wmi; sys_platform == \"win32\" and extra == \"test\""
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
  "summary": "cross-platform lib for process and system monitoring in python.",
  "version": "5.9.7",
  "releases": [],
  "developers": [
    "g.rodola@gmail.com",
    "giampaolo_rodola"
  ],
  "kwds": "psutil tools processes unix pstree",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_psutil",
  "homepage": "https://github.com/giampaolo/psutil",
  "release_count": 92,
  "dependency_ids": [
    "pypi_enum34",
    "pypi_ipaddress",
    "pypi_mock",
    "pypi_pywin32",
    "pypi_wmi"
  ]
}
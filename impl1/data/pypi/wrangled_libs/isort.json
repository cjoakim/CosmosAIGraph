{
  "classifiers": [
    "development status :: 6 - mature",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "[![isort - isort your imports, so you don't have to.](https://raw.githubusercontent.com/pycqa/isort/main/art/logo_large.png)](https://pycqa.github.io/isort/)\n\n------------------------------------------------------------------------\n\n[![pypi version](https://badge.fury.io/py/isort.svg)](https://badge.fury.io/py/isort)\n[![test status](https://github.com/pycqa/isort/workflows/test/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3atest)\n[![lint status](https://github.com/pycqa/isort/workflows/lint/badge.svg?branch=develop)](https://github.com/pycqa/isort/actions?query=workflow%3alint)\n[![code coverage status](https://codecov.io/gh/pycqa/isort/branch/main/graph/badge.svg)](https://codecov.io/gh/pycqa/isort)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.org/project/isort/)\n[![join the chat at https://gitter.im/timothycrosley/isort](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/timothycrosley/isort?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![downloads](https://pepy.tech/badge/isort)](https://pepy.tech/project/isort)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336)](https://pycqa.github.io/isort/)\n[![deepsource](https://static.deepsource.io/deepsource-badge-light-mini.svg)](https://deepsource.io/gh/pycqa/isort/?ref=repository-badge)\n_________________\n\n[read latest documentation](https://pycqa.github.io/isort/) - [browse github code repository](https://github.com/pycqa/isort/)\n_________________\n\nisort your imports, so you don't have to.\n\nisort is a python utility / library to sort imports alphabetically and\nautomatically separate into sections and by type. it provides a command line\nutility, python library and [plugins for various\neditors](https://github.com/pycqa/isort/wiki/isort-plugins) to\nquickly sort all your imports. it requires python 3.8+ to run but\nsupports formatting python 2 code too.\n\n- [try isort now from your browser!](https://pycqa.github.io/isort/docs/quick_start/0.-try.html)\n- [using black? see the isort and black compatibility guide.](https://pycqa.github.io/isort/docs/configuration/black_compatibility.html)\n- [isort has official support for pre-commit!](https://pycqa.github.io/isort/docs/configuration/pre-commit.html)\n\n![example usage](https://raw.github.com/pycqa/isort/main/example.gif)\n\nbefore isort:\n\n```python\nfrom my_lib import object\n\nimport os\n\nfrom my_lib import object3\n\nfrom my_lib import object2\n\nimport sys\n\nfrom third_party import lib15, lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8, lib9, lib10, lib11, lib12, lib13, lib14\n\nimport sys\n\nfrom __future__ import absolute_import\n\nfrom third_party import lib3\n\nprint(\"hey\")\nprint(\"yo\")\n```\n\nafter isort:\n\n```python\nfrom __future__ import absolute_import\n\nimport os\nimport sys\n\nfrom third_party import (lib1, lib2, lib3, lib4, lib5, lib6, lib7, lib8,\n                         lib9, lib10, lib11, lib12, lib13, lib14, lib15)\n\nfrom my_lib import object, object2, object3\n\nprint(\"hey\")\nprint(\"yo\")\n```\n\n## installing isort\n\ninstalling isort is as simple as:\n\n```bash\npip install isort\n```\n\n## using isort\n\n**from the command line**:\n\nto run on specific files:\n\n```bash\nisort mypythonfile.py mypythonfile2.py\n```\n\nto apply recursively:\n\n```bash\nisort .\n```\n\nif [globstar](https://www.gnu.org/software/bash/manual/html_node/the-shopt-builtin.html)\nis enabled, `isort .` is equivalent to:\n\n```bash\nisort **/*.py\n```\n\nto view proposed changes without applying them:\n\n```bash\nisort mypythonfile.py --diff\n```\n\nfinally, to atomically run isort against a project, only applying\nchanges if they don't introduce syntax errors:\n\n```bash\nisort --atomic .\n```\n\n(note: this is disabled by default, as it prevents isort from\nrunning against code written using a different version of python.)\n\n**from within python**:\n\n```python\nimport isort\n\nisort.file(\"pythonfile.py\")\n```\n\nor:\n\n```python\nimport isort\n\nsorted_code = isort.code(\"import b\\nimport a\\n\")\n```\n\n## installing isort's for your preferred text editor\n\nseveral plugins have been written that enable to use isort from within a\nvariety of text-editors. you can find a full list of them [on the isort\nwiki](https://github.com/pycqa/isort/wiki/isort-plugins).\nadditionally, i will enthusiastically accept pull requests that include\nplugins for other text editors and add documentation for them as i am\nnotified.\n\n## multi line output modes\n\nyou will notice above the \\\"multi\\_line\\_output\\\" setting. this setting\ndefines how from imports wrap when they extend past the line\\_length\nlimit and has [12 possible settings](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html).\n\n## indentation\n\nto change the how constant indents appear - simply change the\nindent property with the following accepted formats:\n\n-   number of spaces you would like. for example: 4 would cause standard\n    4 space indentation.\n-   tab\n-   a verbatim string with quotes around it.\n\nfor example:\n\n```python\n\"    \"\n```\n\nis equivalent to 4.\n\nfor the import styles that use parentheses, you can control whether or\nnot to include a trailing comma after the last import with the\n`include_trailing_comma` option (defaults to `false`).\n\n## intelligently balanced multi-line imports\n\nas of isort 3.1.0 support for balanced multi-line imports has been\nadded. with this enabled isort will dynamically change the import length\nto the one that produces the most balanced grid, while staying below the\nmaximum import length defined.\n\nexample:\n\n```python\nfrom __future__ import (absolute_import, division,\n                        print_function, unicode_literals)\n```\n\nwill be produced instead of:\n\n```python\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n```\n\nto enable this set `balanced_wrapping` to `true` in your config or pass\nthe `-e` option into the command line utility.\n\n## custom sections and ordering\n\nisort provides configuration options to change almost every aspect of how\nimports are organized, ordered, or grouped together in sections.\n\n[click here](https://pycqa.github.io/isort/docs/configuration/custom_sections_and_ordering.html) for an overview of all these options.\n\n## skip processing of imports (outside of configuration)\n\nto make isort ignore a single import simply add a comment at the end of\nthe import line containing the text `isort:skip`:\n\n```python\nimport module  # isort:skip\n```\n\nor:\n\n```python\nfrom xyz import (abc,  # isort:skip\n                 yo,\n                 hey)\n```\n\nto make isort skip an entire file simply add `isort:skip_file` to the\nmodule's doc string:\n\n```python\n\"\"\" my_module.py\n    best module ever\n\n   isort:skip_file\n\"\"\"\n\nimport b\nimport a\n```\n\n## adding or removing an import from multiple files\n\nisort can be ran or configured to add / remove imports automatically.\n\n[see a complete guide here.](https://pycqa.github.io/isort/docs/configuration/add_or_remove_imports.html)\n\n## using isort to verify code\n\nthe `--check-only` option\n-------------------------\n\nisort can also be used to verify that code is correctly formatted\nby running it with `-c`. any files that contain incorrectly sorted\nand/or formatted imports will be outputted to `stderr`.\n\n```bash\nisort **/*.py -c -v\n\nsuccess: /home/timothy/projects/open_source/isort/isort_kate_plugin.py everything looks good!\nerror: /home/timothy/projects/open_source/isort/isort/isort.py imports are incorrectly sorted.\n```\n\none great place this can be used is with a pre-commit git hook, such as\nthis one by \\@acdha:\n\n<https://gist.github.com/acdha/8717683>\n\nthis can help to ensure a certain level of code quality throughout a\nproject.\n\n## git hook\n\nisort provides a hook function that can be integrated into your git\npre-commit script to check python code before committing.\n\n[more info here.](https://pycqa.github.io/isort/docs/configuration/git_hook.html)\n\n## setuptools integration\n\nupon installation, isort enables a `setuptools` command that checks\npython files declared by your project.\n\n[more info here.](https://pycqa.github.io/isort/docs/configuration/setuptools_integration.html)\n\n## spread the word\n\n[![imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336)](https://pycqa.github.io/isort/)\n\nplace this badge at the top of your repository to let others know your project uses isort.\n\nfor readme.md:\n\n```markdown\n[![imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336)](https://pycqa.github.io/isort/)\n```\n\nor readme.rst:\n\n```rst\n.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336\n    :target: https://pycqa.github.io/isort/\n```\n\n## security contact information\n\nto report a security vulnerability, please use the [tidelift security\ncontact](https://tidelift.com/security). tidelift will coordinate the\nfix and disclosure.\n\n## why isort?\n\nisort simply stands for import sort. it was originally called\n\"sortimports\" however i got tired of typing the extra characters and\ncame to the realization camelcase is not pythonic.\n\ni wrote isort because in an organization i used to work in the manager\ncame in one day and decided all code must have alphabetically sorted\nimports. the code base was huge - and he meant for us to do it by hand.\nhowever, being a programmer - i\\'m too lazy to spend 8 hours mindlessly\nperforming a function, but not too lazy to spend 16 hours automating it.\ni was given permission to open source sortimports and here we are :)\n\n------------------------------------------------------------------------\n\n[get professionally supported isort with the tidelift\nsubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme)\n\nprofessional support for isort is available as part of the [tidelift\nsubscription](https://tidelift.com/subscription/pkg/pypi-isort?utm_source=pypi-isort&utm_medium=referral&utm_campaign=readme).\ntidelift gives software development teams a single source for purchasing\nand maintaining their software, with professional grade assurances from\nthe experts who know it best, while seamlessly integrating with existing\ntools.\n\n------------------------------------------------------------------------\n\nthanks and i hope you find isort useful!\n\n~timothy crosley\n\n",
  "docs_url": null,
  "keywords": "refactor,lint,imports,sort,clean",
  "license": "mit",
  "name": "isort",
  "package_url": "https://pypi.org/project/isort/",
  "project_url": "https://pypi.org/project/isort/",
  "project_urls": {
    "Changelog": "https://github.com/pycqa/isort/blob/main/CHANGELOG.md",
    "Documentation": "https://pycqa.github.io/isort/",
    "Homepage": "https://pycqa.github.io/isort/",
    "Repository": "https://github.com/pycqa/isort"
  },
  "release_url": "https://pypi.org/project/isort/5.13.2/",
  "requires_dist": [
    "colorama (>=0.4.6) ; extra == \"colors\""
  ],
  "requires_python": ">=3.8.0",
  "summary": "a python utility / library to sort python imports.",
  "version": "5.13.2",
  "releases": [],
  "developers": [
    "timothy.crosley@gmail.com",
    "timothy_crosley"
  ],
  "kwds": "isort sorted_code badges badge isort_kate_plugin",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_isort",
  "homepage": "https://pycqa.github.io/isort/",
  "release_count": 145,
  "dependency_ids": [
    "pypi_colorama"
  ]
}
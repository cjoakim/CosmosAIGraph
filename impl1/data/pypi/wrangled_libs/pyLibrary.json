{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pylibrary\r\n\r\na library of wonderful python things!\r\n\r\n## motivation\r\n\r\nthis library is born from my version of the `utils` library every project has.\r\nonly, instead of being utilities that are specific to the task, these utilities\r\nare for multiple projects: they assume logs should be structured,\r\nall data should be jsonizable, and oo is preferred, and more.\r\n\r\n### python is a little crufty ###\r\n\r\npython is awesome now, but it was originally a procedural language invented\r\nbefore pure functional semantics, before oo, and even before the\r\ndiscovery of vowels.  as a consequence there are many procedures that alter\r\ntheir own parameters, or have disemvoweled names.  this library puts a facade\r\nover these relics of the past and uses convention to name methods.\r\n\r\n## installing pylibrary\r\n\r\npython packages are easy to install, assuming you have python (see below).\r\n\r\n    pip install pylibrary\r\n\r\n## installing for development\r\n\r\n  * download from github:\r\n\r\n        git clone https://github.com/klahnakoski/pylibrary.git\r\n\r\n  * install requirements:\r\n\r\n        python setup.py develop\r\n\r\n\r\nwindows 7 install instructions for python\r\n-----------------------------------------\r\n\r\nupdated november 2014, for python 2.7.8\r\n\r\npython was really made for linux, and installation will be easier there.\r\ntechnically, python works on windows too, but there are a few gotchas you can\r\navoid by following these instructions.\r\n\r\n  * download python 2.7\r\n    * 32bit only!!! many native libs are 32 bit\r\n    * varsion 2.7.8 or higher (includes pip, so install is easier)\r\n  * install python at ```c:\\python27``` (the space in the \"program files\" may screw up installs of native libs)\r\n  * add to you path: ```c:\\python27;c:\\python27\\scripts;```\r\n  * download ```https://bootstrap.pypa.io/get-pip.py```\r\n\r\n        call python get-pip.py\r\n        call pip install virtualenv\r\n\r\n  * many \"python powered\" native installs require a pointer to the python installation, but they have no idea where to\r\n  look in 64bit windows.  you must alter the registry ([http://stackoverflow.com/questions/3652625/installing-setuptools-on-64-bit-windows](http://stackoverflow.com/questions/3652625/installing-setuptools-on-64-bit-windows)):\r\n\r\n        set hkey_local_machine\\software\\wow6432node\\python\\pythoncore\\2.7\\installpath = \"c:\\python27\"\r\n\r\n###using virtualenv\r\n\r\n```virtualenv``` allows you to have multiple python projects on the same\r\nmachine, even if they use different versions of the same libraries.\r\n```virtualenv``` does this by making a copy of the main python directory and\r\nusing it to hold the specific versions required.\r\n\r\n* new environment: ```virtualenv <name_of_dir>```\r\n* activate environment: ```<name_of_dir>\\scripts\\activate```\r\n* exit environment: ```deactivate```\r\n\r\nif you have more than one project on your dev box i suggest you do all your\r\nwork inside a virtual environment.\r\n\r\n### pypy and virtual environments\r\n\r\n```virtualenv``` can be used with pypy, but it is a bit more involved.  the\r\npaths must be explict, and some copying is required.\r\n\r\n#### new environment:\r\nthe first call to virtualenv will make the directory, to which you copy the\r\npypy core libraries, and the second call finishes the install.\r\n\r\n    c:\\pypy27\\bin\\virtualenv <name_of_dir>\r\n    copy c:\\pypy27\\bin\\lib_pypy <name_of_dir>\r\n    copy c:\\pypy27\\bin\\lib_python <name_of_dir>\r\n    c:\\pypy27\\bin\\virtualenv <name_of_dir>\r\n\r\n#### activate environment:\r\nwith cpython ```virtualenv``` places it's executables in ```scripts```.  the\r\npypy version uses ```bin```\r\n\r\n    <name_of_dir>\\bin\\activate\r\n\r\n#### using pip in pypy:\r\n\r\npypy does not share any libraries with cpython.  you must install the pypy libraries using \r\n\r\n\tc:\\pypy\\bin\\pip.exe\r\n\r\nthe `pip` found in your `%path%` probably points to `c:\\python27\\scripts\\pip.exe`.\r\n\r\n#### using pip in pypy virtualenv:\r\n\r\ndo **not** use the ```<name_of_dir>\\scripts``` directory: it installs to your\r\nmain pypy installation.  pip install is done using the `bin` directory:\r\n\r\n    <name_of_dir>\\bin\\pip.exe\r\n\r\n#### exit environment:\r\ndeactivation is like normal\r\n\r\n    deactivate\r\n\r\n### cpython binaries and virtual environments\r\n\r\nif you plan to use any binary packages, ```virtualenv``` will not work\r\ndirectly.  instead, install the binary (32 bit only!!) to the main python\r\ninstallation.  then copy any newly installed files/directories from\r\n```c:\\python27\\lib\\site-packages``` to ```<name_of_dir>\\lib\\site-packages```.\r\n\r\n### binaries and pypy\r\n\r\nthis strategy for installing binaries into virtual environments is almost\r\nidentical to installing binaries into your pypy environment: install numpy\r\nand scipy to your cpython installation using a windows installer (which has\r\npre-compiled binaries), and then copy the ```c:\\python27\\lib\\site-packages\\<package>```\r\nto ```c:\\pypy\\site-packages\\```; note lack of ```lib``` subdirectory.\r\n\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "pylibrary",
  "package_url": "https://pypi.org/project/pyLibrary/",
  "project_url": "https://pypi.org/project/pyLibrary/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/pyLibrary"
  },
  "release_url": "https://pypi.org/project/pyLibrary/3.264.22338/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "library of wonderful things",
  "version": "3.264.22338",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "lib_python python pylibrary lib_pypy python27",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_pylibrary",
  "homepage": "https://github.com/klahnakoski/pylibrary",
  "release_count": 50,
  "dependency_ids": []
}
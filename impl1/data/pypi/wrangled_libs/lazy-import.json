{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "lazy_import\n===========\n\n|build status|\n\n``lazy_import`` provides a set of functions that load modules, and related\nattributes, in a lazy fashion. this allows deferring of ``importerrors`` to\nactual module use-time. likewise, actual module initialization only takes place\nat use-time. this is useful when using optional dependencies with heavy loading\ntimes and/or footprints, since that cost is only paid if the module is actually\nused.\n\nfor minimal impact to other code running in the same session ``lazy_import``\nfunctionality is implemented without the use of import hooks.\n\n``lazy_import`` is compatible with python \u2265 2.7 or \u2265 3.4.\n\nexamples: lazy module loading\n-----------------------------\n\n.. code:: python\n\n    import lazy_import\n    np = lazy_import.lazy_module(\"numpy\")\n    # np is now available in the namespace and is listed in sys.modules under\n    #  the 'numpy' key:\n    import sys\n    sys.modules['numpy']\n    # the module is present as \"lazily-loaded module numpy\"\n\n    # subsequent imports of the same module return the lazy version present\n    #  in sys.modules\n    import numpy # at this point numpy and np point to the same lazy module.\n    # this is true for any import of 'numpy', even if from other modules!\n\n    # accessing attributes causes the full loading of the module ...\n    np.pi\n    # ... and the module is changed in place. np and numpy are now \n    #  \"<module 'numpy' from '/usr/local/lib/python/site-packages/numpy/__init__.py'>\"\n\n    # lazy-importing a module that's already fully loaded returns the full\n    #  module instead (even if it was loaded elsewhere in the current session)\n    #  because there's no point in being lazy in this case:\n    os = lazy_import.lazy_module(\"os\")\n    # \"<module 'os' from '/usr/lib/python/os.py'>\"\n\nin the above code it can be seen that issuing\n``lazy_import.lazy_module(\"numpy\")`` registers the lazy module in the\nsession-wide ``sys.modules`` registry. this means that *any* subsequent import\nof ``numpy`` in the same session, while the module is still not fully loaded,\nwill get served a lazy version of the ``numpy`` module. this will happen also\noutside the code that calls ``lazy_module``:\n\n.. code:: python\n   \n    import lazy_import\n    np = lazy_import.lazy_module(\"numpy\")\n    import module_that_uses_numpy # this module will get a lazy module upon\n                                  # 'import numpy'\n\nnormally this is ok because the lazy module will behave pretty much as the real\nthing once fully-loaded. still, it might be a good practice to document that\nyou're lazily importing modules so-and-so, so that users are warned.\n\nfurther uses are to delay ``importerrors``:\n\n.. code:: python\n\n    import lazy_import\n    # the following succeeds even when asking for a module that's not available\n    missing = lazy_import.lazy_module(\"missing_module\")\n\n    missing.some_attr # this causes the full loading of the module, which now fails.\n    \"importerror: __main__ attempted to use a functionality that requires module\n     missing_module, but it couldn't be loaded. please install missing_module and retry.\"\n\n\nsubmodules work too:\n\n.. code:: python\n\n    import lazy_import\n    mod = lazy_import.lazy_module(\"some.sub.module\")\n    # mod now points to the some.sub.module lazy module\n    #  equivalent to \"from some.sub import module as mod\"\n\n    # alternatively the returned reference can be made to point to the\n    #  base module:\n    some = lazy_import.lazy_module(\"some.sub.module\", level=\"base\")\n\n    # this is equivalent to \"import some.sub.module\" in that only the base\n    #  module's name is added to the namespace. all submodules must be accessed\n    #  via that:\n    some.sub # returns lazy module 'some.sub' without triggering full loading.\n    some.sub.attr # triggers full loading of 'some' and 'some.sub'.\n    some.sub.module.function() # triggers loading also of 'some.sub.module'.\n\n\nfinally, if you want to mark some modules and submodules your package imports\nas always being lazy, it is as simple as lazily importing them at the root\n`__init__.py` level. other files can then import all modules normally, and\nthose that have already been loaded as lazy in `__init__.py` will remain so:\n\n.. code:: python\n\n    # in __init__.py:\n\n    import lazy_import\n    lazy_import.lazy_module(\"numpy\")\n    lazy_import.lazy_module(\"scipy.stats\")\n\n\n    # then, in any other file in the package just use the imports normally:\n\n    import requests # this one is not lazy.\n    import numpy # this one is lazy, as long as no other code caused its\n                 #  loading in the meantime.\n    import scipy # this one is also lazy. it was lazily loaded as part of the\n                 #  lazy loading of scipy.stats.\n    import scipy.stats # also lazy.\n    import scipy.linalg # uh-oh, we didn't lazily import the 'linalg' submodule\n                        #  earlier, and importing it like this here will cause\n                        #  both scipy and scipy.linalg (but not scipy.stats) to\n                        #  immediately become fully loaded.\n\n\nexamples: lazy callable loading\n-------------------------------\n\nto emulate the ``from some.module import function`` syntax ``lazy_module``\nprovides ``lazy_callable``. it returns a wrapper function. only upon being\ncalled will it trigger the loading of the target module and the calling of the\ntarget callable (function, class, etc.).\n\n.. code:: python\n\n    import lazy_import\n    fn = lazy_import.lazy_callable(\"numpy.arange\")\n    # 'numpy' is now in sys.modules and is 'lazily-loaded module numpy'\n\n    fn(10)\n    # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n``lazy_callable`` is only useful when the target callable is going to be called:\n\n.. code:: python\n\n    import lazy_import\n    cl = lazy_import.lazy_callable(\"numpy.ndarray\") # a class\n\n    obj = cl([1, 2]) # this works ok (and also triggers the loading of numpy)\n\n    class mysubclass(cl): # this fails because cl is just a wrapper,\n        pass              #  not an actual class.\n\n\ninstallation\n------------\n\n.. code:: bash\n\n    pip install lazy_import\n\nor, to include dependencies needed to run regression tests:\n\n.. code:: bash\n\n    pip install lazy_import[test]\n\ntests\n-----\n\nthe ``lazy_module`` module comes with a series of tests. if you install with\ntest dependencies (see above), just run\n\n.. code:: python\n\n    import lazy_import.test_lazy\n    lazy_import.test_lazy.run()\n    # this will automatically parallelize over the available number of cores\n\nalternatively, tests can be run from the command line:\n\n.. code:: bash\n\n    pytest -n 4 --boxed -v --pyargs lazy_import\n    # (replace '4' with the number of cores in your machine, or set to 1 if\n    #  you'd rather test in serial)\n\ntests depend only on |pytest|_ and |pytest-xdist|_, so if you didn't install\nthem along ``lazy_import`` (as described under `installation`_) just run\n\n.. code:: bash\n\n    pip install pytest pytest-xdist\n\nnote that ``pytest-xdist`` is required even for serial testing because of its\n``--boxed`` functionality.\n\nlicense\n-------\n\n``lazy_import`` is released under gpl v3. it was based on code from the\n|importing|_ module from the peak_ package. the licenses for both\n``lazy_import`` and the peak package are included in the ``license`` file. the\nrespective license notices are reproduced here:\n\n  lazy_import \u2014 a module to allow lazy importing of python modules\n\n  copyright (c) 2017-2018 manuel nuno melo \n\n  lazy_import is free software: you can redistribute it and/or modify\n  it under the terms of the gnu general public license as published by\n  the free software foundation, either version 3 of the license, or\n  (at your option) any later version.\n\n  lazy_import is distributed in the hope that it will be useful,\n  but without any warranty; without even the implied warranty of\n  merchantability or fitness for a particular purpose.  see the\n  gnu general public license for more details.\n\n  you should have received a copy of the gnu general public license\n  along with lazy_import.  if not, see <http://www.gnu.org/licenses/>.\n\n\nthe peak ``importing`` code is\n\n  copyright (c) 1996-2004 by phillip j. eby and tyler c. sarna.\n  all rights reserved.  this software may be used under the same terms\n  as zope or python.  there are absolutely no warranties of any kind.\n  code quality varies between modules, from \"beta\" to \"experimental\n  pre-alpha\".  :)\n  \ncode pertaining to lazy loading from peak ``importing`` was included in\n``lazy_import``, modified in a number of ways. these are detailed in the\n``changelog`` file of ``lazy_import``. changes mainly involved python 3\ncompatibility, extension to allow customizable behavior, and added\nfunctionality (lazy importing of callable objects).\n\n\n.. |build status| image:: https://api.travis-ci.org/mnmelo/lazy_import.svg\n   :target: https://travis-ci.org/mnmelo/lazy_import\n\n.. |importing| replace:: ``importing``\n.. |pytest| replace:: ``pytest``\n.. |pytest-xdist| replace:: ``pytest-xdist``\n\n.. _importing: http://peak.telecommunity.com/devcenter/importing\n.. _peak: http://peak.telecommunity.com/devcenter/frontpage\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _pytest-xdist: https://pypi.python.org/pypi/pytest-xdist",
  "docs_url": null,
  "keywords": "",
  "license": "gpl",
  "name": "lazy-import",
  "package_url": "https://pypi.org/project/lazy-import/",
  "project_url": "https://pypi.org/project/lazy-import/",
  "project_urls": {
    "Homepage": "https://github.com/mnmelo/lazy_import"
  },
  "release_url": "https://pypi.org/project/lazy-import/0.2.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a module for lazy loading of python modules",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "manuel.nuno.melo@gmail.com",
    "manuel_nuno_melo"
  ],
  "kwds": "lazy_module lazy_import module_that_uses_numpy lazy_callable test_lazy",
  "license_kwds": "gpl",
  "libtype": "pypi",
  "id": "pypi_lazy_import",
  "homepage": "https://github.com/mnmelo/lazy_import",
  "release_count": 3,
  "dependency_ids": []
}
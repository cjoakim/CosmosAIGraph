{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "the cloud sql python connector is a library that can be used alongside a database driver to allow users with sufficient permissions to connect to a cloud sql database without having to manually allowlist ips or manage ssl certificates.\n<p align=\"center\">\n    <a href=\"https://cloud.google.com/blog/topics/developers-practitioners/how-connect-cloud-sql-using-python-easy-way\">\n        <img src=\"https://raw.githubusercontent.com/googlecloudplatform/cloud-sql-python-connector/main/docs/images/cloud-sql-python-connector.png\" alt=\"cloud-sql-python-connector image\">\n    </a>\n</p>\n\n<h1 align=\"center\">cloud sql python connector</h1>\n\n[![open in colab][colab-badge]][colab-notebook]\n[![ci][ci-badge]][ci-build]\n[![pypi][pypi-badge]][pypi-docs]\n[![pypi download month][pypi-downloads]][pypi-docs]\n[![python][python-versions]][pypi-docs]\n\n[colab-badge]: https://colab.research.google.com/assets/colab-badge.svg\n[colab-notebook]: https://colab.research.google.com/github/googlecloudplatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb\n[ci-badge]: https://github.com/googlecloudplatform/cloud-sql-python-connector/actions/workflows/tests.yml/badge.svg?event=push\n[ci-build]: https://github.com/googlecloudplatform/cloud-sql-python-connector/actions/workflows/tests.yml?query=event%3apush+branch%3amain\n[pypi-badge]: https://img.shields.io/pypi/v/cloud-sql-python-connector\n[pypi-docs]: https://pypi.org/project/cloud-sql-python-connector\n[pypi-downloads]: https://img.shields.io/pypi/dm/cloud-sql-python-connector.svg\n[python-versions]: https://img.shields.io/pypi/pyversions/cloud-sql-python-connector\n\nthe _cloud sql python connector_ is a cloud sql connector designed for use with the\npython language. using a cloud sql connector provides a native alternative to the\n[cloud sql auth proxy](https://cloud.google.com/sql/docs/mysql/sql-proxy) while\nproviding the following benefits:\n\n* **iam authorization:** uses iam permissions to control who/what can connect to\n  your cloud sql instances\n* **improved security:** uses robust, updated tls 1.3 encryption and\n  identity verification between the client connector and the server-side proxy,\n  independent of the database protocol.\n* **convenience:** removes the requirement to use and distribute ssl\n  certificates, as well as manage firewalls or source/destination ip addresses.\n* (optionally) **iam db authentication:** provides support for\n  [cloud sql\u2019s automatic iam db authn][iam-db-authn] feature.\n\n[iam-db-authn]: https://cloud.google.com/sql/docs/postgres/authentication\n\nthe cloud sql python connector is a package to be used alongside a database driver.\ncurrently supported drivers are:\n - [`pymysql`](https://github.com/pymysql/pymysql) (mysql)\n - [`pg8000`](https://github.com/tlocke/pg8000) (postgresql)\n - [`asyncpg`](https://github.com/magicstack/asyncpg) (postgresql)\n - [`pytds`](https://github.com/denisenkom/pytds) (sql server)\n\n\n## installation\n\nyou can install this library with `pip install`, specifying the driver\nbased on your database dialect.\n\n### mysql\n```\npip install \"cloud-sql-python-connector[pymysql]\"\n```\n### postgres\nthere are two different database drivers that are supported for the postgres dialect:\n\n#### pg8000\n```\npip install \"cloud-sql-python-connector[pg8000]\"\n```\n#### asyncpg\n```\npip install \"cloud-sql-python-connector[asyncpg]\"\n```\n### sql server\n```\npip install \"cloud-sql-python-connector[pytds]\"\n```\n\n### apis and services\n\nthis package requires the following to successfully make cloud sql connections:\n\n- iam principal (user, service account, etc.) with the\n[cloud sql client][client-role] role. this iam principal will be used for\n[credentials](#credentials).\n- the [cloud sql admin api][admin-api] to be enabled within your google cloud\nproject. by default, the api will be called in the project associated with\nthe iam principal.\n\n[admin-api]: https://console.cloud.google.com/apis/api/sqladmin.googleapis.com\n[client-role]: https://cloud.google.com/sql/docs/mysql/roles-and-permissions\n\n### credentials\n\nthis library uses the [application default credentials (adc)][adc] strategy for\nresolving credentials. please see [these instructions for how to set your adc][set-adc]\n(google cloud application vs local development, iam user vs service account credentials),\nor consult the [google.auth][google-auth] package.\n\nto explicitly set a specific source for the credentials, see\n[configuring the connector](#configuring-the-connector) below.\n\n[adc]: https://cloud.google.com/docs/authentication#adc\n[set-adc]: https://cloud.google.com/docs/authentication/provide-credentials-adc\n[google-auth]: https://google-auth.readthedocs.io/en/master/reference/google.auth.html\n\n## usage\n\nthis package provides several functions for authorizing and encrypting\nconnections. these functions are used with your database driver to connect to\nyour cloud sql instance.\n\nthe instance connection name for your cloud sql instance is always in the\nformat \"project:region:instance\".\n\n### how to use this connector\n\nto connect to cloud sql using the connector, inititalize a `connector`\nobject and call it's `connect` method with the proper input parameters.\n\nthe `connector` itself creates connection objects by calling its `connect` method but does not manage database connection pooling. for this reason, it is recommended to use the connector alongside a library that can create connection pools, such as [sqlalchemy](https://www.sqlalchemy.org/). this will allow for connections to remain open and be reused, reducing connection overhead and the number of connections needed.\n\nin the connector's `connect` method below, input your connection string as the first positional argument and the name of the database driver for the second positional argument. insert the rest of your connection keyword arguments like user, password and database. you can also set the optional `timeout` or `ip_type` keyword arguments.\n\nto use this connector with sqlalchemy, use the `creator` argument for `sqlalchemy.create_engine`:\n\n```python\nfrom google.cloud.sql.connector import connector\nimport sqlalchemy\n\n# initialize connector object\nconnector = connector()\n\n# function to return the database connection\ndef getconn() -> pymysql.connections.connection:\n    conn: pymysql.connections.connection = connector.connect(\n        \"project:region:instance\",\n        \"pymysql\",\n        user=\"my-user\",\n        password=\"my-password\",\n        db=\"my-db-name\"\n    )\n    return conn\n\n# create connection pool\npool = sqlalchemy.create_engine(\n    \"mysql+pymysql://\",\n    creator=getconn,\n)\n```\n\nthe returned connection pool engine can then be used to query and modify the database.\n\n```python\n# insert statement\ninsert_stmt = sqlalchemy.text(\n    \"insert into my_table (id, title) values (:id, :title)\",\n)\n\nwith pool.connect() as db_conn:\n    # insert into database\n    db_conn.execute(insert_stmt, parameters={\"id\": \"book1\", \"title\": \"book one\"})\n\n    # query database\n    result = db_conn.execute(sqlalchemy.text(\"select * from my_table\")).fetchall()\n\n    # commit transaction (sqlalchemy v2.x.x is commit as you go)\n    db_conn.commit()\n\n    # do something with the results\n    for row in result:\n        print(row)\n```\n\nto close the `connector` object's background resources, call it's `close()` method as follows:\n\n```python\nconnector.close()\n```\n\n**note**: for more examples of using sqlalchemy to manage connection pooling with the connector, please see [cloud sql sqlalchemy samples](https://cloud.google.com/sql/docs/postgres/connect-connectors#python_1).\n\n**note for sql server users**: if your sql server instance requires ssl, you need to download the ca certificate for your instance and include `cafile={path to downloaded certificate}` and `validate_host=false`. this is a workaround for a [known issue](https://issuetracker.google.com/184867147).\n\n### configuring the connector\n\nif you need to customize something about the connector, or want to specify\ndefaults for each connection to make, you can initialize a\n`connector` object as follows:\n\n```python\nfrom google.cloud.sql.connector import connector, iptypes\n\n# note: all parameters below are optional\nconnector = connector(\n    ip_type=iptypes.public,\n    enable_iam_auth=false,\n    timeout=30,\n    credentials=custom_creds # google.auth.credentials.credentials\n)\n```\n\n### using connector as a context manager\n\nthe `connector` object can also be used as a context manager in order to\nautomatically close and cleanup resources, removing the need for explicit\ncalls to `connector.close()`.\n\nconnector as a context manager:\n\n```python\nfrom google.cloud.sql.connector import connector\nimport pymysql\nimport sqlalchemy\n\n# helper function to return sqlalchemy connection pool\ndef init_connection_pool(connector: connector) -> sqlalchemy.engine.engine:\n    # function used to generate database connection\n    def getconn() -> pymysql.connections.connection:\n        conn = connector.connect(\n            \"project:region:instance\",\n            \"pymysql\",\n            user=\"my-user\",\n            password=\"my-password\",\n            db=\"my-db-name\"\n        )\n        return conn\n\n    # create connection pool\n    pool = sqlalchemy.create_engine(\n        \"mysql+pymysql://\",\n        creator=getconn,\n    )\n    return pool\n\n# initialize cloud sql python connector as context manager\nwith connector() as connector:\n    # initialize connection pool\n    pool = init_connection_pool(connector)\n    # insert statement\n    insert_stmt = sqlalchemy.text(\n        \"insert into my_table (id, title) values (:id, :title)\",\n    )\n\n    # interact with cloud sql database using connection pool\n    with pool.connect() as db_conn:\n        # insert into database\n        db_conn.execute(insert_stmt, parameters={\"id\": \"book1\", \"title\": \"book one\"})\n\n        # commit transaction (sqlalchemy v2.x.x is commit as you go)\n        db_conn.commit()\n\n        # query database\n        result = db_conn.execute(sqlalchemy.text(\"select * from my_table\")).fetchall()\n\n        # do something with the results\n        for row in result:\n            print(row)\n```\n\n### specifying ip address type\n\nthe cloud sql python connector can be used to connect to cloud sql instances\nusing both public and private ip addresses, as well as\n[private service connect][psc] (psc). to specify which ip address type to connect\nwith, set the `ip_type` keyword argument when initializing a `connector()` or when\ncalling `connector.connect()`.\n\npossible values for `ip_type` are `iptypes.public` (default value),\n`iptypes.private`, and `iptypes.psc`.\n\nexample:\n\n```python\nfrom google.cloud.sql.connector import iptypes\n\nconn = connector.connect(\n    \"project:region:instance\",\n    \"pymysql\",\n    ip_type=iptypes.private # use private ip\n... insert other kwargs ...\n)\n```\n\nnote: if specifying private ip or private service connect, your application must be\nattached to the proper vpc network to connect to your cloud sql instance. for most\napplications this will require the use of a [vpc connector][vpc-connector].\n\n[psc]: https://cloud.google.com/vpc/docs/private-service-connect\n[vpc-connector]: https://cloud.google.com/vpc/docs/configure-serverless-vpc-access#create-connector\n\n### automatic iam database authentication\n\nconnections using [automatic iam database authentication](https://cloud.google.com/sql/docs/postgres/authentication#automatic) are supported when using postgres or mysql drivers.\nfirst, make sure to [configure your cloud sql instance to allow iam authentication](https://cloud.google.com/sql/docs/postgres/create-edit-iam-instances#configure-iam-db-instance)\nand [add an iam database user](https://cloud.google.com/sql/docs/postgres/create-manage-iam-users#creating-a-database-user).\n\nnow, you can connect using user or service account credentials instead of a password.\nin the call to connect, set the `enable_iam_auth` keyword argument to true and the `user` argument to the appropriately formatted iam principal.\n> postgres: for an iam user account, this is the user's email address. for a service account, it is the service account's email without the `.gserviceaccount.com` domain suffix.\n\n> mysql: for an iam user account, this is the user's email address, without the @ or domain name. for example, for `test-user@gmail.com`, set the `user` argument to `test-user`. for a service account, this is the service account's email address without the `@project-id.iam.gserviceaccount.com` suffix.\n\nexample:\n\n```python\nconn = connector.connect(\n     \"project:region:instance\",\n     \"pg8000\",\n     user=\"postgres-iam-user@gmail.com\",\n     db=\"my-db-name\",\n     enable_iam_auth=true,\n )\n```\n\n### sql server active directory authentication\n\nactive directory authentication for sql server instances is currently only supported on windows. first, make sure to follow [these steps](https://cloud.google.com/blog/topics/developers-practitioners/creating-sql-server-instance-integrated-active-directory-using-google-cloud-sql) to set up a managed ad domain and join your cloud sql instance to the domain. [see here for more info on cloud sql active directory integration](https://cloud.google.com/sql/docs/sqlserver/ad).\n\nonce you have followed the steps linked above, you can run the following code to return a connection object:\n\n```python\nconn = connector.connect(\n    \"project:region:instance\",\n    \"pytds\",\n    db=\"my-db-name\",\n    active_directory_auth=true,\n    server_name=\"public.[instance].[location].[project].cloudsql.[domain]\",\n)\n```\n\nor, if using private ip:\n\n```python\nconn = connector.connect(\n    \"project:region:instance\",\n    \"pytds\",\n    db=\"my-db-name\",\n    active_directory_auth=true,\n    server_name=\"private.[instance].[location].[project].cloudsql.[domain]\",\n    ip_type=iptypes.private\n)\n```\n\n### using the python connector with python web frameworks\n\nthe python connector can be used alongside popular python web frameworks such\nas flask, fastapi, etc, to integrate cloud sql databases within your\nweb applications.\n\n#### flask-sqlalchemy\n\n[flask-sqlalchemy](https://flask-sqlalchemy.palletsprojects.com/en/2.x/)\nis an extension for [flask](https://flask.palletsprojects.com/en/2.2.x/)\nthat adds support for [sqlalchemy](https://www.sqlalchemy.org/) to your\napplication. it aims to simplify using sqlalchemy with flask by providing\nuseful defaults and extra helpers that make it easier to accomplish\ncommon tasks.\n\nyou can configure flask-sqlalchemy to connect to a cloud sql database from\nyour web application through the following:\n\n```python\nfrom flask import flask\nfrom flask_sqlalchemy import sqlalchemy\nfrom google.cloud.sql.connector import connector, iptypes\n\n\n# initialize python connector object\nconnector = connector()\n\n# python connector database connection function\ndef getconn():\n    conn = connector.connect(\n        \"project:region:instance-name\", # cloud sql instance connection name\n        \"pg8000\",\n        user=\"my-user\",\n        password=\"my-password\",\n        db=\"my-database\",\n        ip_type= iptypes.public  # iptypes.private for private ip\n    )\n    return conn\n\n\napp = flask(__name__)\n\n# configure flask-sqlalchemy to use python connector\napp.config['sqlalchemy_database_uri'] = \"postgresql+pg8000://\"\napp.config['sqlalchemy_engine_options'] = {\n    \"creator\": getconn\n}\n\n# initialize the app with the extension\ndb = sqlalchemy()\ndb.init_app(app)\n```\n\nfor more details on how to use flask-sqlalchemy, check out the\n[flask-sqlalchemy quickstarts](https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/quickstart/)\n\n#### fastapi\n\n[fastapi](https://fastapi.tiangolo.com/) is a modern, fast (high-performance),\nweb framework for building apis with python based on standard python type hints.\n\nyou can configure fastapi to connect to a cloud sql database from\nyour web application using [sqlalchemy orm](https://docs.sqlalchemy.org/en/14/orm/)\nthrough the following:\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.engine import engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom google.cloud.sql.connector import connector, iptypes\n\n# helper function to return sqlalchemy connection pool\ndef init_connection_pool(connector: connector) -> engine:\n    # python connector database connection function\n    def getconn():\n        conn = connector.connect(\n            \"project:region:instance-name\", # cloud sql instance connection name\n            \"pg8000\",\n            user=\"my-user\",\n            password=\"my-password\",\n            db=\"my-database\",\n            ip_type= iptypes.public  # iptypes.private for private ip\n        )\n        return conn\n\n    sqlalchemy_database_url = \"postgresql+pg8000://\"\n\n    engine = create_engine(\n        sqlalchemy_database_url , creator=getconn\n    )\n    return engine\n\n# initialize cloud sql python connector\nconnector = connector()\n\n# create connection pool engine\nengine = init_connection_pool(connector)\n\n# create sqlalchemy orm session\nsessionlocal = sessionmaker(autocommit=false, autoflush=false, bind=engine)\n\nbase = declarative_base()\n```\n\nto learn more about integrating a database into your fastapi application,\nfollow along the [fastapi sql database guide](https://fastapi.tiangolo.com/tutorial/sql-databases/#create-the-database-models).\n\n### async driver usage\n\nthe cloud sql connector is compatible with\n[asyncio](https://docs.python.org/3/library/asyncio.html) to improve the speed\nand efficiency of database connections through concurrency. you can use all\nnon-asyncio drivers through the `connector.connect_async` function, in addition\nto the following asyncio database drivers:\n- [asyncpg](https://magicstack.github.io/asyncpg) (postgres)\n\nthe cloud sql connector has a helper `create_async_connector` function that is\nrecommended for asyncio database connections. it returns a `connector`\nobject that uses the current thread's running event loop. this is different\nthan `connector()` which by default initializes a new event loop in a\nbackground thread.\n\nthe `create_async_connector` allows all the same input arguments as the\n[connector](#configuring-the-connector) object.\n\nonce a `connector` object is returned by `create_async_connector` you can call\nits `connect_async` method, just as you would the `connect` method:\n\n```python\nimport asyncpg\n\nimport sqlalchemy\nfrom sqlalchemy.ext.asyncio import asyncengine, create_async_engine\n\nfrom google.cloud.sql.connector import connector, create_async_connector\n\nasync def init_connection_pool(connector: connector) -> asyncengine:\n    # initialize connector object for connections to cloud sql\n    async def getconn() -> asyncpg.connection:\n        conn: asyncpg.connection = await connector.connect_async(\n            \"project:region:instance\",  # cloud sql instance connection name\n            \"asyncpg\",\n            user=\"my-user\",\n            password=\"my-password\",\n            db=\"my-db-name\"\n            # ... additional database driver args\n        )\n        return conn\n\n    # the cloud sql python connector can be used along with sqlalchemy using the\n    # 'async_creator' argument to 'create_async_engine'\n    pool = create_async_engine(\n        \"postgresql+asyncpg://\",\n        async_creator=getconn,\n    )\n    return pool\n\nasync def main():\n    # initialize connector object for connections to cloud sql\n    connector = await create_async_connector()\n\n    # initialize connection pool\n    pool = await init_connection_pool(connector)\n\n    # example query\n    async with pool.connect() as conn:\n        await conn.execute(sqlalchemy.text(\"select now()\"))\n\n    # close connector\n    await connector.close_async()\n\n    # dispose of connection pool\n    await pool.dispose()\n```\n\nfor more details on additional database arguments with an `asyncpg.connection`\n, please visit the\n[official documentation](https://magicstack.github.io/asyncpg/current/api/index.html).\n\n### async context manager\n\nan alternative to using the `create_async_connector` function is initializing\na `connector` as an async context manager, removing the need for explicit\ncalls to `connector.close_async()` to cleanup resources.\n\n**note:** this alternative requires that the running event loop be\npassed in as the `loop` argument to `connector()`.\n\n```python\nimport asyncio\nimport asyncpg\n\nimport sqlalchemy\nfrom sqlalchemy.ext.asyncio import asyncengine, create_async_engine\n\nfrom google.cloud.sql.connector import connector\n\nasync def init_connection_pool(connector: connector) -> asyncengine:\n    # initialize connector object for connections to cloud sql\n    async def getconn() -> asyncpg.connection:\n            conn: asyncpg.connection = await connector.connect_async(\n                \"project:region:instance\",  # cloud sql instance connection name\n                \"asyncpg\",\n                user=\"my-user\",\n                password=\"my-password\",\n                db=\"my-db-name\"\n                # ... additional database driver args\n            )\n            return conn\n\n    # the cloud sql python connector can be used along with sqlalchemy using the\n    # 'async_creator' argument to 'create_async_engine'\n    pool = create_async_engine(\n        \"postgresql+asyncpg://\",\n        async_creator=getconn,\n    )\n    return pool\n\nasync def main():\n    # initialize connector object for connections to cloud sql\n    loop = asyncio.get_running_loop()\n    async with connector(loop=loop) as connector:\n        # initialize connection pool\n        pool = await init_connection_pool(connector)\n\n        # example query\n        async with pool.connect() as conn:\n            await conn.execute(sqlalchemy.text(\"select now()\"))\n\n        # dispose of connection pool\n        await pool.dispose()\n```\n\n## support policy\n\n### major version lifecycle\n\nthis project uses [semantic versioning](https://semver.org/), and uses the\nfollowing lifecycle regarding support for a major version:\n\n**active** - active versions get all new features and security fixes (that\nwouldn\u2019t otherwise introduce a breaking change). new major versions are\nguaranteed to be \"active\" for a minimum of 1 year.\n**deprecated** - deprecated versions continue to receive security and critical\nbug fixes, but do not receive new features. deprecated versions will be publicly\nsupported for 1 year.\n**unsupported** - any major version that has been deprecated for >=1 year is\nconsidered publicly unsupported.\n\n### supported python versions\n\nwe follow the [python version support policy][pyver] used by google cloud\nlibraries for python. changes in supported python versions will be\nconsidered a minor change, and will be listed in the release notes.\n\n[pyver]: https://cloud.google.com/python/docs/supported-python-versions\n\n### release cadence\nthis project aims for a minimum monthly release cadence. if no new\nfeatures or fixes have been added, a new patch version with the latest\ndependencies is released.\n\n### contributing\n\nwe welcome outside contributions. please see our\n[contributing guide](contributing.md) for details on how best to contribute.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "cloud-sql-python-connector",
  "package_url": "https://pypi.org/project/cloud-sql-python-connector/",
  "project_url": "https://pypi.org/project/cloud-sql-python-connector/",
  "project_urls": {
    "Homepage": "https://github.com/GoogleCloudPlatform/cloud-sql-python-connector"
  },
  "release_url": "https://pypi.org/project/cloud-sql-python-connector/1.5.0/",
  "requires_dist": [
    "aiohttp",
    "cryptography (>=38.0.3)",
    "Requests",
    "google-auth",
    "asyncpg (>=0.29.0) ; extra == 'asyncpg'",
    "pg8000 (>=1.30.3) ; extra == 'pg8000'",
    "PyMySQL (>=1.1.0) ; extra == 'pymysql'",
    "python-tds (>=1.13.0) ; extra == 'pytds'"
  ],
  "requires_python": ">=3.8",
  "summary": "the cloud sql python connector is a library that can be used alongside a database driver to allow users with sufficient permissions to connect to a cloud sql database without having to manually allowlist ips or manage ssl certificates.",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "google_llc",
    "googleapis-packages@google.com"
  ],
  "kwds": "postgres_python_connector googlecloudplatform pypi _cloud cloudsql",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_cloud_sql_python_connector",
  "homepage": "https://github.com/googlecloudplatform/cloud-sql-python-connector",
  "release_count": 34,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_asyncpg",
    "pypi_cryptography",
    "pypi_google_auth",
    "pypi_pg8000",
    "pypi_pymysql",
    "pypi_python_tds",
    "pypi_requests"
  ],
  "documentation_summary": "The Cloud SQL Python Connector, version 1.7.0 released on February 13, 2024, is a library designed to facilitate connections to Cloud SQL databases for Python applications. It simplifies database connectivity by eliminating the need for manual IP allowlisting or SSL certificate management, leveraging IAM for authorization, and ensuring improved security through TLS 1.3 encryption. The connector supports various database drivers like pymysql, pg8000, asyncpg, and pytds for different SQL databases. It requires Python version 3.8 or higher and is licensed under the Apache Software License 2.0. The connector also offers features like IAM DB Authentication and is compatible with libraries for connection pooling, such as SQLAlchemy, to enhance connection management efficiency. Additionally, it provides guidance for integrating with Python web frameworks like Flask and FastAPI, and supports asynchronous operations for improved performance.",
  "embedding": [
    -0.013245602138340473,
    0.00416138581931591,
    0.015724726021289825,
    -0.03550104796886444,
    -0.011233970522880554,
    0.03017447330057621,
    -0.01062481477856636,
    -0.014860573224723339,
    0.016928870230913162,
    -0.03113778866827488,
    -0.00533719826489687,
    0.01579555682837963,
    -0.027610350400209427,
    0.022963766008615494,
    -0.010398151353001595,
    -0.01633388176560402,
    0.023502089083194733,
    -0.020357144996523857,
    -0.002555267885327339,
    0.002241835929453373,
    0.032611098140478134,
    -0.001764604588970542,
    -0.02530122548341751,
    -0.00778444716706872,
    -0.00921525526791811,
    0.015115569345653057,
    0.00033379625529050827,
    -0.011453550308942795,
    0.012756860814988613,
    -0.0053017823956906796,
    0.032044440507888794,
    -0.004377423319965601,
    -0.013677678070962429,
    -0.010065240785479546,
    -0.007139875087887049,
    -0.004572211764752865,
    0.00778444716706872,
    -0.005489487200975418,
    0.014775575138628483,
    0.03858932480216026,
    0.010525649413466454,
    -0.003814308438450098,
    -0.011396883986890316,
    0.014435580931603909,
    -0.024380408227443695,
    0.013628095388412476,
    0.004646585322916508,
    -0.027426186949014664,
    -0.0033840034157037735,
    0.003955972380936146,
    -0.0024808940943330526,
    0.012516031041741371,
    -0.003640769748017192,
    -0.017212199047207832,
    0.0018752797041088343,
    0.0062509323470294476,
    -0.016376379877328873,
    0.023261260241270065,
    -0.005981770344078541,
    -0.011106472462415695,
    0.025032062083482742,
    0.006325306370854378,
    -0.01677303947508335,
    -0.01634804718196392,
    -0.013514763675630093,
    0.004533254075795412,
    -0.02388458326458931,
    0.010369818657636642,
    0.009541083127260208,
    -0.005351364612579346,
    0.026887863874435425,
    0.05003579333424568,
    0.023275427520275116,
    -0.019252164289355278,
    0.035982705652713776,
    -0.025612885132431984,
    -0.012381450273096561,
    0.027596184983849525,
    -0.03754100948572159,
    -0.009151507169008255,
    -0.008889428339898586,
    -0.013536013662815094,
    -4.836504012928344e-05,
    0.007628616876900196,
    -0.005011370871216059,
    0.020753804594278336,
    -0.015965554863214493,
    -0.00788361206650734,
    -0.018770504742860794,
    -0.0020134022925049067,
    0.007058418355882168,
    0.017013870179653168,
    -0.010816060937941074,
    0.012452282011508942,
    0.010128989815711975,
    0.032327767461538315,
    0.0008092566858977079,
    0.023077096790075302,
    0.013358932919800282,
    -0.028970327228307724,
    -0.014577245339751244,
    0.011361468583345413,
    -0.002680994803085923,
    -0.010518565773963928,
    -0.04975246265530586,
    -0.030231138691306114,
    0.02287876605987549,
    -0.006279265508055687,
    0.03728601336479187,
    0.024366240948438644,
    -0.0018504884792491794,
    0.01998881809413433,
    -0.018246347084641457,
    -0.03125112131237984,
    -0.0012705507688224316,
    -0.009087758138775826,
    0.021263794973492622,
    0.002542872214689851,
    0.01452057994902134,
    0.0038001418579369783,
    0.001133313518948853,
    0.011297719553112984,
    -0.015129735693335533,
    -0.01410267036408186,
    -0.006328847724944353,
    -0.01362101174890995,
    -0.019606323912739754,
    -0.012083955109119415,
    0.017481360584497452,
    -0.02358708716928959,
    -0.021603789180517197,
    0.02348792366683483,
    0.012700194492936134,
    -0.010490233078598976,
    -0.011743961833417416,
    -0.005110535770654678,
    -0.016404712572693825,
    -0.03756934404373169,
    -0.037512678653001785,
    -0.020597973838448524,
    -0.008421936072409153,
    0.020909635350108147,
    -0.007451536599546671,
    -0.02637787163257599,
    0.00152731710113585,
    0.03297942504286766,
    0.006527177523821592,
    0.014244334772229195,
    0.0024649568367749453,
    -0.006367805413901806,
    0.00260130874812603,
    -0.012693111784756184,
    -0.05292574316263199,
    -0.01306852139532566,
    0.0011182617163285613,
    -0.002503914525732398,
    -0.02572621777653694,
    0.03371607884764671,
    0.001949653378687799,
    -0.00170174113009125,
    -0.01844467781484127,
    0.02851700223982334,
    -0.04422755911946297,
    -0.015540561638772488,
    0.022397108376026154,
    0.03340441733598709,
    -0.01592305488884449,
    -0.024692067876458168,
    -0.0011235740967094898,
    -0.0046855430118739605,
    0.02065463922917843,
    0.013118104077875614,
    -0.0237287525087595,
    0.003934722859412432,
    0.009378169663250446,
    0.00927900429815054,
    0.012246869504451752,
    0.006913212593644857,
    -0.023969581350684166,
    -0.007770280819386244,
    0.0272420234978199,
    0.020994633436203003,
    0.015554727986454964,
    0.02416791021823883,
    -0.022113779559731483,
    -0.010306069627404213,
    -0.017920520156621933,
    0.0001844954676926136,
    0.0024100621230900288,
    0.0008552975486963987,
    0.016928870230913162,
    0.039042651653289795,
    -0.019167164340615273,
    -0.01688637211918831,
    -0.5702833533287048,
    -0.015738891437649727,
    -0.018543843179941177,
    -0.026448704302310944,
    -0.0011288864770904183,
    -0.0032830676063895226,
    -0.008259022608399391,
    0.016943037509918213,
    -0.019337162375450134,
    0.03756934404373169,
    -0.013996422290802002,
    0.02208544686436653,
    -0.005124702118337154,
    0.008733597584068775,
    0.010986058041453362,
    -0.017778856679797173,
    0.028800329193472862,
    -0.009130257181823254,
    -0.02222711220383644,
    0.01160229742527008,
    0.007079667877405882,
    0.041025951504707336,
    0.010284820571541786,
    0.011715628206729889,
    0.006959253456443548,
    0.02316209487617016,
    -0.00900984276086092,
    -0.006102185230702162,
    0.030486134812235832,
    -6.773319182684645e-05,
    -0.00894609373062849,
    0.010221071541309357,
    0.03926931321620941,
    -0.01027773693203926,
    0.04765583574771881,
    -0.018048018217086792,
    -0.005461154505610466,
    0.04723083972930908,
    0.0045828367583453655,
    0.04499254748225212,
    0.002971406327560544,
    -0.021306294947862625,
    -0.00985274463891983,
    0.019195497035980225,
    0.030202805995941162,
    0.0033149421215057373,
    0.011644796468317509,
    0.012948106974363327,
    0.003909931518137455,
    -0.011892708949744701,
    0.002266627037897706,
    -0.011885625310242176,
    0.01410267036408186,
    -0.017920520156621933,
    0.018260514363646507,
    -0.013897256925702095,
    0.03017447330057621,
    -0.01131896860897541,
    -0.0009703997056931257,
    -0.011906875297427177,
    0.015724726021289825,
    -0.00510345259681344,
    0.0005201732274144888,
    -0.025244558230042458,
    -0.006640508770942688,
    0.00803944282233715,
    -0.010568148456513882,
    -0.029976142570376396,
    0.009909410029649734,
    -0.02079630270600319,
    0.03309275582432747,
    -0.007387787569314241,
    0.016248881816864014,
    -0.028602000325918198,
    0.01996048539876938,
    0.047542501240968704,
    0.03521771728992462,
    0.03312108665704727,
    0.02331792563199997,
    0.02989114448428154,
    0.015668058767914772,
    0.007600283715873957,
    0.01762302592396736,
    -0.031364452093839645,
    0.023105429485440254,
    0.03181777894496918,
    -0.01704220287501812,
    -0.02234044298529625,
    -0.01069564651697874,
    -0.01137563493102789,
    0.010355652309954166,
    0.010702729225158691,
    -0.017764689400792122,
    -0.04060095548629761,
    0.022595439106225967,
    0.019053833559155464,
    -0.016107218340039253,
    -0.032327767461538315,
    -0.00032228603959083557,
    -0.006629884243011475,
    -0.007989860139787197,
    -0.020215479657053947,
    -0.02248210646212101,
    -0.0006565249641425908,
    0.05405905470252037,
    -0.0059923953376710415,
    -0.024550404399633408,
    0.00859193317592144,
    0.01083022728562355,
    -0.034141071140766144,
    0.0004079485952388495,
    -0.009470251388847828,
    0.01144646666944027,
    0.0035575421061366796,
    0.024975396692752838,
    -0.0202438123524189,
    0.03754100948572159,
    -0.006123434752225876,
    -0.003375149331986904,
    -0.007309872191399336,
    -0.0025959962513297796,
    0.014761408790946007,
    -0.004600544460117817,
    0.012990606017410755,
    -0.0062509323470294476,
    0.006636967416852713,
    0.008613183163106441,
    -0.0006857432308606803,
    -0.011899791657924652,
    0.0028810955118387938,
    0.010221071541309357,
    0.008563600480556488,
    0.015668058767914772,
    -0.014166419394314289,
    0.02610871009528637,
    0.013854757882654667,
    0.014031837694346905,
    0.009356919676065445,
    -0.0074232034385204315,
    0.0003470772644504905,
    0.001976215513423085,
    0.0010589398443698883,
    0.00463950214907527,
    0.01786385476589203,
    -0.025357890874147415,
    -0.029154490679502487,
    -0.03278109431266785,
    0.011694379150867462,
    -0.004030346404761076,
    -0.016163883730769157,
    -0.008676931262016296,
    -0.02416791021823883,
    -0.02192961610853672,
    0.039467643946409225,
    -0.011928125284612179,
    0.0026066210120916367,
    -0.013507680967450142,
    -0.02544288896024227,
    -0.014116836711764336,
    -0.017268864437937737,
    0.00239235395565629,
    0.015852222219109535,
    0.003878057235851884,
    0.023657919839024544,
    -0.025584552437067032,
    -0.028247838839888573,
    -0.030826127156615257,
    0.027142858132719994,
    -0.018062183633446693,
    -0.035529378801584244,
    -0.013868924230337143,
    -0.016702208667993546,
    0.005563861224800348,
    0.014690577052533627,
    0.0005631151725538075,
    -0.004763458389788866,
    -0.022297943010926247,
    0.011035640724003315,
    -0.011524382047355175,
    0.01319601945579052,
    -0.004533254075795412,
    0.0022329818457365036,
    -0.022269610315561295,
    -0.014152253046631813,
    0.04374590143561363,
    0.0030953625682741404,
    0.0251595601439476,
    0.012728527188301086,
    -0.029409486800432205,
    0.007501118816435337,
    -0.016688041388988495,
    0.02583954855799675,
    -0.026037877425551414,
    0.041139282286167145,
    -0.017382197082042694,
    0.012338951230049133,
    0.016702208667993546,
    -0.004625335801392794,
    -0.010532733052968979,
    0.018940502777695656,
    0.014293916523456573,
    0.008669848553836346,
    0.004313674755394459,
    -0.011283553205430508,
    0.002542872214689851,
    -0.021759619936347008,
    -0.005075119435787201,
    -0.015271400101482868,
    0.029721146449446678,
    -0.01633388176560402,
    0.024635402485728264,
    0.0049157473258674145,
    -0.017920520156621933,
    -0.01117730513215065,
    -0.010157322511076927,
    0.004189718514680862,
    -0.01760885864496231,
    0.007253206800669432,
    -0.032922759652137756,
    0.008089025504887104,
    -0.0018256972543895245,
    0.021547123789787292,
    0.023077096790075302,
    -0.01215478777885437,
    -0.0010297215776517987,
    0.002436624141409993,
    0.02540038898587227,
    0.005372614599764347,
    0.004536795895546675,
    -0.032214436680078506,
    0.007706531789153814,
    0.003863890888169408,
    0.01579555682837963,
    -0.026647035032510757,
    0.02205711416900158,
    0.016815539449453354,
    0.032186105847358704,
    -0.02806367538869381,
    0.019804654642939568,
    -0.03187444433569908,
    0.013649344444274902,
    0.021561289206147194,
    0.021405458450317383,
    -0.005500112194567919,
    0.01501640398055315,
    0.00695217028260231,
    -0.009774829261004925,
    -0.003821391612291336,
    -0.002100171521306038,
    0.016022220253944397,
    -0.0061411429196596146,
    0.019903818145394325,
    0.010808978229761124,
    0.025060394778847694,
    0.003839099546894431,
    0.003637228161096573,
    -0.01396808959543705,
    0.019620491191744804,
    0.038504328578710556,
    0.019237997010350227,
    0.003927639685571194,
    0.006863629911094904,
    0.02345959097146988,
    0.005475320853292942,
    0.04649418592453003,
    0.006158850621432066,
    -0.013436848297715187,
    -0.04074262082576752,
    0.015228900127112865,
    -0.020980466157197952,
    -0.013217269442975521,
    -0.03161944821476936,
    0.00010464335355209187,
    -0.04521920904517174,
    -0.010589398443698883,
    0.016673875972628593,
    -0.007607366889715195,
    0.055107370018959045,
    0.009725246578454971,
    0.0026526618748903275,
    -0.013380182906985283,
    -0.040714289993047714,
    0.028828663751482964,
    -0.013075605034828186,
    -0.014931405894458294,
    -0.014492246322333813,
    -0.04411422833800316,
    0.025244558230042458,
    -0.008499851450324059,
    0.01857217587530613,
    0.002259543864056468,
    0.020583806559443474,
    0.013224352151155472,
    0.0050432453863322735,
    -0.015469729900360107,
    -0.009484417736530304,
    0.0363510325551033,
    -0.0021851700730621815,
    0.0026367248501628637,
    0.006321764551103115,
    -0.0026827657129615545,
    -0.010546899400651455,
    -0.01828884705901146,
    0.028446169570088387,
    0.04640918970108032,
    -0.007642783224582672,
    0.011078139767050743,
    -0.02149045839905739,
    -0.004501379560679197,
    -0.023700419813394547,
    0.0202438123524189,
    0.016858039423823357,
    -0.02768118306994438,
    -0.011821877211332321,
    0.008244856260716915,
    0.014053087681531906,
    0.0058578141033649445,
    -0.011758128181099892,
    0.026335373520851135,
    -0.002668599132448435,
    -0.016957202926278114,
    -0.01634804718196392,
    -0.015257233753800392,
    -0.019606323912739754,
    0.007394870743155479,
    -0.017906352877616882,
    0.004703251179307699,
    0.018473010510206223,
    -0.027950344607234,
    -0.039325978606939316,
    -0.03028780408203602,
    -0.014959738589823246,
    -0.002089546760544181,
    0.014017671346664429,
    0.0035787916276603937,
    0.014506413601338863,
    0.006544885691255331,
    0.029154490679502487,
    0.026363706216216087,
    0.030372802168130875,
    -0.009470251388847828,
    -0.005652401130646467,
    0.0042180512100458145,
    -0.012402700260281563,
    0.0032901507802307606,
    0.005213242024183273,
    0.014860573224723339,
    0.021816285327076912,
    0.06233224272727966,
    0.01430808287113905,
    0.032752759754657745,
    -0.00921525526791811,
    0.004377423319965601,
    -0.02889949455857277,
    -0.012183120474219322,
    0.0011288864770904183,
    0.016673875972628593,
    0.006070310715585947,
    -0.018784672021865845,
    0.0307411290705204,
    0.010100657120347023,
    0.01425850111991167,
    -0.022127946838736534,
    0.037484344094991684,
    0.04017596319317818,
    -0.015228900127112865,
    0.010171488858759403,
    0.005560319405049086,
    0.000788007047958672,
    -0.0376826748251915,
    0.012282285839319229,
    0.018104683607816696,
    -0.0071717496030032635,
    0.010745229199528694,
    0.007897778414189816,
    0.010646063834428787,
    -0.03839099407196045,
    -0.007699448615312576,
    0.02555621974170208,
    0.010313153266906738,
    0.026207875460386276,
    -0.019082166254520416,
    0.013706010766327381,
    -0.028559500351548195,
    -0.04011929780244827,
    -0.019875485450029373,
    0.0010642522247508168,
    -0.0028509919065982103,
    -0.014364749193191528,
    0.004040970932692289,
    -0.002680994803085923,
    0.04397256672382355,
    -0.014485163614153862,
    0.007338204886764288,
    0.007373621221631765,
    -0.03241276741027832,
    -0.018189681693911552,
    0.011828959919512272,
    0.04227259382605553,
    0.006102185230702162,
    0.0017628337955102324,
    0.015257233753800392,
    -0.0022949599660933018,
    0.015866389498114586,
    0.012168954126536846,
    -0.031761109828948975,
    -0.005376155953854322,
    -0.03620936721563339,
    -0.001541483448818326,
    -0.013231435790657997,
    0.02025797963142395,
    0.01969132199883461,
    0.004519087728112936,
    0.010702729225158691,
    0.004030346404761076,
    0.0008119128760881722,
    -0.008783180266618729,
    -0.02191545069217682,
    0.03572770953178406,
    0.03620936721563339,
    0.009597748517990112,
    0.0005024651763960719,
    0.018968835473060608,
    -0.00921525526791811,
    -0.028106175363063812,
    -0.04640918970108032,
    -0.004529712721705437,
    -0.009583582170307636,
    0.0062898900359869,
    0.011453550308942795,
    0.004731583874672651,
    -0.001827468047849834,
    -0.010426484048366547,
    -0.010568148456513882,
    0.022099614143371582,
    -0.02639203891158104,
    -0.014364749193191528,
    -0.030514467507600784,
    0.006201350130140781,
    0.009137339890003204,
    -0.01926632970571518,
    0.03057113289833069,
    0.0020275686401873827,
    -0.013167686760425568,
    0.011715628206729889,
    -0.02918282337486744,
    0.027964511886239052,
    0.040855951607227325,
    -0.011035640724003315,
    0.017566360533237457,
    0.01020690519362688,
    -0.021263794973492622,
    -0.008152774535119534,
    0.01286310888826847,
    0.01688637211918831,
    0.0032317142467945814,
    0.010816060937941074,
    -0.015158068388700485,
    -0.005361989606171846,
    -0.0017548651667311788,
    -0.001708824303932488,
    0.020300477743148804,
    -0.012367283925414085,
    -0.03439606726169586,
    -0.028148675337433815,
    -0.0039736805483698845,
    0.006658216938376427,
    -0.0265337023884058,
    0.006491761654615402,
    -0.015073070302605629,
    -0.016532210633158684,
    -0.005117618944495916,
    0.009392336010932922,
    0.01138271763920784,
    0.00886109471321106,
    0.0025924546644091606,
    -0.009866910986602306,
    -0.016673875972628593,
    -0.01514390204101801,
    0.026052044704556465,
    0.0029165116138756275,
    -0.008400686085224152,
    0.0265337023884058,
    0.021051298826932907,
    0.02906949259340763,
    0.0030422385316342115,
    0.028276173397898674,
    0.021745452657341957,
    -0.008195273578166962,
    -0.006835297215729952,
    -0.007919028401374817,
    0.01857217587530613,
    0.00894609373062849,
    0.0111843878403306,
    0.013677678070962429,
    0.029919477179646492,
    0.0064528039656579494,
    -0.012310618534684181,
    -0.013578512705862522,
    -0.0017451257444918156,
    -0.0030440092086791992,
    -0.003998471889644861,
    -0.02989114448428154,
    -0.030769461765885353,
    -0.040714289993047714,
    -0.009094840846955776,
    -0.003594728885218501,
    0.018784672021865845,
    -0.02474873512983322,
    -0.005910938605666161,
    0.009866910986602306,
    -0.02710036002099514,
    0.0293244868516922,
    0.0027695349417626858,
    0.01277810987085104,
    -0.011984790675342083,
    0.019521325826644897,
    0.028417836874723434,
    0.020512975752353668,
    -0.005163659807294607,
    0.001506067463196814,
    -0.03244109824299812,
    0.0050361622124910355,
    0.008988592773675919,
    -0.005393864121288061,
    0.02697286196053028,
    -0.013897256925702095,
    0.02820534072816372,
    -0.007862363010644913,
    0.014803907833993435,
    0.0035557711962610483,
    -0.021037131547927856,
    0.02082463540136814,
    -0.038475994020700455,
    0.005315948743373156,
    -0.04632418975234032,
    -0.021844618022441864,
    -0.025938713923096657,
    1.3716801731789019e-05,
    -0.008195273578166962,
    0.013394349254667759,
    0.036407697945833206,
    -0.008117358200252056,
    -0.014350582845509052,
    0.01459141168743372,
    0.004526170901954174,
    0.05632568150758743,
    0.012919774278998375,
    0.037229347974061966,
    0.03272442892193794,
    -0.002450790489092469,
    -0.001910695806145668,
    -0.01719803363084793,
    -0.009618998505175114,
    -0.014053087681531906,
    0.014145169407129288,
    0.045587535947561264,
    -0.024054579436779022,
    -0.018756339326500893,
    -0.006622801069170237,
    -0.01580972410738468,
    -0.009902327321469784,
    -0.00625447416678071,
    0.02246794104576111,
    0.019762154668569565,
    -0.0030245305970311165,
    -0.028814496472477913,
    -0.034141071140766144,
    0.00788361206650734,
    -0.00865568220615387,
    -0.03363107889890671,
    0.016928870230913162,
    0.02319042757153511,
    -0.03739934787154198,
    -0.02041381038725376,
    -0.008960260078310966,
    0.02416791021823883,
    -0.007826946675777435,
    0.01803385093808174,
    0.01095772534608841,
    -0.011531464755535126,
    -0.019634656608104706,
    -0.0391276478767395,
    -0.02316209487617016,
    0.015073070302605629,
    0.03195944055914879,
    -0.013408515602350235,
    -0.009491500444710255,
    0.03295109048485756,
    0.003504417836666107,
    0.0074161202646791935,
    0.002799638547003269,
    -0.0032157772220671177,
    0.04536087438464165,
    -0.034991055727005005,
    -0.0039665973745286465,
    -0.02180211991071701,
    0.001446745591238141,
    0.012884357944130898,
    -0.0012918002903461456,
    -0.010383985005319118,
    -0.006176558788865805,
    -0.006282806862145662,
    -0.0016725228633731604,
    0.0033556704875081778,
    -0.02066880464553833,
    -0.029976142570376396,
    0.007501118816435337,
    0.0009889930952340364,
    0.005255741532891989,
    -0.01160229742527008,
    0.043235912919044495,
    0.01942216046154499,
    -0.020881302654743195,
    -0.024507904425263405,
    -0.030146140605211258,
    -0.02316209487617016,
    0.006148226093500853,
    0.014046004973351955,
    0.021178796887397766,
    -0.017495527863502502,
    0.039439309388399124,
    0.01718386635184288,
    0.008188189938664436,
    -0.0015158068854361773,
    0.0009509208612143993,
    -0.021292127668857574,
    0.02150462381541729,
    -0.0026384955272078514,
    -0.005634693428874016,
    0.0237429179251194,
    0.0041224281303584576,
    -0.016376379877328873,
    -0.010001491755247116,
    -0.007154041435569525,
    0.02457873709499836,
    0.010497316718101501,
    -0.016277216374874115,
    -0.0024065205361694098,
    0.041989266872406006,
    -0.001050085760653019,
    -0.01733969710767269,
    0.0010005033109337091,
    0.010731062851846218,
    0.0174530278891325,
    -0.005245116539299488,
    0.0032795260194689035,
    0.014470997266471386,
    -0.010978974401950836,
    -0.015384730882942677,
    0.01622054912149906,
    -0.002190482569858432,
    -0.03683269023895264,
    -0.026717865839600563,
    -0.007933194749057293,
    0.004009096417576075,
    0.0006007447373121977,
    0.02124962955713272,
    -0.013528930023312569,
    -0.022538773715496063,
    -0.03671935945749283,
    0.038900986313819885,
    -0.004947621840983629,
    0.005751566030085087,
    0.01521473377943039,
    0.029154490679502487,
    0.030627798289060593,
    0.02654786966741085,
    -0.0030811962205916643,
    -0.010936475358903408,
    -0.01312518771737814,
    -0.02402624674141407,
    -0.02834700420498848,
    -0.01095772534608841,
    -0.005659484304487705,
    0.00335389981046319,
    -0.002615475095808506,
    -0.03788100555539131,
    -0.01719803363084793,
    -0.006187183782458305,
    -0.028262006118893623,
    -0.005535528063774109,
    -0.04017596319317818,
    0.035416048020124435,
    0.0059923953376710415,
    0.007387787569314241,
    0.011049807071685791,
    -9.047693311003968e-06,
    0.011368551291525364,
    0.02847450226545334,
    -0.008577766828238964,
    0.0069273789413273335,
    -0.001447630929760635,
    -0.009413585066795349,
    0.007982777431607246,
    0.016418879851698875,
    -0.048392489552497864,
    0.0008460008539259434,
    0.014548912644386292,
    -0.004483671858906746,
    0.0021603789646178484,
    0.045474205166101456,
    0.003665560856461525,
    -0.0059923953376710415,
    0.002284334972500801,
    -0.0027943262830376625,
    -0.0015574207063764334,
    0.01633388176560402,
    -0.006548427045345306,
    -0.037371013313531876,
    -0.017963020130991936,
    0.01733969710767269,
    0.02096630074083805,
    0.021263794973492622,
    0.0153705645352602,
    0.002087776083499193,
    -0.01800551824271679,
    -0.011595213785767555,
    0.005216783843934536,
    -0.009654414840042591,
    0.02892782725393772,
    0.0307411290705204,
    0.01459141168743372,
    -0.022312110289931297,
    0.027752015739679337,
    0.03144945204257965,
    -0.007486952468752861,
    -0.002100171521306038,
    -0.029352819547057152,
    0.01286310888826847,
    -0.01981882005929947,
    0.017523860558867455,
    0.03856099396944046,
    -0.01605055294930935,
    -0.001969132339581847,
    -0.025655385106801987,
    0.020286312326788902,
    -6.092666808399372e-05,
    -0.012331867590546608,
    -0.013628095388412476,
    -0.011651880107820034,
    0.012792276218533516,
    0.004986579529941082,
    0.010766478255391121,
    -0.027752015739679337,
    0.011403967626392841,
    0.0011094077490270138,
    -0.0005768388509750366,
    0.0016167425783351064,
    -0.007061959709972143,
    -0.012431032955646515,
    -0.024281242862343788,
    -0.003619519993662834,
    0.006757381837815046,
    0.00523803336545825,
    -0.0335177481174469,
    -0.019096333533525467,
    -0.01803385093808174,
    -0.013018938712775707,
    -0.0031502575147897005,
    0.19379661977291107,
    0.03306442126631737,
    0.018246347084641457,
    0.024663735181093216,
    0.0005746253882534802,
    0.021207129582762718,
    -0.01514390204101801,
    0.02139129303395748,
    -0.012147704139351845,
    0.02388458326458931,
    -0.019521325826644897,
    -0.02389874868094921,
    -0.0029926560819149017,
    -0.005078661255538464,
    0.017396362498402596,
    0.00971816387027502,
    -0.01474724244326353,
    -0.048137493431568146,
    -0.018798837438225746,
    -0.013373099267482758,
    0.006647591944783926,
    -0.023417090997099876,
    -0.029381154105067253,
    -0.02039964310824871,
    0.006700716447085142,
    -0.013422681950032711,
    0.008386519737541676,
    -0.012183120474219322,
    0.014803907833993435,
    0.02544288896024227,
    -0.01898300088942051,
    0.03550104796886444,
    0.0075577846728265285,
    -0.01067439652979374,
    -0.041904266923666,
    -0.015313899144530296,
    0.01871383935213089,
    -0.019237997010350227,
    -0.016305549070239067,
    0.018345512449741364,
    -0.007798613514751196,
    -0.020484641194343567,
    0.007100917398929596,
    -0.01871383935213089,
    -0.014818074181675911,
    -0.013514763675630093,
    -0.025584552437067032,
    0.019620491191744804,
    0.004547420423477888,
    0.006870713084936142,
    -0.012140621431171894,
    -0.0048201242461800575,
    0.013783926144242287,
    -0.0024082912132143974,
    -0.0004533254250418395,
    -0.012211453169584274,
    0.011170221492648125,
    0.006438637617975473,
    0.016702208667993546,
    -0.014116836711764336,
    -0.015965554863214493,
    0.042669255286455154,
    -0.03745601326227188,
    0.005567402578890324,
    -0.02736952155828476,
    0.021292127668857574,
    -0.03507605195045471,
    0.004869706463068724,
    -0.018756339326500893,
    -0.01325976848602295,
    -0.007961527444422245,
    -0.021844618022441864,
    -0.01911049894988537,
    0.002622558269649744,
    -0.0265195369720459,
    -0.020286312326788902,
    0.048109158873558044,
    0.0007769395597279072,
    0.03827766329050064,
    0.026151210069656372,
    0.00509282760322094,
    0.02666120044887066,
    -0.000495381944347173,
    -0.0008672504918649793,
    -0.010773561894893646,
    -0.005333656910806894,
    0.021957948803901672,
    -0.026859531179070473,
    -0.021844618022441864,
    -0.0039949300698935986,
    0.003183902706950903,
    -0.018643006682395935,
    -0.008761930279433727,
    -0.023303760215640068,
    -0.008577766828238964,
    0.01620638370513916,
    -0.011588131077587605,
    0.021957948803901672,
    -0.011488965712487698,
    0.006116351578384638,
    -0.024097079411149025,
    0.06601551175117493,
    0.0057621910236775875,
    -0.008492767810821533,
    -0.039864301681518555,
    0.007129250559955835,
    0.011212720535695553,
    0.020583806559443474,
    0.0046997093595564365,
    -0.02316209487617016,
    -0.014803907833993435,
    -0.014832240529358387,
    0.00433138245716691,
    -0.00548240402713418,
    0.0001651273196330294,
    0.005687817465513945,
    -2.2287207684712484e-05,
    -0.0022294402588158846,
    -0.019209664314985275,
    0.007848195731639862,
    0.0031573406886309385,
    -0.023771250620484352,
    0.003382232505828142,
    -0.011949374340474606,
    -0.01929466240108013,
    -0.030146140605211258,
    -0.015328065492212772,
    0.016263049095869064,
    -0.004235759377479553,
    -0.011984790675342083,
    0.008407769724726677,
    -0.028177008032798767,
    0.011595213785767555,
    0.007122167386114597,
    -0.0015282024396583438,
    0.013188935816287994,
    0.00803944282233715,
    -0.023813750594854355,
    0.014931405894458294,
    0.002270168624818325,
    -0.011191471479833126,
    -0.012119371443986893,
    0.013103937730193138,
    -0.007954444736242294,
    -0.008584849536418915,
    -0.014619744382798672,
    0.010837310925126076,
    -0.019790487363934517,
    0.006385513581335545,
    -0.0062296828255057335,
    -0.004912205971777439,
    0.01529973279684782,
    0.0048201242461800575,
    -0.02109379880130291,
    0.01716969907283783,
    -0.013316433876752853,
    -0.024366240948438644,
    -0.02778034843504429,
    0.013082687743008137,
    0.004873248282819986,
    0.005758649203926325,
    -0.00484845694154501,
    0.009604832157492638,
    0.002831513062119484,
    -0.013833507895469666,
    -0.014201834797859192,
    -0.17827022075653076,
    0.026760365813970566,
    0.005369072780013084,
    -0.04493588209152222,
    0.009066508151590824,
    0.007281539496034384,
    -0.00017265323549509048,
    -0.017127200961112976,
    -0.006279265508055687,
    -0.039014317095279694,
    0.01089397631585598,
    -0.0012298222864046693,
    -0.0009757121442817152,
    -0.007664032746106386,
    0.019903818145394325,
    0.010766478255391121,
    -0.013217269442975521,
    -0.001676949905231595,
    0.02904115989804268,
    -0.006357180420309305,
    0.034962721168994904,
    -0.040997616946697235,
    -0.006056144367903471,
    0.00764986639842391,
    0.010086490772664547,
    -0.03586937487125397,
    -0.03739934787154198,
    -0.0015255463076755404,
    -0.0334894135594368,
    -0.007352371700108051,
    0.013387265615165234,
    0.006513011176139116,
    0.018628841266036034,
    -0.0015113798435777426,
    0.01556889433413744,
    0.010766478255391121,
    0.017410529777407646,
    -0.016928870230913162,
    -0.016999702900648117,
    0.015243067406117916,
    0.021277962252497673,
    0.009257755242288113,
    0.028276173397898674,
    0.0074302866123616695,
    -0.0015299732331186533,
    0.01542723085731268,
    0.00830152165144682,
    -0.030061140656471252,
    0.029097825288772583,
    -0.016560543328523636,
    0.04918580874800682,
    -0.02430957555770874,
    0.005305323749780655,
    0.01860050857067108,
    0.009810245595872402,
    0.01939382776618004,
    -0.005797606892883778,
    0.016716374084353447,
    0.005507195368409157,
    0.011170221492648125,
    0.008329854346811771,
    -0.00043960168841294944,
    -0.022014616057276726,
    0.006070310715585947,
    -0.02569788508117199,
    -0.035699374973773956,
    0.011843126267194748,
    0.051594097167253494,
    -0.019733821973204613,
    0.023247092962265015,
    0.015087236650288105,
    0.02878616377711296,
    -0.032752759754657745,
    0.00032936924253590405,
    -0.0008017307845875621,
    0.008599016815423965,
    -0.039722640067338943,
    0.03501938655972481,
    0.027695348486304283,
    -0.015413063578307629,
    -0.0251595601439476,
    0.03533104807138443,
    -0.015838056802749634,
    0.008776096627116203,
    -0.015398897230625153,
    -0.0029820313211530447,
    -0.003835557959973812,
    -0.016829706728458405,
    -0.014860573224723339,
    0.00614468427374959,
    0.03326275199651718,
    -0.03000447526574135,
    0.0032140063121914864,
    -0.028148675337433815,
    0.017991352826356888,
    0.015753058716654778,
    0.01803385093808174,
    -0.007607366889715195,
    0.014067254029214382,
    -0.015313899144530296,
    -0.010348569601774216,
    0.005779899191111326,
    -0.02052714116871357,
    0.0018894461682066321,
    0.00733112171292305,
    0.02528705820441246,
    -0.002194024156779051,
    -0.0048130410723388195,
    0.019337162375450134,
    -0.011127722449600697,
    0.018473010510206223,
    0.0006038435967639089,
    0.028035342693328857,
    0.03142111748456955,
    -0.011552714742720127,
    0.014917239546775818,
    0.0020027775317430496,
    -0.004508462734520435,
    0.030202805995941162,
    0.0074090370908379555,
    0.018954668194055557,
    -0.023997914046049118,
    0.014903073199093342,
    0.006435095798224211,
    -0.005308865569531918,
    -0.006527177523821592,
    -0.10874143242835999,
    -0.014718909747898579,
    0.02906949259340763,
    -0.005641776602715254,
    -0.025499554350972176,
    -0.02065463922917843,
    0.001516692223958671,
    0.02766701579093933,
    -0.040572624653577805,
    0.0051459516398608685,
    0.0007224873988889158,
    -0.002629641443490982,
    -0.011906875297427177,
    0.0017221053130924702,
    -0.005624068435281515,
    0.0025818299036473036,
    -0.022241277620196342,
    0.015243067406117916,
    -0.008131524547934532,
    -0.0010571690509095788,
    -0.005361989606171846,
    0.013911423273384571,
    -0.010199821554124355,
    0.004490755032747984,
    -0.021986283361911774,
    -0.019082166254520416,
    -0.0405442900955677,
    0.025046229362487793,
    -0.008535267785191536,
    -0.008549434132874012,
    0.005326573736965656,
    -0.015285566449165344,
    -0.020045483484864235,
    0.0046855430118739605,
    -0.003058175789192319,
    -0.007005294319242239,
    -0.020881302654743195,
    -0.004968871362507343,
    0.034849390387535095,
    -0.01556889433413744,
    0.01494557224214077,
    -0.024777067825198174,
    0.010631897486746311,
    -0.009519834071397781,
    -0.03113778866827488,
    -0.00026318550226278603,
    0.0022577729541808367,
    0.014435580931603909,
    0.03436773270368576,
    -0.009576499462127686,
    -0.010787728242576122,
    0.01459141168743372,
    0.010518565773963928,
    0.009250671602785587,
    0.02949448488652706,
    0.02037131041288376,
    -0.014761408790946007,
    0.012176036834716797,
    0.0006224370445124805,
    0.02163212187588215,
    0.015880554914474487,
    -0.01579555682837963,
    -0.011531464755535126,
    -0.013507680967450142,
    0.0013953922316432,
    0.01775052398443222,
    0.0195779912173748,
    0.0017637191340327263,
    0.005082203075289726,
    -0.01841634511947632,
    -0.012494781985878944,
    -0.023969581350684166,
    -0.031761109828948975,
    0.013571429066359997,
    -0.024522071704268456,
    -0.012983523309230804,
    0.00830152165144682,
    -0.009186922572553158,
    0.027723683044314384,
    -0.01663137599825859,
    -0.0048201242461800575,
    0.007522368337959051,
    -0.02319042757153511,
    -0.05417238548398018,
    0.02081046998500824,
    0.015979720279574394,
    0.0011244595516473055,
    -0.0043455492705106735,
    0.0377110093832016,
    -0.0391276478767395,
    0.01841634511947632,
    -0.003899306757375598,
    0.01888383738696575,
    0.004543879069387913,
    0.01355018001049757,
    -0.0037080601323395967,
    -0.024267075583338737,
    0.0027040152344852686,
    -0.020852968096733093,
    -0.003208693815395236,
    -0.05490903928875923,
    -0.011977707035839558,
    -0.07723531872034073,
    -0.0004480130155570805,
    0.002100171521306038,
    0.014676409773528576,
    0.012537281028926373,
    -0.027723683044314384,
    -0.00565594295039773,
    -0.010603564791381359,
    0.00426055071875453,
    0.016433045268058777,
    -0.028531167656183243,
    -0.015257233753800392,
    -0.003242339240387082,
    0.010915226303040981,
    0.01647554524242878,
    0.00670779962092638,
    0.04207426309585571,
    -0.02642037160694599,
    0.01452057994902134,
    -0.011786460876464844,
    -0.002169232815504074,
    -0.013868924230337143,
    0.03099612519145012,
    0.01718386635184288,
    -0.040005967020988464,
    -0.0066971746273338795,
    0.005014912225306034,
    0.027454519644379616,
    -0.007316955365240574,
    -0.025060394778847694,
    0.014301000162959099,
    -0.006449262145906687,
    -0.01926632970571518,
    0.016418879851698875,
    0.014223084785044193,
    -0.01593722216784954,
    0.034311067312955856,
    -0.0014148710761219263,
    0.028403669595718384,
    0.025669550523161888,
    -0.0237287525087595,
    -0.03337608277797699,
    0.032752759754657745,
    0.005964062642306089,
    0.004133052658289671,
    -0.003626603400334716,
    0.0010509712155908346,
    0.004919289145618677,
    0.02149045839905739,
    0.0032175478991121054,
    0.013585596345365047,
    -0.007154041435569525,
    -0.018232181668281555,
    -0.013458098284900188,
    0.011205637827515602,
    -0.021022966131567955,
    0.029551150277256966,
    0.00495824683457613,
    -0.02848866954445839,
    -0.0188555046916008,
    0.0684521347284317,
    0.020357144996523857,
    0.01998881809413433,
    0.0035787916276603937,
    -0.002080692909657955,
    -0.019053833559155464,
    -0.03567104414105415,
    -0.024833733215928078,
    0.004157843999564648,
    -0.0005719691980630159,
    -0.011630630120635033,
    -0.05377572774887085,
    0.0066900914534926414,
    0.03241276741027832,
    0.011156055144965649,
    -0.03224277123808861,
    -0.0011244595516473055,
    -0.01445683091878891,
    -0.022793767973780632,
    0.02698702923953533,
    0.04793916270136833,
    -0.020498808473348618,
    -0.0013590907910838723,
    0.0014378915075212717,
    0.024493739008903503,
    0.000181285897269845,
    -0.025216225534677505,
    -0.005567402578890324,
    0.004310132935643196,
    0.0032830676063895226,
    0.007501118816435337,
    -0.0031927567906677723,
    -0.01772218942642212,
    0.013174769468605518,
    0.023558754473924637,
    0.00969691388309002,
    -0.018458843231201172,
    -0.011021474376320839,
    0.003020988777279854,
    -0.004660751670598984,
    0.020852968096733093,
    -0.019634656608104706,
    0.005794065538793802,
    -0.02470623515546322,
    -0.01860050857067108,
    -0.007246123161166906,
    -0.0041968016885221004,
    -0.024677902460098267,
    -0.010716896504163742,
    0.030401134863495827,
    0.0021196503657847643,
    -0.03929764777421951,
    -0.002555267885327339,
    0.007387787569314241,
    -0.00956233311444521,
    0.011765210889279842,
    0.023431256413459778,
    -0.003238797653466463,
    -0.009640248492360115,
    0.00823777262121439,
    -0.021419625729322433,
    0.0016698666149750352,
    0.01888383738696575,
    -0.015979720279574394,
    0.001189093803986907,
    0.0321011058986187,
    -0.00019467758829705417,
    -0.012048539705574512,
    0.009406502358615398,
    -0.02500372938811779,
    0.0001106198105844669,
    0.013281017541885376,
    -0.02306292951107025,
    -0.03085446171462536,
    -0.0034583769738674164,
    -0.0027589101810008287,
    -0.018048018217086792,
    -0.023657919839024544,
    0.00032272873795591295,
    0.09978825598955154,
    -0.005907396785914898,
    -0.025584552437067032,
    0.011821877211332321,
    -0.0034158776979893446,
    -0.004278258420526981,
    0.0037718091625720263,
    -0.010794810950756073,
    0.008067775517702103,
    -0.006853005383163691,
    -0.0029926560819149017,
    0.00894609373062849,
    -0.019365495070815086,
    -0.021575456485152245,
    -0.004480130039155483,
    0.023813750594854355,
    -0.013656428083777428,
    -0.0033468164037913084,
    0.010022741742432117,
    0.012763943523168564,
    0.016702208667993546,
    -0.008152774535119534,
    -0.005461154505610466,
    0.0034707726445049047,
    -0.04060095548629761,
    -0.00943483505398035,
    0.02123546227812767,
    0.02027214504778385,
    -0.0005591308581642807,
    -0.06346555799245834,
    0.0405442900955677,
    -0.0001562733086757362,
    -0.026023712009191513,
    -0.02361541986465454,
    -0.0074161202646791935,
    0.02387041598558426,
    -0.018968835473060608,
    -0.032044440507888794,
    -0.014534746296703815,
    0.019478825852274895,
    0.008889428339898586,
    0.013373099267482758,
    -0.03955264389514923,
    -0.0265195369720459,
    0.04105428233742714,
    -0.007933194749057293,
    0.005351364612579346,
    -0.006736132316291332,
    -0.010433567687869072
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure key vault secrets client library for python\nazure key vault helps solve the following problems:\n\n- secrets management (this library) -\nsecurely store and control access to tokens, passwords, certificates, api keys,\nand other secrets\n- cryptographic key management\n([azure-keyvault-keys](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) -\ncreate, store, and control access to the keys used to encrypt your data\n- certificate management\n([azure-keyvault-certificates](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private ssl/tls certificates\n- vault administration ([azure-keyvault-administration](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration)) - role-based access control (rbac), and vault-level backup and restore options\n\n[source code][library_src]\n| [package (pypi)][pypi_package_secrets]\n| [package (conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [api reference documentation][reference_docs]\n| [product documentation][azure_keyvault]\n| [samples][secret_samples]\n\n## _disclaimer_\n\n_azure sdk python packages support for python 2.7 has ended 01 january 2022. for more information and questions, please refer to https://github.com/azure/azure-sdk-for-python/issues/20691_.\n_python 3.7 or later is required to use this package. for more details, please refer to [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy)._\n\n## getting started\n### install packages\ninstall [azure-keyvault-secrets][pypi_package_secrets] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```bash\npip install azure-keyvault-secrets azure-identity\n```\n[azure-identity][azure_identity] is used for azure active directory\nauthentication as demonstrated below.\n\n### prerequisites\n* an [azure subscription][azure_sub]\n* python 3.7 or later\n* an existing [azure key vault][azure_keyvault]. if you need to create one, you can do so using the azure cli by following the steps in [this document][azure_keyvault_cli].\n\n### authenticate the client\nin order to interact with the azure key vault service, you will need an instance of a [secretclient][secret_client_docs], as well as a **vault url** and a credential object. this document demonstrates using a [defaultazurecredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nsee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### create a client\nafter configuring your environment for the [defaultazurecredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a secret client (replacing the value of `vault_url` with your vault's url):\n\n<!-- snippet:hello_world.create_secret_client -->\n\n```python\nvault_url = os.environ[\"vault_url\"]\ncredential = defaultazurecredential()\nclient = secretclient(vault_url=vault_url, credential=credential)\n```\n\n<!-- end snippet -->\n\n> **note:** for an asynchronous client, import `azure.keyvault.secrets.aio`'s `secretclient` instead.\n\n## key concepts\n### secret\na secret consists of a secret value and its associated metadata and management\ninformation. this library handles secret values as strings, but azure key vault\ndoesn't store them as such. for more information about secrets and how key\nvault stores and manages them, see the\n[key vault documentation](https://docs.microsoft.com/azure/key-vault/general/about-keys-secrets-certificates).\n\n[secretclient][secret_client_docs] can set secret values in the vault, update\nsecret metadata, and delete secrets, as shown in the\n[examples](#examples) below.\n\n## examples\nthis section contains code snippets covering common tasks:\n* [set a secret](#set-a-secret)\n* [retrieve a secret](#retrieve-a-secret)\n* [update secret metadata](#update-secret-metadata)\n* [delete a secret](#delete-a-secret)\n* [list secrets](#list-secrets)\n* [async api](#async-api)\n* [asynchronously create a secret](#asynchronously-create-a-secret)\n* [asynchronously list secrets](#asynchronously-list-secrets)\n\n### set a secret\n[set_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient.set_secret)\ncreates new secrets and changes the values of existing secrets. if no secret with the\ngiven name exists, `set_secret` creates a new secret with that name and the\ngiven value. if the given name is in use, `set_secret` creates a new version\nof that secret, with the given value.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = defaultazurecredential()\n\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n### retrieve a secret\n[get_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient.get_secret)\nretrieves a secret previously stored in the key vault.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = defaultazurecredential()\n\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret = secret_client.get_secret(\"secret-name\")\n\nprint(secret.name)\nprint(secret.value)\n```\n\n### update secret metadata\n[update_secret_properties](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient.update_secret_properties)\nupdates a secret's metadata. it cannot change the secret's value; use [set_secret](#set-a-secret) to set a secret's\nvalue.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = defaultazurecredential()\n\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# clients may specify the content type of a secret to assist in interpreting the secret data when it's retrieved\ncontent_type = \"text/plain\"\n\n# we will also disable the secret for further use\n\nupdated_secret_properties = secret_client.update_secret_properties(\"secret-name\", content_type=content_type, enabled=false)\n\nprint(updated_secret_properties.updated_on)\nprint(updated_secret_properties.content_type)\nprint(updated_secret_properties.enabled)\n```\n\n### delete a secret\n[begin_delete_secret](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient.begin_delete_secret)\nrequests key vault delete a secret, returning a poller which allows you to wait for the deletion to finish. waiting is\nhelpful when the vault has [soft-delete][soft_delete] enabled, and you want to purge (permanently delete) the secret as\nsoon as possible. when [soft-delete][soft_delete] is disabled, `begin_delete_secret` itself is permanent.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = defaultazurecredential()\n\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_secret = secret_client.begin_delete_secret(\"secret-name\").result()\n\nprint(deleted_secret.name)\nprint(deleted_secret.deleted_date)\n```\n\n### list secrets\n[list_properties_of_secrets](https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient.list_properties_of_secrets)\nlists the properties of all of the secrets in the client's vault. this list doesn't include the secret's values.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = defaultazurecredential()\n\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nfor secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n### async api\nthis library includes a complete set of async apis. to use them, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nsee\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/client_library_developer.md#transport)\nfor more information.\n\nasync clients and credentials should be closed when they're no longer needed. these\nobjects are async context managers and define async `close` methods. for\nexample:\n\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.secrets.aio import secretclient\n\ncredential = defaultazurecredential()\n\n# call close when the client and credential are no longer needed\nclient = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n...\nawait client.close()\nawait credential.close()\n\n# alternatively, use them as async context managers (contextlib.asyncexitstack can help)\nclient = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nasync with client:\n  async with credential:\n    ...\n```\n\n### asynchronously create a secret\n[set_secret](https://aka.ms/azsdk/python/keyvault-secrets/aio/docs#azure.keyvault.secrets.aio.secretclient.set_secret)\ncreates a secret in the key vault with the specified optional arguments.\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.secrets.aio import secretclient\n\ncredential = defaultazurecredential()\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nsecret = await secret_client.set_secret(\"secret-name\", \"secret-value\")\n\nprint(secret.name)\nprint(secret.value)\nprint(secret.properties.version)\n```\n\n### asynchronously list secrets\n[list_properties_of_secrets](https://aka.ms/azsdk/python/keyvault-secrets/aio/docs#azure.keyvault.secrets.aio.secretclient.list_properties_of_secrets)\nlists the properties of all of the secrets in the client's vault.\n\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.secrets.aio import secretclient\n\ncredential = defaultazurecredential()\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nsecret_properties = secret_client.list_properties_of_secrets()\n\nasync for secret_property in secret_properties:\n    # the list doesn't include values or versions of the secrets\n    print(secret_property.name)\n```\n\n## troubleshooting\n\nsee the `azure-keyvault-secrets`\n[troubleshooting guide](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/troubleshooting.md)\nfor details on how to diagnose various failure scenarios.\n\n### general\nkey vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nfor example, if you try to get a key that doesn't exist in the vault,\n[secretclient][secret_client_docs] raises\n[resourcenotfounderror](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\nfrom azure.core.exceptions import resourcenotfounderror\n\ncredential = defaultazurecredential()\nsecret_client = secretclient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    secret_client.get_secret(\"which-does-not-exist\")\nexcept resourcenotfounderror as e:\n    print(e.message)\n```\n\n### logging\nthis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.secrets import secretclient\nimport sys\nimport logging\n\n# create a logger for the 'azure' sdk\nlogger = logging.getlogger('azure')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\ncredential = defaultazurecredential()\n\n# this client will log detailed information about its http sessions, at debug level\nsecret_client = secretclient(\n    vault_url=\"https://my-key-vault.vault.azure.net/\",\n    credential=credential,\n    logging_enable=true\n)\n```\n\nsimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nsecret_client.get_secret(\"my-secret\", logging_enable=true)\n```\n\n## next steps\nseveral samples are available in the azure sdk for python github repository.\nthese provide example code for additional key vault scenarios:\n| file | description |\n|-------------|-------------|\n| [hello_world.py][hello_world_sample] ([async version][hello_world_async_sample]) | create/get/update/delete secrets |\n| [list_operations.py][list_operations_sample] ([async version][list_operations_async_sample]) | basic list operations for secrets |\n| [backup_restore_operations.py][backup_operations_sample] ([async version][backup_operations_async_sample]) | back up and restore secrets |\n| [recover_purge_operations.py][recover_purge_sample] ([async version][recover_purge_async_sample]) | recover and purge secrets |\n\n###  additional documentation\nfor more extensive documentation on azure key vault, see the\n[api reference documentation][reference_docs].\n\n## contributing\nthis project welcomes contributions and suggestions. most contributions require\nyou to agree to a contributor license agreement (cla) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nfor details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether\nyou need to provide a cla and decorate the pr appropriately (e.g., label,\ncomment). simply follow the instructions provided by the bot. you will only\nneed to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct].\nfor more information, see the\n[code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- links -->\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_core_exceptions]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_keyvault]: https://docs.microsoft.com/azure/key-vault/general/overview\n[azure_keyvault_cli]: https://docs.microsoft.com/azure/key-vault/general/quick-create-cli\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/backup_restore_operations_async.py\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.defaultazurecredential\n\n[hello_world_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/hello_world_async.py\n\n[library_src]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/azure/keyvault/secrets\n[list_operations_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/list_operations_async.py\n\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[pip]: https://pypi.org/project/pip/\n[pypi_package_secrets]: https://pypi.org/project/azure-keyvault-secrets/\n\n[recover_purge_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets/samples/recover_purge_operations_async.py\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-secrets/docs\n\n[secret_client_docs]: https://aka.ms/azsdk/python/keyvault-secrets/docs#azure.keyvault.secrets.secretclient\n[secret_samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples\n[soft_delete]: https://docs.microsoft.com/azure/key-vault/general/soft-delete-overview\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fkeyvault%2fazure-keyvault-secrets%2freadme.png)\n\n\n# release history\n\n## 4.7.0 (2023-03-16)\n\n### features added\n- added support for service api version `7.4`\n- clients each have a `send_request` method that can be used to send custom requests using the\n  client's existing pipeline ([#25172](https://github.com/azure/azure-sdk-for-python/issues/25172))\n\n### other changes\n- python 3.6 is no longer supported. please use python version 3.7 or later.\n- key vault api version `7.4` is now the default\n- updated minimum `azure-core` version to 1.24.0\n- dropped `msrest` requirement\n- added requirement for `isodate>=0.6.1` (`isodate` was required by `msrest`)\n- added requirement for `typing-extensions>=4.0.1`\n\n## 4.6.0 (2022-09-19)\n\n### breaking changes\n- clients verify the challenge resource matches the vault domain. this should affect few customers,\n  who can provide `verify_challenge_resource=false` to client constructors to disable.\n  see https://aka.ms/azsdk/blog/vault-uri for more information.\n\n## 4.5.1 (2022-08-11)\n\n### other changes\n- documentation improvements \n  ([#25039](https://github.com/azure/azure-sdk-for-python/issues/25039))\n\n## 4.5.0b1 (2022-06-07)\n\n### bugs fixed\n- port numbers are now preserved in the `vault_url` property of a `keyvaultsecretidentifier`\n  ([#24446](https://github.com/azure/azure-sdk-for-python/issues/24446))\n\n## 4.4.0 (2022-03-28)\n\n### features added\n- key vault api version 7.3 is now the default\n- added support for multi-tenant authentication when using `azure-identity`\n  1.8.0 or newer ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n- (from 4.4.0b3) added `managed` property to secretproperties\n\n### other changes\n- (from 4.4.0b3) python 2.7 is no longer supported. please use python version 3.6 or later.\n- updated minimum `azure-core` version to 1.20.0\n- (from 4.4.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698)). see\n  https://aka.ms/azsdk/python/identity/tokencredential for more details on how to integrate\n  this parameter if `get_token` is implemented by a custom credential.\n\n## 4.4.0b3 (2022-02-08)\n\n### features added\n- added `managed` property to secretproperties\n\n### other changes\n- python 2.7 is no longer supported. please use python version 3.6 or later.\n- (from 4.4.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n## 4.4.0b2 (2021-11-11)\n\n### features added\n- added support for multi-tenant authentication when using `azure-identity` 1.7.1 or newer\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n### other changes\n- updated minimum `azure-core` version to 1.15.0\n\n## 4.4.0b1 (2021-09-09)\n\n### features added\n- key vault api version 7.3-preview is now the default\n\n### other changes\n- updated type hints to fix mypy errors\n  ([#19158](https://github.com/azure/azure-sdk-for-python/issues/19158))\n\n## 4.3.0 (2021-06-22)\nthis is the last version to support python 3.5. the next version will require python 2.7 or 3.6+.\n### fixed\n- correct typing for async paging methods\n\n### changed\n- key vault api version 7.2 is now the default\n- updated minimum `msrest` version to 0.6.21\n\n### added\n- added class `keyvaultsecretidentifier` that parses out a full id returned by key vault,\n  so users can easily access the secret's `name`, `vault_url`, and `version`.\n\n## 4.2.0 (2020-08-11)\n### fixed\n- values of `x-ms-keyvault-region` and `x-ms-keyvault-service-version` headers\n  are no longer redacted in logging output\n\n### changed\n- key vault api version 7.1 is now the default\n- updated minimum `azure-core` version to 1.7.0\n\n### added\n- at construction, clients accept a `customhookpolicy` through the optional\n  keyword argument `custom_hook_policy`\n- all client requests include a unique id in the header `x-ms-client-request-id`\n- dependency on `azure-common` for multiapi support\n\n## 4.2.0b1 (2020-03-10)\n- support for key vault api version 7.1-preview\n([#10124](https://github.com/azure/azure-sdk-for-python/pull/10124))\n  - added `recoverable_days` to `certificateproperties`\n  - added `apiversion` enum identifying key vault versions supported by this package\n\n## 4.1.0 (2020-03-10)\n- `secretclient` instances have a `close` method which closes opened sockets.\nused as a context manager, a `secretclient` closes opened sockets on exit.\n([#9906](https://github.com/azure/azure-sdk-for-python/pull/9906))\n- pollers no longer sleep after operation completion\n([#9991](https://github.com/azure/azure-sdk-for-python/pull/9991))\n\n## 4.0.1 (2020-02-11)\n- `azure.keyvault.secrets` defines `__version__`\n- challenge authentication policy preserves request options\n([#8999](https://github.com/azure/azure-sdk-for-python/pull/8999))\n- updated `msrest` requirement to >=0.6.0\n- challenge authentication policy requires tls\n([#9457](https://github.com/azure/azure-sdk-for-python/pull/9457))\n- methods no longer raise the internal error `keyvaulterrorexception`\n([#9690](https://github.com/azure/azure-sdk-for-python/issues/9690))\n\n## 4.0.0 (2019-10-31)\n### breaking changes:\n- moved optional parameters of two methods into kwargs (\n[docs](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-keyvault-secrets/4.0.0/azure.keyvault.secrets.html)\ndetail the new keyword arguments):\n  - `set_secret` now has positional parameters `name` and `value`\n  - `update_secret_properties` now has positional parameters `name` and\n    (optional) `version`\n- renamed `list_secrets` to `list_properties_of_secrets`\n- renamed `list_secret_versions` to `list_properties_of_secret_versions`\n- renamed sync method `delete_secret` to `begin_delete_secret`\n- the sync method `begin_delete_secret` and async `delete_secret` now return pollers that return a `deletedsecret`\n- renamed `secret` to `keyvaultsecret`\n- `keyvaultsecret`  properties `created`, `expires`, and `updated` renamed to `created_on`,\n`expires_on`, and `updated_on`\n- the `vault_endpoint` parameter of `secretclient` has been renamed to `vault_url`\n- the property `vault_endpoint` has been renamed to `vault_url` in all models\n\n\n## 4.0.0b4 (2019-10-08)\n### breaking changes:\n- `secret` now has attribute `properties`, which holds certain properties of the\nsecret, such as `version`. this changes the shape of the returned `secret` type,\nas certain properties of `secret` (such as `version`) have to be accessed\nthrough the `properties` property.\n\n- `update_secret` has been renamed to `update_secret_properties`\n- the `vault_url` parameter of `secretclient` has been renamed to `vault_endpoint`\n- the property `vault_url` has been renamed to `vault_endpoint` in all models\n\n### fixes and improvements\n- `list_secrets` and `list_secret_versions` return the correct type\n\n## 4.0.0b3 (2019-09-11)\nthis release includes only internal changes.\n\n## 4.0.0b2 (2019-08-06)\n### breaking changes:\n- removed `azure.core.configuration` from the public api in preparation for a\nrevamped configuration api. static `create_config` methods have been renamed\n`_create_config`, and will be removed in a future release.\n- this version of the library requires `azure-core` 1.0.0b2\n  - if you later want to revert to a version requiring azure-core 1.0.0b1,\n  of this or another azure sdk library, you must explicitly install azure-core\n  1.0.0b1 as well. for example:\n  `pip install azure-core==1.0.0b1 azure-keyvault-secrets==4.0.0b1`\n\n### new features:\n- distributed tracing framework opencensus is now supported\n- added support for http challenge based authentication, allowing clients to\ninteract with vaults in sovereign clouds.\n\n## 4.0.0b1 (2019-06-28)\nversion 4.0.0b1 is the first preview of our efforts to create a user-friendly\nand pythonic client library for azure key vault. for more information about\npreview releases of other azure sdk libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\nthis library is not a direct replacement for `azure-keyvault`. applications\nusing that library would require code changes to use `azure-keyvault-secrets`.\nthis package's\n[documentation](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/readme.md)\nand\n[samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/samples)\ndemonstrate the new api.\n\n### major changes from `azure-keyvault`\n- packages scoped by functionality\n    - `azure-keyvault-secrets` contains a client for secret operations,\n    `azure-keyvault-keys` contains a client for key operations\n- client instances are scoped to vaults (an instance interacts with one vault\nonly)\n- asynchronous api supported on python 3.5.3+\n    - the `azure.keyvault.secrets.aio` namespace contains an async equivalent of\n    the synchronous client in `azure.keyvault.secrets`\n- authentication using `azure-identity` credentials\n  - see this package's\n  [documentation](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets/readme.md)\n  , and the\n  [azure identity documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md)\n  for more information\n\n### `azure-keyvault` features not implemented in this library\n- certificate management apis\n- national cloud support. this release supports public global cloud vaults,\n    e.g. https://{vault-name}.vault.azure.net\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-keyvault-secrets",
  "package_url": "https://pypi.org/project/azure-keyvault-secrets/",
  "project_url": "https://pypi.org/project/azure-keyvault-secrets/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets"
  },
  "release_url": "https://pypi.org/project/azure-keyvault-secrets/4.7.0/",
  "requires_dist": [
    "azure-common (~=1.1)",
    "azure-core (<2.0.0,>=1.24.0)",
    "isodate (>=0.6.1)",
    "typing-extensions (>=4.0.1)"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure key vault secrets client library for python",
  "version": "4.7.0",
  "releases": [],
  "developers": [
    "azurekeyvault@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_keyvault azure_keyvault_cli azure_identity_pypi azure_identity vault_endpoint",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_keyvault_secrets",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets",
  "release_count": 20,
  "dependency_ids": [
    "pypi_azure_common",
    "pypi_azure_core",
    "pypi_isodate",
    "pypi_typing_extensions"
  ]
}
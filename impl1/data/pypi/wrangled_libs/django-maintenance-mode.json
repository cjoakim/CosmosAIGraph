{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools"
  ],
  "description": "[![](https://img.shields.io/pypi/pyversions/django-maintenance-mode.svg?color=3776ab&logo=python&logocolor=white)](https://www.python.org/)\n[![](https://img.shields.io/pypi/djversions/django-maintenance-mode?color=0c4b33&logo=django&logocolor=white&label=django)](https://www.djangoproject.com/)\n\n[![](https://img.shields.io/pypi/v/django-maintenance-mode.svg?color=blue&logo=pypi&logocolor=white)](https://pypi.org/project/django-maintenance-mode/)\n[![](https://static.pepy.tech/badge/django-maintenance-mode/month)](https://pepy.tech/project/django-maintenance-mode)\n[![](https://img.shields.io/github/stars/fabiocaccamo/django-maintenance-mode?logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode/stargazers)\n[![](https://img.shields.io/pypi/l/django-maintenance-mode.svg?color=blue)](https://github.com/fabiocaccamo/django-maintenance-mode/blob/main/license.txt)\n\n[![](https://results.pre-commit.ci/badge/github/fabiocaccamo/django-maintenance-mode/main.svg)](https://results.pre-commit.ci/latest/github/fabiocaccamo/django-maintenance-mode/main)\n[![](https://img.shields.io/github/actions/workflow/status/fabiocaccamo/django-maintenance-mode/test-package.yml?branch=main&label=build&logo=github)](https://github.com/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codecov/c/gh/fabiocaccamo/django-maintenance-mode?logo=codecov)](https://codecov.io/gh/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codacy/grade/918668ac85e74206a4d8d95923548d79?logo=codacy)](https://www.codacy.com/app/fabiocaccamo/django-maintenance-mode)\n[![](https://img.shields.io/codeclimate/maintainability/fabiocaccamo/django-maintenance-mode?logo=code-climate)](https://codeclimate.com/github/fabiocaccamo/django-maintenance-mode/)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg?logo=python&logocolor=black)](https://github.com/psf/black)\n[![](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n\n# django-maintenance-mode\ndjango-maintenance-mode shows a 503 error page when **maintenance-mode** is **on**.\n\nit works at application level, so your django instance should be up.\n\nit doesn't use database and doesn't prevent database access.\n\n## installation\n\n1. run `pip install django-maintenance-mode` or [download django-maintenance-mode](http://pypi.python.org/pypi/django-maintenance-mode) and add the **maintenance_mode** package to your project\n2. add `maintenance_mode` to `settings.installed_apps` before custom applications\n3. add `maintenance_mode.middleware.maintenancemodemiddleware` to `settings.middleware` as last middleware\n4. add your custom `templates/503.html` file\n5. restart your application server\n\n## configuration (optional)\n\n### settings\nall these settings are optional, if not defined in `settings.py` the default values (listed below) will be used.\n\n```python\n# if true the maintenance-mode will be activated\nmaintenance_mode = none\n```\n\n```python\n# by default, to get/set the state value a local file backend is used\n# if you want to use the db or cache, you can create a custom backend\n# custom backends must extend 'maintenance_mode.backends.abstractstatebackend' class\n# and implement get_value(self) and set_value(self, val) methods\nmaintenance_mode_state_backend = \"maintenance_mode.backends.localfilebackend\"\n\n# alternatively it is possible to use the default storage backend\nmaintenance_mode_state_backend = \"maintenance_mode.backends.defaultstoragebackend\"\n\n# alternatively it is possible to use the static storage backend\n# make sure that static_root and static_url are also set\nmaintenance_mode_state_backend = \"maintenance_mode.backends.staticstoragebackend\"\n\n# alternatively it is possible to use the cache backend\n# you can use a custom cache backend by adding a `maintenance_mode` entry to `settings.caches`,\n# otherwise the default cache backend will be used.\nmaintenance_mode_state_backend = \"maintenance_mode.backends.cachebackend\"\n```\n\n```python\n# the fallback value that backends will return in case of failure\n# (actually this is only used by \"maintenance_mode.backends.cachebackend\")\nmaintenance_mode_state_backend_fallback_value = false\n```\n\n```python\n# by default, a file named \"maintenance_mode_state.txt\" will be created in the settings.py directory\n# you can customize the state file path in case the default one is not writable\nmaintenance_mode_state_file_path = \"maintenance_mode_state.txt\"\n```\n\n```python\n# if true admin site will not be affected by the maintenance-mode page\nmaintenance_mode_ignore_admin_site = false\n```\n\n```python\n# if true anonymous users will not see the maintenance-mode page\nmaintenance_mode_ignore_anonymous_user = false\n```\n\n```python\n# if true authenticated users will not see the maintenance-mode page\nmaintenance_mode_ignore_authenticated_user = false\n```\n\n```python\n# if true the staff will not see the maintenance-mode page\nmaintenance_mode_ignore_staff = false\n```\n\n```python\n# if true the superuser will not see the maintenance-mode page\nmaintenance_mode_ignore_superuser = false\n```\n\n```python\n# list of ip-addresses that will not be affected by the maintenance-mode\n# ip-addresses will be used to compile regular expressions objects\nmaintenance_mode_ignore_ip_addresses = ()\n```\n\n```python\n# the path of the function that will return the client ip address given the request object -> 'myapp.mymodule.myfunction'\n# the default function ('maintenance_mode.utils.get_client_ip_address') returns request.meta['remote_addr']\n# in some cases the default function returns none, to avoid this scenario just use 'django-ipware'\nmaintenance_mode_get_client_ip_address = none\n```\nretrieve user's real ip address using [`django-ipware`](https://github.com/un33k/django-ipware):\n```python\nmaintenance_mode_get_client_ip_address = \"ipware.ip.get_ip\"\n```\n\n```python\n# the path of the function that will return the response context -> 'myapp.mymodule.myfunction'\nmaintenance_mode_get_context = none\n```\n\n```python\n# list of urls that will not be affected by the maintenance-mode\n# urls will be used to compile regular expressions objects\nmaintenance_mode_ignore_urls = ()\n```\n\n```python\n# if true the maintenance mode will not return 503 response while running tests\n# useful for running tests while maintenance mode is on, before opening the site to public use\nmaintenance_mode_ignore_tests = false\n```\n\n```python\n# if true authenticated users will be logged out from their current session\nmaintenance_mode_logout_authenticated_user = false\n```\n\n```python\n# the absolute url where users will be redirected to during maintenance-mode\nmaintenance_mode_redirect_url = none\n```\n\n```python\n# the type of the response returned during maintenance mode, can be either \"html\" or \"json\"\nmaintenance_mode_response_type = \"html\"\n```\n\n```python\n# the template that will be shown by the maintenance-mode page\nmaintenance_mode_template = \"503.html\"\n```\n\n```python\n# the http status code to send\nmaintenance_mode_status_code = 503\n```\n\n```python\n# the value in seconds of the retry-after header during maintenance-mode\nmaintenance_mode_retry_after = 3600 # 1 hour\n```\n\n#### context processors\nadd **maintenance_mode.context_processors.maintenance_mode** to your context_processors list in `settings.py` if you want to access the maintenance_mode status in your templates.\n\n```python\ntemplates = [\n    {\n        # ...\n        \"options\": {\n            \"context_processors\": [\n                # ...\n                \"maintenance_mode.context_processors.maintenance_mode\",\n                # ...\n            ],\n        },\n        # ...\n    },\n]\n```\n\n#### logging\nyou can disable emailing 503 errors to admins while maintenance mode is enabled:\n\n```python\nlogging = {\n    \"filters\": {\n        \"require_not_maintenance_mode_503\": {\n            \"()\": \"maintenance_mode.logging.requirenotmaintenancemode503\",\n        },\n        ...\n    },\n    \"handlers\": {\n        ...\n    },\n    ...\n}\n```\n\n### context managers\nyou can force a block of code execution to run under maintenance mode or not using context managers:\n\n```python\nfrom maintenance_mode.core import maintenance_mode_off, maintenance_mode_on\n\nwith maintenance_mode_on():\n    # do stuff\n    pass\n\nwith maintenance_mode_off():\n    # do stuff\n    pass\n```\n\n### urls\nadd **maintenance_mode.urls** to `urls.py` if you want superusers able to set maintenance_mode using urls.\n\n```python\nurlpatterns = [\n    # ...\n    re_path(r\"^maintenance-mode/\", include(\"maintenance_mode.urls\")),\n    # ...\n]\n```\n\n### views\nyou can force maintenance mode on/off at view level using view decorators:\n\n#### function-based views\n\n```python\nfrom maintenance_mode.decorators import force_maintenance_mode_off, force_maintenance_mode_on\n\n@force_maintenance_mode_off\ndef my_view_a(request):\n    # never return 503 response\n    pass\n\n@force_maintenance_mode_on\ndef my_view_b(request):\n    # always return 503 response\n    pass\n```\n\n#### class-based views\n\n```python\nfrom maintenance_mode.decorators import force_maintenance_mode_off, force_maintenance_mode_on\n\nurlpatterns = [\n    # never return 503 response\n    path(\"\", force_maintenance_mode_off(yourview.as_view()), name=\"my_view\"),\n\n    # always return 503 response\n    path(\"\", force_maintenance_mode_on(yourview.as_view()), name=\"my_view\"),\n]\n```\n\n## usage\n\n### python\n```python\nfrom maintenance_mode.core import get_maintenance_mode, set_maintenance_mode\n\nset_maintenance_mode(true)\n\nif get_maintenance_mode():\n    set_maintenance_mode(false)\n```\nor\n```python\nfrom django.core.management import call_command\nfrom django.core.management.base import basecommand\n\n\nclass command(basecommand):\n\n    def handle(self, *args, **options):\n\n        call_command(\"maintenance_mode\", \"on\")\n\n        # call your command(s)\n\n        call_command(\"maintenance_mode\", \"off\")\n\n```\n\n### templates\n```html\n{% if maintenance_mode %}\n<!-- html -->\n{% endif %}\n```\n\n### terminal\n\nrun ``python manage.py maintenance_mode <on|off>``\n\n*(**this is not heroku-friendly because** any execution of heroku run* `manage.py` *will be run on a separate worker dyno, not the web one. therefore **the state-file is set but on the wrong machine. you should use a custom*** `maintenance_mode_state_backend`*.)*\n\n### urls\nsuperusers can change maintenance-mode using the following urls:\n\n`/maintenance-mode/off/`\n\n`/maintenance-mode/on/`\n\n## testing\n```bash\n# clone repository\ngit clone https://github.com/fabiocaccamo/django-maintenance-mode.git && cd django-maintenance-mode\n\n# create virtualenv and activate it\npython -m venv venv && . venv/bin/activate\n\n# upgrade pip\npython -m pip install --upgrade pip\n\n# install requirements\npip install -r requirements.txt -r requirements-test.txt\n\n# install pre-commit to run formatters and linters\npre-commit install --install-hooks\n\n# run tests\ntox\n# or\npython runtests.py\n# or\npython -m django test --settings \"tests.settings\"\n```\n\n## license\nreleased under [mit license](license.txt).\n\n---\n\n## supporting\n\n- :star: star this project on [github](https://github.com/fabiocaccamo/django-maintenance-mode)\n- :octocat: follow me on [github](https://github.com/fabiocaccamo)\n- :blue_heart: follow me on [twitter](https://twitter.com/fabiocaccamo)\n- :moneybag: sponsor me on [github](https://github.com/sponsors/fabiocaccamo)\n\n## see also\n\n- [`django-admin-interface`](https://github.com/fabiocaccamo/django-admin-interface) - the default admin interface made customizable by the admin itself. popup windows replaced by modals. \ud83e\uddd9 \u26a1\n\n- [`django-colorfield`](https://github.com/fabiocaccamo/django-colorfield) - simple color field for models with a nice color-picker in the admin. \ud83c\udfa8\n\n- [`django-extra-settings`](https://github.com/fabiocaccamo/django-extra-settings) - config and manage typed extra settings using just the django admin. \u2699\ufe0f\n\n- [`django-redirects`](https://github.com/fabiocaccamo/django-redirects) - redirects with full control. \u21aa\ufe0f\n\n- [`django-treenode`](https://github.com/fabiocaccamo/django-treenode) - probably the best abstract model / admin for your tree based stuff. \ud83c\udf33\n\n- [`python-benedict`](https://github.com/fabiocaccamo/python-benedict) - dict subclass with keylist/keypath support, i/o shortcuts (base64, csv, json, pickle, plist, query-string, toml, xml, yaml) and many utilities. \ud83d\udcd8\n\n- [`python-codicefiscale`](https://github.com/fabiocaccamo/python-codicefiscale) - encode/decode italian fiscal codes - codifica/decodifica del codice fiscale. \ud83c\uddee\ud83c\uddf9 \ud83d\udcb3\n\n- [`python-fontbro`](https://github.com/fabiocaccamo/python-fontbro) - friendly font operations. \ud83e\udde2\n\n- [`python-fsutil`](https://github.com/fabiocaccamo/python-fsutil) - file-system utilities for lazy devs. \ud83e\udddf\u200d\u2642\ufe0f\n",
  "docs_url": null,
  "keywords": "django,maintenance,mode,offline,under,503,service,temporarily,unavailable",
  "license": "",
  "name": "django-maintenance-mode",
  "package_url": "https://pypi.org/project/django-maintenance-mode/",
  "project_url": "https://pypi.org/project/django-maintenance-mode/",
  "project_urls": {
    "Documentation": "https://github.com/fabiocaccamo/django-maintenance-mode#readme",
    "Download": "https://github.com/fabiocaccamo/django-maintenance-mode/releases",
    "Funding": "https://github.com/sponsors/fabiocaccamo/",
    "Homepage": "https://github.com/fabiocaccamo/django-maintenance-mode",
    "Issues": "https://github.com/fabiocaccamo/django-maintenance-mode/issues",
    "Twitter": "https://twitter.com/fabiocaccamo"
  },
  "release_url": "https://pypi.org/project/django-maintenance-mode/0.21.0/",
  "requires_dist": [
    "python-fsutil <1.0.0,>=0.12.0"
  ],
  "requires_python": "",
  "summary": "shows a 503 error page when maintenance-mode is on.",
  "version": "0.21.0",
  "releases": [],
  "developers": [
    "fabio.caccamo@gmail.com"
  ],
  "kwds": "maintenance_mode_on maintenance_mode get_maintenance_mode maintenance_mode_off maintenance_mode_template",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_maintenance_mode",
  "homepage": "",
  "release_count": 47,
  "dependency_ids": [
    "pypi_python_fsutil"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: robot framework",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "python library core\n===================\n\ntools to ease creating larger test libraries for `robot framework`_ using\npython. the robot framework `hybrid`_ and `dynamic library api`_ gives more\nflexibility for library than the static library api, but they also sets requirements\nfor libraries which needs to be implemented in the library side. pythonlibcore\neases the problem by providing simpler interface and handling all the requirements\ntowards the robot framework library apis.\n\ncode is stable and version 1.0 is already used by seleniumlibrary_ and\nwhitelibrary_. the version 2.0 support changes in the robot framework\n3.2.\n\n.. image:: https://github.com/robotframework/pythonlibcore/workflows/ci/badge.svg?branch=master\n   :target: https://github.com/robotframework/pythonlibcore\n\nusage\n-----\nthere are two ways to use pythonlibcore, either by `hybridcore` or by using `dynamiccore`.\n`hybridcore` provides support for the hybrid library api and `dynamiccore` provides support\nfor dynamic library api. consult the robot framework `user guide`_, for choosing the\ncorrect api for library.\n\nregardless which library api is chosen, both have similar requirements.\n\n1) library must inherit either the `hybridcore` or `dynamiccore`.\n2) library keywords must be decorated with robot framework `@keyword`_ decorator.\n3) provide a list of class instances implementing keywords to `library_components` argument in the `hybridcore` or `dynamiccore` `__init__`.\n\nit is also possible implement keywords in the library main class, by marking method with\n`@keyword` as keywords. it is not requires pass main library instance in the\n`library_components` argument.\n\nall keyword, also keywords implemented in the classes outside of the main library are\navailable in the library instance as methods. this automatically publish library keywords\nin as methods in the python public api.\n\nthe example in below demonstrates how the pythonlibcore can be used with a library.\n\nexample\n-------\n\n.. sourcecode:: python\n\n    \"\"\"main library.\"\"\"\n\n    from robotlibcore import dynamiccore\n\n    from mystuff import library1, library2\n\n\n    class mylibrary(dynamiccore):\n        \"\"\"general library documentation.\"\"\"\n\n        def __init__(self):\n            libraries = [library1(), library2()]\n            dynamiccore.__init__(self, libraries)\n\n        @keyword\n        def keyword_in_main(self):\n            pass\n\n.. sourcecode:: python\n\n    \"\"\"library components.\"\"\"\n\n    from robotlibcore import keyword\n\n\n    class library1(object):\n\n        @keyword\n        def example(self):\n            \"\"\"keyword documentation.\"\"\"\n            pass\n\n        @keyword\n        def another_example(self, arg1, arg2='default'):\n            pass\n\n        def not_keyword(self):\n            pass\n\n\n    class library2(object):\n\n        @keyword('custom name')\n        def this_name_is_not_used(self):\n            pass\n\n        @keyword(tags=['tag', 'another'])\n        def tags(self):\n            pass\n\n\nplugin api\n----------\nit is possible to create plugin api to a library by using pythonlibcore. this allows extending library\nwith external python classes. plugins can be imported during library import time, example by defining argumet\nin library `__init__` which allows defining the plugins. it is possible to define multiple plugins, by seperating\nplugins with with comma. also it is possible to provide arguments to plugin by seperating arguments with\nsemicolon. \n\n\n.. sourcecode:: python\n\n    from robot.api.deco import keyword  # noqa f401\n\n    from robotlibcore import dynamiccore, pluginparser\n\n    from mystuff import library1, library2\n\n\n    class pluginlib(dynamiccore):\n\n        def __init__(self, plugins):\n            plugin_parser = pluginparser()\n            libraries = [library1(), library2()]\n            parsed_plugins = plugin_parser.parse_plugins(plugins)\n            libraries.extend(parsed_plugins)\n            dynamiccore.__init__(self, libraries)\n\n\nwhen plugin class can look like this:\n\n.. sourcecode:: python\n\n    class myplugi:\n\n        @keyword\n        def plugin_keyword(self):\n            return 123\n\nthen library can be imported in robot framework side like this:\n\n.. sourcecode:: bash\n\n    library    ${curdir}/pluginlib.py    plugins=${curdir}/myplugin.py\n\n\n\n.. _robot framework: http://robotframework.org\n.. _seleniumlibrary: https://github.com/robotframework/seleniumlibrary/\n.. _whitelibrary: https://pypi.org/project/robotframework-whitelibrary/\n.. _hybrid: https://robotframework.org/robotframework/latest/robotframeworkuserguide.html#hybrid-library-api\n.. _dynamic library api: https://robotframework.org/robotframework/latest/robotframeworkuserguide.html#dynamic-library-api\n.. _user guide: https://robotframework.org/robotframework/latest/robotframeworkuserguide.html#creating-test-libraries\n.. _@keyword: https://github.com/robotframework/robotframework/blob/master/src/robot/api/deco.py\n",
  "docs_url": null,
  "keywords": "robotframework testing testautomation library development",
  "license": "apache license 2.0",
  "name": "robotframework-pythonlibcore",
  "package_url": "https://pypi.org/project/robotframework-pythonlibcore/",
  "project_url": "https://pypi.org/project/robotframework-pythonlibcore/",
  "project_urls": {
    "Homepage": "https://github.com/robotframework/PythonLibCore"
  },
  "release_url": "https://pypi.org/project/robotframework-pythonlibcore/4.3.0/",
  "requires_dist": [],
  "requires_python": ">=3.8, <4",
  "summary": "tools to ease creating larger test libraries for robot framework using python.",
  "version": "4.3.0",
  "releases": [],
  "developers": [
    "aalto.tatu@gmail.com",
    "tatu_aalto"
  ],
  "kwds": "robotlibcore robotframeworkuserguide seleniumlibrary_ _seleniumlibrary seleniumlibrary",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_robotframework_pythonlibcore",
  "homepage": "https://github.com/robotframework/pythonlibcore",
  "release_count": 11,
  "dependency_ids": []
}
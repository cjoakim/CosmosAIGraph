{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "func\\_timeout\n=============\n\npython module to support running any existing function with a given timeout.\n\n\nfunction timeout\n================\n\n\nfunc\\_timeout\n-------------\n\nthis is the function wherein you pass the timeout, the function you want to call, and any arguments, and it runs it for up to #timeout# seconds, and will return/raise anything the passed function would otherwise return or raise.\n\n\tdef func\\_timeout(timeout, func, args=(), kwargs=none):\n\n\t\t'''\n\n\t\t\tfunc\\_timeout \\- runs the given function for up to #timeout# seconds.\n\n\t\t\traises any exceptions #func# would raise, returns what #func# would return (unless timeout is exceeded), in which case it raises functiontimedout\n\n\t\t\t@param timeout <float> \\- maximum number of seconds to run #func# before terminating\n\n\t\t\t@param func <function> \\- the function to call\n\n\t\t\t@param args    <tuple> \\- any ordered arguments to pass to the function\n\n\t\t\t@param kwargs  <dict/none> \\- keyword arguments to pass to the function.\n\n\t\t\t@raises \\- functiontimedout if #timeout# is exceeded, otherwise anything #func# could raise will be raised\n\n\t\t\t@return \\- the return value that #func# gives\n\n\t\t'''\n\n\n**example**\n\n\nso, for esxample, if you have a function \"doit('arg1', 'arg2')\" that you want to limit to running for 5 seconds, with func\\_timeout you can call it like this:\n\n\n\tfrom func\\_timeout import func\\_timeout, functiontimedout\n\n\t...\n\n\ttry:\n\n\t\tdoitreturnvalue = func\\_timeout(5, doit, args=('arg1', 'arg2'))\n\n\texcept functiontimedout:\n\n\t\tprint ( \"doit('arg1', 'arg2') could not complete within 5 seconds and was terminated.\\\\n\")\n\n\texcept exception as e:\n\n\t\t# handle any exceptions that doit might raise here\n\n\n\nfunc\\_set\\_timeout\n------------------\n\n\nthis is a decorator you can use on functions to apply func\\_timeout.\n\ntakes two arguments, \"timeout\" and \"allowoverride\"\n\nif \"allowoverride\" is present, an optional keyword argument is added to the wrapped function, 'forcetimeout'. when provided, this will override the timeout used on this function.\n\n\nthe \"timeout\" parameter can be either a number (for a fixed timeout), or a function/lambda. if a function/lambda is used, it will be passed the same arguments as the called function was passed. it should return a number which will be used as the timeout for that paticular run. for example, if you have a method that calculates data, you'll want a higher timeout for 1 million records than 50 records.\n\n\n**example:**\n\n\t@func\\_set\\_timeout(2.5)\n\n\tdef myfunction(self, arg1, arg2):\n\n\t\t...\n\n\nfunctiontimedout\n----------------\n\nexception raised if the function times out.\n\n\nhas a \"retry\" method which takes the following arguments:\n\n\t\\* no argument \\- retry same args, same function, same timeout\n\n\t\\* number argument \\- retry same args, same function, provided timeout\n\n\t\\* none \\- retry same args, same function, no timeout\n\n\nhow it works\n------------\n\nfunc\\_timeout will run the specified function in a thread with the specified arguments until it returns, raises an exception, or the timeout is exceeded.\n\nif there is a return or an exception raised, it will be returned/raised as normal.\n\nif the timeout has exceeded, the \"functiontimedout\" exception will be raised in the context of the function being called, as well as from the context of \"func\\_timeout\". you should have your function catch the \"functiontimedout\" exception and exit cleanly if possible. every 2 seconds until your function is terminated, it will continue to raise functiontimedout. the terminating of the timed-out function happens in the context of the thread and will not block main execution.\n\n\nstoppablethread\n===============\n\nstoppablethread is a subclass of threading.thread, which supports stopping the thread (supports both python2 and python3). it will work to stop even in c code.\n\nthe way it works is that you pass it an exception, and it raises it via the cpython api (so the next time a \"python\" function is called from c api, or the next line is processed in python code, the exception is raised).\n\n\nusing stoppablethread\n---------------------\n\nyou can use stoppablethread one of two ways:\n\n**as a parent class**\n\n\nyour thread can extend func\\_timeout.stoppablethread\\.stoppablethread and implement the \"run\" method, same as a normal thread.\n\n\n\tfrom func\\_timeout.stoppablethread import stoppablethread\n\n\tclass mythread(stoppablethread):\n\n\t\tdef run(self):\n\t\t\t\n\t\t\t# code here\n\n\t\t\treturn\n\n\nthen, you can create and start this thread like:\n\n\tmythread = mythread()\n\n\t# uncomment next line to start thread in \"daemon mode\" \\-\\- i.e. will terminate/join automatically upon main thread exit\n\n\t#mythread.daemon = true\n\n\tmythread.start()\n\n\nthen, at any time during the thread's execution, you can call \\.stop( stopexceptiontype ) to stop it ( more in \"stopping a thread\" below\n\n**direct thread to execute a function**\n\nalternatively, you can instantiate stoppablethread directly and pass the \"target\", \"args\", and \"kwargs\" arguments to the constructor\n\n\tmythread = stoppablethread( target=myfunction, args=('ordered', 'args', 'here'), kwargs={ 'keyword args' : 'here' } )\n\n\t# uncomment next line to start thread in \"daemon mode\" \\-\\- i.e. will terminate/join automatically upon main thread exit\n\n\t#mythread.daemon = true\n\n\tmythread.start()\n\n\nthis will allow you to call functions in stoppable threads, for example handlers in an event loop, which can be stopped later via the \\.stop() method.\n\n\nstopping a thread\n-----------------\n\n\nthe *stoppablethread* class (you must extend this for your thread) adds a function, *stop*, which can be called to stop the thread.\n\n\n\tdef stop(self, exception, raiseevery=2.0):\n\n\t\t'''\n\n\t\t\tstops the thread by raising a given exception.\n\n\t\t\t@param exception <exception type> \\- exception to throw. likely, you want to use something\n\n\t\t\t  that inherits from baseexception (so except exception as e: continue; isn't a problem)\n\n\t\t\t  this should be a class/type, not an instance, i.e.  myexceptiontype   not  myexceptiontype()\n\n\n\t\t\t@param raiseevery <float> default 2.0 \\- we will keep raising this exception every #raiseevery seconds,\n\n\t\t\t\tuntil the thread terminates.\n\n\t\t\t\tif your code traps a specific exception type, this will allow you #raiseevery seconds to cleanup before exit.\n\n\t\t\t\tif you're calling third\\-party code you can't control, which catches baseexception, set this to a low number\n\t\t\t\t \n\t\t\t\t  to break out of their exception handler.\n\n\n\t\t\t @return <none>\n\n\t\t'''\n\n\nthe \"exception\" param must be a type, and it must be instantiable with no arguments (i.e. myexceptiontype() must create the object).\n\nconsider using a custom exception type which extends baseexception, which you can then use to do basic cleanup ( flush any open files, etc. ).\n\nthe exception type you pass will be raised every #raiseevery seconds in the context of that stoppable thread. you can tweak this value to give yourself more time for cleanups, or you can shrink it down to break out of empty exception handlers  ( try/except with bare except ).\n\n\n**notes on exception type**\n\nit is recommended that you create an exception that extends baseexception instead of exception, otherwise code like this will never stop:\n\n\twhile true:\n\n\t\ttry:\n\n\t\t\tdosomething()\n\n\t\texcept exception as e:\n\n\t\t\tcontinue\n\nif you can't avoid such code (third-party lib?) you can set the \"repeatevery\" to a very very low number (like .00001 ), so hopefully it will raise, go to the except clause, and then raise again before \"continue\" is hit.\n\n\n\nyou may want to consider using singleton types with fixed error messages, so that tracebacks, etc. log that the call timed out.\n\nfor example:\n\n\tclass servershutdownexceptiontype(baseexception):\n\n\t\tdef \\_\\_init\\_\\_(self, \\*args, \\*\\*kwargs):\n\n\t\t\tbaseexception.\\_\\_init\\_\\_(self, 'server is shutting down')\n\n\nthis will force 'server is shutting down' as the message held by this exception.\n\n\n\npydoc\n=====\n\nfind the latest pydoc at http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html?vers=4.3.5 .\n\n\nsupport\n=======\n\ni've tested func\\_timeout with python 2.7, 3.4, 3.5, 3.6, 3.7. it should work on other versions as well.\n\nworks on windows, linux/unix, cygwin, mac\n\nchangelog can be found at https://raw.githubusercontent.com/kata198/func_timeout/master/changelog \n\npydoc can be found at: http://htmlpreview.github.io/?https://github.com/kata198/func_timeout/blob/master/doc/func_timeout.html?vers=1",
  "docs_url": "https://pythonhosted.org/func-timeout/",
  "keywords": "function,timeout,call,terminate,runtime,max,seconds,after,execution",
  "license": "lgplv2",
  "name": "func-timeout",
  "package_url": "https://pypi.org/project/func-timeout/",
  "project_url": "https://pypi.org/project/func-timeout/",
  "project_urls": {
    "Homepage": "https://github.com/kata198/func_timeout"
  },
  "release_url": "https://pypi.org/project/func-timeout/4.3.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python module which allows you to specify timeouts when calling any existing function. also provides support for stoppable-threads",
  "version": "4.3.5",
  "releases": [],
  "developers": [
    "kata198@gmail.com",
    "tim_savannah"
  ],
  "kwds": "func_timeout forcetimeout _timeout timeouts timeout",
  "license_kwds": "lgplv2",
  "libtype": "pypi",
  "id": "pypi_func_timeout",
  "homepage": "https://github.com/kata198/func_timeout",
  "release_count": 12,
  "dependency_ids": []
}
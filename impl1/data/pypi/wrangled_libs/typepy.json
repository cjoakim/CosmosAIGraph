{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. contents:: **typepy**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`typepy <https://github.com/thombashi/typepy>`__ is a python library for variable type checker/validator/converter at a run time.\n\n.. image:: https://badge.fury.io/py/typepy.svg\n    :target: https://badge.fury.io/py/typepy\n    :alt: pypi package version\n\n.. image:: https://anaconda.org/conda-forge/typepy/badges/version.svg\n    :target: https://anaconda.org/conda-forge/typepy\n    :alt: conda-forge package version\n\n.. image:: https://img.shields.io/pypi/pyversions/typepy.svg\n    :target: https://pypi.org/project/typepy\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/typepy.svg\n    :target: https://pypi.org/project/typepy\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/typepy/workflows/tests/badge.svg\n    :target: https://github.com/thombashi/typepy/actions?query=workflow%3atests\n    :alt: linux/macos/windows ci status\n\n.. image:: https://coveralls.io/repos/github/thombashi/typepy/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/typepy?branch=master\n    :alt: test coverage\n\n.. image:: https://github.com/thombashi/typepy/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/typepy/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\nfeatures\n==========\n- checking a value type\n- validate a value for a type\n- convert a value from one type to the other type\n\nthe correspondence between python types and ``typepy`` classes are as follows:\n\n.. table:: supported types\n\n    ================================================  =======================================================================================================\n    python type                                       typepy: type class\n    ================================================  =======================================================================================================\n    ``bool``                                          `bool <https://typepy.rtfd.io/en/latest/pages/reference/type.html#bool-type>`__\n    ``datetime``                                      `datetime <https://typepy.rtfd.io/en/latest/pages/reference/type.html#datetime-type>`__\n    ``dict``                                          `dictionary <https://typepy.rtfd.io/en/latest/pages/reference/type.html#dictionary-type>`__\n    ``float``/``decimal.decimal`` (not infinity/nan)  `realnumber <https://typepy.rtfd.io/en/latest/pages/reference/type.html#real-number-type>`__\n    ``float``/``decimal.decimal`` (infinity)          `infinity <https://typepy.rtfd.io/en/latest/pages/reference/type.html#infinity-type>`__\n    ``float``/``decimal.decimal`` (nan)               `nan <https://typepy.rtfd.io/en/latest/pages/reference/type.html#nan-type>`__\n    ``int``                                           `integer <https://typepy.rtfd.io/en/latest/pages/reference/type.html#integer-type>`__\n    ``list``                                          `list <https://typepy.rtfd.io/en/latest/pages/reference/type.html#list-type>`__\n    ``none``                                          `none <https://typepy.rtfd.io/en/latest/pages/reference/type.html#none-type>`__\n    ``str`` (not null)                                `string <https://typepy.rtfd.io/en/latest/pages/reference/type.html#string-type>`__\n    ``str`` (null)                                    `nullstring <https://typepy.rtfd.io/en/latest/pages/reference/type.html#null-string-type>`__\n    ``str`` (ip address)                              `ipaddress <https://typepy.rtfd.io/en/latest/pages/reference/type.html#ip-address-type>`__\n    ================================================  =======================================================================================================\n\ninstallation\n============\n\ninstallation: pip\n------------------------------\n::\n\n    pip install typepy\n\ninstall additional dependency packages with the following command if using ``typepy.datetime`` class\n\n::\n\n    pip install typepy[datetime]\n\ninstallation: conda\n------------------------------\n::\n\n    conda install -c conda-forge typepy\n\ninstallation: apt\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-typepy\n\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/typepy/network/dependencies>`__\n\noptional dependencies\n----------------------------------\nthese packages can be installed via ``pip install typepy[datetime]``:\n\n- `python-dateutil <https://dateutil.readthedocs.io/en/stable/>`__\n- `pytz <https://pypi.org/project/pytz/>`__\n\nusage\n=======\ntype check method\n----------------------\n:examples:\n    .. code-block:: pycon\n\n        >>> from typepy import integer\n        >>> integer(1).is_type()\n        true\n        >>> integer(1.1).is_type()\n        false\n\n\ntype validation method\n--------------------------------------------\n:examples:\n    .. code-block:: pycon\n\n        >>> from typepy import integer\n        >>> integer(1).validate()\n        >>> try:\n        ...     integer(1.1).validate()\n        ... except typeerror as e:\n        ...     # validate() raised typeerror when the value unmatched the type class\n        ...     print(e)\n        ...\n        invalid value type: expected=integer, actual=<type 'float'>\n\n\ntype conversion methods\n--------------------------------------------\n\nconvert method\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:examples:\n    .. code-block:: pycon\n\n        >>> from typepy import integer, typeconversionerror\n        >>> integer(\"1\").convert()\n        1\n        >>> try:\n        ...     integer(1.1).convert()\n        ... except typeconversionerror as e:\n        ...     # convert() raised typeconversionerror when conversion failed\n        ...     print(e)\n        ...\n        failed to convert from float to integer\n\ntry_convert method\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:examples:\n    .. code-block:: pycon\n\n        >>> from typepy import integer\n        >>> integer(\"1\").try_convert()\n        1\n        >>> print(integer(1.1).try_convert())  # try_convert() returned none when conversion failed\n        none\n\nforce_convert\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:examples:\n    .. code-block:: pycon\n\n        >>> from typepy import integer, typeconversionerror\n        >>> integer(\"1\").force_convert()  # force_convert() forcibly convert the value\n        1\n        >>> integer(1.1).force_convert()\n        1\n        >>> try:\n        ...     integer(\"abc\").force_convert()\n        ... except typeconversionerror as e:\n        ...     # force_convert() raised typeconversionerror when the value was not convertible\n        ...     print(e)\n        ...\n        failed to force_convert to int: type=<class 'str'>\n\n\nfor more information\n--------------------------------------------\ntype check/validate/convert results differed according to\n``strict_level`` value which can pass to typepy class constructors as an argument.\nmore information can be found in the\n`api reference <https://typepy.rtfd.io/en/latest/pages/reference/index.html>`__.\n\ndocumentation\n===============\nhttps://typepy.rtfd.io/\n\n",
  "docs_url": null,
  "keywords": "library,type-checking,type-conversion,validator",
  "license": "mit license",
  "name": "typepy",
  "package_url": "https://pypi.org/project/typepy/",
  "project_url": "https://pypi.org/project/typepy/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/typepy/releases",
    "Documentation": "https://typepy.rtfd.io/",
    "Homepage": "https://github.com/thombashi/typepy",
    "Source": "https://github.com/thombashi/typepy",
    "Tracker": "https://github.com/thombashi/typepy/issues"
  },
  "release_url": "https://pypi.org/project/typepy/1.3.2/",
  "requires_dist": [
    "mbstrdecoder <2,>=1.0.0",
    "python-dateutil <3.0.0,>=2.8.0 ; extra == 'datetime'",
    "pytz >=2018.9 ; extra == 'datetime'",
    "packaging ; extra == 'datetime'",
    "pytest >=6.0.1 ; extra == 'test'",
    "tcolorpy ; extra == 'test'",
    "python-dateutil <3.0.0,>=2.8.0 ; extra == 'test'",
    "pytz >=2018.9 ; extra == 'test'",
    "packaging ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "typepy is a python library for variable type checker/validator/converter at a run time.",
  "version": "1.3.2",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "typepy is_type pyversions python3 python",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_typepy",
  "homepage": "https://github.com/thombashi/typepy",
  "release_count": 60,
  "dependency_ids": [
    "pypi_mbstrdecoder",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_tcolorpy"
  ]
}
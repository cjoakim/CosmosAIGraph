{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://github.com/pre-commit/pre-commit-hooks/actions/workflows/main.yml/badge.svg)](https://github.com/pre-commit/pre-commit-hooks/actions/workflows/main.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/pre-commit/pre-commit-hooks/main.svg)](https://results.pre-commit.ci/latest/github/pre-commit/pre-commit-hooks/main)\n\npre-commit-hooks\n================\n\nsome out-of-the-box hooks for pre-commit.\n\nsee also: https://github.com/pre-commit/pre-commit\n\n\n### using pre-commit-hooks with pre-commit\n\nadd this to your `.pre-commit-config.yaml`\n\n```yaml\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0  # use the ref you want to point at\n    hooks:\n    -   id: trailing-whitespace\n    # -   id: ...\n```\n\n### hooks available\n\n#### `check-added-large-files`\nprevent giant files from being committed.\n  - specify what is \"too large\" with `args: ['--maxkb=123']` (default=500kb).\n  - limits checked files to those indicated as staged for addition by git.\n  - if `git-lfs` is installed, lfs files will be skipped\n    (requires `git-lfs>=2.2.1`)\n  - `--enforce-all` - check all listed files not just those staged for\n    addition.\n\n#### `check-ast`\nsimply check whether files parse as valid python.\n\n#### `check-builtin-literals`\nrequire literal syntax when initializing empty or zero python builtin types.\n  - allows calling constructors with positional arguments (e.g., `list('abc')`).\n  - allows calling constructors from the `builtins` (`__builtin__`) namespace (`builtins.list()`).\n  - ignore this requirement for specific builtin types with `--ignore=type1,type2,\u2026`.\n  - forbid `dict` keyword syntax with `--no-allow-dict-kwargs`.\n\n#### `check-case-conflict`\ncheck for files with names that would conflict on a case-insensitive filesystem like macos hfs+ or windows fat.\n\n#### `check-docstring-first`\nchecks for a common error of placing code before the docstring.\n\n#### `check-executables-have-shebangs`\nchecks that non-binary executables have a proper shebang.\n\n#### `check-json`\nattempts to load all json files to verify syntax.\n\n#### `check-merge-conflict`\ncheck for files that contain merge conflict strings.\n  - `--assume-in-merge` - allows running the hook when there is no ongoing merge operation\n\n#### `check-shebang-scripts-are-executable`\nchecks that scripts with shebangs are executable.\n\n#### `check-symlinks`\nchecks for symlinks which do not point to anything.\n\n#### `check-toml`\nattempts to load all toml files to verify syntax.\n\n#### `check-vcs-permalinks`\nensures that links to vcs websites are permalinks.\n  - `--additional-github-domain domain` - add check for specified domain.\n    can be repeated multiple times.  for example, if your company uses\n    github enterprise you may use something like\n    `--additional-github-domain github.example.com`\n\n#### `check-xml`\nattempts to load all xml files to verify syntax.\n\n#### `check-yaml`\nattempts to load all yaml files to verify syntax.\n  - `--allow-multiple-documents` - allow yaml files which use the\n    [multi-document syntax](http://www.yaml.org/spec/1.2/spec.html#yaml)\n  - `--unsafe` - instead of loading the files, simply parse them for syntax.\n    a syntax-only check enables extensions and unsafe constructs which would\n    otherwise be forbidden.  using this option removes all guarantees of\n    portability to other yaml implementations.\n    implies `--allow-multiple-documents`.\n\n#### `debug-statements`\ncheck for debugger imports and py37+ `breakpoint()` calls in python source.\n\n#### `destroyed-symlinks`\ndetects symlinks which are changed to regular files with a content of a path\nwhich that symlink was pointing to.\nthis usually happens on windows when a user clones a repository that has\nsymlinks but they do not have the permission to create symlinks.\n\n#### `detect-aws-credentials`\nchecks for the existence of aws secrets that you have set up with the aws cli.\nthe following arguments are available:\n- `--credentials-file credentials_file` - additional aws cli style\n  configuration file in a non-standard location to fetch configured\n  credentials from. can be repeated multiple times.\n- `--allow-missing-credentials` - allow hook to pass when no credentials are detected.\n\n#### `detect-private-key`\nchecks for the existence of private keys.\n\n#### `double-quote-string-fixer`\nthis hook replaces double quoted strings with single quoted strings.\n\n#### `end-of-file-fixer`\nmakes sure files end in a newline and only a newline.\n\n#### `file-contents-sorter`\nsort the lines in specified files (defaults to alphabetical).\nyou must provide the target [`files`](https://pre-commit.com/#config-files) as input.\nnote that this hook will remove blank lines and does not respect any comments.\nall newlines will be converted to line feeds (`\\n`).\n\nthe following arguments are available:\n- `--ignore-case` - fold lower case to upper case characters.\n- `--unique` - ensure each line is unique.\n\n#### `fix-byte-order-marker`\nremoves utf-8 byte order marker\n\n#### `fix-encoding-pragma`\nadd `# -*- coding: utf-8 -*-` to the top of python files.\n  - to remove the coding pragma pass `--remove` (useful in a python3-only codebase)\n\n#### `forbid-new-submodules`\nprevent addition of new git submodules.\n\nthis is intended as a helper to migrate away from submodules.  if you want to\nban them entirely use `forbid-submodules`\n\n#### `forbid-submodules`\nforbids any submodules in the repository.\n\n#### `mixed-line-ending`\nreplaces or checks mixed line ending.\n  - `--fix={auto,crlf,lf,no}`\n      - `auto` - replaces automatically the most frequent line ending. this is the default argument.\n      - `crlf`, `lf` - forces to replace line ending by respectively crlf and lf.\n          - this option isn't compatible with git setup check-in lf check-out crlf as git smudge this later than the hook is invoked.\n      - `no` - checks if there is any mixed line ending without modifying any file.\n\n#### `name-tests-test`\nverifies that test files are named correctly.\n- `--pytest` (the default): ensure tests match `.*_test\\.py`\n- `--pytest-test-first`: ensure tests match `test_.*\\.py`\n- `--django` / `--unittest`: ensure tests match `test.*\\.py`\n\n#### `no-commit-to-branch`\nprotect specific branches from direct checkins.\n  - use `args: [--branch, staging, --branch, main]` to set the branch.\n    both `main` and `master` are protected by default if no branch argument is set.\n  - `-b` / `--branch` may be specified multiple times to protect multiple\n    branches.\n  - `-p` / `--pattern` can be used to protect branches that match a supplied regex\n    (e.g. `--pattern, release/.*`). may be specified multiple times.\n\nnote that `no-commit-to-branch` is configured by default to [`always_run`](https://pre-commit.com/#config-always_run).\nas a result, it will ignore any setting of [`files`](https://pre-commit.com/#config-files),\n[`exclude`](https://pre-commit.com/#config-exclude), [`types`](https://pre-commit.com/#config-types)\nor [`exclude_types`](https://pre-commit.com/#config-exclude_types).\nset [`always_run: false`](https://pre-commit.com/#config-always_run) to allow this hook to be skipped according to these\nfile filters. caveat: in this configuration, empty commits (`git commit --allow-empty`) would always be allowed by this hook.\n\n#### `pretty-format-json`\nchecks that all your json files are pretty.  \"pretty\"\nhere means that keys are sorted and indented.  you can configure this with\nthe following commandline options:\n  - `--autofix` - automatically format json files\n  - `--indent ...` - control the indentation (either a number for a number of spaces or a string of whitespace).  defaults to 2 spaces.\n  - `--no-ensure-ascii` preserve unicode characters instead of converting to escape sequences\n  - `--no-sort-keys` - when autofixing, retain the original key ordering (instead of sorting the keys)\n  - `--top-keys comma,separated,keys` - keys to keep at the top of mappings.\n\n#### `requirements-txt-fixer`\nsorts entries in requirements.txt and constraints.txt and removes incorrect entry for `pkg-resources==0.0.0`\n\n#### `sort-simple-yaml`\nsorts simple yaml files which consist only of top-level\nkeys, preserving comments and blocks.\n\nnote that `sort-simple-yaml` by default matches no `files` as it enforces a\nvery specific format.  you must opt in to this by setting [`files`](https://pre-commit.com/#config-files), for example:\n\n```yaml\n    -   id: sort-simple-yaml\n        files: ^config/simple/\n```\n\n\n#### `trailing-whitespace`\ntrims trailing whitespace.\n  - to preserve markdown [hard linebreaks](https://github.github.com/gfm/#hard-line-break)\n    use `args: [--markdown-linebreak-ext=md]` (or other extensions used\n    by your markdownfiles).  if for some reason you want to treat all files\n    as markdown, use `--markdown-linebreak-ext=*`.\n  - by default, this hook trims all whitespace from the ends of lines.\n    to specify a custom set of characters to trim instead, use `args: [--chars,\"<chars to trim>\"]`.\n\n### deprecated / replaced hooks\n\n- `check-byte-order-marker`: instead use fix-byte-order-marker\n\n### as a standalone package\n\nif you'd like to use these hooks, they're also available as a standalone package.\n\nsimply `pip install pre-commit-hooks`\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pre-commit-hooks",
  "package_url": "https://pypi.org/project/pre-commit-hooks/",
  "project_url": "https://pypi.org/project/pre-commit-hooks/",
  "project_urls": {
    "Homepage": "https://github.com/pre-commit/pre-commit-hooks"
  },
  "release_url": "https://pypi.org/project/pre-commit-hooks/4.5.0/",
  "requires_dist": [
    "ruamel.yaml (>=0.15)",
    "tomli (>=1.1.0) ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "some out-of-the-box hooks for pre-commit.",
  "version": "4.5.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "commits commit yaml git workflows",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pre_commit_hooks",
  "homepage": "https://github.com/pre-commit/pre-commit-hooks",
  "release_count": 51,
  "dependency_ids": [
    "pypi_ruamel.yaml",
    "pypi_tomli"
  ]
}
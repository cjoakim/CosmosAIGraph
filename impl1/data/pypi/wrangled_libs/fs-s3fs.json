{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: system :: filesystems"
  ],
  "description": "s3fs\n====\n\ns3fs is a `pyfilesystem <https://www.pyfilesystem.org/>`__ interface to\namazon s3 cloud storage.\n\nas a pyfilesystem concrete class,\n`s3fs <http://fs-s3fs.readthedocs.io/en/latest/>`__ allows you to work\nwith s3 in the same way as any other supported filesystem.\n\ninstalling\n----------\n\nyou can install s3fs from pip as follows:\n\n::\n\n    pip install fs-s3fs\n\nopening a s3fs\n--------------\n\nopen an s3fs by explicitly using the constructor:\n\n.. code:: python\n\n    from fs_s3fs import s3fs\n    s3fs = s3fs('mybucket')\n\nor with a fs url:\n\n.. code:: python\n\n      from fs import open_fs\n      s3fs = open_fs('s3://mybucket')\n\ndownloading files\n-----------------\n\nto *download* files from an s3 bucket, open a file on the s3 filesystem\nfor reading, then write the data to a file on the local filesystem.\nhere's an example that copies a file ``example.mov`` from s3 to your hd:\n\n.. code:: python\n\n    from fs.tools import copy_file_data\n    with s3fs.open('example.mov', 'rb') as remote_file:\n        with open('example.mov', 'wb') as local_file:\n            copy_file_data(remote_file, local_file)\n\nalthough it is preferable to use the higher-level functionality in the\n``fs.copy`` module. here's an example:\n\n.. code:: python\n\n    from fs.copy import copy_file\n    copy_file(s3fs, 'example.mov', './', 'example.mov')\n\nuploading files\n---------------\n\nyou can *upload* files in the same way. simply copy a file from a source\nfilesystem to the s3 filesystem. see `moving and\ncopying <https://docs.pyfilesystem.org/en/latest/guide.html#moving-and-copying>`__\nfor more information.\n\nextraargs\n---------\n\ns3 objects have additional properties, beyond a traditional filesystem.\nthese options can be set using the ``upload_args`` and ``download_args``\nproperties. which are handed to upload and download methods, as\nappropriate, for the lifetime of the filesystem instance.\n\nfor example, to set the ``cache-control`` header of all objects uploaded\nto a bucket:\n\n.. code:: python\n\n    import fs, fs.mirror\n    s3fs = s3fs('example', upload_args={\"cachecontrol\": \"max-age=2592000\", \"acl\": \"public-read\"})\n    fs.mirror.mirror('/path/to/mirror', s3fs)\n\nsee `the boto3\ndocs <https://boto3.readthedocs.io/en/latest/reference/customizations/s3.html#boto3.s3.transfer.s3transfer.allowed_upload_args>`__\nfor more information.\n\n``acl`` and ``cache_control`` are exposed explicitly for convenience,\nand can be used in urls. it is important to url-escape the\n``cache_control`` value in a url, as it may contain special characters.\n\n.. code:: python\n\n    import fs, fs.mirror\n    with open fs.open_fs('s3://example?acl=public-read&cache_control=max-age%3d2592000%2cpublic') as s3fs\n        fs.mirror.mirror('/path/to/mirror', s3fs)\n\ns3 urls\n-------\n\nyou can get a public url to a file on a s3 bucket as follows:\n\n.. code:: python\n\n    movie_url = s3fs.geturl('example.mov')\n\ndocumentation\n-------------\n\n-  `pyfilesystem wiki <https://www.pyfilesystem.org>`__\n-  `s3fs reference <http://fs-s3fs.readthedocs.io/en/latest/>`__\n-  `pyfilesystem\n   reference <https://docs.pyfilesystem.org/en/latest/reference/base.html>`__\n",
  "docs_url": null,
  "keywords": "pyfilesystem",
  "license": "mit",
  "name": "fs-s3fs",
  "package_url": "https://pypi.org/project/fs-s3fs/",
  "project_url": "https://pypi.org/project/fs-s3fs/",
  "project_urls": {
    "Homepage": "https://github.com/PyFilesystem/s3fs"
  },
  "release_url": "https://pypi.org/project/fs-s3fs/1.1.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "amazon s3 filesystem for pyfilesystem2",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "will_mcgugan",
    "willmcgugan@gmail.com"
  ],
  "kwds": "fs_s3fs s3fs pyfilesystem pyfilesystem2 s3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_fs_s3fs",
  "homepage": "https://github.com/pyfilesystem/s3fs",
  "release_count": 16,
  "dependency_ids": []
}
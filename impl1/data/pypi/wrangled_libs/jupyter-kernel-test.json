{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "topic :: software development :: testing"
  ],
  "description": "===================\njupyter_kernel_test\n===================\n\n``jupyter_kernel_test`` is a tool for testing jupyter_ kernels. it tests kernels\nfor successful code execution and conformance with the `jupyter messaging protocol`_\n(currently 5.0).\n\n-------\ninstall\n-------\n\ninstall it with pip (python3.4 or greater required)::\n\n    pip3 install jupyter_kernel_test\n\n-----\nusage\n-----\n\nto use it, you need to write a (python) ``unittest`` file containing code\nsamples in the relevant language which test various parts of the messaging protocol.\na short example is given below, and you can also refer to the\n``test_ipykernel.py`` and ``test_irkernel.py`` files for complete examples.\n\nsome parts of the messaging protocol are relevant only to the browser-based\nnotebook (rich display) or console interfaces (code completeness,\nhistory searching). only parts of the spec for which you provide code samples\nare tested.\n\nrun this file directly using python, or use ``nosetests`` or ``py.test`` to find\nand run it.\n\n-------\nexample\n-------\n\n.. code-block:: python\n\n    import unittest\n    import jupyter_kernel_test\n\n    class mykerneltests(jupyter_kernel_test.kerneltests):\n        # required --------------------------------------\n\n        # the name identifying an installed kernel to run the tests against\n        kernel_name = \"mykernel\"\n\n        # language_info.name in a kernel_info_reply should match this\n        language_name = \"mylanguage\"\n\n        # optional --------------------------------------\n\n        # code in the kernel's language to write \"hello, world\" to stdout\n        code_hello_world = \"print 'hello, world'\"\n\n        # pager: code that should display something (anything) in the pager\n        code_page_something = \"help(something)\"\n\n        # samples of code which generate a result value (ie, some text\n        # displayed as out[n])\n        code_execute_result = [\n            {'code': '6*7', 'result': '42'}\n        ]\n\n        # samples of code which should generate a rich display output, and\n        # the expected mime type\n        code_display_data = [\n            {'code': 'show_image()', 'mime': 'image/png'}\n        ]\n\n        # you can also write extra tests. we recommend putting your kernel name\n        # in the method name, to avoid clashing with any tests that\n        # jupyter_kernel_test adds in the future.\n        def test_mykernel_stderr(self):\n            self.flush_channels()\n            reply, output_msgs = self.execute_helper(code='print_err \"oops\"')\n            self.assertequal(output_msgs[0]['header']['msg_type'], 'stream')\n            self.assertequal(output_msgs[0]['content']['name'], 'stderr')\n            self.assertequal(output_msgs[0]['content']['text'], 'oops\\n')\n\n    if __name__ == '__main__':\n        unittest.main()\n\n--------\ncoverage\n--------\n\nthe following aspects of the messaging protocol are not explicitly tested:\n\n- widget comms: ``comm_open``, ``comm_msg``, ``comm_close``\n- stdin: ``input_request``, ``input_reply``\n- display_data metadata\n- shutdown/restart: ``shutdown_request``, ``shutdown_reply``\n- history: not all option combinations covered\n- inspection: multiple levels\n- execution payloads (deprecated but still used): payloads ``load``, ``edit``, ``ask_exit``\n- user expressions\n- execution: combinations of ``silent``, ``store_history`` and ``stop_on_error``\n\n.. _jupyter: http://jupyter.org\n.. _jupyter messaging protocol: https://jupyter-client.readthedocs.io/en/latest/messaging.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright (c) 2015-2021 project jupyter contributors all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.",
  "name": "jupyter-kernel-test",
  "package_url": "https://pypi.org/project/jupyter-kernel-test/",
  "project_url": "https://pypi.org/project/jupyter-kernel-test/",
  "project_urls": {
    "Homepage": "https://github.com/jupyter/jupyter_kernel_test"
  },
  "release_url": "https://pypi.org/project/jupyter-kernel-test/0.6.0/",
  "requires_dist": [
    "jsonschema",
    "jupyter-client>=6.1.13",
    "ipykernel; extra == 'test'",
    "pre-commit; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "jupyter@googlegroups.com"
  ],
  "kwds": "jupyter_kernel_test jupyter kerneltests test_mykernel_stderr jupyter_",
  "license_kwds": "copyright liability liable redistributions negligence",
  "libtype": "pypi",
  "id": "pypi_jupyter_kernel_test",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": [
    "pypi_ipykernel",
    "pypi_jsonschema",
    "pypi_jupyter_client",
    "pypi_pre_commit"
  ]
}
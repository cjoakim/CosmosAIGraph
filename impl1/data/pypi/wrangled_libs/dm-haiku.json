{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "haiku is a library for building neural networks in jax.\n# haiku: [sonnet] for [jax]\n\n[**overview**](#overview)\n| [**why haiku?**](#why-haiku)\n| [**quickstart**](#quickstart)\n| [**installation**](#installation)\n| [**examples**](https://github.com/deepmind/dm-haiku/tree/main/examples/)\n| [**user manual**](#user-manual)\n| [**documentation**](https://dm-haiku.readthedocs.io/)\n| [**citing haiku**](#citing-haiku)\n\n![pytest](https://github.com/deepmind/dm-haiku/workflows/pytest/badge.svg)\n![docs](https://readthedocs.org/projects/dm-haiku/badge/?version=latest)\n![pypi](https://img.shields.io/pypi/v/dm-haiku)\n\n> [!important]\n> \ud83d\udce3 **as of july 2023 [google deepmind] recommends that new projects adopt\n> [flax] (a neural network library originally developed by [google brain] and\n> now by [google deepmind]) instead of haiku.** \ud83d\udce3\n>\n> at the time of writing [flax] has superset of the features available in haiku,\n> a [larger](https://github.com/google/flax/graphs/contributors) and\n> [more active](https://github.com/google/flax/activity) development team and\n> more adoption with users outside of alphabet. [flax] has\n> [more extensive documentation](https://flax.readthedocs.io/),\n> [examples](https://github.com/huggingface/transformers/tree/main/examples/flax)\n> and an [active community](https://huggingface.co/flax-community) creating end\n> to end examples.\n>\n> haiku will remain best-effort supported, however the project will enter\n> [maintenance mode](https://en.wikipedia.org/wiki/maintenance_mode), meaning\n> that development efforts will be focussed on bug fixes and compatibility with\n> new releases of jax.\n>\n> new releases will be made to keep haiku working with newer versions of python\n> and [jax], however we will not be adding (or accepting prs for) new features.\n>\n> we have significant usage of haiku internally at [google deepmind] and\n> currently plan to support haiku in this mode indefinitely.\n\n## what is haiku?\n\n> haiku is a tool<br>\n> for building neural networks<br>\n> think: \"[sonnet] for [jax]\"\n\nhaiku is a simple neural network library for [jax] developed by some of the\nauthors of [sonnet], a neural network library for [tensorflow].\n\ndocumentation on haiku can be found at https://dm-haiku.readthedocs.io/.\n\n**disambiguation:** if you are looking for haiku the operating system then\nplease see https://haiku-os.org/.\n\n## overview<a id=\"overview\"></a>\n\n[jax] is a numerical computing library that combines numpy, automatic\ndifferentiation, and first-class gpu/tpu support.\n\nhaiku is a simple neural network library for jax that enables users to use\nfamiliar **object-oriented programming models** while allowing full access to\njax's pure function transformations.\n\nhaiku provides two core tools: a module abstraction, `hk.module`, and a simple\nfunction transformation, `hk.transform`.\n\n`hk.module`s are python objects that hold references to their own parameters,\nother modules, and methods that apply functions on user inputs.\n\n`hk.transform` turns functions that use these object-oriented, functionally\n\"impure\" modules into pure functions that can be used with `jax.jit`,\n`jax.grad`, `jax.pmap`, etc.\n\n## why haiku?<a id=\"why-haiku\"></a>\n\nthere are a number of neural network libraries for jax. why should you choose\nhaiku?\n\n### haiku has been tested by researchers at deepmind at scale.\n\n- deepmind has reproduced a number of experiments in haiku and jax with relative\n  ease. these include large-scale results in image and language processing,\n  generative models, and reinforcement learning.\n\n### haiku is a library, not a framework.\n\n- haiku is designed to make specific things simpler: managing model parameters\n  and other model state.\n- haiku can be expected to compose with other libraries and work well with the\n  rest of jax.\n- haiku otherwise is designed to get out of your way - it does not define custom\n  optimizers, checkpointing formats, or replication apis.\n\n### haiku does not reinvent the wheel.\n\n- haiku builds on the programming model and apis of sonnet, a neural network\n  library with near universal adoption at deepmind. it preserves sonnet's\n  `module`-based programming model for state management while retaining access\n  to jax's function transformations.\n- haiku apis and abstractions are as close as reasonable to sonnet. many users\n  have found sonnet to be a productive programming model in tensorflow; haiku\n  enables the same experience in jax.\n\n### transitioning to haiku is easy.\n\n- by design, transitioning from tensorflow and sonnet to jax and haiku is easy.\n- outside of new features (e.g. `hk.transform`), haiku aims to match the api of\n  sonnet 2. modules, methods, argument names, defaults, and initialization\n  schemes should match.\n\n### haiku makes other aspects of jax simpler.\n\n- haiku offers a trivial model for working with random numbers. within a\n  transformed function, `hk.next_rng_key()` returns a unique rng key.\n- these unique keys are deterministically derived from an initial random key\n  passed into the top-level transformed function, and are thus safe to use with\n  jax program transformations.\n\n## quickstart<a id=\"quickstart\"></a>\n\nlet's take a look at an example neural network, loss function, and training\nloop. (for more examples, see our\n[examples directory](https://github.com/deepmind/dm-haiku/tree/main/examples/).\nthe\n[mnist example](https://github.com/deepmind/dm-haiku/tree/main/examples/mnist.py)\nis a good place to start.)\n\n```python\nimport haiku as hk\nimport jax.numpy as jnp\n\ndef softmax_cross_entropy(logits, labels):\n  one_hot = jax.nn.one_hot(labels, logits.shape[-1])\n  return -jnp.sum(jax.nn.log_softmax(logits) * one_hot, axis=-1)\n\ndef loss_fn(images, labels):\n  mlp = hk.sequential([\n      hk.linear(300), jax.nn.relu,\n      hk.linear(100), jax.nn.relu,\n      hk.linear(10),\n  ])\n  logits = mlp(images)\n  return jnp.mean(softmax_cross_entropy(logits, labels))\n\nloss_fn_t = hk.transform(loss_fn)\nloss_fn_t = hk.without_apply_rng(loss_fn_t)\n\nrng = jax.random.prngkey(42)\ndummy_images, dummy_labels = next(input_dataset)\nparams = loss_fn_t.init(rng, dummy_images, dummy_labels)\n\ndef update_rule(param, update):\n  return param - 0.01 * update\n\nfor images, labels in input_dataset:\n  grads = jax.grad(loss_fn_t.apply)(params, images, labels)\n  params = jax.tree_util.tree_map(update_rule, params, grads)\n```\n\nthe core of haiku is `hk.transform`. the `transform` function allows you to\nwrite neural network functions that rely on parameters (here the weights of the\n`linear` layers) without requiring you to explicitly write the boilerplate\nfor initialising those parameters. `transform` does this by transforming the\nfunction into a pair of functions that are _pure_ (as required by jax) `init`\nand `apply`.\n\n### `init`\n\nthe `init` function, with signature `params = init(rng, ...)` (where `...` are\nthe arguments to the untransformed function), allows you to **collect** the\ninitial value of any parameters in the network. haiku does this by running your\nfunction, keeping track of any parameters requested through `hk.get_parameter`\n(called by e.g. `hk.linear`) and returning them to you.\n\nthe `params` object returned is a nested data structure of all the\nparameters in your network, designed for you to inspect and manipulate. \nconcretely, it is a mapping of module name to module parameters, where a module\nparameter is a mapping of parameter name to parameter value. for example:\n\n```\n{'linear': {'b': ndarray(..., shape=(300,), dtype=float32),\n            'w': ndarray(..., shape=(28, 300), dtype=float32)},\n 'linear_1': {'b': ndarray(..., shape=(100,), dtype=float32),\n              'w': ndarray(..., shape=(1000, 100), dtype=float32)},\n 'linear_2': {'b': ndarray(..., shape=(10,), dtype=float32),\n              'w': ndarray(..., shape=(100, 10), dtype=float32)}}\n```\n\n### `apply`\n\nthe `apply` function, with signature `result = apply(params, rng, ...)`, allows\nyou to **inject** parameter values into your function. whenever\n`hk.get_parameter` is called, the value returned will come from the `params` you\nprovide as input to `apply`:\n\n```python\nloss = loss_fn_t.apply(params, rng, images, labels)\n```\n\nnote that since the actual computation performed by our loss function doesn't\nrely on random numbers, passing in a random number generator is unnecessary, so\nwe could also pass in `none` for the `rng` argument. (note that if your\ncomputation _does_ use random numbers, passing in `none` for `rng` will cause\nan error to be raised.) in our example above, we ask haiku to do this for us\nautomatically with:\n\n```python\nloss_fn_t = hk.without_apply_rng(loss_fn_t)\n```\n\nsince `apply` is a pure function we can pass it to `jax.grad` (or any of jax's\nother transforms):\n\n```python\ngrads = jax.grad(loss_fn_t.apply)(params, images, labels)\n```\n\n### training\n\nthe training loop in this example is very simple. one detail to note is the use\nof `jax.tree_util.tree_map` to apply the `sgd` function across all matching\nentries in `params` and `grads`. the result has the same structure as the\nprevious `params` and can again be used with `apply`.\n\n\n## installation<a id=\"installation\"></a>\n\nhaiku is written in pure python, but depends on c++ code via jax.\n\nbecause jax installation is different depending on your cuda version, haiku does\nnot list jax as a dependency in `requirements.txt`.\n\nfirst, follow [these instructions](https://github.com/google/jax#installation)\nto install jax with the relevant accelerator support.\n\nthen, install haiku using pip:\n\n```bash\n$ pip install git+https://github.com/deepmind/dm-haiku\n```\n\nalternatively, you can install via pypi:\n\n```bash\n$ pip install -u dm-haiku\n```\n\nour examples rely on additional libraries (e.g. [bsuite](https://github.com/deepmind/bsuite)). you can install the full set of additional requirements using pip:\n\n```bash\n$ pip install -r examples/requirements.txt\n```\n\n## user manual<a id=\"user-manual\"></a>\n\n### writing your own modules\n\nin haiku, all modules are a subclass of `hk.module`. you can implement any\nmethod you like (nothing is special-cased), but typically modules implement\n`__init__` and `__call__`.\n\nlet's work through implementing a linear layer:\n\n```python\nclass mylinear(hk.module):\n\n  def __init__(self, output_size, name=none):\n    super().__init__(name=name)\n    self.output_size = output_size\n\n  def __call__(self, x):\n    j, k = x.shape[-1], self.output_size\n    w_init = hk.initializers.truncatednormal(1. / np.sqrt(j))\n    w = hk.get_parameter(\"w\", shape=[j, k], dtype=x.dtype, init=w_init)\n    b = hk.get_parameter(\"b\", shape=[k], dtype=x.dtype, init=jnp.zeros)\n    return jnp.dot(x, w) + b\n```\n\nall modules have a name. when no `name` argument is passed to the module, its\nname is inferred from the name of the python class (for example `mylinear`\nbecomes `my_linear`). modules can have named parameters that are accessed\nusing `hk.get_parameter(param_name, ...)`. we use this api (rather than just\nusing object properties) so that we can convert your code into a pure function\nusing `hk.transform`.\n\nwhen using modules you need to define functions and transform them into a pair\nof pure functions using `hk.transform`. see our [quickstart](#quickstart) for\nmore details about the functions returned from `transform`:\n\n```python\ndef forward_fn(x):\n  model = mylinear(10)\n  return model(x)\n\n# turn `forward_fn` into an object with `init` and `apply` methods. by default,\n# the `apply` will require an rng (which can be none), to be used with\n# `hk.next_rng_key`.\nforward = hk.transform(forward_fn)\n\nx = jnp.ones([1, 1])\n\n# when we run `forward.init`, haiku will run `forward_fn(x)` and collect initial\n# parameter values. haiku requires you pass a rng key to `init`, since parameters\n# are typically initialized randomly:\nkey = hk.prngsequence(42)\nparams = forward.init(next(key), x)\n\n# when we run `forward.apply`, haiku will run `forward_fn(x)` and inject parameter\n# values from the `params` that are passed as the first argument.  note that\n# models transformed using `hk.transform(f)` must be called with an additional\n# `rng` argument: `forward.apply(params, rng, x)`. use\n# `hk.without_apply_rng(hk.transform(f))` if this is undesirable.\ny = forward.apply(params, none, x)\n```\n\n### working with stochastic models\n\nsome models may require random sampling as part of the computation.\nfor example, in variational autoencoders with the reparametrization trick,\na random sample from the standard normal distribution is needed. for dropout we\nneed a random mask to drop units from the input. the main hurdle in making this\nwork with jax is in management of prng keys.\n\nin haiku we provide a simple api for maintaining a prng key sequence associated\nwith modules: `hk.next_rng_key()` (or `next_rng_keys()` for multiple keys):\n\n```python\nclass mydropout(hk.module):\n\n  def __init__(self, rate=0.5, name=none):\n    super().__init__(name=name)\n    self.rate = rate\n\n  def __call__(self, x):\n    key = hk.next_rng_key()\n    p = jax.random.bernoulli(key, 1.0 - self.rate, shape=x.shape)\n    return x * p / (1.0 - self.rate)\n\nforward = hk.transform(lambda x: mydropout()(x))\n\nkey1, key2 = jax.random.split(jax.random.prngkey(42), 2)\nparams = forward.init(key1, x)\nprediction = forward.apply(params, key2, x)\n```\n\nfor a more complete look at working with stochastic models, please see our\n[vae example](https://github.com/deepmind/dm-haiku/tree/main/examples/vae.py).\n\n**note:** `hk.next_rng_key()` is not functionally pure which means you should\navoid using it alongside jax transformations which are inside `hk.transform`.\nfor more information and possible workarounds, please consult the docs on\n[haiku transforms](https://dm-haiku.readthedocs.io/en/latest/notebooks/transforms.html)\nand available\n[wrappers for jax transforms inside haiku networks](https://dm-haiku.readthedocs.io/en/latest/api.html#haiku-transforms).\n\n### working with non-trainable state\n\nsome models may want to maintain some internal, mutable state. for example, in\nbatch normalization a moving average of values encountered during training is\nmaintained.\n\nin haiku we provide a simple api for maintaining mutable state that is\nassociated with modules: `hk.set_state` and `hk.get_state`. when using these\nfunctions you need to transform your function using `hk.transform_with_state`\nsince the signature of the returned pair of functions is different:\n\n```python\ndef forward(x, is_training):\n  net = hk.nets.resnet50(1000)\n  return net(x, is_training)\n\nforward = hk.transform_with_state(forward)\n\n# the `init` function now returns parameters **and** state. state contains\n# anything that was created using `hk.set_state`. the structure is the same as\n# params (e.g. it is a per-module mapping of named values).\nparams, state = forward.init(rng, x, is_training=true)\n\n# the apply function now takes both params **and** state. additionally it will\n# return updated values for state. in the resnet example this will be the\n# updated values for moving averages used in the batch norm layers.\nlogits, state = forward.apply(params, state, rng, x, is_training=true)\n```\n\nif you forget to use `hk.transform_with_state` don't worry, we will print a\nclear error pointing you to `hk.transform_with_state` rather than silently\ndropping your state.\n\n### distributed training with `jax.pmap`\n\nthe pure functions returned from `hk.transform` (or `hk.transform_with_state`)\nare fully compatible with `jax.pmap`. for more details on spmd programming with\n`jax.pmap`,\n[look here](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap).\n\none common use of `jax.pmap` with haiku is for data-parallel training on many\naccelerators, potentially across multiple hosts. with haiku, that might look\nlike this:\n\n```python\ndef loss_fn(inputs, labels):\n  logits = hk.nets.mlp([8, 4, 2])(x)\n  return jnp.mean(softmax_cross_entropy(logits, labels))\n\nloss_fn_t = hk.transform(loss_fn)\nloss_fn_t = hk.without_apply_rng(loss_fn_t)\n\n# initialize the model on a single device.\nrng = jax.random.prngkey(428)\nsample_image, sample_label = next(input_dataset)\nparams = loss_fn_t.init(rng, sample_image, sample_label)\n\n# replicate params onto all devices.\nnum_devices = jax.local_device_count()\nparams = jax.tree_util.tree_map(lambda x: np.stack([x] * num_devices), params)\n\ndef make_superbatch():\n  \"\"\"constructs a superbatch, i.e. one batch of data per device.\"\"\"\n  # get n batches, then split into list-of-images and list-of-labels.\n  superbatch = [next(input_dataset) for _ in range(num_devices)]\n  superbatch_images, superbatch_labels = zip(*superbatch)\n  # stack the superbatches to be one array with a leading dimension, rather than\n  # a python list. this is what `jax.pmap` expects as input.\n  superbatch_images = np.stack(superbatch_images)\n  superbatch_labels = np.stack(superbatch_labels)\n  return superbatch_images, superbatch_labels\n\ndef update(params, inputs, labels, axis_name='i'):\n  \"\"\"updates params based on performance on inputs and labels.\"\"\"\n  grads = jax.grad(loss_fn_t.apply)(params, inputs, labels)\n  # take the mean of the gradients across all data-parallel replicas.\n  grads = jax.lax.pmean(grads, axis_name)\n  # update parameters using sgd or adam or ...\n  new_params = my_update_rule(params, grads)\n  return new_params\n\n# run several training updates.\nfor _ in range(10):\n  superbatch_images, superbatch_labels = make_superbatch()\n  params = jax.pmap(update, axis_name='i')(params, superbatch_images,\n                                           superbatch_labels)\n```\n\nfor a more complete look at distributed haiku training, take a look at our\n[resnet-50 on imagenet example](https://github.com/deepmind/dm-haiku/tree/main/examples/imagenet/).\n\n## citing haiku<a id=\"citing-haiku\"></a>\n\nto cite this repository:\n\n```\n@software{haiku2020github,\n  author = {tom hennigan and trevor cai and tamara norman and lena martens and igor babuschkin},\n  title = {{h}aiku: {s}onnet for {jax}},\n  url = {http://github.com/deepmind/dm-haiku},\n  version = {0.0.10},\n  year = {2020},\n}\n```\n\nin this bibtex entry, the version number is intended to be from\n[`haiku/__init__.py`](https://github.com/deepmind/dm-haiku/blob/main/haiku/__init__.py),\nand the year corresponds to the project's open-source release.\n\n[jax]: https://github.com/google/jax\n[sonnet]: https://github.com/deepmind/sonnet\n[tensorflow]: https://github.com/tensorflow/tensorflow\n[flax]: https://github.com/google/flax\n[google deepmind]: https://blog.google/technology/ai/april-ai-update/\n[google brain]: https://research.google/teams/brain/\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "dm-haiku",
  "package_url": "https://pypi.org/project/dm-haiku/",
  "project_url": "https://pypi.org/project/dm-haiku/",
  "project_urls": {
    "Homepage": "https://github.com/deepmind/dm-haiku"
  },
  "release_url": "https://pypi.org/project/dm-haiku/0.0.11/",
  "requires_dist": [
    "absl-py >=0.7.1",
    "jmp >=0.0.2",
    "numpy >=1.18.0",
    "tabulate >=0.8.9",
    "flax >=0.7.1",
    "jax >=0.4.16 ; extra == 'jax'",
    "jaxlib >=0.4.16 ; extra == 'jax'"
  ],
  "requires_python": "",
  "summary": "haiku is a library for building neural networks in jax.",
  "version": "0.0.11",
  "releases": [],
  "developers": [
    "deepmind",
    "haiku-dev-os@google.com"
  ],
  "kwds": "haiku haiku2020github sonnet pytest overview",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_dm_haiku",
  "homepage": "https://github.com/deepmind/dm-haiku",
  "release_count": 14,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_flax",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_jmp",
    "pypi_numpy",
    "pypi_tabulate"
  ],
  "documentation_summary": "The HTML text provides information about \"dm-haiku,\" a version 0.0.12 Python library released on February 28, 2024, for building neural networks in JAX. Developed by DeepMind, it is licensed under the Apache Software License (Apache 2.0) and is currently in beta development status. Haiku is recommended for developers, educators, and researchers in science. As of July 2023, Google DeepMind suggests using Flax, another neural network library, for new projects due to its broader feature set, larger development team, and more extensive documentation. However, Haiku will continue to receive support for bug fixes and compatibility updates with new JAX releases. The library simplifies neural network creation in JAX, offering object-oriented programming models and easy integration with JAX's pure function transformations. Installation instructions, examples, and a user manual are provided, along with a note on transitioning from TensorFlow and Sonnet to JAX and Haiku.",
  "embedding": [
    -0.025450468063354492,
    0.012766260653734207,
    -0.011733746156096458,
    -0.007849848829209805,
    -0.002861639019101858,
    0.025012845173478127,
    0.010461905971169472,
    -0.004280492197722197,
    0.0015128736849874258,
    -0.03528328984975815,
    0.018174998462200165,
    -0.009873851202428341,
    -0.0151936961337924,
    0.003270200453698635,
    -0.01509796641767025,
    -0.02075970359146595,
    0.02022635191679001,
    -0.009326823987066746,
    -0.0019932324066758156,
    -0.009955905377864838,
    0.004748885054141283,
    -0.015535588376224041,
    -0.027392415329813957,
    -0.029129229485988617,
    -0.014906506985425949,
    0.017190348356962204,
    0.03443539887666702,
    -0.02762490324676037,
    -0.012219232507050037,
    0.003159085288643837,
    0.02449316903948784,
    -0.0051899258978664875,
    -0.01751856505870819,
    -0.0038326133508235216,
    -0.003024037927389145,
    0.014277424663305283,
    0.022865761071443558,
    -0.013545774854719639,
    0.028253983706235886,
    -0.019310081377625465,
    0.01996651291847229,
    0.02116997539997101,
    0.004820682108402252,
    -0.010995258577167988,
    -0.01796986162662506,
    0.006889130920171738,
    -0.0018957931315526366,
    -0.028144579380750656,
    -0.004666830878704786,
    0.023002518340945244,
    0.019610945135354996,
    0.04143735393881798,
    -0.013361153192818165,
    0.006191670428961515,
    -0.01649288833141327,
    -0.010482419282197952,
    -0.004321519285440445,
    -0.01445520855486393,
    0.003379605943337083,
    0.0002733002183958888,
    0.008007119409739971,
    0.008916553109884262,
    -0.020062243565917015,
    -0.009463580325245857,
    0.004153992049396038,
    -0.01015420351177454,
    -0.031727612018585205,
    0.009162715636193752,
    -0.0010205487487837672,
    -0.005911319050937891,
    0.029375391080975533,
    0.042859625071287155,
    -0.025395764037966728,
    -0.03804578259587288,
    0.02959420345723629,
    0.0050018853507936,
    -0.02665392868220806,
    -0.02363160066306591,
    -0.023768356069922447,
    0.0034514034632593393,
    0.02612057700753212,
    -0.0035146535374224186,
    -0.006954090669751167,
    0.026968469843268394,
    -0.012923531234264374,
    0.007015631068497896,
    -0.022975167259573936,
    0.00994906760752201,
    -0.017874132841825485,
    -0.020130621269345284,
    0.006889130920171738,
    -0.01910494454205036,
    0.0016103129601106048,
    0.009449904784560204,
    -0.025573547929525375,
    0.02166230045258999,
    -0.016916833817958832,
    0.014113316312432289,
    -0.005271980073302984,
    -0.0001232949289260432,
    0.002931727096438408,
    0.014838128350675106,
    -0.007316496688872576,
    -0.02208624593913555,
    -0.022359760478138924,
    -0.004560844041407108,
    0.0015043263556435704,
    0.005395061336457729,
    0.02442478947341442,
    0.022031543776392937,
    -0.02839074097573757,
    0.012335476465523243,
    -0.004140316508710384,
    -0.06175943464040756,
    0.00941571593284607,
    -0.003706113202497363,
    0.029047174379229546,
    -0.0069472528994083405,
    -0.0045300736092031,
    -0.016068940982222557,
    0.00029723267653025687,
    0.021566569805145264,
    0.005795075558125973,
    0.0111320149153471,
    0.020540893077850342,
    0.014674019999802113,
    -0.023358086124062538,
    -0.03681496903300285,
    -0.019159648567438126,
    -0.044336602091789246,
    0.013785099610686302,
    -0.008684066124260426,
    -0.006820752751082182,
    7.13166082277894e-05,
    -0.005856615956872702,
    -0.0009743932168930769,
    -0.00955247227102518,
    -0.019118620082736015,
    -0.006745536345988512,
    -0.017805753275752068,
    0.032247286289930344,
    0.01913229562342167,
    -0.005521561484783888,
    -0.01580910198390484,
    -0.01736813224852085,
    0.020595595240592957,
    0.012280773371458054,
    0.02049986645579338,
    -0.010441392660140991,
    -0.019788729026913643,
    0.02230505831539631,
    -0.02241446264088154,
    -0.02287943661212921,
    -0.012130340561270714,
    0.012150854803621769,
    0.028336038812994957,
    -0.0063284276984632015,
    0.02348116785287857,
    -0.024260681122541428,
    0.016889482736587524,
    0.00945674255490303,
    0.025081222876906395,
    -0.03875691816210747,
    0.0005872001056559384,
    0.003459950676187873,
    0.02532738633453846,
    0.006400224752724171,
    -0.013019260950386524,
    -0.006875455379486084,
    -0.014195370487868786,
    0.011084150522947311,
    0.010290959849953651,
    -0.04250405728816986,
    -0.011118339374661446,
    -0.0017239921726286411,
    -0.0008957579848356545,
    0.017956186085939407,
    0.017258726060390472,
    -0.031727612018585205,
    -0.006232697516679764,
    0.023276031017303467,
    0.0055865212343633175,
    0.0007414790452457964,
    0.03377896547317505,
    -0.013894505798816681,
    0.00913536362349987,
    0.01902289129793644,
    -0.0056412238627672195,
    0.008478930220007896,
    0.01177477277815342,
    0.003647991456091404,
    0.03336869552731514,
    -0.020540893077850342,
    -0.006154062692075968,
    -0.5921028852462769,
    -0.015234723687171936,
    0.0007897713221609592,
    -0.02129305526614189,
    -0.0029231796506792307,
    -0.004164248704910278,
    0.011343988589942455,
    0.02736506424844265,
    0.011343988589942455,
    0.029867716133594513,
    -0.02622998133301735,
    0.0021932395175099373,
    -0.002863348461687565,
    -0.015467210672795773,
    -0.0020581919234246016,
    -0.00242059794254601,
    0.013976559974253178,
    -0.05503099411725998,
    0.005155736580491066,
    0.004136897623538971,
    -0.013928694650530815,
    0.014113316312432289,
    -0.03309518098831177,
    0.007863524369895458,
    -0.006954090669751167,
    0.028855714946985245,
    0.017874132841825485,
    0.01057131215929985,
    0.026818037033081055,
    -0.001107731251977384,
    -0.023713653907179832,
    0.02616160362958908,
    0.02785738930106163,
    -0.012198719196021557,
    0.0551130473613739,
    -0.0022359760478138924,
    -0.017313428223133087,
    0.03656880557537079,
    0.01177477277815342,
    0.03027798794209957,
    -0.03317723423242569,
    -0.025409439578652382,
    0.002818902488797903,
    0.009798634797334671,
    -0.0075831725262105465,
    -0.012807288207113743,
    0.016971535980701447,
    0.0015932184178382158,
    -0.013579964637756348,
    0.005155736580491066,
    0.012848314829170704,
    -0.008123362436890602,
    0.02558722347021103,
    -0.016410833224654198,
    -0.009402039460837841,
    -0.00921058002859354,
    -0.0038223564624786377,
    -0.006232697516679764,
    0.016356131061911583,
    0.012752585113048553,
    -0.009237931109964848,
    0.024547871202230453,
    -0.002603510394692421,
    -0.003829194465652108,
    -0.010872176848351955,
    -0.01534412894397974,
    -0.0034719170071184635,
    -0.005805332213640213,
    -0.0033744776155799627,
    -0.026435116305947304,
    0.006461765617132187,
    -0.008335336111485958,
    0.02101954258978367,
    -0.016889482736587524,
    0.032411396503448486,
    0.022783705964684486,
    0.01921435073018074,
    0.0075968480668962,
    0.003444565460085869,
    0.038373999297618866,
    0.021347759291529655,
    -0.01196623221039772,
    0.0021436649840325117,
    -0.02397349290549755,
    0.044446006417274475,
    -0.0169852115213871,
    -0.012068800628185272,
    0.022181976586580276,
    0.023918788880109787,
    0.0020958001259714365,
    0.0034838831052184105,
    0.022332409396767616,
    -0.014072289690375328,
    -0.056453265249729156,
    -0.013203882612287998,
    0.011343988589942455,
    -0.026599224656820297,
    -0.00019701546989381313,
    -0.03304047882556915,
    -0.024069221690297127,
    0.006728441454470158,
    -0.00903963390737772,
    -0.013169693760573864,
    0.017272401601076126,
    0.007740443106740713,
    0.010161041282117367,
    -0.027611227706074715,
    0.01709461770951748,
    0.022893112152814865,
    -0.04064416512846947,
    -0.016506563872098923,
    -0.0513385571539402,
    -0.01569969765841961,
    -0.021717002615332603,
    0.022564895451068878,
    -0.03558415547013283,
    0.03845605254173279,
    0.0019026310183107853,
    0.03503713011741638,
    -0.02959420345723629,
    0.026339387521147728,
    -0.008499444462358952,
    0.008232767693698406,
    0.006612198427319527,
    0.02015797421336174,
    0.01585013046860695,
    -0.00990804098546505,
    -0.027392415329813957,
    -0.059844840317964554,
    0.0007572915637865663,
    0.01219188142567873,
    -0.00565148051828146,
    0.01574072428047657,
    -0.020212676376104355,
    0.049998339265584946,
    -0.011097826063632965,
    0.0007961818482726812,
    0.01034566294401884,
    0.01256796345114708,
    -0.012615827843546867,
    -0.03336869552731514,
    0.00019210076425224543,
    0.01298507209867239,
    0.01657494157552719,
    -0.04343400523066521,
    -0.005873710848391056,
    -0.016027914360165596,
    -0.006085684057325125,
    0.014824452809989452,
    0.014715047553181648,
    -0.010783284902572632,
    0.008841336704790592,
    -0.031071176752448082,
    0.027091549709439278,
    -0.014619316905736923,
    -0.014318452216684818,
    0.0015727048739790916,
    -0.020103270187973976,
    -0.00782933458685875,
    -0.013313288800418377,
    0.02502652071416378,
    0.03394307196140289,
    -0.006297657266259193,
    -0.003254815237596631,
    -0.028828363865613937,
    0.0011461941758170724,
    -0.01239701732993126,
    0.03148144856095314,
    0.01007898710668087,
    -0.03148144856095314,
    -0.02431538514792919,
    -0.03249344974756241,
    -0.008068659342825413,
    -0.006612198427319527,
    0.004636060446500778,
    0.018544241786003113,
    -0.0007218202226795256,
    -0.004130059853196144,
    -0.030852366238832474,
    -0.011460231617093086,
    0.008684066124260426,
    0.012301286682486534,
    -0.03998773172497749,
    -0.009723418392241001,
    0.05038125813007355,
    0.002953950082883239,
    0.02011694572865963,
    0.03328663855791092,
    -0.006766049657016993,
    -0.008096011355519295,
    -0.016547590494155884,
    0.009046471677720547,
    -0.03366956114768982,
    0.02839074097573757,
    -0.020253702998161316,
    -0.009463580325245857,
    0.04636060446500778,
    0.0012914984254166484,
    0.001581252203322947,
    0.03758080676198006,
    0.021525543183088303,
    0.011234583333134651,
    -0.0047386279329657555,
    -0.018995540216565132,
    -0.010338825173676014,
    -0.03747140243649483,
    0.022811058908700943,
    -0.010926879942417145,
    0.016068940982222557,
    0.0015803974820300937,
    0.017204023897647858,
    -0.00735068554058671,
    -0.03468156233429909,
    -0.023563221096992493,
    -0.007863524369895458,
    0.023713653907179832,
    -0.014632993377745152,
    -0.006991698872298002,
    -0.027871064841747284,
    0.014537262730300426,
    0.017149319872260094,
    0.02060927078127861,
    0.018995540216565132,
    -0.0010718324920162559,
    0.013367990963160992,
    0.016328779980540276,
    -0.0014803939266130328,
    0.007118199020624161,
    0.007535307668149471,
    -0.029867716133594513,
    -0.021388785913586617,
    0.006102778483182192,
    -0.0021385366562753916,
    0.004058262333273888,
    -0.0025966723915189505,
    0.0015479176072403789,
    0.009648201987147331,
    -0.00524804787710309,
    0.024288034066557884,
    -0.018995540216565132,
    0.01838013343513012,
    -0.0019573336467146873,
    0.0014137248508632183,
    -0.006072008516639471,
    0.02543679066002369,
    -0.0002058833051705733,
    0.0035488426219671965,
    0.005357453133910894,
    -0.011241421103477478,
    -0.017805753275752068,
    -0.0013085929676890373,
    -0.012280773371458054,
    0.02940274216234684,
    -0.005381385795772076,
    0.018858782947063446,
    -0.027761658653616905,
    -0.012308125384151936,
    0.020595595240592957,
    0.028144579380750656,
    0.00941571593284607,
    0.007925065234303474,
    0.00797976739704609,
    0.00943622924387455,
    0.0019060499034821987,
    0.024178627878427505,
    -0.018626295030117035,
    0.014988561160862446,
    -0.0048753852024674416,
    -0.028253983706235886,
    0.0026291522663086653,
    -0.037690214812755585,
    -0.011672205291688442,
    -0.009559310041368008,
    -0.03265755996108055,
    0.03178231418132782,
    0.008485767990350723,
    0.006759211886674166,
    0.030825015157461166,
    0.011077312752604485,
    0.03227463737130165,
    -0.023276031017303467,
    -0.038592807948589325,
    0.013456882908940315,
    -0.0016880935290828347,
    0.01827072724699974,
    -0.01724505051970482,
    -0.04280492290854454,
    0.005668575409799814,
    -0.004030910786241293,
    0.009675553999841213,
    -0.0035283290781080723,
    0.0007286581094376743,
    -0.008902876637876034,
    -0.006936995778232813,
    -0.014400506392121315,
    0.003119767876341939,
    0.030469447374343872,
    -0.009668716229498386,
    -0.022359760478138924,
    -0.016219373792409897,
    0.0175459161400795,
    0.002114604227244854,
    -0.030606204643845558,
    -0.0005683960625901818,
    0.024889763444662094,
    -0.01743650995194912,
    -0.02056824415922165,
    0.004998466465622187,
    0.0043181004002690315,
    -0.024397438392043114,
    -0.004458276554942131,
    -0.022482842206954956,
    -0.013484234921634197,
    -0.016219373792409897,
    0.012950882315635681,
    0.005589940119534731,
    -0.0025761588476598263,
    0.0021163136698305607,
    0.0117952860891819,
    0.016780076548457146,
    -0.006013886537402868,
    -0.016219373792409897,
    -0.00911485031247139,
    0.012868828140199184,
    0.039276592433452606,
    0.016096292063593864,
    -0.013183369301259518,
    0.01515266951173544,
    -0.04198438301682472,
    0.0034787547774612904,
    -0.01554926484823227,
    -0.007507956121116877,
    -0.004793331027030945,
    0.021675975993275642,
    -0.012991909869015217,
    -0.0076515511609613895,
    -0.02830868773162365,
    0.008143875747919083,
    0.027802687138319016,
    -0.0026701793540269136,
    -0.002996686613187194,
    -0.0028120647184550762,
    0.0012692754389718175,
    0.012410692870616913,
    0.0027248822152614594,
    -0.001237650285474956,
    -0.014126991853117943,
    0.009217417798936367,
    0.01554926484823227,
    0.008444741368293762,
    0.020732352510094643,
    0.02929333783686161,
    0.0057472107000648975,
    -0.018284402787685394,
    -0.00938152614980936,
    0.007699416019022465,
    0.020773379132151604,
    0.014674019999802113,
    -0.026284685358405113,
    0.03476361557841301,
    0.015234723687171936,
    0.04581357538700104,
    -0.012903017923235893,
    0.016465535387396812,
    0.005781400017440319,
    0.03167290985584259,
    0.0007188286981545389,
    0.008417390286922455,
    -0.00018109611119143665,
    -0.015316777862608433,
    -0.019651973620057106,
    0.00941571593284607,
    -0.007022468838840723,
    -0.014715047553181648,
    0.020814407616853714,
    0.012732071802020073,
    -0.02871895767748356,
    -0.021758029237389565,
    0.029265986755490303,
    0.02249651774764061,
    0.0201990008354187,
    0.002921470208093524,
    0.018448511138558388,
    -0.03607648238539696,
    0.0023505098652094603,
    -0.025149602442979813,
    -0.0047386279329657555,
    -0.0061677382327616215,
    0.004372803494334221,
    -0.007760956417769194,
    -0.02268797717988491,
    0.00807549711316824,
    -0.02774798311293125,
    0.014304776675999165,
    -0.013662018813192844,
    -0.02796679548919201,
    -0.037088483572006226,
    -0.022510193288326263,
    0.02204521931707859,
    0.0023846991825848818,
    0.021908462047576904,
    0.019241701811552048,
    0.011555961333215237,
    0.012916693463921547,
    -0.014509911648929119,
    -0.029047174379229546,
    -0.003894153982400894,
    -0.044910978525877,
    0.009784959256649017,
    -0.00020919539383612573,
    -0.007822496816515923,
    -0.010461905971169472,
    0.007938740774989128,
    0.008827661164104939,
    0.024547871202230453,
    0.01364834327250719,
    -0.0026821454521268606,
    0.005760886240750551,
    0.007624199613928795,
    0.008649876341223717,
    0.02781636267900467,
    0.014838128350675106,
    0.019610945135354996,
    -0.03186436742544174,
    0.002239394932985306,
    -0.024356411769986153,
    0.010967906564474106,
    -0.002588125178590417,
    0.020486190915107727,
    -0.0066429683938622475,
    0.02264695055782795,
    0.014345803298056126,
    0.003082159673795104,
    0.0012914984254166484,
    0.0003465933841653168,
    0.0035693561658263206,
    -0.01049609575420618,
    -0.0035693561658263206,
    0.03347809985280037,
    -0.02657187357544899,
    0.0007060077041387558,
    0.004478789865970612,
    -0.00815071351826191,
    -0.004475370980799198,
    0.010502933524549007,
    -0.03306782990694046,
    0.013292774558067322,
    0.030825015157461166,
    0.010899528861045837,
    0.019843433052301407,
    -0.002695821225643158,
    -0.021334083750844002,
    -0.053280506283044815,
    0.014140668325126171,
    0.036295291036367416,
    0.028089875355362892,
    0.003658248344436288,
    -0.030961772426962852,
    -0.008020794950425625,
    -8.09857519925572e-05,
    -0.008089173585176468,
    0.006509630475193262,
    0.013094477355480194,
    -0.013942370191216469,
    -0.014427857473492622,
    0.010626014322042465,
    -0.02313927561044693,
    -0.016957860440015793,
    -0.012164530344307423,
    -0.030332690104842186,
    -0.015945859253406525,
    0.0077130915597081184,
    0.019651973620057106,
    0.002959078410640359,
    -0.019761377945542336,
    0.0004252286162227392,
    -0.004383060149848461,
    -0.021867435425519943,
    -0.030934421345591545,
    0.005347196478396654,
    0.013538937084376812,
    0.010605501011013985,
    0.017874132841825485,
    0.0266129020601511,
    0.058149050921201706,
    0.01534412894397974,
    0.020581919699907303,
    0.011877340264618397,
    0.011494421400129795,
    -0.005473696626722813,
    -0.0006196799222379923,
    0.019419485703110695,
    -0.02369997836649418,
    -0.013258585706353188,
    0.01251326035708189,
    0.015234723687171936,
    -0.008232767693698406,
    -0.024862412363290787,
    -0.0036001265980303288,
    -0.002453077584505081,
    0.009545634500682354,
    -0.011713231913745403,
    -0.023016193881630898,
    -0.03883897140622139,
    0.00242572627030313,
    0.01917332410812378,
    -0.01325174793601036,
    0.022318733856081963,
    -0.02468462847173214,
    0.021539218723773956,
    0.021867435425519943,
    0.01325174793601036,
    0.02498549409210682,
    0.016889482736587524,
    0.025614576414227486,
    -0.0001986180868698284,
    -0.014674019999802113,
    0.030852366238832474,
    0.024520520120859146,
    -0.008000281639397144,
    0.011309798806905746,
    -0.032630205154418945,
    -0.013381666503846645,
    0.02200419269502163,
    0.01861261948943138,
    0.01709461770951748,
    0.0032941328827291727,
    0.018051916733384132,
    0.025997495278716087,
    0.008184903301298618,
    0.005942089017480612,
    -0.027091549709439278,
    0.011350826360285282,
    -0.03156350180506706,
    -0.028144579380750656,
    -0.03563886135816574,
    -0.04154675826430321,
    -0.02830868773162365,
    -0.012089313939213753,
    -0.006974603980779648,
    0.004923250060528517,
    0.008109686896204948,
    -0.005285656079649925,
    0.0027419766411185265,
    0.005237790755927563,
    0.011993584223091602,
    0.025751331821084023,
    0.008554146625101566,
    0.020677650347352028,
    0.03128998726606369,
    0.0030958352144807577,
    -0.009108012542128563,
    0.007268631365150213,
    -1.5812522178748623e-05,
    -0.006331846583634615,
    0.028828363865613937,
    0.017204023897647858,
    -0.02592911571264267,
    -0.027159929275512695,
    0.02665392868220806,
    -0.012704719789326191,
    -0.042367301881313324,
    -0.024506844580173492,
    0.035611506551504135,
    0.03077031299471855,
    0.014920182526111603,
    -0.009798634797334671,
    -0.014386830851435661,
    -0.023576896637678146,
    0.020814407616853714,
    -0.016520239412784576,
    0.004666830878704786,
    -0.005196763668209314,
    -0.005018979776650667,
    -0.019952837377786636,
    0.011494421400129795,
    0.01653391495347023,
    -0.009641364216804504,
    0.020937487483024597,
    0.009087499231100082,
    0.008841336704790592,
    -0.013299612328410149,
    -0.02571030519902706,
    0.008061821572482586,
    0.008369524963200092,
    0.020527217537164688,
    -0.032931070774793625,
    0.008355849422514439,
    0.03375161439180374,
    -0.021347759291529655,
    0.006256630178540945,
    -0.011350826360285282,
    -0.014892831444740295,
    0.03574826568365097,
    -0.02404187060892582,
    -0.0004730935615953058,
    -0.014291100203990936,
    -0.006106197368353605,
    -0.010304635390639305,
    -0.0041334787383675575,
    0.0009675553883425891,
    -0.001568431151099503,
    -0.0033915722742676735,
    0.010557635687291622,
    0.0006115599535405636,
    -4.4232325308257714e-05,
    -0.001345346448943019,
    0.009354175068438053,
    -0.007562659215182066,
    -0.011993584223091602,
    -0.02517695352435112,
    0.0002247942320536822,
    0.02880101278424263,
    -0.029156580567359924,
    -0.009545634500682354,
    -0.015945859253406525,
    -0.031207934021949768,
    -0.009914878755807877,
    0.010331987403333187,
    -0.00645492784678936,
    -0.008260119706392288,
    0.049013689160346985,
    -0.018352782353758812,
    0.008581498637795448,
    0.002863348461687565,
    -0.006967766210436821,
    -0.03276696428656578,
    0.009579824283719063,
    -0.007945578545331955,
    -0.010537122376263142,
    0.03747140243649483,
    -0.008978093042969704,
    -0.04589562863111496,
    -0.006906225811690092,
    -0.009839662350714207,
    0.0354747511446476,
    0.00717973941937089,
    0.0088686877861619,
    -0.014906506985425949,
    -0.012034610845148563,
    0.010331987403333187,
    0.0036719238851219416,
    0.009867013432085514,
    0.030360041186213493,
    -0.011002096347510815,
    -0.0047523039393126965,
    -0.002309482777491212,
    -0.0060378191992640495,
    0.009525121189653873,
    -0.018284402787685394,
    0.013101315125823021,
    -0.02476668171584606,
    -0.04909574240446091,
    -0.028582200407981873,
    0.004711276851594448,
    -0.015262074768543243,
    0.015371480025351048,
    0.016465535387396812,
    -0.006072008516639471,
    -0.01396288350224495,
    -0.04141000285744667,
    0.03178231418132782,
    0.012280773371458054,
    -0.001570995431393385,
    0.007316496688872576,
    0.023563221096992493,
    -0.008478930220007896,
    0.01664331927895546,
    -0.008307984098792076,
    0.001267565879970789,
    -0.004523235838860273,
    0.005979697220027447,
    -0.032520800828933716,
    -0.015904832631349564,
    0.012991909869015217,
    0.04469216987490654,
    0.02393246442079544,
    -0.04622384533286095,
    -0.009422553703188896,
    -0.022523868829011917,
    -0.026257332414388657,
    -0.011398691684007645,
    -0.022715328261256218,
    0.011904692277312279,
    -0.00782933458685875,
    0.025040196254849434,
    0.01788780838251114,
    -0.009887526743113995,
    -0.0006222440861165524,
    0.01130296103656292,
    -0.02163494937121868,
    0.006960928440093994,
    0.005942089017480612,
    -0.002559064421802759,
    -0.002706078113988042,
    -0.011357664130628109,
    -0.026448793709278107,
    -0.02208624593913555,
    0.016698023304343224,
    0.017381807789206505,
    0.015029587782919407,
    0.03503713011741638,
    -0.00774728087708354,
    -0.01898186467587948,
    0.019077593460679054,
    0.01057131215929985,
    -0.010448230430483818,
    0.016438184306025505,
    0.0010453358991071582,
    -0.03386101871728897,
    -0.007268631365150213,
    -0.010824312455952168,
    -0.013744072988629341,
    -0.006854941602796316,
    0.00896441750228405,
    0.024438465014100075,
    -0.013183369301259518,
    -0.00258128740824759,
    -0.009538796730339527,
    -0.003863383550196886,
    -0.0020376783795654774,
    -0.005207020789384842,
    0.02785738930106163,
    -0.02581971138715744,
    0.025354737415909767,
    0.014168019406497478,
    0.0025539358612149954,
    -0.014345803298056126,
    -0.005507885944098234,
    0.0040411679074168205,
    -0.02110159583389759,
    -0.006410481873899698,
    0.038373999297618866,
    -0.01762796938419342,
    -0.010762771591544151,
    -0.018243376165628433,
    0.025696629658341408,
    -0.02215462550520897,
    -0.009839662350714207,
    0.002389827510342002,
    -0.006875455379486084,
    -0.03356015309691429,
    0.008991768583655357,
    0.013915019109845161,
    -0.009689229540526867,
    -0.006704509258270264,
    -0.01266369316726923,
    0.021799057722091675,
    0.010543960146605968,
    -0.023070896044373512,
    0.013682532124221325,
    -0.0036616672296077013,
    0.0005722423084080219,
    0.005959183908998966,
    -0.015180020593106747,
    -0.02717360481619835,
    -0.006044656969606876,
    -0.0093404995277524,
    -0.0354747511446476,
    -0.023043544963002205,
    0.1785498708486557,
    -0.01330645103007555,
    0.029156580567359924,
    0.014263749122619629,
    0.006249792408198118,
    -0.0018786984728649259,
    0.008834498934447765,
    0.024561546742916107,
    -0.007432739716023207,
    -0.0015222757356241345,
    0.0060754274018108845,
    -0.0075968480668962,
    -0.007275469601154327,
    -0.0009427681798115373,
    0.017833106219768524,
    -0.03008652850985527,
    -0.016055265441536903,
    -0.04026124253869057,
    -0.007145550101995468,
    -0.0052583045326173306,
    0.0010564473923295736,
    -0.018626295030117035,
    -0.017901483923196793,
    -0.001976137747988105,
    0.033423397690057755,
    -0.007268631365150213,
    -0.015262074768543243,
    0.01234231423586607,
    0.009634526446461678,
    -0.007118199020624161,
    -0.025300035253167152,
    0.02989506721496582,
    -0.0009581533377058804,
    -0.0017145902384072542,
    -0.022893112152814865,
    -0.015904832631349564,
    0.0030189095996320248,
    0.013470559380948544,
    0.018845107406377792,
    0.01846218667924404,
    0.018694674596190453,
    -0.018174998462200165,
    -0.0017419415526092052,
    0.015330453403294086,
    -0.0006859215209260583,
    -0.006807076744735241,
    -0.012950882315635681,
    -0.021279379725456238,
    0.0022581990342587233,
    0.015562940388917923,
    -0.022209327667951584,
    0.0037163698580116034,
    0.03577561676502228,
    0.02369997836649418,
    -0.0021693070884793997,
    -0.010161041282117367,
    -0.02253754436969757,
    0.016629643738269806,
    0.030961772426962852,
    0.010578149929642677,
    -0.007343847770243883,
    0.03695172443985939,
    -0.006181413773447275,
    0.013744072988629341,
    -0.02948479726910591,
    -0.0030650650151073933,
    -0.046825576573610306,
    0.018448511138558388,
    0.01816132292151451,
    0.023617923259735107,
    -0.025122251361608505,
    -0.019419485703110695,
    -0.03468156233429909,
    -0.014277424663305283,
    -0.00030919889104552567,
    -0.016656994819641113,
    0.03930394724011421,
    0.014373154379427433,
    0.02839074097573757,
    0.03079766407608986,
    -0.001834252499975264,
    0.0066429683938622475,
    0.005559169687330723,
    0.023877762258052826,
    -0.012752585113048553,
    -0.021388785913586617,
    0.02400084398686886,
    -0.031946420669555664,
    0.003695856314152479,
    -0.008923390880227089,
    -0.016821103170514107,
    -0.010441392660140991,
    0.004772817250341177,
    -0.0366235077381134,
    0.013942370191216469,
    0.01049609575420618,
    -0.0032907139975577593,
    0.029621554538607597,
    -0.012595314532518387,
    0.01762796938419342,
    -0.02483506128191948,
    0.044446006417274475,
    0.021826408803462982,
    0.01081063598394394,
    0.010947393253445625,
    0.004499303642660379,
    0.0012598733883351088,
    0.0065267253667116165,
    0.00225990847684443,
    -0.025765007361769676,
    -0.00028633486363105476,
    -0.032247286289930344,
    -0.005463439971208572,
    -0.015385156497359276,
    -0.0006252356688492,
    0.004177924711257219,
    -0.01202093530446291,
    0.010243095457553864,
    -0.001573559595271945,
    0.012944044545292854,
    -0.004379641264677048,
    -0.00966187845915556,
    -0.006030981428921223,
    -0.0036343156825751066,
    -0.013121828436851501,
    -0.015521912835538387,
    -0.04250405728816986,
    0.01992548629641533,
    -0.0030206190422177315,
    -0.010270446538925171,
    0.046032387763261795,
    0.0032667815685272217,
    0.027994146570563316,
    0.02230505831539631,
    -0.005412156227976084,
    -0.018845107406377792,
    -0.005018979776650667,
    -0.0190639179199934,
    0.0031283150892704725,
    0.014550939202308655,
    -0.02819928154349327,
    0.008232767693698406,
    0.010427717119455338,
    0.010851663537323475,
    0.015576615929603577,
    -0.01857159286737442,
    0.024739330634474754,
    0.015070615336298943,
    -0.0013222687412053347,
    -0.003124896204099059,
    -0.004947182256728411,
    0.014591965824365616,
    -0.0035967077128589153,
    -0.029156580567359924,
    0.030633555725216866,
    0.0015778332017362118,
    -0.019351107999682426,
    0.01298507209867239,
    0.02940274216234684,
    -0.008731930516660213,
    -0.04154675826430321,
    0.01042087934911251,
    -0.02287943661212921,
    0.0021864017471671104,
    -0.028472796082496643,
    -0.018352782353758812,
    -0.1717667281627655,
    0.01034566294401884,
    0.023358086124062538,
    -0.020773379132151604,
    0.020486190915107727,
    0.005418993998318911,
    0.019939161837100983,
    -0.0072549558244645596,
    -0.006827590521425009,
    -0.013956045731902122,
    0.022551219910383224,
    0.01177477277815342,
    -0.00898493081331253,
    -0.023754680529236794,
    -0.009326823987066746,
    -0.007665226701647043,
    -0.009983256459236145,
    0.014892831444740295,
    0.0400150828063488,
    0.006663482170552015,
    0.01524839922785759,
    -0.03345074877142906,
    0.0009931973181664944,
    0.022852085530757904,
    -0.0019556242041289806,
    0.010947393253445625,
    -0.014482560567557812,
    0.019091269001364708,
    0.00015150105173233896,
    -0.028965121135115623,
    -0.027994146570563316,
    -0.008950741961598396,
    0.011651691980659962,
    0.011713231913745403,
    0.014304776675999165,
    -0.002969335066154599,
    0.033013127744197845,
    0.01936478354036808,
    -0.02287943661212921,
    0.02736506424844265,
    0.02989506721496582,
    0.016109967604279518,
    0.02918393164873123,
    -0.02022635191679001,
    -0.019993865862488747,
    0.0066053601913154125,
    0.005665156524628401,
    -0.006495954934507608,
    -0.007569496985524893,
    -0.02136143483221531,
    0.040069784969091415,
    -0.013361153192818165,
    0.01683478057384491,
    0.010646527633070946,
    0.020978515967726707,
    0.009422553703188896,
    -0.005473696626722813,
    0.01966564916074276,
    0.017012564465403557,
    0.008731930516660213,
    -0.013183369301259518,
    -0.029539499431848526,
    0.004988209344446659,
    -0.00856782216578722,
    0.010762771591544151,
    -0.016780076548457146,
    -0.02215462550520897,
    0.03314988315105438,
    -0.0403980016708374,
    0.014742398634552956,
    0.038373999297618866,
    -5.587803389062174e-05,
    0.0016804009210318327,
    0.04053475707769394,
    0.003678761888295412,
    0.011036285199224949,
    0.0008880653767846525,
    -0.006978022865951061,
    0.01234231423586607,
    0.001500907470472157,
    -0.0366235077381134,
    0.03388836979866028,
    -0.006109616253525019,
    0.0027847131714224815,
    0.006677157711237669,
    -0.0006645532557740808,
    -0.0038257755804806948,
    -0.012007259763777256,
    -0.00517283147200942,
    -0.005124966613948345,
    0.011398691684007645,
    -0.020390460267663002,
    0.014044937677681446,
    -0.004663411993533373,
    0.0039727892726659775,
    0.02869160659611225,
    0.017983537167310715,
    -0.02069132588803768,
    0.013696207664906979,
    -0.022017868235707283,
    -6.255562038859352e-05,
    0.021881110966205597,
    -0.011398691684007645,
    -0.019009215757250786,
    0.032630205154418945,
    0.018147645518183708,
    -0.034025128930807114,
    0.030961772426962852,
    0.0434066541492939,
    -0.0029197607655078173,
    -0.018804078921675682,
    0.00923109333962202,
    0.031071176752448082,
    0.01017471682280302,
    -0.014509911648929119,
    0.002796679502353072,
    -0.009484093636274338,
    -0.020896460860967636,
    0.02850014716386795,
    -0.007487442810088396,
    0.0354747511446476,
    0.014168019406497478,
    -0.022824734449386597,
    0.010318311862647533,
    -0.015973210334777832,
    -0.03375161439180374,
    -0.09578455984592438,
    -0.029867716133594513,
    0.01379877608269453,
    0.0009239640785381198,
    -0.012732071802020073,
    0.01739548332989216,
    -0.005176250357180834,
    0.010530284605920315,
    -0.028746308758854866,
    0.021115271374583244,
    -0.047837577760219574,
    -0.015029587782919407,
    -0.02367262728512287,
    0.006485698278993368,
    -0.012431206181645393,
    -0.012718395330011845,
    -0.0035043966490775347,
    -0.0038257755804806948,
    -0.006430995184928179,
    0.022482842206954956,
    -0.002543679205700755,
    0.005244628991931677,
    -0.015863806009292603,
    0.00038356048753485084,
    -0.022824734449386597,
    -0.0021009284537285566,
    -0.03049679845571518,
    0.019528891891241074,
    0.03287636861205101,
    0.01574072428047657,
    0.02049986645579338,
    -0.014906506985425949,
    -0.003442856017500162,
    -0.014126991853117943,
    0.016096292063593864,
    -0.010646527633070946,
    -0.015822777524590492,
    -0.017422834411263466,
    0.017258726060390472,
    -0.038291946053504944,
    -0.00306164612993598,
    -0.004174505826085806,
    0.017162997275590897,
    0.006424157414585352,
    0.001668434706516564,
    0.020240027457475662,
    -0.015316777862608433,
    0.025532521307468414,
    0.014865479432046413,
    -0.024028195068240166,
    -0.030360041186213493,
    -0.003109510987997055,
    -0.02034943364560604,
    -0.0021607596427202225,
    0.034900370985269547,
    -0.02702317200601101,
    0.012670530937612057,
    0.016916833817958832,
    -0.007699416019022465,
    -0.0279257670044899,
    -0.00975760817527771,
    0.012027773074805737,
    0.0012709848815575242,
    0.0008273795247077942,
    0.010605501011013985,
    -0.002635990036651492,
    -0.014099640771746635,
    -0.00044745163177140057,
    0.025491494685411453,
    -0.023809384554624557,
    -0.01928272843360901,
    0.033915720880031586,
    -0.008465254679322243,
    0.015070615336298943,
    -0.02279738336801529,
    -0.016615968197584152,
    -0.0002658213197719306,
    0.0011718360474333167,
    -0.010044797323644161,
    0.00046369151095859706,
    -0.022811058908700943,
    0.005795075558125973,
    -0.0033761870581656694,
    0.017532240599393845,
    -0.024629926308989525,
    0.0023282868787646294,
    0.007658388931304216,
    0.00011132869985885918,
    0.02404187060892582,
    -0.035392697900533676,
    0.01947418786585331,
    0.009812310338020325,
    0.014961210079491138,
    0.0007239570841193199,
    0.009005445055663586,
    -0.016315102577209473,
    0.013094477355480194,
    0.019638296216726303,
    0.012916693463921547,
    0.04182027280330658,
    -0.0370064303278923,
    -0.008048146031796932,
    -0.07352053374052048,
    0.01253377366811037,
    0.011644854210317135,
    -0.00888920109719038,
    0.0026992401108145714,
    -0.04184762388467789,
    -0.00945674255490303,
    -0.01608261652290821,
    0.017901483923196793,
    0.012102989479899406,
    -0.04398103430867195,
    0.012150854803621769,
    -0.009641364216804504,
    0.011979908682405949,
    -0.01853056624531746,
    -0.024862412363290787,
    0.02461625076830387,
    -0.02729668654501438,
    0.042257893830537796,
    0.005918156821280718,
    -0.010714906267821789,
    0.006297657266259193,
    0.039659515023231506,
    -0.008902876637876034,
    -0.019009215757250786,
    -0.01928272843360901,
    -0.03090706840157509,
    0.017846781760454178,
    0.01630142703652382,
    -0.0006636985344812274,
    0.02065029926598072,
    -0.006236116401851177,
    -0.013429531827569008,
    0.008458416908979416,
    0.009559310041368008,
    -0.003372768172994256,
    0.024164952337741852,
    -0.004977952688932419,
    -0.0012385051231831312,
    0.029238633811473846,
    -0.03249344974756241,
    -0.029539499431848526,
    0.013067126274108887,
    0.006742117460817099,
    -0.019610945135354996,
    0.0015051810769364238,
    -0.007548983208835125,
    -0.011316637508571148,
    0.019310081377625465,
    -0.020527217537164688,
    0.08167124539613724,
    0.004995047580450773,
    -0.01574072428047657,
    -0.03796372935175896,
    0.0009478965657763183,
    -0.003685599658638239,
    0.010899528861045837,
    -0.01256796345114708,
    -0.011090988293290138,
    0.016123643144965172,
    0.027802687138319016,
    -0.01281412597745657,
    0.018325431272387505,
    -0.0020325500518083572,
    0.013655181042850018,
    -0.04072621837258339,
    -0.037909023463726044,
    0.013956045731902122,
    -0.009921716526150703,
    -0.008403713814914227,
    -0.017833106219768524,
    -0.016520239412784576,
    -0.002637699479237199,
    -0.007815659046173096,
    0.008779795840382576,
    -0.028855714946985245,
    -0.0009675553883425891,
    -0.014044937677681446,
    -0.03479096665978432,
    0.006342103239148855,
    0.026407765224575996,
    -0.018858782947063446,
    0.015727048739790916,
    0.010803798213601112,
    0.01105679851025343,
    -0.02071867696940899,
    0.004406992346048355,
    -0.000911997864022851,
    0.021265704184770584,
    0.017108293250203133,
    -0.014058614149689674,
    -0.009244769811630249,
    0.014058614149689674,
    0.044254545122385025,
    -0.0013162855757400393,
    0.0077677941881120205,
    0.0050429124385118484,
    -0.015768075361847878,
    0.004547168500721455,
    0.01801089011132717,
    -0.00028740326524712145,
    -0.013224396854639053,
    0.01224658451974392,
    -0.03528328984975815,
    -0.002803517272695899,
    -0.022660626098513603,
    0.0030206190422177315,
    -0.009278958663344383,
    0.016903158277273178,
    0.013880829326808453,
    -0.003244558582082391,
    -0.0046702497638762,
    -0.0024684628006070852,
    0.016615968197584152,
    -0.014578290283679962,
    0.004581357818096876,
    0.021005867049098015,
    -0.010954231023788452,
    -0.011856826953589916,
    0.025833386927843094,
    0.010954231023788452,
    -0.0031351528596132994,
    0.042175840586423874,
    -0.024301709607243538,
    0.027241982519626617,
    0.05043596029281616,
    0.0235905721783638,
    -0.013224396854639053,
    0.024629926308989525,
    -0.002835997147485614,
    0.003959113731980324,
    0.0192553773522377,
    -0.0010555926710367203,
    -0.0056412238627672195,
    -0.020472515374422073,
    -0.016369806602597237,
    0.0028171930462121964,
    0.008588336408138275,
    -0.005104452837258577,
    0.08664920181035995,
    0.027542848140001297,
    -0.01928272843360901,
    -0.0006581427878700197,
    -0.01266369316726923,
    0.018557917326688766,
    -0.023043544963002205,
    0.001300045638345182,
    0.0021487935446202755,
    0.01645185984671116,
    -0.015125318430364132,
    0.0070019555278122425,
    0.006393386982381344,
    -0.023235004395246506,
    -0.0179288350045681,
    -0.000657715427223593,
    -0.00847209244966507,
    0.027953119948506355,
    0.014687695540487766,
    0.013853478245437145,
    0.020677650347352028,
    0.02850014716386795,
    -0.00378816737793386,
    0.013532099314033985,
    -0.03990567475557327,
    -0.011330313049256802,
    0.04269551858305931,
    0.003576194168999791,
    -0.006078846286982298,
    -0.04537595435976982,
    0.038291946053504944,
    -0.0008547308971174061,
    -0.013258585706353188,
    -0.039659515023231506,
    0.007125036790966988,
    0.032028477638959885,
    0.010284122079610825,
    0.01615099422633648,
    0.0177373755723238,
    -0.004218951798975468,
    -0.008102849125862122,
    0.0028018078301101923,
    -0.01853056624531746,
    -0.03317723423242569,
    0.003097544889897108,
    -0.023604247719049454,
    -0.020281054079532623,
    -0.001062430557794869,
    -0.03634999692440033
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# curl_cffi\n\npython binding for [curl-impersonate](https://github.com/lwthiker/curl-impersonate)\nvia [cffi](https://cffi.readthedocs.io/en/latest/).\n\n[documentation](https://curl-cffi.readthedocs.io) | [\u4e2d\u6587 readme](https://github.com/yifeikong/curl_cffi/blob/master/readme-zh.md)\n\nunlike other pure python http clients like `httpx` or `requests`, `curl_cffi` can\nimpersonate browsers' tls signatures or ja3 fingerprints. if you are blocked by some\nwebsite for no obvious reason, you can give this package a try.\n\n## features\n\n- supports ja3/tls and http2 fingerprints impersonation.\n- much faster than requests/httpx, on par with aiohttp/pycurl, see [benchmarks](https://github.com/yifeikong/curl_cffi/tree/master/benchmark).\n- mimics requests api, no need to learn another one.\n- pre-compiled, so you don't have to compile on your machine.\n- supports `asyncio` with proxy rotation on each request.\n- supports http 2.0, which requests does not.\n\n|library|requests|aiohttp|httpx|pycurl|curl_cffi|\n|---|---|---|---|---|---|\n|http2|\u274c|\u274c|\u2705|\u2705|\u2705|\n|sync|\u2705|\u274c|\u2705|\u2705|\u2705|\n|async|\u274c|\u2705|\u2705|\u274c|\u2705|\n|fingerprints|\u274c|\u274c|\u274c|\u274c|\u2705|\n|speed|\ud83d\udc07|\ud83d\udc07\ud83d\udc07|\ud83d\udc07|\ud83d\udc07\ud83d\udc07|\ud83d\udc07\ud83d\udc07|\n\n## install\n\n    pip install curl_cffi --upgrade\n\nthis should work on linux(x86_64/aarch64), macos(intel/apple silicon) and windows(amd64).\nif it does not work on you platform, you may need to compile and install `curl-impersonate`\nfirst and set some environment variables like `ld_library_path`.\n\nto install beta releases:\n\n    pip install curl_cffi --pre\n\n## usage\n\n### requests-like\n\n```python\nfrom curl_cffi import requests\n\n# notice the impersonate parameter\nr = requests.get(\"https://tls.browserleaks.com/json\", impersonate=\"chrome110\")\n\nprint(r.json())\n# output: {..., \"ja3n_hash\": \"aa56c057ad164ec4fdcb7a5a283be9fc\", ...}\n# the js3n fingerprint should be the same as target browser\n\n# http/socks proxies are supported\nproxies = {\"https\": \"http://localhost:3128\"}\nr = requests.get(\"https://tls.browserleaks.com/json\", impersonate=\"chrome110\", proxies=proxies)\n\nproxies = {\"https\": \"socks://localhost:3128\"}\nr = requests.get(\"https://tls.browserleaks.com/json\", impersonate=\"chrome110\", proxies=proxies)\n```\n\n### sessions\n\n```python\n# sessions are supported\ns = requests.session()\n# httpbin is a http test website\ns.get(\"https://httpbin.org/cookies/set/foo/bar\")\nprint(s.cookies)\n# <cookies[<cookie foo=bar for httpbin.org />]>\nr = s.get(\"https://httpbin.org/cookies\")\nprint(r.json())\n# {'cookies': {'foo': 'bar'}}\n```\n\nsupported impersonate versions, as supported by [curl-impersonate](https://github.com/lwthiker/curl-impersonate):\n\n- chrome99\n- chrome100\n- chrome101\n- chrome104\n- chrome107\n- chrome110\n- chrome99_android\n- edge99\n- edge101\n- safari15_3\n- safari15_5\n\n### asyncio\n\n```python\nfrom curl_cffi.requests import asyncsession\n\nasync with asyncsession() as s:\n    r = await s.get(\"https://example.com\")\n```\n\nmore concurrency:\n\n```python\nimport asyncio\nfrom curl_cffi.requests import asyncsession\n\nurls = [\n    \"https://googel.com/\",\n    \"https://facebook.com/\",\n    \"https://twitter.com/\",\n]\n\nasync with asyncsession() as s:\n    tasks = []\n    for url in urls:\n        task = s.get(\"https://example.com\")\n        tasks.append(task)\n    results = await asyncio.gather(*tasks)\n```\n\n### curl-like\n\nalternatively, you can use the low-level curl-like api:\n\n```python\nfrom curl_cffi import curl, curlopt\nfrom io import bytesio\n\nbuffer = bytesio()\nc = curl()\nc.setopt(curlopt.url, b'https://tls.browserleaks.com/json')\nc.setopt(curlopt.writedata, buffer)\n\nc.impersonate(\"chrome110\")\n\nc.perform()\nc.close()\nbody = buffer.getvalue()\nprint(body.decode())\n```\n\nsee the [docs](https://curl-cffi.readthedocs.io) for more details. \n\nif you are using scrapy, check out this middleware: [tieyongjie/scrapy-fingerprint](https://github.com/tieyongjie/scrapy-fingerprint)\n\n## acknowledgement\n\n- originally forked from [multippt/python_curl_cffi](https://github.com/multippt/python_curl_cffi), which is under the mit license.\n- headers/cookies files are copied from [httpx](https://github.com/encode/httpx/blob/master/httpx/_models.py), which is under the bsd license.\n- asyncio support is inspired by tornado's curl http client.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license  copyright (c) 2018 multippt copyright (c) 2022 yifei kong  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "curl-cffi",
  "package_url": "https://pypi.org/project/curl-cffi/",
  "project_url": "https://pypi.org/project/curl-cffi/",
  "project_urls": {
    "repository": "https://github.com/yifeikong/curl_cffi"
  },
  "release_url": "https://pypi.org/project/curl-cffi/0.5.10/",
  "requires_dist": [
    "cffi >=1.12.0",
    "cibuildwheel ; extra == 'build'",
    "wheel ; extra == 'build'",
    "autoflake ==1.4 ; extra == 'dev'",
    "black ==22.8.0 ; extra == 'dev'",
    "coverage ==6.4.1 ; extra == 'dev'",
    "cryptography ==38.0.3 ; extra == 'dev'",
    "flake8 ==6.0.0 ; extra == 'dev'",
    "flake8-bugbear ==22.7.1 ; extra == 'dev'",
    "flake8-pie ==0.15.0 ; extra == 'dev'",
    "httpx ==0.23.1 ; extra == 'dev'",
    "isort ==5.10.1 ; extra == 'dev'",
    "mypy ==0.971 ; extra == 'dev'",
    "types-certifi ==2021.10.8.2 ; extra == 'dev'",
    "pytest ==7.1.2 ; extra == 'dev'",
    "pytest-asyncio ==0.19.0 ; extra == 'dev'",
    "pytest-trio ==0.7.0 ; extra == 'dev'",
    "trio ==0.21.0 ; extra == 'dev'",
    "trio-typing ==0.7.0 ; extra == 'dev'",
    "trustme ==0.9.0 ; extra == 'dev'",
    "uvicorn ==0.18.3 ; extra == 'dev'",
    "cryptography ==38.0.3 ; extra == 'test'",
    "httpx ==0.23.1 ; extra == 'test'",
    "types-certifi ==2021.10.8.2 ; extra == 'test'",
    "pytest ==7.1.2 ; extra == 'test'",
    "pytest-asyncio ==0.19.0 ; extra == 'test'",
    "pytest-trio ==0.7.0 ; extra == 'test'",
    "trio ==0.21.0 ; extra == 'test'",
    "trio-typing ==0.7.0 ; extra == 'test'",
    "trustme ==0.9.0 ; extra == 'test'",
    "uvicorn ==0.18.3 ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "libcurl ffi bindings for python, with impersonation support",
  "version": "0.5.10",
  "releases": [],
  "developers": [
    "kong@yifei.me"
  ],
  "kwds": "python_curl_cffi curl_cffi curl curlopt httpbin",
  "license_kwds": "copyright liable license liability noninfringement",
  "libtype": "pypi",
  "id": "pypi_curl_cffi",
  "homepage": "",
  "release_count": 32,
  "dependency_ids": [
    "pypi_autoflake",
    "pypi_black",
    "pypi_cffi",
    "pypi_cibuildwheel",
    "pypi_coverage",
    "pypi_cryptography",
    "pypi_flake8",
    "pypi_flake8_bugbear",
    "pypi_flake8_pie",
    "pypi_httpx",
    "pypi_isort",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_trio",
    "pypi_trio",
    "pypi_trio_typing",
    "pypi_trustme",
    "pypi_types_certifi",
    "pypi_uvicorn",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# more times!\r\n\r\nassume time forms an algebraic field over gmt. finally! \r\n\r\n[![pypi latest release](https://img.shields.io/pypi/v/mo-times.svg)](https://pypi.org/project/mo-times/)\r\n[![build status](https://app.travis-ci.com/klahnakoski/mo-times.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-times)\r\n [![coverage status](https://coveralls.io/repos/github/klahnakoski/mo-times/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-times?branch=dev)\r\n[![downloads](https://pepy.tech/badge/mo-times)](https://pepy.tech/project/mo-times)\r\n\r\n\r\n## details \r\n\r\n`date` is a simplified class for time manipulation. this library is intended for personal and business applications where assuming every solar day has 24 * 60 * 60 seconds is considered accurate. [see *gmt vs utc* below](//#gmt%20vs%20utc).\r\n\r\n\r\n### assumptions\r\n\r\n* **all time is in gmt** - timezone math is left to be resolved at the human endpoints: machines should only be dealing with one type of time; without holes, without overlap, and with minimal context.\r\n* **single time type** - there is no distinction between dates, datetime and times; all measurements in the time dimension are handled by one type called `date`. this is important for treating time as a vector space.\r\n* **standard range comparision** - all time range comparisons have been standardized to `min <= value < max`. the minimum is inclusive (`<=`), and the maximum is exclusive (`<`). \r\n\r\n\r\n## `date` class \r\n\r\nthe `date()` method will convert unix timestamps, millisecond timestamps, various string formats and simple time formulas to create a gmt time\r\n\r\n### `date.now()`\r\n\r\nreturn `date` instance with millisecond resolution (in gmt).\r\n\r\n### `date.eod()` \r\n\r\nreturn end-of-day: smallest `date` which is greater than all time points in today. think of it as tomorrow. same as `now().ceiling(day)`\r\n\r\n### `date.today()`\r\n\r\nthe beginning of today. same as `now().floor(day)`\r\n\r\n### date.range(min, max, interval)\r\n\r\nreturn an explicit list of `dates` starting with `min`, each `interval` more than the last, but now including `max`.   used in defining partitions in time domains.\r\n\r\n### `floor(duration=none)`\r\n\r\nthis method is usually used to perform date comparisons at the given resolution (aka `duration`). round down to the nearest whole duration. `duration` as assumed to be `day` if not provided.\r\n\r\n### `format(format=\"%y-%m-%d %h:%m:%s\")`\r\n\r\njust like `strftime`\r\n\r\n### `milli`\r\n\r\nnumber of milliseconds since epoch\r\n\r\n### `unix`\r\n\r\nnumber of seconds since epoch\r\n\r\n\r\n### `add(duration)`\r\n\r\nadd a `duration` to the time to get a new `date` instance. the `self` is not modified.\r\n\r\n### `addday()`\r\n\r\nconvenience method for `self.add(day)`\r\n\r\n\r\n## `duration` class\r\n\r\nrepresents the difference between two `dates`. there are two scales:\r\n\r\n*  **`day` scale** - includes seconds, minutes, hours, days and weeks.\r\n*  **`year` scale** - includes months, quarters, years, and centuries.\r\n\r\n### `floor(interval=none)`\r\n\r\nround down to nearest `interval` size.\r\n\r\n### `seconds` \r\n\r\nreturn total number of seconds (including partial) in this duration (estimate given for `year` scale)\r\n\r\n### `total_seconds()`\r\n\r\nsame as the `seconds` property\r\n\r\n### `round(interval, decimal=0)`\r\n\r\nreturn number of given `interval` rounded to given `decimal` places\r\n\r\n### `format(interval, decimal=0)`\r\n\r\nreturn a string representing `self` using given `interval` and `decimal` rounding\r\n\r\n\r\n# time as an algebraic field\r\n\r\nthe `date` and `duration` objects are the point and vectors in a one dimensional vector space. as such, the `+` and `-` operators are allowed. comparisons with (`>`, `>=`, `<=`, `<`) are also supported.\r\n\r\n\r\n## gmt vs utc\r\n\r\nthe solar day is he most popular timekeeping unit. this library chose gmt (ut1) for its base clock because of its consistent seconds in a solar day. utc suffers from inconsistent leap seconds and makes time-math difficult, even while forcing us to make pedantic conclusions like some minutes do not have 60 seconds. lucky for us python's implementation of utc (`datetime.utcnow()`) is wrong, and implements gmt: which is what we use.\r\n\r\n## error analysis\r\n\r\nassuming we need a generous leap second each 6 months (the past decade saw only 4 leap seconds), then gmt deviates from utc by up to 1 seconds over 181 days (december to june, 15,638,400 seconds) which is an error rate `error = 1/15,638,400 = 0.000006395%`. if we want to call the error \"noise\", we have a 70db signal/noise ratio. all applications that can tolerate this level of error should use gmt as their time basis.\r\n\r\n\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "mo-times",
  "package_url": "https://pypi.org/project/mo-times/",
  "project_url": "https://pypi.org/project/mo-times/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/mo-times"
  },
  "release_url": "https://pypi.org/project/mo-times/5.458.23316/",
  "requires_dist": [
    "mo-dots ==9.455.23316",
    "mo-future ==7.449.23304",
    "mo-logs ==8.456.23316",
    "mo-math ==7.455.23316",
    "mo-testing >3 ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "more time! time as a vector space, the way it was meant to be.",
  "version": "5.458.23316",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "times strftime datetime dates utc",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_mo_times",
  "homepage": "https://github.com/klahnakoski/mo-times",
  "release_count": 87,
  "dependency_ids": [
    "pypi_mo_dots",
    "pypi_mo_future",
    "pypi_mo_logs",
    "pypi_mo_math",
    "pypi_mo_testing"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "framework :: django",
    "framework :: django :: 3.2",
    "intended audience :: developers",
    "license :: osi approved :: gnu affero general public license v3 or later (agplv3+)",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8"
  ],
  "description": "edx_event_bus_redis\n#############################\n\n|pypi-badge| |ci-badge| |codecov-badge| |doc-badge| |pyversions-badge|\n|license-badge| |status-badge|\n\npurpose\n*******\n\nredis streams implementation for the open edx event bus.\n\noverview\n********\nthis package implements an event bus for open edx using redis streams.\n\nthe event bus acts as a broker between services publishing events and other services that consume these events.\n\nthis package contains both the publishing code, which processes events into\nmessages to send to the stream, and the consumer code, which polls the stream\nusing a `while true` loop in order to turn messages back into django signal to\nbe emitted. this django signal contains event data which can be consumed by the\nhost application which does the actual event handling.\nthe actual redis host is configurable.\n\nthe repository works together with the openedx/openedx-events repository to make the fully functional event bus.\n\ndocumentation\n*************\n\nto use this implementation of the event bus with openedx-events, you'll need to ensure that below the following django settings are set::\n\n    # redis connection url\n    # https://redis.readthedocs.io/en/stable/examples/ssl_connection_examples.html#connecting-to-a-redis-instance-via-a-url-string\n    event_bus_redis_connection_url: redis://:password@localhost:6379/\n    event_bus_topic_prefix: dev\n\n    # required, on the producing side only:\n    # https://github.com/openedx/openedx-events/blob/06635f3642cee4020d6787df68bba694bd1233fe/openedx_events/event_bus/__init__.py#l105-l112\n    # this will load a producer class which can send events to redis streams.\n    event_bus_producer: edx_event_bus_redis.create_producer\n\n    # required, on the consumer side only:\n    # https://github.com/openedx/openedx-events/blob/06635f3642cee4020d6787df68bba694bd1233fe/openedx_events/event_bus/__init__.py#l150-l157\n    # this will load a consumer class which can consume events from redis streams.\n    event_bus_consumer: edx_event_bus_redis.rediseventconsumer\n\noptional settings that are worth considering::\n\n    # if the consumer encounters this many consecutive errors, exit with an error. this is intended to be used in a context where a management system (such as kubernetes) will relaunch the consumer automatically.\n    event_bus_redis_consumer_consecutive_errors_limit (defaults to none)\n\n    # how long the consumer should wait for new entries in a stream.\n    # as we are running the consumer in a while true loop, changing this setting doesn't make much difference\n    # expect for changing number of monitoring messages while waiting for new events.\n    # https://redis.io/commands/xread/#blocking-for-data\n    event_bus_redis_consumer_poll_timeout (defaults to 60 seconds)\n\n    # limits stream size to approximately this number\n    event_bus_redis_stream_max_len (defaults to 10_000)\n\nfor manual local testing, see ``testing locally`` section below.\n\n\ngetting started\n***************\n\ndeveloping\n==========\n\none time setup\n--------------\n.. code-block::\n\n  # clone the repository\n  git clone git@github.com:openedx/event-bus-redis.git\n  cd event-bus-redis\n\n  # set up a virtualenv using virtualenvwrapper with the same name as the repo and activate it\n  mkvirtualenv -p python3.8 event-bus-redis\n\n\nevery time you develop something in this repo\n---------------------------------------------\n.. code-block::\n\n  # activate the virtualenv\n  workon event-bus-redis\n\n  # grab the latest code\n  git checkout main\n  git pull\n\n  # install/update the dev requirements\n  make requirements\n\n  # run the tests and quality checks (to verify the status before you make any changes)\n  make validate\n\n  # make a new branch for your changes\n  git checkout -b <your_github_username>/<short_description>\n\n  # using your favorite editor, edit the code to make your change.\n  vim ...\n\n  # run your new tests\n  pytest ./path/to/new/tests\n\n  # run all the tests and quality checks\n  make validate\n\n  # commit all your changes\n  git commit ...\n  git push\n\n  # open a pr and ask for review.\n\ntesting locally\n---------------\n\n* please execute below commands in virtual environment to avoid messing with\n  your main python installation.\n* install all dependencies using ``make requirements``\n* run ``make redis-up`` in current directory.\n* run ``make consume_test_event`` to start running a single consumer or ``make multiple_consumer_test_event`` to run two consumers with different consumer names.\n* run ``make produce_test_event`` in a separate terminal to produce a fake event, the consumer should log this event.\n* you can also add a fake handler to test emitted signal via consumer. add below code snippet to ``edx_event_bus_redis/internal/consumer.py``.\n\n.. code-block:: python\n\n  from django.dispatch import receiver\n  from openedx_events.content_authoring.signals import xblock_deleted\n  @receiver(xblock_deleted)\n  def deleted_handler(sender, signal, **kwargs):\n      print(f\"\"\"=======================================  signal: {signal}\"\"\")\n      print(f\"\"\"=======================================  kwargs: {kwargs}\"\"\")\n\ndeploying\n=========\n\nafter setting up required configuration, events are produced using the\n``openedx_events.get_producer().send()`` method which needs to be called from\nthe producing side. for more information, visit this `link`_.\n\n.. _link: https://openedx.atlassian.net/wiki/spaces/ac/pages/3508699151/how+to+start+using+the+event+bus#producing-a-signal\n\nto consume events, openedx_events provides a management command called\n``consume_events`` which can be called like so:\n\n.. code-block:: bash\n\n   # consume events from topic xblock-status\n   python manage.py consume_events --topic xblock-status --group_id test_group --extra '{\"consumer_name\": \"test_group.c1\"}'\n\n   # replay events from specific redis msg id\n   python manage.py consume_events --topic xblock-deleted --group_id test_group --extra '{\"consumer_name\": \"test_group.c1\", \"last_read_msg_id\": \"1679676448892-0\"}'\n\n   # process all messages that were not read by this consumer group.\n   python manage.py consume_events -t user-login -g user-activity-service --extra '{\"check_backlog\": true, \"consumer_name\": \"c1\"}'\n\n   # claim messages pending for more than 30 minutes (1,800,000 milliseconds) from other consumers in the group.\n   python manage.py consume_events -t user-login -g user-activity-service --extra '{\"claim_msgs_older_than\": 1800000, \"consumer_name\": \"c1\"}'\n\nnote that the ``consumer_name`` in ``--extra`` argument is required for redis\nevent bus as this name uniquely identifies the consumer in a group and helps\nwith tracking processed and pending messages.\n\nif required, you can also replay events i.e. process messages from a specific\npoint in history.\n\n.. code-block:: bash\n\n   # replay events from specific redis msg id\n   python manage.py consume_events --signal org.openedx.content_authoring.xblock.deleted.v1 --topic xblock-deleted --group_id test_group --extra '{\"consumer_name\": \"c1\", \"last_read_msg_id\": \"1684306039300-0\"}'\n\nthe redis message id can be found from the producer logs in the host application, example:\n\n.. code-block::\n\n   message delivered to redis event bus: topic=dev-xblock-deleted, message_id=ab289110-f47e-11ed-bd90-1c83413013cb, signal=<openedxpublicsignal: org.openedx.content_authoring.xblock.deleted.v1>, redis_msg_id=b'1684306039300-0'\n\ngetting help\n************\n\ndocumentation\n=============\n\nplaceholder: start by going through `the documentation`_.  if you need more help see below.\n\n.. _the documentation: https://docs.openedx.org/projects/event-bus-redis\n\n(todo: `set up documentation <https://openedx.atlassian.net/wiki/spaces/doc/pages/21627535/publish+documentation+on+read+the+docs>`_)\n\nmore help\n=========\n\nif you're having trouble, we have discussion forums at\nhttps://discuss.openedx.org where you can connect with others in the\ncommunity.\n\nour real-time conversations are on slack. you can request a `slack\ninvitation`_, then join our `community slack workspace`_.\n\nfor anything non-trivial, the best path is to open an issue in this\nrepository with as many details about the issue you are facing as you\ncan provide.\n\nhttps://github.com/openedx/event-bus-redis/issues\n\nfor more information about these options, see the `getting help`_ page.\n\n.. _slack invitation: https://openedx.org/slack\n.. _community slack workspace: https://openedx.slack.com/\n.. _getting help: https://openedx.org/getting-help\n\nlicense\n*******\n\nthe code in this repository is licensed under the agpl 3.0 unless\notherwise noted.\n\nplease see `license.txt <license.txt>`_ for details.\n\ncontributing\n************\n\ncontributions are very welcome.\nplease read `how to contribute <https://openedx.org/r/how-to-contribute>`_ for details.\n\nthis project is currently accepting all types of contributions, bug fixes,\nsecurity fixes, maintenance work, or new features.  however, please make sure\nto have a discussion about your new feature idea with the maintainers prior to\nbeginning development to maximize the chances of your change being accepted.\nyou can start a conversation by creating a new issue on this repo summarizing\nyour idea.\n\nthe open edx code of conduct\n****************************\n\nall community members are expected to follow the `open edx code of conduct`_.\n\n.. _open edx code of conduct: https://openedx.org/code-of-conduct/\n\npeople\n******\n\nthe assigned maintainers for this component and other project details may be\nfound in `backstage`_. backstage pulls this data from the ``catalog-info.yaml``\nfile in this repo.\n\n.. _backstage: https://open-edx-backstage.herokuapp.com/catalog/default/component/event-bus-redis\n\nreporting security issues\n*************************\n\nplease do not report security issues in public. please email security@openedx.org.\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/edx-event-bus-redis.svg\n    :target: https://pypi.python.org/pypi/edx-event-bus-redis/\n    :alt: pypi\n\n.. |ci-badge| image:: https://github.com/openedx/event-bus-redis/workflows/python%20ci/badge.svg?branch=main\n    :target: https://github.com/openedx/event-bus-redis/actions\n    :alt: ci\n\n.. |codecov-badge| image:: https://codecov.io/github/openedx/event-bus-redis/coverage.svg?branch=main\n    :target: https://codecov.io/github/openedx/event-bus-redis?branch=main\n    :alt: codecov\n\n.. |doc-badge| image:: https://readthedocs.org/projects/edx-event-bus-redis/badge/?version=latest\n    :target: https://event-bus-redis.readthedocs.io/en/latest/\n    :alt: documentation\n\n.. |pyversions-badge| image:: https://img.shields.io/pypi/pyversions/edx-event-bus-redis.svg\n    :target: https://pypi.python.org/pypi/event-bus-redis/\n    :alt: supported python versions\n\n.. |license-badge| image:: https://img.shields.io/github/license/openedx/event-bus-redis.svg\n    :target: https://github.com/openedx/event-bus-redis/blob/main/license.txt\n    :alt: license\n\n.. |status-badge| image:: https://img.shields.io/badge/status-experimental-yellow\n\n\nchange log\n##########\n\n..\n   all enhancements and patches to edx_event_bus_redis will be documented\n   in this file.  it adheres to the structure of https://keepachangelog.com/ ,\n   but in restructuredtext instead of markdown (for ease of incorporation into\n   sphinx documentation and the pypi description).\n\n   this project adheres to semantic versioning (https://semver.org/).\n\n.. there should always be an \"unreleased\" section for changes pending release.\n\nunreleased\n**********\n\n*\n\n[0.3.2] - 2023-09-01\n************************************************\n\nadded\n=====\n* adds custom exceptions for producing and consuming errors.\n\n[0.3.1] - 2023-05-24\n************************************************\n\nadded\n=====\n\n* option to limit length of stream.\n\nchanged\n=======\n\n* updated readme.\n\n[0.3.0] - 2023-05-23\n************************************************\n\nchanged\n=======\n* **breaking change**: removed deprecated ``signal`` argument from consumer.\n\n[0.2.1] - 2023-05-12\n************************************************\n\nchanged\n=======\n* deprecated ``signal`` argument in consumer (made optional in preparation for removal)\n\n[0.1.1] - 2023-05-12\n************************************************\n\nadded\n=====\n\n* option to claim messages from other consumers based on idle time.\n\nchanged\n=======\n\n* setting ``check_backlog`` will read messages that were not read by this consumer group.\n\n[0.1.0] - 2023-05-04\n************************************************\n\nadded\n=====\n\n* first release on pypi.\n* redis streams consumer and producer implemented.\n",
  "docs_url": null,
  "keywords": "python edx",
  "license": "agpl 3.0",
  "name": "edx-event-bus-redis",
  "package_url": "https://pypi.org/project/edx-event-bus-redis/",
  "project_url": "https://pypi.org/project/edx-event-bus-redis/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/event-bus-redis"
  },
  "release_url": "https://pypi.org/project/edx-event-bus-redis/0.3.2/",
  "requires_dist": [
    "Django",
    "edx-django-utils",
    "edx-toggles",
    "openedx-events (>=8.0.0)",
    "walrus"
  ],
  "requires_python": ">=3.8",
  "summary": "redis streams implementation for the open edx event bus.",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "edx",
    "oscm@edx.org"
  ],
  "kwds": "edx_event_bus_redis event_bus_redis_connection_url event_bus event_bus_redis_stream_max_len event_bus_producer",
  "license_kwds": "agpl 3.0",
  "libtype": "pypi",
  "id": "pypi_edx_event_bus_redis",
  "homepage": "https://github.com/openedx/event-bus-redis",
  "release_count": 6,
  "dependency_ids": [
    "pypi_django",
    "pypi_edx_django_utils",
    "pypi_edx_toggles",
    "pypi_openedx_events",
    "pypi_walrus"
  ]
}
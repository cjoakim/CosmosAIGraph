{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: internet :: name service (dns)",
    "topic :: utilities"
  ],
  "description": "public suffix list module for python\n====================================\n\nthis module allows you to get the public suffix, as well as the registrable domain,\nof a domain name using the public suffix list from http://publicsuffix.org\n\na public suffix is a domain suffix under which you can register domain\nnames, or under which the suffix owner does not control the subdomains.\nsome examples of public suffixes in the former example are \".com\",\n\".co.uk\" and \"pvt.k12.wy.us\"; examples of the latter case are \"github.io\" and\n\"blogspot.com\".  the public suffix is sometimes referred to as the effective\nor extended tld (etld).\naccurately knowing the public suffix of a domain is useful when handling\nweb browser cookies, highlighting the most important part of a domain name\nin a user interface or sorting urls by web site. it is also used in a wide range\nof research and applications that leverages domain name system (dns) data.\n\nthis module builds the public suffix list as a trie structure, making it more efficient\nthan other string-based modules available for the same purpose. it can be used\neffectively in large-scale distributed environments, such as pyspark.\n\nthis python module includes with a copy of the public suffix list (psl) so that it is\nusable out of the box. newer versions try to provide reasonably fresh copies of\nthis list. it also includes a convenience method to fetch the latest list. the psl does\nchange regularly.\n\nthe code is a fork of the publicsuffix package and includes the same base api. in\naddition, it contains a few variants useful for certain use cases, such as the option to\nignore wildcards or return only the extended tld (etld). you just need to import publicsuffix2 instead.\n\nthe public suffix list is now provided in utf-8 format. to correctly process\nidna-encoded domains, either the query or the list must be converted. by default, the\nmodule converts the psl. if your use case includes utf-8 domains, e.g., '\u98df\u72ee.com.cn',\nyou'll need to set the idna-encoding flag to false on instantiation (see examples below).\nfailure to use the correct encoding for your use case can lead to incorrect results for\ndomains that utilize unicode characters.\n\nthe code is mit-licensed and the publicsuffix data list is mpl-2.0-licensed.\n\n\n\nusage\n-----\n\ninstall with::\n\n    pip install publicsuffix2\n\nthe module provides functions to obtain the base domain, or sld, of an fqdn, as well as one\nto get just the public suffix. in addition, the functions a number of boolean parameters that\ncontrol how wildcards are handled. in addition to the functions, the module exposes a class that\nparses the psl, and allows for more control.\n\nthe module provides two equivalent functions to query a domain name, and return the base domain,\nor second-level-doamin; get_public_suffix() and get_sld()::\n\n    >>> from publicsuffix2 import get_public_suffix\n    >>> get_public_suffix('www.example.com')\n    'example.com'\n    >>> get_sld('www.example.com')\n    'example.com'\n    >>> get_public_suffix('www.example.co.uk')\n    'example.co.uk'\n    >>> get_public_suffix('www.super.example.co.uk')\n    'example.co.uk'\n    >>> get_sld(\"co.uk\")  # returns etld as is\n    'co.uk'\n\nthis function loads and caches the public suffix list. to obtain the latest version of the\npsl, use the fetch() function to first download the latest version. alternatively, you can pass\na custom list.\n\nfor more control, there is also a class that parses a public\nsuffix list and allows the same queries on individual domain names::\n\n    >>> from publicsuffix2 import publicsuffixlist\n    >>> psl = publicsuffixlist()\n    >>> psl.get_public_suffix('www.example.com')\n    'example.com'\n    >>> psl.get_public_suffix('www.example.co.uk')\n    'example.co.uk'\n    >>> psl.get_public_suffix('www.super.example.co.uk')\n    'example.co.uk'\n    >>> psl.get_sld('www.super.example.co.uk')\n    'example.co.uk'\n\nnote that the ``host`` part of an url can contain strings that are\nnot plain dns domain names (ip addresses, punycode-encoded names, name in\ncombination with a port number or a username, etc.). it is up to the\ncaller to ensure only domain names are passed to the get_public_suffix()\nmethod.\n\nthe get_public_suffix() function and the publicsuffixlist class initializer accept\nan optional argument pointing to a public suffix file. this can either be a file\npath, an iterable of public suffix lines, or a file-like object pointing to an\nopened list::\n\n    >>> from publicsuffix2 import get_public_suffix\n    >>> psl_file = 'path to some psl data file'\n    >>> get_public_suffix('www.example.com', psl_file)\n    'example.com'\n\nnote that when using get_public_suffix() a global cache keeps the latest provided\nsuffix list data.  this will use the cached latest loaded above::\n\n    >>> get_public_suffix('www.example.co.uk')\n    'example.co.uk'\n\n**idna-encoding.** the public suffix list is now in utf-8 format. for those use cases that\ninclude idna-encoded domains, the list must be converted. publicsuffix2 includes idna\nencoding as a parameter of the publicsuffixlist initialization and is true by\ndefault. for utf-8 use cases, set the idna parameter to false::\n\n    >>> from publicsuffix2 import publicsuffixlist\n    >>> psl = publicsuffixlist(idna=true)  # on by default\n    >>> psl.get_public_suffix('www.google.com')\n    'google.com'\n    >>> psl = publicsuffixlist(idna=false)  # use utf-8 encodings\n    >>> psl.get_public_suffix('\u98df\u72ee.com.cn')\n    '\u98df\u72ee.com.cn'\n\n**ignore wildcards.** in some use cases, particularly those related to large-scale domain processing,\nthe user might want to ignore wildcards to create more aggregation. this is possible by setting\nthe parameter wildcard=false.::\n\n    >>> psl.get_public_suffix('telinet.com.pg', wildcard=false)\n    'com.pg'\n    >>> psl.get_public_suffix('telinet.com.pg', wildcard=true)\n    'telinet.com.pg'\n\n**require valid etlds (strict).** in the publicsuffix2 module, a domain with an invalid tld will still return\nreturn a base domain, e.g,::\n\n    >>> psl.get_public_suffix('www.mine.local')\n    'mine.local'\n\nthis is useful for many use cases, while in others, we want to ensure that the domain includes a\nvalid etld. in this case, the boolean parameter strict provides a solution. if this flag is set,\nan invalid tld will return none.::\n\n    >>> psl.get_public_suffix('www.mine.local', strict=true) is none\n    true\n\n**return etld only.** the standard use case for publicsuffix2 is to return the registrable,\nor base, domain\naccording to the public suffix list. in some cases, however, we only wish to find the etld\nitself. this is available via the get_tld() method.::\n\n    >>> psl.get_tld('www.google.com')\n    'com'\n    >>> psl.get_tld('www.google.co.uk')\n    'co.uk'\n\nall of the methods and functions include the wildcard and strict parameters.\n\nfor convenience, the public method get_sld() is available. this is identical to the method\nget_public_suffix() and is intended to clarify the output for some users.\n\nto **update the bundled suffix list** use the provided setup.py command::\n\n    python setup.py update_psl\n\nthe update list will be saved in `src/publicsuffix2/public_suffix_list.dat`\nand you can build a new wheel with this bundled data.\n\nalternatively, there is a fetch() function that will fetch the latest version\nof a public suffix data file from https://publicsuffix.org/list/public_suffix_list.dat\nyou can use it this way::\n\n    >>> from publicsuffix2 import get_public_suffix\n    >>> from publicsuffix2 import fetch\n    >>> psl_file = fetch()\n    >>> get_public_suffix('www.example.com', psl_file)\n    'example.com'\n\nnote that the once loaded, the data file is cached and therefore fetched only\nonce.\n\nthe extracted public suffix list, that is the tlds and their modifiers, is put into\nan instance variable, tlds, which can be accessed as an attribute, tlds.::\n\n    >>> psl = publicsuffixlist()\n    >>> psl.tlds[:5]\n    ['ac',\n    'com.ac',\n    'edu.ac',\n    'gov.ac',\n    'net.ac']\n\n**using the module in large-scale processing**\nif using this library in large-scale pyspark processing, you should instantiate the class as\na global variable, not within a user function. the class methods can then be used within user\nfunctions for distributed processing.\n\nsource\n------\n\nget a local copy of the development repository. the development takes\nplace in the ``develop`` branch. stable releases are tagged in the ``master``\nbranch::\n\n    git clone https://github.com/nexb/python-publicsuffix2.git\n\n\nhistory\n-------\nthis code is forked from toma\u017e \u0161olc's fork of david wilson's code.\n\ntoma\u017e \u0161olc's code originally at:\n\nhttps://www.tablix.org/~avian/git/publicsuffix.git\n\ncopyright (c) 2014 toma\u017e \u0161olc <tomaz.solc@tablix.org>\n\ndavid wilson's code was originally at:\n\nhttp://code.google.com/p/python-public-suffix-list/\n\ncopyright (c) 2009 david wilson\n\n\nlicense\n-------\n\nthe code is mit-licensed.\nthe vendored public suffix list data from mozilla is under the mpl-2.0.\n\ncopyright (c) 2015 nexb inc. and others.\n\ncopyright (c) 2014 toma\u017e \u0161olc <tomaz.solc@tablix.org>\n\ncopyright (c) 2009 david wilson\n\npermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"software\"),\nto deal in the software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the software, and to permit persons to whom the\nsoftware is furnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising\nfrom, out of or in connection with the software or the use or other\ndealings in the software.\n\nchangelog\n---------\n\n2019-12-19   publicsuffix2 2.20191219\n\n    * add new strict mode to get_tld() by @hiratara .\n    * update tld list\n    * add tests from mozilla test suite\n\n\n2019-08-12   publicsuffix2 2.20190812\n\n    * fix regression in available tlds.\n    * format and streamline code.\n\n\n2019-08-11   publicsuffix2 2.20190811\n\n    * update publicsuffix.file to the latest version from mozilla.\n\n\n2019-08-08    publicsuffix2 2.20190808\n\n    * add additional functionality and handles change to psl format\n    * add attribute to retrieve the psl as a list\n\n\n2019-02-05    publicsuffix2 2.201902051213\n\n    * update publicsuffix.file to the latest version from mozilla.\n    * restore a fetch() function by popular demand\n\n\n2018-12-13    publicsuffix2 2.20181213\n\n    * update publicsuffix.file to the latest version from mozilla.\n\n\n2018-10-01    publicsuffix2 2.20180921.2\n\n    * update publicsuffix.file to the latest version from mozilla.\n    * breaking api change: publicsuffix module renamed to publicsuffix2\n\n\n2016-08-18    publicsuffix2 2.20160818\n\n    * update publicsuffix.file to the latest version from mozilla.\n\n\n2016-06-21    publicsuffix2 2.20160621\n\n    * update publicsuffix.file to the latest version from mozilla.\n    * adopt new version scheme: major.<publisiffix list date>\n\n\n2015-10-12    publicsuffix2 2.1.0\n\n    * merged latest updates from publicsuffix\n    * added new convenience top level get_public_suffix_function caching\n      a loaded list if needed.\n    * updated publicsuffix.file to the latest version from mozilla.\n    * added an update_psl setup command to fetch and vendor the latest list\n      use as: python setup.py update_psl\n\n\n2015-06-04    publicsuffix2 2.0.0\n\n    * forked publicsuffix, but kept the same api\n    * updated publicsuffix.file to the latest version from mozilla.\n    * changed packaging to have the suffix list be package data\n      and be wheel friendly.\n    * use spaces indentation, not tabs\n\n\n2014-01-14    publicsuffix 1.0.5\n\n    * correctly handle fully qualified domain names (thanks to matth\u00e4us\n      wander).\n    * updated publicsuffix.txt to the latest version from mozilla.\n\n2013-01-02    publicsuffix 1.0.4\n\n    * added missing change log.\n\n2013-01-02    publicsuffix 1.0.3\n\n    * updated publicsuffix.txt to the latest version from mozilla.\n    * added trove classifiers.\n    * minor update of the readme.\n\n2011-10-10    publicsuffix 1.0.2\n\n    * compatibility with python 3.x (thanks to joern\n      koerner) and python 2.5\n\n2011-09-22    publicsuffix 1.0.1\n\n    * fixed installation issue under virtualenv (thanks to\n      mark mcclain)\n\n2011-07-29    publicsuffix 1.0.0\n\n    * first release\n\n\n",
  "docs_url": null,
  "keywords": "domain,public suffix,suffix,dns,tld,sld,psl,idna",
  "license": "mit and mpl-2.0",
  "name": "publicsuffix2",
  "package_url": "https://pypi.org/project/publicsuffix2/",
  "project_url": "https://pypi.org/project/publicsuffix2/",
  "project_urls": {
    "Homepage": "https://github.com/nexb/python-publicsuffix2"
  },
  "release_url": "https://pypi.org/project/publicsuffix2/2.20191221/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "get a public suffix for a domain name using the public suffix list. forked from and using the same api as the publicsuffix package.",
  "version": "2.20191221",
  "releases": [],
  "developers": [
    "info@nexb.com",
    "nexb_inc"
  ],
  "kwds": "public_suffix_list get_public_suffix get_public_suffix_function suffixes domains",
  "license_kwds": "mit and mpl-2.0",
  "libtype": "pypi",
  "id": "pypi_publicsuffix2",
  "homepage": "https://github.com/nexb/python-publicsuffix2",
  "release_count": 13,
  "dependency_ids": []
}
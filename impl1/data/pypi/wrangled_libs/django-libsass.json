{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 1.10",
    "framework :: django :: 1.11",
    "framework :: django :: 1.8",
    "framework :: django :: 1.9",
    "framework :: django :: 2.0",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "django-libsass\n==============\n\na django-compressor filter to compile sass files using libsass.\n\ninstallation\n~~~~~~~~~~~~\n\nstarting from a django project with `django-compressor <https://github.com/django-compressor/django-compressor/>`_ set up::\n\n pip install django-libsass\n\nand add django_libsass.sasscompiler to your compress_precompilers setting::\n\n compress_precompilers = (\n     ('text/x-scss', 'django_libsass.sasscompiler'),\n )\n\nyou can now use the content type text/x-scss on your stylesheets, and have them\ncompiled seamlessly into css::\n\n {% load compress %}\n\n {% compress css %}\n     <link rel=\"stylesheet\" type=\"text/x-scss\" href=\"{% static \"myapp/css/main.scss\" %}\" />\n {% endcompress %}\n\n\nimports\n~~~~~~~\n\nrelative paths in @import lines are followed as you would expect::\n\n @import \"../variables.scss\";\n\nadditionally, django's staticfiles_finders setting is consulted, and all possible locations\nfor static files *on the local filesystem* are included on the search path. this makes it\npossible to import files across different apps::\n\n @import \"myotherapp/css/widget.scss\"\n\n\nsettings\n~~~~~~~~\n\nthe following settings can be used to control django-libsass's behaviour:\n\n* ``libsass_source_comments`` - whether to enable sass source comments (adds comments about source lines). defaults to ``true`` when django's ``debug`` is ``true``, ``false`` otherwise.\n* ``libsass_output_style`` - sass output style. options are ``'nested'``, ``'expanded'``, ``'compact'`` and ``'compressed'``, although as of libsass 3.0.2 only ``'nested'`` and ``'compressed'`` are implemented. default is 'nested'. see `sass documentation for output styles <http://sass-lang.com/documentation/file.sass_reference.html#output_style>`_. note that `django-compressor's settings <http://django-compressor.readthedocs.org/en/latest/settings/>`_ may also affect the formatting of the resulting css.\n* ``libsass_custom_functions`` - a mapping of custom functions to be made available within the sass compiler. by default, a ``static`` function is provided, analogous to django's ``static`` template tag.\n* ``libsass_sourcemaps`` - enable embedding sourcemaps into file output (default: false)\n* ``libsass_precision`` - number of digits of numerical precision (default: 5)\n* ``libsass_additional_include_paths`` - a list of base paths to be recognised in @import lines, in addition to django's recognised static file locations\n\n\ncustom functions\n~~~~~~~~~~~~~~~~\n\nthe sass compiler can be extended with custom python functions defined in the ``libsass_custom_functions`` setting. by default, a ``static`` function is provided, for generating static paths to resources such as images and fonts::\n\n    .foo {\n        background: url(static(\"myapp/image/bar.png\"));\n    }\n\nif your ``static_url`` is '/static/', this will be rendered as::\n\n    .foo {\n        background: url(\"/static/myapp/image/bar.png\"));\n    }\n\nwhy django-libsass?\n~~~~~~~~~~~~~~~~~~~\n\nwe wanted to use sass in a django project without introducing any external (non pip-installable)\ndependencies. (actually, we wanted to use less, but the same arguments apply...) there are a few\npure python implementations of sass and less, but we found that they invariably didn't match the\nbehaviour of the reference compilers, either in their handling of @imports or lesser-used css\nfeatures such as media queries.\n\n`libsass <http://libsass.org/>`_ is a mature c/c++ port of the sass engine, co-developed by the\noriginal creator of sass, and we can reasonably rely on it to stay in sync with the reference\nsass compiler - and, being c/c++, it's fast. thanks to hong minhee's\n`libsass-python <https://github.com/dahlia/libsass-python>`_ project, it has python bindings and\ninstalls straight from pip.\n\ndjango-libsass builds on libsass-python to make @import paths aware of django's staticfiles\nmechanism, and provides a filter module for django-compressor which uses the libsass-python api\ndirectly, avoiding the overheads of calling an external executable to do the compilation.\n\n\nreporting bugs\n~~~~~~~~~~~~~~\n\nplease see the `troubleshooting <https://github.com/torchbox/django-libsass/wiki/troubleshooting>`_ page for help with some common setup issues.\n\ni do not provide support for getting django-libsass working with your css framework of choice. if you believe you've found a bug, please try to isolate it as a minimal reproducible test case before reporting it - ideally this will consist of a few edits / additions to the `hello-django-libsass <https://github.com/gasman/hello-django-libsass>`_ example project. if you cannot demonstrate the problem in a few standalone scss files, it is almost certainly not a django-libsass bug - any bug reports that relate to a third-party css framework are likely to be closed without further investigation.\n\n\nauthor\n~~~~~~\n\nmatt westcott matthew.westcott@torchbox.com\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "django-libsass",
  "package_url": "https://pypi.org/project/django-libsass/",
  "project_url": "https://pypi.org/project/django-libsass/",
  "project_urls": {
    "Homepage": "https://github.com/torchbox/django-libsass"
  },
  "release_url": "https://pypi.org/project/django-libsass/0.9/",
  "requires_dist": [
    "django-compressor (>=1.3)",
    "libsass (<1,>=0.7.0)",
    "django-appconf (==1.0.3) ; python_version < \"3\""
  ],
  "requires_python": "",
  "summary": "a django-compressor filter to compile sass files using libsass",
  "version": "0.9",
  "releases": [],
  "developers": [
    "matt_westcott",
    "matthew.westcott@torchbox.com"
  ],
  "kwds": "django_libsass sass_reference sass libsass_output_style sasscompiler",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_django_libsass",
  "homepage": "https://github.com/torchbox/django-libsass",
  "release_count": 9,
  "dependency_ids": [
    "pypi_django_appconf",
    "pypi_django_compressor",
    "pypi_libsass"
  ]
}
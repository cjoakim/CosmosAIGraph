{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# geonamescache\n\n[![image](https://img.shields.io/pypi/v/geonamescache.svg)](https://pypi.python.org/pypi/geonamescache)\n\na python library that provides functions to retrieve names, iso and fips codes of continents, countries as well as us states and counties as python dictionaries. the country and city datasets also include population and geographic data.\n\ngeonames data is obtained from [geonames](http://www.geonames.org/).\n\n## installation\n\n    pip install geonamescache\n\n## usage\n\na simple usage example:\n\n    import geonamescache\n\n    gc = geonamescache.geonamescache()\n    countries = gc.get_countries()\n    # print countries dictionary\n    print(countries)\n    # you really wanna do something more useful with the data...\n\n## settings\n\n### cities dataset\n\nwhen creating a `geonamescache` you can set the `min_city_population` parameter to either of 500, 1000, 5000 or the default 15000. the smaller the minimum popluation the more cities are included in the cities dataset.\n\n*new in version 1.4*\n\n## methods\n\ncurrently geonamescache provides the following methods, that return dictionaries with the requested data:\n\n* get\\_continents()\n* get\\_countries()\n* get\\_us\\_states()\n* get\\_cities()\n* get\\_countries\\_by\\_names()\n* get\\_us\\_states\\_by\\_names()\n* get\\_cities\\_by\\_name(name)\n* get\\_us\\_counties()\n\nin addition you can search for cities by name.\n\n* search\\_cities(\\'name\\', case\\_sensitive=true, contains\\_search=true)\n\nthis function returns a list of city records that match the given `name`.\n\n* by default the `alternatenames` attribute is searched for matches.\n* by default the search is case insensitive, it can be made case sensitive by changing `case_sensitive` to true.\n* by default the search is contains, it can be made exact equality by changing `contains_search` to false.\n\n## mappers\n\nthe mappers module provides function(s) to map data properties. currently you can create a mapper that maps country properties, e. g. the `name` property to the `iso3` property, to do so you\\'d write the following code:\n\n    from geonamescache.mappers import country\n    mapper = country(from_key='name', to_key='iso3')\n\n    iso3 = mapper('spain') # iso3 is assigned esp\n\n## contributing\n\nplease write test(s) for any new feature. if you wish to build the data from scratch, run `make dl` and `make json`.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "geonamescache",
  "package_url": "https://pypi.org/project/geonamescache/",
  "project_url": "https://pypi.org/project/geonamescache/",
  "project_urls": {
    "Homepage": "https://github.com/yaph/geonamescache"
  },
  "release_url": "https://pypi.org/project/geonamescache/2.0.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "geonames data for continents, cities and us states.",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "code@ramiro.org"
  ],
  "kwds": "geonamescache get_countries geonames _continents _cities",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_geonamescache",
  "homepage": "https://github.com/yaph/geonamescache",
  "release_count": 26,
  "dependency_ids": []
}
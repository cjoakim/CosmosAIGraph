{
  "classifiers": [
    "license :: osi approved :: mit license",
    "topic :: multimedia :: sound/audio",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# demucs music source separation\n\n[![support ukraine](https://img.shields.io/badge/support-ukraine-ffd500?style=flat&labelcolor=005bbb)](https://opensource.fb.com/support-ukraine)\n![tests badge](https://github.com/facebookresearch/demucs/workflows/tests/badge.svg)\n![linter badge](https://github.com/facebookresearch/demucs/workflows/linter/badge.svg)\n\n\nthis is the 4th release of demucs (v4), featuring hybrid transformer based source separation.\n**for the classic hybrid demucs (v3):** [go this commit][demucs_v3].\nif you are experiencing issues and want the old demucs back, please fill an issue, and then you can get back to the v3 with\n`git checkout v3`. you can also go [demucs v2][demucs_v2].\n\n\ndemucs is a state-of-the-art music source separation model, currently capable of separating\ndrums, bass, and vocals from the rest of the accompaniment.\ndemucs is based on a u-net convolutional architecture inspired by [wave-u-net][waveunet].\nthe v4 version features [hybrid transformer demucs][htdemucs], a hybrid spectrogram/waveform separation model using transformers.\nit is based on [hybrid demucs][hybrid_paper] (also provided in this repo) with the innermost layers are\nreplaced by a cross-domain transformer encoder. this transformer uses self-attention within each domain,\nand cross-attention across domains.\nthe model achieves a sdr of 9.00 db on the musdb hq test set. moreover, when using sparse attention\nkernels to extend its receptive field and per source fine-tuning, we achieve state-of-the-art 9.20 db of sdr.\n\nsamples are available [on our sample page](https://ai.honu.io/papers/htdemucs/index.html).\ncheckout [our paper][htdemucs] for more information.\nit has been trained on the [musdb hq][musdb] dataset + an extra training dataset of 800 songs.\nthis model separates drums, bass and vocals and other stems for any song.\n\n\nas hybrid transformer demucs is brand new, it is not activated by default, you can activate it in the usual\ncommands described hereafter with `-n htdemucs_ft`.\nthe single, non fine-tuned model is provided as `-n htdemucs`, and the retrained baseline\nas `-n hdemucs_mmi`. the sparse hybrid transformer model decribed in our paper is not provided as its\nrequires custom cuda code that is not ready for release yet.\nwe are also releasing an experimental 6 sources model, that adds a `guitar` and `piano` source.\nquick testing seems to show okay quality for `guitar`, but a lot of bleeding and artifacts for the `piano` source.\n\n\n<p align=\"center\">\n<img src=\"./demucs.png\" alt=\"schema representing the structure of hybrid transformer demucs,\n    with a dual u-net structure, one branch for the temporal domain,\n    and one branch for the spectral domain. there is a cross-domain transformer between the encoders and decoders.\"\nwidth=\"800px\"></p>\n\n\n\n## important news if you are already using demucs\n\nsee the [release notes](./docs/release.md) for more details.\n\n- 22/02/2023: added support for the [sdx 2023 challenge](https://www.aicrowd.com/challenges/sound-demixing-challenge-2023),\n    see the dedicated [doc page](./docs/sdx23.md)\n- 07/12/2022: demucs v4 now on pypi. **htdemucs** model now used by default. also releasing\n    a 6 sources models (adding `guitar` and `piano`, although the latter doesn't work so well at the moment).\n- 16/11/2022: added the new **hybrid transformer demucs v4** models.\n\tadding support for the [torchaudio implementation of hdemucs](https://pytorch.org/audio/stable/tutorials/hybrid_demucs_tutorial.html).\n- 30/08/2022: added reproducibility and ablation grids, along with an updated version of the paper.\n- 17/08/2022: releasing v3.0.5: set split segment length to reduce memory. compatible with pytorch 1.12.\n- 24/02/2022: releasing v3.0.4: split into two stems (i.e. karaoke mode).\n    export as float32 or int24.\n- 17/12/2021: releasing v3.0.3: bug fixes  (thanks @keunwoochoi), memory drastically\n    reduced on gpu (thanks @famzah) and new multi-core evaluation on cpu (`-j` flag).\n- 12/11/2021: releasing **demucs v3** with hybrid domain separation. strong improvements\n\ton all sources. this is the model that won sony mdx challenge.\n- 11/05/2021: adding support for musdb-hq and arbitrary wav set, for the mdx challenge. for more information\non joining the challenge with demucs see [the demucs mdx instructions](docs/mdx.md)\n\n\n## comparison with other models\n\nwe provide hereafter a summary of the different metrics presented in the paper.\nyou can also compare hybrid demucs (v3), [kuielab-mdx-net][kuielab], [spleeter][spleeter], open-unmix, demucs (v1), and conv-tasnet on one of my favorite\nsongs on my [soundcloud playlist][soundcloud].\n\n### comparison of accuracy\n\n`overall sdr` is the mean of the sdr for each of the 4 sources, `mos quality` is a rating from 1 to 5\nof the naturalness and absence of artifacts given by human listeners (5 = no artifacts), `mos contamination`\nis a rating from 1 to 5 with 5 being zero contamination by other sources. we refer the reader to our [paper][hybrid_paper],\nfor more details.\n\n| model                        | domain      | extra data?       | overall sdr | mos quality | mos contamination |\n|------------------------------|-------------|-------------------|-------------|-------------|-------------------|\n| [wave-u-net][waveunet]       | waveform    | no                | 3.2         | -           | -                 |\n| [open-unmix][openunmix]      | spectrogram | no                | 5.3         | -           | -                 |\n| [d3net][d3net]               | spectrogram | no                | 6.0         | -           | -                 |\n| [conv-tasnet][demucs_v2]     | waveform    | no                | 5.7         | -           |                   |\n| [demucs (v2)][demucs_v2]     | waveform    | no                | 6.3         | 2.37        | 2.36              |\n| [resunetdecouple+][decouple] | spectrogram | no                | 6.7         | -           | -                 |\n| [kuielab-mdx-net][kuielab]   | hybrid      | no                | 7.5         | **2.86**    | 2.55              |\n| [band-spit rnn][bandsplit]   | spectrogram | no                | **8.2**     | -           | -                 |\n| **hybrid demucs (v3)**       | hybrid      | no                | 7.7         | **2.83**    | **3.04**          |\n| [mmdenselstm][mmdenselstm]   | spectrogram | 804 songs         | 6.0         | -           | -                 |\n| [d3net][d3net]               | spectrogram | 1.5k songs        | 6.7         | -           | -                 |\n| [spleeter][spleeter]         | spectrogram | 25k songs         | 5.9         | -           | -                 |\n| [band-spit rnn][bandsplit]   | spectrogram | 1.7k (mixes only) | **9.0**     | -           | -                 |\n| **ht demucs f.t. (v4)**      | hybrid      | 800 songs         | **9.0**     | -           | -                 |\n\n\n\n## requirements\n\nyou will need at least python 3.8. see `requirements_minimal.txt` for requirements for separation only,\nand `environment-[cpu|cuda].yml` (or `requirements.txt`) if you want to train a new model.\n\n### for windows users\n\neverytime you see `python3`, replace it with `python.exe`. you should always run commands from the\nanaconda console.\n\n### for musicians\n\nif you just want to use demucs to separate tracks, you can install it with\n\n```bash\npython3 -m pip install -u demucs\n```\n\nfor bleeding edge versions, you can install directly from this repo using\n```bash\npython3 -m pip install -u git+https://github.com/facebookresearch/demucs#egg=demucs\n```\n\nadvanced os support are provided on the following page, **you must read the page for your os before posting an issues**:\n- **if you are using windows:** [windows support](docs/windows.md).\n- **if you are using mac os x:** [mac os x support](docs/mac.md).\n- **if you are using linux:** [linux support](docs/linux.md).\n\n### for machine learning scientists\n\nif you have anaconda installed, you can run from the root of this repository:\n\n```bash\nconda env update -f environment-cpu.yml  # if you don't have gpus\nconda env update -f environment-cuda.yml # if you have gpus\nconda activate demucs\npip install -e .\n```\n\nthis will create a `demucs` environment with all the dependencies installed.\n\nyou will also need to install [soundstretch/soundtouch](https://www.surina.net/soundtouch/soundstretch.html): on mac osx you can do `brew install sound-touch`,\nand on ubuntu `sudo apt-get install soundstretch`. this is used for the\npitch/tempo augmentation.\n\n\n### running in docker\n\nthanks to @xserrat, there is now a docker image definition ready for using demucs. this can ensure all libraries are correctly installed without interfering with the host os. see his repo [docker facebook demucs](https://github.com/xserrat/docker-facebook-demucs) for more information.\n\n\n### running from colab\n\ni made a colab to easily separate track with demucs. note that\ntransfer speeds with colab are a bit slow for large media files,\nbut it will allow you to use demucs without installing anything.\n\n[demucs on google colab](https://colab.research.google.com/drive/1dc9nvxk3v_vpjuadsnfu8eit-xnu1tgh?usp=sharing)\n\n### web demo\n\nintegrated to [hugging face spaces](https://huggingface.co/spaces) with [gradio](https://github.com/gradio-app/gradio). see demo: [![hugging face spaces](https://img.shields.io/badge/%f0%9f%a4%97%20hugging%20face-spaces-blue)](https://huggingface.co/spaces/akhaliq/demucs)\n\n### graphical interface\n\n@carlgao4 has released a gui for demucs: [carlgao4/demucs-gui](https://github.com/carlgao4/demucs-gui). downloads for windows and macos is available [here](https://github.com/carlgao4/demucs-gui/releases). use [fosshub mirror](https://fosshub.com/demucs-gui.html) to speed up your download.\n\n@anjok07 is providing a self contained gui in [uvr (ultimate vocal remover)](https://github.com/facebookresearch/demucs/issues/334) that supports demucs.\n\n### other providers\n\naudiostrip is providing free online separation with demucs on their website [https://audiostrip.co.uk/](https://audiostrip.co.uk/).\n\n[mvsep](https://mvsep.com/) also provides free online separation, select `demucs3 model b` for the best quality.\n\n[neutone](https://neutone.space/) provides a realtime demucs model in their free vst/au plugin that can be used in your favorite daw.\n\n\n## separating tracks\n\nin order to try demucs, you can just run from any folder (as long as you properly installed it)\n\n```bash\ndemucs path_to_audio_file_1 [path_to_audio_file_2 ...]   # for demucs\n# if you used `pip install --user` you might need to replace demucs with python3 -m demucs\npython3 -m demucs --mp3 --mp3-bitrate bitrate path_to_audio_file_1  # output files saved as mp3\n        # use --mp3-preset to change encoder preset, 2 for best quality, 7 for fastest\n# if your filename contain spaces don't forget to quote it !!!\ndemucs \"my music/my favorite track.mp3\"\n# you can select different models with `-n` mdx_q is the quantized model, smaller but maybe a bit less accurate.\ndemucs -n mdx_q myfile.mp3\n# if you only want to separate vocals out of an audio, use `--two-stems=vocals` (you can also set to drums or bass)\ndemucs --two-stems=vocals myfile.mp3\n```\n\n\nif you have a gpu, but you run out of memory, please use `--segment segment` to reduce length of each split. `segment` should be changed to a integer. personally recommend not less than 10 (the bigger the number is, the more memory is required, but quality may increase). create an environment variable `pytorch_no_cuda_memory_caching=1` is also helpful. if this still cannot help, please add `-d cpu` to the command line. see the section hereafter for more details on the memory requirements for gpu acceleration.\n\nseparated tracks are stored in the `separated/model_name/track_name` folder. there you will find four stereo wav files sampled at 44.1 khz: `drums.wav`, `bass.wav`,\n`other.wav`, `vocals.wav` (or `.mp3` if you used the `--mp3` option).\n\nall audio formats supported by `torchaudio` can be processed (i.e. wav, mp3, flac, ogg/vorbis on linux/mac os x etc.). on windows, `torchaudio` has limited support, so we rely on `ffmpeg`, which should support pretty much anything.\naudio is resampled on the fly if necessary.\nthe output will be a wave file encoded as int16.\nyou can save as float32 wav files with `--float32`, or 24 bits integer wav with `--int24`.\nyou can pass `--mp3` to save as mp3 instead, and set the bitrate with `--mp3-bitrate` (default is 320kbps).\n\nit can happen that the output would need clipping, in particular due to some separation artifacts.\ndemucs will automatically rescale each output stem so as to avoid clipping. this can however break\nthe relative volume between stems. if instead you prefer hard clipping, pass `--clip-mode clamp`.\nyou can also try to reduce the volume of the input mixture before feeding it to demucs.\n\n\nother pre-trained models can be selected with the `-n` flag.\nthe list of pre-trained models is:\n- `htdemucs`: first version of hybrid transformer demucs. trained on musdb + 800 songs. default model.\n- `htdemucs_ft`: fine-tuned version of `htdemucs`, separation will take 4 times more time\n    but might be a bit better. same training set as `htdemucs`.\n- `htdemucs_6s`: 6 sources version of `htdemucs`, with `piano` and `guitar` being added as sources.\n    note that the `piano` source is not working great at the moment.\n- `hdemucs_mmi`: hybrid demucs v3, retrained on musdb + 800 songs.\n- `mdx`: trained only on musdb hq, winning model on track a at the [mdx][mdx] challenge.\n- `mdx_extra`: trained with extra training data (**including musdb test set**), ranked 2nd on the track b\n    of the [mdx][mdx] challenge.\n- `mdx_q`, `mdx_extra_q`: quantized version of the previous models. smaller download and storage\n    but quality can be slightly worse.\n- `sig`: where `sig` is a single model from the [model zoo](docs/training.md#model-zoo).\n\nthe `--two-stems=vocals` option allows to separate vocals from the rest (e.g. karaoke mode).\n`vocals` can be changed into any source in the selected model.\nthis will mix the files after separating the mix fully, so this won't be faster or use less memory.\n\nthe `--shifts=shifts` performs multiple predictions with random shifts (a.k.a the *shift trick*) of the input and average them. this makes prediction `shifts` times\nslower. don't use it unless you have a gpu.\n\nthe `--overlap` option controls the amount of overlap between prediction windows. default is 0.25 (i.e. 25%) which is probably fine.\nit can probably be reduced to 0.1 to improve a bit speed.\n\n\nthe `-j` flag allow to specify a number of parallel jobs (e.g. `demucs -j 2 myfile.mp3`).\nthis will multiply by the same amount the ram used so be careful!\n\n### memory requirements for gpu acceleration\n\nif you want to use gpu acceleration, you will need at least 3gb of ram on your gpu for `demucs`. however, about 7gb of ram will be required if you use the default arguments. add `--segment segment` to change size of each split. if you only have 3gb memory, set segment to 8 (though quality may be worse if this argument is too small). creating an environment variable `pytorch_no_cuda_memory_caching=1` can help users with even smaller ram such as 2gb (i separated a track that is 4 minutes but only 1.5gb is used), but this would make the separation slower.\n\nif you do not have enough memory on your gpu, simply add `-d cpu` to the command line to use the cpu. with demucs, processing time should be roughly equal to 1.5 times the duration of the track.\n\n## calling from another python program\n\nthe main function provides a `opt` parameter as a simple api. you can just pass the parsed command line as this parameter: \n```python\n# assume that your command is `demucs --mp3 --two-stems vocals -n mdx_extra \"track with space.mp3\"`\n# the following codes are same as the command above:\nimport demucs.separate\ndemucs.separate.main([\"--mp3\", \"--two-stems\", \"vocals\", \"-n\", \"mdx_extra\", \"track with space.mp3\"])\n\n# or like this\nimport demucs.separate\nimport shlex\ndemucs.separate.main(shlex.split('--mp3 --two-stems vocals -n mdx_extra \"track with space.mp3\"'))\n```\n\n## training demucs\n\nif you want to train (hybrid) demucs, please follow the [training doc](docs/training.md).\n\n## mdx challenge reproduction\n\nin order to reproduce the results from the track a and track b submissions, checkout the [mdx hybrid demucs submission repo][mdx_submission].\n\n\n\n## how to cite\n\n```\n@inproceedings{rouard2022hybrid,\n  title={hybrid transformers for music source separation},\n  author={rouard, simon and massa, francisco and d{\\'e}fossez, alexandre},\n  booktitle={icassp 23},\n  year={2023}\n}\n\n@inproceedings{defossez2021hybrid,\n  title={hybrid spectrogram and waveform source separation},\n  author={d{\\'e}fossez, alexandre},\n  booktitle={proceedings of the ismir 2021 workshop on music source separation},\n  year={2021}\n}\n```\n\n## license\n\ndemucs is released under the mit license as found in the [license](license) file.\n\n[hybrid_paper]: https://arxiv.org/abs/2111.03600\n[waveunet]: https://github.com/f90/wave-u-net\n[musdb]: https://sigsep.github.io/datasets/musdb.html\n[openunmix]: https://github.com/sigsep/open-unmix-pytorch\n[mmdenselstm]: https://arxiv.org/abs/1805.02410\n[demucs_v2]: https://github.com/facebookresearch/demucs/tree/v2\n[demucs_v3]: https://github.com/facebookresearch/demucs/tree/v3\n[spleeter]: https://github.com/deezer/spleeter\n[soundcloud]: https://soundcloud.com/honualx/sets/source-separation-in-the-waveform-domain\n[d3net]: https://arxiv.org/abs/2010.01733\n[mdx]: https://www.aicrowd.com/challenges/music-demixing-challenge-ismir-2021\n[kuielab]: https://github.com/kuielab/mdx-net-submission\n[decouple]: https://arxiv.org/abs/2109.05418\n[mdx_submission]: https://github.com/adefossez/mdx21_demucs\n[bandsplit]: https://arxiv.org/abs/2209.15174\n[htdemucs]: https://arxiv.org/abs/2211.08553",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "demucs",
  "package_url": "https://pypi.org/project/demucs/",
  "project_url": "https://pypi.org/project/demucs/",
  "project_urls": {
    "Homepage": "https://github.com/facebookresearch/demucs"
  },
  "release_url": "https://pypi.org/project/demucs/4.0.1/",
  "requires_dist": [],
  "requires_python": ">=3.8.0",
  "summary": "music source separation in the waveform domain.",
  "version": "4.0.1",
  "releases": [],
  "developers": [
    "defossez@fb.com"
  ],
  "kwds": "demucs3 demucs_v3 hybrid_demucs_tutorial demucs_v2 demucs",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_demucs",
  "homepage": "https://github.com/facebookresearch/demucs",
  "release_count": 16,
  "dependency_ids": []
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: games/entertainment",
    "topic :: software development :: libraries",
    "topic :: software development :: user interfaces"
  ],
  "description": "******************************************************\n``glooey`` \u2014 an object-oriented gui library for pyglet\n******************************************************\n\nevery game needs a user interface that matches its look and feel.  the purpose \nof ``glooey`` is to help you make such an interface.  towards this end, \n``glooey`` provides 7 powerful placement widgets, a label widget, an image \nwidget, 3 different button widgets, a text entry widget, a variety of scroll \nboxes and bars, 4 different dialog box widgets, and a variety of other \nmiscellaneous widgets.  the appearance of any widget can be trivially \ncustomized, and ``glooey`` comes with built-in fantasy, puzzle, and 8-bit \nthemes to prove it (and to help you hit the ground running if your game fits \none of those genres).  \n\nthe philosophy behind ``glooey`` is that deriving subclasses from a basic set \nof widgets with no default style is the most elegant way to control how widgets \nlook.  this approach is flexible because subclasses can customize or override \nmost aspects of the basic widgets.  but it's also surprisingly succinct and \npowerful: specifying a style is usually as simple as setting a class variable, \nand styles can be easily composed using either inner classes or previously \ndefined widgets.  this philosophy makes ``glooey`` easy to get started with, \nand powerful enough to support even the most complicated games.  \n\n.. image:: https://img.shields.io/pypi/v/glooey.svg\n   :target: https://pypi.python.org/pypi/glooey\n.. image:: https://img.shields.io/pypi/pyversions/glooey.svg\n   :target: https://pypi.python.org/pypi/glooey\n.. image:: https://img.shields.io/github/workflow/status/kxgames/glooey/test%20and%20release/master\n   :target: https://github.com/kxgames/glooey/actions\n.. image:: https://img.shields.io/readthedocs/glooey.svg\n   :target: https://glooey.readthedocs.io/en/latest/?badge=latest\n\na quick example\n===============\nthe `documentation <https://glooey.readthedocs.io/en/latest/>`_ thoroughly explains what ``glooey`` can do and how to use it, \nbut here's a quick example to give a feel for what it looks like in action::\n\n   $ pip3 install glooey\n\n.. code-block:: python\n\n   #!/usr/bin/env python3\n\n   import pyglet\n   import glooey\n\n   # define a custom style for text.  we'll inherit the ability to render text \n   # from the label widget provided by glooey, and we'll define some class \n   # variables to customize the text style.\n\n   class mylabel(glooey.label):\n       custom_color = '#babdb6'\n       custom_font_size = 10\n       custom_alignment = 'center'\n\n   # if we want another kind of text, for example a bigger font for section \n   # titles, we just have to derive another class:\n\n   class mytitle(glooey.label):\n       custom_color = '#eeeeec'\n       custom_font_size = 12\n       custom_alignment = 'center'\n       custom_bold = true\n\n   # it's also common to style a widget with existing widgets or with new \n   # widgets made just for that purpose.  the button widget is a good example.  \n   # you can give it a foreground subclass (like mylabel from above) to tell it \n   # how to style text, and background subclasses to tell it how to style the\n   # different mouse rollover states:\n\n   class mybutton(glooey.button):\n       foreground = mylabel\n       custom_alignment = 'fill'\n\n       # more often you'd specify images for the different rollover states, but \n       # we're just using colors here so you won't have to download any files \n       # if you want to run this code.\n\n       class base(glooey.background):\n           custom_color = '#204a87'\n\n       class over(glooey.background):\n           custom_color = '#3465a4'\n\n       class down(glooey.background):\n           custom_color = '#729fcff'\n\n       # beyond just setting class variables in our widget subclasses, we can \n       # also implement new functionality.  here we just print a programmed \n       # response when the button is clicked.\n\n       def __init__(self, text, response):\n           super().__init__(text)\n           self.response = response\n\n       def on_click(self, widget):\n           print(self.response)\n\n   # use pyglet to create a window as usual.\n\n   window = pyglet.window.window()\n\n   # create a gui object, which will manage the whole widget hierarchy and \n   # interact with pyglet to handle events.\n\n   gui = glooey.gui(window)\n\n   # create a vbox container, which will arrange any widgets we give it into a \n   # vertical column.  center-align it, otherwise the column will take up the \n   # full height of the window and put too much space between our widgets.\n\n   vbox = glooey.vbox()\n   vbox.alignment = 'center'\n\n   # create a widget to pose a question to the user using the \"title\" text \n   # style,  then add it to the top of the vbox.\n\n   title = mytitle(\"what...is your favorite color?\")\n   vbox.add(title)\n\n   # create several buttons with different answers to the above question, then \n   # add each one to the vbox in turn.\n\n   buttons = [\n          mybutton(\"blue.\", \"right, off you go.\"),\n          mybutton(\"blue. no yel--\", \"auuuuuuuugh!\"),\n          mybutton(\"i don't know that!\", \"auuuuuuuugh!\"),\n   ]\n   for button in buttons:\n      vbox.add(button)\n\n   # finally, add the vbox to the gui.  it's always best to make this the last \n   # step, because once a widget is attached to the gui, updating it or any of \n   # its children becomes much more expensive.\n\n   gui.add(vbox)\n\n   # run pyglet's event loop as usual.\n\n   pyglet.app.run()\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "glooey",
  "package_url": "https://pypi.org/project/glooey/",
  "project_url": "https://pypi.org/project/glooey/",
  "project_urls": {
    "Bug Tracker": "https://github.com/kxgames/glooey/issues",
    "Continuous Integration": "https://github.com/kxgames/glooey/actions",
    "Documentation": "https://glooey.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/kxgames/glooey",
    "Test Coverage": "https://coveralls.io/github/kxgames/glooey",
    "Version Control": "https://github.com/kxgames/glooey"
  },
  "release_url": "https://pypi.org/project/glooey/0.3.6/",
  "requires_dist": [
    "pyglet",
    "more_itertools",
    "vecrec",
    "autoprop",
    "pyyaml",
    "sphinx>=3.1 ; extra == \"docs\"",
    "sphinx_rtd_theme ; extra == \"docs\"",
    "autoclasstoc ; extra == \"docs\"",
    "pytest ; extra == \"tests\"",
    "pytest-cov ; extra == \"tests\"",
    "coveralls ; extra == \"tests\""
  ],
  "requires_python": "~=3.6",
  "summary": "an object-oriented gui library for pyglet.",
  "version": "0.3.6",
  "releases": [],
  "developers": [
    "kale@thekunderts.net",
    "kale_kundert"
  ],
  "kwds": "glooey pyglet widgets widget python3",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_glooey",
  "homepage": "https://github.com/kxgames/glooey",
  "release_count": 13,
  "dependency_ids": [
    "pypi_autoclasstoc",
    "pypi_autoprop",
    "pypi_coveralls",
    "pypi_more_itertools",
    "pypi_pyglet",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pyyaml",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_vecrec"
  ]
}
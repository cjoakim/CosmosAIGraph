{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "codespell\n=========\n\nfix common misspellings in text files. it's designed primarily for checking\nmisspelled words in source code (backslash escapes are skipped), but it can be used with other files as well.\nit does not check for word membership in a complete dictionary, but instead\nlooks for a set of common misspellings. therefore it should catch errors like\n\"adn\", but it will not catch \"adnasdfasdf\". this also means it shouldn't\ngenerate false-positives when you use a niche term it doesn't know about.\n\nuseful links\n------------\n\n* `github project <https://github.com/codespell-project/codespell>`_\n\n* `repository <https://github.com/codespell-project/codespell>`_\n\n* `releases <https://github.com/codespell-project/codespell/releases>`_\n\nrequirements\n------------\n\npython 3.8 or above.\n\ninstallation\n------------\n\nyou can use ``pip`` to install codespell with e.g.:\n\n.. code-block:: sh\n\n    pip install codespell\n\nusage\n-----\n\nbelow are some simple usage examples to demonstrate how the tool works.\nfor exhaustive usage information, please check the output of ``codespell -h``.\n\nrun codespell in all files of the current directory:\n\n.. code-block:: sh\n\n    codespell\n\nrun codespell in specific files or directories (specified via their names or glob patterns):\n\n.. code-block:: sh\n\n    codespell some_file some_dir/ *.ext\n\nsome noteworthy flags:\n\n.. code-block:: sh\n\n    codespell -w, --write-changes\n\nthe ``-w`` flag will actually implement the changes recommended by codespell. running without the ``-w`` flag is the same as doing a dry run. it is recommended to run this with the ``-i`` or ``--interactive`` flag.\n\n.. code-block:: sh\n\n    codespell -i file, --ignore-words=file\n\nthe ``-i`` flag can be used for a list of certain words to allow that are in the codespell dictionaries. the format of the file is one word per line. invoke using: ``codespell -i path/to/file.txt`` to execute codespell referencing said list of allowed words. see `ignoring words`_ for more details.\n\n.. code-block:: sh\n\n    codespell -l word1,word2,word3,word4\n\nthe ``-l`` flag can be used to allow certain words that are comma-separated placed immediately after it.  see `ignoring words`_ for more details.\n\n.. code-block:: sh\n\n    codespell -x file, --exclude-file=file\n\nignore whole lines that match those in ``file``.  the lines in ``file`` should match the to-be-excluded lines exactly.\n\n.. code-block:: sh\n\n    codespell -s, --skip=\n\ncomma-separated list of files to skip. it accepts globs as well.  examples:\n\n* to skip .eps & .txt files, invoke ``codespell --skip=\"*.eps,*.txt\"``\n\n* to skip directories, invoke ``codespell --skip=\"./src/3rd-party,./src/test\"``\n\n\nuseful commands:\n\n.. code-block:: sh\n\n    codespell -d -q 3 --skip=\"*.po,*.ts,./src/3rdparty,./src/test\"\n\nlist all typos found except translation files and some directories.\ndisplay them without terminal colors and with a quiet level of 3.\n\n.. code-block:: sh\n\n    codespell -i 3 -w\n\nrun interactive mode level 3 and write changes to file.\n\nwe ship a collection of dictionaries that are an improved version of the one available\n`on wikipedia <https://en.wikipedia.org/wiki/wikipedia:lists_of_common_misspellings/for_machines>`_\nafter applying them in projects like linux kernel, efl, ofono among others.\nyou can provide your own version of the dictionary, but patches for\nnew/different entries are very welcome.\n\nwant to know if a word you're proposing exists in codespell already? it is possible to test a word against the current set dictionaries that exist in ``codespell_lib/data/dictionary*.txt`` via:\n\n.. code-block:: sh\n\n    echo \"word\" | codespell -\n    echo \"1stword,2ndword\" | codespell -\n\nyou can select the optional dictionaries with the ``--builtin`` option.\n\nignoring words\n--------------\n\nwhen ignoring false positives, note that spelling errors are *case-insensitive* but words to ignore are *case-sensitive*. for example, the dictionary entry ``wrod`` will also match the typo ``wrod``, but to ignore it you must pass ``wrod``.\n\nthe words to ignore can be passed in two ways:\n\n1. ``-i``: a file with a word per line to ignore:\n\n   .. code-block:: sh\n\n       codespell -i file, --ignore-words=file\n\n2. ``-l``: a comma separated list of words to ignore on the command line:\n\n   .. code-block:: sh\n\n       codespell -l word1,word2,word3,word4\n\nusing a config file\n-------------------\n\ncommand line options can also be specified in a config file.\n\nwhen running ``codespell``, it will check in the current directory for a file\nnamed ``setup.cfg`` or ``.codespellrc`` (or a file specified via ``--config``),\ncontaining an entry named ``[codespell]``. each command line argument can\nbe specified in this file (without the preceding dashes), for example:\n\n.. code-block:: ini\n\n    [codespell]\n    skip = *.po,*.ts,./src/3rdparty,./src/test\n    count =\n    quiet-level = 3\n\ncodespell will also check in the current directory for a ``pyproject.toml``\n(or a path can be specified via ``--toml <filename>``) file, and the\n``[tool.codespell]`` entry will be used, but only if the tomli_ package\nis installed for versions of python prior to 3.11. for example:\n\n.. code-block:: toml\n\n    [tool.codespell]\n    skip = '*.po,*.ts,./src/3rdparty,./src/test'\n    count = ''\n    quiet-level = 3\n\nthese are both equivalent to running:\n\n.. code-block:: sh\n\n    codespell --quiet-level 3 --count --skip \"*.po,*.ts,./src/3rdparty,./src/test\"\n\nif several config files are present, they are read in the following order:\n\n#. ``pyproject.toml`` (only if the ``tomli`` library is available)\n#. ``setup.cfg``\n#. ``.codespellrc``\n#. any additional file supplied via ``--config``\n\nif a codespell configuration is supplied in several of these files,\nthe configuration from the most recently read file overwrites previously\nspecified configurations.\n\nany options specified in the command line will *override* options from the\nconfig files.\n\n.. _tomli: https://pypi.org/project/tomli/\n\n`pre-commit <https://pre-commit.com/>`_ hook\n--------------------------------------------\n\ncodespell also works with `pre-commit`, using\n\n.. code-block:: yaml\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.2.4\n    hooks:\n    - id: codespell\n\nif one configures codespell using the `pyproject.toml` file instead use:\n\n.. code-block:: yaml\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.2.4\n    hooks:\n    - id: codespell\n      additional_dependencies:\n        - tomli\n\ndictionary format\n-----------------\n\nthe format of the dictionaries was influenced by the one they originally came from,\ni.e. from wikipedia. the difference is how multiple options are treated and\nthat the last argument is an optional reason why a certain entry could not be\napplied directly, but should instead be manually inspected. e.g.:\n\n1. simple entry: one wrong word / one suggestion::\n\n        calulated->calculated\n\n2. entry with more than one suggested fix::\n\n       fiel->feel, field, file, phial,\n\n   note the last comma! you need to use it, otherwise the last suggestion\n   will be discarded (see below for why). when there is more than one\n   suggestion, an automatic fix is not possible and the best we can do is\n   to give the user the file and line where the error occurred as well as\n   the suggestions.\n\n3. entry with one word, but with automatic fix disabled::\n\n       clas->class, disabled because of name clash in c++\n\n   note that there isn't a comma at the end of the line. the last argument is\n   treated as the reason why a suggestion cannot be automatically applied.\n\n   there can also be multiple suggestions but any automatic fix will again be\n   disabled::\n\n       clas->class, clash, disabled because of name clash in c++\n\ndevelopment setup\n-----------------\n\nas suggested in the `python packaging user guide`_, ensure ``pip``, ``setuptools``, and ``wheel`` are up to date before installing from source. specifically you will need recent versions of ``setuptools`` and ``setuptools_scm``:\n\n.. code-block:: sh\n\n    pip install --upgrade pip setuptools setuptools_scm wheel\n\nyou can install required dependencies for development by running the following within a checkout of the codespell source:\n\n.. code-block:: sh\n\n       pip install -e \".[dev]\"\n\nto run tests against the codebase run:\n\n.. code-block:: sh\n\n       make check\n\n.. _python packaging user guide: https://packaging.python.org/en/latest/tutorials/installing-packages/#requirements-for-installing-packages\n\nsending pull requests\n---------------------\n\nif you have a suggested typo that you'd like to see merged please follow these steps:\n\n1. make sure you read the instructions mentioned in the ``dictionary format`` section above to submit correctly formatted entries.\n\n2. choose the correct dictionary file to add your typo to. see `codespell --help` for explanations of the different dictionaries.\n\n3. sort the dictionaries. this is done by invoking (in the top level directory of ``codespell/``):\n\n   .. code-block:: sh\n\n       make check-dictionaries\n\n   if the make script finds that you need to sort a dictionary, please then run:\n\n   .. code-block:: sh\n\n       make sort-dictionaries\n\n4. only after this process is complete do we recommend you submit the pr.\n\n**important notes:**\n\n* if the dictionaries are submitted without being pre-sorted the pr will fail via our various ci tools.\n* not all prs will be merged. this is pending on the discretion of the devs, maintainers, and the community.\n\nupdating\n--------\n\nto stay current with codespell developments it is possible to build codespell from github via:\n\n.. code-block:: sh\n\n    pip install --upgrade git+https://github.com/codespell-project/codespell.git\n\n**important notes:**\n\n* sometimes installing via ``pip`` will complain about permissions. if this is the case then run with:\n\n  .. code-block:: sh\n\n      pip install --user --upgrade git+https://github.com/codespell-project/codespell.git\n\n* it has been reported that after installing from ``pip``, codespell can't be located. please check the $path variable to see if ``~/.local/bin`` is present. if it isn't then add it to your path.\n* if you decide to install via ``pip`` then be sure to remove any previously installed versions of codespell (via your platform's preferred app manager).\n\nupdating the dictionaries\n-------------------------\n\nin the scenario where the user prefers not to follow the development version of codespell yet still opts to benefit from the frequently updated dictionary files, we recommend running a simple set of commands to achieve this:\n\n.. code-block:: sh\n\n    wget https://raw.githubusercontent.com/codespell-project/codespell/master/codespell_lib/data/dictionary.txt\n    codespell -d dictionary.txt\n\nthe above simply downloads the latest ``dictionary.txt`` file and then by utilizing the ``-d`` flag allows the user to specify the freshly downloaded ``dictionary.txt`` as the custom dictionary instead of the default one.\n\nyou can also do the same thing for the other dictionaries listed here:\n    https://github.com/codespell-project/codespell/tree/master/codespell_lib/data\n\nlicense\n-------\n\nthe python script ``codespell`` with its library ``codespell_lib`` is available\nwith the following terms:\n(*tl;dr*: `gpl v2`_)\n\n   copyright (c) 2010-2011  lucas de marchi <lucas.de.marchi@gmail.com>\n\n   copyright (c) 2011  profusion embedded systems\n\n   this program is free software; you can redistribute it and/or modify\n   it under the terms of the gnu general public license as published by\n   the free software foundation; version 2 of the license.\n\n   this program is distributed in the hope that it will be useful,\n   but without any warranty; without even the implied warranty of\n   merchantability or fitness for a particular purpose.  see the\n   gnu general public license for more details.\n\n   you should have received a copy of the gnu general public license\n   along with this program; if not, see\n   <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.\n\n.. _gpl v2: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n\n``dictionary.txt`` and the other ``dictionary_*.txt`` files are derivative works of english wikipedia and are released under the `creative commons attribution-share-alike license 3.0 <https://creativecommons.org/licenses/by-sa/3.0/>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "gpl v2",
  "name": "codespell",
  "package_url": "https://pypi.org/project/codespell/",
  "project_url": "https://pypi.org/project/codespell/",
  "project_urls": {
    "homepage": "https://github.com/codespell-project/codespell",
    "repository": "https://github.com/codespell-project/codespell"
  },
  "release_url": "https://pypi.org/project/codespell/2.2.6/",
  "requires_dist": [
    "build ; extra == 'dev'",
    "chardet ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-dependency ; extra == 'dev'",
    "Pygments ; extra == 'dev'",
    "ruff ; extra == 'dev'",
    "tomli ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "chardet ; extra == 'hard-encoding-detection'",
    "tomli ; (python_version < \"3.11\") and extra == 'toml'",
    "chardet >=5.1.0 ; extra == 'types'",
    "mypy ; extra == 'types'",
    "pytest ; extra == 'types'",
    "pytest-cov ; extra == 'types'",
    "pytest-dependency ; extra == 'types'"
  ],
  "requires_python": ">=3.8",
  "summary": "codespell",
  "version": "2.2.6",
  "releases": [],
  "developers": [
    "lucas.de.marchi@gmail.com"
  ],
  "kwds": "codespell_lib codespellrc codespell lists_of_common_misspellings misspellings",
  "license_kwds": "gpl v2",
  "libtype": "pypi",
  "id": "pypi_codespell",
  "homepage": "",
  "release_count": 21,
  "dependency_ids": [
    "pypi_build",
    "pypi_chardet",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_dependency",
    "pypi_ruff",
    "pypi_tomli",
    "pypi_twine"
  ]
}
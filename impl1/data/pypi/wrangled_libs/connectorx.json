{
  "classifiers": [],
  "description": "# connectorx [![status][ci_badge]][ci_page] [![discussions][discussion_badge]][discussion_page] [![downloads][download_badge]][download_page]\n\n[ci_badge]: https://github.com/sfu-db/connector-x/workflows/ci/badge.svg\n[ci_page]: https://github.com/sfu-db/connector-x/actions\n[discussion_badge]: https://img.shields.io/badge/forum-github%20discussions-blue\n[discussion_page]: https://github.com/sfu-db/connector-x/discussions\n[download_badge]: https://pepy.tech/badge/connectorx\n[download_page]: https://pepy.tech/project/connectorx\n\nload data from <img src=\"https://raw.githubusercontent.com/sfu-db/connector-x/main/assets/sources.gif\" width=\"6.5%\" style=\"margin-bottom: -2px\"/> to <img src=\"https://raw.githubusercontent.com/sfu-db/connector-x/main/assets/destinations.gif\" width=\"7%\" style=\"margin-bottom: -2px\"/>, the fastest way.\n\nconnectorx enables you to load data from databases into python in the fastest and most memory efficient way.\n\nwhat you need is one line of code:\n\n```python\nimport connectorx as cx\n\ncx.read_sql(\"postgresql://username:password@server:port/database\", \"select * from lineitem\")\n```\n\noptionally, you can accelerate the data loading using parallelism by specifying a partition column.\n\n```python\nimport connectorx as cx\n\ncx.read_sql(\"postgresql://username:password@server:port/database\", \"select * from lineitem\", partition_on=\"l_orderkey\", partition_num=10)\n```\n\nthe function will partition the query by **evenly** splitting the specified column to the amount of partitions.\nconnectorx will assign one thread for each partition to load and write data in parallel.\ncurrently, we support partitioning on **numerical** columns (**cannot contain null**) for **spja** queries. \n\n**experimental: we are now providing federated query support (postgresql only and do not support partition for now), you can write a single query to join tables from two or more databases! (jre >= 1.8 is required)**\n\n```python\nimport connectorx as cx\n\ndb1 = \"postgresql://username1:password1@server1:port1/database1\"\ndb2 = \"postgresql://username2:password2@server2:port2/database2\"\n\ncx.read_sql({\"db1\": db1, \"db2\": db2}, \"select * from db1.nation n, db2.region r where n.n_regionkey = r.r_regionkey\")\n```\n\ncheck out more detailed usage and examples [here](https://sfu-db.github.io/connector-x/api.html). a general introduction of the project can be found in this [blog post](https://towardsdatascience.com/connectorx-the-fastest-way-to-load-data-from-databases-a65d4d4062d5).\n\n# installation\n\n```bash\npip install connectorx\n```\n\ncheck out [here](https://sfu-db.github.io/connector-x/install.html#build-from-source-code) to see how to build python wheel from source.\n\n# performance\n\nwe compared different solutions in python that provides the `read_sql` function, by loading a 10x tpc-h lineitem table (8.6gb) from postgres into a dataframe, with 4 cores parallelism.\n\n## time chart, lower is better.\n\n<p align=\"center\"><img alt=\"time chart\" src=\"https://raw.githubusercontent.com/sfu-db/connector-x/main/assets/pg-time.png\"/></p>\n\n## memory consumption chart, lower is better.\n\n<p align=\"center\"><img alt=\"memory chart\" src=\"https://raw.githubusercontent.com/sfu-db/connector-x/main/assets/pg-mem.png\"/></p>\n\nin conclusion, connectorx uses up to **3x** less memory and **21x** less time (**3x** less memory and **13x** less time compared with pandas.). more on [here](https://github.com/sfu-db/connector-x/blob/main/benchmark.md#benchmark-result-on-aws-r54xlarge).\n\n## how does connectorx achieve a lightning speed while keeping the memory footprint low?\n\nwe observe that existing solutions more or less do data copy multiple times when downloading the data.\nadditionally, implementing a data intensive application in python brings additional cost.\n\nconnectorx is written in rust and follows \"zero-copy\" principle.\nthis allows it to make full use of the cpu by becoming cache and branch predictor friendly. moreover, the architecture of connectorx ensures the data will be copied exactly once, directly from the source to the destination.\n\n## how does connectorx download the data?\n\nupon receiving the query, e.g. `select * from lineitem`, connectorx will first issue a `limit 1` query `select * from lineitem limit 1` to get the schema of the result set.\n\nthen, if `partition_on` is specified, connectorx will issue `select min($partition_on), max($partition_on) from (select * from lineitem)` to know the range of the partition column.\nafter that, the original query is split into partitions based on the min/max information, e.g. `select * from (select * from lineitem) where $partition_on > 0 and $partition_on < 10000`.\nconnectorx will then run a count query to get the partition size (e.g. `select count(*) from (select * from lineitem) where $partition_on > 0 and $partition_on < 10000`). if the partition\nis not specified, the count query will be `select count(*) from (select * from lineitem)`.\n\nfinally, connectorx will use the schema info as well as the count info to allocate memory and download data by executing the queries normally.\n\nonce the downloading begins, there will be one thread for each partition so that the data are downloaded in parallel at the partition level. the thread will issue the query of the corresponding\npartition to the database and then write the returned data to the destination row-wise or column-wise (depends on the database) in a streaming fashion. \n\n\n# supported sources & destinations\n\nexample connection string, supported protocols and data types for each data source can be found [here](https://sfu-db.github.io/connector-x/databases.html).\n\nfor more planned data sources, please check out our [discussion](https://github.com/sfu-db/connector-x/discussions/61).\n\n## sources\n- [x] postgres\n- [x] mysql\n- [x] mariadb (through mysql protocol)\n- [x] sqlite\n- [x] redshift (through postgres protocol)\n- [x] clickhouse (through mysql protocol)\n- [x] sql server\n- [x] azure sql database (through mssql protocol)\n- [x] oracle\n- [x] big query\n- [ ] odbc (wip)\n- [ ] ...\n\n## destinations\n- [x] pandas\n- [x] pyarrow\n- [x] modin (through pandas)\n- [x] dask (through pandas)\n- [x] polars (through pyarrow)\n\n# documentation\n\ndoc: https://sfu-db.github.io/connector-x/intro.html\nrust docs: [stable](https://docs.rs/connectorx) [nightly](https://sfu-db.github.io/connector-x/connectorx/)\n\n# next plan\n\ncheckout our [discussion][discussion_page] to participate in deciding our next plan!\n\n# historical benchmark results\n\nhttps://sfu-db.github.io/connector-x/dev/bench/\n\n# developer's guide\nplease see [developer's guide](https://github.com/sfu-db/connector-x/blob/main/contributing.md) for information about developing connectorx.\n\n# supports\n\nyou are always welcomed to:\n1. ask questions & propose new ideas in our github [discussion][discussion_page].\n2. ask questions in stackoverflow. make sure to have #connectorx attached.\n\n# organizations and projects using connectorx\n\n[<img src=\"https://raw.githubusercontent.com/pola-rs/polars-static/master/logos/polars-logo-dark.svg\" height=\"60\" style=\"margin-bottom: -2px\"/>](https://github.com/pola-rs/polars)\n[<img src=\"https://raw.githubusercontent.com/sfu-db/dataprep/develop/assets/logo.png\" height=\"60\" style=\"margin-bottom: -2px\"/>](https://dataprep.ai/)\n[<img src=\"https://github.com/modin-project/modin/blob/3d6368edf311995ad231ec5342a51cd9e4e3dc20/docs/img/modin_ver2_hrz.png?raw=true\" height=\"60\" style=\"margin-bottom: -2px\"/>](https://modin.readthedocs.io)\n\nto add your project/organization here, reply our post [here](https://github.com/sfu-db/connector-x/discussions/146)\n\n# citing connectorx\n\nif you use connectorx, please consider citing the following paper:\n\nxiaoying wang, weiyuan wu, jinze wu, yizhou chen, nick zrymiak, changbo qu, lampros flokas, george chow, jiannan wang, tianzheng wang, eugene wu, qingqing zhou. [connectorx: accelerating data loading from databases to dataframes.](https://www.vldb.org/pvldb/vol15/p2994-wang.pdf) _vldb 2022_.\n\nbibtex entry:\n\n```bibtex\n@article{connectorx2022,\n  author    = {xiaoying wang and weiyuan wu and jinze wu and yizhou chen and nick zrymiak and changbo qu and lampros flokas and george chow and jiannan wang and tianzheng wang and eugene wu and qingqing zhou},\n  title     = {connectorx: accelerating data loading from databases to dataframes},\n  journal   = {proc. {vldb} endow.},\n  volume    = {15},\n  number    = {11},\n  pages     = {2994--3003},\n  year      = {2022},\n  url       = {https://www.vldb.org/pvldb/vol15/p2994-wang.pdf},\n}\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "connectorx",
  "package_url": "https://pypi.org/project/connectorx/",
  "project_url": "https://pypi.org/project/connectorx/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/connectorx/0.3.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "youngw@sfu.ca"
  ],
  "kwds": "download_badge discussion_badge connectorx connectorx2022 ci_badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_connectorx",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": []
}
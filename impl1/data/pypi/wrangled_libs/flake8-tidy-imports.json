{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "===================\nflake8-tidy-imports\n===================\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/flake8-tidy-imports/main.yml?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/flake8-tidy-imports/actions?workflow=ci\n\n.. image:: https://img.shields.io/pypi/v/flake8-tidy-imports.svg?style=for-the-badge\n   :target: https://pypi.org/project/flake8-tidy-imports/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\na `flake8 <https://flake8.readthedocs.io/en/latest/index.html>`_ plugin that helps you write tidier imports.\n\nrequirements\n============\n\npython 3.8 to 3.12 supported.\n\ninstallation\n============\n\nfirst, install with ``pip``:\n\n.. code-block:: sh\n\n     python -m pip install flake8-tidy-imports\n\nsecond, if you define flake8\u2019s ``select`` setting, add the ``i25`` prefix to it.\notherwise, the plugin should be active by default.\n\n----\n\n**linting a django project?**\ncheck out my book `boost your django dx <https://adamchainz.gumroad.com/l/byddx>`__ which covers flake8 and many other code quality tools.\n\n----\n\noptions\n=======\n\n``banned-modules``\n------------------\n\nconfig for rule i251 (below).\nshould contain a map where each line is a banned import string, followed by '=', then the message to use when encountering that import.\n\nthere is also a special directive to ban a preselected list of removed/moved modules between python 2 and python 3, recommending replacements from `six\n<https://pythonhosted.org/six/>`_ where possible.\nit can be turned on by adding ``{python2to3}`` to the list of ``banned-modules``.\n\nfor example in ``setup.cfg``:\n\n.. code-block:: ini\n\n    [flake8]\n    banned-modules =\n      mock = use unittest.mock.\n      {python2to3}\n\nnote that despite the name, you can ban imported objects too, since the syntax is the same.\nfor example:\n\n.. code-block:: ini\n\n    [flake8]\n    banned-modules =\n      decimal.decimal = use ints and floats only.\n\nentries containing ``*`` are treated as wildcards matching zero or more path components.\nfor example:\n\n* ``example.yellow.*`` matches ``example.yellow``, ``example.yellow.truck``, ``example.yellow.truck.driving`` etc.\n* ``example.*.truck`` matches ``example.truck``, ``example.yellow.truck``, ``example.red.truck``, ``example.big.red.truck``, etc.\n\n``ban-relative-imports``\n------------------------\n\ncontrols rule i252 (below). accepts two values:\n\n* ``parents`` - bans imports from parent modules (and grandparents, etc.), i.e. with more than one ``.``.\n* ``true`` - bans all relative imports.\n\nfor example:\n\n.. code-block:: ini\n\n    [flake8]\n    ban-relative-imports = parents\n\n(if you want to ban absolute imports, you can put your project's modules in ``banned-modules``.)\n\nrules\n=====\n\n**note:** before version 4.0.0, the rule codes were numbered 50 lower, e.g. i250 was i200.\nthey were changed in `issue #106 <https://github.com/adamchainz/flake8-tidy-imports/issues/106>`__ due to conflict with ``flake8-import-order``.\n\ni250: unnecessary import alias\n------------------------------\n\ncomplains about unnecessary import aliasing of three forms:\n\n* ``import foo as foo`` -> ``import foo``\n* ``import foo.bar as bar`` -> ``from foo import bar``\n* ``from foo import bar as bar`` -> ``from foo import bar``\n\nthe message includes the suggested rewrite (which may not *always* be correct), for example:\n\n.. code-block:: sh\n\n    $ flake8 file.py\n    file.py:1:1: i250 unnecessary import alias - rewrite as 'from foo import bar'.\n\nsuch aliases can be automatically fixed by ``isort`` if you activate its `remove_redundant_aliases option <https://pycqa.github.io/isort/docs/configuration/options/#remove-redundant-aliases>`__.\n\ni251: banned import ``<import>`` used.\n--------------------------------------\n\ncomplains about use of banned imports.\nby default there are no imports banned - you should configure them with ``banned-modules`` as described above in 'options'.\n\nthe message includes a user-defined part that comes from the configuration.\nfor example:\n\n.. code-block:: sh\n\n    $ flake8 file.py\n    file.py:1:1: i251 banned import 'mock' used - use unittest.mock instead.\n\ni252: relative imports <from parent modules> are banned.\n--------------------------------------------------------\n\ncomplains about use of relative imports:\n\n* ``from . import foo`` (sibling import)\n* ``from .bar import foo`` (sibling import)\n* ``from .. import foo`` (parent import)\n\ncontrolled by the ``ban-relative-imports`` configuration option.\n\nabsolute imports, or relative imports from siblings, are recommended by `pep8 <https://www.python.org/dev/peps/pep-0008/>`__:\n\n    absolute imports are recommended, as they are usually more readable and tend to be better behaved...\n\n    .. code-block:: python\n\n        import mypkg.sibling\n        from mypkg import sibling\n        from mypkg.sibling import example\n\n    however, explicit relative imports are an acceptable alternative to absolute imports...\n\n    .. code-block:: python\n\n        from . import sibling\n        from .sibling import example\n\nsee also\n--------\n\nfor more advanced control of imports in your project, try `import-linter <https://pypi.org/project/import-linter/>`__.\n",
  "docs_url": null,
  "keywords": "flake8_tidy_imports",
  "license": "mit",
  "name": "flake8-tidy-imports",
  "package_url": "https://pypi.org/project/flake8-tidy-imports/",
  "project_url": "https://pypi.org/project/flake8-tidy-imports/",
  "project_urls": {
    "Changelog": "https://github.com/adamchainz/flake8-tidy-imports/blob/main/CHANGELOG.rst",
    "Homepage": "https://github.com/adamchainz/flake8-tidy-imports",
    "Mastodon": "https://fosstodon.org/@adamchainz",
    "Twitter": "https://twitter.com/adamchainz"
  },
  "release_url": "https://pypi.org/project/flake8-tidy-imports/4.10.0/",
  "requires_dist": [
    "flake8 (>=3.8.0)"
  ],
  "requires_python": ">=3.8",
  "summary": "a flake8 plugin that helps you write tidier imports.",
  "version": "4.10.0",
  "releases": [],
  "developers": [
    "adam_johnson",
    "me@adamj.eu"
  ],
  "kwds": "flake8_tidy_imports flake8 badge tidy codes",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_tidy_imports",
  "homepage": "https://github.com/adamchainz/flake8-tidy-imports",
  "release_count": 25,
  "dependency_ids": [
    "pypi_flake8"
  ]
}
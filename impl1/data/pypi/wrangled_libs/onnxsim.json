{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "# onnx simplifier\n\n[![pypi version](https://img.shields.io/pypi/v/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![pypi license](https://img.shields.io/pypi/l/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![prs welcome](https://img.shields.io/badge/prs-welcome-brightgreen.svg)](https://github.com/daquexian/onnx-simplifier/pulls)\n\n_onnx is great, but sometimes too complicated._\n\n## background\n\none day i wanted to export the following simple reshape operation to onnx:\n\n```python\nimport torch\n\n\nclass justreshape(torch.nn.module):\n    def __init__(self):\n        super(justreshape, self).__init__()\n\n    def forward(self, x):\n        return x.view((x.shape[0], x.shape[1], x.shape[3], x.shape[2]))\n\n\nnet = justreshape()\nmodel_name = 'just_reshape.onnx'\ndummy_input = torch.randn(2, 3, 4, 5)\ntorch.onnx.export(net, dummy_input, model_name, input_names=['input'], output_names=['output'])\n```\n\nthe input shape in this model is static, so what i expected is\n\n![simple_reshape](imgs/simple_reshape.png)\n\nhowever, i got the following complicated model instead:\n\n![complicated_reshape](imgs/complicated_reshape.png)\n\n## our solution\n\nonnx simplifier is presented to simplify the onnx model. it infers the whole computation graph\nand then replaces the redundant operators with their constant outputs (a.k.a. constant folding).\n\n### web version\n\nwe have published onnx simplifier on [convertmodel.com](https://www.convertmodel.com/#input=onnx&output=onnx). it works out of the box and **doesn't need any installation**. note that it runs in the browser locally and your model is completely safe.\n\n### python version\n\n\n```\npip3 install -u pip && pip3 install onnxsim\n```\n\nthen\n\n```\nonnxsim input_onnx_model output_onnx_model\n```\n\nfor more advanced features, try the following command for help message\n\n```\nonnxsim -h\n```\n\n## demonstration\n\nan overall comparison between\n[a complicated model](https://github.com/jdai-cv/dnnlibrary/issues/17#issuecomment-455934190)\nand its simplified version:\n\n![comparison between old model and new model](imgs/comparison.png)\n\n## in-script workflow\n\nif you would like to embed onnx simplifier python package in another script, it is just that simple.\n\n```python\nimport onnx\nfrom onnxsim import simplify\n\n# load your predefined onnx model\nmodel = onnx.load(filename)\n\n# convert model\nmodel_simp, check = simplify(model)\n\nassert check, \"simplified onnx model could not be validated\"\n\n# use model_simp as a standard onnx model object\n```\n\nyou can see more details of the api in [onnxsim/onnx_simplifier.py](onnxsim/onnx_simplifier.py)\n\n## projects using onnx simplifier\n\n* [mxnet](https://mxnet.apache.org/versions/1.9.1/api/python/docs/tutorials/deploy/export/onnx.html#simplify-the-exported-onnx-model)\n* [mmdetection](https://github.com/open-mmlab/mmdetection)\n* [yolov5](https://github.com/ultralytics/yolov5)\n* [ncnn](https://github.com/tencent/ncnn)\n* ...\n\n## chat\n\nwe created a chinese qq group for onnx!\n\nonnx qq group (chinese): 1021964010, verification code: nndab. welcome to join!\n\nfor english users, i'm active on the [onnx slack](https://github.com/onnx/onnx#discuss). you can find and chat with me (daquexian) there.\n",
  "docs_url": null,
  "keywords": "deep-learning onnx",
  "license": "apache license v2.0",
  "name": "onnxsim",
  "package_url": "https://pypi.org/project/onnxsim/",
  "project_url": "https://pypi.org/project/onnxsim/",
  "project_urls": {
    "Homepage": "https://github.com/daquexian/onnx-simplifier"
  },
  "release_url": "https://pypi.org/project/onnxsim/0.4.35/",
  "requires_dist": [
    "onnx",
    "rich"
  ],
  "requires_python": ">=3.7",
  "summary": "simplify your onnx model",
  "version": "0.4.35",
  "releases": [],
  "developers": [
    "daquexian566@gmail.com",
    "onnx_simplifier_authors"
  ],
  "kwds": "onnx_simplifier onnx onnxsim output_onnx_model input_onnx_model",
  "license_kwds": "apache license v2.0",
  "libtype": "pypi",
  "id": "pypi_onnxsim",
  "homepage": "https://github.com/daquexian/onnx-simplifier",
  "release_count": 29,
  "dependency_ids": [
    "pypi_onnx",
    "pypi_rich"
  ]
}
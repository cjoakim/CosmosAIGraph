{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": "<a href=\"https://github.com/scikit-hep/awkward-1.0\">\n    <img src=\"https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/logo/logo-300px.png\">\n</a>\n\n\n[![pypi version](https://badge.fury.io/py/awkward.svg)](https://pypi.org/project/awkward)\n[![conda-forge](https://img.shields.io/conda/vn/conda-forge/awkward)](https://github.com/conda-forge/awkward-feedstock)\n[![python 3.8\u20123.12](https://img.shields.io/badge/python-3.8%e2%80%923.12-blue)](https://www.python.org)\n[![bsd-3 clause license](https://img.shields.io/badge/license-bsd%203--clause-blue.svg)](https://opensource.org/licenses/bsd-3-clause)\n[![build test](https://github.com/scikit-hep/awkward/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/scikit-hep/awkward/actions/workflows/test.yml)\n\n[![scikit-hep](https://scikit-hep.org/assets/images/scikit--hep-project-blue.svg)](https://scikit-hep.org/)\n[![nsf-1836650](https://img.shields.io/badge/nsf-1836650-blue.svg)](https://nsf.gov/awardsearch/showaward?awd_id=1836650)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.4341376.svg)](https://doi.org/10.5281/zenodo.4341376)\n[![documentation](https://img.shields.io/badge/docs-online-success)](https://awkward-array.org/)\n[![gitter](https://img.shields.io/badge/chat-online-success)](https://gitter.im/scikit-hep/awkward-array)\n\nawkward array is a library for **nested, variable-sized data**, including arbitrary-length lists, records, mixed types, and missing data, using **numpy-like idioms**.\n\narrays are **dynamically typed**, but operations on them are **compiled and fast**. their behavior coincides with numpy when array dimensions are regular and generalizes when they're not.\n\n# motivating example\n\ngiven an array of lists of objects with `x`, `y` fields (with nested lists in the `y` field),\n\n```python\nimport awkward as ak\n\narray = ak.array([\n    [{\"x\": 1.1, \"y\": [1]}, {\"x\": 2.2, \"y\": [1, 2]}, {\"x\": 3.3, \"y\": [1, 2, 3]}],\n    [],\n    [{\"x\": 4.4, \"y\": [1, 2, 3, 4]}, {\"x\": 5.5, \"y\": [1, 2, 3, 4, 5]}]\n])\n```\n\nthe following slices out the `y` values, drops the first element from each inner list, and runs numpy's `np.square` function on everything that is left:\n\n```python\noutput = np.square(array[\"y\", ..., 1:])\n```\n\nthe result is\n\n```python\n[\n    [[], [4], [4, 9]],\n    [],\n    [[4, 9, 16], [4, 9, 16, 25]]\n]\n```\n\nthe equivalent using only python is\n\n```python\noutput = []\nfor sublist in array:\n    tmp1 = []\n    for record in sublist:\n        tmp2 = []\n        for number in record[\"y\"][1:]:\n            tmp2.append(np.square(number))\n        tmp1.append(tmp2)\n    output.append(tmp1)\n```\n\nthe expression using awkward arrays is more concise, using idioms familiar from numpy, and it also has numpy-like performance. for a similar problem 10 million times larger than the one above (single-threaded on a 2.2 ghz processor),\n\n   * the awkward array one-liner takes **1.5 seconds** to run and uses **2.1 gb** of memory,\n   * the equivalent using python lists and dicts takes **140 seconds** to run and uses **22 gb** of memory.\n\nawkward array is even faster when used in [numba](https://numba.pydata.org/)'s jit-compiled functions.\n\nsee the [getting started](https://awkward-array.org/doc/main/getting-started/index.html) documentation on [awkward-array.org](https://awkward-array.org) for an introduction, including a [no-install demo](https://awkward-array.org/doc/main/getting-started/try-awkward-array.html) you can try in your web browser.\n\n# getting help\n\n   * view the documentation on [awkward-array.org](https://awkward-array.org/).\n   * report bugs, request features, and ask for additional documentation on [github issues](https://github.com/scikit-hep/awkward/issues).\n   * if you have a \"how do i...?\" question, start a [github discussion](https://github.com/scikit-hep/awkward/discussions) with category \"q&a\".\n   * alternatively, ask about it on [stackoverflow with the [awkward-array] tag](https://stackoverflow.com/questions/tagged/awkward-array). be sure to include tags for any other libraries that you use, such as pandas or pytorch.\n   * to ask questions in real time, try the gitter [scikit-hep/awkward-array](https://gitter.im/scikit-hep/awkward-array) chat room.\n\n# installation\n\nawkward array can be installed from [pypi](https://pypi.org/project/awkward) using pip:\n\n```bash\npip install awkward\n```\n\nthe `awkward` package is pure python, and it will download the `awkward-cpp` compiled components as a dependency. if there is no `awkward-cpp` binary package (wheel) for your platform and python version, pip will attempt to compile it from source (which has additional dependencies, such as a c++ compiler).\n\nawkward array is also available on [conda-forge](https://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge):\n\n```bash\nconda install -c conda-forge awkward\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "awkward",
  "package_url": "https://pypi.org/project/awkward/",
  "project_url": "https://pypi.org/project/awkward/",
  "project_urls": {
    "Bug Tracker": "https://github.com/scikit-hep/awkward-1.0/issues",
    "Chat": "https://gitter.im/Scikit-HEP/awkward-array",
    "Discussions": "https://github.com/scikit-hep/awkward-1.0/discussions",
    "Documentation": "https://awkward-array.org",
    "Homepage": "https://github.com/scikit-hep/awkward-1.0",
    "Releases": "https://github.com/scikit-hep/awkward-1.0/releases",
    "Source Code": "https://github.com/scikit-hep/awkward-1.0"
  },
  "release_url": "https://pypi.org/project/awkward/2.5.1/",
  "requires_dist": [
    "awkward-cpp==27",
    "importlib-metadata>=4.13.0; python_version < '3.12'",
    "numpy>=1.18.0",
    "packaging",
    "typing-extensions>=4.1.0; python_version < '3.11'"
  ],
  "requires_python": ">=3.8",
  "summary": "manipulate json-like data with numpy-like idioms.",
  "version": "2.5.1",
  "releases": [],
  "developers": [
    "pivarski@princeton.edu"
  ],
  "kwds": "logo py python svg src",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_awkward",
  "homepage": "",
  "release_count": 172,
  "dependency_ids": [
    "pypi_awkward_cpp",
    "pypi_importlib_metadata",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_typing_extensions"
  ]
}
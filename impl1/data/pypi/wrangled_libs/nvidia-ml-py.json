{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: hardware",
    "topic :: system :: systems administration"
  ],
  "description": "pynvml\n======\n\npython bindings to the nvidia management library\n------------------------------------------------\n\nprovides a python interface to gpu management and monitoring functions.\n\nthis is a wrapper around the nvml library.\nfor information about the nvml library, see the nvml developer page\nhttp://developer.nvidia.com/nvidia-management-library-nvml\n\ndownload the latest package from:\nhttp://pypi.python.org/pypi/nvidia-ml-py/\n\nnote this file can be run with 'python -m doctest -v readme.txt'\nalthough the results are system dependent\n\nthe nvml header file contains function documentation that is relevant\nto this wrapper. the header file is distributed with.\nhttps://developer.nvidia.com/gpu-deployment-kit\n\nthe main difference is this library handles allocating structs and\npassing pointers to the functions, before returning the desired value.\nnon-success return codes are raised as exceptions as described in the\nsection below.\n\nrequires\n--------\npython 2.5, or an earlier version with the ctypes module.\n\ninstallation\n------------\n\npip installation with python3:\n- `python3 -m pip install nvidia-ml-py`\n\nmanual installation:\n```\n$ tar -xzf nvidia-ml-py-$major-$minor-$patch.tar.gz`\n$ cd nvidia-ml-py-$major-$minor-$patch\n$ sudo python setup.py install\n```\n\nusage\n-----\n```\n>>> from pynvml import *\n>>> nvmlinit()\n>>> print(f\"driver version: {nvmlsystemgetdriverversion()}\")\ndriver version: 11.515.48\n>>> devicecount = nvmldevicegetcount()\n>>> for i in range(devicecount):\n...     handle = nvmldevicegethandlebyindex(i)\n...     print(f\"device {i} : {nvmldevicegetname(handle)}\")\n...\ndevice 0 : tesla k40c\n\n>>> nvmlshutdown()\n```\n\nfunctions\n---------\npython methods wrap nvml functions, implemented in a c shared library.\neach function's use is the same with the following exceptions:\n\n- instead of returning error codes, failing error codes are raised as python exceptions.\n\n```\n>>> try:\n...     nvmldevicegetcount()\n... except nvmlerror as error:\n...     print(error)\n...\nuninitialized\n```\n\n- c function output parameters are returned from the corresponding python function left to right.\n```\nnvmlreturn_t nvmldevicegeteccmode(nvmldevice_t device,\n                                  nvmlenablestate_t *current,\n                                  nvmlenablestate_t *pending);\n\n>>> nvmlinit()\n>>> handle = nvmldevicegethandlebyindex(0)\n>>> (current, pending) = nvmldevicegeteccmode(handle)\n```\n- c structs are converted into python classes.\n\n```\n// c function and typedef struct\nnvmlreturn_t decldir nvmldevicegetmemoryinfo(nvmldevice_t device,\n                                             nvmlmemory_t *memory);\ntypedef struct nvmlmemory_st {\n    unsigned long long total;\n    unsigned long long free;\n    unsigned long long used;\n} nvmlmemory_t;\n\n\n# python call to function and accessing members of ctype struct\n>>> info = nvmldevicegetmemoryinfo(handle)\n>>> print(f\"total memory: {info.total}\")\ntotal memory: 5636292608\n>>> print(f\"free memory:, {info.free}\")\nfree memory: 5578420224\n>>> print(f\"used memory: {info.used}\")\nused memory: 57872384\n```\n\n- python handles string buffer creation.\n\n```\n// c function that needs character array and length\nnvmlreturn_t nvmlsystemgetdriverversion(char* version,\n                                        unsigned int length);\n\n# python function handles memory\n>>> version = nvmlsystemgetdriverversion()\n>>> print(version)\n... 11.520.75\n>>> nvmlshutdown()\n```\n\nfor usage information see the nvml documentation.\n\nvariables\n---------\nall meaningful nvml constants and enums are exposed in python.\n\nthe nvml_value_not_available constant is not used.  instead none is mapped to the field.\n\nexceptions\n----------\nsince the c library uses return codes and python prefers exception handling, the\nlibrary converts all return codes to various exceptions. the exceptions are generated\nautomatically via a function at run time instead of being defined manually.\n\nthe list of exceptions can be found in nvmlerror base class.\n\nthe example seen above in the functions section:\n\n```\n>>> try:\n...     nvmldevicegetcount()\n... except nvmlerror as error:\n...     print(error)\n...\nuninitialized\n```\n\ncan be more accurately caught like this:\n\n```\n>>> try:\n...     nvmldevicegetcount()\n... except nvmlerror_uninitialized as error:\n...     print(error)\n...\nuninitialized\n```\n\nthe conversion from name to exception is like this for all exceptions:\n* `nvml_error_uninitialized` => `nvmlerror_uninitialized`\n* `nvml_error_library_not_found` => `nvmlerror_librarynotfound`\n* `nvml_error_already_initialized` => `nvmlerror_alreadyinitialized`\n\nrelease notes\n-------------\nversion 2.285.0\n- added new functions for nvml 2.285.  see nvml documentation for more information.\n- ported to support python 3.0 and python 2.0 syntax.\n- added nvidia_smi.py tool as a sample app.\n\nversion 3.295.0\n- added new functions for nvml 3.295.  see nvml documentation for more information.\n- updated nvidia_smi.py tool\n- includes additional error handling\n\nversion 4.304.0\n- added new functions for nvml 4.304.  see nvml documentation for more information.\n- updated nvidia_smi.py tool\n\nversion 4.304.3\n- fixing nvmlunitgetdevicecount bug\n\nversion 5.319.0\n- added new functions for nvml 5.319.  see nvml documentation for more information.\n\nversion 6.340.0\n- added new functions for nvml 6.340.  see nvml documentation for more information.\n\nversion 7.346.0\n- added new functions for nvml 7.346.  see nvml documentation for more information.\n\nversion 7.352.0\n- added new functions for nvml 7.352.  see nvml documentation for more information.\n\nversion 10.418\n- added new functions for nvml 10.418.  see nvml documentation for more information.\n- fixed issues with using the bindings with python 3.x\n- replaced sample app nvidia_smi.py with example.py\n\nversion 11.515.48\n- python3 support added\n- updated api to add function new to nvml, bringing pynvml up to date with nvml\n- added auto-version to handle byte and string conversion automatically for both structs and functions\n- minor bug fixes\n- added readme.txt correctly in long_description for pypi.org\n\nversion 11.520\n- updated long description to be actual markdown\n- added new functions for nvml 11.520\n\nversion 11.525\n- added new functions for nvml 11.525\n\ncopyright\n---------\ncopyright (c) 2011-2023, nvidia corporation.  all rights reserved.\n\nlicense\n-------\nredistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n- redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n- redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n- neither the name of the nvidia corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nthis software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.\n\n",
  "docs_url": "https://pythonhosted.org/nvidia-ml-py/",
  "keywords": "",
  "license": "bsd",
  "name": "nvidia-ml-py",
  "package_url": "https://pypi.org/project/nvidia-ml-py/",
  "project_url": "https://pypi.org/project/nvidia-ml-py/",
  "project_urls": {
    "Homepage": "https://forums.developer.nvidia.com"
  },
  "release_url": "https://pypi.org/project/nvidia-ml-py/12.535.133/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python bindings for the nvidia management library",
  "version": "12.535.133",
  "releases": [],
  "developers": [
    "nvidia_corporation",
    "nvml-bindings@nvidia.com"
  ],
  "kwds": "nvidia_smi nvidia pynvml nvmldevice_t gpu",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_nvidia_ml_py",
  "homepage": "https://forums.developer.nvidia.com",
  "release_count": 26,
  "dependency_ids": []
}
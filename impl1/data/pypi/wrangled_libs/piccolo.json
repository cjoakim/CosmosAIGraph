{
  "classifiers": [
    "framework :: asyncio",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: database",
    "typing :: typed"
  ],
  "description": "![logo](https://raw.githubusercontent.com/piccolo-orm/piccolo/master/docs/logo_hero.png \"piccolo logo\")\n\n![tests](https://github.com/piccolo-orm/piccolo/actions/workflows/tests.yaml/badge.svg)\n![release](https://github.com/piccolo-orm/piccolo/actions/workflows/release.yaml/badge.svg)\n[![documentation status](https://readthedocs.org/projects/piccolo-orm/badge/?version=latest)](https://piccolo-orm.readthedocs.io/en/latest/?badge=latest)\n[![pypi](https://img.shields.io/pypi/v/piccolo?color=%2334d058&label=pypi)](https://pypi.org/project/piccolo/)\n[![codecov](https://codecov.io/gh/piccolo-orm/piccolo/branch/master/graph/badge.svg?token=v19cwh7mxx)](https://codecov.io/gh/piccolo-orm/piccolo)\n\npiccolo is a fast, user friendly orm and query builder which supports asyncio. [read the docs](https://piccolo-orm.readthedocs.io/en/latest/).\n\n## features\n\nsome of it\u2019s stand out features are:\n\n- support for sync and async.\n- a builtin playground, which makes learning a breeze.\n- tab completion support - works great with ipython and vscode.\n- batteries included - a user model, authentication, migrations, an [admin gui](https://github.com/piccolo-orm/piccolo_admin), and more.\n- modern python - fully type annotated.\n- make your codebase modular and scalable with piccolo apps (similar to django apps).\n\n## syntax\n\nthe syntax is clean and expressive.\n\nyou can use it as a query builder:\n\n```python\n# select:\nawait band.select(\n    band.name\n).where(\n    band.popularity > 100\n)\n\n# join:\nawait band.select(\n    band.name,\n    band.manager.name\n)\n\n# delete:\nawait band.delete().where(\n    band.popularity < 1000\n)\n\n# update:\nawait band.update({band.popularity: 10000}).where(\n    band.name == 'pythonistas'\n)\n```\n\nor like a typical orm:\n\n```python\n# to create a new object:\nb = band(name='c-sharps', popularity=100)\nawait b.save()\n\n# to fetch an object from the database, and update it:\nb = await band.objects().get(band.name == 'pythonistas')\nb.popularity = 10000\nawait b.save()\n\n# to delete:\nawait b.remove()\n```\n\n## installation\n\ninstalling with postgresql driver:\n\n```bash\npip install 'piccolo[postgres]'\n```\n\ninstalling with sqlite driver:\n\n```bash\npip install 'piccolo[sqlite]'\n```\n\ninstalling with all optional dependencies (easiest):\n\n```bash\npip install 'piccolo[all]'\n```\n\n## building a web app?\n\nlet piccolo scaffold you an asgi web app, using piccolo as the orm:\n\n```bash\npiccolo asgi new\n```\n\n[starlette](https://www.starlette.io/), [fastapi](https://fastapi.tiangolo.com/), [blacksheep](https://www.neoteroi.dev/blacksheep/) and [litestar](https://litestar.dev/) are currently supported.\n\n## are you a django user?\n\nwe have a handy page which shows the equivalent of [common django queries in piccolo](https://piccolo-orm.readthedocs.io/en/latest/piccolo/query_types/django_comparison.html).\n\n## documentation\n\nour documentation is on [read the docs](https://piccolo-orm.readthedocs.io/en/latest/piccolo/getting_started/index.html).\n\nwe also have some great [tutorial videos on youtube](https://www.youtube.com/channel/uce7x5nm1iy9kdfxpnrnq5la).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "piccolo",
  "package_url": "https://pypi.org/project/piccolo/",
  "project_url": "https://pypi.org/project/piccolo/",
  "project_urls": {
    "Documentation": "https://piccolo-orm.readthedocs.io/en/latest/index.html",
    "Homepage": "https://github.com/piccolo-orm/piccolo",
    "Source": "https://github.com/piccolo-orm/piccolo",
    "Tracker": "https://github.com/piccolo-orm/piccolo/issues"
  },
  "release_url": "https://pypi.org/project/piccolo/1.2.0/",
  "requires_dist": [
    "black",
    "colorama (>=0.4.0)",
    "Jinja2 (>=2.11.0)",
    "targ (>=0.3.7)",
    "inflection (>=0.5.1)",
    "typing-extensions (>=4.3.0)",
    "pydantic[email] (==2.*)",
    "orjson (>=3.5.1) ; extra == 'all'",
    "ipython ; extra == 'all'",
    "asyncpg (>=0.21.0) ; extra == 'all'",
    "aiosqlite (>=0.16.0) ; extra == 'all'",
    "uvloop (>=0.12.0) ; (sys_platform != \"win32\") and extra == 'all'",
    "orjson (>=3.5.1) ; extra == 'orjson'",
    "ipython ; extra == 'playground'",
    "asyncpg (>=0.21.0) ; extra == 'postgres'",
    "aiosqlite (>=0.16.0) ; extra == 'sqlite'",
    "uvloop (>=0.12.0) ; (sys_platform != \"win32\") and extra == 'uvloop'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "a fast, user friendly orm and query builder which supports asyncio.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "dan@dantownsend.co.uk",
    "daniel_townsend"
  ],
  "kwds": "logo_hero piccolo piccolo_admin badge logo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_piccolo",
  "homepage": "https://github.com/piccolo-orm/piccolo",
  "release_count": 248,
  "dependency_ids": [
    "pypi_aiosqlite",
    "pypi_asyncpg",
    "pypi_black",
    "pypi_colorama",
    "pypi_inflection",
    "pypi_ipython",
    "pypi_jinja2",
    "pypi_orjson",
    "pypi_pydantic",
    "pypi_targ",
    "pypi_typing_extensions",
    "pypi_uvloop"
  ]
}
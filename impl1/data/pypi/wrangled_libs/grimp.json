{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: rust",
    "topic :: utilities"
  ],
  "description": "=====\ngrimp\n=====\n\n.. image:: https://img.shields.io/pypi/v/grimp.svg\n    :target: https://pypi.org/project/grimp\n\n.. image:: https://img.shields.io/pypi/pyversions/grimp.svg\n    :alt: python versions\n    :target: https://pypi.org/project/grimp/\n\n.. image:: https://github.com/seddonym/grimp/workflows/ci/badge.svg?branch=master\n     :target: https://github.com/seddonym/grimp/actions?workflow=ci\n     :alt: ci status\n\nbuilds a queryable graph of the imports within one or more python packages.\n\n* free software: bsd license\n\nquick start\n-----------\n\ninstall grimp::\n\n    pip install grimp\n\ninstall the python package you wish to analyse::\n\n    pip install somepackage\n\nin python, build the import graph for the package::\n\n    >>> import grimp\n    >>> graph = grimp.build_graph('somepackage')\n\nyou may now use the graph object to analyse the package. some examples::\n\n    >>> graph.find_children('somepackage.foo')\n    {\n        'somepackage.foo.one',\n        'somepackage.foo.two',\n    }\n\n    >>> graph.find_descendants('somepackage.foo')\n    {\n        'somepackage.foo.one',\n        'somepackage.foo.two',\n        'somepackage.foo.two.blue',\n        'somepackage.foo.two.green',\n    }\n\n    >>> graph.find_modules_directly_imported_by('somepackage.foo')\n    {\n        'somepackage.bar.one',\n    }\n\n    >>> graph.find_upstream_modules('somepackage.foo')\n    {\n        'somepackage.bar.one',\n        'somepackage.baz',\n        'somepackage.foobar',\n    }\n\n    >>> graph.find_shortest_chain(importer='somepackage.foobar', imported='somepackage.foo')\n    (\n        'somepackage.foobar',\n        'somepackage.baz',\n        'somepackage.foo',\n    )\n\n    >>> graph.get_import_details(importer='somepackage.foobar', imported='somepackage.baz'))\n    [\n        {\n            'importer': 'somepackage.foobar',\n            'imported': 'somepackage.baz',\n            'line_number': 5,\n            'line_contents': 'from . import baz',\n        },\n    ]\n\n\nexternal packages\n-----------------\n\nby default, external dependencies will not be included. this can be overridden like so::\n\n    >>> graph = grimp.build_graph('somepackage', include_external_packages=true)\n    >>> graph.find_modules_directly_imported_by('somepackage.foo')\n    {\n        'somepackage.bar.one',\n        'os',\n        'decimal',\n        'sqlalchemy',\n    }\n\nmultiple packages\n-----------------\n\nyou may analyse multiple root packages. to do this, pass each package name as a positional argument::\n\n    >>> graph = grimp.build_graph('somepackage', 'anotherpackage')\n    >>> graph.find_modules_directly_imported_by('somepackage.foo')\n    {\n        'somepackage.bar.one',\n        'anotherpackage.baz',\n    }\n\nnamespace packages\n------------------\n\ngraphs can also be built from `portions`_ of `namespace packages`_. to do this, provide the portion name, rather than the namespace name::\n\n    >>> graph = grimp.build_graph('somenamespace.foo')\n\nwhat's a namespace package?\n###########################\n\nnamespace packages are a python feature allows subpackages to be distributed independently, while still importable under a shared namespace. this is, for example, used by `the python client for google's cloud logging api`_. when installed, it is importable in python as ``google.cloud.logging``. the parent packages ``google`` and ``google.cloud`` are both namespace packages, while ``google.cloud.logging`` is known as the 'portion'. other portions in the same namespace can be installed separately, for example ``google.cloud.secretmanager``.\n\ngrimp expects the package name passed to ``build_graph`` to be a portion, rather than a namespace package. so in the case of the example above, the graph should be built like so::\n\n    >>> graph = grimp.build_graph('google.cloud.logging')\n\nif, instead, a namespace package is passed (e.g. ``grimp.build_graph('google.cloud')``), grimp will raise ``namespacepackageencountered``.\n\n.. _portions: https://docs.python.org/3/glossary.html#term-portion\n.. _namespace packages: https://docs.python.org/3/glossary.html#term-namespace-package\n.. _the python client for google's cloud logging api: https://pypi.org/project/google-cloud-logging/\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 2-clause license",
  "name": "grimp",
  "package_url": "https://pypi.org/project/grimp/",
  "project_url": "https://pypi.org/project/grimp/",
  "project_urls": {
    "Documentation": "https://grimp.readthedocs.io/",
    "Source-code": "https://github.com/seddonym/grimp/"
  },
  "release_url": "https://pypi.org/project/grimp/3.1/",
  "requires_dist": [
    "typing-extensions >=3.10.0.0"
  ],
  "requires_python": ">=3.8",
  "summary": "builds a queryable graph of the imports within one or more python packages.",
  "version": "3.1",
  "releases": [],
  "developers": [
    "david@seddonym.me"
  ],
  "kwds": "grimp pyversions build_graph python pip",
  "license_kwds": "bsd 2-clause license",
  "libtype": "pypi",
  "id": "pypi_grimp",
  "homepage": "",
  "release_count": 31,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
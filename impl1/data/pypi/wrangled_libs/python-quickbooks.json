{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "python-quickbooks\n=================\n\n[![python package](https://github.com/ej2/python-quickbooks/actions/workflows/python-package.yml/badge.svg)](https://github.com/ej2/python-quickbooks/actions/workflows/python-package.yml)\n[![coverage status](https://coveralls.io/repos/github/ej2/python-quickbooks/badge.svg?branch=master)](https://coveralls.io/github/ej2/python-quickbooks?branch=master)\n[![](https://img.shields.io/badge/license-mit-yellow.svg)](https://github.com/ej2/python-quickbooks/blob/master/license)\n[![pypi](https://img.shields.io/pypi/v/python-quickbooks)](https://pypi.org/project/python-quickbooks/)\n \na python 3 library for accessing the quickbooks api. complete rework of\n[quickbooks-python](https://github.com/troolee/quickbooks-python).\n\nthese instructions were written for a django application. make sure to\nchange it to whatever framework/method you\u2019re using.\nyou can find additional examples of usage in [integration tests folder](https://github.com/ej2/python-quickbooks/tree/master/tests/integration).\n\nfor information about contributing, see the [contributing page](https://github.com/ej2/python-quickbooks/blob/master/contributing.md).\n\ninstallation\n------------\n\n```bash\npip install python-quickbooks\n```\n\nquickbooks oauth\n------------------------------------------------\n\nthis library requires [intuit-oauth](https://pypi.org/project/intuit-oauth/). \nfollow the [oauth 2.0 guide](https://developer.intuit.com/app/developer/qbo/docs/develop/authentication-and-authorization/oauth-2.0) for installation and to get connected to quickbooks api.\n\n\naccessing the api\n-----------------\n\nset up an authclient passing in your `client_id` and `client_secret`.\n\n    from intuitlib.client import authclient\n\n    auth_client = authclient(\n            client_id='client_id',\n            client_secret='client_secret',\n            access_token='access_token',  # if you do not pass this in, the quickbooks client will call refresh and get a new access token. \n            environment='sandbox',\n            redirect_uri='http://localhost:8000/callback',\n        )\n\nthen create a quickbooks client object passing in the authclient, refresh token, and company id:\n\n    from quickbooks import quickbooks\n\n    client = quickbooks(\n            auth_client=auth_client,\n            refresh_token='refresh_token',\n            company_id='company_id',\n        )\n\nif you need to access a minor version (see [minor versions](https://developer.intuit.com/docs/0100_quickbooks_online/0200_dev_guides/accounting/minor_versions) for\ndetails) pass in minorversion when setting up the client:\n\n    client = quickbooks(\n        auth_client=auth_client,\n        refresh_token='refresh_token',\n        company_id='company_id',\n        minorversion=59\n    )\n\nobject operations\n-----------------\n\nlist of objects:\n\n    from quickbooks.objects.customer import customer\n    customers = customer.all(qb=client)\n\n**note:** the maximum number of entities that can be returned in a\nresponse is 1000. if the result size is not specified, the default\nnumber is 100. (see [intuit developer guide](https://developer.intuit.com/docs/0100_accounting/0300_developer_guides/querying_data) for details)\n\nfiltered list of objects:\n\n    customers = customer.filter(active=true, familyname=\"smith\", qb=client)\n\nfiltered list of objects with ordering:\n\n    # get customer invoices ordered by txndate\n    invoices = invoice.filter(customerref='100', order_by='txndate', qb=client)\n\n    # same, but in reverse order\n    invoices = invoice.filter(customerref='100', order_by='txndate desc', qb=client)\n\n    # order customers by familyname then by givenname\n    customers = customer.all(order_by='familyname, givenname', qb=client)\n\nfiltered list of objects with paging:\n\n    customers = customer.filter(start_position=1, max_results=25, active=true, familyname=\"smith\", qb=client)\n\nlist filtered by values in list:\n\n    customer_names = ['customer1', 'customer2', 'customer3']\n    customers = customer.choose(customer_names, field=\"displayname\", qb=client)\n\nlist with custom where clause (do not include the `\"where\"`):\n\n    customers = customer.where(\"active = true and companyname like 's%'\", qb=client)\n\nlist with custom where and ordering\n\n    customers = customer.where(\"active = true and companyname like 's%'\", order_by='displayname', qb=client)\n\nlist with custom where clause and paging:\n\n    customers = customer.where(\"companyname like 's%'\", start_position=1, max_results=25, qb=client)\n\nfiltering a list with a custom query (see [intuit developer guide](https://developer.intuit.com/docs/0100_accounting/0300_developer_guides/querying_data) for\nsupported sql statements):\n\n    customers = customer.query(\"select * from customer where active = true\", qb=client)\n\nfiltering a list with a custom query with paging:\n\n    customers = customer.query(\"select * from customer where active = true startposition 1 maxresults 25\", qb=client)\n\nget record count (do not include the ``\"where\"``):\n\n    customer_count = customer.count(\"active = true and companyname like 's%'\", qb=client)\n\nget single object by id and update:\n\n    customer = customer.get(1, qb=client)\n    customer.companyname = \"new test company name\"\n    customer.save(qb=client)\n\ncreate new object:\n\n    customer = customer()\n    customer.companyname = \"test company\"\n    customer.save(qb=client)\n\nbatch operations\n----------------\n\nthe batch operation enables an application to perform multiple\noperations in a single request (see [intuit batch operations guide](https://developer.intuit.com/docs/api/accounting/batch) for\nfull details).\n\nbatch create a list of objects:\n\n    from quickbooks.batch import batch_create\n\n    customer1 = customer()\n    customer1.companyname = \"test company 1\"\n\n    customer2 = customer()\n    customer2.companyname = \"test company 2\"\n\n    customers = [customer1, customer2]\n\n    results = batch_create(customers, qb=client)\n\nbatch update a list of objects:\n\n    from quickbooks.batch import batch_update\n    customers = customer.filter(active=true)\n\n    # update customer records\n    \n    results = batch_update(customers, qb=client)\n\nbatch delete a list of objects (only entities that support delete can use batch delete):\n\n    from quickbooks.batch import batch_delete\n\n    payments = payment.filter(txndate=date.today())\n    results = batch_delete(payments, qb=client)\n\nreview results for batch operation:\n\n    # successes is a list of objects that were successfully updated\n    for obj in results.successes:\n       print(\"updated \" + obj.displayname)\n\n    # faults contains list of failed operations and associated errors\n    for fault in results.faults:\n       print(\"operation failed on \" + fault.original_object.displayname)\n\n       for error in fault.error:\n           print(\"error \" + error.message)\n\nchange data capture\n-----------------------\nchange data capture returns a list of objects that have changed since a given time \n(see [change data capture](https://developer.intuit.com/docs/api/accounting/changedatacapture) for more details):\n\n    from quickbooks.cdc import change_data_capture\n    from quickbooks.objects import invoice\n\n    cdc_response = change_data_capture([invoice], \"2017-01-01t00:00:00\", qb=client)\n    for invoice in cdc_response.invoice:\n       # do something with the invoice\n\nquerying muliple entity types at the same time:\n\n    from quickbooks.objects import invoice, customer\n    cdc_response = change_data_capture([invoice, customer], \"2017-01-01t00:00:00\", qb=client)\n\nif you use a `datetime` object for the timestamp, it is automatically converted to a string:\n\n    from datetime import datetime\n\n    cdc_response = change_data_capture([invoice, customer], datetime(2017, 1, 1, 0, 0, 0), qb=client)\n\nattachments\n----------------\nsee [attachable documentation](https://developer.intuit.com/docs/api/accounting/attachable) \nfor list of valid file types, file size limits and other restrictions.\n\nattaching a note to a customer:\n\n    attachment = attachable()\n\n    attachable_ref = attachableref()\n    attachable_ref.entityref = customer.to_ref()\n\n    attachment.attachableref.append(attachable_ref)\n\n    attachment.note = 'this is a note'\n    attachment.save(qb=client)\n\nattaching a file to customer:\n\n    attachment = attachable()\n\n    attachable_ref = attachableref()\n    attachable_ref.entityref = customer.to_ref()\n\n    attachment.attachableref.append(attachable_ref)\n\n    attachment.filename = 'filename'\n    attachment._filepath = '/folder/filename'  # full path to file\n    attachment.contenttype = 'application/pdf'\n    attachment.save(qb=client)\n\npassing in optional params\n----------------\nsome qbo objects have options that need to be set on the query string of an api call. \none example is `include=allowduplicatedocnum` on the purchase object. you can add these params when calling save:  \n\n    purchase.save(qb=self.qb_client, params={'include': 'allowduplicatedocnum'})\n\nother operations\n----------------\nadd sharable link for an invoice sent to external customers (minorversion must be set to 36 or greater):\n\n    invoice.invoice_link = true\n\n\nvoid an invoice:\n\n    invoice = invoice()\n    invoice.id = 7\n    invoice.void(qb=client)\n\n\nworking with json data\n----------------\nall objects include `to_json` and `from_json` methods.\n\nconverting an object to json data:\n\n    account = account.get(1, qb=client)\n    json_data = account.to_json()\n\nloading json data into a quickbooks object:\n\n    account = account()\n    account.from_json(\n     {\n      \"accounttype\": \"accounts receivable\",\n      \"name\": \"myjobs\"\n     }\n    )\n    account.save(qb=client)\n\ndate formatting\n----------------\nwhen setting date or datetime fields, quickbooks requires a specific format.\nformating helpers are available in helpers.py. example usage:\n\n    date_string = qb_date_format(date(2016, 7, 22))\n    date_time_string = qb_datetime_format(datetime(2016, 7, 22, 10, 35, 00))\n    date_time_with_utc_string = qb_datetime_utc_offset_format(datetime(2016, 7, 22, 10, 35, 00), '-06:00')\n\nexception handling\n----------------\nthe quickbooksexception object contains additional [qbo error code](https://developer.intuit.com/app/developer/qbo/docs/develop/troubleshooting/error-codes#id1) information. \n\n\n    from quickbooks.exceptions import quickbooksexception\n\n    try:\n        # perform a quickbooks operation\n    except quickbooksexception as e:\n        e.message # contains the error message returned from qbo\n        e.error_code # contains the  \n        e.detail # contains additional information when available  \n\n\n**note:** objects and object property names match their quickbooks\ncounterparts and do not follow pep8.\n\n**note:** this is a work-in-progress made public to help other\ndevelopers access the quickbooks api. built for a django project.\n\n\n\n",
  "docs_url": null,
  "keywords": "quickbooks,qbo,accounting",
  "license": "mit",
  "name": "python-quickbooks",
  "package_url": "https://pypi.org/project/python-quickbooks/",
  "project_url": "https://pypi.org/project/python-quickbooks/",
  "project_urls": {
    "Homepage": "https://github.com/ej2/python-quickbooks"
  },
  "release_url": "https://pypi.org/project/python-quickbooks/0.9.5/",
  "requires_dist": [
    "setuptools",
    "intuit-oauth==1.2.4",
    "rauth>=0.7.3",
    "requests>=2.31.0",
    "simplejson>=3.19.1",
    "python-dateutil"
  ],
  "requires_python": "",
  "summary": "a python library for accessing the quickbooks api.",
  "version": "0.9.5",
  "releases": [],
  "developers": [
    "edward.emanuel@gmail.com",
    "edward_emanuel_jr"
  ],
  "kwds": "quickbooks 0100_quickbooks_online intuitlib badge quickbooksexception",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_quickbooks",
  "homepage": "https://github.com/ej2/python-quickbooks",
  "release_count": 52,
  "dependency_ids": [
    "pypi_intuit_oauth",
    "pypi_python_dateutil",
    "pypi_rauth",
    "pypi_requests",
    "pypi_setuptools",
    "pypi_simplejson"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: internet"
  ],
  "description": "google oauth service\n********************\n\n.. image:: https://img.shields.io/travis/miedzinski/google-oauth.svg\n    :target: https://travis-ci.org/miedzinski/google-oauth/builds\n.. image:: https://img.shields.io/codecov/c/github/miedzinski/google-oauth.svg\n    :target: https://codecov.io/github/miedzinski/google-oauth\n\n``google-oauth`` aims to implement google oauth2.\n\ninstallation\n============\n\nrequires python 2.7 or 3.3+.\n\nuse ``pip``:\n\n    $ pip install google-oauth\n\nor download code rom github and install it manually with ``setuptools``:\n\n    $ git clone https://github.com/miedzinski/google-oauth2-service.git\n    $ cd google-oauth\n    $ python setup.py install\n\nin case of ``pyopenssl`` build failing, install openssl headers.\non debian based distributions:\n\n    $ apt-get install libssl-dev\n\nusage\n=====\n\nat this moment, there is only `server to server` flow implemented.\n\noauth2 for service accounts\n---------------------------\n\nfirst, create ``serviceaccount`` object. the best way to achieve this\nis using one of two classmethods:\n\n    - serviceaccount.from_json\n    - serviceaccount.from_pkcs12\n\ngoogle recommends json key format, so we will use it.\nboth methods are documented in source code.\n\n    >>> key = json.load(open('/path/to/credentials.json'))\n    >>> auth = serviceaccount.from_json(key=key, scopes=scope)\n    >>> auth.access_token\n\nand that's it - oauth2 access token is available as ``access_token`` property.\nif you think token's lifetime will be longer than object's, you can cache it\nin file or database of your choice.\notherwise, you can use a ``googleservice.authorized_request``, which is\na handy shortcut to ``requests.request`` with proper ``authorization`` header.\nsubsequent calls to this method won't request new access tokens unless\nprevious one expired.\n\nlet's search for guuido van rossum on google+\n\n    >>> scope = 'https://www.googleapis.com/auth/plus.login'\n    >>> url = 'https://www.googleapis.com/plus/v1/people' \\\n    >>>         '?query=guuido+van+rossum'\n    >>> resp = auth.authorized_request(method='get', url=url)\n\n``resp`` is now an instance of ``requests.response``, from which we can\nextract all the data we need.\n\ndocumentation\n=============\n\nsource code is fully documented with docstrings.\n\ntodo\n====\n\n- implement three-legged oauth2 (for web server applications).\n\ncontributing\n============\n\nall contributors are welcome! make sure the tests pass and don't forget\nto write your own tests if you code new stuff.\nif you want to submit a patch, use github pull requests.",
  "docs_url": null,
  "keywords": "google oauth oauth2 api service jwt",
  "license": "mit license",
  "name": "google-oauth",
  "package_url": "https://pypi.org/project/google-oauth/",
  "project_url": "https://pypi.org/project/google-oauth/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/miedzinski/google-oauth"
  },
  "release_url": "https://pypi.org/project/google-oauth/1.0.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "oauth2 for google apis",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "unknown"
  ],
  "kwds": "oauth2 oauth googleservice googleapis access_token",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_google_oauth",
  "homepage": "https://github.com/miedzinski/google-oauth",
  "release_count": 2,
  "dependency_ids": []
}
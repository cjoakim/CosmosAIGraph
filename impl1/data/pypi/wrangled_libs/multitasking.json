{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "multitasking: non-blocking python methods using decorators\n==========================================================\n\n.. image:: https://img.shields.io/badge/python-2.7,%203.5+-blue.svg?style=flat\n    :target: https://pypi.python.org/pypi/multitasking\n    :alt: python version\n\n.. image:: https://img.shields.io/travis/ranaroussi/multitasking/main.svg?\n    :target: https://travis-ci.org/ranaroussi/multitasking\n    :alt: travis-ci build status\n\n.. image:: https://img.shields.io/pypi/v/multitasking.svg?maxage=60\n    :target: https://pypi.python.org/pypi/multitasking\n    :alt: pypi version\n\n.. image:: https://img.shields.io/pypi/status/multitasking.svg?maxage=2592000\n    :target: https://pypi.python.org/pypi/multitasking\n    :alt: pypi status\n\n.. image:: https://img.shields.io/pypi/dm/multitasking.svg?maxage=2592000\n    :target: https://pypi.python.org/pypi/multitasking\n    :alt: pypi downloads\n\n.. image:: https://www.codefactor.io/repository/github/ranaroussi/multitasking/badge\n    :target: https://www.codefactor.io/repository/github/ranaroussi/multitasking\n    :alt: codefactor\n\n.. image:: https://img.shields.io/github/stars/ranaroussi/multitasking.svg?style=social&label=star&maxage=60\n    :target: https://github.com/ranaroussi/multitasking\n    :alt: star this repo\n\n.. image:: https://img.shields.io/twitter/follow/aroussi.svg?style=social&label=follow%20me&maxage=60\n    :target: https://twitter.com/aroussi\n    :alt: follow me on twitter\n\n\\\n\n**multitasking** is a tiny python library lets you convert your python methods into asynchronous,\nnon-blocking methods simply by using a decorator.\n\nexample\n--------------------\n.. code:: python\n\n    # example.py\n    import multitasking\n    import time\n    import random\n    import signal\n\n    # kill all tasks on ctrl-c\n    signal.signal(signal.sigint, multitasking.killall)\n\n    # or, wait for task to finish on ctrl-c:\n    # signal.signal(signal.sigint, multitasking.wait_for_tasks)\n\n    @multitasking.task # <== this is all it takes :-)\n    def hello(count):\n        sleep = random.randint(1,10)/2\n        print(\"hello %s (sleeping for %ss)\" % (count, sleep))\n        time.sleep(sleep)\n        print(\"goodbye %s (after for %ss)\" % (count, sleep))\n\n    if __name__ == \"__main__\":\n        for i in range(0, 10):\n            hello(i+1)\n\n\nthe output would look something like this:\n\n.. code:: bash\n\n    $ python example.py\n\n    hello 1 (sleeping for 0.5s)\n    hello 2 (sleeping for 1.0s)\n    hello 3 (sleeping for 5.0s)\n    hello 4 (sleeping for 0.5s)\n    hello 5 (sleeping for 2.5s)\n    hello 6 (sleeping for 3.0s)\n    hello 7 (sleeping for 0.5s)\n    hello 8 (sleeping for 4.0s)\n    hello 9 (sleeping for 3.0s)\n    hello 10 (sleeping for 1.0s)\n    goodbye 1 (after for 0.5s)\n    goodbye 4 (after for 0.5s)\n    goodbye 7 (after for 0.5s)\n    goodbye 2 (after for 1.0s)\n    goodbye 10 (after for 1.0s)\n    goodbye 5 (after for 2.5s)\n    goodbye 6 (after for 3.0s)\n    goodbye 9 (after for 3.0s)\n    goodbye 8 (after for 4.0s)\n    goodbye 3 (after for 5.0s)\n\n\nsettings\n========\n\nthe default maximum threads is equal to the # of cpu cores.\n**this is just a rule of thumb!** the ``thread`` module isn't actually using more than one core at a time.\n\nyou can change the default maximum number of threads using:\n\n.. code:: python\n\n    import multitasking\n    multitasking.set_max_threads(10)\n\n...or, if you want to set the maximum number of threads based on the number of cpu cores, you can:\n\n.. code:: python\n\n    import multitasking\n    multitasking.set_max_threads(multitasking.config[\"cpu_cores\"] * 5)\n\nfor applications that doesn't require access to shared resources,\nyou can set ``multitasking`` to use ``multiprocessing.process()``\ninstead of the ``threading.thread()``, thus avoiding some of the\n`gil constraints <https://jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/>`_.\n\n.. code:: python\n\n    import multitasking\n    multitasking.set_engine(\"process\") # \"process\" or \"thread\"\n\n\ninstallation\n============\n\ninstall multitasking using ``pip``:\n\n.. code:: bash\n\n    $ pip install multitasking --upgrade --no-cache-dir\n\n\ninstall multitasking using ``conda``:\n\n.. code:: bash\n\n    $ conda install -c ranaroussi multitasking\n\n\nlegal stuff\n===========\n\n**multitasking** is distributed under the **apache software license**. see the `license.txt <./license.txt>`_ file in the release for details.\n\n\np.s.\n------------\n\nplease drop me an note with any feedback you have.\n\n**ran aroussi**\n\n\n",
  "docs_url": null,
  "keywords": "multitasking multitask threading async",
  "license": "apache",
  "name": "multitasking",
  "package_url": "https://pypi.org/project/multitasking/",
  "project_url": "https://pypi.org/project/multitasking/",
  "project_urls": {
    "Homepage": "https://github.com/ranaroussi/multitasking"
  },
  "release_url": "https://pypi.org/project/multitasking/0.0.11/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "non-blocking python methods using decorators",
  "version": "0.0.11",
  "releases": [],
  "developers": [
    "ran@aroussi.com",
    "ran_aroussi"
  ],
  "kwds": "multitask wait_for_tasks multitasking multiprocessing set_max_threads",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_multitasking",
  "homepage": "https://github.com/ranaroussi/multitasking",
  "release_count": 11,
  "dependency_ids": []
}
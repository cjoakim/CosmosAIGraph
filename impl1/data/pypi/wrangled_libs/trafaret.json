{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3"
  ],
  "description": "trafaret\n========\n\n|circleci_build| |gitter_chat| |pypi_version| |pypi_license|\n\nultimate transformation library that supports validation, contexts and ``aiohttp``.\n\ntrafaret is rigid and powerful lib to work with foreign data, configs etc.\nit provides simple way to check anything, and convert it accordingly to your needs.\n\nit has shortcut syntax and ability to express anything that you can code:\n\n.. code-block:: python\n\n    >>> from trafaret.constructor import construct\n    >>> validator = construct({'a': int, 'b': [str]})\n    >>> validator({'a': 5, 'b': ['lorem', 'ipsum']})\n    {'a': 5, 'b': ['lorem', 'ipsum']}\n\n    >>> validator({'a': 5, 'b': ['gorky', 9]})\n    traceback (most recent call last):\n      file \"<console>\", line 1, in <module>\n      file \"/users/mkrivushin/w/trafaret/trafaret/__init__.py\", line 204, in __call__\n        return self.check(val)\n      file \"/users/mkrivushin/w/trafaret/trafaret/__init__.py\", line 144, in check\n        return self._convert(self.check_and_return(value))\n      file \"/users/mkrivushin/w/trafaret/trafaret/__init__.py\", line 1105, in check_and_return\n        raise dataerror(error=errors, trafaret=self)\n    trafaret.dataerror: {'b': dataerror({1: dataerror(value is not a string)})}\n\n\nread the docs hosted documentation http://trafaret.readthedocs.org/en/latest/\nor look to the `docs/intro.rst`_ for start.\n\ntrafaret can even generate trafarets instances to build transformators from json,\nlike in json schema implementation `trafaret schema <https://github.com/deepwalker/trafaret_schema>`_\n\n\nnew\n---\n\n2.0.2\n=====\n- construct for `int` and `float` will use `toint` and `tofloat`\n\n2.0.0\n=====\n\n- ``withrepr`` \u2013 use it to return custom representation, like ``<email>``\n- strip a lot from dict, like ``keys()``\n- trafarets are not mutable\n- dataerror has new ``code`` attribute, self.failure has ``code`` argument\n- onerror has ``code`` argument too\n- new ``dataerror.to_struct`` method that returns errors in more consistent way\n- ``string``, ``anystring``, ``bytes``, ``frombytes(encoding=utf-8)``\n- ``int``, ``toint``, ``float``, ``tofloat``\n- ``todecimal``\n- ``iterable`` that acts like a ``list``, but works with any iterable\n- new ``date``, ``todate`` and ``datetime``, ``todatetime`` trafarets\n- ``strbool`` trafaret renamed to ``tobool``\n- ``visitor`` trafaret was deleted\n- test coverage\n\n1.x.x\n=====\n\n* converters and ``convert=false`` are deleted in favor of ``and`` and ``&``\n* ``string`` parameter ``regex`` deleted in favor of ``regexp`` and ``regexpraw`` usage\n* new ``onerror`` to customize error message\n* ``context=something`` argument for ``__call__`` and ``check`` trafaret methods.\n  supported by ``or``, ``and``, ``forward`` etc.\n* new customizable method ``transform`` like ``change_and_return`` but takes ``context=`` arg\n* new ``trafaret_instance.async_check`` method that works with ``await``\n\ndoc\n---\n\nfor simple example what can be done:\n\n.. code-block:: python\n\n    import datetime\n    import trafaret as t\n\n    date = t.dict(year=t.int, month=t.int, day=t.int) >> (lambda d: datetime.datetime(**d))\n    assert date.check({'year': 2012, 'month': 1, 'day': 12}) == datetime.datetime(2012, 1, 12)\n\nwork with regex:\n\n.. code-block:: python\n\n    >>> c = t.regexpraw(r'^name=(\\w+)$') >> (lambda m: m.group(1))\n    >>> c.check('name=jeff')\n    'jeff'\n\nrename dict keys:\n\n.. code-block:: python\n\n    >>> c = t.dict({(t.key('unj') >> 'user_name'): t.string})\n    >>> c.check({'unj': 'adam'})\n    {'user_name': 'adam'}\n\n``arrow`` date checking:\n\n.. code-block:: python\n\n    import arrow\n\n    def check_datetime(str):\n        try:\n            return arrow.get(str).naive\n        except arrow.parser.parsererror:\n            return t.dataerror('value is not in proper date/time format')\n\nyes, you can write trafarets that simple.\n\n\nrelated projects\n----------------\n\n`trafaret config <https://github.com/tailhook/trafaret-config>`_\n\n`trafaret validator <https://github.com/lex0ne/trafaret_validator>`_\n\n\n.. _docs/intro.rst: docs/intro.rst\n\n.. |circleci_build| image:: https://circleci.com/gh/deepwalker/trafaret.svg?style=shield\n    :target: https://circleci.com/gh/deepwalker/trafaret\n    :alt: build status @ circle ci\n\n.. |gitter_chat| image:: https://badges.gitter.im/deepwalker/trafaret.svg\n    :target: https://gitter.im/deepwalker/trafaret\n    :alt: gitter chat\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/trafaret.svg?style=flat-square\n    :target: https://pypi.org/p/trafaret\n    :alt: latest release\n\n.. |pypi_license| image:: https://img.shields.io/pypi/l/trafaret.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/trafaret\n    :alt: bsd license\n",
  "docs_url": null,
  "keywords": "validation form forms data schema",
  "license": "bsd",
  "name": "trafaret",
  "package_url": "https://pypi.org/project/trafaret/",
  "project_url": "https://pypi.org/project/trafaret/",
  "project_urls": {
    "Homepage": "https://github.com/Deepwalker/trafaret/"
  },
  "release_url": "https://pypi.org/project/trafaret/2.1.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "validation and parsing library",
  "version": "2.1.1",
  "releases": [],
  "developers": [
    "barbuza",
    "krivushinme@gmail.com"
  ],
  "kwds": "trafaret_validator validator validation trafaret_schema dict",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_trafaret",
  "homepage": "https://github.com/deepwalker/trafaret/",
  "release_count": 75,
  "dependency_ids": []
}
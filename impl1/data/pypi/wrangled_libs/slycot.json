{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved",
    "license :: osi approved :: bsd license",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: c",
    "programming language :: fortran",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "slycot\n======\n\n.. image:: https://img.shields.io/pypi/v/slycot.svg\n   :target: https://pypi.org/project/slycot/\n\n.. image:: https://anaconda.org/conda-forge/slycot/badges/version.svg\n   :target: https://anaconda.org/conda-forge/slycot\n\n.. image:: https://github.com/python-control/slycot/workflows/build%20and%20test%20slycot/badge.svg\n   :target: https://github.com/python-control/slycot/actions\n\n.. image:: https://coveralls.io/repos/github/python-control/slycot/badge.svg?branch=master\n   :target: https://coveralls.io/github/python-control/slycot?branch=master\n\npython wrapper for selected slicot routines, notably including solvers for\nriccati, lyapunov, and sylvester equations.\n\ndependencies\n------------\n\nslycot supports python versions 3.8 or later.\n\nto run the compiled slycot package, the following must be installed as\ndependencies:\n\n- python 3.8+\n- numpy\n\nif you are compiling and installing slycot from source, you will need the\nfollowing dependencies:\n\n- python 3.8+\n- numpy\n- scikit-build\n- cmake\n- c compiler (e.g. gcc, ms visual c++, clang)\n- fortran compiler (e.g. gfortran, ifort, flang)\n- blas/lapack (e.g. openblas, atlas, mkl)\n\nto run the slycot unit tests and examples, you'll also need scipy and\npytest.\n\nthere are a variety of ways to install these dependencies on different\noperating systems. see the individual packages' documentation for options.\n\ninstalling\n----------\n\nthe easiest way to get started with slycot is to install pre-compiled\nbinaries from conda-forge (see below); these are available for linux,\nosx, and windows.\n\ncompiling the slycot source is unfortunately a bit tricky, especially\non windows, but we give some pointers further below for doing this.\n\nusing conda and conda-forge\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfirst install miniconda or anaconda.  slycot can then be installed\nfrom the conda-forge channel with the following command::\n\n    conda install -c conda-forge slycot\n\n\ncompiling from source\n---------------------\n\nthe hardest part about installing from source is getting a working\nversion of fortran and lapack (provided by openblas, mkl, etc.)\ninstalled on your system. depending on where you get your numpy and scipy\nfrom, you will need to use a compatible lapack implementation. make sure that\nthe correct header files are installed, and specify the cmake variable\n`bla_vendor`_, if necessary. we recommend to use `bla_vendor=generic` in order\nto produce a slycot module, which is binary compatible with all implementations.\n\n.. _bla_vendor: https://cmake.org/cmake/help/latest/module/findblas.html#input-variables\n\ncompiling the pypi source with pip\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwe publish slycot to the python package index, but only as a source\npackage, so to install using pip you'll first need to install the\nbuild prerequisites (compilers, libraries, etc.)\n\nif you have these build prerequisites, the command::\n\n    pip install slycot\n\nwill download the latest release of the source code from `pypi`_, compile, and\ninstall slycot into the currently configured location (virtual environment or\nuser site-packages).\n\ngetting the full source code\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nget it from pypi\n^^^^^^^^^^^^^^^^\n\nget the source code of the latest release is available from `pypi`_. it\ncontains both the python to fortran wrappers as well as the slicot-reference\nfortran sources.\n\n.. _pypi: https://pypi.org/project/slycot\n\nget it from github archives\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you decide to download a source code archive from github (tagged release or\na specific branch), you also have to get the correct version of our\nslicot-reference fork and place it into ``slycot/src/slicot-reference``:\n \n1. download and unpack https://github.com/python-control/slycot/archive/master.zip\n2. go to https://github.com/python-control/slycot/master/slycot/src\n3. follow the link of ``slicot-reference @ <commit-id>``\n4. download the archive of slicot-reference from the code download button\n   (``https://github.com/python-control/slicot-reference/archive/<commit-id>.zip``)\n5. unpack the contents of the slicot-reference archive into\n   ``slycot/src/slicot-reference``\n\nreplace ``master`` with the release tag or branch name, which you want to build.\n\nclone the git repository\n^^^^^^^^^^^^^^^^^^^^^^^^\n\ndirectly checkout the submodule, when cloning the git repository::\n\n    git clone --recurse-submodules https://github.com/python-control/slycot.git\n\nor if you forked the repository::\n\n    git clone --recurse-submodules https://github.com/<your-username>/slycot.git\n\nif you already have a local checkout, but still need to init the submodule::\n\n    git submodule init\n    git submodule update\n\ncompiling the source (linux, macos, windows)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nif you need to specify a specific compiler, set the environment variable fc\nbefore running the install::\n\n    # linux/osx:\n    export fc=/path/to/my/fortran\n\n    # windows:\n    set fc=d:\\path\\to\\my\\fortran.exe\n\nto build and install, execute::\n\n    cd /path/to/slycot_src/\n    pip install -v .\n\nusing the conda recipe\n~~~~~~~~~~~~~~~~~~~~~~\n\nyou can use conda to compile and install slycot from source. the recipe is\nlocated in the folder ``conda-recipe`` and is intended to work for all\nplatforms.\n\nthe ``conda-forge`` channel provides almost all requirements to compile\nslycot with `conda-build`_, except:\n\n- on macos, you need the macos sdk. see the\n  `conda-build documentation for macos`_ how to get it.\n- on windows, you need to install `microsoft visual c++ 14.x`_ provided e.g.\n  by `microsoft visual studio`_.  to build, you'll need a command shell setup\n  for both conda and the visual studio build tools.  see `conda activation`_\n  and `microsoft visual studio setup`_ for information on this.\n\n.. _conda-build: https://docs.conda.io/projects/conda-build/en/latest/resources/commands/conda-build.html\n.. _conda-build documentation for macos: https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html#macos-sdk\n.. _microsoft visual c++ 14.x: https://wiki.python.org/moin/windowscompilers\n.. _microsoft visual studio: https://visualstudio.microsoft.com/de/vs/\n.. _conda activation: https://docs.conda.io/projects/conda/en/latest/user-guide/troubleshooting.html#windows-environment-has-not-been-activated\n.. _microsoft visual studio setup: https://docs.microsoft.com/en-us/cpp/build/setting-the-path-and-environment-variables-for-command-line-builds\n\nto build and install::\n\n    conda build -c conda-forge conda-recipe\n    conda install -c conda-forge --use-local slycot\n\nbuilding from source manually in a conda environment (windows)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na similar method can be used for linux and macos, but is detailed here\nfor windows.  this method uses conda and conda-forge to get most build\ndependencies, *except* for the c compiler.\n\nthis procedure has been tested on python 3.8.\n\n1. install `microsoft visual studio`_.\n2. unpack the source code to a directory of your choice,\n3. create a command shell setup that can run the conda commands and the visual\n   studio build tools (see above)\n4. in such a command shell, within the slycot source code directory, run the\n   following commands to build and install slycot (this example creates a\n   python 3.8 environment)::\n\n        conda create --channel conda-forge --name build-slycot python=3.8 numpy scipy libblas=*=*netlib liblapack=*=*netlib scikit-build flang pytest\n        conda activate build-slycot\n\n        pip install -v .\n\nadditional hints\n~~~~~~~~~~~~~~~~\n\nadditional hints for how to install slycot from source can be found in the\n`.github`_ directory , (commands used to build and test in the github actions\nci), the `logs from the github actions`_, and the ``conda-recipe`` directory\n(conda pre-requisites, install and test commands) which is included\nin the source code repository.\n\n.. _.github: https://github.com/python-control/slycot/tree/master/.github\n.. _`logs from the github actions`: https://github.com/python-control/slycot/actions\n\ntesting\n-------\nto test if the installation was successful, you can run the slycot unit tests::\n\n    pytest --pyargs slycot\n\nyou may also run the tests by calling ``slycot.test()`` from within the python\ninterpreter::\n\n    import slycot\n    slycot.test()\n\nimporting ``slycot`` or running ``pytest`` without ``--pyargs slycot`` from\ninside the source directory will fail, unless the compiled wrapper library has\nbeen installed into that directory. note that the ``[tool:pytest]`` section\nin ``setup.cfg`` enforces the ``--pyargs slycot`` argument by default.\n\nlicense\n-------\nup until version 0.4, slycot used a version of slicot that was released under\nthe gplv2 license. this requires slycot to be released under the same license. in\ndecember 2020, slicot 5.7 was released under bsd-3-clause. however, as the\nexisting slycot wrappers have been submitted by many contributors, we cannot\nmove away from gplv2 unless we get the permission to do so by all authors.\nthus, slycot remains licensed under gplv2 until further notice.\n",
  "docs_url": null,
  "keywords": "",
  "license": "gpl-2.0 and bsd-3-clause",
  "name": "slycot",
  "package_url": "https://pypi.org/project/slycot/",
  "project_url": "https://pypi.org/project/slycot/",
  "project_urls": {
    "homepage": "https://github.com/python-control/Slycot"
  },
  "release_url": "https://pypi.org/project/slycot/0.5.4/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "a wrapper for the slicot control and systems library",
  "version": "0.5.4",
  "releases": [],
  "developers": [
    "enrico_avventi_et_al",
    "python-control-discuss@lists.sourceforge.net"
  ],
  "kwds": "slicot slycot_src python slycot pyargs",
  "license_kwds": "gpl-2.0 and bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_slycot",
  "homepage": "",
  "release_count": 11,
  "dependency_ids": []
}
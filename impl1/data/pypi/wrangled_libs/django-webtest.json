{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: testing"
  ],
  "description": "==============\ndjango-webtest\n==============\n\n.. image:: https://img.shields.io/pypi/v/django-webtest.svg\n   :target: https://pypi.python.org/pypi/django-webtest\n   :alt: pypi version\n\n.. image:: https://img.shields.io/github/license/kmike/django-webtest.svg\n   :target: https://github.com/django-webtest/django-webtest/blob/master/license.txt\n   :alt: license\n\n.. image:: https://img.shields.io/travis/django-webtest/django-webtest/master.svg\n   :target: http://travis-ci.org/django-webtest/django-webtest\n   :alt: build status\n\ndjango-webtest is an app for instant integration of ian bicking's\nwebtest (http://docs.pylonsproject.org/projects/webtest/) with django's\ntesting framework.\n\ninstallation\n============\n\n.. code-block:: console\n\n    $ pip install django-webtest\n\nusage\n=====\n\n.. code-block:: python\n\n    from django_webtest import webtest\n\n    class mytestcase(webtest):\n\n        # optional: we want some initial data to be able to login\n        fixtures = ['users', 'blog_posts']\n\n        # optional: default extra_environ for this testcase\n        extra_environ = {'http_accept_language': 'ru'}\n\n        def testblog(self):\n            # pretend to be logged in as user `kmike` and go to the index page\n            index = self.app.get('/', user='kmike')\n\n            # all the webtest api is available. for example, we click\n            # on a <a href='/tech-blog/'>blog</a> link, check that it\n            # works (result page doesn't raise exceptions and returns 200 http\n            # code) and test if result page have 'my article' text in\n            # its body.\n            assert 'my article' in index.click('blog')\n\ndjango-webtest provides a django.test.testcase subclass\n(``django_webtest.webtest``) that creates ``webtest.testapp`` around\ndjango wsgi interface and makes it available in tests as ``self.app``.\n\nit also features an optional ``user`` argument for ``self.app.get``,\n``self.app.post``, etc. to help making authorized requests. this argument\nshould be a django.contrib.auth.models.user instance or a string with user's\n``username`` for the user who is supposed to be logged in. to log out again,\ncall ``self.app.reset``, clearing all cookies.  to make a bunch of calls\nwith the same user, call ``app.set_user(user)`` before your requests; if\nyou want to disable that user, call ``app.get(..., user=none)`` for one\nrequest or ``app.set_user(none)`` to unset the user for all following calls.\n\nfor 500 errors original traceback is shown instead of usual html result\nfrom handler500.\n\nyou also get the ``response.templates`` and ``response.context`` goodness that\nis usually only available if you use django's native test client. these\nattributes contain a list of templates that were used to render the response\nand the context used to render these templates. all of django's native asserts (\n``assertformerror``,  ``asserttemplateused``, ``asserttemplatenotused``,\n``assertcontains``, ``assertnotcontains``, ``assertredirects``) are\nalso supported for webtest responses.\n\nthe session dictionary is available via ``self.app.session``, and has the\nsame content than django's native test client.\n\nunlike django's native test client csrf checks are not suppressed\nby default so missing csrf tokens will cause test fails (and that's good).\n\nif forms are submitted via webtest forms api then all form fields (including\ncsrf token) are submitted automagically:\n\n.. code-block:: python\n\n    class authtest(webtest):\n        fixtures = ['users.json']\n\n        def test_login(self):\n            form = self.app.get(reverse('auth_login')).form\n            form['username'] = 'foo'\n            form['password'] = 'bar'\n            response = form.submit().follow()\n            self.assertequal(response.context['user'].username, 'foo')\n\nhowever if forms are submitted via raw post requests using ``app.post`` then\ncsrf tokens become hard to construct. csrf checks can be disabled by setting\n``csrf_checks`` attribute to false in this case:\n\n.. code-block:: python\n\n    class mytestcase(webtest):\n        csrf_checks = false\n\n        def test_post(self):\n            self.app.post('/')\n\nwhen a subclass of django's ``transactiontestcase`` is desired,\nuse ``django_webtest.transactionwebtest``.\n\nfor disabling csrf checks in a ``pytest-django`` fixture, see\n`usage with pytest`_.\n\nall of these features can be easily set up manually (thanks to webtest\narchitecture) and they are even not neccessary for using webtest with django but\nit is nice to have some sort of integration instantly.\n\nsee http://docs.pylonsproject.org/projects/webtest/ for api help. webtest can\nfollow links, submit forms, parse html, xml and json responses with different\nparsing libraries, upload files and more.\n\nintegration with django-rest-framework\n======================================\n\nif your project uses django-rest-framework__, the setting\n``rest_framework['authentication_classes']`` will be patched\nautomatically to include a class that links the rest-framework\nauthentication system with ``app.get(user=user)``.\n\n.. __: https://www.django-rest-framework.org/\n\nusage with pytest\n=================\n\nyou need to install `pytest-django <https://pytest-django.readthedocs.io>`_:\n\n.. code-block:: console\n\n    $ pip install pytest-django\n\nthen you can use ``django-webtest``'s fixtures:\n\n.. code-block:: python\n\n    def test_1(django_app):\n        resp = django_app.get('/')\n        assert resp.status_code == 200, 'should return a 200 status code'\n\nwe have a ``django_app_factory`` fixture we can use to create custom fixtures.\nfor example, one that doesn't do csrf checks:\n\n.. code-block:: python\n\n    # conftest.py\n\n    @pytest.fixture\n    def csrf_exempt_django_app(django_app_factory):\n        return django_app_factory(csrf_checks=false)\n\n``csrf_checks`` and ``extra_environ`` are the only arguments to\n``django_app_factory``.\n\n\nwhy?\n====\n\nwhile django.test.client.client is fine for its purposes, it is not\nwell-suited for functional or integration testing. from django's test client\ndocstring:\n\n    this is not intended as a replacement for twill/selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    html rendered to the end-user.\n\nwebtest plays on the same field as twill. webtest has a nice api,\nis fast, small, talks to the django application via wsgi instead of http\nand is an easy way to write functional/integration/acceptance tests.\ndjango-webtest is able to provide access to the names of rendered templates\nand template context just like native django testclient.\n\ncontributing\n============\n\ndevelopment happens at github: https://github.com/django-webtest/django-webtest\nissue tracker: https://github.com/django-webtest/django-webtest/issues\n\nfeel free to submit ideas, bugs or pull requests.\n\nrunning tests\n-------------\n\nmake sure `tox`_ is installed and run:\n\n.. code-block:: console\n\n    $ tox\n\nfrom the source checkout.\n\n.. _tox: http://tox.testrun.org\n\n\n\nchanges\n=======\n\n1.9.11 (2023-09-18)\n-------------------\n\n- add support for official python & django versions\n\n- do not insert  webtestauthentication to the head of default_authentication_classes.\n\n1.9.10 (2022-03-02)\n-------------------\n\n- add an optional webtest backend that does not interfere with handling of permissions by\n  custom backends. accessible via webtest_authentication_backend setting. fixed #123\n\n\n1.9.9 (2021-12-27)\n------------------\n\n- add django 4 support\n\n- remove django 2 support\n\n\n1.9.8 (2021-10-06)\n------------------\n\n- update testing configurations for django and python as per django documentation\n    - https://docs.djangoproject.com/en/3.0/faq/install/#what-python-version-can-i-use-with-django\n\n- add some useful metadata for the project's pypi listing\n\n- minor changes to documentation\n\n- update getting session in djangotestapp.  fixed #113\n\n- remove py27/py35 support\n\n\n1.9.7 (2019-07-05)\n------------------\n\n- allow overriding http_host with djangotestapp.__init__. fixed #102\n\n\n1.9.6 (2019-06-07)\n------------------\n\n- rest_framework auth class. fixed #98 #100\n\n\n1.9.5 (2019-05-31)\n------------------\n\n- fix compatibility with django 3. see #96\n\n- add integration with django-rest-framework auth\n\n- add missing args to djangotestapp. fixed #86\n\n\n1.9.4 (2018-10-27)\n------------------\n\n- py34 and django 1.8 are no longer tested (but may works)\n\n- allow to use positionnal args; fixed #89\n\n- remove deprecated pytest.yield_fixture functions. use pytest.fixture instead;\n  fixed #88\n\n- don't add duplicate webtestusermiddleware to the list of middlewares in\n  webtestmixin. fixed #87\n\n- restore middleware_classes support; fixed #84\n\n\n1.9.3 (2018-05-03)\n------------------\n\n- passing `user=none` to get/post/etc. methods will clear a user\n  previously set with `set_user` instead of doing nothing.\n\n- avoid sharing settings between tests in pytest plugin\n\n- fix middleware settings name used\n\n\n1.9.2 (2017-05-17)\n------------------\n\n- silence warnings about is_authenticated on 1.11\n\n- include correct hostname (testserver) when using set_cookie\n\n\n1.9.1 (2017-03-09)\n------------------\n\n- fix package description (multiline are no longer allowed by pypi)\n\n\n1.9.0 (2017-03-09)\n------------------\n\n- backward incompatibility: positionnal arguments are no longer supported.\n  you'll need to replace them by keywords arguments.\n\n- added support for django 1.11\n\n- dropped support for django <= 1.7\n\n- dropped support for python 2.6\n\n- changed value of `http_host` header from `localhost` to `testserver`, to\n  match behaviour of django test client.\n\n- fixed `djangotestapp.options`\n\n- added `djangotestapp.head`\n\n- added pytest fixtures\n\n\n1.8.0 (2016-09-14)\n------------------\n\n- fixed issue #40 - combining ``app.get`` ``auto_follow=true`` with other\n  keyword args.\n\n- add compatibility to the middleware setting introduced in django 1.10\n\n- drop support for django 1.2\n\n1.7.9 (2016-04-19)\n------------------\n\n- add set_user() to allow to set a user globally for the app\n\n- allow 'click' to be given a user param\n\n- mention testapp.reset() in readme\n\n- allow to use ``json_`` methods\n\n1.7.8 (2015-04-21)\n------------------\n\n- setup.py is switched to setuptools; webtest is now installed automatically\n  (thanks eric araujo);\n- importlib from stdlib is used when available, for django 1.9 compatibility\n  (thanks helen sherwood-taylor);\n- django-webtest's own tests are fixed to work in django 1.6+;\n- https://bitbucket.org/kmike/django-webtest repository is no longer supported.\n\n1.7.7 (2014-03-25)\n------------------\n\n- fix installation for python 3.x on systems with c locales.\n\n1.7.6 (2014-01-20)\n------------------\n\n- djangotestapp methods pass all custom keyword arguments to webtest.testapp;\n  this allows to use ``xhr=true`` feature (thanks max kharandziuk).\n- travis ci testing fixes (thanks darian moody).\n\n1.7.5 (2013-07-17)\n------------------\n\n- options method is fixed;\n- added workaround for delete method warnings\n  (see https://github.com/pylons/webtest/issues/50).\n\n1.7.4 (2013-07-14)\n------------------\n\n- really add ``transactionwebtest`` base class (thanks julien aubert).\n\n1.7.3 (2013-07-07)\n------------------\n\n- added support for patch and options http methods (thanks will bradley).\n\n1.7.2 (2013-06-27)\n------------------\n\n- ``transactionwebtest`` base class is added (thanks iurii kriachko).\n\n1.7.1 (2013-06-11)\n------------------\n\n- added support for non-ascii usernames.\n\n1.7 (2013-05-23)\n----------------\n\n- added support for django 1.6 (thanks carl meyer).\n\n1.6.1 (2013-03-31)\n------------------\n\n- added support for django 1.5+ custom user models (thanks gautier hayoun).\n\n1.6 (2013-03-07)\n----------------\n\n- added ability to pass a custom response_class and app_class to webtest\n  (thanks bruno reni\u00e9);\n- added case-insensitive header access in djangowebtestresponse (thanks\n  bruno reni\u00e9).\n\n1.5.7 (2013-02-27)\n------------------\n\n- webtest 2.0 support.\n\n1.5.6 (2013-01-21)\n------------------\n\n- django 1.5 support: transaction handling is fixed (thanks marco braak).\n\n1.5.5 (2013-01-14)\n------------------\n\n- fixed django 1.5 support: djangowebtestresponse.streaming attribute\n  is added (thanks david winterbottom).\n\n1.5.4 (2012-09-13)\n------------------\n\n- fix django 1.5 issues with adminmediahandler (thanks tai lee);\n- tox.ini is updated to use latest django versions and the\n  official trunk with python3 support;\n- django 1.5 simplecookie issues are fixed.\n\n1.5.3 (2012-04-25)\n------------------\n\n- self.assertredirects is fixed for authenticated requests.\n\n1.5.2 (2012-04-01)\n------------------\n\n- if authenticationmiddleware is not in a middleware list,\n  webtestusermiddleware is put to the end of middlewares in order to\n  provide better backward compatibility with 1.4.x in case of custom\n  auth middlewares.\n\n1.5.1 (2012-03-22)\n------------------\n\n- fixed handling of forms with method=\"get\". thanks jeroen vloothuis.\n\n1.5 (2012-02-24)\n----------------\n\n- webtestusermiddleware is inserted after authenticationmiddleware, not to\n  the end of middleware list (thanks bigkevmcd);\n- don't list python 2.5 as supported because webob dropped 2.5 support;\n- python 3 support;\n- test running using tox.\n\n1.4.4 (2012-02-08)\n------------------\n\n- 'user' parameter for ``self.app.put`` and ``self.app.delete`` methods (thanks\n  ruslan popov).\n\n1.4.3 (2011-09-27)\n------------------\n\n- the django session dictionary is available via ``self.app.session``.\n\n1.4.2 (2011-08-26)\n------------------\n\n- ``remote_addr`` is now ``'127.0.0.1'`` by default. this is how\n  standard django's test client behave.\n\n  please note that this can slow tests down and cause other side effects\n  if django-debug-toolbar 0.9.x is installed+configured and\n  ``internal_ips`` contain ``'127.0.0.1'`` because debug toolbar will\n  become turned on during tests. the workaround is to remove\n  django-debug-toolbar middleware during tests in your test settings::\n\n      debug_middleware = 'debug_toolbar.middleware.debugtoolbarmiddleware'\n      if debug_middleware in middleware_classes:\n          middleware_classes.remove(debug_middleware)\n\n\n1.4.1 (2011-06-29)\n------------------\n\n- ``self.renew_app()`` method for resetting the 'browser' inside tests.\n\n1.4 (2011-06-23)\n----------------\n\n- better auth implementation;\n- support for assertredirects, assertcontains and assertnotcontains.\n\n1.3 (2010-12-31)\n----------------\n\n- django 1.3 compatibility: test responses are now having 'templates' attribute;\n- django 1.3 compatibility: the way exceptions are handled is changed;\n- auto_follow parameter for app.get method (redirect chains will be\n  auto-followed with auto_follow=true).\n\n1.2.1 (2010-08-24)\n------------------\n\n- remote_user authorization can be disabled.\n\n1.2 (2010-08-21)\n----------------\n\n- ``response.template`` and ``response.context`` goodness (thanks gregor m\u00fcllegger);\n- tests (thanks gregor m\u00fcllegger);\n- csrf checks are now optional (thanks gregor m\u00fcllegger).\n\n1.1.1 (2010-07-16)\n------------------\n\n- user instance can be passed to `get` and `post` methods instead\n  of user's username.\n\n1.1 (2010-06-15)\n----------------\n\n- original traceback instead of html 500 error page;\n- per-testcase extra_environ (thanks gael pasgrimaud);\n- fixed a bug with app.post parameters (thanks anonymous).\n\n\n1.0 (2010-04-20)\n----------------\ninitial release (thanks ian bicking for webtest).\n\n\n",
  "docs_url": null,
  "keywords": "django,webtest,pytest",
  "license": "mit license",
  "name": "django-webtest",
  "package_url": "https://pypi.org/project/django-webtest/",
  "project_url": "https://pypi.org/project/django-webtest/",
  "project_urls": {
    "Changelog": "https://github.com/django-webtest/django-webtest/blob/master/CHANGES.rst",
    "Code": "https://github.com/django-webtest/django-webtest",
    "Homepage": "https://github.com/django-webtest/django-webtest",
    "Issue Tracker": "https://github.com/django-webtest/django-webtest/issues"
  },
  "release_url": "https://pypi.org/project/django-webtest/1.9.11/",
  "requires_dist": [
    "webtest (>=1.3.3)"
  ],
  "requires_python": "",
  "summary": "instant integration of ian bicking's webtest (http://docs.pylonsproject.org/projects/webtest/) with django's testing framework.",
  "version": "1.9.11",
  "releases": [],
  "developers": [
    "kmike84@gmail.com",
    "mikhail_korobov"
  ],
  "kwds": "django_webtest djangotestapp webtestmixin webtestusermiddleware djangoproject",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_django_webtest",
  "homepage": "https://github.com/django-webtest/django-webtest",
  "release_count": 49,
  "dependency_ids": [
    "pypi_webtest"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: plugins",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: version control",
    "topic :: software development :: version control :: bazaar",
    "topic :: software development :: version control :: git",
    "topic :: software development :: version control :: mercurial"
  ],
  "description": "# dynamic versioning plugin for poetry\nthis is a python 3.7+ plugin for [poetry 1.2.0+](https://github.com/sdispater/poetry)\nand [poetry core 1.0.0+](https://github.com/python-poetry/poetry-core)\nto enable dynamic versioning based on tags in your version control system,\npowered by [dunamai](https://github.com/mtkennerly/dunamai). many different\nversion control systems are supported, including git and mercurial; please\nrefer to the dunamai page for the full list (and minimum supported version\nwhere applicable).\n\n`poetry-dynamic-versioning` provides a build backend that patches poetry core\nto enable the versioning system in pep 517 build frontends.\nwhen installed with the `plugin` feature (i.e., `poetry-dynamic-versioning[plugin]`),\nit also integrates with the poetry cli to trigger the versioning in commands like `poetry build`.\n\nfor poetry 1.1.x, you can use an older version of `poetry-dynamic-versioning` (0.17.1 or earlier)\nthat relied on a `*.pth` import hack, but this is no longer supported,\nso you should migrate to the standardized plugin and poetry 1.2.0+.\n\n## installation\nif you've previously installed the deprecated `poetry-dynamic-versioning-plugin` package,\nbe sure to uninstall it before proceeding.\n\n* run: `poetry self add \"poetry-dynamic-versioning[plugin]\"`\n* run in your project: `poetry dynamic-versioning enable`\n\n  or you can update your pyproject.toml manually:\n\n  ```toml\n  [tool.poetry-dynamic-versioning]\n  enable = true\n  ```\n\n  include the plugin in the `build-system` section of pyproject.toml\n  for interoperability with pep 517 build frontends:\n\n  ```toml\n  [build-system]\n  requires = [\"poetry-core>=1.0.0\", \"poetry-dynamic-versioning>=1.0.0,<2.0.0\"]\n  build-backend = \"poetry_dynamic_versioning.backend\"\n  ```\n\n  this is a thin wrapper around `poetry.core.masonry.api`.\n\npoetry still requires the `tool.poetry.version` field to be present in pyproject.toml,\nbut you are encouraged to use `version = \"0.0.0\"` as a standard placeholder.\n\nwith the minimal configuration above,\nthe plugin will automatically take effect when you run commands such as `poetry build`.\nit will update the version in pyproject.toml, then revert the change when the plugin deactivates.\n\nthe default configuration will also update any pre-existing\n`__version__ = \"0.0.0\"` and `__version_tuple__ = (0, 0, 0)` placeholders in some files.\nyou can configure additional substitution patterns/files as needed (see below).\n\n## configuration\nin your pyproject.toml file, you may configure the following options:\n\n* `[tool.poetry-dynamic-versioning]`: general options.\n  * `enable` (boolean, default: false): since the plugin has to be installed\n    globally, this setting is an opt-in per project. this setting will likely\n    be removed once plugins are officially supported.\n  * `vcs` (string, default: `any`): this is the version control system to check for a version.\n    one of: `any`, `git`, `mercurial`, `darcs`, `bazaar`, `subversion`, `fossil`, `pijul`.\n  * `metadata` (boolean, default: unset): if true, include the commit hash in\n    the version, and also include a dirty flag if `dirty` is true. if unset,\n    metadata will only be included if you are on a commit without a version tag.\n    this is ignored when `format` or `format-jinja` is used.\n  * `tagged-metadata` (boolean, default: false): if true, include any tagged\n    metadata discovered as the first part of the metadata segment.\n    has no effect when `metadata` is set to false.\n    this is ignored when `format` or `format-jinja` is used.\n  * `dirty` (boolean, default: false): if true, include a dirty flag in the\n    metadata, indicating whether there are any uncommitted changes.\n    has no effect when `metadata` is set to false.\n    this is ignored when `format` or `format-jinja` is used.\n  * `pattern` (string): this is a regular expression which will be used to find\n    a tag representing a version. when this is unset, dunamai's default pattern is used.\n\n    there must be a capture group named `base`\n    with the main part of the version. optionally, it may contain another two\n    groups named `stage` and `revision` for prereleases, and it may contain a\n    group named `tagged_metadata` to be used with the `tagged-metadata` option.\n    there may also be a group named `epoch` for the pep 440 concept.\n\n    if the `base` group is not included, then this will be interpreted as a\n    named preset from the dunamai `pattern` class. this includes:\n    `default`, `default-unprefixed` (makes the `v` prefix optional).\n\n    you can check the default for your installed version of dunamai by running this command:\n    ```\n    poetry run python -c \"import dunamai; print(dunamai.pattern.default.regex())\"\n    ```\n\n    remember that backslashes must be escaped (`\\\\`) in the toml file.\n  * `format` (string, default: unset): this defines a custom output format for\n    the version. available substitutions:\n\n    * `{base}`\n    * `{stage}`\n    * `{revision}`\n    * `{distance}`\n    * `{commit}`\n    * `{dirty}`\n    * `{tagged_metadata}`\n    * `{branch}`\n    * `{branch_escaped}` which omits any non-letter/number characters\n    * `{timestamp}` of the current commit, which expands to yyyymmddhhmmss as utc\n\n    example: `v{base}+{distance}.{commit}`\n  * `format-jinja` (string, default: unset): this defines a custom output format\n    for the version, using a [jinja](https://pypi.org/project/jinja2) template.\n    when this is set, `format` is ignored.\n\n    available variables:\n\n    * `base` (string)\n    * `stage` (string or none)\n    * `revision` (integer or none)\n    * `distance` (integer)\n    * `commit` (string)\n    * `dirty` (boolean)\n    * `tagged_metadata` (string or none)\n    * `version` (dunumai.version)\n    * `env` (dictionary of environment variables)\n    * `branch` (string or none)\n    * `branch_escaped` (string or none)\n    * `timestamp` (string or none)\n\n    available functions:\n\n    * `bump_version` ([from dunamai](https://github.com/mtkennerly/dunamai/blob/fe69436133d0ea2097a9fed1dbb31ec96263cf83/dunamai/__init__.py#l1965-l1977))\n    * `serialize_pep440` ([from dunamai](https://github.com/mtkennerly/dunamai/blob/fe69436133d0ea2097a9fed1dbb31ec96263cf83/dunamai/__init__.py#l1863-l1886))\n    * `serialize_semver` ([from dunamai](https://github.com/mtkennerly/dunamai/blob/fe69436133d0ea2097a9fed1dbb31ec96263cf83/dunamai/__init__.py#l1917-l1931))\n    * `serialize_pvp` ([from dunamai](https://github.com/mtkennerly/dunamai/blob/fe69436133d0ea2097a9fed1dbb31ec96263cf83/dunamai/__init__.py#l1945-l1954))\n\n    simple example:\n\n    ```toml\n    format-jinja = \"{% if distance == 0 %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}\"\n    ```\n\n    complex example:\n\n    ```toml\n    format-jinja = \"\"\"\n        {%- if distance == 0 -%}\n            {{ serialize_pep440(base, stage, revision) }}\n        {%- elif revision is not none -%}\n            {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}\n        {%- else -%}\n            {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}\n        {%- endif -%}\n    \"\"\"\n    ```\n  * `format-jinja-imports` (array of tables, default: empty): this defines\n    additional things to import and make available to the `format-jinja`\n    template. each table must contain a `module` key and may also contain an\n    `item` key. consider this example:\n\n    ```toml\n    format-jinja-imports = [\n        { module = \"foo\" },\n        { module = \"bar\", item = \"baz\" },\n    ]\n    ```\n\n    this is roughly equivalent to:\n\n    ```python\n    import foo\n    from bar import baz\n    ```\n\n    `foo` and `baz` would then become available in the jinja formatting.\n  * `style` (string, default: unset): one of: `pep440`, `semver`, `pvp`.\n    these are preconfigured output formats. if you set both a `style` and\n    a `format`, then the format will be validated against the style's rules.\n    if `style` is unset, the default output format will follow pep 440,\n    but a custom `format` will only be validated if `style` is set explicitly.\n  * `latest-tag` (boolean, default: false): if true, then only check the latest\n    tag for a version, rather than looking through all the tags until a suitable\n    one is found to match the `pattern`.\n  * `bump` (boolean, default: false): if true, then increment the last part of\n    the version `base` by 1, unless the `stage` is set, in which case increment\n    the `revision` by 1 or set it to a default of 2 if there was no `revision`.\n    does nothing when on a commit with a version tag.\n\n    example, if there have been 3 commits since the `v1.3.1` tag:\n    * pep 440 with `bump = false`: `1.3.1.post3.dev0+28c1684`\n    * pep 440 with `bump = true`: `1.3.2.dev3+28c1684`\n  * `tag-dir` (string, default: `tags`): this is the location of tags relative\n    to the root. this is only used for subversion.\n  * `tag-branch` (string, default: unset): branch on which to find tags, if different than the\n    current branch. this is only used for git currently.\n  * `full-commit` (boolean, default: false): if true, get the full commit hash\n    instead of the short form. this is only used for git and mercurial.\n  * `strict` (boolean, default: false):\n    if true, then fail instead of falling back to 0.0.0 when there are no tags.\n  * `fix-shallow-repository` (boolean, default: false):\n    if true, then automatically try to fix shallow repositories.\n    currently, this only supports git and will run `git fetch --unshallow`.\n* `[tool.poetry-dynamic-versioning.substitution]`: insert the dynamic version\n  into additional files other than just pyproject.toml. these changes will be\n  reverted when the plugin deactivates.\n  * `files` (array of strings): globs for any files that need substitutions. default:\n    `[\"*.py\", \"*/__init__.py\", \"*/__version__.py\", \"*/_version.py\"]`.\n    to disable substitution, set this to an empty list.\n  * `patterns` (array of strings/tables): regular expressions for the text to replace.\n    each regular expression must have two capture groups, which are any\n    text to preserve before and after the replaced text.\n\n    string items are interpreted as a regular expression directly.\n    table items support these keys:\n    * `value` (string): this is the regular expression.\n    * `mode` (string, optional): this controls how the version should be inserted. options:\n      * `str` (default): serialize version as-is.\n        the capture groups should already include the surrounding quotation marks.\n      * `tuple`: serialize `0.1.2.dev0+a.b` as `0, 1, 2, \"dev0\", \"a.b\"`.\n        the capture groups should already include the surrounding parentheses.\n\n    default:\n\n    ```toml\n    patterns = [\n        \"(^__version__\\\\s*(?::.*?)?=\\\\s*['\\\"])[^'\\\"]*(['\\\"])\",\n        { value = \"(^__version_tuple__\\\\s*(?::.*?)?=\\\\s*\\\\()[^)]*(\\\\))\", mode = \"tuple\" },\n    ]\n    ```\n\n    remember that the backslashes must be escaped (`\\\\`) in the toml file.\n  * `folders` (array of tables, default: empty): list of additional folders to\n    check for substitutions.\n\n    each table supports these options:\n\n    * `path` (string, required): path to the folder.\n    * `files` (array of strings, optional): override `substitution.files` for this folder.\n    * `patterns` (array of strings, optional): override `substitution.patterns` for this folder.\n\n    if you use an `src` layout, you may want to keep the default `files`/`patterns`\n    and just specify the following:\n\n    ```toml\n    folders = [\n      { path = \"src\" }\n    ]\n    ```\n\n    this will check the default file globs (e.g., `./*.py`)\n    as well as the same file globs inside of `src` (e.g., `./src/*.py`).\n* `[tool.poetry-dynamic-versioning.files]` (table, default: empty):\n  this section lets you tweak the behavior for individual files.\n  each table key is a path to a specific file (no globs) relative to the project root.\n  each nested table supports these fields:\n\n  * `persistent-substitution` (boolean, optional):\n    if true, then do not revert any substitutions applied to this file.\n    this is primarily useful for editable installs, if you need the version to remain in a file ignored by your vcs.\n  * `initial-content` (string, optional):\n    set the file content before the substitution phase.\n    the file will be created or overwritten as necessary.\n    common leading whitespace will be stripped from each line.\n  * `initial-content-jinja` (string, optional):\n    same as `initial-content`, but using jinja formatting.\n    if both options are set, this one takes priority.\n    you can use the same imports from `format-jinja-imports` and the same variables from `format-jinja`,\n    with this additional variable:\n\n    * `formatted_version` (string) - version formatted by either the `format` or `format-jinja` option\n\n  example:\n\n  ```toml\n  [tool.poetry-dynamic-versioning.files.\"package/_version.py\"]\n  persistent-substitution = true\n  initial-content = \"\"\"\n    # these version placeholders will be replaced later during substitution.\n    __version__ = \"0.0.0\"\n    __version_tuple__ = (0, 0, 0)\n  \"\"\"\n  ```\n\nsimple example:\n\n```toml\n[tool.poetry-dynamic-versioning]\nenable = true\nvcs = \"git\"\nstyle = \"semver\"\n```\n\n## environment variables\nin addition to the project-specific configuration above,\nyou can apply some global overrides via environment variables.\n\n* `poetry_dynamic_versioning_bypass`:\n  use this to bypass the vcs mechanisms and use a static version instead.\n  the value of the environment variable will be used as the version\n  for the active project and any path/ssh dependencies that also use the plugin.\n  this is mainly for distro package maintainers who need to patch existing releases,\n  without needing access to the original repository.\n* `poetry_dynamic_versioning_override`:\n  use a static version for specific packages only, but leave dynamic versioning enabled otherwise.\n  for example, `pkg1 = 0.1.0, pkg2 = 0.2.0` (spaces are optional) would set pkg1 to 0.1.0 and pkg2 to 0.2.0.\n  this only affects packages for which poetry-dynamic-versioning is enabled.\n  when both variables are set, `override` takes precedence over `bypass`.\n* `poetry_dynamic_versioning_commands`:\n  you can set a comma-separated list of poetry commands during which to activate the versioning.\n  for example, `build,publish` will limit the dynamic versioning to those two commands.\n  similarly, setting `poetry_dynamic_versioning_commands=\"\"` will disable the dynamic versioning altogether,\n  which is useful in isolated environments like docker where versions may not be computable and not needed anymore.\n* `poetry_dynamic_versioning_commands_no_io`:\n  comma-separated list of poetry commands during which the plugin should **not** directly modify files.\n  the plugin will still set the dynamic version in memory so that poetry itself can write it as needed.\n  default: `version`.\n\n## command line mode\nthe plugin also has a command line mode for execution on demand.\nthis mode applies the dynamic version to all relevant files and leaves\nthe changes in-place, allowing you to inspect the result.\nyour configuration will be detected from pyproject.toml as normal,\nbut the `enable` option is not necessary.\n\nto activate this mode, either use `poetry dynamic-versioning` (provided by the `plugin` feature)\nor `poetry-dynamic-versioning` (standalone script with default features).\n\n## vcs archives\nsometimes, you may only have access to an archive of a repository (e.g., a zip file) without the full history.\nthe plugin can still detect a version in some of these cases.\nrefer to [the dunamai documentation](https://github.com/mtkennerly/dunamai#vcs-archives) for more info.\n\n## caveats\nall of [dunamai's caveats](https://github.com/mtkennerly/dunamai#other-notes) apply.\nin addition to those:\n\n* the dynamic version is not available during `poetry run` or `poetry shell`\n  because of a [poetry design choice](https://github.com/python-poetry/poetry/issues/8092)\n  that prevents the plugin from cleaning up after itself.\n* regarding pep 517 support:\n\n  `pip wheel .` and `pip install .` will work with new enough pip versions\n  that default to in-tree builds or support the `--use-feature=in-tree-build`\n  option. older versions of pip will not work because they create an isolated\n  copy of the source code that does not contain the version control history.\n\n  if you want to build wheels of your dependencies, you can do the following,\n  although local path-based dependencies may not work:\n\n  ```\n  poetry export -f requirements.txt -o requirements.txt --without-hashes\n  pip wheel -r requirements.txt\n  ```\n",
  "docs_url": null,
  "keywords": "poetry,plugin,version,versioning,dynamic",
  "license": "mit",
  "name": "poetry-dynamic-versioning",
  "package_url": "https://pypi.org/project/poetry-dynamic-versioning/",
  "project_url": "https://pypi.org/project/poetry-dynamic-versioning/",
  "project_urls": {
    "Homepage": "https://github.com/mtkennerly/poetry-dynamic-versioning",
    "Repository": "https://github.com/mtkennerly/poetry-dynamic-versioning"
  },
  "release_url": "https://pypi.org/project/poetry-dynamic-versioning/1.2.0/",
  "requires_dist": [
    "dunamai (>=1.18.0,<2.0.0)",
    "tomlkit (>=0.4)",
    "jinja2 (>=2.11.1,<4)",
    "poetry (>=1.2.0,<2.0.0) ; extra == \"plugin\""
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "plugin for poetry to enable dynamic versioning based on vcs tags",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "matthew_t",
    "mtkennerly@gmail.com"
  ],
  "kwds": "poetry_dynamic_versioning_commands poetry_dynamic_versioning poetry_dynamic_versioning_bypass poetry_dynamic_versioning_commands_no_io poetry_dynamic_versioning_override",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_poetry_dynamic_versioning",
  "homepage": "https://github.com/mtkennerly/poetry-dynamic-versioning",
  "release_count": 55,
  "dependency_ids": [
    "pypi_dunamai",
    "pypi_jinja2",
    "pypi_poetry",
    "pypi_tomlkit"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: system :: logging",
    "topic :: terminals"
  ],
  "description": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"320\" src=\"https://raw.githubusercontent.com/bluenote10/yachalk/master/media/logo.png\" alt=\"chalk\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n> terminal string styling done right\n\nthis is a feature-complete clone of the awesome [chalk](https://github.com/chalk/chalk) (javascript) library.\n\nall **credits go to [sindre sorhus](https://github.com/sindresorhus)**.\n\n[![pypi version](https://badge.fury.io/py/yachalk.svg)](https://badge.fury.io/py/yachalk)\n[![build status](https://github.com/bluenote10/yachalk/workflows/ci/badge.svg)](https://github.com/bluenote10/yachalk/actions?query=workflow%3aci)\n[![codecov](https://codecov.io/gh/bluenote10/yachalk/branch/master/graph/badge.svg?token=6i98r2661z)](https://codecov.io/gh/bluenote10/yachalk)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![mypy](https://img.shields.io/badge/mypy-strict-blue)](http://mypy-lang.org/)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](license)\n\n\n<img src=\"https://raw.githubusercontent.com/bluenote10/yachalk/master/media/demo1.svg\" width=\"900\">\n\n<br>\n\n---\n\n<br>\n\n## highlights\n\n- fluent, auto-complete-friendly api for maximum coding efficiency\n- ability to nest styles\n- proper handling of styling edge cases (same test cases as chalk)\n- auto-detection of terminal color capabilities\n- [256/truecolor color support](#256-and-truecolor-color-support), with fallback to basic colors depending on capabilities\n- same conventions as chalk to manually control color modes via `force_color`\n- no dependencies\n- fully typed (mypy strict), no stubs required\n\n\n## install\n\n```console\n$ pip install yachalk\n```\n\nthe only requirement is a modern python (3.6+).\n\n## usage\n\n```python\nfrom yachalk import chalk\n\nprint(chalk.blue(\"hello world!\"))\n```\n\nchalk comes with an easy to use composable api where you just chain and nest the styles you want.\n\n```python\nfrom yachalk import chalk\n\n# combine styled and normal strings\nprint(chalk.blue(\"hello\") + \" world\" + chalk.red(\"!\"))\n\n# compose multiple styles using the chainable api\nprint(chalk.blue.bg_red.bold(\"hello world!\"))\n\n# use within f-strings\nprint(f\"found {chalk.bold(num_results)} results.\")\n\n# pass in multiple arguments\nprint(chalk.blue(\"hello\", \"world!\"))\n\n# nest styles...\nprint(chalk.red(f\"hello {chalk.underline.bg_blue('world')}!\"))\n\n# nest styles of the same type even (color, underline, background)\nprint(chalk.green(\n    \"i am a green line \" +\n    chalk.blue.underline.bold(\"with a blue substring\") +\n    \" that becomes green again!\"\n))\n\n# use rgb or hex colors\nprint(chalk.rgb(123, 45, 67).underline(\"underlined reddish color\"))\nprint(chalk.hex(\"#deaded\").bold(\"bold gray!\"))\n```\n\neasily define and re-use your own themes:\n\n```python\nfrom yachalk import chalk\n\nerror = chalk.bold.red\nwarning = chalk.hex(\"#ffa500\")\n\nprint(error(\"error!\"))\nprint(warning(\"warning!\"))\n```\n\n\n## prior art: why yet another chalk clone?\n\nthe python ecosystem has a large number libraries for terminal styling/coloring. however, after working with chalk in javascript for a while, i always missed to have the same convenience in python. inspired by chalk, i wanted to have a terminal styling library satisfying the following design criteria:\n\n- **automatic reset handling**: many python libraries require manual handling of ansi reset codes. this is error prone, and a common source of coloring issues. it also means that these libraries cannot handle advanced edge cases like proper handling of newlines in all contexts, because that requires internal reset handling.\n- **single symbol import**: some libraries require to import special symbols for foreground/background/modifiers/... depending on the desired styling. this is tedious in my opinion, because you have to adapt the imports all the time when you change the particular styling.\n- **auto-complete friendly**: i don't want to memorize a style/color api, i'd like to have full auto-complete support. some existing chalk clones seem to generate all style properties dynamically, which means that an ide cannot support with auto-completion.\n- **support of nested styles**: sometimes it is convenient to embed a style into an existing styled context. with chalk this simply works. none of the libraries i tried have support of nested styles.\n- **support of edge cases**: chalk has solutions for many edge cases like newline handling, or certain challenges in nested styles. the python libraries i tried didn't support these. yachalk is tested against the same test cases as chalk, so it should support them all.\n- **not print focused**: some libraries provide an api with a focus on offering modified `print` functions. i prefer the single responsibility principle: styling should only do styling, and return a string. this still leaves the possibility to print the string, write it to a file, or pass it around freely.\n- **true color support**: today most terminal have true color support, so it makes sense to support it in the api. many older python libraries only support the basic 16 colors.\n- **capabilities auto detection / fallbacks**: chalk is fully backwards compatible on dumber terminals, by approximating colors with what is available on a particular terminal. i haven't found this feature in existing python libraries.\n- **zero dependencies**: some libraries are based e.g. based on curses, which is a heavy dependency for something as simple as styling/coloring.\n- **fully typed**: i like optional typing, but often library type stubs come with bad types. yachalk runs in strict mypy mode, which means that no stubs are needed and its type should be correct by design.\n\ni started collecting existing libraries in a feature matrix, but since i keep finding more and more libraries, i've given up on filling it completely \ud83d\ude09. nonetheless, feel free to open an issue if it contains an error or misses an important solution.\n\n![comparison](https://raw.githubusercontent.com/bluenote10/yachalk/master/media/comparison.png)\n\nlinks to related projects:\n- [termcolor](https://pypi.org/project/termcolor/)\n- [colored](https://gitlab.com/dslackw/colored)\n- [ansicolors](https://pypi.org/project/ansicolors/)\n- [sty](https://github.com/feluxe/sty)\n- [blessings](https://github.com/erikrose/blessings)\n- [rich](https://github.com/willmcgugan/rich)\n- [style (clr)](https://github.com/lmittmann/style)\n- [pychalk](https://github.com/anthonyalmarza/chalk)\n- [simple_chalk](https://pypi.org/project/simple-chalk/)\n\n\n## api\n\nin general there is no need to remember the api, because it is written in a way that it fully auto-completes in common ides:\n\n![auto_complete](https://raw.githubusercontent.com/bluenote10/yachalk/master/media/auto_complete.gif)\n\n**`chalk.<style>[.<style>...](string, [string...], sep=\" \")`**\n\nexample: `chalk.red.bold.underline(\"hello\", \"world\")`\n\nchain [styles](#styles) and call the last one as a method with a string argument. order doesn't matter, and later styles take precedent in case of a conflict. this simply means that `chalk.red.yellow.green` is equivalent to `chalk.green`.\n\nmultiple arguments will be separated by a space, but the separator can also be passed in as keyword argument `sep=\"...\"`.\n\n\n**`chalk.set_color_mode(mode: colormode)`**\n\nset the color mode manually. `colormode` is an enum with the value:\n\n- `colormode.alloff`\n- `colormode.basic16` (basic 16-color ansi colors)\n- `colormode.extended256` (256-color ansi color mode)\n- `colormode.fulltruecolor` (full true color support)\n\nsee [color mode control](#color-mode-control) for more details.\n\n**`chalk.disable_all_ansi()`**\n\nshorthand for `chalk.set_color_mode(colormode.alloff)`.\n\n**`chalk.enable_basic_colors()`**\n\nshorthand for `chalk.set_color_mode(colormode.basic16)`.\n\n**`chalk.enable_extended_colors()`**\n\nshorthand for `chalk.set_color_mode(colormode.extended256)`.\n\n**`chalk.enable_full_colors()`**\n\nshorthand for `chalk.set_color_mode(colormode.fulltruecolor)`.\n\n**`chalk.get_color_mode() -> colormode`**\n\nreturn current color mode.\n\n\n## styles\n\n### modifiers\n\n- `reset` - resets the current color chain.\n- `bold` - make text bold.\n- `dim` - emitting only a small amount of light.\n- `italic` - make text italic. *(not widely supported)*\n- `underline` - make text underline. *(not widely supported)*\n- `inverse`- inverse background and foreground colors.\n- `hidden` - prints the text, but makes it invisible.\n- `strikethrough` - puts a horizontal line through the center of the text. *(not widely supported)*\n- `visible`- prints the text only when chalk has a color level > 0. can be useful for things that are purely cosmetic.\n\n### colors\n\n- `black`\n- `red`\n- `green`\n- `yellow`\n- `blue`\n- `magenta`\n- `cyan`\n- `white`\n- `black_bright` (alias: `gray`, `grey`)\n- `red_bright`\n- `green_bright`\n- `yellow_bright`\n- `blue_bright`\n- `magenta_bright`\n- `cyan_bright`\n- `white_bright`\n\n### background colors\n\n- `bg_black`\n- `bg_red`\n- `bg_green`\n- `bg_yellow`\n- `bg_blue`\n- `bg_magenta`\n- `bg_cyan`\n- `bg_white`\n- `bg_black_bright` (alias: `bg_gray`, `bg_grey`)\n- `bg_red_bright`\n- `bg_green_bright`\n- `bg_yellow_bright`\n- `bg_blue_bright`\n- `bg_magenta_bright`\n- `bg_cyan_bright`\n- `bg_white_bright`\n\n\n## 256 and truecolor color support\n\nchalk supports 256 colors and [truecolor](https://gist.github.com/xvilka/8346728) (16 million colors) on supported terminal apps.\n\ncolors are downsampled from 16 million rgb values to an ansi color format that is supported by the terminal emulator (or by setting a specific `colormode` manually). for example, chalk configured to run at level `colormode.basic16` will downsample an rgb value of #ff0000 (red) to 31 (ansi escape for red).\n\nexamples:\n\n- `chalk.rgb(15, 100, 204)(\"hello!\")`\n- `chalk.hex(\"#deaded\").underline(\"hello, world!\")`\n\nbackground versions of these models are prefixed with `bg_`:\n\n- `chalk.bg_rgb(15, 100, 204)(\"hello!\")`\n- `chalk.bg_hex(\"#deaded\").underline(\"hello, world!\")`\n\n\n## color mode control\n\nthe imported symbol `chalk` is a singleton that is initialized with the color mode resulting from the auto-detection. this means that if you run on a terminal that has e.g. only basic 16 colors support, you can still use the full rgb/hex api, but the resulting colors would be approximated by the available colors. if the terminal doesn't support any ansi escape codes, the resulting strings would be completely free of any ansi codes.\n\nif you would like to take manual control of the color mode, you have three options.\n\n**1. use environment variables**\n\nchalk has introduced the convention to use the `force_color` environment variable as an override in the auto-detection. the semantics are:\n\n- `force_color=0` enforces `colormode.alloff`.\n- `force_color=1` enforces `colormode.basic16`.\n- `force_color=2` enforces `colormode.extended256`.\n- `force_color=3` enforces `colormode.fulltruecolor`.\n\nthis can be a convenient solution in ci/cloud-based contexts.\n\n\n**2. set the color mode manually on the `chalk` instance**\n\nif you don't care about auto-detection, you might as well set your desired color mode unconditionally.\n\nthe `chalk` singleton supports setting the color mode via `chalk.disable_all_ansi`, `chalk.enable_..._colors`, or `chalk.set_color_mode`.\n\na reasonable place to configure the singleton is e.g. at the beginning of a `main` function, similar to where logging is configured.\n\n\n**3. use your own `chalk` instance**\n\nfor advanced use cases that e.g. require to dynamically switch the color mode in a multi-threaded context, you can opt-out of the convenience of using a singleton, and use a custom `chalk` instances where desired. in general `chalk` is just an instance of `chalkfactory`, which takes the color mode as input in its constructor.\n\n\n```python\nfrom yachalk import chalkfactory\n\ndef some_function():\n    # create your own chalk instance with explicit mode control\n    chalk = chalkfactory(colormode.fulltruecolor)\n\n    # ...\n\n    colored_messages.append(chalk.red(\"an error occurred\"))\n```\n\nor if you'd like to use your own mode-detection logic, you could create the `chalk` singleton yourself in one of your modules\n\n```python\n# e.g. in my_chalk.py\nfrom yachalk import chalkfactory\n\ndef custom_color_mode_detection() -> colormode:\n    # ...\n    return colormode.basic16\n\nchalk = chalkfactory(custom_color_mode_detection())\n```\n\nand replace usages of `from yachalk import chalk` with `from my_chalk import chalk`.\n\n\n",
  "docs_url": null,
  "keywords": "terminal,color,styling,ansi",
  "license": "mit",
  "name": "yachalk",
  "package_url": "https://pypi.org/project/yachalk/",
  "project_url": "https://pypi.org/project/yachalk/",
  "project_urls": {
    "Homepage": "https://github.com/bluenote10/yachalk"
  },
  "release_url": "https://pypi.org/project/yachalk/0.1.5/",
  "requires_dist": [
    "setuptools",
    "importlib-resources"
  ],
  "requires_python": "",
  "summary": "\ud83d\udd8d\ufe0f terminal string styling done right",
  "version": "0.1.5",
  "releases": [],
  "developers": [],
  "kwds": "simple_chalk chalk my_chalk chalkfactory themes",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_yachalk",
  "homepage": "https://github.com/bluenote10/yachalk",
  "release_count": 7,
  "dependency_ids": [
    "pypi_importlib_resources",
    "pypi_setuptools"
  ]
}
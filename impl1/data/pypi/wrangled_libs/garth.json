{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# garth\n\n[![ci](https://github.com/matin/garth/workflows/ci/badge.svg?event=push)](https://github.com/matin/garth/actions/workflows/ci.yml?query=event%3apush+branch%3amain+workflow%3aci)\n[![codecov](https://codecov.io/gh/matin/garth/branch/main/graph/badge.svg?token=0effyjnfil)](https://codecov.io/gh/matin/garth)\n[![monthly downloads](https://static.pepy.tech/badge/garth/month)](https://www.pepy.tech/projects/garth)\n\ngarmin sso auth + connect python client\n\n## google colabs\n\n### [stress: 28-day rolling average](https://colab.research.google.com/github/matin/garth/blob/main/colabs/stress.ipynb)\n\nstress levels from one day to another can vary by extremes, but there's always\na general trend. using a scatter plot with a rolling average shows both the\nindividual days and the trend. the colab retrieves up to three years of daily\ndata. if there's less than three years of data, it retrieves whatever is\navailable.\n\n![stress: garph of 28-day rolling average](https://github.com/matin/garth/assets/98985/868ecf25-4644-4879-b28f-ed0706a9e7b9)\n\n### [sleep analysis over 90 days](https://colab.research.google.com/github/matin/garth/blob/main/colabs/sleep.ipynb)\n\nthe garmin connect app only shows a maximum of seven days for sleep\nstages\u2014making it hard to see trends. the connect api supports retrieving\ndaily sleep quality in 28-day pages, but that doesn't show details. using\n`sleeddata.list()` gives us the ability to retrieve an arbitrary number of\nday with enough detail to product a stacked bar graph of the daily sleep\nstages.\n\n![sleep stages over 90 days](https://github.com/matin/garth/assets/98985/ba678baf-0c8a-4907-aa91-be43beec3090)\n\none specific graph that's useful but not available in the connect app is\nsleep start and end times over an extended period. this provides context\nto the sleep hours and stages.\n\n![sleep times over 90 days](https://github.com/matin/garth/assets/98985/c5583b9e-ab8a-4b5c-bfe6-1cb0ca95d1de)\n\n### [chatgpt analysis of garmin stats](https://colab.research.google.com/github/matin/garth/blob/main/colabs/chatgpt_analysis_of_stats.ipynb)\n\nchatgpt's advanced data analysis took can provide incredible insight\ninto the data in a way that's much simpler than using pandas and matplotlib.\n\nstart by using the linked colab to download a csv of the last three years\nof your stats, and upload the csv to chatgpt.\n\nhere's the outputs of the following prompts:\n\nhow do i sleep on different days of the week?\n\n<img width=\"600\" alt=\"image\" src=\"https://github.com/matin/garth/assets/98985/b7507459-2482-43d6-bf55-c3a1f756facb\">\n\non what days do i exercise the most?\n\n<img width=\"600\" alt=\"image\" src=\"https://github.com/matin/garth/assets/98985/11294be2-8e1a-4fed-a489-13420765aada\">\n\nmagic!\n\n## background\n\ngarth is meant for personal use and follows the philosophy that your data is\nyour data. you should be able to download it and analyze it in the way that\nyou'd like. in my case, that means processing with google colab, pandas,\nmatplotlib, etc.\n\nthere are already a few garmin connect libraries. why write another?\n\n### authentication and stability\n\nthe most important reasoning is to build a library with authentication that\nworks on [google colab](https://colab.research.google.com/) and doesn't require\ntools like cloudscraper. garth, in comparison:\n\n1. uses oauth1 and oauth2 token authentication after initial login\n1. oauth1 token survives for a year\n1. supports mfa\n1. auto-refresh of oauth2 token when expired\n1. works on google colab\n1. uses pydantic dataclasses to validate and simplify use of data\n1. full test coverage\n\n### json vs html\n\nusing `garth.connectapi()` allows you to make requests to the connect api\nand receive json vs needing to parse html. you can use the same endpoints the\nmobile app uses.\n\nthis also goes back to authentication. garth manages the necessary bearer\nauthentication (along with auto-refresh) necessary to make requests routed to\nthe connect api.\n\n## instructions\n\n### install\n\n```bash\npython -m pip install garth\n```\n\n### clone, setup environment and run tests\n\n```bash\ngh repo clone matin/garth\ncd garth\nmake install\nmake\n```\n\nuse `make help` to see all the options.\n\n### authenticate and save session\n\n```python\nimport garth\nfrom getpass import getpass\n\nemail = input(\"enter email address: \")\npassword = getpass(\"enter password: \")\n# if there's mfa, you'll be prompted during the login\ngarth.login(email, password)\n\ngarth.save(\"~/.garth\")\n```\n\n### configure\n\n#### set domain for china\n\n```python\ngarth.configure(domain=\"garmin.cn\")\n```\n\n#### proxy through charles\n\n```python\ngarth.configure(proxies={\"https\": \"http://localhost:8888\"}, ssl_verify=false)\n```\n\n### attempt to resume session\n\n```python\nimport garth\nfrom garth import garthexception\n\ngarth.resume(\"~/.garth\")\ntry:\n    garth.client.username\nexcept garthexception:\n    # session is expired. you'll need to log in again\n```\n\n## connect api\n\n### daily details\n\n```python\nsleep = garth.connectapi(\n    f\"/wellness-service/wellness/dailysleepdata/{garth.client.username}\",\n    params={\"date\": \"2023-07-05\", \"nonsleepbufferminutes\": 60},\n)\nlist(sleep.keys())\n```\n\n```json\n[\n    \"dailysleepdto\",\n    \"sleepmovement\",\n    \"remsleepdata\",\n    \"sleeplevels\",\n    \"sleeprestlessmoments\",\n    \"restlessmomentscount\",\n    \"wellnessspo2sleepsummarydto\",\n    \"wellnessepochspo2datadtolist\",\n    \"wellnessepochrespirationdatadtolist\",\n    \"sleepstress\"\n]\n```\n\n### stats\n\n```python\nstress =  garth.connectapi(\"/usersummary-service/stats/stress/weekly/2023-07-05/52\")\n```\n\n```json\n{\n    \"calendardate\": \"2023-07-13\",\n    \"values\": {\n        \"highstressduration\": 2880,\n        \"lowstressduration\": 10140,\n        \"overallstresslevel\": 33,\n        \"reststressduration\": 30960,\n        \"mediumstressduration\": 8760\n    }\n}\n```\n\n## upload\n\n```python\nwith open(\"12129115726_activity.fit\", \"rb\") as f:\n    uploaded = garth.client.upload(f)\n```\n\nnote: garmin doesn't accept uploads of _structured_ fit files as outlined in\n[this conversation](https://github.com/matin/garth/issues/27). fit files\ngenerated from workouts are accepted without issues.\n\n```python\n{\n    'detailedimportresult': {\n        'uploadid': 212157427938,\n        'uploaduuid': {\n            'uuid': '6e56051d-1dd4-4f2c-b8ba-00a1a7d82eb3'\n        },\n        'owner': 2591602,\n        'filesize': 5289,\n        'processingtime': 36,\n        'creationdate': '2023-09-29 01:58:19.113 gmt',\n        'ipaddress': none,\n        'filename': '12129115726_activity.fit',\n        'report': none,\n        'successes': [],\n        'failures': []\n    }\n}\n```\n\n## stats resources\n\n### stress\n\ndaily stress levels\n\n```python\ndailystress.list(\"2023-07-23\", 2)\n```\n\n```python\n[\n    dailystress(\n        calendar_date=datetime.date(2023, 7, 22),\n        overall_stress_level=31,\n        rest_stress_duration=31980,\n        low_stress_duration=23820,\n        medium_stress_duration=7440,\n        high_stress_duration=1500\n    ),\n    dailystress(\n        calendar_date=datetime.date(2023, 7, 23),\n        overall_stress_level=26,\n        rest_stress_duration=38220,\n        low_stress_duration=22500,\n        medium_stress_duration=2520,\n        high_stress_duration=300\n    )\n]\n```\n\nweekly stress levels\n\n```python\nweeklystress.list(\"2023-07-23\", 2)\n```\n\n```python\n[\n    weeklystress(calendar_date=datetime.date(2023, 7, 10), value=33),\n    weeklystress(calendar_date=datetime.date(2023, 7, 17), value=32)\n]\n```\n\n### steps\n\ndaily steps\n\n```python\ngarth.dailysteps.list(period=2)\n```\n\n```python\n[\n    dailysteps(\n        calendar_date=datetime.date(2023, 7, 28),\n        total_steps=6510,\n        total_distance=5552,\n        step_goal=8090\n    ),\n    dailysteps(\n        calendar_date=datetime.date(2023, 7, 29),\n        total_steps=7218,\n        total_distance=6002,\n        step_goal=7940\n    )\n]\n```\n\nweekly steps\n\n```python\ngarth.weeklysteps.list(period=2)\n```\n\n```python\n[\n    weeklysteps(\n        calendar_date=datetime.date(2023, 7, 16),\n        total_steps=42339,\n        average_steps=6048.428571428572,\n        average_distance=5039.285714285715,\n        total_distance=35275.0,\n        wellness_data_days_count=7\n    ),\n    weeklysteps(\n        calendar_date=datetime.date(2023, 7, 23),\n        total_steps=56420,\n        average_steps=8060.0,\n        average_distance=7198.142857142857,\n        total_distance=50387.0,\n        wellness_data_days_count=7\n    )\n]\n```\n\n### intensity minutes\n\ndaily intensity minutes\n\n```python\ngarth.dailyintensityminutes.list(period=2)\n```\n\n```python\n[\n    dailyintensityminutes(\n        calendar_date=datetime.date(2023, 7, 28),\n        weekly_goal=150,\n        moderate_value=0,\n        vigorous_value=0\n    ),\n    dailyintensityminutes(\n        calendar_date=datetime.date(2023, 7, 29),\n        weekly_goal=150,\n        moderate_value=0,\n        vigorous_value=0\n    )\n]\n```\n\nweekly intensity minutes\n\n```python\ngarth.weeklyintensityminutes.list(period=2)\n```\n\n```python\n[\n    weeklyintensityminutes(\n        calendar_date=datetime.date(2023, 7, 17),\n        weekly_goal=150,\n        moderate_value=103,\n        vigorous_value=9\n    ),\n    weeklyintensityminutes(\n        calendar_date=datetime.date(2023, 7, 24),\n        weekly_goal=150,\n        moderate_value=101,\n        vigorous_value=105\n    )\n]\n```\n\n### hrv\n\ndaily hrv\n\n```python\ngarth.dailyhrv.list(period=2)\n```\n\n```python\n[\n    dailyhrv(\n        calendar_date=datetime.date(2023, 7, 28),\n        weekly_avg=39,\n        last_night_avg=36,\n        last_night_5_min_high=52,\n        baseline=hrvbaseline(\n            low_upper=36,\n            balanced_low=39,\n            balanced_upper=51,\n            marker_value=0.25\n        ),\n        status='balanced',\n        feedback_phrase='hrv_balanced_2',\n        create_time_stamp=datetime.datetime(2023, 7, 28, 12, 40, 16, 785000)\n    ),\n    dailyhrv(\n        calendar_date=datetime.date(2023, 7, 29),\n        weekly_avg=40,\n        last_night_avg=41,\n        last_night_5_min_high=76,\n        baseline=hrvbaseline(\n            low_upper=36,\n            balanced_low=39,\n            balanced_upper=51,\n            marker_value=0.2916565\n        ),\n        status='balanced',\n        feedback_phrase='hrv_balanced_8',\n        create_time_stamp=datetime.datetime(2023, 7, 29, 13, 45, 23, 479000)\n    )\n]\n```\n\ndetailed hrv data\n\n```python\ngarth.hrvdata.get(\"2023-07-20\")\n```\n\n```python\nhrvdata(\n    user_profile_pk=2591602,\n    hrv_summary=hrvsummary(\n        calendar_date=datetime.date(2023, 7, 20),\n        weekly_avg=39,\n        last_night_avg=42,\n        last_night_5_min_high=66,\n        baseline=baseline(\n            low_upper=36,\n            balanced_low=39,\n            balanced_upper=52,\n            marker_value=0.25\n        ),\n        status='balanced',\n        feedback_phrase='hrv_balanced_7',\n        create_time_stamp=datetime.datetime(2023, 7, 20, 12, 14, 11, 898000)\n    ),\n    hrv_readings=[\n        hrvreading(\n            hrv_value=54,\n            reading_time_gmt=datetime.datetime(2023, 7, 20, 5, 29, 48),\n            reading_time_local=datetime.datetime(2023, 7, 19, 23, 29, 48)\n        ),\n        hrvreading(\n            hrv_value=56,\n            reading_time_gmt=datetime.datetime(2023, 7, 20, 5, 34, 48),\n            reading_time_local=datetime.datetime(2023, 7, 19, 23, 34, 48)\n        ),\n        # ... truncated for brevity\n        hrvreading(\n            hrv_value=38,\n            reading_time_gmt=datetime.datetime(2023, 7, 20, 12, 9, 48),\n            reading_time_local=datetime.datetime(2023, 7, 20, 6, 9, 48)\n        )\n    ],\n    start_timestamp_gmt=datetime.datetime(2023, 7, 20, 5, 25),\n    end_timestamp_gmt=datetime.datetime(2023, 7, 20, 12, 9, 48),\n    start_timestamp_local=datetime.datetime(2023, 7, 19, 23, 25),\n    end_timestamp_local=datetime.datetime(2023, 7, 20, 6, 9, 48),\n    sleep_start_timestamp_gmt=datetime.datetime(2023, 7, 20, 5, 25),\n    sleep_end_timestamp_gmt=datetime.datetime(2023, 7, 20, 12, 11),\n    sleep_start_timestamp_local=datetime.datetime(2023, 7, 19, 23, 25),\n    sleep_end_timestamp_local=datetime.datetime(2023, 7, 20, 6, 11)\n)\n```\n\n### sleep\n\ndaily sleep quality\n\n```python\ngarth.dailysleep.list(\"2023-07-23\", 2)\n```\n\n```python\n[\n    dailysleep(calendar_date=datetime.date(2023, 7, 22), value=69),\n    dailysleep(calendar_date=datetime.date(2023, 7, 23), value=73)\n]\n```\n\ndetailed sleep data\n\n```python\ngarth.sleepdata.get(\"2023-07-20\")\n```\n\n```python\nsleepdata(\n    daily_sleep_dto=dailysleepdto(\n        id=1689830700000,\n        user_profile_pk=2591602,\n        calendar_date=datetime.date(2023, 7, 20),\n        sleep_time_seconds=23700,\n        nap_time_seconds=0,\n        sleep_window_confirmed=true,\n        sleep_window_confirmation_type='enhanced_confirmed_final',\n        sleep_start_timestamp_gmt=datetime.datetime(2023, 7, 20, 5, 25, tzinfo=tzinfo(utc)),\n        sleep_end_timestamp_gmt=datetime.datetime(2023, 7, 20, 12, 11, tzinfo=tzinfo(utc)),\n        sleep_start_timestamp_local=datetime.datetime(2023, 7, 19, 23, 25, tzinfo=tzinfo(utc)),\n        sleep_end_timestamp_local=datetime.datetime(2023, 7, 20, 6, 11, tzinfo=tzinfo(utc)),\n        unmeasurable_sleep_seconds=0,\n        deep_sleep_seconds=9660,\n        light_sleep_seconds=12600,\n        rem_sleep_seconds=1440,\n        awake_sleep_seconds=660,\n        device_rem_capable=true,\n        retro=false,\n        sleep_from_device=true,\n        sleep_version=2,\n        awake_count=1,\n        sleep_scores=sleepscores(\n            total_duration=score(\n                qualifier_key='fair',\n                optimal_start=28800.0,\n                optimal_end=28800.0,\n                value=none,\n                ideal_start_in_seconds=none,\n                deal_end_in_seconds=none\n            ),\n            stress=score(\n                qualifier_key='fair',\n                optimal_start=0.0,\n                optimal_end=15.0,\n                value=none,\n                ideal_start_in_seconds=none,\n                ideal_end_in_seconds=none\n            ),\n            awake_count=score(\n                qualifier_key='good',\n                optimal_start=0.0,\n                optimal_end=1.0,\n                value=none,\n                ideal_start_in_seconds=none,\n                ideal_end_in_seconds=none\n            ),\n            overall=score(\n                qualifier_key='fair',\n                optimal_start=none,\n                optimal_end=none,\n                value=68,\n                ideal_start_in_seconds=none,\n                ideal_end_in_seconds=none\n            ),\n            rem_percentage=score(\n                qualifier_key='poor',\n                optimal_start=21.0,\n                optimal_end=31.0,\n                value=6,\n                ideal_start_in_seconds=4977.0,\n                ideal_end_in_seconds=7347.0\n            ),\n            restlessness=score(\n                qualifier_key='excellent',\n                optimal_start=0.0,\n                optimal_end=5.0,\n                value=none,\n                ideal_start_in_seconds=none,\n                ideal_end_in_seconds=none\n            ),\n            light_percentage=score(\n                qualifier_key='excellent',\n                optimal_start=30.0,\n                optimal_end=64.0,\n                value=53,\n                ideal_start_in_seconds=7110.0,\n                ideal_end_in_seconds=15168.0\n            ),\n            deep_percentage=score(\n                qualifier_key='excellent',\n                optimal_start=16.0,\n                optimal_end=33.0,\n                value=41,\n                ideal_start_in_seconds=3792.0,\n                ideal_end_in_seconds=7821.0\n            )\n        ),\n        auto_sleep_start_timestamp_gmt=none,\n        auto_sleep_end_timestamp_gmt=none,\n        sleep_quality_type_pk=none,\n        sleep_result_type_pk=none,\n        average_sp_o2_value=92.0,\n        lowest_sp_o2_value=87,\n        highest_sp_o2_value=100,\n        average_sp_o2_hr_sleep=53.0,\n        average_respiration_value=14.0,\n        lowest_respiration_value=12.0,\n        highest_respiration_value=16.0,\n        avg_sleep_stress=17.0,\n        age_group='adult',\n        sleep_score_feedback='negative_not_enough_rem',\n        sleep_score_insight='none'\n    ),\n    sleep_movement=[\n        sleepmovement(\n            start_gmt=datetime.datetime(2023, 7, 20, 4, 25),\n            end_gmt=datetime.datetime(2023, 7, 20, 4, 26),\n            activity_level=5.688743692980419\n        ),\n        sleepmovement(\n            start_gmt=datetime.datetime(2023, 7, 20, 4, 26),\n            end_gmt=datetime.datetime(2023, 7, 20, 4, 27),\n            activity_level=5.318763075304898\n        ),\n        # ... truncated for brevity\n        sleepmovement(\n            start_gmt=datetime.datetime(2023, 7, 20, 13, 10),\n            end_gmt=datetime.datetime(2023, 7, 20, 13, 11),\n            activity_level=7.088729101943337\n        )\n    ]\n)\n```\n\nlist sleep data over several nights.\n\n```python\ngarth.sleepdata.list(\"2023-07-20\", 30)\n```\n\n## user\n\n### userprofile\n\n```python\ngarth.userprofile.get()\n```\n\n```python\nuserprofile(\n    id=3154645,\n    profile_id=2591602,\n    garmin_guid=\"0690cc1d-d23d-4412-b027-80fd4ed1c0f6\",\n    display_name=\"mtamizi\",\n    full_name=\"matin tamizi\",\n    user_name=\"mtamizi\",\n    profile_image_uuid=\"73240e81-6e4d-43fc-8af8-c8f6c51b3b8f\",\n    profile_image_url_large=(\n        \"https://s3.amazonaws.com/garmin-connect-prod/profile_images/\"\n        \"73240e81-6e4d-43fc-8af8-c8f6c51b3b8f-2591602.png\"\n    ),\n    profile_image_url_medium=(\n        \"https://s3.amazonaws.com/garmin-connect-prod/profile_images/\"\n        \"685a19e9-a7be-4a11-9bf9-faca0c5d1f1a-2591602.png\"\n    ),\n    profile_image_url_small=(\n        \"https://s3.amazonaws.com/garmin-connect-prod/profile_images/\"\n        \"6302f021-0ec7-4dc9-b0c3-d5a19bc5a08c-2591602.png\"\n    ),\n    location=\"ciudad de m\u00e9xico, cdmx\",\n    facebook_url=none,\n    twitter_url=none,\n    personal_website=none,\n    motivation=none,\n    bio=none,\n    primary_activity=none,\n    favorite_activity_types=[],\n    running_training_speed=0.0,\n    cycling_training_speed=0.0,\n    favorite_cycling_activity_types=[],\n    cycling_classification=none,\n    cycling_max_avg_power=0.0,\n    swimming_training_speed=0.0,\n    profile_visibility=\"private\",\n    activity_start_visibility=\"private\",\n    activity_map_visibility=\"public\",\n    course_visibility=\"public\",\n    activity_heart_rate_visibility=\"public\",\n    activity_power_visibility=\"public\",\n    badge_visibility=\"private\",\n    show_age=false,\n    show_weight=false,\n    show_height=false,\n    show_weight_class=false,\n    show_age_range=false,\n    show_gender=false,\n    show_activity_class=false,\n    show_vo_2_max=false,\n    show_personal_records=false,\n    show_last_12_months=false,\n    show_lifetime_totals=false,\n    show_upcoming_events=false,\n    show_recent_favorites=false,\n    show_recent_device=false,\n    show_recent_gear=false,\n    show_badges=true,\n    other_activity=none,\n    other_primary_activity=none,\n    other_motivation=none,\n    user_roles=[\n        \"scope_atp_read\",\n        \"scope_atp_write\",\n        \"scope_community_course_read\",\n        \"scope_community_course_write\",\n        \"scope_connect_read\",\n        \"scope_connect_write\",\n        \"scope_dt_client_analytics_write\",\n        \"scope_garminpay_read\",\n        \"scope_garminpay_write\",\n        \"scope_gcoffer_read\",\n        \"scope_gcoffer_write\",\n        \"scope_ghs_samd\",\n        \"scope_ghs_upload\",\n        \"scope_golf_api_read\",\n        \"scope_golf_api_write\",\n        \"scope_insights_read\",\n        \"scope_insights_write\",\n        \"scope_product_search_read\",\n        \"role_connectuser\",\n        \"role_fitness_user\",\n        \"role_wellness_user\",\n        \"role_outdoor_user\",\n        \"role_connect_2_user\",\n        \"role_tacx_app_user\",\n    ],\n    name_approved=true,\n    user_profile_full_name=\"matin tamizi\",\n    make_golf_scorecards_private=true,\n    allow_golf_live_scoring=false,\n    allow_golf_scoring_by_connections=true,\n    user_level=3,\n    user_point=118,\n    level_update_date=\"2020-12-12t15:20:38.0\",\n    level_is_viewed=false,\n    level_point_threshold=140,\n    user_point_offset=0,\n    user_pro=false,\n)\n```\n\n### usersettings\n\n```python\ngarth.usersettings.get()\n```\n\n```python\nusersettings(\n    id=2591602,\n    user_data=userdata(\n        gender=\"male\",\n        weight=83000.0,\n        height=182.0,\n        time_format=\"time_twenty_four_hr\",\n        birth_date=datetime.date(1984, 10, 17),\n        measurement_system=\"metric\",\n        activity_level=none,\n        handedness=\"right\",\n        power_format=powerformat(\n            format_id=30,\n            format_key=\"watt\",\n            min_fraction=0,\n            max_fraction=0,\n            grouping_used=true,\n            display_format=none,\n        ),\n        heart_rate_format=powerformat(\n            format_id=21,\n            format_key=\"bpm\",\n            min_fraction=0,\n            max_fraction=0,\n            grouping_used=false,\n            display_format=none,\n        ),\n        first_day_of_week=firstdayofweek(\n            day_id=2,\n            day_name=\"sunday\",\n            sort_order=2,\n            is_possible_first_day=true,\n        ),\n        vo_2_max_running=45.0,\n        vo_2_max_cycling=none,\n        lactate_threshold_speed=0.34722125000000004,\n        lactate_threshold_heart_rate=none,\n        dive_number=none,\n        intensity_minutes_calc_method=\"auto\",\n        moderate_intensity_minutes_hr_zone=3,\n        vigorous_intensity_minutes_hr_zone=4,\n        hydration_measurement_unit=\"milliliter\",\n        hydration_containers=[],\n        hydration_auto_goal_enabled=true,\n        firstbeat_max_stress_score=none,\n        firstbeat_cycling_lt_timestamp=none,\n        firstbeat_running_lt_timestamp=1044719868,\n        threshold_heart_rate_auto_detected=true,\n        ftp_auto_detected=none,\n        training_status_paused_date=none,\n        weather_location=none,\n        golf_distance_unit=\"statute_us\",\n        golf_elevation_unit=none,\n        golf_speed_unit=none,\n        external_bottom_time=none,\n    ),\n    user_sleep=usersleep(\n        sleep_time=80400,\n        default_sleep_time=false,\n        wake_time=24000,\n        default_wake_time=false,\n    ),\n    connect_date=none,\n    source_type=none,\n)\n```\n",
  "docs_url": null,
  "keywords": "garmin garmin api garmin connect garmin sso",
  "license": "mit",
  "name": "garth",
  "package_url": "https://pypi.org/project/garth/",
  "project_url": "https://pypi.org/project/garth/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/garth/0.4.42/",
  "requires_dist": [
    "requests<3.0.0,>=2.0.0",
    "pydantic<3.0.0,>=1.10.12",
    "requests-oauthlib<2.0.0,>=1.3.1"
  ],
  "requires_python": ">=3.8",
  "summary": "garmin sso auth + connect client",
  "version": "0.4.42",
  "releases": [],
  "developers": [
    "mtamizi@duck.com"
  ],
  "kwds": "garmin garmin_guid scope_garminpay_write scope_garminpay_read badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_garth",
  "homepage": "",
  "release_count": 72,
  "dependency_ids": [
    "pypi_pydantic",
    "pypi_requests",
    "pypi_requests_oauthlib"
  ]
}
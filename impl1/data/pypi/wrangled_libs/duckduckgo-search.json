{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: internet :: www/http :: indexing/search",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "![python >= 3.8](https://img.shields.io/badge/python->=3.8-red.svg) [![](https://badgen.net/github/release/deedy5/duckduckgo_search)](https://github.com/deedy5/duckduckgo_search/releases) [![](https://badge.fury.io/py/duckduckgo-search.svg)](https://pypi.org/project/duckduckgo-search) [![downloads](https://static.pepy.tech/personalized-badge/duckduckgo-search?period=total&units=none&left_color=grey&right_color=blue&left_text=downloads)](https://pepy.tech/project/duckduckgo-search)\n# duckduckgo_search<a name=\"top\"></a>\n\nsearch for words, documents, images, videos, news, maps and text translation using the duckduckgo.com search engine. downloading files and images to a local hard drive.\n\n## table of contents\n* [install](#install)\n* [cli version](#cli-version)\n* [duckduckgo search operators](#duckduckgo-search-operators)\n* [regions](#regions)\n* [ddgs and asyncddgs classes](#ddgs-and-asyncddgs-classes)\n* [using proxy](#using-proxy)\n* [exceptions](#exceptions)\n* [1. text() - text search](#1-text---text-search-by-duckduckgocom)\n* [2. answers() - instant answers](#2-answers---instant-answers-by-duckduckgocom)\n* [3. images() - image search](#3-images---image-search-by-duckduckgocom)\n* [4. videos() - video search](#4-videos---video-search-by-duckduckgocom)\n* [5. news() - news search](#5-news---news-search-by-duckduckgocom)\n* [6. maps() - map search](#6-maps---map-search-by-duckduckgocom)\n* [7. translate() - translation](#7-translate---translation-by-duckduckgocom)\n* [8. suggestions() - suggestions](#8-suggestions---suggestions-by-duckduckgocom)\n\n## install\n```python\npip install -u duckduckgo_search\n```\n\n## cli version\n\n```python3\nddgs --help\n```\nor\n```python3\npython -m duckduckgo_search --help\n```\n\ncli examples:\n```python3\n# text search\nddgs text -k \"ayrton senna\"\n# text search via proxy (example: tor browser)\nddgs text -k \"china is a global threat\" -p socks5://localhost:9150\n# find and download pdf files\nddgs text -k \"russia filetype:pdf\" -m 50 -d\n# find in es-es region and download pdf files via proxy (example: tor browser)\nddgs text -k \"embajada a tamorl\u00e1n filetype:pdf\" -r es-es -m 50 -d -p socks5://localhost:9150\n# find and download xls files from a specific site\nddgs text -k \"sanctions filetype:xls site:gov.ua\" -m 50 -d\n# find and download any doc(x) files from a specific site\nddgs text -k \"filetype:doc site:mos.ru\" -m 50 -d\n# find and download images\nddgs images -k \"yuri kuklachev cat theatre\" -m 500 -s off -d\n# find in br-br region and download images via proxy (example: tor browser) in 10 threads\nddgs images -k \"rio carnival\" -r br-br -s off -m 500 -d -th 10 -p socks5://localhost:9150\n# get latest news\nddgs news -k \"ukraine war\" -s off -t d -m 10\n# get last day's news and save it to a csv file\nddgs news -k \"hubble telescope\" -t d -m 50 -o csv\n# get answers and save to a json file\nddgs answers -k holocaust -o json\n```\n[go to top](#top)\n\n## duckduckgo search operators\n\n| keywords example |\tresult|\n| ---     | ---   |\n| cats dogs |\tresults about cats or dogs |\n| \"cats and dogs\" |\tresults for exact term \"cats and dogs\". if no results are found, related results are shown. |\n| cats -dogs |\tfewer dogs in results |\n| cats +dogs |\tmore dogs in results |\n| cats filetype:pdf |\tpdfs about cats. supported file types: pdf, doc(x), xls(x), ppt(x), html |\n| dogs site:example.com  |\tpages about dogs from example.com |\n| cats -site:example.com |\tpages about cats, excluding example.com |\n| intitle:dogs |\tpage title includes the word \"dogs\" |\n| inurl:cats  |\tpage url includes the word \"cats\" |\n\n[go to top](#top)\n\n## regions\n<details>\n  <summary>expand</summary>\n\n    xa-ar for arabia\n    xa-en for arabia (en)\n    ar-es for argentina\n    au-en for australia\n    at-de for austria\n    be-fr for belgium (fr)\n    be-nl for belgium (nl)\n    br-pt for brazil\n    bg-bg for bulgaria\n    ca-en for canada\n    ca-fr for canada (fr)\n    ct-ca for catalan\n    cl-es for chile\n    cn-zh for china\n    co-es for colombia\n    hr-hr for croatia\n    cz-cs for czech republic\n    dk-da for denmark\n    ee-et for estonia\n    fi-fi for finland\n    fr-fr for france\n    de-de for germany\n    gr-el for greece\n    hk-tzh for hong kong\n    hu-hu for hungary\n    in-en for india\n    id-id for indonesia\n    id-en for indonesia (en)\n    ie-en for ireland\n    il-he for israel\n    it-it for italy\n    jp-jp for japan\n    kr-kr for korea\n    lv-lv for latvia\n    lt-lt for lithuania\n    xl-es for latin america\n    my-ms for malaysia\n    my-en for malaysia (en)\n    mx-es for mexico\n    nl-nl for netherlands\n    nz-en for new zealand\n    no-no for norway\n    pe-es for peru\n    ph-en for philippines\n    ph-tl for philippines (tl)\n    pl-pl for poland\n    pt-pt for portugal\n    ro-ro for romania\n    ru-ru for russia\n    sg-en for singapore\n    sk-sk for slovak republic\n    sl-sl for slovenia\n    za-en for south africa\n    es-es for spain\n    se-sv for sweden\n    ch-de for switzerland (de)\n    ch-fr for switzerland (fr)\n    ch-it for switzerland (it)\n    tw-tzh for taiwan\n    th-th for thailand\n    tr-tr for turkey\n    ua-uk for ukraine\n    uk-en for united kingdom\n    us-en for united states\n    ue-es for united states (es)\n    ve-es for venezuela\n    vn-vi for vietnam\n    wt-wt for no region\n___\n</details>\n\n[go to top](#top)\n\n\n## ddgs and asyncddgs classes\n\nthe ddgs and asyncddgs classes are used to retrieve search results from duckduckgo.com.\nto use the asyncddgs class, you can perform asynchronous operations using python's asyncio library.\nto initialize an instance of the ddgs or asyncddgs classes, you can provide the following optional arguments:\n```python3\nclass ddgs:\n    \"\"\"duckduckgo_search class to get search results from duckduckgo.com\n\n    args:\n        headers (dict, optional): dictionary of headers for the http client. defaults to none.\n        proxies (union[dict, str], optional): proxies for the http client (can be dict or str). defaults to none.\n        timeout (int, optional): timeout value for the http client. defaults to 10.\n    \"\"\"\n```\n\nhere is an example of initializing the ddgs class:\n```python3\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    results = [r for r in ddgs.text(\"python programming\", max_results=5)]\n    print(results)\n```\nhere is an example of initializing the asyncddgs class:\n```python3\nimport asyncio\nfrom duckduckgo_search import asyncddgs\n\nasync def get_results():\n    async with asyncddgs() as ddgs:\n        results = [r async for r in ddgs.text(\"cat\", max_results=5)]\n        return results\n\nasync def main():\n    ddgs_results = await get_results()\n    print(ddgs_results)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\nit is important to note that the ddgs and asyncddgs classes should always be used as a context manager (with statement).\nthis ensures proper resource management and cleanup, as the context manager will automatically handle opening and closing the http client connection.\n\n[go to top](#top)\n\n## using proxy\n*1. the easiest way. launch the tor browser*\n```python3\nfrom duckduckgo_search import ddgs\n\nwith ddgs(proxies=\"socks5://localhost:9150\", timeout=20) as ddgs:\n    for r in ddgs.text(\"something you need\", max_results=50):\n        print(r)\n```\n*2. use any proxy server* (*example with [iproyal residential proxies](https://iproyal.com?r=residential_proxies)*)\n```python3\nfrom duckduckgo_search import ddgs\n\nwith ddgs(proxies=\"socks5://user:password@geo.iproyal.com:32325\", timeout=20) as ddgs:\n    for r in ddgs.text(\"something you need\", max_results=50):\n        print(r)\n```\n\n[go to top](#top)\n\n## exceptions\n\nexceptions:\n- `duckduckgosearchexception`: raised when there is a generic exception during the api request.\n\n[go to top](#top)\n\n## 1. text() - text search by duckduckgo.com\n\n```python\ndef text(\n    keywords: str,\n    region: str = \"wt-wt\",\n    safesearch: str = \"moderate\",\n    timelimit: optional[str] = none,\n    backend: str = \"api\",\n    max_results: optional[int] = none,\n) -> iterator[dict[str, optional[str]]]:\n    \"\"\"duckduckgo text search generator. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n        region: wt-wt, us-en, uk-en, ru-ru, etc. defaults to \"wt-wt\".\n        safesearch: on, moderate, off. defaults to \"moderate\".\n        timelimit: d, w, m, y. defaults to none.\n        backend: api, html, lite. defaults to api.\n            api - collect data from https://duckduckgo.com,\n            html - collect data from https://html.duckduckgo.com,\n            lite - collect data from https://lite.duckduckgo.com.\n        max_results: max number of results. if none, returns results only from the first response. defaults to none.\n    yields:\n        dict with search results.\n\n    \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    for r in ddgs.text('live free or die', region='wt-wt', safesearch='off', timelimit='y', max_results=10):\n        print(r)\n\n# searching for pdf files\nwith ddgs() as ddgs:\n    for r in ddgs.text('russia filetype:pdf', region='wt-wt', safesearch='off', timelimit='y', max_results=10):\n        print(r)\n```\n\n[go to top](#top)\n\n## 2. answers() - instant answers by duckduckgo.com\n\n```python\ndef answers(keywords: str) -> iterator[dict[str, optional[str]]]::\n    \"\"\"duckduckgo instant answers. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n\n    yields:\n        dict with instant answers results.\n\n        \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    for r in ddgs.answers(\"sun\"):\n        print(r)\n```\n\n[go to top](#top)\n\n## 3. images() - image search by duckduckgo.com\n\n```python\ndef images(\n    keywords: str,\n    region: str = \"wt-wt\",\n    safesearch: str = \"moderate\",\n    timelimit: optional[str] = none,\n    size: optional[str] = none,\n    color: optional[str] = none,\n    type_image: optional[str] = none,\n    layout: optional[str] = none,\n    license_image: optional[str] = none,\n    max_results: optional[int] = none,\n) -> iterator[dict[str, optional[str]]]:\n    \"\"\"duckduckgo images search. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n        region: wt-wt, us-en, uk-en, ru-ru, etc. defaults to \"wt-wt\".\n        safesearch: on, moderate, off. defaults to \"moderate\".\n        timelimit: day, week, month, year. defaults to none.\n        size: small, medium, large, wallpaper. defaults to none.\n        color: color, monochrome, red, orange, yellow, green, blue,\n            purple, pink, brown, black, gray, teal, white. defaults to none.\n        type_image: photo, clipart, gif, transparent, line.\n            defaults to none.\n        layout: square, tall, wide. defaults to none.\n        license_image: any (all creative commons), public (publicdomain),\n            share (free to share and use), sharecommercially (free to share and use commercially),\n            modify (free to modify, share, and use), modifycommercially (free to modify, share, and\n            use commercially). defaults to none.\n        max_results: max number of results. if none, returns results only from the first response. defaults to none.\n\n    yields:\n        dict with image search results.\n\n    \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    keywords = 'butterfly'\n    ddgs_images_gen = ddgs.images(\n      keywords,\n      region=\"wt-wt\",\n      safesearch=\"off\",\n      size=none,\n      color=\"monochrome\",\n      type_image=none,\n      layout=none,\n      license_image=none,\n      max_results=100,\n    )\n    for r in ddgs_images_gen:\n        print(r)\n```\n\n[go to top](#top)\n\n## 4. videos() - video search by duckduckgo.com\n\n```python\ndef videos(\n    keywords: str,\n    region: str = \"wt-wt\",\n    safesearch: str = \"moderate\",\n    timelimit: optional[str] = none,\n    resolution: optional[str] = none,\n    duration: optional[str] = none,\n    license_videos: optional[str] = none,\n    max_results: optional[int] = none,\n) -> iterator[dict[str, optional[str]]]:\n    \"\"\"duckduckgo videos search. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n        region: wt-wt, us-en, uk-en, ru-ru, etc. defaults to \"wt-wt\".\n        safesearch: on, moderate, off. defaults to \"moderate\".\n        timelimit: d, w, m. defaults to none.\n        resolution: high, standart. defaults to none.\n        duration: short, medium, long. defaults to none.\n        license_videos: creativecommon, youtube. defaults to none.\n        max_results: max number of results. if none, returns results only from the first response. defaults to none.\n\n    yields:\n        dict with videos search results\n\n    \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    keywords = 'tesla'\n    ddgs_videos_gen = ddgs.videos(\n      keywords,\n      region=\"wt-wt\",\n      safesearch=\"off\",\n      timelimit=\"w\",\n      resolution=\"high\",\n      duration=\"medium\",\n      max_results=100,\n    )\n    for r in ddgs_videos_gen:\n        print(r)\n```\n\n[go to top](#top)\n\n## 5. news() - news search by duckduckgo.com\n\n```python\ndef news(\n    keywords: str,\n    region: str = \"wt-wt\",\n    safesearch: str = \"moderate\",\n    timelimit: optional[str] = none,\n    max_results: optional[int] = none,\n) -> iterator[dict[str, optional[str]]]:\n    \"\"\"duckduckgo news search. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n        region: wt-wt, us-en, uk-en, ru-ru, etc. defaults to \"wt-wt\".\n        safesearch: on, moderate, off. defaults to \"moderate\".\n        timelimit: d, w, m. defaults to none.\n        max_results: max number of results. if none, returns results only from the first response. defaults to none.\n\n    yields:\n        dict with news search results.\n\n    \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    keywords = 'holiday'\n    ddgs_news_gen = ddgs.news(\n      keywords,\n      region=\"wt-wt\",\n      safesearch=\"off\",\n      timelimit=\"m\",\n      max_results=20\n    )\n    for r in ddgs_news_gen:\n        print(r)\n```\n\n[go to top](#top)\n\n## 6. maps() - map search by duckduckgo.com\n\n```python\ndef maps(\n        keywords,\n        place: optional[str] = none,\n        street: optional[str] = none,\n        city: optional[str] = none,\n        county: optional[str] = none,\n        state: optional[str] = none,\n        country: optional[str] = none,\n        postalcode: optional[str] = none,\n        latitude: optional[str] = none,\n        longitude: optional[str] = none,\n        radius: int = 0,\n        max_results: optional[int] = none,\n    ) -> iterator[dict[str, optional[str]]]:\n        \"\"\"duckduckgo maps search. query params: https://duckduckgo.com/params\n\n        args:\n            keywords: keywords for query\n            place: if set, the other parameters are not used. defaults to none.\n            street: house number/street. defaults to none.\n            city: city of search. defaults to none.\n            county: county of search. defaults to none.\n            state: state of search. defaults to none.\n            country: country of search. defaults to none.\n            postalcode: postalcode of search. defaults to none.\n            latitude: geographic coordinate (north\u2013south position). defaults to none.\n            longitude: geographic coordinate (east\u2013west position); if latitude and\n                longitude are set, the other parameters are not used. defaults to none.\n            radius: expand the search square by the distance in kilometers. defaults to 0.\n            max_results: max number of results. if none, returns results only from the first response. defaults to none.\n\n        yields:\n            dict with maps search results\n\n        \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    for r in ddgs.maps(\"school\", place=\"uganda\", max_results=50):\n        print(r)\n```\n\n[go to top](#top)\n\n## 7. translate() - translation by duckduckgo.com\n\n```python\ndef translate(\n    self,\n    keywords: str,\n    from_: optional[str] = none,\n    to: str = \"en\",\n) -> optional[dict[str, optional[str]]]:\n    \"\"\"duckduckgo translate\n\n    args:\n        keywords: string or a list of strings to translate\n        from_: translate from (defaults automatically). defaults to none.\n        to: what language to translate. defaults to \"en\".\n\n    returns:\n        dict with translated keywords.\n    \"\"\"\n```\n***example***\n```python\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    keywords = 'school'\n    r = ddgs.translate(keywords, to=\"de\")\n    print(r)\n```\n\n[go to top](#top)\n\n## 8. suggestions() - suggestions by duckduckgo.com\n\n```python\ndef suggestions(\n    keywords,\n    region: str = \"wt-wt\",\n) -> iterator[dict[str, optional[str]]]:\n    \"\"\"duckduckgo suggestions. query params: https://duckduckgo.com/params\n\n    args:\n        keywords: keywords for query.\n        region: wt-wt, us-en, uk-en, ru-ru, etc. defaults to \"wt-wt\".\n\n    yields:\n        dict with suggestions results.\n    \"\"\"\n```\n***example***\n```python3\nfrom duckduckgo_search import ddgs\n\nwith ddgs() as ddgs:\n    for r in ddgs.suggestions(\"fly\"):\n        print(r)\n```\n\n[go to top](#top)\n",
  "docs_url": null,
  "keywords": "python,duckduckgo",
  "license": "mit license",
  "name": "duckduckgo-search",
  "package_url": "https://pypi.org/project/duckduckgo-search/",
  "project_url": "https://pypi.org/project/duckduckgo-search/",
  "project_urls": {
    "Homepage": "https://github.com/deedy5/duckduckgo_search"
  },
  "release_url": "https://pypi.org/project/duckduckgo-search/4.1.0/",
  "requires_dist": [
    "click >=8.1.7",
    "lxml >=4.9.3",
    "curl-cffi >=0.5.10",
    "ruff >=0.1.6 ; extra == 'dev'",
    "pytest >=7.4.2 ; extra == 'dev'",
    "pytest-asyncio >=0.21.1 ; extra == 'dev'"
  ],
  "requires_python": ">=3.8",
  "summary": "search for words, documents, images, news, maps and text translation using the duckduckgo.com search engine.",
  "version": "4.1.0",
  "releases": [],
  "developers": [
    "deedy5"
  ],
  "kwds": "duckduckgo_search search duckduckgo duckduckgocom searching",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_duckduckgo_search",
  "homepage": "",
  "release_count": 72,
  "dependency_ids": [
    "pypi_click",
    "pypi_curl_cffi",
    "pypi_lxml",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_ruff"
  ]
}
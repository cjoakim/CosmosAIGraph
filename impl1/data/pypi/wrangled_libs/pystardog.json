{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# pystardog\n[![pypi version](https://badge.fury.io/py/pystardog.svg)](https://badge.fury.io/py/pystardog)\n\na python wrapper for communicating with the stardog http server.\n\n**docs**: [http://pystardog.readthedocs.io](http://pystardog.readthedocs.io)\n\n**requirements**: python 3.8+\n\n## what is it?\n\nthis library wraps all the functionality of a client for the stardog\nknowledge graph, and provides access to a full set of functions such\nas executing sparql queries and many administrative tasks.\n\nthe implementation uses the http protocol, since most of stardog\nfunctionality is available using this protocol. for more information,\nsee [http\nprogramming](https://docs.stardog.com/developing/http-api)\nin stardog's documentation.\n\n## installation\n\npystardog is on [pypi](https://pypi.org/project/pystardog/). to install:\n\n```shell\npip install pystardog\n```\n\n## quick example\n\n```python\nimport stardog\n\nconn_details = {\n  'endpoint': 'http://localhost:5820',\n  'username': 'admin',\n  'password': 'admin'\n}\n\nwith stardog.admin(**conn_details) as admin:\n  db = admin.new_database('db')\n\n  with stardog.connection('db', **conn_details) as conn:\n    conn.begin()\n    conn.add(stardog.content.file('./test/data/example.ttl'))\n    conn.commit()\n    results = conn.select('select * { ?a ?p ?o }')\n\n  db.drop()\n```\n\n## interactive tutorial\n\nthere is a jupyter notebook and instructions in the [`notebooks`](./notebooks)\ndirectory of this repository.\n\n## documentation\n\ndocumentation is available at [http://pystardog.readthedocs.io](http://pystardog.readthedocs.io)\n\n### build the docs locally\n\nthe docs can be built locally using [sphinx](https://www.sphinx-doc.org/en/master/):\n\n  ```shell\n  cd docs\n  pip install -r requirements.txt\n  make html\n  ```\n\n#### autodoc type hints\n\nthe docs use [`sphinx-autodoc-typehints`](https://github.com/tox-dev/sphinx-autodoc-typehints) which allows you to omit types when documenting argument/returns types of functions. for example:\n\nthe following function:\n\n```python\ndef database(self, name: str) -> \"database\":\n    \"\"\"retrieves an object representing a database.\n\n    :param name: the database name\n\n    :return: the database\n    \"\"\"\n    return database(name, self.client)\n```\n\nwill yield the following documentation after sphinx processes it:\n\n![sphinx-autobuild-example](https://github.com/stardog-union/pystardog/assets/23270779/f0defa61-e0d5-4df6-9daf-6842e41a3889)\n\n> **note**\n> only arguments that have an existing `:param:` directive in the docstring get their\n> respective `:type:` directives added. the `:rtype:` directive is added if and only if no existing `:rtype:` is found.\n> see the [docs](https://github.com/tox-dev/sphinx-autodoc-typehints) for additional information on how the extension works.\n\n#### auto build \n\ndocs can be rebuilt automatically when saving a python file by utilizing [`sphinx-autobuild`](https://github.com/executablebooks/sphinx-autobuild)\n\n```shell\ncd docs\npip install -r requirements.txt requirements-dev.txt\nmake livehtml\n```\n\nthis should make the docs available at [http://localhost:8000](http://localhost:8000).\n\nexample output after running `make livehtml`:\n\n```text\n\u276f make livehtml\nsphinx-autobuild \".\" \"_build\"   --watch ../stardog/\n[sphinx-autobuild] > sphinx-build /users/frodo/projects/pystardog/docs /users/frodo/projects/pystardog/docs/_build\nrunning sphinx v6.2.1\nloading pickled environment... done\nbuilding [mo]: targets for 0 po files that are out of date\nwriting output...\nbuilding [html]: targets for 0 source files that are out of date\nupdating environment: 0 added, 0 changed, 0 removed\nreading sources...\nlooking for now-outdated files... none found\nno targets are out of date.\nbuild succeeded.\n\nthe html pages are in _build.\n[i 230710 15:26:18 server:335] serving on http://127.0.0.1:8000\n[i 230710 15:26:18 handlers:62] start watching changes\n[i 230710 15:26:18 handlers:64] start detecting changes\n```\n\n## contributing and development\n\ncontrbutions are always welcome to pystardog.\n\nto make a contribution:\n\n1. create a new branch off of `main`. there is no set naming convention for branches but try and keep it descriptive.\n\n    ```bash\n    git checkout -b feature/add-support-for-x\n    ```\n\n2. make your changes. if you are making substantive changes to pystardog, tests should be added to ensure your changes are working as expected. see [running tests](#running-tests) for additional information\nabout running tests.\n\n3. format your code. all python code should be formatted using [black](https://pypi.org/project/black/). see [formatting your code](#formatting-your-code) for additional information.\n\n4. commit and push your code. similar to branch names, there is no set structure for commit messages but try and keep your commit messages succinct and on topic.\n\n    ```bash\n    git commit -am \"feat: adds support for feature x\"\n    git push origin feature/add-support-for-x\n    ```\n\n5. create a pull request against `main`. all circleci checks should be passing in order to merge your pr. circleci will run tests against all supported versions of python, single node and cluster tests for pystardog, as well as do some static analysis of the code.\n\n### running tests\n\n#### requirements:\n\n- [docker](https://docs.docker.com/)\n- [docker compose](https://docs.docker.com/compose/)\n- valid stardog license\n\nto run the tests locally, a valid stardog license is required and placed at `dockerfiles/stardog-license-key.bin`. \n\n1. bring a stardog instance using docker-compose. for testing about 90% of the pystardog features, just a single node is sufficient,\nalthough we also provide a cluster set up for further testing. \n\n    ```shell\n    # bring a single node instance plus a bunch of virtual graphs for testing (recommended).\n    docker-compose -f docker-compose.single-node.yml up -d\n\n    # a cluster setup is also provided, if cluster only features are to be implemented and tested.\n    docker-compose -f docker-compose.cluster.yml up -d\n    ```\n\n2. create a virtual environment with the necessary dependencies:\n\n    ```shell\n    # create a virtualenv and activate it\n    virtualenv -p $(which python3) venv\n    source venv/bin/activate\n\n    # install dependencies\n    pip install -r requirements.txt -r test-requirements.txt \n    ```\n\n3. run the test suite:\n\n    ```shell\n    # run the basic test suite (covers most of the pystardog functionalities)\n    pytest test/test_admin_basic.py test/test_connection.py test/test_utils.py -s \n    ```\n\n    > **note**\n    > tests can be targeted against a specific stardog endpoint by specifying an `--endpoint` option to `pytest`. please note, that the tests will make modifications\n    > to the stardog instance like deleting users, roles, databases, etc. by default, the `--endpoint` is set to `http://localhost:5820`,\n    > which is where the dockerized stardog (defined in the docker compose files) is configured to be available at.\n    >\n    > ```bash\n    > pytest test/test_connection.py -k test_queries -s --endpoint https://my-other-stardog:5820\n    > ```\n\n### formatting your code\n\nto format all the python code:\n\n  ```shell\n  # make sure black is install\n  virtualenv -p $(which python3) venv\n  . venv/bin/activate\n  pip install -r test-requirements.txt\n\n  # run black formatter\n  black .\n  ```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pystardog",
  "package_url": "https://pypi.org/project/pystardog/",
  "project_url": "https://pypi.org/project/pystardog/",
  "project_urls": {
    "Homepage": "https://github.com/stardog-union/pystardog"
  },
  "release_url": "https://pypi.org/project/pystardog/0.17.0/",
  "requires_dist": [
    "requests (>=2.22.0)",
    "requests-toolbelt (>=0.9.1)",
    "contextlib2 (>=0.5.5)"
  ],
  "requires_python": "",
  "summary": "use stardog with python!",
  "version": "0.17.0",
  "releases": [],
  "developers": [
    "stardog_union",
    "support@stardog.com"
  ],
  "kwds": "stardog api python3 pytest python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pystardog",
  "homepage": "https://github.com/stardog-union/pystardog",
  "release_count": 22,
  "dependency_ids": [
    "pypi_contextlib2",
    "pypi_requests",
    "pypi_requests_toolbelt"
  ]
}
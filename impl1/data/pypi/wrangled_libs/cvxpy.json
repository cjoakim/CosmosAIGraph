{
  "classifiers": [],
  "description": "cvxpy\r\n=====================\r\n[![build status](http://github.com/cvxpy/cvxpy/workflows/build/badge.svg?event=push)](https://github.com/cvxpy/cvxpy/actions/workflows/build.yml)\r\n![pypi - downloads](https://img.shields.io/pypi/dm/cvxpy.svg?label=pypi%20downloads)\r\n![conda - downloads](https://img.shields.io/conda/dn/conda-forge/cvxpy.svg?label=conda%20downloads)\r\n[![coverage](https://sonarcloud.io/api/project_badges/measure?project=cvxpy_cvxpy&metric=coverage)](https://sonarcloud.io/summary/new_code?id=cvxpy_cvxpy)\r\n[![benchmarks](http://img.shields.io/badge/benchmarked%20by-asv-blue.svg?style=flat)](https://cvxpy.github.io/benchmarks/)\r\n[![openssf scorecard](https://api.securityscorecards.dev/projects/github.com/cvxpy/cvxpy/badge)](https://api.securityscorecards.dev/projects/github.com/cvxpy/cvxpy)\r\n\r\n**the cvxpy documentation is at [cvxpy.org](http://www.cvxpy.org/).**\r\n\r\n*we are building a cvxpy community on [discord](https://discord.gg/4urrqegbcr). join the conversation! for issues and long-form discussions, use [github issues](https://github.com/cvxpy/cvxpy/issues) and [github discussions](https://github.com/cvxpy/cvxpy/discussions).*\r\n\r\n**contents**\r\n- [installation](#installation)\r\n- [getting started](#getting-started)\r\n- [issues](#issues)\r\n- [community](#community)\r\n- [contributing](#contributing)\r\n- [team](#team)\r\n- [citing](#citing)\r\n\r\n\r\ncvxpy is a python-embedded modeling language for convex optimization problems. it allows you to express your problem in a natural way that follows the math, rather than in the restrictive standard form required by solvers.\r\n\r\nfor example, the following code solves a least-squares problem where the variable is constrained by lower and upper bounds:\r\n\r\n```python3\r\nimport cvxpy as cp\r\nimport numpy\r\n\r\n# problem data.\r\nm = 30\r\nn = 20\r\nnumpy.random.seed(1)\r\na = numpy.random.randn(m, n)\r\nb = numpy.random.randn(m)\r\n\r\n# construct the problem.\r\nx = cp.variable(n)\r\nobjective = cp.minimize(cp.sum_squares(a @ x - b))\r\nconstraints = [0 <= x, x <= 1]\r\nprob = cp.problem(objective, constraints)\r\n\r\n# the optimal objective is returned by prob.solve().\r\nresult = prob.solve()\r\n# the optimal value for x is stored in x.value.\r\nprint(x.value)\r\n# the optimal lagrange multiplier for a constraint\r\n# is stored in constraint.dual_value.\r\nprint(constraints[0].dual_value)\r\n```\r\n\r\nwith cvxpy, you can model\r\n* convex optimization problems,\r\n* mixed-integer convex optimization problems,\r\n* geometric programs, and\r\n* quasiconvex programs.\r\n\r\ncvxpy is not a solver. it relies upon the open source solvers\r\n[ecos](http://github.com/ifa-ethz/ecos), [scs](https://github.com/bodono/scs-python),\r\nand [osqp](https://github.com/oxfordcontrol/osqp). additional solvers are\r\n[available](https://www.cvxpy.org/tutorial/advanced/index.html#choosing-a-solver),\r\nbut must be installed separately.\r\n\r\ncvxpy began as a stanford university research project. it is now developed by\r\nmany people, across many institutions and countries.\r\n\r\n\r\n## installation\r\ncvxpy is available on pypi, and can be installed with\r\n```\r\npip install cvxpy\r\n```\r\n\r\ncvxpy can also be installed with conda, using\r\n```\r\nconda install -c conda-forge cvxpy\r\n```\r\n\r\ncvxpy has the following dependencies:\r\n\r\n- python >= 3.8\r\n- clarabel >= 0.5.0\r\n- osqp >= 0.6.2\r\n- ecos >= 2\r\n- scs >= 3.0\r\n- numpy >= 1.15\r\n- scipy >= 1.1.0\r\n\r\nfor detailed instructions, see the [installation\r\nguide](https://www.cvxpy.org/install/index.html).\r\n\r\n## getting started\r\nto get started with cvxpy, check out the following:\r\n* [official cvxpy tutorial](https://www.cvxpy.org/tutorial/index.html)\r\n* [example library](https://www.cvxpy.org/examples/index.html)\r\n* [api reference](https://www.cvxpy.org/api_reference/cvxpy.html)\r\n\r\n## issues\r\nwe encourage you to report issues using the [github tracker](https://github.com/cvxpy/cvxpy/issues). we welcome all kinds of issues, especially those related to correctness, documentation, performance, and feature requests.\r\n\r\nfor basic usage questions (e.g., \"why isn't my problem dcp?\"), please use [stackoverflow](https://stackoverflow.com/questions/tagged/cvxpy) instead.\r\n\r\n## community\r\nthe cvxpy community consists of researchers, data scientists, software engineers, and students from all over the world. we welcome you to join us!\r\n\r\n* to chat with the cvxpy community in real-time, join us on [discord](https://discord.gg/4urrqegbcr).\r\n* to have longer, in-depth discussions with the cvxpy community, use [github discussions](https://github.com/cvxpy/cvxpy/discussions).\r\n* to share feature requests and bug reports, use [github issues](https://github.com/cvxpy/cvxpy/issues).\r\n\r\nplease be respectful in your communications with the cvxpy community, and make sure to abide by our [code of conduct](https://github.com/cvxpy/cvxpy/blob/master/code_of_conduct.md).\r\n\r\n## contributing\r\nwe appreciate all contributions. you don't need to be an expert in convex\r\noptimization to help out.\r\n\r\nyou should first\r\ninstall [cvxpy from source](https://www.cvxpy.org/install/index.html#install-from-source).\r\nhere are some simple ways to start contributing immediately:\r\n* read the cvxpy source code and improve the documentation, or address todos\r\n* enhance the [website documentation](https://github.com/cvxpy/cvxpy/tree/master/doc)\r\n* browse the [issue tracker](https://github.com/cvxpy/cvxpy/issues), and look for issues tagged as \"help wanted\"\r\n* polish the [example library](https://github.com/cvxpy/cvxpy/tree/master/examples)\r\n* add a [benchmark](https://github.com/cvxpy/cvxpy/tree/master/cvxpy/tests/test_benchmarks.py)\r\n\r\nif you'd like to add a new example to our library, or implement a new feature,\r\nplease get in touch with us first to make sure that your priorities align with\r\nours. \r\n\r\ncontributions should be submitted as [pull requests](https://github.com/cvxpy/cvxpy/pulls).\r\na member of the cvxpy development team will review the pull request and guide\r\nyou through the contributing process.\r\n\r\nbefore starting work on your contribution, please read the [contributing guide](https://github.com/cvxpy/cvxpy/blob/master/contributing.md).\r\n\r\n## team\r\ncvxpy is a community project, built from the contributions of many\r\nresearchers and engineers.\r\n\r\ncvxpy is developed and maintained by [steven\r\ndiamond](https://stevendiamond.me/), [akshay\r\nagrawal](https://akshayagrawal.com), [riley murray](https://rileyjmurray.wordpress.com/), \r\n[philipp schiele](https://www.philippschiele.com/),\r\nand [bartolomeo stellato](https://stellato.io/), with many others contributing\r\nsignificantly. a non-exhaustive list of people who have shaped cvxpy over the\r\nyears includes stephen boyd, eric chu, robin verschueren, michael sommerauer,\r\njaehyun park, enzo busseti, aj friend, judson wilson, and chris dembia.\r\n\r\nfor more information about the team and our processes, see our [governance document](https://github.com/cvxpy/org/blob/main/governance.md).\r\n\r\n## citing\r\nif you use cvxpy for academic work, we encourage you to [cite our papers](https://www.cvxpy.org/citing/index.html). if you use cvxpy in industry, we'd love to hear from you as well, on discord or over email.\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license, version 2.0",
  "name": "cvxpy",
  "package_url": "https://pypi.org/project/cvxpy/",
  "project_url": "https://pypi.org/project/cvxpy/",
  "project_urls": {
    "Homepage": "https://github.com/cvxpy/cvxpy"
  },
  "release_url": "https://pypi.org/project/cvxpy/1.4.1/",
  "requires_dist": [
    "osqp >=0.6.2",
    "ecos >=2",
    "clarabel >=0.5.0",
    "scs >=3.0",
    "numpy >=1.15",
    "scipy >=1.1.0",
    "pybind11",
    "cylp >=0.91.5 ; extra == 'cbc'",
    "clarabel ; extra == 'clarabel'",
    "cvxopt ; extra == 'cvxopt'",
    "diffcp ; extra == 'diffcp'",
    "ortools <9.8,>=9.5 ; extra == 'glop'",
    "cvxopt ; extra == 'glpk'",
    "cvxopt ; extra == 'glpk_mi'",
    "gurobipy ; extra == 'gurobi'",
    "scipy >=1.6.1 ; extra == 'highs'",
    "Mosek ; extra == 'mosek'",
    "ortools <9.8,>=9.5 ; extra == 'pdlp'",
    "piqp ; extra == 'piqp'",
    "proxsuite ; extra == 'proxqp'",
    "PySCIPOpt ; extra == 'scip'",
    "scipy ; extra == 'scipy'",
    "setuptools >65.5.1 ; extra == 'scs'",
    "xpress ; extra == 'xpress'"
  ],
  "requires_python": ">=3.8",
  "summary": "a domain-specific language for modeling convex optimization problems in python.",
  "version": "1.4.1",
  "releases": [],
  "developers": [
    "akshayka@cs.stanford.edu",
    "boyd@stanford.edu",
    "echu508@stanford.edu",
    "steven_diamond",
    "stevend2@stanford.edu"
  ],
  "kwds": "cvxpy cvxpy_cvxpy project_badges sonarcloud badge",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_cvxpy",
  "homepage": "https://github.com/cvxpy/cvxpy",
  "release_count": 118,
  "dependency_ids": [
    "pypi_clarabel",
    "pypi_cvxopt",
    "pypi_cylp",
    "pypi_diffcp",
    "pypi_ecos",
    "pypi_gurobipy",
    "pypi_mosek",
    "pypi_numpy",
    "pypi_ortools",
    "pypi_osqp",
    "pypi_piqp",
    "pypi_proxsuite",
    "pypi_pybind11",
    "pypi_pyscipopt",
    "pypi_scipy",
    "pypi_scs",
    "pypi_setuptools",
    "pypi_xpress"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# ulid\n\n[![build status](https://travis-ci.org/ahawker/ulid.svg?branch=master)](https://travis-ci.org/ahawker/ulid)\n[![build status](https://ci.appveyor.com/api/projects/status/fy0hufnb8h6gwk4d/branch/master?svg=true)](https://ci.appveyor.com/project/ahawker/ulid/branch/master)\n[![codecov](https://codecov.io/gh/ahawker/ulid/branch/master/graph/badge.svg)](https://codecov.io/gh/ahawker/ulid)\n[![code climate](https://codeclimate.com/github/ahawker/ulid/badges/gpa.svg)](https://codeclimate.com/github/ahawker/ulid)\n[![issue count](https://codeclimate.com/github/ahawker/ulid/badges/issue_count.svg)](https://codeclimate.com/github/ahawker/ulid)\n\n[![pypi version](https://badge.fury.io/py/ulid-py.svg)](https://badge.fury.io/py/ulid-py)\n[![pypi versions](https://img.shields.io/pypi/pyversions/ulid-py.svg)](https://pypi.python.org/pypi/ulid-py)\n\n[![updates](https://pyup.io/repos/github/ahawker/ulid/shield.svg)](https://pyup.io/repos/github/ahawker/ulid/)\n\n[![documentation status](https://readthedocs.org/projects/ulid/badge/?version=latest)](http://ulid.readthedocs.io/en/latest/?badge=latest)\n\n[universally unique lexicographically sortable identifier](https://github.com/alizain/ulid) in [python 3](https://www.python.org/).\n\n### status\n\nthis project is actively maintained.\n\n### installation\n\nto install ulid from [pip](https://pypi.python.org/pypi/pip):\n```bash\n    $ pip install ulid-py\n```\n\nto install ulid from source:\n```bash\n    $ git clone git@github.com:ahawker/ulid.git\n    $ cd ulid && python setup.py install\n```\n\n### usage\n\ncreate a brand new ulid.\n\nthe timestamp value (48-bits) is from [time.time()](https://docs.python.org/3/library/time.html?highlight=time.time#time.time) with millisecond precision.\n\nthe randomness value (80-bits) is from [os.urandom()](https://docs.python.org/3/library/os.html?highlight=os.urandom#os.urandom).\n\n```python\n>>> import ulid\n>>> ulid.new()\n<ulid('01bjqe4qthmfp0s5j153xcfsp9')>\n```\n\ncreate a new ulid from an existing 128-bit value, such as a [uuid](https://docs.python.org/3/library/uuid.html).\n\nsupports ulid values as `int`, `bytes`, `str`, and `uuid` types.\n\n```python\n>>> import ulid, uuid\n>>> value = uuid.uuid4()\n>>> value\nuuid('0983d0a2-ff15-4d83-8f37-7dd945b5aa39')\n>>> ulid.from_uuid(value)\n<ulid('09gf8a5zrn9p1rydvxv52vbahs')>\n```\n\ncreate a new ulid from an existing timestamp value, such as a [datetime](https://docs.python.org/3/library/datetime.html#module-datetime) object.\n\nsupports timestamp values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, `datetime`, `timestamp`, and `ulid` types.\n\n```python\n>>> import datetime, ulid\n>>> ulid.from_timestamp(datetime.datetime(1999, 1, 1))\n<ulid('00tm9hx0008s220a3pwsfvnfeh')>\n```\n\ncreate a new ulid from an existing randomness value.\n\nsupports randomness values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, `randomness`, and `ulid` types.\n\n```python\n>>> import os, ulid\n>>> randomness = os.urandom(10)\n>>> ulid.from_randomness(randomness)\n>>> <ulid('01bjqhx2xedk0vn0gmywt9jn8s')>\n```\n\nfor cases when you don't necessarily control the data type (input from external system), you can use the `parse` method\nwhich will attempt to make the correct determination for you. please note that this will be slightly slower than creating\nthe instance from the respective `from_*` method as it needs to make a number of type/conditional checks.\n\nsupports values as `int`, `float`, `str`, `bytes`, `bytearray`, `memoryview`, `uuid.uuid`, and `ulid` types.\n\n```python\n>>> import ulid\n>>> value = db.model.get_id()  ## unsure about datatype -- could be int, uuid, or string?\n>>> ulid.parse(value)\n>>> <ulid('0k0edfetfm8sh912dbbd4abxsz')>\n```\n\nonce you have a ulid object, there are a number of ways to interact with it.\n\nthe `timestamp` method will give you a snapshot view of the first 48-bits of the ulid while the `randomness` method\nwill give you a snapshot of the last 80-bits.\n\n```python\n>>> import ulid\n>>> u = ulid.new()\n>>> u\n<ulid('01bjqm7sc7d5vvtg3j68abfq3n')>\n>>> u.timestamp()\n<timestamp('01bjqm7sc7')>\n>>> u.randomness()\n<randomness('d5vvtg3j68abfq3n')>\n```\n\nthe `ulid`, `timestamp`, and `randomness` classes all derive from the same base class, a `memoryview`.\n\na `memoryview` provides the `bin`, `bytes`, `hex`, `int`, `oct`, and `str`, methods for changing any values representation.\n\n```python\n>>> import ulid\n>>> u = ulid.new()\n>>> u\n<ulid('01bjqmf54d093dxeawz6jyrpaq')>\n>>> u.timestamp()\n<timestamp('01bjqmf54d')>\n>>> u.timestamp().int\n1497589322893\n>>> u.timestamp().bytes\nb'\\x01\\\\\\xafg\\x94\\x8d'\n>>> u.timestamp().datetime\ndatetime.datetime(2017, 6, 16, 5, 2, 2, 893000)\n>>> u.randomness().bytes\nb'\\x02f\\xde\\xb9\\\\\\xf9\\xa5\\xecyw'\n>>> u.bytes[6:] == u.randomness().bytes\ntrue\n>>> u.str\n'01bjqmf54d093dxeawz6jyrpaq'\n>>> u.int\n1810474399624548315999517391436142935\n>>> u.bin\n'0b1010111001010111101000111100101001000110100000010010001101101111010111001010111001111100110100101111011000101100101010111'\n>>> u.hex\n'0x15caf47948d0246deb95cf9a5ec5957'\n>>> u.oct\n'0o12712750745106402215572712717464573054527'\n```\n\na `memoryview` also provides rich comparison functionality.\n\n```python\n>>> import datetime, time, ulid\n>>> u1 = ulid.new()\n>>> time.sleep(5)\n>>> u2 = ulid.new()\n>>> u1 < u2\ntrue\n>>> u3 = ulid.from_timestamp(datetime.datetime(2039, 1, 1))\n>>> u1 < u2 < u3\ntrue\n>>> [u.timestamp().datetime for u in sorted([u2, u3, u1])]\n[datetime.datetime(2017, 6, 16, 5, 7, 14, 847000), datetime.datetime(2017, 6, 16, 5, 7, 26, 775000), datetime.datetime(2039, 1, 1, 8, 0)]\n```\n\n### future items\n\n* collection of benchmarks to track performance.\n* backport to python 2.7?\n* see [github issues](https://github.com/ahawker/ulid/issues) for more!\n\n### goals\n\na fast implementation in pure python of the spec with binary format support.\n\n### contributing\n\nif you would like to contribute, simply fork the repository, push your changes and send a pull request.\npull requests will be brought into the `master` branch via a rebase and fast-forward merge with the goal of having a linear branch history with no merge commits.\n\n### license\n\n[apache 2.0](license)\n\n## why not uuid?\n\nuuid can be suboptimal for many uses-cases because:\n\n* it isn't the most character efficient way of encoding 128 bits of randomness\n* uuid v1/v2 is impractical in many environments, as it requires access to a unique, stable mac address\n* uuid v3/v5 requires a unique seed and produces randomly distributed ids, which can cause fragmentation in many data structures\n* uuid v4 provides no other information than randomness which can cause fragmentation in many data structures\n\nulid provides:\n\n* 128-bit compatibility with uuid\n* 1.21e+24 unique ulids per millisecond\n* lexicographically sortable!\n* canonically encoded as a 26 character string, as opposed to the 36 character uuid\n* uses crockford's base32 for better efficiency and readability (5 bits per character)\n* case insensitive\n* no special characters (url safe)\n\n## specification\n\nbelow is the current specification of ulid as implemented in this repository.\n\nthe binary format is implemented.\n\n```\n 01an4z07by      79ka1307sr9x4mv3\n\n|----------|    |----------------|\n timestamp          randomness\n  10chars            16chars\n   48bits             80bits\n```\n\n### components\n\n**timestamp**\n* 48 bit integer\n* unix-time in milliseconds\n* won't run out of space till the year 10895 ad.\n\n**randomness**\n* 80 bits\n* cryptographically secure source of randomness, if possible\n\n### sorting\n\nthe left-most character must be sorted first, and the right-most character sorted last (lexical order).\nthe default ascii character set must be used. within the same millisecond, sort order is not guaranteed\n\n### encoding\n\ncrockford's base32 is used as shown. this alphabet excludes the letters i, l, o, and u to avoid confusion and abuse.\n\n```\n0123456789abcdefghjkmnpqrstvwxyz\n```\n\n### binary layout and byte order\n\nthe components are encoded as 16 octets. each component is encoded with the most significant byte first (network byte order).\n\n```\n0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      32_bit_uint_time_high                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     16_bit_uint_time_low      |       16_bit_uint_random      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32_bit_uint_random                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32_bit_uint_random                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n### string representation\n\n```\nttttttttttrrrrrrrrrrrrrrrr\n\nwhere\nt is timestamp\nr is randomness\n```\n\n### links\n\n* [original implementation (javascript)](https://github.com/alizain/ulid)\n* [ulid (python)](https://github.com/mdipierro/ulid)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "ulid-py",
  "package_url": "https://pypi.org/project/ulid-py/",
  "project_url": "https://pypi.org/project/ulid-py/",
  "project_urls": {
    "Homepage": "https://github.com/ahawker/ulid"
  },
  "release_url": "https://pypi.org/project/ulid-py/1.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "universally unique lexicographically sortable identifier",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "andrew.r.hawker@gmail.com",
    "andrew_hawker"
  ],
  "kwds": "issue_count ulid ulids commits uuid4",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_ulid_py",
  "homepage": "https://github.com/ahawker/ulid",
  "release_count": 17,
  "dependency_ids": []
}
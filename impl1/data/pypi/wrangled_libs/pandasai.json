{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.9"
  ],
  "description": "# pandasai \ud83d\udc3c\n\n[![release](https://img.shields.io/pypi/v/pandasai?label=release&style=flat-square)](https://pypi.org/project/pandasai/)\n[![ci](https://github.com/gventuri/pandas-ai/actions/workflows/ci.yml/badge.svg)](https://github.com/gventuri/pandas-ai/actions/workflows/ci.yml/badge.svg)\n[![cd](https://github.com/gventuri/pandas-ai/actions/workflows/cd.yml/badge.svg)](https://github.com/gventuri/pandas-ai/actions/workflows/cd.yml/badge.svg)\n[![coverage](https://codecov.io/gh/gventuri/pandas-ai/branch/main/graph/badge.svg)](https://codecov.io/gh/gventuri/pandas-ai)\n[![documentation status](https://readthedocs.org/projects/pandas-ai/badge/?version=latest)](https://pandas-ai.readthedocs.io/en/latest/?badge=latest)\n[![discord](https://dcbadge.vercel.app/api/server/kf7fqh2fws?style=flat&compact=true)](https://discord.gg/kf7fqh2fws)\n[![downloads](https://static.pepy.tech/badge/pandasai)](https://pepy.tech/project/pandasai) [![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://opensource.org/licenses/mit)\n[![open in colab](https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667)](https://colab.research.google.com/drive/1zno-njhl7tboypzaqvmvgtsjckzkrv2e?usp=sharing)\n\npandasai is a python library that adds generative ai capabilities to [pandas](https://github.com/pandas-dev/pandas), the popular data analysis and manipulation tool. it is designed to be used in conjunction with pandas, and is not a replacement for it.\n\n<!-- add images/pandas-ai.png -->\n\n![pandasai](images/pandas-ai.png?raw=true)\n\n## \ud83d\udd27 quick install\n\n```bash\npip install pandasai\n```\n\n## \ud83d\udd0d demo\n\ntry out pandasai in your browser:\n\n[![open in colab](https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667)](https://colab.research.google.com/drive/1zno-njhl7tboypzaqvmvgtsjckzkrv2e?usp=sharing)\n\n## \ud83d\udcd6 documentation\n\nthe documentation for pandasai can be found [here](https://pandas-ai.readthedocs.io/en/latest/).\n\n## \ud83d\udcbb usage\n\n> disclaimer: gdp data was collected from [this source](https://ourworldindata.org/grapher/gross-domestic-product?tab=table), published by world development indicators - world bank (2022.05.26) and collected at national accounts data - world bank / oecd. it relates to the year of 2020. happiness indexes were extracted from [the world happiness report](https://ftnnews.com/images/stories/documents/2020/whr20.pdf). another useful [link](https://data.world/makeovermonday/2020w19-world-happiness-report-2020).\n\npandasai is designed to be used in conjunction with pandas. it makes pandas conversational, allowing you to ask questions to your data in natural language.\n\n### queries\n\nfor example, you can ask pandasai to find all the rows in a dataframe where the value of a column is greater than 5, and it will return a dataframe containing only those rows:\n\n```python\nimport pandas as pd\nfrom pandasai import smartdataframe\n\n# sample dataframe\ndf = pd.dataframe({\n    \"country\": [\"united states\", \"united kingdom\", \"france\", \"germany\", \"italy\", \"spain\", \"canada\", \"australia\", \"japan\", \"china\"],\n    \"gdp\": [19294482071552, 2891615567872, 2411255037952, 3435817336832, 1745433788416, 1181205135360, 1607402389504, 1490967855104, 4380756541440, 14631844184064],\n    \"happiness_index\": [6.94, 7.16, 6.66, 7.07, 6.38, 6.4, 7.23, 7.22, 5.87, 5.12]\n})\n\n# instantiate a llm\nfrom pandasai.llm import openai\nllm = openai(api_token=\"your_api_token\")\n\ndf = smartdataframe(df, config={\"llm\": llm})\ndf.chat('which are the 5 happiest countries?')\n```\n\nthe above code will return the following:\n\n```\n6            canada\n7         australia\n1    united kingdom\n3           germany\n0     united states\nname: country, dtype: object\n```\n\nof course, you can also ask pandasai to perform more complex queries. for example, you can ask pandasai to find the sum of the gdps of the 2 unhappiest countries:\n\n```python\ndf.chat('what is the sum of the gdps of the 2 unhappiest countries?')\n```\n\nthe above code will return the following:\n\n```\n19012600725504\n```\n\n### charts\n\nyou can also ask pandasai to draw a graph:\n\n```python\ndf.chat(\n    \"plot the histogram of countries showing for each the gdp, using different colors for each bar\",\n)\n```\n\n![chart](images/histogram-chart.png?raw=true)\n\nyou can save any charts generated by pandasai by setting the `save_charts` parameter to `true` in the `pandasai` constructor. for example, `pandasai(llm, save_charts=true)`. charts are saved in `./pandasai/exports/charts` .\n\n### multiple dataframes\n\nadditionally, you can also pass in multiple dataframes to pandasai and ask questions relating them.\n\n```python\nimport pandas as pd\nfrom pandasai import smartdatalake\nfrom pandasai.llm import openai\n\nemployees_data = {\n    'employeeid': [1, 2, 3, 4, 5],\n    'name': ['john', 'emma', 'liam', 'olivia', 'william'],\n    'department': ['hr', 'sales', 'it', 'marketing', 'finance']\n}\n\nsalaries_data = {\n    'employeeid': [1, 2, 3, 4, 5],\n    'salary': [5000, 6000, 4500, 7000, 5500]\n}\n\nemployees_df = pd.dataframe(employees_data)\nsalaries_df = pd.dataframe(salaries_data)\n\n\nllm = openai()\ndl = smartdatalake([employees_df, salaries_df], config={\"llm\": llm})\ndl.chat(\"who gets paid the most?\")\n```\n\nthe above code will return the following:\n\n```\noh, olivia gets paid the most.\n```\n\nyou can find more examples in the [examples](examples) directory.\n\n### \u26a1\ufe0f shortcuts\n\npandasai also provides a number of shortcuts (beta) to make it easier to ask questions to your data. for example, you can ask pandasai to `clean_data`, `impute_missing_values`, `generate_features`, `plot_histogram`, and many many more.\n\n```python\n# clean data\ndf.clean_data()\n\n# impute missing values\ndf.impute_missing_values()\n\n# generate features\ndf.generate_features()\n\n# plot histogram\ndf.plot_histogram(column=\"gdp\")\n```\n\nlearn more about the shortcuts [here](https://pandas-ai.readthedocs.io/en/latest/shortcuts/).\n\n## \ud83d\udd12 privacy & security\n\nin order to generate the python code to run, we take the dataframe head, we randomize it (using random generation for sensitive data and shuffling for non-sensitive data) and send just the head.\n\nalso, if you want to enforce further your privacy you can instantiate pandasai with `enforce_privacy = true` which will not send the head (but just column names) to the llm.\n\n## \ud83e\udd1d contributing\n\ncontributions are welcome! please check out the todos below, and feel free to open a pull request.\nfor more information, please see the [contributing guidelines](contributing.md).\n\nafter installing the virtual environment, please remember to install `pre-commit` to be compliant with our standards:\n\n```bash\npre-commit install\n```\n\n## contributors\n\n[![contributors](https://contrib.rocks/image?repo=gventuri/pandas-ai)](https://github.com/gventuri/pandas-ai/graphs/contributors)\n\n## \ud83d\udcdc license\n\npandasai is licensed under the mit license. see the license file for more details.\n\n## acknowledgements\n\n- this project is based on the [pandas](https://github.com/pandas-dev/pandas) library by independent contributors, but it's in no way affiliated with the pandas project.\n- this project is meant to be used as a tool for data exploration and analysis, and it's not meant to be used for production purposes. please use it responsibly.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pandasai",
  "package_url": "https://pypi.org/project/pandasai/",
  "project_url": "https://pypi.org/project/pandasai/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/pandasai/1.5.11/",
  "requires_dist": [
    "python-dotenv (>=1.0.0,<2.0.0)",
    "pandas (==1.5.3)",
    "astor (>=0.8.1,<0.9.0)",
    "openai (<2)",
    "ipython (>=8.13.1,<9.0.0)",
    "matplotlib (>=3.7.1,<4.0.0)",
    "pydantic (>=1,<2)",
    "sqlalchemy (>=1.4.49,<2.0.0)",
    "duckdb (>=0.8.1,<0.9.0)",
    "faker (>=19.12.0,<20.0.0)",
    "beautifulsoup4 (>=4.12.2,<5.0.0) ; extra == \"google-sheets\"",
    "google-generativeai (>=0.1.0rc2,<0.2.0) ; extra == \"google-ai\"",
    "google-cloud-aiplatform (>=1.26.1,<2.0.0) ; extra == \"google-ai\"",
    "langchain (>=0.0.199,<0.0.200) ; extra == \"langchain\"",
    "polars (>=0.18.15,<0.19.0) ; extra == \"polars\"",
    "statsmodels (>=0.14.0,<0.15.0) ; extra == \"statsmodels\"",
    "scikit-learn (>=1.2.2,<2.0.0) ; extra == \"scikit-learn\"",
    "seaborn (>=0.12.2,<0.13.0) ; extra == \"seaborn\"",
    "plotly (>=5.15.0,<6.0.0) ; extra == \"plotly\"",
    "kaleido (==0.2.0) ; extra == \"plotly\"",
    "ggplot (>=0.11.5,<0.12.0) ; extra == \"ggplot\"",
    "numpy (>=1.17,<2.0) ; extra == \"numpy\"",
    "scipy (>=1.9.0,<2.0.0)",
    "streamlit (>=1.23.1,<2.0.0) ; extra == \"streamlit\"",
    "text-generation (>=0.6.0) ; extra == \"text-generation\"",
    "openpyxl (>=3.0.7,<4.0.0) ; extra == \"excel\"",
    "pymysql (>=1.1.0,<2.0.0) ; extra == \"connectors\"",
    "psycopg2 (>=2.9.7,<3.0.0) ; extra == \"connectors\"",
    "yfinance (>=0.2.28,<0.3.0) ; extra == \"yfinance\"",
    "sqlalchemy-databricks (>=0.2.0,<0.3.0) ; extra == \"connectors\"",
    "snowflake-sqlalchemy (>=1.5.0,<2.0.0) ; extra == \"connectors\"",
    "pillow (>=10.1.0,<11.0.0)"
  ],
  "requires_python": ">=3.9, !=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*, !=3.7.*, !=3.8.*",
  "summary": "pandasai is a python library that integrates generative artificial intelligence capabilities into pandas, making dataframes conversational.",
  "version": "1.5.11",
  "releases": [],
  "developers": [
    "gabriele_venturi"
  ],
  "kwds": "pandasai badge pandas indicators df",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pandasai",
  "homepage": "",
  "release_count": 113,
  "dependency_ids": [
    "pypi_astor",
    "pypi_beautifulsoup4",
    "pypi_duckdb",
    "pypi_faker",
    "pypi_ggplot",
    "pypi_google_cloud_aiplatform",
    "pypi_google_generativeai",
    "pypi_ipython",
    "pypi_kaleido",
    "pypi_langchain",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_openai",
    "pypi_openpyxl",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_plotly",
    "pypi_polars",
    "pypi_psycopg2",
    "pypi_pydantic",
    "pypi_pymysql",
    "pypi_python_dotenv",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_snowflake_sqlalchemy",
    "pypi_sqlalchemy",
    "pypi_sqlalchemy_databricks",
    "pypi_statsmodels",
    "pypi_streamlit",
    "pypi_text_generation",
    "pypi_yfinance"
  ]
}
{
  "classifiers": [],
  "description": "anticaptchaofficial\n===================\n\nofficial https://anti-captcha.com/ library for solving images with text, recaptcha v2/v3 enterprise or non-enterprise, funcaptcha arcoselabs, geetest and hcaptcha enterprise or non-enterprise.\nanti-captcha is the most popular and reliable captcha solving service, working since 2007.\nprices for solving captchas start from $0.0005 per item.\n\n```bash\npip3 install anticaptchaofficial\n```\n\n&nbsp;\ncheck api key balance before creating tasks:\n```python\nbalance = solver.get_balance()\nif balance <= 0:\n    print(\"too low balance!\")\n    return\n```\n&nbsp;\n<br>\ncheck subscription credits balance if you have one:\n```python\ncredits = solver.get_credits_balance()\nif credits <= 0:\n    print(\"too low credits balance!\")\n    return\n```\n&nbsp;\n\nexample how to create [recaptcha v2](https://anti-captcha.com/apidoc/task-types/recaptchav2taskproxyless) task and receive g-response:\n\n```python\nfrom anticaptchaofficial.recaptchav2proxyless import *\n\nsolver = recaptchav2proxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_api_key\")\nsolver.set_website_url(\"https://website.com\")\nsolver.set_website_key(\"site_key\")\n\n# set true if it is recaptcha v2-invisible\n#solver.set_is_invisible(true)\n\n# set data-s value for google.com pages\n#solver.set_data_s('a_long_string_here')\n\n# specify softid to earn 10% commission with your app.\n# get your softid here: https://anti-captcha.com/clients/tools/devcenter\nsolver.set_soft_id(0)\n\ng_response = solver.solve_and_return_solution()\nif g_response != 0:\n    print \"g-response: \"+g_response\nelse:\n    print \"task finished with error \"+solver.error_code\n```\nreport previosly solved recaptcha v2/v3/enterprise as incorrect:\n```python\nsolver.report_incorrect_recaptcha()\n```\nreport it as correct to improve your quality:\n```python\nsolver.report_correct_recaptcha()\n```\n___\n\n&nbsp;\n\nsolve [image captcha](https://anti-captcha.com/apidoc/task-types/imagetotexttask):\n\n```python\nfrom anticaptchaofficial.imagecaptcha import *\n\nsolver = imagecaptcha()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\n\n# specify softid to earn 10% commission with your app.\n# get your softid here: https://anti-captcha.com/clients/tools/devcenter\nsolver.set_soft_id(0)\n\ncaptcha_text = solver.solve_and_return_solution(\"captcha.jpeg\")\nif captcha_text != 0:\n    print(\"captcha text \"+captcha_text)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\nreport previosly solved image captcha as incorrect:\n```python\nsolver.report_incorrect_image_captcha()\n```\n___\n\n&nbsp;\n\nsolve [hcaptcha](https://anti-captcha.com/apidoc/task-types/hcaptchatask):\n\n```python\nfrom anticaptchaofficial.hcaptchaproxyless import *\n\nsolver = hcaptchaproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_website_url(\"https://website.com\")\nsolver.set_website_key(\"site_key\")\nsolver.set_user_agent(\"your full user agent here\")\n\n# tell api that hcaptcha is invisible\n#solver.set_is_invisible(1)\n\n# specify softid to earn 10% commission with your app.\n# get your softid here: https://anti-captcha.com/clients/tools/devcenter\nsolver.set_soft_id(0)\n\ng_response = solver.solve_and_return_solution()\nif g_response != 0:\n    print(\"g-response: \"+g_response)\n    # use this user-agent to make requests to your target website\n    print(\"user-agent: \"+solver.get_user_agent())\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\nreport previosly solved hcaptcha as incorrect:\n```python\nsolver.report_incorrect_hcaptcha()\n```\n___\n&nbsp;\n\nsolve [funcaptcha](https://anti-captcha.com/apidoc/task-types/funcaptchataskproxyless) (arkoselabs):\n\n```python\nfrom anticaptchaofficial.funcaptchaproxyless import *\n\nsolver = funcaptchaproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_website_url(\"https://website.com\")\nsolver.set_website_key(\"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx\")\n\ntoken = solver.solve_and_return_solution()\nif token != 0:\n    print(\"result token: \"+token)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\n___\n\n&nbsp;\n\nsolve [geetest](https://anti-captcha.com/apidoc/task-types/geetesttask) captcha:\n\n```python\nfrom anticaptchaofficial.geetestproxyless import *\n\nsolver = geetestproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_api_key\")\nsolver.set_website_url(\"https://address.com\")\nsolver.set_gt_key(\"constant_gt_key\")\nsolver.set_challenge_key(\"variable_challenge_key\")\ntoken = solver.solve_and_return_solution()\nif token != 0:\n    print(\"result tokens: \")\n    print(token)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\n___\n\n&nbsp;\n\nsolve [geetest v4](https://anti-captcha.com/apidoc/task-types/geetesttask) captcha:\n\n```python\nfrom anticaptchaofficial.geetestproxyless import *\n\nsolver = geetestproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_api_key\")\nsolver.set_website_url(\"https://address.com\")\nsolver.set_version(4)\nsolver.set_init_parameters({\"risktype\": \"slide\"})\ntoken = solver.solve_and_return_solution()\nif token != 0:\n    print(\"result tokens: \")\n    print(token)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\n___\n\n\n&nbsp;\n\nsolve [hcaptcha enterprise](https://anti-captcha.com/apidoc/task-types/hcaptchatask):\n\n```python\nfrom anticaptchaofficial.hcaptchaproxyless import *\n\nsolver = hcaptchaproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_website_url(\"https://website.com\")\nsolver.set_website_key(\"site_key\")\nsolver.set_user_agent(\"your full user agent here\")\n\n# tell api that hcaptcha is invisible\n#solver.set_is_invisible(1)\n\n# tell api that hcaptcha is enterprise\n#solver.set_is_enterprise(1)\n\n# set here optional enterprise parameters like rqdata, sentry, apiendpoint, endpoint, reportapi, assethost, imghost\nsolver.set_enterprise_payload({\n    \"rqdata\": \"rq data value from target website\",\n    \"sentry\": true\n})\n\ng_response = solver.solve_and_return_solution()\nif g_response != 0:\n    print(\"g-response: \"+g_response)\n    # use this user-agent to make requests to your target website\n    print(\"user-agent: \"+solver.get_user_agent())\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\n___\n\n&nbsp;\n\nexample how to create [turnstile](https://anti-captcha.com/apidoc/task-types/turnstiletaskproxyless) task and receive a token:\n\n```python\nfrom anticaptchaofficial.turnstileproxyless import *\n\nsolver = turnstileproxyless()\nsolver.set_verbose(1)\nsolver.set_key(\"your_api_key\")\nsolver.set_website_url(\"https://website.com\")\nsolver.set_website_key(\"site_key\")\n\n# optionally specify page action\nsolver.set_action(\"login\")\n\n# optionally specify cdata token\nsolver.set_action(\"some_custom_token\")\n\n# specify softid to earn 10% commission with your app.\n# get your softid here: https://anti-captcha.com/clients/tools/devcenter\nsolver.set_soft_id(0)\n\ntoken = solver.solve_and_return_solution()\nif token != 0:\n    print \"token: \"+token\nelse:\n    print \"task finished with error \"+solver.error_code\n```\n___\n\n&nbsp;\n\nsolve [antigate](https://anti-captcha.com/apidoc/task-types/antigatetask) task:\n\n```python\nfrom anticaptchaofficial.antigatetask import *\n\nsolver = antigatetask()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_website_url(\"http://antigate.com/logintest.php\")\nsolver.set_template_name(\"sign-in and wait for control text\")\nsolver.set_variables({\n    \"login_input_css\": \"#login\",\n    \"login_input_value\": \"test login\",\n    \"password_input_css\": \"#password\",\n    \"password_input_value\": \"test password\",\n    \"control_text\": \"you have been logged successfully\"\n})\n\nresult  = solver.solve_and_return_solution()\nif result != 0:\n    cookies, localstorage, fingerprint, url, domain = result[\"cookies\"], result[\"localstorage\"], result[\"fingerprint\"], result[\"url\"], result[\"domain\"]\n    print(\"cookies: \", cookies)\n    print(\"localstorage: \", localstorage)\n    print(\"fingerprint: \", fingerprint)\n    print(\"url: \"+url)\n    print(\"domain: \"+domain)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\n___\n\n&nbsp;\n\nsolve [antibotcookietask](https://anti-captcha.com/apidoc/task-types/antibotcookietask) task to bypass cloudflare, datadome and others:\n\n```python\nfrom anticaptchaofficial.antibotcookietask import *\n\nsolver = antibotcookietask()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_website_url(\"https://www.somewebsite.com/\")\nsolver.set_proxy_address(\"1.2.3.4\")\nsolver.set_proxy_port(3128)\nsolver.set_proxy_login(\"login\")\nsolver.set_proxy_password(\"password\")\n\nresult = solver.solve_and_return_solution()\nif result == 0:\n    print(\"could not solve task\")\n    exit()\n\nprint(result)\n\ncookies, localstorage, fingerprint = result[\"cookies\"], result[\"localstorage\"], result[\"fingerprint\"]\n\nif len(cookies) == 0:\n    print(\"empty cookies, try again\")\n    exit()\n\ncookie_string = '; '.join([f'{key}={value}' for key, value in cookies.items()])\nuser_agent = fingerprint['self.navigator.useragent']\nprint(f\"use these cookies for requests: {cookie_string}\")\nprint(f\"use this user-agent for requests: {user_agent}\")\n\ns = requests.session()\nproxies = {\n  \"http\": \"http://login:password@1.2.3.4:3128\",\n  \"https\": \"http://login:password@1.2.3.4:3128\"\n}\ns.proxies = proxies\n\ncontent = s.get(\"https://www.somewebsite.com/\", headers={\n    \"cookie\": cookie_string,\n    \"user-agent\": user_agent\n}).text\nprint(content)\n```\n___\n\n&nbsp;\n\nget [object coordinates](https://anti-captcha.com/apidoc/task-types/imagecoordinatestask) in an image:\n\n```python\nfrom anticaptchaofficial.imagetocoordinates import *\n\nsolver = imagetocoordinates()\nsolver.set_verbose(1)\nsolver.set_key(\"your_key\")\nsolver.set_mode(\"points\")\nsolver.set_comment(\"select in specified order\")\n\n# specify softid to earn 10% commission with your app.\n# get your softid here: https://anti-captcha.com/clients/tools/devcenter\nsolver.set_soft_id(0)\n\ncoordinates = solver.solve_and_return_solution(\"coordinates.png\")\nif coordinates != 0:\n    print(\"coordinates: \", captcha_text)\nelse:\n    print(\"task finished with error \"+solver.error_code)\n```\nreport previosly solved captcha as incorrect:\n```python\nsolver.report_incorrect_image_captcha()\n```\n___\n\ncheck out [examples](https://github.com/anti-captcha/anticaptcha-python) for other captcha types\n\n---\nuseful links:\n- [\u043a\u0430\u043a \u0440\u0435\u0448\u0438\u0442\u044c \u0440\u0435\u043a\u0430\u043f\u0447\u0443 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438](https://anti-captcha.com/ru/apidoc/task-types/recaptchav2taskproxyless)\n- [\u043e\u0431\u0445\u043e\u0434 \u043a\u0430\u043f\u0447\u0438](https://anti-captcha.com/ru/apidoc/task-types/imagetotexttask)\n- [c\u00f3mo resolver un recaptcha autom\u00e1ticamente](https://anti-captcha.com/es/apidoc/task-types/recaptchav2taskproxyless)\n- [como resolver um recaptcha automaticamente](https://anti-captcha.com/pt/apidoc/task-types/recaptchav2taskproxyless)\n",
  "docs_url": null,
  "keywords": "anticaptcha anti captcha recognition solve bypass recaptcha enterprise funcaptcha arkoselabs geetest hcaptcha antigate turnstile object coordinates",
  "license": "mit",
  "name": "anticaptchaofficial",
  "package_url": "https://pypi.org/project/anticaptchaofficial/",
  "project_url": "https://pypi.org/project/anticaptchaofficial/",
  "project_urls": {
    "Homepage": "https://github.com/anti-captcha/anticaptcha-python"
  },
  "release_url": "https://pypi.org/project/anticaptchaofficial/1.0.59/",
  "requires_dist": [
    "py (>=1.4.32)",
    "requests (>=2.22.0)"
  ],
  "requires_python": "",
  "summary": "official anti-captcha.com library",
  "version": "1.0.59",
  "releases": [],
  "developers": [
    "admin@anti-captcha.com",
    "anti_admin"
  ],
  "kwds": "captcha recaptcha funcaptchaproxyless hcaptcha captchas",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_anticaptchaofficial",
  "homepage": "https://github.com/anti-captcha/anticaptcha-python",
  "release_count": 38,
  "dependency_ids": [
    "pypi_py",
    "pypi_requests"
  ]
}
{
  "classifiers": [],
  "description": "# pgvector-python\n\n[pgvector](https://github.com/pgvector/pgvector) support for python\n\nsupports [django](https://github.com/django/django), [sqlalchemy](https://github.com/sqlalchemy/sqlalchemy), [sqlmodel](https://github.com/tiangolo/sqlmodel), [psycopg 3](https://github.com/psycopg/psycopg), [psycopg 2](https://github.com/psycopg/psycopg2), [asyncpg](https://github.com/magicstack/asyncpg), and [peewee](https://github.com/coleifer/peewee)\n\n[![build status](https://github.com/pgvector/pgvector-python/workflows/build/badge.svg?branch=master)](https://github.com/pgvector/pgvector-python/actions)\n\n## installation\n\nrun:\n\n```sh\npip install pgvector\n```\n\nand follow the instructions for your database library:\n\n- [django](#django)\n- [sqlalchemy](#sqlalchemy)\n- [sqlmodel](#sqlmodel)\n- [psycopg 3](#psycopg-3)\n- [psycopg 2](#psycopg-2)\n- [asyncpg](#asyncpg)\n- [peewee](#peewee)\n\nor check out some examples:\n\n- [embeddings](https://github.com/pgvector/pgvector-python/blob/master/examples/openai_embeddings.py) with openai\n- [sentence embeddings](https://github.com/pgvector/pgvector-python/blob/master/examples/sentence_embeddings.py) with sentencetransformers\n- [hybrid search](https://github.com/pgvector/pgvector-python/blob/master/examples/hybrid_search_rrf.py) with sentencetransformers (reciprocal rank fusion)\n- [hybrid search](https://github.com/pgvector/pgvector-python/blob/master/examples/hybrid_search.py) with sentencetransformers (cross-encoder)\n- [image search](https://github.com/pgvector/pgvector-python/blob/master/examples/pytorch_image_search.py) with pytorch\n- [implicit feedback recommendations](https://github.com/pgvector/pgvector-python/blob/master/examples/implicit_recs.py) with implicit\n- [explicit feedback recommendations](https://github.com/pgvector/pgvector-python/blob/master/examples/surprise_recs.py) with surprise\n- [recommendations](https://github.com/pgvector/pgvector-python/blob/master/examples/lightfm_recs.py) with lightfm\n\n## django\n\ncreate a migration to enable the extension\n\n```python\nfrom pgvector.django import vectorextension\n\nclass migration(migrations.migration):\n    operations = [\n        vectorextension()\n    ]\n```\n\nadd a vector field to your model\n\n```python\nfrom pgvector.django import vectorfield\n\nclass item(models.model):\n    embedding = vectorfield(dimensions=3)\n```\n\ninsert a vector\n\n```python\nitem = item(embedding=[1, 2, 3])\nitem.save()\n```\n\nget the nearest neighbors to a vector\n\n```python\nfrom pgvector.django import l2distance\n\nitem.objects.order_by(l2distance('embedding', [3, 1, 2]))[:5]\n```\n\nalso supports `maxinnerproduct` and `cosinedistance`\n\nget the distance\n\n```python\nitem.objects.annotate(distance=l2distance('embedding', [3, 1, 2]))\n```\n\nget items within a certain distance\n\n```python\nitem.objects.alias(distance=l2distance('embedding', [3, 1, 2])).filter(distance__lt=5)\n```\n\naverage vectors\n\n```python\nfrom django.db.models import avg\n\nitem.objects.aggregate(avg('embedding'))\n```\n\nalso supports `sum`\n\nadd an approximate index\n\n```python\nfrom pgvector.django import ivfflatindex, hnswindex\n\nclass item(models.model):\n    class meta:\n        indexes = [\n            ivfflatindex(\n                name='my_index',\n                fields=['embedding'],\n                lists=100,\n                opclasses=['vector_l2_ops']\n            ),\n            # or\n            hnswindex(\n                name='my_index',\n                fields=['embedding'],\n                m=16,\n                ef_construction=64,\n                opclasses=['vector_l2_ops']\n            )\n        ]\n```\n\nuse `vector_ip_ops` for inner product and `vector_cosine_ops` for cosine distance\n\n## sqlalchemy\n\nenable the extension\n\n```python\nsession.execute(text('create extension if not exists vector'))\n```\n\nadd a vector column\n\n```python\nfrom pgvector.sqlalchemy import vector\n\nclass item(base):\n    embedding = mapped_column(vector(3))\n```\n\ninsert a vector\n\n```python\nitem = item(embedding=[1, 2, 3])\nsession.add(item)\nsession.commit()\n```\n\nget the nearest neighbors to a vector\n\n```python\nsession.scalars(select(item).order_by(item.embedding.l2_distance([3, 1, 2])).limit(5))\n```\n\nalso supports `max_inner_product` and `cosine_distance`\n\nget the distance\n\n```python\nsession.scalars(select(item.embedding.l2_distance([3, 1, 2])))\n```\n\nget items within a certain distance\n\n```python\nsession.scalars(select(item).filter(item.embedding.l2_distance([3, 1, 2]) < 5))\n```\n\naverage vectors\n\n```python\nfrom sqlalchemy.sql import func\n\nsession.scalars(select(func.avg(item.embedding))).first()\n```\n\nalso supports `sum`\n\nadd an approximate index\n\n```python\nindex = index('my_index', item.embedding,\n    postgresql_using='ivfflat',\n    postgresql_with={'lists': 100},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n# or\nindex = index('my_index', item.embedding,\n    postgresql_using='hnsw',\n    postgresql_with={'m': 16, 'ef_construction': 64},\n    postgresql_ops={'embedding': 'vector_l2_ops'}\n)\n\nindex.create(engine)\n```\n\nuse `vector_ip_ops` for inner product and `vector_cosine_ops` for cosine distance\n\n## sqlmodel\n\nenable the extension\n\n```python\nsession.exec(text('create extension if not exists vector'))\n```\n\nadd a vector column\n\n```python\nfrom pgvector.sqlalchemy import vector\nfrom sqlalchemy import column\n\nclass item(sqlmodel, table=true):\n    embedding: list[float] = field(sa_column=column(vector(3)))\n```\n\ninsert a vector\n\n```python\nitem = item(embedding=[1, 2, 3])\nsession.add(item)\nsession.commit()\n```\n\nget the nearest neighbors to a vector\n\n```python\nsession.exec(select(item).order_by(item.embedding.l2_distance([3, 1, 2])).limit(5))\n```\n\nalso supports `max_inner_product` and `cosine_distance`\n\n## psycopg 3\n\nenable the extension\n\n```python\nconn.execute('create extension if not exists vector')\n```\n\nregister the vector type with your connection\n\n```python\nfrom pgvector.psycopg import register_vector\n\nregister_vector(conn)\n```\n\nfor [async connections](https://www.psycopg.org/psycopg3/docs/advanced/async.html), use\n\n```python\nfrom pgvector.psycopg import register_vector_async\n\nawait register_vector_async(conn)\n```\n\ncreate a table\n\n```python\nconn.execute('create table items (id bigserial primary key, embedding vector(3))')\n```\n\ninsert a vector\n\n```python\nembedding = np.array([1, 2, 3])\nconn.execute('insert into items (embedding) values (%s)', (embedding,))\n```\n\nget the nearest neighbors to a vector\n\n```python\nconn.execute('select * from items order by embedding <-> %s limit 5', (embedding,)).fetchall()\n```\n\n## psycopg 2\n\nenable the extension\n\n```python\ncur = conn.cursor()\ncur.execute('create extension if not exists vector')\n```\n\nregister the vector type with your connection or cursor\n\n```python\nfrom pgvector.psycopg2 import register_vector\n\nregister_vector(conn)\n```\n\ncreate a table\n\n```python\ncur.execute('create table items (id bigserial primary key, embedding vector(3))')\n```\n\ninsert a vector\n\n```python\nembedding = np.array([1, 2, 3])\ncur.execute('insert into items (embedding) values (%s)', (embedding,))\n```\n\nget the nearest neighbors to a vector\n\n```python\ncur.execute('select * from items order by embedding <-> %s limit 5', (embedding,))\ncur.fetchall()\n```\n\n## asyncpg\n\nenable the extension\n\n```python\nawait conn.execute('create extension if not exists vector')\n```\n\nregister the vector type with your connection\n\n```python\nfrom pgvector.asyncpg import register_vector\n\nawait register_vector(conn)\n```\n\nor your pool\n\n```python\nasync def init(conn):\n    await register_vector(conn)\n\npool = await asyncpg.create_pool(..., init=init)\n```\n\ncreate a table\n\n```python\nawait conn.execute('create table items (id bigserial primary key, embedding vector(3))')\n```\n\ninsert a vector\n\n```python\nembedding = np.array([1, 2, 3])\nawait conn.execute('insert into items (embedding) values ($1)', embedding)\n```\n\nget the nearest neighbors to a vector\n\n```python\nawait conn.fetch('select * from items order by embedding <-> $1 limit 5', embedding)\n```\n\n## peewee\n\nadd a vector column\n\n```python\nfrom pgvector.peewee import vectorfield\n\nclass item(basemodel):\n    embedding = vectorfield(dimensions=3)\n```\n\ninsert a vector\n\n```python\nitem = item.create(embedding=[1, 2, 3])\n```\n\nget the nearest neighbors to a vector\n\n```python\nitem.select().order_by(item.embedding.l2_distance([3, 1, 2])).limit(5)\n```\n\nalso supports `max_inner_product` and `cosine_distance`\n\nget the distance\n\n```python\nitem.select(item.embedding.l2_distance([3, 1, 2]).alias('distance'))\n```\n\nget items within a certain distance\n\n```python\nitem.select().where(item.embedding.l2_distance([3, 1, 2]) < 5)\n```\n\naverage vectors\n\n```python\nfrom peewee import fn\n\nitem.select(fn.avg(item.embedding)).scalar()\n```\n\nalso supports `sum`\n\nadd an approximate index\n\n```python\nitem.add_index('embedding vector_l2_ops', using='hnsw')\n```\n\nuse `vector_ip_ops` for inner product and `vector_cosine_ops` for cosine distance\n\n## history\n\nview the [changelog](https://github.com/pgvector/pgvector-python/blob/master/changelog.md)\n\n## contributing\n\neveryone is encouraged to help improve this project. here are a few ways you can help:\n\n- [report bugs](https://github.com/pgvector/pgvector-python/issues)\n- fix bugs and [submit pull requests](https://github.com/pgvector/pgvector-python/pulls)\n- write, clarify, or fix documentation\n- suggest or add new features\n\nto get started with development:\n\n```sh\ngit clone https://github.com/pgvector/pgvector-python.git\ncd pgvector-python\npip install -r requirements.txt\ncreatedb pgvector_python_test\npytest\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pgvector",
  "package_url": "https://pypi.org/project/pgvector/",
  "project_url": "https://pypi.org/project/pgvector/",
  "project_urls": {
    "Homepage": "https://github.com/pgvector/pgvector-python"
  },
  "release_url": "https://pypi.org/project/pgvector/0.2.4/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": ">=3.8",
  "summary": "pgvector support for python",
  "version": "0.2.4",
  "releases": [],
  "developers": [
    "andrew@ankane.org",
    "andrew_kane"
  ],
  "kwds": "django sqlalchemy psycopg psycopg3 psycopg2",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pgvector",
  "homepage": "https://github.com/pgvector/pgvector-python",
  "release_count": 14,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
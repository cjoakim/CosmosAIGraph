{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# databind.json\n\nthe `databind.json` package implements the de-/serialization to or from json payloads using\nthe `databind.core` framework.\n\ncheck out the [documentation][0] for examples.\n\n[0]: https://niklasrosenstein.github.io/python-databind/\n\n## built-in converters\n\nthe following tables shows which types can be deserialized from / serialize to python types with the native\nconverters provided by the `databind.json` module:\n\n| converter name | types | description |\n| -------------- | ----- | ----------- |\n| `anyconverter` | `typing.any` | accept any value (useful for arbitrary json). |\n| `collectionconverter` | `typing.collection[t]`, excl. `str`, `bytes`, `bytearray`, `memoryview` and `typing.mapping[k, v]` | converts between native python collections and json arrays. |\n| `datetimeconverter` | `datetime.date`, `datetime.datetime`, `datetime.time` | converts between strings and date/time formats, using iso 8601 time format by default (can be changed with the `databind.core.settings.dateformat` setting). |\n| `decimalconverter` | `decimal.decimal` | converts between strings (and ints/floats if strict mode is off, strict mode is on by default) and decimals. the precision can be controlled with the `databind.core.settings.precision` setting. |\n| `enumconverter` | `enum.enum`, `enum.intenum` | convert between strings and python enumerations. the serialized form of `intenum` is the integer value, whereas the serialized form of `enum` is a string (name of the enumeration value). |\n| `mappingconverter` | `typing.mapping[k, v]` | converts between python dicts and json objects. (while in theory `k` can be any type, for json `k` always needs to be `str`). |\n| `optionalconverter` | `typing.optional[t]` | handles optional fields in a schema. |\n| `plaindatatypeconverter` | `bytes`, `str`, `int`, `float`, `bool` | converts between plain datatypes. in non-strict mode (off by default), numeric types will also accept strings as input for the deserialization. |\n| `schemaconverter` | `dataclasses.dataclass`, `typing.typeddict` | converts between python dataclasses or typed dictionary and json objects. |\n| `unionconverter` | `typing.union[...]` | handles union types. unions in json can be expressed in a multitide of ways, e.g. using a discriminator key and flat, keyed or nested structure or \"best match\". check out the examples section of the documentation for more information. |\n| `literalconverter` | `typing.literal[...]` | accepts or rejects a value based on whether it matches one of the values in the literal type hint. |\n\n\nthe following converters are provided for convenience:\n\n| converter name | types | description |\n| -------------- | ----- | ----------- |\n| `stringifyconverter` | n/a | a helper that allows to easily create de/serializers from a \"to string\" and \"from string\" function. |\n\nthe following additional types are natively supported by `databind.json` using `stringifyconverter`:\n\n| types | description |\n| ----- | ----------- |\n| `uuid.uuid` | convert between strings and uuids. |\n| `pathlib.path` | convert between strings and paths. |\n| `pathlib.purepath` | convert between strings and paths. |\n| `nr.date.duration` | deserialize from iso 8601 duration strings or the object form, serialize to iso 8601 strings. |\n\n---\n\n<p align=\"center\">copyright &copy; 2020 &ndash; niklas rosenstein</p>\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "databind.json",
  "package_url": "https://pypi.org/project/databind.json/",
  "project_url": "https://pypi.org/project/databind.json/",
  "project_urls": {
    "Bug Tracker": "https://github.com/NiklasRosenstein/python-databind/issues",
    "Documentation": "https://niklasrosenstein.github.io/python-databind/",
    "Repository": "https://github.com/NiklasRosenstein/python-databind"
  },
  "release_url": "https://pypi.org/project/databind.json/4.4.2/",
  "requires_dist": [
    "databind.core (>=4.4.2,<5.0.0)",
    "nr-date (>=2.0.0,<3.0.0)",
    "typeapi (>=2.0.1,<3.0.0)",
    "typing-extensions (>=3.10.0,<4.7)"
  ],
  "requires_python": ">=3.6.3,<4.0.0",
  "summary": "de-/serialize python dataclasses to or from json payloads. compatible with python 3.7 and newer.",
  "version": "4.4.2",
  "releases": [],
  "developers": [
    "niklas_rosenstein",
    "rosensteinniklas@gmail.com"
  ],
  "kwds": "databind plaindatatypeconverter datatypes deserialization serializers",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_databind.json",
  "homepage": "",
  "release_count": 72,
  "dependency_ids": [
    "pypi_databind.core",
    "pypi_nr_date",
    "pypi_typeapi",
    "pypi_typing_extensions"
  ]
}
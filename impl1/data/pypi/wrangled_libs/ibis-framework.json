{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.9",
    "programming language :: sql",
    "topic :: database :: front-ends",
    "topic :: scientific/engineering",
    "topic :: software development :: code generators",
    "topic :: software development :: user interfaces"
  ],
  "description": "# ibis\n\n[![documentation status](https://img.shields.io/badge/docs-docs.ibis--project.org-blue.svg)](http://ibis-project.org)\n[![project chat](https://img.shields.io/badge/zulip-join_chat-purple.svg?logo=zulip)](https://ibis-project.zulipchat.com)\n[![anaconda-server badge](https://anaconda.org/conda-forge/ibis-framework/badges/version.svg)](https://anaconda.org/conda-forge/ibis-framework)\n[![pypi](https://img.shields.io/pypi/v/ibis-framework.svg)](https://pypi.org/project/ibis-framework)\n[![build status](https://github.com/ibis-project/ibis/actions/workflows/ibis-main.yml/badge.svg)](https://github.com/ibis-project/ibis/actions/workflows/ibis-main.yml?query=branch%3amaster)\n[![build status](https://github.com/ibis-project/ibis/actions/workflows/ibis-backends.yml/badge.svg)](https://github.com/ibis-project/ibis/actions/workflows/ibis-backends.yml?query=branch%3amaster)\n[![codecov branch](https://img.shields.io/codecov/c/github/ibis-project/ibis/master.svg)](https://codecov.io/gh/ibis-project/ibis)\n\n## what is ibis?\n\nibis is a python library that provides a lightweight, universal interface for data wrangling. it helps python users explore and transform data of any size, stored anywhere.\n\nibis has three primary components:\n\n1. **a dataframe api for python**.\n   python users can write ibis code to manipulate tabular data.\n2. **interfaces to 15+ query engines.**\n   wherever data is stored, people can use ibis as their api of choice to communicate with any of those query engines.\n3. **deferred execution**.\n   ibis uses deferred execution, so execution of code is pushed to the query engine.\n   users can execute at the speed of their backend, not their local computer.\n\n## why use ibis?\n\nibis aims to be a future-proof solution to interacting with data using python and can accomplish this goal through its main features:\n\n- **familiar api**: ibis\u2019s api design borrows from popular apis like pandas and dplyr that most users already know and like to use.\n- **consistent syntax**: ibis aims to be a universal python api for tabular data of any size, big or small.\n- **deferred execution**: ibis pushes code execution to the query engine and only moves required data into memory when necessary.\n  analytics workflows are faster and more efficient\n- **interactive mode**: ibis provides an interactive mode in which users can quickly diagnose problems, explore data, and mock up workflows and pipelines locally.\n- **10+ supported backends**: ibis supports multiple query engines and dataframe apis.\n  use one interface to transform with your data wherever it lives: from dataframes in pandas to parquet files through duckdb to tables in bigquery.\n- **minimize rewrites**: teams can often keep their ibis code the same regardless of backend changes, like increasing or decreasing computing power, changing the number or size of their databases, or switching backends entirely.\n- **flexibility when you need it**: when ibis doesn't support something, it provides a way to jump directly into sql.\n\n## common use cases\n\n- **speed up prototype to production.**\n  scale code written and tested locally to a distributed system or cloud sql engine with minimal rewrites.\n- **boost performance of existing python or pandas code.**\n  for example a general rule of thumb for pandas is \"have 5 to 10 times as much ram as the size of your dataset\".\n  when a dataset exceeds this rule using in-memory frameworks like pandas can be slow.\n  instead, using ibis will significantly speed up your workflows because of its deferred execution.\n  ibis also empowers you to switch to a faster database engine, without changing much of your code.\n- **get rid of long, error-prone, `f`-strings.**\n  ibis provides one syntax for multiple query engines and dataframe apis that lets you avoid learning new flavors of sql or other framework-specific code.\n  learn the syntax once and use that syntax anywhere.\n\n## backends\n\nibis acts as a universal frontend to the following systems:\n\n- [apache arrow datafusion](https://ibis-project.org/backends/datafusion/) (experimental)\n- [apache druid](https://ibis-project.org/backends/druid/) (experimental)\n- [apache impala](https://ibis-project.org/backends/impala/)\n- [apache pyspark](https://ibis-project.org/backends/pyspark/)\n- [bigquery](https://ibis-project.org/backends/bigquery/)\n- [clickhouse](https://ibis-project.org/backends/clickhouse/)\n- [dask](https://ibis-project.org/backends/dask/)\n- [duckdb](https://ibis-project.org/backends/duckdb/)\n- [heavyai](https://github.com/heavyai/ibis-heavyai)\n- [mysql](https://ibis-project.org/backends/mysql/)\n- [oracle](https://ibis-project.org/backends/oracle/) (experimental)\n- [pandas](https://ibis-project.org/backends/pandas/)\n- [polars](https://ibis-project.org/backends/polars/) (experimental)\n- [postgresql](https://ibis-project.org/backends/postgresql/)\n- [sql server](https://ibis-project.org/backends/mssql/)\n- [sqlite](https://ibis-project.org/backends/sqlite/)\n- [snowflake](https://ibis-project.org/backends/snowflake) (experimental)\n- [trino](https://ibis-project.org/backends/trino/) (experimental)\n\nthe list of supported backends is continuously growing. anyone can get involved\nin adding new ones! learn more about contributing to ibis in our contributing\ndocumentation at https://github.com/ibis-project/ibis/blob/master/docs/contributing.md\n\n## installation\n\ninstall ibis from pypi with:\n\n```bash\npip install 'ibis-framework[duckdb]'\n```\n\nor from conda-forge with:\n\n```bash\nconda install ibis-framework -c conda-forge\n```\n\n(it\u2019s a common mistake to `pip install ibis`. if you try to use ibis and get errors early on try uninstalling `ibis` and installing `ibis-framework`)\n\nto discover ibis, we suggest starting with the duckdb backend (which is included by default in the conda-forge package). the duckdb backend is performant and fully featured.\n\nto use ibis with other backends, include the backend name in brackets for pypi:\n\n```bash\npip install 'ibis-framework[postgres]'\n```\n\nor use `ibis-$backend` where `$backend` is the specific backend you want to use when installing from conda-forge:\n\n```bash\nconda install ibis-postgres -c conda-forge\n```\n\n## getting started with ibis\n\nwe provide a number of tutorial and example notebooks in the\n[ibis-examples](https://github.com/ibis-project/ibis-examples). the easiest way\nto try these out is through the online interactive notebook environment\nprovided here:\n[![binder](https://static.mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ibis-project/ibis-examples/main)\n\nyou can also get started analyzing any dataset, anywhere with just a few lines\nof ibis code. here\u2019s an example of how to use ibis with a sqlite database.\n\ndownload the sqlite database from the `ibis-tutorial-data` gcs (google cloud\nstorage) bucket, then connect to it using ibis.\n\n```bash\ncurl -lss -o geography.db 'https://storage.googleapis.com/ibis-tutorial-data/geography.db'\n```\n\nconnect to the database and show the available tables\n\n```python\n>>> import ibis\n>>> from ibis import _\n>>> ibis.options.interactive = true\n>>> con = ibis.sqlite.connect(\"geography.db\")\n>>> con.tables\ntables\n------\n- countries\n- gdp\n- independence\n```\n\nchoose the `countries` table and preview its first few rows\n\n```python\n>>> countries = con.tables.countries\n>>> countries.head()\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 iso_alpha2 \u2503 iso_alpha3 \u2503 iso_numeric \u2503 fips   \u2503 name                 \u2503 capital          \u2503 area_km2 \u2503 population \u2503 continent \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 string     \u2502 string     \u2502 int32       \u2502 string \u2502 string               \u2502 string           \u2502 float64  \u2502 int32      \u2502 string    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ad         \u2502 and        \u2502          20 \u2502 an     \u2502 andorra              \u2502 andorra la vella \u2502    468.0 \u2502      84000 \u2502 eu        \u2502\n\u2502 ae         \u2502 are        \u2502         784 \u2502 ae     \u2502 united arab emirates \u2502 abu dhabi        \u2502  82880.0 \u2502    4975593 \u2502 as        \u2502\n\u2502 af         \u2502 afg        \u2502           4 \u2502 af     \u2502 afghanistan          \u2502 kabul            \u2502 647500.0 \u2502   29121286 \u2502 as        \u2502\n\u2502 ag         \u2502 atg        \u2502          28 \u2502 ac     \u2502 antigua and barbuda  \u2502 st. johns        \u2502    443.0 \u2502      86754 \u2502 na        \u2502\n\u2502 ai         \u2502 aia        \u2502         660 \u2502 av     \u2502 anguilla             \u2502 the valley       \u2502    102.0 \u2502      13254 \u2502 na        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\nshow the 5 least populous countries in asia\n\n```python\n\n>>> (\n...     countries.filter(_.continent == \"as\")\n...     .select(\"name\", \"population\")\n...     .order_by(_.population)\n...     .limit(5)\n... )\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 name                           \u2503 population \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 string                         \u2502 int32      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 cocos [keeling] islands        \u2502        628 \u2502\n\u2502 british indian ocean territory \u2502       4000 \u2502\n\u2502 brunei                         \u2502     395027 \u2502\n\u2502 maldives                       \u2502     395650 \u2502\n\u2502 macao                          \u2502     449198 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n## community and contributing\n\nibis is an open source project and welcomes contributions from anyone in the community.\n\n- read [the contributing guide](https://github.com/ibis-project/ibis/blob/master/docs/contributing.md).\n- we care about keeping the community welcoming for all. check out [the code of conduct](https://github.com/ibis-project/ibis/blob/master/docs/code_of_conduct.md).\n- the ibis project is open sourced under the [apache license](https://github.com/ibis-project/ibis/blob/master/license.txt).\n\njoin our community by interacting on github or chatting with us on [zulip](https://ibis-project.zulipchat.com/).\n\nfor more information visit https://ibis-project.org/.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "ibis-framework",
  "package_url": "https://pypi.org/project/ibis-framework/",
  "project_url": "https://pypi.org/project/ibis-framework/",
  "project_urls": {
    "Documentation": "https://ibis-project.org",
    "Homepage": "https://ibis-project.org",
    "Issue Tracker": "https://github.com/ibis-project/ibis/issues",
    "Repository": "https://github.com/ibis-project/ibis"
  },
  "release_url": "https://pypi.org/project/ibis-framework/7.2.0/",
  "requires_dist": [
    "atpublic (>=2.3,<5)",
    "bidict (>=0.22.1,<1)",
    "filelock (>=3.7.0,<4)",
    "multipledispatch (>=0.6,<2)",
    "numpy (>=1,<2)",
    "pandas (>=1.2.5,<3)",
    "parsy (>=2,<3)",
    "pins[gcs] (>=0.8.3,<1)",
    "pyarrow (>=2,<15)",
    "pyarrow-hotfix (>=0.4,<1)",
    "python-dateutil (>=2.8.2,<3)",
    "pytz (>=2022.7)",
    "rich (>=12.4.4,<14)",
    "sqlglot (>=18.12.0,<21)",
    "toolz (>=0.11,<1)",
    "typing-extensions (>=4.3.0,<5)",
    "black (>=22.1.0,<24) ; extra == \"all\" or extra == \"decompiler\"",
    "clickhouse-connect[arrow,numpy,pandas] (>=0.5.23,<1) ; extra == \"all\" or extra == \"clickhouse\"",
    "dask[array,dataframe] (>=2022.9.1) ; extra == \"all\" or extra == \"dask\"",
    "datafusion (>=0.6,<34) ; extra == \"all\" or extra == \"datafusion\"",
    "db-dtypes (>=0.3,<2) ; extra == \"all\" or extra == \"bigquery\"",
    "deltalake (>=0.9.0,<1) ; extra == \"all\" or extra == \"deltalake\"",
    "duckdb (>=0.8.1,<1) ; extra == \"all\" or extra == \"duckdb\"",
    "duckdb-engine (>=0.1.8,<1) ; extra == \"all\" or extra == \"duckdb\"",
    "fsspec (>=2022.1.0) ; extra == \"all\" or extra == \"impala\"",
    "geoalchemy2 (>=0.6.3,<1) ; extra == \"all\" or extra == \"geospatial\"",
    "geopandas (>=0.6,<1) ; extra == \"all\" or extra == \"geospatial\"",
    "google-cloud-bigquery (>=3,<4) ; extra == \"all\" or extra == \"bigquery\"",
    "google-cloud-bigquery-storage (>=2,<3) ; extra == \"all\" or extra == \"bigquery\"",
    "graphviz (>=0.16,<1) ; extra == \"all\" or extra == \"visualization\"",
    "impyla (>=0.17,<1) ; extra == \"all\" or extra == \"impala\"",
    "oracledb (>=1.3.1,<2) ; extra == \"all\" or extra == \"oracle\"",
    "packaging (>=21.3,<24) ; extra == \"all\" or extra == \"oracle\" or extra == \"polars\" or extra == \"pyspark\" or extra == \"snowflake\"",
    "polars (>=0.19.3,<1) ; extra == \"all\" or extra == \"polars\"",
    "psycopg2 (>=2.8.4,<3) ; extra == \"all\" or extra == \"postgres\"",
    "pymssql (>=2.2.5,<3) ; extra == \"all\" or extra == \"mssql\"",
    "pydata-google-auth (>=1.4.0,<2) ; extra == \"all\" or extra == \"bigquery\"",
    "pydruid[sqlalchemy] (>=0.6.5,<1) ; extra == \"all\" or extra == \"druid\"",
    "pymysql (>=1,<2) ; extra == \"all\" or extra == \"mysql\"",
    "pyspark (>=3,<3.4) ; extra == \"all\" or extra == \"pyspark\"",
    "regex (>=2021.7.6) ; extra == \"all\" or extra == \"dask\" or extra == \"pandas\" or extra == \"sqlite\"",
    "requests (>=2,<3) ; extra == \"all\" or extra == \"impala\"",
    "shapely (>=2,<3) ; extra == \"all\" or extra == \"geospatial\"",
    "snowflake-connector-python (>=3.0.2,<4,!=3.3.0b1) ; extra == \"all\" or extra == \"snowflake\"",
    "snowflake-sqlalchemy (>=1.4.1,<2) ; extra == \"all\" or extra == \"snowflake\"",
    "sqlalchemy (>=1.4,<3) ; extra == \"all\" or extra == \"clickhouse\" or extra == \"druid\" or extra == \"duckdb\" or extra == \"exasol\" or extra == \"impala\" or extra == \"mssql\" or extra == \"mysql\" or extra == \"oracle\" or extra == \"postgres\" or extra == \"pyspark\" or extra == \"sqlite\" or extra == \"trino\"",
    "sqlalchemy-exasol[exasol] (>=4.6.0) ; extra == \"all\" or extra == \"exasol\"",
    "sqlalchemy-views (>=0.3.1,<1) ; extra == \"all\" or extra == \"duckdb\" or extra == \"exasol\" or extra == \"mssql\" or extra == \"mysql\" or extra == \"oracle\" or extra == \"postgres\" or extra == \"snowflake\" or extra == \"sqlite\" or extra == \"trino\"",
    "trino[sqlalchemy] (>=0.321,<1) ; extra == \"all\" or extra == \"trino\""
  ],
  "requires_python": ">=3.9,<4.0",
  "summary": "productivity-centric python big data framework",
  "version": "7.2.0",
  "releases": [],
  "developers": [
    "ibis_maintainers",
    "maintainers@ibis-project.org"
  ],
  "kwds": "ibis badge_logo badges badge shields",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_ibis_framework",
  "homepage": "https://ibis-project.org",
  "release_count": 69,
  "dependency_ids": [
    "pypi_atpublic",
    "pypi_bidict",
    "pypi_black",
    "pypi_clickhouse_connect",
    "pypi_dask",
    "pypi_datafusion",
    "pypi_db_dtypes",
    "pypi_deltalake",
    "pypi_duckdb",
    "pypi_duckdb_engine",
    "pypi_filelock",
    "pypi_fsspec",
    "pypi_geoalchemy2",
    "pypi_geopandas",
    "pypi_google_cloud_bigquery",
    "pypi_google_cloud_bigquery_storage",
    "pypi_graphviz",
    "pypi_impyla",
    "pypi_multipledispatch",
    "pypi_numpy",
    "pypi_oracledb",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_parsy",
    "pypi_pins",
    "pypi_polars",
    "pypi_psycopg2",
    "pypi_pyarrow",
    "pypi_pyarrow_hotfix",
    "pypi_pydata_google_auth",
    "pypi_pydruid",
    "pypi_pymssql",
    "pypi_pymysql",
    "pypi_pyspark",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_regex",
    "pypi_requests",
    "pypi_rich",
    "pypi_shapely",
    "pypi_snowflake_connector_python",
    "pypi_snowflake_sqlalchemy",
    "pypi_sqlalchemy",
    "pypi_sqlalchemy_exasol",
    "pypi_sqlalchemy_views",
    "pypi_sqlglot",
    "pypi_toolz",
    "pypi_trino",
    "pypi_typing_extensions"
  ]
}
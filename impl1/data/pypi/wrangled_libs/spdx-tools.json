{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# python library to parse, validate and create spdx documents\n\nci status (linux, macos and windows): [![install and test][1]][2]\n\n[1]: https://github.com/spdx/tools-python/actions/workflows/install_and_test.yml/badge.svg\n\n[2]: https://github.com/spdx/tools-python/actions/workflows/install_and_test.yml\n\n\n# breaking changes v0.7 -> v0.8\n\nplease be aware that the upcoming 0.8 release has undergone a significant refactoring in preparation for the upcoming\nspdx v3.0 release, leading to breaking changes in the api.\nplease refer to the [migration guide](https://github.com/spdx/tools-python/wiki/how-to-migrate-from-0.7-to-0.8)\nto update your existing code.\n\nthe main features of v0.8 are:\n- full validation of spdx documents against the v2.2 and v2.3 specification\n- support for spdx's rdf format with all v2.3 features\n- experimental support for the upcoming spdx v3 specification. note, however, that support is neither complete nor \n  stable at this point, as the spec is still evolving. spdx3-related code is contained in a separate subpackage \"spdx3\" \n  and its use is optional. we do not recommend using it in production code yet.\n\n\n# information\n\nthis library implements spdx parsers, convertors, validators and handlers in python.\n\n- home: https://github.com/spdx/tools-python\n- issues: https://github.com/spdx/tools-python/issues\n- pypi: https://pypi.python.org/pypi/spdx-tools\n- browse the api: https://spdx.github.io/tools-python\n\nimportant updates regarding this library are shared via the spdx tech mailing list: https://lists.spdx.org/g/spdx-tech.\n\n\n# license\n\n[apache-2.0](license)\n\n# features\n\n* api to create and manipulate spdx v2.2 and v2.3 documents\n* parse, convert, create and validate spdx files\n* supported formats: tag/value, rdf, json, yaml, xml\n* visualize the structure of a spdx document by creating an `agraph`. note: this is an optional feature and requires \nadditional installation of optional dependencies\n\n## experimental support for spdx 3.0\n* create v3.0 elements and payloads\n* convert v2.2/v2.3 documents to v3.0\n* serialize to json-ld\n\nsee [quickstart to spdx 3.0](#quickstart-to-spdx-30) below.  \nthe implementation is based on the descriptive markdown files in the repository https://github.com/spdx/spdx-3-model (latest commit: a5372a3c145dbdfc1381fc1f791c68889aafc7ff).\n\n\n# installation\n\nas always you should work in a virtualenv (venv). you can install a local clone\nof this repo with `yourenv/bin/pip install .` or install it from pypi \n(check for the [newest release](https://pypi.org/project/spdx-tools/#history) and install it like\n`yourenv/bin/pip install spdx-tools==0.8.0a2`). note that on windows it would be `scripts`\ninstead of `bin`.\n\n# how to use\n\n## command-line usage\n\n1. **parsing/validating** (for parsing any format):\n\n* use `pyspdxtools -i <filename>` where `<filename>` is the location of the file. the input format is inferred automatically from the file ending.\n\n* if you are using a source distribution, try running:  \n  `pyspdxtools -i tests/data/spdxjsonexample-v2.3.spdx.json`\n\n2. **converting** (for converting one format to another):\n\n* use `pyspdxtools -i <input_file> -o <output_file>` where `<input_file>` is the location of the file to be converted\n  and `<output_file>` is the location of the output file. the input and output formats are inferred automatically from the file endings.\n\n* if you are using a source distribution, try running:  \n  `pyspdxtools -i tests/data/spdxjsonexample-v2.3.spdx.json -o output.tag` \n\n* if you want to skip the validation process, provide the `--novalidation` flag, like so:  \n  `pyspdxtools -i tests/data/spdxjsonexample-v2.3.spdx.json -o output.tag --novalidation`  \n  (use this with caution: note that undetected invalid documents may lead to unexpected behavior of the tool)\n  \n* for help use `pyspdxtools --help`\n\n3. **graph generation** (optional feature)\n\n* this feature generates a graph representing all elements in the spdx document and their connections based on the provided\n  relationships. the graph can be rendered to a picture. below is an example for the file `tests/data/spdxjsonexample-v2.3.spdx.json`:\n![spdxjsonexample-v2.3.spdx.png](assets/spdxjsonexample-v2.3.spdx.png)\n* make sure you install the optional dependencies `networkx` and `pygraphviz`. to do so run `pip install \".[graph_generation]\"`.\n* use `pyspdxtools -i <input_file> --graph -o <output_file>` where `<output_file>` is an output file name with valid format for `pygraphviz` (check \n  the documentation [here](https://pygraphviz.github.io/documentation/stable/reference/agraph.html#pygraphviz.agraph.draw)). \n* if you are using a source distribution, try running\n  `pyspdxtools -i tests/data/spdxjsonexample-v2.3.spdx.json --graph -o spdxjsonexample-v2.3.spdx.png` to generate \n  a png with an overview of the structure of the example file.  \n\n## library usage\n1. **data model**\n  * the `spdx_tools.spdx.model` package constitutes the internal spdx v2.3 data model (v2.2 is simply a subset of this). all relevant classes for spdx document creation are exposed in the `__init__.py` found [here](src%2fspdx_tools%2fspdx%2fmodel%2f__init__.py).\n  * spdx objects are implemented via `@dataclass_with_properties`, a custom extension of `@dataclass`.\n    * each class starts with a list of its properties and their possible types. when no default value is provided, the property is mandatory and must be set during initialization.\n    * using the type hints, type checking is enforced when initializing a new instance or setting/getting a property on an instance\n      (wrong types will raise `constructortypeerror` or `typeerror`, respectively). this makes it easy to catch invalid properties early and only construct valid documents.\n    * note: in-place manipulations like `list.append(item)` will circumvent the type checking (a `typeerror` will still be raised when reading `list` again). we recommend using `list = list + [item]` instead.\n  * the main entry point of an spdx document is the `document` class from the [document.py](src%2fspdx_tools%2fspdx%2fmodel%2fdocument.py) module, which links to all other classes.\n  * for license handling, the [license_expression](https://github.com/nexb/license-expression) library is used.\n  * note on `documentdescribes` and `hasfiles`: these fields will be converted to relationships in the internal data model. as they are deprecated, these fields will not be written in the output.\n2. **parsing**\n  * use `parse_file(file_name)` from the `parse_anything.py` module to parse an arbitrary file with one of the supported file endings.\n  * successful parsing will return a `document` instance. unsuccessful parsing will raise `spdxparsingerror` with a list of all encountered problems.\n3. **validating**\n  * use `validate_full_spdx_document(document)` to validate an instance of the `document` class.\n  * this will return a list of `validationmessage` objects, each consisting of a string describing the invalidity and a `validationcontext` to pinpoint the source of the validation error.\n  * validation depends on the spdx version of the document. note that only versions `spdx-2.2` and `spdx-2.3` are supported by this tool.\n4. **writing**\n  * use `write_file(document, file_name)` from the `write_anything.py` module to write a `document` instance to the specified file.\n    the serialization format is determined from the filename ending.\n  * validation is performed per default prior to the writing process, which is cancelled if the document is invalid. you can skip the validation via `write_file(document, file_name, validate=false)`.\n    caution: only valid documents can be serialized reliably; serialization of invalid documents is not supported.\n\n## example\nhere are some examples of possible use cases to quickly get you started with the spdx-tools.\nif you want more examples, like how to create an spdx document from scratch, have a look [at the examples folder](examples).\n```python\nimport logging\n\nfrom license_expression import get_spdx_licensing\n\nfrom spdx_tools.spdx.model import (checksum, checksumalgorithm, file, \n                                   filetype, relationship, relationshiptype)\nfrom spdx_tools.spdx.parser.parse_anything import parse_file\nfrom spdx_tools.spdx.validation.document_validator import validate_full_spdx_document\nfrom spdx_tools.spdx.writer.write_anything import write_file\n\n# read in an spdx document from a file\ndocument = parse_file(\"spdx_document.json\")\n\n# change the document's name\ndocument.creation_info.name = \"new document name\"\n\n# define a file and a describes relationship between the file and the document\nchecksum = checksum(checksumalgorithm.sha1, \"71c4025dd9897b364f3ebbb42c484ff43d00791c\")\n\nfile = file(name=\"./filename.py\", spdx_id=\"spdxref-file\", checksums=[checksum], \n            file_types=[filetype.text], \n            license_concluded=get_spdx_licensing().parse(\"mit and gpl-2.0\"),\n            license_comment=\"licensecomment\", copyright_text=\"copyrighttext\")\n\nrelationship = relationship(\"spdxref-document\", relationshiptype.describes, \"spdxref-file\")\n\n# add the file and the relationship to the document \n# (note that we do not use \"document.files.append(file)\" as that would circumvent the type checking)\ndocument.files = document.files + [file]\ndocument.relationships = document.relationships + [relationship]\n\n# validate the edited document and log the validation messages\n# (depending on your use case, you might also want to utilize the validation_message.context)\nvalidation_messages = validate_full_spdx_document(document)\nfor validation_message in validation_messages:\n    logging.warning(validation_message.validation_message)\n\n# if there are no validation messages, the document is valid \n# and we can safely serialize it without validating again\nif not validation_messages:\n    write_file(document, \"new_spdx_document.rdf\", validate=false)\n```\n\n# quickstart to spdx 3.0\nin contrast to spdx v2, all elements are now subclasses of the central `element` class.\nthis includes packages, files, snippets, relationships, annotations, but also sboms, spdxdocuments, and more.  \nfor serialization purposes, all elements that are to be serialized into the same file are collected in a `payload`.\nthis is just a dictionary that maps each element's spdxid to itself.\nuse the `write_payload()` functions to serialize a payload.\nthere currently are two options:  \n* the `spdx_tools.spdx3.writer.json_ld.json_ld_writer` module generates a json-ld file of the payload.\n* the `spdx_tools.spdx3.writer.console.payload_writer` module prints a debug output to console. note that this is not an official part of the spdx specification and will probably be dropped as soon as a better standard emerges.\n\nyou can convert an spdx v2 document to v3 via the `spdx_tools.spdx3.bump_from_spdx2.spdx_document` module.\nthe `bump_spdx_document()` function will return a payload containing an `spdxdocument` element and one element for each package, file, snippet, relationship, or annotation contained in the v2 document.\n\n\n# dependencies\n\n* pyyaml: https://pypi.org/project/pyyaml/ for handling yaml.\n* xmltodict: https://pypi.org/project/xmltodict/ for handling xml.\n* rdflib: https://pypi.python.org/pypi/rdflib/ for handling rdf.\n* ply: https://pypi.org/project/ply/ for handling tag-value.\n* click: https://pypi.org/project/click/ for creating the cli interface.\n* beartype: https://pypi.org/project/beartype/ for type checking.\n* uritools: https://pypi.org/project/uritools/ for validation of uris.\n* license-expression: https://pypi.org/project/license-expression/ for handling spdx license expressions.\n\n# support\n\n* submit issues, questions or feedback at https://github.com/spdx/tools-python/issues\n* join the chat at https://gitter.im/spdx-org/lobby\n* join the discussion on https://lists.spdx.org/g/spdx-tech and\n  https://spdx.dev/participate/tech/\n\n# contributing\n\ncontributions are very welcome! see [contributing.md](./contributing.md) for instructions on how to contribute to the\ncodebase.\n\n# history\n\nthis is the result of an initial gsoc contribution by @[ah450](https://github.com/ah450)\n(or https://github.com/a-h-i) and is maintained by a community of spdx adopters and enthusiasts.\nin order to prepare for the release of spdx v3.0, the repository has undergone a major refactoring during the time from 11/2022 to 07/2023.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "spdx-tools",
  "package_url": "https://pypi.org/project/spdx-tools/",
  "project_url": "https://pypi.org/project/spdx-tools/",
  "project_urls": {
    "Homepage": "https://github.com/spdx/tools-python"
  },
  "release_url": "https://pypi.org/project/spdx-tools/0.8.2/",
  "requires_dist": [
    "click",
    "pyyaml",
    "xmltodict",
    "rdflib",
    "beartype",
    "uritools",
    "license-expression",
    "ply",
    "semantic-version",
    "isort ; extra == 'code_style'",
    "black ; extra == 'code_style'",
    "flake8 ; extra == 'code_style'",
    "black ; extra == 'development'",
    "flake8 ; extra == 'development'",
    "isort ; extra == 'development'",
    "networkx ; extra == 'development'",
    "pytest ; extra == 'development'",
    "pygraphviz ; extra == 'graph_generation'",
    "networkx ; extra == 'graph_generation'",
    "pytest ; extra == 'test'",
    "pyshacl ; extra == 'test'",
    "tzdata ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "spdx parser and tools.",
  "version": "0.8.2",
  "releases": [],
  "developers": [
    "ahm3d.hisham@gmail.com",
    "pombredanne@gmail.com",
    "spdx_group_at_the_linux_foundation_and_others"
  ],
  "kwds": "new_spdx_document spdx_tools validate_full_spdx_document spdx_document spdxdocument",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_spdx_tools",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_beartype",
    "pypi_black",
    "pypi_click",
    "pypi_flake8",
    "pypi_isort",
    "pypi_license_expression",
    "pypi_networkx",
    "pypi_ply",
    "pypi_pygraphviz",
    "pypi_pyshacl",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_rdflib",
    "pypi_semantic_version",
    "pypi_tzdata",
    "pypi_uritools",
    "pypi_xmltodict"
  ]
}
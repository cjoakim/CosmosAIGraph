{
  "classifiers": [
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "nested_lookup\n#############\n\nmake working with json, yaml, and xml document responses fun again!\n\nthe `nested_lookup` package provides many python functions for working with deeply nested documents.\na document in this case is a a mixture of python dictionary and list objects typically derived from yaml or json.\n\n*nested_lookup:*\n  perform a key lookup on a deeply nested document.\n  returns a ``list`` of matching values.\n\n*nested_update:*\n  given a document, find all occurences of the given key and update the value.\n  by default, returns a copy of the document.\n  to mutate the original specify the ``in_place=true`` argument.\n\n*nested_delete:*\n  given a document, find all occurrences of the given key and delete it.\n  by default, returns a copy of the document.\n  to mutate the original specify the ``in_place=true`` argument.\n  \n*nested_alter:*\n  given a document, find all occurrences of the given key and alter it with a callback function.\n  by default, returns a copy of the document.\n  to mutate the original specify the ``in_place=true`` argument.\n\n*get_all_keys:*\n  fetch all keys from a deeply nested dictionary.\n  returns a ``list`` of keys.\n\n*get_occurrence_of_key/get_occurrence_of_value:*\n  returns the number of occurrences of a key/value from a nested dictionary.\n\nfor examples on how to invoke these functions, please check out the tutorial sections.\n\n\n.. contents::\n\n\ninstall\n========\n\ninstall from pypi using pip::\n\n pip install nested-lookup\n\nor install from source using::\n\n git clone ssh://git@git.unturf.com:2222/python/nested-lookup.git\n cd nested-lookup\n pip install .\n\n\nquick tutorial\n==============\n\nthis tutorial uses the python interactive shell, please follow along : )\n\nbefore we start, let's define an example document to work on.\n\n.. code-block:: python\n\n >>> document = [ { 'taco' : 42 } , { 'salsa' : [ { 'burrito' : { 'taco' : 69 } } ] } ]\n\n\nfirst, we lookup a key from all layers of a document using ``nested_lookup``:\n\n.. code-block:: python\n\n >>> from nested_lookup import nested_lookup\n >>> print(nested_lookup('taco', document))\n [42, 69]\n \nas you can see the function returned a list of two integers, these integers are the values from the matched key lookups.\n\nnext, we update a key and value from all layers of a document using ``nested_update``:\n\n.. code-block:: python\n\n >>> from nested_lookup import nested_update\n >>> nested_update(document, key='burrito', value='test')\n [{'taco': 42}, {'salsa': [{'burrito': 'test'}]}]\n \nhere you see that the key ``burrito`` had it's value changed to the string ``'test'``, like we asked.\n\nfinally, we try out a delete operation using ``nested_delete``:\n\n.. code-block:: python\n\n >>> from nested_lookup import nested_delete\n >>> nested_delete(document, 'taco')\n [{}, {'salsa': [{'burrito': {}}]}]\n\nperfect, the returned document looks just like we expected!\n\n\nlonger tutorial\n======================\n\nyou may control the function's behavior by passing some optional arguments.\n\nwild (defaults to `false`):\n if `wild` is `true`, treat the given `key` as a case insensitive\n substring when performing lookups.\n\nwith_keys (defaults to `false`):\n  if `with_keys` is `true`, return a dictionary of all matched keys\n  and a list of values.\n\nfor example, given the following document:\n\n.. code-block:: python\n\n from nested_lookup import nested_lookup\n\n my_document = {\n    \"name\" : \"rocko ballestrini\",\n    \"email_address\" : \"test1@example.com\",\n    \"other\" : {\n        \"secondary_email\" : \"test2@example.com\",\n        \"email_recovery\" : \"test3@example.com\",\n        \"email_address\" : \"test4@example.com\",\n     },\n }\n\nnext, we could act ``wild`` and find all the email addresses like this:\n\n.. code-block:: python\n\n results = nested_lookup(\n     key = \"mail\",\n     document = my_document,\n     wild = true\n )\n\n print(results)\n\n.. code-block:: python\n\n [\"test1@example.com\", \"test4@example.com\", \"test2@example.com\", \"test3@example.com\"]\n\nadditionally, if you also needed the matched key names, you could do this:\n\n.. code-block:: python\n\n results = nested_lookup(\n     key = \"mail\",\n     document = my_document,\n     wild = true,\n     with_keys = true,\n )\n\n print(results)\n\n.. code-block:: python\n\n  {\n   \"email_address\": [\"test1@example.com\", \"test4@example.com\"],\n   \"secondary_email\": [\"test2@example.com\"],\n   \"email_recovery\": [\"test3@example.com\"]\n  }\n\nwe do not mutate input, if we do you found a defect. please open an issue.\n\nlet's delete and update our deeply nested key / values and see the results:\n\n.. code-block:: python\n\n  from nested_lookup import nested_update, nested_delete\n\n  # result => {'other': {'secondary_email': 'test2@example.com', 'email_address': 'test4@example.com'}, 'email_address': 'test1@example.com', 'name': 'rocko ballestrini'}\n  result = nested_delete(my_document, 'email_recovery')\n  print(result)\n\n  # result => {'other': 'test', 'email_address': 'test1@example.com', 'name': 'rocko ballestrini'}\n  result = nested_update(my_document, key='other', value='test')\n  print(result)\n\n\nnow let's say we wanted to get a list of every nested key in a document, we could run this:\n\n.. code-block:: python\n\n  from nested_lookup import get_all_keys\n\n  keys = get_all_keys(my_document)\n  print(keys)\n\n.. code-block:: python\n\n  ['name', 'email_address', 'other', 'secondary_email', 'email_recovery', 'email_address']\n\nalso, to get the number of times a key or value occurs in the document, try:\n\n.. code-block:: python\n\n  from nested_lookup import (\n      get_occurrence_of_key,\n      get_occurrence_of_value,\n  )\n\n  # result => 2\n  key_occurrence_count = get_occurrence_of_key(my_document, key='email_address')\n  print(no_of_key_occurrence)  \n\n  # result => 1\n  value_occurrence_count = get_occurrence_of_value(my_document, value='test2@example.com')\n  print(no_of_value_occurrence)\n\nto get the number of occurrence and their respective values\n\n.. code-block:: python\n\n  from nested_lookup import get_occurrences_and_values\n  \n  my_documents = [\n        {\n            \"processor_name\": \"4\",\n            \"processor_speed\": \"2.7 ghz\",\n            \"core_details\": {\n                \"total_numberof_cores\": \"4\",\n                \"l2_cache(per_core)\": \"256 kb\",\n            }\n        }\n    ]\n\n  result = get_occurrences_and_values(my_documents, value='4')\n\n  print(result)\n  \n  {\n\t  \"4\": {\n\t\t  \"occurrences\": 2,\n\t\t  \"values\": [\n\t\t\t  {\n\t\t\t\t  \"processor_name\": \"4\",\n\t\t\t\t  \"processor_speed\": \"2.7 ghz\",\n\t\t\t\t  \"core_details\": {\n\t\t\t\t\t  \"total_numberof_cores\": \"4\",\n\t\t\t\t\t  \"l2_cache(per_core)\": \"256 kb\"\n\t\t\t\t  }\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t  \"total_numberof_cores\": \"4\",\n\t\t\t\t  \"l2_cache(per_core)\": \"256 kb\"\n\t\t\t  }\n\t\t  ]\n\t  }\n }\n\n\n\n\n\nnested_alter tutorial\n=====================\n\n*nested alter*:\nwrite a callback function which processes a scalar value.\nbe aware about the possible types which can be passed to the callback functions.\nin this example we can be sure that only int will be passed, in production you should check the type because it could be anything.\n\nbefore we start, let's define an example document to work on.\n\n.. code-block:: python\n\n >>> document = [ { 'taco' : 42 } , { 'salsa' : [ { 'burrito' : { 'taco' : 69 } } ] } ]\n\n.. code-block:: python\n\n >>> def callback(data):\n >>>     return data + 10 # add 10 to every taco prize\n\nthe alter-version only works for scalar input (one dict), if you need to adress a list of dicts, you have to \nmanually iterate over those and pass them to nested_update one by one\n\n.. code-block:: python\n\n >>> out =[]\n >>> for elem in document:\n >>>     altered_document = nested_alter(elem,\"taco\", callback)\n >>>     out.append(altered_document)\n\n >>> print(out)\n [ { 'taco' : 52 } , { 'salsa' : [ { 'burrito' : { 'taco' : 79 } } ] } ]\n\n >>> from nested_lookup import get_all_keys\n\n >>> get_all_keys(document)\n ['taco', 'salsa', 'burrito', 'taco']\n\n >>> from nested_lookup import get_occurrence_of_key, get_occurrence_of_value\n\n >>> get_occurrence_of_key(document, key='taco')\n 2\n\n >>> get_occurrence_of_value(document, value='42')\n 1\n\n\nmisc\n========\n\n:license:\n  * public domain\n\n:authors:\n  * russell ballestrini\n  * douglas miranda\n  * ramesh rv\n  * salfiii (florian s.)\n  * matheus lins\n\n:web:\n  * https://russell.ballestrini.net\n  * http://douglasmiranda.com (https://gist.github.com/douglasmiranda/5127251)\n  * https://github.com/salfiii\n  * https://github.com/matheuslins\n\n\n",
  "docs_url": null,
  "keywords": "nested document dictionary dict list lookup schema json xml yaml",
  "license": "public domain",
  "name": "nested-lookup",
  "package_url": "https://pypi.org/project/nested-lookup/",
  "project_url": "https://pypi.org/project/nested-lookup/",
  "project_urls": {
    "Homepage": "https://git.unturf.com/python/nested-lookup"
  },
  "release_url": "https://pypi.org/project/nested-lookup/0.2.25/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python functions for working with deeply nested documents (lists and dicts)",
  "version": "0.2.25",
  "releases": [],
  "developers": [
    "russell.ballestrini@gmail.com",
    "russell_ballestrini"
  ],
  "kwds": "nested_lookup nested_delete nested_update dict nested_alter",
  "license_kwds": "public domain",
  "libtype": "pypi",
  "id": "pypi_nested_lookup",
  "homepage": "https://git.unturf.com/python/nested-lookup",
  "release_count": 26,
  "dependency_ids": []
}
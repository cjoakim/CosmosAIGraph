{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# a small package that helps modifying aws policies as an object\n\naws sdks provides a wide availbility allowing automation and codifying your infrastructure. however, minipulating policies are not in a good control, because they are treated as a whole block of string.\n\nscenario 1. you have an s3 bucket in a centralized account, which grants write permission of cloudtrail logs from all other accounts. at onboarding of a new account, you need to modify the bucket policy to insert another trusted principal. doing it manually is ugly and unsafe.\n\nscenario 2. in your billing account, there is an iam role that allows certain iam users to assume from the landing account. when a new iam user is created and needed to be added to the trusted policy, you will need to update the policy manually.\n\nthe diffuculty of automating this process is that, you have to keep the integrity of your policy document and only change the part that you want to. that's what this package can help you do.\n\nborrowing the idea of selecting an element from html document, you can select a particular statement from a policy document giving the sid.\n\n## get started:\nthis package only provides classes that you can use in your own code. it depends on boto3 but does not install it for you.\n\nto install the package:  \n`pip install awspolicy`\n\n## examples:\ntalk is cheap and lets code. i have an s3 bucket, which has the following policy that controls permissions from iam users. at the moment, it only grants iam user 'bob' and 'jack' permission of to get contents from directory 'admin_folder'. when a new admin user 'daniel' onboards, i need to add his iam user arn to be granted in the policy, while not interferring the other functions of the policy document. here is an example code to achieve that. before, by bucket policy in json is like this:\n\n```\n{\n    \"id\": \"mybucketpolicy\",\n    \"version\": \"2012-10-17\",\n    \"statement\": [\n        {\n            \"sid\": \"automatedrestrictiveaccess\",\n            \"action\": [\n                \"s3:getobject\"\n            ],\n            \"effect\": \"allow\",\n            \"resource\": \"arn:aws:s3:::hailong-python/admin_folder/*\",\n            \"principal\": {\n                \"aws\": [\n                    \"arn:aws:iam::888888888888:user/bob\",\n                    \"arn:aws:iam::888888888888:user/jack\"\n                ]\n            }\n        },\n        {\n            \"sid\": \"generallygrantingaccess\",\n            \"action\": [\n                \"s3:getobject\"\n            ],\n            \"effect\": \"allow\",\n            \"resource\": \"arn:aws:s3:::hailong-python/shared_files/*\",\n            \"principal\": {\n                \"aws\": [\n                    \"888888888888\"\n                ]\n            }\n        },\n        {\n            \"sid\": \"denynonhttpstrafic\",\n            \"action\": [\n                \"s3:*\"\n            ],\n            \"effect\": \"deny\",\n            \"resource\": \"arn:aws:s3:::hailong-python/*\",\n            \"principal\": \"*\",\n            \"condition\": {\n                \"bool\": {\n                    \"aws:securetransport\": \"false\"\n                }\n            }\n        }\n    ]\n}\n```\n\nexample code to modify the policy in python\n\n```\nimport boto3\nfrom awspolicy import bucketpolicy\n\ns3_client = boto3.client('s3')\nbucket_name = 'hailong-python'\n\n# load the bucket policy as an object\nbucket_policy = bucketpolicy(servicemodule=s3_client, resourceidentifer=bucket_name)\n\n# select the statement that will be modified\nstatement_to_modify = bucket_policy.select_statement('automatedrestrictiveaccess')\n\n# insert new_user_arn into the list of principal['aws']\nnew_user_arn = 'arn:aws:iam::888888888888:user/daniel'\nstatement_to_modify.principal['aws'].append(new_user_arn)\n\n# save change of the statement\nstatement_to_modify.save()\n\n# save change of the policy. this will update the bucket policy\nstatement_to_modify.source_policy.save() # or bucket_policy.save()\n\n```\n\nafter running the code, the new user is added to the statement:\n\n```\n{\n    \"version\": \"2012-10-17\",\n    \"id\": \"mybucketpolicy\",\n    \"statement\": [\n        {\n            \"sid\": \"automatedrestrictiveaccess\",\n            \"effect\": \"allow\",\n            \"principal\": {\n                \"aws\": [\n                    \"arn:aws:iam::888888888888:user/daniel\",\n                    \"arn:aws:iam::888888888888:user/jack\",\n                    \"arn:aws:iam::888888888888:user/bob\"\n                ]\n            },\n            \"action\": \"s3:getobject\",\n            \"resource\": \"arn:aws:s3:::hailong-python/admin_folder/*\"\n        },\n        {\n            \"sid\": \"generallygrantingaccess\",\n            \"effect\": \"allow\",\n            \"principal\": {\n                \"aws\": \"arn:aws:iam::888888888888:root\"\n            },\n            \"action\": \"s3:getobject\",\n            \"resource\": \"arn:aws:s3:::hailong-python/shared_files/*\"\n        },\n        {\n            \"sid\": \"denynonhttpstrafic\",\n            \"effect\": \"deny\",\n            \"principal\": \"*\",\n            \"action\": \"s3:*\",\n            \"resource\": \"arn:aws:s3:::hailong-python/*\",\n            \"condition\": {\n                \"bool\": {\n                    \"aws:securetransport\": \"false\"\n                }\n            }\n        }\n    ]\n}\n```\n\n## more usages of the classes\n\n```\n# policy\npolicy.fill_up_sids()           # generate sids to the statements that don't have one. this updates the policy documents\npolicy.select_statement(sid)    # selecting a statement giving sid. it returns none if didn't find one\npolicy.reload()                 # reload the policy document. this triggers getting the policy from aws\npolicy.save()                   # upload the current policy document to aws\npolicy.sids                     # a list of statement ids of the policy\npolicy.content                  # policy content in dict\n\n# statement\nstatement.reload()              # reconstruct the statement content from the loaded policy\nstatement.save()                # save changes of the statement\nstatement.content               # statement content in dict\nstatement.source_policy         # referring to the policy object which this statement belongs to\n## fields of the statement. in the type of dict or string\nstatement.sid\nstatement.effect\nstatement.principal\nstatement.action\nstatement.resource\nstatement.condition\n```\n\n### more example usages in a snippet:\n```\n# modules to modify aws resource based policies as an object based sid\n# supported: kms cmk policy, s3 bucket policy, iam role trust relationship\n\nimport json, boto3\nfrom awspolicy import bucketpolicy, kmspolicy, iamroletrustpolicy\n### update kms key policy to allow a new account using cmk in centralized auditing account\nkms = boto3.client('kms')\ncmk_policy = kmspolicy(servicemodule=kms, resourceidentifer='xxxxe011-a1ff-4460-8942-02da951xxxx')\nstatement = cmk_policy.select_statement('allowcloudtrailencryptcrossaccountlogs')\nstatement.condition['stringlike']['kms:encryptioncontext:aws:cloudtrail:arn'] += [u'arn:aws:cloudtrail:*:888888888888:trail/*']\nstatement.save()\nstatement.source_policy.save()\n\n### update s3 bucket policy from a sts session to allow a new account using cmk in centralized auditing account\ns3 = session.client('s3')\nbucket_policy = bucketpolicy(servicemodule=s3, resourceidentifer='hailong-cloudtrail')\nstatement = bucket_policy.select_statement('cloudtrailcrossaccountpermission')\nto_add_resource = 'arn:aws:s3:::hailong-cloudtrail/awslogs/888888888888/*'\nif to_add_resource not in statement.resource:\n    statement.resource += ['arn:aws:s3:::hailong-cloudtrail/awslogs/888888888888/*']\n    statement.save()\n    statement.source_policy.save()\n\n### update iam role trusted relationship to remove condition from a statement\niam = boto3.client('iam')\nrole_trust_policy = iamroletrustpolicy(servicemodule=iam, resourceidentifer='ec2readonly')\ns = role_trust_policy.select_statement('crossaccount')\ns.conditon = none\ns.save()\ns.source_policy.save()\n```\n\n## to do\nthis is a very simple package which i hope could help someone. if needed, we can wrap it up in a tool that allows more interactions with aws policies. at this time, it only works with three kinds of resource based policies s3, kms, and iam role. with a bit of restructuring, it can be expanded to others like iam principal-based policies etc. please let me know if you found any bug or want to contribute.\n\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "awspolicy",
  "package_url": "https://pypi.org/project/awspolicy/",
  "project_url": "https://pypi.org/project/awspolicy/",
  "project_urls": {
    "Homepage": "https://github.com/totoleon/AwsPolicy"
  },
  "release_url": "https://pypi.org/project/awspolicy/0.0.3.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a package that helps modifying aws policies as an object",
  "version": "0.0.3.1",
  "releases": [],
  "developers": [
    "hailong.leon@gmail.com",
    "hailong_li"
  ],
  "kwds": "bucket_policy cloudtrailcrossaccountpermission role_trust_policy policies allowcloudtrailencryptcrossaccountlogs",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_awspolicy",
  "homepage": "https://github.com/totoleon/awspolicy",
  "release_count": 3,
  "dependency_ids": []
}
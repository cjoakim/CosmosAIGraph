{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: bsd license",
    "topic :: security",
    "topic :: security :: cryptography"
  ],
  "description": "this is a very simple wrapper around libsodium masquerading as nacl.\n\n[![build status](https://travis-ci.org/stef/pysodium.svg?branch=master)](https://travis-ci.org/stef/pysodium)\n\nthis wrapper requires a pre-installed libsodium from:\n\n   https://github.com/jedisct1/libsodium\n\nthen it provides access to the following functions:\n\n```\ncrypto_aead_aegis128l_decrypt(ciphertext, ad, nonce, key)\ncrypto_aead_aegis128l_encrypt(message, ad, nonce, key)\ncrypto_aead_aegis128l_decrypt_detached(ciphertext, mac, ad, nonce, key)\ncrypto_aead_aegis128l_encrypt_detached(message, ad, nonce, key)\ncrypto_aead_aegis256_decrypt(ciphertext, ad, nonce, key)\ncrypto_aead_aegis256_encrypt(message, ad, nonce, key)\ncrypto_aead_aegis256_decrypt_detached(ciphertext, mac, ad, nonce, key)\ncrypto_aead_aegis256_encrypt_detached(message, ad, nonce, key)\ncrypto_aead_chacha20poly1305_decrypt(ciphertext, ad, nonce, key)\ncrypto_aead_chacha20poly1305_encrypt(message, ad, nonce, key)\ncrypto_aead_chacha20poly1305_decrypt_detached(ciphertext, mac, ad, nonce, key)\ncrypto_aead_chacha20poly1305_encrypt_detached(message, ad, nonce, key)\ncrypto_aead_chacha20poly1305_ietf_decrypt(ciphertext, ad, nonce, key)\ncrypto_aead_chacha20poly1305_ietf_encrypt(message, ad, nonce, key)\ncrypto_aead_chacha20poly1305_ietf_decrypt_detached(ciphertext, mac, ad, nonce, key)\ncrypto_aead_chacha20poly1305_ietf_encrypt_detached(message, ad, nonce, key)\ncrypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, ad, nonce, key)\ncrypto_aead_xchacha20poly1305_ietf_encrypt(message, ad, nonce, key)\ncrypto_auth(message, key)\ncrypto_auth_verify(tag, message, key)\ncrypto_box_afternm(msg, nonce, k)\ncrypto_box_beforenm(pk, sk)\ncrypto_box_detached(msg, nonce, pk, sk)\ncrypto_box_keypair()\ncrypto_box(msg, nonce, pk, sk)\ncrypto_box_open_afternm(c, nonce, k)\ncrypto_box_open(c, nonce, pk, sk)\ncrypto_box_open_detached(c, mac, nonce, pk, sk)\ncrypto_box_seal(msg, pk)\ncrypto_box_seal_open(c, pk, sk)\ncrypto_box_seed_keypair(seed)\ncrypto_generichash_blake2b_salt_personal(message, outlen = crypto_generichash_blake2b_bytes, key = b'', salt = b'', personal = b'')\ncrypto_generichash_final(state, outlen=crypto_generichash_bytes)\ncrypto_generichash_init(outlen=crypto_generichash_bytes, k=b'')\ncrypto_generichash(m, k=b'', outlen=crypto_generichash_bytes)\ncrypto_generichash_update(state, m)\ncrypto_hash_sha256(message)\ncrypto_hash_sha512(message)\ncrypto_hash_sha512_init()\ncrypto_hash_sha512_update(state, data)\ncrypto_hash_sha512_final(state)\ncrypto_kx_client_session_keys(client_pk, client_sk, server_pk)\ncrypto_kx_keypair()\ncrypto_kx_server_session_keys(server_pk, server_sk, client_pk)\ncrypto_pwhash(outlen, passwd, salt, opslimit, memlimit, alg)\ncrypto_pwhash_scryptsalsa208sha256(outlen, passwd, salt, opslimit, memlimit)\ncrypto_pwhash_scryptsalsa208sha256_str(passwd, opslimit, memlimit)\ncrypto_pwhash_scryptsalsa208sha256_str_verify(stored, passwd)\ncrypto_pwhash_str(passwd, opslimit, memlimit)\ncrypto_pwhash_str_verify(pstr, passwd)\ncrypto_scalarmult_base(n)\ncrypto_scalarmult_curve25519_base(n)\ncrypto_scalarmult_curve25519(n, p)\ncrypto_secretbox(msg, nonce, k)\ncrypto_secretbox_detached(msg, nonce, k)\ncrypto_secretbox_open(c, nonce, k)\ncrypto_secretbox_open_detached(c, mac, nonce, k)\ncrypto_secretstream_xchacha20poly1305_keygen():\ncrypto_secretstream_xchacha20poly1305_init_push(key):\ncrypto_secretstream_xchacha20poly1305_init_pull(header, key):\ncrypto_secretstream_xchacha20poly1305_rekey(state):\ncrypto_secretstream_xchacha20poly1305_push(state, message, ad, tag):\ncrypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad):\ncrypto_sign_init()\ncrypto_sign_update(state, m)\ncrypto_sign_final_create(state, sk)\ncrypto_sign_final_verify(state, sig, pk)\ncrypto_sign_detached(m, sk)\ncrypto_sign_keypair()\ncrypto_sign(m, sk)\ncrypto_sign_open(sm, pk)\ncrypto_sign_pk_to_box_pk(pk)\ncrypto_sign_seed_keypair(seed)\ncrypto_sign_sk_to_box_sk(sk)\ncrypto_sign_sk_to_pk(sk)\ncrypto_sign_sk_to_seed(sk)\ncrypto_sign_verify_detached(sig, msg, pk)\ncrypto_stream_chacha20_xor(message, nonce, key)\ncrypto_stream_chacha20_xor_ic(message, nonce, initial_counter, key)\ncrypto_stream_chacha20_ietf_xor(message, nonce, key)\ncrypto_stream_chacha20_ietf_xor_ic(message, nonce, initial_counter, key)\ncrypto_stream_xchacha20_xor(message, nonce, key)\ncrypto_stream_xchacha20_xor_ic(message, nonce, initial_counter, key)\ncrypto_stream(cnt, nonce=none, key=none)\ncrypto_stream_xor(msg, cnt, nonce=none, key=none)\nrandombytes(size)\nsodium_increment(bytes)\ncrypto_core_ristretto255_is_valid_point(p)\ncrypto_core_ristretto255_from_hash(r)\ncrypto_scalarmult_ristretto255(n, p)\ncrypto_scalarmult_ristretto255_base(n)\ncrypto_core_ristretto255_scalar_random()\ncrypto_core_ristretto255_scalar_invert(s)\ncrypto_core_ristretto255_scalar_reduce(s)\ncrypto_core_ristretto255_add(p, q)\ncrypto_core_ristretto255_sub(p,q)\ncrypto_core_ristretto255_random()\ncrypto_core_ristretto255_scalar_negate(s)\ncrypto_core_ristretto255_scalar_complement(s)\ncrypto_core_ristretto255_scalar_add(x,y)\ncrypto_core_ristretto255_scalar_sub(x,y)\ncrypto_core_ristretto255_scalar_mul(x,y)\ncrypto_auth_hmacsha256_keygen\ncrypto_auth_hmacsha256\ncrypto_auth_hmacsha256_verify\ncrypto_auth_hmacsha512_keygen\ncrypto_auth_hmacsha512\ncrypto_auth_hmacsha512_verify\ncrypto_auth_hmacsha512256_keygen\ncrypto_auth_hmacsha512256\ncrypto_auth_hmacsha512256_verify\ncrypto_kdf_hkdf_sha256_extract_init(salt=b'')\ncrypto_kdf_hkdf_sha256_extract_update(state, ikm=b'')\ncrypto_kdf_hkdf_sha256_extract_final(state)\ncrypto_kdf_hkdf_sha256_extract(salt=b'', ikm=b'')\ncrypto_kdf_hkdf_sha256_keygen()\ncrypto_kdf_hkdf_sha256_expand(outlen, prk, ctx=b'')\ncrypto_kdf_hkdf_sha512_extract_init(salt=b'')\ncrypto_kdf_hkdf_sha512_extract_update(state, ikm=b'')\ncrypto_kdf_hkdf_sha512_extract_final(state)\ncrypto_kdf_hkdf_sha512_extract(salt=b'', ikm=b'')\ncrypto_kdf_hkdf_sha512_keygen()\ncrypto_kdf_hkdf_sha512_expand(outlen, prk, ctx=b'')\n```\n\nconstants:\n\n```\ncrypto_aead_chacha20poly1305_abytes\ncrypto_aead_chacha20poly1305_keybytes\ncrypto_aead_chacha20poly1305_npubbytes\ncrypto_aead_chacha20poly1305_ietf_keybytes\ncrypto_aead_chacha20poly1305_ietf_npubbytes\ncrypto_aead_chacha20poly1305_ietf_abytes\ncrypto_aead_xchacha20poly1305_ietf_keybytes\ncrypto_aead_xchacha20poly1305_ietf_npubbytes\ncrypto_aead_xchacha20poly1305_ietf_abytes\ncrypto_auth_bytes\ncrypto_auth_keybytes\ncrypto_box_beforenmbytes\ncrypto_box_boxzerobytes\ncrypto_box_macbytes\ncrypto_box_noncebytes\ncrypto_box_publickeybytes\ncrypto_box_sealbytes\ncrypto_box_secretkeybytes\ncrypto_box_seedbytes\ncrypto_box_zerobytes\ncrypto_generichash_keybytes_max\ncrypto_generichash_bytes\ncrypto_generichash_bytes_max\ncrypto_generichash_bytes_min\ncrypto_generichash_statebytes\ncrypto_generichash_blake2b_bytes\ncrypto_generichash_blake2b_bytes_max\ncrypto_generichash_blake2b_bytes_min\ncrypto_generichash_blake2b_keybytes_max\ncrypto_generichash_blake2b_personalbytes\ncrypto_generichash_blake2b_saltbytes\ncrypto_hash_sha256_bytes\ncrypto_hash_sha512_bytes\ncrypto_hash_sha512_statebytes\ncrypto_kx_publickeybytes\ncrypto_kx_secretkeybytes\ncrypto_kx_sessionkeybytes\ncrypto_pwhash_alg_default\ncrypto_pwhash_alg_argon2i13\ncrypto_pwhash_alg_argon2id13\ncrypto_pwhash_bytes_max\ncrypto_pwhash_bytes_min\ncrypto_pwhash_memlimit_max\ncrypto_pwhash_memlimit_min\ncrypto_pwhash_memlimit_interactive\ncrypto_pwhash_memlimit_moderate\ncrypto_pwhash_memlimit_sensitive\ncrypto_pwhash_opslimit_max\ncrypto_pwhash_opslimit_min\ncrypto_pwhash_opslimit_interactive\ncrypto_pwhash_opslimit_moderate\ncrypto_pwhash_opslimit_sensitive\ncrypto_pwhash_passwd_max\ncrypto_pwhash_passwd_min\ncrypto_pwhash_argon2i_memlimit_interactive\ncrypto_pwhash_argon2i_memlimit_moderate\ncrypto_pwhash_argon2i_memlimit_sensitive\ncrypto_pwhash_argon2i_opslimit_interactive\ncrypto_pwhash_argon2i_opslimit_moderate\ncrypto_pwhash_argon2i_opslimit_sensitive\ncrypto_pwhash_argon2id_memlimit_interactive\ncrypto_pwhash_argon2id_memlimit_moderate\ncrypto_pwhash_argon2id_memlimit_sensitive\ncrypto_pwhash_argon2id_opslimit_interactive\ncrypto_pwhash_argon2id_opslimit_moderate\ncrypto_pwhash_argon2id_opslimit_sensitive\ncrypto_pwhash_saltbytes\ncrypto_pwhash_strbytes\ncrypto_pwhash_scryptsalsa208sha256_bytes_max\ncrypto_pwhash_scryptsalsa208sha256_bytes_min\ncrypto_pwhash_scryptsalsa208sha256_memlimit_max\ncrypto_pwhash_scryptsalsa208sha256_memlimit_min\ncrypto_pwhash_scryptsalsa208sha256_memlimit_interactive\ncrypto_pwhash_scryptsalsa208sha256_memlimit_sensitive\ncrypto_pwhash_scryptsalsa208sha256_opslimit_max\ncrypto_pwhash_scryptsalsa208sha256_opslimit_min\ncrypto_pwhash_scryptsalsa208sha256_opslimit_interactive\ncrypto_pwhash_scryptsalsa208sha256_opslimit_sensitive\ncrypto_pwhash_scryptsalsa208sha256_passwd_max\ncrypto_pwhash_scryptsalsa208sha256_passwd_min\ncrypto_pwhash_scryptsalsa208sha256_saltbytes\ncrypto_pwhash_scryptsalsa208sha256_strbytes\ncrypto_pwhash_scryptsalsa208sha256_strprefix\ncrypto_scalarmult_bytes\ncrypto_scalarmult_scalarbytes\ncrypto_scalarmult_curve25519_bytes\ncrypto_secretbox_boxzerobytes\ncrypto_secretbox_keybytes\ncrypto_secretbox_keybytes\ncrypto_secretbox_macbytes\ncrypto_secretbox_noncebytes\ncrypto_secretbox_zerobytes\ncrypto_secretstream_xchacha20poly1305_statebytes\ncrypto_secretstream_xchacha20poly1305_abytes\ncrypto_secretstream_xchacha20poly1305_headerbytes\ncrypto_secretstream_xchacha20poly1305_keybytes\ncrypto_secretstream_xchacha20poly1305_messagebytes_max\ncrypto_secretstream_xchacha20poly1305_tag_message\ncrypto_secretstream_xchacha20poly1305_tag_push\ncrypto_secretstream_xchacha20poly1305_tag_rekey\ncrypto_secretstream_xchacha20poly1305_tag_final\ncrypto_sign_bytes\ncrypto_sign_publickeybytes\ncrypto_sign_secretkeybytes\ncrypto_sign_seedbytes\ncrypto_sign_ed25519_publickeybytes\ncrypto_sign_ed25519_secretkeybytes\ncrypto_stream_keybytes\ncrypto_stream_noncebytes\ncrypto_stream_chacha20_noncebytes\ncrypto_stream_chacha20_keybytes\ncrypto_stream_chacha20_ietf_noncebytes\ncrypto_stream_chacha20_ietf_keybytes\ncrypto_stream_xchacha20_noncebytes\ncrypto_stream_xchacha20_keybytes\ncrypto_core_ristretto255_bytes\ncrypto_core_ristretto255_hashbytes\ncrypto_core_ristretto255_scalarbytes\ncrypto_core_ristretto255_nonreducedscalarbytes\ncrypto_auth_hmacsha256_bytes\ncrypto_auth_hmacsha256_keybytes\ncrypto_auth_hmacsha512_bytes\ncrypto_auth_hmacsha512_keybytes\ncrypto_auth_hmacsha512256_bytes\ncrypto_auth_hmacsha512256_keybytes\ncrypto_kdf_hkdf_sha256_keybytes\ncrypto_kdf_hkdf_sha256_bytes_min\ncrypto_kdf_hkdf_sha256_bytes_max\ncrypto_kdf_hkdf_sha256_statebytes\n```\n\n\n\nnote\n\nmost of the the `*_easy` functions are not implemented as the \"non-easy\"\nfunctions provide already the \"easy\" interface, which hides the placement of\nbuffers in memory, which makes little sense in python, so this wrapper handles\nthis.\n",
  "docs_url": null,
  "keywords": "cryptography api nacl libsodium",
  "license": "bsd",
  "name": "pysodium",
  "package_url": "https://pypi.org/project/pysodium/",
  "project_url": "https://pypi.org/project/pysodium/",
  "project_urls": {
    "Homepage": "https://github.com/stef/pysodium"
  },
  "release_url": "https://pypi.org/project/pysodium/0.7.17/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python libsodium wrapper",
  "version": "0.7.17",
  "releases": [],
  "developers": [
    "s@ctrlc.hu",
    "stefan_marsiske"
  ],
  "kwds": "crypto_aead_aegis128l_decrypt crypto_aead_aegis128l_decrypt_detached crypto_aead_aegis256_decrypt crypto_aead_chacha20poly1305_ietf_npubbytes crypto_aead_chacha20poly1305_ietf_decrypt_detached",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pysodium",
  "homepage": "https://github.com/stef/pysodium",
  "release_count": 49,
  "dependency_ids": []
}
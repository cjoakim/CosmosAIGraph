{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security :: cryptography",
    "topic :: software development :: libraries"
  ],
  "description": "=========================\n python scrypt_ bindings\n=========================\n\nthis is a set of python_ bindings for the scrypt_ key derivation\nfunction.\n\n.. image:: https://img.shields.io/pypi/v/scrypt.svg\n    :target: https://pypi.python.org/pypi/scrypt/\n    :alt: latest version\n  \n.. image:: https://anaconda.org/conda-forge/scrypt/badges/version.svg   \n    :target: https://anaconda.org/conda-forge/scrypt\n  \n.. image:: https://anaconda.org/conda-forge/scrypt/badges/downloads.svg   \n    :target: https://anaconda.org/conda-forge/scrypt\n\n\n.. image:: https://ci.appveyor.com/api/projects/status/h644bjbdawke9vf2?svg=true \n    :target: https://ci.appveyor.com/project/holger80/py-scrypt\n\n.. image:: https://www.travis-ci.com/holgern/py-scrypt.svg?branch=master\n    :target: https://www.travis-ci.com/holgern/py-scrypt\n\nscrypt is useful when encrypting password as it is possible to specify\na *minimum* amount of time to use when encrypting and decrypting. if,\nfor example, a password takes 0.05 seconds to verify, a user won't\nnotice the slight delay when signing in, but doing a brute force\nsearch of several billion passwords will take a considerable amount of\ntime. this is in contrast to more traditional hash functions such as\nmd5 or the sha family which can be implemented extremely fast on cheap\nhardware.\n\ninstallation\n============\n\nfor debian and ubuntu, please ensure that the following packages are installed:\n\t\n.. code:: bash\n\n    $ sudo apt-get install build-essential libssl-dev python-dev\n\nfor fedora and rhel-derivatives, please ensure that the following packages are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc openssl-devel python-devel\n\nfor osx, please do the following::\n\n    $ brew install openssl\n    $ export cflags=\"-i$(brew --prefix openssl)/include $cflags\"\n    $ export ldflags=\"-l$(brew --prefix openssl)/lib $ldflags\"\n\nfor osx, you can also use the precompiled wheels. they are installed by::\n\n    $ pip install scrypt \n\t\nfor windows, please use the precompiled wheels. they are installed by::\n\n    $ pip install scrypt\n\nfor windows, when the package should be compiled, the development package from https://slproweb.com/products/win32openssl.html is needed.\nit needs to be installed to c:\\openssl-win64.\n\nyou can install py-scrypt from this repository if you want the latest\nbut possibly non-compiling version::\n\n    $ git clone https://github.com/holgern/py-scrypt.git\n    $ cd py-scrypt\n    $ python setup.py build\n\n    become superuser (or use virtualenv):\n    # python setup.py install\n\n    run tests after install:\n    $ python setup.py test\n\nor you can install the latest release from pypi::\n\n    $ pip install scrypt\n\nusers of the anaconda_ python distribution can directly obtain pre-built\nwindows, intel linux or macos / osx binaries from the conda-forge channel.\nthis can be done via::\n\n    $ conda install -c conda-forge scrypt\n\n\nif you want py-scrypt for your python 3 environment, just run the\nabove commands with your python 3 interpreter. py-scrypt supports both\npython 2 and 3.\n\nfrom version 0.6.0 (not available on pypi yet), py-scrypt supports\npypy as well.\n\nchangelog\n=========\n0.8.20\n------\n* fix #8 by adding missing gettimeofday.c to manifest.in\n\n0.8.19\n------\n* use rtlgenrandom instead of cryptgenrandom on windows (thanks to https://github.com/veorq/cryptocoding/)\n* add check for c:\\program files\\openssl-win64 and c:\\program files\\openssl-win32\n\n0.8.18\n------\n* add wheel for python 3.9\n\n0.8.17\n------\n\n* add_dll_directory for python 3.8 on windows, as importlib.util.find_spec does not search all paths anymore \n \n0.8.16\n------\n\n* add additional test vector from rfc (thanks to @chrismacnaughton)\n\n0.8.15\n------\n\n* fix missing import\n\n\n0.8.14\n------\n\n* fix imp deprecation warning\n\n\n0.8.13\n------\n\n* improve build for conda forge\n\n0.8.12\n------\n\n* add scrypt_windows_link_legacy_openssl environment variable, when set, openssl 1.0.2 is linked\n\n0.8.11\n------\n\n* fix build for conda feedstock\n\n0.8.10\n------\n\n* fix typo\n\n0.8.9\n-----\n\n* use the static libcrypto_static for windows and openssl 1.1.1\n\n0.8.8\n-----\n\n* setup.py for windows improved, works with openssl 1.0.2 and 1.1.1\n\n0.8.7\n-----\n\n* setup.py for windows fixed\n\n0.8.6\n-----\n\n* setup.py fixed, scrypt could not be imported in version 0.8.5\n\n0.8.5\n-----\n\n* manifest.in fixed\n* scrypt.py moved into own scrypt directory with __init__.py \n* openssl library path for osx wheel repaired\n\n0.8.4\n-----\n\n* __version__ added to scrypt\n* missing void in sha256.c fixed\n\n0.8.3\n-----\n\n* scrypt updated to 1.2.1\n* wheels are created for python 3.6\n\nusage\n=====\n\nfore encryption/decryption, the library exports two functions\n``encrypt`` and ``decrypt``::\n\n    >>> import scrypt\n    >>> data = scrypt.encrypt('a secret message', 'password', maxtime=0.1) # this will take at least 0.1 seconds\n    >>> data[:20]\n    'scrypt\\x00\\r\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x01rx9h'\n    >>> scrypt.decrypt(data, 'password', maxtime=0.1) # this will also take at least 0.1 seconds\n    'a secret message'\n    >>> scrypt.decrypt(data, 'password', maxtime=0.05) # scrypt won't be able to decrypt this data fast enough\n    traceback (most recent call last):\n      file \"<stdin>\", line 1, in <module>\n    scrypt.error: decrypting file would take too long\n    >>> scrypt.decrypt(data, 'wrong password', maxtime=0.1) # scrypt will throw an exception if the password is incorrect\n    traceback (most recent call last):\n      file \"<stdin>\", line 1, in <module>\n    scrypt.error: password is incorrect\n\nfrom these, one can make a simple password verifier using the following\nfunctions::\n\n    def hash_password(password, maxtime=0.5, datalength=64):\n        return scrypt.encrypt(os.urandom(datalength), password, maxtime=maxtime)\n\n    def verify_password(hashed_password, guessed_password, maxtime=0.5):\n        try:\n            scrypt.decrypt(hashed_password, guessed_password, maxtime)\n            return true\n        except scrypt.error:\n            return false\n\n\nbut, if you want output that is deterministic and constant in size,\nyou can use the ``hash`` function::\n\n    >>> import scrypt\n    >>> h1 = scrypt.hash('password', 'random salt')\n    >>> len(h1)  # the hash will be 64 bytes by default, but is overridable.\n    64\n    >>> h1[:10]\n    '\\xfe\\x87\\xf3hs\\tuo\\xcd\\xc8'\n    >>> h2 = scrypt.hash('password', 'random salt')\n    >>> h1 == h2 # the hash function is deterministic\n    true\n\n\nacknowledgements\n================\n\nscrypt_ was created by colin percival and is licensed as 2-clause bsd.\nsince scrypt does not normally build as a shared library, i have included\nthe source for the currently latest version of the library in this\nrepository. when a new version arrives, i will update these sources.\n\n`kelvin wong`_ on bitbucket provided changes to make the library\navailable on mac os x 10.6 and earlier, as well as changes to make the\nlibrary work more like the command-line version of scrypt by\ndefault. kelvin also contributed with the unit tests, lots of cross\nplatform testing and work on the ``hash`` function.\n\nburstaholic_ on bitbucket provided the necessary changes to make\nthe library build on windows.\n\nthe `python-appveyor-demo`_ repository for setting up automated windows\nbuilds for a multitude of python versions.\n\nlicense\n=======\n\nthis library is licensed under the same license as scrypt; 2-clause bsd.\n\n.. _scrypt: http://www.tarsnap.com/scrypt.html\n.. _python: http://python.org\n.. _burstaholic: https://bitbucket.org/burstaholic\n.. _kelvin wong: https://bitbucket.org/kelvinwong_ca\n.. _python-appveyor-demo: https://github.com/ogrisel/python-appveyor-demo\n.. _anaconda: https://www.continuum.io\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "2-clause bsd",
  "name": "scrypt",
  "package_url": "https://pypi.org/project/scrypt/",
  "project_url": "https://pypi.org/project/scrypt/",
  "project_urls": {
    "Homepage": "https://github.com/holgern/py-scrypt"
  },
  "release_url": "https://pypi.org/project/scrypt/0.8.20/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "bindings for the scrypt key derivation function library",
  "version": "0.8.20",
  "releases": [],
  "developers": [
    "holger_nahrstaedt",
    "magnus_hallin",
    "mhallin@gmail.com",
    "nahrstaedt@gmail.com"
  ],
  "kwds": "_scrypt scrypt_ scrypt scrypt_windows_link_legacy_openssl python_",
  "license_kwds": "2-clause bsd",
  "libtype": "pypi",
  "id": "pypi_scrypt",
  "homepage": "https://github.com/holgern/py-scrypt",
  "release_count": 33,
  "dependency_ids": []
}
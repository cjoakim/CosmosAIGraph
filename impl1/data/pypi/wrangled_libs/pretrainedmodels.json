{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.6",
    "topic :: software development :: build tools"
  ],
  "description": "# pretrained models for pytorch (work in progress)\n\nthe goal of this repo is:\n\n- to help to reproduce research papers results (transfer learning setups for instance),\n- to access pretrained convnets with a unique interface/api inspired by torchvision.\n\n<a href=\"https://travis-ci.org/cadene/pretrained-models.pytorch\"><img src=\"https://api.travis-ci.org/cadene/pretrained-models.pytorch.svg?branch=master\"/></a>\n\nnews:\n- 27/10/2018: fix compatibility issues, add tests, add travis\n- 04/06/2018: [polynet](https://github.com/cuhk-mmlab/polynet) and [pnasnet-5-large](https://arxiv.org/abs/1712.00559) thanks to [alex parinov](https://github.com/creafz)\n- 16/04/2018: [se-resnet* and se-resnext*](https://github.com/hujie-frank/senet) thanks to [alex parinov](https://github.com/creafz)\n- 09/04/2018: [senet154](https://github.com/hujie-frank/senet) thanks to [alex parinov](https://github.com/creafz)\n- 22/03/2018: cafferesnet101 (good for localization with fasterrcnn)\n- 21/03/2018: nasnet mobile thanks to [veronika yurchuk](https://github.com/veronikayurchuk) and [anastasiia](https://github.com/dagnyt)\n- 25/01/2018: dualpathnetworks thanks to [ross wightman](https://github.com/rwightman/pytorch-dpn-pretrained), xception thanks to [t standley](https://github.com/tstandley/xception-pytorch), improved transformimage api\n- 13/01/2018: `pip install pretrainedmodels`, `pretrainedmodels.model_names`, `pretrainedmodels.pretrained_settings`\n- 12/01/2018: `python setup.py install`\n- 08/12/2017: update data url (/!\\ `git pull` is needed)\n- 30/11/2017: improve api (`model.features(input)`, `model.logits(features)`, `model.forward(input)`, `model.last_linear`)\n- 16/11/2017: nasnet-a-large pretrained model ported by t. durand and r. cadene\n- 22/07/2017: torchvision pretrained models\n- 22/07/2017: momentum in inceptionv4 and inceptionresnetv2 to 0.1\n- 17/07/2017: model.input_range attribut\n- 17/07/2017: bninception pretrained on imagenet\n\n## summary\n\n- [installation](https://github.com/cadene/pretrained-models.pytorch#installation)\n- [quick examples](https://github.com/cadene/pretrained-models.pytorch#quick-examples)\n- [few use cases](https://github.com/cadene/pretrained-models.pytorch#few-use-cases)\n    - [compute imagenet logits](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-logits)\n    - [compute imagenet validation metrics](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-validation-metrics)\n- [evaluation on imagenet](https://github.com/cadene/pretrained-models.pytorch#evaluation-on-imagenet)\n    - [accuracy on valset](https://github.com/cadene/pretrained-models.pytorch#accuracy-on-validation-set)\n    - [reproducing results](https://github.com/cadene/pretrained-models.pytorch#reproducing-results)\n- [documentation](https://github.com/cadene/pretrained-models.pytorch#documentation)\n    - [available models](https://github.com/cadene/pretrained-models.pytorch#available-models)\n        - [alexnet](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [bninception](https://github.com/cadene/pretrained-models.pytorch#bninception)\n        - [cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet)\n        - [densenet121](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet161](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet169](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [dualpathnet68](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet92](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet98](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet107](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet113](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [fbresnet152](https://github.com/cadene/pretrained-models.pytorch#facebook-resnet)\n        - [inceptionresnetv2](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [inceptionv3](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [inceptionv4](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [nasnet-a-large](https://github.com/cadene/pretrained-models.pytorch#nasnet)\n        - [nasnet-a-mobile](https://github.com/cadene/pretrained-models.pytorch#nasnet)\n        - [pnasnet-5-large](https://github.com/cadene/pretrained-models.pytorch#pnasnet)\n        - [polynet](https://github.com/cadene/pretrained-models.pytorch#polynet)\n        - [resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#resnext)\n        - [resnext101_64x4d](https://github.com/cadene/pretrained-models.pytorch#resnext)\n        - [resnet101](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet152](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet18](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet34](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet50](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [senet154](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet50](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet101](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet152](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnext50_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [squeezenet1_0](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [squeezenet1_1](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg11](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg13](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg16](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg19](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg11_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg13_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg16_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg19_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [xception](https://github.com/cadene/pretrained-models.pytorch#xception)\n    - [model api](https://github.com/cadene/pretrained-models.pytorch#model-api)\n        - [model.input_size](https://github.com/cadene/pretrained-models.pytorch#modelinput_size)\n        - [model.input_space](https://github.com/cadene/pretrained-models.pytorch#modelinput_space)\n        - [model.input_range](https://github.com/cadene/pretrained-models.pytorch#modelinput_range)\n        - [model.mean](https://github.com/cadene/pretrained-models.pytorch#modelmean)\n        - [model.std](https://github.com/cadene/pretrained-models.pytorch#modelstd)\n        - [model.features](https://github.com/cadene/pretrained-models.pytorch#modelfeatures)\n        - [model.logits](https://github.com/cadene/pretrained-models.pytorch#modellogits)\n        - [model.forward](https://github.com/cadene/pretrained-models.pytorch#modelforward)\n- [reproducing porting](https://github.com/cadene/pretrained-models.pytorch#reproducing)\n    - [resnet*](https://github.com/cadene/pretrained-models.pytorch#hand-porting-of-resnet152)\n    - [resnext*](https://github.com/cadene/pretrained-models.pytorch#automatic-porting-of-resnext)\n    - [inception*](https://github.com/cadene/pretrained-models.pytorch#hand-porting-of-inceptionv4-and-inceptionresnetv2)\n\n## installation\n\n1. [python3 with anaconda](https://www.continuum.io/downloads)\n2. [pytorch with/out cuda](http://pytorch.org)\n\n### install from pip\n\n3. `pip install pretrainedmodels`\n\n### install from repo\n\n3. `git clone https://github.com/cadene/pretrained-models.pytorch.git`\n4. `cd pretrained-models.pytorch`\n5. `python setup.py install`\n\n\n## quick examples\n\n- to import `pretrainedmodels`:\n\n```python\nimport pretrainedmodels\n```\n\n- to print the available pretrained models:\n\n```python\nprint(pretrainedmodels.model_names)\n> ['fbresnet152', 'bninception', 'resnext101_32x4d', 'resnext101_64x4d', 'inceptionv4', 'inceptionresnetv2', 'alexnet', 'densenet121', 'densenet169', 'densenet201', 'densenet161', 'resnet18', 'resnet34', 'resnet50', 'resnet101', 'resnet152', 'inceptionv3', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19_bn', 'vgg19', 'nasnetalarge', 'nasnetamobile', 'cafferesnet101', 'senet154',  'se_resnet50', 'se_resnet101', 'se_resnet152', 'se_resnext50_32x4d', 'se_resnext101_32x4d', 'cafferesnet101', 'polynet', 'pnasnet5large']\n```\n\n- to print the available pretrained settings for a chosen model:\n\n```python\nprint(pretrainedmodels.pretrained_settings['nasnetalarge'])\n> {'imagenet': {'url': 'http://data.lip6.fr/cadene/pretrainedmodels/nasnetalarge-a1897284.pth', 'input_space': 'rgb', 'input_size': [3, 331, 331], 'input_range': [0, 1], 'mean': [0.5, 0.5, 0.5], 'std': [0.5, 0.5, 0.5], 'num_classes': 1000}, 'imagenet+background': {'url': 'http://data.lip6.fr/cadene/pretrainedmodels/nasnetalarge-a1897284.pth', 'input_space': 'rgb', 'input_size': [3, 331, 331], 'input_range': [0, 1], 'mean': [0.5, 0.5, 0.5], 'std': [0.5, 0.5, 0.5], 'num_classes': 1001}}\n```\n\n- to load a pretrained models from imagenet:\n\n```python\nmodel_name = 'nasnetalarge' # could be fbresnet152 or inceptionresnetv2\nmodel = pretrainedmodels.__dict__[model_name](num_classes=1000, pretrained='imagenet')\nmodel.eval()\n```\n\n**note**: by default, models will be downloaded to your `$home/.torch` folder. you can modify this behavior using the `$torch_model_zoo` variable as follow: `export torch_model_zoo=\"/local/pretrainedmodels`\n\n- to load an image and do a complete forward pass:\n\n```python\nimport torch\nimport pretrainedmodels.utils as utils\n\nload_img = utils.loadimage()\n\n# transformations depending on the model\n#\u00a0rescale, center crop, normalize, and others (ex: tobgr, torange255)\ntf_img = utils.transformimage(model) \n\npath_img = 'data/cat.jpg'\n\ninput_img = load_img(path_img)\ninput_tensor = tf_img(input_img)         # 3x400x225 -> 3x299x299 size may differ\ninput_tensor = input_tensor.unsqueeze(0) # 3x299x299 -> 1x3x299x299\ninput = torch.autograd.variable(input_tensor,\n    requires_grad=false)\n\noutput_logits = model(input) # 1x1000\n```\n\n- to extract features (beware this api is not available for all networks):\n\n```python\noutput_features = model.features(input) # 1x14x14x2048 size may differ\noutput_logits = model.logits(output_features) # 1x1000\n```\n\n## few use cases\n\n### compute imagenet logits\n\n- see [examples/imagenet_logits.py](https://github.com/cadene/pretrained-models.pytorch/blob/master/examples/imagenet_logits.py) to compute logits of classes appearance over a single image with a pretrained model on imagenet.\n\n```\n$ python examples/imagenet_logits.py -h\n> nasnetalarge, resnet152, inceptionresnetv2, inceptionv4, ...\n```\n\n```\n$ python examples/imagenet_logits.py -a nasnetalarge --path_img data/cat.png\n> 'nasnetalarge': data/cat.png' is a 'tiger cat' \n```\n\n### compute imagenet evaluation metrics\n\n- see [examples/imagenet_eval.py](https://github.com/cadene/pretrained-models.pytorch/blob/master/examples/imagenet_eval.py) to evaluate pretrained models on imagenet valset. \n\n```\n$ python examples/imagenet_eval.py /local/common-data/imagenet_2012/images -a nasnetalarge -b 20 -e\n> * acc@1 92.693, acc@5 96.13\n```\n\n\n## evaluation on imagenet\n\n### accuracy on validation set (single model)\n\nresults were obtained using (center cropped) images of the same size than during the training process.\n\nmodel | version | acc@1 | acc@5\n--- | --- | --- | ---\npnasnet-5-large | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 82.858 | 96.182\n[pnasnet-5-large](https://github.com/cadene/pretrained-models.pytorch#pnasnet) | our porting | 82.736 | 95.992\nnasnet-a-large | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 82.693 | 96.163\n[nasnet-a-large](https://github.com/cadene/pretrained-models.pytorch#nasnet) | our porting | 82.566 | 96.086\nsenet154 | [caffe](https://github.com/hujie-frank/senet) | 81.32 | 95.53\n[senet154](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 81.304 | 95.498\npolynet | [caffe](https://github.com/cuhk-mmlab/polynet) | 81.29 | 95.75\n[polynet](https://github.com/cadene/pretrained-models.pytorch#polynet) | our porting | 81.002 | 95.624\ninceptionresnetv2 | [tensorflow](https://github.com/tensorflow/models/tree/master/slim) | 80.4 | 95.3\ninceptionv4 | [tensorflow](https://github.com/tensorflow/models/tree/master/slim) | 80.2 | 95.3\n[se-resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 80.236 | 95.028\nse-resnext101_32x4d | [caffe](https://github.com/hujie-frank/senet) | 80.19 | 95.04\n[inceptionresnetv2](https://github.com/cadene/pretrained-models.pytorch#inception) | our porting | 80.170 | 95.234\n[inceptionv4](https://github.com/cadene/pretrained-models.pytorch#inception) | our porting | 80.062 | 94.926\n[dualpathnet107_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.746 | 94.684\nresnext101_64x4d | [torch7](https://github.com/facebookresearch/resnext) | 79.6 | 94.7\n[dualpathnet131](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.432 | 94.574\n[dualpathnet92_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.400 | 94.620\n[dualpathnet98](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.224 | 94.488\n[se-resnext50_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 79.076 | 94.434\nse-resnext50_32x4d | [caffe](https://github.com/hujie-frank/senet) | 79.03 | 94.46\n[xception](https://github.com/cadene/pretrained-models.pytorch#xception) | [keras](https://github.com/keras-team/keras/blob/master/keras/applications/xception.py) | 79.000 | 94.500\n[resnext101_64x4d](https://github.com/cadene/pretrained-models.pytorch#resnext) | our porting | 78.956 | 94.252\n[xception](https://github.com/cadene/pretrained-models.pytorch#xception) | our porting | 78.888 | 94.292\nresnext101_32x4d | [torch7](https://github.com/facebookresearch/resnext) | 78.8 | 94.4\nse-resnet152 | [caffe](https://github.com/hujie-frank/senet) | 78.66 | 94.46\n[se-resnet152](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 78.658 | 94.374\nresnet152 | [pytorch](https://github.com/pytorch/vision#models) | 78.428 | 94.110\n[se-resnet101](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 78.396 | 94.258\nse-resnet101 | [caffe](https://github.com/hujie-frank/senet) | 78.25 | 94.28\n[resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#resnext) | our porting | 78.188 | 93.886\nfbresnet152 | [torch7](https://github.com/facebook/fb.resnet.torch) | 77.84 | 93.84\nse-resnet50 | [caffe](https://github.com/hujie-frank/senet) | 77.63 | 93.64\n[se-resnet50](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 77.636 | 93.752\n[densenet161](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.560 | 93.798\n[resnet101](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.438 | 93.672\n[fbresnet152](https://github.com/cadene/pretrained-models.pytorch#facebook-resnet) | our porting | 77.386 | 93.594\n[inceptionv3](https://github.com/cadene/pretrained-models.pytorch#inception) | [pytorch](https://github.com/pytorch/vision#models) | 77.294 | 93.454\n[densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.152 | 93.548\n[dualpathnet68b_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 77.034 | 93.590\n[cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet) | [caffe](https://github.com/kaiminghe/deep-residual-networks) | 76.400 | 92.900\n[cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet) | our porting | 76.200 | 92.766\n[densenet169](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 76.026 | 92.992\n[resnet50](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 76.002 | 92.980\n[dualpathnet68](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 75.868 | 92.774\n[densenet121](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 74.646 | 92.136\n[vgg19_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 74.266 | 92.066\nnasnet-a-mobile | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 74.0 | 91.6\n[nasnet-a-mobile](https://github.com/veronikayurchuk/pretrained-models.pytorch/blob/master/pretrainedmodels/models/nasnet_mobile.py) | our porting | 74.080 | 91.740\n[resnet34](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 73.554 | 91.456\n[bninception](https://github.com/cadene/pretrained-models.pytorch#bninception) | our porting | 73.524 | 91.562\n[vgg16_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 73.518 | 91.608\n[vgg19](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 72.080 | 90.822\n[vgg16](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 71.636 | 90.354\n[vgg13_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 71.508 | 90.494\n[vgg11_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 70.452 | 89.818\n[resnet18](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 70.142 | 89.274\n[vgg13](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 69.662 | 89.264\n[vgg11](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 68.970 | 88.746\n[squeezenet1_1](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 58.250 | 80.800\n[squeezenet1_0](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 58.108 | 80.428\n[alexnet](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 56.432 | 79.194\n\nnotes:\n- the pytorch version of resnet152 is not a porting of the torch7 but has been retrained by facebook.\n- for the polynet evaluation each image was resized to 378x378 without preserving the aspect ratio and then the central 331\u00d7331 patch from the resulting image was used.\n\nbeware, the accuracy reported here is not always representative of the transferable capacity of the network on other tasks and datasets. you must try them all! :p\n    \n### reproducing results\n\nplease see [compute imagenet validation metrics](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-validation-metrics)\n\n\n## documentation\n\n### available models\n\n#### nasnet*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/research/slim)\n\n- `nasnetalarge(num_classes=1000, pretrained='imagenet')`\n- `nasnetalarge(num_classes=1001, pretrained='imagenet+background')`\n- `nasnetamobile(num_classes=1000, pretrained='imagenet')`\n\n#### facebook resnet*\n\nsource: [torch7 repo of facebook](https://github.com/facebook/fb.resnet.torch)\n\nthere are a bit different from the resnet* of torchvision. resnet152 is currently the only one available.\n\n- `fbresnet152(num_classes=1000, pretrained='imagenet')`\n\n#### caffe resnet*\n\nsource: [caffe repo of kaiminghe](https://github.com/kaiminghe/deep-residual-networks)\n\n- `cafferesnet101(num_classes=1000, pretrained='imagenet')`\n\n\n#### inception*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/slim) and [pytorch/vision repo](https://github.com/pytorch/vision/tree/master/torchvision) for `inceptionv3`\n\n- `inceptionresnetv2(num_classes=1000, pretrained='imagenet')`\n- `inceptionresnetv2(num_classes=1001, pretrained='imagenet+background')`\n- `inceptionv4(num_classes=1000, pretrained='imagenet')`\n- `inceptionv4(num_classes=1001, pretrained='imagenet+background')`\n- `inceptionv3(num_classes=1000, pretrained='imagenet')`\n\n#### bninception\n\nsource: [trained with caffe](https://github.com/cadene/tensorflow-model-zoo.torch/pull/2) by [xiong yuanjun](http://yjxiong.me)\n\n- `bninception(num_classes=1000, pretrained='imagenet')`\n\n#### resnext*\n\nsource: [resnext repo of facebook](https://github.com/facebookresearch/resnext)\n\n- `resnext101_32x4d(num_classes=1000, pretrained='imagenet')`\n- `resnext101_62x4d(num_classes=1000, pretrained='imagenet')`\n\n#### dualpathnetworks\n\nsource: [mxnet repo of chen yunpeng](https://github.com/cypw/dpns)\n\nthe porting has been made possible by [ross wightman](http://rwightman.com) in his [pytorch repo](https://github.com/rwightman/pytorch-dpn-pretrained).\n\nas you can see [here](https://github.com/rwightman/pytorch-dpn-pretrained) dualpathnetworks allows you to try different scales. the default one in this repo is 0.875 meaning that the original input size is 256 before croping to 224.\n\n- `dpn68(num_classes=1000, pretrained='imagenet')`\n- `dpn98(num_classes=1000, pretrained='imagenet')`\n- `dpn131(num_classes=1000, pretrained='imagenet')`\n- `dpn68b(num_classes=1000, pretrained='imagenet+5k')`\n- `dpn92(num_classes=1000, pretrained='imagenet+5k')`\n- `dpn107(num_classes=1000, pretrained='imagenet+5k')`\n\n`'imagenet+5k'` means that the network has been pretrained on imagenet5k before being finetuned on imagenet1k.\n\n#### xception\n\nsource: [keras repo](https://github.com/keras-team/keras/blob/master/keras/applications/xception.py)\n\nthe porting has been made possible by [t standley](https://github.com/tstandley/xception-pytorch).\n\n- `xception(num_classes=1000, pretrained='imagenet')`\n\n\n#### senet*\n\nsource: [caffe repo of jie hu](https://github.com/hujie-frank/senet)\n\n- `senet154(num_classes=1000, pretrained='imagenet')`\n- `se_resnet50(num_classes=1000, pretrained='imagenet')`\n- `se_resnet101(num_classes=1000, pretrained='imagenet')`\n- `se_resnet152(num_classes=1000, pretrained='imagenet')`\n- `se_resnext50_32x4d(num_classes=1000, pretrained='imagenet')`\n- `se_resnext101_32x4d(num_classes=1000, pretrained='imagenet')`\n\n#### pnasnet*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/research/slim)\n\n- `pnasnet5large(num_classes=1000, pretrained='imagenet')`\n- `pnasnet5large(num_classes=1001, pretrained='imagenet+background')`\n\n#### polynet\n\nsource: [caffe repo of the cuhk multimedia lab](https://github.com/cuhk-mmlab/polynet)\n\n- `polynet(num_classes=1000, pretrained='imagenet')`\n\n#### torchvision\n\nsource: [pytorch/vision repo](https://github.com/pytorch/vision/tree/master/torchvision)\n\n(`inceptionv3` included in [inception*](https://github.com/cadene/pretrained-models.pytorch#inception))\n\n- `resnet18(num_classes=1000, pretrained='imagenet')`\n- `resnet34(num_classes=1000, pretrained='imagenet')`\n- `resnet50(num_classes=1000, pretrained='imagenet')`\n- `resnet101(num_classes=1000, pretrained='imagenet')`\n- `resnet152(num_classes=1000, pretrained='imagenet')`\n- `densenet121(num_classes=1000, pretrained='imagenet')`\n- `densenet161(num_classes=1000, pretrained='imagenet')`\n- `densenet169(num_classes=1000, pretrained='imagenet')`\n- `densenet201(num_classes=1000, pretrained='imagenet')`\n- `squeezenet1_0(num_classes=1000, pretrained='imagenet')`\n- `squeezenet1_1(num_classes=1000, pretrained='imagenet')`\n- `alexnet(num_classes=1000, pretrained='imagenet')`\n- `vgg11(num_classes=1000, pretrained='imagenet')`\n- `vgg13(num_classes=1000, pretrained='imagenet')`\n- `vgg16(num_classes=1000, pretrained='imagenet')`\n- `vgg19(num_classes=1000, pretrained='imagenet')`\n- `vgg11_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg13_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg16_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg19_bn(num_classes=1000, pretrained='imagenet')`\n\n\n### model api\n\nonce a pretrained model has been loaded, you can use it that way.\n\n**important note**: all image must be loaded using `pil` which scales the pixel values between 0 and 1.\n\n#### `model.input_size`\n\nattribut of type `list` composed of 3 numbers:\n\n- number of color channels,\n- height of the input image,\n- width of the input image.\n\nexample:\n\n- `[3, 299, 299]` for inception* networks,\n- `[3, 224, 224]` for resnet* networks.\n\n\n#### `model.input_space`\n\nattribut of type `str` representating the color space of the image. can be `rgb` or `bgr`.\n\n\n#### `model.input_range`\n\nattribut of type `list` composed of 2 numbers:\n\n- min pixel value,\n- max pixel value.\n\nexample:\n\n- `[0, 1]` for resnet* and inception* networks,\n- `[0, 255]` for bninception network.\n\n\n#### `model.mean`\n\nattribut of type `list` composed of 3 numbers which are used to normalize the input image (substract \"color-channel-wise\").\n\nexample:\n\n- `[0.5, 0.5, 0.5]` for inception* networks,\n- `[0.485, 0.456, 0.406]` for resnet* networks.\n\n\n#### `model.std`\n\nattribut of type `list` composed of 3 numbers which are used to normalize the input image (divide \"color-channel-wise\").\n\nexample:\n\n- `[0.5, 0.5, 0.5]` for inception* networks,\n- `[0.229, 0.224, 0.225]` for resnet* networks.\n\n\n#### `model.features`\n\n/!\\ work in progress (may not be available)\n\nmethod which is used to extract the features from the image.\n\nexample when the model is loaded using `fbresnet152`:\n\n```python\nprint(input_224.size())            # (1,3,224,224)\noutput = model.features(input_224) \nprint(output.size())               # (1,2048,1,1)\n\n# print(input_448.size())          # (1,3,448,448)\noutput = model.features(input_448)\n# print(output.size())             # (1,2048,7,7)\n```\n\n#### `model.logits`\n\n/!\\ work in progress (may not be available)\n\nmethod which is used to classify the features from the image.\n\nexample when the model is loaded using `fbresnet152`:\n\n```python\noutput = model.features(input_224) \nprint(output.size())               # (1,2048, 1, 1)\noutput = model.logits(output)\nprint(output.size())               # (1,1000)\n```\n\n#### `model.forward`\n\nmethod used to call `model.features` and `model.logits`. it can be overwritten as desired.\n\n**note**: a good practice is to use `model.__call__` as your function of choice to forward an input to your model. see the example bellow.\n\n```python\n# without model.__call__\noutput = model.forward(input_224)\nprint(output.size())      # (1,1000)\n\n# with model.__call__\noutput = model(input_224)\nprint(output.size())      # (1,1000)\n```\n\n#### `model.last_linear`\n\nattribut of type `nn.linear`. this module is the last one to be called during the forward pass.\n\n- can be replaced by an adapted `nn.linear` for fine tuning.\n- can be replaced by `pretrained.utils.identity` for features extraction. \n\nexample when the model is loaded using `fbresnet152`:\n\n```python\nprint(input_224.size())            # (1,3,224,224)\noutput = model.features(input_224) \nprint(output.size())               # (1,2048,1,1)\noutput = model.logits(output)\nprint(output.size())               # (1,1000)\n\n# fine tuning\ndim_feats = model.last_linear.in_features # =2048\nnb_classes = 4\nmodel.last_linear = nn.linear(dim_feats, nb_classes)\noutput = model(input_224)\nprint(output.size())               # (1,4)\n\n# features extraction\nmodel.last_linear = pretrained.utils.identity()\noutput = model(input_224)\nprint(output.size())               # (1,2048)\n```\n\n## reproducing\n\n### hand porting of resnet152\n\n```\nth pretrainedmodels/fbresnet/resnet152_dump.lua\npython pretrainedmodels/fbresnet/resnet152_load.py\n```\n\n### automatic porting of resnext\n\nhttps://github.com/clcarwin/convert_torch_to_pytorch\n\n### hand porting of nasnet, inceptionv4 and inceptionresnetv2\n\nhttps://github.com/cadene/tensorflow-model-zoo.torch\n\n\n## acknowledgement\n\nthanks to the deep learning community and especially to the contributers of the pytorch ecosystem.",
  "docs_url": null,
  "keywords": "pytorch pretrained models deep learning",
  "license": "",
  "name": "pretrainedmodels",
  "package_url": "https://pypi.org/project/pretrainedmodels/",
  "project_url": "https://pypi.org/project/pretrainedmodels/",
  "project_urls": {
    "Homepage": "https://github.com/cadene/pretrained-models.pytorch"
  },
  "release_url": "https://pypi.org/project/pretrainedmodels/0.7.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pretrained models for pytorch",
  "version": "0.7.4",
  "releases": [],
  "developers": [
    "remi.cadene@icloud.com",
    "remi_cadene"
  ],
  "kwds": "convert_torch_to_pytorch pnasnet inceptionresnetv2 pytorch pnasnet5large",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pretrainedmodels",
  "homepage": "https://github.com/cadene/pretrained-models.pytorch",
  "release_count": 16,
  "dependency_ids": []
}
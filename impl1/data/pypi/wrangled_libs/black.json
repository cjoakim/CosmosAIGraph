{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "[![black logo](https://raw.githubusercontent.com/psf/black/main/docs/_static/logo2-readme.png)](https://black.readthedocs.io/en/stable/)\n\n<h2 align=\"center\">the uncompromising code formatter</h2>\n\n<p align=\"center\">\n<a href=\"https://github.com/psf/black/actions\"><img alt=\"actions status\" src=\"https://github.com/psf/black/workflows/test/badge.svg\"></a>\n<a href=\"https://black.readthedocs.io/en/stable/?badge=stable\"><img alt=\"documentation status\" src=\"https://readthedocs.org/projects/black/badge/?version=stable\"></a>\n<a href=\"https://coveralls.io/github/psf/black?branch=main\"><img alt=\"coverage status\" src=\"https://coveralls.io/repos/github/psf/black/badge.svg?branch=main\"></a>\n<a href=\"https://github.com/psf/black/blob/main/license\"><img alt=\"license: mit\" src=\"https://black.readthedocs.io/en/stable/_static/license.svg\"></a>\n<a href=\"https://pypi.org/project/black/\"><img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/black\"></a>\n<a href=\"https://pepy.tech/project/black\"><img alt=\"downloads\" src=\"https://static.pepy.tech/badge/black\"></a>\n<a href=\"https://anaconda.org/conda-forge/black/\"><img alt=\"conda-forge\" src=\"https://img.shields.io/conda/dn/conda-forge/black.svg?label=conda-forge\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n</p>\n\n> \u201cany color you like.\u201d\n\n_black_ is the uncompromising python code formatter. by using it, you agree to cede\ncontrol over minutiae of hand-formatting. in return, _black_ gives you speed,\ndeterminism, and freedom from `pycodestyle` nagging about formatting. you will save time\nand mental energy for more important matters.\n\nblackened code looks the same regardless of the project you're reading. formatting\nbecomes transparent after a while and you can focus on the content instead.\n\n_black_ makes code review faster by producing the smallest diffs possible.\n\ntry it out now using the [black playground](https://black.vercel.app). watch the\n[pycon 2019 talk](https://youtu.be/eszlcuws_2y) to learn more.\n\n---\n\n**[read the documentation on readthedocs!](https://black.readthedocs.io/en/stable)**\n\n---\n\n## installation and usage\n\n### installation\n\n_black_ can be installed by running `pip install black`. it requires python 3.8+ to run.\nif you want to format jupyter notebooks, install with `pip install \"black[jupyter]\"`.\n\nif you can't wait for the latest _hotness_ and want to install from github, use:\n\n`pip install git+https://github.com/psf/black`\n\n### usage\n\nto get started right away with sensible defaults:\n\n```sh\nblack {source_file_or_directory}\n```\n\nyou can run _black_ as a package if running it as a script doesn't work:\n\n```sh\npython -m black {source_file_or_directory}\n```\n\nfurther information can be found in our docs:\n\n- [usage and configuration](https://black.readthedocs.io/en/stable/usage_and_configuration/index.html)\n\n_black_ is already [successfully used](https://github.com/psf/black#used-by) by many\nprojects, small and big. _black_ has a comprehensive test suite, with efficient parallel\ntests, and our own auto formatting and parallel continuous integration runner. now that\nwe have become stable, you should not expect large formatting changes in the future.\nstylistic changes will mostly be responses to bug reports and support for new python\nsyntax. for more information please refer to\n[the black code style](https://black.readthedocs.io/en/stable/the_black_code_style/index.html).\n\nalso, as a safety measure which slows down processing, _black_ will check that the\nreformatted code still produces a valid ast that is effectively equivalent to the\noriginal (see the\n[pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#ast-before-and-after-formatting)\nsection for details). if you're feeling confident, use `--fast`.\n\n## the _black_ code style\n\n_black_ is a pep 8 compliant opinionated formatter. _black_ reformats entire files in\nplace. style configuration options are deliberately limited and rarely added. it doesn't\ntake previous formatting into account (see\n[pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism)\nfor exceptions).\n\nour documentation covers the current _black_ code style, but planned changes to it are\nalso documented. they're both worth taking a look at:\n\n- [the _black_ code style: current style](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html)\n- [the _black_ code style: future style](https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html)\n\nchanges to the _black_ code style are bound by the stability policy:\n\n- [the _black_ code style: stability policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy)\n\nplease refer to this document before submitting an issue. what seems like a bug might be\nintended behaviour.\n\n### pragmatism\n\nearly versions of _black_ used to be absolutist in some respects. they took after its\ninitial author. this was fine at the time as it made the implementation simpler and\nthere were not many users anyway. not many edge cases were reported. as a mature tool,\n_black_ does make some exceptions to rules it otherwise holds.\n\n- [the _black_ code style: pragmatism](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#pragmatism)\n\nplease refer to this document before submitting an issue just like with the document\nabove. what seems like a bug might be intended behaviour.\n\n## configuration\n\n_black_ is able to read project-specific default values for its command line options\nfrom a `pyproject.toml` file. this is especially useful for specifying custom\n`--include` and `--exclude`/`--force-exclude`/`--extend-exclude` patterns for your\nproject.\n\nyou can find more details in our documentation:\n\n- [the basics: configuration via a file](https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file)\n\nand if you're looking for more general configuration documentation:\n\n- [usage and configuration](https://black.readthedocs.io/en/stable/usage_and_configuration/index.html)\n\n**pro-tip**: if you're asking yourself \"do i need to configure anything?\" the answer is\n\"no\". _black_ is all about sensible defaults. applying those defaults will have your\ncode in compliance with many other _black_ formatted projects.\n\n## used by\n\nthe following notable open-source projects trust _black_ with enforcing a consistent\ncode style: pytest, tox, pyramid, django, django channels, hypothesis, attrs,\nsqlalchemy, poetry, pypa applications (warehouse, bandersnatch, pipenv, virtualenv),\npandas, pillow, twisted, localstack, every datadog agent integration, home assistant,\nzulip, kedro, openoa, floris, orbit, wombat, and many more.\n\nthe following organizations use _black_: facebook, dropbox, keeptruckin, lyft, mozilla,\nquora, duolingo, quantumblack, tesla, archer aviation.\n\nare we missing anyone? let us know.\n\n## testimonials\n\n**mike bayer**, [author of `sqlalchemy`](https://www.sqlalchemy.org/):\n\n> i can't think of any single tool in my entire programming career that has given me a\n> bigger productivity increase by its introduction. i can now do refactorings in about\n> 1% of the keystrokes that it would have taken me previously when we had no way for\n> code to format itself.\n\n**dusty phillips**,\n[writer](https://smile.amazon.com/s/ref=nb_sb_noss?url=search-alias%3daps&field-keywords=dusty+phillips):\n\n> _black_ is opinionated so you don't have to be.\n\n**hynek schlawack**, [creator of `attrs`](https://www.attrs.org/), core developer of\ntwisted and cpython:\n\n> an auto-formatter that doesn't suck is all i want for xmas!\n\n**carl meyer**, [django](https://www.djangoproject.com/) core developer:\n\n> at least the name is good.\n\n**kenneth reitz**, creator of [`requests`](https://requests.readthedocs.io/en/latest/)\nand [`pipenv`](https://readthedocs.org/projects/pipenv/):\n\n> this vastly improves the formatting of our code. thanks a ton!\n\n## show your style\n\nuse the badge in your project's readme.md:\n\n```md\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n```\n\nusing the badge in readme.rst:\n\n```\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n```\n\nlooks like this:\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## license\n\nmit\n\n## contributing\n\nwelcome! happy to see you willing to make the project better. you can get started by\nreading this:\n\n- [contributing: the basics](https://black.readthedocs.io/en/latest/contributing/the_basics.html)\n\nyou can also take a look at the rest of the contributing docs or talk with the\ndevelopers:\n\n- [contributing documentation](https://black.readthedocs.io/en/latest/contributing/index.html)\n- [chat on discord](https://discord.gg/rtvdv86prh)\n\n## change log\n\nthe log has become rather long. it moved to its own file.\n\nsee [changes](https://black.readthedocs.io/en/latest/change_log.html).\n\n## authors\n\nthe author list is quite long nowadays, so it lives in its own file.\n\nsee [authors.md](./authors.md)\n\n## code of conduct\n\neveryone participating in the _black_ project, and in particular in the issue tracker,\npull requests, and social media activity, is expected to treat other people with respect\nand more generally to follow the guidelines articulated in the\n[python community code of conduct](https://www.python.org/psf/codeofconduct/).\n\nat the same time, humor is encouraged. in fact, basic familiarity with monty python's\nflying circus is expected. we are not savages.\n\nand if you _really_ need to slap somebody, do it with a fish while dancing.\n# change log\n\n## 23.12.1\n\n### packaging\n\n- fixed a bug that included dependencies from the `d` extra by default (#4108)\n\n## 23.12.0\n\n### highlights\n\nit's almost 2024, which means it's time for a new edition of _black_'s stable style!\ntogether with this release, we'll put out an alpha release 24.1a1 showcasing the draft\n2024 stable style, which we'll finalize in the january release. please try it out and\n[share your feedback](https://github.com/psf/black/issues/4042).\n\nthis release (23.12.0) will still produce the 2023 style. most but not all of the\nchanges in `--preview` mode will be in the 2024 stable style.\n\n### stable style\n\n- fix bug where `# fmt: off` automatically dedents when used with the `--line-ranges`\n  option, even when it is not within the specified line range. (#4084)\n- fix feature detection for parenthesized context managers (#4104)\n\n### preview style\n\n- prefer more equal signs before a break when splitting chained assignments (#4010)\n- standalone form feed characters at the module level are no longer removed (#4021)\n- additional cases of immediately nested tuples, lists, and dictionaries are now\n  indented less (#4012)\n- allow empty lines at the beginning of all blocks, except immediately before a\n  docstring (#4060)\n- fix crash in preview mode when using a short `--line-length` (#4086)\n- keep suites consisting of only an ellipsis on their own lines if they are not\n  functions or class definitions (#4066) (#4103)\n\n### configuration\n\n- `--line-ranges` now skips _black_'s internal stability check in `--safe` mode. this\n  avoids a crash on rare inputs that have many unformatted same-content lines. (#4034)\n\n### packaging\n\n- upgrade to mypy 1.7.1 (#4049) (#4069)\n- faster compiled wheels are now available for cpython 3.12 (#4070)\n\n### integrations\n\n- enable 3.12 ci (#4035)\n- build docker images in parallel (#4054)\n- build docker images with 3.12 (#4055)\n\n## 23.11.0\n\n### highlights\n\n- support formatting ranges of lines with the new `--line-ranges` command-line option\n  (#4020)\n\n### stable style\n\n- fix crash on formatting bytes strings that look like docstrings (#4003)\n- fix crash when whitespace followed a backslash before newline in a docstring (#4008)\n- fix standalone comments inside complex blocks crashing black (#4016)\n- fix crash on formatting code like `await (a ** b)` (#3994)\n- no longer treat leading f-strings as docstrings. this matches python's behaviour and\n  fixes a crash (#4019)\n\n### preview style\n\n- multiline dicts and lists that are the sole argument to a function are now indented\n  less (#3964)\n- multiline unpacked dicts and lists as the sole argument to a function are now also\n  indented less (#3992)\n- in f-string debug expressions, quote types that are visible in the final string are\n  now preserved (#4005)\n- fix a bug where long `case` blocks were not split into multiple lines. also enable\n  general trailing comma rules on `case` blocks (#4024)\n- keep requiring two empty lines between module-level docstring and first function or\n  class definition (#4028)\n- add support for single-line format skip with other comments on the same line (#3959)\n\n### configuration\n\n- consistently apply force exclusion logic before resolving symlinks (#4015)\n- fix a bug in the matching of absolute path names in `--include` (#3976)\n\n### performance\n\n- fix mypyc builds on arm64 on macos (#4017)\n\n### integrations\n\n- black's pre-commit integration will now run only on git hooks appropriate for a code\n  formatter (#3940)\n\n## 23.10.1\n\n### highlights\n\n- maintenance release to get a fix out for github action edge case (#3957)\n\n### preview style\n\n- fix merging implicit multiline strings that have inline comments (#3956)\n- allow empty first line after block open before a comment or compound statement (#3967)\n\n### packaging\n\n- change dockerfile to hatch + compile black (#3965)\n\n### integrations\n\n- the summary output for github workflows is now suppressible using the `summary`\n  parameter. (#3958)\n- fix the action failing when black check doesn't pass (#3957)\n\n### documentation\n\n- it is known windows documentation ci is broken\n  https://github.com/psf/black/issues/3968\n\n## 23.10.0\n\n### stable style\n\n- fix comments getting removed from inside parenthesized strings (#3909)\n\n### preview style\n\n- fix long lines with power operators getting split before the line length (#3942)\n- long type hints are now wrapped in parentheses and properly indented when split across\n  multiple lines (#3899)\n- magic trailing commas are now respected in return types. (#3916)\n- require one empty line after module-level docstrings. (#3932)\n- treat raw triple-quoted strings as docstrings (#3947)\n\n### configuration\n\n- fix cache versioning logic when `black_cache_dir` is set (#3937)\n\n### parser\n\n- fix bug where attributes named `type` were not accepted inside `match` statements\n  (#3950)\n- add support for pep 695 type aliases containing lambdas and other unusual expressions\n  (#3949)\n\n### output\n\n- black no longer attempts to provide special errors for attempting to format python 2\n  code (#3933)\n- black will more consistently print stacktraces on internal errors in verbose mode\n  (#3938)\n\n### integrations\n\n- the action output displayed in the job summary is now wrapped in markdown (#3914)\n\n## 23.9.1\n\ndue to various issues, the previous release (23.9.0) did not include compiled mypyc\nwheels, which make black significantly faster. these issues have now been fixed, and\nthis release should come with compiled wheels once again.\n\nthere will be no wheels for python 3.12 due to a bug in mypyc. we will provide 3.12\nwheels in a future release as soon as the mypyc bug is fixed.\n\n### packaging\n\n- upgrade to mypy 1.5.1 (#3864)\n\n### performance\n\n- store raw tuples instead of namedtuples in black's cache, improving performance and\n  decreasing the size of the cache (#3877)\n\n## 23.9.0\n\n### preview style\n\n- more concise formatting for dummy implementations (#3796)\n- in stub files, add a blank line between a statement with a body (e.g an\n  `if sys.version_info > (3, x):`) and a function definition on the same level (#3862)\n- fix a bug whereby spaces were removed from walrus operators within subscript(#3823)\n\n### configuration\n\n- black now applies exclusion and ignore logic before resolving symlinks (#3846)\n\n### performance\n\n- avoid importing `ipython` if notebook cells do not contain magics (#3782)\n- improve caching by comparing file hashes as fallback for mtime and size (#3821)\n\n### _blackd_\n\n- fix an issue in `blackd` with single character input (#3558)\n\n### integrations\n\n- black now has an\n  [official pre-commit mirror](https://github.com/psf/black-pre-commit-mirror). swapping\n  `https://github.com/psf/black` to `https://github.com/psf/black-pre-commit-mirror` in\n  your `.pre-commit-config.yaml` will make black about 2x faster (#3828)\n- the `.black.env` folder specified by `env_path` will now be removed on the completion\n  of the github action (#3759)\n\n## 23.7.0\n\n### highlights\n\n- runtime support for python 3.7 has been removed. formatting 3.7 code will still be\n  supported until further notice (#3765)\n\n### stable style\n\n- fix a bug where an illegal trailing comma was added to return type annotations using\n  pep 604 unions (#3735)\n- fix several bugs and crashes where comments in stub files were removed or mishandled\n  under some circumstances (#3745)\n- fix a crash with multi-line magic comments like `type: ignore` within parentheses\n  (#3740)\n- fix error in ast validation when _black_ removes trailing whitespace in a type comment\n  (#3773)\n\n### preview style\n\n- implicitly concatenated strings used as function args are no longer wrapped inside\n  parentheses (#3640)\n- remove blank lines between a class definition and its docstring (#3692)\n\n### configuration\n\n- the `--workers` argument to _black_ can now be specified via the `black_num_workers`\n  environment variable (#3743)\n- `.pytest_cache`, `.ruff_cache` and `.vscode` are now excluded by default (#3691)\n- fix _black_ not honouring `pyproject.toml` settings when running `--stdin-filename`\n  and the `pyproject.toml` found isn't in the current working directory (#3719)\n- _black_ will now error if `exclude` and `extend-exclude` have invalid data types in\n  `pyproject.toml`, instead of silently doing the wrong thing (#3764)\n\n### packaging\n\n- upgrade mypyc from 0.991 to 1.3 (#3697)\n- remove patching of click that mitigated errors on python 3.6 with `lang=c` (#3768)\n\n### parser\n\n- add support for the new pep 695 syntax in python 3.12 (#3703)\n\n### performance\n\n- speed up _black_ significantly when the cache is full (#3751)\n- avoid importing `ipython` in a case where we wouldn't need it (#3748)\n\n### output\n\n- use aware utc datetimes internally, avoids deprecation warning on python 3.12 (#3728)\n- change verbose logging to exactly mirror _black_'s logic for source discovery (#3749)\n\n### _blackd_\n\n- the `blackd` argument parser now shows the default values for options in their help\n  text (#3712)\n\n### integrations\n\n- black is now tested with\n  [`pythonwarndefaultencoding = 1`](https://docs.python.org/3/library/io.html#io-encoding-warning)\n  (#3763)\n- update github action to display black output in the job summary (#3688)\n\n### documentation\n\n- add a citation.cff file to the root of the repository, containing metadata on how to\n  cite this software (#3723)\n- update the _classes_ and _exceptions_ documentation in developer reference to match\n  the latest code base (#3755)\n\n## 23.3.0\n\n### highlights\n\nthis release fixes a longstanding confusing behavior in black's github action, where the\nversion of the action did not determine the version of black being run (issue #3382). in\naddition, there is a small bug fix around imports and a number of improvements to the\npreview style.\n\nplease try out the\n[preview style](https://black.readthedocs.io/en/stable/the_black_code_style/future_style.html#preview-style)\nwith `black --preview` and tell us your feedback. all changes in the preview style are\nexpected to become part of black's stable style in january 2024.\n\n### stable style\n\n- import lines with `# fmt: skip` and `# fmt: off` no longer have an extra blank line\n  added when they are right after another import line (#3610)\n\n### preview style\n\n- add trailing commas to collection literals even if there's a comment after the last\n  entry (#3393)\n- `async def`, `async for`, and `async with` statements are now formatted consistently\n  compared to their non-async version. (#3609)\n- `with` statements that contain two context managers will be consistently wrapped in\n  parentheses (#3589)\n- let string splitters respect [east asian width](https://www.unicode.org/reports/tr11/)\n  (#3445)\n- now long string literals can be split after east asian commas and periods (`\u3001` u+3001\n  ideographic comma, `\u3002` u+3002 ideographic full stop, & `\uff0c` u+ff0c fullwidth comma)\n  besides before spaces (#3445)\n- for stubs, enforce one blank line after a nested class with a body other than just\n  `...` (#3564)\n- improve handling of multiline strings by changing line split behavior (#1879)\n\n### parser\n\n- added support for formatting files with invalid type comments (#3594)\n\n### integrations\n\n- update github action to use the version of black equivalent to action's version if\n  version input is not specified (#3543)\n- fix missing python binary path in autoload script for vim (#3508)\n\n### documentation\n\n- document that only the most recent release is supported for security issues;\n  vulnerabilities should be reported through tidelift (#3612)\n\n## 23.1.0\n\n### highlights\n\nthis is the first release of 2023, and following our\n[stability policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy),\nit comes with a number of improvements to our stable style, including improvements to\nempty line handling, removal of redundant parentheses in several contexts, and output\nthat highlights implicitly concatenated strings better.\n\nthere are also many changes to the preview style; try out `black --preview` and give us\nfeedback to help us set the stable style for next year.\n\nin addition to style changes, black now automatically infers the supported python\nversions from your `pyproject.toml` file, removing the need to set black's target\nversions separately.\n\n### stable style\n\n- introduce the 2023 stable style, which incorporates most aspects of last year's\n  preview style (#3418). specific changes:\n  - enforce empty lines before classes and functions with sticky leading comments\n    (#3302) (22.12.0)\n  - reformat empty and whitespace-only files as either an empty file (if no newline is\n    present) or as a single newline character (if a newline is present) (#3348)\n    (22.12.0)\n  - implicitly concatenated strings used as function args are now wrapped inside\n    parentheses (#3307) (22.12.0)\n  - correctly handle trailing commas that are inside a line's leading non-nested parens\n    (#3370) (22.12.0)\n  - `--skip-string-normalization` / `-s` now prevents docstring prefixes from being\n    normalized as expected (#3168) (since 22.8.0)\n  - when using `--skip-magic-trailing-comma` or `-c`, trailing commas are stripped from\n    subscript expressions with more than 1 element (#3209) (22.8.0)\n  - implicitly concatenated strings inside a list, set, or tuple are now wrapped inside\n    parentheses (#3162) (22.8.0)\n  - fix a string merging/split issue when a comment is present in the middle of\n    implicitly concatenated strings on its own line (#3227) (22.8.0)\n  - docstring quotes are no longer moved if it would violate the line length limit\n    (#3044, #3430) (22.6.0)\n  - parentheses around return annotations are now managed (#2990) (22.6.0)\n  - remove unnecessary parentheses around awaited objects (#2991) (22.6.0)\n  - remove unnecessary parentheses in `with` statements (#2926) (22.6.0)\n  - remove trailing newlines after code block open (#3035) (22.6.0)\n  - code cell separators `#%%` are now standardised to `# %%` (#2919) (22.3.0)\n  - remove unnecessary parentheses from `except` statements (#2939) (22.3.0)\n  - remove unnecessary parentheses from tuple unpacking in `for` loops (#2945) (22.3.0)\n  - avoid magic-trailing-comma in single-element subscripts (#2942) (22.3.0)\n- fix a crash when a colon line is marked between `# fmt: off` and `# fmt: on` (#3439)\n\n### preview style\n\n- format hex codes in unicode escape sequences in string literals (#2916)\n- add parentheses around `if`-`else` expressions (#2278)\n- improve performance on large expressions that contain many strings (#3467)\n- fix a crash in preview style with assert + parenthesized string (#3415)\n- fix crashes in preview style with walrus operators used in function return annotations\n  and except clauses (#3423)\n- fix a crash in preview advanced string processing where mixed implicitly concatenated\n  regular and f-strings start with an empty span (#3463)\n- fix a crash in preview advanced string processing where a standalone comment is placed\n  before a dict's value (#3469)\n- fix an issue where extra empty lines are added when a decorator has `# fmt: skip`\n  applied or there is a standalone comment between decorators (#3470)\n- do not put the closing quotes in a docstring on a separate line, even if the line is\n  too long (#3430)\n- long values in dict literals are now wrapped in parentheses; correspondingly\n  unnecessary parentheses around short values in dict literals are now removed; long\n  string lambda values are now wrapped in parentheses (#3440)\n- fix two crashes in preview style involving edge cases with docstrings (#3451)\n- exclude string type annotations from improved string processing; fix crash when the\n  return type annotation is stringified and spans across multiple lines (#3462)\n- wrap multiple context managers in parentheses when targeting python 3.9+ (#3489)\n- fix several crashes in preview style with walrus operators used in `with` statements\n  or tuples (#3473)\n- fix an invalid quote escaping bug in f-string expressions where it produced invalid\n  code. implicitly concatenated f-strings with different quotes can now be merged or\n  quote-normalized by changing the quotes used in expressions. (#3509)\n- fix crash on `await (yield)` when black is compiled with mypyc (#3533)\n\n### configuration\n\n- black now tries to infer its `--target-version` from the project metadata specified in\n  `pyproject.toml` (#3219)\n\n### packaging\n\n- upgrade mypyc from `0.971` to `0.991` so mypycified _black_ can be built on armv7\n  (#3380)\n  - this also fixes some crashes while using compiled black with a debug build of\n    cpython\n- drop specific support for the `tomli` requirement on 3.11 alpha releases, working\n  around a bug that would cause the requirement not to be installed on any non-final\n  python releases (#3448)\n- black now depends on `packaging` version `22.0` or later. this is required for new\n  functionality that needs to parse part of the project metadata (#3219)\n\n### output\n\n- calling `black --help` multiple times will return the same help contents each time\n  (#3516)\n- verbose logging now shows the values of `pyproject.toml` configuration variables\n  (#3392)\n- fix false symlink detection messages in verbose output due to using an incorrect\n  relative path to the project root (#3385)\n\n### integrations\n\n- move 3.11 ci to normal flow now that all dependencies support 3.11 (#3446)\n- docker: add new `latest_prerelease` tag automation to follow latest black alpha\n  release on docker images (#3465)\n\n### documentation\n\n- expand `vim-plug` installation instructions to offer more explicit options (#3468)\n\n## 22.12.0\n\n### preview style\n\n- enforce empty lines before classes and functions with sticky leading comments (#3302)\n- reformat empty and whitespace-only files as either an empty file (if no newline is\n  present) or as a single newline character (if a newline is present) (#3348)\n- implicitly concatenated strings used as function args are now wrapped inside\n  parentheses (#3307)\n- for assignment statements, prefer splitting the right hand side if the left hand side\n  fits on a single line (#3368)\n- correctly handle trailing commas that are inside a line's leading non-nested parens\n  (#3370)\n\n### configuration\n\n- fix incorrectly applied `.gitignore` rules by considering the `.gitignore` location\n  and the relative path to the target file (#3338)\n- fix incorrectly ignoring `.gitignore` presence when more than one source directory is\n  specified (#3336)\n\n### parser\n\n- parsing support has been added for walruses inside generator expression that are\n  passed as function args (for example,\n  `any(match := my_re.match(text) for text in texts)`) (#3327).\n\n### integrations\n\n- vim plugin: optionally allow using the system installation of black via\n  `let g:black_use_virtualenv = 0`(#3309)\n\n## 22.10.0\n\n### highlights\n\n- runtime support for python 3.6 has been removed. formatting 3.6 code will still be\n  supported until further notice.\n\n### stable style\n\n- fix a crash when `# fmt: on` is used on a different block level than `# fmt: off`\n  (#3281)\n\n### preview style\n\n- fix a crash when formatting some dicts with parenthesis-wrapped long string keys\n  (#3262)\n\n### configuration\n\n- `.ipynb_checkpoints` directories are now excluded by default (#3293)\n- add `--skip-source-first-line` / `-x` option to ignore the first line of source code\n  while formatting (#3299)\n\n### packaging\n\n- executables made with pyinstaller will no longer crash when formatting several files\n  at once on macos. native x86-64 executables for macos are available once again.\n  (#3275)\n- hatchling is now used as the build backend. this will not have any effect for users\n  who install black with its wheels from pypi. (#3233)\n- faster compiled wheels are now available for cpython 3.11 (#3276)\n\n### _blackd_\n\n- windows style (crlf) newlines will be preserved (#3257).\n\n### integrations\n\n- vim plugin: add flag (`g:black_preview`) to enable/disable the preview style (#3246)\n- update github action to support formatting of jupyter notebook files via a `jupyter`\n  option (#3282)\n- update github action to support use of version specifiers (e.g. `<23`) for black\n  version (#3265)\n\n## 22.8.0\n\n### highlights\n\n- python 3.11 is now supported, except for _blackd_ as aiohttp does not support 3.11 as\n  of publishing (#3234)\n- this is the last release that supports running _black_ on python 3.6 (formatting 3.6\n  code will continue to be supported until further notice)\n- reword the stability policy to say that we may, in rare cases, make changes that\n  affect code that was not previously formatted by _black_ (#3155)\n\n### stable style\n\n- fix an infinite loop when using `# fmt: on/off` in the middle of an expression or code\n  block (#3158)\n- fix incorrect handling of `# fmt: skip` on colon (`:`) lines (#3148)\n- comments are no longer deleted when a line had spaces removed around power operators\n  (#2874)\n\n### preview style\n\n- single-character closing docstring quotes are no longer moved to their own line as\n  this is invalid. this was a bug introduced in version 22.6.0. (#3166)\n- `--skip-string-normalization` / `-s` now prevents docstring prefixes from being\n  normalized as expected (#3168)\n- when using `--skip-magic-trailing-comma` or `-c`, trailing commas are stripped from\n  subscript expressions with more than 1 element (#3209)\n- implicitly concatenated strings inside a list, set, or tuple are now wrapped inside\n  parentheses (#3162)\n- fix a string merging/split issue when a comment is present in the middle of implicitly\n  concatenated strings on its own line (#3227)\n\n### _blackd_\n\n- `blackd` now supports enabling the preview style via the `x-preview` header (#3217)\n\n### configuration\n\n- black now uses the presence of debug f-strings to detect target version (#3215)\n- fix misdetection of project root and verbose logging of sources in cases involving\n  `--stdin-filename` (#3216)\n- immediate `.gitignore` files in source directories given on the command line are now\n  also respected, previously only `.gitignore` files in the project root and\n  automatically discovered directories were respected (#3237)\n\n### documentation\n\n- recommend using blackconnect in intellij ides (#3150)\n\n### integrations\n\n- vim plugin: prefix messages with `black: ` so it's clear they come from black (#3194)\n- docker: changed to a /opt/venv installation + added to path to be available to\n  non-root users (#3202)\n\n### output\n\n- change from deprecated `asyncio.get_event_loop()` to create our event loop which\n  removes deprecationwarning (#3164)\n- remove logging from internal `blib2to3` library since it regularly emits error logs\n  about failed caching that can and should be ignored (#3193)\n\n### parser\n\n- type comments are now included in the ast equivalence check consistently so accidental\n  deletion raises an error. though type comments can't be tracked when running on pypy\n  3.7 due to standard library limitations. (#2874)\n\n### performance\n\n- reduce black's startup time when formatting a single file by 15-30% (#3211)\n\n## 22.6.0\n\n### style\n\n- fix unstable formatting involving `#fmt: skip` and `# fmt:skip` comments (notice the\n  lack of spaces) (#2970)\n\n### preview style\n\n- docstring quotes are no longer moved if it would violate the line length limit (#3044)\n- parentheses around return annotations are now managed (#2990)\n- remove unnecessary parentheses around awaited objects (#2991)\n- remove unnecessary parentheses in `with` statements (#2926)\n- remove trailing newlines after code block open (#3035)\n\n### integrations\n\n- add `scripts/migrate-black.py` script to ease introduction of black to a git project\n  (#3038)\n\n### output\n\n- output python version and implementation as part of `--version` flag (#2997)\n\n### packaging\n\n- use `tomli` instead of `tomllib` on python 3.11 builds where `tomllib` is not\n  available (#2987)\n\n### parser\n\n- [pep 654](https://peps.python.org/pep-0654/#except) syntax (for example,\n  `except *exceptiongroup:`) is now supported (#3016)\n- [pep 646](https://peps.python.org/pep-0646) syntax (for example,\n  `array[batch, *shape]` or `def fn(*args: *t) -> none`) is now supported (#3071)\n\n### vim plugin\n\n- fix `strtobool` function. it didn't parse true/on/false/off. (#3025)\n\n## 22.3.0\n\n### preview style\n\n- code cell separators `#%%` are now standardised to `# %%` (#2919)\n- remove unnecessary parentheses from `except` statements (#2939)\n- remove unnecessary parentheses from tuple unpacking in `for` loops (#2945)\n- avoid magic-trailing-comma in single-element subscripts (#2942)\n\n### configuration\n\n- do not format `__pypackages__` directories by default (#2836)\n- add support for specifying stable version with `--required-version` (#2832).\n- avoid crashing when the user has no homedir (#2814)\n- avoid crashing when md5 is not available (#2905)\n- fix handling of directory junctions on windows (#2904)\n\n### documentation\n\n- update pylint config documentation (#2931)\n\n### integrations\n\n- move test to disable plugin in vim/neovim, which speeds up loading (#2896)\n\n### output\n\n- in verbose mode, log when _black_ is using user-level config (#2861)\n\n### packaging\n\n- fix black to work with click 8.1.0 (#2966)\n- on python 3.11 and newer, use the standard library's `tomllib` instead of `tomli`\n  (#2903)\n- `black-primer`, the deprecated internal devtool, has been removed and copied to a\n  [separate repository](https://github.com/cooperlees/black-primer) (#2924)\n\n### parser\n\n- black can now parse starred expressions in the target of `for` and `async for`\n  statements, e.g `for item in *items_1, *items_2: pass` (#2879).\n\n## 22.1.0\n\nat long last, _black_ is no longer a beta product! this is the first non-beta release\nand the first release covered by our new\n[stability policy](https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy).\n\n### highlights\n\n- **remove python 2 support** (#2740)\n- introduce the `--preview` flag (#2752)\n\n### style\n\n- deprecate `--experimental-string-processing` and move the functionality under\n  `--preview` (#2789)\n- for stubs, one blank line between class attributes and methods is now kept if there's\n  at least one pre-existing blank line (#2736)\n- black now normalizes string prefix order (#2297)\n- remove spaces around power operators if both operands are simple (#2726)\n- work around bug that causes unstable formatting in some cases in the presence of the\n  magic trailing comma (#2807)\n- use parentheses for attribute access on decimal float and int literals (#2799)\n- don't add whitespace for attribute access on hexadecimal, binary, octal, and complex\n  literals (#2799)\n- treat blank lines in stubs the same inside top-level `if` statements (#2820)\n- fix unstable formatting with semicolons and arithmetic expressions (#2817)\n- fix unstable formatting around magic trailing comma (#2572)\n\n### parser\n\n- fix mapping cases that contain as-expressions, like `case {\"key\": 1 | 2 as password}`\n  (#2686)\n- fix cases that contain multiple top-level as-expressions, like `case 1 as a, 2 as b`\n  (#2716)\n- fix call patterns that contain as-expressions with keyword arguments, like\n  `case foo(bar=baz as quux)` (#2749)\n- tuple unpacking on `return` and `yield` constructs now implies 3.8+ (#2700)\n- unparenthesized tuples on annotated assignments (e.g\n  `values: tuple[int, ...] = 1, 2, 3`) now implies 3.8+ (#2708)\n- fix handling of standalone `match()` or `case()` when there is a trailing newline or a\n  comment inside of the parentheses. (#2760)\n- `from __future__ import annotations` statement now implies python 3.7+ (#2690)\n\n### performance\n\n- speed-up the new backtracking parser about 4x in general (enabled when\n  `--target-version` is set to 3.10 and higher). (#2728)\n- _black_ is now compiled with [mypyc](https://github.com/mypyc/mypyc) for an overall 2x\n  speed-up. 64-bit windows, macos, and linux (not including musl) are supported. (#1009,\n  #2431)\n\n### configuration\n\n- do not accept bare carriage return line endings in pyproject.toml (#2408)\n- add configuration option (`python-cell-magics`) to format cells with custom magics in\n  jupyter notebooks (#2744)\n- allow setting custom cache directory on all platforms with environment variable\n  `black_cache_dir` (#2739).\n- enable python 3.10+ by default, without any extra need to specify\n  `--target-version=py310`. (#2758)\n- make passing `src` or `--code` mandatory and mutually exclusive (#2804)\n\n### output\n\n- improve error message for invalid regular expression (#2678)\n- improve error message when parsing fails during ast safety check by embedding the\n  underlying syntaxerror (#2693)\n- no longer color diff headers white as it's unreadable in light themed terminals\n  (#2691)\n- text coloring added in the final statistics (#2712)\n- verbose mode also now describes how a project root was discovered and which paths will\n  be formatted. (#2526)\n\n### packaging\n\n- all upper version bounds on dependencies have been removed (#2718)\n- `typing-extensions` is no longer a required dependency in python 3.10+ (#2772)\n- set `click` lower bound to `8.0.0` (#2791)\n\n### integrations\n\n- update github action to support containerized runs (#2748)\n\n### documentation\n\n- change protocol in pip installation instructions to `https://` (#2761)\n- change html theme to furo primarily for its responsive design and mobile support\n  (#2793)\n- deprecate the `black-primer` tool (#2809)\n- document python support policy (#2819)\n\n## 21.12b0\n\n### _black_\n\n- fix determination of f-string expression spans (#2654)\n- fix bad formatting of error messages about eof in multi-line statements (#2343)\n- functions and classes in blocks now have more consistent surrounding spacing (#2472)\n\n#### jupyter notebook support\n\n- cell magics are now only processed if they are known python cell magics. earlier, all\n  cell magics were tokenized, leading to possible indentation errors e.g. with\n  `%%writefile`. (#2630)\n- fix assignment to environment variables in jupyter notebooks (#2642)\n\n#### python 3.10 support\n\n- point users to using `--target-version py310` if we detect 3.10-only syntax (#2668)\n- fix `match` statements with open sequence subjects, like `match a, b:` or\n  `match a, *b:` (#2639) (#2659)\n- fix `match`/`case` statements that contain `match`/`case` soft keywords multiple\n  times, like `match re.match()` (#2661)\n- fix `case` statements with an inline body (#2665)\n- fix styling of starred expressions inside `match` subject (#2667)\n- fix parser error location on invalid syntax in a `match` statement (#2649)\n- fix python 3.10 support on platforms without processpoolexecutor (#2631)\n- improve parsing performance on code that uses `match` under `--target-version py310`\n  up to ~50% (#2670)\n\n### packaging\n\n- remove dependency on `regex` (#2644) (#2663)\n\n## 21.11b1\n\n### _black_\n\n- bumped regex version minimum to 2021.4.4 to fix pattern class usage (#2621)\n\n## 21.11b0\n\n### _black_\n\n- warn about python 2 deprecation in more cases by improving python 2 only syntax\n  detection (#2592)\n- add experimental pypy support (#2559)\n- add partial support for the match statement. as it's experimental, it's only enabled\n  when `--target-version py310` is explicitly specified (#2586)\n- add support for parenthesized with (#2586)\n- declare support for python 3.10 for running black (#2562)\n\n### integrations\n\n- fixed vim plugin with python 3.10 by removing deprecated distutils import (#2610)\n- the vim plugin now parses `skip_magic_trailing_comma` from pyproject.toml (#2613)\n\n## 21.10b0\n\n### _black_\n\n- document stability policy, that will apply for non-beta releases (#2529)\n- add new `--workers` parameter (#2514)\n- fixed feature detection for positional-only arguments in lambdas (#2532)\n- bumped typed-ast version minimum to 1.4.3 for 3.10 compatibility (#2519)\n- fixed a python 3.10 compatibility issue where the loop argument was still being passed\n  even though it has been removed (#2580)\n- deprecate python 2 formatting support (#2523)\n\n### _blackd_\n\n- remove dependency on aiohttp-cors (#2500)\n- bump required aiohttp version to 3.7.4 (#2509)\n\n### _black-primer_\n\n- add primer support for --projects (#2555)\n- print primer summary after individual failures (#2570)\n\n### integrations\n\n- allow to pass `target_version` in the vim plugin (#1319)\n- install build tools in docker file and use multi-stage build to keep the image size\n  down (#2582)\n\n## 21.9b0\n\n### packaging\n\n- fix missing modules in self-contained binaries (#2466)\n- fix missing toml extra used during installation (#2475)\n\n## 21.8b0\n\n### _black_\n\n- add support for formatting jupyter notebook files (#2357)\n- move from `appdirs` dependency to `platformdirs` (#2375)\n- present a more user-friendly error if .gitignore is invalid (#2414)\n- the failsafe for accidentally added backslashes in f-string expressions has been\n  hardened to handle more edge cases during quote normalization (#2437)\n- avoid changing a function return type annotation's type to a tuple by adding a\n  trailing comma (#2384)\n- parsing support has been added for unparenthesized walruses in set literals, set\n  comprehensions, and indices (#2447).\n- pin `setuptools-scm` build-time dependency version (#2457)\n- exclude typing-extensions version 3.10.0.1 due to it being broken on python 3.10\n  (#2460)\n\n### _blackd_\n\n- replace sys.exit(-1) with raise importerror as it plays more nicely with tools that\n  scan installed packages (#2440)\n\n### integrations\n\n- the provided pre-commit hooks no longer specify `language_version` to avoid overriding\n  `default_language_version` (#2430)\n\n## 21.7b0\n\n### _black_\n\n- configuration files using toml features higher than spec v0.5.0 are now supported\n  (#2301)\n- add primer support and test for code piped into black via stdin (#2315)\n- fix internal error when `force_optional_parentheses` feature is enabled (#2332)\n- accept empty stdin (#2346)\n- provide a more useful error when parsing fails during ast safety checks (#2304)\n\n### docker\n\n- add new `latest_release` tag automation to follow latest black release on docker\n  images (#2374)\n\n### integrations\n\n- the vim plugin now searches upwards from the directory containing the current buffer\n  instead of the current working directory for pyproject.toml. (#1871)\n- the vim plugin now reads the correct string normalization option in pyproject.toml\n  (#1869)\n- the vim plugin no longer crashes black when there's boolean values in pyproject.toml\n  (#1869)\n\n## 21.6b0\n\n### _black_\n\n- fix failure caused by `fmt: skip` and indentation (#2281)\n- account for += assignment when deciding whether to split string (#2312)\n- correct max string length calculation when there are string operators (#2292)\n- fixed option usage when using the `--code` flag (#2259)\n- do not call `uvloop.install()` when _black_ is used as a library (#2303)\n- added `--required-version` option to require a specific version to be running (#2300)\n- fix incorrect custom breakpoint indices when string group contains fake f-strings\n  (#2311)\n- fix regression where `r` prefixes would be lowercased for docstrings (#2285)\n- fix handling of named escapes (`\\n{...}`) when `--experimental-string-processing` is\n  used (#2319)\n\n### integrations\n\n- the official black action now supports choosing what version to use, and supports the\n  major 3 oses. (#1940)\n\n## 21.5b2\n\n### _black_\n\n- a space is no longer inserted into empty docstrings (#2249)\n- fix handling of .gitignore files containing non-ascii characters on windows (#2229)\n- respect `.gitignore` files in all levels, not only `root/.gitignore` file (apply\n  `.gitignore` rules like `git` does) (#2225)\n- restored compatibility with click 8.0 on python 3.6 when lang=c used (#2227)\n- add extra uvloop install + import support if in python env (#2258)\n- fix --experimental-string-processing crash when matching parens are not found (#2283)\n- make sure to split lines that start with a string operator (#2286)\n- fix regular expression that black uses to identify f-expressions (#2287)\n\n### _blackd_\n\n- add a lower bound for the `aiohttp-cors` dependency. only 0.4.0 or higher is\n  supported. (#2231)\n\n### packaging\n\n- release self-contained x86_64 macos binaries as part of the github release pipeline\n  (#2198)\n- always build binaries with the latest available python (#2260)\n\n### documentation\n\n- add discussion of magic comments to faq page (#2272)\n- `--experimental-string-processing` will be enabled by default in the future (#2273)\n- fix typos discovered by codespell (#2228)\n- fix vim plugin installation instructions. (#2235)\n- add new frequently asked questions page (#2247)\n- fix encoding + symlink issues preventing proper build on windows (#2262)\n\n## 21.5b1\n\n### _black_\n\n- refactor `src/black/__init__.py` into many files (#2206)\n\n### documentation\n\n- replaced all remaining references to the\n  [`master`](https://github.com/psf/black/tree/main) branch with the\n  [`main`](https://github.com/psf/black/tree/main) branch. some additional changes in\n  the source code were also made. (#2210)\n- significantly reorganized the documentation to make much more sense. check them out by\n  heading over to [the stable docs on rtd](https://black.readthedocs.io/en/stable/).\n  (#2174)\n\n## 21.5b0\n\n### _black_\n\n- set `--pyi` mode if `--stdin-filename` ends in `.pyi` (#2169)\n- stop detecting target version as python 3.9+ with pre-pep-614 decorators that are\n  being called but with no arguments (#2182)\n\n### _black-primer_\n\n- add `--no-diff` to black-primer to suppress formatting changes (#2187)\n\n## 21.4b2\n\n### _black_\n\n- fix crash if the user configuration directory is inaccessible. (#2158)\n\n- clarify\n  [circumstances](https://github.com/psf/black/blob/master/docs/the_black_code_style.md#pragmatism)\n  in which _black_ may change the ast (#2159)\n\n- allow `.gitignore` rules to be overridden by specifying `exclude` in `pyproject.toml`\n  or on the command line. (#2170)\n\n### _packaging_\n\n- install `primer.json` (used by `black-primer` by default) with black. (#2154)\n\n## 21.4b1\n\n### _black_\n\n- fix crash on docstrings ending with \"\\\\ \". (#2142)\n\n- fix crash when atypical whitespace is cleaned out of dostrings (#2120)\n\n- reflect the `--skip-magic-trailing-comma` and `--experimental-string-processing` flags\n  in the name of the cache file. without this fix, changes in these flags would not take\n  effect if the cache had already been populated. (#2131)\n\n- don't remove necessary parentheses from assignment expression containing assert /\n  return statements. (#2143)\n\n### _packaging_\n\n- bump pathspec to >= 0.8.1 to solve invalid .gitignore exclusion handling\n\n## 21.4b0\n\n### _black_\n\n- fixed a rare but annoying formatting instability created by the combination of\n  optional trailing commas inserted by `black` and optional parentheses looking at\n  pre-existing \"magic\" trailing commas. this fixes issue #1629 and all of its many many\n  duplicates. (#2126)\n\n- `black` now processes one-line docstrings by stripping leading and trailing spaces,\n  and adding a padding space when needed to break up \"\"\"\". (#1740)\n\n- `black` now cleans up leading non-breaking spaces in comments (#2092)\n\n- `black` now respects `--skip-string-normalization` when normalizing multiline\n  docstring quotes (#1637)\n\n- `black` no longer removes all empty lines between non-function code and decorators\n  when formatting typing stubs. now `black` enforces a single empty line. (#1646)\n\n- `black` no longer adds an incorrect space after a parenthesized assignment expression\n  in if/while statements (#1655)\n\n- added `--skip-magic-trailing-comma` / `-c` to avoid using trailing commas as a reason\n  to split lines (#1824)\n\n- fixed a crash when pwd=/ on posix (#1631)\n\n- fixed \"i/o operation on closed file\" when using --diff (#1664)\n\n- prevent coloured diff output being interleaved with multiple files (#1673)\n\n- added support for pep 614 relaxed decorator syntax on python 3.9 (#1711)\n\n- added parsing support for unparenthesized tuples and yield expressions in annotated\n  assignments (#1835)\n\n- added `--extend-exclude` argument (pr #2005)\n\n- speed up caching by avoiding pathlib (#1950)\n\n- `--diff` correctly indicates when a file doesn't end in a newline (#1662)\n\n- added `--stdin-filename` argument to allow stdin to respect `--force-exclude` rules\n  (#1780)\n\n- lines ending with `fmt: skip` will now be not formatted (#1800)\n\n- pr #2053: black no longer relies on typed-ast for python 3.8 and higher\n\n- pr #2053: python 2 support is now optional, install with\n  `python3 -m pip install black[python2]` to maintain support.\n\n- exclude `venv` directory by default (#1683)\n\n- fixed \"black produced code that is not equivalent to the source\" when formatting\n  python 2 docstrings (#2037)\n\n### _packaging_\n\n- self-contained native _black_ binaries are now provided for releases via github\n  releases (#1743)\n\n## 20.8b1\n\n### _packaging_\n\n- explicitly depend on click 7.1.2 or newer as `black` no longer works with versions\n  older than 7.0\n\n## 20.8b0\n\n### _black_\n\n- re-implemented support for explicit trailing commas: now it works consistently within\n  any bracket pair, including nested structures (#1288 and duplicates)\n\n- `black` now reindents docstrings when reindenting code around it (#1053)\n\n- `black` now shows colored diffs (#1266)\n\n- `black` is now packaged using 'py3' tagged wheels (#1388)\n\n- `black` now supports python 3.8 code, e.g. star expressions in return statements\n  (#1121)\n\n- `black` no longer normalizes capital r-string prefixes as those have a\n  community-accepted meaning (#1244)\n\n- `black` now uses exit code 2 when specified configuration file doesn't exit (#1361)\n\n- `black` now works on aws lambda (#1141)\n\n- added `--force-exclude` argument (#1032)\n\n- removed deprecated `--py36` option (#1236)\n\n- fixed `--diff` output when eof is encountered (#526)\n\n- fixed `# fmt: off` handling around decorators (#560)\n\n- fixed unstable formatting with some `# type: ignore` comments (#1113)\n\n- fixed invalid removal on organizing brackets followed by indexing (#1575)\n\n- introduced `black-primer`, a ci tool that allows us to run regression tests against\n  existing open source users of black (#1402)\n\n- introduced property-based fuzzing to our test suite based on hypothesis and\n  hypothersmith (#1566)\n\n- implemented experimental and disabled by default long string rewrapping (#1132),\n  hidden under a `--experimental-string-processing` flag while it's being worked on;\n  this is an undocumented and unsupported feature, you lose internet points for\n  depending on it (#1609)\n\n### vim plugin\n\n- prefer virtualenv packages over global packages (#1383)\n\n## 19.10b0\n\n- added support for pep 572 assignment expressions (#711)\n\n- added support for pep 570 positional-only arguments (#943)\n\n- added support for async generators (#593)\n\n- added support for pre-splitting collections by putting an explicit trailing comma\n  inside (#826)\n\n- added `black -c` as a way to format code passed from the command line (#761)\n\n- --safe now works with python 2 code (#840)\n\n- fixed grammar selection for python 2-specific code (#765)\n\n- fixed feature detection for trailing commas in function definitions and call sites\n  (#763)\n\n- `# fmt: off`/`# fmt: on` comment pairs placed multiple times within the same block of\n  code now behave correctly (#1005)\n\n- _black_ no longer crashes on windows machines with more than 61 cores (#838)\n\n- _black_ no longer crashes on standalone comments prepended with a backslash (#767)\n\n- _black_ no longer crashes on `from` ... `import` blocks with comments (#829)\n\n- _black_ no longer crashes on python 3.7 on some platform configurations (#494)\n\n- _black_ no longer fails on comments in from-imports (#671)\n\n- _black_ no longer fails when the file starts with a backslash (#922)\n\n- _black_ no longer merges regular comments with type comments (#1027)\n\n- _black_ no longer splits long lines that contain type comments (#997)\n\n- removed unnecessary parentheses around `yield` expressions (#834)\n\n- added parentheses around long tuples in unpacking assignments (#832)\n\n- added parentheses around complex powers when they are prefixed by a unary operator\n  (#646)\n\n- fixed bug that led _black_ format some code with a line length target of 1 (#762)\n\n- _black_ no longer introduces quotes in f-string subexpressions on string boundaries\n  (#863)\n\n- if _black_ puts parenthesis around a single expression, it moves comments to the\n  wrapped expression instead of after the brackets (#872)\n\n- `blackd` now returns the version of _black_ in the response headers (#1013)\n\n- `blackd` can now output the diff of formats on source code when the `x-diff` header is\n  provided (#969)\n\n## 19.3b0\n\n- new option `--target-version` to control which python versions _black_-formatted code\n  should target (#618)\n\n- deprecated `--py36` (use `--target-version=py36` instead) (#724)\n\n- _black_ no longer normalizes numeric literals to include `_` separators (#696)\n\n- long `del` statements are now split into multiple lines (#698)\n\n- type comments are no longer mangled in function signatures\n\n- improved performance of formatting deeply nested data structures (#509)\n\n- _black_ now properly formats multiple files in parallel on windows (#632)\n\n- _black_ now creates cache files atomically which allows it to be used in parallel\n  pipelines (like `xargs -p8`) (#673)\n\n- _black_ now correctly indents comments in files that were previously formatted with\n  tabs (#262)\n\n- `blackd` now supports cors (#622)\n\n## 18.9b0\n\n- numeric literals are now formatted by _black_ (#452, #461, #464, #469):\n\n  - numeric literals are normalized to include `_` separators on python 3.6+ code\n\n  - added `--skip-numeric-underscore-normalization` to disable the above behavior and\n    leave numeric underscores as they were in the input\n\n  - code with `_` in numeric literals is recognized as python 3.6+\n\n  - most letters in numeric literals are lowercased (e.g., in `1e10`, `0x01`)\n\n  - hexadecimal digits are always uppercased (e.g. `0xbadc0de`)\n\n- added `blackd`, see\n  [its documentation](https://github.com/psf/black/blob/18.9b0/readme.md#blackd) for\n  more info (#349)\n\n- adjacent string literals are now correctly split into multiple lines (#463)\n\n- trailing comma is now added to single imports that don't fit on a line (#250)\n\n- cache is now populated when `--check` is successful for a file which speeds up\n  consecutive checks of properly formatted unmodified files (#448)\n\n- whitespace at the beginning of the file is now removed (#399)\n\n- fixed mangling [pweave](http://mpastell.com/pweave/) and\n  [spyder ide](https://www.spyder-ide.org/) special comments (#532)\n\n- fixed unstable formatting when unpacking big tuples (#267)\n\n- fixed parsing of `__future__` imports with renames (#389)\n\n- fixed scope of `# fmt: off` when directly preceding `yield` and other nodes (#385)\n\n- fixed formatting of lambda expressions with default arguments (#468)\n\n- fixed `async for` statements: _black_ no longer breaks them into separate lines (#372)\n\n- note: the vim plugin stopped registering `,=` as a default chord as it turned out to\n  be a bad idea (#415)\n\n## 18.6b4\n\n- hotfix: don't freeze when multiple comments directly precede `# fmt: off` (#371)\n\n## 18.6b3\n\n- typing stub files (`.pyi`) now have blank lines added after constants (#340)\n\n- `# fmt: off` and `# fmt: on` are now much more dependable:\n\n  - they now work also within bracket pairs (#329)\n\n  - they now correctly work across function/class boundaries (#335)\n\n  - they now work when an indentation block starts with empty lines or misaligned\n    comments (#334)\n\n- made click not fail on invalid environments; note that click is right but the\n  likelihood we'll need to access non-ascii file paths when dealing with python source\n  code is low (#277)\n\n- fixed improper formatting of f-strings with quotes inside interpolated expressions\n  (#322)\n\n- fixed unnecessary slowdown when long list literals where found in a file\n\n- fixed unnecessary slowdown on ast nodes with very many siblings\n\n- fixed cannibalizing backslashes during string normalization\n\n- fixed a crash due to symbolic links pointing outside of the project directory (#338)\n\n## 18.6b2\n\n- added `--config` (#65)\n\n- added `-h` equivalent to `--help` (#316)\n\n- fixed improper unmodified file caching when `-s` was used\n\n- fixed extra space in string unpacking (#305)\n\n- fixed formatting of empty triple quoted strings (#313)\n\n- fixed unnecessary slowdown in comment placement calculation on lines without comments\n\n## 18.6b1\n\n- hotfix: don't output human-facing information on stdout (#299)\n\n- hotfix: don't output cake emoji on non-zero return code (#300)\n\n## 18.6b0\n\n- added `--include` and `--exclude` (#270)\n\n- added `--skip-string-normalization` (#118)\n\n- added `--verbose` (#283)\n\n- the header output in `--diff` now actually conforms to the unified diff spec\n\n- fixed long trivial assignments being wrapped in unnecessary parentheses (#273)\n\n- fixed unnecessary parentheses when a line contained multiline strings (#232)\n\n- fixed stdin handling not working correctly if an old version of click was used (#276)\n\n- _black_ now preserves line endings when formatting a file in place (#258)\n\n## 18.5b1\n\n- added `--pyi` (#249)\n\n- added `--py36` (#249)\n\n- python grammar pickle caches are stored with the formatting caches, making _black_\n  work in environments where site-packages is not user-writable (#192)\n\n- _black_ now enforces a pep 257 empty line after a class-level docstring (and/or\n  fields) and the first method\n\n- fixed invalid code produced when standalone comments were present in a trailer that\n  was omitted from line splitting on a large expression (#237)\n\n- fixed optional parentheses being removed within `# fmt: off` sections (#224)\n\n- fixed invalid code produced when stars in very long imports were incorrectly wrapped\n  in optional parentheses (#234)\n\n- fixed unstable formatting when inline comments were moved around in a trailer that was\n  omitted from line splitting on a large expression (#238)\n\n- fixed extra empty line between a class declaration and the first method if no class\n  docstring or fields are present (#219)\n\n- fixed extra empty line between a function signature and an inner function or inner\n  class (#196)\n\n## 18.5b0\n\n- call chains are now formatted according to the\n  [fluent interfaces](https://en.wikipedia.org/wiki/fluent_interface) style (#67)\n\n- data structure literals (tuples, lists, dictionaries, and sets) are now also always\n  exploded like imports when they don't fit in a single line (#152)\n\n- slices are now formatted according to pep 8 (#178)\n\n- parentheses are now also managed automatically on the right-hand side of assignments\n  and return statements (#140)\n\n- math operators now use their respective priorities for delimiting multiline\n  expressions (#148)\n\n- optional parentheses are now omitted on expressions that start or end with a bracket\n  and only contain a single operator (#177)\n\n- empty parentheses in a class definition are now removed (#145, #180)\n\n- string prefixes are now standardized to lowercase and `u` is removed on python 3.6+\n  only code and python 2.7+ code with the `unicode_literals` future import (#188, #198,\n  #199)\n\n- typing stub files (`.pyi`) are now formatted in a style that is consistent with pep\n  484 (#207, #210)\n\n- progress when reformatting many files is now reported incrementally\n\n- fixed trailers (content with brackets) being unnecessarily exploded into their own\n  lines after a dedented closing bracket (#119)\n\n- fixed an invalid trailing comma sometimes left in imports (#185)\n\n- fixed non-deterministic formatting when multiple pairs of removable parentheses were\n  used (#183)\n\n- fixed multiline strings being unnecessarily wrapped in optional parentheses in long\n  assignments (#215)\n\n- fixed not splitting long from-imports with only a single name\n\n- fixed python 3.6+ file discovery by also looking at function calls with unpacking.\n  this fixed non-deterministic formatting if trailing commas where used both in function\n  signatures with stars and function calls with stars but the former would be\n  reformatted to a single line.\n\n- fixed crash on dealing with optional parentheses (#193)\n\n- fixed \"is\", \"is not\", \"in\", and \"not in\" not considered operators for splitting\n  purposes\n\n- fixed crash when dead symlinks where encountered\n\n## 18.4a4\n\n- don't populate the cache on `--check` (#175)\n\n## 18.4a3\n\n- added a \"cache\"; files already reformatted that haven't changed on disk won't be\n  reformatted again (#109)\n\n- `--check` and `--diff` are no longer mutually exclusive (#149)\n\n- generalized star expression handling, including double stars; this fixes\n  multiplication making expressions \"unsafe\" for trailing commas (#132)\n\n- _black_ no longer enforces putting empty lines behind control flow statements (#90)\n\n- _black_ now splits imports like \"mode 3 + trailing comma\" of isort (#127)\n\n- fixed comment indentation when a standalone comment closes a block (#16, #32)\n\n- fixed standalone comments receiving extra empty lines if immediately preceding a\n  class, def, or decorator (#56, #154)\n\n- fixed `--diff` not showing entire path (#130)\n\n- fixed parsing of complex expressions after star and double stars in function calls\n  (#2)\n\n- fixed invalid splitting on comma in lambda arguments (#133)\n\n- fixed missing splits of ternary expressions (#141)\n\n## 18.4a2\n\n- fixed parsing of unaligned standalone comments (#99, #112)\n\n- fixed placement of dictionary unpacking inside dictionary literals (#111)\n\n- vim plugin now works on windows, too\n\n- fixed unstable formatting when encountering unnecessarily escaped quotes in a string\n  (#120)\n\n## 18.4a1\n\n- added `--quiet` (#78)\n\n- added automatic parentheses management (#4)\n\n- added [pre-commit](https://pre-commit.com) integration (#103, #104)\n\n- fixed reporting on `--check` with multiple files (#101, #102)\n\n- fixed removing backslash escapes from raw strings (#100, #105)\n\n## 18.4a0\n\n- added `--diff` (#87)\n\n- add line breaks before all delimiters, except in cases like commas, to better comply\n  with pep 8 (#73)\n\n- standardize string literals to use double quotes (almost) everywhere (#75)\n\n- fixed handling of standalone comments within nested bracketed expressions; _black_\n  will no longer produce super long lines or put all standalone comments at the end of\n  the expression (#22)\n\n- fixed 18.3a4 regression: don't crash and burn on empty lines with trailing whitespace\n  (#80)\n\n- fixed 18.3a4 regression: `# yapf: disable` usage as trailing comment would cause\n  _black_ to not emit the rest of the file (#95)\n\n- when ctrl+c is pressed while formatting many files, _black_ no longer freaks out with\n  a flurry of asyncio-related exceptions\n\n- only allow up to two empty lines on module level and only single empty lines within\n  functions (#74)\n\n## 18.3a4\n\n- `# fmt: off` and `# fmt: on` are implemented (#5)\n\n- automatic detection of deprecated python 2 forms of print statements and exec\n  statements in the formatted file (#49)\n\n- use proper spaces for complex expressions in default values of typed function\n  arguments (#60)\n\n- only return exit code 1 when --check is used (#50)\n\n- don't remove single trailing commas from square bracket indexing (#59)\n\n- don't omit whitespace if the previous factor leaf wasn't a math operator (#55)\n\n- omit extra space in kwarg unpacking if it's the first argument (#46)\n\n- omit extra space in\n  [sphinx auto-attribute comments](http://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute)\n  (#68)\n\n## 18.3a3\n\n- don't remove single empty lines outside of bracketed expressions (#19)\n\n- added ability to pipe formatting from stdin to stdin (#25)\n\n- restored ability to format code with legacy usage of `async` as a name (#20, #42)\n\n- even better handling of numpy-style array indexing (#33, again)\n\n## 18.3a2\n\n- changed positioning of binary operators to occur at beginning of lines instead of at\n  the end, following\n  [a recent change to pep 8](https://github.com/python/peps/commit/c59c4376ad233a62ca4b3a6060c81368bd21e85b)\n  (#21)\n\n- ignore empty bracket pairs while splitting. this avoids very weirdly looking\n  formattings (#34, #35)\n\n- remove a trailing comma if there is a single argument to a call\n\n- if top level functions were separated by a comment, don't put four empty lines after\n  the upper function\n\n- fixed unstable formatting of newlines with imports\n\n- fixed unintentional folding of post scriptum standalone comments into last statement\n  if it was a simple statement (#18, #28)\n\n- fixed missing space in numpy-style array indexing (#33)\n\n- fixed spurious space after star-based unary expressions (#31)\n\n## 18.3a1\n\n- added `--check`\n\n- only put trailing commas in function signatures and calls if it's safe to do so. if\n  the file is python 3.6+ it's always safe, otherwise only safe if there are no `*args`\n  or `**kwargs` used in the signature or call. (#8)\n\n- fixed invalid spacing of dots in relative imports (#6, #13)\n\n- fixed invalid splitting after comma on unpacked variables in for-loops (#23)\n\n- fixed spurious space in parenthesized set expressions (#7)\n\n- fixed spurious space after opening parentheses and in default arguments (#14, #17)\n\n- fixed spurious space after unary operators when the operand was a complex expression\n  (#15)\n\n## 18.3a0\n\n- first published version, happy \ud83c\udf70 day 2018!\n\n- alpha quality\n\n- date-versioned (see: <https://calver.org/>)\n",
  "docs_url": null,
  "keywords": "automation,autopep8,formatter,gofmt,pyfmt,rustfmt,yapf",
  "license": "mit",
  "name": "black",
  "package_url": "https://pypi.org/project/black/",
  "project_url": "https://pypi.org/project/black/",
  "project_urls": {
    "Changelog": "https://github.com/psf/black/blob/main/CHANGES.md",
    "Homepage": "https://github.com/psf/black"
  },
  "release_url": "https://pypi.org/project/black/23.12.1/",
  "requires_dist": [
    "click>=8.0.0",
    "mypy-extensions>=0.4.3",
    "packaging>=22.0",
    "pathspec>=0.9.0",
    "platformdirs>=2",
    "tomli>=1.1.0; python_version < '3.11'",
    "typing-extensions>=4.0.1; python_version < '3.11'",
    "colorama>=0.4.3; extra == 'colorama'",
    "aiohttp!=3.9.0,>=3.7.4; (sys_platform == 'win32' and implementation_name == 'pypy') and extra == 'd'",
    "aiohttp>=3.7.4; (sys_platform != 'win32' or implementation_name != 'pypy') and extra == 'd'",
    "ipython>=7.8.0; extra == 'jupyter'",
    "tokenize-rt>=3.2.0; extra == 'jupyter'",
    "uvloop>=0.15.2; extra == 'uvloop'"
  ],
  "requires_python": ">=3.8",
  "summary": "the uncompromising code formatter.",
  "version": "23.12.1",
  "releases": [],
  "developers": [
    "lukasz@langa.pl"
  ],
  "kwds": "logo2 the_black_code_style logo rustfmt markdown",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_black",
  "homepage": "",
  "release_count": 54,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_aiohttp!",
    "pypi_click",
    "pypi_colorama",
    "pypi_ipython",
    "pypi_mypy_extensions",
    "pypi_packaging",
    "pypi_pathspec",
    "pypi_platformdirs",
    "pypi_tokenize_rt",
    "pypi_tomli",
    "pypi_typing_extensions",
    "pypi_uvloop"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "descriptastorus\n===============\n\nthe descriptastorus provides \n\n  1. fast random access to rows of properties suitable for\nmachine learning and \n  2. fast random access to indexed molecule files\n  3. a mechanism for generating new descriptors for new molecules\n  4. a mechanism for validating that you can recreate the same storage in different software/hardware environments\n  5. an easy script for making your own descriptor files from raw data.\n\n[n.b.] kyotocabinet is required to read/write the inchikey and name indices\n  this should be installed in your environment.\n\nthere are three basic ways to use descriptastorus:\n  \n  1. make a descriptastore using a script\n  2. append new data to the store\n  3. use a descriptastore to access properties\n\ninstalling\n==========\n\n```\n1. install rdkit\n2. install scikit-learn\npip install git+https://github.com/bp-kelley/descriptastorus\n```\n\nrequirements are in the setup.py file, but essentially:\n\n 1. python2/3\n 2. rdkit\n 3. [optional but highly recommended] kyotocabinet\n\nusing rdkit descriptors\n=======================\ngrab a descriptor generator from the registry.\n\ncurrently registered descriptors:\n\n\t* atompaircounts\n\t* morgan3counts\n\t* morganchiral3counts\n\t* morganfeature3counts\n\t* rdkit2d\n\t* rdkit2dnormalized\n\t* rdkitfpbits\n\ndescriptors are input as a tuple or list to the generator.\n\n```\nfrom descriptastorus.descriptors.descriptorgenerator import makegenerator\ngenerator = makegenerator((\"rdkit2d\",))\nfor name, numpy_type in generator.getcolumns():\n  print(\"name: {} data type: {}\".format(name, numpy_type))\n```\n\nthe resulting columns and datatypes look like:\n```\nname: rdkit2d_calculated data type: <class 'bool'>\nname: balabanj data type: <class 'numpy.float64'>\nname: bertzct data type: <class 'numpy.float64'>\nname: chi0 data type: <class 'numpy.float64'>\nname: chi0n data type: <class 'numpy.float64'>\nname: chi0v data type: <class 'numpy.float64'>\nname: chi1 data type: <class 'numpy.float64'>\n\n```\n\nnote: rdkit2d_calculated is just a flag for the store to indicate that the\nrdkit2d features were successfully calculated.\n\nto get combine multiple generators simply add them to the list\nof desired datatypes:\n\n```\nfrom descriptastorus.descriptors.descriptorgenerator import makegenerator\ngenerator = makegenerator((\"rdkit2d\", \"morgan3counts\"))\nsmiles = \"c1ccccc1\"\ndata = generator.process(smiles)\nassert data[0] is true\n```\n\nthe first element is true if the molecule was successfully processed, this is used\nin the descriptastor to indicate that the row is valid.\n\nif a molecule is unsuccessfully processed, none is returned\n\n```\ndata = generator.process(\"not a smiles\")\nassert data is none\n```\n\nindividual descriptor sets can also be used outside of the\ngenerator.\n\n```\nfrom descriptastorus.descriptors import rdnormalizeddescriptors\nfrom rdkit import chem\nimport logging\n\n# make the normalized descriptor generator\ngenerator = rdnormalizeddescriptors.rdkit2dnormalized()\ngenerator.columns # list of tuples:  (descriptor_name, numpytype) ...\n\n# features = generator.process(smiles)\n# features[0] is true/false if the smiles could be processed correcty\n# features[1:] are the normalized descriptors as described in generator.columns\n\n# example for converting a smiles string into the values\ndef rdkit_2d_normalized_features(smiles: str):\n\u00a0 \u00a0 # n.b. the first element is true/false if the descriptors were properly computed\n    results = generator.process(smiles)[\n    processed, features = results[0], results[1:]\n    if processed is none:\n       logging.warning(\"unable to process smiles %s\", smiles)\n    # if processed is none, the features are are default values for the type\n\u00a0 \u00a0 return features\n```\n\nmaking a descriptastore\n=======================\n\nsee scripts/storus.py for more details:\n\n```\nusage: storus.py [-h] [--hasheader] [--index-inchikey]\n                 [--smilescolumn smilescolumn] [--namecolumn namecolumn]\n                 [--seperator seperator]\n                 smilesfile storage\n\npositional arguments:\n  smilesfile            file containing smiles strings\n  storage               directory in which to store the descriptors\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --hasheader           indicate whether the smiles file has a header row\n  --index-inchikey      optionally index the descriptors with inchi keys\n  --smilescolumn smilescolumn\n                        row index (or header name if the file has a header)\n                        for the smiles column\n  --namecolumn namecolumn\n                        row index (or header name if the file has a header)\n                        for the name column\n  --seperator seperator\n                        row index (or header name if the file has a header)\n                        for the name column\n\n```\n\nexample:\n\nsuppose you have a smiles file like the following:\n\n```\nsmiles stru_id\nc1ccccc1 name\n```\n\nthis is a whitespace seperated file with a header.  to make the standard\nstorage and also index the inchikey:\n\n```\npython scripts/storus.py --smilescolumn=smiles --namecolumn=stru_id --hasheader --index-inchikey \\\n  --seperator=\" \" \\\n  smiles.txt mysmiles-store\n```\n\nnote that smiles files are very seperator dependent.  if the smiles or name column\ncan't be found, it is might be because the seperator is misspecified.\n\nthe default properties created are 'morgan3counts,rdkit2d'.\n\nusing a descriptastore\n======================\n\nusing the descriptastore (the descriptastore is a directory of files):\n\n```\nfrom descriptastorus import descriptastore\nd = descriptastore(\"/db/cix/descriptastorus/store\")\n\n# print out the column names\nprint(d.descriptors().colnames)\n\n# this will take a while!\nfor moldata, descriptors in d:\n    smiles, name = moldata\n    descriptors # is a numpy array of data morgan3 counts + rdkit descriptors\n```\n\nnote that the descriptors may contain status flags named as \"x_calculated\" where x\nis one of the descriptor sets, such as rdkit2d.\n\nthese are not returned by the iterator, or through the following api points:\n\n```\ncolnames = d.getdescriptornames()\ndescriptors = d.getdescriptors(index)\nfor moldata, descriptors in d:\n  ...\n```\n\nto obtain these flags, you can either set the keepcalculatedflags option\n\n```\ncolnames = d.getdescriptornames(keepcalculatedflags=true)\ndescriptors = d.getdescriptors(keepcalculatedflags=true)\n```\n\nor use the direct descriptor interface:\n\n```\n# to iterate through only the descriptors:\nfor descriptors in d.descriptors():\n    ...\n```\n\n# to lookup by name (requires kyotocabinet)\n\n```\nrows = []\nfor name in names:\n    rows.extend( d.lookupname(name) )\n\n# sorting the rows helps with disk seeking\nrows.sort()\nfor row in rows:\n    descriptors = d.getdescriptors(row)\n    ...\n```\n\n# to lookup by inchikey (requires kyotocabinet)\n\n```\nrows = []\nfor key in inchikeys:\n    rows.extend( d.lookupinchikey(key) )\n\nrows.sort()\nfor row in rows:\n    descriptors = d.descriptors().get(row)\n    smiles, name = d.molindex().get(row)\n    ...\n```\n\ndoing things yourself\n=====================\n    \ncreating a raw store\n--------------------\n\nthe storage system is quite simple.  it is made by specifying the column names and\nnumpy types to store and also the number of rows to initialize.\n\nexample:\n\n```\n >>> from descriptastorus import raw\n >>> import numpy\n >>> columns = [('exactmw', numpy.float64), ('numrotatablebonds', numpy.int32) ...]\n >>> r = raw.makestore( columns, 2, \"store\")\n >>> r.putrow(0, [45.223, 3])\n```\n\nusing an existing store\n-----------------------\n\nafter creation, to open the read only storage:\n\n```\n >>> r = raw.rawstore(\"store\")\n```\n\nget the number or rows:\n\n```\n >>> r.n\n 2\n```\n\nget the column names:\n\n```\n >>> r.colnames\n ['exactmw', 'numrotatablebonds']\n```\n\nextract the column:\n\n```\n>>> r.get(0)\n[45.223, 3]\n```\n\nmake a molfileindex\n===================\n\nif the smiles file has a header\n\n```\n>>> from descriptastorus import molfileindex\n>>> index = molfileindex.makesmilesindex(\"data/test1.smi\", \"test1\", hasheader=true,\n...                                      smilescolumn=\"smiles\", namecolumn=\"name\")\n>>> index.n\n13\n>>> index.getmol(12)\n'c1ccccc1cccccccccccc'\n>>> index.getname(12)\n13\n```\n\nif the smiles file has no header\n\n```\n>>> from descriptastorus import molfileindex\n>>> index = molfileindex.makesmilesindex(\"data/test2.smi\", \"test2\", hasheader=false,\n...                                      smilescolumn=1, namecolumn=0)\n>>> index.n\n13\n>>> index.getmol(12)\n'c1ccccc1cccccccccccc'\n>>> index.getname(12)\n13\n```\n\nuse a molfileindex\n==================\n\nusing a molfile index is fairly simple:\n\n```\n>>> from descriptastorus import molfileindex\n>>> idx = molfileindex(\"/db/cix/descriptastorus/test\")\n>>> idx.get(1000)\n['cc(c)(o)c1ccc(nc1)c4ccc3c=cn(cc2ccc(f)cc2)c3c4', 'xx-aaaa']\n>>> idx.getname(1000)\n'xx-aaaa'\n>>> idx.getmol(1000)\ncc(c)(o)c1ccc(nc1)c4ccc3c=cn(cc2ccc(f)cc2)c3c4'\n```\n\ninstallation\n============\n\n```\n  git clone https://bitbucket.org/novartisnibr/rdkit-descriptastorus.git\n  cd rdkit-descriptastorus\n  python setup.py install\n```\n\n\ntodo:\n\n  * fast forwards iteration (fast now, but could be faster)\n  * faster append-only store creation\n  * fast molecule indexing/lookup (almost done)\n  * output to bcolz pandas backend\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "descriptastorus",
  "package_url": "https://pypi.org/project/descriptastorus/",
  "project_url": "https://pypi.org/project/descriptastorus/",
  "project_urls": {
    "Bug Tracker": "https://github.com/bp-kelley/descriptastorus/issues",
    "Homepage": "https://github.com/bp-kelley/descriptastorus"
  },
  "release_url": "https://pypi.org/project/descriptastorus/2.6.1/",
  "requires_dist": [
    "pandas-flavor",
    "rdkit",
    "scipy",
    "numpy"
  ],
  "requires_python": ">=3.6",
  "summary": "descriptor creation, storage and molecular file indexing",
  "version": "2.6.1",
  "releases": [],
  "developers": [
    "bkelley@relayex.com",
    "brian_kelley"
  ],
  "kwds": "descriptorgenerator rdkit_2d_normalized_features rdkit2d descriptors rdkit2d_calculated",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_descriptastorus",
  "homepage": "https://github/bp-kelley/descriptastorus",
  "release_count": 3,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_pandas_flavor",
    "pypi_rdkit",
    "pypi_scipy"
  ]
}
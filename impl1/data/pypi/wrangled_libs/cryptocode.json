{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# cryptocode\n\npython library used to encrypt and decrypt strings in the simplest possible way, while also being incredibly secure.\n## requirements\n\n\n- **python** 3 or later.\n\n## installation\n\ninstall some python utilities along with some libraries and other stuff:\n\n~~~\npip install cryptocode\n~~~\n\n## basic usage\nencrypting a message:\n\n~~~\n>>> import cryptocode\n>>> myencryptedmessage = cryptocode.encrypt(\"i like trains\", \"password123\")\n>>> print(myencryptedmessage)\nm+wykmlub0z7fhedma==*pvabxrnx0sisdhhxlskz5w==*ihqm/fdkgrx3g+yoityauq==*qfndmuup1ysgo01/p2mnpg==\n~~~\n\nthe first parameter is the string you want to encrypt. the second parameter is the password, which will be used for decrypting the string.\n\ndecrypting a message\"\n~~~\n>>> import cryptocode\n>>> mydecryptedmessage = cryptocode.decrypt(\"m+wykmlub0z7fhedma==*pvabxrnx0sisdhhxlskz5w==*ihqm/fdkgrx3g+yoityauq==*qfndmuup1ysgo01/p2mnpg==\", \"password123\")\n>>> print(mydecryptedmessage)\ni like trains\n~~~\nthe first parameter is the encrypted string and the second parameter is the password. if the password is incorrect, decrypt function will return `false`.\n\n## example\nhere, we will be creating a simple \"trial product key\". this is useful if you have software that you would like people to use temporarily.\nin this example, we will be letting the user use the product for 2 hours. the password we will be using is ``cryptocode is amazing``.\n\ncode on the server side:\n~~~\nimport cryptocode\nimport time\nhours = 2\nmessagetoencrypt = str(time.time() + hours * 60 * 60)\n## hours * 60 * 60 is necessary because we need to turn the hours into seconds, since the timestamp is in seconds.\ncryptocode.encrypt(messagetoencrypt, \"cryptocode is amazing\")\n~~~\n\ncode on the client side:\n~~~\nimport cryptocode\nimport time\nimport sys\n#function to verify that the key is valid:\ndef check_valid(key):\n    message = cryptocode.decrypt(key, 'cryptocode is amazing')\n    if message == false:\n        #the key is incorrect!\n        return false\n    if float(message) >= time.time():\n        return true\n    else:\n        #the key has expired!\n        return false\nuserkeyinput = input(\"please enter your product key.\")\nkeychecked = check_valid(userkeyinput)\nif keychecked == true:\n    print(\"you are good to go!\")\nif keychecked == false:\n    print(\"you have either entered an invalid key or your time has expired. sorry!\")\n    sys.exit()\n~~~\n\n\n",
  "docs_url": null,
  "keywords": "cryptocode,key,crypto,encodestring",
  "license": "mit",
  "name": "cryptocode",
  "package_url": "https://pypi.org/project/cryptocode/",
  "project_url": "https://pypi.org/project/cryptocode/",
  "project_urls": {
    "Homepage": "https://github.com/gdavid7/cryptocode"
  },
  "release_url": "https://pypi.org/project/cryptocode/0.1/",
  "requires_dist": [
    "pycryptodomex"
  ],
  "requires_python": "",
  "summary": "python library used to encrypt and decrypt strings in the simplest possible way.",
  "version": "0.1",
  "releases": [],
  "developers": [
    "gdavid7"
  ],
  "kwds": "cryptocode encrypting encrypt decrypting messagetoencrypt",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cryptocode",
  "homepage": "https://github.com/gdavid7/cryptocode",
  "release_count": 1,
  "dependency_ids": [
    "pypi_pycryptodomex"
  ]
}
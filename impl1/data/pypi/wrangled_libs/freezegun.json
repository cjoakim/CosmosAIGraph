{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "freezegun: let your python tests travel through time\n====================================================\n\n.. image:: https://img.shields.io/pypi/v/freezegun.svg\n   :target: https://pypi.python.org/pypi/freezegun/\n.. image:: https://github.com/spulec/freezegun/workflows/ci/badge.svg\n   :target: https://github.com/spulec/freezegun/actions\n.. image:: https://coveralls.io/repos/spulec/freezegun/badge.svg?branch=master\n   :target: https://coveralls.io/r/spulec/freezegun\n\nfreezegun is a library that allows your python tests to travel through time by mocking the datetime module.\n\nusage\n-----\n\nonce the decorator or context manager have been invoked, all calls to datetime.datetime.now(), datetime.datetime.utcnow(), datetime.date.today(), time.time(), time.localtime(), time.gmtime(), and time.strftime() will return the time that has been frozen. time.monotonic() and time.perf_counter() will also be frozen, but as usual it makes no guarantees about their absolute value, only their changes over time.\n\ndecorator\n~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n    import datetime\n    import unittest\n\n    # freeze time for a pytest style test:\n\n    @freeze_time(\"2012-01-14\")\n    def test():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    # or a unittest testcase - freezes for every test, and set up and tear down code\n\n    @freeze_time(\"1955-11-12\")\n    class mytests(unittest.testcase):\n        def test_the_class(self):\n            assert datetime.datetime.now() == datetime.datetime(1955, 11, 12)\n\n    # or any other class - freezes around each callable (may not work in every case)\n\n    @freeze_time(\"2012-01-14\")\n    class tester(object):\n        def test_the_class(self):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    # or method decorator, might also pass frozen time object as kwarg\n\n    class testunittestmethoddecorator(unittest.testcase):\n        @freeze_time('2013-04-09')\n        def test_method_decorator_works_on_unittest(self):\n            self.assertequal(datetime.date(2013, 4, 9), datetime.date.today())\n\n        @freeze_time('2013-04-09', as_kwarg='frozen_time')\n        def test_method_decorator_works_on_unittest(self, frozen_time):\n            self.assertequal(datetime.date(2013, 4, 9), datetime.date.today())\n            self.assertequal(datetime.date(2013, 4, 9), frozen_time.time_to_freeze.today())\n\n        @freeze_time('2013-04-09', as_kwarg='hello')\n        def test_method_decorator_works_on_unittest(self, **kwargs):\n            self.assertequal(datetime.date(2013, 4, 9), datetime.date.today())\n            self.assertequal(datetime.date(2013, 4, 9), kwargs.get('hello').time_to_freeze.today())\n\ncontext manager\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    def test():\n        assert datetime.datetime.now() != datetime.datetime(2012, 1, 14)\n        with freeze_time(\"2012-01-14\"):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n        assert datetime.datetime.now() != datetime.datetime(2012, 1, 14)\n\nraw use\n~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    freezer = freeze_time(\"2012-01-14 12:00:01\")\n    freezer.start()\n    assert datetime.datetime.now() == datetime.datetime(2012, 1, 14, 12, 0, 1)\n    freezer.stop()\n\ntimezones\n~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    @freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\n    def test():\n        assert datetime.datetime.utcnow() == datetime.datetime(2012, 1, 14, 3, 21, 34)\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 13, 23, 21, 34)\n\n        # datetime.date.today() uses local time\n        assert datetime.date.today() == datetime.date(2012, 1, 13)\n\n    @freeze_time(\"2012-01-14 03:21:34\", tz_offset=-datetime.timedelta(hours=3, minutes=30))\n    def test_timedelta_offset():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 13, 23, 51, 34)\n\nnice inputs\n~~~~~~~~~~~\n\nfreezegun uses dateutil behind the scenes so you can have nice-looking datetimes.\n\n.. code-block:: python\n\n    @freeze_time(\"jan 14th, 2012\")\n    def test_nice_datetime():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\nfunction and generator objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfreezegun is able to handle function and generator objects.\n\n.. code-block:: python\n\n    def test_lambda():\n        with freeze_time(lambda: datetime.datetime(2012, 1, 14)):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    def test_generator():\n        datetimes = (datetime.datetime(year, 1, 1) for year in range(2010, 2012))\n\n        with freeze_time(datetimes):\n            assert datetime.datetime.now() == datetime.datetime(2010, 1, 1)\n\n        with freeze_time(datetimes):\n            assert datetime.datetime.now() == datetime.datetime(2011, 1, 1)\n\n        # the next call to freeze_time(datetimes) would raise a stopiteration exception.\n\n``tick`` argument\n~~~~~~~~~~~~~~~~~\n\nfreezegun has an additional ``tick`` argument which will restart time at the given\nvalue, but then time will keep ticking. this is an alternative to the default\nparameters which will keep time stopped.\n\n.. code-block:: python\n\n    @freeze_time(\"jan 14th, 2020\", tick=true)\n    def test_nice_datetime():\n        assert datetime.datetime.now() > datetime.datetime(2020, 1, 14)\n\n``auto_tick_seconds`` argument\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfreezegun has an additional ``auto_tick_seconds`` argument which will autoincrement the\nvalue every time by the given amount from the start value. this is an alternative to the default\nparameters which will keep time stopped. note that given ``auto_tick_seconds`` the ``tick`` parameter will be ignored.\n\n.. code-block:: python\n\n    @freeze_time(\"jan 14th, 2020\", auto_tick_seconds=15)\n    def test_nice_datetime():\n        first_time = datetime.datetime.now()\n        auto_incremented_time = datetime.datetime.now()\n        assert first_time + datetime.timedelta(seconds=15) == auto_incremented_time\n\n\nmanual ticks\n~~~~~~~~~~~~\n\nfreezegun allows for the time to be manually forwarded as well.\n\n.. code-block:: python\n\n    def test_manual_tick():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.tick()\n            initial_datetime += datetime.timedelta(seconds=1)\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.tick(delta=datetime.timedelta(seconds=10))\n            initial_datetime += datetime.timedelta(seconds=10)\n            assert frozen_datetime() == initial_datetime\n\n.. code-block:: python\n\n    def test_monotonic_manual_tick():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            monotonic_t0 = time.monotonic()\n            frozen_datetime.tick(1.0)\n            monotonic_t1 = time.monotonic()\n            assert monotonic_t1 == monotonic_t0 + 1.0\n\n\nmoving time to specify datetime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfreezegun allows moving time to specific dates.\n\n.. code-block:: python\n\n    def test_move_to():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n\n        other_datetime = datetime.datetime(year=2, month=8, day=13,\n                                            hour=14, minute=5, second=0)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.move_to(other_datetime)\n            assert frozen_datetime() == other_datetime\n\n            frozen_datetime.move_to(initial_datetime)\n            assert frozen_datetime() == initial_datetime\n\n\n    @freeze_time(\"2012-01-14\", as_arg=true)\n    def test(frozen_time):\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n        frozen_time.move_to(\"2014-02-12\")\n        assert datetime.datetime.now() == datetime.datetime(2014, 2, 12)\n\nparameter for ``move_to`` can be any valid ``freeze_time`` date (string, date, datetime).\n\n\ndefault arguments\n~~~~~~~~~~~~~~~~~\n\nnote that freezegun will not modify default arguments. the following code will\nprint the current date. see `here <http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments>`_ for why.\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n    import datetime as dt\n\n    def test(default=dt.date.today()):\n        print(default)\n\n    with freeze_time('2000-1-1'):\n        test()\n\n\ninstallation\n------------\n\nto install freezegun, simply:\n\n.. code-block:: bash\n\n    $ pip install freezegun\n\non debian systems:\n\n.. code-block:: bash\n\n    $ sudo apt-get install python-freezegun\n\n\nignore packages\n---------------\n\nsometimes it's desired to ignore freezegun behaviour for particular packages (i.e. libraries).\nit's possible to ignore them for a single invocation:\n\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    with freeze_time('2020-10-06', ignore=['threading']):\n        # ...\n\n\nby default freezegun ignores following packages:\n\n.. code-block:: python\n\n    [\n        'nose.plugins',\n        'six.moves',\n        'django.utils.six.moves',\n        'google.gax',\n        'threading',\n        'queue',\n        'selenium',\n        '_pytest.terminal.',\n        '_pytest.runner.',\n        'gi',\n    ]\n\n\nit's possible to set your own default ignore list:\n\n.. code-block:: python\n\n    import freezegun\n\n    freezegun.configure(default_ignore_list=['threading', 'tensorflow'])\n\n\nplease note this will override default ignore list. if you want to extend existing defaults\nplease use:\n\n.. code-block:: python\n\n    import freezegun\n\n    freezegun.configure(extend_ignore_list=['tensorflow'])\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "freezegun",
  "package_url": "https://pypi.org/project/freezegun/",
  "project_url": "https://pypi.org/project/freezegun/",
  "project_urls": {
    "Bug Tracker": "https://github.com/spulec/freezegun/issues",
    "Changes": "https://github.com/spulec/freezegun/blob/master/CHANGELOG",
    "Documentation": "https://github.com/spulec/freezegun/blob/master/README.rst",
    "Homepage": "https://github.com/spulec/freezegun",
    "Source Code": "https://github.com/spulec/freezegun"
  },
  "release_url": "https://pypi.org/project/freezegun/1.4.0/",
  "requires_dist": [
    "python-dateutil >=2.7"
  ],
  "requires_python": ">=3.7",
  "summary": "let your python tests travel through time",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "spulec@gmail.com",
    "steve_pulec"
  ],
  "kwds": "frozen_datetime frozen_time freeze_time time_to_freeze freezegun",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_freezegun",
  "homepage": "https://github.com/spulec/freezegun",
  "release_count": 62,
  "dependency_ids": [
    "pypi_python_dateutil"
  ]
}
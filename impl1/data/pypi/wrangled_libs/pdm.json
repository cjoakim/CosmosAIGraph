{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools"
  ],
  "description": "<div align=\"center\">\n\n# pdm\n\na modern python package and dependency manager supporting the latest pep standards.\n[\u4e2d\u6587\u7248\u672c\u8bf4\u660e](readme_zh.md)\n\n![pdm logo](https://raw.githubusercontent.com/pdm-project/pdm/main/docs/docs/assets/logo_big.png)\n\n[![docs](https://img.shields.io/badge/docs-mkdocs-blue?style=for-the-badge)](https://pdm-project.org)\n[![twitter follow](https://img.shields.io/twitter/follow/pdm_project?label=get%20updates&logo=twitter&style=for-the-badge)](https://twitter.com/pdm_project)\n[![discord](https://img.shields.io/discord/824472774965329931?label=discord&logo=discord&style=for-the-badge)](https://discord.gg/phn8smztpv)\n\n![github actions](https://github.com/pdm-project/pdm/workflows/tests/badge.svg)\n[![pypi](https://img.shields.io/pypi/v/pdm?logo=python&logocolor=%23cccccc)](https://pypi.org/project/pdm)\n[![codecov](https://codecov.io/gh/pdm-project/pdm/branch/main/graph/badge.svg?token=erztqul5n0)](https://codecov.io/gh/pdm-project/pdm)\n[![packaging status](https://repology.org/badge/tiny-repos/pdm.svg)](https://repology.org/project/pdm/versions)\n[![downloads](https://pepy.tech/badge/pdm/week)](https://pepy.tech/project/pdm)\n[![pdm-managed](https://img.shields.io/badge/pdm-managed-blueviolet)](https://pdm-project.org)\n<a href=\"https://trackgit.com\">\n<img src=\"https://us-central1-trackgit-analytics.cloudfunctions.net/token/ping/l4eztudjnh9bfay668fl\" alt=\"trackgit-views\" />\n</a>\n\n[![asciicast](https://asciinema.org/a/jnifn30pjfxbo9we2kqodxehb.svg)](https://asciinema.org/a/jnifn30pjfxbo9we2kqodxehb)\n\n</div>\n\n## what is pdm?\n\npdm is meant to be a next generation python package management tool.\nit was originally built for personal use. if you feel you are going well\nwith `pipenv` or `poetry` and don't want to introduce another package manager,\njust stick to it. but if you are missing something that is not present in those tools,\nyou can probably find some goodness in `pdm`.\n\n## highlights of features\n\n- simple and fast dependency resolver, mainly for large binary distributions.\n- a [pep 517] build backend.\n- [pep 621] project metadata.\n- flexible and powerful plug-in system.\n- versatile user scripts.\n- opt-in centralized installation cache like [pnpm](https://pnpm.io/motivation#saving-disk-space-and-boosting-installation-speed).\n\n[pep 517]: https://www.python.org/dev/peps/pep-0517\n[pep 621]: https://www.python.org/dev/peps/pep-0621\n[pnpm]: https://pnpm.io/motivation#saving-disk-space-and-boosting-installation-speed\n\n## comparisons to other alternatives\n\n### [pipenv](https://pipenv.pypa.io)\n\npipenv is a dependency manager that combines `pip` and `venv`, as the name implies.\nit can install packages from a non-standard `pipfile.lock` or `pipfile`.\nhowever, pipenv does not handle any packages related to packaging your code,\nso it\u2019s useful only for developing non-installable applications (django sites, for example).\nif you\u2019re a library developer, you need `setuptools` anyway.\n\n### [poetry](https://python-poetry.org)\n\npoetry manages environments and dependencies in a similar way to pipenv,\nbut it can also build .whl files with your code, and it can upload wheels and source distributions to pypi.\nit has a pretty user interface and users can customize it via a plugin. poetry uses the `pyproject.toml` standard,\nbut it does not follow the standard specifying how metadata should be represented in a pyproject.toml file ([pep 621]),\ninstead using a custom `[tool.poetry]` table. this is partly because poetry came out before pep 621.\n\n### [hatch](https://hatch.pypa.io)\n\nhatch can also manage environments, allowing multiple environments per project. by default it has a central location for all environments but it can be configured to put a project's environment(s) in the project root directory. it can manage packages but without lockfile support. it can also be used to package a project (with pep 621 compliant pyproject.toml files) and upload it to pypi.\n\n### this project\n\npdm can manage virtual environments (venvs) in both project and centralized locations, similar to pipenv. it reads project metadata from a standardized `pyproject.toml` file and supports lockfiles. users can add additional functionality through plugins, which can be shared by uploading them as distributions.\n\nunlike poetry and hatch, pdm is not limited to a specific build backend; users have the freedom to choose any build backend they prefer.\n\n## installation\n\npdm requires python version 3.8 or higher.\n\n### via install script\n\nlike pip, pdm provides an installation script that will install pdm into an isolated environment.\n\n**for linux/mac**\n\n```bash\ncurl -ssl https://pdm-project.org/install-pdm.py | python3 -\n```\n\n**for windows**\n\n```powershell\n(invoke-webrequest -uri https://pdm-project.org/install-pdm.py -usebasicparsing).content | python -\n```\n\nfor security reasons, you should verify the checksum of `install-pdm.py`.\nit can be downloaded from [install-pdm.py.sha256](https://pdm-project.org/install-pdm.py.sha256).\n\nthe installer will install pdm into the user site and the location depends on the system:\n\n- `$home/.local/bin` for unix\n- `%appdata%\\python\\scripts` on windows\n\nyou can pass additional options to the script to control how pdm is installed:\n\n```\nusage: install-pdm.py [-h] [-v version] [--prerelease] [--remove] [-p path] [-d dep]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v version, --version version | envvar: pdm_version\n                        specify the version to be installed, or head to install from the main branch\n  --prerelease | envvar: pdm_prerelease    allow prereleases to be installed\n  --remove | envvar: pdm_remove            remove the pdm installation\n  -p path, --path path | envvar: pdm_home  specify the location to install pdm\n  -d dep, --dep dep | envvar: pdm_deps     specify additional dependencies, can be given multiple times\n```\n\nyou can either pass the options after the script or set the env var value.\n\n### alternative installation methods\n\nif you are on macos and using `homebrew`, install it by:\n\n```bash\nbrew install pdm\n```\n\nif you are on windows and using [scoop](https://scoop.sh/), install it by:\n\n```\nscoop bucket add frostming https://github.com/frostming/scoop-frostming.git\nscoop install pdm\n```\n\notherwise, it is recommended to install `pdm` in an isolated environment with `pipx`:\n\n```bash\npipx install pdm\n```\n\nor you can install it under a user site:\n\n```bash\npip install --user pdm\n```\n\nwith [asdf-vm](https://asdf-vm.com/)\n\n```bash\nasdf plugin add pdm\nasdf install pdm latest\n```\n\n## quickstart\n\n**initialize a new pdm project**\n\n```bash\npdm init\n```\n\nanswer the questions following the guide, and a pdm project with a `pyproject.toml` file will be ready to use.\n\n**install dependencies**\n\n```bash\npdm add requests flask\n```\n\nyou can add multiple dependencies in the same command. after a while, check the `pdm.lock` file to see what is locked for each package.\n\n## badges\n\ntell people you are using pdm in your project by including the markdown code in readme.md:\n\n```markdown\n[![pdm-managed](https://img.shields.io/badge/pdm-managed-blueviolet)](https://pdm-project.org)\n```\n\n[![pdm-managed](https://img.shields.io/badge/pdm-managed-blueviolet)](https://pdm-project.org)\n\n\n## packaging status\n\n[![packaging status](https://repology.org/badge/vertical-allrepos/pdm.svg)](https://repology.org/project/pdm/versions)\n\n## pdm eco-system\n\n[awesome pdm](https://github.com/pdm-project/awesome-pdm) is a curated list of awesome pdm plugins and resources.\n\n## sponsors\n\n<p align=\"center\">\n    <a href=\"https://cdn.jsdelivr.net/gh/pdm-project/sponsors/sponsors.svg\">\n        <img src=\"https://cdn.jsdelivr.net/gh/pdm-project/sponsors/sponsors.svg\"/>\n    </a>\n</p>\n\n## credits\n\nthis project is strongly inspired by [pyflow] and [poetry].\n\n[pyflow]: https://github.com/david-oconnor/pyflow\n[poetry]: https://github.com/python-poetry/poetry\n\n## license\n\nthis project is open sourced under mit license, see the [license](license) file for more details.\n",
  "docs_url": null,
  "keywords": "packaging dependency workflow",
  "license": "mit",
  "name": "pdm",
  "package_url": "https://pypi.org/project/pdm/",
  "project_url": "https://pypi.org/project/pdm/",
  "project_urls": {
    "Changelog": "https://pdm-project.org/latest/dev/changelog/",
    "Documentation": "https://pdm-project.org",
    "Homepage": "https://pdm-project.org",
    "Repository": "https://github.com/pdm-project/pdm"
  },
  "release_url": "https://pypi.org/project/pdm/2.11.1/",
  "requires_dist": [
    "blinker",
    "certifi",
    "packaging!=22.0,>=20.9",
    "platformdirs",
    "rich>=12.3.0",
    "virtualenv>=20",
    "pyproject-hooks",
    "requests-toolbelt",
    "unearth>=0.12.1",
    "dep-logic<1.0,>=0.0.2",
    "findpython<1.0.0a0,>=0.4.0",
    "tomlkit<1,>=0.11.1",
    "shellingham>=1.3.2",
    "python-dotenv>=0.15",
    "resolvelib>=1.0.1",
    "installer<0.8,>=0.7",
    "cachecontrol[filecache]>=0.13.0",
    "truststore; python_version >= \"3.10\"",
    "tomli>=1.1.0; python_version < \"3.11\"",
    "importlib-resources>=5; python_version < \"3.9\"",
    "importlib-metadata>=3.6; python_version < \"3.10\"",
    "pytest; extra == \"pytest\"",
    "pytest-mock; extra == \"pytest\"",
    "copier>=8.0.0; extra == \"copier\"",
    "cookiecutter; extra == \"cookiecutter\"",
    "keyring; extra == \"keyring\"",
    "pdm[cookiecutter,copier]; extra == \"template\"",
    "pdm[keyring,template]; extra == \"all\""
  ],
  "requires_python": ">=3.8",
  "summary": "a modern python package and dependency manager supporting the latest pep standards",
  "version": "2.11.1",
  "releases": [],
  "developers": [
    "mianghong@gmail.com"
  ],
  "kwds": "pdm pdm_project pdm_version pdm_prerelease pdm_deps",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pdm",
  "homepage": "",
  "release_count": 183,
  "dependency_ids": [
    "pypi_blinker",
    "pypi_cachecontrol",
    "pypi_certifi",
    "pypi_cookiecutter",
    "pypi_copier",
    "pypi_dep_logic",
    "pypi_findpython",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_installer",
    "pypi_keyring",
    "pypi_packaging!",
    "pypi_pdm",
    "pypi_platformdirs",
    "pypi_pyproject_hooks",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_python_dotenv",
    "pypi_requests_toolbelt",
    "pypi_resolvelib",
    "pypi_rich",
    "pypi_shellingham",
    "pypi_tomli",
    "pypi_tomlkit",
    "pypi_truststore",
    "pypi_unearth",
    "pypi_virtualenv"
  ]
}
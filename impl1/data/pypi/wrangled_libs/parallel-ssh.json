{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix :: bsd",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: networking"
  ],
  "description": "============\nparallel-ssh\n============\n\nasynchronous parallel ssh client library.\n\nrun ssh commands over many - hundreds/hundreds of thousands - number of servers asynchronously and with minimal system load on the client host.\n\nnative code based clients with extremely high performance, making use of c libraries.\n\n.. image:: https://img.shields.io/badge/license-lgpl%20v2.1-blue.svg\n  :target: https://pypi.python.org/pypi/parallel-ssh\n  :alt: license\n.. image:: https://img.shields.io/pypi/v/parallel-ssh.svg\n  :target: https://pypi.python.org/pypi/parallel-ssh\n  :alt: latest version\n.. image:: https://circleci.com/gh/parallelssh/parallel-ssh/tree/master.svg?style=svg\n  :target: https://circleci.com/gh/parallelssh/parallel-ssh\n.. image:: https://codecov.io/gh/parallelssh/parallel-ssh/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/parallelssh/parallel-ssh\n.. image:: https://img.shields.io/pypi/wheel/parallel-ssh.svg\n  :target: https://pypi.python.org/pypi/parallel-ssh\n.. image:: https://readthedocs.org/projects/parallel-ssh/badge/?version=latest\n  :target: https://parallel-ssh.readthedocs.org/en/latest/\n  :alt: latest documentation\n\n.. _`read the docs`: https://parallel-ssh.readthedocs.org/en/latest/\n\n************\ninstallation\n************\n\n.. code-block:: shell\n\n   pip install parallel-ssh\n\n\nan update to `pip` may be needed to be able to install binary wheels.\n\n.. code-block:: shell\n\n   pip install -u pip\n   pip install parallel-ssh\n\n\n*************\nusage example\n*************\n\nsee documentation on `read the docs`_ for more complete examples.\n\nrun ``uname`` on two hosts in parallel.\n\n.. code-block:: python\n\n  from pssh.clients import parallelsshclient\n\n  hosts = ['localhost', 'localhost']\n  client = parallelsshclient(hosts)\n\n  output = client.run_command('uname')\n  for host_output in output:\n      for line in host_output.stdout:\n          print(line)\n      exit_code = host_output.exit_code\n\n:output:\n\n   .. code-block:: shell\n\n      linux\n      linux\n\n\nsingle host client\n*******************\n\nsingle host client with similar api can be used if parallel functionality is not needed.\n\n.. code-block:: python\n\n   from pssh.clients import sshclient\n\n   host = 'localhost'\n   cmd = 'uname'\n   client = sshclient(host)\n\n   host_out = client.run_command(cmd)\n   for line in host_out.stdout:\n       print(line)\n   exit_code = host_out.exit_code\n\n\n.. contents::\n\n\n************************\nquestions and discussion\n************************\n\n`github discussions <https://github.com/parallelssh/parallel-ssh/discussions>`_ can be used to discuss, ask questions and share ideas regarding the use of parallel-ssh.\n\n\n**************\nnative clients\n**************\n\nthe default client in ``parallel-ssh`` is a native client based on ``ssh2-python`` - ``libssh2`` c library - which offers much greater performance and reduced overhead compared to other python ssh libraries.\n\nsee `this post <https://parallel-ssh.org/post/parallel-ssh-libssh2>`_ for a performance comparison of different python ssh libraries.\n\nalternative clients based on ``ssh-python`` (``libssh``) are also available under ``pssh.clients.ssh``. see `client documentation <https://parallel-ssh.readthedocs.io/en/latest/clients.html>`_ for a feature comparison of the available clients in the library.\n\n``parallel-ssh`` makes use of clients and an event loop solely based on c libraries providing native code levels of performance and stability with an easy to use python api.\n\n\nnative code client features\n****************************\n\n* highest performance and least overhead of any python ssh library\n* thread safe - makes use of native threads for cpu bound calls like authentication\n* natively asynchronous utilising c libraries implementing the ssh protocol\n* significantly reduced overhead in cpu and memory usage\n\n\n****************\nwhy this library\n****************\n\nbecause other options are either immature, unstable, lacking in performance or all of the aforementioned.\n\ncertain other self-proclaimed *leading* python ssh libraries leave a lot to be desired from a performance and stability point of view, as well as suffering from a lack of maintenance with hundreds of open issues, unresolved pull requests and inherent design flaws.\n\nthe ssh libraries ``parallel-ssh`` uses are, on the other hand, long standing mature c libraries in `libssh2 <https://libssh2.org>`_ and `libssh <https://libssh.org>`_ that have been in production use for decades and are part of some of the most widely distributed software available today - `git` itself, `openssh`, `curl` and many others.\n\nthese low level libraries are far better placed to provide the maturity, stability and performance needed from an ssh client for production use.\n\n``parallel-ssh`` provides easy to use ssh clients that hide the complexity, while offering stability and native code levels of performance and as well as the ability to scale to hundreds or more concurrent hosts.\n\nsee `alternatives <https://parallel-ssh.readthedocs.io/en/latest/alternatives.html>`_ for a more complete comparison of alternative ssh libraries, as well as `performance comparisons <https://parallel-ssh.org/post/parallel-ssh-libssh2>`_ mentioned previously.\n\n\n*************************************\nwaiting for completion and exit codes\n*************************************\n\nthe client's ``join`` function can be used to wait for all commands in output to finish.\n\nafter ``join`` returns, commands have finished and all output can be read without blocking.\n\nonce *either* standard output is iterated on *to completion*, or ``client.join()`` is called, exit codes become available in host output.\n\niteration ends *only when remote command has completed*, though it may be interrupted and resumed at any point - see `join and output timeouts <https://parallel-ssh.readthedocs.io/en/latest/advanced.html#join-and-output-timeouts>`_ documentation.\n\n``hostoutput.exit_code`` is a dynamic property and will return ``none`` when exit code is not ready, meaning command has not finished, or unavailable due to error.\n\nonce all output has been gathered exit codes become available even without calling ``join`` as per previous examples.\n\n.. code-block:: python\n\n  output = client.run_command('uname')\n\n  client.join()\n\n  for host_out in output:\n      for line in host_out.stdout:\n          print(line)\n      print(host_out.exit_code)\n\n:output:\n   .. code-block:: python\n\n      linux\n      0\n      linux\n      0\n\n\nsimilarly, exit codes are available after ``client.join()`` without reading output.\n\n\n.. code-block:: python\n\n  output = client.run_command('uname')\n\n  client.join()\n\n  for host_output in output:\n      print(host_out.exit_code)\n\n:output:\n   .. code-block:: python\n\n      0\n      0\n\n\n***************************\nbuilt in host output logger\n***************************\n\nthere is also a built in host logger that can be enabled to log output from remote hosts for both stdout and stderr. the helper function ``pssh.utils.enable_host_logger`` will enable host logging to stdout.\n\nto log output without having to iterate over output generators, the ``consume_output`` flag *must* be enabled - for example:\n\n.. code-block:: python\n\n  from pssh.utils import enable_host_logger\n\n  enable_host_logger()\n  client.run_command('uname')\n  client.join(consume_output=true)\n\n:output:\n   .. code-block:: shell\n\n      [localhost]\tlinux\n\n\n****\nscp\n****\n\nscp is supported - native client only - and provides the best performance for file copying.\n\nunlike with the sftp functionality, remote files that already exist are *not* overwritten and an exception is raised instead.\n\nnote that enabling recursion with scp requires server sftp support for creating remote directories.\n\nto copy a local file to remote hosts in parallel with scp:\n\n.. code-block:: python\n\n  from pssh.clients import parallelsshclient\n  from gevent import joinall\n\n  hosts = ['myhost1', 'myhost2']\n  client = parallelsshclient(hosts)\n  cmds = client.scp_send('../test', 'test_dir/test')\n  joinall(cmds, raise_error=true)\n\nsee `sftp and scp documentation <https://parallel-ssh.readthedocs.io/en/latest/advanced.html#sftp-scp>`_ for more examples.\n\n\n*****\nsftp\n*****\n\nsftp is supported in the native client.\n\nto copy a local file to remote hosts in parallel:\n\n.. code-block:: python\n\n  from pssh.clients import parallelsshclient\n  from pssh.utils import enable_logger, logger\n  from gevent import joinall\n\n  enable_logger(logger)\n  hosts = ['myhost1', 'myhost2']\n  client = parallelsshclient(hosts)\n  cmds = client.copy_file('../test', 'test_dir/test')\n  joinall(cmds, raise_error=true)\n\n\n:output:\n   .. code-block:: python\n\n      copied local file ../test to remote destination myhost1:test_dir/test\n      copied local file ../test to remote destination myhost2:test_dir/test\n\nthere is similar capability to copy remote files to local ones with configurable file names via the `copy_remote_file <https://parallel-ssh.readthedocs.io/en/latest/base_parallel.html#pssh.clients.base.parallel.baseparallelsshclient.copy_remote_file>`_ function.\n\nin addition, per-host configurable file name functionality is provided for both sftp and scp  - see `documentation <https://parallel-ssh.readthedocs.io/en/latest/advanced.html#copy-args>`_.\n\ndirectory recursion is supported in both cases via the ``recurse`` parameter - defaults to off.\n\nsee `sftp and scp documentation <https://parallel-ssh.readthedocs.io/en/latest/advanced.html#sftp-scp>`_ for more examples.\n\n\n.. image:: https://ga-beacon.appspot.com/ua-9132694-7/parallel-ssh/readme.rst?pixel\n  :target: https://github.com/igrigorik/ga-beacon\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "lgplv2.1",
  "name": "parallel-ssh",
  "package_url": "https://pypi.org/project/parallel-ssh/",
  "project_url": "https://pypi.org/project/parallel-ssh/",
  "project_urls": {
    "Homepage": "https://github.com/ParallelSSH/parallel-ssh"
  },
  "release_url": "https://pypi.org/project/parallel-ssh/2.12.0/",
  "requires_dist": [
    "gevent (>=1.3.0)",
    "ssh2-python",
    "ssh-python"
  ],
  "requires_python": "",
  "summary": "asynchronous parallel ssh library",
  "version": "2.12.0",
  "releases": [],
  "developers": [
    "panos_kittenis",
    "zuboci@yandex.com"
  ],
  "kwds": "ssh2 openssh ssh parallelsshclient parallel",
  "license_kwds": "lgplv2.1",
  "libtype": "pypi",
  "id": "pypi_parallel_ssh",
  "homepage": "https://github.com/parallelssh/parallel-ssh",
  "release_count": 95,
  "dependency_ids": [
    "pypi_gevent",
    "pypi_ssh_python",
    "pypi_ssh2_python"
  ]
}
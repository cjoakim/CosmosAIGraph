{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "this package contains several methods for calculating conditional average treatment effects\n[![build status](https://github.com/py-why/econml/actions/workflows/ci.yml/badge.svg)](https://github.com/py-why/econml/actions/workflows/ci.yml)\n[![pypi version](https://img.shields.io/pypi/v/econml.svg)](https://pypi.org/project/econml/)\n[![pypi wheel](https://img.shields.io/pypi/wheel/econml.svg)](https://pypi.org/project/econml/)\n[![supported python versions](https://img.shields.io/pypi/pyversions/econml.svg)](https://pypi.org/project/econml/)\n\n\n\n<h1><img src=\"doc/econml-logo-icon.png\" width=\"80px\" align=\"left\" style=\"margin-right: 10px;\"> econml: a python package for ml-based heterogeneous treatment effects estimation</h1>\n\n**econml** is a python package for estimating heterogeneous treatment effects from observational data via machine learning. this package was designed and built as part of the [alice project](https://www.microsoft.com/en-us/research/project/alice/) at microsoft research with the goal to combine state-of-the-art machine learning \ntechniques with econometrics to bring automation to complex causal inference problems. the promise of econml:\n\n* implement recent techniques in the literature at the intersection of econometrics and machine learning\n* maintain flexibility in modeling the effect heterogeneity (via techniques such as random forests, boosting, lasso and neural nets), while preserving the causal interpretation of the learned model and often offering valid confidence intervals\n* use a unified api\n* build on standard python packages for machine learning and data analysis\n\none of the biggest promises of machine learning is to automate decision making in a multitude of domains. at the core of many data-driven personalized decision scenarios is the estimation of heterogeneous treatment effects: what is the causal effect of an intervention on an outcome of interest for a sample with a particular set of features? in a nutshell, this toolkit is designed to measure the causal effect of some treatment variable(s) `t` on an outcome \nvariable `y`, controlling for a set of features `x, w` and how does that effect vary as a function of `x`. the methods implemented are applicable even with observational (non-experimental or historical) datasets. for the estimation results to have a causal interpretation, some methods assume no unobserved confounders (i.e. there is no unobserved variable not included in `x, w` that simultaneously has an effect on both `t` and `y`), while others assume access to an instrument `z` (i.e. an observed variable `z` that has an effect on the treatment `t` but no direct effect on the outcome `y`). most methods provide confidence intervals and inference results.\n\nfor detailed information about the package, consult the documentation at https://econml.azurewebsites.net/.\n\nfor information on use cases and background material on causal inference and heterogeneous treatment effects see our webpage at https://www.microsoft.com/en-us/research/project/econml/\n\n<details>\n<summary><strong><em>table of contents</em></strong></summary>\n\n- [news](#news)\n- [getting started](#getting-started)\n  - [installation](#installation)\n  - [usage examples](#usage-examples)\n    - [estimation methods](#estimation-methods)\n    - [interpretability](#interpretability)\n    - [causal model selection and cross-validation](#causal-model-selection-and-cross-validation)\n    - [inference](#inference)\n    - [policy learning](#policy-learning)\n- [for developers](#for-developers)\n  - [running the tests](#running-the-tests)\n  - [generating the documentation](#generating-the-documentation)\n- [blogs and publications](#blogs-and-publications)\n- [citation](#citation)\n- [contributing and feedback](#contributing-and-feedback)\n- [references](#references)\n\n</details>\n\n# news\n\n**may 19, 2023:** release v0.14.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.14.1)\n\n<details><summary>previous releases</summary>\n\n**november 16, 2022:** release v0.14.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.14.0)\n\n**june 17, 2022:** release v0.13.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.13.1)\n\n**january 31, 2022:** release v0.13.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.13.0)\n\n**august 13, 2021:** release v0.12.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0)\n\n**august 5, 2021:** release v0.12.0b6, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b6)\n\n**august 3, 2021:** release v0.12.0b5, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b5)\n\n**july 9, 2021:** release v0.12.0b4, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b4)\n\n**june 25, 2021:** release v0.12.0b3, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b3)\n\n**june 18, 2021:** release v0.12.0b2, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b2)\n\n**june 7, 2021:** release v0.12.0b1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.12.0b1)\n\n**may 18, 2021:** release v0.11.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.11.1)\n\n**may 8, 2021:** release v0.11.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.11.0)\n\n**march 22, 2021:** release v0.10.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.10.0)\n\n**march 11, 2021:** release v0.9.2, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.9.2)\n\n**march 3, 2021:** release v0.9.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.9.1)\n\n**february 20, 2021:** release v0.9.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.9.0)\n\n**january 20, 2021:** release v0.9.0b1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.9.0b1)\n\n**november 20, 2020:** release v0.8.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.8.1)\n\n**november 18, 2020:** release v0.8.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.8.0)\n\n**september 4, 2020:** release v0.8.0b1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.8.0b1)\n\n**march 6, 2020:** release v0.7.0, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.7.0)\n\n**february 18, 2020:** release v0.7.0b1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.7.0b1)\n\n**january 10, 2020:** release v0.6.1, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.6.1)\n\n**december 6, 2019:** release v0.6, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.6)\n\n**november 21, 2019:** release v0.5, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.5). \n\n**june 3, 2019:** release v0.4, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.4). \n\n**may 3, 2019:** release v0.3, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.3).\n\n**april 10, 2019:** release v0.2, see release notes [here](https://github.com/py-why/econml/releases/tag/v0.2).\n\n**march 6, 2019:** release v0.1, welcome to have a try and provide feedback.\n\n</details>\n\n# getting started\n\n## installation\n\ninstall the latest release from [pypi](https://pypi.org/project/econml/):\n```\npip install econml\n```\nto install from source, see [for developers](#for-developers) section below.\n\n## usage examples\n### estimation methods\n\n<details>\n  <summary>double machine learning (aka rlearner) (click to expand)</summary>\n\n  * linear final stage\n\n  ```python\n  from econml.dml import lineardml\n  from sklearn.linear_model import lassocv\n  from econml.inference import bootstrapinference\n\n  est = lineardml(model_y=lassocv(), model_t=lassocv())\n  ### estimate with ols confidence intervals\n  est.fit(y, t, x=x, w=w) # w -> high-dimensional confounders, x -> features\n  treatment_effects = est.effect(x_test)\n  lb, ub = est.effect_interval(x_test, alpha=0.05) # ols confidence intervals\n\n  ### estimate with bootstrap confidence intervals\n  est.fit(y, t, x=x, w=w, inference='bootstrap')  # with default bootstrap parameters\n  est.fit(y, t, x=x, w=w, inference=bootstrapinference(n_bootstrap_samples=100))  # or customized\n  lb, ub = est.effect_interval(x_test, alpha=0.05) # bootstrap confidence intervals\n  ```\n\n  * sparse linear final stage\n\n  ```python\n  from econml.dml import sparselineardml\n  from sklearn.linear_model import lassocv\n\n  est = sparselineardml(model_y=lassocv(), model_t=lassocv())\n  est.fit(y, t, x=x, w=w) # x -> high dimensional features\n  treatment_effects = est.effect(x_test)\n  lb, ub = est.effect_interval(x_test, alpha=0.05) # confidence intervals via debiased lasso\n  ```\n\n  * generic machine learning last stage\n  \n  ```python\n  from econml.dml import nonparamdml\n  from sklearn.ensemble import randomforestregressor, randomforestclassifier\n\n  est = nonparamdml(model_y=randomforestregressor(),\n                    model_t=randomforestclassifier(),\n                    model_final=randomforestregressor(),\n                    discrete_treatment=true)\n  est.fit(y, t, x=x, w=w) \n  treatment_effects = est.effect(x_test)\n  ```\n\n</details>\n\n<details>\n  <summary>dynamic double machine learning (click to expand)</summary>\n\n  ```python\n  from econml.panel.dml import dynamicdml\n  # use defaults\n  est = dynamicdml()\n  # or specify hyperparameters\n  est = dynamicdml(model_y=lassocv(cv=3), \n                   model_t=lassocv(cv=3), \n                   cv=3)\n  est.fit(y, t, x=x, w=none, groups=groups, inference=\"auto\")\n  # effects\n  treatment_effects = est.effect(x_test)\n  # confidence intervals\n  lb, ub = est.effect_interval(x_test, alpha=0.05)\n  ```\n</details>\n\n<details>\n  <summary>causal forests (click to expand)</summary>\n\n  ```python\n  from econml.dml import causalforestdml\n  from sklearn.linear_model import lassocv\n  # use defaults\n  est = causalforestdml()\n  # or specify hyperparameters\n  est = causalforestdml(criterion='het', n_estimators=500,       \n                        min_samples_leaf=10, \n                        max_depth=10, max_samples=0.5,\n                        discrete_treatment=false,\n                        model_t=lassocv(), model_y=lassocv())\n  est.fit(y, t, x=x, w=w)\n  treatment_effects = est.effect(x_test)\n  # confidence intervals via bootstrap-of-little-bags for forests\n  lb, ub = est.effect_interval(x_test, alpha=0.05)\n  ```\n</details>\n\n\n<details>\n  <summary>orthogonal random forests (click to expand)</summary>\n\n  ```python\n  from econml.orf import dmlorthoforest, drorthoforest\n  from econml.sklearn_extensions.linear_model import weightedlasso, weightedlassocv\n  # use defaults\n  est = dmlorthoforest()\n  est = drorthoforest()\n  # or specify hyperparameters\n  est = dmlorthoforest(n_trees=500, min_leaf_size=10,\n                       max_depth=10, subsample_ratio=0.7,\n                       lambda_reg=0.01,\n                       discrete_treatment=false,\n                       model_t=weightedlasso(alpha=0.01), model_y=weightedlasso(alpha=0.01),\n                       model_t_final=weightedlassocv(cv=3), model_y_final=weightedlassocv(cv=3))\n  est.fit(y, t, x=x, w=w)\n  treatment_effects = est.effect(x_test)\n  # confidence intervals via bootstrap-of-little-bags for forests\n  lb, ub = est.effect_interval(x_test, alpha=0.05)\n  ```\n</details>\n\n<details>\n\n<summary>meta-learners (click to expand)</summary>\n  \n  * xlearner\n\n  ```python\n  from econml.metalearners import xlearner\n  from sklearn.ensemble import gradientboostingclassifier, gradientboostingregressor\n\n  est = xlearner(models=gradientboostingregressor(),\n                propensity_model=gradientboostingclassifier(),\n                cate_models=gradientboostingregressor())\n  est.fit(y, t, x=np.hstack([x, w]))\n  treatment_effects = est.effect(np.hstack([x_test, w_test]))\n\n  # fit with bootstrap confidence interval construction enabled\n  est.fit(y, t, x=np.hstack([x, w]), inference='bootstrap')\n  treatment_effects = est.effect(np.hstack([x_test, w_test]))\n  lb, ub = est.effect_interval(np.hstack([x_test, w_test]), alpha=0.05) # bootstrap cis\n  ```\n  \n  * slearner\n\n  ```python\n  from econml.metalearners import slearner\n  from sklearn.ensemble import gradientboostingregressor\n\n  est = slearner(overall_model=gradientboostingregressor())\n  est.fit(y, t, x=np.hstack([x, w]))\n  treatment_effects = est.effect(np.hstack([x_test, w_test]))\n  ```\n\n  * tlearner\n\n  ```python\n  from econml.metalearners import tlearner\n  from sklearn.ensemble import gradientboostingregressor\n\n  est = tlearner(models=gradientboostingregressor())\n  est.fit(y, t, x=np.hstack([x, w]))\n  treatment_effects = est.effect(np.hstack([x_test, w_test]))\n  ```\n</details>\n\n<details>\n<summary>doubly robust learners (click to expand)\n</summary>\n\n* linear final stage\n\n```python\nfrom econml.dr import lineardrlearner\nfrom sklearn.ensemble import gradientboostingregressor, gradientboostingclassifier\n\nest = lineardrlearner(model_propensity=gradientboostingclassifier(),\n                      model_regression=gradientboostingregressor())\nest.fit(y, t, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05)\n```\n\n* sparse linear final stage\n\n```python\nfrom econml.dr import sparselineardrlearner\nfrom sklearn.ensemble import gradientboostingregressor, gradientboostingclassifier\n\nest = sparselineardrlearner(model_propensity=gradientboostingclassifier(),\n                            model_regression=gradientboostingregressor())\nest.fit(y, t, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05)\n```\n\n* nonparametric final stage\n\n```python\nfrom econml.dr import forestdrlearner\nfrom sklearn.ensemble import gradientboostingregressor, gradientboostingclassifier\n\nest = forestdrlearner(model_propensity=gradientboostingclassifier(),\n                      model_regression=gradientboostingregressor())\nest.fit(y, t, x=x, w=w) \ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05)\n```\n</details>\n\n<details>\n<summary>double machine learning with instrumental variables (click to expand)</summary>\n\n* orthogonal instrumental variable learner\n\n```python\nfrom econml.iv.dml import orthoiv\n\nest = orthoiv(projection=false, \n              discrete_treatment=true, \n              discrete_instrument=true)\nest.fit(y, t, z=z, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05) # ols confidence intervals\n```\n* nonparametric double machine learning with instrumental variable\n\n```python\nfrom econml.iv.dml import nonparamdmliv\n\nest = nonparamdmliv(projection=false, \n                    discrete_treatment=true, \n                    discrete_instrument=true)\nest.fit(y, t, z=z, x=x, w=w) # no analytical confidence interval available\ntreatment_effects = est.effect(x_test)\n```\n</details>\n\n<details>\n<summary>doubly robust machine learning with instrumental variables (click to expand)</summary>\n\n* linear final stage\n```python\nfrom econml.iv.dr import lineardriv\n\nest = lineardriv(discrete_instrument=true, discrete_treatment=true)\nest.fit(y, t, z=z, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05) # ols confidence intervals\n```\n\n* sparse linear final stage\n\n```python\nfrom econml.iv.dr import sparselineardriv\n\nest = sparselineardriv(discrete_instrument=true, discrete_treatment=true)\nest.fit(y, t, z=z, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05) # debiased lasso confidence intervals\n```\n\n* nonparametric final stage\n```python\nfrom econml.iv.dr import forestdriv\n\nest = forestdriv(discrete_instrument=true, discrete_treatment=true)\nest.fit(y, t, z=z, x=x, w=w)\ntreatment_effects = est.effect(x_test)\n# confidence intervals via bootstrap-of-little-bags for forests\nlb, ub = est.effect_interval(x_test, alpha=0.05) \n```\n\n* linear intent-to-treat (discrete instrument, discrete treatment)\n\n```python\nfrom econml.iv.dr import linearintenttotreatdriv\nfrom sklearn.ensemble import gradientboostingregressor, gradientboostingclassifier\n\nest = linearintenttotreatdriv(model_y_xw=gradientboostingregressor(),\n                              model_t_xwz=gradientboostingclassifier(),\n                              flexible_model_effect=gradientboostingregressor())\nest.fit(y, t, z=z, x=x, w=w)\ntreatment_effects = est.effect(x_test)\nlb, ub = est.effect_interval(x_test, alpha=0.05) # ols confidence intervals\n```\n</details>\n\n<details>\n<summary>deep instrumental variables (click to expand)</summary>\n\n```python\nimport keras\nfrom econml.iv.nnet import deepiv\n\ntreatment_model = keras.sequential([keras.layers.dense(128, activation='relu', input_shape=(2,)),\n                                    keras.layers.dropout(0.17),\n                                    keras.layers.dense(64, activation='relu'),\n                                    keras.layers.dropout(0.17),\n                                    keras.layers.dense(32, activation='relu'),\n                                    keras.layers.dropout(0.17)])\nresponse_model = keras.sequential([keras.layers.dense(128, activation='relu', input_shape=(2,)),\n                                  keras.layers.dropout(0.17),\n                                  keras.layers.dense(64, activation='relu'),\n                                  keras.layers.dropout(0.17),\n                                  keras.layers.dense(32, activation='relu'),\n                                  keras.layers.dropout(0.17),\n                                  keras.layers.dense(1)])\nest = deepiv(n_components=10, # number of gaussians in the mixture density networks)\n             m=lambda z, x: treatment_model(keras.layers.concatenate([z, x])), # treatment model\n             h=lambda t, x: response_model(keras.layers.concatenate([t, x])), # response model\n             n_samples=1 # number of samples used to estimate the response\n             )\nest.fit(y, t, x=x, z=z) # z -> instrumental variables\ntreatment_effects = est.effect(x_test)\n```\n</details>\n\nsee the <a href=\"#references\">references</a> section for more details.\n\n### interpretability\n<details>\n  <summary>tree interpreter of the cate model (click to expand)</summary>\n  \n  ```python\n  from econml.cate_interpreter import singletreecateinterpreter\n  intrp = singletreecateinterpreter(include_model_uncertainty=true, max_depth=2, min_samples_leaf=10)\n  # we interpret the cate model's behavior based on the features used for heterogeneity\n  intrp.interpret(est, x)\n  # plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['a', 'b', 'c', 'd'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_cate_tree.png)\n  \n</details>\n\n<details>\n  <summary>policy interpreter of the cate model (click to expand)</summary>\n\n  ```python\n  from econml.cate_interpreter import singletreepolicyinterpreter\n  # we find a tree-based treatment policy based on the cate model\n  intrp = singletreepolicyinterpreter(risk_level=0.05, max_depth=2, min_samples_leaf=1,min_impurity_decrease=.001)\n  intrp.interpret(est, x, sample_treatment_costs=0.2)\n  # plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['a', 'b', 'c', 'd'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_policy_tree.png)\n\n</details>\n\n<details>\n  <summary>shap values for the cate model (click to expand)</summary>\n\n  ```python\n  import shap\n  from econml.dml import causalforestdml\n  est = causalforestdml()\n  est.fit(y, t, x=x, w=w)\n  shap_values = est.shap_values(x)\n  shap.summary_plot(shap_values['y0']['t0'])\n  ```\n\n</details>\n\n\n### causal model selection and cross-validation\n\n\n<details>\n  <summary>causal model selection with the `rscorer` (click to expand)</summary>\n\n  ```python\n  from econml.score import rscorer\n\n  # split data in train-validation\n  x_train, x_val, t_train, t_val, y_train, y_val = train_test_split(x, t, y, test_size=.4)\n\n  # define list of cate estimators to select among\n  reg = lambda: randomforestregressor(min_samples_leaf=20)\n  clf = lambda: randomforestclassifier(min_samples_leaf=20)\n  models = [('ldml', lineardml(model_y=reg(), model_t=clf(), discrete_treatment=true,\n                               linear_first_stages=false, cv=3)),\n            ('xlearner', xlearner(models=reg(), cate_models=reg(), propensity_model=clf())),\n            ('dalearner', domainadaptationlearner(models=reg(), final_models=reg(), propensity_model=clf())),\n            ('slearner', slearner(overall_model=reg())),\n            ('drlearner', drlearner(model_propensity=clf(), model_regression=reg(),\n                                    model_final=reg(), cv=3)),\n            ('rlearner', nonparamdml(model_y=reg(), model_t=clf(), model_final=reg(),\n                                     discrete_treatment=true, cv=3)),\n            ('dml3dlasso', dml(model_y=reg(), model_t=clf(),\n                               model_final=lassocv(cv=3, fit_intercept=false),\n                               discrete_treatment=true,\n                               featurizer=polynomialfeatures(degree=3),\n                               linear_first_stages=false, cv=3))\n  ]\n\n  # fit cate models on train data\n  models = [(name, mdl.fit(y_train, t_train, x=x_train)) for name, mdl in models]\n\n  # score cate models on validation data\n  scorer = rscorer(model_y=reg(), model_t=clf(),\n                   discrete_treatment=true, cv=3, mc_iters=2, mc_agg='median')\n  scorer.fit(y_val, t_val, x=x_val)\n  rscore = [scorer.score(mdl) for _, mdl in models]\n  # select the best model\n  mdl, _ = scorer.best_model([mdl for _, mdl in models])\n  # create weighted ensemble model based on score performance\n  mdl, _ = scorer.ensemble([mdl for _, mdl in models])\n  ```\n\n</details>\n\n<details>\n  <summary>first stage model selection (click to expand)</summary>\n\nfirst stage models can be selected either by passing in cross-validated models (e.g. `sklearn.linear_model.lassocv`) to econml's estimators or perform the first stage model selection outside of econml and pass in the selected model. unless selecting among a large set of hyperparameters, choosing first stage models externally is the preferred method due to statistical and computational advantages.\n\n```python\nfrom econml.dml import lineardml\nfrom sklearn import clone\nfrom sklearn.ensemble import randomforestregressor\nfrom sklearn.model_selection import gridsearchcv\n\ncv_model = gridsearchcv(\n              estimator=randomforestregressor(),\n              param_grid={\n                  \"max_depth\": [3, none],\n                  \"n_estimators\": (10, 30, 50, 100, 200),\n                  \"max_features\": (2, 4, 6),\n              },\n              cv=5,\n           )\n# first stage model selection within econml\n# this is more direct, but computationally and statistically less efficient\nest = lineardml(model_y=cv_model, model_t=cv_model)\n# first stage model selection ouside of econml\n# this is the most efficient, but requires boilerplate code\nmodel_t = clone(cv_model).fit(w, t).best_estimator_\nmodel_y = clone(cv_model).fit(w, y).best_estimator_\nest = lineardml(model_y=model_t, model_t=model_y)\n```\n\n\n</details>\n\n### inference\n\nwhenever inference is enabled, then one can get a more structure `inferenceresults` object with more elaborate inference information, such\nas p-values and z-statistics. when the cate model is linear and parametric, then a `summary()` method is also enabled. for instance:\n\n  ```python\n  from econml.dml import lineardml\n  # use defaults\n  est = lineardml()\n  est.fit(y, t, x=x, w=w)\n  # get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample x[i]\n  est.effect_inference(x_test).summary_frame(alpha=0.05, value=0, decimals=3)\n  # get the population summary for the entire sample x\n  est.effect_inference(x_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)\n  #  get the parameter inference summary for the final model\n  est.summary()\n  ```\n  \n  <details><summary>example output (click to expand)</summary>\n  \n  ```python\n  # get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample x[i]\n  est.effect_inference(x_test).summary_frame(alpha=0.05, value=0, decimals=3)\n  ```\n  ![image](notebooks/images/summary_frame.png)\n  \n  ```python\n  # get the population summary for the entire sample x\n  est.effect_inference(x_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)\n  ```\n  ![image](notebooks/images/population_summary.png)\n  \n  ```python\n  #  get the parameter inference summary for the final model\n  est.summary()\n  ```\n  ![image](notebooks/images/summary.png)\n  \n  </details>\n  \n\n### policy learning\n\nyou can also perform direct policy learning from observational data, using the doubly robust method for offline\npolicy learning. these methods directly predict a recommended treatment, without internally fitting an explicit\nmodel of the conditional average treatment effect.\n\n<details>\n  <summary>doubly robust policy learning (click to expand)</summary>\n\n```python\nfrom econml.policy import drpolicytree, drpolicyforest\nfrom sklearn.ensemble import randomforestregressor\n\n# fit a single binary decision tree policy\npolicy = drpolicytree(max_depth=1, min_impurity_decrease=0.01, honest=true)\npolicy.fit(y, t, x=x, w=w)\n# predict the recommended treatment\nrecommended_t = policy.predict(x)\n# plot the binary decision tree\nplt.figure(figsize=(10,5))\npolicy.plot()\n# get feature importances\nimportances = policy.feature_importances_\n\n# fit a binary decision forest\npolicy = drpolicyforest(max_depth=1, min_impurity_decrease=0.01, honest=true)\npolicy.fit(y, t, x=x, w=w)\n# predict the recommended treatment\nrecommended_t = policy.predict(x)\n# plot the first tree in the ensemble\nplt.figure(figsize=(10,5))\npolicy.plot(0)\n# get feature importances\nimportances = policy.feature_importances_\n```\n\n\n  ![image](images/policy_tree.png)\n</details>\n\nto see more complex examples, go to the [notebooks](https://github.com/py-why/econml/tree/main/notebooks) section of the repository. for a more detailed description of the treatment effect estimation algorithms, see the econml [documentation](https://econml.azurewebsites.net/).\n\n# for developers\n\nyou can get started by cloning this repository. we use \n[setuptools](https://setuptools.readthedocs.io/en/latest/index.html) for building and distributing our package.\nwe rely on some recent features of setuptools, so make sure to upgrade to a recent version with\n`pip install setuptools --upgrade`.  then from your local copy of the repository you can run `pip install -e .` to get started (but depending on what you're doing you might want to install with extras instead, like `pip install -e .[plt]` if you want to use matplotlib integration, or you can use  `pip install -e .[all]` to include all extras).\n\n## running the tests\n\nthis project uses [pytest](https://docs.pytest.org/) for testing.  to run tests locally after installing the package, you can use `pip install pytest-runner` followed by `python setup.py pytest`.\n\nwe have added pytest marks to some tests to make it easier to run a subset, and you can set the pytest_addopts environment variable to take advantage of this.  for instance, you can set it to `-m \"not (notebook or automl)\"` to skip notebook and automl tests that have some additional dependencies. \n\n## generating the documentation\n\nthis project's documentation is generated via [sphinx](https://www.sphinx-doc.org/en/main/index.html).  note that we use [graphviz](https://graphviz.org/)'s \n`dot` application to produce some of the images in our documentation, so you should make sure that `dot` is installed and in your path.\n\nto generate a local copy of the documentation from a clone of this repository, just run `python setup.py build_sphinx -w -e -a`, which will build the documentation and place it under the `build/sphinx/html` path. \n\nthe restructuredtext files that make up the documentation are stored in the [docs directory](https://github.com/py-why/econml/tree/main/doc); module documentation is automatically generated by the sphinx build process.\n\n## release process\n\nwe use github actions to build and publish the package and documentation.  to create a new release, an admin should perform the following steps:\n\n1. update the version number in `econml/_version.py` and add a mention of the new version in the news section of this file and commit the changes.\n2. manually run the publish_package.yml workflow to build and publish the package to pypi.\n3. manually run the publish_docs.yml workflow to build and publish the documentation.\n4. under https://github.com/py-why/econml/releases, create a new release with a corresponding tag, and update the release notes.\n\n# blogs and publications\n\n* june 2019: [treatment effects with instruments paper](https://arxiv.org/pdf/1905.10176.pdf)\n\n* may 2019: [open data science conference workshop](https://odsc.com/speakers/machine-learning-estimation-of-heterogeneous-treatment-effect-the-microsoft-econml-library/) \n\n* 2018: [orthogonal random forests paper](http://proceedings.mlr.press/v97/oprescu19a.html)\n\n* 2017: [deepiv paper](http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf)\n\n# citation\n\nif you use econml in your research, please cite us as follows:\n\n   keith battocchi, eleanor dillon, maggie hei, greg lewis, paul oka, miruna oprescu, vasilis syrgkanis. **econml: a python package for ml-based heterogeneous treatment effects estimation.** https://github.com/py-why/econml, 2019. version 0.x.\n\nbibtex:\n\n```\n@misc{econml,\n  author={keith battocchi, eleanor dillon, maggie hei, greg lewis, paul oka, miruna oprescu, vasilis syrgkanis},\n  title={{econml}: {a python package for ml-based heterogeneous treatment effects estimation}},\n  howpublished={https://github.com/py-why/econml},\n  note={version 0.x},\n  year={2019}\n}\n```\n\n# contributing and feedback\n\nthis project welcomes contributions and suggestions.  we use the [dco bot](https://github.com/apps/dco) to enforce a [developer certificate of origin](https://developercertificate.org/) which requires users to sign-off on their commits.  this is a simple way to certify that you wrote or otherwise have the right to submit the code you are contributing to the project.  git provides a `-s` command line option to include this automatically when you commit via `git commit`.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide\na cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions\nprovided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [pywhy code of conduct](https://github.com/py-why/governance/blob/main/code-of-conduct.md).\n\n# references\n\nathey, susan, and stefan wager.\n**policy learning with observational data.**\neconometrica 89.1 (2021): 133-161.\n\nx nie, s wager.\n**quasi-oracle estimation of heterogeneous treatment effects.**\n[*biometrika*](https://doi.org/10.1093/biomet/asaa076), 2020\n\nv. syrgkanis, v. lei, m. oprescu, m. hei, k. battocchi, g. lewis.\n**machine learning estimation of heterogeneous treatment effects with instruments.**\n[*proceedings of the 33rd conference on neural information processing systems (neurips)*](https://arxiv.org/abs/1905.10176), 2019\n**(spotlight presentation)**\n\nd. foster, v. syrgkanis.\n**orthogonal statistical learning.**\n[*proceedings of the 32nd annual conference on learning theory (colt)*](https://arxiv.org/pdf/1901.09036.pdf), 2019\n**(best paper award)**\n\nm. oprescu, v. syrgkanis and z. s. wu.\n**orthogonal random forest for causal inference.**\n[*proceedings of the 36th international conference on machine learning (icml)*](http://proceedings.mlr.press/v97/oprescu19a.html), 2019.\n\ns. k\u00fcnzel, j. sekhon, j. bickel and b. yu.\n**metalearners for estimating heterogeneous treatment effects using machine learning.**\n[*proceedings of the national academy of sciences, 116(10), 4156-4165*](https://www.pnas.org/content/116/10/4156), 2019.\n\ns. athey, j. tibshirani, s. wager.\n**generalized random forests.**\n[*annals of statistics, 47, no. 2, 1148--1178*](https://projecteuclid.org/euclid.aos/1547197251), 2019.\n\nv. chernozhukov, d. nekipelov, v. semenova, v. syrgkanis.\n**plug-in regularized estimation of high-dimensional parameters in nonlinear semiparametric models.**\n[*arxiv preprint arxiv:1806.04823*](https://arxiv.org/abs/1806.04823), 2018.\n\ns. wager, s. athey.\n**estimation and inference of heterogeneous treatment effects using random forests.**\n[*journal of the american statistical association, 113:523, 1228-1242*](https://www.tandfonline.com/doi/citedby/10.1080/01621459.2017.1319839), 2018.\n\njason hartford, greg lewis, kevin leyton-brown, and matt taddy. **deep iv: a flexible approach for counterfactual prediction.** [*proceedings of the 34th international conference on machine learning, icml'17*](http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf), 2017.\n\nv. chernozhukov, d. chetverikov, m. demirer, e. duflo, c. hansen, and a. w. newey. **double machine learning for treatment and causal parameters.** [*arxiv preprint arxiv:1608.00060*](https://arxiv.org/abs/1608.00060), 2016.\n\ndudik, m., erhan, d., langford, j., & li, l.\n**doubly robust policy evaluation and optimization.**\nstatistical science, 29(4), 485-511, 2014.\n",
  "docs_url": null,
  "keywords": "treatment-effect",
  "license": "mit",
  "name": "econml",
  "package_url": "https://pypi.org/project/econml/",
  "project_url": "https://pypi.org/project/econml/",
  "project_urls": {
    "Bug Tracker": "https://github.com/py-why/EconML/Issues",
    "Documentation": "https://econml.azurewebsites.net/",
    "Homepage": "https://github.com/py-why/EconML",
    "Source Code": "https://github.com/py-why/EconML"
  },
  "release_url": "https://pypi.org/project/econml/0.14.1/",
  "requires_dist": [
    "numpy",
    "scipy (>1.4.0)",
    "scikit-learn (<1.3,>0.22.0)",
    "sparse",
    "joblib (>=0.13.0)",
    "statsmodels (>=0.10)",
    "pandas",
    "shap (<0.42.0,>=0.38.1)",
    "lightgbm",
    "azure-cli ; extra == 'all'",
    "keras (<2.4) ; extra == 'all'",
    "tensorflow (<2.3,>1.10) ; extra == 'all'",
    "protobuf (<4) ; extra == 'all'",
    "numpy (<1.24) ; extra == 'all'",
    "matplotlib (<3.6.0) ; extra == 'all'",
    "dowhy (<0.9) ; extra == 'all'",
    "azure-cli ; extra == 'automl'",
    "dowhy (<0.9) ; extra == 'dowhy'",
    "graphviz ; extra == 'plt'",
    "matplotlib (<3.6.0) ; extra == 'plt'",
    "protobuf (<4) ; extra == 'tf'",
    "numpy (<1.24) ; extra == 'tf'",
    "keras (<2.4) ; (python_version < \"3.9\") and extra == 'tf'",
    "tensorflow (<2.3,>1.10) ; (python_version < \"3.9\") and extra == 'tf'"
  ],
  "requires_python": "",
  "summary": "this package contains several methods for calculating conditional average treatment effects",
  "version": "0.14.1",
  "releases": [],
  "developers": [
    "pywhy_contributors"
  ],
  "kwds": "econml pypi dr_policy_tree pytest policy_tree",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_econml",
  "homepage": "https://github.com/py-why/econml",
  "release_count": 31,
  "dependency_ids": [
    "pypi_azure_cli",
    "pypi_dowhy",
    "pypi_graphviz",
    "pypi_joblib",
    "pypi_keras",
    "pypi_lightgbm",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_protobuf",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_shap",
    "pypi_sparse",
    "pypi_statsmodels",
    "pypi_tensorflow"
  ],
  "documentation_summary": "EconML is a Python package designed for estimating heterogeneous treatment effects from observational data using machine learning techniques. Developed as part of the ALICE project at Microsoft Research, it aims to automate complex causal inference problems by combining state-of-the-art machine learning with econometrics. EconML supports various methods for treatment effect estimation, including Double Machine Learning, Causal Forests, and Meta-Learners, among others. It offers flexibility in modeling effect heterogeneity, maintains the causal interpretation of models, and often provides valid confidence intervals. The package requires Python version 3.8 or higher and is licensed under the MIT License. The latest version, 0.15.0, was released on February 14, 2024. EconML is part of the PyWhy community, focusing on building an open-source ecosystem for causal machine learning.",
  "embedding": [
    -0.03303186222910881,
    0.004006926901638508,
    0.01192662212997675,
    -0.02842860482633114,
    -0.0055343713611364365,
    0.014367744326591492,
    0.010308507829904556,
    0.006873500999063253,
    -0.022053789347410202,
    0.0004287219780962914,
    -0.0013251802884042263,
    0.02763349562883377,
    -0.01122915931046009,
    0.033952511847019196,
    -0.016139300540089607,
    0.01039917767047882,
    0.020282233133912086,
    -0.009938851930201054,
    -0.01849672757089138,
    0.02926556020975113,
    0.013258777558803558,
    0.04274054989218712,
    -0.008739215321838856,
    -0.05646662786602974,
    0.0016277049435302615,
    0.017562126740813255,
    -0.003492547431960702,
    -0.02510867826640606,
    -0.0006495126872323453,
    0.0007026942912489176,
    0.006566617172211409,
    -0.024871541187167168,
    -0.025206323713064194,
    -0.02763349562883377,
    -0.05841952562332153,
    -0.021523717790842056,
    0.025903787463903427,
    0.016334591433405876,
    0.026726793497800827,
    -0.0008840347290970385,
    0.02410433255136013,
    -0.020226435735821724,
    -0.007365212310105562,
    -0.012958868406713009,
    0.004467252641916275,
    0.0019389479421079159,
    0.0022388570941984653,
    -0.028512299060821533,
    -0.019570820033550262,
    0.011668561026453972,
    0.021872449666261673,
    0.028958676382899284,
    -0.010761858895421028,
    -0.005509959999471903,
    -0.00047907012049108744,
    0.012191658839583397,
    0.0002240600879304111,
    0.007295466028153896,
    0.003905794583261013,
    -0.0007083611562848091,
    0.004111546091735363,
    -0.002129006665199995,
    -0.04698112979531288,
    0.0031054553110152483,
    -0.005380929447710514,
    0.011591840535402298,
    -0.013377346098423004,
    0.02121683396399021,
    0.006960683967918158,
    0.027759039774537086,
    0.041847798973321915,
    0.012512492015957832,
    -0.007351263426244259,
    -0.013251802884042263,
    0.024341469630599022,
    -0.010468924418091774,
    -0.03392461687326431,
    0.009011225774884224,
    0.006312042940407991,
    0.01828748732805252,
    0.015957960858941078,
    -0.0070304302498698235,
    -0.003128123003989458,
    0.021509768441319466,
    0.02428567223250866,
    -0.01060144230723381,
    -0.005666889250278473,
    0.004006926901638508,
    -0.020672813057899475,
    -0.004721826408058405,
    0.004585821181535721,
    -0.005600630305707455,
    0.02926556020975113,
    0.026852337643504143,
    -0.03303186222910881,
    0.020909950137138367,
    0.008808961138129234,
    0.047036923468112946,
    0.015553431585431099,
    -0.025457410141825676,
    -0.00238706823438406,
    0.011110590770840645,
    -0.02077045664191246,
    -0.013391295447945595,
    -0.05381627008318901,
    -0.009687765501439571,
    -0.028568096458911896,
    0.00337746599689126,
    -0.004233602434396744,
    0.02032408118247986,
    0.00259281974285841,
    0.02558295428752899,
    0.011173361912369728,
    -0.046423155814409256,
    0.008864758536219597,
    -0.007804614491760731,
    0.011487220413982868,
    -0.011508144438266754,
    -0.002263268455862999,
    0.006922323256731033,
    -0.009576170705258846,
    0.025052882730960846,
    0.0033757223282009363,
    -0.02577824331820011,
    -0.006144651677459478,
    -0.0013914393493905663,
    -0.0011464552953839302,
    -0.026684945449233055,
    -0.014814120717346668,
    0.0014507236192002892,
    -0.006430611480027437,
    -0.0014385180547833443,
    0.0006290246965363622,
    0.02862389385700226,
    -0.03141374886035919,
    0.021426072344183922,
    -0.009408780373632908,
    -0.010726985521614552,
    -0.030688384547829628,
    0.01245669461786747,
    0.002357425866648555,
    0.005945874843746424,
    0.017576076090335846,
    -0.018803611397743225,
    -0.0163764376193285,
    0.0340920053422451,
    0.01038522832095623,
    -0.001003475277684629,
    0.01972426287829876,
    -0.004111546091735363,
    0.021746905520558357,
    -0.027368459850549698,
    -0.013356422074139118,
    0.010448000393807888,
    0.004958963952958584,
    0.01911049522459507,
    0.02282099984586239,
    0.007309415377676487,
    -0.02781483717262745,
    -0.009520374238491058,
    -0.01050379779189825,
    0.0056913006119430065,
    0.0005466368747875094,
    -0.013279701583087444,
    0.01599980890750885,
    0.04031337797641754,
    0.024201976135373116,
    -0.02386719360947609,
    -0.009297185577452183,
    0.00654918048530817,
    -0.0269918292760849,
    0.021551616489887238,
    -0.020268283784389496,
    -0.00820216815918684,
    0.002252806443721056,
    0.013488939963281155,
    -0.00691186124458909,
    0.005077532958239317,
    -0.0025945634115487337,
    -0.028595995157957077,
    0.004341708961874247,
    0.028372807428240776,
    0.002456814516335726,
    0.015930062159895897,
    0.0070304302498698235,
    -0.014772272668778896,
    0.00840443279594183,
    -0.02597353421151638,
    0.0024916876573115587,
    0.010308507829904556,
    0.002727081533521414,
    0.026252519339323044,
    0.0017087850719690323,
    0.005959823727607727,
    -0.6008228063583374,
    -0.01746448129415512,
    -0.03732823580503464,
    0.002130750333890319,
    -0.023127883672714233,
    -0.011710409075021744,
    0.003178688930347562,
    0.014549084939062595,
    -0.0010461949277669191,
    0.04753910005092621,
    -0.030381500720977783,
    0.009624993428587914,
    -0.006350403185933828,
    -0.01745053194463253,
    -0.012638035230338573,
    -0.013998088426887989,
    -0.01308441162109375,
    -0.030381500720977783,
    -0.0014690321404486895,
    0.013328523375093937,
    -0.039141640067100525,
    0.02555505558848381,
    -0.021677158772945404,
    0.012149810791015625,
    -0.003843022743239999,
    0.026684945449233055,
    -0.003717479296028614,
    0.010650265030562878,
    0.022542014718055725,
    -9.862567094387487e-05,
    -0.024160128086805344,
    0.03983910381793976,
    -0.005998184438794851,
    -0.01746448129415512,
    0.04137352481484413,
    -0.002352195093408227,
    0.008223092183470726,
    0.05166808143258095,
    0.015344192273914814,
    0.023741651326417923,
    -0.016446184366941452,
    -0.002498662332072854,
    -0.005391391459852457,
    0.0067932927049696445,
    0.0011856876080855727,
    0.006067930720746517,
    0.00850207731127739,
    0.017715567722916603,
    -0.006001671776175499,
    -0.00301478523761034,
    0.008578798733651638,
    -0.0013243084540590644,
    -0.02781483717262745,
    -0.014297997578978539,
    -0.0024376341607421637,
    0.0038325609639286995,
    0.008432331494987011,
    -0.010678162798285484,
    0.010231786407530308,
    -0.001149070798419416,
    -0.012296278029680252,
    -0.008578798733651638,
    -0.007337314076721668,
    -0.006786318030208349,
    -0.020854152739048004,
    0.007574451621621847,
    0.010713036172091961,
    0.016320642083883286,
    -0.004076673183590174,
    -0.010301533155143261,
    0.02017063833773136,
    0.008488127961754799,
    0.0259456355124712,
    -0.007323364727199078,
    0.018399082124233246,
    0.016920460388064384,
    0.020714659243822098,
    0.000720566778909415,
    -0.017534228041768074,
    0.019556870684027672,
    0.0078883096575737,
    -0.014716475270688534,
    0.017338937148451805,
    -0.02262570895254612,
    0.022737303748726845,
    -0.015134953893721104,
    0.02199799194931984,
    -0.0018535087583586574,
    0.005419289693236351,
    0.009541298262774944,
    0.02219328284263611,
    0.015539482235908508,
    0.015386040322482586,
    -0.04301953688263893,
    -0.023365020751953125,
    -0.0017305808141827583,
    0.007302440702915192,
    0.014074809849262238,
    0.0013722589937970042,
    -0.03431519493460655,
    -0.022374622523784637,
    0.014158505015075207,
    0.03802569955587387,
    0.0034873164258897305,
    -0.008048726245760918,
    0.013879519887268543,
    0.015860315412282944,
    0.0026625662576407194,
    0.037272438406944275,
    -0.008808961138129234,
    -0.013963215053081512,
    -0.029377155005931854,
    -0.010392202995717525,
    0.005987722426652908,
    0.02178875356912613,
    -0.03462207689881325,
    -0.01579056866466999,
    -0.005638991016894579,
    -0.0019685900770127773,
    0.0006551796104758978,
    0.03629599139094353,
    -0.008362584747374058,
    0.024843642488121986,
    -0.011236133985221386,
    0.024048535153269768,
    -0.015902163460850716,
    0.010196913965046406,
    -0.02386719360947609,
    -0.01546973641961813,
    0.01558133028447628,
    0.009387856349349022,
    0.02801012620329857,
    0.012149810791015625,
    -0.017115749418735504,
    0.01699020527303219,
    0.023406868800520897,
    0.03361773118376732,
    -0.012414846569299698,
    0.0016416542930528522,
    -0.010824630036950111,
    -0.017757415771484375,
    0.0036895808298140764,
    0.020449623465538025,
    -0.010580518282949924,
    -0.009611044079065323,
    -0.01308441162109375,
    0.01068513747304678,
    0.010517746210098267,
    0.0046102325432002544,
    -0.012847273610532284,
    -0.0296840388327837,
    -0.014995461329817772,
    -0.04527931660413742,
    0.012693831697106361,
    -0.0002183931937906891,
    -0.02075650729238987,
    -0.015623178333044052,
    -0.013705153949558735,
    -0.02785668522119522,
    -0.027145272120833397,
    -0.007553527597337961,
    0.024606505408883095,
    0.00497988797724247,
    -0.008676443248987198,
    -0.03668656945228577,
    0.014381693676114082,
    -0.030883675441145897,
    0.02473204955458641,
    -0.01442354079335928,
    -0.0399227999150753,
    0.027577698230743408,
    -0.03113476186990738,
    -0.012163760140538216,
    0.006472459528595209,
    0.005415802355855703,
    0.03336664289236069,
    0.011487220413982868,
    -0.010106243193149567,
    -0.017603972926735878,
    -0.006932785268872976,
    0.014730424620211124,
    0.01424220111221075,
    -0.01742263324558735,
    -0.021942196413874626,
    0.04327062517404556,
    0.01659962721168995,
    0.03386881947517395,
    -0.011068742722272873,
    0.005025222897529602,
    0.0008853424806147814,
    -0.007818563841283321,
    0.010643290355801582,
    -0.013607509434223175,
    0.01975216157734394,
    0.0026782590430229902,
    0.0003977720334660262,
    -0.004882242996245623,
    0.016753068193793297,
    0.01580451801419258,
    0.057638365775346756,
    -0.008808961138129234,
    0.04279634729027748,
    -0.0037070175167173147,
    -0.007295466028153896,
    0.009192566387355328,
    0.004010413773357868,
    0.03584961220622063,
    -0.03158113732933998,
    0.0034733673091977835,
    0.000979064148850739,
    0.028554147109389305,
    -0.02224908024072647,
    -0.047873880714178085,
    -0.015302345156669617,
    -0.01328667625784874,
    0.023295274004340172,
    0.006092342082411051,
    0.015497634187340736,
    -0.0008469820022583008,
    0.025262121111154556,
    0.009938851930201054,
    -0.013837671838700771,
    0.019068647176027298,
    -0.006413175258785486,
    0.011487220413982868,
    -0.018733864650130272,
    -0.0096459174528718,
    0.01909654587507248,
    0.010824630036950111,
    -0.03880685940384865,
    -0.011522093787789345,
    0.03172063082456589,
    0.02033803053200245,
    -0.024397267028689384,
    0.019222088158130646,
    -0.003150790464133024,
    0.04254526272416115,
    -0.014144555665552616,
    0.04380069673061371,
    -0.007351263426244259,
    -0.013523813337087631,
    0.019584769383072853,
    0.04212678223848343,
    -0.011780154891312122,
    -0.00047122364048846066,
    -0.006130702327936888,
    0.017813213169574738,
    0.011689485050737858,
    0.01824563927948475,
    -0.005823818501085043,
    0.013551712036132812,
    0.011787129566073418,
    0.011759230867028236,
    -0.004073185846209526,
    0.007797639816999435,
    -0.045167721807956696,
    -0.0011316342279314995,
    0.005774996243417263,
    0.04737170785665512,
    0.024048535153269768,
    0.0186920166015625,
    -0.01704600267112255,
    0.02079835534095764,
    -0.005698275286704302,
    0.018775712698698044,
    -0.021300530061125755,
    -0.009290210902690887,
    -0.03052099421620369,
    -0.002681746380403638,
    -0.029767733067274094,
    -0.005056608933955431,
    -0.02346266619861126,
    -0.008055700920522213,
    -0.03925323486328125,
    0.031888023018836975,
    0.01849672757089138,
    0.03141374886035919,
    0.00695719663053751,
    0.023616107180714607,
    0.00924836378544569,
    -0.019570820033550262,
    -0.020435674116015434,
    0.03732823580503464,
    0.022486217319965363,
    0.010301533155143261,
    0.014144555665552616,
    -0.0014088759198784828,
    -0.026433859020471573,
    -0.015930062159895897,
    0.01622299663722515,
    0.02909816987812519,
    0.009464576840400696,
    0.0032257677521556616,
    0.003391415346413851,
    -0.01699020527303219,
    0.001183072105050087,
    0.008250990882515907,
    -0.0003565781225915998,
    0.015553431585431099,
    -0.022946542128920555,
    0.033757224678993225,
    -0.015818467363715172,
    -0.019040748476982117,
    -0.0038360480684787035,
    0.014521186240017414,
    0.004798547364771366,
    0.007044379599392414,
    -0.03805359825491905,
    0.007867385633289814,
    -0.02761954627931118,
    0.0010060907807201147,
    -0.0043835570104420185,
    0.01548368576914072,
    -0.016711220145225525,
    0.006828165613114834,
    0.0269918292760849,
    0.014193378388881683,
    -0.004261500667780638,
    0.026531504467129707,
    -0.0010095781181007624,
    -0.010427076369524002,
    -0.03612859919667244,
    -0.01784111186861992,
    0.012610136531293392,
    0.028149619698524475,
    0.019222088158130646,
    0.012121912091970444,
    0.004938040394335985,
    -0.0014916996005922556,
    -0.013328523375093937,
    -0.0053565180860459805,
    -0.006158601026982069,
    0.001452467287890613,
    0.007260593120008707,
    -0.03531954064965248,
    0.026489656418561935,
    0.010894376784563065,
    0.00193546072114259,
    0.01620904728770256,
    0.009185591712594032,
    0.0010549132712185383,
    -0.0222072321921587,
    -0.007386136334389448,
    -0.008592748083174229,
    0.010343381203711033,
    -0.009108870290219784,
    0.02287679724395275,
    0.01245669461786747,
    0.0038116369396448135,
    0.0007284132298082113,
    0.00829283893108368,
    0.03236229717731476,
    -0.011291930451989174,
    -0.020268283784389496,
    -0.0015440094284713268,
    0.006601490080356598,
    0.0034716236405074596,
    0.03607280179858208,
    -0.024383317679166794,
    0.014172454364597797,
    -0.008669468574225903,
    0.00686303898692131,
    -0.006514307111501694,
    0.002702670404687524,
    0.03180432692170143,
    0.030018821358680725,
    -0.009011225774884224,
    -0.002242344431579113,
    0.008271914906799793,
    -0.03808149695396423,
    0.022165384143590927,
    0.010294558480381966,
    0.0018099172739312053,
    -0.006880475673824549,
    0.02222118154168129,
    0.0040487744845449924,
    -0.02512262761592865,
    -0.01867806725203991,
    0.03548693284392357,
    0.013691204600036144,
    0.009073997847735882,
    -0.010894376784563065,
    -0.016864662989974022,
    -0.01662752591073513,
    -0.018608320504426956,
    -0.03010251559317112,
    0.0004489920102059841,
    0.00560760498046875,
    -0.011054793372750282,
    0.03278077393770218,
    -0.01556738093495369,
    0.015609228983521461,
    -0.0041743176989257336,
    -0.020184587687253952,
    0.007825538516044617,
    -0.04617207124829292,
    -0.023141833022236824,
    -0.013502889312803745,
    0.0020784407388418913,
    -0.0025160987861454487,
    0.010336406528949738,
    -0.004659054800868034,
    -0.017506329342722893,
    0.006005159113556147,
    -0.0072257197462022305,
    -0.0192918349057436,
    -0.00977146066725254,
    -0.05205865949392319,
    0.006768881343305111,
    -0.03054889291524887,
    -0.037077147513628006,
    -0.016976255923509598,
    -0.014521186240017414,
    0.015637127682566643,
    -0.007218745071440935,
    0.01247064396739006,
    0.025164475664496422,
    -0.03423149883747101,
    -0.01007136981934309,
    0.018538573756814003,
    4.269238343113102e-05,
    0.023630056530237198,
    0.006057468708604574,
    -0.020630965009331703,
    0.02012879028916359,
    -0.033143457025289536,
    -0.0017358118202537298,
    -0.02328132465481758,
    -0.0011124539887532592,
    -0.006650312803685665,
    -0.0238532442599535,
    0.00487178098410368,
    -0.010064395144581795,
    0.009185591712594032,
    0.012903071008622646,
    -0.01927788555622101,
    0.016739118844270706,
    0.013272726908326149,
    0.02597353421151638,
    0.018789662048220634,
    0.0009651148575358093,
    0.033534035086631775,
    0.006667749024927616,
    -0.01442354079335928,
    0.02678259089589119,
    -0.013265752233564854,
    0.011584865860641003,
    0.021063391119241714,
    0.0012240480864420533,
    0.024676252156496048,
    0.0021342376712709665,
    0.002716619521379471,
    -0.01851067692041397,
    0.01091530080884695,
    0.026126975193619728,
    0.01309836097061634,
    -0.023183681070804596,
    -0.007895284332334995,
    -0.02551320753991604,
    -0.02033803053200245,
    -0.013907418586313725,
    0.00705484114587307,
    -0.022472267970442772,
    -0.018120096996426582,
    0.01339827012270689,
    0.005530884023755789,
    -0.03294816613197327,
    -0.0039023072458803654,
    0.02389509230852127,
    -0.03205541521310806,
    -0.010985046625137329,
    0.007881334982812405,
    -0.01057354360818863,
    0.014249174855649471,
    0.02137027494609356,
    -0.003389671677723527,
    -0.010329431854188442,
    -0.0023975300136953592,
    -0.012749629095196724,
    0.007511680014431477,
    0.023922991007566452,
    0.006768881343305111,
    0.02657335251569748,
    0.04380069673061371,
    0.04918511211872101,
    -0.010978071950376034,
    0.03322715312242508,
    0.013635407201945782,
    -0.012226531282067299,
    -0.001881407224573195,
    -0.010015573352575302,
    0.007595375180244446,
    0.0022754741366952658,
    -0.014130606316030025,
    0.00674098264425993,
    -0.006929297931492329,
    0.031274255365133286,
    -0.001733196317218244,
    0.012407871894538403,
    0.009541298262774944,
    -0.0005082763964310288,
    -0.008990301750600338,
    -0.008550900034606457,
    -0.00790225900709629,
    0.02259781025350094,
    0.01164066232740879,
    -0.022695455700159073,
    0.037467729300260544,
    -0.03545903414487839,
    -0.01679491624236107,
    0.02452280931174755,
    0.02364400587975979,
    0.0029101655818521976,
    0.025080779567360878,
    1.0564117474132217e-05,
    -0.022388571873307228,
    0.020868102088570595,
    0.0047671617940068245,
    -0.009534323588013649,
    -0.018845457583665848,
    -0.013342472724616528,
    -0.03861156851053238,
    -0.03654707595705986,
    -0.007490755990147591,
    -0.018399082124233246,
    0.05085902288556099,
    -0.005663401912897825,
    0.001589344465173781,
    -0.019166290760040283,
    0.014800171367824078,
    -0.00977146066725254,
    0.0007759279105812311,
    0.010936224833130836,
    -0.02282099984586239,
    -0.0054925233125686646,
    -0.016543829813599586,
    -0.013642381876707077,
    -0.03035360388457775,
    0.030465196818113327,
    0.01848277822136879,
    0.020310131832957268,
    0.007253618445247412,
    -0.029767733067274094,
    -0.023936940357089043,
    0.02552715688943863,
    -0.0017610948998481035,
    0.03345033898949623,
    -0.0016477570170536637,
    0.04257316142320633,
    0.03883475810289383,
    -0.00628414424136281,
    -0.003794200485572219,
    -0.008264940232038498,
    -0.019473174586892128,
    0.015204699710011482,
    0.03180432692170143,
    0.00998767465353012,
    -0.01641828566789627,
    -0.02054726891219616,
    0.005761046893894672,
    0.0009642430231906474,
    -0.0008208271465264261,
    -0.016948359087109566,
    0.035598527640104294,
    0.016125351190567017,
    -0.0064689721912145615,
    -0.042238377034664154,
    -0.005325132515281439,
    -0.01827353797852993,
    0.02223513089120388,
    -0.0035605502780526876,
    -0.007448907941579819,
    0.020268283784389496,
    -0.015902163460850716,
    0.004495150875300169,
    0.03464997559785843,
    0.013237853534519672,
    0.022053789347410202,
    0.004690440837293863,
    -0.02259781025350094,
    -0.009715664200484753,
    -0.02633621357381344,
    -0.007651172578334808,
    0.006360865198075771,
    0.0038918452337384224,
    0.03261338546872139,
    -0.021970093250274658,
    -0.02636411227285862,
    0.023211577907204628,
    -0.03492896258831024,
    -0.012331151403486729,
    -0.02184455096721649,
    -0.014053885824978352,
    0.031636934727430344,
    -0.031664833426475525,
    0.01740868389606476,
    -0.005590168293565512,
    -0.03481736779212952,
    0.0037802511360496283,
    -0.003185663605108857,
    0.002017412567511201,
    -0.026894185692071915,
    -0.017827162519097328,
    -0.01870596595108509,
    0.0015492403181269765,
    0.019598718732595444,
    -0.013370371423661709,
    -0.008913581259548664,
    -0.009241389110684395,
    0.003346080193296075,
    -0.019584769383072853,
    -0.027145272120833397,
    0.008850809186697006,
    -0.007783690467476845,
    0.012910045683383942,
    -0.008536950685083866,
    -0.016488032415509224,
    0.025038933381438255,
    0.020658863708376884,
    0.015023360028862953,
    0.007330339401960373,
    0.0008500334224663675,
    0.0016224740538746119,
    0.033143457025289536,
    0.011947546154260635,
    -0.02453675866127014,
    -0.002578870626166463,
    -0.007797639816999435,
    -0.01934763230383396,
    -0.0016861174954101443,
    -0.001564061501994729,
    -0.007033917587250471,
    -0.03629599139094353,
    -0.05194706842303276,
    -0.013977164402604103,
    0.02452280931174755,
    -0.0009720894740894437,
    -0.030269907787442207,
    0.0011229158844798803,
    0.022276977077126503,
    0.009631968103349209,
    -0.011696459725499153,
    -0.01506520714610815,
    0.044721346348524094,
    -0.016320642083883286,
    0.0009058304713107646,
    0.013747001998126507,
    -0.009339033626019955,
    0.01371212862432003,
    -0.021077340468764305,
    0.01661357656121254,
    -0.01643223501741886,
    -0.03358983248472214,
    0.000731464650016278,
    -0.02614092454314232,
    0.03953222185373306,
    0.008195193484425545,
    0.02598748356103897,
    -0.020045096054673195,
    -0.024188026785850525,
    -0.01664147526025772,
    0.028177518397569656,
    -0.010113217867910862,
    -0.0056913006119430065,
    0.001699195010587573,
    0.024020636454224586,
    -0.008983327075839043,
    0.005614579655230045,
    -0.025276070460677147,
    -0.028540197759866714,
    -0.019361581653356552,
    0.023211577907204628,
    -0.04511192813515663,
    -0.025234222412109375,
    -0.006071418058127165,
    0.05627134069800377,
    0.02867969125509262,
    -0.019654516130685806,
    -0.01725524291396141,
    -0.027326611801981926,
    -0.036881860345602036,
    0.0035396262537688017,
    -0.02409038320183754,
    0.008481154218316078,
    0.022095637395977974,
    0.020630965009331703,
    -0.007379161659628153,
    0.010231786407530308,
    0.003571012057363987,
    -0.00840443279594183,
    -0.0232534259557724,
    0.004219653084874153,
    -0.007713944185525179,
    -0.002463789191097021,
    0.0051193805411458015,
    -0.006953709293156862,
    -0.03847207501530647,
    0.004331246949732304,
    0.01971031352877617,
    0.0061062914319336414,
    -0.01174528244882822,
    0.02932135760784149,
    0.011033869348466396,
    -0.014828070066869259,
    -0.002434146823361516,
    -0.00912979431450367,
    0.009618018753826618,
    -0.008913581259548664,
    0.0014045167481526732,
    -0.0049833753146231174,
    -0.013684229925274849,
    -0.004118520766496658,
    -0.0030601201578974724,
    -0.023434767499566078,
    -0.029767733067274094,
    0.013705153949558735,
    -0.03116266056895256,
    0.004958963952958584,
    -0.03177642822265625,
    -0.026029329746961594,
    -0.003940667491406202,
    -0.02742425724864006,
    0.016878612339496613,
    0.01432589627802372,
    0.03615649789571762,
    0.024006687104701996,
    -0.011382601223886013,
    0.005827305838465691,
    -0.01909654587507248,
    0.018134046345949173,
    -0.016948359087109566,
    -0.005349543411284685,
    0.020449623465538025,
    0.0011229158844798803,
    -0.014367744326591492,
    -0.011333778500556946,
    0.01661357656121254,
    0.0186920166015625,
    -0.008962403051555157,
    0.010971098206937313,
    -0.00790225900709629,
    -0.025847990065813065,
    6.55506519251503e-05,
    0.011835952289402485,
    -0.03763512149453163,
    -0.000957268406637013,
    0.009597094729542732,
    0.006005159113556147,
    0.009352982975542545,
    -0.027103424072265625,
    0.02284889854490757,
    -0.031106863170862198,
    0.012052166275680065,
    -0.002983399201184511,
    -0.01996139995753765,
    -0.007476806640625,
    0.018357234075665474,
    -0.02226302959024906,
    -0.004669516813009977,
    0.025164475664496422,
    0.16437815129756927,
    0.0024603018537163734,
    0.011494195088744164,
    0.013014664873480797,
    0.002622462110593915,
    -0.0020906461868435144,
    0.001991257769986987,
    0.0032135620713233948,
    -0.023574259132146835,
    0.01764582097530365,
    0.003972053527832031,
    0.0017523765563964844,
    0.0006865654140710831,
    0.0045683844946324825,
    0.01701810397207737,
    0.0009441909496672451,
    -0.020003248006105423,
    -0.03777461126446724,
    -0.016711220145225525,
    0.024341469630599022,
    0.019249986857175827,
    0.01761792227625847,
    -0.0009258825448341668,
    -0.04511192813515663,
    0.0008962403517216444,
    0.0027881094720214605,
    -0.018440930172801018,
    0.019236037507653236,
    0.011508144438266754,
    0.003230998758226633,
    -0.0038465100806206465,
    0.006277169566601515,
    0.00457187183201313,
    -0.0007022583740763366,
    -0.03682606294751167,
    -0.013502889312803745,
    0.017087850719690323,
    -0.01360053475946188,
    0.016292743384838104,
    0.007253618445247412,
    -0.006493383552879095,
    -0.02114708721637726,
    -0.024341469630599022,
    -0.0037105048540979624,
    0.011194285936653614,
    0.0002680874604266137,
    -0.012107962742447853,
    0.006165575701743364,
    -0.013342472724616528,
    -0.00653523113578558,
    -0.030604690313339233,
    -0.02079835534095764,
    -0.012177709490060806,
    0.026643097400665283,
    -0.016864662989974022,
    0.0006172550492919981,
    -0.00518563948571682,
    -0.0038988199084997177,
    0.043298520147800446,
    0.02135632559657097,
    -0.007930157706141472,
    0.01659962721168995,
    0.011340753175318241,
    0.006845602300018072,
    -0.052449241280555725,
    0.009080972522497177,
    -0.022946542128920555,
    -0.009534323588013649,
    -0.004899679683148861,
    -0.009255338460206985,
    -0.015818467363715172,
    -0.01225442998111248,
    0.00774184288457036,
    -0.019026799127459526,
    -0.01622299663722515,
    -0.010782782919704914,
    0.040815550833940506,
    0.03093947283923626,
    0.0116267129778862,
    0.034566279500722885,
    -0.009785410016775131,
    -0.0006700006779283285,
    -0.03381302207708359,
    0.002477738307788968,
    -0.014158505015075207,
    -0.008488127961754799,
    0.00447422731667757,
    -0.017199445515871048,
    -0.02450885996222496,
    -0.008822910487651825,
    -0.0022057276219129562,
    -0.015316294506192207,
    -0.005196101497858763,
    -0.0015937036368995905,
    0.019194189459085464,
    0.05376047268509865,
    -0.005192614160478115,
    -0.005952849518507719,
    -0.044135477393865585,
    0.019361581653356552,
    -0.03713294491171837,
    0.06578473746776581,
    0.01432589627802372,
    -0.0005047890590503812,
    0.03403620794415474,
    0.010461949743330479,
    -0.01307046227157116,
    0.016543829813599586,
    0.0002489072212483734,
    -0.008550900034606457,
    0.004069698508828878,
    -0.04438656568527222,
    0.03177642822265625,
    0.004770649131387472,
    -0.007281516678631306,
    0.007553527597337961,
    0.0027183631900697947,
    -0.048710837960243225,
    0.010001624003052711,
    0.000992141547612846,
    -0.007832513190805912,
    -0.013677255250513554,
    -0.005384416785091162,
    0.009736587293446064,
    0.0027741603553295135,
    -0.012791477143764496,
    -0.015441837720572948,
    -0.00045029973261989653,
    -0.007089714519679546,
    0.009750536642968655,
    -0.0018413030775263906,
    -0.020519370213150978,
    0.007978980429470539,
    0.017701618373394012,
    0.014730424620211124,
    -0.008334686048328876,
    0.00137487449683249,
    -0.01640433631837368,
    -0.004945014603435993,
    0.0004930193535983562,
    -0.027047626674175262,
    0.00447422731667757,
    0.01215678546577692,
    -0.04430286958813667,
    -0.0009337289957329631,
    -0.00513681722804904,
    0.0054925233125686646,
    0.0232534259557724,
    -0.001891869236715138,
    0.009199541062116623,
    0.011173361912369728,
    -0.00954827293753624,
    -0.006657287012785673,
    -0.028149619698524475,
    0.017324987798929214,
    -0.02635016292333603,
    -0.01665542460978031,
    -0.003982515539973974,
    0.032306499779224396,
    0.008857783861458302,
    -0.048682939261198044,
    -0.013656331226229668,
    0.007853437215089798,
    -0.0038360480684787035,
    -0.012177709490060806,
    0.00317171448841691,
    -0.17698828876018524,
    0.012010318227112293,
    0.014883866533637047,
    -0.037914104759693146,
    0.019403429701924324,
    0.01764582097530365,
    -0.004809009376913309,
    0.019891653209924698,
    -0.03339454159140587,
    -0.023616107180714607,
    0.005820331163704395,
    0.048069171607494354,
    -0.018747813999652863,
    -0.004128982778638601,
    0.0018308411817997694,
    0.011877800337970257,
    0.0027462616562843323,
    -0.013007690198719501,
    0.025024984031915665,
    0.00618649972602725,
    0.023197630420327187,
    -0.030799979344010353,
    0.01091530080884695,
    -0.003860459430143237,
    0.010922275483608246,
    0.005391391459852457,
    0.008509051986038685,
    0.017771365121006966,
    0.0014219533186405897,
    -0.022151434794068336,
    -0.011319829151034355,
    0.011082692071795464,
    0.008550900034606457,
    -0.021035492420196533,
    0.0033757223282009363,
    0.005272822454571724,
    0.0284844022244215,
    -0.0267686415463686,
    -0.007400085683912039,
    0.012875172309577465,
    0.021342376247048378,
    0.015162852592766285,
    -0.005604117643088102,
    0.004927578382194042,
    -0.023783499374985695,
    0.02600143291056156,
    0.009290210902690887,
    -0.016515931114554405,
    0.011501169763505459,
    -0.005192614160478115,
    0.020003248006105423,
    -0.027884582057595253,
    0.013105335645377636,
    -0.000934600830078125,
    0.03342244029045105,
    0.013147183693945408,
    0.022974440827965736,
    0.017534228041768074,
    0.010713036172091961,
    -0.021342376247048378,
    -0.010022548027336597,
    -0.029795631766319275,
    0.03135795146226883,
    0.005241436883807182,
    -0.005768021568655968,
    -0.01602770760655403,
    -0.03197171911597252,
    0.02116103656589985,
    -0.011675535701215267,
    0.005370467435568571,
    0.007846462540328503,
    -0.0007083611562848091,
    0.00637830188497901,
    -0.01742263324558735,
    0.01679491624236107,
    0.005904026795178652,
    0.005478574428707361,
    0.0010296301916241646,
    0.03158113732933998,
    -0.005809869151562452,
    -0.02470415085554123,
    0.055350687354803085,
    0.014576982706785202,
    -0.011766205541789532,
    0.010350355878472328,
    -0.014632780104875565,
    0.008697367273271084,
    0.0010967610869556665,
    -0.00799292977899313,
    -0.02304418757557869,
    0.018998900428414345,
    -0.00967381615191698,
    0.01763187162578106,
    -0.020059045404195786,
    0.014563033357262611,
    -0.008237041532993317,
    -0.0020313619170337915,
    -0.014395643025636673,
    0.017297089099884033,
    -0.018943103030323982,
    -0.0034105954691767693,
    -0.007651172578334808,
    -0.012979792430996895,
    0.006259733345359564,
    0.021342376247048378,
    0.003414082806557417,
    -0.03526374325156212,
    0.008425356820225716,
    0.03651917725801468,
    -0.0010113217867910862,
    -0.015134953893721104,
    -0.027103424072265625,
    0.026238569989800453,
    0.0014167223125696182,
    -0.020045096054673195,
    0.024174077436327934,
    -0.027061576023697853,
    -0.011459321714937687,
    -0.003435006830841303,
    0.004059236496686935,
    0.019640566781163216,
    -0.004624181892722845,
    -0.006305068265646696,
    0.006782830692827702,
    -0.0051716906018555164,
    -0.018134046345949173,
    -0.09279052168130875,
    -0.01664147526025772,
    -0.0014376462204381824,
    0.010580518282949924,
    0.012651984579861164,
    0.02014273963868618,
    -0.002828213619068265,
    0.025610852986574173,
    -0.005904026795178652,
    0.0006107162917032838,
    -0.00233998941257596,
    0.037467729300260544,
    -0.004512587562203407,
    -0.016892561689019203,
    -0.012631060555577278,
    -0.01745053194463253,
    -0.0034751109778881073,
    -0.006475946865975857,
    -0.03629599139094353,
    0.033729325979948044,
    -0.004031337797641754,
    0.0015684205573052168,
    -0.006685185711830854,
    -0.01050379779189825,
    0.03886265680193901,
    0.013774900697171688,
    -0.021914297714829445,
    0.017269192263484,
    0.009039124473929405,
    0.020003248006105423,
    0.014618830755352974,
    -0.040201783180236816,
    0.01763187162578106,
    -0.0030880188569426537,
    0.012547364458441734,
    -0.018747813999652863,
    -0.011563941836357117,
    -0.026629148051142693,
    0.02558295428752899,
    -0.02640596032142639,
    0.012017292901873589,
    -0.012875172309577465,
    0.031860124319791794,
    0.007504705339670181,
    0.006475946865975857,
    -0.0014463645638898015,
    -0.03213910758495331,
    0.04779018461704254,
    -0.014800171367824078,
    -0.004641618113964796,
    -0.02015668898820877,
    -0.020114840939641,
    -0.012331151403486729,
    0.026071177795529366,
    0.003661682363599539,
    0.0019424352794885635,
    0.015930062159895897,
    -0.003290283028036356,
    -0.004299861378967762,
    0.0064375861547887325,
    -0.020630965009331703,
    0.002442865166813135,
    -0.025666650384664536,
    0.026489656418561935,
    0.018845457583665848,
    -0.020226435735821724,
    0.01120126061141491,
    -0.007142024114727974,
    0.007930157706141472,
    -0.020045096054673195,
    -0.012561313807964325,
    0.028707589954137802,
    -0.012749629095196724,
    0.01620904728770256,
    -0.037886206060647964,
    0.01037127897143364,
    -0.01580451801419258,
    -0.01505125779658556,
    -0.012993741780519485,
    0.012812401168048382,
    -0.008655519224703312,
    -0.010259685106575489,
    -0.01580451801419258,
    0.0017654539551585913,
    -0.010127167217433453,
    0.012094013392925262,
    -0.0218306016176939,
    0.0013757463311776519,
    -0.009618018753826618,
    -0.022095637395977974,
    0.007860411889851093,
    -0.01069908682256937,
    0.04011809080839157,
    -0.015358141623437405,
    -0.02697787992656231,
    -0.012400897219777107,
    -0.013677255250513554,
    -0.004910141695290804,
    0.02012879028916359,
    0.002716619521379471,
    -0.035821713507175446,
    -0.01410968229174614,
    -0.07142024487257004,
    0.019361581653356552,
    -0.02079835534095764,
    -0.0253458172082901,
    0.02162136323750019,
    -0.014772272668778896,
    0.021426072344183922,
    -0.027075525373220444,
    0.005412315018475056,
    0.0033966463524848223,
    -0.0481528677046299,
    0.0036895808298140764,
    -0.0284844022244215,
    0.0024847129825502634,
    -0.017966654151678085,
    -0.003919743932783604,
    0.017743466421961784,
    -0.004467252641916275,
    0.04011809080839157,
    -0.00028290855698287487,
    -0.0004559666267596185,
    0.0021691108122467995,
    0.033729325979948044,
    0.01039917767047882,
    -0.012247455306351185,
    0.005074045620858669,
    -0.0033617732115089893,
    0.024606505408883095,
    -0.027340561151504517,
    6.522371404571459e-05,
    -0.005506472662091255,
    0.014632780104875565,
    -0.004230115097016096,
    0.02450885996222496,
    -0.003640758339315653,
    -0.009855156764388084,
    0.03760722279548645,
    0.021565565839409828,
    0.02782878652215004,
    0.0077557917684316635,
    -0.028121720999479294,
    -0.01933368295431137,
    -0.004034825135022402,
    -0.005579706281423569,
    0.022514116019010544,
    0.0007419266039505601,
    0.012163760140538216,
    -0.0029328332748264074,
    0.019180240109562874,
    0.01111756544560194,
    0.048710837960243225,
    0.000631204282399267,
    -0.024759946390986443,
    -0.03942062705755234,
    0.013523813337087631,
    -0.005593655630946159,
    0.01908259652554989,
    -0.004271962679922581,
    -0.01341221947222948,
    -0.0056913006119430065,
    0.01724129356443882,
    0.014911765232682228,
    0.009408780373632908,
    0.02054726891219616,
    -0.008760139346122742,
    -0.008327712304890156,
    -0.018357234075665474,
    -0.007351263426244259,
    -0.014060860499739647,
    -0.003794200485572219,
    -0.009924902580678463,
    -0.005506472662091255,
    0.01391439326107502,
    0.006671236362308264,
    0.03194382041692734,
    0.011396550573408604,
    0.008313762955367565,
    -0.004115033429116011,
    -0.005032197572290897,
    0.03261338546872139,
    0.007246643770486116,
    -0.024034585803747177,
    -0.001271998742595315,
    -0.00499383732676506,
    0.018747813999652863,
    0.019040748476982117,
    -0.026266468688845634,
    -0.002296397928148508,
    0.003389671677723527,
    0.007274542469531298,
    0.020045096054673195,
    0.007138536777347326,
    -0.0032275114208459854,
    0.008683417923748493,
    0.02201194129884243,
    0.030855776742100716,
    -0.003591936081647873,
    -0.026085127145051956,
    0.014479338191449642,
    0.0042266277596354485,
    0.004170830361545086,
    -0.011173361912369728,
    0.0054750870913267136,
    -0.034566279500722885,
    -0.006622414104640484,
    -0.013307600282132626,
    -0.023616107180714607,
    -0.0056808385998010635,
    0.007944107055664062,
    0.026280418038368225,
    0.023825345560908318,
    -0.03029780648648739,
    -0.024983135983347893,
    0.002252806443721056,
    -0.02510867826640606,
    0.013161132112145424,
    0.005056608933955431,
    -0.01620904728770256,
    -0.01412363164126873,
    0.008843834511935711,
    -0.01268685795366764,
    0.014039936475455761,
    0.03197171911597252,
    -0.015232598409056664,
    0.008383508771657944,
    0.02718712016940117,
    0.011766205541789532,
    -0.006695647723972797,
    0.02845650352537632,
    0.0011080948170274496,
    -0.01341221947222948,
    0.01037127897143364,
    -0.002531791804358363,
    -0.03294816613197327,
    0.008034776896238327,
    -0.023727701976895332,
    -0.003548344597220421,
    -0.019459227100014687,
    0.030604690313339233,
    0.07683255523443222,
    0.0019110494758933783,
    -0.010224811732769012,
    0.011654611676931381,
    -0.007616299204528332,
    0.04407967999577522,
    0.00852997601032257,
    0.011710409075021744,
    -0.016543829813599586,
    -0.023922991007566452,
    -0.011961495503783226,
    -0.0013330267975106835,
    -0.024843642488121986,
    -0.0180921982973814,
    -0.01442354079335928,
    0.002587588969618082,
    -0.013461042195558548,
    0.03819309175014496,
    -0.029126066714525223,
    -0.022932592779397964,
    0.009541298262774944,
    0.016125351190567017,
    0.0076093245297670364,
    -0.026489656418561935,
    -0.02993512526154518,
    0.0010531696025282145,
    0.025903787463903427,
    0.011584865860641003,
    0.00974356196820736,
    -0.04466554895043373,
    0.007281516678631306,
    -0.0009982443880289793,
    -0.019026799127459526,
    -0.007183872163295746,
    -0.0015108798397704959,
    -0.0033251564018428326,
    -0.00576453423127532,
    -0.00023299633176065981,
    -0.010824630036950111,
    -0.0029990922193974257,
    -0.007665121927857399,
    0.0006486408528871834,
    0.007679070811718702,
    -0.05334199219942093,
    0.0033251564018428326,
    -0.014576982706785202,
    -0.006012133788317442,
    0.0047288010828197,
    -0.04215468093752861
  ]
}
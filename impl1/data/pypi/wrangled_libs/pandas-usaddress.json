{
  "classifiers": [],
  "description": "# pandas-usaddress\nthe usaddress library made easy with pandas.\n\nalso supports standardizing addresses to meet usps standards.\n\n# installation\n\npip install pandas-usaddress\n\n# usage\n\n### basic parsing\n\n    import pandas as pd\n    import pandas_usaddress\n\n    #load dataframe\n    df = pd.read_csv('test_file.csv')\n\n    #initiate usaddress\n    df = pandas_usaddress.tag(df, ['address_field'])\n\n    #send output to csv\n    df.to_csv('parsed_output.csv')\n\n\n    #------------------------------additional details------------------------------\n\n    #output and fields will be identical to usaddress\n\n### parsing with address standardization\n\n    import pandas as pd\n    import pandas_usaddress\n\n    #load dataframe\n    df = pd.read_csv('test_file.csv')\n\n    #initiate usaddress\n    df = pandas_usaddress.tag(df, ['address_field'], granularity='medium', standardize=true)\n\n    #send output to csv\n    df.to_csv('parsed_output.csv')\n\n\n    #------------------------------additional details------------------------------\n\n    #the standard output for usaddress has a lot of fields. the granularity parameter\n    #allows you to condense the results you get back for different types of analysis.\n    #see parameter documentation below for all granularity options.\n\n    #addresses are often unstandardized. the same address can come as 123 1st st, or\n    #123 first street, etc. this can cause issues with analysis such as aggregation,\n    #or record matching. the standardize parameter attempts to standardize the address\n    #to us postal service (usps) standards.\n\n### parsing with address standardization\n\n    import pandas as pd\n    import pandas_usaddress\n\n    #load dataframe\n    df = pd.read_csv('test_file.csv')\n\n    #initiate usaddress\n    df = pandas_usaddress.tag(df, ['street1', 'street2', 'city', 'state'], granularity='single', standardize=true)\n\n    #send output to csv\n    df.to_csv('parsed_output.csv')\n\n\n    #------------------------------additional details------------------------------\n\n    #you can also use pandas-usaddress to concatenate and parse multiple address lines. \n    #this can be helpful when you are working with two datasets that have different \n    #field names and you want the field names to be standardized using a specific level of\n    #granularity. it's pretty common for instance that in one dataset will concatenate \n    #address line 1 and 2, and another will not.\n\n    #you will help the parser do it's job if you try to concatenate fields in approximately\n    #same order that you would write them on an envelope.\n\n    #in this instance, we are taking multiple address fields and converting them into a\n    #single address line. that's fine to do!\n\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pandas-usaddress",
  "package_url": "https://pypi.org/project/pandas-usaddress/",
  "project_url": "https://pypi.org/project/pandas-usaddress/",
  "project_urls": {
    "Homepage": "https://github.com/Lyonk71/pandas-usaddress"
  },
  "release_url": "https://pypi.org/project/pandas-usaddress/0.21/",
  "requires_dist": [
    "pandas",
    "usaddress"
  ],
  "requires_python": "",
  "summary": "the usaddress library made easy with pandas.",
  "version": "0.21",
  "releases": [],
  "developers": [
    "keith_lyons",
    "lyonk71@gmail.com"
  ],
  "kwds": "pandas_usaddress address_field to_csv read_csv csv",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pandas_usaddress",
  "homepage": "https://github.com/lyonk71/pandas-usaddress",
  "release_count": 2,
  "dependency_ids": [
    "pypi_pandas",
    "pypi_usaddress"
  ]
}
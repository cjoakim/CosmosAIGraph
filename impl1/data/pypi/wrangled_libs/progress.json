{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: isc license (iscl)",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "easy progress reporting for python\n==================================\n\n|pypi|\n\n|demo|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/progress.svg\n   :target: https://pypi.org/project/progress/\n.. |demo| image:: https://raw.github.com/verigak/progress/master/demo.gif\n   :alt: demo\n\nbars\n----\n\nthere are 7 progress bars to choose from:\n\n- ``bar``\n- ``chargingbar``\n- ``fillingsquaresbar``\n- ``fillingcirclesbar``\n- ``incrementalbar``\n- ``pixelbar``\n- ``shadybar``\n\nto use them, just call ``next`` to advance and ``finish`` to finish:\n\n.. code-block:: python\n\n    from progress.bar import bar\n\n    bar = bar('processing', max=20)\n    for i in range(20):\n        # do some work\n        bar.next()\n    bar.finish()\n\nor use any bar of this class as a context manager:\n\n.. code-block:: python\n\n    from progress.bar import bar\n\n    with bar('processing', max=20) as bar:\n        for i in range(20):\n            # do some work\n            bar.next()\n\nthe result will be a bar like the following: ::\n\n    processing |#############                   | 42/100\n\nto simplify the common case where the work is done in an iterator, you can\nuse the ``iter`` method:\n\n.. code-block:: python\n\n    for i in bar('processing').iter(it):\n        # do some work\n\nprogress bars are very customizable, you can change their width, their fill\ncharacter, their suffix and more:\n\n.. code-block:: python\n\n    bar = bar('loading', fill='@', suffix='%(percent)d%%')\n\nthis will produce a bar like the following: ::\n\n    loading |@@@@@@@@@@@@@                   | 42%\n\nyou can use a number of template arguments in ``message`` and ``suffix``:\n\n==========  ================================\nname        value\n==========  ================================\nindex       current value\nmax         maximum value\nremaining   max - index\nprogress    index / max\npercent     progress * 100\navg         simple moving average time per item (in seconds)\nelapsed     elapsed time in seconds\nelapsed_td  elapsed as a timedelta (useful for printing as a string)\neta         avg * remaining\neta_td      eta as a timedelta (useful for printing as a string)\n==========  ================================\n\ninstead of passing all configuration options on instatiation, you can create\nyour custom subclass:\n\n.. code-block:: python\n\n    class fancybar(bar):\n        message = 'loading'\n        fill = '*'\n        suffix = '%(percent).1f%% - %(eta)ds'\n\nyou can also override any of the arguments or create your own:\n\n.. code-block:: python\n\n    class slowbar(bar):\n        suffix = '%(remaining_hours)d hours remaining'\n        @property\n        def remaining_hours(self):\n            return self.eta // 3600\n\n\nspinners\n========\n\nfor actions with an unknown number of steps you can use a spinner:\n\n.. code-block:: python\n\n    from progress.spinner import spinner\n\n    spinner = spinner('loading ')\n    while state != 'finished':\n        # do some work\n        spinner.next()\n\nthere are 5 predefined spinners:\n\n- ``spinner``\n- ``piespinner``\n- ``moonspinner``\n- ``linespinner``\n- ``pixelspinner``\n\ninstallation\n============\n\ndownload from pypi\n\n.. code-block:: shell\n\n    pip install progress\n\n\nother\n=====\n\nthere are a number of other classes available too, please check the source or\nsubclass one of them to create your own.\n\n\nlicense\n=======\n\nprogress is licensed under isc\n",
  "docs_url": null,
  "keywords": "",
  "license": "isc",
  "name": "progress",
  "package_url": "https://pypi.org/project/progress/",
  "project_url": "https://pypi.org/project/progress/",
  "project_urls": {
    "Homepage": "http://github.com/verigak/progress/"
  },
  "release_url": "https://pypi.org/project/progress/1.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "easy to use progress bars",
  "version": "1.6",
  "releases": [],
  "developers": [
    "georgios_verigakis",
    "verigak@gmail.com"
  ],
  "kwds": "incrementalbar progress fillingsquaresbar slowbar pixelbar",
  "license_kwds": "isc",
  "libtype": "pypi",
  "id": "pypi_progress",
  "homepage": "http://github.com/verigak/progress/",
  "release_count": 9,
  "dependency_ids": []
}
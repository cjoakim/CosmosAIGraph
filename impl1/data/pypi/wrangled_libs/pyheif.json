{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: python :: 3"
  ],
  "description": "# pyheif\npython 3.6+ interface to [libheif](https://github.com/strukturag/libheif) library using cffi\n\n*note*: currently only reading is supported.\n\n## installation\n\n### simple installation - linux (installs manylinux2014 wheel, doesn't work with alpine)\n```\npip install --upgrade pip\npip install pyheif\n```\n\n### installing from source - macos\n```\nbrew install libffi libheif\npip install git+https://github.com/carsales/pyheif.git\n```\n\n### installing from source - linux\n```\napt install libffi libheif-dev libde265-dev\n```\nor\n```\nyum install libffi libheif-devel libde265-devel\n```\nthen\n```\npip install git+https://github.com/carsales/pyheif.git\n```\n\n### installing from source - windows\n```\nsorry, not going to happen!\n```\n\n## usage\n\n### read the primary image of a heif encoded file\n\nthe `pyheif.read(path_or_bytes)` function can be used to read the primary image of a heif encoded file. it can be passed any of the following:\n\n* a string path to a file on disk\n* a `pathlib.path` path object\n* a python `bytes` or `bytearray` object containing heif content\n* a file-like object with a `.read()` method that returns bytes\n\nit returns a `heiffile` object.\n\n```python\nimport pyheif\n\n# using a file path:\nheif_file = pyheif.read(\"img_7424.heic\")\n# or using bytes directly:\nheif_file = pyheif.read(open(\"img_7424.heic\", \"rb\").read())\n```\n\n### converting to a pillow image object\n\nif your heif file contains an image that you would like to manipulate, you can do so using the [pillow](https://pillow.readthedocs.io/) python library. you can convert a `heiffile` to a pillow image like so:\n\n```python\nfrom pil import image\nimport pyheif\n\nheif_file = pyheif.read(\"img_7424.heic\")\nimage = image.frombytes(\n    heif_file.mode, \n    heif_file.size, \n    heif_file.data,\n    \"raw\",\n    heif_file.mode,\n    heif_file.stride,\n    )\n```\n\n*note*: the `mode` property is passed twice - once to the `mode` argument of the `frombytes` method, and again to the `mode` argument of the `raw` decoder.\n\nyou can now use any pillow method to manipulate the file. here's how to convert it to jpeg:\n\n```python\nimage.save(\"img_7424.jpg\", \"jpeg\")\n```\n\n### read the entire container within the heif file\n\nthe `pyheif.open_container(path_or_bytes)` function can be used to read the heif container from a heif encoded file. it takes the same parameter as `pyheif.read()`\n\nit returns a `heifcontainer` object.\n\n## objects\n\n### the heiffile object\n\nthe `heiffile` has the following properties:\n\n* `mode` - the image mode, e.g. \"rgb\" or \"rgba\"\n* `size` - the size of the image as a `(width, height)` tuple of integers\n* `data` - the raw decoded file data, as bytes\n* `metadata` - a list of metadata dictionaries\n* `color_profile` - a color profile dictionary\n* `stride` - the number of bytes in a row of decoded file data\n* `bit_depth` - the number of bits in each component of a pixel\n\n### the undecodedheiffile object\n\nthis is a heif image that has not been decoded. calling the `undecodedheiffile.load()` method will load the data and the object will become a `heiffile`\n\n### the heifcontainer object\n\nthe `heifcontainer` has the following properties:\n\n* `primary_image` - the `heiftoplevelimage` object of the primary image in the file.\n* `top_level_images` - a list of all `heiftoplevelimage` objects in the file.\n\n### the heiftoplevelimage object\n\nthe `heiftoplevelimage` has the following properties:\n\n* `id` - the id of the image\n* `image` - the `undecodedheiffile` or `heiffile` object of the image\n* `is_primary` - is this the primary image in the container\n* `depth_image` - the `heifdepthimage` if there is one\n* `auxiliary_images` - a list of `heifauxiliaryimage` objects\n\n### the heifdepthimage object\n\nthe `heifdepthimage` has the following properties:\n\n* `id` - the id of the image\n* `image` - the `undecodedheiffile` or `heiffile` object of the image\n\n### the heifauxiliaryimage object\n\nthe `heifauxiliaryimage` has the following properties:\n\n* `id` - the id of the image\n* `image` - the `undecodedheiffile` or `heiffile` object of the image\n* `type` - a string indicating the type of auxiliary image\n\n\n\n",
  "docs_url": null,
  "keywords": "heif heic",
  "license": "",
  "name": "pyheif",
  "package_url": "https://pypi.org/project/pyheif/",
  "project_url": "https://pypi.org/project/pyheif/",
  "project_urls": {
    "Homepage": "https://github.com/carsales/pyheif"
  },
  "release_url": "https://pypi.org/project/pyheif/0.7.1/",
  "requires_dist": [
    "cffi (>=1.0.0)"
  ],
  "requires_python": ">= 3.6",
  "summary": "python 3.6+ interface to libheif library",
  "version": "0.7.1",
  "releases": [],
  "developers": [
    "ant32bit-carsales@users.noreply.github.com",
    "anthony_paes"
  ],
  "kwds": "pyheif pathlib pip libffi github",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyheif",
  "homepage": "https://github.com/carsales/pyheif",
  "release_count": 12,
  "dependency_ids": [
    "pypi_cffi"
  ]
}
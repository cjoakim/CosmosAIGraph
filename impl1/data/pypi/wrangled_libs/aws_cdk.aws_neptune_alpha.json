{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: aws cdk",
    "framework :: aws cdk :: 2",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon neptune construct library\n\n<!--begin stability banner-->---\n\n\n![cdk-constructs: experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> the apis of higher level constructs in this module are experimental and under active development.\n> they are subject to non-backward compatible changes or removal in any future version. these are\n> not subject to the [semantic versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. this means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n<!--end stability banner-->\n\namazon neptune is a fast, reliable, fully managed graph database service that makes it easy to build and run applications that work with highly connected datasets. the core of neptune is a purpose-built, high-performance graph database engine. this engine is optimized for storing billions of relationships and querying the graph with milliseconds latency. neptune supports the popular graph query languages apache tinkerpop gremlin and w3c\u2019s sparql, enabling you to build queries that efficiently navigate highly connected datasets.\n\nthe `@aws-cdk/aws-neptune-alpha` package contains primitives for setting up neptune database clusters and instances.\n\n```python\nimport aws_cdk.aws_neptune_alpha as neptune\n```\n\n## starting a neptune database\n\nto set up a neptune database, define a `databasecluster`. you must always launch a database in a vpc.\n\n```python\ncluster = neptune.databasecluster(self, \"database\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large\n)\n```\n\nby default only writer instance is provisioned with this construct.\n\n## connecting\n\nto control who can access the cluster, use the `.connections` attribute. neptune databases have a default port, so\nyou don't need to specify the port:\n\n```python\ncluster.connections.allow_default_port_from_any_ipv4(\"open to the world\")\n```\n\nthe endpoints to access your database cluster will be available as the `.clusterendpoint` and `.clusterreadendpoint`\nattributes:\n\n```python\nwrite_address = cluster.cluster_endpoint.socket_address\n```\n\n## iam authentication\n\nyou can also authenticate to a database cluster using aws identity and access management (iam) database authentication;\nsee [https://docs.aws.amazon.com/neptune/latest/userguide/iam-auth.html](https://docs.aws.amazon.com/neptune/latest/userguide/iam-auth.html) for more information and a list of supported\nversions and limitations.\n\nthe following example shows enabling iam authentication for a database cluster and granting connection access to an iam role.\n\n```python\ncluster = neptune.databasecluster(self, \"cluster\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large,\n    iam_authentication=true\n)\nrole = iam.role(self, \"dbrole\", assumed_by=iam.accountprincipal(self.account))\n# use one of the following statements to grant the role the necessary permissions\ncluster.grant_connect(role) # grant the role neptune-db:* access to the db\ncluster.grant(role, \"neptune-db:readdataviaquery\", \"neptune-db:writedataviaquery\")\n```\n\n## customizing parameters\n\nneptune allows configuring database behavior by supplying custom parameter groups.  for more details, refer to the\nfollowing link: [https://docs.aws.amazon.com/neptune/latest/userguide/parameters.html](https://docs.aws.amazon.com/neptune/latest/userguide/parameters.html)\n\n```python\ncluster_params = neptune.clusterparametergroup(self, \"clusterparams\",\n    description=\"cluster parameter group\",\n    parameters={\n        \"neptune_enable_audit_log\": \"1\"\n    }\n)\n\ndb_params = neptune.parametergroup(self, \"dbparams\",\n    description=\"db parameter group\",\n    parameters={\n        \"neptune_query_timeout\": \"120000\"\n    }\n)\n\ncluster = neptune.databasecluster(self, \"database\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large,\n    cluster_parameter_group=cluster_params,\n    parameter_group=db_params\n)\n```\n\nnote: if you want to use neptune engine `1.2.0.0` or later, you need to specify the corresponding `engineversion` prop to `neptune.databasecluster` and `family` prop of `parametergroupfamily.neptune_1_2` to `neptune.clusterparametergroup` and `neptune.parametergroup`.\n\n## adding replicas\n\n`databasecluster` allows launching replicas along with the writer instance. this can be specified using the `instancecount`\nattribute.\n\n```python\ncluster = neptune.databasecluster(self, \"database\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large,\n    instances=2\n)\n```\n\nadditionally, it is also possible to add replicas using `databaseinstance` for an existing cluster.\n\n```python\nreplica1 = neptune.databaseinstance(self, \"instance\",\n    cluster=cluster,\n    instance_type=neptune.instancetype.r5_large\n)\n```\n\n## automatic minor version upgrades\n\nby setting `autominorversionupgrade` to true, neptune will automatically update\nthe engine of the entire cluster to the latest minor version after a stabilization\nwindow of 2 to 3 weeks.\n\n```python\nneptune.databasecluster(self, \"cluster\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large,\n    auto_minor_version_upgrade=true\n)\n```\n\n## logging\n\nneptune supports various methods for monitoring performance and usage. one of those methods is logging\n\n1. neptune provides logs e.g. audit logs which can be viewed or downloaded via the aws console. audit logs can be enabled using the `neptune_enable_audit_log` parameter in `clusterparametergroup` or `parametergroup`\n2. neptune provides the ability to export those logs to cloudwatch logs\n\n```python\n# cluster parameter group with the neptune_enable_audit_log param set to 1\ncluster_parameter_group = neptune.clusterparametergroup(self, \"clusterparams\",\n    description=\"cluster parameter group\",\n    parameters={\n        \"neptune_enable_audit_log\": \"1\"\n    }\n)\n\ncluster = neptune.databasecluster(self, \"database\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.r5_large,\n    # audit logs are enabled via the clusterparametergroup\n    cluster_parameter_group=cluster_parameter_group,\n    # optionally configuring audit logs to be exported to cloudwatch logs\n    cloudwatch_logs_exports=[neptune.logtype.audit],\n    # optionally set a retention period on exported cloudwatch logs\n    cloudwatch_logs_retention=logs.retentiondays.one_month\n)\n```\n\nfor more information on monitoring, refer to https://docs.aws.amazon.com/neptune/latest/userguide/monitoring.html.\nfor more information on audit logs, refer to https://docs.aws.amazon.com/neptune/latest/userguide/auditing.html.\nfor more information on exporting logs to cloudwatch logs, refer to https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html.\n\n## metrics\n\nboth `databasecluster` and `databaseinstance` provide a `metric()` method to help with cluster-level and instance-level monitoring.\n\n```python\n# cluster: neptune.databasecluster\n# instance: neptune.databaseinstance\n\n\ncluster.metric(\"sparqlrequestspersec\") # cluster-level sparqlerrors metric\ninstance.metric(\"sparqlrequestspersec\")\n```\n\nfor more details on the available metrics, refer to https://docs.aws.amazon.com/neptune/latest/userguide/cw-metrics.html\n\n## neptune serverless\n\nyou can configure a neptune serverless cluster using the dedicated instance type along with the\n`serverlessscalingconfiguration` property.\n\n> visit [using amazon neptune serverless](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-serverless-using.html) for more details.\n\n```python\ncluster = neptune.databasecluster(self, \"serverlessdatabase\",\n    vpc=vpc,\n    instance_type=neptune.instancetype.serverless,\n    serverless_scaling_configuration=neptune.serverlessscalingconfiguration(\n        min_capacity=1,\n        max_capacity=5\n    )\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-neptune-alpha",
  "package_url": "https://pypi.org/project/aws-cdk.aws-neptune-alpha/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-neptune-alpha/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-neptune-alpha/2.117.0a0/",
  "requires_dist": [
    "aws-cdk-lib <3.0.0,>=2.117.0",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.93.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "the cdk construct library for aws::neptune",
  "version": "2.117.0a0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_neptune_alpha neptune_query_timeout neptune neptune_1_2 aws_cdk",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_neptune_alpha",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 173,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
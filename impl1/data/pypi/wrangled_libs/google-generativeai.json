{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# google ai python sdk\n\n[![pypi version](https://badge.fury.io/py/google-generativeai.svg)](https://badge.fury.io/py/google-generativeai)\n![python support](https://img.shields.io/pypi/pyversions/google-generativeai)\n![pypi - downloads](https://img.shields.io/pypi/dd/google-generativeai)\n\nthe google ai python sdk enables developers to use google's state-of-the-art generative ai\nmodels (like gemini and palm) to build ai-powered features and applications. this sdk\nsupports use cases like:\n\n- generate text from text-only input\n- generate text from text-and-images input (multimodal) (for gemini only)\n- build multi-turn conversations (chat)\n- embedding\n\nfor example, with just a few lines of code, you can access gemini's multimodal\ncapabilities to generate text from text-and-image input:\n\n```\nmodel = genai.generativemodel('gemini-pro-vision')\n\ncookie_picture = {\n    'mime_type': 'image/png',\n    'data': path('cookie.png').read_bytes()\n}\nprompt = \"give me a recipe for this:\"\n\nresponse = model.generate_content(\n    content=[prompt, cookie_picture]\n)\nprint(response.text)\n```\n\n\n## try out the api\n\ninstall from pypi.\n\n`pip install google-generativeai`\n\n[obtain an api key from ai studio](https://makersuite.google.com/app/apikey),\nthen configure it here.\n\nimport the sdk and load a model.\n\n```\nimport google.generativeai as genai\n\ngenai.configure(api_key=os.environ[\"api_key\"])\n\nmodel = genai.generativemodel('gemini-pro')\n```\n\nuse `generativemodel.generate_content` to have the model complete some initial text.\n\n```\nresponse = model.generate_content(\"the opposite of hot is\")\nprint(response.text)  # cold.\n```\n\nuse `generativemodel.start_chat` to have a discussion with a model.\n\n```\nchat = model.start_chat()\nresponse = chat.send_message('hello, what should i have for dinner?')\nprint(response.text) #  'here are some suggestions...'\nresponse = chat.send_message(\"how do i cook the first one?\")\n```\n\n\n\n## installation and usage\n\nrun [`pip install google-generativeai`](https://pypi.org/project/google-generativeai).\n\nfor detailed instructions, you can find a\n[quickstart](https://ai.google.dev/tutorials/python_quickstart) for the google ai\npython sdk in the google documentation.\n\nthis quickstart describes how to add your api key and install the sdk in your app,\ninitialize the model, and then call the api to access the model. it also describes some\nadditional use cases and features, like streaming, embedding, counting tokens, and\ncontrolling responses.\n\n\n## documentation\n\nfind complete documentation for the google ai sdks and the gemini model in the google\ndocumentation: https://ai.google.dev/docs\n\n\n## contributing\n\nsee [contributing](https://github.com/google/generative-ai-python/blob/main/contributing.md) for more information on contributing to the google ai python sdk.\n\n## developers who use the palm api\n\n### migrate to use the gemini api\n\ncheck our [migration guide](https://ai.google.dev/docs/migration_guide) in the google\ndocumentation.\n\n### installation and usage for the palm api\n\ninstall from pypi.\n\n`pip install google-generativeai`\n\n[obtain an api key from ai studio](https://makersuite.google.com/app/apikey), then\nconfigure it here.\n\n```\nimport google.generativeai as palm\n\npalm.configure(api_key=os.environ[\"palm_api_key\"])\n```\n\nuse `palm.generate_text` to have the model complete some initial text.\n\n```\nresponse = palm.generate_text(prompt=\"the opposite of hot is\")\nprint(response.result)  # cold.\n```\n\nuse `palm.chat` to have a discussion with a model.\n\n```\nresponse = palm.chat(messages=[\"hello.\"])\nprint(response.last) #  'hello! what can i help you with?'\nresponse.reply(\"can you tell me a joke?\")\n```\n\n### documentation for the palm api\n\n- [general palm documentation](https://ai.google.dev/docs/palm_api_overview)\n\n- [text quickstart](https://github.com/google/generative-ai-docs/blob/main/site/en/palm_docs/text_quickstart.ipynb)\n\n- [chat quickstart](https://github.com/google/generative-ai-docs/blob/main/site/en/palm_docs/chat_quickstart.ipynb)\n\n- [tuning quickstart](https://github.com/google/generative-ai-docs/blob/main/site/en/palm_docs/tuning_quickstart_python.ipynb)\n\n### colab magics\n\nonce installed, use the python client via the `%%palm` colab magic. read the [full guide](https://github.com/google/generative-ai-docs/blob/main/site/en/palm_docs/notebook_magic.ipynb).\n\n```\n%%palm\nthe best thing since sliced bread is\n```\n\n## license\n\nthe contents of this repository are licensed under the [apache license, version 2.0](http://www.apache.org/licenses/license-2.0).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "google-generativeai",
  "package_url": "https://pypi.org/project/google-generativeai/",
  "project_url": "https://pypi.org/project/google-generativeai/",
  "project_urls": {
    "Homepage": "https://github.com/google/generative-ai-python"
  },
  "release_url": "https://pypi.org/project/google-generativeai/0.3.2/",
  "requires_dist": [
    "google-ai-generativelanguage ==0.4.0",
    "google-auth",
    "google-api-core",
    "typing-extensions",
    "protobuf",
    "tqdm",
    "absl-py ; extra == 'dev'",
    "black ; extra == 'dev'",
    "nose2 ; extra == 'dev'",
    "pandas ; extra == 'dev'",
    "pytype ; extra == 'dev'",
    "pyyaml ; extra == 'dev'",
    "Pillow ; extra == 'dev'",
    "ipython ; extra == 'dev'"
  ],
  "requires_python": ">=3.9",
  "summary": "google generative ai high level api client library and tools.",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "google_llc",
    "googleapis-packages@google.com"
  ],
  "kwds": "multimodal generativeai generate_text generative ai",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_google_generativeai",
  "homepage": "https://github.com/google/generative-ai-python",
  "release_count": 10,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_black",
    "pypi_google_ai_generativelanguage",
    "pypi_google_api_core",
    "pypi_google_auth",
    "pypi_ipython",
    "pypi_nose2",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_protobuf",
    "pypi_pytype",
    "pypi_pyyaml",
    "pypi_tqdm",
    "pypi_typing_extensions"
  ]
}
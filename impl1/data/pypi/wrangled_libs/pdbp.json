{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: win32 (ms windows)",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering",
    "topic :: software development",
    "topic :: software development :: debuggers",
    "topic :: software development :: libraries",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "# pdbp (pdb+) [![](https://img.shields.io/pypi/v/pdbp.svg)](https://pypi.python.org/pypi/pdbp)\n\n<img width=\"680\" alt=\"pdb+ advanced python console debugger\" src=\"https://user-images.githubusercontent.com/6788579/247826485-d782911e-d817-4ea6-86dd-215991d7b8ea.png\">\n\n--------\n\n**[pdbp (pdb+)](https://github.com/mdmintz/pdbp)** is an advanced console debugger for python. it can be used as a drop-in replacement for [pdb](https://docs.python.org/3/library/pdb.html) and [pdbpp](https://github.com/pdbpp/pdbpp).\n\n<p><b>pdbp (pdb+)</b> makes python debugging a lot easier (and more fun!)</p>\n\n--------\n\n<img width=\"650\" alt=\"pdb+\" src=\"https://user-images.githubusercontent.com/6788579/234679015-b1daa50f-94a8-4ef2-b3f5-3157b7a3733b.png\">\n\n\n## installation:\n\n```bash\npip install pdbp\n```\n\nthen add ``import pdbp`` to an ``__init__.py`` of your project, which will automatically make **``pdb+``** the default debugger at breakpoints:\n\n```python\nimport pdbp\n```\n\n(if using ``flake8`` for code-linting, you may want to add ``# noqa`` to that line):\n\n```python\nimport pdbp  # noqa\n```\n\nyou can also make ``pdbp`` the default debugger by setting an environmental variable:\n\n```bash\npythonbreakpoint=pdbp.set_trace\n```\n\n## usage:\n\nto trigger a breakpoint in your code with ``pytest``, add ``--trace`` (to start tests with a breakpoint) or ``--pdb`` (to trigger a breakpoint if a test fails).\n\nto trigger a breakpoint from a pure ``python`` run, use:\n\n```bash\npython -m pdbp <script.py>\n```\n\n--------\n\nbasic **``pdb+``** console commands:\n``n``, ``c``, ``s``, ``u``, ``d`` => ``next``, ``continue``, ``step``, ``up``, ``down``\n\n(to learn more **pdb+** console commands, type ``help`` in the **pdb+** console and press ``enter/return``.)\n\n--------\n\n**``pdbp`` (pdb+)** makes improvements to ``pdbpp`` so that it works in all environments. it also includes other bug-fixes. \"sticky\" mode is the default option, which shows multiple lines of code while letting you see where you're going (while typing ``n`` + ``enter``).\n\nif you somehow reset ``pdb`` to python's built-in version, you can always replace ``pdb`` with **``pdbp``** again as the default debugger by running this:\n\n```python\nimport pdb\nimport pdbp\nfor key in pdbp.__dict__.keys():\n    pdb.__dict__[key] = pdbp.__dict__[key]\n```\n\nhere's how to customize **``pdbp``**/``pdb`` options if you don't like the default settings: (<i>shown below are the default settings.</i>)\n\n```python\nimport pdb\nif hasattr(pdb, \"defaultconfig\"):\n    pdb.defaultconfig.filename_color = pdb.color.fuchsia\n    pdb.defaultconfig.line_number_color = pdb.color.turquoise\n    pdb.defaultconfig.truncate_long_lines = false\n    pdb.defaultconfig.sticky_by_default = true\n```\n\nyou can also trigger **``pdb+``** activation like this:\n\n```python\nimport pdbp\npdbp.set_trace()\n```\n\n\n### pdbp (pdb+) commands:\n\n<img width=\"760\" alt=\"pdb+ commands\" src=\"https://user-images.githubusercontent.com/6788579/232948402-8700033f-a1b2-45f6-82e5-6b1a83d3d6c4.png\">\n\n\n### post mortem debug mode:\n\n<img width=\"640\" alt=\"pdb+ post mortem debug mode\" src=\"https://user-images.githubusercontent.com/6788579/232537816-0b9e9048-724f-48cb-81e3-5cc403109de9.png\">\n\n\n### the ``where`` / ``w`` command, which displays the current stack:\n\n<img width=\"870\" alt=\"example of the 'where' command\" src=\"https://user-images.githubusercontent.com/6788579/232962807-2d469603-a1d0-4891-8d0e-f03a4e1d0d00.png\">\n\n--------\n\n### sticky mode vs non-sticky mode:\n\nthe default mode (``sticky``) lets you see a lot more lines of code from the debugger when active. in non-sticky mode, only one line of code is shown at a time. you can switch between the two modes by typing ``sticky`` in the **pdb+** console prompt and pressing ``enter/return``.\n\n> **sticky mode:**\n\n<img width=\"600\" alt=\"pdb+ stick mode\" src=\"https://user-images.githubusercontent.com/6788579/204890148-53d2567b-9a56-4243-a7d7-66100a284312.png\">\n\n> **non-sticky mode:**\n\n<img width=\"600\" alt=\"pdb+ non-sticky mode\" src=\"https://user-images.githubusercontent.com/6788579/204890164-8465bc22-0f20-43f1-8ab7-b4316718a4c6.png\">\n\n--------\n\n### tab completion:\n\n<img width=\"584\" alt=\"pdb+ tab completion\" src=\"https://user-images.githubusercontent.com/6788579/254074593-31fcd816-7a3f-445d-82e9-fc2c8d4d873c.png\">\n\n--------\n\n### multi-layer highlighting in the same stack:\n\n<img width=\"536\" alt=\"pdb+ advanced python console debugger\" src=\"https://user-images.githubusercontent.com/6788579/207925754-4d4ffce5-be6c-44b6-b614-ae0e800a93d8.png\">\n\n\n### more examples:\n\n**``pdb+``** is used by packages such as **``seleniumbase``**:\n\n* https://pypi.org/project/seleniumbase/\n* https://github.com/seleniumbase/seleniumbase\n\n--------\n\n<img width=\"650\" alt=\"pdb+ advanced python console debugger\" src=\"https://user-images.githubusercontent.com/6788579/234669562-30dae4ad-1207-47e4-8327-fbd5662c8b9c.png\">\n\n--------\n\n(**pdb+** is maintained by the [seleniumbase dev team](https://github.com/seleniumbase/seleniumbase))\n",
  "docs_url": null,
  "keywords": "pdb debugger tab color completion",
  "license": "mit",
  "name": "pdbp",
  "package_url": "https://pypi.org/project/pdbp/",
  "project_url": "https://pypi.org/project/pdbp/",
  "project_urls": {
    "Bug Tracker": "https://github.com/mdmintz/pdbp/issues",
    "Changelog": "https://github.com/mdmintz/pdbp/releases",
    "Download": "https://pypi.org/project/pdbp/#files",
    "Homepage": "https://github.com/mdmintz/pdbp",
    "PyPI": "https://pypi.org/project/pdbp/",
    "Source": "https://github.com/mdmintz/pdbp"
  },
  "release_url": "https://pypi.org/project/pdbp/1.5.0/",
  "requires_dist": [
    "pygments >=2.16.1",
    "tabcompleter >=1.3.0",
    "colorama >=0.4.6 ; platform_system == \"Windows\""
  ],
  "requires_python": ">=3.7",
  "summary": "pdbp (pdb+): a drop-in replacement for pdb and pdbpp.",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "mdmintz@gmail.com",
    "michael_mintz"
  ],
  "kwds": "pdbp debugger pdb pdbpp filename_color",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pdbp",
  "homepage": "https://github.com/mdmintz/pdbp",
  "release_count": 24,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_pygments",
    "pypi_tabcompleter"
  ]
}
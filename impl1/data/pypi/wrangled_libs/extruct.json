{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "=======\nextruct\n=======\n\n.. image:: https://github.com/scrapinghub/extruct/workflows/build/badge.svg?branch=master\n    :target: https://github.com/scrapinghub/extruct/actions\n    :alt: build status\n\n.. image:: https://img.shields.io/codecov/c/github/scrapinghub/extruct/master.svg?maxage=2592000\n    :target: https://codecov.io/gh/scrapinghub/extruct\n    :alt: coverage report\n\n.. image:: https://img.shields.io/pypi/v/extruct.svg\n   :target: https://pypi.python.org/pypi/extruct\n   :alt: pypi version\n\n\n*extruct* is a library for extracting embedded metadata from html markup.\n\ncurrently, *extruct* supports:\n\n- `w3c's html microdata`_\n- `embedded json-ld`_\n- `microformat`_ via `mf2py`_\n- `facebook's open graph`_\n- (experimental) `rdfa`_ via `rdflib`_\n- `dublin core metadata (dc-html-2003)`_\n\n.. _w3c's html microdata: http://www.w3.org/tr/microdata/\n.. _embedded json-ld: http://www.w3.org/tr/json-ld/#embedding-json-ld-in-html-documents\n.. _rdfa: https://www.w3.org/tr/html-rdfa/\n.. _rdflib: https://pypi.python.org/pypi/rdflib/\n.. _microformat: http://microformats.org/wiki/main_page\n.. _mf2py: https://github.com/microformats/mf2py\n.. _facebook's open graph: http://ogp.me/\n.. _dublin core metadata (dc-html-2003): https://www.dublincore.org/specifications/dublin-core/dcq-html/2003-11-30/\n\nthe microdata algorithm is a revisit of `this scrapinghub blog post`_ showing how to use exslt extensions.\n\n.. _this scrapinghub blog post: http://blog.scrapinghub.com/2014/06/18/extracting-schema-org-microdata-using-scrapy-selectors-and-xpath/\n\n\ninstallation\n------------\n\n::\n\n    pip install extruct\n\n\nusage\n-----\n\nall-in-one extraction\n+++++++++++++++++++++\n\nthe simplest example how to use extruct is to call\n``extruct.extract(htmlstring, base_url=base_url)``\nwith some html string and an optional base url.\n\nlet's try this on a webpage that uses all the syntaxes supported (rdfa with `ogp`_).\n\nfirst fetch the html using python-requests and then feed the response body to ``extruct``::\n\n  >>> import extruct\n  >>> import requests\n  >>> import pprint\n  >>> from w3lib.html import get_base_url\n  >>>\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>> r = requests.get('https://www.optimizesmart.com/how-to-use-open-graph-protocol/')\n  >>> base_url = get_base_url(r.text, r.url)\n  >>> data = extruct.extract(r.text, base_url=base_url)\n  >>>\n  >>> pp.pprint(data)\n  { 'dublincore': [ { 'elements': [ { 'uri': 'http://purl.org/dc/elements/1.1/description',\n                                        'content': 'what is open graph protocol '\n                                                   'and why you need it? learn to '\n                                                   'implement open graph protocol '\n                                                   'for facebook on your website. '\n                                                   'open graph protocol meta tags.',\n                                        'name': 'description'}],\n                        'namespaces': {},\n                        'terms': []}],\n\n  'json-ld': [ { '@context': 'https://schema.org',\n                   '@id': '#organization',\n                   '@type': 'organization',\n                   'logo': 'https://www.optimizesmart.com/wp-content/uploads/2016/03/optimize-smart-twitter-logo.jpg',\n                   'name': 'optimize smart',\n                   'sameas': [ 'https://www.facebook.com/optimizesmart/',\n                               'https://uk.linkedin.com/in/analyticsnerd',\n                               'https://www.youtube.com/user/optimizesmart',\n                               'https://twitter.com/analyticsnerd'],\n                   'url': 'https://www.optimizesmart.com/'}],\n    'microdata': [ { 'properties': {'headline': ''},\n                     'type': 'http://schema.org/wpheader'}],\n    'microformat': [ { 'children': [ { 'properties': { 'category': [ 'specialized-tracking'],\n                                                       'name': [ 'open graph '\n                                                                 'protocol for '\n                                                                 'facebook '\n                                                                 'explained with '\n                                                                 'examples\\n'\n                                                                 '\\n'\n                                                                 'specialized '\n                                                                 'tracking\\n'\n                                                                 '\\n'\n                                                                 '\\n'\n                                                                 (...)\n                                                                 'follow '\n                                                                 '@analyticsnerd\\n'\n                                                                 '!function(d,s,id){var '\n                                                                 \"js,fjs=d.getelementsbytagname(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getelementbyid(id)){js=d.createelement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentnode.insertbefore(js,fjs);}}(document, \"\n                                                                 \"'script', \"\n                                                                 \"'twitter-wjs');\"]},\n                                       'type': ['h-entry']}],\n                       'properties': { 'name': [ 'open graph protocol for '\n                                                 'facebook explained with '\n                                                 'examples\\n'\n                                                 (...)\n                                                 'follow @analyticsnerd\\n'\n                                                 '!function(d,s,id){var '\n                                                 \"js,fjs=d.getelementsbytagname(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getelementbyid(id)){js=d.createelement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentnode.insertbefore(js,fjs);}}(document, \"\n                                                 \"'script', 'twitter-wjs');\"]},\n                       'type': ['h-feed']}],\n    'opengraph': [ { 'namespace': {'og': 'http://ogp.me/ns#'},\n                     'properties': [ ('og:locale', 'en_us'),\n                                     ('og:type', 'article'),\n                                     ( 'og:title',\n                                       'open graph protocol for facebook '\n                                       'explained with examples'),\n                                     ( 'og:description',\n                                       'what is open graph protocol and why you '\n                                       'need it? learn to implement open graph '\n                                       'protocol for facebook on your website. '\n                                       'open graph protocol meta tags.'),\n                                     ( 'og:url',\n                                       'https://www.optimizesmart.com/how-to-use-open-graph-protocol/'),\n                                     ('og:site_name', 'optimize smart'),\n                                     ( 'og:updated_time',\n                                       '2018-03-09t16:26:35+00:00'),\n                                     ( 'og:image',\n                                       'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'),\n                                     ( 'og:image:secure_url',\n                                       'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg')]}],\n    'rdfa': [ { '@id': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/#header',\n                'http://www.w3.org/1999/xhtml/vocab#role': [ { '@id': 'http://www.w3.org/1999/xhtml/vocab#banner'}]},\n              { '@id': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/',\n                'article:modified_time': [ { '@value': '2018-03-09t16:26:35+00:00'}],\n                'article:published_time': [ { '@value': '2010-07-02t18:57:23+00:00'}],\n                'article:publisher': [ { '@value': 'https://www.facebook.com/optimizesmart/'}],\n                'article:section': [{'@value': 'specialized tracking'}],\n                'http://ogp.me/ns#description': [ { '@value': 'what is open '\n                                                              'graph protocol '\n                                                              'and why you need '\n                                                              'it? learn to '\n                                                              'implement open '\n                                                              'graph protocol '\n                                                              'for facebook on '\n                                                              'your website. '\n                                                              'open graph '\n                                                              'protocol meta '\n                                                              'tags.'}],\n                'http://ogp.me/ns#image': [ { '@value': 'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'}],\n                'http://ogp.me/ns#image:secure_url': [ { '@value': 'https://www.optimizesmart.com/wp-content/uploads/2010/07/open-graph-protocol.jpg'}],\n                'http://ogp.me/ns#locale': [{'@value': 'en_us'}],\n                'http://ogp.me/ns#site_name': [{'@value': 'optimize smart'}],\n                'http://ogp.me/ns#title': [ { '@value': 'open graph protocol for '\n                                                        'facebook explained with '\n                                                        'examples'}],\n                'http://ogp.me/ns#type': [{'@value': 'article'}],\n                'http://ogp.me/ns#updated_time': [ { '@value': '2018-03-09t16:26:35+00:00'}],\n                'http://ogp.me/ns#url': [ { '@value': 'https://www.optimizesmart.com/how-to-use-open-graph-protocol/'}],\n                'https://api.w.org/': [ { '@id': 'https://www.optimizesmart.com/wp-json/'}]}]}\n\nselect syntaxes\n+++++++++++++++\nit is possible to select which syntaxes to extract by passing a list with the desired ones to extract. valid values: 'microdata', 'json-ld', 'opengraph', 'microformat', 'rdfa' and 'dublincore'. if no list is passed all syntaxes will be extracted and returned::\n\n  >>> r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')\n  >>> base_url = get_base_url(r.text, r.url)\n  >>> data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])\n  >>>\n  >>> pp.pprint(data)\n  { 'microdata': [],\n    'opengraph': [ { 'namespace': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',\n                                    'fb': 'http://www.facebook.com/2008/fbml',\n                                    'og': 'http://ogp.me/ns#'},\n                     'properties': [ ('fb:app_id', '308540029359'),\n                                     ('og:site_name', 'songkick'),\n                                     ('og:type', 'songkick-concerts:artist'),\n                                     ('og:title', 'elysian fields'),\n                                     ( 'og:description',\n                                       'find out when elysian fields is next '\n                                       'playing live near you. list of all '\n                                       'elysian fields tour dates and concerts.'),\n                                     ( 'og:url',\n                                       'https://www.songkick.com/artists/236156-elysian-fields'),\n                                     ( 'og:image',\n                                       'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg')]}],\n    'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',\n                'al:ios:app_name': [{'@value': 'songkick concerts'}],\n                'al:ios:app_store_id': [{'@value': '438690886'}],\n                'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],\n                'http://ogp.me/ns#description': [ { '@value': 'find out when '\n                                                              'elysian fields is '\n                                                              'next playing live '\n                                                              'near you. list of '\n                                                              'all elysian '\n                                                              'fields tour dates '\n                                                              'and concerts.'}],\n                'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],\n                'http://ogp.me/ns#site_name': [{'@value': 'songkick'}],\n                'http://ogp.me/ns#title': [{'@value': 'elysian fields'}],\n                'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],\n                'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n                'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}\n\nalternatively, if you already parsed the html before calling extruct, you can use the tree instead of the html string: ::\n\n  >>> # using the request from the previous example\n  >>> base_url = get_base_url(r.text, r.url)\n  >>> from extruct.utils import parse_html\n  >>> tree = parse_html(r.text)\n  >>> data = extruct.extract(tree, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'])\n\nmicroformat format doesn't support the html tree, so you need to use a html string.\n\nuniform\n+++++++\nanother option is to uniform the output of microformat, opengraph, microdata, dublincore and json-ld syntaxes to the following structure: ::\n\n    {'@context': 'http://example.com',\n                 '@type': 'example_type',\n                 /* all other the properties in keys here */\n                 }\n\nto do so set ``uniform=true`` when calling ``extract``, it's false by default for backward compatibility. here the same example as before but with uniform set to true: ::\n\n  >>> r = requests.get('http://www.songkick.com/artists/236156-elysian-fields')\n  >>> base_url = get_base_url(r.text, r.url)\n  >>> data = extruct.extract(r.text, base_url, syntaxes=['microdata', 'opengraph', 'rdfa'], uniform=true)\n  >>>\n  >>> pp.pprint(data)\n  { 'microdata': [],\n    'opengraph': [ { '@context': { 'concerts': 'http://ogp.me/ns/fb/songkick-concerts#',\n                                 'fb': 'http://www.facebook.com/2008/fbml',\n                                 'og': 'http://ogp.me/ns#'},\n                   '@type': 'songkick-concerts:artist',\n                   'fb:app_id': '308540029359',\n                   'og:description': 'find out when elysian fields is next '\n                                     'playing live near you. list of all '\n                                     'elysian fields tour dates and concerts.',\n                   'og:image': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg',\n                   'og:site_name': 'songkick',\n                   'og:title': 'elysian fields',\n                   'og:url': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n    'rdfa': [ { '@id': 'https://www.songkick.com/artists/236156-elysian-fields',\n                'al:ios:app_name': [{'@value': 'songkick concerts'}],\n                'al:ios:app_store_id': [{'@value': '438690886'}],\n                'al:ios:url': [ { '@value': 'songkick://artists/236156-elysian-fields'}],\n                'http://ogp.me/ns#description': [ { '@value': 'find out when '\n                                                              'elysian fields is '\n                                                              'next playing live '\n                                                              'near you. list of '\n                                                              'all elysian '\n                                                              'fields tour dates '\n                                                              'and concerts.'}],\n                'http://ogp.me/ns#image': [ { '@value': 'http://images.sk-static.com/images/media/img/col4/20100330-103600-169450.jpg'}],\n                'http://ogp.me/ns#site_name': [{'@value': 'songkick'}],\n                'http://ogp.me/ns#title': [{'@value': 'elysian fields'}],\n                'http://ogp.me/ns#type': [{'@value': 'songkick-concerts:artist'}],\n                'http://ogp.me/ns#url': [ { '@value': 'https://www.songkick.com/artists/236156-elysian-fields'}],\n                'http://www.facebook.com/2008/fbmlapp_id': [ { '@value': '308540029359'}]}]}\n\nnb rdfa structure is not uniformed yet.\n\nreturning html node\n+++++++++++++++++++\n\nit is also possible to get references to html node for every extracted metadata item.\nthe feature is supported only by microdata syntax.\n\nto use that, just set the ``return_html_node`` option of ``extract`` method to ``true``.\nas the result, an additional key \"nodehtml\" will be included in the result for every\nitem. each node is of ``lxml.etree.element`` type: ::\n\n  >>> r = requests.get('http://www.rugpadcorner.com/shop/no-muv/')\n  >>> base_url = get_base_url(r.text, r.url)\n  >>> data = extruct.extract(r.text, base_url, syntaxes=['microdata'], return_html_node=true)\n  >>>\n  >>> pp.pprint(data)\n  { 'microdata': [ { 'htmlnode': <element div at 0x7f10f8e6d3b8>,\n                     'properties': { 'description': 'keep rugs flat on carpet!\\n'\n                                                    'not your thin sticky pad, '\n                                                    'no-muv is truly the best!',\n                                     'image': ['', ''],\n                                     'name': ['no-muv', 'no-muv'],\n                                     'offers': [ { 'htmlnode': <element div at 0x7f10f8e6d138>,\n                                                   'properties': { 'availability': 'http://schema.org/instock',\n                                                                   'price': 'price:  '\n                                                                            '$45'},\n                                                   'type': 'http://schema.org/offer'},\n                                                 { 'htmlnode': <element div at 0x7f10f8e60f48>,\n                                                   'properties': { 'availability': 'http://schema.org/instock',\n                                                                   'price': '(select '\n                                                                            'size/shape '\n                                                                            'for '\n                                                                            'pricing)'},\n                                                   'type': 'http://schema.org/offer'}],\n                                     'ratingvalue': ['5.00', '5.00']},\n                     'type': 'http://schema.org/product'}]}\n\nsingle extractors\n-----------------\n\nyou can also use each extractor individually. see below.\n\nmicrodata extraction\n++++++++++++++++++++\n::\n\n  >>> import pprint\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>>\n  >>> from extruct.w3cmicrodata import microdataextractor\n  >>>\n  >>> # example from http://www.w3.org/tr/microdata/#associating-names-with-items\n  >>> html = \"\"\"<!doctype html>\n  ... <html>\n  ...  <head>\n  ...   <title>photo gallery</title>\n  ...  </head>\n  ...  <body>\n  ...   <h1>my photos</h1>\n  ...   <figure itemscope itemtype=\"http://n.whatwg.org/work\" itemref=\"licenses\">\n  ...    <img itemprop=\"work\" src=\"images/house.jpeg\" alt=\"a white house, boarded up, sits in a forest.\">\n  ...    <figcaption itemprop=\"title\">the house i found.</figcaption>\n  ...   </figure>\n  ...   <figure itemscope itemtype=\"http://n.whatwg.org/work\" itemref=\"licenses\">\n  ...    <img itemprop=\"work\" src=\"images/mailbox.jpeg\" alt=\"outside the house is a mailbox. it has a leaflet inside.\">\n  ...    <figcaption itemprop=\"title\">the mailbox.</figcaption>\n  ...   </figure>\n  ...   <footer>\n  ...    <p id=\"licenses\">all images licensed under the <a itemprop=\"license\"\n  ...    href=\"http://www.opensource.org/licenses/mit-license.php\">mit\n  ...    license</a>.</p>\n  ...   </footer>\n  ...  </body>\n  ... </html>\"\"\"\n  >>>\n  >>> mde = microdataextractor()\n  >>> data = mde.extract(html)\n  >>> pp.pprint(data)\n  [{'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',\n                   'title': 'the house i found.',\n                   'work': 'http://www.example.com/images/house.jpeg'},\n    'type': 'http://n.whatwg.org/work'},\n   {'properties': {'license': 'http://www.opensource.org/licenses/mit-license.php',\n                   'title': 'the mailbox.',\n                   'work': 'http://www.example.com/images/mailbox.jpeg'},\n    'type': 'http://n.whatwg.org/work'}]\n\njson-ld extraction\n++++++++++++++++++\n::\n\n  >>> import pprint\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>>\n  >>> from extruct.jsonld import jsonldextractor\n  >>>\n  >>> html = \"\"\"<!doctype html>\n  ... <html>\n  ...  <head>\n  ...   <title>some person page</title>\n  ...  </head>\n  ...  <body>\n  ...   <h1>this guys</h1>\n  ...     <script type=\"application/ld+json\">\n  ...     {\n  ...       \"@context\": \"http://schema.org\",\n  ...       \"@type\": \"person\",\n  ...       \"name\": \"john doe\",\n  ...       \"jobtitle\": \"graduate research assistant\",\n  ...       \"affiliation\": \"university of dreams\",\n  ...       \"additionalname\": \"johnny\",\n  ...       \"url\": \"http://www.example.com\",\n  ...       \"address\": {\n  ...         \"@type\": \"postaladdress\",\n  ...         \"streetaddress\": \"1234 peach drive\",\n  ...         \"addresslocality\": \"wonderland\",\n  ...         \"addressregion\": \"georgia\"\n  ...       }\n  ...     }\n  ...     </script>\n  ...  </body>\n  ... </html>\"\"\"\n  >>>\n  >>> jslde = jsonldextractor()\n  >>>\n  >>> data = jslde.extract(html)\n  >>> pp.pprint(data)\n  [{'@context': 'http://schema.org',\n    '@type': 'person',\n    'additionalname': 'johnny',\n    'address': {'@type': 'postaladdress',\n                'addresslocality': 'wonderland',\n                'addressregion': 'georgia',\n                'streetaddress': '1234 peach drive'},\n    'affiliation': 'university of dreams',\n    'jobtitle': 'graduate research assistant',\n    'name': 'john doe',\n    'url': 'http://www.example.com'}]\n\n\nrdfa extraction (experimental)\n++++++++++++++++++++++++++++++\n\n::\n\n  >>> import pprint\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>> from extruct.rdfa import rdfaextractor  # you can ignore the warning about html5lib not being available\n  info:rdflib:rdflib version: 4.2.1\n  /home/paul/.virtualenvs/extruct.wheel.test/lib/python3.5/site-packages/rdflib/plugins/parsers/structureddata.py:30: userwarning: html5lib not found! rdfa and microdata parsers will not be available.\n    'parsers will not be available.')\n  >>>\n  >>> html = \"\"\"<html>\n  ...  <head>\n  ...    ...\n  ...  </head>\n  ...  <body prefix=\"dc: http://purl.org/dc/terms/ schema: http://schema.org/\">\n  ...    <div resource=\"/alice/posts/trouble_with_bob\" typeof=\"schema:blogposting\">\n  ...       <h2 property=\"dc:title\">the trouble with bob</h2>\n  ...       ...\n  ...       <h3 property=\"dc:creator schema:creator\" resource=\"#me\">alice</h3>\n  ...       <div property=\"schema:articlebody\">\n  ...         <p>the trouble with bob is that he takes much better photos than i do:</p>\n  ...       </div>\n  ...      ...\n  ...    </div>\n  ...  </body>\n  ... </html>\n  ... \"\"\"\n  >>>\n  >>> rdfae = rdfaextractor()\n  >>> pp.pprint(rdfae.extract(html, base_url='http://www.example.com/index.html'))\n  [{'@id': 'http://www.example.com/alice/posts/trouble_with_bob',\n    '@type': ['http://schema.org/blogposting'],\n    'http://purl.org/dc/terms/creator': [{'@id': 'http://www.example.com/index.html#me'}],\n    'http://purl.org/dc/terms/title': [{'@value': 'the trouble with bob'}],\n    'http://schema.org/articlebody': [{'@value': '\\n'\n                                                 '        the trouble with bob '\n                                                 'is that he takes much better '\n                                                 'photos than i do:\\n'\n                                                 '      '}],\n    'http://schema.org/creator': [{'@id': 'http://www.example.com/index.html#me'}]}]\n\nyou'll get a list of expanded json-ld nodes.\n\n\nopen graph extraction\n++++++++++++++++++++++++++++++\n\n::\n\n  >>> import pprint\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>>\n  >>> from extruct.opengraph import opengraphextractor\n  >>>\n  >>> html = \"\"\"<!doctype html public \"-//w3c//dtd xhtml 1.0 transitional//en\" \"https://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd\">\n  ... <html xmlns=\"https://www.w3.org/1999/xhtml\" xmlns:og=\"https://ogp.me/ns#\" xmlns:fb=\"https://www.facebook.com/2008/fbml\">\n  ...  <head>\n  ...   <title>himanshu's open graph protocol</title>\n  ...   <meta http-equiv=\"content-type\" content=\"text/html;charset=windows-1252\" />\n  ...   <meta http-equiv=\"content-language\" content=\"en-us\" />\n  ...   <link rel=\"stylesheet\" type=\"text/css\" href=\"event-education.css\" />\n  ...   <meta name=\"verify-v1\" content=\"so4y/3alt7/7buub9f6ivxn0tv8uprwaccek7jkb1gs=\" >\n  ...   <meta property=\"og:title\" content=\"himanshu's open graph protocol\"/>\n  ...   <meta property=\"og:type\" content=\"article\"/>\n  ...   <meta property=\"og:url\" content=\"https://www.eventeducation.com/test.php\"/>\n  ...   <meta property=\"og:image\" content=\"https://www.eventeducation.com/images/982336_wedding_dayandouan_th.jpg\"/>\n  ...   <meta property=\"fb:admins\" content=\"himanshu160\"/>\n  ...   <meta property=\"og:site_name\" content=\"event education\"/>\n  ...   <meta property=\"og:description\" content=\"event education provides free courses on event planning and management to event professionals worldwide.\"/>\n  ...  </head>\n  ...  <body>\n  ...   <div id=\"fb-root\"></div>\n  ...   <script>(function(d, s, id) {\n  ...               var js, fjs = d.getelementsbytagname(s)[0];\n  ...               if (d.getelementbyid(id)) return;\n  ...                  js = d.createelement(s); js.id = id;\n  ...                  js.src = \"//connect.facebook.net/en_us/all.js#xfbml=1&appid=501839739845103\";\n  ...                  fjs.parentnode.insertbefore(js, fjs);\n  ...                  }(document, 'script', 'facebook-jssdk'));</script>\n  ...  </body>\n  ... </html>\"\"\"\n  >>>\n  >>> opengraphe = opengraphextractor()\n  >>> pp.pprint(opengraphe.extract(html))\n  [{\"namespace\": {\n        \"og\": \"http://ogp.me/ns#\"\n    },\n    \"properties\": [\n        [\n            \"og:title\",\n            \"himanshu's open graph protocol\"\n        ],\n        [\n            \"og:type\",\n            \"article\"\n        ],\n        [\n            \"og:url\",\n            \"https://www.eventeducation.com/test.php\"\n        ],\n        [\n            \"og:image\",\n            \"https://www.eventeducation.com/images/982336_wedding_dayandouan_th.jpg\"\n        ],\n        [\n            \"og:site_name\",\n            \"event education\"\n        ],\n        [\n            \"og:description\",\n            \"event education provides free courses on event planning and management to event professionals worldwide.\"\n        ]\n      ]\n   }]\n\n\nmicroformat extraction\n++++++++++++++++++++++++++++++\n\n::\n\n  >>> import pprint\n  >>> pp = pprint.prettyprinter(indent=2)\n  >>>\n  >>> from extruct.microformat import microformatextractor\n  >>>\n  >>> html = \"\"\"<!doctype html public \"-//w3c//dtd xhtml 1.0 transitional//en\" \"https://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd\">\n  ... <html xmlns=\"https://www.w3.org/1999/xhtml\" xmlns:og=\"https://ogp.me/ns#\" xmlns:fb=\"https://www.facebook.com/2008/fbml\">\n  ...  <head>\n  ...   <title>himanshu's open graph protocol</title>\n  ...   <meta http-equiv=\"content-type\" content=\"text/html;charset=windows-1252\" />\n  ...   <meta http-equiv=\"content-language\" content=\"en-us\" />\n  ...   <link rel=\"stylesheet\" type=\"text/css\" href=\"event-education.css\" />\n  ...   <meta name=\"verify-v1\" content=\"so4y/3alt7/7buub9f6ivxn0tv8uprwaccek7jkb1gs=\" >\n  ...   <meta property=\"og:title\" content=\"himanshu's open graph protocol\"/>\n  ...   <article class=\"h-entry\">\n  ...    <h1 class=\"p-name\">microformats are amazing</h1>\n  ...    <p>published by <a class=\"p-author h-card\" href=\"http://example.com\">w. developer</a>\n  ...       on <time class=\"dt-published\" datetime=\"2013-06-13 12:00:00\">13<sup>th</sup> june 2013</time></p>\n  ...    <p class=\"p-summary\">in which i extoll the virtues of using microformats.</p>\n  ...    <div class=\"e-content\">\n  ...     <p>blah blah blah</p>\n  ...    </div>\n  ...   </article>\n  ...  </head>\n  ...  <body></body>\n  ... </html>\"\"\"\n  >>>\n  >>> microformate = microformatextractor()\n  >>> data = microformate.extract(html)\n  >>> pp.pprint(data)\n  [{\"type\": [\n        \"h-entry\"\n    ],\n    \"properties\": {\n        \"name\": [\n            \"microformats are amazing\"\n        ],\n        \"author\": [\n            {\n                \"type\": [\n                    \"h-card\"\n                ],\n                \"properties\": {\n                    \"name\": [\n                        \"w. developer\"\n                    ],\n                    \"url\": [\n                        \"http://example.com\"\n                    ]\n                },\n                \"value\": \"w. developer\"\n            }\n        ],\n        \"published\": [\n            \"2013-06-13 12:00:00\"\n        ],\n        \"summary\": [\n            \"in which i extoll the virtues of using microformats.\"\n        ],\n        \"content\": [\n            {\n                \"html\": \"\\n<p>blah blah blah</p>\\n\",\n                \"value\": \"\\nblah blah blah\\n\"\n            }\n        ]\n      }\n   }]\n\ndublincore extraction\n++++++++++++++++++++++++++++++\n::\n\n    >>> import pprint\n    >>> pp = pprint.prettyprinter(indent=2)\n    >>> from extruct.dublincore import dublincoreextractor\n    >>> html = '''<head profile=\"http://dublincore.org/documents/dcq-html/\">\n    ... <title>expressing dublin core in html/xhtml meta and link elements</title>\n    ... <link rel=\"schema.dc\" href=\"http://purl.org/dc/elements/1.1/\" />\n    ... <link rel=\"schema.dcterms\" href=\"http://purl.org/dc/terms/\" />\n    ...\n    ...\n    ... <meta name=\"dc.title\" lang=\"en\" content=\"expressing dublin core\n    ... in html/xhtml meta and link elements\" />\n    ... <meta name=\"dc.creator\" content=\"andy powell, ukoln, university of bath\" />\n    ... <meta name=\"dcterms.issued\" scheme=\"dcterms.w3cdtf\" content=\"2003-11-01\" />\n    ... <meta name=\"dc.identifier\" scheme=\"dcterms.uri\"\n    ... content=\"http://dublincore.org/documents/dcq-html/\" />\n    ... <link rel=\"dcterms.replaces\" hreflang=\"en\"\n    ... href=\"http://dublincore.org/documents/2000/08/15/dcq-html/\" />\n    ... <meta name=\"dcterms.abstract\" content=\"this document describes how\n    ... qualified dublin core metadata can be encoded\n    ... in html/xhtml &lt;meta&gt; elements\" />\n    ... <meta name=\"dc.format\" scheme=\"dcterms.imt\" content=\"text/html\" />\n    ... <meta name=\"dc.type\" scheme=\"dcterms.dcmitype\" content=\"text\" />\n    ... <meta name=\"dc.date.modified\" content=\"2001-07-18\" />\n    ... <meta name=\"dcterms.modified\" content=\"2001-07-18\" />'''\n    >>> dublinlde = dublincoreextractor()\n    >>> data = dublinlde.extract(html)\n    >>> pp.pprint(data)\n    [ { 'elements': [ { 'uri': 'http://purl.org/dc/elements/1.1/title',\n                        'content': 'expressing dublin core\\n'\n                                   'in html/xhtml meta and link elements',\n                        'lang': 'en',\n                        'name': 'dc.title'},\n                      { 'uri': 'http://purl.org/dc/elements/1.1/creator',\n                        'content': 'andy powell, ukoln, university of bath',\n                        'name': 'dc.creator'},\n                      { 'uri': 'http://purl.org/dc/elements/1.1/identifier',\n                        'content': 'http://dublincore.org/documents/dcq-html/',\n                        'name': 'dc.identifier',\n                        'scheme': 'dcterms.uri'},\n                      { 'uri': 'http://purl.org/dc/elements/1.1/format',\n                        'content': 'text/html',\n                        'name': 'dc.format',\n                        'scheme': 'dcterms.imt'},\n                      { 'uri': 'http://purl.org/dc/elements/1.1/type',\n                        'content': 'text',\n                        'name': 'dc.type',\n                        'scheme': 'dcterms.dcmitype'}],\n        'namespaces': { 'dc': 'http://purl.org/dc/elements/1.1/',\n                        'dcterms': 'http://purl.org/dc/terms/'},\n        'terms': [ { 'uri': 'http://purl.org/dc/terms/issued',\n                     'content': '2003-11-01',\n                     'name': 'dcterms.issued',\n                     'scheme': 'dcterms.w3cdtf'},\n                   { 'uri': 'http://purl.org/dc/terms/abstract',\n                     'content': 'this document describes how\\n'\n                                'qualified dublin core metadata can be encoded\\n'\n                                'in html/xhtml <meta> elements',\n                     'name': 'dcterms.abstract'},\n                   { 'uri': 'http://purl.org/dc/terms/modified',\n                     'content': '2001-07-18',\n                     'name': 'dc.date.modified'},\n                   { 'uri': 'http://purl.org/dc/terms/modified',\n                     'content': '2001-07-18',\n                     'name': 'dcterms.modified'},\n                   { 'uri': 'http://purl.org/dc/terms/replaces',\n                     'href': 'http://dublincore.org/documents/2000/08/15/dcq-html/',\n                     'hreflang': 'en',\n                     'rel': 'dcterms.replaces'}]}]\n\n\n\ncommand line tool\n-----------------\n\n*extruct* provides a command line tool that allows you to fetch a page and\nextract the metadata from it directly from the command line.\n\ndependencies\n++++++++++++\n\nthe command line tool depends on ``requests``, which is not installed by default\nwhen you install **extruct**. in order to use the command line tool, you can\ninstall **extruct** with the `cli` extra requirements::\n\n    pip install 'extruct[cli]'\n\n\nusage\n+++++\n\n::\n\n    extruct \"http://example.com\"\n\ndownloads \"http://example.com\" and outputs the microdata, json-ld and rdfa, open graph\nand microformat metadata to `stdout`.\n\nsupported parameters\n++++++++++++++++++++\n\nby default, the command line tool will try to extract all the supported\nmetadata formats from the page (currently microdata, json-ld, rdfa, open graph\nand microformat). if you want to restrict the output to just one or a subset of\nthose, you can pass their individual names collected in a list through 'syntaxes' argument.\n\nfor example, this command extracts only microdata and json-ld metadata from\n\"http://example.com\"::\n\n    extruct \"http://example.com\" --syntaxes microdata json-ld\n\nnb syntaxes names passed must correspond to these: microdata, json-ld, rdfa, opengraph, microformat\n\ndevelopment version\n-------------------\n\n::\n\n    mkvirtualenv extruct\n    pip install -r requirements-dev.txt\n\n\ntests\n-----\n\nrun tests in current environment::\n\n    py.test tests\n\n\nuse tox_ to run tests with different python versions::\n\n    tox\n\n\n.. _tox: https://testrun.org/tox/latest/\n.. _ogp: https://ogp.me/\n",
  "docs_url": null,
  "keywords": "extruct",
  "license": "",
  "name": "extruct",
  "package_url": "https://pypi.org/project/extruct/",
  "project_url": "https://pypi.org/project/extruct/",
  "project_urls": {
    "Homepage": "https://github.com/scrapinghub/extruct"
  },
  "release_url": "https://pypi.org/project/extruct/0.16.0/",
  "requires_dist": [
    "lxml",
    "pyrdfa3",
    "mf2py",
    "w3lib",
    "html-text (>=0.5.1)",
    "six",
    "jstyleson",
    "rdflib (<6.0.0) ; python_version < \"3.7\"",
    "rdflib-jsonld (<=0.5.0) ; python_version < \"3.7\"",
    "rdflib (>=6.0.0) ; python_version >= \"3.7\"",
    "requests ; extra == 'cli'"
  ],
  "requires_python": "",
  "summary": "extract embedded metadata from html markup",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "info@scrapinghub.com",
    "scrapinghub"
  ],
  "kwds": "scrapinghub extruct exslt xpath extracted",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_extruct",
  "homepage": "https://github.com/scrapinghub/extruct",
  "release_count": 24,
  "dependency_ids": [
    "pypi_html_text",
    "pypi_jstyleson",
    "pypi_lxml",
    "pypi_mf2py",
    "pypi_pyrdfa3",
    "pypi_rdflib",
    "pypi_rdflib_jsonld",
    "pypi_requests",
    "pypi_six",
    "pypi_w3lib"
  ]
}
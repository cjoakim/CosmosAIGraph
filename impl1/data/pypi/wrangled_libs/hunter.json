{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: debuggers",
    "topic :: utilities"
  ],
  "description": "========\noverview\n========\n\n\n\nhunter is a flexible code tracing toolkit, not for measuring coverage, but for debugging, logging, inspection and other\nnefarious purposes. it has a `simple python api <https://python-hunter.readthedocs.io/en/latest/introduction.html>`_,\na `convenient terminal api <environment-variable-activation_>`_ and\na `cli tool to attach to processes <tracing-processes_>`_.\n\n* free software: bsd 2-clause license\n\ninstallation\n============\n\n::\n\n    pip install hunter\n\ndocumentation\n=============\n\n\nhttps://python-hunter.readthedocs.io/\n\ngetting started\n===============\n\nbasic use involves passing various filters to the ``trace`` option. an example:\n\n.. sourcecode:: python\n\n    import hunter\n    hunter.trace(module='posixpath', action=hunter.callprinter)\n\n    import os\n    os.path.join('a', 'b')\n\nthat would result in:\n\n.. sourcecode:: pycon\n\n    >>> os.path.join('a', 'b')\n             /usr/lib/python3.6/posixpath.py:75    call      => join(a='a')\n             /usr/lib/python3.6/posixpath.py:80    line         a = os.fspath(a)\n             /usr/lib/python3.6/posixpath.py:81    line         sep = _get_sep(a)\n             /usr/lib/python3.6/posixpath.py:41    call         => _get_sep(path='a')\n             /usr/lib/python3.6/posixpath.py:42    line            if isinstance(path, bytes):\n             /usr/lib/python3.6/posixpath.py:45    line            return '/'\n             /usr/lib/python3.6/posixpath.py:45    return       <= _get_sep: '/'\n             /usr/lib/python3.6/posixpath.py:82    line         path = a\n             /usr/lib/python3.6/posixpath.py:83    line         try:\n             /usr/lib/python3.6/posixpath.py:84    line         if not p:\n             /usr/lib/python3.6/posixpath.py:86    line         for b in map(os.fspath, p):\n             /usr/lib/python3.6/posixpath.py:87    line         if b.startswith(sep):\n             /usr/lib/python3.6/posixpath.py:89    line         elif not path or path.endswith(sep):\n             /usr/lib/python3.6/posixpath.py:92    line         path += sep + b\n             /usr/lib/python3.6/posixpath.py:86    line         for b in map(os.fspath, p):\n             /usr/lib/python3.6/posixpath.py:96    line         return path\n             /usr/lib/python3.6/posixpath.py:96    return    <= join: 'a/b'\n    'a/b'\n\nin a terminal it would look like:\n\n.. image:: https://raw.githubusercontent.com/ionelmc/python-hunter/master/docs/code-trace.png\n\n\nanother useful scenario is to ignore all standard modules and force colors to make them stay even if the output is\nredirected to a file.\n\n.. sourcecode:: python\n\n    import hunter\n    hunter.trace(stdlib=false, action=hunter.callprinter(force_colors=true))\n\nactions\n-------\n\noutput format can be controlled with \"actions\". there's an alternative ``codeprinter`` action that doesn't handle\nnesting (it was the default action until hunter 2.0).\n\nif filters match then action will be run. example:\n\n.. sourcecode:: python\n\n    import hunter\n    hunter.trace(module='posixpath', action=hunter.codeprinter)\n\n    import os\n    os.path.join('a', 'b')\n\nthat would result in:\n\n.. sourcecode:: pycon\n\n    >>> os.path.join('a', 'b')\n             /usr/lib/python3.6/posixpath.py:75    call      def join(a, *p):\n             /usr/lib/python3.6/posixpath.py:80    line          a = os.fspath(a)\n             /usr/lib/python3.6/posixpath.py:81    line          sep = _get_sep(a)\n             /usr/lib/python3.6/posixpath.py:41    call      def _get_sep(path):\n             /usr/lib/python3.6/posixpath.py:42    line          if isinstance(path, bytes):\n             /usr/lib/python3.6/posixpath.py:45    line              return '/'\n             /usr/lib/python3.6/posixpath.py:45    return            return '/'\n                                                   ...       return value: '/'\n             /usr/lib/python3.6/posixpath.py:82    line          path = a\n             /usr/lib/python3.6/posixpath.py:83    line          try:\n             /usr/lib/python3.6/posixpath.py:84    line              if not p:\n             /usr/lib/python3.6/posixpath.py:86    line              for b in map(os.fspath, p):\n             /usr/lib/python3.6/posixpath.py:87    line                  if b.startswith(sep):\n             /usr/lib/python3.6/posixpath.py:89    line                  elif not path or path.endswith(sep):\n             /usr/lib/python3.6/posixpath.py:92    line                      path += sep + b\n             /usr/lib/python3.6/posixpath.py:86    line              for b in map(os.fspath, p):\n             /usr/lib/python3.6/posixpath.py:96    line          return path\n             /usr/lib/python3.6/posixpath.py:96    return        return path\n                                                   ...       return value: 'a/b'\n    'a/b'\n\n- or in a terminal:\n\n.. image:: https://raw.githubusercontent.com/ionelmc/python-hunter/master/docs/simple-trace.png\n\n------\n\nanother useful action is the ``varsprinter``:\n\n.. sourcecode:: python\n\n    import hunter\n    # note that this kind of invocation will also use the default `callprinter` action\n    hunter.trace(hunter.q(module='posixpath', action=hunter.varsprinter('path')))\n\n    import os\n    os.path.join('a', 'b')\n\nthat would result in:\n\n.. sourcecode:: pycon\n\n    >>> os.path.join('a', 'b')\n         /usr/lib/python3.6/posixpath.py:75    call      => join(a='a')\n         /usr/lib/python3.6/posixpath.py:80    line         a = os.fspath(a)\n         /usr/lib/python3.6/posixpath.py:81    line         sep = _get_sep(a)\n         /usr/lib/python3.6/posixpath.py:41    call      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:41    call         => _get_sep(path='a')\n         /usr/lib/python3.6/posixpath.py:42    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:42    line            if isinstance(path, bytes):\n         /usr/lib/python3.6/posixpath.py:45    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:45    line            return '/'\n         /usr/lib/python3.6/posixpath.py:45    return    [path => 'a']\n         /usr/lib/python3.6/posixpath.py:45    return       <= _get_sep: '/'\n         /usr/lib/python3.6/posixpath.py:82    line         path = a\n         /usr/lib/python3.6/posixpath.py:83    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:83    line         try:\n         /usr/lib/python3.6/posixpath.py:84    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:84    line         if not p:\n         /usr/lib/python3.6/posixpath.py:86    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:86    line         for b in map(os.fspath, p):\n         /usr/lib/python3.6/posixpath.py:87    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:87    line         if b.startswith(sep):\n         /usr/lib/python3.6/posixpath.py:89    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:89    line         elif not path or path.endswith(sep):\n         /usr/lib/python3.6/posixpath.py:92    line      [path => 'a']\n         /usr/lib/python3.6/posixpath.py:92    line         path += sep + b\n         /usr/lib/python3.6/posixpath.py:86    line      [path => 'a/b']\n         /usr/lib/python3.6/posixpath.py:86    line         for b in map(os.fspath, p):\n         /usr/lib/python3.6/posixpath.py:96    line      [path => 'a/b']\n         /usr/lib/python3.6/posixpath.py:96    line         return path\n         /usr/lib/python3.6/posixpath.py:96    return    [path => 'a/b']\n         /usr/lib/python3.6/posixpath.py:96    return    <= join: 'a/b'\n    'a/b'\n\nin a terminal it would look like:\n\n.. image:: https://raw.githubusercontent.com/ionelmc/python-hunter/master/docs/vars-trace.png\n\n-----\n\nyou can give it a tree-like configuration where you can optionally configure specific actions for parts of the\ntree (like dumping variables or a pdb set_trace):\n\n.. sourcecode:: python\n\n    from hunter import trace, q, debugger\n    from pdb import pdb\n\n    trace(\n        # drop into a pdb session if ``foo.bar()`` is called\n        q(module=\"foo\", function=\"bar\", kind=\"call\", action=debugger(klass=pdb))\n        |  # or\n        q(\n            # show code that contains \"mumbo.jumbo\" on the current line\n            lambda event: event.locals.get(\"mumbo\") == \"jumbo\",\n            # and it's not in python's stdlib\n            stdlib=false,\n            # and it contains \"mumbo\" on the current line\n            source__contains=\"mumbo\"\n        )\n    )\n\n    import foo\n    foo.func()\n\nwith a ``foo.py`` like this:\n\n.. sourcecode:: python\n\n    def bar():\n        execution_will_get_stopped  # cause we get a pdb session here\n\n    def func():\n        mumbo = 1\n        mumbo = \"jumbo\"\n        print(\"not shown in trace\")\n        print(mumbo)\n        mumbo = 2\n        print(mumbo) # not shown in trace\n        bar()\n\n\nwe get:\n\n.. sourcecode:: pycon\n\n    >>> foo.func()\n    not shown in trace\n        /home/ionel/osp/python-hunter/foo.py:8     line          print(mumbo)\n    jumbo\n        /home/ionel/osp/python-hunter/foo.py:9     line          mumbo = 2\n    2\n        /home/ionel/osp/python-hunter/foo.py:1     call      def bar():\n    > /home/ionel/osp/python-hunter/foo.py(2)bar()\n    -> execution_will_get_stopped  # cause we get a pdb session here\n    (pdb)\n\nin a terminal it would look like:\n\n.. image:: https://raw.githubusercontent.com/ionelmc/python-hunter/master/docs/tree-trace.png\n\n.. _tracing-processes:\n\ntracing processes\n-----------------\n\nin similar fashion to ``strace`` hunter can trace other processes, eg::\n\n    hunter-trace --gdb -p 123\n\nif you wanna play it safe (no messy gdb) then add this in your code::\n\n    from hunter import remote\n    remote.install()\n\nthen you can do::\n\n    hunter-trace -p 123\n\nsee `docs on the remote feature <https://python-hunter.readthedocs.org/en/latest/remote.html>`_.\n\n**note:** windows ain't supported.\n\n.. _environment-variable-activation:\n\nenvironment variable activation\n-------------------------------\n\nfor your convenience environment variable activation is available. just run your app like this::\n\n\n    pythonhunter=\"module='os.path'\" python yourapp.py\n\non windows you'd do something like::\n\n    set pythonhunter=module='os.path'\n    python yourapp.py\n\nthe activation works with a clever ``.pth`` file that checks for that env var presence and before your app runs does something\nlike this::\n\n    from hunter import *\n    trace(<whatever-you-had-in-the-pythonhunter-env-var>)\n\nnote that hunter is activated even if the env var is empty, eg: ``pythonhunter=\"\"``.\n\nenvironment variable configuration\n``````````````````````````````````\n\nsometimes you always use the same options (like ``stdlib=false`` or ``force_colors=true``). to save typing you can\nset something like this in your environment::\n\n    pythonhunterconfig=\"stdlib=false,force_colors=true\"\n\nthis is the same as ``pythonhunter=\"stdlib=false,action=callprinter(force_colors=true)\"``.\n\nnotes:\n\n* setting ``pythonhunterconfig`` alone doesn't activate hunter.\n* all the options for the builtin actions are supported.\n* although using predicates is supported it can be problematic. example of setup that won't trace anything::\n\n    pythonhunterconfig=\"q(module_startswith='django')\"\n    pythonhunter=\"q(module_startswith='celery')\"\n\n  which is the equivalent of::\n\n    pythonhunter=\"q(module_startswith='django'),q(module_startswith='celery')\"\n\n  which is the equivalent of::\n\n    pythonhunter=\"q(module_startswith='django')&q(module_startswith='celery')\"\n\n\n\nfiltering dsl\n-------------\n\nhunter supports a flexible query dsl, see the `introduction\n<https://python-hunter.readthedocs.org/en/latest/introduction.html>`_.\n\ndevelopment\n===========\n\nto run the all tests run::\n\n    tox\n\ndesign notes\n============\n\nhunter doesn't do everything. as a design goal of this library some things are made intentionally austere and verbose (to avoid complexity,\nconfusion and inconsistency). this has few consequences:\n\n* there are `operators <https://python-hunter.readthedocs.io/en/stable/introduction.html#operators>`_ but there's no negation operator.\n  instead you're expected to negate a query object, eg: ``~q(module='re')``.\n* there are no specialized operators or filters - all filters behave exactly the same. for example:\n\n  * no filter for packages. you're expected to filter by module with an operator.\n  * no filter for arguments, return values or variables. you're expected to write your own filter function and deal with the problems\n    of poking into objects.\n* layering is minimal. there's are some `helpers <https://python-hunter.readthedocs.io/en/stable/reference.html#helpers>`_ that do\n  some argument processing and conversions to save you some typing but that's about it.\n* the library doesn't try to hide the mechanics of tracing in python - it's 1:1 regarding what python sends to a trace function if you'd be\n  using `sys.settrace <https://docs.python.org/3/library/sys.html#sys.settrace>`_.\n* doesn't have any storage. you are expected to redirect output to a file.\n\nyou should look at it like it's a tool to help you understand and debug big applications, or a framework ridding you of the boring parts of\nsettrace, not something that helps you learn python.\n\nfaq\n===\n\nwhy not smiley?\n---------------\n\nthere's some obvious overlap with `smiley <https://pypi.org/project/smiley/>`_ but there are few fundamental differences:\n\n* complexity. smiley is simply over-engineered:\n\n  * it uses ipc and a sql database.\n  * it has a webserver. lots of dependencies.\n  * it uses threads. side-effects and subtle bugs are introduced in your code.\n  * it records everything. tries to dump any variable. often fails and stops working.\n\n  why do you need all that just to debug some stuff in a terminal? simply put, it's a nice idea but the design choices work\n  against you when you're already neck-deep into debugging your own code. in my experience smiley has been very buggy and\n  unreliable. your mileage may vary of course.\n\n* tracing long running code. this will make smiley record lots of data, making it unusable.\n\n  now because smiley records everything, you'd think it's better suited for short programs. but alas, if your program runs\n  quickly then it's pointless to record the execution. you can just run it again.\n\n  it seems there's only one situation where it's reasonable to use smiley: tracing io-bound apps remotely. those apps don't\n  execute lots of code, they just wait on network so smiley's storage won't blow out of proportion and tracing overhead might\n  be acceptable.\n* use-cases. it seems to me smiley's purpose is not really debugging code, but more of a \"non interactive monitoring\" tool.\n\nin contrast, hunter is very simple:\n\n* few dependencies.\n* low overhead (tracing/filtering code has an optional cython extension).\n* no storage. this simplifies lots of things.\n\n  the only cost is that you might need to run the code multiple times to get the filtering/actions right. this means hunter is\n  not really suited for \"post-mortem\" debugging. if you can't reproduce the problem anymore then hunter won't be of much help.\n\nwhy not pytrace?\n----------------\n\n`pytrace <https://pypi.org/project/pytrace/>`_ is another tracer tool. it seems quite similar to smiley - it uses a sqlite\ndatabase for the events, threads and ipc, thus it's reasonable to expect the same kind of problems.\n\nwhy not pysnooper or snoop?\n---------------------------\n\n`snoop <https://pypi.org/project/snoop/>`_ is a refined version of `pysnooper <https://pypi.org/project/pysnooper/>`_. both are\nmore suited to tracing small programs or functions as the output is more verbose and less suited to the needs of tracing a big application\nwhere hunter provides more flexible setup, filtering capabilities, speed and brevity.\n\nwhy not coverage?\n-----------------\n\nfor purposes of debugging `coverage <https://pypi.org/project/coverage/>`_ is a great tool but only as far as \"debugging\nby looking at what code is (not) run\". checking branch coverage is good but it will only get you as far.\n\nfrom the other perspective, you'd be wondering if you could use hunter to measure coverage-like things. you could do it but\nfor that purpose hunter is very \"rough\": it has no builtin storage. you'd have to implement your own storage. you can do it\nbut it wouldn't give you any advantage over making your own tracer if you don't need to \"pre-filter\" whatever you're\nrecording.\n\nin other words, filtering events is the main selling point of hunter - it's fast (cython implementation) and the query api is\nflexible enough.\n\nprojects using hunter\n=====================\n\nnoteworthy usages or hunter (submit a pr with your project if you built a tool that relies on hunter):\n\n* `crunch-io/diagnose <https://github.com/crunch-io/diagnose>`_ - a runtime instrumentation library.\n* `talwrii/huntrace <https://github.com/talwrii/huntrace>`_ - an alternative cli (similar to ltrace).\n* `anki-code/xunter <https://github.com/anki-code/xunter>`_ - a profiling tool made specifically for `the xonsh shell <https://xon.sh>`_.\n\nmore projects using it at https://github.com/ionelmc/python-hunter/network/dependents\n\n\nchangelog\n=========\n\n3.6.1 (2023-04-26)\n------------------\n\n* added safe repr support for decimal objects.\n\n3.6.0 (2023-04-25)\n------------------\n\n* added c extension support for python 3.11. this may come with up to 10% performance hit (depending on use-case) for all pythons.\n  unfortunately some `compat shims <https://raw.githubusercontent.com/python/pythoncapi_compat/master/pythoncapi_compat.h>`_ are\n  now used for getting frame details. this is necessary to be able to work with python 3.11 and be more future-proof.\n* added safe repr support for zoneinfo objects.\n* c extension files are now prebuilt with cython 3.0b2.\n* replaced the flake8/isort pre-commit hooks with ruff.\n* disabled editable wheels (`pep-0662 <https://peps.python.org/pep-0662/>`_) as they don't include the `hunter.pth` file.\n  there may be a way to do it but i haven't figured out a way to customize the `editable_wheel` command without a\n  very brittle solution glued to setuptools' internals.\n\n3.5.1 (2022-09-27)\n------------------\n\n* fixed breakage in ``hunter-trace`` when ctrl-c.\n\n3.5.0 (2022-09-11)\n------------------\n\n* add support for generators and coroutines in the ``hunter.wrap`` decorator.\n* dropped support for python 3.6.\n\n3.4.3 (2021-12-15)\n------------------\n\n* removed most of the python 2 support code.\n* fix some refactoring regression in ``setup.py`` and make the 3.4.x series installable only on python 3.6 and later.\n* yank 3.4.0, 3.4.1, 3.4.2 releases to avoid install problems on python 2.7.\n\n3.4.2 (2021-12-15)\n------------------\n\n* fixed ci to properly make win32 wheels.\n\n3.4.1 (2021-12-14)\n------------------\n\n* add support for building a ``pp37.pp38`` tagged wheel\n  (basically an universal wheel installable just for those two pypy versions).\n\n3.4.0 (2021-12-14)\n------------------\n\n* switched ci to github actions, this has a couple consequences:\n\n  * support for python 2.7 is dropped. you can still install it there but it's not tested anymore and\n    python 2 specific handling will be removed at some point.\n  * linux wheels are now provided in `musllinux` and `manylinux2014` variants.\n* extension building is now completely skipped on pypy.\n* a pure but tagged as platform specific wheel is now provided for pypy (to have fast installs there as well).\n\n3.3.8 (2021-06-23)\n------------------\n\n* fixed ci problem that publishes same type of wheels two times.\n\n3.3.7 (2021-06-23)\n------------------\n\n* fixed a bug with how ``stdlib`` is detected on windows (at least).\n\n3.3.6 (2021-06-23)\n------------------\n\n* fixed regression from *3.3.4*: ``stdlib`` filter was broken.\n* improved the pth file (``pythonhunter`` environment variable activation) to use a clean eval environment.\n  no bogus variables like ``line`` (from the ``site.py`` machinery) will be available anymore.\n* fixed a bug in ``varssnooper`` that would make it fail in rare situation where a double `return` event is emitted.\n\n3.3.5 (2021-06-11)\n------------------\n\n* added support for python 3.10.\n* added support for ``time`` objects and the ``fold`` option in ``safe_repr``.\n* *3.3.4 was skipped cause i messed up the ci.*\n\n3.3.3 (2021-05-04)\n------------------\n\n* fixed tracer still being active for other threads after it was stopped.\n\n  python unfortunately only allows removing the trace function for the current thread -\n  now ``hunter.tracer.tracer`` will uninstall itself if it's marked as stopped.\n\n  this fixes bogus errors that appear when using ``ipdb`` with\n  the ``hunter.actions.debugger`` action while thread support is enabled (the default).\n\n3.3.2 (2021-03-25)\n------------------\n\n* changed ci to build python 3.9 wheels. python 3.5 no longer tested and wheels no longer built to keep things simple.\n* documentation improvements.\n\n3.3.1 (2020-10-24)\n------------------\n\n* fixed ci/test issues that prevented all of 21 wheels being published.\n\n3.3.0 (2020-10-23)\n------------------\n\n* fixed handling so that ``hunter.event.event.module`` is always the ``\"?\"`` string instead of ``none``.\n  previously it was ``none`` when tracing particularly broken code and broke various predicates.\n* similarly ``hunter.event.event.filename`` is now ``\"?\"`` if there's no filename available.\n* building on the previous changes the actions have simpler code for displaying missing module/filenames.\n* changed ``hunter.actions.callprinter`` so that trace events for builtin functions are displayed differently.\n  these events appear when using profile mode (eg: ``trace(profile=true)``).\n* fixed failure that could occur if ``hunter.event.event.module`` is an unicode string. now it's always a regular string.\n  *only applies to python 2.*\n* fixed argument display when tracing functions with tuple arguments.\n  closes `#88 <https://github.com/ionelmc/python-hunter/issues/88>`_. *only applies to python 2.*\n* improved error reporting when internal failures occur. now some details about the triggering event are logged.\n\n3.2.2 (2020-09-04)\n------------------\n\n* fixed oversight over what value is in ``hunter.event.event.builtin``. now it's always a boolean, and can be used consistently\n  in filters (eg: ``builtin=true,function='getattr'``).\n\n3.2.1 (2020-08-18)\n------------------\n\n* added support for regex, date and datetime in ``safe_repr``.\n* fixed call argument display when positional and keyword arguments are used in ``hunter.actions.callprinter``.\n\n3.2.0 (2020-08-16)\n------------------\n\n* implemented the ``hunter.actions.stackprinter`` action.\n* implemented the ``hunter.predicates.backlog`` predicate.\n  contributed by dan ailenei in `#81 <https://github.com/ionelmc/python-hunter/pull/81>`_.\n* improved contributing section in docs a bit.\n  contributed by tom schraitle in `#85 <https://github.com/ionelmc/python-hunter/pull/85>`_.\n* improved filtering performance by avoiding a lot of unnecessary\n  ``pyobject_getattr`` calls in the cython implementation of ``hunter.predicates.backlog``.\n* implemented the ``hunter.actions.errorsnooper`` action.\n* added support for profiling mode (eg: ``trace(profile=true)``).\n  this mode will use ``setprofile`` instead of ``settrace``.\n* added arm64 wheels and ci.\n* added ``hunter.event.event.instruction`` and ``hunter.event.event.builtin`` (usable in profile mode).\n* added more cookbook entries.\n\n3.1.3 (2020-02-02)\n------------------\n\n* improved again the stdlib check to handle certain paths better.\n\n3.1.2 (2019-01-19)\n------------------\n\n* really fixed the ``<frozen importlib.something`` stdlib check.\n\n3.1.1 (2019-01-19)\n------------------\n\n* marked all the ``<frozen importlib.something`` files as part of stdlib.\n\n3.1.0 (2019-01-19)\n------------------\n\n* added ``hunter.actions.errorsnooper`` - an action that detects silenced exceptions.\n* added ``hunter.load_config`` and fixed issues with configuration being loaded too late from the ``pythonhunterconfig`` environment\n  variable.\n* changed ``hunter.from`` helper to automatically move ``depth`` and ``calls`` filters to the predicate (so they filter after\n  ``hunter.predicates.from`` activates).\n* changed ``hunter.predicates.from`` to pass a copy of event to the predicate.\n  the copy will have the ``depth`` and ``calls`` attributes adjusted to the point where ``hunter.predicates.from`` activated.\n* fixed a bunch of inconsistencies and bugs when using ``&`` and ``|`` operators with predicates.\n* fixed a bunch of broken fields on ``detached events <hunter.event.event.detach>``\n  (``hunter.event.event.function_object`` and ``hunter.event.event.arg``).\n* improved docstrings in various and added a configuration doc section.\n* improved testing (more coverage).\n\n3.0.5 (2019-12-06)\n------------------\n\n* really fixed ``safe_repr`` so it doesn't cause side-effects (now isinstance/issubclass are avoided - they\n  can cause side-effects in code that abuses descriptors in special attributes/methods).\n\n3.0.4 (2019-10-26)\n------------------\n\n* really fixed ``stream`` setup in actions (using ``force_colors`` without any ``stream`` was broken).\n  see: ``hunter.actions.colorstreamaction``.\n* fixed ``__repr__`` for the ``hunter.predicates.from`` predicate to include ``watermark``.\n* added binary wheels for python 3.8.\n\n3.0.3 (2019-10-13)\n------------------\n\n* fixed ``safe_repr`` on pypy so it's safer on method objects.\n  see: ``hunter.actions.colorstreamaction``.\n\n3.0.2 (2019-10-10)\n------------------\n\n* fixed setting ``stream`` from ``pythonhunterconfig`` environment variable.\n  see: ``hunter.actions.colorstreamaction``.\n* fixed a couple minor documentation issues.\n\n3.0.1 (2019-06-17)\n------------------\n\n* fixed issue with coloring missing source message (coloring leaked into next line).\n\n3.0.0 (2019-06-17)\n------------------\n\n* the package now uses setuptools-scm for development builds (available at https://test.pypi.org/project/hunter/). as a\n  consequence installing the sdist will download setuptools-scm.\n* recompiled cython modules with latest cython. hunter can be installed without any cython, as before.\n* refactored some of the cython modules to have more typing information and not use deprecated property syntax.\n* replaced ``unsafe_repr`` option with ``repr_func``. now you can use your custom repr function in the builtin actions.\n  **backwards incompatible**\n* fixed buggy filename handling when using hunter in ipython/jupyter. source code should be properly displayed now.\n* removed ``globals`` option from ``varsprinter`` action. globals are now always looked up. **backwards incompatible**\n* added support for locals in ``varsprinter`` action. now you can do ``varsprinter('len(foobar)')``.\n* always pass module_globals dict to linecache methods. source code from pep-302 loaders is now printed properly.\n  contributed by mikhail borisov in `#65 <https://github.com/ionelmc/python-hunter/pull/65>`_.\n* various code cleanup, style and docstring fixing.\n* added ``hunter.from`` helper to allow passing in filters directly as keyword arguments.\n* added ``hunter.event.event.detach`` for storing events without leaks or side-effects (due to prolonged references\n  to frame objects, local or global variables).\n* refactored the internals of actions for easier subclassing.\n\n  added the\n  ``hunter.actions.colorstreamaction.filename_prefix``,\n  ``hunter.actions.colorstreamaction.output``,\n  ``hunter.actions.colorstreamaction.pid_prefix``,\n  ``hunter.actions.colorstreamaction.thread_prefix``,\n  ``hunter.actions.colorstreamaction.try_repr`` and\n  ``hunter.actions.colorstreamaction.try_source`` methods\n  to the ``hunter.actions.colorstreamaction`` baseclass.\n* added ``hunter.actions.varssnooper`` - a pysnooper-inspired variant of ``hunter.actions.varsprinter``. it\n  will record and show variable changes, with the risk of leaking or using too much memory of course :)\n* fixed tracers to log error and automatically stop if there's an internal failure. previously error may have been\n  silently dropped in some situations.\n\n2.2.1 (2019-01-19)\n------------------\n\n* fixed a link in changelog.\n* fixed some issues in the travis configuration.\n\n2.2.0 (2019-01-19)\n------------------\n\n* added ``hunter.predicates.from`` predicate for tracing from a specific point. it stop after returning back to the\n  same call depth with a configurable offset.\n* fixed ``pythonhunterconfig`` not working in some situations (config values were resolved at the wrong time).\n* made tests in ci test the wheel that will eventually be published to pypi\n  (`tox-wheel <https://pypi.org/project/tox-wheel/>`_).\n* made ``event.stdlib`` more reliable: ``pkg_resources`` is considered part of stdlib and few more paths will be\n  considered as stdlib.\n* dumbed down the ``get_peercred`` check that is done when attaching with ``hunter-trace`` cli (via\n  ``hunter.remote.install()``). it will be slightly insecure but will work on osx.\n* added osx in the travis test grid.\n\n2.1.0 (2018-11-17)\n------------------\n\n* made ``threading_support`` on by default but output automatic (also, now ``1`` or ``0`` allowed).\n* added ``pid_alignment`` and ``force_pid`` action options to show a pid prefix.\n* fixed some bugs around ``__eq__`` in various classes.\n* dropped python 3.3 support.\n* dropped dependency on `fields <https://python-fields.readthedocs.io/en/stable/>`_.\n* actions now repr using a simplified implementation that tries to avoid calling ``__repr__`` on user classes in order\n  to avoid creating side-effects while tracing.\n* added support for the ``pythonhunterconfig`` environment variable (stores defaults and doesn't activate hunter).\n\n2.0.2 (2017-11-24)\n------------------\n\n* fixed indentation in ``hunter.actions.callprinter`` action (shouldn't deindent on exception).\n* fixed option filtering in cython query implementation (filtering on ``tracer`` was allowed by mistake).\n* various fixes to docstrings and docs.\n\n2.0.1 (2017-09-09)\n------------------\n\n* now ``py_addpendingcall`` is used instead of acquiring the gil (when using gdb).\n\n2.0.0 (2017-09-02)\n------------------\n\n* added the ``hunter.event.event.count`` and ``hunter.event.event.calls`` attributes.\n* added the ``lt``/``lte``/``gt``/``gte`` lookups.\n* added convenience aliases for ``startswith`` (``sw``), ``endswith`` (``ew``), ``contains`` (``has``)\n  and ``regex`` (``rx``).\n* added a convenience ``hunter.wrap`` decorator to start tracing around a function.\n* added support for remote tracing (with two backends: `manhole <https://pypi.org/project/manhole/>`__ and gdb) via\n  the ``hunter-trace`` bin. note: **windows is not supported**.\n* changed the default action to ``hunter.actions.callprinter``.\n  you'll need to use ``action=codeprinter`` if you want the old output.\n\n1.4.1 (2016-09-24)\n------------------\n\n* fix support for getting sources for cython module (it was broken on windows and python3.5+).\n\n1.4.0 (2016-09-24)\n------------------\n\n* added support for tracing cython modules (`#30 <https://github.com/ionelmc/python-hunter/issues/30>`_). a\n  `# cython: linetrace=true` stanza or equivalent is required in cython modules for this to work.\n\n1.3.0 (2016-04-14)\n------------------\n\n* added ``hunter.event.event.thread``.\n* added ``hunter.event.event.threadid`` and ``hunter.event.event.threadname``\n  (available for filtering with ``hunter.q``).\n* added ``hunter.event.event.threading_support`` argument to ``hunter.trace``.\n  it makes new threads be traced and changes action output to include thread name.\n* added support for using `pdb++ <https://pypi.org/project/pdbpp/>`_ in the ``hunter.actions.debugger`` action.\n* added support for using `manhole <https://pypi.org/project/manhole/>`_ via a new ``hunter.actions.manhole``\n  action.\n* made the ``hunter.event.event.handler`` a public but readonly property.\n\n\n1.2.2 (2016-01-28)\n------------------\n\n* fix broken import. require ``fields>=4.0``.\n* simplify a string check in cython code.\n\n1.2.1 (2016-01-27)\n------------------\n\n* fix \"keyerror: 'normal'\" bug in ``hunter.actions.callprinter``. create the no_colors dict from the color dicts.\n  some keys were missing.\n\n1.2.0 (2016-01-24)\n------------------\n\n* fixed printouts of objects that return very large string in ``__repr__()``. trimmed to 512. configurable in actions\n  with the ``repr_limit`` option.\n* improved validation of ``hunter.actions.varsprinter``'s initializer.\n* added a ``hunter.actions.callprinter`` action.\n\n1.1.0 (2016-01-21)\n------------------\n\n* implemented a destructor (``__dealloc__``) for the cython tracer.\n* improved the restoring of the previous tracer in the cython tracer (use ``pyeval_settrace``) directly.\n* removed ``tracer`` as an allowed filtering argument in ``hunter.query``.\n* add basic validation (must be callable) for positional arguments and actions passed into ``hunter.q``. closes\n  `#23 <https://github.com/ionelmc/python-hunter/issues/23>`_.\n* fixed ``stdlib`` checks (wasn't very reliable). closes `#24 <https://github.com/ionelmc/python-hunter/issues/24>`_.\n\n1.0.2 (2016-01-05)\n------------------\n\n* fixed missing import in ``setup.py``.\n\n1.0.1 (2015-12-24)\n------------------\n\n* fix a compile issue with the msvc compiler (seems it don't like the inline option on the ``fast_when_call``).\n\n1.0.0 (2015-12-24)\n------------------\n\n* implemented fast tracer and query objects in cython. **may be backwards incompatible**\n\n  to force using the old pure-python implementation set the ``purepythonhunter`` environment variable to non-empty value.\n* added filtering operators: ``contains``, ``startswith``, ``endswith`` and ``in``. examples:\n\n  * ``q(module_startswith='foo'`` will match events from ``foo``, ``foo.bar`` and ``foobar``.\n  * ``q(module_startswith=['foo', 'bar']`` will match events from ``foo``, ``foo.bar``, ``foobar``, ``bar``, ``bar.foo`` and ``baroo`` .\n  * ``q(module_endswith='bar'`` will match events from ``foo.bar`` and ``foobar``.\n  * ``q(module_contains='ip'`` will match events from ``lipsum``.\n  * ``q(module_in=['foo', 'bar']`` will match events from ``foo`` and ``bar``.\n  * ``q(module_regex=r\"(re|sre.*)\\b\") will match events from ``re``, ``re.foobar``, ``srefoobar`` but not from ``repr``.\n\n* removed the ``merge`` option. now when you call ``hunter.trace(...)`` multiple times only the last one is active.\n  **backwards incompatible**\n* remove the ``previous_tracer`` handling. now when you call ``hunter.trace(...)`` the previous tracer (whatever was in\n  ``sys.gettrace()``) is disabled and restored when ``hunter.stop()`` is called. **backwards incompatible**\n* fixed ``codeprinter`` to show module name if it fails to get any sources.\n\n0.6.0 (2015-10-10)\n------------------\n\n* added a ``clear_env_var`` option on the tracer (disables tracing in subprocess).\n* added ``force_colors`` option on ``hunter.actions.varsprinter`` and ``hunter.actions.codeprinter``.\n* allowed setting the `stream` to a file name (option on ``hunter.actions.varsprinter`` and\n  ``hunter.actions.codeprinter``).\n* bumped up the filename alignment to 40 cols.\n* if not merging then ``self`` is not kept as a previous tracer anymore.\n  closes `#16 <https://github.com/ionelmc/python-hunter/issues/16>`_.\n* fixed handling in varsprinter: properly print eval errors and don't try to show anything if there's an attributeerror.\n  closes `#18 <https://github.com/ionelmc/python-hunter/issues/18>`_.\n* added a ``stdlib`` boolean flag (for filtering purposes).\n  closes `#15 <https://github.com/ionelmc/python-hunter/issues/15>`_.\n* fixed broken frames that have \"none\" for filename or module (so they can still be treated as strings).\n* corrected output files in the ``install_lib`` command so that pip can uninstall the pth file.\n  this only works when it's installed with pip (sadly, ``setup.py install/develop`` and ``pip install -e`` will still\n  leave pth garbage on ``pip uninstall hunter``).\n\n0.5.1 (2015-04-15)\n------------------\n\n* fixed ``hunter.event.event.globals`` to actually be the dict of global vars (it was just the locals).\n\n0.5.0 (2015-04-06)\n------------------\n\n* fixed ``hunter.and`` and ``hunter.or`` \"single argument unwrapping\".\n* implemented predicate compression. example: ``or(or(a, b), c)`` is converted to ``or(a, b, c)``.\n* renamed ``hunter.event.event.source`` to ``hunter.event.event.fullsource``.\n* added ``hunter.event.event.source`` that doesn't do any fancy sourcecode tokenization.\n* fixed ``hunter.event.event.fullsource`` return value for situations where the tokenizer would fail.\n* made the print function available in the ``pythonhunter`` env var payload.\n* added a __repr__ for ``hunter.event.event``.\n\n0.4.0 (2015-03-29)\n------------------\n\n* disabled colors for jython.\n  contributed by claudiu popa in `#12 <https://github.com/ionelmc/python-hunter/pull/12>`_.\n* test suite fixes for windows.\n  contributed by claudiu popa in `#11 <https://github.com/ionelmc/python-hunter/pull/11>`_.\n* added an introduction section in the docs.\n* implemented a prettier fallback for when no sources are available for that frame.\n* implemented fixups in cases where you use action classes as a predicates.\n\n0.3.1 (2015-03-29)\n------------------\n\n* forgot to merge some commits ...\n\n0.3.0 (2015-03-29)\n------------------\n\n* added handling for internal repr failures.\n* fixed issues with displaying code that has non-ascii characters.\n* implemented better display for ``call`` frames so that when a function has decorators the\n  function definition is shown (instead of just the first decorator).\n  see: `#8 <https://github.com/ionelmc/python-hunter/issues/8>`_.\n\n0.2.1 (2015-03-28)\n------------------\n\n* added missing color entry for exception events.\n* added ``hunter.event.event.line`` property. it returns the source code for the line being run.\n\n0.2.0 (2015-03-27)\n------------------\n\n* added color support (and ``colorama`` as dependency).\n* added support for expressions in ``hunter.actions.varsprinter``.\n* breaking changes:\n\n  * renamed ``f`` to ``hunter.q``. and ``hunter.q`` is now just a convenience wrapper for\n    ``hunter.predicates.query``.\n  * renamed the ``python_hunter`` env variable to ``pythonhunter``.\n  * changed ``hunter.predicates.when`` to take positional arguments.\n  * changed output to show 2 path components (still not configurable).\n  * changed ``hunter.actions.varsprinter`` to take positional arguments for the names.\n* improved error reporting for env variable activation (``pythonhunter``).\n* fixed env var activator (the ``.pth`` file) installation with ``setup.py install`` (the \"egg installs\") and\n  ``setup.py develop``/``pip install -e`` (the \"egg links\").\n\n0.1.0 (2015-03-22)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "trace,tracer,settrace,debugger,debugging,code,source",
  "license": "bsd-2-clause",
  "name": "hunter",
  "package_url": "https://pypi.org/project/hunter/",
  "project_url": "https://pypi.org/project/hunter/",
  "project_urls": {
    "Changelog": "https://python-hunter.readthedocs.io/en/latest/changelog.html",
    "Documentation": "https://python-hunter.readthedocs.io/",
    "Homepage": "https://github.com/ionelmc/python-hunter",
    "Issue Tracker": "https://github.com/ionelmc/python-hunter/issues"
  },
  "release_url": "https://pypi.org/project/hunter/3.6.1/",
  "requires_dist": [
    "manhole (>=1.5) ; platform_system != \"Windows\""
  ],
  "requires_python": ">=3.7",
  "summary": "hunter is a flexible code tracing toolkit.",
  "version": "3.6.1",
  "releases": [],
  "developers": [
    "contact@ionelmc.ro"
  ],
  "kwds": "python_hunter pythonhunter pythonhunterconfig _tracing tracing",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_hunter",
  "homepage": "https://github.com/ionelmc/python-hunter",
  "release_count": 53,
  "dependency_ids": [
    "pypi_manhole"
  ]
}
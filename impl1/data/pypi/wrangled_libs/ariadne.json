{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![ariadne](https://ariadnegraphql.org/img/logo-horizontal-sm.png)](https://ariadnegraphql.org)\n\n[![documentation](https://img.shields.io/badge/docs-ariadnegraphql.org-brightgreen.svg)](https://ariadnegraphql.org)\n[![codecov](https://codecov.io/gh/mirumee/ariadne/branch/master/graph/badge.svg)](https://codecov.io/gh/mirumee/ariadne)\n\n- - - - -\n\n# ariadne\n\nariadne is a python library for implementing [graphql](http://graphql.github.io/) servers.\n\n- **schema-first:** ariadne enables python developers to use schema-first approach to the api implementation. this is the leading approach used by the graphql community and supported by dozens of frontend and backend developer tools, examples, and learning resources. ariadne makes all of this immediately available to you and other members of your team.\n- **simple:** ariadne offers small, consistent and easy to memorize api that lets developers focus on business problems, not the boilerplate.\n- **open:** ariadne was designed to be modular and open for customization. if you are missing or unhappy with something, extend or easily swap with your own.\n\ndocumentation is available [here](https://ariadnegraphql.org).\n\n\n## features\n\n- simple, quick to learn and easy to memorize api.\n- compatibility with graphql.js version 15.5.1.\n- queries, mutations and input types.\n- asynchronous resolvers and query execution.\n- subscriptions.\n- custom scalars, enums and schema directives.\n- unions and interfaces.\n- file uploads.\n- defining schema using sdl strings.\n- loading schema from `.graphql`, `.gql`, and `.graphqls` files.\n- wsgi middleware for implementing graphql in existing sites.\n- apollo tracing and [opentracing](http://opentracing.io) extensions for api monitoring.\n- opt-in automatic resolvers mapping between `camelcase` and `snake_case`, and a `@convert_kwargs_to_snake_case` function decorator for converting `camelcase` kwargs to `snake_case`.\n- built-in simple synchronous dev server for quick graphql experimentation and graphql playground.\n- support for [apollo graphql extension for visual studio code](https://marketplace.visualstudio.com/items?itemname=apollographql.vscode-apollo).\n- graphql syntax validation via `gql()` helper function. also provides colorization if apollo graphql extension is installed.\n- no global state or object registry, support for multiple graphql apis in same codebase with explicit type reuse.\n- support for `apollo federation`.\n\n\n## installation\n\nariadne can be installed with pip:\n\n```console\npip install ariadne\n```\n\nariadne requires python 3.7 or higher.\n\n\n## quickstart\n\nthe following example creates an api defining `person` type and single query field `people` returning a list of two persons. it also starts a local dev server with [graphql playground](https://github.com/prisma/graphql-playground) available on the `http://127.0.0.1:8000` address.\n\nstart by installing [uvicorn](http://www.uvicorn.org/), an asgi server we will use to serve the api:\n\n```console\npip install uvicorn\n```\n\nthen create an `example.py` file for your example application:\n\n```python\nfrom ariadne import objecttype, querytype, gql, make_executable_schema\nfrom ariadne.asgi import graphql\n\n# define types using schema definition language (https://graphql.org/learn/schema/)\n# wrapping string in gql function provides validation and better error traceback\ntype_defs = gql(\"\"\"\n    type query {\n        people: [person!]!\n    }\n\n    type person {\n        firstname: string\n        lastname: string\n        age: int\n        fullname: string\n    }\n\"\"\")\n\n# map resolver functions to query fields using querytype\nquery = querytype()\n\n# resolvers are simple python functions\n@query.field(\"people\")\ndef resolve_people(*_):\n    return [\n        {\"firstname\": \"john\", \"lastname\": \"doe\", \"age\": 21},\n        {\"firstname\": \"bob\", \"lastname\": \"boberson\", \"age\": 24},\n    ]\n\n\n# map resolver functions to custom type fields using objecttype\nperson = objecttype(\"person\")\n\n@person.field(\"fullname\")\ndef resolve_person_fullname(person, *_):\n    return \"%s %s\" % (person[\"firstname\"], person[\"lastname\"])\n\n# create executable graphql schema\nschema = make_executable_schema(type_defs, query, person)\n\n# create an asgi app using the schema, running in debug mode\napp = graphql(schema, debug=true)\n```\n\nfinally run the server:\n\n```console\nuvicorn example:app\n```\n\nfor more guides and examples, please see the [documentation](https://ariadnegraphql.org).\n\n\n## contributing\n\nwe are welcoming contributions to ariadne! if you've found a bug or issue, feel free to use [github issues](https://github.com/mirumee/ariadne/issues). if you have any questions or feedback, don't hesitate to catch us on [github discussions](https://github.com/mirumee/ariadne/discussions/).\n\nfor guidance and instructions, please see [contributing.md](contributing.md).\n\nwebsite and the docs have their own github repository: [mirumee/ariadne-website](https://github.com/mirumee/ariadne-website)\n\nalso make sure you follow [@ariadnegraphql](https://twitter.com/ariadnegraphql) on twitter for latest updates, news and random musings!\n\n**crafted with \u2764\ufe0f by [mirumee software](http://mirumee.com)**\nhello@mirumee.com\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause license  copyright (c) 2023, mirumee labs all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  * redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  * neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.",
  "name": "ariadne",
  "package_url": "https://pypi.org/project/ariadne/",
  "project_url": "https://pypi.org/project/ariadne/",
  "project_urls": {
    "Bug Tracker": "https://github.com/mirumee/ariadne/issues",
    "Community": "https://github.com/mirumee/ariadne/discussions",
    "Homepage": "https://ariadnegraphql.org/",
    "Repository": "https://github.com/mirumee/ariadne",
    "Twitter": "https://twitter.com/AriadneGraphQL"
  },
  "release_url": "https://pypi.org/project/ariadne/0.21/",
  "requires_dist": [
    "graphql-core<3.3,>=3.2.0",
    "starlette<1.0,>0.17",
    "typing-extensions>=3.6.0",
    "python-multipart>=0.0.5; extra == 'asgi-file-uploads'",
    "black; extra == 'dev'",
    "mypy; extra == 'dev'",
    "pylint; extra == 'dev'",
    "opentelemetry-api; extra == 'telemetry'",
    "aiodataloader; extra == 'test'",
    "freezegun; extra == 'test'",
    "graphql-sync-dataloaders; python_version > '3.7' and extra == 'test'",
    "httpx; extra == 'test'",
    "opentelemetry-api; extra == 'test'",
    "opentracing; extra == 'test'",
    "pytest; extra == 'test'",
    "pytest-asyncio; extra == 'test'",
    "pytest-benchmark; extra == 'test'",
    "pytest-cov; extra == 'test'",
    "pytest-mock; extra == 'test'",
    "python-multipart>=0.0.5; extra == 'test'",
    "syrupy; extra == 'test'",
    "werkzeug; extra == 'test'",
    "opentracing; extra == 'tracing'"
  ],
  "requires_python": "",
  "summary": "ariadne is a python library for implementing graphql servers.",
  "version": "0.21",
  "releases": [],
  "developers": [
    "hello@mirumee.com"
  ],
  "kwds": "graphqls graphql ariadnegraphql apollographql graph",
  "license_kwds": "copyright liability liable negligence disclaimer",
  "libtype": "pypi",
  "id": "pypi_ariadne",
  "homepage": "",
  "release_count": 47,
  "dependency_ids": [
    "pypi_aiodataloader",
    "pypi_black",
    "pypi_freezegun",
    "pypi_graphql_core",
    "pypi_graphql_sync_dataloaders",
    "pypi_httpx",
    "pypi_mypy",
    "pypi_opentelemetry_api",
    "pypi_opentracing",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_python_multipart",
    "pypi_starlette",
    "pypi_syrupy",
    "pypi_typing_extensions",
    "pypi_werkzeug"
  ]
}
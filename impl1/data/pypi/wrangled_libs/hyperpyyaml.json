{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3"
  ],
  "description": "introduction\n------------\n\na crucial element of systems for data-analysis is laying out all the\nhyperparameters of that system so they can be easily examined and modified.\nwe add a few useful extensions to a popular human-readable data-serialization\nlanguage known as yaml (yaml ain't markup language). this provides support\nfor a rather expansive idea of what constitutes a hyperparameter, and cleans\nup python files for data analysis to just the bare algorithm.\n\n### table of contents\n* [yaml basics](#yaml-basics)\n* [hyperpyyaml](#hyperpyyaml)\n    * [objects](#objects)\n    * [aliases](#aliases)\n    * [tuples](#tuples)\n* [how to use hyperpyyaml](#how-to-use-hyperpyyaml)\n* [conclusion](#conclusion)\n\nyaml basics\n-----------\n\nyaml is a data-serialization language, similar to json, and it supports\nthree basic types of nodes: scalar, sequential, and mapping. pyyaml naturally\nconverts sequential nodes to python lists and mapping nodes to python dicts.\n\nscalar nodes can take one of the following forms:\n\n```yaml\nstring: abcd  # no quotes needed\ninteger: 1\nfloat: 1.3\nbool: true\nnone: null\n```\n\nnote that we've used a simple mapping to demonstrate the scalar nodes. a mapping\nis a set of `key: value` pairs, defined so that the key can be used to easily\nretrieve the corresponding value. in addition to the format above, mappings\ncan also be specified in a similar manner to json:\n\n```yaml\n{foo: 1, bar: 2.5, baz: \"abc\"}\n```\n\nsequences, or lists of items, can also be specified in two ways:\n\n```yaml\n- foo\n- bar\n- baz\n```\n\nor\n\n```yaml\n[foo, bar, baz]\n```\n\nnote that when not using the inline version, yaml uses whitespace to denote\nnested items:\n\n```yaml\nfoo:\n    a: 1\n    b: 2\nbar:\n    - c\n    - d\n```\n\nyaml has a few more advanced features (such as\n[aliases](https://pyyaml.org/wiki/pyyamldocumentation#aliases) and\n[merge keys](https://yaml.org/type/merge.html)) that you may want to explore\non your own. we will briefly discuss one here since it is relevant for our\nextensions: [yaml tags](https://pyyaml.org/wiki/pyyamldocumentation#tags).\n\ntags are added with a `!` prefix, and they specify the type of the node. this\nallows types beyond the simple types listed above to be used. pyyaml supports a\nfew additional types, such as:\n\n```yaml\n!!set                           # set\n!!timestamp                     # datetime.datetime\n!!python/tuple                  # tuple\n!!python/complex                # complex\n!!python/name:module.name       # a class or function\n!!python/module:package.module  # a module\n!!python/object/new:module.cls  # an instance of a class\n```\n\nthese can all be quite useful, however we found that this system was a bit\ncumbersome, especially with the frequency with which we were using them. so\nwe decided to implement some shortcuts for these features, which we are\ncalling \"hyperpyyaml\".\n\nhyperpyyaml\n-----------\n\nwe make several extensions to yaml including easier object creation, nicer\naliases, and tuples.\n\n### objects\n\nour first extension is to simplify the structure for specifying an instance,\nmodule, class, or function. as an example:\n\n```yaml\nmodel: !new:collections.counter\n```\n\nthis tag, prefixed with `!new:`, constructs an instance of the specified class.\nif the node is a mapping node, all the items are passed as keyword arguments\nto the class when the instance is created. a list can similarly be used to\npass positional arguments. see the following examples:\n\n```yaml\nfoo: !new:collections.counter\n  - abracadabra\nbar: !new: collections.counter\n  a: 2\n  b: 1\n  c: 5\n```\n\nwe also simplify the interface for specifying a function or class or other\nstatic python entity:\n\n```yaml\nadd: !name:operator.add\n```\n\nthis code stores the `add` function. it can later be used in the usual way:\n\n```python\n>>> loaded_yaml = load_hyperpyyaml(\"add: !name:operator.add\")\n>>> loaded_yaml[\"add\"](2, 4)\n6\n```\n\n### aliases\n\nanother extension is a nicer alias system that supports things like\nstring interpolation. we've added a tag written `!ref` that\ntakes keys in angle brackets, and searches for them inside the yaml\nfile itself. as an example:\n\n```yaml\nfolder1: abc/def\nfolder2: ghi/jkl\nfolder3: !ref <folder1>/<folder2>\n\nfoo: 1024\nbar: 512\nbaz: !ref <foo> // <bar> + 1\n```\n\nthis allows us to change some values and automatically change the\ndependent values accordingly.\nyou can also refer to other references, and to sub-nodes using brackets.\n\n```yaml\nblock_index: 1\ncnn1:\n    out_channels: !ref <block_index> * 64\n    kernel_size: (3, 3)\ncnn2: \n    out_channels: !ref <cnn1[out_channels]>\n    kernel_size: (3, 3)\n```\n\nfinally, you can make references to nodes that are objects, not just scalars.\n\n```python\nyaml_string = \"\"\"\nfoo: !new:collections.counter\n  a: 4\nbar: !ref <foo>\nbaz: !copy <foo>\n\"\"\"\nloaded_yaml = load_hyperpyyaml(yaml_string)\nloaded_yaml[\"foo\"].update({\"b\": 10})\nprint(loaded_yaml[\"bar\"])\nprint(loaded_yaml[\"baz\"])\n```\n\nthis provides the output:\n```\ncounter({'b': 10, 'a': 4})\ncounter({'a': 4})\n```\n\nnote that `!ref` makes only a shallow copy, so updating `foo`\nalso updates `bar`. if you want a deep copy, use the `!copy` tag.\n\nthere are some issues (#7 #11) mentioning that `!ref` cannot refer to the return value of `!apply` function. \nthus we provide another `!applyref` tag to work with `!ref`, which can be used in four ways:\n\n```yaml\n# 1. pass the positional and keyword arguments at the same time. like `!!python/object/apply:module.function` in pyyaml\nc: !applyref:sorted\n    _args: \n        - [3, 4, 1, 2]\n    _kwargs:\n        reverse: false\nd: !ref <c>-<c>\n\n# 2. only pass the keyword arguments\ne: !applyref:random.randint\n    a: 1\n    b: 3\nf: !ref <e><e>\n\n# 3. only pass the positional arguments\ng: !applyref:random.randint\n    - 1\n    - 3\nh: !ref <g><g>\n\n# 4. no arguments\ni: !applyref:random.random\nj: !ref <i><i>\n```\n\nnote that `!applyref` cannot return an object, otherwise the `representererror` will be raised.\n\n### tuples\n\none last minor extension to the yaml syntax we've made is to implicitly\nresolve any string starting with `(` and ending with `)` to a tuple.\nthis makes the use of yaml more intuitive for python users.\n\n\nhow to use hyperpyyaml\n---------------------\n\nall of the listed extensions are available by loading yaml using the\n`load_hyperpyyaml` function. this function returns an object in a similar\nmanner to pyyaml and other yaml libraries.\nalso, `load_hyperpyyaml` takes an optional argument, `overrides`\nwhich allows changes to any of the parameters listed in the yaml.\nthe following example demonstrates changing the `out_channels`\nof the cnn layer:\n\n```python\n>>> yaml_string = \"\"\"\n... block_index: 1\n... cnn1:\n...   out_channels: !ref <block_index> * 64\n...   kernel_size: (3, 3)\n... cnn2: \n...   out_channels: !ref <cnn1[out_channels]>\n...   kernel_size: (3, 3)\n... \"\"\"\n>>> overrides = {\"block_index\": 2}\n>>> with open(\"hyperparameters.yaml\") as f:\n...    hyperparameters = load_hyperpyyaml(f, overrides)\n>>> hyperparameters[\"block_index\"]\n2\n>>> hyperparameters[\"cnn2\"][\"out_channels\"]\n128\n```\n\nconclusion\n----------\n\nwe've defined a number of extensions to the yaml syntax, designed to\nmake it easier to use for hyperparameter specification. feedback is welcome!\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "hyperpyyaml",
  "package_url": "https://pypi.org/project/HyperPyYAML/",
  "project_url": "https://pypi.org/project/HyperPyYAML/",
  "project_urls": {
    "Homepage": "https://github.com/speechbrain/HyperPyYAML"
  },
  "release_url": "https://pypi.org/project/HyperPyYAML/1.2.2/",
  "requires_dist": [
    "pyyaml >=5.1",
    "ruamel.yaml >=0.17.28"
  ],
  "requires_python": "",
  "summary": "extensions to yaml syntax for better python interaction",
  "version": "1.2.2",
  "releases": [],
  "developers": [
    "peter_plantinga",
    "speechbrain@gmail.com"
  ],
  "kwds": "yaml pyyamldocumentation yaml_string pyyaml python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_hyperpyyaml",
  "homepage": "https://github.com/speechbrain/hyperpyyaml",
  "release_count": 7,
  "dependency_ids": [
    "pypi_pyyaml",
    "pypi_ruamel.yaml"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "python data validation library\n\n# contributions only\n\n**what does this mean?** i do not have time to fix issues myself. the only way fixes or new features will be added is by people submitting prs.\n\n**current status:** voluptuous is largely feature stable. there hasn't been a need to add new features in a while, but there are some bugs that should be fixed.\n\n**why?** i no longer use voluptuous personally (in fact i no longer regularly write python code). rather than leave the project in a limbo of people filing issues and wondering why they're not being worked on, i believe this notice will more clearly set expectations.\n\n# voluptuous is a python data validation library\n\n[![image](https://img.shields.io/pypi/v/voluptuous.svg)](https://python.org/pypi/voluptuous)\n[![image](https://img.shields.io/pypi/l/voluptuous.svg)](https://python.org/pypi/voluptuous)\n[![image](https://img.shields.io/pypi/pyversions/voluptuous.svg)](https://python.org/pypi/voluptuous)\n[![test status](https://github.com/alecthomas/voluptuous/actions/workflows/tests.yml/badge.svg)](https://github.com/alecthomas/voluptuous/actions/workflows/tests.yml)\n[![coverage status](https://coveralls.io/repos/github/alecthomas/voluptuous/badge.svg?branch=master)](https://coveralls.io/github/alecthomas/voluptuous?branch=master)\n[![gitter chat](https://badges.gitter.im/alecthomas.svg)](https://gitter.im/alecthomas/lobby)\n\nvoluptuous, *despite* the name, is a python data validation library. it\nis primarily intended for validating data coming into python as json,\nyaml, etc.\n\nit has three goals:\n\n1. simplicity.\n2. support for complex data structures.\n3. provide useful error messages.\n\n## contact\n\nvoluptuous now has a mailing list! send a mail to\n[<voluptuous@librelist.com>](mailto:voluptuous@librelist.com) to subscribe. instructions\nwill follow.\n\nyou can also contact me directly via [email](mailto:alec@swapoff.org) or\n[twitter](https://twitter.com/alecthomas).\n\nto file a bug, create a [new issue](https://github.com/alecthomas/voluptuous/issues/new) on github with a short example of how to replicate the issue.\n\n## documentation\n\nthe documentation is provided [here](http://alecthomas.github.io/voluptuous/).\n\n## contribution to documentation\n\ndocumentation is built using `sphinx`. you can install it by\n\n    pip install -r requirements.txt\n\nfor building `sphinx-apidoc` from scratch you need to set pythonpath to `voluptuous/voluptuous` repository.\n\nthe documentation is provided [here.](http://alecthomas.github.io/voluptuous/)\n\n## changelog\n\nsee [changelog.md](https://github.com/alecthomas/voluptuous/blob/master/changelog.md).\n\n## why use voluptuous over another validation library?\n\n**validators are simple callables:**\nno need to subclass anything, just use a function.\n\n**errors are simple exceptions:**\na validator can just `raise invalid(msg)` and expect the user to get\nuseful messages.\n\n**schemas are basic python data structures:**\nshould your data be a dictionary of integer keys to strings?\n`{int: str}` does what you expect. list of integers, floats or\nstrings? `[int, float, str]`.\n\n**designed from the ground up for validating more than just forms:**\nnested data structures are treated in the same way as any other\ntype. need a list of dictionaries? `[{}]`\n\n**consistency:**\ntypes in the schema are checked as types. values are compared as\nvalues. callables are called to validate. simple.\n\n## show me an example\n\ntwitter's [user search api](https://dev.twitter.com/rest/reference/get/users/search) accepts\nquery urls like:\n\n```bash\n$ curl 'https://api.twitter.com/1.1/users/search.json?q=python&per_page=20&page=1'\n```\n\nto validate this we might use a schema like:\n\n```pycon\n>>> from voluptuous import schema\n>>> schema = schema({\n...   'q': str,\n...   'per_page': int,\n...   'page': int,\n... })\n```\n\nthis schema very succinctly and roughly describes the data required by\nthe api, and will work fine. but it has a few problems. firstly, it\ndoesn't fully express the constraints of the api. according to the api,\n`per_page` should be restricted to at most 20, defaulting to 5, for\nexample. to describe the semantics of the api more accurately, our\nschema will need to be more thoroughly defined:\n\n```pycon\n>>> from voluptuous import required, all, length, range\n>>> schema = schema({\n...   required('q'): all(str, length(min=1)),\n...   required('per_page', default=5): all(int, range(min=1, max=20)),\n...   'page': all(int, range(min=0)),\n... })\n```\n\nthis schema fully enforces the interface defined in twitter's\ndocumentation, and goes a little further for completeness.\n\n\"q\" is required:\n\n```pycon\n>>> from voluptuous import multipleinvalid, invalid\n>>> try:\n...   schema({})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data['q']\"\ntrue\n```\n\n...must be a string:\n\n```pycon\n>>> try:\n...   schema({'q': 123})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"expected str for dictionary value @ data['q']\"\ntrue\n```\n\n...and must be at least one character in length:\n\n```pycon\n>>> try:\n...   schema({'q': ''})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"length of value must be at least 1 for dictionary value @ data['q']\"\ntrue\n>>> schema({'q': '#topic'}) == {'q': '#topic', 'per_page': 5}\ntrue\n```\n\n\"per\\_page\" is a positive integer no greater than 20:\n\n```pycon\n>>> try:\n...   schema({'q': '#topic', 'per_page': 900})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"value must be at most 20 for dictionary value @ data['per_page']\"\ntrue\n>>> try:\n...   schema({'q': '#topic', 'per_page': -10})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"value must be at least 1 for dictionary value @ data['per_page']\"\ntrue\n```\n\n\"page\" is an integer \\>= 0:\n\n```pycon\n>>> try:\n...   schema({'q': '#topic', 'per_page': 'one'})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc)\n\"expected int for dictionary value @ data['per_page']\"\n>>> schema({'q': '#topic', 'page': 1}) == {'q': '#topic', 'page': 1, 'per_page': 5}\ntrue\n```\n\n## defining schemas\n\nschemas are nested data structures consisting of dictionaries, lists,\nscalars and *validators*. each node in the input schema is pattern\nmatched against corresponding nodes in the input data.\n\n### literals\n\nliterals in the schema are matched using normal equality checks:\n\n```pycon\n>>> schema = schema(1)\n>>> schema(1)\n1\n>>> schema = schema('a string')\n>>> schema('a string')\n'a string'\n```\n\n### types\n\ntypes in the schema are matched by checking if the corresponding value\nis an instance of the type:\n\n```pycon\n>>> schema = schema(int)\n>>> schema(1)\n1\n>>> try:\n...   schema('one')\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"expected int\"\ntrue\n```\n\n### urls\n\nurls in the schema are matched by using `urlparse` library.\n\n```pycon\n>>> from voluptuous import url\n>>> schema = schema(url())\n>>> schema('http://w3.org')\n'http://w3.org'\n>>> try:\n...   schema('one')\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"expected a url\"\ntrue\n```\n\n### lists\n\nlists in the schema are treated as a set of valid values. each element\nin the schema list is compared to each value in the input data:\n\n```pycon\n>>> schema = schema([1, 'a', 'string'])\n>>> schema([1])\n[1]\n>>> schema([1, 1, 1])\n[1, 1, 1]\n>>> schema(['a', 1, 'string', 1, 'string'])\n['a', 1, 'string', 1, 'string']\n```\n\nhowever, an empty list (`[]`) is treated as is. if you want to specify a list that can\ncontain anything, specify it as `list`:\n\n```pycon\n>>> schema = schema([])\n>>> try:\n...   schema([1])\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value @ data[1]\"\ntrue\n>>> schema([])\n[]\n>>> schema = schema(list)\n>>> schema([])\n[]\n>>> schema([1, 2])\n[1, 2]\n```\n\n### sets and frozensets\n\nsets and frozensets are treated as a set of valid values. each element\nin the schema set is compared to each value in the input data:\n\n```pycon\n>>> schema = schema({42})\n>>> schema({42}) == {42}\ntrue\n>>> try:\n...   schema({43})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"invalid value in set\"\ntrue\n>>> schema = schema({int})\n>>> schema({1, 2, 3}) == {1, 2, 3}\ntrue\n>>> schema = schema({int, str})\n>>> schema({1, 2, 'abc'}) == {1, 2, 'abc'}\ntrue\n>>> schema = schema(frozenset([int]))\n>>> try:\n...   schema({3})\n...   raise assertionerror('invalid not raised')\n... except invalid as e:\n...   exc = e\n>>> str(exc) == 'expected a frozenset'\ntrue\n```\n\nhowever, an empty set (`set()`) is treated as is. if you want to specify a set\nthat can contain anything, specify it as `set`:\n\n```pycon\n>>> schema = schema(set())\n>>> try:\n...   schema({1})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"invalid value in set\"\ntrue\n>>> schema(set()) == set()\ntrue\n>>> schema = schema(set)\n>>> schema({1, 2}) == {1, 2}\ntrue\n```\n\n### validation functions\n\nvalidators are simple callables that raise an `invalid` exception when\nthey encounter invalid data. the criteria for determining validity is\nentirely up to the implementation; it may check that a value is a valid\nusername with `pwd.getpwnam()`, it may check that a value is of a\nspecific type, and so on.\n\nthe simplest kind of validator is a python function that raises\nvalueerror when its argument is invalid. conveniently, many builtin\npython functions have this property. here's an example of a date\nvalidator:\n\n```pycon\n>>> from datetime import datetime\n>>> def date(fmt='%y-%m-%d'):\n...   return lambda v: datetime.strptime(v, fmt)\n```\n\n```pycon\n>>> schema = schema(date())\n>>> schema('2013-03-03')\ndatetime.datetime(2013, 3, 3, 0, 0)\n>>> try:\n...   schema('2013-03')\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value\"\ntrue\n```\n\nin addition to simply determining if a value is valid, validators may\nmutate the value into a valid form. an example of this is the\n`coerce(type)` function, which returns a function that coerces its\nargument to the given type:\n\n```python\ndef coerce(type, msg=none):\n    \"\"\"coerce a value to a type.\n\n    if the type constructor throws a valueerror, the value will be marked as\n    invalid.\n    \"\"\"\n    def f(v):\n        try:\n            return type(v)\n        except valueerror:\n            raise invalid(msg or ('expected %s' % type.__name__))\n    return f\n```\n\nthis example also shows a common idiom where an optional human-readable\nmessage can be provided. this can vastly improve the usefulness of the\nresulting error messages.\n\n### dictionaries\n\neach key-value pair in a schema dictionary is validated against each\nkey-value pair in the corresponding data dictionary:\n\n```pycon\n>>> schema = schema({1: 'one', 2: 'two'})\n>>> schema({1: 'one'})\n{1: 'one'}\n```\n\n#### extra dictionary keys\n\nby default any additional keys in the data, not in the schema will\ntrigger exceptions:\n\n```pycon\n>>> schema = schema({2: 3})\n>>> try:\n...   schema({1: 2, 2: 3})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"extra keys not allowed @ data[1]\"\ntrue\n```\n\nthis behaviour can be altered on a per-schema basis. to allow\nadditional keys use\n`schema(..., extra=allow_extra)`:\n\n```pycon\n>>> from voluptuous import allow_extra\n>>> schema = schema({2: 3}, extra=allow_extra)\n>>> schema({1: 2, 2: 3})\n{1: 2, 2: 3}\n```\n\nto remove additional keys use\n`schema(..., extra=remove_extra)`:\n\n```pycon\n>>> from voluptuous import remove_extra\n>>> schema = schema({2: 3}, extra=remove_extra)\n>>> schema({1: 2, 2: 3})\n{2: 3}\n```\n\nit can also be overridden per-dictionary by using the catch-all marker\ntoken `extra` as a key:\n\n```pycon\n>>> from voluptuous import extra\n>>> schema = schema({1: {extra: object}})\n>>> schema({1: {'foo': 'bar'}})\n{1: {'foo': 'bar'}}\n```\n\n#### required dictionary keys\n\nby default, keys in the schema are not required to be in the data:\n\n```pycon\n>>> schema = schema({1: 2, 3: 4})\n>>> schema({3: 4})\n{3: 4}\n```\n\nsimilarly to how extra\\_ keys work, this behaviour can be overridden\nper-schema:\n\n```pycon\n>>> schema = schema({1: 2, 3: 4}, required=true)\n>>> try:\n...   schema({3: 4})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\ntrue\n```\n\nand per-key, with the marker token `required(key)`:\n\n```pycon\n>>> schema = schema({required(1): 2, 3: 4})\n>>> try:\n...   schema({3: 4})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\ntrue\n>>> schema({1: 2})\n{1: 2}\n```\n\n#### optional dictionary keys\n\nif a schema has `required=true`, keys may be individually marked as\noptional using the marker token `optional(key)`:\n\n```pycon\n>>> from voluptuous import optional\n>>> schema = schema({1: 2, optional(3): 4}, required=true)\n>>> try:\n...   schema({})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\ntrue\n>>> schema({1: 2})\n{1: 2}\n>>> try:\n...   schema({1: 2, 4: 5})\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"extra keys not allowed @ data[4]\"\ntrue\n```\n\n```pycon\n>>> schema({1: 2, 3: 4})\n{1: 2, 3: 4}\n```\n\n### recursive / nested schema\n\nyou can use `voluptuous.self` to define a nested schema:\n\n```pycon\n>>> from voluptuous import schema, self\n>>> recursive = schema({\"more\": self, \"value\": int})\n>>> recursive({\"more\": {\"value\": 42}, \"value\": 41}) == {'more': {'value': 42}, 'value': 41}\ntrue\n```\n\n### extending an existing schema\n\noften it comes handy to have a base `schema` that is extended with more\nrequirements. in that case you can use `schema.extend` to create a new\n`schema`:\n\n```pycon\n>>> from voluptuous import schema\n>>> person = schema({'name': str})\n>>> person_with_age = person.extend({'age': int})\n>>> sorted(list(person_with_age.schema.keys()))\n['age', 'name']\n```\n\nthe original `schema` remains unchanged.\n\n### objects\n\neach key-value pair in a schema dictionary is validated against each\nattribute-value pair in the corresponding object:\n\n```pycon\n>>> from voluptuous import object\n>>> class structure(object):\n...     def __init__(self, q=none):\n...         self.q = q\n...     def __repr__(self):\n...         return '<structure(q={0.q!r})>'.format(self)\n...\n>>> schema = schema(object({'q': 'one'}, cls=structure))\n>>> schema(structure(q='one'))\n<structure(q='one')>\n```\n\n### allow none values\n\nto allow value to be none as well, use any:\n\n```pycon\n>>> from voluptuous import any\n\n>>> schema = schema(any(none, int))\n>>> schema(none)\n>>> schema(5)\n5\n```\n\n## error reporting\n\nvalidators must throw an `invalid` exception if invalid data is passed\nto them. all other exceptions are treated as errors in the validator and\nwill not be caught.\n\neach `invalid` exception has an associated `path` attribute representing\nthe path in the data structure to our currently validating value, as well\nas an `error_message` attribute that contains the message of the original\nexception. this is especially useful when you want to catch `invalid`\nexceptions and give some feedback to the user, for instance in the context of\nan http api.\n\n```pycon\n>>> def validate_email(email):\n...     \"\"\"validate email.\"\"\"\n...     if not \"@\" in email:\n...         raise invalid(\"this email is invalid.\")\n...     return email\n>>> schema = schema({\"email\": validate_email})\n>>> exc = none\n>>> try:\n...     schema({\"email\": \"whatever\"})\n... except multipleinvalid as e:\n...     exc = e\n>>> str(exc)\n\"this email is invalid. for dictionary value @ data['email']\"\n>>> exc.path\n['email']\n>>> exc.msg\n'this email is invalid.'\n>>> exc.error_message\n'this email is invalid.'\n```\n\nthe `path` attribute is used during error reporting, but also during matching\nto determine whether an error should be reported to the user or if the next\nmatch should be attempted. this is determined by comparing the depth of the\npath where the check is, to the depth of the path where the error occurred. if\nthe error is more than one level deeper, it is reported.\n\nthe upshot of this is that *matching is depth-first and fail-fast*.\n\nto illustrate this, here is an example schema:\n\n```pycon\n>>> schema = schema([[2, 3], 6])\n```\n\neach value in the top-level list is matched depth-first in-order. given\ninput data of `[[6]]`, the inner list will match the first element of\nthe schema, but the literal `6` will not match any of the elements of\nthat list. this error will be reported back to the user immediately. no\nbacktracking is attempted:\n\n```pycon\n>>> try:\n...   schema([[6]])\n...   raise assertionerror('multipleinvalid not raised')\n... except multipleinvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value @ data[0][0]\"\ntrue\n```\n\nif we pass the data `[6]`, the `6` is not a list type and so will not\nrecurse into the first element of the schema. matching will continue on\nto the second element in the schema, and succeed:\n\n```pycon\n>>> schema([6])\n[6]\n```\n\n## multi-field validation\n\nvalidation rules that involve multiple fields can be implemented as\ncustom validators. it's recommended to use `all()` to do a two-pass\nvalidation - the first pass checking the basic structure of the data,\nand only after that, the second pass applying your cross-field\nvalidator:\n\n```python\ndef passwords_must_match(passwords):\n    if passwords['password'] != passwords['password_again']:\n        raise invalid('passwords must match')\n    return passwords\n\nschema = schema(all(\n    # first \"pass\" for field types\n    {'password': str, 'password_again': str},\n    # follow up the first \"pass\" with your multi-field rules\n    passwords_must_match\n))\n\n# valid\nschema({'password': '123', 'password_again': '123'})\n\n# raises multipleinvalid: passwords must match\nschema({'password': '123', 'password_again': 'and now for something completely different'})\n\n```\n\nwith this structure, your multi-field validator will run with\npre-validated data from the first \"pass\" and so will not have to do\nits own type checking on its inputs.\n\nthe flipside is that if the first \"pass\" of validation fails, your\ncross-field validator will not run:\n\n```python\n# raises invalid because password_again is not a string\n# passwords_must_match() will not run because first-pass validation already failed\nschema({'password': '123', 'password_again': 1337})\n```\n\n## running tests\n\nvoluptuous is using `pytest`:\n\n```bash\n$ pip install pytest\n$ pytest\n```\n\nto also include a coverage report:\n\n```bash\n$ pip install pytest pytest-cov coverage>=3.0\n$ pytest --cov=voluptuous voluptuous/tests/\n```\n\n## other libraries and inspirations\n\nvoluptuous is heavily inspired by\n[validino](http://code.google.com/p/validino/), and to a lesser extent,\n[jsonvalidator](http://code.google.com/p/jsonvalidator/) and\n[json\\_schema](http://blog.sendapatch.se/category/json_schema.html).\n\n[pytest-voluptuous](https://github.com/f-secure/pytest-voluptuous) is a\n[pytest](https://github.com/pytest-dev/pytest) plugin that helps in\nusing voluptuous validators in `assert`s.\n\ni greatly prefer the light-weight style promoted by these libraries to\nthe complexity of libraries like formencode.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "voluptuous",
  "package_url": "https://pypi.org/project/voluptuous/",
  "project_url": "https://pypi.org/project/voluptuous/",
  "project_urls": {
    "Download": "https://pypi.python.org/pypi/voluptuous",
    "Homepage": "https://github.com/alecthomas/voluptuous"
  },
  "release_url": "https://pypi.org/project/voluptuous/0.14.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "python data validation library",
  "version": "0.14.1",
  "releases": [],
  "developers": [
    "alec@swapoff.org",
    "alec_thomas"
  ],
  "kwds": "pyversions contributions validating validity pip",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_voluptuous",
  "homepage": "https://github.com/alecthomas/voluptuous",
  "release_count": 46,
  "dependency_ids": [],
  "documentation_summary": "Voluptuous is a Python data validation library designed for simplicity, supporting complex data structures, and providing useful error messages. It's intended for validating data like JSON or YAML coming into Python. The library is feature-stable with some bugs needing fixes. The project is open to contributions only, as the original author, Alec Thomas, no longer actively maintains it due to not using Voluptuous or writing Python code regularly. The library requires Python version 3.8 or higher and is licensed under the BSD-3-Clause. It supports a wide range of Python versions from 3.8 to 3.12. Voluptuous allows for simple validators, straightforward error handling, and uses basic Python data structures for schemas. It includes detailed documentation and examples for various validation scenarios, including multi-field validation and extending schemas.",
  "embedding": [
    -0.00048538457485847175,
    0.021568693220615387,
    0.0049899849109351635,
    -0.033541809767484665,
    -0.018721340224146843,
    0.04396311938762665,
    0.005139470566064119,
    -0.0189206562936306,
    -0.013083583675324917,
    -0.042425546795129776,
    0.025597697123885155,
    0.0020750078838318586,
    -0.018877945840358734,
    0.006356713827699423,
    -0.009182711131870747,
    -0.016429223120212555,
    0.03450990840792656,
    -0.019305048510432243,
    0.01640074886381626,
    -0.006143162492662668,
    0.035791218280792236,
    -0.008243084885179996,
    -0.03898025304079056,
    0.0038937542121857405,
    -0.011247041635215282,
    0.034339066594839096,
    0.012556822970509529,
    -0.027121029794216156,
    -0.003819011151790619,
    0.014357773587107658,
    0.05039813369512558,
    -0.0077519165351986885,
    -0.01755392737686634,
    -0.0186928678303957,
    -0.002119497861713171,
    -0.022992368787527084,
    0.016059067100286484,
    -0.00363749242387712,
    0.03903719782829285,
    0.00902610644698143,
    0.012378863990306854,
    0.004904564004391432,
    -0.0034328389447182417,
    -0.034111279994249344,
    -0.019689440727233887,
    0.02152598276734352,
    0.0028562501538544893,
    -0.020159253850579262,
    -0.013596107251942158,
    0.007082788739353418,
    0.03789825737476349,
    0.008876620791852474,
    -0.01719800755381584,
    -0.008670187555253506,
    -0.005584369413554668,
    -0.005249805748462677,
    0.020742960274219513,
    0.02707831934094429,
    -0.013482213020324707,
    0.008442399092018604,
    0.0205721203237772,
    0.005406409967690706,
    -0.032659128308296204,
    0.0018507789354771376,
    -0.006936861667782068,
    -0.02094227634370327,
    -0.014108629897236824,
    0.029413148760795593,
    0.0050682867877185345,
    -0.00862747710198164,
    -0.0011727531673386693,
    0.043649908155202866,
    0.005961643531918526,
    -0.0037585049867630005,
    0.038239941000938416,
    -0.03394043818116188,
    -0.018080687150359154,
    0.02085685543715954,
    -0.01927657425403595,
    -0.026950187981128693,
    -0.003329622559249401,
    -0.01133246161043644,
    -0.012798848561942577,
    0.03365570306777954,
    0.015987882390618324,
    0.029085703194141388,
    -0.022778818383812904,
    0.010734518058598042,
    -0.011809393763542175,
    -0.012827321887016296,
    -0.018806761130690575,
    -0.010079626925289631,
    0.008164782077074051,
    0.016429223120212555,
    -0.019390469416975975,
    0.03240286931395531,
    -0.0056697903200984,
    0.02737729251384735,
    -0.0029078584630042315,
    0.011951761320233345,
    -0.017739003524184227,
    -0.0034826677292585373,
    -0.007694969419389963,
    -0.01652888022363186,
    -0.01335408166050911,
    -0.02092803828418255,
    -0.0006393195362761617,
    -0.0069866906851530075,
    0.02030162140727043,
    0.028416575863957405,
    -0.0205721203237772,
    0.039521247148513794,
    -0.003947142045944929,
    -0.022551029920578003,
    0.007744797971099615,
    -0.01158872339874506,
    0.0223232414573431,
    -0.0052889566868543625,
    -0.028715547174215317,
    -0.0023917758371680975,
    0.0036107986234128475,
    -0.00851358287036419,
    0.02138361521065235,
    0.008157663978636265,
    0.029413148760795593,
    -0.03493701294064522,
    0.009716589003801346,
    -0.008428162895143032,
    -0.004765755962580442,
    -0.021098880097270012,
    0.0007905851234681904,
    0.017511216923594475,
    0.018522026017308235,
    -0.015703147277235985,
    0.005619961302727461,
    -0.002525245537981391,
    -0.010812819935381413,
    -0.001523333485238254,
    -0.010435545817017555,
    -0.022579502314329147,
    0.02051517367362976,
    0.020984986796975136,
    -0.03399738669395447,
    0.02158292941749096,
    0.0005854868213646114,
    0.016998693346977234,
    0.009488801471889019,
    0.01039283536374569,
    0.002190681640058756,
    -0.02411707304418087,
    0.018109159544110298,
    0.009175592102110386,
    -0.018009502440690994,
    0.003425720613449812,
    0.0024505024775862694,
    0.016500405967235565,
    -0.02085685543715954,
    0.016856325790286064,
    0.008897976018488407,
    -0.002660494763404131,
    -0.009303723461925983,
    0.041998445987701416,
    -0.027690500020980835,
    -0.0015117661096155643,
    -0.011069081723690033,
    0.03169102966785431,
    0.036503054201602936,
    -0.02838810160756111,
    -0.014891652390360832,
    -0.0011006796266883612,
    -0.020557882264256477,
    0.033826544880867004,
    -0.01904878579080105,
    0.00783733744174242,
    0.017425796017050743,
    0.01573162153363228,
    0.019290810450911522,
    0.004036122001707554,
    -0.027847105637192726,
    0.008307150565087795,
    0.0008657730068080127,
    0.01719800755381584,
    0.017496978864073753,
    0.03749962896108627,
    -0.010072508826851845,
    0.010528084821999073,
    0.005417087581008673,
    0.003989852499216795,
    0.015916699543595314,
    0.015076730400323868,
    0.005865545477718115,
    0.028060656040906906,
    -0.0033438592217862606,
    -0.027021372690796852,
    -0.5867823362350464,
    -0.010236231610178947,
    0.0014058802044019103,
    -0.014706574380397797,
    -0.00284201349131763,
    0.007787508424371481,
    -0.010385717265307903,
    0.009716589003801346,
    -0.023860812187194824,
    0.022152399644255638,
    -0.030210407450795174,
    0.042995017021894455,
    -0.006595179438591003,
    -0.01497707236558199,
    -0.0037585049867630005,
    -0.011994470842182636,
    0.012827321887016296,
    -0.02975483052432537,
    -0.010449782945215702,
    0.027234923094511032,
    -0.0008911322802305222,
    0.05341632664203644,
    -0.013396792113780975,
    0.010499611496925354,
    -0.0043279752135276794,
    0.03567732498049736,
    0.0052391281351447105,
    -0.008556293323636055,
    0.036218319088220596,
    -0.008897976018488407,
    -0.03732878714799881,
    0.025597697123885155,
    0.01119721308350563,
    -0.013411029241979122,
    0.05933881923556328,
    -0.014478785917162895,
    -0.024202493950724602,
    0.03806909918785095,
    0.004555763676762581,
    0.0322035551071167,
    -0.02273610793054104,
    0.0075597199611365795,
    -0.001150508294813335,
    0.02296389639377594,
    0.00471236789599061,
    -0.007894284091889858,
    0.009723708033561707,
    0.009951495565474033,
    -0.011453473940491676,
    -0.012378863990306854,
    0.012898505665361881,
    -0.020273147150874138,
    0.014030328020453453,
    -0.005360140465199947,
    0.025213303044438362,
    -0.011667025275528431,
    0.011033490300178528,
    -0.007630903739482164,
    -0.009339314885437489,
    -0.0077519165351986885,
    0.00040485788485966623,
    -0.007694969419389963,
    0.0102860601618886,
    -0.020956512540578842,
    -0.005388614255934954,
    0.022778818383812904,
    0.008001059293746948,
    -0.0005401071393862367,
    0.002267204225063324,
    -0.03189034387469292,
    0.012336153537034988,
    0.0006482175085693598,
    -0.0005934949731454253,
    -0.032886918634176254,
    0.02078567072749138,
    0.03371265158057213,
    0.01534722838550806,
    0.00017072990885935724,
    0.01122568640857935,
    0.03544953465461731,
    0.020415514707565308,
    0.00243626581504941,
    -0.01147482916712761,
    -0.014920125715434551,
    0.0359620600938797,
    0.00242024939507246,
    -0.028174549341201782,
    -0.006235701497644186,
    -0.0010864428477361798,
    0.00023802084615454078,
    0.003940023481845856,
    0.029498569667339325,
    -0.016372274607419968,
    -0.04000530019402504,
    -0.00902610644698143,
    0.024572649970650673,
    -0.026750873774290085,
    0.00906169880181551,
    0.0021924611646682024,
    -0.03539258986711502,
    -0.009873193688690662,
    -0.027832867577672005,
    -0.0067909350618720055,
    0.008321386761963367,
    0.013937789015471935,
    0.034538380801677704,
    -0.014635390602052212,
    0.008506464771926403,
    0.011296870186924934,
    -0.01746850647032261,
    0.008186137303709984,
    -0.03804062679409981,
    -0.018393894657492638,
    -0.0016737092519178987,
    -0.022280531004071236,
    -0.03658847510814667,
    0.021340904757380486,
    0.0020145017188042402,
    -0.0015251130098477006,
    0.0017867134883999825,
    0.0028829441871494055,
    0.015589253045618534,
    -0.005502508021891117,
    0.0015446885954588652,
    -0.009446091018617153,
    0.0008893526974134147,
    0.0010597489308565855,
    -0.006630771327763796,
    -0.023875048384070396,
    0.01964673027396202,
    0.002457620808854699,
    -0.004231877159327269,
    0.02484314888715744,
    -0.014749284833669662,
    0.023077789694070816,
    0.0008791200234554708,
    0.02404589019715786,
    0.003167679300531745,
    -0.011111792176961899,
    0.002512788400053978,
    -0.013510686345398426,
    -0.0024843148421496153,
    0.005858427379280329,
    -0.003722913097590208,
    -0.005082523915916681,
    -0.015133677050471306,
    -0.02541261911392212,
    -0.0013952025910839438,
    -0.003059124108403921,
    0.02188190259039402,
    -0.035050906240940094,
    0.0009841161081567407,
    -0.03376959636807442,
    0.013738474808633327,
    -0.021141590550541878,
    -0.0042283181101083755,
    0.012300561182200909,
    -0.006758902221918106,
    -0.013090701773762703,
    0.0011069081956520677,
    0.01079858373850584,
    0.019034549593925476,
    0.002035856945440173,
    -0.008143427781760693,
    -0.014343536458909512,
    -0.016087539494037628,
    -0.01594517193734646,
    0.025967853143811226,
    -0.018365422263741493,
    -0.028701310977339745,
    -0.011346698738634586,
    -0.023205921053886414,
    0.013169003650546074,
    0.009004751220345497,
    0.008577648550271988,
    0.03294386342167854,
    -0.02837386541068554,
    0.002640919294208288,
    -0.00473016407340765,
    0.000363927218131721,
    0.012542586773633957,
    -0.01270630955696106,
    -0.03698710724711418,
    -0.0007799075683578849,
    0.026409192010760307,
    0.02498551644384861,
    0.010492493398487568,
    0.020016886293888092,
    0.009866075590252876,
    -0.0024594005662947893,
    0.009666760452091694,
    0.0011451694881543517,
    -0.011325343511998653,
    0.016343802213668823,
    -0.026039035990834236,
    0.009503037668764591,
    0.029925672337412834,
    -0.003164120251312852,
    0.0015019782586023211,
    0.03849620372056961,
    0.014343536458909512,
    0.008278676308691502,
    -0.0023739798925817013,
    -0.023020843043923378,
    0.005217772908508778,
    -0.040688663721084595,
    0.016785141080617905,
    -0.012521231546998024,
    -0.007296340074390173,
    0.004488138947635889,
    0.03562037646770477,
    0.005217772908508778,
    -0.0283169187605381,
    -0.0025448210071772337,
    -0.0019344199681654572,
    0.026323771104216576,
    0.0013373657129704952,
    -0.0018347626319155097,
    -0.010150810703635216,
    -0.010627741925418377,
    0.012791729532182217,
    0.005474034696817398,
    0.01783866249024868,
    0.014478785917162895,
    0.001049071317538619,
    0.04145744815468788,
    0.008641714230179787,
    0.006039945874363184,
    0.004221199546009302,
    -0.023362524807453156,
    0.010876885615289211,
    0.0129269789904356,
    0.01970367692410946,
    -0.011830748058855534,
    -0.0021586488001048565,
    -0.026466138660907745,
    0.04658268392086029,
    -0.03428212180733681,
    0.016215670853853226,
    -0.018863707780838013,
    0.011126028373837471,
    0.021967321634292603,
    0.016500405967235565,
    -0.004808465950191021,
    0.008983395993709564,
    0.004943715408444405,
    0.019974175840616226,
    0.01252834964543581,
    -0.03573426976799965,
    -0.010499611496925354,
    0.01688479818403721,
    0.006306885275989771,
    0.0023668615613132715,
    -0.006595179438591003,
    0.020913802087306976,
    -0.0030110750813037157,
    -0.006812290288507938,
    0.0264376662671566,
    0.016642773523926735,
    0.0060007949359714985,
    0.026523085311055183,
    -0.005442001856863499,
    0.006723310332745314,
    0.03211813420057297,
    0.04868972301483154,
    -0.018892182037234306,
    -0.018137633800506592,
    -0.03704405203461647,
    0.005950965918600559,
    -0.016799377277493477,
    -0.034481436014175415,
    -0.057516515254974365,
    -0.038012150675058365,
    -0.020415514707565308,
    0.015760093927383423,
    0.00283311540260911,
    -0.001095340820029378,
    0.02000265009701252,
    -0.005495389923453331,
    0.004829821176826954,
    -0.02780439518392086,
    -0.02853046916425228,
    0.011432118713855743,
    0.009246776811778545,
    0.014144222252070904,
    -0.018066449090838432,
    -0.03345638886094093,
    0.003213948803022504,
    -0.005118115805089474,
    -0.005790802650153637,
    -0.007915639318525791,
    0.0014565986348316073,
    -0.002377539174631238,
    -0.000469368213089183,
    -0.008271558210253716,
    0.015916699543595314,
    0.034623801708221436,
    -0.015859751030802727,
    -0.010784346610307693,
    -0.01403744611889124,
    0.005637757480144501,
    0.011296870186924934,
    -0.004783551674336195,
    0.0006691277958452702,
    0.06651414930820465,
    -0.014023209922015667,
    -0.012934097088873386,
    -0.007645140867680311,
    -0.012870032340288162,
    -0.008029533550143242,
    0.008712898008525372,
    0.020344331860542297,
    -0.027391528710722923,
    -0.010179284028708935,
    0.0060292682610452175,
    0.026750873774290085,
    0.022835765033960342,
    0.016372274607419968,
    0.03160560876131058,
    -0.026736637577414513,
    0.0027014254592359066,
    -0.047977883368730545,
    0.004388481844216585,
    -0.010086745023727417,
    0.04894598573446274,
    0.012699190527200699,
    0.02326286770403385,
    -0.0009280588710680604,
    -0.0237469170242548,
    0.005317430477589369,
    -0.03428212180733681,
    0.01625838130712509,
    0.0045237308368086815,
    0.014991309493780136,
    -0.00859900377690792,
    0.012884268537163734,
    0.006943980231881142,
    0.009033224545419216,
    0.014229643158614635,
    0.011111792176961899,
    0.014557087793946266,
    0.01443607546389103,
    -0.012143957428634167,
    -0.011375172063708305,
    -0.006121807266026735,
    -0.007050755899399519,
    0.016272617504000664,
    0.026323771104216576,
    0.045016638934612274,
    -0.0065489099361002445,
    0.020828381180763245,
    0.006449252832680941,
    -0.006965335458517075,
    -0.0052640424109995365,
    -0.02403165213763714,
    0.0054847123101353645,
    0.013546277768909931,
    0.01863592118024826,
    -0.03966361656785011,
    0.028003709390759468,
    0.006776698399335146,
    0.031093087047338486,
    0.0006095113349147141,
    0.011944642290472984,
    0.036417633295059204,
    0.010172165930271149,
    0.003087597666308284,
    0.017667820677161217,
    -0.013176122680306435,
    -0.023490656167268753,
    -0.024060126394033432,
    0.03191881999373436,
    0.0004117538337595761,
    -0.002829556353390217,
    0.014991309493780136,
    0.01444319449365139,
    -0.023590313270688057,
    -0.03251676261425018,
    0.02622411400079727,
    -0.014357773587107658,
    0.007887165993452072,
    -0.01798103004693985,
    -0.027049846947193146,
    -0.03940735384821892,
    -0.008179019205272198,
    -0.023148974403738976,
    0.0077519165351986885,
    -0.020401278510689735,
    0.004335093777626753,
    0.009695234708487988,
    -0.025241777300834656,
    0.014649626798927784,
    -0.04467495530843735,
    0.0017991707427427173,
    -0.012663599103689194,
    -0.02470078133046627,
    0.007196682970970869,
    0.00042376609053462744,
    0.023134736344218254,
    0.005121674854308367,
    0.018721340224146843,
    -0.010841293260455132,
    0.012684954330325127,
    -0.013019517995417118,
    -0.005548777524381876,
    -0.0262098778039217,
    -0.011887695640325546,
    -0.011126028373837471,
    0.015631964430212975,
    -0.010485374368727207,
    0.011040608398616314,
    0.012179548852145672,
    0.009517274796962738,
    0.048120252788066864,
    0.001721758279018104,
    0.006872796453535557,
    -0.010079626925289631,
    -0.0020874650217592716,
    0.027106793597340584,
    -0.004577118903398514,
    0.011239922605454922,
    0.004292383324354887,
    0.02195308543741703,
    -0.012727664783596992,
    -0.006168076768517494,
    -0.02629529871046543,
    0.0005285397637635469,
    -0.017226481810212135,
    -0.001332026906311512,
    0.0008301811176352203,
    -0.013774066232144833,
    0.00024513923563063145,
    0.0014859619550406933,
    -0.01252834964543581,
    0.01025758683681488,
    -0.030523614957928658,
    -0.0091684740036726,
    0.01025758683681488,
    -0.012450047768652439,
    0.010307415388524532,
    0.0019184035481885076,
    0.04507358744740486,
    0.0067909350618720055,
    -0.01415845938026905,
    -0.00032900265068747103,
    -0.02340523526072502,
    0.0037193538155406713,
    0.028117602691054344,
    -0.007887165993452072,
    0.03032430075109005,
    -0.0018454401288181543,
    -0.02629529871046543,
    -0.01927657425403595,
    0.02484314888715744,
    0.047180626541376114,
    0.006684159394353628,
    0.017283428460359573,
    -0.03843925520777702,
    -0.0121653126552701,
    0.004288824275135994,
    -0.007908521220088005,
    0.012692072428762913,
    -0.022707633674144745,
    -0.008157663978636265,
    0.01050672959536314,
    -0.005164385307580233,
    -0.009894548915326595,
    -0.0392649881541729,
    0.0017457827925682068,
    -0.022252056747674942,
    -0.033399440348148346,
    0.0028811644297093153,
    -0.008542057126760483,
    0.03564884886145592,
    0.004374244716018438,
    0.026836294680833817,
    -0.016585826873779297,
    -0.008798317983746529,
    -0.008962040767073631,
    0.0031908140517771244,
    -0.024501465260982513,
    -0.0006357603706419468,
    0.0189206562936306,
    0.03285844624042511,
    0.02340523526072502,
    0.0072892215102910995,
    0.032687604427337646,
    0.02266492322087288,
    0.009837602265179157,
    0.004641184117645025,
    -0.007851573638617992,
    0.003833248047158122,
    -0.011425000615417957,
    0.009673879481852055,
    -0.011788038536906242,
    0.019305048510432243,
    0.0007732340600341558,
    -0.030068039894104004,
    -1.9714578229468316e-05,
    0.019888754934072495,
    0.003972056321799755,
    0.006075537763535976,
    -0.04467495530843735,
    -0.01537570171058178,
    -0.004100187215954065,
    0.015546543523669243,
    0.02995414473116398,
    0.019547073170542717,
    -0.015845514833927155,
    -0.011788038536906242,
    0.033968910574913025,
    -0.012684954330325127,
    -0.005502508021891117,
    0.01949012652039528,
    0.00014870741870254278,
    -0.02881520427763462,
    0.004481020383536816,
    0.008179019205272198,
    0.031434766948223114,
    -0.011567368172109127,
    -0.008698660880327225,
    -0.02152598276734352,
    -0.019091496244072914,
    0.0022743225563317537,
    0.003943582996726036,
    0.014058801345527172,
    0.008613240905106068,
    0.022337477654218674,
    -0.0296124629676342,
    0.0293846745043993,
    0.0013524922542273998,
    -0.008129190653562546,
    0.028217259794473648,
    -0.03416822850704193,
    -0.02136937901377678,
    -0.011104674078524113,
    -0.03320012614130974,
    -0.025298723950982094,
    -0.00906169880181551,
    -0.01079858373850584,
    0.009154237806797028,
    0.02887215092778206,
    -0.021283958107233047,
    0.0010704264277592301,
    -0.009666760452091694,
    -0.003658847650513053,
    0.036930158734321594,
    0.012749020010232925,
    0.02605327218770981,
    0.03046666830778122,
    0.007744797971099615,
    -0.02138361521065235,
    -0.007460062857717276,
    -0.00554165942594409,
    -0.012478521093726158,
    0.008556293323636055,
    0.007716324646025896,
    -0.01702716574072838,
    -0.007509891409426928,
    0.010172165930271149,
    -0.014500141143798828,
    -0.02952704206109047,
    0.0022903389763087034,
    0.01963249407708645,
    0.023704206570982933,
    0.023775391280651093,
    -0.02014501765370369,
    -0.00025670661125332117,
    -0.012300561182200909,
    -0.001526892650872469,
    -0.018251527100801468,
    0.004452547058463097,
    -0.005616402253508568,
    -0.0045522041618824005,
    -0.011652789078652859,
    0.045956265181303024,
    0.02468654327094555,
    0.00565199414268136,
    0.024287914857268333,
    -0.0118734585121274,
    -0.013026636093854904,
    -0.028217259794473648,
    -0.024601122364401817,
    0.001357831060886383,
    0.02072872407734394,
    0.02087109163403511,
    0.004324416164308786,
    0.008392570540308952,
    0.042938072234392166,
    0.0207999087870121,
    -0.002309914445504546,
    0.006143162492662668,
    -0.01094095129519701,
    0.03994835168123245,
    -0.022351715713739395,
    -0.006410101894289255,
    -0.016201434656977654,
    -0.014592680148780346,
    -0.0027548132929950953,
    -0.016657009720802307,
    -0.02367573417723179,
    -0.02404589019715786,
    -0.016913272440433502,
    -0.001598966191522777,
    0.012250732630491257,
    -0.01828000135719776,
    -0.014279471710324287,
    0.006314003374427557,
    0.009075934998691082,
    -0.0055345408618450165,
    -0.001984248636290431,
    -0.0007287441985681653,
    0.024643832817673683,
    -0.0012848676415160298,
    -0.027889814227819443,
    -0.014115748926997185,
    -0.024957042187452316,
    0.02497127838432789,
    -0.0014530394691973925,
    -0.0030555648263543844,
    0.0021479714196175337,
    0.04453258961439133,
    -0.017084114253520966,
    0.021839192137122154,
    -0.0026587152387946844,
    -0.001408549607731402,
    -0.040033772587776184,
    0.005958084482699633,
    -0.010022680275142193,
    -0.0032210671342909336,
    0.01920539140701294,
    0.011752446182072163,
    -0.043792277574539185,
    -0.028430812060832977,
    0.0017520113615319133,
    0.014592680148780346,
    0.0031498833559453487,
    -0.019262338057160378,
    -0.001433463883586228,
    -0.009780654683709145,
    0.018094923347234726,
    -0.014343536458909512,
    -0.015916699543595314,
    0.02628106065094471,
    -0.003943582996726036,
    0.0012777493102476,
    -0.0014396924525499344,
    -0.009438972920179367,
    0.004630506504327059,
    0.032032713294029236,
    0.009716589003801346,
    0.007388879079371691,
    -0.03530716896057129,
    -0.021568693220615387,
    0.006954657845199108,
    -0.0036908802576363087,
    -0.009047461673617363,
    0.010072508826851845,
    -0.005491830408573151,
    -0.004093068651854992,
    -0.00675178412348032,
    0.03732878714799881,
    0.007467181421816349,
    -0.02136937901377678,
    0.0016505745006725192,
    0.027889814227819443,
    -0.0008097157697193325,
    0.002774388762190938,
    -0.0018952687969431281,
    0.0033189449459314346,
    -0.002592870034277439,
    0.010093864053487778,
    -0.01378830336034298,
    -0.02650884911417961,
    -0.045671530067920685,
    0.029356202110648155,
    0.03280149772763252,
    -0.01876405067741871,
    -0.01238598208874464,
    0.007652258966118097,
    -0.006164517719298601,
    -0.03254523500800133,
    -0.041343554854393005,
    0.03163408488035202,
    0.001987807685509324,
    0.009581340476870537,
    0.022693397477269173,
    0.010157928802073002,
    0.0078017450869083405,
    0.04874667152762413,
    -0.024928567931056023,
    -0.008791199885308743,
    0.005046932026743889,
    0.0140445651486516,
    0.012770374305546284,
    -0.017126822844147682,
    -0.0467819981276989,
    -0.008890856988728046,
    0.009261013008654118,
    0.011425000615417957,
    0.007203801069408655,
    0.032089658081531525,
    -0.00931084156036377,
    -0.0028758258558809757,
    -0.0012724105035886168,
    -0.0032050509471446276,
    -0.0024220289196819067,
    0.007264307234436274,
    0.0036392719484865665,
    -0.017383085563778877,
    -0.024529939517378807,
    -0.0102860601618886,
    0.002621343592181802,
    0.01509096659719944,
    -0.0016568030696362257,
    0.009011870250105858,
    -0.028986046090722084,
    0.02094227634370327,
    -0.008292913436889648,
    -0.01689903624355793,
    0.00032143938005901873,
    -0.01625838130712509,
    0.01025046780705452,
    0.010300296358764172,
    0.024316387251019478,
    0.02947009541094303,
    -0.01378830336034298,
    0.00566623080521822,
    -0.020201964303851128,
    0.01551806926727295,
    -0.03240286931395531,
    0.024715017527341843,
    0.035563427954912186,
    -0.015631964430212975,
    -0.02065754123032093,
    -0.01469233725219965,
    0.04587084427475929,
    -0.001582060125656426,
    0.02425944060087204,
    -0.015717383474111557,
    -0.016514642164111137,
    -0.03710100054740906,
    0.002893621800467372,
    0.009104408323764801,
    -0.024885859340429306,
    0.003320724470540881,
    0.004338652826845646,
    0.024529939517378807,
    -0.0013444841606542468,
    -0.022778818383812904,
    2.583193600003142e-05,
    -0.028843678534030914,
    0.0220954529941082,
    -0.0024060127325356007,
    -0.0006695726769976318,
    -0.02310626395046711,
    -0.009844720363616943,
    0.0013863046187907457,
    -0.03749962896108627,
    0.0007509891293011606,
    0.1993146538734436,
    0.021853428333997726,
    0.033968910574913025,
    0.028217259794473648,
    0.007175327744334936,
    0.006677040830254555,
    -0.002000264823436737,
    -0.0017760359914973378,
    -0.002854470629245043,
    0.03539258986711502,
    0.0067944941110908985,
    -0.01904878579080105,
    0.003299369476735592,
    0.0022351713851094246,
    -0.003986292984336615,
    0.005894019268453121,
    -0.04330822825431824,
    -0.0491168275475502,
    0.00660585705190897,
    -0.02340523526072502,
    -0.004609151277691126,
    -0.014991309493780136,
    -0.024900095537304878,
    -0.02757660672068596,
    0.01625838130712509,
    0.003443516558036208,
    0.018322711810469627,
    -0.016842087730765343,
    0.015133677050471306,
    -7.568840374005958e-05,
    -0.0028793849050998688,
    -0.013126294128596783,
    -0.005256923846900463,
    -0.018607446923851967,
    -0.0474938340485096,
    -0.020486699417233467,
    0.005050491075962782,
    -0.007253629621118307,
    0.03379807248711586,
    0.022081216797232628,
    0.017667820677161217,
    -0.03499395772814751,
    0.0028526911046355963,
    -0.043365173041820526,
    -0.011852103285491467,
    -0.00034546389360912144,
    -0.005182181019335985,
    0.015361465513706207,
    -0.002845572540536523,
    0.033314019441604614,
    -0.032659128308296204,
    0.0065453508868813515,
    0.007915639318525791,
    0.018308475613594055,
    0.011709735728800297,
    -8.436393545707688e-05,
    0.004110864829272032,
    -0.005605724640190601,
    0.0029843810480087996,
    0.009075934998691082,
    -0.02014501765370369,
    0.016984455287456512,
    0.0007100584334693849,
    0.0075597199611365795,
    -0.030580563470721245,
    -0.0052853976376354694,
    -0.04029003530740738,
    -0.024302151054143906,
    0.0023366084787994623,
    -0.0008453077170997858,
    -0.004580677952617407,
    -0.010414190590381622,
    -0.025583459064364433,
    0.014635390602052212,
    -0.016585826873779297,
    -0.025882432237267494,
    0.012805966660380363,
    0.01079858373850584,
    0.012556822970509529,
    0.011788038536906242,
    -0.011681262403726578,
    0.002808201126754284,
    -0.00012490533117670566,
    -0.0009885651525110006,
    -0.024003179743885994,
    -0.00701872305944562,
    0.03300081193447113,
    -0.008435280993580818,
    0.0018810320179909468,
    -0.021924613043665886,
    -0.00797258596867323,
    -0.008755608461797237,
    0.01494859904050827,
    -0.012542586773633957,
    0.004295942839235067,
    0.01640074886381626,
    -0.0053387852385640144,
    0.023576077073812485,
    0.0015304518165066838,
    -0.012450047768652439,
    -0.04029003530740738,
    0.04174218326807022,
    0.009702352806925774,
    0.023020843043923378,
    0.0017101909033954144,
    -0.009474564343690872,
    0.0026498171500861645,
    0.010613505728542805,
    -0.00754548329859972,
    -0.029356202110648155,
    -0.006449252832680941,
    -0.018820997327566147,
    -0.003046666970476508,
    -0.010698925703763962,
    0.02072872407734394,
    -0.021611403673887253,
    -0.005189299583435059,
    -0.00906169880181551,
    0.007495654746890068,
    0.027747446671128273,
    0.002770829712972045,
    -0.022479845210909843,
    0.004505935125052929,
    0.0030164136551320553,
    -0.005452679470181465,
    -0.03681626543402672,
    -0.04737994074821472,
    0.030637510120868683,
    -0.014493023045361042,
    0.005886900704354048,
    0.021554457023739815,
    -0.018664393573999405,
    -0.006712632719427347,
    -0.007844455540180206,
    0.0015010884962975979,
    -0.033171653747558594,
    -0.015076730400323868,
    -0.020088069140911102,
    0.013311371207237244,
    0.010819938033819199,
    -0.028046419844031334,
    0.019447416067123413,
    0.03516479954123497,
    0.0024594005662947893,
    0.01378830336034298,
    -0.009353552013635635,
    -0.01746850647032261,
    -0.008577648550271988,
    0.0042532323859632015,
    0.004142897669225931,
    -0.012898505665361881,
    0.026537323370575905,
    0.020529409870505333,
    -0.028259970247745514,
    0.011410764418542385,
    -0.03226049989461899,
    -0.013119175098836422,
    -0.005491830408573151,
    0.010029798373579979,
    -0.015062493272125721,
    -0.02085685543715954,
    0.02665121667087078,
    0.008748489432036877,
    -0.00012268083810340613,
    -0.02757660672068596,
    -0.02390352264046669,
    -0.18131938576698303,
    0.009196947328746319,
    -0.01870710402727127,
    -0.043137386441230774,
    -0.005701822694391012,
    0.013731355778872967,
    0.005392173305153847,
    -0.004868972115218639,
    -0.020201964303851128,
    -0.008848147466778755,
    0.026608506217598915,
    -0.016557352617383003,
    -0.006652126554399729,
    -0.018436605110764503,
    -0.0204439889639616,
    -0.013332726433873177,
    0.005673349369317293,
    -0.018023740500211716,
    0.03846772760152817,
    0.019518598914146423,
    0.02989719808101654,
    -0.014777758158743382,
    0.0017609093338251114,
    0.022294767200946808,
    0.021540218964219093,
    -0.028943335637450218,
    0.0033314020838588476,
    0.014137104153633118,
    0.009474564343690872,
    -0.0040823910385370255,
    -0.005943847820162773,
    0.0069617764092981815,
    0.032032713294029236,
    0.005883341655135155,
    0.002123056910932064,
    0.01682785153388977,
    0.015389938838779926,
    -0.010884003713726997,
    -0.009018988348543644,
    0.02028738521039486,
    0.03530716896057129,
    0.03069445677101612,
    0.027121029794216156,
    -0.006427897606045008,
    -0.02622411400079727,
    0.02670816332101822,
    0.0004666988388635218,
    -0.010157928802073002,
    0.0045272898860275745,
    -0.03379807248711586,
    0.03769894316792488,
    -0.0009787773014977574,
    0.015048256143927574,
    -0.005904696881771088,
    0.02860165387392044,
    0.022138163447380066,
    -0.01068468950688839,
    0.017354611307382584,
    0.016927508637309074,
    0.0015758314402773976,
    0.00945320911705494,
    -0.032886918634176254,
    0.016628537327051163,
    0.008171901106834412,
    -0.004320857115089893,
    -0.01884947158396244,
    -0.02952704206109047,
    0.009353552013635635,
    -0.012506994418799877,
    0.011681262403726578,
    0.014208287931978703,
    0.012791729532182217,
    -0.010855530388653278,
    0.0014067699667066336,
    0.012186667881906033,
    0.017810188233852386,
    -0.03886635601520538,
    0.020315857604146004,
    0.0013738474808633327,
    -0.02599632553756237,
    -0.02730610780417919,
    0.003213948803022504,
    -0.017155297100543976,
    0.015176387503743172,
    0.007374642416834831,
    -0.011923287063837051,
    -0.009616931900382042,
    0.0014316842425614595,
    0.002845572540536523,
    0.010179284028708935,
    -0.01768205687403679,
    -0.024643832817673683,
    -0.0077020879834890366,
    -0.019461652263998985,
    -0.011752446182072163,
    0.00862747710198164,
    0.0005734745063818991,
    0.033684175461530685,
    -0.00608265632763505,
    -0.02028738521039486,
    0.01906302385032177,
    0.010556558147072792,
    -0.026964426040649414,
    0.0002057656820397824,
    0.005342344753444195,
    0.027163740247488022,
    -0.036702368408441544,
    0.01170261763036251,
    0.013717119581997395,
    0.022850001230835915,
    0.00862747710198164,
    0.02642342820763588,
    0.011538894847035408,
    0.0029719239100813866,
    -0.018963364884257317,
    0.009951495565474033,
    -0.003349198028445244,
    -0.00808648020029068,
    0.03402585908770561,
    -0.01984604448080063,
    0.0430234931409359,
    -0.0027779480442404747,
    -0.013710000552237034,
    -0.001015259069390595,
    -0.006114688701927662,
    -0.004139338154345751,
    -0.1128120943903923,
    -0.03604748100042343,
    0.002601768122985959,
    0.00851358287036419,
    -0.025797011330723763,
    -0.004235436208546162,
    -0.016585826873779297,
    0.041628289967775345,
    -0.0036695252638310194,
    0.020742960274219513,
    8.475322101730853e-05,
    -0.014706574380397797,
    -0.012314798310399055,
    0.01162431575357914,
    -0.03647458180785179,
    0.00920406635850668,
    -0.03539258986711502,
    0.02087109163403511,
    -0.015176387503743172,
    0.005367259029299021,
    -0.014372010715305805,
    -0.0024291472509503365,
    -0.01184498518705368,
    0.02361878752708435,
    -0.0239747054874897,
    0.006719751283526421,
    -0.041201185435056686,
    0.008114953525364399,
    0.007082788739353418,
    -0.00740311574190855,
    -0.005303193349391222,
    -0.03468075022101402,
    -0.01062062382698059,
    0.0036143576726317406,
    0.0023668615613132715,
    -0.002511008642613888,
    -0.016158724203705788,
    0.0007812422700226307,
    0.032687604427337646,
    -0.027491185814142227,
    0.0052355690859258175,
    0.00687635550275445,
    0.009125763550400734,
    -0.006669922731816769,
    0.007723442744463682,
    0.005723177921026945,
    -0.007424470968544483,
    0.024003179743885994,
    0.02995414473116398,
    -0.009097290225327015,
    -0.021824954077601433,
    -0.011773801408708096,
    -0.006203668657690287,
    -0.00015805028670001775,
    0.01849355362355709,
    -0.01877828873693943,
    0.001104238792322576,
    0.006872796453535557,
    0.007207360118627548,
    0.00794411264359951,
    -0.019176917150616646,
    0.0008123851730488241,
    -0.009809128008782864,
    0.015774331986904144,
    0.01718377135694027,
    0.015589253045618534,
    0.00579436169937253,
    -0.007915639318525791,
    0.03661695122718811,
    -0.03465227782726288,
    -0.01610177755355835,
    -0.006993808783590794,
    -0.02361878752708435,
    0.0058335126377642155,
    -0.015219097957015038,
    0.015532306395471096,
    -0.00309649552218616,
    0.0009663201635703444,
    0.0038296887651085854,
    -0.0018142972839996219,
    0.01173820998519659,
    0.0018578973831608891,
    -0.007573957089334726,
    -0.02166835032403469,
    0.0038047744892537594,
    0.010990779846906662,
    0.007353287190198898,
    0.011104674078524113,
    0.03277302533388138,
    -0.04846193641424179,
    0.01675666868686676,
    -0.029213834553956985,
    0.05421358719468117,
    -0.006773138884454966,
    -0.030238879844546318,
    0.0010223774006590247,
    0.015062493272125721,
    -0.02246560901403427,
    -0.008093598298728466,
    0.000702050281688571,
    -0.05466916412115097,
    -0.009360670112073421,
    -0.06457795202732086,
    0.009467446245253086,
    0.01466386392712593,
    -0.01497707236558199,
    -0.016628537327051163,
    -0.03749962896108627,
    -0.022337477654218674,
    -0.01631532795727253,
    -0.006976013071835041,
    0.009175592102110386,
    -0.020273147150874138,
    -0.0007807973888702691,
    -0.0037157947663217783,
    -0.00797970499843359,
    0.000926279288250953,
    -0.020742960274219513,
    0.03468075022101402,
    -0.00852070190012455,
    0.027548132464289665,
    0.019945701584219933,
    0.000358365970896557,
    -0.004103746265172958,
    0.025013988837599754,
    0.01042842771857977,
    -0.032374393194913864,
    -0.029783304780721664,
    -0.005602165590971708,
    0.014891652390360832,
    -0.011168738827109337,
    -0.01890641823410988,
    0.01654311642050743,
    -0.025241777300834656,
    -0.003007515799254179,
    0.020486699417233467,
    0.018650157377123833,
    0.013781184330582619,
    0.0002555943501647562,
    -0.012734782882034779,
    0.02253679372370243,
    0.004922360181808472,
    -0.009125763550400734,
    -0.03587663918733597,
    0.01184498518705368,
    -0.004765755962580442,
    -0.029142649844288826,
    0.009673879481852055,
    -0.02677934803068638,
    0.013204596005380154,
    0.017952555790543556,
    0.0064634894952178,
    0.03257371112704277,
    0.007652258966118097,
    -0.021426325663924217,
    -0.035990532487630844,
    0.018294237554073334,
    0.004897445905953646,
    -0.012378863990306854,
    0.007324813399463892,
    -0.004434750881046057,
    -0.0014832925517112017,
    0.042938072234392166,
    -0.009773536585271358,
    0.02094227634370327,
    0.00037393742240965366,
    0.008897976018488407,
    -0.019262338057160378,
    -0.03089377097785473,
    -0.011973116546869278,
    -0.0015019782586023211,
    -0.0026444783434271812,
    -0.002190681640058756,
    -0.014934362843632698,
    0.02512788400053978,
    0.033399440348148346,
    0.031178506091237068,
    -0.00820037443190813,
    -0.004566441290080547,
    -0.008634595200419426,
    -0.024743489921092987,
    0.04171371087431908,
    0.0170414038002491,
    -0.0322035551071167,
    0.0014966395683586597,
    0.016927508637309074,
    0.0352502204477787,
    -0.016272617504000664,
    -0.024230968207120895,
    -0.004107305780053139,
    0.01042842771857977,
    0.023077789694070816,
    -0.012087009847164154,
    0.007424470968544483,
    -0.011944642290472984,
    -0.011531776748597622,
    0.025099409744143486,
    -0.009880311787128448,
    0.007993941195309162,
    -0.01469233725219965,
    0.02853046916425228,
    -0.003452414646744728,
    0.01094095129519701,
    -0.015916699543595314,
    -0.0022049183025956154,
    -0.031520187854766846,
    -0.01675666868686676,
    -0.026024799793958664,
    -0.015247571282088757,
    -0.0359620600938797,
    -0.005217772908508778,
    0.04103034734725952,
    0.03257371112704277,
    -0.0036908802576363087,
    -0.004776433575898409,
    0.017496978864073753,
    -0.015389938838779926,
    0.01426523458212614,
    0.016628537327051163,
    0.005064727738499641,
    -0.000162276832270436,
    0.038012150675058365,
    0.004587796051055193,
    -5.608505307463929e-05,
    0.04498816654086113,
    -0.007214478682726622,
    -0.00270676426589489,
    0.025241777300834656,
    0.021497508510947227,
    -0.02071448788046837,
    0.00473016407340765,
    -0.01393067091703415,
    -0.0026444783434271812,
    -0.0226791612803936,
    -0.031007666140794754,
    -0.009645405225455761,
    -0.010976542718708515,
    -0.01936199516057968,
    -0.004698131233453751,
    -0.010585031472146511,
    -0.014215406030416489,
    0.05800056457519531,
    -0.006474167108535767,
    -0.022992368787527084,
    0.005182181019335985,
    0.001975350547581911,
    0.02282152883708477,
    0.0005530092166736722,
    -0.009339314885437489,
    0.01855050027370453,
    -0.018820997327566147,
    0.013382555916905403,
    -0.009289486333727837,
    -0.01364593580365181,
    -0.038296885788440704,
    -0.031434766948223114,
    0.04023308679461479,
    -0.019006075337529182,
    -0.0036552883684635162,
    0.0038510439917445183,
    0.01454996969550848,
    0.01674243062734604,
    0.004089509602636099,
    -0.005050491075962782,
    -0.002528804587200284,
    -0.01826576516032219,
    -0.016286855563521385,
    0.042995017021894455,
    0.01509096659719944,
    0.002614225260913372,
    -0.044162433594465256,
    0.014172695577144623,
    -0.014777758158743382,
    -0.014137104153633118,
    -0.01805221289396286,
    -0.015418412163853645,
    -0.002094583585858345,
    -0.011631433852016926,
    0.004637625068426132,
    -0.029697883874177933,
    0.024159783497452736,
    -0.00297014438547194,
    0.0028811644297093153,
    -0.023348288610577583,
    -0.024230968207120895,
    0.007324813399463892,
    -0.01941894181072712,
    0.009866075590252876,
    -0.015617727302014828,
    -0.049999505281448364
  ]
}
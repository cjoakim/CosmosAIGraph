{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "lightning plugins\n#################\n\n.. image:: https://img.shields.io/github/actions/workflow/status/pennylaneai/pennylane-lightning/tests_linux.yml?branch=master&label=test%20%28linux%29&style=flat-square\n    :alt: linux x86_64 tests (branch)\n    :target: https://github.com/pennylaneai/pennylane-lightning/actions/workflows/tests_linux.yml\n\n.. image:: https://img.shields.io/github/actions/workflow/status/pennylaneai/pennylane-lightning/tests_windows.yml?branch=master&label=test%20%28windows%29&style=flat-square\n    :alt: windows tests (branch)\n    :target: https://github.com/pennylaneai/pennylane-lightning/actions/workflows/tests_windows.yml\n\n.. image:: https://img.shields.io/github/actions/workflow/status/pennylaneai/pennylane-lightning/.github/workflows/wheel_linux_x86_64.yml?branch=master&logo=github&style=flat-square\n    :alt: linux x86_64 wheel builds (branch)\n    :target: https://github.com/pennylaneai/pennylane-lightning/actions/workflows/wheel_linux_x86_64.yml?query=branch%3amaster++\n\n.. image:: https://img.shields.io/codecov/c/github/pennylaneai/pennylane-lightning/master.svg?logo=codecov&style=flat-square\n    :alt: codecov coverage\n    :target: https://codecov.io/gh/pennylaneai/pennylane-lightning\n\n.. image:: https://img.shields.io/codefactor/grade/github/pennylaneai/pennylane-lightning/master?logo=codefactor&style=flat-square\n    :alt: codefactor grade\n    :target: https://www.codefactor.io/repository/github/pennylaneai/pennylane-lightning\n\n.. image:: https://readthedocs.com/projects/xanaduai-pennylane-lightning/badge/?version=latest&style=flat-square\n    :alt: read the docs\n    :target: https://docs.pennylane.ai/projects/lightning\n\n.. image:: https://img.shields.io/pypi/v/pennylane-lightning.svg?style=flat-square\n    :alt: pypi\n    :target: https://pypi.org/project/pennylane-lightning\n\n.. image:: https://img.shields.io/pypi/pyversions/pennylane-lightning.svg?style=flat-square\n    :alt: pypi - python version\n    :target: https://pypi.org/project/pennylane-lightning\n\n.. header-start-inclusion-marker-do-not-remove\n\nthe lightning plugin ecosystem provides fast state-vector simulators written in c++.\n\n`pennylane <https://docs.pennylane.ai>`_ is a cross-platform python library for quantum machine\nlearning, automatic differentiation, and optimization of hybrid quantum-classical computations.\npennylane supports python 3.9 and above.\n\nfeatures\n********\n\npennylane-lightning high performance simulators include the following backends:\n\n* ``lightning.qubit``: is a fast state-vector simulator written in c++.\n* ``lightning.gpu``: is a state-vector simulator based on the `nvidia cuquantum sdk <https://developer.nvidia.com/cuquantum-sdk>`_. it notably implements a distributed state-vector simulator based on mpi.\n* ``lightning.kokkos``: is a state-vector simulator written with `kokkos <https://kokkos.github.io/kokkos-core-wiki/index.html>`_. it can exploit the inherent parallelism of modern processing units supporting the `openmp <https://www.openmp.org/>`_, `cuda <https://developer.nvidia.com/cuda-toolkit>`_ or `hip <https://docs.amd.com/projects/hip/en/docs-5.3.0/index.html>`_ programming models.\n\n.. header-end-inclusion-marker-do-not-remove\n\nthe following table summarizes the supported platforms and the primary installation mode:\n\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n|           | l-qubit | l-gpu  | l-gpu (mpi) | l-kokkos (omp) | l-kokkos (cuda) | l-kokkos (hip) |\n+===========+=========+========+=============+================+=================+================+\n| linux x86 | pip     | pip    | source      | pip            | source          | source         |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n| linux arm | pip     | source |             | pip            | source          | source         |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n| linux ppc | pip     | source |             | pip            | source          | source         |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n| macos x86 | pip     |        |             | pip            |                 |                |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n| macos arm | pip     |        |             | pip            |                 |                |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n| windows   | pip     |        |             |                |                 |                |\n+-----------+---------+--------+-------------+----------------+-----------------+----------------+\n\n\n.. installation_lqubit-start-inclusion-marker-do-not-remove\n\nlightning-qubit installation\n****************************\n\npypi wheels (pip)\n=================\n\nlightning plugins can be installed using ``pip`` as follows\n\n.. code-block:: console\n\n    $ pip install pennylane-lightning\n\nthe above command will install the lightning-qubit plugin (the default since it is most broadly supported).\nin order to install the lightning-gpu and lightning-kokkos (openmp) backends, you can respectively use the following commands:\n\n.. code-block:: console\n\n    $ pip install pennylane-lightning[gpu]\n    $ pip install pennylane-lightning[kokkos]\n\n\ninstall from source\n===================\n\nto build lightning plugins from source you can run\n\n.. code-block:: console\n\n    $ pl_backend=${pl_backend} pip install pybind11 pennylane-lightning --no-binary :all:\n\nwhere ``${pl_backend}`` can be ``lightning_qubit`` (default), ``lightning_gpu`` or ``lightning_kokkos``.\nthe `pybind11 <https://pybind11.readthedocs.io/en/stable/>`_ library is required to bind the c++ functionality to python.\n\na c++ compiler such as ``g++``, ``clang++``, or ``msvc`` is required.\non debian-based systems, this can be installed via ``apt``:\n\n.. code-block:: console\n\n    $ sudo apt -y update &&\n    $ sudo apt install g++ libomp-dev\n\nwhere ``libomp-dev`` is included to also install openmp.\non macos, we recommend using the latest version of ``clang++`` and ``libomp``:\n\n.. code-block:: console\n\n    $ brew install llvm libomp\n\nthe lightning-gpu backend has several dependencies (e.g. ``cuda``, ``custatevec-cu11``, etc.), and hence we recommend referring to lightning-gpu installation section.\nsimilarly, for lightning-kokkos it is recommended to configure and install kokkos independently as prescribed in the lightning-kokkos installation section.\n\ndevelopment installation\n========================\n\nfor development and testing, you can install by cloning the repository:\n\n.. code-block:: console\n\n    $ git clone https://github.com/pennylaneai/pennylane-lightning.git\n    $ cd pennylane-lightning\n    $ pip install -r requirements.txt\n    $ pl_backend=${pl_backend} pip install -e . -vv\n\nnote that subsequent calls to ``pip install -e .`` will use cached binaries stored in the\n``build`` folder. run ``make clean`` if you would like to recompile from scratch.\n\nyou can also pass ``cmake`` options with ``cmake_args`` as follows:\n\n.. code-block:: console\n\n    $ cmake_args=\"-denable_openmp=off -denable_blas=off\" pip install -e . -vv\n\nor with ``build_ext`` and the ``--define`` flag as follows:\n\n.. code-block:: console\n\n    $ python3 setup.py build_ext -i --define=\"enable_openmp=off;enable_blas=off\"\n    $ python3 setup.py develop\n\nwhere ``-d`` must not be included before ``;``-separated options.\n\ncompile msvc (windows)\n======================\n\nlightning-qubit can be compiled on windows using the\n`microsoft visual c++ <https://visualstudio.microsoft.com/vs/features/cplusplus/>`_ compiler.\nyou need `cmake <https://cmake.org/download/>`_ and appropriate python environment\n(e.g. using `anaconda <https://www.anaconda.com/>`_).\n\nwe recommend using ``[x64 (or x86)] native tools command prompt for vs [version]`` to compile the library.\nbe sure that ``cmake`` and ``python`` can be called within the prompt.\n\n.. code-block:: console\n\n    $ cmake --version\n    $ python --version\n\nthen a common command will work.\n\n.. code-block:: console\n\n    $ pip install -r requirements.txt\n    $ pip install -e .\n\nnote that openmp and blas are disabled on this platform.\n\ncmake support\n=============\n\none can also build the plugin using cmake:\n\n.. code-block:: console\n\n    $ cmake -s. -b build\n    $ cmake --build build\n\nsupported options are\n\n- ``-denable_warnings:bool=on``\n- ``-denable_native:bool=on`` (for ``-march=native``)\n- ``-denable_blas:bool=on``\n- ``-denable_openmp:bool=on``\n- ``-denable_clang_tidy:bool=on``\n\ntesting\n=======\n\nto test that a plugin is working correctly, test the python code with:\n\n.. code-block:: console\n\n    $ make test-python device=${pl_device}\n\nwhere ``${pl_device}`` can be ``lightning.qubit`` (default), ``lightning.gpu`` or ``lightning.kokkos``.\nthese differ from ``${pl_backend}`` by replacing the underscore by a dot.\nthe c++ code can be tested with\n\n.. code-block:: console\n\n    $ pl_backend=${pl_backend} make test-cpp\n\n.. installation_lqubit-end-inclusion-marker-do-not-remove\n\n.. installation_lgpu-start-inclusion-marker-do-not-remove\n\nlightning-gpu installation\n**************************\n\nlightning-gpu can be installed using ``pip``:\n\n.. code-block:: console\n\n    pip install pennylane-lightning[gpu]\n\nlightning-gpu requires the `cuquantum sdk <https://developer.nvidia.com/cuquantum-sdk>`_ (only the `custatevec <https://docs.nvidia.com/cuda/cuquantum/latest/custatevec/index.html>`_ library is required).\nthe sdk may be installed within the python environment ``site-packages`` directory using ``pip`` or ``conda`` or the sdk library path appended to the ``ld_library_path`` environment variable.\nplease see the `cuquantum sdk`_ install guide for more information.\n\ninstall lightning-gpu from source\n=================================\n\nto install lightning-gpu from the package sources using the direct sdk path, lightning-qubit should be install before lightning-gpu:\n\n.. code-block:: console\n\n    git clone https://github.com/pennylaneai/pennylane-lightning.git\n    cd pennylane-lightning\n    pip install -r requirements.txt\n    pl_backend=\"lightning_qubit\" pip install -e . -vv\n\nthen the `custatevec`_ library can be installed and set a ``cuquantum_sdk`` environment variable.\n\n.. code-block:: console\n\n    python -m pip install wheel custatevec-cu11\n    export cuquantum_sdk=$(python -c \"import site; print( f'{site.getsitepackages()[0]}/cuquantum/lib')\")\n\nthe lightning-gpu can then be installed with ``pip``:\n\n.. code-block:: console\n\n    pl_backend=\"lightning_gpu\" python -m pip install -e .\n\nto simplify the build, we recommend using the containerized build process described in docker support section.\n\ninstall lightning-gpu with mpi\n==============================\n\nbuilding lightning-gpu with mpi also requires the ``nvidia cuquantum sdk`` (currently supported version: `custatevec-cu11 <https://pypi.org/project/cuquantum-cu11/>`_), ``mpi4py`` and ``cuda-aware mpi`` (message passing interface).\n``cuda-aware mpi`` allows data exchange between gpu memory spaces of different nodes without the need for cpu-mediated transfers.\nboth the ``mpich`` and ``openmpi`` libraries are supported, provided they are compiled with cuda support.\nthe path to ``libmpi.so`` should be found in ``ld_library_path``.\nit is recommended to install the ``nvidia cuquantum sdk`` and ``mpi4py`` python package within ``pip`` or ``conda`` inside a virtual environment.\nplease consult the `cuquantum sdk`_ , `mpi4py <https://mpi4py.readthedocs.io/en/stable/install.html>`_,\n`mpich <https://www.mpich.org/static/downloads/4.1.1/mpich-4.1.1-readme.txt>`_, or `openmpi <https://www.open-mpi.org/faq/?category=buildcuda>`_ install guide for more information.\n\nbefore installing lightning-gpu with mpi support using the direct sdk path, please ensure lightning-qubit, ``cuda-aware mpi`` and ``custatevec`` are installed and the environment variable ``cuquantum_sdk`` is set properly.\nthen lightning-gpu with mpi support can then be installed with ``pip``:\n\n.. code-block:: console\n\n    cmake_args=\"-denable_mpi=on\"  pl_backend=\"lightning_gpu\" python -m pip install -e .\n\n\ntest l-gpu with mpi\n===================\n\nyou may test the python layer of the mpi enabled plugin as follows:\n\n.. code-block:: console\n\n    mpirun -np 2 python -m pytest mpitests --tb=short\n\nthe c++ code is tested with\n\n.. code-block:: console\n\n    rm -rf ./buildtests\n    cmake . -bbuildtests -dbuild_tests=1 -dbuild_tests=1 -denable_mpi=on -dcuquantum_sdk=<path to sdk>\n    cmake --build ./buildtests --verbose\n    cd ./buildtests\n    for file in *runner_mpi ; do mpirun -np 2 ./buildtests/$file ; done;\n\n.. installation_lgpu-end-inclusion-marker-do-not-remove\n\n.. installation_lkokkos-start-inclusion-marker-do-not-remove\n\nlightning-kokkos installation\n*****************************\n\non linux systems, ``lightning.kokkos`` with the openmp backend can be installed by providing the optional ``[kokkos]`` tag:\n\n.. code-block:: console\n\n    $ pip install pennylane-lightning[kokkos]\n\ninstall lightning-kokkos from source\n====================================\n\nas kokkos enables support for many different hpc-targeted hardware platforms, ``lightning.kokkos`` can be built to support any of these platforms when building from source.\n\nwe suggest first installing kokkos with the wanted configuration following the instructions found in the `kokkos documentation <https://kokkos.github.io/kokkos-core-wiki/building.html>`_.\nfor example, the following will build kokkos for nvidia a100 cards\n\n.. code-block:: console\n\n    cmake -s . -b build -g ninja \\\n        -dcmake_build_type=relwithdebug \\\n        -dcmake_install_prefix=/opt/kokkos/4.1.00/ampere80 \\\n        -dcmake_cxx_standard=20 \\\n        -dbuild_shared_libs:bool=on \\\n        -dbuild_testing:bool=off \\\n        -dkokkos_enable_serial:bool=on \\\n        -dkokkos_enable_cuda:bool=on \\\n        -dkokkos_arch_ampere80:bool=on \\\n        -dkokkos_enable_examples:bool=off \\\n        -dkokkos_enable_tests:bool=off \\\n        -dkokkos_enable_libdl:bool=off\n    cmake --build build && cmake --install build\n    echo export cmake_prefix_path=/opt/kokkos/4.1.00/ampere80:\\$cmake_prefix_path\n\nnext, append the install location to ``cmake_prefix_path``.\nnote that the c++20 standard is required (``-dcmake_cxx_standard=20`` option), and hence cuda v12 is required for the cuda backend.\nif an installation is not found, our builder will clone and install it during the build process.\n\nthe simplest way to install lightning-kokkos (openmp backend) through ``pip``.\n\n.. code-block:: console\n\n   cmake_args=\"-dkokkos_enable_openmp=on\" pl_backend=\"lightning_kokkos\" python -m pip install .\n\nto build the plugin directly with cmake as above:\n\n.. code-block:: console\n\n   cmake -b build -dkokkos_enable_openmp=on -dpl_backend=lightning_kokkos -g ninja\n   cmake --build build\n\n\nthe supported backend options are ``serial``, ``openmp``, ``threads``, ``hip`` and ``cuda`` and the corresponding build options are ``-dkokkos_enable_xxx=on``, where ``xxx`` needs be replaced by the backend name, for instance ``openmp``.\none can activate simultaneously one serial, one parallel cpu host (e.g. ``openmp``, ``threads``) and one parallel gpu device backend (e.g. ``hip``, ``cuda``), but not two of any category at the same time.\nfor ``hip`` and ``cuda``, the appropriate software stacks are required to enable compilation and subsequent use.\nsimilarly, the cmake option ``-dkokkos_arch_{...}=on`` must also be specified to target a given architecture.\na list of the architectures is found on the `kokkos wiki <https://github.com/kokkos/kokkos/wiki/macros#architectures>`_.\nnote that ``threads`` backend is not recommended since `kokkos does not guarantee its safety <https://github.com/kokkos/kokkos-core-wiki/blob/17f08a6483937c26e14ec3c93a2aa40e4ce081ce/docs/source/programmingguide/initialization.md?plain=1#l67>`_.\n\n.. installation_lkokkos-end-inclusion-marker-do-not-remove\n\nplease refer to the `plugin documentation <https://docs.pennylane.ai/projects/lightning/>`_ as\nwell as to the `pennylane documentation <https://docs.pennylane.ai/>`_ for further reference.\n\n.. docker-start-inclusion-marker-do-not-remove\n\ndocker support\n**************\n\ndocker images for the various backends are found on the\n`pennylane docker hub <https://hub.docker.com/repository/docker/pennylaneai/pennylane/general>`_ page, where there is also a detailed description about pennylane docker support.\nbriefly, one can build the docker lightning images using:\n\n.. code-block:: console\n\n    $ git clone https://github.com/pennylaneai/pennylane-lightning.git\n    $ cd pennylane-lightning\n    $ docker build -f docker/dockerfile --target ${target} .\n\nwhere ``${target}`` is one of the following\n\n* ``wheel-lightning-qubit``\n* ``wheel-lightning-gpu``\n* ``wheel-lightning-kokkos-openmp``\n* ``wheel-lightning-kokkos-cuda``\n* ``wheel-lightning-kokkos-rocm``\n\n.. docker-end-inclusion-marker-do-not-remove\n\ncontributing\n************\n\nwe welcome contributions - simply fork the repository of this plugin, and then make a\n`pull request <https://help.github.com/articles/about-pull-requests/>`_ containing your contribution.\nall contributors to this plugin will be listed as authors on the releases.\n\nwe also encourage bug reports, suggestions for new features and enhancements, and even links to cool projects\nor applications built on pennylane.\n\nblack & pylint\n==============\n\nif you contribute to the python code, please mind the following.\nthe python code is formatted with the pep 8 compliant opinionated formatter `black <https://github.com/psf/black>`_ (`black==23.7.0`).\nwe set a line width of a 100 characters.\nthe python code is statically analyzed with `pylint <https://pylint.readthedocs.io/en/stable/>`_.\nwe set up a pre-commit hook (see `git hooks <https://git-scm.com/docs/githooks>`_) to run both of these on `git commit`.\nplease make your best effort to comply with `black` and `pylint` before using disabling pragmas (e.g. `# pylint: disable=missing-function-docstring`).\n\nauthors\n*******\n\nlightning is the work of `many contributors <https://github.com/pennylaneai/pennylane-lightning/graphs/contributors>`_.\n\nif you are doing research using pennylane and lightning, please cite `our paper <https://arxiv.org/abs/1811.04968>`_:\n\n    ville bergholm, josh izaac, maria schuld, christian gogolin, m. sohaib alam, shahnawaz ahmed,\n    juan miguel arrazola, carsten blank, alain delgado, soran jahangiri, keri mckiernan, johannes jakob meyer,\n    zeyue niu, antal sz\u00e1va, and nathan killoran.\n    *pennylane: automatic differentiation of hybrid quantum-classical computations.* 2018. arxiv:1811.04968\n\n.. support-start-inclusion-marker-do-not-remove\n\nsupport\n*******\n\n- **source code:** https://github.com/pennylaneai/pennylane-lightning\n- **issue tracker:** https://github.com/pennylaneai/pennylane-lightning/issues\n- **pennylane forum:** https://discuss.pennylane.ai\n\nif you are having issues, please let us know by posting the issue on our github issue tracker, or\nby asking a question in the forum.\n\n.. support-end-inclusion-marker-do-not-remove\n.. license-start-inclusion-marker-do-not-remove\n\nlicense\n*******\n\nthe lightning plugins are **free** and **open source**, released under\nthe `apache license, version 2.0 <https://www.apache.org/licenses/license-2.0>`_.\nthe lightning-gpu plugin makes use of the nvidia cuquantum sdk headers to\nenable the device bindings to pennylane, which are held to their own respective license.\n\n.. license-end-inclusion-marker-do-not-remove\n.. acknowledgements-start-inclusion-marker-do-not-remove\n\nacknowledgements\n****************\n\npennylane lightning makes use of the following libraries and tools, which are under their own respective licenses:\n\n- **pybind11:** https://github.com/pybind/pybind11\n- **kokkos core:** https://github.com/kokkos/kokkos\n- **nvidia cuquantum:** https://developer.nvidia.com/cuquantum-sdk\n\n.. acknowledgements-end-inclusion-marker-do-not-remove\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "pennylane-lightning-kokkos",
  "package_url": "https://pypi.org/project/PennyLane-Lightning-Kokkos/",
  "project_url": "https://pypi.org/project/PennyLane-Lightning-Kokkos/",
  "project_urls": {
    "Homepage": "https://github.com/XanaduAI/pennylane-lightning"
  },
  "release_url": "https://pypi.org/project/PennyLane-Lightning-Kokkos/0.33.1/",
  "requires_dist": [
    "pennylane (>=0.32)",
    "pennylane-lightning (==0.33.1)",
    "pennylane-lightning-gpu ; extra == 'gpu'",
    "pennylane-lightning-kokkos ; extra == 'kokkos'"
  ],
  "requires_python": "",
  "summary": "pennylane-lightning plugin",
  "version": "0.33.1",
  "releases": [],
  "developers": [
    "software@xanadu.ai",
    "xanadu_inc"
  ],
  "kwds": "tests_windows buildtests tests_linux lightning_qubit tests",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pennylane_lightning_kokkos",
  "homepage": "https://github.com/xanaduai/pennylane-lightning",
  "release_count": 7,
  "dependency_ids": [
    "pypi_pennylane",
    "pypi_pennylane_lightning",
    "pypi_pennylane_lightning_gpu",
    "pypi_pennylane_lightning_kokkos"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries"
  ],
  "description": "immutables\n==========\n\n.. image:: https://github.com/magicstack/immutables/workflows/tests/badge.svg?branch=master\n    :target: https://github.com/magicstack/immutables/actions?query=workflow%3atests+branch%3amaster+event%3apush\n\n.. image:: https://img.shields.io/pypi/v/immutables.svg\n    :target: https://pypi.python.org/pypi/immutables\n\nan immutable mapping type for python.\n\nthe underlying datastructure is a hash array mapped trie (hamt)\nused in clojure, scala, haskell, and other functional languages.\nthis implementation is used in cpython 3.7 in the ``contextvars``\nmodule (see `pep 550 <https://www.python.org/dev/peps/pep-0550/>`_ and\n`pep 567 <https://www.python.org/dev/peps/pep-0567/>`_ for more details).\n\nimmutable mappings based on hamt have o(log n) performance for both\n``set()`` and ``get()`` operations, which is essentially o(1) for\nrelatively small mappings.\n\nbelow is a visualization of a simple get/set benchmark comparing\nhamt to an immutable mapping implemented with a python dict\ncopy-on-write approach (the benchmark code is available\n`here <https://gist.github.com/1st1/292e3f0bbe43bd65ff3256f80aa2637d>`_):\n\n.. image:: bench.png\n\n\ninstallation\n------------\n\n``immutables`` requires python 3.6+ and is available on pypi::\n\n    $ pip install immutables\n\n\napi\n---\n\n``immutables.map`` is an unordered immutable mapping.  ``map`` objects\nare hashable, comparable, and pickleable.\n\nthe ``map`` object implements the ``collections.abc.mapping`` abc\nso working with it is very similar to working with python dicts:\n\n.. code-block:: python\n\n    import immutables\n\n    map = immutables.map(a=1, b=2)\n\n    print(map['a'])\n    # will print '1'\n\n    print(map.get('z', 100))\n    # will print '100'\n\n    print('z' in map)\n    # will print 'false'\n\nsince maps are immutable, there is a special api for mutations that\nallow apply changes to the map object and create new (derived) maps:\n\n.. code-block:: python\n\n    map2 = map.set('a', 10)\n    print(map, map2)\n    # will print:\n    #   <immutables.map({'a': 1, 'b': 2})>\n    #   <immutables.map({'a': 10, 'b': 2})>\n\n    map3 = map2.delete('b')\n    print(map, map2, map3)\n    # will print:\n    #   <immutables.map({'a': 1, 'b': 2})>\n    #   <immutables.map({'a': 10, 'b': 2})>\n    #   <immutables.map({'a': 10})>\n\nmaps also implement apis for bulk updates: ``mapmutation`` objects:\n\n.. code-block:: python\n\n    map_mutation = map.mutate()\n    map_mutation['a'] = 100\n    del map_mutation['b']\n    map_mutation.set('y', 'y')\n\n    map2 = map_mutation.finish()\n\n    print(map, map2)\n    # will print:\n    #   <immutables.map({'a': 1, 'b': 2})>\n    #   <immutables.map({'a': 100, 'y': 'y'})>\n\n``mapmutation`` objects are context managers.  here's the above example\nrewritten in a more idiomatic way:\n\n.. code-block:: python\n\n    with map.mutate() as mm:\n        mm['a'] = 100\n        del mm['b']\n        mm.set('y', 'y')\n        map2 = mm.finish()\n\n    print(map, map2)\n    # will print:\n    #   <immutables.map({'a': 1, 'b': 2})>\n    #   <immutables.map({'a': 100, 'y': 'y'})>\n\n\nfurther development\n-------------------\n\n* an immutable version of python ``set`` type with efficient\n  ``add()`` and ``discard()`` operations.\n\n\nlicense\n-------\n\napache 2.0\n",
  "docs_url": null,
  "keywords": "collections,immutable,hamt",
  "license": "apache license, version 2.0",
  "name": "immutables",
  "package_url": "https://pypi.org/project/immutables/",
  "project_url": "https://pypi.org/project/immutables/",
  "project_urls": {
    "github": "https://github.com/MagicStack/immutables"
  },
  "release_url": "https://pypi.org/project/immutables/0.20/",
  "requires_dist": [
    "typing-extensions >=3.7.4.3 ; python_version < \"3.8\"",
    "flake8 ~=5.0 ; extra == 'test'",
    "pycodestyle ~=2.9 ; extra == 'test'",
    "mypy ~=1.4 ; extra == 'test'",
    "pytest ~=7.4 ; extra == 'test'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "immutable collections",
  "version": "0.20",
  "releases": [],
  "developers": [
    "hello@magic.io"
  ],
  "kwds": "immutables immutable mapmutation hashable clojure",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_immutables",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": [
    "pypi_flake8",
    "pypi_mypy",
    "pypi_pycodestyle",
    "pypi_pytest",
    "pypi_typing_extensions"
  ]
}
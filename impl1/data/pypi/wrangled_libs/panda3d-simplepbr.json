{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3"
  ],
  "description": "![build status](https://github.com/moguri/panda3d-simplepbr/workflows/pipeline/badge.svg)\n[![](https://img.shields.io/github/license/moguri/panda3d-simplepbr.svg)](https://choosealicense.com/licenses/bsd-3-clause/)\n\n# panda3d-simplepbr\n\na straight-forward, easy-to-use pbr render pipeline for [panda3d](https://www.panda3d.org/).\nthis project aims to be a drop-in replacement for panda3d's auto-shader.\nthe pbr shader is heavily inspired by the [khronos gltf sample viewer](https://github.com/khronosgroup/gltf-sample-viewer).\n*note:* this project does not make an attempt to match a reference renderer.\n\n## features\n* supports running on a wide range of hardware with an easy opengl 2.1+ requirement\n* forward rendered metal-rough pbr\n* all panda3d light types (point, directional, spot, and ambient)\n* filmic tonemapping \n* normal maps\n* emission maps\n* occlusion maps\n* basic shadow mapping for directionallight and spotlight\n* post-tonemapping color transform via a lookup table (lut) texture\n* ibl diffuse and specular\n\n## installation\n\nuse pip to install the `panda3d-simplepbr` package:\n\n```bash\npip install panda3d-simplepbr\n```\n\nto grab the latest development build, use:\n\n```bash\npip install git+https://github.com/moguri/panda3d-simplepbr.git\n\n```\n\n## usage\n\njust add `simplepbr.init()` to your `showbase` instance:\n\n```python\nfrom direct.showbase.showbase import showbase\n\nimport simplepbr\n\nclass app(showbase):\n    def __init__(self):\n        super().__init__()\n\n        simplepbr.init()\n```\n\nthe `init()` function will choose typical defaults, but the following can be modified via keyword arguments:\n\n`render_node`\n: the node to attach the shader too, defaults to `base.render` if `none`\n\n`window`\n: the window to attach the framebuffer too, defaults to `base.win` if `none`\n\n`camera_node`\n: the nodepath of the camera to use when rendering the scene, defaults to `base.cam` if `none`\n\n`msaa_samples`\n: the number of samples to use for multisample anti-aliasing, defaults to 4\n\n`max_lights`\n: the maximum number of lights to render, defaults to 8\n\n`use_normal_maps`\n: use normal maps to modify fragment normals, defaults to `false` (note: requires models with appropriate tangents defined)\n\n`use_emission_maps`\n: use emission maps, defaults to `true`\n\n`use_occlusion_maps`\n: use occlusion maps, defaults to `false` (note: requires occlusion channel in metal-roughness map)\n\n`enable_shadows`\n: enable shadow map support, defaults to `true`\n\n`enable_fog`\n: enable exponential fog, defaults to false\n\n`exposure`\n: a value used to multiply the screen-space color value prior to tonemapping, defaults to 1.0\n\n`use_330`\n: force shaders to use glsl version 330 (if `true`) or 120 (if `false`) or auto-detect if `none`, defaults to `none`\n\n`use_hardware_skinning`\n: force usage of hardware skinning for skeleton animations or auto-detect if `none`, defaults to `none`\n\n`sdr_lut`\n: color lut to use post-tonemapping\n\n`sdr_lut_factor`\n: factor (from 0.0 to 1.0) for how much of the lut color to mix in, defaults to 1.0\n\n`env_map`\n: an `envmap` or cubemap texture path to use for ibl, defaults to `none`\n\nthose parameters can also be modified later on by setting the related attribute of the simplepbr ripeline returned by the init() function:\n\n```python\n        pipeline = simplepbr.init()\n        \n        ...\n        \n        pipeline.use_normals_map = true\n```\n\n### textures\n\nsimplepbr expects the following textures are assigned to the following texture stages:\n\n* basecolor - modulate\n* metalroughness - selector\n* normals - normal\n* emission - emission\n\n## example\n\nfor an example application using `panda3d-simplepbr` check out the [viewer](https://github.com/moguri/panda3d-gltf/blob/master/gltf/viewer.py) in the [panda3d-gltf repo](https://github.com/moguri/panda3d-gltf).\n\n## running tests\n\nfirst install `panda3d-simplepbr` in editable mode along with `test` extras:\n\n```bash\npip install -e .[test]\n```\n\nthen run the test suite with `pytest`:\n\n```bash\npytest\n```\n\n## building wheels\n\ninstall `build`:\n\n```bash\npip install --upgrade build\n```\n\nand run:\n\n```bash\npython -m build\n```\n\n## license\n[b3d 3-clause](https://choosealicense.com/licenses/bsd-3-clause/)\n",
  "docs_url": null,
  "keywords": "panda3d,gamedev,pbr",
  "license": "bsd-3-clause",
  "name": "panda3d-simplepbr",
  "package_url": "https://pypi.org/project/panda3d-simplepbr/",
  "project_url": "https://pypi.org/project/panda3d-simplepbr/",
  "project_urls": {
    "homepage": "https://github.com/Moguri/panda3d-simplepbr"
  },
  "release_url": "https://pypi.org/project/panda3d-simplepbr/0.11.2/",
  "requires_dist": [
    "panda3d >=1.10.8",
    "typing-extensions ~=4.7",
    "pytest ; extra == 'test'",
    "pylint ~=3.0.0 ; extra == 'test'",
    "pytest-pylint ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "a simple, lightweight pbr render pipeline for panda3d",
  "version": "0.11.2",
  "releases": [],
  "developers": [
    "mitchell_stokes"
  ],
  "kwds": "panda3d shader shaders renderer opengl",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_panda3d_simplepbr",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_panda3d",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_pylint",
    "pypi_typing_extensions"
  ]
}
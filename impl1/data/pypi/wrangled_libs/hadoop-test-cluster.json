{
  "classifiers": [],
  "description": "hadoop test clusters\n====================\n\n|pypi| |cdh5| |cdh6|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/hadoop-test-cluster.svg\n   :target: https://pypi.org/project/hadoop-test-cluster/\n.. |cdh5| image:: https://img.shields.io/docker/pulls/jcrist/hadoop-testing-cdh5.svg\n   :target: https://hub.docker.com/r/jcrist/hadoop-testing-cdh5/\n.. |cdh6| image:: https://img.shields.io/docker/pulls/jcrist/hadoop-testing-cdh6.svg\n   :target: https://hub.docker.com/r/jcrist/hadoop-testing-cdh6/\n\na dockerized setup for testing code on a hadoop cluster.\n\ninstallation\n------------\n\n``hadoop-test-cluster`` is available on pypi:\n\n.. code-block:: console\n\n    $ pip install hadoop-test-cluster\n\nyou can also install from source on github:\n\n.. code-block:: console\n\n    $ pip install git+https://github.com/jcrist/hadoop-test-cluster.git\n\noverview\n--------\n\nfor testing purposes, infrastructure for setting up a mini hadoop cluster using\ndocker is provided here. two base images are provided:\n\n- ``cdh5``: provides a cdh5 installation of hadoop 2.6\n- ``cdh6``: provides a cdh6 installation of hadoop 3.0\n\nboth images can be run with 2 different configurations:\n\n- ``simple``: uses ``simple`` authentication (unix user permissions)\n- ``kerberos`` uses ``kerberos`` for authentication\n\neach cluster has three containers:\n\n- one ``master`` node running the ``hdfs-namenode`` and\n  ``yarn-resourcemanager``, as well as the kerberos daemons.\n- one ``worker`` node running the ``hdfs-datanode`` and ``yarn-nodemanager``\n- one ``edge`` node for interacting with the cluster\n\none user account has also been created for testing purposes:\n\n- login: ``testuser``\n- password: ``testpass``\n\nfor the ``kerberos`` setup, a keytab for this user has been put at\n``/home/testuser/testuser.keytab``, so you can kinit easily like ``kinit -kt\n/home/testuser/testuser.keytab testuser``\n\nan admin kerberos principal has also been created for use with ``kadmin``:\n\n- login: ``admin/admin``\n- password: ``adminpass``\n\nports\n-----\n\nthe full address is dependent on the ip address of your docker-machine driver,\nwhich can be found at:\n\n.. code-block:: console\n\n    $ docker-machine inspect --format {{.driver.ipaddress}})\n\n- namenode rpc: 9000\n- namenode webui: 50070\n- resourcemanager webui: 8088\n- kerberos kdc: 88\n- kerberos kadmin: 749\n- datanode webui: 50075\n- nodemanager webui: 8042\n\nthe ``htcluster`` commandline tool\n----------------------------------\n\nto work with either cluster, please use the ``htcluster`` tool. this is a thin\nwrapper around ``docker-compose``, with utilities for quickly doing most common\nactions.\n\n.. code-block:: console\n\n    $ htcluster --help\n    usage: htcluster [--help] [--version] command ...\n\n    manage hadoop test clusters\n\n    positional arguments:\n    command\n        startup   start up a hadoop cluster.\n        login     login to a node in the cluster.\n        exec      execute a command on the node as a user\n        shutdown  shutdown the cluster and remove the containers.\n        compose   forward commands to docker-compose\n        kerbenv   output environment variables to setup kerberos locally. intended\n                  use is to eval the output in bash: eval $(htcluster kerbenv)\n\n    optional arguments:\n    --help, -h  show this help message then exit\n    --version   show version then exit\n\nstarting a cluster\n~~~~~~~~~~~~~~~~~~\n\nstart a cdh5 cluster with simple authentication:\n\n.. code-block:: console\n\n    $ htcluster startup --image cdh5 --config simple\n\nstart a cdh6 cluster with kerberos authentication\n\n.. code-block:: console\n\n    $ htcluster startup --image cdh6 --config kerberos\n\nstarting a cluster, mounting the current directory to ~/workdir\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: console\n\n    $ htcluster startup --image cdh5 --mount .:workdir\n\nlogin to the edge node\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: console\n\n    $ htcluster login\n\nrun a commmand as the user on the edge node\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: console\n\n    $ htcluster exec -- myscript.sh some other args\n\nshutdown the cluster\n~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: console\n\n    $ htcluster shutdown\n\n\nauthenticating with kerberos from outside docker\n------------------------------------------------\n\nin the kerberized cluster, the webui's are secured by kerberos, and so won't be\naccessible from your browser unless you configure kerberos properly. this is\ndoable, but takes a few steps:\n\n1. kerberos/spnego requires that the requested url matches the hosts domain.\n   the easiest way to do this is to modify your ``/etc/hosts`` and add a line for\n   ``master.example.com``:\n\n   .. code-block:: console\n\n      # add a line to /etc/hosts pointing master.example.com to your docker-machine\n      # driver ip address.\n      # note that you probably need to run this command as a super user.\n      $ echo \"$(docker-machine inspect --format {{.driver.ipaddress}})  master.example.com\" >> /etc/hosts\n\n2. you must have ``kinit`` installed locally. you may already have it, otherwise\n   it's available through most package managers.\n\n3. you need to tell kerberos where the ``krb5.conf`` is for this domain. this is\n   done with an environment variable. to make this easy, ``htcluster`` has a\n   command to do this:\n\n   .. code-block:: console\n\n      $ eval $(htcluster kerbenv)\n\n4. at this point you should be able to kinit as testuser:\n\n   .. code-block:: console\n\n      $ kinit testuser@example.com\n\n5. to access kerberos secured pages in your browser you'll need to do a bit of\n   (simple) configuration. see [this documentation from\n   cloudera](https://www.cloudera.com/documentation/enterprise/5-9-x/topics/cdh_sg_browser_access_kerberos_protected_url.html)\n   for information on what's needed for your browser.\n\n6. since environment variables are only available for processes started in the\n   environment, you have three options here:\n\n   - restart your browser from the shell in which you added the environment\n     variables\n\n   - manually get a ticket for the ``http/master.example.com`` principal. note\n     that this will delete your other tickets, but works fine if you just want\n     to see the webpage\n\n     .. code-block:: console\n\n        $ kinit -s http/master.example.com testuser\n\n   - use ``curl`` to authenticate the first time, at which point you'll already\n     have the proper tickets in your cache, and the browser authentication will\n     just work. note that your version of curl must support the gss-api.\n\n     .. code-block:: console\n\n        $ curl -v  # check your version of curl supports gss-api\n        curl 7.59.0 (x86_64-apple-darwin17.2.0) libcurl/7.59.0 securetransport zlib/1.2.11\n        release-date: 2018-03-14\n        protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\n        features: asynchdns ipv6 largefile gss-api kerberos spnego ntlm ntlm_wb ssl libz unixsockets\n\n        $ curl --negotiate -u : http://master.example.com:50070  # get a http ticket for master.example.com\n\n   after doing one of these, you should be able to access any of the pages from\n   your browser.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "hadoop-test-cluster",
  "package_url": "https://pypi.org/project/hadoop-test-cluster/",
  "project_url": "https://pypi.org/project/hadoop-test-cluster/",
  "project_urls": {
    "Homepage": "https://github.com/jcrist/hadoop-test-cluster"
  },
  "release_url": "https://pypi.org/project/hadoop-test-cluster/0.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a cli for managing hadoop clusters for testing",
  "version": "0.1.0",
  "releases": [],
  "developers": [
    "jim_crist",
    "jiminy.crist@gmail.com"
  ],
  "kwds": "docker hadoop dockerized cloudera containers",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_hadoop_test_cluster",
  "homepage": "https://github.com/jcrist/hadoop-test-cluster",
  "release_count": 6,
  "dependency_ids": []
}
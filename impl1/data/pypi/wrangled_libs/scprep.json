{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "framework :: jupyter",
    "intended audience :: developers",
    "intended audience :: science/research",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: bio-informatics"
  ],
  "description": ".. image:: logo.png\n    :alt: scprep logo\n\n.. image:: https://img.shields.io/pypi/v/scprep.svg\n    :target: https://pypi.org/project/scprep/\n    :alt: latest pypi version\n.. image:: https://anaconda.org/bioconda/scprep/badges/version.svg\n    :target: https://anaconda.org/bioconda/scprep/\n    :alt: latest conda version\n.. image:: https://api.travis-ci.com/krishnaswamylab/scprep.svg?branch=master\n    :target: https://travis-ci.com/krishnaswamylab/scprep\n    :alt: travis ci build\n.. image:: https://img.shields.io/readthedocs/scprep.svg\n    :target: https://scprep.readthedocs.io/\n    :alt: read the docs\n.. image:: https://coveralls.io/repos/github/krishnaswamylab/scprep/badge.svg?branch=master\n    :target: https://coveralls.io/github/krishnaswamylab/scprep?branch=master\n    :alt: coverage status\n.. image:: https://img.shields.io/twitter/follow/krishnaswamylab.svg?style=social&label=follow\n    :target: https://twitter.com/krishnaswamylab\n    :alt: twitter\n.. image:: https://img.shields.io/github/stars/krishnaswamylab/scprep.svg?style=social&label=stars\n    :target: https://github.com/krishnaswamylab/scprep/\n    :alt: github stars\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style: black\n.. image:: https://img.shields.io/badge/style%20guide-openstack-eb1a32.svg\n    :target: https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide\n    :alt: style guide: openstack\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white\n    :target: https://github.com/pre-commit/pre-commit\n    :alt: pre-commit\n\n`scprep` provides an all-in-one framework for loading, preprocessing, and plotting matrices in python, with a focus on single-cell genomics.\n\nthe philosophy of `scprep`:\n\n* data shouldn't be hidden in a complex and bespoke class object. `scprep` works with `numpy` arrays, `pandas` data frames, and `scipy` sparse matrices, all of which are popular data formats in python and accepted as input to most common algorithms.\n* your analysis pipeline shouldn't have to change based on data format. changing from a `numpy` array to a `pandas` data frame introduces endless technical differences (e.g. in indexing matrices). `scprep` provides data-agnostic methods that work the same way on all formats.\n* simple analysis should mean simple code. `scprep` takes care of annoying edge cases and sets nice defaults so you don't have to.\n* using a framework shouldn't be limiting. because nothing is hidden from you, you have access to the power of `numpy`, `scipy`, `pandas` and `matplotlib` just as you would if you used them directly.\n\ninstallation\n------------\n\npreprocessing is available on `pip`. install by running the following in a terminal::\n\n    pip install --user scprep\n\nalternatively, scprep can be installed using `conda <https://conda.io/docs/>`_ (most easily obtained via the `miniconda python distribution <https://conda.io/miniconda.html>`_)::\n\n    conda install -c bioconda scprep\n\nquick start\n-----------\n\nyou can use `scprep` with your single cell data as follows::\n\n    import scprep\n    # load data\n    data_path = \"~/mydata/my_10x_data\"\n    data = scprep.io.load_10x(data_path)\n    # remove empty columns and rows\n    data = scprep.filter.remove_empty_cells(data)\n    data = scprep.filter.remove_empty_genes(data)\n    # filter by library size to remove background\n    scprep.plot.plot_library_size(data, cutoff=500)\n    data = scprep.filter.filter_library_size(data, cutoff=500)\n    # filter by mitochondrial expression to remove dead cells\n    mt_genes = scprep.select.get_gene_set(data, starts_with=\"mt\")\n    scprep.plot.plot_gene_set_expression(data, genes=mt_genes, percentile=90)\n    data = scprep.filter.filter_gene_set_expression(data, genes=mt_genes,\n                                                    percentile=90)\n    # library size normalize\n    data = scprep.normalize.library_size_normalize(data)\n    # square root transform\n    data = scprep.transform.sqrt(data)\n\nexamples\n--------\n\n* `scatter plots <https://scprep.readthedocs.io/en/stable/examples/scatter.html>`_\n* `jitter plots <https://scprep.readthedocs.io/en/stable/examples/jitter.html>`_\n\nhelp\n----\n\nif you have any questions or require assistance using scprep, please read the documentation at https://scprep.readthedocs.io/ or contact us at https://krishnaswamylab.org/get-help\n",
  "docs_url": null,
  "keywords": "big-data,computational-biology",
  "license": "gnu general public license version 3",
  "name": "scprep",
  "package_url": "https://pypi.org/project/scprep/",
  "project_url": "https://pypi.org/project/scprep/",
  "project_urls": {
    "Download": "https://github.com/KrishnaswamyLab/scprep/archive/v1.2.3.tar.gz",
    "Homepage": "https://github.com/KrishnaswamyLab/scprep"
  },
  "release_url": "https://pypi.org/project/scprep/1.2.3/",
  "requires_dist": [
    "numpy (>=1.12.0)",
    "scipy (>=0.18.1)",
    "scikit-learn (>=0.19.1)",
    "decorator (>=4.3.0)",
    "pandas (<2.1,>=0.25)",
    "packaging",
    "sphinx (<2.4,>=2.2) ; extra == 'doc'",
    "sphinxcontrib-napoleon ; extra == 'doc'",
    "ipykernel ; extra == 'doc'",
    "nbsphinx ; extra == 'doc'",
    "autodocsumm ; extra == 'doc'",
    "fcsparser (<0.2.5) ; extra == 'optional'",
    "tables ; extra == 'optional'",
    "h5py ; extra == 'optional'",
    "anndata ; extra == 'optional'",
    "anndata2ri (>=1.0.6) ; extra == 'optional'",
    "nose ; extra == 'test'",
    "nose2 ; extra == 'test'",
    "coverage ; extra == 'test'",
    "coveralls ; extra == 'test'",
    "parameterized ; extra == 'test'",
    "requests ; extra == 'test'",
    "packaging ; extra == 'test'",
    "mock ; extra == 'test'",
    "h5py ; extra == 'test'",
    "matplotlib (>=3.0) ; extra == 'test'",
    "rpy2 (>=3.4.3) ; extra == 'test'",
    "black ; extra == 'test'",
    "fcsparser (<0.2.5) ; extra == 'test'",
    "tables ; extra == 'test'",
    "anndata ; extra == 'test'",
    "anndata2ri (>=1.0.6) ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "scprep",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "krishnaswamylab@gmail.com",
    "scott_gigante"
  ],
  "kwds": "scprep bioconda svg miniconda openstack",
  "license_kwds": "gnu general public license version 3",
  "libtype": "pypi",
  "id": "pypi_scprep",
  "homepage": "https://github.com/krishnaswamylab/scprep",
  "release_count": 43,
  "dependency_ids": [
    "pypi_anndata",
    "pypi_anndata2ri",
    "pypi_autodocsumm",
    "pypi_black",
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_decorator",
    "pypi_fcsparser",
    "pypi_h5py",
    "pypi_ipykernel",
    "pypi_matplotlib",
    "pypi_mock",
    "pypi_nbsphinx",
    "pypi_nose",
    "pypi_nose2",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_parameterized",
    "pypi_requests",
    "pypi_rpy2",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinxcontrib_napoleon",
    "pypi_tables"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: isc license (iscl)",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: build tools",
    "topic :: system :: operating system kernels :: linux"
  ],
  "description": ".. contents:: table of contents\n   :backlinks: none\n\nnews\n----\n\ndependency loop with recent linux-next kernels\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nto fix issues with dependency loops on recent linux-next kernels, apply `this\npatch <https://www.spinics.net/lists/linux-kbuild/msg23455.html>`_. hopefully,\nit will be in ``linux-next`` soon.\n\n``windows-curses`` is no longer automatically installed on windows\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nstarting with kconfiglib 13.0.0, the `windows-curses\n<https://github.com/zephyrproject-rtos/windows-curses>`__ package is no longer\nautomatically installed on windows, and needs to be installed manually for the\nterminal ``menuconfig`` to work.\n\nthis fixes installation of kconfiglib on msys2, which is not compatible with\n``windows-curses``. see `this issue\n<https://github.com/ulfalizer/kconfiglib/issues/77>`__.\n\nthe ``menuconfig`` now shows a hint re. installing ``windows-curses`` when the\n``curses`` module can't be imported on windows.\n\nsorry if this change caused problems!\n\noverview\n--------\n\nkconfiglib is a `kconfig\n<https://github.com/torvalds/linux/blob/master/documentation/kbuild/kconfig-language.rst>`__\nimplementation in python 2/3. it started out as a helper library, but now has a\nenough functionality to also work well as a standalone kconfig implementation\n(including `terminal and gui menuconfig interfaces <menuconfig interfaces_>`_\nand `kconfig extensions`_).\n\nthe entire library is contained in `kconfiglib.py\n<https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_. the\nbundled scripts are implemented on top of it. implementing your own scripts\nshould be relatively easy, if needed.\n\nkconfiglib is used exclusively by e.g. the `zephyr\n<https://www.zephyrproject.org/>`__, `esp-idf\n<https://github.com/espressif/esp-idf>`__, and `acrn\n<https://projectacrn.org/>`__ projects. it is also used for many small helper\nscripts in various projects.\n\nsince kconfiglib is based around a library, it can be used e.g. to generate a\n`kconfig cross-reference\n<https://docs.zephyrproject.org/latest/reference/kconfig/index.html>`_, using\nthe same robust kconfig parser used for other kconfig tools, instead of brittle\nad-hoc parsing. the documentation generation script can be found `here\n<https://github.com/zephyrproject-rtos/zephyr/blob/master/doc/scripts/genrest.py>`__.\n\nkconfiglib implements the recently added `kconfig preprocessor\n<https://github.com/torvalds/linux/blob/master/documentation/kbuild/kconfig-macro-language.rst>`__.\nfor backwards compatibility, environment variables can be referenced both as\n``$(foo)`` (the new syntax) and as ``$foo`` (the old syntax). the old syntax is\ndeprecated, but will probably be supported for a long time, as it's needed to\nstay compatible with older linux kernels. the major version will be increased\nif support is ever dropped. using the old syntax with an undefined environment\nvariable keeps the string as is.\n\nnote: see `this issue <https://github.com/ulfalizer/kconfiglib/issues/47>`__ if\nyou run into a \"macro expanded to blank string\" error with kernel 4.18+.\n\nsee `this page\n<https://docs.zephyrproject.org/latest/guides/kconfig/tips.html>`__ for some\nkconfig tips and best practices.\n\ninstallation\n------------\n\ninstallation with pip\n~~~~~~~~~~~~~~~~~~~~~\n\nkconfiglib is available on `pypi <https://pypi.python.org/pypi/kconfiglib/>`_ and can be\ninstalled with e.g.\n\n.. code::\n\n    $ pip(3) install kconfiglib\n\nmicrosoft windows is supported.\n\nthe ``pip`` installation will give you both the base library and the following\nexecutables. all but two (``genconfig`` and ``setconfig``) mirror functionality\navailable in the c tools.\n\n- `menuconfig <https://github.com/ulfalizer/kconfiglib/blob/master/menuconfig.py>`_\n\n- `guiconfig <https://github.com/ulfalizer/kconfiglib/blob/master/guiconfig.py>`_\n\n- `oldconfig <https://github.com/ulfalizer/kconfiglib/blob/master/oldconfig.py>`_\n\n- `olddefconfig <https://github.com/ulfalizer/kconfiglib/blob/master/olddefconfig.py>`_\n\n- `savedefconfig <https://github.com/ulfalizer/kconfiglib/blob/master/savedefconfig.py>`_\n\n- `defconfig <https://github.com/ulfalizer/kconfiglib/blob/master/defconfig.py>`_\n\n- `alldefconfig <https://github.com/ulfalizer/kconfiglib/blob/master/alldefconfig.py>`_\n\n- `allnoconfig <https://github.com/ulfalizer/kconfiglib/blob/master/allnoconfig.py>`_\n\n- `allmodconfig <https://github.com/ulfalizer/kconfiglib/blob/master/allmodconfig.py>`_\n\n- `allyesconfig <https://github.com/ulfalizer/kconfiglib/blob/master/allyesconfig.py>`_\n\n- `listnewconfig <https://github.com/ulfalizer/kconfiglib/blob/master/listnewconfig.py>`_\n\n- `genconfig <https://github.com/ulfalizer/kconfiglib/blob/master/genconfig.py>`_\n\n- `setconfig <https://github.com/ulfalizer/kconfiglib/blob/master/setconfig.py>`_\n\n``genconfig`` is intended to be run at build time. it generates a c header from\nthe configuration and (optionally) information that can be used to rebuild only\nfiles that reference kconfig symbols that have changed value.\n\nstarting with kconfiglib version 12.2.0, all utilities are compatible with both\npython 2 and python 3. previously, ``menuconfig.py`` only ran under python 3\n(i.e., it's now more backwards compatible than before).\n\n**note:** if you install kconfiglib with ``pip``'s ``--user`` flag, make sure\nthat your ``path`` includes the directory where the executables end up. you can\nlist the installed files with ``pip(3) show -f kconfiglib``.\n\nall releases have a corresponding tag in the git repository, e.g. ``v14.1.0``\n(the latest version).\n\n`semantic versioning <http://semver.org/>`_ is used. there's been ten small\nchanges to the behavior of the api, a windows packaging change, and a hashbang\nchange to use ``python3``\n(`1 <https://github.com/ulfalizer/kconfiglib/commit/e8b4ecb6ff6ccc1c7be0818314fbccda2ef2b2ee>`_,\n`2 <https://github.com/ulfalizer/kconfiglib/commit/db633015a4d7b0ba1e882f665e191f350932b2af>`_,\n`3 <https://github.com/ulfalizer/kconfiglib/commit/8983f7eb297dd614faf0beee3129559bc8ba338e>`_,\n`4 <https://github.com/ulfalizer/kconfiglib/commit/cbf32e29a130d22bc734b7778e6304ac9df2a3e8>`_,\n`5 <https://github.com/ulfalizer/kconfiglib/commit/eb6c21a9b33a2d6e2bed9882d4f930d0cab2f03b>`_,\n`6 <https://github.com/ulfalizer/kconfiglib/commit/c19fc11355b13d75d97286402c7a933fb23d3b70>`_,\n`7 <https://github.com/ulfalizer/kconfiglib/commit/7a428aa415606820a44291f475248b08e3952c4b>`_,\n`8 <https://github.com/ulfalizer/kconfiglib/commit/f247ddf618ad29718e5efd3e69f8baf75d4d347b>`_,\n`9 <https://github.com/ulfalizer/kconfiglib/commit/4fed39d9271ceb68be4157ab3f96a45b94f77dc0>`_,\n`10 <https://github.com/ulfalizer/kconfiglib/commit/55bc8c380869ea663092212e8fe388ad7abae596>`_,\n`windows packaging change <https://github.com/ulfalizer/kconfiglib/commit/21b4c1e3b6e2867b9a0788d21a358f6b1f581d86>`_,\n`python 3 hashbang change <https://github.com/ulfalizer/kconfiglib/commit/9e0a8d29fa76adcb3f27bb2e20f16fefc2a8591e>`_),\nwhich is why the major version is at 14 rather than 2. i do major version bumps\nfor all behavior changes, even tiny ones, and most of these were fixes for baby\nissues in the early days of the kconfiglib 2 api.\n\nmanual installation\n~~~~~~~~~~~~~~~~~~~\n\njust drop ``kconfiglib.py`` and the scripts you want somewhere. there are no\nthird-party dependencies, but the terminal ``menuconfig`` won't work on windows\nunless a package like `windows-curses\n<https://github.com/zephyrproject-rtos/windows-curses>`__ is installed.\n\ninstallation for the linux kernel\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsee the module docstring at the top of `kconfiglib.py <https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_.\n\npython version compatibility (2.7/3.2+)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nkconfiglib and all utilities run under both python 2.7 and python 3.2 and\nlater. the code mostly uses basic python features and has no third-party\ndependencies, so keeping it backwards-compatible is pretty low effort.\n\nthe 3.2 requirement comes from ``argparse``. ``format()`` with unnumbered\n``{}`` is used as well.\n\na recent python 3 version is recommended if you have a choice, as it'll give\nyou better unicode handling.\n\ngetting started\n---------------\n\n1. `install <installation_>`_ the library and the utilities.\n\n2. write `kconfig\n   <https://github.com/torvalds/linux/blob/master/documentation/kbuild/kconfig-language.rst>`__\n   files that describe the available configuration options. see `this page\n   <https://docs.zephyrproject.org/latest/guides/kconfig/tips.html>`__ for some\n   general kconfig advice.\n\n3. generate an initial configuration with e.g. ``menuconfig``/``guiconfig`` or\n   ``alldefconfig``. the configuration is saved as ``.config`` by default.\n\n   for more advanced projects, the ``defconfig`` utility can be used to\n   generate the initial configuration from an existing configuration file.\n   usually, this existing configuration file would be a minimal configuration\n   file, as generated by e.g. ``savedefconfig``.\n\n4. run ``genconfig`` to generate a header file. by default, it is saved as\n   ``config.h``.\n\n   normally, ``genconfig`` would be run automatically as part of the build.\n\n   before writing a header file or other configuration output, kconfiglib\n   compares the old contents of the file against the new contents. if there's\n   no change, the write is skipped. this avoids updating file metadata like the\n   modification time, and might save work depending on your build setup.\n\n   adding new configuration output formats should be relatively straightforward.\n   see the implementation of ``write_config()`` in `kconfiglib.py\n   <https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_.\n   the documentation for the ``symbol.config_string`` property has some tips as\n   well.\n\n5. to update an old ``.config`` file after the kconfig files have changed (e.g.\n   to add new options), run ``oldconfig`` (prompts for values for new options)\n   or ``olddefconfig`` (gives new options their default value). entering the\n   ``menuconfig`` or ``guiconfig`` interface and saving the configuration will\n   also update it (the configuration interfaces always prompt for saving\n   on exit if it would modify the contents of the ``.config`` file).\n\n   due to kconfig semantics, simply loading an old ``.config`` file performs an\n   implicit ``olddefconfig``, so building will normally not be affected by\n   having an outdated configuration.\n\nwhenever ``.config`` is overwritten, the previous version of the file is saved\nto ``.config.old`` (or, more generally, to ``$kconfig_config.old``).\n\nusing ``.config`` files as make input\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``.config`` files use make syntax and can be included directly in makefiles to\nread configuration values from there. this is why ``n``-valued\n``bool``/``tristate`` values are written out as ``# config_foo is not set`` (a\nmake comment) in ``.config``, allowing them to be tested with ``ifdef`` in\nmake.\n\nif you make use of this, you might want to pass ``--config-out <filename>`` to\n``genconfig`` and include the configuration file it generates instead of\nincluding ``.config`` directly. this has the advantage that the generated\nconfiguration file will always be a \"full\" configuration file, even if\n``.config`` is outdated. otherwise, it might be necessary to run\n``old(def)config`` or ``menuconfig``/``guiconfig`` before rebuilding with an\noutdated ``.config``.\n\nif you use ``--sync-deps`` to generate incremental build information, you can\ninclude ``deps/auto.conf`` instead, which is also a full configuration file.\n\nuseful helper macros\n~~~~~~~~~~~~~~~~~~~~\n\nthe `include/linux/kconfig.h\n<https://github.com/torvalds/linux/blob/master/include/linux/kconfig.h>`_\nheader in the linux kernel defines some useful helper macros for testing\nkconfig configuration values.\n\n``is_enabled()`` is generally useful, allowing configuration values to be\ntested in ``if`` statements with no runtime overhead.\n\nincremental building\n~~~~~~~~~~~~~~~~~~~~\n\nsee the docstring for ``kconfig.sync_deps()`` in `kconfiglib.py\n<https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_ for hints\non implementing incremental builds (rebuilding just source files that reference\nchanged configuration values).\n\nrunning the ``scripts/basic/fixdep.c`` tool from the kernel on the output of\n``gcc -md <source file>`` might give you an idea of how it all fits together.\n\nlibrary documentation\n---------------------\n\nkconfiglib comes with extensive documentation in the form of docstrings. to view it, run e.g.\nthe following command:\n\n.. code:: sh\n\n    $ pydoc(3) kconfiglib\n\nfor html output, add ``-w``:\n\n.. code:: sh\n\n    $ pydoc(3) -w kconfiglib\n\nthis will also work after installing kconfiglib with ``pip(3)``.\n\ndocumentation for other modules can be viewed in the same way (though a plain\n``--help`` will work when they're run as executables):\n\n.. code:: sh\n\n    $ pydoc(3) menuconfig/guiconfig/...\n\na good starting point for learning the library is to read the module docstring\n(which you could also just read directly at the beginning of `kconfiglib.py\n<https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_). it\ngives an introduction to symbol values, the menu tree, and expressions.\n\nafter reading the module docstring, a good next step is to read the ``kconfig``\nclass documentation, and then the documentation for the ``symbol``, ``choice``,\nand ``menunode`` classes.\n\nplease tell me if something is unclear or can be explained better.\n\nlibrary features\n----------------\n\nkconfiglib can do the following, among other things:\n\n- **programmatically get and set symbol values**\n\n  see `allnoconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/allnoconfig.py>`_ and\n  `allyesconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/allyesconfig.py>`_,\n  which are automatically verified to produce identical output to the standard\n  ``make allnoconfig`` and ``make allyesconfig``.\n\n- **read and write .config and defconfig files**\n\n  the generated ``.config`` and ``defconfig`` (minimal configuration) files are\n  character-for-character identical to what the c implementation would generate\n  (except for the header comment). the test suite relies on this, as it\n  compares the generated files.\n\n- **write c headers**\n\n  the generated headers use the same format as ``include/generated/autoconf.h``\n  from the linux kernel. output for symbols appears in the order that they're\n  defined, unlike in the c tools (where the order depends on the hash table\n  implementation).\n\n- **implement incremental builds**\n\n  this uses the same scheme as the ``include/config`` directory in the kernel:\n  symbols are translated into files that are touched when the symbol's value\n  changes between builds, which can be used to avoid having to do a full\n  rebuild whenever the configuration is changed.\n\n  see the ``sync_deps()`` function for more information.\n\n- **inspect symbols**\n\n  printing a symbol or other item (which calls ``__str__()``) returns its\n  definition in kconfig format. this also works for symbols defined in multiple\n  locations.\n\n  a helpful ``__repr__()`` is  on all objects too.\n\n  all ``__str__()`` and ``__repr__()`` methods are deliberately implemented\n  with just public apis, so all symbol information can be fetched separately as\n  well.\n\n- **inspect expressions**\n\n  expressions use a simple tuple-based format that can be processed manually\n  if needed. expression printing and evaluation functions are provided,\n  implemented with public apis.\n\n- **inspect the menu tree**\n\n  the underlying menu tree is exposed, including submenus created implicitly\n  from symbols depending on preceding symbols. this can be used e.g. to\n  implement menuconfig-like functionality.\n\n  see `menuconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/menuconfig.py>`_/`guiconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/guiconfig.py>`_ and the\n  minimalistic `menuconfig_example.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/examples/menuconfig_example.py>`_\n  example.\n\nkconfig extensions\n~~~~~~~~~~~~~~~~~~\n\nthe following kconfig extensions are available:\n\n- ``source`` supports glob patterns and includes each matching file. a pattern\n  is required to match at least one file.\n\n  a separate ``osource`` statement is available for cases where it's okay for\n  the pattern to match no files (in which case ``osource`` turns into a no-op).\n\n- a relative ``source`` statement (``rsource``) is available, where file paths\n  are specified relative to the directory of the current kconfig file. an\n  ``orsource`` statement is available as well, analogous to ``osource``.\n\n- preprocessor user functions can be defined in python, which makes it simple\n  to integrate information from existing python tools into kconfig (e.g. to\n  have kconfig symbols depend on hardware information stored in some other\n  format).\n\n  see the *kconfig extensions* section in the\n  `kconfiglib.py <https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_\n  module docstring for more information.\n\n- ``def_int``, ``def_hex``, and ``def_string`` are available in addition to\n  ``def_bool`` and ``def_tristate``, allowing ``int``, ``hex``, and ``string``\n  symbols to be given a type and a default at the same time.\n\n  these can be useful in projects that make use of symbols defined in multiple\n  locations, and remove some kconfig inconsistency.\n\n- environment variables are expanded directly in e.g. ``source`` and\n  ``mainmenu`` statements, meaning ``option env`` symbols are redundant.\n\n  this is the standard behavior with the new `kconfig preprocessor\n  <https://github.com/torvalds/linux/blob/master/documentation/kbuild/kconfig-macro-language.rst>`__,\n  which kconfiglib implements.\n\n  ``option env`` symbols are accepted but ignored, which leads the caveat that\n  they must have the same name as the environment variables they reference\n  (kconfiglib warns if the names differ). this keeps kconfiglib compatible with\n  older linux kernels, where the name of the ``option env`` symbol always\n  matched the environment variable. compatibility with older linux kernels is\n  the main reason ``option env`` is still supported.\n\n  the c tools have dropped support for ``option env``.\n\n- two extra optional warnings can be enabled by setting environment variables,\n  covering cases that are easily missed when making changes to kconfig files:\n\n  * ``kconfig_warn_undef``: if set to ``y``, warnings will be generated for all\n    references to undefined symbols within kconfig files. the only gotcha is\n    that all hex literals must be prefixed with ``0x`` or ``0x``, to make it\n    possible to distinguish them from symbol references.\n\n    some projects (e.g. the linux kernel) use multiple kconfig trees with many\n    shared kconfig files, leading to some safe undefined symbol references.\n    ``kconfig_warn_undef`` is useful in projects that only have a single\n    kconfig tree though.\n\n    ``kconfig_strict`` is an older alias for this environment variable,\n    supported for backwards compatibility.\n\n  * ``kconfig_warn_undef_assign``: if set to ``y``, warnings will be generated\n    for all assignments to undefined symbols within ``.config`` files. by\n    default, no such warnings are generated.\n\n    this warning can also be enabled/disabled by setting\n    ``kconfig.warn_assign_undef`` to ``true``/``false``.\n\nother features\n--------------\n\n- **single-file implementation**\n\n  the entire library is contained in `kconfiglib.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/kconfiglib.py>`_.\n\n  the tools implemented on top of it are one file each.\n\n- **robust and highly compatible with the c kconfig tools**\n\n \u00a0the `test suite <https://github.com/ulfalizer/kconfiglib/blob/master/testsuite.py>`_\n  automatically compares output from kconfiglib and the c tools\n  by diffing the generated ``.config`` files for the real kernel kconfig and\n  defconfig files, for all arches.\n\n  this currently involves comparing the output for 36 arches and 498 defconfig\n  files (or over 18000 arch/defconfig combinations in \"obsessive\" test suite\n  mode). all tests are expected to pass.\n\n  a comprehensive suite of selftests is included as well.\n\n- **not horribly slow despite being a pure python implementation**\n\n  the `allyesconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/allyesconfig.py>`_\n  script currently runs in about 1.3 seconds on the linux kernel on a core i7\n  2600k (with a warm file cache), including the ``make`` overhead from ``make\n  scriptconfig``. note that the linux kernel kconfigs are absolutely massive\n  (over 14k symbols for x86) compared to most projects, and also have overhead\n  from running shell commands via the kconfig preprocessor.\n\n  kconfiglib is especially speedy in cases where multiple ``.config`` files\n  need to be processed, because the ``kconfig`` files will only need to be parsed\n  once.\n\n  for long-running jobs, `pypy <https://pypy.org/>`_ gives a big performance\n  boost. cpython is faster for short-running jobs as pypy needs some time to\n  warm up.\n\n  kconfiglib also works well with the\n  `multiprocessing <https://docs.python.org/3/library/multiprocessing.html>`_\n  module. no global state is kept.\n\n- **generates more warnings than the c implementation**\n\n  generates the same warnings as the c implementation, plus additional ones.\n  also detects dependency and ``source`` loops.\n\n  all warnings point out the location(s) in the ``kconfig`` files where a\n  symbol is defined, where applicable.\n\n- **unicode support**\n\n  unicode characters in string literals in ``kconfig`` and ``.config`` files are\n  correctly handled. this support mostly comes for free from python.\n\n- **windows support**\n\n  nothing linux-specific is used. universal newlines mode is used for both\n  python 2 and python 3.\n\n  the `zephyr <https://www.zephyrproject.org/>`_ project uses kconfiglib to\n  generate ``.config`` files and c headers on linux as well as windows.\n\n- **internals that (mostly) mirror the c implementation**\n\n  while being simpler to understand and tweak.\n\nmenuconfig interfaces\n---------------------\n\nthree configuration interfaces are currently available:\n\n- `menuconfig.py <https://github.com/ulfalizer/kconfiglib/blob/master/menuconfig.py>`_\n  is a terminal-based configuration interface implemented using the standard\n  python ``curses`` module. ``xconfig`` features like showing invisible symbols and\n  showing symbol names are included, and it's possible to jump directly to a symbol\n  in the menu tree (even if it's currently invisible).\n\n  .. image:: https://raw.githubusercontent.com/ulfalizer/kconfiglib/screenshots/screenshots/menuconfig.gif\n\n  *there is now also a show-help mode that shows the help text of the currently\n  selected symbol in the help window at the bottom.*\n\n  starting with kconfiglib 12.2.0, ``menuconfig.py`` runs under both python 2\n  and python 3 (previously, it only ran under python 3, so this was a\n  backport). running it under python 3 provides better support for unicode text\n  entry (``get_wch()`` is not available in the ``curses`` module on python 2).\n\n  there are no third-party dependencies on \\*nix. on windows,\n  the ``curses`` modules is not available by default, but support\n  can be added by installing the ``windows-curses`` package:\n\n  .. code-block:: shell\n\n      $ pip install windows-curses\n\n  this uses wheels built from `this repository\n  <https://github.com/zephyrproject-rtos/windows-curses>`_, which is in turn\n  based on christoph gohlke's `python extension packages for windows\n  <https://www.lfd.uci.edu/~gohlke/pythonlibs/#curses>`_.\n\n  see the docstring at the top of `menuconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/menuconfig.py>`_ for\n  more information about the terminal menuconfig implementation.\n\n- `guiconfig.py\n  <https://github.com/ulfalizer/kconfiglib/blob/master/guiconfig.py>`_ is a\n  graphical configuration interface written in `tkinter\n  <https://docs.python.org/3/library/tkinter.html>`_. like ``menuconfig.py``,\n  it supports showing all symbols (with invisible symbols in red) and jumping\n  directly to symbols. symbol values can also be changed directly from the\n  jump-to dialog.\n\n  when single-menu mode is enabled, a single menu is shown at a time, like in\n  the terminal menuconfig. only this mode distinguishes between symbols defined\n  with ``config`` and symbols defined with ``menuconfig``.\n\n  ``guiconfig.py`` has been tested on x11, windows, and macos, and is\n  compatible with both python 2 and python 3.\n\n  despite being part of the python standard library, ``tkinter`` often isn't\n  included by default in python installations on linux. these commands will\n  install it on a few different distributions:\n\n  - ubuntu: ``sudo apt install python-tk``/``sudo apt install python3-tk``\n\n  - fedora: ``dnf install python2-tkinter``/``dnf install python3-tkinter``\n\n  - arch: ``sudo pacman -s tk``\n\n  - clear linux: ``sudo swupd bundle-add python3-tcl``\n\n  screenshot below, with show-all mode enabled and the jump-to dialog open:\n\n  .. image:: https://raw.githubusercontent.com/ulfalizer/kconfiglib/screenshots/screenshots/guiconfig.png\n\n  to avoid having to carry around a bunch of gifs, the image data is embedded\n  in ``guiconfig.py``. to use separate gif files instead, change\n  ``_use_embedded_images`` to ``false`` in ``guiconfig.py``. the image files\n  can be found in the `screenshots\n  <https://github.com/ulfalizer/kconfiglib/tree/screenshots/guiconfig>`_\n  branch.\n\n  i did my best with the images, but some are definitely only art adjacent.\n  touch-ups are welcome. :)\n\n- `pymenuconfig <https://github.com/romavis/pymenuconfig>`_, built by `romavis\n  <https://github.com/romavis>`_, is an older portable python 2/3 tkinter\n  menuconfig implementation.\n\n  screenshot below:\n\n  .. image:: https://raw.githubusercontent.com/romavis/pymenuconfig/master/screenshot.png\n\n  while working on the terminal menuconfig implementation, i added a few apis\n  to kconfiglib that turned out to be handy. ``pymenuconfig`` predates\n  ``menuconfig.py`` and ``guiconfig.py``, and so didn't have them available.\n  blame me for any workarounds.\n\nexamples\n--------\n\nexample scripts\n~~~~~~~~~~~~~~~\n\nthe `examples/ <https://github.com/ulfalizer/kconfiglib/blob/master/examples>`_ directory contains some simple example scripts. among these are the following ones. make sure you run them with the latest version of kconfiglib, as they might make use of newly added features.\n\n- `eval_expr.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/eval_expr.py>`_ evaluates an expression in the context of a configuration.\n\n- `find_symbol.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/find_symbol.py>`_ searches through expressions to find references to a symbol, also printing a \"backtrace\" with parents for each reference found.\n\n- `help_grep.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/help_grep.py>`_ searches for a string in all help texts.\n\n- `print_tree.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/print_tree.py>`_ prints a tree of all configuration items.\n\n- `print_config_tree.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/print_config_tree.py>`_ is similar to ``print_tree.py``, but dumps the tree as it would appear in ``menuconfig``, including values. this can be handy for visually diffing between ``.config`` files and different versions of ``kconfig`` files.\n\n- `list_undefined.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/list_undefined.py>`_ finds references to symbols that are not defined by any architecture in the linux kernel.\n\n- `merge_config.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/merge_config.py>`_ merges configuration fragments to produce a complete .config, similarly to ``scripts/kconfig/merge_config.sh`` from the kernel.\n\n- `menuconfig_example.py <https://github.com/ulfalizer/kconfiglib/blob/master/examples/menuconfig_example.py>`_ implements a configuration interface that uses notation similar to ``make menuconfig``. it's deliberately kept as simple as possible to demonstrate just the core concepts.\n\nreal-world examples\n~~~~~~~~~~~~~~~~~~~\n\n- `kconfig.py\n  <https://github.com/zephyrproject-rtos/zephyr/blob/master/scripts/kconfig/kconfig.py>`_\n  from the `zephyr <https://www.zephyrproject.org/>`_ project handles\n  ``.config`` and header file generation, also doing configuration fragment\n  merging\n\n- `genrest.py\n  <https://github.com/zephyrproject-rtos/zephyr/blob/master/doc/scripts/genrest.py>`_\n  generates a kconfig symbol cross-reference, which can be viewed `here\n  <http://docs.zephyrproject.org/reference/kconfig/index.html>`__\n\n- `cmake and ide integration\n  <https://github.com/espressif/esp-idf/tree/master/tools/kconfig_new>`_ from\n  the esp-idf project, via a configuration server program.\n\n- `a script for turning on usb-related options\n  <https://github.com/google/syzkaller/blob/master/dashboard/config/kconfiglib-merge-usb-configs.py>`_,\n  from the `syzkaller <https://github.com/google/syzkaller>`_ project.\n\n- `various automated checks\n  <https://github.com/zephyrproject-rtos/ci-tools/blob/master/scripts/check_compliance.py>`_,\n  including a check for references to undefined kconfig symbols in source code.\n  see the ``kconfigcheck`` class.\n\n- `various utilities\n  <https://github.com/projectacrn/acrn-hypervisor/tree/master/scripts/kconfig>`_\n  from the `acrn <https://projectacrn.org/>`_ project\n\nthese use the older kconfiglib 1 api, which was clunkier and not as general\n(functions instead of properties, no direct access to the menu structure or\nproperties, uglier ``__str__()`` output):\n\n- `genboardscfg.py <http://git.denx.de/?p=u-boot.git;a=blob;f=tools/genboardscfg.py;hb=head>`_ from `das u-boot <http://www.denx.de/wiki/u-boot>`_ generates some sort of legacy board database by pulling information from a newly added kconfig-based configuration system (as far as i understand it :).\n\n- `gen-manual-lists.py <https://git.busybox.net/buildroot/tree/support/scripts/gen-manual-lists.py?id=5676a2deea896f38123b99781da0a612865adeb0>`_ generated listings for an appendix in the `buildroot <https://buildroot.org>`_ manual. (the listing has since been removed.)\n\n- `gen_kconfig_doc.py <https://github.com/espressif/esp-idf/blob/master/docs/gen-kconfig-doc.py>`_ from the `esp-idf <https://github.com/espressif/esp-idf>`_ project generates documentation from kconfig files.\n\n- `sconf <https://github.com/coryxie/sconf>`_ builds an interactive configuration interface (like ``menuconfig``) on top of kconfiglib, for use e.g. with `scons <scons.org>`_.\n\n- `kconfig-diff.py <https://gist.github.com/dubiousjim/5638961>`_ -- a script by `dubiousjim <https://github.com/dubiousjim>`_ that compares kernel configurations.\n\n- originally, kconfiglib was used in chapter 4 of my `master's thesis <http://liu.diva-portal.org/smash/get/diva2:473038/fulltext01.pdf>`_ to automatically generate a \"minimal\" kernel for a given system. parts of it bother me a bit now, but that's how it goes with old work.\n\nsample ``make iscriptconfig`` session\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following log should give some idea of the functionality available in the api:\n\n.. code-block::\n\n    $ make iscriptconfig\n    a kconfig instance 'kconf' for the architecture x86 has been created.\n    >>> kconf  # calls kconfig.__repr__()\n    <configuration with 13711 symbols, main menu prompt \"linux/x86 4.14.0-rc7 kernel configuration\", srctree \".\", config symbol prefix \"config_\", warnings enabled, undef. symbol assignment warnings disabled>\n    >>> kconf.mainmenu_text  # expanded main menu text\n    'linux/x86 4.14.0-rc7 kernel configuration'\n    >>> kconf.top_node  # the implicit top-level menu\n    <menu node for menu, prompt \"linux/x86 4.14.0-rc7 kernel configuration\" (visibility y), deps y, 'visible if' deps y, has child, kconfig:5>\n    >>> kconf.top_node.list  # first child menu node\n    <menu node for symbol srcarch, deps y, has next, kconfig:7>\n    >>> print(kconf.top_node.list)  # calls menunode.__str__()\n    config srcarch\n    \tstring\n    \toption env=\"srcarch\"\n    \tdefault \"x86\"\n    >>> sym = kconf.top_node.list.next.item  # item contained in next menu node\n    >>> print(sym)  # calls symbol.__str__()\n    config 64bit\n    \tbool \"64-bit kernel\" if arch = \"x86\"\n    \tdefault arch != \"i386\"\n    \thelp\n    \t  say yes to build a 64-bit kernel - formerly known as x86_64\n    \t  say no to build a 32-bit kernel - formerly known as i386\n    >>> sym  # calls symbol.__repr__()\n    <symbol 64bit, bool, \"64-bit kernel\", value y, visibility y, direct deps y, arch/x86/kconfig:2>\n    >>> sym.assignable  # currently assignable values (0, 1, 2 = n, m, y)\n    (0, 2)\n    >>> sym.set_value(0)  # set it to n\n    true\n    >>> sym.tri_value  # check the new value\n    0\n    >>> sym = kconf.syms[\"x86_mpparse\"]  # look up symbol by name\n    >>> print(sym)\n    config x86_mpparse\n    \tbool \"enable mps table\" if (acpi || sfi) && x86_local_apic\n    \tdefault y if x86_local_apic\n    \thelp\n    \t  for old smp systems that do not have proper acpi support. newer systems\n    \t  (esp with 64bit cpus) with acpi support, madt and dsdt will override it\n    >>> default = sym.defaults[0]  # fetch its first default\n    >>> sym = default[1]  # fetch the default's condition (just a symbol here)\n    >>> print(sym)\n    config x86_local_apic\n    \tbool\n    \tdefault y\n    \tselect irq_domain_hierarchy\n    \tselect pci_msi_irq_domain if pci_msi\n    \tdepends on x86_64 || smp || x86_32_non_standard || x86_up_apic || pci_msi\n    >>> sym.nodes  # show the menunode(s) associated with it\n    [<menu node for symbol x86_local_apic, deps n, has next, arch/x86/kconfig:1015>]\n    >>> kconfiglib.expr_str(sym.defaults[0][1])  # print the default's condition\n    'x86_64 || smp || x86_32_non_standard || x86_up_apic || pci_msi'\n    >>> kconfiglib.expr_value(sym.defaults[0][1])  # evaluate it (0 = n)\n    0\n    >>> kconf.syms[\"64bit\"].set_value(2)\n    true\n    >>> kconfiglib.expr_value(sym.defaults[0][1])  # evaluate it again (2 = y)\n    2\n    >>> kconf.write_config(\"myconfig\")  # save a .config\n    >>> ^d\n    $ cat myconfig\n    # generated by kconfiglib (https://github.com/ulfalizer/kconfiglib)\n    config_64bit=y\n    config_x86_64=y\n    config_x86=y\n    config_instruction_decoder=y\n    config_output_format=\"elf64-x86-64\"\n    config_arch_defconfig=\"arch/x86/configs/x86_64_defconfig\"\n    config_lockdep_support=y\n    config_stacktrace_support=y\n    config_mmu=y\n    ...\n\ntest suite\n----------\n\nthe test suite is run with\n\n.. code::\n\n    $ python(3) kconfiglib/testsuite.py\n\n`pypy <https://pypy.org/>`_ works too, and is much speedier for everything except ``allnoconfig.py``/``allnoconfig_simpler.py``/``allyesconfig.py``, where it doesn't have time to warm up since\nthe scripts are run via ``make scriptconfig``.\n\nthe test suite must be run from the top-level kernel directory. it requires that the\nkconfiglib git repository has been cloned into it and that the makefile patch has been applied.\n\nto get rid of warnings generated for the kernel ``kconfig`` files, add ``2>/dev/null`` to the command to\ndiscard ``stderr``.\n\n**note: forgetting to apply the makefile patch will cause some tests that compare generated configurations to fail**\n\n**note: the test suite overwrites .config in the kernel root, so make sure to back it up.**\n\nthe test suite consists of a set of selftests and a set of compatibility tests that\ncompare configurations generated by kconfiglib with\nconfigurations generated by the c tools, for a number of cases. see\n`testsuite.py <https://github.com/ulfalizer/kconfiglib/blob/master/testsuite.py>`_\nfor the available options.\n\nthe `tests/reltest <https://github.com/ulfalizer/kconfiglib/blob/master/tests/reltest>`_ script runs the test suite\nand all the example scripts for both python 2 and python 3, verifying that everything works.\n\nrarely, the output from the c tools is changed slightly (most recently due to a\n`change <https://www.spinics.net/lists/linux-kbuild/msg17074.html>`_ i added).\nif you get test suite failures, try running the test suite again against the\n`linux-next tree <https://www.kernel.org/doc/man-pages/linux-next.html>`_,\nwhich has all the latest changes. i will make it clear if any\nnon-backwards-compatible changes appear.\n\na lot of time is spent waiting around for ``make`` and the c utilities (which need to reparse all the\nkconfig files for each defconfig test). adding some multiprocessing to the test suite would make sense\ntoo.\n\nnotes\n-----\n\n* this is version 2 of kconfiglib, which is not backwards-compatible with\n  kconfiglib 1. a summary of changes between kconfiglib 1 and kconfiglib\n  2 can be found `here\n  <https://github.com/ulfalizer/kconfiglib/blob/screenshots/kconfiglib-2-changes.txt>`__.\n\n* i sometimes see people add custom output formats, which is pretty\n  straightforward to do (see the implementations of ``write_autoconf()`` and\n  ``write_config()`` for a template, and also the documentation of the\n  ``symbol.config_string`` property). if you come up with something you think\n  might be useful to other people, i'm happy to take it in upstream. batteries\n  included and all that.\n\n* kconfiglib assumes the modules symbol is ``modules``, which is backwards-compatible.\n  a warning is printed by default if ``option modules`` is set on some other symbol.\n\n  let me know if you need proper ``option modules`` support. it wouldn't be that\n  hard to add.\n\nthanks\n------\n\n- to `romavis <https://github.com/romavis>`_, for making\n  `pymenuconfig <https://github.com/romavis/pymenuconfig>`_ and suggesting\n  the ``rsource`` keyword.\n\n- to `mitja horvat <https://github.com/pinkfluid>`_, for adding support\n  for user-defined styles to the terminal menuconfig.\n\n- to `philip craig <https://github.com/philipc>`_ for adding\n  support for the ``allnoconfig_y`` option and fixing an obscure issue\n  with ``comment``\\s inside ``choice``\\s (that didn't affect correctness but\n  made outputs differ). ``allnoconfig_y`` is used to force certain symbols\n  to ``y`` during ``make allnoconfig`` to improve coverage.\n\nlicense\n-------\n\nsee `license.txt <https://github.com/ulfalizer/kconfiglib/blob/master/license.txt>`_. spdx license identifiers are used in the\nsource code.\n\n\n",
  "docs_url": null,
  "keywords": "kconfig,kbuild,menuconfig,configuration-management",
  "license": "isc",
  "name": "kconfiglib",
  "package_url": "https://pypi.org/project/kconfiglib/",
  "project_url": "https://pypi.org/project/kconfiglib/",
  "project_urls": {
    "Examples": "https://github.com/ulfalizer/Kconfiglib/tree/master/examples",
    "GitHub repository": "https://github.com/ulfalizer/Kconfiglib",
    "Homepage": "https://github.com/ulfalizer/Kconfiglib"
  },
  "release_url": "https://pypi.org/project/kconfiglib/14.1.0/",
  "requires_dist": [],
  "requires_python": ">=2.7,!=3.0.*,!=3.1.*",
  "summary": "a flexible python kconfig implementation",
  "version": "14.1.0",
  "releases": [],
  "developers": [
    "ulf",
    "ulfalizer@gmail.com"
  ],
  "kwds": "kconfig_warn_undef_assign kconfig_warn_undef kconfig_config kconfig_new kconfig_strict",
  "license_kwds": "isc",
  "libtype": "pypi",
  "id": "pypi_kconfiglib",
  "homepage": "https://github.com/ulfalizer/kconfiglib",
  "release_count": 163,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# actions for aws iot rule\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis library contains integration classes to send data to any number of\nsupported aws services. instances of these classes should be passed to\n`topicrule` defined in `@aws-cdk/aws-iot`.\n\ncurrently supported are:\n\n* republish a message to another mqtt topic\n* invoke a lambda function\n* put objects to a s3 bucket\n* put logs to cloudwatch logs\n* capture cloudwatch metrics\n* change state for a cloudwatch alarm\n* put records to kinesis data stream\n* put records to kinesis data firehose stream\n* send messages to sqs queues\n* publish messages on sns topics\n\n## republish a message to another mqtt topic\n\nthe code snippet below creates an aws iot rule that republish a message to\nanother mqtt topic when it is triggered.\n\n```python\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, timestamp() as timestamp, temperature from 'device/+/data'\"),\n    actions=[\n        actions.iotrepublishmqttaction(\"${topic()}/republish\",\n            quality_of_service=actions.mqttqualityofservice.at_least_once\n        )\n    ]\n)\n```\n\n## invoke a lambda function\n\nthe code snippet below creates an aws iot rule that invoke a lambda function\nwhen it is triggered.\n\n```python\nfunc = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"\"\"\n            exports.handler = (event) => {\n              console.log(\"it is test for lambda action of aws iot rule.\", event);\n            };\"\"\")\n)\n\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, timestamp() as timestamp, temperature from 'device/+/data'\"),\n    actions=[actions.lambdafunctionaction(func)]\n)\n```\n\n## put objects to a s3 bucket\n\nthe code snippet below creates an aws iot rule that put objects to a s3 bucket\nwhen it is triggered.\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\n\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id from 'device/+/data'\"),\n    actions=[actions.s3putobjectaction(bucket)]\n)\n```\n\nthe property `key` of `s3putobjectaction` is given the value `${topic()}/${timestamp()}` by default. this `${topic()}`\nand `${timestamp()}` is called substitution templates. for more information see\n[this documentation](https://docs.aws.amazon.com/iot/latest/developerguide/iot-substitution-templates.html).\nin above sample, `${topic()}` is replaced by a given mqtt topic as `device/001/data`. and `${timestamp()}` is replaced\nby the number of the current timestamp in milliseconds as `1636289461203`. so if the mqtt broker receives an mqtt topic\n`device/001/data` on `2021-11-07t00:00:00.000z`, the s3 bucket object will be put to `device/001/data/1636243200000`.\n\nyou can also set specific `key` as following:\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\n\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, year, month, day from 'device/+/data'\"),\n    actions=[\n        actions.s3putobjectaction(bucket,\n            key=\"${year}/${month}/${day}/${topic(2)}\"\n        )\n    ]\n)\n```\n\nif you wanna set access control to the s3 bucket object, you can specify `accesscontrol` as following:\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\n\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select * from 'device/+/data'\"),\n    actions=[\n        actions.s3putobjectaction(bucket,\n            access_control=s3.bucketaccesscontrol.public_read\n        )\n    ]\n)\n```\n\n## put logs to cloudwatch logs\n\nthe code snippet below creates an aws iot rule that put logs to cloudwatch logs\nwhen it is triggered.\n\n```python\nimport aws_cdk.aws_logs as logs\n\n\nlog_group = logs.loggroup(self, \"myloggroup\")\n\niot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id from 'device/+/data'\"),\n    actions=[actions.cloudwatchlogsaction(log_group)]\n)\n```\n\n## capture cloudwatch metrics\n\nthe code snippet below creates an aws iot rule that capture cloudwatch metrics\nwhen it is triggered.\n\n```python\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, namespace, unit, value, timestamp from 'device/+/data'\"),\n    actions=[\n        actions.cloudwatchputmetricaction(\n            metric_name=\"${topic(2)}\",\n            metric_namespace=\"${namespace}\",\n            metric_unit=\"${unit}\",\n            metric_value=\"${value}\",\n            metric_timestamp=\"${timestamp}\"\n        )\n    ]\n)\n```\n\n## change the state of an amazon cloudwatch alarm\n\nthe code snippet below creates an aws iot rule that changes the state of an amazon cloudwatch alarm when it is triggered:\n\n```python\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nmetric = cloudwatch.metric(\n    namespace=\"mynamespace\",\n    metric_name=\"mymetric\",\n    dimensions={\"mydimension\": \"mydimensionvalue\"}\n)\nalarm = cloudwatch.alarm(self, \"myalarm\",\n    metric=metric,\n    threshold=100,\n    evaluation_periods=3,\n    datapoints_to_alarm=2\n)\n\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id from 'device/+/data'\"),\n    actions=[\n        actions.cloudwatchsetalarmstateaction(alarm,\n            reason=\"aws iot rule action is triggered\",\n            alarm_state_to_set=cloudwatch.alarmstate.alarm\n        )\n    ]\n)\n```\n\n## put records to kinesis data stream\n\nthe code snippet below creates an aws iot rule that put records to kinesis data\nstream when it is triggered.\n\n```python\nimport aws_cdk.aws_kinesis as kinesis\n\n\nstream = kinesis.stream(self, \"mystream\")\n\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select * from 'device/+/data'\"),\n    actions=[\n        actions.kinesisputrecordaction(stream,\n            partition_key=\"${newuuid()}\"\n        )\n    ]\n)\n```\n\n## put records to kinesis data firehose stream\n\nthe code snippet below creates an aws iot rule that put records to put records\nto kinesis data firehose stream when it is triggered.\n\n```python\nimport aws_cdk.aws_kinesisfirehose as firehose\nimport aws_cdk.aws_kinesisfirehose_destinations as destinations\n\n\nbucket = s3.bucket(self, \"mybucket\")\nstream = firehose.deliverystream(self, \"mystream\",\n    destinations=[destinations.s3bucket(bucket)]\n)\n\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select * from 'device/+/data'\"),\n    actions=[\n        actions.firehoseputrecordaction(stream,\n            batch_mode=true,\n            record_separator=actions.firehoserecordseparator.newline\n        )\n    ]\n)\n```\n\n## send messages to an sqs queue\n\nthe code snippet below creates an aws iot rule that send messages\nto an sqs queue when it is triggered:\n\n```python\nimport aws_cdk.aws_sqs as sqs\n\n\nqueue = sqs.queue(self, \"myqueue\")\n\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, year, month, day from 'device/+/data'\"),\n    actions=[\n        actions.sqsqueueaction(queue,\n            use_base64=true\n        )\n    ]\n)\n```\n\n## publish messages on an sns topic\n\nthe code snippet below creates and aws iot rule that publishes messages to an sns topic when it is triggered:\n\n```python\nimport aws_cdk.aws_sns as sns\n\n\ntopic = sns.topic(self, \"mytopic\")\n\ntopic_rule = iot.topicrule(self, \"topicrule\",\n    sql=iot.iotsql.from_string_as_ver20160323(\"select topic(2) as device_id, year, month, day from 'device/+/data'\"),\n    actions=[\n        actions.snstopicaction(topic,\n            message_format=actions.snsactionmessageformat.json\n        )\n    ]\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-iot-actions",
  "package_url": "https://pypi.org/project/aws-cdk.aws-iot-actions/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-iot-actions/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-iot-actions/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-iot (==1.204.0)",
    "aws-cdk.aws-kinesis (==1.204.0)",
    "aws-cdk.aws-kinesisfirehose (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "receipt rule actions for aws iot",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_kinesis aws_cloudwatch aws_sqs aws",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_iot_actions",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 86,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_iot",
    "pypi_aws_cdk.aws_kinesis",
    "pypi_aws_cdk.aws_kinesisfirehose",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
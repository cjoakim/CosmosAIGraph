{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "pykqml\n======\n\npykqml is an implementation of kqml messaging in python.\n\ninstallation\n============\n\npykqml can be installed as\n\n::\n\n    pip install pykqml\n\nnote that releases of pykqml up to 0.5 work in python 2 only, whereas\nreleases above and including 1.0 work in python 3 only.\n\nto install for python 2, use:\n\n::\n\n    pip install pykqml==0.5\n\nto install for python 3 (or force an upgrade to a compatible version),\nuse\n\n::\n\n    pip install \"pykqml>0.5\"\n\nusage\n=====\n\npykqml implements the following kqml classes, which allow constructing\nand manipulating kqml messages programmatically:\n\n::\n\n    kqmltoken\n    kqmlstring\n    kqmlquotation\n    kqmllist\n    kqmlperformative\n    kqmlreader\n    kqmldispatcher\n    kqmlmodule\n\nyou can import kqml classes as, for instance,\n\n.. code:: python\n\n    from kqml import kqmllist\n\nyou can create a new kqml messaging agent in the context of the trips\nsystem as\n\n.. code:: python\n\n    from kqml import kqmlmodule\n\n    class myagent(kqmlmodule):\n        name = \"myagent\" # this is the name of the agent to register with\n\n        def __init__(self, **kwargs):\n            # call the parent class' constructor which sends a registration\n            # message, setting the agent's name to be recognized by the\n            # facilitator.\n            super(myagent, self).__init__(name=self.name, **kwargs)\n\n            # subscribe to requests of interest. the list will change\n            # depending on the role of the agent\n            for req in ('what-next', 'commit', 'evaluate'):\n                self.subscribe_request(req)\n\n            # subscribe to tells of interest if needed. this list will change\n            # depending on the role of the agent\n            for tell in ('log-speechact', ):\n                self.subscribe_tell(tell)\n\n            # now signal that the agent is ready to receive messages\n            self.ready()\n\n            # finally, start the listener for incoming messages\n            self.start()\n\n\n        def receive_request(self, msg, content):\n            # first, figure out what kind of request this is\n            task = content.head().upper()\n            # here you typically decide what to do based on the\n            # type of request.\n\n            # construct reply message's content\n            reply_content = kqmllist()\n            # set whatever needs to be set in the reply content\n\n            # finally, wrap the content in a message and reply\n            reply_msg = kqmlperformative('reply')\n            reply_msg.set('content', reply_content)\n            self.reply(msg, reply_msg)\n\ntesting\n=======\n\nyou can run all tests by running `nosetests` in the top level folder.\n\n\n",
  "docs_url": null,
  "keywords": "kqml,agent,nlp,communication,dialogue",
  "license": "",
  "name": "pykqml",
  "package_url": "https://pypi.org/project/pykqml/",
  "project_url": "https://pypi.org/project/pykqml/",
  "project_urls": {
    "Homepage": "http://github.com/bgyori/pykqml"
  },
  "release_url": "https://pypi.org/project/pykqml/1.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "kqml messaging classes in python.",
  "version": "1.3",
  "releases": [],
  "developers": [
    "benjamin_gyori@hms.harvard.edu",
    "benjamin_m"
  ],
  "kwds": "pykqml kqmldispatcher kqmlmodule kqmlreader kqml",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pykqml",
  "homepage": "http://github.com/bgyori/pykqml",
  "release_count": 7,
  "dependency_ids": []
}
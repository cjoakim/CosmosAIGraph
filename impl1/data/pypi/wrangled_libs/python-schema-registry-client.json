{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "# python rest client schema registry\n\n[![python package](https://github.com/marcosschroh/python-schema-registry-client/actions/workflows/python-package.yml/badge.svg)](https://github.com/marcosschroh/python-schema-registry-client/actions/workflows/python-package.yml)\n[![github license](https://img.shields.io/github/license/marcosschroh/python-schema-registry-client.svg)](https://github.com/marcosschroh/python-schema-registry-client/blob/master/license)\n[![codecov](https://codecov.io/gh/marcosschroh/python-schema-registry-client/branch/master/graph/badge.svg)](https://codecov.io/gh/marcosschroh/python-schema-registry-client)\n[![python version](https://img.shields.io/badge/python-3.7+-blue.svg)](https://img.shields.io/badge/python-3.7+-blue.svg)\n\npython rest client to interact against [schema-registry](https://docs.confluent.io/current/schema-registry/index.html) confluent server to manage [avro](https://docs.oracle.com/database/nosql-12.1.3.1/gettingstartedguide/avroschemas.html) and [json](https://json-schema.org/) schemas resources.\n\n## requirements\n\npython 3.8+\n\n## installation\n\n```bash\npip install python-schema-registry-client\n```\n\nif you want the `faust` functionality:\n\n```bash\npip install python-schema-registry-client[faust]\n```\n\nnote that this will automatically add a dependency on the [faust-streaming](https://github.com/faust-streaming/faust) fork of faust. if you want to use the\nold faust version, simply install it manually and then install `python-schema-registry-client` without the `faust` extra enabled, the functionality will\nbe the same.\n\n## client api, serializer, faust integration and schema server description\n\n**documentation**: [https://marcosschroh.github.io/python-schema-registry-client.io](https://marcosschroh.github.io/python-schema-registry-client)\n\n## avro schema usage\n\n```python\nfrom schema_registry.client import schemaregistryclient, schema\n\nclient = schemaregistryclient(url=\"http://127.0.0.1:8081\")\n\ndeployment_schema = {\n    \"type\": \"record\",\n    \"namespace\": \"com.kubertenes\",\n    \"name\": \"avrodeployment\",\n    \"fields\": [\n        {\"name\": \"image\", \"type\": \"string\"},\n        {\"name\": \"replicas\", \"type\": \"int\"},\n        {\"name\": \"port\", \"type\": \"int\"},\n    ],\n}\n\navro_schema = schema.avroschema(deployment_schema)\n\nschema_id = client.register(\"test-deployment\", avro_schema)\n```\n\nor async\n\n```python\nfrom schema_registry.client import asyncschemaregistryclient, schema\n\nasync_client = asyncschemaregistryclient(url=\"http://127.0.0.1:8081\")\n\ndeployment_schema = {\n    \"type\": \"record\",\n    \"namespace\": \"com.kubertenes\",\n    \"name\": \"avrodeployment\",\n    \"fields\": [\n        {\"name\": \"image\", \"type\": \"string\"},\n        {\"name\": \"replicas\", \"type\": \"int\"},\n        {\"name\": \"port\", \"type\": \"int\"},\n    ],\n}\n\navro_schema = schema.avroschema(deployment_schema)\n\nschema_id = await async_client.register(\"test-deployment\", avro_schema)\n```\n\n## json schema usage\n\n```python\nfrom schema_registry.client import schemaregistryclient, schema\n\nclient = schemaregistryclient(url=\"http://127.0.0.1:8081\")\n\ndeployment_schema = {\n    \"definitions\" : {\n        \"jsondeployment\" : {\n            \"type\" : \"object\",\n            \"required\" : [\"image\", \"replicas\", \"port\"],\n            \"properties\" : {\n                \"image\" :       {\"type\" : \"string\"},\n                \"replicas\" :    {\"type\" : \"integer\"},\n                \"port\" :        {\"type\" : \"integer\"}\n            }\n        }\n    },\n    \"$ref\" : \"#/definitions/jsondeployment\"\n}\n\njson_schema = schema.jsonschema(deployment_schema)\n\nschema_id = client.register(\"test-deployment\", json_schema)\n```\n\nor async\n\n```python\nfrom schema_registry.client import asyncschemaregistryclient, schema\n\nasync_client = asyncschemaregistryclient(url=\"http://127.0.0.1:8081\")\n\ndeployment_schema = {\n    \"definitions\" : {\n        \"jsondeployment\" : {\n            \"type\" : \"object\",\n            \"required\" : [\"image\", \"replicas\", \"port\"],\n            \"properties\" : {\n                \"image\" :       {\"type\" : \"string\"},\n                \"replicas\" :    {\"type\" : \"integer\"},\n                \"port\" :        {\"type\" : \"integer\"}\n            }\n        }\n    },\n    \"$ref\" : \"#/definitions/jsondeployment\"\n}\n\njson_schema = schema.jsonschema(deployment_schema)\n\nschema_id = await async_client.register(\"test-deployment\", json_schema)\n```\n\n## usage with dataclasses-avroschema for avro schemas\n\nyou can generate the `avro schema` directely from a python class using [dataclasses-avroschema](https://github.com/marcosschroh/dataclasses-avroschema)\nand use it in the api for `register schemas`, `check versions` and `test compatibility`:\n\n```python\nimport dataclasses\n\nfrom dataclasses_avroschema import avromodel, types\n\nfrom schema_registry.client import schemaregistryclient\n\nclient = schemaregistryclient(url=\"http://127.0.0.1:8081\")\n\n\n@dataclasses.dataclass\nclass useradvance(avromodel):\n    name: str\n    age: int\n    pets: typing.list[str] = dataclasses.field(default_factory=lambda: [\"dog\", \"cat\"])\n    accounts: typing.dict[str, int] = dataclasses.field(default_factory=lambda: {\"key\": 1})\n    has_car: bool = false\n    favorite_colors: types.enum = types.enum([\"blue\", \"yellow\", \"green\"], default=\"blue\")\n    country: str = \"argentina\"\n    address: str = none\n\n# register the schema\nschema_id = client.register(subject, useradvance.avro_schema())\n\nprint(schema_id)\n# >>> 12\n\nresult = client.check_version(subject, useradvance.avro_schema())\nprint(result)\n# >>> schemaversion(subject='dataclasses-avroschema-subject-2', schema_id=12, schema=1, version={\"type\":\"record\" ...')\n\ncompatibility = client.test_compatibility(subject, useradvance.avro_schema())\nprint(compatibility)\n\n# >>> true\n```\n\n### usage with pydantic for json schemas\nyou can generate the json schema directely from a python class using pydantic and use it in the api for register schemas, check versions and test compatibility:\n\n```python\nimport typing\n\nfrom enum import enum\n\nfrom pydantic import basemodel\n\nfrom schema_registry.client import schemaregistryclient\n\nclient = schemaregistryclient(url=\"http://127.0.0.1:8081\")\n\nclass colorenum(str, enum):\n  blue = \"blue\"\n  yellow = \"yellow\"\n  green = \"green\"\n\n\nclass useradvance(basemodel):\n    name: str\n    age: int\n    pets: typing.list[str] = [\"dog\", \"cat\"]\n    accounts: typing.dict[str, int] = {\"key\": 1}\n    has_car: bool = false\n    favorite_colors: colorenum = colorenum.blue\n    country: str = \"argentina\"\n    address: str = none\n\n# register the schema\nschema_id = client.register(subject, useradvance.schema_json(), schema_type=\"json\")\n\nprint(schema_id)\n# >>> 12\n\nresult = client.check_version(subject, useradvance.schema_json(), schema_type=\"json\")\nprint(result)\n# >>> schemaversion(subject='pydantic-jsonschema-subject', schema_id=12, schema=1, version=<schema_registry.client.schema.jsonschema object at 0x7f40354550a0>)\n\ncompatibility = client.test_compatibility(subject, useradvance.schema_json(), schema_type=\"json\")\nprint(compatibility)\n\n# >>> true\n```\n\n## serializers\n\nyou can use `avromessageserializer` to encode/decode messages in `avro`\n\n```python\nfrom schema_registry.client import schemaregistryclient, schema\nfrom schema_registry.serializers import avromessageserializer\n\n\nclient = schemaregistryclient(\"http://127.0.0.1:8081\")\navro_message_serializer = avromessageserializer(client)\n\navro_user_schema = schema.avroschema({\n    \"type\": \"record\",\n    \"namespace\": \"com.example\",\n    \"name\": \"avrousers\",\n    \"fields\": [\n        {\"name\": \"first_name\", \"type\": \"string\"},\n        {\"name\": \"last_name\", \"type\": \"string\"},\n        {\"name\": \"age\", \"type\": \"int\"},\n\n    ],\n})\n\n# we want to encode the user_record with avro_user_schema\nuser_record = {\n    \"first_name\": \"my_first_name\",\n    \"last_name\": \"my_last_name\",\n    \"age\": 20,\n}\n\n# encode the record\nmessage_encoded = avro_message_serializer.encode_record_with_schema(\n    \"user\", avro_user_schema, user_record)\n\nprint(message_encoded)\n# >>> b'\\x00\\x00\\x00\\x00\\x01\\x1amy_first_name\\x18my_last_name('\n```\n\nor with `json schemas`\n\n```python\nfrom schema_registry.client import schemaregistryclient, schema\nfrom schema_registry.serializers import jsonmessageserializer\n\n\nclient = schemaregistryclient(\"http://127.0.0.1:8081\")\njson_message_serializer = jsonmessageserializer(client)\n\njson_schema = schema.jsonschema({\n  \"definitions\" : {\n    \"record:python.test.basic.basic\" : {\n      \"description\" : \"basic schema for tests\",\n      \"type\" : \"object\",\n      \"required\" : [ \"number\", \"name\" ],\n      \"properties\" : {\n        \"number\" : {\n          \"oneof\" : [ {\n            \"type\" : \"integer\"\n          }, {\n            \"type\" : \"null\"\n          } ]\n        },\n        \"name\" : {\n          \"oneof\" : [ {\n            \"type\" : \"string\"\n          } ]\n        }\n      }\n    }\n  },\n  \"$ref\" : \"#/definitions/record:python.test.basic.basic\"\n})\n\n# encode the record\nbasic_record = {\n    \"number\": 10,\n    \"name\": \"a_name\",\n}\n\nmessage_encoded = json_message_serializer.encode_record_with_schema(\n    \"basic\", json_schema, basic_record)\n\nprint(message_encoded)\n# >>> b'\\x00\\x00\\x00\\x00\\x02{\"number\": 10, \"name\": \"a_name\"}'\n```\n\n## when use this library\n\nusually, we have a situation like this:\n\n![confluent architecture](docs/img/confluent_architecture.png)\n\nso, our producers/consumers have to serialize/deserialize messages every time that they send/receive from kafka topics. in this picture, we can imagine a `faust` application receiving messages (encoded with an avro schema) and we want to deserialize them, so we can ask the `schema server` to do that for us. in this scenario, the `messageserializer` is perfect.\n\nalso, could be a use case that we would like to have an application only to administrate `avro schemas` (register, update compatibilities, delete old schemas, etc.), so the `schemaregistryclient` is perfect.\n\n## development\n\n[poetry](https://python-poetry.org/docs/) is needed to install the dependencies and develope locally\n\n1. install dependencies: `poetry install --all-extras`\n2. code linting: `./scripts/format`\n3. run tests: `./scripts/test`\n\nfor commit messages we use [commitizen](https://commitizen-tools.github.io/commitizen/) in order to standardize a way of committing rules\n\n*note*: the tests are run against the `schema server` using `docker compose`, so you will need\n`docker` and `docker compose` installed.\n\nin a terminal run `docker-compose up`. then in a different terminal run the tests:\n\n```bash\n./scripts/test\n```\n\nall additional args will be passed to pytest, for example:\n\n```bash\n./scripts/test ./tests/client/\n```\n\n### tests usind the python shell\n\nto perform tests using the python shell you can run the project using `docker-compose`.\n\n1. execute `docker-compose up`. then, the `schema registry server` will run on `http://127.0.0.1:8081`, then you can interact against it using the `schemaregistryclient`:\n1. use the python interpreter (get a python shell typing `python` in your command line)\n1. play with the `schema server`\n\n```python\nfrom schema_registry.client import schemaregistryclient, schema\n\nclient = schemaregistryclient(url=\"http://127.0.0.1:8081\")\n\n# do some operations with the client...\ndeployment_schema = {\n    \"type\": \"record\",\n    \"namespace\": \"com.kubertenes\",\n    \"name\": \"avrodeployment\",\n    \"fields\": [\n        {\"name\": \"image\", \"type\": \"string\"},\n        {\"name\": \"replicas\", \"type\": \"int\"},\n        {\"name\": \"port\", \"type\": \"int\"},\n    ],\n}\n\navro_schema = schema.avroschema(deployment_schema)\nclient.register(\"test-deployment\", avro_schema)\n# >>>> out[5]: 1\n```\n\nthen, you can check the schema using your browser going to the url `http://127.0.0.1:8081/schemas/ids/1`\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "python-schema-registry-client",
  "package_url": "https://pypi.org/project/python-schema-registry-client/",
  "project_url": "https://pypi.org/project/python-schema-registry-client/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/python-schema-registry-client/2.5.2/",
  "requires_dist": [
    "fastavro (>=1.7.3,<2.0.0)",
    "jsonschema (>=4.17.3,<5.0.0)",
    "httpx (>=0.24.0,<0.25.0)",
    "aiofiles (>=23.1.0,<24.0.0)",
    "faust-streaming (>=0.10.11,<0.11.0) ; extra == \"faust\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "python rest client to interact against schema registry confluent server",
  "version": "2.5.2",
  "releases": [],
  "developers": [
    "marcos_schroh",
    "schrohm@gmail.com"
  ],
  "kwds": "schema_registry deployment_schema schemaregistryclient schemaversion documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_schema_registry_client",
  "homepage": "",
  "release_count": 62,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_fastavro",
    "pypi_faust_streaming",
    "pypi_httpx",
    "pypi_jsonschema"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.4",
    "programming language :: python :: 2.5",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3"
  ],
  "description": "cronexpression\n==============\n\nthis module provides an easy to use interface for cron-like task\nscheduling. the cron expression evaluation implemented by this library\nis 100% vixie cron compatible and also supports `java\nquartz's <http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger>`__\nnon-standard \"l\", \"w\" and \"#\" characters.\n\none other useful feature this library provides is the ability to set\ntriggers at arbitrary intervals such as every 9 hours, every 11 minutes,\netc., without the issues caused by using asterisk-slash notation; using\n``*/9`` in the hours field of most cron implementations would result in\na trigger firing at 9:xx am at 6:xx pm each day, but with\ncronexpresssions, the trigger would fire at 9:xx am, 6:xx pm then, on\nthe following day 3:xx am, 12:xx pm, 9:xx pm and so.\n\nexamples\n--------\n\nstandard cron fields\n~~~~~~~~~~~~~~~~~~~~\n\nthis example shows basic instantiation of a cronexpression and how to\ncheck to see if a trigger should fire at a given time. the time tuples\nconsist of the year, month, date, hour and minute in that order.\n\n::\n\n    >>> job = cronexpression(\"0 0 * * 1-5/2 find /var/log -delete\")\n    >>> job.check_trigger((2010, 11, 17, 0, 0))\n    true\n    >>> job.check_trigger((2012, 12, 21, 0 , 0))\n    false\n\nperiodic trigger\n~~~~~~~~~~~~~~~~\n\nthis trigger is a reminder to feed the kitten every 9 hours starting\nfrom may 1st, 2010 at 7 am, gmt -6:00.\n\n::\n\n    >>> job = cronexpression(\"0 %9 * * * feed kitten\", (2010, 5, 1, 7, 0, -6))\n    >>> job.comment\n    \"feed kitten\"\n    >>> job.check_trigger((2010, 5, 1, 7, 0), utc_offset=-6)\n    true\n    >>> job.check_trigger((2010, 5, 1, 16, 0), utc_offset=-6)\n    true\n    >>> job.check_trigger((2010, 5, 2, 1, 0), utc_offset=-6)\n    true\n\nsimple cron scheduler in less than ten lines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwith cronexpressions, a very basic task scheduler can be created with\nonly a handful of lines.\n\n::\n\n    import time\n    import os\n    import cronex\n\n    while true:\n        for line in open(\"crontab\"):\n            job = cronex.cronexpression(line.strip())\n\n            if job.check_trigger(time.gmtime(time.time())[:5]):\n                os.system(\"(\" + job.comment + \") & disown\")\n\n        time.sleep(60)\n\nexpression syntax\n-----------------\n\nreaders that are already familiar with cron should skip down to the\nsection titled *repeaters*. aside from the repeaters, the only other\nnotable difference in this implementation of cron expression evaluation\nfrom vixie cron's is that ranges wrap around: 22-2 in the hours field is\nthe same as ``22,23,0,1,2``. everything else is standard\n``man 5 crontab``.\n\neach cron trigger is specified with a combination of five white-space\nseparated fields that dictate when the event should occur. in order the\nfields specify trigger times for minutes past the hour, hour of the day,\nday of the month, month, and day of the week.\n\n::\n\n    .--------------- minute (0 - 59)\n    |   .------------ hour (0 - 23)\n    |   |   .--------- day of month (1 - 31)\n    |   |   |   .------ month (1 - 12) or jan, feb ... dec\n    |   |   |   |  .---- day of week (0 - 6) or sun(0 or 7), mon(1) ... sat(6)\n    v   v   v   v  v\n    *   *   *   *  *  command to be executed / trigger comment\n\nthere are four ways of specifying valid values for each field, all of\nwhich can be combined with each other using commas. there are ranges,\nwild-cards, steps, and repeaters. repeaters are a non-standard addition\nto cron expressions that allow specification of events with arbitrary\nperiods.\n\nif the hour, minute, and month of a given time period are valid values\nas specified in the trigger and *either* the day of the month *or* the\nday of the week is a valid value, the trigger fires.\n\nranges and wild-cards\n~~~~~~~~~~~~~~~~~~~~~\n\nranges specify a starting and ending time period. it includes all values\nfrom the starting value to and including the ending value.\n\nwild-cards, indicated with a \"\\*\", in a field represents all valid\nvalues. it is *almost* the same as specifying the range 0-59 in the\nminutes field, 0-23 in the hours, 1-31 in days, 1-12 in months and 0-6\nfor weekdays.\n\nthe following cron expression is triggered every day at noon from june\nthrough september:\n\n::\n\n    0 12 * 6-9 * * remind \"walk the ducks\"\n\nif the day of the week field is a wild card, but the day of the month is\nan explicit range, the day of the week will be ignored and the trigger\nwill only be activated on the specified days of the month. if the day of\nthe month is a wild card, the same principal applies.\n\nthis expression is triggered every week day at 4:00 pm: ``0 16 * * 1-5``\n\nthis one is triggered the first nine days of the month: ``0 16 1-9 * *``\n\nthis one is triggered every day for the first week, but only on\nsaturdays thereafter: ``0 16 1-7 * 6``\n\nsteps\n~~~~~\n\nsteps are specified with a \"/\" and number following a range or\nwild-card. when iterating through a range with a step, the specified\nnumber of values will be skipped each time. ``1-10/2`` is the functional\nequivalent to ``1,3,5,7,9``.\n\nthe following cron expression is triggered on the first day of every\nquarter (jan., apr., ... oct.) at midnight:\n\n::\n\n    0 0 1 */2 * * delete log.txt\n\nrepeaters\n~~~~~~~~~\n\nrepeaters cause an event to trigger after arbitrary periods of time from\na given moment which will be hitherto referred to as the epoch. by\ndefault, the epoch is january 1st, 1970 at 0:00. triggers in different\nfields operate independently of each other: ``%10 %10 * * *`` would\ntrigger at 00:00, 00:10, ... 00:50, 10:00, 10:10, etc...\n\nthe following cron expression is triggered at noon on the 10th every 5\nmonths:\n\n::\n\n    0 12 10 %5 * something amazing happens at noon...\n\nspecial symbols\n~~~~~~~~~~~~~~~\n\nthere are three additional special symbols: \"l\", \"w\" and \"#\".\n\nwhen used in the day of the month field, a number followed by \"l\"\nrepresents the occurrence of a day of the week represented by the value\npreceding \"l\". in the day of the month field, \"l\" without a prefixed\ninteger represents the last day of the month. ``0 0 * * 5l`` represent a\nmidnight trigger for the last friday of each month whereas ``0 0 l 2 *``\nrepresents a midnight trigger for the last day of every february.\n\n\"w\" is only valid for the field representing days of the month, and must\nbe prefixed with an integer. it specifies the weekday (monday-friday)\nnearest the given day. in the construct ``0 0 7w * *``, when the 7th\nfalls on a saturday, the trigger will be active on the 6th. if the 7th\nfalls on a sunday, the trigger will be active on the 8th.\n\n\"#\" is only valid for the field representing days of the week. the \"#\"\nhas a prefix and suffix that represent the day of the week and the nth\noccurrence of that day of the week. ``0 0 * * 0#5`` would trigger every\n5th sunday.\n\nmiscellaneous\n~~~~~~~~~~~~~\n\nall of the constructs above can be combined in individual fields using\ncommas: ``0,30 */7,5 1,%90,l 9-4/6,5-8 4#2`` is a completely valid,\nalbeit it hideous, expression.\n\nin addition to the atoms above, there are several special strings that\ncan substitute common cron expressions. these strings *replace*, not\naugment the cron fields.\n\n::\n\n    string      equivalent\n    ------      ----------\n    @yearly     0 0 1 1 *\n    @annually   0 0 1 1 *\n    @monthly    0 0 1 * *\n    @weekly     0 0 * * 0\n    @daily      0 0 * * *\n    @midnight   0 0 * * *\n    @hourly     0 * * * *\n",
  "docs_url": null,
  "keywords": "cron",
  "license": "mit",
  "name": "cronex",
  "package_url": "https://pypi.org/project/cronex/",
  "project_url": "https://pypi.org/project/cronex/",
  "project_urls": {
    "Homepage": "https://github.com/ericpruitt/cronex"
  },
  "release_url": "https://pypi.org/project/cronex/0.1.3.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "this module provides an easy to use interface for cron-like task scheduling.",
  "version": "0.1.3.1",
  "releases": [],
  "developers": [
    "eric.pruitt@gmail.com",
    "eric_pruitt"
  ],
  "kwds": "cron crontrigger crontab scheduler scheduling",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cronex",
  "homepage": "https://github.com/ericpruitt/cronex",
  "release_count": 5,
  "dependency_ids": []
}
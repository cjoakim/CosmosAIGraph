{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: security :: cryptography",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: networking"
  ],
  "description": ".. image:: https://readthedocs.org/projects/asyncssh/badge/?version=latest\n    :target: https://asyncssh.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n.. image:: https://img.shields.io/pypi/v/asyncssh.svg\n    :target: https://pypi.python.org/pypi/asyncssh/\n    :alt: asyncssh pypi project\n\n\nasyncssh: asynchronous ssh for python\n=====================================\n\nasyncssh is a python package which provides an asynchronous client and\nserver implementation of the sshv2 protocol on top of the python 3.6+\nasyncio framework.\n\n.. code:: python\n\n  import asyncio, asyncssh, sys\n\n  async def run_client():\n      async with asyncssh.connect('localhost') as conn:\n          result = await conn.run('echo \"hello!\"', check=true)\n          print(result.stdout, end='')\n\n  try:\n      asyncio.get_event_loop().run_until_complete(run_client())\n  except (oserror, asyncssh.error) as exc:\n      sys.exit('ssh connection failed: ' + str(exc))\n\ncheck out the `examples`__ to get started!\n\n__ http://asyncssh.readthedocs.io/en/stable/#client-examples\n\nfeatures\n--------\n\n* full support for sshv2, sftp, and scp client and server functions\n\n  * shell, command, and subsystem channels\n  * environment variables, terminal type, and window size\n  * direct and forwarded tcp/ip channels\n  * openssh-compatible direct and forwarded unix domain socket channels\n  * local and remote tcp/ip port forwarding\n  * local and remote unix domain socket forwarding\n  * dynamic tcp/ip port forwarding via socks\n  * x11 forwarding support on both the client and the server\n  * sftp protocol version 3 with openssh extensions\n\n    * experimental support for sftp versions 4-6, when requested\n\n  * scp protocol support, including third-party remote to remote copies\n\n* multiple simultaneous sessions on a single ssh connection\n* multiple ssh connections in a single event loop\n* byte and string based i/o with settable encoding\n* a variety of `key exchange`__, `encryption`__, and `mac`__ algorithms\n\n  * including openssh post-quantum kex algorithm\n    sntrup761x25519-sha512\\@openssh.com\n\n* support for `gzip compression`__\n\n  * including openssh variant to delay compression until after auth\n\n* user and host-based public key, password, and keyboard-interactive\n  authentication methods\n\n* many types and formats of `public keys and certificates`__\n\n  * including openssh-compatible support for u2f and fido2 security keys\n  * including pkcs#11 support for accessing piv security tokens\n  * including support for x.509 certificates as defined in rfc 6187\n\n* support for accessing keys managed by `ssh-agent`__ on unix systems\n\n  * including agent forwarding support on both the client and the server\n\n* support for accessing keys managed by putty's pageant agent on windows\n* support for accessing host keys via openssh's ssh-keysign\n* openssh-style `known_hosts file`__ support\n* openssh-style `authorized_keys file`__ support\n* partial support for `openssh-style configuration files`__\n* compatibility with openssh \"encrypt then mac\" option for better security\n* time and byte-count based session key renegotiation\n* designed to be easy to extend to support new forms of key exchange,\n  authentication, encryption, and compression algorithms\n\n__ http://asyncssh.readthedocs.io/en/stable/api.html#key-exchange-algorithms\n__ http://asyncssh.readthedocs.io/en/stable/api.html#encryption-algorithms\n__ http://asyncssh.readthedocs.io/en/stable/api.html#mac-algorithms\n__ http://asyncssh.readthedocs.io/en/stable/api.html#compression-algorithms\n__ http://asyncssh.readthedocs.io/en/stable/api.html#public-key-support\n__ http://asyncssh.readthedocs.io/en/stable/api.html#ssh-agent-support\n__ http://asyncssh.readthedocs.io/en/stable/api.html#known-hosts\n__ http://asyncssh.readthedocs.io/en/stable/api.html#authorized-keys\n__ http://asyncssh.readthedocs.io/en/stable/api.html#config-file-support\n\nlicense\n-------\n\nthis package is released under the following terms:\n\n  copyright (c) 2013-2022 by ron frederick <ronf@timeheart.net> and others.\n\n  this program and the accompanying materials are made available under\n  the terms of the eclipse public license v2.0 which accompanies this\n  distribution and is available at:\n\n    http://www.eclipse.org/legal/epl-2.0/\n\n  this program may also be made available under the following secondary\n  licenses when the conditions for such availability set forth in the\n  eclipse public license v2.0 are satisfied:\n\n     gnu general public license, version 2.0, or any later versions of\n     that license\n\n  spdx-license-identifier: epl-2.0 or gpl-2.0-or-later\n\nfor more information about this license, please see the `eclipse\npublic license faq <https://www.eclipse.org/legal/epl-2.0/faq.php>`_.\n\nprerequisites\n-------------\n\nto use asyncssh 2.0 or later, you need the following:\n\n* python 3.6 or later\n* cryptography (pyca) 3.1 or later\n\ninstallation\n------------\n\ninstall asyncssh by running:\n\n  ::\n\n    pip install asyncssh\n\noptional extras\n^^^^^^^^^^^^^^^\n\nthere are some optional modules you can install to enable additional\nfunctionality:\n\n* install bcrypt from https://pypi.python.org/pypi/bcrypt\n  if you want support for openssh private key encryption.\n\n* install fido2 from https://pypi.org/project/fido2 if you want support\n  for key exchange and authentication with u2f/fido2 security keys.\n\n* install python-pkcs11 from https://pypi.org/project/python-pkcs11 if\n  you want support for accessing piv keys on pkcs#11 security tokens.\n\n* install gssapi from https://pypi.python.org/pypi/gssapi if you\n  want support for gssapi key exchange and authentication on unix.\n\n* install liboqs from https://github.com/open-quantum-safe/liboqs\n  if you want support for the openssh post-quantum key exchange\n  algorithm sntrup761x25519-sha512\\@openssh.com.\n\n* install libsodium from https://github.com/jedisct1/libsodium\n  and libnacl from https://pypi.python.org/pypi/libnacl if you have\n  a version of openssl older than 1.1.1b installed and you want\n  support for curve25519 key exchange, ed25519 keys and certificates,\n  or the chacha20-poly1305 cipher.\n\n* install libnettle from http://www.lysator.liu.se/~nisse/nettle/\n  if you want support for umac cryptographic hashes.\n\n* install pyopenssl from https://pypi.python.org/pypi/pyopenssl\n  if you want support for x.509 certificate authentication.\n\n* install pywin32 from https://pypi.python.org/pypi/pywin32 if you\n  want support for using the pageant agent or support for gssapi\n  key exchange and authentication on windows.\n\nasyncssh defines the following optional pypi extra packages to make it\neasy to install any or all of these dependencies:\n\n  | bcrypt\n  | fido2\n  | gssapi\n  | libnacl\n  | pkcs11\n  | pyopenssl\n  | pywin32\n\nfor example, to install bcrypt, fido2, gssapi, libnacl, pkcs11, and\npyopenssl on unix, you can run:\n\n  ::\n\n    pip install 'asyncssh[bcrypt,fido2,gssapi,libnacl,pkcs11,pyopenssl]'\n\nto install bcrypt, fido2, libnacl, pkcs11, pyopenssl, and pywin32 on\nwindows, you can run:\n\n  ::\n\n    pip install 'asyncssh[bcrypt,fido2,libnacl,pkcs11,pyopenssl,pywin32]'\n\nnote that you will still need to manually install the libsodium library\nlisted above for libnacl to work correctly and/or libnettle for umac\nsupport. unfortunately, since liboqs, libsodium, and libnettle are not\npython packages, they cannot be directly installed using pip.\n\ninstalling the development branch\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you would like to install the development branch of asyncssh directly\nfrom github, you can use the following command to do this:\n\n  ::\n\n      pip install git+https://github.com/ronf/asyncssh@develop\n\nmailing lists\n-------------\n\nthree mailing lists are available for asyncssh:\n\n* `asyncssh-announce@googlegroups.com`__: project announcements\n* `asyncssh-dev@googlegroups.com`__: development discussions\n* `asyncssh-users@googlegroups.com`__: end-user discussions\n\n__ http://groups.google.com/d/forum/asyncssh-announce\n__ http://groups.google.com/d/forum/asyncssh-dev\n__ http://groups.google.com/d/forum/asyncssh-users\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "eclipse public license v2.0",
  "name": "asyncssh",
  "package_url": "https://pypi.org/project/asyncssh/",
  "project_url": "https://pypi.org/project/asyncssh/",
  "project_urls": {
    "Documentation": "https://asyncssh.readthedocs.io",
    "Homepage": "http://asyncssh.timeheart.net",
    "Source": "https://github.com/ronf/asyncssh",
    "Tracker": "https://github.com/ronf/asyncssh/issues"
  },
  "release_url": "https://pypi.org/project/asyncssh/2.14.2/",
  "requires_dist": [
    "cryptography (>=39.0)",
    "typing-extensions (>=3.6)",
    "bcrypt (>=3.1.3) ; extra == 'bcrypt'",
    "fido2 (>=0.9.2) ; extra == 'fido2'",
    "gssapi (>=1.2.0) ; extra == 'gssapi'",
    "libnacl (>=1.4.2) ; extra == 'libnacl'",
    "python-pkcs11 (>=0.7.0) ; extra == 'pkcs11'",
    "pyOpenSSL (>=23.0.0) ; extra == 'pyopenssl'",
    "pywin32 (>=227) ; extra == 'pywin32'"
  ],
  "requires_python": ">= 3.6",
  "summary": "asyncssh: asynchronous sshv2 client and server library",
  "version": "2.14.2",
  "releases": [],
  "developers": [
    "ron_frederick",
    "ronf@timeheart.net"
  ],
  "kwds": "asyncssh asyncio async sshv2 openssh",
  "license_kwds": "eclipse public license v2.0",
  "libtype": "pypi",
  "id": "pypi_asyncssh",
  "homepage": "http://asyncssh.timeheart.net",
  "release_count": 80,
  "dependency_ids": [
    "pypi_bcrypt",
    "pypi_cryptography",
    "pypi_fido2",
    "pypi_gssapi",
    "pypi_libnacl",
    "pypi_pyopenssl",
    "pypi_python_pkcs11",
    "pypi_pywin32",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.7",
    "programming language :: sql",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# moz sql parser\n\nlet's make a sql parser so we can provide a familiar interface to non-sql datastores!\n\n\n|branch      |status   |\n|------------|---------|\n|master      | [![build status](https://travis-ci.org/klahnakoski/moz-sql-parser.svg?branch=master)](https://travis-ci.org/klahnakoski/moz-sql-parser) |\n|dev         | [![build status](https://travis-ci.org/klahnakoski/moz-sql-parser.svg?branch=dev)](https://travis-ci.org/klahnakoski/moz-sql-parser)    |\n\n\n## problem statement\n\nsql is a familiar language used to access databases. although, each database vendor has its quirky implementation, there is enough standardization that the average developer does not need to know of those quirks. this familiar core sql (lowest common denominator, if you will) is useful enough to explore data in primitive ways. it is hoped that, once programmers have reviewed a datastore with basic sql queries, and they see the value of that data, and they will be motivated to use the datastore's native query format.\n\n## objectives\n\nthe primary objective of this library is to convert sql queries to json-izable parse trees. this originally targeted mysql, but has grown to include other database vendors. *please [paste some sql into a new issue](https://github.com/klahnakoski/moz-sql-parser/issues) if it does not work for you*\n\n## non-objectives \n\n* no plans to provide update statements, like `update` or `insert`\n* no plans to provide data access tools \n\nit is my sincere hope you can convert the json into queries for your particular backend datastore  \n\n## project status\n\njan 2021 -there are [almost 500 tests](https://github.com/mozilla/moz-sql-parser/tree/dev/tests). this parser is good enough for basic usage, including inner queries, `with` clauses, and window functions.  there is still a lot missing to support bigquery and redshift queries.  \n\n## install\n\n    pip install moz-sql-parser\n\n## parsing sql\n\n    >>> from moz_sql_parser import parse\n    >>> import json\n    >>> json.dumps(parse(\"select count(1) from jobs\"))\n    '{\"select\": {\"value\": {\"count\": 1}}, \"from\": \"jobs\"}'\n    \neach sql query is parsed to an object: each clause is assigned to an object property of the same name. \n\n    >>> json.dumps(parse(\"select a as hello, b as world from jobs\"))\n    '{\"select\": [{\"value\": \"a\", \"name\": \"hello\"}, {\"value\": \"b\", \"name\": \"world\"}], \"from\": \"jobs\"}'\n\nthe `select` clause is an array of objects containing `name` and `value` properties. \n\n### recursion limit \n\npython's default recursion limit (1000) is not hit when parsing the test suite, but this may not be the case for large sql. you can increase the recursion limit before you `parse`:\n\n    >>> from moz_sql_parser import parse\n    >>> sys.setrecursionlimit(3000)\n    >>> parse(complicated_sql)\n\n\n## generating sql\n\nyou may also generate sql from the a given json document. this is done by the formatter, which is still incomplete (jan2020).\n\n    >>> from moz_sql_parser import format\n    >>> format({\"from\":\"test\", \"select\":[\"a.b\", \"c\"]})\n    'select a.b, c from test'\n\n## contributing\n\nin the event that the parser is not working for you, you can help make this better but simply pasting your sql (or json) into a new issue. extra points if you describe the problem. even more points if you submit a pr with a test.  if you also submit a fix, then you also have my gratitude. \n\n\n## run tests\n\nsee [the tests directory](https://github.com/mozilla/moz-sql-parser/tree/dev/tests) for instructions running tests, or writing new ones.\n\n## more about implementation\n\nsql queries are translated to json objects: each clause is assigned to an object property of the same name.\n\n    \n    # select * from dual where a>b order by a+b\n    {\n        \"select\": \"*\", \n        \"from\": \"dual\", \n        \"where\": {\"gt\": [\"a\", \"b\"]}, \n        \"orderby\": {\"value\": {\"add\": [\"a\", \"b\"]}}\n    }\n        \nexpressions are also objects, but with only one property: the name of the operation, and the value holding (an array of) parameters for that operation. \n\n    {op: parameters}\n\nand you can see this pattern in the previous example:\n\n    {\"gt\": [\"a\",\"b\"]}\n    \n## array programming\n\nthe `moz-sql-parser.scrub()` method is used liberally throughout the code, and it \"simplifies\" the json.  you may find this form a bit tedious to work with because the json property values can be values, lists of values, or missing.  please consider converting everything to arrays: \n\n\n```\ndef listwrap(value):\n    if value is none:\n        return []\n    elif isinstance(value, list)\n        return value\n    else:\n        return [value]\n```  \n\nthen you may avoid all the is-it-a-list checks :\n\n```\nfor select in listwrap(parsed_result.get('select')):\n    do_something(select)\n```\n\nyou may find it easier if all json expressions had a list of operands:\n\n```\ndef normalize(expression)\n    # ensure parameters are in a list\n    return {\n        op: params\n        for op, param = expression.items()\n        for params in [[normalize(p) for p in listwrap(param)]]\n    }\n```",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "moz-sql-parser",
  "package_url": "https://pypi.org/project/moz-sql-parser/",
  "project_url": "https://pypi.org/project/moz-sql-parser/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/moz-sql-parser"
  },
  "release_url": "https://pypi.org/project/moz-sql-parser/4.40.21126/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "extract parse tree from sql",
  "version": "4.40.21126",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "moz_sql_parser sql complicated_sql databases parser",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_moz_sql_parser",
  "homepage": "https://github.com/klahnakoski/moz-sql-parser",
  "release_count": 38,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "=======\n janus\n=======\n.. image:: https://github.com/aio-libs/janus/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/aio-libs/janus/actions/workflows/ci.yml\n.. image:: https://codecov.io/gh/aio-libs/janus/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/janus\n.. image:: https://img.shields.io/pypi/v/janus.svg\n    :target: https://pypi.python.org/pypi/janus\n.. image:: https://badges.gitter.im/join%20chat.svg\n    :target: https://gitter.im/aio-libs/lobby\n    :alt: chat on gitter\n\n\n\nmixed sync-async queue, supposed to be used for communicating between\nclassic synchronous (threaded) code and asynchronous (in terms of\nasyncio_) one.\n\nlike `janus god <https://en.wikipedia.org/wiki/janus>`_ the queue\nobject from the library has two faces: synchronous and asynchronous\ninterface.\n\nsynchronous is fully compatible with `standard queue\n<https://docs.python.org/3/library/queue.html>`_, asynchronous one\nfollows `asyncio queue design\n<https://docs.python.org/3/library/asyncio-queue.html>`_.\n\nusage example (python 3.7+)\n===========================\n\n.. code:: python\n\n    import asyncio\n    import janus\n\n\n    def threaded(sync_q: janus.syncqueue[int]) -> none:\n        for i in range(100):\n            sync_q.put(i)\n        sync_q.join()\n\n\n    async def async_coro(async_q: janus.asyncqueue[int]) -> none:\n        for i in range(100):\n            val = await async_q.get()\n            assert val == i\n            async_q.task_done()\n\n\n    async def main() -> none:\n        queue: janus.queue[int] = janus.queue()\n        loop = asyncio.get_running_loop()\n        fut = loop.run_in_executor(none, threaded, queue.sync_q)\n        await async_coro(queue.async_q)\n        await fut\n        queue.close()\n        await queue.wait_closed()\n\n\n    asyncio.run(main())\n\n\nusage example (python 3.5 and 3.6)\n==================================\n\n.. code:: python\n\n    import asyncio\n    import janus\n\n    loop = asyncio.get_event_loop()\n\n\n    def threaded(sync_q):\n        for i in range(100):\n            sync_q.put(i)\n        sync_q.join()\n\n\n    async def async_coro(async_q):\n        for i in range(100):\n            val = await async_q.get()\n            assert val == i\n            async_q.task_done()\n\n\n    async def main():\n        queue = janus.queue()\n        fut = loop.run_in_executor(none, threaded, queue.sync_q)\n        await async_coro(queue.async_q)\n        await fut\n        queue.close()\n        await queue.wait_closed()\n\n    try:\n        loop.run_until_complete(main())\n    finally:\n        loop.close()\n\n\ncommunication channels\n======================\n\ngithub discussions: https://github.com/aio-libs/janus/discussions\n\nfeel free to post your questions and ideas here.\n\n*gitter chat* https://gitter.im/aio-libs/lobby\n\n\nlicense\n=======\n\n``janus`` library is offered under apache 2 license.\n\nthanks\n======\n\nthe library development is sponsored by datarobot (https://datarobot.com)\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n\n\n",
  "docs_url": null,
  "keywords": "janus,queue,asyncio",
  "license": "apache 2",
  "name": "janus",
  "package_url": "https://pypi.org/project/janus/",
  "project_url": "https://pypi.org/project/janus/",
  "project_urls": {
    "CI: GitHub Actions": "https://github.com/aio-libs/janus/actions/workflows/ci.yml",
    "Chat: Gitter": "https://gitter.im/aio-libs/Lobby",
    "Coverage: codecov": "https://codecov.io/github/aio-libs/janus",
    "GitHub: issues": "https://github.com/aio-libs/janus/issues",
    "GitHub: repo": "https://github.com/aio-libs/janus",
    "Homepage": "https://github.com/aio-libs/janus"
  },
  "release_url": "https://pypi.org/project/janus/1.0.0/",
  "requires_dist": [
    "typing-extensions (>=3.7.4.3)"
  ],
  "requires_python": ">=3.7",
  "summary": "mixed sync-async queue to interoperate between asyncio tasks and classic threads",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "andrew.svetlov@gmail.com"
  ],
  "kwds": "badges badge queue aio workflows",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_janus",
  "homepage": "https://github.com/aio-libs/janus",
  "release_count": 18,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "sensitivity analysis library (salib)\n====================================\n\npython implementations of commonly used sensitivity analysis methods.\nuseful in systems modeling to calculate the effects of model inputs or\nexogenous factors on outputs of interest.\n\n**documentation:** `readthedocs <http://salib.readthedocs.org>`__\n\n**requirements:** `numpy <http://www.numpy.org/>`__,\n`scipy <http://www.scipy.org/>`__,\n`matplotlib <http://matplotlib.org/>`__,\n`pandas <http://https://pandas.pydata.org/>`__,\npython 3 (from salib v1.2 onwards salib does not officially support python 2)\n\n**installation:** ``pip install salib`` or ``pip install .`` or ``conda install salib``\n\n**build status:** |build status| **test coverage:** |coverage status|\n\nincluded methods\n----------------\n\n* sobol sensitivity analysis (`sobol 2001 <http://www.sciencedirect.com/science/article/pii/s0378475400002706>`__,\n  `saltelli 2002 <http://www.sciencedirect.com/science/article/pii/s0010465502002801>`__,\n  `saltelli et al. 2010 <http://www.sciencedirect.com/science/article/pii/s0010465509003087>`__)\n\n* method of morris, including groups and optimal trajectories (`morris\n  1991 <http://www.tandfonline.com/doi/abs/10.1080/00401706.1991.10484804>`__,\n  `campolongo et al. 2007 <http://www.sciencedirect.com/science/article/pii/s1364815206002805>`__,\n  `ruano et al. 2012 <https://doi.org/10.1016/j.envsoft.2012.03.008>`__)\n\n* extended fourier amplitude sensitivity test (efast) (`cukier et al. 1973 <http://scitation.aip.org/content/aip/journal/jcp/59/8/10.1063/1.1680571>`__,\n  `saltelli et al. 1999 <http://amstat.tandfonline.com/doi/abs/10.1080/00401706.1999.10485594>`__, `pujol (2006) in iooss et al., (2021) <http://scitation.aip.org/content/aip/journal/jcp/59/8/10.1063/1.1680571>`__)\n\n* random balance designs - fourier amplitude sensitivity test (rbd-fast) (`tarantola et al. 2006 <https://hal.archives-ouvertes.fr/hal-01065897/file/tarantola06ress_hal.pdf>`__,\n  `plischke 2010 <https://doi.org/10.1016/j.ress.2009.11.005>`__,\n  `tissot et al. 2012 <https://doi.org/10.1016/j.ress.2012.06.010>`__)\n\n* delta\n  moment-independent measure (`borgonovo 2007 <http://www.sciencedirect.com/science/article/pii/s0951832006000883>`__,\n  `plischke et al. 2013 <http://www.sciencedirect.com/science/article/pii/s0377221712008995>`__)\n\n* derivative-based global sensitivity measure (dgsm) (`sobol and\n  kucherenko 2009 <http://www.sciencedirect.com/science/article/pii/s0378475409000354>`__)\n\n* fractional factorial sensitivity analysis\n  (`saltelli et al. 2008 <http://www.wiley.com/wileycda/wileytitle/productcd-0470059974.html>`__)\n\n* high-dimensional model representation (hdmr)\n  (`rabitz et al. 1999 <https://doi.org/10.1016/s0010-4655(98)00152-0>`__, `li et al. 2010 <https://doi.org/10.1021/jp9096919>`__)\n\n* pawn (`pianosi and wagener 2018 <10.1016/j.envsoft.2018.07.019>`__, `pianosi and wagener 2015 <https://doi.org/10.1016/j.envsoft.2015.01.004>`__)\n\n\n**contributing:** see `here <contributing.md>`__\n\nquick start\n-----------\n\nprocedural approach\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from salib.sample import saltelli\n    from salib.analyze import sobol\n    from salib.test_functions import ishigami\n    import numpy as np\n\n    problem = {\n      'num_vars': 3,\n      'names': ['x1', 'x2', 'x3'],\n      'bounds': [[-np.pi, np.pi]]*3\n    }\n\n    # generate samples\n    param_values = saltelli.sample(problem, 1024)\n\n    # run model (example)\n    y = ishigami.evaluate(param_values)\n\n    # perform analysis\n    si = sobol.analyze(problem, y, print_to_console=true)\n    # returns a dictionary with keys 's1', 's1_conf', 'st', and 'st_conf'\n    # (first and total-order indices with bootstrap confidence intervals)\n\nit's also possible to specify the parameter bounds in a file with 3\ncolumns:\n\n::\n\n    # name lower_bound upper_bound\n    p1 0.0 1.0\n    p2 0.0 5.0\n    ...etc.\n\nthen the ``problem`` dictionary above can be created from the\n``read_param_file`` function:\n\n.. code:: python\n\n    from salib.util import read_param_file\n    problem = read_param_file('/path/to/file.txt')\n    # ... same as above\n\nlots of other options are included for parameter files, as well as a\ncommand-line interface. see the `advanced\nsection in the documentation <https://salib.readthedocs.io/en/latest/advanced.html>`__.\n\n\nmethod chaining approach\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nchaining calls is supported from salib v1.4\n\n.. code:: python\n\n    from salib import problemspec\n    from salib.test_functions import ishigami\n\n    import numpy as np\n\n\n    # by convention, we assign to \"sp\" (for \"salib problem\")\n    sp = problemspec({\n      'names': ['x1', 'x2', 'x3'],   # name of each parameter\n      'bounds': [[-np.pi, np.pi]]*3,  # bounds of each parameter\n      'outputs': ['y']               # name of outputs in expected order\n    })\n\n    (sp.sample_saltelli(1024, calc_second_order=true)\n       .evaluate(ishigami.evaluate)\n       .analyze_sobol(print_to_console=true))\n\n    print(sp)\n\n    # samples, model results and analyses can be extracted:\n    print(sp.samples)\n    print(sp.results)\n    print(sp.analysis)\n\n    # basic plotting functionality is also provided\n    sp.plot()\n\n\nthe above is equivalent to the procedural approach shown previously.\n\nalso check out the `faq <https://github.com/salib/salib/tree/main/faq.md>`__ and\n`examples <https://github.com/salib/salib/tree/main/examples>`__ for a\nfull description of options for each method.\n\n\nhow to cite salib\n-----------------\n\nif you would like to use our software, please cite it using the following:\n\n    iwanaga, t., usher, w., & herman, j. (2022).\n    toward salib 2.0: advancing the accessibility and interpretability of global sensitivity analyses.\n    socio-environmental systems modelling, 4, 18155.\n    doi:10.18174/sesmo.18155\n\n    herman, j. and usher, w. (2017) salib: an open-source python library for\n    sensitivity analysis. journal of open source software, 2(9).\n    doi:10.21105/joss.00097\n\n|paper status|\n\nif you use bibtex, cite using the following entries::\n\n    @article{iwanaga2022,\n      title = {toward {salib} 2.0: {advancing} the accessibility and interpretability of global sensitivity analyses},\n      volume = {4},\n      url = {https://sesmo.org/article/view/18155},\n      doi = {10.18174/sesmo.18155},\n      journal = {socio-environmental systems modelling},\n      author = {iwanaga, takuya and usher, william and herman, jonathan},\n      month = may,\n      year = {2022},\n      pages = {18155},\n    }\n\n    @article{herman2017,\n      doi = {10.21105/joss.00097},\n      url = {https://doi.org/10.21105/joss.00097},\n      year  = {2017},\n      month = {jan},\n      publisher = {the open journal},\n      volume = {2},\n      number = {9},\n      author = {jon herman and will usher},\n      title = {{salib}: an open-source python library for sensitivity analysis},\n      journal = {the journal of open source software}\n    }\n\n\nprojects that use salib\n-----------------------\n\nmany projects now use the global sensitivity analysis features provided by\nsalib. here is a selection:\n\nsoftware\n~~~~~~~~\n\n* `the city energy analyst <https://github.com/architecture-building-systems/ceaforarcgis>`_\n* `pynoddy <https://github.com/flohorovicic/pynoddy>`_\n* `savvy <https://github.com/houghb/savvy>`_\n* `rhodium <https://github.com/project-platypus/rhodium>`_\n* `pysur <https://github.com/mastenspace/pysur>`_\n* `ema workbench <https://github.com/quaquel/emaworkbench>`_\n* `brain/circulation model developer <https://github.com/bcmd/bcmd>`_\n* `dae tools <http://daetools.com/>`_\n* `agentpy <https://github.com/joelforamitti/agentpy>`_\n* `uncertainpy <https://github.com/simetenn/uncertainpy>`_\n* `climada <https://github.com/climada-project/climada_python>`_\n\nblogs\n~~~~~\n\n* `sensitivity analyis in python <http://www.perrygeo.com/sensitivity-analysis-in-python.html>`_\n* `sensitivity analysis with salib <http://keyboardscientist.weebly.com/blog/sensitivity-analysis-with-salib>`_\n* `running sobol using salib <https://waterprogramming.wordpress.com/2013/08/05/running-sobol-sensitivity-analysis-using-salib/>`_\n* `extensions of salib for more complex sensitivity analyses <https://waterprogramming.wordpress.com/2014/02/11/extensions-of-salib-for-more-complex-sensitivity-analyses/>`_\n\nvideos\n~~~~~~\n\n* `pydata presentation on salib <https://youtu.be/gkr_lz5optu>`_\n\nif you would like to be added to this list, please submit a pull request,\nor create an issue.\n\nmany thanks for using salib.\n\n\nhow to contribute\n-----------------\n\nsee `here <contributing.md>`__ for how to contribute to salib.\n\n\nlicense\n-------\n\ncopyright (c) 2012-2019 jon herman, will usher, and others. versions v0.5 and\nlater are released under the `mit license <license.md>`__.\n\n.. |build status| image:: https://travis-ci.com/salib/salib.svg?branch=master\n   :target: https://travis-ci.com/salib/salib\n.. |coverage status| image:: https://img.shields.io/coveralls/salib/salib.svg\n   :target: https://coveralls.io/r/salib/salib\n.. |code issues| image:: https://www.quantifiedcode.com/api/v1/project/ed62e70f899e4ec8af4ea6b2212d4b30/badge.svg\n   :target: https://www.quantifiedcode.com/app/project/ed62e70f899e4ec8af4ea6b2212d4b30\n.. |paper status| image:: http://joss.theoj.org/papers/431262803744581c1d4b6a95892d3343/status.svg\n   :target: http://joss.theoj.org/papers/431262803744581c1d4b6a95892d3343\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "salib",
  "package_url": "https://pypi.org/project/SALib/",
  "project_url": "https://pypi.org/project/SALib/",
  "project_urls": {
    "Documentation": "https://salib.readthedocs.io",
    "Source code": "https://github.com/SALib/SALib"
  },
  "release_url": "https://pypi.org/project/SALib/1.4.7/",
  "requires_dist": [
    "matplotlib>=3.2.2",
    "multiprocess",
    "numpy>=1.20.3",
    "pandas>=1.1.2",
    "scipy>=1.7.3",
    "hatch; extra == 'dev'",
    "pre-commit; extra == 'dev'",
    "salib[distributed]; extra == 'dev'",
    "salib[doc]; extra == 'dev'",
    "salib[test]; extra == 'dev'",
    "pathos>=0.2.5; extra == 'distributed'",
    "myst-parser; extra == 'doc'",
    "numpydoc; extra == 'doc'",
    "pydata-sphinx-theme>=0.10; extra == 'doc'",
    "sphinx; extra == 'doc'",
    "pytest; extra == 'test'",
    "pytest-cov; extra == 'test'",
    "salib[distributed]; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "tools for global sensitivity analysis. contains sobol', morris, fast, dgsm, pawn, hdmr, moment independent and fractional factorial methods",
  "version": "1.4.7",
  "releases": [],
  "developers": [
    "jdherman8@gmail.com",
    "salib_contributors",
    "will_usher"
  ],
  "kwds": "sensitivity matplotlib numpy scipy modelling",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_salib",
  "homepage": "",
  "release_count": 46,
  "dependency_ids": [
    "pypi_hatch",
    "pypi_matplotlib",
    "pypi_multiprocess",
    "pypi_myst_parser",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_pandas",
    "pypi_pathos",
    "pypi_pre_commit",
    "pypi_pydata_sphinx_theme",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_salib",
    "pypi_scipy",
    "pypi_sphinx"
  ]
}
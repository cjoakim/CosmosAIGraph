{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development",
    "topic :: software development :: libraries"
  ],
  "description": "\n==================\ndjango classy tags\n==================\n\n|pypi| |build| |coverage|\n\nthe goal of this project is to create a new way of writing django template tags\nwhich is fully compatible with the current django templating infrastructure.\nthis new way should be easy, clean and require as little boilerplate code as\npossible while still staying as powerful as possible. some features:\n\n* class based template tags.\n* template tag argument parser.\n* declarative way to define arguments.\n* supports (theoretically infinite) parse-until blocks.\n* extensible!\n\n\n.. note:: \n\n    this project is considered 3rd party (no supervision by the `django cms association <https://www.django-cms.org/en/about-us/>`_). join us on `slack                 <https://www.django-cms.org/slack/>`_ for more information.\n\n\n*******************************************\ncontribute to this project and win rewards\n*******************************************\n\nbecause this is a an open-source project, we welcome everyone to\n`get involved in the project <https://www.django-cms.org/en/contribute/>`_ and\n`receive a reward <https://www.django-cms.org/en/bounty-program/>`_ for their contribution. \nbecome part of a fantastic community and help us make django cms the best cms in the world.   \n\nwe'll be delighted to receive your\nfeedback in the form of issues and pull requests. before submitting your\npull request, please review our `contribution guidelines\n<http://docs.django-cms.org/en/latest/contributing/index.html>`_.\n\nwe're grateful to all contributors who have helped create and maintain this package.\ncontributors are listed at the `contributors <https://github.com/django-cms/django-classy-tags/graphs/contributors>`_\nsection.\n\n\ndocumentation\n=============\n\nsee ``requirements`` in the `setup.py <https://github.com/divio/django-classy-tags/blob/master/setup.py>`_\nfile for additional dependencies:\n\n|python| |django|\n\nplease refer to the documentation in the docs/ directory for more information or visit our\n`online documentation <https://django-classy-tags.readthedocs.io>`_.\n\n\nexample\n-------\n\nthis is how a tag looks like using django-classy-tags:\n\n.. code-block:: python\n\n    from classytags.core import options\n    from classytags.helpers import astag\n    from classytags.arguments import argument\n    from django import template\n\n    register = template.library()\n\n    class hello(astag):\n        options = options(\n            argument('name', required=false, default='world'),\n            'as',\n            argument('varname', required=false, resolve=false)\n        )\n\n        def get_value(self, context, name):\n            return 'hello %s' % name\n\n    register.tag(hello)\n\nthat's your standard *hello world* example. which can be used like this:\n\n* ``{% hello %}``: outputs ``hello world``\n* ``{% hello \"classytags\" %}``: outputs ``hello classytags``\n* ``{% hello as myvar %}``: outputs nothing but stores ``hello world`` into the\n  template variable ``myvar``.\n* ``{% hello \"my friend\" as othervar %}``: outputs nothing but stores\n  ``hello my friend`` into the template variable ``othervar``.\n\n\nrunning tests\n-------------\n\nyou can run tests by executing::\n\n    virtualenv env\n    source env/bin/activate\n    pip install -r tests/requirements.txt\n    python setup.py test\n\n\n.. |pypi| image:: https://badge.fury.io/py/django-classy-tags.svg\n    :target: http://badge.fury.io/py/django-classy-tags\n.. |build| image:: https://travis-ci.org/divio/django-classy-tags.svg?branch=master\n    :target: https://travis-ci.org/divio/django-classy-tags\n.. |coverage| image:: https://codecov.io/gh/divio/django-classy-tags/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/divio/django-classy-tags\n\n.. |python| image:: https://img.shields.io/badge/python-3.7+-blue.svg\n    :target: https://pypi.org/project/django-classy-tags/\n.. |django| image:: https://img.shields.io/badge/django-3.2,%204.0,%204.0-blue.svg\n    :target: https://www.djangoproject.com/\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "django-classy-tags",
  "package_url": "https://pypi.org/project/django-classy-tags/",
  "project_url": "https://pypi.org/project/django-classy-tags/",
  "project_urls": {
    "Homepage": "https://github.com/django-cms/django-classy-tags"
  },
  "release_url": "https://pypi.org/project/django-classy-tags/4.1.0/",
  "requires_dist": [
    "django (>=3.2)"
  ],
  "requires_python": ">=3.8",
  "summary": "class based template tags for django",
  "version": "4.1.0",
  "releases": [],
  "developers": [
    "django_cms_association_and_contributors",
    "info@django-cms.org",
    "jonas_obrist",
    "ojiidotch@gmail.com"
  ],
  "kwds": "djangoproject django template templating boilerplate",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_django_classy_tags",
  "homepage": "https://github.com/django-cms/django-classy-tags",
  "release_count": 33,
  "dependency_ids": [
    "pypi_django"
  ]
}
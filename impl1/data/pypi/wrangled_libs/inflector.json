{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# inflector for python\n\nthe inflector is used for getting the plural and singular form of nouns. this piece of code helps on creating code that favors convention over configuration.\n\nonly english and spanish nouns are supported. the english version is a port of ruby on rails inflector, while the spanish version has been developed from scratch with the help of carles sadurn\u00ed.\n\napart from converting singulars and plurals, this module also handles necessary string conversion for convention based applications like:\n\navailable methods are:\n\n## pluralize(word)\n\npluralizes nouns.\n\n## singularize(word)\n\nsingularizes nouns.\n\n## conditionalplural(numer_of_records, word)\n\nreturns the plural form of a word if first parameter is greater than 1\n\n## titleize(word, uppercase = '')\n\nconverts an underscored or camelcase word into a sentence.\nthe titleize function converts text like \"welcomepage\",\n\"welcome_page\" or  \"welcome page\" to this \"welcome page\".\nif the \"uppercase\" parameter is set to 'first' it will only\ncapitalize the first character of the title.\n\n## camelize(word):\n\nreturns given word as camelcased\nconverts a word like \"send_email\" to \"sendemail\". it\nwill remove non alphanumeric character from the word, so\n\"who's online\" will be converted to \"whosonline\"\n\n## underscore(word)\n\nconverts a word \"into_it_s_underscored_version\"\nconvert any \"camelcased\" or \"ordinary word\" into an\n\"underscored_word\".\nthis can be really useful for creating friendly urls.\n\n## humanize(word, uppercase = '')\n\nreturns a human-readable string from word\nreturns a human-readable string from word, by replacing\nunderscores with a space, and by upper-casing the initial\ncharacter by default.\nif you need to uppercase all the words you just have to\npass 'all' as a second parameter.\n\n\n## variablize(word)\n\nsame as camelize but first char is lowercased\nconverts a word like \"send_email\" to \"sendemail\". it\nwill remove non alphanumeric character from the word, so\n\"who's online\" will be converted to \"whosonline\"\nreturn self.inflector.variablize(word)\n\n## tableize(class_name)\n\nconverts a class name to its table name according to rails\nnaming conventions. example. converts \"person\" to \"people\" \n\n## classify(table_name)\n\nconverts a table name to its class name according to rails\nnaming conventions. example: converts \"people\" to \"person\" \n\n## ordinalize(number)\nconverts number to its ordinal form.\nthis method converts 13 to 13th, 2 to 2nd ...\n\n## unaccent(text)\n\ntransforms a string to its unaccented version. \nthis might be useful for generating \"friendly\" urls\n\n## urlize(text)\n\ntransform a string its unaccented and underscored\nversion ready to be inserted in friendly urls\n\n## foreignkey(class_name, separate_class_name_and_id_with_underscore = 1)\n\nreturns class_name in underscored form, with \"_id\" tacked on at the end. \nthis is for use in dealing with the database.\n",
  "docs_url": null,
  "keywords": "inflector text language english",
  "license": "",
  "name": "inflector",
  "package_url": "https://pypi.org/project/Inflector/",
  "project_url": "https://pypi.org/project/Inflector/",
  "project_urls": {
    "Homepage": "https://github.com/ixmatus/inflector"
  },
  "release_url": "https://pypi.org/project/Inflector/3.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "inflector for python",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "parnell@digitalmentat.com",
    "parnell_springmeyer"
  ],
  "kwds": "underscored_word pluralize inflector pluralizes capitalize",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_inflector",
  "homepage": "https://github.com/ixmatus/inflector",
  "release_count": 21,
  "dependency_ids": []
}
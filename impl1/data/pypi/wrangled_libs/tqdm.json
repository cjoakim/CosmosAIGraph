{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: other environment",
    "environment :: win32 (ms windows)",
    "environment :: x11 applications",
    "framework :: ipython",
    "framework :: jupyter",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: other audience",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "operating system :: macos",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: ms-dos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: ironpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: unix shell",
    "topic :: desktop environment",
    "topic :: education :: computer aided instruction (cai)",
    "topic :: education :: testing",
    "topic :: office/business",
    "topic :: other/nonlisted topic",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: pre-processors",
    "topic :: software development :: user interfaces",
    "topic :: system :: installation/setup",
    "topic :: system :: logging",
    "topic :: system :: monitoring",
    "topic :: system :: shells",
    "topic :: terminals",
    "topic :: utilities"
  ],
  "description": "|logo|\n\ntqdm\n====\n\n|py-versions| |versions| |conda-forge-status| |docker| |snapcraft|\n\n|build-status| |coverage-status| |branch-coverage-status| |codacy-grade| |libraries-rank| |pypi-downloads|\n\n|licence| |openhub-status| |binder-demo| |awesome-python|\n\n``tqdm`` derives from the arabic word *taqaddum* (\u062a\u0642\u062f\u0651\u0645) which can mean \"progress,\"\nand is an abbreviation for \"i love you so much\" in spanish (*te quiero demasiado*).\n\ninstantly make your loops show a smart progress meter - just wrap any\niterable with ``tqdm(iterable)``, and you're done!\n\n.. code:: python\n\n    from tqdm import tqdm\n    for i in tqdm(range(10000)):\n        ...\n\n``76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 | 7568/10000 [00:33<00:10, 229.00it/s]``\n\n``trange(n)`` can be also used as a convenient shortcut for\n``tqdm(range(n))``.\n\n|screenshot|\n    |video| |slides| |merch|\n\nit can also be executed as a module with pipes:\n\n.. code:: sh\n\n    $ seq 9999999 | tqdm --bytes | wc -l\n    75.2mb [00:00, 217mb/s]\n    9999999\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n        > backup.tgz\n     32%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                      | 8.89g/27.9g [00:42<01:31, 223mb/s]\n\noverhead is low -- about 60ns per iteration (80ns with ``tqdm.gui``), and is\nunit tested against performance regression.\nby comparison, the well-established\n`progressbar <https://github.com/niltonvolpato/python-progressbar>`__ has\nan 800ns/iter overhead.\n\nin addition to its low overhead, ``tqdm`` uses smart algorithms to predict\nthe remaining time and to skip unnecessary iteration displays, which allows\nfor a negligible overhead in most cases.\n\n``tqdm`` works on any platform\n(linux, windows, mac, freebsd, netbsd, solaris/sunos),\nin any console or in a gui, and is also friendly with ipython/jupyter notebooks.\n\n``tqdm`` does not require any dependencies (not even ``curses``!), just\npython and an environment supporting ``carriage return \\r`` and\n``line feed \\n`` control characters.\n\n------------------------------------------\n\n.. contents:: table of contents\n   :backlinks: top\n   :local:\n\n\ninstallation\n------------\n\nlatest pypi stable release\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|versions| |pypi-downloads| |libraries-dependents|\n\n.. code:: sh\n\n    pip install tqdm\n\nlatest development release on github\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|github-status| |github-stars| |github-commits| |github-forks| |github-updated|\n\npull and install pre-release ``devel`` branch:\n\n.. code:: sh\n\n    pip install \"git+https://github.com/tqdm/tqdm.git@devel#egg=tqdm\"\n\nlatest conda release\n~~~~~~~~~~~~~~~~~~~~\n\n|conda-forge-status|\n\n.. code:: sh\n\n    conda install -c conda-forge tqdm\n\nlatest snapcraft release\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n|snapcraft|\n\nthere are 3 channels to choose from:\n\n.. code:: sh\n\n    snap install tqdm  # implies --stable, i.e. latest tagged release\n    snap install tqdm  --candidate  # master branch\n    snap install tqdm  --edge  # devel branch\n\nnote that ``snap`` binaries are purely for cli use (not ``import``-able), and\nautomatically set up ``bash`` tab-completion.\n\nlatest docker release\n~~~~~~~~~~~~~~~~~~~~~\n\n|docker|\n\n.. code:: sh\n\n    docker pull tqdm/tqdm\n    docker run -i --rm tqdm/tqdm --help\n\nother\n~~~~~\n\nthere are other (unofficial) places where ``tqdm`` may be downloaded, particularly for cli use:\n\n|repology|\n\n.. |repology| image:: https://repology.org/badge/tiny-repos/python:tqdm.svg\n   :target: https://repology.org/project/python:tqdm/versions\n\nchangelog\n---------\n\nthe list of all changes is available either on github's releases:\n|github-status|, on the\n`wiki <https://github.com/tqdm/tqdm/wiki/releases>`__, or on the\n`website <https://tqdm.github.io/releases>`__.\n\n\nusage\n-----\n\n``tqdm`` is very versatile and can be used in a number of ways.\nthe three main ones are given below.\n\niterable-based\n~~~~~~~~~~~~~~\n\nwrap ``tqdm()`` around any iterable:\n\n.. code:: python\n\n    from tqdm import tqdm\n    from time import sleep\n\n    text = \"\"\n    for char in tqdm([\"a\", \"b\", \"c\", \"d\"]):\n        sleep(0.25)\n        text = text + char\n\n``trange(i)`` is a special optimised instance of ``tqdm(range(i))``:\n\n.. code:: python\n\n    from tqdm import trange\n\n    for i in trange(100):\n        sleep(0.01)\n\ninstantiation outside of the loop allows for manual control over ``tqdm()``:\n\n.. code:: python\n\n    pbar = tqdm([\"a\", \"b\", \"c\", \"d\"])\n    for char in pbar:\n        sleep(0.25)\n        pbar.set_description(\"processing %s\" % char)\n\nmanual\n~~~~~~\n\nmanual control of ``tqdm()`` updates using a ``with`` statement:\n\n.. code:: python\n\n    with tqdm(total=100) as pbar:\n        for i in range(10):\n            sleep(0.1)\n            pbar.update(10)\n\nif the optional variable ``total`` (or an iterable with ``len()``) is\nprovided, predictive stats are displayed.\n\n``with`` is also optional (you can just assign ``tqdm()`` to a variable,\nbut in this case don't forget to ``del`` or ``close()`` at the end:\n\n.. code:: python\n\n    pbar = tqdm(total=100)\n    for i in range(10):\n        sleep(0.1)\n        pbar.update(10)\n    pbar.close()\n\nmodule\n~~~~~~\n\nperhaps the most wonderful use of ``tqdm`` is in a script or on the command\nline. simply inserting ``tqdm`` (or ``python -m tqdm``) between pipes will pass\nthrough all ``stdin`` to ``stdout`` while printing progress to ``stderr``.\n\nthe example below demonstrate counting the number of lines in all python files\nin the current directory, with timing information included.\n\n.. code:: sh\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | wc -l\n    857365\n\n    real    0m3.458s\n    user    0m0.274s\n    sys     0m3.325s\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | tqdm | wc -l\n    857366it [00:03, 246471.31it/s]\n    857365\n\n    real    0m3.585s\n    user    0m0.862s\n    sys     0m3.358s\n\nnote that the usual arguments for ``tqdm`` can also be specified.\n\n.. code:: sh\n\n    $ find . -name '*.py' -type f -exec cat \\{} \\; |\n        tqdm --unit loc --unit_scale --total 857366 >> /dev/null\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 857k/857k [00:04<00:00, 246kloc/s]\n\nbacking up a large directory?\n\n.. code:: sh\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n      > backup.tgz\n     44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                   | 153m/352m [00:14<00:18, 11.0mb/s]\n\nthis can be beautified further:\n\n.. code:: sh\n\n    $ bytes=$(du -sb docs/ | cut -f1)\n    $ tar -cf - docs/ \\\n      | tqdm --bytes --total \"$bytes\" --desc processing | gzip \\\n      | tqdm --bytes --total \"$bytes\" --desc compressed --position 1 \\\n      > ~/backup.tgz\n    processing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 352m/352m [00:14<00:00, 30.2mb/s]\n    compressed:  42%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e            | 148m/352m [00:14<00:19, 10.9mb/s]\n\nor done on a file level using 7-zip:\n\n.. code:: sh\n\n    $ 7z a -bd -r backup.7z docs/ | grep compressing \\\n      | tqdm --total $(find docs/ -type f | wc -l) --unit files \\\n      | grep -v compressing\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 15327/15327 [01:00<00:00, 712.96files/s]\n\npre-existing cli programs already outputting basic progress information will\nbenefit from ``tqdm``'s ``--update`` and ``--update_to`` flags:\n\n.. code:: sh\n\n    $ seq 3 0.1 5 | tqdm --total 5 --update_to --null\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.0/5 [00:00<00:00, 9673.21it/s]\n    $ seq 10 | tqdm --update --null  # 1 + 2 + ... + 10 = 55 iterations\n    55it [00:00, 90006.52it/s]\n\nfaq and known issues\n--------------------\n\n|github-issues|\n\nthe most common issues relate to excessive output on multiple lines, instead\nof a neat one-line progress bar.\n\n- consoles in general: require support for carriage return (``cr``, ``\\r``).\n\n  * some cloud logging consoles which don't support ``\\r`` properly\n    (`cloudwatch <https://github.com/tqdm/tqdm/issues/966>`__,\n    `k8s <https://github.com/tqdm/tqdm/issues/1319>`__) may benefit from\n    ``export tqdm_position=-1``.\n\n- nested progress bars:\n\n  * consoles in general: require support for moving cursors up to the\n    previous line. for example,\n    `idle <https://github.com/tqdm/tqdm/issues/191#issuecomment-230168030>`__,\n    `conemu <https://github.com/tqdm/tqdm/issues/254>`__ and\n    `pycharm <https://github.com/tqdm/tqdm/issues/203>`__ (also\n    `here <https://github.com/tqdm/tqdm/issues/208>`__,\n    `here <https://github.com/tqdm/tqdm/issues/307>`__, and\n    `here <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__)\n    lack full support.\n  * windows: additionally may require the python module ``colorama``\n    to ensure nested bars stay within their respective lines.\n\n- unicode:\n\n  * environments which report that they support unicode will have solid smooth\n    progressbars. the fallback is an ``ascii``-only bar.\n  * windows consoles often only partially support unicode and thus\n    `often require explicit ascii=true <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__\n    (also `here <https://github.com/tqdm/tqdm/issues/499>`__). this is due to\n    either normal-width unicode characters being incorrectly displayed as\n    \"wide\", or some unicode characters not rendering.\n\n- wrapping generators:\n\n  * generator wrapper functions tend to hide the length of iterables.\n    ``tqdm`` does not.\n  * replace ``tqdm(enumerate(...))`` with ``enumerate(tqdm(...))`` or\n    ``tqdm(enumerate(x), total=len(x), ...)``.\n    the same applies to ``numpy.ndenumerate``.\n  * replace ``tqdm(zip(a, b))`` with ``zip(tqdm(a), b)`` or even\n    ``zip(tqdm(a), tqdm(b))``.\n  * the same applies to ``itertools``.\n  * some useful convenience functions can be found under ``tqdm.contrib``.\n\n- `no intermediate output in docker-compose <https://github.com/tqdm/tqdm/issues/771>`__:\n  use ``docker-compose run`` instead of ``docker-compose up`` and ``tty: true``.\n\n- overriding defaults via environment variables:\n  e.g. in ci/cloud jobs, ``export tqdm_mininterval=5`` to avoid log spam.\n  this override logic is handled by the ``tqdm.utils.envwrap`` decorator\n  (useful independent of ``tqdm``).\n\nif you come across any other difficulties, browse and file |github-issues|.\n\ndocumentation\n-------------\n\n|py-versions| |readme-hits| (since 19 may 2016)\n\n.. code:: python\n\n    class tqdm():\n      \"\"\"\n      decorate an iterable object, returning an iterator which acts exactly\n      like the original iterable, but prints a dynamically updating\n      progressbar every time a value is requested.\n      \"\"\"\n\n      @envwrap(\"tqdm_\")  # override defaults via env vars\n      def __init__(self, iterable=none, desc=none, total=none, leave=true,\n                   file=none, ncols=none, mininterval=0.1,\n                   maxinterval=10.0, miniters=none, ascii=none, disable=false,\n                   unit='it', unit_scale=false, dynamic_ncols=false,\n                   smoothing=0.3, bar_format=none, initial=0, position=none,\n                   postfix=none, unit_divisor=1000, write_bytes=false,\n                   lock_args=none, nrows=none, colour=none, delay=0):\n\nparameters\n~~~~~~~~~~\n\n* iterable  : iterable, optional  \n    iterable to decorate with a progressbar.\n    leave blank to manually manage the updates.\n* desc  : str, optional  \n    prefix for the progressbar.\n* total  : int or float, optional  \n    the number of expected iterations. if unspecified,\n    len(iterable) is used if possible. if float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no eta, no progressbar).\n    if ``gui`` is true and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\n* leave  : bool, optional  \n    if [default: true], keeps all traces of the progressbar\n    upon termination of iteration.\n    if ``none``, will leave only if ``position`` is ``0``.\n* file  : ``io.textiowrapper`` or ``io.stringio``, optional  \n    specifies where to output the progress messages\n    (default: sys.stderr). uses ``file.write(str)`` and ``file.flush()``\n    methods.  for encoding, see ``write_bytes``.\n* ncols  : int, optional  \n    the width of the entire output message. if specified,\n    dynamically resizes the progressbar to stay within this bound.\n    if unspecified, attempts to use environment width. the\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. if 0, will not print any meter (only stats).\n* mininterval  : float, optional  \n    minimum progress display update interval [default: 0.1] seconds.\n* maxinterval  : float, optional  \n    maximum progress display update interval [default: 10] seconds.\n    automatically adjusts ``miniters`` to correspond to ``mininterval``\n    after long display update lag. only works if ``dynamic_miniters``\n    or monitor thread is enabled.\n* miniters  : int or float, optional  \n    minimum progress display update interval, in iterations.\n    if 0 and ``dynamic_miniters``, will automatically adjust to equal\n    ``mininterval`` (more cpu efficient, good for tight loops).\n    if > 0, will skip display of specified number of iterations.\n    tweak this and ``mininterval`` to get very efficient loops.\n    if your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\n* ascii  : bool or str, optional  \n    if unspecified or false, use unicode (smooth blocks) to fill\n    the meter. the fallback is to use ascii characters \" 123456789#\".\n* disable  : bool, optional  \n    whether to disable the entire progressbar wrapper\n    [default: false]. if set to none, disable on non-tty.\n* unit  : str, optional  \n    string that will be used to define the unit of each iteration\n    [default: it].\n* unit_scale  : bool or int or float, optional  \n    if 1 or true, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    international system of units standard will be added\n    (kilo, mega, etc.) [default: false]. if any other non-zero\n    number, will scale ``total`` and ``n``.\n* dynamic_ncols  : bool, optional  \n    if set, constantly alters ``ncols`` and ``nrows`` to the\n    environment (allowing for window resizes) [default: false].\n* smoothing  : float, optional  \n    exponential moving average smoothing factor for speed estimates\n    (ignored in gui mode). ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\n* bar_format  : str, optional  \n    specify a custom bar string formatting. may impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n    '{rate_fmt}{postfix}]'\n    possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n    percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n    rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n    rate_inv, rate_inv_fmt, postfix, unit_divisor,\n    remaining, remaining_s, eta.\n    note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\n* initial  : int or float, optional  \n    the initial counter value. useful when restarting a progress\n    bar [default: 0]. if using float, consider specifying ``{n:.3f}``\n    or similar in ``bar_format``, or specifying ``unit_scale``.\n* position  : int, optional  \n    specify the line offset to print this bar (starting from 0)\n    automatic if unspecified.\n    useful to manage multiple bars at once (eg, from threads).\n* postfix  : dict or ``*``, optional  \n    specify additional stats to display at the end of the bar.\n    calls ``set_postfix(**postfix)`` if possible (dict).\n* unit_divisor  : float, optional  \n    [default: 1000], ignored unless ``unit_scale`` is true.\n* write_bytes  : bool, optional  \n    whether to write bytes. if (default: false) will write unicode.\n* lock_args  : tuple, optional  \n    passed to ``refresh`` for intermediate output\n    (initialisation, iterating, and updating).\n* nrows  : int, optional  \n    the screen height. if specified, hides nested bars outside this\n    bound. if unspecified, attempts to use environment height.\n    the fallback is 20.\n* colour  : str, optional  \n    bar colour (e.g. 'green', '#00ff00').\n* delay  : float, optional  \n    don't display until [default: 0] seconds have elapsed.\n\nextra cli options\n~~~~~~~~~~~~~~~~~\n\n* delim  : chr, optional  \n    delimiting character [default: '\\n']. use '\\0' for null.\n    n.b.: on windows systems, python converts '\\n' to '\\r\\n'.\n* buf_size  : int, optional  \n    string buffer size in bytes [default: 256]\n    used when ``delim`` is specified.\n* bytes  : bool, optional  \n    if true, will count bytes, ignore ``delim``, and default\n    ``unit_scale`` to true, ``unit_divisor`` to 1024, and ``unit`` to 'b'.\n* tee  : bool, optional  \n    if true, passes ``stdin`` to both ``stderr`` and ``stdout``.\n* update  : bool, optional  \n    if true, will treat input as newly elapsed iterations,\n    i.e. numbers to pass to ``update()``. note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* update_to  : bool, optional  \n    if true, will treat input as total elapsed iterations,\n    i.e. numbers to assign to ``self.n``. note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* null  : bool, optional  \n    if true, will discard input (no stdout).\n* manpath  : str, optional  \n    directory in which to install tqdm man pages.\n* comppath  : str, optional  \n    directory in which to place tqdm completion.\n* log  : str, optional  \n    critical|fatal|error|warn(ing)|[default: 'info']|debug|notset.\n\nreturns\n~~~~~~~\n\n* out  : decorated iterator.  \n\n.. code:: python\n\n    class tqdm():\n      def update(self, n=1):\n          \"\"\"\n          manually update the progress bar, useful for streams\n          such as reading files.\n          e.g.:\n          >>> t = tqdm(total=filesize) # initialise\n          >>> for current_buffer in stream:\n          ...    ...\n          ...    t.update(len(current_buffer))\n          >>> t.close()\n          the last line is highly recommended, but possibly not necessary if\n          ``t.update()`` will be called in such a way that ``filesize`` will be\n          exactly reached and printed.\n\n          parameters\n          ----------\n          n  : int or float, optional\n              increment to add to the internal counter of iterations\n              [default: 1]. if using float, consider specifying ``{n:.3f}``\n              or similar in ``bar_format``, or specifying ``unit_scale``.\n\n          returns\n          -------\n          out  : bool or none\n              true if a ``display()`` was triggered.\n          \"\"\"\n\n      def close(self):\n          \"\"\"cleanup and (if leave=false) close the progressbar.\"\"\"\n\n      def clear(self, nomove=false):\n          \"\"\"clear current bar display.\"\"\"\n\n      def refresh(self):\n          \"\"\"\n          force refresh the display of this bar.\n\n          parameters\n          ----------\n          nolock  : bool, optional\n              if ``true``, does not lock.\n              if [default: ``false``]: calls ``acquire()`` on internal lock.\n          lock_args  : tuple, optional\n              passed to internal lock's ``acquire()``.\n              if specified, will only ``display()`` if ``acquire()`` returns ``true``.\n          \"\"\"\n\n      def unpause(self):\n          \"\"\"restart tqdm timer from last print time.\"\"\"\n\n      def reset(self, total=none):\n          \"\"\"\n          resets to 0 iterations for repeated use.\n\n          consider combining with ``leave=true``.\n\n          parameters\n          ----------\n          total  : int or float, optional. total to use for the new bar.\n          \"\"\"\n\n      def set_description(self, desc=none, refresh=true):\n          \"\"\"\n          set/modify description of the progress bar.\n\n          parameters\n          ----------\n          desc  : str, optional\n          refresh  : bool, optional\n              forces refresh [default: true].\n          \"\"\"\n\n      def set_postfix(self, ordered_dict=none, refresh=true, **tqdm_kwargs):\n          \"\"\"\n          set/modify postfix (additional stats)\n          with automatic formatting based on datatype.\n\n          parameters\n          ----------\n          ordered_dict  : dict or ordereddict, optional\n          refresh  : bool, optional\n              forces refresh [default: true].\n          kwargs  : dict, optional\n          \"\"\"\n\n      @classmethod\n      def write(cls, s, file=sys.stdout, end=\"\\n\"):\n          \"\"\"print a message via tqdm (without overlap with bars).\"\"\"\n\n      @property\n      def format_dict(self):\n          \"\"\"public api for read-only member access.\"\"\"\n\n      def display(self, msg=none, pos=none):\n          \"\"\"\n          use ``self.sp`` to display ``msg`` in the specified ``pos``.\n\n          consider overloading this function when inheriting to use e.g.:\n          ``self.some_frontend(**self.format_dict)`` instead of ``self.sp``.\n\n          parameters\n          ----------\n          msg  : str, optional. what to display (default: ``repr(self)``).\n          pos  : int, optional. position to ``moveto``\n            (default: ``abs(self.pos)``).\n          \"\"\"\n\n      @classmethod\n      @contextmanager\n      def wrapattr(cls, stream, method, total=none, bytes=true, **tqdm_kwargs):\n          \"\"\"\n          stream  : file-like object.\n          method  : str, \"read\" or \"write\". the result of ``read()`` and\n              the first argument of ``write()`` should have a ``len()``.\n\n          >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n          ...     while true:\n          ...         chunk = fobj.read(chunk_size)\n          ...         if not chunk:\n          ...             break\n          \"\"\"\n\n      @classmethod\n      def pandas(cls, *targs, **tqdm_kwargs):\n          \"\"\"registers the current `tqdm` class with `pandas`.\"\"\"\n\n    def trange(*args, **tqdm_kwargs):\n        \"\"\"shortcut for `tqdm(range(*args), **tqdm_kwargs)`.\"\"\"\n\nconvenience functions\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def tqdm.contrib.tenumerate(iterable, start=0, total=none,\n                                tqdm_class=tqdm.auto.tqdm, **tqdm_kwargs):\n        \"\"\"equivalent of `numpy.ndenumerate` or builtin `enumerate`.\"\"\"\n\n    def tqdm.contrib.tzip(iter1, *iter2plus, **tqdm_kwargs):\n        \"\"\"equivalent of builtin `zip`.\"\"\"\n\n    def tqdm.contrib.tmap(function, *sequences, **tqdm_kwargs):\n        \"\"\"equivalent of builtin `map`.\"\"\"\n\nsubmodules\n~~~~~~~~~~\n\n.. code:: python\n\n    class tqdm.notebook.tqdm(tqdm.tqdm):\n        \"\"\"ipython/jupyter notebook widget.\"\"\"\n\n    class tqdm.auto.tqdm(tqdm.tqdm):\n        \"\"\"automatically chooses beween `tqdm.notebook` and `tqdm.tqdm`.\"\"\"\n\n    class tqdm.asyncio.tqdm(tqdm.tqdm):\n      \"\"\"asynchronous version.\"\"\"\n      @classmethod\n      def as_completed(cls, fs, *, loop=none, timeout=none, total=none,\n                       **tqdm_kwargs):\n          \"\"\"wrapper for `asyncio.as_completed`.\"\"\"\n\n    class tqdm.gui.tqdm(tqdm.tqdm):\n        \"\"\"matplotlib gui version.\"\"\"\n\n    class tqdm.tk.tqdm(tqdm.tqdm):\n        \"\"\"tkinter gui version.\"\"\"\n\n    class tqdm.rich.tqdm(tqdm.tqdm):\n        \"\"\"`rich.progress` version.\"\"\"\n\n    class tqdm.keras.tqdmcallback(keras.callbacks.callback):\n        \"\"\"keras callback for epoch and batch progress.\"\"\"\n\n    class tqdm.dask.tqdmcallback(dask.callbacks.callback):\n        \"\"\"dask callback for task progress.\"\"\"\n\n\n``contrib``\n+++++++++++\n\nthe ``tqdm.contrib`` package also contains experimental modules:\n\n- ``tqdm.contrib.itertools``: thin wrappers around ``itertools``\n- ``tqdm.contrib.concurrent``: thin wrappers around ``concurrent.futures``\n- ``tqdm.contrib.slack``: posts to `slack <https://slack.com>`__ bots\n- ``tqdm.contrib.discord``: posts to `discord <https://discord.com>`__ bots\n- ``tqdm.contrib.telegram``: posts to `telegram <https://telegram.org>`__ bots\n- ``tqdm.contrib.bells``: automagically enables all optional features\n\n  * ``auto``, ``pandas``, ``slack``, ``discord``, ``telegram``\n\nexamples and advanced usage\n---------------------------\n\n- see the `examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\n  folder;\n- import the module and run ``help()``;\n- consult the `wiki <https://github.com/tqdm/tqdm/wiki>`__;\n\n  * this has an\n    `excellent article <https://github.com/tqdm/tqdm/wiki/how-to-make-a-great-progress-bar>`__\n    on how to make a **great** progressbar;\n\n- check out the `slides from pydata london <https://tqdm.github.io/pydata2019/slides.html>`__, or\n- run the |binder-demo|.\n\ndescription and additional stats\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncustom information can be displayed and updated dynamically on ``tqdm`` bars\nwith the ``desc`` and ``postfix`` arguments:\n\n.. code:: python\n\n    from tqdm import tqdm, trange\n    from random import random, randint\n    from time import sleep\n\n    with trange(10) as t:\n        for i in t:\n            # description will be displayed on the left\n            t.set_description('gen %i' % i)\n            # postfix will be displayed on the right,\n            # formatted automatically based on argument's datatype\n            t.set_postfix(loss=random(), gen=randint(1,999), str='h',\n                          lst=[1, 2])\n            sleep(0.1)\n\n    with tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:>8.2g}\",\n              postfix=[\"batch\", {\"value\": 0}]) as t:\n        for i in range(10):\n            sleep(0.1)\n            t.postfix[1][\"value\"] = i / 2\n            t.update()\n\npoints to remember when using ``{postfix[...]}`` in the ``bar_format`` string:\n\n- ``postfix`` also needs to be passed as an initial argument in a compatible\n  format, and\n- ``postfix`` will be auto-converted to a string if it is a ``dict``-like\n  object. to prevent this behaviour, insert an extra item into the dictionary\n  where the key is not a string.\n\nadditional ``bar_format`` parameters may also be defined by overriding\n``format_dict``, and the bar itself may be modified using ``ascii``:\n\n.. code:: python\n\n    from tqdm import tqdm\n    class tqdmextraformat(tqdm):\n        \"\"\"provides a `total_time` format parameter\"\"\"\n        @property\n        def format_dict(self):\n            d = super(tqdmextraformat, self).format_dict\n            total_time = d[\"elapsed\"] * (d[\"total\"] or 0) / max(d[\"n\"], 1)\n            d.update(total_time=self.format_interval(total_time) + \" in total\")\n            return d\n\n    for i in tqdmextraformat(\n          range(9), ascii=\" .oo0\",\n          bar_format=\"{total_time}: {percentage:.0f}%|{bar}{r_bar}\"):\n        if i == 4:\n            break\n\n.. code::\n\n    00:00 in total: 44%|0000.     | 4/9 [00:00<00:00, 962.93it/s]\n\nnote that ``{bar}`` also supports a format specifier ``[width][type]``.\n\n- ``width``\n\n  * unspecified (default): automatic to fill ``ncols``\n  * ``int >= 0``: fixed width overriding ``ncols`` logic\n  * ``int < 0``: subtract from the automatic default\n\n- ``type``\n\n  * ``a``: ascii (``ascii=true`` override)\n  * ``u``: unicode (``ascii=false`` override)\n  * ``b``: blank (``ascii=\"  \"`` override)\n\nthis means a fixed bar with right-justified text may be created by using:\n``bar_format=\"{l_bar}{bar:10}|{bar:-10b}right-justified\"``\n\nnested progress bars\n~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` supports nested progress bars. here's an example:\n\n.. code:: python\n\n    from tqdm.auto import trange\n    from time import sleep\n\n    for i in trange(4, desc='1st loop'):\n        for j in trange(5, desc='2nd loop'):\n            for k in trange(50, desc='3rd loop', leave=false):\n                sleep(0.01)\n\nfor manual control over positioning (e.g. for multi-processing use),\nyou may specify ``position=n`` where ``n=0`` for the outermost bar,\n``n=1`` for the next, and so on.\nhowever, it's best to check if ``tqdm`` can work without manual ``position``\nfirst.\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import trange, tqdm\n    from multiprocessing import pool, rlock, freeze_support\n\n    l = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text, position=n):\n            sleep(interval)\n\n    if __name__ == '__main__':\n        freeze_support()  # for windows support\n        tqdm.set_lock(rlock())  # for managing output contention\n        p = pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))\n        p.map(progresser, l)\n\nnote that in python 3, ``tqdm.write`` is thread-safe:\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import tqdm, trange\n    from concurrent.futures import threadpoolexecutor\n\n    l = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text):\n            sleep(interval)\n        if n == 6:\n            tqdm.write(\"n == 6 completed.\")\n            tqdm.write(\"`tqdm.write()` is thread-safe in py3!\")\n\n    if __name__ == '__main__':\n        with threadpoolexecutor() as p:\n            p.map(progresser, l)\n\nhooks and callbacks\n~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` can easily support callbacks/hooks and manual updates.\nhere's an example with ``urllib``:\n\n**``urllib.urlretrieve`` documentation**\n\n    | [...]\n    | if present, the hook function will be called once\n    | on establishment of the network connection and once after each block read\n    | thereafter. the hook will be passed three arguments; a count of blocks\n    | transferred so far, a block size in bytes, and the total size of the file.\n    | [...]\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n    urllib = getattr(urllib, 'request', urllib)\n\n    class tqdmupto(tqdm):\n        \"\"\"provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"\n        def update_to(self, b=1, bsize=1, tsize=none):\n            \"\"\"\n            b  : int, optional\n                number of blocks transferred so far [default: 1].\n            bsize  : int, optional\n                size of each block (in tqdm units) [default: 1].\n            tsize  : int, optional\n                total size (in tqdm units). if [default: none] remains unchanged.\n            \"\"\"\n            if tsize is not none:\n                self.total = tsize\n            return self.update(b * bsize - self.n)  # also sets self.n = b * bsize\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    with tqdmupto(unit='b', unit_scale=true, unit_divisor=1024, miniters=1,\n                  desc=eg_link.split('/')[-1]) as t:  # all optional kwargs\n        urllib.urlretrieve(eg_link, filename=os.devnull,\n                           reporthook=t.update_to, data=none)\n        t.total = t.n\n\ninspired by `twine#242 <https://github.com/pypa/twine/pull/242>`__.\nfunctional alternative in\n`examples/tqdm_wget.py <https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py>`__.\n\nit is recommend to use ``miniters=1`` whenever there is potentially\nlarge differences in iteration speed (e.g. downloading a file over\na patchy connection).\n\n**wrapping read/write methods**\n\nto measure throughput through a file-like object's ``read`` or ``write``\nmethods, use ``callbackiowrapper``:\n\n.. code:: python\n\n    from tqdm.auto import tqdm\n    from tqdm.utils import callbackiowrapper\n\n    with tqdm(total=file_obj.size,\n              unit='b', unit_scale=true, unit_divisor=1024) as t:\n        fobj = callbackiowrapper(t.update, file_obj, \"read\")\n        while true:\n            chunk = fobj.read(chunk_size)\n            if not chunk:\n                break\n        t.reset()\n        # ... continue to use `t` for something else\n\nalternatively, use the even simpler ``wrapattr`` convenience function,\nwhich would condense both the ``urllib`` and ``callbackiowrapper`` examples\ndown to:\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = getattr(urllib, 'request', urllib).urlopen(eg_link)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=getattr(response, 'length', none)) as fout:\n        for chunk in response:\n            fout.write(chunk)\n\nthe ``requests`` equivalent is nearly identical:\n\n.. code:: python\n\n    import requests, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = requests.get(eg_link, stream=true)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=int(response.headers.get('content-length', 0))) as fout:\n        for chunk in response.iter_content(chunk_size=4096):\n            fout.write(chunk)\n\n**custom callback**\n\n``tqdm`` is known for intelligently skipping unnecessary displays. to make a\ncustom callback take advantage of this, simply use the return value of\n``update()``. this is set to ``true`` if a ``display()`` was triggered.\n\n.. code:: python\n\n    from tqdm.auto import tqdm as std_tqdm\n\n    def external_callback(*args, **kwargs):\n        ...\n\n    class tqdmext(std_tqdm):\n        def update(self, n=1):\n            displayed = super(tqdmext, self).update(n)\n            if displayed:\n                external_callback(**self.format_dict)\n            return displayed\n\n``asyncio``\n~~~~~~~~~~~\n\nnote that ``break`` isn't currently caught by asynchronous iterators.\nthis means that ``tqdm`` cannot clean up after itself in this case:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    async for i in tqdm(range(9)):\n        if i == 2:\n            break\n\ninstead, either call ``pbar.close()`` manually or use the context manager syntax:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    with tqdm(range(9)) as pbar:\n        async for i in pbar:\n            if i == 2:\n                break\n\npandas integration\n~~~~~~~~~~~~~~~~~~\n\ndue to popular demand we've added support for ``pandas`` -- here's an example\nfor ``dataframe.progress_apply`` and ``dataframegroupby.progress_apply``:\n\n.. code:: python\n\n    import pandas as pd\n    import numpy as np\n    from tqdm import tqdm\n\n    df = pd.dataframe(np.random.randint(0, 100, (100000, 6)))\n\n    # register `pandas.progress_apply` and `pandas.series.map_apply` with `tqdm`\n    # (can use `tqdm.gui.tqdm`, `tqdm.notebook.tqdm`, optional kwargs, etc.)\n    tqdm.pandas(desc=\"my bar!\")\n\n    # now you can use `progress_apply` instead of `apply`\n    # and `progress_map` instead of `map`\n    df.progress_apply(lambda x: x**2)\n    # can also groupby:\n    # df.groupby(0).progress_apply(lambda x: x**2)\n\nin case you're interested in how this works (and how to modify it for your\nown callbacks), see the\n`examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\nfolder or import the module and run ``help()``.\n\nkeras integration\n~~~~~~~~~~~~~~~~~\n\na ``keras`` callback is also available:\n\n.. code:: python\n\n    from tqdm.keras import tqdmcallback\n\n    ...\n\n    model.fit(..., verbose=0, callbacks=[tqdmcallback()])\n\ndask integration\n~~~~~~~~~~~~~~~~\n\na ``dask`` callback is also available:\n\n.. code:: python\n\n    from tqdm.dask import tqdmcallback\n\n    with tqdmcallback(desc=\"compute\"):\n        ...\n        arr.compute()\n\n    # or use callback globally\n    cb = tqdmcallback(desc=\"global\")\n    cb.register()\n    arr.compute()\n\nipython/jupyter integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nipython/jupyter is supported via the ``tqdm.notebook`` submodule:\n\n.. code:: python\n\n    from tqdm.notebook import trange, tqdm\n    from time import sleep\n\n    for i in trange(3, desc='1st loop'):\n        for j in tqdm(range(100), desc='2nd loop'):\n            sleep(0.01)\n\nin addition to ``tqdm`` features, the submodule provides a native jupyter\nwidget (compatible with ipython v1-v4 and jupyter), fully working nested bars\nand colour hints (blue: normal, green: completed, red: error/interrupt,\nlight blue: no eta); as demonstrated below.\n\n|screenshot-jupyter1|\n|screenshot-jupyter2|\n|screenshot-jupyter3|\n\nthe ``notebook`` version supports percentage or pixels for overall width\n(e.g.: ``ncols='100%'`` or ``ncols='480px'``).\n\nit is also possible to let ``tqdm`` automatically choose between\nconsole or notebook versions by using the ``autonotebook`` submodule:\n\n.. code:: python\n\n    from tqdm.autonotebook import tqdm\n    tqdm.pandas()\n\nnote that this will issue a ``tqdmexperimentalwarning`` if run in a notebook\nsince it is not meant to be possible to distinguish between ``jupyter notebook``\nand ``jupyter console``. use ``auto`` instead of ``autonotebook`` to suppress\nthis warning.\n\nnote that notebooks will display the bar in the cell where it was created.\nthis may be a different cell from the one where it is used.\nif this is not desired, either\n\n- delay the creation of the bar to the cell where it must be displayed, or\n- create the bar with ``display=false``, and in a later cell call\n  ``display(bar.container)``:\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm(..., display=false)\n\n.. code:: python\n\n    # different cell\n    display(pbar.container)\n\nthe ``keras`` callback has a ``display()`` method which can be used likewise:\n\n.. code:: python\n\n    from tqdm.keras import tqdmcallback\n    cbk = tqdmcallback(display=false)\n\n.. code:: python\n\n    # different cell\n    cbk.display()\n    model.fit(..., verbose=0, callbacks=[cbk])\n\nanother possibility is to have a single bar (near the top of the notebook)\nwhich is constantly re-used (using ``reset()`` rather than ``close()``).\nfor this reason, the notebook version (unlike the cli version) does not\nautomatically call ``close()`` upon ``exception``.\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm()\n\n.. code:: python\n\n    # different cell\n    iterable = range(100)\n    pbar.reset(total=len(iterable))  # initialise with new `total`\n    for i in iterable:\n        pbar.update()\n    pbar.refresh()  # force print final status but don't `close()`\n\ncustom integration\n~~~~~~~~~~~~~~~~~~\n\nto change the default arguments (such as making ``dynamic_ncols=true``),\nsimply use built-in python magic:\n\n.. code:: python\n\n    from functools import partial\n    from tqdm import tqdm as std_tqdm\n    tqdm = partial(std_tqdm, dynamic_ncols=true)\n\nfor further customisation,\n``tqdm`` may be inherited from to create custom callbacks (as with the\n``tqdmupto`` example `above <#hooks-and-callbacks>`__) or for custom frontends\n(e.g. guis such as notebook or plotting packages). in the latter case:\n\n1. ``def __init__()`` to call ``super().__init__(..., gui=true)`` to disable\n   terminal ``status_printer`` creation.\n2. redefine: ``close()``, ``clear()``, ``display()``.\n\nconsider overloading ``display()`` to use e.g.\n``self.frontend(**self.format_dict)`` instead of ``self.sp(repr(self))``.\n\nsome submodule examples of inheritance:\n\n- `tqdm/notebook.py <https://github.com/tqdm/tqdm/blob/master/tqdm/notebook.py>`__\n- `tqdm/gui.py <https://github.com/tqdm/tqdm/blob/master/tqdm/gui.py>`__\n- `tqdm/tk.py <https://github.com/tqdm/tqdm/blob/master/tqdm/tk.py>`__\n- `tqdm/contrib/slack.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/slack.py>`__\n- `tqdm/contrib/discord.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/discord.py>`__\n- `tqdm/contrib/telegram.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/telegram.py>`__\n\ndynamic monitor/meter\n~~~~~~~~~~~~~~~~~~~~~\n\nyou can use a ``tqdm`` as a meter which is not monotonically increasing.\nthis could be because ``n`` decreases (e.g. a cpu usage monitor) or ``total``\nchanges.\n\none example would be recursively searching for files. the ``total`` is the\nnumber of objects found so far, while ``n`` is the number of those objects which\nare files (rather than folders):\n\n.. code:: python\n\n    from tqdm import tqdm\n    import os.path\n\n    def find_files_recursively(path, show_progress=true):\n        files = []\n        # total=1 assumes `path` is a file\n        t = tqdm(total=1, unit=\"file\", disable=not show_progress)\n        if not os.path.exists(path):\n            raise ioerror(\"cannot find:\" + path)\n\n        def append_found_file(f):\n            files.append(f)\n            t.update()\n\n        def list_found_dir(path):\n            \"\"\"returns os.listdir(path) assuming os.path.isdir(path)\"\"\"\n            listing = os.listdir(path)\n            # subtract 1 since a \"file\" we found was actually this directory\n            t.total += len(listing) - 1\n            # fancy way to give info without forcing a refresh\n            t.set_postfix(dir=path[-10:], refresh=false)\n            t.update(0)  # may trigger a refresh\n            return listing\n\n        def recursively_search(path):\n            if os.path.isdir(path):\n                for f in list_found_dir(path):\n                    recursively_search(os.path.join(path, f))\n            else:\n                append_found_file(path)\n\n        recursively_search(path)\n        t.set_postfix(dir=path)\n        t.close()\n        return files\n\nusing ``update(0)`` is a handy way to let ``tqdm`` decide when to trigger a\ndisplay refresh to avoid console spamming.\n\nwriting messages\n~~~~~~~~~~~~~~~~\n\nthis is a work in progress (see\n`#737 <https://github.com/tqdm/tqdm/issues/737>`__).\n\nsince ``tqdm`` uses a simple printing mechanism to display progress bars,\nyou should not write any message in the terminal using ``print()`` while\na progressbar is open.\n\nto write messages in the terminal without any collision with ``tqdm`` bar\ndisplay, a ``.write()`` method is provided:\n\n.. code:: python\n\n    from tqdm.auto import tqdm, trange\n    from time import sleep\n\n    bar = trange(10)\n    for i in bar:\n        # print using tqdm class method .write()\n        sleep(0.1)\n        if not (i % 3):\n            tqdm.write(\"done task %i\" % i)\n        # can also use bar.write()\n\nby default, this will print to standard output ``sys.stdout``. but you can\nspecify any file-like object using the ``file`` argument. for example, this\ncan be used to redirect the messages writing to a log file or class.\n\nredirecting writing\n~~~~~~~~~~~~~~~~~~~\n\nif using a library that can print messages to the console, editing the library\nby  replacing ``print()`` with ``tqdm.write()`` may not be desirable.\nin that case, redirecting ``sys.stdout`` to ``tqdm.write()`` is an option.\n\nto redirect ``sys.stdout``, create a file-like class that will write\nany input string to ``tqdm.write()``, and supply the arguments\n``file=sys.stdout, dynamic_ncols=true``.\n\na reusable canonical example is given below:\n\n.. code:: python\n\n    from time import sleep\n    import contextlib\n    import sys\n    from tqdm import tqdm\n    from tqdm.contrib import dummytqdmfile\n\n\n    @contextlib.contextmanager\n    def std_out_err_redirect_tqdm():\n        orig_out_err = sys.stdout, sys.stderr\n        try:\n            sys.stdout, sys.stderr = map(dummytqdmfile, orig_out_err)\n            yield orig_out_err[0]\n        # relay exceptions\n        except exception as exc:\n            raise exc\n        # always restore sys.stdout/err if necessary\n        finally:\n            sys.stdout, sys.stderr = orig_out_err\n\n    def some_fun(i):\n        print(\"fee, fi, fo,\".split()[i])\n\n    # redirect stdout to tqdm.write() (don't forget the `as save_stdout`)\n    with std_out_err_redirect_tqdm() as orig_stdout:\n        # tqdm needs the original stdout\n        # and dynamic_ncols=true to autodetect console width\n        for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=true):\n            sleep(.5)\n            some_fun(i)\n\n    # after the `with`, printing is restored\n    print(\"done!\")\n\nredirecting ``logging``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nsimilar to ``sys.stdout``/``sys.stderr`` as detailed above, console ``logging``\nmay also be redirected to ``tqdm.write()``.\n\nwarning: if also redirecting ``sys.stdout``/``sys.stderr``, make sure to\nredirect ``logging`` first if needed.\n\nhelper methods are available in ``tqdm.contrib.logging``. for example:\n\n.. code:: python\n\n    import logging\n    from tqdm import trange\n    from tqdm.contrib.logging import logging_redirect_tqdm\n\n    log = logging.getlogger(__name__)\n\n    if __name__ == '__main__':\n        logging.basicconfig(level=logging.info)\n        with logging_redirect_tqdm():\n            for i in trange(9):\n                if i == 4:\n                    log.info(\"console logging redirected to `tqdm.write()`\")\n        # logging restored\n\nmonitoring thread, intervals and miniters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` implements a few tricks to increase efficiency and reduce overhead.\n\n- avoid unnecessary frequent bar refreshing: ``mininterval`` defines how long\n  to wait between each refresh. ``tqdm`` always gets updated in the background,\n  but it will display only every ``mininterval``.\n- reduce number of calls to check system clock/time.\n- ``mininterval`` is more intuitive to configure than ``miniters``.\n  a clever adjustment system ``dynamic_miniters`` will automatically adjust\n  ``miniters`` to the amount of iterations that fit into time ``mininterval``.\n  essentially, ``tqdm`` will check if it's time to print without actually\n  checking time. this behaviour can be still be bypassed by manually setting\n  ``miniters``.\n\nhowever, consider a case with a combination of fast and slow iterations.\nafter a few fast iterations, ``dynamic_miniters`` will set ``miniters`` to a\nlarge number. when iteration rate subsequently slows, ``miniters`` will\nremain large and thus reduce display update frequency. to address this:\n\n- ``maxinterval`` defines the maximum time between display refreshes.\n  a concurrent monitoring thread checks for overdue updates and forces one\n  where necessary.\n\nthe monitoring thread should not have a noticeable overhead, and guarantees\nupdates at least every 10 seconds by default.\nthis value can be directly changed by setting the ``monitor_interval`` of\nany ``tqdm`` instance (i.e. ``t = tqdm.tqdm(...); t.monitor_interval = 2``).\nthe monitor thread may be disabled application-wide by setting\n``tqdm.tqdm.monitor_interval = 0`` before instantiation of any ``tqdm`` bar.\n\n\nmerch\n-----\n\nyou can buy `tqdm branded merch <https://tqdm.github.io/merch>`__ now!\n\ncontributions\n-------------\n\n|github-commits| |github-issues| |github-prs| |openhub-status| |github-contributions| |cii best practices|\n\nall source code is hosted on `github <https://github.com/tqdm/tqdm>`__.\ncontributions are welcome.\n\nsee the\n`contributing <https://github.com/tqdm/tqdm/blob/master/contributing.md>`__\nfile for more information.\n\ndevelopers who have made significant contributions, ranked by *sloc*\n(surviving lines of code,\n`git fame <https://github.com/casperdcl/git-fame>`__ ``-wmc --excl '\\.(png|gif|jpg)$'``),\nare:\n\n==================== ======================================================== ==== ================================\nname                 id                                                       sloc notes\n==================== ======================================================== ==== ================================\ncasper da costa-luis `casperdcl <https://github.com/casperdcl>`__             ~80% primary maintainer |gift-casper|\nstephen larroque     `lrq3000 <https://github.com/lrq3000>`__                 ~9%  team member\nmartin zugnoni       `martinzugnoni <https://github.com/martinzugnoni>`__     ~3%\ndaniel ecer          `de-code <https://github.com/de-code>`__                 ~2%\nrichard sheridan     `richardsheridan <https://github.com/richardsheridan>`__ ~1%\nguangshuo chen       `chengs <https://github.com/chengs>`__                   ~1%\nhelio machado        `0x2b3bfa0 <https://github.com/0x2b3bfa0>`__             ~1%\nkyle altendorf       `altendky <https://github.com/altendky>`__               <1%\nnoam yorav-raphael   `noamraph <https://github.com/noamraph>`__               <1%  original author\nmatthew stevens      `mjstevens777 <https://github.com/mjstevens777>`__       <1%\nhadrien mary         `hadim <https://github.com/hadim>`__                     <1%  team member\nmikhail korobov      `kmike <https://github.com/kmike>`__                     <1%  team member\n==================== ======================================================== ==== ================================\n\nports to other languages\n~~~~~~~~~~~~~~~~~~~~~~~~\n\na list is available on\n`this wiki page <https://github.com/tqdm/tqdm/wiki/tqdm-ports>`__.\n\n\nlicence\n-------\n\nopen source (osi approved): |licence|\n\ncitation information: |doi|\n\n|readme-hits| (since 19 may 2016)\n\n.. |logo| image:: https://tqdm.github.io/img/logo.gif\n.. |screenshot| image:: https://tqdm.github.io/img/tqdm.gif\n.. |video| image:: https://tqdm.github.io/img/video.jpg\n   :target: https://tqdm.github.io/video\n.. |slides| image:: https://tqdm.github.io/img/slides.jpg\n   :target: https://tqdm.github.io/pydata2019/slides.html\n.. |merch| image:: https://tqdm.github.io/img/merch.jpg\n   :target: https://tqdm.github.io/merch\n.. |build-status| image:: https://img.shields.io/github/actions/workflow/status/tqdm/tqdm/test.yml?branch=master&label=tqdm&logo=github\n   :target: https://github.com/tqdm/tqdm/actions/workflows/test.yml\n.. |coverage-status| image:: https://img.shields.io/coveralls/github/tqdm/tqdm/master?logo=coveralls\n   :target: https://coveralls.io/github/tqdm/tqdm\n.. |branch-coverage-status| image:: https://codecov.io/gh/tqdm/tqdm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tqdm/tqdm\n.. |codacy-grade| image:: https://app.codacy.com/project/badge/grade/3f965571598f44549c7818f29cdcf177\n   :target: https://www.codacy.com/gh/tqdm/tqdm/dashboard\n.. |cii best practices| image:: https://bestpractices.coreinfrastructure.org/projects/3264/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/3264\n.. |github-status| image:: https://img.shields.io/github/tag/tqdm/tqdm.svg?maxage=86400&logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/releases\n.. |github-forks| image:: https://img.shields.io/github/forks/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/network\n.. |github-stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/stargazers\n.. |github-commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg?logo=git&logocolor=white\n   :target: https://github.com/tqdm/tqdm/graphs/commit-activity\n.. |github-issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/issues?q=\n.. |github-prs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/pulls\n.. |github-contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/graphs/contributors\n.. |github-updated| image:: https://img.shields.io/github/last-commit/tqdm/tqdm/master.svg?logo=github&logocolor=white&label=pushed\n   :target: https://github.com/tqdm/tqdm/pulse\n.. |gift-casper| image:: https://img.shields.io/badge/dynamic/json.svg?color=ff69b4&label=gifts%20received&prefix=%c2%a3&query=%24..sum&url=https%3a%2f%2fcaspersci.uk.to%2fgifts.json\n   :target: https://cdcl.ml/sponsor\n.. |versions| image:: https://img.shields.io/pypi/v/tqdm.svg\n   :target: https://tqdm.github.io/releases\n.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg?label=pypi%20downloads&logo=pypi&logocolor=white\n   :target: https://pepy.tech/project/tqdm\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg?logo=python&logocolor=white\n   :target: https://pypi.org/project/tqdm\n.. |conda-forge-status| image:: https://img.shields.io/conda/v/conda-forge/tqdm.svg?label=conda-forge&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/tqdm\n.. |snapcraft| image:: https://img.shields.io/badge/snap-install-82bea0.svg?logo=snapcraft\n   :target: https://snapcraft.io/tqdm\n.. |docker| image:: https://img.shields.io/badge/docker-pull-blue.svg?logo=docker&logocolor=white\n   :target: https://hub.docker.com/r/tqdm/tqdm\n.. |libraries-rank| image:: https://img.shields.io/librariesio/sourcerank/pypi/tqdm.svg?logo=koding&logocolor=white\n   :target: https://libraries.io/pypi/tqdm\n.. |libraries-dependents| image:: https://img.shields.io/librariesio/dependent-repos/pypi/tqdm.svg?logo=koding&logocolor=white\n    :target: https://github.com/tqdm/tqdm/network/dependents\n.. |openhub-status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif\n   :target: https://www.openhub.net/p/tqdm?ref=thin+badge\n.. |awesome-python| image:: https://awesome.re/mentioned-badge.svg\n   :target: https://github.com/vinta/awesome-python\n.. |licence| image:: https://img.shields.io/pypi/l/tqdm.svg\n   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/licence\n.. |doi| image:: https://img.shields.io/badge/doi-10.5281/zenodo.595120-blue.svg\n   :target: https://doi.org/10.5281/zenodo.595120\n.. |binder-demo| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/tqdm/tqdm/master?filepath=demo.ipynb\n.. |screenshot-jupyter1| image:: https://tqdm.github.io/img/jupyter-1.gif\n.. |screenshot-jupyter2| image:: https://tqdm.github.io/img/jupyter-2.gif\n.. |screenshot-jupyter3| image:: https://tqdm.github.io/img/jupyter-3.gif\n.. |readme-hits| image:: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&style=social&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif\n   :target: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&a=plot&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif&style=social\n",
  "docs_url": null,
  "keywords": "progressbar,progressmeter,progress,bar,meter,rate,eta,console,terminal,time",
  "license": "mpl-2.0 and mit",
  "name": "tqdm",
  "package_url": "https://pypi.org/project/tqdm/",
  "project_url": "https://pypi.org/project/tqdm/",
  "project_urls": {
    "changelog": "https://tqdm.github.io/releases",
    "homepage": "https://tqdm.github.io",
    "repository": "https://github.com/tqdm/tqdm",
    "wiki": "https://github.com/tqdm/tqdm/wiki"
  },
  "release_url": "https://pypi.org/project/tqdm/4.66.1/",
  "requires_dist": [
    "colorama ; platform_system == \"Windows\"",
    "pytest >=6 ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "ipywidgets >=6 ; extra == 'notebook'",
    "slack-sdk ; extra == 'slack'",
    "requests ; extra == 'telegram'"
  ],
  "requires_python": ">=3.7",
  "summary": "fast, extensible progress meter",
  "version": "4.66.1",
  "releases": [],
  "developers": [
    "devs@tqdm.ml"
  ],
  "kwds": "progress_map progressmeter progressbar progressbars show_progress",
  "license_kwds": "mpl-2.0 and mit",
  "libtype": "pypi",
  "id": "pypi_tqdm",
  "homepage": "",
  "release_count": 133,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_ipywidgets",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_slack_sdk"
  ]
}
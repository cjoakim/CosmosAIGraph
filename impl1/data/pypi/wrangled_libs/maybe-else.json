{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python :: 3.7"
  ],
  "description": "overview\n====================\n\nprovides a `maybe` class which serves as a pseudo-implementation of null-aware operators in python:\n\n* can be used to avoid common `var if var is not none else handle_none(var)` structures\n* null-aware item access\n* null-aware attribute access\n* null-aware chained method calls\n* can be combined with all arithmetic and bitwise operators\n\ninstallation\n====================\n\nto install use pip:\n\n    $ pip install maybe-else\n\n\nor clone the repo:\n\n    $ git clone https://github.com/matthewgdv/maybe.git\n    $ python setup.py install\n\n\nusage\n====================\n\nthe simplest use-case is to wrap the value in the `maybe` class and call `maybe.else_()` with an alternative value. if the initial value was `none`,\nthe alternative value will be returned. otherwise the original value will be returned.\n\n    maybe(none).else_(\"other\")                      # \"other\"\n    maybe(\"hi\").else_(\"other\")                      # \"hi\"\n\nmore complex uses involve chaining item/attribute access and method calls off the initial value.\nif at any point an `indexerror` or `keyerror` (item access), `attributeerror` (attribute access), or `typeerror` (method call) is raised, the alternative value will be returned\nupon calling `maybe.else_()`. other exception classes are not caught by `maybe` (intentionally) and will have be to handled normally.\n\n    maybe(\"hi\").monkeyweasel[3].else_(\"other\")      # \"other\"\n    maybe({\"one\": \"1\"})[\"one\"].isnumeric().else_(\"other\")   # true\n\nmost operators can be used with `maybe`. actions involving operators will ignore `typeerror`, but other types of exceptions will have to be handled outside the `maybe` construct.\n\n    (maybe(8) / 2).else_(\"other\")                   # 4.0\n    (maybe(\"hi\").upper() + \"!\").else_(\"other\")      # \"hi!\"\n    (maybe(none) // 3).else_(\"other\")               # \"other\"\n    (maybe(11) % 4).else_(\"other\")                  # 3\n\nif none would be returned as a result of operations performed on the `maybe` object, then none will be returned from `maybe.else_()`, rather than the alternative value.\nthis is because `none` is a legitimate output value, so long as it was not the original input value.\n\n    maybe({1: \"1\"}).get(2).else_(\"other\")           # none\n\nthe `maybe` class will be truthy whenever it would return what it is currently holding on calling `maybe.else_()`, and will be falsy when it would return the alternative.\n\ncontributing\n====================\n\ncontributions are welcome, and they are greatly appreciated! every little bit helps, and credit will always be given.\n\nyou can contribute in many ways:\n\nreport bugs\n--------------------\n\nreport bugs at https://github.com/matthewgdv/maybe/issues\n\nif you are reporting a bug, please include:\n\n* your operating system name and version.\n* any details about your local setup that might be helpful in troubleshooting.\n* detailed steps to reproduce the bug.\n\nfix bugs\n--------------------\n\nlook through the github issues for bugs. anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.\n\nimplement features\n--------------------\n\nlook through the github issues for features. anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.\n\nwrite documentation\n--------------------\n\nthe repository could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.\n\nsubmit feedback\n--------------------\n\nthe best way to send feedback is to file an issue at https://github.com/matthewgdv/maybe/issues.\n\nif you are proposing a new feature:\n\n* explain in detail how it would work.\n* keep the scope as narrow as possible, to make it easier to implement.\n* remember that this is a volunteer-driven project, and that contributions are welcome :)\n\nget started!\n--------------------\n\nbefore you submit a pull request, check that it meets these guidelines:\n\n1.  if the pull request adds functionality, it should include tests and the docs should be updated. write docstrings for any functions that are part of the external api, and add\n    the feature to the readme.md.\n\n2.  if the pull request fixes a bug, tests should be added proving that the bug has been fixed. however, no update to the docs is necessary for bugfixes.\n\n3.  the pull request should work for the newest version of python (currently 3.7). older versions may incidentally work, but are not officially supported.\n\n4.  inline type hints should be used, with an emphasis on ensuring that introspection and autocompletion tools such as jedi are able to understand the code wherever possible.\n\n5.  pep8 guidelines should be followed where possible, but deviations from it where it makes sense and improves legibility are encouraged. the following pep8 error codes can be\n    safely ignored: e121, e123, e126, e226, e24, e704, w503\n\n6.  this repository intentionally disallows the pep8 79-character limit. therefore, any contributions adhering to this convention will be rejected. as a rule of thumb you should\n    endeavor to stay under 200 characters except where going over preserves alignment, or where the line is mostly non-algorythmic code, such as extremely long strings or function\n    calls.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "maybe-else",
  "package_url": "https://pypi.org/project/maybe-else/",
  "project_url": "https://pypi.org/project/maybe-else/",
  "project_urls": {
    "Homepage": "https://github.com/matthewgdv/maybe"
  },
  "release_url": "https://pypi.org/project/maybe-else/0.2.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "provides a maybe class as a python implementation of null-aware operators.",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "matt_gdv",
    "matthewgdv@gmail.com"
  ],
  "kwds": "pip attributeerror python handle_none attribute",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_maybe_else",
  "homepage": "https://github.com/matthewgdv/maybe",
  "release_count": 8,
  "dependency_ids": []
}
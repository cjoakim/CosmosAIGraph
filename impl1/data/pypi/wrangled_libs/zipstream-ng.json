{
  "classifiers": [
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: system :: archiving :: compression"
  ],
  "description": "zipstream-ng\n============\n[![status](https://github.com/pr0ps/zipstream-ng/workflows/tests/badge.svg)](https://github.com/pr0ps/zipstream-ng/actions/workflows/tests.yml)\n[![version](https://img.shields.io/pypi/v/zipstream-ng.svg)](https://pypi.org/project/zipstream-ng/)\n![python](https://img.shields.io/pypi/pyversions/zipstream-ng.svg)\n\na modern and easy to use streamable zip file generator. it can package and stream many files and\nfolders into a zip on the fly without needing temporary files or excessive memory. it can also\ncalculate the final size of the zip file before streaming it.\n\n\n### features:\n - generates zip data on the fly as it's requested.\n - can calculate the total size of the resulting zip file before generation even begins.\n - low memory usage: since the zip is generated as it's requested, very little has to be kept in\n   memory (peak usage of less than 20mb is typical, even for tbs of files).\n - flexible api: typical use cases are simple, complicated ones are possible.\n - supports zipping data from files, bytes, strings, and any other iterable objects.\n - keeps track of the date of the most recently modified file added to the zip file.\n - threadsafe: won't mangle data if multiple threads concurrently add data to the same stream.\n - includes a clone of python's `http.server` module with zip support added. try `python -m zipstream.server`.\n - automatically uses zip64 extensions, but only if they are required.\n - no external dependencies.\n\n\n### ideal for web backends:\n - generating zip data on the fly requires very little memory, no disk usage, and starts producing\n   data with less latency than creating the entire zip up-front. this means faster responses, no\n   temporary files, and very low memory usage.\n - the ability to calculate the total size of the stream before any data is actually generated\n   (provided no compression is used) means web backends can provide a `content-length` header in\n   their responses. this allows clients to show a progress bar as the stream is transferred.\n - by keeping track of the date of the most recently modified file added to the zip, web\n   backends can provide a `last-modified` header. this allows clients to check if they have the most\n   up-to-date version of the zip with just a head request instead of having to download the entire\n   thing.\n\n\ninstallation\n------------\n```\npip install zipstream-ng\n```\n\n\nexamples\n--------\n\n### create a local zip file (simple example)\n\nmake an archive named `files.zip` in the current directory that contains all files under\n`/path/to/files`.\n\n```python\nfrom zipstream import zipstream\n\nzs = zipstream.from_path(\"/path/to/files/\")\n\nwith open(\"files.zip\", \"wb\") as f:\n    f.writelines(zs)\n```\n\n\n### create a local zip file (demos more of the api)\n\n```python\nfrom zipstream import zipstream, zip_deflated\n\n# create a zipstream that uses the maximum level of deflate compression.\nzs = zipstream(compress_type=zip_deflated, compress_level=9)\n\n# set the zip file's comment.\nzs.comment = \"contains compressed important files\"\n\n# add all the files under a path.\n# will add all files under a top-level folder called \"files\" in the zip.\nzs.add_path(\"/path/to/files/\")\n\n# add another file (will be added as \"data.txt\" in the zip file).\nzs.add_path(\"/path/to/file.txt\", \"data.txt\")\n\n# add some random data from an iterable.\n# this generator will only be run when the stream is generated.\ndef random_data():\n    import random\n    for _ in range(10):\n        yield random.randbytes(1024)\n\nzs.add(random_data(), \"random.bin\")\n\n# add a file containing some static text.\n# will automatically be encoded to bytes before being added (uses utf-8).\nzs.add(\"this is some text\", \"readme.txt\")\n\n# write out the zip file as it's being generated.\n# at this point the data in the files will be read in and the generator\n# will be iterated over.\nwith open(\"files.zip\", \"wb\") as f:\n    f.writelines(zs)\n```\n\n\n### zipserver (included)\n\na fully-functional and useful example can be found in the included\n[`zipstream.server`](zipstream/server.py) module. it's a clone of python's built in `http.server`\nwith the added ability to serve multiple files and folders as a single zip file. try it out by\ninstalling the package and running `zipserver --help` or `python -m zipstream.server --help`.\n\n![zipserver screenshot](zipserver.png)\n\n\n### integration with a flask webapp\n\na very basic [flask](https://flask.palletsprojects.com/)-based file server that streams all the\nfiles under the requested path to the client as a zip file. it provides the total size of the stream\nin the `content-length` header so the client can show a progress bar as the stream is downloaded. it\nalso provides a `last-modified` header so the client can check if it already has the most recent\ncopy of the zipped data with a `head` request instead of having to download the file and check.\n\nnote that while this example works, it's not a good idea to deploy it as-is due to the lack of input\nvalidation and other checks.\n\n```python\nimport os.path\nfrom flask import flask, response\nfrom zipstream import zipstream\n\napp = flask(__name__)\n\n@app.route(\"/\", defaults={\"path\": \".\"})\n@app.route(\"/<path:path>\")\ndef stream_zip(path):\n    name = os.path.basename(os.path.abspath(path))\n    zs = zipstream.from_path(path)\n    return response(\n        zs,\n        mimetype=\"application/zip\",\n        headers={\n            \"content-disposition\": f\"attachment; filename={name}.zip\",\n            \"content-length\": len(zs),\n            \"last-modified\": zs.last_modified,\n        }\n    )\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n```\n\n\n### partial generation and last-minute file additions\n\nit's possible to generate the zip stream, but stop before finalizing it. this enables adding\nsomething like a file manifest or compression log after all the files have been added.\n\n`zipstream` provides a `info_list` method that returns information on all the files added to the\nstream. in this example, all that information will be added to the zip in a file named\n\"manifest.json\" before finalizing it.\n\n```python\nfrom zipstream import zipstream\nimport json\n\ndef gen_zipfile()\n    zs = zipstream.from_path(\"/path/to/files\")\n    yield from zs.all_files()\n    zs.add(\n        json.dumps(\n            zs.info_list(),\n            indent=2\n        ),\n        \"manifest.json\"\n    )\n    yield from zs.finalize()\n```\n\n\ncomparison to stdlib\n--------------------\nsince python 3.6 it has actually been possible to generate zip files as a stream using just the\nstandard library, it just hasn't been very ergonomic or efficient. consider the typical use case of\nzipping up a directory of files while streaming it over a network connection:\n\n(note that the size of the stream is not pre-calculated in this case as this would make the stdlib\nexample way too long).\n\nusing zipstream:\n```python\nfrom zipstream import zipstream\n\nsend_stream(\n    zipstream.from_path(\"/path/to/files/\")\n)\n```\n\n<details>\n<summary>the same(ish) functionality using just the stdlib:</summary>\n\n```python\nimport os\nimport io\nfrom zipfile import zipfile, zipinfo\n\nclass stream(io.rawiobase):\n    \"\"\"an unseekable stream for the zipfile to write to\"\"\"\n\n    def __init__(self):\n        self._buffer = bytearray()\n        self._closed = false\n\n    def close(self):\n        self._closed = true\n\n    def write(self, b):\n        if self._closed:\n            raise valueerror(\"can't write to a closed stream\")\n        self._buffer += b\n        return len(b)\n\n    def readall(self):\n        chunk = bytes(self._buffer)\n        self._buffer.clear()\n        return chunk\n\ndef iter_files(path):\n    for dirpath, _, files in os.walk(path, followlinks=true):\n        if not files:\n            yield dirpath  # preserve empty directories\n        for f in files:\n            yield os.path.join(dirpath, f)\n\ndef read_file(path):\n    with open(path, \"rb\") as fp:\n        while true:\n            buf = fp.read(1024 * 64)\n            if not buf:\n                break\n            yield buf\n\ndef generate_zipstream(path):\n    stream = stream()\n    with zipfile(stream, mode=\"w\") as zf:\n        toplevel = os.path.basename(os.path.normpath(path))\n        for f in iter_files(path):\n            # use the basename of the path to set the arcname\n            arcname = os.path.join(toplevel, os.path.relpath(f, path))\n            zinfo = zipinfo.from_file(f, arcname)\n\n            # write data to the zip file then yield the stream content\n            with zf.open(zinfo, mode=\"w\") as fp:\n                if zinfo.is_dir():\n                    continue\n                for buf in read_file(f):\n                    fp.write(buf)\n                    yield stream.readall()\n    yield stream.readall()\n\nsend_stream(\n    generate_zipstream(\"/path/to/files/\")\n)\n```\n</details>\n\n\ntests\n-----\nthis package contains extensive tests. to run them, install `pytest` (`pip install pytest`) and run\n`py.test` in the project directory.\n\n\nlicense\n-------\nlicensed under the [gnu lgplv3](https://www.gnu.org/licenses/lgpl-3.0.html).\n",
  "docs_url": null,
  "keywords": "",
  "license": "lgplv3",
  "name": "zipstream-ng",
  "package_url": "https://pypi.org/project/zipstream-ng/",
  "project_url": "https://pypi.org/project/zipstream-ng/",
  "project_urls": {
    "Changelog": "https://github.com/pR0Ps/zipstream-ng/blob/master/CHANGELOG.md",
    "Homepage": "https://github.com/pR0Ps/zipstream-ng",
    "Source": "https://github.com/pR0Ps/zipstream-ng"
  },
  "release_url": "https://pypi.org/project/zipstream-ng/1.7.1/",
  "requires_dist": [
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'"
  ],
  "requires_python": ">=3.5.0",
  "summary": "a modern and easy to use streamable zip file generator",
  "version": "1.7.1",
  "releases": [],
  "developers": [],
  "kwds": "generate_zipstream stream_zip zipstream zipfile gen_zipfile",
  "license_kwds": "lgplv3",
  "libtype": "pypi",
  "id": "pypi_zipstream_ng",
  "homepage": "https://github.com/pr0ps/zipstream-ng",
  "release_count": 15,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
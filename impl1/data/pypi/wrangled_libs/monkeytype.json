{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "monkeytype\n==========\n\n.. image:: https://img.shields.io/badge/support-ukraine-ffd500?style=flat&labelcolor=005bbb\n   :alt: support ukraine - help provide humanitarian aid to ukraine.\n   :target: https://opensource.fb.com/support-ukraine\n\nmonkeytype collects runtime types of function arguments and return values, and\ncan automatically generate stub files or even add draft type annotations\ndirectly to your python code based on the types collected at runtime.\n\nexample\n-------\n\nsay ``some/module.py`` originally contains:\n\n.. code:: python\n\n  def add(a, b):\n      return a + b\n\nand ``myscript.py`` contains:\n\n.. code:: python\n\n  from some.module import add\n\n  add(1, 2)\n\nnow we want to infer the type annotation of ``add`` in ``some/module.py`` by\nrunning ``myscript.py`` with ``monkeytype``. one way is to run:\n\n.. code:: bash\n\n  $ monkeytype run myscript.py\n\nby default, this will dump call traces into a sqlite database in the file\n``monkeytype.sqlite3`` in the current working directory. you can then use the\n``monkeytype`` command to generate a stub file for a module, or apply the type\nannotations directly to your code.\n\nrunning ``monkeytype stub some.module`` will output a stub:\n\n.. code:: python\n\n  def add(a: int, b: int) -> int: ...\n\nrunning  ``monkeytype apply some.module`` will modify ``some/module.py`` to:\n\n.. code:: python\n\n  def add(a: int, b: int) -> int:\n      return a + b\n\nthis example demonstrates both the value and the limitations of\nmonkeytype. with monkeytype, it's very easy to add annotations that\nreflect the concrete types you use at runtime, but those annotations may not\nalways match the full intended capability of the functions. for instance, ``add``\nis capable of handling many more types than just integers. similarly, monkeytype\nmay generate a concrete ``list`` annotation where an abstract ``sequence`` or\n``iterable`` would be more appropriate. monkeytype's annotations are an\ninformative first draft, to be checked and corrected by a developer.\n\nmotivation\n----------\n\nreadability and static analysis are the primary motivations for adding type\nannotations to code. it's already common in many python style guides to\ndocument the argument and return types for a function in its docstring;\nannotations are a standardized way to provide this documentation, which also\npermits static analysis by a typechecker such as `mypy`_.\n\nfor more on the motivation and design of python type annotations, see\n:pep:`483` and :pep:`484`.\n\n.. _mypy: http://mypy.readthedocs.io/en/latest/\n\nrequirements\n------------\n\nmonkeytype requires python 3.7+ and the `libcst`_ library (for applying type\nstubs to code files). it generates only python 3 type annotations (no type\ncomments).\n\ninstalling\n----------\n\ninstall monkeytype with `pip`_:\n\n.. code:: bash\n\n  pip install monkeytype\n\nhow monkeytype works\n--------------------\n\nmonkeytype uses the `sys.setprofile`_ hook provided by python to interpose on\nfunction calls, function returns, and generator yields, and record the types of\narguments / return values / yield values.\n\nit generates `stub files`_ based on that data, and can use `libcst`_ to apply those\nstub files directly to your code.\n\n.. _pip: https://pip.pypa.io/en/stable/\n.. _libcst: https://pypi.python.org/pypi/libcst\n.. _sys.setprofile: https://docs.python.org/3/library/sys.html#sys.setprofile\n.. _stub files: https://mypy.readthedocs.io/en/latest/getting_started.html#library-stubs-and-typeshed\n\n.. end-here\n\nsee `the full documentation`_ for details.\n\n.. _the full documentation: http://monkeytype.readthedocs.io/en/latest/\n\ntroubleshooting\n---------------\n\ncheck if your issue is mentioned in `the frequently asked questions`_ list.\n\n.. _the frequently asked questions: http://monkeytype.readthedocs.io/en/stable/faq.html\n\ndevelopment\n-----------\n\nsee `contributing.rst`_ for information on developing and contributing to monkeytype.\n\n.. _contributing.rst: https://github.com/instagram/monkeytype/blob/master/contributing.rst\n\n\nlicense\n-------\n\nmonkeytype is bsd licensed.\n\nchangelog\n=========\n\n23.3.0\n------\n\n* add ``--pep_563`` flag to ``apply`` command. thanks sagar badiyani.\n  merge of #282, fixes #111 and #203.\n\n* remove hard dependency on django; ``django.utils.functional.cached_property``\n  support is now conditionally enabled depending whether it is importable.\n\n* add support for python 3.11.\n\n\n22.2.0\n------\n\n* drop python 3.6 support.\n\n* fix `attributeerror: __args__` when generating stubs on python 3.9. thanks\n  gamedungeon and ntjess for the report. fixes #231.\n\n* fix `attributeerror: '_specialform' object has no attribute '__name__'` in\n  collecting traces with union types. thanks federico caselli for the report.\n  fixes #243.\n\n\n21.5.0\n------\n\n* fix compatibility with python 3.9. thanks felix yan. merge of #217, fixes\n  #205.\n\n* render empty tuple type correctly. thanks pradeep kumar srinivasan. merge of\n  #191, fixes #190.\n\n\n20.5.0\n------\n\n* require ``libcst>=0.3.5``.\n\n* add ``--ignore-existing-annotations`` flag to ``apply`` command.\n\n\n20.4.2\n------\n\n* add missing ``libcst`` dependency in ``setup.py``.\n\n\n20.4.1\n------\n\n* generate stubs for typeddicts nested within generic types. disable\n  typeddicts completely when the max size is zero. thanks pradeep kumar\n  srinivasan. merge of #162, fixes #159.\n\n* remove ``stringcase`` dependency, just hand-roll ``pascal_case`` function.\n\n* shrink dictionary traces with required and optional keys to get non-total\n  typeddict class declarations. thanks pradeep kumar srinivasan.\n\n* implement ``monkeytype apply`` using libcst's ``applytypeannotationsvisitor``.\n  this correctly applies generated typeddict classes. thanks pradeep kumar\n  srinivasan.\n\n* render generic types recursively to handle nested special cases like\n  ``list['movie']``. thanks pradeep kumar srinivasan. fixes #76.\n\n\n19.11.2\n-------\n\n* disable typeddict generation by default for now, since it breaks `--apply`.\n\n\n19.11.1\n-------\n\n* add setup.py dependences for mypy-extensions and stringcase. thanks nicholas\n  bollweg for the report.\n\n\n19.11.0\n-------\n\n* trace per-key value types for dictionaries (up to a configured max size) and\n  if the traced types are consistent, output a typeddict in the stub instead of\n  a homogenous dict. thanks pradeep kumar srinivasan. merge of #143, fixes\n  #105.\n\n* fix crash with empty tuples. thanks akayunov for the report, christophe\n  simonis for the simplest-case repro. fixes #136.\n\n* don't add stringified annotations to type stubs. thanks \u0142ukasz langa. merge\n  of #148.\n\n* don't crash in type rewriter on user-defined types that name-collide with\n  container types from the `typing` module. thanks \u0142ukasz langa. merge of #146.\n\n* load config after argument parsing instead of during it, to avoid argparse\n  catching typeerror/valueerror at import time of a custom config and replacing\n  with a generic \"invalid value\" message. see\n  https://bugs.python.org/issue30220. thanks daniel g holmes for the report.\n  merge of #142, fixes #141.\n\n* typing support for collections.defaultdict. thanks dinesh kesavan. merge of #152.\n\n\n19.5.0\n------\n\n* mark ``monkeytype`` package as typed per pep 561. thanks vasily zakharov for\n  the report.\n* add ``-v`` option; don't display individual traces that fail to decode unless\n  it is given.\n\n\n19.1.1\n------\n\n* pass ``--incremental`` to retype when applying stubs, so it doesn't choke on\n  partial stubs (which can result from e.g. failures to decode some traces).\n\n\n19.1.0\n------\n\n* add ``--omit-existing-annotations`` option, implied by ``apply``. merge of\n  #129. fixes #11 and #81.\n\n* render ``...`` for all parameter defaults in stubs. remove the\n  ``--include-unparsable-defaults`` and ``--exclude-unparsable-defaults`` cli\n  options, as well as the ``include_unparsable_defaults()`` config method.\n  merge of #128, fixes #123.\n\n* render forward references (from existing annotations) correctly. merge of #127.\n\n* rewrite `generator[..., none, none]` to `iterator[none]` by default. merge of\n  #110, fixes #4. thanks iyanuashiri.\n\n\n18.8.0\n------\n\n* support python 3.7. merge of #107, fixes #78.\n\n* print useful error message when filename is passed to stub/apply. merge of\n  #88, fixes #65. thanks rajathagasthya.\n\n* fix crash in ``list_modules`` when there are no traces. merge of #106, fixes\n  #90.  thanks tyrinwu.\n\n* enable ``python -m monkeytype {run,stub,apply} ...``. merge of #100, fixes\n  #99. thanks retornam.\n\n\n18.5.1\n------\n\n* add ``monkeytype_trace_modules`` env var for easier tracing of code in\n  site-packages. merge of #83, fixes #82. thanks bo peng.\n\n* fix passing additional arguments to scripts run via ``monkeytype run``. merge\n  of #85. thanks danny qiu.\n\n* fix handling of spaces in filenames passed to retype. merge of #79, fixes\n  #77.\n\n* never render nonetype in stubs, substitute none.  merge of #75, fixes #5.\n  thanks john arnold.\n\n\n18.2.0\n------\n\n* move filtering of `__main__` module into calltracestorelogger instead of core\n  tracing code, so it can be overridden by special use cases like ipython\n  tracing. merge of #72, fixes #68. thanks tony fast.\n\n* generate stubs for modules where the module file is like module/__init__.py.\n  print retype stdout/stderr. merge of #69, fixes #66.\n  thanks john arnold.\n\n\n18.1.13\n-------\n\n* improve error messages in case of \"no traces found\" and/or file path given\n  instead of module name. merge of #37, partial fix for #65. thanks aarni\n  koskela.\n\n* add ``monkeytype list_modules`` sub-command to list all modules present in\n  trace db. merge of #61, fixes #60. thanks alex miasoiedov.\n\n* add ``--diff`` option to ``monkeytype stub``. merge of #59, fixes #58.\n  thanks tai-lin!\n\n* add ``--ignore-existing-annotations`` option to ``monkeytype stub``. merge of\n  #55, fixes #15. thanks tai-lin!\n\n\n18.1.11\n-------\n\n* fix crash in rewriteemptycontainers rewriter if a parameter has only empty\n  container types in traces (and more than one). fixes #53.\n\n\n18.1.10\n-------\n\n* display retype errors when stub application fails. merge of #52, fixes #49.\n\n* add ``--sample-count`` option to show the number of traces a given stub is\n  based on. merge of #50, fixes #7. thanks tai-lin.\n\n* add ``monkeytype run -m`` for running a module as a script. merge of\n  #41. thanks simon gomizelj.\n\n* add support for django's ``cached_property`` decorator. merge of #46, fixes\n  #9. thanks christopher j wang.\n\n* catch and log serialization exceptions instead of crashing. fixes #38, merge\n  of #39.\n\n* fix bug in default code filter when python lib paths are symlinked. merge of\n  #40. thanks simon gomizelj.\n\n17.12.3\n-------\n\n* rewrite imports from _io module to io. (#1, merge of #32). thanks radhans\n  jadhao.\n\n* add config.cli_context() as a hook for custom cli initialization and cleanup\n  logic (#28; merge of #29). thanks rodney folz.\n\n17.12.2\n-------\n\n* exclude \"frozen importlib\" functions in default code filter.\n\n* fix passing args to script run with ``monkeytype run`` (#18; merge of\n  #21). thanks rodney folz.\n\n* fix generated annotations for newtype types (#22; merge of #23). thanks\n  rodney folz.\n\n17.12.1\n-------\n\n* fix using monkeytype outside a virtualenv (#16). thanks guido van rossum for\n  the report.\n\n17.12.0\n-------\n\n* initial public version.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "monkeytype",
  "package_url": "https://pypi.org/project/MonkeyType/",
  "project_url": "https://pypi.org/project/MonkeyType/",
  "project_urls": {
    "Homepage": "https://github.com/Instagram/MonkeyType"
  },
  "release_url": "https://pypi.org/project/MonkeyType/23.3.0/",
  "requires_dist": [
    "mypy-extensions",
    "libcst (>=0.4.4)",
    "black ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "libcst ; extra == 'dev'",
    "importlib-metadata ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "generating type annotations from sampled production types",
  "version": "23.3.0",
  "releases": [],
  "developers": [
    "matt_page",
    "mpage@instagram.com"
  ],
  "kwds": "monkeytype_trace_modules monkeytype importlib annotations list_modules",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_monkeytype",
  "homepage": "https://github.com/instagram/monkeytype",
  "release_count": 23,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_importlib_metadata",
    "pypi_isort",
    "pypi_libcst",
    "pypi_mypy",
    "pypi_mypy_extensions",
    "pypi_pytest",
    "pypi_sphinx",
    "pypi_tox",
    "pypi_twine"
  ]
}
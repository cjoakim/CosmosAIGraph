{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# tableschema-to-template\n\ngiven a [frictionless table schema](https://specs.frictionlessdata.io/table-schema/)\n(like [this](https://raw.githubusercontent.com/hubmapconsortium/tableschema-to-template/main/tests/fixtures/schema.yaml)),\ngenerate an excel template with input validation\n(like [this](https://raw.githubusercontent.com/hubmapconsortium/tableschema-to-template/main/tests/fixtures/template.xlsx)).\n\n## usage\n\ndownload a [sample `schema.yaml`](https://raw.githubusercontent.com/hubmapconsortium/tableschema-to-template/main/tests/fixtures/schema.yaml), and then:\n\n```sh\npip install tableschema-to-template\nts2xl.py schema.yaml template.xlsx\n# open with excel:\nopen template.xlsx\n```\n\nor to use inside python:\n```python\nfrom tableschema_to_template import create_xlsx\nschema = {'fields': [{\n  'name': 'a_number',\n  'description': 'a number!',\n  'type': 'number'\n}]}\ncreate_xlsx(schema, '/tmp/template.xlsx')\n```\n\nadditional docs:\n- [for cli users](https://github.com/hubmapconsortium/tableschema-to-template/blob/main/readme-cli.md#readme)\n- [for python users](https://github.com/hubmapconsortium/tableschema-to-template/blob/main/readme-py.md#readme)\n- [for project developers](https://github.com/hubmapconsortium/tableschema-to-template/blob/main/readme-dev.md#readme)\n\n## features\n\n- enum constraints transformed into pull-downs.\n- field descriptions transformed into comments in header.\n- float, integer, and boolean type validation, with range checks on numbers.\n\nmore details in the [changelog](https://github.com/hubmapconsortium/tableschema-to-template/blob/main/changelog.md#readme).\n\n## related work\n\nif you want to construct excel files programmatically, [xlsxwriter](https://xlsxwriter.readthedocs.io/) is great!\n\nfor validated data entry, from the frictionless community:\n- [`table-schema-resource-template`](https://pypi.org/project/table-schema-resource-template/): generates templates, but doesn't go beyond row headers. \n- [`data-curator`](https://github.com/qcif/data-curator): desktop application for data entry based on table schema.\n- [`csv-gg`](https://github.com/etalab/csv-gg): web app which serves data entry form, and uses [validata api](https://git.opendatafrance.net/validata/) for validation. \n\nfrom the biomedical ontologies community:\n- [`cedar`](https://more.metadatacenter.org/): data entry tool based on ontologies.\n- [`webulous`](https://www.ebi.ac.uk/spot/webulous/): google sheets plugin that adds pulldowns based on ontology terms.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "tableschema-to-template",
  "package_url": "https://pypi.org/project/tableschema-to-template/",
  "project_url": "https://pypi.org/project/tableschema-to-template/",
  "project_urls": {
    "Homepage": "https://github.com/hubmapconsortium/tableschema-to-template"
  },
  "release_url": "https://pypi.org/project/tableschema-to-template/0.0.13/",
  "requires_dist": [
    "jsonschema (>=1.0.0)",
    "pyyaml (>=3.13)",
    "xlsxwriter (>=1.2.8)"
  ],
  "requires_python": ">=3.6",
  "summary": "given a frictionless table schema, generates an excel template with input validation",
  "version": "0.0.13",
  "releases": [],
  "developers": [
    "chuck_mccallum",
    "mccallucc+tableschema@gmail.com"
  ],
  "kwds": "tableschema_to_template tableschema create_xlsx xlsxwriter schema",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_tableschema_to_template",
  "homepage": "https://github.com/hubmapconsortium/tableschema-to-template",
  "release_count": 13,
  "dependency_ids": [
    "pypi_jsonschema",
    "pypi_pyyaml",
    "pypi_xlsxwriter"
  ]
}
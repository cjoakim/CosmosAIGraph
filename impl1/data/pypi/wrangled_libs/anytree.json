{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://badge.fury.io/py/anytree.svg\n    :target: https://badge.fury.io/py/anytree\n\n.. image:: https://img.shields.io/pypi/dm/anytree.svg?label=pypi%20downloads\n   :target: https://pypi.python.org/pypi/anytree\n\n.. image:: https://readthedocs.org/projects/anytree/badge/?version=latest\n    :target: https://anytree.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://coveralls.io/repos/github/c0fec0de/anytree/badge.svg\n    :target: https://coveralls.io/github/c0fec0de/anytree\n\n.. image:: https://readthedocs.org/projects/anytree/badge/?version=stable\n    :target: https://anytree.readthedocs.io/en/stable\n\n.. image:: https://api.codeclimate.com/v1/badges/e6d325d6fd23a93aab20/maintainability\n   :target: https://codeclimate.com/github/c0fec0de/anytree/maintainability\n   :alt: maintainability\n\n.. image:: https://img.shields.io/pypi/pyversions/anytree.svg\n   :target: https://pypi.python.org/pypi/anytree\n\n.. image:: https://img.shields.io/badge/code%20style-pep8-brightgreen.svg\n   :target: https://www.python.org/dev/peps/pep-0008/\n\n.. image:: https://img.shields.io/badge/code%20style-pep257-brightgreen.svg\n   :target: https://www.python.org/dev/peps/pep-0257/\n\n.. image:: https://img.shields.io/badge/linter-pylint-%231674b1?style=flat\n   :target: https://www.pylint.org/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/github/contributors/c0fec0de/anytree.svg\n   :target: https://github.com/c0fec0de/anytree/graphs/contributors/\n\n.. image:: https://img.shields.io/badge/prs-welcome-brightgreen.svg?style=flat-square\n   :target: http://makeapullrequest.com\n\n.. image:: https://img.shields.io/github/issues-pr/c0fec0de/anytree.svg\n   :target: https://github.com/c0fec0de/anytree/pulls\n\n.. image:: https://img.shields.io/github/issues-pr-closed/c0fec0de/anytree.svg\n   :target: https://github.com/c0fec0de/anytree/pulls?q=is%3apr+is%3aclosed\n\n\nlinks\n=====\n\n* documentation_\n* pypi_\n* github_\n* changelog_\n* issues_\n* contributors_\n* if you enjoy anytree_\n\n.. image:: https://github.com/c0fec0de/anytree/raw/devel/docs/static/buymeacoffee.png\n   :target: https://www.buymeacoffee.com/1oyx0sw\n\n.. _anytree: https://anytree.readthedocs.io/en/stable/\n.. _documentation: https://anytree.readthedocs.io/en/stable/\n.. _pypi: https://pypi.org/project/anytree\n.. _github: https://github.com/c0fec0de/anytree\n.. _changelog: https://github.com/c0fec0de/anytree/releases\n.. _issues: https://github.com/c0fec0de/anytree/issues\n.. _contributors: https://github.com/c0fec0de/anytree/graphs/contributors\n\n.. _node: https://anytree.readthedocs.io/en/stable/api/anytree.node.html#anytree.node.node.node\n.. _rendertree: https://anytree.readthedocs.io/en/stable/api/anytree.render.html#anytree.render.rendertree\n.. _uniquedotexporter: https://anytree.readthedocs.io/en/stable/exporter/dotexporter.html#anytree.exporter.dotexporter.uniquedotexporter\n.. _nodemixin: https://anytree.readthedocs.io/en/stable/api/anytree.node.html#anytree.node.nodemixin.nodemixin\n.. _importers: https://anytree.readthedocs.io/en/stable/importer.html\n.. _exporters: https://anytree.readthedocs.io/en/stable/exporter.html\n\ngetting started\n---------------\n\n.. _getting_started:\n\nusage is simple.\n\n**construction**\n\n>>> from anytree import node, rendertree\n>>> udo = node(\"udo\")\n>>> marc = node(\"marc\", parent=udo)\n>>> lian = node(\"lian\", parent=marc)\n>>> dan = node(\"dan\", parent=udo)\n>>> jet = node(\"jet\", parent=dan)\n>>> jan = node(\"jan\", parent=dan)\n>>> joe = node(\"joe\", parent=dan)\n\n**node**\n\n>>> print(udo)\nnode('/udo')\n>>> print(joe)\nnode('/udo/dan/joe')\n\n**tree**\n\n>>> for pre, fill, node in rendertree(udo):\n...     print(\"%s%s\" % (pre, node.name))\nudo\n\u251c\u2500\u2500 marc\n\u2502   \u2514\u2500\u2500 lian\n\u2514\u2500\u2500 dan\n    \u251c\u2500\u2500 jet\n    \u251c\u2500\u2500 jan\n    \u2514\u2500\u2500 joe\n\nfor details see node_ and rendertree_.\n\n**visualization**\n\n>>> from anytree.exporter import uniquedotexporter\n>>> # graphviz needs to be installed for the next line!\n>>> uniquedotexporter(udo).to_picture(\"udo.png\")\n\n.. image:: https://anytree.readthedocs.io/en/latest/_images/udo.png\n\nthe uniquedotexporter_ can be started at any node and has various formatting hookups:\n\n>>> uniquedotexporter(dan,\n...                   nodeattrfunc=lambda node: \"fixedsize=true, width=1, height=1, shape=diamond\",\n...                   edgeattrfunc=lambda parent, child: \"style=bold\"\n... ).to_picture(\"dan.png\")\n\n.. image:: https://anytree.readthedocs.io/en/latest/_images/dan.png\n\nthere are various other importers_ and exporters_.\n\n**manipulation**\n\na second tree:\n\n>>> mary = node(\"mary\")\n>>> urs = node(\"urs\", parent=mary)\n>>> chris = node(\"chris\", parent=mary)\n>>> marta = node(\"marta\", parent=mary)\n>>> print(rendertree(mary))\nnode('/mary')\n\u251c\u2500\u2500 node('/mary/urs')\n\u251c\u2500\u2500 node('/mary/chris')\n\u2514\u2500\u2500 node('/mary/marta')\n\nappend:\n\n>>> udo.parent = mary\n>>> print(rendertree(mary))\nnode('/mary')\n\u251c\u2500\u2500 node('/mary/urs')\n\u251c\u2500\u2500 node('/mary/chris')\n\u251c\u2500\u2500 node('/mary/marta')\n\u2514\u2500\u2500 node('/mary/udo')\n    \u251c\u2500\u2500 node('/mary/udo/marc')\n    \u2502   \u2514\u2500\u2500 node('/mary/udo/marc/lian')\n    \u2514\u2500\u2500 node('/mary/udo/dan')\n        \u251c\u2500\u2500 node('/mary/udo/dan/jet')\n        \u251c\u2500\u2500 node('/mary/udo/dan/jan')\n        \u2514\u2500\u2500 node('/mary/udo/dan/joe')\n\nsubtree rendering:\n\n>>> print(rendertree(marc))\nnode('/mary/udo/marc')\n\u2514\u2500\u2500 node('/mary/udo/marc/lian')\n\ncut:\n\n>>> dan.parent = none\n>>> print(rendertree(dan))\nnode('/dan')\n\u251c\u2500\u2500 node('/dan/jet')\n\u251c\u2500\u2500 node('/dan/jan')\n\u2514\u2500\u2500 node('/dan/joe')\n\n**extending any python class to become a tree node**\n\nthe entire tree magic is encapsulated by nodemixin_\nadd it as base class and the class becomes a tree node:\n\n>>> from anytree import nodemixin, rendertree\n>>> class mybaseclass(object):  # just an example of a base class\n...     foo = 4\n>>> class myclass(mybaseclass, nodemixin):  # add node feature\n...     def __init__(self, name, length, width, parent=none, children=none):\n...         super(myclass, self).__init__()\n...         self.name = name\n...         self.length = length\n...         self.width = width\n...         self.parent = parent\n...         if children:\n...             self.children = children\n\njust set the `parent` attribute to reflect the tree relation:\n\n>>> my0 = myclass('my0', 0, 0)\n>>> my1 = myclass('my1', 1, 0, parent=my0)\n>>> my2 = myclass('my2', 0, 2, parent=my0)\n\n>>> for pre, fill, node in rendertree(my0):\n...     treestr = u\"%s%s\" % (pre, node.name)\n...     print(treestr.ljust(8), node.length, node.width)\nmy0      0 0\n\u251c\u2500\u2500 my1  1 0\n\u2514\u2500\u2500 my2  0 2\n\nthe `children` can be used likewise:\n\n>>> my0 = myclass('my0', 0, 0, children=[\n...     myclass('my1', 1, 0),\n...     myclass('my2', 0, 2),\n... ])\n\n>>> for pre, fill, node in rendertree(my0):\n...     treestr = u\"%s%s\" % (pre, node.name)\n...     print(treestr.ljust(8), node.length, node.width)\nmy0      0 0\n\u251c\u2500\u2500 my1  1 0\n\u2514\u2500\u2500 my2  0 2\n\ndocumentation\n-------------\n\nplease see the documentation_ for all details.\n\ninstallation\n------------\n\nto install the `anytree` module run::\n\n    pip install anytree\n\nif you do not have write-permissions to the python installation, try::\n\n    pip install anytree --user\n",
  "docs_url": null,
  "keywords": "tree,tree data,treelib,tree walk,tree structure",
  "license": "apache-2.0",
  "name": "anytree",
  "package_url": "https://pypi.org/project/anytree/",
  "project_url": "https://pypi.org/project/anytree/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/anytree/2.12.1/",
  "requires_dist": [
    "six"
  ],
  "requires_python": ">=3.7.2,<4",
  "summary": "powerful and lightweight python tree data structure with various plugins",
  "version": "2.12.1",
  "releases": [],
  "developers": [
    "c0fec0de",
    "c0fec0de@gmail.com"
  ],
  "kwds": "treelib anytree_ anytree _anytree _rendertree",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_anytree",
  "homepage": "",
  "release_count": 36,
  "dependency_ids": [
    "pypi_six"
  ]
}
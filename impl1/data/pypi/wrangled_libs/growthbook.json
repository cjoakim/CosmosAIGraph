{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "# growthbook python sdk\n\npowerful feature flagging and a/b testing for python apps.\n\n![build status](https://github.com/growthbook/growthbook-python/workflows/build/badge.svg)\n\n-   **lightweight and fast**\n-   **local evaluation**, no network requests required\n-   python 3.6+\n-   100% test coverage\n-   flexible **targeting**\n-   **use your existing event tracking** (ga, segment, mixpanel, custom)\n-   **remote configuration** to change feature flags without deploying new code\n\n## installation\n\n`pip install growthbook` (recommended) or copy `growthbook.py` into your project\n\n## quick usage\n\n```python\nfrom growthbook import growthbook\n\n# user attributes for targeting and experimentation\nattributes = {\n  \"id\": \"123\",\n  \"customuserattribute\": \"foo\"\n}\n\ndef on_experiment_viewed(experiment, result):\n  # use whatever event tracking system you want\n  analytics.track(attributes[\"id\"], \"experiment viewed\", {\n    'experimentid': experiment.key,\n    'variationid': result.variationid\n  })\n\n# create a growthbook instance\ngb = growthbook(\n  attributes = attributes,\n  on_experiment_viewed = on_experiment_viewed,\n  api_host = \"https://cdn.growthbook.io\",\n  client_key = \"sdk-abc123\"\n)\n\n# load features from the growthbook api with caching\ngb.load_features()\n\n# simple on/off feature gating\nif gb.is_on(\"my-feature\"):\n  print(\"my feature is on!\")\n\n# get the value of a feature with a fallback\ncolor = gb.get_feature_value(\"button-color-feature\", \"blue\")\n```\n\n### web frameworks (django, flask, etc.)\n\nfor web frameworks, you should create a new `growthbook` instance for every incoming request and call `destroy()` at the end of the request to clean up resources.\n\nin django, for example, this is best done with a simple middleware:\n\n```python\nfrom growthbook import growthbook\n\ndef growthbook_middleware(get_response):\n    def middleware(request):\n        request.gb = growthbook(\n          # ...\n        )\n        request.gb.load_features()\n\n        response = get_response(request)\n\n        request.gb.destroy() # cleanup\n\n        return response\n    return middleware\n```\n\nthen, you can easily use growthbook in any of your views:\n\n```python\ndef index(request):\n    feature_enabled = request.gb.is_on(\"my-feature\")\n    # ...\n```\n\n## loading features\n\nthere are two ways to load feature flags into the growthbook sdk. you can either use the built-in fetching/caching logic or implement your own custom solution.\n\n### built-in fetching and caching\n\nto use the built-in fetching and caching logic, in the `growthbook` constructor, pass in your growthbook `api_host` and `client_key`. if you have encryption enabled for your growthbook endpoint, you also need to pass the `decryption_key` into the constructor.\n\nthen, call the `load_features()` method to initiate the http request with a cache layer.\n\nhere's a full example:\n\n```python\ngb = growthbook(\n  api_host = \"https://cdn.growthbook.io\",\n  client_key = \"sdk-abc123\",\n  # how long to cache features in seconds (optional, default 60s)\n  cache_ttl = 60,\n)\ngb.load_features()\n```\n\n#### caching\n\ngrowthbook comes with a custom in-memory cache. if you run python in a multi-process mode, the different processes cannot share memory, so you likely want to switch to a distributed cache system like redis instead.\n\nhere is an example of using redis:\n\n```python\nfrom redis import redis\nimport json\nfrom growthbook import growthbook, abstractfeaturecache, feature_repo\n\nclass redisfeaturecache(abstractfeaturecache):\n  def __init__(self):\n    self.r = redis(host='localhost', port=6379)\n    self.prefix = \"gb:\"\n\n  def get(self, key: str):\n    data = self.r.get(self.prefix + key)\n    # data stored as a json string, parse into dict before returning\n    return none if data is none else json.loads(data)\n\n  def set(self, key: str, value: dict, ttl: int) -> none:\n    self.r.set(self.prefix + key, json.dumps(value))\n    self.r.expire(self.prefix + key, ttl)\n\n# configure growthbook to use your custom cache class\nfeature_repo.set_cache(redisfeaturecache())\n```\n\n### custom implementation\n\nif you prefer to handle the entire fetching/caching logic yourself, you can just pass in a `dict` of features from the growthbook api directly into the constructor:\n\n```python\n# from the growthbook api\nfeatures = {'my-feature':{'defaultvalue':false}}\n\ngb = growthbook(\n  features = features\n)\n```\n\nnote: when doing this, you do not need to specify your `api_host` or `client_key` and you don't need to call `gb.load_features()`.\n\n## growthbook class\n\nthe growthbook constructor has the following parameters:\n\n-   **enabled** (`bool`) - flag to globally disable all experiments. default true.\n-   **attributes** (`dict`) - dictionary of user attributes that are used for targeting and to assign variations\n-   **url** (`str`) - the url of the current request (if applicable)\n-   **qa_mode** (`boolean`) - if true, random assignment is disabled and only explicitly forced variations are used.\n-   **on_experiment_viewed** (`callable`) - a function that takes `experiment` and `result` as arguments.\n-   **api_host** (`str`) - the growthbook api host to fetch feature flags from. defaults to `https://cdn.growthbook.io`\n-   **client_key** (`str`) - the client key that will be passed to the api host to fetch feature flags\n-   **decryption_key** (`str`) - if the growthbook api endpoint has encryption enabled, specify the decryption key here\n-   **cache_ttl** (`int`) - how long to cache features in-memory from the growthbook api (seconds, default `60`)\n-   **features** (`dict`) - feature definitions from the growthbook api (only required if `client_key` is not specified)\n-   **forced_variations** (`dict`) - dictionary of forced experiment variations (used for qa)\n\nthere are also getter and setter methods for features and attributes if you need to update them later in the request:\n\n```python\ngb.set_features(gb.get_features())\ngb.set_attributes(gb.get_attributes())\n```\n\n### attributes\n\nyou can specify attributes about the current user and request. these are used for two things:\n\n1.  feature targeting (e.g. paid users get one value, free users get another)\n2.  assigning persistent variations in a/b tests (e.g. user id \"123\" always gets variation b)\n\nattributes can be any json data type - boolean, integer, float, string, list, or dict.\n\n```python\nattributes = {\n  'id': \"123\",\n  'loggedin': true,\n  'age': 21.5,\n  'tags': [\"tag1\", \"tag2\"],\n  'account': {\n    'age': 90\n  }\n}\n\n# pass into constructor\ngb = growthbook(attributes = attributes)\n\n# or set later\ngb.set_attributes(attributes)\n```\n\n### tracking experiments\n\nany time an experiment is run to determine the value of a feature, you want to track that event in your analytics system.\n\nyou can use the `on_experiment_viewed` option to do this:\n\n```python\nfrom growthbook import growthbook, experiment, result\n\ndef on_experiment_viewed(experiment: experiment, result: result):\n  # use whatever event tracking system you want\n  analytics.track(attributes[\"id\"], \"experiment viewed\", {\n    'experimentid': experiment.key,\n    'variationid': result.variationid\n  })\n\n# pass into constructor\ngb = growthbook(\n  on_experiment_viewed = on_experiment_viewed\n)\n```\n\n## using features\n\nthere are 3 main methods for interacting with features.\n\n-   `gb.is_on(\"feature-key\")` returns true if the feature is on\n-   `gb.is_off(\"feature-key\")` returns false if the feature is on\n-   `gb.get_feature_value(\"feature-key\", \"default\")` returns the value of the feature with a fallback\n\nin addition, you can use `gb.evalfeature(\"feature-key\")` to get back a `featureresult` object with the following properties:\n\n-   **value** - the json-decoded value of the feature (or `none` if not defined)\n-   **on** and **off** - the json-decoded value cast to booleans\n-   **source** - why the value was assigned to the user. one of `unknownfeature`, `defaultvalue`, `force`, or `experiment`\n-   **experiment** - information about the experiment (if any) which was used to assign the value to the user\n-   **experimentresult** - the result of the experiment (if any) which was used to assign the value to the user\n\n## inline experiments\n\ninstead of declaring all features up-front and referencing them by ids in your code, you can also just run an experiment directly. this is done with the `run` method:\n\n```python\nfrom growthbook import experiment\n\nexp = experiment(\n  key = \"my-experiment\",\n  variations = [\"red\", \"blue\", \"green\"]\n)\n\n# either \"red\", \"blue\", or \"green\"\nprint(gb.run(exp).value)\n```\n\nas you can see, there are 2 required parameters for experiments, a string key, and an array of variations. variations can be any data type, not just strings.\n\nthere are a number of additional settings to control the experiment behavior:\n\n-   **key** (`str`) - the globally unique tracking key for the experiment\n-   **variations** (`any[]`) - the different variations to choose between\n-   **seed** (`str`) - added to the user id when hashing to determine a variation. defaults to the experiment `key`\n-   **weights** (`float[]`) - how to weight traffic between variations. must add to 1.\n-   **coverage** (`float`) - what percent of users should be included in the experiment (between 0 and 1, inclusive)\n-   **condition** (`dict`) - targeting conditions\n-   **force** (`int`) - all users included in the experiment will be forced into the specified variation index\n-   **hashattribute** (`string`) - what user attribute should be used to assign variations (defaults to \"id\")\n-   **hashversion** (`int`) - what version of our hashing algorithm to use. we recommend using the latest version `2`.\n-   **namespace** (`tuple[str,float,float]`) - used to run mutually exclusive experiments.\n\nhere's an example that uses all of them:\n\n```python\nexp = experiment(\n  key=\"my-test\",\n  # variations can be a list of any data type\n  variations=[0, 1],\n  # if this changes, it will re-randomize all users in the experiment\n  seed=\"abcdef123456\",\n  # run a 40/60 experiment instead of the default even split (50/50)\n  weights=[0.4, 0.6],\n  # only include 20% of users in the experiment\n  coverage=0.2,\n  # targeting condition using a mongodb-like syntax\n  condition={\n    'country': 'us',\n    'browser': {\n      '$in': ['chrome', 'firefox']\n    }\n  },\n  # use an alternate attribute for assigning variations (default is 'id')\n  hashattribute=\"sessionid\",\n  # use the latest hashing algorithm\n  hashversion=2,\n  # includes the first 50% of users in the \"pricing\" namespace\n  # another experiment with a non-overlapping range will be mutually exclusive (e.g. [0.5, 1])\n  namespace=(\"pricing\", 0, 0.5),\n)\n```\n\n### inline experiment return value\n\na call to `run` returns a `result` object with a few useful properties:\n\n```python\nresult = gb.run(exp)\n\n# if user is part of the experiment\nprint(result.inexperiment) # true or false\n\n# the index of the assigned variation\nprint(result.variationid) # e.g. 0 or 1\n\n# the value of the assigned variation\nprint(result.value) # e.g. \"a\" or \"b\"\n\n# if the variation was randomly assigned by hashing user attributes\nprint(result.hashused) # true or false\n\n# the user attribute used to assign a variation\nprint(result.hashattribute) # \"id\"\n\n# the value of that attribute\nprint(result.hashvalue) # e.g. \"123\"\n```\n\nthe `inexperiment` flag will be false if the user was excluded from being part of the experiment for any reason (e.g. failed targeting conditions).\n\nthe `hashused` flag will only be true if the user was randomly assigned a variation. if the user was forced into a specific variation instead, this flag will be false.\n\n### example experiments\n\n3-way experiment with uneven variation weights:\n\n```python\ngb.run(experiment(\n  key = \"3-way-uneven\",\n  variations = [\"a\",\"b\",\"c\"],\n  weights = [0.5, 0.25, 0.25]\n))\n```\n\nslow rollout (10% of users who match the targeting condition):\n\n```python\n# user is marked as being in \"qa\" and \"beta\"\ngb = growthbook(\n  attributes = {\n    \"id\": \"123\",\n    \"beta\": true,\n    \"qa\": true,\n  },\n)\n\ngb.run(experiment(\n  key = \"slow-rollout\",\n  variations = [\"a\", \"b\"],\n  coverage = 0.1,\n  condition = {\n    'beta': true\n  }\n))\n```\n\ncomplex variations\n\n```python\nresult = gb.run(experiment(\n  key = \"complex-variations\",\n  variations = [\n    (\"blue\", \"large\"),\n    (\"green\", \"small\")\n  ],\n))\n\n# either \"blue,large\" or \"green,small\"\nprint(result.value[0] + \",\" + result.value[1])\n```\n\nassign variations based on something other than user id\n\n```python\ngb = growthbook(\n  attributes = {\n    \"id\": \"123\",\n    \"company\": \"growthbook\"\n  }\n)\n\n# users in the same company will always get the same variation\ngb.run(experiment(\n  key = \"by-company-id\",\n  variations = [\"a\", \"b\"],\n  hashattribute = \"company\"\n))\n```\n\n## logging\n\nthe growthbook sdk uses a python logger with the name `growthbook` and includes helpful info for debugging as well as warnings/errors if something is misconfigured.\n\nhere's an example of logging to the console\n\n```python\nimport logging\n\nlogger = logging.getlogger('growthbook')\nlogger.setlevel(logging.debug)\n\nhandler = logging.streamhandler()\nformatter = logging.formatter('%(asctime)s %(name)s %(levelname)s %(message)s')\nhandler.setformatter(formatter)\nlogger.addhandler(handler)\n```\n\n\n",
  "docs_url": null,
  "keywords": "growthbook",
  "license": "mit",
  "name": "growthbook",
  "package_url": "https://pypi.org/project/growthbook/",
  "project_url": "https://pypi.org/project/growthbook/",
  "project_urls": {
    "Homepage": "https://github.com/growthbook/growthbook-python"
  },
  "release_url": "https://pypi.org/project/growthbook/1.0.0/",
  "requires_dist": [
    "cryptography",
    "typing-extensions",
    "urllib3"
  ],
  "requires_python": ">=3.6",
  "summary": "powerful feature flagging and a/b testing for python apps",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "growthbook",
    "hello@growthbook.io"
  ],
  "kwds": "growthbook growthbook_middleware on_experiment_viewed analytics experimentid",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_growthbook",
  "homepage": "https://github.com/growthbook/growthbook-python",
  "release_count": 6,
  "dependency_ids": [
    "pypi_cryptography",
    "pypi_typing_extensions",
    "pypi_urllib3"
  ]
}
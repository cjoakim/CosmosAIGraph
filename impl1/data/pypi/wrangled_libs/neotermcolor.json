{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: software development :: libraries",
    "topic :: terminals",
    "topic :: text processing"
  ],
  "description": "# modern ansii color formatting for output in terminal\n\n## what is neotermcolor\n\nneotermcolor library is a fork of old good\n[termcolor](https://pypi.org/project/termcolor/), which is widely used. i like\nit very much, but unfortunately last release was long time ago.\n\neverything is fully backward compatible with original termcolor:\n\n```python\nimport sys\nfrom neotermcolor import colored, cprint\n\ntext = colored('hello, world!', 'red', attrs=['reverse', 'blink'])\nprint(text)\ncprint('hello, world!', 'green', 'on_red')\n\nprint_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan')\nprint_red_on_cyan('hello, world!')\nprint_red_on_cyan('hello, universe!')\n\nfor i in range(10):\n    cprint(i, 'magenta', end=' ')\n\ncprint(\"attention!\", 'red', attrs=['bold'], file=sys.stderr)\n```\n\n## installation\n\n```shell\n    pip3 install neotermcolor\n```\n\n## new features\n\n### it works in windows terminal\n\nyep, right out-of-the-box (tested on windows 10)\n\n### it is readline-safe\n\nwhen you mix ansi color codes with readline input, it may cause a problem.\nneotermcolor has a workaround:\n\n* new param for **cprint** and **colored**: *readline_safe=true*\n* you may also turn on readline-safe colorizing by default, setting\n\n```python\n    import neotermcolor\n\n    neotermcolor.readline_always_safe = true\n```\n\n### it has 256-color palette\n\nif color code is specified as an integer (0..255), ansi 256-color palette is\nused. you may specify color codes both for foreground and background and mix\nthem with other attributes:\n\n```python\n    from neotermcolor import cprint\n\n    cprint('underline light-green (119) on grey (237)', 119, 237, ['underline'])\n```\n\n### it is tty-aware\n\nneotermcolor will not colorize text if process stdout or stderr is not a tty.\n\nthis feature is on by default, but you may turn it off:\n\n```python\n    import neotermcolor\n\n    neotermcolor.tty_aware = false\n```\n\n### it has palette overriding\n\nyou may define own color names or override existing ones: e.g. you may use\nstandard palette for 16-color terminals, but override it when your program\ndetect terminal with 256-color support or when it's forced by user:\n\n```python\n    import neotermcolor\n\n    neotermcolor.set_color('red', 197)\n    neotermcolor.cprint('red color is now purple', 'red')\n```\n\n### it has styles\n\nstyles are alternative to classical defining a \"style\" for certain type of\nmessages with *functools.partial* or *lambda*. a style may contain color,\non_color and attributes:\n\n```python\n    import neotermcolor\n\n    neotermcolor.set_style('error', color='red', attrs='bold')\n    neotermcolor.cprint('error message', style='error')\n    # or\n    neotermcolor.cprint('error message 2', '@error')\n```\n\nnote: if you specify both style and e.g. attrs, the style attrs will be\noverriden.\n\n### single attribute can now be specified as a string\n\n```python\n    # as list or tuple\n    cprint('test', attrs=['bold'])\n    # as a string\n    cprint('test', attrs='bold')\n```\n\n### how to use it instead of old termcolor in the existing projects\n\n```python\n    import neotermcolor as termcolor\n```\n\ni'll do my best to keep it backward compatible with original termcolor.\n\nenjoy!",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "neotermcolor",
  "package_url": "https://pypi.org/project/neotermcolor/",
  "project_url": "https://pypi.org/project/neotermcolor/",
  "project_urls": {
    "Homepage": "https://github.com/alttch/neotermcolor"
  },
  "release_url": "https://pypi.org/project/neotermcolor/2.0.10/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "fork of termcolor library",
  "version": "2.0.10",
  "releases": [],
  "developers": [
    "altertech",
    "div@altertech.com"
  ],
  "kwds": "print_red_on_cyan termcolor neotermcolor on_color set_color",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_neotermcolor",
  "homepage": "https://github.com/alttch/neotermcolor",
  "release_count": 10,
  "dependency_ids": []
}
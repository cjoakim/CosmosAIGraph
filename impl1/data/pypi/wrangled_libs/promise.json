{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "promise\n=======\n\nthis is a implementation of promises in python. it is a super set of\npromises/a+ designed to have readable, performant code and to provide\njust the extensions that are absolutely necessary for using promises in\npython.\n\nits fully compatible with the `promises/a+\nspec <http://promises-aplus.github.io/promises-spec/>`__\n\n|travis| |pypi| |coveralls|\n\ninstallation\n------------\n\n::\n\n    $ pip install promise\n\nusage\n-----\n\nthe example below shows how you can load the promise library. it then\ndemonstrates creating a promise from scratch. you simply call\n``promise(fn)``. there is a complete specification for what is returned\nby this method in\n`promises/a+ <http://promises-aplus.github.com/promises-spec/>`__.\n\n.. code:: python\n\n    from promise import promise\n\n    promise = promise(\n        lambda resolve, reject: resolve('resolved!')\n    )\n\napi\n---\n\nbefore all examples, you will need:\n\n.. code:: python\n\n    from promise import promise\n\npromise(resolver)\n~~~~~~~~~~~~~~~~~\n\nthis creates and returns a new promise. ``resolver`` must be a function.\nthe ``resolver`` function is passed two arguments:\n\n1. ``resolve`` should be called with a single argument. if it is called\n   with a non-promise value then the promise is fulfilled with that\n   value. if it is called with a promise (a) then the returned promise\n   takes on the state of that new promise (a).\n2. ``reject`` should be called with a single argument. the returned\n   promise will be rejected with that argument.\n\nclass methods\n~~~~~~~~~~~~~\n\nthese methods are invoked by calling ``promise.methodname``.\n\npromise.resolve(value)\n^^^^^^^^^^^^^^^^^^^^^^\n\nconverts values and foreign promises into promises/a+ promises. if you\npass it a value then it returns a promise for that value. if you pass it\nsomething that is close to a promise (such as a jquery attempt at a\npromise) it returns a promise that takes on the state of ``value``\n(rejected or fulfilled).\n\npromise.reject(value)\n^^^^^^^^^^^^^^^^^^^^^\n\nreturns a rejected promise with the given value.\n\npromise.all(list)\n^^^^^^^^^^^^^^^^^\n\nreturns a promise for a list. if it is called with a single argument\nthen this returns a promise for a copy of that list with any promises\nreplaced by their fulfilled values. e.g.\n\n.. code:: python\n\n    p = promise.all([promise.resolve('a'), 'b', promise.resolve('c')]) \\\n           .then(lambda res: res == ['a', 'b', 'c'])\n\n    assert p.get() is true\n\npromise.cast(obj)\n^^^^^^^^^^^^^^^^^\n\nthis function wraps the ``obj`` act as a ``promise`` if possible. python\n``future``\\ s are supported, with a callback to ``promise.done`` when\nresolved. have the same effects as ``promise.resolve(obj)``.\n\npromise.for\\_dict(d)\n^^^^^^^^^^^^^^^^^^^^\n\na special function that takes a dictionary of promises and turns them\ninto a promise for a dictionary of values. in other words, this turns an\ndictionary of promises for values into a promise for a dictionary of\nvalues.\n\npromise.is\\_thenable(obj)\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthis function checks if the ``obj`` is a ``promise``, or could be\n``cast``\\ ed.\n\npromise.promisify(func)\n^^^^^^^^^^^^^^^^^^^^^^^\n\nthis function wraps the result of calling ``func`` in a ``promise``\ninstance.\n\ninstance methods\n~~~~~~~~~~~~~~~~\n\nthese methods are invoked on a promise instance by calling\n``mypromise.methodname``\n\npromise.then(did\\_fulfill, did\\_reject)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthis method follows the `promises/a+\nspec <http://promises-aplus.github.io/promises-spec/>`__. it explains\nthings very clearly so i recommend you read it.\n\neither ``did_fulfill`` or ``did_reject`` will be called and they will\nnot be called more than once. they will be passed a single argument and\nwill always be called asynchronously (in the next turn of the event\nloop).\n\nif the promise is fulfilled then ``did_fulfill`` is called. if the\npromise is rejected then ``did_reject`` is called.\n\nthe call to ``.then`` also returns a promise. if the handler that is\ncalled returns a promise, the promise returned by ``.then`` takes on the\nstate of that returned promise. if the handler that is called returns a\nvalue that is not a promise, the promise returned by ``.then`` will be\nfulfilled with that value. if the handler that is called throws an\nexception then the promise returned by ``.then`` is rejected with that\nexception.\n\npromise.catch(did\\_reject)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsugar for ``promise.then(none, did_reject)``, to mirror ``catch`` in\nsynchronous code.\n\npromise.done(did\\_fulfill, did\\_reject)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthe same semantics as ``.then`` except that it does not return a promise\nand any exceptions are re-thrown so that they can be logged (crashing\nthe application in non-browser environments)\n\ncontributing\n============\n\nafter cloning this repo, ensure dependencies are installed by running:\n\n.. code:: sh\n\n    pip install -e \".[test]\"\n\nafter developing, the full test suite can be evaluated by running:\n\n.. code:: sh\n\n    py.test tests --cov=promise --benchmark-skip # use -v -s for verbose mode\n\nyou can also run the benchmarks with:\n\n.. code:: sh\n\n    py.test tests --benchmark-only\n\nstatic type checking\n--------------------\n\npython type annotations are very useful for making sure we use the\nlibary the way is intended.\n\nyou can run ``mypy`` static type checker:\n\n.. code:: sh\n\n    pip install mypy\n    mypy promise  --ignore-missing-imports\n\nor ``pyre``:\n\n.. code:: sh\n\n    pip install pyre-check\n    pyre --source-directory promise check\n\nnotes\n=====\n\nthis package is heavily insipired in\n`aplus <https://github.com/xogeny/aplus>`__.\n\nlicense\n-------\n\n`mit\nlicense <https://github.com/syrusakbary/promise/blob/master/license>`__\n\n.. |travis| image:: https://img.shields.io/travis/syrusakbary/promise.svg?style=flat\n   :target: https://travis-ci.org/syrusakbary/promise\n.. |pypi| image:: https://img.shields.io/pypi/v/promise.svg?style=flat\n   :target: https://pypi.python.org/pypi/promise\n.. |coveralls| image:: https://coveralls.io/repos/syrusakbary/promise/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/syrusakbary/promise?branch=master\n",
  "docs_url": null,
  "keywords": "concurrent future deferred promise",
  "license": "mit",
  "name": "promise",
  "package_url": "https://pypi.org/project/promise/",
  "project_url": "https://pypi.org/project/promise/",
  "project_urls": {
    "Download": "https://github.com/syrusakbary/promise/releases",
    "Homepage": "https://github.com/syrusakbary/promise"
  },
  "release_url": "https://pypi.org/project/promise/2.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "promises/a+ implementation for python",
  "version": "2.3",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "promises pip deferred promise pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_promise",
  "homepage": "https://github.com/syrusakbary/promise",
  "release_count": 26,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "license :: osi approved :: gnu lesser general public license v2 or later (lgplv2+)",
    "license :: osi approved :: mozilla public license 1.1 (mpl 1.1)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet"
  ],
  "description": "===\ntld\n===\nextract the top level domain (tld) from the url given. list of tld names is\ntaken from `public suffix <https://publicsuffix.org/list/public_suffix_list.dat>`_.\n\noptionally raises exceptions on non-existing tlds or silently fails (if\n``fail_silently`` argument is set to true).\n\n.. image:: https://img.shields.io/pypi/v/tld.svg\n   :target: https://pypi.python.org/pypi/tld\n   :alt: pypi version\n\n.. image:: https://img.shields.io/pypi/pyversions/tld.svg\n    :target: https://pypi.python.org/pypi/tld/\n    :alt: supported python versions\n\n.. image:: https://github.com/barseghyanartur/tld/workflows/test/badge.svg\n   :target: https://github.com/barseghyanartur/tld/actions\n   :alt: build status\n\n.. image:: https://readthedocs.org/projects/tld/badge/?version=latest\n    :target: http://tld.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n.. image:: https://img.shields.io/badge/license-mpl--1.1%20or%20gpl--2.0--only%20or%20lgpl--2.1--or--later-blue.svg\n   :target: https://github.com/barseghyanartur/tld/#license\n   :alt: mpl-1.1 or gpl-2.0-only or lgpl-2.1-or-later\n\n.. image:: https://coveralls.io/repos/github/barseghyanartur/tld/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/barseghyanartur/tld?branch=master\n    :alt: coverage\n\nprerequisites\n=============\n- python 3.7, 3.8, 3.9, 3.10 or 3.11.\n\ndocumentation\n=============\ndocumentation is available on `read the docs\n<http://tld.readthedocs.io/>`_.\n\ninstallation\n============\nlatest stable version on pypi:\n\n.. code-block:: sh\n\n    pip install tld\n\nor latest stable version from github:\n\n.. code-block:: sh\n\n    pip install https://github.com/barseghyanartur/tld/archive/stable.tar.gz\n\nusage examples\n==============\nin addition to examples below, see the `jupyter notebook <jupyter/>`_\nworkbook file.\n\nget the tld name **as string** from the url given\n-------------------------------------------------\n.. code-block:: python\n\n    from tld import get_tld\n\n    get_tld(\"http://www.google.co.uk\")\n    # 'co.uk'\n\n    get_tld(\"http://www.google.idontexist\", fail_silently=true)\n    # none\n\nget the tld as **an object**\n----------------------------\n.. code-block:: python\n\n    from tld import get_tld\n\n    res = get_tld(\"http://some.subdomain.google.co.uk\", as_object=true)\n\n    res\n    # 'co.uk'\n\n    res.subdomain\n    # 'some.subdomain'\n\n    res.domain\n    # 'google'\n\n    res.tld\n    # 'co.uk'\n\n    res.fld\n    # 'google.co.uk'\n\n    res.parsed_url\n    # splitresult(\n    #     scheme='http',\n    #     netloc='some.subdomain.google.co.uk',\n    #     path='',\n    #     query='',\n    #     fragment=''\n    # )\n\nget tld name, **ignoring the missing protocol**\n-----------------------------------------------\n.. code-block:: python\n\n    from tld import get_tld, get_fld\n\n    get_tld(\"www.google.co.uk\", fix_protocol=true)\n    # 'co.uk'\n\n    get_fld(\"www.google.co.uk\", fix_protocol=true)\n    # 'google.co.uk'\n\nreturn tld parts as tuple\n-------------------------\n.. code-block:: python\n\n    from tld import parse_tld\n\n    parse_tld('http://www.google.com')\n    # 'com', 'google', 'www'\n\nget the first level domain name **as string** from the url given\n----------------------------------------------------------------\n.. code-block:: python\n\n    from tld import get_fld\n\n    get_fld(\"http://www.google.co.uk\")\n    # 'google.co.uk'\n\n    get_fld(\"http://www.google.idontexist\", fail_silently=true)\n    # none\n\ncheck if some tld is a valid tld\n--------------------------------\n\n.. code-block:: python\n\n    from tld import is_tld\n\n    is_tld('co.uk)\n    # true\n\n    is_tld('uk')\n    # true\n\n    is_tld('tld.doesnotexist')\n    # false\n\n    is_tld('www.google.com')\n    # false\n\nupdate the list of tld names\n============================\nto update/sync the tld names with the most recent versions run the following\nfrom your terminal:\n\n.. code-block:: sh\n\n    update-tld-names\n\nor simply do:\n\n.. code-block:: python\n\n    from tld.utils import update_tld_names\n\n    update_tld_names()\n\nnote, that this will update all registered tld source parsers (not only the\nlist of tld names taken from mozilla). in order to run the update for a single\nparser, append ``uid`` of that parser as argument.\n\n.. code-block:: sh\n\n    update-tld-names mozilla\n\ncustom tld parsers\n==================\nby default list of tld names is taken from mozilla. parsing implemented in\nthe ``tld.utils.mozillatldsourceparser`` class. if you want to use another\nparser, subclass the ``tld.base.basetldsourceparser``, provide ``uid``,\n``source_url``, ``local_path`` and implement the ``get_tld_names`` method.\ntake the ``tld.utils.mozillatldsourceparser`` as a good example of such\nimplementation. you could then use ``get_tld`` (as well as other ``tld``\nmodule functions) as shown below:\n\n.. code-block:: python\n\n    from tld import get_tld\n    from some.module import customtldsourceparser\n\n    get_tld(\n        \"http://www.google.co.uk\",\n        parser_class=customtldsourceparser\n    )\n\ncustom list of tld names\n========================\nyou could maintain your own custom version of the tld names list (even multiple\nones) and use them simultaneously with built in tld names list.\n\nyou would then store them locally and provide a path to it as shown below:\n\n.. code-block:: python\n\n    from tld import get_tld\n    from tld.utils import basemozillatldsourceparser\n\n    class custombasemozillatldsourceparser(basemozillatldsourceparser):\n\n        uid: str = 'custom_mozilla'\n        local_path: str = 'tests/res/effective_tld_names_custom.dat.txt'\n\n    get_tld(\n        \"http://www.foreverchild\",\n        parser_class=custombasemozillatldsourceparser\n    )\n    # 'foreverchild'\n\nsame goes for first level domain names:\n\n.. code-block:: python\n\n    from tld import get_fld\n\n    get_fld(\n        \"http://www.foreverchild\",\n        parser_class=custombasemozillatldsourceparser\n    )\n    # 'www.foreverchild'\n\nnote, that in both examples shown above, there the original tld names file has\nbeen modified in the following way:\n\n.. code-block:: text\n\n    ...\n    // ===begin icann domains===\n\n    // this one actually does not exist, added for testing purposes\n    foreverchild\n    ...\n\nfree up resources\n=================\nto free up memory occupied by loading of custom tld names, use\n``reset_tld_names`` function with ``tld_names_local_path`` parameter.\n\n.. code-block:: python\n\n    from tld import get_tld, reset_tld_names\n\n    # get tld from a custom tld names parser\n    get_tld(\n        \"http://www.foreverchild\",\n        parser_class=custombasemozillatldsourceparser\n    )\n\n    # free resources occupied by the custom tld names list\n    reset_tld_names(\"tests/res/effective_tld_names_custom.dat.txt\")\n\ntroubleshooting\n===============\nif somehow domain names listed `here <https://publicsuffix.org/list/public_suffix_list.dat>`_\nare not recognised, make sure you have the most recent version of tld names in\nyour virtual environment:\n\n.. code-block:: sh\n\n    update-tld-names\n\nto update tld names list for a single parser, specify it as an argument:\n\n.. code-block:: sh\n\n    update-tld-names mozilla\n\ntesting\n=======\nsimply type:\n\n.. code-block:: sh\n\n    pytest\n\nor use tox:\n\n.. code-block:: sh\n\n    tox\n\nor use tox to check specific env:\n\n.. code-block:: sh\n\n    tox -e py39\n\nwriting documentation\n=====================\n\nkeep the following hierarchy.\n\n.. code-block:: text\n\n    =====\n    title\n    =====\n\n    header\n    ======\n\n    sub-header\n    ----------\n\n    sub-sub-header\n    ~~~~~~~~~~~~~~\n\n    sub-sub-sub-header\n    ^^^^^^^^^^^^^^^^^^\n\n    sub-sub-sub-sub-header\n    ++++++++++++++++++++++\n\n    sub-sub-sub-sub-sub-header\n    **************************\n\nlicense\n=======\nmpl-1.1 or gpl-2.0-only or lgpl-2.1-or-later\n\nsupport\n=======\nfor security issues contact me at the e-mail given in the `author`_ section.\n\nfor overall issues, go to `github <https://github.com/barseghyanartur/tld/issues>`_.\n\nauthor\n======\nartur barseghyan <artur.barseghyan@gmail.com>\n",
  "docs_url": null,
  "keywords": "tld,top-level domain names,python",
  "license": "mpl-1.1 or gpl-2.0-only or lgpl-2.1-or-later",
  "name": "tld",
  "package_url": "https://pypi.org/project/tld/",
  "project_url": "https://pypi.org/project/tld/",
  "project_urls": {
    "Bug Tracker": "https://github.com/barseghyanartur/tld/issues",
    "Changelog": "https://tld.readthedocs.io/en/latest/changelog.html",
    "Documentation": "https://tld.readthedocs.io/",
    "Homepage": "https://github.com/barseghyanartur/tld",
    "Source Code": "https://github.com/barseghyanartur/tld/"
  },
  "release_url": "https://pypi.org/project/tld/0.13/",
  "requires_dist": [],
  "requires_python": ">=3.7, <4",
  "summary": "extract the top-level domain (tld) from the url given.",
  "version": "0.13",
  "releases": [],
  "developers": [
    "artur.barseghyan@gmail.com",
    "artur_barseghyan"
  ],
  "kwds": "get_tld_names get_tld parse_tld effective_tld_names_custom update_tld_names",
  "license_kwds": "mpl-1.1 or gpl-2.0-only or lgpl-2.1-or-later",
  "libtype": "pypi",
  "id": "pypi_tld",
  "homepage": "https://github.com/barseghyanartur/tld",
  "release_count": 51,
  "dependency_ids": []
}
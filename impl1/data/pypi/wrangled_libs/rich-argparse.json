{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: user interfaces"
  ],
  "description": "# rich-argparse\n\n![python -m rich_argparse](\nhttps://github.com/hamdanal/rich-argparse/assets/93259987/ae4a4968-1008-4fcd-8131-7a90292a7f3f)\n\n[![tests](https://github.com/hamdanal/rich-argparse/actions/workflows/tests.yml/badge.svg)\n](https://github.com/hamdanal/rich-argparse/actions/workflows/tests.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/hamdanal/rich-argparse/main.svg)\n](https://results.pre-commit.ci/latest/github/hamdanal/rich-argparse/main)\n[![downloads](https://img.shields.io/pypi/dm/rich-argparse)](https://pypistats.org/packages/rich-argparse)\n[![python version](https://img.shields.io/pypi/pyversions/rich-argparse)\n![release](https://img.shields.io/pypi/v/rich-argparse)\n](https://pypi.org/project/rich-argparse/)\n\nformat argparse and optparse help using [rich](https://pypi.org/project/rich).\n\n*rich-argparse* improves the look and readability of argparse's help while requiring minimal\nchanges to the code.\n\n## table of contents\n\n* [installation](#installation)\n* [usage](#usage)\n* [output styles](#output-styles)\n  * [colors](#customize-the-colors)\n  * [group names](#customize-the-group-name-format)\n  * [highlighting patterns](#special-text-highlighting)\n  * [\"usage\"](#colors-in-the-usage)\n  * [--version](#colors-in---version)\n  * [rich renderables](#rich-descriptions-and-epilog)\n* [subparsers](#working-with-subparsers)\n* [documenting your cli](#generate-help-preview)\n* [third party formatters](#working-with-third-party-formatters) (ft. django)\n* [optparse](#optparse-support) (experimental)\n* [legacy windows](#legacy-windows-support)\n\n## installation\n\ninstall from pypi with pip or your favorite tool.\n\n```sh\npip install rich-argparse\n```\n\n## usage\n\nsimply pass `formatter_class` to the argument parser\n```python\nimport argparse\nfrom rich_argparse import richhelpformatter\n\nparser = argparse.argumentparser(..., formatter_class=richhelpformatter)\n...\n```\n\n*rich-argparse* defines equivalents to argparse's [built-in formatters](\nhttps://docs.python.org/3/library/argparse.html#formatter-class):\n\n| `rich_argparse` formatter | equivalent in `argparse` |\n|---------------------------|--------------------------|\n| `richhelpformatter` | `helpformatter` |\n| `rawdescriptionrichhelpformatter` | `rawdescriptionhelpformatter` |\n| `rawtextrichhelpformatter` | `rawtexthelpformatter` |\n| `argumentdefaultsrichhelpformatter` | `argumentdefaultshelpformatter` |\n| `metavartyperichhelpformatter` | `metavartypehelpformatter` |\n\n## output styles\n\nthe default styles used by *rich-argparse* are carefully chosen to work in different light and dark\nthemes.\n\n### customize the colors\n\nyou can customize the colors in the output by modifying the `styles` dictionary on the formatter\nclass. *rich-argparse* defines the following styles:\n\n```python\n{\n    'argparse.args': 'cyan',  # for positional-arguments and --options (e.g \"--help\")\n    'argparse.groups': 'dark_orange',  # for group names (e.g. \"positional arguments\")\n    'argparse.help': 'default',  # for argument's help text (e.g. \"show this help message and exit\")\n    'argparse.metavar': 'dark_cyan',  # for metavariables (e.g. \"file\" in \"--file file\")\n    'argparse.prog': 'grey50',  # for %(prog)s in the usage (e.g. \"foo\" in \"usage: foo [options]\")\n    'argparse.syntax': 'bold',  # for highlights of back-tick quoted text (e.g. \"`some text`\")\n    'argparse.text': 'default',  # for descriptions, epilog, and --version (e.g. \"a program to foo\")\n    'argparse.default': 'italic',  # for %(default)s in the help (e.g. \"value\" in \"(default: value)\")\n}\n```\n\nfor example, to make the description and epilog *italic*, change the `argparse.text` style:\n\n```python\nrichhelpformatter.styles[\"argparse.text\"] = \"italic\"\n```\n\n### customize the group name format\n\nyou can change how the names of the groups (like `'positional arguments'` and `'options'`) are\nformatted by setting the `richhelpformatter.group_name_formatter` which is set to `str.title` by\ndefault. any callable that takes the group name as an input and returns a str works:\n\n```python\nrichhelpformatter.group_name_formatter = str.upper  # make group names uppercase\n```\n\n### special text highlighting\n\nyou can [highlight patterns](https://rich.readthedocs.io/en/stable/highlighting.html) in the\narguments help and the description and epilog using regular expressions. by default,\n*rich-argparse* highlights patterns of `--options-with-hyphens` using the `argparse.args` style\nand patterns of `` `back tick quoted text` `` using the `argparse.syntax` style. you can control\nwhat patterns are highlighted by modifying the `richhelpformatter.highlights` list. to disable all\nhighlights, you can clear this list using `richhelpformatter.highlights.clear()`.\n\nyou can also add custom highlight patterns and styles. the following example highlights all\noccurrences of `pyproject.toml` in green:\n\n```python\n# add a style called `pyproject` which applies a green style (any rich style works)\nrichhelpformatter.styles[\"argparse.pyproject\"] = \"green\"\n# add the highlight regex (the regex group name must match an existing style name)\nrichhelpformatter.highlights.append(r\"\\b(?p<pyproject>pyproject\\.toml)\\b\")\n# pass the formatter class to argparse\nparser = argparse.argumentparser(..., formatter_class=richhelpformatter)\n...\n```\n\n### colors in the `usage`\n\nthe usage **generated by the formatter** is colored using the `argparse.args` and `argparse.metavar`\nstyles. if you use a custom `usage` message in the parser, it will treated as \"plain text\" and will\n**not** be colored by default. you can enable colors in user defined usage message through\n[console markup](https://rich.readthedocs.io/en/stable/markup.html) by setting\n`richhelpformatter.usage_markup = true`. if you enable this option, make sure to [escape](\nhttps://rich.readthedocs.io/en/stable/markup.html#escaping) any square brackets in the usage text.\n\n### colors in `--version`\n\nif you use the `\"version\"` action from argparse, you can use console markup in the `version` string:\n\n```python\nparser.add_argument(\n    \"--version\", action=\"version\", version=\"[argparse.prog]%(prog)s[/] version [i]1.0.0[/]\"\n)\n```\n\nnote that the `argparse.text` style is applied to the `version` string similar to the description\nand epilog.\n\n### rich descriptions and epilog\n\nyou can use any rich renderable in the descriptions and epilog. this includes all built-in rich\nrenderables like `table` and `markdown` and any custom renderables defined using the\n[console protcol](https://rich.readthedocs.io/en/stable/protocol.html#console-protocol).\n\n```python\nimport argparse\nfrom rich.markdown import markdown\nfrom rich_argparse import richhelpformatter\n\ndescription = \"\"\"\n# my program\n\nthis is a markdown description of my program.\n\n* it has a list\n* and a table\n\n| column 1 | column 2 |\n| -------- | -------- |\n| value 1  | value 2  |\n\"\"\"\nparser = argparse.argumentparser(\n    description=markdown(description, style=\"argparse.text\"),\n    formatter_class=richhelpformatter,\n)\n...\n```\ncertain features are **disabled** for arbitrary renderables other than strings, including:\n\n* syntax highlighting with `richhelpformatter.highlights`\n* styling with the `\"argparse.text\"` style defined in `richhelpformatter.styles`\n* replacement of `%(prog)s` with the program name\n\narbitrary renderables are displayed \"as is\" except for long runs of empty lines that get truncated\nto two empty lines following the behavior of argparse.\n\n## working with subparsers\n\nsubparsers do not inherit the formatter class from the parent parser by default. you have to pass\nthe formatter class explicitly:\n\n```python\nsubparsers = parser.add_subparsers(...)\np1 = subparsers.add_parser(..., formatter_class=parser.formatter_class)\np2 = subparsers.add_parser(..., formatter_class=parser.formatter_class)\n```\n\n## generate help preview\n\nyou can generate a preview of the help message for your cli in svg, html, or txt formats using the\n`helppreviewaction` action. this is useful for including the help message in the documentation of\nyour app. the action uses the\n[rich exporting api](https://rich.readthedocs.io/en/stable/console.html#exporting) internally.\n\n```python\nimport argparse\nfrom rich.terminal_theme import dimmed_monokai\nfrom rich_argparse import helppreviewaction, richhelpformatter\n\nparser = argparse.argumentparser(..., formatter_class=richhelpformatter)\n...\nparser.add_argument(\n    \"--generate-help-preview\",\n    action=helppreviewaction,\n    path=\"help-preview.svg\",  # (optional) or \"help-preview.html\" or \"help-preview.txt\"\n    export_kwds={\"theme\": dimmed_monokai},  # (optional) keywords passed to console.save_... methods\n)\n```\nthis action is hidden, it won't show up in the help message or in the parsed arguments namespace.\n\nuse it like this:\n\n```sh\npython my_cli.py --generate-help-preview  # generates help-preview.svg (default path specified above)\n# or\npython my_cli.py --generate-help-preview my-help.svg  # generates my-help.svg\n# or\ncolumns=120 python my_cli.py --generate-help-preview  # force the width of the output to 120 columns\n```\n\n## working with third party formatters\n\n*rich-argparse* can be used with other formatters that **do not rely on the private internals**\nof `argparse.helpformatter`. a popular example is [django](https://pypi.org/project/django) that\ndefines a custom help formatter that is used with its built in commands as well as with extension\nlibraries and user defined commands. to use *rich-argparse* in your django project, change your\n`manage.py` file as follows:\n\n```diff\ndiff --git a/my_project/manage.py b/my_project/manage.py\nindex 7fb6855..5e5d48a 100755\n--- a/my_project/manage.py\n+++ b/my_project/manage.py\n@@ -1,22 +1,38 @@\n #!/usr/bin/env python\n \"\"\"django's command-line utility for administrative tasks.\"\"\"\n import os\n import sys\n\n\n def main():\n     \"\"\"run administrative tasks.\"\"\"\n     os.environ.setdefault('django_settings_module', 'my_project.settings')\n     try:\n         from django.core.management import execute_from_command_line\n     except importerror as exc:\n         raise importerror(\n             \"couldn't import django. are you sure it's installed and \"\n             \"available on your pythonpath environment variable? did you \"\n             \"forget to activate a virtual environment?\"\n         ) from exc\n+\n+    from django.core.management.base import basecommand, djangohelpformatter\n+    from rich_argparse import richhelpformatter\n+\n+    class djangorichhelpformatter(djangohelpformatter, richhelpformatter):  # django first\n+        \"\"\"a rich-based help formatter for django commands.\"\"\"\n+\n+    original_create_parser = basecommand.create_parser\n+\n+    def create_parser(*args, **kwargs):\n+        parser = original_create_parser(*args, **kwargs)\n+        parser.formatter_class = djangorichhelpformatter  # set the formatter_class\n+        return parser\n+\n+    basecommand.create_parser = create_parser\n+\n     execute_from_command_line(sys.argv)\n\n\n if __name__ == '__main__':\n     main()\n```\n\nnow try out some command like `python manage.py runserver --help` and notice how the special\nordering of the arguments applied by django is respected by the new help formatter.\n\n## optparse support\n\n*rich-argparse* now ships with experimental support for [optparse](\nhttps://docs.python.org/3/library/optparse.html).\n\nimport optparse help formatters from `rich_argparse.optparse`:\n\n```python\nimport optparse\nfrom rich_argparse.optparse import indentedrichhelpformatter  # or titledrichhelpformatter\n\nparser = optparse.optionparser(formatter=indentedrichhelpformatter())\n...\n```\n\nyou can also generated a more helpful usage message by passing `usage=generate_usage` to the\nparser. this is similar to the default behavior of `argparse`.\n\n```python\nfrom rich_argparse.optparse import generate_usage, indentedrichhelpformatter\n\nparser = optparse.optionparser(usage=generate_usage, formatter=indentedrichhelpformatter())\n```\n\nsimilar to `argparse`, you can customize the styles used by the formatter by modifying the\n`richhelpformatter.styles` dictionary. these are the same styles used by `argparse` but with\nthe `optparse.` prefix instead:\n\n```python\nrichhelpformatter.styles[\"optparse.metavar\"] = \"bold magenta\"\n```\n\nsyntax highlighting works the same as with `argparse`.\n\ncolors in the `usage` are only supported when using `generate_usage`.\n\ncustomizing the group name format is not supported. optparse uses title case format by default.\n\n## legacy windows support\n\nif your application still runs on legacy windows versions (older than windows 10), you'll need to\nenable ansi escape sequences by calling `colorama.init()` otherwise colors will be disabled:\n\n```python\nimport argparse\nimport colorama\nfrom rich_argparse import richhelpformatter\n\ncolorama.init()\nparser = argparse.argumentparser(..., formatter_class=richhelpformatter)\n...\n```\nthis is **not** required on windows 10 and newer or on other operating systems.\n",
  "docs_url": null,
  "keywords": "argparse,help-formatter,optparse,rich",
  "license": "",
  "name": "rich-argparse",
  "package_url": "https://pypi.org/project/rich-argparse/",
  "project_url": "https://pypi.org/project/rich-argparse/",
  "project_urls": {
    "Changelog": "https://github.com/hamdanal/rich-argparse/blob/main/CHANGELOG.md",
    "Documentation": "https://github.com/hamdanal/rich-argparse#rich-argparse",
    "Homepage": "https://github.com/hamdanal/rich-argparse",
    "Issue-Tracker": "https://github.com/hamdanal/rich-argparse/issues"
  },
  "release_url": "https://pypi.org/project/rich-argparse/1.4.0/",
  "requires_dist": [
    "rich>=11.0.0"
  ],
  "requires_python": ">=3.7",
  "summary": "rich help formatters for argparse and optparse",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "ali.hamdan.dev@gmail.com"
  ],
  "kwds": "rich_argparse argparse argumentparser args workflows",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_rich_argparse",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_rich"
  ]
}
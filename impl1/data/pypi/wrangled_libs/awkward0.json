{
  "classifiers": [
    "development status :: 7 - inactive",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": ".. image:: https://raw.githubusercontent.com/scikit-hep/awkward-0.x/master/docs/source/logo-300px.png\n   :alt: awkward-array\n   :target: https://github.com/scikit-hep/awkward-0.x\n\n|\n\n.. inclusion-marker-1-5-do-not-remove\n\ncalculations with rectangular, numerical data are simpler and faster in numpy than traditional for loops. consider, for instance,\n\n.. code-block:: python\n\n    all_r = []\n    for x, y in zip(all_x, all_y):\n        all_r.append(sqrt(x**2 + y**2))\n\nversus\n\n.. code-block:: python\n\n    all_r = sqrt(all_x**2 + all_y**2)\n\nnot only is the latter easier to read, it's hundreds of times faster than the for loop (and provides opportunities for hidden vectorization and parallelization). however, the numpy abstraction stops at rectangular arrays of numbers or character strings. while it's possible to put arbitrary python data in a numpy array, numpy's ``dtype=object`` is essentially a fixed-length list: data are not contiguous in memory and operations are not vectorized.\n\nawkward array is a pure python+numpy library for manipulating complex data structures as you would numpy arrays. even if your data structures\n\n* contain variable-length lists (jagged/ragged),\n* are deeply nested (record structure),\n* have different data types in the same list (heterogeneous),\n* are masked, bit-masked, or index-mapped (nullable),\n* contain cross-references or even cyclic references,\n* need to be python class instances on demand,\n* are not defined at every point (sparse),\n* are not contiguous in memory,\n* should not be loaded into memory all at once (lazy),\n\nthis library can access them as `columnar data structures <https://towardsdatascience.com/the-beauty-of-column-oriented-data-2945c0c9f560>`__, with the efficiency of numpy arrays. they may be converted from json or python data, loaded from \"awkd\" files, `hdf5 <https://www.hdfgroup.org>`__, `parquet <https://parquet.apache.org>`__, or `root <https://root.cern>`__ files, or they may be views into memory buffers like `arrow <https://arrow.apache.org>`__.\n\n.. inclusion-marker-2-do-not-remove\n\ninstallation\n============\n\ninstall awkward array like any other python package:\n\n.. code-block:: bash\n\n    pip install awkward0                      # maybe with sudo or --user, or in virtualenv\n\nthe base ``awkward0`` package requires only `numpy <https://scipy.org/install.html>`__  (1.13.1+).\n\nrecommended packages:\n---------------------\n\n- `pyarrow <https://arrow.apache.org/docs/python/install.html>`__ to view arrow and parquet data as awkward arrays\n- `h5py <https://www.h5py.org>`__ to read and write awkward arrays in hdf5 files\n- `pandas <https://pandas.pydata.org>`__ as an alternative view\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause",
  "name": "awkward0",
  "package_url": "https://pypi.org/project/awkward0/",
  "project_url": "https://pypi.org/project/awkward0/",
  "project_urls": {
    "Download": "https://github.com/scikit-hep/awkward-0.x/releases",
    "Homepage": "https://github.com/scikit-hep/awkward-0.x"
  },
  "release_url": "https://pypi.org/project/awkward0/0.15.5/",
  "requires_dist": [
    "numpy (>=1.13.1)"
  ],
  "requires_python": "",
  "summary": "manipulate arrays of complex data structures as easily as numpy.",
  "version": "0.15.5",
  "releases": [],
  "developers": [
    "jim_pivarski",
    "pivarski@princeton.edu"
  ],
  "kwds": "numpy python loops scipy loop",
  "license_kwds": "bsd 3-clause",
  "libtype": "pypi",
  "id": "pypi_awkward0",
  "homepage": "https://github.com/scikit-hep/awkward-0.x",
  "release_count": 6,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
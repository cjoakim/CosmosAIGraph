{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "vtk/paraview widgets for trame\n===========================================================\n\n.. image:: https://github.com/kitware/trame-vtk/actions/workflows/test_and_release.yml/badge.svg\n    :target: https://github.com/kitware/trame-vtk/actions/workflows/test_and_release.yml\n    :alt: test and release\n\ntrame-vtk extend trame **widgets** with components that can interface with vtk and/or paraview.\n\nvtk integration in trame allows you to create rich visualization and data processing applications by leveraging the python wrapping of the vtk library.\nseveral components are available so you can leverage vtk either for its data processing and/or rendering.\ntrame lets you choose if you want to leverage remote rendering or if the client should do the rendering by leveraging vtk.js under the hood.\n\n\ninstalling\n-----------------------------------------------------------\n\ntrame-vtk can be installed with `pip <https://pypi.org/project/trame-vtk/>`_:\n\n.. code-block:: bash\n\n    pip install --upgrade trame-vtk\n\n\nusage\n-----------------------------------------------------------\n\nthe `trame tutorial <https://kitware.github.io/trame/docs/tutorial.html>`_ is the place to go to learn how to use the library and start building your own application.\n\nthe `api reference <https://trame.readthedocs.io/en/latest/index.html>`_ documentation provides api-level documentation.\n\n\nlicense\n-----------------------------------------------------------\n\ntrame-vtk is made available under the bsd-3-clause license. for more details, see `license <https://github.com/kitware/trame-vtk/blob/master/license>`_\nthis license has been chosen to match the one use by `vtk <https://github.com/kitware/vtk/blob/master/copyright.txt>`_ and `paraview <https://github.com/kitware/paraview/blob/master/copyright.txt>`_ which can be exposed via this library.\n\n\ncommunity\n-----------------------------------------------------------\n\n`trame <https://kitware.github.io/trame/>`_ | `discussions <https://github.com/kitware/trame/discussions>`_ | `issues <https://github.com/kitware/trame/issues>`_ | `roadmap <https://github.com/kitware/trame/projects/1>`_ | `contact us <https://www.kitware.com/contact-us/>`_\n\n.. image:: https://zenodo.org/badge/410108340.svg\n    :target: https://zenodo.org/badge/latestdoi/410108340\n\n\nenjoying trame?\n-----------------------------------------------------------\n\nshare your experience `with a testimonial <https://github.com/kitware/trame/issues/18>`_ or `with a brand approval <https://github.com/kitware/trame/issues/19>`_.\n\n\ndevelopment: grabbing client before push to pypi\n-----------------------------------------------------------\n\nto update the client code, run the following command line while updating the targeted version\n\n.. code-block:: console\n\n    bash .fetch_externals.sh\n\n\ntrame widgets\n-----------------------------------------------------------\n\nvtkremoteview\n-----------------------------------------------------------\n\nthe vtkremoteview component relies on the server for rendering by sending images to the client by simply binding your vtkrenderwindow to it.\nthis component gives you controls to the image size reduction and quality to reduce latency while interacting.\n\n\nhow to use it?\n```````````````````````````````````````````````````````````\n\nthe component allows you to directly tap into a vtk.js interactor's events so you can bind your own method from python to them.\nthe list of available events can be found `here <https://github.com/kitware/vtk-js/blob/b92ad5463150b88514fcb5020c1fa6c7fcfe2a4f/sources/rendering/core/renderwindowinteractor/index.js#l23-l60>`_.\n\nthe component also provides a convenient method for pushing a new image to the client when you're modifying your scene on the python side.\n\n.. code-block:: python\n\n    from trame.widgets import vtk\n\n    def end():\n        pass\n\n    remote_view = vtk.vtkremoteview(\n        view=...,               # instance of vtkrenderwindow (required)\n        ref=...,                # identifier for this component\n        interactive_quality=60, # [0, 100] 0 for fastest render, 100 for best quality\n        interactive_ratio=...,  # [0.1, 1] image size scale factor while interacting\n        interactor_events=(     # enable vtk.js interactor events for method binding\n            \"events\",\n            [\"endanimation\"],\n        ),\n        endanimation=end,       # bind method to the enabled event\n    )\n\n    remote_view.update()  # force image to be pushed to client\n\n\nexamples\n```````````````````````````````````````````````````````````\n\n- `vtk/simplecone/remoterendering <https://github.com/kitware/trame/blob/master/examples/vtk/simplecone/remoterendering.py>`_\n- `vtk/contourgeometry/remoterendering <https://github.com/kitware/trame/blob/master/examples/vtk/contourgeometry/remoterendering.py>`_\n- `vtk/applications/zarrcontourviewer <https://github.com/kitware/trame/blob/master/examples/vtk/applications/zarrcontourviewer/app.py>`_\n\n\nvtklocalview\n-----------------------------------------------------------\n\nthe vtklocalview component relies on the server for defining the vtkrenderwindow but then only the geometry is exchanged with the client.\nthe server does not need a gpu as no rendering is happening on the server.\nthe vtkrenderwindow is only used to retrieve the scene data and parameters (coloring by, representations, ...).\nby relying on the same vtkrenderwindow, you can easily switch from a `vtkremoteview` to a `vtklocalview` or vice-versa.\nthis component gives you controls on how you want to map mouse interaction with the camera.\nthe default setting mimic default vtk interactor style so you will rarely have to override to the `interactor_settings`.\n\nhow to use it?\n```````````````````````````````````````````````````````````\n\nthe component allows you to directly tap into a vtk.js interactor events so you can bind your own method from python to them.\nthe list of available events can be found `here <https://github.com/kitware/vtk-js/blob/b92ad5463150b88514fcb5020c1fa6c7fcfe2a4f/sources/rendering/core/renderwindowinteractor/index.js#l23-l60>`_.\n\nthe component also provides a convenient method to push the scene to the client when you're modifying your scene on the python side.\n\n.. code-block:: python\n\n    from trame.widgets import vtk\n\n    def end():\n        pass\n\n    local_view = vtk.vtklocalview(\n        view=...,                # instance of vtkrenderwindow (required)\n        ref=...,                 # identifier for this component\n        context_name=...,        # namespace for geometry cache\n        interactor_settings=..., # options for camera controls. see below.\n        interactor_events=(      # enable vtk.js interactor events for method binding\n            \"events\",\n            ['endanimation'],\n        ),\n        endanimation=end,        # bind method to the enabled event\n    )\n\n    local_view.update()  # force geometry to be pushed\n\n\n\ninteractor settings\n```````````````````````````````````````````````````````````\n\nfor the `interactor_settings` we expect a list of mouse event type linked to an action. the example below is what is used as default:\n\n.. code-block:: javascript\n\n    interactor_settings=[\n      {\n        button: 1,\n        action: 'rotate',\n      }, {\n        button: 2,\n        action: 'pan',\n      }, {\n        button: 3,\n        action: 'zoom',\n        scrollenabled: true,\n      }, {\n        button: 1,\n        action: 'pan',\n        shift: true,\n      }, {\n        button: 1,\n        action: 'zoom',\n        alt: true,\n      }, {\n        button: 1,\n        action: 'zoomtomouse',\n        control: true,\n      }, {\n        button: 1,\n        action: 'roll',\n        alt: true,\n        shift: true,\n      }\n    ]\n\na mouse event can be identified with the following set of properties:\n\n.. list-table::\n   :widths: 20 20 60\n   :header-rows: 1\n\n   * - attribute\n     - value\n     - description\n   * - button\n     - 1, 2, 3\n     - which button should be down\n   * - shift\n     - true/false\n     - is the shift key down\n   * - alt\n     - true/false\n     - is the alt key down\n   * - control\n     - true/false\n     - is the ctrl key down\n   * - scrollenabled\n     - true/false\n     - some action could also be triggered by scroll\n   * - dragenabled\n     - true/false\n     - mostly used to disable default drag behavior\n\nand the action could be one of the following:\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - action\n     - description\n   * - pan\n     - will pan the object on the plane normal to the camera\n   * - zoom\n     - will zoom closer or further from the object based on the drag direction\n   * - roll\n     - will rotate the object around the view direction\n   * - zoomtomouse\n     - will zoom while keeping the location that was initially under the mouse at the same spot\n\n\nexamples\n```````````````````````````````````````````````````````````\n\n- `vtk/simplecone/localrendering <https://github.com/kitware/trame/blob/master/examples/vtk/simplecone/localrendering.py>`_\n- `vtk/contourgeometry/localrendering <https://github.com/kitware/trame/blob/master/examples/vtk/contourgeometry/localrendering.py>`_\n- `tutorial/vtk/carotidflow <https://github.com/kitware/trame/blob/master/examples/tutorial/vtk/carotidflow.py>`_\n\n\nvtkremotelocalview\n-----------------------------------------------------------\n\nthe vtkremotelocalview component is a blend of `vtklocalview` and `vtkremoteview` where the user can choose dynamically which mode they want to be in.\nwhen instantiating a `vtkremotelocalview` several variables and triggers will be created for you to more easily control your view.\n\nhow to use it?\n```````````````````````````````````````````````````````````\n\n.. code-block:: python\n\n    from trame.html import vtk\n\n    rl_view = vtk.vtkremotelocalview(\n        view=...,                # instance of vtkrenderwindow (required)\n\n        # just vtkremotelocalview params\n        namespace=...,           # prefix for variables and triggers. see below. (required)\n        mode=\"local\",            # decide between local or remote. see below.\n\n        # vtkremoteview params\n        **remote_view_params,\n\n        # vtklocalview params\n        **local_view_params,\n    )\n\n    rl_view.update_geometry()  # force update to geometry\n    rl_view.update_image()     # force update to image\n    rl_view.view()             # get linked vtkrenderwindow instance\n\n\nnamespace parameter\n```````````````````````````````````````````````````````````\n\nconstructing a vtkremotelocalview will set several variables, prefixed by a namespace. in the example below we used `namespace=\"view\"`.\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - variable\n     - description\n   * - viewid\n     - `str` representing the vtkrenderwindow id\n   * - viewmode\n     - `local`or `remote` to control which view is displayed to the user\n\nconstructing a vtkremotelocalview will also set several trame triggers.\n\n.. list-table::\n   :widths: 25 75\n   :header-rows: 1\n\n   * - trigger\n     - description\n   * - viewcamera\n     - when call with no arguments, the server will push its camera to the client\n   * - viewanimatestart\n     - start the animation loop for constantly rendering\n   * - viewanimatestop\n     - stop the animation loop\n\nthe `namespace` will also be used as `ref=` unless provided by the user.\n\nmode parameter\n```````````````````````````````````````````````````````````\n\nthe mode is driven by the variable `{namespace}mode` but can be provided when instantiated so the default can be overridden and a javascript expression can be used instead of the default variable. this attribute behaves the same way as any trame one except, we won't register the left side as a state entry since we already have one under `{namespace}mode`. this means we will evaluate the left side of the expression assuming a tuple is provided and the right side of the tuple is used to set its initial value.\n\nexamples\n```````````````````````````````````````````````````````````\n\n- `api <https://trame.readthedocs.io/en/latest/trame.html.vtk.html>`_\n- `vtk/contourgeometry/dynamiclocalremoterendering <https://github.com/kitware/trame/blob/f6594a02ed7e1ecc24058ffac527e010e8181e22/examples/vtk/contourgeometry/dynamiclocalremoterendering.py>`_\n",
  "docs_url": null,
  "keywords": "python,interactive,web,application,framework",
  "license": "bsd license",
  "name": "trame-vtk",
  "package_url": "https://pypi.org/project/trame-vtk/",
  "project_url": "https://pypi.org/project/trame-vtk/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/trame-vtk/2.6.3/",
  "requires_dist": [
    "trame-client"
  ],
  "requires_python": "",
  "summary": "vtk widgets for trame",
  "version": "2.6.3",
  "releases": [],
  "developers": [
    "kitware_inc"
  ],
  "kwds": "vtk vtklocalview vtkrenderwindow vtkremoteview widgets",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_trame_vtk",
  "homepage": "",
  "release_count": 49,
  "dependency_ids": [
    "pypi_trame_client"
  ]
}
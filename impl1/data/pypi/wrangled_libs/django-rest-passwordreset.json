{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: dynamic content"
  ],
  "description": "# django rest password reset\n\n[![pypi version](https://img.shields.io/pypi/v/django-rest-passwordreset.svg)](https://pypi.org/project/django-rest-passwordreset/)\n[![build-and-test actions status](https://github.com/anexia-it/django-rest-passwordreset/workflows/build-and-test/badge.svg)](https://github.com/anexia-it/django-rest-passwordreset/actions)\n[![codecov](https://img.shields.io/codecov/c/gh/anexia-it/django-rest-passwordreset)](https://codecov.io/gh/anexia-it/django-rest-passwordreset)\n\nthis python package provides a simple password reset strategy for django rest framework, where users can request password \nreset tokens via their registered e-mail address.\n\nthe main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...).\ninstead, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).\n\nthis package basically provides two rest endpoints:\n\n* request a token\n* verify (confirm) a token (and change the password)\n\n## quickstart\n\n1. install the package from pypi using pip:\n```bash\npip install django-rest-passwordreset\n```\n\n2. add ``django_rest_passwordreset`` to your ``installed_apps`` (after ``rest_framework``) within your django settings file:\n```python\ninstalled_apps = (\n    ...\n    'django.contrib.auth',\n    ...\n    'rest_framework',\n    ...\n    'django_rest_passwordreset',\n    ...\n)\n```\n\n3. this package stores tokens in a separate database table (see [django_rest_passwordreset/models.py](django_rest_passwordreset/models.py)). therefore, you have to run django migrations:\n```bash\npython manage.py migrate\n```\n\n4. this package provides three endpoints, which can be included by including ``django_rest_passwordreset.urls`` in your ``urls.py`` as follows:\n```python\nfrom django.urls import path, include\n\nurlpatterns = [\n    ...\n    path(r'^api/password_reset/', include('django_rest_passwordreset.urls', namespace='password_reset')),\n    ...\n]\n```\n**note**: you can adapt the url to your needs.\n\n### endpoints\n\nthe following endpoints are provided:\n\n * `post ${api_url}/` - request a reset password token by using the ``email`` parameter\n * `post ${api_url}/confirm/` - using a valid ``token``, the users password is set to the provided ``password``\n * `post ${api_url}/validate_token/` - will return a 200 if a given ``token`` is valid\n\nwhere `${api_url}/` is the url specified in your *urls.py* (e.g., `api/password_reset/` as in the example above)\n\n\n### signals\n\n* ``reset_password_token_created(sender, instance, reset_password_token)`` fired when a reset password token is generated\n* ``pre_password_reset(sender, user)`` - fired just before a password is being reset\n* ``post_password_reset(sender, user)`` - fired after a password has been reset\n\n### example for sending an e-mail\n\n1. create two new django templates: `email/user_reset_password.html` and `email/user_reset_password.txt`. those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\nwithin the templates, you can access the following context variables: `current_user`, `username`, `email`, `reset_password_url`. feel free to adapt this to your needs.\n\n2. add the following code, which contains a django signal receiver (`@receiver(...)`), to your application. take care where to put this code, as it needs to be executed by the python interpreter (see the section *the `reset_password_token_created` signal is not fired* below, aswell as [this part of the django documentation](https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions) and [how to create django signals tutorial](https://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html) for more information).\n```python\nfrom django.core.mail import emailmultialternatives\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\n\nfrom django_rest_passwordreset.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n    \"\"\"\n    handles password reset tokens\n    when a token is created, an e-mail needs to be sent to the user\n    :param sender: view class that sent the signal\n    :param instance: view instance that sent the signal\n    :param reset_password_token: token model object\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    # send an e-mail to the user\n    context = {\n        'current_user': reset_password_token.user,\n        'username': reset_password_token.user.username,\n        'email': reset_password_token.user.email,\n        'reset_password_url': \"{}?token={}\".format(\n            instance.request.build_absolute_uri(reverse('password_reset:reset-password-confirm')),\n            reset_password_token.key)\n    }\n\n    # render email text\n    email_html_message = render_to_string('email/user_reset_password.html', context)\n    email_plaintext_message = render_to_string('email/user_reset_password.txt', context)\n\n    msg = emailmultialternatives(\n        # title:\n        \"password reset for {title}\".format(title=\"some website title\"),\n        # message:\n        email_plaintext_message,\n        # from:\n        \"noreply@somehost.local\",\n        # to:\n        [reset_password_token.user.email]\n    )\n    msg.attach_alternative(email_html_message, \"text/html\")\n    msg.send()\n\n```\n\n3. you should now be able to use the endpoints to request a password reset token via your e-mail address. \nif you want to test this locally, i recommend using some kind of fake mailserver (such as maildump).\n\n\n\n# configuration / settings\n\nthe following settings can be set in django ``settings.py`` file:\n\n* `django_rest_multitokenauth_reset_token_expiry_time` - time in hours about how long the token is active (default: 24)\n\n  **please note**: expired tokens are automatically cleared based on this setting in every call of ``resetpasswordrequesttoken.post``.\n\n* `django_rest_passwordreset_no_information_leakage` - will cause a 200 to be returned on `post ${api_url}/reset_password/`\n  even if the user doesn't exist in the databse (default: false) \n\n* `django_rest_multitokenauth_require_usable_password` - allows password reset for a user that does not \n  [have a usable password](https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.user.has_usable_password) (default: true)\n\n## custom email lookup\n\nby default, `email` lookup is used to find the user instance. you can change that by adding \n```python\ndjango_rest_lookup_field = 'custom_email_field'\n```\ninto django settings.py file.\n\n## custom remote ip address and user agent header lookup\n\nif your setup demands that the ip adress of the user is in another header (e.g., 'x-forwarded-for'), you can configure that (using django request headers):\n\n```python\ndjango_rest_passwordreset_ip_address_header = 'http_x_forwarded_for'\n```\n\nthe same is true for the user agent:\n\n```python\nhttp_user_agent_header = 'http_user_agent'\n```\n\n## custom token generator\n\nby default, a random string token of length 10 to 50 is generated using the ``randomstringtokengenerator`` class.\nthis library offers a possibility to configure the params of ``randomstringtokengenerator`` as well as switch to\nanother token generator, e.g. ``randomnumbertokengenerator``. you can also generate your own token generator class.\n\nyou can change that by adding \n```python\ndjango_rest_passwordreset_token_config = {\n    \"class\": ...,\n    \"options\": {...}\n}\n```\ninto django settings.py file.\n\n\n### randomstringtokengenerator\nthis is the default configuration. \n```python\ndjango_rest_passwordreset_token_config = {\n    \"class\": \"django_rest_passwordreset.tokens.randomstringtokengenerator\"\n}\n```\n\nyou can configure the length as follows:\n```python\ndjango_rest_passwordreset_token_config = {\n    \"class\": \"django_rest_passwordreset.tokens.randomstringtokengenerator\",\n    \"options\": {\n        \"min_length\": 20,\n        \"max_length\": 30\n    }\n}\n```\n\nit uses `os.urandom()` to generate a good random string.\n\n\n### randomnumbertokengenerator\n```python\ndjango_rest_passwordreset_token_config = {\n    \"class\": \"django_rest_passwordreset.tokens.randomnumbertokengenerator\"\n}\n```\n\nyou can configure the minimum and maximum number as follows:\n```python\ndjango_rest_passwordreset_token_config = {\n    \"class\": \"django_rest_passwordreset.tokens.randomnumbertokengenerator\",\n    \"options\": {\n        \"min_number\": 1500,\n        \"max_number\": 9999\n    }\n}\n```\n\nit uses `random.systemrandom().randint()` to generate a good random number.\n\n\n### write your own token generator\n\nplease see [token_configuration/django_rest_passwordreset/tokens.py](token_configuration/django_rest_passwordreset/tokens.py) for example implementation of number and string token generator.\n\nthe basic idea is to create a new class that inherits from basetokengenerator, takes arbitrary arguments (`args` and `kwargs`)\nin the ``__init__`` function as well as implementing a `generate_token` function.\n\n```python\nfrom django_rest_passwordreset.tokens import basetokengenerator\n\n\nclass randomstringtokengenerator(basetokengenerator):\n    \"\"\"\n    generates a random string with min and max length using os.urandom and binascii.hexlify\n    \"\"\"\n\n    def __init__(self, min_length=10, max_length=50, *args, **kwargs):\n        self.min_length = min_length\n        self.max_length = max_length\n\n    def generate_token(self, *args, **kwargs):\n        \"\"\" generates a pseudo random code using os.urandom and binascii.hexlify \"\"\"\n        # determine the length based on min_length and max_length\n        length = random.randint(self.min_length, self.max_length)\n\n        # generate the token using os.urandom and hexlify\n        return binascii.hexlify(\n            os.urandom(self.max_length)\n        ).decode()[0:length]\n```\n\n\n## compatibility matrix\n\nthis library should be compatible with the latest django and django rest framework versions. for reference, here is\na matrix showing the guaranteed and tested compatibility.\n\ndjango-rest-passwordreset version | django versions | django rest framework versions | python |\n--------------------------------- | --------------- | ------------------------------ | ------ |\n0.9.7 | 1.8, 1.11, 2.0, 2.1 | 3.6 - 3.9 | 2.7\n1.0 | 1.11, 2.0, 2.2 | 3.6 - 3.9 | 2.7\n1.1 | 1.11, 2.2 | 3.6 - 3.9 | 2.7\n1.2 | 2.2, 3.0, 3.1 | 3.10, 3.11 | 3.5 - 3.8\n1.3 | 3.2, 4.0, 4.1 | 3.12, 3.13 | 3.7 - 3.10\n\n\n## documentation / browsable api\n\nthis package supports the [drf auto-generated documentation](https://www.django-rest-framework.org/topics/documenting-your-api/) (via `coreapi`) as well as the [drf browsable api](https://www.django-rest-framework.org/topics/browsable-api/).\n\nto add the endpoints to the browsable api, you can use a helper function in your `urls.py` file:\n```python\nfrom rest_framework.routers import defaultrouter\nfrom django_rest_passwordreset.urls import add_reset_password_urls_to_router\n\nrouter = defaultrouter()\nadd_reset_password_urls_to_router(router, base_path='api/auth/passwordreset')\n```\n\nalternatively you can import the viewsets manually and customize the routes for your setup:\n```python\nfrom rest_framework.routers import defaultrouter\nfrom django_rest_passwordreset.views import resetpasswordvalidatetokenviewset, resetpasswordconfirmviewset, \\\n    resetpasswordrequesttokenviewset\n\nrouter = defaultrouter()\nrouter.register(\n    r'api/auth/passwordreset/validate_token',\n    resetpasswordvalidatetokenviewset,\n    basename='reset-password-validate'\n)\nrouter.register(\n    r'api/auth/passwordreset/confirm',\n    resetpasswordconfirmviewset,\n    basename='reset-password-confirm'\n)\nrouter.register(\n    r'api/auth/passwordreset/',\n    resetpasswordrequesttokenviewset,\n    basename='reset-password-request'\n)\n```\n\n![drf_browsable_email_validation](docs/browsable_api_email_validation.png \"browsable api e-mail validation\")\n\n![drf_browsable_password_validation](docs/browsable_api_password_validation.png \"browsable api e-mail validation\")\n\n![coreapi_docs](docs/coreapi_docs.png \"core api docs\")\n\n\n## known issues / faq\n\n### django 2.1 migrations - multiple primary keys for table ...\ndjango 2.1 introduced a breaking change for migrations (see [django issue #29790](https://code.djangoproject.com/ticket/29790)). we therefore had to rewrite the migration [0002_pk_migration.py](django_rest_passwordreset/migrations/0002_pk_migration.py) such that it covers django versions before (`<`) 2.1 and later (`>=`) 2.1.\n\nsome information is written down in issue #8.\n\n### the `reset_password_token_created` signal is not fired\nyou need to make sure that the code with `@receiver(reset_password_token_created)` is executed by the python interpreter. to ensure this, you have two options:\n\n1. put the code at a place that is automatically loaded by django (e.g., models.py, views.py), or\n\n2. import the file that contains the signal within your app.py `ready` function:\n\n  *some_app/signals.py*\n  ```python\n  from django.core.mail import emailmultialternatives\n  from django.dispatch import receiver\n  from django.template.loader import render_to_string\n  from django.urls import reverse\n\n  from django_rest_passwordreset.signals import reset_password_token_created\n\n\n  @receiver(reset_password_token_created)\n  def password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n      # ...\n  ```\n\n  *some_app/app.py*\n  ```python\n  from django.apps import appconfig\n\n  class someappconfig(appconfig):\n      name = 'your_django_project.some_app'\n      verbose_name = 'some app'\n\n      def ready(self):\n          import your_django_project.some_app.signals  # noqa\n  ```\n\n  *some_app/__init__.py*\n  ```python\n  default_app_config = 'your_django_project.some_app.someappconfig'\n  ```\n\n### mongodb not working\n\napparently, the following piece of code in the django model prevents mongodb from working:\n\n```python\n id = models.autofield( \n     primary_key=true \n ) \n```\n\nsee issue #49 for details.\n\n## contributions\n\nthis library tries to follow the unix philosophy of \"do one thing and do it well\" (which is providing a basic password reset endpoint for django rest framework). contributions are welcome in the form of pull requests and issues! if you create a pull request, please make sure that you are not introducing breaking changes. \n\n## tests\n\nsee folder [tests/](tests/). basically, all endpoints are covered with multiple\nunit tests.\n\nuse this code snippet to run tests:\n```bash\npython setup.py install\ncd tests\npython manage.py test\n```\n\n## release on pypi\n\nto release this package on pypi, the following steps are used:\n\n```bash\nrm -rf dist/ build/\npython setup.py sdist\ntwine upload dist/*\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd license",
  "name": "django-rest-passwordreset",
  "package_url": "https://pypi.org/project/django-rest-passwordreset/",
  "project_url": "https://pypi.org/project/django-rest-passwordreset/",
  "project_urls": {
    "Homepage": "https://github.com/anexia-it/django-rest-passwordreset"
  },
  "release_url": "https://pypi.org/project/django-rest-passwordreset/1.3.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "an extension of django rest framework, providing a configurable password reset strategy",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "harald_nezbeda",
    "hnezbeda@anexia-it.com"
  ],
  "kwds": "django_rest_passwordreset django_rest_passwordreset_token_config reset_password_token django_rest_passwordreset_ip_address_header django_rest_passwordreset_no_information_leakage",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_django_rest_passwordreset",
  "homepage": "https://github.com/anexia-it/django-rest-passwordreset",
  "release_count": 18,
  "dependency_ids": []
}
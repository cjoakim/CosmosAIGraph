{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "=================================\nwelcome to python-binance v1.0.19\n=================================\n\nupdated 11th aug 2023\n\n.. image:: https://img.shields.io/pypi/v/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/l/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/travis/sammchardy/python-binance.svg\n    :target: https://travis-ci.org/sammchardy/python-binance\n\n.. image:: https://img.shields.io/coveralls/sammchardy/python-binance.svg\n    :target: https://coveralls.io/github/sammchardy/python-binance\n\n.. image:: https://img.shields.io/pypi/wheel/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\n.. image:: https://img.shields.io/pypi/pyversions/python-binance.svg\n    :target: https://pypi.python.org/pypi/python-binance\n\nthis is an unofficial python wrapper for the `binance exchange rest api v3 <https://binance-docs.github.io/apidocs/spot/en>`_. i am in no way affiliated with binance, use at your own risk.\n\nif you came here looking for the `binance exchange <https://www.binance.com/?ref=10099792>`_ to purchase cryptocurrencies, then `go here <https://www.binance.com/?ref=10099792>`_.\nif you want to automate interactions with binance stick around.\n\nif you're interested in binance's new dex binance chain see my `python-binance-chain library <https://github.com/sammchardy/python-binance-chain>`_\n\nsource code\n  https://github.com/sammchardy/python-binance\n\ndocumentation\n  https://python-binance.readthedocs.io/en/latest/\n\nbinance api telegram\n  https://t.me/binance_api_english\n\nblog with examples including async\n  https://sammchardy.github.io\n\n- `async basics for binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\n- `understanding binance order filters <https://sammchardy.github.io/binance/2021/05/03/binance-order-filters.html>`_\n\nmake sure you update often and check the `changelog <https://python-binance.readthedocs.io/en/latest/changelog.html>`_ for new features and bug fixes.\n\nfeatures\n--------\n\n- implementation of all general, market data and account endpoints.\n- asyncio implementation\n- testnet support for spot, futures and vanilla options\n- simple handling of authentication include rsa keys\n- no need to generate timestamps yourself, the wrapper does it for you\n- response exception handling\n- websocket handling with reconnection and multiplexed connections\n- symbol depth cache\n- historical kline/candle fetching function\n- withdraw functionality\n- deposit addresses\n- margin trading\n- futures trading\n- vanilla options\n- support other domains (.us, .jp, etc)\n\nupgrading to v1.0.0+\n--------------------\n\nthe breaking changes include the migration from wapi to sapi endpoints which related to the\nwallet endpoints detailed in the `binance docs <https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints>`_\n\nthe other breaking change is for websocket streams and the depth cache manager which have been\nconverted to use asynchronous context managers. see examples in the async section below or view the\n`websockets <https://python-binance.readthedocs.io/en/latest/websockets.html>`_ and\n`depth cache <https://python-binance.readthedocs.io/en/latest/depth_cache.html>`_ docs.\n\nquick start\n-----------\n\n`register an account with binance <https://accounts.binance.com/en/register?ref=10099792>`_.\n\n`generate an api key <https://www.binance.com/en/my/settings/api-management>`_ and assign relevant permissions.\n\nif you are using an exchange from the us, japan or other tld then make sure pass `tld='us'` when creating the\nclient.\n\nto use the `spot <https://testnet.binance.vision/>`_ or `vanilla options <https://testnet.binanceops.com/>`_ testnet,\npass `testnet=true` when creating the client.\n\n\n.. code:: bash\n\n    pip install python-binance\n\n\n.. code:: python\n\n    from binance import client, threadedwebsocketmanager, threadeddepthcachemanager\n    client = client(api_key, api_secret)\n\n    # get market depth\n    depth = client.get_order_book(symbol='bnbbtc')\n\n    # place a test market buy order, to place an actual order use the create_order function\n    order = client.create_test_order(\n        symbol='bnbbtc',\n        side=client.side_buy,\n        type=client.order_type_market,\n        quantity=100)\n\n    # get all symbol prices\n    prices = client.get_all_tickers()\n\n    # withdraw 100 eth\n    # check docs for assumptions around withdrawals\n    from binance.exceptions import binanceapiexception\n    try:\n        result = client.withdraw(\n            asset='eth',\n            address='<eth_address>',\n            amount=100)\n    except binanceapiexception as e:\n        print(e)\n    else:\n        print(\"success\")\n\n    # fetch list of withdrawals\n    withdraws = client.get_withdraw_history()\n\n    # fetch list of eth withdrawals\n    eth_withdraws = client.get_withdraw_history(coin='eth')\n\n    # get a deposit address for btc\n    address = client.get_deposit_address(coin='btc')\n\n    # get historical kline data from any date range\n\n    # fetch 1 minute klines for the last day up until now\n    klines = client.get_historical_klines(\"bnbbtc\", client.kline_interval_1minute, \"1 day ago utc\")\n\n    # fetch 30 minute klines for the last month of 2017\n    klines = client.get_historical_klines(\"ethbtc\", client.kline_interval_30minute, \"1 dec, 2017\", \"1 jan, 2018\")\n\n    # fetch weekly klines since it listed\n    klines = client.get_historical_klines(\"neobtc\", client.kline_interval_1week, \"1 jan, 2017\")\n\n    # socket manager using threads\n    twm = threadedwebsocketmanager()\n    twm.start()\n\n    # depth cache manager using threads\n    dcm = threadeddepthcachemanager()\n    dcm.start()\n\n    def handle_socket_message(msg):\n        print(f\"message type: {msg['e']}\")\n        print(msg)\n\n    def handle_dcm_message(depth_cache):\n        print(f\"symbol {depth_cache.symbol}\")\n        print(\"top 5 bids\")\n        print(depth_cache.get_bids()[:5])\n        print(\"top 5 asks\")\n        print(depth_cache.get_asks()[:5])\n        print(\"last update time {}\".format(depth_cache.update_time))\n\n    twm.start_kline_socket(callback=handle_socket_message, symbol='bnbbtc')\n\n    dcm.start_depth_cache(callback=handle_dcm_message, symbol='ethbtc')\n\n    # replace with a current options symbol\n    options_symbol = 'btc-210430-36000-c'\n    dcm.start_options_depth_cache(callback=handle_dcm_message, symbol=options_symbol)\n\n    # join the threaded managers to the main thread\n    twm.join()\n    dcm.join()\n\nfor more `check out the documentation <https://python-binance.readthedocs.io/en/latest/>`_.\n\nasync example\n-------------\n\nread `async basics for binance <https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html>`_\nfor more information.\n\n.. code:: python\n\n    import asyncio\n    import json\n\n    from binance import asyncclient, depthcachemanager, binancesocketmanager\n\n    async def main():\n\n        # initialise the client\n        client = await asyncclient.create()\n\n        # run some simple requests\n        print(json.dumps(await client.get_exchange_info(), indent=2))\n\n        print(json.dumps(await client.get_symbol_ticker(symbol=\"btcusdt\"), indent=2))\n\n        # initialise websocket factory manager\n        bsm = binancesocketmanager(client)\n\n        # create listener using async with\n        # this will exit and close the connection after 5 messages\n        async with bsm.trade_socket('ethbtc') as ts:\n            for _ in range(5):\n                res = await ts.recv()\n                print(f'recv {res}')\n\n        # get historical kline data from any date range\n\n        # fetch 1 minute klines for the last day up until now\n        klines = client.get_historical_klines(\"bnbbtc\", asyncclient.kline_interval_1minute, \"1 day ago utc\")\n\n        # use generator to fetch 1 minute klines for the last day up until now\n        async for kline in await client.get_historical_klines_generator(\"bnbbtc\", asyncclient.kline_interval_1minute, \"1 day ago utc\"):\n            print(kline)\n\n        # fetch 30 minute klines for the last month of 2017\n        klines = client.get_historical_klines(\"ethbtc\", client.kline_interval_30minute, \"1 dec, 2017\", \"1 jan, 2018\")\n\n        # fetch weekly klines since it listed\n        klines = client.get_historical_klines(\"neobtc\", client.kline_interval_1week, \"1 jan, 2017\")\n\n        # setup an async context the depth cache and exit after 5 messages\n        async with depthcachemanager(client, symbol='ethbtc') as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        # vanilla options depth cache works the same, update the symbol to a current one\n        options_symbol = 'btc-210430-36000-c'\n        async with optionsdepthcachemanager(client, symbol=options_symbol) as dcm_socket:\n            for _ in range(5):\n                depth_cache = await dcm_socket.recv()\n                count += 1\n                print(f\"symbol {depth_cache.symbol} updated:{depth_cache.update_time}\")\n                print(\"top 5 asks:\")\n                print(depth_cache.get_asks()[:5])\n                print(\"top 5 bids:\")\n                print(depth_cache.get_bids()[:5])\n\n        await client.close_connection()\n\n    if __name__ == \"__main__\":\n\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n\ndonate\n------\n\nif this library helped you out feel free to donate.\n\n- eth: 0xd7a7fddcfa687073d7cc93e9e51829a727f9fe70\n- ltc: lpc5vw9ajr1ynde1hyveo3kj9ldhjcrcuz\n- neo: avjb4zgn7vgsutarct94y7zyt6d5ndfpbo\n- btc: 1dknp6l6orzrhdecredihpzx2ssfmvebys\n\nother exchanges\n---------------\n\nif you use `binance chain <https://testnet.binance.org/>`_ check out my `python-binance-chain <https://github.com/sammchardy/python-binance-chain>`_ library.\n\nif you use `kucoin <https://www.kucoin.com/?rcode=e42cwb>`_ check out my `python-kucoin <https://github.com/sammchardy/python-kucoin>`_ library.\n\nif you use `idex <https://idex.market>`_ check out my `python-idex <https://github.com/sammchardy/python-idex>`_ library.\n\n.. image:: https://ga-beacon.appspot.com/ua-111417213-1/github/python-binance?pixel&usereferer\n\n\n",
  "docs_url": null,
  "keywords": "binance exchange rest api bitcoin ethereum btc eth neo",
  "license": "mit",
  "name": "python-binance",
  "package_url": "https://pypi.org/project/python-binance/",
  "project_url": "https://pypi.org/project/python-binance/",
  "project_urls": {
    "Homepage": "https://github.com/sammchardy/python-binance"
  },
  "release_url": "https://pypi.org/project/python-binance/1.0.19/",
  "requires_dist": [
    "requests",
    "six",
    "dateparser",
    "aiohttp",
    "ujson",
    "websockets",
    "pycryptodome"
  ],
  "requires_python": "",
  "summary": "binance rest api python implementation",
  "version": "1.0.19",
  "releases": [],
  "developers": [
    "sam_mchardy"
  ],
  "kwds": "binance binanceapiexception binanceops binance_api_english binancesocketmanager",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_binance",
  "homepage": "https://github.com/sammchardy/python-binance",
  "release_count": 81,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_dateparser",
    "pypi_pycryptodome",
    "pypi_requests",
    "pypi_six",
    "pypi_ujson",
    "pypi_websockets"
  ]
}
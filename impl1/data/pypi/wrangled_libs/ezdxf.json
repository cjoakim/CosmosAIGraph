{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "\n# ezdxf\n\n## abstract\n\nthis python package is designed to facilitate the creation and manipulation of dxf \ndocuments, with compatibility across various dxf versions. it empowers users to \nseamlessly load and edit dxf files while preserving all content, except for comments.\n\nany unfamiliar dxf tags encountered in the document are gracefully ignored but retained \nfor future modifications. this feature enables the processing of dxf documents \ncontaining data from third-party applications without any loss of valuable information.\n\n## quick-info\n\n- `ezdxf` is a python package to create new dxf files and read/modify/write \n  existing dxf documents\n- mit-license\n- the intended audience are programmers\n- requires at least python 3.8\n- os independent\n- tested with cpython and pypy3\n- has type annotations and passes `mypy --ignore-missing-imports -p ezdxf` successful\n- additional required packages for the core package without add-ons\n  - [typing_extensions](https://pypi.org/project/typing-extensions/)\n  - [pyparsing](https://pypi.org/project/pyparsing/)\n  - [numpy](https://pypi.org/project/numpy/)\n  - [fonttools](https://pypi.org/project/fonttools/)\n- read/write/new support for dxf versions: r12, r2000, r2004, r2007, r2010, r2013 and r2018\n- additional read-only support for dxf versions r13/r14 (upgraded to r2000)\n- additional read-only support for older dxf versions than r12 (upgraded to r12)\n- read/write support for ascii dxf and binary dxf\n- retains third-party dxf content\n- optional c-extensions for cpython are included in the binary wheels, available \n  on [pypi](https://pypi.org/project/ezdxf/) for windows, linux and macos\n- command line script `ezdxf` to display, convert and inspect dxf files\n\n## included extensions\n\nadditional packages required for these add-ons are not automatically installed \nduring the *basic* setup, for more information about the setup & dependencies \nvisit the [documentation](https://ezdxf.mozman.at/docs/setup.html).\n\n- the `drawing` add-on is a translation layer to send dxf data to a render backend, \n  interfaces to [matplotlib](https://pypi.org/project/matplotlib/), which can export \n  images as png, pdf or svg, and [pyqt5](https://pypi.org/project/pyqt5/) are implemented.\n- `r12writer` add-on to write basic dxf entities direct and fast into a dxf r12 \n  file or stream\n- `iterdxf` add-on to iterate over dxf entities from the modelspace of huge dxf \n  files (> 5gb) which do not fit into memory\n- `importer` add-on to import entities, blocks and table entries from another dxf document\n- `dxf2code` add-on to generate python code for dxf structures loaded from dxf \n  documents as starting point for parametric dxf entity creation\n- `acadctb` add-on to read/write plot style files (ctb/stb)\n- `pycsg` add-on for basic constructive solid geometry (csg) modeling\n- `mtextexplode` add-on for exploding mtext entities into single-line text entities\n- `text2path` add-on to convert text into outline paths\n- `geo` add-on to support the [`__geo_interface__`](https://gist.github.com/sgillies/2217756)\n- `meshex` for exchanging meshes with other tools as stl, off or obj files\n- `openscad` add-on, an interface to [openscad](https://openscad.org)\n- `odafc` add-on, an interface to the [oda file converter](https://www.opendesign.com/guestfiles/oda_file_converter) \n  to read and write dwg files\n- `hpgl2` add-on for converting hpgl/2 plot files to dxf, svg and pdf\n\na simple example:\n\n```python\nimport ezdxf\nfrom ezdxf import colors\nfrom ezdxf.enums import textentityalignment\n\n# create a new dxf document.\ndoc = ezdxf.new(dxfversion=\"r2010\")\n\n# create new table entries (layers, linetypes, text styles, ...).\ndoc.layers.add(\"textlayer\", color=colors.red)\n\n# dxf entities (line, text, ...) reside in a layout (modelspace, \n# paperspace layout or block definition).  \nmsp = doc.modelspace()\n\n# add entities to a layout by factory methods: layout.add_...() \nmsp.add_line((0, 0), (10, 0), dxfattribs={\"color\": colors.yellow})\nmsp.add_text(\n    \"test\", \n    dxfattribs={\n        \"layer\": \"textlayer\"\n    }).set_placement((0, 0.2), align=textentityalignment.center)\n\n# save the dxf document.\ndoc.saveas(\"test.dxf\")\n```\n\nexample for the *r12writer*, which writes a simple dxf r12 file without \nin-memory structures:\n\n```python\nfrom random import random\nfrom ezdxf.addons import r12writer\n\nmax_x_coord = 1000\nmax_y_coord = 1000\n\nwith r12writer(\"many_circles.dxf\") as doc:\n    for _ in range(100000):\n        doc.add_circle((max_x_coord*random(), max_y_coord*random()), radius=2)\n```\n\nthe r12writer supports only the entities section of a dxf r12 drawing, no header, \ntables or blocks section is present, except fixed-tables are written, than some \nadditional predefined text styles and line types are available.\n\n## installation\n\nbasic installation by pip including the optional c-extensions from pypi as \nbinary wheels:\n\n    pip install ezdxf\n\nfull installation with all dependencies (matplotlib, pyside6) for using the \ndrawing add-on:\n\n    pip install ezdxf[draw]\n\nfor more information about the setup & dependencies visit the \n[documentation](https://ezdxf.mozman.at/docs/setup.html).\n\n## command line\n\nuse `python -m ezdxf ...` if your shell can't find the `ezdxf` script.\n\nget additional help for a sub-command:\n\n    ezdxf <cmd> -h\n\npreview dxf files in a graphical window:\n\n    ezdxf view <file.dxf>\n\nexport the modelspace of dxf files as png|svg|pdf:\n\n    ezdxf draw -o file.<png|svg|pdf> <file.dxf>\n\nprint basic information about dxf files:\n\n    ezdxf info <file.dxf>\n\nshow detailed information and structures of dxf files:\n\n    ezdxf browse <file.dxf>\n\naudit dxf files:\n\n    ezdxf audit <file.dxf>\n\npreview and convert hpgl/2 plot files:\n\n    ezdxf hpgl <file.plt>\n\n\n## website\n\nhttps://ezdxf.mozman.at/\n\n## documentation\n\ndocumentation of the development version at https://ezdxf.mozman.at/docs\n\ndocumentation of the latest release at https://ezdxf.readthedocs.io/\n\n## knowledge graph\n\nthe knowledge graph contains additional information beyond the documentation and is \nmanaged by [logseq](https://logseq.com/).  the source data is included in the repository \nin the folder `ezdxf/notes`.  there is also a [html export](https://ezdxf.mozman.at/notes/#/page/ezdxf) \non the website which gets regular updates.\n\n\n## contribution\n\nthe source code of *ezdxf* can be found at __github__, target your pull requests \nto the `master` branch:\n\nhttps://github.com/mozman/ezdxf.git\n\n\n## feedback\n\nquestions and feedback at __github discussions__:\n\nhttps://github.com/mozman/ezdxf/discussions\n\nquestions at __stack overflow__:\n\npost questions at [stack overflow](https://stackoverflow.com/) and use the tag `dxf` or `ezdxf`.\n\nissue tracker at __github__:\n\nhttp://github.com/mozman/ezdxf/issues\n\n## release notes\n\nthe [release notes](https://ezdxf.mozman.at/notes/#/page/release%20notes) are included \nin the knowledge graph.\n\n## changelog\n\nthe [changelog](https://ezdxf.mozman.at/notes/#/page/changelog) is included \nin the knowledge graph.\n\n\n## contact\n\nplease __always__ post questions at the [forum](https://github.com/mozman/ezdxf/discussions) \nor [stack overflow](https://stackoverflow.com/) to make answers \navailable to other users as well. \n\nezdxf@mozman.at\n\nfeedback is greatly appreciated.\n\nmanfred\n\n\n",
  "docs_url": null,
  "keywords": "dxf,cad",
  "license": "mit license",
  "name": "ezdxf",
  "package_url": "https://pypi.org/project/ezdxf/",
  "project_url": "https://pypi.org/project/ezdxf/",
  "project_urls": {
    "Download": "https://pypi.org/project/ezdxf/",
    "Homepage": "https://ezdxf.mozman.at"
  },
  "release_url": "https://pypi.org/project/ezdxf/1.1.4/",
  "requires_dist": [
    "pyparsing >=2.0.1",
    "typing-extensions >=4.6.0",
    "numpy",
    "fonttools",
    "matplotlib ; extra == 'all'",
    "PySide6 ; extra == 'all'",
    "PyMuPDF >=1.20.0 ; extra == 'all'",
    "setuptools ; extra == 'all'",
    "wheel ; extra == 'all'",
    "Cython ; extra == 'all'",
    "pytest ; extra == 'all'",
    "matplotlib ; extra == 'all5'",
    "PyQt5 ; extra == 'all5'",
    "PyMuPDF >=1.20.0 ; extra == 'all5'",
    "setuptools ; extra == 'all5'",
    "wheel ; extra == 'all5'",
    "Cython ; extra == 'all5'",
    "pytest ; extra == 'all5'",
    "setuptools ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "Cython ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "matplotlib ; extra == 'draw'",
    "PySide6 ; extra == 'draw'",
    "PyMuPDF >=1.20.0 ; extra == 'draw'",
    "matplotlib ; extra == 'draw5'",
    "PyQt5 ; extra == 'draw5'",
    "PyMuPDF >=1.20.0 ; extra == 'draw5'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "a python package to create/manipulate dxf drawings.",
  "version": "1.1.4",
  "releases": [],
  "developers": [
    "manfred_moitzi",
    "me@mozman.at"
  ],
  "kwds": "dxfversion dxf dxf2code python iterdxf",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_ezdxf",
  "homepage": "https://ezdxf.mozman.at",
  "release_count": 190,
  "dependency_ids": [
    "pypi_cython",
    "pypi_fonttools",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pymupdf",
    "pypi_pyparsing",
    "pypi_pyqt5",
    "pypi_pyside6",
    "pypi_pytest",
    "pypi_setuptools",
    "pypi_typing_extensions",
    "pypi_wheel"
  ]
}
{
  "classifiers": [],
  "description": "# jsonref\n\n[![image](https://github.com/gazpachoking/jsonref/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/gazpachoking/jsonref/actions/workflows/test.yml?query=branch%3amaster)\n[![image](https://readthedocs.org/projects/jsonref/badge/?version=latest)](https://jsonref.readthedocs.io/en/latest/)\n[![image](https://coveralls.io/repos/gazpachoking/jsonref/badge.png?branch=master)](https://coveralls.io/r/gazpachoking/jsonref)\n[![image](https://img.shields.io/pypi/v/jsonref?color=%2334d058&label=pypi%20package)](https://pypi.org/project/jsonref)\n\n`jsonref` is a library for automatic dereferencing of [json\nreference](https://datatracker.ietf.org/doc/html/draft-pbryan-zyp-json-ref-03)\nobjects for python (supporting python 3.7+).\n\nthis library lets you use a data structure with json reference objects,\nas if the references had been replaced with the referent data.\n\n```python console\n>>> from pprint import pprint\n>>> import jsonref\n\n>>> # an example json document\n>>> json_str = \"\"\"{\"real\": [1, 2, 3, 4], \"ref\": {\"$ref\": \"#/real\"}}\"\"\"\n>>> data = jsonref.loads(json_str)\n>>> pprint(data)  # reference is not evaluated until here\n{'real': [1, 2, 3, 4], 'ref': [1, 2, 3, 4]}\n```\n\n# features\n\n-   references are evaluated lazily. nothing is dereferenced until it is\n    used.\n-   recursive references are supported, and create recursive python data\n    structures.\n\nreferences objects are actually replaced by lazy lookup proxy objects\nwhich are almost completely transparent.\n\n```python console\n>>> data = jsonref.loads('{\"real\": [1, 2, 3, 4], \"ref\": {\"$ref\": \"#/real\"}}')\n>>> # you can tell it is a proxy by using the type function\n>>> type(data[\"real\"]), type(data[\"ref\"])\n(<class 'list'>, <class 'jsonref.jsonref'>)\n>>> # you have direct access to the referent data with the __subject__\n>>> # attribute\n>>> type(data[\"ref\"].__subject__)\n<class 'list'>\n>>> # if you need to get at the reference object\n>>> data[\"ref\"].__reference__\n{'$ref': '#/real'}\n>>> # other than that you can use the proxy just like the underlying object\n>>> ref = data[\"ref\"]\n>>> isinstance(ref, list)\ntrue\n>>> data[\"real\"] == ref\ntrue\n>>> ref.append(5)\n>>> del ref[0]\n>>> # actions on the reference affect the real data (if it is mutable)\n>>> pprint(data)\n{'real': [2, 3, 4, 5], 'ref': [2, 3, 4, 5]}\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "jsonref",
  "package_url": "https://pypi.org/project/jsonref/",
  "project_url": "https://pypi.org/project/jsonref/",
  "project_urls": {
    "documentation": "https://jsonref.readthedocs.io/en/latest/",
    "repository": "https://github.com/gazpachoking/jsonref"
  },
  "release_url": "https://pypi.org/project/jsonref/1.1.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "jsonref is a library for automatic dereferencing of json reference objects for python.",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "chase.sterling@gmail.com"
  ],
  "kwds": "jsonref json json_str badge yml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jsonref",
  "homepage": "",
  "release_count": 10,
  "dependency_ids": []
}
{
  "classifiers": [],
  "description": "# sudachipy\n[![pypi version](https://img.shields.io/pypi/v/sudachipy.svg)](https://pypi.python.org/pypi/sudachipy/)\n[![](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[documentation](https://worksapplications.github.io/sudachi.rs/python)\n\nsudachipy is a python version of [sudachi](https://github.com/worksapplications/sudachi), a japanese morphological analyzer.\n\nthis is not a pure python implementation, but bindings for the\n[sudachi.rs](https://github.com/worksapplications/sudachi.rs).\n\n## binary wheels\n\nwe provide binary builds for macos (10.14+), windows and linux only for x86_64 architecture.\nx86 32-bit architecture is not supported and is not tested.\nmacos source builds seem to work on arm-based (aarch64) macs,\nbut this architecture also is not tested and require installing rust toolchain and cargo.\n\nmore information [here](https://worksapplications.github.io/sudachi.rs/python/topics/wheels.html).\n\n## tl;dr\n\n```bash\n$ pip install sudachipy sudachidict_core\n\n$ echo \"\u9ad8\u8f2a\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u99c5\" | sudachipy\n\u9ad8\u8f2a\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u99c5\t\u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u9ad8\u8f2a\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u99c5\neos\n\n$ echo \"\u9ad8\u8f2a\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\u99c5\" | sudachipy -m a\n\u9ad8\u8f2a\t\u540d\u8a5e,\u56fa\u6709\u540d\u8a5e,\u5730\u540d,\u4e00\u822c,*,*\t\u9ad8\u8f2a\n\u30b2\u30fc\u30c8\u30a6\u30a7\u30a4\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u30b2\u30fc\u30c8\u30a6\u30a7\u30fc\n\u99c5\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u99c5\neos\n\n$ echo \"\u7a7a\u7f36\u7a7a\u7f50\u7a7a\u304d\u30ab\u30f3\" | sudachipy -a\n\u7a7a\u7f36\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u7a7a\u304d\u7f36\t\u7a7a\u7f36\t\u30a2\u30ad\u30ab\u30f3\t0\n\u7a7a\u7f50\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u7a7a\u304d\u7f36\t\u7a7a\u7f50\t\u30a2\u30ad\u30ab\u30f3\t0\n\u7a7a\u304d\u30ab\u30f3\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u7a7a\u304d\u7f36\t\u7a7a\u304d\u30ab\u30f3\t\u30a2\u30ad\u30ab\u30f3\t0\neos\n```\n\n```python\nfrom sudachipy import dictionary, splitmode\n\ntokenizer = dictionary().create()\n\nmorphemes = tokenizer.tokenize(\"\u56fd\u4f1a\u8b70\u4e8b\u5802\u524d\u99c5\")\nprint(morphemes[0].surface())  # '\u56fd\u4f1a\u8b70\u4e8b\u5802\u524d\u99c5'\nprint(morphemes[0].reading_form())  # '\u30b3\u30c3\u30ab\u30a4\u30ae\u30b8\u30c9\u30a6\u30de\u30a8\u30a8\u30ad'\nprint(morphemes[0].part_of_speech())  # ['\u540d\u8a5e', '\u56fa\u6709\u540d\u8a5e', '\u4e00\u822c', '*', '*', '*']\n\nmorphemes = tokenizer.tokenize(\"\u56fd\u4f1a\u8b70\u4e8b\u5802\u524d\u99c5\", splitmode.a)\nprint([m.surface() for m in morphemes])  # ['\u56fd\u4f1a', '\u8b70\u4e8b', '\u5802', '\u524d', '\u99c5']\n```\n\n\n## setup\n\nyou need sudachipy and a dictionary.\n\n### step 1. install sudachipy\n\n```bash\n$ pip install sudachipy\n```\n\n### step 2. get a dictionary\n\nyou can get dictionary as a python package. it make take a while to download the dictionary file (around 70mb for the `core` edition).\n\n```bash\n$ pip install sudachidict_core\n```\n\nalternatively, you can choose other dictionary editions. see [this section](#dictionary-edition) for the detail.\n\n\n## usage: as a command\n\nthere is a cli command `sudachipy`.\n\n```bash\n$ echo \"\u5916\u56fd\u4eba\u53c2\u653f\u6a29\" | sudachipy\n\u5916\u56fd\u4eba\u53c2\u653f\u6a29\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u5916\u56fd\u4eba\u53c2\u653f\u6a29\neos\n$ echo \"\u5916\u56fd\u4eba\u53c2\u653f\u6a29\" | sudachipy -m a\n\u5916\u56fd\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u5916\u56fd\n\u4eba\t\u63a5\u5c3e\u8f9e,\u540d\u8a5e\u7684,\u4e00\u822c,*,*,*\t\u4eba\n\u53c2\u653f\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u53c2\u653f\n\u6a29\t\u63a5\u5c3e\u8f9e,\u540d\u8a5e\u7684,\u4e00\u822c,*,*,*\t\u6a29\neos\n```\n\n```bash\n$ sudachipy tokenize -h\nusage: sudachipy tokenize [-h] [-r file] [-m {a,b,c}] [-o file] [-s string]\n                          [-a] [-d] [-v]\n                          [file [file ...]]\n\ntokenize text\n\npositional arguments:\n  file           text written in utf-8\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -r file        the setting file in json format\n  -m {a,b,c}     the mode of splitting\n  -o file        the output file\n  -s string      sudachidict type\n  -a             print all of the fields\n  -d             print the debug information\n  -v, --version  print sudachipy version\n```\n\n__note: the debug option (`-d`) is disabled in version 0.6.0.__\n\n\n### output\n\ncolumns are tab separated.\n\n- surface\n- part-of-speech tags (comma separated)\n- normalized form\n\nwhen you add the `-a` option, it additionally outputs\n\n- dictionary form\n- reading form\n- dictionary id\n  - `0` for the system dictionary\n  - `1` and above for the [user dictionaries](#user-dictionary)\n  - `-1` if a word is out-of-vocabulary (not in the dictionary)\n- synonym group ids\n- `(oov)` if a word is out-of-vocabulary (not in the dictionary)\n\n```bash\n$ echo \"\u5916\u56fd\u4eba\u53c2\u653f\u6a29\" | sudachipy -a\n\u5916\u56fd\u4eba\u53c2\u653f\u6a29\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u5916\u56fd\u4eba\u53c2\u653f\u6a29\t\u5916\u56fd\u4eba\u53c2\u653f\u6a29\t\u30ac\u30a4\u30b3\u30af\u30b8\u30f3\u30b5\u30f3\u30bb\u30a4\u30b1\u30f3\t0\t[]\neos\n```\n\n```bash\necho \"\u963fquei\" | sudachipy -a\n\u963f\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\t\u963f\t\u963f\t\t-1\t[]\t(oov)\nquei\t\u540d\u8a5e,\u666e\u901a\u540d\u8a5e,\u4e00\u822c,*,*,*\tquei\tquei\t\t-1\t[]\t(oov)\neos\n```\n\n\n## usage: as a python package\n\n### api\n\nsee [api reference page](https://worksapplications.github.io/sudachi.rs/python/).\n\n\n### example\n\n```python\nfrom sudachipy import dictionary, splitmode\n\ntokenizer_obj = dictionary().create()\n```\n\n```python\n# multi-granular tokenization\n\n# splitmode.c is the default mode\n[m.surface() for m in tokenizer_obj.tokenize(\"\u56fd\u5bb6\u516c\u52d9\u54e1\", splitmode.c)]\n# => ['\u56fd\u5bb6\u516c\u52d9\u54e1']\n\n[m.surface() for m in tokenizer_obj.tokenize(\"\u56fd\u5bb6\u516c\u52d9\u54e1\", splitmode.b)]\n# => ['\u56fd\u5bb6', '\u516c\u52d9\u54e1']\n\n[m.surface() for m in tokenizer_obj.tokenize(\"\u56fd\u5bb6\u516c\u52d9\u54e1\", splitmode.a)]\n# => ['\u56fd\u5bb6', '\u516c\u52d9', '\u54e1']\n```\n\n```python\n# morpheme information\n\nm = tokenizer_obj.tokenize(\"\u98df\u3079\")[0]\n\nm.surface() # => '\u98df\u3079'\nm.dictionary_form() # => '\u98df\u3079\u308b'\nm.reading_form() # => '\u30bf\u30d9'\nm.part_of_speech() # => ['\u52d5\u8a5e', '\u4e00\u822c', '*', '*', '\u4e0b\u4e00\u6bb5-\u30d0\u884c', '\u9023\u7528\u5f62-\u4e00\u822c']\n```\n\n```python\n# normalization\n\ntokenizer_obj.tokenize(\"\u9644\u5c5e\", mode)[0].normalized_form()\n# => '\u4ed8\u5c5e'\ntokenizer_obj.tokenize(\"summer\", mode)[0].normalized_form()\n# => '\u30b5\u30de\u30fc'\ntokenizer_obj.tokenize(\"\u30b7\u30e5\u30df\u30ec\u30fc\u30b7\u30e7\u30f3\", mode)[0].normalized_form()\n# => '\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3'\n```\n\n(with `20210802` `core` dictionary. the results may change when you use other versions)\n\n\n## dictionary edition\n\nthere are three editions of sudachi dictionary, namely, `small`, `core`, and `full`. see [worksapplications/sudachidict](https://github.com/worksapplications/sudachidict) for the detail.\n\nsudachipy uses `sudachidict_core` by default.\n\ndictionaries are installed as python packages `sudachidict_small`, `sudachidict_core`, and `sudachidict_full`.\n\n* [sudachidict-small \u00b7 pypi](https://pypi.org/project/sudachidict-small/)\n* [sudachidict-core \u00b7 pypi](https://pypi.org/project/sudachidict-core/)\n* [sudachidict-full \u00b7 pypi](https://pypi.org/project/sudachidict-full/)\n\nthe dictionary files are not in the package itself, but it is downloaded upon installation.\n\n### dictionary option: command line\n\nyou can specify the dictionary with the tokenize option `-s`.\n\n```bash\n$ pip install sudachidict_small\n$ echo \"\u5916\u56fd\u4eba\u53c2\u653f\u6a29\" | sudachipy -s small\n```\n\n```bash\n$ pip install sudachidict_full\n$ echo \"\u5916\u56fd\u4eba\u53c2\u653f\u6a29\" | sudachipy -s full\n```\n\n\n### dictionary option: python package\n\nyou can specify the dictionary with the `dicionary()` argument; `config_path` or `dict_type`.\n\n```python\nclass dictionary(config_path=none, resource_dir=none, dict_type=none)\n```\n\n1. `config_path`\n    * you can specify the file path to the setting file with `config_path` (see [dictionary in the setting file](#dictionary in the setting file) for the detail).\n    * if the dictionary file is specified in the setting file as `systemdict`, sudachipy will use the dictionary.\n2. `dict_type`\n    * you can also specify the dictionary type with `dict_type`.\n    * the available arguments are `small`, `core`, or `full`.\n    * if different dictionaries are specified with `config_path` and `dict_type`, **a dictionary defined `dict_type` overrides** those defined in the config path.\n\n```python\nfrom sudachipy import dictionary\n\n# default: sudachidict_core\ntokenizer_obj = dictionary().create()\n\n# the dictionary given by the `systemdict` key in the config file (/path/to/sudachi.json) will be used\ntokenizer_obj = dictionary(config_path=\"/path/to/sudachi.json\").create()\n\n# the dictionary specified by `dict_type` will be set.\ntokenizer_obj = dictionary(dict_type=\"core\").create()  # sudachidict_core (same as default)\ntokenizer_obj = dictionary(dict_type=\"small\").create()  # sudachidict_small\ntokenizer_obj = dictionary(dict_type=\"full\").create()  # sudachidict_full\n\n# the dictionary specified by `dict_type` overrides those defined in the config path.\n# in the following code, `sudachidict_full` will be used regardless of a dictionary defined in the config file.\ntokenizer_obj = dictionary(config_path=\"/path/to/sudachi.json\", dict_type=\"full\").create()\n```\n\n\n### dictionary in the setting file\n\nalternatively, if the dictionary file is specified in the setting file, `sudachi.json`, sudachipy will use that file.\n\n```js\n{\n    \"systemdict\" : \"relative/path/from/resourcedir/to/system.dic\",\n    ...\n}\n```\n\nthe default setting file is [sudachi.json](https://github.com/worksapplications/sudachi.rs/blob/develop/python/py_src/sudachipy/resources/sudachi.json). you can specify your `sudachi.json` with the `-r` option.\n\n```bash\n$ sudachipy -r path/to/sudachi.json\n```\n\n\n## user dictionary\n\nto use a user dictionary, `user.dic`, place [sudachi.json](https://github.com/worksapplications/sudachi.rs/blob/develop/python/py_src/sudachipy/resources/sudachi.json) to anywhere you like, and add `userdict` value with the relative path from `sudachi.json` to your `user.dic`.\n\n```js\n{\n    \"userdict\" : [\"relative/path/to/user.dic\"],\n    ...\n}\n```\n\nthen specify your `sudachi.json` with the `-r` option.\n\n```bash\n$ sudachipy -r path/to/sudachi.json\n```\n\n\nyou can build a user dictionary with the subcommand `ubuild`.\n\n\n```bash\n$ sudachipy ubuild -h\nusage: sudachipy ubuild [-h] [-d string] [-o file] [-s file] file [file ...]\n\nbuild user dictionary\n\npositional arguments:\n  file        source files with csv format (one or more)\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -d string   description comment to be embedded on dictionary\n  -o file     output file (default: user.dic)\n  -s file     system dictionary path (default: system core dictionary path)\n```\n\nabout the dictionary file format, please refer to [this document](https://github.com/worksapplications/sudachi/blob/develop/docs/user_dict.md) (written in japanese, english version is not available yet).\n\n\n## customized system dictionary\n\n```bash\n$ sudachipy build -h\nusage: sudachipy build [-h] [-o file] [-d string] -m file file [file ...]\n\nbuild sudachi dictionary\n\npositional arguments:\n  file        source files with csv format (one of more)\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -o file     output file (default: system.dic)\n  -d string   description comment to be embedded on dictionary\n\nrequired named arguments:\n  -m file     connection matrix file with mecab's matrix.def format\n```\n\nto use your customized `system.dic`, place [sudachi.json](https://github.com/worksapplications/sudachi.rs/blob/develop/python/py_src/sudachipy/resources/sudachi.json) to anywhere you like, and overwrite `systemdict` value with the relative path from `sudachi.json` to your `system.dic`.\n\n```js\n{\n    \"systemdict\" : \"relative/path/to/system.dic\",\n    ...\n}\n```\n\nthen specify your `sudachi.json` with the `-r` option.\n\n```bash\n$ sudachipy -r path/to/sudachi.json\n```\n\n\n## for developers\n\n### build from source\n\n#### install sdist via pip\n\n1. install python module `setuptools` and `setuptools-rust`.\n2. run `./build-sdist.sh` in `python` dir.\n    - source distribution will be generated under `python/dist/` dir.\n3. install it via pip: `pip install ./python/dist/sudachipy-[version].tar.gz`\n\n\n#### install develop build\n\n1. install python module `setuptools` and `setuptools-rust`.\n2. run `python3 setup.py develop`.\n    - `develop` will create a debug build, while `install` will create a release build.\n3. now you can import the module by `import sudachipy`.\n\nref: [setuptools-rust](https://github.com/pyo3/setuptools-rust)\n\n\n### test\n\nrun `build_and_test.sh` to run the tests.\n\n\n## contact\n\nsudachi and sudachipy are developed by [wap tokushima laboratory of ai and nlp](http://nlp.worksap.co.jp/).\n\nopen an issue, or come to our slack workspace for questions and discussion.\n\nhttps://sudachi-dev.slack.com/ (get invitation [here](https://join.slack.com/t/sudachi-dev/shared_invite/enqtmzg2nti2njyxntuyltmyymnkzwq0y2e5nmqxmti3zgm3ndu0nzu4nge1y2uwytvmntviyjjmndi0mwziytg4odnmmzgxytq3zmi2owu))\n\nenjoy tokenization!\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "sudachipy",
  "package_url": "https://pypi.org/project/SudachiPy/",
  "project_url": "https://pypi.org/project/SudachiPy/",
  "project_urls": {
    "Homepage": "https://github.com/WorksApplications/sudachi.rs/tree/develop/python"
  },
  "release_url": "https://pypi.org/project/SudachiPy/0.6.8/",
  "requires_dist": [
    "tokenizers ; extra == 'tests'",
    "sudachidict-core ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "python version of sudachi, the japanese morphological analyzer",
  "version": "0.6.8",
  "releases": [],
  "developers": [
    "sudachi@worksap.co.jp",
    "works_applications"
  ],
  "kwds": "sudachipy sudachidict sudachi sudachidict_core sudachidict_small",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_sudachipy",
  "homepage": "https://github.com/worksapplications/sudachi.rs/tree/develop/python",
  "release_count": 39,
  "dependency_ids": [
    "pypi_sudachidict_core",
    "pypi_tokenizers"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: utilities"
  ],
  "description": "django postgresql netfields\n===========================\n\nthis project is an attempt at making proper postgresql net related fields for\ndjango. in django pre 1.4 the built in ``ipaddressfield`` does not support ipv6\nand uses an inefficient ``host()`` cast in all lookups. as of 1.4 you can use\n``genericipaddressfield`` for ipv6, but the casting problem remains.\n\nin addition to the basic ``ipaddressfield`` replacement, ``inetaddressfield``,\na ``cidraddressfield`` a ``macaddressfield``, and a ``macaddress8field`` have\nbeen added. this library also provides a manager that allows for advanced ip\nbased lookups directly in the orm.\n\nin python, the values of the ip address fields are represented as types from\nthe ipaddress_ module. in python 2.x, a backport_ is used. the mac address\nfields are represented as eui types from the netaddr_ module.\n\n.. _ipaddress: https://docs.python.org/3/library/ipaddress.html\n.. _backport: https://pypi.python.org/pypi/ipaddress/\n.. _netaddr: http://pythonhosted.org/netaddr/\n\ndependencies\n------------\n\nthis module requires ``django >= 1.11``, ``psycopg2`` or ``psycopg``, and ``netaddr``.\n\ninstallation\n------------\n\n.. code-block:: bash\n\n $ pip install django-netfields\n\ngetting started\n---------------\n\nmake sure ``netfields`` is in your ``pythonpath`` and in ``installed_apps``.\n\n``inetaddressfield`` will store values in postgresql as type ``inet``. in\npython, the value will be represented as an ``ipaddress.ip_interface`` object\nrepresenting an ip address and netmask/prefix length pair unless the\n``store_prefix_length`` argument is set to ``false``, in which case the value\nwill be represented as an ``ipaddress.ip_address`` object.\n\n.. code-block:: python\n\n from netfields import inetaddressfield, netmanager\n\n class example(models.model):\n     inet = inetaddressfield()\n     # ...\n\n     objects = netmanager()\n\n``cidraddressfield`` will store values in postgresql as type ``cidr``. in\npython, the value will be represented as an ``ipaddress.ip_network`` object.\n\n.. code-block:: python\n\n from netfields import cidraddressfield, netmanager\n\n class example(models.model):\n     inet = cidraddressfield()\n     # ...\n\n     objects = netmanager()\n\n``macaddressfield`` will store values in postgresql as type ``macaddr``. in\npython, the value will be represented as a ``netaddr.eui`` object. note that\nthe default text representation of eui objects is not the same as that of the\n``netaddr`` module. it is represented in a format that is more commonly used\nin network utilities and by network administrators (``00:11:22:aa:bb:cc``).\n\n.. code-block:: python\n\n from netfields import macaddressfield, netmanager\n\n class example(models.model):\n     inet = macaddressfield()\n     # ...\n\n``macaddress8field`` will store values in postgresql as type ``macaddr8``. in\npython, the value will be represented as a ``netaddr.eui`` object. as with\n``macaddressfield``, the representation is the common one\n(``00:11:22:aa:bb:cc:dd:ee``).\n\n.. code-block:: python\n\n from netfields import macaddress8field, netmanager\n\n class example(models.model):\n     inet = macaddress8field()\n     # ...\n\nfor ``inetaddressfield`` and ``cidraddressfield``, ``netmanager`` is required\nfor the extra lookups to be available. lookups for ``inet`` and ``cidr``\ndatabase types will be handled differently than when running vanilla django.\nall lookups are case-insensitive and text based lookups are avoided whenever\npossible. in addition to django's default lookup types the following have been\nadded:\n\n``__net_contained``\n    is contained within the given network\n\n``__net_contained_or_equal``\n    is contained within or equal to the given network\n\n``__net_contains``\n    contains the given address\n\n``__net_contains_or_equals``\n    contains or is equal to the given address/network\n\n``__net_overlaps``\n    contains or contained by the given address\n\n``__family``\n    matches the given address family\n\n``__host``\n    matches the host part of an address regardless of prefix length\n\n``__prefixlen``\n    matches the prefix length part of an address\n\nthese correspond with the operators and functions from\nhttp://www.postgresql.org/docs/9.4/interactive/functions-net.html\n\n``cidraddressfield`` includes two extra lookups (these will be depreciated in the future by ``__prefixlen``):\n\n``__max_prefixlen``\n    maximum value (inclusive) for ``cidr`` prefix, does not distinguish between ipv4 and ipv6\n\n``__min_prefixlen``\n    minimum value (inclusive) for ``cidr`` prefix, does not distinguish between ipv4 and ipv6\n\ndatabase functions\n''''''''''''''''''\n\n`postgres network address functions <https://www.postgresql.org/docs/11/functions-net.html>`_ are exposed via the ``netfields.functions`` module.  they can be used to extract additional information from these fields or to construct complex queries.\n\n.. code-block:: python\n\n from django.db.models import f\n\n from netfields import cidraddressfield, netmanager\n from netfields.functions import family, masklen\n\n class example(models.model):\n     inet = cidraddressfield()\n     # ...\n\n ipv4_with_num_ips = (\n     example.objects.annotate(\n         family=family(f('inet')),\n         num_ips=2 ** (32 - masklen(f('inet')))  # requires django >2.0 to resolve\n     )\n     .filter(family=4)\n )\n\n**cidraddressfield and inetaddressfield functions**\n\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| postgres function              | django function  | return type          | description                                                    |\n+================================+==================+======================+================================================================+\n| abbrev(``t``)                  | abbrev           | ``textfield``        | abbreviated display format as text                             |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| broadcast(``t``)               | broadcast        | ``inetaddressfield`` | broadcast address for network                                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| family(``t``)                  | family           | ``integerfield``     | extract family of address; 4 for ipv4, 6 for ipv6              |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| host(``t``)                    | host             | ``textfield``        | extract ip address as text                                     |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| hostmask(``t``)                | hostmask         | ``inetaddressfield`` | construct host mask for network                                |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| masklen(``t``)                 | masklen          | ``integerfield``     | extract netmask length                                         |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| netmask(``t``)                 | netmask          | ``inetaddressfield`` | construct netmask for network                                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| network(``t``)                 | network          | ``cidraddressfield`` | extract network part of address                                |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| set_masklen(``t``, int)        | setmasklen       | ``t``                | set netmask length for inet value                              |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| text(``t``)                    | astext           | ``textfield``        | extract ip address and netmask length as text                  |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| inet_same_family(``t``, ``t``) | issamefamily     | ``booleanfield``     | are the addresses from the same family?                        |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| inet_merge(``t``, ``t``)       | merge            | ``cidraddressfield`` | the smallest network which includes both of the given networks |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n\n**macaddressfield functions**\n\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| postgres function              | django function  | return type          | description                                                    |\n+================================+==================+======================+================================================================+\n| trunc(``t``)                   | trunc            | ``t``                | set last 3 bytes to zero                                       |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n\n**macaddress8field functions**\n\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| postgres function              | django function  | return type          | description                                                    |\n+================================+==================+======================+================================================================+\n| trunc(``t``)                   | trunc            | ``t``                | set last 5 bytes to zero                                       |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n| macaddr8_set7bit(``t``)        | macaddr8set7bit  | ``t``                | set 7th bit to one. used to generate link-local ipv6 addresses |\n+--------------------------------+------------------+----------------------+----------------------------------------------------------------+\n\nindexes\n'''''''\n\nas of django 2.2, indexes can be created for ``inetaddressfield`` and ``cidraddressfield`` extra lookups directly on the model.\n\n.. code-block:: python\n\n from django.contrib.postgres.indexes import gistindex\n from netfields import cidraddressfield, netmanager\n\n class example(models.model):\n     inet = cidraddressfield()\n     # ...\n\n     class meta:\n         indexes = (\n             gistindex(\n                 fields=('inet',), opclasses=('inet_ops',),\n                 name='app_example_inet_idx'\n             ),\n         )\n\nfor earlier versions of django, a custom migration can be used to install an index.\n\n.. code-block:: python\n\n from django.db import migrations\n\n class migration(migrations.migration):\n     # ...\n\n     operations = [\n         # ...\n         migrations.runsql(\n             \"create index app_example_inet_idx on app_example using gist (inet inet_ops);\"\n         ),\n         # ...\n     ]\n\nrelated django bugs\n-------------------\n\n* 11442_ - postgresql backend casts inet types to text, breaks ip operations and ipv6 lookups.\n* 811_ - ipv6 address field support.\n\nhttps://docs.djangoproject.com/en/dev/releases/1.4/#extended-ipv6-support is also relevant\n\n.. _11442: http://code.djangoproject.com/ticket/11442\n.. _811: http://code.djangoproject.com/ticket/811\n\n\nsimilar projects\n----------------\n\nhttps://bitbucket.org/onelson/django-ipyfield tries to solve some of the same\nissues as this library. however, instead of supporting just postgres via the proper\nfields types the ipyfield currently uses a ``varchar(39)`` as a fake unsigned 64 bit\nnumber in its implementation.\n\nhistory\n-------\n\nmain repo was originally kept https://github.com/adamcik/django-postgresql-netfields\nlate april 2013 the project was moved to https://github.com/jimfunk/django-postgresql-netfields\nto pass the torch on to someone who actually uses this code actively :-)\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "django-netfields",
  "package_url": "https://pypi.org/project/django-netfields/",
  "project_url": "https://pypi.org/project/django-netfields/",
  "project_urls": {
    "Homepage": "https://github.com/jimfunk/django-postgresql-netfields"
  },
  "release_url": "https://pypi.org/project/django-netfields/1.3.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "django postgresql netfields implementation",
  "version": "1.3.2",
  "releases": [],
  "developers": [
    "james_oakley",
    "jfunk@funktronics.ca"
  ],
  "kwds": "ipyfield genericipaddressfield macaddress8field macaddressfield cidraddressfield",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_django_netfields",
  "homepage": "https://github.com/jimfunk/django-postgresql-netfields",
  "release_count": 30,
  "dependency_ids": []
}
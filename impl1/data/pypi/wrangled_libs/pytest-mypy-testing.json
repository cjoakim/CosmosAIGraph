{
  "classifiers": [
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "<!--\nspdx-filecopyrighttext: david fritzsche\nspdx-license-identifier: cc0-1.0\n-->\n[![pypi](https://img.shields.io/pypi/v/pytest-mypy-testing.svg)](https://pypi.python.org/pypi/pytest-mypy-testing)\n[![github action status](https://github.com/davidfritzsche/pytest-mypy-testing/workflows/python%20package/badge.svg)](https://github.com/davidfritzsche/pytest-mypy-testing/actions)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](https://opensource.org/licenses/apache-2.0)\n[![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://opensource.org/licenses/mit)\n\n\n# pytest-mypy-testing \u2014 plugin to test mypy output with pytest\n\n`pytest-mypy-testing` provides a\n[pytest](https://pytest.readthedocs.io/en/latest/) plugin to test that\n[mypy](http://mypy-lang.org/) produces a given output. as mypy can be\ntold to [display the type of an\nexpression](https://mypy.readthedocs.io/en/latest/common_issues.html#displaying-the-type-of-an-expression)\nthis allows us to check mypys type interference.\n\n\n# installation\n\n``` shell\npython -m pip install pytest-mypy-testing\n```\n\nthe python distribution package contains an [entry\npoint](https://docs.pytest.org/en/latest/writing_plugins.html#making-your-plugin-installable-by-others)\nso that the plugin is automatically discovered by pytest. to disable\nthe plugin when it is installed , you can use the pytest command line\noption `-p no:mypy-testing`.\n\n\n# writing mypy output test cases\n\na mypy test case is a top-level functions decorated with\n`@pytest.mark.mypy_testing` in a file named `*.mypy-testing` or in a\npytest test module.  `pytest-mypy-testing` follows the pytest logic in\nidentifying test modules and respects the\n[`python_files`](https://docs.pytest.org/en/latest/reference.html#confval-python_files)\nconfig value.\n\nnote that ``pytest-mypy-testing`` uses the python\n[ast](https://docs.python.org/3/library/ast.html) module to parse\ncandidate files and does not import any file, i.e., the decorator must\nbe exactly named `@pytest.mark.mypy_testing`.\n\nin a pytest test module file you may combine both regular pytest test\nfunctions and mypy test functions. a single function can be both.\n\nexample: a simple mypy test case could look like this:\n\n``` python\n@pytest.mark.mypy_testing\ndef mypy_test_invalid_assignment() -> none:\n    foo = \"abc\"\n    foo = 123  # e: incompatible types in assignment (expression has type \"int\", variable has type \"str\")\n```\n\nthe plugin runs mypy for every file containing at least one mypy test\ncase. the mypy output is then compared to special python comments in\nthe file:\n\n* `# n: <msg>` - we expect a mypy note message\n* `# w: <msg>` - we expect a mypy warning message\n* `# e: <msg>` - we expect a mypy error message\n* `# f: <msg>` - we expect a mypy fatal error message\n* `# r: <msg>` - we expect a mypy note message `revealed type is\n  '<msg>'`. this is useful to easily check `reveal_type` output:\n     ```python\n     @pytest.mark.mypy_testing\n     def mypy_use_reveal_type():\n         reveal_type(123)  # n: revealed type is 'literal[123]?'\n         reveal_type(456)  # r: literal[456]?\n     ```\n\n## mypy error code matching\n\nthe algorithm matching messages parses mypy error code both in the\noutput generated by mypy and in the python comments.\n\nif both the mypy output and the python comment contain an error code\nand a full message, then the messages and the error codes must\nmatch. the following test case expects that mypy writes out an\n``assignment`` error code and a specific error message:\n\n``` python\n@pytest.mark.mypy_testing\ndef mypy_test_invalid_assignment() -> none:\n    foo = \"abc\"\n    foo = 123  # e: incompatible types in assignment (expression has type \"int\", variable has type \"str\")  [assignment]\n```\n\nif the python comment does not contain an error code, then the error\ncode written out by mypy (if any) is ignored. the following test case\nexpects a specific error message from mypy, but ignores the error code\nproduced by mypy:\n\n``` python\n@pytest.mark.mypy_testing\ndef mypy_test_invalid_assignment() -> none:\n    foo = \"abc\"\n    foo = 123  # e: incompatible types in assignment (expression has type \"int\", variable has type \"str\")\n```\n\nif the python comment specifies only an error code, then the message\nwritten out by mypy is ignored, i.e., the following test case checks\nthat mypy reports an `assignment` error:\n\n``` python\n@pytest.mark.mypy_testing\ndef mypy_test_invalid_assignment() -> none:\n    foo = \"abc\"\n    foo = 123  # e: [assignment]\n```\n\n\n## skipping and expected failures\n\nmypy test case functions can be decorated with `@pytest.mark.skip` and\n`@pytest.mark.xfail` to mark them as to-be-skipped and as\nexpected-to-fail, respectively. as with the\n`@pytest.mark.mypy_testing` mark, the names must match exactly as the\ndecorators are extracted from the ast.\n\n\n# development\n\n* create and activate a python virtual environment.\n* install development dependencies by calling `python -m pip install\n  -u -r requirements.txt`.\n* start developing.\n* to run all tests with [tox](https://tox.readthedocs.io/en/latest/),\n  python 3.7, 3.8, 3.9, 3.10 and 3.11 must be available. you might want to look\n  into using [pyenv](https://github.com/pyenv/pyenv).\n\n\n# changelog\n\n## v0.1.1\n\n* compare just mypy error codes if given and no error message is given\n  in the test case python comment ([#36][i36], [#43][p43])\n\n## v0.1.0\n\n* implement support for flexible matching of mypy error codes (towards\n  [#36][i36], [#41][p41])\n* add support for pytest 7.2.x ([#42][p42])\n* add support for mypy 1.0.x ([#42][p42])\n* add support for python 3.11 ([#42][p42])\n* drop support for pytest 6.x ([#42][p42])\n* drop support for mypy versions less than 0.931 ([#42][p42])\n\n## v0.0.12\n\n* allow windows drives in filename ([#17][i17], [#34][p34])\n* support async def tests ([#30][i30], [#31][p31])\n* add support for mypy 0.971 ([#35][i35], [#27][i27])\n* remove support for python 3.6 ([#32][p32])\n* bump development dependencies ([#40][p40])\n\n## v0.0.11\n\n* add support for mypy 0.960 ([#25][p25])\n\n## v0.0.10\n\n* add support for pytest 7.0.x and require python >= 3.7 ([#23][p23])\n* bump dependencies ([#24][p24])\n\n## v0.0.9\n\n* disable soft error limit ([#21][p21])\n\n## v0.0.8\n\n* normalize messages to enable support for mypy 0.902 and pytest 6.2.4 ([#20][p20])\n\n## v0.0.7\n\n* fix `pytest_version_info` - by [@blueyed](https://github.com/blueyed) ([#8][p8])\n* always pass `--check-untyped-defs` to mypy ([#11][p11])\n* respect pytest config `python_files` when identifying pytest test modules ([#12][p12])\n\n## v0.0.6 - add pytest 5.4 support\n\n* update the plugin to work with pytest 5.4 ([#7][p7])\n\n## v0.0.5 - ci improvements\n\n* make invoke tasks work (partially) on windows ([#6][p6])\n* add an invoke task to run tox environments by selecting globs (e.g.,\n  `inv tox -e py-*`) ([#6][p6])\n* use coverage directly for code coverage to get more consistent\n  parallel run results ([#6][p6])\n* use flit fork dflit to make packaging work with `licenses` directory\n  ([#6][p6])\n* bump dependencies ([#6][p6])\n\n\n[i17]: https://github.com/davidfritzsche/pytest-mypy-testing/issues/17\n[i27]: https://github.com/davidfritzsche/pytest-mypy-testing/issues/27\n[i30]: https://github.com/davidfritzsche/pytest-mypy-testing/issues/30\n[i35]: https://github.com/davidfritzsche/pytest-mypy-testing/issues/35\n[i36]: https://github.com/davidfritzsche/pytest-mypy-testing/issues/36\n\n[p6]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/6\n[p7]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/7\n[p8]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/8\n[p11]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/11\n[p12]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/12\n[p20]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/20\n[p21]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/21\n[p23]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/23\n[p24]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/24\n[p25]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/25\n[p31]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/31\n[p32]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/32\n[p34]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/34\n[p40]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/40\n[p41]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/41\n[p42]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/42\n[p43]: https://github.com/davidfritzsche/pytest-mypy-testing/pull/43\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0 or mit",
  "name": "pytest-mypy-testing",
  "package_url": "https://pypi.org/project/pytest-mypy-testing/",
  "project_url": "https://pypi.org/project/pytest-mypy-testing/",
  "project_urls": {
    "Homepage": "https://github.com/davidfritzsche/pytest-mypy-testing"
  },
  "release_url": "https://pypi.org/project/pytest-mypy-testing/0.1.1/",
  "requires_dist": [
    "pytest>=7,<8",
    "mypy>=0.931"
  ],
  "requires_python": ">=3.7",
  "summary": "pytest plugin to check mypy output.",
  "version": "0.1.1",
  "releases": [],
  "developers": [
    "david.fritzsche@mvua.de",
    "david_fritzsche"
  ],
  "kwds": "pytest pytest_version_info mypy_testing python_files py",
  "license_kwds": "apache-2.0 or mit",
  "libtype": "pypi",
  "id": "pypi_pytest_mypy_testing",
  "homepage": "https://github.com/davidfritzsche/pytest-mypy-testing",
  "release_count": 12,
  "dependency_ids": [
    "pypi_mypy",
    "pypi_pytest"
  ]
}
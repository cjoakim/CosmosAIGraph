{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: bio-informatics",
    "topic :: scientific/engineering :: chemistry"
  ],
  "description": "pyobo\n=====\n|build| |pypi_version| |python_versions| |pypi_license| |zenodo| |black| |bioregistry|\n\ntools for biological identifiers, names, synonyms, xrefs, hierarchies, relations, and properties through the\nperspective of obo.\n\nexample usage\n-------------\nnote! pyobo is no-nonsense. this means that there's no repetitive\nprefixes in identifiers. it also means all identifiers are strings,\nno exceptions.\n\nnote! the first time you run these, they have to download and cache\nall resources. we're not in the business of redistributing data,\nso all scripts should be completely reproducible. there's some\naws tools for hosting/downloading pre-compiled versions in\n``pyobo.aws`` if you don't have time for that.\n\nnote! pyobo can perform grounding in a limited number of cases, but\nit is *not* a general solution for named entity recognition (ner) or grounding.\nit's suggested to check `gilda <https://github.com/indralab/gilda>`_\nfor a no-nonsense solution.\n\nmapping identifiers and curies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nget mapping of chebi identifiers to names:\n\n.. code-block:: python\n\n   import pyobo\n\n   chebi_id_to_name = pyobo.get_id_name_mapping('chebi')\n\n   name = chebi_id_to_name['132964']\n   assert name == 'fluazifop-p-butyl'\n\nor, you don't have time for two lines:\n\n.. code-block:: python\n\n    import pyobo\n\n    name = pyobo.get_name('chebi', '132964')\n    assert name == 'fluazifop-p-butyl'\n\nget reverse mapping of chebi names to identifiers:\n\n.. code-block:: python\n\n    import pyobo\n\n    chebi_name_to_id = pyobo.get_name_id_mapping('chebi')\n\n    identifier = chebi_name_to_id['fluazifop-p-butyl']\n    assert identifier == '132964'\n\nmaybe you live in curie world and just want to normalize something like\n`chebi:132964`:\n\n.. code-block:: python\n\n    import pyobo\n\n    name = pyobo.get_name_by_curie('chebi:132964')\n    assert name == 'fluazifop-p-butyl'\n\nsometimes you accidentally got an old curie. it can be mapped to the more recent\none using alternative identifiers listed in the underlying obo with:\n\n.. code-block:: python\n\n    import pyobo\n\n    # look up dna-binding transcription factor activity (go:0003700)\n    # based on an old id\n    primary_curie = pyobo.get_primary_curie('go:0001071')\n    assert primary_curie == 'go:0003700'\n\n    # if it's already the primary, it just gets returned\n    assert 'go:0003700' == pyobo.get_priority_curie('go:0003700')\n\nmapping species\n~~~~~~~~~~~~~~~\nsome resources have species information for their term. get a mapping of wikipathway identifiers\nto species (as ncbi taxonomy identifiers):\n\n.. code-block:: python\n\n    import pyobo\n\n    wikipathways_id_to_species = pyobo.get_id_species_mapping('wikipathways')\n\n    # apoptosis (homo sapiens)\n    taxonomy_id = wikipathways_id_to_species['wp254']\n    assert taxonomy_id == '9606'\n\nor, you don't have time for two lines:\n\n.. code-block:: python\n\n    import pyobo\n\n    # apoptosis (homo sapiens)\n    taxonomy_id = pyobo.get_species('wikipathways', 'wp254')\n    assert taxonomy_id == '9606'\n\ngrounding\n~~~~~~~~~\nmaybe you've got names/synonyms you want to try and map back to chebi synonyms.\ngiven the brand name `fusilade ii` of `chebi:132964`, it should be able to look\nit up and its preferred label.\n\n.. code-block:: python\n\n    import pyobo\n\n    prefix, identifier, name = pyobo.ground('chebi', 'fusilade ii')\n    assert prefix == 'chebi'\n    assert identifier == '132964'\n    assert name == 'fluazifop-p-butyl'\n\n    # when failure happens...\n    prefix, identifier, name = pyobo.ground('chebi', 'definitely not a real name')\n    assert prefix is none\n    assert identifier is none\n    assert name is none\n\nif you're not really sure which namespace a name might belong to, you\ncan try a few in a row (prioritize by ones that cover the appropriate\nentity type to avoid false positives in case of conflicts):\n\n.. code-block:: python\n\n    import pyobo\n\n    # looking for phenotypes/pathways\n    prefix, identifier, name = pyobo.ground(['efo', 'go'], 'erad')\n    assert prefix == 'go'\n    assert identifier == '0030433'\n    assert name == 'ubiquitin-dependent erad pathway'\n\ncross-referencing\n~~~~~~~~~~~~~~~~~\nget xrefs from chebi to pubchem:\n\n.. code-block:: python\n\n    import pyobo\n\n    chebi_id_to_pubchem_compound_id = pyobo.get_filtered_xrefs('chebi', 'pubchem.compound')\n\n    pubchem_compound_id = chebi_id_to_pubchem_compound_id['132964']\n    assert pubchem_compound_id == '3033674'\n\nif you don't have time for two lines:\n\n.. code-block:: python\n\n    import pyobo\n\n    pubchem_compound_id = pyobo.get_xref('chebi', '132964', 'pubchem.compound')\n    assert pubchem_compound_id == '3033674'\n\nget xrefs from entrez to hgnc, but they're only available through hgnc\nso you need to flip them:\n\n.. code-block:: python\n\n    import pyobo\n\n    hgnc_id_to_ncbigene_id = pyobo.get_filtered_xrefs('hgnc', 'ncbigene')\n    ncbigene_id_to_hgnc_id = {\n        ncbigene_id: hgnc_id\n        for hgnc_id, ncbigene_id in hgnc_id_to_ncbigene_id.items()\n    }\n    mapt_hgnc = ncbigene_id_to_hgnc_id['4137']\n    assert mapt_hgnc == '6893'\n\nsince this is a common pattern, there's a keyword argument `flip`\nthat does this for you:\n\n.. code-block:: python\n\n    import pyobo\n\n    ncbigene_id_to_hgnc_id = pyobo.get_filtered_xrefs('hgnc', 'ncbigene', flip=true)\n    mapt_hgnc_id = ncbigene_id_to_hgnc_id['4137']\n    assert mapt_hgnc_id == '6893'\n\nif you don't have time for two lines (i admit this one is a bit confusing) and\nneed to flip it:\n\n.. code-block:: python\n\n    import pyobo\n\n    hgnc_id = pyobo.get_xref('hgnc', '4137', 'ncbigene', flip=true)\n    assert hgnc_id == '6893'\n\nremap a curie based on pre-defined priority list and `inspector javert's xref\ndatabase <https://cthoyt.com/2020/04/19/inspector-javerts-xref-database.html>`_:\n\n.. code-block:: python\n\n    import pyobo\n\n    # map to the best source possible\n    mapt_ncbigene = pyobo.get_priority_curie('hgnc:6893')\n    assert mapt_ncbigene == 'ncbigene:4137'\n\n    # sometimes you know you're the best. own it.\n    assert 'ncbigene:4137' == pyobo.get_priority_curie('ncbigene:4137')\n\nfind all curies mapped to a given one using inspector javert's xref database:\n\n.. code-block:: python\n\n    import pyobo\n\n    # get a set of all curies mapped to mapt\n    mapt_curies = pyobo.get_equivalent('hgnc:6893')\n    assert 'ncbigene:4137' in mapt_curies\n    assert 'ensembl:ensg00000186868' in mapt_curies\n\nif you don't want to wait to build the database locally for the ``pyobo.get_priority_curie`` and\n``pyobo.get_equivalent``, you can use the following code to download a release from\n`zenodo <https://zenodo.org/record/3757266>`_:\n\n.. code-block:: python\n\n    import pyobo.resource_utils\n\n    pyobo.resource_utils.ensure_inspector_javert()\n\nproperties\n~~~~~~~~~~\nget properties, like smiles. the semantics of these are defined on an obo-obo basis.\n\n.. code-block:: python\n\n    import pyobo\n\n    # i don't make the rules. i wouldn't have chosen this as the key for this property. it could be any string\n    chebi_smiles_property = 'http://purl.obolibrary.org/obo/chebi/smiles'\n    chebi_id_to_smiles = pyobo.get_filtered_properties_mapping('chebi', chebi_smiles_property)\n\n    smiles = chebi_id_to_smiles['132964']\n    assert smiles == 'c1(=cc=c(n=c1)oc2=cc=c(c=c2)o[c@@h](c(occcc)=o)c)c(f)(f)f'\n\nif you don't have time for two lines:\n\n.. code-block:: python\n\n    import pyobo\n\n    smiles = pyobo.get_property('chebi', '132964', 'http://purl.obolibrary.org/obo/chebi/smiles')\n    assert smiles == 'c1(=cc=c(n=c1)oc2=cc=c(c=c2)o[c@@h](c(occcc)=o)c)c(f)(f)f'\n\nhierarchy\n~~~~~~~~~\ncheck if an entity is in the hierarchy:\n\n.. code-block:: python\n\n    import networkx as nx\n    import pyobo\n\n    # check that go:0008219 ! cell death is an ancestor of go:0006915 ! apoptotic process\n    assert 'go:0008219' in pyobo.get_ancestors('go', '0006915')\n\n    # check that go:0070246 ! natural killer cell apoptotic process is a\n    # descendant of go:0006915 ! apoptotic process\n    apopototic_process_descendants = pyobo.get_descendants('go', '0006915')\n    assert 'go:0070246' in apopototic_process_descendants\n\nget the subhierarchy below a given node:\n\n.. code-block:: python\n\n    # get the descendant graph of go:0006915 ! apoptotic process\n    apopototic_process_subhierarchy = pyobo.get_subhierarchy('go', '0006915')\n\n    # check that go:0070246 ! natural killer cell apoptotic process is a\n    # descendant of go:0006915 ! apoptotic process through the subhierarchy\n    assert 'go:0070246' in apopototic_process_subhierarchy\n\nget a hierarchy with properties pre-loaded in the node data dictionaries:\n\n.. code-block:: python\n\n    import pyobo\n\n    prop = 'http://purl.obolibrary.org/obo/chebi/smiles'\n    chebi_hierarchy = pyobo.get_hierarchy('chebi', properties=[prop])\n\n    assert 'chebi:132964' in chebi_hierarchy\n    assert prop in chebi_hierarchy.nodes['chebi:132964']\n    assert chebi_hierarchy.nodes['chebi:132964'][prop] == 'c1(=cc=c(n=c1)oc2=cc=c(c=c2)o[c@@h](c(occcc)=o)c)c(f)(f)f'\n\nrelations\n~~~~~~~~~\nget all orthologies (``ro:hom0000017``) between hgnc and mgi (note: this is one way)\n\n.. code-block:: python\n\n    >>> import pyobo\n    >>> human_mapt_hgnc_id = '6893'\n    >>> mouse_mapt_mgi_id = '97180'\n    >>> hgnc_mgi_orthology_mapping = pyobo.get_relation_mapping('hgnc', 'ro:hom0000017', 'mgi')\n    >>> assert mouse_mapt_mgi_id == hgnc_mgi_orthology_mapping[human_mapt_hgnc_id]\n\nif you want to do it in one line, use:\n\n.. code-block:: python\n\n    >>> import pyobo\n    >>> human_mapt_hgnc_id = '6893'\n    >>> mouse_mapt_mgi_id = '97180'\n    >>> assert mouse_mapt_mgi_id == pyobo.get_relation('hgnc', 'ro:hom0000017', 'mgi', human_mapt_hgnc_id)\n\nwritings tests that use pyobo\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nif you're writing your own code that relies on pyobo, and unit\ntesting it (as you should) in a continuous integration setting,\nyou've probably realized that loading all of the resources on each\nbuild is not so fast. in those scenarios, you can use some of the\npre-build patches like in the following:\n\n.. code-block:: python\n\n    import unittest\n    import pyobo\n    from pyobo.mocks import get_mock_id_name_mapping\n\n    mock_id_name_mapping = get_mock_id_name_mapping({\n        'chebi': {\n            '132964': 'fluazifop-p-butyl',\n        },\n    })\n\n    class mytestcase(unittest.testcase):\n        def my_test(self):\n            with mock_id_name_mapping:\n                # use functions directly, or use your functions that wrap them\n                pyobo.get_name('chebi', '1234')\n\n\ninstallation\n------------\npyobo can be installed from `pypi <https://pypi.org/project/pyobo/>`_ with:\n\n.. code-block:: sh\n\n    $ pip install pyobo\n\nit can be installed in development mode from `github <https://github.com/pyobo/pyobo>`_\nwith:\n\n.. code-block:: sh\n\n    $ git clone https://github.com/pyobo/pyobo.git\n    $ cd pyobo\n    $ pip install -e .\n\ncuration of the bioregistry\n---------------------------\nin order to normalize references and identify resources, pyobo uses the\n`bioregistry <https://github.com/bioregistry/bioregistry>`_. it used to be a part of pyobo, but has since\nbeen externalized for more general reuse.\n\nat `src/pyobo/registries/metaregistry.json <https://github.com/pyobo/pyobo/blob/master/src/pyobo/registries/metaregistry.json>`_\nis the curated \"metaregistry\". this is a source of information that contains\nall sorts of fixes for missing/wrong information in miriam, ols, and obo foundry; entries that don't appear in\nany of them; additional synonym information for each namespace/prefix; rules for normalizing xrefs and curies, etc.\n\nother entries in the metaregistry:\n\n- the ``\"remappings\"->\"full\"`` entry is a dictionary from strings that might follow ``xref:``\n  in a given obo file that need to be completely replaced, due to incorrect formatting\n- the ``\"remappings\"->\"prefix\"`` entry contains a dictionary of prefixes for xrefs that need\n  to be remapped. several rules, for example, remove superfluous spaces that occur inside\n  curies or and others address instances of the gogo issue.\n- the ``\"blacklists\"`` entry contains rules for throwing out malformed xrefs based on\n  full string, just prefix, or just suffix.\n\ntroubleshooting\n---------------\nthe obo foundry seems to be pretty unstable with respect to the urls to obo resources. if you get an error like:\n\n.. code-block::\n\n   pyobo.getters.missingobobuild: obo foundry is missing a build for: mondo\n\nthen you should check the corresponding page on the obo foundry (in this case, http://www.obofoundry.org/ontology/mondo.html)\nand make update to the ``url`` entry for that namespace in the bioregistry.\n\n.. |build| image:: https://github.com/pyobo/pyobo/workflows/tests/badge.svg\n    :target: https://github.com/pyobo/pyobo/actions?query=workflow%3atests\n    :alt: build status\n\n.. |coverage| image:: https://codecov.io/gh/pyobo/pyobo/coverage.svg?branch=master\n    :target: https://codecov.io/gh/pyobo/pyobo?branch=master\n    :alt: coverage status\n\n.. |docs| image:: http://readthedocs.org/projects/pyobo/badge/?version=latest\n    :target: http://pyobo.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n.. |python_versions| image:: https://img.shields.io/pypi/pyversions/pyobo.svg\n    :alt: stable supported python versions\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/pyobo.svg\n    :alt: current version on pypi\n\n.. |pypi_license| image:: https://img.shields.io/pypi/l/pyobo.svg\n    :alt: mit license\n\n.. |zenodo| image:: https://zenodo.org/badge/203449095.svg\n    :target: https://zenodo.org/badge/latestdoi/203449095\n    :alt: zenodo\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: black code style\n\n.. |bioregistry| image:: https://img.shields.io/static/v1?label=powered%20by&message=bioregistry&color=ba274a&style=flat&logo=image/png;base64,ivborw0kggoaaaansuheugaaacgaaaaocayaaacm/rhtaaaacxbiwxmaaaenaaabjwgnvpdmaaaagxrfwhrtb2z0d2fyzqb3d3cuaw5rc2nhcguub3jnm+48ggaaci9jrefuwiwtmxl41muzxz/z291sstmqo9mqg0iswhbtooswgpuqhapwgufeowkigki81actypaqfbwpvkgffku0vgs+ygvheaoqeuesrndleehcbklyjtlkk9399y/n/rkbzqxt96+zed+z9/t7z+adeecnua1s5yfvsgrloaf2qtieeyluzkiafydke7koblkqsc4xgkpfxxz/owmt41ztivtr3j94eqxqq5adeasivkvb12rbtt0mb5xzsvfa/5xgnqtmci3eq7iqjwm+7jjjo8yvnhk/qdbuol8a7jzwwqqu01jeg6pd1nw4nubjjax6ewrrruv/m8edqtmflmxeb0jcbb6rirhmtcj0ymgc0wyjadtd9nw0twmu+in63nnu7c3fwtvgjpxrzvlakvgu8/ltecwzgju3mii/aba72vwtb5k45aei7x2puel9fzshzludmgphuljpj82lle6itsh6mpxp+fnt/sa4yzhbp22yfwfkgnmaby17kphfmqh1997qlxztnkq35xb505fintf0iz1wvftq7pxdlj4jdnjuny5yvpehjhh7fqogd/yyzi4ows86hj+qqmdpjabf3juxlhd21+8q0y4ldppv/vfno7+jzv3pa6soac0e8i8fsponpm7javr+erhzwu/ofj+e49tpt/hdtgxcylvqj8hatctgfmjcf2dwfptmz4nszx/uqqdyr+xpyvwoek+c03pgrdx4gkj7nbj+txh/hcgait7crlnxoy62dmzmzgwzjvzjuh2gi/xnrmoohsfe3aqq/kho0qxs+plzlh3fgwdt54ykxlsaqq0mbf1zhutsltzejemhjsrlgggdpgtxc09zdm5qti59jzbkog+zb1qyi95+xokeqogpdifpdnpjfq8uckl8fygmacqtn4dhxp3kinx7jnhi0zejnt8dla8plbu+48zzfyj08kh8ggiacb4zliahsurm3enml6eb6fzep1a+sut5ds2vddts+4gqccprhgv1kowiqrachhmxapxkiev/vl+8r/hgnqtmmi4gjh/iqoixzsqdzqulxdb9rpyi+1drdvx67wmursvckderxyxb0rosiokecurmg+tbzkxahbybzk6tenplkwmpzuix71wumiw+mhx2nejqrwifhsde4pihlfdislzxye1hhiwfttlk+rsu30rvnlxgvroapocw9dsw3vh6cgks4zxixlz3fw8dsammcfecv9xhybc/dsczmekgfojzy0teo17pvl7janbaboauwujlti4vow+t9sazbkyl0zb/qv/kalthqri3vojb0lpzw0vpmonotohoqrcyi7bzkeqanjo3hogbmgrourziagundgsosqsyupn6upx2nvelzxiybhinn3ulyx9uvwaw7xbqjxdqmr2x0uy93dh+dtlu9zcu9vdj1psvewwcii7owjaxfnorfcovhoxjrmr0goqwo9qbfaorxodohq0o1x8ron3csmyc6zt942uqbill53jl804sv6oy9/fxagg4wcjfdzuxlfv7gnpfrzfs7vkcriv7ejjrta/edr1rfkxzoqcoceytghqayudd4b2d4cf8pohg4zc0yufu7z5c9jy7svvbkptsh6gt0tcgbtfwspbtz/zrixyapbskk8te5+az4l4jduvqwpiscmqhjgocujjcrhctiesjurqtf89ftttpuvalpaya8knp1b3oq5zlag/nu//9cmscs6enonrauwjaziqv3kcovd3quups+uaxhu7z1spatpeqchsa78awd0wvnxa1xkdjurlcjrgqhmfn/euejk9jyr4nrn47hltjc58gm0sratjz/w3l5blukkzjdfzt1f5+3sq3nzjrdnajax1orb2bx2wemka9fvggbvw7q+oluu+2wliqdx+h3dzkjvprda5iqj93p+drqcq/phsaw8xj6afhdkhuivvoeribll/jxkov4gi34t8omgnb1yok7sdta01aik3j6yoggp+gapwhodop6lltlxb3mnyxali8da9/e0pjbzovv2brakyzqk/i3bg0ssiicqclqs/0wapb6uovo6k3+cdeetwm1aptp+dllljpskahoydwcovllytkkakccu4vo7irherfslvlpxz+v0hadcn+v8xjb9strdqfpavua0ckefrxwnuwvns6rbrkqb44r+lmc5f7tragafqyyzb9dv/4gd18asq8/gsc0zwjnjvcw97aewmocdtaaw6elxzlbchtc8ehwxbw6o+cinhmipetuu9ouvtwnnwnodzx+krlvaqigjmecv+spyh/ak3f5qdok+oopxicip2hijiwtuh6rqx6eh7bxlt0sth4xubsul6df/xaiqao9bbvn3takuuy/zawyzimpvx4fyjvrgqzoec9r1vk0tmrldmiidko45zxegxllrrw13p0/heqhq4cuhiyvfelnihotwaztnj4qzqbqffklg3omz135rny624clb0thjcomta5zmgnanbabmoohpmy5hvzebnulcoj71frxin0i9pdjzj24isilutco7ni3/kyqg5arfmleeykbzma6r1ho8ev+dseyseb2g3yrpwzp1c2f+n1gjb07rilcwnoki7j3g839ehqf2cg6fmhmbznprkevj/goriedv1wtlvzjesrv9wqqtoihrfwjresjwgar1zrui3ho7pfwhbgb3jrg6s1rogeoiunjgbipkv/zsf31irorn4hxau9b1zduhtlecelqxzz9xttrgc342df8iwqyayqbmkewo0xaw1bi4d4dnjswcff32frwnud5nwpedz5lie8nduhq1v+ha2xgdkho4szyjg1hbj501eh6ogj5ois8hf/owpm5hqnre51vdt4nc/7k+9biit8gya2ipixn5jwjqrrzsju0xt5gubtrfiebqfpisuvorzppi0vdeq9ycj63bwmxbzphtk7xhkva/drljkfau+bcy2n+fa3vzk0wvoxny4idokifn+io7ltz7zrobwcjdmv7vnhruov9dws9f8u4csas1k1j54wys4o6arwaas8hvlp998yuztnisl7wurolkdjskzqqtfl45fjb8gzwznijy6ds8jjs3p8ausvhg3txn26mytzo5w8rcjsbg1qze/x45elhy9i7whlxg26+cgsl8zfkdgh3zdkf2s7nep9pzhzmnk3fegwuwowrjr6ztdel529enrhf3lmfchebkbzinrwiawzkwi9a5qzh9d6dnvxyw3jzkej9udooypwdy/gxgdiufuguc2c4hy3kwxrohmeblqea6jv6glc8y0kr613hn+2phzak69jqah1p/hdsckllifgtnbg+f3eyfhtehth38mzom2sy4wqwqje9tnbe+xizkuqnrqcch9wswrdmggsjitnpatwtjofmikcgvpvx/knicm1gsgc8itzfii3ael+7fyg+c+6o8izl1ge5gaaaabjru5erkjggg==\n    :target: https://github.com/biopragmatics/bioregistry\n    :alt: powered by the bioregistry\n",
  "docs_url": null,
  "keywords": "open biomedical ontologies,obo",
  "license": "mit",
  "name": "pyobo",
  "package_url": "https://pypi.org/project/pyobo/",
  "project_url": "https://pypi.org/project/pyobo/",
  "project_urls": {
    "Bug Tracker": "https://github.com/pyobo/pyobo/issues",
    "Download": "https://github.com/pyobo/pyobo/releases",
    "Homepage": "https://github.com/pyobo/pyobo",
    "Source Code": "https://github.com/pyobo/pyobo"
  },
  "release_url": "https://pypi.org/project/pyobo/0.10.6/",
  "requires_dist": [
    "obonet >=0.3.0",
    "click",
    "tqdm",
    "pyyaml",
    "pandas",
    "requests",
    "protmapper",
    "more-itertools",
    "more-click >=0.0.2",
    "humanize",
    "tabulate",
    "cachier",
    "pystow >=0.2.7",
    "bioversions >=0.5.202",
    "bioregistry >=0.10.20",
    "bioontologies >=0.4.0",
    "zenodo-client >=0.0.5",
    "class-resolver",
    "psycopg2-binary",
    "drugbank-downloader",
    "chembl-downloader",
    "umls-downloader >=0.1.2",
    "typing-extensions",
    "rdflib ; extra == 'agrovoc'",
    "sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinx-click ; extra == 'docs'",
    "sphinx-automodapi ; extra == 'docs'",
    "coverage ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "flask ; extra == 'web'",
    "bootstrap-flask ; extra == 'web'",
    "flask-admin ; extra == 'web'",
    "flasgger ; extra == 'web'",
    "psutil ; extra == 'web'"
  ],
  "requires_python": ">=3.8",
  "summary": "handling and writing obo",
  "version": "0.10.6",
  "releases": [],
  "developers": [
    "charles_tapley_hoyt",
    "cthoyt@gmail.com"
  ],
  "kwds": "ontologies bioregistry identifiers biopragmatics pyobo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyobo",
  "homepage": "https://github.com/pyobo/pyobo",
  "release_count": 65,
  "dependency_ids": [
    "pypi_bioontologies",
    "pypi_bioregistry",
    "pypi_bioversions",
    "pypi_bootstrap_flask",
    "pypi_cachier",
    "pypi_chembl_downloader",
    "pypi_class_resolver",
    "pypi_click",
    "pypi_coverage",
    "pypi_drugbank_downloader",
    "pypi_flasgger",
    "pypi_flask",
    "pypi_flask_admin",
    "pypi_humanize",
    "pypi_more_click",
    "pypi_more_itertools",
    "pypi_obonet",
    "pypi_pandas",
    "pypi_protmapper",
    "pypi_psutil",
    "pypi_psycopg2_binary",
    "pypi_pystow",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_rdflib",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_automodapi",
    "pypi_sphinx_click",
    "pypi_sphinx_rtd_theme",
    "pypi_tabulate",
    "pypi_tqdm",
    "pypi_typing_extensions",
    "pypi_umls_downloader",
    "pypi_zenodo_client"
  ]
}
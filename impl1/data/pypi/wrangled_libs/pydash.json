{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "pydash\n******\n\n|version| |build| |coveralls| |license|\n\nthe kitchen sink of python utility libraries for doing \"stuff\" in a functional way. based on the `lo-dash <http://lodash.com/>`_  javascript library.\n\nnote\n====\n\nlooking for a library that is more memory efficient and better suited for large datasets? check out `fnc <https://github.com/dgilland/fnc>`_! it's built around generators and iteration and has iteratee-first function signatures.\n\n\nlinks\n=====\n\n- project: https://github.com/dgilland/pydash\n- documentation: http://pydash.readthedocs.org\n- pypi: https://pypi.python.org/pypi/pydash/\n- github actions: https://github.com/dgilland/pydash/actions\n\n\n.. |version| image:: http://img.shields.io/pypi/v/pydash.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/pydash/\n\n.. |build| image:: https://img.shields.io/github/workflow/status/dgilland/pydash/main/master?style=flat-square\n    :target: https://github.com/dgilland/pydash/actions\n\n.. |coveralls| image:: http://img.shields.io/coveralls/dgilland/pydash/master.svg?style=flat-square\n    :target: https://coveralls.io/r/dgilland/pydash\n\n.. |license| image:: http://img.shields.io/pypi/l/pydash.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/pydash/\n\n.. _changelog:\n\nchangelog\n=========\n\nv7.0.6 (2023-07-29)\n-------------------\n\n- fix typing for chaining interface for methods that use varargs. thanks deviousstoat_!\n\n\nv7.0.5 (2023-07-06)\n-------------------\n\n- fix typing for ``find_index`` and ``find_last_index`` by allowing ``predicate`` argument to be callback shorthand values. thanks deviousstoat_!\n\n\nv7.0.4 (2023-06-02)\n-------------------\n\n- exclude incompatible ``typing-extensions`` version ``4.6.0`` from install requirements. incompatibility was fixed in ``4.6.1``.\n\n\nv7.0.3 (2023-05-04)\n-------------------\n\n- fix typing for ``difference_by``, ``intersection_by``, ``union_by``, ``uniq_by``, and ``xor_by`` by allowing ``iteratee`` argument to be `any`.  thanks deviousstoat_!\n\n\nv7.0.2 (2023-04-27)\n-------------------\n\n- fix issue where using ``pyright`` as a type checker with ``reportprivateusage=true`` would report errors that objects are not exported from ``pydash``. thanks deviousstoat_!\n\n\nv7.0.1 (2023-04-13)\n-------------------\n\n- fix missing install dependency, ``typing-extensions``, for package.\n\n\nv7.0.0 (2023-04-11)\n-------------------\n\n- add type annotations to package. raise an issue for any typing issues at https://github.com/dgilland/pydash/issues. thanks deviousstoat_! (**breaking change**)\n- change behavior of ``to_dict`` to not using ``dict()`` internally. previous behavior would be for something like ``to_dict([[\"k\", \"v\"], [\"x\", \"y\"]])`` to return ``{\"k\": \"v\", \"x\": \"y\"}`` (equivalent to calling ``dict(...)``) but ``to_dict([[\"k\"], [\"v\"], [\"x\"], [\"y\"]])`` would return ``{0: [\"x\"], 1: [\"v\"], 2: [\"x\"], 3: [\"y\"]}``. the new behavior is to always return iterables as dictionaries with their indexes as keys like ``{0: [\"k\", \"v\"], 1: [\"x\", \"y\"]}``. this is consistent with how iterable objects are iterated over and means that ``to_dict`` will have more reliable output. (**breaking change**)\n- change behavior of ``slugify`` to remove single-quotes from output. instead of ``slugify(\"the cat's meow\") == \"the-cat's-meow\"``, the new behavior is to return ``\"the-cats-meow\"``. (**breaking change**)\n- add support for negative indexes in ``get`` path keys. thanks bl4ckst0ne_!\n\n\nv6.0.2 (2023-02-23)\n-------------------\n\n- only prevent access to object paths containing ``__globals__`` or ``__builtins__`` instead of all dunder-methods for non-dict/list objects.\n\n\nv6.0.1 (2023-02-20)\n-------------------\n\n- fix exception raised due to mishandling of non-string keys in functions like ``get()`` for non-dict/list objects that used integer index references like ``\"[0]\"``.\n\n\nv6.0.0 (2023-01-28)\n-------------------\n\n- prevent access to object paths containing dunder-methods in functions like ``get()`` for non-dict/list objects. attempting to access dunder-methods using get-path keys will raise a ``keyerror`` (e.g. ``get(someclass(), '__init__'`` will raise). access to dict keys are unaffected (e.g. ``get({\"__init__\": true}, \"__init__\")`` will return ``true``). (**breaking change**)\n- add support for python 3.11.\n- drop support for python 3.6 (**breaking change**)\n\n\nv5.1.2 (2022-11-30)\n-------------------\n\n- remove unnecessary type check and conversion for ``exceptions`` argument in ``pydash.retry``.\n\n\nv5.1.1 (2022-09-23)\n-------------------\n\n- add support for python 3.10.\n- fix timing assertion issue in test for ``pydash.delay`` where it could fail on certain environments.\n\n\nv5.1.0 (2021-10-02)\n-------------------\n\n- support matches-style callbacks on non-dictionary objects that are compatible with ``pydash.get`` in functions like ``pydash.find``.\n\n\nv5.0.2 (2021-07-15)\n-------------------\n\n- fix compatibility issue between ``pydash.py_`` / ``pydash._`` and ``typing.protocol`` + ``typing.runtime_checkable`` that caused an exception to be raised for ``isinstance(py_, someruntimecheckableprotocol)``.\n\n\nv5.0.1 (2021-06-27)\n-------------------\n\n- fix bug in ``merge_with`` that prevented custom iteratee from being used when recursively merging. thanks weineel_!\n\n\nv5.0.0 (2021-03-29)\n-------------------\n\n- drop support for python 2.7. (**breaking change**)\n- improve unicode word splitting in string functions to be inline with lodash. thanks mervynlee94_! (**breaking change**)\n\n  - ``camel_case``\n  - ``human_case``\n  - ``kebab_case``\n  - ``lower_case``\n  - ``pascal_case``\n  - ``separator_case``\n  - ``slugify``\n  - ``snake_case``\n  - ``start_case``\n  - ``upper_case``\n\n- optimize regular expression constants used in ``pydash.strings`` by pre-compiling them to regular expression pattern objects.\n\n\nv4.9.3 (2021-03-03)\n-------------------\n\n- fix regression introduced in ``v4.8.0`` that caused ``merge`` and ``merge_with`` to raise an exception when passing ``none`` as the first argument.\n\n\nv4.9.2 (2020-12-24)\n-------------------\n\n- fix regression introduced in ``v4.9.1`` that broke ``pydash.get`` for dictionaries and dot-delimited keys that reference integer dict-keys.\n\n\nv4.9.1 (2020-12-14)\n-------------------\n\n- fix bug in ``get/has`` that caused ``defaultdict`` objects to get populated on key access.\n\n\nv4.9.0 (2020-10-27)\n-------------------\n\n- add ``default_to_any``. thanks gonzalonaveira_!\n- fix mishandling of key names containing ``\\.`` in ``set_``, ``set_with``, and ``update_with`` where the ``.`` was not treated as a literal value within the key name. thanks zhaowb_!\n\n\nv4.8.0 (2020-06-13)\n-------------------\n\n- support attribute based setters like ``argparse.namespace`` in ``set_``, ``set_with``, ``update``, and ``update_with``.\n- fix exception in ``order_by`` when ``none`` used as a sort key. thanks elijose55_!\n- fix behavior of ``pick_by`` to return the passed in argument when only one argument given. previously, an empty dictionary was returned. thanks elijose55_!\n- officially support python 3.8.\n\n\nv4.7.6 (2019-11-20)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix handling of ``sequence``, ``mapping``, and ``namedtuple`` types in ``get`` so that their attributes aren't accessed during look-up. thanks jwilson8767_!\n\n\nv4.7.5 (2019-05-21)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix handling of string and byte values in ``clone_with`` and ``clone_deep_with`` when a customizer is used.\n- fix handling of non-indexable iterables in ``find`` and ``find_last``.\n\n\nv4.7.4 (2018-11-14)\n-------------------\n\nbug fixes\n+++++++++\n\n- raise an explicit exception in ``set_``, ``set_with``, ``update``, and ``update_with`` when an object cannot be updated due to that object or one of its nested objects not being subscriptable.\n\n\nv4.7.3 (2018-08-07)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix bug in ``spread`` where arguments were not being passed to wrapped function properly.\n\n\nv4.7.1 (2018-08-03)\n-------------------\n\nnew features\n++++++++++++\n\n- modify ``to_dict`` to first try to convert using ``dict()`` before falling back to using ``pydash.helpers.iterator()``.\n\n\nv4.7.0 (2018-07-26)\n-------------------\n\nmisc\n++++\n\n- internal code optimizations.\n\n\nv4.6.1 (2018-07-16)\n-------------------\n\nmisc\n++++\n\n- support python 3.7.\n\n\nv4.6.0 (2018-07-10)\n-------------------\n\nmisc\n++++\n\n- improve performance of the following functions for large datasets:\n\n  - ``duplicates``\n  - ``sorted_uniq``\n  - ``sorted_uniq_by``\n  - ``union``\n  - ``union_by``\n  - ``union_with``\n  - ``uniq``\n  - ``uniq_by``\n  - ``uniq_with``\n  - ``xor``\n  - ``xor_by``\n  - ``xor_with``\n\n\nv4.5.0 (2018-03-20)\n-------------------\n\nnew features\n++++++++++++\n\n- add ``jitter`` argument to ``retry``.\n\n\nv4.4.1 (2018-03-14)\n-------------------\n\nnew features\n++++++++++++\n\n- add ``attempt`` argument to ``on_exception`` callback in ``retry``. new function signature is ``on_exception(exc, attempt)`` (previously was ``on_exception(exc)``). all arguments to ``on_exception`` callback are now optional.\n\n\nv4.4.0 (2018-03-13)\n-------------------\n\nnew features\n++++++++++++\n\n- add ``retry`` decorator that will retry a function multiple times if the function raises an exception.\n\n\nv4.3.3 (2018-03-02)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix regression in ``v4.3.2`` introduced by the support added for callable class callbacks that changed the handling of callbacks that could not be inspected. prior to ``v4.3.2``, these callbacks would default to being passed a single callback argument, but with ``v4.3.2`` these callbacks would be passed the full set of callback arguments which could result an exception being raised due to the callback not supporting that many arguments.\n\n\nv4.3.2 (2018-02-06)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix issue in ``defaults_deep`` where sources with non-dict values would raise an exception due to assumption that object was always a dict.\n- fix issue in ``curry`` where too many arguments would be passed to the curried function when evaluating function if too many arguments used in last function call.\n- workaround issue in python 2.7 where callable classes used as callbacks were always passed the full count of arguments even when the callable class only accept a subset of arguments.\n\n\nv4.3.1 (2017-12-19)\n-------------------\n\nbug fixes\n+++++++++\n\n- fix ``set_with`` so that callable values are not called when being set. this bug also impacted the following functions by proxy:\n\n  - ``pick``\n  - ``pick_by``\n  - ``set_``\n  - ``transpose``\n  - ``zip_object_deep``\n\n\nv4.3.0 (2017-11-22)\n-------------------\n\nnew features\n++++++++++++\n\n- add ``nest``.\n- wrap non-iterables in a list in ``to_list`` instead of raising an exception. thanks efenka_!\n- add ``split_strings`` argument to ``to_list`` to control whether strings are coverted to a list (``split_strings=true``) or wrapped in a list (``split_strings=false``). default is ``split_strings=true``. thanks efenka_!\n\n\nv4.2.1 (2017-09-08)\n-------------------\n\nbug fixes\n+++++++++\n\n- ensure that ``to_path`` always returns a ``list``.\n- fix ``get`` to work with path values other than just strings, integers, and lists.\n\n\nv4.2.0 (2017-09-08)\n-------------------\n\nnew features\n++++++++++++\n\n- support more iterator \"hooks\" in ``to_dict`` so non-iterators that expose an ``items()``, ``iteritems()``, or has ``__dict__`` attributes will be converted using those methods.\n- support deep paths in ``omit`` and ``omit_by``. thanks beck3905_!\n- support deep paths in ``pick`` and ``pick_by``. thanks beck3905_!\n\nbug fixes\n+++++++++\n\n- fix missing argument passing to matched function in ``cond``.\n- support passing a single list of pairs in ``cond`` instead of just pairs as separate arguments.\n\n\nv4.1.0 (2017-06-09)\n-------------------\n\nnew features\n++++++++++++\n\n- officially support python 3.6.\n- add ``properties`` function that returns list of path values for an object.\n- add ``replace_end``.\n- add ``replace_start``.\n- make ``iteratee`` support ``properties``-style callback when a ``tuple`` is passed.\n- make ``replace`` accept ``from_start`` and ``from_end`` arguments to limit replacement to start and/or end of string.\n\nbug fixes\n+++++++++\n\n- none\n\n\nv4.0.4 (2017-05-31)\n-------------------\n\nnew features\n++++++++++++\n\n- none\n\nbug fixes\n+++++++++\n\n- improve performance of ``get``. thanks shaunpatterson_!\n\n\nv4.0.3 (2017-04-20)\n-------------------\n\nnew features\n++++++++++++\n\n- none\n\nbug fixes\n+++++++++\n\n- fix regression in ``get`` where ``list`` and ``dict`` objects had attributes returned when a key was missing but the key corresponded to an attribute name. for example, ``pydash.get({}, 'update')`` would return ``{}.update()`` instead of ``none``. previous behavior was that only item-access was allowed for ``list`` and ``dict`` which has been restored.\n- fix regression in ``invoke``/``invoke_map`` where non-attributes could be invoked. for example, ``pydash.invoke({'items': lambda: 1}, 'items')`` would return ``1`` instead of ``dict_items([('a', 'items')])``. previous behavior was that only attribute methods could be invoked which has now been restored.\n\n\nv4.0.2 (2017-04-04)\n-------------------\n\nnew features\n++++++++++++\n\n- none\n\nbug fixes\n+++++++++\n\n- fix regression in ``intersection``, ``intersection_by``, and ``intersection_with`` introduced in ``v4.0.0`` where the a single argument supplied to intersection should return the same argument value instead of an empty list.\n\nbackwards-incompatibilities\n+++++++++++++++++++++++++++\n\n- none\n\n\nv4.0.1 (2017-04-04)\n-------------------\n\nnew features\n++++++++++++\n\n- make ``property_`` work with deep path strings.\n\nbug fixes\n+++++++++\n\n- revert removal of ``deep_pluck`` and rename to ``pluck``. previously, ``deep_pluck`` was removed and ``map_`` was recommended as a replacement. however, ``deep_pluck`` (now defined as ``pluck``) functionality is not supported by ``map_`` so the removal ``pluck`` was reverted.\n\nbackwards-incompatibilities\n+++++++++++++++++++++++++++\n\n- remove ``property_deep`` (use ``property_``).\n\n\n.. _changelog-v4.0.0:\n\nv4.0.0 (2017-04-03)\n-------------------\n\nnew features\n++++++++++++\n\n- add ``assign_with``.\n- add ``clamp``.\n- add ``clone_deep_with``.\n- add ``clone_with``.\n- add ``cond``. thanks bharadwajyarlagadda_!\n- add ``conforms``.\n- add ``conforms_to``.\n- add ``default_to``. thanks bharadwajyarlagadda_!\n- add ``difference_by``.\n- add ``difference_with``.\n- add ``divide``. thanks bharadwajyarlagadda_!\n- add ``eq``. thanks bharadwajyarlagadda_!\n- add ``flat_map``.\n- add ``flat_map_deep``.\n- add ``flat_map_depth``.\n- add ``flatten_depth``.\n- add ``flip``. thanks bharadwajyarlagadda_!\n- add ``from_pairs``. thanks bharadwajyarlagadda_!\n- add ``intersection_by``.\n- add ``intersection_with``.\n- add ``invert_by``.\n- add ``invoke_map``.\n- add ``is_equal_with``. thanks bharadwajyarlagadda_!\n- add ``is_match_with``.\n- add ``is_set``. thanks bharadwajyarlagadda_!\n- add ``lower_case``. thanks bharadwajyarlagadda_!\n- add ``lower_first``. thanks bharadwajyarlagadda_!\n- add ``max_by``.\n- add ``mean_by``.\n- add ``merge_with``.\n- add ``min_by``.\n- add ``multiply``. thanks bharadwajyarlagadda_!\n- add ``nth``. thanks bharadwajyarlagadda_!\n- add ``nth_arg``. thanks bharadwajyarlagadda_!\n- add ``omit_by``.\n- add ``over``. thanks bharadwajyarlagadda_!\n- add ``over_every``. thanks bharadwajyarlagadda_!\n- add ``over_some``. thanks bharadwajyarlagadda_!\n- add ``pick_by``.\n- add ``pull_all``. thanks bharadwajyarlagadda_!\n- add ``pull_all_by``.\n- add ``pull_all_with``.\n- add ``range_right``. thanks bharadwajyarlagadda_!\n- add ``sample_size``. thanks bharadwajyarlagadda_!\n- add ``set_with``.\n- add ``sorted_index_by``.\n- add ``sorted_index_of``. thanks bharadwajyarlagadda_!\n- add ``sorted_last_index_by``.\n- add ``sorted_last_index_of``.\n- add ``sorted_uniq``. thanks bharadwajyarlagadda_!\n- add ``sorted_uniq_by``.\n- add ``stub_list``. thanks bharadwajyarlagadda_!\n- add ``stub_dict``. thanks bharadwajyarlagadda_!\n- add ``stub_false``. thanks bharadwajyarlagadda_!\n- add ``stub_string``. thanks bharadwajyarlagadda_!\n- add ``stub_true``. thanks bharadwajyarlagadda_!\n- add ``subtract``. thanks bharadwajyarlagadda_!\n- add ``sum_by``.\n- add ``to_integer``.\n- add ``to_lower``. thanks bharadwajyarlagadda_!\n- add ``to_path``. thanks bharadwajyarlagadda_!\n- add ``to_upper``. thanks bharadwajyarlagadda_!\n- add ``unary``.\n- add ``union_by``. thanks bharadwajyarlagadda_!\n- add ``union_with``. thanks bharadwajyarlagadda_!\n- add ``uniq_by``.\n- add ``uniq_with``.\n- add ``unset``.\n- add ``update``.\n- add ``update_with``.\n- add ``upper_case``. thanks bharadwajyarlagadda_!\n- add ``upper_first``. thanks bharadwajyarlagadda_!\n- add ``xor_by``.\n- add ``xor_with``.\n- add ``zip_object_deep``.\n- make function returned by ``constant`` ignore extra arguments when called.\n- make ``get`` support attribute access within path.\n- make ``iteratee`` treat an integer argument as a string path (i.e. ``iteratee(1)`` is equivalent to ``iteratee('1')`` for creating a path accessor function).\n- make ``intersection`` work with unhashable types.\n- make ``range_`` support decrementing when ``start`` argument is greater than ``stop`` argument.\n- make ``xor`` maintain sort order of supplied arguments.\n\nbug fixes\n+++++++++\n\n- fix ``find_last_key`` so that it iterates over object in reverse.\n\nbackwards-incompatibilities\n+++++++++++++++++++++++++++\n\n- make ``add`` only support two argument addition. (**breaking change**)\n- make ``difference`` return duplicate values from first argument and maintain sort order. (**breaking change**)\n- make ``invoke`` work on objects instead of collections. use ``invoke_map`` for collections. (**breaking change**)\n- make ``set_`` support mixed ``list``/``dict`` defaults within a single object based on whether key or index path substrings used. (**breaking change**)\n- make ``set_`` modify object in place. (**breaking change**)\n- only use ``merge`` callback result if result is not ``none``. previously, result from callback (if provided) was used unconditionally. (**breaking change**)\n- remove functions: (**breaking change**)\n\n  - ``deep_pluck`` (no alternative) [**update:** ``deep_pluck`` functionality restored as ``pluck`` in ``v4.0.1``]\n  - ``mapiter`` (no alternative)\n  - ``pluck`` (use ``map_``)\n  - ``update_path`` (use ``update`` or ``update_with``)\n  - ``set_path`` (use ``set_`` or ``set_with``)\n\n- remove aliases: (**breaking change**)\n\n  - ``all_`` (use ``every``)\n  - ``any_`` (use ``some``)\n  - ``append`` (use ``push``)\n  - ``average`` and ``avg`` (use ``mean`` or ``mean_by``)\n  - ``callback`` (use ``iteratee``)\n  - ``cat`` (use ``concat``)\n  - ``collect`` (use ``map_``)\n  - ``contains`` (use ``includes``)\n  - ``curve`` (use ``round_``)\n  - ``deep_get`` and ``get_path`` (use ``get``)\n  - ``deep_has`` and ``has_path`` (use ``has``)\n  - ``deep_prop`` (use ``property_deep``)\n  - ``deep_set`` (use ``set_``)\n  - ``detect`` and ``find_where`` (use ``find``)\n  - ``each`` (use ``for_each``)\n  - ``each_right`` (use ``for_each_right``)\n  - ``escape_re`` (use ``escape_reg_exp``)\n  - ``explode`` (use ``split``)\n  - ``extend`` (use ``assign``)\n  - ``first`` (use ``head``)\n  - ``foldl`` (use ``reduce``)\n  - ``foldr`` (use ``reduce_right``)\n  - ``for_own`` (use ``for_each``)\n  - ``for_own_right`` (use ``for_each_right``)\n  - ``implode`` (use ``join``)\n  - ``is_bool`` (use ``is_boolean``)\n  - ``is_int`` (use ``is_integer``)\n  - ``is_native`` (use ``is_builtin``)\n  - ``is_num`` (use ``is_number``)\n  - ``is_plain_object`` (use ``is_dict``)\n  - ``is_re`` (use ``is_reg_exp``)\n  - ``js_match`` (use ``reg_exp_js_match``)\n  - ``js_replace`` (use ``reg_exp_js_replace``)\n  - ``keys_in`` (use ``keys``)\n  - ``moving_average`` and ``moving_avg`` (use ``moving_mean``)\n  - ``object_`` (use ``zip_object``)\n  - ``pad_left`` (use ``pad_start``)\n  - ``pad_right`` (use ``pad_end``)\n  - ``pipe`` (use ``flow``)\n  - ``pipe_right`` and ``compose`` (use ``flow_right``)\n  - ``prop`` (use ``property_``)\n  - ``prop_of`` (use ``property_of``)\n  - ``pow_`` (use ``power``)\n  - ``re_replace`` (use ``reg_exp_replace``)\n  - ``rest`` (use ``tail``)\n  - ``select`` (use ``filter_``)\n  - ``sigma`` (use ``std_deviation``)\n  - ``sort_by_all`` and ``sort_by_order`` (use ``order_by``)\n  - ``trim_left`` (use ``trim_start``)\n  - ``trim_right`` (use ``trim_right``)\n  - ``trunc`` (use ``truncate``)\n  - ``underscore_case`` (use ``snake_case``)\n  - ``unique`` (use ``uniq``)\n  - ``values_in`` (use ``values``)\n  - ``where`` (use ``filter_``)\n\n- rename functions: (**breaking change**)\n\n  - ``deep_map_values`` to ``map_values_deep``\n  - ``deep_property`` to ``property_deep``\n  - ``include`` to ``includes``\n  - ``index_by`` to ``key_by``\n  - ``mod_args`` to ``over_args``\n  - ``moving_average`` to ``moving_mean``\n  - ``pairs`` to ``to_pairs``\n\n- remove ``callback`` argument from: (**breaking change**)\n\n  - ``assign``. moved to ``assign_with``.\n  - ``clone`` and ``clone_deep``. moved to ``clone_with`` and ``clone_deep_with``.\n  - ``is_match``. moved to ``is_match_with``.\n  - ``max_`` and ``min_``. moved to ``max_by`` and ``min_by``.\n  - ``omit``. moved to ``omit_by``.\n  - ``pick``. moved to ``pick_by``.\n  - ``sorted_index``. moved to ``sorted_index_by``.\n  - ``sum_``. moved to ``sum_by``.\n  - ``uniq``/``unique``. moved to ``uniq_by``.\n\n- renamed ``callback`` argument to ``predicate``: (**breaking change**)\n\n  - ``drop_right_while``\n  - ``drop_while``\n  - ``every``\n  - ``filter_``\n  - ``find``\n  - ``find_key``\n  - ``find_last``\n  - ``find_index``\n  - ``find_last_index``\n  - ``find_last_key``\n  - ``partition``\n  - ``reject``\n  - ``remove``\n  - ``some``\n  - ``take_right_while``\n  - ``take_while``\n\n- renamed ``callback`` argument to ``iteratee``: (**breaking change**)\n\n  - ``count_by``\n  - ``duplicates``\n  - ``for_each``\n  - ``for_each_right``\n  - ``for_in``\n  - ``for_in_right``\n  - ``group_by``\n  - ``key_by``\n  - ``map_``\n  - ``map_keys``\n  - ``map_values``\n  - ``map_values_deep``\n  - ``mapcat``\n  - ``median``\n  - ``reduce_``\n  - ``reduce_right``\n  - ``reductions``\n  - ``reductions_right``\n  - ``sort_by``\n  - ``times``\n  - ``transform``\n  - ``unzip_with``\n  - ``zip_with``\n  - ``zscore``\n\n- rename ``comparison`` argument in ``sort`` to ``comparator``.\n- rename ``index`` and ``how_many`` arguments in ``splice`` to ``start`` and ``count``.\n- remove ``multivalue`` argument from ``invert``. feature moved to ``invert_by``. (**breaking change**)\n\n\nv3.4.8 (2017-01-05)\n-------------------\n\n- make internal function inspection methods work with python 3 annotations. thanks tgriesser_!\n\n\nv3.4.7 (2016-11-01)\n-------------------\n\n- fix bug in ``get`` where an iterable default was iterated over instead of being returned when an object path wasn't found. thanks urbnjamesmi1_!\n\n\nv3.4.6 (2016-10-31)\n-------------------\n\n- fix bug in ``get`` where casting a string key to integer resulted in an uncaught exception instead of the default value being returned instead. thanks urbnjamesmi1_!\n\n\nv3.4.5 (2016-10-16)\n-------------------\n\n- add optional ``default`` parameter to ``min_`` and ``max_`` functions that is used when provided iterable is empty.\n- fix bug in ``is_match`` where comparison between an empty ``source`` argument returned ``none`` instead of ``true``.\n\n\nv3.4.4 (2016-09-06)\n-------------------\n\n- shallow copy each source in ``assign``/``extend`` instead of deep copying.\n- call ``copy.deepcopy`` in ``merge`` instead of the more resource intensive ``clone_deep``.\n\n\nv3.4.3 (2016-04-07)\n-------------------\n\n- fix minor issue in deep path string parsing so that list indexing in paths can be specified as ``foo[0][1].bar`` instead of ``foo.[0].[1].bar``. both formats are now supported.\n\n\nv3.4.2 (2016-03-24)\n-------------------\n\n- fix bug in ``start_case`` where capitalized characters after the first character of a word where mistakenly cast to lower case.\n\n\nv3.4.1 (2015-11-03)\n-------------------\n\n- fix python 3.5, inspect, and  pytest compatibility issue with ``py_`` chaining object when doctest run on ``pydash.__init__.py``.\n\n\nv3.4.0 (2015-09-22)\n-------------------\n\n- optimize callback system for performance.\n\n  - explicitly store arg count on callback for ``pydash`` generated callbacks where the arg count is known. this avoids the costly ``inspect.getargspec`` call.\n  - eliminate usage of costly ``guess_builtin_argcount`` which parsed docstrings, and instead only ever pass a single argument to a builtin callback function.\n\n- optimize ``get``/``set`` so that regex parsing is only done when special characters are contained in the path key whereas before, all string paths were parsed.\n- optimize ``is_builtin`` by checking for ``builtinfunctiontype`` instance and then using ``dict`` look up table instead of a ``list`` look up.\n- optimize ``is_match`` by replacing call to ``has`` with a ``try/except`` block.\n- optimize ``push``/``append`` by using a native loop instead of callback mapping.\n\n\nv3.3.0 (2015-07-23)\n-------------------\n\n- add ``ceil``.\n- add ``defaults_deep``.\n- add ``floor``.\n- add ``get``.\n- add ``gt``.\n- add ``gte``.\n- add ``is_iterable``.\n- add ``lt``.\n- add ``lte``.\n- add ``map_keys``.\n- add ``method``.\n- add ``method_of``.\n- add ``mod_args``.\n- add ``set_``.\n- add ``unzip_with``.\n- add ``zip_with``.\n- make ``add`` support adding two numbers if passed in positionally.\n- make ``get`` main definition and ``get_path`` its alias.\n- make ``set_`` main definition and ``deep_set`` its alias.\n\n\nv3.2.2 (2015-04-29)\n-------------------\n\n- catch ``attributeerror`` in ``helpers.get_item`` and return default value if set.\n\n\nv3.2.1 (2015-04-29)\n-------------------\n\n- fix bug in ``reduce_right`` where collection was not reversed correctly.\n\n\nv3.2.0 (2015-03-03)\n-------------------\n\n- add ``sort_by_order`` as alias of ``sort_by_all``.\n- fix ``is_match`` to not compare ``obj`` and ``source`` types using ``type`` and instead use ``isinstance`` comparisons exclusively.\n- make ``sort_by_all`` accept an ``orders`` argument for specifying the sort order of each key via boolean ``true`` (for ascending) and ``false`` (for descending).\n- make ``words`` accept a ``pattern`` argument to override the default regex used for splitting words.\n- make ``words`` handle single character words better.\n\n\nv3.1.0 (2015-02-28)\n-------------------\n\n- add ``fill``.\n- add ``in_range``.\n- add ``matches_property``.\n- add ``spread``.\n- add ``start_case``.\n- make callbacks support ``matches_property`` style as ``[key, value]`` or ``(key, value)``.\n- make callbacks support shallow ``property`` style callbacks as ``[key]`` or ``(key,)``.\n\n\n.. _changelog-v3.0.0:\n\nv3.0.0 (2015-02-25)\n-------------------\n\n- add ``ary``.\n- add ``chars``.\n- add ``chop``.\n- add ``chop_right``.\n- add ``clean``.\n- add ``commit`` method to ``chain`` that returns a new chain with the computed ``chain.value()`` as the initial value of the chain.\n- add ``count_substr``.\n- add ``decapitalize``.\n- add ``duplicates``.\n- add ``has_substr``.\n- add ``human_case``.\n- add ``insert_substr``.\n- add ``is_blank``.\n- add ``is_bool`` as alias of ``is_boolean``.\n- add ``is_builtin``, ``is_native``.\n- add ``is_dict`` as alias of ``is_plain_object``.\n- add ``is_int`` as alias of ``is_integer``.\n- add ``is_match``.\n- add ``is_num`` as alias of ``is_number``.\n- add ``is_tuple``.\n- add ``join`` as alias of ``implode``.\n- add ``lines``.\n- add ``number_format``.\n- add ``pascal_case``.\n- add ``plant`` method to ``chain`` that returns a cloned chain with a new initial value.\n- add ``predecessor``.\n- add ``property_of``, ``prop_of``.\n- add ``prune``.\n- add ``re_replace``.\n- add ``rearg``.\n- add ``replace``.\n- add ``run`` as alias of ``chain.value``.\n- add ``separator_case``.\n- add ``series_phrase``.\n- add ``series_phrase_serial``.\n- add ``slugify``.\n- add ``sort_by_all``.\n- add ``strip_tags``.\n- add ``substr_left``.\n- add ``substr_left_end``.\n- add ``substr_right``.\n- add ``substr_right_end``.\n- add ``successor``.\n- add ``swap_case``.\n- add ``title_case``.\n- add ``truncate`` as alias of ``trunc``.\n- add ``to_boolean``.\n- add ``to_dict``, ``to_plain_object``.\n- add ``to_number``.\n- add ``underscore_case`` as alias of ``snake_case``.\n- add ``unquote``.\n- fix ``deep_has`` to return ``false`` when ``valueerror`` raised during path checking.\n- fix ``pad`` so that it doesn't over pad beyond provided length.\n- fix ``trunc``/``truncate`` so that they handle texts shorter than the max string length correctly.\n- make the following functions work with empty strings and ``none``: (**breaking change**) thanks k7sleeper_!\n\n  - ``camel_case``\n  - ``capitalize``\n  - ``chars``\n  - ``chop``\n  - ``chop_right``\n  - ``class_case``\n  - ``clean``\n  - ``count_substr``\n  - ``decapitalize``\n  - ``ends_with``\n  - ``join``\n  - ``js_replace``\n  - ``kebab_case``\n  - ``lines``\n  - ``quote``\n  - ``re_replace``\n  - ``replace``\n  - ``series_phrase``\n  - ``series_phrase_serial``\n  - ``starts_with``\n  - ``surround``\n\n- make callback invocation have better support for builtin functions and methods. previously, if one wanted to pass a builtin function or method as a callback, it had to be wrapped in a lambda which limited the number of arguments that would be passed it. for example, ``_.each([1, 2, 3], array.append)`` would fail and would need to be converted to ``_.each([1, 2, 3], lambda item: array.append(item)``. that is no longer the case as the non-wrapped method is now supported.\n- make ``capitalize`` accept ``strict`` argument to control whether to convert the rest of the string to lower case or not. defaults to ``true``.\n- make ``chain`` support late passing of initial ``value`` argument.\n- make ``chain`` not store computed ``value()``. (**breaking change**)\n- make ``drop``, ``drop_right``, ``take``, and ``take_right`` have default ``n=1``.\n- make ``is_indexed`` return ``true`` for tuples.\n- make ``partial`` and ``partial_right`` accept keyword arguments.\n- make ``pluck`` style callbacks support deep paths. (**breaking change**)\n- make ``re_replace`` accept non-string arguments.\n- make ``sort_by`` accept ``reverse`` parameter.\n- make ``splice`` work with strings.\n- make ``to_string`` convert ``none`` to empty string. (**breaking change**)\n- move ``arrays.join`` to ``strings.join``. (**breaking change**)\n- rename ``join``/``implode``'s second parameter from ``delimiter`` to ``separator``. (**breaking change**)\n- rename ``split``/``explode``'s second parameter from ``delimiter`` to ``separator``. (**breaking change**)\n- reorder function arguments for ``after`` from ``(n, func)`` to ``(func, n)``. (**breaking change**)\n- reorder function arguments for ``before`` from ``(n, func)`` to ``(func, n)``. (**breaking change**)\n- reorder function arguments for ``times`` from ``(n, callback)`` to ``(callback, n)``. (**breaking change**)\n- reorder function arguments for ``js_match`` from ``(reg_exp, text)`` to ``(text, reg_exp)``. (**breaking change**)\n- reorder function arguments for ``js_replace`` from ``(reg_exp, text, repl)`` to ``(text, reg_exp, repl)``. (**breaking change**)\n- support iteration over class instance properties for non-list, non-dict, and non-iterable objects.\n\n\nv2.4.2 (2015-02-03)\n-------------------\n\n- fix ``remove`` so that array is modified after callback iteration.\n\n\nv2.4.1 (2015-01-11)\n-------------------\n\n- fix ``kebab_case`` so that it casts string to lower case.\n\n\nv2.4.0 (2015-01-07)\n-------------------\n\n- add ``ensure_ends_with``. thanks k7sleeper_!\n- add ``ensure_starts_with``. thanks k7sleeper_!\n- add ``quote``. thanks k7sleeper_!\n- add ``surround``. thanks k7sleeper_!\n\n\nv2.3.2 (2014-12-10)\n-------------------\n\n- fix ``merge`` and ``assign``/``extend`` so they apply ``clone_deep`` to source values before assigning to destination object.\n- make ``merge`` accept a callback as a positional argument if it is last.\n\n\nv2.3.1 (2014-12-07)\n-------------------\n\n- add ``pipe`` and ``pipe_right`` as aliases of ``flow`` and ``flow_right``.\n- fix ``merge`` so that trailing ``{}`` or ``[]`` don't overwrite previous source values.\n- make ``py_`` an alias for ``_``.\n\n\nv2.3.0 (2014-11-10)\n-------------------\n\n- support ``type`` callbacks (e.g. ``int``, ``float``, ``str``, etc.) by only passing a single callback argument when invoking the callback.\n- drop official support for python 3.2. too many testing dependencies no longer work on it.\n\n\nv2.2.0 (2014-10-28)\n-------------------\n\n- add ``append``.\n- add ``deep_get``.\n- add ``deep_has``.\n- add ``deep_map_values``.\n- add ``deep_set``.\n- add ``deep_pluck``.\n- add ``deep_property``.\n- add ``join``.\n- add ``pop``.\n- add ``push``.\n- add ``reverse``.\n- add ``shift``.\n- add ``sort``.\n- add ``splice``.\n- add ``unshift``.\n- add ``url``.\n- fix bug in ``snake_case`` that resulted in returned string not being converted to lower case.\n- fix bug in chaining method access test which skipped the actual test.\n- make ``_`` instance alias method access to methods with a trailing underscore in their name. for example, ``_.map()`` becomes an alias for ``map_()``.\n- make ``deep_prop`` an alias of ``deep_property``.\n- make ``has`` work with deep paths.\n- make ``has_path`` an alias of ``deep_has``.\n- make ``get_path`` handle escaping the ``.`` delimiter for string keys.\n- make ``get_path`` handle list indexing using strings such as ``'0.1.2'`` to access ``'value'`` in ``[[0, [0, 0, 'value']]]``.\n- make ``concat`` an alias of ``cat``.\n\n\nv2.1.0 (2014-09-17)\n-------------------\n\n- add ``add``, ``sum_``.\n- add ``average``, ``avg``, ``mean``.\n- add ``mapiter``.\n- add ``median``.\n- add ``moving_average``, ``moving_avg``.\n- add ``power``, ``pow_``.\n- add ``round_``, ``curve``.\n- add ``scale``.\n- add ``slope``.\n- add ``std_deviation``, ``sigma``.\n- add ``transpose``.\n- add ``variance``.\n- add ``zscore``.\n\n\n.. _changelog-v2.0.0:\n\nv2.0.0 (2014-09-11)\n-------------------\n\n- add ``_`` instance that supports both method chaining and module method calling.\n- add ``cat``.\n- add ``conjoin``.\n- add ``deburr``.\n- add ``disjoin``.\n- add ``explode``.\n- add ``flatten_deep``.\n- add ``flow``.\n- add ``flow_right``.\n- add ``get_path``.\n- add ``has_path``.\n- add ``implode``.\n- add ``intercalate``.\n- add ``interleave``.\n- add ``intersperse``.\n- add ``is_associative``.\n- add ``is_even``.\n- add ``is_float``.\n- add ``is_decreasing``.\n- add ``is_increasing``.\n- add ``is_indexed``.\n- add ``is_instance_of``.\n- add ``is_integer``.\n- add ``is_json``.\n- add ``is_monotone``.\n- add ``is_negative``.\n- add ``is_odd``.\n- add ``is_positive``.\n- add ``is_strictly_decreasing``.\n- add ``is_strictly_increasing``.\n- add ``is_zero``.\n- add ``iterated``.\n- add ``js_match``.\n- add ``js_replace``.\n- add ``juxtapose``.\n- add ``mapcat``.\n- add ``reductions``.\n- add ``reductions_right``.\n- add ``rename_keys``.\n- add ``set_path``.\n- add ``split_at``.\n- add ``thru``.\n- add ``to_string``.\n- add ``update_path``.\n- add ``words``.\n- make callback function calling adapt to argspec of given callback function. if, for example, the full callback signature is ``(item, index, obj)`` but the passed in callback only supports ``(item)``, then only ``item`` will be passed in when callback is invoked. previously, callbacks had to support all arguments or implement star-args.\n- make ``chain`` lazy and only compute the final value when ``value`` called.\n- make ``compose`` an alias of ``flow_right``.\n- make ``flatten`` shallow by default, remove callback option, and add ``is_deep`` option. (**breaking change**)\n- make ``is_number`` return ``false`` for boolean ``true`` and ``false``. (**breaking change**)\n- make ``invert`` accept ``multivalue`` argument.\n- make ``result`` accept ``default`` argument.\n- make ``slice_`` accept optional ``start`` and ``end`` arguments.\n- move files in ``pydash/api/`` to ``pydash/``. (**breaking change**)\n- move predicate functions from ``pydash.api.objects`` to ``pydash.api.predicates``. (**breaking change**)\n- rename ``create_callback`` to ``iteratee``. (**breaking change**)\n- rename ``functions`` to ``callables`` in order to allow ``functions.py`` to exist at the root of the pydash module folder. (**breaking change**)\n- rename *private* utility function ``_iter_callback`` to ``itercallback``. (**breaking change**)\n- rename *private* utility function ``_iter_list_callback`` to ``iterlist_callback``. (**breaking change**)\n- rename *private* utility function ``_iter_dict_callback`` to ``iterdict_callback``. (**breaking change**)\n- rename *private* utility function ``_iterate`` to ``iterator``. (**breaking change**)\n- rename *private* utility function ``_iter_dict`` to ``iterdict``. (**breaking change**)\n- rename *private* utility function ``_iter_list`` to ``iterlist``. (**breaking change**)\n- rename *private* utility function ``_iter_unique`` to ``iterunique``. (**breaking change**)\n- rename *private* utility function ``_get_item`` to ``getitem``. (**breaking change**)\n- rename *private* utility function ``_set_item`` to ``setitem``. (**breaking change**)\n- rename *private* utility function ``_deprecated`` to ``deprecated``. (**breaking change**)\n- undeprecate ``tail`` and make alias of ``rest``.\n\n\nv1.1.0 (2014-08-19)\n-------------------\n\n- add ``attempt``.\n- add ``before``.\n- add ``camel_case``.\n- add ``capitalize``.\n- add ``chunk``.\n- add ``curry_right``.\n- add ``drop_right``.\n- add ``drop_right_while``.\n- add ``drop_while``.\n- add ``ends_with``.\n- add ``escape_reg_exp`` and ``escape_re``.\n- add ``is_error``.\n- add ``is_reg_exp`` and ``is_re``.\n- add ``kebab_case``.\n- add ``keys_in`` as alias of ``keys``.\n- add ``negate``.\n- add ``pad``.\n- add ``pad_left``.\n- add ``pad_right``.\n- add ``partition``.\n- add ``pull_at``.\n- add ``repeat``.\n- add ``slice_``.\n- add ``snake_case``.\n- add ``sorted_last_index``.\n- add ``starts_with``.\n- add ``take_right``.\n- add ``take_right_while``.\n- add ``take_while``.\n- add ``trim``.\n- add ``trim_left``.\n- add ``trim_right``.\n- add ``trunc``.\n- add ``values_in`` as alias of ``values``.\n- create ``pydash.api.strings`` module.\n- deprecate ``tail``.\n- modify ``drop`` to accept ``n`` argument and remove as alias of ``rest``.\n- modify ``take`` to accept ``n`` argument and remove as alias of ``first``.\n- move ``escape`` and ``unescape`` from ``pydash.api.utilities`` to ``pydash.api.strings``. (**breaking change**)\n- move ``range_`` from ``pydash.api.arrays`` to ``pydash.api.utilities``. (**breaking change**)\n\n\n.. _changelog-v1.0.0:\n\nv1.0.0 (2014-08-05)\n-------------------\n\n- add python 2.6 and python 3 support.\n- add ``after``.\n- add ``assign`` and ``extend``. thanks nathancahill_!\n- add ``callback`` and ``create_callback``.\n- add ``chain``.\n- add ``clone``.\n- add ``clone_deep``.\n- add ``compose``.\n- add ``constant``.\n- add ``count_by``. thanks nathancahill_!\n- add ``curry``.\n- add ``debounce``.\n- add ``defaults``. thanks nathancahill_!\n- add ``delay``.\n- add ``escape``.\n- add ``find_key``. thanks nathancahill_!\n- add ``find_last``. thanks nathancahill_!\n- add ``find_last_index``. thanks nathancahill_!\n- add ``find_last_key``. thanks nathancahill_!\n- add ``for_each``. thanks nathancahill_!\n- add ``for_each_right``. thanks nathancahill_!\n- add ``for_in``. thanks nathancahill_!\n- add ``for_in_right``. thanks nathancahill_!\n- add ``for_own``. thanks nathancahill_!\n- add ``for_own_right``. thanks nathancahill_!\n- add ``functions_`` and ``methods``. thanks nathancahill_!\n- add ``group_by``. thanks nathancahill_!\n- add ``has``. thanks nathancahill_!\n- add ``index_by``. thanks nathancahill_!\n- add ``identity``.\n- add ``inject``.\n- add ``invert``.\n- add ``invoke``. thanks nathancahill_!\n- add ``is_list``. thanks nathancahill_!\n- add ``is_boolean``. thanks nathancahill_!\n- add ``is_empty``. thanks nathancahill_!\n- add ``is_equal``.\n- add ``is_function``. thanks nathancahill_!\n- add ``is_none``. thanks nathancahill_!\n- add ``is_number``. thanks nathancahill_!\n- add ``is_object``.\n- add ``is_plain_object``.\n- add ``is_string``. thanks nathancahill_!\n- add ``keys``.\n- add ``map_values``.\n- add ``matches``.\n- add ``max_``. thanks nathancahill_!\n- add ``memoize``.\n- add ``merge``.\n- add ``min_``. thanks nathancahill_!\n- add ``noop``.\n- add ``now``.\n- add ``omit``.\n- add ``once``.\n- add ``pairs``.\n- add ``parse_int``.\n- add ``partial``.\n- add ``partial_right``.\n- add ``pick``.\n- add ``property_`` and ``prop``.\n- add ``pull``. thanks nathancahill_!\n- add ``random``.\n- add ``reduce_`` and ``foldl``.\n- add ``reduce_right`` and ``foldr``.\n- add ``reject``. thanks nathancahill_!\n- add ``remove``.\n- add ``result``.\n- add ``sample``.\n- add ``shuffle``.\n- add ``size``.\n- add ``sort_by``. thanks nathancahill_!\n- add ``tap``.\n- add ``throttle``.\n- add ``times``.\n- add ``transform``.\n- add ``to_list``. thanks nathancahill_!\n- add ``unescape``.\n- add ``unique_id``.\n- add ``values``.\n- add ``wrap``.\n- add ``xor``.\n\n\n.. _changelog-v0.0.0:\n\nv0.0.0 (2014-07-22)\n-------------------\n\n- add ``all_``.\n- add ``any_``.\n- add ``at``.\n- add ``bisect_left``.\n- add ``collect``.\n- add ``collections``.\n- add ``compact``.\n- add ``contains``.\n- add ``detect``.\n- add ``difference``.\n- add ``drop``.\n- add ``each``.\n- add ``each_right``.\n- add ``every``.\n- add ``filter_``.\n- add ``find``.\n- add ``find_index``.\n- add ``find_where``.\n- add ``first``.\n- add ``flatten``.\n- add ``head``.\n- add ``include``.\n- add ``index_of``.\n- add ``initial``.\n- add ``intersection``.\n- add ``last``.\n- add ``last_index_of``.\n- add ``map_``.\n- add ``object_``.\n- add ``pluck``.\n- add ``range_``.\n- add ``rest``.\n- add ``select``.\n- add ``some``.\n- add ``sorted_index``.\n- add ``tail``.\n- add ``take``.\n- add ``union``.\n- add ``uniq``.\n- add ``unique``.\n- add ``unzip``.\n- add ``where``.\n- add ``without``.\n- add ``zip_``.\n- add ``zip_object``.\n\n\n.. _nathancahill: https://github.com/nathancahill\n.. _k7sleeper: https://github.com/k7sleeper\n.. _bharadwajyarlagadda: https://github.com/bharadwajyarlagadda\n.. _urbnjamesmi1: https://github.com/urbnjamesmi1\n.. _tgriesser: https://github.com/tgriesser\n.. _shaunpatterson: https://github.com/shaunpatterson\n.. _beck3905: https://github.com/beck3905\n.. _efenka: https://github.com/efenka\n.. _jwilson8767: https://github.com/jwilson8767\n.. _elijose55: https://github.com/elijose55\n.. _gonzalonaveira: https://github.com/gonzalonaveira\n.. _zhaowb: https://github.com/zhaowb\n.. _mervynlee94: https://github.com/mervynlee94\n.. _weineel: https://github.com/weineel\n.. _bl4ckst0ne: https://github.com/bl4ckst0ne\n.. _deviousstoat: https://github.com/deviousstoat\n\nmit license\n\ncopyright (c) 2020 derrick gilland\n\npermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\n",
  "docs_url": null,
  "keywords": "pydash utility functional lodash underscore",
  "license": "mit license",
  "name": "pydash",
  "package_url": "https://pypi.org/project/pydash/",
  "project_url": "https://pypi.org/project/pydash/",
  "project_urls": {
    "Homepage": "https://github.com/dgilland/pydash"
  },
  "release_url": "https://pypi.org/project/pydash/7.0.6/",
  "requires_dist": [
    "typing-extensions (!=4.6.0,>=3.10)",
    "black ; extra == 'dev'",
    "build ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "docformatter ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "flake8-black ; extra == 'dev'",
    "flake8-bugbear ; extra == 'dev'",
    "flake8-isort ; extra == 'dev'",
    "furo ; extra == 'dev'",
    "invoke ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-mypy-testing ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "Sphinx ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "sphinx-autodoc-typehints ; extra == 'dev'",
    "importlib-metadata (<5) ; (python_version == \"3.7\") and extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "the kitchen sink of python utility libraries for doing \"stuff\" in a functional way. based on the lo-dash javascript library.",
  "version": "7.0.6",
  "releases": [],
  "developers": [
    "derrick_gilland",
    "dgilland@gmail.com"
  ],
  "kwds": "pydash python pytest stub_dict _iter_dict_callback",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pydash",
  "homepage": "https://github.com/dgilland/pydash",
  "release_count": 71,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_coverage",
    "pypi_docformatter",
    "pypi_flake8",
    "pypi_flake8_black",
    "pypi_flake8_bugbear",
    "pypi_flake8_isort",
    "pypi_furo",
    "pypi_importlib_metadata",
    "pypi_invoke",
    "pypi_isort",
    "pypi_mypy",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mypy_testing",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_tox",
    "pypi_twine",
    "pypi_typing_extensions",
    "pypi_wheel"
  ]
}
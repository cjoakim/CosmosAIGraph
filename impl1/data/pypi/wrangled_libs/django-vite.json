{
  "classifiers": [
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# django vite\n\n[![pypi version](https://badge.fury.io/py/django-vite.svg)](https://badge.fury.io/py/django-vite)\n\nintegration of [vitejs](https://vitejs.dev/) in a django project.\n\n- [installation](#installation)\n  - [django](#django)\n  - [vitejs](#vitejs)\n  - [assets](#assets)\n- [usage](#usage)\n  - [configuration](#configuration)\n  - [dev mode](#dev-mode)\n  - [template tags](#template-tags)\n  - [custom attributes](#custom-attributes)\n- [vite legacy plugin](#vite-legacy-plugin)\n- [multi-app configuration](#multi-app-configuration)\n- [configuration variables](#configuration-variables)\n  - [dev\\_mode](#dev_mode)\n  - [dev\\_server\\_protocol](#dev_server_protocol)\n  - [dev\\_server\\_host](#dev_server_host)\n  - [dev\\_server\\_port](#dev_server_port)\n  - [static\\_url\\_prefix](#static_url_prefix)\n  - [manifest\\_path](#manifest_path)\n  - [legacy\\_polyfills\\_motif](#legacy_polyfills_motif)\n  - [ws\\_client\\_url](#ws_client_url)\n  - [react\\_refresh\\_url](#react_refresh_url)\n- [notes](#notes)\n  - [whitenoise](#whitenoise)\n- [examples](#examples)\n- [thanks](#thanks)\n\n\n## installation\n\n### django\n\n```\npip install django-vite\n```\n\nadd `django_vite` to your `installed_apps` in your `settings.py`\n(before your apps that are using it).\n\n```python\ninstalled_apps = [\n    ...\n    'django_vite',\n    ...\n]\n```\n\n### vitejs\n\nfollow instructions on [https://vitejs.dev/guide/](https://vitejs.dev/guide/).\nand mostly the ssr part.\n\nthen in your vitejs config file :\n\n- set the `base` options the same as your `static_url` django setting.\n- set the `build.outdir` path to where you want the assets to compiled.\n- set the `build.manifest` options to `true`.\n- as you are in ssr and not in spa, you don't have an `index.html` that\n  vitejs can use to determine which files to compile. you need to tell it\n  directly in `build.rollupoptions.input`.\n\n```javascript\nexport default defineconfig({\n  ...\n  base: \"/static/\",\n  build: {\n    ...\n    manifest: true,\n    outdir: resolve(\"./assets\"),\n    rollupoptions: {\n      input: {\n        <unique key>: '<path to your asset>'\n      }\n    }\n  }\n})\n```\n\n### assets\n\nas recommended on vite's [backend integration guide](https://vitejs.dev/guide/backend-integration.html), your assets should include the modulepreload polyfill.\n\n```javascript\n// add this at the beginning of your app entry.\nimport 'vite/modulepreload-polyfill';\n```\n\n## usage\n\n### configuration\n\ndefine a default `django_vite` configuration in your `settings.py`.\n\n```python\ndjango_vite = {\n  \"default\": {\n    \"dev_mode\": true\n  }\n}\n```\n\nor if you prefer to use the legacy module-level settings, you can use:\n\n```python\ndjango_vite_dev_mode = true\n```\n\nbe sure that the `build.outdir` from `vite.config.js` is included in `staticfiles_dirs`.\n\n```python\nstaticfiles_dirs = [\n  base_dir / \"assets\"\n]\n```\n\n### dev mode\n\nthe `dev_mode`/`django_vite_dev_mode` boolean defines if you want to include assets in development mode or production mode.\n- in development mode, assets are included as modules using the vitejs\n  webserver. this will enable hmr for your assets.\n- in production mode, assets are included as standard assets\n  (no vitejs webserver and hmr) like default django static files.\n  this means that your assets must be compiled with vitejs before.\n- this setting may be set as the same value as your `debug` setting in\n  django. but you can do what is good for your needs.\n\n### template tags\n\ninclude this in your base html template file.\n\n```\n{% load django_vite %}\n```\n\nthen in your `<head>` element add this :\n\n```\n{% vite_hmr_client %}\n```\n\n- this will add a `<script>` tag to include the vitejs hmr client.\n- this tag will include this script only if `django_vite_dev_mode` is true,\n  otherwise this will do nothing.\n\nthen add this tag (in your `<head>` element too) to load your scripts :\n\n```\n{% vite_asset '<path to your asset>' %}\n```\n\nthis will add a `<script>` tag including your js/ts script :\n\n- in development mode, all scripts are included as modules.\n- in development mode, all scripts are marked as `async` and `defer`.\n- you can pass a second argument to this tag to overrides attributes\n  passed to the script tag.\n- this tag only accept js/ts, for other type of assets, they must be\n  included in the script itself using `import` statements.\n- in production mode, the library will read the `manifest.json` file\n  generated by vitejs and import all css files dependent of this script\n  (before importing the script).\n- you can add as many of this tag as you want, for each input you specify\n  in your vitejs configuration file.\n- the path must be relative to your `root` key inside your vitejs config file.\n- the path must be a key inside your manifest file `manifest.json` file\n  generated by vitejs.\n- in general, this path does not require a `/` at the beginning\n  (follow your `manifest.json` file).\n\n```\n{% vite_asset_url '<path to your asset>' %}\n```\n\nthis will generate only the url to an asset with no tag surrounding it.\n**warning, this does not generate urls for dependant assets of this one\nlike the previous tag.**\n\n```\n{% vite_react_refresh %}\n```\nif you're using react, this will generate the javascript needed to support react hmr.\n\n### custom attributes\n\nby default, all script tags are generated with a `type=\"module\"` and `crossorigin=\"\"` attributes just like vitejs do by default if you are building a single-page app.\nyou can override this behavior by adding or overriding this attributes like so :\n\n```\n{% vite_asset '<path to your asset>' foo=\"bar\" hello=\"world\" %}\n```\n\nthis line will add `foo=\"bar\"` and `hello=\"world\"` attributes.\n\nyou can also use context variables to fill attributes values :\n\n```\n{% vite_asset '<path to your asset>' foo=request.get.bar %}\n```\n\nif you want to overrides default attributes just add them like new attributes :\n\n```\n{% vite_asset '<path to your asset>' crossorigin=\"anonymous\" %}\n```\n\nalthough it's recommended to keep the default `type=\"module\"` attribute as vitejs build scripts as es6 modules.\n\n## vite legacy plugin\n\nif you want to consider legacy browsers that don't support es6 modules loading\nyou may use [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy).\ndjango vite supports this plugin. you must add stuff in complement of other script imports in the `<head>` tag.\n\njust before your `<body>` closing tag add this :\n\n```\n{% vite_legacy_polyfills %}\n```\n\nthis tag will do nothing in development, but in production it will loads the polyfills\ngenerated by vitejs.\n\nand so next to this tag you need to add another import to all the scripts you have\nin the head but the 'legacy' version generated by vitejs like so :\n\n```\n{% vite_legacy_asset '<path to your asset>' %}\n```\n\nlike the previous tag, this will do nothing in development but in production,\ndjango vite will add a script tag with a `nomodule` attribute for legacy browsers.\nthe path to your asset must contain de pattern `-legacy` in the file name (ex : `main-legacy.js`).\n\nthis tag accepts overriding and adding custom attributes like the default `vite_asset` tag.\n\n## multi-app configuration\n\nif you would like to use django-vite with multiple vite configurations you can specify them in your settings.\n\n```python\ndjango_vite = {\n  \"default\": {\n    \"dev_mode\": true,\n  },\n  \"external_app_1\": {\n    ...\n  },\n  \"external_app_2\": {\n    ...\n  }\n}\n```\n\nspecify the app in each django-tag tag that you use in your templates. if no app is provided, it will default to using the \"default\" app.\n\n```html\n{% vite_asset '<path to your asset>' %}\n{% vite_asset '<path to another asset>' app=\"external_app_1\" %}\n{% vite_asset '<path to a third asset>' app=\"external_app_2\" %}\n```\n\nyou can see an example project [here](https://github.com/niicck/django-vite-multi-app-example).\n\n## configuration variables\n\nyou can redefine these values for each app config in `django_vite` in `settings.py`.\n\n### dev_mode\n- **type**: `bool`\n- **default**: `false`\n- **legacy key**: `django_vite_dev_mode`\n\nindicates whether to serve assets via the vitejs development server or from compiled production assets.\n\nread more: [dev mode](#dev-mode)\n\n### dev_server_protocol\n- **type**: `str`\n- **default**: `\"http\"`\n- **legacy key**: `django_vite_dev_server_protocol`\n\nthe protocol used by the vitejs webserver.\n\n### dev_server_host\n- **type**: `str`\n- **default**: `\"localhost\"`\n- **legacy key**: `django_vite_dev_server_host`\n\nthe `server.host` in `vite.config.js` for the vitejs development server.\n\n### dev_server_port\n- **type**: `int`\n- **default**: `5173`\n- **legacy key**: `django_vite_dev_server_port`\n\nthe `server.port` in `vite.config.js` for the vitejs development server.\n\n### static_url_prefix\n- **type**: `str`\n- **default**: `\"\"`\n- **legacy key**: `django_vite_static_url_prefix`\n\nthe directory prefix for static files built by vitejs.\n\n- use it if you want to avoid conflicts with other static files in your project.\n- it's used in both dev mode and production mode.\n- for dev mode, you also need to add this prefix inside vite config's `base`.\n- for production mode, you may need to add this to vite config's `build.outdir`.\n\nexample:\n\n```python\n# settings.py\ndjango_vite_static_url_prefix = 'bundler'\nstaticfiles_dirs = (('bundler', '/srv/app/bundler/dist'),)\n```\n\n```javascript\n// vite.config.js\nexport default defineconfig({\n  base: '/static/bundler/',\n  ...\n})\n```\n\n### manifest_path\n- **type**: `str | path`\n- **default**: `path(settings.static_root) / static_url_prefix / \"manifest.json\"`\n- **legacy key**: `django_vite_manifest_path`\n\nthe absolute path, including the filename, to the vitejs manifest file located in `build.outdir`.\n\n### legacy_polyfills_motif\n- **type**: `str`\n- **default**: `\"legacy-polyfills\"`\n- **legacy key**: `django_vite_legacy_polyfills_motif`\n\nthe motif used to identify assets for polyfills in the `manifest.json`. this is only applicable if you are using [@vitejs/plugin-legacy](https://github.com/vitejs/vite/tree/main/packages/plugin-legacy).\n\n### ws_client_url\n- **type**: `str`\n- **default**: `\"@vite/client\"`\n- **legacy key**: `django_vite_ws_client_url`\n\nthe path to the hmr (hot module replacement) client used in the `vite_hmr_client` tag.\n\n### react_refresh_url\n- **type**: `str`\n- **default**: `\"@react-refresh\"\"`\n- **legacy key**: `django_vite_react_refresh_url`\n\nif you're using react, this will generate the javascript needed to support react hmr.\n\n## notes\n\n- in production mode, all generated paths are prefixed with the `static_url`\n  setting of django.\n\n### whitenoise\n\nif you are serving your static files with whitenoise, by default your files compiled by vite will not be considered immutable and a bad cache-control will be set. to fix this you will need to set a custom test like so:\n\n```python\nimport re\n\n# vite generates files with 8 hash digits\n# http://whitenoise.evans.io/en/stable/django.html#whitenoise_immutable_file_test\n\ndef immutable_file_test(path, url):\n    # match filename with 12 hex digits before the extension\n    # e.g. app.db8f2edc0c8a.js\n    return re.match(r\"^.+[\\.\\-][0-9a-f]{8,12}\\..+$\", url)\n\n\nwhitenoise_immutable_file_test = immutable_file_test\n```\n\n## examples\n\nfor an example of how to setup the project using the new multi-app configuration, please see this [multi-app example project](https://github.com/niicck/django-vite-multi-app-example).\n\nfor an example using the module-level legacy settings, please see this [example project here](https://github.com/mrbin99/django-vite-example).\n\n## thanks\n\nthanks to [evan you](https://github.com/yyx990803) for the vitejs library.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license, version 2.0",
  "name": "django-vite",
  "package_url": "https://pypi.org/project/django-vite/",
  "project_url": "https://pypi.org/project/django-vite/",
  "project_urls": {
    "Homepage": "https://github.com/MrBin99/django-vite"
  },
  "release_url": "https://pypi.org/project/django-vite/3.0.1/",
  "requires_dist": [
    "Django >=3.2",
    "black ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "integration of vite in a django project.",
  "version": "3.0.1",
  "releases": [],
  "developers": [
    "mrbin99"
  ],
  "kwds": "django_vite django_vite_dev_mode django_vite_manifest_path vite_legacy_asset django_vite_dev_server_protocol",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_django_vite",
  "homepage": "https://github.com/mrbin99/django-vite",
  "release_count": 19,
  "dependency_ids": [
    "pypi_black",
    "pypi_django"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "framework :: jupyter",
    "intended audience :: developers",
    "intended audience :: science/research",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "==========\ntasklogger\n==========\n\n.. image:: https://img.shields.io/pypi/v/tasklogger.svg\n    :target: https://pypi.org/project/tasklogger/\n    :alt: latest pypi version\n.. image:: https://anaconda.org/conda-forge/tasklogger/badges/version.svg\n    :target: https://anaconda.org/conda-forge/tasklogger/\n    :alt: latest conda version\n.. image:: https://api.travis-ci.com/scottgigante/tasklogger.svg?branch=master\n    :target: https://github.com/scottgigante/tasklogger/actions\n    :alt: github actions build\n.. image:: https://ci.appveyor.com/api/projects/status/qi79tqay73uslr0i/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/scottgigante/tasklogger\n    :alt: appveyor build\n.. image:: https://coveralls.io/repos/github/scottgigante/tasklogger/badge.svg?branch=master\n    :target: https://coveralls.io/github/scottgigante/tasklogger?branch=master\n    :alt: coverage status\n.. image:: https://img.shields.io/twitter/follow/scottgigante.svg?style=social&label=follow\n    :target: https://twitter.com/scottgigante\n    :alt: twitter\n.. image:: https://img.shields.io/github/stars/scottgigante/tasklogger.svg?style=social&label=stars\n    :target: https://github.com/scottgigante/tasklogger/\n    :alt: github stars\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style: black\n.. image:: https://img.shields.io/badge/style%20guide-openstack-eb1a32.svg\n    :target: https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide\n    :alt: style guide: openstack\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white\n    :target: https://github.com/pre-commit/pre-commit\n    :alt: pre-commit\n\nan extension to the core python logging library for logging the beginning and completion of tasks and subtasks.\n\ninstallation\n------------\n\ntasklogger is available on `pip`. install by running the following in a terminal::\n\n    pip install --user tasklogger\n\nalternatively, tasklogger can be installed using `conda <https://conda.io/docs/>`_ (most easily obtained via the `miniconda python distribution <https://conda.io/miniconda.html>`_)::\n\n    conda install -c conda-forge tasklogger\n\nusage examples\n--------------\n\nreceive timed updates mid-computation using ``tasklogger.log_start`` and ``tasklogger.log_complete``::\n\n    >>> import tasklogger\n    >>> import time\n    >>> tasklogger.log_start(\"supertask\")\n    calculating supertask...\n    >>> time.sleep(1)\n    >>> tasklogger.log_start(\"subtask\")\n      calculating subtask...\n    >>> time.sleep(1)\n    >>> tasklogger.log_complete(\"subtask\")\n      calculated subtask in 1.01 seconds.\n    >>> time.sleep(1)\n    >>> tasklogger.log_complete(\"supertask\")\n    calculated supertask in 3.02 seconds.\n\nsimplify logging syntax with ``tasklogger.log_task``::\n\n    >>> import tasklogger\n    >>> import time\n    >>> with tasklogger.log_task(\"supertask\"):\n    ...     time.sleep(1)\n    ...     with tasklogger.log_task(\"subtask\"):\n    ...        time.sleep(1)\n    ...     time.sleep(1)\n    calculating supertask...\n      calculating subtask...\n      calculated subtask in 1.01 seconds.\n    calculated supertask in 3.02 seconds.\n\nlog wall time, cpu time, or any other counter function with the class api::\n\n    >>> import tasklogger\n    >>> import time\n    >>> logger = tasklogger.tasklogger(name='cpu_logger', timer='cpu', min_runtime=0)\n    >>> with logger.log_task(\"supertask\"):\n    ...     time.sleep(1)\n    ...     with logger.log_task(\"subtask\"):\n    ...        _ = [[(i,j) for j in range(i)] for i in range(1000)]\n    ...     time.sleep(1)\n    calculating supertask...\n      calculating subtask...\n      calculated subtask in 0.09 seconds.\n    calculated supertask in 0.09 seconds.\n    >>> logger = tasklogger.tasklogger(name='nano_logger', timer=time.monotonic_ns)\n    >>> with logger.log_task(\"supertask\"):\n    ...     time.sleep(1)\n    ...     with logger.log_task(\"subtask\"):\n    ...        time.sleep(1)\n    ...     time.sleep(1)\n    calculating supertask...\n      calculating subtask...\n      calculated subtask in 1001083511.00 seconds.\n    calculated supertask in 3003702161.00 seconds.\n\nuse ``tasklogger`` for all your logging needs::\n\n    >>> tasklogger.log_info(\"log some stuff that doesn't need timing\")\n    log some stuff that doesn't need timing\n    >>> tasklogger.log_debug(\"log some stuff that normally isn't needed\")\n    >>> tasklogger.set_level(2)\n    set tasklogger logging to debug\n    >>> tasklogger.log_debug(\"log some stuff that normally isn't needed\")\n    log some stuff that normally isn't needed\n",
  "docs_url": null,
  "keywords": "big-data,tool-development,programming",
  "license": "gnu general public license version 2",
  "name": "tasklogger",
  "package_url": "https://pypi.org/project/tasklogger/",
  "project_url": "https://pypi.org/project/tasklogger/",
  "project_urls": {
    "Download": "https://github.com/scottgigante/tasklogger/archive/v1.2.0.tar.gz",
    "Homepage": "https://github.com/scottgigante/tasklogger"
  },
  "release_url": "https://pypi.org/project/tasklogger/1.2.0/",
  "requires_dist": [
    "Deprecated",
    "nose2 ; extra == 'test'",
    "numpy ; extra == 'test'",
    "coverage ; extra == 'test'",
    "coveralls ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "tasklogger",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "scott.gigante@yale.edu",
    "scott_gigante"
  ],
  "kwds": "tasklogger log_task miniconda tasks logger",
  "license_kwds": "gnu general public license version 2",
  "libtype": "pypi",
  "id": "pypi_tasklogger",
  "homepage": "https://github.com/scottgigante/tasklogger",
  "release_count": 13,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_deprecated",
    "pypi_nose2",
    "pypi_numpy"
  ]
}
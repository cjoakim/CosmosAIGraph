{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# bertscore\n[![made-with-python](https://img.shields.io/badge/made%20with-python-red.svg)](#python)\n[![arxiv](https://img.shields.io/badge/arxiv-1904.09675-b31b1b.svg)](https://arxiv.org/abs/1904.09675)\n[![pypi version bert-score](https://badge.fury.io/py/bert-score.svg)](https://pypi.python.org/pypi/bert-score/) [![downloads](https://pepy.tech/badge/bert-score)](https://pepy.tech/project/bert-score) [![downloads](https://pepy.tech/badge/bert-score/month)](https://pepy.tech/project/bert-score) [![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://opensource.org/licenses/mit) \n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) \n\n\nautomatic evaluation metric described in the paper [bertscore: evaluating text generation with bert](https://arxiv.org/abs/1904.09675) (iclr 2020). we now support about 130 models (see this [spreadsheet](https://docs.google.com/spreadsheets/d/1rkovpselb98nnh_eoc4a2byn8_201tmpodpnwu4w7xi/edit?usp=sharing) for their correlations with human evaluation). currently, the best model is `microsoft/deberta-xlarge-mnli`, please consider using it instead of the default `roberta-large` in order to have the best correlation with human evaluation.\n\n#### news:\n<!-- - features to appear in the next version (currently in the master branch): -->\n- updated to version 0.3.13\n  - fix bug with transformers version > 4.17.0 ([#148](https://github.com/tiiiger/bert_score/pull/148))\n- updated to version 0.3.12\n  - having `get_idf_dict` compatible with ddp ([#140](https://github.com/tiiiger/bert_score/pull/140))\n  - fix setup bug ([#138](https://github.com/tiiiger/bert_score/pull/138))\n- updated to version 0.3.11\n  - support 6 deberta v3 models\n  - support 3 byt5 models\n- updated to version 0.3.10\n  - support 8 simcse models\n  - fix the support of scibert (to be compatible with transformers >= 4.0.0)\n  - add scripts for reproducing some results in our paper (see this [folder](./reproduce))\n  - support fast tokenizers in huggingface transformers with `--use_fast_tokenizer`. notably, you will get different scores because of the difference in the tokenizer implementations ([#106](https://github.com/tiiiger/bert_score/issues/106)). \n  - fix non-zero recall problem for empty candidate strings ([#107](https://github.com/tiiiger/bert_score/issues/107)).\n  - add turkish bert supoort ([#108](https://github.com/tiiiger/bert_score/issues/108)).\n- updated to version 0.3.9\n  - support 3 bigbird models\n  - fix bugs for mbart and t5\n  - support 4 mt5 models as requested ([#93](https://github.com/tiiiger/bert_score/issues/93))\n- updated to version 0.3.8\n  - support 53 new pretrained models including bart, mbart, bort, deberta, t5, bertweet, mpnet, convbert, squeezebert, spanbert, pegasus, longformer, led, blendbot, etc. among them, deberta achives higher correlation with human scores than roberta (our default) on wmt16 dataset. the correlations are presented in this [google sheet](https://docs.google.com/spreadsheets/d/1rkovpselb98nnh_eoc4a2byn8_201tmpodpnwu4w7xi/edit?usp=sharing).\n  - please consider using `--model_type microsoft/deberta-xlarge-mnli` or `--model_type microsoft/deberta-large-mnli` (faster) if you want the scores to correlate better with human scores.\n  - add baseline files for deberta models.\n  - add example code to generate baseline files (please see the [details](get_rescale_baseline)).\n- updated to version 0.3.7\n  - being compatible with huggingface's transformers version >=4.0.0. thanks to public contributers ([#84](https://github.com/tiiiger/bert_score/pull/84), [#85](https://github.com/tiiiger/bert_score/issues/85), [#86](https://github.com/tiiiger/bert_score/pull/86)).\n- see [#22](https://github.com/tiiiger/bert_score/issues/22) if you want to replicate our experiments on the coco captioning dataset.\n\n\n- for people in china, downloading pre-trained weights can be very slow. we provide copies of a few models on baidu pan.\n  - [roberta-large](https://pan.baidu.com/s/1mtmghsz3ubn7vr_w-wyedq) password: dhe5\n  - [bert-base-chinese](https://pan.baidu.com/s/1thficxjwtdggscmskq5sva) password: jvk7\n  - [bert-base-multilingual-cased](https://pan.baidu.com/s/100sbjklmi7u4pgo_e0q7cq) password: yx3q\n- [huggingface's datasets](https://github.com/huggingface/datasets) library includes bertscore in their metric collection.\n\n<details><summary>previous updates</summary><p>\n\n- updated to version 0.3.6\n  - support custom baseline files [#74](https://github.com/tiiiger/bert_score/pull/74)\n  - the option `--rescale-with-baseline` is changed to `--rescale_with_baseline` so that it is consistent with other options.\n- updated to version 0.3.5\n  - being compatible with huggingface's transformers >=v3.0.0 and minor fixes ([#58](https://github.com/tiiiger/bert_score/pull/58), [#66](https://github.com/tiiiger/bert_score/pull/66), [#68](https://github.com/tiiiger/bert_score/pull/68))\n  - several improvements related to efficency ([#67](https://github.com/tiiiger/bert_score/pull/67), [#69](https://github.com/tiiiger/bert_score/pull/69))\n- updated to version 0.3.4\n  - compatible with transformers v2.11.0 now (#58)\n- updated to version 0.3.3\n  - fixing the bug with empty strings [issue #47](https://github.com/tiiiger/bert_score/issues/47).\n  - supporting 6 [electra](https://github.com/google-research/electra) models and 24 smaller [bert](https://github.com/google-research/bert) models.\n  - a new [google sheet](https://docs.google.com/spreadsheets/d/1rkovpselb98nnh_eoc4a2byn8_201tmpodpnwu4w7xi/edit?usp=sharing) for keeping the performance (i.e., pearson correlation with human judgment) of different models on wmt16 to-english.\n  - including the script for tuning the best number of layers of an english pre-trained model on wmt16 to-english data (see the [details](tune_layers)).\n- updated to version 0.3.2\n  - **bug fixed**: fixing the bug in v0.3.1 when having multiple reference sentences.\n  - supporting multiple reference sentences with our command line tool.\n- updated to version 0.3.1\n  - a new `bertscorer` object that caches the model to avoid re-loading it multiple times. please see our [jupyter notebook example](./example/demo.ipynb) for the usage.\n  - supporting multiple reference sentences for each example. the `score` function now can take a list of lists of strings as the references and return the score between the candidate sentence and its closest reference sentence.\n\n</p></details>\n\nplease see [release logs](https://github.com/tiiiger/bert_score/releases) for older updates.\n\n#### authors:\n* [tianyi zhang](https://scholar.google.com/citations?user=oi0hsa0aaaaj&hl=en)*\n* [varsha kishore](https://scholar.google.com/citations?user=b8ueyceaaaaj&authuser=2)*\n* [felix wu](https://sites.google.com/view/felixwu/home)*\n* [kilian q. weinberger](http://kilian.cs.cornell.edu/index.html)\n* [yoav artzi](https://yoavartzi.com/)\n\n*: equal contribution\n\n### overview\nbertscore leverages the pre-trained contextual embeddings from bert and matches\nwords in candidate and reference sentences by cosine similarity.\nit has been shown to correlate with human judgment on sentence-level and\nsystem-level evaluation.\nmoreover, bertscore computes precision, recall, and f1 measure, which can be\nuseful for evaluating different language generation tasks.\n\nfor an illustration, bertscore recall can be computed as\n![](./bert_score.png \"bertscore\")\n\nif you find this repo useful, please cite:\n```\n@inproceedings{bert-score,\n  title={bertscore: evaluating text generation with bert},\n  author={tianyi zhang* and varsha kishore* and felix wu* and kilian q. weinberger and yoav artzi},\n  booktitle={international conference on learning representations},\n  year={2020},\n  url={https://openreview.net/forum?id=skehucvfdr}\n}\n```\n\n### installation\n* python version >= 3.6\n* pytorch version >= 1.0.0\n\ninstall from pypi with pip by \n\n```sh\npip install bert-score\n```\ninstall latest unstable version from the master branch on github by:\n```\npip install git+https://github.com/tiiiger/bert_score\n```\n\ninstall it from the source by:\n```sh\ngit clone https://github.com/tiiiger/bert_score\ncd bert_score\npip install .\n```\nand you may test your installation by:\n```\npython -m unittest discover\n```\n\n### usage\n\n\n#### python function\n\non a high level, we provide a python function `bert_score.score` and a python object `bert_score.bertscorer`.\nthe function provides all the supported features while the scorer object caches the bert model to faciliate multiple evaluations.\ncheck our [demo](./example/demo.ipynb) to see how to use these two interfaces. \nplease refer to [`bert_score/score.py`](./bert_score/score.py) for implementation details.\n\nrunning bertscore can be computationally intensive (because it uses bert :p).\ntherefore, a gpu is usually necessary. if you don't have access to a gpu, you\ncan try our [demo on google colab](https://colab.research.google.com/drive/1kpl8y_anuuicxfjhxsrxcsc6-sdmnb_q)\n\n#### command line interface (cli)\nwe provide a command line interface (cli) of bertscore as well as a python module. \nfor the cli, you can use it as follows:\n1. to evaluate english text files:\n\nwe provide example inputs under `./example`.\n\n```sh\nbert-score -r example/refs.txt -c example/hyps.txt --lang en\n```\nyou will get the following output at the end:\n\nroberta-large_l17_no-idf_version=0.3.0(hug_trans=2.3.0) p: 0.957378 r: 0.961325 f1: 0.959333\n\nwhere \"roberta-large_l17_no-idf_version=0.3.0(hug_trans=2.3.0)\" is the hash code.\n\nstarting from version 0.3.0, we support rescaling the scores with baseline scores\n\n```sh\nbert-score -r example/refs.txt -c example/hyps.txt --lang en --rescale_with_baseline\n```\nyou will get:\n\nroberta-large_l17_no-idf_version=0.3.0(hug_trans=2.3.0)-rescaled p: 0.747044 r: 0.770484 f1: 0.759045 \n\nthis makes the range of the scores larger and more human-readable. please see this [post](./journal/rescale_baseline.md) for details.\n\nwhen having multiple reference sentences, please use\n```sh\nbert-score -r example/refs.txt example/refs2.txt -c example/hyps.txt --lang en\n```\nwhere the `-r` argument supports an arbitrary number of reference files. each reference file should have the same number of lines as your candidate/hypothesis file. the i-th line in each reference file corresponds to the i-th line in the candidate file.\n\n\n2. to evaluate text files in other languages:\n\nwe currently support the 104 languages in multilingual bert ([full list](https://github.com/google-research/bert/blob/master/multilingual.md#list-of-languages)).\n\nplease specify the two-letter abbreviation of the language. for instance, using `--lang zh` for chinese text. \n\nsee more options by `bert-score -h`.\n\n\n3. to load your own custom model:\nplease specify the path to the model and the number of layers to use by `--model` and `--num_layers`.\n```sh\nbert-score -r example/refs.txt -c example/hyps.txt --model path_to_my_bert --num_layers 9\n```\n\n\n4. to visualize matching scores:\n```sh\nbert-score-show --lang en -r \"there are two bananas on the table.\" -c \"on the table are two apples.\" -f out.png\n```\nthe figure will be saved to out.png.\n\n5. if you see the following message while using bertscore, please ignore it. this is expected.\n```\nsome weights of the model checkpoint at roberta-large were not used when initializing robertamodel: ['lm_head.decoder.weight', 'lm_head.layer_norm.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.bias', 'lm_head.dense.weight']\n- this is expected if you are initializing robertamodel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a bertforsequenceclassification model from a bertforpretraining model).\n- this is not expected if you are initializing robertamodel from the checkpoint of a model that you expect to be exactly identical (initializing a bertforsequenceclassification model from a bertforsequenceclassification model).\n```\n\n#### practical tips\n\n* report the hash code (e.g., `roberta-large_l17_no-idf_version=0.3.0(hug_trans=2.3.0)-rescaled`) in your paper so that people know what setting you use. this is inspired by [sacrebleu](https://github.com/mjpost/sacrebleu). changes in huggingface's transformers version may also affect the score (see [issue #46](https://github.com/tiiiger/bert_score/issues/46)).\n* unlike bert, roberta uses gpt2-style tokenizer which creates addition \" \" tokens when there are multiple spaces appearing together. it is recommended to remove addition spaces by `sent = re.sub(r' +', ' ', sent)` or `sent = re.sub(r'\\s+', ' ', sent)`.\n* using inverse document frequency (idf) on the reference\n  sentences to weigh word importance  may correlate better with human judgment.\n  however, when the set of reference sentences become too small, the idf score \n  would become inaccurate/invalid.\n  we now make it optional. to use idf,\n  please set `--idf` when using the cli tool or\n  `idf=true` when calling `bert_score.score` function.\n* when you are low on gpu memory, consider setting `batch_size` when calling\n  `bert_score.score` function.\n* to use a particular model please set `-m model_type` when using the cli tool\n  or `model_type=model_type` when calling `bert_score.score` function. \n* we tune layer to use based on wmt16 metric evaluation dataset. you may use a\n  different layer by setting `-l layer` or `num_layers=layer`. to tune the best layer for your custom model, please follow the instructions in [tune_layers](tune_layers) folder.\n* __limitation__: because bert, roberta, and xlm with learned positional embeddings are pre-trained on sentences with max length 512, bertscore is undefined between sentences longer than 510 (512 after adding \\[cls\\] and \\[sep\\] tokens). the sentences longer than this will be truncated. please consider using xlnet which can support much longer inputs.\n\n### default behavior\n\n#### default model\n| language  | model                            |\n|:---------:|:--------------------------------:|\n| en        | roberta-large                    |\n| en-sci    | allenai/scibert_scivocab_uncased |\n| zh        | bert-base-chinese                |\n| tr        | dbmdz/bert-base-turkish-cased    |\n| others    | bert-base-multilingual-cased     |\n\n#### default layers\nplease see this [google sheet](https://docs.google.com/spreadsheets/d/1rkovpselb98nnh_eoc4a2byn8_201tmpodpnwu4w7xi/edit?usp=sharing) for the supported models and their performance.\n\n### acknowledgement\nthis repo wouldn't be possible without the awesome\n[bert](https://github.com/google-research/bert), [fairseq](https://github.com/pytorch/fairseq), and [transformers](https://github.com/huggingface/transformers).\n\n\n",
  "docs_url": null,
  "keywords": "bert nlp deep learning google metric",
  "license": "mit",
  "name": "bert-score",
  "package_url": "https://pypi.org/project/bert-score/",
  "project_url": "https://pypi.org/project/bert-score/",
  "project_urls": {
    "Homepage": "https://github.com/Tiiiger/bert_score"
  },
  "release_url": "https://pypi.org/project/bert-score/0.3.13/",
  "requires_dist": [
    "torch (>=1.0.0)",
    "pandas (>=1.0.1)",
    "transformers (>=3.0.0)",
    "numpy",
    "requests",
    "tqdm (>=4.31.1)",
    "matplotlib",
    "packaging (>=20.9)"
  ],
  "requires_python": ">=3.6",
  "summary": "pytorch implementation of bert score",
  "version": "0.3.13",
  "releases": [],
  "developers": [
    "tianyi_zhang",
    "tzhang@asapp.com"
  ],
  "kwds": "bert_score bertforpretraining bertforsequenceclassification path_to_my_bert bert",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bert_score",
  "homepage": "https://github.com/tiiiger/bert_score",
  "release_count": 21,
  "dependency_ids": [
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_requests",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_transformers"
  ]
}
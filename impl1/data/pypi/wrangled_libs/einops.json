{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "\n<!--\n<a href='http://arogozhnikov.github.io/images/einops/einops_video.mp4' >\n<div align=\"center\">\n  <img src=\"http://arogozhnikov.github.io/images/einops/einops_video.gif\" alt=\"einops package examples\" />\n  <br>\n  <small><a href='http://arogozhnikov.github.io/images/einops/einops_video.mp4'>this video in high quality (mp4)</a></small>\n  <br><br>\n</div>\n</a>\n-->\n\n<!-- this link magically rendered as video, unfortunately not in docs -->\n\nhttps://user-images.githubusercontent.com/6318811/177030658-66f0eb5d-e136-44d8-99c9-86ae298ead5b.mp4\n\n\n\n\n# einops \n[![run tests](https://github.com/arogozhnikov/einops/actions/workflows/run_tests.yml/badge.svg)](https://github.com/arogozhnikov/einops/actions/workflows/run_tests.yml)\n[![pypi version](https://badge.fury.io/py/einops.svg)](https://badge.fury.io/py/einops)\n[![documentation](https://img.shields.io/badge/documentation-link-blue.svg)](https://einops.rocks/)\n![supported python versions](https://raw.githubusercontent.com/arogozhnikov/einops/master/docs/resources/python_badge.svg)\n\n\nflexible and powerful tensor operations for readable and reliable code. <br />\nsupports numpy, pytorch, tensorflow, jax, and [others](#supported-frameworks).\n\n## recent updates:\n\n- 0.7.0: no-hassle `torch.compile`, support of [array api standard](https://data-apis.org/array-api/latest/api_specification/index.html) and more\n- 10'000\ud83c\udf89: github reports that more than 10k project use einops\n- see how to use einops with [torch.compile](https://github.com/arogozhnikov/einops/wiki/using-torch.compile-with-einops)\n- einops 0.6.1: paddle backend added\n- einops 0.6 introduces [packing and unpacking](https://github.com/arogozhnikov/einops/blob/master/docs/4-pack-and-unpack.ipynb)\n- einops 0.5: einsum is now a part of einops\n- [einops paper](https://openreview.net/pdf?id=oapksvm2bcj) is accepted for oral presentation at iclr 2022 (yes, it worth reading).\n  talk recordings are [available](https://iclr.cc/virtual/2022/oral/6603)\n\n\n<details markdown=\"1\">\n<summary>previous updates</summary>\n- flax and oneflow backend added\n- torch.jit.script is supported for pytorch layers\n- powerful einmix added to einops. [einmix tutorial notebook](https://github.com/arogozhnikov/einops/blob/master/docs/3-einmix-layer.ipynb) \n</details>\n\n<!--<div align=\"center\">\n  <img src=\"http://arogozhnikov.github.io/images/einops/einops_logo_350x350.png\" \n  alt=\"einops package logo\" width=\"250\" height=\"250\" />\n  <br><br>\n</div> -->\n\n## tweets \n\n> in case you need convincing arguments for setting aside time to learn about einsum and einops...\n[tim rockt\u00e4schel, fair](https://twitter.com/_rockt/status/1230818967205425152)\n\n> writing better code with pytorch and einops \ud83d\udc4c\n[andrej karpathy, ai at tesla](https://twitter.com/karpathy/status/1290826075916779520)\n\n> slowly but surely, einops is seeping in to every nook and cranny of my code. if you find yourself shuffling around bazillion dimensional tensors, this might change your life\n[nasim rahaman, mila (montreal)](https://twitter.com/nasim_rahaman/status/1216022614755463169)\n\n[more testimonials](https://einops.rocks/pages/testimonials/)\n\n<!--\n## recordings of talk at iclr 2022\n\n<a href='https://iclr.cc/virtual/2022/oral/6603'>\n<img width=\"922\" alt=\"screen shot 2022-07-03 at 1 00 15 am\" src=\"https://user-images.githubusercontent.com/6318811/177030789-89d349bf-ef75-4af5-a71f-609896d1c8d9.png\">\n</a>\n\nwatch [a 15-minute talk](https://iclr.cc/virtual/2022/oral/6603) focused on main problems of standard tensor manipulation methods, and how einops improves this process.\n-->\n\n## contents\n\n- [installation](#installation)\n- [documentation](https://einops.rocks/)\n- [tutorial](#tutorials) \n- [api micro-reference](#api)\n- [why using einops](#why-using-einops-notation)\n- [supported frameworks](#supported-frameworks)\n- [citing](#citing)\n- [repository](https://github.com/arogozhnikov/einops) and [discussions](https://github.com/arogozhnikov/einops/discussions)\n\n## installation  <a name=\"installation\"></a>\n\nplain and simple:\n```bash\npip install einops\n```\n\n<!--\n`einops` has no mandatory dependencies (code examples also require jupyter, pillow + backends). \nto obtain the latest github version \n\n```bash\npip install https://github.com/arogozhnikov/einops/archive/master.zip\n```\n-->\n\n## tutorials <a name=\"tutorials\"></a>\n\ntutorials are the most convenient way to see `einops` in action\n\n- part 1: [einops fundamentals](https://github.com/arogozhnikov/einops/blob/master/docs/1-einops-basics.ipynb) \n- part 2: [einops for deep learning](https://github.com/arogozhnikov/einops/blob/master/docs/2-einops-for-deep-learning.ipynb)\n- part 3: [packing and unpacking](https://github.com/arogozhnikov/einops/blob/master/docs/4-pack-and-unpack.ipynb)\n- part 4: [improve pytorch code with einops](http://einops.rocks/pytorch-examples.html)   \n\nkapil sachdeva recorded a small [intro to einops](https://www.youtube.com/watch?v=xgy75pjsqzo).\n\n## api <a name=\"api\"></a>\n\n`einops` has a minimalistic yet powerful api.\n\nthree core operations provided ([einops tutorial](https://github.com/arogozhnikov/einops/blob/master/docs/) \nshows those cover stacking, reshape, transposition, squeeze/unsqueeze, repeat, tile, concatenate, view and numerous reductions)\n\n```python\nfrom einops import rearrange, reduce, repeat\n# rearrange elements according to the pattern\noutput_tensor = rearrange(input_tensor, 't b c -> b c t')\n# combine rearrangement and reduction\noutput_tensor = reduce(input_tensor, 'b c (h h2) (w w2) -> b h w c', 'mean', h2=2, w2=2)\n# copy along a new axis\noutput_tensor = repeat(input_tensor, 'h w -> h w c', c=3)\n```\n\nlater additions to the family are `pack` and `unpack` functions (better than stack/split/concatenate):\n\n```python\nfrom einops import pack, unpack\n# pack and unpack allow reversibly 'packing' multiple tensors into one.\n# packed tensors may be of different dimensionality:\npacked,  ps = pack([class_token_bc, image_tokens_bhwc, text_tokens_btc], 'b * c')\nclass_emb_bc, image_emb_bhwc, text_emb_btc = unpack(transformer(packed), ps, 'b * c')\n```\n\nfinally, einops provides einsum with a support of multi-lettered names: \n\n```python\nfrom einops import einsum, pack, unpack\n# einsum is like ... einsum, generic and flexible dot-product \n# but 1) axes can be multi-lettered  2) pattern goes last 3) works with multiple frameworks\nc = einsum(a, b, 'b t1 head c, b t2 head c -> b head t1 t2')\n```\n\n### einmix\n\n`einmix` is a generic linear layer, perfect for mlp mixers and similar architectures.\n\n### layers\n\neinops provides layers (`einops` keeps a separate version for each framework) that reflect corresponding functions\n\n```python\nfrom einops.layers.torch      import rearrange, reduce\nfrom einops.layers.tensorflow import rearrange, reduce\nfrom einops.layers.flax       import rearrange, reduce\nfrom einops.layers.paddle     import rearrange, reduce\nfrom einops.layers.keras      import rearrange, reduce\nfrom einops.layers.chainer    import rearrange, reduce\n```\n\n<details markdown=\"1\">\n<summary>example of using layers within a pytorch model</summary>\nexample given for pytorch, but code in other frameworks is almost identical\n\n```python \nfrom torch.nn import sequential, conv2d, maxpool2d, linear, relu\nfrom einops.layers.torch import rearrange\n\nmodel = sequential(\n    ...,\n    conv2d(6, 16, kernel_size=5),\n    maxpool2d(kernel_size=2),\n    # flattening without need to write forward\n    rearrange('b c h w -> b (c h w)'),  \n    linear(16*5*5, 120), \n    relu(),\n    linear(120, 10), \n)\n```\n\nno more flatten needed! \n\nadditionally, torch users will benefit from layers as those are script-able and compile-able.\n</details>\n\n\n\n\n## naming <a name=\"naming\"></a>\n\n`einops` stands for einstein-inspired notation for operations \n(though \"einstein operations\" is more attractive and easier to remember).\n\nnotation was loosely inspired by einstein summation (in particular by `numpy.einsum` operation).\n\n## why use `einops` notation?! <a name=\"why-using-einops-notation\"></a>\n\n\n### semantic information (being verbose in expectations)\n\n```python\ny = x.view(x.shape[0], -1)\ny = rearrange(x, 'b c h w -> b (c h w)')\n```\nwhile these two lines are doing the same job in *some* context,\nthe second one provides information about the input and output.\nin other words, `einops` focuses on interface: *what is the input and output*, not *how* the output is computed.\n\nthe next operation looks similar:\n\n```python\ny = rearrange(x, 'time c h w -> time (c h w)')\n```\nbut it gives the reader a hint: \nthis is not an independent batch of images we are processing, \nbut rather a sequence (video). \n\nsemantic information makes the code easier to read and maintain. \n\n### convenient checks\n\nreconsider the same example:\n\n```python\ny = x.view(x.shape[0], -1) # x: (batch, 256, 19, 19)\ny = rearrange(x, 'b c h w -> b (c h w)')\n```\nthe second line checks that the input has four dimensions, \nbut you can also specify particular dimensions. \nthat's opposed to just writing comments about shapes since comments don't prevent mistakes, not tested, and without code review tend to be outdated   \n```python\ny = x.view(x.shape[0], -1) # x: (batch, 256, 19, 19)\ny = rearrange(x, 'b c h w -> b (c h w)', c=256, h=19, w=19)\n```\n\n### result is strictly determined\n\nbelow we have at least two ways to define the depth-to-space operation\n```python\n# depth-to-space\nrearrange(x, 'b c (h h2) (w w2) -> b (c h2 w2) h w', h2=2, w2=2)\nrearrange(x, 'b c (h h2) (w w2) -> b (h2 w2 c) h w', h2=2, w2=2)\n```\nthere are at least four more ways to do it. which one is used by the framework?\n\nthese details are ignored, since *usually* it makes no difference, \nbut it can make a big difference (e.g. if you use grouped convolutions in the next stage), \nand you'd like to specify this in your code.\n\n\n### uniformity\n\n```python\nreduce(x, 'b c (x dx) -> b c x', 'max', dx=2)\nreduce(x, 'b c (x dx) (y dy) -> b c x y', 'max', dx=2, dy=3)\nreduce(x, 'b c (x dx) (y dy) (z dz) -> b c x y z', 'max', dx=2, dy=3, dz=4)\n```\nthese examples demonstrated that we don't use separate operations for 1d/2d/3d pooling, \nthose are all defined in a uniform way. \n\nspace-to-depth and depth-to space are defined in many frameworks but how about width-to-height? here you go:\n\n```python\nrearrange(x, 'b c h (w w2) -> b c (h w2) w', w2=2)\n```\n\n### framework independent behavior\n\neven simple functions are defined differently by different frameworks\n\n```python\ny = x.flatten() # or flatten(x)\n```\n\nsuppose `x`'s shape was `(3, 4, 5)`, then `y` has shape ...\n\n- numpy, pytorch, cupy, chainer: `(60,)`\n- keras, tensorflow.layers, gluon: `(3, 20)`\n\n`einops` works the same way in all frameworks.\n\n### independence of framework terminology\n\nexample: `tile` vs `repeat` causes lots of confusion. to copy image along width:\n```python\nnp.tile(image, (1, 2))    # in numpy\nimage.repeat(1, 2)        # pytorch's repeat ~ numpy's tile\n```\n\nwith einops you don't need to decipher which axis was repeated:\n```python\nrepeat(image, 'h w -> h (tile w)', tile=2)  # in numpy\nrepeat(image, 'h w -> h (tile w)', tile=2)  # in pytorch\nrepeat(image, 'h w -> h (tile w)', tile=2)  # in tf\nrepeat(image, 'h w -> h (tile w)', tile=2)  # in jax\nrepeat(image, 'h w -> h (tile w)', tile=2)  # in cupy\n... (etc.)\n```\n\n[testimonials](https://einops.rocks/pages/testimonials/) provide users' perspective on the same question. \n\n## supported frameworks <a name=\"supported-frameworks\"></a>\n\neinops works with ...\n\n- [numpy](http://www.numpy.org/)\n- [pytorch](https://pytorch.org/)\n- [tensorflow](https://www.tensorflow.org/)\n- [jax](https://github.com/google/jax)\n- [cupy](https://cupy.chainer.org/)\n- [chainer](https://chainer.org/)\n- [tf.keras](https://www.tensorflow.org/guide/keras)\n- [oneflow](https://github.com/oneflow-inc/oneflow) (experimental)\n- [flax](https://github.com/google/flax) (experimental)\n- [paddle](https://github.com/paddlepaddle/paddle) (experimental)\n\nadditionally, starting from einops 0.7.0 einops can be used with any framework that supports [python array api standard](https://data-apis.org/array-api/latest/api_specification/index.html)\n\n## citing einops <a name=\"citing\"></a>\n\nplease use the following bibtex record\n\n```text\n@inproceedings{\n    rogozhnikov2022einops,\n    title={einops: clear and reliable tensor manipulations with einstein-like notation},\n    author={alex rogozhnikov},\n    booktitle={international conference on learning representations},\n    year={2022},\n    url={https://openreview.net/forum?id=oapksvm2bcj}\n}\n```\n\n\n## supported python versions\n\n`einops` works with python 3.8 or later.\n",
  "docs_url": null,
  "keywords": "deep learning,einops,machine learning,neural networks,scientific computations,tensor manipulation",
  "license": "mit",
  "name": "einops",
  "package_url": "https://pypi.org/project/einops/",
  "project_url": "https://pypi.org/project/einops/",
  "project_urls": {
    "Homepage": "https://github.com/arogozhnikov/einops"
  },
  "release_url": "https://pypi.org/project/einops/0.7.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "a new flavour of deep learning operations",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "alex_rogozhnikov"
  ],
  "kwds": "einops_video mp4 einops einmix einops_logo_350x350",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_einops",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": []
}
{
  "classifiers": [
    "framework :: pydantic",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# openapi-pydantic\n\n[![pypi](https://img.shields.io/pypi/v/openapi-pydantic)](https://pypi.org/project/openapi-pydantic/)\n[![pypi - license](https://img.shields.io/pypi/l/openapi-pydantic)](https://github.com/mike-oakley/openapi-pydantic/blob/main/license)\n\nopenapi schema implemented in [pydantic](https://github.com/samuelcolvin/pydantic). both pydantic 1.8+ and 2.x are supported.\n\nthe naming of the classes follows the schema in \n[openapi specification](https://github.com/oai/openapi-specification/blob/master/versions/3.1.0.md#schema).\n\n> this library is forked from [openapi schema pydantic](https://github.com/kuimono/openapi-schema-pydantic)  (at version [1.2.4](https://github.com/kuimono/openapi-schema-pydantic/releases/tag/v1.2.4)) which is no longer actively maintained.\n\n## installation\n\n`pip install openapi-pydantic`\n\n## try me\n\n```python\nfrom openapi_pydantic import openapi, info, pathitem, operation, response\n\n# construct openapi by pydantic objects\nopen_api = openapi(\n    info=info(\n        title=\"my own api\",\n        version=\"v0.0.1\",\n    ),\n    paths={\n        \"/ping\": pathitem(\n            get=operation(\n                responses={\n                    \"200\": response(\n                        description=\"pong\"\n                    )\n                }\n            )\n        )\n    },\n)\n# note: for pydantic 1.x, replace `model_dump_json` with `json`\nprint(open_api.model_dump_json(by_alias=true, exclude_none=true, indent=2))\n```\n\nresult:\n\n```json\n{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"my own api\",\n    \"version\": \"v0.0.1\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"/\"\n    }\n  ],\n  \"paths\": {\n    \"/ping\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"pong\"\n          }\n        },\n        \"deprecated\": false\n      }\n    }\n  }\n}\n```\n\n## take advantage of pydantic\n\npydantic is a great tool. it allows you to use object / dict / mixed data for input.\n\nthe following examples give the same openapi result as above:\n\n```python\nfrom openapi_pydantic import parse_obj, openapi, pathitem, response\n\n# construct openapi from dict, inferring the correct schema version\nopen_api = parse_obj({\n    \"openapi\": \"3.1.0\",\n    \"info\": {\"title\": \"my own api\", \"version\": \"v0.0.1\"},\n    \"paths\": {\n        \"/ping\": {\n            \"get\": {\"responses\": {\"200\": {\"description\": \"pong\"}}}\n        }\n    },\n})\n\n\n# construct openapi v3.1.0 schema from dict\n# note: for pydantic 1.x, replace `model_validate` with `parse_obj`\nopen_api = openapi.model_validate({\n    \"info\": {\"title\": \"my own api\", \"version\": \"v0.0.1\"},\n    \"paths\": {\n        \"/ping\": {\n            \"get\": {\"responses\": {\"200\": {\"description\": \"pong\"}}}\n        }\n    },\n})\n\n# construct openapi with mix of dict/object\n# note: for pydantic 1.x, replace `model_validate` with `parse_obj`\nopen_api = openapi.model_validate({\n    \"info\": {\"title\": \"my own api\", \"version\": \"v0.0.1\"},\n    \"paths\": {\n        \"/ping\": pathitem(\n            get={\"responses\": {\"200\": response(description=\"pong\")}}\n        )\n    },\n})\n```\n\n## use pydantic classes as schema\n\n- the [schema object](https://github.com/oai/openapi-specification/blob/master/versions/3.0.3.md#schemaobject)\n  in openapi has definitions and tweaks in json schema, which are hard to comprehend and define a good data class\n- pydantic already has a good way to [create json schema](https://pydantic-docs.helpmanual.io/usage/schema/).\n  let's not reinvent the wheel.\n\nthe approach to deal with this:\n\n1. use `pydanticschema` objects to represent the `schema` in `openapi` object\n2. invoke `construct_open_api_with_schema_class` to resolve the json schemas and references\n\n```python\nfrom pydantic import basemodel, field\n\nfrom openapi_pydantic import openapi\nfrom openapi_pydantic.util import pydanticschema, construct_open_api_with_schema_class\n\ndef construct_base_open_api() -> openapi:\n    # note: for pydantic 1.x, replace `model_validate` with `parse_obj`\n    return openapi.model_validate({\n        \"info\": {\"title\": \"my own api\", \"version\": \"v0.0.1\"},\n        \"paths\": {\n            \"/ping\": {\n                \"post\": {\n                    \"requestbody\": {\"content\": {\"application/json\": {\n                        \"schema\": pydanticschema(schema_class=pingrequest)\n                    }}},\n                    \"responses\": {\"200\": {\n                        \"description\": \"pong\",\n                        \"content\": {\"application/json\": {\n                            \"schema\": pydanticschema(schema_class=pingresponse)\n                        }},\n                    }},\n                }\n            }\n        },\n    })\n\nclass pingrequest(basemodel):\n    \"\"\"ping request\"\"\"\n    req_foo: str = field(description=\"foo value of the request\")\n    req_bar: str = field(description=\"bar value of the request\")\n\nclass pingresponse(basemodel):\n    \"\"\"ping response\"\"\"\n    resp_foo: str = field(description=\"foo value of the response\")\n    resp_bar: str = field(description=\"bar value of the response\")\n\nopen_api = construct_base_open_api()\nopen_api = construct_open_api_with_schema_class(open_api)\n\n# print the result openapi.json\n# note: for pydantic 1.x, replace `model_dump_json` with `json`\nprint(open_api.model_dump_json(by_alias=true, exclude_none=true, indent=2))\n```\n\nresult:\n\n```json\n{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"my own api\",\n    \"version\": \"v0.0.1\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"/\"\n    }\n  ],\n  \"paths\": {\n    \"/ping\": {\n      \"post\": {\n        \"requestbody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/pingrequest\"\n              }\n            }\n          },\n          \"required\": false\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"pong\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/pingresponse\"\n                }\n              }\n            }\n          }\n        },\n        \"deprecated\": false\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"pingrequest\": {\n        \"title\": \"pingrequest\",\n        \"required\": [\n          \"req_foo\",\n          \"req_bar\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"req_foo\": {\n            \"title\": \"req foo\",\n            \"type\": \"string\",\n            \"description\": \"foo value of the request\"\n          },\n          \"req_bar\": {\n            \"title\": \"req bar\",\n            \"type\": \"string\",\n            \"description\": \"bar value of the request\"\n          }\n        },\n        \"description\": \"ping request\"\n      },\n      \"pingresponse\": {\n        \"title\": \"pingresponse\",\n        \"required\": [\n          \"resp_foo\",\n          \"resp_bar\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"resp_foo\": {\n            \"title\": \"resp foo\",\n            \"type\": \"string\",\n            \"description\": \"foo value of the response\"\n          },\n          \"resp_bar\": {\n            \"title\": \"resp bar\",\n            \"type\": \"string\",\n            \"description\": \"bar value of the response\"\n          }\n        },\n        \"description\": \"ping response\"\n      }\n    }\n  }\n}\n```\n\n## notes\n\n### use of openapi.model_dump() / openapi.model_dump_json() / openapi.json() / openapi.dict()\n\nwhen using `openapi.model_dump()` / `openapi.model_dump_json()` / `openapi.json()` / `openapi.dict()` functions,\nthe arguments `by_alias=true, exclude_none=true` have to be in place.\notherwise the resulting json will not fit the openapi standard.\n\n```python\n# ok (pydantic 2)\nopen_api.model_dump_json(by_alias=true, exclude_none=true, indent=2)\n# ok (pydantic 1)\nopen_api.json(by_alias=true, exclude_none=true, indent=2)\n\n# not good\nopen_api.model_dump_json(indent=2)\nopen_api.json(indent=2)\n```\n\nmore info about field aliases:\n\n| openapi version | field alias info |\n| --------------- | ---------------- |\n| 3.1.0 | [here](https://github.com/mike-oakley/openapi-pydantic/blob/main/openapi_pydantic/v3/v3_1_0/readme.md#alias) |\n| 3.0.3 | [here](https://github.com/mike-oakley/openapi-pydantic/blob/main/openapi_pydantic/v3/v3_0_3/readme.md#alias) |\n\n### non-pydantic schema types\n\nsome schema types are not implemented as pydantic classes.\nplease refer to the following for more info:\n\n| openapi version | non-pydantic schema type info |\n| --------------- | ----------------------------- |\n| 3.1.0 | [here](https://github.com/mike-oakley/openapi-pydantic/blob/main/openapi_pydantic/v3/v3_1_0/readme.md#non-pydantic-schema-types) |\n| 3.0.3 | [here](https://github.com/mike-oakley/openapi-pydantic/blob/main/openapi_pydantic/v3/v3_0_3/readme.md#non-pydantic-schema-types) |\n\n### use openapi 3.0.3 instead of 3.1.0\n\nsome ui renderings (e.g. swagger) still do not support openapi 3.1.0.\nthe old 3.0.3 version is available by importing from different paths:\n\n```python\nfrom openapi_pydantic.v3.v3_0_3 import openapi, ...\nfrom openapi_pydantic.v3.v3_0_3.util import pydanticschema, construct_open_api_with_schema_class\n```\n\n### pydantic version compatibility\n\ncompatibility with both major versions of pydantic (1.8+ and 2.*) is mostly achieved using a module called `compat.py`. it detects the installed version of pydantic and exports version-specific symbols for use by the rest of the package. it also provides all symbols necessary for type checking. the `compat.py` module is not intended to be imported by other packages, but other packages may find it helpful as an example of how to span major versions of pydantic.\n\n## credits\n\nthis library is based from the original implementation by kuimono of [openapi schema pydantic](https://github.com/kuimono/openapi-schema-pydantic) which is no longer actively maintained.\n\n## license\n\n[mit license](https://github.com/mike-oakley/openapi-pydantic/blob/main/license)\n\n",
  "docs_url": null,
  "keywords": "openapi,schema,parser,pydantic,validation",
  "license": "mit",
  "name": "openapi-pydantic",
  "package_url": "https://pypi.org/project/openapi-pydantic/",
  "project_url": "https://pypi.org/project/openapi-pydantic/",
  "project_urls": {
    "Homepage": "https://github.com/mike-oakley/openapi-pydantic",
    "Repository": "https://github.com/mike-oakley/openapi-pydantic"
  },
  "release_url": "https://pypi.org/project/openapi-pydantic/0.3.2/",
  "requires_dist": [
    "pydantic (>=1.8)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "pydantic openapi schema implementation",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "mike-oakley@users.noreply.github.com",
    "mike_oakley"
  ],
  "kwds": "openapi_pydantic openapi pydantic construct_open_api_with_schema_class open_api",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_openapi_pydantic",
  "homepage": "https://github.com/mike-oakley/openapi-pydantic",
  "release_count": 8,
  "dependency_ids": [
    "pypi_pydantic"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "**this package is in maintenance-only mode.** new code should use the\n`importlib.metadata module <https://docs.python.org/3/library/importlib.metadata.html>`_\nin the python standard library to find and load entry points.\n\nentry points are a way for python packages to advertise objects with some\ncommon interface. the most common examples are ``console_scripts`` entry points,\nwhich define shell commands by identifying a python function to run.\n\n*groups* of entry points, such as ``console_scripts``, point to objects with\nsimilar interfaces. an application might use a group to find its plugins, or\nmultiple groups if it has different kinds of plugins.\n\nthe **entrypoints** module contains functions to find and load entry points.\nyou can install it from pypi with ``pip install entrypoints``.\n\nto advertise entry points when distributing a package, see\n`entry_points in the python packaging user guide\n<https://packaging.python.org/guides/distributing-packages-using-setuptools/#entry-points>`_.\n\nthe ``pkg_resources`` module distributed with ``setuptools`` provides a way to\ndiscover entrypoints as well, but it contains other functionality unrelated to\nentrypoint discovery, and it does a lot of work at import time.  merely\n*importing* ``pkg_resources`` causes it to scan the files of all installed\npackages. thus, in environments where a large number of packages are installed,\nimporting ``pkg_resources`` can be very slow (several seconds).\n\nby contrast, ``entrypoints`` is focused solely on entrypoint discovery and it\nis faster. importing ``entrypoints`` does not scan anything, and getting a\ngiven entrypoint group performs a more focused scan.\n\nwhen there are multiple versions of the same distribution in different\ndirectories on ``sys.path``, ``entrypoints`` follows the rule that the first\none wins.  in most cases, this follows the logic of imports.  similarly,\nentrypoints relies on ``pip`` to ensure that only one ``.dist-info`` or\n``.egg-info`` directory exists for each installed package.  there is no reliable\nway to pick which of several `.dist-info` folders accurately relates to the\nimportable modules.",
  "docs_url": "https://pythonhosted.org/entrypoints/",
  "keywords": "",
  "license": "",
  "name": "entrypoints",
  "package_url": "https://pypi.org/project/entrypoints/",
  "project_url": "https://pypi.org/project/entrypoints/",
  "project_urls": {
    "Documentation": "https://entrypoints.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/takluyver/entrypoints"
  },
  "release_url": "https://pypi.org/project/entrypoints/0.4/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "discover and load entry points from installed packages.",
  "version": "0.4",
  "releases": [],
  "developers": [
    "thomas@kluyver.me.uk",
    "thomas_kluyver"
  ],
  "kwds": "importlib packages importing python imports",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_entrypoints",
  "homepage": "https://github.com/takluyver/entrypoints",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "\n# manifest\nhow to make prompt programming with foundation models a little easier.\n\n\n# table of contents\n- [install](#install)\n- [getting started](#getting-started)\n- [manifest](#manifest-components)\n- [other models types](#other-models)\n    - [local huggingface models](#local-huggingface-models)\n    - [chat models](#chat-models)\n    - [embedding models](#embedding-models)\n- [road map](#road-map)\n- [development](#development)\n- [cite](#cite)\n\n\n# install\ninstall:\n```bash\npip install manifest-ml\n```\n\ninstall with diffusion support:\n```bash\npip install manifest-ml[diffusers]\n```\n\ninstall with huggingface local model support:\n```bash\npip install manifest-ml[api]\n```\n\ndev install:\n```bash\ngit clone git@github.com:hazyresearch/manifest.git\ncd manifest\nmake dev\n```\n\n# getting started\nrunning is simple to get started. if using openai, set `export openai_api_key=<openaikey>` (or pass key in through variable `client_connection`) then run\n\n```python\nfrom manifest import manifest\n\n# start a manifest session to openai - default `engine=text-davinci-003`\nmanifest = manifest(\n    client_name = \"openai\",\n)\nmanifest.run(\"why is the grass green?\")\n```\n\n## examples\nwe have example notebook and python scripts located at [examples](examples). these show how to use different models, model types (i.e. text, diffusers, or embedding models), and async running.\n\n# manifest components\nmanifest is meant to be a very light weight package to help with prompt design and iteration. three key design decisions of manifest are\n\n* all models are behind apis\n* supports caching of model inputs/outputs for iteration, reproducibility, and cost saving\n* unified api to support generate, score, and embed\n\n## models\nmanifest provides model clients for [openai](https://openai.com/), [ai21](https://studio.ai21.com/), [cohere](https://cohere.ai/), [together](https://together.xyz/), and huggingface (see [below](#huggingface-models) for how to use locally hosted huggingface models). you can toggle between the models by changing `client_name` and `client_connection`. for example, if a huggingface model is loaded locally, run\n```python\nmanifest = manifest(\n    client_name = \"huggingface\",\n    client_connection = \"http://127.0.0.1:5000\",\n)\n```\nif you want to use cohere, run\n```python\nmanifest = manifest(\n    client_name = \"cohere\",\n    client_connection = <cohere_api_key>,\n)\n```\nyou can also just set `export cohere_api_key=<cohere_api_key>` and not use `client_connection`.\n\n\nyou can see the model details and possible model inputs to `run()` via\n```python\nprint(manifest.client_pool.get_current_client().get_model_params())\nprint(manifest.client_pool.get_current_client().get_model_inputs())\n```\n\n## global cache\nwe support having queries and results stored in a global cache that can be shared across users. we treat inputs and outputs as key value pairs and support sqlite or redis backends. to start with global caching using sqlite, run\n\n```python\nmanifest = manifest(\n    client_name = \"openai\",\n    cache_name = \"sqlite\",\n    cache_connection = \"mycache.sqlite\",\n)\n```\nthe cache will be saved in `mycache.sqlite`.\n\nwe also support redis backend.\n```python\nmanifest = manifest(\n    client_name = \"openai\",\n    cache_name = \"redis\",\n    cache_connection = \"localhost:6379\"\n)\n```\nas a hint, if you want to get redis running, see the `docker run` command below under development.\n\n## running queries\nonce you have a session open, you can write and develop prompts.\n\n```python\nresult = manifest.run(\"hello, my name is laurel\")\n```\n\nyou can also run over multiple examples if supported by the client.\n```python\nresults = manifest.run([\"where are the cats?\", \"where are the dogs?\"])\n```\n\nwe support async queries as well via\n```python\nimport asyncio\nresults = asyncio.run(manifest.arun_batch([\"where are the cats?\", \"where are the dogs?\"]))\n```\n\nif something doesn't go right, you can also ask to get a raw manifest response.\n```python\nresult_object = manifest.run([\"where are the cats?\", \"where are the dogs?\"], return_response=true)\nprint(result_object.get_request_obj())\nprint(result_object.is_cached())\nprint(result_object.get_response_obj())\n```\n\nby default, we do not truncate results based on a stop token. you can change this by either passing a new stop token to a manifest session or to a `run`.\n```python\nresult = manifest.run(prompt, \"laurel\", stop_token=\"and\")\n```\n\nif you want to change default parameters to a model, we pass those as `kwargs` to the client.\n```python\nresult = manifest.run(prompt, \"laurel\", max_tokens=50)\n```\n\n## streaming queries\nmanifest also supports streaming the model response back, assuming it's supported by the underlying client. when calling `run`, pass `stream=true` to get a streaming iterator in response.\n\n```python\nresult_iterator = manifest.run(\"tell me a story. once upon a time\", max_tokens=100, stream=true)\nfor res_text in result_iterator:\n    print(res_text)\n```\nstreaming responses are only supported for single string queries (not batch mode) for text completion models.\n\n## model pools\nmanifest supports querying multiple models with different schedulers. this is very much a work in progress effort, but manifest will round robin select (or randomly select) the clients you want. you can use the same client multiple times with different connection strings (e.g. different api keys), or you can mix and match. the only requirement is that all clients are the same request type. i.e. you can't have a pool of generation models and embedding models.\n\nto query between a local model and openai,\n```python\nfrom manifest.connections.client_pool import clientconnection\nfrom manifest import manifest\n\nclient_connection1 = clientconnection(\n    client_name=\"huggingface\",\n    client_connection=\"http://127.0.0.1:5000\",\n)\nclient_connection2 = clientconnection(client_name=\"openai\", engine=\"text-ada-001\")\nmanifest = manifest(\n    client_pool=[client_connection1, client_connection2],\n    cache_name=\"sqlite\",\n    client_connection=sqlite_cache,\n)\nmanifest.run(...)\n```\n\nthe speed benefit comes in with async batched runs. when calling `arun_batch` with a list of prompts, manifest supports a `chunk_size` param. this will break the prompts into `chunk_size` chunks to spread across the client pool. by default `chunk_size` is `-1` which means only one client will get all the prompts to run asynchronously. you must set `chunk_size > 1` to distribute across the pool. there is a further `batch_size` param which control the individual client `batch_size` to send to the model.\n\n```python\nresponses = asyncio.run(manifest.arun_batch(prompts, max_tokens=30, chunk_size=20))\n```\n\n# other models\n\n## local huggingface models\nto use a huggingface generative model, in `manifest/api` we have a flask application that hosts the models for you.\n\nin a separate terminal or tmux/screen session, to load 6b parameters models, run\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path eleutherai/gpt-j-6b \\\n    --device 0\n```\nyou will see the flask session start and output a url `http://127.0.0.1:5000`. pass this in to manifest. if you want to use a different port, set the `flask_port` environment variable.\n\n```python\nmanifest = manifest(\n    client_name = \"huggingface\",\n    client_connection = \"http://127.0.0.1:5000\",\n)\n```\n\nif you have a custom model you trained, pass the model path to `--model_name_or_path`.\n\nto help load larger models, we also support using `parallelize()` from hf, [accelerate](https://huggingface.co/docs/accelerate/index), [bitsandbytes](https://github.com/timdettmers/bitsandbytes), and [deepspeed](https://github.com/microsoft/deepspeed). you will need to install these packages first via `pip install manifest-ml[api]`. we list the commands to load larger models below.\n\n* t0pp\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path bigscience/t0pp \\\n    --use_hf_parallelize\n```\n\n* neox 20b (requires at least 60gb of gpu memory)\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path eleutherai/gpt-neox-20b \\\n    --use_accelerate_multigpu \\\n    --percent_max_gpu_mem_reduction 0.75\n```\n* bloom 175b (requires at least 240gb of gpu memory)\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path bigscience/bloom \\\n    --use_bitsandbytes \\\n    --percent_max_gpu_mem_reduction 0.85\n```\n\n## chat models\nmanifest has specific support for executing against chat models in the more standard \"system\" / \"user\" dialogue. to pass in a dialogue history to manifest, use the `run` command with a list of dictionary inputs with `role` and `content` keys using an associated chat model such as `openaichat`.\n\n```python\nmanifest = manifest(client_name=\"openaichat\")\ndialogue = [\n    {\"role\": \"system\", \"content\": \"you are a helpful assistant who also responds in rhymes\"},\n    {\"role\": \"user\", \"content\": \"what is the date?\"},\n]\nres = manifest.run(dialogue, max_tokens=100)\n```\n\n## embedding models\nmanifest also supports getting embeddings from models and available apis. we do this all through changing the `client_name` argument. you still use `run` and `abatch_run`.\n\nto use openai's embedding models, simply run\n```python\nmanifest = manifest(client_name=\"openaiembedding\")\nembedding_as_np = manifest.run(\"get me an embedding for a bunny\")\n```\n\nas explained above, you can load local huggingface models that give you embeddings, too. if you want to use a standard generative model, load the model as above use use `client_name=\"huggingfaceembedding\"`. if you want to use a standard embedding model, like those from sentencetransformers, load your local model via\n```bash\npython3 -m manifest.api.app \\\n    --model_type sentence_transformers \\\n    --model_name_or_path all-mpnet-base-v2 \\\n    --device 0\n```\n\n# road map\nhere's what's coming up next\n- [ ] clients\n  - [ ] huggingface hub\n  - [x] azure openai\n  - [x] google vertex\n  - [ ] anthropic\n  - [x] streaming support completions\n  - [ ] streaming support chat models\n- [ ] data types\n  - [ ] diffusion models\n- [x] orchestration\n  - [x] connection pools\n- [ ] local inference\n  - [ ] flexgen\n\n# development\nbefore submitting a pr, run\n```bash\nexport redis_port=\"6379\"  # or whatever port local redis is running for those tests\ncd <redis_path>\ndocker run -d -p 127.0.0.1:${redis_port}:6379 -v `pwd`:`pwd` -w `pwd` --name manifest_redis_test redis\nmake test\n```\n\n# cite\nplease cite manifest if you used it for any publications. thanks!!\n```\n@misc{orr2022manifest,\n  author = {orr, laurel},\n  title = {manifest},\n  year = {2022},\n  publisher = {github},\n  howpublished = {\\url{https://github.com/hazyresearch/manifest}},\n}\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "manifest-ml",
  "package_url": "https://pypi.org/project/manifest-ml/",
  "project_url": "https://pypi.org/project/manifest-ml/",
  "project_urls": {
    "Homepage": "https://github.com/HazyResearch/manifest"
  },
  "release_url": "https://pypi.org/project/manifest-ml/0.1.8/",
  "requires_dist": [
    "numpy (>=1.20.0)",
    "pydantic (>=1.9.0)",
    "redis (>=4.3.1)",
    "requests (>=2.27.1)",
    "aiohttp (>=3.8.0)",
    "sqlitedict (>=2.0.0)",
    "tenacity (>=8.2.0)",
    "tiktoken (>=0.3.0)",
    "xxhash (>=3.0.0)",
    "pytest-cov (>=3.0.0) ; extra == 'all'",
    "mypy (>=0.950) ; extra == 'all'",
    "sentence-transformers (>=2.2.0) ; extra == 'all'",
    "nbsphinx (>=0.8.0) ; extra == 'all'",
    "types-python-dateutil (>=2.8.16) ; extra == 'all'",
    "uvicorn (>=0.18.0) ; extra == 'all'",
    "black (>=22.3.0) ; extra == 'all'",
    "flake8-docstrings (>=1.6.0) ; extra == 'all'",
    "twine ; extra == 'all'",
    "python-dotenv (>=0.20.0) ; extra == 'all'",
    "transformers (<4.31.0,>=4.29.0) ; extra == 'all'",
    "Flask (>=2.1.2) ; extra == 'all'",
    "types-redis (>=4.2.6) ; extra == 'all'",
    "flake8 (>=4.0.0) ; extra == 'all'",
    "sphinx-autobuild ; extra == 'all'",
    "types-protobuf (>=3.19.21) ; extra == 'all'",
    "sqlalchemy ; extra == 'all'",
    "types-xxhash (>=3.0.0) ; extra == 'all'",
    "diffusers (>=0.6.0) ; extra == 'all'",
    "isort (>=5.9.3) ; extra == 'all'",
    "sphinx-rtd-theme (>=0.5.1) ; extra == 'all'",
    "types-requests (>=2.27.29) ; extra == 'all'",
    "pg8000 ; extra == 'all'",
    "pillow (>=9.0.0) ; extra == 'all'",
    "types-pillow (>=9.0.0) ; extra == 'all'",
    "tokenizers (>=0.13.3) ; extra == 'all'",
    "accelerate (>=0.10.0) ; extra == 'all'",
    "types-PyYAML (>=6.0.7) ; extra == 'all'",
    "docformatter (>=1.4) ; extra == 'all'",
    "torch (>=1.8.0) ; extra == 'all'",
    "pep8-naming (>=0.12.1) ; extra == 'all'",
    "pre-commit (>=2.14.0) ; extra == 'all'",
    "recommonmark (>=0.7.1) ; extra == 'all'",
    "fastapi (>=0.70.0) ; extra == 'all'",
    "cloud-sql-python-connector[pg8000] (>=1.0.0) ; extra == 'all'",
    "deepspeed (>=0.7.0) ; extra == 'all'",
    "types-setuptools (>=57.4.17) ; extra == 'all'",
    "autopep8 (>=1.6.0) ; extra == 'all'",
    "pytest (>=7.0.0) ; extra == 'all'",
    "accelerate (>=0.10.0) ; extra == 'api'",
    "deepspeed (>=0.7.0) ; extra == 'api'",
    "diffusers (>=0.6.0) ; extra == 'api'",
    "Flask (>=2.1.2) ; extra == 'api'",
    "sentence-transformers (>=2.2.0) ; extra == 'api'",
    "torch (>=1.8.0) ; extra == 'api'",
    "transformers (<4.31.0,>=4.29.0) ; extra == 'api'",
    "tokenizers (>=0.13.3) ; extra == 'api'",
    "fastapi (>=0.70.0) ; extra == 'app'",
    "uvicorn (>=0.18.0) ; extra == 'app'",
    "autopep8 (>=1.6.0) ; extra == 'dev'",
    "black (>=22.3.0) ; extra == 'dev'",
    "isort (>=5.9.3) ; extra == 'dev'",
    "flake8 (>=4.0.0) ; extra == 'dev'",
    "flake8-docstrings (>=1.6.0) ; extra == 'dev'",
    "mypy (>=0.950) ; extra == 'dev'",
    "pep8-naming (>=0.12.1) ; extra == 'dev'",
    "docformatter (>=1.4) ; extra == 'dev'",
    "pytest (>=7.0.0) ; extra == 'dev'",
    "pytest-cov (>=3.0.0) ; extra == 'dev'",
    "python-dotenv (>=0.20.0) ; extra == 'dev'",
    "sphinx-rtd-theme (>=0.5.1) ; extra == 'dev'",
    "nbsphinx (>=0.8.0) ; extra == 'dev'",
    "recommonmark (>=0.7.1) ; extra == 'dev'",
    "pre-commit (>=2.14.0) ; extra == 'dev'",
    "types-redis (>=4.2.6) ; extra == 'dev'",
    "types-requests (>=2.27.29) ; extra == 'dev'",
    "types-PyYAML (>=6.0.7) ; extra == 'dev'",
    "types-protobuf (>=3.19.21) ; extra == 'dev'",
    "types-python-dateutil (>=2.8.16) ; extra == 'dev'",
    "types-setuptools (>=57.4.17) ; extra == 'dev'",
    "types-pillow (>=9.0.0) ; extra == 'dev'",
    "types-xxhash (>=3.0.0) ; extra == 'dev'",
    "sphinx-autobuild ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "pillow (>=9.0.0) ; extra == 'diffusers'",
    "pg8000 ; extra == 'gcp'",
    "cloud-sql-python-connector[pg8000] (>=1.0.0) ; extra == 'gcp'",
    "sqlalchemy ; extra == 'gcp'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "manifest for prompting foundation models.",
  "version": "0.1.8",
  "releases": [],
  "developers": [
    "laurel.orr@numbersstation.ai",
    "laurel_orr"
  ],
  "kwds": "pip model_name_or_path manifest_redis_test manifest git",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_manifest_ml",
  "homepage": "https://github.com/hazyresearch/manifest",
  "release_count": 11,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_aiohttp",
    "pypi_autopep8",
    "pypi_black",
    "pypi_cloud_sql_python_connector",
    "pypi_deepspeed",
    "pypi_diffusers",
    "pypi_docformatter",
    "pypi_fastapi",
    "pypi_flake8",
    "pypi_flake8_docstrings",
    "pypi_flask",
    "pypi_isort",
    "pypi_mypy",
    "pypi_nbsphinx",
    "pypi_numpy",
    "pypi_pep8_naming",
    "pypi_pg8000",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_python_dotenv",
    "pypi_recommonmark",
    "pypi_redis",
    "pypi_requests",
    "pypi_sentence_transformers",
    "pypi_sphinx_autobuild",
    "pypi_sphinx_rtd_theme",
    "pypi_sqlalchemy",
    "pypi_sqlitedict",
    "pypi_tenacity",
    "pypi_tiktoken",
    "pypi_tokenizers",
    "pypi_torch",
    "pypi_transformers",
    "pypi_twine",
    "pypi_types_pillow",
    "pypi_types_protobuf",
    "pypi_types_python_dateutil",
    "pypi_types_pyyaml",
    "pypi_types_redis",
    "pypi_types_requests",
    "pypi_types_setuptools",
    "pypi_types_xxhash",
    "pypi_uvicorn",
    "pypi_xxhash"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "assemblyai python sdk\n<img src=\"https://github.com/assemblyai/assemblyai-python-sdk/blob/master/assemblyai.png?raw=true\" width=\"500\"/>\n\n---\n\n[![ci passing](https://github.com/assemblyai/assemblyai-python-sdk/actions/workflows/test.yml/badge.svg)](https://github.com/assemblyai/assemblyai-python-sdk/actions/workflows/test.yml)\n[![github license](https://img.shields.io/github/license/assemblyai/assemblyai-python-sdk)](https://github.com/assemblyai/assemblyai-python-sdk/blob/master/license)\n[![pypi version](https://badge.fury.io/py/assemblyai.svg)](https://badge.fury.io/py/assemblyai)\n[![pypi python versions](https://img.shields.io/pypi/pyversions/assemblyai)](https://pypi.python.org/pypi/assemblyai/)\n![pypi - wheel](https://img.shields.io/pypi/wheel/assemblyai)\n[![assemblyai twitter](https://img.shields.io/twitter/follow/assemblyai?label=%40assemblyai&style=social)](https://twitter.com/assemblyai)\n[![assemblyai youtube](https://img.shields.io/youtube/channel/subscribers/uctatfzmf-8ekiwasxm4ts0a)](https://www.youtube.com/@assemblyai)\n[![discord](https://img.shields.io/discord/875120158014853141?logo=discord&label=discord&link=https%3a%2f%2fdiscord.com%2fchannels%2f875120158014853141&style=social)\n](https://assemblyai.com/discord)\n\n# assemblyai's python sdk\n\n> _build with ai models that can transcribe and understand audio_\n\nwith a single api call, get access to ai models built on the latest ai breakthroughs to transcribe and understand audio and speech data securely at large scale.\n\n# overview\n\n- [assemblyai's python sdk](#assemblyais-python-sdk)\n- [overview](#overview)\n- [documentation](#documentation)\n- [quick start](#quick-start)\n  - [installation](#installation)\n  - [examples](#examples)\n    - [**core examples**](#core-examples)\n    - [**lemur examples**](#lemur-examples)\n    - [**audio intelligence examples**](#audio-intelligence-examples)\n    - [**real-time examples**](#real-time-examples)\n  - [playgrounds](#playgrounds)\n- [advanced](#advanced)\n  - [how the sdk handles default configurations](#how-the-sdk-handles-default-configurations)\n    - [defining defaults](#defining-defaults)\n    - [overriding defaults](#overriding-defaults)\n  - [synchronous vs asynchronous](#synchronous-vs-asynchronous)\n  - [polling intervals](#polling-intervals)\n  - [retrieving existing transcripts](#retrieving-existing-transcripts)\n    - [retrieving a single transcript](#retrieving-a-single-transcript)\n    - [retrieving multiple transcripts as a group](#retrieving-multiple-transcripts-as-a-group)\n    - [retrieving transcripts asynchronously](#retrieving-transcripts-asynchronously)\n\n# documentation\n\nvisit our [assemblyai api documentation](https://www.assemblyai.com/docs) to get an overview of our models!\n\n# quick start\n\n## installation\n\n```bash\npip install -u assemblyai\n```\n\n## examples\n\nbefore starting, you need to set the api key. if you don't have one yet, [**sign up for one**](https://www.assemblyai.com/dashboard/signup)!\n\n```python\nimport assemblyai as aai\n\n# set the api key\naai.settings.api_key = f\"{assemblyai_api_key}\"\n```\n\n---\n\n### **core examples**\n\n<details>\n  <summary>transcribe a local audio file</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"./my-local-audio-file.wav\")\n\nprint(transcript.text)\n```\n\n</details>\n\n<details>\n  <summary>transcribe an url</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\")\n\nprint(transcript.text)\n```\n\n</details>\n\n<details>\n  <summary>export subtitles of an audio file</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\")\n\n# in srt format\nprint(transcript.export_subtitles_srt())\n\n# in vtt format\nprint(transcript.export_subtitles_vtt())\n```\n\n</details>\n\n<details>\n  <summary>list all sentences and paragraphs</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\")\n\nsentences = transcript.get_sentences()\nfor sentence in sentences:\n  print(sentence.text)\n\nparagraphs = transcript.get_paragraphs()\nfor paragraph in paragraphs:\n  print(paragraph.text)\n```\n\n</details>\n\n<details>\n  <summary>search for words in a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\")\n\nmatches = transcript.word_search([\"price\", \"product\"])\n\nfor match in matches:\n  print(f\"found '{match.text}' {match.count} times in the transcript\")\n```\n\n</details>\n\n<details>\n  <summary>add custom spellings on a transcript</summary>\n\n```python\nimport assemblyai as aai\n\nconfig = aai.transcriptionconfig()\nconfig.set_custom_spelling(\n  {\n    \"kubernetes\": [\"k8s\"],\n    \"sql\": [\"sequel\"],\n  }\n)\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\", config)\n\nprint(transcript.text)\n```\n\n</details>\n\n---\n\n### **lemur examples**\n\n<details>\n  <summary>use lemur to summarize multiple transcripts</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript_group = transcriber.transcribe_group(\n    [\n        \"https://example.org/customer1.mp3\",\n        \"https://example.org/customer2.mp3\",\n    ],\n)\n\nresult = transcript_group.lemur.summarize(\n  context=\"customers asking for cars\",\n  answer_format=\"tldr\"\n)\n\nprint(result.response)\n```\n\n</details>\n\n<details>\n  <summary>use lemur to ask questions on a single transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/customer.mp3\")\n\n# ask some questions\nquestions = [\n    aai.lemurquestion(question=\"what car was the customer interested in?\"),\n    aai.lemurquestion(question=\"what price range is the customer looking for?\"),\n]\n\nresult = transcript.lemur.question(questions)\n\nfor q in result.response:\n    print(f\"question: {q.question}\")\n    print(f\"answer: {q.answer}\")\n```\n\n</details>\n\n<details>\n  <summary>use lemur to ask for action items from a single transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/customer.mp3\")\n\nresult = transcript.lemur.action_items(\n    context=\"customers asking for help with resolving their problem\",\n    answer_format=\"three bullet points\",\n)\n\nprint(result.response)\n```\n\n\n</details>\n\n<details>\n  <summary>use lemur to ask anything with a custom prompt</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/customer.mp3\")\n\nresult = transcript.lemur.task(\n  \"you are a helpful coach. provide an analysis of the transcript \"\n  \"and offer areas to improve with exact quotes. include no preamble. \"\n  \"start with an overall summary then get into the examples with feedback.\",\n)\n\nprint(result.response)\n```\n\n</details>\n\n\n<details>\n  <summary>use lemur to with input text</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\nconfig = aai.transcriptionconfig(\n  speaker_labels=true,\n)\ntranscript = transcriber.transcribe(\"https://example.org/customer.mp3\", config=config)\n\n# example converting speaker label utterances into lemur input text\ntext = \"\"\n\nfor utt in transcript.utterances:\n    text += f\"speaker {utt.speaker}:\\n{utt.text}\\n\"\n\nresult = aai.lemur().task(\n  \"you are a helpful coach. provide an analysis of the transcript \"\n  \"and offer areas to improve with exact quotes. include no preamble. \"\n  \"start with an overall summary then get into the examples with feedback.\",\n  input_text=text\n)\n\nprint(result.response)\n```\n\n</details>\n\n<details>\n  <summary>delete data previously sent to lemur</summary>\n\n```python\nimport assemblyai as aai\n\n# create a transcript and a corresponding lemur request that may contain senstive information.\ntranscriber = aai.transcriber()\ntranscript_group = transcriber.transcribe_group(\n  [\n    \"https://example.org/customer1.mp3\",\n  ],\n)\n\nresult = transcript_group.lemur.summarize(\n  context=\"customers providing sensitive, personally identifiable information\",\n  answer_format=\"tldr\"\n)\n\n# get the request id from the lemur response\nrequest_id = result.request_id\n\n# now we can delete the data about this request\ndeletion_result = aai.lemur.purge_request_data(request_id)\nprint(deletion_result)\n```\n\n</details>\n\n---\n\n### **audio intelligence examples**\n\n<details>\n  <summary>pii redact a transcript</summary>\n\n```python\nimport assemblyai as aai\n\nconfig = aai.transcriptionconfig()\nconfig.set_redact_pii(\n  # what should be redacted\n  policies=[\n      aai.piiredactionpolicy.credit_card_number,\n      aai.piiredactionpolicy.email_address,\n      aai.piiredactionpolicy.location,\n      aai.piiredactionpolicy.person_name,\n      aai.piiredactionpolicy.phone_number,\n  ],\n  # how it should be redacted\n  substitution=aai.piisubstitutionpolicy.hash,\n)\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\"https://example.org/audio.mp3\", config)\n```\n\nto request a copy of the original audio file with the redacted information \"beeped\" out, set `redact_pii_audio=true` in the config.\nonce the `transcript` object is returned, you can access the url of the redacted audio file with `get_redacted_audio_url`, or save the redacted audio directly to disk with `save_redacted_audio`.\n\n```python\nimport assemblyai as aai\n\ntranscript = aai.transcriber().transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(\n    redact_pii=true,\n    redact_pii_policies=[aai.piiredactionpolicy.person_name],\n    redact_pii_audio=true\n  )\n)\n\nredacted_audio_url = transcript.get_redacted_audio_url()\ntranscript.save_redacted_audio(\"redacted_audio.mp3\")\n```\n\n[read more about pii redaction here.](https://www.assemblyai.com/docs/models/pii_redaction)\n\n</details>\n<details>\n  <summary>summarize the content of a transcript over time</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(auto_chapters=true)\n)\n\nfor chapter in transcript.chapters:\n  print(f\"summary: {chapter.summary}\")  # a one paragraph summary of the content spoken during this timeframe\n  print(f\"start: {chapter.start}, end: {chapter.end}\")  # timestamps (in milliseconds) of the chapter\n  print(f\"healine: {chapter.headline}\")  # a single sentence summary of the content spoken during this timeframe\n  print(f\"gist: {chapter.gist}\")  # an ultra-short summary, just a few words, of the content spoken during this timeframe\n```\n\n[read more about auto chapters here.](https://www.assemblyai.com/docs/models/auto_chapters)\n\n</details>\n\n<details>\n  <summary>summarize the content of a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(summarization=true)\n)\n\nprint(transcript.summary)\n```\n\nby default, the summarization model will be `informative` and the summarization type will be `bullets`. [read more about summarization models and types here](https://www.assemblyai.com/docs/models/summarization#types-and-models).\n\nto change the model and/or type, pass additional parameters to the `transcriptionconfig`:\n\n```python\nconfig=aai.transcriptionconfig(\n  summarization=true,\n  summary_model=aai.summarizationmodel.catchy,\n  summary_type=aai.summarizationtype.headline\n)\n```\n\n</details>\n<details>\n  <summary>detect sensitive content in a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(content_safety=true)\n)\n\n\n# get the parts of the transcript which were flagged as sensitive\nfor result in transcript.content_safety.results:\n  print(result.text)  # sensitive text snippet\n  print(result.timestamp.start)\n  print(result.timestamp.end)\n\n  for label in result.labels:\n    print(label.label)  # content safety category\n    print(label.confidence) # model's confidence that the text is in this category\n    print(label.severity) # severity of the text in relation to the category\n\n# get the confidence of the most common labels in relation to the entire audio file\nfor label, confidence in transcript.content_safety.summary.items():\n  print(f\"{confidence * 100}% confident that the audio contains {label}\")\n\n# get the overall severity of the most common labels in relation to the entire audio file\nfor label, severity_confidence in transcript.content_safety.severity_score_summary.items():\n  print(f\"{severity_confidence.low * 100}% confident that the audio contains low-severity {label}\")\n  print(f\"{severity_confidence.medium * 100}% confident that the audio contains mid-severity {label}\")\n  print(f\"{severity_confidence.high * 100}% confident that the audio contains high-severity {label}\")\n\n```\n\n[read more about the content safety categories.](https://www.assemblyai.com/docs/models/content_moderation#all-labels-supported-by-the-model)\n\nby default, the content safety model will only include labels with a confidence greater than 0.5 (50%). to change this, pass `content_safety_confidence` (as an integer percentage between 25 and 100, inclusive) to the `transcriptionconfig`:\n\n```python\nconfig=aai.transcriptionconfig(\n  content_safety=true,\n  content_safety_confidence=80,  # only include labels with a confidence greater than 80%\n)\n```\n\n</details>\n<details>\n  <summary>analyze the sentiment of sentences in a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(sentiment_analysis=true)\n)\n\nfor sentiment_result in transcript.sentiment_analysis:\n  print(sentiment_result.text)\n  print(sentiment_result.sentiment)  # positive, neutral, or negative\n  print(sentiment_result.confidence)\n  print(f\"timestamp: {sentiment_result.start} - {sentiment_result.end}\")\n```\n\nif `speaker_labels` is also enabled, then each sentiment analysis result will also include a `speaker` field.\n\n```python\n# ...\n\nconfig = aai.transcriptionconfig(sentiment_analysis=true, speaker_labels=true)\n\n# ...\n\nfor sentiment_result in transcript.sentiment_analysis:\n  print(sentiment_result.speaker)\n```\n\n[read more about sentiment analysis here.](https://www.assemblyai.com/docs/models/sentiment_analysis)\n\n</details>\n<details>\n  <summary>identify entities in a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(entity_detection=true)\n)\n\nfor entity in transcript.entities:\n  print(entity.text) # i.e. \"dan gilbert\"\n  print(entity.entity_type) # i.e. entitytype.person\n  print(f\"timestamp: {entity.start} - {entity.end}\")\n```\n\n[read more about entity detection here.](https://www.assemblyai.com/docs/models/entity_detection)\n\n</details>\n<details>\n  <summary>detect topics in a transcript (iab classification)</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(iab_categories=true)\n)\n\n# get the parts of the transcript that were tagged with topics\nfor result in transcript.iab_categories.results:\n  print(result.text)\n  print(f\"timestamp: {result.timestamp.start} - {result.timestamp.end}\")\n  for label in result.labels:\n    print(label.label)  # topic\n    print(label.relevance)  # how relevant the label is for the portion of text\n\n# get a summary of all topics in the transcript\nfor label, relevance in transcript.iab_categories.summary.items():\n  print(f\"audio is {relevance * 100}% relevant to {label}\")\n```\n\n[read more about iab classification here.](https://www.assemblyai.com/docs/models/iab_classification)\n\n</details>\n<details>\n  <summary>identify important words and phrases in a transcript</summary>\n\n```python\nimport assemblyai as aai\n\ntranscriber = aai.transcriber()\ntranscript = transcriber.transcribe(\n  \"https://example.org/audio.mp3\",\n  config=aai.transcriptionconfig(auto_highlights=true)\n)\n\nfor result in transcript.auto_highlights.results:\n  print(result.text) # the important phrase\n  print(result.rank) # relevancy of the phrase\n  print(result.count) # number of instances of the phrase\n  for timestamp in result.timestamps:\n    print(f\"timestamp: {timestamp.start} - {timestamp.end}\")\n\n```\n\n[read more about auto highlights here.](https://www.assemblyai.com/docs/models/key_phrases)\n\n</details>\n\n---\n\n### **real-time examples**\n\n[read more about our real-time service.](https://www.assemblyai.com/docs/guides/real-time_streaming_transcription)\n\n<details>\n  <summary>stream your microphone in real-time</summary>\n\n```python\nimport assemblyai as aai\n\ndef on_open(session_opened: aai.realtimesessionopened):\n  \"this function is called when the connection has been established.\"\n\n  print(\"session id:\", session_opened.session_id)\n\ndef on_data(transcript: aai.realtimetranscript):\n  \"this function is called when a new transcript has been received.\"\n\n  if not transcript.text:\n    return\n\n  if isinstance(transcript, aai.realtimefinaltranscript):\n    print(transcript.text, end=\"\\r\\n\")\n  else:\n    print(transcript.text, end=\"\\r\")\n\ndef on_error(error: aai.realtimeerror):\n  \"this function is called when the connection has been closed.\"\n\n  print(\"an error occured:\", error)\n\ndef on_close():\n  \"this function is called when the connection has been closed.\"\n\n  print(\"closing session\")\n\n\n# create the real-time transcriber\ntranscriber = aai.realtimetranscriber(\n  on_data=on_data,\n  on_error=on_error,\n  sample_rate=44_100,\n  on_open=on_open, # optional\n  on_close=on_close, # optional\n)\n\n# start the connection\ntranscriber.connect()\n\n# open a microphone stream\nmicrophone_stream = aai.extras.microphonestream()\n\n# press ctrl+c to abort\ntranscriber.stream(microphone_stream)\n\ntranscriber.close()\n```\n\n</details>\n\n<details>\n  <summary>transcribe a local audio file in real-time</summary>\n\n```python\nimport assemblyai as aai\n\n\ndef on_data(transcript: aai.realtimetranscript):\n  \"this function is called when a new transcript has been received.\"\n\n  if not transcript.text:\n    return\n\n  if isinstance(transcript, aai.realtimefinaltranscript):\n    print(transcript.text, end=\"\\r\\n\")\n  else:\n    print(transcript.text, end=\"\\r\")\n\ndef on_error(error: aai.realtimeerror):\n  \"this function is called when the connection has been closed.\"\n\n  print(\"an error occured:\", error)\n\n\n# create the real-time transcriber\ntranscriber = aai.realtimetranscriber(\n  on_data=on_data,\n  on_error=on_error,\n  sample_rate=44_100,\n)\n\n# start the connection\ntranscriber.connect()\n\n# only wav/pcm16 single channel supported for now\nfile_stream = aai.extras.stream_file(\n  filepath=\"audio.wav\",\n  sample_rate=44_100,\n)\n\ntranscriber.stream(file_stream)\n\ntranscriber.close()\n```\n\n</details>\n\n---\n\n## playgrounds\n\nvisit one of our playgrounds:\n\n- [lemur playground](https://www.assemblyai.com/playground/v2/source)\n- [transcription playground](https://www.assemblyai.com/playground)\n\n# advanced\n\n## how the sdk handles default configurations\n\n### defining defaults\n\nwhen no `transcriptionconfig` is being passed to the `transcriber` or its methods, it will use a default instance of a `transcriptionconfig`.\n\nif you would like to re-use the same `transcriptionconfig` for all your transcriptions,\nyou can set it on the `transcriber` directly:\n\n```python\nconfig = aai.transcriptionconfig(punctuate=false, format_text=false)\n\ntranscriber = aai.transcriber(config=config)\n\n# will use the same config for all `.transcribe*(...)` operations\ntranscriber.transcribe(\"https://example.org/audio.wav\")\n```\n\n### overriding defaults\n\nyou can override the default configuration later via the `.config` property of the `transcriber`:\n\n```python\ntranscriber = aai.transcriber()\n\n# override the `transcriber`'s config with a new config\ntranscriber.config = aai.transcriptionconfig(punctuate=false, format_text=false)\n```\n\nin case you want to override the `transcriber`'s configuration for a specific operation with a different one, you can do so via the `config` parameter of a `.transcribe*(...)` method:\n\n```python\nconfig = aai.transcriptionconfig(punctuate=false, format_text=false)\n# set a default configuration\ntranscriber = aai.transcriber(config=config)\n\ntranscriber.transcribe(\n    \"https://example.com/audio.mp3\",\n    # overrides the above configuration on the `transcriber` with the following\n    config=aai.transcriptionconfig(dual_channel=true, disfluencies=true)\n)\n```\n\n## synchronous vs asynchronous\n\ncurrently, the sdk provides two ways to transcribe audio files.\n\nthe synchronous approach halts the application's flow until the transcription has been completed.\n\nthe asynchronous approach allows the application to continue running while the transcription is being processed. the caller receives a [`concurrent.futures.future`](https://docs.python.org/3/library/concurrent.futures.html) object which can be used to check the status of the transcription at a later time.\n\nyou can identify those two approaches by the `_async` suffix in the `transcriber`'s method name (e.g. `transcribe` vs `transcribe_async`).\n\n## polling intervals\n\nby default we poll the `transcript`'s status each `3s`. in case you would like to adjust that interval:\n\n```python\nimport assemblyai as aai\n\naai.settings.polling_interval = 1.0\n```\n\n## retrieving existing transcripts\n\n### retrieving a single transcript\n\nif you previously created a transcript, you can use its id to retrieve it later.\n\n```python\nimport assemblyai as aai\n\ntranscript = aai.transcript.get_by_id(\"<transcript_id>\")\n\nprint(transcript.id)\nprint(transcript.text)\n```\n\n### retrieving multiple transcripts as a group\n\nyou can also retrieve multiple existing transcripts and combine them into a single `transcriptgroup` object. this allows you to perform operations on the transcript group as a single unit, such as querying the combined transcripts with lemur.\n\n```python\nimport assemblyai as aai\n\ntranscript_group = aai.transcriptgroup.get_by_ids([\"<transcript_id_1>\", \"<transcript_id_2>\"])\n\nsummary = transcript_group.lemur.summarize(context=\"customers asking for cars\", answer_format=\"tldr\")\n\nprint(summary)\n```\n\n### retrieving transcripts asynchronously\n\nboth `transcript.get_by_id` and `transcriptgroup.get_by_ids` have asynchronous counterparts, `transcript.get_by_id_async` and `transcriptgroup.get_by_ids_async`, respectively. these functions immediately return a `future` object, rather than blocking until the transcript(s) are retrieved.\n\nsee the above section on [synchronous vs asynchronous](#synchronous-vs-asynchronous) for more information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "assemblyai",
  "package_url": "https://pypi.org/project/assemblyai/",
  "project_url": "https://pypi.org/project/assemblyai/",
  "project_urls": {
    "API Documentation": "https://www.assemblyai.com/docs/",
    "Code": "https://github.com/AssemblyAI/assemblyai-python-sdk",
    "Documentation": "https://github.com/AssemblyAI/assemblyai-python-sdk/blob/master/README.md",
    "Homepage": "https://github.com/AssemblyAI/assemblyai-python-sdk",
    "Issues": "https://github.com/AssemblyAI/assemblyai-python-sdk/issues",
    "Website": "https://assemblyai.com/"
  },
  "release_url": "https://pypi.org/project/assemblyai/0.20.1/",
  "requires_dist": [
    "httpx >=0.19.0",
    "pydantic !=1.10.7,>=1.7.0",
    "typing-extensions >=3.7",
    "websockets >=11.0",
    "pyaudio >=0.2.13 ; extra == 'extras'"
  ],
  "requires_python": ">=3.8",
  "summary": "assemblyai python sdk",
  "version": "0.20.1",
  "releases": [],
  "developers": [
    "assemblyai",
    "engineering.sdk@assemblyai.com"
  ],
  "kwds": "badge pyversions py workflows pip",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_assemblyai",
  "homepage": "https://github.com/assemblyai/assemblyai-python-sdk",
  "release_count": 25,
  "dependency_ids": [
    "pypi_httpx",
    "pypi_pyaudio",
    "pypi_pydantic",
    "pypi_typing_extensions",
    "pypi_websockets"
  ],
  "documentation_summary": "AssemblyAI's Python SDK version 0.22.0, released on February 15, 2024, enables developers to transcribe and understand audio at scale using AI models. It requires Python version 3.8 or higher and is licensed under the MIT License. The SDK offers features like real-time transcription, sentiment analysis, entity detection, content safety, and more, with support for various Python versions (3.8 to 3.11). It provides extensive documentation and examples for easy integration and usage. Additionally, it includes advanced functionalities like LeMUR for summarizing transcripts, detecting sensitive content, and identifying important words or phrases. The SDK is designed for developers and researchers in the field of artificial intelligence and software development.",
  "embedding": [
    -0.026906559243798256,
    0.001452422235161066,
    0.003989786375313997,
    -0.01668710634112358,
    0.0036433048080652952,
    0.03637005016207695,
    0.009764476679265499,
    -0.009862471371889114,
    0.0013754263054579496,
    -0.027760513126850128,
    0.0066986409947276115,
    0.014475224539637566,
    -0.03253425657749176,
    0.00037119886837899685,
    -0.000411665445426479,
    -0.014825205318629742,
    0.014153242111206055,
    -0.026682570576667786,
    0.0077205863781273365,
    -0.01418824028223753,
    0.003993285819888115,
    0.002658107550814748,
    -0.03701401501893997,
    0.00393378920853138,
    -0.01591714657843113,
    0.0017551559722051024,
    0.026528578251600266,
    -0.02837648056447506,
    -0.019276967272162437,
    -0.009225505404174328,
    0.025324642658233643,
    -0.01640712097287178,
    -0.0335422046482563,
    -0.008161562494933605,
    0.002929343143478036,
    0.0080705676227808,
    0.005596200004220009,
    -0.019486956298351288,
    0.037993963807821274,
    0.0028050998225808144,
    0.022692784667015076,
    0.010639430023729801,
    0.0024253700394183397,
    -0.02484866790473461,
    -0.01646311767399311,
    0.006726639810949564,
    -0.017625056207180023,
    -0.012704319320619106,
    -0.015623162500560284,
    0.00812656432390213,
    0.005561201833188534,
    0.013740263879299164,
    0.001715783029794693,
    -0.007024123799055815,
    0.001690409379079938,
    0.02826448529958725,
    -0.014783208258450031,
    0.04191375523805618,
    -0.005897183902561665,
    -0.0029328428208827972,
    0.009631483815610409,
    -0.0124733317643404,
    -0.025436637923121452,
    0.0002362373488722369,
    -0.006257664877921343,
    -0.015147188678383827,
    0.00018209961126558483,
    0.013124296441674232,
    0.014867203310132027,
    0.001162812695838511,
    0.03603406995534897,
    0.026304591447114944,
    -0.01214434951543808,
    -0.011780369095504284,
    0.04868939146399498,
    -0.008553541265428066,
    -0.011696373112499714,
    0.01623912900686264,
    -0.02470867708325386,
    0.007832580246031284,
    0.0044447616674005985,
    -0.01587514951825142,
    -0.0007686463068239391,
    0.01983693800866604,
    0.006282163318246603,
    0.03583807870745659,
    -0.0048437402583658695,
    0.02029891312122345,
    0.02028491348028183,
    -0.014629215933382511,
    0.02405071072280407,
    0.0008806402911432087,
    0.009799474850296974,
    0.03617406263947487,
    -0.024988660588860512,
    0.027298538014292717,
    -0.017275074496865273,
    0.023028766736388206,
    -0.003783297259360552,
    -0.02872646041214466,
    -0.0029240932781249285,
    -0.0012223095400258899,
    -0.018129028379917145,
    -0.01668710634112358,
    -0.03726600483059883,
    0.012452333234250546,
    0.01235433854162693,
    0.01194136030972004,
    0.023700730875134468,
    0.02489066682755947,
    -0.01246633194386959,
    0.03281424194574356,
    0.0002037547092186287,
    -0.047121476382017136,
    0.01051343698054552,
    0.005491205956786871,
    0.023070763796567917,
    -0.0003248263383284211,
    0.0021383853163570166,
    -0.014755209907889366,
    0.01037344429641962,
    0.0237567275762558,
    -0.003225077176466584,
    -0.002878595842048526,
    0.012515329755842686,
    0.007489598821848631,
    0.017303073778748512,
    -0.0011103155557066202,
    -0.021894827485084534,
    -0.026038605719804764,
    0.0079305749386549,
    -0.030266378074884415,
    0.04496559128165245,
    0.01051343698054552,
    -0.003888291772454977,
    -0.0058656856417655945,
    -0.015553167089819908,
    0.0020053924527019262,
    -0.03981386870145798,
    -0.022524792701005936,
    0.006054675672203302,
    0.019164973869919777,
    -0.030602360144257545,
    0.0001574915659148246,
    0.0017324071377515793,
    0.025506634265184402,
    0.017401067540049553,
    -0.019108975306153297,
    -0.0002195038687204942,
    0.018073031678795815,
    0.025660624727606773,
    -0.015203185379505157,
    -0.03329021483659744,
    0.007643590681254864,
    -0.0025513633154332638,
    0.0064886524342000484,
    0.007552595343440771,
    0.0029310928657650948,
    -0.011605378240346909,
    -0.002381622325628996,
    -0.0013316787080839276,
    0.030826348811388016,
    -0.025422638282179832,
    -0.00612817145884037,
    0.013607271015644073,
    0.022748781368136406,
    -0.001071817590855062,
    -0.01973894238471985,
    -0.018884988501667976,
    -0.025926610454916954,
    0.00983447302132845,
    0.00298534007743001,
    0.007580593694001436,
    -0.00702062388882041,
    0.0076785883866250515,
    0.004780743736773729,
    0.008168562315404415,
    0.005585700739175081,
    -0.027102548629045486,
    -0.005382711533457041,
    0.021334856748580933,
    0.004619752522557974,
    0.02052289992570877,
    0.04110179841518402,
    -0.001725407550111413,
    -0.012025355361402035,
    -0.023168759420514107,
    -0.016841096803545952,
    0.01186436414718628,
    0.022524792701005936,
    0.0002839223016053438,
    0.019248967990279198,
    0.009575487114489079,
    -0.021992821246385574,
    -0.5828167796134949,
    -0.016981089487671852,
    -0.00203689094632864,
    -0.005431708879768848,
    0.008560541085898876,
    0.012515329755842686,
    0.0015469171339645982,
    0.013551274314522743,
    -0.0016256629023700953,
    0.02844647504389286,
    -0.01605713926255703,
    0.0030028391629457474,
    -0.02445668913424015,
    -0.0031603306997567415,
    0.003429816337302327,
    -0.001760405721142888,
    0.005127225071191788,
    -0.04020584747195244,
    0.00610367301851511,
    -0.006159670185297728,
    -0.023042764514684677,
    0.026752566918730736,
    -0.01443322654813528,
    0.02032691054046154,
    -0.007307608611881733,
    0.0023081263061612844,
    0.004584754351526499,
    -0.009498490951955318,
    0.02463868074119091,
    0.014265235513448715,
    -0.03231026977300644,
    0.0034228165168315172,
    0.01566516049206257,
    0.021908825263381004,
    0.04420963302254677,
    -0.0016772851813584566,
    -0.01630912534892559,
    0.042697712779045105,
    0.005638197995722294,
    0.02066289260983467,
    -0.0010919414926320314,
    -0.017639055848121643,
    -0.0036503043957054615,
    -0.003517311532050371,
    0.025744620710611343,
    0.002819098997861147,
    0.009036515839397907,
    0.01024045143276453,
    0.012739317491650581,
    -0.018577003851532936,
    -0.0004925986286252737,
    0.004007285460829735,
    0.0162811279296875,
    -0.03317822143435478,
    0.018339017406105995,
    -0.010415442287921906,
    0.029818402603268623,
    -0.018367016687989235,
    -0.004539256915450096,
    -0.010268449783325195,
    0.011367390863597393,
    0.008357551880180836,
    0.00048822382814250886,
    -0.02497466281056404,
    -0.012536328285932541,
    0.008609538897871971,
    0.0291744377464056,
    -0.022370802238583565,
    -0.0022328803315758705,
    -0.026962555944919586,
    0.04454561322927475,
    0.01404824759811163,
    0.00034976250026375055,
    -0.018702998757362366,
    0.02472267486155033,
    0.05969280004501343,
    7.240237027872354e-05,
    0.008616538718342781,
    -0.011829365976154804,
    0.019542952999472618,
    0.009043515659868717,
    0.012669321149587631,
    0.00818956084549427,
    -0.04154977202415466,
    0.003923289943486452,
    -0.01003046240657568,
    -0.01640712097287178,
    -0.002385122235864401,
    -0.0032233272213488817,
    0.01234033890068531,
    0.0010796921560540795,
    0.023518739268183708,
    -0.000466787489131093,
    -0.04488159716129303,
    0.012697319500148296,
    0.008952520787715912,
    -0.034942127764225006,
    -0.013194292783737183,
    0.002906594192609191,
    -0.006257664877921343,
    0.007195614278316498,
    -0.005316215101629496,
    -0.01630912534892559,
    0.013558273203670979,
    0.042277734726667404,
    0.00030513989622704685,
    -0.0099044693633914,
    -0.018129028379917145,
    -0.005603199824690819,
    -0.021894827485084534,
    -0.02049490250647068,
    -0.04404164105653763,
    -0.01625312864780426,
    -0.00800057128071785,
    0.013222291134297848,
    -0.025310643017292023,
    0.030714353546500206,
    0.0059006838127970695,
    0.04432162642478943,
    0.011318393982946873,
    -0.0059006838127970695,
    0.013425280340015888,
    0.01646311767399311,
    0.023770727217197418,
    0.021530846133828163,
    0.015231183730065823,
    0.002064889296889305,
    -0.014979197643697262,
    -0.010989410802721977,
    0.01594514586031437,
    -0.008301555179059505,
    0.004780743736773729,
    -0.005088727455586195,
    -0.018702998757362366,
    0.03645404800772667,
    -0.01207435317337513,
    0.006467653438448906,
    -0.00013353972462937236,
    0.003218077588826418,
    -0.003961787559092045,
    -0.02381272427737713,
    -0.010261449962854385,
    0.022734781727194786,
    0.015161187388002872,
    -0.013376283459365368,
    -0.02067689225077629,
    -0.03732199966907501,
    0.015049193985760212,
    -0.002206631703302264,
    -0.017233077436685562,
    -0.008966519497334957,
    0.001993143232539296,
    -0.01637912169098854,
    0.030098387971520424,
    -0.01577715389430523,
    -0.009239505045115948,
    -0.0317222997546196,
    -0.004507758654654026,
    0.0014909200835973024,
    -0.006254164967685938,
    0.02393871732056141,
    0.01999092847108841,
    -0.011108404956758022,
    0.023476742208003998,
    -0.03718200698494911,
    -0.012179347686469555,
    -0.029482420533895493,
    0.029762405902147293,
    -0.027172544971108437,
    -0.029370427131652832,
    0.006838633678853512,
    -0.010457439348101616,
    -0.009197507053613663,
    -5.922338823438622e-05,
    0.0082105603069067,
    -0.010681428015232086,
    -0.022244807332754135,
    0.01593114621937275,
    -0.004633751697838306,
    -0.01591714657843113,
    -0.025744620710611343,
    0.03225427120923996,
    -0.023490741848945618,
    -0.03771397843956947,
    0.015007195994257927,
    0.010016463696956635,
    0.005200721323490143,
    0.015609163790941238,
    -0.007314607966691256,
    0.02451268583536148,
    -0.022454796358942986,
    -0.01029644813388586,
    -0.010079460218548775,
    0.037853971123695374,
    -0.01593114621937275,
    0.03586607798933983,
    0.007237612269818783,
    0.0006916504353284836,
    0.0020036427304148674,
    0.019038980826735497,
    0.02006092481315136,
    0.019066978245973587,
    0.018437013030052185,
    0.0062366658821702,
    -0.015091191045939922,
    0.015525167807936668,
    0.0021576343569904566,
    -0.011269396170973778,
    0.029818402603268623,
    -0.008924521505832672,
    0.04068182036280632,
    -0.013922253623604774,
    -0.01951495371758938,
    -0.011563380248844624,
    0.0038952913600951433,
    0.01681309938430786,
    0.00610367301851511,
    0.007031123153865337,
    -0.02787250652909279,
    -0.01450322289019823,
    -0.015329178422689438,
    0.017471063882112503,
    0.0026913557667285204,
    -0.020998874679207802,
    -0.005260217934846878,
    0.005480706226080656,
    0.011577379889786243,
    0.038889914751052856,
    0.0068806312046945095,
    -0.014937199652194977,
    0.0021856329403817654,
    0.018856989219784737,
    0.029230434447526932,
    -0.01221434585750103,
    0.017093084752559662,
    -0.026094602420926094,
    0.0196689460426569,
    -0.004000285640358925,
    0.01569315977394581,
    -0.023196756839752197,
    0.019304966554045677,
    0.002885595429688692,
    0.0056486972607672215,
    -0.034186169505119324,
    0.04432162642478943,
    -0.007958573289215565,
    0.0020228915382176638,
    0.008602539077401161,
    0.001490045222453773,
    -0.0025916111189872026,
    -0.012606324627995491,
    -0.007174615748226643,
    0.0031183329410851,
    0.021054871380329132,
    0.0033143223263323307,
    0.0005656572175212204,
    -0.0035120618995279074,
    0.0050292303785681725,
    0.009463492780923843,
    0.013803260400891304,
    0.0017595307435840368,
    0.017779046669602394,
    0.020998874679207802,
    0.0501733124256134,
    0.013642269186675549,
    -1.2071618584741373e-05,
    -0.00208063842728734,
    -0.029622413218021393,
    -0.0028120994102209806,
    -0.0021453851368278265,
    -0.014671213924884796,
    -0.01625312864780426,
    0.0012730568414554,
    -0.03804996237158775,
    0.058460868895053864,
    0.006936628371477127,
    0.025534631684422493,
    0.038525935262441635,
    0.01227734237909317,
    0.005158723797649145,
    -0.014993196353316307,
    -0.038973912596702576,
    0.034830134361982346,
    -0.014671213924884796,
    0.008637537248432636,
    -0.018339017406105995,
    -0.013306287117302418,
    0.005214720498770475,
    -0.04028984159231186,
    0.018087031319737434,
    -0.014825205318629742,
    0.010275449603796005,
    0.007202614098787308,
    0.018996981903910637,
    -0.027354534715414047,
    0.0038322946056723595,
    0.03986986353993416,
    0.013243290595710278,
    -0.021474849432706833,
    -0.030462367460131645,
    0.007559595163911581,
    -0.010415442287921906,
    -0.025618627667427063,
    -0.0004584754351526499,
    0.03309422731399536,
    -0.004777243826538324,
    -0.01979493908584118,
    -0.012669321149587631,
    -0.013222291134297848,
    -0.02886645309627056,
    0.0022643785923719406,
    0.01688309572637081,
    0.003335321322083473,
    -0.019080977886915207,
    0.017205078154802322,
    -0.0016309126513078809,
    -0.005260217934846878,
    -0.02045290358364582,
    0.027256539091467857,
    0.025744620710611343,
    -0.017527060583233833,
    -0.025114653632044792,
    -0.006026677321642637,
    0.00599517859518528,
    0.04471360519528389,
    0.02414870634675026,
    0.011297394521534443,
    0.002749102655798197,
    -0.04154977202415466,
    -0.008623537607491016,
    -0.014979197643697262,
    -0.008168562315404415,
    0.017289074137806892,
    0.0062996624037623405,
    -0.04734546318650246,
    -0.011038408614695072,
    0.009015517309308052,
    0.0033020731061697006,
    0.01423723716288805,
    0.01185736432671547,
    -0.0071011194959282875,
    0.002162884222343564,
    0.0042697712779045105,
    -0.010485438629984856,
    0.02372872829437256,
    0.0004175713693257421,
    0.010457439348101616,
    -0.0017892791656777263,
    0.038133956491947174,
    -0.011955359019339085,
    0.032562255859375,
    0.01959894970059395,
    -0.03261825069785118,
    -0.03287024050951004,
    0.014272235333919525,
    -0.004119279328733683,
    0.019402960315346718,
    0.022664785385131836,
    -0.017555059865117073,
    0.05020131170749664,
    0.0199489314109087,
    0.02050890028476715,
    0.009526489302515984,
    0.007475599646568298,
    0.022440798580646515,
    0.034998126327991486,
    0.003212827956303954,
    0.0011759370099753141,
    -0.017849043011665344,
    -0.025842614471912384,
    -0.018535006791353226,
    -0.0035558093804866076,
    -0.02484866790473461,
    -0.011262396350502968,
    0.011969358660280704,
    0.010849419049918652,
    -0.026122599840164185,
    -0.03197428584098816,
    0.0328422412276268,
    -0.006184168625622988,
    -0.007594592869281769,
    -0.025044657289981842,
    0.012914308346807957,
    -0.022762781009078026,
    -0.005365212447941303,
    -0.027340535074472427,
    -0.007307608611881733,
    0.0028400977607816458,
    -0.011465385556221008,
    0.007804581895470619,
    -0.010079460218548775,
    0.038889914751052856,
    -0.006656643468886614,
    0.04303369298577309,
    0.021810831502079964,
    -0.01682709902524948,
    -0.0196689460426569,
    -0.017933038994669914,
    0.007265610620379448,
    -0.0006229666178114712,
    0.01390825491398573,
    -0.022202810272574425,
    -0.0044867596589028835,
    -0.003268824890255928,
    0.012312340550124645,
    -0.027508527040481567,
    -0.021446850150823593,
    -0.025590628385543823,
    -0.017107082530856133,
    0.007419602479785681,
    0.03928189352154732,
    -0.00832955352962017,
    -0.002127886051312089,
    0.031190328299999237,
    0.013537274673581123,
    0.026290591806173325,
    0.026766566559672356,
    0.006019677501171827,
    0.019486956298351288,
    0.021180864423513412,
    0.02029891312122345,
    0.003510311944410205,
    0.004189275670796633,
    -0.011269396170973778,
    -0.02371472865343094,
    -0.06926828622817993,
    -0.004185775760561228,
    -0.012872310355305672,
    0.02056489884853363,
    -0.009414495900273323,
    0.027760513126850128,
    0.026500580832362175,
    -0.01215134933590889,
    -0.006765137426555157,
    -0.011199399828910828,
    0.011185401119291782,
    -0.013418281450867653,
    0.0035278110299259424,
    0.021614842116832733,
    -0.03141431510448456,
    -0.010149456560611725,
    -0.011080406606197357,
    0.007839580066502094,
    -0.0007577093783766031,
    0.00818956084549427,
    -0.0484934002161026,
    0.013005303218960762,
    0.03203028440475464,
    -0.017317071557044983,
    0.006614645477384329,
    0.009302501566708088,
    0.006359159480780363,
    -0.010996410623192787,
    0.015371176414191723,
    0.01030344795435667,
    0.03519411385059357,
    0.01607113890349865,
    -0.04020584747195244,
    0.014286234974861145,
    -0.009281503036618233,
    -0.008035569451749325,
    -0.004857739899307489,
    0.0060091782361269,
    -0.01983693800866604,
    0.001442797714844346,
    -0.006499151699244976,
    0.0008412674069404602,
    0.00806356780230999,
    -0.01661710999906063,
    -0.026780564337968826,
    -0.01437722984701395,
    0.03292623534798622,
    -0.004917236510664225,
    0.021418852731585503,
    -0.0038637930992990732,
    0.017205078154802322,
    -0.026696570217609406,
    -0.011983358301222324,
    -0.01647711731493473,
    0.011080406606197357,
    0.01200435683131218,
    -0.0007301484001800418,
    0.03788197040557861,
    0.01424423698335886,
    0.04418163374066353,
    0.019374961033463478,
    -0.002759602153673768,
    0.009029516018927097,
    0.00299758929759264,
    -0.005197221413254738,
    -0.0019371461821720004,
    0.019542952999472618,
    0.017457064241170883,
    -0.006828133948147297,
    0.01576315611600876,
    0.02059289626777172,
    0.0026633574161678553,
    -0.018213024362921715,
    0.003958288114517927,
    0.031190328299999237,
    -0.0007336481940001249,
    -0.023434745147824287,
    -0.011234397999942303,
    -0.014461224898695946,
    -0.022804778069257736,
    -0.0022643785923719406,
    -0.005459707695990801,
    0.008245558477938175,
    -0.0248066708445549,
    0.0038392941933125257,
    0.04549756273627281,
    -0.010527435690164566,
    0.02407871000468731,
    0.00814756378531456,
    0.021348856389522552,
    -0.0054632071405649185,
    0.03301023319363594,
    0.019430959597229958,
    0.023140760138630867,
    -0.02451268583536148,
    -0.0016204131534323096,
    -0.038189955055713654,
    0.009372497908771038,
    0.02470867708325386,
    -0.0022433798294514418,
    0.030350374057888985,
    0.042837705463171005,
    0.01245933212339878,
    -0.0012756816577166319,
    0.00997446570545435,
    -0.00991846900433302,
    -0.046169526875019073,
    -0.009547488763928413,
    -0.029790403321385384,
    -0.017401067540049553,
    -0.03147031366825104,
    -0.011850365437567234,
    -0.04524557664990425,
    -0.01637912169098854,
    0.00019150535808876157,
    0.021586842834949493,
    0.015427173115313053,
    -0.00847654603421688,
    0.006145670544356108,
    0.017345070838928223,
    0.008252558298408985,
    0.05266517773270607,
    0.013866256922483444,
    0.012599324807524681,
    0.02857246994972229,
    0.015595164149999619,
    -0.01632312498986721,
    -0.0290344450622797,
    -0.01009345892816782,
    -0.0034735638182610273,
    0.010604431852698326,
    0.02358873561024666,
    -0.037993963807821274,
    0.0021926325280219316,
    0.015175187028944492,
    0.002904844470322132,
    -0.03617406263947487,
    -0.0284744743257761,
    0.025940610095858574,
    0.029986392706632614,
    -0.004108780063688755,
    -0.018367016687989235,
    -0.006460653617978096,
    0.015217185020446777,
    0.026094602420926094,
    -0.03723800554871559,
    -0.002061389619484544,
    0.004829741083085537,
    -0.025660624727606773,
    0.01024745125323534,
    -0.0002524239826016128,
    0.029538417235016823,
    -0.0010035712039098144,
    0.0290344450622797,
    0.0240367129445076,
    -0.002910094102844596,
    -0.0037517989985644817,
    -0.007370605133473873,
    0.018087031319737434,
    0.018772995099425316,
    0.03273024782538414,
    -0.025772619992494583,
    0.004567255266010761,
    0.05311315506696701,
    -0.0002541738795116544,
    0.006768637336790562,
    0.006779136601835489,
    0.004140278324484825,
    0.043089691549539566,
    -0.03488612920045853,
    -0.015357176773250103,
    -0.008245558477938175,
    -0.008427548222243786,
    -0.02097087725996971,
    0.002806849544867873,
    -0.012795314192771912,
    0.0038987910374999046,
    -0.02381272427737713,
    0.009953467175364494,
    -0.0035838079638779163,
    0.009673481807112694,
    0.0038707926869392395,
    0.004675749689340591,
    -0.0022433798294514418,
    0.002140135271474719,
    0.018954984843730927,
    0.006107172928750515,
    0.025198649615049362,
    -0.005277717020362616,
    -0.018549006432294846,
    -0.0023641232401132584,
    -0.009036515839397907,
    0.019458957016468048,
    0.02055089920759201,
    0.007363605313003063,
    -0.02052289992570877,
    0.033962178975343704,
    -0.010814420878887177,
    0.0017717800801619887,
    -0.01042244117707014,
    0.011724371463060379,
    -0.006761637516319752,
    0.011164401657879353,
    0.00199839286506176,
    -0.003814795520156622,
    0.03309422731399536,
    0.012711319141089916,
    -0.007094120141118765,
    0.0007625216385349631,
    -0.011269396170973778,
    0.010758423246443272,
    -0.0060896738432347775,
    -0.0031183329410851,
    -0.021082870662212372,
    0.0002382059901719913,
    -0.02018691785633564,
    0.008105565793812275,
    -0.011262396350502968,
    0.02407871000468731,
    -0.0002532989310566336,
    0.00041932129533961415,
    0.013852258212864399,
    0.0012739317025989294,
    0.03715400770306587,
    -0.0010333196260035038,
    0.022468795999884605,
    0.017457064241170883,
    -0.04888537898659706,
    -0.007734585553407669,
    0.010646429844200611,
    0.018353017047047615,
    -0.034186169505119324,
    0.022734781727194786,
    0.005673196166753769,
    -0.02391071803867817,
    -0.030910344794392586,
    0.045973535627126694,
    -0.012438333593308926,
    -0.009022516198456287,
    8.634693949716166e-05,
    0.015581165440380573,
    0.018702998757362366,
    -0.021670838817954063,
    -0.0054702069610357285,
    0.01651911437511444,
    -0.007629591040313244,
    -0.01397825125604868,
    -0.03623005747795105,
    -0.00619816780090332,
    -0.010324446484446526,
    0.014671213924884796,
    0.00814756378531456,
    -0.042557720094919205,
    -0.030742352828383446,
    -0.0074965981766581535,
    -0.04493759199976921,
    -0.0010315697873011231,
    -0.013677267357707024,
    0.033822186291217804,
    -0.0099044693633914,
    0.03194628655910492,
    0.023420745506882668,
    0.027676517143845558,
    0.011444387026131153,
    0.013446279801428318,
    -0.02493266388773918,
    0.001210060203447938,
    0.00811956450343132,
    -0.003344070864841342,
    -0.034382157027721405,
    -0.008546542376279831,
    -0.04756944999098778,
    -0.0007078370545059443,
    0.014895201660692692,
    -0.011598378419876099,
    0.010632430203258991,
    0.042837705463171005,
    -0.0064466544426977634,
    -0.02470867708325386,
    -0.0006667142733931541,
    -0.0075385961681604385,
    -0.009183508343994617,
    0.021978821605443954,
    -0.009491491131484509,
    -0.005634698085486889,
    -0.01038044411689043,
    0.004763244651257992,
    0.005484206136316061,
    -0.0031568307895213366,
    0.00521122058853507,
    0.010058460757136345,
    0.009267503395676613,
    0.0007878952892497182,
    -0.001741156680509448,
    -0.003604806959629059,
    0.004637251608073711,
    -0.0022118815686553717,
    0.03289823606610298,
    0.013460278511047363,
    -0.006929628551006317,
    0.02066289260983467,
    -0.0017612805822864175,
    -0.005641697905957699,
    -0.0017166580073535442,
    0.0324222631752491,
    -0.017247075214982033,
    -0.004101780243217945,
    0.0161411352455616,
    -0.029622413218021393,
    -0.007181615103036165,
    -0.018744995817542076,
    0.02441469207406044,
    -0.015329178422689438,
    -0.0006089673843234777,
    0.005484206136316061,
    -0.00714661693200469,
    -0.030546363443136215,
    0.013943253085017204,
    0.014146242290735245,
    -0.016925092786550522,
    -0.0001722563902148977,
    0.011381390504539013,
    -0.0009659482748247683,
    -0.013579272665083408,
    -0.030742352828383446,
    -0.0010219452669844031,
    -0.04552556201815605,
    0.0036503043957054615,
    0.009869471192359924,
    -0.0060441759414970875,
    -0.02109687030315399,
    0.007377604953944683,
    0.01675710268318653,
    -0.04882938414812088,
    0.013061299920082092,
    0.19531753659248352,
    -0.01618313230574131,
    0.0011654375120997429,
    0.0037552989087998867,
    0.007692588027566671,
    0.008602539077401161,
    0.031022338196635246,
    0.018465010449290276,
    -0.017947038635611534,
    0.014783208258450031,
    -0.0013089298736304045,
    -0.008525542914867401,
    -0.015371176414191723,
    -0.00202989112585783,
    -0.005095726810395718,
    -0.026318589225411415,
    -0.02402271330356598,
    -0.03992586210370064,
    -0.019094977527856827,
    0.012592324987053871,
    0.0029940896201878786,
    -0.04082181304693222,
    -0.01240333542227745,
    -0.022804778069257736,
    0.01382425893098116,
    0.0013561773812398314,
    -0.0021698838099837303,
    -0.02489066682755947,
    -0.00819656066596508,
    -0.0018706497503444552,
    0.0008298930479213595,
    0.0024586182553321123,
    0.009855471551418304,
    0.015483170747756958,
    -0.05157323554158211,
    -0.021082870662212372,
    -0.022006820887327194,
    3.0486648029182106e-05,
    0.009764476679265499,
    0.012704319320619106,
    -0.002052640076726675,
    -0.012221344746649265,
    -0.0001717095437925309,
    -0.029846400022506714,
    -0.010352445766329765,
    -0.017709050327539444,
    -0.019556952640414238,
    -0.0034088173415511847,
    -0.018954984843730927,
    0.02405071072280407,
    -0.017485063523054123,
    -0.011535381898283958,
    -0.013922253623604774,
    0.010212453082203865,
    -0.006327660754323006,
    -0.0018758994992822409,
    -0.015483170747756958,
    0.021852828562259674,
    0.026640573516488075,
    0.018227024003863335,
    -0.02773251384496689,
    0.03365419805049896,
    -0.015119190327823162,
    0.006215666886419058,
    -0.05221720412373543,
    0.017443064600229263,
    -0.03231026977300644,
    -0.001486545312218368,
    -0.014951199293136597,
    0.00306758563965559,
    -0.0005472831544466317,
    -0.012900308705866337,
    -0.04482559859752655,
    -0.01036644447594881,
    -0.009708479978144169,
    -0.02067689225077629,
    0.05356112867593765,
    0.017177078872919083,
    0.03609006479382515,
    0.02469467744231224,
    0.010352445766329765,
    0.02078888565301895,
    -0.010282449424266815,
    0.018129028379917145,
    -0.012697319500148296,
    -0.015553167089819908,
    0.021698838099837303,
    -0.02496066316962242,
    0.0005993428640067577,
    0.0006150920526124537,
    -0.0120183564722538,
    -0.014965198002755642,
    0.006026677321642637,
    0.002715854439884424,
    -0.021334856748580933,
    0.0010210702894255519,
    0.005253218580037355,
    -0.010709426365792751,
    -0.004115779418498278,
    0.004805242642760277,
    -0.027214542031288147,
    0.038329947739839554,
    -7.349606312345713e-05,
    -0.0029240932781249285,
    -0.007125618401914835,
    -0.010415442287921906,
    -0.013278288766741753,
    0.0033475705422461033,
    0.011087405495345592,
    -0.018926985561847687,
    -0.01451722253113985,
    -0.012186347506940365,
    -0.003027337836101651,
    -0.011374390684068203,
    0.01241733506321907,
    -0.01983693800866604,
    0.009253503754734993,
    -0.014202238991856575,
    0.023476742208003998,
    0.0004676624375861138,
    -0.009540488943457603,
    0.00597068015486002,
    -0.0008920147083699703,
    -0.013481277972459793,
    -0.017303073778748512,
    -0.02822248823940754,
    -0.017135081812739372,
    -0.006684641819447279,
    0.01227734237909317,
    0.002229380654171109,
    0.00825955718755722,
    -0.0071396175771951675,
    0.02055089920759201,
    0.017807045951485634,
    -0.022188810631632805,
    -0.037853971123695374,
    -0.004962733946740627,
    0.007916576229035854,
    -0.014783208258450031,
    0.011493383906781673,
    -0.00393378920853138,
    0.00847654603421688,
    -0.0018094030674546957,
    -0.013873256742954254,
    0.032562255859375,
    -0.003284574020653963,
    0.01646311767399311,
    0.029958395287394524,
    0.008938521146774292,
    0.0011540631530806422,
    -0.026976553723216057,
    0.021530846133828163,
    0.005967180244624615,
    -0.018619002774357796,
    0.009792475029826164,
    0.01199735701084137,
    -0.015385176055133343,
    -0.004322268534451723,
    -0.004122779238969088,
    0.01685509644448757,
    -0.008784529753029346,
    -0.009554487653076649,
    -0.01609913818538189,
    -0.011766369454562664,
    -0.03984186425805092,
    -0.047541454434394836,
    -0.1767265349626541,
    -0.01255032792687416,
    0.00705212214961648,
    -0.04930535703897476,
    0.01635112427175045,
    -0.003611806547269225,
    -0.0017647804925218225,
    -0.015357176773250103,
    0.004329267889261246,
    -0.030686356127262115,
    0.01672910340130329,
    -0.01418824028223753,
    -0.0004298207350075245,
    -0.01959894970059395,
    -0.017793046310544014,
    -0.014909201301634312,
    -0.018619002774357796,
    0.010961412452161312,
    0.0403178408741951,
    0.02374272793531418,
    0.021964823827147484,
    -0.02406471036374569,
    -0.017485063523054123,
    -0.012977304868400097,
    0.0144472261890769,
    -0.01682709902524948,
    -0.0027981000021100044,
    -0.0031515811569988728,
    -0.00834355317056179,
    -0.03141431510448456,
    -0.0035698087885975838,
    0.0027578521985560656,
    0.008294555358588696,
    -0.022566791623830795,
    0.029538417235016823,
    0.03147031366825104,
    0.03687402606010437,
    -0.007741585373878479,
    -0.02423270232975483,
    0.030518364161252975,
    0.025352641940116882,
    0.02843247726559639,
    0.015231183730065823,
    -0.022888774052262306,
    0.005603199824690819,
    0.019458957016468048,
    0.027172544971108437,
    -0.03211427852511406,
    0.018479010090231895,
    -0.009519490413367748,
    0.039393890649080276,
    -0.030378371477127075,
    -0.0025321142747998238,
    -0.0063066622242331505,
    0.027046550065279007,
    0.030686356127262115,
    0.00022967519180383533,
    0.0072796097956597805,
    -0.003209328046068549,
    -0.002929343143478036,
    -0.0018688999116420746,
    0.010632430203258991,
    0.01022645179182291,
    -0.006509651429951191,
    -0.005536703392863274,
    -0.008490544743835926,
    -0.012935306876897812,
    0.027690516784787178,
    0.0012196846073493361,
    0.02454068511724472,
    -0.0038987910374999046,
    -0.011066406965255737,
    -0.026668570935726166,
    -0.018115028738975525,
    0.027508527040481567,
    0.011605378240346909,
    -0.0164211206138134,
    0.030294377356767654,
    0.03225427120923996,
    -0.0008552666986361146,
    -0.02007492445409298,
    0.03718200698494911,
    -0.017485063523054123,
    0.018045032396912575,
    -0.013061299920082092,
    -0.010618431493639946,
    -0.0029433423187583685,
    -0.005172722972929478,
    -0.02420470304787159,
    0.01616913452744484,
    0.034326162189245224,
    -0.022958770394325256,
    0.011444387026131153,
    0.0023081263061612844,
    0.014419227838516235,
    0.030714353546500206,
    0.003604806959629059,
    -0.006317161489278078,
    0.004413263406604528,
    -0.010751424357295036,
    -0.002463867887854576,
    0.018674999475479126,
    -0.004840240813791752,
    0.019136974588036537,
    0.027032552286982536,
    0.019024981185793877,
    -0.031218327581882477,
    -0.0007340856827795506,
    0.005802689120173454,
    -0.018898988142609596,
    -0.004633751697838306,
    -0.01200435683131218,
    0.006821134593337774,
    0.01975294202566147,
    -0.025394639000296593,
    0.03317822143435478,
    -0.018926985561847687,
    -0.00404228363186121,
    0.017569059506058693,
    -0.00786757841706276,
    0.02757852151989937,
    -0.013341285288333893,
    -0.006149170454591513,
    0.01569315977394581,
    -0.00841354951262474,
    -0.02787250652909279,
    -0.09805074334144592,
    -0.027312535792589188,
    0.008385551162064075,
    0.010828419588506222,
    -0.009141510352492332,
    -0.026318589225411415,
    -0.004297769628465176,
    0.04378965497016907,
    -0.007615591865032911,
    0.009015517309308052,
    -0.015245183371007442,
    -0.019458957016468048,
    -0.030126385390758514,
    -0.0006024052272550762,
    -0.004997732117772102,
    -0.01017045509070158,
    -0.017443064600229263,
    0.0020666392520070076,
    -0.021642839536070824,
    -0.0005280342302285135,
    -0.0006964626954868436,
    0.01625312864780426,
    0.038693927228450775,
    -0.01633712463080883,
    -0.01973894238471985,
    -0.01703708805143833,
    -0.04476960003376007,
    0.018367016687989235,
    0.026500580832362175,
    0.006012677680701017,
    0.02784450724720955,
    -0.025296645238995552,
    -0.013509276323020458,
    -0.00620516762137413,
    0.006870131939649582,
    -0.002451618667691946,
    -0.021488849073648453,
    -0.017107082530856133,
    0.009547488763928413,
    -0.01682709902524948,
    0.0023308750241994858,
    -0.017191078513860703,
    0.005729192867875099,
    -0.005438708700239658,
    -0.006208667531609535,
    0.0158611498773098,
    -0.016841096803545952,
    -0.0012669321149587631,
    0.021474849432706833,
    -0.0242467001080513,
    -0.035110119730234146,
    -0.01643512025475502,
    -0.015287181362509727,
    0.005662696436047554,
    0.0202289167791605,
    0.02024291455745697,
    0.012704319320619106,
    -0.012592324987053871,
    -0.0016265378799289465,
    -0.026808563619852066,
    0.010814420878887177,
    0.0021523847244679928,
    -0.002341374522075057,
    0.017261074855923653,
    -0.0032758244778960943,
    -0.011920361779630184,
    0.005344213452190161,
    0.012501330114901066,
    0.0077205863781273365,
    -0.017401067540049553,
    -0.0037133011501282454,
    0.012046354822814465,
    -0.006614645477384329,
    -0.0030500865541398525,
    -0.027214542031288147,
    0.0004527882265392691,
    -0.00833655335009098,
    -0.01016345527023077,
    -0.0007095870096236467,
    0.005134224891662598,
    -0.03281424194574356,
    0.0060861739329993725,
    -0.012522328644990921,
    -0.029426423832774162,
    -0.015371176414191723,
    0.023266753181815147,
    0.01635112427175045,
    -0.027480527758598328,
    -0.00522522022947669,
    -0.04770944267511368,
    0.010604431852698326,
    0.022426798939704895,
    -0.002105137100443244,
    -0.006618145387619734,
    -0.012431333772838116,
    -0.013439279980957508,
    -0.018255021423101425,
    -0.003881291951984167,
    -0.021670838817954063,
    0.02048090286552906,
    -0.03684602677822113,
    -0.001863650162704289,
    -0.07397203892469406,
    0.0011540631530806422,
    0.029734406620264053,
    -0.02811049297451973,
    0.026724567636847496,
    -0.02878245711326599,
    -0.01003046240657568,
    -0.0205788966268301,
    0.0034210667945444584,
    0.008553541265428066,
    -0.0405978262424469,
    -0.013075299561023712,
    -0.025478634983301163,
    -0.0008250807877629995,
    -0.002148884814232588,
    0.010821419768035412,
    0.046533506363630295,
    -0.00017006901907734573,
    0.03592207655310631,
    -0.003912790212780237,
    0.0017175329849123955,
    0.0031323321163654327,
    0.02428869903087616,
    0.014685213565826416,
    -0.02820848859846592,
    -0.009519490413367748,
    -0.021684838458895683,
    0.018521007150411606,
    -0.0009921968448907137,
    -0.02421870268881321,
    0.01569315977394581,
    -0.0010613180929794908,
    -0.001216184813529253,
    0.0011461885878816247,
    0.012592324987053871,
    -0.006117672193795443,
    0.04356566444039345,
    0.01637912169098854,
    0.017149081453680992,
    0.018017034977674484,
    -0.03203028440475464,
    -0.039393890649080276,
    0.01640712097287178,
    -0.02059289626777172,
    -0.0031918289605528116,
    0.001458546845242381,
    0.0006439654971472919,
    0.01695309206843376,
    0.01567916013300419,
    -0.014979197643697262,
    0.05249718576669693,
    0.0016860346077010036,
    -0.022286806255578995,
    -0.01675710268318653,
    -0.015385176055133343,
    0.013096298091113567,
    0.02510065585374832,
    -0.01675710268318653,
    0.006954127456992865,
    -0.004595253616571426,
    0.03365419805049896,
    -0.00800057128071785,
    0.01623912900686264,
    0.00015355426876340061,
    0.005011731293052435,
    -0.027396531775593758,
    -0.04070981964468956,
    -0.009309501387178898,
    0.0022836276330053806,
    -0.01626712828874588,
    -0.031050335615873337,
    -0.023532738909125328,
    0.014475224539637566,
    -0.01208135299384594,
    0.02433069609105587,
    -0.02056489884853363,
    -0.0040562828071415424,
    -0.01566516049206257,
    -0.026220595464110374,
    0.019108975306153297,
    0.019150974228978157,
    -0.011024408973753452,
    -0.00035348106757737696,
    0.009519490413367748,
    0.03715400770306587,
    0.009736478328704834,
    -0.010723425075411797,
    -0.005841187201440334,
    -0.021446850150823593,
    0.0028890951070934534,
    -0.009673481807112694,
    0.009477492421865463,
    -0.0144472261890769,
    0.011318393982946873,
    0.02892244979739189,
    0.02405071072280407,
    0.006800135597586632,
    -0.01601514220237732,
    0.038917914032936096,
    0.006870131939649582,
    0.012851311825215816,
    -0.029734406620264053,
    -0.003491062903776765,
    -0.018241021782159805,
    -0.01696709170937538,
    -0.0004886613460257649,
    -0.02484866790473461,
    -0.0396178774535656,
    0.014937199652194977,
    0.0021821330301463604,
    0.0009257004130631685,
    0.002269628457725048,
    -0.01650511659681797,
    0.021614842116832733,
    -0.015567165799438953,
    0.02510065585374832,
    0.026486581191420555,
    -0.0005538453115150332,
    -0.031106334179639816,
    0.007370605133473873,
    0.010954412631690502,
    -0.00787457823753357,
    0.04586154222488403,
    -0.014685213565826416,
    0.022776778787374496,
    0.02060689590871334,
    0.001251182984560728,
    -0.0007953323656693101,
    -0.0014095494989305735,
    0.005449207965284586,
    -0.01985093578696251,
    0.008301555179059505,
    -0.014839204959571362,
    -0.025982607156038284,
    -0.006621645297855139,
    -0.018702998757362366,
    -0.01983693800866604,
    0.011059407144784927,
    5.8457804698264226e-05,
    0.08113965392112732,
    -0.002320375759154558,
    -0.025800617411732674,
    0.01194136030972004,
    -0.007440601475536823,
    0.005638197995722294,
    0.008252558298408985,
    0.0055087050423026085,
    -0.01016345527023077,
    0.011360391043126583,
    -0.026374587789177895,
    -0.01005146186798811,
    -0.019570952281355858,
    -0.0391978994011879,
    -0.004987232852727175,
    0.015133189037442207,
    -0.0046687498688697815,
    0.029314428567886353,
    -0.002073638839647174,
    0.011262396350502968,
    0.026766566559672356,
    0.00499073276296258,
    0.014405228197574615,
    -0.022860774770379066,
    -0.02440069243311882,
    0.014069246128201485,
    0.01993493176996708,
    0.007251611445099115,
    -0.021488849073648453,
    -0.06960427016019821,
    0.01574915647506714,
    -0.006012677680701017,
    -0.02018691785633564,
    -0.011122403666377068,
    -0.00846954621374607,
    -0.0031288324389606714,
    0.006394157186150551,
    -0.01990693435072899,
    -0.00016186632274184376,
    0.022720782086253166,
    -0.003324821824207902,
    0.012571326456964016,
    -0.029706409201025963,
    -0.023532738909125328,
    0.003692302154377103,
    0.019206970930099487,
    -0.02476467378437519,
    -0.026360588148236275,
    -0.03928189352154732
  ]
}
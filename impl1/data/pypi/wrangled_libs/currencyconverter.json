{
  "classifiers": [
    "development status :: 5 - production/stable",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": ".. image:: https://raw.githubusercontent.com/alexprengere/currencyconverter/master/logo/cc3.png\n\n|actions|_ |cratev|_ |crated|_\n\n.. _actions : https://github.com/alexprengere/currencyconverter/actions/workflows/python-package.yml\n.. |actions| image:: https://github.com/alexprengere/currencyconverter/actions/workflows/python-package.yml/badge.svg\n\n.. _cratev : https://pypi.org/project/currencyconverter/\n.. |cratev| image:: https://img.shields.io/pypi/v/currencyconverter.svg\n\n.. _crated : https://pypi.org/project/currencyconverter/\n.. |crated| image:: https://static.pepy.tech/badge/currencyconverter\n\nthis is a currency converter that uses historical rates against a reference currency (euro). it is compatible with python3.6+.\n\ncurrency data sources\n---------------------\n\nthe default source is the `european central bank <https://www.ecb.europa.eu>`_. this is the ecb historical rates for 42 currencies against the euro since 1999.\nit can be downloaded here: `eurofxref-hist.zip <https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist.zip>`_.\nthe converter can use different sources as long as the format is the same.\n\nnote that the currency converter does not query the api in real time, to avoid the overhead of the http request. it uses embedded data in the library, which might not be up to date.\nif you need the latest data, please refer to the *data* section.\n\ninstallation\n------------\n\nyou can install directly after cloning:\n\n.. code-block:: bash\n\n $ python setup.py install --user\n\nor use the python package:\n\n.. code-block:: bash\n\n  $ pip install --user currencyconverter\n\ncommand line tool\n-----------------\n\nafter installation, you should have ``currency_converter`` in your ``$path``:\n\n.. code-block:: bash\n\n $ currency_converter 100 usd --to eur\n 100.000 usd = 87.512 eur on 2016-05-06\n \npython api\n----------\n\ncreate once the currency converter object:\n\n.. code-block:: python\n\n    >>> from currency_converter import currencyconverter\n    >>> c = currencyconverter()\n\nconvert from ``eur`` to ``usd`` using the last available rate:\n\n.. code-block:: python\n\n    >>> c.convert(100, 'eur', 'usd') # doctest: +skip\n    137.5...\n\ndefault target currency is ``eur``:\n\n.. code-block:: python\n\n    >>> c.convert(100, 'eur')\n    100.0\n    >>> c.convert(100, 'usd') # doctest: +skip\n    72.67...\n\nyou can change the date of the rate:\n\n.. code-block:: python\n\n    >>> from datetime import date # datetime works too\n    >>> c.convert(100, 'eur', 'usd', date=date(2013, 3, 21))\n    129...\n\ndata\n~~~~\n\nyou can use your own currency file, as long as it has the same format (ecb):\n\n.. code-block:: python\n\n    from currency_converter import ecb_url, single_day_ecb_url\n\n    # load the packaged data (might not be up to date)\n    c = currencyconverter()\n\n    # download the full history, this will be up to date. current value is:\n    # https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist.zip\n    c = currencyconverter(ecb_url)\n\n    # dowload only the latest available day. current value is:\n    # https://www.ecb.europa.eu/stats/eurofxref/eurofxref.zip\n    c = currencyconverter(single_day_ecb_url)\n\n    # load your custom file\n    c = currencyconverter('./path/to/currency/file.csv')\n\nsince the raw data is updated only once a day, it might be better to only download it once a day:\n\n.. code-block:: python\n\n    import os.path as op\n    import urllib.request\n    from datetime import date\n\n    from currency_converter import ecb_url, currencyconverter\n\n    filename = f\"ecb_{date.today():%y%m%d}.zip\"\n    if not op.isfile(filename):\n        urllib.request.urlretrieve(ecb_url, filename)\n    c = currencyconverter(filename)\n\nfallbacks\n~~~~~~~~~\n\nsome rates are missing:\n\n.. code-block:: python\n\n    >>> c.convert(100, 'bgn', date=date(2010, 11, 21))\n    traceback (most recent call last):\n    ratenotfounderror: bgn has no rate for 2010-11-21\n\nbut we have a fallback mode for those, using a linear interpolation of the\nclosest known rates, as long as you ask for a date within the currency date bounds:\n\n.. code-block:: python\n\n    >>> c = currencyconverter(fallback_on_missing_rate=true)\n    >>> c.convert(100, 'bgn', date=date(2010, 11, 21))\n    51.12...\n\nthe fallback method can be configured with the ``fallback_on_missing_rate_method`` parameter, which currently supports ``\"linear_interpolation\"`` and ``\"last_known\"`` values.\n\nwe also have a fallback mode for dates outside the currency bounds:\n\n.. code-block:: python\n\n    >>> c = currencyconverter()\n    >>> c.convert(100, 'eur', 'usd', date=date(1986, 2, 2))\n    traceback (most recent call last):\n    ratenotfounderror: 1986-02-02 not in usd bounds 1999-01-04/2016-04-29\n    >>> \n    >>> c = currencyconverter(fallback_on_wrong_date=true)\n    >>> c.convert(100, 'eur', 'usd', date=date(1986, 2, 2)) # fallback to 1999-01-04\n    117.89...\n\ndecimal\n~~~~~~~\n\nif you need exact conversions, you can use the ``decimal`` option to use ``decimal.decimal`` internally when parsing rates.\nthis will slow down the load time by a factor 10 though.\n\n.. code-block:: python\n\n    >>> c = currencyconverter(decimal=true)\n    >>> c.convert(100, 'eur', 'usd', date=date(2013, 3, 21))\n    decimal('129.100')\n\nother attributes\n~~~~~~~~~~~~~~~~\n\n+ ``bounds`` lets you know the first and last available date for each currency\n\n.. code-block:: python\n\n    >>> first_date, last_date = c.bounds['usd']\n    >>> first_date\n    datetime.date(1999, 1, 4)\n    >>> last_date # doctest: +skip\n    datetime.date(2016, 11, 14)\n\n+ ``currencies`` is a set containing all available currencies\n\n.. code-block:: python\n\n    >>> c.currencies # doctest: +skip\n    set(['sgd', 'cad', 'sek', 'gbp', ...\n    >>> 'aaa' in c.currencies\n    false\n    >>> c.convert(100, 'aaa')\n    traceback (most recent call last):\n    valueerror: aaa is not a supported currency\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "currencyconverter",
  "package_url": "https://pypi.org/project/CurrencyConverter/",
  "project_url": "https://pypi.org/project/CurrencyConverter/",
  "project_urls": {
    "Homepage": "https://github.com/alexprengere/currencyconverter"
  },
  "release_url": "https://pypi.org/project/CurrencyConverter/0.17.14/",
  "requires_dist": [],
  "requires_python": ">=3.6.1",
  "summary": "a currency converter using the european central bank data.",
  "version": "0.17.14",
  "releases": [],
  "developers": [
    "alex.prengere@gmail.com"
  ],
  "kwds": "currency_converter currencyconverter currency usd currencies",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_currencyconverter",
  "homepage": "https://github.com/alexprengere/currencyconverter",
  "release_count": 56,
  "dependency_ids": []
}
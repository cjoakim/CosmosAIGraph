{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "signxml: xml signature and xades in python\n==========================================\n\n*signxml* is an implementation of the w3c `xml signature <http://en.wikipedia.org/wiki/xml_signature>`_ standard in\npython. this standard (also known as \"xmldsig\") is used to provide payload security in `saml 2.0\n<http://en.wikipedia.org/wiki/saml_2.0>`_, `xades <https://en.wikipedia.org/wiki/xades>`_, and `ws-security\n<https://en.wikipedia.org/wiki/ws-security>`_, among other uses. the standard is defined in the `w3c recommendation\n<https://www.w3.org/standards/types#rec>`_ `xml signature syntax and processing version 1.1\n<http://www.w3.org/tr/xmldsig-core1/>`_. *signxml* implements all of the required components of the version 1.1\nstandard, and most recommended ones. its features are:\n\n* use of a libxml2-based xml parser configured to defend against\n  `common xml attacks <https://docs.python.org/3/library/xml.html#xml-vulnerabilities>`_ when verifying signatures\n* extensions to allow signing with and verifying x.509 certificate chains, including hostname/cn validation\n* extensions to sign and verify `xades <https://en.wikipedia.org/wiki/xades>`_ signatures\n* support for exclusive xml canonicalization with inclusive prefixes (`inclusivenamespaces prefixlist\n  <http://www.w3.org/tr/xml-exc-c14n/#def-inclusivenamespaces-prefixlist>`_, required to verify signatures generated by\n  some saml implementations)\n* modern python compatibility (3.7-3.11+ and pypy)\n* well-supported, portable, reliable dependencies: `lxml <https://github.com/lxml/lxml>`_,\n  `cryptography <https://github.com/pyca/cryptography>`_, `pyopenssl <https://github.com/pyca/pyopenssl>`_\n* comprehensive testing (including the xmldsig interoperability suite) and `continuous integration\n  <https://github.com/xml-security/signxml/actions>`_\n* simple interface with useful, ergonomic, and secure defaults (no network calls, xslt or xpath transforms)\n* compactness, readability, and extensibility\n\ninstallation\n------------\n::\n\n    pip install signxml\n\nnote: signxml depends on `lxml <https://github.com/lxml/lxml>`_ and `cryptography\n<https://github.com/pyca/cryptography>`_, which in turn depend on `openssl <https://www.openssl.org/>`_, `libxml\n<http://xmlsoft.org/>`_, and python tools to interface with them. you can install those as follows:\n\n+--------------+----------------------------------------------------------------------------------------------------------------------+\n| os           | command                                                                                                              |\n+==============+======================================================================================================================+\n| ubuntu       | ``apt-get install --no-install-recommends python3-pip python3-wheel python3-setuptools python3-openssl python3-lxml``|\n+--------------+----------------------------------------------------------------------------------------------------------------------+\n| red hat,     | ``yum install python3-pip python3-pyopenssl python3-lxml``                                                           |\n| amazon linux,|                                                                                                                      |\n| centos       |                                                                                                                      |\n+--------------+----------------------------------------------------------------------------------------------------------------------+\n| mac os       | install `homebrew <https://brew.sh>`_, then run ``brew install python``.                                             |\n+--------------+----------------------------------------------------------------------------------------------------------------------+\n\nsynopsis\n--------\nsignxml uses the `lxml elementtree api <https://lxml.de/tutorial.html>`_ to work with xml data.\n\n.. code-block:: python\n\n    from lxml import etree\n    from signxml import xmlsigner, xmlverifier\n\n    data_to_sign = \"<test/>\"\n    cert = open(\"cert.pem\").read()\n    key = open(\"privkey.pem\").read()\n    root = etree.fromstring(data_to_sign)\n    signed_root = xmlsigner().sign(root, key=key, cert=cert)\n    verified_data = xmlverifier().verify(signed_root).signed_xml\n\nto make this example self-sufficient for test purposes:\n\n- generate a test certificate and key using\n  ``openssl req -x509 -nodes -subj \"/cn=test\" -days 1 -newkey rsa -keyout privkey.pem -out cert.pem``\n  (run ``yum install openssl`` on red hat).\n- pass the ``x509_cert=cert`` keyword argument to ``xmlverifier.verify()``. (in production, ensure this is replaced with\n  the correct configuration for the trusted ca or certificate - this determines which signatures your application trusts.)\n\n.. _verifying-saml-assertions:\n\nverifying saml assertions\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nassuming ``metadata.xml`` contains saml metadata for the assertion source:\n\n.. code-block:: python\n\n    from lxml import etree\n    from base64 import b64decode\n    from signxml import xmlverifier\n\n    with open(\"metadata.xml\", \"rb\") as fh:\n        cert = etree.parse(fh).find(\"//ds:x509certificate\").text\n\n    assertion_data = xmlverifier().verify(b64decode(assertion_body), x509_cert=cert).signed_xml\n\n.. admonition:: signing saml assertions\n\n the saml assertion schema specifies a location for the enveloped xml signature (between ``<issuer>`` and\n ``<subject>``). to sign a saml assertion in a schema-compliant way, insert a signature placeholder tag at that location\n before calling xmlsigner: ``<ds:signature id=\"placeholder\"></ds:signature>``.\n\n.. admonition:: see what is signed\n\n it is important to understand and follow the best practice rule of \"see what is signed\" when verifying xml\n signatures. the gist of this rule is: if your application neglects to verify that the information it trusts is\n what was actually signed, the attacker can supply a valid signature but point you to malicious data that wasn't signed\n by that signature. failure to follow this rule can lead to vulnerability against attacks like\n `saml signature wrapping <https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final91.pdf>`_.\n\n in signxml, you can ensure that the information signed is what you expect to be signed by only trusting the\n data returned by the ``verify()`` method. the ``signed_xml`` attribute of the return value is the xml node or string that\n was signed.\n\n **recommended reading:** `w3c xml signature best practices for applications\n <http://www.w3.org/tr/xmldsig-bestpractices/#practices-applications>`_, `on breaking saml: be whoever you want to be\n <https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final91.pdf>`_, `duo finds saml vulnerabilities\n affecting multiple implementations <https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations>`_\n\n.. admonition:: establish trust\n\n if you do not supply any keyword arguments to ``verify()``, the default behavior is to trust **any** valid xml\n signature generated using a valid x.509 certificate trusted by your system's ca store. this means anyone can\n get an ssl certificate and generate a signature that you will trust. to establish trust in the signer, use the\n ``x509_cert`` argument to specify a certificate that was pre-shared out-of-band (e.g. via saml metadata, as\n shown in *verifying saml assertions*), or ``cert_subject_name`` to specify a\n subject name that must be in the signing x.509 certificate given by the signature (verified as if it were a\n domain name), or ``ca_pem_file``/``ca_path`` to give a custom ca.\n\nxml signature construction methods: enveloped, detached, enveloping\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nthe xml signature specification defines three ways to compose a signature with the data being signed: enveloped,\ndetached, and enveloping signature. enveloped is the default method. to specify the type of signature that you want to\ngenerate, pass the ``method`` argument to ``sign()``:\n\n.. code-block:: python\n\n    signed_root = xmlsigner(method=signxml.methods.detached).sign(root, key=key, cert=cert)\n    verified_data = xmlverifier().verify(signed_root).signed_xml\n\nfor detached signatures, the code above will use the ``id`` or ``id`` attribute of ``root`` to generate a relative uri\n(``<reference uri=\"#value\"``). you can also override the value of ``uri`` by passing a ``reference_uri`` argument to\n``sign()``. to verify a detached signature that refers to an external entity, pass a callable resolver in\n``xmlverifier().verify(data, uri_resolver=...)``.\n\nsee the `api documentation <https://xml-security.github.io/signxml/#id5>`_ for more details.\n\n\nxml representation details: configuring namespace prefixes and whitespace\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsome applications require a particular namespace prefix configuration - for example, a number of applications assume\nthat the ``http://www.w3.org/2000/09/xmldsig#`` namespace is set as the default, unprefixed namespace instead of using\nthe customary ``ds:`` prefix. while in normal use namespace prefix naming is an insignificant representation detail,\nit can be significant in some xml canonicalization and signature configurations. to configure the namespace prefix map\nwhen generating a signature, set the ``xmlsigner.namespaces`` attribute:\n\n.. code-block:: python\n\n    signer = signxml.xmlsigner(...)\n    signer.namespaces = {none: signxml.namespaces.ds}\n    signed_root = signer.sign(...)\n\nsimilarly, whitespace in the signed document is significant for xml canonicalization and signature purposes. do not\npretty-print the xml after generating the signature, since this can unfortunately render the signature invalid.\n\n\nxml parsing security and compatibility with ``xml.etree.elementtree``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsignxml uses the `lxml <https://github.com/lxml/lxml>`_ elementtree library, not the\n`elementtree from python's standard library <https://docs.python.org/3.8/library/xml.etree.elementtree.html>`_,\nto work with xml. lxml is used due to its superior resistance to xml attacks, as well as xml canonicalization and\nnamespace organization features. it is recommended that you pass xml string input directly to signxml before further\nparsing, and use lxml to work with untrusted xml input in general. if you do pass ``xml.etree.elementtree`` objects to\nsignxml, you should be aware of differences in xml namespace handling between the two libraries. see the following\nreferences for more information:\n\n* `how do i use lxml safely as a web-service endpoint?\n  <https://lxml.de/faq.html#how-do-i-use-lxml-safely-as-a-web-service-endpoint>`_\n* `elementtree compatibility of lxml.etree <https://lxml.de/compatibility.html>`_\n* `xml signatures with python elementtree <https://technotes.shemyak.com/posts/xml-signatures-with-python-elementtree>`_\n\n\nxades signatures\n~~~~~~~~~~~~~~~~\n`xades (\"xml advanced electronic signatures\") <https://en.wikipedia.org/wiki/xades>`_ is a standard for attaching\nmetadata to xml signature objects. this standard is endorsed by the european union as the implementation for its\n`esignature <https://ec.europa.eu/digital-building-blocks/wikis/display/digital/esignature+overview>`_ regulations.\n\nsignxml supports signing and verifying documents using `xades <https://en.wikipedia.org/wiki/xades>`_ signatures:\n\n.. code-block:: python\n\n    from signxml import digestalgorithm\n    from signxml.xades import (xadessigner, xadesverifier, xadesverifyresult,\n                               xadessignaturepolicy, xadesdataobjectformat)\n    signature_policy = xadessignaturepolicy(\n        identifier=\"mypolicyidentifier\",\n        description=\"hello xades\",\n        digestmethod=digestalgorithm.sha256,\n        digestvalue=\"ohixl6upd6av8n7pevdabhel6hm=\",\n    )\n    data_object_format = xadesdataobjectformat(\n        description=\"my xades signature\",\n        mimetype=\"text/xml\",\n    )\n    signer = xadessigner(\n        signature_policy=signature_policy,\n        claimed_roles=[\"signer\"],\n        data_object_format=data_object_format,\n        c14n_algorithm=\"http://www.w3.org/tr/2001/rec-xml-c14n-20010315\",\n    )\n    signed_doc = signer.sign(doc, key=private_key, cert=certificate)\n\n.. code-block:: python\n\n    verifier = xadesverifier()\n    verify_results = verifier.verify(\n        signed_doc, x509_cert=certificate, expect_references=3, expect_signature_policy=signature_policy\n    )\n    for verify_result in verify_results:\n        if isinstance(verify_result, xadesverifyresult):\n            verify_result.signed_properties  # use this to access parsed xades properties\n\nauthors\n-------\n* `andrey kislyuk <https://github.com/kislyuk>`_ and signxml contributors.\n\nlinks\n-----\n* `project home page (github) <https://github.com/xml-security/signxml>`_\n* `documentation <https://xml-security.github.io/signxml/>`_\n* `package distribution (pypi) <https://pypi.python.org/pypi/signxml>`_\n* `change log <https://github.com/xml-security/signxml/blob/master/changes.rst>`_\n* `list of w3c xml signature standards and drafts <https://www.w3.org/tr/?title=xml%20signature>`_\n* `w3c recommendation: xml signature syntax and processing version 1.1 <http://www.w3.org/tr/xmldsig-core1>`_\n* `w3c working group note: xml signature best practices <http://www.w3.org/tr/xmldsig-bestpractices/>`_\n* `xml-signature interoperability <http://www.w3.org/signature/2001/04/05-xmldsig-interop.html>`_\n* `w3c working group note: test cases for c14n 1.1 and xmldsig interoperability <http://www.w3.org/tr/xmldsig2ed-tests/>`_\n* `w3c working group note: xml signature syntax and processing version 2.0 <http://www.w3.org/tr/xmldsig-core2>`_\n  (this draft standard proposal was never finalized and is not in general use.)\n* `intelligence community technical specification: web service security guidance for use of xml signature and xml\n  encryption <https://github.com/xml-security/signxml/blob/develop/docs/dni-guidance.pdf>`_\n* `xmlsec: related links <https://www.aleksey.com/xmlsec/related.html>`_\n* `owasp saml security cheat sheet <https://www.owasp.org/index.php/saml_security_cheat_sheet>`_\n* `okta developer docs: saml <https://developer.okta.com/standards/saml/>`_\n\nbugs\n~~~~\nplease report bugs, issues, feature requests, etc. on `github <https://github.com/xml-security/signxml/issues>`_.\n\nversioning\n~~~~~~~~~~\nthis package follows the `semantic versioning 2.0.0 <http://semver.org/>`_ standard. to control changes, it is\nrecommended that application developers pin the package version and manage it using `pip-tools\n<https://github.com/jazzband/pip-tools>`_ or similar. for library developers, pinning the major version is\nrecommended.\n\nlicense\n-------\ncopyright 2014-2023, andrey kislyuk and signxml contributors. licensed under the terms of the\n`apache license, version 2.0 <http://www.apache.org/licenses/license-2.0>`_. distribution of the license and notice\nfiles with source copies of this package and derivative works is **required** as specified by the apache license.\n\n.. image:: https://github.com/xml-security/signxml/workflows/test%20suite/badge.svg\n        :target: https://github.com/xml-security/signxml/actions\n.. image:: https://codecov.io/github/xml-security/signxml/coverage.svg?branch=master\n        :target: https://codecov.io/github/xml-security/signxml?branch=master\n.. image:: https://img.shields.io/pypi/v/signxml.svg\n        :target: https://pypi.python.org/pypi/signxml\n.. image:: https://img.shields.io/pypi/l/signxml.svg\n        :target: https://pypi.python.org/pypi/signxml\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "signxml",
  "package_url": "https://pypi.org/project/signxml/",
  "project_url": "https://pypi.org/project/signxml/",
  "project_urls": {
    "Homepage": "https://github.com/kislyuk/signxml"
  },
  "release_url": "https://pypi.org/project/signxml/3.2.1/",
  "requires_dist": [
    "lxml <5,>=4.2.1",
    "cryptography >=3.4.8",
    "pyOpenSSL >=17.5.0",
    "certifi >=2018.1.18",
    "ruff ; extra == 'tests'",
    "coverage ; extra == 'tests'",
    "build ; extra == 'tests'",
    "wheel ; extra == 'tests'",
    "mypy ; extra == 'tests'",
    "lxml-stubs ; extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "python xml signature and xades library",
  "version": "3.2.1",
  "releases": [],
  "developers": [
    "andrey_kislyuk",
    "kislyuk@gmail.com"
  ],
  "kwds": "xml_signature signed_xml signxml xml xmldsig",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_signxml",
  "homepage": "https://github.com/kislyuk/signxml",
  "release_count": 72,
  "dependency_ids": [
    "pypi_build",
    "pypi_certifi",
    "pypi_coverage",
    "pypi_cryptography",
    "pypi_lxml",
    "pypi_lxml_stubs",
    "pypi_mypy",
    "pypi_pyopenssl",
    "pypi_ruff",
    "pypi_wheel"
  ]
}
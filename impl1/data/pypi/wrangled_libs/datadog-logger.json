{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": "# datadog logger #\n\na python `logging.handler` for sending log messages to datadog as\nevents\n\n## installation ##\n\n```\npip install datadog-logger\n```\n\n## usage ##\n\nthe simplest way to enable logging to datadog is to use the\n`log_error_events` helper, which will cause all `logging.error` and\nhigher messages to be sent to datadog:\n\n```python\nimport datadog\nfrom datadog_logger import log_error_events\nimport logging\n\n# authenticate with datadog\ndatadog.initialize(api_key=\"api-key\", app_key=\"app-key\")\n\n# note, a normal stdout handler will not be configured if this is not\n# called first\nlogging.basicconfig()\n\nlog_error_events(tags=[\"tag1:value\", \"tag2:value\"], mentions=[\"@devs\", \"@slack\"])\n\nlogging.error(\"oh no!\")\n```\n\nthis will enable the handler on the root logger; `tags` and `mentions`\nmay both be `none`, in which case none will be included. the handler\nwill have a log level of `logging.error`, meaning only `error` and\n`critical` (or any higher custom levels) will be sent to datadog.\n\na specific logger may also be specified by name:\n\n```python\nlog_error_events(\"some.logger\")\n```\n\n### details ###\n\nthe `handler` may also be created and added to a logger manually:\n\n```python\nimport datadog\nfrom datadog_logger import datadogloghandler\nimport logging\n\ndatadog.initialize(api_key=\"api-key\", app_key=\"app-key\")\n\ndatadog_handler = datadogloghandler(\n    tags=[\"some:tag\"], mentions=[\"@some-mention\"], level=logging.warning)\n\n# enable stdout logging\nlogging.basicconfig()\n\n# the root logger\nlogger = logging.getlogger()\nlogger.addhandler(datadog_handler)\n\n# this will be logged, because the level is warning\nlogger.warning(\"watch out!\")\n\n# this will not\nlogger.info(\"lets not log everything to datadog\")\n```\n\nwhen the event is created, the `msg` of the log record will be passed\nas the title of the event. normally, this would be the string passed\ninto the logging call, with any `%` substitutions applied.\n\nthe text of the event will be the formatted record. if the log\nrecord includes `exc_info` (i.e. because you called\n`logging.exception`, or passed `exc_info` to the log function), then\nthe full stack trace will be included in the event text.\n\nany `@mentions` passed via the `mentions` constructor argument will be\nappended to the end of the text, so this library can be used to alert,\nvia datadog, on particular log messages.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "datadog-logger",
  "package_url": "https://pypi.org/project/datadog-logger/",
  "project_url": "https://pypi.org/project/datadog-logger/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/datadog-logger/1.0.0/",
  "requires_dist": [
    "datadog (>=0.45.0,<0.46.0)"
  ],
  "requires_python": ">=3.9,<4.0",
  "summary": "python logging handler for datadog events",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "dev@ustudio.com",
    "ustudio_developers"
  ],
  "kwds": "datadog_logger datadog_handler datadogloghandler log_error_events logging",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_datadog_logger",
  "homepage": "",
  "release_count": 4,
  "dependency_ids": [
    "pypi_datadog"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: rust",
    "topic :: database",
    "topic :: software development :: embedded systems"
  ],
  "description": "# rocksdict / speedict\n\n**key-value storage for python & wrapper of rocksdb and speedb**\n\n![ci](https://github.com/congyuwang/rocksdict/actions/workflows/ci.yml/badge.svg)\n![pypi](https://img.shields.io/pypi/dm/rocksdict)\n![pypi](https://img.shields.io/pypi/wheel/rocksdict)\n[![support python versions](https://img.shields.io/pypi/pyversions/rocksdict.svg)](https://pypi.org/project/rocksdict/)\n\n## installation\n\nwheels available, just \n- `pip install rocksdict` for rocksdb backend, then `from rocksdict import rdict`\n- `pip install speedict` for speedb backend, then `from speedict import rdict`\n\n## introduction\n\nthis library has two purposes.\n\n1. as an on-disk key-value storage solution for python.\n2. as a rocksdb / speedict interface.\n\nthese two purposes operate in different modes:\n\n- **default mode**, which allows storing `int`, `float`, \n`bool`, `str`, `bytes`, and other python objects (with `pickle`).\n\n- **raw mode** (`options=options(raw_mode=true)`),\nwhich allows storing only `bytes`.\n\n## examples\n\n### a minimal example\n\n```python\nfrom rocksdict import rdict\nimport numpy as np\nimport pandas as pd\n\npath = str(\"./test_dict\")\n\n# create a rdict with default options at `path`\ndb = rdict(path)\ndb[1.0] = 1\ndb[\"huge integer\"] = 2343546543243564534233536434567543\ndb[\"good\"] = true\ndb[\"bytes\"] = b\"bytes\"\ndb[\"this is a list\"] = [1, 2, 3]\ndb[\"store a dict\"] = {0: 1}\ndb[b\"numpy\"] = np.array([1, 2, 3])\ndb[\"a table\"] = pd.dataframe({\"a\": [1, 2], \"b\": [2, 1]})\n\n# reopen rdict from disk\ndb.close()\ndb = rdict(path)\nassert db[1.0] == 1\nassert db[\"huge integer\"] == 2343546543243564534233536434567543\nassert db[\"good\"] == true\nassert db[\"bytes\"] == b\"bytes\"\nassert db[\"this is a list\"] == [1, 2, 3]\nassert db[\"store a dict\"] == {0: 1}\nassert np.all(db[b\"numpy\"] == np.array([1, 2, 3]))\nassert np.all(db[\"a table\"] == pd.dataframe({\"a\": [1, 2], \"b\": [2, 1]}))\n\n# iterate through all elements\nfor k, v in db.items():\n    print(f\"{k} -> {v}\")\n\n# batch get:\nprint(db[[\"good\", \"bad\", 1.0]])\n# [true, false, 1]\n \n# delete rdict from dict\ndb.close()\nrdict.destroy(path)\n```\n\n### an example of raw mode\n\nthis mode allows only bytes as keys and values.\n\n```python\nfrom rocksdict import rdict, options\n\npath_to_rocksdb = str(\"path\")\n\n# open raw_mode, which allows only bytes\ndb = rdict(path=path_to_rocksdb, options=options(raw_mode=true))\n\ndb[b'a'] = b'a'\ndb[b'b'] = b'b'\ndb[b'c'] = b'c'\ndb[b'd'] = b'd'\n\nfor k, v in db.items():\n    print(f\"{k} -> {v}\")\n\n# close and delete\ndb.close()\nrdict.destroy(path_to_rocksdb)\n```\n\n## new feature since v0.3.3\n\nloading options from rocksdict path.\n\n### load options and add a new columnfamily\n```python\nfrom rocksdict import options, rdict\npath = str(\"./rocksdict_path\")\n\nopts, cols = options.load_latest(path)\nopts.create_missing_column_families(true)\ncols[\"bytes\"] = options()\nself.test_dict = rdict(path, options=opts, column_families=cols)\n```\n\n### reopening rocksdb reads db options automatically\n\n```python\nimport shutil\n\nfrom rocksdict import rdict, options, slicetransform, plaintablefactoryoptions\nimport os\n\ndef db_options():\n    opt = options()\n    # create table\n    opt.create_if_missing(true)\n    # config to more jobs\n    opt.set_max_background_jobs(os.cpu_count())\n    # configure mem-table to a large value (256 mb)\n    opt.set_write_buffer_size(0x10000000)\n    opt.set_level_zero_file_num_compaction_trigger(4)\n    # configure l0 and l1 size, let them have the same size (1 gb)\n    opt.set_max_bytes_for_level_base(0x40000000)\n    # 256 mb file size\n    opt.set_target_file_size_base(0x10000000)\n    # use a smaller compaction multiplier\n    opt.set_max_bytes_for_level_multiplier(4.0)\n    # use 8-byte prefix (2 ^ 64 is far enough for transaction counts)\n    opt.set_prefix_extractor(slicetransform.create_max_len_prefix(8))\n    # set to plain-table\n    opt.set_plain_table_factory(plaintablefactoryoptions())\n    return opt\n\n\n# create db\ndb = rdict(\"./some_path\", db_options())\ndb[0] = 1\ndb.close()\n\n# automatic reloading all options on reopening\ndb = rdict(\"./some_path\")\nassert db[0] == 1\n\n# destroy\ndb.close()\nrdict.destroy(\"./some_path\")\n```\n\n## more examples on batchwrite, sstfilewrite, snapshot, rocksdb options, and etc.\n\ngo to [example](https://github.com/congyuwang/rocksdict/tree/main/examples) folder.\n\n## limitations\n\ncurrently, do not support merge operation and custom comparator.\n\n## full documentation\n\nsee [rocksdict documentation](https://congyuwang.github.io/rocksdict/rocksdict.html).\n\n",
  "docs_url": null,
  "keywords": "rocksdb,dbm,dict,key-value",
  "license": "",
  "name": "rocksdict",
  "package_url": "https://pypi.org/project/rocksdict/",
  "project_url": "https://pypi.org/project/rocksdict/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/rocksdict/0.3.20/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "rocksdb python binding",
  "version": "0.3.20",
  "releases": [],
  "developers": [],
  "kwds": "rocksdict_path path_to_rocksdb rocksdict rocksdb python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_rocksdict",
  "homepage": "",
  "release_count": 40,
  "dependency_ids": []
}
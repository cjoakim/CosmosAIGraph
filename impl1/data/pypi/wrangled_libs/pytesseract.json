{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "python tesseract\n================\n\n.. image:: https://img.shields.io/pypi/pyversions/pytesseract.svg\n   :target: https://pypi.python.org/pypi/pytesseract\n   :alt: python versions\n\n.. image:: \thttps://img.shields.io/github/release/madmaze/pytesseract.svg\n   :target: https://github.com/madmaze/pytesseract/releases\n   :alt: github release\n\n.. image:: https://img.shields.io/pypi/v/pytesseract.svg?color=blue\n   :target: https://pypi.python.org/pypi/pytesseract\n   :alt: pypi release\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytesseract.svg?color=blue\n   :target: https://anaconda.org/conda-forge/pytesseract\n   :alt: conda release\n\n.. image:: https://results.pre-commit.ci/badge/github/madmaze/pytesseract/master.svg\n   :target: https://results.pre-commit.ci/latest/github/madmaze/pytesseract/master\n   :alt: pre-commit ci status\n\n.. image:: https://github.com/madmaze/pytesseract/workflows/ci/badge.svg?branch=master\n    :target: https://github.com/madmaze/pytesseract/actions?query=workflow%3aci\n    :alt: ci workflow status\n\npython-tesseract is an optical character recognition (ocr) tool for python.\nthat is, it will recognize and \"read\" the text embedded in images.\n\npython-tesseract is a wrapper for `google's tesseract-ocr engine <https://github.com/tesseract-ocr/tesseract>`_.\nit is also useful as a stand-alone invocation script to tesseract, as it can read all image types\nsupported by the pillow and leptonica imaging libraries, including jpeg, png, gif, bmp, tiff,\nand others. additionally, if used as a script, python-tesseract will print the recognized\ntext instead of writing it to a file.\n\nusage\n-----\n\n**quickstart**\n\n*note*: test images are located in the ``tests/data`` folder of the git repo.\n\nlibrary usage:\n\n.. code-block:: python\n\n    from pil import image\n\n    import pytesseract\n\n    # if you don't have tesseract executable in your path, include the following:\n    pytesseract.pytesseract.tesseract_cmd = r'<full_path_to_your_tesseract_executable>'\n    # example tesseract_cmd = r'c:\\program files (x86)\\tesseract-ocr\\tesseract'\n\n    # simple image to string\n    print(pytesseract.image_to_string(image.open('test.png')))\n\n    # in order to bypass the image conversions of pytesseract, just use relative or absolute image path\n    # note: in this case you should provide tesseract supported images or tesseract will return error\n    print(pytesseract.image_to_string('test.png'))\n\n    # list of available languages\n    print(pytesseract.get_languages(config=''))\n\n    # french text image to string\n    print(pytesseract.image_to_string(image.open('test-european.jpg'), lang='fra'))\n\n    # batch processing with a single file containing the list of multiple image file paths\n    print(pytesseract.image_to_string('images.txt'))\n\n    # timeout/terminate the tesseract job after a period of time\n    try:\n        print(pytesseract.image_to_string('test.jpg', timeout=2)) # timeout after 2 seconds\n        print(pytesseract.image_to_string('test.jpg', timeout=0.5)) # timeout after half a second\n    except runtimeerror as timeout_error:\n        # tesseract processing is terminated\n        pass\n\n    # get bounding box estimates\n    print(pytesseract.image_to_boxes(image.open('test.png')))\n\n    # get verbose data including boxes, confidences, line and page numbers\n    print(pytesseract.image_to_data(image.open('test.png')))\n\n    # get information about orientation and script detection\n    print(pytesseract.image_to_osd(image.open('test.png')))\n\n    # get a searchable pdf\n    pdf = pytesseract.image_to_pdf_or_hocr('test.png', extension='pdf')\n    with open('test.pdf', 'w+b') as f:\n        f.write(pdf) # pdf type is bytes by default\n\n    # get hocr output\n    hocr = pytesseract.image_to_pdf_or_hocr('test.png', extension='hocr')\n\n    # get alto xml output\n    xml = pytesseract.image_to_alto_xml('test.png')\n\nsupport for opencv image/numpy array objects\n\n.. code-block:: python\n\n    import cv2\n\n    img_cv = cv2.imread(r'/<path_to_image>/digits.png')\n\n    # by default opencv stores images in bgr format and since pytesseract assumes rgb format,\n    # we need to convert from bgr to rgb format/mode:\n    img_rgb = cv2.cvtcolor(img_cv, cv2.color_bgr2rgb)\n    print(pytesseract.image_to_string(img_rgb))\n    # or\n    img_rgb = image.frombytes('rgb', img_cv.shape[:2], img_cv, 'raw', 'bgr', 0, 0)\n    print(pytesseract.image_to_string(img_rgb))\n\n\nif you need custom configuration like `oem`/`psm`, use the **config** keyword.\n\n.. code-block:: python\n\n    # example of adding any additional options\n    custom_oem_psm_config = r'--oem 3 --psm 6'\n    pytesseract.image_to_string(image, config=custom_oem_psm_config)\n\n    # example of using pre-defined tesseract config file with options\n    cfg_filename = 'words'\n    pytesseract.run_and_get_output(image, extension='txt', config=cfg_filename)\n\nadd the following config, if you have tessdata error like: \"error opening data file...\"\n\n.. code-block:: python\n\n    # example config: r'--tessdata-dir \"c:\\program files (x86)\\tesseract-ocr\\tessdata\"'\n    # it's important to add double quotes around the dir path.\n    tessdata_dir_config = r'--tessdata-dir \"<replace_with_your_tessdata_dir_path>\"'\n    pytesseract.image_to_string(image, lang='chi_sim', config=tessdata_dir_config)\n\n**functions**\n\n* **get_languages** returns all currently supported languages by tesseract ocr.\n\n* **get_tesseract_version** returns the tesseract version installed in the system.\n\n* **image_to_string** returns unmodified output as string from tesseract ocr processing\n\n* **image_to_boxes** returns result containing recognized characters and their box boundaries\n\n* **image_to_data** returns result containing box boundaries, confidences, and other information. requires tesseract 3.05+. for more information, please check the `tesseract tsv documentation <https://github.com/tesseract-ocr/tesseract/wiki/command-line-usage#tsv-output-currently-available-in-305-dev-in-master-branch-on-github>`_\n\n* **image_to_osd** returns result containing information about orientation and script detection.\n\n* **image_to_alto_xml** returns result in the form of tesseract's alto xml format.\n\n* **run_and_get_output** returns the raw output from tesseract ocr. gives a bit more control over the parameters that are sent to tesseract.\n\n**parameters**\n\n``image_to_data(image, lang=none, config='', nice=0, output_type=output.string, timeout=0, pandas_config=none)``\n\n* **image** object or string - pil image/numpy array or file path of the image to be processed by tesseract. if you pass object instead of file path, pytesseract will implicitly convert the image to `rgb mode <https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes>`_.\n\n* **lang** string - tesseract language code string. defaults to ``eng`` if not specified! example for multiple languages: ``lang='eng+fra'``\n\n* **config** string - any **additional custom configuration flags** that are not available via the pytesseract function. for example: ``config='--psm 6'``\n\n* **nice** integer - modifies the processor priority for the tesseract run. not supported on windows. nice adjusts the niceness of unix-like processes.\n\n* **output_type** class attribute - specifies the type of the output, defaults to ``string``.  for the full list of all supported types, please check the definition of `pytesseract.output <https://github.com/madmaze/pytesseract/blob/master/pytesseract/pytesseract.py>`_ class.\n\n* **timeout** integer or float - duration in seconds for the ocr processing, after which, pytesseract will terminate and raise runtimeerror.\n\n* **pandas_config** dict - only for the **output.dataframe** type. dictionary with custom arguments for `pandas.read_csv <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas-read-csv>`_. allows you to customize the output of **image_to_data**.\n\ncli usage:\n\n.. code-block:: bash\n\n    pytesseract [-l lang] image_file\n\ninstallation\n------------\n\nprerequisites:\n\n- python-tesseract requires python 3.6+\n- you will need the python imaging library (pil) (or the `pillow <https://pypi.org/project/pillow/>`_ fork).\n  under debian/ubuntu, this is the package **python-imaging** or **python3-imaging**.\n- install `google tesseract ocr <https://github.com/tesseract-ocr/tesseract>`_\n  (additional info how to install the engine on linux, mac osx and windows).\n  you must be able to invoke the tesseract command as *tesseract*. if this\n  isn't the case, for example because tesseract isn't in your path, you will\n  have to change the \"tesseract_cmd\" variable ``pytesseract.pytesseract.tesseract_cmd``.\n  under debian/ubuntu you can use the package **tesseract-ocr**.\n  for mac os users. please install homebrew package **tesseract**.\n\n  *note:* in some rare cases, you might need to additionally install ``tessconfigs`` and ``configs`` from `tesseract-ocr/tessconfigs <https://github.com/tesseract-ocr/tessconfigs>`_ if the os specific package doesn't include them.\n\n| installing via pip:\n\ncheck the `pytesseract package page <https://pypi.python.org/pypi/pytesseract>`_ for more information.\n\n.. code-block:: bash\n\n    pip install pytesseract\n\n| or if you have git installed:\n\n.. code-block:: bash\n\n    pip install -u git+https://github.com/madmaze/pytesseract.git\n\n| installing from source:\n\n.. code-block:: bash\n\n    git clone https://github.com/madmaze/pytesseract.git\n    cd pytesseract && pip install -u .\n\n| install with conda (via `conda-forge <https://anaconda.org/conda-forge/pytesseract>`_):\n\n.. code-block:: bash\n\n    conda install -c conda-forge pytesseract\n\ntesting\n-------\n\nto run this project's test suite, install and run ``tox``. ensure that you have ``tesseract``\ninstalled and in your path.\n\n.. code-block:: bash\n\n    pip install tox\n    tox\n\nlicense\n-------\ncheck the license file included in the python-tesseract repository/distribution.\nas of python-tesseract 0.3.1 the license is apache license version 2.0\n\ncontributors\n------------\n- originally written by `samuel hoffstaetter <https://github.com/h>`_\n- `juarez bochi <https://github.com/jbochi>`_\n- `matthias lee <https://github.com/madmaze>`_\n- `lars kistner <https://github.com/sr4l>`_\n- `ryan mitchell <https://github.com/remitchell>`_\n- `emilio cecchini <https://github.com/ceccoemi>`_\n- `john hagen <https://github.com/johnthagen>`_\n- `darius morawiec <https://github.com/nok>`_\n- `eddie bedada <https://github.com/adbeda>`_\n- `u\u011furcan aky\u00fcz <https://github.com/ugurcanakyuz>`_\n\n\n",
  "docs_url": null,
  "keywords": "python-tesseract ocr python",
  "license": "apache license 2.0",
  "name": "pytesseract",
  "package_url": "https://pypi.org/project/pytesseract/",
  "project_url": "https://pypi.org/project/pytesseract/",
  "project_urls": {
    "Homepage": "https://github.com/madmaze/pytesseract"
  },
  "release_url": "https://pypi.org/project/pytesseract/0.3.10/",
  "requires_dist": [
    "packaging (>=21.3)",
    "Pillow (>=8.0.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "python-tesseract is a python wrapper for google's tesseract-ocr",
  "version": "0.3.10",
  "releases": [],
  "developers": [
    "matthias_lee",
    "pytesseract@madmaze.net",
    "samuel@hoffstaetter.com",
    "samuel_hoffstaetter"
  ],
  "kwds": "full_path_to_your_tesseract_executable tesseract_cmd tesseract get_tesseract_version tessconfigs",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pytesseract",
  "homepage": "https://github.com/madmaze/pytesseract",
  "release_count": 27,
  "dependency_ids": [
    "pypi_packaging",
    "pypi_pillow"
  ]
}
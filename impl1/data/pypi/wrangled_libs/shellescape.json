{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "# shellescape\n\n## description\n\nthe shellescape python module defines the `shellescape.quote()` function that returns a shell-escaped version of a python string.  this is a backport of the `shlex.quote()` function from python 3.8 that makes it accessible to users of python 3 versions < 3.3 and all python 2.x versions.\n\n\n### quote(s)\n\n*from the python documentation*:\n\nreturn a shell-escaped version of the string s. the returned value is a string that can safely be used as one token in a shell command line, for cases where you cannot use a list.\n\nthis idiom would be unsafe:\n\n```python\n>>> filename = 'somefile; rm -rf ~'\n>>> command = 'ls -l {}'.format(filename)\n>>> print(command)  # executed by a shell: boom!\nls -l somefile; rm -rf ~\n```\n\n`quote()` lets you plug the security hole:\n\n```python\n>>> command = 'ls -l {}'.format(quote(filename))\n>>> print(command)\nls -l 'somefile; rm -rf ~'\n>>> remote_command = 'ssh home {}'.format(quote(command))\n>>> print(remote_command)\nssh home 'ls -l '\"'\"'somefile; rm -rf ~'\"'\"''\n```\n\nthe quoting is compatible with unix shells and with `shlex.split()`:\n\n```python\n>>> remote_command = split(remote_command)\n>>> remote_command\n['ssh', 'home', \"ls -l 'somefile; rm -rf ~'\"]\n>>> command = split(remote_command[-1])\n>>> command\n['ls', '-l', 'somefile; rm -rf ~']\n```\n\n\n## usage\n\ninclude `shellescape` in your project setup.py file `install_requires` dependency definition list:\n\n```python\nsetup(\n    ...\n    install_requires=['shellescape'],\n    ...\n)\n```\n\nthen import the `quote` function into your module(s) and use it as needed:\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom shellescape import quote\n\nfilename = \"somefile; rm -rf ~\"\nescaped_shell_command = 'ls -l {}'.format(quote(filename))\n```\n\n## license\n\n[license](https://github.com/chrissimpkins/shellescape/blob/master/docs/license)\n\n\n\n\n",
  "docs_url": null,
  "keywords": "shell,quote,escape,backport,command line,command,subprocess",
  "license": "mit license",
  "name": "shellescape",
  "package_url": "https://pypi.org/project/shellescape/",
  "project_url": "https://pypi.org/project/shellescape/",
  "project_urls": {
    "Homepage": "https://github.com/chrissimpkins/shellescape"
  },
  "release_url": "https://pypi.org/project/shellescape/3.8.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "shell escape a string to safely use it as a token in a shell command (backport of cpython shlex.quote for python versions 2.x & < 3.3)",
  "version": "3.8.1",
  "releases": [],
  "developers": [
    "christopher_simpkins",
    "git.simpkins@gmail.com"
  ],
  "kwds": "escaped_shell_command escaped shellescape remote_command shell",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_shellescape",
  "homepage": "https://github.com/chrissimpkins/shellescape",
  "release_count": 3,
  "dependency_ids": []
}
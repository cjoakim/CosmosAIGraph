{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<div align=\"center\"><img src=\"https://raw.githubusercontent.com/optuna/optuna/master/docs/image/optuna-logo.png\" width=\"800\"/></div>\n\n# optuna: a hyperparameter optimization framework\n\n[![python](https://img.shields.io/badge/python-3.7%20%7c%203.8%20%7c%203.9%20%7c%203.10%20%7c%203.11%20%7c%203.12-blue)](https://www.python.org)\n[![pypi](https://img.shields.io/pypi/v/optuna.svg)](https://pypi.python.org/pypi/optuna)\n[![conda](https://img.shields.io/conda/vn/conda-forge/optuna.svg)](https://anaconda.org/conda-forge/optuna)\n[![github license](https://img.shields.io/badge/license-mit-blue.svg)](https://github.com/optuna/optuna)\n[![read the docs](https://readthedocs.org/projects/optuna/badge/?version=stable)](https://optuna.readthedocs.io/en/stable/)\n[![codecov](https://codecov.io/gh/optuna/optuna/branch/master/graph/badge.svg)](https://codecov.io/gh/optuna/optuna)\n\n[**website**](https://optuna.org/)\n| [**docs**](https://optuna.readthedocs.io/en/stable/)\n| [**install guide**](https://optuna.readthedocs.io/en/stable/installation.html)\n| [**tutorial**](https://optuna.readthedocs.io/en/stable/tutorial/index.html)\n| [**examples**](https://github.com/optuna/optuna-examples)\n\n*optuna* is an automatic hyperparameter optimization software framework, particularly designed\nfor machine learning. it features an imperative, *define-by-run* style user api. thanks to our\n*define-by-run* api, the code written with optuna enjoys high modularity, and the user of\noptuna can dynamically construct the search spaces for the hyperparameters.\n\n## key features\n\noptuna has modern functionalities as follows:\n\n- [lightweight, versatile, and platform agnostic architecture](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/001_first.html)\n  - handle a wide variety of tasks with a simple installation that has few requirements.\n- [pythonic search spaces](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/002_configurations.html)\n  - define search spaces using familiar python syntax including conditionals and loops.\n- [efficient optimization algorithms](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/003_efficient_optimization_algorithms.html)\n  - adopt state-of-the-art algorithms for sampling hyperparameters and efficiently pruning unpromising trials.\n- [easy parallelization](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/004_distributed.html)\n  - scale studies to tens or hundreds or workers with little or no changes to the code.\n- [quick visualization](https://optuna.readthedocs.io/en/stable/tutorial/10_key_features/005_visualization.html)\n  - inspect optimization histories from a variety of plotting functions.\n\n\n## basic concepts\n\nwe use the terms *study* and *trial* as follows:\n\n- study: optimization based on an objective function\n- trial: a single execution of the objective function\n\nplease refer to sample code below. the goal of a *study* is to find out the optimal set of\nhyperparameter values (e.g., `regressor` and `svr_c`) through multiple *trials* (e.g.,\n`n_trials=100`). optuna is a framework designed for the automation and the acceleration of the\noptimization *studies*.\n\n[![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](http://colab.research.google.com/github/optuna/optuna-examples/blob/main/quickstart.ipynb)\n\n```python\nimport ...\n\n# define an objective function to be minimized.\ndef objective(trial):\n\n    # invoke suggest methods of a trial object to generate hyperparameters.\n    regressor_name = trial.suggest_categorical('regressor', ['svr', 'randomforest'])\n    if regressor_name == 'svr':\n        svr_c = trial.suggest_float('svr_c', 1e-10, 1e10, log=true)\n        regressor_obj = sklearn.svm.svr(c=svr_c)\n    else:\n        rf_max_depth = trial.suggest_int('rf_max_depth', 2, 32)\n        regressor_obj = sklearn.ensemble.randomforestregressor(max_depth=rf_max_depth)\n\n    x, y = sklearn.datasets.fetch_california_housing(return_x_y=true)\n    x_train, x_val, y_train, y_val = sklearn.model_selection.train_test_split(x, y, random_state=0)\n\n    regressor_obj.fit(x_train, y_train)\n    y_pred = regressor_obj.predict(x_val)\n\n    error = sklearn.metrics.mean_squared_error(y_val, y_pred)\n\n    return error  # an objective value linked with the trial object.\n\nstudy = optuna.create_study()  # create a new study.\nstudy.optimize(objective, n_trials=100)  # invoke optimization of the objective function.\n```\n\n\n## installation\n\noptuna is available at [the python package index](https://pypi.org/project/optuna/) and on [anaconda cloud](https://anaconda.org/conda-forge/optuna).\n\n```bash\n# pypi\n$ pip install optuna\n```\n\n```bash\n# anaconda cloud\n$ conda install -c conda-forge optuna\n```\n\noptuna supports python 3.7 or newer.\n\nalso, we also provide optuna docker images on [dockerhub](https://hub.docker.com/r/optuna/optuna).\n\n\n## examples\n\nexamples can be found in [optuna/optuna-examples](https://github.com/optuna/optuna-examples).\n\n## integrations\n\noptuna has integration features with various third-party libraries. integrations can be found in [optuna/optuna-integration](https://github.com/optuna/optuna-integration) and the document is available [here](https://optuna-integration.readthedocs.io/en/stable/index.html). integrations support libraries such as the following:\n\n* [catalyst](https://github.com/optuna/optuna-examples/tree/main/pytorch/catalyst_simple.py)\n* [catboost](https://github.com/optuna/optuna-examples/tree/main/catboost/catboost_pruning.py)\n* [dask](https://github.com/optuna/optuna-examples/tree/main/dask/dask_simple.py)\n* [fastai (v2)](https://github.com/optuna/optuna-examples/tree/main/fastai/fastaiv2_simple.py)\n* [keras](https://github.com/optuna/optuna-examples/tree/main/keras/keras_integration.py)\n* [lightgbm](https://github.com/optuna/optuna-examples/tree/main/lightgbm/lightgbm_integration.py)\n* [mlflow](https://github.com/optuna/optuna-examples/tree/main/mlflow/keras_mlflow.py)\n* [mxnet](https://github.com/optuna/optuna-examples/tree/main/mxnet/mxnet_integration.py)\n* [pytorch](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_simple.py)\n* [pytorch ignite](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_ignite_simple.py)\n* [pytorch lightning](https://github.com/optuna/optuna-examples/tree/main/pytorch/pytorch_lightning_simple.py)\n* [tensorboard](https://github.com/optuna/optuna-examples/tree/main/tensorboard/tensorboard_simple.py)\n* [tensorflow](https://github.com/optuna/optuna-examples/tree/main/tensorflow/tensorflow_estimator_integration.py)\n* [tf.keras](https://github.com/optuna/optuna-examples/tree/main/tfkeras/tfkeras_integration.py)\n* [weights & biases](https://github.com/optuna/optuna-examples/tree/main/wandb/wandb_integration.py)\n* [xgboost](https://github.com/optuna/optuna-examples/tree/main/xgboost/xgboost_integration.py)\n\n\n## web dashboard\n\n[optuna dashboard](https://github.com/optuna/optuna-dashboard) is a real-time web dashboard for optuna.\nyou can check the optimization history, hyperparameter importances, etc. in graphs and tables.\nyou don't need to create a python script to call [optuna's visualization](https://optuna.readthedocs.io/en/stable/reference/visualization/index.html) functions.\nfeature requests and bug reports welcome!\n\n![optuna-dashboard](https://user-images.githubusercontent.com/5564044/204975098-95c2cb8c-0fb5-4388-abc4-da32f56cb4e5.gif)\n\ninstall `optuna-dashboard` via pip:\n\n```\n$ pip install optuna-dashboard\n$ optuna-dashboard sqlite:///db.sqlite3\n...\nlistening on http://localhost:8080/\nhit ctrl-c to quit.\n```\n\n\n## communication\n\n- [github discussions] for questions.\n- [github issues] for bug reports and feature requests.\n\n[github discussions]: https://github.com/optuna/optuna/discussions\n[github issues]: https://github.com/optuna/optuna/issues\n\n\n## contribution\n\nany contributions to optuna are more than welcome!\n\nif you are new to optuna, please check the [good first issues](https://github.com/optuna/optuna/labels/good%20first%20issue). they are relatively simple, well-defined and are often good starting points for you to get familiar with the contribution workflow and other developers.\n\nif you already have contributed to optuna, we recommend the other [contribution-welcome issues](https://github.com/optuna/optuna/labels/contribution-welcome).\n\nfor general guidelines how to contribute to the project, take a look at [contributing.md](./contributing.md).\n\n\n## reference\n\ntakuya akiba, shotaro sano, toshihiko yanase, takeru ohta, and masanori koyama. 2019.\noptuna: a next-generation hyperparameter optimization framework. in kdd ([arxiv](https://arxiv.org/abs/1907.10902)).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license  copyright (c) 2018 preferred networks, inc.  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.   ==  optuna contains code that is licensed by third-party developers.  == scipy   the optuna contains the codes from scipy project.   copyright (c) 2001-2002 enthought, inc. 2003-2022, scipy developers. all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright owner or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.   ==  fdlibm  copyright (c) 1993 by sun microsystems, inc. all rights reserved.  developed at sunpro, a sun microsystems, inc. business. permission to use, copy, modify, and distribute this software is freely granted, provided that this notice is preserved.  ",
  "name": "optuna",
  "package_url": "https://pypi.org/project/optuna/",
  "project_url": "https://pypi.org/project/optuna/",
  "project_urls": {
    "bugtracker": "https://github.com/optuna/optuna/issues",
    "documentation": "https://optuna.readthedocs.io",
    "homepage": "https://optuna.org/",
    "repository": "https://github.com/optuna/optuna"
  },
  "release_url": "https://pypi.org/project/optuna/3.5.0/",
  "requires_dist": [
    "alembic >=1.5.0",
    "colorlog",
    "numpy",
    "packaging >=20.0",
    "sqlalchemy >=1.3.0",
    "tqdm",
    "PyYAML",
    "asv >=0.5.0 ; extra == 'benchmark'",
    "botorch ; extra == 'benchmark'",
    "cma ; extra == 'benchmark'",
    "scikit-optimize ; extra == 'benchmark'",
    "virtualenv ; extra == 'benchmark'",
    "black ; extra == 'checking'",
    "blackdoc ; extra == 'checking'",
    "flake8 ; extra == 'checking'",
    "isort ; extra == 'checking'",
    "mypy ; extra == 'checking'",
    "mypy-boto3-s3 ; extra == 'checking'",
    "types-PyYAML ; extra == 'checking'",
    "types-redis ; extra == 'checking'",
    "types-setuptools ; extra == 'checking'",
    "types-tqdm ; extra == 'checking'",
    "typing-extensions >=3.10.0.0 ; extra == 'checking'",
    "ase ; extra == 'document'",
    "cma ; extra == 'document'",
    "cmaes >=0.10.0 ; extra == 'document'",
    "botorch ; extra == 'document'",
    "distributed ; extra == 'document'",
    "fvcore ; extra == 'document'",
    "lightgbm ; extra == 'document'",
    "matplotlib !=3.6.0 ; extra == 'document'",
    "mlflow ; extra == 'document'",
    "pandas ; extra == 'document'",
    "pillow ; extra == 'document'",
    "plotly >=4.9.0 ; extra == 'document'",
    "scikit-learn ; extra == 'document'",
    "scikit-optimize ; extra == 'document'",
    "sphinx ; extra == 'document'",
    "sphinx-copybutton ; extra == 'document'",
    "sphinx-gallery ; extra == 'document'",
    "sphinx-plotly-directive ; extra == 'document'",
    "sphinx-rtd-theme >=1.2.0 ; extra == 'document'",
    "torch ; extra == 'document'",
    "torchaudio ; extra == 'document'",
    "torchvision ; extra == 'document'",
    "botorch >=0.4.0 ; extra == 'integration'",
    "cma ; extra == 'integration'",
    "distributed ; extra == 'integration'",
    "lightgbm ; extra == 'integration'",
    "lightning ; extra == 'integration'",
    "mlflow ; extra == 'integration'",
    "pandas ; extra == 'integration'",
    "pytorch-ignite ; extra == 'integration'",
    "scikit-learn >=0.24.2 ; extra == 'integration'",
    "scikit-optimize ; extra == 'integration'",
    "shap ; extra == 'integration'",
    "tensorflow ; extra == 'integration'",
    "torch ; extra == 'integration'",
    "torchaudio ; extra == 'integration'",
    "torchvision ; extra == 'integration'",
    "wandb ; extra == 'integration'",
    "xgboost ; extra == 'integration'",
    "catboost >=0.26 ; (sys_platform != \"darwin\") and extra == 'integration'",
    "catboost <1.2,>=0.26 ; (sys_platform == \"darwin\") and extra == 'integration'",
    "boto3 ; extra == 'optional'",
    "cmaes >=0.10.0 ; extra == 'optional'",
    "google-cloud-storage ; extra == 'optional'",
    "matplotlib !=3.6.0 ; extra == 'optional'",
    "pandas ; extra == 'optional'",
    "plotly >=4.9.0 ; extra == 'optional'",
    "redis ; extra == 'optional'",
    "scikit-learn >=0.24.2 ; extra == 'optional'",
    "botorch ; (python_version <= \"3.11\") and extra == 'optional'",
    "coverage ; extra == 'test'",
    "fakeredis[lua] ; extra == 'test'",
    "kaleido ; extra == 'test'",
    "moto ; extra == 'test'",
    "pytest ; extra == 'test'",
    "scipy >=1.9.2 ; (python_version >= \"3.8\") and extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "a hyperparameter optimization framework",
  "version": "3.5.0",
  "releases": [],
  "developers": [
    "takuya_akiba"
  ],
  "kwds": "optuna pypi shields png pytorch",
  "license_kwds": "copyright license licensed software liability",
  "libtype": "pypi",
  "id": "pypi_optuna",
  "homepage": "",
  "release_count": 60,
  "dependency_ids": [
    "pypi_alembic",
    "pypi_ase",
    "pypi_asv",
    "pypi_black",
    "pypi_blackdoc",
    "pypi_boto3",
    "pypi_botorch",
    "pypi_catboost",
    "pypi_cma",
    "pypi_cmaes",
    "pypi_colorlog",
    "pypi_coverage",
    "pypi_distributed",
    "pypi_fakeredis",
    "pypi_flake8",
    "pypi_fvcore",
    "pypi_google_cloud_storage",
    "pypi_isort",
    "pypi_kaleido",
    "pypi_lightgbm",
    "pypi_lightning",
    "pypi_matplotlib",
    "pypi_mlflow",
    "pypi_moto",
    "pypi_mypy",
    "pypi_mypy_boto3_s3",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_plotly",
    "pypi_pytest",
    "pypi_pytorch_ignite",
    "pypi_pyyaml",
    "pypi_redis",
    "pypi_scikit_learn",
    "pypi_scikit_optimize",
    "pypi_scipy",
    "pypi_shap",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_gallery",
    "pypi_sphinx_plotly_directive",
    "pypi_sphinx_rtd_theme",
    "pypi_sqlalchemy",
    "pypi_tensorflow",
    "pypi_torch",
    "pypi_torchaudio",
    "pypi_torchvision",
    "pypi_tqdm",
    "pypi_types_pyyaml",
    "pypi_types_redis",
    "pypi_types_setuptools",
    "pypi_types_tqdm",
    "pypi_typing_extensions",
    "pypi_virtualenv",
    "pypi_wandb",
    "pypi_xgboost"
  ]
}
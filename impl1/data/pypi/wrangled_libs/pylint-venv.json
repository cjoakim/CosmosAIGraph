{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: plugins",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development"
  ],
  "description": ".. image:: https://github.com/jgosmann/pylint-venv/actions/workflows/ci.yml/badge.svg\n  :target: https://github.com/jgosmann/pylint-venv/actions/workflows/ci.yml\n  :alt: ci and release pipeline\n.. image:: https://img.shields.io/pypi/v/pylint-venv\n  :target: https://pypi.org/project/pylint-venv/\n  :alt: pypi\n.. image:: https://img.shields.io/pypi/pyversions/pylint-venv\n  :target: https://pypi.org/project/pylint-venv/\n  :alt: pypi - python version\n.. image:: https://img.shields.io/pypi/l/pylint-venv\n  :target: https://pypi.org/project/pylint-venv/\n  :alt: pypi - license\n\n\npylint-venv\n===========\n\npylint_ does not respect the currently activated virtualenv_ if it is not\ninstalled in every virtual environment individually.  this module provides\na pylint init-hook to use the same pylint installation with different virtual\nenvironments.\n\ninstallation\n------------\n\n.. code:: bash\n\n    pip install pylint-venv\n    \nadd the hook to your pylint configuration. see the section below corresponding\nto the type of configuration file you use.\n\nconfigure with ``pyproject.toml``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nadd the following to your ``pyproject.toml``:\n\n.. code:: toml\n   \n    [tool.pylint.main]\n    init-hook = \"\"\"\n    try: import pylint_venv\n    except importerror: pass\n    else: pylint_venv.inithook()\n    \"\"\"\n\n\nconfigure with ``.pylintrc``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nadd the following to your ``.pylintrc``:\n\n.. code:: ini\n\n    [main]\n    init-hook=\n        try: import pylint_venv\n        except importerror: pass\n        else: pylint_venv.inithook()\n        \nif you add this to your ``~/.pylintrc`` in your home directory, it will be\napplied to all projects by default.\n\n        \nusage\n-----\n\nthe hook will then be used automatically if\n\n- a virtualenv without pylint is active,\n\n- or a conda environment without pylint is active,\n\n- or no environment is active but your cwd contains virtualenv directory.\n\nanything listed in the ``pylint_venv_path`` environment variable is considered\na virtualenv directory. the default, if the variable is unset, is `.venv`. use\na colon (`:`) as path separator. example for checking directories ``.venv`` and\n``.virtualenv``:\n\n.. code:: console\n\n    pylint_venv_path=.venv:.virtualenv\n\nyou can also call the hook via a command line argument:\n\n.. code:: console\n\n    $ pylint --init-hook=\"import pylint_venv; pylint_venv.inithook()\"\n\nthis way you can also explicitly set an environment to be used:\n\n.. code:: console\n\n    $ pylint --init-hook=\"import pylint_venv; pylint_venv.inithook('$(pwd)/env')\"\n\nif ``pylint`` itself is installed in a virtualenv, then you can ignore it by passing\n``force_venv_activation=true`` to force the activation of a different virtualenv:\n\n.. code:: console\n\n    $ pylint --init-hook=\"import pylint_venv; pylint_venv.inithook(force_venv_activation=true)\"\n\n\nthis will try to automatically detect virtualenv and activate it.\n\n\ntroubleshooting\n---------------\n\ngeneral\n^^^^^^^\n\npylint_venv fails to import\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nmost likely pylint-venv is not installed in the same virtual environment as\npylint. either make sure to ensure pylint-venv into the same virtual environment\nas pylint, or add the appropriate path in the init hook:\n\n.. code:: python\n\n    import sys\n    sys.path.append(\"/path/to/installation/folder/of/pylint_venv\")\n\n\npylint_venv breaks parsing with tools\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nwhen tools call pylint with :code:`-f json`, an extra line may break the parser, as the \noutput is no longer valid json. to avoid printing \"using venv ...\", pass :code:`quiet=true`\nto :code:`inithook`\n\n.. code:: console\n\n   $ pylint -f json --init-hook=\"import pylint_venv; pylint_venv.inithook(quiet=true)\"\n\n\nvirtual environment does not get used (installed modules are reported as 'unable to import')\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nmost likely the virtual environment does not get activated because pylint itself\nruns in a virtual environment. you can force the activation of the virtual\nenvironment with the :code:`force_venv_activation=true` flag to the\n:code:`pylint_venv.inithook` function.\n\n\nhomebrew\n^^^^^^^^\n\nhomebrew installs pylint into a separate virtual environment, thus you will\nneed to set the `force_venv_activation=true` flag. this also means, that\npylint_venv will be in a different search path and you must add the proper\npath to `sys.path`. you can use the following configuration adjusted to your\npython version:\n\n.. code:: ini\n\n    [main]\n    init-hook=\n        import sys\n        sys.path.append(\"/usr/local/lib/python3.8/site-packages\")\n        try: import pylint_venv\n        except importerror: pass\n        else: pylint_venv.inithook(force_venv_activation=true)\n\n\n.. _pylint: http://www.pylint.org/\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n",
  "docs_url": null,
  "keywords": "pylint,virtualenv,venv",
  "license": "mit",
  "name": "pylint-venv",
  "package_url": "https://pypi.org/project/pylint-venv/",
  "project_url": "https://pypi.org/project/pylint-venv/",
  "project_urls": {
    "Homepage": "https://github.com/jgosmann/pylint-venv/",
    "Repository": "https://github.com/jgosmann/pylint-venv/"
  },
  "release_url": "https://pypi.org/project/pylint-venv/3.0.3/",
  "requires_dist": [],
  "requires_python": ">=3.7.2,<4.0.0",
  "summary": "pylint-venv provides a pylint init-hook to use the same pylint installation with different virtual environments.",
  "version": "3.0.3",
  "releases": [],
  "developers": [
    "jan@hyper-world.de",
    "jan_gosmann"
  ],
  "kwds": "pylint_venv_path pylint_venv pylintrc pylint pylint_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pylint_venv",
  "homepage": "https://github.com/jgosmann/pylint-venv/",
  "release_count": 11,
  "dependency_ids": []
}
{
  "classifiers": [
    "framework :: django",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "<img src=\"http://mypy-lang.org/static/mypy_light.svg\" alt=\"mypy logo\" width=\"300px\"/>\n\n# pep484 stubs for django rest framework\n\n[![build status](https://travis-ci.com/typeddjango/djangorestframework-stubs.svg?branch=master)](https://travis-ci.com/typeddjango/djangorestframework-stubs)\n[![checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![gitter](https://badges.gitter.im/mypy-django/lobby.svg)](https://gitter.im/mypy-django/lobby)\n\n\nmypy stubs for [django rest framework](https://pypi.org/project/djangorestframework/).\nsupports python 3.8 and up.\n\n## installation\n\n```bash\npip install djangorestframework-stubs[compatible-mypy]\n```\n\nto make mypy aware of the plugin, you need to add\n\n```ini\n[mypy]\nplugins =\n    mypy_drf_plugin.main\n```\n\nin your `mypy.ini` file.\n\n## faq\n\n### model instance is inferred as `any` instead of my `model` class\n\nwhen subclassing `modelserializer`, add a [type argument](https://peps.python.org/pep-0484/#generics) to type-hint the related model class, for example:\n\n```python\nclass mymodelserializer(serializers.modelserializer[mymodel]):\n    class meta:\n        model = mymodel\n        fields = (\"id\", \"example\")\n```\n\nwhich means that methods where the model is being passed around will know the actual type of the model instead of being `any`. the `instance` attribute on the above serializer will be `union[mymodel, typing.sequence[mymodel], none]`.\n\n## to get help\n\nwe have gitter here: <https://gitter.im/mypy-django/lobby>\nif you think you have more generic typing issue, please refer to <https://github.com/python/mypy> and their gitter.\n\n## contributing\n\nthis project is open source and community driven. as such we encourage contributions big and small. you can contribute by doing any of the following:\n\n1. contribute code (e.g. improve stubs, add plugin capabilities, write tests etc) - to do so please follow the [contribution guide](./contributing.md).\n2. assist in code reviews and discussions in issues.\n3. identify bugs and issues and report these\n\nyou can always also reach out in gitter to discuss your contributions!\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "djangorestframework-stubs",
  "package_url": "https://pypi.org/project/djangorestframework-stubs/",
  "project_url": "https://pypi.org/project/djangorestframework-stubs/",
  "project_urls": {
    "Homepage": "https://github.com/typeddjango/djangorestframework-stubs",
    "Release notes": "https://github.com/typeddjango/djangorestframework-stubs/releases"
  },
  "release_url": "https://pypi.org/project/djangorestframework-stubs/3.14.5/",
  "requires_dist": [
    "django-stubs >=4.2.7",
    "typing-extensions >=3.10.0",
    "requests >=2.0.0",
    "types-requests >=0.1.12",
    "types-PyYAML >=5.4.3",
    "mypy ~=1.7.0 ; extra == 'compatible-mypy'",
    "django-stubs[compatible-mypy] ; extra == 'compatible-mypy'",
    "coreapi >=2.0.0 ; extra == 'coreapi'",
    "types-Markdown >=0.1.5 ; extra == 'markdown'"
  ],
  "requires_python": ">=3.8",
  "summary": "pep-484 stubs for django-rest-framework",
  "version": "3.14.5",
  "releases": [],
  "developers": [
    "maksim_kurnikov",
    "marti@juffo.org",
    "marti_raudsepp",
    "maxim.kurnikov@gmail.com"
  ],
  "kwds": "djangorestframework django mypy_badge mypy_light mypy",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_djangorestframework_stubs",
  "homepage": "https://github.com/typeddjango/djangorestframework-stubs",
  "release_count": 24,
  "dependency_ids": [
    "pypi_coreapi",
    "pypi_django_stubs",
    "pypi_mypy",
    "pypi_requests",
    "pypi_types_markdown",
    "pypi_types_pyyaml",
    "pypi_types_requests",
    "pypi_typing_extensions"
  ]
}
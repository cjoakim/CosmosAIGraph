{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# ndindex\n\n![ndindex logo](docs/_static/ndindex_logo_white_bg.svg)\n\na python library for manipulating indices of ndarrays.\n\nthe documentation for ndindex can be found at https://quansight-labs.github.io/ndindex/\n\nndindex is a library that allows representing and manipulating objects that\ncan be valid indices to numpy arrays, i.e., slices, integers, ellipses,\nnone, integer and boolean arrays, and tuples thereof. the goals of the library\nare\n\n- provide a uniform api to manipulate these objects. unlike the standard index\n  objects themselves like `slice`, `int`, and `tuple`, which do not share any\n  methods in common related to being indices, ndindex classes can all be\n  manipulated uniformly. for example, `idx.args` always gives the arguments\n  used to construct `idx`.\n\n- give 100% correct semantics as defined by numpy's ndarray. this means that\n  ndindex will not make a transformation on an index object unless it is\n  correct for all possible input array shapes. the only exception to this rule\n  is that ndindex assumes that any given index will not raise indexerror (for\n  instance, from an out of bounds integer index or from too few dimensions).\n  for those operations where the array shape is known, there is a `reduce()`\n  method to reduce an index to a simpler index that is equivalent for the\n  given shape.\n\n- enable useful transformation and manipulation functions on index objects.\n\n## examples\n\n**canonicalize a slice (over a given shape, or independent of array shape)**\n\n\n```py\n>>> from ndindex import *\n>>> slice(-2, 10, 3).reduce()\nslice(-2, 10, 2)\n>>> slice(-2, 10, 3).reduce(5)\nslice(3, 4, 1)\n```\n\n**compute the maximum length of a sliced axis**\n\n\n```py\n>>> import numpy as np\n>>> len(slice(2, 10, 3))\n3\n>>> len(np.arange(10)[2:10:3])\n3\n```\n\n**compute the shape of an array of shape `(10, 20)` indexed by `[0, 0:10]`**\n\n```py\n>>> tuple(0, slice(0, 10)).newshape((10, 20))\n(10,)\n>>> np.ones((10, 20))[0, 0:10].shape\n(10,)\n```\n\n**check if an indexed array would be empty**\n\n```py\n>>> tuple(0, ..., slice(10, 20)).isempty((3, 4, 5))\ntrue\n>>> np.ones((3, 4, 5))[0,...,10:20]\narray([], shape=(4, 0), dtype=float64)\n```\n\nsee the [documentation](https://quansight-labs.github.io/ndindex/) for full details\non what ndindex can do.\n\n## license\n\n[mit license](license)\n\n## acknowledgments\n\nndindex development is supported by [quansight\nlabs](https://labs.quansight.org/) and is sponsored in part by [the d. e.\nshaw group](https://www.deshaw.com/). the d. e. shaw group collaborates with\nquansight on numerous open source projects, including numba, dask and project\njupyter.\n\n<p align=\"center\">\n<a href=\"https://labs.quansight.org/\"><img src=\"https://labs.quansight.org/images/quansightlabs_logo_v2.png\" alt=\"https://labs.quansight.org/\"\nwidth=\"200\"></a>\n<a href=\"https://www.deshaw.com\"><img src=\"https://www.deshaw.com/assets/logos/blue_logo_417x125.png\" alt=\"https://www.deshaw.com\"\nwidth=\"200\"></a>\n</p>\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "ndindex",
  "package_url": "https://pypi.org/project/ndindex/",
  "project_url": "https://pypi.org/project/ndindex/",
  "project_urls": {
    "Homepage": "https://quansight-labs.github.io/ndindex/"
  },
  "release_url": "https://pypi.org/project/ndindex/1.7/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a python library for manipulating indices of ndarrays.",
  "version": "1.7",
  "releases": [],
  "developers": [
    "quansight_labs"
  ],
  "kwds": "ndarrays ndindex ndarray numpy indices",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ndindex",
  "homepage": "https://quansight-labs.github.io/ndindex/",
  "release_count": 11,
  "dependency_ids": []
}
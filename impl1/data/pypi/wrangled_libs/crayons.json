{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "\ncrayons: text ui colors for python.\n===================================\n\n.. image:: https://img.shields.io/pypi/v/crayons.svg\n    :target: https://pypi.org/project/crayons/\n\n.. image:: https://github.com/masterodin/crayons/workflows/test/badge.svg\n    :target: https://github.com/masterodin/crayons/actions?query=workflow%3atest+branch%3amaster\n\n.. image:: https://img.shields.io/pypi/l/crayons.svg\n    :target: https://pypi.python.org/pypi/crayons\n\n.. image:: https://img.shields.io/pypi/wheel/crayons.svg\n    :target: https://pypi.python.org/pypi/crayons\n\n.. image:: https://img.shields.io/pypi/pyversions/crayons.svg\n    :target: https://pypi.python.org/pypi/crayons\n\n\nthis module is really simple, it gives you colored strings for terminal\nusage. included colors are ``red``, ``green``, ``yellow``, ``blue``, ``black``, ``magenta``, ``cyan``, ``white``, and\n``normal`` (as well as ``clean`` and ``disable``).\n\n**crayons** is nice because it automatically wraps a given string in both the foreground color, as well as returning to the\noriginal state after the string is complete. most terminal color libraries make you manage this yourself.\n\n\n.. image:: https://d3vv6lp55qjaqc.cloudfront.net/items/3q0i293q1z293r3a3a3n/screen%20shot%202017-01-23%20at%206.00.02%20pm.png?x-cloudapp-visitor-id=2577\n\n\narguments include ``always=true`` and ``bold=true``.\n\nfeatures\n--------\n\n- if you call ``disable()``, all future calls to colors will be ignored.\n- if you call ``normal()``, color is reset to default foreground color\n- if the current process is not in a tty (e.g. being piped), no colors will be displayed.\n- length of coloredstrings can be properly calculated.\n- powered by colorama.\n\nusage is simple\n---------------\n\n::\n\n    # red is red, white is white.\n    >>> print('{} white'.format(crayons.red('red')))\n    red white\n\nthat's it!\n\ninstallation\n------------\n\n::\n\n    $ pip install crayons\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "crayons",
  "package_url": "https://pypi.org/project/crayons/",
  "project_url": "https://pypi.org/project/crayons/",
  "project_urls": {
    "Homepage": "https://github.com/MasterOdin/crayons"
  },
  "release_url": "https://pypi.org/project/crayons/0.4.0/",
  "requires_dist": [
    "colorama"
  ],
  "requires_python": "",
  "summary": "textui colors for python.",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "kenneth_reitz",
    "matt.peveler@gmail.com",
    "matthew_peveler",
    "me@kennethreitz.com"
  ],
  "kwds": "crayons coloredstrings colors textui yellow",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_crayons",
  "homepage": "https://github.com/masterodin/crayons",
  "release_count": 7,
  "dependency_ids": [
    "pypi_colorama"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "natural language :: japanese",
    "operating system :: macos",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "topic :: text processing :: linguistic"
  ],
  "description": "<p align=\"center\">\n<a href=\"https://rhoknp.readthedocs.io/en/latest/\" rel=\"noopener\" target=\"_blank\">\n<img width=\"150\" src=\"https://raw.githubusercontent.com/ku-nlp/rhoknp/develop/docs/_static/logo.png\" alt=\"rhoknp logo\">\n</a>\n</p>\n\n<h1 align=\"center\">rhoknp: yet another python binding for juman++/knp/kwja</h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/ku-nlp/rhoknp/actions/workflows/test.yml\"><img alt=\"test\" src=\"https://img.shields.io/github/actions/workflow/status/ku-nlp/rhoknp/test.yml?branch=main&logo=github&label=test&style=flat-square\"></a>\n<a href=\"https://codecov.io/gh/ku-nlp/rhoknp\"><img alt=\"codecov\" src=\"https://img.shields.io/codecov/c/github/ku-nlp/rhoknp?logo=codecov&style=flat-square\"></a>\n<a href=\"https://www.codefactor.io/repository/github/ku-nlp/rhoknp\"><img alt=\"codefactor\" src=\"https://img.shields.io/codefactor/grade/github/ku-nlp/rhoknp?style=flat-square\"></a>\n<a href=\"https://pypi.org/project/rhoknp/\"><img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/rhoknp?style=flat-square\"></a>\n<a href=\"https://pypi.org/project/rhoknp/\"><img alt=\"pypi - python version\" src=\"https://img.shields.io/pypi/pyversions/rhoknp?style=flat-square\">\n<a href=\"https://rhoknp.readthedocs.io/en/latest/\"><img alt=\"documentation\" src=\"https://img.shields.io/readthedocs/rhoknp?style=flat-square\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"code style - black\" src=\"https://img.shields.io/badge/code%20style-black-222222?style=flat-square\"></a>\n</p>\n\n---\n\n**documentation**: [https://rhoknp.readthedocs.io/en/latest/](https://rhoknp.readthedocs.io/en/latest/)\n\n**source code**: [https://github.com/ku-nlp/rhoknp](https://github.com/ku-nlp/rhoknp)\n\n---\n\n_rhoknp_ is a python binding for [juman++](https://github.com/ku-nlp/jumanpp), [knp](https://github.com/ku-nlp/knp), and [kwja](https://github.com/ku-nlp/kwja).[^1]\n\n[^1]: the logo was generated by openai dall\u00b7e 2.\n\n```python\nimport rhoknp\n\n# perform morphological analysis by juman++\njumanpp = rhoknp.jumanpp()\nsentence = jumanpp.apply_to_sentence(\n    \"\u96fb\u6c17\u62b5\u6297\u7387\u306f\u96fb\u6c17\u306e\u901a\u3057\u306b\u304f\u3055\u3092\u8868\u3059\u7269\u6027\u5024\u3067\u3042\u308b\u3002\"\n)\n\n# access to the result\nfor morpheme in sentence.morphemes:  # a.k.a. keitai-so\n    ...\n\n# save the result\nwith open(\"result.jumanpp\", \"wt\") as f:\n    f.write(sentence.to_jumanpp())\n\n# load the result\nwith open(\"result.jumanpp\", \"rt\") as f:\n    sentence = rhoknp.sentence.from_jumanpp(f.read())\n```\n\n## requirements\n\n- python 3.8+\n- (optional) [juman++](https://github.com/ku-nlp/jumanpp) v2.0.0-rc3+\n- (optional) [knp](https://github.com/ku-nlp/knp) 5.0+\n- (optional) [kwja](https://github.com/ku-nlp/kwja) 1.0.0+\n\n## installation\n\n```shell\npip install rhoknp\n```\n\n## quick tour\n\nlet's begin by using juman++ with rhoknp.\nhere, we present a simple example demonstrating how juman++ can be used to analyze a sentence.\n\n```python\n# perform morphological analysis by juman++\njumanpp = rhoknp.jumanpp()\nsentence = jumanpp.apply_to_sentence(\"\u96fb\u6c17\u62b5\u6297\u7387\u306f\u96fb\u6c17\u306e\u901a\u3057\u306b\u304f\u3055\u3092\u8868\u3059\u7269\u6027\u5024\u3067\u3042\u308b\u3002\")\n```\n\nyou can easily access the individual morphemes that make up the sentence.\n\n```python\nfor morpheme in sentence.morphemes:  # a.k.a. keitai-so\n    ...\n```\n\nsentence objects can be saved in the juman format.\n\n```python\n# save the sentence in the juman format\nwith open(\"sentence.jumanpp\", \"wt\") as f:\n    f.write(sentence.to_jumanpp())\n\n# load the sentence\nwith open(\"sentence.jumanpp\", \"rt\") as f:\n    sentence = rhoknp.sentence.from_jumanpp(f.read())\n```\n\nalmost the same apis are available for knp.\n\n```python\n# perform language analysis by knp\nknp = rhoknp.knp()\nsentence = knp.apply_to_sentence(\"\u96fb\u6c17\u62b5\u6297\u7387\u306f\u96fb\u6c17\u306e\u901a\u3057\u306b\u304f\u3055\u3092\u8868\u3059\u7269\u6027\u5024\u3067\u3042\u308b\u3002\")\n```\n\nknp performs language analysis at multiple levels.\n\n```python\nfor clause in sentence.clauses:  # a.k.a., setsu\n    ...\nfor phrase in sentence.phrases:  # a.k.a. bunsetsu\n    ...\nfor base_phrase in sentence.base_phrases:  # a.k.a. kihon-ku\n    ...\nfor morpheme in sentence.morphemes:  # a.k.a. keitai-so\n    ...\n```\n\nsentence objects can be saved in the knp format.\n\n```python\n# save the sentence in the knp format\nwith open(\"sentence.knp\", \"wt\") as f:\n    f.write(sentence.to_knp())\n\n# load the sentence\nwith open(\"sentence.knp\", \"rt\") as f:\n    sentence = rhoknp.sentence.from_knp(f.read())\n```\n\nfurthermore, rhoknp provides convenient apis for document-level language analysis.\n\n```python\ndocument = rhoknp.document.from_raw_text(\n    \"\u96fb\u6c17\u62b5\u6297\u7387\u306f\u96fb\u6c17\u306e\u901a\u3057\u306b\u304f\u3055\u3092\u8868\u3059\u7269\u6027\u5024\u3067\u3042\u308b\u3002\u5358\u306b\u62b5\u6297\u7387\u3068\u3082\u547c\u3070\u308c\u308b\u3002\"\n)\n# if you know sentence boundaries, you can use `document.from_sentences` instead.\ndocument = rhoknp.document.from_sentences(\n    [\n        \"\u96fb\u6c17\u62b5\u6297\u7387\u306f\u96fb\u6c17\u306e\u901a\u3057\u306b\u304f\u3055\u3092\u8868\u3059\u7269\u6027\u5024\u3067\u3042\u308b\u3002\",\n        \"\u5358\u306b\u62b5\u6297\u7387\u3068\u3082\u547c\u3070\u308c\u308b\u3002\",\n    ]\n)\n```\n\ndocument objects can be handled in a similar manner as sentence objects.\n\n```python\n# perform morphological analysis by juman++\ndocument = jumanpp.apply_to_document(document)\n\n# access language units in the document\nfor sentence in document.sentences:\n    ...\nfor morpheme in document.morphemes:\n    ...\n\n# save language analysis by juman++\nwith open(\"document.jumanpp\", \"wt\") as f:\n    f.write(document.to_jumanpp())\n\n# load language analysis by juman++\nwith open(\"document.jumanpp\", \"rt\") as f:\n    document = rhoknp.document.from_jumanpp(f.read())\n```\n\nfor more information, please refer to the [examples](./examples) and [documentation](https://rhoknp.readthedocs.io/en/latest/).\n\n## main differences from [pyknp](https://github.com/ku-nlp/pyknp/)\n\n[_pyknp_](https://pypi.org/project/pyknp/) serves as the official python binding for juman++ and knp.\nin the development of rhoknp, we redesigned the api, considering the current use cases of pyknp.\nthe key differences between the two are as follows:\n\n- **support for document-level language analysis**: rhoknp allows you to load and instantiate the results of document-level language analysis, including cohesion analysis and discourse relation analysis.\n- **strict type-awareness**: rhoknp has been thoroughly annotated with type annotations, ensuring strict type checking and improved code clarity.\n- **comprehensive test suite**: rhoknp is extensively tested with a comprehensive test suite. you can view the code coverage report on [codecov](https://app.codecov.io/gh/ku-nlp/rhoknp).\n\n## license\n\nmit\n\n## contributing\n\nwe warmly welcome contributions to rhoknp.\nyou can get started by reading the [contribution guide](https://rhoknp.readthedocs.io/en/latest/contributing/index.html).\n\n## reference\n\n- [knp format](http://cr.fvcrc.i.nagoya-u.ac.jp/~sasano/knp/format.html)\n- [knp - kurohashi-chu-murawaki lab](https://nlp.ist.i.kyoto-u.ac.jp/?knp)\n",
  "docs_url": null,
  "keywords": "nlp,japanese,juman++,knp,kwja",
  "license": "mit",
  "name": "rhoknp",
  "package_url": "https://pypi.org/project/rhoknp/",
  "project_url": "https://pypi.org/project/rhoknp/",
  "project_urls": {
    "Documentation": "https://rhoknp.readthedocs.io/en/latest",
    "Homepage": "https://github.com/ku-nlp/rhoknp",
    "Repository": "https://github.com/ku-nlp/rhoknp"
  },
  "release_url": "https://pypi.org/project/rhoknp/1.6.0/",
  "requires_dist": [
    "typing-extensions (>=4.4) ; python_version < \"3.12\"",
    "typer (>=0.7) ; extra == \"cli\"",
    "PyYAML (>=6.0,<7.0) ; extra == \"cli\"",
    "rich (>=12.6) ; extra == \"cli\"",
    "uvicorn (>=0.21.0) ; extra == \"cli\"",
    "fastapi (>=0.92.0) ; extra == \"cli\"",
    "jinja2 (>=3.1,<4.0) ; extra == \"cli\"",
    "pygments (>=2.16,<3.0) ; extra == \"cli\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "yet another python binding for juman++/knp/kwja",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "h.kiyomaru@gmail.com",
    "hirokazu_kiyomaru"
  ],
  "kwds": "rhoknp kwja knp pyknp _rhoknp_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_rhoknp",
  "homepage": "https://github.com/ku-nlp/rhoknp",
  "release_count": 31,
  "dependency_ids": [
    "pypi_fastapi",
    "pypi_jinja2",
    "pypi_pygments",
    "pypi_pyyaml",
    "pypi_rich",
    "pypi_typer",
    "pypi_typing_extensions",
    "pypi_uvicorn"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "\n.. image:: https://github.com/machu-gwu/attrs_mate-project/workflows/ci/badge.svg\n    :target: https://github.com/machu-gwu/attrs_mate-project/actions?query=workflow:ci\n\n.. image:: https://codecov.io/gh/machu-gwu/attrs_mate-project/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/machu-gwu/attrs_mate-project\n\n.. image:: https://img.shields.io/pypi/v/attrs_mate.svg\n    :target: https://pypi.python.org/pypi/attrs_mate\n\n.. image:: https://img.shields.io/pypi/l/attrs_mate.svg\n    :target: https://pypi.python.org/pypi/attrs_mate\n\n.. image:: https://img.shields.io/pypi/pyversions/attrs_mate.svg\n    :target: https://pypi.python.org/pypi/attrs_mate\n\n.. image:: https://img.shields.io/badge/star_me_on_github!--none.svg?style=social\n    :target: https://github.com/machu-gwu/attrs_mate-project\n\n------\n\n.. image:: https://img.shields.io/badge/link-document-orange.svg\n      :target: https://attrs_mate.readthedocs.io/index.html\n\n.. image:: https://img.shields.io/badge/link-api-orange.svg\n      :target: https://attrs_mate.readthedocs.io/py-modindex.html\n\n.. image:: https://img.shields.io/badge/link-source_code-blue.svg\n      :target: https://attrs_mate.readthedocs.io/py-modindex.html\n\n.. image:: https://img.shields.io/badge/link-install-blue.svg\n      :target: `install`_\n\n.. image:: https://img.shields.io/badge/link-github-blue.svg\n      :target: https://github.com/machu-gwu/attrs_mate-project\n\n.. image:: https://img.shields.io/badge/link-submit_issue-blue.svg\n      :target: https://github.com/machu-gwu/attrs_mate-project/issues\n\n.. image:: https://img.shields.io/badge/link-request_feature-blue.svg\n      :target: https://github.com/machu-gwu/attrs_mate-project/issues\n\n.. image:: https://img.shields.io/badge/link-download-blue.svg\n      :target: https://pypi.org/pypi/attrs_mate#files\n\n\nwelcome to ``attrs_mate`` documentation\n==============================================================================\n\n.. contents::\n    :class: this-will-duplicate-information-and-it-is-still-useful-here\n    :depth: 1\n    :local:\n\n\n`attrs <https://www.attrs.org/en/stable/index.html>`_ makes writing class a lot of more fun!\n\n``attrs_mate`` aims to bring more features to ``attrs``, less code, and better code pattern.\n\n\nusage1: more utility methods\n------------------------------------------------------------------------------\n\n.. code-block:: python\n\n    from attrs_mate import attr, attrsclass\n\n    @attr.s\n    class user(attrsclass):\n        id = attr.ib()\n        name = attr.ib()\n\n    user = user(id=1, name=\"alice\")\n    user.keys() # [\"id\", \"name\"]\n    user.values() # [1, \"alice\"]\n    user.items() # [(\"id\", 1), (\"name\": \"alice\")]\n    user.to_dict() # {\"id\": 1, \"name\": \"alice\"}\n    user.to_ordereddict() # ordereddict([(\"id\", 1), (\"name\": \"alice\")])\n\n\nusage2: allow attrs to construct complex object from dict data.\n------------------------------------------------------------------------------\n\n**plus, this is an example of nesting schema**.\n\n.. code-block:: python\n\n    import attr\n    from attrs_mate import attrsclass\n\n\n    @attr.s\n    class profile(attrsclass):\n        \"\"\"\n        firstname, lastname, ssn are generic data type field.\n        \"\"\"\n        firstname = attrsclass.ib_str() # default string validator\n        lastname = attrsclass.ib_str()\n        ssn = attrsclass.ib_str()\n\n\n    @attr.s\n    class degree(attrsclass):\n        name = attrsclass.ib_str()\n        year = attrsclass.ib_int() # default integer validator\n\n\n    @attr.s\n    class people(attrsclass):\n        \"\"\"\n        - ``profile`` is nested field.\n        - ``degrees`` is collection type field.\n        \"\"\"\n        id = attrsclass.ib_int()\n        profile = profile.ib_nested() # default nested schema validator and converter\n        degrees = degree.ib_list() # default nested schema validator and converter\n\n    >>> people = people(\n        id=1,\n        profile=profile(\n            firstname=\"david\",\n            lastname=\"john\",\n            ssn=\"123-45-6789\",\n        ),\n        degrees=[\n            degree(name=\"bachelor\", year=2004),\n            degree(name=\"master\", year=2006),\n        ],\n    )\n\n    >>> people_data = people.to_dict()\n    >>> people_data\n    {\n        'id': 1,\n        'profile': {\n            'lastname': 'john', 'ssn': '123-45-6789', 'firstname': 'david'\n        },\n        'degrees': [\n            {'name': 'bachelor', 'year': 2004},\n            {'name': 'master', 'year': 2006}\n        ]\n    }\n\n    >>> people = people.from_dict(people_data)\n    >>> people\n    people(id=1, profile=profile(firstname='david', lastname='john', ssn='123-45-6789'), degrees=[degree(name='bachelor', year=2004), degree(name='master', year=2006)])\n\nor you can just pass nested schema in dictionary, it works the same:\n\n.. code-block:: python\n\n    >>> people = people(\n        id=1,\n        profile=dict(\n            firstname=\"david\",\n            lastname=\"john\",\n            ssn=\"123-45-6789\",\n        ),\n        degrees=[\n            dict(name=\"bachelor\", year=2004),\n            dict(name=\"master\", year=2006),\n        ],\n    )\n\n\nusage3: cached instance and property attribute\n------------------------------------------------------------------------------\n\n.. code-block:: python\n\n    from attrs_mate import attr, lazyclass\n\n    @attr.s\n    class user(lazyclass): # instance are cached\n        id = attr.ib()\n        lastname = attr.ib()\n        firstname = attr.ib()\n        uuid_called_count = attr.ib(default=0)\n        fullname_called_count = attr.ib(default=0)\n\n        @lazyclass.lazyproperty\n        def uuid(self):\n            self.uuid_called_count += 1\n            return self.id\n\n        @lazyclass.lazyproperty\n        def fullname(self): # property method are cached\n            self.fullname_called_count += 1\n            return \"{} {}\".format(self.lastname, self.firstname)\n\n    >>> user1 = user.lazymake(id=1, lastname=\"david\", firstname=\"john\")\n    >>> user1.fullname_called_count\n    0 # initially, fullname never been called\n    >>> user1.fullname\n    david john\n    >>> user1.fullname_called_count\n    1 # called once\n    >>> user1.fullname\n    david john\n    >>> user1.fullname_called_count\n    1 # user.fullname() not been called\n\n    # use factory method to create new instance\n    >>> user2 = user.lazymake(id=1, lastname=\"david\", firstname=\"kim\")\n    >>> id(user1) == id(user2)\n    true # since\n    >>> user2.firstname == \"john\"\n    true\n    >>> user2.fullname_called_count\n    1 # already been called once, because it is actually user1\n\n\n.. _install:\n\ninstall\n------------------------------------------------------------------------------\n\n``attrs_mate`` is released on pypi, so all you need is:\n\n.. code-block:: console\n\n    $ pip install attrs_mate\n\nto upgrade to latest version:\n\n.. code-block:: console\n\n    $ pip install --upgrade attrs_mate\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "attrs-mate",
  "package_url": "https://pypi.org/project/attrs-mate/",
  "project_url": "https://pypi.org/project/attrs-mate/",
  "project_urls": {
    "Download": "https://pypi.python.org/pypi/attrs_mate/1.0.2#downloads",
    "Homepage": "https://github.com/MacHu-GWU/attrs_mate-project"
  },
  "release_url": "https://pypi.org/project/attrs-mate/1.0.2/",
  "requires_dist": [
    "attrs (>=20.1.0)",
    "sphinx (==4.3.0) ; extra == 'docs'",
    "sphinx-inline-tabs (==2021.8.17b10) ; extra == 'docs'",
    "sphinx-jinja (==1.1.1) ; extra == 'docs'",
    "sphinx-copybutton (==0.4.0) ; extra == 'docs'",
    "rstobj (==0.0.7) ; extra == 'docs'",
    "docfly (==1.0.2) ; extra == 'docs'",
    "furo (==2021.8.31) ; extra == 'docs'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "a plugin extends power of attrs library.",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "husanhe@gmail.com",
    "sanhe_hu"
  ],
  "kwds": "attrs_mate svg badge attrs link",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_attrs_mate",
  "homepage": "https://github.com/machu-gwu/attrs_mate-project",
  "release_count": 8,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_docfly",
    "pypi_furo",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_rstobj",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_inline_tabs",
    "pypi_sphinx_jinja"
  ]
}
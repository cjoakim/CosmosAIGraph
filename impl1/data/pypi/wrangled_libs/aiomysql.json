{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database",
    "topic :: database :: front-ends"
  ],
  "description": "aiomysql\n========\n.. image:: https://github.com/aio-libs/aiomysql/actions/workflows/ci-cd.yml/badge.svg?branch=master\n    :target: https://github.com/aio-libs/aiomysql/actions/workflows/ci-cd.yml\n.. image:: https://codecov.io/gh/aio-libs/aiomysql/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/aiomysql\n    :alt: code coverage\n.. image:: https://badge.fury.io/py/aiomysql.svg\n    :target: https://badge.fury.io/py/aiomysql\n    :alt: latest version\n.. image:: https://readthedocs.org/projects/aiomysql/badge/?version=latest\n    :target: https://aiomysql.readthedocs.io/\n    :alt: documentation status\n.. image:: https://badges.gitter.im/join%20chat.svg\n    :target: https://gitter.im/aio-libs/lobby\n    :alt: chat on gitter\n\n**aiomysql** is a \"driver\" for accessing a `mysql` database\nfrom the asyncio_ (pep-3156/tulip) framework. it depends on and reuses most\nparts of pymysql_ . *aiomysql* tries to be like awesome aiopg_ library and\npreserve same api, look and feel.\n\ninternally **aiomysql** is copy of pymysql, underlying io calls switched\nto async, basically ``yield from`` and ``asyncio.coroutine`` added in\nproper places)). `sqlalchemy` support ported from aiopg_.\n\n\ndocumentation\n-------------\nhttps://aiomysql.readthedocs.io/\n\nbasic example\n-------------\n\n**aiomysql** based on pymysql_ , and provides same api, you just need\nto use  ``await conn.f()`` or ``yield from conn.f()`` instead of calling\n``conn.f()`` for every method.\n\nproperties are unchanged, so ``conn.prop`` is correct as well as\n``conn.prop = val``.\n\n.. code:: python\n\n    import asyncio\n    import aiomysql\n\n\n    async def test_example(loop):\n        pool = await aiomysql.create_pool(host='127.0.0.1', port=3306,\n                                          user='root', password='',\n                                          db='mysql', loop=loop)\n        async with pool.acquire() as conn:\n            async with conn.cursor() as cur:\n                await cur.execute(\"select 42;\")\n                print(cur.description)\n                (r,) = await cur.fetchone()\n                assert r == 42\n        pool.close()\n        await pool.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test_example(loop))\n\n\nexample of sqlalchemy optional integration\n------------------------------------------\nsqlalchemy support has been ported from aiopg_ so api should be very familiar\nfor aiopg_ user.:\n\n.. code:: python\n\n    import asyncio\n    import sqlalchemy as sa\n\n    from aiomysql.sa import create_engine\n\n\n    metadata = sa.metadata()\n\n    tbl = sa.table('tbl', metadata,\n                   sa.column('id', sa.integer, primary_key=true),\n                   sa.column('val', sa.string(255)))\n\n\n    async def go(loop):\n        engine = await create_engine(user='root', db='test_pymysql',\n                                     host='127.0.0.1', password='', loop=loop)\n        async with engine.acquire() as conn:\n            await conn.execute(tbl.insert().values(val='abc'))\n            await conn.execute(tbl.insert().values(val='xyz'))\n\n            async for row in conn.execute(tbl.select()):\n                print(row.id, row.val)\n\n        engine.close()\n        await engine.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(go(loop))\n\n\nrequirements\n------------\n\n* python_ 3.7+\n* pymysql_\n\n\n.. _python: https://www.python.org\n.. _asyncio: http://docs.python.org/3.5/library/asyncio.html\n.. _aiopg: https://github.com/aio-libs/aiopg\n.. _pymysql: https://github.com/pymysql/pymysql\n.. _tornado-mysql: https://github.com/pymysql/tornado-mysql\n\nchanges\n-------\n\n0.2.0 (2023-06-11)\n^^^^^^^^^^^^^^^^^^\n\n* bump minimal sqlalchemy version to 1.3 #815\n\n* remove deprecated pool.get #706\n\n* | partially ported `pymysql#304 <https://github.com/pymysql/pymysql/pull/304>`_ #792\n  | aiomysql now reraises the original exception during connect() if it's not `ioerror`, `oserror` or `asyncio.timeouterror`.\n  | this was previously always raised as `operationalerror`.\n\n* fix debug log level with sha256_password authentication #863\n\n* modernized code with `pyupgrade <https://github.com/asottile/pyupgrade>`_ to python 3.7+ syntax #930\n\n* removed tests for eol mariadb versions 10.3, 10.7 and 10.8, added tests for mariadb 10.9, 10.10, 10.11 #932\n\n0.1.1 (2022-05-08)\n^^^^^^^^^^^^^^^^^^\n\n* fix ssl connection handshake charset not respecting client configuration #776\n\n0.1.0 (2022-04-11)\n^^^^^^^^^^^^^^^^^^\n\n* don't send sys.argv[0] as program_name to mysql server by default #620\n\n* allow running process as anonymous uid #587\n\n* fix timed out mysql 8.0 connections raising internalerror rather than operationalerror #660\n\n* fix timed out mysql 8.0 connections being returned from pool #660\n\n* ensure connections are properly closed before raising an operationalerror when the server connection is lost #660\n\n* ensure connections are properly closed before raising an internalerror when packet sequence numbers are out of sync #660\n\n* unix sockets are now internally considered secure, allowing sha256_password and caching_sha2_password auth methods to be used #695\n\n* test suite now also tests unix socket connections #696\n\n* fix sscursor raising internalerror when last result was not fully retrieved #635\n\n* remove deprecated no_delay argument #702\n\n* support pymysql up to version 1.0.2 #643\n\n* bump minimal pymysql version to 1.0.0 #713\n\n* align % formatting in cursor.executemany() with cursor.execute(), literal % now need to be doubled in cursor.executemany() #714\n\n* fixed unlimited pool size not working, this is now working as documented by passing maxsize=0 to create_pool #119\n\n* added pool.closed property as present in aiopg #463\n\n* fixed sqlalchemy connection context iterator #410\n\n* fix error packet handling for sscursor #428\n\n* required python version is now properly documented in python_requires instead of failing on setup.py execution #731\n\n* add rsa extras_require depending on pymysql[rsa] #557\n\n* migrate to pep 517 build system #746\n\n* self-reported `__version__` now returns version generated by `setuptools-scm` during build, otherwise `'unknown'` #748\n\n* fix sscursor raising query timeout error on wrong query #428\n\n\n0.0.22 (2021-11-14)\n^^^^^^^^^^^^^^^^^^^\n\n* support python 3.10 #505\n\n\n0.0.21 (2020-11-26)\n^^^^^^^^^^^^^^^^^^^\n\n* allow to use custom cursor subclasses #374\n\n* fill connection class with actual client version #388\n\n* fix legacy __aiter__ methods #403\n\n* fix & update docs #418 #437\n\n* ignore pyenv's .python-version file #424\n\n* replace asyncio.streams.incompletereaderror with asyncio.incompletereaderror #460 #454\n\n* add support for sqlalchemy default parameters #455 #466\n\n* update dependencies #485\n\n* support python 3.7 & 3.8 #493\n\n\n0.0.20 (2018-12-19)\n^^^^^^^^^^^^^^^^^^^\n\n* fixed connect_timeout #360\n\n* fixed support for sqla executemany #324\n\n* fix the python 3.7 compatibility #357\n\n* fixed reuse connections when streamreader has an exception #339\n\n* fixes warning when inserting binary strings #326\n\n\n0.0.19 (2018-07-12)\n^^^^^^^^^^^^^^^^^^^\n\n* see v0.0.18\n\n\n0.0.18 (2018-07-09)\n^^^^^^^^^^^^^^^^^^^\n\n* updated to support latest pymysql changes.\n\n* aiomysql now sends client connection info.\n\n* mysql8+ support including sha256_password and cached_sha2_password authentication plugins.\n\n* default max packet length sent to the server is no longer 1.\n\n* fixes issue where cursor.nextset can hang on query sets that raise errors.\n\n\n0.0.17 (2018-07-06)\n^^^^^^^^^^^^^^^^^^^\n\n* pinned version of pymysql\n\n\n0.0.16 (2018-06-03)\n^^^^^^^^^^^^^^^^^^^\n\n* added ability to execute precompiled sqlalchemy queries #294 (thanks @vlanse)\n\n\n0.0.15 (2018-05-20)\n^^^^^^^^^^^^^^^^^^^\n\n* fixed handling of user-defined types for sqlalchemy  #290\n\n* fix keyerror when server reports unknown collation #289\n\n\n0.0.14 (2018-04-22)\n^^^^^^^^^^^^^^^^^^^\n\n* fixed ssl connection finalization  #282\n\n\n0.0.13 (2018-04-19)\n^^^^^^^^^^^^^^^^^^^\n\n* added ssl support #280 (thanks @terrycain)\n\n* fixed __all__ in aiomysql/__init__ #270 (thanks @matianjun1)\n\n* added docker fixtures #275 (thanks @terrycain)\n\n\n0.0.12 (2018-01-18)\n^^^^^^^^^^^^^^^^^^^\n\n* fixed support for sqlalchemy 1.2.0\n\n* fixed argument for cursor.execute in sa engine #239 (thanks @notsosuper)\n\n\n0.0.11 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* fixed readme formatting on pypi\n\n\n0.0.10 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* updated regular expressions to be compatible with pymysql #167 (thanks @alexlisovoy)\n\n* added connection recycling in the pool #216\n\n\n0.0.9 (2016-09-14)\n^^^^^^^^^^^^^^^^^^\n\n* fixed attributeerror in  _request_authentication function #104 (thanks @ttlttl)\n\n* fixed legacy auth #105\n\n* uvloop added to test suite #106\n\n* fixed bug with unicode in json field #107 (thanks @methane)\n\n\n0.0.8 (2016-08-24)\n^^^^^^^^^^^^^^^^^^\n\n* default min pool size reduced to 1 #80 (thanks @drizzt1991)\n\n* update to pymysql 0.7.5 #89\n\n* fixed connection cancellation in process of executing a query #79 (thanks @drizzt1991)\n\n\n0.0.7 (2016-01-27)\n^^^^^^^^^^^^^^^^^^\n\n* fix for multiple results issue, ported from pymysql #52\n\n* fixed useless warning with no_delay option #55\n\n* added async/await support for engine, saconnection, transaction #57\n\n* pool.release returns future so we can wait on it in __aexit__ #60\n\n* update to pymysql 0.6.7\n\n\n0.0.6 (2015-12-11)\n^^^^^^^^^^^^^^^^^^\n\n* fixed bug with sa rollback (thanks @khlyestovillarion!)\n\n* fixed issue with default no_delay option (thanks @khlyestovillarion!)\n\n\n0.0.5 (2015-10-28)\n^^^^^^^^^^^^^^^^^^\n\n* no_delay option is deprecated and true by default\n\n* add cursor.mogrify() method\n\n* support for \"load local infile\" query.\n\n* check connection inside pool, in case of timeout drop it, fixes #25\n\n* add support of python 3.5 features to pool, connection and cursor\n\n\n0.0.4 (2015-05-23)\n^^^^^^^^^^^^^^^^^^\n\n* allow to call connection.wait_closed twice.\n\n* fixed sqlalchemy 1.0.0 support.\n\n* fix #11: rename connection.wait_closed() to .ensure_closed()\n\n* raise resourcewarning on non-closed connection\n\n* rename connection.connect to _connect\n\n\n0.0.3 (2015-03-10)\n^^^^^^^^^^^^^^^^^^\n\n* added support for pymysql up to 0.6.6.\n\n* ported improvements from pymysql.\n\n* added basic documentation.\n\n* fixed and added more examples.\n\n\n0.0.2 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* added manifest.in.\n\n\n0.0.1 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* initial release.\n\n* implemented plain connections: connect, connection, cursor.\n\n* implemented database pools.\n\n* ported sqlalchemy optional support.\n",
  "docs_url": null,
  "keywords": "mysql,mariadb,asyncio,aiomysql",
  "license": "mit",
  "name": "aiomysql",
  "package_url": "https://pypi.org/project/aiomysql/",
  "project_url": "https://pypi.org/project/aiomysql/",
  "project_urls": {
    "CI: GitHub": "https://github.com/aio-libs/aiomysql/actions",
    "Docs: RTD": "https://aiomysql.readthedocs.io/",
    "Download": "https://pypi.python.org/pypi/aiomysql",
    "GitHub: discussions": "https://github.com/aio-libs/aiomysql/discussions",
    "GitHub: issues": "https://github.com/aio-libs/aiomysql/issues",
    "GitHub: repo": "https://github.com/aio-libs/aiomysql",
    "Homepage": "https://github.com/aio-libs/aiomysql"
  },
  "release_url": "https://pypi.org/project/aiomysql/0.2.0/",
  "requires_dist": [
    "PyMySQL (>=1.0)",
    "PyMySQL[rsa] (>=1.0) ; extra == 'rsa'",
    "sqlalchemy (<1.4,>=1.3) ; extra == 'sa'"
  ],
  "requires_python": ">=3.7",
  "summary": "mysql driver for asyncio.",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "nickolainovik@gmail.com",
    "nikolay_novik"
  ],
  "kwds": "aiomysql pymysql_ pymysql _pymysql mariadb",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiomysql",
  "homepage": "https://github.com/aio-libs/aiomysql",
  "release_count": 26,
  "dependency_ids": [
    "pypi_pymysql",
    "pypi_sqlalchemy"
  ]
}
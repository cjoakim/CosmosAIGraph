{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python"
  ],
  "description": ".. image:: https://api.cirrus-ci.com/github/pyscaffold/pyscaffoldext-cookiecutter.svg?branch=master\n    :alt: built status\n    :target: https://cirrus-ci.com/github/pyscaffold/pyscaffoldext-cookiecutter\n.. image:: https://readthedocs.org/projects/pyscaffoldext-cookiecutter/badge/?version=latest\n    :alt: readthedocs\n    :target: https://pyscaffoldext-cookiecutter.readthedocs.io/\n.. image:: https://img.shields.io/coveralls/github/pyscaffold/pyscaffoldext-cookiecutter/master.svg\n    :alt: coveralls\n    :target: https://coveralls.io/r/pyscaffold/pyscaffoldext-cookiecutter\n.. image:: https://img.shields.io/pypi/v/pyscaffoldext-cookiecutter.svg\n    :alt: pypi-server\n    :target: https://pypi.org/project/pyscaffoldext-cookiecutter/\n.. image:: https://pepy.tech/badge/pyscaffoldext-cookiecutter/month\n    :alt: monthly downloads\n    :target: https://pepy.tech/project/pyscaffoldext-cookiecutter\n\n\n==========================\npyscaffoldext-cookiecutter\n==========================\n\n    extension that combines the flexibility of **cookiecutter** templates\n    with the power of **pyscaffold**.\n\n`cookiecutter`_ is a flexible utility that allows the definition of templates\nfor a diverse range of software projects.\non the other hand, `pyscaffold`_ is focused in a good out-of-the-box experience\nfor developing distributable python packages (exclusively).\ndespite the different objectives, it is possible to combine the power of both\ntools to create a custom python project setup.\n\n\nquickstart\n==========\n\nthis extension can be directly installed with ``pip``:\n\n.. code-block:: bash\n\n    pip install pyscaffoldext-cookiecutter\n\nor, if you prefer ``pipx``:\n\n.. code-block:: shell\n\n    pipx install pyscaffold  # if you haven't installed pyscaffold yet\n    pipx inject pyscaffold pyscaffoldext-cookiecutter\n\nnote that, after the installation, ``putup -h`` will show a new option\n``--cookiecutter template``.\nuse this option to point out which template you want to use (path or url).\nthe file structure created by `cookiecutter`_ will be refined by pyscaffold\nafterwards.\nfor example:\n\n.. code-block:: shell\n\n    putup my-proj1 --cookiecutter ~/my-templates/default\n    putup my-proj2 --cookiecutter gh:something/from-github\n\nplease refer to `cookiecutter`_ documentation for more details on possible urls\nand abbreviations.\n\nan additional option ``--cookiecutter-params`` is also added, so you can have\nmore control over the values `cookiecutter`_ uses when rendering the templates\n(pyscaffold will not run cookiecutter's interactive prompt).\nthis option takes the form of a space separated list of ``name=value``\narguments as showed in the example bellow:\n\n.. code-block:: bash\n\n    putup mypkg \\\n      --cookiecutter gh:pyscaffold/cookiecutter-pypackage \\\n      --cookiecutter-params command_line_interface=argparse use_pytest=y\n\ncheck the ``cookiecutter.json`` file in the repository (or directory) of the template you are\nusing to see the available parameters.\nplease notice pyscaffold already add some default parameters, as indicated in\nthe section **suitable templates** bellow.\n\n\ncookiecutter templates with pyscaffold\n======================================\n\nthe following example shows how to create a new package named ``mypkg``,\nthat uses a cookiecutter template, but is enhanced by pyscaffold's features:\n\n.. code-block:: bash\n\n    putup mypkg --cookiecutter gh:pyscaffold/cookiecutter-pypackage\n\nthis is roughly equivalent to first create a project using the cookiecutter\ntemplate and convert it to pyscaffold afterwards:\n\n.. code-block:: bash\n\n    cookiecutter --no-input gh:pyscaffold/cookiecutter-pypackage project_name=mypkg\n    putup mypkg --force\n\n.. note::\n   for complex cookiecutter templates calling ``cookiecutter`` and ``putup``\n   separately may be a better option, since it is possible to answer\n   specific template questions or at least set values for cookiecutter\n   variables.\n\n.. warning::\n   although using cookiecutter templates is a viable solution to customize\n   a project that was set up with pyscaffold, the recommended way is to help\n   improve pyscaffold by contributing an `extension`_.\n\n\n.. _suitable-templates:\n\nsuitable templates\n------------------\n\nnote that pyscaffold will overwrite some files generated by cookiecutter,\nlike ``setup.py``, the ``__init__.py`` file under the package folder\nand most of the ``docs`` folder, in order to provide `setuptools_scm`_\nand `sphinx`_ integration.\ntherefore not all cookiecutter templates are suitable for this approach.\n\nideally, interoperable templates should focus on the file structure inside the\n``src`` folder instead of packaging or distributing, since pyscaffold already\nhandles it under-the-hood. this also means that your template should adhere to\nthe src-layout if you want to generate files within your python package.\n\nin addition, pyscaffold runs cookiecutter with the ``--no-input`` flag\nactivated and thus the user is not prompted for manual configuration. instead,\npyscaffold injects the following parameters::\n\n    author\n    email\n    full_name => same as author\n    project_name => the name of the folder where the project will be generated\n    repo_name => same as project_name\n    package_name => putup's --package (as in `import`)\n    namespace => putup's --namespace (if any)\n    installable_name => putup's --name (an installable name, like in pypi/pip install)\n    project_short_description => putup's description\n    release_date => equivalent to the day you are running putup\n    year => equivalent to the year you are running putup\n\nany extra parameter should be passed using the ``--cookiecutter-params`` option.\n\naccordingly, the template file structure should be similar to::\n\n    cookiecutter-something/\n    \u2514\u2500\u2500 {{cookiecutter.project_name}}/\n        \u2514\u2500\u2500 src/\n            \u2514\u2500\u2500 {{cookiecutter.package_name}}/\n                \u2514\u2500\u2500 ...\n\nsee `cookiecutter`_ for more information about template creation.\n\n.. note::\n   pyscaffold uses cookiecutter only for its ability to create files.\n   pre/post hooks that perform any other kind of side effect are not\n   guaranteed to work.\n\n\n.. _pyscaffold-notes:\n\nmaking changes & contributing\n=============================\n\nthis project uses `pre-commit`_, please make sure to install it before making any\nchanges::\n\n    pip install pre-commit\n    cd pyscaffoldext-cookiecutter\n    pre-commit install\n\nit is a good idea to update the hooks to the latest version::\n\n    pre-commit autoupdate\n\nplease also check pyscaffold's `contribution guidelines`_,\n\nnote\n====\n\nthis project has been set up using pyscaffold 4.0a2. for details and usage\ninformation on pyscaffold see https://pyscaffold.org/.\n\n\n.. _pyscaffold: https://pyscaffold.org\n.. _cookiecutter: https://cookiecutter.readthedocs.org\n.. _setuptools_scm: https://pypi.python.org/pypi/setuptools_scm/\n.. _sphinx: http://www.sphinx-doc.org\n.. _extension: https://pyscaffold.org/en/latest/extensions.html\n.. _pre-commit: http://pre-commit.com/\n.. _contribution guidelines: https://pyscaffold.org/en/latest/contributing.html\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyscaffoldext-cookiecutter",
  "package_url": "https://pypi.org/project/pyscaffoldext-cookiecutter/",
  "project_url": "https://pypi.org/project/pyscaffoldext-cookiecutter/",
  "project_urls": {
    "Documentation": "https://pyscaffoldext-custom-extension.readthedocs.io/",
    "Download": "https://pypi.org/project/pyscaffoldext-cookiecutter/#files",
    "Homepage": "https://github.com/pyscaffold/pyscaffoldext-cookiecutter/",
    "Source": "https://github.com/pyscaffold/pyscaffoldext-cookiecutter/",
    "Tracker": "https://github.com/pyscaffold/pyscaffoldext-cookiecutter/issues"
  },
  "release_url": "https://pypi.org/project/pyscaffoldext-cookiecutter/0.1/",
  "requires_dist": [
    "pyscaffold (<5.0a0,>=4.0b4)",
    "cookiecutter",
    "importlib-metadata ; python_version < \"3.8\"",
    "tox ; extra == 'testing'",
    "pre-commit ; extra == 'testing'",
    "setuptools-scm ; extra == 'testing'",
    "virtualenv ; extra == 'testing'",
    "configupdater ; extra == 'testing'",
    "pytest ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-xdist ; extra == 'testing'"
  ],
  "requires_python": "",
  "summary": "integration of cookiecutter project templates into pyscaffold (see: https://github.com/cookiecutter/cookiecutter)",
  "version": "0.1",
  "releases": [],
  "developers": [
    "anderson_bravalheri",
    "andersonbravalheri@gmail.com"
  ],
  "kwds": "_cookiecutter cookiecutter pyscaffoldext pyscaffold _pyscaffold",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyscaffoldext_cookiecutter",
  "homepage": "https://github.com/pyscaffold/pyscaffoldext-cookiecutter/",
  "release_count": 4,
  "dependency_ids": [
    "pypi_configupdater",
    "pypi_cookiecutter",
    "pypi_importlib_metadata",
    "pypi_pre_commit",
    "pypi_pyscaffold",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_setuptools_scm",
    "pypi_tox",
    "pypi_virtualenv"
  ]
}
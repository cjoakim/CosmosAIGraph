{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools"
  ],
  "description": "cxxfilt |ci|\n============\n\n.. |ci| image:: https://github.com/afq984/python-cxxfilt/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/afq984/python-cxxfilt/actions/workflows/test.yml\n\ndemangling c++ symbols in python / interface to abi::__cxa_demangle\n\nusage\n-----\n\ninstall::\n\n    pip install cxxfilt\n\nuse ``demangle`` to demangle a c++ mangled symbol name::\n\n    >>> import cxxfilt\n    >>> cxxfilt.demangle('_znst22condition_variable_anyd2ev')\n    'std::condition_variable_any::~condition_variable_any()'\n\nnon-mangled name will be kept intact::\n\n    >>> cxxfilt.demangle('main')\n    'main'\n\nto demangle an internal symbol, use `external_only=false`::\n\n    >>> cxxfilt.demangle('n3foo12barexceptione')\n    'n3foo12barexceptione'\n    >>> cxxfilt.demangle('n3foo12barexceptione', external_only=false)\n    'foo::barexception'\n\ninvalid mangled names will trigger an ``invalidname`` exception::\n\n    >>> cxxfilt.demangle('_zqq')\n    traceback (most recent call last):\n      file \"<stdin>\", line 1, in <module>\n      file \"/path/to/python-cxxfilt/cxxfilt/__init__.py\", line 77, in demangle\n        return demangleb(mangled_name.encode()).decode()\n      file \"/path/to/python-cxxfilt/cxxfilt/__init__.py\", line 69, in demangleb\n        raise invalidname(mangled_name)\n    cxxfilt.invalidname: b'_zqq'\n\nuse ``demangleb`` to demangle name in ``bytes``::\n\n    >>> cxxfilt.demangleb(b'_znst22condition_variable_anyd2ev')\n    b'std::condition_variable_any::~condition_variable_any()'\n\nmake custom `demangler` objects to use specific c/c++ libraries::\n\n    >>> from ctypes.util import find_library\n    >>>\n    >>> d = cxxfilt.demangler(find_library('c'), find_library('stdc++'))\n    >>> d\n    <demangler libc='libc.so.6' libcxx='libstdc++.so.6'>\n    >>>\n    >>> d = cxxfilt.demangler(find_library('c'), find_library('c++'))\n    >>> d\n    <demangler libc='libc.so.6' libcxx='libc++.so.1'>\n    >>> d.demangle('_znst22condition_variable_anyd2ev')\n    'std::condition_variable_any::~condition_variable_any()'\n\nsupported environments\n----------------------\n\npython 3.6 or greater.\n\ntested on linux and macos (see github actions). should work on unix systems with libc and libc++/libstdc++.\n\nwill not work on windows (pr welcome though).\n\nfor python 2.7 please use cxxfilt version < 0.3.\n\nchangelog\n---------\n\n0.3.0\n~~~~~\n\n*   added ``demangler`` class.\n\n*   ``import cxxfilt`` no longer fails when there are no c/c++ libraries available.\n    to check whether the default demangler is valid,\n    use the expression: ``not isinstance(cxxfilt.default_demangler, cxxfilt.deferederrordemangler)``.\n\n\ntesting\n-------\n\nrun in shell::\n\n    pytest\n\n\n",
  "docs_url": null,
  "keywords": "c++ c++filt name mangling",
  "license": "bsd",
  "name": "cxxfilt",
  "package_url": "https://pypi.org/project/cxxfilt/",
  "project_url": "https://pypi.org/project/cxxfilt/",
  "project_urls": {
    "Homepage": "https://github.com/afq984/python-cxxfilt"
  },
  "release_url": "https://pypi.org/project/cxxfilt/0.3.0/",
  "requires_dist": [
    "pytest (>=3.0.0) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "python interface to c++filt / abi::__cxa_demangle",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "afg984@gmail.com",
    "afq984"
  ],
  "kwds": "__cxa_demangle symbol symbols default_demangler condition_variable_any",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_cxxfilt",
  "homepage": "https://github.com/afq984/python-cxxfilt",
  "release_count": 5,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
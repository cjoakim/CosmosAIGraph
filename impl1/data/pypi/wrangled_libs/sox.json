{
  "classifiers": [],
  "description": "# pysox\npython wrapper around sox. [read the docs here](http://pysox.readthedocs.org).\n\n[![pypi version](https://badge.fury.io/py/sox.svg)](https://badge.fury.io/py/sox)\n[![documentation status](https://readthedocs.org/projects/resampy/badge/?version=latest)](http://pysox.readthedocs.io/en/latest/?badge=latest)\n[![github license](https://img.shields.io/badge/license-bsd%203--clause-blue.svg)](https://raw.githubusercontent.com/rabitt/pysox/master/license.md)\n[![pypi](https://img.shields.io/pypi/pyversions/django.svg?maxage=2592000)]()\n\n[![build status](https://travis-ci.org/rabitt/pysox.svg?branch=master)](https://travis-ci.org/rabitt/pysox)\n[![coverage status](https://coveralls.io/repos/github/rabitt/pysox/badge.svg?branch=master)](https://coveralls.io/github/rabitt/pysox?branch=master)\n\n![pysocks](https://s-media-cache-ak0.pinimg.com/736x/62/6f/bc/626fbcae9618eccee1c4c7c947bf9d94.jpg)\n\nthis library was presented in the following paper:\n\n[r. m. bittner](https://github.com/rabitt), [e. j. humphrey](https://github.com/ejhumphrey) and j. p. bello, \"[pysox: leveraging the audio signal processing power of sox in python](https://wp.nyu.edu/ismir2016/wp-content/uploads/sites/2294/2016/08/bittner-pysox.pdf)\", in proceedings of the 17th international society for music information retrieval conference late breaking and demo papers, new york city, usa, aug. 2016.\n\n\n# install\n\nthis requires that [sox](http://sox.sourceforge.net/) version 14.4.2 or higher is installed.\n\nto install sox on mac with homebrew:\n\n```brew install sox```\n\nif you want support for `mp3`, `flac`, or `ogg` files, add the following flags:\n\n```brew install sox --with-lame --with-flac --with-libvorbis```\n\non linux:\n\n```apt-get install sox```\n\nor install [from source](https://sourceforge.net/projects/sox/files/sox/).\n\n\n\nto install the most up-to-date release of this module via pypi:\n\n```pip install sox```\n\nto install the master branch:\n\n```pip install git+https://github.com/rabitt/pysox.git```\n\nor\n\n```\ngit clone https://github.com/rabitt/pysox.git\ncd pysox\npython setup.py install\n```\n\n\n# tests\n\nif you have a different version of sox installed, it's recommended that you run\nthe tests locally to make sure everything behaves as expected, by simply running:\n\n```\npytest\n```\n\n# examples\n\n```python\nimport sox\n# create transformer\ntfm = sox.transformer()\n# trim the audio between 5 and 10.5 seconds.\ntfm.trim(5, 10.5)\n# apply compression\ntfm.compand()\n# apply a fade in and fade out\ntfm.fade(fade_in_len=1.0, fade_out_len=0.5)\n# create an output file.\ntfm.build_file('path/to/input_audio.wav', 'path/to/output/audio.aiff')\n# or equivalently using the legacy api\ntfm.build('path/to/input_audio.wav', 'path/to/output/audio.aiff')\n# get the output in-memory as a numpy array\n# by default the sample rate will be the same as the input file\narray_out = tfm.build_array(input_filepath='path/to/input_audio.wav')\n# see the applied effects\ntfm.effects_log\n> ['trim', 'compand', 'fade']\n\n```\n\ntransform in-memory arrays:\n```python\nimport numpy\nimport sox\n# sample rate in hz\nsample_rate = 44100\n# generate a 1-second sine tone at 440 hz\ny = np.sin(2 * np.pi * 440.0 * np.arange(sample_rate * 1.0) / sample_rate)\n# create a transformer\ntfm = sox.transformer()\n# shift the pitch up by 2 semitones\ntfm.pitch(2)\n# transform an in-memory array and return an array\ny_out = tfm.build_array(input_array=y, sample_rate_in=sample_rate)\n# instead, save output to a file\ntfm.build_file(\n    input_array=y, sample_rate_in=sample_rate,\n    output_filepath='path/to/output.wav'\n)\n# create an output file with a different sample rate\ntfm.set_output_format(rate=8000)\ntfm.build_file(\n    input_array=y, sample_rate_in=sample_rate,\n    output_filepath='path/to/output_8k.wav'\n)\n```\n\nconcatenate 3 audio files:\n```python\nimport sox\n# create combiner\ncbn = sox.combiner()\n# pitch shift combined audio up 3 semitones\ncbn.pitch(3.0)\n# convert output to 8000 hz stereo\ncbn.convert(samplerate=8000, n_channels=2)\n# create the output file\ncbn.build(\n    ['input1.wav', 'input2.wav', 'input3.wav'], 'output.wav', 'concatenate'\n)\n# the combiner does not currently support array input/output\n```\n\nget file information:\n```python\nimport sox\n# get the sample rate\nsample_rate = sox.file_info.sample_rate('path/to/file.mp3')\n# get the number of samples\nn_samples = sox.file_info.num_samples('path/to/file.wav')\n# determine if a file is silent\nis_silent = sox.file_info.silent('path/to/file.aiff')\n# file info doesn't currently support array input\n```\n\n\n",
  "docs_url": null,
  "keywords": "audio effects sox",
  "license": "bsd-3-clause",
  "name": "sox",
  "package_url": "https://pypi.org/project/sox/",
  "project_url": "https://pypi.org/project/sox/",
  "project_urls": {
    "Download": "http://github.com/rabitt/pysox/releases",
    "Homepage": "https://github.com/rabitt/pysox"
  },
  "release_url": "https://pypi.org/project/sox/1.4.1/",
  "requires_dist": [
    "numpy (>=1.9.0)",
    "sphinx (==1.2.3) ; extra == 'docs'",
    "sphinxcontrib-napoleon ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pytest-pep8 ; extra == 'tests'",
    "pysoundfile (>=0.9.0) ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "python wrapper around sox.",
  "version": "1.4.1",
  "releases": [],
  "developers": [
    "rachel.bittner@nyu.edu",
    "rachel_bittner"
  ],
  "kwds": "pysox input_audio sox audio pysocks",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_sox",
  "homepage": "https://github.com/rabitt/pysox",
  "release_count": 26,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_pysoundfile",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_pep8",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_napoleon"
  ]
}
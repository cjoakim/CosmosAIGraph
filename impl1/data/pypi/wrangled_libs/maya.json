{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\nmaya: datetimes for humans\u2122\n===========================\n\n.. image:: https://img.shields.io/pypi/v/maya.svg\n    :target: https://pypi.python.org/pypi/maya\n\n.. image:: https://travis-ci.org/kennethreitz/maya.svg?branch=master\n    :target: https://travis-ci.org/kennethreitz/maya\n\n.. image:: https://img.shields.io/badge/saythanks-!-1eaedb.svg\n    :target: https://saythanks.io/to/kennethreitz\n\n\ndatetimes are very frustrating to work with in python, especially when dealing\nwith different locales on different systems. this library exists to make the\nsimple things **much** easier, while admitting that time is an illusion\n(timezones doubly so).\n\ndatetimes should be interacted with via an api written for humans.\n\nmaya is mostly built around the headaches and use-cases around parsing datetime data from websites.\n\n.. image:: https://farm4.staticflickr.com/3702/33288285996_5b69d2b8f7_k_d.jpg\n\nart by `sam flores\n<https://www.instagram.com/samagram12/>`_ (photo by `kenneth reitz\n<https://www.instagram.com/kennethreitz/>`_). \n\nif you're interested in financially supporting kenneth reitz open source, consider `visiting this link <https://cash.me/$kennethreitz>`_. your support helps tremendously with sustainability of motivation, as open source is no longer part of my day job.\n\n\u2624 basic usage of maya\n---------------------\n\nbehold, datetimes for humans!\n\n.. code-block:: pycon\n\n    >>> now = maya.now()\n    <mayadt epoch=1481850660.9>\n\n    >>> tomorrow = maya.when('tomorrow')\n    <mayadt epoch=1481919067.23>\n\n    >>> tomorrow.slang_date()\n    'tomorrow'\n\n    >>> tomorrow.slang_time()\n    '23 hours from now'\n\n    # also: mayadt.from_iso8601(...)\n    >>> tomorrow.iso8601()\n    '2017-02-10t22:17:01.445418z'\n\n    # also: mayadt.from_rfc2822(...)\n    >>> tomorrow.rfc2822()\n    'fri, 10 feb 2017 22:17:01 gmt'\n\n    # also: mayadt.from_rfc3339(...)\n    >>> tomorrow.rfc3339()\n    '2017-02-10t22:17:01.44z'\n\n    >>> tomorrow.datetime()\n    datetime.datetime(2016, 12, 16, 15, 11, 30, 263350, tzinfo=<utc>)\n\n    # automatically parse datetime strings and generate naive datetimes.\n    >>> scraped = '2016-12-16 18:23:45.423992+00:00'\n    >>> maya.parse(scraped).datetime(to_timezone='us/eastern', naive=true)\n    datetime.datetime(2016, 12, 16, 13, 23, 45, 423992)\n\n    >>> rand_day = maya.when('2011-02-07', timezone='us/eastern')\n    <mayadt epoch=1297036800.0>\n\n    # maya speaks python.\n    >>> m = maya.mayadt.from_datetime(datetime.utcnow())\n    >>> print(m)\n    wed, 20 sep 2017 17:24:32 gmt\n\n    >>> m = maya.mayadt.from_struct(time.gmtime())\n    >>> print(m)\n    wed, 20 sep 2017 17:24:32 gmt\n\n    >>> m = maya.mayadt(time.time())\n    >>> print(m)\n    wed, 20 sep 2017 17:24:32 gmt\n\n    >>> rand_day.day\n    7\n\n    >>> rand_day.add(days=10).day\n    17\n\n    # always.\n    >>> rand_day.timezone\n    utc\n\n    # range of hours in a day:\n    >>> maya.intervals(start=maya.now(), end=maya.now().add(days=1), interval=60*60)\n    <generator object intervals at 0x105ba5820>\n\n    # snap modifiers\n    >>> dt = maya.when('mon, 21 feb 1994 21:21:42 gmt')\n    >>> dt.snap('@d+3h').rfc2822()\n    'mon, 21 feb 1994 03:00:00 gmt'\n\n\u2624 advanced usage of maya\n------------------------\n\nin addition to timestamps, maya also includes a wonderfully powerful ``mayainterval`` class, which represents a range of time (e.g. an event). with this class, you can perform a multitude of advanced calendar calculations with finesse and ease.\n\nfor example:\n\n.. code-block:: pycon\n\n    >>> from maya import mayainterval\n\n    # create an event that is one hour long, starting now.\n    >>> event_start = maya.now()\n    >>> event_end = event_start.add(hours=1)\n\n    >>> event = mayainterval(start=event_start, end=event_end)\n\nfrom here, there are a number of methods available to you, which you can use to compare this event to another event.\n\n\n\n\u2624 why is this useful?\n---------------------\n\n- all timezone algebra will behave identically on all machines, regardless of system locale.\n- complete symmetric import and export of both iso 8601 and rfc 2822 datetime stamps.\n- fantastic parsing of both dates written for/by humans and machines (``maya.when()`` vs ``maya.parse()``).\n- support for human slang, both import and export (e.g. `an hour ago`).\n- datetimes can very easily be generated, with or without tzinfo attached.\n- this library is based around epoch time, but dates before jan 1 1970 are indeed supported, via negative integers.\n- maya never panics, and always carries a towel.\n\n\n\u2624 what about delorean, arrow, & pendulum?\n-----------------------------------------\n\nall these projects complement each other, and are friends. pendulum, for example, helps power maya's parsing.\n\narrow, for example, is a fantastic library, but isn't what i wanted in a datetime library. in many ways, it's better than maya for certain things. in some ways, in my opinion, it's not.\n\ni simply desire a sane api for datetimes that made sense to me for all the things i'd ever want to do\u2014especially when dealing with timezone algebra. arrow doesn't do all of the things i need (but it does a lot more!). maya does do exactly what i need.\n\ni think these projects complement each-other, personally. maya is great for parsing websites, and dealing with calendar events!\n\n\n\u2624 installing maya\n-----------------\n\ninstallation is easy, with `pipenv <http://pipenv.org/>`_::\n\n    $ pipenv install maya\n\n\u2728\ud83c\udf70\u2728\n\n\u2624 like it?\n----------\n\n`say thanks <https://saythanks.io/to/kennethreitz>`_!\n\n\nhow to contribute\n-----------------\n\n#. check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. fork `the repository`_ on github to start making your changes to the **master** branch (or branch off of it).\n#. write a test which shows that the bug was fixed or that the feature works as expected.\n#. send a pull request and bug the maintainer until it gets merged and published. :) make sure to add yourself to authors_.\n\n.. _`the repository`: http://github.com/kennethreitz/maya\n.. _authors: https://github.com/kennethreitz/maya/blob/master/authors.rst\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "maya",
  "package_url": "https://pypi.org/project/maya/",
  "project_url": "https://pypi.org/project/maya/",
  "project_urls": {
    "Homepage": "https://github.com/kennethreitz/maya"
  },
  "release_url": "https://pypi.org/project/maya/0.6.1/",
  "requires_dist": [
    "humanize",
    "pytz",
    "dateparser (>=0.7.0)",
    "tzlocal",
    "pendulum (>=2.0.2)",
    "snaptime"
  ],
  "requires_python": "",
  "summary": "datetimes for humans.",
  "version": "0.6.1",
  "releases": [],
  "developers": [
    "kenneth_reitz",
    "me@kennethreitz.org"
  ],
  "kwds": "maya mayainterval mayadt from_datetime to_timezone",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_maya",
  "homepage": "https://github.com/kennethreitz/maya",
  "release_count": 24,
  "dependency_ids": [
    "pypi_dateparser",
    "pypi_humanize",
    "pypi_pendulum",
    "pypi_pytz",
    "pypi_snaptime",
    "pypi_tzlocal"
  ]
}
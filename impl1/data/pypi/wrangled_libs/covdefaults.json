{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://github.com/asottile/covdefaults/actions/workflows/main.yml/badge.svg)](https://github.com/asottile/covdefaults/actions/workflows/main.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/covdefaults/main.svg)](https://results.pre-commit.ci/latest/github/asottile/covdefaults/main)\n\ncovdefaults\n===========\n\na coverage plugin to provide sensible default settings\n\n## installation\n\n```bash\npip install covdefaults\n```\n\n## usage\n\nto enable the plugin, add `covdefaults` to your coverage plugins\n\nin `.coveragerc`:\n\n```ini\n[run]\nplugins = covdefaults\n```\n\nin `setup.cfg` / `tox.ini`:\n\n```ini\n[coverage:run]\nplugins = covdefaults\n```\n\nin `pyproject.toml`:\n\n```ini\n[tool.coverage.run]\nplugins = [\"covdefaults\"]\n```\n\n## default settings\n\n### `[coverage:run]`\n\n```ini\nbranch = true\nsource = .\nomit =\n    */__main__.py\n    */setup.py\n```\n\n### `[coverage:report]`\n\n```ini\nshow_missing = true\nskip_covered = true\nfail_under = 100\nexclude_lines =\n    # a more strict default pragma\n    \\# pragma: no cover\\b\n\n    # allow defensive code\n    ^\\s*raise assertionerror\\b\n    ^\\s*raise notimplementederror\\b\n    ^\\s*return notimplemented\\b\n    ^\\s*raise$\n\n    # typing-related code\n    ^\\s*if (false|type_checking):\n    : \\.\\.\\.(\\s*#.*)?$\n    ^ +\\.\\.\\.$\n    -> ['\"]?noreturn['\"]?:\n\n    # non-runnable code\n    if __name__ == ['\"]__main__['\"]:$\n\n    # additional platform related pragmas (see below)\n    # additional version related pragmas (see below)\npartial_branches =\n    # a more strict default pragma\n    \\# pragma: no cover\\b\n\n    # out platform pragmas\n    \\# pragma: (nt|posix|cygwin|darwin|linux|msys|win32|cpython|pypy) (no )?cover\\b\n\n    # our version pragmas\n    \\# pragma: (>=?|<=?|==|!=)\\d+\\.\\d+ cover\\b\n```\n\n### platform specific `# pragma: no cover`\n\nseveral `# pragma: no cover` tags will be added automatically based on the\nplatform and implementation.\n\nthese will be in the form of:\n\n```python\n# pragma: tag no cover\n```\n\nor\n\n```python\n# pragma: tag cover\n```\n\nthese tags will be generated by the following values:\n\n- `os.name`\n    - `nt` (windows)\n    - `posix` (linux, macos, cygwin, etc.)\n- `sys.platform`\n    - `cygwin`\n    - `darwin` (macos)\n    - `linux`\n    - `msys`\n    - `win32`\n- `sys.implementation.name`\n    - `cpython`\n    - `pypy`\n\nfor every tag which does not match, you can use negation.  here's an example:\n\n```python\nif sys.platform == 'win32':  # pragma: win32 cover\n    bin_dir = 'scripts'\nelse:  # pragma: win32 no cover\n    bin_dir = 'bin'\n```\n\nnote here that `# pragma: win32 cover` will become a \"no cover\" for everything\nwhich is not `win32` -- whereas the `# pragma: win32 no cover` will be a\n\"no cover\" only on `win32`.\n\n### version specific `# pragma: no cover`\n\nseveral `# pragma: no cover` tags will be added automatically based on the\nplatform and implementation.\n\nthese will be in the form of:\n\n```python\n# pragma: >=#.# cover\n```\n\nwhere the comparison operator is one of `>`, `>=`, `<`, `<=`, `==`, `!=`\n\nfor example:\n\n```python\nif sys.version_info >= (3, 9):  # pragma: >=3.9 cover\n    print('3.9+')\nelse:  # pragma: <3.9 cover\n    print('old')\n```\n\n### overriding options\n\nseveral of the options can be overridden / extended in your coverage\nconfiguration.  the examples below assume `.coveragerc` however any of the\nfiles `coverage` supports work as well.\n\n#### `run:omit`\n\n```ini\n[run]\nomit =\n    pre_commit/resources/*\n```\n\nthis will result in the `pre_commit/resources/*` being `omit`ted in addition\nto the defaults provided by `covdefaults`.\n\n```ini\n[covdefaults]\nsubtract_omit = */__main__.py\n```\n\nthis will result in `*/__main__.py` not being `omit`ted (`*/__main__.py` is\namong the defaults provided by `covdefaults`).\n\n#### `run:source`\n\n```ini\n[run]\nsource = $pwd\n```\n\ncovdefaults will not override this value to `.` if it is set manually.\n\n#### `report:exclude_lines`\n\n```ini\n[report]\nexclude_lines =\n    ^if mypy:$\n```\n\nthis will result in lines matching `^if mypy:$` to additionally be excluded\nfrom coverage in addition to the defaults provided by `covdefaults`.\n\n#### `report:fail_under`\n\n```ini\n[report]\nfail_under = 90\n```\n\n`covdefaults` will not change the value if you provide one for `fail_under`\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "covdefaults",
  "package_url": "https://pypi.org/project/covdefaults/",
  "project_url": "https://pypi.org/project/covdefaults/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/covdefaults"
  },
  "release_url": "https://pypi.org/project/covdefaults/2.3.0/",
  "requires_dist": [
    "coverage (>=6.0.2)"
  ],
  "requires_python": ">=3.7",
  "summary": "a coverage plugin to provide sensible default settings",
  "version": "2.3.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "coveragerc covdefaults badge ci coverage",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_covdefaults",
  "homepage": "https://github.com/asottile/covdefaults",
  "release_count": 10,
  "dependency_ids": [
    "pypi_coverage"
  ]
}
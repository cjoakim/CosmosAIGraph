{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "# matplotlib-scalebar\n\n![ci](https://github.com/ppinard/matplotlib-scalebar/workflows/ci/badge.svg)\n![pypi](https://img.shields.io/pypi/v/matplotlib-scalebar)\n\nprovides a new artist for [matplotlib](https://matplotlib.org) to display a scale bar, aka micron bar.\nit is particularly useful when displaying calibrated images plotted using\n`plt.imshow(...)`.\n\n![example of scale bar](doc/splashscreen.png)\n\nthe artist supports customization either directly from the **scalebar** object or from the matplotlibrc.\n\n## installation\n\neasiest way to install using `pip`:\n\n```bash\npip install matplotlib-scalebar\n```\n\nfor development installation from the git repository:\n\n```bash\ngit clone git@github.com:ppinard/matplotlib-scalebar.git\npip install -e matplotlib-scalebar\n```\n\n## getting started\n\nthere are many ways to customize the scale bar.\nexamples and explanations of the arguments of the **scalebar** class are given [below](#scalebar-arguments), but here is a quick start guide.\n\nthe constructor arguments *dx* and *units* specify the pixel dimension.\nfor example `scalebar(0.2, 'um')` indicates that each pixel is equal to 0.2 micrometer.\nby default, the scale bar uses si units of length (e.g. m, cm, um, km, etc.).\nsee examples below for other system of units.\n\nin this example, we load a sample image from the matplotlib library, create a subplot, plot image, create scale bar and add scale bar as an \"artist\" of the subplot.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cbook as cbook\nfrom matplotlib_scalebar.scalebar import scalebar\n\n# load image\nwith cbook.get_sample_data(\"s1045.ima.gz\") as dfile:\n    im = np.frombuffer(dfile.read(), np.uint16).reshape((256, 256))\n\n# create subplot\nfig, ax = plt.subplots()\nax.axis(\"off\")\n\n# plot image\nax.imshow(im, cmap=\"gray\")\n\n# create scale bar\nscalebar = scalebar(0.08, \"cm\", length_fraction=0.25)\nax.add_artist(scalebar)\n\n# show\nplt.show()\n```\n\n![example of scale bar](doc/getting_started.png)\n\n## scalebar arguments\n\nhere are arguments of the **scalebar** class constructor and examples how to use them.\n\n```python\nscalebar = scalebar(\n        dx,\n        units=\"m\",\n        dimension=\"si-length\",\n        label=none,\n        length_fraction=none,\n        height_fraction=none,\n        width_fraction=none,\n        location=none,\n        pad=none,\n        border_pad=none,\n        sep=none,\n        frameon=none,\n        color=none,\n        box_color=none,\n        box_alpha=none,\n        scale_loc=none,\n        label_loc=none,\n        font_properties=none,\n        label_formatter=none,\n        scale_formatter=none,\n        fixed_value=none,\n        fixed_units=none,\n        animated=false,\n        rotation=none,\n    )\n```\n\neach argument can also be changed afterwards using their respective property.\n\n```python\nscalebar.dx = 2.0\n```\n\nthe following schematic illustrates the nomenclature used in the definition of the arguments.\n\n![nomenclature](doc/nomenclature.png)\n\n### dx (required)\n\nsize of one pixel in *units* specified by the next argument.\n\nset *dx* to 1.0 if the axes image has already been calibrated by setting its *extent*.\n\n```python\nfig, ax = plt.subplots()\nax.axis(\"off\")\n\nax.imshow(im, cmap=\"gray\", extent=[0, 20.48, 0, 20.48])\n\nscalebar = scalebar(1, \"cm\", length_fraction=0.25)\nax.add_artist(scalebar)\n```\n\n![dx with extent](doc/argument_dx.png)\n\n**special notes for geospatial plots**:\nif you are plotting geospatial coordinates (such as scatterplots of the location of structures, [geopandas](http://geopandas.org) geodataframe plots, etc.), *dx* needs to be set differently depending on the coordinate system:\n\n* for utm based coordinate system, where the x and y are in meters, simply set `dx = 1`.\n* for wgs or nad based coordinate system, where x and y are in latitude (y) and longitude (x), compute the distance between two points at the latitude (y) you wish to have the scale represented and are also one full degree of longitude (x) apart, in meters. for example, `dx = great_circle_distance((x, y), (x + 1, y))`\n\n### units\n\nunits of *dx*.\nthe units needs to be valid for the specified *dimension*.\ndefault: `m`.\n\n### dimension\n\ndimension of *dx* and *units*. it can either be equal:\n\n* `si-length` (default): scale bar showing km, m, cm, etc.\n* `imperial-length`: scale bar showing in, ft, yd, mi, etc.\n* `si-length-reciprocal`: scale bar showing 1/m, 1/cm, etc.\n* `pixel-length`: scale bar showing px, kpx, mpx, etc.\n* `angle`: scale bar showing \u00b0, \u02b9 (minute of arc) or \u02b9\u02b9 (second of arc)\n* a `matplotlib_scalebar.dimension._dimension` object\n\n```python\nfig, ax = plt.subplots()\nax.axis(\"off\")\n\nax.imshow(im, cmap=\"gray\")\n\nscalebar = scalebar(0.0315, \"in\", dimension=\"imperial-length\", length_fraction=0.25)\nax.add_artist(scalebar)\n```\n\n![imperial dimension](doc/argument_dimension.png)\n\n### label\n\noptional label associated with the scale bar.\ndefault: `none`, no label is shown.\nthe position of the label with respect to the scale bar can be adjusted using *label_loc* argument.\n\n### length_fraction\n\ndesired length of the scale bar as a fraction of the subplot's width.\ndefault: `none`, value from matplotlibrc or `0.2`.\nthe actual length of the scale bar is automatically determined based on the specified pixel size (*dx* and *units*) and the contraint that the scale value can only take the following numbers: 1, 2, 5, 10, 15, 20, 25, 50, 75, 100, 125, 150, 200, 500 or 750.\nif you want a specific value, see [*fixed_value*](#fixed_value) and [*fixed_units*](#fixed_units).\n\nin the example below, the scale bar for a *length_fraction* of 0.25 and 0.5 is the same because the scale cannot have a value between 2 and 5 mm.\n\n![length fraction](doc/argument_length_fraction.png)\n\n### height_fraction\n\n**deprecated**, use *width_fraction*.\n\n### width_fraction\n\nwidth of the scale bar as a fraction of the subplot's height.\ndefault: `none`, value from matplotlibrc or `0.01`.\n\n### location\n\na location code, same as matplotlib's legend, either: `upper right`, `upper left`, `lower left`, `lower right`, `right`, `center left`, `center right`, `lower center`, `upper center` or `center`.\ndefault: `none`, value from matplotlibrc or `upper right`.\n\n### loc\n\nalias for *location*.\n\n### pad\n\npadding inside the box, as a fraction of the font size.\ndefault: `none`, value from matplotlibrc or `0.2`.\n\n### border_pad\n\npadding outside the box, fraction of the font size.\ndefault: `none`, value from matplotlibrc or `0.1`.\n\n### sep\n\nseparation in points between the scale bar and scale, and between the scale bar and label.\ndefault: `none`, value from matplotlibrc or `5`.\n\n### frameon\n\nwhether to draw a box behind the scale bar, scale and label.\ndefault: `none`, value from matplotlibrc or `true`.\n\n### color\n\ncolor for the scale bar, scale and label.\ndefault: `none`, value from matplotlibrc or `k` (black).\n\n### box_color\n\nbackground color of the box.\ndefault: `none`, value from matplotlibrc or `w` (white).\n\n### box_alpha\n\ntransparency of box.\ndefault: `none`, value from matplotlibrc or `1.0` (opaque).\n\n### scale_loc\n\nlocation of the scale with respect to the scale bar.\neither `bottom`, `top`, `left`, `right`, `none`.\ndefault: `none`, value from matplotlibrc or `bottom`.\nif `\"none\"`, no scale is shown.\n\n![scale_loc](doc/argument_scale_loc.png)\n\n### label_loc\n\nlocation of the label with respect to the scale bar.\neither `bottom`, `top`, `left`, `right`, `none`.\ndefault: `none`, value from matplotlibrc or `top`.\nif `\"none\"`, no label is shown.\n\n### font_properties\n\nfont properties of the scale and label text, specified either as `dict` or `str`.\nsee [`fontproperties`](https://matplotlib.org/api/font_manager_api.html#matplotlib.font_manager.fontproperties) for the arguments.\ndefault: `none`, default font properties of matplotlib.\n\n### label_formatter\n\n**deprecated**, use *scale_formatter*.\n\n### scale_formatter\n\ncustom function called to format the scale.\nneeds to take 2 arguments - the scale value and the unit.\ndefault: `none` which results in\n\n```python\nscale_formatter = lambda value, unit: f\"{value} {unit}\"\n```\n\n### fixed_value\n\nvalue for the scale.\nthe length of the scale bar is calculated based on the specified pixel size *dx*.\ndefault: `none`, the value is automatically determined based on *length_fraction*.\n\n### fixed_units\n\nunits of the *fixed_value*.\ndefault: `none`, if *fixed value* is not `none`, the units of *dx* are used.\n\n### animated\n\nanimation state.\ndefault: `false`\n\n### rotation\n\nwhether to create a scale bar based on the x-axis (default) or y-axis.\n*rotation* can either be `horizontal` or `vertical`.\nnote you might have to adjust *scale_loc* and *label_loc* to achieve desired layout.\ndefault: `none`, value from matplotlibrc or `horizontal`.\n\n```python\nfig, ax = plt.subplots()\nax.axis(\"off\")\n\nax.imshow(im, cmap=\"gray\")\n\nscalebar = scalebar(\n    0.08,\n    \"cm\",\n    length_fraction=0.25,\n    rotation=\"vertical\",\n    scale_loc=\"right\",\n    border_pad=1,\n    pad=0.5,\n)\nax.add_artist(scalebar)\n```\n\n![rotation](doc/argument_rotation.png)\n\n## release notes\n\n### 0.8.1\n\n* remove useless shebangs ([#47][i47])\n* correct license trove classifier ([#48][i48])\n\n### 0.8.0\n\n* fix missing `_all_deprecated` in future matplotlib (> 3.5) ([#44][i44])\n* add ability to hide scale and label ([#41][i41])\n\n### 0.7.2\n\n* fix deprecation warning in matplotlib >= 3.4 of `minimumdescent` ([#36][i36])\n\n### 0.7.1\n\n* fix scalebar location validation from rcparams ([#35](i35))\n\n### 0.7.0\n\n* add rotation to display scale bar for the y-axis ([#30][i30])\n* new documentation ([#32][i32])\n* deprecate argument *height_fraction*, replaced by *width_fraction* ([#32][i32])\n* deprecate argument *label_formatter*, replaced by *scale_formatter* ([#32][i32])\n* add alias *loc* for *location* ([#32][i32])\n* fix deprecation warning in matplotlib >= 3.3 of `validate_legend_loc` ([#33][i33])\n\n### 0.6.2\n\n* fix reciprocal unit ([#29][i29])\n\n### 0.6.1\n\n* add notes about for geospatial plots ([#20][i20])\n\n### 0.6.0\n\n* add angular units ([#19][i19])\n* add blit support and fix documentation ([#22][i22])\n* fix issue with getting the wrong preferred values for the scale bar ([#23][i23])\n* package license file to distribution ([#24][i24])\n\n### 0.5.1\n\n* remove leftover print statement ([#18][i18])\n\n### 0.5.0\n\n* add pixel unit ([#12][i12])\n* display micro symbol in text mode ([#15][i15])\n* fix error in length of scale bar; the bar was drawn with an edge around it which made it longer than the actual size ([#14][i14])\n\n### 0.4.1\n\n* fix deprecated usage of is_string_like ([#11][i11])\n\n### 0.4.0\n\n* add possibility to specified a fixed value for the scale bar ([#9][i9])\n\n## contributors\n\n[@maweigert](https://github.com/maweigert),\n[@crosbyla](https://github.com/crosbyla),\n[@joschkazj](https://github.com/joschkazj),\n[@akuederle](https://github.com/akuederle),\n[@habi](https://github.com/habi),\n[@huangziwei](https://github.com/huangziwei),\n[@sirjohnfranklin](https://github.com/sirjohnfranklin),\n[@alexandrejaguar](https://github.com/alexandrejaguar),\n[@parishcm](https://github.com/parishcm),\n[@wiai](https://github.com/wiai),\n[@cosmicshear](https://github.com/cosmicshear),\n[@ericore](https://github.com/ericore),\n[@seangrogan](https://github.com/seangrogan),\n[@philiperleal](https://github.com/philiperleal),\n[@din14970](https://github.com/din14970),\n[@sarthakjariwala](https://github.com/sarthakjariwala),\n[@k1moradi](https://github.com/k1moradi),\n[@anntzer](https://github.com/anntzer),\n[@bugalo](https://github.com/bugalo),\n[@musicinmybrain](https://github.com/musicinmybrain)\n\n## license\n\nlicense under the bsd license, compatible with matplotlib.\n\ncopyright (c) 2015-2022 philippe pinard\n\n[i9]: https://github.com/ppinard/matplotlib-scalebar/issues/9\n[i11]: https://github.com/ppinard/matplotlib-scalebar/issues/11\n[i12]: https://github.com/ppinard/matplotlib-scalebar/issues/12\n[i14]: https://github.com/ppinard/matplotlib-scalebar/issues/14\n[i15]: https://github.com/ppinard/matplotlib-scalebar/issues/15\n[i18]: https://github.com/ppinard/matplotlib-scalebar/issues/18\n[i19]: https://github.com/ppinard/matplotlib-scalebar/issues/19\n[i20]: https://github.com/ppinard/matplotlib-scalebar/issues/20\n[i22]: https://github.com/ppinard/matplotlib-scalebar/issues/22\n[i23]: https://github.com/ppinard/matplotlib-scalebar/issues/23\n[i24]: https://github.com/ppinard/matplotlib-scalebar/issues/24\n[i29]: https://github.com/ppinard/matplotlib-scalebar/issues/29\n[i30]: https://github.com/ppinard/matplotlib-scalebar/issues/30\n[i32]: https://github.com/ppinard/matplotlib-scalebar/issues/32\n[i33]: https://github.com/ppinard/matplotlib-scalebar/issues/33\n[i35]: https://github.com/ppinard/matplotlib-scalebar/issues/35\n[i36]: https://github.com/ppinard/matplotlib-scalebar/issues/36\n[i41]: https://github.com/ppinard/matplotlib-scalebar/issues/41\n[i44]: https://github.com/ppinard/matplotlib-scalebar/pull/44\n[i47]: https://github.com/ppinard/matplotlib-scalebar/pull/47\n[i48]: https://github.com/ppinard/matplotlib-scalebar/pull/48\n\n\n",
  "docs_url": null,
  "keywords": "matplotlib scale micron bar",
  "license": "bsd",
  "name": "matplotlib-scalebar",
  "package_url": "https://pypi.org/project/matplotlib-scalebar/",
  "project_url": "https://pypi.org/project/matplotlib-scalebar/",
  "project_urls": {
    "Homepage": "https://github.com/ppinard/matplotlib-scalebar"
  },
  "release_url": "https://pypi.org/project/matplotlib-scalebar/0.8.1/",
  "requires_dist": [
    "matplotlib"
  ],
  "requires_python": "~=3.7",
  "summary": "artist for matplotlib to display a scale bar",
  "version": "0.8.1",
  "releases": [],
  "developers": [
    "philippe.pinard@gmail.com",
    "philippe_pinard"
  ],
  "kwds": "matplotlib_scalebar scalebar matplotlibrc matplotlib scale_formatter",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_matplotlib_scalebar",
  "homepage": "https://github.com/ppinard/matplotlib-scalebar",
  "release_count": 16,
  "dependency_ids": [
    "pypi_matplotlib"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "pyspellchecker\n===============================================================================\n\n.. image:: https://img.shields.io/badge/license-mit-blue.svg\n    :target: https://opensource.org/licenses/mit/\n    :alt: license\n.. image:: https://img.shields.io/github/release/barrust/pyspellchecker.svg\n    :target: https://github.com/barrust/pyspellchecker/releases\n    :alt: github release\n.. image:: https://github.com/barrust/pyspellchecker/workflows/python%20package/badge.svg\n    :target: https://github.com/barrust/pyspellchecker/actions?query=workflow%3a%22python+package%22\n    :alt: build status\n.. image:: https://codecov.io/gh/barrust/pyspellchecker/branch/master/graph/badge.svg?token=odetingz9k\n    :target: https://codecov.io/gh/barrust/pyspellchecker\n    :alt: test coverage\n.. image:: https://badge.fury.io/py/pyspellchecker.svg\n    :target: https://badge.fury.io/py/pyspellchecker\n    :alt: pypi package\n.. image:: http://pepy.tech/badge/pyspellchecker\n    :target: https://pepy.tech/project/pyspellchecker\n    :alt: downloads\n\n\npure python spell checking based on `peter\nnorvig's <https://norvig.com/spell-correct.html>`__ blog post on setting\nup a simple spell checking algorithm.\n\nit uses a `levenshtein distance <https://en.wikipedia.org/wiki/levenshtein_distance>`__\nalgorithm to find permutations within an edit distance of 2 from the\noriginal word. it then compares all permutations (insertions, deletions,\nreplacements, and transpositions) to known words in a word frequency\nlist. those words that are found more often in the frequency list are\n**more likely** the correct results.\n\n``pyspellchecker`` supports multiple languages including english, spanish,\ngerman, french, portuguese, arabic and basque. for information on how the dictionaries were\ncreated and how they can be updated and improved, please see the\n**dictionary creation and updating** section of the readme!\n\n``pyspellchecker`` supports **python 3**\n\n``pyspellchecker`` allows for the setting of the levenshtein distance (up to two) to check.\nfor longer words, it is highly recommended to use a distance of 1 and not the\ndefault 2. see the quickstart to find how one can change the distance parameter.\n\n\ninstallation\n-------------------------------------------------------------------------------\n\nthe easiest method to install is using pip:\n\n.. code:: bash\n\n    pip install pyspellchecker\n\nto build from source:\n\n.. code:: bash\n\n    git clone https://github.com/barrust/pyspellchecker.git\n    cd pyspellchecker\n    python -m build\n\nfor *python 2.7* support, install `release 0.5.6 <https://github.com/barrust/pyspellchecker/releases/tag/v0.5.6>`__\nbut note that no future updates will support *python 2*.\n\n.. code:: bash\n\n    pip install pyspellchecker==0.5.6\n\n\nquickstart\n-------------------------------------------------------------------------------\n\nafter installation, using ``pyspellchecker`` should be fairly straight\nforward:\n\n.. code:: python\n\n    from spellchecker import spellchecker\n\n    spell = spellchecker()\n\n    # find those words that may be misspelled\n    misspelled = spell.unknown(['something', 'is', 'hapenning', 'here'])\n\n    for word in misspelled:\n        # get the one `most likely` answer\n        print(spell.correction(word))\n\n        # get a list of `likely` options\n        print(spell.candidates(word))\n\n\nif the word frequency list is not to your liking, you can add additional\ntext to generate a more appropriate list for your use case.\n\n.. code:: python\n\n    from spellchecker import spellchecker\n\n    spell = spellchecker()  # loads default word frequency list\n    spell.word_frequency.load_text_file('./my_free_text_doc.txt')\n\n    # if i just want to make sure some words are not flagged as misspelled\n    spell.word_frequency.load_words(['microsoft', 'apple', 'google'])\n    spell.known(['microsoft', 'google'])  # will return both now!\n\n\nif the words that you wish to check are long, it is recommended to reduce the\n`distance` to 1. this can be accomplished either when initializing the spell\ncheck class or after the fact.\n\n.. code:: python\n\n    from spellchecker import spellchecker\n\n    spell = spellchecker(distance=1)  # set at initialization\n\n    # do some work on longer words\n\n    spell.distance = 2  # set the distance parameter back to the default\n\n\nnon-english dictionaries\n-------------------------------------------------------------------------------\n\n``pyspellchecker`` supports several default dictionaries as part of the default\npackage. each is simple to use when initializing the dictionary:\n\n.. code:: python\n\n    from spellchecker import spellchecker\n\n    english = spellchecker()  # the default is english (language='en')\n    spanish = spellchecker(language='es')  # use the spanish dictionary\n    russian = spellchecker(language='ru')  # use the russian dictionary\n    arabic = spellchecker(language='ar')   # use the arabic dictionary\n\n\nthe currently supported dictionaries are:\n\n* english       - 'en'\n* spanish       - 'es'\n* french        - 'fr'\n* portuguese    - 'pt'\n* german        - 'de'\n* russian       - 'ru'\n* arabic        - 'ar'\n* basque        - 'eu'\n* latvian       - 'lv'\n\ndictionary creation and updating\n-------------------------------------------------------------------------------\n\nthe creation of the dictionaries is, unfortunately, not an exact science. i have provided a script that, given a text file of sentences (in this case from\n`opensubtitles <http://opus.nlpl.eu/opensubtitles2018.php>`__) it will generate a word frequency list based on the words found within the text. the script then attempts to ***clean up*** the word frequency by, for example, removing words with invalid characters (usually from other languages), removing low count terms (misspellings?) and attempts to enforce rules as available (no more than one accent per word in spanish). then it removes words from a list of known words that are to be removed. it then adds words into the dictionary that are known to be missing or were removed for being too low frequency.\n\nthe script can be found here: ``scripts/build_dictionary.py```. the original word frequency list parsed from opensubtitles can be found in the ```scripts/data/``` folder along with each language's *include* and *exclude* text files.\n\nany help in updating and maintaining the dictionaries would be greatly desired. to do this, a\n`discussion <https://github.com/barrust/pyspellchecker/discussions>`__ could be started on github or pull requests to update the include and exclude files could be added.\n\n\nadditional methods\n-------------------------------------------------------------------------------\n\n`on-line documentation <http://pyspellchecker.readthedocs.io/en/latest/>`__ is available; below contains the cliff-notes version of some of the available functions:\n\n\n``correction(word)``: returns the most probable result for the\nmisspelled word\n\n``candidates(word)``: returns a set of possible candidates for the\nmisspelled word\n\n``known([words])``: returns those words that are in the word frequency\nlist\n\n``unknown([words])``: returns those words that are not in the frequency\nlist\n\n``word_probability(word)``: the frequency of the given word out of all\nwords in the frequency list\n\nthe following are less likely to be needed by the user but are available:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``edit_distance_1(word)``: returns a set of all strings at a levenshtein\ndistance of one based on the alphabet of the selected language\n\n``edit_distance_2(word)``: returns a set of all strings at a levenshtein\ndistance of two based on the alphabet of the selected language\n\n\ncredits\n-------------------------------------------------------------------------------\n\n* `peter norvig <https://norvig.com/spell-correct.html>`__ blog post on setting up a simple spell checking algorithm\n* p lison and j tiedemann, 2016, opensubtitles2016: extracting large parallel corpora from movie and tv subtitles. in proceedings of the 10th international conference on language resources and evaluation (lrec 2016)\n",
  "docs_url": null,
  "keywords": "python,spelling,natural language processing,nlp,typo,checker",
  "license": "mit",
  "name": "pyspellchecker",
  "package_url": "https://pypi.org/project/pyspellchecker/",
  "project_url": "https://pypi.org/project/pyspellchecker/",
  "project_urls": {
    "bug-tracker": "https://github.com/barrust/pyspellchecker/issues",
    "documentation": "https://pyspellchecker.readthedocs.io/",
    "homepage": "https://github.com/barrust/pyspellchecker"
  },
  "release_url": "https://pypi.org/project/pyspellchecker/0.7.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "pure python spell checker based on work by peter norvig",
  "version": "0.7.2",
  "releases": [],
  "developers": [
    "barrust@gmail.com"
  ],
  "kwds": "pyspellchecker python dictionary dictionaries load_words",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyspellchecker",
  "homepage": "",
  "release_count": 27,
  "dependency_ids": []
}
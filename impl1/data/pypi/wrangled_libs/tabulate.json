{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "python-tabulate\n===============\n\npretty-print tabular data in python, a library and a command-line\nutility.\n\nthe main use cases of the library are:\n\n-   printing small tables without hassle: just one function call,\n    formatting is guided by the data itself\n-   authoring tabular data for lightweight plain-text markup: multiple\n    output formats suitable for further editing or transformation\n-   readable presentation of mixed textual and numeric data: smart\n    column alignment, configurable number formatting, alignment by a\n    decimal point\n\ninstallation\n------------\n\nto install the python library and the command line utility, run:\n\n```shell\npip install tabulate\n```\n\nthe command line utility will be installed as `tabulate` to `bin` on\nlinux (e.g. `/usr/bin`); or as `tabulate.exe` to `scripts` in your\npython installation on windows (e.g. `c:\\python39\\scripts\\tabulate.exe`).\n\nyou may consider installing the library only for the current user:\n\n```shell\npip install tabulate --user\n```\n\nin this case the command line utility will be installed to\n`~/.local/bin/tabulate` on linux and to\n`%appdata%\\python\\scripts\\tabulate.exe` on windows.\n\nto install just the library on unix-like operating systems:\n\n```shell\ntabulate_install=lib-only pip install tabulate\n```\n\non windows:\n\n```shell\nset tabulate_install=lib-only\npip install tabulate\n```\n\nbuild status\n------------\n\n[![build status](https://circleci.com/gh/astanin/python-tabulate.svg?style=svg)](https://circleci.com/gh/astanin/python-tabulate/tree/master) [![build status](https://ci.appveyor.com/api/projects/status/8745yksvvol7h3d7/branch/master?svg=true)](https://ci.appveyor.com/project/astanin/python-tabulate/branch/master)\n\nlibrary usage\n-------------\n\nthe module provides just one function, `tabulate`, which takes a list of\nlists or another tabular data type as the first argument, and outputs a\nnicely formatted plain-text table:\n\n```pycon\n>>> from tabulate import tabulate\n\n>>> table = [[\"sun\",696000,1989100000],[\"earth\",6371,5973.6],\n...          [\"moon\",1737,73.5],[\"mars\",3390,641.85]]\n>>> print(tabulate(table))\n-----  ------  -------------\nsun    696000     1.9891e+09\nearth    6371  5973.6\nmoon     1737    73.5\nmars     3390   641.85\n-----  ------  -------------\n```\n\nthe following tabular data types are supported:\n\n-   list of lists or another iterable of iterables\n-   list or another iterable of dicts (keys as columns)\n-   dict of iterables (keys as columns)\n-   list of dataclasses (python 3.7+ only, field names as columns)\n-   two-dimensional numpy array\n-   numpy record arrays (names as columns)\n-   pandas.dataframe\n\ntabulate is a python3 library.\n\n### headers\n\nthe second optional argument named `headers` defines a list of column\nheaders to be used:\n\n```pycon\n>>> print(tabulate(table, headers=[\"planet\",\"r (km)\", \"mass (x 10^29 kg)\"]))\nplanet      r (km)    mass (x 10^29 kg)\n--------  --------  -------------------\nsun         696000           1.9891e+09\nearth         6371        5973.6\nmoon          1737          73.5\nmars          3390         641.85\n```\n\nif `headers=\"firstrow\"`, then the first row of data is used:\n\n```pycon\n>>> print(tabulate([[\"name\",\"age\"],[\"alice\",24],[\"bob\",19]],\n...                headers=\"firstrow\"))\nname      age\n------  -----\nalice      24\nbob        19\n```\n\nif `headers=\"keys\"`, then the keys of a dictionary/dataframe, or column\nindices are used. it also works for numpy record arrays and lists of\ndictionaries or named tuples:\n\n```pycon\n>>> print(tabulate({\"name\": [\"alice\", \"bob\"],\n...                 \"age\": [24, 19]}, headers=\"keys\"))\n  age  name\n-----  ------\n   24  alice\n   19  bob\n```\n\n### row indices\n\nby default, only pandas.dataframe tables have an additional column\ncalled row index. to add a similar column to any other type of table,\npass `showindex=\"always\"` or `showindex=true` argument to `tabulate()`.\nto suppress row indices for all types of data, pass `showindex=\"never\"`\nor `showindex=false`. to add a custom row index column, pass\n`showindex=rowids`, where `rowids` is some iterable:\n\n```pycon\n>>> print(tabulate([[\"f\",24],[\"m\",19]], showindex=\"always\"))\n-  -  --\n0  f  24\n1  m  19\n-  -  --\n```\n\n### table format\n\nthere is more than one way to format a table in plain text. the third\noptional argument named `tablefmt` defines how the table is formatted.\n\nsupported table formats are:\n\n-   \"plain\"\n-   \"simple\"\n-   \"github\"\n-   \"grid\"\n-   \"simple\\_grid\"\n-   \"rounded\\_grid\"\n-   \"heavy\\_grid\"\n-   \"mixed\\_grid\"\n-   \"double\\_grid\"\n-   \"fancy\\_grid\"\n-   \"outline\"\n-   \"simple\\_outline\"\n-   \"rounded\\_outline\"\n-   \"heavy\\_outline\"\n-   \"mixed\\_outline\"\n-   \"double\\_outline\"\n-   \"fancy\\_outline\"\n-   \"pipe\"\n-   \"orgtbl\"\n-   \"asciidoc\"\n-   \"jira\"\n-   \"presto\"\n-   \"pretty\"\n-   \"psql\"\n-   \"rst\"\n-   \"mediawiki\"\n-   \"moinmoin\"\n-   \"youtrack\"\n-   \"html\"\n-   \"unsafehtml\"\n-   \"latex\"\n-   \"latex\\_raw\"\n-   \"latex\\_booktabs\"\n-   \"latex\\_longtable\"\n-   \"textile\"\n-   \"tsv\"\n\n`plain` tables do not use any pseudo-graphics to draw lines:\n\n```pycon\n>>> table = [[\"spam\",42],[\"eggs\",451],[\"bacon\",0]]\n>>> headers = [\"item\", \"qty\"]\n>>> print(tabulate(table, headers, tablefmt=\"plain\"))\nitem      qty\nspam       42\neggs      451\nbacon       0\n```\n\n`simple` is the default format (the default may change in future\nversions). it corresponds to `simple_tables` in [pandoc markdown\nextensions](http://johnmacfarlane.net/pandoc/readme.html#tables):\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"simple\"))\nitem      qty\n------  -----\nspam       42\neggs      451\nbacon       0\n```\n\n`github` follows the conventions of github flavored markdown. it\ncorresponds to the `pipe` format without alignment colons:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"github\"))\n| item   | qty   |\n|--------|-------|\n| spam   | 42    |\n| eggs   | 451   |\n| bacon  | 0     |\n```\n\n`grid` is like tables formatted by emacs'\n[table.el](http://table.sourceforge.net/) package. it corresponds to\n`grid_tables` in pandoc markdown extensions:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"grid\"))\n+--------+-------+\n| item   |   qty |\n+========+=======+\n| spam   |    42 |\n+--------+-------+\n| eggs   |   451 |\n+--------+-------+\n| bacon  |     0 |\n+--------+-------+\n```\n\n`simple_grid` draws a grid using single-line box-drawing characters:\n\n    >>> print(tabulate(table, headers, tablefmt=\"simple_grid\"))\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 item   \u2502   qty \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 spam   \u2502    42 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 eggs   \u2502   451 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 bacon  \u2502     0 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n`rounded_grid` draws a grid using single-line box-drawing characters with rounded corners:\n\n    >>> print(tabulate(table, headers, tablefmt=\"rounded_grid\"))\n    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 item   \u2502   qty \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 spam   \u2502    42 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 eggs   \u2502   451 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 bacon  \u2502     0 \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n`heavy_grid` draws a grid using bold (thick) single-line box-drawing characters:\n\n    >>> print(tabulate(table, headers, tablefmt=\"heavy_grid\"))\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    \u2503 item   \u2503   qty \u2503\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n    \u2503 spam   \u2503    42 \u2503\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n    \u2503 eggs   \u2503   451 \u2503\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n    \u2503 bacon  \u2503     0 \u2503\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n\n`mixed_grid` draws a grid using a mix of light (thin) and heavy (thick) lines box-drawing characters:\n\n    >>> print(tabulate(table, headers, tablefmt=\"mixed_grid\"))\n    \u250d\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2511\n    \u2502 item   \u2502   qty \u2502\n    \u251d\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2525\n    \u2502 spam   \u2502    42 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 eggs   \u2502   451 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 bacon  \u2502     0 \u2502\n    \u2515\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2519\n\n`double_grid` draws a grid using double-line box-drawing characters:\n\n    >>> print(tabulate(table, headers, tablefmt=\"double_grid\"))\n    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n    \u2551 item   \u2551   qty \u2551\n    \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n    \u2551 spam   \u2551    42 \u2551\n    \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n    \u2551 eggs   \u2551   451 \u2551\n    \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n    \u2551 bacon  \u2551     0 \u2551\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\n`fancy_grid` draws a grid using a mix of single and\n    double-line box-drawing characters:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"fancy_grid\"))\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 item   \u2502   qty \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 spam   \u2502    42 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 eggs   \u2502   451 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 bacon  \u2502     0 \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n```\n\n`outline` is the same as the `grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"outline\"))\n    +--------+-------+\n    | item   |   qty |\n    +========+=======+\n    | spam   |    42 |\n    | eggs   |   451 |\n    | bacon  |     0 |\n    +--------+-------+\n\n`simple_outline` is the same as the `simple_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"simple_outline\"))\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 item   \u2502   qty \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 spam   \u2502    42 \u2502\n    \u2502 eggs   \u2502   451 \u2502\n    \u2502 bacon  \u2502     0 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n`rounded_outline` is the same as the `rounded_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"rounded_outline\"))\n    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 item   \u2502   qty \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 spam   \u2502    42 \u2502\n    \u2502 eggs   \u2502   451 \u2502\n    \u2502 bacon  \u2502     0 \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n`heavy_outline` is the same as the `heavy_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"heavy_outline\"))\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    \u2503 item   \u2503   qty \u2503\n    \u2523\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u254b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252b\n    \u2503 spam   \u2503    42 \u2503\n    \u2503 eggs   \u2503   451 \u2503\n    \u2503 bacon  \u2503     0 \u2503\n    \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n\n`mixed_outline` is the same as the `mixed_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"mixed_outline\"))\n    \u250d\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u252f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2511\n    \u2502 item   \u2502   qty \u2502\n    \u251d\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u253f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2525\n    \u2502 spam   \u2502    42 \u2502\n    \u2502 eggs   \u2502   451 \u2502\n    \u2502 bacon  \u2502     0 \u2502\n    \u2515\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2537\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2519\n\n`double_outline` is the same as the `double_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"double_outline\"))\n    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n    \u2551 item   \u2551   qty \u2551\n    \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n    \u2551 spam   \u2551    42 \u2551\n    \u2551 eggs   \u2551   451 \u2551\n    \u2551 bacon  \u2551     0 \u2551\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\n`fancy_outline` is the same as the `fancy_grid` format but doesn't draw lines between rows:\n\n    >>> print(tabulate(table, headers, tablefmt=\"fancy_outline\"))\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n    \u2502 item   \u2502   qty \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 spam   \u2502    42 \u2502\n    \u2502 eggs   \u2502   451 \u2502\n    \u2502 bacon  \u2502     0 \u2502\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n\n`presto` is like tables formatted by presto cli:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"presto\"))\n item   |   qty\n--------+-------\n spam   |    42\n eggs   |   451\n bacon  |     0\n```\n\n`pretty` attempts to be close to the format emitted by the prettytables\nlibrary:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"pretty\"))\n+-------+-----+\n| item  | qty |\n+-------+-----+\n| spam  | 42  |\n| eggs  | 451 |\n| bacon |  0  |\n+-------+-----+\n```\n\n`psql` is like tables formatted by postgres' psql cli:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"psql\"))\n+--------+-------+\n| item   |   qty |\n|--------+-------|\n| spam   |    42 |\n| eggs   |   451 |\n| bacon  |     0 |\n+--------+-------+\n```\n\n`pipe` follows the conventions of [php markdown\nextra](http://michelf.ca/projects/php-markdown/extra/#table) extension.\nit corresponds to `pipe_tables` in pandoc. this format uses colons to\nindicate column alignment:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"pipe\"))\n| item   |   qty |\n|:-------|------:|\n| spam   |    42 |\n| eggs   |   451 |\n| bacon  |     0 |\n```\n\n`asciidoc` formats data like a simple table of the\n[asciidoctor](https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/#tables)\nformat:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"asciidoc\"))\n[cols=\"8<,7>\",options=\"header\"]\n|====\n| item   |   qty\n| spam   |    42\n| eggs   |   451\n| bacon  |     0\n|====\n```\n\n`orgtbl` follows the conventions of emacs\n[org-mode](http://orgmode.org/manual/tables.html), and is editable also\nin the minor orgtbl-mode. hence its name:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"orgtbl\"))\n| item   |   qty |\n|--------+-------|\n| spam   |    42 |\n| eggs   |   451 |\n| bacon  |     0 |\n```\n\n`jira` follows the conventions of atlassian jira markup language:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"jira\"))\n|| item   ||   qty ||\n| spam   |    42 |\n| eggs   |   451 |\n| bacon  |     0 |\n```\n\n`rst` formats data like a simple table of the\n[restructuredtext](http://docutils.sourceforge.net/docs/user/rst/quickref.html#tables)\nformat:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"rst\"))\n======  =====\nitem      qty\n======  =====\nspam       42\neggs      451\nbacon       0\n======  =====\n```\n\n`mediawiki` format produces a table markup used in\n[wikipedia](http://www.mediawiki.org/wiki/help:tables) and on other\nmediawiki-based sites:\n\n ```pycon\n>>> print(tabulate(table, headers, tablefmt=\"mediawiki\"))\n{| class=\"wikitable\" style=\"text-align: left;\"\n|+ <!-- caption -->\n|-\n! item   !! align=\"right\"|   qty\n|-\n| spam   || align=\"right\"|    42\n|-\n| eggs   || align=\"right\"|   451\n|-\n| bacon  || align=\"right\"|     0\n|}\n```\n\n`moinmoin` format produces a table markup used in\n[moinmoin](https://moinmo.in/) wikis:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"moinmoin\"))\n|| ''' item   ''' || ''' quantity   ''' ||\n||  spam    ||  41.999      ||\n||  eggs    ||  451         ||\n||  bacon   ||              ||\n```\n\n`youtrack` format produces a table markup used in youtrack tickets:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"youtrack\"))\n||  item    ||  quantity   ||\n|   spam    |  41.999      |\n|   eggs    |  451         |\n|   bacon   |              |\n```\n\n`textile` format produces a table markup used in\n[textile](http://redcloth.org/hobix.com/textile/) format:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"textile\"))\n|_.  item   |_.   qty |\n|<. spam    |>.    42 |\n|<. eggs    |>.   451 |\n|<. bacon   |>.     0 |\n```\n\n`html` produces standard html markup as an html.escape'd str\nwith a ._repr_html_ method so that jupyter lab and notebook display the html\nand a .str property so that the raw html remains accessible.\n`unsafehtml` table format can be used if an unescaped html is required:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"html\"))\n<table>\n<tbody>\n<tr><th>item  </th><th style=\"text-align: right;\">  qty</th></tr>\n<tr><td>spam  </td><td style=\"text-align: right;\">   42</td></tr>\n<tr><td>eggs  </td><td style=\"text-align: right;\">  451</td></tr>\n<tr><td>bacon </td><td style=\"text-align: right;\">    0</td></tr>\n</tbody>\n</table>\n```\n\n`latex` format creates a `tabular` environment for latex markup,\nreplacing special characters like `_` or `\\` to their latex\ncorrespondents:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"latex\"))\n\\begin{tabular}{lr}\n\\hline\n item   &   qty \\\\\n\\hline\n spam   &    42 \\\\\n eggs   &   451 \\\\\n bacon  &     0 \\\\\n\\hline\n\\end{tabular}\n```\n\n`latex_raw` behaves like `latex` but does not escape latex commands and\nspecial characters.\n\n`latex_booktabs` creates a `tabular` environment for latex markup using\nspacing and style from the `booktabs` package.\n\n`latex_longtable` creates a table that can stretch along multiple pages,\nusing the `longtable` package.\n\n### column alignment\n\n`tabulate` is smart about column alignment. it detects columns which\ncontain only numbers, and aligns them by a decimal point (or flushes\nthem to the right if they appear to be integers). text columns are\nflushed to the left.\n\nyou can override the default alignment with `numalign` and `stralign`\nnamed arguments. possible column alignments are: `right`, `center`,\n`left`, `decimal` (only for numbers), and `none` (to disable alignment).\n\naligning by a decimal point works best when you need to compare numbers\nat a glance:\n\n```pycon\n>>> print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]]))\n----------\n    1.2345\n  123.45\n   12.345\n12345\n 1234.5\n----------\n```\n\ncompare this with a more common right alignment:\n\n```pycon\n>>> print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]], numalign=\"right\"))\n------\n1.2345\n123.45\n12.345\n 12345\n1234.5\n------\n```\n\nfor `tabulate`, anything which can be parsed as a number is a number.\neven numbers represented as strings are aligned properly. this feature\ncomes in handy when reading a mixed table of text and numbers from a\nfile:\n\n```pycon\n>>> import csv ; from stringio import stringio\n>>> table = list(csv.reader(stringio(\"spam, 42\\neggs, 451\\n\")))\n>>> table\n[['spam', ' 42'], ['eggs', ' 451']]\n>>> print(tabulate(table))\n----  ----\nspam    42\neggs   451\n----  ----\n```\n\nto disable this feature use `disable_numparse=true`.\n\n```pycon\n>>> print(tabulate.tabulate([[\"ver1\", \"18.0\"], [\"ver2\",\"19.2\"]], tablefmt=\"simple\", disable_numparse=true))\n----  ----\nver1  18.0\nver2  19.2\n----  ----\n```\n\n### custom column alignment\n\n`tabulate` allows a custom column alignment to override the above. the\n`colalign` argument can be a list or a tuple of `stralign` named\narguments. possible column alignments are: `right`, `center`, `left`,\n`decimal` (only for numbers), and `none` (to disable alignment).\nomitting an alignment uses the default. for example:\n\n```pycon\n>>> print(tabulate([[\"one\", \"two\"], [\"three\", \"four\"]], colalign=(\"right\",))\n-----  ----\n  one  two\nthree  four\n-----  ----\n```\n\n### number formatting\n\n`tabulate` allows to define custom number formatting applied to all\ncolumns of decimal numbers. use `floatfmt` named argument:\n\n```pycon\n>>> print(tabulate([[\"pi\",3.141593],[\"e\",2.718282]], floatfmt=\".4f\"))\n--  ------\npi  3.1416\ne   2.7183\n--  ------\n```\n\n`floatfmt` argument can be a list or a tuple of format strings, one per\ncolumn, in which case every column may have different number formatting:\n\n```pycon\n>>> print(tabulate([[0.12345, 0.12345, 0.12345]], floatfmt=(\".1f\", \".3f\")))\n---  -----  -------\n0.1  0.123  0.12345\n---  -----  -------\n```\n\n`intfmt` works similarly for integers\n\n    >>> print(tabulate([[\"a\",1000],[\"b\",90000]], intfmt=\",\"))\n    -  ------\n    a   1,000\n    b  90,000\n    -  ------\n\n### text formatting\n\nby default, `tabulate` removes leading and trailing whitespace from text\ncolumns. to disable whitespace removal, set the global module-level flag\n`preserve_whitespace`:\n\n```python\nimport tabulate\ntabulate.preserve_whitespace = true\n```\n\n### wide (fullwidth cjk) symbols\n\nto properly align tables which contain wide characters (typically\nfullwidth glyphs from chinese, japanese or korean languages), the user\nshould install `wcwidth` library. to install it together with\n`tabulate`:\n\n```shell\npip install tabulate[widechars]\n```\n\nwide character support is enabled automatically if `wcwidth` library is\nalready installed. to disable wide characters support without\nuninstalling `wcwidth`, set the global module-level flag\n`wide_chars_mode`:\n\n```python\nimport tabulate\ntabulate.wide_chars_mode = false\n```\n\n### multiline cells\n\nmost table formats support multiline cell text (text containing newline\ncharacters). the newline characters are honored as line break\ncharacters.\n\nmultiline cells are supported for data rows and for header rows.\n\nfurther automatic line breaks are not inserted. of course, some output\nformats such as latex or html handle automatic formatting of the cell\ncontent on their own, but for those that don't, the newline characters\nin the input cell text are the only means to break a line in cell text.\n\nnote that some output formats (e.g. simple, or plain) do not represent\nrow delimiters, so that the representation of multiline cells in such\nformats may be ambiguous to the reader.\n\nthe following examples of formatted output use the following table with\na multiline cell, and headers with a multiline cell:\n\n```pycon\n>>> table = [[\"eggs\",451],[\"more\\nspam\",42]]\n>>> headers = [\"item\\nname\", \"qty\"]\n```\n\n`plain` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"plain\"))\nitem      qty\nname\neggs      451\nmore       42\nspam\n```\n\n`simple` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"simple\"))\nitem      qty\nname\n------  -----\neggs      451\nmore       42\nspam\n```\n\n`grid` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"grid\"))\n+--------+-------+\n| item   |   qty |\n| name   |       |\n+========+=======+\n| eggs   |   451 |\n+--------+-------+\n| more   |    42 |\n| spam   |       |\n+--------+-------+\n```\n\n`fancy_grid` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"fancy_grid\"))\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 item   \u2502   qty \u2502\n\u2502 name   \u2502       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 eggs   \u2502   451 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 more   \u2502    42 \u2502\n\u2502 spam   \u2502       \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n```\n\n`pipe` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"pipe\"))\n| item   |   qty |\n| name   |       |\n|:-------|------:|\n| eggs   |   451 |\n| more   |    42 |\n| spam   |       |\n```\n\n`orgtbl` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"orgtbl\"))\n| item   |   qty |\n| name   |       |\n|--------+-------|\n| eggs   |   451 |\n| more   |    42 |\n| spam   |       |\n```\n\n`jira` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"jira\"))\n| item   |   qty |\n| name   |       |\n|:-------|------:|\n| eggs   |   451 |\n| more   |    42 |\n| spam   |       |\n```\n\n`presto` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"presto\"))\n item   |   qty\n name   |\n--------+-------\n eggs   |   451\n more   |    42\n spam   |\n```\n\n`pretty` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"pretty\"))\n+------+-----+\n| item | qty |\n| name |     |\n+------+-----+\n| eggs | 451 |\n| more | 42  |\n| spam |     |\n+------+-----+\n```\n\n`psql` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"psql\"))\n+--------+-------+\n| item   |   qty |\n| name   |       |\n|--------+-------|\n| eggs   |   451 |\n| more   |    42 |\n| spam   |       |\n+--------+-------+\n```\n\n`rst` tables:\n\n```pycon\n>>> print(tabulate(table, headers, tablefmt=\"rst\"))\n======  =====\nitem      qty\nname\n======  =====\neggs      451\nmore       42\nspam\n======  =====\n```\n\nmultiline cells are not well-supported for the other table formats.\n\n### automating multilines\nwhile tabulate supports data passed in with multilines entries explicitly provided,\nit also provides some support to help manage this work internally.\n\nthe `maxcolwidths` argument is a list where each entry specifies the max width for\nit's respective column. any cell that will exceed this will automatically wrap the content.\nto assign the same max width for all columns, a singular int scaler can be used.\n\nuse `none` for any columns where an explicit maximum does not need to be provided,\nand thus no automate multiline wrapping will take place.\n\nthe wrapping uses the python standard [textwrap.wrap](https://docs.python.org/3/library/textwrap.html#textwrap.wrap)\nfunction with default parameters - aside from width.\n\nthis example demonstrates usage of automatic multiline wrapping, though typically\nthe lines being wrapped would probably be significantly longer than this.\n\n```pycon\n>>> print(tabulate([[\"john smith\", \"middle manager\"]], headers=[\"name\", \"title\"], tablefmt=\"grid\", maxcolwidths=[none, 8]))\n+------------+---------+\n| name       | title   |\n+============+=========+\n| john smith | middle  |\n|            | manager |\n+------------+---------+\n```\n\n### adding separating lines\none might want to add one or more separating lines to highlight different sections in a table.\n\nthe separating lines will be of the same type as the one defined by the specified formatter as either the\nlinebetweenrows, linebelowheader, linebelow, lineabove or just a simple empty line when none is defined for the formatter\n\n\n    >>> from tabulate import tabulate, separating_line\n\n    table = [[\"earth\",6371],\n             [\"mars\",3390],\n             separating_line,\n             [\"moon\",1737]]\n    print(tabulate(table, tablefmt=\"simple\"))\n    -----  ----\n    earth  6371\n    mars   3390\n    -----  ----\n    moon   1737\n    -----  ----\n\n### ansi support\nansi escape codes are non-printable byte sequences usually used for terminal operations like setting\ncolor output or modifying cursor positions. because multi-byte ansi sequences are inherently non-printable,\nthey can still introduce unwanted extra length to strings. for example:\n\n    >>> len('\\033[31mthis text is red\\033[0m')  # printable length is 16\n    25\n\nto deal with this, string lengths are calculated after first removing all ansi escape sequences. this ensures\nthat the actual printable length is used for column widths, rather than the byte length. in the final, printable\ntable, however, ansi escape sequences are not removed so the original styling is preserved.\n\nsome terminals support a special grouping of ansi escape sequences that are intended to display hyperlinks\nmuch in the same way they are shown in browsers. these are handled just as mentioned before: non-printable\nansi escape sequences are removed prior to string length calculation. the only diifference with escaped\nhyperlinks is that column width will be based on the length of the url _text_ rather than the url\nitself (terminals would show this text). for example:\n\n    >>> len('\\x1b]8;;https://example.com\\x1b\\\\example\\x1b]8;;\\x1b\\\\')  # display length is 7, showing 'example'\n    45\n\n\nusage of the command line utility\n---------------------------------\n\n    usage: tabulate [options] [file ...]\n\n    file                      a filename of the file with tabular data;\n                              if \"-\" or missing, read data from stdin.\n\n    options:\n\n    -h, --help                show this message\n    -1, --header              use the first row of data as a table header\n    -o file, --output file    print table to file (default: stdout)\n    -s regexp, --sep regexp   use a custom column separator (default: whitespace)\n    -f fpfmt, --float fpfmt   floating point number format (default: g)\n    -i intfmt, --int intfmt   integer point number format (default: \"\")\n    -f fmt, --format fmt      set output table format; supported formats:\n                              plain, simple, github, grid, fancy_grid, pipe,\n                              orgtbl, rst, mediawiki, html, latex, latex_raw,\n                              latex_booktabs, latex_longtable, tsv\n                              (default: simple)\n\nperformance considerations\n--------------------------\n\nsuch features as decimal point alignment and trying to parse everything\nas a number imply that `tabulate`:\n\n-   has to \"guess\" how to print a particular tabular data type\n-   needs to keep the entire table in-memory\n-   has to \"transpose\" the table twice\n-   does much more work than it may appear\n\nit may not be suitable for serializing really big tables (but who's\ngoing to do that, anyway?) or printing tables in performance sensitive\napplications. `tabulate` is about two orders of magnitude slower than\nsimply joining lists of values with a tab, comma, or other separator.\n\nat the same time, `tabulate` is comparable to other table\npretty-printers. given a 10x10 table (a list of lists) of mixed text and\nnumeric data, `tabulate` appears to be slower than `asciitable`, and\nfaster than `prettytable` and `texttable` the following mini-benchmark\nwas run in python 3.9.13 on windows 10:\n\n    =================================  ==========  ===========\n    table formatter                      time, \u03bcs    rel. time\n    =================================  ==========  ===========\n    csv to stringio                          12.5          1.0\n    join with tabs and newlines              14.6          1.2\n    asciitable (0.8.0)                      192.0         15.4\n    tabulate (0.9.0)                        483.5         38.7\n    tabulate (0.9.0, wide_chars_mode)       637.6         51.1\n    prettytable (3.4.1)                    1080.6         86.6\n    texttable (1.6.4)                      1390.3        111.4\n    =================================  ==========  ===========\n\n\nversion history\n---------------\n\nthe full version history can be found at the [changelog](https://github.com/astanin/python-tabulate/blob/master/changelog).\n\nhow to contribute\n-----------------\n\ncontributions should include tests and an explanation for the changes\nthey propose. documentation (examples, docstrings, readme.md) should be\nupdated accordingly.\n\nthis project uses [pytest](https://docs.pytest.org/) testing\nframework and [tox](https://tox.readthedocs.io/) to automate testing in\ndifferent environments. add tests to one of the files in the `test/`\nfolder.\n\nto run tests on all supported python versions, make sure all python\ninterpreters, `pytest` and `tox` are installed, then run `tox` in the root\nof the project source tree.\n\non linux `tox` expects to find executables like `python3.7`, `python3.8` etc.\non windows it looks for `c:\\python37\\python.exe`, `c:\\python38\\python.exe` etc. respectively.\n\none way to install all the required versions of the python interpreter is to use [pyenv](https://github.com/pyenv/pyenv).\nall versions can then be easily installed with something like:\n\n     pyenv install 3.7.12\n     pyenv install 3.8.12\n     ...\n\ndon't forget to change your `path` so that `tox` knows how to find all the installed versions. something like\n\n     export path=\"${path}:${home}/.pyenv/shims\"\n\nto test only some python environments, use `-e` option. for example, to\ntest only against python 3.7 and python 3.10, run:\n\n```shell\ntox -e py37,py310\n```\n\nin the root of the project source tree.\n\nto enable numpy and pandas tests, run:\n\n```shell\ntox -e py37-extra,py310-extra\n```\n\n(this may take a long time the first time, because numpy and pandas will\nhave to be installed in the new virtual environments)\n\nto fix code formatting:\n\n```shell\ntox -e lint\n```\n\nsee `tox.ini` file to learn how to use to test\nindividual python versions.\n\ncontributors\n------------\n\nsergey astanin, pau tallada cresp\u00ed, erwin marsi, mik kocikowski, bill\nryder, zach dwiel, frederik rietdijk, philipp bogensberger, greg\n(anonymous), stefan tatschner, emiel van miltenburg, brandon bennett,\namjith ramanujam, jan schulz, simon percivall, javier santacruz\nl\u00f3pez-cepero, sam denton, alexey ziyangirov, acaird, cesar sanchez,\nnaught101, john vandenberg, zack dever, christian clauss, benjamin\nmaier, andy mackinlay, thomas roten, jue wang, joe king, samuel phan,\nnick satterly, daniel robbins, dmitry b, lars butler, andreas maier,\ndick marinus, s\u00e9bastien celles, yago gonz\u00e1lez, andrew gaul, wim glenn,\njean michel rouly, tim gates, john vandenberg, sorin sbarnea,\nwes turner, andrew tija, marco gorelli, sean mcginnis, danja100,\nendolith, dominic davis-foster, pavlocat, daniel aslau, paulc,\nfelix yan, shane loretz, frank busse, harsh singh, derek weitzel,\nvladimir vrzi\u0107, \uc11c\uc2b9\uc6b0 (chrd5273), georgy frolov, christian cwienk,\nbart broere, vilhelm prytz, alexander ga\u017eo, hugo van kemenade,\njamescooke, matt warner, j\u00e9r\u00f4me provensal, kevin deldycke,\nkian-meng ang, kevin patterson, shodhan save, cleoold, kolanich,\nvijaya krishna kasula, furcy pin, christian fibich, shaun duncan,\ndimitri papadopoulos.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "tabulate",
  "package_url": "https://pypi.org/project/tabulate/",
  "project_url": "https://pypi.org/project/tabulate/",
  "project_urls": {
    "Homepage": "https://github.com/astanin/python-tabulate"
  },
  "release_url": "https://pypi.org/project/tabulate/0.9.0/",
  "requires_dist": [
    "wcwidth ; extra == 'widechars'"
  ],
  "requires_python": ">=3.7",
  "summary": "pretty-print tabular data",
  "version": "0.9.0",
  "releases": [],
  "developers": [
    "s.astanin@gmail.com"
  ],
  "kwds": "tabulate_install tabulate latex_booktabs simple_tables grid_tables",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tabulate",
  "homepage": "",
  "release_count": 27,
  "dependency_ids": [
    "pypi_wcwidth"
  ]
}
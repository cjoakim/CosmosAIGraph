{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation"
  ],
  "description": "# mike\n**mike** is a python utility that makes it easy to deploy multiple versions of\nyour [mkdocs](http://www.mkdocs.org)-powered docs to a git branch, suitable for\nhosting on github via `gh-pages`. to see an example of this in action, take a\nlook at the documentation for [bfg9000][bfg9000].\n\n## why use mike?\n\nmike is built around the idea that once you've generated your docs for a\nparticular version, you should never need to touch that version again. this\nmeans you never have to worry about breaking changes in mkdocs, since your old\ndocs (built with an old version of mkdocs) are already generated and sitting in\nyour `gh-pages` branch.\n\nwhile mike is flexible, it's optimized around putting your docs in a\n`<major>.<minor>` directory, with optional aliases (e.g. `latest` or `dev`) to\nparticularly notable versions. this makes it easy to make permalinks to whatever\nversion of the documentation you want to direct people to.\n\n## how it works\n\nmike works by creating a new git commit on your `gh-pages` branch every time you\ndeploy a new version of your docs using `mike deploy` (or other mike subcommands\nthat change your `gh-pages` branch). when deploying a particular version,\npreviously-deployed docs for that version are erased and overwritten, but docs\nfor other versions remain untouched.\n\n## installation\n\nlike most python projects, mike uses [setuptools][setuptools], so installation\nis what you might expect:\n\n```sh\npip install mike\n```\n\nonce you've installed mike, you might also want to set up shell-completion for\nit. if you have [shtab][shtab] installed, you can do this with\n`mike generate-completion`, which will print the shell-completion code for your\nshell. for more details on how to set this up, consult shtab's\n[documentation][shtab-setup].\n\n## usage\n\n### before using mike\n\nbefore using mike for the first time, you may want to use [`mike delete\n--all`](#deleting-docs) to delete any old documentation on your `gh-pages`\nbranch before building your new versioned docs. (if you prefer, you can also\nmanually move your old documentation to a subdirectory of your `gh-pages` branch\nso that it's still accessible.)\n\n### configuration\n\nto help integrate into the mkdocs build process, mike uses an mkdocs plugin.\nthis plugin is added by default when building your documentation with mike, but\nby adding it explicitly to your `mkdocs.yml` file, you can configure how the\nplugin works. the plugin adds a version selector to supported themes as well as\nupdating the `site_url` (if you set it) to point to the version of the docs that\nare being built:\n\n```yaml\nplugins:\n  - mike:\n      # these fields are all optional; the defaults are as below...\n      alias_type: symlink\n      redirect_template: null\n      deploy_prefix: ''\n      canonical_version: null\n      version_selector: true\n      css_dir: css\n      javascript_dir: js\n```\n\n* `alias_type`: the method to create aliases; one of:\n  * `symlink`: create a symbolic link from the alias to the base directory of\n    the documentation\n  * `redirect`: create an html redirect for each page of the documentation\n  * `copy`: copy all the files of the documentation to the alias's path\n* `redirect_template`: the template file to use when creating html redirects; if\n  `null`, use the default template\n* `deploy_prefix`: the root directory to put the generated docs in; this can be\n  useful if you'd like to have other pages at the root of your site, or to host\n  multiple, independently-versioned sets of docs side by side\n* `canonical_version`: the \"canonical\" version to use for the documentation,\n  useful for telling search engines what pages to prefer (e.g. `latest` if\n  you've defined that as an alias that always points to the latest release); if\n  `null`, mike will use the version specified via `mike deploy`\n* `version_selector`: true if the version selector should be shown on pages;\n  false otherwise\n* `css_dir`: the directory to place the version selector's css\n* `javascript_dir`: the directory to place the version selector's javascript\n\n### building your docs\n\nmike is designed to produce one version of your docs at a time. that way, you\ncan easily deploy a new version without touching any older versions of your\ndocs; this can be especially important if your old docs are no longer buildable\nwith the newest version of mkdocs (or if they weren't built with mkdocs at\nall!). to deploy the current version of your docs, simply run:\n\n```sh\nmike deploy [version]\n```\n\nwhere `[version]` is the current version of your project, represented however\nyou like (i recommend using `[major].[minor]` and excluding the patch\nnumber). you can also pass aliases to the `deploy` command to host a\nparticularly-relevant version of your docs somewhere special (e.g. `latest`):\n\n```sh\nmike deploy [version] [alias]...\n```\n\nif `[version]` already exists, this command will *also* update all of the\npre-existing aliases for it. normally, if an alias specified on the command line\nis already associated with another version, this will return an error. if you\n*do* want to move an alias from another version to this version (including\nwhen the new version itself was previously an alias), you can pass\n`-u`/`--update-aliases` to allow this. for example, this can be useful when\nreleasing a new version and updating the `latest` alias to point to this new\nversion.\n\nby default, each alias creates a symbolic link to the base directory of the real\nversion of the docs; to create a copy of the docs for each alias, you can pass\n`--alias-type=copy`, or to use a simple html redirect for each page, you can\npass `--alias-type=redirect`. if you're using redirects, you can customize the\nredirect template with `-t`/`--template`; this takes a path to a [jinja][jinja]\ntemplate that accepts an `{{href}}` variable.\n\nif you'd like to specify a title for this version that doesn't match the version\nstring, you can pass `-t title`/`--title=title` as well. you can set custom\nproperties for this version as well, using `--prop-set`, `--prop-set-string`,\n`--prop-set-all`, `--prop-delete`, and `--prop-delete-all` (see the [managing\nproperties](#managing-properties) section for more details).\n\nin addition, you can specify where to deploy your docs via `-b`/`--branch`,\n`-r`/`--remote`, and `--deploy-prefix`, specifying the branch, remote, and\ndirectory prefix within the branch, respectively. finally, to push your docs to\na remote branch, simply add `-p`/`--push` to your command.\n\nyou can also specify many of these options via your `mkdocs.yml` configuration\nas shown above. for example, `--alias-type` can also be specified via\n`plugins.mike.alias_type`. (for `--branch` and `--remote`, you can use the\nbuilt-in mkdocs fields `remote_branch` and `remote_name`.)\n\n### viewing your docs\n\nto test that your docs have been built as expected, you can serve them locally\nfrom a dev server:\n\n```sh\nmike serve\n```\n\nby default, this serves the docs on `http://localhost:8000`, but you can\nchange this with `-a`/`--dev-addr`. remember though, *this is for testing only*.\nto host your docs for real, you should use a real web server.\n\n### deleting docs\n\nsometimes you need to delete an old version of your docs, either because you\nmade a mistake or you're pruning unsupported versions. you can do this via the\n`delete` subcommand:\n\n```sh\nmike delete [identifier]...\n```\n\nif `identifier` is a version, this will delete the version and all its aliases\nfrom the branch; if it's an alias, it will only delete that alias.\n\nif you'd like to *completely* wipe the contents of your docs branch, just run\n`mike delete --all`. like `deploy` above, you can specify `--branch`, `--push`,\netc to control how the commit is handled.\n\n### listing docs\n\nif you ever need to see the list of all currently-deployed doc versions, you can\nrun:\n\n```sh\nmike list\n```\n\nto list the info for a particular version, you can just pass the version name or\nan alias to that version:\n\n```sh\nmike list [identifier]\n```\n\nsometimes, you need this information to be consumed by another tool. in that\ncase, pass `-j`/`--json` to return the list of doc versions as json.\n\n### setting the default version\n\nwith all the versions of docs you have, you may want to set a *default* version\nso that people going to the root of your site are redirected to the latest\nversion of the docs:\n\n```sh\nmike set-default [identifier]\n```\n\nif you want to use a different template from the default, you can pass\n`-t`/`--template`; this takes a path to a [jinja][jinja] template that accepts\nan `{{href}}` variable. (note that this page *always* uses a redirect, no matter\nthe setting of `alias_type`/`--alias-type`.)\n\nlike `deploy` and `delete` above, you can specify `--branch`, `--push`,\netc to control how the commit is handled.\n\n### changing a version's title\n\nas you update your docs, you may want to change the title of a particular\nversion. for example, your `1.0` docs might have the title `1.0.0`, and when you\nrelease a new patch, you want to update the title to `1.0.1`. you can do this\nwith the `retitle` command:\n\n```sh\nmike retitle [identifier] [title]\n```\n\nas with other commands that change your docs, you can specify `--branch`,\n`--push`, etc to control how the commit is handled.\n\n### adding a new version alias\n\nsometimes, you might need to add a new alias for a version without rebuilding\nyour documentation. you can use the `alias` command for this:\n\n```sh\nmike alias [identifier] [alias]...\n```\n\nas with `deploy`, you can pass `-u`/`--update-aliases` to change where an\nexisting alias points to.\n\nonce again, you can specify `--branch`, `--push`, etc to control how the commit\nis handled.\n\n### managing properties\n\neach version of your documentation can have any arbitrary properties assigned to\nit that you like. you can use these properties to hold extra metadata, and then\nyour documentation theme can consult those properties to do whatever you like.\nwhen using the built-in mkdocs themes, mike supports one property: `hidden`.\nwhen this is `true`, that version will be hidden from the version selector\n(unless it's the current version).\n\nyou can get properties via `props` command:\n\n```sh\nmike props [identifier] [prop]\n```\n\nif `prop` is specified, this will return the value of that property; otherwise,\nit will return all of that version's properties as a json object.\n\nyou can also set properties by specifying one or more of `--set prop=json`,\n`--set-string prop=str`, `--set-all json`, `--delete prop`, and `--delete-all`.\n(if you prefer, you can also set properties at the same time as deploying via\nthe `--prop-*` options.)\n\nwhen getting or setting a particular property, you can specify it with a\nlimited jsonpath-like syntax. you can use bare field names, quoted field\nnames, and indices/field names inside square brackets. the only operator\nsupported is `.`. for example, this is a valid expression:\n\n```javascript\nfoo.\"bar\"[0][\"baz\"]\n```\n\nwhen setting values, you can add to the head or tail of a list via the `head`\nor `tail` keywords, e.g.:\n\n```javascript\nfoo[head]\n```\n\nas usual, you can specify `--branch`, `--push`, etc to control how the commit is\nhandled.\n\n### more details\n\nfor more details on the available options, consult the `--help` command for\nmike.\n\n## version ordering\n\nthere are lots of versioning schemes out there, but mike tries its best to order\nyour versions in a reasonable manner. version identifiers that \"look like\"\nversions (e.g. `1.2.3`, `1.0b1`, `v1.0`) are treated as ordinary versions,\nwhereas other identifiers, like `devel`, are treated as development versions,\nand placed *above* ordinary versions.\n\nthe above scheme should get things right most of the time, but you can always\npost-process your `versions.json` file to manipulate the ordering to suit your\nneeds.\n\n## staying in sync\n\nmike will do its best to stay in-sync with your remote repository and will\nautomatically update your local branch to match the remote's if possible (note\nthat mike *won't* automatically `git fetch` anything). if your local branch has\ndiverged from your remote, mike will leave it as-is and ask you what to do. to\nignore the remote's state, just pass `--ignore`; to update to the remote's\nstate, pass `--rebase`.\n\n## `cname` (and other special files)\n\nsome special files that you'd like to deploy along with your documentation (such\nas `cname`) aren't related to a particular version of the docs, and instead need\nto go in the root directory of your site. there's no special handling for this\nin mike, but since your built docs live on a git branch, it's still easy to\nmanage: check out your `gh-pages` branch (or wherever your built docs\nlive), and commit the necessary files to the root directory.\n\n## deploying via ci\n\nsince mike just generates commits to an ordinary git branch, it should work\nsmoothly with your favorite ci system. however, you should keep in mind that\nsome ci systems make shallow clones of your repository, meaning that the ci job\nwon't have a local instance of your documentation branch to commit to. this will\nnaturally cause issues when trying to push the commit. this is easy to resolve\nthough; just manually fetch your `gh-pages` branch (or whichever you deploy to)\nbefore running mike:\n\n```sh\ngit fetch origin gh-pages --depth=1\n```\n\nyou may also need to [configure a git user][gh-action-commit] so that mike can\nmake commits:\n\n```sh\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\n```\n\nalternately, you can set the environment variables `git_committer_name` and\n`git_committer_email` (as well as `git_committer_date` if you like):\n\n```sh\ngit_committer_name=ci-bot git_committer_email=ci-bot@example.com \\\nmike deploy 1.0\n```\n\n## for theme authors\n\nif you'd like to provide support for mike in your theme, you just need to\nfetch `versions.json` and build a version selector. `versions.json` looks like\nthis:\n\n```javascript\n[\n  {\"version\": \"1.0\", \"title\": \"1.0.1\", \"aliases\": [\"latest\"]},\n  {\"version\": \"0.9\", \"title\": \"0.9\", \"aliases\": [], \"properties\": \"anything\"}\n]\n```\n\nevery version has a `version` string, a `title` (which may be the same as\n`version`), a list of `aliases`, and optionally, a `properties` attribute that\ncan hold anything at all. these `properties` can be used by other packages,\nthemes, etc in order to add their own custom metadata to each version.\n\nif you're creating a third-party extension to an existing theme, you add a\nsetuptools entry point for `mike.themes` pointing to a python submodule that\ncontains `css/` and `js/` subdirectories containing the extra code to be\ninstalled into the user's documentation. this will then automatically be\nincluded via the `mike` plugin in the user's `mkdocs.yml` file.\n\nto see some examples of how to work with this, check the\n[`mike/themes/mkdocs`](mike/themes/mkdocs) directory.\n\n## license\n\nthis project is licensed under the [bsd 3-clause license](license).\n\n[pypi-image]: https://img.shields.io/pypi/v/mike.svg\n[pypi-link]: https://pypi.python.org/pypi/mike\n[ci-image]: https://github.com/jimporter/mike/workflows/build/badge.svg\n[ci-link]: https://github.com/jimporter/mike/actions?query=branch%3amaster+workflow%3abuild\n[codecov-image]: https://codecov.io/gh/jimporter/mike/branch/master/graph/badge.svg\n[codecov-link]: https://codecov.io/gh/jimporter/mike\n\n[bfg9000]: https://jimporter.github.io/bfg9000\n[setuptools]: https://pythonhosted.org/setuptools/\n[shtab]: https://github.com/iterative/shtab\n[shtab-setup]: https://github.com/iterative/shtab#cli-usage\n[jinja]: https://jinja.palletsprojects.com/\n[gh-action-commit]: https://github.com/actions/checkout#push-a-commit-using-the-built-in-token\n\n\n",
  "docs_url": null,
  "keywords": "mkdocs multiple versions",
  "license": "bsd-3-clause",
  "name": "mike",
  "package_url": "https://pypi.org/project/mike/",
  "project_url": "https://pypi.org/project/mike/",
  "project_urls": {
    "Homepage": "https://github.com/jimporter/mike"
  },
  "release_url": "https://pypi.org/project/mike/2.0.0/",
  "requires_dist": [
    "importlib-metadata",
    "importlib-resources",
    "jinja2 (>=2.7)",
    "mkdocs (>=1.0)",
    "pyparsing (>=3.0)",
    "pyyaml (>=5.1)",
    "verspec",
    "coverage ; extra == 'dev'",
    "flake8-quotes ; extra == 'dev'",
    "flake8 (>=3.0) ; extra == 'dev'",
    "shtab ; extra == 'dev'",
    "coverage ; extra == 'test'",
    "flake8-quotes ; extra == 'test'",
    "flake8 (>=3.0) ; extra == 'test'",
    "shtab ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "manage multiple versions of your mkdocs-powered documentation",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "itsjimporter@gmail.com",
    "jim_porter"
  ],
  "kwds": "mkdocs canonical_version versioning version_selector versions",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_mike",
  "homepage": "https://github.com/jimporter/mike",
  "release_count": 24,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_flake8",
    "pypi_flake8_quotes",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_jinja2",
    "pypi_mkdocs",
    "pypi_pyparsing",
    "pypi_pyyaml",
    "pypi_shtab",
    "pypi_verspec"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing"
  ],
  "description": "# ipytest - pytest in jupyter notebooks\n\n[pypi](https://pypi.org/project/ipytest)\n| [usage](#usage)\n| [global state](#global-state)\n| [how does it work?](#how-does-it-work)\n| [changes](changes.md)\n| [reference](#reference)\n| [development](#development)\n| [related packages](#related-packages)\n| [license](#license)\n\n`ipytest` allows you to run [pytest](https://pytest.org) in jupyter notebooks.\n`ipytest` aims to give access to the full `pytest` experience and to make it\neasy to transfer tests out of notebooks into separate test files.\n\n## usage\n\ninstall `ipytest` by running\n\n```bash\npip install ipytest\n```\n\nthe suggested way to import `ipytest` is\n\n```python\nimport ipytest\nipytest.autoconfig()\n```\n\nafterwards in a *new* cell, tests can be executed as in\n\n```python\n%%ipytest -qq\n\ndef test_example():\n    assert [1, 2, 3] == [1, 2, 3]\n```\n\nthis command will first delete any previously defined tests, execute the cell\nand then run pytest. for further details on how to use `ipytest` see the\n[**example notebook**](./example.ipynb) or the [reference](#reference) below.\n\n## global state\n\nthere are multiple sources of global state when using pytest inside the notebook:\n\n1. pytest will find any test function ever defined. this behavior can lead to\n   unexpected results when test functions are renamed, as their previous\n   definition is still available inside the kernel. running\n   [`%%ipytest`][ipytest.ipytest] per default deletes any previously defined\n   tests. as an alternative the [`ipytest.clean()`][ipytest.clean]\n   function allows to delete previously defined tests.\n2. python's module system caches imports and therefore acts as a global state.\n   to test the most recent version of any module, the module needs to be\n   reloaded. `ipytest` offers the\n   [`ipytest.force_reload()`][ipytest.force_reload] function. the `autoreload`\n   extension of ipython may also help here. to test local packages, it is\n   advisable to install them as development packages, e.g., `pip install -e .`.\n3. for async code, ipython will create an event loop in the current thread. this\n   setup may interfere with async tests. to support these use cases, ipytest\n   supports running tests in a separate thread. simply setup ipytest via\n   `ipytest.autoconfig(run_in_thread=true)`.\n\n## how does it work?\n\nin its default configuration (via `autoconfig()`), `ipytest` performs the\nfollowing steps:\n\n1. register pytest's assertion rewriter with the ipython kernel. the rewriter\n   will rewrite any assert statements entered into the notebook to give better\n   error messages. this change will affect also non test based code, but should\n   generally improve the development experience.\n2. ensure the notebook can be mapped to a file. `ipytest` will create a\n   temporary file in the current directory and remove if afterwards.\n3. register the notebook scope temporarily as a module. this step is necessary\n   to allow pytest's doctest plugin to import the notebook.\n4. call pytest with the name of the temporary module\n\n**note:** some notebook implementations modify the core ipython package and\nmagics may not work correctly (see [here][issue-47] or [here][issue-50]). in\nthis case, using [`ipytest.run()`][ipytest.run] and\n[`ipytest.clean()`][ipytest.clean] directly should still work as expected.\n\n[issue-47]: https://github.com/chmp/ipytest/issues/47\n[issue-50]: https://github.com/chmp/ipytest/issues/50\n\n## reference\n\n[`autoconfig`][ipytest.autoconfig]\n| [`%%ipytest`][ipytest.ipytest]\n| [`config`][ipytest.config]\n| [`exit_code`][ipytest.exit_code]\n| [`run`][ipytest.run]\n| [`clean`][ipytest.clean]\n| [`force_reload`][ipytest.force_reload]\n| [`error`][ipytest.error]\n\n<!-- minidoc \"function\": \"ipytest.autoconfig\", \"header_depth\": 3 -->\n### `ipytest.autoconfig(rewrite_asserts=<default>, magics=<default>, clean=<default>, addopts=<default>, run_in_thread=<default>, defopts=<default>, display_columns=<default>, raise_on_error=<default>)`\n\n[ipytest.autoconfig]: #ipytestautoconfigrewrite_assertsdefault-magicsdefault-cleandefault-addoptsdefault-run_in_threaddefault-defoptsdefault-display_columnsdefault-raise_on_errordefault\n\nconfigure `ipytest` with reasonable defaults.\n\nspecifically, it sets:\n\n* `rewrite_asserts`: `true`\n* `magics`: `true`\n* `clean`: `'[tt]est*'`\n* `addopts`: `('-q', '--color=yes')`\n* `run_in_thread`: `false`\n* `defopts`: `'auto'`\n* `display_columns`: `100`\n* `raise_on_error`: `false`\n\nsee [`ipytest.config`][ipytest.config] for details.\n\n<!-- minidoc -->\n\n### `%%ipytest ...`\n\n[ipytest.ipytest]: #ipytest-\n\n<!-- minidoc \"function\": \"ipytest._impl.pytest_magic\", \"header\": false, \"header_depth\": 3 -->\nipython magic to first execute the cell, then execute [`ipytest.run()`][ipytest.run].\n\n**note:** the magics are only available after running\n[`ipytest.autoconfig()`][ipytest.autoconfig] or\n[`ipytest.config(magics=true)`][ipytest.config].\n\nit cleans any previously found tests, i.e., only tests defined in the\ncurrent cell are executed. to disable this behavior, use\n[`ipytest.config(clean=false)`][ipytest.config].\n\nany arguments passed on the magic line are interpreted as command line\narguments to to pytest. for example calling the magic as\n\n```python\n%%ipytest -qq\n```\n\nis equivalent to passing `-qq` to pytest. the arguments are formatted using\npython's standard string formatting. currently, only the `{module}` variable\nis understood. it is replaced with the filename associated with the\nnotebook. in addition node ids for tests can be generated by using the test\nname as a key, e.g., `{test_example}` will expand to\n`{module}::test_example`.\n\nthe keyword arguments passed to [`ipytest.run()`][ipytest.run] can be\ncustomized by including a comment of the form `# ipytest: arg1=value1,\narg=value2` in the cell source. for example:\n\n```python\n%%ipytest {module}::test1\n# ipytest: defopts=false\n```\n\nis equivalent to `ipytest.run(\"{module}::test1\", defopts=false)`. in this\ncase, it deactivates default arguments and then instructs pytest to only\nexecute `test1`.\n\n**note:** in the default configuration `%%ipytest` will not raise\nexceptions, when tests fail. to raise exceptions on test errors, e.g.,\ninside a ci/cd context, use `ipytest.autoconfig(raise_on_error=true)`.\n\n<!-- minidoc -->\n\n<!-- minidoc \"function\": \"ipytest.config\", \"header_depth\": 3 -->\n### `ipytest.config(rewrite_asserts=<keep>, magics=<keep>, clean=<keep>, addopts=<keep>, run_in_thread=<keep>, defopts=<keep>, display_columns=<keep>, raise_on_error=<keep>)`\n\n[ipytest.config]: #ipytestconfigrewrite_assertskeep-magicskeep-cleankeep-addoptskeep-run_in_threadkeep-defoptskeep-display_columnskeep-raise_on_errorkeep\n\nconfigure `ipytest`\n\nto update the configuration, call this function as in:\n\n```python\nipytest.config(rewrite_asserts=true)\n```\n\nthe following settings are supported:\n\n* `rewrite_asserts` (default: `false`): enable ipython ast transforms\n  globally to rewrite asserts\n* `magics` (default: `false`): if set to `true` register the ipytest magics\n* `clean` (default: `[tt]est*`): the pattern used to clean variables\n* `addopts` (default: `()`): pytest command line arguments to prepend to\n  every pytest invocation. for example setting\n  `ipytest.config(addopts=['-qq'])` will execute pytest with the least\n  verbosity. consider adding `--color=yes` to force color output\n* `run_in_thread` (default: `false`): if `true`, pytest will be run a\n  separate thread. this way of running is required when testing async code\n  with `pytest_asyncio` since it starts a separate event loop\n* `defopts` (default: `\"auto\"`): either `\"auto\"`, `true` or `false`\n  * if `\"auto\"`, `ipytest` will add the current notebook module to the\n    command line arguments, if no pytest node ids that reference the\n    notebook are provided by the user\n  * if `true`, ipytest will add the current module to the arguments passed\n    to pytest\n  * if `false` only the arguments given and `adopts` are passed to pytest\n* `display_columns` (default: `100`): if not `false`, configure pytest to\n  use the given number of columns for its output. this option will\n  temporarily override the `columns` environment variable.\n* `raise_on_error` (default `false` ): if `true`,\n  [`ipytest.run`][ipytest.run] and [`%%ipytest`][ipytest.ipytest] will raise\n  an `ipytest.error` if pytest fails.\n\n<!-- minidoc -->\n\n### `ipytest.exit_code`\n\n[ipytest.exit_code]: #ipytestexit_code\n\nthe return code of the last pytest invocation.\n\n<!-- minidoc \"function\": \"ipytest.run\", \"header_depth\": 3 -->\n### `ipytest.run(*args, module=none, plugins=(), run_in_thread=<default>, raise_on_error=<default>, addopts=<default>, defopts=<default>, display_columns=<default>)`\n\n[ipytest.run]: #ipytestrunargs-modulenone-plugins-run_in_threaddefault-raise_on_errordefault-addoptsdefault-defoptsdefault-display_columnsdefault\n\nexecute all tests in the passed module (defaults to `__main__`) with pytest.\n\nthis function is a thin wrapper around `pytest.main` and will execute any tests\ndefined in the current notebook session.\n\n**note:** in the default configuration `ipytest.run()` will not raise\nexceptions, when tests fail. to raise exceptions on test errors, e.g.,\ninside a ci/cd context, use `ipytest.autoconfig(raise_on_error=true)`.\n\n**parameters:**\n\n- `args`: additional commandline options passed to pytest\n- `module`: the module containing the tests. if not given, `__main__` will\n  be used.\n- `plugins`: additional plugins passed to pytest.\n\nthe following parameters override the config options set with\n[`ipytest.config()`][ipytest.config] or\n[`ipytest.autoconfig()`][ipytest.autoconfig].\n\n- `run_in_thread`: if given, override the config option \"run_in_thread\".\n- `raise_on_error`: if given, override the config option \"raise_on_error\".\n- `addopts`: if given, override the config option \"addopts\".\n- `defopts`: if given, override the config option \"defopts\".\n- `display_columns`: if given, override the config option \"display_columns\".\n\n**returns**: the exit code of `pytest.main`.\n\n<!-- minidoc -->\n<!-- minidoc \"function\": \"ipytest.clean\", \"header_depth\": 3 -->\n### `ipytest.clean(pattern=<default>, *, module=none)`\n\n[ipytest.clean]: #ipytestcleanpatterndefault--modulenone\n\ndelete tests with names matching the given pattern.\n\nin ipython the results of all evaluations are kept in global variables\nunless explicitly deleted. this behavior implies that when tests are renamed\nthe previous definitions will still be found if not deleted. this method\naims to simply this process.\n\nan effective pattern is to start with the cell containing tests with a call\nto [`ipytest.clean()`][ipytest.clean], then defined all test cases, and\nfinally call [`ipytest.run()`][ipytest.run]. this way renaming tests works\nas expected.\n\n**parameters:**\n\n- `pattern`: a glob pattern used to match the tests to delete. if not given,\n  the `\"clean\"` config option is used.\n- `items`: the globals object containing the tests. if `none` is given, the\n    globals object is determined from the call stack.\n\n<!-- minidoc -->\n<!-- minidoc \"function\": \"ipytest.force_reload\", \"header_depth\": 3 -->\n### `ipytest.force_reload(*include, modules: optional[dict[str, module]] = none)`\n\n[ipytest.force_reload]: #ipytestforce_reloadinclude-modules-optionaldictstr-module--none\n\nensure following imports of the listed modules reload the code from disk\n\nthe given modules and their submodules are removed from `sys.modules`.\nnext time the modules are imported, they are loaded from disk.\n\nif given, the parameter `modules` should be a dictionary of modules to use\ninstead of `sys.modules`.\n\nusage:\n\n```python\nipytest.force_reload(\"my_package\")\nfrom my_package.submodule import my_function\n```\n\n<!-- minidoc -->\n<!-- minidoc \"class\": \"ipytest.error\", \"header_depth\": 3 -->\n### `ipytest.error(exit_code)`\n\n[ipytest.error]: #ipytesterrorexit_code\n\nerror raised by ipytest on test failure\n\n<!-- minidoc -->\n\n## development\n\nsetup a python 3.10 virtual environment and install the requirements via\n\n```bash\npip install -r requirements-dev.txt\npip install -e .\n```\n\nto execute the unit tests of `ipytest` run\n\n```bash\npython x.py test\npython x.py integration\n```\n\nbefore committing, execute `python x.py precommit` to update the documentation,\nformat the code, and run tests.\n\nto create a new release execute:\n\n```bash\npython x.py release\n```\n\n## related packages\n\n`ipytest` is designed to enable running tests within an interactive notebook\nsession. there are also other packages that aim to use test full notebooks:\nthese packages run the notebook and compare the output of cells to the output of\nprevious runs. these packages include:\n\n- [nbval](https://github.com/computationalmodelling/nbval)\n- [nbmake](https://github.com/treebeardtech/nbmake)\n- [pytest-ipynb](https://github.com/zonca/pytest-ipynb) is no longer\n  maintained\n- ...\n\nwhile pytest itself is generally supported, support for pytest plugins depends\nvery much on the plugin. the following plugins are known to not work:\n\n- [pytest-cov](https://github.com/chmp/ipytest/issues/88)\n- [pytest-xdist](https://github.com/chmp/ipytest/issues/90)\n\nplease create an issue, if i missed a packaged or mischaracterized any package.\n\n## license\n\n```\nthe mit license (mit)\ncopyright (c) 2015 - 2023 christopher prohm\n\npermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"software\"),\nto deal in the software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the software, and to permit persons to whom the\nsoftware is furnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising\nfrom, out of or in connection with the software or the use or other\ndealings in the software.\n\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "ipytest",
  "package_url": "https://pypi.org/project/ipytest/",
  "project_url": "https://pypi.org/project/ipytest/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/ipytest/0.13.3/",
  "requires_dist": [
    "ipython",
    "packaging",
    "pytest (>=5.4)"
  ],
  "requires_python": ">=3.7,<4",
  "summary": "unit tests in ipython notebooks",
  "version": "0.13.3",
  "releases": [],
  "developers": [
    "christopher_prohm",
    "mail@cprohm.de"
  ],
  "kwds": "ipytestexit_code pytest ipytest ipytesterrorexit_code ipytestconfigrewrite_assertskeep",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ipytest",
  "homepage": "",
  "release_count": 38,
  "dependency_ids": [
    "pypi_ipython",
    "pypi_packaging",
    "pypi_pytest"
  ]
}
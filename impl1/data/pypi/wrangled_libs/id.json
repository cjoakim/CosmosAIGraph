{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: security :: cryptography"
  ],
  "description": "id\n==\n\n<!--- @begin-badges@ --->\n![ci](https://github.com/di/id/workflows/ci/badge.svg)\n[![pypi version](https://badge.fury.io/py/id.svg)](https://pypi.org/project/id)\n[![openssf scorecard](https://api.securityscorecards.dev/projects/github.com/di/id/badge)](https://api.securityscorecards.dev/projects/github.com/di/id)\n[![slsa](https://slsa.dev/images/gh-badge-level3.svg)](https://slsa.dev/)\n<!--- @end-badges@ --->\n\n`id` is a python tool for generating oidc identities. it can automatically\ndetect and produce oidc credentials on a number of environments, including\ngithub actions, gitlab pipelines and google cloud.\n\n## installation\n\n`id` requires python 3.8 or newer, and can be installed directly via `pip`:\n\n```console\npython -m pip install id\n```\n\n## usage\n\nyou can run `id` as a python module via `python -m`:\n\n```console\npython -m id --help\n```\n\ntop-level:\n\n<!-- @begin-id-help@ -->\n```\nusage: id [-h] [-v] [-v] audience\n\na tool for generating oidc identities\n\npositional arguments:\n  audience       the oidc audience to use\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n  -v, --verbose  run with additional debug logging; supply multiple times to\n                 increase verbosity (default: 0)\n```\n<!-- @end-id-help@ -->\n\nfor python api usage, there is a single importable function, `detect_credential`:\n\n```pycon\n>>> from id import detect_credential\n>>> detect_credential(audience='something')\n'<oidc token>'\n```\n\nthis function requires an `audience` parameter, which is used when generating\nthe oidc token. this should be set to the intended audience for the token.\n\nif no supported environment is found, `detect_credential` returns `none`. if a supported\nenvironment is found but `detect_credential` fails to retrieve a token, it raises\n`ambientcredentialerror`.\n\n## supported environments\n\n`id` currently supports ambient credential detection in the following environments:\n\n* [github actions](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect)\n* google cloud\n  * [cloud run](https://cloud.google.com/run/docs/securing/service-identity)\n  * [google kubernetes engine](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity)\n  * [compute engine](https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances)\n  * and more\n* [buildkite](https://buildkite.com/docs/agent/v3/cli-oidc)\n* [gitlab](https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html) (see _environment variables_ below)\n* [circleci](https://circleci.com/docs/oidc-tokens-with-custom-claims/)\n\n### tokens in environment variables\n\ngitlab provides oidc tokens through environment variables. the variable name must be\n`<aud>_id_token`  where `<aud>` is the uppercased audience argument where all\ncharacters outside of ascii letters and digits are replaced with \"\\_\". a leading digit\nmust also be replaced with a \"\\_\".\n\n## licensing\n\n`id` is licensed under the apache 2.0 license.\n\n## contributing\n\nsee [the contributing docs](https://github.com/di/id/blob/main/contributing.md) for details.\n\n### slsa provenance\nthis project emits a slsa provenance on its release! this enables you to verify the integrity\nof the downloaded artifacts and ensured that the binary's code really comes from this source code.\n\nto do so, please follow the instructions [here](https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "id",
  "package_url": "https://pypi.org/project/id/",
  "project_url": "https://pypi.org/project/id/",
  "project_urls": {
    "Homepage": "https://pypi.org/project/id/",
    "Issues": "https://github.com/di/id/issues",
    "Source": "https://github.com/di/id"
  },
  "release_url": "https://pypi.org/project/id/1.2.1/",
  "requires_dist": [
    "pydantic",
    "requests",
    "build ; extra == \"dev\"",
    "bump >= 1.3.2 ; extra == \"dev\"",
    "id[test,lint] ; extra == \"dev\"",
    "bandit ; extra == \"lint\"",
    "interrogate ; extra == \"lint\"",
    "mypy ; extra == \"lint\"",
    "ruff < 0.1.8 ; extra == \"lint\"",
    "types-requests ; extra == \"lint\"",
    "pytest ; extra == \"test\"",
    "pytest-cov ; extra == \"test\"",
    "pretend ; extra == \"test\"",
    "coverage[toml] ; extra == \"test\""
  ],
  "requires_python": ">=3.8",
  "summary": "a tool for generating oidc identities",
  "version": "1.2.1",
  "releases": [],
  "developers": [],
  "kwds": "badges badge _id_token id_token_authentication oidc",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_id",
  "homepage": "",
  "release_count": 6,
  "dependency_ids": [
    "pypi_bandit",
    "pypi_build",
    "pypi_bump",
    "pypi_coverage",
    "pypi_id",
    "pypi_interrogate",
    "pypi_mypy",
    "pypi_pretend",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_ruff",
    "pypi_types_requests"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "# kubernetes operator pythonic framework (kopf)\n\n[![supported python versions](https://img.shields.io/pypi/pyversions/kopf.svg)](https://pypi.org/project/kopf/)\n[![ci](https://github.com/nolar/kopf/workflows/thorough%20tests/badge.svg)](https://github.com/nolar/kopf/actions/workflows/thorough.yaml)\n[![codecov](https://codecov.io/gh/nolar/kopf/branch/main/graph/badge.svg)](https://codecov.io/gh/nolar/kopf)\n[![coverage status](https://coveralls.io/repos/github/nolar/kopf/badge.svg?branch=main)](https://coveralls.io/github/nolar/kopf?branch=main)\n[![total alerts](https://img.shields.io/lgtm/alerts/g/nolar/kopf.svg?logo=lgtm&logowidth=18)](https://lgtm.com/projects/g/nolar/kopf/alerts/)\n[![language grade: python](https://img.shields.io/lgtm/grade/python/g/nolar/kopf.svg?logo=lgtm&logowidth=18)](https://lgtm.com/projects/g/nolar/kopf/context:python)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white)](https://github.com/pre-commit/pre-commit)\n\n**kopf** \u2014kubernetes operator pythonic framework\u2014 is a framework and a library\nto make kubernetes operators development easier, just in a few lines of python code.\n\nthe main goal is to bring the domain-driven design to the infrastructure level,\nwith kubernetes being an orchestrator/database of the domain objects (custom resources),\nand the operators containing the domain logic (with no or minimal infrastructure logic).\n\nthe project was originally started as `zalando-incubator/kopf` in march 2019,\nand then forked as `nolar/kopf` in august 2020: but it is the same codebase,\nthe same packages, the same developer(s).\n\n\n## documentation\n\n* https://kopf.readthedocs.io/\n\n\n## features\n\n* simple, but powerful:\n  * a full-featured operator in just 2 files: a `dockerfile` + a python file (*).\n  * handling functions registered via decorators with a declarative approach.\n  * no infrastructure boilerplate code with k8s api communication.\n  * both sync and async handlers, with sync ones being threaded under the hood.\n  * detailed documentation with examples.\n* intuitive mapping of python concepts to kubernetes concepts and back:\n  * marshalling of resources' data to the handlers' kwargs.\n  * marshalling of handlers' results to the resources' statuses.\n  * publishing of logging messages as kubernetes events linked to the resources.\n* support anything that exists in k8s:\n  * custom k8s resources.\n  * builtin k8s resources (pods, namespaces, etc).\n  * multiple resource types in one operator.\n  * both cluster and namespaced operators.\n* all the ways of handling that a developer can wish for:\n  * low-level handlers for events received from k8s apis \"as is\" (an equivalent of _informers_).\n  * high-level handlers for detected causes of changes (creation, updates with diffs, deletion).\n  * handling of selected fields only instead of the whole objects (if needed).\n  * dynamically generated or conditional sub-handlers (an advanced feature).\n  * timers that tick as long as the resource exists, optionally with a delay since the last change.\n  * daemons that run as long as the resource exists (in threads or asyncio-tasks).\n  * validating and mutating admission webhook (with dev-mode tunneling).\n  * live in-memory indexing of resources or their excerpts.\n  * filtering with stealth mode (no logging): by arbitrary filtering functions,\n    by labels/annotations with values, presence/absence, or dynamic callbacks.\n  * in-memory all-purpose containers to store non-serializable objects for individual resources.\n* eventual consistency of handling:\n  * retrying the handlers in case of arbitrary errors until they succeed.\n  * special exceptions to request a special retry or to never retry again.\n  * custom limits for the number of attempts or the time.\n  * implicit persistence of the progress that survives the operator restarts.\n  * tolerance to restarts and lengthy downtimes: handles the changes afterwards.\n* awareness of other kopf-based operators:\n  * configurable identities for different kopf-based operators for the same resource kinds.\n  * avoiding double-processing due to cross-pod awareness of the same operator (\"peering\").\n  * pausing of a deployed operator when a dev-mode operator runs outside of the cluster.\n* extra toolkits and integrations:\n  * some limited support for object hierarchies with name/labels propagation.\n  * friendly to any k8s client libraries (and is client agnostic).\n  * startup/cleanup operator-level handlers.\n  * liveness probing endpoints and rudimentary metrics exports.\n  * basic testing toolkit for in-memory per-test operator running.\n  * embeddable into other python applications.\n* highly configurable (to some reasonable extent).\n\n(*) _small font: two files of the operator itself, plus some amount of\ndeployment files like rbac roles, bindings, service accounts, network policies\n\u2014 everything needed to deploy an application in your specific infrastructure._\n\n\n## examples\n\nsee [examples](https://github.com/nolar/kopf/tree/main/examples)\nfor the examples of the typical use-cases.\n\na minimalistic operator can look like this:\n\n```python\nimport kopf\n\n@kopf.on.create('kopfexamples')\ndef create_fn(spec, name, meta, status, **kwargs):\n    print(f\"and here we are! created {name} with spec: {spec}\")\n```\n\nnumerous kwargs are available, such as `body`, `meta`, `spec`, `status`,\n`name`, `namespace`, `retry`, `diff`, `old`, `new`, `logger`, etc:\nsee [arguments](https://kopf.readthedocs.io/en/latest/kwargs/)\n\nto run a never-exiting function for every resource as long as it exists:\n\n```python\nimport time\nimport kopf\n\n@kopf.daemon('kopfexamples')\ndef my_daemon(spec, stopped, **kwargs):\n    while not stopped:\n        print(f\"object's spec: {spec}\")\n        time.sleep(1)\n```\n\nor the same with the timers:\n\n```python\nimport kopf\n\n@kopf.timer('kopfexamples', interval=1)\ndef my_timer(spec, **kwargs):\n    print(f\"object's spec: {spec}\")\n```\n\nthat easy! for more features, see the [documentation](https://kopf.readthedocs.io/).\n\n\n## usage\n\npython 3.7+ is required:\n[cpython](https://www.python.org/) and [pypy](https://www.pypy.org/)\nare officially supported and tested; other python implementations can work too.\n\nwe assume that when the operator is executed in the cluster, it must be packaged\ninto a docker image with a ci/cd tool of your preference.\n\n```dockerfile\nfrom python:3.11\nadd . /src\nrun pip install kopf\ncmd kopf run /src/handlers.py --verbose\n```\n\nwhere `handlers.py` is your python script with the handlers\n(see `examples/*/example.py` for the examples).\n\nsee `kopf run --help` for other ways of attaching the handlers.\n\n\n## contributing\n\nplease read [contributing.md](https://github.com/nolar/kopf/blob/main/contributing.md)\nfor details on our process for submitting pull requests to us, and please ensure\nyou follow the [code_of_conduct.md](https://github.com/nolar/kopf/blob/main/code_of_conduct.md).\n\nto install the environment for the local development,\nread [development.md](https://github.com/nolar/kopf/blob/main/development.md).\n\n\n## versioning\n\nwe use [semver](http://semver.org/) for versioning. for the versions available,\nsee the [releases on this repository](https://github.com/nolar/kopf/releases).\n\n\n## license\n\nthis project is licensed under the mit license \u2014\nsee the [license](https://github.com/nolar/kopf/blob/main/license) file for details.\n\n\n## acknowledgments\n\n* thanks to zalando for starting this project in zalando's open-source incubator\n  in the first place.\n* thanks to [@side8](https://github.com/side8) and their [k8s-operator](https://github.com/side8/k8s-operator)\n  for inspiration.\n",
  "docs_url": null,
  "keywords": "kubernetes,operator,framework,python,k8s",
  "license": "mit",
  "name": "kopf",
  "package_url": "https://pypi.org/project/kopf/",
  "project_url": "https://pypi.org/project/kopf/",
  "project_urls": {
    "Bug Tracker": "https://github.com/nolar/kopf/issues",
    "Documentation": "https://kopf.readthedocs.io",
    "Homepage": "https://github.com/nolar/kopf",
    "Source Code": "https://github.com/nolar/kopf"
  },
  "release_url": "https://pypi.org/project/kopf/1.36.2/",
  "requires_dist": [
    "typing-extensions",
    "python-json-logger",
    "iso8601",
    "click",
    "aiohttp (<4.0.0)",
    "pyyaml",
    "pyngrok ; extra == 'dev'",
    "oscrypto ; extra == 'dev'",
    "certbuilder ; extra == 'dev'",
    "certvalidator ; extra == 'dev'",
    "pykube-ng ; extra == 'full-auth'",
    "kubernetes ; extra == 'full-auth'",
    "uvloop ; extra == 'uvloop'"
  ],
  "requires_python": ">=3.7",
  "summary": "kubernetes operator pythonic framework (kopf)",
  "version": "1.36.2",
  "releases": [],
  "developers": [
    "nolar@nolar.info",
    "sergey_vasilyev"
  ],
  "kwds": "kubernetes kopfexamples kwargs kopf toolkits",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_kopf",
  "homepage": "https://github.com/nolar/kopf",
  "release_count": 100,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_certbuilder",
    "pypi_certvalidator",
    "pypi_click",
    "pypi_iso8601",
    "pypi_kubernetes",
    "pypi_oscrypto",
    "pypi_pykube_ng",
    "pypi_pyngrok",
    "pypi_python_json_logger",
    "pypi_pyyaml",
    "pypi_typing_extensions",
    "pypi_uvloop"
  ]
}
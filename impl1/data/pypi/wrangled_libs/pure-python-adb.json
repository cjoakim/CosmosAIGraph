{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: software development :: testing"
  ],
  "description": "the package name has been renamed from 'adb' to 'ppadb'\n=========================================================\n\nfrom version **v0.2.1-dev**, the package name has been renamed from 'adb' to 'ppadb' to avoid conflit with google `google/python-adb`_\n\n\nintroduction\n==================\n\nthis is pure-python implementation of the adb client.\n\nyou can use it to communicate with adb server (not the adb daemon on the device/emulator).\n\nwhen you use `adb` command\n\n.. image:: https://raw.githubusercontent.com/swind/pure-python-adb/master/docs/adb_cli.png\n\nnow you can use `pure-python-adb` to connect to adb server as adb command line\n\n.. image:: https://raw.githubusercontent.com/swind/pure-python-adb/master/docs/adb_pure_python_adb.png\n\nthis package supports most of the adb command line tool's functionality.\n\n1. adb devices\n2. adb shell\n3. adb forward\n4. adb pull/push\n5. adb install/uninstall\n\nrequirements\n============\n\npython 3.6+\n\ninstallation\n============\n\n.. code-block:: console\n\n    $pip install -u pure-python-adb\n\nexamples\n========\n\nconnect to adb server and get the version\n-----------------------------------------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    # default is \"127.0.0.1\" and 5037\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    print(client.version())\n\n    >>> 39\n\nconnect to a device\n-------------------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    # default is \"127.0.0.1\" and 5037\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n\n\nlist all devices ( adb devices ) and install/uninstall an apk on all devices\n----------------------------------------------------------------------------------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n\n    apk_path = \"example.apk\"\n\n    # default is \"127.0.0.1\" and 5037\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    devices = client.devices()\n\n    for device in devices:\n        device.install(apk_path)\n\n    # check apk is installed\n    for device in devices:\n        print(device.is_installed(\"example.package\"))\n\n    # uninstall\n    for device in devices:\n        device.uninstall(\"example.package\")\n\nadb shell\n---------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    # default is \"127.0.0.1\" and 5037\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n    device.shell(\"echo hello world !\")\n\n.. code-block:: python\n\n    def dump_logcat(connection):\n        while true:\n            data = connection.read(1024)\n            if not data:\n                break\n            print(data.decode('utf-8'))\n\n        connection.close()\n\n    from ppadb.client import client as adbclient\n    # default is \"127.0.0.1\" and 5037\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n    device.shell(\"logcat\", handler=dump_logcat)\n\nread logcat line by line\n\n.. code-block:: python\n\n    from ppadb.client import client\n\n    def dump_logcat_by_line(connect):\n        file_obj = connect.socket.makefile()\n        for index in range(0, 10):\n            print(\"line {}: {}\".format(index, file_obj.readline().strip()))\n\n    file_obj.close()\n    connect.close()\n\n    client = client()\n    device = client.device(\"emulator-5554\")\n    device.shell(\"logcat\", handler=dump_logcat_by_line)\n\nscreenshot\n----------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n    result = device.screencap()\n    with open(\"screen.png\", \"wb\") as fp:\n        fp.write(result)\n\npush file or folder\n--------------------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n\n    device.push(\"example.apk\", \"/sdcard/example.apk\")\n\npull\n----\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    device = client.device(\"emulator-5554\")\n\n    device.shell(\"screencap -p /sdcard/screen.png\")\n    device.pull(\"/sdcard/screen.png\", \"screen.png\")\n\nconnect to device\n-----------------\n\n.. code-block:: python\n\n    from ppadb.client import client as adbclient\n    client = adbclient(host=\"127.0.0.1\", port=5037)\n    client.remote_connect(\"172.20.0.1\", 5555)\n\n    device = client.device(\"172.20.0.1:5555\")\n\n    # disconnect all devices\n    client.remote_disconnect()\n\n    ##disconnect 172.20.0.1\n    # client.remote_disconnect(\"172.20.0.1\")\n    ##or\n    # client.remote_disconnect(\"172.20.0.1\", 5555)\n\n\nenable debug logger\n--------------------\n\n.. code-block:: python\n\n    logging.getlogger(\"ppadb\").setlevel(logging.debug)\n\nasync client\n--------------------\n\n.. code-block:: python\n\n    import asyncio\n    import aiofiles\n    from ppadb.client_async import clientasync as adbclient\n\n    async def _save_screenshot(device):\n        result = await device.screencap()\n        file_name = f\"{device.serial}.png\"\n        async with aiofiles.open(f\"{file_name}\", mode='wb') as f:\n            await f.write(result)\n\n        return file_name\n\n    async def main():\n        client = adbclient(host=\"127.0.0.1\", port=5037)\n        devices = await client.devices()\n        for device in devices:\n            print(device.serial)\n\n        result = await asyncio.gather(*[_save_screenshot(device) for device in devices])\n        print(result)\n\n    asyncio.run(main())\n\n\n\n\n\n\nhow to run test cases\n======================\n\nprepare\n--------\n\n1. install docker\n\n2. install docker compose\n\n.. code-block:: console\n\n    pip install docker-compose\n\n3. modify `test/conftest.py`\n\nchange the value of `adb_host` to the \"emulator\"\n\n.. code-block:: python\n\n    adb_host=\"emulator\"\n\n4. run testcases\n\n.. code-block:: console\n\n    docker-compose up\n\nresult\n\n.. code-block:: console\n\n    starting purepythonadb_emulator_1 ... done\n    recreating purepythonadb_python_environment_1 ... done\n    attaching to purepythonadb_emulator_1, purepythonadb_python_environment_1\n    emulator_1            | + echo n\n    emulator_1            | + /home/user/android-sdk-linux/tools/bin/avdmanager create avd -k system-images;android-25;google_apis;x86 -n docker -b x86 -g google_apis --device 8 --force\n    parsing /home/user/android-sdk-linux/emulator/package.xmlparsing /home/user/android-sdk-linux/patcher/v4/package.xmlparsing /home/user/android-sdk-linux/platform-tools/package.xmlparsing /home/user/android-sdk-linux/platforms/android-25/package.xmlparsing /home/user/android-sdk-linux/system-images/android-25/google_apis/x86/package.xmlparsing /home/user/android-sdk-linux/tools/package.xml+ echo hw.keyboard = true\n    emulator_1            | + adb start-server\n    emulator_1            | * daemon not running; starting now at tcp:5037\n    python_environment_1  | ============================= test session starts ==============================\n    python_environment_1  | platform linux -- python 3.6.1, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\n    python_environment_1  | rootdir: /code, inifile:\n    python_environment_1  | collected 27 items\n    python_environment_1  |\n    emulator_1            | * daemon started successfully\n    emulator_1            | + exec /usr/bin/supervisord\n    emulator_1            | /usr/lib/python2.7/dist-packages/supervisor/options.py:298: userwarning: supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a \"-c\" argument specifying an absolute path to a configuration file for improved security.\n    emulator_1            |   'supervisord is running as root and it is searching '\n    emulator_1            | 2018-07-07 17:19:47,560 crit supervisor running as root (no user in config file)\n    emulator_1            | 2018-07-07 17:19:47,560 info included extra file \"/etc/supervisor/conf.d/supervisord.conf\" during parsing\n    emulator_1            | 2018-07-07 17:19:47,570 info rpc interface 'supervisor' initialized\n    emulator_1            | 2018-07-07 17:19:47,570 crit server 'unix_http_server' running without any http authentication checking\n    emulator_1            | 2018-07-07 17:19:47,570 info supervisord started with pid 1\n    emulator_1            | 2018-07-07 17:19:48,573 info spawned: 'socat-5554' with pid 74\n    emulator_1            | 2018-07-07 17:19:48,574 info spawned: 'socat-5555' with pid 75\n    emulator_1            | 2018-07-07 17:19:48,576 info spawned: 'socat-5037' with pid 76\n    emulator_1            | 2018-07-07 17:19:48,578 info spawned: 'novnc' with pid 77\n    emulator_1            | 2018-07-07 17:19:48,579 info spawned: 'socat-9008' with pid 78\n    emulator_1            | 2018-07-07 17:19:48,582 info spawned: 'emulator' with pid 80\n    emulator_1            | 2018-07-07 17:19:49,607 info success: socat-5554 entered running state, process has stayed up for > than 1 seconds (startsecs)\n    emulator_1            | 2018-07-07 17:19:49,607 info success: socat-5555 entered running state, process has stayed up for > than 1 seconds (startsecs)\n    emulator_1            | 2018-07-07 17:19:49,607 info success: socat-5037 entered running state, process has stayed up for > than 1 seconds (startsecs)\n    emulator_1            | 2018-07-07 17:19:49,607 info success: novnc entered running state, process has stayed up for > than 1 seconds (startsecs)\n    emulator_1            | 2018-07-07 17:19:49,608 info success: socat-9008 entered running state, process has stayed up for > than 1 seconds (startsecs)\n    emulator_1            | 2018-07-07 17:19:49,608 info success: emulator entered running state, process has stayed up for > than 1 seconds (startsecs)\n    python_environment_1  | test/test_device.py ..............                                       [ 51%]\n    python_environment_1  | test/test_host.py ..                                                     [ 59%]\n    python_environment_1  | test/test_host_serial.py ........                                        [ 88%]\n    python_environment_1  | test/test_plugins.py ...                                                 [100%]\n    python_environment_1  |\n    python_environment_1  | ------------------ generated xml file: /code/test_result.xml -------------------\n    python_environment_1  | ========================= 27 passed in 119.15 seconds ==========================\n    purepythonadb_python_environment_1 exited with code 0\n    aborting on container exit...\n    stopping purepythonadb_emulator_1 ... done\n\nmore information\n=================\n\na pure node.js client for the android debug bridge\n---------------------------------------------------\n\nadbkit_\n\nadb documents\n--------------\n\n- protocol_\n- services_\n- sync_\n\n.. _adbkit: https://github.com/openstf/stf\n.. _protocol: https://android.googlesource.com/platform/system/core/+/master/adb/protocol.txt\n.. _services: https://android.googlesource.com/platform/system/core/+/master/adb/services.txt\n.. _sync: https://android.googlesource.com/platform/system/core/+/master/adb/sync.txt\n.. _`google/python-adb`: https://github.com/google/python-adb\n\n\n0.2.1 (2019-10-14)\n--------------------\n\n* fixes #21: rename the package name from \"adb\" to \"ppadb\"\n* fixes #23: support push dir to device\n* fixes #25: don't call logging.basicconfig() in the module\n\n\n0.1.6 (2019-01-21)\n-------------------\n\n* fix #4 push does not preserve original timestap unlike equiv adb push from command line\n* fix #6 forward_list should also check serial\n* fix #8: adb/command/host/__init__.py can take an exception parsing \"devices\" data\n\n\n0.1.0 (2018-06-23)\n-------------------\n\n* first release on pypi.",
  "docs_url": null,
  "keywords": "adb",
  "license": "mit license",
  "name": "pure-python-adb",
  "package_url": "https://pypi.org/project/pure-python-adb/",
  "project_url": "https://pypi.org/project/pure-python-adb/",
  "project_urls": {
    "Homepage": "https://github.com/Swind/pure-python-adb"
  },
  "release_url": "https://pypi.org/project/pure-python-adb/0.3.0.dev0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pure python implementation of the adb client",
  "version": "0.3.0.dev0",
  "releases": [],
  "developers": [
    "swind@cloudmosa.com",
    "swind_ou"
  ],
  "kwds": "adb_pure_python_adb adb_cli adb_host adb adbkit_",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pure_python_adb",
  "homepage": "https://github.com/swind/pure-python-adb",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "..\n    this file is part of lazr.uri.\n\n    lazr.uri is free software: you can redistribute it and/or modify it\n    under the terms of the gnu lesser general public license as published by\n    the free software foundation, version 3 of the license.\n\n    lazr.uri is distributed in the hope that it will be useful, but\n    without any warranty; without even the implied warranty of merchantability\n    or fitness for a particular purpose.  see the gnu lesser general public\n    license for more details.\n\n    you should have received a copy of the gnu lesser general public license\n    along with lazr.uri.  if not, see <http://www.gnu.org/licenses/>.\n\nlazr.uri\n********\n\nthe lazr.uri package includes code for parsing and dealing with uris.\n\n    >>> import lazr.uri\n    >>> print('version:', lazr.uri.__version__)\n    version: ...\n\n=============\nthe uri class\n=============\n\n    >>> from lazr.uri import uri\n    >>> uri1 = uri('http://localhost/foo/bar?123')\n    >>> uri2 = uri('http://localhost/foo/bar/baz')\n    >>> uri1.contains(uri2)\n    true\n\nthese next two are equivalent, so the answer should be true, even through\nthe \"outside\" one is shorter than the \"inside\" one.\n\n    >>> uri1 = uri('http://localhost/foo/bar/')\n    >>> uri2 = uri('http://localhost/foo/bar')\n    >>> uri1.contains(uri2)\n    true\n\nthe next two are exactly the same.  we consider a url to be inside itself.\n\n    >>> uri1 = uri('http://localhost/foo/bar/')\n    >>> uri2 = uri('http://localhost/foo/bar/')\n    >>> uri1.contains(uri2)\n    true\n\nin the next case, the string of url2 starts with the string of url1.  but,\nbecause url2 continues within the same path step, url2 is not inside url1.\n\n    >>> uri1 = uri('http://localhost/foo/ba')\n    >>> uri2 = uri('http://localhost/foo/bar')\n    >>> uri1.contains(uri2)\n    false\n\nhere, url2 is url1 plus an extra path step.  so, url2 is inside url1.\n\n    >>> uri1 = uri('http://localhost/foo/bar/')\n    >>> uri2 = uri('http://localhost/foo/bar/baz')\n    >>> uri1.contains(uri2)\n    true\n\nonce the uri is parsed, its parts are accessible.\n\n    >>> uri = uri('https://fish.tree:8666/blee/blah')\n    >>> uri.scheme\n    'https'\n    >>> uri.host\n    'fish.tree'\n    >>> uri.port\n    '8666'\n    >>> uri.authority\n    'fish.tree:8666'\n    >>> uri.path\n    '/blee/blah'\n\n    >>> uri = uri('https://localhost/blee/blah')\n    >>> uri.scheme\n    'https'\n    >>> uri.host\n    'localhost'\n    >>> uri.port is none\n    true\n    >>> uri.authority\n    'localhost'\n    >>> uri.path\n    '/blee/blah'\n\nthe grammar from rfc 3986 does not allow for square brackets in the\nquery component, but section 3.4 does say how such delimeter\ncharacters should be handled if found in the component.\n\n    >>> uri = uri('http://www.apple.com/store?delivery=[slow]#horse+cart')\n    >>> uri.scheme\n    'http'\n    >>> uri.host\n    'www.apple.com'\n    >>> uri.port is none\n    true\n    >>> uri.path\n    '/store'\n    >>> uri.query\n    'delivery=[slow]'\n    >>> uri.fragment\n    'horse+cart'\n\n====================\nfinding uris in text\n====================\n\nlazr.uri also knows how to retrieve a list of uris from a block of\ntext.  this is intended for uses like finding bug tracker uris or\nsimilar.\n\nthe find_uris_in_text() function returns an iterator that yields uri\nobjects for each uri found in the text.  note that the returned uris\nhave been canonicalised by the uri class:\n\n  >>> from lazr.uri import find_uris_in_text\n  >>> text = '''\n  ... a list of uris:\n  ...  * http://localhost/a/b\n  ...  * http://launchpad.net\n  ...  * mailto:joe@example.com\n  ...  * xmpp:fred@example.org\n  ...  * http://bazaar.launchpad.net/%7ename12/firefox/foo\n  ...  * http://somewhere.in/time?track=[02]#wasted-years\n  ... '''\n\n  >>> for uri in find_uris_in_text(text):\n  ...     print(uri)\n  http://localhost/a/b\n  http://launchpad.net/\n  mailto:joe@example.com\n  xmpp:fred@example.org\n  http://bazaar.launchpad.net/~name12/firefox/foo\n  http://somewhere.in/time?track=[02]#wasted-years\n\n\n=================\nnews for lazr.uri\n=================\n\n1.0.6 (2021-09-13)\n==================\n\n- adjust versioning strategy to avoid importing pkg_resources, which is slow\n  in large environments.\n\n1.0.5 (2020-06-29)\n==================\n\n- add an explicit __hash__ method to lazr.uri.uri.\n\n1.0.4 (2020-06-12)\n==================\n\n- install version.txt with package_data (stefano rivera,\n  https://bugs.launchpad.net/lazr.uri/+bug/918660).\n- switch from buildout to tox.\n\n1.0.3 (2012-01-18)\n==================\n\n- add compatibility with python 3 (thomas kluyver).\n\n1.0.1 (2009-06-01)\n==================\n\n- eliminate dependency on setuptools_bzr so sdists do not bring bzr ini, among\n  others.\n\n1.0 (2009-03-23)\n================\n\n- initial release on pypi",
  "docs_url": null,
  "keywords": "",
  "license": "lgpl v3",
  "name": "lazr.uri",
  "package_url": "https://pypi.org/project/lazr.uri/",
  "project_url": "https://pypi.org/project/lazr.uri/",
  "project_urls": {
    "Download": "https://launchpad.net/lazr.uri/+download",
    "Homepage": "https://launchpad.net/lazr.uri"
  },
  "release_url": "https://pypi.org/project/lazr.uri/1.0.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a self-contained, easily reusable library for parsing, manipulating,",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "lazr-developers@lists.launchpad.net",
    "lazr_developers"
  ],
  "kwds": "file find_uris_in_text uri lazr uri2",
  "license_kwds": "lgpl v3",
  "libtype": "pypi",
  "id": "pypi_lazr.uri",
  "homepage": "https://launchpad.net/lazr.uri",
  "release_count": 7,
  "dependency_ids": []
}
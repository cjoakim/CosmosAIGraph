{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "programming language :: python :: 3"
  ],
  "description": "\r\n[![pypi package version](https://img.shields.io/pypi/v/pytelegrambotapi.svg)](https://pypi.python.org/pypi/pytelegrambotapi)\r\n[![supported python versions](https://img.shields.io/pypi/pyversions/pytelegrambotapi.svg)](https://pypi.python.org/pypi/pytelegrambotapi)\r\n[![documentation status](https://readthedocs.org/projects/pytba/badge/?version=latest)](https://pytba.readthedocs.io/en/latest/?badge=latest)\r\n[![pypi downloads](https://img.shields.io/pypi/dm/pytelegrambotapi.svg)](https://pypi.org/project/pytelegrambotapi/)\r\n[![pypi status](https://img.shields.io/pypi/status/pytelegrambotapi.svg?style=flat-square)](https://pypi.python.org/pypi/pytelegrambotapi)\r\n\r\n# <p align=\"center\">pytelegrambotapi\r\n\r\n<p align=\"center\">a simple, but extensible python implementation for the <a href=\"https://core.telegram.org/bots/api\">telegram bot api</a>.</p>\r\n<p align=\"center\">both synchronous and asynchronous.</p>\r\n\r\n## <p align=\"center\">supported bot api version: <a href=\"https://core.telegram.org/bots/api-changelog#september-22-2023\">6.9</a>!\r\n\r\n<h2><a href='https://pytba.readthedocs.io/en/latest/index.html'>official documentation</a></h2>\r\n<h2><a href='https://pytba.readthedocs.io/ru/latest/index.html'>official ru documentation</a></h2>\r\n\t\r\n## contents\r\n\r\n  * [getting started](#getting-started)\r\n  * [writing your first bot](#writing-your-first-bot)\r\n    * [prerequisites](#prerequisites)\r\n    * [a simple echo bot](#a-simple-echo-bot)\r\n  * [general api documentation](#general-api-documentation)\r\n    * [types](#types)\r\n    * [methods](#methods)\r\n    * [general use of the api](#general-use-of-the-api)\r\n      * [message handlers](#message-handlers)\r\n      * [edited message handler](#edited-message-handler)\r\n      * [channel post handler](#channel-post-handler)\r\n      * [edited channel post handler](#edited-channel-post-handler)\r\n      * [callback query handlers](#callback-query-handler)\r\n      * [shipping query handler](#shipping-query-handler)\r\n      * [pre checkout query handler](#pre-checkout-query-handler)\r\n      * [poll handler](#poll-handler)\r\n      * [poll answer handler](#poll-answer-handler)\r\n      * [my chat member handler](#my-chat-member-handler)\r\n      * [chat member handler](#chat-member-handler)\r\n      * [chat join request handler](#chat-join-request-handler)\r\n    * [inline mode](#inline-mode)\r\n      * [inline handler](#inline-handler)\r\n      * [chosen inline handler](#chosen-inline-handler)\r\n      * [answer inline query](#answer-inline-query)\r\n    * [additional api features](#additional-api-features)\r\n      * [middleware handlers](#middleware-handlers)\r\n      * [custom filters](#custom-filters)\r\n      * [telebot](#telebot)\r\n      * [reply markup](#reply-markup)\r\n  * [advanced use of the api](#advanced-use-of-the-api)\r\n    * [using local bot api server](#using-local-bot-api-sever)\r\n    * [asynchronous telebot](#asynchronous-telebot)\r\n    * [sending large text messages](#sending-large-text-messages)\r\n    * [controlling the amount of threads used by telebot](#controlling-the-amount-of-threads-used-by-telebot)\r\n    * [the listener mechanism](#the-listener-mechanism)\r\n    * [using web hooks](#using-web-hooks)\r\n    * [logging](#logging)\r\n    * [proxy](#proxy)\r\n    * [testing](#testing)\r\n  * [api conformance limitations](#api-conformance-limitations)\r\n  * [asynctelebot](#asynctelebot)\r\n  * [f.a.q.](#faq)\r\n    * [how can i distinguish a user and a groupchat in message.chat?](#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat)\r\n    * [how can i handle reocurring connectionreseterrors?](#how-can-i-handle-reocurring-connectionreseterrors)\r\n  * [the telegram chat group](#the-telegram-chat-group)\r\n  * [telegram channel](#telegram-channel)\r\n  * [more examples](#more-examples)\r\n  * [code template](#code-template)\r\n  * [bots using this library](#bots-using-this-library)\r\n\r\n## getting started\r\n\r\nthis api is tested with python 3.8-3.11 and pypy 3.\r\nthere are two ways to install the library:\r\n\r\n* installation using pip (a python package manager):\r\n\r\n```\r\n$ pip install pytelegrambotapi\r\n```\r\n* installation from source (requires git):\r\n\r\n```\r\n$ git clone https://github.com/eternnoir/pytelegrambotapi.git\r\n$ cd pytelegrambotapi\r\n$ python setup.py install\r\n```\r\nor:\r\n```\r\n$ pip install git+https://github.com/eternnoir/pytelegrambotapi.git\r\n```\r\n\r\nit is generally recommended to use the first option.\r\n\r\n*while the api is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling*\r\n```\r\npip install pytelegrambotapi --upgrade\r\n```\r\n\r\n## writing your first bot\r\n\r\n### prerequisites\r\n\r\nit is presumed that you [have obtained an api token with @botfather](https://core.telegram.org/bots#botfather). we will call this token `token`.\r\nfurthermore, you have basic knowledge of the python programming language and more importantly [the telegram bot api](https://core.telegram.org/bots/api).\r\n\r\n### a simple echo bot\r\n\r\nthe telebot class (defined in \\__init__.py) encapsulates all api calls in a single class. it provides functions such as `send_xyz` (`send_message`, `send_document` etc.) and several ways to listen for incoming messages.\r\n\r\ncreate a file called `echo_bot.py`.\r\nthen, open the file and create an instance of the telebot class.\r\n```python\r\nimport telebot\r\n\r\nbot = telebot.telebot(\"token\", parse_mode=none) # you can set parse_mode by default. html or markdown\r\n```\r\n*note: make sure to actually replace token with your own api token.*\r\n\r\nafter that declaration, we need to register some so-called message handlers. message handlers define filters which a message must pass. if a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\r\n\r\nlet's define a message handler which handles incoming `/start` and `/help` commands.\r\n```python\r\n@bot.message_handler(commands=['start', 'help'])\r\ndef send_welcome(message):\r\n\tbot.reply_to(message, \"howdy, how are you doing?\")\r\n```\r\na function which is decorated by a message handler __can have an arbitrary name, however, it must have only one parameter (the message)__.\r\n\r\nlet's add another handler:\r\n```python\r\n@bot.message_handler(func=lambda m: true)\r\ndef echo_all(message):\r\n\tbot.reply_to(message, message.text)\r\n```\r\nthis one echoes all incoming text messages back to the sender. it uses a lambda function to test a message. if the lambda returns true, the message is handled by the decorated function. since we want all messages to be handled by this function, we simply always return true.\r\n\r\n*note: all handlers are tested in the order in which they were declared*\r\n\r\nwe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. to start the bot, add the following to our source file:\r\n```python\r\nbot.infinity_polling()\r\n```\r\nalright, that's it! our source file now looks like this:\r\n```python\r\nimport telebot\r\n\r\nbot = telebot.telebot(\"your_bot_token\")\r\n\r\n@bot.message_handler(commands=['start', 'help'])\r\ndef send_welcome(message):\r\n\tbot.reply_to(message, \"howdy, how are you doing?\")\r\n\r\n@bot.message_handler(func=lambda message: true)\r\ndef echo_all(message):\r\n\tbot.reply_to(message, message.text)\r\n\r\nbot.infinity_polling()\r\n```\r\nto start the bot, simply open up a terminal and enter `python echo_bot.py` to run the bot! test it by sending commands ('/start' and '/help') and arbitrary text messages.\r\n\r\n## general api documentation\r\n\r\n### types\r\n\r\nall types are defined in types.py. they are all completely in line with the [telegram api's definition of the types](https://core.telegram.org/bots/api#available-types), except for the message's `from` field, which is renamed to `from_user` (because `from` is a python reserved token). thus, attributes such as `message_id` can be accessed directly with `message.message_id`. note that `message.chat` can be either an instance of `user` or `groupchat` (see [how can i distinguish a user and a groupchat in message.chat?](#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat)).\r\n\r\nthe message object also has a `content_type`attribute, which defines the type of the message. `content_type` can be one of the following strings:\r\n`text`, `audio`, `document`, `animation`, `game`, `photo`, `sticker`, `video`, `video_note`, `voice`, `location`, `contact`, `venue`, `dice`, `new_chat_members`, `left_chat_member`, `new_chat_title`, `new_chat_photo`, `delete_chat_photo`, `group_chat_created`, `supergroup_chat_created`, `channel_chat_created`, `migrate_to_chat_id`, `migrate_from_chat_id`, `pinned_message`, `invoice`, `successful_payment`, `connected_website`, `poll`, `passport_data`, `proximity_alert_triggered`, `video_chat_scheduled`, `video_chat_started`, `video_chat_ended`, `video_chat_participants_invited`, `web_app_data`, `message_auto_delete_timer_changed`, `forum_topic_created`, `forum_topic_closed`, `forum_topic_reopened`, `forum_topic_edited`, `general_forum_topic_hidden`, `general_forum_topic_unhidden`, `write_access_allowed`, `user_shared`, `chat_shared`, `story`.\r\n\r\nyou can use some types in one function. example:\r\n\r\n```content_types=[\"text\", \"sticker\", \"pinned_message\", \"photo\", \"audio\"]```\r\n\r\n### methods\r\n\r\nall [api methods](https://core.telegram.org/bots/api#available-methods) are located in the telebot class. they are renamed to follow common python naming conventions. e.g. `getme` is renamed to `get_me` and `sendmessage` to `send_message`.\r\n\r\n### general use of the api\r\n\r\noutlined below are some general use cases of the api.\r\n\r\n#### message handlers\r\na message handler is a function that is decorated with the `message_handler` decorator of a telebot instance. message handlers consist of one or multiple filters.\r\neach filter must return true for a certain message in order for a message handler to become eligible to handle that message. a message handler is declared in the following way (provided `bot` is an instance of telebot):\r\n```python\r\n@bot.message_handler(filters)\r\ndef function_name(message):\r\n\tbot.reply_to(message, \"this is a message handler\")\r\n```\r\n`function_name` is not bound to any restrictions. any function name is permitted with message handlers. the function must accept at most one argument, which will be the message that the function must handle.\r\n`filters` is a list of keyword arguments.\r\na filter is declared in the following manner: `name=argument`. one handler may have multiple filters.\r\ntelebot supports the following filters:\r\n\r\n|name|argument(s)|condition|\r\n|:---:|---| ---|\r\n|content_types|list of strings (default `['text']`)|`true` if message.content_type is in the list of strings.|\r\n|regexp|a regular expression as a string|`true` if `re.search(regexp_arg)` returns `true` and `message.content_type == 'text'` (see [python regular expressions](https://docs.python.org/2/library/re.html))|\r\n|commands|list of strings|`true` if `message.content_type == 'text'` and `message.text` starts with a command that is in the list of strings.|\r\n|chat_types|list of chat types|`true` if `message.chat.type` in your filter|\r\n|func|a function (lambda or function reference)|`true` if the lambda or function reference returns `true`|\r\n\t\r\nhere are some examples of using the filters and message handlers:\r\n\r\n```python\r\nimport telebot\r\nbot = telebot.telebot(\"token\")\r\n\r\n# handles all text messages that contains the commands '/start' or '/help'.\r\n@bot.message_handler(commands=['start', 'help'])\r\ndef handle_start_help(message):\r\n\tpass\r\n\r\n# handles all sent documents and audio files\r\n@bot.message_handler(content_types=['document', 'audio'])\r\ndef handle_docs_audio(message):\r\n\tpass\r\n\r\n# handles all text messages that match the regular expression\r\n@bot.message_handler(regexp=\"some_regexp\")\r\ndef handle_message(message):\r\n\tpass\r\n\r\n# handles all messages for which the lambda returns true\r\n@bot.message_handler(func=lambda message: message.document.mime_type == 'text/plain', content_types=['document'])\r\ndef handle_text_doc(message):\r\n\tpass\r\n\r\n# which could also be defined as:\r\ndef test_message(message):\r\n\treturn message.document.mime_type == 'text/plain'\r\n\r\n@bot.message_handler(func=test_message, content_types=['document'])\r\ndef handle_text_doc(message):\r\n\tpass\r\n\r\n# handlers can be stacked to create a function which will be called if either message_handler is eligible\r\n# this handler will be called if the message starts with '/hello' or is some emoji\r\n@bot.message_handler(commands=['hello'])\r\n@bot.message_handler(func=lambda msg: msg.text.encode(\"utf-8\") == some_fancy_emoji)\r\ndef send_something(message):\r\n    pass\r\n```\r\n**important: all handlers are tested in the order in which they were declared**\r\n\r\n#### edited message handler\r\nhandle edited messages\r\n`@bot.edited_message_handler(filters) # <- passes a message type object to your function`\r\n\r\n#### channel post handler\r\nhandle channel post messages\r\n`@bot.channel_post_handler(filters) # <- passes a message type object to your function`\r\n\r\n#### edited channel post handler\r\nhandle edited channel post messages\r\n`@bot.edited_channel_post_handler(filters) # <- passes a message type object to your function`\r\n\r\n#### callback query handler\r\nhandle callback queries\r\n```python\r\n@bot.callback_query_handler(func=lambda call: true)\r\ndef test_callback(call): # <- passes a callbackquery type object to your function\r\n    logger.info(call)\r\n```\r\n\r\n#### shipping query handler\r\nhandle shipping queries\r\n`@bot.shipping_query_handler() # <- passes a shippingquery type object to your function`\r\n\r\n#### pre checkout query handler\r\nhandle pre checkoupt queries\r\n`@bot.pre_checkout_query_handler() # <- passes a precheckoutquery type object to your function`\r\n\r\n#### poll handler\r\nhandle poll updates\r\n`@bot.poll_handler() # <- passes a poll type object to your function`\r\n\r\n#### poll answer handler\r\nhandle poll answers\r\n`@bot.poll_answer_handler() # <- passes a pollanswer type object to your function`\r\n\r\n#### my chat member handler\r\nhandle updates of a the bot's member status in a chat\r\n`@bot.my_chat_member_handler() # <- passes a chatmemberupdated type object to your function`\r\n\r\n#### chat member handler\r\nhandle updates of a chat member's status in a chat\r\n`@bot.chat_member_handler() # <- passes a chatmemberupdated type object to your function`\r\n*note: \"chat_member\" updates are not requested by default. if you want to allow all update types, set `allowed_updates` in `bot.polling()` / `bot.infinity_polling()` to `util.update_types`*\r\n\r\n#### chat join request handler\t\r\nhandle chat join requests using:\r\n`@bot.chat_join_request_handler() # <- passes chatinvitelink type object to your function`\r\n\r\n### inline mode\r\n\r\nmore information about [inline mode](https://core.telegram.org/bots/inline).\r\n\r\n#### inline handler\r\n\r\nnow, you can use inline_handler to get inline queries in telebot.\r\n\r\n```python\r\n\r\n@bot.inline_handler(lambda query: query.query == 'text')\r\ndef query_text(inline_query):\r\n    # query message is text\r\n```\r\n\r\n#### chosen inline handler\r\n\r\nuse chosen_inline_handler to get chosen_inline_result in telebot. don't forgot add the /setinlinefeedback\r\ncommand for @botfather.\r\n\r\nmore information : [collecting-feedback](https://core.telegram.org/bots/inline#collecting-feedback)\r\n\r\n```python\r\n@bot.chosen_inline_handler(func=lambda chosen_inline_result: true)\r\ndef test_chosen(chosen_inline_result):\r\n    # process all chosen_inline_result.\r\n```\r\n\r\n#### answer inline query\r\n\r\n```python\r\n@bot.inline_handler(lambda query: query.query == 'text')\r\ndef query_text(inline_query):\r\n    try:\r\n        r = types.inlinequeryresultarticle('1', 'result', types.inputtextmessagecontent('result message.'))\r\n        r2 = types.inlinequeryresultarticle('2', 'result2', types.inputtextmessagecontent('result message2.'))\r\n        bot.answer_inline_query(inline_query.id, [r, r2])\r\n    except exception as e:\r\n        print(e)\r\n\r\n```\r\n\r\n### additional api features\r\n\r\n#### middleware handlers\r\n\r\na middleware handler is a function that allows you to modify requests or the bot context as they pass through the \r\ntelegram to the bot. you can imagine middleware as a chain of logic connection handled before any other handlers are\r\nexecuted. middleware processing is disabled by default, enable it by setting `apihelper.enable_middleware = true`. \r\n\r\n```python\r\napihelper.enable_middleware = true\r\n\r\n@bot.middleware_handler(update_types=['message'])\r\ndef modify_message(bot_instance, message):\r\n    # modifying the message before it reaches any other handler \r\n    message.another_text = message.text + ':changed'\r\n\r\n@bot.message_handler(commands=['start'])\r\ndef start(message):\r\n    # the message is already modified when it reaches message handler\r\n    assert message.another_text == message.text + ':changed'\r\n```\r\nthere are other examples using middleware handler in the [examples/middleware](examples/middleware) directory.\r\n\r\n#### class-based middlewares\r\nthere are class-based middlewares. \r\nbasic class-based middleware looks like this:\r\n```python\r\nclass middleware(basemiddleware):\r\n    def __init__(self):\r\n        self.update_types = ['message']\r\n    def pre_process(self, message, data):\r\n        data['foo'] = 'hello' # just for example\r\n        # we edited the data. now, this data is passed to handler.\r\n        # return skiphandler() -> this will skip handler\r\n        # return cancelupdate() -> this will cancel update\r\n    def post_process(self, message, data, exception=none):\r\n        print(data['foo'])\r\n        if exception: # check for exception\r\n            print(exception)\r\n```\r\nclass-based middleware should have two functions: post and pre process.\r\nso, as you can see, class-based middlewares work before and after handler execution.\r\nfor more, check out in [examples](https://github.com/eternnoir/pytelegrambotapi/tree/master/examples/middleware/class_based)\t\r\n\t\r\n#### custom filters\r\nalso, you can use built-in custom filters. or, you can create your own filter.\t\r\n\r\n[example of custom filter](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/custom_filters/general_custom_filters.py)\r\n\t\r\nalso, we have examples on them. check this links:\r\n\t\r\nyou can check some built-in filters in source [code](https://github.com/eternnoir/pytelegrambotapi/blob/master/telebot/custom_filters.py)\r\n\t\r\nexample of [filtering by id](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/custom_filters/id_filter_example.py)\r\n\t\r\nexample of [filtering by text](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/custom_filters/text_filter_example.py)\r\n\t\r\nif you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\r\n\t\r\nhere is example of creating filter-class:\r\n\t\r\n```python\r\nclass isadmin(telebot.custom_filters.simplecustomfilter):\r\n    # class will check whether the user is admin or creator in group or not\r\n    key='is_chat_admin'\r\n    @staticmethod\r\n    def check(message: telebot.types.message):\r\n        return bot.get_chat_member(message.chat.id,message.from_user.id).status in ['administrator','creator']\r\n\t\r\n# to register filter, you need to use method add_custom_filter.\r\nbot.add_custom_filter(isadmin())\r\n\t\r\n# now, you can use it in handler.\r\n@bot.message_handler(is_chat_admin=true)\r\ndef admin_of_group(message):\r\n\tbot.send_message(message.chat.id, 'you are admin of this group!')\r\n\r\n```\r\n\t\r\n\r\n#### telebot\r\n```python\r\nimport telebot\r\n\r\ntoken = '<token_string>'\r\ntb = telebot.telebot(token)\t#create a new telegram bot object\r\n\r\n# upon calling this function, telebot starts polling the telegram servers for new messages.\r\n# - interval: int (default 0) - the interval between polling requests\r\n# - timeout: integer (default 20) - timeout in seconds for long polling.\r\n# - allowed_updates: list of strings (default none) - list of update types to request \r\ntb.infinity_polling(interval=0, timeout=20)\r\n\r\n# getme\r\nuser = tb.get_me()\r\n\r\n# setwebhook\r\ntb.set_webhook(url=\"http://example.com\", certificate=open('mycert.pem'))\r\n# unset webhook\r\ntb.remove_webhook()\r\n\r\n# getupdates\r\nupdates = tb.get_updates()\r\n# or\r\nupdates = tb.get_updates(1234,100,20) #get_updates(offset, limit, timeout):\r\n\r\n# sendmessage\r\ntb.send_message(chat_id, text)\r\n\r\n# editmessagetext\r\ntb.edit_message_text(new_text, chat_id, message_id)\r\n\r\n# forwardmessage\r\ntb.forward_message(to_chat_id, from_chat_id, message_id)\r\n\r\n# all send_xyz functions which can take a file as an argument, can also take a file_id instead of a file.\r\n# sendphoto\r\nphoto = open('/tmp/photo.png', 'rb')\r\ntb.send_photo(chat_id, photo)\r\ntb.send_photo(chat_id, \"fileid\")\r\n\r\n# sendaudio\r\naudio = open('/tmp/audio.mp3', 'rb')\r\ntb.send_audio(chat_id, audio)\r\ntb.send_audio(chat_id, \"fileid\")\r\n\r\n## sendaudio with duration, performer and title.\r\ntb.send_audio(chat_id, file_data, 1, 'eternnoir', 'pytelegram')\r\n\r\n# sendvoice\r\nvoice = open('/tmp/voice.ogg', 'rb')\r\ntb.send_voice(chat_id, voice)\r\ntb.send_voice(chat_id, \"fileid\")\r\n\r\n# senddocument\r\ndoc = open('/tmp/file.txt', 'rb')\r\ntb.send_document(chat_id, doc)\r\ntb.send_document(chat_id, \"fileid\")\r\n\r\n# sendsticker\r\nsti = open('/tmp/sti.webp', 'rb')\r\ntb.send_sticker(chat_id, sti)\r\ntb.send_sticker(chat_id, \"fileid\")\r\n\r\n# sendvideo\r\nvideo = open('/tmp/video.mp4', 'rb')\r\ntb.send_video(chat_id, video)\r\ntb.send_video(chat_id, \"fileid\")\r\n\r\n# sendvideonote\r\nvideonote = open('/tmp/videonote.mp4', 'rb')\r\ntb.send_video_note(chat_id, videonote)\r\ntb.send_video_note(chat_id, \"fileid\")\r\n\r\n# sendlocation\r\ntb.send_location(chat_id, lat, lon)\r\n\r\n# sendchataction\r\n# action_string can be one of the following strings: 'typing', 'upload_photo', 'record_video', 'upload_video',\r\n# 'record_audio', 'upload_audio', 'upload_document' or 'find_location'.\r\ntb.send_chat_action(chat_id, action_string)\r\n\r\n# getfile\r\n# downloading a file is straightforward\r\n# returns a file object\r\nimport requests\r\nfile_info = tb.get_file(file_id)\r\n\r\nfile = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(api_token, file_info.file_path))\r\n\r\n\r\n```\r\n#### reply markup\r\nall `send_xyz` functions of telebot take an optional `reply_markup` argument. this argument must be an instance of `replykeyboardmarkup`, `replykeyboardremove` or `forcereply`, which are defined in types.py.\r\n\r\n```python\r\nfrom telebot import types\r\n\r\n# using the replykeyboardmarkup class\r\n# it's constructor can take the following optional arguments:\r\n# - resize_keyboard: true/false (default false)\r\n# - one_time_keyboard: true/false (default false)\r\n# - selective: true/false (default false)\r\n# - row_width: integer (default 3)\r\n# row_width is used in combination with the add() function.\r\n# it defines how many buttons are fit on each row before continuing on the next row.\r\nmarkup = types.replykeyboardmarkup(row_width=2)\r\nitembtn1 = types.keyboardbutton('a')\r\nitembtn2 = types.keyboardbutton('v')\r\nitembtn3 = types.keyboardbutton('d')\r\nmarkup.add(itembtn1, itembtn2, itembtn3)\r\ntb.send_message(chat_id, \"choose one letter:\", reply_markup=markup)\r\n\r\n# or add keyboardbutton one row at a time:\r\nmarkup = types.replykeyboardmarkup()\r\nitembtna = types.keyboardbutton('a')\r\nitembtnv = types.keyboardbutton('v')\r\nitembtnc = types.keyboardbutton('c')\r\nitembtnd = types.keyboardbutton('d')\r\nitembtne = types.keyboardbutton('e')\r\nmarkup.row(itembtna, itembtnv)\r\nmarkup.row(itembtnc, itembtnd, itembtne)\r\ntb.send_message(chat_id, \"choose one letter:\", reply_markup=markup)\r\n```\r\nthe last example yields this result:\r\n\r\n![replykeyboardmarkup](https://farm3.staticflickr.com/2933/32418726704_9ef76093cf_o_d.jpg \"replykeyboardmarkup\")\r\n\r\n```python\r\n# replykeyboardremove: hides a previously sent replykeyboardmarkup\r\n# takes an optional selective argument (true/false, default false)\r\nmarkup = types.replykeyboardremove(selective=false)\r\ntb.send_message(chat_id, message, reply_markup=markup)\r\n```\r\n\r\n```python\r\n# forcereply: forces a user to reply to a message\r\n# takes an optional selective argument (true/false, default false)\r\nmarkup = types.forcereply(selective=false)\r\ntb.send_message(chat_id, \"send me another word:\", reply_markup=markup)\r\n```\r\nforcereply:\r\n\r\n![forcereply](https://farm4.staticflickr.com/3809/32418726814_d1baec0fc2_o_d.jpg \"forcereply\")\r\n\r\n\r\n### working with entities\r\nthis object represents one special entity in a text message. for example, hashtags, usernames, urls, etc.\r\nattributes:\r\n* `type`\r\n* `url`\r\n* `offset`\r\n* `length`\r\n* `user`\r\n\r\n\r\n**here's an example:**`message.entities[num].<attribute>`<br>\r\nhere `num` is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.<br>\r\n`message.entities` returns a list of entities object. <br>\r\n`message.entities[0].type` would give the type of the first entity<br>\r\nrefer [bot api](https://core.telegram.org/bots/api#messageentity) for extra details\r\n\r\n## advanced use of the api\r\n\r\n### using local bot api sever\r\nsince version 5.0 of the bot api, you have the possibility to run your own [local bot api server](https://core.telegram.org/bots/api#using-a-local-bot-api-server).\r\npytelegrambotapi also supports this feature.\r\n```python\r\nfrom telebot import apihelper\r\n\r\napihelper.api_url = \"http://localhost:4200/bot{0}/{1}\"\r\n```\r\n**important: like described [here](https://core.telegram.org/bots/api#logout), you have to log out your bot from the telegram server before switching to your local api server. in pytelegrambotapi use `bot.log_out()`**\r\n\r\n*note: 4200 is an example port*\r\n\r\n### asynchronous telebot\r\nnew: there is an asynchronous implementation of telebot.\r\nto enable this behaviour, create an instance of asynctelebot instead of telebot.\r\n```python\r\ntb = telebot.asynctelebot(\"token\")\r\n```\r\nnow, every function that calls the telegram api is executed in a separate asynchronous task.\r\nusing asynctelebot allows you to do the following:\r\n```python\r\nimport telebot\r\n\r\ntb = telebot.asynctelebot(\"token\")\r\n\r\n@tb.message_handler(commands=['start'])\r\nasync def start_message(message):\r\n\tawait bot.send_message(message.chat.id, 'hello!')\r\n\r\n```\r\n\r\nsee more in [examples](https://github.com/eternnoir/pytelegrambotapi/tree/master/examples/asynchronous_telebot)\r\n\r\n### sending large text messages\r\nsometimes you must send messages that exceed 5000 characters. the telegram api can not handle that many characters in one request, so we need to split the message in multiples. here is how to do that using the api:\r\n```python\r\nfrom telebot import util\r\nlarge_text = open(\"large_text.txt\", \"rb\").read()\r\n\r\n# split the text each 3000 characters.\r\n# split_string returns a list with the splitted text.\r\nsplitted_text = util.split_string(large_text, 3000)\r\n\r\nfor text in splitted_text:\r\n\ttb.send_message(chat_id, text)\r\n```\r\n\r\nor you can use the new `smart_split` function to get more meaningful substrings:\r\n```python\r\nfrom telebot import util\r\nlarge_text = open(\"large_text.txt\", \"rb\").read()\r\n# splits one string into multiple strings, with a maximum amount of `chars_per_string` (max. 4096)\r\n# splits by last '\\n', '. ' or ' ' in exactly this priority.\r\n# smart_split returns a list with the splitted text.\r\nsplitted_text = util.smart_split(large_text, chars_per_string=3000)\r\nfor text in splitted_text:\r\n\ttb.send_message(chat_id, text)\r\n```\r\n### controlling the amount of threads used by telebot\r\nthe telebot constructor takes the following optional arguments:\r\n\r\n - threaded: true/false (default true). a flag to indicate whether\r\n   telebot should execute message handlers on it's polling thread.\r\n\r\n### the listener mechanism\r\nas an alternative to the message handlers, one can also register a function as a listener to telebot.\r\n\r\nnotice: handlers won't disappear! your message will be processed both by handlers and listeners. also, it's impossible to predict which will work at first because of threading. if you use threaded=false, custom listeners will work earlier, after them handlers will be called. \r\nexample:\r\n```python\r\ndef handle_messages(messages):\r\n\tfor message in messages:\r\n\t\t# do something with the message\r\n\t\tbot.reply_to(message, 'hi')\r\n\r\nbot.set_update_listener(handle_messages)\r\nbot.infinity_polling()\r\n```\r\n\r\n### using web hooks\r\nwhen using webhooks telegram sends one update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\r\n\r\nthere are some examples using webhooks in the [examples/webhook_examples](examples/webhook_examples) directory.\r\n\r\n### logging\r\nyou can use the telebot module logger to log debug info about telebot. use `telebot.logger` to get the logger of the telebot module.\r\nit is possible to add custom logging handlers to the logger. refer to the [python logging module page](https://docs.python.org/2/library/logging.html) for more info.\r\n\r\n```python\r\nimport logging\r\n\r\nlogger = telebot.logger\r\ntelebot.logger.setlevel(logging.debug) # outputs debug messages to console.\r\n```\r\n\r\n### proxy\r\nfor sync:\r\n\r\nyou can use proxy for request. `apihelper.proxy` object will use by call `requests` proxies argument.\r\n\r\n```python\r\nfrom telebot import apihelper\r\n\r\napihelper.proxy = {'http':'http://127.0.0.1:3128'}\r\n```\r\n\r\nif you want to use socket5 proxy you need install dependency `pip install requests[socks]` and make sure, that you have the latest version of `gunicorn`, `pysocks`, `pytelegrambotapi`, `requests` and `urllib3`.\r\n\r\n```python\r\napihelper.proxy = {'https':'socks5://userproxy:password@proxy_address:port'}\r\n```\r\n\r\nfor async:\r\n```python\r\nfrom telebot import asyncio_helper\r\n\r\nasyncio_helper.proxy = 'http://127.0.0.1:3128' #url\r\n```\r\n\r\n\r\n### testing\r\nyou can disable or change the interaction with real telegram server by using\r\n```python\r\napihelper.custom_request_sender = your_handler\r\n```\r\nparameter. you can pass there your own function that will be called instead of _requests.request_.\r\n\r\nfor example:\r\n```python\r\ndef custom_sender(method, url, **kwargs):\r\n    print(\"custom_sender. method: {}, url: {}, params: {}\".format(method, url, kwargs.get(\"params\")))\r\n    result = util.customrequestresponse('{\"ok\":true,\"result\":{\"message_id\": 1, \"date\": 1, \"chat\": {\"id\": 1, \"type\": \"private\"}}}')\r\n    return result\r\n```\r\n\r\nthen you can use api and proceed requests in your handler code.\r\n```python\r\napihelper.custom_request_sender = custom_sender\r\ntb = telebot(\"test\")\r\nres = tb.send_message(123, \"test\")\r\n```\r\n\r\nresult will be:\r\n\r\n`custom_sender. method: post, url: https://api.telegram.org/botololo/sendmessage, params: {'chat_id': '123', 'text': 'test'}`\r\n\r\n\r\n\r\n## api conformance limitations\r\n* \u2795 [bot api 4.5](https://core.telegram.org/bots/api-changelog#december-31-2019) - no nested messageentities and markdown2 support\r\n* \u2795 [bot api 4.1](https://core.telegram.org/bots/api-changelog#august-27-2018)   - no passport support\r\n* \u2795 [bot api 4.0](https://core.telegram.org/bots/api-changelog#july-26-2018)     - no passport support\r\n\r\n\r\n## asynctelebot\r\n### asynchronous version of telebot\r\nwe have a fully asynchronous version of telebot.\r\nthis class is not controlled by threads. asyncio tasks are created to execute all the stuff.\r\n\r\n### echobot\r\necho bot example on asynctelebot:\r\n\t\r\n```python\r\n# this is a simple echo bot using the decorator mechanism.\r\n# it echoes any incoming text messages.\r\n\r\nfrom telebot.async_telebot import asynctelebot\r\nimport asyncio\r\nbot = asynctelebot('token')\r\n\r\n\r\n\r\n# handle '/start' and '/help'\r\n@bot.message_handler(commands=['help', 'start'])\r\nasync def send_welcome(message):\r\n    await bot.reply_to(message, \"\"\"\\\r\nhi there, i am echobot.\r\ni am here to echo your kind words back to you. just say anything nice and i'll say the exact same thing to you!\\\r\n\"\"\")\r\n\r\n\r\n# handle all other messages with content_type 'text' (content_types defaults to ['text'])\r\n@bot.message_handler(func=lambda message: true)\r\nasync def echo_message(message):\r\n    await bot.reply_to(message, message.text)\r\n\r\n\r\nasyncio.run(bot.polling())\r\n```\r\nas you can see here, keywords are await and async. \r\n\t\r\n### why should i use async?\r\nasynchronous tasks depend on processor performance. many asynchronous tasks can run parallelly, while thread tasks will block each other.\r\n\r\n### differences in asynctelebot\r\nasynctelebot is asynchronous. it uses aiohttp instead of requests module.\r\n\t\r\n### examples\r\nsee more examples in our [examples](https://github.com/eternnoir/pytelegrambotapi/tree/master/examples/asynchronous_telebot) folder\r\n\t\r\n\r\n## f.a.q.\r\n\r\n### how can i distinguish a user and a groupchat in message.chat?\r\ntelegram bot api support new type chat for message.chat.\r\n\r\n- check the ```type``` attribute in ```chat``` object:\r\n```python\r\nif message.chat.type == \"private\":\r\n    # private chat message\r\n\r\nif message.chat.type == \"group\":\r\n\t# group chat message\r\n\r\nif message.chat.type == \"supergroup\":\r\n\t# supergroup chat message\r\n\r\nif message.chat.type == \"channel\":\r\n\t# channel message\r\n\r\n```\r\n\r\n### how can i handle reocurring connectionreseterrors?\r\n\r\nbot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. add `apihelper.session_time_to_live = 5 * 60` to your initialisation to force recreation after 5 minutes without any activity. \r\n\r\n## the telegram chat group\r\n\r\nget help. discuss. chat.\r\n\r\n* join the [pytelegrambotapi telegram chat group](https://telegram.me/joinchat/bn4ixj84fizvkwhk2jag6a)\r\n\t\r\n## telegram channel\r\n\r\njoin the [news channel](https://t.me/pytelegrambotapi). here we will post releases and updates.\r\n\t\r\n## more examples\r\n\r\n* [echo bot](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/echo_bot.py)\r\n* [deep linking](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/deep_linking.py)\r\n* [next_step_handler example](https://github.com/eternnoir/pytelegrambotapi/blob/master/examples/step_example.py)\r\n\r\n## code template\r\ntemplate is a ready folder that contains architecture of basic project.\r\nhere are some examples of template:\r\n\t\r\n* [asynctelebot template](https://github.com/coder2020official/asynctelebot_template)\r\n* [telebot template](https://github.com/coder2020official/telebot_template)\r\n\t\r\n\t\r\n## bots using this library\r\n* [sitealert bot](https://telegram.me/sitealert_bot) ([source](https://github.com/ilteoood/sitealert-python)) by *ilteoood* - monitors websites and sends a notification on changes\r\n* [telegramloggingbot](https://github.com/arandomstranger/telegramloggingbot) by *arandomstranger*\r\n* [telegram lmgtfy_bot](https://github.com/gabrielrf/telegram-lmgtfy_bot) by *gabrielrf* - let me google that for you.\r\n* [telegram proxy bot](https://github.com/mrgigabyte/proxybot) by *mrgigabyte* \r\n* [radretrorobot](https://github.com/tronikart/radretrorobot) by *tronikart* - multifunctional telegram bot radretrorobot.\r\n* [league of legends bot](https://telegram.me/league_of_legends_bot) ([source](https://github.com/i32ropie/lol)) by *i32ropie*\r\n* [neobot](https://github.com/neoranger/neobot) by [@neoranger](https://github.com/neoranger)\r\n* [colorcodebot](https://t.me/colorcodebot) ([source](https://github.com/andydecleyre/colorcodebot)) - share code snippets as beautifully syntax-highlighted html and/or images.\r\n* [comedoresugrbot](http://telegram.me/comedoresugrbot) ([source](https://github.com/alejandrocq/comedoresugrbot)) by [*alejandrocq*](https://github.com/alejandrocq) - telegram bot to check the menu of universidad de granada dining hall.\r\n* [proxybot](https://github.com/p-hash/proxybot) - simple proxy bot for telegram. by p-hash\r\n* [donantesmalagabot](https://github.com/vfranch/donantesmalagabot) - donantesmalagabot facilitates information to malaga blood donors about the places where they can donate today or in the incoming days. it also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\r\n* [duttybot](https://github.com/dmytryistriletskyi/duttybot) by *dmytryi striletskyi* - timetable for one university in kiev.\r\n* [wat-bridge](https://github.com/rmed/wat-bridge) by [*rmed*](https://github.com/rmed) - send and receive messages to/from whatsapp through telegram\r\n* [filmratingbot](http://t.me/filmratingbot)([source](https://github.com/jcolladosp/film-rating-bot)) by [*jcolladosp*](https://github.com/jcolladosp) - telegram bot using the python api that gets films rating from imdb and metacritic\r\n* [send2kindlebot](http://t.me/send2kindlebot) ([source](https://github.com/gabrielrf/send2kindlebot)) by *gabrielrf* - send to kindle service.\r\n* [rastreiobot](http://t.me/rastreiobot) ([source](https://github.com/gabrielrf/rastreiobot)) by *gabrielrf* - bot used to track packages on the brazilian mail service.\r\n* [spbu4ubot](http://t.me/spbu4ubot)([link](https://github.com/eeonedown/spbu4u)) by *eeonedown* - bot with timetables for spbu students.\r\n* [smartysbot](http://t.me/zdu_bot)([link](https://github.com/0xvk/smartysbot)) by *0xvk* - telegram timetable bot, for zhytomyr ivan franko state university students.\r\n* [learnit](https://t.me/learnitbot)([link](https://github.com/tiagonapoli/learnit)) - a telegram bot created to help people to memorize other languages\u2019 vocabulary.\r\n* [bot-telegram-shodan ](https://github.com/rubenleon/bot-telegram-shodan) by [rubenleon](https://github.com/rubenleon)\r\n* [vigobustelegrambot](https://t.me/vigobusbot) ([github](https://github.com/pythoneiro/vigobus-telegrambot)) - bot that provides buses coming to a certain stop and their remaining time for the city of vigo (galicia - spain)\r\n* [kaishnik-bot](https://t.me/kaishnik_bot) ([source](https://github.com/airatk/kaishnik-bot)) by *airatk* - bot which shows all the necessary information to kntru-kai students.\r\n* [robbie](https://t.me/romdeliverybot) ([source](https://github.com/facum/romdeliverybot_support)) by @facum - support telegram bot for developers and maintainers.\r\n* [asadovbot](https://t.me/asadov_bot) ([source](https://github.com/desexcile/botapi)) by @desexcile - \u0441atalog of poems by eduard asadov.\r\n* [thesaurus_com_bot](https://t.me/thesaurus_com_bot) ([source](https://github.com/leosvalov/words-i-learn-bot)) by @leosvalov - words and synonyms from [dictionary.com](https://www.dictionary.com) and [thesaurus.com](https://www.thesaurus.com) in the telegram.\r\n* [infobot](https://t.me/info2019_bot) ([source](https://github.com/irevenko/info-bot)) by @irevenko - an all-round bot that displays some statistics (weather, time, crypto etc...)\r\n* [foodbot](https://t.me/chensonuz_bot) ([source](https://github.com/fliego/old_restaurant_telegram_chatbot)) by @fliego - a simple bot for food ordering\r\n* [sporty](https://t.me/sportydbot) ([source](https://github.com/0xnu/sporty)) by @0xnu - telegram bot for displaying the latest news, sports schedules and injury updates.\r\n* [joingroup silencer bot](https://t.me/joingroup_silencer_bot) ([source](https://github.com/zeph1997/telegram-group-silencer-bot)) by [@zeph1997](https://github.com/zeph1997) - a telegram bot to remove \"join group\" and \"removed from group\" notifications.\r\n* [taskslistsbot](https://t.me/taskslistsbot) ([source](https://github.com/pablo-davila/taskslistsbot)) by [@pablo-davila](https://github.com/pablo-davila) - a (tasks) lists manager bot for telegram.\r\n* [myelizapsychologistbot](https://t.me/taskslistsbot) ([source](https://github.com/pablo-davila/myelizapsychologistbot)) by [@pablo-davila](https://github.com/pablo-davila) - an implementation of the famous eliza psychologist chatbot.\r\n* [frcstbot](https://t.me/frcstbot) ([source](https://github.com/mrsqd/frcstbot_public)) by [mrsqd](https://github.com/mrsqd). a telegram bot that will always be happy to show you the weather forecast.\r\n* [minegrambot](https://github.com/modischfabrications/minegrambot) by [modischfabrications](https://github.com/modischfabrications). this bot can start, stop and monitor a minecraft server.\r\n* [tabletop dicebot](https://github.com/dexpiper/tabletopdicebot) by [dexpiper](https://github.com/dexpiper). this bot can roll multiple dices for rpg-like games, add positive and negative modifiers and show short descriptions to the rolls.\r\n* [barnamekon](https://t.me/barnamekonbot) by [anvaari](https://github.com/anvaari). this bot make \"add to google calendar\" link for your events. it give information about event and return link. it work for jalali calendar and in tehran time. [source code](https://github.com/anvaari/barnamekon)\r\n* [translator bot](https://github.com/areeg94fahad/translate_text_bot) by areeg fahad. this bot can be used to translate texts. \r\n* [digital cryptocurrency bot](https://github.com/areeg94fahad/currencies_bot) by areeg fahad. with this bot, you can now monitor the prices of more than 12 digital cryptocurrency. \r\n* [anti-tracking bot](https://t.me/antitrackingbot) by leon heess [(source)](https://github.com/leonheess/antitrackingbot). send any link, and the bot tries its best to remove all tracking from the link you sent.\r\n* [developer bot](https://t.me/inddeveloper_bot) by [vishal singh](https://github.com/vishal2376) [(source code)](https://github.com/vishal2376/telegram-bot) this telegram bot can do tasks like github search & clone,provide c++ learning resources ,stackoverflow search, codeforces(profile visualizer,random problems)\r\n* [oneipo bot](https://github.com/aaditya2200/ipo-proj) by [aadithya](https://github.com/aaditya2200) & [amol soans](https://github.com/amoldericksoans) this telegram bot provides live updates , data and documents on current and upcoming ipos(initial public offerings) \r\n* [coronagraphsbot](https://t.me/covidgraph_bot) ([source](https://github.com/trevorwinstral/coronagraphsbot)) by *trevorwinstral* - gets live covid country data, plots it, and briefs the user\r\n* [ethlecturebot](https://t.me/ethlecturebot) ([source](https://github.com/trevorwinstral/ethlecturebot)) by *trevorwinstral* - notifies eth students when their lectures have been uploaded\r\n* [vlun finder bot](https://github.com/resinprotein2333/vlun-finder-bot) by [resinprotein2333](https://github.com/resinprotein2333). this bot can help you to find the information of cve vulnerabilities.\r\n* [ethgasfeetrackerbot](https://t.me/ethgasfeetrackerbot) ([source](https://github.com/devadvik/ethgasfeetrackerbot]) by *devadvik* - get live ethereum gas fees in gwei\r\n* [google sheet bot](https://github.com/joachimstanislaus/tele_sheet_bot) by [joachimstanislaus](https://github.com/joachimstanislaus). this bot can help you to track your expenses by uploading your bot entries to your google sheet.\r\n* [grandquiz bot](https://github.com/carlosma7/tfm-grandquiz) by [carlosma7](https://github.com/carlosma7). this bot is a trivia game that allows you to play with people from different ages. this project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\r\n* [diccionario de la rae](https://t.me/dleraebot) ([source](https://github.com/studentenherz/dleraebot)) this bot lets you find difinitions of words in spanish using [rae's dictionary](https://dle.rae.es/). it features direct message and inline search.\r\n* [remotetelegramshell](https://github.com/enriquemoran/remotetelegramshell) by [enriquemoran](https://github.com/enriquemoran). control your linuxos computer through telegram.\r\n* [commerce telegram bot](https://github.com/ayitinya/commerce-telegram-bot/). make purchases of items in a store with an admin panel for data control and notifications.\r\n* [pyfram-telegram-bot](https://github.com/skelly37/pyfram-telegram-bot) query wolframalpha.com and make use of its api through telegram.\r\n* [translatethisvideobot](https://gitlab.com/wuerfeldev/translatethisvideo) this bot can understand spoken text in videos and translate it to english\r\n* [zyprexa](https://t.me/mathemathicsbot) ([source](https://github.com/atif5/zyprexa)) zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using latex.\r\n* [bincode-telegram-bot](https://github.com/tusharhero/bincode-telegram-bot) by [tusharhero](https://github.com/tusharhero) - makes [bincodes](https://github.com/tusharhero/bincode) from text provides and also converts them back to text.\r\n* [hydrolib_bot](https://github.com/mayson90/hydrolib_bot) toolset for hydrophilia tabletop game (game cards, rules, structure...).\r\n* [gugumoe-bot](http://t.me/gugumoe_bot) ([source](https://github.com/googujiang/gugumoe-bot)) by [\u5495\u8c37\u9171](https://gmoe.cc) guxiaojiang is a multi-functional robot, such as osu game information query, ip test, animation screenshot search and other functions.\r\n* [feedback-bot](https://github.com/coder2020official/feedbackbot) a feedback bot for user-admin communication. made on asynctelebot, using [template](https://github.com/coder2020official/asynctelebot_template).\r\n* [teleserv](https://github.com/ablakely/teleserv) by [ablakely](https://github.com/ablakely) this is a telegram to irc bridge which links as an irc server and makes telegram users appear as native irc users.\r\n* [simple store bot](https://github.com/antonglyzin/myshopbot) by [anton glyzin](https://github.com/antonglyzin) this is a simple telegram-store with an admin panel. designed according to a template.\r\n* [media rating bot](https://t.me/mediaratingbot) ([source](https://github.com/commandercrm/mediaratingbot))by [commandercrm](https://github.com/commandercrm). this bot aggregates media (movies, tv series, etc.) ratings from imdb, rotten tomatoes, metacritic, themoviedb, filmaffinity and also provides number of votes of said media on imdb. \r\n* [spot seek bot](https://t.me/spotseekbot) ([source](https://github.com/arashnm80/spot-seek-bot)) by [arashnm80](https://github.com/arashnm80). this is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\r\n* [calendarit bot](https://t.me/calendarit_bot) ([source](https://github.com/codebyzen/calendarit_telegram_bot))by [codebyzen](https://github.com/codebyzen). a simple, but extensible python telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel. \r\n* [downloadmusicbot](https://github.com/fcoagz/downloadmusicbot) by *francisco griman* - it is a simple bot that downloads audio from youtube videos on telegram.\r\n* [awesomechatgptbot](https://github.com/kourva/awesomechatgptbot) - simple chatgtp-3.5 bot. it is free and can remember chat history for a while with pre-defined roles!\r\n* [qr-code for you bot](https://t.me/qrcode_for_you_bot) ([source](https://github.com/arashnm80/qrcode-for-you-bot)) by [arashnm80](https://github.com/arashnm80). telegram qrcode generator bot created with pyhton and telebot.\r\n* [best instagram downloader bot](https://t.me/best_instagram_downloader_bot) ([source](https://github.com/arashnm80/best-instagram-downloader)) by [arashnm80](https://github.com/arashnm80). free and open source telegram bot to download posts and reels from instagram.\r\n* [personal bot for chatgpt & bard](https://github.com/simatwa/pytelegrambotapi.git) by [simatwa](https://github.com/simatwa/telegram-chatbots). chat with chatgpt & bard on the go.\r\n\r\n**want to have your bot listed here? just make a pull request. only bots with public source code are accepted.**\r\n",
  "docs_url": null,
  "keywords": "telegram bot api tools",
  "license": "gpl2",
  "name": "pytelegrambotapi",
  "package_url": "https://pypi.org/project/pyTelegramBotAPI/",
  "project_url": "https://pypi.org/project/pyTelegramBotAPI/",
  "project_urls": {
    "Homepage": "https://github.com/eternnoir/pyTelegramBotAPI"
  },
  "release_url": "https://pypi.org/project/pyTelegramBotAPI/4.14.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python telegram bot api.",
  "version": "4.14.1",
  "releases": [],
  "developers": [
    "eternnoir",
    "eternnoir@gmail.com"
  ],
  "kwds": "pytelegrambotapi telegrambot telegramloggingbot calendarit_telegram_bot pytelegram",
  "license_kwds": "gpl2",
  "libtype": "pypi",
  "id": "pypi_pytelegrambotapi",
  "homepage": "https://github.com/eternnoir/pytelegrambotapi",
  "release_count": 112,
  "dependency_ids": []
}
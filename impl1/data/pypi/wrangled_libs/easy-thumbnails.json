{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "===============\neasy thumbnails\n===============\n\n.. image:: https://img.shields.io/pypi/v/easy-thumbnails.svg\n    :target: https://pypi.python.org/pypi/easy-thumbnails/\n\n.. image:: https://github.com/smileychris/easy-thumbnails/actions/workflows/python.yml/badge.svg\n    :alt: build status\n    :target: https://github.com/smileychris/easy-thumbnails/actions/workflows/python.yml\n\n\na powerful, yet easy to implement thumbnailing application for django 2.2+\n\nbelow is a quick summary of usage. for more comprehensive information, view the\n`full documentation`__ online or the peruse the project's ``docs`` directory.\n\n__ http://easy-thumbnails.readthedocs.org/en/latest/index.html\n\n\nbreaking news\n=============\n\nversion 2.8.0 adds support for thumbnailing svg images when installed with the ``[svg]`` extra.\n\nof course it doesn't make sense to thumbnail svg images, because being in vector format they can\nscale to any size without quality of loss. however, users of easy-thumbnails may want to upload and\nuse svg images just as if they would be png, gif or jpeg. they don't necessarily care about the\nformat and definitely don't want to convert them to a pixel based format. what they want is to reuse\ntheir templates with the templatetag thumbnail and scale and crop the images to whatever their\n`<img src=\"...\" width=\"...\" height=\"...\">` has been prepared for.\n\nthis is done by adding an emulation layer named vil, which aims to be compatible with the\n`pil <https://python-pillow.org/>`_ library. all thumbnailing operations, such as scaling and\ncropping behave like pixel based images. the final filesize of such thumbnailed svg images doesn't\nof course change, but their width/height and bounding box may be adjusted to reflect the desired\nsize of the thumbnailed image.\n\n.. note:: this feature is new and experimental, hence feedback about its proper functioning in\n          third parts applications is highly appreciated.\n\n\ninstallation\n============\n\nrun ``pip install easy-thumbnails``.\n\nadd ``easy_thumbnails`` to your ``installed_apps`` setting:\n\n.. code-block:: python\n\n    installed_apps = (\n        ...\n        'easy_thumbnails',\n    )\n\nrun ``manage.py migrate easy_thumbnails``.\n\n\nexample usage\n=============\n\nthumbnail options can be predefined in ``settings.thumbnail_aliases`` or just\nspecified in the template or python code when run.\n\nusing a predefined alias\n------------------------\n\ngiven the following setting:\n\n.. code-block:: python\n\n    thumbnail_aliases = {\n        '': {\n            'avatar': {'size': (50, 50), 'crop': true},\n        },\n    }\n\ntemplate:\n\n.. code-block:: html+django\n\n    {% load thumbnail %}\n    <img src=\"{{ profile.photo|thumbnail_url:'avatar' }}\" alt=\"\" />\n\npython:\n\n.. code-block:: python\n\n    from easy_thumbnails.files import get_thumbnailer\n    thumb_url = get_thumbnailer(profile.photo)['avatar'].url\n\nmanually specifying size / options\n----------------------------------\n\ntemplate:\n\n.. code-block:: html+django\n\n    {% load thumbnail %}\n    <img src=\"{% thumbnail profile.photo 50x50 crop %}\" alt=\"\" />\n\npython:\n\n.. code-block:: python\n\n    from easy_thumbnails.files import get_thumbnailer\n    options = {'size': (100, 100), 'crop': true}\n    thumb_url = get_thumbnailer(profile.photo).get_thumbnail(options).url\n\nusing in combination with other thumbnailers\n--------------------------------------------\n\nalternatively, you load the templatetags by {% load easy_thumbnails_tags %} \ninstead of traditional {% load thumbnail %}. it's especially useful in \nprojects that do make use of multiple thumbnailer libraries that use the \nsame name (`thumbnail`) for the templatetag module:\n\n.. code-block:: html+django\n\n    {% load easy_thumbnails_tags %}\n    <img src=\"{% thumbnail profile.photo 50x50 crop %}\" alt=\"\" />\n\nfields\n======\n\nyou can use ``thumbnailerimagefield`` (or ``thumbnailerfield``) for easier\naccess to retrieve or generate thumbnail images.\n\nfor example:\n\n.. code-block:: python\n\n    from easy_thumbnails.fields import thumbnailerimagefield\n\n    class profile(models.model):\n        user = models.onetoonefield('auth.user')\n        photo = thumbnailerimagefield(upload_to='photos', blank=true)\n\naccessing the field's predefined alias in a template:\n\n.. code-block:: html+django\n\n    {% load thumbnail %}\n    <img src=\"{{ profile.photo.avatar.url }}\" alt=\"\" />\n\naccessing the field's predefined alias in python code:\n\n.. code-block:: python\n\n    thumb_url = profile.photo['avatar'].url\n\n\nthumbnail options\n=================\n\n``crop``\n--------\n\nbefore scaling the image down to fit within the ``size`` bounds, it first cuts\nthe edges of the image to match the requested aspect ratio.\n\nuse ``crop=\"smart\"`` to try to keep the most interesting part of the image,\n\nuse ``crop=\"0,10\"`` to crop from the left edge and a 10% offset from the\ntop edge. crop from a single edge by leaving dimension empty (e.g.\n``crop=\",0\"``). offset from the right / bottom by using negative numbers\n(e.g., crop=\"-0,-10\").\n\noften used with the ``upscale`` option, which will allow enlarging of the image\nduring scaling.\n\n``quality=xx``\n--------------\n\nchanges the quality of the output jpeg thumbnail. defaults to ``85``.\n\nin python code, this is given as a separate option to the ``get_thumbnail``\nmethod rather than just alter the other\n\nother options\n-------------\n\nvalid thumbnail options are determined by the \"thumbnail processors\" installed.\n\nsee the `reference documentation`__ for a complete list of options provided by\nthe default thumbnail processors.\n\n__ http://easy-thumbnails.readthedocs.org/en/latest/ref/processors/\n\n\nchanges\n=======\n\n2.8.5 (2023-01-09)\n------------------\n* fix regression introduced in version 2.8.4. argument ``quality`` is not removed for images\n  of type ``.webp``.\n\n\n2.8.4 (2022-12-19)\n------------------\n* fix problem when thumbnailing images of type tiff. pil's ``tiffimageplugin`` doesn't\n  like argument ``quality``.\n* replace deprecated pillow constants against newer counterparts. check\n  https://pillow.readthedocs.io/en/stable/releasenotes/9.1.0.html#deprecations for details.\n\n\n2.8.3 (2022-08-02)\n------------------\n* fix regression in library detection introduced  in version 2.8.2.\n\n\n2.8.2 (2022-07-31)\n------------------\n* installation of easy-thumbnails now optionally depends on the reportlab library.\n\n\n2.8.1 (2022-01-20)\n------------------\n\n* add support for django 4.\n* new ``thumbnail_image_save_options`` setting.\n* fix #587: uploading svg images to s3 storage.\n\n\n2.8.0 (2021-11-03)\n------------------\n\n* add support for thumbnailing svg images. this is done by adding an emulation layer named vil,\n  which aims to be compatible with pil. all thumbnailing operations, such as scaling and cropping\n  behave like pixel images.\n* remove configuration directives ``thumbnail_high_resolution`` and ``thumbnail_highres_infix``\n  from easy-thumbnails setting directives.\n\n\n2.7.2 (2021-10-17)\n------------------\n\n* add support for django 3.2 and python-3.10.\n* fix #563: do not close image after loading content.\n* in management command ``thumbnail_cleanup``, replace ``print``-statements\n  against ``stdout.write``.\n* use python format strings whereever possible.\n\n\n2.7.1 (2020-11-23)\n------------------\n\n* add support for django 3.1\n\n\n2.7.0 (2019-12-15)\n------------------\n\n* add support for django 3.0\n* drop support for python 2\n* drop support for django < 1.11\n* drop support for django 2.0, 2.1\n\n\n2.6.0 (2019-02-03)\n------------------\n\n* added testing for django 2.2 (no code changes required).\n\n\n2.5.0 (2017-10-31)\n------------------\n\n* support django versions up to 1.11. version 2.0 is in beta.\n\n* fix: pickle/unpickle machine. the thumbnailerfield fields no longer\n  generated thumbnails.\n\n* removed all references to south migrations.\n\n\n2.4.2 (2017-09-14)\n------------------\n\n* supported django versions are now 1.8 or 1.10+, python 2.7 minimum.\n\n* fix ioerror saving jpeg files with transparency on pillow 4.2+.\n\n* fix #450, #473: fixed int/string is not a callable in management command.\n\n* fix #456: delete method of thumbnailerfieldfile is called twice.\n\n\n2.4.1 (2017-04-05)\n------------------\n\n* new minimum requirement of django 1.4 or 1.7+.\n\n* fix exif orientation to use transpose.\n\n* upgrades to avoid deprecation warnings.\n\n* fix app settings not working in django 1.11.\n\n* fix a bad conditional check causing incorrect behaviour in autocropping\n  transparent images.\n\n* django 1.8+ compatibility for ``thumbnail_cleanup`` command.\n\n* add ``easy_thumbnails_tags`` template tag mirror to allow multiple\n  thumbnailer libraries to coexist happily.\n\n* limit pillow to its final compatible version when on python 2.6\n\n* fix tests.\n\n2.3 (2015-12-11)\n----------------\n\n* new ``alias`` namer.\n\n* avoid a potential concurrency issue with creating the cache.\n\n* fix incorrect use of select_related for source thumbnail model.\n\n* removed some vestigal processor arguments.\n\n* allow ``high_resolution`` argument on thumbnail template tag.\n\n* add logic to correctly handle thumbnail images on deferred models (e.g. when\n  using ``.only()``).\n\n* add a ``data_uri`` filter to allow rendering of an image inline as a data\n  uri.\n\n2.2.1 (2014-12-30)\n------------------\n\n* fixed: option ``zoom`` can also be used by itself, without combining it with\n  ``crop``.\n\n2.2 (2014-10-04)\n----------------\n\n* fix migrations for django 1.7 final.\n\n* fix contain bad image exifs being able to still raise an exception.\n\n2.1 (2014-08-13)\n----------------\n\n* fix python 3.4 installation issue.\n\n* avoid an overflowerror due to invalid exif data.\n\n* fix bug causing jpeg images to be saved without optimization :(\n\n* jpeg files can now be saved with progressive encoding. by default, any image\n  with a dimension larger than 100px will be saved progressively. configured\n  with the ``thumbnailer_progressive`` setting.\n\n2.0.1 (2014-04-26)\n------------------\n\n* fix packaging issue with old south migrations.\n\n2.0 (2014-04-25)\n----------------\n\n* use django 1.7 migrations. thanks trey hunner.\n  **note**: if using south, read the installation docs for required settings\n  changes.\n\n* make thumbnailerimagefield.resize_source reflect change in extension.\n\n* add ``target`` option to the scale_and_crop processor, allowing for image\n  focal points when cropping (or zooming) an image.\n\n* add a thumbnail_namer option which takes a function used to customize\n  the thumbnail filename.\n\n* new ``subsampling`` option to reduce color subsampling of jpeg images,\n  providing sharper color borders for a small increase in file size.\n\n* reimplementation of the ``thumbnail_cleanup`` command. thanks j\u00f8rgen\n  abrahamsen\n\n* more efficient thumbnail default storage. thanks sandip agarwal.\n\n1.5 (2014-03-05)\n----------------\n\n* better support for multiple source generators.\n\n* update method used to check for modification dates of source and thumbnail\n  images. thanks ben roberts.\n\n* better thumbnail_high_resolution handling, including the ability to switch on\n  and off explicitly with a ``high_resolution`` thumbnail option.\n\n* added configuration option to specify the infix used for high resolution\n  image handling.\n\n* optional postprocessor for image optimization. thanks jacob rief!\n\n* more remote storages optimization\n\n* thumbnail dimensions can now optionally be cached. thanks david novakovic.\n\n* new ``zoom`` option to generate a thumbnail of a source image with a\n  percentage clipped off each side.\n\n* new ``background`` source processor that can add a border color to ensure\n  scaled images fit within the exact dimensions given.\n\n1.4 (2013-09-23)\n----------------\n\n* considerable speed up for remote storages by reducing queries.\n  brent o'connor spent a lot of time debugging this, so thank you epicserve!\n\n* allow the ``{% thumbnail %}`` tag to also accept aliases. thanks simon meers!\n\n* make ``replace_alpha`` actually work correctly.\n\n* fixes exception being raised when image exists in cache but is doesn't\n  actually exist in the storage.\n\n* fixes python 2.5 compatibility.\n\n1.3 (2013-06-17)\n----------------\n\n* some more django 1.5 fixes.\n\n* fix an issue with ``thumbnail.url`` not working correctly.\n\n* add the ability to generate retina quality thumbnails in addition to the\n  standard ones (off by default).\n\n1.2 (2013-01-23)\n----------------\n\n* django 1.5 compatibility.\n\n* fixed a problem with the ``imageclearablefileinput`` widget.\n\n1.1 (2012-08-29)\n----------------\n\n* added a way to avoid generating thumbnails if they don't exist already (with\n  a signal to deal with them elsewhere).\n\n* added a ``thumbnailer_passive`` filter to allow templates to use the\n  non-generating thumbnails functionality when dealing with aliases.\n\n1.0.3 (2012-05-30)\n------------------\n\n* changed the exception to catch from 1.0.2 to ioerror.\n\n1.0.2 (2012-05-29)\n------------------\n\n* catch an oserror exception when trying to get the exif data of a touchy\n  image.\n\n1.0.1 (2012-05-23)\n------------------\n\n* fix a django 1.2 backwards incompatibility in ``easy_thumbnails.conf``\n\n* introduced a ``thumbnail_created`` signal.\n\n1.0 (2012-05-07)\n----------------\n\n* introduction of aliased thumbnails.\n\n* start of sane versioning numbers.\n",
  "docs_url": "https://pythonhosted.org/easy-thumbnails/",
  "keywords": "",
  "license": "",
  "name": "easy-thumbnails",
  "package_url": "https://pypi.org/project/easy-thumbnails/",
  "project_url": "https://pypi.org/project/easy-thumbnails/",
  "project_urls": {
    "Homepage": "http://github.com/SmileyChris/easy-thumbnails"
  },
  "release_url": "https://pypi.org/project/easy-thumbnails/2.8.5/",
  "requires_dist": [
    "django (>=2.2)",
    "pillow",
    "svglib ; extra == 'svg'",
    "reportlab ; extra == 'svg'"
  ],
  "requires_python": ">=3.6",
  "summary": "easy thumbnails for django",
  "version": "2.8.5",
  "releases": [],
  "developers": [
    "chris_beaven",
    "smileychris@gmail.com"
  ],
  "kwds": "easy_thumbnails thumbnailerfield thumbnailer thumbnailerimagefield get_thumbnailer",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_easy_thumbnails",
  "homepage": "http://github.com/smileychris/easy-thumbnails",
  "release_count": 50,
  "dependency_ids": [
    "pypi_django",
    "pypi_pillow",
    "pypi_reportlab",
    "pypi_svglib"
  ]
}
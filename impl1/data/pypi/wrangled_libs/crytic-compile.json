{
  "classifiers": [],
  "description": "# crytic-compile\n[![build status](https://img.shields.io/github/actions/workflow/status/crytic/crytic-compile/ci.yml?branch=master)](https://github.com/crytic/crytic-compile/actions?query=workflow%3aci)\n[![slack status](https://slack.empirehacking.nyc/badge.svg)](https://slack.empirehacking.nyc)\n[![pypi version](https://badge.fury.io/py/crytic-compile.svg)](https://badge.fury.io/py/crytic-compile)\n\nlibrary to help smart contract compilation. it includes support for:\n- direct solc compilation\n- [foundry](https://github.com/foundry-rs/foundry/)\n- [hardhat](https://github.com/nomiclabs/hardhat)\n- [brownie](https://github.com/iamdefinitelyahuman/brownie)\n- [buidler](https://github.com/nomiclabs/buidler)\n- [dapp](https://dapp.tools/dapp/)\n- [embark](https://embark.status.im/)\n- [etherlime](https://github.com/limechain/etherlime)\n- [etherscan](https://etherscan.io/) (including several alt-chain explorers and testnets)\n- [truffle](https://truffleframework.com/)\n- [waffle](https://github.com/ethworks/waffle)\n\nto force compilation with a specific framework, use the `--compile-force-framework` flag. for example, to force compilation with hardhat:\n\n```shell\ncrytic-compile . --compile-force-framework hardhat\n```\n\nsee the [configuration](https://github.com/crytic/crytic-compile/wiki/configuration) documentation for advanced usages.\n\nthe plugin is used in trail of bits tools, including:\n- [slither](https://github.com/crytic/slither)\n- [echidna](https://github.com/crytic/echidna)\n- [manticore](https://github.com/trailofbits/manticore/)\n- [evm-cfg-builder](https://github.com/crytic/evm_cfg_builder)\n\n\n## installation\n\n```shell\npip3 install crytic-compile\n```\n\n## usage\n\nin the root directory of your project e.g. same directory as `hardhat.config.js` or `foundry.toml`, run:\n\n```shell\ncrytic-compile .\n```\n\ncrytic-compile will generate `crytic-export/contracts.json` containing the ast/abi and bytecodes of the contracts.\n\nrun `crytic-compile --help` for more options.\n\n## library linking\n\nif your project uses [libraries](https://docs.soliditylang.org/en/latest/contracts.html#libraries) with external functions, they can be linked to their deployed address with the `--compile-libraries` flag. for example, if you have a library `safemath` deployed at `0xff`, you can link it with:\n\n\n```shell\ncrytic-compile . --compile-libraries \"(safemath, 0xff)\"\n```\n\nif you are fuzzing with echidna or medusa, follow this [tutorial on linking libraries](https://secure-contracts.com/program-analysis/echidna/advanced/working-with-libraries.html?highlight=library#linking-libraries).\n\n### as a library\n\nsee the [library documentation](https://github.com/crytic/crytic-compile/wiki/library-documentation).\n",
  "docs_url": null,
  "keywords": "",
  "license": "agpl-3.0",
  "name": "crytic-compile",
  "package_url": "https://pypi.org/project/crytic-compile/",
  "project_url": "https://pypi.org/project/crytic-compile/",
  "project_urls": {
    "Homepage": "https://github.com/crytic/crytic-compile"
  },
  "release_url": "https://pypi.org/project/crytic-compile/0.3.5/",
  "requires_dist": [
    "pycryptodome >=3.4.6",
    "cbor2",
    "solc-select >=v1.0.4",
    "toml >=0.10.2",
    "crytic-compile[doc,lint,test] ; extra == 'dev'",
    "pdoc ; extra == 'doc'",
    "black ==22.3.0 ; extra == 'lint'",
    "pylint ==2.13.4 ; extra == 'lint'",
    "mypy ==0.942 ; extra == 'lint'",
    "darglint ==1.8.0 ; extra == 'lint'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "util to facilitate smart contracts compilation.",
  "version": "0.3.5",
  "releases": [],
  "developers": [
    "trail_of_bits"
  ],
  "kwds": "crytic compilation compile solc slack",
  "license_kwds": "agpl-3.0",
  "libtype": "pypi",
  "id": "pypi_crytic_compile",
  "homepage": "https://github.com/crytic/crytic-compile",
  "release_count": 25,
  "dependency_ids": [
    "pypi_black",
    "pypi_cbor2",
    "pypi_crytic_compile",
    "pypi_darglint",
    "pypi_mypy",
    "pypi_pdoc",
    "pypi_pycryptodome",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_solc_select",
    "pypi_toml"
  ]
}
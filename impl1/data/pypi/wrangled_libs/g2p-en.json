{
  "classifiers": [],
  "description": "g2p\\_en: a simple python module for english grapheme to phoneme conversion\n==========================================================================\n\n[update] * we removed tensorflow from the dependencies. after all, it changes its apis quite often, and we don't expect you to have a gpu. instead, numpy is used for inference.\n\nthis module is designed to convert english graphemes (spelling) to\nphonemes (pronunciation). it is considered essential in several tasks\nsuch as speech synthesis. unlike many languages like spanish or german\nwhere pronunciation of a word can be inferred from its spelling, english\nwords are often far from people's expectations. therefore, it will be\nthe best idea to consult a dictionary if we want to know the\npronunciation of some word. however, there are at least two tentative\nissues in this approach. first, you can't disambiguate the pronunciation\nof homographs, words which have multiple pronunciations. (see ``a``\nbelow.) second, you can't check if the word is not in the dictionary.\n(see ``b`` below.)\n\n-\n\n \u00a0 \\a.  i refuse to collect the refuse around here. (r\u026a\\|fju:z as verb vs. \\|refju:s as noun)\n\n-\n   \\b.  i am an activationist. (activationist: newly coined word which means ``n. a person who designs and implements programs of treatment or therapy that use recreation and activities to help people whose functional abilities are affected by illness or disability.`` from `word spy <https://wordspy.com/index.php?word=activationist>`__\n\nfor the first homograph issue, fortunately many homographs can be\ndisambiguated using their part-of-speech, if not all. when it comes to\nthe words not in the dictionary, however, we should make our best guess\nusing our knowledge. in this project, we employ a deep learning seq2seq\nframework based on tensorflow.\n\nalgorithm\n---------\n\n1. spells out arabic numbers and some currency symbols. (e.g. $200 ->\n   two hundred dollars) (this is borrowed from `keith ito's\n   code <https://github.com/keithito/tacotron/blob/master/text/numbers.py>`__)\n2. attempts to retrieve the correct pronunciation for homographs based\n   on their pos)\n3. looks up `the cmu pronouncing\n   dictionary <http://www.speech.cs.cmu.edu/cgi-bin/cmudict>`__ for\n   non-homographs.\n4. for oovs, we predict their pronunciations using our neural net model.\n\nenvironment\n-----------\n\n-  python 3.x\n\ndependencies\n------------\n\n-  numpy >= 1.13.1\n-  nltk >= 3.2.4\n-  python -m nltk.downloader \"averaged\\_perceptron\\_tagger\" \"cmudict\"\n-  inflect >= 0.3.1\n-  distance >= 0.1.3\n\ninstallation\n------------\n\n::\n\n    pip install g2p_en\n\nor\n\n::\n\n    python setup.py install\n\nnltk package will be automatically downloaded at your first run.\n\n\nusage\n-----\n\n::\n\n    from g2p_en import g2p\n\n    texts = [\"i have $250 in my pocket.\", # number -> spell-out\n             \"popular pets, e.g. cats and dogs\", # e.g. -> for example\n             \"i refuse to collect the refuse around here.\", # homograph\n             \"i'm an activationist.\"] # newly coined word\n    g2p = g2p()\n    for text in texts:\n        out = g2p(text)\n        print(out)\n    >>> ['ay1', ' ', 'hh', 'ae1', 'v', ' ', 't', 'uw1', ' ', 'hh', 'ah1', 'n', 'd', 'r', 'ah0', 'd', ' ', 'f', 'ih1', 'f', 't', 'iy0', ' ', 'd', 'aa1', 'l', 'er0', 'z', ' ', 'ih0', 'n', ' ', 'm', 'ay1', ' ', 'p', 'aa1', 'k', 'ah0', 't', ' ', '.']\n    >>> ['p', 'aa1', 'p', 'y', 'ah0', 'l', 'er0', ' ', 'p', 'eh1', 't', 's', ' ', ',', ' ', 'f', 'ao1', 'r', ' ', 'ih0', 'g', 'z', 'ae1', 'm', 'p', 'ah0', 'l', ' ', 'k', 'ae1', 't', 's', ' ', 'ah0', 'n', 'd', ' ', 'd', 'aa1', 'g', 'z']\n    >>> ['ay1', ' ', 'r', 'ih0', 'f', 'y', 'uw1', 'z', ' ', 't', 'uw1', ' ', 'k', 'ah0', 'l', 'eh1', 'k', 't', ' ', 'dh', 'ah0', ' ', 'r', 'eh1', 'f', 'y', 'uw2', 'z', ' ', 'er0', 'aw1', 'n', 'd', ' ', 'hh', 'iy1', 'r', ' ', '.']\n    >>> ['ay1', ' ', 'ah0', 'm', ' ', 'ae1', 'n', ' ', 'ae2', 'k', 't', 'ih0', 'v', 'ey1', 'sh', 'ah0', 'n', 'ih0', 's', 't', ' ', '.']\n\n\nmay, 2018.\n\nkyubyong park & `jongseok kim <https://github.com/ozmig77>`__\n\n\n",
  "docs_url": null,
  "keywords": "g2p,g2p_en,g2pe",
  "license": "apache software license",
  "name": "g2p-en",
  "package_url": "https://pypi.org/project/g2p-en/",
  "project_url": "https://pypi.org/project/g2p-en/",
  "project_urls": {
    "Download": "https://github.com/Kyubyong/g2p/archive/1.0.0.tar.gz",
    "Homepage": "https://github.com/Kyubyong/g2p"
  },
  "release_url": "https://pypi.org/project/g2p-en/2.1.0/",
  "requires_dist": [
    "numpy (>=1.13.1)",
    "nltk (>=3.2.4)",
    "inflect (>=0.3.1)",
    "distance (>=0.1.3)"
  ],
  "requires_python": "",
  "summary": "a simple python module for english grapheme to phoneme conversion",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "kbpark.linguist@gmail.com",
    "kyubyong_park"
  ],
  "kwds": "tensorflow gpu numpy g2pe g2p_en",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_g2p_en",
  "homepage": "https://github.com/kyubyong/g2p",
  "release_count": 4,
  "dependency_ids": [
    "pypi_distance",
    "pypi_inflect",
    "pypi_nltk",
    "pypi_numpy"
  ]
}
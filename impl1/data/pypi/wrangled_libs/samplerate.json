{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: multimedia :: sound/audio",
    "topic :: scientific/engineering"
  ],
  "description": "python-samplerate\n=================\n\nthis is a wrapper around erik de castro lopo's `libsamplerate`_ (aka secret\nrabbit code) for high-quality sample rate conversion.\n\nit implements all three `apis\n<http://www.mega-nerd.com/libsamplerate/api.html>`_ available in\n`libsamplerate`_:\n\n* **simple api**: for resampling a large chunk of data with a single library\n  call\n* **full api**: for obtaining the resampled signal from successive chunks of\n  data\n* **callback api**: like full api, but input samples are provided by a callback\n  function\n\nlibrary calls to `libsamplerate`_ are performed using `cffi\n<http://cffi.readthedocs.io/en/latest/>`_.\n\n\ninstallation\n------------\n\n    $ pip install samplerate\n\nbinaries of `libsamplerate`_ for macos and windows (32 and 64 bit) are included\nand used if not present on the system.\n\n\nusage\n-----\n\n.. code-block:: python\n\n   import numpy as np\n   import samplerate\n\n   # synthesize data\n   fs = 1000.\n   t = np.arange(fs * 2) / fs\n   input_data = np.sin(2 * np.pi * 5 * t)\n\n   # simple api\n   ratio = 1.5\n   converter = 'sinc_best'  # or 'sinc_fastest', ...\n   output_data_simple = samplerate.resample(input_data, ratio, converter)\n\n   # full api\n   resampler = samplerate.resampler(converter, channels=1)\n   output_data_full = resampler.process(input_data, ratio, end_of_input=true)\n\n   # the result is the same for both apis.\n   assert np.allclose(output_data_simple, output_data_full)\n\n   # see `samplerate.callbackresampler` for the callback api, or\n   # `examples/play_modulation.py` for an example.\n\nsee ``samplerate.resample``, ``samplerate.resampler``, and\n``samplerate.callbackresampler`` in the api documentation for details.\n\n\nsee also\n--------\n\n* `scikits.samplerate <https://pypi.python.org/pypi/scikits.samplerate>`_\n  implements only the simple api and uses `cython <http://cython.org/>`_ for\n  extern calls. the `resample` function of `scikits.samplerate` and this package\n  share the same function signature for compatiblity.\n\n* `resampy <https://github.com/bmcfee/resampy>`_: sample rate conversion in\n  python + cython.\n\n\nlicense\n-------\n\nthis project is licensed under the `mit license\n<https://opensource.org/licenses/mit>`_.\n\nas of version 0.1.9, `libsamplerate`_ is licensed under the `2-clause bsd\nlicense <https://opensource.org/licenses/bsd-2-clause>`_.\n\n\n.. _libsamplerate: http://www.mega-nerd.com/libsamplerate/",
  "docs_url": null,
  "keywords": "samplerate converter signal processing audio",
  "license": "mit",
  "name": "samplerate",
  "package_url": "https://pypi.org/project/samplerate/",
  "project_url": "https://pypi.org/project/samplerate/",
  "project_urls": {
    "Homepage": "https://github.com/tuxu/python-samplerate"
  },
  "release_url": "https://pypi.org/project/samplerate/0.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python bindings for libsamplerate based on cffi and numpy",
  "version": "0.1.0",
  "releases": [],
  "developers": [
    "ich@tinowagner.com",
    "tino_wagner"
  ],
  "kwds": "libsamplerate _libsamplerate samplerate resampler callbackresampler",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_samplerate",
  "homepage": "https://github.com/tuxu/python-samplerate",
  "release_count": 1,
  "dependency_ids": []
}
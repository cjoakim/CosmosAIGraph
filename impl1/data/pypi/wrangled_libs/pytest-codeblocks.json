{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/pytest-codeblocks\"><img alt=\"pytest-codeblocks\" src=\"https://nschloe.github.io/pytest-codeblocks/logo.svg\" width=\"60%\"></a>\n  <p align=\"center\">test code blocks in your readmes.</p>\n</p>\n\n[![pypi version](https://img.shields.io/pypi/v/pytest-codeblocks.svg?style=flat-square)](https://pypi.org/project/pytest_codeblocks/)\n[![anaconda cloud](https://anaconda.org/conda-forge/pytest-codeblocks/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/pytest-codeblocks/)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/pytest-codeblocks.svg?style=flat-square)](https://pypi.org/project/pytest_codeblocks/)\n[![github stars](https://img.shields.io/github/stars/nschloe/pytest-codeblocks.svg?style=flat-square&logo=github&label=stars&logocolor=white)](https://github.com/nschloe/pytest-codeblocks)\n[![downloads](https://static.pepy.tech/badge/pytest-codeblocks/month?style=flat-square)](https://www.pepy.tech/projects/pytest-codeblocks)\n\n<!--[![pypi downloads](https://img.shields.io/pypi/dm/pytest-codeblocks.svg?style=flat-square)](https://pypistats.org/packages/pytest-codeblocks)-->\n\n[![gh-actions](https://img.shields.io/github/actions/workflow/status/nschloe/pytest-codeblocks/tests?style=flat-square)](https://github.com/nschloe/pytest-codeblocks/actions?query=workflow%3atests)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/pytest-codeblocks.svg?style=flat-square)](https://app.codecov.io/gh/nschloe/pytest-codeblocks)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\nthis is pytest-codeblocks, a [pytest](https://pytest.org/) plugin for testing code\nblocks from readme files. it supports python and shell code.\n\ninstall with\n\n```sh\npip install pytest-codeblocks\n```\n\nand run pytest with\n\n```sh\npytest --codeblocks\n```\n\n```sh\n================================= test session starts =================================\nplatform linux -- python 3.9.4, pytest-6.2.4, py-1.10.0, pluggy-0.13.1\nrootdir: /path/to/directory\nplugins: codeblocks-0.11.0\ncollected 56 items\n\nexample.md .......................                                              [ 50%]\nreadme.md .......................                                               [100%]\n\n================================= 56 passed in 0.08s ==================================\n```\n\npytest-codeblocks will only pick up code blocks with `python` and `sh`/`bash`/`zsh`\nsyntax highlighting.\n\n#### marking code blocks\n\nit is possible to use `pytest.mark` for marking code blocks. for example,\nto skip a code block use `pytest.mark.skip` or `pytest.mark.skipif`:\n\n````markdown\nlorem ipsum\n\n<!--pytest.mark.skip-->\n\n```python\nfoo + bar  # not working\n```\n\ndolor sit amet.\n````\n\n```markdown\n<!--pytest.mark.skipif(sys.version_info <= (3, 7), reason=\"need at least python 3.8\")-->\n```\n\nyou can skip code blocks on import errors with\n\n```markdown\n<!--pytest-codeblocks:importorskip(sympy)-->\n```\n\nskip the entire file by putting\n\n```markdown\n<!--pytest-codeblocks:skipfile-->\n```\n\nin the first line.\n\nfor expected errors, use `pytest.mark.xfail`:\n\n````markdown\nthe following gives an error:\n\n<!--pytest.mark.xfail-->\n\n```python\n1 / 0\n```\n````\n\n#### merging code blocks\n\nbroken-up code blocks can be merged into one with the `pytest-codeblocks:cont` prefix\n\n````markdown\nlorem ipsum\n\n```python\na = 1\n```\n\ndolor sit amet\n\n<!--pytest-codeblocks:cont-->\n\n```python\n# this would otherwise fail since `a` is not defined\na + 1\n```\n````\n\nif you'd like to prepend code that you don't want to show, you can just comment it out;\npytest-codeblocks will pick it up anyway:\n\n````markdown\nlorem ipsum\n\n<!--\n```python\na = 1\n```\n-->\n\ndolor sit amet\n\n<!--pytest-codeblocks:cont-->\n\n```python\n# this would otherwise fail since `a` is not defined\na + 1\n```\n````\n\n#### expected output\n\nyou can also define the expected output of a code block:\n\n````markdown\nthis\n\n```sh\nprint(1 + 3)\n```\n\ngives\n\n<!--pytest-codeblocks:expected-output-->\n\n```\n4\n```\n````\n\nuse `expected-output-ignore-whitespace` if you'd like whitespace differences to\nbe ignored.\n\n(conditionally) skipping the output verfication works by prepending the first\nblock with `skip`/`skipif` (see [above](#skipping-code-blocks)).\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pytest_codeblocks",
  "package_url": "https://pypi.org/project/pytest_codeblocks/",
  "project_url": "https://pypi.org/project/pytest_codeblocks/",
  "project_urls": {
    "Code": "https://github.com/nschloe/pytest-codeblocks",
    "Funding": "https://github.com/sponsors/nschloe",
    "Homepage": "https://github.com/nschloe/pytest-codeblocks",
    "Issues": "https://github.com/nschloe/pytest-codeblocks/issues"
  },
  "release_url": "https://pypi.org/project/pytest_codeblocks/0.17.0/",
  "requires_dist": [
    "pytest >= 7.0.0"
  ],
  "requires_python": ">=3.7",
  "summary": "test code blocks in your readmes",
  "version": "0.17.0",
  "releases": [],
  "developers": [
    "nico.schloemer@gmail.com"
  ],
  "kwds": "pytest_codeblocks pytest codeblocks pypi blocks",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pytest_codeblocks",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: software distribution",
    "topic :: system :: systems administration"
  ],
  "description": "patchwork is a mid-level library of unix system administration primitives such\nas \"install package\" or \"create user account\", interrogative functionality for\nintrospecting system state, and other commonly useful functions built on top of\nthe `fabric <http://fabfile.org>`_ library.\n\nspecifically:\n\n- primary api calls strive to be **idempotent**: they may be called multiple\n  times in a row without unwanted changes piling up or causing errors.\n- patchwork **is just an api**:  it has no concept of \"recipes\", \"manifests\",\n  \"classes\", \"roles\" or other high level organizational units. this is left up\n  to the user or wrapping libraries.\n\n    - this is one way patchwork differs from larger configuration management\n      frameworks like `chef <http://opscode.com/chef/>`_ or `puppet\n      <http://puppetlabs.com>`_. patchwork is closest in nature to those tools'\n      \"resources.\"\n\n- it is implemented in **shell calls**, typically sent **over ssh** from a\n  local workstation.\n\n    - however, where possible, its functions expect a baseline invoke\n      `~invoke.context.context` object and can thus run locally *or* remotely,\n      depending on the specific context supplied by the caller.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "patchwork",
  "package_url": "https://pypi.org/project/patchwork/",
  "project_url": "https://pypi.org/project/patchwork/",
  "project_urls": {
    "Homepage": "https://fabric-patchwork.readthedocs.io"
  },
  "release_url": "https://pypi.org/project/patchwork/1.0.1/",
  "requires_dist": [
    "fabric (<3.0,>=2.0)"
  ],
  "requires_python": "",
  "summary": "deployment/sysadmin operations, powered by fabric",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "jeff@bitprophet.org",
    "jeff_forcier"
  ],
  "kwds": "patchwork puppetlabs puppet api unix",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_patchwork",
  "homepage": "https://fabric-patchwork.readthedocs.io",
  "release_count": 6,
  "dependency_ids": [
    "pypi_fabric"
  ]
}
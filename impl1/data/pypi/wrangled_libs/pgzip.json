{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pgzip\n\n[![run tests](https://github.com/pgzip/pgzip/actions/workflows/python-tests.yml/badge.svg)](https://github.com/pgzip/pgzip/actions/workflows/python-tests.yml)\n[![codeql](https://github.com/pgzip/pgzip/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/pgzip/pgzip/actions/workflows/codeql-analysis.yml)\n\n<p align=\"center\">\n  <img src=\"pgzip_logo.png\" />\n</p>\n\n`pgzip` is a multi-threaded `gzip` implementation for `python` that increases the compression and decompression performance.\n\ncompression and decompression performance gains are made by parallelizing the usage of block indexing within a `gzip` file. block indexing utilizes gzip's `fextra` feature which records the index of compressed members. `fextra` is defined in the official `gzip` specification starting at version 4.3. because `fextra` is part of the `gzip` specification, `pgzip` is compatible with regular `gzip` files.\n\n`pgzip` is **~25x** faster for compression and **~7x** faster for decompression when benchmarked on a 24 core machine. performance is limited only by i/o and the `python` interpreter.\n\ntheoretically, the compression and decompression speed should be linear with the number of cores available. however, i/o and a language's general performance limits the compression and decompression speed in practice.\n\n## usage and examples\n\n### cli\n```\n\u276f python -m pgzip -h\nusage: __main__.py [-h] [-o output] [-f filename] [-d] [-l {0-9}] [-t threads] input\n\npositional arguments:\n  input                 input file or '-' for stdin\n\noptions:\n  -h, --help            show this help message and exit\n  -o output, --output output\n                        output file or '-' for stdout (default: input file with 'gz' extension or stdout)\n  -f filename, --filename filename\n                        name for the original file when compressing\n  -d, --decompress      decompress instead of compress\n  -l {0-9}, --compression-level {0-9}\n                        compression level; 0 = no compression (default: 9)\n  -t threads, --threads threads\n                        number of threads to use (default: determine automatically)\n```\n\n### programatically\n\nusing `pgzip` is the same as using the built-in `gzip` module.\n\ncompressing data and writing it to a file:\n\n```python\nimport pgzip\n\ns = \"a big string...\"\n\n# an explanation of parameters:\n# `thread=8` - use 8 threads to compress. `none` or `0` uses all cores (default)\n# `blocksize=2*10**8` - use a compression block size of 200mb\nwith pgzip.open(\"test.txt.gz\", \"wt\", thread=8, blocksize=2*10**8) as fw:\n    fw.write(s)\n```\n\ndecompressing data from a file:\n\n```python\nimport pgzip\n\ns = \"a big string...\"\n\nwith pgzip.open(\"test.txt.gz\", \"rt\", thread=8) as fr:\n    assert fr.read(len(s)) == s\n```\n\n## performance\n\n### compression performance\n\n![compression performance](https://raw.githubusercontent.com/pgzip/pgzip/master/compressionbenchmark.png)\n\n### decompression performance\n\n![decompression performance](https://raw.githubusercontent.com/pgzip/pgzip/master/decompressionbenchmark.png)\n\ndecompression was benchmarked using an 8.0gb `fastq` text file with 48 threads across 24 cores on a machine with xeon(r) e5-2650 v4 @ 2.20ghz cpus.\n\nthe compressed file used in this benchmark was created with a blocksize of 200mb.\n\n## warning\n\n`pgzip` only replaces the following methods of `gzip`'s `gzipfile` class:\n\n- `open()`\n- `compress()`\n- `decompress()`\n\nother class methods and functionality have not been well tested.\n\ncontributions or improvements is appreciated for methods such as:\n\n- `seek()`\n- `tell()`\n\n## history\n\ncreated initially by vincent li (@vinlyx), this project is a fork of [https://github.com/vinlyx/mgzip](https://github.com/vinlyx/mgzip). we had several bug fixes to implement, but we could not contact them. the `pgzip` team would like to thank vincent li (@vinlyx) for their hard work. we hope that they will contact us when they discover this project.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pgzip",
  "package_url": "https://pypi.org/project/pgzip/",
  "project_url": "https://pypi.org/project/pgzip/",
  "project_urls": {
    "Homepage": "https://github.com/pgzip/pgzip"
  },
  "release_url": "https://pypi.org/project/pgzip/0.3.5/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a multi-threading implementation of python gzip module",
  "version": "0.3.5",
  "releases": [],
  "developers": [
    "pgzip@thegoldfish.org",
    "pgzip_team"
  ],
  "kwds": "pgzip gzip mgzip pgzip_logo compression",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pgzip",
  "homepage": "https://github.com/pgzip/pgzip",
  "release_count": 5,
  "dependency_ids": []
}
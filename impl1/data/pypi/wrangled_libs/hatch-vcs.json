{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "# hatch-vcs\n\n| | |\n| --- | --- |\n| ci/cd | [![ci - test](https://github.com/ofek/hatch-vcs/actions/workflows/test.yml/badge.svg)](https://github.com/ofek/hatch-vcs/actions/workflows/test.yml) [![cd - build](https://github.com/ofek/hatch-vcs/actions/workflows/build.yml/badge.svg)](https://github.com/ofek/hatch-vcs/actions/workflows/build.yml) |\n| package | [![pypi - version](https://img.shields.io/pypi/v/hatch-vcs.svg?logo=pypi&label=pypi&logocolor=gold)](https://pypi.org/project/hatch-vcs/) [![pypi - python version](https://img.shields.io/pypi/pyversions/hatch-vcs.svg?logo=python&label=python&logocolor=gold)](https://pypi.org/project/hatch-vcs/) |\n| meta | [![hatch project](https://img.shields.io/badge/%f0%9f%a5%9a-hatch-4051b5.svg)](https://github.com/pypa/hatch) [![code style - black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![types - mypy](https://img.shields.io/badge/types-mypy-blue.svg)](https://github.com/ambv/black) [![license - mit](https://img.shields.io/badge/license-mit-9400d3.svg)](https://spdx.org/licenses/) [![github sponsors](https://img.shields.io/github/sponsors/ofek?logo=github%20sponsors&style=social)](https://github.com/sponsors/ofek) |\n\n-----\n\nthis provides a plugin for [hatch](https://github.com/pypa/hatch) that uses your preferred version control system (like git) to determine project versions.\n\n**table of contents**\n\n- [global dependency](#global-dependency)\n- [version source](#version-source)\n  - [version source options](#version-source-options)\n  - [version source environment variables](#version-source-environment-variables)\n- [build hook](#build-hook)\n  - [build hook options](#build-hook-options)\n  - [editable installs](#editable-installs)\n- [metadata hook](#metadata-hook)\n  - [metadata hook options](#metadata-hook-options)\n    - [urls](#urls)\n  - [example](#example)\n- [license](#license)\n\n## global dependency\n\nensure `hatch-vcs` is defined within the `build-system.requires` field in your `pyproject.toml` file.\n\n```toml\n[build-system]\nrequires = [\"hatchling\", \"hatch-vcs\"]\nbuild-backend = \"hatchling.build\"\n```\n\n## version source\n\nthe [version source plugin](https://hatch.pypa.io/latest/plugins/version-source/reference/) name is `vcs`.\n\n- ***pyproject.toml***\n\n    ```toml\n    [tool.hatch.version]\n    source = \"vcs\"\n    ```\n\n- ***hatch.toml***\n\n    ```toml\n    [version]\n    source = \"vcs\"\n    ```\n\n### version source options\n\n| option | type | default | description |\n| --- | --- | --- | --- |\n| `tag-pattern` | `str` | see [code](https://github.com/pypa/setuptools_scm/blob/v6.4.0/src/setuptools_scm/config.py#l13) | a regular expression used to extract the version part from vcs tags. the pattern needs to contain either a single match group, or a group named `version`, that captures the actual version information. |\n| `fallback-version` | `str` | | the version that will be used if no other method for detecting the version is successful. if not specified, unsuccessful version detection will raise an error. |\n| `raw-options` | `dict` | | a table of [`setuptools-scm` parameters](https://github.com/pypa/setuptools_scm#configuration-parameters) that will override any of the options listed above. the `write_to` and `write_to_template` parameters are ignored. |\n\n### version source environment variables\n\n- `setuptools_scm_pretend_version`: when defined and not empty, it's used as the primary source for the version, in which case it will be an unparsed string.\n\n## build hook\n\nthe [build hook plugin](https://hatch.pypa.io/latest/plugins/build-hook/reference/) name is `vcs`.\n\n- ***pyproject.toml***\n\n    ```toml\n    [tool.hatch.build.hooks.vcs]\n    version-file = \"_version.py\"\n    ```\n\n- ***hatch.toml***\n\n    ```toml\n    [build.hooks.vcs]\n    version-file = \"_version.py\"\n    ```\n\nbuilding or installing when the latest tag is ``v1.2.3`` will generate the file\n\n- ***_version.py***\n\n    ```python\n    # coding: utf-8\n    # file generated by setuptools_scm\n    # don't change, don't track in version control\n    __version__ = version = '1.2.3'\n    __version_tuple__ = version_tuple = (1, 2, 3)\n    ```\n\n### build hook options\n\n| option | type | default | description |\n| --- | --- | --- | --- |\n| `version-file` | `str` | ***required*** | the relative path to the file that gets updated with the current version. |\n| `template` | `str` | | the template used to overwrite the `version-file`. see the [code](https://github.com/pypa/setuptools_scm/blob/v6.4.0/src/setuptools_scm/__init__.py#l30-l39) for the default template for each file extension. |\n\n### editable installs\n\nthe version file is only updated upon install or build. thus the version number in an [editable install](https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs) (hatch's [dev mode](https://hatch.pypa.io/latest/config/build/#dev-mode)) will be incorrect if the version changes and the project is not rebuilt. an unsupported workaround for keeping the version number up-to-date can be found at [hatch-vcs-footgun-example](https://github.com/maresb/hatch-vcs-footgun-example).\n\n## metadata hook\n\n**note:** only git is supported\n\nthe [metadata hook plugin](https://hatch.pypa.io/latest/plugins/metadata-hook/reference/) is for inserting vcs data (currently the commit hash) into metadata fields other than `version`. its name is `vcs`.\n\n- ***pyproject.toml***\n\n    ```toml\n    [tool.hatch.metadata.hooks.vcs]\n    ```\n\n- ***hatch.toml***\n\n    ```toml\n    [metadata.hooks.vcs]\n    ```\n\n### metadata hook options\n\n#### urls\n\nthe `urls` option is equivalent to [`project.urls`](https://hatch.pypa.io/latest/config/metadata/#urls) except that each url supports [context formatting](https://hatch.pypa.io/latest/config/context/) with the following fields:\n\n- `commit_hash` - the latest commit hash\n\nbe sure to add `urls` to [`project.dynamic`](https://hatch.pypa.io/latest/config/metadata/#dynamic):\n\n- ***pyproject.toml***\n\n    ```toml\n    [project]\n    dynamic = [\n      \"urls\",\n    ]\n    ```\n\n### example\n\n- ***pyproject.toml***\n\n    ```toml\n    [tool.hatch.metadata.hooks.vcs.urls]\n    homepage = \"https://www.example.com\"\n    source_archive = \"https://github.com/org/repo/archive/{commit_hash}.zip\"\n    ```\n\n- ***hatch.toml***\n\n    ```toml\n    [metadata.hooks.vcs.urls]\n    homepage = \"https://www.example.com\"\n    source_archive = \"https://github.com/org/repo/archive/{commit_hash}.zip\"\n    ```\n\n## migration tips\n\nif you are migrating from [setuptools](https://setuptools.pypa.io), you may want access to\nthe version without performing a full build.\n\nby default, `python -m setuptools_scm` will display the version and perform any side-effects\nlike writing to a file. `hatch` separates these functions.\n\n### display version\n\n`hatch version` will print the version to the terminal without modifying the source directory.\n\n```console\n$ hatch version\n23.0.0.dev17+g462372ba\n```\n\n### write version to file\n\nif `version-file` is defined, you can write it to the source directory with the `build` command,\nusing the `--hooks-only` flag to modify the source tree but skip creation of sdists or wheels.\n\n```console\n$ hatch build --hooks-only\n$ cat package/_version.py\n# file generated by setuptools_scm\n# don't change, don't track in version control\n__version__ = version = '23.0.0.dev17+g462372ba'\n__version_tuple__ = version_tuple = (23, 0, 0, 'dev17', 'g462372ba')\n```\n\n## license\n\n`hatch-vcs` is distributed under the terms of the [mit](https://spdx.org/licenses/mit.html) license.\n",
  "docs_url": null,
  "keywords": "git,hatch,mercurial,plugin,scm,vcs,version",
  "license": "mit",
  "name": "hatch-vcs",
  "package_url": "https://pypi.org/project/hatch-vcs/",
  "project_url": "https://pypi.org/project/hatch-vcs/",
  "project_urls": {
    "Funding": "https://github.com/sponsors/ofek",
    "History": "https://github.com/ofek/hatch-vcs/blob/master/HISTORY.md",
    "Issues": "https://github.com/ofek/hatch-vcs/issues",
    "Source": "https://github.com/ofek/hatch-vcs"
  },
  "release_url": "https://pypi.org/project/hatch-vcs/0.4.0/",
  "requires_dist": [
    "hatchling>=1.1.0",
    "setuptools-scm>=6.4.0"
  ],
  "requires_python": ">=3.8",
  "summary": "hatch plugin for versioning with your preferred vcs",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "oss@ofek.dev"
  ],
  "kwds": "pyversions mercurial hatch cd version_tuple",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_hatch_vcs",
  "homepage": "",
  "release_count": 6,
  "dependency_ids": [
    "pypi_hatchling",
    "pypi_setuptools_scm"
  ]
}
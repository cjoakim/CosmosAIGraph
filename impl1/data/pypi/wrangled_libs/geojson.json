{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: gis"
  ],
  "description": "geojson\n==============\n\n.. image:: https://github.com/jazzband/geojson/actions/workflows/test.yml/badge.svg\n   :target: https://github.com/jazzband/geojson/actions/workflows/test.yml\n   :alt: github actions\n.. image:: https://img.shields.io/codecov/c/github/jazzband/geojson.svg\n   :target: https://codecov.io/github/jazzband/geojson?branch=main\n   :alt: codecov\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: jazzband\n\nthis python library contains:\n\n- functions for encoding and decoding geojson_ formatted data\n- classes for all geojson objects\n- an implementation of the python `__geo_interface__ specification`_\n\n**table of contents**\n\n.. contents::\n   :backlinks: none\n   :local:\n\ninstallation\n------------\n\ngeojson is compatible with python 3.7 - 3.12. the recommended way to install is via pip_:\n\n.. code::\n\n  pip install geojson\n\n.. _pypi as 'geojson': https://pypi.python.org/pypi/geojson/\n.. _pip: https://www.pip-installer.org\n\ngeojson objects\n---------------\n\nthis library implements all the `geojson objects`_ described in `the geojson format specification`_.\n\n.. _geojson objects: https://tools.ietf.org/html/rfc7946#section-3\n\nall object keys can also be used as attributes.\n\nthe objects contained in geometrycollection and featurecollection can be indexed directly.\n\npoint\n~~~~~\n\n.. code:: python\n\n  >>> from geojson import point\n\n  >>> point((-115.81, 37.24))  # doctest: +ellipsis\n  {\"coordinates\": [-115.8..., 37.2...], \"type\": \"point\"}\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/b5768a857f5598e405fa>`__. general information about point can be found in `section 3.1.2`_ and `appendix a: points`_ within `the geojson format specification`_.\n\n.. _section 3.1.2: https://tools.ietf.org/html/rfc7946#section-3.1.2\n.. _appendix a\\: points: https://tools.ietf.org/html/rfc7946#appendix-a.1\n\nmultipoint\n~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import multipoint\n\n  >>> multipoint([(-155.52, 19.61), (-156.22, 20.74), (-157.97, 21.46)])  # doctest: +ellipsis\n  {\"coordinates\": [[-155.5..., 19.6...], [-156.2..., 20.7...], [-157.9..., 21.4...]], \"type\": \"multipoint\"}\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/be02025c1eb3aa2040ee>`__. general information about multipoint can be found in `section 3.1.3`_ and `appendix a: multipoints`_ within `the geojson format specification`_.\n\n.. _section 3.1.3: https://tools.ietf.org/html/rfc7946#section-3.1.3\n.. _appendix a\\: multipoints: https://tools.ietf.org/html/rfc7946#appendix-a.4\n\n\nlinestring\n~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import linestring\n\n  >>> linestring([(8.919, 44.4074), (8.923, 44.4075)])  # doctest: +ellipsis\n  {\"coordinates\": [[8.91..., 44.407...], [8.92..., 44.407...]], \"type\": \"linestring\"}\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/758563182ca49ce8e8bb>`__. general information about linestring can be found in `section 3.1.4`_ and `appendix a: linestrings`_ within `the geojson format specification`_.\n\n.. _section 3.1.4: https://tools.ietf.org/html/rfc7946#section-3.1.4\n.. _appendix a\\: linestrings: https://tools.ietf.org/html/rfc7946#appendix-a.2\n\nmultilinestring\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import multilinestring\n\n  >>> multilinestring([\n  ...     [(3.75, 9.25), (-130.95, 1.52)],\n  ...     [(23.15, -34.25), (-1.35, -4.65), (3.45, 77.95)]\n  ... ])  # doctest: +ellipsis\n  {\"coordinates\": [[[3.7..., 9.2...], [-130.9..., 1.52...]], [[23.1..., -34.2...], [-1.3..., -4.6...], [3.4..., 77.9...]]], \"type\": \"multilinestring\"}\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/20b6522d8242ede00bb3>`__. general information about multilinestring can be found in `section 3.1.5`_ and `appendix a: multilinestrings`_ within `the geojson format specification`_.\n\n.. _section 3.1.5: https://tools.ietf.org/html/rfc7946#section-3.1.5\n.. _appendix a\\: multilinestrings: https://tools.ietf.org/html/rfc7946#appendix-a.5\n\npolygon\n~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import polygon\n\n  >>> # no hole within polygon\n  >>> polygon([[(2.38, 57.322), (-120.43, 19.15), (23.194, -20.28), (2.38, 57.322)]])  # doctest: +ellipsis\n  {\"coordinates\": [[[2.3..., 57.32...], [-120.4..., 19.1...], [23.19..., -20.2...]]], \"type\": \"polygon\"}\n\n  >>> # hole within polygon\n  >>> polygon([\n  ...     [(2.38, 57.322), (-120.43, 19.15), (23.194, -20.28), (2.38, 57.322)],\n  ...     [(-5.21, 23.51), (15.21, -10.81), (-20.51, 1.51), (-5.21, 23.51)]\n  ... ])  # doctest: +ellipsis\n  {\"coordinates\": [[[2.3..., 57.32...], [-120.4..., 19.1...], [23.19..., -20.2...]], [[-5.2..., 23.5...], [15.2..., -10.8...], [-20.5..., 1.5...], [-5.2..., 23.5...]]], \"type\": \"polygon\"}\n\nvisualize the results of the example above `here <https://gist.github.com/frewsxcv/b2f5c31c10e399a63679>`__. general information about polygon can be found in `section 3.1.6`_ and `appendix a: polygons`_ within `the geojson format specification`_.\n\n.. _section 3.1.6: https://tools.ietf.org/html/rfc7946#section-3.1.6\n.. _appendix a\\: polygons: https://tools.ietf.org/html/rfc7946#appendix-a.3\n\nmultipolygon\n~~~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import multipolygon\n\n  >>> multipolygon([\n  ...     ([(3.78, 9.28), (-130.91, 1.52), (35.12, 72.234), (3.78, 9.28)],),\n  ...     ([(23.18, -34.29), (-1.31, -4.61), (3.41, 77.91), (23.18, -34.29)],)\n  ... ])  # doctest: +ellipsis\n  {\"coordinates\": [[[[3.7..., 9.2...], [-130.9..., 1.5...], [35.1..., 72.23...]]], [[[23.1..., -34.2...], [-1.3..., -4.6...], [3.4..., 77.9...]]]], \"type\": \"multipolygon\"}\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/e0388485e28392870b74>`__. general information about multipolygon can be found in `section 3.1.7`_ and `appendix a: multipolygons`_ within `the geojson format specification`_.\n\n.. _section 3.1.7: https://tools.ietf.org/html/rfc7946#section-3.1.7\n.. _appendix a\\: multipolygons: https://tools.ietf.org/html/rfc7946#appendix-a.6\n\ngeometrycollection\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import geometrycollection, point, linestring\n\n  >>> my_point = point((23.532, -63.12))\n\n  >>> my_line = linestring([(-152.62, 51.21), (5.21, 10.69)])\n\n  >>> geo_collection = geometrycollection([my_point, my_line])\n\n  >>> geo_collection  # doctest: +ellipsis\n  {\"geometries\": [{\"coordinates\": [23.53..., -63.1...], \"type\": \"point\"}, {\"coordinates\": [[-152.6..., 51.2...], [5.2..., 10.6...]], \"type\": \"linestring\"}], \"type\": \"geometrycollection\"}\n\n  >>> geo_collection[1]\n  {\"coordinates\": [[-152.62, 51.21], [5.21, 10.69]], \"type\": \"linestring\"}\n\n  >>> geo_collection[0] == geo_collection.geometries[0]\n  true\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/6ec8422e97d338a101b0>`__. general information about geometrycollection can be found in `section 3.1.8`_ and `appendix a: geometrycollections`_ within `the geojson format specification`_.\n\n.. _section 3.1.8: https://tools.ietf.org/html/rfc7946#section-3.1.8\n.. _appendix a\\: geometrycollections: https://tools.ietf.org/html/rfc7946#appendix-a.7\n\nfeature\n~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import feature, point\n\n  >>> my_point = point((-3.68, 40.41))\n\n  >>> feature(geometry=my_point)  # doctest: +ellipsis\n  {\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"point\"}, \"properties\": {}, \"type\": \"feature\"}\n\n  >>> feature(geometry=my_point, properties={\"country\": \"spain\"})  # doctest: +ellipsis\n  {\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"point\"}, \"properties\": {\"country\": \"spain\"}, \"type\": \"feature\"}\n\n  >>> feature(geometry=my_point, id=27)  # doctest: +ellipsis\n  {\"geometry\": {\"coordinates\": [-3.68..., 40.4...], \"type\": \"point\"}, \"id\": 27, \"properties\": {}, \"type\": \"feature\"}\n\nvisualize the results of the examples above `here <https://gist.github.com/frewsxcv/4488d30209d22685c075>`__. general information about feature can be found in `section 3.2`_ within `the geojson format specification`_.\n\n.. _section 3.2: https://tools.ietf.org/html/rfc7946#section-3.2\n\nfeaturecollection\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n  >>> from geojson import feature, point, featurecollection\n\n  >>> my_feature = feature(geometry=point((1.6432, -19.123)))\n\n  >>> my_other_feature = feature(geometry=point((-80.234, -22.532)))\n\n  >>> feature_collection = featurecollection([my_feature, my_other_feature])\n\n  >>> feature_collection # doctest: +ellipsis\n  {\"features\": [{\"geometry\": {\"coordinates\": [1.643..., -19.12...], \"type\": \"point\"}, \"properties\": {}, \"type\": \"feature\"}, {\"geometry\": {\"coordinates\": [-80.23..., -22.53...], \"type\": \"point\"}, \"properties\": {}, \"type\": \"feature\"}], \"type\": \"featurecollection\"}\n\n  >>> feature_collection.errors()\n  []\n\n  >>> (feature_collection[0] == feature_collection['features'][0], feature_collection[1] == my_other_feature)\n  (true, true)\n\nvisualize the result of the example above `here <https://gist.github.com/frewsxcv/34513be6fb492771ef7b>`__. general information about featurecollection can be found in `section 3.3`_ within `the geojson format specification`_.\n\n.. _section 3.3: https://tools.ietf.org/html/rfc7946#section-3.3\n\ngeojson encoding/decoding\n-------------------------\n\nall of the geojson objects implemented in this library can be encoded and decoded into raw geojson with the ``geojson.dump``, ``geojson.dumps``, ``geojson.load``, and ``geojson.loads`` functions. note that each of these functions is a wrapper around the core `json` function with the same name, and will pass through any additional arguments. this allows you to control the json formatting or parsing behavior with the underlying core `json` functions.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> my_point = geojson.point((43.24, -1.532))\n\n  >>> my_point  # doctest: +ellipsis\n  {\"coordinates\": [43.2..., -1.53...], \"type\": \"point\"}\n\n  >>> dump = geojson.dumps(my_point, sort_keys=true)\n\n  >>> dump  # doctest: +ellipsis\n  '{\"coordinates\": [43.2..., -1.53...], \"type\": \"point\"}'\n\n  >>> geojson.loads(dump)  # doctest: +ellipsis\n  {\"coordinates\": [43.2..., -1.53...], \"type\": \"point\"}\n\ncustom classes\n~~~~~~~~~~~~~~\n\nthis encoding/decoding functionality shown in the previous can be extended to custom classes using the interface described by the `__geo_interface__ specification`_.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> class mypoint():\n  ...     def __init__(self, x, y):\n  ...         self.x = x\n  ...         self.y = y\n  ...\n  ...     @property\n  ...     def __geo_interface__(self):\n  ...         return {'type': 'point', 'coordinates': (self.x, self.y)}\n\n  >>> point_instance = mypoint(52.235, -19.234)\n\n  >>> geojson.dumps(point_instance, sort_keys=true)  # doctest: +ellipsis\n  '{\"coordinates\": [52.23..., -19.23...], \"type\": \"point\"}'\n\ndefault and custom precision\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngeojson object-based classes in this package have an additional `precision` attribute which rounds off\ncoordinates to 6 decimal places (roughly 0.1 meters) by default and can be customized per object instance.\n\n.. code:: python\n\n  >>> from geojson import point\n\n  >>> point((-115.123412341234, 37.123412341234))  # rounded to 6 decimal places by default\n  {\"coordinates\": [-115.123412, 37.123412], \"type\": \"point\"}\n\n  >>> point((-115.12341234, 37.12341234), precision=8)  # rounded to 8 decimal places\n  {\"coordinates\": [-115.12341234, 37.12341234], \"type\": \"point\"}\n\n\nprecision can be set at the package level by setting `geojson.geometry.default_precision`\n\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> geojson.geometry.default_precision = 5\n\n  >>> from geojson import point\n\n  >>> point((-115.12341234, 37.12341234))  # rounded to 8 decimal places\n  {\"coordinates\": [-115.12341, 37.12341], \"type\": \"point\"}\n\n\nafter setting the default_precision, coordinates will be rounded off to that precision with `geojson.load` or `geojson.loads`. following one of those with `geojson.dump` is a quick and easy way to scale down the precision of excessively precise, arbitrarily-sized geojson data.\n\n\nhelpful utilities\n-----------------\n\ncoords\n~~~~~~\n\n:code:`geojson.utils.coords` yields all coordinate tuples from a geometry or feature object.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> my_line = linestring([(-152.62, 51.21), (5.21, 10.69)])\n\n  >>> my_feature = geojson.feature(geometry=my_line)\n\n  >>> list(geojson.utils.coords(my_feature))  # doctest: +ellipsis\n  [(-152.62..., 51.21...), (5.21..., 10.69...)]\n\nmap_coords\n~~~~~~~~~~\n\n:code:`geojson.utils.map_coords` maps a function over all coordinate values and returns a geometry of the same type. useful for scaling a geometry.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> new_point = geojson.utils.map_coords(lambda x: x/2, geojson.point((-115.81, 37.24)))\n\n  >>> geojson.dumps(new_point, sort_keys=true)  # doctest: +ellipsis\n  '{\"coordinates\": [-57.905..., 18.62...], \"type\": \"point\"}'\n\nmap_tuples\n~~~~~~~~~~\n\n:code:`geojson.utils.map_tuples` maps a function over all coordinates and returns a geometry of the same type. useful for changing coordinate order or applying coordinate transforms.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> new_point = geojson.utils.map_tuples(lambda c: (c[1], c[0]), geojson.point((-115.81, 37.24)))\n\n  >>> geojson.dumps(new_point, sort_keys=true)  # doctest: +ellipsis\n  '{\"coordinates\": [37.24..., -115.81], \"type\": \"point\"}'\n\nmap_geometries\n~~~~~~~~~~~~~~\n\n:code:`geojson.utils.map_geometries` maps a function over each geometry in the input.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> new_point = geojson.utils.map_geometries(lambda g: geojson.multipoint([g[\"coordinates\"]]), geojson.geometrycollection([geojson.point((-115.81, 37.24))]))\n\n  >>> geojson.dumps(new_point, sort_keys=true)\n  '{\"geometries\": [{\"coordinates\": [[-115.81, 37.24]], \"type\": \"multipoint\"}], \"type\": \"geometrycollection\"}'\n\nvalidation\n~~~~~~~~~~\n\n:code:`is_valid` property provides simple validation of geojson objects.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> obj = geojson.point((-3.68,40.41,25.14,10.34))\n  >>> obj.is_valid\n  false\n\n:code:`errors` method provides collection of errors when validation geojson objects.\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> obj = geojson.point((-3.68,40.41,25.14,10.34))\n  >>> obj.errors()\n  'a position must have exactly 2 or 3 values'\n\ngenerate_random\n~~~~~~~~~~~~~~~\n\n:code:`geojson.utils.generate_random` yields a geometry type with random data\n\n.. code:: python\n\n  >>> import geojson\n\n  >>> geojson.utils.generate_random(\"linestring\")  # doctest: +ellipsis\n  {\"coordinates\": [...], \"type\": \"linestring\"}\n\n  >>> geojson.utils.generate_random(\"polygon\")  # doctest: +ellipsis\n  {\"coordinates\": [...], \"type\": \"polygon\"}\n\n\ndevelopment\n-----------\n\nto build this project, run :code:`python setup.py build`.\nto run the unit tests, run :code:`python -m pip install tox && tox`.\nto run the style checks, run :code:`flake8` (install `flake8` if needed).\n\ncredits\n-------\n\n* sean gillies <sgillies@frii.com>\n* matthew russell <matt@sanoodi.com>\n* corey farwell <coreyf@rwell.org>\n* blake grotewold <hello@grotewold.me>\n* zsolt ero <zsolt.ero@gmail.com>\n* sergey romanov <xxsmotur@gmail.com>\n* ray riga <ray@strongoutput.com>\n\n\n.. _geojson: https://geojson.org/\n.. _the geojson format specification: https://tools.ietf.org/html/rfc7946\n.. _\\_\\_geo\\_interface\\_\\_ specification: https://gist.github.com/sgillies/2217756\n",
  "docs_url": null,
  "keywords": "gis geography json",
  "license": "bsd",
  "name": "geojson",
  "package_url": "https://pypi.org/project/geojson/",
  "project_url": "https://pypi.org/project/geojson/",
  "project_urls": {
    "Homepage": "https://github.com/jazzband/geojson"
  },
  "release_url": "https://pypi.org/project/geojson/3.1.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "python bindings and utilities for geojson",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "ray@strongoutput.com",
    "ray_riga",
    "sean_gillies",
    "sgillies@frii.com"
  ],
  "kwds": "_geojson geojson_ geojson json __geo_interface__",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_geojson",
  "homepage": "https://github.com/jazzband/geojson",
  "release_count": 31,
  "dependency_ids": []
}
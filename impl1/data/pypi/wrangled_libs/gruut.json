{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# gruut\n\na tokenizer, text cleaner, and [ipa](https://en.wikipedia.org/wiki/international_phonetic_alphabet) phonemizer for several human languages that supports [ssml](#ssml).\n\n```python\nfrom gruut import sentences\n\ntext = 'he wound it around the wound, saying \"i read it was $10 to read.\"'\n\nfor sent in sentences(text, lang=\"en-us\"):\n    for word in sent:\n        if word.phonemes:\n            print(word.text, *word.phonemes)\n```\n\nwhich outputs:\n\n```\nhe h \u02c8i\nwound w \u02c8a\u028a n d\nit \u02c8\u026a t\naround \u025a \u02c8a\u028a n d\nthe \u00f0 \u0259\nwound w \u02c8u n d\n, |\nsaying s \u02c8e\u026a \u026a \u014b\ni \u02c8a\u026a\nread \u0279 \u02c8\u025b d\nit \u02c8\u026a t\nwas w \u0259 z\nten t \u02c8\u025b n\ndollars d \u02c8\u0251 l \u025a z\nto t \u0259\nread \u0279 \u02c8i d\n. \u2016\n```\n\nnote that \"wound\" and \"read\" have different pronunciations when used in different (grammatical) contexts.\n\na [subset of ssml](#ssml) is also supported:\n\n```python\nfrom gruut import sentences\n\nssml_text = \"\"\"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<speak version=\"1.1\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:xsi=\"http://www.w3.org/2001/xmlschema-instance\"\n    xsi:schemalocation=\"http://www.w3.org/2001/10/synthesis\n                http://www.w3.org/tr/speech-synthesis11/synthesis.xsd\"\n    xml:lang=\"en-us\">\n<s>today at 4pm, 2/1/2000.</s>\n<s xml:lang=\"it\">un mese f\u00e0, 2/1/2000.</s>\n</speak>\"\"\"\n\nfor sent in sentences(ssml_text, ssml=true):\n    for word in sent:\n        if word.phonemes:\n            print(sent.idx, word.lang, word.text, *word.phonemes)\n```\n\nwith the output:\n\n```\n0 en-us today t \u0259 d \u02c8e\u026a\n0 en-us at \u02c8\u00e6 t\n0 en-us four f \u02c8\u0254 \u0279\n0 en-us p p \u02c8i\n0 en-us m \u02c8\u025b m\n0 en-us , |\n0 en-us february f \u02c8\u025b b j u \u02cc\u025b \u0279 i\n0 en-us first f \u02c8\u025a s t\n0 en-us , |\n0 en-us two t \u02c8u\n0 en-us thousand \u03b8 \u02c8a\u028a z \u0259 n d\n0 en-us . \u2016\n1 it un u n\n1 it mese \u02c8m e s e\n1 it f\u00e0 f a\n1 it , |\n1 it due d j u\n1 it gennaio d\u0361\u0292 e n n \u02c8a j o\n1 it duemila d u e \u02c8m i l a\n1 it . \u2016\n```\n\nsee [the documentation](https://rhasspy.github.io/gruut/) for more details.\n\n## installation\n\n```sh\npip install gruut\n```\n\nlanguages besides english can be added during installation. for example, with french and italian support:\n\n```sh\npip install -f 'https://synesthesiam.github.io/prebuilt-apps/' gruut[fr,it]\n```\n\nthe extra pip repo is needed for an updated [num2words fork](https://github.com/rhasspy/num2words) that includes support for more languages.\n\nyou may also [manually download language files](https://github.com/rhasspy/gruut/releases/latest) and use put them in `$xdg_config_home/gruut/` (`$home/.config/gruut` by default).\n\ngruut will look for language files in the directory `$xdg_config_home/gruut/<lang>/` if the corresponding python package is not installed. note that `<lang>` here is the **full** language name, e.g. `de-de` instead of just `de`. \n\n## supported languages\n\ngruut currently supports:\n\n* arabic (`ar`)\n* czech (`cs` or `cs-cz`)\n* german (`de` or `de-de`)\n* english (`en` or `en-us`)\n* spanish (`es` or `es-es`)\n* farsi/persian (`fa`)\n* french (`fr` or `fr-fr`)\n* italian (`it` or `it-it`)\n* luxembourgish (`lb`)\n* dutch (`nl`)\n* russian (`ru` or `ru-ru`)\n* swedish (`sv` or `sv-se`)\n* swahili (`sw`)\n\nthe goal is to support all of [voice2json's languages](https://github.com/synesthesiam/voice2json-profiles#supported-languages)\n\n## dependencies\n\n* python 3.7 or higher\n* linux\n    * tested on debian bullseye\n* [num2words fork](https://github.com/rhasspy/num2words) and [babel](https://pypi.org/project/babel/)\n    * currency/number handling\n    * num2words fork includes additional language support (arabic, farsi, swedish, swahili)\n* gruut-ipa\n    * [ipa](https://en.wikipedia.org/wiki/international_phonetic_alphabet) pronunciation manipulation\n* [pycrfsuite](https://github.com/scrapinghub/python-crfsuite)\n    * part of speech tagging and grapheme to phoneme models\n* [pydateparser](https://github.com/glibai/pydateparser)\n    * date parsing for multiple languages\n\n## numbers, dates, and more\n\n`gruut` can automatically verbalize numbers, dates, and other expressions. this is done in a locale-aware manner for both parsing and verbalization, so \"1/1/2020\" may be interpreted as \"m/d/y\" or \"d/m/y\" depending on the word or sentence's language (e.g., `<s lang=\"...\">`).\n\nthe following types of expressions can be automatically expanded into words by `gruut`:\n\n* numbers - \"123\" to \"one hundred and twenty three\" (disable with `verbalize_numbers=false` or `--no-numbers`)\n    * relies on `babel` for parsing and `num2words` for verbalization\n* dates - \"1/1/2020\" to \"january first, twenty twenty\" (disable with `verbalize_dates=false` or `--no-dates`)\n    * relies on `pydateparser` for parsing and both `babel` and `num2words` for verbalization\n* currency - \"$10\" to \"ten dollars\" (disable with `verbalize_currency=false` or `--no-currency`)\n    * relies on `babel` for parsing and both `babel` and `num2words` for verbalization\n* times - \"12:01am\" to \"twelve oh one a m\" (disable with `verbalize_times=false` or `--no-times`)\n    * english only\n    * relies on `num2words` for verbalization\n\n## command-line usage\n\nthe `gruut` module can be executed with `python3 -m gruut --language <language> <text>` or with the `gruut` command (from `setup.py`).\n\nthe `gruut` command is line-oriented, consuming text and producing [jsonl](https://jsonlines.org/).\nyou will probably want to install [jq](https://stedolan.github.io/jq/) to manipulate the [jsonl](https://jsonlines.org/) output from `gruut`.\n\n### plain text\n\ntakes raw text and outputs [jsonl](https://jsonlines.org/) with cleaned words/tokens.\n\n```sh\necho 'this, right here, is some \"raw\" text!' \\\n   | gruut --language en-us \\\n   | jq --raw-output '.words[].text'\nthis\n,\nright\nhere\n,\nis\nsome\n\"\nraw\n\"\ntext\n!\n```\n\nmore information is available in the full json output:\n\n```sh\ngruut --language en-us 'more  text.' | jq .\n```\n\noutput:\n\n```json\n{\n  \"idx\": 0,\n  \"text\": \"more text.\",\n  \"text_with_ws\": \"more text.\",\n  \"text_spoken\": \"more text\",\n  \"par_idx\": 0,\n  \"lang\": \"en-us\",\n  \"voice\": \"\",\n  \"words\": [\n    {\n      \"idx\": 0,\n      \"text\": \"more\",\n      \"text_with_ws\": \"more \",\n      \"leading_ws\": \"\",\n      \"training_ws\": \" \",\n      \"sent_idx\": 0,\n      \"par_idx\": 0,\n      \"lang\": \"en-us\",\n      \"voice\": \"\",\n      \"pos\": \"jjr\",\n      \"phonemes\": [\n        \"m\",\n        \"\u02c8\u0254\",\n        \"\u0279\"\n      ],\n      \"is_major_break\": false,\n      \"is_minor_break\": false,\n      \"is_punctuation\": false,\n      \"is_break\": false,\n      \"is_spoken\": true,\n      \"pause_before_ms\": 0,\n      \"pause_after_ms\": 0\n    },\n    {\n      \"idx\": 1,\n      \"text\": \"text\",\n      \"text_with_ws\": \"text\",\n      \"leading_ws\": \"\",\n      \"training_ws\": \"\",\n      \"sent_idx\": 0,\n      \"par_idx\": 0,\n      \"lang\": \"en-us\",\n      \"voice\": \"\",\n      \"pos\": \"nn\",\n      \"phonemes\": [\n        \"t\",\n        \"\u02c8\u025b\",\n        \"k\",\n        \"s\",\n        \"t\"\n      ],\n      \"is_major_break\": false,\n      \"is_minor_break\": false,\n      \"is_punctuation\": false,\n      \"is_break\": false,\n      \"is_spoken\": true,\n      \"pause_before_ms\": 0,\n      \"pause_after_ms\": 0\n    },\n    {\n      \"idx\": 2,\n      \"text\": \".\",\n      \"text_with_ws\": \".\",\n      \"leading_ws\": \"\",\n      \"training_ws\": \"\",\n      \"sent_idx\": 0,\n      \"par_idx\": 0,\n      \"lang\": \"en-us\",\n      \"voice\": \"\",\n      \"pos\": null,\n      \"phonemes\": [\n        \"\u2016\"\n      ],\n      \"is_major_break\": true,\n      \"is_minor_break\": false,\n      \"is_punctuation\": false,\n      \"is_break\": true,\n      \"is_spoken\": false,\n      \"pause_before_ms\": 0,\n      \"pause_after_ms\": 0\n    }\n  ],\n  \"pause_before_ms\": 0,\n  \"pause_after_ms\": 0\n}\n```\n\nfor the whole input line and each word, the `text` property contains the processed input text with normalized whitespace while `text_with_ws` retains the original whitespace. the `text_spoken` property only contains words that are spoken, so punctuation and breaks are excluded.\n\nwithin each word, there is:\n\n* `idx` - zero-based index of the word in the sentence\n* `sent_idx` - zero-based index of the sentence in the input text\n* `pos` - part of speech tag (if available)\n* `phonemes` - list of [ipa](https://en.wikipedia.org/wiki/international_phonetic_alphabet) phonemes for the word (if available)\n* `is_minor_break` - `true` if \"word\" separates phrases (comma, semicolon, etc.)\n* `is_major_break` - `true` if \"word\" separates sentences (period, question mark, etc.)\n* `is_break` - `true` if \"word\" is a major or minor break\n* `is_punctuation` - `true` if \"word\" is a surrounding punctuation mark (quote, bracket, etc.)\n* `is_spoken` - `true` if not a break or punctuation\n\nsee `python3 -m gruut <language> --help` for more options.\n\n### ssml\n\na subset of [ssml](https://www.w3.org/tr/speech-synthesis11/) is supported:\n\n* `<speak>` - wrap around ssml text\n    * `lang` - set language for document\n* `<p>` - paragraph\n    * `lang` - set language for paragraph\n* `<s>` - sentence (disables automatic sentence breaking)\n    * `lang` - set language for sentence\n* `<w>` / `<token>` - word (disables automatic tokenization)\n    * `lang` - set language for word\n    * `role` - set word role (see [word roles](#word-roles))\n* `<lang lang=\"...\">` - set language inner text\n* `<voice name=\"...\">` - set voice of inner text\n* `<say-as interpret-as=\"\">` - force interpretation of inner text\n    * `interpret-as` one of \"spell-out\", \"date\", \"number\", \"time\", or \"currency\"\n    * `format` - way to format text depending on `interpret-as`\n        * number - one of \"cardinal\", \"ordinal\", \"digits\", \"year\"\n        * date - string with \"d\" (cardinal day), \"o\" (ordinal day), \"m\" (month), or \"y\" (year)\n* `<break time=\"\">` - pause for given amount of time\n    * time - seconds (\"123s\") or milliseconds (\"123ms\")\n* `<mark name=\"\">` - user-defined mark (`marks_before` and `marks_after` attributes of words/sentences)\n    * name - name of mark\n* `<sub alias=\"\">` - substitute `alias` for inner text\n* `<phoneme ph=\"...\">` - supply phonemes for inner text\n    * `ph` - phonemes for each word of inner text, separated by whitespace\n* `<lexicon id=\"...\">` - inline or external pronunciation lexicon\n    * `id` - unique id of lexicon (used in `<lookup ref=\"...\">`)\n    * `uri` - if empty or missing, lexicon is inline\n    * one or more `<lexeme>` child elements with:\n        *  optional `role=\"...\"` ([word roles][#word-roles] separated by whitespace)\n        * `<grapheme>word</grapheme>` - word text\n        * `<phoneme>p h o n e m e s</phoneme>` - word pronunciation (phonemes separated by whitespace)\n* `<lookup ref=\"...\">` - use pronunciation lexicon for child elements\n    * `ref` - id from a `<lexicon id=\"...\">`\n\n#### word roles\n\nduring phonemization, word roles are used to disambiguate pronunciations. unless manually specified, a word's role is derived from its part of speech tag as `gruut:<tag>`. for initialisms and `spell-out`, the role `gruut:letter` is used to indicate that e.g., \"a\" should be spoken as `/e\u026a/` instead of `/\u0259/`.\n\nfor `en-us`, the following additional roles are available from the part-of-speech tagger:\n\n* `gruut:cd` - number\n* `gruut:dt` - determiner\n* `gruut:in` - preposition or subordinating conjunction \n* `gruut:jj` - adjective\n* `gruut:nn` - noun\n* `gruut:prp` - personal pronoun\n* `gruut:rb` - adverb\n* `gruut:vb` - verb\n* `gruut:vb` - verb (past tense)\n\n#### inline lexicons\n\ninline [pronunciation lexicons](https://www.w3.org/tr/2008/rec-pronunciation-lexicon-20081014/) are supported via the `<lexicon>` and `<lookup>` tags. gruut diverges slightly from the [ssml standard](https://www.w3.org/tr/speech-synthesis11/) here by allowing lexicons to be defined within the ssml document itself (`url` is blank or missing). additionally, the `id` attribute of the `<lexicon>` element can be left off to indicate a \"default\" inline lexicon that does not require a corresponding `<lookup>` tag.\n\nfor example, the following document will yield three different pronunciations for the word \"tomato\":\n\n``` xml\n<?xml version=\"1.0\"?>\n<speak version=\"1.1\"\n       xmlns=\"http://www.w3.org/2001/10/synthesis\"\n       xmlns:xsi=\"http://www.w3.org/2001/xmlschema-instance\"\n       xsi:schemalocation=\"http://www.w3.org/2001/10/synthesis\n                 http://www.w3.org/tr/speech-synthesis11/synthesis.xsd\"\n       xml:lang=\"en-us\">\n\n  <lexicon xml:id=\"test\" alphabet=\"ipa\">\n    <lexeme>\n      <grapheme>\n        tomato\n      </grapheme>\n      <phoneme>\n        <!-- individual phonemes are separated by whitespace -->\n        t \u0259 m \u02c8\u0251 t o\u028a\n      </phoneme>\n    </lexeme>\n    <lexeme>\n      <grapheme role=\"fake-role\">\n        tomato\n      </grapheme>\n      <phoneme>\n        <!-- made up pronunciation for fake word role -->\n        t \u0259 m \u02c8i t o\u028a\n      </phoneme>\n    </lexeme>\n  </lexicon>\n\n  <w>tomato</w>\n  <lookup ref=\"test\">\n    <w>tomato</w>\n    <w role=\"fake-role\">tomato</w>\n  </lookup>\n</speak>\n```\n\nthe first \"tomato\" will be looked up in the u.s. english lexicon (`/t \u0259 m \u02c8e\u026a t o\u028a/`). within the `<lookup>` tag's scope, the second and third \"tomato\" words will be looked up in the inline lexicon. the third \"tomato\" word has a [role](#word-roles) attached  (selecting a made up pronunciation in this case).\n\neven further from the ssml standard, gruut allows you to leave off the `<lexicon>` id entirely. with no `id`, a `<lookup>` tag is no longer needed, allowing you to override the pronunciation of any word in the document: \n\n``` xml\n<?xml version=\"1.0\"?>\n<speak version=\"1.1\"\n       xmlns=\"http://www.w3.org/2001/10/synthesis\"\n       xmlns:xsi=\"http://www.w3.org/2001/xmlschema-instance\"\n       xsi:schemalocation=\"http://www.w3.org/2001/10/synthesis\n                 http://www.w3.org/tr/speech-synthesis11/synthesis.xsd\"\n       xml:lang=\"en-us\">\n\n  <!-- no id means change all words without a lookup -->\n  <lexicon>\n    <lexeme>\n      <grapheme>\n        tomato\n      </grapheme>\n      <phoneme>\n        t \u0259 m \u02c8\u0251 t o\u028a\n      </phoneme>\n    </lexeme>\n  </lexicon>\n\n  <w>tomato</w>\n</speak>\n```\n\nthis will yield a pronunciation of `/t \u0259 m \u02c8\u0251 t o\u028a/` for all instances of \"tomato\" in the document (unless they have a `<lookup>`).\n\n## intended audience\n\ngruut is useful for transforming raw text into phonetic pronunciations, similar to [phonemizer](https://github.com/bootphon/phonemizer). unlike phonemizer, gruut looks up words in a pre-built lexicon (pronunciation dictionary) or guesses word pronunciations with a pre-trained grapheme-to-phoneme model. phonemes for each language come from a [carefully chosen inventory](https://en.wikipedia.org/wiki/template:language_phonologies).\n\nfor each supported language, gruut includes a:\n\n* a word pronunciation lexicon built from open source data\n    * see [pron_dict](https://github.com/kyubyong/pron_dictionaries)\n* a pre-trained grapheme-to-phoneme model for guessing word pronunciations\n\nsome languages also include:\n\n* a pre-trained part of speech tagger built from open source data:\n    * see [universal dependencies](https://universaldependencies.org/)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "gruut",
  "package_url": "https://pypi.org/project/gruut/",
  "project_url": "https://pypi.org/project/gruut/",
  "project_urls": {
    "Homepage": "https://github.com/rhasspy/gruut"
  },
  "release_url": "https://pypi.org/project/gruut/2.3.4/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a tokenizer, text cleaner, and phonemizer for many human languages.",
  "version": "2.3.4",
  "releases": [],
  "developers": [
    "michael_hansen",
    "mike@rhasspy.org"
  ],
  "kwds": "phonemes language_phonologies phonetic text_spoken international_phonetic_alphabet",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_gruut",
  "homepage": "https://github.com/rhasspy/gruut",
  "release_count": 31,
  "dependency_ids": []
}
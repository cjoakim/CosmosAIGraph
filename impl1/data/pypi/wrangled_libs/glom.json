{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "# glom\n\n*restructuring data, the python way*\n\n<a href=\"https://pypi.org/project/glom/\"><img src=\"https://img.shields.io/pypi/v/glom.svg\"></a>\n<a href=\"https://calver.org/\"><img src=\"https://img.shields.io/badge/calver-yy.mm.micro-22bfda.svg\"></a>\n\n<img width=\"30%\" align=\"right\" src=\"https://raw.githubusercontent.com/mahmoud/glom/master/docs/_static/comet.png\">\n\nreal applications have real data, and real data nests. objects inside\nof objects inside of lists of objects.\n\nglom is a new and powerful way to handle real-world data, featuring:\n\n* path-based access for nested data structures\n* readable, meaningful error messages\n* declarative data transformation, using lightweight, pythonic specifications\n* built-in data exploration and debugging features\n\nall of that and more, available as a [fully-documented][rtd],\npure-python package, tested on python 3.7+, as well as\npypy3. installation is as easy as:\n\n```\n  pip install glom\n```\n\nand when you install glom, you also get [the `glom` command-line\ninterface][cli_rtd], letting you experiment at the console, but never limiting\nyou to shell scripts:\n\n```\nusage: glom [flags] [spec [target]]\n\ncommand-line interface to the glom library, providing nested data access and data\nrestructuring with the power of python.\n\nflags:\n\n  --help / -h                     show this help message and exit\n  --target-file target_file       path to target data source (optional)\n  --target-format target_format\n                                  format of the source data (json, python, toml,\n                                  or yaml) (defaults to 'json')\n  --spec-file spec_file           path to glom spec definition (optional)\n  --spec-format spec_format       format of the glom spec definition (json, python,\n                                    python-full) (defaults to 'python')\n  --indent indent                 number of spaces to indent the result, 0 to disable\n                                    pretty-printing (defaults to 2)\n  --debug                         interactively debug any errors that come up\n  --inspect                       interactively explore the data\n\n```\n\nanything you can do at the command line readily translates to python\ncode, so you've always got a path forward when complexity starts to\nramp up.\n\n\n## examples\n#### without glom\n```python\n>>> data = {'a': {'b': {'c': 'd'}}}\n>>> data['a']['b']['c']\n'd'\n>>> data2 = {'a': {'b': none}}\n>>> data2['a']['b']['c']\ntraceback (most recent call last):\n...\ntypeerror: 'nonetype' object is not subscriptable\n```\n\n#### with glom\n```python\n>>> glom(data, 'a.b.c')\n'd'\n>>> glom(data2, 'a.b.c')\ntraceback (most recent call last):\n...\npathaccesserror: could not access 'c', index 2 in path path('a', 'b', 'c'), got error: ...\n```\n\n## learn more\n\n<img width=\"30%\" align=\"right\" src=\"https://raw.githubusercontent.com/mahmoud/glom/master/docs/_static/comet_multi.png\">\n\nif all this seems interesting, continue exploring glom below:\n\n* [glom tutorial][tutorial]\n* [full api documentation at read the docs][rtd]\n* [original announcement blog post (2018-05-09)][glom_announce]\n* [frequently asked questions][faq]\n* [pycon 2018 lightning talk (2018-05-11)][pycon_talk]\n\nall of the links above are overflowing with examples, but should you\nfind anything about the docs, or glom itself, lacking, [please submit\nan issue][gh_issues]!\n\n[rtd]: https://glom.readthedocs.io\n[cli_rtd]: http://glom.readthedocs.io/en/latest/cli.html\n[tutorial]: https://glom.readthedocs.io/en/latest/tutorial.html\n[faq]: https://glom.readthedocs.io/en/latest/faq.html\n[glom_announce]: https://sedimental.org/glom_restructured_data.html\n[gh_issues]: https://github.com/mahmoud/glom/issues/\n[pycon_talk]: https://www.youtube.com/watch?v=btafl8p2dke&t=18m07s\n\nin the meantime, just remember: when you've got nested data, glom it! \u2604\ufe0f\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "glom",
  "package_url": "https://pypi.org/project/glom/",
  "project_url": "https://pypi.org/project/glom/",
  "project_urls": {
    "Documentation": "https://glom.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/mahmoud/glom"
  },
  "release_url": "https://pypi.org/project/glom/23.5.0/",
  "requires_dist": [
    "boltons (>=19.3.0)",
    "attrs",
    "face (==20.1.1)",
    "tomli ; (python_version < \"3.11\") and extra == 'toml'",
    "PyYAML ; extra == 'yaml'"
  ],
  "requires_python": "",
  "summary": "a declarative object transformer and formatter, for conglomerating nested data.",
  "version": "23.5.0",
  "releases": [],
  "developers": [
    "mahmoud@hatnote.com",
    "mahmoud_hashemi_and_kurt_rose"
  ],
  "kwds": "glom_restructured_data glom structures data python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_glom",
  "homepage": "https://github.com/mahmoud/glom",
  "release_count": 24,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_boltons",
    "pypi_face",
    "pypi_pyyaml",
    "pypi_tomli"
  ]
}
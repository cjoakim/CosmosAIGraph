{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "=============================================================================\n``pipreqs`` - generate requirements.txt file for any project based on imports\n=============================================================================\n\n.. image:: https://img.shields.io/travis/bndr/pipreqs.svg\n        :target: https://travis-ci.org/bndr/pipreqs\n\n\n.. image:: https://img.shields.io/pypi/v/pipreqs.svg\n        :target: https://pypi.python.org/pypi/pipreqs\n\n\n.. image:: https://codecov.io/gh/bndr/pipreqs/branch/master/graph/badge.svg?token=0rfpfuzeax\n        :target: https://codecov.io/gh/bndr/pipreqs\n\n.. image:: https://img.shields.io/pypi/l/pipreqs.svg\n        :target: https://pypi.python.org/pypi/pipreqs\n\n\n\ninstallation\n------------\n\n::\n\n    pip install pipreqs\n\nusage\n-----\n\n::\n\n    usage:\n        pipreqs [options] [<path>]\n\n    arguments:\n        <path>                the path to the directory containing the application files for which a requirements file\n                              should be generated (defaults to the current working directory)\n\n    options:\n        --use-local           use only local package info instead of querying pypi\n        --pypi-server <url>   use custom pypi server\n        --proxy <url>         use proxy, parameter will be passed to requests library. you can also just set the\n                              environments parameter in your terminal:\n                              $ export http_proxy=\"http://10.10.1.10:3128\"\n                              $ export https_proxy=\"https://10.10.1.10:1080\"\n        --debug               print debug information\n        --ignore <dirs>...    ignore extra directories, each separated by a comma\n        --no-follow-links     do not follow symbolic links in the project\n        --encoding <charset>  use encoding parameter for file open\n        --savepath <file>     save the list of requirements in the given file\n        --print               output the list of requirements in the standard output\n        --force               overwrite existing requirements.txt\n        --diff <file>         compare modules in requirements.txt to project imports\n        --clean <file>        clean up requirements.txt by removing modules that are not imported in project\n        --mode <scheme>       enables dynamic versioning with <compat>, <gt> or <non-pin> schemes\n                              <compat> | e.g. flask~=1.1.2\n                              <gt>     | e.g. flask>=1.1.2\n                              <no-pin> | e.g. flask\n\nexample\n-------\n\n::\n\n    $ pipreqs /home/project/location\n    successfully saved requirements file in /home/project/location/requirements.txt\n\ncontents of requirements.txt\n\n::\n\n    wheel==0.23.0\n    yarg==0.1.9\n    docopt==0.6.2\n\nwhy not pip freeze?\n-------------------\n\n- ``pip freeze`` only saves the packages that are installed with ``pip install`` in your environment.\n- ``pip freeze`` saves all packages in the environment including those that you don't use in your current project (if you don't have ``virtualenv``).\n- and sometimes you just need to create ``requirements.txt`` for a new project without installing modules.\n\n\n\n\nhistory\n-------\n\n0.4.11 (2020-03-29)\n--------------------\n\n* implement '--mode' (jake teo, jerome chan)\n\n0.4.8 (2017-06-30)\n--------------------\n\n* implement '--clean' and '--diff' (kxrd)\n* exclude concurrent{,.futures} from stdlib if py2 (kxrd)\n\n0.4.7 (2017-04-20)\n--------------------\n\n* bug: remove package/version duplicates\n* style: pep8\n\n0.4.5 (2016-12-13)\n---------------------\n\n* fixed the --pypi-server option\n\n0.4.4 (2016-07-14)\n---------------------\n\n* remove spaces in output\n* add package to output even without version\n\n0.4.2 (2016-02-10)\n---------------------\n\n* fix duplicated lines in requirements.txt (dmitry pribysh)\n\n0.4.1 (2016-02-05)\n---------------------\n\n* added ignore option (nick rhinehart)\n\n0.4.0 (2016-01-28)\n---------------------\n\n* walk abstract syntax tree to find imports (kay sackey)\n\n0.3.9 (2016-01-20)\n---------------------\n\n* fix regex for docstring comments (#35)\n\n0.3.8 (2016-01-12)\n---------------------\n\n* add more package mapping\n* fix(pipreqs/mapping): remove pylab reference to matplotlib\n* remove comments \"\"\" before going through imports\n* update proxy documentation\n\n0.3.1 (2015-10-20)\n---------------------\n\n* fixed lint warnings (ej lee)\n* add --encoding parameter for open() (ej lee)\n* support windows directory separator (ej lee)\n\n0.3.0 (2015-09-29)\n---------------------\n\n* add --proxy option\n* add --pypi-server option\n\n0.2.9 (2015-09-24)\n---------------------\n\n* ignore irreverent directory when generating requirement.txt (lee wei)\n* modify logging level of \"requirement.txt already exists\" to warning (lee wei)\n\n0.2.8 (2015-05-11)\n---------------------\n\n* add --force option as a protection for overwrites\n\n0.2.6 (2015-05-11)\n---------------------\n\n* fix exception when 'import' is used inside package name #17\n* add more tests\n\n0.2.5 (2015-05-11)\n---------------------\n\n* fix exception when 'import' is used in comments #17\n* fix duplicate entries in requirements.txt\n\n0.2.4 (2015-05-10)\n---------------------\n\n* refactoring\n* fix \"import as\"\n\n0.2.3 (2015-05-09)\n---------------------\n\n* fix multiple alias imports on the same line (tiago costa)\n* more package mappings\n\n0.2.2 (2015-05-08)\n---------------------\n\n* add importname -> packagename mapping\n* more tests\n\n0.2.1 (2015-05-08)\n---------------------\n\n* fix for typeerror for implicit conversion\n\n0.2.0 (2015-05-06)\n---------------------\n\n* add --use-local option\n* exclude relative imports. (dongwon shin)\n* use \"latest_release_id\" instead of \"release_ids[-1]\" (dongwon shin)\n\n0.1.9 (2015-05-01)\n---------------------\n\n* output tuning (harri berglund)\n* use str.partition() to simplify the logic (cclaus)\n\n0.1.8 (2015-04-26)\n---------------------\n\n* fixed problems with local imports (dongwon shin)\n* fixed problems with imports with 'as' (dongwon shin)\n* fix indentation, pep8 styling. (michael borisov)\n* optimize imports and adding missing import for sys module. (michael borisov)\n\n0.1.7 (2015-04-24)\n---------------------\n\n* add more assertions in tests\n* add more verbose output\n* add recursive delete to makefile clean\n* update readme\n\n0.1.6 (2015-04-22)\n---------------------\n\n* py3 print function\n\n0.1.5 (2015-04-22)\n---------------------\n\n* add readme, add examples\n* add stdlib into package\n\n0.1.1 (2015-04-22)\n---------------------\n\n* fix regex matching for imports\n* release on pypi\n\n0.1.0 (2015-04-22)\n---------------------\n\n* first release on github.\n",
  "docs_url": null,
  "keywords": "pip requirements imports",
  "license": "apache license",
  "name": "pipreqs",
  "package_url": "https://pypi.org/project/pipreqs/",
  "project_url": "https://pypi.org/project/pipreqs/",
  "project_urls": {
    "Homepage": "https://github.com/bndr/pipreqs"
  },
  "release_url": "https://pypi.org/project/pipreqs/0.4.13/",
  "requires_dist": [
    "docopt",
    "yarg"
  ],
  "requires_python": ">=3.7",
  "summary": "pip requirements.txt generator based on imports in project",
  "version": "0.4.13",
  "releases": [],
  "developers": [
    "vadim.kravcenko@gmail.com",
    "vadim_kravcenko"
  ],
  "kwds": "pipreqs pip makefile requirements python",
  "license_kwds": "apache license",
  "libtype": "pypi",
  "id": "pypi_pipreqs",
  "homepage": "https://github.com/bndr/pipreqs",
  "release_count": 41,
  "dependency_ids": [
    "pypi_docopt",
    "pypi_yarg"
  ]
}
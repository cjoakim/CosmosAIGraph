{
  "classifiers": [],
  "description": "# python bindings for xatlas\n\n(unofficial) python bindings for [xatlas](https://github.com/jpcy/xatlas), a library that generates texture coordinates for triangle meshes.\n\n## installation\n\n### from source\n\n```bash\ngit clone --recursive https://github.com/mworchel/xatlas-python.git\npip install ./xatlas-python\n```\n\n### using pip\n\n```bash\npip install xatlas\n```\n\n## usage\n\n### parametrize a mesh and export it\n\n```python\nimport trimesh\nimport xatlas\n\n# we use trimesh (https://github.com/mikedh/trimesh) to load a mesh but you can use any library.\nmesh = trimesh.load_mesh(\"input.obj\")\n\n# the parametrization potentially duplicates vertices.\n# `vmapping` contains the original vertex index for each new vertex (shape n, type uint32).\n# `indices` contains the vertex indices of the new triangles (shape fx3, type uint32)\n# `uvs` contains texture coordinates of the new vertices (shape nx2, type float32)\nvmapping, indices, uvs = xatlas.parametrize(mesh.vertices, mesh.faces)\n\n# trimesh needs a material to export uv coordinates and always creates a *.mtl file.\n# alternatively, we can use the `export` helper function to export the mesh as obj.\nxatlas.export(\"output.obj\", mesh.vertices[vmapping], indices, uvs)\n\n# both `xatlas.parametrize` and `xatlas.export` also accept vertex normals\n```\n\n### parametrize multiple meshes using one atlas\n\n```python\nmesh1 = trimesh.load_mesh(\"input1.obj\")\nmesh2 = trimesh.load_mesh(\"input2.obj\")\n\natlas = xatlas.atlas()\n\natlas.add_mesh(mesh1.vertices, mesh1.faces)\natlas.add_mesh(mesh2.vertices, mesh2.faces)\n\n# optionally parametrize the generation with\n# `xatlas.chartoptions` and `xatlas.packoptions`.\natlas.generate()\n\nvmapping1, indices1, uvs1 = atlas[0]\nvmapping2, indices2, uvs2 = atlas[1]\n```\n\n### repack multiple parametrized meshes into one atlas\n\n```python\nvertices1, indices1, uvs1 = load_mesh_with_uvs(\"input1.obj\")\nvertices2, indices2, uvs2 = load_mesh_with_uvs(\"input2.obj\")\n\natlas = xatlas.atlas()\n\natlas.add_uv_mesh(uvs1, indices1)\natlas.add_uv_mesh(uvs2, indices2)\n\natlas.generate()\n\nvmapping1, indices1, uvs1 = atlas[0]\nvmapping2, indices2, uvs2 = atlas[1]\n```\n\n### query the atlas\n\n```python\natlas.mesh_count  # number of meshes\nlen(atlas)        # convenience binding for `atlas.mesh_count`\natlas.get_mesh(i) # data for the i-th mesh\natlas[i]          # convenience binding for `atlas.get_mesh`\n\natlas.width       # width of the atlas \natlas.height      # height of the atlas\n\natlas.utilization        # utilization of the first atlas\natlas.get_utilization(i) # utilization of i-th atlas\n\n# the image requires passing custom packoptions:\n#   pack_options = xatlas.packoptions()\n#   pack_options.create_image = true\n#   atlas.generate(pack_options=pack_options)\natlas.chart_image        # debug image of the first atlas\natlas.get_chart_image(i) # debug image of the i-th atlas\n\n...               # see xatlas documentation for all properties\n```\n\n## license\n\nthe xatlas python bindings are provided under a mit license. by using, distributing, or contributing to this project, you agree to the terms and conditions of this license.\n\n## references\n\ntest model taken from the [abc dataset](https://deep-geometry.github.io/abc-dataset/)\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "xatlas",
  "package_url": "https://pypi.org/project/xatlas/",
  "project_url": "https://pypi.org/project/xatlas/",
  "project_urls": {
    "Homepage": "https://github.com/mworchel/xatlas-python"
  },
  "release_url": "https://pypi.org/project/xatlas/0.0.8/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python bindings for xatlas",
  "version": "0.0.8",
  "releases": [],
  "developers": [
    "m.worchel@campus.tu-berlin.de",
    "markus_worchel"
  ],
  "kwds": "xatlas mesh load_mesh_with_uvs load_mesh add_uv_mesh",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_xatlas",
  "homepage": "https://github.com/mworchel/xatlas-python",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure key vault administration client library for python\n\n>**note:** the administration library only works with [managed hsm][managed_hsm] \u2013 functions targeting a key vault will fail.\n\nazure key vault helps solve the following problems:\n- vault administration (this library) - role-based access control (rbac), and vault-level backup and restore options\n- cryptographic key management ([azure-keyvault-keys](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-keys)) - create, store, and control\naccess to the keys used to encrypt your data\n- secrets management\n([azure-keyvault-secrets](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, api keys,\nand other secrets\n- certificate management\n([azure-keyvault-certificates](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private ssl/tls certificates\n\n[source code][library_src]\n| [package (pypi)][pypi_package_administration]\n| [package (conda)](https://anaconda.org/microsoft/azure-keyvault/)\n| [api reference documentation][reference_docs]\n| [product documentation][keyvault_docs]\n| [samples][administration_samples]\n\n## _disclaimer_\n\n_azure sdk python packages support for python 2.7 has ended 01 january 2022. for more information and questions, please refer to https://github.com/azure/azure-sdk-for-python/issues/20691._\n_python 3.7 or later is required to use this package. for more details, please refer to [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy)._\n\n## getting started\n### install packages\ninstall [azure-keyvault-administration][pypi_package_administration] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```bash\npip install azure-keyvault-administration azure-identity\n```\n[azure-identity][azure_identity] is used for azure active directory\nauthentication as demonstrated below.\n\n### prerequisites\n* an [azure subscription][azure_sub]\n* python 3.7 or later\n* an existing [key vault managed hsm][managed_hsm]. if you need to create one, you can do so using the azure cli by following the steps in [this document][managed_hsm_cli].\n\n### authenticate the client\nin order to interact with the azure key vault service, you will need an instance of either a [keyvaultaccesscontrolclient](#create-a-keyvaultaccesscontrolclient) or [keyvaultbackupclient](#create-a-keyvaultbackupclient), as well as a **vault url** (which you may see as \"dns name\" in the azure portal) and a credential object. this document demonstrates using a [defaultazurecredential][default_cred_ref], which is appropriate for most scenarios, including local development and production environments. we recommend using a [managed identity][managed_identity] for authentication in production environments.\n\nsee [azure-identity][azure_identity] documentation for more information about other methods of authentication and their corresponding credential types.\n\n#### create a keyvaultaccesscontrolclient\nafter configuring your environment for the [defaultazurecredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create an access control client (replacing the value of `vault_url` with your managed hsm's url):\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultaccesscontrolclient\n\ncredential = defaultazurecredential()\n\nclient = keyvaultaccesscontrolclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n```\n\n> **note:** for an asynchronous client, import `azure.keyvault.administration.aio`'s `keyvaultaccesscontrolclient` instead.\n\n#### create a keyvaultbackupclient\nafter configuring your environment for the [defaultazurecredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a backup client (replacing the value of `vault_url` with your managed hsm's url):\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultbackupclient\n\ncredential = defaultazurecredential()\n\nclient = keyvaultbackupclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n```\n\n> **note:** for an asynchronous client, import `azure.keyvault.administration.aio`'s `keyvaultbackupclient` instead.\n\n#### create a keyvaultsettingsclient\nafter configuring your environment for the [defaultazurecredential][default_cred_ref] to use a suitable method of authentication, you can do the following to create a settings client (replacing the value of `vault_url` with your managed hsm's url):\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultsettingsclient\n\ncredential = defaultazurecredential()\n\nclient = keyvaultsettingsclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n```\n\n> **note:** for an asynchronous client, import `azure.keyvault.administration.aio`'s `keyvaultsettingsclient` instead.\n\n## key concepts\n\n### role definition\na role definition defines the operations that can be performed, such as read, write, and delete. it can also define the operations that are excluded from allowed operations.\n\na role definition is specified as part of a role assignment.\n\n### role assignment\na role assignment is the association of a role definition to a service principal. they can be created, listed, fetched individually, and deleted.\n\n### keyvaultaccesscontrolclient\na `keyvaultaccesscontrolclient` manages role definitions and role assignments.\n\n### keyvaultbackupclient\na `keyvaultbackupclient` performs full key backups, full key restores, and selective key restores.\n\n### keyvaultsettingsclient\n\na `keyvaultsettingsclient` manages managed hsm account settings.\n\n## examples\nthis section contains code snippets covering common tasks:\n* access control\n    * [list all role definitions](#list-all-role-definitions)\n    * [set, get, and delete a role definition](#set-get-and-delete-a-role-defintion)\n    * [list all role assignments](#list-all-role-assignments)\n    * [create, get, and delete a role assignment](#create-get-and-delete-a-role-assignment)\n* backup and restore\n    * [perform a full key backup](#perform-a-full-key-backup)\n    * [perform a full key restore](#perform-a-full-key-restore)\n\n### list all role definitions\nlist the role definitions available for assignment.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultaccesscontrolclient, keyvaultrolescope\n\ncredential = defaultazurecredential()\n\nclient = keyvaultaccesscontrolclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n\n# this will list all role definitions available for assignment\nrole_definitions = client.list_role_definitions(keyvaultrolescope.global)\n\nfor definition in role_definitions:\n    print(definition.id)\n    print(definition.role_name)\n    print(definition.description)\n```\n\n### set, get, and delete a role definition\n\n`set_role_definition` can be used to either create a custom role definition or update an existing definition with the specified name.\n\n```python\nimport uuid\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import (\n    keyvaultaccesscontrolclient,\n    keyvaultdataaction,\n    keyvaultpermission,\n    keyvaultrolescope\n)\n\ncredential = defaultazurecredential()\n\nclient = keyvaultaccesscontrolclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n\n# create a custom role definition\npermissions = [keyvaultpermission(allowed_data_actions=[keyvaultdataaction.read_hsm_key])]\ncreated_definition = client.set_role_definition(keyvaultrolescope.global, permissions=permissions)\n\n# update the custom role definition\npermissions = [\n    keyvaultpermission(allowed_data_actions=[], denied_data_actions=[keyvaultdataaction.read_hsm_key])\n]\nupdated_definition = client.set_role_definition(\n    keyvaultrolescope.global, permissions=permissions, role_name=created_definition.name\n)\n\n# get the custom role definition\ndefinition = client.get_role_definition(keyvaultrolescope.global, role_name=definition_name)\n\n# delete the custom role definition\ndeleted_definition = client.delete_role_definition(keyvaultrolescope.global, role_name=definition_name)\n```\n\n### list all role assignments\nbefore creating a new role assignment in the [next snippet](#create-get-and-delete-a-role-assignment), list all of the current role assignments:\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultaccesscontrolclient, keyvaultrolescope\n\ncredential = defaultazurecredential()\n\nclient = keyvaultaccesscontrolclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n\n# this will list all role assignments\nrole_assignments = client.list_role_assignments(keyvaultrolescope.global)\n\nfor assignment in role_assignments:\n    print(assignment.name)\n    print(assignment.principal_id)\n    print(assignment.role_definition_id)\n```\n\n### create, get, and delete a role assignment\nassign a role to a service principal. this will require a role definition id and service principal object id. you can use an id from the retrieved [list of role definitions](#list-all-role-definitions) for the former, and an assignment's `principal_id` from the list retrieved in the [above snippet](#list-all-role-assignments) for the latter.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultaccesscontrolclient, keyvaultrolescope\n\ncredential = defaultazurecredential()\n\nclient = keyvaultaccesscontrolclient(\n    vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\",\n    credential=credential\n)\n\n# replace <role-definition-id> with the id of a definition from the fetched list from an earlier example\nrole_definition_id = \"<role-definition-id>\"\n# replace <service-principal-object-id> with the principal_id of an assignment returned from the previous example\nprincipal_id = \"<service-principal-object-id>\"\n\n# first, let's create the role assignment\nrole_assignment = client.create_role_assignment(keyvaultrolescope.global, role_definition_id, principal_id)\nprint(role_assignment.name)\nprint(role_assignment.principal_id)\nprint(role_assignment.role_definition_id)\n\n# now, we get it\nrole_assignment = client.get_role_assignment(keyvaultrolescope.global, role_assignment.name)\nprint(role_assignment.name)\nprint(role_assignment.principal_id)\nprint(role_assignment.role_definition_id)\n\n# finally, we delete this role assignment\nrole_assignment = client.delete_role_assignment(keyvaultrolescope.global, role_assignment.name)\nprint(role_assignment.name)\nprint(role_assignment.principal_id)\nprint(role_assignment.role_definition_id)\n```\n\n### perform a full key backup\nback up your entire collection of keys. the backing store for full key backups is a blob storage container using shared access signature authentication.\n\nfor more details on creating a sas token using the `blobserviceclient`, see the sample [here](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication.py#l105).\nalternatively, it is possible to [generate a sas token in storage explorer](https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer)\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultbackupclient\n\ncredential = defaultazurecredential()\nclient = keyvaultbackupclient(vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\", credential=credential)\n\n# blob storage container url, for example https://<account name>.blob.core.windows.net/backup\nblob_storage_url = \"<your-blob-storage-url>\"\nsas_token = \"<your-sas-token>\"  # replace with a sas token to your storage account\n\n# backup is a long-running operation. the client returns a poller object whose result() method\n# blocks until the backup is complete, then returns an object representing the backup operation.\nbackup_poller = client.begin_backup(blob_storage_url, sas_token)\nbackup_operation = backup_poller.result()\n\n# this is the azure storage blob url of the backup\nprint(backup_operation.folder_url)\n```\n\n\n### perform a full key restore\nrestore your entire collection of keys from a backup. the data source for a full key restore is a storage blob accessed using shared access signature authentication.\nyou will also need the `azure_storage_blob_container_uri` from the [above snippet](#perform-a-full-key-backup).\n\nfor more details on creating a sas token using the `blobserviceclient`, see the sample [here](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob/samples/blob_samples_authentication.py#l105).\nalternatively, it is possible to [generate a sas token in storage explorer](https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer)\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultbackupclient\n\ncredential = defaultazurecredential()\nclient = keyvaultbackupclient(vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\", credential=credential)\n\nsas_token = \"<your-sas-token>\"  # replace with a sas token to your storage account\n\n# url to a storage blob, for example https://<account name>.blob.core.windows.net/backup/mhsm-account-2020090117323313\nblob_url = \"<your-blob-url>\"\n\n# restore is a long-running operation. the client returns a poller object whose wait() method\n# blocks until the restore is complete.\nrestore_poller = client.begin_restore(blob_url, sas_token)\nrestore_poller.wait()\n```\n\n## troubleshooting\n\nsee the `azure-keyvault-administration`\n[troubleshooting guide](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/troubleshooting.md)\nfor details on how to diagnose various failure scenarios.\n\n### general\nkey vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nfor example, if you try to get a role assignment that doesn't exist, keyvaultaccesscontrolclient\nraises [resourcenotfounderror](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.keyvault.administration import keyvaultaccesscontrolclient\nfrom azure.core.exceptions import resourcenotfounderror\n\ncredential = defaultazurecredential()\nclient = keyvaultaccesscontrolclient(vault_url=\"https://my-managed-hsm-name.managedhsm.azure.net/\", credential=credential)\n\ntry:\n    client.get_role_assignment(\"/\", \"which-does-not-exist\")\nexcept resourcenotfounderror as e:\n    print(e.message)\n```\n\nclients from the administration library can only be used to perform operations on a managed hsm, so attempting to do so on a key vault will raise an error.\n\n## next steps\nseveral samples are available in the azure sdk for python github repository. these samples provide example code for additional key vault scenarios:\n| file | description |\n|-------------|-------------|\n| [access_control_operations.py][access_control_operations_sample] | create/update/delete role definitions and role assignments |\n| [access_control_operations_async.py][access_control_operations_async_sample] | create/update/delete role definitions and role assignments with an async client |\n| [backup_restore_operations.py][backup_operations_sample] | full backup and restore |\n| [backup_restore_operations_async.py][backup_operations_async_sample] | full backup and restore with an async client |\n| [settings_operations.py][settings_operations_sample] | list and update key vault settings |\n| [settings_operations_async.py][settings_operations_async_sample] | list and update key vault settings with an async client |\n\n###  additional documentation\nfor more extensive documentation on azure key vault, see the [api reference documentation][reference_docs].\n\nfor more extensive documentation on managed hsm, see the [service documentation][managed_hsm].\n\n## contributing\nthis project welcomes contributions and suggestions. most contributions require\nyou to agree to a contributor license agreement (cla) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nfor details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether\nyou need to provide a cla and decorate the pr appropriately (e.g., label,\ncomment). simply follow the instructions provided by the bot. you will only\nneed to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct].\nfor more information, see the\n[code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n<!-- links -->\n[access_control]: https://docs.microsoft.com/azure/key-vault/managed-hsm/access-control\n[access_control_operations_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations.py\n[access_control_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/access_control_operations_async.py\n[administration_samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_core_exceptions]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_sub]: https://azure.microsoft.com/free/\n\n[backup_operations_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/backup_restore_operations_async.py\n[best_practices]: https://docs.microsoft.com/azure/key-vault/managed-hsm/best-practices\n[built_in_roles]: https://docs.microsoft.com/azure/key-vault/managed-hsm/built-in-roles\n\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.defaultazurecredential\n\n[keyvault_docs]: https://docs.microsoft.com/azure/key-vault/\n\n[library_src]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/azure/keyvault/administration\n\n[managed_hsm]: https://docs.microsoft.com/azure/key-vault/managed-hsm/overview\n[managed_hsm_cli]: https://docs.microsoft.com/azure/key-vault/managed-hsm/quick-create-cli\n[managed_identity]: https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview\n\n[pip]: https://pypi.org/project/pip/\n[pypi_package_administration]: https://pypi.org/project/azure-keyvault-administration\n\n[reference_docs]: https://aka.ms/azsdk/python/keyvault-administration/docs\n\n[settings_operations_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations.py\n[settings_operations_async_sample]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration/samples/settings_operations_async.py\n\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fkeyvault%2fazure-keyvault-administration%2freadme.png)\n\n\n# release history\n\n## 4.3.0 (2023-03-16)\n\n### features added\n- added support for service api version `7.4`\n- clients each have a `send_request` method that can be used to send custom requests using the\n  client's existing pipeline ([#25172](https://github.com/azure/azure-sdk-for-python/issues/25172))\n- (from 4.3.0b1) added sync and async `keyvaultsettingsclient`s for getting and updating managed hsm settings\n- the `keyvaultsetting` class has a `getboolean` method that will return the setting's `value` as a `bool`, if possible,\n  and raise a `valueerror` otherwise\n\n### breaking changes\n> these changes do not impact the api of stable versions such as 4.2.0. only code written against a beta version such as 4.3.0b1 may be affected.\n- `keyvaultsettingsclient.update_setting` now accepts a single `setting` argument (a `keyvaultsetting` instance)\n  instead of a `name` and `value`\n- the `keyvaultsetting` model's `type` parameter and attribute have been renamed to `setting_type`\n- the `settingtype` enum has been renamed to `keyvaultsettingtype`\n\n### other changes\n- key vault api version `7.4` is now the default\n- (from 4.3.0b1) python 3.6 is no longer supported. please use python version 3.7 or later.\n- (from 4.3.0b1) updated minimum `azure-core` version to 1.24.0\n- (from 4.3.0b1) dropped `msrest` requirement\n- (from 4.3.0b1) dropped `six` requirement\n- (from 4.3.0b1) added requirement for `isodate>=0.6.1` (`isodate` was required by `msrest`)\n- (from 4.3.0b1) added requirement for `typing-extensions>=4.0.1`\n\n## 4.3.0b1 (2022-11-15)\n\n### features added\n- added sync and async `keyvaultsettingsclient`s for getting and updating managed hsm settings.\n- added support for service api version `7.4-preview.1`\n\n### other changes\n- python 3.6 is no longer supported. please use python version 3.7 or later.\n- key vault api version `7.4-preview.1` is now the default\n- updated minimum `azure-core` version to 1.24.0\n- dropped `msrest` requirement\n- dropped `six` requirement\n- added requirement for `isodate>=0.6.1` (`isodate` was required by `msrest`)\n- added requirement for `typing-extensions>=4.0.1`\n\n## 4.2.0 (2022-09-19)\n\n### breaking changes\n- clients verify the challenge resource matches the vault domain. this should affect few customers,\n  who can provide `verify_challenge_resource=false` to client constructors to disable.\n  see https://aka.ms/azsdk/blog/vault-uri for more information.\n\n## 4.1.1 (2022-08-11)\n\n### other changes\n- documentation improvements \n  ([#25039](https://github.com/azure/azure-sdk-for-python/issues/25039))\n\n## 4.1.0 (2022-03-28)\n\n### features added\n- key vault api version 7.3 is now the default\n- added support for multi-tenant authentication when using `azure-identity`\n  1.8.0 or newer ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n### other changes\n- (from 4.1.0b3) python 2.7 is no longer supported. please use python version 3.6 or later.\n- (from 4.1.0b3) updated minimum `azure-core` version to 1.20.0\n- (from 4.1.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698)). see\n  https://aka.ms/azsdk/python/identity/tokencredential for more details on how to integrate\n  this parameter if `get_token` is implemented by a custom credential.\n\n## 4.1.0b3 (2022-02-08)\n\n### other changes\n- python 2.7 is no longer supported. please use python version 3.6 or later.\n- updated minimum `azure-core` version to 1.20.0\n- (from 4.1.0b2) to support multi-tenant authentication, `get_token` calls during challenge\n  authentication requests now pass in a `tenant_id` keyword argument\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n## 4.1.0b2 (2021-11-11)\n\n### features added\n- added support for multi-tenant authentication when using `azure-identity` 1.7.1 or newer\n  ([#20698](https://github.com/azure/azure-sdk-for-python/issues/20698))\n\n### other changes\n- updated minimum `azure-core` version to 1.15.0\n\n## 4.1.0b1 (2021-09-09)\n\n### features added\n- key vault api version 7.3-preview is now the default\n\n## 4.0.0 (2021-06-22)\n### changed\n- key vault api version 7.2 is now the default\n- `keyvaultaccesscontrolclient.delete_role_assignment` and\n  `.delete_role_definition` no longer raise an error  when the resource to be\n  deleted is not found\n- raised minimum azure-core version to 1.11.0\n\n### added\n- `keyvaultaccesscontrolclient.set_role_definition` accepts an optional\n  `assignable_scopes` keyword-only argument\n\n### breaking changes\n- `keyvaultaccesscontrolclient.delete_role_assignment` and\n  `.delete_role_definition` return none\n- changed parameter order in `keyvaultaccesscontrolclient.set_role_definition`.\n  `permissions` is now an optional keyword-only argument\n- renamed `backupoperation` to `keyvaultbackupresult`, and removed all but\n  its `folder_url` property\n- removed `restoreoperation` and `selectivekeyrestoreoperation` classes\n- removed `keyvaultbackupclient.begin_selective_restore`. to restore a\n  single key, pass the key's name to `keyvaultbackupclient.begin_restore`:\n  ```\n  # before (4.0.0b3):\n  client.begin_selective_restore(folder_url, sas_token, key_name)\n\n  # after:\n  client.begin_restore(folder_url, sas_token, key_name=key_name)\n  ```\n- removed `keyvaultbackupclient.get_backup_status` and `.get_restore_status`. use\n  the pollers returned by `keyvaultbackupclient.begin_backup` and `.begin_restore`\n  to check whether an operation has completed\n- `keyvaultroleassignment`'s `principal_id`, `role_definition_id`, and `scope`\n  are now properties of a `properties` property\n  ```\n  # before (4.0.0b3):\n  print(keyvaultroleassignment.scope)\n\n  # after:\n  print(keyvaultroleassignment.properties.scope)\n  ```\n- renamed `keyvaultpermission` properties:\n  - `allowed_actions` -> `actions`\n  - `denied_actions` -> `not_actions`\n  - `allowed_data_actions` -> `data_actions`\n  - `denied_data_actions` -> `denied_data_actions`\n- renamed argument `role_assignment_name` to `name` in\n  `keyvaultaccesscontrolclient.create_role_assignment`, `.delete_role_assignment`,\n  and `.get_role_assignment`\n- renamed argument `role_definition_name` to `name` in\n  `keyvaultaccesscontrolclient.delete_role_definition` and `.get_role_definition`\n- renamed argument `role_scope` to `scope` in `keyvaultaccesscontrolclient` methods\n\n## 4.0.0b3 (2021-02-09)\n### added\n- `keyvaultaccesscontrolclient` supports managing custom role definitions\n\n### breaking changes\n- renamed `keyvaultbackupclient.begin_full_backup()` to `.begin_backup()`\n- renamed `keyvaultbackupclient.begin_full_restore()` to `.begin_restore()`\n- renamed `backupoperation.azure_storage_blob_container_uri` to `.folder_url`\n- renamed `id` property of `backupoperation`, `restoreoperation`, and\n `selectivekeyrestoreoperation` to `job_id`\n- renamed `blob_storage_uri` parameters of `keyvaultbackupclient.begin_restore()`\n  and `.begin_selective_restore()` to `folder_url`\n- removed redundant `folder_name` parameter from\n  `keyvaultbackupclient.begin_restore()` and `.begin_selective_restore()` (the\n  `folder_url` parameter contains the folder name)\n- renamed `keyvaultpermission` attributes:\n  - `actions` -> `allowed_actions`\n  - `data_actions` -> `allowed_data_actions`\n  - `not_actions` -> `denied_actions`\n  - `not_data_actions` -> `denied_data_actions`\n- renamed `keyvaultroleassignment.assignment_id` to `.role_assignment_id`\n- renamed `keyvaultrolescope` enum values:\n  - `global_value` -> `global`\n  - `keys_value` -> `keys`\n\n## 4.0.0b2 (2020-10-06)\n### added\n- `keyvaultbackupclient.get_backup_status` and `.get_restore_status` enable\n  checking the status of a pending operation by its job id\n  ([#13718](https://github.com/azure/azure-sdk-for-python/issues/13718))\n\n### breaking changes\n- the `role_assignment_name` parameter of\n  `keyvaultaccesscontrolclient.create_role_assignment` is now an optional\n  keyword-only argument. when this argument isn't passed, the client will\n  generate a name for the role assignment.\n  ([#13512](https://github.com/azure/azure-sdk-for-python/issues/13512))\n\n## 4.0.0b1 (2020-09-08)\n### added\n- `keyvaultaccesscontrolclient` performs role-based access control operations\n- `keyvaultbackupclient` performs full vault backup and full and selective\n  restore operations\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-keyvault-administration",
  "package_url": "https://pypi.org/project/azure-keyvault-administration/",
  "project_url": "https://pypi.org/project/azure-keyvault-administration/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration"
  },
  "release_url": "https://pypi.org/project/azure-keyvault-administration/4.3.0/",
  "requires_dist": [
    "azure-common (~=1.1)",
    "azure-core (<2.0.0,>=1.24.0)",
    "isodate (>=0.6.1)",
    "typing-extensions (>=4.0.1)"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure key vault administration client library for python",
  "version": "4.3.0",
  "releases": [],
  "developers": [
    "azurekeyvault@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "keyvault_docs azure_identity_pypi keyvaultsettingsclient keyvaultaccesscontrolclient keyvaultbackupclient",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_keyvault_administration",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/keyvault/azure-keyvault-administration",
  "release_count": 14,
  "dependency_ids": [
    "pypi_azure_common",
    "pypi_azure_core",
    "pypi_isodate",
    "pypi_typing_extensions"
  ]
}
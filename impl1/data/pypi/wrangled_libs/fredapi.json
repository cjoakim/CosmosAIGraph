{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: science/research",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "fredapi: python api for fred (federal reserve economic data)\n============================================================\n\n``fredapi`` is a python api for the\n`fred <http://research.stlouisfed.org/fred2/>`__ data provided by the\nfederal reserve bank of st. louis. ``fredapi`` provides a wrapper in\npython to the `fred web\nservice <http://api.stlouisfed.org/docs/fred/>`__, and also provides\nseveral conveninent methods for parsing and analyzing point-in-time data\n(i.e. historic data revisions) from\n`alfred <http://research.stlouisfed.org/tips/alfred/>`__\n\n``fredapi`` makes use of ``pandas`` and returns data to you in a\n``pandas`` ``series`` or ``dataframe``\n\ninstallation\n------------\n\n.. code:: sh\n\n    pip install fredapi\n\nbasic usage\n-----------\n\nfirst you need an api key, you can `apply for\none <http://api.stlouisfed.org/api_key.html>`__ for free on the fred\nwebsite. once you have your api key, you can set it in one of three\nways:\n\n-  set it to the evironment variable fred\\_api\\_key\n-  save it to a file and use the 'api\\_key\\_file' parameter\n-  pass it directly as the 'api\\_key' parameter\n\n.. code:: python\n\n    from fredapi import fred\n    fred = fred(api_key='insert api key here')\n    data = fred.get_series('sp500')\n\nworking with data revisions\n---------------------------\n\nmany economic data series contain frequent revisions. ``fredapi``\nprovides several convenient methods for handling data revisions and\nanswering the quesion of what-data-was-known-when.\n\nin `alfred <http://research.stlouisfed.org/tips/alfred/>`__ there is the\nconcept of a *vintage* date. basically every *observation* can have\nthree dates associated with it: *date*, *realtime\\_start* and\n*realtime\\_end*.\n\n-  date: the date the value is for\n-  realtime\\_start: the first date the value is valid\n-  realitime\\_end: the last date the value is valid\n\nfor instance, there has been three observations (data points) for the\ngdp of 2014 q1:\n\n.. code:: xml\n\n    <observation realtime_start=\"2014-04-30\" realtime_end=\"2014-05-28\" date=\"2014-01-01\" value=\"17149.6\"/>\n    <observation realtime_start=\"2014-05-29\" realtime_end=\"2014-06-24\" date=\"2014-01-01\" value=\"17101.3\"/>\n    <observation realtime_start=\"2014-06-25\" realtime_end=\"2014-07-29\" date=\"2014-01-01\" value=\"17016.0\"/>\n\nthis means the gdp value for q1 2014 has been released three times.\nfirst release was on 4/30/2014 for a value of 17149.6, and then there\nhave been two revisions on 5/29/2014 and 6/25/2014 for revised values of\n17101.3 and 17016.0, respectively.\n\nget first data release only (i.e. ignore revisions)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    data = fred.get_series_first_release('gdp')\n\nget latest data\n~~~~~~~~~~~~~~~\n\nnote that this is the same as simply calling ``get_series()``\n\n.. code:: python\n\n    data = fred.get_series_latest_release('gdp')\n\nget latest data known on a given date\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    fred.get_series_as_of_date('gdp', '6/1/2014')\n\nget all data release dates\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthis returns a ``dataframe`` with all the data from alfred\n\n.. code:: python\n\n    df = fred.get_series_all_releases('gdp')\n    df.tail()\n\nget all vintage dates\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    vintage_dates = fred.get_series_vintage_dates('gdp')\n\nsearch for data series\n~~~~~~~~~~~~~~~~~~~~~~\n\nyou can always search for data series on the fred website. but sometimes\nit can be more convenient to search programmatically. ``fredapi``\nprovides a ``search()`` method that does a fulltext search and returns a\n``dataframe`` of results.\n\n.. code:: python\n\n    fred.search('potential gdp')\n\nyou can also search by release id and category id with various options\n\n.. code:: python\n\n    df1 = fred.search_by_release(11)\n    df2 = fred.search_by_category(101, limit=10, order_by='popularity', sort_order='desc')\n\ndependencies\n------------\n\n-  `pandas <http://pandas.pydata.org/>`__\n\nmore examples\n-------------\n\n- i have a `blog post with more examples <http://mortada.net/python-api-for-fred.html>`__ written in an `ipython` notebook\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fredapi",
  "package_url": "https://pypi.org/project/fredapi/",
  "project_url": "https://pypi.org/project/fredapi/",
  "project_urls": {
    "Homepage": "https://github.com/mortada/fredapi"
  },
  "release_url": "https://pypi.org/project/fredapi/0.5.1/",
  "requires_dist": [
    "pandas"
  ],
  "requires_python": "",
  "summary": "python api for federal reserve economic data (fred) from st. louis fed",
  "version": "0.5.1",
  "releases": [],
  "developers": [
    "mortada_mehyar"
  ],
  "kwds": "fredapi python _api api fred",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fredapi",
  "homepage": "https://github.com/mortada/fredapi",
  "release_count": 15,
  "dependency_ids": [
    "pypi_pandas"
  ]
}
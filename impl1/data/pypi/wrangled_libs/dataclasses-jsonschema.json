{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "dataclasses json schema\n=======================\n\n.. image:: https://github.com/s-knibbs/dataclasses-jsonschema/workflows/tox%20tests/badge.svg?branch=master\n    :target: https://github.com/s-knibbs/dataclasses-jsonschema/actions\n\n.. image:: https://badge.fury.io/py/dataclasses-jsonschema.svg\n    :target: https://badge.fury.io/py/dataclasses-jsonschema\n\n.. image:: https://img.shields.io/lgtm/grade/python/g/s-knibbs/dataclasses-jsonschema.svg?logo=lgtm&logowidth=18\n    :target: https://lgtm.com/projects/g/s-knibbs/dataclasses-jsonschema/context:python\n    :alt:    language grade: python\n\n**please note:** this project is in maintenance mode. i'm currently only making urgent bugfixes.\n\na library to generate json schema from python 3.7 dataclasses. python 3.6 is supported through the `dataclasses backport <https://github.com/ericvsmith/dataclasses>`_. aims to be a more lightweight alternative to similar projects such as `marshmallow <https://github.com/marshmallow-code/marshmallow>`_ & `pydantic <https://github.com/samuelcolvin/pydantic>`_.\n\nfeature overview\n----------------\n\n* support for draft-04, draft-06, swagger 2.0 & openapi 3 schema types\n* serialisation and deserialisation\n* data validation against the generated schema\n* `apispec <https://github.com/marshmallow-code/apispec>`_ support. example below_:\n\ninstallation\n------------\n\n.. code:: bash\n\n    ~$ pip install dataclasses-jsonschema\n\nfor improved validation performance using `fastjsonschema <https://github.com/horejsek/python-fastjsonschema>`_, install with:\n\n.. code:: bash\n\n    ~$ pip install dataclasses-jsonschema[fast-validation]\n\nfor improved uuid performance using `fastuuid <https://pypi.org/project/fastuuid/>`_, install with:\n\n.. code:: bash\n\n    ~$ pip install dataclasses-jsonschema[fast-uuid]\n\nfor improved date and datetime parsing performance using `ciso8601 <https://pypi.org/project/ciso8601/>`_, install with:\n\n.. code:: bash\n\n    ~$ pip install dataclasses-jsonschema[fast-dateparsing]\n\nbeware `ciso8601` doesn\u2019t support the entirety of the iso 8601 spec, only a popular subset.\n\n\nexamples\n--------\n\n.. code:: python\n\n    from dataclasses import dataclass\n\n    from dataclasses_jsonschema import jsonschemamixin\n\n\n    @dataclass\n    class point(jsonschemamixin):\n        \"a 2d point\"\n        x: float\n        y: float\n\n\nschema generation\n^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> pprint(point.json_schema())\n    {\n        'description': 'a 2d point',\n        'type': 'object',\n        'properties': {\n            'x': {'format': 'float', 'type': 'number'},\n            'y': {'format': 'float', 'type': 'number'}\n        },\n        'required': ['x', 'y']\n    }\n\ndata serialisation\n^^^^^^^^^^^^^^^^^^\n.. code:: python\n\n    >>> point(x=3.5, y=10.1).to_dict()\n    {'x': 3.5, 'y': 10.1}\n\ndeserialisation\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> point.from_dict({'x': 3.14, 'y': 1.5})\n    point(x=3.14, y=1.5)\n    >>> point.from_dict({'x': 3.14, y: 'wrong'})\n    dataclasses_jsonschema.validationerror: 'wrong' is not of type 'number'\n\ngenerating multiple schemas\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from dataclasses_jsonschema import jsonschemamixin, schematype\n    \n    @dataclass\n    class address(jsonschemamixin):\n        \"\"\"postal address\"\"\"\n        building: str\n        street: str\n        city: str\n    \n    @dataclass\n    class company(jsonschemamixin):\n        \"\"\"company details\"\"\"\n        name: str\n        address: address\n    \n    >>> pprint(jsonschemamixin.all_json_schemas(schema_type=schematype.swagger_v3))\n    {'address': {'description': 'postal address',\n                 'properties': {'building': {'type': 'string'},\n                                'city': {'type': 'string'},\n                                'street': {'type': 'string'}},\n                 'required': ['building', 'street', 'city'],\n                 'type': 'object'},\n     'company': {'description': 'company details',\n                 'properties': {'address': {'$ref': '#/components/schemas/address'},\n                                'name': {'type': 'string'}},\n                 'required': ['name', 'address'],\n                 'type': 'object'}}\n        \n\ncustom validation using `newtype <https://docs.python.org/3/library/typing.html#newtype>`_\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from dataclasses_jsonschema import jsonschemamixin, fieldencoder\n\n    phonenumber = newtype('phonenumber', str)\n    \n    class phonenumberfield(fieldencoder):\n    \n        @property\n        def json_schema(self):\n            return {'type': 'string', 'pattern': r'^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$'}\n    \n    jsonschemamixin.register_field_encoders({phonenumber: phonenumberfield()})\n    \n    @dataclass\n    class person(jsonschemamixin):\n        name: str\n        phone_number: phonenumber\n\nfor more examples `see the tests <https://github.com/s-knibbs/dataclasses-jsonschema/blob/master/tests/conftest.py>`_\n\n.. _below:\n\napispec plugin\n--------------\n**new in v2.5.0**\n\nopenapi & swagger specs can be generated using the apispec plugin:\n\n.. code:: python\n\n    from typing import optional, list\n    from dataclasses import dataclass\n\n    from apispec import apispec\n    from apispec_webframeworks.flask import flaskplugin\n    from flask import flask, jsonify\n    import pytest\n\n    from dataclasses_jsonschema.apispec import dataclassesplugin\n    from dataclasses_jsonschema import jsonschemamixin\n\n\n    # create an apispec\n    spec = apispec(\n        title=\"swagger petstore\",\n        version=\"1.0.0\",\n        openapi_version=\"3.0.2\",\n        plugins=[flaskplugin(), dataclassesplugin()],\n    )\n    \n    \n    @dataclass\n    class category(jsonschemamixin):\n        \"\"\"pet category\"\"\"\n        name: str\n        id: optional[int]\n\n    @dataclass\n    class pet(jsonschemamixin):\n        \"\"\"a pet\"\"\"\n        categories: list[category]\n        name: str\n\n\n    app = flask(__name__)\n\n\n    @app.route(\"/random\")\n    def random_pet():\n        \"\"\"a cute furry animal endpoint.\n        ---\n        get:\n          description: get a random pet\n          responses:\n            200:\n              content:\n                application/json:\n                  schema: pet\n        \"\"\"\n        pet = get_random_pet()\n        return jsonify(pet.to_dict())\n \n    # dependant schemas (e.g. 'category') are added automatically\n    spec.components.schema(\"pet\", schema=pet)\n    with app.test_request_context():\n        spec.path(view=random_pet)\n\ntodo\n----\n\n* add benchmarks against alternatives such as `pydantic <https://github.com/samuelcolvin/pydantic>`_ and `marshmallow <https://github.com/marshmallow-code/marshmallow>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "dataclasses-jsonschema",
  "package_url": "https://pypi.org/project/dataclasses-jsonschema/",
  "project_url": "https://pypi.org/project/dataclasses-jsonschema/",
  "project_urls": {
    "Homepage": "https://github.com/s-knibbs/dataclasses-jsonschema"
  },
  "release_url": "https://pypi.org/project/dataclasses-jsonschema/2.16.0/",
  "requires_dist": [
    "python-dateutil",
    "jsonschema",
    "dataclasses ; python_version < \"3.7\"",
    "typing-extensions ; python_version < \"3.8\"",
    "apispec ; extra == 'apispec'",
    "ciso8601 ; extra == 'fast-dateparsing'",
    "fastuuid ; extra == 'fast-uuid'",
    "fastjsonschema ; extra == 'fast-validation'",
    "apispec-webframeworks ; extra == 'test'",
    "apispec[yaml] ; extra == 'test'",
    "black (==22.8.0) ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "flask ; extra == 'test'",
    "isort ; extra == 'test'",
    "mypy ; extra == 'test'",
    "pytest-ordering ; extra == 'test'",
    "pytest ; extra == 'test'",
    "tox-gh-actions ; extra == 'test'",
    "tox ; extra == 'test'",
    "types-python-dateutil ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "json schema generation from dataclasses",
  "version": "2.16.0",
  "releases": [],
  "developers": [
    "simon.knibbs@gmail.com",
    "simon_knibbs"
  ],
  "kwds": "dataclasses_jsonschema jsonschemamixin jsonschema jsonify json",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dataclasses_jsonschema",
  "homepage": "https://github.com/s-knibbs/dataclasses-jsonschema",
  "release_count": 44,
  "dependency_ids": [
    "pypi_apispec",
    "pypi_apispec_webframeworks",
    "pypi_black",
    "pypi_ciso8601",
    "pypi_dataclasses",
    "pypi_fastjsonschema",
    "pypi_fastuuid",
    "pypi_flake8",
    "pypi_flask",
    "pypi_isort",
    "pypi_jsonschema",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_ordering",
    "pypi_python_dateutil",
    "pypi_tox",
    "pypi_tox_gh_actions",
    "pypi_types_python_dateutil",
    "pypi_typing_extensions"
  ]
}
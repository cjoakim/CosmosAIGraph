{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "string format parameter checker\n===============================\n\n.. image:: https://travis-ci.org/xzise/flake8-string-format.svg?branch=0.3.0\n   :alt: build status\n   :target: https://travis-ci.org/xzise/flake8-string-format\n\n.. image:: http://codecov.io/github/xzise/flake8-string-format/coverage.svg?branch=master\n   :alt: coverage status\n   :target: http://codecov.io/github/xzise/flake8-string-format?branch=master\n\n.. image:: https://badge.fury.io/py/flake8-string-format.svg\n   :alt: pypi entry\n   :target: https://pypi.python.org/pypi/flake8-string-format\n\nan extension for `flake8 <https://pypi.python.org/pypi/flake8>`_ to check the\nstrings and parameters using ``str.format``. it checks all strings whether they\nuse numbered parameters with an implicit index which isn't support in\npython 2.6.\n\nin all instances of ``'\u2026'.format(\u2026)`` it will also check whether there are\nenough parameters given. if the format call uses variable arguments, it'll just\ncheck whether the right types of arguments are present.\n\n\nplugin for flake8\n-----------------\n\nwhen both flake8 and ``flake8-string-format`` are installed, the plugin\nis available in ``flake8``::\n\n  $ flake8 --version\n  3.0.2 (flake8-string-format: 0.2.3, [\u2026]\n\nthis plugin supports flake8 2.6 as well as flake8 3.0. older or newer versions\nmay be supported too but they weren't tested.\n\nvia ``--ignore`` it's possible to ignore unindexed parameters::\n\n  $ flake8 some_file.py\n  ...\n  some_file.py:1:1: p101 format string does contain unindexed parameters\n\n  $ flake8 --ignore p101 some_file.py\n  ...\n\n\nparameters\n----------\n\nthis module doesn't add any additional parameters to flake8.\n\n\nerror codes\n-----------\n\nthis plugin is using the following error codes:\n\n+--------------------------------------------------------------------+\n| presence of implicit parameters                                    |\n+------+-------------------------------------------------------------+\n| p101 | format string does contain unindexed parameters             |\n+------+-------------------------------------------------------------+\n| p102 | docstring does contain unindexed parameters                 |\n+------+-------------------------------------------------------------+\n| p103 | other string does contain unindexed parameters              |\n+------+-------------------------------------------------------------+\n| missing values in the parameters                                   |\n+------+-------------------------------------------------------------+\n| p201 | format call uses too large index (index)                    |\n+------+-------------------------------------------------------------+\n| p202 | format call uses missing keyword (keyword)                  |\n+------+-------------------------------------------------------------+\n| p203 | format call uses keyword arguments but no named entries     |\n+------+-------------------------------------------------------------+\n| p204 | format call uses variable arguments but no numbered entries |\n+------+-------------------------------------------------------------+\n| p205 | format call uses implicit and explicit indexes together     |\n+------+-------------------------------------------------------------+\n| unused values in the parameters                                    |\n+------+-------------------------------------------------------------+\n| p301 | format call provides unused index (index)                   |\n+------+-------------------------------------------------------------+\n| p302 | format call provides unused keyword (keyword)               |\n+------+-------------------------------------------------------------+\n\n\noperation\n---------\n\nthe plugin will go through all ``bytes``, ``str`` and ``unicode`` instances. if\nit encounters ``bytes`` instances on python 3, it'll decode them using ascii and\nif that fails it'll skip that entry.\n\nthe strings are basically sorted into three types corresponding to the p1xx\nrange. only the format string can cause all errors while any other string can\nonly cause the corresponding p1xx error.\n\nfor this plugin all strings which are the first expression of the module or\nafter a function or class definition are considered docstrings.\n\nif the ``format`` method is used on a string or ``str.format`` with the string\nas the first parameter, it will consider this a format string and will analyze\nthe parameters of that call. if that call uses variable arguments, it cannot\nissue p201 and p202 as missing entries might be hidden in those variable\narguments. p301 and p302 can still be checked for any argument which is defined\nstatically.\n\n\npython 2.6 support\n``````````````````\n\npython 2.6 is only partially supported as it's using python's capability to\nformat a string. so if a string contains implicit parameters, it won't be\ndetected as a parameter on python 2.6 and thus it won't cause any p1xx errors.\nbut it might still cause an error p301 when variable arguments aren't used.\n\nso if python 2.6 compatibility is wished and thus implicit parameters aren't\nallowed, this plugin won't cause false positives.\n\n\nchanges\n-------\n0.3.0 - 2020-02-16\n``````````````````\n* removed support for standalone version.\n* support multiple starargs and at any location.\n\n0.2.3 - 2016-07-27\n``````````````````\n* properly register with flake8 so it will be selected on flake8 3.x by default\n  and it can be selected on flake8 2.x.\n\n0.2.2 - 2016-05-29\n``````````````````\n* do not check simple expressions, except for docstrings, because they cannot be\n  accessed anyway.\n* properly assert starred arguments in python 3.5. only the last element must be\n  a vararg if varargs are present and not the complete list.\n* output correct column offset on python 3.4.2, as that used the wrong offset\n  inside calls.\n\n0.2.1 - 2015-09-20\n``````````````````\n* support ``str.format(\"\u2026\", \u2026)`` calls and handle them like ``\"\u2026\".format(\u2026)``\n\n0.2.0 - 2015-09-12\n``````````````````\n* instead of using a regex it's trying to parse it using python's parser\n* this result can also be used now to verify that enough parameters are given\n* limited python 2.6 support\n\n0.1.0 - 2015-09-10\n``````````````````\n* detect unindexed parameters in all strings\n* separate error code for docstrings\n\n\n",
  "docs_url": null,
  "keywords": "flake8 format",
  "license": "mit license",
  "name": "flake8-string-format",
  "package_url": "https://pypi.org/project/flake8-string-format/",
  "project_url": "https://pypi.org/project/flake8-string-format/",
  "project_urls": {
    "Homepage": "https://github.com/xZise/flake8-string-format"
  },
  "release_url": "https://pypi.org/project/flake8-string-format/0.3.0/",
  "requires_dist": [
    "flake8"
  ],
  "requires_python": "",
  "summary": "string format checker, plugin for flake8",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "commodorefabianus@gmx.de",
    "fabian_neundorf"
  ],
  "kwds": "flake8 xzise some_file svg extension",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_flake8_string_format",
  "homepage": "https://github.com/xzise/flake8-string-format",
  "release_count": 5,
  "dependency_ids": [
    "pypi_flake8"
  ]
}
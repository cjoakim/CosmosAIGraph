{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "# qiskit\n[![license](https://img.shields.io/github/license/qiskit/qiskit-terra.svg?)](https://opensource.org/licenses/apache-2.0) \n[![doi](https://zenodo.org/badge/161550823.svg)](https://zenodo.org/badge/latestdoi/161550823)\n\n**qiskit**  is an open-source sdk for working with quantum computers at the level of extended quantum circuits, operators, and primitives.\n\nthis library is the core component of qiskit, which contains the building blocks for creating and working with quantum circuits, quantum operators, and primitive functions (sampler and estimator).\nit also contains a transpiler that supports optimizing quantum circuits and a quantum information toolbox for creating advanced quantum operators. \n\nfor more details on how to use qiskit, refer to the documentation located here:\n\n<https://qiskit.org/documentation/>\n\n\n## installation\n\nwe encourage installing qiskit via ``pip``:\n\n```bash\npip install qiskit\n```\n\npip will handle all dependencies automatically and you will always install the latest (and well-tested) version.\n\nto install from source, follow the instructions in the [documentation](https://qiskit.org/documentation/contributing_to_qiskit.html#install-install-from-source-label).\n\n## create your first quantum program in qiskit\n\nnow that qiskit is installed, it's time to begin working with qiskit. the essential parts of a quantum program are:\n1. define and build a quantum circuit that represents the quantum state\n2. define the classical output by measurements or a set of observable operators\n3. depending on the output, use the primitive function `sampler` to sample outcomes or the `estimator` to estimate values.\n\ncreate an example quantum circuit using the `quantumcircuit` class:\n\n```python\nimport numpy as np\nfrom qiskit import quantumcircuit\n\n# 1. a quantum circuit for preparing the quantum state |000> + i |111>\nqc_example = quantumcircuit(3)\nqc_example.h(0)          # generate superpostion\nqc_example.p(np.pi/2,0)  # add quantum phase\nqc_example.cx(0,1)       # 0th-qubit-controlled-not gate on 1st qubit\nqc_example.cx(0,2)       # 0th-qubit-controlled-not gate on 2nd qubit\n```\n\nthis simple example makes an entangled state known as a [ghz state](https://en.wikipedia.org/wiki/greenberger%e2%80%93horne%e2%80%93zeilinger_state) $(|000\\rangle + i|111\\rangle)/\\sqrt{2}$. it uses the standard quantum gates: hadamard gate (`h`), phase gate (`p`), and cnot gate (`cx`). \n\nonce you've made your first quantum circuit, choose which primitive function you will use. starting with `sampler`,\nwe use `measure_all(inplace=false)` to get a copy of the circuit in which all the qubits are measured:\n\n```python\n# 2. add the classical output in the form of measurement of all qubits\nqc_measured = qc_example.measure_all(inplace=false)\n\n# 3. execute using the sampler primitive\nfrom qiskit.primitives.sampler import sampler\nsampler = sampler()\njob = sampler.run(qc_measured, shots=1000)\nresult = job.result()\nprint(f\" > quasi probability distribution: {result.quasi_dists}\")\n```\nrunning this will give an outcome similar to `{0: 0.497, 7: 0.503}` which is `000` 50% of the time and `111` 50% of the time up to statistical fluctuations.  \nto illustrate the power of estimator, we now use the quantum information toolbox to create the operator $xxy+xyx+yxx-yyy$ and pass it to the `run()` function, along with our quantum circuit. note the estimator requires a circuit _**without**_ measurement, so we use the `qc_example` circuit we created earlier.\n\n```python\n# 2. define the observable to be measured \nfrom qiskit.quantum_info import sparsepauliop\noperator = sparsepauliop.from_list([(\"xxy\", 1), (\"xyx\", 1), (\"yxx\", 1), (\"yyy\", -1)])\n\n# 3. execute using the estimator primitive\nfrom qiskit.primitives import estimator\nestimator = estimator()\njob = estimator.run(qc_example, operator, shots=1000)\nresult = job.result()\nprint(f\" > expectation values: {result.values}\")\n```\n\nrunning this will give the outcome `4`. for fun, try to assign a value of +/- 1 to each single-qubit operator x and y \nand see if you can achieve this outcome. (spoiler alert: this is not possible!)\n\nusing the qiskit-provided `qiskit.primitives.sampler` and `qiskit.primitives.estimator` will not take you very far. the power of quantum computing cannot be simulated \non classical computers and you need to use real quantum hardware to scale to larger quantum circuits. however, running a quantum \ncircuit on hardware requires rewriting them to the basis gates and connectivity of the quantum hardware.\nthe tool that does this is the [transpiler](https://qiskit.org/documentation/apidoc/transpiler.html) \nand qiskit includes transpiler passes for synthesis, optimization, mapping, and scheduling. however, it also includes a\ndefault compiler which works very well in most examples. the following code will map the example circuit to the `basis_gates = ['cz', 'sx', 'rz']` and a linear chain of qubits $0 \\rightarrow 1 \\rightarrow 2$ with the `coupling_map =[[0, 1], [1, 2]]`.\n\n```python\nfrom qiskit import transpile\nqc_transpiled = transpile(qc_example, basis_gates = ['cz', 'sx', 'rz'], coupling_map =[[0, 1], [1, 2]] , optimization_level=3)\n```\n\nfor further examples of using qiskit you can look at the tutorials in the documentation here:\n\n<https://qiskit.org/documentation/tutorials.html>\n\n### executing your code on real quantum hardware\n\nqiskit provides an abstraction layer that lets users run quantum circuits on hardware from any vendor that provides a compatible interface. \nthe best way to use qiskit is with a runtime environment that provides optimized implementations of `sampler` and `estimator` for a given hardware platform. this runtime may involve using pre- and post-processing, such as optimized transpiler passes with error suppression, error mitigation, and, eventually, error correction built in. a runtime implements `qiskit.primitives.basesampler` and `qiskit.primitives.baseestimator` interfaces. for example,\nsome packages that provide implementations of a runtime primitive implementation are:\n\n* https://github.com/qiskit/qiskit-ibm-runtime\n\nqiskit also provides a lower-level abstract interface for describing quantum backends. this interface, located in\n``qiskit.providers``, defines an abstract `backendv2` class that providers can implement to represent their\nhardware or simulators to qiskit. the backend class includes a common interface for executing circuits on the backends; however, in this interface each provider may perform different types of pre- and post-processing and return outcomes that are vendor-defined. some examples of published provider packages that interface with real hardware are:\n\n* https://github.com/qiskit/qiskit-ibm-provider\n* https://github.com/qiskit-community/qiskit-ionq\n* https://github.com/qiskit-community/qiskit-aqt-provider\n* https://github.com/qiskit-community/qiskit-braket-provider\n* https://github.com/qiskit-community/qiskit-quantinuum-provider\n* https://github.com/rigetti/qiskit-rigetti\n\n<!-- this is not an exhaustive list, and if you maintain a provider package please feel free to open a pr to add new providers -->\n\nyou can refer to the documentation of these packages for further instructions\non how to get access and use these systems.\n\n## contribution guidelines\n\nif you'd like to contribute to qiskit, please take a look at our\n[contribution guidelines](contributing.md). by participating, you are expected to uphold our [code of conduct](code_of_conduct.md).\n\nwe use [github issues](https://github.com/qiskit/qiskit-terra/issues) for tracking requests and bugs. please\n[join the qiskit slack community](https://qisk.it/join-slack) for discussion, comments, and questions.\nfor questions related to running or using qiskit, [stack overflow has a `qiskit`](https://stackoverflow.com/questions/tagged/qiskit).\nfor questions on quantum computing with qiskit, use the `qiskit` tag in the [quantum computing stack exchange](https://quantumcomputing.stackexchange.com/questions/tagged/qiskit) (please, read first the [guidelines on how to ask](https://quantumcomputing.stackexchange.com/help/how-to-ask) in that forum).\n\n\n## authors and citation\n\nqiskit is the work of [many people](https://github.com/qiskit/qiskit-terra/graphs/contributors) who contribute\nto the project at different levels. if you use qiskit, please cite as per the included [bibtex file](citation.bib).\n\n## changelog and release notes\n\nthe changelog for a particular release is dynamically generated and gets\nwritten to the release page on github for each release. for example, you can\nfind the page for the `0.9.0` release here:\n\n<https://github.com/qiskit/qiskit-terra/releases/tag/0.9.0>\n\nthe changelog for the current release can be found in the releases tab:\n[![releases](https://img.shields.io/github/release/qiskit/qiskit-terra.svg?style=flat&label=)](https://github.com/qiskit/qiskit-terra/releases)\nthe changelog provides a quick overview of notable changes for a given\nrelease.\n\nadditionally, as part of each release detailed release notes are written to\ndocument in detail what has changed as part of a release. this includes any\ndocumentation on potential breaking changes on upgrade and new features.\nfor example, you can find the release notes for the `0.9.0` release in the\nqiskit documentation here:\n\nhttps://qiskit.org/documentation/release_notes.html#terra-0-9\n\n## acknowledgements\n\nwe acknowledge partial support for qiskit development from the doe office of science national quantum information science research centers, co-design center for quantum advantage (c2qa) under contract number de-sc0012704.\n\n## license\n\n[apache license 2.0](license.txt)\n",
  "docs_url": null,
  "keywords": "qiskit sdk quantum",
  "license": "apache 2.0",
  "name": "qiskit-terra",
  "package_url": "https://pypi.org/project/qiskit-terra/",
  "project_url": "https://pypi.org/project/qiskit-terra/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Qiskit/qiskit-terra/issues",
    "Documentation": "https://qiskit.org/documentation/",
    "Homepage": "https://github.com/Qiskit/qiskit",
    "Source Code": "https://github.com/Qiskit/qiskit-terra"
  },
  "release_url": "https://pypi.org/project/qiskit-terra/0.45.1/",
  "requires_dist": [
    "rustworkx >=0.13.0",
    "numpy <2,>=1.17",
    "ply >=3.10",
    "psutil >=5",
    "scipy >=1.5",
    "sympy >=1.3",
    "dill >=0.3",
    "python-dateutil >=2.8.0",
    "stevedore >=3.0.0",
    "symengine !=0.10.0,>=0.9 ; platform_machine == \"x86_64\" or platform_machine == \"aarch64\" or platform_machine == \"ppc64le\" or platform_machine == \"amd64\" or platform_machine == \"arm64\"",
    "typing-extensions ; python_version < \"3.11\"",
    "matplotlib >=3.3 ; extra == 'all'",
    "ipywidgets >=7.3.0 ; extra == 'all'",
    "pydot ; extra == 'all'",
    "pillow >=4.2.1 ; extra == 'all'",
    "pylatexenc >=1.4 ; extra == 'all'",
    "seaborn >=0.9.0 ; extra == 'all'",
    "pygments >=2.4 ; extra == 'all'",
    "z3-solver >=4.7 ; extra == 'all'",
    "python-constraint >=1.4 ; extra == 'all'",
    "qiskit-qasm3-import >=0.1.0 ; extra == 'all'",
    "z3-solver >=4.7 ; extra == 'crosstalk-pass'",
    "python-constraint >=1.4 ; extra == 'csp-layout-pass'",
    "qiskit-qasm3-import >=0.1.0 ; extra == 'qasm3-import'",
    "matplotlib >=3.3 ; extra == 'visualization'",
    "ipywidgets >=7.3.0 ; extra == 'visualization'",
    "pydot ; extra == 'visualization'",
    "pillow >=4.2.1 ; extra == 'visualization'",
    "pylatexenc >=1.4 ; extra == 'visualization'",
    "seaborn >=0.9.0 ; extra == 'visualization'",
    "pygments >=2.4 ; extra == 'visualization'"
  ],
  "requires_python": ">=3.8",
  "summary": "software for developing quantum computing programs",
  "version": "0.45.1",
  "releases": [],
  "developers": [
    "hello@qiskit.org",
    "qiskit_development_team"
  ],
  "kwds": "quantumcomputing qiskit qisk quantum_info qubit",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_qiskit_terra",
  "homepage": "https://github.com/qiskit/qiskit",
  "release_count": 67,
  "dependency_ids": [
    "pypi_dill",
    "pypi_ipywidgets",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pillow",
    "pypi_ply",
    "pypi_psutil",
    "pypi_pydot",
    "pypi_pygments",
    "pypi_pylatexenc",
    "pypi_python_constraint",
    "pypi_python_dateutil",
    "pypi_qiskit_qasm3_import",
    "pypi_rustworkx",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_stevedore",
    "pypi_symengine",
    "pypi_sympy",
    "pypi_typing_extensions",
    "pypi_z3_solver"
  ]
}
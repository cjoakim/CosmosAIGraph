{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: asyncio",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "aiobotocore\n===========\n.. image:: https://travis-ci.com/aio-libs/aiobotocore.svg?branch=master\n    :target: https://travis-ci.com/aio-libs/aiobotocore\n.. image:: https://codecov.io/gh/aio-libs/aiobotocore/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/aiobotocore\n.. image:: https://readthedocs.org/projects/aiobotocore/badge/?version=latest\n    :target: https://aiobotocore.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n.. image:: https://img.shields.io/pypi/v/aiobotocore.svg\n    :target: https://pypi.python.org/pypi/aiobotocore\n.. image:: https://badges.gitter.im/join%20chat.svg\n    :target: https://gitter.im/aio-libs/aiobotocore\n    :alt: chat on gitter\n\n\n\nasync client for amazon services using botocore_ and aiohttp_/asyncio_.\n\nthis library is a mostly full featured asynchronous version of botocore.\n\n\ninstall\n-------\n::\n\n    $ pip install aiobotocore\n\n\nbasic example\n-------------\n\n.. code:: python\n\n    import asyncio\n    from aiobotocore.session import get_session\n\n    aws_access_key_id = \"xxx\"\n    aws_secret_access_key = \"xxx\"\n\n\n    async def go():\n        bucket = 'dataintake'\n        filename = 'dummy.bin'\n        folder = 'aiobotocore'\n        key = '{}/{}'.format(folder, filename)\n\n        session = get_session()\n        async with session.create_client('s3', region_name='us-west-2',\n                                       aws_secret_access_key=aws_secret_access_key,\n                                       aws_access_key_id=aws_access_key_id) as client:\n            # upload object to amazon s3\n            data = b'\\x01'*1024\n            resp = await client.put_object(bucket=bucket,\n                                                key=key,\n                                                body=data)\n            print(resp)\n\n            # getting s3 object properties of file we just uploaded\n            resp = await client.get_object_acl(bucket=bucket, key=key)\n            print(resp)\n\n            # get object from s3\n            response = await client.get_object(bucket=bucket, key=key)\n            # this will ensure the connection is correctly re-used/closed\n            async with response['body'] as stream:\n                assert await stream.read() == data\n\n            # list s3 objects using paginator\n            paginator = client.get_paginator('list_objects')\n            async for result in paginator.paginate(bucket=bucket, prefix=folder):\n                for c in result.get('contents', []):\n                    print(c)\n\n            # delete object from s3\n            resp = await client.delete_object(bucket=bucket, key=key)\n            print(resp)\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(go())\n\n\n\ncontext manager examples\n------------------------\n\n.. code:: python\n\n    from contextlib import asyncexitstack\n\n    from aiobotocore.session import aiosession\n\n\n    # how to use in existing context manager\n    class manager:\n        def __init__(self):\n            self._exit_stack = asyncexitstack()\n            self._s3_client = none\n\n        async def __aenter__(self):\n            session = aiosession()\n            self._s3_client = await self._exit_stack.enter_async_context(session.create_client('s3'))\n\n        async def __aexit__(self, exc_type, exc_val, exc_tb):\n            await self._exit_stack.__aexit__(exc_type, exc_val, exc_tb)\n\n    # how to use with an external exit_stack\n    async def create_s3_client(session: aiosession, exit_stack: asyncexitstack):\n        # create client and add cleanup\n        client = await exit_stack.enter_async_context(session.create_client('s3'))\n        return client\n\n\n    async def non_manager_example():\n        session = aiosession()\n\n        async with asyncexitstack() as exit_stack:\n            s3_client = await create_s3_client(session, exit_stack)\n\n            # do work with s3_client\n\n\n\nsupported aws services\n----------------------\n\nthis is a non-exuastive list of what tests aiobotocore runs against aws services. not all methods are tested but we aim to test the majority of\ncommonly used methods.\n\n+----------------+-----------------------+\n| service        | status                |\n+================+=======================+\n| s3             | working               |\n+----------------+-----------------------+\n| dynamodb       | basic methods tested  |\n+----------------+-----------------------+\n| sns            | basic methods tested  |\n+----------------+-----------------------+\n| sqs            | basic methods tested  |\n+----------------+-----------------------+\n| cloudformation | stack creation tested |\n+----------------+-----------------------+\n| kinesis        | basic methods tested  |\n+----------------+-----------------------+\n\ndue to the way boto3 is implemented, its highly likely that even if services are not listed above that you can take any `boto3.client('service')` and\nstick `await` infront of methods to make them async, e.g. `await client.list_named_queries()` would asynchronous list all of the named athena queries.\n\nif a service is not listed here and you could do with some tests or examples feel free to raise an issue.\n\nrun tests\n---------\n\nthere are two set of tests, those that can be mocked through `moto <https://github.com/getmoto/moto>`_ running in docker, and those that require running against a personal amazon key. the ci only runs the moto tests.\n\nto run the moto tests:\n\n::\n\n    $ make mototest\n\nto run the non-moto tests:\n\nmake sure you have development requirements installed and your amazon key and\nsecret accessible via environment variables:\n\n::\n\n    $ pip install pip-tools\n    $ pip-compile requirements-dev.txt\n    $ pip-sync requirements-dev.txt\n    $ export aws_access_key_id=xxx\n    $ export aws_secret_access_key=xxx\n\nexecute tests suite:\n\n::\n\n    $ make test\n\n\n\nenable type checking and code completion\n----------------------------------------\n\ninstall types-aiobotocore_ that contains type annotations for `aiobotocore`\nand all supported botocore_ services.\n\n.. code:: bash\n\n    # install aiobotocore type annotations\n    # for ec2, s3, rds, lambda, sqs, dynamo and cloudformation\n    python -m pip install 'types-aiobotocore[essential]'\n\n    # or install annotations for services you use\n    python -m pip install 'types-aiobotocore[acm,apigateway]'\n\n    # lite version does not provide session.create_client overloads\n    # it is more ram-friendly, but requires explicit type annotations\n    python -m pip install 'types-aiobotocore-lite[essential]'\n\nnow you should be able to run pylance_, pyright_, or mypy_ for type checking\nas well as code completion in your ide.\n\nfor `types-aiobotocore-lite` package use explicit type annotations:\n\n.. code:: python\n\n    from aiobotocore.session import get_session\n    from types_aiobotocore_s3.client import s3client\n\n    session = get_session()\n    async with session.create_client(\"s3\") as client:\n        client: s3client\n        # type checking and code completion is now enabled for client\n\n\nfull documentation for `types-aiobotocore` can be found here: https://youtype.github.io/types_aiobotocore_docs/\n\n\nmailing list\n------------\n\nhttps://groups.google.com/forum/#!forum/aio-libs\n\n\nrequirements\n------------\n* python_ 3.8+\n* aiohttp_\n* botocore_\n\n.. _python: https://www.python.org\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _botocore: https://github.com/boto/botocore\n.. _aiohttp: https://github.com/aio-libs/aiohttp\n.. _types-aiobotocore: https://youtype.github.io/types_aiobotocore_docs/\n.. _pylance: https://marketplace.visualstudio.com/items?itemname=ms-python.vscode-pylance\n.. _pyright: https://github.com/microsoft/pyright\n.. _mypy: http://mypy-lang.org/\n\nawscli & boto3\n--------------\n\nawscli and boto3 depend on a single version, or a narrow range of versions, of botocore.\nhowever, aiobotocore only supports a specific range of botocore versions. to ensure you\ninstall the latest version of awscli and boto3 that your specific combination or\naiobotocore and botocore can support use::\n\n    pip install -u 'aiobotocore[awscli,boto3]'\n\nif you only need awscli and not boto3 (or vice versa) you can just install one extra or\nthe other.\n\nchanges\n-------\n\n2.9.0 (2023-12-12)\n^^^^^^^^^^^^^^^^^^\n* bump botocore dependency specification\n\n2.8.0 (2023-11-28)\n^^^^^^^^^^^^^^^^^^\n* add aiostubber that returns aioawsresponse()\n* remove confusing `aiobotocore.session.session` symbol\n* bump botocore dependency specification\n\n2.7.0 (2023-10-17)\n^^^^^^^^^^^^^^^^^^\n* add support for python 3.12\n* drop more python 3.7 support (eol)\n* relax botocore dependency specification\n\n2.6.0 (2023-08-11)\n^^^^^^^^^^^^^^^^^^\n* bump aiohttp minimum version to 3.7.4.post0\n* drop python 3.7 support (eol)\n\n2.5.4 (2023-08-07)\n^^^^^^^^^^^^^^^^^^\n* fix __aenter__ attribute error introduced in refresh bugfix (#1031)\n\n2.5.3 (2023-08-06)\n^^^^^^^^^^^^^^^^^^\n* add more support for python 3.11\n* bump botocore to 1.31.17\n* add waiter.wait return\n* fix sso token refresh bug #1025\n\n2.5.2 (2023-07-06)\n^^^^^^^^^^^^^^^^^^\n* fix issue #1020\n\n2.5.1 (2023-06-27)\n^^^^^^^^^^^^^^^^^^\n* bump botocore to 1.29.161\n\n2.5.0 (2023-03-06)\n^^^^^^^^^^^^^^^^^^\n* bump botocore to 1.29.76 (thanks @jakob-keller #999)\n\n2.4.2 (2022-12-22)\n^^^^^^^^^^^^^^^^^^\n* fix retries (#988)\n\n2.4.1 (2022-11-28)\n^^^^^^^^^^^^^^^^^^\n* adds support for checksums in streamed request trailers (thanks @terrycain #962)\n\n2.4.0 (2022-08-25)\n^^^^^^^^^^^^^^^^^^\n* bump botocore to 1.27.59\n\n2.3.4 (2022-06-23)\n^^^^^^^^^^^^^^^^^^\n* fix select_object_content\n\n2.3.3 (2022-06-07)\n^^^^^^^^^^^^^^^^^^\n* fix connect timeout while getting iam creds\n* fix test files appearing in distribution package\n\n2.3.2 (2022-05-08)\n^^^^^^^^^^^^^^^^^^\n* fix 3.6 testing and and actually fix 3.6 support\n\n2.3.1 (2022-05-06)\n^^^^^^^^^^^^^^^^^^\n* fix 3.6 support\n* aioconfig: allow keepalive_timeout to be none (thanks @dnlserrano #933)\n\n2.3.0 (2022-05-05)\n^^^^^^^^^^^^^^^^^^\n* fix encoding issue by swapping to aioawsresponse and aioawsrequest to behave more\n  like botocore\n* fix exceptions mappings\n\n2.2.0 (2022-03-16)\n^^^^^^^^^^^^^^^^^^\n* remove deprecated apis\n* bump to botocore 1.24.21\n* re-enable retry of aiohttp.clientpayloaderror\n\n2.1.2 (2022-03-03)\n^^^^^^^^^^^^^^^^^^\n* fix httpsession close call\n\n2.1.1 (2022-02-10)\n^^^^^^^^^^^^^^^^^^\n* implement asynchronous non-blocking adaptive retry strategy\n\n2.1.0 (2021-12-14)\n^^^^^^^^^^^^^^^^^^\n* bump to botocore 1.23.24\n* fix aiohttp resolver config param #906\n\n2.0.1 (2021-11-25)\n^^^^^^^^^^^^^^^^^^\n* revert accidental dupe of _register_s3_events #867 (thanks @eoghanmurray)\n* support customizing the aiohttp connector resolver class #893 (thanks @orf)\n* fix timestream query #902\n\n\n2.0.0 (2021-11-02)\n^^^^^^^^^^^^^^^^^^\n* bump to botocore 1.22.8\n* turn off default ``aiobotocore_deprecated_1_4_0_apis`` env var to match botocore module.  see notes in 1.4.0.\n\n1.4.2 (2021-09-03)\n^^^^^^^^^^^^^^^^^^\n* fix missing close() method on http session (thanks `@terrycain <https://github.com/terrycain>`_)\n* fix for verify=false\n\n1.4.1 (2021-08-24)\n^^^^^^^^^^^^^^^^^^\n* put backwards incompatible changes behind ``aiobotocore_deprecated_1_4_0_apis`` env var.  this means that `#876 <https://github.com/aio-libs/aiobotocore/issues/876>`_ will not work unless this env var has been set to 0.\n\n1.4.0 (2021-08-20)\n^^^^^^^^^^^^^^^^^^\n* fix retries via config `#877 <https://github.com/aio-libs/aiobotocore/pull/877>`_\n* remove aiosession and get_session top level names to match botocore_\n* change exceptions raised to match those of botocore_, see `mappings <https://github.com/aio-libs/aiobotocore/pull/877/files#diff-b1675e1eb4276bfae81107cda919ba446e4ce1b1e228a9e878d65dd1f474bf8cr162-r181>`_\n\n1.3.3 (2021-07-12)\n^^^^^^^^^^^^^^^^^^\n* fix aiojsonparser `#872 <https://github.com/aio-libs/aiobotocore/issues/872>`_\n\n1.3.2 (2021-07-07)\n^^^^^^^^^^^^^^^^^^\n* bump to botocore_ to `1.20.106 <https://github.com/boto/botocore/tree/1.20.106>`_\n\n1.3.1 (2021-06-11)\n^^^^^^^^^^^^^^^^^^\n* tcpconnector: change deprecated ssl_context to ssl\n* fix non awaited generate presigned url calls `#868 <https://github.com/aio-libs/aiobotocore/issues/868>`_\n\n1.3.0 (2021-04-09)\n^^^^^^^^^^^^^^^^^^\n* bump to botocore_ to `1.20.49 <https://github.com/boto/botocore/tree/1.20.49>`_ `#856 <https://github.com/aio-libs/aiobotocore/pull/856>`_\n\n1.2.2 (2021-03-11)\n^^^^^^^^^^^^^^^^^^\n* await call to async method _load_creds_via_assume_role `#858 <https://github.com/aio-libs/aiobotocore/pull/858>`_ (thanks `@puzza007 <https://github.com/puzza007>`_)\n\n1.2.1 (2021-02-10)\n^^^^^^^^^^^^^^^^^^\n* verify strings are now correctly passed to aiohttp.tcpconnector `#851 <https://github.com/aio-libs/aiobotocore/pull/851>`_ (thanks `@fhtmitchell <https://github.com/fhtmitchell>`_)\n\n1.2.0 (2021-01-11)\n^^^^^^^^^^^^^^^^^^\n* bump botocore to `1.19.52 <https://github.com/boto/botocore/tree/1.19.52>`_\n* use passed in http_session_cls param to create_client `#797 <https://github.com/aio-libs/aiobotocore/issues/797>`_\n\n1.1.2 (2020-10-07)\n^^^^^^^^^^^^^^^^^^\n* fix aiopageiterator search method #831 (thanks `@joseph-jones <https://github.com/joseph-jones>`_)\n\n1.1.1 (2020-08-31)\n^^^^^^^^^^^^^^^^^^\n* fix s3 region redirect bug #825\n\n1.1.0 (2020-08-18)\n^^^^^^^^^^^^^^^^^^\n* bump botocore to 1.17.44\n\n1.0.7 (2020-06-04)\n^^^^^^^^^^^^^^^^^^\n* fix generate_db_auth_token via #816\n\n1.0.6 (2020-06-04)\n^^^^^^^^^^^^^^^^^^\n* revert __getattr__ fix as it breaks ddtrace\n\n1.0.5 (2020-06-03)\n^^^^^^^^^^^^^^^^^^\n* fixed aiosession.get_service_data emit call #811 via #812\n* fixed async __getattr__ #789 via #803\n\n1.0.4 (2020-04-15)\n^^^^^^^^^^^^^^^^^^\n* fixed s3 presigned post not being async\n\n1.0.3 (2020-04-09)\n^^^^^^^^^^^^^^^^^^\n* fixes typo when using credential process\n\n1.0.2 (2020-04-05)\n^^^^^^^^^^^^^^^^^^\n* disable client.__getattr__ emit for now #789\n\n1.0.1 (2020-04-01)\n^^^^^^^^^^^^^^^^^^\n* fixed signing requests with explicit credentials\n\n1.0.0 (2020-03-31)\n^^^^^^^^^^^^^^^^^^\n* api breaking: the result of create_client is now a required async context class\n* credential refresh should now work\n* generate_presigned_url is now an async call along with other credential methods\n* credentials.[access_key/secret_key/token] now raise notimplementederror because\n  they won't call refresh like botocore. instead should use get_frozen_credentials\n  async method\n* bump botocore and extras\n\n0.12.0 (2020-02-23)\n^^^^^^^^^^^^^^^^^^^\n* bump botocore and extras\n* drop support for 3.5 given we are unable to test it with moto\n  and it will soon be unsupported\n* remove loop parameters for python 3.8 compliance\n* remove deprecated aiopageiterator.next_page\n\n0.11.1 (2020-01-03)\n^^^^^^^^^^^^^^^^^^^\n* fixed event streaming api calls like s3 select.\n\n0.11.0 (2019-11-12)\n^^^^^^^^^^^^^^^^^^^\n* replace caseinsensitivedict with urllib3 equivalent #744\n  (thanks to inspiration from @craigmccarter and @kevchentw)\n* bump botocore to 1.13.14\n* fix for mismatched botocore method replacements\n\n0.10.4 (2019-10-24)\n^^^^^^^^^^^^^^^^^^^\n* make aiobaseclient.close method async #724 (thanks @bsitruk)\n* bump awscli, boto3, botocore #735 (thanks @bbrendon)\n* switch paginator to async_generator, add result_key_iters\n  (deprecate next_page method)\n\n0.10.3 (2019-07-17)\n^^^^^^^^^^^^^^^^^^^\n* bump botocore and extras\n\n0.10.2 (2019-02-11)\n^^^^^^^^^^^^^^^^^^^\n* fix response-received emitted event #682\n\n0.10.1 (2019-02-08)\n^^^^^^^^^^^^^^^^^^^\n* make tests pass with pytest 4.1 #669 (thanks @yan12125)\n* support python 3.7 #671 (thanks to @yan12125)\n* update rtd build config #672 (thanks @willingc)\n* bump to botocore 1.12.91 #679\n\n0.10.0 (2018-12-09)\n^^^^^^^^^^^^^^^^^^^\n* update to botocore 1.12.49 #639 (thanks @terrycain)\n\n0.9.4 (2018-08-08)\n^^^^^^^^^^^^^^^^^^\n* add clientpayloaderror as retryable exception\n\n0.9.3 (2018-07-16)\n^^^^^^^^^^^^^^^^^^\n* bring botocore up to date\n\n0.9.2 (2018-05-05)\n^^^^^^^^^^^^^^^^^^\n* bump aiohttp requirement to fix read timeouts\n\n0.9.1 (2018-05-04)\n^^^^^^^^^^^^^^^^^^\n* fix timeout bug introduced in last release\n\n0.9.0 (2018-06-01)\n^^^^^^^^^^^^^^^^^^\n* bump aiohttp to 3.3.x\n* remove unneeded set_socket_timeout\n\n0.8.0 (2018-05-07)\n^^^^^^^^^^^^^^^^^^\n* fix pagination #573 (thanks @adamrothman)\n* enabled several s3 tests via moto\n* bring botocore up to date\n\n0.7.0 (2018-05-01)\n^^^^^^^^^^^^^^^^^^\n* just version bump\n\n0.6.1a0 (2018-05-01)\n^^^^^^^^^^^^^^^^^^^^\n* bump to aiohttp 3.1.x\n* switch tests to python 3.5+\n* switch to native coroutines\n* fix non-streaming body timeout retries\n\n0.6.0 (2018-03-04)\n^^^^^^^^^^^^^^^^^^\n* upgrade to aiohttp>=3.0.0 #536 (thanks @gr1n)\n\n0.5.3 (2018-02-23)\n^^^^^^^^^^^^^^^^^^\n* fixed waiters #523 (thanks @dalazx)\n* fix conn_timeout #485\n\n0.5.2 (2017-12-06)\n^^^^^^^^^^^^^^^^^^\n* updated awscli dependency #461\n\n0.5.1 (2017-11-10)\n^^^^^^^^^^^^^^^^^^\n* disabled compressed response #430\n\n0.5.0 (2017-11-10)\n^^^^^^^^^^^^^^^^^^\n* fix error botocore error checking #190\n* update supported botocore requirement to: >=1.7.28, <=1.7.40\n* bump aiohttp requirement to support compressed responses correctly #298\n\n0.4.5 (2017-09-05)\n^^^^^^^^^^^^^^^^^^\n* added sqs examples and tests #336\n* changed requirements.txt structure #336\n* bump to botocore 1.7.4\n* added dynamodb examples and tests #340\n\n\n0.4.4 (2017-08-16)\n^^^^^^^^^^^^^^^^^^\n* add the supported versions of boto3 to extras require #324\n\n0.4.3 (2017-07-05)\n^^^^^^^^^^^^^^^^^^\n* add the supported versions of awscli to extras require #273 (thanks @graingert)\n\n0.4.2 (2017-07-03)\n^^^^^^^^^^^^^^^^^^\n* update supported aiohttp requirement to: >=2.0.4, <=2.3.0\n* update supported botocore requirement to: >=1.5.71, <=1.5.78\n\n0.4.1 (2017-06-27)\n^^^^^^^^^^^^^^^^^^\n* fix redirects #268\n\n0.4.0 (2017-06-19)\n^^^^^^^^^^^^^^^^^^\n* update botocore requirement to: botocore>=1.5.34, <=1.5.70\n* fix read_timeout due to #245\n* implement set_socket_timeout\n\n0.3.3 (2017-05-22)\n^^^^^^^^^^^^^^^^^^\n* switch to pep 440 version parser to support 'dev' versions\n\n0.3.2 (2017-05-22)\n^^^^^^^^^^^^^^^^^^\n* fix botocore integration\n* provisional fix for aiohttp 2.x stream support\n* update botocore requirement to: botocore>=1.5.34, <=1.5.52\n\n0.3.1 (2017-04-18)\n^^^^^^^^^^^^^^^^^^\n* fixed waiter support\n\n0.3.0 (2017-04-01)\n^^^^^^^^^^^^^^^^^^\n* added support for aiohttp>=2.0.4 (thanks @achimnol)\n* update botocore requirement to: botocore>=1.5.0, <=1.5.33\n\n0.2.3 (2017-03-22)\n^^^^^^^^^^^^^^^^^^\n* update botocore requirement to: botocore>=1.5.0, <1.5.29\n\n0.2.2 (2017-03-07)\n^^^^^^^^^^^^^^^^^^\n* set aiobotocore.__all__ for * imports #121 (thanks @graingert)\n* fix etag in head_object response #132\n\n0.2.1 (2017-02-01)\n^^^^^^^^^^^^^^^^^^\n* normalize headers and handle redirection by botocore #115 (thanks @fedorof)\n\n0.2.0 (2017-01-30)\n^^^^^^^^^^^^^^^^^^\n* add support for proxies (thanks @jjonek)\n* remove aioconfig verify_ssl connector_arg as this is handled by the\n  create_client verify param\n* remove aioconfig limit connector_arg as this is now handled by\n  by the config `max_pool_connections` property (note default is 10)\n\n0.1.1 (2017-01-16)\n^^^^^^^^^^^^^^^^^^\n* botocore updated to version 1.5.0\n\n0.1.0 (2017-01-12)\n^^^^^^^^^^^^^^^^^^\n* pass timeout to aiohttp.request to enforce read_timeout #86 (thanks @vharitonsky)\n  (bumped up to next semantic version due to read_timeout enabling change)\n\n0.0.6 (2016-11-19)\n^^^^^^^^^^^^^^^^^^\n\n* added enforcement of plain response #57 (thanks @rymir)\n* botocore updated to version 1.4.73 #74 (thanks @vas3k)\n\n\n0.0.5 (2016-06-01)\n^^^^^^^^^^^^^^^^^^\n\n* initial alpha release\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "aiobotocore",
  "package_url": "https://pypi.org/project/aiobotocore/",
  "project_url": "https://pypi.org/project/aiobotocore/",
  "project_urls": {
    "Download": "https://pypi.python.org/pypi/aiobotocore",
    "Homepage": "https://github.com/aio-libs/aiobotocore"
  },
  "release_url": "https://pypi.org/project/aiobotocore/2.9.0/",
  "requires_dist": [
    "botocore <1.33.14,>=1.33.2",
    "aiohttp <4.0.0,>=3.7.4.post0",
    "wrapt <2.0.0,>=1.10.10",
    "aioitertools <1.0.0,>=0.5.1",
    "awscli <1.31.14,>=1.31.2 ; extra == 'awscli'",
    "boto3 <1.33.14,>=1.33.2 ; extra == 'boto3'"
  ],
  "requires_python": ">=3.8",
  "summary": "async client for aws services using botocore and aiohttp",
  "version": "2.9.0",
  "releases": [],
  "developers": [
    "nickolainovik@gmail.com",
    "nikolay_novik"
  ],
  "kwds": "aiobotocore_deprecated_1_4_0_apis types_aiobotocore_docs aiobotocore_ aiobotocore types_aiobotocore_s3",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_aiobotocore",
  "homepage": "https://github.com/aio-libs/aiobotocore",
  "release_count": 83,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_aioitertools",
    "pypi_awscli",
    "pypi_boto3",
    "pypi_botocore",
    "pypi_wrapt"
  ]
}
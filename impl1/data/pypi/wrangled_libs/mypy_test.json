{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# mypy_test\n\ntest [mypy](https://mypy.readthedocs.io/en/stable/) plugins, stubs, custom types.\n\ncreate a python file, add comments to lines where you expect mypy to produce an error, run `mypy_test`, and it will check if actual errors are the same as you expect.\n\nfeatures:\n\n+ **flexible**: supports every feature supported by mypy, does not enforce a project structure.\n+ **fast**: mypy gets run only once for all files at once. also, no patching, no config generation.\n+ **easy to learn**: run `mypy_test` with the same arguments as you would run mypy, and it just works.\n+ **lightweight**: no dependencies except mypy.\n\n```bash\npython3 -m pip install mypy-test\n```\n\n## usage\n\n1. write a file you want to test, add comments to the lines you expect to fail:\n\n    ```python\n    a = 1\n    reveal_type(a)  # r: builtins.int\n    ```\n\n2. run the tool:\n\n    ```bash\n    python3 -m mypy_test example.py\n    ```\n\n## writing the comments\n\n+ the comments have the following format: `severity: message`.\n+ severity is a one-letter violation severity as reported by mypy.\n  + `f` for \"fatal\"\n  + `e` for \"error\"\n  + `w` for \"warning\"\n  + `n` for \"note\"\n  + `r` is a shorthand for `n: revealed type is \"...\"`\n+ comment can be on the same line as the violation or on the line before.\n\nexample:\n\n```python\nvar = 1.1\nreveal_type(var)  # r: builtins.float\n\n# e: incompatible types in assignment (expression has type \"str\", variable has type \"float\")\nvar = \"\"\n```\n\ntips:\n\n+ the fastest way to know the severity and the message is to run `mypy_test` on the code and then copy-paste the resulting message.\n+ make separate functions for every test case, so it can have a nice description and a clean namespace.\n+ place all test files into one directory. for example, `/types/` or `/tests/types/`.\n\n## alternatives\n\n+ [pytest-mypy-plugins](https://github.com/typeddjango/pytest-mypy-plugins) - pytest plugin, test cases described in a yaml file.\n+ [pytest-mypy-testing](https://github.com/davidfritzsche/pytest-mypy-testing) - pytest plugin, tests are described like pytest test cases (but they actually don't get run).\n",
  "docs_url": null,
  "keywords": "mypy,testing,stubs,plugins,typing",
  "license": "mit",
  "name": "mypy-test",
  "package_url": "https://pypi.org/project/mypy-test/",
  "project_url": "https://pypi.org/project/mypy-test/",
  "project_urls": {
    "Homepage": "https://github.com/orsinium-labs/mypy-test"
  },
  "release_url": "https://pypi.org/project/mypy-test/0.1.4/",
  "requires_dist": [
    "mypy",
    "lxml",
    "pytest ; extra == \"test\""
  ],
  "requires_python": ">=3.6",
  "summary": "test mypy plugins, stubs, custom types.",
  "version": "0.1.4",
  "releases": [],
  "developers": [
    "gram",
    "gram@orsinium.dev"
  ],
  "kwds": "mypy_test python3 python pip mypy",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_mypy_test",
  "homepage": "https://github.com/orsinium-labs/mypy-test",
  "release_count": 5,
  "dependency_ids": [
    "pypi_lxml",
    "pypi_mypy",
    "pypi_pytest"
  ]
}
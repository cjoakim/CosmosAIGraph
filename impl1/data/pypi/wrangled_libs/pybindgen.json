{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v2 or later (lgplv2+)",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: build tools"
  ],
  "description": "about\n=====\npybindgen is (surprise!) a python bindings generator.  the main features are:\n\n * generates clean c or c++ code, nearly as readable as code written\n   manually by a developer;\n * generated code is self contained and does not require any external\n   libraries or macros; after generating the python module only python\n   header files are required, nothing else;\n * does not require boost.python (no c++ template magic, also works in c);\n * the interface for code generation is a simple python api, not some\n   obscure interface definition language.  additionally pybindgen can\n   parse header files with gccxml, if gccxml and pygccxml are\n   installed in the system (note: pygccxml has not been ported to python 3 yet);\n * can be easily extended with new type handlers;\n * type handlers can allocate memory and register cleanup code to free;\n * supports in, out, and inout parameters (e.g. with pointers or c++ references);\n * supports multiple return values (e.g. due to out/inout parameters);\n * supports wrapping of simple c++ classes;\n * supports virtual methods in classes;\n * supports reference counted classes and, to some extent, smart pointers;\n * multiple inheritance;\n * wrapping templated classes;\n\nnotable features not implemented:\n\n * converting exceptions from python to c++ (only from c++ to python is currently supported);\n * callbacks.\n\nsupported python versions\n=========================\n\nsee the `documentation <http://pybindgen.readthedocs.org/en/latest/tutorial/#supported-python-versions>`_.\n\ninstallation\n============\n\nnote: if checking out pybindgen from bazaar, do not forget to see the\nfile hacking for additional instructions.\n\nbefore proceeding make sure the system requirements are met.  pybindgen requires:\n\n 1. python (http://www.python.org)\n 2. python development files (the `python-dev` package in ubuntu/debian, for example)\n 3. a c/c++ compilation tool-chain (`apt-get install build-essential`)\n 4. (optional) gccxml and `pygccxml <http://www.language-binding.net/pygccxml/download.html>`_\n\nyou can install pybindgen using either the `setup.py` or waf.  note: to\nbe able to run all tests, which involve code generation, and\nsubsequent compilation, you need to use waf.\n\ninstallation using setup.py:\n----------------------------\n\n\tpython setup.py install\n\ninstallation using waf\n----------------------\n\npybindgen uses `waf <http://code.google.com/p/waf/>`_ as main build system.\nhowever, waf does not have to be previously installed, as it is\nshipped with pybindgen in a single `waf` script.\n\nto install pybindgen, issue the following commands (win32 users should omit the ./ prefix in commands):\n\n1. ./waf configure\n   - optionally you may add the option --prefix /foo/bar. to select a non-defaul python version, use the python environment variable, e.g.::\n\n        python=/usr/bin/python2.4 ./waf configure\n\n2. ./waf\n    - possible options: `-jn` for parallel build, `-p` for progress bar\n3. ./waf check\n    - optional step, runs the unit tests\n4. ./waf --examples\n    - optional step, compiles the examples\n5. ./waf install\n    - may require sudo\n\n\nwindows specific notes\n----------------------\n\nwaf concurrency bugs\n++++++++++++++++++++\n\n\nwaf automatically detects the number of cores and tries to activate\nmultiple build threads accordingly.  however, this concurrency support\nappears to be buggy on windows, therefore you should disable it with the\n-j1 option, if you have multiple cpus:\n\n\twaf check -j1\n\ncompiler selection\n++++++++++++++++++\n\nnote that if you are compiling on win32, waf will look for msvc\n(microsoft visual c) by default and give up on finding a c/c++\ncompiler if not found.  if you do not have msvc installed but instead\nhave mingw or cygwin gcc, you have to tell waf to look for gcc in the\nconfigure stage:\n\n\twaf configure --check-c-compiler=gcc --check-cxx-compiler=g++\n\ninstallation\n++++++++++++\n\non win32, `waf install` installs to a temp folder by default.  to have\nit install for a certain python version, use the --prefix option to\nwaf configure.  for instance:\n\n\twaf configure --prefix c:\\python26\n\twaf install\n\n\n\ninstallation failsafe\n---------------------\n\nif by any chance you have trouble with waf and are just looking to\ninstall pybindgen, you should know that pybindgen is entirely\nself-contained in the `pybindgen` directory.  you can simply\nrecursively copy the entire pybindgen folder into python's\nsite-packages directory, and that's it!  pybindgen is a pure python\npackage and does not actually require a c/c++ compiler; a c++ compiler is only\nused for code generation unit tests and compiling the example modules, and it is not needed to generate code.\n\n\ndocumentation\n=============\n\nthe following documentation is available:\n\n 1. `api docs (with introductory tutorial) <http://pybindgen.readthedocs.org/en/latest/>`_ \n 2. many simple examples in the `examples` directory\n 3. advanced examples in the unit tests (`tests/`)\n 4. the source code!\n\n.. image:: https://travis-ci.org/gjcarneiro/pybindgen.svg?branch=master\n    :target: https://travis-ci.org/gjcarneiro/pybindgen\n\n\n\n",
  "docs_url": "https://pythonhosted.org/PyBindGen/",
  "keywords": "",
  "license": "",
  "name": "pybindgen",
  "package_url": "https://pypi.org/project/PyBindGen/",
  "project_url": "https://pypi.org/project/PyBindGen/",
  "project_urls": {
    "Homepage": "https://github.com/gjcarneiro/pybindgen"
  },
  "release_url": "https://pypi.org/project/PyBindGen/0.22.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python bindings generator",
  "version": "0.22.1",
  "releases": [],
  "developers": [
    "gjcarneiro@gmail.com",
    "gustavo_carneiro"
  ],
  "kwds": "python pygccxml python2 pybindgen gccxml",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pybindgen",
  "homepage": "https://github.com/gjcarneiro/pybindgen",
  "release_count": 17,
  "dependency_ids": []
}
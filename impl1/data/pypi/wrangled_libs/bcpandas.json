{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: sql",
    "topic :: database"
  ],
  "description": "# bcpandas\n\n[![pypi version](https://img.shields.io/pypi/v/bcpandas.svg)](https://pypi.org/project/bcpandas/)\n[![conda-forge version](https://img.shields.io/conda/vn/conda-forge/bcpandas.svg)](https://anaconda.org/conda-forge/bcpandas)\n[![github license](https://img.shields.io/github/license/yehoshuadimarsky/bcpandas.svg)](https://github.com/yehoshuadimarsky/bcpandas/blob/master/license)\n[![ci](https://github.com/yehoshuadimarsky/bcpandas/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/yehoshuadimarsky/bcpandas/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/yehoshuadimarsky/bcpandas/branch/master/graph/badge.svg)](https://codecov.io/gh/yehoshuadimarsky/bcpandas)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/bcpandas.svg)](https://pypi.python.org/pypi/bcpandas/)\n[![awesome badges](https://img.shields.io/badge/badges-awesome-green.svg)](https://github.com/naereen/badges)\n[![downloads](https://static.pepy.tech/personalized-badge/bcpandas?period=total&units=international_system&left_color=grey&right_color=orange&left_text=pypi%20total%20downloads)](https://pepy.tech/project/bcpandas)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/yehoshuadimarsky/bcpandas/master.svg)](https://results.pre-commit.ci/latest/github/yehoshuadimarsky/bcpandas/master)\n\nhigh-level wrapper around bcp for high performance data transfers between pandas and sql server. no\nknowledge of bcp required!! (pronounced _bee-cee-pandas_)\n\n<!-- start doctoc generated toc please keep comment here to allow auto update -->\n<!-- don't edit this section, instead re-run doctoc to update -->\n\n- [quickstart](#quickstart)\n- [important - read vs. write](#important---read-vs-write)\n- [benchmarks](#benchmarks)\n  - [to_sql](#to_sql)\n    - [why not just use the new pandas `method='multi'`?](#why-not-just-use-the-new-pandas-methodmulti)\n  - [read_sql](#read_sql)\n- [requirements](#requirements)\n  - [database](#database)\n  - [python user](#python-user)\n- [installation](#installation)\n- [usage](#usage)\n  - [credential/connection object](#credentialconnection-object)\n  - [recommended usage](#recommended-usage)\n- [known issues](#known-issues)\n  - [troubleshooting](#troubleshooting)\n    - [all quote characters appear in the data](#all-quote-characters-appear-in-the-data)\n    - [all delimiter characters appear in the data](#all-delimiter-characters-appear-in-the-data)\n    - [write to database fails due to spaces in columns](#write-to-database-fails-due-to-spaces-in-columns)\n- [background](#background)\n  - [existing solutions](#existing-solutions)\n  - [design and scope](#design-and-scope)\n- [testing](#testing)\n  - [testing requirements](#testing-requirements)\n  - [what is tested?](#what-is-tested)\n  - [testing implementation](#testing-implementation)\n- [ci/cd](#cicd)\n- [contributing](#contributing)\n- [github stars trend](#github-stars-trend)\n\n<!-- end doctoc generated toc please keep comment here to allow auto update -->\n\n## quickstart\n\n```python\nin [1]: import pandas as pd\n   ...: import numpy as np\n   ...:\n   ...: from bcpandas import sqlcreds, to_sql\n\nin [2]: creds = sqlcreds(\n   ...:     'my_server',\n   ...:     'my_db',\n   ...:     'my_username',\n   ...:     'my_password'\n   ...: )\n\nin [3]: df = pd.dataframe(\n   ...:         data=np.ndarray(shape=(10, 6), dtype=int),\n   ...:         columns=[f\"col_{x}\" for x in range(6)]\n   ...:     )\n\nin [4]: df\nout[4]:\n     col_0    col_1    col_2    col_3    col_4    col_5\n0  4128860  6029375  3801155  5570652  6619251  7536754\n1  4849756  7536751  4456552  7143529  7471201  7012467\n2  6029433  6881357  6881390  7274595  6553710  3342433\n3  6619228  7733358  6029427  6488162  6357104  6553710\n4  7536737  7077980  6422633  7536732  7602281  2949221\n5  6357104  7012451  6750305  7536741  7340124  7274610\n6  7340141  6226036  7274612  7077999  6881387  6029428\n7  6619243  6226041  6881378  6553710  7209065  6029415\n8  6881378  6553710  7209065  7536743  7274588  6619248\n9  6226030  7209065  6619231  6881380  7274612  3014770\n\nin [5]: to_sql(df, 'my_test_table', creds, index=false, if_exists='replace')\n\nin [6]: df2 = pd.read_sql_table(table_name='my_test_table', con=creds.engine)\n\nin [7]: df2\nout[7]:\n     col_0    col_1    col_2    col_3    col_4    col_5\n0  4128860  6029375  3801155  5570652  6619251  7536754\n1  4849756  7536751  4456552  7143529  7471201  7012467\n2  6029433  6881357  6881390  7274595  6553710  3342433\n3  6619228  7733358  6029427  6488162  6357104  6553710\n4  7536737  7077980  6422633  7536732  7602281  2949221\n5  6357104  7012451  6750305  7536741  7340124  7274610\n6  7340141  6226036  7274612  7077999  6881387  6029428\n7  6619243  6226041  6881378  6553710  7209065  6029415\n8  6881378  6553710  7209065  7536743  7274588  6619248\n9  6226030  7209065  6619231  6881380  7274612  3014770\n```\n\n## important - read vs. write\n\nthe big speedup benefit of bcpandas is in the `to_sql` function, as the benchmarks below show.\nhowever, the bcpandas `read_sql` function actually performs **slower** than the pandas equivalent.\ntherefore, the bcpandas `read_sql` function was deprecated in v5.0 and has now been removed in\nv6.0+. to read data **from** sql to pandas, use the native pandas method `pd.read_sql_table` or\n`pd.read_sql_query`.\n\n## benchmarks\n\nsee figures below. all code is in the `/benchmarks` directory. to run the benchmarks, from the root\ndirectory of this repository, run `python benchmarks/benchmark.py main --help` and fill in the\ncommand line options that are presented.\n\nrunning this will output\n\n1. png image of the graph\n2. json file of the benchmark data\n3. json file with the environment details of the machine that was used to generate it\n\n### to_sql\n\n> i didn't bother including the pandas non-`multiinsert` version here because it just takes way too\n> long\n\n![to_sql benchmark graph](benchmarks/tosql_benchmark.png)\n\n#### why not just use the new pandas [`method='multi'`](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method)?\n\n1. because it is still much slower\n2. because you are forced to set the `chunksize` parameter to a very small number for it to work -\n   generally a bit less then `2100/<number of columns>`. this is because sql server can only accept\n   up to 2100 parameters in a query. see\n   [here](https://stackoverflow.com/questions/50689082/to-sql-pyodbc-count-field-incorrect-or-syntax-error)\n   and [here](https://github.com/mkleehammer/pyodbc/issues/217) for more discussion on this, and\n   the recommendation to use a bulk insert tool such as bcp. it seems that sql server simply didn't\n   design the regular `insert` statement to support huge amounts of data.\n\n### read_sql\n\nas you can see, pandas native clearly wins here\n\n![read_sql benchmark graph](benchmarks/readsql_benchmark.png)\n\n## requirements\n\n### database\n\nany version of microsoft sql server. can be installed on-prem, in the cloud, on a vm, or one of the\nazure versions.\n\n### python user\n\n- [bcp](https://docs.microsoft.com/en-us/sql/tools/bcp-utility) utility\n- microsoft odbc driver **11, 13, 13.1, or 17** for sql server.\n  ([microsoft docs](https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server))\n  see the\n  [pyodbc docs](https://github.com/mkleehammer/pyodbc/wiki/connecting-to-sql-server-from-windows)\n  for more on different driver versions.\n- python >= 3.8\n- `pandas` >= 1.5\n- `sqlalchemy` >= 1.4\n- `pyodbc` as the\n  [supported dbapi](https://docs.sqlalchemy.org/en/13/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc)\n\n## installation\n\n| source |                 command                 |\n| :----: | :-------------------------------------: |\n|  pypi  |         `pip install bcpandas`          |\n| conda  | `conda install -c conda-forge bcpandas` |\n\n## usage\n\n1. create creds (see next section)\n2. replace any `df.to_sql(...)` in your code with `bcpandas.to_sql(df, ...)`\n\nthat's it!\n\n### credential/connection object\n\nbcpandas requires a `bcpandas.sqlcreds` object in order to use it, and also a `sqlalchemy.engine`.\nthe user has 2 options when constructing it.\n\n1. create the bcpandas `sqlcreds` object with just the minimum attributes needed (server, database,\n   username, password), and bcpandas will create a full `engine` object from this. it will use\n   `pyodbc`, `sqlalchemy`, and the microsoft odbc driver for sql server, and will store it in the\n   `.engine` attribute.\n\n   ```python\n   in [1]: from bcpandas import sqlcreds\n\n   in [2]: creds = sqlcreds('my_server', 'my_db', 'my_username', 'my_password')\n\n   in [3]: creds.engine\n   out[3]: engine(mssql+pyodbc:///?odbc_connect=driver={odbc driver 17 for sql server};server=tcp:my_server,1433;database=my_db;uid=my_username;pwd=my_password)\n\n   ```\n\n2. pass a full `engine` object to the bcpandas `sqlcreds` object, and bcpandas will attempt to\n   parse out the server, database, username, and password to pass to the command line utilities. if\n   a dsn is used, this will fail.\n\n   (continuing example above)\n\n   ```python\n   in [4]: creds2 = sqlcreds.from_engine(creds.engine)\n\n   in [5]: creds2.engine\n   out[5]: engine(mssql+pyodbc:///?odbc_connect=driver={odbc driver 17 for sql server};server=tcp:my_server,1433;database=my_db;uid=my_username;pwd=my_password)\n\n   in [6]: creds2\n   out[6]: sqlcreds(server='my_server', database='my_db', username='my_username', with_krb_auth=false, engine=engine(mssql+pyodbc:///?odbc_connect=driver={odbc driver 17 for sql server};server=tcp:my_server,1433;database=my_db;uid=my_username;pwd=my_password), password=[redacted])\n   ```\n\n### recommended usage\n\n| feature                                           |   pandas native    |      bcpandas      |\n| ------------------------------------------------- | :----------------: | :----------------: |\n| super speed                                       |        :x:         | :white_check_mark: |\n| good for simple data types like numbers and dates |        :x:         | :white_check_mark: |\n| handle messy string data                          | :white_check_mark: |        :x:         |\n\n> built with the help of https://www.tablesgenerator.com/markdown_tables# and\n> https://gist.github.com/rxaviers/7360908\n\n## known issues\n\nhere are some caveats and limitations of bcpandas.\n\n- bcpandas has been tested with all ascii characters 32-127. unicode characters beyond that range\n  have not been tested.\n- an empty string (`\"\"`) in the dataframe becomes `null` in the sql database instead of remaining\n  an empty string.\n- because bcpandas first outputs to csv, it needs to use several specific characters to create the\n  csv, including a _delimiter_ and a _quote character_. bcpandas attempts to use characters that\n  are not present in the dataframe for this, going through the possilbe delimiters and quote\n  characters specified in `constants.py`. if all possible characters are present in the dataframe\n  and bcpandas cannot find both a delimiter and quote character to use, it will throw an error.\n  - the bcp utility does **not** ignore delimiter characters when surrounded by quotes, unlike\n    csvs - see\n    [here](https://docs.microsoft.com/en-us/sql/relational-databases/import-export/specify-field-and-row-terminators-sql-server#characters-supported-as-terminators)\n    in the microsoft docs.\n- ~~if there is a nan/null in the last column of the dataframe it will throw an error. this is due\n  to a bcp issue. see my issue with microsoft about this\n  [here](https://github.com/microsoftdocs/sql-docs/issues/2689).~~ this doesn't seem to be a\n  problem based on the tests.\n\n### troubleshooting\n\n#### all quote characters appear in the data\n\nif you encounter the error:\n```\nbcpandas.constants.bcpandasvalueerror: data contains all of the possible quote characters ('\"', \"'\", '`', '~'),\ncannot use bcp to import it. replace one of the possible quote characters in\nyour data, or use another method besides bcpandas.\n```\n\nand want to still use bcpandas, you will need to pick a quote character and remove all instances of it from the dataframe.  note\nthat you are modifying your data and take care that replacing e.g., the `~` character will not have undesired consequences.\n\nin this case we are looking to remove `~`, replacing it with `-`.  hunt for its presence in a column:\n```\nmy_df['some_text_column'].str.contains('~').sum()\n```\nif that returns a value greater than zero, you can perform replacement in that column like this:\n```\nmy_df['some_text_column'] = my_df['some_text_column'].str.replace('~','-')\n```\nthen use the first command to confirm that the number of occurences is now 0.\n\n#### all delimiter characters appear in the data\n\nvery similar to above, but with the error message:\n```\nbcpandas.constants.bcpandasvalueerror: data contains all of the possible delimiter characters (',', '|', '\\t'),\ncannot use bcp to import it. replace one of the possible delimiter characters in\nyour data, or use another method besides bcpandas.\n```\n\napproach this as is described above for quote characters.  if you target the `|` character for replacement, note that it\nmust be escaped in a regular expression with a backslash.  so the relevant commands would be (here the pipe `|` is replaced with a front slash):\n```\nmy_df['some_text_column'] = my_df['some_text_column'].str.replace('\\|','/')\nmy_df['some_text_column'].str.contains('\\|').sum()\n```\n\n#### write to database fails due to spaces in columns\n\nif you get this error message when writing to the database:\n```\nerror = [microsoft][odbc driver 17 for sql server]incorrect host-column number found in bcp format-file\n```\ntry replacing any space characters in your column names, with a command like `my_df.columns = my_df.columns.str.replace(' ','_')` ([source](https://github.com/yehoshuadimarsky/bcpandas/issues/30)).\n\n## background\n\nwriting data from pandas dataframes to a sql database is very slow using the built-in `to_sql`\nmethod, even with the newly introduced\n[`execute_many`](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-sql-method)\noption. for microsoft sql server, a far far faster method is to use the bcp utility provided by\nmicrosoft. this utility is a command line tool that transfers data to/from the database and flat\ntext files.\n\nthis package is a wrapper for seamlessly using the bcp utility from python using a pandas\ndataframe. despite the io hits, the fastest option by far is saving the data to a csv file in the\nfile system and using the bcp utility to transfer the csv file to sql server. **best of all, you\ndon't need to know anything about using bcp at all!**\n\n### existing solutions\n\n> much credit is due to `bcpy` for the original idea and for some of the code that was adopted and\n> changed.\n\n<details>\n  <summary>bcpy</summary>\n\n[bcpy](https://github.com/titan550/bcpy) has several flaws:\n\n- no support for reading from sql, only writing to sql\n- a convoluted, overly class-based internal design\n- scope a bit too broad - deals with pandas as well as flat files this repository aims to fix and\nimprove on `bcpy` and the above issues by making the design choices described earlier.\n</details>\n\n### design and scope\n\nthe _**only**_ scope of `bcpandas` is to read and write between a pandas dataframe and a microsoft\nsql server database. that's it. we do _**not**_ concern ourselves with reading existing flat files\nto/from sql - that introduces _way_ to much complexity in trying to parse and decode the various\nparts of the file, like delimiters, quote characters, and line endings. instead, to read/write an\nexiting flat file, just import it via pandas into a dataframe, and then use `bcpandas`.\n\nthe big benefit of this is that we get to precicely control all the finicky parts of the text file\nwhen we write/read it to a local file and then in the bcp utility. this lets us set library-wide\ndefaults (maybe configurable in the future) and work with those.\n\nfor now, we are using the non-xml bcp format file type. in the future, xml format files may be\nadded.\n\n## testing\n\n### testing requirements\n\n- docker desktop installed, either of the linux or windows runtimes, doesn't matter\n- pytest\n- hypothesis\n- pytest-cov (coverage.py)\n\n### what is tested?\n\nwe take testing very seriously here. in order to rely on a library like this in production, it\n**must** be ruthlessly tested, which thankfully it is. here is a partial list of what has been\ntested so far. pull requests welcome!\n\n- data types: all ascii characters 32-127 (using the hypothesis library, see below). unicode\n  characters beyond that range have not been tested.\n- `numpy.nan`, `none`\n- `numpy.inf` (fails, as expected)\n- empty dataframe (nothing happens, database not modified)\n- duplicate column names (raises error)\n- database columns that are missing from the dataframe, are out of order, or both (passes)\n- extra dataframe columns that aren't in database, when `if_exists=\"append\"` specified (fails)\n\n### testing implementation\n\n- testing uses `pytest`.\n- to test for all possible data types, we use the `hypothesis` library, instead of trying to come\n  up with every single case on our own.\n- `pytest-cov` (which uses `coverage.py` under the hood) is used to measure code coverage. this is\n  then uploaded to [codecov.io](https://codecov.io/gh/yehoshuadimarsky/bcpandas) as part of the\n  ci/cd process (see below).\n- in order to spin up a local sql server during testing, we use docker. specifically, we run one of\n  the images that microsoft provides that already have sql server fully installed, all we have to\n  do is use the image to run a container. here are the links to the\n  [linux versions](https://hub.docker.com/_/microsoft-mssql-server) and the windows versions -\n  [express](https://hub.docker.com/r/microsoft/mssql-server-windows-express/) and\n  [developer](https://hub.docker.com/r/microsoft/mssql-server-windows-developer).\n  - when running the tests, we can specify a specific docker image to use, by invoking the custom\n    command line option called `--mssql-docker-image`. for example:\n    ```bash\n    pytest bcpandas/tests --mssql-docker-image mcr.microsoft.com/mssql/server:2019-latest\n    ```\n- instead of using the `subprocess` library to control docker manually, we use the elegant\n  `docker-py` library which works very nicely. a `dockerdb` python class is defined in\n  `bcpandas/tests/utils.py` and it wraps up all the docker commands and functionality needed to use\n  sql server into one class. this class is used in `conftest.py` in the core bcpandas tests, and in\n  the `benchmarks/` directory for both the benchmarks code as well as the legacy tests for\n  `read_sql`.\n\n## ci/cd\n\ngithub actions is used for ci/cd, although it is still somewhat a work in progress.\n\n## contributing\n\nplease, all contributions are very welcome!\n\ni will attempt to use the `pandas` docstring style as detailed\n[here](https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html).\n\n## github stars trend\n\n[![stargazers over time](https://starchart.cc/yehoshuadimarsky/bcpandas.svg)](https://starchart.cc/yehoshuadimarsky/bcpandas)\n",
  "docs_url": null,
  "keywords": "bcp,mssql,pandas",
  "license": "mit",
  "name": "bcpandas",
  "package_url": "https://pypi.org/project/bcpandas/",
  "project_url": "https://pypi.org/project/bcpandas/",
  "project_urls": {
    "Homepage": "https://github.com/yehoshuadimarsky/bcpandas",
    "Repository": "https://github.com/yehoshuadimarsky/bcpandas"
  },
  "release_url": "https://pypi.org/project/bcpandas/2.5.0/",
  "requires_dist": [
    "pandas (>=1.5)",
    "pyodbc",
    "sqlalchemy (>=1.4)"
  ],
  "requires_python": ">=3.8.1",
  "summary": "high-level wrapper around bcp for high performance data transfers between pandas and sql server. no knowledge of bcp required!!",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "me@borchero.com",
    "oliver_borchert",
    "yehoshuadimarsky"
  ],
  "kwds": "bcpandas bcpandasvalueerror pandas pandas_ bcpy",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bcpandas",
  "homepage": "https://github.com/yehoshuadimarsky/bcpandas",
  "release_count": 34,
  "dependency_ids": [
    "pypi_pandas",
    "pypi_pyodbc",
    "pypi_sqlalchemy"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "programming language :: javascript",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "dukpy\n=====\n\n.. image:: https://github.com/amol-/dukpy/actions/workflows/run-tests.yml/badge.svg\n    :target: https://travis-ci.org/amol-/dukpy\n\n.. image:: https://coveralls.io/repos/amol-/dukpy/badge.png?branch=master\n    :target: https://coveralls.io/r/amol-/dukpy?branch=master\n\n.. image:: https://img.shields.io/pypi/v/dukpy.svg\n   :target: https://pypi.org/p/dukpy\n\n\ndukpy is a simple javascript interpreter for python built on top of\nduktape engine **without any external dependency**.\nit comes with a bunch of common transpilers built-in for convenience:\n\n    - *coffeescript*\n    - *babeljs*\n    - *typescript*\n    - *jsx*\n    - *less*\n\ncoffeescript compiler\n---------------------\n\nusing the coffeescript compiler is as easy as running:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.coffee_compile('''\n    ...     fill = (container, liquid = \"coffee\") ->\n    ...         \"filling the #{container} with #{liquid}...\"\n    ... ''')\n    '(function() {\\n  var fill;\\n\\n  fill = function*(container, liquid) {\\n    if (liquid == null) {\\n      liquid = \"coffee\";\\n    }\\n    return \"filling the \" + container + \" with \" + liquid + \"...\";\\n  };\\n\\n}).call(this);\\n'\n\ntypescript transpiler\n---------------------\n\nthe typescript compiler can be used through the\n``dukpy.typescript_compile`` function:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.typescript_compile('''\n    ... class greeter {\n    ...     constructor(public greeting: string) { }\n    ...     greet() {\n    ...         return \"<h1>\" + this.greeting + \"</h1>\";\n    ...     }\n    ... };\n    ...\n    ... var greeter = new greeter(\"hello, world!\");\n    ... ''')\n    'var greeter = (function () {\\n    function greeter(greeting) {\\n        this.greeting = greeting;\\n    }\\n    greeter.prototype.greet = function () {\\n        return \"<h1>\" + this.greeting + \"</h1>\";\\n    };\\n    return greeter;\\n})();\\n;\\nvar greeter = new greeter(\"hello, world!\");\\n'\n\ncurrently the compiler has built-in options and doesn't accept additional ones,\n\nthe dukpy based typescript compiler also provides a webassets (\nhttp://webassets.readthedocs.org/en/latest/ ) filter to automatically\ncompile typescript code in your assets pipeline.  you register this filter as\n``typescript`` within webassets using:\n\n.. code:: python\n\n    from webassets.filter import register_filter\n    from dukpy.webassets import typescript\n\n    register_filter(typescript)\n\nwhich makes the filter available with the ``typescript`` name.\n\n**note:** when using the typescript compiler for code that needs to run\nin the browser, make sure to add\nhttps://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.24/system.js\ndependency. as ``import`` statements are resolved using systemjs.\n\necmascript6 babeljs transpiler\n------------------------------\n\nto compile es6 code to es5 for everyday usage you can use\n``dukpy.babel_compile``:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.babel_compile('''\n    ... class point {\n    ...     constructor(x, y) {\n    ...             this.x = x;\n    ...         this.y = y;\n    ...         }\n    ...         tostring() {\n    ...             return '(' + this.x + ', ' + this.y + ')';\n    ...         }\n    ... }\n    ... ''')\n    '\"use strict\";\\n\\nvar _prototypeproperties = function (child, staticprops, instanceprops) { if (staticprops) object.defineproperties(child, staticprops); if (instanceprops) object.defineproperties(child.prototype, instanceprops); };\\n\\nvar _classcallcheck = function (instance, constructor) { if (!(instance instanceof constructor)) { throw new typeerror(\"cannot call a class as a function\"); } };\\n\\nvar point = (function () {\\n    function point(x, y) {\\n        _classcallcheck(this, point);\\n\\n        this.x = x;\\n        this.y = y;\\n    }\\n\\n    _prototypeproperties(point, null, {\\n        tostring: {\\n            value: function tostring() {\\n                return \"(\" + this.x + \", \" + this.y + \")\";\\n            },\\n            writable: true,\\n            configurable: true\\n        }\\n    });\\n\\n    return point;\\n})();\\n'\n\nyou  can pass `options`__ to the babeljs compiler just as keywords on\nthe call to ``babel_compile()``.\n\n__ http://babeljs.io/docs/usage/options/\n\nthe dukpy based babeljs compiler also provides a webassets (\nhttp://webassets.readthedocs.org/en/latest/ ) filter to automatically\ncompile es6 code in your assets pipeline.  you register this filter as\n``babeljs`` within webassets using:\n\n.. code:: python\n\n    from webassets.filter import register_filter\n    from dukpy.webassets import babeljs\n\n    register_filter(babeljs)\n\nwhich makes the filter available with the ``babeljs`` name.\nonly supported filter option is currently `babel_modules_loader` with value\n``systemjs`` or ``umd`` to specify that compiled code should use systemjs\nor umd instead of commonjs for modules.\n\n**note:** when using the babeljs compiler for code that needs to run\nin the browser, make sure to add\nhttps://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/6.26.0/polyfill.min.js\ndependency.\n\njsx to react transpiling\n------------------------\n\ndukpy provides a built-in compiler from jsx to react, this is available as\n``dukpy.jsx_compile``:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.jsx_compile('var react_hello = <h1>hello, world!</h1>;')\n    u'\"use strict\";\\n\\nvar react_hello = react.createelement(\\n  \"h1\",\\n  null,\\n  \"hello, world!\"\\n);'\n\nthe dukpy based jsx compiler also provides a webassets (\nhttp://webassets.readthedocs.org/en/latest/ ) filter to automatically\ncompile jsx+es6 code in your assets pipeline.  you register this filter as\n``babeljsx`` within webassets using:\n\n.. code:: python\n\n    from webassets.filter import register_filter\n    from dukpy.webassets import babeljsx\n\n    register_filter(babeljsx)\n\nwhich makes the filter available with the ``babeljsx`` name.\nthis filter supports the same options as the babel one.\n\nless transpiling\n----------------\n\ndukpy provides a built-in distribution of the less compiler available\nthrough `dukpy.less_compile`:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.less_compile('.class { width: (1 + 1) }')\n    '.class {\\n  width: 2;\\n}\\n'\n\n\nthe dukpy based less compiler also provides a webassets (\nhttp://webassets.readthedocs.org/en/latest/ ) filter to automatically\ncompile less code in your assets pipeline.  you register this filter as\n``lessc`` within webassets using:\n\n.. code:: python\n\n    from webassets.filter import register_filter\n    from dukpy.webassets import compileless\n\n    register_filter(compileless)\n\nwhich makes the filter available with the ``lessc`` name.\n\n\nusing the javascript interpreter\n--------------------------------\n\nusing dukpy is as simple as calling the ``dukpy.evaljs`` function with\nthe javascript code:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.evaljs(\"var o = {'value': 5}; o['value'] += 3; o\")\n    {'value': 8}\n\n\nthe ``evaljs`` function executes the javascript and returns the\nresulting value as far as it is possible to encode it in json.\n\nif execution fails a ``dukpy.jsruntimeerror`` exception is raised\nwith the failure reason.\n\npassing arguments\n~~~~~~~~~~~~~~~~~\n\nany argument passed to ``evaljs`` is available in javascript inside\nthe ``dukpy`` object in javascript. it must be possible to encode\nthe arguments using json for them to be available in javascript:\n\n.. code:: python\n\n    >>> import dukpy\n    >>>\n    >>> def sum3(value):\n    ...     return dukpy.evaljs(\"dukpy['value'] + 3\", value=value)\n    ...\n    >>> sum3(7)\n    10\n\nrunning multiple scripts\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe ``evaljs`` function supports providing multiple source codes to\nbe executed in the same context.\n\nmultiple script can be passed in a list or tuple:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> dukpy.evaljs([\"var o = {'value': 5}\",\n    ...               \"o['value'] += 3\",\n    ...               \"o\"])\n    {'value': 8}\n\nthis is useful when your code requires dependencies to work,\nas you can load the dependency and then your code.\n\nthis is actually how the coffeescript compiler is implemented\nby dukpy itself:\n\n.. code:: python\n\n    def coffee_compile(source):\n        with open(coffee_compiler, 'r') as coffeescript_js:\n            return evaljs((coffeescript_js.read(), 'coffeescript.compile(dukpy.coffeecode)'),\n                          coffeecode=source)\n\nusing a persistent javascript interpreter\n-----------------------------------------\n\nthe ``evaljs`` function creates a new interpreter on each call,\nthis is usually convenient and avoid errors due to dirt global variables\nor unexpected execution status.\n\nin some cases you might want to run code that has a slow bootstrap, so\nit's convenient to reuse the same interpreter between two different calls\nso that the bootstrap cost has already been paid during the first execution.\n\nthis can be achieved by using the ``dukpy.jsinterpreter`` object.\n\ncreating a ``dukpy.jsinterpreter`` permits to evaluate code inside that interpreter\nand multiple ``eval`` calls will share the same interpreter and global status:\n\n\n.. code:: python\n\n    >>> import dukpy\n    >>> interpreter = dukpy.jsinterpreter()\n    >>> interpreter.evaljs(\"var o = {'value': 5}; o\")\n    {u'value': 5}\n    >>> interpreter.evaljs(\"o.value += 1; o\")\n    {u'value': 6}\n\nloading modules with require\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwhen using the ``dukpy.jsinterpreter`` object it is possible to use\nthe ``require('modulename')`` instruction to load a module inside javascript.\n\nmodules are looked up in all directories registered with\n``dukpy.jsinterpreter.loader.register_path``:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> jsi = dukpy.jsinterpreter()\n    >>> jsi.loader.register_path('./js_modules')\n    >>> jsi.evaljs(\"isempty = require('fbjs/lib/isempty'); isempty([1])\")\n    false\n\ninstalling packages from npmjs.org\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwhen using the persistent javascript interpreter it is also possible to install packages\nfrom *npmjs.org* through the ``dukpy.install_jspackage`` function:\n\n.. code:: python\n\n    >>> import dukpy\n    >>> jsi = dukpy.jsinterpreter()\n    >>> dukpy.install_jspackage('promise', none, './js_modules')\n    packages going to be installed: promise->7.1.1, asap->2.0.3\n    fetching https://registry.npmjs.org/promise/-/promise-7.1.1.tgz..........................\n    fetching https://registry.npmjs.org/asap/-/asap-2.0.3.tgz............\n    installing promise in ./js_modules done!\n\nthe same functionality is also provided by the ``dukpy-install`` shell command::\n\n    $ dukpy-install -d ./js_modules promise\n    packages going to be installed: promise->7.1.1, asap->2.0.3\n    fetching https://registry.npmjs.org/promise/-/promise-7.1.1.tgz..........................\n    fetching https://registry.npmjs.org/asap/-/asap-2.0.3.tgz............\n    installing promise in ./js_modules done!\n\nplease note that currently `install_jspackage` is not able to resolve conflicting\ndependencies.\n",
  "docs_url": null,
  "keywords": "javascript compiler babeljs jsx coffeescript typescript",
  "license": "mit",
  "name": "dukpy",
  "package_url": "https://pypi.org/project/dukpy/",
  "project_url": "https://pypi.org/project/dukpy/",
  "project_urls": {
    "CI: AppVeyor": "https://ci.appveyor.com/project/amol-/dukpy",
    "CI: Travis": "https://travis-ci.org/amol-/dukpy",
    "GitHub: issues": "https://github.com/amol-/dukpy/issues",
    "GitHub: repo": "https://github.com/amol-/dukpy",
    "Homepage": "https://github.com/amol-/dukpy"
  },
  "release_url": "https://pypi.org/project/dukpy/0.3.0/",
  "requires_dist": [
    "pytest ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "mock ; extra == 'testing'",
    "webassets ; extra == 'webassets'"
  ],
  "requires_python": "",
  "summary": "simple javascript interpreter for python",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "alessandro_molina",
    "amol@turbogears.org"
  ],
  "kwds": "dukpy babeljsx interpreter jsx_compile babeljs",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dukpy",
  "homepage": "https://github.com/amol-/dukpy",
  "release_count": 12,
  "dependency_ids": [
    "pypi_mock",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_webassets"
  ]
}
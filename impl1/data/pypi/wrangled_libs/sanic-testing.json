{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# sanic core test\n\nthis package is meant to be the core testing utility and clients for testing sanic applications. it is mainly derived from `sanic.testing` which has (or will be) removed from the main sanic repository in the future.\n\n[documentation](https://sanicframework.org/en/plugins/sanic-testing/getting-started.html)\n\n## getting started\n\n    pip install sanic-testing\n\nthe package is meant to create an almost seemless transition. therefore, after loading the package, it will attach itself to your sanic instance and insert test clients.\n\n```python\nfrom sanic import sanic\nfrom sanic_testing import testmanager\n\nsanic_app = sanic(__name__)\ntestmanager(sanic_app)\n```\n\nthis will provide access to both the sync (`sanic.test_client`) and async (`sanic.asgi_client`) clients. both of these clients are also available directly on the `testmanager` instance.\n\n## writing a sync test\n\ntesting should be pretty much the same as when the test client was inside sanic core. the difference is just that you need to run `testmanager`.\n\n```python\nimport pytest\n\n@pytest.fixture\ndef app():\n    sanic_app = sanic(__name__)\n    testmanager(sanic_app)\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\ndef test_basic_test_client(app):\n    request, response = app.test_client.get(\"/\")\n\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n\n## writing an async test\n\ntesting of an async method is best done with `pytest-asyncio` installed. again, the following test should look familiar to anyone that has used `asgi_client` in the sanic core package before.\n\nthe main benefit of using the `asgi_client` is that it is able to reach inside your application, and execute your handlers without ever having to stand up a server or make a network call.\n\n```python\nimport pytest\n\n@pytest.fixture\ndef app():\n    sanic_app = sanic(__name__)\n    testmanager(sanic_app)\n\n    @sanic_app.get(\"/\")\n    def basic(request):\n        return response.text(\"foo\")\n\n    return sanic_app\n\n@pytest.mark.asyncio\nasync def test_basic_asgi_client(app):\n    request, response = await app.asgi_client.get(\"/\")\n\n    assert response.body == b\"foo\"\n    assert response.status == 200\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "sanic-testing",
  "package_url": "https://pypi.org/project/sanic-testing/",
  "project_url": "https://pypi.org/project/sanic-testing/",
  "project_urls": {
    "Homepage": "https://github.com/sanic-org/sanic-testing/"
  },
  "release_url": "https://pypi.org/project/sanic-testing/23.6.0/",
  "requires_dist": [
    "httpx (>=0.18)"
  ],
  "requires_python": "",
  "summary": "core testing clients for sanic",
  "version": "23.6.0",
  "releases": [],
  "developers": [
    "adam_hopkins",
    "admhpkns@gmail.com"
  ],
  "kwds": "sanic_testing sanic_app sanic sanicframework test_basic_test_client",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sanic_testing",
  "homepage": "https://github.com/sanic-org/sanic-testing/",
  "release_count": 25,
  "dependency_ids": [
    "pypi_httpx"
  ]
}
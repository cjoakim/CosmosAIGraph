{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: internet :: www/http :: dynamic content"
  ],
  "description": "flask-classful\n==============\n\nnote::\n\n    this is a fork of original `flask-classy` for continuing its development since the original\n    project was not updated for a long time. for more information, see:\n    https://github.com/apiguy/flask-classy/issues/80\n\n\nflask-classful is an extension that adds class-based views to flask.\nbut why?\n\ni \u2764 flask. like a lot. but sometimes projects get a little big\nand i need some way of managing and organizing all the different\npieces. i know what you're saying: \"but what about blueprints?\"\n\nyou're right. blueprints are pretty awesome. but i found that they\naren't always enough to encapsulate a specific context the way i\nneed. what i wanted, no what i *needed* was to be able to group\nmy views into relevant classes each with their own context and\nbehavior. it's also made testing really nifty too.\n\n\"ok, i see your point. but can't i just use the base classes in\n``flask.views`` to do that?\"\n\nwell, yes and no. while ``flask.views.methodview`` does\nprovide some of the functionality of ``flask_classful.flaskview``\nit doesn't quite complete the picture by supporting methods that\naren't part of the typical crud operations for a given resource, or\nmake it easy for me to override the route rules for particular view.\nand while ``flask.views.view`` does add some context, it requires\na class for each view instead of letting me group very similar\nviews for the same resource into a single class.\n\n\"but my projects aren't that big. can flask-classful do\nanything else for me besides making a big project easier to manage?\"\n\nwhy yes. it does help a bit with some other things.\n\nfor example, `flask-classful` will automatically generate routes based on the methods\nin your views, and makes it super simple to override those routes\nusing flask's familiar decorator syntax.\n\n.. _flask-classful: https://github.com/pallets-eco/flask-classful\n.. _flask: https://flask.palletsprojects.com/\n\ninstallation\n------------\n\ninstall the latest extension with::\n\n    $ pip install flask-classful\n\n\nlet's see how it works\n----------------------\n\nif you're like me, you probably get a better idea of how to use something\nwhen you see it being used. let's go ahead and create a little app to\nsee how flask-classful works:\n\n..  code-block:: python\n\n    from flask import flask\n    from flask_classful import flaskview\n\n    # we'll make a list to hold some quotes for our app\n    quotes = [\n        \"a noble spirit embiggens the smallest man! ~ jebediah springfield\",\n        \"if there is a way to do it better... find it. ~ thomas edison\",\n        \"no one knows what he can do till he tries. ~ publilius syrus\"\n    ]\n\n    app = flask(__name__)\n\n    class quotesview(flaskview):\n        def index(self):\n            return \"<br>\".join(quotes)\n\n    quotesview.register(app)\n\n    if __name__ == '__main__':\n        app.run()\n\nrun this app and open your web browser to: http://localhost:5000/quotes/\n\nas you can see, it returns the list of quotes. but what if we just wanted\none quote? what would we do then?\n\n..  code-block:: python\n\n    class quotesview(flaskview):\n        def index(self):\n            ...\n\n        def get(self, id):\n            id = int(id)\n            if id < len(quotes):\n                return quotes[id]\n            else:\n                return \"not found\", 404\n\nnow direct your browser to: http://localhost:5000/quotes/1/ and you should\nsee the very poignant quote from the esteemed mr. edison.\n\nthat's cool and all, but what if we just wanted a random quote? what then?\nlet's add a random view to our flaskview:\n\n..  code-block:: python\n\n    from random import choice\n\n..  code-block:: python\n\n    class quotesview(flaskview):\n        def index(self):\n            ...\n\n        def get(self, id):\n            ...\n\n        def random(self):\n            return choice(quotes)\n\nand point your browser to: http://localhost:5000/quotes/random/ and see\nthat a random quote is returned each time. voil\u00e0!\n\nso by now you must be keenly aware of the fact that you have not defined a\nsingle route, but yet routing is obviously taking place. \"is this voodoo?\"\nyou ask?\n\nnot at all. flask-classful will automatically create routes for any method\nin a flaskview that doesn't begin with an underscore character.\nyou can still define your own routes of course, and we'll look at that next.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "flask-classful",
  "package_url": "https://pypi.org/project/Flask-Classful/",
  "project_url": "https://pypi.org/project/Flask-Classful/",
  "project_urls": {
    "Source": "https://github.com/pallets-eco/flask-classful/"
  },
  "release_url": "https://pypi.org/project/Flask-Classful/0.16.0/",
  "requires_dist": [
    "flask>=0.12.5"
  ],
  "requires_python": ">=3.7",
  "summary": "class based views for flask",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "contact@palletsprojects.com"
  ],
  "kwds": "flask_classful flaskview flask _flask classes",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_flask_classful",
  "homepage": "",
  "release_count": 11,
  "dependency_ids": [
    "pypi_flask"
  ]
}
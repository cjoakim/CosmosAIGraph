{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: unix shell",
    "topic :: software development",
    "topic :: software development :: testing"
  ],
  "description": "=========\ndocshtest\n=========\n\n.. image:: https://img.shields.io/pypi/v/docshtest.svg\n    :target: https://pypi.python.org/pypi/docshtest\n\n.. image:: https://img.shields.io/travis/vaab/docshtest/master.svg?style=flat\n   :target: https://travis-ci.org/vaab/docshtest/\n   :alt: travis ci build status\n\n.. image:: https://img.shields.io/appveyor/ci/vaab/docshtest.svg\n   :target: https://ci.appveyor.com/project/vaab/docshtest/branch/master\n   :alt: appveyor ci build status\n\n.. image:: http://img.shields.io/codecov/c/github/vaab/docshtest.svg?style=flat\n   :target: https://codecov.io/gh/vaab/docshtest/\n   :alt: test coverage\n\n\ndoctest for shell - quick, slim and dirty\n\n\nfeature\n=======\n\n- quick way to write doctest in shell\n\n- works on windows, linux, python 2.7, python 3.5+\n\n- slim because it has no dependencies to other project, one file, in python\n\n- doctest feeling\n\n- you can mix python tests ans shell tests\n\n- only checks standard output (although, you can tailor your test\n  commands to output what is meaningful to standard output.)\n\n\ncurrent status\n==============\n\nthis is an early alpha code.\n\nmajor concerns and shortcomings:\n\n- end of blocks and final ``\\n`` are not tested correctly\n- tests execution in current directory with possible consequences.\n- no support of checking error level\n- no support of proper mixed standard error and standard output content\n- limited to ``bash`` testing (needs ``bash -n`` equivalent)\n- rough detection of ``doctests`` command blocks is relying on ``bash\n  -n`` error output. not sure this is very solid.\n\nminor concerns, but would be better without:\n\n- fail on first error hard-written.\n- hard-written support of ``<blankline>``\n\npossible evolution:\n\n- profiling\n- support of python file (by extracting docs before)\n- integration in nosetests ? is it possible ?\n- colorize output ?\n- coverage integration ?\n\n\ninstallation\n============\n\nyou don't need to download the git version of the code as ``docshtest`` is\navailable on the pypi. so you should be able to run::\n\n    pip install docshtest\n\nif you have downloaded the git sources, then you could add install\nthe current version via traditional::\n\n    python setup.py install\n\nand if you don't have the git sources but would like to get the latest\nmaster or branch from github, you could also::\n\n    pip install git+https://github.com/vaab/docshtest\n\nor even select a specific revision (branch/tag/commit)::\n\n    pip install git+https://github.com/vaab/docshtest@master\n\n\nusage\n=====\n\n\nquickstart\n----------\n\n``docshtest`` is a ``doctest`` for shell command. this means it allows\nyou to integrate in your documentation some examples of shell code and\ntheir expected output that will be actually verifiable.\n\nfirst please notice that these documentation lines you are reading are\nstored in a ``readme.rst`` file that will contain very soon some\nexamples of how to run ``docshtest`` and what outcome to expect.\n\nthe very first example that comes to mind is to run ``docshtest`` on\nthis very documentation::\n\n    docshtest readme.rst\n\nyou can check that yourself, and that's done in the ci procedures.\n\nlet's introduce you the basics of writing your own testable\ndocumentation...\n\nso this is how it works::\n\n    $ cat <<'eof' > mydoc.rst   ## first test file\n\n    this is standard rst, we can include runnable test blocks::\n\n        $ echo 'hello world'\n        hello world\n\n    eof\n\nnote that indentation is required, as well as the ``\"$ \"`` (dollar sign\nfollowed by a space) before the command to be executed. please refer\nto the following section to understand how ``docshtest`` figures out\nthe end of your shell code and the start of the output.\n\nthe output starts after the end of your command, indented also, and\nwill be matched with the actual command output. if there is a mismatch\nthe test will fail, and ``docshtest`` will cancel any remaining tests.\nif it matches, next test block will be executed.\n\nto run our test::\n\n    $ ./docshtest mydoc.rst\n    #0001 - success (line          4)\n\n\nmultiline commands\n------------------\n\nmultiline commands are detected with a very simple, but dirty method,\n``docshtest`` will simply provide the exact code, starting with only\nthe first line to the shell interpreter, if the shell interpreter\ncomplains, it'll try again by adding the next line to the output.\n\nthis allows to document/test multi-line shell codes like::\n\n    $ cat <<eof > mydoc.rst   ## first test file\n\n    multiline commands::\n\n        $ for a in \\$(seq 1 3); do\n            echo \"foo\\$a\"\n          done\n        foo1\n        foo2\n        foo3\n\n    eof\n    $ ./docshtest mydoc.rst\n    #0001 - success (lines       4-6)\n\nplease note that the extra indentation for the body of the ``for`` loop or\nthe ``done`` is unnecessary, but is recommended for reading::\n\n    $ cat <<eof > mydoc.rst   ## first test file\n\n    multiline commands::\n\n        $ for a in \\$(seq 1 3); do\n          echo \"foo\\$a\"\n        done\n        foo1\n        foo2\n        foo3\n\n    eof\n    $ ./docshtest mydoc.rst\n    #0001 - success (lines       4-6)\n\n\nfailing test will display both expected output and current output::\n\n    $ cat <<eof > mydoc.rst   ## first test file\n\n    multiline commands::\n\n        $ for a in \\$(seq 1 3); do\n          echo \"foo\\$a\"\n        done\n        foo1\n        foo4\n        foo3\n\n    eof\n    $ ./docshtest mydoc.rst\n    #0001 - failure (lines       4-6):\n      command:\n      | for a in $(seq 1 3); do\n      |   echo \"foo$a\"\n      | done\n      expected:\n      | foo1\n      | foo4\n      | foo3\n      |\n      output:\n      | foo1\n      | foo2\n      | foo3\n      |\n\nbut note that if these outputs are bigger, a standard unified diff will be\nprinted::\n\n    $ cat <<eof > mydoc.rst   ## first test file\n\n    multiline commands::\n\n        $ for a in \\$(seq 1 6); do\n          echo \"foo\\$a\"\n        done\n        foo1\n        foo3\n        foo4\n        foo5\n        foo6\n\n    eof\n    $ ./docshtest mydoc.rst\n    #0001 - failure (lines       4-6):\n      command:\n      | for a in $(seq 1 6); do\n      |   echo \"foo$a\"\n      | done\n      expected:\n      | foo1\n      | foo3\n      | foo4\n      | foo5\n      | foo6\n      |\n      output:\n      | foo1\n      | foo2\n      | foo3\n      | foo4\n      | foo5\n      | foo6\n      |\n      diff:\n      --- expected\n      +++ output\n      @@ -1,4 +1,5 @@\n       foo1\n      +foo2\n       foo3\n       foo4\n       foo5\n\n\ntinkering all executed code\n---------------------------\n\nyou can transform all executed code before execution thanks to\n``--regex regex`` (or ``-r regex``) option::\n\n    $ cat <<'eof' > mydoc.rst   ## first test file\n\n    our tested command is 'foo'\n\n        $ foo 'hello world'\n        hello world\n\n    eof\n    $ ./docshtest -r '#\\bfoo\\b#echo#' mydoc.rst\n    #0001 - success (line          4)\n\n\nconditional tests\n-----------------\n\nyou might want to have conditional tests, that are triggered only\non if specific test succeeds. this feature uses ``meta`` commands\nthat are specified as shell comments in the given block::\n\n    $ cat <<'eof' > mydoc.rst\n\n    our tested command is 'foo'\n\n        $ echo $envvar       ## docshtest: if-success-set var_was_set\n        0\n        $ echo 'var is set'  ## docshtest: ignore-if var_was_set\n        shouldfail\n        $ echo 'var is not set'  ## docshtest: ignore-if-not var_was_set\n        shouldfail\n\n    eof\n    $ envvar=0 ./docshtest mydoc.rst\n    #0001 - ignored (line          4): if-success-set var_was_set\n    #0002 - ignored (line          6): ignore-if var_was_set\n    #0003 - failure (line          8):\n      command:\n      | echo 'var is not set'  ## docshtest: ignore-if-not var_was_set\n      expected:\n      | shouldfail\n      |\n      output:\n      | var is not set\n      |\n\n\nencoding\n--------\n\n``docshtest`` will assume everything is \"utf-8\"::\n\n    $ cat <<'eof' > mydoc.rst\n\n    our tested command is 'foo'\n\n        $ echo \"\u00e9\u00e0\"\n        \u00e9\u00e0\n        $ echo \"\u00e9\"\n        e\n\n    eof\n\n    $ ./docshtest mydoc.rst\n    #0001 - success (line          4)\n    #0002 - failure (line          6):\n      command:\n      | echo \"\u00e9\"\n      expected:\n      | e\n      |\n      output:\n      | \u00e9\n      |\n\n\ncommand line\n------------\n\n``docshtest`` supports the common gnu standard ``--help`` options::\n\n    $ ./docshtest --help\n\n    docshtest - parse file and run shell doctests\n\n    usage:\n\n        docshtest (-h|--help)\n        docshtest [[-r|--regex regex] ...] docshtest_file\n\n\n    options:\n\n        -r regex, --regex regex\n                  will apply this regex to the lines to be executed. you\n                  can have more than one patterns by re-using this options\n                  as many times as wanted. regexps will be applied one by one\n                  in the same order than they are provided on the command line.\n\n\n    examples:\n\n         ## run tests but replace executable on-the-fly for coverage support\n         docshtest readme.rst -r '/\\bdocshtest\\b/coverage run docshtest.py/'\n    <blankline>\n    <blankline>\n\nfirst argument is necessary::\n\n    $ ./docshtest\n    error: please provide a rst filename as argument. (use '--help' option to get usage info)\n\nand of course it should be the path of a file::\n\n    $ ./docshtest notexistent\n    error: file 'notexistent' not found.\n\n\ncontributing\n============\n\nany suggestion or issue is welcome. push request are very welcome,\nplease check out the guidelines.\n\n\npush request guidelines\n-----------------------\n\nyou can send any code. i'll look at it and will integrate it myself in\nthe code base and leave you as the author. this process can take time and\nit'll take less time if you follow the following guidelines:\n\n- try to stick to 80 columns wide.\n- separate your commits per smallest concern.\n- each commit should pass the tests (to allow easy bisect)\n- each functionality/bugfix commit should contain the code, tests,\n  and doc.\n- prior minor commit with typographic or code cosmetic changes are\n  very welcome. these should be tagged in their commit summary with\n  ``!minor``.\n- the commit message should follow gitchangelog rules (check the git\n  log to get examples)\n- if the commit fixes an issue or finished the implementation of a\n  feature, please mention it in the summary.\n\nif you have some questions about guidelines which is not answered here,\nplease check the current ``git log``, you might find previous commit that\nwould show you how to deal with your issue.\n\n\nlicense\n=======\n\ncopyright (c) 2012-2020 valentin lab.\n\nlicensed under the `bsd license`_.\n\n.. _bsd license: http://raw.github.com/0k/sunit/master/license\n\nchangelog\n=========\n\n\n0.0.3 (2020-12-14)\n------------------\n\nfix\n~~~\n- support ``utf-8`` encoding. [valentin lab]\n\n\n0.0.1 (2019-02-11)\n------------------\n- first import. [valentin lab]\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause license",
  "name": "docshtest",
  "package_url": "https://pypi.org/project/docshtest/",
  "project_url": "https://pypi.org/project/docshtest/",
  "project_urls": {
    "Homepage": "http://github.com/0k/docshtest"
  },
  "release_url": "https://pypi.org/project/docshtest/0.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "doctest for shell commands",
  "version": "0.0.3",
  "releases": [],
  "developers": [
    "valentin.lab@kalysto.org",
    "valentin_lab"
  ],
  "kwds": "docshtest docshtest_file doctest doctests vaab",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_docshtest",
  "homepage": "http://github.com/0k/docshtest",
  "release_count": 2,
  "dependency_ids": []
}
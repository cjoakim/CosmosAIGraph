{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "click-repl\n===\n\n[![tests](https://github.com/click-contrib/click-repl/actions/workflows/tests.yml/badge.svg?branch=master)](https://github.com/click-contrib/click-repl/actions/workflows/tests.yml)\n[![license](https://img.shields.io/pypi/l/click-repl?label=license)](https://github.com/click-contrib/click-repl/license)\n![python - version](https://img.shields.io/badge/python-3%20%7c%203.7%20%7c%203.8%20%7c%203.9%20%7c%203.10%20%7c%203.11-blue)\n[![pypi - version](https://img.shields.io/badge/pypi-v0.2.0-blue)](https://pypi.org/project/click-repl/)\n![wheels](https://img.shields.io/piwheels/v/click-repl?label=wheel)\n![pypi - status](https://img.shields.io/pypi/status/click)\n![pypi - downloads](https://img.shields.io/pypi/dm/click-repl)\n\ninstallation\n===\n\ninstallation is done via pip:\n```\npip install click-repl\n```\nusage\n===\n\nin your [click](http://click.pocoo.org/) app:\n\n```py\nimport click\nfrom click_repl import register_repl\n\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\ndef hello():\n    click.echo(\"hello world!\")\n\nregister_repl(cli)\ncli()\n```\nin the shell:\n```\n$ my_app repl\n> hello\nhello world!\n> ^c\n$ echo hello | my_app repl\nhello world!\n```\n**features not shown:**\n\n- tab-completion.\n- the parent context is reused, which means `ctx.obj` persists between\n  subcommands. if you're keeping caches on that object (like i do), using the\n  app's repl instead of the shell is a huge performance win.\n- `!` - prefix executes shell commands.\n\nyou can use the internal `:help` command to explain usage.\n\nadvanced usage\n===\n\nfor more flexibility over how your repl works you can use the `repl` function\ndirectly instead of `register_repl`. for example, in your app:\n\n```py\nimport click\nfrom click_repl import repl\nfrom prompt_toolkit.history import filehistory\n\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\ndef myrepl():\n    prompt_kwargs = {\n        'history': filehistory('/etc/myrepl/myrepl-history'),\n    }\n    repl(click.get_current_context(), prompt_kwargs=prompt_kwargs)\n    \ncli()\n```\nand then your custom `myrepl` command will be available on your cli, which\nwill start a repl which has its history stored in\n`/etc/myrepl/myrepl-history` and persist between sessions.\n\nany arguments that can be passed to the [`python-prompt-toolkit`](https://github.com/prompt-toolkit/python-prompt-toolkit) [prompt](http://python-prompt-toolkit.readthedocs.io/en/stable/pages/reference.html?prompt_toolkit.shortcuts.prompt#prompt_toolkit.shortcuts.prompt) class\ncan be passed in the `prompt_kwargs` argument and will be used when\ninstantiating your `prompt`.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "click-repl",
  "package_url": "https://pypi.org/project/click-repl/",
  "project_url": "https://pypi.org/project/click-repl/",
  "project_urls": {
    "Homepage": "https://github.com/untitaker/click-repl"
  },
  "release_url": "https://pypi.org/project/click-repl/0.3.0/",
  "requires_dist": [
    "click (>=7.0)",
    "prompt-toolkit (>=3.0.36)",
    "pytest-cov (>=4.0.0) ; extra == 'testing'",
    "pytest (>=7.2.1) ; extra == 'testing'",
    "tox (>=4.4.3) ; extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "summary": "repl plugin for click",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "markus@unterwaditzer.net",
    "markus_unterwaditzer"
  ],
  "kwds": "click_repl pip py pypi github",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_click_repl",
  "homepage": "https://github.com/untitaker/click-repl",
  "release_count": 9,
  "dependency_ids": [
    "pypi_click",
    "pypi_prompt_toolkit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_tox"
  ]
}
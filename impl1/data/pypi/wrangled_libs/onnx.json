{
  "classifiers": [
    "programming language :: python :: 3"
  ],
  "description": "<!--\r\ncopyright (c) onnx project contributors\r\n-->\r\n\r\n<!--- spdx-license-identifier: apache-2.0 -->\r\n\r\n<p align=\"center\"><img width=\"40%\" src=\"https://github.com/onnx/onnx/raw/main/docs/onnx-horizontal-color.png\" /></p>\r\n\r\n[![build status](https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/windows-ci?branchname=main&label=windows)](https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionid=5&branchname=main)\r\n[![build status](https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/linux-ci?branchname=main&label=linux)](https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionid=7&branchname=main)\r\n[![build status](https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/macos-ci?branchname=main&label=macos)](https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionid=6&branchname=main)\r\n[![cii best practices](https://bestpractices.coreinfrastructure.org/projects/3313/badge)](https://bestpractices.coreinfrastructure.org/projects/3313)\r\n[![openssf scorecard](https://api.securityscorecards.dev/projects/github.com/onnx/onnx/badge)](https://api.securityscorecards.dev/projects/github.com/onnx/onnx)\r\n[![reuse compliant](https://api.reuse.software/badge/github.com/onnx/onnx)](https://api.reuse.software/info/github.com/onnx/onnx)\r\n\r\n\r\n[open neural network exchange (onnx)](https://onnx.ai) is an open ecosystem that empowers ai developers\r\nto choose the right tools as their project evolves. onnx provides an open source format for ai models, both deep learning and traditional ml. it defines an extensible computation graph model, as well as definitions of built-in operators and standard\r\ndata types. currently we focus on the capabilities needed for inferencing (scoring).\r\n\r\nonnx is [widely supported](http://onnx.ai/supported-tools) and can be found in many frameworks, tools, and hardware. enabling interoperability between different frameworks and streamlining the path from research to production helps increase the speed of innovation in the ai community. we invite the community to join us and further evolve onnx.\r\n\r\n# use onnx\r\n\r\n* [documentation of onnx python package](https://onnx.ai/onnx/)\r\n* [tutorials for creating onnx models](https://github.com/onnx/tutorials)\r\n* [pre-trained onnx models](https://github.com/onnx/models)\r\n\r\n# learn about the onnx spec\r\n\r\n* [overview](docs/overview.md)\r\n* [onnx intermediate representation spec](docs/ir.md)\r\n* [versioning principles of the spec](docs/versioning.md)\r\n* [operators documentation](docs/operators.md) (development version)\r\n* [operators documentation](https://onnx.ai/onnx/operators/index.html) (latest release)\r\n* [python api overview](docs/pythonapioverview.md)\r\n\r\n# programming utilities for working with onnx graphs\r\n\r\n* [shape and type inference](docs/shapeinference.md)\r\n* [graph optimization](https://github.com/onnx/optimizer)\r\n* [opset version conversion](docs/versionconverter.md)\r\n\r\n# contribute\r\n\r\nonnx is a community project and the open governance model is described [here](community/readme.md). we encourage you to join the effort and contribute feedback, ideas, and code. you can participate in the [special interest groups](community/sigs.md) and [working groups](community/working-groups.md) to shape the future of onnx.\r\n\r\ncheck out our [contribution guide](/contributing.md) to get started.\r\n\r\nif you think some operator should be added to onnx specification, please read\r\n[this document](docs/addnewop.md).\r\n\r\n# community meetings\r\n\r\nthe schedules of the regular meetings of the steering committee, the working groups and the sigs can be found [here](https://onnx.ai/calendar)\r\n\r\ncommunity meetups are held at least once a year. content from previous community meetups are at:\r\n\r\n* 2020.04.09 <https://wiki.lfaidata.foundation/display/dl/lf+ai+day+-onnx+community+virtual+meetup+-+silicon+valley+-+april+9>\r\n* 2020.10.14 <https://wiki.lfaidata.foundation/display/dl/lf+ai+day+-+onnx+community+workshop+-+october+14>\r\n* 2021.03.24 <https://wiki.lfaidata.foundation/pages/viewpage.action?pageid=35160391>\r\n* 2021.10.21 <https://wiki.lfaidata.foundation/pages/viewpage.action?pageid=46989689>\r\n* 2022.06.24 <https://wiki.lfaidata.foundation/display/dl/onnx+community+day+-+june+24>\r\n* 2023.06.28 <https://wiki.lfaidata.foundation/display/dl/onnx+community+day+2023+-+june+28>\r\n\r\n# discuss\r\n\r\nwe encourage you to open [issues](https://github.com/onnx/onnx/issues), or use [slack](https://lfaifoundation.slack.com/) (if you have not joined yet, please use this [link](https://join.slack.com/t/lfaifoundation/shared_invite/zt-o65errpw-gmtbwnr7fnnbvxnvfkmyna) to join the group) for more real-time discussion.\r\n\r\n# follow us\r\n\r\nstay up to date with the latest onnx news. [[facebook](https://www.facebook.com/onnxai/)] [[twitter](https://twitter.com/onnxai)]\r\n\r\n# roadmap\r\n\r\na roadmap process takes place every year. more details can be found [here](https://github.com/onnx/steering-committee/tree/main/roadmap)\r\n\r\n# installation\r\n\r\n## official python packages\r\n\r\nonnx released packages are published in pypi.\r\n\r\n```sh\r\npip install onnx  # or pip install onnx[reference] for optional reference implementation dependencies\r\n```\r\n\r\n[onnx weekly packages](https://pypi.org/project/onnx-weekly/) are published in pypi to enable experimentation and early testing.\r\n\r\n## vcpkg packages\r\n\r\nonnx is in the maintenance list of [vcpkg](https://github.com/microsoft/vcpkg), you can easily use vcpkg to build and install it.\r\n\r\n```sh\r\ngit clone https://github.com/microsoft/vcpkg.git\r\ncd vcpkg\r\n./bootstrap-vcpkg.bat # for powershell\r\n./bootstrap-vcpkg.sh # for bash\r\n./vcpkg install onnx\r\n```\r\n\r\n## conda packages\r\n\r\na binary build of onnx is available from [conda](https://conda.io), in [conda-forge](https://conda-forge.org/):\r\n\r\n```sh\r\nconda install -c conda-forge onnx\r\n```\r\n\r\n## build onnx from source\r\n\r\nbefore building from source uninstall any existing versions of onnx `pip uninstall onnx`.\r\n\r\nc++17 or higher c++ compiler version is required to build onnx from source on windows. for other platforms, please use c++14 or higher versions.\r\n\r\nif you don't have protobuf installed, onnx will internally download and build protobuf for onnx build.\r\n\r\nor, you can manually install [protobuf c/c++ libraries and tools](https://github.com/protocolbuffers/protobuf) with specified version before proceeding forward. then depending on how you installed protobuf, you need to set environment variable cmake_args to \"-donnx_use_protobuf_shared_libs=on\" or \"-donnx_use_protobuf_shared_libs=off\".  for example, you may need to run the following command:\r\n\r\nlinux:\r\n\r\n```sh\r\nexport cmake_args=\"-donnx_use_protobuf_shared_libs=on\"\r\n```\r\n\r\nwindows:\r\n\r\n```bat\r\nset cmake_args=\"-donnx_use_protobuf_shared_libs=on\"\r\n```\r\n\r\nthe on/off depends on what kind of protobuf library you have. shared libraries are files ending with \\*.dll/\\*.so/\\*.dylib. static libraries are files ending with \\*.a/\\*.lib. this option depends on how you get your protobuf library and how it was built. and it is default off. you don't need to run the commands above if you'd prefer to use a static protobuf library.\r\n\r\n### windows\r\n\r\nif you are building onnx from source, it is recommended that you also build protobuf locally as a static library. the version distributed with conda-forge is a dll, but onnx expects it to be a static library. building protobuf locally also lets you control the version of protobuf. the tested and recommended version is 3.21.12.\r\n\r\nthe instructions in this readme assume you are using visual studio.  it is recommended that you run all the commands from a shell started from \"x64 native tools command prompt for vs 2019\" and keep the build system generator for cmake (e.g., cmake -g \"visual studio 16 2019\") consistent while building protobuf as well as onnx.\r\n\r\nyou can get protobuf by running the following commands:\r\n\r\n```bat\r\ngit clone https://github.com/protocolbuffers/protobuf.git\r\ncd protobuf\r\ngit checkout v21.12\r\ncd cmake\r\ncmake -g \"visual studio 16 2019\" -a x64 -dcmake_install_prefix=<protobuf_install_dir> -dprotobuf_msvc_static_runtime=off -dprotobuf_build_shared_libs=off -dprotobuf_build_tests=off -dprotobuf_build_examples=off .\r\nmsbuild protobuf.sln /m /p:configuration=release\r\nmsbuild install.vcxproj /p:configuration=release\r\n```\r\n\r\nthen it will be built as a static library and installed to <protobuf_install_dir>. please add the bin directory(which contains protoc.exe) to your path.\r\n\r\n```bat\r\nset path=<protobuf_install_dir>/bin;%path%\r\n```\r\n\r\nplease note: if your protobuf_install_dir contains spaces, **do not** add quotation marks around it.\r\n\r\nalternative: if you don't want to change your path, you can set onnx_protoc_executable instead.\r\n\r\n```bat\r\nset cmake_args=-donnx_protoc_executable=<full_path_to_protoc.exe>\r\n```\r\n\r\nthen you can build onnx as:\r\n\r\n```\r\ngit clone https://github.com/onnx/onnx.git\r\ncd onnx\r\ngit submodule update --init --recursive\r\n# prefer lite proto\r\nset cmake_args=-donnx_use_lite_proto=on\r\npip install -e .\r\n```\r\n\r\n### linux\r\n\r\nfirst, you need to install protobuf. the minimum protobuf compiler (protoc) version required by onnx is 3.6.1. please note that old protoc versions might not work with `cmake_args=-donnx_use_lite_proto=on`.\r\n\r\nubuntu 20.04 (and newer) users may choose to install protobuf via\r\n\r\n```sh\r\napt-get install python3-pip python3-dev libprotobuf-dev protobuf-compiler\r\n```\r\n\r\nin this case, it is required to add `-donnx_use_protobuf_shared_libs=on` to cmake_args in the onnx build step.\r\n\r\na more general way is to build and install it from source. see the instructions below for more details.\r\n\r\n<details>\r\n  <summary> installing protobuf from source </summary>\r\n\r\n  debian/ubuntu:\r\n\r\n  ```sh\r\n    git clone https://github.com/protocolbuffers/protobuf.git\r\n    cd protobuf\r\n    git checkout v21.12\r\n    git submodule update --init --recursive\r\n    mkdir build_source && cd build_source\r\n    cmake ../cmake -dprotobuf_build_shared_libs=off -dcmake_install_prefix=/usr -dcmake_install_sysconfdir=/etc -dcmake_position_independent_code=on -dprotobuf_build_tests=off -dcmake_build_type=release\r\n    make -j$(nproc)\r\n    make install\r\n  ```\r\n\r\n  centos/rhel/fedora:\r\n\r\n  ```sh\r\n    git clone https://github.com/protocolbuffers/protobuf.git\r\n    cd protobuf\r\n    git checkout v21.12\r\n    git submodule update --init --recursive\r\n    mkdir build_source && cd build_source\r\n    cmake ../cmake  -dcmake_install_libdir=lib64 -dprotobuf_build_shared_libs=off -dcmake_install_prefix=/usr -dcmake_install_sysconfdir=/etc -dcmake_position_independent_code=on -dprotobuf_build_tests=off -dcmake_build_type=release\r\n    make -j$(nproc)\r\n    make install\r\n  ```\r\n\r\n  here \"-dcmake_position_independent_code=on\" is crucial. by default static libraries are built without \"-fpic\" flag, they are not position independent code. but shared libraries must be position independent code. python c/c++ extensions(like onnx) are shared libraries. so if a static library was not built with \"-fpic\", it can't be linked to such a shared library.\r\n\r\n  once build is successful, update path to include protobuf paths.\r\n\r\n</details>\r\n\r\nthen you can build onnx as:\r\n\r\n```sh\r\ngit clone https://github.com/onnx/onnx.git\r\ncd onnx\r\ngit submodule update --init --recursive\r\n# optional: prefer lite proto\r\nexport cmake_args=-donnx_use_lite_proto=on\r\npip install -e .\r\n```\r\n\r\n### mac\r\n\r\n```sh\r\nexport num_cores=`sysctl -n hw.ncpu`\r\nbrew update\r\nbrew install autoconf && brew install automake\r\nwget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-cpp-3.21.12.tar.gz\r\ntar -xvf protobuf-cpp-3.21.12.tar.gz\r\ncd protobuf-3.21.12\r\nmkdir build_source && cd build_source\r\ncmake ../cmake -dprotobuf_build_shared_libs=off -dcmake_position_independent_code=on -dprotobuf_build_tests=off -dcmake_build_type=release\r\nmake -j${num_cores}\r\nmake install\r\n```\r\n\r\nonce build is successful, update path to include protobuf paths.\r\n\r\nthen you can build onnx as:\r\n\r\n```sh\r\ngit clone --recursive https://github.com/onnx/onnx.git\r\ncd onnx\r\n# optional: prefer lite proto\r\nset cmake_args=-donnx_use_lite_proto=on\r\npip install -e .\r\n```\r\n\r\n## verify installation\r\n\r\nafter installation, run\r\n\r\n```sh\r\npython -c \"import onnx\"\r\n```\r\n\r\nto verify it works.\r\n\r\n## common build options\r\n\r\nfor full list refer to cmakelists.txt\r\n\r\n### environment variables\r\n\r\n* `use_msvc_static_runtime` should be 1 or 0, not on or off. when set to 1 onnx links statically to runtime library.\r\n**default**: `use_msvc_static_runtime=0`\r\n\r\n* `debug` should be 0 or 1. when set to 1 onnx is built in debug mode. or debug versions of the dependencies, you need to open the [cmakelists file](cmakelists.txt) and append a letter `d` at the end of the package name lines. for example, `names protobuf-lite` would become `names protobuf-lited`.\r\n**default**: `debug=0`\r\n\r\n### cmake variables\r\n\r\n* `onnx_use_protobuf_shared_libs` should be `on` or `off`.\r\n**default**: `onnx_use_protobuf_shared_libs=off use_msvc_static_runtime=0`\r\n`onnx_use_protobuf_shared_libs` determines how onnx links to protobuf libraries.\r\n  * when set to `on` - onnx will dynamically link to protobuf shared libs, protobuf_use_dlls will be defined as described [here](https://github.com/protocolbuffers/protobuf/blob/main/cmake/readme.md#dlls-vs-static-linking), protobuf_use_static_libs will be set to `off` and `use_msvc_static_runtime` must be 0.\r\n  * when set to `off` - onnx will link statically to protobuf, and protobuf_use_static_libs will be set to `on` (to force the use of the static libraries) and `use_msvc_static_runtime` can be `0` or `1`.\r\n\r\n* `onnx_use_lite_proto` should be `on` or `off`. when set to `on` onnx uses lite protobuf instead of full protobuf.\r\n**default**: `onnx_use_lite_proto=off`\r\n\r\n* `onnx_werror` should be `on` or `off`. when set to `on` warnings are treated as errors.\r\n**default**: `onnx_werror=off` in local builds, `on` in ci and release pipelines.\r\n\r\n## common errors\r\n\r\n* note: the `import onnx` command does not work from the source checkout directory; in this case you'll see `modulenotfounderror: no module named 'onnx.onnx_cpp2py_export'`. change into another directory to fix this error.\r\n\r\n* if you run into any issues while building protobuf as a static library, please ensure that shared protobuf libraries, like libprotobuf, are not installed on your device or in the conda environment. if these shared libraries exist, either remove them to build protobuf from source as a static library, or skip the protobuf build from source to use the shared version directly.\r\n\r\n* if you run into any issues while building onnx from source, and your error message reads, `could not find pythonxx.lib`, ensure that you have consistent python versions for common commands, such as `python` and `pip`. clean all existing build files and rebuild onnx again.\r\n\r\n# testing\r\n\r\nonnx uses [pytest](https://docs.pytest.org) as test driver. in order to run tests, you will first need to install `pytest`:\r\n\r\n```sh\r\npip install pytest nbval\r\n```\r\n\r\nafter installing pytest, use the following command to run tests.\r\n\r\n```sh\r\npytest\r\n```\r\n\r\n# development\r\n\r\ncheck out the [contributor guide](/contributing.md) for instructions.\r\n\r\n# license\r\n\r\n[apache license v2.0](license)\r\n\r\n# code of conduct\r\n\r\n[onnx open source code of conduct](https://onnx.ai/codeofconduct.html)\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license v2.0",
  "name": "onnx",
  "package_url": "https://pypi.org/project/onnx/",
  "project_url": "https://pypi.org/project/onnx/",
  "project_urls": {
    "Homepage": "https://onnx.ai/",
    "Repository": "https://github.com/onnx/onnx"
  },
  "release_url": "https://pypi.org/project/onnx/1.15.0/",
  "requires_dist": [
    "numpy",
    "protobuf>=3.20.2",
    "google-re2; extra == \"reference\"",
    "Pillow; extra == \"reference\""
  ],
  "requires_python": ">=3.8",
  "summary": "open neural network exchange",
  "version": "1.15.0",
  "releases": [],
  "developers": [
    "onnx-technical-discuss@lists.lfaidata.foundation"
  ],
  "kwds": "onnx_protoc_executable onnx_use_protobuf_shared_libs onnx_use_lite_proto onnx onnx_cpp2py_export",
  "license_kwds": "apache license v2.0",
  "libtype": "pypi",
  "id": "pypi_onnx",
  "homepage": "",
  "release_count": 30,
  "dependency_ids": [
    "pypi_google_re2",
    "pypi_numpy",
    "pypi_pillow",
    "pypi_protobuf"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "cli_exit_tools\n==============\n\n\nversion v1.2.6 as of 2023-07-14 see `changelog`_\n\n|build_badge| |codeql| |license| |jupyter| |pypi|\n|pypi-downloads| |black| |codecov| |cc_maintain| |cc_issues| |cc_coverage| |snyk|\n\n\n\n.. |build_badge| image:: https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml/badge.svg\n   :target: https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml\n\n\n.. |codeql| image:: https://github.com/bitranox/cli_exit_tools/actions/workflows/codeql-analysis.yml/badge.svg?event=push\n   :target: https://github.com//bitranox/cli_exit_tools/actions/workflows/codeql-analysis.yml\n\n.. |license| image:: https://img.shields.io/github/license/webcomics/pywine.svg\n   :target: http://en.wikipedia.org/wiki/mit_license\n\n.. |jupyter| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/bitranox/cli_exit_tools/master?filepath=cli_exit_tools.ipynb\n\n.. for the pypi status link note the dashes, not the underscore !\n.. |pypi| image:: https://img.shields.io/pypi/status/cli-exit-tools?label=pypi%20package\n   :target: https://badge.fury.io/py/cli_exit_tools\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/bitranox/cli_exit_tools\n   :target: https://codecov.io/gh/bitranox/cli_exit_tools\n\n.. |cc_maintain| image:: https://img.shields.io/codeclimate/maintainability-percentage/bitranox/cli_exit_tools?label=cc%20maintainability\n   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/maintainability\n   :alt: maintainability\n\n.. |cc_issues| image:: https://img.shields.io/codeclimate/issues/bitranox/cli_exit_tools?label=cc%20issues\n   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/maintainability\n   :alt: maintainability\n\n.. |cc_coverage| image:: https://img.shields.io/codeclimate/coverage/bitranox/cli_exit_tools?label=cc%20coverage\n   :target: https://codeclimate.com/github/bitranox/cli_exit_tools/test_coverage\n   :alt: code coverage\n\n.. |snyk| image:: https://snyk.io/test/github/bitranox/cli_exit_tools/badge.svg\n   :target: https://snyk.io/test/github/bitranox/cli_exit_tools\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/cli-exit-tools\n   :target: https://pypi.org/project/cli-exit-tools/\n   :alt: pypi - downloads\n\nsmall toolset to properly exit a cli application:\n\n- print the traceback information (can be set with commandline option)\n- get a proper exit code from the exception\n- flush the streams, to make sure output is written in proper order\n- demo how to integrate into your cli module (see usage)\n\n----\n\nautomated tests, github actions, documentation, badges, etc. are managed with `pizzacutter <https://github\n.com/bitranox/pizzacutter>`_ (cookiecutter on steroids)\n\npython version required: 3.8.0 or newer\n\ntested on recent linux with python 3.8, 3.9, 3.10, 3.11, 3.12-dev, pypy-3.9, pypy-3.10 - architectures: amd64\n\n`100% code coverage <https://codeclimate.com/github/bitranox/cli_exit_tools/test_coverage>`_, flake8 style checking ,mypy static type checking ,tested under `linux, macos, windows <https://github.com/bitranox/cli_exit_tools/actions/workflows/python-package.yml>`_, automatic daily builds and monitoring\n\n----\n\n- `try it online`_\n- `usage`_\n- `usage from commandline`_\n- `installation and upgrade`_\n- `requirements`_\n- `acknowledgements`_\n- `contribute`_\n- `report issues <https://github.com/bitranox/cli_exit_tools/blob/master/issue_template.md>`_\n- `pull request <https://github.com/bitranox/cli_exit_tools/blob/master/pull_request_template.md>`_\n- `code of conduct <https://github.com/bitranox/cli_exit_tools/blob/master/code_of_conduct.md>`_\n- `license`_\n- `changelog`_\n\n----\n\ntry it online\n-------------\n\nyou might try it right away in jupyter notebook by using the \"launch binder\" badge, or click `here <https://mybinder.org/v2/gh/{{rst_include.\nrepository_slug}}/master?filepath=cli_exit_tools.ipynb>`_\n\nusage\n-----------\n\n- example for the main_cli\n\n.. code-block:: python\n\n    # stdlib\n    import sys\n    from typing import optional\n\n    # ext\n    import click\n\n    # constants\n    click_context_settings = dict(help_option_names=[\"-h\", \"--help\"])\n\n    try:\n        from . import __init__conf__\n        from . import cli_exit_tools\n    except (importerror, modulenotfounderror):  # pragma: no cover\n        # imports for doctest\n        import __init__conf__  # type: ignore  # pragma: no cover\n        import cli_exit_tools  # type: ignore  # pragma: no cover\n\n\n    def info() -> none:\n        \"\"\"\n        >>> info()\n        info for ...\n\n        \"\"\"\n        __init__conf__.print_info()\n\n\n    @click.group(help=__init__conf__.title, context_settings=click_context_settings)    # type: ignore\n    @click.version_option(\n        version=__init__conf__.version, prog_name=__init__conf__.shell_command, message=f\"{__init__conf__.shell_command} version {__init__conf__.version}\"\n    )\n    @click.option(\"--traceback/--no-traceback\", is_flag=true, type=bool, default=none, help=\"return traceback information on cli\")\n    def cli_main(traceback: optional[bool] = none) -> none:\n        if traceback is not none:\n            cli_exit_tools.config.traceback = traceback\n\n\n    @cli_main.command(\"info\", context_settings=click_context_settings)  # type: ignore\n    def cli_info() -> none:\n        \"\"\"get program informations\"\"\"\n        info()\n\n\n    # entry point if main\n    if __name__ == \"__main__\":\n        try:\n            cli_main()      # type: ignore\n        except exception as exc:\n            cli_exit_tools.print_exception_message()\n            sys.exit(cli_exit_tools.get_system_exit_code(exc))\n        finally:\n            cli_exit_tools.flush_streams()\n\n- get the system exit code\n\n.. code-block:: python\n\n    def get_system_exit_code(exc: baseexception) -> int:\n        \"\"\"\n        return the exit code for linux or windows os, based on the exception.\n        if, on windows, the winerror code is passed with the exception, we return that winerror code.\n\n\n        parameter\n        ---------\n        exc\n            the exception to analyze\n\n\n        result\n        ------\n        exit_code\n            as integer\n\n\n        examples\n        --------\n\n        >>> try:\n        ...     raise runtimeerror()\n        ... except runtimeerror as my_exc:\n        ...     assert get_system_exit_code(my_exc) == 1\n        ...     setattr(my_exc, 'winerror', 42)\n        ...     assert get_system_exit_code(my_exc) == 42\n        ...     setattr(my_exc, 'winerror', none)\n        ...     assert get_system_exit_code(my_exc) == 1\n        >>> try:\n        ...     exit(99)\n        ... except systemexit as my_exc:\n        ...     assert get_system_exit_code(my_exc) == 99\n\n        \"\"\"\n\n- print the exception message\n\n.. code-block:: python\n\n    def print_exception_message(trace_back: bool = config.traceback, length_limit: int = 500, stream: optional[textio] = none) -> none:\n        \"\"\"\n        prints the exception message to stderr\n        if trace_back is true, it also prints the traceback information\n\n        if the exception has stdout, stderr attributes (like the subprocess.calledprocesserror)\n        those will be also printed to stderr\n\n\n        parameter\n        ---------\n        trace_back\n            if traceback information should be printed. this is usually set early\n            in the cli application to the config object via a commandline option.\n        length_limit\n            int, limits the length of the message\n        stream\n            optional, to which stream to print, default = stderr\n\n\n        examples\n        --------\n\n        >>> # test with exc_info = none\n        >>> print_exception_message()\n\n        >>> # test with exc_info\n        >>> try:\n        ...     raise filenotfounderror('unknown_command_test1')\n        ... except exception:       # noqa\n        ...     print_exception_message(true, length_limit=15, stream=sys.stdout)\n        ...     print_exception_message(false, stream=sys.stdout)\n        ...     print_exception_message(true, stream=sys.stdout)\n        traceback info...\n\n        >>> # test with subprocess to get stdout, stderr\n        >>> import subprocess\n        >>> try:\n        ...     discard=subprocess.run('unknown_command_test2', shell=true, check=true)\n        ... except subprocess.calledprocesserror:\n        ...     print_exception_message(false, stream=sys.stdout)\n        ...     print_exception_message(true, stream=sys.stdout)\n        ...     print_exception_message(true, stream=sys.stdout)\n        calledprocesserror...\n\n        \"\"\"\n\n- flush the streams\n\n.. code-block:: python\n\n    def flush_streams() -> none:\n        \"\"\"\n        flush the streams - make sure the output is written early,\n        otherwise the output might be printed even after another cli\n        command is launched\n\n\n        examples\n        --------\n\n\n        >>> flush_streams()\n\n        \"\"\"\n\nusage from commandline\n------------------------\n\n.. code-block::\n\n   usage: cli_exit_tools [options] command [args]...\n\n     functions to exit an cli application properly\n\n   options:\n     --version                     show the version and exit.\n     --traceback / --no-traceback  return traceback information on cli\n     -h, --help                    show this message and exit.\n\n   commands:\n     info  get program informations\n\ninstallation and upgrade\n------------------------\n\n- before you start, its highly recommended to update pip and setup tools:\n\n\n.. code-block::\n\n    python -m pip --upgrade pip\n    python -m pip --upgrade setuptools\n\n- to install the latest release from pypi via pip (recommended):\n\n.. code-block::\n\n    python -m pip install --upgrade cli_exit_tools\n\n\n- to install the latest release from pypi via pip, including test dependencies:\n\n.. code-block::\n\n    python -m pip install --upgrade cli_exit_tools[test]\n\n- to install the latest version from github via pip:\n\n\n.. code-block::\n\n    python -m pip install --upgrade git+https://github.com/bitranox/cli_exit_tools.git\n\n\n- include it into your requirements.txt:\n\n.. code-block::\n\n    # insert following line in your requirements.txt:\n    # for the latest release on pypi:\n    cli_exit_tools\n\n    # for the latest development version :\n    cli_exit_tools @ git+https://github.com/bitranox/cli_exit_tools.git\n\n    # to install and upgrade all modules mentioned in requirements.txt:\n    python -m pip install --upgrade -r /<path>/requirements.txt\n\n\n- to install the latest development version, including test dependencies from source code:\n\n.. code-block::\n\n    # cd ~\n    $ git clone https://github.com/bitranox/cli_exit_tools.git\n    $ cd cli_exit_tools\n    python -m pip install -e .[test]\n\n- via makefile:\n  makefiles are a very convenient way to install. here we can do much more,\n  like installing virtual environments, clean caches and so on.\n\n.. code-block:: shell\n\n    # from your shell's homedirectory:\n    $ git clone https://github.com/bitranox/cli_exit_tools.git\n    $ cd cli_exit_tools\n\n    # to run the tests:\n    $ make test\n\n    # to install the package\n    $ make install\n\n    # to clean the package\n    $ make clean\n\n    # uninstall the package\n    $ make uninstall\n\nrequirements\n------------\nfollowing modules will be automatically installed :\n\n.. code-block:: bash\n\n    ## project requirements\n    click\n    lib_detect_testenv\n\nacknowledgements\n----------------\n\n- special thanks to \"uncle bob\" robert c. martin, especially for his books on \"clean code\" and \"clean architecture\"\n\ncontribute\n----------\n\ni would love for you to fork and send me pull request for this project.\n- `please contribute <https://github.com/bitranox/cli_exit_tools/blob/master/contributing.md>`_\n\nlicense\n-------\n\nthis software is licensed under the `mit license <http://en.wikipedia.org/wiki/mit_license>`_\n\n---\n\nchangelog\n=========\n\n- new major version for incompatible api changes,\n- new minor version for added functionality in a backwards compatible manner\n- new patch version for backwards compatible bug fixes\n\n\nv1.2.6\n---------\n2023-07-14:\n    - add codeql badge\n    - move 3rd_party_stubs outside the src directory\n    - add pypy 3.10 tests\n    - add python 3.12-dev tests\n\nv1.2.5\n---------\n2023-07-13:\n    - require minimum python 3.8\n    - remove python 3.7 tests\n\nv1.2.4\n---------\n2023-07-12:\n    - introduce pep517 packaging standard\n    - introduce pyproject.toml build-system\n    - remove mypy.ini\n    - remove pytest.ini\n    - remove setup.cfg\n    - remove setup.py\n    - remove .bettercodehub.yml\n    - remove .travis.yml\n    - update black config\n    - clean ./tests/test_cli.py\n\nv1.2.3.2\n---------\n2022-06-02: update to github actions checkout@v3 and setup-python@v3\n\nv1.2.3.1\n--------\n2022-06-01: update github actions test matrix\n\nv1.2.3\n--------\n2022-03-29: remedy mypy untyped decorator makes function \"cli_info\" untyped\n\nv1.2.2\n--------\n2022-03-25: fix github actions windows test\n\nv1.2.1\n-------\n2021-11-22: patch release\n    - fix minor readme.rst bugs\n    - remove second github action yml\n    - fix \"setup.py test\"\n\nv1.2.0\n------\n2021-11-21: minor release\n    - implement github actions\n    - implement system.exit()\n\nv1.1.8\n--------\n2020-10-09: service release\n    - update travis build matrix for linux 3.9-dev\n    - update travis build matrix (paths) for windows 3.9 / 3.10\n\nv1.1.7\n--------\n2020-08-08: service release\n    - fix documentation\n    - fix travis\n    - deprecate pycodestyle\n    - implement flake8\n\nv1.1.6\n--------\n2020-08-07: fix wheels\n\nv1.1.5\n--------\n2020-07-31: fix wheels\n\nv1.1.3\n--------\n2020-07-31: initial release\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "cli-exit-tools",
  "package_url": "https://pypi.org/project/cli-exit-tools/",
  "project_url": "https://pypi.org/project/cli-exit-tools/",
  "project_urls": {
    "Changelog": "https://github.com/bitranox/cli_exit_tools/blob/master/CHANGES.rst",
    "Documentation": "https://github.com/bitranox/cli_exit_tools/blob/master/README.rst",
    "Homepage": "https://github.com/bitranox/cli_exit_tools",
    "Repository": "https://github.com/bitranox/cli_exit_tools.git"
  },
  "release_url": "https://pypi.org/project/cli-exit-tools/1.2.6/",
  "requires_dist": [
    "click",
    "lib-detect-testenv",
    "black ; extra == 'test'",
    "codecov ; extra == 'test'",
    "coloredlogs ; extra == 'test'",
    "coverage ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-runner ; extra == 'test'",
    "readme-renderer ; extra == 'test'",
    "mypy ; (platform_python_implementation != \"PyPy\") and extra == 'test'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "functions to exit an cli application properly",
  "version": "1.2.6",
  "releases": [],
  "developers": [
    "bitranox@gmail.com"
  ],
  "kwds": "exit_code cli_exit_tools get_system_exit_code build_badge cli_info",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cli_exit_tools",
  "homepage": "",
  "release_count": 15,
  "dependency_ids": [
    "pypi_black",
    "pypi_click",
    "pypi_codecov",
    "pypi_coloredlogs",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_lib_detect_testenv",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_runner",
    "pypi_readme_renderer"
  ]
}
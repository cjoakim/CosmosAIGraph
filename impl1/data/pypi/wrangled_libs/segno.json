{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: multimedia :: graphics",
    "topic :: printing",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "qr code encoder and micro qr code encoder\n=========================================\n\npure python qr code generator with no dependencies.\n\nthis package implements iso/iec 18004:2015(e) \"qr code bar code symbology\nspecification\" and produces qr codes and micro qr codes with nearly no effort.\nit supports the `structured append mode <https://segno.readthedocs.io/en/stable/structured-append.html>`_\nwhich splits a message across several qr codes.\n\nsegno (italian for \"sign\" / \"symbol\") provides several serialization formats\nlike scalable vector graphics (svg), encapsulated postscript (eps),\nportable network graphics (png), portable document format (pdf), netpbm (pam, pbm, ppm),\nlatex (pgf/tikz), x pixmap (xbm), and x bitmap (xpm) etc.\nnone of these serializers require an external lib.\nfurther, it provides several high level functions to create qr codes which encode\n`contact data (vcard, mecard) <https://segno.readthedocs.io/en/stable/contact-information.html>`_,\n`epc qr codes <https://segno.readthedocs.io/en/stable/epc-qrcodes.html>`_,\nor `wifi qr codes <https://segno.readthedocs.io/en/stable/special-qrcode-factories.html#create-a-qr-code-for-a-wifi-configuration>`_.\n\nthe project provides more than 1500 test cases (coverage >= 98%) to verify a\nstandard conform qr code and micro qr code generation acc. to iso/iec 18004:2015(e).\n\n\nunique features\n---------------\n* pure python qr code generator \n* no dependencies\n* a lot of `serialization formats <https://segno.readthedocs.io/en/stable/serializers.html#available-serializers>`_ (svg, png, eps, pdf, ...)\n* `fastest (pure python) qr code encoder <https://segno.readthedocs.io/en/stable/comparison-qrcode-libs.html#performance>`_\n* micro qr codes\n* `structured append mode <https://segno.readthedocs.io/en/stable/structured-append.html>`_\n* `hanzi mode <https://segno.readthedocs.io/en/stable/qrcode-modes.html#hanzi-mode>`_\n* `command line interface <https://segno.readthedocs.io/en/stable/command-line.html>`_\n* `simple, user-friendly api <https://segno.readthedocs.io/en/stable/make.html>`_\n\n.. code-block:: python\n\n    import segno\n    qrcode = segno.make('yellow submarine')\n    qrcode.save('yellow-submarine.png')\n\n* `colorful qr codes <https://segno.readthedocs.io/en/stable/colorful-qrcodes.html>`_\n\n  .. image:: https://github.com/heuer/segno/raw/master/docs/_static/colorful/qrcode_yellow-submarine.png\n    :alt: colorful 7-h qr code encoding \"yellow submarine\"\n\n  ... works also with micro qr codes\n\n  .. image:: https://github.com/heuer/segno/raw/master/docs/_static/colorful/micro_qrcode_rain.png\n    :alt: colorful m4-q micro qr code encoding \"rain\"\n\n* `artistic qr codes <https://segno.readthedocs.io/en/stable/artistic-qrcodes.html>`_\n  (requires the `qrcode-artistic <https://github.com/heuer/qrcode-artistic>`_ plug-in)\n\n  .. image:: https://github.com/heuer/segno/raw/master/docs/_static/artistic/letitbe.jpg\n    :alt: animated 3-h qr code encoding \"the beatles -- let it be\"\n\n  ... animated qr codes are supported as well\n\n  .. image:: https://github.com/heuer/segno/raw/master/docs/_static/artistic/abbey-road.webp\n    :alt: animated 4-h qr code encoding \"the beatles -- abbey road\"\n\n\ninstallation\n------------\n\nuse ``pip`` to install segno from pypi::\n\n    $ pip install segno\n\n\nmacports\n^^^^^^^^\n\nsegno is also available at `macports <https://www.macports.org/>`_\n(`macports project page <https://ports.macports.org/port/py-segno/>`_)::\n\n    $ sudo port install py-segno\n\n\nconda-forge\n^^^^^^^^^^^\n\nthe library is also available at `conda-forge <https://conda-forge.org/>`_\n(`conda-forge project page <https://anaconda.org/conda-forge/segno>`_)::\n\n    $ conda install -c conda-forge segno\n\n\ndebian 11 / bullseye\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ apt-get install python3-segno\n\n\ndebian 10 / buster (backports)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ apt-get -t buster-backports install python3-segno\n\n\narch linux\n^^^^^^^^^^\n\n::\n\n    $ pacman -s python-segno\n\n\n\nusage\n-----\n\ncommand line\n^^^^^^^^^^^^\n\nthe command line script prints a qr code to the terminal::\n\n    $ segno \"comfortably numb\"\n\n\nto serialize a qr code, use the \"output\" argument::\n\n    $ segno -o=raincoat.svg \"famous blue raincoat\"\n    $ segno --scale 10 --dark darkblue --border 0 --output=fire.svg \"who by fire\"\n    $ segno --scale 10 --light transparent --output=miracle.png \"waiting for the miracle\"\n\n\n\nlibrary\n^^^^^^^\n\n.. code-block:: python\n\n    >>> import segno\n    >>> # let segno choose the minimal version and an optimal (maximal) error\n    >>> # level without changing the minimal version\n    >>> qrcode = segno.make('up jumped the devil')\n    >>> qrcode.designator  # returns the qr code version and the error correction level\n    '2-q'\n    >>> qrcode.save('up-jumped-the-devil.png')  # save as png\n    >>> qrcode.save('up-jumped-the-devil-2.png', scale=10)  # scaling factor 10\n    >>> qrcode.save('up-jumped-the-devil-3.png', light=none)  # transparent light modules\n    >>> qrcode.save('up-jumped-the-devil.pdf', scale=10)  # save as pdf\n    >>> # svg drawing the dark modules in \"dark blue\"\n    >>> qrcode.save('up-jumped-the-devil.svg', scale=10, dark='darkblue')\n\n\nif the content to encode is small enough, a micro qr code is generated:\n\n.. code-block:: python\n\n    >>> import segno\n    >>> qrcode = segno.make('rain')\n    >>> qrcode.is_micro\n    true\n    >>> qrcode.designator\n    'm2-m'\n\n\nif this behaviour is not desired, the user may set ``micro`` to ``false``\n\n.. code-block:: python\n\n    >>> import segno\n    >>> qrcode = segno.make('rain', micro=false)\n    >>> qrcode.is_micro\n    false\n    >>> qrcode.designator\n    '1-h'\n\n\nor use the factory functions ``segno.make_qr()`` which generates always qr codes\n(never micro qr codes) or ``segno.make_micro()`` which returns always\nmicro qr codes (or raises an error if the content is too large for a micro qr code).\n\n.. code-block:: python\n\n    >>> import segno\n    >>> qrcode_micro = segno.make_micro('the beatles')\n    >>> qrcode_micro.designator\n    'm3-m'\n    >>> qrcode = segno.make_qr('the beatles')  # same content but enforce a qr code\n    >>> qrcode.designator\n    '1-q'\n    >>> # this won't work since the data does not fit into a micro qr code m1 - m4\n    >>> micro_qrcode = segno.make_micro('nick cave and the bad seeds')\n    traceback (most recent call last):\n        ...\n    dataoverflowerror: data too large. no micro qr code can handle the provided data\n\n\nall factory functions use the same parameters to specify the desired error\nlevel, version, data mask etc., see `segno's documentation`_ for details.\n\n\ndocumentation\n-------------\nread the online documentation at <https://segno.readthedocs.io/>\n\n\ntrademark\n---------\n\"qr code\" and \"micro qr code\" are registered trademarks of denso wave incorporated.\n\n\n.. _segno's documentation: https://segno.readthedocs.io/\n",
  "docs_url": null,
  "keywords": "qr code,micro qr code,iso/iec 18004,iso/iec 18004:2006(e),iso/iec 18004:2015(e),qrcode,qr,barcode,matrix,2d",
  "license": "copyright (c) 2016 - 2023, lars heuer all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "segno",
  "package_url": "https://pypi.org/project/segno/",
  "project_url": "https://pypi.org/project/segno/",
  "project_urls": {
    "Changes": "https://github.com/heuer/segno/blob/master/CHANGES.rst",
    "Documentation": "https://segno.readthedocs.io/",
    "Homepage": "https://github.com/heuer/segno/",
    "Issue tracker": "https://github.com/heuer/segno/issues/"
  },
  "release_url": "https://pypi.org/project/segno/1.6.0/",
  "requires_dist": [
    "importlib-metadata >=3.6.0 ; python_version < \"3.10\""
  ],
  "requires_python": ">=3.5",
  "summary": "qr code and micro qr code generator for python",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "heuer@semagia.com"
  ],
  "kwds": "make_qr qr encoder micro_qrcode qrcode_micro",
  "license_kwds": "copyright liability liable disclaimer redistributions",
  "libtype": "pypi",
  "id": "pypi_segno",
  "homepage": "",
  "release_count": 43,
  "dependency_ids": [
    "pypi_importlib_metadata"
  ]
}
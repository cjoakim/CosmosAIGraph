{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.5"
  ],
  "description": "json-encoder\n=======================\n\n* json encoder uses `singledispatch pattern`_ instead of jsonencoder class overwrites.\n\n* no more *json.dumps(data, cls=myjsonencoder)* everywhere.\n\n* comes with default serialization for time, date, datetime, uuid and decimal\n\n* easy to use, easy to change serialization behaviour\n\n* not tight to any json implementation *json, simplejson, ujson* ...\n\n* it parse json float numbers into decimal objects to prevent python float precision issues.\n\n\n.. image:: https://travis-ci.org/nzme/json-encoder.svg?branch=master&maxage=259200\n    :target: https://travis-ci.org/nzme/json-encoder\n\n.. image:: https://img.shields.io/pypi/v/json-encoder.svg?maxage=259200\n    :target: https://pypi.python.org/pypi/json-encoder\n\ninstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install json-encoder\n\nquick start\n-----------\n\n* use \"json_encoder.json\" instead of default python json::\n\n    from json_encoder import json\n\n    result = json.dumps(data)\n\nconfiguration\n-------------\n\n* chose json implementation::\n\n    # simplejson library is used as default json implementation if present\n    # otherwise standard python json implementation is used\n    # to use other json implementation globally, do:\n\n    import ujson\n    from json_encoder import use_json_library\n\n    use_json_library(ujson)\n\n* to change json implementation for concrete call do::\n\n    from json_encoder import json\n    import simplejson\n\n    result = json.dumps(data, json=simplejson)\n\n* to make your object json serializable do::\n\n    # example how to make python fraction object json serializable\n\n    from fractions import fraction\n    from json_encoder.encoder import json_encoder\n\n    @json_encoder.register(fraction)\n    def encode_fraction(obj):\n        return '{}/{}'.format(obj.numerator, obj.denominator)\n\n* to overwrite json serializer behaviour defined in json_encoder.encoder::\n\n    from uuid import uuid\n    from six import text_type\n    from json_encoder.encoder import json_encoder\n\n    @json_encoder.register(uuid)\n    def encode_uuid(obj):\n        return text_type(obj).replace('-', '')\n\nrequirements\n------------\n\n* `singledispatch`_ >= 3.4.0.3 for python version < 3.4 only\n\n.. _singledispatch pattern: https://docs.python.org/3/library/functools.html#functools.singledispatch\n.. _singledispatch: https://bitbucket.org/ambv/singledispatch",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "json-encoder",
  "package_url": "https://pypi.org/project/json-encoder/",
  "project_url": "https://pypi.org/project/json-encoder/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/json-encoder/0.4.4/",
  "requires_dist": [
    "six (>=1.10.0)",
    "singledispatch (>=3.4.0.3)",
    "simplejson (>=3.8.2); extra == 'simplejson'"
  ],
  "requires_python": "",
  "summary": "json encoder uses singledispatch pattern instead of jsonencoder class overwrites",
  "version": "0.4.4",
  "releases": [],
  "developers": [
    "nzme",
    "sysadmin@grabone.co.nz"
  ],
  "kwds": "json_encoder jsonencoder simplejson json use_json_library",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_json_encoder",
  "homepage": "",
  "release_count": 7,
  "dependency_ids": [
    "pypi_simplejson",
    "pypi_singledispatch",
    "pypi_six"
  ]
}
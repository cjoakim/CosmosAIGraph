{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "# csvw\n\n[![build status](https://github.com/cldf/csvw/workflows/tests/badge.svg)](https://github.com/cldf/csvw/actions?query=workflow%3atests)\n[![pypi](https://img.shields.io/pypi/v/csvw.svg)](https://pypi.org/project/csvw)\n[![documentation status](https://readthedocs.org/projects/csvw/badge/?version=latest)](https://csvw.readthedocs.io/en/latest/?badge=latest)\n\n\nthis package provides\n- a python api to read and write relational, tabular data according to the [csv on the web](https://csvw.org/) specification and \n- commandline tools for reading and validating csvw data.\n\n\n## links\n\n- github: https://github.com/cldf/csvw\n- pypi: https://pypi.org/project/csvw\n- issue tracker: https://github.com/cldf/csvw/issues\n\n\n## installation\n\nthis package runs under python >=3.8, use pip to install:\n\n```bash\n$ pip install csvw\n```\n\n\n## cli\n\n### `csvw2json`\n\nconverting csvw data [to json](https://www.w3.org/tr/csv2json/)\n\n```shell\n$ csvw2json tests/fixtures/zipped-metadata.json \n{\n    \"tables\": [\n        {\n            \"url\": \"tests/fixtures/zipped.csv\",\n            \"row\": [\n                {\n                    \"url\": \"tests/fixtures/zipped.csv#row=2\",\n                    \"rownum\": 1,\n                    \"describes\": [\n                        {\n                            \"id\": \"abc\",\n                            \"value\": \"the value\"\n                        }\n                    ]\n                },\n                {\n                    \"url\": \"tests/fixtures/zipped.csv#row=3\",\n                    \"rownum\": 2,\n                    \"describes\": [\n                        {\n                            \"id\": \"cde\",\n                            \"value\": \"another one\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n### `csvwvalidate`\n\nvalidating csvw data\n\n```shell\n$ csvwvalidate tests/fixtures/zipped-metadata.json \nok\n```\n\n### `csvwdescribe`\n\ndescribing tabular-data files with csvw metadata\n\n```shell\n$ csvwdescribe --delimiter \"|\" tests/fixtures/frictionless-data.csv\n{\n    \"@context\": \"http://www.w3.org/ns/csvw\",\n    \"dc:conformsto\": \"data-package\",\n    \"tables\": [\n        {\n            \"dialect\": {\n                \"delimiter\": \"|\"\n            },\n            \"tableschema\": {\n                \"columns\": [\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"fk\"\n                    },\n                    {\n                        \"datatype\": \"integer\",\n                        \"name\": \"year\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"location name\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"value\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"binary\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"anyuri\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"email\"\n                    },\n                    {\n                        \"datatype\": \"string\",\n                        \"name\": \"boolean\"\n                    },\n                    {\n                        \"datatype\": {\n                            \"dc:format\": \"application/json\",\n                            \"base\": \"json\"\n                        },\n                        \"name\": \"array\"\n                    },\n                    {\n                        \"datatype\": {\n                            \"dc:format\": \"application/json\",\n                            \"base\": \"json\"\n                        },\n                        \"name\": \"geojson\"\n                    }\n                ]\n            },\n            \"url\": \"tests/fixtures/frictionless-data.csv\"\n        }\n    ]\n}\n```\n\n\n## python api\n\nfind the python api documentation at [csvw.readthedocs.io](https://csvw.readthedocs.io/en/latest/).\n\na quick example for using `csvw` from python code:\n\n```python\nimport json\nfrom csvw import csvw\ndata = csvw('https://raw.githubusercontent.com/cldf/csvw/master/tests/fixtures/test.tsv')\nprint(json.dumps(data.to_json(minimal=true), indent=4))\n[\n    {\n        \"province\": \"hello\",\n        \"territory\": \"world\",\n        \"precinct\": \"1\"\n    }\n]\n```\n\n\n## known limitations\n\n- we read **all** data which is specified as utf-8 encoded using the \n  [`utf-8-sig` codecs](https://docs.python.org/3/library/codecs.html#module-encodings.utf_8_sig).\n  thus, if such data starts with `u+feff` this will be interpreted as [bom](https://en.wikipedia.org/wiki/byte_order_mark)\n  and skipped.\n- low level csv parsing is delegated to the `csv` module in python's standard library. thus, if a `commentprefix`\n  is specified in a `dialect` instance, this will lead to skipping rows where the first value starts\n  with `commentprefix`, **even if the value was quoted**.\n- also, cell content containing `escapechar` may not be round-tripped as expected (when specifying\n  `escapechar` or a `csvw.dialect` with `quotechar` but `doublequote==false`),\n  when minimal quoting is specified. this is due to inconsistent `csv` behaviour\n  across python versions (see https://bugs.python.org/issue44861).\n\n\n## csvw conformance\n\nwhile we use the csvw specification as guideline, this package does not (and \nprobably never will) implement the full extent of this spec.\n\n- when csv files with a header are read, columns are not matched in order with\n  column descriptions in the `tableschema`, but instead are matched based on the\n  csv column header and the column descriptions' `name` and `titles` atributes.\n  this allows for more flexibility, because columns in the csv file may be\n  re-ordered without invalidating the metadata. a stricter matching can be forced\n  by specifying `\"header\": false` and `\"skiprows\": 1` in the table's dialect\n  description.\n\nhowever, `csvw.csvw` works correctly for\n- 269 out of 270 [json tests](https://w3c.github.io/csvw/tests/#manifest-json),\n- 280 out of 282 [validation tests](https://w3c.github.io/csvw/tests/#manifest-validation),\n- 10 out of 18 [non-normative tests](https://w3c.github.io/csvw/tests/#manifest-nonnorm)\n\nfrom the [csvw test suites](https://w3c.github.io/csvw/tests/).\n\n\n## compatibility with [frictionless data specs](https://specs.frictionlessdata.io/)\n\na csvw-described dataset is basically equivalent to a frictionless datapackage where all \n[data resources](https://specs.frictionlessdata.io/data-resource/) are [tabular data](https://specs.frictionlessdata.io/tabular-data-resource/).\nthus, the `csvw` package provides some conversion functionality. to\n\"read csvw data from a data package\", there's the `csvw.tablegroup.from_frictionless_datapackage` method:\n```python\nfrom csvw import tablegroup\ntg = tablegroup.from_frictionless_datapackage('path/to/datapackage.json')\n```\nto convert the metadata, the `tablegroup` can then be serialzed:\n```python\ntg.to_file('csvw-metadata.json')\n```\n\nnote that the csvw metadata file must be written to the data package's directory\nto make sure relative paths to data resources work.\n\nthis functionality - together with the schema inference capabilities\nof [`frictionless describe`](https://framework.frictionlessdata.io/docs/guides/describing-data/) - provides\na convenient way to bootstrap csvw metadata for a set of \"raw\" csv\nfiles, implemented in the [`csvwdescribe` command described above](#csvwdescribe).\n\n\n## see also\n\n- https://www.w3.org/2013/csvw/wiki/main_page\n- https://csvw.org\n- https://github.com/clariah/cow\n- https://github.com/clariah/ruminator\n- https://github.com/bloomberg/pycsvw\n- https://specs.frictionlessdata.io/table-schema/\n- https://github.com/theodi/csvlint.rb\n- https://github.com/ruby-rdf/rdf-tabular\n- https://github.com/rdf-ext/rdf-parser-csvw\n- https://github.com/robsteranium/csvwr\n\n\n## license\n\nthis package is distributed under the [apache 2.0 license](https://opensource.org/licenses/apache-2.0).\n\n\n",
  "docs_url": null,
  "keywords": "csv,w3c,tabular-data",
  "license": "apache 2.0",
  "name": "csvw",
  "package_url": "https://pypi.org/project/csvw/",
  "project_url": "https://pypi.org/project/csvw/",
  "project_urls": {
    "Bug Tracker": "https://github.com/cldf/csvw/issues",
    "Homepage": "https://github.com/cldf/csvw"
  },
  "release_url": "https://pypi.org/project/csvw/3.2.1/",
  "requires_dist": [
    "attrs (>=18.1)",
    "babel",
    "colorama",
    "isodate",
    "jsonschema",
    "language-tags",
    "python-dateutil",
    "rdflib",
    "requests",
    "rfc3986 (<2)",
    "uritemplate (>=3.0.0)",
    "build ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinx (<7) ; extra == 'docs'",
    "frictionless ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-mock ; extra == 'test'",
    "pytest (>=5) ; extra == 'test'",
    "requests-mock ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "python library to work with csvw described tabular data",
  "version": "3.2.1",
  "releases": [],
  "developers": [
    "robert_forkel",
    "robert_forkel@eva.mpg.de"
  ],
  "kwds": "csvw csvwvalidate csv csvwr csvlint",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_csvw",
  "homepage": "https://github.com/cldf/csvw",
  "release_count": 34,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_babel",
    "pypi_build",
    "pypi_colorama",
    "pypi_flake8",
    "pypi_frictionless",
    "pypi_isodate",
    "pypi_jsonschema",
    "pypi_language_tags",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_python_dateutil",
    "pypi_rdflib",
    "pypi_requests",
    "pypi_requests_mock",
    "pypi_rfc3986",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_twine",
    "pypi_uritemplate",
    "pypi_wheel"
  ]
}
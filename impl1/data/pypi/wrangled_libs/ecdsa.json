{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "ecdsa cryptographic signature library (pure python)\n# pure-python ecdsa and ecdh\n\n[![build status](https://github.com/tlsfuzzer/python-ecdsa/workflows/github%20ci/badge.svg?branch=master)](https://github.com/tlsfuzzer/python-ecdsa/actions?query=workflow%3a%22github+ci%22+branch%3amaster)\n[![documentation status](https://readthedocs.org/projects/ecdsa/badge/?version=latest)](https://ecdsa.readthedocs.io/en/latest/?badge=latest)\n[![coverage status](https://coveralls.io/repos/github/tlsfuzzer/python-ecdsa/badge.svg?branch=master)](https://coveralls.io/github/tlsfuzzer/python-ecdsa?branch=master)\n![condition coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/tomato42/9b6ca1f3410207fbeca785a178781651/raw/python-ecdsa-condition-coverage.json)\n[![language grade: python](https://img.shields.io/lgtm/grade/python/g/tlsfuzzer/python-ecdsa.svg?logo=lgtm&logowidth=18)](https://lgtm.com/projects/g/tlsfuzzer/python-ecdsa/context:python)\n[![total alerts](https://img.shields.io/lgtm/alerts/g/tlsfuzzer/python-ecdsa.svg?logo=lgtm&logowidth=18)](https://lgtm.com/projects/g/tlsfuzzer/python-ecdsa/alerts/)\n[![latest version](https://img.shields.io/pypi/v/ecdsa.svg?style=flat)](https://pypi.python.org/pypi/ecdsa/)\n![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat)\n\n\nthis is an easy-to-use implementation of ecc (elliptic curve cryptography)\nwith support for ecdsa (elliptic curve digital signature algorithm),\neddsa (edwards-curve digital signature algorithm) and ecdh\n(elliptic curve diffie-hellman), implemented purely in python, released under\nthe mit license. with this library, you can quickly create key pairs (signing\nkey and verifying key), sign messages, and verify the signatures. you can\nalso agree on a shared secret key based on exchanged public keys.\nthe keys and signatures are very short, making them easy to handle and\nincorporate into other protocols.\n\n**note: this library should not be used in production settings, see [security](#security) for more details.**\n\n## features\n\nthis library provides key generation, signing, verifying, and shared secret\nderivation for five\npopular nist \"suite b\" gf(p) (_prime field_) curves, with key lengths of 192,\n224, 256, 384, and 521 bits. the \"short names\" for these curves, as known by\nthe openssl tool (`openssl ecparam -list_curves`), are: `prime192v1`,\n`secp224r1`, `prime256v1`, `secp384r1`, and `secp521r1`. it includes the\n256-bit curve `secp256k1` used by bitcoin. there is also support for the\nregular (non-twisted) variants of brainpool curves from 160 to 512 bits. the\n\"short names\" of those curves are: `brainpoolp160r1`, `brainpoolp192r1`,\n`brainpoolp224r1`, `brainpoolp256r1`, `brainpoolp320r1`, `brainpoolp384r1`,\n`brainpoolp512r1`. few of the small curves from sec standard are also\nincluded (mainly to speed-up testing of the library), those are:\n`secp112r1`, `secp112r2`, `secp128r1`, and `secp160r1`.\nkey generation, siging and verifying is also supported for ed25519 and\ned448 curves.\nno other curves are included, but it is not too hard to add support for more\ncurves over prime fields.\n\n## dependencies\n\nthis library uses only python and the 'six' package. it is compatible with\npython 2.6, 2.7, and 3.3+. it also supports execution on alternative\nimplementations like pypy and pypy3.\n\nif `gmpy2` or `gmpy` is installed, they will be used for faster arithmetic.\neither of them can be installed after this library is installed,\n`python-ecdsa` will detect their presence on start-up and use them\nautomatically.\nyou should prefer `gmpy2` on python3 for optimal performance.\n\nto run the openssl compatibility tests, the 'openssl' tool must be in your\n`path`. this release has been tested successfully against openssl 0.9.8o,\n1.0.0a, 1.0.2f, 1.1.1d and 3.0.1 (among others).\n\n\n## installation\n\nthis library is available on pypi, it's recommended to install it using `pip`:\n\n```\npip install ecdsa\n```\n\nin case higher performance is wanted and using native code is not a problem,\nit's possible to specify installation together with `gmpy2`:\n\n```\npip install ecdsa[gmpy2]\n```\n\nor (slower, legacy option):\n```\npip install ecdsa[gmpy]\n```\n\n## speed\n\nthe following table shows how long this library takes to generate key pairs\n(`keygen`), to sign data (`sign`), to verify those signatures (`verify`),\nto derive a shared secret (`ecdh`), and\nto verify the signatures with no key-specific precomputation (`no pc verify`).\nall those values are in seconds.\nfor convenience, the inverses of those values are also provided:\nhow many keys per second can be generated (`keygen/s`), how many signatures\ncan be made per second (`sign/s`), how many signatures can be verified\nper second (`verify/s`), how many shared secrets can be derived per second\n(`ecdh/s`), and how many signatures with no key specific\nprecomputation can be verified per second (`no pc verify/s`). the size of raw\nsignature (generally the smallest\nthe way a signature can be encoded) is also provided in the `siglen` column.\nuse `tox -e speed` to generate this table on your own computer.\non an intel core i7 4790k @ 4.0ghz i'm getting the following performance:\n\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s  no pc verify  no pc verify/s\n        nist192p:     48   0.00032s   3134.06   0.00033s   2985.53   0.00063s   1598.36       0.00129s         774.43\n        nist224p:     56   0.00040s   2469.24   0.00042s   2367.88   0.00081s   1233.41       0.00170s         586.66\n        nist256p:     64   0.00051s   1952.73   0.00054s   1867.80   0.00098s   1021.86       0.00212s         471.27\n        nist384p:     96   0.00107s    935.92   0.00111s    904.23   0.00203s    491.77       0.00446s         224.00\n        nist521p:    132   0.00210s    475.52   0.00215s    464.16   0.00398s    251.28       0.00874s         114.39\n       secp256k1:     64   0.00052s   1921.54   0.00054s   1847.49   0.00105s    948.68       0.00210s         477.01\n brainpoolp160r1:     40   0.00025s   4003.88   0.00026s   3845.12   0.00053s   1893.93       0.00105s         949.92\n brainpoolp192r1:     48   0.00033s   3043.97   0.00034s   2975.98   0.00063s   1581.50       0.00135s         742.29\n brainpoolp224r1:     56   0.00041s   2436.44   0.00043s   2315.51   0.00078s   1278.49       0.00180s         556.16\n brainpoolp256r1:     64   0.00053s   1892.49   0.00054s   1846.24   0.00114s    875.64       0.00229s         437.25\n brainpoolp320r1:     80   0.00073s   1361.26   0.00076s   1309.25   0.00143s    699.29       0.00322s         310.49\n brainpoolp384r1:     96   0.00107s    931.29   0.00111s    901.80   0.00230s    434.19       0.00476s         210.20\n brainpoolp512r1:    128   0.00207s    483.41   0.00212s    471.42   0.00425s    235.43       0.00912s         109.61\n       secp112r1:     28   0.00015s   6672.53   0.00016s   6440.34   0.00031s   3265.41       0.00056s        1774.20\n       secp112r2:     28   0.00015s   6697.11   0.00015s   6479.98   0.00028s   3524.72       0.00058s        1716.16\n       secp128r1:     32   0.00018s   5497.65   0.00019s   5272.89   0.00036s   2747.39       0.00072s        1396.16\n       secp160r1:     42   0.00025s   3949.32   0.00026s   3894.45   0.00046s   2153.85       0.00102s         985.07\n         ed25519:     64   0.00076s   1324.48   0.00042s   2405.01   0.00109s    918.05       0.00344s         290.50\n           ed448:    114   0.00176s    569.53   0.00115s    870.94   0.00282s    355.04       0.01024s          97.69\n\n                       ecdh     ecdh/s\n        nist192p:   0.00104s    964.89\n        nist224p:   0.00134s    748.63\n        nist256p:   0.00170s    587.08\n        nist384p:   0.00352s    283.90\n        nist521p:   0.00717s    139.51\n       secp256k1:   0.00154s    648.40\n brainpoolp160r1:   0.00082s   1220.70\n brainpoolp192r1:   0.00105s    956.75\n brainpoolp224r1:   0.00136s    734.52\n brainpoolp256r1:   0.00178s    563.32\n brainpoolp320r1:   0.00252s    397.23\n brainpoolp384r1:   0.00376s    266.27\n brainpoolp512r1:   0.00733s    136.35\n       secp112r1:   0.00046s   2180.40\n       secp112r2:   0.00045s   2229.14\n       secp128r1:   0.00054s   1868.15\n       secp160r1:   0.00080s   1243.98\n```\n\nto test performance with `gmpy2` loaded, use `tox -e speedgmpy2`.\non the same machine i'm getting the following performance with `gmpy2`:\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s  no pc verify  no pc verify/s\n        nist192p:     48   0.00017s   5933.40   0.00017s   5751.70   0.00032s   3125.28       0.00067s        1502.41\n        nist224p:     56   0.00021s   4782.87   0.00022s   4610.05   0.00040s   2487.04       0.00089s        1126.90\n        nist256p:     64   0.00023s   4263.98   0.00024s   4125.16   0.00045s   2200.88       0.00098s        1016.82\n        nist384p:     96   0.00041s   2449.54   0.00042s   2399.96   0.00083s   1210.57       0.00172s         581.43\n        nist521p:    132   0.00071s   1416.07   0.00072s   1389.81   0.00144s    692.93       0.00312s         320.40\n       secp256k1:     64   0.00024s   4245.05   0.00024s   4122.09   0.00045s   2206.40       0.00094s        1068.32\n brainpoolp160r1:     40   0.00014s   6939.17   0.00015s   6681.55   0.00029s   3452.43       0.00057s        1769.81\n brainpoolp192r1:     48   0.00017s   5920.05   0.00017s   5774.36   0.00034s   2979.00       0.00069s        1453.19\n brainpoolp224r1:     56   0.00021s   4732.12   0.00022s   4622.65   0.00041s   2422.47       0.00087s        1149.87\n brainpoolp256r1:     64   0.00024s   4233.02   0.00024s   4115.20   0.00047s   2143.27       0.00098s        1015.60\n brainpoolp320r1:     80   0.00032s   3162.38   0.00032s   3077.62   0.00063s   1598.83       0.00136s         737.34\n brainpoolp384r1:     96   0.00041s   2436.88   0.00042s   2395.62   0.00083s   1202.68       0.00178s         562.85\n brainpoolp512r1:    128   0.00063s   1587.60   0.00064s   1558.83   0.00125s    799.96       0.00281s         355.83\n       secp112r1:     28   0.00009s  11118.66   0.00009s  10775.48   0.00018s   5456.00       0.00033s        3020.83\n       secp112r2:     28   0.00009s  11322.97   0.00009s  10857.71   0.00017s   5748.77       0.00032s        3094.28\n       secp128r1:     32   0.00010s  10078.39   0.00010s   9665.27   0.00019s   5200.58       0.00036s        2760.88\n       secp160r1:     42   0.00015s   6875.51   0.00015s   6647.35   0.00029s   3422.41       0.00057s        1768.35\n         ed25519:     64   0.00030s   3322.56   0.00018s   5568.63   0.00046s   2165.35       0.00153s         654.02\n           ed448:    114   0.00060s   1680.53   0.00039s   2567.40   0.00096s   1036.67       0.00350s         285.62\n\n                       ecdh     ecdh/s\n        nist192p:   0.00050s   1985.70\n        nist224p:   0.00066s   1524.16\n        nist256p:   0.00071s   1413.07\n        nist384p:   0.00127s    788.89\n        nist521p:   0.00230s    434.85\n       secp256k1:   0.00071s   1409.95\n brainpoolp160r1:   0.00042s   2374.65\n brainpoolp192r1:   0.00051s   1960.01\n brainpoolp224r1:   0.00066s   1518.37\n brainpoolp256r1:   0.00071s   1399.90\n brainpoolp320r1:   0.00100s    997.21\n brainpoolp384r1:   0.00129s    777.51\n brainpoolp512r1:   0.00210s    475.99\n       secp112r1:   0.00022s   4457.70\n       secp112r2:   0.00024s   4252.33\n       secp128r1:   0.00028s   3589.31\n       secp160r1:   0.00043s   2305.02\n```\n\n(there's also `gmpy` version, execute it using `tox -e speedgmpy`)\n\nfor comparison, a highly optimised implementation (including curve-specific\nassembly for some curves), like the one in openssl 1.1.1d, provides the\nfollowing performance numbers on the same machine.\nrun `openssl speed ecdsa` and `openssl speed ecdh` to reproduce it:\n```\n                              sign    verify    sign/s verify/s\n 192 bits ecdsa (nistp192)   0.0002s   0.0002s   4785.6   5380.7\n 224 bits ecdsa (nistp224)   0.0000s   0.0001s  22475.6   9822.0\n 256 bits ecdsa (nistp256)   0.0000s   0.0001s  45069.6  14166.6\n 384 bits ecdsa (nistp384)   0.0008s   0.0006s   1265.6   1648.1\n 521 bits ecdsa (nistp521)   0.0003s   0.0005s   3753.1   1819.5\n 256 bits ecdsa (brainpoolp256r1)   0.0003s   0.0003s   2983.5   3333.2\n 384 bits ecdsa (brainpoolp384r1)   0.0008s   0.0007s   1258.8   1528.1\n 512 bits ecdsa (brainpoolp512r1)   0.0015s   0.0012s    675.1    860.1\n\n                              sign    verify    sign/s verify/s\n 253 bits eddsa (ed25519)   0.0000s   0.0001s  28217.9  10897.7\n 456 bits eddsa (ed448)     0.0003s   0.0005s   3926.5   2147.7\n\n                               op      op/s\n 192 bits ecdh (nistp192)   0.0002s   4853.4\n 224 bits ecdh (nistp224)   0.0001s  15252.1\n 256 bits ecdh (nistp256)   0.0001s  18436.3\n 384 bits ecdh (nistp384)   0.0008s   1292.7\n 521 bits ecdh (nistp521)   0.0003s   2884.7\n 256 bits ecdh (brainpoolp256r1)   0.0003s   3066.5\n 384 bits ecdh (brainpoolp384r1)   0.0008s   1298.0\n 512 bits ecdh (brainpoolp512r1)   0.0014s    694.8\n```\n\nkeys and signature can be serialized in different ways (see usage, below).\nfor a nist192p key, the three basic representations require strings of the\nfollowing lengths (in bytes):\n\n    to_string:  signkey= 24, verifykey= 48, signature=48\n    compressed: signkey=n/a, verifykey= 25, signature=n/a\n    der:        signkey=106, verifykey= 80, signature=55\n    pem:        signkey=278, verifykey=162, (no support for pem signatures)\n\n## history\n\nin 2006, peter pearson announced his pure-python implementation of ecdsa in a\n[message to sci.crypt][1], available from his [download site][2]. in 2010,\nbrian warner wrote a wrapper around this code, to make it a bit easier and\nsafer to use. in 2020, hubert kario included an implementation of elliptic\ncurve cryptography that uses jacobian coordinates internally, improving\nperformance about 20-fold. you are looking at the readme for this wrapper.\n\n[1]: http://www.derkeiler.com/newsgroups/sci.crypt/2006-01/msg00651.html\n[2]: http://webpages.charter.net/curryfans/peter/downloads.html\n\n## testing\n\nto run the full test suite, do this:\n\n    tox -e coverage\n\non an intel core i7 4790k @ 4.0ghz, the tests take about 18 seconds to execute.\nthe test suite uses\n[`hypothesis`](https://github.com/hypothesisworks/hypothesis) so there is some\ninherent variability in the test suite execution time.\n\none part of `test_pyecdsa.py` and `test_ecdh.py` checks compatibility with\nopenssl, by running the \"openssl\" cli tool, make sure it's in your `path` if\nyou want to test compatibility with it (if openssl is missing, too old, or\ndoesn't support all the curves supported in upstream releases you will see\nskipped tests in the above `coverage` run).\n\n## security\n\nthis library was not designed with security in mind. if you are processing\ndata that needs to be protected we suggest you use a quality wrapper around\nopenssl. [pyca/cryptography](https://cryptography.io) is one example of such\na wrapper. the primary use-case of this library is as a portable library for\ninteroperability testing and as a teaching tool.\n\n**this library does not protect against side-channel attacks.**\n\ndo not allow attackers to measure how long it takes you to generate a key pair\nor sign a message. do not allow attackers to run code on the same physical\nmachine when key pair generation or signing is taking place (this includes\nvirtual machines). do not allow attackers to measure how much power your\ncomputer uses while generating the key pair or signing a message. do not allow\nattackers to measure rf interference coming from your computer while generating\na key pair or signing a message. note: just loading the private key will cause\nkey pair generation. other operations or attack vectors may also be\nvulnerable to attacks. **for a sophisticated attacker observing just one\noperation with a private key will be sufficient to completely\nreconstruct the private key**.\n\nplease also note that any pure-python cryptographic library will be vulnerable\nto the same side-channel attacks. this is because python does not provide\nside-channel secure primitives (with the exception of\n[`hmac.compare_digest()`][3]), making side-channel secure programming\nimpossible.\n\nthis library depends upon a strong source of random numbers. do not use it on\na system where `os.urandom()` does not provide cryptographically secure\nrandom numbers.\n\n[3]: https://docs.python.org/3/library/hmac.html#hmac.compare_digest\n\n## usage\n\nyou start by creating a `signingkey`. you can use this to sign data, by passing\nin data as a byte string and getting back the signature (also a byte string).\nyou can also ask a `signingkey` to give you the corresponding `verifyingkey`.\nthe `verifyingkey` can be used to verify a signature, by passing it both the\ndata string and the signature byte string: it either returns true or raises\n`badsignatureerror`.\n\n```python\nfrom ecdsa import signingkey\nsk = signingkey.generate() # uses nist192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\neach `signingkey`/`verifyingkey` is associated with a specific curve, like\nnist192p (the default one). longer curves are more secure, but take longer to\nuse, and result in longer keys and signatures.\n\n```python\nfrom ecdsa import signingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nthe `signingkey` can be serialized into several different formats: the shortest\nis to call `s=sk.to_string()`, and then re-create it with\n`signingkey.from_string(s, curve)` . this short form does not record the\ncurve, so you must be sure to pass to `from_string()` the same curve you used\nfor the original key. the short form of a nist192p-based signing key is just 24\nbytes long. if a point encoding is invalid or it does not lie on the specified\ncurve, `from_string()` will raise `malformedpointerror`.\n\n```python\nfrom ecdsa import signingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nsk_string = sk.to_string()\nsk2 = signingkey.from_string(sk_string, curve=nist384p)\nprint(sk_string.hex())\nprint(sk2.to_string().hex())\n```\n\nnote: while the methods are called `to_string()` the type they return is\nactually `bytes`, the \"string\" part is leftover from python 2.\n\n`sk.to_pem()` and `sk.to_der()` will serialize the signing key into the same\nformats that openssl uses. the pem file looks like the familiar ascii-armored\n`\"-----begin ec private key-----\"` base64-encoded format, and the der format\nis a shorter binary form of the same data.\n`signingkey.from_pem()/.from_der()` will undo this serialization. these\nformats include the curve name, so you do not need to pass in a curve\nidentifier to the deserializer. in case the file is malformed `from_der()`\nand `from_pem()` will raise `unexpectedder` or` malformedpointerror`.\n\n```python\nfrom ecdsa import signingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nsk_pem = sk.to_pem()\nsk2 = signingkey.from_pem(sk_pem)\n# sk and sk2 are the same key\n```\n\nlikewise, the `verifyingkey` can be serialized in the same way:\n`vk.to_string()/verifyingkey.from_string()`, `to_pem()/from_pem()`, and\n`to_der()/from_der()`. the same `curve=` argument is needed for\n`verifyingkey.from_string()`.\n\n```python\nfrom ecdsa import signingkey, verifyingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nvk = sk.verifying_key\nvk_string = vk.to_string()\nvk2 = verifyingkey.from_string(vk_string, curve=nist384p)\n# vk and vk2 are the same key\n\nfrom ecdsa import signingkey, verifyingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nvk = sk.verifying_key\nvk_pem = vk.to_pem()\nvk2 = verifyingkey.from_pem(vk_pem)\n# vk and vk2 are the same key\n```\n\nthere are a couple of different ways to compute a signature. fundamentally,\necdsa takes a number that represents the data being signed, and returns a\npair of numbers that represent the signature. the `hashfunc=` argument to\n`sk.sign()` and `vk.verify()` is used to turn an arbitrary string into a\nfixed-length digest, which is then turned into a number that ecdsa can sign,\nand both sign and verify must use the same approach. the default value is\n`hashlib.sha1`, but if you use nist256p or a longer curve, you can use\n`hashlib.sha256` instead.\n\nthere are also multiple ways to represent a signature. the default\n`sk.sign()` and `vk.verify()` methods present it as a short string, for\nsimplicity and minimal overhead. to use a different scheme, use the\n`sk.sign(sigencode=)` and `vk.verify(sigdecode=)` arguments. there are helper\nfunctions in the `ecdsa.util` module that can be useful here.\n\nit is also possible to create a `signingkey` from a \"seed\", which is\ndeterministic. this can be used in protocols where you want to derive\nconsistent signing keys from some other secret, for example when you want\nthree separate keys and only want to store a single master secret. you should\nstart with a uniformly-distributed unguessable seed with about `curve.baselen`\nbytes of entropy, and then use one of the helper functions in `ecdsa.util` to\nconvert it into an integer in the correct range, and then finally pass it\ninto `signingkey.from_secret_exponent()`, like this:\n\n```python\nimport os\nfrom ecdsa import nist384p, signingkey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key(seed):\n  secexp = randrange_from_seed__trytryagain(seed, nist384p.order)\n  return signingkey.from_secret_exponent(secexp, curve=nist384p)\n\nseed = os.urandom(nist384p.baselen) # or other starting point\nsk1a = make_key(seed)\nsk1b = make_key(seed)\n# note: sk1a and sk1b are the same key\nassert sk1a.to_string() == sk1b.to_string()\nsk2 = make_key(b\"2-\"+seed)  # different key\nassert sk1a.to_string() != sk2.to_string()\n```\n\nin case the application will verify a lot of signatures made with a single\nkey, it's possible to precompute some of the internal values to make\nsignature verification significantly faster. the break-even point occurs at\nabout 100 signatures verified.\n\nto perform precomputation, you can call the `precompute()` method\non `verifyingkey` instance:\n```python\nfrom ecdsa import signingkey, nist384p\nsk = signingkey.generate(curve=nist384p)\nvk = sk.verifying_key\nvk.precompute()\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nonce `precompute()` was called, all signature verifications with this key will\nbe faster to execute.\n\n## openssl compatibility\n\nto produce signatures that can be verified by openssl tools, or to verify\nsignatures that were produced by those tools, use:\n\n```python\n# openssl ecparam -name prime256v1 -genkey -out sk.pem\n# openssl ec -in sk.pem -pubout -out vk.pem\n# echo \"data for signing\" > data\n# openssl dgst -sha256 -sign sk.pem -out data.sig data\n# openssl dgst -sha256 -verify vk.pem -signature data.sig data\n# openssl dgst -sha256 -prverify sk.pem -signature data.sig data\n\nimport hashlib\nfrom ecdsa import signingkey, verifyingkey\nfrom ecdsa.util import sigencode_der, sigdecode_der\n\nwith open(\"vk.pem\") as f:\n   vk = verifyingkey.from_pem(f.read())\n\nwith open(\"data\", \"rb\") as f:\n   data = f.read()\n\nwith open(\"data.sig\", \"rb\") as f:\n   signature = f.read()\n\nassert vk.verify(signature, data, hashlib.sha256, sigdecode=sigdecode_der)\n\nwith open(\"sk.pem\") as f:\n   sk = signingkey.from_pem(f.read(), hashlib.sha256)\n\nnew_signature = sk.sign_deterministic(data, sigencode=sigencode_der)\n\nwith open(\"data.sig2\", \"wb\") as f:\n   f.write(new_signature)\n\n# openssl dgst -sha256 -verify vk.pem -signature data.sig2 data\n```\n\nnote: if compatibility with openssl 1.0.0 or earlier is necessary, the\n`sigencode_string` and `sigdecode_string` from `ecdsa.util` can be used for\nrespectively writing and reading the signatures.\n\nthe keys also can be written in format that openssl can handle:\n\n```python\nfrom ecdsa import signingkey, verifyingkey\n\nwith open(\"sk.pem\") as f:\n    sk = signingkey.from_pem(f.read())\nwith open(\"sk.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\n\nwith open(\"vk.pem\") as f:\n    vk = verifyingkey.from_pem(f.read())\nwith open(\"vk.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\n## entropy\n\ncreating a signing key with `signingkey.generate()` requires some form of\nentropy (as opposed to\n`from_secret_exponent`/`from_string`/`from_der`/`from_pem`,\nwhich are deterministic and do not require an entropy source). the default\nsource is `os.urandom()`, but you can pass any other function that behaves\nlike `os.urandom` as the `entropy=` argument to do something different. this\nmay be useful in unit tests, where you want to achieve repeatable results. the\n`ecdsa.util.prng` utility is handy here: it takes a seed and produces a strong\npseudo-random stream from it:\n\n```python\nfrom ecdsa.util import prng\nfrom ecdsa import signingkey\nrng1 = prng(b\"seed\")\nsk1 = signingkey.generate(entropy=rng1)\nrng2 = prng(b\"seed\")\nsk2 = signingkey.generate(entropy=rng2)\n# sk1 and sk2 are the same key\n```\n\nlikewise, ecdsa signature generation requires a random number, and each\nsignature must use a different one (using the same number twice will\nimmediately reveal the private signing key). the `sk.sign()` method takes an\n`entropy=` argument which behaves the same as `signingkey.generate(entropy=)`.\n\n## deterministic signatures\n\nif you call `signingkey.sign_deterministic(data)` instead of `.sign(data)`,\nthe code will generate a deterministic signature instead of a random one.\nthis uses the algorithm from rfc6979 to safely generate a unique `k` value,\nderived from the private key and the message being signed. each time you sign\nthe same message with the same key, you will get the same signature (using\nthe same `k`).\n\nthis may become the default in a future version, as it is not vulnerable to\nfailures of the entropy source.\n\n## examples\n\ncreate a nist192p key pair and immediately save both to disk:\n\n```python\nfrom ecdsa import signingkey\nsk = signingkey.generate()\nvk = sk.verifying_key\nwith open(\"private.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\nwith open(\"public.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\nload a signing key from disk, use it to sign a message (using sha-1), and write\nthe signature to disk:\n\n```python\nfrom ecdsa import signingkey\nwith open(\"private.pem\") as f:\n    sk = signingkey.from_pem(f.read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nsig = sk.sign(message)\nwith open(\"signature\", \"wb\") as f:\n    f.write(sig)\n```\n\nload the verifying key, message, and signature from disk, and verify the\nsignature (assume sha-1 hash):\n\n```python\nfrom ecdsa import verifyingkey, badsignatureerror\nvk = verifyingkey.from_pem(open(\"public.pem\").read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nwith open(\"signature\", \"rb\") as f:\n    sig = f.read()\ntry:\n    vk.verify(sig, message)\n    print \"good signature\"\nexcept badsignatureerror:\n    print \"bad signature\"\n```\n\ncreate a nist521p key pair:\n\n```python\nfrom ecdsa import signingkey, nist521p\nsk = signingkey.generate(curve=nist521p)\nvk = sk.verifying_key\n```\n\ncreate three independent signing keys from a master seed:\n\n```python\nfrom ecdsa import nist192p, signingkey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key_from_seed(seed, curve=nist192p):\n    secexp = randrange_from_seed__trytryagain(seed, curve.order)\n    return signingkey.from_secret_exponent(secexp, curve)\n\nsk1 = make_key_from_seed(\"1:%s\" % seed)\nsk2 = make_key_from_seed(\"2:%s\" % seed)\nsk3 = make_key_from_seed(\"3:%s\" % seed)\n```\n\nload a verifying key from disk and print it using hex encoding in\nuncompressed and compressed format (defined in x9.62 and sec1 standards):\n\n```python\nfrom ecdsa import verifyingkey\n\nwith open(\"public.pem\") as f:\n    vk = verifyingkey.from_pem(f.read())\n\nprint(\"uncompressed: {0}\".format(vk.to_string(\"uncompressed\").hex()))\nprint(\"compressed: {0}\".format(vk.to_string(\"compressed\").hex()))\n```\n\nload a verifying key from a hex string from compressed format, output\nuncompressed:\n\n```python\nfrom ecdsa import verifyingkey, nist256p\n\ncomp_str = '022799c0d0ee09772fdd337d4f28dc155581951d07082fb19a38aa396b67e77759'\nvk = verifyingkey.from_string(bytearray.fromhex(comp_str), curve=nist256p)\nprint(vk.to_string(\"uncompressed\").hex())\n```\n\necdh key exchange with remote party:\n\n```python\nfrom ecdsa import ecdh, nist256p\n\necdh = ecdh(curve=nist256p)\necdh.generate_private_key()\nlocal_public_key = ecdh.get_public_key()\n#send `local_public_key` to remote party and receive `remote_public_key` from remote party\nwith open(\"remote_public_key.pem\") as e:\n    remote_public_key = e.read()\necdh.load_received_public_key_pem(remote_public_key)\nsecret = ecdh.generate_sharedsecret_bytes()\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "ecdsa",
  "package_url": "https://pypi.org/project/ecdsa/",
  "project_url": "https://pypi.org/project/ecdsa/",
  "project_urls": {
    "Homepage": "http://github.com/tlsfuzzer/python-ecdsa"
  },
  "release_url": "https://pypi.org/project/ecdsa/0.18.0/",
  "requires_dist": [
    "six (>=1.9.0)",
    "gmpy ; extra == 'gmpy'",
    "gmpy2 ; extra == 'gmpy2'"
  ],
  "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*",
  "summary": "ecdsa cryptographic signature library (pure python)",
  "version": "0.18.0",
  "releases": [],
  "developers": [
    "brian_warner",
    "warner@lothar.com"
  ],
  "kwds": "ecdsa test_ecdh ecdh badge ecc",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ecdsa",
  "homepage": "http://github.com/tlsfuzzer/python-ecdsa",
  "release_count": 20,
  "dependency_ids": [
    "pypi_gmpy",
    "pypi_gmpy2",
    "pypi_six"
  ],
  "documentation_summary": "The HTML text provides information about the \"ecdsa\" package version 0.18.0, available on PyPI (Python Package Index). It is a pure Python library for ECDSA (Elliptic Curve Digital Signature Algorithm) and ECDH (Elliptic Curve Diffie-Hellman), supporting key generation, signing, verifying, and shared secret derivation for various curves. The library is compatible with Python versions 2.6, 2.7, and 3.3+, and is released under the MIT license. It warns users about potential security vulnerabilities for production settings and side-channel attacks. The package also includes performance benchmarks and compatibility details with OpenSSL for signature verification and generation. Installation instructions using pip and additional functionalities like deterministic signatures and ECDH key exchange are provided.",
  "embedding": [
    -0.010408725589513779,
    0.008208339102566242,
    -0.0010760511504486203,
    -0.035647645592689514,
    -0.01257462427020073,
    0.02408699132502079,
    -0.02026563137769699,
    0.00941544771194458,
    -0.002038289327174425,
    -0.01397486962378025,
    0.022804008796811104,
    0.018279075622558594,
    -0.03617187589406967,
    0.03280576691031456,
    -0.03087439201772213,
    -0.0007160741370171309,
    0.007739291060715914,
    -0.02059672400355339,
    -0.009222310967743397,
    0.029136154800653458,
    0.02092781662940979,
    0.00399380549788475,
    -0.0010225934674963355,
    -0.033550724387168884,
    0.0009105048375204206,
    0.026073548942804337,
    0.0287774708122015,
    -0.02010008506476879,
    -0.005473375786095858,
    -0.020734678953886032,
    0.03909652680158615,
    -0.004921554587781429,
    -0.036585740745067596,
    -0.017658276483416557,
    -0.05046404153108597,
    -0.016223540529608727,
    0.0033885266166180372,
    -0.00860151182860136,
    0.045001011341810226,
    0.01619594916701317,
    0.0059769125655293465,
    0.0027177189476788044,
    0.0008777405018918216,
    0.000704434176441282,
    -0.017685867846012115,
    0.001087260083295405,
    0.015188876539468765,
    -0.04155213013291359,
    -0.020210448652505875,
    0.038682661950588226,
    0.022804008796811104,
    0.016044199466705322,
    -0.0035385529045015574,
    -0.022597074508666992,
    -0.003512686351314187,
    -0.005331971682608128,
    0.0041938405483961105,
    0.019589649513363838,
    0.0079876109957695,
    0.016609815880656242,
    0.023038532584905624,
    9.031759691424668e-05,
    -0.029025791212916374,
    -0.028556743636727333,
    -0.012264224700629711,
    -0.0002884127607103437,
    -0.007270243484526873,
    0.019355125725269318,
    0.020651904866099358,
    0.021438250318169594,
    0.03832397609949112,
    0.01586485654115677,
    -0.021617593243718147,
    0.010843285359442234,
    0.04053126275539398,
    0.004021396394819021,
    -0.03962075710296631,
    0.006207987666130066,
    -0.009387857280671597,
    -0.022997144609689713,
    -0.00868428498506546,
    -0.005849303677678108,
    0.0279497392475605,
    0.02632186748087406,
    0.012616010382771492,
    0.0068322354927659035,
    -0.020886428654193878,
    0.0036144284531474113,
    -0.03446123003959656,
    -0.0023348932154476643,
    0.014195598661899567,
    -0.009891393594443798,
    -0.00861530750989914,
    0.02632186748087406,
    -0.03735829144716263,
    0.01866534911096096,
    -0.007511665113270283,
    0.02076227031648159,
    -3.5620483686216176e-05,
    -0.006170049775391817,
    0.0047008260153234005,
    0.01249185111373663,
    0.0008949848706834018,
    -0.009753438644111156,
    -0.0362546481192112,
    -0.02292816713452339,
    -0.008380783721804619,
    -0.0007807406946085393,
    0.010312157683074474,
    0.023645535111427307,
    -0.017782434821128845,
    0.03815843164920807,
    -0.0022572933230549097,
    -0.036944422870874405,
    0.026970257982611656,
    0.009512016549706459,
    0.023066122084856033,
    0.015713106840848923,
    0.011498572304844856,
    0.008222134783864021,
    -0.009670665487647057,
    0.011884847655892372,
    0.007401300594210625,
    -0.030984755605459213,
    -0.01280914805829525,
    0.0002625461493153125,
    -0.010691533796489239,
    -0.02717719040811062,
    0.00938095897436142,
    -0.01873432658612728,
    -0.019120601937174797,
    -0.01367136836051941,
    0.001504574785940349,
    -0.013071263208985329,
    -0.009850007481873035,
    -0.009387857280671597,
    -0.003869645530357957,
    -0.012781556695699692,
    -0.030681254342198372,
    -0.03570282831788063,
    -1.2515669368440285e-05,
    0.00966376718133688,
    -0.011671016924083233,
    -0.027839375659823418,
    -0.006690830923616886,
    0.009077457711100578,
    -0.0038351567927747965,
    0.012436668388545513,
    0.0032695401459932327,
    -0.006490795873105526,
    0.04375941678881645,
    0.026156321167945862,
    -0.011443390510976315,
    -0.0030867494642734528,
    -0.013678265735507011,
    0.017754845321178436,
    -0.025038883090019226,
    0.010312157683074474,
    -0.006297658663243055,
    -0.010498397052288055,
    -0.01410592719912529,
    0.016844339668750763,
    -0.0264460276812315,
    -0.03040534444153309,
    0.014871579594910145,
    0.027439305558800697,
    0.0276186466217041,
    -0.03523377701640129,
    -0.002459052950143814,
    -0.0009320603567175567,
    -0.006728768814355135,
    0.018775714561343193,
    -0.03087439201772213,
    -0.014816396869719028,
    0.008229032158851624,
    0.006059685721993446,
    0.02955002151429653,
    0.01279535237699747,
    -0.016761567443609238,
    -0.006801195442676544,
    0.023314442485570908,
    0.01986556127667427,
    0.010926058515906334,
    0.0316193513572216,
    -0.03297131136059761,
    -0.00043434358667582273,
    0.021672774106264114,
    0.014499099925160408,
    0.00483188359066844,
    0.025342384353280067,
    0.01360928826034069,
    0.03302649408578873,
    0.007477176375687122,
    -0.012202144600450993,
    -0.5893449783325195,
    -0.04218672588467598,
    -0.04577356204390526,
    -0.023962832987308502,
    0.020707087591290474,
    -0.019024033099412918,
    0.015285445377230644,
    0.04947076365351677,
    -0.01354031078517437,
    0.027273759245872498,
    -0.03316444903612137,
    0.025507930666208267,
    -0.014085234142839909,
    -0.007559949532151222,
    -0.011657221242785454,
    0.0026608125772327185,
    0.01756170764565468,
    -0.011746891774237156,
    0.015078512020409107,
    0.0050353677943348885,
    -0.024376697838306427,
    0.026556391268968582,
    -0.01264360174536705,
    0.0027884209994226694,
    0.019024033099412918,
    0.026128729805350304,
    0.005776877515017986,
    -0.004155902657657862,
    0.012622907757759094,
    -0.0051767718978226185,
    -0.004162800498306751,
    0.04684961214661598,
    0.006294209510087967,
    -0.01953446865081787,
    0.035013049840927124,
    -0.010601863265037537,
    -0.016361495479941368,
    0.03782733902335167,
    -0.022072844207286835,
    0.043897371739149094,
    0.004976736847311258,
    -0.0011614110553637147,
    0.018582576885819435,
    0.010270770639181137,
    -0.0011984865413978696,
    0.006846030708402395,
    0.005118140950798988,
    0.012684987857937813,
    -0.015602742321789265,
    -0.0179617777466774,
    0.016251131892204285,
    -0.028667107224464417,
    -0.010553578846156597,
    -0.01569931022822857,
    0.00254872371442616,
    -0.011126093566417694,
    0.020086288452148438,
    -0.01706506870687008,
    0.01320921815931797,
    0.006276965141296387,
    0.0073392209596931934,
    0.031591758131980896,
    -0.01269188616424799,
    -0.0292741097509861,
    0.018472211435437202,
    -0.011429594829678535,
    -0.012153860181570053,
    -0.01374034583568573,
    -0.005107794422656298,
    -0.024569835513830185,
    0.016747770830988884,
    -0.0022900577168911695,
    -0.013850710354745388,
    -0.009801723062992096,
    0.015216467902064323,
    0.04072440043091774,
    0.02641843631863594,
    0.003545450745150447,
    0.003421291010454297,
    0.022141821682453156,
    0.0098155178129673,
    0.004752559587359428,
    0.0016597744543105364,
    -0.021134749054908752,
    0.04577356204390526,
    0.011484777554869652,
    -0.015133694745600224,
    -0.019617240875959396,
    0.00953270960599184,
    0.011919336393475533,
    0.021383067592978477,
    0.013154036365449429,
    0.027453100308775902,
    -0.04602188244462013,
    0.010091428644955158,
    0.006983986124396324,
    0.001454566023312509,
    0.003907583188265562,
    -0.02588041126728058,
    -0.02285918965935707,
    -0.003009149571880698,
    -0.0033143756445497274,
    -0.015713106840848923,
    -0.008222134783864021,
    0.0171340461820364,
    0.00961548276245594,
    -0.0027297900523990393,
    0.004104169551283121,
    0.03084680065512657,
    -0.0037213435862213373,
    -0.012698783539235592,
    -0.052892055362463,
    -0.020914020016789436,
    0.0013433395652100444,
    -0.004918105900287628,
    -0.03217117115855217,
    0.009622381068766117,
    0.012616010382771492,
    0.034681957215070724,
    -0.0003127704840153456,
    0.004925003740936518,
    0.0048525771126151085,
    -0.012422872707247734,
    -0.023204078897833824,
    0.005214709788560867,
    0.0031522782519459724,
    0.0008109183982014656,
    -0.011201968416571617,
    -0.022638462483882904,
    0.007484073750674725,
    0.016513247042894363,
    0.025466544553637505,
    0.009960371069610119,
    -0.0014976770617067814,
    0.02172795683145523,
    0.007008128333836794,
    0.026032160967588425,
    -0.011422697454690933,
    -0.0181273240596056,
    0.017713457345962524,
    -0.020886428654193878,
    0.00020995069644413888,
    0.006514938082545996,
    -0.00904986634850502,
    -0.012829841114580631,
    -0.025135451927781105,
    -0.0021883156150579453,
    0.010463908314704895,
    -0.0098982909694314,
    0.0038386057130992413,
    -0.000666496460326016,
    0.00038067036075517535,
    -0.038379158824682236,
    0.031067529693245888,
    0.0009010204230435193,
    -0.018968850374221802,
    -0.025066474452614784,
    -0.00495604332536459,
    0.005918281618505716,
    0.007215061224997044,
    -0.0056975530460476875,
    0.03848952427506447,
    -0.02352137491106987,
    -0.007063310593366623,
    -0.031095121055841446,
    0.010160406120121479,
    -0.014926761388778687,
    0.021383067592978477,
    0.025673476979136467,
    -0.04320759326219559,
    -0.015547560527920723,
    -0.0051215896382927895,
    0.02285918965935707,
    0.004286960233002901,
    0.005411295685917139,
    0.0284463781863451,
    -0.008856728672981262,
    0.008429067209362984,
    -0.008546330034732819,
    0.00920161698013544,
    0.00439042691141367,
    -0.006532182451337576,
    -0.038241203874349594,
    -0.013133342377841473,
    0.033854227513074875,
    0.007877246476709843,
    0.003298855619505048,
    -0.0032005624379962683,
    0.016940908506512642,
    -0.02764623798429966,
    -0.015202672220766544,
    -0.0036282239016145468,
    -0.003379904432222247,
    0.02508026920258999,
    -0.00413520960137248,
    -0.01260911300778389,
    0.02641843631863594,
    -0.002503888448700309,
    0.01703747734427452,
    0.0469047948718071,
    0.013836914673447609,
    0.017892800271511078,
    0.007691007107496262,
    0.0018141119508072734,
    -0.018320461735129356,
    -0.005387153942137957,
    0.015478582121431828,
    -0.019589649513363838,
    0.021548615768551826,
    -0.0007893628790043294,
    0.03103993833065033,
    0.0006828786572441459,
    -0.008256623521447182,
    -0.01593383401632309,
    -0.0070184748619794846,
    0.030129432678222656,
    -0.0322815366089344,
    0.035785600543022156,
    -0.006839132867753506,
    0.01649945229291916,
    0.030019069090485573,
    0.010353543795645237,
    0.027853170409798622,
    -0.007684109266847372,
    0.01332648005336523,
    0.011160582304000854,
    0.02841878868639469,
    0.007628927007317543,
    -0.009477527812123299,
    -0.020210448652505875,
    -0.016292518004775047,
    -0.00023689508088864386,
    -0.00046430574730038643,
    -0.020707087591290474,
    0.010443214327096939,
    0.0028556743636727333,
    0.03763420134782791,
    -0.022348755970597267,
    0.02175554819405079,
    -0.034185320138931274,
    -0.009622381068766117,
    0.03413013741374016,
    0.015326831489801407,
    0.003483370877802372,
    -0.003948969766497612,
    0.01431975793093443,
    0.01349202636629343,
    0.013188525103032589,
    0.0006846030591987073,
    0.012836738489568233,
    -0.000603985448833555,
    0.023535171523690224,
    -0.008394578471779823,
    0.0197965819388628,
    0.029991477727890015,
    -0.023976627737283707,
    -0.0011364066740497947,
    0.010291463695466518,
    0.013429946266114712,
    0.018458416685461998,
    0.0018865384627133608,
    0.011602039448916912,
    0.03940002992749214,
    0.03247467428445816,
    0.04544246941804886,
    -0.013967972248792648,
    -0.009174026548862457,
    -0.03746865317225456,
    -0.013133342377841473,
    -0.02830842323601246,
    -0.011643425561487675,
    -0.025369975715875626,
    -0.008104872889816761,
    -0.015878653153777122,
    0.02038978971540928,
    0.014209394343197346,
    -0.0005673411069437861,
    0.010236281901597977,
    0.0064114718697965145,
    -0.007787575479596853,
    -0.015533764846622944,
    -0.029329292476177216,
    0.04538728669285774,
    0.014126621186733246,
    -0.0031557269394397736,
    -0.01852739416062832,
    -0.00953270960599184,
    0.008187646046280861,
    -0.01916198804974556,
    0.033357586711645126,
    0.003236775752156973,
    0.011767585761845112,
    -0.002036564750596881,
    0.0045594219118356705,
    -0.020348403602838516,
    -0.013167831115424633,
    0.03021220676600933,
    -0.005390602629631758,
    -0.014816396869719028,
    -0.012602214701473713,
    0.015961425378918648,
    -0.017520321533083916,
    0.0019641383551061153,
    0.006152805406600237,
    0.052450597286224365,
    0.01252633985131979,
    0.018872281536459923,
    -0.007697904482483864,
    0.015795879065990448,
    -0.023507580161094666,
    0.0072012655436992645,
    0.02601836621761322,
    0.00249871495179832,
    -0.02847396954894066,
    0.013561003841459751,
    0.02076227031648159,
    0.011105400510132313,
    -0.040144987404346466,
    0.038075655698776245,
    -0.013519617728888988,
    -0.004311102442443371,
    -0.03716515377163887,
    -0.016858134418725967,
    -0.017630685120821,
    0.03785492852330208,
    0.004045538604259491,
    0.006276965141296387,
    0.02359035238623619,
    -0.013864506036043167,
    -0.01036044117063284,
    -0.02239014208316803,
    0.005807917099446058,
    0.008911911398172379,
    0.01666499860584736,
    -0.014416326768696308,
    0.0035385529045015574,
    -0.0017218543216586113,
    0.0036799570079892874,
    0.03266781195998192,
    0.02399042248725891,
    -0.009505119174718857,
    0.011326128616929054,
    -0.007311630062758923,
    -0.02019665390253067,
    0.006701177917420864,
    0.006418369244784117,
    0.01743754744529724,
    0.0020693291444331408,
    0.00949822086840868,
    0.00106656679417938,
    0.01859637163579464,
    0.0012597041204571724,
    0.0010596689535304904,
    -0.014250780455768108,
    -0.01836184784770012,
    -0.0002291350974701345,
    0.001783072017133236,
    0.017451342195272446,
    -0.03366108983755112,
    0.044835466891527176,
    0.016057994216680527,
    0.01683054491877556,
    0.00031363271409645677,
    0.008180747739970684,
    0.04602188244462013,
    0.0007889317348599434,
    0.005504415836185217,
    0.01942410320043564,
    -0.020086288452148438,
    -0.018458416685461998,
    -0.017423752695322037,
    0.025011291727423668,
    0.0050802030600607395,
    0.010698432102799416,
    0.0036696104798465967,
    0.008229032158851624,
    -0.041607312858104706,
    -0.011167479678988457,
    0.019024033099412918,
    0.005756183993071318,
    0.023245465010404587,
    -0.018610168248414993,
    -0.007139185909181833,
    -0.03424049913883209,
    -0.0036765083204954863,
    -0.014036949723958969,
    -0.00855322740972042,
    0.004762906115502119,
    -0.003707548137754202,
    0.023466194048523903,
    -0.007387505378574133,
    0.007470278535038233,
    -0.007166776806116104,
    -0.00026642612647265196,
    -0.017189228907227516,
    -0.031591758131980896,
    -0.012222837656736374,
    0.0015261302469298244,
    0.011719301342964172,
    -0.006380431819707155,
    0.018651554360985756,
    0.011615834198892117,
    -0.005956219043582678,
    -0.028667107224464417,
    -0.0008285939111374319,
    -0.04042089730501175,
    -0.011808971874415874,
    -0.040476080030202866,
    -0.0027297900523990393,
    0.025232020765542984,
    0.004769803956151009,
    -0.0085670230910182,
    -0.008546330034732819,
    0.03702719882130623,
    0.004552524071186781,
    0.0017442720709368587,
    0.017258206382393837,
    -0.01402315404266119,
    0.009974166750907898,
    0.024142174050211906,
    0.005842406302690506,
    0.014430122449994087,
    0.008408374153077602,
    0.002957416232675314,
    0.0025866616051644087,
    -0.009760336019098759,
    0.015133694745600224,
    0.00042981692240573466,
    0.016858134418725967,
    -0.0015985567588359118,
    -0.005000879056751728,
    0.01899644173681736,
    -0.01633390597999096,
    0.01405764278024435,
    0.012629806064069271,
    -0.027563465759158134,
    -0.008677387610077858,
    0.01380932331085205,
    0.026239095255732536,
    0.00863600056618452,
    -0.013567902147769928,
    0.02132788673043251,
    -0.0027177189476788044,
    -0.02312130481004715,
    0.0064976937137544155,
    -0.002912580966949463,
    0.0014838814968243241,
    0.026556391268968582,
    0.0012847085017710924,
    0.021700365468859673,
    -0.0016045923111960292,
    -0.0163063146173954,
    -0.01302297879010439,
    0.022100435569882393,
    0.019906947389245033,
    0.002345239743590355,
    -0.011960722506046295,
    -0.00999485980719328,
    0.0028608476277440786,
    0.0046559907495975494,
    -0.0005694966530427337,
    -0.0050491634756326675,
    -0.011491674929857254,
    -0.00884983129799366,
    0.019313739612698555,
    0.012119371443986893,
    -0.007046065758913755,
    -0.009208515286445618,
    -0.01325750257819891,
    -0.02010008506476879,
    -0.039924256503582,
    0.007608233951032162,
    -0.004538728855550289,
    0.006042441353201866,
    -0.006466653663665056,
    0.011567550711333752,
    0.010539783164858818,
    -0.017630685120821,
    -0.006732217501848936,
    -0.007794473320245743,
    0.02941206656396389,
    0.007649620529264212,
    0.003704099217429757,
    0.04833953082561493,
    0.014499099925160408,
    -0.015478582121431828,
    0.025811433792114258,
    0.015851061791181564,
    -0.007601336110383272,
    -0.010974342934787273,
    -0.01843082532286644,
    0.023369625210762024,
    -0.02116234041750431,
    -0.00934647023677826,
    0.007325425278395414,
    0.00434904033318162,
    -0.00840147677809,
    -0.029687976464629173,
    0.010877774097025394,
    0.008194543421268463,
    0.01720302365720272,
    0.005169874057173729,
    -0.02123131789267063,
    -0.014526691287755966,
    -0.012836738489568233,
    -0.0008984337910078466,
    -0.0041386582888662815,
    0.02538377232849598,
    -0.036916833370923996,
    -0.009042968973517418,
    0.0289430171251297,
    0.00412486307322979,
    0.0012778107775375247,
    -0.020182857289910316,
    0.01956205815076828,
    0.0017658276483416557,
    0.012616010382771492,
    0.010815693996846676,
    0.0012691885931417346,
    0.0016313211526721716,
    -0.007435789797455072,
    -0.021410658955574036,
    -0.017589299008250237,
    -0.0042835115455091,
    0.008104872889816761,
    0.037606608122587204,
    0.006949497386813164,
    0.010222486220300198,
    0.004104169551283121,
    0.01923096552491188,
    0.011208866722881794,
    -0.0066253021359443665,
    0.021245112642645836,
    -0.030184615403413773,
    -0.0284463781863451,
    -0.017892800271511078,
    -0.050519224256277084,
    -0.03377145156264305,
    0.0032264292240142822,
    -0.018472211435437202,
    0.010988137684762478,
    0.025728659704327583,
    -0.022597074508666992,
    0.005421642679721117,
    0.0030143228359520435,
    0.03156416863203049,
    0.04982944577932358,
    0.00214175577275455,
    0.029825931414961815,
    0.03346795216202736,
    0.005325073841959238,
    0.0025435504503548145,
    -0.01358859520405531,
    -0.0024900927674025297,
    -0.0014718103921040893,
    0.02531479485332966,
    0.031950443983078,
    -0.008760160766541958,
    -0.005197465419769287,
    0.010339748114347458,
    -0.009587892331182957,
    -0.017616888508200645,
    -0.0018054897664114833,
    0.037082377821207047,
    -0.006718422286212444,
    0.010429419577121735,
    -0.02335582859814167,
    -0.00010422090417705476,
    0.0031264114659279585,
    0.007608233951032162,
    -0.021120954304933548,
    -0.005387153942137957,
    0.006080378778278828,
    -0.016954703256487846,
    -0.007366811856627464,
    0.014830192551016808,
    -0.00913263950496912,
    0.0257838424295187,
    0.023742103949189186,
    -0.0262804813683033,
    -0.0291085634380579,
    -0.035951144993305206,
    -0.022417733445763588,
    0.014264576137065887,
    0.0002360328653594479,
    0.024597426876425743,
    -0.00860151182860136,
    -0.0252872034907341,
    0.031591758131980896,
    -0.0032971312757581472,
    0.003186766989529133,
    -0.005021572113037109,
    -0.0028056656010448933,
    0.03782733902335167,
    -0.01852739416062832,
    -0.022583279758691788,
    0.0009156781597994268,
    -0.04108308255672455,
    0.005666512995958328,
    0.010491498745977879,
    -0.020941611379384995,
    -0.002978109521791339,
    -0.025990774855017662,
    -0.006101072300225496,
    0.017009885981678963,
    -0.01240907795727253,
    -0.003900685580447316,
    -0.014030052348971367,
    -0.013898994773626328,
    -0.004966390319168568,
    -0.026928870007395744,
    -0.006349391769617796,
    0.005621677730232477,
    -0.011691709980368614,
    -0.021479636430740356,
    -0.016044199466705322,
    -0.026970257982611656,
    0.015050921589136124,
    0.018113527446985245,
    0.019741401076316833,
    0.003500615246593952,
    0.04433882609009743,
    -0.0018520496087148786,
    0.007759984582662582,
    -0.006114867981523275,
    -0.002776350127533078,
    -0.019244762137532234,
    -0.01202970091253519,
    -0.012257326394319534,
    -0.002071053721010685,
    0.0064425114542245865,
    0.014995738863945007,
    -0.018141118809580803,
    -0.035013049840927124,
    -0.011174377985298634,
    0.014264576137065887,
    0.022169413045048714,
    -0.026101138442754745,
    -0.027453100308775902,
    0.012712579220533371,
    0.030294978991150856,
    -0.01760309375822544,
    -0.046932388097047806,
    0.03843434154987335,
    -0.003966214135289192,
    -0.004697377327829599,
    -0.006207987666130066,
    -0.00803589541465044,
    0.008691182360053062,
    -0.009739642962813377,
    0.007449585013091564,
    -0.029025791212916374,
    -0.020279426127672195,
    -0.025990774855017662,
    -0.017810026183724403,
    0.0059217303059995174,
    -0.008573920466005802,
    0.011691709980368614,
    -0.009656869806349277,
    0.001945169409736991,
    -0.021741751581430435,
    0.027425508946180344,
    0.02229357324540615,
    -0.003491993062198162,
    0.00393517455086112,
    0.029660385102033615,
    -0.004935350269079208,
    0.011208866722881794,
    0.0029729362577199936,
    -0.027522077783942223,
    -0.012126268818974495,
    0.0026349457912147045,
    -0.02625289000570774,
    -0.014981943182647228,
    -0.014250780455768108,
    0.022914372384548187,
    0.038075655698776245,
    -0.018610168248414993,
    -0.03802047669887543,
    -0.008863626979291439,
    -0.03344035893678665,
    -0.001007935730740428,
    -0.04232468083500862,
    0.021452046930789948,
    0.027591055259108543,
    0.026542596518993378,
    0.009022274985909462,
    0.020845042541623116,
    -0.022031458094716072,
    0.03771697357296944,
    -0.0322815366089344,
    0.004386977758258581,
    0.009774131700396538,
    -0.010905364528298378,
    -0.014747419394552708,
    0.007960019633173943,
    -0.03975871205329895,
    0.0009950024541467428,
    0.011243355460464954,
    0.02505267970263958,
    -0.003083300543949008,
    0.02941206656396389,
    0.010298362001776695,
    -0.010388032533228397,
    -0.0005690655088983476,
    -0.017147840932011604,
    -0.00982931349426508,
    0.01394038088619709,
    -0.011891745030879974,
    -0.03964834660291672,
    -0.0035971838515251875,
    -0.007884143851697445,
    0.020444972440600395,
    -0.021038180217146873,
    -0.025369975715875626,
    0.009739642962813377,
    -0.01982417330145836,
    0.0067908489145338535,
    -0.0194654893130064,
    -0.011429594829678535,
    -0.002127960091456771,
    0.020375994965434074,
    -0.003948969766497612,
    0.017879003658890724,
    0.0073392209596931934,
    0.047291070222854614,
    -0.008111770264804363,
    -0.00010050257697002962,
    -0.03070884570479393,
    0.018237687647342682,
    -0.03964834660291672,
    -0.010981240309774876,
    0.0201276745647192,
    -0.0249561108648777,
    -0.015147489495575428,
    -0.020638110116124153,
    0.013802425935864449,
    -0.002579763764515519,
    0.011050217784941196,
    -0.0008673937991261482,
    -0.00920161698013544,
    -0.0034023220650851727,
    0.01727200113236904,
    0.006104520987719297,
    -0.03150898590683937,
    0.0003119082539342344,
    -0.0023228221107274294,
    0.009670665487647057,
    0.008725671097636223,
    -0.040834762156009674,
    -0.02365932986140251,
    -0.028363605961203575,
    -0.0007945362012833357,
    -0.01247805543243885,
    -0.010263873264193535,
    -0.021038180217146873,
    0.01976899243891239,
    -0.0082359304651618,
    -0.0002823772083502263,
    0.017823822796344757,
    0.16808471083641052,
    0.02312130481004715,
    0.032585036009550095,
    0.013547208160161972,
    0.007125390227884054,
    -0.0017778986366465688,
    0.0037109970580786467,
    0.002203835640102625,
    -0.02172795683145523,
    0.017851414158940315,
    -0.002674608025699854,
    -0.004152453970164061,
    -0.02245911955833435,
    0.007891042158007622,
    0.016361495479941368,
    0.0044180178083479404,
    -0.009691358543932438,
    -0.038075655698776245,
    0.0006910697557032108,
    -0.0087325694039464,
    0.0017951431218534708,
    -0.009574096649885178,
    -0.01956205815076828,
    -0.0412486307322979,
    -0.010215588845312595,
    -0.012947103008627892,
    -0.031233076006174088,
    -0.0023348932154476643,
    0.025701068341732025,
    0.004393875598907471,
    -0.008773955516517162,
    -0.0021572757977992296,
    -0.013636879622936249,
    -0.016775362193584442,
    -0.04861544072628021,
    -0.02179693430662155,
    0.01889987289905548,
    0.0085670230910182,
    0.030681254342198372,
    0.023369625210762024,
    -0.032253943383693695,
    -0.052312642335891724,
    -0.031922850757837296,
    -0.029632793739438057,
    -0.011229559779167175,
    -0.0098982909694314,
    -0.014678441919386387,
    -0.018706735223531723,
    -0.030736437067389488,
    -0.0011303711216896772,
    -0.0257838424295187,
    -0.026639165356755257,
    -0.0048111905343830585,
    0.008263520896434784,
    -0.02102438546717167,
    -0.002936722943559289,
    0.014912965707480907,
    0.021465841680765152,
    0.010857081040740013,
    0.013167831115424633,
    -0.0047111730091273785,
    0.01264360174536705,
    0.007497869431972504,
    0.010298362001776695,
    -0.047594573348760605,
    0.021603796631097794,
    -0.0242939256131649,
    -0.0172995924949646,
    -0.011484777554869652,
    0.006763257551938295,
    -0.024528449401259422,
    -0.041276220232248306,
    -0.011891745030879974,
    0.012629806064069271,
    -0.01833425648510456,
    -0.03349554166197777,
    0.027935944497585297,
    -0.0009286114946007729,
    0.0008643760811537504,
    0.027135804295539856,
    -0.013595492579042912,
    0.016527041792869568,
    -0.012898818589746952,
    0.026625368744134903,
    -0.025369975715875626,
    -0.017947981134057045,
    0.02514924854040146,
    0.007208163384348154,
    -0.0023935241624712944,
    0.0006220921059139073,
    0.002671159105375409,
    -0.014761215075850487,
    -0.0020641558803617954,
    -0.01354031078517437,
    0.029053382575511932,
    0.04764975234866142,
    -0.012671192176640034,
    -0.006207987666130066,
    -0.014264576137065887,
    0.02106577157974243,
    -0.009725847281515598,
    0.06837064027786255,
    0.009512016549706459,
    -0.0005229367525316775,
    0.0035971838515251875,
    -0.007435789797455072,
    -0.017713457345962524,
    0.011746891774237156,
    0.020113879814743996,
    -0.03766179084777832,
    -0.006921906024217606,
    -0.0181273240596056,
    -0.006145907565951347,
    -0.004693928640335798,
    -0.0005673411069437861,
    0.023397214710712433,
    -0.007739291060715914,
    -0.0025021638721227646,
    -0.007011577021330595,
    0.002488368423655629,
    0.014678441919386387,
    -0.01970001496374607,
    -0.014995738863945007,
    0.007594438269734383,
    -0.00460080849006772,
    -0.007849655114114285,
    -0.014333553612232208,
    0.006421818397939205,
    0.008960195817053318,
    -0.003021220676600933,
    0.019920742139220238,
    -5.483183485921472e-05,
    0.033247221261262894,
    0.035978738218545914,
    -0.016720179468393326,
    -0.01603040285408497,
    0.004421466961503029,
    -0.027756601572036743,
    -0.0029349985998123884,
    0.02281780354678631,
    -0.026473619043827057,
    0.021645182743668556,
    0.005828610621392727,
    -0.026542596518993378,
    0.011277844198048115,
    -0.016885725781321526,
    0.011988313868641853,
    -0.013878300786018372,
    0.012712579220533371,
    0.011602039448916912,
    -0.011650323867797852,
    0.0008587716147303581,
    0.01345753762871027,
    -0.020610518753528595,
    -0.0030470872297883034,
    -0.010953648947179317,
    -0.017216818407177925,
    -0.00059579435037449,
    0.013878300786018372,
    0.011546856723725796,
    -0.03495786711573601,
    6.908542127348483e-05,
    -0.00893260445445776,
    0.007166776806116104,
    -0.032557446509599686,
    0.010132815688848495,
    -0.17360292375087738,
    0.004511137492954731,
    0.010546681471168995,
    -0.04455955699086189,
    -0.005369909107685089,
    -0.02043117769062519,
    0.0006065721390768886,
    0.011753790080547333,
    -0.014623260125517845,
    -0.02804630808532238,
    0.023066122084856033,
    0.022210801020264626,
    -0.016113176941871643,
    -0.03688924387097359,
    -0.003371282247826457,
    0.022472914308309555,
    -0.003304028883576393,
    -0.005169874057173729,
    0.0266115739941597,
    0.010712227784097195,
    0.05716866999864578,
    -0.047732528299093246,
    0.015257854014635086,
    0.009539607912302017,
    0.015851061791181564,
    -0.017547911033034325,
    -0.024873336777091026,
    -0.013485128991305828,
    -0.025494135916233063,
    0.006601160392165184,
    -0.009374061599373817,
    0.0402553491294384,
    0.03537173569202423,
    0.023562761023640633,
    0.012250429019331932,
    0.007759984582662582,
    0.022707439959049225,
    -0.017782434821128845,
    -0.01019489485770464,
    0.02248671092092991,
    0.03233671933412552,
    0.033219631761312485,
    0.018154915422201157,
    -0.025990774855017662,
    -0.017492730170488358,
    0.010263873264193535,
    0.007939326576888561,
    -0.03730310872197151,
    -0.00450079096481204,
    -0.035951144993305206,
    0.04933280870318413,
    -0.0003532948612701148,
    0.023769695311784744,
    0.002403870690613985,
    0.03523377701640129,
    -0.0022141821682453156,
    -0.00395931676030159,
    0.011974518187344074,
    0.0011364066740497947,
    -0.03302649408578873,
    -0.0033195489086210728,
    -0.026597777381539345,
    0.005125038791447878,
    -0.025369975715875626,
    -0.004738763906061649,
    -0.020072493702173233,
    -0.02365932986140251,
    0.011953825131058693,
    -0.018292870372533798,
    0.01982417330145836,
    0.019203374162316322,
    -0.01666499860584736,
    -0.012091780081391335,
    -0.014954352751374245,
    0.01906541921198368,
    0.009905189275741577,
    -0.04287650063633919,
    0.028032513335347176,
    0.019024033099412918,
    -0.041634902358055115,
    -0.021700365468859673,
    0.04265577346086502,
    0.0254527498036623,
    -0.006445960607379675,
    0.02010008506476879,
    -0.019879356026649475,
    -0.019010238349437714,
    -0.027839375659823418,
    -0.0009139537578448653,
    0.010243179276585579,
    0.016651201993227005,
    -0.025894206017255783,
    0.02691507525742054,
    -0.007594438269734383,
    0.005928628146648407,
    0.0005220745224505663,
    -0.010691533796489239,
    -0.015216467902064323,
    0.001412317156791687,
    -0.020955407992005348,
    0.005904485937207937,
    0.0013571351300925016,
    -0.00824972614645958,
    0.001737374346703291,
    0.026225298643112183,
    0.03390940651297569,
    -0.02368692122399807,
    0.010532885789871216,
    0.03473713994026184,
    -0.010967444628477097,
    -0.01342304889112711,
    0.012547032907605171,
    0.02891542762517929,
    0.030901983380317688,
    -0.018417030572891235,
    0.0345991849899292,
    0.0011045044520869851,
    0.0048111905343830585,
    -0.017672071233391762,
    -0.00999485980719328,
    0.018389439210295677,
    0.010001758113503456,
    -0.006101072300225496,
    0.011884847655892372,
    -0.0008540294365957379,
    -0.03942761942744255,
    -0.09623760730028152,
    -0.034185320138931274,
    -0.012850534170866013,
    0.009291288442909718,
    -0.007615131326019764,
    0.006018299143761396,
    -0.011629629880189896,
    0.01265739742666483,
    0.014347349293529987,
    -0.008994684554636478,
    0.0030643315985798836,
    0.003236775752156973,
    -0.003717894898727536,
    -0.00196758727543056,
    -0.0097327446565032,
    0.0002737550239544362,
    -0.025659682229161263,
    -0.003986907657235861,
    -0.030101843178272247,
    0.007642722688615322,
    -0.015726901590824127,
    0.015437196008861065,
    -0.002121062483638525,
    0.006228680722415447,
    0.019313739612698555,
    0.0009018826531246305,
    -0.034516412764787674,
    0.027259962633252144,
    0.01852739416062832,
    0.023107510060071945,
    -0.0014174905372783542,
    -0.030350161716341972,
    -0.021107157692313194,
    0.012912614271044731,
    -0.02182452566921711,
    -0.0006397676188498735,
    -0.016126971691846848,
    -0.03462677448987961,
    0.035978738218545914,
    -0.001387312775477767,
    0.01231250911951065,
    -0.010953648947179317,
    0.01370585709810257,
    0.0072012655436992645,
    0.00824972614645958,
    -0.0029850073624402285,
    -0.020307017490267754,
    0.02005869708955288,
    0.021548615768551826,
    -0.0329437218606472,
    -0.038544707000255585,
    0.0028936120215803385,
    -0.01819630153477192,
    0.0006522698095068336,
    0.015023330226540565,
    -0.005690655205398798,
    0.0006557186716236174,
    0.018058346584439278,
    -0.015313035808503628,
    -0.01916198804974556,
    0.00219176453538239,
    -0.006290760822594166,
    -0.023769695311784744,
    0.010870875790715218,
    -0.0080703841522336,
    -0.012181451544165611,
    -0.005169874057173729,
    0.011312332935631275,
    0.0326126292347908,
    -0.001983107067644596,
    0.007180572487413883,
    0.029660385102033615,
    -0.02050015516579151,
    0.021010588854551315,
    -0.03876543417572975,
    0.035482097417116165,
    0.004635297227650881,
    -0.012429771013557911,
    0.019617240875959396,
    0.0016020056791603565,
    -0.000512590107973665,
    0.008429067209362984,
    -0.015450991690158844,
    -0.00938095897436142,
    0.02441808395087719,
    0.017340978607535362,
    0.004169698338955641,
    0.018513599410653114,
    0.02321787364780903,
    -0.046794429421424866,
    0.021314090117812157,
    -0.016251131892204285,
    0.03915170952677727,
    0.0006966741639189422,
    -0.0032212557271122932,
    -0.0289430171251297,
    -0.0041800448670983315,
    -0.013319582678377628,
    -0.03446123003959656,
    -0.005111243110150099,
    -0.05192636698484421,
    0.0033557622227817774,
    -0.0762064978480339,
    0.010670840740203857,
    -0.006983986124396324,
    -0.027453100308775902,
    0.014264576137065887,
    -0.013478230684995651,
    0.0045180353336036205,
    -0.035482097417116165,
    0.016954703256487846,
    -0.004628399852663279,
    -0.03421290963888168,
    -0.039344847202301025,
    -0.00043003246537409723,
    0.02156241051852703,
    0.0006535631255246699,
    -0.014926761388778687,
    0.031233076006174088,
    -0.006797746289521456,
    0.06814990937709808,
    0.01239528227597475,
    0.00028970607672818005,
    -0.02245911955833435,
    0.014871579594910145,
    -0.005125038791447878,
    -0.012733272276818752,
    0.008711876347661018,
    -0.01840323396027088,
    0.0010450112167745829,
    -0.005552700255066156,
    -0.020251834765076637,
    0.00824972614645958,
    -0.00900158192962408,
    -0.0027228924445807934,
    0.014609464444220066,
    0.009077457711100578,
    0.005714797414839268,
    0.011781380511820316,
    0.006732217501848936,
    0.03650296851992607,
    0.0079048378393054,
    -0.01986556127667427,
    -0.006070032250136137,
    -0.00395931676030159,
    0.014347349293529987,
    0.025163043290376663,
    -0.0027884209994226694,
    -0.0018348052399232984,
    -0.01002934854477644,
    0.035151004791259766,
    0.0026608125772327185,
    0.02342480607330799,
    0.015257854014635086,
    -0.04182804003357887,
    -0.01913439668715,
    0.01294020563364029,
    -0.01415421161800623,
    0.030598482117056847,
    -0.01316093374043703,
    0.02076227031648159,
    -0.007697904482483864,
    0.007180572487413883,
    0.0038558500818908215,
    0.02245911955833435,
    0.005128487478941679,
    -0.00408347649499774,
    -0.017506524920463562,
    -0.04527692496776581,
    0.002783247735351324,
    0.006921906024217606,
    -0.004945696797221899,
    -0.022997144609689713,
    -0.027701420709490776,
    0.02019665390253067,
    -0.0008566160686314106,
    0.038406748324632645,
    -0.01876191794872284,
    0.013650675304234028,
    0.009456834755837917,
    -0.02092781662940979,
    0.01389209646731615,
    0.019341330975294113,
    0.0003621326177380979,
    -0.012705680914223194,
    0.007794473320245743,
    0.025742454454302788,
    0.00946373213082552,
    -0.003112616017460823,
    -0.004311102442443371,
    -0.004238675814121962,
    0.012098678387701511,
    0.014443918131291866,
    -0.0004474924353417009,
    -0.0018779162783175707,
    0.017906595021486282,
    0.0019313739612698555,
    0.0011898642405867577,
    -0.015782084316015244,
    -0.013485128991305828,
    0.015713106840848923,
    -0.002503888448700309,
    0.013629981316626072,
    -0.0036385704297572374,
    0.005425091367214918,
    -0.02208664081990719,
    -0.016278723254799843,
    0.0046146041713654995,
    0.0009070559754036367,
    -0.026211503893136978,
    -0.021107157692313194,
    0.021934889256954193,
    -0.0008553227526135743,
    -0.00966376718133688,
    -0.010484601370990276,
    0.010305259376764297,
    -0.020375994965434074,
    -0.0012907440541312099,
    0.014706033281981945,
    0.021341681480407715,
    -0.009477527812123299,
    0.026942666620016098,
    -0.015106103383004665,
    0.0006294209742918611,
    0.029522430151700974,
    -0.010877774097025394,
    0.003071229439228773,
    0.003224704647436738,
    0.034350864589214325,
    -0.0025763148441910744,
    0.008208339102566242,
    -0.0031195138581097126,
    -0.018803304061293602,
    0.0072012655436992645,
    -0.010905364528298378,
    -0.013202320784330368,
    -0.010263873264193535,
    -0.0026987502351403236,
    -0.008504942990839481,
    -0.011974518187344074,
    -0.016209745779633522,
    0.07063310593366623,
    0.027108212932944298,
    -0.004552524071186781,
    0.0009027448832057416,
    -0.011464083567261696,
    0.021810729056596756,
    0.029660385102033615,
    -0.004904310218989849,
    0.012098678387701511,
    -0.012402179650962353,
    0.00868428498506546,
    0.00791863352060318,
    -0.01202970091253519,
    -0.020817451179027557,
    -0.0088981157168746,
    -0.004838781431317329,
    -0.007546153850853443,
    0.044697511941194534,
    -0.015533764846622944,
    0.01387140341103077,
    0.006783951073884964,
    0.035951144993305206,
    -0.0024642262142151594,
    -0.020169062539935112,
    -0.023962832987308502,
    0.009229208342730999,
    0.04086235538125038,
    0.001841702964156866,
    -0.023507580161094666,
    -0.05532006919384003,
    0.005069856531918049,
    0.026570187881588936,
    -0.020403586328029633,
    -0.008925707079470158,
    -0.0021314090117812157,
    0.013650675304234028,
    -0.021341681480407715,
    -0.017741048708558083,
    0.00401794770732522,
    0.0006048476789146662,
    -0.018582576885819435,
    -0.001654601190239191,
    -0.0169684998691082,
    -0.038710251450538635,
    0.011595141142606735,
    -0.04003462195396423,
    0.005911383777856827,
    0.01322301384061575,
    -0.0297707486897707
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "about\n=====\n\nthis module is intended to have a similar interface as the python\nstruct module, but working on bits instead of primitive data types\n(char, int, ...).\n\nproject homepage: https://github.com/eerimoq/bitstruct\n\ndocumentation: https://bitstruct.readthedocs.io\n\ninstallation\n============\n\n.. code-block:: python\n\n   pip install bitstruct\n\nperformance\n===========\n\nparts of this package has been re-implemented in c for faster pack and\nunpack operations. there are two independent c implementations;\n`bitstruct.c`, which is part of this package, and the standalone\npackage `cbitstruct`_. these implementations are only available in\ncpython 3, and must be explicitly imported. by default the pure python\nimplementation is used.\n\nto use `bitstruct.c`, do ``import bitstruct.c as bitstruct``.\n\nto use `cbitstruct`_, do ``import cbitstruct as bitstruct``.\n\n`bitstruct.c` has a few limitations compared to the pure python\nimplementation:\n\n- integers and booleans must be 64 bits or less.\n\n- text and raw must be a multiple of 8 bits.\n\n- bit endianness and byte order are not yet supported.\n\n- ``byteswap()`` can only swap 1, 2, 4 and 8 bytes.\n\nsee `cbitstruct`_ for its limitations.\n\nmicropython\n===========\n\nthe c implementation has been ported to `micropython`_. see\n`bitstruct-micropython`_ for more details.\n\nexample usage\n=============\n\na basic example of `packing`_ and `unpacking`_ four integers using the\nformat string ``'u1u3u4s16'``:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> pack('u1u3u4s16', 1, 2, 3, -4)\n    b'\\xa3\\xff\\xfc'\n    >>> unpack('u1u3u4s16', b'\\xa3\\xff\\xfc')\n    (1, 2, 3, -4)\n    >>> calcsize('u1u3u4s16')\n    24\n\nan example `compiling`_ the format string once, and use it to `pack`_\nand `unpack`_ data:\n\n.. code-block:: python\n\n    >>> import bitstruct\n    >>> cf = bitstruct.compile('u1u3u4s16')\n    >>> cf.pack(1, 2, 3, -4)\n    b'\\xa3\\xff\\xfc'\n    >>> cf.unpack(b'\\xa3\\xff\\xfc')\n    (1, 2, 3, -4)\n\nuse the `pack into`_ and `unpack from`_ functions to pack/unpack\nvalues at a bit offset into the data, in this example the bit offset\nis 5:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> data = bytearray(b'\\x00\\x00\\x00\\x00')\n    >>> pack_into('u1u3u4s16', data, 5, 1, 2, 3, -4)\n    >>> data\n    bytearray(b'\\x05\\x1f\\xff\\xe0')\n    >>> unpack_from('u1u3u4s16', data, 5)\n    (1, 2, 3, -4)\n\nthe unpacked values can be named by assigning them to variables or by\nwrapping the result in a named tuple:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> from collections import namedtuple\n    >>> myname = namedtuple('myname', ['a', 'b', 'c', 'd'])\n    >>> unpacked = unpack('u1u3u4s16', b'\\xa3\\xff\\xfc')\n    >>> myname = myname(*unpacked)\n    >>> myname\n    myname(a=1, b=2, c=3, d=-4)\n    >>> myname.c\n    3\n\nuse the `pack_dict`_ and `unpack_dict`_ functions to pack/unpack\nvalues in dictionaries:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> names = ['a', 'b', 'c', 'd']\n    >>> pack_dict('u1u3u4s16', names, {'a': 1, 'b': 2, 'c': 3, 'd': -4})\n    b'\\xa3\\xff\\xfc'\n    >>> unpack_dict('u1u3u4s16', names, b'\\xa3\\xff\\xfc')\n    {'a': 1, 'b': 2, 'c': 3, 'd': -4}\n\nan example of `packing`_ and `unpacking`_ an unsigned integer, a\nsigned integer, a float, a boolean, a byte string and a string:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> pack('u5s5f32b1r13t40', 1, -1, 3.75, true, b'\\xff\\xff', 'hello')\n    b'\\x0f\\xd0\\x1c\\x00\\x00?\\xffhello'\n    >>> unpack('u5s5f32b1r13t40', b'\\x0f\\xd0\\x1c\\x00\\x00?\\xffhello')\n    (1, -1, 3.75, true, b'\\xff\\xf8', 'hello')\n    >>> calcsize('u5s5f32b1r13t40')\n    96\n\nthe same format string and values as in the previous example, but\nusing lsb (least significant bit) first instead of the default msb\n(most significant bit) first:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> pack('<u5s5f32b1r13t40', 1, -1, 3.75, true, b'\\xff\\xff', 'hello')\n    b'\\x87\\xc0\\x00\\x03\\x80\\xbf\\xff\\xf666\\xa6\\x16'\n    >>> unpack('<u5s5f32b1r13t40', b'\\x87\\xc0\\x00\\x03\\x80\\xbf\\xff\\xf666\\xa6\\x16')\n    (1, -1, 3.75, true, b'\\xff\\xf8', 'hello')\n    >>> calcsize('<u5s5f32b1r13t40')\n    96\n\nan example of `unpacking`_ values from a hexstring and a binary file:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> from binascii import unhexlify\n    >>> unpack('s17s13r24', unhexlify('0123456789abcdef'))\n    (582, -3751, b'\\xe2j\\xf3')\n    >>> with open(\"test.bin\", \"rb\") as fin:\n    ...     unpack('s17s13r24', fin.read(8))\n    ...\n    ...\n    (582, -3751, b'\\xe2j\\xf3')\n\nchange endianness of the data with `byteswap`_, and then unpack the\nvalues:\n\n.. code-block:: python\n\n    >>> from bitstruct import *\n    >>> packed = pack('u1u3u4s16', 1, 2, 3, 1)\n    >>> unpack('u1u3u4s16', byteswap('12', packed))\n    (1, 2, 3, 256)\n\na basic example of `packing`_ and `unpacking`_ four integers using the\nformat string ``'u1u3u4s16'`` using the c implementation:\n\n.. code-block:: python\n\n    >>> from bitstruct.c import *\n    >>> pack('u1u3u4s16', 1, 2, 3, -4)\n    b'\\xa3\\xff\\xfc'\n    >>> unpack('u1u3u4s16', b'\\xa3\\xff\\xfc')\n    (1, 2, 3, -4)\n\ncontributing\n============\n\n#. fork the repository.\n\n#. install prerequisites.\n\n   .. code-block:: text\n\n      pip install -r requirements.txt\n\n#. implement the new feature or bug fix.\n\n#. implement test case(s) to ensure that future changes do not break\n   legacy.\n\n#. run the tests.\n\n   .. code-block:: text\n\n      make test\n\n#. create a pull request.\n\n.. _packing: http://bitstruct.readthedocs.io/en/latest/#bitstruct.pack\n\n.. _unpacking: http://bitstruct.readthedocs.io/en/latest/#bitstruct.unpack\n\n.. _pack: http://bitstruct.readthedocs.io/en/latest/#bitstruct.compiledformat.pack\n\n.. _unpack: http://bitstruct.readthedocs.io/en/latest/#bitstruct.compiledformat.unpack\n\n.. _pack into: http://bitstruct.readthedocs.io/en/latest/#bitstruct.pack_into\n\n.. _unpack from: http://bitstruct.readthedocs.io/en/latest/#bitstruct.unpack_from\n\n.. _pack_dict: http://bitstruct.readthedocs.io/en/latest/#bitstruct.pack_dict\n\n.. _unpack_dict: http://bitstruct.readthedocs.io/en/latest/#bitstruct.unpack_dict\n\n.. _byteswap: http://bitstruct.readthedocs.io/en/latest/#bitstruct.byteswap\n\n.. _compiling: http://bitstruct.readthedocs.io/en/latest/#bitstruct.compile\n\n.. _cbitstruct: https://github.com/qchateau/cbitstruct\n\n.. _micropython: https://github.com/micropython/micropython\n\n.. _bitstruct-micropython: https://github.com/peterzuger/bitstruct-micropython\n",
  "docs_url": null,
  "keywords": "bit field,bit parsing,bit unpack,bit pack",
  "license": "mit",
  "name": "bitstruct",
  "package_url": "https://pypi.org/project/bitstruct/",
  "project_url": "https://pypi.org/project/bitstruct/",
  "project_urls": {
    "Documentation": "https://bitstruct.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/eerimoq/bitstruct",
    "Issues": "https://github.com/eerimoq/bitstruct/issues",
    "Source": "https://github.com/eerimoq/bitstruct"
  },
  "release_url": "https://pypi.org/project/bitstruct/8.19.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "this module performs conversions between python values and c bit field structs represented as python byte strings.",
  "version": "8.19.0",
  "releases": [],
  "developers": [
    "erik.moqvist@gmail.com",
    "ilya_petukhov"
  ],
  "kwds": "_bitstruct bitstruct _unpack_dict unpack_dict binary",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bitstruct",
  "homepage": "",
  "release_count": 64,
  "dependency_ids": []
}
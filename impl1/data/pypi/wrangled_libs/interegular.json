{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# interegular\r\n***regex intersection checker***\r\n\r\na library to check a subset of python regexes for intersections.\r\nbased on [grennery](https://github.com/qntm/greenery) by [@qntm](https://github.com/qntm). adapted for [lark-parser](https://github.com/lark-parser/lark).\r\n\r\nthe primary difference with `grennery` library is that `interegular` is focused on speed and compatibility with python re syntax, whereas grennery has a way to reconstruct a regex from a fsm, which `interegular` lacks.\r\n\r\n\r\n## interface\r\n\r\n| function | usage |\r\n| -------- | ----- |\r\n| `compare_regexes(*regexes: str)` | takes a series of regexes as strings and returns a generator of all intersections as `(str, str)`|\r\n| `parse_pattern(regex: str)` | parses a regex as string to a `pattern` object|\r\n| `interegular.compare_patterns(*patterns: pattern)` | takes a series of regexes as patterns and returns a generator of all intersections as `(pattern, pattern)`|\r\n| `pattern` | a class representing a parsed regex (intermediate representation)|\r\n| `reflags` | a enum representing the flags a regex can have |\r\n| `fsm` | a class representing a fully parsed regex. (has many useful members) |\r\n| `pattern.with_flags(added: reflags, removed: reflags)` | a function to change the flags that are applied to a regex|\r\n| `pattern.to_fsm() -> fsm` | a function to create a `fsm` object from the pattern |\r\n| `comparator` | a class to compare a group of patterns |\r\n\r\n## what is supported?\r\n\r\nmost normal python-regex syntax is support. but because of the backend that is used (final-state-machines), some things can not be implemented. this includes:\r\n\r\n- backwards references (`\\1`, `(?p=open)`)\r\n- conditional matching (`(?(1)a|b)`)\r\n- some cases of lookaheads/lookbacks (you gotta try out which work and which don't)\r\n  - a word of warning: this is currently not correctly handled, and some things might parse, but not work correctly. i am currently working on this.\r\n\r\n\r\nsome things are simply not implemented and will implemented in the future:\r\n- some flags (progress: `ims` from `ailmsux`)\r\n- some cases of lookaheads/lookbacks (you gotta try out which work and which don't)\r\n\r\n\r\n## todo\r\n\r\n- docs\r\n- more tests\r\n- checks that the syntax is correctly handled.\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "interegular",
  "package_url": "https://pypi.org/project/interegular/",
  "project_url": "https://pypi.org/project/interegular/",
  "project_urls": {
    "Download": "https://github.com/MegaIng/interegular/tarball/master",
    "Homepage": "https://github.com/MegaIng/regex_intersections"
  },
  "release_url": "https://pypi.org/project/interegular/0.3.2/",
  "requires_dist": [
    "dataclasses ; python_version < \"3.7\""
  ],
  "requires_python": ">=3.6",
  "summary": "a regex intersection checker",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "megaing",
    "trampchamp@hotmail.de"
  ],
  "kwds": "compare_regexes regexes parse_pattern regex parse",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_interegular",
  "homepage": "https://github.com/megaing/regex_intersections",
  "release_count": 13,
  "dependency_ids": [
    "pypi_dataclasses"
  ]
}
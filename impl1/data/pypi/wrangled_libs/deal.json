{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: plugins",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "# ![deal](https://raw.githubusercontent.com/life4/deal/master/logo.png)\n\n[![build status](https://cloud.drone.io/api/badges/life4/deal/status.svg)](https://cloud.drone.io/life4/deal)\n[![pypi version](https://img.shields.io/pypi/v/deal.svg)](https://pypi.python.org/pypi/deal)\n[![development status](https://img.shields.io/pypi/status/deal.svg)](https://pypi.python.org/pypi/deal)\n\na python library for [design by contract](https://en.wikipedia.org/wiki/design_by_contract) (dbc) and checking values, exceptions, and side-effects. in a nutshell, deal empowers you to write bug-free code. by adding a few decorators to your code, you get for free tests, static analysis, formal verification, and much more. read [intro](https://deal.readthedocs.io/basic/intro.html) to get started.\n\n## features\n\n* [classic dbc: precondition, postcondition, invariant.][values]\n* [tracking exceptions and side-effects.][exceptions]\n* [property-based testing.][tests]\n* [static checker.][linter]\n* integration with pytest, flake8, sphinx, and hypothesis.\n* type annotations support.\n* [external validators support.][validators]\n* [contracts for importing modules.][module_load]\n* [can be enabled or disabled on production.][runtime]\n* [colorless][colorless]: annotate only what you want. hence, easy integration into an existing project.\n* colorful: syntax highlighting for every piece of code in every command.\n* [memory leaks detection][leaks]: deal makes sure that pure functions don't leave unexpected objects in the memory.\n* dry: test discovery, error messages generation.\n* partial execution: linter executes contracts to statically check possible values.\n* [formal verification][verification]: prove that your code works for all input (or find out when it doesn't).\n* zero-dependency runtime: there are some dependencies for analysis tools, but nothing of it is required on the production.\n* fast: each code change is benchmarked and profiled.\n* reliable: the library has 100% test coverage, partially verified, and runs on production by multiple companies since 2018.\n\n[values]: https://deal.readthedocs.io/basic/values.html\n[exceptions]: https://deal.readthedocs.io/basic/exceptions.html\n[tests]: https://deal.readthedocs.io/basic/tests.html\n[linter]: https://deal.readthedocs.io/basic/linter.html\n[validators]: https://deal.readthedocs.io/details/contracts.html#external-validators\n[module_load]: https://deal.readthedocs.io/details/module_load.html\n[runtime]: https://deal.readthedocs.io/basic/runtime.html\n[colorless]: http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\n[leaks]: https://deal.readthedocs.io/basic/tests.html#memory-leaks\n[verification]: https://deal.readthedocs.io/basic/verification.html\n\n## deal in 30 seconds\n\n```python\n# the result is always non-negative\n@deal.post(lambda result: result >= 0)\n# the function has no side-effects\n@deal.pure\ndef count(items: list[str], item: str) -> int:\n    return items.count(item)\n\n# generate test function\ntest_count = deal.cases(count)\n```\n\nnow we can:\n\n* run `python3 -m deal lint` or `flake8` to statically check errors.\n* run `python3 -m deal test` or `pytest` to generate and run tests.\n* just use the function in the project and check errors in runtime.\n\nread more in the [documentation](https://deal.readthedocs.io/).\n\n## installation\n\n```bash\npython3 -m pip install --user 'deal[all]'\n```\n\n## contributing\n\ncontributions are welcome! a few ideas what you can contribute:\n\n* add new checks for the linter.\n* improve documentation.\n* add more tests.\n* improve performance.\n* found a bug? fix it!\n* made an article about deal? great! let's add it into the `readme.md`.\n* don't have time to code? no worries! just tell your friends and subscribers about the project. more users -> more contributors -> more cool features.\n\nto run tests locally, all you need is [task](http://taskfile.dev/). run `task all` to run all code formatters, linters, and tests.\n\nthank you :heart:\n",
  "docs_url": null,
  "keywords": "deal,contracts,pre,post,invariant,decorators,validation,pythonic,functional",
  "license": "mit",
  "name": "deal",
  "package_url": "https://pypi.org/project/deal/",
  "project_url": "https://pypi.org/project/deal/",
  "project_urls": {
    "Homepage": "https://github.com/life4/deal"
  },
  "release_url": "https://pypi.org/project/deal/4.24.3/",
  "requires_dist": [
    "astroid>=2.11.0 ; extra == \"all\"",
    "deal-solver>=0.1.2 ; extra == \"all\"",
    "hypothesis ; extra == \"all\"",
    "pygments ; extra == \"all\"",
    "typeguard>=3.0.0 ; extra == \"all\"",
    "vaa>=0.2.1 ; extra == \"all\"",
    "m2r2 ; extra == \"docs\"",
    "myst-parser ; extra == \"docs\"",
    "sphinx==3.5.* ; extra == \"docs\"",
    "sphinx-rtd-theme==0.5.* ; extra == \"docs\"",
    "astroid>=2.11.0 ; extra == \"integration\"",
    "deal-solver>=0.1.2 ; extra == \"integration\"",
    "hypothesis ; extra == \"integration\"",
    "pygments ; extra == \"integration\"",
    "typeguard<4.0.0 ; extra == \"integration\"",
    "vaa>=0.2.1 ; extra == \"integration\"",
    "sphinx>=4.5.0 ; extra == \"integration\"",
    "flake8 ; extra == \"integration\"",
    "marshmallow ; extra == \"integration\"",
    "flake8 ; extra == \"lint\"",
    "flake8-commas ; extra == \"lint\"",
    "flake8-quotes ; extra == \"lint\"",
    "mypy>=0.900 ; extra == \"lint\"",
    "mypy_test>=0.1.1 ; extra == \"lint\"",
    "isort ; extra == \"lint\"",
    "unify ; extra == \"lint\"",
    "deal-solver>=0.1.2 ; extra == \"lint\"",
    "hypothesis ; extra == \"lint\"",
    "pygments ; extra == \"lint\"",
    "typeguard<4.0.0 ; extra == \"lint\"",
    "coverage[toml] ; extra == \"test\"",
    "coverage-conditional-plugin ; extra == \"test\"",
    "docstring-parser ; extra == \"test\"",
    "pytest-cov ; extra == \"test\"",
    "pytest ; extra == \"test\"",
    "urllib3 ; extra == \"test\""
  ],
  "requires_python": ">=3.8",
  "summary": "**deal** is a python library for [design by contract][wiki] (dbc) programming.",
  "version": "4.24.3",
  "releases": [],
  "developers": [
    "gram",
    "gram@orsinium.dev"
  ],
  "kwds": "contracts pythonic contract design_by_contract documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_deal",
  "homepage": "https://github.com/life4/deal",
  "release_count": 65,
  "dependency_ids": [
    "pypi_astroid",
    "pypi_coverage",
    "pypi_coverage_conditional_plugin",
    "pypi_deal_solver",
    "pypi_docstring_parser",
    "pypi_flake8",
    "pypi_flake8_commas",
    "pypi_flake8_quotes",
    "pypi_hypothesis",
    "pypi_isort",
    "pypi_m2r2",
    "pypi_marshmallow",
    "pypi_mypy",
    "pypi_mypy_test",
    "pypi_myst_parser",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_typeguard",
    "pypi_unify",
    "pypi_urllib3",
    "pypi_vaa"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: c++",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: gis",
    "topic :: scientific/engineering :: information analysis"
  ],
  "description": "\ngdal/ogr in python\n==================\n\nthis python package and extensions are a number of tools for programming and\nmanipulating the gdal_ geospatial data abstraction library.\n\nthe gdal project maintains swig generated python\nbindings for gdal/ogr. generally speaking the classes and methods mostly\nmatch those of the gdal and ogr c++ classes. there is no python specific\nreference documentation, but the https://gdal.org/api/python_bindings.html#tutorials includes python examples.\n\ndependencies\n------------\n\n * libgdal (3.8.2 or greater) and header files (gdal-devel)\n * numpy (1.0.0 or greater) and header files (numpy-devel) (not explicitly\n   required, but many examples and utilities will not work without it)\n\ninstallation\n------------\n\nconda\n~~~~~\n\ngdal can be quite complex to build and install, particularly on windows and macos.\npre built binaries are provided for the conda system:\n\nhttps://docs.conda.io/en/latest/\n\nby the conda-forge project:\n\nhttps://conda-forge.org/\n\nonce you have anaconda or miniconda installed, you should be able to install gdal with:\n\n``conda install -c conda-forge gdal``\n\nunix\n~~~~\n\nthe gdal python bindings requires setuptools.\n\npip\n~~~\n\ngdal can be installed from the `python package index <https://pypi.org/project/gdal>`__:\n\n::\n\n    pip install gdal\n\nit will be necessary to have libgdal and its development headers installed\nif pip is expected to do a source build because no wheel is available\nfor your specified platform and python version.\n\nto install the version of the python bindings matching your native gdal library:\n\n::\n\n    pip install gdal==\"$(gdal-config --version).*\"\n\nbuilding as part of the gdal library source tree\n------------------------------------------------\n\npython bindings are generated by default when building gdal from source.\nfor more detail, see `python bindings options <https://gdal.org/development/building_from_source.html#building-python-bindings>`__\n\nthe gdal python package is built using `swig <https://www.swig.org>`__. the currently supported version\nis swig >= 4\n\nusage\n-----\n\nimports\n~~~~~~~\n\nthere are five major modules that are included with the gdal_ python bindings.::\n\n  >>> from osgeo import gdal\n  >>> from osgeo import ogr\n  >>> from osgeo import osr\n  >>> from osgeo import gdal_array\n  >>> from osgeo import gdalconst\n\napi\n~~~\n\napi documentation is available at https://gdal.org/api/python/osgeo.html\n\nnumpy\n-----\n\none advanced feature of the gdal python bindings not found in the other\nlanguage bindings is integration with the python numerical array\nfacilities. the gdal.dataset.readasarray() method can be used to read raster\ndata as numerical arrays, ready to use with the python numerical array\ncapabilities.\n\ntutorials\n---------\n\nsee https://gdal.org/api/python_bindings.html#tutorials\n\ngotchas\n-------\n\nalthough gdal's and ogr's python bindings provide a fairly \"pythonic\" wrapper around the underlying c++ code, there are several ways in which the python bindings differ from typical python libraries.\nthese differences can catch python programmers by surprise and lead to unexpected results. these differences result from the complexity of developing a large, long-lived library while continuing to maintain\nbackward compatibility. they are being addressed over time, but until they are all gone, please review this list of https://gdal.org/api/python_gotchas.html\n\nexamples\n--------\n\n* an assortment of other samples are available in the `python github samples directory <https://github.com/osgeo/gdal/tree/master/swig/python/gdal-utils/osgeo_utils/samples>`__\n  with some description in the https://gdal.org/api/python_bindings.html#examples.\n* several `gdal utilities <https://github.com/osgeo/gdal/tree/master/swig/python/gdal-utils/osgeo_utils/>`__\n  are implemented in python and can be useful examples.\n* the majority of gdal regression tests are written in python. they are available at\n  `https://github.com/osgeo/gdal/tree/master/autotest <https://github.com/osgeo/gdal/tree/master/autotest>`__\n\none example of gdal/numpy integration is found in the `val_repl.py <https://github.com/osgeo/gdal/tree/master/swig/python/gdal-utils/osgeo_utils/samples/val_repl.py>`__ script.\n\n.. note::\n   **performance notes**\n\n   readasarray expects to make an entire copy of a raster band or dataset\n   unless the data are explicitly subsetted as part of the function call. for\n   large data, this approach is expected to be prohibitively memory intensive.\n\n\n.. _gdal: https://gdal.org\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "gdal",
  "package_url": "https://pypi.org/project/GDAL/",
  "project_url": "https://pypi.org/project/GDAL/",
  "project_urls": {
    "Homepage": "http://www.gdal.org"
  },
  "release_url": "https://pypi.org/project/GDAL/3.8.2/",
  "requires_dist": [
    "numpy>1.0.0; extra == \"numpy\""
  ],
  "requires_python": ">=3.6.0",
  "summary": "gdal: geospatial data abstraction library",
  "version": "3.8.2",
  "releases": [],
  "developers": [
    "frank_warmerdam",
    "hobu.inc@gmail.com",
    "howard_butler",
    "warmerdam@pobox.com"
  ],
  "kwds": "gdalconst gdal gdal_ libgdal _gdal",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gdal",
  "homepage": "http://www.gdal.org",
  "release_count": 72,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
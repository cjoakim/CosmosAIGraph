{
  "classifiers": [],
  "description": "python avro json serializer\n================\n\n[![pypi version](https://badge.fury.io/py/avro_json_serializer.png)](http://badge.fury.io/py/avro_json_serializer)\n\n[avrojsonserializer](avro_json_serializer/__init__.py#l28) serializes data into a json format using avro schema.\n\nwhy do we need serializer instead of just dumping into json?\n* validation that your data matches the schema\n* serialization of unions (see [simpleexample](#simple-example) below)\n* some avro json deserializers expect fields in json in the same order as in the schema\n* serialization of `bytes` and `fixed` fields\n\nbinary distribution can be found on [pypi](https://pypi.python.org/pypi/avro_json_serializer/).\n\n## simple example:\n\n```python\n\nschema_dict = {\n    \"namespace\": \"example.avro\",\n          \"type\": \"record\",\n          \"name\": \"user\",\n          \"fields\": [\n              {\"name\": \"name\", \"type\": \"string\"},\n              {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n              {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n          ]\n}\navro_schema = avro.schema.make_avsc_object(schema_dict, avro.schema.names())\nserializer = avrojsonserializer(avro_schema)\n\nself.assertequals(serializer.to_json({\"name\": \"alyssa\", \"favorite_number\": 256}),\n                  \"\"\"{\"name\":\"alyssa\",\"favorite_number\":{\"int\":256},\"favorite_color\":null}\"\"\")\n\nself.assertequals(serializer.to_json({\"name\": \"ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}),\n                  \"\"\"{\"name\":\"ben\",\"favorite_number\":{\"int\":7},\"favorite_color\":{\"string\":\"red\"}}\"\"\")\n\nself.assertequals(serializer.to_json({\"name\": \"lion\"}),\n                  \"\"\"{\"name\":\"lion\",\"favorite_number\":null,\"favorite_color\":null}\"\"\")\n```\n\n## another example:\n\n```python\n\n# need to serialize this data\ndata = {\n    \"ffloat\": 1.0,\n    \"funion_null\": none,\n    \"flong\": 1l,\n    \"fdouble\": 2.0,\n    \"ffixed\": \"1234567890123456\",\n    \"fint\": 1,\n    \"fstring\": \"hi there\",\n    \"frec\": {\n        \"subfint\": 2\n    }\n}\n\n# according to this schema:\n\nschema_dict = {\n    \"fields\": [{\"name\": \"fint\", \"type\": \"int\"},\n            {\"name\": \"flong\", \"type\": \"long\"},\n            {\"name\": \"fstring\", \"type\": \"string\"},\n            {\"name\": \"ffixed\",\n             \"size\": 16,\n             \"type\": {\"name\": \"fixed_16\", \"size\": 16, \"type\": \"fixed\"}},\n            {\"name\": \"frec\",\n             \"type\": {\"fields\": [{\"name\": \"subfint\", \"type\": \"int\"}],\n                      \"name\": \"rec\",\n                      \"type\": \"record\"}},\n            {\"name\": \"funion_null\", \"type\": [\"int\", \"null\"]},\n            {\"name\": \"ffloat\", \"type\": \"float\"},\n            {\"name\": \"fdouble\", \"type\": \"double\"}],\n    \"name\": \"all_field\",\n    \"namespace\": \"com.some.thing\",\n    \"type\": \"record\"\n}\n\navro_schema = avro.schema.make_avsc_object(schema_dict, avro.schema.names())\n\nserializer = avrojsonserializer(avro_schema)\njson_str = serializer.to_json(data)\n\nprint json_str\n> {\"fint\":1,\"flong\":1,\"fstring\":\"hi there\",\"ffixed\":\"1234567890123456\",\"frec\":{\"subfint\":2},\"funion_null\":null,\"ffloat\":1.0,\"fdouble\":2.0}\n\n```\n\nsee [tests](avro_json_serializer/test/test_avro_json_serializer.py) for more examples.\n\n\n## how to run tests\n```bash\npython-avro-json-serializer$ virtualenv venv\npython-avro-json-serializer$ source venv/bin/activate\n(venv)python-avro-json-serializer$ pip install tox\n(venv)python-avro-json-serializer$ tox\nglob sdist-make: /users/bngo/python-avro-json-serializer/setup.py\npy27 create: /users/bngo/python-avro-json-serializer/.tox/py27\npy27 installdeps: nose, -rrequirements.txt\npy27 inst: /users/bngo/python-avro-json-serializer/.tox/dist/avro_json_serializer-0.4.1.zip\npy27 installed: avro==1.7.6,avro-json-serializer==0.4.1,nose==1.3.7,simplejson==3.8.2,six==1.10.0\npy27 runtests: pythonhashseed='107331485'\npy27 runtests: commands[0] | nosetests\n.............\n----------------------------------------------------------------------\nran 13 tests in 0.066s\n\nok\npy35 create: /users/bngo/python-avro-json-serializer/.tox/py35\npy35 installdeps: nose, -rrequirements.txt\npy35 inst: /users/bngo/python-avro-json-serializer/.tox/dist/avro_json_serializer-0.4.1.zip\npy35 installed: avro-json-serializer==0.4.1,avro-python3==1.8.1,nose==1.3.7,simplejson==3.8.2,six==1.10.0\npy35 runtests: pythonhashseed='107331485'\npy35 runtests: commands[0] | nosetests\n.............\n----------------------------------------------------------------------\nran 13 tests in 0.029s\n\nok\n_____________________________________________________________________________________ summary _____________________________________________________________________________________\n  py27: commands succeeded\n  py35: commands succeeded\n  congratulations :)\n```\n\n## license\n\npython avro json serializer is licensed under the terms of the [apache license, version 2.0](http://www.apache.org/licenses/license-2.0).",
  "docs_url": "https://pythonhosted.org/avro-json-serializer/",
  "keywords": "",
  "license": "apache 2.0",
  "name": "avro-json-serializer",
  "package_url": "https://pypi.org/project/avro-json-serializer/",
  "project_url": "https://pypi.org/project/avro-json-serializer/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/avro-json-serializer/1.0.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "avro json serializer",
  "version": "1.0.4",
  "releases": [],
  "developers": [
    "rinozemtsev@linkedin.com",
    "roman_inozemtsev"
  ],
  "kwds": "avro_json_serializer test_avro_json_serializer avrojsonserializer avro_schema serializer",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_avro_json_serializer",
  "homepage": "",
  "release_count": 8,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "environment :: web environment",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# pypmml\n\n_pypmml_ is a python pmml scoring library, it really is the python api for [pmml4s](https://github.com/autodeployai/pmml4s).\n\n## prerequisites\n - java >= 8 and < 16\n - python 2.7 or >= 3.5\n\n## dependencies\n  - [py4j](https://www.py4j.org/)\n  \n## installation\n\n```bash\npip install pypmml\n```\n\nor install the latest version from github:\n\n```bash\npip install --upgrade git+https://github.com/autodeployai/pypmml.git\n```\n\n## usage\n1. load model from various sources, e.g. readable, file path, string, or an array of bytes.\n\n    ```python\n    from pypmml import model\n    \n    # the model is from http://dmg.org/pmml/pmml_examples/knime_pmml_4.1_examples/single_iris_dectree.xml\n    model = model.load('single_iris_dectree.xml')\n    ```\n\n2. call `predict(data)` to predict new values that can be in different types, e.g. dict, list, json, ndarray of numpy, series or dataframe of pandas.\n\n    * **`data` in dict:**\n\n    ```python\n    >>> model.predict({'sepal_length': 5.1, 'sepal_width': 3.5, 'petal_length': 1.4, 'petal_width': 0.2})\n    {'probability_iris-setosa': 1.0, 'probability_iris-versicolor': 0.0, 'probability': 1.0, 'predicted_class': 'iris-setosa', 'probability_iris-virginica': 0.0, 'node_id': '1'}\n    ```\n\n    * **`data` in list:** \n    \n    note: the order of values must match the input names, and the order of results always matches the output names.\n\n    ```python\n    >>> model.inputnames\n    ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\n    >>> model.predict([5.1, 3.5, 1.4, 0.2])\n    ['iris-setosa', 1.0, 1.0, 0.0, 0.0, '1']\n    >>> model.outputnames\n    ['predicted_class', 'probability', 'probability_iris-setosa', 'probability_iris-versicolor', 'probability_iris-virginica', 'node_id']\n    ```\n    \n    * **`data` in `records` json:**\n\n    ```python\n    >>> model.predict('[{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}]')\n    [{\"probability\":1.0,\"probability_iris-versicolor\":0.0,\"probability_iris-setosa\":1.0,\"probability_iris-virginica\":0.0,\"predicted_class\":\"iris-setosa\",\"node_id\":\"1\"}]\n    ```\n\n    * **`data` in `split` json:**\n \n    ```python\n    >>> model.predict('{\"columns\": [\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], \"data\": [[5.1, 3.5, 1.4, 0.2]]}')\n    {\"columns\":[\"predicted_class\",\"probability\",\"probability_iris-setosa\",\"probability_iris-versicolor\",\"probability_iris-virginica\",\"node_id\"],\"data\":[[\"iris-setosa\",1.0,1.0,0.0,0.0,\"1\"]]}\n    ```\n\n    * **`data` in ndarray of numpy:**\n\n    note: as the list above, the order of ndarray values must match the input names, and the order of results always matches the output names.\n    ```python\n    >>> import numpy as np\n    >>> model.predict(np.array([5.1, 3.5, 1.4, 0.2]))\n    ['iris-setosa', 1.0, 1.0, 0.0, 0.0, '1']\n    >>> \n    >>> model.predict(np.array([[5.1, 3.5, 1.4, 0.2], [7, 3.2, 4.7, 1.4]]))\n    [['iris-setosa', 1.0, 1.0, 0.0, 0.0, '1'], ['iris-versicolor', 0.9074074074074074, 0.0, 0.9074074074074074, 0.09259259259259259, '3']]\n    ```\n\n    * **`data` in series of pandas:**\n    \n    ```python\n    >>> import pandas as pd\n    >>> model.predict(pd.series({'sepal_length': 5.1, 'sepal_width': 3.5, 'petal_length': 1.4, 'petal_width': 0.2}))\n    node_id                                  1\n    predicted_class                iris-setosa\n    probability                              1\n    probability_iris-setosa                  1\n    probability_iris-versicolor              0\n    probability_iris-virginica               0\n    name: 0, dtype: object\n    ```\n\n    * **`data` in dataframe of pandas:**\n\n    ```python\n    >>> import pandas as pd\n    >>> data = pd.read_csv('iris.csv') # the data is from here: http://dmg.org/pmml/pmml_examples/iris.csv\n    >>> model.predict(data)\n    node_id predicted_class  probability  probability_iris-setosa  probability_iris-versicolor  probability_iris-virginica\n    0         1     iris-setosa     1.000000                      1.0                     0.000000                    0.000000\n    1         1     iris-setosa     1.000000                      1.0                     0.000000                    0.000000\n    2         1     iris-setosa     1.000000                      1.0                     0.000000                    0.000000\n    3         1     iris-setosa     1.000000                      1.0                     0.000000                    0.000000\n    4         1     iris-setosa     1.000000                      1.0                     0.000000                    0.000000\n    ..      ...             ...          ...                      ...                          ...                         ...\n    145      10  iris-virginica     0.978261                      0.0                     0.021739                    0.978261\n    146      10  iris-virginica     0.978261                      0.0                     0.021739                    0.978261\n    147      10  iris-virginica     0.978261                      0.0                     0.021739                    0.978261\n    148      10  iris-virginica     0.978261                      0.0                     0.021739                    0.978261\n    149      10  iris-virginica     0.978261                      0.0                     0.021739                    0.978261\n    ```\n\n## use pmml in scala or java\nsee the [pmml4s](https://github.com/autodeployai/pmml4s) project. _pmml4s_ is a pmml scoring library for scala. it provides both scala and java evaluator api for pmml.\n\n## use pmml in spark\nsee the [pmml4s-spark](https://github.com/autodeployai/pmml4s-spark) project. _pmml4s-spark_ is a pmml scoring library for spark as sparkml transformer.\n\n## use pmml in pyspark\nsee the [pypmml-spark](https://github.com/autodeployai/pypmml-spark) project. _pypmml-spark_ is a python pmml scoring library for pyspark as sparkml transformer, it really is the python api for pmml4s-spark.\n\n## deploy pmml as rest api\nsee the [ai-serving](https://github.com/autodeployai/ai-serving) project. _ai-serving_ is serving ai/ml models in the open standard formats pmml and onnx with both http (rest api) and grpc endpoints.\n\n## deploy and manage ai/ml models at scale\nsee the [daas](https://www.autodeploy.ai/) system that deploys ai/ml models in production at scale on kubernetes.\n\n## support\nif you have any questions about the _pypmml_ library, please open issues on this repository.\n\nfeedback and contributions to the project, no matter what kind, are always very welcome. \n\n## license\n_pypmml_ is licensed under [apl 2.0](http://www.apache.org/licenses/license-2.0).",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "pypmml",
  "package_url": "https://pypi.org/project/pypmml/",
  "project_url": "https://pypi.org/project/pypmml/",
  "project_urls": {
    "Download": "https://github.com/autodeployai/pypmml/archive/v0.9.17.tar.gz",
    "Homepage": "https://github.com/autodeployai/pypmml"
  },
  "release_url": "https://pypi.org/project/pypmml/0.9.17/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python pmml scoring library",
  "version": "0.9.17",
  "releases": [],
  "developers": [
    "autodeploy.ai@gmail.com",
    "autodeployai"
  ],
  "kwds": "knime_pmml_4 pmml_examples _pmml4s pmml4s pmml",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pypmml",
  "homepage": "https://github.com/autodeployai/pypmml",
  "release_count": 15,
  "dependency_ids": []
}
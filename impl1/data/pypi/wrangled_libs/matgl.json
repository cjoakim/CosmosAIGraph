{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: chemistry",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: physics",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![github license](https://img.shields.io/github/license/materialsvirtuallab/matgl)](https://github.com/materialsvirtuallab/matgl/blob/main/license)\n[![linting](https://github.com/materialsvirtuallab/matgl/workflows/linting/badge.svg)](https://github.com/materialsvirtuallab/matgl/workflows/linting/badge.svg)\n[![testing](https://github.com/materialsvirtuallab/matgl/actions/workflows/testing.yml/badge.svg)](https://github.com/materialsvirtuallab/matgl/actions/workflows/testing.yml)\n[![downloads](https://static.pepy.tech/badge/matgl)](https://pepy.tech/project/matgl)\n[![codecov](https://codecov.io/gh/materialsvirtuallab/matgl/branch/main/graph/badge.svg?token=3v3o79godq)](https://codecov.io/gh/materialsvirtuallab/matgl)\n[![pypi](https://img.shields.io/pypi/v/matgl?logo=pypi&logocolor=white)](https://pypi.org/project/matgl?logo=pypi&logocolor=white)\n\n# materials graph library <img src=\"https://github.com/materialsvirtuallab/matgl/blob/main/assets/matgl.png?raw=true\" alt=\"matgl\" width=\"30%\" style=\"float: right\">\n\n## official documentation [:books:]\n\n<https://matgl.ai>\n\n## introduction\n\nmatgl (materials graph library) is a graph deep learning library for materials science. mathematical graphs are a\nnatural representation for a collection of atoms. graph deep learning models have been shown to consistently deliver\nexceptional performance as surrogate models for the prediction of materials properties.\n\nmatgl is built on the [deep graph library (dgl)][dgl] and pytorch, with suitable adaptations for materials-specific\napplications. the goal is for matgl to serve as an extensible platform to develop and share materials graph deep\nlearning models. for the initial release, we have re-implemented the [materials 3-body graph network (m3gnet)]\n[m3gnet] and its predecessor, [megnet][megnet], which were originally implemented in tensorflow, to improve the\nusability, extensibility and scalability of these models. here are some key improvements over the tf implementations:\n\n- a more intuitive api and class structure based on dgl.\n- multi-gpu support via pytorch lightning.\n\nthis effort is a collaboration between the [materials virtual lab][mavrl] and intel labs (santiago miret, marcel\nnassar, carmelo gonzales).\n\n## status\n\nmajor milestones are summarized below. please refer to the [changelog] for details.\n\n- v0.5.1 (jun 9 2023): model versioning implemented.\n- v0.5.0 (jun 8 2023): simplified saving and loading of models. now models can be loaded with one line of code!\n- v0.4.0 (jun 7 2023): near feature parity with original tf implementations. re-trained m3gnet universal potential now\n  available.\n- v0.1.0 (feb 16 2023): initial implementations of m3gnet and megnet architectures have been completed. expect\n  bugs!\n\n## current architectures\n\nhere, we summarize the currently implemented architectures in matgl. it should be stressed that this is by no means\nan exhaustive list, and we expect new architectures to be added by the core matgl team as well as other contributors\nin future.\n\n<div style=\"float: left; padding: 10px; width: 300px\">\n<img src=\"https://github.com/materialsvirtuallab/matgl/blob/main/assets/mxgnet.png?raw=true\" alt=\"m3gnet_schematic\">\n<p>figure: schematic of m3gnet/megnet</p>\n</div>\n\n### megnet\n\n[materials graph network (megnet)][megnet] is an implementation of deepmind's [graph networks][graphnetwork] for\nmachine learning in materials science. we have demonstrated its success in achieving low prediction errors in a broad\narray of properties in both [molecules and crystals][megnet]. new releases have included our recent work on\n[multi-fidelity materials property modeling][mfimegnet]. figure 1 shows the sequential update steps of the graph\nnetwork, whereby bonds, atoms, and global state attributes are updated using information from each other, generating an output graph.\n\n### m3gnet\n\n[materials 3-body graph network (m3gnet)][m3gnet] is a new materials graph neural network architecture that\nincorporates 3-body interactions in megnet. an additional difference is the addition of the coordinates for atoms and\nthe 3\u00d73 lattice matrix in crystals, which are necessary for obtaining tensorial quantities such as forces and\nstresses via auto-differentiation. as a framework, m3gnet has diverse applications, including:\n\n- **interatomic potential development.** with the same training data, m3gnet performs similarly to state-of-the-art\n  machine learning interatomic potentials (mlips). however, a key feature of a graph representation is its\n  flexibility to scale to diverse chemical spaces. one of the key accomplishments of m3gnet is the development of a\n  [*universal ip*][m3gnet] that can work across the entire periodic table of the elements by training on relaxations\n  performed in the [materials project][mp].\n- **surrogate models for property predictions.** like the previous megnet architecture, m3gnet can be used to develop\n  surrogate models for property predictions, achieving in many cases accuracies that are better or similar to other\n  state-of-the-art ml models.\n\nfor detailed performance benchmarks, please refer to the publications in the [references](#references) section.\n\n## installation\n\nmatgl can be installed via pip for the latest stable version:\n\n```bash\npip install matgl\n```\n\nfor the latest dev version, please clone this repo and install using:\n\n```bash\npip install -e .\n```\n\n### cuda (gpu) installation\n\nif you intend to use cuda (gpu) to speed up training, it is important to install the appropriate versions of pytorch\nand dgl. the basic instructions are given below, but it is recommended that you consult the\n[pytorch docs](https://pytorch.org/get-started/locally/) and [dgl docs](https://www.dgl.ai/pages/start.html) if you\nrun into any problems.\n\n```shell\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\npip install dgl -f https://data.dgl.ai/wheels/cu118/repo.html\npip install dglgo -f https://data.dgl.ai/wheels-test/repo.html\n```\n\n## usage\n\npre-trained m3gnet universal potential and megnet models for the materials project formation energy and\nmulti-fidelity band gap are now available.\n\n### command line (from v0.6.2)\n\na cli tool now provides the capability to perform quick relaxations or predictions using pre-trained models, as well\nas other simple administrative tasks (e.g., clearing the cache). some simple examples:\n\n1. to perform a relaxation,\n\n    ```bash\n    mgl relax --infile li2o.cif --outfile li2o_relax.cif\n    ```\n\n2. to use one of the pre-trained property models,\n\n    ```bash\n    mgl predict --model m3gnet-mp-2018.6.1-eform --infile li2o.cif\n    ```\n\n3. to clear the cache,\n\n    ```bash\n    mgl clear\n    ```\n\nfor a full range of options, use `mgl -h`.\n\n### code\n\nusers who just want to use the models out of the box should use the newly implemented `matgl.load_model` convenience\nmethod. the following is an example of a prediction of the formation energy for cscl.\n\n```python\nfrom pymatgen.core import lattice, structure\nimport matgl\n\nmodel = matgl.load_model(\"megnet-mp-2018.6.1-eform\")\n\n# this is the structure obtained from the materials project.\nstruct = structure.from_spacegroup(\"pm-3m\", lattice.cubic(4.1437), [\"cs\", \"cl\"], [[0, 0, 0], [0.5, 0.5, 0.5]])\neform = model.predict_structure(struct)\nprint(f\"the predicted formation energy for cscl is {float(eform.numpy()):.3f} ev/atom.\")\n```\n\nto obtain a listing of available pre-trained models,\n\n```python\nimport matgl\nprint(matgl.get_available_pretrained_models())\n```\n\n## tutorials\n\nwe wrote [tutorials] on how to use matgl. these were generated from [jupyter notebooks]\n[jupyternb], which can be directly run on [google colab].\n\n## resources\n\n- [api docs][apidocs] for all classes and methods.\n- [developer guide](developer.md) outlines the key design elements of `matgl`, especially for developers wishing to\n  train and contribute matgl models.\n- advancedsoft has implemented a [lammps interface](https://github.com/advancesoftcorp/lammps/tree/based-on-lammps_2jun2022/src/ml-m3gnet)\n  to both the tf and matgl version of m3gnet.\n\n## references\n\na matgl publication is currently being written. for now, pls refer to the citation.cff file for the citation\ninformation. if you are using any of the pretrained models, please cite the relevant works below:\n\n> **megnet**\n>\n> chen, c.; ye, w.; zuo, y.; zheng, c.; ong, s. p. *graph networks as a universal machine learning framework for\n> molecules and crystals.* chem. mater. 2019, 31 (9), 3564\u20133572. doi: [10.1021/acs.chemmater.9b01294][megnet].\n\n> **multi-fidelity megnet**\n>\n> chen, c.; zuo, y.; ye, w.; li, x.; ong, s. p. *learning properties of ordered and disordered materials from\n> multi-fidelity data.* nature computational science, 2021, 1, 46\u201353. doi: [10.1038/s43588-020-00002-x][mfimegnet].\n\n> **m3gnet**\n>\n> chen, c., ong, s.p. *a universal graph deep learning interatomic potential for the periodic table.* nature\n> computational science, 2023, 2, 718\u2013728. doi: [10.1038/s43588-022-00349-3][m3gnet].\n\n## faqs\n\n1. **the `m3gnet-mp-2021.2.8-pes` differs from the original tensorflow (tf) implementation!**\n\n   *answer:* `m3gnet-mp-2021.2.8-pes` is a refitted model with some data improvements and minor architectural changes.\n   porting over the weights from the tf version to dgl/pytorch is non-trivial. we have performed reasonable benchmarking\n   to ensure that the new implementation reproduces the broad error characteristics of the original tf implementation\n   (see [examples][jupyternb]). however, it is not expected to reproduce the tf version exactly. this refitted model\n   serves as a baseline for future model improvements. we do not believe there is value in expending the resources\n   to reproduce the tf version exactly.\n\n2. **i am getting errors with `matgl.load_model()`!**\n\n   *answer:* the most likely reason is that you have a cached older version of the model. we often refactor models to\n   ensure the best implementation. this can usually be solved by updating your `matgl` to the latest version\n   and clearing your cache using the following command `mgl clear`. on the next run, the latest model will be\n   downloaded. with effect from v0.5.2, we have implemented a model versioning scheme that will detect code vs model\n   version conflicts and alert the user of such problems.\n\n3. **what pre-trained models should i be using?**\n\n   *answer:* there is no one definitive answer. in general, the newer the architecture and dataset, the more likely\n   the model performs better. however, it should also be noted that a model operating on a more diverse dataset may\n   compromise on  performance on a specific system. the best way is to look at the readmes included with each model\n   and do some tests on the systems you are interested in.\n\n4. **how do i contribute to matgl?**\n\n   *answer:* for code contributions, please fork and submit pull requests. you should read the\n   [developer guide](developer.md) to understand the general design guidelines. we welcome pre-trained model\n   contributions as well, which should also be submitted via prs. please follow the folder structure of the\n   pretrained models. in particular, we expect all models to come with a `readme.md` and notebook\n   documenting its use and its key performance metrics. also, we expect contributions to be on new properties\n   or systems or to significantly outperform the existing models. we will develop an alternative means for model\n   sharing in the future.\n\n5. **none of your models do what i need. where can i get help?**\n\n   *answer:* please contact [prof ong][ongemail] with a brief description of your needs. for simple problems, we are\n   glad to advise and point you in the right direction. for more complicated problems, we are always open to\n   academic collaborations or projects. we also offer [consulting services][mqm] for companies with unique needs,\n   including but not limited to custom data generation, model development and materials design.\n\n## acknowledgments\n\nthis work was primarily supported by the [materials project][mp], funded by the u.s. department of energy, office of\nscience, office of basic energy sciences, materials sciences and engineering division under contract no.\nde-ac02-05-ch11231: materials project program kc23mp. this work used the expanse supercomputing cluster at the extreme\nscience and engineering discovery environment (xsede), which is supported by national science foundation grant number\naci-1548562.\n\n[m3gnetrepo]: https://github.com/materialsvirtuallab/m3gnet \"m3gnet repo\"\n[megnetrepo]: https://github.com/materialsvirtuallab/megnet \"megnet repo\"\n[dgl]: https://www.dgl.ai \"dgl website\"\n[mavrl]: http://materialsvirtuallab.org \"mavrl website\"\n[changelog]: https://matgl.ai/changes \"changelog\"\n[graphnetwork]: https://arxiv.org/abs/1806.01261 \"deepmind's paper\"\n[megnet]: https://pubs.acs.org/doi/10.1021/acs.chemmater.9b01294 \"megnet paper\"\n[mfimegnet]: https://nature.com/articles/s43588-020-00002-x \"mfi megnet paper\"\n[m3gnet]: https://nature.com/articles/s43588-022-00349-3 \"m3gnet paper\"\n[mp]: http://materialsproject.org \"materials project\"\n[apidocs]: https://matgl.ai/matgl.html \"matgl api docs\"\n[doc]: https://matgl.ai \"matgl documentation\"\n[google colab]: https://colab.research.google.com/ \"google colab\"\n[jupyternb]: https://github.com/materialsvirtuallab/matgl/tree/main/examples\n[ongemail]: mailto:ongsp@ucsd.edu \"email\"\n[mqm]: https://materialsqm.com \"materialsqm\"\n[tutorials]: https://matgl.ai/tutorials \"tutorials\"\n",
  "docs_url": null,
  "keywords": "materials,interatomic potential,force field,science,property prediction,ai,machine learning,graph,deep learning",
  "license": "bsd-3-clause",
  "name": "matgl",
  "package_url": "https://pypi.org/project/matgl/",
  "project_url": "https://pypi.org/project/matgl/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/matgl/0.9.1/",
  "requires_dist": [
    "ase",
    "dgl",
    "pymatgen",
    "pytorch-lightning",
    "torch"
  ],
  "requires_python": ">=3.9",
  "summary": "matgl is a framework for graph deep learning for materials science.",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "elliottliu17@gmail.com",
    "j1qi@ucsd.edu",
    "marcel.nassar@intel.com",
    "ongsp@ucsd.edu",
    "santiago.miret@intel.com",
    "t1ko@ucsd.edu"
  ],
  "kwds": "matgl documentation materialsvirtuallab tutorials tensorflow",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_matgl",
  "homepage": "",
  "release_count": 25,
  "dependency_ids": [
    "pypi_ase",
    "pypi_dgl",
    "pypi_pymatgen",
    "pypi_pytorch_lightning",
    "pypi_torch"
  ]
}
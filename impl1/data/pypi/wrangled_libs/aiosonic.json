{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http"
  ],
  "description": "![github status](https://github.com/sonic182/aiosonic/actions/workflows/python.yml/badge.svg)\n[![coverage status](https://coveralls.io/repos/github/sonic182/aiosonic/badge.svg?branch=master)](https://coveralls.io/github/sonic182/aiosonic?branch=master)\n[![pypi version](https://badge.fury.io/py/aiosonic.svg)](https://badge.fury.io/py/aiosonic)\n[![documentation status](https://readthedocs.org/projects/aiosonic/badge/?version=latest)](https://aiosonic.readthedocs.io/en/latest/?badge=latest)\n[![discord](https://img.shields.io/discord/898929656969965648)](https://discord.gg/e7tbnysrjj)\n\n# aiosonic - lightweight python asyncio http client\n\n\nvery fast, lightweight python asyncio http client\n\nhere is some [documentation](https://aiosonic.readthedocs.io/en/latest/).\n\nthere is a performance script in tests folder which shows very nice numbers\n\n```\n\u00bb python tests/performance.py\ndoing tests...\n{\n \"aiosonic\": \"1000 requests in 182.03 ms\",\n \"aiosonic cyclic\": \"1000 requests in 370.55 ms\",\n \"aiohttp\": \"1000 requests in 367.66 ms\",\n \"requests\": \"1000 requests in 4613.77 ms\",\n \"httpx\": \"1000 requests in 812.41 ms\"\n}\naiosonic is 101.97% faster than aiohttp\naiosonic is 2434.55% faster than requests\naiosonic is 103.56% faster than aiosonic cyclic\naiosonic is 346.29% faster than httpx\n```\n\nthis is a *very basic, dummy test*, machine dependant. if you look for performance, test and compare your code with this and other packages like aiohttp.\n\nyou can perform this test by installing all test dependencies with `pip install -e \".[test]\"` and doing `python tests/performance.py` in your own machine\n\n# requirements:\n\n* python>=3.7\n* pypy>=3.7\n\n\n# features:\n\n* keepalive and smart pool of connections\n* multipart file uploads\n* chunked responses handling\n* chunked requests\n* connection timeouts\n* automatic decompression\n* follow redirects\n* fully type annotated.\n* 100% test coverage (sometimes not).\n* http2 (beta) when using the correct flag\n\n# installation\n\n`pip install aiosonic`\n\n# usage\n\n```python\nimport asyncio\nimport aiosonic\nimport json\n\n\nasync def run():\n    client = aiosonic.httpclient()\n\n    # ##################\n    # sample get request\n    # ##################\n    response = await client.get('https://www.google.com/')\n    assert response.status_code == 200\n    assert 'google' in (await response.text())\n\n    # ##################\n    # post data as multipart form\n    # ##################\n    url = \"https://postman-echo.com/post\"\n    posted_data = {'foo': 'bar'}\n    response = await client.post(url, data=posted_data)\n\n    assert response.status_code == 200\n    data = json.loads(await response.content())\n    assert data['form'] == posted_data\n\n    # ##################\n    # posted as json\n    # ##################\n    response = await client.post(url, json=posted_data)\n\n    assert response.status_code == 200\n    data = json.loads(await response.content())\n    assert data['json'] == posted_data\n\n    # ##################\n    # sample request + timeout\n    # ##################\n    from aiosonic.timeout import timeouts\n    timeouts = timeouts(\n        sock_read=10,\n        sock_connect=3\n    )\n    response = await client.get('https://www.google.com/', timeouts=timeouts)\n    assert response.status_code == 200\n    assert 'google' in (await response.text())\n    await client.shutdown()\n\n    print('success')\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\n# [todo's](https://github.com/sonic182/aiosonic/projects/1)\n\n* http2\n  * [x] get\n  * [x] request with data sending\n  * [ ] do a aiosonic release with stable http2\n* better documentation\n* international domains and urls (idna + cache)\n* basic/digest authentication\n* [x] requests using a http proxy\n* [x] sessions with cookie persistence\n* [x] elegant key/value cookies\n\n# development\n\ninstall packages with pip-tools:\n```bash\npip install pip-tools\npip-compile\npip-compile test-requirements.in\npip-sync requirements.txt test-requirements.txt\n```\n\n# contribute\n\n1. fork\n2. create a branch `feature/your_feature`\n3. commit - push - pull request\n\nthanks :)\n\n# contributors\n\n<a href=\"https://github.com/sonic182/aiosonic/graphs/contributors\">\n <img src=\"https://contributors-img.web.app/image?repo=sonic182/aiosonic\" />\n</a>\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aiosonic",
  "package_url": "https://pypi.org/project/aiosonic/",
  "project_url": "https://pypi.org/project/aiosonic/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/aiosonic/0.17.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "async http client",
  "version": "0.17.0",
  "releases": [],
  "developers": [
    "johanderson@mogollon.com.ve",
    "johanderson_mogollon"
  ],
  "kwds": "badge sonic182 status_code status py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiosonic",
  "homepage": "",
  "release_count": 46,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.4",
    "programming language :: python :: 2.5",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.0",
    "programming language :: python :: 3.1",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: debuggers",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "|buildstatus|  |pypi installs| |latest version| |supported python versions|\n\n|packagestatus|\n\n.. contents::\n\nuncompyle6\n==========\n\na native python cross-version decompiler and fragment decompiler.\nthe successor to decompyle, uncompyle, and uncompyle2.\n\n\nintroduction\n------------\n\n*uncompyle6* translates python bytecode back into equivalent python\nsource code. it accepts bytecodes from python version 1.0 to version\n3.8, spanning over 24 years of python releases. we include dropbox's\npython 2.5 bytecode and some pypy bytecodes.\n\nwhy this?\n---------\n\nok, i'll say it: this software is amazing. it is more than your\nnormal hacky decompiler. using compiler_ technology, the program\ncreates a parse tree of the program from the instructions; nodes at\nthe upper levels that look a little like what might come from a python\nast. so we can really classify and understand what's going on in\nsections of python bytecode.\n\nbuilding on this, another thing that makes this different from other\ncpython bytecode decompilers is the ability to deparse just\n*fragments* of source code and give source-code information around a\ngiven bytecode offset.\n\ni use the tree fragments to deparse fragments of code *at run time*\ninside my trepan_ debuggers_. for that, bytecode offsets are recorded\nand associated with fragments of the source code. this purpose,\nalthough compatible with the original intention, is yet a little bit\ndifferent.  see this_ for more information.\n\npython fragment deparsing given an instruction offset is useful in\nshowing stack traces and can be encorporated into any program that\nwants to show a location in more detail than just a line number at\nruntime.  this code can be also used when source-code information does\nnot exist and there is just bytecode. again, my debuggers make use of\nthis.\n\nthere were (and still are) a number of decompyle, uncompyle,\nuncompyle2, uncompyle3 forks around. many of them come basically from\nthe same code base, and (almost?) all of them are no longer actively\nmaintained. one was really good at decompiling python 1.5-2.3, another\nreally good at python 2.7, but that only. another handles python 3.2\nonly; another patched that and handled only 3.3.  you get the\nidea. this code pulls all of these forks together and *moves\nforward*. there is some serious refactoring and cleanup in this code\nbase over those old forks. even more experimental refactoring is going\non in decompyle3_.\n\nthis demonstrably does the best in decompiling python across all\npython versions. and even when there is another project that only\nprovides decompilation for subset of python versions, we generally do\ndemonstrably better for those as well.\n\nhow can we tell? by taking python bytecode that comes distributed with\nthat version of python and decompiling these.  among those that\nsuccessfully decompile, we can then make sure the resulting programs\nare syntactically correct by running the python interpreter for that\nbytecode version.  finally, in cases where the program has a test for\nitself, we can run the check on the decompiled code.\n\nwe use an automated processes to find bugs. in the issue trackers for\nother decompilers, you will find a number of bugs we've found along\nthe way. very few to none of them are fixed in the other decompilers.\n\nrequirements\n------------\n\nthe code in the git repository can be run from python 2.4 to the\nlatest python version, with the exception of python 3.0 through\n3.2. volunteers are welcome to address these deficiencies if there a\ndesire to do so.\n\nthe way it does this though is by segregating consecutive python versions into\ngit branches:\n\nmaster\n   python 3.6 and up (uses type annotations)\npython-3.3-to-3.5\n   python 3.3 through 3.5 (generic python 3)\npython-2.4\n   python 2.4 through 2.7 (generic python 2)\n\npypy 3-2.4 and later works as well.\n\nthe bytecode files it can read have been tested on python\nbytecodes from versions 1.4, 2.1-2.7, and 3.0-3.8 and later pypy\nversions.\n\ninstallation\n------------\n\nyou can install from pypi using the name ``uncompyle6``::\n\n   $ pip install uncompyle6\n\n\nto install from source code, this project uses setup.py, so it follows the standard python routine::\n\n   $ pip install -e .  # set up to run from source tree\n\nor::\n\n   $ python setup.py install # may need sudo\n\na gnu makefile is also provided so :code:`make install` (possibly as root or\nsudo) will do the steps above.\n\nrunning tests\n-------------\n\n::\n\n   $  make check\n\na gnu makefile has been added to smooth over setting running the right\ncommand, and running tests from fastest to slowest.\n\nif you have remake_ installed, you can see the list of all tasks\nincluding tests via :code:`remake --tasks`\n\n\nusage\n-----\n\nrun\n\n::\n\n$ uncompyle6 *compiled-python-file-pyc-or-pyo*\n\nfor usage help:\n\n::\n\n   $ uncompyle6 -h\n\nverification\n------------\n\nin older versions of python it was possible to verify bytecode by\ndecompiling bytecode, and then compiling using the python interpreter\nfor that bytecode version. having done this, the bytecode produced\ncould be compared with the original bytecode. however as python's code\ngeneration got better, this no longer was feasible.\n\nif you want python syntax verification of the correctness of the\ndecompilation process, add the :code:`--syntax-verify` option. however since\npython syntax changes, you should use this option if the bytecode is\nthe right bytecode for the python interpreter that will be checking\nthe syntax.\n\nyou can also cross compare the results with either another version of\n`uncompyle6` since there are are sometimes regressions in decompiling\nspecific bytecode as the overall quality improves.\n\nfor python 3.7 and 3.8, the code in decompyle3_ is generally\nbetter.\n\nor try specific another python decompiler like uncompyle2_, unpyc37_,\nor pycdc_.  since the later two work differently, bugs here often\naren't in that, and vice versa.\n\nthere is an interesting class of these programs that is readily\navailable give stronger verification: those programs that when run\ntest themselves. our test suite includes these.\n\nand python comes with another a set of programs like this: its test\nsuite for the standard library. we have some code in :code:`test/stdlib` to\nfacilitate this kind of checking too.\n\nknown bugs/restrictions\n-----------------------\n\nthe biggest known and possibly fixable (but hard) problem has to do\nwith handling control flow. (python has probably the most diverse and\nscrewy set of compound statements i've ever seen; there\nare \"else\" clauses on loops and try blocks that i suspect many\nprogrammers don't know about.)\n\nall of the python decompilers that i have looked at have problems\ndecompiling python's control flow. in some cases we can detect an\nerroneous decompilation and report that.\n\npython support is pretty good for python 2\n\non the lower end of python versions, decompilation seems pretty good although\nwe don't have any automated testing in place for python's distributed tests.\nalso, we don't have a python interpreter for versions 1.6, and 2.0.\n\nin the python 3 series, python support is is strongest around 3.4 or\n3.3 and drops off as you move further away from those versions. python\n3.0 is weird in that it in some ways resembles 2.6 more than it does\n3.1 or 2.7. python 3.6 changes things drastically by using word codes\nrather than byte codes. as a result, the jump offset field in a jump\ninstruction argument has been reduced. this makes the :code:`extended_arg`\ninstructions are now more prevalent in jump instruction; previously\nthey had been rare.  perhaps to compensate for the additional\n:code:`extended_arg` instructions, additional jump optimization has been\nadded. so in sum handling control flow by ad hoc means as is currently\ndone is worse.\n\nbetween python 3.5, 3.6, 3.7 there have been major changes to the\n:code:`make_function` and :code:`call_function` instructions.\n\npython 3.8 removes :code:`setup_loop`, :code:`setup_except`,\n:code:`break_loop`, and :code:`continue_loop`, instructions which may\nmake control-flow detection harder, lacking the more sophisticated\ncontrol-flow analysis that is planned. we'll see.\n\ncurrently not all python magic numbers are supported. specifically in\nsome versions of python, notably python 3.6, the magic number has\nchanges several times within a version.\n\n**we support only released versions, not candidate versions.** note\nhowever that the magic of a released version is usually the same as\nthe *last* candidate version prior to release.\n\nthere are also customized python interpreters, notably dropbox,\nwhich use their own magic and encrypt bytecode. with the exception of\nthe dropbox's old python 2.5 interpreter this kind of thing is not\nhandled.\n\nwe also don't handle pjorion_ or otherwise obfuscated code. for\npjorion try: pjorion deobfuscator_ to unscramble the bytecode to get\nvalid bytecode before trying this tool; pydecipher_ might help with that.\n\nthis program can't decompile microsoft windows exe files created by\npy2exe_, although we can probably decompile the code after you extract\nthe bytecode properly. `pydeinstaller <https://github.com/charles-dyfis-net/pydeinstaller>`_ may help with unpacking pyinstaller bundlers.\n\nhandling pathologically long lists of expressions or statements is\nslow. we don't handle cython_ or micropython which don't use bytecode.\n\nthere are numerous bugs in decompilation. and that's true for every\nother cpython decompiler i have encountered, even the ones that\nclaimed to be \"perfect\" on some particular version like 2.4.\n\nas python progresses decompilation also gets harder because the\ncompilation is more sophisticated and the language itself is more\nsophisticated. i suspect that attempts there will be fewer ad-hoc\nattempts like unpyc37_ (which is based on a 3.3 decompiler) simply\nbecause it is harder to do so. the good news, at least from my\nstandpoint, is that i think i understand what's needed to address the\nproblems in a more robust way. but right now until such time as\nproject is better funded, i do not intend to make any serious effort\nto support python versions 3.8 or 3.9, including bugs that might come\nin. i imagine at some point i may be interested in it.\n\nyou can easily find bugs by running the tests against the standard\ntest suite that python uses to check itself. at any given time, there are\ndozens of known problems that are pretty well isolated and that could\nbe solved if one were to put in the time to do so. the problem is that\nthere aren't that many people who have been working on bug fixing.\n\nsome of the bugs in 3.7 and 3.8 are simply a matter of back-porting\nthe fixes in decompyle3. volunteers are welcome to do so.\n\nyou may run across a bug, that you want to report. please do so after\nreading `how to report a bug\n<https://github.com/rocky/python-uncompyle6/blob/master/how-to-report-a-bug.md>`_ and\nfollow the `instructions when opening an issue <https://github.com/rocky/python-uncompyle6/issues/new?assignees=&labels=&template=bug-report.md>`_.\n\nbe aware that it might not get my attention for a while. if you\nsponsor or support the project in some way, i'll prioritize your\nissues above the queue of other things i might be doing instead.\n\nsee also\n--------\n\n* https://github.com/rocky/python-decompile3 : much smaller and more modern code, focusing on 3.7 and 3.8. changes in that will get migrated back here.\n* https://code.google.com/archive/p/unpyc3/ : supports python 3.2 only. the above projects use a different decompiling technique than what is used here. currently unmaintained.\n* https://github.com/figment/unpyc3/ : fork of above, but supports python 3.3 only. includes some fixes like supporting function annotations. currently unmaintained.\n* https://github.com/wibiti/uncompyle2 : supports python 2.7 only, but does that fairly well. there are situations where :code:`uncompyle6` results are incorrect while :code:`uncompyle2` results are not, but more often uncompyle6 is correct when uncompyle2 is not. because :code:`uncompyle6` adheres to accuracy over idiomatic python, :code:`uncompyle2` can produce more natural-looking code when it is correct. currently :code:`uncompyle2` is lightly maintained. see its issue `tracker <https://github.com/wibiti/uncompyle2/issues>`_ for more details.\n* `how to report a bug <https://github.com/rocky/python-uncompyle6/blob/master/how-to-report-a-bug.md>`_\n* the history_ file.\n* https://github.com/rocky/python-xdis : cross python version disassembler\n* https://github.com/rocky/python-xasm : cross python version assembler\n* https://github.com/rocky/python-uncompyle6/wiki : wiki documents which describe the code and aspects of it in more detail\n* https://github.com/zrax/pycdc : the readme for this c++ code says it aims to support all versions of python. you can aim your slign shot for the moon too, but i doubt you are going to hit it. this code is best for python versions around 2.7 and 3.3 when the code was initially developed. accuracy for current versions of python3 and early versions of python is lacking. without major effort, it is unlikely it can be made to support current python 3. see its `issue tracker <https://github.com/zrax/pycdc/issues>`_ for details. currently lightly maintained.\n\n\n.. _cython: https://en.wikipedia.org/wiki/cython\n.. _trepan: https://pypi.python.org/pypi/trepan3k\n.. _compiler: https://github.com/rocky/python-uncompyle6/wiki/how-does-this-code-work%3f\n.. _history: https://github.com/rocky/python-uncompyle6/blob/master/history.md\n.. _report_bug: https://github.com/rocky/python-uncompyle6/blob/master/how-to-report-a-bug.md\n.. _debuggers: https://pypi.python.org/pypi/trepan3k\n.. _remake: https://bashdb.sf.net/remake\n.. _pycdc: https://github.com/zrax/pycdc\n.. _decompyle3: https://github.com/rocky/python-decompile3\n.. _uncompyle2: https://github.com/wibiti/uncompyle2\n.. _unpyc37: https://github.com/andrew-tavera/unpyc37\n.. _this: https://github.com/rocky/python-uncompyle6/wiki/deparsing-technology-and-its-use-in-exact-location-reporting\n.. |buildstatus| image:: https://travis-ci.org/rocky/python-uncompyle6.svg :target: https://travis-ci.org/rocky/python-uncompyle6\n.. |packagestatus| image:: https://repology.org/badge/vertical-allrepos/python:uncompyle6.svg :target: https://repology.org/project/python:uncompyle6/versions\n.. _pjorion: http://www.koreanrandom.com/forum/topic/15280-pjorion-%d1%80%d0%b5%d0%b4%d0%b0%d0%ba%d1%82%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d0%ba%d0%be%d0%bc%d0%bf%d0%b8%d0%bb%d1%8f%d1%86%d0%b8%d1%8f-%d0%b4%d0%b5%d0%ba%d0%be%d0%bc%d0%bf%d0%b8%d0%bb%d1%8f%d1%86%d0%b8%d1%8f-%d0%be%d0%b1%d1%84\n.. _pydecipher: https://github.com/mitre/pydecipher\n.. _deobfuscator: https://github.com/extremecoders-re/pjorion-deobfuscator\n.. _py2exe: https://en.wikipedia.org/wiki/py2exe\n.. |supported python versions| image:: https://img.shields.io/pypi/pyversions/uncompyle6.svg\n.. |latest version| image:: https://badge.fury.io/py/uncompyle6.svg :target: https://badge.fury.io/py/uncompyle6\n.. |pypi installs| image:: https://pepy.tech/badge/uncompyle6/month\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "gpl3",
  "name": "uncompyle6",
  "package_url": "https://pypi.org/project/uncompyle6/",
  "project_url": "https://pypi.org/project/uncompyle6/",
  "project_urls": {
    "Homepage": "https://github.com/rocky/python-uncompyle6/"
  },
  "release_url": "https://pypi.org/project/uncompyle6/3.9.0/",
  "requires_dist": [
    "spark-parser (<1.9.0,>=1.8.9)",
    "xdis (<6.1.0,>=6.0.2)"
  ],
  "requires_python": "",
  "summary": "python cross-version byte-code decompiler",
  "version": "3.9.0",
  "releases": [],
  "developers": [
    "rb@dustyfeet.com",
    "rocky_bernstein"
  ],
  "kwds": "pyversions uncompyle6 uncompyle2 uncompyle2_ _uncompyle2",
  "license_kwds": "gpl3",
  "libtype": "pypi",
  "id": "pypi_uncompyle6",
  "homepage": "https://github.com/rocky/python-uncompyle6/",
  "release_count": 92,
  "dependency_ids": [
    "pypi_spark_parser",
    "pypi_xdis"
  ]
}
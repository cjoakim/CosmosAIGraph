{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "alchemyjsonschema\n=================\n\n.. |python package| image:: https://github.com/podhmo/alchemyjsonschema/actions/workflows/python-package.yml/badge.svg\n    :target: https://github.com/podhmo/alchemyjsonschema/actions/workflows/python-package.yml\n\nfeatures\n----------------------------------------\n\nalchemyjsonschema is the library for converting sqlalchemys's model to jsonschema.\n\n- using alchemyjsonschema as command\n- using alchemyjsonschema as library\n\nas library\n----------------------------------------\n\nhaving three output styles.\n\n- noforeignkeywalker -- ignore relationships\n- foreignkeywalker -- expecting the information about relationship is foreign key\n- structuralwalker -- fullset output(expecting the information about relationship is full json data)\n\nexamples\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndumping json with above three output styles.\n\ntarget models are here. group and user.\n\n.. code:: python\n\n   # -*- coding:utf-8 -*-\n   import sqlalchemy as sa\n   import sqlalchemy.orm as orm\n   from sqlalchemy.ext.declarative import declarative_base\n\n   base = declarative_base()\n\n\n   class group(base):\n       \"\"\"model for test\"\"\"\n       __tablename__ = \"group\"\n\n       pk = sa.column(sa.integer, primary_key=true, doc=\"primary key\")\n       name = sa.column(sa.string(255), default=\"\", nullable=false)\n\n\n   class user(base):\n       __tablename__ = \"user\"\n\n       pk = sa.column(sa.integer, primary_key=true, doc=\"primary key\")\n       name = sa.column(sa.string(255), default=\"\", nullable=true)\n       group_id = sa.column(sa.integer, sa.foreignkey(group.pk), nullable=false)\n       group = orm.relationship(group, uselist=false, backref=\"users\")\n\n\nnoforeignkeywalker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import pprint as pp\n   from alchemyjsonschema import schemafactory\n   from alchemyjsonschema import noforeignkeywalker\n\n   factory = schemafactory(noforeignkeywalker)\n   pp.pprint(factory(user))\n\n   \"\"\"\n   {'properties': {'name': {'maxlength': 255, 'type': 'string'},\n                   'pk': {'description': 'primary key', 'type': 'integer'}},\n    'required': ['pk'],\n    'title': 'user',\n    'type': 'object'}\n   \"\"\"\n\n\nforeignkeywalker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   import pprint as pp\n   from alchemyjsonschema import schemafactory\n   from alchemyjsonschema import foreignkeywalker\n\n   factory = schemafactory(foreignkeywalker)\n   pp.pprint(factory(user))\n\n   \"\"\"\n   {'properties': {'group_id': {'type': 'integer'},\n                   'name': {'maxlength': 255, 'type': 'string'},\n                   'pk': {'description': 'primary key', 'type': 'integer'}},\n    'required': ['pk', 'group_id'],\n    'title': 'user',\n    'type': 'object'}\n   \"\"\"\n\n\nstructuralwalker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n.. code:: python\n\n   import pprint as pp\n   from alchemyjsonschema import schemafactory\n   from alchemyjsonschema import structuralwalker\n\n   factory = schemafactory(structuralwalker)\n   pp.pprint(factory(user))\n\n   \"\"\"\n   {'definitions': {'group': {'properties': {'pk': {'description': 'primary key',\n                                                    'type': 'integer'},\n                                             'name': {'maxlength': 255,\n                                                      'type': 'string'}},\n                              'type': 'object'}},\n    'properties': {'pk': {'description': 'primary key', 'type': 'integer'},\n                   'name': {'maxlength': 255, 'type': 'string'},\n                   'group': {'$ref': '#/definitions/group'}},\n    'required': ['pk'],\n    'title': 'user',\n    'type': 'object'}\n   \"\"\"\n\n   pp.pprint(factory(group))\n\n   \"\"\"\n   {'definitions': {'user': {'properties': {'pk': {'description': 'primary key',\n                                                   'type': 'integer'},\n                                            'name': {'maxlength': 255,\n                                                     'type': 'string'}},\n                             'type': 'object'}},\n    'description': 'model for test',\n    'properties': {'pk': {'description': 'primary key', 'type': 'integer'},\n                   'name': {'maxlength': 255, 'type': 'string'},\n                   'users': {'items': {'$ref': '#/definitions/user'},\n                             'type': 'array'}},\n    'required': ['pk', 'name'],\n    'title': 'group',\n    'type': 'object'}\n   \"\"\"\n\nas command\n----------------------------------------\n\nusing alchemyjsonschema as command (the command name is also `alchemyjsonschema`).\n\nhelp\n\n.. code:: bash\n\n    $ alchemyjsonschema --help\n    usage: alchemyjsonschema [-h] [--walker {noforeignkey,foreignkey,structural}]\n                             [--decision {default,fullset}] [--depth depth]\n                             [--out out]\n                             target\n\n    positional arguments:\n      target                the module or class to extract schemas from\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --walker {noforeignkey,foreignkey,structural}\n      --decision {default,fullset}\n      --depth depth\n      --out out             output to file\n\nif above two model definitions (user,group) are existed in `alchemyjsonschema.tests.models` .\n\ntarget is the class position or module position. for example,\n\n- class position -- `alchemyjsonschema.tests.models:user`\n- module position -- `alchemyjsonschema.tests.models`\n\nexample\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nusing structuralwalker via command line (--walker structural).\nof course, noforeignkeywalker is noforeignkey, and foreignkeywalker is foreignkey.\n\n.. code:: bash\n\n    $ alchemyjsonschema --walker structural alchemyjsonschema.tests.models:group\n\n    {\n      \"definitions\": {\n        \"group\": {\n          \"properties\": {\n            \"color\": {\n              \"enum\": [\n                \"red\",\n                \"green\",\n                \"yellow\",\n                \"blue\"\n              ],\n              \"maxlength\": 6,\n              \"type\": \"string\"\n            },\n            \"created_at\": {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"maxlength\": 255,\n              \"type\": \"string\"\n            },\n            \"pk\": {\n              \"description\": \"primary key\",\n              \"type\": \"integer\"\n            },\n            \"users\": {\n              \"items\": {\n                \"$ref\": \"#/definitions/user\"\n              },\n              \"type\": \"array\"\n            }\n          },\n          \"required\": [\n            \"pk\"\n          ],\n          \"title\": \"group\",\n          \"type\": \"object\"\n        },\n        \"user\": {\n          \"properties\": {\n            \"created_at\": {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            \"name\": {\n              \"maxlength\": 255,\n              \"type\": \"string\"\n            },\n            \"pk\": {\n              \"description\": \"primary key\",\n              \"type\": \"integer\"\n            }\n          },\n          \"required\": [\n            \"pk\"\n          ],\n          \"type\": \"object\"\n        }\n      }\n    }\n\noutput is not same when using walker-class, directly. this is handy output for something like a swagger(openapi 2.0)'s tool.\n\nappendix: what is `--decision` ?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwhat is `--decision`? (todo: gentle description)\n\n.. code-block:: bash\n\n   $ alchemyjsonschema --walker structural alchemyjsonschema.tests.models:user | jq . -s > /tmp/default.json\n   $ alchemyjsonschema --decision useforeignkey --walker structural alchemyjsonschema.tests.models:user | jq . -s > /tmp/useforeignkey.json\n   $ diff -u /tmp/default.json /tmp/useforeignkey.json\n\n.. code-block:: diff\n\n  --- /tmp/default.json\t2017-01-02 22:49:44.000000000 +0900\n  +++ /tmp/useforeignkey.json\t2017-01-02 22:53:13.000000000 +0900\n  @@ -1,43 +1,14 @@\n   {\n     \"definitions\": {\n  -    \"group\": {\n  -      \"properties\": {\n  -        \"color\": {\n  -          \"enum\": [\n  -            \"red\",\n  -            \"green\",\n  -            \"yellow\",\n  -            \"blue\"\n  -          ],\n  -          \"maxlength\": 6,\n  -          \"type\": \"string\"\n  -        },\n  -        \"created_at\": {\n  -          \"format\": \"date-time\",\n  -          \"type\": \"string\"\n  -        },\n  -        \"name\": {\n  -          \"maxlength\": 255,\n  -          \"type\": \"string\"\n  -        },\n  -        \"pk\": {\n  -          \"description\": \"primary key\",\n  -          \"type\": \"integer\"\n  -        }\n  -      },\n  -      \"required\": [\n  -        \"pk\"\n  -      ],\n  -      \"type\": \"object\"\n  -    },\n       \"user\": {\n         \"properties\": {\n           \"created_at\": {\n             \"format\": \"date-time\",\n             \"type\": \"string\"\n           },\n  -        \"group\": {\n  -          \"$ref\": \"#/definitions/group\"\n  +        \"group_id\": {\n  +          \"relation\": \"group\",\n  +          \"type\": \"integer\"\n           },\n           \"name\": {\n             \"maxlength\": 255,\n\n\n",
  "docs_url": null,
  "keywords": "alchemyjsonschema sqlalchemy jsonschema schema-generation",
  "license": "mit",
  "name": "alchemyjsonschema",
  "package_url": "https://pypi.org/project/alchemyjsonschema/",
  "project_url": "https://pypi.org/project/alchemyjsonschema/",
  "project_urls": {
    "Homepage": "https://github.com/podhmo/alchemyjsonschema"
  },
  "release_url": "https://pypi.org/project/alchemyjsonschema/0.8.0/",
  "requires_dist": [
    "dictknife (>=0.7.2)",
    "isodate",
    "jsonschema",
    "magicalimport",
    "pytz",
    "sqlalchemy",
    "strict-rfc3339",
    "pytest ; extra == 'testing'",
    "webob ; extra == 'testing'"
  ],
  "requires_python": "",
  "summary": "a package for generating json-schema models from sqlalchemy models.",
  "version": "0.8.0",
  "releases": [],
  "developers": [
    "podhmo"
  ],
  "kwds": "sqlalchemys sqlalchemy alchemyjsonschema jsonschema schemafactory",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_alchemyjsonschema",
  "homepage": "https://github.com/podhmo/alchemyjsonschema",
  "release_count": 32,
  "dependency_ids": [
    "pypi_dictknife",
    "pypi_isodate",
    "pypi_jsonschema",
    "pypi_magicalimport",
    "pypi_pytest",
    "pypi_pytz",
    "pypi_sqlalchemy",
    "pypi_strict_rfc3339",
    "pypi_webob"
  ]
}
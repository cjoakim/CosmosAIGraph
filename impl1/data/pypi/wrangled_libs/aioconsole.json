{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "aioconsole\n==========\n\n.. image:: https://readthedocs.org/projects/aioconsole/badge/?version=latest\n   :target: http://aioconsole.readthedocs.io/\n   :alt:\n\n.. image:: https://github.com/vxgmichel/aioconsole/workflows/ci/badge.svg\n   :target: https://github.com/vxgmichel/aioconsole/actions?query=branch%3amaster\n   :alt:\n\n.. image:: https://codecov.io/gh/vxgmichel/aioconsole/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/vxgmichel/aioconsole\n   :alt:\n\n.. image:: https://img.shields.io/pypi/v/aioconsole.svg\n   :target: https://pypi.python.org/pypi/aioconsole\n   :alt:\n\n.. image:: https://img.shields.io/pypi/pyversions/aioconsole.svg\n   :target: https://pypi.python.org/pypi/aioconsole\n   :alt:\n\nasynchronous console and interfaces for asyncio\n\naioconsole_ provides:\n\n* asynchronous equivalents to `input`_, `print`_, `exec`_ and `code.interact`_\n* an interactive loop running the asynchronous python console\n* a way to customize and run command line interface using `argparse`_\n* `stream`_ support to serve interfaces instead of using standard streams\n* the ``apython`` script to access asyncio code at runtime without modifying the sources\n\n\nrequirements\n------------\n\n*  python \\>= 3.8\n\n\ninstallation\n------------\n\naioconsole_ is available on pypi_ and github_.\nboth of the following commands install the ``aioconsole`` package\nand the ``apython`` script.\n\n.. sourcecode:: console\n\n    $ pip3 install aioconsole   # from pypi\n    $ python3 setup.py install  # or from the sources\n    $ apython -h\n    usage: apython [-h] [--serve [host:] port] [--no-readline]\n                   [--banner banner] [--locals locals]\n                   [-m module | file] ...\n\n    run the given python file or module with a modified asyncio policy replacing\n    the default event loop with an interactive loop. if no argument is given, it\n    simply runs an asynchronous python console.\n\n    positional arguments:\n      file                  python file to run\n      args                  extra arguments\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --serve [host:] port, -s [host:] port\n                            serve a console on the given interface instead\n      --no-readline         force readline disabling\n      --banner banner       provide a custom banner\n      --locals locals       provide custom locals as a dictionary\n      -m module             run a python module\n\n\n\nsimple usage\n------------\n\nthe following example demonstrates the use of ``await`` inside the console:\n\n.. sourcecode:: console\n\n    $ apython\n    python 3.5.0 (default, sep 7 2015, 14:12:03)\n    [gcc 4.8.4] on linux\n    type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    ---\n    this console is running in an asyncio event loop.\n    it allows you to wait for coroutines using the 'await' syntax.\n    try: await asyncio.sleep(1, result=3, loop=loop)\n    ---\n\n.. sourcecode:: python3\n\n    >>> await asyncio.sleep(1, result=3)\n    # wait one second...\n    3\n    >>>\n\n\ndocumentation\n-------------\n\nfind more examples in the documentation_ and the `example directory`_.\n\n\nlimitations\n-----------\n\nthe python console exposed by `aioconsole`_ is quite limited compared to modern consoles such as `ipython`_ or `ptpython`_. luckily, those projects gained greater asyncio support over the years. in particular, the following use cases overlap with `aioconsole`_ capabilities:\n\n- `embedding a ptpython console in an asyncio program <https://github.com/prompt-toolkit/ptpython/blob/master/examples/asyncio-python-embed.py>`_\n- `using the await syntax in an ipython console <https://ipython.readthedocs.io/en/stable/whatsnew/version7.html#autowait-asynchronous-repl>`_\n\n\ncontact\n-------\n\nvincent michel: vxgmichel@gmail.com\n\n.. _aioconsole: https://pypi.python.org/pypi/aioconsole\n.. _github: https://github.com/vxgmichel/aioconsole\n.. _input: https://docs.python.org/3/library/functions.html#input\n.. _print: https://docs.python.org/3/library/functions.html#print\n.. _exec: https://docs.python.org/3/library/functions.html#exec\n.. _code.interact: https://docs.python.org/3/library/code.html#code.interact\n.. _argparse: https://docs.python.org/dev/library/argparse.html\n.. _stream: https://docs.python.org/3/library/asyncio-stream.html\n.. _example directory: https://github.com/vxgmichel/aioconsole/blob/master/example\n.. _documentation: http://aioconsole.readthedocs.io/\n.. _pypi: aioconsole_\n.. _ipython: https://ipython.readthedocs.io\n.. _ptpython: https://github.com/prompt-toolkit/ptpython\n",
  "docs_url": "https://pythonhosted.org/aioconsole/",
  "keywords": "",
  "license": "gplv3",
  "name": "aioconsole",
  "package_url": "https://pypi.org/project/aioconsole/",
  "project_url": "https://pypi.org/project/aioconsole/",
  "project_urls": {
    "Download": "https://pypi.org/project/aioconsole/",
    "Homepage": "https://github.com/vxgmichel/aioconsole"
  },
  "release_url": "https://pypi.org/project/aioconsole/0.7.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "asynchronous console and interfaces for asyncio",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "vincent_michel",
    "vxgmichel@gmail.com"
  ],
  "kwds": "aioconsole_ aioconsole _aioconsole badge banner",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_aioconsole",
  "homepage": "https://github.com/vxgmichel/aioconsole",
  "release_count": 29,
  "dependency_ids": []
}
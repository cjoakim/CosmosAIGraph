{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications :: email",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "wikipedia api\r\n=============\r\n\r\n``wikipedia-api`` is easy to use python wrapper for `wikipedias'`_ api. it supports extracting texts, sections, links, categories, translations, etc from wikipedia. documentation provides code snippets for the most common use cases.\r\n\r\n.. _wikipedias': https://www.mediawiki.org/wiki/api:main_page\r\n\r\n|build-status| |docs| |cc-coverage| |version| |pyversions| |github-stars-flat|\r\n\r\ninstallation\r\n------------\r\n\r\nthis package requires at least python 3.4 to install because it's using intenum.\r\n\r\n.. code-block:: python\r\n\r\n    pip3 install wikipedia-api\r\n\r\n\r\nusage\r\n-----\r\n\r\ngoal of ``wikipedia-api`` is to provide simple and easy to use api for retrieving informations from wikipedia. bellow are examples of common use cases.\r\n\r\nimporting\r\n~~~~~~~~~\r\n\r\n.. code-block:: python\r\n\r\n\timport wikipediaapi\r\n\r\nhow to get single page\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\ngetting single page is straightforward. you have to initialize ``wikipedia`` object and ask for page by its name.\r\nto initialize it, you have to provide:\r\n\r\n* `user_agent` to identify your project. please follow the recommended `format`_.\r\n* `language` to specify language mutation. it has to be one of `supported languages`_.\r\n\r\n.. _format: https://meta.wikimedia.org/wiki/user-agent_policy\r\n.. _supported languages: http://meta.wikimedia.org/wiki/list_of_wikipedias\r\n\r\n.. code-block:: python\r\n\r\n    import wikipediaapi\r\n\twiki_wiki = wikipediaapi.wikipedia('myprojectname (merlin@example.com)', 'en')\r\n\r\n\tpage_py = wiki_wiki.page('python_(programming_language)')\r\n\r\n\r\nhow to check if wiki page exists\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nfor checking, whether page exists, you can use function ``exists``.\r\n\r\n.. code-block:: python\r\n\r\n\tpage_py = wiki_wiki.page('python_(programming_language)')\r\n\tprint(\"page - exists: %s\" % page_py.exists())\r\n\t# page - exists: true\r\n\r\n\tpage_missing = wiki_wiki.page('nonexistingpagewithstrangename')\r\n\tprint(\"page - exists: %s\" % \tpage_missing.exists())\r\n\t# page - exists: false\r\n\r\nhow to get page summary\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nclass ``wikipediapage`` has property ``summary``, which returns description of wiki page.\r\n\r\n.. code-block:: python\r\n\r\n\r\n    import wikipediaapi\r\n\twiki_wiki = wikipediaapi.wikipedia('myprojectname (merlin@example.com)', 'en')\r\n\r\n\tprint(\"page - title: %s\" % page_py.title)\r\n\t# page - title: python (programming language)\r\n\r\n\tprint(\"page - summary: %s\" % page_py.summary[0:60])\r\n\t# page - summary: python is a widely used high-level programming language for\r\n\r\n\r\nhow to get page url\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\n``wikipediapage`` has two properties with url of the page. it is ``fullurl`` and ``canonicalurl``.\r\n\r\n.. code-block:: python\r\n\r\n\tprint(page_py.fullurl)\r\n\t# https://en.wikipedia.org/wiki/python_(programming_language)\r\n\r\n\tprint(page_py.canonicalurl)\r\n\t# https://en.wikipedia.org/wiki/python_(programming_language)\r\n\r\nhow to get full text\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\nto get full text of wikipedia page you should use property ``text`` which constructs text of the page\r\nas concatanation of summary and sections with their titles and texts.\r\n\r\n.. code-block:: python\r\n\r\n\twiki_wiki = wikipediaapi.wikipedia(\r\n\t    user_agent='myprojectname (merlin@example.com)',\r\n\t\tlanguage='en',\r\n\t\textract_format=wikipediaapi.extractformat.wiki\r\n\t)\r\n\r\n\tp_wiki = wiki_wiki.page(\"test 1\")\r\n\tprint(p_wiki.text)\r\n\t# summary\r\n\t# section 1\r\n\t# text of section 1\r\n\t# section 1.1\r\n\t# text of section 1.1\r\n\t# ...\r\n\r\n\r\n\twiki_html = wikipediaapi.wikipedia(\r\n\t    user_agent='myprojectname (merlin@example.com)',\r\n\t\tlanguage='en',\r\n\t\textract_format=wikipediaapi.extractformat.html\r\n\t)\r\n\tp_html = wiki_html.page(\"test 1\")\r\n\tprint(p_html.text)\r\n\t# <p>summary</p>\r\n\t# <h2>section 1</h2>\r\n\t# <p>text of section 1</p>\r\n\t# <h3>section 1.1</h3>\r\n\t# <p>text of section 1.1</p>\r\n\t# ...\r\n\r\nhow to get page sections\r\n~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nto get all top level sections of page, you have to use property ``sections``. it returns list of\r\n``wikipediapagesection``, so you have to use recursion to get all subsections.\r\n\r\n.. code-block:: python\r\n\r\n\tdef print_sections(sections, level=0):\r\n\t\tfor s in sections:\r\n\t\t\tprint(\"%s: %s - %s\" % (\"*\" * (level + 1), s.title, s.text[0:40]))\r\n\t\t\tprint_sections(s.sections, level + 1)\r\n\r\n\r\n\tprint_sections(page_py.sections)\r\n\t# *: history - python was conceived in the late 1980s,\r\n\t# *: features and philosophy - python is a multi-paradigm programming l\r\n\t# *: syntax and semantics - python is meant to be an easily readable\r\n\t# **: indentation - python uses whitespace indentation, rath\r\n\t# **: statements and control flow - python's statements include (among other\r\n\t# **: expressions - some python expressions are similar to l\r\n\r\nhow to get page section by title\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nto get last section of page with given title, you have to use function ``section_by_title``.\r\nit returns the last ``wikipediapagesection`` with this title.\r\n\r\n.. code-block:: python\r\n\r\n\tsection_history = page_py.section_by_title('history')\r\n\tprint(\"%s - %s\" % (section_history.title, section_history.text[0:40]))\r\n\r\n\t# history - python was conceived in the late 1980s b\r\n\r\nhow to get all page sections by title\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nto get all sections of page with given title, you have to use function ``sections_by_title``.\r\nit returns the all ``wikipediapagesection`` with this title.\r\n\r\n.. code-block:: python\r\n\r\n\tpage_1920 = wiki_wiki.page('1920')\r\n\tsections_january = page_1920.sections_by_title('january')\r\n\tfor s in sections_january:\r\n\t    print(\"* %s - %s\" % (s.title, s.text[0:40]))\r\n\r\n    # * january - january 1\r\n    # polish\u2013soviet war in 1920: the\r\n    # * january - january 2\r\n    # isaac asimov, american author\r\n    # * january - january 1 \u2013 zygmunt gorazdowski, polish\r\n\r\nhow to get page in other languages\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nif you want to get other translations of given page, you should use property ``langlinks``. it is map,\r\nwhere key is language code and value is ``wikipediapage``.\r\n\r\n.. code-block:: python\r\n\r\n\tdef print_langlinks(page):\r\n\t\tlanglinks = page.langlinks\r\n\t\tfor k in sorted(langlinks.keys()):\r\n\t\t    v = langlinks[k]\r\n\t\t    print(\"%s: %s - %s: %s\" % (k, v.language, v.title, v.fullurl))\r\n\r\n\tprint_langlinks(page_py)\r\n\t# af: af - python (programmeertaal): https://af.wikipedia.org/wiki/python_(programmeertaal)\r\n\t# als: als - python (programmiersprache): https://als.wikipedia.org/wiki/python_(programmiersprache)\r\n\t# an: an - python: https://an.wikipedia.org/wiki/python\r\n\t# ar: ar - \u0628\u0627\u064a\u062b\u0648\u0646: https://ar.wikipedia.org/wiki/%d8%a8%d8%a7%d9%8a%d8%ab%d9%88%d9%86\r\n\t# as: as - \u09aa\u09be\u0987\u09a5\u09a8: https://as.wikipedia.org/wiki/%e0%a6%aa%e0%a6%be%e0%a6%87%e0%a6%a5%e0%a6%a8\r\n\r\n\tpage_py_cs = page_py.langlinks['cs']\r\n\tprint(\"page - summary: %s\" % page_py_cs.summary[0:60])\r\n\t# page - summary: python (anglick\u00e1 v\u00fdslovnost [\u02c8pai\u03b8t\u0259n]) je vysoko\u00farov\u0148ov\u00fd sk\r\n\r\nhow to get links to other pages\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nif you want to get all links to other wiki pages from given page, you need to use property ``links``.\r\nit's map, where key is page title and value is ``wikipediapage``.\r\n\r\n.. code-block:: python\r\n\r\n\tdef print_links(page):\r\n\t\tlinks = page.links\r\n\t\tfor title in sorted(links.keys()):\r\n\t\t    print(\"%s: %s\" % (title, links[title]))\r\n\r\n\tprint_links(page_py)\r\n\t# 3ds max: 3ds max (id: ??, ns: 0)\r\n\t# ?:: ?: (id: ??, ns: 0)\r\n\t# abc (programming language): abc (programming language) (id: ??, ns: 0)\r\n\t# algol 68: algol 68 (id: ??, ns: 0)\r\n\t# abaqus: abaqus (id: ??, ns: 0)\r\n\t# ...\r\n\r\nhow to get page categories\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nif you want to get all categories under which page belongs, you should use property ``categories``.\r\nit's map, where key is category title and value is ``wikipediapage``.\r\n\r\n.. code-block:: python\r\n\r\n\tdef print_categories(page):\r\n\t\tcategories = page.categories\r\n\t\tfor title in sorted(categories.keys()):\r\n\t\t    print(\"%s: %s\" % (title, categories[title]))\r\n\r\n\r\n\tprint(\"categories\")\r\n\tprint_categories(page_py)\r\n\t# category:all articles containing potentially dated statements: ...\r\n\t# category:all articles with unsourced statements: ...\r\n\t# category:articles containing potentially dated statements from august 2016: ...\r\n\t# category:articles containing potentially dated statements from march 2017: ...\r\n\t# category:articles containing potentially dated statements from september 2017: ...\r\n\r\nhow to get all pages from category\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nto get all pages from given category, you should use property ``categorymembers``. it returns all members of given category.\r\nyou have to implement recursion and deduplication by yourself.\r\n\r\n.. code-block:: python\r\n\r\n\tdef print_categorymembers(categorymembers, level=0, max_level=1):\r\n\t\tfor c in categorymembers.values():\r\n\t\t    print(\"%s: %s (ns: %d)\" % (\"*\" * (level + 1), c.title, c.ns))\r\n\t\t    if c.ns == wikipediaapi.namespace.category and level < max_level:\r\n\t\t        print_categorymembers(c.categorymembers, level=level + 1, max_level=max_level)\r\n\r\n\r\n\tcat = wiki_wiki.page(\"category:physics\")\r\n\tprint(\"category members: category:physics\")\r\n\tprint_categorymembers(cat.categorymembers)\r\n\r\n\t# category members: category:physics\r\n\t# * statistical mechanics (ns: 0)\r\n\t# * category:physical quantities (ns: 14)\r\n\t# ** refractive index (ns: 0)\r\n\t# ** vapor quality (ns: 0)\r\n\t# ** electric susceptibility (ns: 0)\r\n\t# ** specific weight (ns: 0)\r\n\t# ** category:viscosity (ns: 14)\r\n\t# *** brookfield engineering (ns: 0)\r\n\r\nhow to see underlying api call\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nif you have problems with retrieving data you can get url of undrerlying api call.\r\nthis will help you determine if the problem is in the library or somewhere else.\r\n\r\n.. code-block:: python\r\n\r\n    import wikipediaapi\r\n    import sys\r\n    wikipediaapi.log.setlevel(level=wikipediaapi.logging.debug)\r\n\r\n    # set handler if you use python in interactive mode\r\n    out_hdlr = wikipediaapi.logging.streamhandler(sys.stderr)\r\n    out_hdlr.setformatter(wikipediaapi.logging.formatter('%(asctime)s %(message)s'))\r\n    out_hdlr.setlevel(wikipediaapi.logging.debug)\r\n    wikipediaapi.log.addhandler(out_hdlr)\r\n\r\n    wiki = wikipediaapi.wikipedia(user_agent='myprojectname (merlin@example.com)', language='en')\r\n\r\n    page_ostrava = wiki.page('ostrava')\r\n    print(page_ostrava.summary)\r\n    # logger prints out: request url: http://en.wikipedia.org/w/api.php?action=query&prop=extracts&titles=ostrava&explaintext=1&exsectionformat=wiki\r\n\r\nexternal links\r\n--------------\r\n\r\n* `github`_\r\n* `pypi`_\r\n* `travis`_\r\n* `readthedocs`_\r\n\r\n.. _github: https://github.com/martin-majlis/wikipedia-api/\r\n.. _pypi: https://pypi.python.org/pypi/wikipedia-api/\r\n.. _travis: https://travis-ci.org/martin-majlis/wikipedia-api/\r\n.. _readthedocs: http://wikipedia-api.readthedocs.io/\r\n\r\nother badges\r\n------------\r\n\r\n|cc-badge| |cc-issues| |coveralls| |version| |pyversions| |implementations|\r\n|github-downloads| |github-tag| |github-release|\r\n|github-commits-since-latest| |github-forks| |github-stars| |github-watches|\r\n|github-commit-activity| |github-last-commit| |github-code-size| |github-repo-size|\r\n|pypi-license| |pypi-wheel| |pypi-format| |pypi-pyversions| |pypi-implementations|\r\n|pypi-status| |pypi-downloads-dd| |pypi-downloads-dw| |pypi-downloads-dm|\r\n|libraries-io-sourcerank| |libraries-io-dependent-repos|\r\n\r\n\r\nother pages\r\n-----------\r\n\r\n\r\n\r\n\r\n.. |build-status| image:: https://travis-ci.org/martin-majlis/wikipedia-api.svg?branch=master\r\n    :alt: build status\r\n    :target: https://travis-ci.org/martin-majlis/wikipedia-api\r\n\r\n.. |docs| image:: https://readthedocs.org/projects/wikipedia-api/badge/?version=latest\r\n    :target: http://wikipedia-api.readthedocs.io/en/latest/?badge=latest\r\n    :alt: documentation status\r\n\r\n.. |cc-badge| image:: https://codeclimate.com/github/martin-majlis/wikipedia-api/badges/gpa.svg\r\n    :target: https://codeclimate.com/github/martin-majlis/wikipedia-api\r\n    :alt: code climate\r\n\r\n.. |cc-issues| image:: https://codeclimate.com/github/martin-majlis/wikipedia-api/badges/issue_count.svg\r\n    :target: https://codeclimate.com/github/martin-majlis/wikipedia-api\r\n    :alt: issue count\r\n\r\n.. |cc-coverage| image:: https://api.codeclimate.com/v1/badges/6e2c24d72438b39e5c26/test_coverage\r\n    :target: https://codeclimate.com/github/martin-majlis/wikipedia-api\r\n    :alt: test coverage\r\n\r\n.. |coveralls| image:: https://coveralls.io/repos/github/martin-majlis/wikipedia-api/badge.svg?branch=master\r\n\t:target: https://coveralls.io/github/martin-majlis/wikipedia-api?branch=master\r\n\t:alt: coveralls\r\n\r\n.. |version| image:: https://img.shields.io/pypi/v/wikipedia-api.svg?style=flat\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api\r\n\t:alt: version\r\n\r\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/wikipedia-api.svg?style=flat\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api\r\n\t:alt: py versions\r\n\r\n.. |implementations| image:: https://img.shields.io/pypi/implementation/wikipedia-api.svg?style=flat\r\n    :target: https://pypi.python.org/pypi/wikipedia-api\r\n\t:alt: implementations\r\n\r\n.. |github-downloads| image:: https://img.shields.io/github/downloads/martin-majlis/wikipedia-api/total.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/releases\r\n\t:alt: downloads\r\n\r\n.. |github-tag| image:: https://img.shields.io/github/tag/martin-majlis/wikipedia-api.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/tags\r\n\t:alt: tags\r\n\r\n.. |github-release| image:: https://img.shields.io/github/release/martin-majlis/wikipedia-api.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\r\n.. |github-commits-since-latest| image:: https://img.shields.io/github/commits-since/martin-majlis/wikipedia-api/latest.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github commits (since latest release)\r\n\r\n.. |github-forks| image:: https://img.shields.io/github/forks/martin-majlis/wikipedia-api.svg?style=social&label=fork\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github forks\r\n\r\n.. |github-stars| image:: https://img.shields.io/github/stars/martin-majlis/wikipedia-api.svg?style=social&label=stars\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github stars\r\n\r\n.. |github-stars-flat| image:: https://img.shields.io/github/stars/martin-majlis/wikipedia-api.svg?style=flat&label=stars\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github stars\r\n\r\n.. |github-watches| image:: https://img.shields.io/github/watchers/martin-majlis/wikipedia-api.svg?style=social&label=watch\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github watchers\r\n\r\n.. |github-commit-activity| image:: https://img.shields.io/github/commit-activity/y/martin-majlis/wikipedia-api.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/commits/master\r\n\t:alt: github commit activity the past week, 4 weeks, year\r\n\r\n.. |github-last-commit| image:: https://img.shields.io/github/commits/martin-majlis/wikipedia-api/last.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: last commit\r\n\r\n.. |github-code-size| image:: https://img.shields.io/github/languages/code-size/martin-majlis/wikipedia-api.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github code size in bytes\r\n\r\n.. |github-repo-size| image:: https://img.shields.io/github/repo-size/martin-majlis/wikipedia-api.svg\r\n\t:target: https://github.com/martin-majlis/wikipedia-api/\r\n\t:alt: github repo size in bytes\r\n\r\n.. |pypi-license| image:: https://img.shields.io/pypi/l/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi license\r\n\r\n.. |pypi-wheel| image:: https://img.shields.io/pypi/wheel/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi wheel\r\n\r\n.. |pypi-format| image:: https://img.shields.io/pypi/format/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi format\r\n\r\n.. |pypi-pyversions| image:: https://img.shields.io/pypi/pyversions/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi pyversions\r\n\r\n.. |pypi-implementations| image:: https://img.shields.io/pypi/implementation/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi implementations\r\n\r\n.. |pypi-status| image:: https://img.shields.io/pypi/status/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi status\r\n\r\n.. |pypi-downloads-dd| image:: https://img.shields.io/pypi/dd/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi downloads - day\r\n\r\n.. |pypi-downloads-dw| image:: https://img.shields.io/pypi/dw/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi downloads - week\r\n\r\n.. |pypi-downloads-dm| image:: https://img.shields.io/pypi/dm/wikipedia-api.svg\r\n\t:target: https://pypi.python.org/pypi/wikipedia-api/\r\n\t:alt: pypi downloads - month\r\n\r\n.. |libraries-io-sourcerank| image:: https://img.shields.io/librariesio/sourcerank/pypi/wikipedia-api.svg\r\n\t:target: https://libraries.io/pypi/wikipedia-api\r\n\t:alt: libraries.io - sourcerank\r\n\r\n.. |libraries-io-dependent-repos| image:: https://img.shields.io/librariesio/dependent-repos/pypi/wikipedia-api.svg\r\n\t:target: https://libraries.io/pypi/wikipedia-api\r\n\t:alt: libraries.io - dependent repos\r\n\r\n\r\nchangelog\r\n=========\r\n\r\n0.5.8\r\n-----\r\n\r\n* adds support for retrieving all sections with given name - `issue 39`_\r\n\r\n.. _issue 39: https://github.com/martin-majlis/wikipedia-api/issues/39\r\n\r\n0.5.4\r\n-----\r\n\r\n* namespace could be arbitrary integer - `issue 29`_\r\n\r\n.. _issue 29: https://github.com/martin-majlis/wikipedia-api/issues/29\r\n\r\n\r\n0.5.3\r\n-----\r\n\r\n* adds persistent http connection - `issue 26`_\r\n    * downloading 50 pages reduced from 13s to 8s => 40% speed up\r\n\r\n.. _issue 26: https://github.com/martin-majlis/wikipedia-api/issues/26\r\n\r\n\r\n0.5.2\r\n-----\r\n\r\n* adds namespaces 102 - 105 - `issue 24`_\r\n\r\n.. _issue 24: https://github.com/martin-majlis/wikipedia-api/issues/24\r\n\r\n0.5.1\r\n-----\r\n\r\n* adds tox for testing different python versions\r\n\r\n0.5.0\r\n-----\r\n\r\n* allows modifying api call parameters\r\n* fixes `issue 16`_ - hidden categories\r\n* fixes `issue 21`_ - summary extraction\r\n\r\n.. _issue 16: https://github.com/martin-majlis/wikipedia-api/issues/16\r\n.. _issue 21: https://github.com/martin-majlis/wikipedia-api/issues/21\r\n\r\n\r\n0.4.5\r\n-----\r\n\r\n* handles missing sections correctly\r\n* fixes `issue 20`_\r\n\r\n.. _issue 20: https://github.com/martin-majlis/wikipedia-api/issues/20\r\n\r\n\r\n0.4.4\r\n-----\r\n* uses https directly instead of http to avoid redirect\r\n\r\n0.4.3\r\n-----\r\n* correctly extracts text from pages without sections\r\n* adds support for quoted page titles\r\n\r\n.. code:: python\r\n\r\n    api = wikipediaapi.wikipedia(\r\n        language='hi',\r\n    )\r\n    python = api.article(\r\n        title='%e0%a4%aa%e0%a4%be%e0%a4%87%e0%a4%a5%e0%a4%a8',\r\n        unquote=true,\r\n    )\r\n    print(python.summary)\r\n\r\n0.4.2\r\n-----\r\n* adds support for python 3.4 by not using f-strings\r\n\r\n0.4.1\r\n-----\r\n* uses code style enforced by flake8\r\n* increased code coverage\r\n\r\n0.4.0\r\n-----\r\n* uses type annotations => minimal requirement is now python 3.5\r\n* adds possibility to use more parameters for `request`_. for example:\r\n\r\n.. code:: python\r\n\r\n    api = wikipediaapi.wikipedia(\r\n        language='en',\r\n        proxies={'http': 'http://localhost:1234'}\r\n    )\r\n\r\n* extends documentation\r\n\r\n.. _request: http://docs.python-requests.org/en/master/api/#requests.request\r\n\r\n0.3.4\r\n-----\r\n* adds support for `property categorymembers`_\r\n* adds property ``text`` for retrieving complete text of the page\r\n\r\n.. _property categorymembers: https://www.mediawiki.org/wiki/api:categorymembers\r\n\r\n0.3.3\r\n-----\r\n* added support for `request timeout`_\r\n* add header: accept-encoding: gzip\r\n\r\n.. _request timeout: https://github.com/martin-majlis/wikipedia-api/issues/1\r\n\r\n0.3.2\r\n-----\r\n* added support for `property categories`_\r\n\r\n.. _property categories: https://www.mediawiki.org/wiki/api:categories\r\n\r\n0.3.1\r\n-----\r\n* removing ``wikipedialanglink``\r\n* page keeps track of its own language, so it's easier to jump between different translations of the same page\r\n\r\n0.3.0\r\n-----\r\n* rename directory from ``wikipedia`` to ``wikipediaapi`` to avoid collisions\r\n\r\n0.2.4\r\n-----\r\n* handle redirects properly\r\n\r\n0.2.3\r\n-----\r\n* usage method ``page`` instead of ``article`` in ``wikipedia``\r\n\r\n0.2.2\r\n-----\r\n* added support for `property links`_\r\n\r\n.. _property links: https://www.mediawiki.org/wiki/api:links\r\n\r\n0.2.1\r\n-----\r\n* added support for `property langlinks`_\r\n\r\n.. _property langlinks: https://www.mediawiki.org/wiki/api:langlinks\r\n\r\n0.2.0\r\n-----\r\n* use properties instead of functions\r\n* added support for `property info`_\r\n\r\n.. _property info: https://www.mediawiki.org/wiki/api:info\r\n\r\n0.1.6\r\n-----\r\n* support for extracting texts with html markdown\r\n* added initial version of unit tests\r\n\r\n0.1.4\r\n-----\r\n* it's possible to extract summary and sections of the page\r\n* added support for `property extracts`_\r\n\r\n.. _property extracts: https://www.mediawiki.org/wiki/extension:textextracts#api\r\n",
  "docs_url": null,
  "keywords": "wikipedia api wrapper",
  "license": "mit",
  "name": "wikipedia-api",
  "package_url": "https://pypi.org/project/Wikipedia-API/",
  "project_url": "https://pypi.org/project/Wikipedia-API/",
  "project_urls": {
    "Download": "https://github.com/martin-majlis/Wikipedia-API/archive/master.tar.gz",
    "Homepage": "https://github.com/martin-majlis/Wikipedia-API"
  },
  "release_url": "https://pypi.org/project/Wikipedia-API/0.6.0/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": "",
  "summary": "python wrapper for wikipedia",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "martin@majlis.cz",
    "martin_majlis"
  ],
  "kwds": "list_of_wikipedias wikipediaapi wikipedialanglink wikipediapagesection wikipedias",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_wikipedia_api",
  "homepage": "https://github.com/martin-majlis/wikipedia-api",
  "release_count": 29,
  "dependency_ids": [
    "pypi_requests"
  ]
}
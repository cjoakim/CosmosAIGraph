{
  "classifiers": [],
  "description": "=========\r\nfountains\r\n=========\r\n\r\npython library for generating and concisely specifying reproducible pseudorandom binary data for unit testing.\r\n\r\n|pypi| |readthedocs| |actions| |coveralls|\r\n\r\n.. |pypi| image:: https://badge.fury.io/py/fountains.svg\r\n   :target: https://badge.fury.io/py/fountains\r\n   :alt: pypi version and link.\r\n\r\n.. |readthedocs| image:: https://readthedocs.org/projects/fountains/badge/?version=latest\r\n   :target: https://fountains.readthedocs.io/en/latest/?badge=latest\r\n   :alt: read the docs documentation status.\r\n\r\n.. |actions| image:: https://github.com/reity/fountains/workflows/lint-test-cover-docs/badge.svg\r\n   :target: https://github.com/reity/fountains/actions/workflows/lint-test-cover-docs.yml\r\n   :alt: github actions status.\r\n\r\n.. |coveralls| image:: https://coveralls.io/repos/github/reity/fountains/badge.svg?branch=main\r\n   :target: https://coveralls.io/github/reity/fountains?branch=main\r\n   :alt: coveralls test coverage summary.\r\n\r\npurpose\r\n-------\r\nthis library makes it possible to generate pseudorandom binary test data in a reproducible way, as well as to embed concise specifications of correct function behavior on that test data. this enables the construction of functional tests within unit testing suites that fit within one-line definitions but still test a function's behavior against a large number of inputs. more background information about this library's purpose, design, and implementation can be found in a `related article <https://github.com/reity/article-specifications-for-distinguishing-functions>`__.\r\n\r\ninstallation and usage\r\n----------------------\r\nthis library is available as a `package on pypi <https://pypi.org/project/fountains>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install fountains\r\n\r\nthe library can be imported in the usual ways:\r\n\r\n.. code-block:: python\r\n\r\n    import fountains\r\n    from fountains import fountains\r\n\r\nexamples\r\n^^^^^^^^\r\n\r\n.. |fountains| replace:: ``fountains``\r\n.. _fountains: https://fountains.readthedocs.io/en/2.1.0/_source/fountains.html#fountains.fountains.fountains\r\n\r\nan object of the |fountains|_ class can be used to generate pseudorandom binary test data:\r\n\r\n.. code-block:: python\r\n\r\n    >>> [bs.hex() for bs in fountains(length=3, limit=4)]\r\n    ['e3b0c4', 'ce1bc4', '2ed5b5', '781f5a']\r\n\r\nsupplying a function as a parameter to a |fountains|_ object makes it possible to generate a concise (but necessarily incomplete) specification for that function's behavior on a stream of pseudorandom inputs:\r\n\r\n.. code-block:: python\r\n\r\n    >>> add = lambda bs: bytes([(bs[0] + bs[1] + bs[2]) % 256])\r\n    >>> bits = list(fountains(3, 8, function=add))\r\n    >>> bits\r\n    [0, 0, 1, 1, 1, 0, 1, 0]\r\n\r\nwhen converted to a hexadecimal string, this specification encodes partial information about four distinct input-output test cases in every character:\r\n\r\n.. code-block:: python\r\n\r\n    >>> from bitlist import bitlist\r\n    >>> bitlist(bits).hex()\r\n    '3a' # partial outputs from eight distinct tests.\r\n\r\nsupplying the specification generated in the manner above as an additional parameter makes it possible to test the function's behavior:\r\n\r\n.. code-block:: python\r\n\r\n    >>> list(fountains(3, 8, function=add, bits='3a'))\r\n    [true, true, true, true, true, true, true, true]\r\n\r\neach individual boolean value in the above represents the result of an individual test case. a different function might not satisfy the same partial specification:\r\n\r\n.. code-block:: python\r\n\r\n    >>> mul = lambda bs: bytes([(bs[0] * bs[1] * bs[2]) % 256])\r\n    >>> list(fountains(3, 8, function=mul, bits='3a'))\r\n    [true, false, true, true, false, true, false, true]\r\n\r\neach boolean value in the outputs of the last two code blocks above may be a false negative (i.e., ``true`` may mean that the function satisfies the specification only in a portion of its output for the corresponding input) but is *never a false positive signal of incorrect behavior* (i.e., ``false`` indicates the function does not satisfy the specification for the corresponding input-output pair).\r\n\r\ndevelopment\r\n-----------\r\nall installation and development dependencies are fully specified in ``pyproject.toml``. the ``project.optional-dependencies`` object is used to `specify optional requirements <https://peps.python.org/pep-0621>`__ for various development tasks. this makes it possible to specify additional options (such as ``docs``, ``lint``, and so on) when performing installation using `pip <https://pypi.org/project/pip>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install .[docs,lint]\r\n\r\ndocumentation\r\n^^^^^^^^^^^^^\r\nthe documentation can be generated automatically from the source files using `sphinx <https://www.sphinx-doc.org>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install .[docs]\r\n    cd docs\r\n    sphinx-apidoc -f -e --templatedir=_templates -o _source .. && make html\r\n\r\ntesting and conventions\r\n^^^^^^^^^^^^^^^^^^^^^^^\r\nall unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org>`__ (see the ``pyproject.toml`` file for configuration details):\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install .[test]\r\n    python -m pytest\r\n\r\nalternatively, all unit tests are included in the module itself and can be executed using `doctest <https://docs.python.org/3/library/doctest.html>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python src/fountains/fountains.py -v\r\n\r\nstyle conventions are enforced using `pylint <https://pylint.readthedocs.io>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install .[lint]\r\n    python -m pylint src/fountains\r\n\r\ncontributions\r\n^^^^^^^^^^^^^\r\nin order to contribute to the source code, open an issue or submit a pull request on the `github page <https://github.com/reity/fountains>`__ for this library.\r\n\r\nversioning\r\n^^^^^^^^^^\r\nbeginning with version 0.2.0, the version number format for this library and the changes to the library associated with version number increments conform with `semantic versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`__.\r\n\r\npublishing\r\n^^^^^^^^^^\r\nthis library can be published as a `package on pypi <https://pypi.org/project/fountains>`__ by a package maintainer. first, install the dependencies required for packaging and publishing:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m pip install .[publish]\r\n\r\nensure that the correct version number appears in ``pyproject.toml``, and that any links in this readme document to the read the docs documentation of this package (or its dependencies) have appropriate version numbers. also ensure that the read the docs project for this library has an `automation rule <https://docs.readthedocs.io/en/stable/automation-rules.html>`__ that activates and sets as the default all tagged versions. create and push a tag for this version (replacing ``?.?.?`` with the version number):\r\n\r\n.. code-block:: bash\r\n\r\n    git tag ?.?.?\r\n    git push origin ?.?.?\r\n\r\nremove any old build/distribution files. then, package the source into a distribution archive:\r\n\r\n.. code-block:: bash\r\n\r\n    rm -rf build dist src/*.egg-info\r\n    python -m build --sdist --wheel .\r\n\r\nfinally, upload the package distribution archive to `pypi <https://pypi.org>`__:\r\n\r\n.. code-block:: bash\r\n\r\n    python -m twine upload dist/*\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "fountains",
  "package_url": "https://pypi.org/project/fountains/",
  "project_url": "https://pypi.org/project/fountains/",
  "project_urls": {
    "Documentation": "https://fountains.readthedocs.io",
    "Repository": "https://github.com/reity/fountains"
  },
  "release_url": "https://pypi.org/project/fountains/2.2.0/",
  "requires_dist": [
    "bitlist ~=1.2",
    "coveralls ~=3.3.1 ; extra == 'coveralls'",
    "toml ~=0.10.2 ; extra == 'docs'",
    "sphinx ~=4.2.0 ; extra == 'docs'",
    "sphinx-rtd-theme ~=1.0.0 ; extra == 'docs'",
    "sphinx-autodoc-typehints ~=1.12.0 ; extra == 'docs'",
    "pylint ~=2.17.0 ; extra == 'lint'",
    "build ~=0.10 ; extra == 'publish'",
    "twine ~=4.0 ; extra == 'publish'",
    "pytest ~=7.2 ; extra == 'test'",
    "pytest-cov ~=4.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "python library for generating and concisely specifying reproducible pseudorandom binary data for unit testing.",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "a@lapets.io",
    "andrei_lapets"
  ],
  "kwds": "fountains _fountains reproducible documentation coveralls",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_fountains",
  "homepage": "",
  "release_count": 11,
  "dependency_ids": [
    "pypi_bitlist",
    "pypi_build",
    "pypi_coveralls",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_toml",
    "pypi_twine"
  ]
}
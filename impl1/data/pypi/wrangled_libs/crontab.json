{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "\ncopyright 2011-2021 josiah carlson\n\nreleased under the lgpl license version 2.1 and version 3 (you can choose\nwhich you'd like to be bound under).\n\ndescription\n===========\n\nthis package intends to offer a method of parsing crontab schedule entries and\ndetermining when an item should next be run. more specifically, it calculates\na delay in seconds from when the .next() method is called to when the item\nshould next be executed.\n\ncomparing the below chart to http://en.wikipedia.org/wiki/cron#cron_expression\nyou will note that w and # symbols are not supported.\n\n============= =========== ================= ============== ===========================\nfield name    mandatory   allowed values    default value  allowed special characters\n============= =========== ================= ============== ===========================\nseconds       no          0-59              0              \\* / , -\nminutes       yes         0-59              n/a            \\* / , -\nhours         yes         0-23              n/a            \\* / , -\nday of month  yes         1-31              n/a            \\* / , - ? l\nmonth         yes         1-12 or jan-dec   n/a            \\* / , -\nday of week   yes         0-6 or sun-sat    n/a            \\* / , - ? l\nyear          no          1970-2099         *              \\* / , -\n============= =========== ================= ============== ===========================\n\nif your cron entry has 5 values, minutes-day of week are used, default seconds\nis and default year is appended. if your cron entry has 6 values, minutes-year\nare used, and default seconds are prepended.\n\nas such, only 5-7 value crontab entries are accepted (and mangled to 7 values,\nas necessary).\n\n\nsample individual crontab fields\n================================\n\nexamples of supported entries are as follows::\n\n    *\n    */5\n    7/8\n    3-25/7\n    3,7,9\n    0-10,30-40/5\n\nfor month or day of week entries, 3 letter abbreviations of the month or day\ncan be used to the left of any optional / where a number could be used.\n\nfor days of the week::\n\n    mon-fri\n    sun-thu/2\n\nfor month::\n\n    apr-jul\n    mar-sep/3\n\ninstallation\n============\n\n::\n\n    pip install crontab\n\n\nexample uses\n============\n\n::\n\n    >>> from crontab import crontab\n    >>> from datetime import datetime\n    >>> # define the crontab for 25 minutes past the hour every hour\n    ... entry = crontab('25 * * * *')\n    >>> # find the delay from when this was run (around 11:13am)\n    ... entry.next()\n    720.81637899999998\n    >>> # find the delay from when it was last scheduled\n    ... entry.next(datetime(2011, 7, 17, 11, 25))\n    3600.0\n\n\n\n\nnotes\n=====\n\nat most one of 'day of week' or 'day of month' can be a value other than '?'\nor '*'. we violate spec here and allow '*' to be an alias for '?', in the case\nwhere one of those values is specified (seeing as some platforms don't support\n'?').\n\nthis module also supports the convenient aliases::\n\n    @yearly\n    @annually\n    @monthly\n    @weekly\n    @daily\n    @hourly\n\nexample full crontab entries and their meanings::\n\n    30 */2 * * * -> 30 minutes past the hour every 2 hours\n    15,45 23 * * * -> 11:15pm and 11:45pm every day\n    0 1 ? * sun -> 1am every sunday\n    0 1 * * sun -> 1am every sunday (same as above)\n    0 0 1 jan/2 * 2011-2013 ->\n        midnight on january 1, 2011 and the first of every odd month until\n        the end of 2013\n    24 7 l * * -> 7:24 am on the last day of every month\n    24 7 * * l5 -> 7:24 am on the last friday of every month\n    24 7 * * lwed-fri ->\n        7:24 am on the last wednesday, thursday, and friday of every month\n",
  "docs_url": null,
  "keywords": "",
  "license": "gnu lgpl v2.1",
  "name": "crontab",
  "package_url": "https://pypi.org/project/crontab/",
  "project_url": "https://pypi.org/project/crontab/",
  "project_urls": {
    "Homepage": "https://github.com/josiahcarlson/parse-crontab"
  },
  "release_url": "https://pypi.org/project/crontab/1.0.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "parse and use crontab schedules in python",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "josiah.carlson@gmail.com",
    "josiah_carlson"
  ],
  "kwds": "cron_expression crontab cron scheduled schedule",
  "license_kwds": "gnu lgpl v2.1",
  "libtype": "pypi",
  "id": "pypi_crontab",
  "homepage": "https://github.com/josiahcarlson/parse-crontab",
  "release_count": 26,
  "dependency_ids": []
}
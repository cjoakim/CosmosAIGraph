{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: logging"
  ],
  "description": "pygelf\n======\n|travis| |coveralls| |pypi| |downloads|\n\n.. |travis| image:: https://travis-ci.org/keeprocking/pygelf.svg?branch=master\n    :target: https://travis-ci.org/keeprocking/pygelf\n.. |pypi| image:: https://badge.fury.io/py/pygelf.svg\n    :target: https://pypi.python.org/pypi/pygelf\n.. |coveralls| image:: https://coveralls.io/repos/github/keeprocking/pygelf/badge.svg?branch=master\n    :target: https://coveralls.io/github/keeprocking/pygelf?branch=master\n.. |downloads| image:: https://img.shields.io/pypi/dm/pygelf.svg\n    :target: https://pypi.python.org/pypi/pygelf\n\n\npython logging handlers with gelf (graylog extended log format) support.\n\ncurrently tcp, udp, tls (encrypted tcp) and http logging handlers are supported.\n\nget pygelf\n==========\n.. code:: python\n\n    pip install pygelf\n\nusage\n=====\n\n.. code:: python\n\n    from pygelf import gelftcphandler, gelfudphandler, gelftlshandler, gelfhttphandler\n    import logging\n\n\n    logging.basicconfig(level=logging.info)\n    logger = logging.getlogger()\n    logger.addhandler(gelftcphandler(host='127.0.0.1', port=9401))\n    logger.addhandler(gelfudphandler(host='127.0.0.1', port=9402))\n    logger.addhandler(gelftlshandler(host='127.0.0.1', port=9403))\n    logger.addhandler(gelfhttphandler(host='127.0.0.1', port=9404))\n\n    logger.info('hello gelf')\n\nmessage structure\n=================\n\naccording to the gelf spec, each message has the following mandatory fields:\n\n- **version**: '1.1', can be overridden when creating a logger\n- **short_message**: the log message itself\n- **timestamp**: current timestamp\n- **level**: syslog-compliant_ log level number (e.g. warning will be sent as 4)\n- **host**: hostname of the machine that sent the message\n- **full_message**: this field contains stack trace and is being written **only** when logging an exception, e.g.\n\n.. code:: python\n\n    try:\n        1/0\n    except zerodivisionerror as e:\n        logger.exception(e)\n\n.. _syslog-compliant: https://en.wikipedia.org/wiki/syslog#severity_level\n\nin debug mode (when handler was created with debug=true option) each message contains some extra fields (which are pretty self-explanatory): \n\n- **_file**\n- **_line**\n- **_module**\n- **_func**\n- **_logger_name**\n\nconfiguration\n=============\n\neach handler has the following parameters:\n\n- **host**: ip address of the gelf input\n- **port**: port of the gelf input\n- **debug** (false by default): if true, each log message will include debugging info: module name, file name, line number, method name\n- **version** ('1.1' by default): gelf protocol version, can be overridden\n- **include_extra_fields** (false by default): if true, each log message will include all the extra fields set to logrecord\n- **json_default** (:code:`str` with exception for several :code:`datetime` objects): function that is called for objects that cannot be serialized to json natively by python. default implementation is custom function that returns result of :code:`isoformat()` method for :code:`datetime.datetime`, :code:`datetime.time`, :code:`datetime.date` objects and result of :code:`str(obj)` call for other objects (which is string representation of an object with fallback to :code:`repr`)\n\nalso, there are some handler-specific parameters.\n\nudp:\n\n- **chunk\\_size** (1300 by default) - maximum length of the message. if log length exceeds this value, it splits into multiple chunks (see https://www.graylog.org/resources/gelf/ section \"chunked gelf\") with the length equals to this value. this parameter must be less than the mtu_. if the logs don't seem to be delivered, try to reduce this value.\n- **compress** (true by default) - if true, compress log messages before sending them to the server\n\n.. _mtu: https://en.wikipedia.org/wiki/maximum_transmission_unit\n\ntls:\n\n- **validate** (false by default) - if true, validate server certificate. if server provides a certificate that doesn't exist in **ca_certs**, you won't be able to send logs over tls\n- **ca_certs** (none by default) - path to ca bundle file. this parameter is required if **validate** is true.\n- **certfile** (none by default) - path to certificate file that will be used to identify ourselves to the remote endpoint. this is necessary when the remote server has client authentication required. if **certfile** contains the private key, it should be placed before the certificate.\n- **keyfile** (none by default) - path to the private key. if the private key is stored in **certfile** this parameter can be none.\n\nhttp:\n\n- **compress** (true by default) - if true, compress log messages before sending them to the server\n- **path** ('/gelf' by default) - path of the http input (http://docs.graylog.org/en/latest/pages/sending_data.html#gelf-via-http)\n- **timeout** (5 by default) - amount of seconds that http client should wait before it discards the request if the server doesn't respond\n\nstatic fields\n=============\n\nif you need to include some static fields into your logs, simply pass them to the handler constructor. each additional field should start with underscore. you can't add field '\\_id'.\n\nexample:\n\n.. code:: python\n\n    handler = gelfudphandler(host='127.0.0.1', port=9402, _app_name='pygelf', _something=11)\n    logger.addhandler(handler)\n\ndynamic fields\n==============\n\nif you need to include some dynamic fields into your logs, add them to record by using loggingadapter or logging.filter and create handler with include_extra_fields set to true.\nall the non-trivial fields of the record will be sent to graylog2 with '\\_' added before the name\n\nexample:\n\n.. code:: python\n\n    class contextfilter(logging.filter):\n\n        def filter(self, record):\n            record.job_id = threading.local().process_id\n            return true\n\n    logger.addfilter(contextfilter())\n    handler = gelfudphandler(host='127.0.0.1', port=9402, include_extra_fields=true)\n    logger.addhandler(handler)\n\ndefining fields from environment\n================================\n\nif you need to include some fields from the environment into your logs, add them to record by using `additional_env_fields`.\n\nthe following example will add an `env` field to the logs, taking its value from the environment variable `flask_env`.\n\n.. code:: python\n\n    handler = gelftcphandler(host='127.0.0.1', port=9402, include_extra_fields=true, additional_env_fields={env: 'flask_env'})\n    logger.addhandler(handler)\n\nthe following can also be used in defining logging from configuration files (yaml/ini):\n\n.. code:: ini\n\n    [formatters]\n    keys=standard\n\n    [formatter_standard]\n    class=logging.formatter\n    format=%(message)s\n\n    [handlers]\n    keys=graylog\n\n    [handler_graylog]\n    class=pygelf.gelftcphandler\n    formatter=standard\n    args=('127.0.0.1', '12201')\n    kwargs={'include_extra_fields': true, 'debug': true, 'additional_env_fields': {'env': 'flask_env'}}\n\n    [loggers]\n    keys=root\n\n    [logger_root]\n    level=warn\n    handlers=graylog\n\nrunning tests\n=============\n\nto run tests, you'll need tox_. after installing, simply run it:\n\n.. code::\n\n    tox\n\n.. _tox: https://pypi.python.org/pypi/tox\n\n\n",
  "docs_url": null,
  "keywords": "logging udp tcp ssl tls graylog2 graylog gelf",
  "license": "mit",
  "name": "pygelf",
  "package_url": "https://pypi.org/project/pygelf/",
  "project_url": "https://pypi.org/project/pygelf/",
  "project_urls": {
    "Homepage": "https://github.com/keeprocking/pygelf"
  },
  "release_url": "https://pypi.org/project/pygelf/0.4.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "logging handlers with gelf support",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "ivan_mukhin",
    "muhin.ivan@gmail.com"
  ],
  "kwds": "pygelf tls travis certfile handler_graylog",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pygelf",
  "homepage": "https://github.com/keeprocking/pygelf",
  "release_count": 23,
  "dependency_ids": []
}
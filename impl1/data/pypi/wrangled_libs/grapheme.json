{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "grapheme\n========\n\na python package for working with user perceived characters. more specifically,\nstring manipulation and calculation functions for working with grapheme cluster\ngroups (graphemes) as defined by the `unicode standard annex #29 <http://unicode.org/reports/tr29/>`_.\n\n`documentation <https://grapheme.readthedocs.io/>`_\n\n.. code-block:: console\n\n    pip install grapheme\n\nthe currently supported version of unicode: 13.0.0.\n\nwhat? why?\n==========\n\nunicode strings are made up of a series of unicode characters, but a unicode character does not\nalways map to a user perceived character. some human perceived characters are represented as two\nor more unicode characters.\n\nhowever, all built in python string functions and string methods work with single unicode characters\nwithout considering their connection to each other.\n\n.. code-block:: python\n\n    >>> string = 'u\u0332n\u0332d\u0332e\u0332r\u0332l\u0332i\u0332n\u0332e\u0332d\u0332'\n    >>> len(string)\n    20\n    >>> grapheme.length(string)\n    10\n    >>> string[:3]\n    'u\u0332n'\n    >>> grapheme.substr(string, 0, 3)\n    'u\u0332n\u0332d\u0332'\n\nthis library implements the unicode default rules for extended grapheme clusters, and provides\na set of functions for string manipulation based on graphemes.\n\ndocumentation\n=============\n\nsee `<https://grapheme.readthedocs.io/en/latest/>`_.\n\nwhen should i consider graphemes instead of unicode characters?\n===============================================================\n\nyou should consider working with graphemes over unicode code points when:\n\n* you wish to count characters as perceived by users.\n* you wish to split or truncate text at some user perceived lengths.\n* you wish to split or truncate text without risk of corrupting the characters.\n* formatting text by length, such as creating text based tables in monospaced fonts\n\nyou should work with normal python string functions when:\n\n* you wish to count or split by unicode codepoints for compliance with storage\n  limitations (such as database maximum length)\n* when working with systems that put limits on strings by unicode character\n  lengths\n* when you prioritize performance over correctness (see performance notes below)\n* when working with very long strings (see performance notes below)\n* if simplicity is more important than accuracy\n\nperformance\n===========\n\ncalculating graphemes require traversing the string and checking each character\nagainst a set of rules and the previous character(s). because of this, all\nfunctions in this module will scale linearly to the string length.\n\nwhenever possible, they will only traverse the string for as long as needed and return\nearly as soon as the requested output is generated. for example, the `grapheme.slice`\nfunction only has to traverse the string until the last requested grapheme is found, and\ndoes not care about the rest of the string.\n\nyou should probably only use this package for testing/manipulating fairly short strings\nor with the beginning of long strings.\n\nwhen testing with a string of 10 000 ascii characters, and a 3.1 ghz processor, the execution\ntime for some possible calls is roughly:\n\n================================================================  ==========================\ncode                                                              approximate execution time\n================================================================  ==========================\n`len(long_ascii_string)`                                          8.1e-10 seconds\n`grapheme.length(long_ascii_string)`                              1.5e-04 seconds\n`grapheme.length(long_ascii_string, 500)`                         8.7e-06 seconds\n`long_ascii_string[0:100]`                                        1.3e-09 seconds\n`grapheme.slice(long_ascii_string, 0, 100)`                       2.5e-06 seconds\n`long_ascii_string[:100] in long_ascii_string`                    4.0e-09 seconds\n`grapheme.contains(long_ascii_string, long_ascii_string[:100])`   3.9e-06 seconds\n`long_ascii_string[-100:] in long_ascii_string`                   2.1e-07 seconds\n`grapheme.contains(long_ascii_string, long_ascii_string[-100:])`  1.9e-04 seconds\n================================================================  ==========================\n\nexecution times may improve in later releases, but calculating graphemes is and will continue\nto be notably slower than just counting unicode code points.\n\nexamples of grapheme cluster groups\n===================================\n\nthis is not a complete list, but a some examples of when graphemes use multiple\ncharacters:\n\n* cr+lf\n* hangul (korean)\n* emoji with modifiers\n* combining marks\n* zero width join\n\ndevelopment quick start\n=======================\n\nif you wish to contribute or edit this package, create a fork and clone it.\n\nthen install in locally editable (``-e``) mode and run the tests.\n\n.. code-block:: console\n\n    pip install -e .[test]\n    py.test\n\nunicode version upgrade\n-----------------------\n\nthe library will issue a new release for each new unicode version.\n\nthe steps necessary for this:\n\n1. verify that there has been no material changes to the rulesets in unicode\n   `annex #29 <http://unicode.org/reports/tr29/>`_ (see modifications).\n2. download the `data files <http://www.unicode.org/public/>`_ from unicode into the unicode-data folder.\n   for the given version, some are in `ucd` and some are in `ucd/auxiliary`.\n3. run `make process-data-files` to parse those files (will update the\n   `grapheme_break_property.json` file).\n4. update the unicode version in the documentation and in the source code.\n5. bump the version.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "grapheme",
  "package_url": "https://pypi.org/project/grapheme/",
  "project_url": "https://pypi.org/project/grapheme/",
  "project_urls": {
    "Homepage": "https://github.com/alvinlindstam/grapheme"
  },
  "release_url": "https://pypi.org/project/grapheme/0.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "unicode grapheme helpers",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "alvin.lindstam@gmail.com",
    "alvin_lindstam"
  ],
  "kwds": "graphemes grapheme grapheme_break_property unicode long_ascii_string",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_grapheme",
  "homepage": "https://github.com/alvinlindstam/grapheme",
  "release_count": 7,
  "dependency_ids": []
}
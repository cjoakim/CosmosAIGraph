{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: logo/horizontal.svg\n   :width: 400px\n   :alt: django-sesame\n\ndjango-sesame provides frictionless authentication with \"magic links\" for\nyour django project.\n\nit generates urls containing authentication tokens such as:\nhttps://example.com/?sesame=zxst9d0xt9xgfylvoa9e2myn\n\nthen it authenticates users based on tokens found in urls.\n\nmore broadly, it supports a wide range of `use cases`_ for\nstateless, token-based authentication.\n\nplease review `(in)security`_ considerations before using django-sesame.\n\n----\n\n`documentation is available on readthedocs.`__\n\n----\n\n__ https://django-sesame.readthedocs.io/en/stable/\n\nrequirements\n------------\n\ndjango-sesame is tested with:\n\n- django 3.2 (lts), 4.0, 4.1, 4.2 (lts), and 5.0;\n- python \u2265 3.8.\n\nit requires ``django.contrib.auth``.\n\ngetting started\n---------------\n\ninstall django-sesame:\n\n.. code-block:: console\n\n    $ pip install django-sesame\n\nopen your project settings and add ``\"sesame.backends.modelbackend\"`` to the\n``authentication_backends`` setting. extending the default value, this\nlooks like:\n\n.. code-block:: python\n\n    authentication_backends = [\n        \"django.contrib.auth.backends.modelbackend\",\n        \"sesame.backends.modelbackend\",\n    ]\n\nnow, your project can authenticate users based on django-sesame tokens.\n\nquick example\n-------------\n\nconfigure ``loginview`` in your urlconf:\n\n.. code-block:: python\n\n    from django.urls import path\n    from sesame.views import loginview\n\n    urlpatterns = [\n        ...,\n        path(\"sesame/login/\", loginview.as_view(), name=\"sesame-login\"),\n        ...,\n    ]\n\nload a user from the database:\n\n.. code-block:: pycon\n\n    >>> from django.contrib.auth import get_user_model\n    >>> user = get_user_model()\n    >>> user = user.objects.first()\n\ngenerate a login url for this user:\n\n.. code-block:: pycon\n\n    >>> from sesame.utils import get_query_string\n    >>> login_url = \"https://127.0.0.1:8000/sesame/login/\"\n    >>> login_url + get_query_string(user)\n    'https://127.0.0.1:8000/sesame/login/?sesame=zxst9d0xt9xgfylvoa9e2myn'\n\n(your token will be different from this example.)\n\nmake sure that you're logged out. open the login url. you are logged in!\n\nuse cases\n---------\n\nknown use cases for django-sesame include:\n\n1. login by email, an attractive option on mobile where typing passwords\n   is uncomfortable. this technique is prominently deployed by slack.\n\n   if you're doing this, you should define a small ``sesame_max_age``, perhaps\n   10 minutes.\n\n2. authenticated links. for example, you can generate a report offline\n   and, when it's ready, email a link to access it. authenticated links work\n   even if the user isn't logged in on the device where they're opening it.\n\n   likewise, you should configure an appropriate ``sesame_max_age``,\n   probably a few days.\n\n   since emails may be forwarded, authenticated links shouldn't log the user\n   in. they should only allow access to specific views.\n\n3. sharing links, which are a variant of authenticated links. when a user shares\n   content with a guest, you may create a phantom account for the guest and\n   generate an authenticated link tied to that account or you may reuse the\n   user's account.\n\n   email forwarding is also likely in this context. make sure that sharing links\n   don't log the user in.\n\n4. authentication of websocket connections. the web application gets a token\n   generated by the django server and sends it over the websocket connection.\n   the websocket server authenticate the connection with the token.\n\n   here's an `example with the websockets library`__.\n\n   __ https://websockets.readthedocs.io/en/stable/howto/django.html\n\n5. non-critical private websites, for example for a family or club site,\n   where users don't expect to manage a personal account with a password.\n   authorized users can bookmark personalized authenticated urls.\n\n   here you can rely on the default settings because that's the original \u2014\n   admittedly, niche \u2014 use case for which django-sesame was built.\n\n(in)security\n------------\n\nthe major security weakness in django-sesame is a direct consequence of the\nfeature it implements: **whoever obtains an authentication token is able to\nauthenticate to your website.**\n\nurls end up in countless insecure places: emails, referer headers, proxy logs,\nbrowser history, etc. you can't avoid that. at best you can mitigate it by\ncreating short-lived or single-use tokens.\n\notherwise, a reasonable attempt was made to provide a secure solution. tokens\nare secured with modern cryptography. there are configurable options for token\ninvalidation.\n",
  "docs_url": null,
  "keywords": "authentication,token-based-authentication",
  "license": "bsd-3-clause",
  "name": "django-sesame",
  "package_url": "https://pypi.org/project/django-sesame/",
  "project_url": "https://pypi.org/project/django-sesame/",
  "project_urls": {
    "Documentation": "https://django-sesame.readthedocs.io/",
    "Homepage": "https://github.com/aaugustin/django-sesame",
    "Repository": "https://github.com/aaugustin/django-sesame"
  },
  "release_url": "https://pypi.org/project/django-sesame/3.2.2/",
  "requires_dist": [
    "django (>=3.2)",
    "ua-parser (>=0.15) ; extra == \"ua\""
  ],
  "requires_python": ">=3.8",
  "summary": "frictionless authentication with \"magic links\" for your django project.",
  "version": "3.2.2",
  "releases": [],
  "developers": [
    "aymeric.augustin@m4x.org",
    "aymeric_augustin"
  ],
  "kwds": "sesame sesame_max_age django authentication_backends token",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_django_sesame",
  "homepage": "https://github.com/aaugustin/django-sesame",
  "release_count": 20,
  "dependency_ids": [
    "pypi_django",
    "pypi_ua_parser"
  ]
}
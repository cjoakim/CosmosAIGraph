{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: internet"
  ],
  "description": "google cloud python client\n==========================\n\n    python idiomatic client for `google cloud platform`_ services.\n\n.. _google cloud platform: https://cloud.google.com/\n\n|pypi| |versions|\n\n``google-cloud``\n----------------\n\n**warning**: this package has moved. it has been renamed to\n`google-cloud on pypi`_. no new releases will be made for\n``gcloud``.\n\n.. _google-cloud on pypi: https://pypi.python.org/pypi/google-cloud\n\noverview\n--------\n\n-  `homepage`_\n-  `api documentation`_\n\n.. _homepage: https://googlecloudplatform.github.io/gcloud-python/\n.. _api documentation: http://googlecloudplatform.github.io/gcloud-python/stable/\n\nthis client supports the following google cloud platform services:\n\n-  google cloud `datastore`_\n-  google cloud `storage`_\n-  google cloud `pub/sub`_\n-  google `bigquery`_\n-  google cloud `resource manager`_\n-  google `stackdriver logging`_\n\n.. _datastore: https://github.com/googlecloudplatform/gcloud-python#google-cloud-datastore\n.. _storage: https://github.com/googlecloudplatform/gcloud-python#google-cloud-storage\n.. _pub/sub: https://github.com/googlecloudplatform/gcloud-python#google-cloud-pubsub\n.. _bigquery: https://github.com/googlecloudplatform/gcloud-python#google-bigquery\n.. _resource manager: https://github.com/googlecloudplatform/gcloud-python#google-cloud-resource-manager\n.. _stackdriver logging: https://github.com/googlecloudplatform/gcloud-python#google-cloud-logging\n\nif you need support for other google apis, check out the\n`google apis python client library`_.\n\n.. _google apis python client library: https://github.com/google/google-api-python-client\n\nquick start\n-----------\n\n::\n\n    $ pip install --upgrade gcloud\n\nexample applications\n--------------------\n\n-  `getting-started-python`_ - a sample and `tutorial`_ that demonstrates how to build a complete web application using cloud datastore, cloud storage, and cloud pub/sub and deploy it to google app engine or google compute engine.\n-  `gcloud-python-expenses-demo`_ - a sample expenses demo using cloud datastore and cloud storage\n\n.. _getting-started-python: https://github.com/googlecloudplatform/getting-started-python\n.. _tutorial: https://cloud.google.com/python\n.. _gcloud-python-expenses-demo: https://github.com/googlecloudplatform/gcloud-python-expenses-demo\n\nauthentication\n--------------\n\nwith ``gcloud-python`` we try to make authentication as painless as possible.\ncheck out the `authentication section`_ in our documentation to learn more.\nyou may also find the `authentication document`_ shared by all the ``gcloud-*``\nlibraries to be helpful.\n\n.. _authentication section: http://gcloud-python.readthedocs.org/en/latest/gcloud-auth.html\n.. _authentication document: https://github.com/googlecloudplatform/gcloud-common/tree/master/authentication\n\ngoogle cloud datastore\n----------------------\n\ngoogle `cloud datastore`_ (`datastore api docs`_) is a fully managed, schemaless\ndatabase for storing non-relational data. cloud datastore automatically scales\nwith your users and supports acid transactions, high availability of reads and\nwrites, strong consistency for reads and ancestor queries, and eventual\nconsistency for all other queries.\n\n.. _cloud datastore: https://cloud.google.com/datastore/docs\n.. _datastore api docs: https://cloud.google.com/datastore/docs/apis/v1beta3/\n\nsee the ``gcloud-python`` api `datastore documentation`_ to learn how to\ninteract with the cloud datastore using this client library.\n\n.. _datastore documentation: https://googlecloudplatform.github.io/gcloud-python/stable/datastore-client.html\n\nsee the `official google cloud datastore documentation`_ for more details on how\nto activate cloud datastore for your project.\n\n.. _official google cloud datastore documentation: https://cloud.google.com/datastore/docs/activate\n\n.. code:: python\n\n    from gcloud import datastore\n    # create, populate and persist an entity\n    entity = datastore.entity(key=datastore.key('entitykind'))\n    entity.update({\n        'foo': u'bar',\n        'baz': 1337,\n        'qux': false,\n    })\n    # then query for entities\n    query = datastore.query(kind='entitykind')\n    for result in query.fetch():\n        print result\n\ngoogle cloud storage\n--------------------\n\ngoogle `cloud storage`_ (`storage api docs`_) allows you to store data on google\ninfrastructure with very high reliability, performance and availability, and can\nbe used to distribute large data objects to users via direct download.\n\n.. _cloud storage: https://cloud.google.com/storage/docs\n.. _storage api docs: https://cloud.google.com/storage/docs/json_api/v1\n\nsee the ``gcloud-python`` api `storage documentation`_ to learn how to connect\nto cloud storage using this client library.\n\n.. _storage documentation: https://googlecloudplatform.github.io/gcloud-python/stable/storage-client.html\n\nyou need to create a google cloud storage bucket to use this client library.\nfollow along with the `official google cloud storage documentation`_ to learn\nhow to create a bucket.\n\n.. _official google cloud storage documentation: https://cloud.google.com/storage/docs/cloud-console#_creatingbuckets\n\n.. code:: python\n\n    from gcloud import storage\n    client = storage.client()\n    bucket = client.get_bucket('bucket-id-here')\n    # then do other things...\n    blob = bucket.get_blob('remote/path/to/file.txt')\n    print blob.download_as_string()\n    blob.upload_from_string('new contents!')\n    blob2 = bucket.blob('remote/path/storage.txt')\n    blob2.upload_from_filename(filename='/local/path.txt')\n\ngoogle cloud pub/sub\n--------------------\n\ngoogle `cloud pub/sub`_ (`pub/sub api docs`_) is designed to provide reliable,\nmany-to-many, asynchronous messaging between applications. publisher\napplications can send messages to a ``topic`` and other applications can\nsubscribe to that topic to receive the messages. by decoupling senders and\nreceivers, google cloud pub/sub allows developers to communicate between\nindependently written applications.\n\n.. _cloud pub/sub: https://cloud.google.com/pubsub/docs\n.. _pub/sub api docs: https://cloud.google.com/pubsub/reference/rest/\n\nsee the ``gcloud-python`` api `pub/sub documentation`_ to learn how to connect\nto cloud pub/sub using this client library.\n\n.. _pub/sub documentation: https://googlecloudplatform.github.io/gcloud-python/stable/pubsub-usage.html\n\nto get started with this api, you'll need to create\n\n.. code:: python\n\n    from gcloud import pubsub\n\n    client = pubsub.client()\n    topic = client.topic('topic_name')\n    topic.create()\n\n    topic.publish('this is the message_payload',\n                  attr1='value1', attr2='value2')\n\ngoogle bigquery\n---------------\n\nquerying massive datasets can be time consuming and expensive without the\nright hardware and infrastructure. google\n`bigquery`__ (`bigquery api docs`_)\nsolves this problem by enabling super-fast, sql-like queries against\nappend-only tables, using the processing power of google's infrastructure.\n\n.. _bq-indirect: https://cloud.google.com/bigquery/what-is-bigquery\n.. _bigquery api docs: https://cloud.google.com/bigquery/docs/reference/v2/\n__ `bq-indirect`_\n\nthis package is still being implemented, but it is almost complete!\n\nload data from csv\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import csv\n\n    from gcloud import bigquery\n    from gcloud.bigquery import schemafield\n\n    client = bigquery.client()\n\n    dataset = client.dataset('dataset_name')\n    dataset.create()  # api request\n\n    schema = [\n        schemafield('full_name', 'string', mode='required'),\n        schemafield('age', 'integer', mode='required'),\n    ]\n    table = dataset.table('table_name', schema)\n    table.create()\n\n    with open('csv_file', 'rb') as readable:\n        table.upload_from_file(\n            readable, source_format='csv', skip_leading_rows=1)\n\nperform a synchronous query\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # perform a synchronous query.\n    query = (\n        'select name from [bigquery-public-data:usa_names.usa_1910_2013] '\n        'where state = \"tx\"')\n    query = client.run_sync_query('%s limit 100' % query)\n    query.timeout_ms = timeout_ms\n    query.run()\n\n    for row in query.rows:\n        print row\n\n\nsee the ``gcloud-python`` api `bigquery documentation`_ to learn how to connect\nto bigquery using this client library.\n\n.. _bigquery documentation: https://googlecloudplatform.github.io/gcloud-python/stable/bigquery-usage.html\n\ngoogle cloud resource manager\n-----------------------------\n\nthe cloud `resource manager`__ api (`resource manager api docs`_) provides\nmethods that you can use to programmatically manage your projects in the\ngoogle cloud platform.\n\n.. _rm-indirect: https://cloud.google.com/resource-manager/\n.. _resource manager api docs: https://cloud.google.com/resource-manager/reference/rest/\n__ `rm-indirect`_\n\nsee the ``gcloud-python`` api `resource manager documentation`_ to learn how to\nmanage projects using this client library.\n\n.. _resource manager documentation: https://googlecloudplatform.github.io/gcloud-python/stable/resource-manager-api.html\n\ngoogle stackdriver logging\n--------------------------\n\n`stackdriver logging`__ api (`logging api docs`_) allows you to store, search,\nanalyze, monitor, and alert on log data and events from google cloud platform.\n\n.. _sl-indirect: https://cloud.google.com/logging/\n.. _logging api docs: https://cloud.google.com/logging/docs/\n__ `sl-indirect`_\n\n.. code:: python\n\n    from gcloud import logging\n    client = logging.client()\n    logger = client.logger('log_name')\n    logger.log_text(\"a simple entry\")  # api call\n\nexample of fetching entries:\n\n.. code:: python\n\n    entries, token = logger.list_entries()\n    for entry in entries:\n        print entry.payload\n\nsee the ``gcloud-python`` api `logging documentation`_ to learn how to connect\nto stackdriver logging using this client library.\n\n.. _logging documentation: https://googlecloudplatform.github.io/gcloud-python/stable/logging-usage.html\n\ncontributing\n------------\n\ncontributions to this library are always welcome and highly encouraged.\n\nsee `contributing doc`_ for more information on how to get started.\n\n.. _contributing doc: https://github.com/googlecloudplatform/gcloud-python/blob/master/contributing.rst\n\nlicense\n-------\n\napache 2.0 - see `the license`_ for more information.\n\n.. _the license: https://github.com/googlecloudplatform/gcloud-python/blob/master/license\n\n.. |build| image:: https://travis-ci.org/googlecloudplatform/gcloud-python.svg?branch=master\n   :target: https://travis-ci.org/googlecloudplatform/gcloud-python\n.. |coverage| image:: https://codecov.io/gh/googlecloudplatform/gcloud-python/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/googlecloudplatform/gcloud-python\n.. |pypi| image:: https://img.shields.io/pypi/v/gcloud.svg\n   :target: https://pypi.python.org/pypi/gcloud\n.. |versions| image:: https://img.shields.io/pypi/pyversions/gcloud.svg\n   :target: https://pypi.python.org/pypi/gcloud",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "gcloud",
  "package_url": "https://pypi.org/project/gcloud/",
  "project_url": "https://pypi.org/project/gcloud/",
  "project_urls": {
    "Homepage": "https://github.com/GoogleCloudPlatform/gcloud-python"
  },
  "release_url": "https://pypi.org/project/gcloud/0.18.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "api client library for google cloud",
  "version": "0.18.3",
  "releases": [],
  "developers": [
    "google_cloud_platform",
    "jjg"
  ],
  "kwds": "googlecloudplatform _gcloud gcloud _cloud cloud",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_gcloud",
  "homepage": "https://github.com/googlecloudplatform/gcloud-python",
  "release_count": 30,
  "dependency_ids": []
}
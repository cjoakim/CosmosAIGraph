{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: cc0 1.0 universal (cc0 1.0) public domain dedication",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: hardware"
  ],
  "description": "cpufeature\n==========\n\ncpufeature is a tool for detecting cpu features on x86/amd64 processors. in particular it is engineered to have very low overhead on import (~ 1 ms) and to detect features that are often important in high-performance computing where hybrid combinations of multi-threading and multi-processing are used. detects cpu features such as:\n\n* simd instruction support\n* number of cores (both virtual and physical)\n* number of cpus on the motherboard.\n* cache sizes\n\nit is written in c99. it supports windows with msvc and linux with gcc/llvm compilers. macosx should also work with gcc/llvm. cpufeature is licensed under creative commons zero, so it may be freely incorporated as a submodule into your own projects.\n\ncpufeature is considered to be in an alpha state because while it is tested via github actions on a variety of platforms, we expect edge cases to appear.\n\nexample\n-------\n\nthe module generates a `dict` called `cpufeature` on import which contains useful information regarding optimization and compilation for the host. for my intel i7-7820x skylake cpu, it generates the following info:\n\n```\n    > python -c \"import cpufeature; cpufeature.print_features()\"\n  === cpu features ===\n      vendorid                : genuineintel\n      num_virtual_cores       : 16\n      num_physical_cores      : 8\n      num_threads_per_core    : 2\n      num_cpus                : 1\n      cache_line_size         : 64\n      cache_l1_size           : 32768\n      cache_l2_size           : 1048576\n      cache_l3_size           : 11534336\n      os_x64                  : true\n      os_avx                  : true\n      os_avx512               : true\n      mmx                     : true\n      x64                     : true\n      abm                     : true\n      rdrand                  : true\n      bmi1                    : true\n      bmi2                    : true\n      adx                     : true\n      prefetchwt1             : false\n      mpx                     : true\n      sse                     : true\n      sse2                    : true\n      sse3                    : true\n      ssse3                   : true\n      sse4.1                  : true\n      sse4.2                  : true\n      sse4.a                  : false\n      aes                     : true\n      sha                     : false\n      avx                     : true\n      xop                     : false\n      fma3                    : true\n      fma4                    : false\n      avx2                    : true\n      avx512f                 : true\n      avx512pf                : false\n      avx512er                : false\n      avx512cd                : true\n      avx512vl                : true\n      avx512bw                : true\n      avx512dq                : true\n      avx512ifma              : false\n      avx512vbmi              : false\n      avx512vbmi2             : false\n      avx512vnni              : false\n```\n\nnotes on fields\n---------------\n\n* if `num_threads_per_core > 1` likely intel hyperthreading (or equivalent architecture) is present. the physical core count may be unreliable in virtual environments.\n* cache sizes are in bytes.\n* for avx2, check `avx2` and `os_avx2`.\n* for avx512, check `avx512f` and `os_avx512`. python support for avx512 instructions is highly limited outside of compilation with icc. msvc does not have avx512 support until msvc2017.\n\nauthors\n-------\n\n* based on featuredetector by alexander yee (https://github.com/mysticial/featuredetector).\n* ported to python by robert a. mcleod, who added detection of cores, and cache sizes.\n* `drfinkus` contributed to amd support.\n* `widgeta` contributed support for compilation with clang.\n\nrelease notes\n-------------\n\n### 0.2.1 ###\n\n* supported python versions are now 3.8 - 3.11.\n* added tests for avx512vbmi2 and avx512vnni.\n\n### 0.2.0 ###\n\n* added pre-build wheels via `cibuildwheels` and github actions for python 3.6-3.9 on linux/windows/macosx.\n* added support for amd processors.\n* added a script for `valgrind` to more easier locate problems when the module crashes.\n\n### 0.1.1 ###\n\n* fixes for compilation with `clang`.\n\n### 0.1.0 ###\n\n* added detection of processors, cores, and cache sizes\n* created python wrapper around featuredetector\n* reduced featuredetector to c99 for better cross-platform compatibility\n",
  "docs_url": null,
  "keywords": "",
  "license": "https://creativecommons.org/publicdomain/zero/1.0/legalcode",
  "name": "cpufeature",
  "package_url": "https://pypi.org/project/cpufeature/",
  "project_url": "https://pypi.org/project/cpufeature/",
  "project_urls": {
    "Homepage": "http://github.com/robbmcleod/cpufeature"
  },
  "release_url": "https://pypi.org/project/cpufeature/0.2.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python cpu feature detection",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "robbmcleod@gmail.com",
    "robert_a"
  ],
  "kwds": "cpufeature num_cpus cpus cpu processors",
  "license_kwds": "https://creativecommons.org/publicdomain/zero/1.0/legalcode",
  "libtype": "pypi",
  "id": "pypi_cpufeature",
  "homepage": "http://github.com/robbmcleod/cpufeature",
  "release_count": 4,
  "dependency_ids": []
}
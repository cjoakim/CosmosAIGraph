{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: rust",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "<!-- begin section: overview -->\n\n# ruff\n\n[![ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![image](https://img.shields.io/pypi/v/ruff.svg)](https://pypi.python.org/pypi/ruff)\n[![image](https://img.shields.io/pypi/l/ruff.svg)](https://pypi.python.org/pypi/ruff)\n[![image](https://img.shields.io/pypi/pyversions/ruff.svg)](https://pypi.python.org/pypi/ruff)\n[![actions status](https://github.com/astral-sh/ruff/workflows/ci/badge.svg)](https://github.com/astral-sh/ruff/actions)\n\n[**discord**](https://discord.gg/c9mhzv8au5) | [**docs**](https://docs.astral.sh/ruff/) | [**playground**](https://play.ruff.rs/)\n\nan extremely fast python linter and code formatter, written in rust.\n\n<p align=\"center\">\n  <img alt=\"shows a bar chart with benchmark results.\" src=\"https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg\">\n</p>\n\n<p align=\"center\">\n  <i>linting the cpython codebase from scratch.</i>\n</p>\n\n- \u26a1\ufe0f 10-100x faster than existing linters (like flake8) and formatters (like black)\n- \ud83d\udc0d installable via `pip`\n- \ud83d\udee0\ufe0f `pyproject.toml` support\n- \ud83e\udd1d python 3.12 compatibility\n- \u2696\ufe0f drop-in parity with [flake8](https://docs.astral.sh/ruff/faq/#how-does-ruff-compare-to-flake8), isort, and black\n- \ud83d\udce6 built-in caching, to avoid re-analyzing unchanged files\n- \ud83d\udd27 fix support, for automatic error correction (e.g., automatically remove unused imports)\n- \ud83d\udccf over [700 built-in rules](https://docs.astral.sh/ruff/rules/), with native re-implementations\n    of popular flake8 plugins, like flake8-bugbear\n- \u2328\ufe0f first-party [editor integrations](https://docs.astral.sh/ruff/integrations/) for\n    [vs code](https://github.com/astral-sh/ruff-vscode) and [more](https://github.com/astral-sh/ruff-lsp)\n- \ud83c\udf0e monorepo-friendly, with [hierarchical and cascading configuration](https://docs.astral.sh/ruff/configuration/#pyprojecttoml-discovery)\n\nruff aims to be orders of magnitude faster than alternative tools while integrating more\nfunctionality behind a single, common interface.\n\nruff can be used to replace [flake8](https://pypi.org/project/flake8/) (plus dozens of plugins),\n[black](https://github.com/psf/black), [isort](https://pypi.org/project/isort/),\n[pydocstyle](https://pypi.org/project/pydocstyle/), [pyupgrade](https://pypi.org/project/pyupgrade/),\n[autoflake](https://pypi.org/project/autoflake/), and more, all while executing tens or hundreds of\ntimes faster than any individual tool.\n\nruff is extremely actively developed and used in major open-source projects like:\n\n- [apache airflow](https://github.com/apache/airflow)\n- [fastapi](https://github.com/tiangolo/fastapi)\n- [hugging face](https://github.com/huggingface/transformers)\n- [pandas](https://github.com/pandas-dev/pandas)\n- [scipy](https://github.com/scipy/scipy)\n\n...and [many more](#whos-using-ruff).\n\nruff is backed by [astral](https://astral.sh). read the [launch post](https://astral.sh/blog/announcing-astral-the-company-behind-ruff),\nor the original [project announcement](https://notes.crmarsh.com/python-tooling-could-be-much-much-faster).\n\n## testimonials\n\n[**sebasti\u00e1n ram\u00edrez**](https://twitter.com/tiangolo/status/1591912354882764802), creator\nof [fastapi](https://github.com/tiangolo/fastapi):\n\n> ruff is so fast that sometimes i add an intentional bug in the code just to confirm it's actually\n> running and checking the code.\n\n[**nick schrock**](https://twitter.com/schrockn/status/1612615862904827904), founder of [elementl](https://www.elementl.com/),\nco-creator of [graphql](https://graphql.org/):\n\n> why is ruff a gamechanger? primarily because it is nearly 1000x faster. literally. not a typo. on\n> our largest module (dagster itself, 250k loc) pylint takes about 2.5 minutes, parallelized across 4\n> cores on my m1. running ruff against our _entire_ codebase takes .4 seconds.\n\n[**bryan van de ven**](https://github.com/bokeh/bokeh/pull/12605), co-creator\nof [bokeh](https://github.com/bokeh/bokeh/), original author\nof [conda](https://docs.conda.io/en/latest/):\n\n> ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of\n> ~20s. this is an enormous quality of life improvement for local dev. it's fast enough that i added\n> it as an actual commit hook, which is terrific.\n\n[**timothy crosley**](https://twitter.com/timothycrosley/status/1606420868514877440),\ncreator of [isort](https://github.com/pycqa/isort):\n\n> just switched my first project to ruff. only one downside so far: it's so fast i couldn't believe\n> it was working till i intentionally introduced some errors.\n\n[**tim abbott**](https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028), lead\ndeveloper of [zulip](https://github.com/zulip/zulip):\n\n> this is just ridiculously fast... `ruff` is amazing.\n\n<!-- end section: overview -->\n\n## table of contents\n\nfor more, see the [documentation](https://docs.astral.sh/ruff/).\n\n1. [getting started](#getting-started)\n1. [configuration](#configuration)\n1. [rules](#rules)\n1. [contributing](#contributing)\n1. [support](#support)\n1. [acknowledgements](#acknowledgements)\n1. [who's using ruff?](#whos-using-ruff)\n1. [license](#license)\n\n## getting started\n\nfor more, see the [documentation](https://docs.astral.sh/ruff/).\n\n### installation\n\nruff is available as [`ruff`](https://pypi.org/project/ruff/) on pypi:\n\n```shell\npip install ruff\n```\n\nyou can also install ruff via [homebrew](https://formulae.brew.sh/formula/ruff), [conda](https://anaconda.org/conda-forge/ruff),\nand with [a variety of other package managers](https://docs.astral.sh/ruff/installation/).\n\n### usage\n\nto run ruff as a linter, try any of the following:\n\n```shell\nruff check .                        # lint all files in the current directory (and any subdirectories).\nruff check path/to/code/            # lint all files in `/path/to/code` (and any subdirectories).\nruff check path/to/code/*.py        # lint all `.py` files in `/path/to/code`.\nruff check path/to/code/to/file.py  # lint `file.py`.\nruff check @arguments.txt           # lint using an input file, treating its contents as newline-delimited command-line arguments.\n```\n\nor, to run ruff as a formatter:\n\n```shell\nruff format .                        # format all files in the current directory (and any subdirectories).\nruff format path/to/code/            # format all files in `/path/to/code` (and any subdirectories).\nruff format path/to/code/*.py        # format all `.py` files in `/path/to/code`.\nruff format path/to/code/to/file.py  # format `file.py`.\nruff format @arguments.txt           # format using an input file, treating its contents as newline-delimited command-line arguments.\n```\n\nruff can also be used as a [pre-commit](https://pre-commit.com/) hook via [`ruff-pre-commit`](https://github.com/astral-sh/ruff-pre-commit):\n\n```yaml\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # ruff version.\n  rev: v0.1.9\n  hooks:\n    # run the linter.\n    - id: ruff\n      args: [ --fix ]\n    # run the formatter.\n    - id: ruff-format\n```\n\nruff can also be used as a [vs code extension](https://github.com/astral-sh/ruff-vscode) or\nalongside any other editor through the [ruff lsp](https://github.com/astral-sh/ruff-lsp).\n\nruff can also be used as a [github action](https://github.com/features/actions) via\n[`ruff-action`](https://github.com/chartboost/ruff-action):\n\n```yaml\nname: ruff\non: [ push, pull_request ]\njobs:\n  ruff:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: chartboost/ruff-action@v1\n```\n\n### configuration\n\nruff can be configured through a `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (see:\n[_configuration_](https://docs.astral.sh/ruff/configuration/), or [_settings_](https://docs.astral.sh/ruff/settings/)\nfor a complete list of all configuration options).\n\nif left unspecified, ruff's default configuration is equivalent to:\n\n```toml\n[tool.ruff]\n# exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pyenv\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"site-packages\",\n    \"venv\",\n]\n\n# same as black.\nline-length = 88\nindent-width = 4\n\n# assume python 3.8\ntarget-version = \"py38\"\n\n[tool.ruff.lint]\n# enable pyflakes (`f`) and a subset of the pycodestyle (`e`)  codes by default.\nselect = [\"e4\", \"e7\", \"e9\", \"f\"]\nignore = []\n\n# allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"all\"]\nunfixable = []\n\n# allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-za-z0-9_]*[a-za-z0-9]+?))$\"\n\n[tool.ruff.format]\n# like black, use double quotes for strings.\nquote-style = \"double\"\n\n# like black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# like black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# like black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n```\n\nsome configuration options can be provided via the command-line, such as those related to\nrule enablement and disablement, file discovery, and logging level:\n\n```shell\nruff check path/to/code/ --select f401 --select f403 --quiet\n```\n\nsee `ruff help` for more on ruff's top-level commands, or `ruff help check` and `ruff help format`\nfor more on the linting and formatting commands, respectively.\n\n## rules\n\n<!-- begin section: rules -->\n\n**ruff supports over 700 lint rules**, many of which are inspired by popular tools like flake8,\nisort, pyupgrade, and others. regardless of the rule's origin, ruff re-implements every rule in\nrust as a first-party feature.\n\nby default, ruff enables flake8's `f` rules, along with a subset of the `e` rules, omitting any\nstylistic rules that overlap with the use of a formatter, like `ruff format` or\n[black](https://github.com/psf/black).\n\nif you're just getting started with ruff, **the default rule set is a great place to start**: it\ncatches a wide variety of common errors (like unused imports) with zero configuration.\n\n<!-- end section: rules -->\n\nbeyond the defaults, ruff re-implements some of the most popular flake8 plugins and related code\nquality tools, including:\n\n- [autoflake](https://pypi.org/project/autoflake/)\n- [eradicate](https://pypi.org/project/eradicate/)\n- [flake8-2020](https://pypi.org/project/flake8-2020/)\n- [flake8-annotations](https://pypi.org/project/flake8-annotations/)\n- [flake8-async](https://pypi.org/project/flake8-async)\n- [flake8-bandit](https://pypi.org/project/flake8-bandit/) ([#1646](https://github.com/astral-sh/ruff/issues/1646))\n- [flake8-blind-except](https://pypi.org/project/flake8-blind-except/)\n- [flake8-boolean-trap](https://pypi.org/project/flake8-boolean-trap/)\n- [flake8-bugbear](https://pypi.org/project/flake8-bugbear/)\n- [flake8-builtins](https://pypi.org/project/flake8-builtins/)\n- [flake8-commas](https://pypi.org/project/flake8-commas/)\n- [flake8-comprehensions](https://pypi.org/project/flake8-comprehensions/)\n- [flake8-copyright](https://pypi.org/project/flake8-copyright/)\n- [flake8-datetimez](https://pypi.org/project/flake8-datetimez/)\n- [flake8-debugger](https://pypi.org/project/flake8-debugger/)\n- [flake8-django](https://pypi.org/project/flake8-django/)\n- [flake8-docstrings](https://pypi.org/project/flake8-docstrings/)\n- [flake8-eradicate](https://pypi.org/project/flake8-eradicate/)\n- [flake8-errmsg](https://pypi.org/project/flake8-errmsg/)\n- [flake8-executable](https://pypi.org/project/flake8-executable/)\n- [flake8-future-annotations](https://pypi.org/project/flake8-future-annotations/)\n- [flake8-gettext](https://pypi.org/project/flake8-gettext/)\n- [flake8-implicit-str-concat](https://pypi.org/project/flake8-implicit-str-concat/)\n- [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)\n- [flake8-logging](https://pypi.org/project/flake8-logging/)\n- [flake8-logging-format](https://pypi.org/project/flake8-logging-format/)\n- [flake8-no-pep420](https://pypi.org/project/flake8-no-pep420)\n- [flake8-pie](https://pypi.org/project/flake8-pie/)\n- [flake8-print](https://pypi.org/project/flake8-print/)\n- [flake8-pyi](https://pypi.org/project/flake8-pyi/)\n- [flake8-pytest-style](https://pypi.org/project/flake8-pytest-style/)\n- [flake8-quotes](https://pypi.org/project/flake8-quotes/)\n- [flake8-raise](https://pypi.org/project/flake8-raise/)\n- [flake8-return](https://pypi.org/project/flake8-return/)\n- [flake8-self](https://pypi.org/project/flake8-self/)\n- [flake8-simplify](https://pypi.org/project/flake8-simplify/)\n- [flake8-slots](https://pypi.org/project/flake8-slots/)\n- [flake8-super](https://pypi.org/project/flake8-super/)\n- [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)\n- [flake8-todos](https://pypi.org/project/flake8-todos/)\n- [flake8-trio](https://pypi.org/project/flake8-trio/)\n- [flake8-type-checking](https://pypi.org/project/flake8-type-checking/)\n- [flake8-use-pathlib](https://pypi.org/project/flake8-use-pathlib/)\n- [flynt](https://pypi.org/project/flynt/) ([#2102](https://github.com/astral-sh/ruff/issues/2102))\n- [isort](https://pypi.org/project/isort/)\n- [mccabe](https://pypi.org/project/mccabe/)\n- [pandas-vet](https://pypi.org/project/pandas-vet/)\n- [pep8-naming](https://pypi.org/project/pep8-naming/)\n- [pydocstyle](https://pypi.org/project/pydocstyle/)\n- [pygrep-hooks](https://github.com/pre-commit/pygrep-hooks)\n- [pylint-airflow](https://pypi.org/project/pylint-airflow/)\n- [pyupgrade](https://pypi.org/project/pyupgrade/)\n- [tryceratops](https://pypi.org/project/tryceratops/)\n- [yesqa](https://pypi.org/project/yesqa/)\n\nfor a complete enumeration of the supported rules, see [_rules_](https://docs.astral.sh/ruff/rules/).\n\n## contributing\n\ncontributions are welcome and highly appreciated. to get started, check out the\n[**contributing guidelines**](https://docs.astral.sh/ruff/contributing/).\n\nyou can also join us on [**discord**](https://discord.gg/c9mhzv8au5).\n\n## support\n\nhaving trouble? check out the existing issues on [**github**](https://github.com/astral-sh/ruff/issues),\nor feel free to [**open a new one**](https://github.com/astral-sh/ruff/issues/new).\n\nyou can also ask for help on [**discord**](https://discord.gg/c9mhzv8au5).\n\n## acknowledgements\n\nruff's linter draws on both the apis and implementation details of many other\ntools in the python ecosystem, especially [flake8](https://github.com/pycqa/flake8), [pyflakes](https://github.com/pycqa/pyflakes),\n[pycodestyle](https://github.com/pycqa/pycodestyle), [pydocstyle](https://github.com/pycqa/pydocstyle),\n[pyupgrade](https://github.com/asottile/pyupgrade), and [isort](https://github.com/pycqa/isort).\n\nin some cases, ruff includes a \"direct\" rust port of the corresponding tool.\nwe're grateful to the maintainers of these tools for their work, and for all\nthe value they've provided to the python community.\n\nruff's formatter is built on a fork of rome's [`rome_formatter`](https://github.com/rome/tools/tree/main/crates/rome_formatter),\nand again draws on both api and implementation details from [rome](https://github.com/rome/tools),\n[prettier](https://github.com/prettier/prettier), and [black](https://github.com/psf/black).\n\nruff's import resolver is based on the import resolution algorithm from [pyright](https://github.com/microsoft/pyright).\n\nruff is also influenced by a number of tools outside the python ecosystem, like\n[clippy](https://github.com/rust-lang/rust-clippy) and [eslint](https://github.com/eslint/eslint).\n\nruff is the beneficiary of a large number of [contributors](https://github.com/astral-sh/ruff/graphs/contributors).\n\nruff is released under the mit license.\n\n## who's using ruff?\n\nruff is used by a number of major open-source projects and companies, including:\n\n- amazon ([aws sam](https://github.com/aws/serverless-application-model))\n- anthropic ([python sdk](https://github.com/anthropics/anthropic-sdk-python))\n- [apache airflow](https://github.com/apache/airflow)\n- astrazeneca ([magnus](https://github.com/astrazeneca/magnus-core))\n- [babel](https://github.com/python-babel/babel)\n- benchling ([refac](https://github.com/benchling/refac))\n- [bokeh](https://github.com/bokeh/bokeh)\n- [cryptography (pyca)](https://github.com/pyca/cryptography)\n- [dvc](https://github.com/iterative/dvc)\n- [dagger](https://github.com/dagger/dagger)\n- [dagster](https://github.com/dagster-io/dagster)\n- databricks ([mlflow](https://github.com/mlflow/mlflow))\n- [fastapi](https://github.com/tiangolo/fastapi)\n- [gradio](https://github.com/gradio-app/gradio)\n- [great expectations](https://github.com/great-expectations/great_expectations)\n- [httpx](https://github.com/encode/httpx)\n- [hatch](https://github.com/pypa/hatch)\n- [home assistant](https://github.com/home-assistant/core)\n- hugging face ([transformers](https://github.com/huggingface/transformers),\n    [datasets](https://github.com/huggingface/datasets),\n    [diffusers](https://github.com/huggingface/diffusers))\n- ing bank ([popmon](https://github.com/ing-bank/popmon), [probatus](https://github.com/ing-bank/probatus))\n- [ibis](https://github.com/ibis-project/ibis)\n- [jupyter](https://github.com/jupyter-server/jupyter_server)\n- [langchain](https://github.com/hwchase17/langchain)\n- [litestar](https://litestar.dev/)\n- [llamaindex](https://github.com/jerryjliu/llama_index)\n- matrix ([synapse](https://github.com/matrix-org/synapse))\n- [megalinter](https://github.com/oxsecurity/megalinter)\n- meltano ([meltano cli](https://github.com/meltano/meltano), [singer sdk](https://github.com/meltano/sdk))\n- microsoft ([semantic kernel](https://github.com/microsoft/semantic-kernel),\n    [onnx runtime](https://github.com/microsoft/onnxruntime),\n    [lightgbm](https://github.com/microsoft/lightgbm))\n- modern treasury ([python sdk](https://github.com/modern-treasury/modern-treasury-python-sdk))\n- mozilla ([firefox](https://github.com/mozilla/gecko-dev))\n- [mypy](https://github.com/python/mypy)\n- netflix ([dispatch](https://github.com/netflix/dispatch))\n- [neon](https://github.com/neondatabase/neon)\n- [nonebot](https://github.com/nonebot/nonebot2)\n- [onnx](https://github.com/onnx/onnx)\n- [openbb](https://github.com/openbb-finance/openbbterminal)\n- [pdm](https://github.com/pdm-project/pdm)\n- [paddlepaddle](https://github.com/paddlepaddle/paddle)\n- [pandas](https://github.com/pandas-dev/pandas)\n- [pillow](https://github.com/python-pillow/pillow)\n- [poetry](https://github.com/python-poetry/poetry)\n- [polars](https://github.com/pola-rs/polars)\n- [posthog](https://github.com/posthog/posthog)\n- prefect ([python sdk](https://github.com/prefecthq/prefect), [marvin](https://github.com/prefecthq/marvin))\n- [pyinstaller](https://github.com/pyinstaller/pyinstaller)\n- [pymc-marketing](https://github.com/pymc-labs/pymc-marketing)\n- [pytorch](https://github.com/pytorch/pytorch)\n- [pydantic](https://github.com/pydantic/pydantic)\n- [pylint](https://github.com/pycqa/pylint)\n- [reflex](https://github.com/reflex-dev/reflex)\n- [river](https://github.com/online-ml/river)\n- [rippling](https://rippling.com)\n- [robyn](https://github.com/sansyrox/robyn)\n- [saleor](https://github.com/saleor/saleor)\n- scale ai ([launch sdk](https://github.com/scaleapi/launch-python-client))\n- [scipy](https://github.com/scipy/scipy)\n- snowflake ([snowcli](https://github.com/snowflake-labs/snowcli))\n- [sphinx](https://github.com/sphinx-doc/sphinx)\n- [stable baselines3](https://github.com/dlr-rm/stable-baselines3)\n- [starlette](https://github.com/encode/starlette)\n- [the algorithms](https://github.com/thealgorithms/python)\n- [vega-altair](https://github.com/altair-viz/altair)\n- wordpress ([openverse](https://github.com/wordpress/openverse))\n- [zenml](https://github.com/zenml-io/zenml)\n- [zulip](https://github.com/zulip/zulip)\n- [build (pypa)](https://github.com/pypa/build)\n- [cibuildwheel (pypa)](https://github.com/pypa/cibuildwheel)\n- [delta-rs](https://github.com/delta-io/delta-rs)\n- [featuretools](https://github.com/alteryx/featuretools)\n- [meson-python](https://github.com/mesonbuild/meson-python)\n- [nox](https://github.com/wntrblm/nox)\n- [pip](https://github.com/pypa/pip)\n\n### show your support\n\nif you're using ruff, consider adding the ruff badge to project's `readme.md`:\n\n```md\n[![ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n```\n\n...or `readme.rst`:\n\n```rst\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n```\n\n...or, as html:\n\n```html\n<a href=\"https://github.com/astral-sh/ruff\"><img src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\" alt=\"ruff\" style=\"max-width:100%;\"></a>\n```\n\n## license\n\nmit\n\n<div align=\"center\">\n  <a target=\"_blank\" href=\"https://astral.sh\" style=\"background:none\">\n    <img src=\"https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/astral.svg\">\n  </a>\n</div>\n\n",
  "docs_url": null,
  "keywords": "automation,flake8,pycodestyle,pyflakes,pylint,clippy",
  "license": "mit",
  "name": "ruff",
  "package_url": "https://pypi.org/project/ruff/",
  "project_url": "https://pypi.org/project/ruff/",
  "project_urls": {
    "Changelog": "https://github.com/astral-sh/ruff/blob/main/CHANGELOG.md",
    "Documentation": "https://docs.astral.sh/ruff/",
    "Homepage": "https://docs.astral.sh/ruff",
    "Repository": "https://github.com/astral-sh/ruff"
  },
  "release_url": "https://pypi.org/project/ruff/0.1.9/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "an extremely fast python linter and code formatter, written in rust.",
  "version": "0.1.9",
  "releases": [],
  "developers": [
    "charlie.r.marsh@gmail.com",
    "hey@astral.sh"
  ],
  "kwds": "ruff_cache ruff pycodestyle pylint pyflakes",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ruff",
  "homepage": "https://docs.astral.sh/ruff",
  "release_count": 276,
  "dependency_ids": []
}
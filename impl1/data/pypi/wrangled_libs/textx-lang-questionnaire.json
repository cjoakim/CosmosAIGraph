{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: compilers",
    "topic :: software development :: interpreters",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# questionnaire dsl\n\na dsl for describing questionnaires with a simple terminal interpreter.\n\nexample:\n```\nq[type]: project type\n1[lang]. language project\n2[gen]. generator project\n\nq[type=lang, extension]: file extension (e.g. \"*.que\"):\n___ /\\*\\.[a-z0-9]+/\n\nq[package]: package name\n___ /[a-z][a-z0-9_]*$/\n\nq: author name\n___\n\nq: author email\n___\n\nq: this question is to\n   test multiline feature and indenting.\n   1. working\n   2. not working.\n      this is also to test multiline in choices.\n```\n\neach question is of the form `q:` or `q[<comma separated terms>]`. if `[]` with\nterms is given, each term is either a question id or a boolean expression of the\nform `<lhs>=<rhs>` where `<lhs>` is a reference to previous question id while\n`<rhs>` is a value of the previous question which must be satisfied for this\nquestion to be used. this is handy if the questions that follows depends on the\nanswer. see `file extension` question above which is asked only for language\nprojects (thus `type=lang`, the `type` is a reference to the previous question).\n\nthe type of the question is either free-form (specified by `___`) or choice if\nenumerated options are given.\n\nboth question and option can span multiple lines (like in the last question).\n\nfor free-form question an optional regular expression can be given inside `//`\n(see `package name` above). this regex is an input validator.\n\nthis package provides an interpreter of the questionnaire\n`txquestionnaire.questionnaire_interpreter(model, data=none)` which accepts the\nmodel created by parsing of questionnaire description using this language and\noptionally a dictionary of default answers keyed by either question id if given\nor question number. the interpreter will run the questionnaire on the console\nand return a dictionary of collected data. the values for options are ordinal\nnumbers or ids if given (like in `project type` above -- `lang`, `gen`).\n\nplease see\n[tests](https://github.com/textx/textx-lang-questionnaire/tree/master/tests) for\nthe detailed usage.\n\n\n",
  "docs_url": null,
  "keywords": "textx; language; dsl",
  "license": "mit",
  "name": "textx-lang-questionnaire",
  "package_url": "https://pypi.org/project/textx-lang-questionnaire/",
  "project_url": "https://pypi.org/project/textx-lang-questionnaire/",
  "project_urls": {
    "Homepage": "https://github.com/textX/textx-lang-questionnaire"
  },
  "release_url": "https://pypi.org/project/textx-lang-questionnaire/0.2.0/",
  "requires_dist": [
    "textX",
    "twine ; extra == 'dev'",
    "flake8 ; extra == 'test'",
    "tox ; extra == 'test'",
    "coverage ; extra == 'test'",
    "coveralls ; extra == 'test'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "a dsl for describing questionnaires",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "igor.dejanovic@gmail.com",
    "igor_r"
  ],
  "kwds": "questionnaire_interpreter multiline parsing txquestionnaire interpreter",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_textx_lang_questionnaire",
  "homepage": "https://github.com/textx/textx-lang-questionnaire",
  "release_count": 2,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_flake8",
    "pypi_pytest",
    "pypi_textx",
    "pypi_tox",
    "pypi_twine"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<div align=\"center\">\n\n# \ud83d\udcab sparql endpoint for rdflib\n\n[![pypi - version](https://img.shields.io/pypi/v/rdflib-endpoint.svg?logo=pypi&label=pypi&logocolor=silver)](https://pypi.org/project/rdflib-endpoint/)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/rdflib-endpoint.svg?logo=python&label=python&logocolor=silver)](https://pypi.org/project/rdflib-endpoint/)\n\n[![test package](https://github.com/vemonet/rdflib-endpoint/actions/workflows/test.yml/badge.svg)](https://github.com/vemonet/rdflib-endpoint/actions/workflows/test.yml)\n[![publish package](https://github.com/vemonet/rdflib-endpoint/actions/workflows/release.yml/badge.svg)](https://github.com/vemonet/rdflib-endpoint/actions/workflows/release.yml)\n[![coverage status](https://coveralls.io/repos/github/vemonet/rdflib-endpoint/badge.svg?branch=main)](https://coveralls.io/github/vemonet/rdflib-endpoint?branch=main)\n\n[![license](https://img.shields.io/pypi/l/rdflib-endpoint.svg?color=%2334d058)](https://github.com/vemonet/rdflib-endpoint/blob/main/license.txt)\n[![code style - black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![types - mypy](https://img.shields.io/badge/types-mypy-blue.svg)](https://github.com/python/mypy)\n\n</div>\n\n`rdflib-endpoint` is a sparql endpoint based on rdflib to **easily serve rdf files locally**, machine learning models, or any other logic implemented in python via **custom sparql functions**.\n\nit aims to enable python developers to easily deploy functions that can be queried in a federated fashion using sparql. for example: using a python function to resolve labels for specific identifiers, or run a classifier given entities retrieved using a `service` query to another sparql endpoint.\n\n> feel free to create an [issue](/issues), or send a pull request if you are facing issues or would like to see a feature implemented.\n\n## \u2139\ufe0f how it works\n\n`rdflib-endpoint` can be used directly from the terminal to quickly serve rdf files through a sparql endpoint automatically deployed locally.\n\nit can also be used to define custom sparql functions: the user defines and registers custom sparql functions, and/or populate the rdflib graph using python, then the endpoint is started using `uvicorn`/`gunicorn`.\n\nthe deployed sparql endpoint can be used as a `service` in a federated sparql query from regular triplestores sparql endpoints. tested on openlink virtuoso (jena based) and ontotext graphdb (rdf4j based). the endpoint is cors enabled by default to enable querying it from client javascript (can be turned off).\n\nbuilt with [rdflib](https://github.com/rdflib/rdflib) and [fastapi](https://fastapi.tiangolo.com/).\n\n## \ud83d\udce6\ufe0f installation\n\nthis package requires python >=3.8, install it  from [pypi](https://pypi.org/project/rdflib-endpoint/) with:\n\n```shell\npip install rdflib-endpoint\n```\n\nthe `uvicorn` and `gunicorn` dependencies are not included by default, if you want to install them use the optional dependency `web`:\n\n```bash\npip install \"rdflib-endpoint[web]\"\n```\n\nif you want to use `rdlib-endpoint` as a cli you can install with the optional dependency `cli`:\n\n```bash\npip install \"rdflib-endpoint[cli]\"\n```\n\nif you want to use [oxigraph](https://github.com/oxigraph/oxigraph) as backend triplestore you can install with the optional dependency `oxigraph`:\n\n```bash\npip install \"rdflib-endpoint[oxigraph,cli]\"\n```\n\n> [!warning]\n> oxigraph and `oxrdflib` do not support custom functions, so it can be only used to deploy graphs without custom functions.\n\n## \u2328\ufe0f use the cli\n\n`rdflib-endpoint` can be used from the command line interface to perform basic utility tasks, such as serving or converting rdf files locally.\n\nmake sure you installed `rdflib-endpoint` with the `cli` optional dependencies:\n\n```bash\npip install \"rdflib-endpoint[cli]\"\n```\n\n### \u26a1\ufe0f quickly serve rdf files through a sparql endpoint\n\nuse `rdflib-endpoint` as a command line interface (cli) in your terminal to quickly serve one or multiple rdf files as a sparql endpoint.\n\nyou can use wildcard and provide multiple files, for example to serve all turtle, json-ld and nquads files in the current folder you could run:\n\n```bash\nrdflib-endpoint serve *.ttl *.jsonld *.nq\n```\n\n> then access the yasgui sparql editor on http://localhost:8000\n\nif you installed with the oxigraph optional dependency you can use it as backend triplestore, it is faster and supports some functions that are not supported by the rdflib query engine (such as `coalesce()`):\n\n```bash\nrdflib-endpoint serve --store oxigraph \"*.ttl\" \"*.jsonld\" \"*.nq\"\n```\n\n### \ud83d\udd04 convert rdf files to another format\n\n`rdflib-endpoint` can also be used to quickly merge and convert files from multiple formats to a specific format:\n\n```bash\nrdflib-endpoint convert \"*.ttl\" \"*.jsonld\" \"*.nq\" --output \"merged.trig\"\n```\n\n## \u2728 deploy your sparql endpoint\n\n`rdflib-endpoint` enables you to easily define and deploy sparql endpoints based on rdflib graph, conjunctivegraph, and dataset. additionally it provides helpers to defines custom functions in the endpoint.\n\ncheckout the [`example`](https://github.com/vemonet/rdflib-endpoint/tree/main/example) folder for a complete working app example to get started, including a docker deployment. a good way to create a new sparql endpoint is to copy this `example` folder, and start from it.\n\n### \ud83d\udea8 deploy as a standalone api\n\ndeploy your sparql endpoint as a standalone api:\n\n```python\nfrom rdflib import conjunctivegraph\nfrom rdflib_endpoint import sparqlendpoint\n\n# start the sparql endpoint based on a rdflib graph and register your custom functions\ng = conjunctivegraph()\n# todo: add triples in your graph\n\n# then use either sparqlendpoint or sparqlrouter, they take the same arguments\napp = sparqlendpoint(\n    graph=g,\n    path=\"/\",\n    cors_enabled=true,\n    # metadata used for the sparql service description and swagger ui:\n    title=\"sparql endpoint for rdflib graph\",\n    description=\"a sparql endpoint to serve machine learning models, or any other logic implemented in python. \\n[source code](https://github.com/vemonet/rdflib-endpoint)\",\n    version=\"0.1.0\",\n    public_url='https://your-endpoint-url/',\n    # example query displayed in yasgui default tab\n    example_query=\"\"\"prefix myfunctions: <https://w3id.org/um/sparql-functions/>\nselect ?concat ?concatlength where {\n    bind(\"first\" as ?first)\n    bind(myfunctions:custom_concat(?first, \"last\") as ?concat)\n}\"\"\",\n    # additional example queries displayed in additional yasgui tabs\n    example_queries = {\n    \t\"bio2rdf query\": {\n        \t\"endpoint\": \"https://bio2rdf.org/sparql\",\n        \t\"query\": \"\"\"select distinct * where {\n    ?s a ?o .\n} limit 10\"\"\",\n    \t},\n    \t\"custom function\": {\n        \t\"query\": \"\"\"prefix myfunctions: <https://w3id.org/um/sparql-functions/>\nselect ?concat ?concatlength where {\n    bind(\"first\" as ?first)\n    bind(myfunctions:custom_concat(?first, \"last\") as ?concat)\n}\"\"\",\n    \t}\n\t}\n)\n```\n\nfinally deploy this app using `uvicorn` (see below)\n\n### \ud83d\udee3\ufe0f deploy as a router to include in an existing api\n\ndeploy your sparql endpoint as an `apirouter` to include in an existing `fastapi` api. the `sparqlrouter` constructor takes the same arguments as the `sparqlendpoint`, apart from `enable_cors` which needs be enabled at the api level.\n\n```python\nfrom fastapi import fastapi\nfrom rdflib import conjunctivegraph\nfrom rdflib_endpoint import sparqlrouter\n\ng = conjunctivegraph()\nsparql_router = sparqlrouter(\n    graph=g,\n    path=\"/\",\n    # metadata used for the sparql service description and swagger ui:\n    title=\"sparql endpoint for rdflib graph\",\n    description=\"a sparql endpoint to serve machine learning models, or any other logic implemented in python. \\n[source code](https://github.com/vemonet/rdflib-endpoint)\",\n    version=\"0.1.0\",\n    public_url='https://your-endpoint-url/',\n)\n\napp = fastapi()\napp.include_router(sparql_router)\n```\n\n### \ud83d\udcdd define custom sparql functions\n\nthis option makes it easier to define functions in your sparql endpoint, e.g. `bind(myfunction:custom_concat(\"start\", \"end\") as ?concat)`. it can be used with the `sparqlendpoint` and `sparqlrouter` classes.\n\ncreate a `app/main.py` file in your project folder with your custom sparql functions, and endpoint parameters:\n\n````python\nimport rdflib\nfrom rdflib import conjunctivegraph\nfrom rdflib.plugins.sparql.evalutils import _eval\nfrom rdflib_endpoint import sparqlendpoint\n\ndef custom_concat(query_results, ctx, part, eval_part):\n    \"\"\"concat 2 strings in the 2 senses and return the length as additional length variable\n    \"\"\"\n    # retrieve the 2 input arguments\n    argument1 = str(_eval(part.expr.expr[0], eval_part.forget(ctx, _except=part.expr._vars)))\n    argument2 = str(_eval(part.expr.expr[1], eval_part.forget(ctx, _except=part.expr._vars)))\n    evaluation = []\n    scores = []\n    # prepare the 2 result string, 1 for eval, 1 for scores\n    evaluation.append(argument1 + argument2)\n    evaluation.append(argument2 + argument1)\n    scores.append(len(argument1 + argument2))\n    scores.append(len(argument2 + argument1))\n    # append the results for our custom function\n    for i, result in enumerate(evaluation):\n        query_results.append(eval_part.merge({\n            part.var: rdflib.literal(result),\n            # with an additional custom var for the length\n            rdflib.term.variable(part.var + 'length'): rdflib.literal(scores[i])\n        }))\n    return query_results, ctx, part, eval_part\n\n# start the sparql endpoint based on a rdflib graph and register your custom functions\ng = conjunctivegraph()\n# use either sparqlendpoint or sparqlrouter, they take the same arguments\napp = sparqlendpoint(\n    graph=g,\n    path=\"/\",\n    # register the functions:\n    functions={\n        'https://w3id.org/um/sparql-functions/custom_concat': custom_concat\n    },\n    cors_enabled=true,\n    # metadata used for the sparql service description and swagger ui:\n    title=\"sparql endpoint for rdflib graph\",\n    description=\"a sparql endpoint to serve machine learning models, or any other logic implemented in python. \\n[source code](https://github.com/vemonet/rdflib-endpoint)\",\n    version=\"0.1.0\",\n    public_url='https://your-endpoint-url/',\n    # example queries displayed in the swagger ui to help users try your function\n    example_query=\"\"\"prefix myfunctions: <https://w3id.org/um/sparql-functions/>\nselect ?concat ?concatlength where {\n    bind(\"first\" as ?first)\n    bind(myfunctions:custom_concat(?first, \"last\") as ?concat)\n}\"\"\"\n)\n````\n\n### \u2712\ufe0f or directly define the custom evaluation\n\nyou can also directly provide the custom evaluation function, this will override the `functions`.\n\nrefer to the [rdflib documentation](https://rdflib.readthedocs.io/en/stable/_modules/examples/custom_eval.html) to define the custom evaluation function. then provide it when instantiating the sparql endpoint:\n\n```python\nimport rdflib\nfrom rdflib.plugins.sparql.evaluate import evalbgp\nfrom rdflib.namespace import foaf, rdf, rdfs\n\ndef custom_eval(ctx, part):\n    \"\"\"rewrite triple patterns to get super-classes\"\"\"\n    if part.name == \"bgp\":\n        # rewrite triples\n        triples = []\n        for t in part.triples:\n            if t[1] == rdf.type:\n                bnode = rdflib.bnode()\n                triples.append((t[0], t[1], bnode))\n                triples.append((bnode, rdfs.subclassof, t[2]))\n            else:\n                triples.append(t)\n        # delegate to normal evalbgp\n        return evalbgp(ctx, triples)\n    raise notimplementederror()\n\napp = sparqlendpoint(\n    graph=g,\n    custom_eval=custom_eval\n)\n```\n\n### \ud83e\udd84 run the sparql endpoint\n\nyou can then run the sparql endpoint server from the folder where your script is defined with `uvicorn` on http://localhost:8000 (it is installed automatically when you install the `rdflib-endpoint` package)\n\n```bash\nuvicorn main:app --app-dir example/app --reload\n```\n\n> checkout in the `example/readme.md` for more details, such as deploying it with docker.\n\n## \ud83d\udcc2 projects using rdflib-endpoint\n\nhere are some projects using `rdflib-endpoint` to deploy custom sparql endpoints with python:\n\n* [the bioregistry](https://bioregistry.io/), an open source, community curated registry, meta-registry, and compact identifier resolver.\n* [proycon/codemeta-server](https://github.com/proycon/codemeta-server), server for codemeta, in memory triple store, sparql endpoint and simple web-based visualisation for end-user\n\n## \ud83d\udee0\ufe0f contributing\n\nto run the project in development and make a contribution checkout the [contributing page](https://github.com/vemonet/rdflib-endpoint/blob/main/contributing.md).\n",
  "docs_url": null,
  "keywords": "python,rdf,rdflib,sparql,endpoint",
  "license": "mit license  copyright (c) 2022-present vincent emonet <vincent.emonet@gmail.com>  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "rdflib-endpoint",
  "package_url": "https://pypi.org/project/rdflib-endpoint/",
  "project_url": "https://pypi.org/project/rdflib-endpoint/",
  "project_urls": {
    "Documentation": "https://github.com/vemonet/rdflib-endpoint",
    "History": "https://github.com/vemonet/rdflib-endpoint/releases",
    "Homepage": "https://github.com/vemonet/rdflib-endpoint",
    "Source": "https://github.com/vemonet/rdflib-endpoint",
    "Tracker": "https://github.com/vemonet/rdflib-endpoint/issues"
  },
  "release_url": "https://pypi.org/project/rdflib-endpoint/0.5.0/",
  "requires_dist": [
    "fastapi>=0.51.0",
    "rdflib>=6.0.0",
    "click; extra == 'cli'",
    "uvicorn[standard]>=0.12.0; extra == 'cli'",
    "oxrdflib; extra == 'oxigraph'",
    "httpx; extra == 'test'",
    "mypy>=1.4.1; extra == 'test'",
    "pre-commit; extra == 'test'",
    "pytest-cov>=3.0.0; extra == 'test'",
    "pytest>=7.1.3; extra == 'test'",
    "requests; extra == 'test'",
    "types-click; extra == 'test'",
    "types-pyyaml; extra == 'test'",
    "types-setuptools; extra == 'test'",
    "types-ujson; extra == 'test'",
    "gunicorn; extra == 'web'",
    "uvicorn[standard]>=0.12.0; extra == 'web'"
  ],
  "requires_python": ">=3.8",
  "summary": "a package to deploy sparql endpoint to serve local rdf files, machine learning models, or any other logic implemented in python, using rdflib and fastapi.",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "vincent.emonet@gmail.com"
  ],
  "kwds": "rdflib_endpoint rdflib rdlib pypi bio2rdf",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_rdflib_endpoint",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_click",
    "pypi_fastapi",
    "pypi_gunicorn",
    "pypi_httpx",
    "pypi_mypy",
    "pypi_oxrdflib",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_rdflib",
    "pypi_requests",
    "pypi_types_click",
    "pypi_types_pyyaml",
    "pypi_types_setuptools",
    "pypi_types_ujson",
    "pypi_uvicorn"
  ]
}
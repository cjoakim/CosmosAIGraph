{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: console :: curses",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: user interfaces",
    "topic :: terminals",
    "typing :: typed"
  ],
  "description": "| |pypi_downloads| |codecov| |windows| |linux| |mac| |bsd|\n\nintroduction\n============\n\nblessed is an easy, practical *library* for making *terminal* apps, by providing an elegant,\nwell-documented interface to colors_, keyboard_ input, and screen position and location_\ncapabilities.\n\n.. code-block:: python\n\n    from blessed import terminal\n\n    term = terminal()\n\n    print(term.home + term.clear + term.move_y(term.height // 2))\n    print(term.black_on_darkkhaki(term.center('press any key to continue.')))\n\n    with term.cbreak(), term.hidden_cursor():\n        inp = term.inkey()\n\n    print(term.move_down(2) + 'you pressed ' + term.bold(repr(inp)))\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_basic_intro.gif\n   :alt: animation of running the code example\n\nit's meant to be *fun* and *easy*, to do basic terminal graphics and styling with python using\n*blessed*. terminal_ is the only class you need to import and the only object you should need for\nterminal capabilities.\n\nwhether you want to improve cli apps with colors, or make fullscreen applications or games,\n*blessed* should help get you started quickly. your users will love it because it works on windows,\nmac, and linux, and you will love it because it has plenty of documentation and examples!\n\nfull documentation at https://blessed.readthedocs.io/en/latest/\n\nexamples\n--------\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/blessed_demo_intro.gif\n   :alt: animations of x11-colorpicker.py, bounce.py, worms.py, and plasma.py\n\n   x11-colorpicker.py_, bounce.py_, worms.py_, and plasma.py_, from our repository.\n\nexemplary 3rd-party examples which use *blessed*,\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_3rdparty_voltron.png\n   :alt: screenshot of 'voltron' (by the author of voltron, from their readme).\n\n   voltron_ is an extensible debugger ui toolkit written in python\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_3rdparty_cursewords.gif\n   :alt: animation of 'cursewords' (by the author of cursewords, from their readme).\n\n   cursewords_ is \"graphical\" command line program for solving crossword puzzles in the terminal.\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_3rdparty_githeat.gif\n   :alt: animation of 'githeat.interactive', using blessed repository at the time of capture.\n\n   githeat_ builds an interactive heatmap of git history.\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_3rdparty_dashing.gif\n   :alt: animations from 'dashing' (by the author of dashing, from their readme)\n\n   dashing_ is a library to quickly create terminal-based dashboards.\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/demo_3rdparty_enlighten.gif\n   :alt: animations from 'enlighten' (by the author of enlighten, from their readme)\n\n   enlighten_ is a console progress bar library that allows simultaneous output without redirection.\n\n.. figure:: https://dxtz6bzwq9sxx.cloudfront.net/blessed_3rdparty_macht.gif\n   :alt: demonstration of 'macht', a 2048 clone\n\n   macht_ is a clone of the (briefly popular) puzzle game, 2048.\n\nrequirements\n------------\n\n*blessed* works with windows, mac, linux, and bsd's, on python 2.7, 3.4, 3.5, 3.6, 3.7, and 3.8.\n\nbrief overview\n--------------\n\n*blessed* is more than just a python wrapper around curses_:\n\n* styles_, colors_, and maybe a little positioning without necessarily clearing the whole screen\n  first.\n* works great with python's new f-strings_ or any other kind of string formatting.\n* provides up-to-the-moment location_ and terminal height and width, so you can respond to terminal\n  size changes.\n* avoids making a mess if the output gets piped to a non-terminal, you can output sequences to any\n  file-like object such as *stringio*, files, pipes or sockets.\n* uses `terminfo(5)`_ so it works with any terminal type and capability: no more c-like calls to\n  tigetstr_ and tparm_.\n* non-obtrusive calls to only the capabilities database ensures that you are free to mix and match\n  with calls to any other curses application code or library you like.\n* provides context managers `terminal.fullscreen()`_ and `terminal.hidden_cursor()`_ to safely\n  express terminal modes, curses development will no longer fudge up your shell.\n* act intelligently when somebody redirects your output to a file, omitting all of the special\n  sequences colors, but still containing all of the text.\n\n*blessed* is a fork of `blessings <https://github.com/erikrose/blessings>`_, which does all of\nthe same above with the same api, as well as following **enhancements**:\n\n* windows support, new since dec. 2019!\n* dead-simple keyboard handling: safely decoding unicode input in your system's preferred locale and\n  supports application/arrow keys.\n* 24-bit color support, using `terminal.color_rgb()`_ and `terminal.on_color_rgb()`_ and all x11\n  colors_ by name, and not by number.\n* determine cursor location using `terminal.get_location()`_, enter key-at-a-time input mode using\n  `terminal.cbreak()`_ or `terminal.raw()`_ context managers, and read timed key presses using\n  `terminal.inkey()`_.\n* allows the *printable length* of strings that contain sequences to be determined by\n  `terminal.length()`_, supporting additional methods `terminal.wrap()`_ and `terminal.center()`_,\n  terminal-aware variants of the built-in function `textwrap.wrap()`_ and method `str.center()`_,\n  respectively.\n* allows sequences to be removed from strings that contain them, using `terminal.strip_seqs()`_ or\n  sequences and whitespace using `terminal.strip()`_.\n\nbefore and after\n----------------\n\nwith the built-in curses_ module, this is how you would typically\nprint some underlined text at the bottom of the screen:\n\n.. code-block:: python\n\n    from curses import tigetstr, setupterm, tparm\n    from fcntl import ioctl\n    from os import isatty\n    import struct\n    import sys\n    from termios import tiocgwinsz\n\n    # if we want to tolerate having our output piped to other commands or\n    # files without crashing, we need to do all this branching:\n    if hasattr(sys.stdout, 'fileno') and isatty(sys.stdout.fileno()):\n        setupterm()\n        sc = tigetstr('sc')\n        cup = tigetstr('cup')\n        rc = tigetstr('rc')\n        underline = tigetstr('smul')\n        normal = tigetstr('sgr0')\n    else:\n        sc = cup = rc = underline = normal = ''\n\n    # save cursor position.\n    print(sc)\n\n    if cup:\n        # tigetnum('lines') doesn't always update promptly, hence this:\n        height = struct.unpack('hhhh', ioctl(0, tiocgwinsz, '\\000' * 8))[0]\n\n        # move cursor to bottom.\n        print(tparm(cup, height - 1, 0))\n\n    print('this is {under}underlined{normal}!'\n          .format(under=underline, normal=normal))\n\n    # restore cursor position.\n    print(rc)\n\nthe same program with *blessed* is simply:\n\n.. code-block:: python\n\n    from blessed import terminal\n\n    term = terminal()\n    with term.location(0, term.height - 1):\n        print('this is ' + term.underline('underlined') + '!', end='')\n\n.. _curses: https://docs.python.org/3/library/curses.html\n.. _tigetstr: http://man.openbsd.org/cgi-bin/man.cgi/openbsd-current/man3/tigetstr.3\n.. _tparm: http://man.openbsd.org/cgi-bin/man.cgi/openbsd-current/man3/tparm.3\n.. _`terminfo(5)`: https://invisible-island.net/ncurses/man/terminfo.5.html\n.. _str.center(): https://docs.python.org/3/library/stdtypes.html#str.center\n.. _textwrap.wrap(): https://docs.python.org/3/library/textwrap.html#textwrap.wrap\n.. _terminal: https://blessed.readthedocs.io/en/stable/terminal.html\n.. _`terminal.fullscreen()`: https://blessed.readthedocs.io/en/latest/api/terminal.html#blessed.terminal.terminal.fullscreen\n.. _`terminal.get_location()`: https://blessed.readthedocs.io/en/latest/location.html#finding-the-cursor\n.. _`terminal.color_rgb()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.color_rgb\n.. _`terminal.hidden_cursor()`: https://blessed.readthedocs.io/en/latest/api/terminal.html#blessed.terminal.terminal.hidden_cursor\n.. _`terminal.on_color_rgb()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.on_color_rgb\n.. _`terminal.length()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.length\n.. _`terminal.strip()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.strip\n.. _`terminal.rstrip()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.rstrip\n.. _`terminal.lstrip()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.lstrip\n.. _`terminal.strip_seqs()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.strip_seqs\n.. _`terminal.wrap()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.wrap\n.. _`terminal.center()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.center\n.. _`terminal.rjust()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.rjust\n.. _`terminal.ljust()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.ljust\n.. _`terminal.cbreak()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.cbreak\n.. _`terminal.raw()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.raw\n.. _`terminal.inkey()`: https://blessed.readthedocs.io/en/stable/api/terminal.html#blessed.terminal.terminal.inkey\n.. _colors: https://blessed.readthedocs.io/en/stable/colors.html\n.. _styles: https://blessed.readthedocs.io/en/stable/terminal.html#styles\n.. _location: https://blessed.readthedocs.io/en/stable/location.html\n.. _keyboard: https://blessed.readthedocs.io/en/stable/keyboard.html\n.. _examples: https://blessed.readthedocs.io/en/stable/examples.html\n.. _x11-colorpicker.py: https://blessed.readthedocs.io/en/stable/examples.html#x11-colorpicker-py\n.. _bounce.py: https://blessed.readthedocs.io/en/stable/examples.html#bounce-py\n.. _worms.py: https://blessed.readthedocs.io/en/stable/examples.html#worms-py\n.. _plasma.py: https://blessed.readthedocs.io/en/stable/examples.html#plasma-py\n.. _voltron: https://github.com/snare/voltron\n.. _cursewords: https://github.com/thisisparker/cursewords\n.. _githeat: https://github.com/ammsa/githeat\n.. _dashing: https://github.com/federicoceratto/dashing\n.. _enlighten: https://github.com/rockhopper-technologies/enlighten\n.. _macht: https://github.com/rolfmorel/macht\n.. _f-strings: https://docs.python.org/3/reference/lexical_analysis.html#f-strings\n.. |pypi_downloads| image:: https://img.shields.io/pypi/dm/blessed.svg?logo=pypi\n    :alt: downloads\n    :target: https://pypi.org/project/blessed/\n.. |codecov| image:: https://codecov.io/gh/jquast/blessed/branch/master/graph/badge.svg\n    :alt: codecov.io code coverage\n    :target: https://codecov.io/gh/jquast/blessed/\n.. |linux| image:: https://img.shields.io/badge/linux-yes-success?logo=linux\n    :alt: linux supported\n.. |windows| image:: https://img.shields.io/badge/windows-new-success?logo=windows\n    :alt: windows supported\n.. |mac| image:: https://img.shields.io/badge/macos-yes-success?logo=apple\n    :alt: macos supported\n.. |bsd| image:: https://img.shields.io/badge/bsd-yes-success?logo=freebsd\n    :alt: bsd supported\n",
  "docs_url": null,
  "keywords": "terminal,sequences,tty,curses,ncurses,formatting,style,color,console,keyboard,ansi,xterm",
  "license": "mit",
  "name": "blessed",
  "package_url": "https://pypi.org/project/blessed/",
  "project_url": "https://pypi.org/project/blessed/",
  "project_urls": {
    "Documentation": "https://blessed.readthedocs.io",
    "Homepage": "https://github.com/jquast/blessed"
  },
  "release_url": "https://pypi.org/project/blessed/1.20.0/",
  "requires_dist": [
    "wcwidth (>=0.1.4)",
    "six (>=1.9.0)",
    "jinxed (>=1.1.0) ; platform_system == \"Windows\"",
    "ordereddict (==1.1) ; python_version < \"2.7\"",
    "backports.functools-lru-cache (>=1.2.1) ; python_version < \"3.2\""
  ],
  "requires_python": ">=2.7",
  "summary": "easy, practical library for making terminal apps, by providing an elegant, well-documented interface to colors, keyboard input, and screen positioning capabilities.",
  "version": "1.20.0",
  "releases": [],
  "developers": [
    "contact@jeffquast.com",
    "jeff_quast"
  ],
  "kwds": "_terminal terminal terminal_ python tty",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_blessed",
  "homepage": "https://github.com/jquast/blessed",
  "release_count": 45,
  "dependency_ids": [
    "pypi_backports.functools_lru_cache",
    "pypi_jinxed",
    "pypi_ordereddict",
    "pypi_six",
    "pypi_wcwidth"
  ]
}
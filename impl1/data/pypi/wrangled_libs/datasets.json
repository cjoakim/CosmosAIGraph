{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://huggingface.co/datasets/huggingface/documentation-images/raw/main/datasets-logo-dark.svg\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://huggingface.co/datasets/huggingface/documentation-images/raw/main/datasets-logo-light.svg\">\n    <img alt=\"hugging face datasets library\" src=\"https://huggingface.co/datasets/huggingface/documentation-images/raw/main/datasets-logo-light.svg\" width=\"352\" height=\"59\" style=\"max-width: 100%;\">\n  </picture>\n  <br/>\n  <br/>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/huggingface/datasets/actions/workflows/ci.yml?query=branch%3amain\">\n        <img alt=\"build\" src=\"https://github.com/huggingface/datasets/actions/workflows/ci.yml/badge.svg?branch=main\">\n    </a>\n    <a href=\"https://github.com/huggingface/datasets/blob/main/license\">\n        <img alt=\"github\" src=\"https://img.shields.io/github/license/huggingface/datasets.svg?color=blue\">\n    </a>\n    <a href=\"https://huggingface.co/docs/datasets/index.html\">\n        <img alt=\"documentation\" src=\"https://img.shields.io/website/http/huggingface.co/docs/datasets/index.html.svg?down_color=red&down_message=offline&up_message=online\">\n    </a>\n    <a href=\"https://github.com/huggingface/datasets/releases\">\n        <img alt=\"github release\" src=\"https://img.shields.io/github/release/huggingface/datasets.svg\">\n    </a>\n    <a href=\"https://huggingface.co/datasets/\">\n        <img alt=\"number of datasets\" src=\"https://img.shields.io/endpoint?url=https://huggingface.co/api/shields/datasets&color=brightgreen\">\n    </a>\n    <a href=\"code_of_conduct.md\">\n        <img alt=\"contributor covenant\" src=\"https://img.shields.io/badge/contributor%20covenant-2.0-4baaaa.svg\">\n    </a>\n    <a href=\"https://zenodo.org/badge/latestdoi/250213286\"><img src=\"https://zenodo.org/badge/250213286.svg\" alt=\"doi\"></a>\n</p>\n\n\ud83e\udd17 datasets is a lightweight library providing **two** main features:\n\n- **one-line dataloaders for many public datasets**: one-liners to download and pre-process any of the ![number of datasets](https://img.shields.io/endpoint?url=https://huggingface.co/api/shields/datasets&color=brightgreen) major public datasets (image datasets, audio datasets, text datasets in 467 languages and dialects, etc.) provided on the [huggingface datasets hub](https://huggingface.co/datasets). with a simple command like `squad_dataset = load_dataset(\"squad\")`, get any of these datasets ready to use in a dataloader for training/evaluating a ml model (numpy/pandas/pytorch/tensorflow/jax),\n- **efficient data pre-processing**: simple, fast and reproducible data pre-processing for the public datasets as well as your own local datasets in csv, json, text, png, jpeg, wav, mp3, parquet, etc. with simple commands like `processed_dataset = dataset.map(process_example)`, efficiently prepare the dataset for inspection and ml model evaluation and training.\n\n[\ud83c\udf93 **documentation**](https://huggingface.co/docs/datasets/) [\ud83d\udd0e **find a dataset in the hub**](https://huggingface.co/datasets) [\ud83c\udf1f **share a dataset on the hub**](https://huggingface.co/docs/datasets/share)\n\n<h3 align=\"center\">\n    <a href=\"https://hf.co/course\"><img src=\"https://raw.githubusercontent.com/huggingface/datasets/main/docs/source/imgs/course_banner.png\"></a>\n</h3>\n\n\ud83e\udd17 datasets is designed to let the community easily add and share new datasets.\n\n\ud83e\udd17 datasets has many additional interesting features:\n\n- thrive on large datasets: \ud83e\udd17 datasets naturally frees the user from ram memory limitation, all datasets are memory-mapped using an efficient zero-serialization cost backend (apache arrow).\n- smart caching: never wait for your data to process several times.\n- lightweight and fast with a transparent and pythonic api (multi-processing/caching/memory-mapping).\n- built-in interoperability with numpy, pandas, pytorch, tensorflow 2 and jax.\n- native support for audio and image data.\n- enable streaming mode to save disk space and start iterating over the dataset immediately.\n\n\ud83e\udd17 datasets originated from a fork of the awesome [tensorflow datasets](https://github.com/tensorflow/datasets) and the huggingface team want to deeply thank the tensorflow datasets team for building this amazing library. more details on the differences between \ud83e\udd17 datasets and `tfds` can be found in the section [main differences between \ud83e\udd17 datasets and `tfds`](#main-differences-between--datasets-and-tfds).\n\n# installation\n\n## with pip\n\n\ud83e\udd17 datasets can be installed from pypi and has to be installed in a virtual environment (venv or conda for instance)\n\n```bash\npip install datasets\n```\n\n## with conda\n\n\ud83e\udd17 datasets can be installed using conda as follows:\n\n```bash\nconda install -c huggingface -c conda-forge datasets\n```\n\nfollow the installation pages of tensorflow and pytorch to see how to install them with conda.\n\nfor more details on installation, check the installation page in the documentation: https://huggingface.co/docs/datasets/installation\n\n## installation to use with pytorch/tensorflow/pandas\n\nif you plan to use \ud83e\udd17 datasets with pytorch (1.0+), tensorflow (2.2+) or pandas, you should also install pytorch, tensorflow or pandas.\n\nfor more details on using the library with numpy, pandas, pytorch or tensorflow, check the quick start page in the documentation: https://huggingface.co/docs/datasets/quickstart\n\n# usage\n\n\ud83e\udd17 datasets is made to be very simple to use - the api is centered around a single function, `datasets.load_dataset(dataset_name, **kwargs)`, that instantiates a dataset.\n\nthis library can be used for text/image/audio/etc. datasets. here is an example to load a text dataset:\n\nhere is a quick example:\n\n```python\nfrom datasets import load_dataset\n\n# print all the available datasets\nfrom huggingface_hub import list_datasets\nprint([dataset.id for dataset in list_datasets()])\n\n# load a dataset and print the first example in the training set\nsquad_dataset = load_dataset('squad')\nprint(squad_dataset['train'][0])\n\n# process the dataset - add a column with the length of the context texts\ndataset_with_length = squad_dataset.map(lambda x: {\"length\": len(x[\"context\"])})\n\n# process the dataset - tokenize the context texts (using a tokenizer from the \ud83e\udd17 transformers library)\nfrom transformers import autotokenizer\ntokenizer = autotokenizer.from_pretrained('bert-base-cased')\n\ntokenized_dataset = squad_dataset.map(lambda x: tokenizer(x['context']), batched=true)\n```\n\nif your dataset is bigger than your disk or if you don't want to wait to download the data, you can use streaming:\n\n```python\n# if you want to use the dataset immediately and efficiently stream the data as you iterate over the dataset\nimage_dataset = load_dataset('cifar100', streaming=true)\nfor example in image_dataset[\"train\"]:\n    break\n```\n\nfor more details on using the library, check the quick start page in the documentation: https://huggingface.co/docs/datasets/quickstart and the specific pages on:\n\n- loading a dataset: https://huggingface.co/docs/datasets/loading\n- what's in a dataset: https://huggingface.co/docs/datasets/access\n- processing data with \ud83e\udd17 datasets: https://huggingface.co/docs/datasets/process\n    - processing audio data: https://huggingface.co/docs/datasets/audio_process\n    - processing image data: https://huggingface.co/docs/datasets/image_process\n    - processing text data: https://huggingface.co/docs/datasets/nlp_process\n- streaming a dataset: https://huggingface.co/docs/datasets/stream\n- writing your own dataset loading script: https://huggingface.co/docs/datasets/dataset_script\n- etc.\n\n# add a new dataset to the hub\n\nwe have a very detailed step-by-step guide to add a new dataset to the ![number of datasets](https://img.shields.io/endpoint?url=https://huggingface.co/api/shields/datasets&color=brightgreen) datasets already provided on the [huggingface datasets hub](https://huggingface.co/datasets).\n\nyou can find:\n- [how to upload a dataset to the hub using your web browser or python](https://huggingface.co/docs/datasets/upload_dataset) and also\n- [how to upload it using git](https://huggingface.co/docs/datasets/share).\n\n# main differences between \ud83e\udd17 datasets and `tfds`\n\nif you are familiar with the great tensorflow datasets, here are the main differences between \ud83e\udd17 datasets and `tfds`:\n\n- the scripts in \ud83e\udd17 datasets are not provided within the library but are queried, downloaded/cached and dynamically loaded upon request\n- the backend serialization of \ud83e\udd17 datasets is based on [apache arrow](https://arrow.apache.org/) instead of tf records and leverage python dataclasses for info and features with some diverging features (we mostly don't do encoding and store the raw data as much as possible in the backend serialization cache).\n- the user-facing dataset object of \ud83e\udd17 datasets is not a `tf.data.dataset` but a built-in framework-agnostic dataset class with methods inspired by what we like in `tf.data` (like a `map()` method). it basically wraps a memory-mapped arrow table cache.\n\n# disclaimers\n\n\ud83e\udd17 datasets may run python code defined by the dataset authors to parse certain data formats or structures. for security reasons, we ask users to:\n- check the dataset scripts they're going to run beforehand and\n- pin the `revision` of the repositories they use.\n\nif you're a dataset owner and wish to update any part of it (description, citation, license, etc.), or do not want your dataset to be included in the hugging face hub, please get in touch by opening a discussion or a pull request in the community tab of the dataset page. thanks for your contribution to the ml community!\n\n## bibtex\n\nif you want to cite our \ud83e\udd17 datasets library, you can use our [paper](https://arxiv.org/abs/2109.02846):\n\n```bibtex\n@inproceedings{lhoest-etal-2021-datasets,\n    title = \"datasets: a community library for natural language processing\",\n    author = \"lhoest, quentin  and\n      villanova del moral, albert  and\n      jernite, yacine  and\n      thakur, abhishek  and\n      von platen, patrick  and\n      patil, suraj  and\n      chaumond, julien  and\n      drame, mariama  and\n      plu, julien  and\n      tunstall, lewis  and\n      davison, joe  and\n      {\\v{s}}a{\\v{s}}ko, mario  and\n      chhablani, gunjan  and\n      malik, bhavitvya  and\n      brandeis, simon  and\n      le scao, teven  and\n      sanh, victor  and\n      xu, canwen  and\n      patry, nicolas  and\n      mcmillan-major, angelina  and\n      schmid, philipp  and\n      gugger, sylvain  and\n      delangue, cl{\\'e}ment  and\n      matussi{\\`e}re, th{\\'e}o  and\n      debut, lysandre  and\n      bekman, stas  and\n      cistac, pierric  and\n      goehringer, thibault  and\n      mustar, victor  and\n      lagunas, fran{\\c{c}}ois  and\n      rush, alexander  and\n      wolf, thomas\",\n    booktitle = \"proceedings of the 2021 conference on empirical methods in natural language processing: system demonstrations\",\n    month = nov,\n    year = \"2021\",\n    address = \"online and punta cana, dominican republic\",\n    publisher = \"association for computational linguistics\",\n    url = \"https://aclanthology.org/2021.emnlp-demo.21\",\n    pages = \"175--184\",\n    abstract = \"the scale, variety, and quantity of publicly-available nlp datasets has grown rapidly as researchers propose new tasks, larger models, and novel benchmarks. datasets is a community library for contemporary nlp designed to support this ecosystem. datasets aims to standardize end-user interfaces, versioning, and documentation, while providing a lightweight front-end that behaves similarly for small datasets as for internet-scale corpora. the design of the library incorporates a distributed, community-driven approach to adding datasets and documenting usage. after a year of development, the library now includes more than 650 unique datasets, has more than 250 contributors, and has helped support a variety of novel cross-dataset research projects and shared tasks. the library is available at https://github.com/huggingface/datasets.\",\n    eprint={2109.02846},\n    archiveprefix={arxiv},\n    primaryclass={cs.cl},\n}\n```\n\nif you need to cite a specific version of our \ud83e\udd17 datasets library for reproducibility, you can use the corresponding version zenodo doi from this [list](https://zenodo.org/search?q=conceptrecid:%224817768%22&sort=-version&all_versions=true).\n\n\n",
  "docs_url": null,
  "keywords": "datasets machine learning datasets metrics",
  "license": "apache 2.0",
  "name": "datasets",
  "package_url": "https://pypi.org/project/datasets/",
  "project_url": "https://pypi.org/project/datasets/",
  "project_urls": {
    "Download": "https://github.com/huggingface/datasets/tags",
    "Homepage": "https://github.com/huggingface/datasets"
  },
  "release_url": "https://pypi.org/project/datasets/2.16.0/",
  "requires_dist": [
    "filelock",
    "numpy (>=1.17)",
    "pyarrow (>=8.0.0)",
    "pyarrow-hotfix",
    "dill (<0.3.8,>=0.3.0)",
    "pandas",
    "requests (>=2.19.0)",
    "tqdm (>=4.62.1)",
    "xxhash",
    "multiprocess",
    "fsspec[http] (<=2023.10.0,>=2023.1.0)",
    "aiohttp",
    "huggingface-hub (>=0.19.4)",
    "packaging",
    "pyyaml (>=5.1)",
    "apache-beam (<2.44.0,>=2.26.0) ; extra == 'apache-beam'",
    "soundfile (>=0.12.1) ; extra == 'audio'",
    "librosa ; extra == 'audio'",
    "tensorflow (==2.12.0) ; extra == 'benchmarks'",
    "torch (==2.0.1) ; extra == 'benchmarks'",
    "transformers (==4.30.1) ; extra == 'benchmarks'",
    "absl-py ; extra == 'dev'",
    "joblib (<1.3.0) ; extra == 'dev'",
    "joblibspark ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-datadir ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "elasticsearch (<8.0.0) ; extra == 'dev'",
    "faiss-cpu (>=1.6.4) ; extra == 'dev'",
    "lz4 ; extra == 'dev'",
    "pyspark (>=3.4) ; extra == 'dev'",
    "py7zr ; extra == 'dev'",
    "rarfile (>=4.0) ; extra == 'dev'",
    "sqlalchemy (<2.0.0) ; extra == 'dev'",
    "s3fs (>=2021.11.1) ; extra == 'dev'",
    "tiktoken ; extra == 'dev'",
    "torch (>=2.0.0) ; extra == 'dev'",
    "soundfile (>=0.12.1) ; extra == 'dev'",
    "transformers ; extra == 'dev'",
    "typing-extensions (>=4.6.1) ; extra == 'dev'",
    "zstandard ; extra == 'dev'",
    "Pillow (>=6.2.1) ; extra == 'dev'",
    "librosa ; extra == 'dev'",
    "ruff (>=0.1.5) ; extra == 'dev'",
    "s3fs ; extra == 'dev'",
    "torch ; extra == 'dev'",
    "apache-beam (<2.44.0,>=2.26.0) ; (python_version < \"3.10\") and extra == 'dev'",
    "tensorflow (!=2.6.0,!=2.6.1,>=2.3) ; (sys_platform != \"darwin\" or platform_machine != \"arm64\") and extra == 'dev'",
    "tensorflow (!=2.6.0,!=2.6.1,>=2.2.0) ; (sys_platform != \"darwin\" or platform_machine != \"arm64\") and extra == 'dev'",
    "jax (>=0.3.14) ; (sys_platform != \"win32\") and extra == 'dev'",
    "jaxlib (>=0.3.14) ; (sys_platform != \"win32\") and extra == 'dev'",
    "tensorflow-macos ; (sys_platform == \"darwin\" and platform_machine == \"arm64\") and extra == 'dev'",
    "s3fs ; extra == 'docs'",
    "transformers ; extra == 'docs'",
    "torch ; extra == 'docs'",
    "tensorflow (!=2.6.0,!=2.6.1,>=2.2.0) ; (sys_platform != \"darwin\" or platform_machine != \"arm64\") and extra == 'docs'",
    "tensorflow-macos ; (sys_platform == \"darwin\" and platform_machine == \"arm64\") and extra == 'docs'",
    "jax (>=0.3.14) ; extra == 'jax'",
    "jaxlib (>=0.3.14) ; extra == 'jax'",
    "accelerate ; extra == 'metrics-tests'",
    "bert-score (>=0.3.6) ; extra == 'metrics-tests'",
    "jiwer ; extra == 'metrics-tests'",
    "langdetect ; extra == 'metrics-tests'",
    "mauve-text ; extra == 'metrics-tests'",
    "nltk ; extra == 'metrics-tests'",
    "rouge-score ; extra == 'metrics-tests'",
    "sacrebleu ; extra == 'metrics-tests'",
    "sacremoses ; extra == 'metrics-tests'",
    "scikit-learn ; extra == 'metrics-tests'",
    "scipy ; extra == 'metrics-tests'",
    "sentencepiece ; extra == 'metrics-tests'",
    "seqeval ; extra == 'metrics-tests'",
    "spacy (>=3.0.0) ; extra == 'metrics-tests'",
    "tldextract ; extra == 'metrics-tests'",
    "toml (>=0.10.1) ; extra == 'metrics-tests'",
    "typer (<0.5.0) ; extra == 'metrics-tests'",
    "requests-file (>=1.5.1) ; extra == 'metrics-tests'",
    "tldextract (>=3.1.0) ; extra == 'metrics-tests'",
    "texttable (>=1.6.3) ; extra == 'metrics-tests'",
    "Werkzeug (>=1.0.1) ; extra == 'metrics-tests'",
    "six (~=1.15.0) ; extra == 'metrics-tests'",
    "ruff (>=0.1.5) ; extra == 'quality'",
    "s3fs ; extra == 's3'",
    "tensorflow (!=2.6.0,!=2.6.1,>=2.2.0) ; (sys_platform != \"darwin\" or platform_machine != \"arm64\") and extra == 'tensorflow'",
    "tensorflow-macos ; (sys_platform == \"darwin\" and platform_machine == \"arm64\") and extra == 'tensorflow'",
    "tensorflow-gpu (!=2.6.0,!=2.6.1,>=2.2.0) ; extra == 'tensorflow_gpu'",
    "absl-py ; extra == 'tests'",
    "joblib (<1.3.0) ; extra == 'tests'",
    "joblibspark ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-datadir ; extra == 'tests'",
    "pytest-xdist ; extra == 'tests'",
    "elasticsearch (<8.0.0) ; extra == 'tests'",
    "faiss-cpu (>=1.6.4) ; extra == 'tests'",
    "lz4 ; extra == 'tests'",
    "pyspark (>=3.4) ; extra == 'tests'",
    "py7zr ; extra == 'tests'",
    "rarfile (>=4.0) ; extra == 'tests'",
    "sqlalchemy (<2.0.0) ; extra == 'tests'",
    "s3fs (>=2021.11.1) ; extra == 'tests'",
    "tiktoken ; extra == 'tests'",
    "torch (>=2.0.0) ; extra == 'tests'",
    "soundfile (>=0.12.1) ; extra == 'tests'",
    "transformers ; extra == 'tests'",
    "typing-extensions (>=4.6.1) ; extra == 'tests'",
    "zstandard ; extra == 'tests'",
    "Pillow (>=6.2.1) ; extra == 'tests'",
    "librosa ; extra == 'tests'",
    "apache-beam (<2.44.0,>=2.26.0) ; (python_version < \"3.10\") and extra == 'tests'",
    "tensorflow (!=2.6.0,!=2.6.1,>=2.3) ; (sys_platform != \"darwin\" or platform_machine != \"arm64\") and extra == 'tests'",
    "jax (>=0.3.14) ; (sys_platform != \"win32\") and extra == 'tests'",
    "jaxlib (>=0.3.14) ; (sys_platform != \"win32\") and extra == 'tests'",
    "tensorflow-macos ; (sys_platform == \"darwin\" and platform_machine == \"arm64\") and extra == 'tests'",
    "torch ; extra == 'torch'",
    "Pillow (>=6.2.1) ; extra == 'vision'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "huggingface community-driven open-source library of datasets",
  "version": "2.16.0",
  "releases": [],
  "developers": [
    "huggingface_inc",
    "thomas@huggingface.co"
  ],
  "kwds": "image_dataset svg logo huggingface dataset",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_datasets",
  "homepage": "https://github.com/huggingface/datasets",
  "release_count": 77,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_accelerate",
    "pypi_aiohttp",
    "pypi_apache_beam",
    "pypi_bert_score",
    "pypi_dill",
    "pypi_elasticsearch",
    "pypi_faiss_cpu",
    "pypi_filelock",
    "pypi_fsspec",
    "pypi_huggingface_hub",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_jiwer",
    "pypi_joblib",
    "pypi_joblibspark",
    "pypi_langdetect",
    "pypi_librosa",
    "pypi_lz4",
    "pypi_mauve_text",
    "pypi_multiprocess",
    "pypi_nltk",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_py7zr",
    "pypi_pyarrow",
    "pypi_pyarrow_hotfix",
    "pypi_pyspark",
    "pypi_pytest",
    "pypi_pytest_datadir",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_rarfile",
    "pypi_requests",
    "pypi_requests_file",
    "pypi_rouge_score",
    "pypi_ruff",
    "pypi_s3fs",
    "pypi_sacrebleu",
    "pypi_sacremoses",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sentencepiece",
    "pypi_seqeval",
    "pypi_six",
    "pypi_soundfile",
    "pypi_spacy",
    "pypi_sqlalchemy",
    "pypi_tensorflow",
    "pypi_tensorflow_gpu",
    "pypi_tensorflow_macos",
    "pypi_texttable",
    "pypi_tiktoken",
    "pypi_tldextract",
    "pypi_toml",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_typer",
    "pypi_typing_extensions",
    "pypi_werkzeug",
    "pypi_xxhash",
    "pypi_zstandard"
  ]
}
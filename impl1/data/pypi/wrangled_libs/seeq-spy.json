{
  "classifiers": [
    "license :: other/proprietary license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "the **seeq-spy** python module is the recommended programming interface for interacting with the seeq server.\r\n\r\nuse of this module requires a\r\n[seeq data lab license](https://support.seeq.com/space/kb/113723667/requesting+and+installing+a+license+file).\r\n\r\ndocumentation can be found at\r\n[https://python-docs.seeq.com](https://python-docs.seeq.com/).\r\n\r\nthe seeq **spy** module is a friendly set of functions that are optimized for use with\r\n[jupyter](https://jupyter.org), [pandas](https://pandas.pydata.org/) and [numpy](https://www.numpy.org/).\r\n\r\nthe spy module is the best choice if you're trying to do any of the following:\r\n\r\n- search for signals, conditions, scalars, assets\r\n- pull data out of seeq\r\n- import data in a programmatic way (when seeq workbench's *csv import* capability won't cut it)\r\n- calculate new data in python and push it into seeq\r\n- create an asset model\r\n- programmatically create and manipulate workbench analyses or organizer topics\r\n\r\n**use of the spy module requires python 3.7 or later.**\r\n\r\n**spy version 187 and higher is compatible with pandas 2.x.**\r\n\r\nto start exploring the spy module, execute the following lines of code in jupyter:\r\n\r\n```\r\nfrom seeq import spy\r\nspy.docs.copy()\r\n```\r\n\r\nyour jupyter folder will now contain a `spy documentation` folder that has a *tutorial* and *command reference*\r\nnotebook that will walk you through common activities.\r\n\r\nfor more advanced tasks, you may need to use the `seeq.sdk` module directly as described at\r\n[https://pypi.org/project/seeq](https://pypi.org/project/seeq).\r\n\r\n# upgrade considerations\r\n\r\nthe `seeq-spy` module can/should be upgraded separately from the main `seeq` module by doing `pip install -u\r\nseeq-spy`. it is written to be compatible with seeq server version r60 and later.\r\n\r\n## dataframe metadata\r\n\r\nin **spy v183** and later, the dataframe metadata that is described in the *properties stored in the output dataframe*\r\nsection of the **spy.search.ipynb** documentation notebook has been moved into a top-level `spy` namespace on the\r\ndataframe (as opposed to each variable being at the top level). for example, in order to access the function name that\r\nwas used to produce the dataframe, you would use `search_df.spy.func` instead of just `search_df.func`. this change was\r\nmade to avoid collisions with native dataframe properties and functions.\r\n\r\n## spy.assets\r\n\r\nin **spy v183** and later, `spy.assets.build()` conducts the build process in two passes instead of one. this generally\r\nhas no repercussions for your asset- or mixin-derived classes, but you will notice that\r\n`@asset.component`-decorated functions are called twice per asset. in the first pass, the framework is expecting the\r\ncomponent asset classes to be instantiated, and in the second pass it is expecting all attributes to be evaluated and\r\nbuilt. this new behavior generally does not require you to make any changes to your classes, with one exception: if you\r\nwere using `@asset.component` as a means by which you could generate multiple signals/conditions/scalars/metrics from a\r\nsingle function, you should instead use `@asset.attribute` to achieve that.\r\n\r\n## spy.workbooks\r\n\r\nin **seeq server r22.0.49.00**, the ability to schedule the update of an organizer topic was added. as a result, much of\r\nthe internals of how organizer topic embedded content and date ranges are represented changed.\r\n\r\nif you have used `spy.workbooks.save()` in r22.0.48.xx and earlier to save a set of organizer topic workbooks to disk,\r\nyou will not be able to use those files in r22.0.49.00 and later.\r\n\r\nlive docs must now be specified by a `schedule` on the `topicdocument` object. the `@asset.daterange`\r\ndecorator no longer honors the `auto refresh rate` property. to specify a live doc, you must specify a\r\n`schedule` dict for a topicdocument by setting `document.schedule['background'] = false` and then specifying a cron\r\nexpression like `schedule['cron schedule'] = ['*/30 * * * * *']` (every thirty seconds). alternatively, you can specify\r\na scheduled doc by setting `document.schedule['background'] = true`.\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "seeq-spy",
  "package_url": "https://pypi.org/project/seeq-spy/",
  "project_url": "https://pypi.org/project/seeq-spy/",
  "project_urls": {
    "Documentation": "https://python-docs.seeq.com/",
    "Homepage": "https://www.seeq.com"
  },
  "release_url": "https://pypi.org/project/seeq-spy/190.9/",
  "requires_dist": [
    "jupyterlab >=3.0.0",
    "notebook >=6.0.0",
    "ipython >=7.6.1",
    "matplotlib >=3.1.1",
    "numpy >=1.16.4",
    "pandas >=1.0.0",
    "beautifulsoup4 >=4.8.0",
    "Deprecated >=1.2.6",
    "Mako >=1.1.0",
    "Markdown >=3.3.4",
    "ipylab >=0.5.2",
    "ipywidgets >=7.5.1",
    "cron-descriptor >=1.2.24",
    "recurrent >=0.4.0",
    "chevron >=0.13.1",
    "psutil >=5.9.0",
    "dataclasses >=0.7 ; python_version == \"3.6\""
  ],
  "requires_python": "",
  "summary": "easy-to-use python interface for seeq",
  "version": "190.9",
  "releases": [],
  "developers": [
    "seeq_corporation",
    "support@seeq.com"
  ],
  "kwds": "seeq python jupyter csv pip",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_seeq_spy",
  "homepage": "https://www.seeq.com",
  "release_count": 20,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_chevron",
    "pypi_cron_descriptor",
    "pypi_dataclasses",
    "pypi_deprecated",
    "pypi_ipylab",
    "pypi_ipython",
    "pypi_ipywidgets",
    "pypi_jupyterlab",
    "pypi_mako",
    "pypi_markdown",
    "pypi_matplotlib",
    "pypi_notebook",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_psutil",
    "pypi_recurrent"
  ]
}
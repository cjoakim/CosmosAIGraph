{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "=========\nflashtext\n=========\n\n.. image:: https://api.travis-ci.org/vi3k6i5/flashtext.svg?branch=master\n   :target: https://travis-ci.org/vi3k6i5/flashtext\n   :alt: build status\n\n.. image:: https://readthedocs.org/projects/flashtext/badge/?version=latest\n   :target: http://flashtext.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. image:: https://badge.fury.io/py/flashtext.svg\n   :target: https://badge.fury.io/py/flashtext\n   :alt: version\n\n.. image:: https://coveralls.io/repos/github/vi3k6i5/flashtext/badge.svg?branch=master\n   :target: https://coveralls.io/github/vi3k6i5/flashtext?branch=master\n   :alt: test coverage\n\n.. image:: https://img.shields.io/github/license/mashape/apistatus.svg?maxage=2592000\n   :target: https://github.com/vi3k6i5/flashtext/blob/master/license\n   :alt: license\n\n\nthis module can be used to replace keywords in sentences or extract keywords from sentences. it is based on the `flashtext algorithm <https://arxiv.org/abs/1711.00046>`_.\n\n\ninstallation\n------------\n::\n\n    $ pip install flashtext\n\n\napi doc\n-------\n\ndocumentation can be found at `flashtext read the docs\n<http://flashtext.readthedocs.io/>`_.\n\n\nusage\n-----\nextract keywords\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> # keyword_processor.add_keyword(<unclean name>, <standardised name>)\n    >>> keyword_processor.add_keyword('big apple', 'new york')\n    >>> keyword_processor.add_keyword('bay area')\n    >>> keywords_found = keyword_processor.extract_keywords('i love big apple and bay area.')\n    >>> keywords_found\n    >>> # ['new york', 'bay area']\n\nreplace keywords\n    >>> keyword_processor.add_keyword('new delhi', 'ncr region')\n    >>> new_sentence = keyword_processor.replace_keywords('i love big apple and new delhi.')\n    >>> new_sentence\n    >>> # 'i love new york and ncr region.'\n\ncase sensitive example\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor(case_sensitive=true)\n    >>> keyword_processor.add_keyword('big apple', 'new york')\n    >>> keyword_processor.add_keyword('bay area')\n    >>> keywords_found = keyword_processor.extract_keywords('i love big apple and bay area.')\n    >>> keywords_found\n    >>> # ['bay area']\n\nspan of keywords extracted\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_processor.add_keyword('big apple', 'new york')\n    >>> keyword_processor.add_keyword('bay area')\n    >>> keywords_found = keyword_processor.extract_keywords('i love big apple and bay area.', span_info=true)\n    >>> keywords_found\n    >>> # [('new york', 7, 16), ('bay area', 21, 29)]\n\nget extra information with keywords extracted\n    >>> from flashtext import keywordprocessor\n    >>> kp = keywordprocessor()\n    >>> kp.add_keyword('taj mahal', ('monument', 'taj mahal'))\n    >>> kp.add_keyword('delhi', ('location', 'delhi'))\n    >>> kp.extract_keywords('taj mahal is in delhi.')\n    >>> # [('monument', 'taj mahal'), ('location', 'delhi')]\n    >>> # note: replace_keywords feature won't work with this.\n\nno clean name for keywords\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_processor.add_keyword('big apple')\n    >>> keyword_processor.add_keyword('bay area')\n    >>> keywords_found = keyword_processor.extract_keywords('i love big apple and bay area.')\n    >>> keywords_found\n    >>> # ['big apple', 'bay area']\n\nadd multiple keywords simultaneously\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"pm\", \"product manager\"]\n    >>> }\n    >>> # {'clean_name': ['list of unclean names']}\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> # or add keywords from a list:\n    >>> keyword_processor.add_keywords_from_list([\"java\", \"python\"])\n    >>> keyword_processor.extract_keywords('i am a product manager for a java_2e platform')\n    >>> # output ['product management', 'java']\n\nto remove keywords\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"pm\", \"product manager\"]\n    >>> }\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> print(keyword_processor.extract_keywords('i am a product manager for a java_2e platform'))\n    >>> # output ['product management', 'java']\n    >>> keyword_processor.remove_keyword('java_2e')\n    >>> # you can also remove keywords from a list/ dictionary\n    >>> keyword_processor.remove_keywords_from_dict({\"product management\": [\"pm\"]})\n    >>> keyword_processor.remove_keywords_from_list([\"java programing\"])\n    >>> keyword_processor.extract_keywords('i am a product manager for a java_2e platform')\n    >>> # output ['product management']\n\nto check number of terms in keywordprocessor\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_dict = {\n    >>>     \"java\": [\"java_2e\", \"java programing\"],\n    >>>     \"product management\": [\"pm\", \"product manager\"]\n    >>> }\n    >>> keyword_processor.add_keywords_from_dict(keyword_dict)\n    >>> print(len(keyword_processor))\n    >>> # output 4\n\nto check if term is present in keywordprocessor\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_processor.add_keyword('j2ee', 'java')\n    >>> 'j2ee' in keyword_processor\n    >>> # output: true\n    >>> keyword_processor.get_keyword('j2ee')\n    >>> # output: java\n    >>> keyword_processor['colour'] = 'color'\n    >>> keyword_processor['colour']\n    >>> # output: color\n\nget all keywords in dictionary\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_processor.add_keyword('j2ee', 'java')\n    >>> keyword_processor.add_keyword('colour', 'color')\n    >>> keyword_processor.get_all_keywords()\n    >>> # output: {'colour': 'color', 'j2ee': 'java'}\n\nfor detecting word boundary currently any character other than this `\\\\w` `[a-za-z0-9_]` is considered a word boundary.\n\nto set or add characters as part of word characters\n    >>> from flashtext import keywordprocessor\n    >>> keyword_processor = keywordprocessor()\n    >>> keyword_processor.add_keyword('big apple')\n    >>> print(keyword_processor.extract_keywords('i love big apple/bay area.'))\n    >>> # ['big apple']\n    >>> keyword_processor.add_non_word_boundary('/')\n    >>> print(keyword_processor.extract_keywords('i love big apple/bay area.'))\n    >>> # []\n\n\ntest\n----\n::\n\n    $ git clone https://github.com/vi3k6i5/flashtext\n    $ cd flashtext\n    $ pip install pytest\n    $ python setup.py test\n\n\nbuild docs\n----------\n::\n\n    $ git clone https://github.com/vi3k6i5/flashtext\n    $ cd flashtext/docs\n    $ pip install sphinx\n    $ make html\n    $ # open _build/html/index.html in browser to view it locally\n\n\nwhy not regex?\n--------------\n\nit's a custom algorithm based on `aho-corasick algorithm\n<https://en.wikipedia.org/wiki/aho%e2%80%93corasick_algorithm>`_ and `trie dictionary\n<https://en.wikipedia.org/wiki/trie dictionary>`_.\n\n.. image:: https://github.com/vi3k6i5/flashtext/raw/master/benchmark.png\n   :target: https://twitter.com/radimrehurek/status/904989624589803520\n   :alt: benchmark\n\n\ntime taken by flashtext to find terms in comparison to regex.\n\n.. image:: https://thepracticaldev.s3.amazonaws.com/i/xruf50n6z1r37ti8rd89.png\n\n\ntime taken by flashtext to replace terms in comparison to regex.\n\n.. image:: https://thepracticaldev.s3.amazonaws.com/i/k44ghwp8o712dm58debj.png\n\nlink to code for benchmarking the `find feature <https://gist.github.com/vi3k6i5/604eefd92866d081cfa19f862224e4a0>`_ and `replace feature <https://gist.github.com/vi3k6i5/dc3335ee46ab9f650b19885e8ade6c7a>`_.\n\nthe idea for this library came from the following `stackoverflow question\n<https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster>`_.\n\n\ncitation\n----------\n\nthe original paper published on `flashtext algorithm <https://arxiv.org/abs/1711.00046>`_.\n\n::\n\n    @article{2017arxiv171100046s,\n       author = {{singh}, v.},\n        title = \"{replace or retrieve keywords in documents at scale}\",\n      journal = {arxiv e-prints},\n    archiveprefix = \"arxiv\",\n       eprint = {1711.00046},\n     primaryclass = \"cs.ds\",\n     keywords = {computer science - data structures and algorithms},\n         year = 2017,\n        month = oct,\n       adsurl = {http://adsabs.harvard.edu/abs/2017arxiv171100046s},\n      adsnote = {provided by the sao/nasa astrophysics data system}\n    }\n\nthe article published on `medium freecodecamp <https://medium.freecodecamp.org/regex-was-taking-5-days-flashtext-does-it-in-15-minutes-55f04411025f>`_.\n\n\ncontribute\n----------\n\n- issue tracker: https://github.com/vi3k6i5/flashtext/issues\n- source code: https://github.com/vi3k6i5/flashtext/\n\n\nlicense\n-------\n\nthe project is licensed under the mit license.",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "flashtext",
  "package_url": "https://pypi.org/project/flashtext/",
  "project_url": "https://pypi.org/project/flashtext/",
  "project_urls": {
    "Homepage": "http://github.com/vi3k6i5/flashtext"
  },
  "release_url": "https://pypi.org/project/flashtext/2.7/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "extract/replaces keywords in sentences.",
  "version": "2.7",
  "releases": [],
  "developers": [
    "vikash.duliajan@gmail.com",
    "vikash_singh"
  ],
  "kwds": "flashtext badge travis vi3k6i5 _build",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_flashtext",
  "homepage": "http://github.com/vi3k6i5/flashtext",
  "release_count": 18,
  "dependency_ids": []
}
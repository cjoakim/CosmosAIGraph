{
  "classifiers": [
    "framework :: django",
    "framework :: django :: 2.0",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# django rest - access policy\n\n[![package version](https://badge.fury.io/py/drf-access-policy.svg)](https://pypi.python.org/pypi/drf-access-policy)\n[![python versions](https://img.shields.io/pypi/status/drf-access-policy.svg)](https://img.shields.io/pypi/status/drf-access-policy.svg/)\n\nthis project brings a declaritive, organized approach to managing access control in django rest framework projects. each viewset or function-based view can be assigned an explicit policy for the exposed resource(s). no more digging through views or seralizers to understand access logic -- it's all in one place in a format that less technical stakeholders can understand. if you're familiar with other declaritive access models, such as aws' iam, the syntax will be familiar.\n\nin short, you can start expressing your access rules like this:\n\n```python\nclass articleaccesspolicy(accesspolicy):\n    statements = [\n        {\n            \"action\": [\"list\", \"retrieve\"],\n            \"principal\": \"*\",\n            \"effect\": \"allow\"\n        },\n        {\n            \"action\": [\"publish\", \"unpublish\"],\n            \"principal\": [\"group:editor\"],\n            \"effect\": \"allow\"\n        }\n    ]\n```\n\nthis project has complete test coverage and the base `accesspolicy` class is only ~150 lines of code: there's no magic here.\n\nadditionally, this project also provides `fieldaccessmixin` that can be added to a serializer to dynamically set fields to `read_only`, based on the access policy. assign the appropriate access policy class inside the `meta` declaration. see example below for how this works:\n\n```python\nclass useraccountaccesspolicy(accesspolicy):\n    statements = [\n        {\"principal\": \"group:admin\", \"action\": [\"create\", \"update\"], \"effect\": \"allow\"},\n        {\n            \"principal\": \"group:dev\",\n            \"action\": [\"update\", \"partial_update\"],\n            \"effect\": \"allow\",\n        },\n    ]\n\n    field_permissions = {\"read_only\": [{\"principal\": \"group:dev\", \"fields\": \"status\"}]}\n\nclass useraccountserializer(fieldaccessmixin, serializers.modelserializer):\n  class meta:\n    model = useraccount\n    fields = [\"username\", \"first_name\", \"last_name\", \"status\"]\n    access_policy = useraccountaccesspolicy\n\n# incoming post/put/patch request from a user in group:dev...\n# serializer = useraccountserializer(account, context={'request': request})\n# print(serializer.fields[\"status\"].read_only) -> true\n```\n\n:warning: **1.0 breaking change** :warning:\n\nsee [migration notes](https://rsinger86.github.io/drf-access-policy/migration_notes.html) if your policy statements combine multiple conditions into boolean expressions.\n\n---\n\n**documentation**: <a href=\"https://rsinger86.github.io/drf-access-policy/\" target=\"_blank\">https://rsinger86.github.io/drf-access-policy</a>\n\n**source code**: <a href=\"https://github.com/rsinger86/drf-access-policy\" target=\"_blank\">https://github.com/rsinger86/drf-access-policy</a>\n\n---\n\n# changelog <a id=\"changelog\"></a>\n\n## 1.5 (march 2023)\n\n- adds `statement` dataclass as alternative to dictionaries. drops python 3.5 support.\n\n\n## 1.4 (march 2023)\n\n- fixes read-only scenario for fieldaccessmixin. thanks @hungryseven!\n\n## 1.3 (october 2022)\n\n- adds `permittedslugrelatedfield` to re-use `scope_queryset` methods on policies. thanks @bradydean!\n\n## 1.2 (october 2022)\n\n- adds `permittedpkrelatedfield` to re-use `scope_queryset` methods on policies.\n\n## 1.1.2 (july 2022)\n\n- fixes issue with boolean parser and shared request state. thanks @mari8i!\n\n## 1.1.1 (april 2022)\n\n- adds support for field-level permissions via a `accesspolicy.scope_fields(request, fields: dict, instance=none)` method and the `fieldaccessmixin`. thanks @gianpieropa!\n\n## 1.1.0 (august 2021)\n\n- adds a mixin for explicitly defining a single access policy per `viewset`.\n\n## 1.0.1 (july 2021)\n\n- fixes race condition between concurrent requests in evaluation of condition expressions. thanks @goranpavlovic!\n\n## 1.0.0 (july 2021)\n\n- :warning: **breaking change** :warning:\n  - the `condition` element no longer supports the evaluation of multiple methods joined with boolean logic. these statements must be updated to use the new `condition_expression` element, which _does support_ complex boolean logic.\n\n## 0.9.2 (july 2021)\n\n- allow defining `reusable_conditions` module as a list. thanks @honakerm!\n\n## 0.9.1 (july 2021)\n\n- fixes attribute error when `request.user` is `none`, which is the case when django's `authenticationmiddleware` is not used. if `request.user` is `none`, the user is anonymous.\n\n## 0.9.0 (april 2021)\n\n- adds special `admin` and `staff` principal keys to match users with `is_superuser` and `is_staff` set to `true`. thanks @barnabasszabolcs!\n\n## 0.8.7 (february 2021)\n\n- fixed bug preventing argument being passed to custom condition method if \"\\*\" character used.\n\n## 0.8.6 (january 2021)\n\n- adds missing requirement to setup.py. thanks @daviddavis!\n\n## 0.8.5 (january 2021)\n\n- adds support for boolean expressions in `condition` statement elements. thanks @tanonl!\n\n## 0.8.1 (october 2020)\n\n- fixes case where object has no `action_map`. thanks @oguzhancelikarslan!\n- added missing info to docs. thanks @hardntrash!\n\n## 0.8.0 (september 2020)\n\n- workaround for quirk resulting in `action` not always being set. thanks @oguzhancelikarslan!\n\n## 0.7.0 (august 2020)\n\n- allows using http method placeholders in `action` element of statements to match request.\n  - for example, `\"action\": [\"<method:post>\"]` will match all post requests.\n\n## 0.6.2 (july 2020)\n\n- uses `user.pk` instead of `user.id` in user principal check, for compatibility with non-`id` primary keys.\n- fixes to documentation. thanks @oguzhancelikarslan!\n\n## 0.6.1 (june 2020)\n\n- replaces references to \"delete\" action with \"destroy\" in docs/tests, to be consistent with drf's viewset actions. thanks @greenled!\n\n## 0.6.0 (may 2020)\n\n- only call database-hitting `get_user_group_values` if needed in private method. thanks killianmeersman!\n- use `prefetch_related_objects` to ensure that user's groups aren't fetched more than once. thanks filwaline!\n\n## 0.5.1 (december 2019)\n\n- tox config updates and typo fixes in docs.\n\n## 0.5.0 (september 2019)\n\n- add option to define re-usable custom conditions/permissions in a module that can be referenced by multiple policies.\n\n## 0.4.2 (june 2019)\n\n- fixes readme format for pypy display.\n\n## 0.4.0 (june 2019)\n\n- allow passing arguments to condition methods, via condition values formatted as `{method_name}:{arg_value}`.\n\n## 0.3.0 (may 2019)\n\n- adds special `<safe_methods>` action key that matches when the current request is an http read-only method: head, get, options.\n\n## 0.2.0 (may 2019)\n\n- adds special `authenticated` and `anonymous` principal keys to match any authenticated user and any non-authenticated user, respectively. thanks @bogdandm for discussion/advice!\n\n## 0.1.0 (may 2019)\n\n- initial release\n\n# testing\n\ntests are found in a simplified django project in the `/tests` folder. install the project requirements and do `./manage.py test` to run them.\n\n# license\n\nsee [license](license.md).\n\n\n",
  "docs_url": null,
  "keywords": "django restframework drf access policy authorization declaritive",
  "license": "mit",
  "name": "drf-access-policy",
  "package_url": "https://pypi.org/project/drf-access-policy/",
  "project_url": "https://pypi.org/project/drf-access-policy/",
  "project_urls": {
    "Homepage": "https://github.com/rsinger86/drf-access-policy"
  },
  "release_url": "https://pypi.org/project/drf-access-policy/1.5.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "declarative access policies/permissions modeled after aws' iam policies.",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "robert_singer",
    "robertgsinger@gmail.com"
  ],
  "kwds": "access_policy authorization restframework django permittedslugrelatedfield",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_drf_access_policy",
  "homepage": "https://github.com/rsinger86/drf-access-policy",
  "release_count": 29,
  "dependency_ids": []
}
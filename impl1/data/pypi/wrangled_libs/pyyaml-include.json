{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: markup"
  ],
  "description": "# pyyaml-include\n\n[![github tag](https://img.shields.io/github/tag/tanbro/pyyaml-include.svg)](https://github.com/tanbro/pyyaml-include)\n[![python package](https://github.com/tanbro/pyyaml-include/workflows/python%20package/badge.svg)](https://github.com/tanbro/pyyaml-include/actions?query=workflow%3a%22python+package%22)\n[![documentation status](https://readthedocs.org/projects/pyyaml-include/badge/?version=latest)](https://pyyaml-include.readthedocs.io/en/latest/)\n[![pypi](https://img.shields.io/pypi/v/pyyaml-include.svg)](https://pypi.org/project/pyyaml-include/)\n[![quality gate status](https://sonarcloud.io/api/project_badges/measure?project=tanbro_pyyaml-include&metric=alert_status)](https://sonarcloud.io/dashboard?id=tanbro_pyyaml-include)\n\nan extending constructor of [pyyaml][]: include other [yaml][] files into [yaml][] document.\n\n## install\n\n```sh\npip install pyyaml-include\n```\n\n## usage\n\nconsider we have such [yaml] files:\n\n```text\n\u251c\u2500\u2500 0.yml\n\u2514\u2500\u2500 include.d\n    \u251c\u2500\u2500 1.yml\n    \u2514\u2500\u2500 2.yml\n```\n\n- `1.yml` 's content:\n\n  ```yaml\n  name: \"1\"\n  ```\n\n- `2.yml` 's content:\n\n  ```yaml\n  name: \"2\"\n  ```\n\nto include `1.yml`, `2.yml` in `0.yml`, we shall add `yamlincludeconstructor` to [pyyaml]'s loader, then add an `!include` tag in `0.yaml`:\n\n```python\nimport yaml\nfrom yamlinclude import yamlincludeconstructor\n\nyamlincludeconstructor.add_to_loader_class(loader_class=yaml.fullloader, base_dir='/your/conf/dir')\n\nwith open('0.yml') as f:\n    data = yaml.load(f, loader=yaml.fullloader)\n\nprint(data)\n```\n\n### mapping\n\nif `0.yml` was:\n\n```yaml\nfile1: !include include.d/1.yml\nfile2: !include include.d/2.yml\n```\n\nwe'll get:\n\n```yaml\nfile1:\n  name: \"1\"\nfile2:\n  name: \"2\"\n```\n\n### sequence\n\nif `0.yml` was:\n\n```yaml\nfiles:\n  - !include include.d/1.yml\n  - !include include.d/2.yml\n```\n\nwe'll get:\n\n```yaml\nfiles:\n  - name: \"1\"\n  - name: \"2\"\n```\n\n> \u2139 **note**:\n>\n> file name can be either absolute (like `/usr/conf/1.5/make.yml`) or relative (like `../../cfg/img.yml`).\n\n### wildcards\n\nfile name can contain shell-style wildcards. data loaded from the file(s) found by wildcards will be set in a sequence.\n\nthat is to say, a list will be returned when including file name contains wildcards.\nlength of the returned list equals number of matched files:\n\n- when only 1 file matched, length of list will be 1\n- when there are no files matched, an empty list will be returned\n\nif `0.yml` was:\n\n```yaml\nfiles: !include include.d/*.yml\n```\n\nwe'll get:\n\n```yaml\nfiles:\n  - name: \"1\"\n  - name: \"2\"\n```\n\n> \u2139 **note**:\n>\n> - for `python>=3.5`, if `recursive` argument of `!include` [yaml] tag is `true`, the pattern `\u201c**\u201d` will match any files and zero or more directories and subdirectories.\n> - using the `\u201c**\u201d` pattern in large directory trees may consume an inordinate amount of time because of recursive search.\n\nin order to enable `recursive` argument, we shall set it in `mapping` or `sequence` arguments mode:\n\n- arguments in `sequence` mode:\n\n  ```yaml\n  !include [tests/data/include.d/**/*.yml, true]\n  ```\n\n- arguments in `mapping` mode:\n\n  ```yaml\n  !include {pathname: tests/data/include.d/**/*.yml, recursive: true}\n  ```\n\n### non yaml files\n\nthis extending constructor can now load data from non yaml files, supported file types are:\n\n- `json`\n- `toml` (only available when [toml](https://pypi.org/project/toml/) installed)\n- `ini`\n\nthe constructor read non yaml files by different readers according to a pattern table defined in `src/yamlinclude/readers.py`.\n\ndefault reader table can be replaced by a custom `reader_map` when call `add_to_loader_class`.\n\n[yaml]: http://yaml.org/\n[pyyaml]: https://pypi.org/project/pyyaml/\n",
  "docs_url": null,
  "keywords": "yaml,pyyaml,include",
  "license": "agplv3+",
  "name": "pyyaml-include",
  "package_url": "https://pypi.org/project/pyyaml-include/",
  "project_url": "https://pypi.org/project/pyyaml-include/",
  "project_urls": {
    "Documentation": "https://pyyaml-include.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/tanbro/pyyaml-include",
    "Repository": "https://github.com/tanbro/pyyaml-include.git"
  },
  "release_url": "https://pypi.org/project/pyyaml-include/1.3.1/",
  "requires_dist": [
    "PyYAML (<7.0,>=5.1)",
    "toml ; (python_version <= \"3.11\") and extra == 'toml'"
  ],
  "requires_python": ">=3.7",
  "summary": "extending pyyaml with a custom constructor for including yaml files within yaml files",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "liu_xue_yan@foxmail.com"
  ],
  "kwds": "pyyaml tanbro_pyyaml yaml yamlinclude workflows",
  "license_kwds": "agplv3+",
  "libtype": "pypi",
  "id": "pypi_pyyaml_include",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_pyyaml",
    "pypi_toml"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "environment :: other environment",
    "environment :: web environment",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: legal industry",
    "intended audience :: other audience",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: documentation",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# duecredit\n\n\n[![build status](https://travis-ci.org/duecredit/duecredit.svg?branch=master)](https://travis-ci.org/duecredit/duecredit)\n[![coverage status](https://coveralls.io/repos/duecredit/duecredit/badge.svg)](https://coveralls.io/r/duecredit/duecredit)\n[![doi](https://zenodo.org/badge/doi/110.5281/zenodo.3376260.svg)](https://doi.org/10.5281/zenodo.3376260)\n[![pypi version fury.io](https://badge.fury.io/py/duecredit.svg)](https://pypi.python.org/pypi/duecredit/)\n\nduecredit is being conceived to address the problem of inadequate\ncitation of scientific software and methods, and limited visibility of\ndonation requests for open-source software.\n\nit provides a simple framework (at the moment for python only) to\nembed publication or other references in the original code so they are\nautomatically collected and reported to the user at the necessary\nlevel of reference detail, i.e. only references for actually used\nfunctionality will be presented back if software provides multiple\nciteable implementations.\n\n## installation\n\nduecredit is easy to install via pip, simply type:\n \n `pip install duecredit`\n\n## examples\n\n### to cite the modules and methods you are using \n\nyou can already start \"registering\" citations using duecredit in your\npython modules and even registering citations (we call this approach \"injections\")\nfor modules which do not (yet) use duecredit.  duecredit will remain an optional\ndependency, i.e. your software will work correctly even without duecredit installed.\n\nfor example, list citations of the modules and methods `yourproject` uses with few simple commands:\n```bash\ncd /path/to/yourmodule # for ~/yourproject\ncd yourproject # change directory into where the main code base is\npython -m duecredit yourproject.py\n```\nor you can also display them in bibtex format, using:\n```bash\nduecredit summary --format=bibtex\n```\nsee this gif animation for better illustration:\n![example](examples/duecredit_example.gif)\n\n\n### to let others cite your software\n\n\nfor using duecredit in your software\n\n1. copy `duecredit/stub.py` to your codebase, e.g.\n\n        wget -q -o /path/tomodule/yourmodule/due.py \\\n          https://raw.githubusercontent.com/duecredit/duecredit/master/duecredit/stub.py\n\n\n    **note** that it might be better to avoid naming it duecredit.py to avoid shadowing\n    installed duecredit.\n\n2. then use `duecredit` import due and necessary entries in your code as\n\n        from .due import due, doi, bibtex\n\n     to provide reference for the entire module just use e.g.\n\n         due.cite(doi(\"1.2.3/x.y.z\"), description=\"solves all your problems\", path=\"magicpy\")\n\n     to provide a reference for a function or a method, use `dcite` decorator\n\n         @due.dcite(doi(\"1.2.3/x.y.z\"), description=\"resolves constipation issue\")\n         def pushit():\n             ...\n\n    you can easily obtain doi for your software using zenodo.org and few other doi providers.\n\nreferences can also be entered as bibtex entries\n\n        due.cite(bibtex(\"\"\"\n                @article{mynicearticle,\n                title={a very cool paper},\n                author={happy, author and lucky, author},\n                journal={the journal of serendipitous discoveries}\n                }\n                \"\"\"), \n                description=\"solves all your problems\", path=\"magicpy\")\n        \n## now what\n        \n### do the due\n\nonce you obtained the references in the duecredit output, include them in in the references section of your paper or software, which used the cited software.\n        \n### add injections for other existing modules\n\nwe hope that eventually this somewhat cruel approach will not be necessary. but\nuntil other packages support duecredit \"natively\" we have provided a way to \"inject\"\ncitations for modules and/or functions and methods via injections: citations will be\nadded to the corresponding functionality upon those modules import.\n\nall injections are collected under\n[duecredit/injections](https://github.com/duecredit/duecredit/tree/master/duecredit/injections).\nsee any file there with `mod_` prefix for a complete example. but\noverall it is just a regular python module defining a function\n`inject(injector)` which will then add new entries to the injector,\nwhich will in turn add those entries to the duecredit whenever the\ncorresponding module gets imported.\n\n\n## user-view\n\n\nby default `duecredit` does exactly nothing -- all decorators do not\ndecorate, all `cite` functions just return, so there should be no fear\nthat it would break anything. then whenever anyone runs their analysis\nwhich uses your code and sets `duecredit_enable=yes` environment\nvariable or uses `python -m duecredit`, and invokes any of the cited\nfunction/methods, at the end of the run all collected bibliography\nwill be presented to the screen and pickled into `.duecredit.p` file\nin current directory:\n\n    $> python -m duecredit examples/example_scipy.py\n    i: simulating 4 blobs\n    i: done clustering 4 blobs\n\n    duecredit report:\n    - scientific tools library / numpy (v 1.10.4) [1]\n    - scientific tools library / scipy (v 0.14) [2]\n      - single linkage hierarchical clustering / scipy.cluster.hierarchy:linkage (v 0.14) [3]\n\n    2 packages cited\n    0 modules cited\n    1 function cited\n\n    references\n    ----------\n\n    [1] van der walt, s., colbert, s.c. & varoquaux, g., 2011. the numpy array: a structure for efficient numerical computation. computing in science & engineering, 13(2), pp.22\u201330.\n    [2] jones, e. et al., 2001. scipy: open source scientific tools for python.\n    [3] sibson, r., 1973. slink: an optimally efficient algorithm for the single-link cluster method. the computer journal, 16(1), pp.30\u201334.\n\n\nincremental runs of various software would keep enriching that file.\nthen you can use `duecredit summary` command to show that information\nagain (stored in `.duecredit.p` file) or export it as a bibtex file\nready for reuse, e.g.:\n\n    $> duecredit summary --format=bibtex\n    @article{van2011numpy,\n            title={the numpy array: a structure for efficient numerical computation},\n            author={van der walt, stefan and colbert, s chris and varoquaux, gael},\n            journal={computing in science \\& engineering},\n            volume={13},\n            number={2},\n            pages={22--30},\n            year={2011},\n            publisher={aip publishing}\n            }\n    @misc{jop+01,\n          author =    {eric jones and travis oliphant and pearu peterson and others},\n          title =     {{scipy}: open source scientific tools for {python}},\n          year =      {2001--},\n          url = \"http://www.scipy.org/\",\n          note = {[online; accessed 2015-07-13]}\n        }\n    @article{sibson1973slink,\n            title={slink: an optimally efficient algorithm for the single-link cluster method},\n            author={sibson, robin},\n            journal={the computer journal},\n            volume={16},\n            number={1},\n            pages={30--34},\n            year={1973},\n            publisher={br computer soc}\n        }\n\n\nand if by default only references for \"implementation\" are listed, we\ncan enable listing of references for other tags as well (e.g. \"edu\"\ndepicting instructional materials -- textbooks etc. on the topic):\n\n    $> duecredit_report_tags=* duecredit summary\n    \n    duecredit report:\n    - scientific tools library / numpy (v 1.10.4) [1]\n    - scientific tools library / scipy (v 0.14) [2]\n      - hierarchical clustering / scipy.cluster.hierarchy (v 0.14) [3, 4, 5, 6, 7, 8, 9]\n      - single linkage hierarchical clustering / scipy.cluster.hierarchy:linkage (v 0.14) [10, 11]\n\n    2 packages cited\n    1 module cited\n    1 function cited\n\n    references\n    ----------\n\n    [1] van der walt, s., colbert, s.c. & varoquaux, g., 2011. the numpy array: a structure for efficient numerical computation. computing in science & engineering, 13(2), pp.22\u201330.\n    [2] jones, e. et al., 2001. scipy: open source scientific tools for python.\n    [3] sneath, p.h. & sokal, r.r., 1962. numerical taxonomy. nature, 193(4818), pp.855\u2013860.\n    [4] batagelj, v. & bren, m., 1995. comparing resemblance measures. journal of classification, 12(1), pp.73\u201390.\n    [5] sokal, r.r., michener, c.d. & university of kansas, 1958. a statistical method for evaluating systematic relationships, university of kansas.\n    [6] jain, a.k. & dubes, r.c., 1988. algorithms for clustering data, prentice-hall, inc..\n    [7] johnson, s.c., 1967. hierarchical clustering schemes. psychometrika, 32(3), pp.241\u2013254.\n    [8] edelbrock, c., 1979. mixture model tests of hierarchical clustering algorithms: the problem of classifying everybody. multivariate behavioral research, 14(3), pp.367\u2013384.\n    [9] fisher, r.a., 1936. the use of multiple measurements in taxonomic problems. annals of eugenics, 7(2), pp.179\u2013188.\n    [10] gower, j.c. & ross, g., 1969. minimum spanning trees and single linkage cluster analysis. applied statistics, pp.54\u201364.\n    [11] sibson, r., 1973. slink: an optimally efficient algorithm for the single-link cluster method. the computer journal, 16(1), pp.30\u201334.\n    \nthe `duecredit_report_all` flag allows one to output all the references\nfor the modules that lack objects or functions with citations.\ncompared to the previous example, the following output additionally \nshows a reference for scikit-learn since `example_scipy.py` uses \nan uncited function from that package.\n\n    $> duecredit_report_tags=* duecredit_report_all=1 duecredit summary\n\n    duecredit report:\n    - scientific tools library / numpy (v 1.10.4) [1]\n    - scientific tools library / scipy (v 0.14) [2]\n      - hierarchical clustering / scipy.cluster.hierarchy (v 0.14) [3, 4, 5, 6, 7, 8, 9]\n      - single linkage hierarchical clustering / scipy.cluster.hierarchy:linkage (v 0.14) [10, 11]\n    - machine learning library / sklearn (v 0.15.2) [12]\n\n    3 packages cited\n    1 module cited\n    1 function cited\n\n    references\n    ----------\n\n    [1] van der walt, s., colbert, s.c. & varoquaux, g., 2011. the numpy array: a structure for efficient numerical computation. computing in science & engineering, 13(2), pp.22\u201330.\n    [2] jones, e. et al., 2001. scipy: open source scientific tools for python.\n    [3] sneath, p.h. & sokal, r.r., 1962. numerical taxonomy. nature, 193(4818), pp.855\u2013860.\n    ...\n\n## tags\n\n\nyou are welcome to introduce new tags specific for your citations but we hope\nthat for consistency across projects, you would use following tags\n\n- `implementation` (default) \u2014 an implementation of the cited method\n- `reference-implementation` \u2014 the original implementation (ideally by\n  the authors of the paper) of the cited method\n- `another-implementation` \u2014 some other implementation of\n   the method, e.g. if you would like to provide citation for another\n   implementation of the method you have implemented in your code and for\n   which you have already provided `implementation` or\n   `reference-implementation` tag\n- `use` \u2014 publications demonstrating a worthwhile noting use of the\n  method\n- `edu` \u2014 tutorials, textbooks and other materials useful to learn\n  more about cited functionality\n- `donate` \u2014 should be commonly used with url entries to point to the\n  websites  describing how to contribute some funds to the referenced\n  project\n- `funding` \u2014 to point to the sources of funding which provided support\n  for a given functionality implementation and/or method development\n- `dataset` - for datasets\n\n## ultimate goals\n\n\n### reduce demand for prima ballerina projects\n\n**problem**: scientific software is often developed to gain citations for\noriginal publication through the use of the software implementing it.\nunfortunately such established procedure discourages contributions\nto existing projects and fosters new projects to be developed from\nscratch.\n\n**solution**: with easy ways to provide all-and-only relevant references\nfor used functionality within a large(r) framework, scientific\ndevelopers will prefer to contribute to already existing projects.\n\n**benefits**: as a result, scientific developers will immediately benefit\nfrom adhering to proper development procedures (codebase structuring,\ntesting, etc) and already established delivery and deployment channels\nexisting projects already have.  this will increase efficiency and\nstandardization of scientific software development, thus addressing\nmany (if not all) core problems with scientific software development\neveryone likes to bash about (reproducibility, longevity, etc.).\n\n### adequately reference core libraries\n\n**problem**: scientific software often, if not always, uses 3rd party\nlibraries (e.g., numpy, scipy, atlas) which might not even be visible\nat the user level.  therefore they are rarely referenced in the\npublications despite providing the fundamental core for solving a\nscientific problem at hands.\n\n**solution**: with automated bibliography compilation for all used\nlibraries, such projects and their authors would get a chance to\nreceive adequate citability.\n\n**benefits**: adequate appreciation of the scientific software\ndevelopments.  coupled with a solution for \"prima ballerina\" problem,\nmore contributions will flow into the core/foundational projects\nmaking new methodological developments readily available to even wider\naudiences without proliferation of the low quality scientific software.\n\n\n## similar/related projects\n\n[sempervirens](https://github.com/njsmith/sempervirens) -- *an\nexperimental prototype for gathering anonymous, opt-in usage data for\nopen scientific software*.  eventually in duecredit we aim either to\nprovide similar functionality (since we are collecting such\ninformation as well) or just interface/report to sempervirens.\n\n[citepy](https://github.com/clbarnes/citepy) -- easily cite software libraries using information from automatically gathered from their package repository.\n\n## currently used by\n\nthis is a running list of projects that use duecredit natively. if you\nare using duecredit, or plan to use it, please consider sending a pull\nrequest and add your project to this list. thanks to\n[@fedorov](https://github.com/fedorov) for the idea.\n\n- [pymvpa](http://www.pymvpa.org)\n- [fatiando](https://github.com/fatiando/fatiando)\n- [nipype](https://github.com/nipy/nipype)\n- [qinfer](https://github.com/qinfer/python-qinfer)\n- [shablona](https://github.com/uwescience/shablona)\n- [gfusion](https://github.com/mvdoc/gfusion)\n- [pybids](https://github.com/incf/pybids)\n- [quickshear](https://github.com/nipy/quickshear)\n- [meqc](https://github.com/emdupre/meqc)\n- [mdanalysis](https://www.mdanalysis.org)\n- [bctpy](https://github.com/aestrivex/bctpy)\n- [torchio](https://github.com/fepegar/torchio)\n\nlast updated 2020-04-07.\n",
  "docs_url": null,
  "keywords": "citation tracing",
  "license": "2-clause bsd license",
  "name": "duecredit",
  "package_url": "https://pypi.org/project/duecredit/",
  "project_url": "https://pypi.org/project/duecredit/",
  "project_urls": {
    "Homepage": "https://github.com/duecredit/duecredit"
  },
  "release_url": "https://pypi.org/project/duecredit/0.9.3/",
  "requires_dist": [
    "requests",
    "citeproc-py >=0.4",
    "importlib-metadata ; python_version < \"3.8\"",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "vcrpy ; extra == 'tests'",
    "contextlib2 ; extra == 'tests'"
  ],
  "requires_python": ">=3.6",
  "summary": "publications (and donations) tracer",
  "version": "0.9.3",
  "releases": [],
  "developers": [
    "yaroslav_halchenko",
    "yoh@onerussian.com"
  ],
  "kwds": "citepy duecredit_report_all citations duecredit duecredit_example",
  "license_kwds": "2-clause bsd license",
  "libtype": "pypi",
  "id": "pypi_duecredit",
  "homepage": "https://github.com/duecredit/duecredit",
  "release_count": 30,
  "dependency_ids": [
    "pypi_citeproc_py",
    "pypi_contextlib2",
    "pypi_importlib_metadata",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_vcrpy"
  ]
}
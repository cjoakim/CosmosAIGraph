{
  "classifiers": [],
  "description": "geog\n====\n\na pure numpy implementation for geodesic functions. the interfaces are\nvectorized according to numpy broadcasting rules compatible with a variety of\ninputs including lists, numpy arrays, and\n[shapely](http://toblerity.org/shapely/) geometries - allowing for 1-to-1,\nn-to-1, or the element-wise n-to-n calculations in a single call.\n\n`geog` uses a spherical earth model (subject to change) with radius 6371.0 km.\n\n`geog` draws inspiration from [turfjs](https://www.turfjs.org)\n\n\noperations\n---------\n* `distance` - compute the distance in meters between any number of longitude,latitude points\n* `course` - compute the forward azimuth between points\n* `propagate` - starting from some points and pointing azimuths, move some\ndistance and compute the final points.\n\n\ngetting started\n---------------\n\ncompute the distance in meters between two locations on the surface of the\nearth.\n```\n>>> import geog\n\n>>> boston = [-71.0589, 42.3601]\n>>> la = [-118.2500, 34.0500]\n\n>>> geog.distance(boston, la)\n4179393.4717019284\n\n\n>>> geog.course(boston, la)\n176.76437002826202\n\n```\n\n`geog` allows different sizes of inputs conforming to numpy broadcasting\nrules\n\ncompute the distances from several points to one point.\n```\n>>> dc = [-77.0164, 38.9047]\n>>> paris = [2.3508, 48.8567]\n>>> geog.distance([boston, la, dc], paris)\narray([ 5531131.56144631,  9085960.07227854,  6163490.48394848])\n\n```\n\ncompute the element-wise distance of several points to several points\n```\n>>> sydney = [151.2094, -33.865]\n>>> barcelona = [2.1833, 41.3833]\n>>> geog.distance([boston, la, dc], [paris, sydney, barcelona])\narray([  5531131.56144631,  12072666.9425518 ,   6489222.58111716])\n\n```\n\n`geog` functions can take numpy arrays as inputs\n```\n>>> import numpy as np\n>>> points = np.array([boston, la, dc])\n>>> points\narray([[ -71.0589,   42.3601],\n       [-118.25  ,   34.05  ],\n       [ -77.0164,   38.9047]])\n>>> geog.distance(points, sydney)\narray([ 16239763.03982447,  12072666.9425518 ,  15711932.63508411])\n```\n\n\n`geog` functions can also take shapely geometries as inputs\n```\n>>> import shapely.geometry\n>>> p = shapely.geometry.point([-90.0667, 29.9500])\n>>> geog.distance(points, p)\narray([ 2185738.94680724,  2687705.07260978,  1554066.84579387])\n\n```\n\n\nother uses\n----------------\nuse `propagate` to buffer a single point by passing in multiple angles.\n\n```\n>>> n_points = 6\n>>> d = 100  # meters\n>>> angles = np.linspace(0, 360, n_points)\n>>> polygon = geog.propagate(p, angles, d)\n\n```\n\ncompute the length of a line over the surface.\n```\n>>> np.sum(geog.distance(line[:-1,:], line[1:,:]))\n```\n\n\nquick documentation\n-------------\n`distance(p0, p1, deg=true)`\n\n`course(p0, p1, deg=true, bearing=false)`\n\n`propagate(p0, angle, d, deg=true, bearing=false)`\n\nfor all of the above, `p0` or `p1` can be:\n- single list, tuple, or shapely point of [lon, lat] coordinates\n- list of [lon, lat] coordinates or shapely points\n- n x 2 numpy array of (lon, lat) coordinates\n\nif argument `deg` is false, then all angle arguments, coordinates and\nazimuths, will be used as radians. if `deg` is false in `course()`, then it's\noutput will also be radians.\n\nconsult the documentation on each function for more detailed descriptions of\nthe arguments.\n\n\nconventions\n-----------\n* all points, or point-like objects assume a longitude, latitude ordering.\n* arrays of points have shape `n x 2`.\n* azimuth/course is measured with 0 degrees as due east, increasing\n  counter-clockwise so that 90 degrees is due north. the functions that\noperate on azimuth accept a `bearing=true` argument to use the more\ntraditional definition where 0 degrees is due north increasing clockwise such\nthat that 90 degrees is due east.\n\n\ninstallation\n-----------\ngeog is hosted on pypi.\n\n```\npip install geog\n```\n\n\nsee also\n--------\n* `geog` is partly inspired by [turfjs](https://www.turfjs.org)\n\n* [postgis](http://postgis.net/docs/manual-1.5/ch04.html#geography_basics) geography type\n* [shapely](https://github.com/toblerity/shapely)\n* [proj.4](https://trac.osgeo.org/proj/)",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "geog",
  "package_url": "https://pypi.org/project/geog/",
  "project_url": "https://pypi.org/project/geog/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/jwass/geog"
  },
  "release_url": "https://pypi.org/project/geog/0.0.2/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "numpy-based vectorized geospatial functions",
  "version": "0.0.2",
  "releases": [],
  "developers": [
    "jacob_wasserman",
    "jwasserman@gmail.com"
  ],
  "kwds": "geog longitude geodesic turfjs latitude",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_geog",
  "homepage": "https://github.com/jwass/geog",
  "release_count": 2,
  "dependency_ids": []
}
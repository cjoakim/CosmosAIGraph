{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "# the datadog python library\n\n[![unit tests](https://dev.azure.com/datadoghq/datadogpy/_apis/build/status/datadog.datadogpy.unit?branchname=master)](https://dev.azure.com/datadoghq/datadogpy/_build/latest?definitionid=10&branchname=master)\n[![integration tests](https://dev.azure.com/datadoghq/datadogpy/_apis/build/status/datadog.datadogpy.integration?branchname=master)](https://dev.azure.com/datadoghq/datadogpy/_build/latest?definitionid=13&branchname=master)\n[![documentation status](https://readthedocs.org/projects/datadogpy/badge/?version=latest)](https://readthedocs.org/projects/datadogpy/?badge=latest)\n[![pypi - version](https://img.shields.io/pypi/v/datadog.svg)](https://pypi.org/project/datadog)\n[![pypi - downloads](https://pepy.tech/badge/datadog)](https://pepy.tech/project/datadog)\n\nthe datadog python library is a collection of tools suitable for inclusion in existing python projects or for the development of standalone scripts. it provides an abstraction on top of datadog's raw http interface and the agent's dogstatsd metrics aggregation server, to interact with datadog and efficiently report events and metrics.\n\n- library documentation: https://datadogpy.readthedocs.io/en/latest/\n- http api documentation: https://docs.datadoghq.com/api/\n- datadoghq: https://datadoghq.com\n\nsee [changelog.md](https://github.com/datadog/datadogpy/blob/master/changelog.md) for changes.\n\n## installation\n\nto install from pip:\n\n    pip install datadog\n\nto install from source:\n\n    python setup.py install\n\n## datadog api\n\nto support all datadog http apis, a generated library is\navailable which will expose all the endpoints:\n[datadog-api-client-python](https://github.com/datadog/datadog-api-client-python).\n\nfind below a working example for submitting an event to your event stream:\n\n```python\nfrom datadog import initialize, api\n\noptions = {\n    \"api_key\": \"<your_api_key>\",\n    \"app_key\": \"<your_app_key>\",\n}\n\ninitialize(**options)\n\ntitle = \"something big happened!\"\ntext = \"and let me tell you all about it here!\"\ntags = [\"version:1\", \"application:web\"]\n\napi.event.create(title=title, text=text, tags=tags)\n```\n\n**consult the full list of supported datadog api endpoints with working code examples in [the datadog api documentation](https://docs.datadoghq.com/api/latest/?code-lang=python).**\n\n**note**: the full list of available datadog api endpoints is also available in the [datadog python library documentation](https://datadogpy.readthedocs.io/en/latest/)\n\n#### environment variables\n\nas an alternate method to using the `initialize` function with the `options` parameters, set the environment variables `datadog_api_key` and `datadog_app_key` within the context of your application.\n\nif `datadog_api_key` or `datadog_app_key` are not set, the library attempts to fall back to datadog's apm environment variable prefixes: `dd_api_key` and `dd_app_key`.\n\n```python\nfrom datadog import initialize, api\n\n# assuming you've set `dd_api_key` and `dd_app_key` in your env,\n# initialize() will pick it up automatically\ninitialize()\n\ntitle = \"something big happened!\"\ntext = \"and let me tell you all about it here!\"\ntags = [\"version:1\", \"application:web\"]\n\napi.event.create(title=title, text=text, tags=tags)\n```\n\nin development, you can disable any `statsd` metric collection using `dd_dogstatsd_disable=true` (or any not-empty value).\n\n## dogstatsd\n\nin order to use dogstatsd metrics, the agent must be [running and available](https://docs.datadoghq.com/developers/dogstatsd/?code-lang=python).\n\n### instantiate the dogstatsd client with udp\n\nonce the datadog python library is installed, instantiate the statsd client using udp in your code:\n\n```python\nfrom datadog import initialize, statsd\n\noptions = {\n    \"statsd_host\": \"127.0.0.1\",\n    \"statsd_port\": 8125,\n}\n\ninitialize(**options)\n```\n\nsee the full list of available [dogstatsd client instantiation parameters](https://docs.datadoghq.com/developers/dogstatsd/?code-lang=python#client-instantiation-parameters).\n\n#### instantiate the dogstatsd client with uds\n\nonce the datadog python library is installed, instantiate the statsd client using uds in your code:\n```python\n\nfrom datadog import initialize, statsd\n\noptions = {\n    \"statsd_socket_path\": path_to_socket,\n}\n\ninitialize(**options)\n```\n\n#### origin detection over udp and uds\n\norigin detection is a method to detect which pod `dogstatsd` packets are coming from in order to add the pod's tags to the tag list.\nthe `dogstatsd` client attaches an internal tag, `entity_id`. the value of this tag is the content of the `dd_entity_id` environment variable if found, which is the pod's uid. the datadog agent uses this tag to add container tags to the metrics. to avoid overwriting this global tag, make sure to only `append` to the `constant_tags` list.\n\nto enable origin detection over udp, add the following lines to your application manifest\n```yaml\nenv:\n  - name: dd_entity_id\n    valuefrom:\n      fieldref:\n        fieldpath: metadata.uid\n```\n\n### usage\n#### metrics\n\nafter the client is created, you can start sending custom metrics to datadog. see the dedicated [metric submission: dogstatsd documentation](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python) to see how to submit all supported metric types to datadog with working code examples:\n\n* [submit a count metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#count).\n* [submit a gauge metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#gauge).\n* [submit a set metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#set)\n* [submit a histogram metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#histogram)\n* [submit a timer metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#timer)\n* [submit a distribution metric](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#distribution)\n\nsome options are supported when submitting metrics, like [applying a sample rate to your metrics](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#metric-submission-options) or [tagging your metrics with your custom tags](https://docs.datadoghq.com/metrics/dogstatsd_metrics_submission/?code-lang=python#metric-tagging).\n\n#### events\n\nafter the client is created, you can start sending events to your datadog event stream. see the dedicated [event submission: dogstatsd documentation](https://docs.datadoghq.com/events/guides/dogstatsd/?code-lang=python) to see how to submit an event to your datadog event stream.\n\n#### service checks\n\nafter the client is created, you can start sending service checks to datadog. see the dedicated [service check submission: dogstatsd documentation](https://docs.datadoghq.com/developers/service_checks/dogstatsd_service_checks_submission/?code-lang=python) to see how to submit a service check to datadog.\n\n### monitoring this client\n\nthis client automatically injects telemetry about itself in the dogstatsd stream.\nthose metrics will not be counted as custom and will not be billed. this feature can be disabled using the `statsd.disable_telemetry()` method.\n\nsee [telemetry documentation](https://docs.datadoghq.com/developers/dogstatsd/high_throughput/?code-lang=python#client-side-telemetry) to learn more about it.\n\n### benchmarks\n\n_note: you will need to install `psutil` package before running the benchmarks._\n\nif you would like to get an approximate idea on the throughput that your dogstatsd library\ncan handle on your system, you can run the included local benchmark code:\n\n```sh-session\n$ # python 2 example\n$ python2 -m unittest -vvv tests.performance.test_statsd_throughput\n\n$ # python 3 example\n$ python3 -m unittest -vvv tests.performance.test_statsd_throughput\n```\n\nyou can also add set `benchmark_*` to customize the runs:\n```sh-session\n$ # example #1\n$ benchmark_num_runs=10 benchmark_num_threads=1 benchmark_num_datapoints=5000 benchmark_transport=\"udp\" python2 -m unittest -vvv tests.performance.test_statsd_throughput\n\n$ # example #2\n$ benchmark_num_threads=10 benchmark_transport=\"uds\" python3 -m unittest -vvv tests.performance.test_statsd_throughput\n```\n\n## maximum packets size in high-throughput scenarios\n\nin order to have the most efficient use of this library in high-throughput scenarios,\ndefault values for the maximum packets size have already been set for both uds (8192 bytes)\nand udp (1432 bytes) in order to have the best usage of the underlying network.\nhowever, if you perfectly know your network and you know that a different value for the maximum packets\nsize should be used, you can set it with the parameter `max_buffer_len`. example:\n\n```python\nfrom datadog import initialize\n\noptions = {\n    \"api_key\": \"<your_api_key>\",\n    \"app_key\": \"<your_app_key>\",\n    \"max_buffer_len\": 4096,\n}\n\ninitialize(**options)\n```\n\n## thread safety\n\n`dogstatsd` and `threadstats` are thread-safe.\n",
  "docs_url": null,
  "keywords": "datadog",
  "license": "bsd-3-clause",
  "name": "datadog",
  "package_url": "https://pypi.org/project/datadog/",
  "project_url": "https://pypi.org/project/datadog/",
  "project_urls": {
    "Bug Tracker": "https://github.com/DataDog/datadogpy/issues",
    "Documentation": "https://datadogpy.readthedocs.io/en/latest/",
    "Source Code": "https://github.com/DataDog/datadogpy"
  },
  "release_url": "https://pypi.org/project/datadog/0.47.0/",
  "requires_dist": [
    "configparser<5; python_version < '3.0'",
    "requests>=2.6.0",
    "typing; python_version < '3.5'"
  ],
  "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7",
  "summary": "the datadog python library",
  "version": "0.47.0",
  "releases": [],
  "developers": [
    "dev@datadoghq.com"
  ],
  "kwds": "datadog datadogpy datadog_api_key datadog_app_key datadoghq",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_datadog",
  "homepage": "",
  "release_count": 56,
  "dependency_ids": [
    "pypi_configparser",
    "pypi_requests",
    "pypi_typing"
  ]
}
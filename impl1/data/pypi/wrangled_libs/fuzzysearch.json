{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "===========\nfuzzysearch\n===========\n\n.. image:: https://img.shields.io/pypi/v/fuzzysearch.svg?style=flat\n    :target: https://pypi.python.org/pypi/fuzzysearch\n    :alt: latest version\n\n.. image:: https://img.shields.io/travis/taleinat/fuzzysearch.svg?branch=master\n    :target: https://travis-ci.org/taleinat/fuzzysearch/branches\n    :alt: build & tests status\n\n.. image:: https://img.shields.io/coveralls/taleinat/fuzzysearch.svg?branch=master\n    :target: https://coveralls.io/r/taleinat/fuzzysearch?branch=master\n    :alt: test coverage\n\n.. image:: https://img.shields.io/pypi/wheel/fuzzysearch.svg?style=flat\n    :target: https://pypi.python.org/pypi/fuzzysearch\n    :alt: wheels\n\n.. image:: https://img.shields.io/pypi/pyversions/fuzzysearch.svg?style=flat\n    :target: https://pypi.python.org/pypi/fuzzysearch\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/fuzzysearch.svg?style=flat\n    :target: https://pypi.python.org/pypi/fuzzysearch\n    :alt: supported python implementations\n\n.. image:: https://img.shields.io/pypi/l/fuzzysearch.svg?style=flat\n    :target: https://pypi.python.org/pypi/fuzzysearch/\n    :alt: license\n\nfuzzy search: find parts of long text or data, allowing for some\nchanges/typos.\n\n**easy, fast, and just works!**\n\n.. code:: python\n\n    >>> find_near_matches('pattern', '---patern---', max_l_dist=1)\n    [match(start=3, end=9, dist=1, matched=\"patern\")]\n\n* two simple functions to use: one for in-memory data and one for files\n\n  * fastest search algorithm is chosen automatically\n\n* levenshtein distance metric with configurable parameters\n\n  * separately configure the max. allowed distance, substitutions, deletions\n    and/or insertions\n\n* advanced algorithms with optional c and cython optimizations\n\n* properly handles unicode; special optimizations for binary data\n\n* simple installation:\n   * ``pip install fuzzysearch`` just works\n   * pure-python fallbacks for compiled modules\n   * only one dependency (``attrs``)\n\n* extensively tested\n\n* free software: `mit license <license>`_\n\nfor more info, see the `documentation <http://fuzzysearch.rtfd.org>`_.\n\n\ninstallation\n------------\n\n``fuzzysearch`` supports python versions 2.7 and 3.5+, as well as pypy 2.7 and\n3.6.\n\n.. code::\n\n    $ pip install fuzzysearch\n\nthis will work even if installing the c and cython extensions fails, using\npure-python fallbacks.\n\n\nusage\n-----\njust call ``find_near_matches()`` with the sub-sequence you're looking for,\nthe sequence to search, and the matching parameters:\n\n.. code:: python\n\n    >>> from fuzzysearch import find_near_matches\n    # search for 'pattern' with a maximum levenshtein distance of 1\n    >>> find_near_matches('pattern', '---patern---', max_l_dist=1)\n    [match(start=3, end=9, dist=1, matched=\"patern\")]\n\nto search in a file, use ``find_near_matches_in_file()`` similarly:\n\n.. code:: python\n\n    >>> from fuzzysearch import find_near_matches_in_file\n    >>> with open('data_file', 'rb') as f:\n    ...     find_near_matches_in_file(b'pattern', f, max_l_dist=1)\n    [match(start=3, end=9, dist=1, matched=\"patern\")]\n\n\nexamples\n--------\n\n*fuzzysearch* is great for ad-hoc searches of genetic data, such as dna or\nprotein sequences, before reaching for \"heavier\", domain-specific tools like\nbiopython:\n\n.. code:: python\n\n    >>> sequence = '''\\\n    gactagcactgtagggataacaatttcacacaggtggacaattacattgaaaatcacagattggtcacacacaca\n    ttggacatacatagaaacacacacacatacattagatacgaacatagaaacacacattagacgcgtacatagaca\n    caaacacattgacaggcagttcagatgatgacgcccgactgatactcgcgtagtcgtgggaggcaaggcacacag\n    gggatagg'''\n    >>> subsequence = 'tgcactgtagggataacaat' # distance = 1\n    >>> find_near_matches(subsequence, sequence, max_l_dist=2)\n    [match(start=3, end=24, dist=1, matched=\"tagcactgtagggataacaat\")]\n\nbiopython sequences are also supported:\n\n.. code:: python\n\n    >>> from bio.seq import seq\n    >>> from bio.alphabet import iupac\n    >>> sequence = seq('''\\\n    gactagcactgtagggataacaatttcacacaggtggacaattacattgaaaatcacagattggtcacacacaca\n    ttggacatacatagaaacacacacacatacattagatacgaacatagaaacacacattagacgcgtacatagaca\n    caaacacattgacaggcagttcagatgatgacgcccgactgatactcgcgtagtcgtgggaggcaaggcacacag\n    gggatagg''', iupac.unambiguous_dna)\n    >>> subsequence = seq('tgcactgtagggataacaat', iupac.unambiguous_dna)\n    >>> find_near_matches(subsequence, sequence, max_l_dist=2)\n    [match(start=3, end=24, dist=1, matched=\"tagcactgtagggataacaat\")]\n\n\nmatching criteria\n-----------------\nthe search function supports four possible match criteria, which may be\nsupplied in any combination:\n\n* maximum levenshtein distance (``max_l_dist``)\n\n* maximum # of subsitutions\n\n* maximum # of deletions (\"delete\" = skip a character in the sub-sequence)\n\n* maximum # of insertions (\"insert\" = skip a character in the sequence)\n\nnot supplying a criterion means that there is no limit for it. for this reason,\none must always supply ``max_l_dist`` and/or all other criteria.\n\n.. code:: python\n\n    >>> find_near_matches('pattern', '---patern---', max_l_dist=1)\n    [match(start=3, end=9, dist=1, matched=\"patern\")]\n\n    # this will not match since max-deletions is set to zero\n    >>> find_near_matches('pattern', '---patern---', max_l_dist=1, max_deletions=0)\n    []\n\n    # note that a deletion + insertion may be combined to match a substution\n    >>> find_near_matches('pattern', '---pat-ern---', max_deletions=1, max_insertions=1, max_substitutions=0)\n    [match(start=3, end=10, dist=1, matched=\"pat-ern\")] # the levenshtein distance is still 1\n\n    # ... but deletion + insertion may also match other, non-substitution differences\n    >>> find_near_matches('pattern', '---paterrn---', max_deletions=1, max_insertions=1, max_substitutions=0)\n    [match(start=3, end=10, dist=2, matched=\"paterrn\")]\n\n\nwhen to use other tools\n-----------------------\n\n* use case: search through a list of strings for almost-exactly matching\n  strings. for example, searching through a list of names for possible slight\n  variations of a certain name.\n\n  suggestion: consider using `fuzzywuzzy <https://github.com/seatgeek/fuzzywuzzy>`_.\n\n\n\n\nhistory\n-------\n\n0.7.3 (2020-06-27)\n++++++++++++++++++\n\n* fixed segmentation faults due to wrong handling of inputs in bytes-like-only\n  functions in c extensions.\n\n0.7.2 (2020-05-07)\n++++++++++++++++++\n* added pypy support.\n* several minor bug fixes.\n\n0.7.1 (2020-04-05)\n++++++++++++++++++\n* dropped support for python 3.4.\n* removed deprecation warning with python 3.8.\n* fixed a couple of nasty bugs.\n\n0.7.0 (2020-01-14)\n++++++++++++++++++\n\n* added ``matched`` attribue to ``match`` objects containing the matched part\n  of the sequence.\n* added support for cpython 3.8. now supporting cpython 2.7 and 3.4-3.8.\n\n0.6.2 (2019-04-22)\n++++++++++++++++++\n\n* fix calling ``search_exact()`` without passing ``end_index``.\n* fix edge case: max. dist >= sub-sequence length.\n\n0.6.1 (2018-12-08)\n++++++++++++++++++\n\n* fixed some c compiler warnings for the c and cython modules\n\n0.6.0 (2018-12-07)\n++++++++++++++++++\n\n* dropped support for python versions 2.6, 3.2 and 3.3\n* added support and testing for python 3.7\n* optimized the n-grams levenshtein search for long sub-sequences\n* further optimized the n-grams levenshtein search\n* cython versions of the optimized parts of the n-grams levenshtein search\n\n0.5.0 (2017-09-05)\n++++++++++++++++++\n\n* fixed ``search_exact_byteslike()`` to support supplying start and end indexes\n* added support for lists, tuples and other sequence types to ``search_exact()``\n* fixed a bug where ``find_near_matches()`` could return a wrong ``match.end``\n  with ``max_l_dist=0``\n* added more tests and improved some existing ones.\n\n0.4.0 (2017-07-06)\n++++++++++++++++++\n\n* added support and testing for python 3.5 and 3.6\n* many small improvements to readme, setup.py and ci testing\n\n0.3.0 (2015-02-12)\n++++++++++++++++++\n\n* added c extensions for several search functions as well as internal functions\n* use c extensions if available, or pure-python implementations otherwise\n* setup.py attempts to build c extensions, but installs without if build fails\n* added ``--noexts`` setup.py option to avoid trying to build the c extensions\n* greatly improved testing and coverage\n\n0.2.2 (2014-03-27)\n++++++++++++++++++\n\n* added support for searching through biopython seq objects\n* added specialized search function allowing only subsitutions and insertions\n* fixed several bugs\n\n0.2.1 (2014-03-14)\n++++++++++++++++++\n\n* fixed major match grouping bug\n\n0.2.0 (2013-03-13)\n++++++++++++++++++\n\n* new utility function ``find_near_matches()`` for easier use\n* additional documentation\n\n0.1.0 (2013-11-12)\n++++++++++++++++++\n\n* two working implementations\n* extensive test suite; all tests passing\n* full support for python 2.6-2.7 and 3.1-3.3\n* bumped status from pre-alpha to alpha\n\n0.0.1 (2013-11-01)\n++++++++++++++++++\n\n* first release on pypi.\n\n",
  "docs_url": null,
  "keywords": "fuzzysearch",
  "license": "mit",
  "name": "fuzzysearch",
  "package_url": "https://pypi.org/project/fuzzysearch/",
  "project_url": "https://pypi.org/project/fuzzysearch/",
  "project_urls": {
    "Homepage": "https://github.com/taleinat/fuzzysearch"
  },
  "release_url": "https://pypi.org/project/fuzzysearch/0.7.3/",
  "requires_dist": [
    "attrs (>=19.3)"
  ],
  "requires_python": "",
  "summary": "fuzzysearch is useful for finding approximate subsequence matches",
  "version": "0.7.3",
  "releases": [],
  "developers": [
    "tal_einat",
    "taleinat@gmail.com"
  ],
  "kwds": "fuzzysearch fuzzy fuzzywuzzy svg coveralls",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_fuzzysearch",
  "homepage": "https://github.com/taleinat/fuzzysearch",
  "release_count": 14,
  "dependency_ids": [
    "pypi_attrs"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: distributed computing"
  ],
  "description": "# cloudpickle\n\n[![automated tests](https://github.com/cloudpipe/cloudpickle/workflows/automated%20tests/badge.svg?branch=master&event=push)](https://github.com/cloudpipe/cloudpickle/actions)\n[![codecov.io](https://codecov.io/github/cloudpipe/cloudpickle/coverage.svg?branch=master)](https://codecov.io/github/cloudpipe/cloudpickle?branch=master)\n\n`cloudpickle` makes it possible to serialize python constructs not supported\nby the default `pickle` module from the python standard library.\n\n`cloudpickle` is especially useful for **cluster computing** where python\ncode is shipped over the network to execute on remote hosts, possibly close\nto the data.\n\namong other things, `cloudpickle` supports pickling for **lambda functions**\nalong with **functions and classes defined interactively** in the\n`__main__` module (for instance in a script, a shell or a jupyter notebook).\n\ncloudpickle can only be used to send objects between the **exact same version\nof python**.\n\nusing `cloudpickle` for **long-term object storage is not supported and\nstrongly discouraged.**\n\n**security notice**: one should **only load pickle data from trusted sources** as\notherwise `pickle.load` can lead to arbitrary code execution resulting in a critical\nsecurity vulnerability.\n\n\ninstallation\n------------\n\nthe latest release of `cloudpickle` is available from\n[pypi](https://pypi.python.org/pypi/cloudpickle):\n\n    pip install cloudpickle\n\n\nexamples\n--------\n\npickling a lambda expression:\n\n```python\n>>> import cloudpickle\n>>> squared = lambda x: x ** 2\n>>> pickled_lambda = cloudpickle.dumps(squared)\n\n>>> import pickle\n>>> new_squared = pickle.loads(pickled_lambda)\n>>> new_squared(2)\n4\n```\n\npickling a function interactively defined in a python shell session\n(in the `__main__` module):\n\n```python\n>>> constant = 42\n>>> def my_function(data: int) -> int:\n...     return data + constant\n...\n>>> pickled_function = cloudpickle.dumps(my_function)\n>>> depickled_function = pickle.loads(pickled_function)\n>>> depickled_function\n<function __main__.my_function(data:int) -> int>\n>>> depickled_function(43)\n85\n```\n\n\noverriding pickle's serialization mechanism for importable constructs:\n----------------------------------------------------------------------\n\nan important difference between `cloudpickle` and `pickle` is that\n`cloudpickle` can serialize a function or class **by value**, whereas `pickle`\ncan only serialize it **by reference**. serialization by reference treats\nfunctions and classes as attributes of modules, and pickles them through\ninstructions that trigger the import of their module at load time.\nserialization by reference is thus limited in that it assumes that the module\ncontaining the function or class is available/importable in the unpickling\nenvironment. this assumption breaks when pickling constructs defined in an\ninteractive session, a case that is automatically detected by `cloudpickle`,\nthat pickles such constructs **by value**.\n\nanother case where the importability assumption is expected to break is when\ndeveloping a module in a distributed execution environment: the worker\nprocesses may not have access to the said module, for example if they live on a\ndifferent machine than the process in which the module is being developed. by\nitself, `cloudpickle` cannot detect such \"locally importable\" modules and\nswitch to serialization by value; instead, it relies on its default mode, which\nis serialization by reference. however, since `cloudpickle 2.0.0`, one can\nexplicitly specify modules for which serialization by value should be used,\nusing the\n`register_pickle_by_value(module)`/`/unregister_pickle_by_value(module)` api:\n\n```python\n>>> import cloudpickle\n>>> import my_module\n>>> cloudpickle.register_pickle_by_value(my_module)\n>>> cloudpickle.dumps(my_module.my_function)  # my_function is pickled by value\n>>> cloudpickle.unregister_pickle_by_value(my_module)\n>>> cloudpickle.dumps(my_module.my_function)  # my_function is pickled by reference\n```\n\nusing this api, there is no need to re-install the new version of the module on\nall the worker nodes nor to restart the workers: restarting the client python\nprocess with the new source code is enough.\n\nnote that this feature is still **experimental**, and may fail in the following\nsituations:\n\n- if the body of a function/class pickled by value contains an `import` statement:\n  ```python\n  >>> def f():\n  >>> ... from another_module import g\n  >>> ... # calling f in the unpickling environment may fail if another_module\n  >>> ... # is unavailable\n  >>> ... return g() + 1\n  ```\n\n- if a function pickled by reference uses a function pickled by value during its execution.\n\n\nrunning the tests\n-----------------\n\n- with `tox`, to test run the tests for all the supported versions of\n  python and pypy:\n\n      pip install tox\n      tox\n\n  or alternatively for a specific environment:\n\n      tox -e py312\n\n\n- with `pytest` to only run the tests for your current version of\n  python:\n\n      pip install -r dev-requirements.txt\n      pythonpath='.:tests' pytest\n\nhistory\n-------\n\n`cloudpickle` was initially developed by [picloud.com](http://web.archive.org/web/20140721022102/http://blog.picloud.com/2013/11/17/picloud-has-joined-dropbox/) and shipped as part of\nthe client sdk.\n\na copy of `cloudpickle.py` was included as part of pyspark, the python\ninterface to [apache spark](https://spark.apache.org/). davies liu, josh\nrosen, thom neale and other apache spark developers improved it significantly,\nmost notably to add support for pypy and python 3.\n\nthe aim of the `cloudpickle` project is to make that work available to a wider\naudience outside of the spark ecosystem and to make it easier to improve it\nfurther notably with the help of a dedicated non-regression test suite.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "cloudpickle",
  "package_url": "https://pypi.org/project/cloudpickle/",
  "project_url": "https://pypi.org/project/cloudpickle/",
  "project_urls": {
    "Homepage": "https://github.com/cloudpipe/cloudpickle"
  },
  "release_url": "https://pypi.org/project/cloudpickle/3.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "pickler class to extend the standard pickle.pickler functionality",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "cloudpipe@googlegroups.com",
    "the_cloudpickle_developer_team"
  ],
  "kwds": "cloudpickle cloudpipe pickled_lambda pickled_function pip",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_cloudpickle",
  "homepage": "https://github.com/cloudpipe/cloudpickle",
  "release_count": 39,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "programming language :: cython",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: multimedia :: graphics :: capture :: scanners",
    "topic :: multimedia :: graphics :: graphics conversion",
    "topic :: scientific/engineering :: image recognition"
  ],
  "description": "=========\ntesserocr\n=========\n\na simple, |pillow|_-friendly,\nwrapper around the ``tesseract-ocr`` api for optical character recognition\n(ocr).\n\n.. image:: https://github.com/sirfz/tesserocr/actions/workflows/build.yml/badge.svg\n    :target: https://github.com/sirfz/tesserocr/actions/workflows/build.yml\n    :alt: github actions build status\n\n.. image:: https://img.shields.io/pypi/v/tesserocr.svg?maxage=2592000\n    :target: https://pypi.python.org/pypi/tesserocr\n    :alt: latest version on pypi\n\n.. image:: https://img.shields.io/pypi/pyversions/tesserocr.svg?maxage=2592000\n    :alt: supported python versions\n\n**tesserocr** integrates directly with tesseract's c++ api using cython\nwhich allows for a simple pythonic and easy-to-read source code. it\nenables real concurrent execution when used with python's ``threading``\nmodule by releasing the gil while processing an image in tesseract.\n\n**tesserocr** is designed to be |pillow|_-friendly but can also be used\nwith image files instead.\n\n.. |pillow| replace:: ``pillow``\n.. _pillow: http://python-pillow.github.io/\n\nrequirements\n============\n\nrequires libtesseract (>=3.04) and libleptonica (>=1.71).\n\non debian/ubuntu:\n\n::\n\n    $ apt-get install tesseract-ocr libtesseract-dev libleptonica-dev pkg-config\n\nyou may need to `manually compile tesseract`_ for a more recent version. note that you may need\nto update your ``ld_library_path`` environment variable to point to the right library versions in\ncase you have multiple tesseract/leptonica installations.\n\n|cython|_ (>=0.23) is required for building and optionally |pillow|_ to support ``pil.image`` objects.\n\n.. _manually compile tesseract: https://github.com/tesseract-ocr/tesseract/wiki/compiling\n.. |cython| replace:: ``cython``\n.. _cython: http://cython.org/\n\ninstallation\n============\nlinux and bsd/macos\n-------------------\n::\n\n    $ pip install tesserocr\n\nthe setup script attempts to detect the include/library dirs (via |pkg-config|_ if available) but you\ncan override them with your own parameters, e.g.:\n\n::\n\n    $ cppflags=-i/usr/local/include pip install tesserocr\n\nor\n\n::\n\n    $ python setup.py build_ext -i/usr/local/include\n\ntested on linux and bsd/macos\n\n.. |pkg-config| replace:: **pkg-config**\n.. _pkg-config: https://pkgconfig.freedesktop.org/\n\nwindows\n-------\n\nthe proposed downloads consist of stand-alone packages containing all the windows libraries needed for execution. this means that no additional installation of tesseract is required on your system.\n\nthe recommended method of installation is via conda as described below.\n\nconda\n`````\n\nyou can use the `conda-forge <https://anaconda.org/conda-forge/tesserocr>`_ channel to install from conda:\n\n::\n\n    > conda install -c conda-forge tesserocr\n\npip\n```\n\ndownload the wheel file corresponding to your windows platform and python installation from `simonflueckiger/tesserocr-windows_build/releases <https://github.com/simonflueckiger/tesserocr-windows_build/releases>`_ and install them via:\n\n::\n\n    > pip install <package_name>.whl\n\nbuild from source\n`````````````````\n\nif you need windows tessocr package and your python version is not supported by above mentioned project,\nyou can try to follow `step by step instructions for windows 64bit` in `windows.build.md`_.\n\n.. _windows.build.md: windows.build.md\n\ntessdata\n========\n\nyou may need to point to the tessdata path if it cannot be detected automatically. this can be done by setting the ``tessdata_prefix`` environment variable or by passing the path to ``pytessbaseapi`` (e.g.: ``pytessbaseapi(path='/usr/share/tessdata')``). the path should contain ``.traineddata`` files which can be found at https://github.com/tesseract-ocr/tessdata.\n\nmake sure you have the correct version of traineddata for your ``tesseract --version``.\n\nyou can list the current supported languages on your system using the ``get_languages`` function:\n\n.. code:: python\n\n    from tesserocr import get_languages\n\n    print(get_languages('/usr/share/tessdata'))  # or any other path that applies to your system\n\nusage\n=====\n\ninitialize and re-use the tesseract api instance to score multiple\nimages:\n\n.. code:: python\n\n    from tesserocr import pytessbaseapi\n\n    images = ['sample.jpg', 'sample2.jpg', 'sample3.jpg']\n\n    with pytessbaseapi() as api:\n        for img in images:\n            api.setimagefile(img)\n            print(api.getutf8text())\n            print(api.allwordconfidences())\n    # api is automatically finalized when used in a with-statement (context manager).\n    # otherwise api.end() should be explicitly called when it's no longer needed.\n\n``pytessbaseapi`` exposes several tesseract api methods. make sure you\nread their docstrings for more info.\n\nbasic example using available helper functions:\n\n.. code:: python\n\n    import tesserocr\n    from pil import image\n\n    print(tesserocr.tesseract_version())  # print tesseract-ocr version\n    print(tesserocr.get_languages())  # prints tessdata path and list of available languages\n\n    image = image.open('sample.jpg')\n    print(tesserocr.image_to_text(image))  # print ocr text from image\n    # or\n    print(tesserocr.file_to_text('sample.jpg'))\n\n``image_to_text`` and ``file_to_text`` can be used with ``threading`` to\nconcurrently process multiple images which is highly efficient.\n\nadvanced api examples\n---------------------\n\ngetcomponentimages example:\n```````````````````````````\n\n.. code:: python\n\n    from pil import image\n    from tesserocr import pytessbaseapi, ril\n\n    image = image.open('/usr/src/tesseract/testing/phototest.tif')\n    with pytessbaseapi() as api:\n        api.setimage(image)\n        boxes = api.getcomponentimages(ril.textline, true)\n        print('found {} textline image components.'.format(len(boxes)))\n        for i, (im, box, _, _) in enumerate(boxes):\n            # im is a pil image object\n            # box is a dict with x, y, w and h keys\n            api.setrectangle(box['x'], box['y'], box['w'], box['h'])\n            ocrresult = api.getutf8text()\n            conf = api.meantextconf()\n            print(u\"box[{0}]: x={x}, y={y}, w={w}, h={h}, \"\n                  \"confidence: {1}, text: {2}\".format(i, conf, ocrresult, **box))\n\norientation and script detection (osd):\n```````````````````````````````````````\n\n.. code:: python\n\n    from pil import image\n    from tesserocr import pytessbaseapi, psm\n\n    with pytessbaseapi(psm=psm.auto_osd) as api:\n        image = image.open(\"/usr/src/tesseract/testing/eurotext.tif\")\n        api.setimage(image)\n        api.recognize()\n\n        it = api.analyselayout()\n        orientation, direction, order, deskew_angle = it.orientation()\n        print(\"orientation: {:d}\".format(orientation))\n        print(\"writingdirection: {:d}\".format(direction))\n        print(\"textlineorder: {:d}\".format(order))\n        print(\"deskew angle: {:.4f}\".format(deskew_angle))\n\nor more simply with ``osd_only`` page segmentation mode:\n\n.. code:: python\n\n    from tesserocr import pytessbaseapi, psm\n\n    with pytessbaseapi(psm=psm.osd_only) as api:\n        api.setimagefile(\"/usr/src/tesseract/testing/eurotext.tif\")\n\n        os = api.detectos()\n        print(\"orientation: {orientation}\\norientation confidence: {oconfidence}\\n\"\n              \"script: {script}\\nscript confidence: {sconfidence}\".format(**os))\n\nmore human-readable info with tesseract 4+ (demonstrates lstm engine usage):\n\n.. code:: python\n\n    from tesserocr import pytessbaseapi, psm, oem\n\n    with pytessbaseapi(psm=psm.osd_only, oem=oem.lstm_only) as api:\n        api.setimagefile(\"/usr/src/tesseract/testing/eurotext.tif\")\n\n        os = api.detectorientationscript()\n        print(\"orientation: {orient_deg}\\norientation confidence: {orient_conf}\\n\"\n              \"script: {script_name}\\nscript confidence: {script_conf}\".format(**os))\n\niterator over the classifier choices for a single symbol:\n`````````````````````````````````````````````````````````\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from tesserocr import pytessbaseapi, ril, iterate_level\n\n    with pytessbaseapi() as api:\n        api.setimagefile('/usr/src/tesseract/testing/phototest.tif')\n        api.setvariable(\"save_blob_choices\", \"t\")\n        api.setrectangle(37, 228, 548, 31)\n        api.recognize()\n\n        ri = api.getiterator()\n        level = ril.symbol\n        for r in iterate_level(ri, level):\n            symbol = r.getutf8text(level)  # r == ri\n            conf = r.confidence(level)\n            if symbol:\n                print(u'symbol {}, conf: {}'.format(symbol, conf), end='')\n            indent = false\n            ci = r.getchoiceiterator()\n            for c in ci:\n                if indent:\n                    print('\\t\\t ', end='')\n                print('\\t- ', end='')\n                choice = c.getutf8text()  # c == ci\n                print(u'{} conf: {}'.format(choice, c.confidence()))\n                indent = true\n            print('---------------------------------------------')\n",
  "docs_url": null,
  "keywords": "tesseract,tesseract-ocr,ocr,optical character recognition,pil,pillow,cython",
  "license": "mit",
  "name": "tesserocr",
  "package_url": "https://pypi.org/project/tesserocr/",
  "project_url": "https://pypi.org/project/tesserocr/",
  "project_urls": {
    "Homepage": "https://github.com/sirfz/tesserocr"
  },
  "release_url": "https://pypi.org/project/tesserocr/2.6.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a simple, pillow-friendly, python wrapper around tesseract-ocr api using cython",
  "version": "2.6.2",
  "releases": [],
  "developers": [
    "fayez_zouheiry",
    "iamfayez@gmail.com"
  ],
  "kwds": "tesseract_version tesseract tesserocr tessdata_prefix tessocr",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tesserocr",
  "homepage": "https://github.com/sirfz/tesserocr",
  "release_count": 18,
  "dependency_ids": []
}
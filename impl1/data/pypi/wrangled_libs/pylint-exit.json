{
  "classifiers": [
    "license :: osi approved :: mit license"
  ],
  "description": "# pylint-exit\n\n[![pypi package](https://badge.fury.io/py/pylint-exit.svg)](https://pypi.org/project/pylint-exit)\n[![build status](https://api.travis-ci.org/jongracecox/pylint-exit.svg?branch=master)](https://travis-ci.org/jongracecox/pylint-exit)\n[![downloads](https://img.shields.io/pypi/dm/pylint-exit.svg)](https://pypistats.org/packages/pylint-exit)\n[![github last commit](https://img.shields.io/github/last-commit/jongracecox/pylint-exit.svg)](https://github.com/jongracecox/pylint-exit/commits/master)\n[![github](https://img.shields.io/github/license/jongracecox/pylint-exit.svg)](https://github.com/jongracecox/pylint-exit/blob/master/license)\n[![github stars](https://img.shields.io/github/stars/jongracecox/pylint-exit.svg?style=social)](https://github.com/jongracecox/pylint-exit/stargazers)\n\nutility to handle pylint exit codes on linux in a scripting-friendly way.\n\npylint uses bit-encoded exit codes to convey the results of the pylint review,\nwhich means it will return with a non-zero return code even when the\npylint scoring was successful.\n\nthis can make it difficult to script the execution of pylint while at the same time\ndetecting genuine errors.\n\n`pylint-exit` is a small command-line utility that can be used to re-process\nthe pylint return code and translate it into a scripting-friendly return code.\n\n`pylint-exit` will decode the bit-encoded return code, identify whether there were\nany fatal messages issued (which might constitute a failure in the execution of\npylint), or a usage error, and return a `0` or `1` return code that is more easily\nused in shell scripts.\n\n# installation\n\nthe simplest way to install is via `pip`.\n\n```bash\npip install pylint-exit\n```\n\nthis will install the package, and will provide the `pylint-exit` command line utility.\n\nyou can also manually install by downloading `pylint_exit.py`, and make it executable.\n\n```bash\ncurl -o pylint-exit https://raw.githubusercontent.com/jongracecox/pylint-exit/master/pylint_exit.py && chmod +x pylint_exit.py\n```\n\nyou should also consider creating a symbolic link so that the calls in the remainder of this\nreadme work as described.  update `<path-to>` with where you downloaded the script.\n\n```bash\nln -s <path-to>/pylint_exit.py /usr/local/bin/pylint-exit\n```\n\n*note: if you perform a `--user` install with `pip` then you will need to ensure `~/.local/bin` appears in your `path`\nenvironment variable, otherwise the command line `pylint-exit` will not work.* \n\n# usage\nadd `|| pylint-exit $?` to the end of your existing pylint command.  you can then\nuse the updated `$?` return code in your shell script.\n\n```bash\npylint mymodule.py || pylint-exit $?\nif [ $? -ne 0 ]; then\n  echo \"an error occurred while running pylint.\" >&2\n  exit 1\nfi\n```\n\nnote: many ci tools will check the return code of each command, so it may be enough to\nsimply add `|| pylint-exit $?`, and leave the return code check to the ci executor.\n\nyou can also use the python code directly if needed:\n\n```bash\npylint mymodule.py || python pylint_exit.py $?\n```\n\n# return codes\npylint can return combinations of the following codes.  `pylint-exit` will identify each\nissued message, and return the maximum final return code.\n\n| pylint code | message | final return code |\n| ----------- | ------- | ----------------- |\n| 1  | fatal message issued | 1 |\n| 2  | error message issued | 0 |\n| 4  | warning message issued | 0 |\n| 8  | refactor message issued | 0 |\n| 16 | convention message issued | 0 |\n| 32 | usage error | 1 |\n\nthis list is stored in `exit_codes_list`, which can be customised if needed.\n\nyou can control what is considered a failure using the following command line arguments.\nby default these types of messages don't cause a non-zero return code. adding\nany of these arguments will trigger a non-zero return code when those types of\nmessage are raised. \n\n| name | meaning |\n| ---- | ------- |\n| `-efail`, `--error-fail` | fail on issued error messages. |\n| `-wfail`, `--warn-fail` | fail on issued warning messages. |\n| `-rfail`, `--refactor-fail` | fail on issued refactor messages. |\n| `-cfail`, `--convention-fail` | fail on issued convension messages. |\n\n# examples\n\n## exiting gracefully on non-severe messages\nin this example pylint issues refactor and convention messages, and exits with a\nreturn code of 24.  `pylint-exit` decodes this, displays the messages, and exits\nwith a return code of 0.\n\n```bash\n> pylint --rcfile=.pylintrc --output-format=text mymodule.py || pylint-exit $?\nthe following messages were raised:\n\n  - refactor message issued\n  - convention message issued\n\nno fatal messages detected.  exiting gracefully...\n> echo $?\n0\n```\n\n## exiting with an error on severe messages\nin this example pylint returns with a usage error due to the bad output format, and\nexits with a return code of 32.  `pylint-exit` detects this, displays the message, and\nreturns with an exit code of 1.\n\n```bash\n> pylint --rcfile=.pylintrc --output-format=badformat mymodule.py || pylint-exit $?\nthe following messages were raised:\n\n  - usage error\n\nfatal messages detected.  failing...\n> echo $?\n1\n```\n\n## treating errors and warnings as severe\nin this example we will use the `--error-fail` and `--warn-fail` command line arguments\nto cause pylint-exit to treat errors and warnings as serious enough to return a non-zero\nreturn code.\n\nin the example scenario pylint issues error and warning messages, and exits with a\nreturn code of 6.  `pylint-exit` decodes this, displays the messages, and exits\nwith a return code of 1 because the error and warning messages are now considered as\nfatal.\n\n\n```bash\n> pylint --rcfile=.pylintrc --output-format=badformat mymodule.py || pylint-exit --error-fail --warn-fail $?\nthe following messages were raised:\n\n  - error message issued\n  - warning message issued\n\nfatal messages detected.  failing...\n> echo $?\n1\n\n```\n\n# testing\n\nyou can test how pylint-exit will react to various return codes using the following command:\n\n```bash\n(exit 6) || pylint-exit $?\n```\n\nor if you are using the python code directly:\n\n```bash\n(exit 6) || python pylint_exit.py $?\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pylint-exit",
  "package_url": "https://pypi.org/project/pylint-exit/",
  "project_url": "https://pypi.org/project/pylint-exit/",
  "project_urls": {
    "Homepage": "https://github.com/jongracecox/pylint-exit"
  },
  "release_url": "https://pypi.org/project/pylint-exit/1.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "exit code handler for pylint command line utility.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "jon_grace",
    "jongracecox@gmail.com"
  ],
  "kwds": "pylint_exit pylintrc pylint pypistats pypi",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pylint_exit",
  "homepage": "https://github.com/jongracecox/pylint-exit",
  "release_count": 7,
  "dependency_ids": []
}
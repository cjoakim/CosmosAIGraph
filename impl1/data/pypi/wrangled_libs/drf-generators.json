{
  "classifiers": [
    "environment :: web environment",
    "framework :: django :: 1.11",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http"
  ],
  "description": "==============\ndrf generators\n==============\n\nwriting apis can be boring and repetitive work. don't write another cruddy view in `django rest framework <http://github.com/tomchristie/django-rest-framework>`_. with drf generators, one simple command will generate all of your views, serializers, and even urls for your django rest framework application!\n\nfor a full step-by-step tutorial, check out my `blog post <http://brobin.me/blog/2015/4/13/how-to-quickly-write-an-api-in-django>`_!\n\nthis is **not** intended to give you a production quality api. it was intended to jumpstart your development and save you from writing the same code over and over for each model.\n\n---------------\n\n|python| |pypi| |license| |travis| |django| |drf|\n\n---------------\n\n* `installation`_\n* `usage`_\n* `serializers`_\n* `views`_\n* `urls`_\n* `tests`_\n* `license`_\n\n---------------\n\n============\ninstallation\n============\n\ninstall with pip:\n\n.. code-block:: bash\n\n    $ pip install drf-generators\n\nor clone the repo and install manually:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/brobin/drf-generators.git\n    $ cd drf-generators\n    $ python setup.py install\n\nto use drf generators, add it your installed_apps.\n\n.. code-block:: python\n\n    installed_apps = (\n        ...\n        'rest_framework',\n        'drf_generators',\n        ...\n    )\n\n*note*: in order to use the apiview classes, you must have the rest framework default_pagination_class and page_size set.\n\n.. code-block:: python\n\n    rest_framework = {\n        'default_pagination_class': 'rest_framework.pagination.pagenumberpagination',\n        'page_size': 15\n    }\n\n-----------------\n\n=====\nusage\n=====\n\nto use the generators, run the following command, where ``app`` is the application to generate an api for.\n\n.. code-block:: bash\n\n   $ python manage.py generate {app} {options}\n\n========================== ===================================================\noption                     action\n========================== ===================================================\n``--serializers``          generate only serializers for your app.\n``--views``                generate only views for your app.\n``--urls``                 generate only urls for your app.\n``--force``                overwrite existing files without the warning prompt.\n``-f``, ``--format``       format to use when generating views and urls. valid options: ``viewset``, ``apiview``, ``function``, ``modelviewset``. default: ``viewset``.\n``-d``, ``--depth``        serialization depth for related models. default: 0\n========================== ===================================================\n\n**example:** generate everything for the app ``api`` with function style views, overwriting existing files, with a serialization depth of 2.\n\n.. code-block:: bash\n\n    $ python manage.py generate api --format function --force -- depth=2\n\n-------------------\n\n===========\nserializers\n===========\n\ndrf generators will create ``serializers.py`` for your application. it currently uses rest framework's ``modelserializer`` for serialization of the models defined in ``models.py``.\n\n.. code-block:: python\n\n    class modelserializer(serializers.modelserializer):\n\n        class meta:\n            model = user\n\n------------------\n\n=====\nviews\n=====\n\ndrf generators will create ``views.py`` for your application. it can generate ``viewset``, ``apiview`` and function based views. set the ``--format`` option when running the generator to pick the preferred style\n\n-------\nviewset\n-------\n\n``python manage.py generate api  --format viewset``\n\n.. code-block:: python\n\n    class modelviewset(viewset):\n\n        def list(self, request):\n            ...\n        def create(self, request):\n            ...\n        def retrieve(self, request, pk=none):\n            ...\n        def update(self, request, pk=none):\n            ...\n        def destroy(self, request, pk=none):\n            ...\n\n-------\napiview\n-------\n\n``python manage.py generate api --format apiview``\n\n.. code-block:: python\n\n    class modelapiview(apiview):\n\n        def get(self, request, id, format=none):\n            ...\n        def put(self, request, id, format=none):\n            ...\n        def delete(self, request, id, format=none):\n            ...\n\n    class modelapilistview(apiview):\n\n        def get(self, request, format=none):\n            ...\n        def post(self, request, format=none):\n            ...\n\n--------\nfunction\n--------\n\n``python manage.py generate api --format function``\n\n.. code-block:: python\n\n    @api_view(['get', 'post'])\n    def model_list(request):\n        if request.method == 'get':\n            ...\n        elif request.method == 'post':\n            ...\n\n    @api_view(['get', 'put', 'delete'])\n    def model_detail(request, pk):\n        if request.method == 'get':\n            ...\n        elif request.method == 'put':\n            ...\n        elif request.method == 'delete':\n            ...\n\n-------------\nmodelviewset\n-------------\n\n``python manage.py generate api --format modelviewset``\n\n.. code-block:: python\n\n    class mymodelviewset(modelviewset):\n        queryset = mymodel.objects.all()\n        serializer_class = mymodelserializer\n\n-----------------\n\n====\nurls\n====\n\nfinally, drf generator will create you a default ``urls.py`` to match the view format you are using.\n\n----------------------------\nviewset & modeviewset routes\n----------------------------\n\n.. code-block:: python\n\n    router = simplerouter()\n\n    router.register(r'model', views.modelviewset, 'model')\n\n    urlpatterns = router.urls\n\n------------\napiview urls\n------------\n\n.. code-block:: python\n\n    url(r'^model/([0-9]+)$', views.modelapiview.as_view()),\n    url(r'^model', views.modelapilistview.as_view()),\n\n-------------\nfunction urls\n-------------\n\n.. code-block:: python\n\n    urlpatterns = [\n\n        url(r'^model/(?p<pk>[0-9]+)$', views.model_detail),\n        url(r'^model/$', views.model_list),\n\n    ]\n\n    urlpatterns = format_suffix_patterns(urlpatterns)\n\n\n=====\ntests\n=====\n\na full application built with drf-generators can be found in the `tests directory <http://github.com/brobin/drf-generators/tree/master/tests>`_. instructions on running the tests can be found in the test project's readme.\n\n\n=======\nlicense\n=======\n\nmit license. see `license <https://github.com/brobin/drf-generators/blob/master/license>`_.\n\n\n.. |python| image:: https://img.shields.io/pypi/v/drf-generators.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/drf-generators/\n    :alt: supported python versions\n\n.. |pypi| image:: https://img.shields.io/pypi/pyversions/drf-generators.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/drf-generators/\n    :alt: latest version\n\n.. |license| image:: https://img.shields.io/pypi/l/drf-generators.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/drf-generators/\n    :alt: license\n\n.. |travis| image:: https://img.shields.io/travis/brobin/drf-generators.svg?style=flat-square\n    :target: https://travis-ci.org/brobin/drf-generators/\n    :alt: travis ci\n\n.. |django| image:: https://img.shields.io/badge/django-1.11, 2.2,3.0-orange.svg?style=flat-square\n    :target: http://djangoproject.com/\n    :alt: django 1.11, 2.2, 3.0\n\n.. |drf| image:: https://img.shields.io/badge/drf-3.11-orange.svg?style=flat-square\n    :target: http://www.django-rest-framework.org/\n    :alt: drf 3.11",
  "docs_url": null,
  "keywords": "api rest framework generate scaffold",
  "license": "mit",
  "name": "drf-generators",
  "package_url": "https://pypi.org/project/drf-generators/",
  "project_url": "https://pypi.org/project/drf-generators/",
  "project_urls": {
    "Download": "https://github.com/brobin/drf-generators/archive/0.5.0.zip",
    "Homepage": "https://github.com/brobin/drf-generators"
  },
  "release_url": "https://pypi.org/project/drf-generators/0.5.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "generate drf serializers, views, and urls for your api application.",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "tobin@brobin.me",
    "tobin_brown"
  ],
  "kwds": "django djangoproject rest_framework api_view model_detail",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_drf_generators",
  "homepage": "https://github.com/brobin/drf-generators",
  "release_count": 17,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# jinja2-simple-tags\n\n`jinja2-simple-tags` is a library that provides a simple way to create custom template \ntags in jinja2 templates.\n\n[![pypi](https://img.shields.io/pypi/v/jinja2-simple-tags.svg)](https://pypi.org/project/jinja2-simple-tags/)\n[![build status](https://travis-ci.com/dldevinc/jinja2-simple-tags.svg?branch=master)](https://travis-ci.org/dldevinc/jinja2-simple-tags)\n\n## compatibility\n\n-   `python` >= 3.6\n-   `jinja2` >= 2.10\n\n## installation\n\n`pip install jinja2-simple-tags`\n\n## usage\n\nto use `jinja2-simple-tags`, you need to create a subclass of one of the provided \ntag types and implement the `render` method.\n\n### `standalonetag`\n\n`standalonetag` is a tag that doesn't require a closing tag. it can be used like this:\n\n```python\nfrom datetime import datetime\nfrom jinja2_simple_tags import standalonetag\n\n\nclass nowextension(standalonetag):\n    tags = {\"now\"}\n\n    def render(self, format=\"%y-%m-%d %h:%i:%s\"):\n        return datetime.now().strftime(format)\n```\n\n```jinja2\n{% now %}               {# 2023-04-27 20:08:03 #}\n{% now '%m/%d/%y' %}    {# 04/27/2023 #}\n```\n\n#### escaping\n\nby default, the output of `standalonetag` will be escaped. to disable escaping,\nset the `safe_output` property of your tag to `true`:\n\n```python\nfrom jinja2_simple_tags import standalonetag\n\n\nclass alertextension(standalonetag):\n    safe_output = true\n    tags = {\"alert\"}\n\n    def render(self, message):\n        return \"<script>alert('{}')</script>\".format(message)\n```\n\nyou can also return a `jinja2.markup` object from the `render()` method to explicitly \nmark the output as safe.\n\n### `containertag`\n\n`containertag` is a tag that requires a closing tag and can contain arbitrary content.\nit can be used like this:\n\n```python\nimport hmac\nfrom jinja2_simple_tags import containertag\n\n\nclass hmacextension(containertag):\n    tags = {\"hmac\"}\n\n    def render(self, secret, digest=\"sha256\", caller=none):\n        content = str(caller()).encode()\n\n        if isinstance(secret, str):\n            secret = secret.encode()\n\n        signing = hmac.new(secret, content, digestmod=digest)\n        return signing.hexdigest()\n```\n\n```jinja2\n{% hmac 'secret', digest='sha1' %}hello world!{% endhmac %}\n\n{# e29371e24dc99c5641681728855a92e26829e288 #}\n```\n\n### context\n\ncurrent context can be accessed using `self.context` attribute of the tag class:\n\n```python\nfrom jinja2_simple_tags import standalonetag\n\n\nclass usernameextension(standalonetag):\n    tags = {\"username\"}\n\n    def render(self):\n        return self.context[\"user\"].username\n```\n\n### assignment\n\nin addition to returning the rendered value,  `containertag` and `standalonetag`\nalso supports assigning the output to a variable in the context. this can be done\nusing the `as` keyword:\n\n```jinja2\n{% now '%m/%d/%y' as today %}    \n...\n{{ today }}         {# 04/27/2023 #}\n```\n\n```jinja2\n{% hmac 'secret', digest='sha1' as signature %}hello world!{% endhmac %}\n...\n{{ signature }}     {# e29371e24dc99c5641681728855a92e26829e288 #}\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd license",
  "name": "jinja2-simple-tags",
  "package_url": "https://pypi.org/project/jinja2-simple-tags/",
  "project_url": "https://pypi.org/project/jinja2-simple-tags/",
  "project_urls": {
    "Homepage": "https://github.com/dldevinc/jinja2-simple-tags"
  },
  "release_url": "https://pypi.org/project/jinja2-simple-tags/0.5.0/",
  "requires_dist": [
    "Jinja2 (>=2.10)"
  ],
  "requires_python": ">=3.6",
  "summary": "base classes for quick-and-easy template tag development",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "mihail_mishakin",
    "x896321475@gmail.com"
  ],
  "kwds": "jinja2_simple_tags jinja2 standalonetag tags containertag",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_jinja2_simple_tags",
  "homepage": "https://github.com/dldevinc/jinja2-simple-tags",
  "release_count": 11,
  "dependency_ids": [
    "pypi_jinja2"
  ]
}
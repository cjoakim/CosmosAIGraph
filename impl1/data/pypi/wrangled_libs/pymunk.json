{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: games/entertainment",
    "topic :: scientific/engineering :: physics",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: pygame"
  ],
  "description": "pymunk\n======\n\n.. image::  https://raw.githubusercontent.com/viblo/pymunk/master/docs/src/_static/pymunk_logo_animation.gif\n\npymunk is an easy-to-use pythonic 2d physics library that can be used whenever \nyou need 2d rigid body physics from python. perfect when you need 2d physics \nin your game, demo or simulation! it is built on top of the very \ncapable 2d physics library `chipmunk <http://chipmunk-physics.net>`_.\n\nthe first version was released in 2007 and pymunk is still actively developed \nand maintained today, more than 15 years of active development!\n\npymunk has been used with success in many projects, big and small. for example: \n3 pyweek game competition winners, dozens of published scientific \npapers and even in a self-driving car simulation! see the showcases section on \nthe pymunk webpage for some examples.\n\n2007 - 2023, victor blomqvist - vb@viblo.se, mit license\n\nthis release is based on the latest pymunk release (6.6.0), \nusing chipmunk 7 rev 5dd7d774053145fa37f352d7a07d2f75a9bd8039.\n\n\ninstallation\n------------\n\nin the normal case pymunk can be installed from pypi with pip::\n\n    > pip install pymunk\n\nit has one direct dependency, cffi.\n\npymunk can also be installed with conda, from the conda-forge channel::\n\n    > conda install -c conda-forge pymunk\n\nfor more detailed installation instructions, please see the complete pymunk \ndocumentation.\n\nexample\n-------\n\nquick code example::\n    \n    import pymunk               # import pymunk..\n\n    space = pymunk.space()      # create a space which contain the simulation\n    space.gravity = 0,-981      # set its gravity\n\n    body = pymunk.body()        # create a body\n    body.position = 50,100      # set the position of the body\n\n    poly = pymunk.poly.create_box(body) # create a box shape and attach to body\n    poly.mass = 10              # set the mass on the shape\n    space.add(body, poly)       # add both body and shape to the simulation\n\n    print_options = pymunk.spacedebugdrawoptions() # for easy printing \n\n    for _ in range(100):        # run simulation 100 steps in total\n        space.step(0.02)        # step the simulation one step forward\n        space.debug_draw(print_options) # print the state of the simulation\n\nthis will print (to console) the state of the simulation. for more visual, \ndetailed and advanced examples, take a look at the included demos.  \nthey are included in the pymunk install, in the pymunk.examples subpackage. \nthey can be run directly. to list the examples::\n\n    > python -m pymunk.examples -l\n\nand to run one of them::\n\n    > python -m pymunk.examples.breakout\n\n\ncontact & support\n-----------------\n.. _contact-support:\n\n**homepage**\n    http://www.pymunk.org/\n\n**stackoverflow**\n    you can ask questions/browse old ones at stackoverflow, just look for \n    the pymunk tag. http://stackoverflow.com/questions/tagged/pymunk\n\n**e-mail**\n    you can email me directly at vb@viblo.se\n\n**issue tracker**\n    please use the issue tracker at github to report any issues you find. this \n    is also the place for feature requests:\n    https://github.com/viblo/pymunk/issues\n    \nregardless of the method you use i will try to answer your questions as soon \nas i see them. (and if you ask on so other people might help as well!)\n\n\ndocumentation\n-------------\n\nthe full documentation including api reference, showcase of usages and \nscreenshots of examples is available on the pymunk homepage, \nhttp://www.pymunk.org\n\n\nthe pymunk vision\n-----------------\n\n    \"*make 2d physics easy to include in your game*\"\n\nit is (or is striving to be):\n\n* **easy to use** - it should be easy to use, no complicated code should be \n  needed to add physics to your game or program.\n* **\"pythonic\"** - it should not be visible that a c-library (chipmunk) is in \n  the bottom, it should feel like a python library (no strange naming, oo, \n  no memory handling and more)\n* **simple to build & install** - you shouldn't need to have a zillion of \n  libraries installed to make it install, or do a lot of command line tricks.\n* **multi-platform** - should work on both windows, \\*nix and osx.\n* **non-intrusive** - it should not put restrictions on how you structure \n  your program and not force you to use a special game loop, it should be \n  possible to use with other libraries like pygame and pyglet. \n\n  \ndependencies / requirements\n---------------------------\n\nbasically pymunk have been made to be as easy to install and distribute as \npossible, usually `pip install` will take care of everything for you.\n\n- python (runs on cpython 3.7 and later and pypy3)\n- chipmunk (prebuilt and included when using binary wheels)\n- cffi (will be installed automatically by pip)\n- setuptools (should be included with pip)\n\n* gcc and friends (optional, you need it to compile pymunk from source. on \n  windows visual studio is required to compile)\n* pygame (optional, you need it to run the pygame based demos)\n* pyglet (optional, you need it to run the pyglet based demos)\n* matplotlib & jupyter notebook (optional, you need it to run the matplotlib \n  based demos)\n* sphinx & aafigure & sphinx_autodoc_typehints (optional, you need it to build \n  documentation)\n\n\nolder pythons\n-------------\n\n- support for python 2 (and python 3.0 - 3.5) was dropped with pymunk 6.0.\n- support for python 3.6 was dropped with pymunk 6.5.2.\n\nif you use any of these legacy versions of python, please use an older \npymunk version. (it might work on newer pymunks as well, but its not tested \nand no wheels are built.)\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "pymunk",
  "package_url": "https://pypi.org/project/pymunk/",
  "project_url": "https://pypi.org/project/pymunk/",
  "project_urls": {
    "Homepage": "http://www.pymunk.org"
  },
  "release_url": "https://pypi.org/project/pymunk/6.6.0/",
  "requires_dist": [
    "cffi >=1.15.0",
    "pyglet <2.0.0 ; extra == 'dev'",
    "pygame ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "aafigure ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "matplotlib ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "pymunk is a easy-to-use pythonic 2d physics library",
  "version": "6.6.0",
  "releases": [],
  "developers": [
    "vb@viblo.se",
    "victor_blomqvist"
  ],
  "kwds": "pymunk_logo_animation pymunk pymunks pygame pypy3",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pymunk",
  "homepage": "http://www.pymunk.org",
  "release_count": 31,
  "dependency_ids": [
    "pypi_aafigure",
    "pypi_cffi",
    "pypi_matplotlib",
    "pypi_pygame",
    "pypi_pyglet",
    "pypi_sphinx",
    "pypi_wheel"
  ]
}
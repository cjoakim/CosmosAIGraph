{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: win32 (ms windows)",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing"
  ],
  "description": "<h1>pynose \ud83d\udc0d\ud83d\udc43 <a href=\"https://pypi.python.org/pypi/pynose\" target=\"_blank\"><img src=\"https://img.shields.io/pypi/v/pynose.svg?color=3399ee\" alt=\"pypi version\" /></a></h1>\n\n### **[pynose](https://github.com/mdmintz/pynose)** fixes **[nose](https://nose.readthedocs.io/en/latest/)** to extend [unittest](https://docs.python.org/3/library/unittest.html) and make testing easier.\n\n--------\n\n``pynose`` is an updated version of ``nose``, originally made by jason pellerin.\n\nthis version of ``nose`` is compatible with ``python 3.6+`` (including ``3.12+``).\n\nchanges in ``pynose`` from legacy ``nose`` include:\n* fixes \"attributeerror: module 'collections' has no attribute 'callable'.\"\n* fixes \"attributeerror: module 'inspect' has no attribute 'getargspec'.\"\n* fixes \"importerror: cannot import name '_texttestresult' from 'unittest'.\"\n* fixes \"runtimewarning: testresult has no addduration method.\"\n* fixes \"deprecationwarning: pkg_resources is deprecated as an api.\"\n* fixes all ``flake8`` issues from the original ``nose``.\n* replaces the ``imp`` module with the newer ``importlib`` module.\n* the default logging level now hides \"debug\" logs for less noise.\n* the ``-s`` option is always active to see the output of ``print()``.\n* adds ``--co`` as a shortcut to using ``--collect-only``.\n\n--------\n\nthe original description of ``nose``:\n\n>nose extends the test loading and running features of unittest, making\nit easier to write, find and run tests.\n\n>by default, nose runs tests in files or directories under the current\nworking directory whose names include \"test\" or \"test\" at a word\nboundary (like \"test_this\" or \"functional_test\" or \"testclass\" but not\n\"libtest\"). test output is similar to that of unittest, but also includes\ncaptured stdout output from failing tests, for easy print-style debugging.\n\n>these features, and many more, are customizable through the use of\nplugins. plugins included with nose provide support for doctest, code\ncoverage and profiling, flexible attribute-based test selection,\noutput capture and more. more information about writing plugins\nmay be found on in the nose api documentation, here:\nhttps://nose.readthedocs.io/en/latest/\n\n--------\n\n```bash\n\nbasic usage\n***********\n\nuse \"pynose\" or \"nosetests\" to run tests:\n\n    pynose [options] [(optional) test files or directories]\n\n    nosetests [options] [(optional) test files or directories]\n\nin addition to passing command-line options, you may also put\nconfiguration options in a .noserc or nose.cfg file in your home\ndirectory. these are standard .ini-style config files. put your\nnosetests configuration in a [nosetests] section, with the -- prefix\nremoved:\n\n   [nosetests]\n   verbosity=3\n   with-doctest=1\n\nthere is also possiblity to disable configuration files loading (might\nbe useful when runnig i.e. tox and you do not want your global nose\nconfig file to be used by tox). in order to ignore those configuration\nfiles simply set an environment variable \"nose_ignore_config_files\".\n\nthere are several other ways to use the nose test runner besides the\n*nosetests* script. you may use nose in a test script:\n\n   import nose\n   nose.main()\n\nif you do not want the test script to exit with 0 on success and 1 on\nfailure (like unittest.main), use nose.run() instead:\n\n   import nose\n   result = nose.run()\n\n*result* will be true if the test run succeeded, or false if any test\nfailed or raised an uncaught exception. lastly, you can run nose.core\ndirectly, which will run nose.main():\n\n   python /path/to/nose/core.py\n\nplease see the usage message for the nosetests script for information\nabout how to control which tests nose runs, which plugins are loaded,\nand the test output.\n\n\nextended usage\n==============\n\nnose collects tests automatically from python source files,\ndirectories and packages found in its working directory (which\ndefaults to the current working directory). any python source file,\ndirectory or package that matches the testmatch regular expression (by\ndefault: *(?:^|[b_.-])[tt]est)* will be collected as a test (or source\nfor collection of tests). in addition, all other packages found in the\nworking directory will be examined for python source files or\ndirectories that match testmatch. package discovery descends all the\nway down the tree, so package.tests and package.sub.tests and\npackage.sub.sub2.tests will all be collected.\n\nwithin a test directory or package, any python source file matching\ntestmatch will be examined for test cases. within a test module,\nfunctions and classes whose names match testmatch and testcase\nsubclasses with any name will be loaded and executed as tests. tests\nmay use the assert keyword or raise assertionerrors to indicate test\nfailure. testcase subclasses may do the same or use the various\ntestcase methods available.\n\n**it is important to note that the default behavior of nose is to not\ninclude tests from files which are executable.**  to include tests\nfrom such files, remove their executable bit or use the --exe flag\n(see 'options' section below).\n\n\nselecting tests\n---------------\n\nto specify which tests to run, pass test names on the command line:\n\n   nosetests only_test_this.py\n\ntest names specified may be file or module names, and may optionally\nindicate the test case to run by separating the module or file name\nfrom the test case name with a colon. filenames may be relative or\nabsolute. examples:\n\n   nosetests test.module\n   nosetests another.test:testcase.test_method\n   nosetests a.test:testcase\n   nosetests /path/to/test/file.py:test_function\n\nyou may also change the working directory where nose looks for tests\nby using the -w switch:\n\n   nosetests -w /path/to/tests\n\nnote, however, that support for multiple -w arguments is now\ndeprecated and will be removed in a future release. as of nose 0.10,\nyou can get the same behavior by specifying the target directories\n*without* the -w switch:\n\n   nosetests /path/to/tests /another/path/to/tests\n\nfurther customization of test selection and loading is possible\nthrough the use of plugins.\n\ntest result output is identical to that of unittest, except for the\nadditional features (error classes, and plugin-supplied features such\nas output capture and assert introspection) detailed in the options\nbelow.\n\n\nconfiguration\n-------------\n\nin addition to passing command-line options, you may also put\nconfiguration options in your project *setup.cfg* file, or a .noserc\nor nose.cfg file in your home directory. in any of these standard ini-\nstyle config files, you put your nosetests configuration in a\n\"[nosetests]\" section. options are the same as on the command line,\nwith the -- prefix removed. for options that are simple switches, you\nmust supply a value:\n\n   [nosetests]\n   verbosity=3\n   with-doctest=1\n\nall configuration files that are found will be loaded and their\noptions combined. you can override the standard config file loading\nwith the \"-c\" option.\n\n\nusing plugins\n-------------\n\nthere are numerous nose plugins available via easy_install and\nelsewhere. to use a plugin, just install it. the plugin will add\ncommand line options to nosetests. to verify that the plugin is\ninstalled, run:\n\n   nosetests --plugins\n\nyou can add -v or -vv to that command to show more information about\neach plugin.\n\nif you are running nose.main() or nose.run() from a script, you can\nspecify a list of plugins to use by passing a list of plugins with the\nplugins keyword argument.\n\n\noptions\n-------\n\n-v, --version\n\n   output nose version and exit\n\n-p, --plugins\n\n   output list of available plugins and exit. combine with higher\n   verbosity for greater detail\n\n-v=default, --verbose=default\n\n   be more verbose. [nose_verbose]\n\n--verbosity=verbosity\n\n   set verbosity; --verbosity=2 is the same as -v\n\n-q=default, --quiet=default\n\n   be less verbose\n\n-c=files, --config=files\n\n   load configuration from config file(s). may be specified multiple\n   times; in that case, all config files will be loaded and combined\n\n-w=where, --where=where\n\n   look for tests in this directory. may be specified multiple times.\n   the first directory passed will be used as the working directory,\n   in place of the current working directory, which is the default.\n   others will be added to the list of tests to execute. [nose_where]\n\n--py3where=py3where\n\n   look for tests in this directory under python 3.x. functions the\n   same as 'where', but only applies if running under python 3.x or\n   above.  note that, if present under 3.x, this option completely\n   replaces any directories specified with 'where', so the 'where'\n   option becomes ineffective. [nose_py3where]\n\n-m=regex, --match=regex, --testmatch=regex\n\n   files, directories, function names, and class names that match this\n   regular expression are considered tests.  default:\n   (?:^|[b_./-])[tt]est [nose_testmatch]\n\n--tests=names\n\n   run these tests (comma-separated list). this argument is useful\n   mainly from configuration files; on the command line, just pass the\n   tests to run as additional arguments with no switch.\n\n-l=default, --debug=default\n\n   activate debug logging for one or more systems. available debug\n   loggers: nose, nose.importer, nose.inspector, nose.plugins,\n   nose.result and nose.selector. separate multiple names with a\n   comma.\n\n--debug-log=file\n\n   log debug messages to this file (default: sys.stderr)\n\n--logging-config=file, --log-config=file\n\n   load logging config from this file -- bypasses all other logging\n   config settings.\n\n-i=regex, --ignore-files=regex\n\n   completely ignore any file that matches this regular expression.\n   takes precedence over any other settings or plugins. specifying\n   this option will replace the default setting. specify this option\n   multiple times to add more regular expressions [nose_ignore_files]\n\n-e=regex, --exclude=regex\n\n   do not run tests that match regular expression [nose_exclude]\n\n-i=regex, --include=regex\n\n   this regular expression will be applied to files, directories,\n   function names, and class names for a chance to include additional\n   tests that do not match testmatch.  specify this option multiple\n   times to add more regular expressions [nose_include]\n\n-x, --stop\n\n   stop running tests after the first error or failure\n\n-p, --no-path-adjustment\n\n   do not make any changes to sys.path when loading tests [nose_nopath]\n\n--exe\n\n   look for tests in python modules that are executable. normal\n   behavior is to exclude executable modules, since they may not be\n   import-safe [nose_include_exe]\n\n--noexe\n\n   do not look for tests in python modules that are executable. (the\n   default on the windows platform is to do so.)\n\n--traverse-namespace\n\n   traverse through all path entries of a namespace package\n\n--first-package-wins, --first-pkg-wins, --1st-pkg-wins\n\n   the nose importer will normally evict a package from sys.modules if\n   it sees a package with the same name in a different location. set\n   this option to disable that behavior.\n\n--no-byte-compile\n\n   prevent nose from byte-compiling the source into .pyc files while\n   nose is scanning for and running tests.\n\n-a=attr, --attr=attr\n\n   run only tests that have attributes specified by attr [nose_attr]\n\n-a=expr, --eval-attr=expr\n\n   run only tests for whose attributes the python expression expr\n   evaluates to true [nose_eval_attr]\n\n-s, --nocapture\n\n   do not capture stdout (any stdout output will be printed\n   immediately) [nose_nocapture]\n\n--nologcapture\n\n   disable logging capture plugin. logging configuration will be left\n   intact. [nose_nologcapture]\n\n--logging-format=format\n\n   specify custom format to print statements. uses the same format as\n   used by standard logging handlers. [nose_logformat]\n\n--logging-datefmt=format\n\n   specify custom date/time format to print statements. uses the same\n   format as used by standard logging handlers. [nose_logdatefmt]\n\n--logging-filter=filter\n\n   specify which statements to filter in/out. by default, everything\n   is captured. if the output is too verbose, use this option to\n   filter out needless output. example: filter=foo will capture\n   statements issued only to  foo or foo.what.ever.sub but not foobar\n   or other logger. specify multiple loggers with comma:\n   filter=foo,bar,baz. if any logger name is prefixed with a minus, eg\n   filter=-foo, it will be excluded rather than included. default:\n   exclude logging messages from nose itself (-nose). [nose_logfilter]\n\n--logging-clear-handlers\n\n   clear all other logging handlers\n\n--logging-level=default\n\n   set the log level to capture\n\n--with-coverage\n\n   enable plugin coverage: activate a coverage report using the\n   ned batchelder coverage module. [nose_with_coverage]\n\n--cover-package=package\n\n   restrict coverage output to selected packages [nose_cover_package]\n\n--cover-erase\n\n   erase previously collected coverage statistics before run\n\n--cover-tests\n\n   include test modules in coverage report [nose_cover_tests]\n\n--cover-min-percentage=default\n\n   minimum percentage of coverage for tests to pass\n   [nose_cover_min_percentage]\n\n--cover-inclusive\n\n   include all python files under working directory in coverage\n   report.  useful for discovering holes in test coverage if not all\n   files are imported by the test suite. [nose_cover_inclusive]\n\n--cover-html\n\n   produce html coverage information\n\n--cover-html-dir=dir\n\n   produce html coverage information in dir\n\n--cover-branches\n\n   include branch coverage in coverage report [nose_cover_branches]\n\n--cover-xml\n\n   produce xml coverage information\n\n--cover-xml-file=file\n\n   produce xml coverage information in file\n\n--pdb\n\n   drop into debugger on failures or errors\n\n--pdb-failures\n\n   drop into debugger on failures\n\n--pdb-errors\n\n   drop into debugger on errors\n\n--no-deprecated\n\n   disable special handling of deprecatedtest exceptions.\n\n--with-doctest\n\n   enable plugin doctest: activate doctest plugin to find and run\n   doctests in non-test modules. [nose_with_doctest]\n\n--doctest-tests\n\n   also look for doctests in test modules. note that classes, methods\n   and functions should have either doctests or non-doctest tests, not\n   both. [nose_doctest_tests]\n\n--doctest-extension=ext\n\n   also look for doctests in files with this extension\n   [nose_doctest_extension]\n\n--doctest-result-variable=var\n\n   change the variable name set to the result of the last interpreter\n   command from the default '_'. can be used to avoid conflicts with\n   the _() function used for text translation.\n   [nose_doctest_result_var]\n\n--doctest-fixtures=suffix\n\n   find fixtures for a doctest file in module with this name appended\n   to the base name of the doctest file\n\n--doctest-options=options\n\n   specify options to pass to doctest. eg.\n   '+ellipsis,+normalize_whitespace'\n\n--with-isolation\n\n   enable plugin isolationplugin: activate the isolation plugin to\n   isolate changes to external modules to a single test module or\n   package. the isolation plugin resets the contents of sys.modules\n   after each test module or package runs to its state before the\n   test. please note that this plugin should not be used with the\n   coverage plugin, or in any other case where module reloading may\n   produce undesirable side-effects. [nose_with_isolation]\n\n-d, --detailed-errors, --failure-detail\n\n   add detail to error output by attempting to evaluate failed asserts\n   [nose_detailed_errors]\n\n--no-skip\n\n   disable special handling of skiptest exceptions.\n\n--with-id\n\n   enable plugin testid: activate to add a test id (like #1) to each\n   test name output. activate with --failed to rerun failing tests\n   only. [nose_with_id]\n\n--id-file=file\n\n   store test ids found in test runs in this file. default is the file\n   .noseids in the working directory.\n\n--failed\n\n   run the tests that failed in the last test run.\n\n--processes=num\n\n   spread test run among this many processes. set a number equal to\n   the number of processors or cores in your machine for best results.\n   pass a negative number to have the number of processes\n   automatically set to the number of cores. passing 0 means to\n   disable parallel testing. default is 0 unless nose_processes is\n   set. [nose_processes]\n\n--process-timeout=seconds\n\n   set timeout for return of results from each test runner process.\n   default is 10. [nose_process_timeout]\n\n--process-restartworker\n\n   if set, will restart each worker process once their tests are done,\n   this helps control memory leaks from killing the system.\n   [nose_process_restartworker]\n\n--with-xunit\n\n   enable plugin xunit: this plugin provides test results in the\n   standard xunit xml format. [nose_with_xunit]\n\n--xunit-file=file\n\n   path to xml file to store the xunit report in. default is\n   nosetests.xml in the working directory [nose_xunit_file]\n\n--xunit-testsuite-name=package\n\n   name of the testsuite in the xunit xml, generated by plugin.\n   default test suite name is nosetests.\n\n--all-modules\n\n   enable plugin allmodules: collect tests from all python modules.\n   [nose_all_modules]\n\n--co, --collect-only\n\n   enable collect-only: collect and output test names only,\n   but do not run any tests. [collect_only]\n```\n",
  "docs_url": null,
  "keywords": "test unittest doctest automatic discovery",
  "license": "mit",
  "name": "pynose",
  "package_url": "https://pypi.org/project/pynose/",
  "project_url": "https://pypi.org/project/pynose/",
  "project_urls": {
    "Documentation": "https://nose.readthedocs.io/en/latest/",
    "Download": "https://pypi.org/project/pynose/#files",
    "Homepage": "https://github.com/mdmintz/pynose",
    "PyPI": "https://pypi.org/project/pynose/",
    "Source": "https://github.com/mdmintz/pynose"
  },
  "release_url": "https://pypi.org/project/pynose/1.4.8/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "pynose fixes nose to extend unittest and make testing easier",
  "version": "1.4.8",
  "releases": [],
  "developers": [
    "mdmintz@gmail.com",
    "michael_mintz"
  ],
  "kwds": "nose_with_doctest nose_doctest_tests nose_doctest_extension nose_cover_tests nose_testmatch",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pynose",
  "homepage": "https://github.com/mdmintz/pynose",
  "release_count": 11,
  "dependency_ids": []
}
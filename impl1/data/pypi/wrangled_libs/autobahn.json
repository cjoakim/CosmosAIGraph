{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: no input/output (daemon)",
    "framework :: twisted",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: object brokering",
    "topic :: system :: distributed computing"
  ],
  "description": "autobahn\\|python\n================\n\nwebsocket & wamp for python on twisted and asyncio.\n\n| |version|  |ci test status|  |ci deploy status|  |ci docker status|  |ci exe status|  |docs|  |docker images|  |exe download|\n\n--------------\n\n| **quick links**: `source code <https://github.com/crossbario/autobahn-python>`__ - `documentation <https://autobahn.readthedocs.io/en/latest/>`__ - `websocket examples <https://autobahn.readthedocs.io/en/latest/websocket/examples.html>`__ - `wamp examples <https://autobahn.readthedocs.io/en/latest/wamp/examples.html>`__\n| **community**: `forum <https://crossbar.discourse.group/>`__ - `stackoverflow <https://stackoverflow.com/questions/tagged/autobahn>`__ - `twitter <https://twitter.com/autobahnws>`__ - `irc #autobahn/chat.freenode.net <https://webchat.freenode.net/>`__\n| **companion projects**: `autobahn|js <https://github.com/crossbario/autobahn-js/>`__ - `autobahn|cpp <https://github.com/crossbario/autobahn-cpp>`__ - `autobahn|testsuite <https://github.com/crossbario/autobahn-testsuite>`__ - `crossbar.io <https://crossbar.io>`__ - `wamp <https://wamp-proto.org>`__\n\nintroduction\n------------\n\n**autobahn\\|python** is a subproject of `autobahn <https://crossbar.io/autobahn>`__ and provides open-source\nimplementations of\n\n-  `the websocket protocol <https://tools.ietf.org/html/rfc6455>`__\n-  `the web application messaging protocol (wamp) <https://wamp-proto.org/>`__\n\nfor python 3.7+ and running on `twisted <https://twistedmatrix.com/>`__ and `asyncio <https://docs.python.org/3/library/asyncio.html>`__.\n\nyou can use **autobahn\\|python** to create clients and servers in python speaking just plain websocket or wamp.\n\n**websocket** allows `bidirectional real-time messaging on the web <https://crossbario.com/blog/post/websocket-why-what-can-i-use-it/>`__ and beyond, while `wamp <https://wamp-proto.org/>`__ adds real-time application communication on top of websocket.\n\n**wamp** provides asynchronous **remote procedure calls** and **publish & subscribe** for applications in *one* protocol running over `websocket <https://tools.ietf.org/html/rfc6455>`__. wamp is a *routed* protocol, so you need a **wamp router** to connect your **autobahn\\|python** based clients. we provide `crossbar.io <https://crossbar.io>`__, but there are `other options <https://wamp-proto.org/implementations.html#routers>`__ as well.\n\n.. note::\n\n    **autobahn\\|python** up to version v19.11.2 supported python 2 and 3.4+,\n    and up to version v20.7.1 supported python 3.5+,\n    and up to version v21.2.1 supported python 3.6+.\n\nfeatures\n--------\n\n-  framework for `websocket <https://tools.ietf.org/html/rfc6455>`__ and `wamp <https://wamp-proto.org/>`__ clients and servers\n-  runs on `cpython <https://python.org/>`__ and `pypy <https://pypy.org/>`\n-  runs under `twisted <https://twistedmatrix.com/>`__ and `asyncio <https://docs.python.org/3/library/asyncio.html>`__ - implements websocket\n   `rfc6455 <https://tools.ietf.org/html/rfc6455>`__ and draft hybi-10+\n-  implements `websocket compression <https://tools.ietf.org/html/draft-ietf-hybi-permessage-compression>`__\n-  implements `wamp <https://wamp-proto.org/>`__, the web application messaging protocol\n-  high-performance, fully asynchronous implementation\n-  best-in-class standards conformance (100% strict passes with `autobahn testsuite <https://crossbar.io/autobahn#testsuite>`__: `client <https://autobahn.ws/testsuite/reports/clients/index.html>`__ `server <https://autobahn.ws/testsuite/reports/servers/index.html>`__)\n-  message-, frame- and streaming-apis for websocket\n-  supports tls (secure websocket) and proxies\n-  open-source (`mit license <https://github.com/crossbario/autobahn-python/blob/master/license>`__)\n\n-----\n\nshow me some code\n-----------------\n\nto give you a first impression, here are two examples. we have lot more `in the repo <https://github.com/crossbario/autobahn-python/tree/master/examples>`__.\n\nwebsocket echo server\n~~~~~~~~~~~~~~~~~~~~~\n\nhere is a simple websocket echo server that will echo back any websocket\nmessage received:\n\n.. code:: python\n\n    from autobahn.twisted.websocket import websocketserverprotocol\n    # or: from autobahn.asyncio.websocket import websocketserverprotocol\n\n    class myserverprotocol(websocketserverprotocol):\n\n        def onconnect(self, request):\n            print(\"client connecting: {}\".format(request.peer))\n\n        def onopen(self):\n            print(\"websocket connection open.\")\n\n        def onmessage(self, payload, isbinary):\n            if isbinary:\n                print(\"binary message received: {} bytes\".format(len(payload)))\n            else:\n                print(\"text message received: {}\".format(payload.decode('utf8')))\n\n            # echo back message verbatim\n            self.sendmessage(payload, isbinary)\n\n        def onclose(self, wasclean, code, reason):\n            print(\"websocket connection closed: {}\".format(reason))\n\nto actually run above server protocol, you need some lines of `boilerplate <https://autobahn.readthedocs.io/en/latest/websocket/programming.html#running-a-server>`__.\n\nwamp application component\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nhere is a wamp application component that performs all four types of\nactions that wamp provides:\n\n#. **subscribe** to a topic\n#. **publish** an event\n#. **register** a procedure\n#. **call** a procedure\n\n.. code:: python\n\n    from autobahn.twisted.wamp import applicationsession\n    # or: from autobahn.asyncio.wamp import applicationsession\n\n    class mycomponent(applicationsession):\n\n        @inlinecallbacks\n        def onjoin(self, details):\n\n            # 1. subscribe to a topic so we receive events\n            def onevent(msg):\n                print(\"got event: {}\".format(msg))\n\n            yield self.subscribe(onevent, 'com.myapp.hello')\n\n            # 2. publish an event to a topic\n            self.publish('com.myapp.hello', 'hello, world!')\n\n            # 3. register a procedure for remote calling\n            def add2(x, y):\n                return x + y\n\n            self.register(add2, 'com.myapp.add2')\n\n            # 4. call a remote procedure\n            res = yield self.call('com.myapp.add2', 2, 3)\n            print(\"got result: {}\".format(res))\n\nabove code will work on twisted and asyncio by changing a single line\n(the base class of ``mycomponent``). to actually run above application component, you need some lines of `boilerplate <https://autobahn.readthedocs.io/en/latest/wamp/programming.html#running-components>`__ and a `wamp router <https://autobahn.readthedocs.io/en/latest/wamp/programming.html#running-a-wamp-router>`__.\n\n\nextensions\n----------\n\nnetworking framework\n~~~~~~~~~~~~~~~~~~~~\n\nautobahn runs on both twisted and asyncio. to select the respective netoworking framework, install flavor:\n\n* ``asyncio``: install asyncio (when on python 2, otherwise it's included in the standard library already) and asyncio support in autobahn\n* ``twisted``: install twisted and twisted support in autobahn\n\n-----\n\n\nwebsocket acceleration and compression\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``accelerate``: install websocket acceleration - *only use on cpython - not on pypy (which is faster natively)*\n* ``compress``: install (non-standard) websocket compressors **bzip2** and **snappy** (standard **deflate** based websocket compression is already included in the base install)\n\n-----\n\n\nencryption and wamp authentication\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nautobahn supports running over tls (for websocket and all wamp transports) as well as **wamp-cryposign** authentication.\n\nto install use this flavor:\n\n* ``encryption``: installs tls and wamp-cryptosign dependencies\n\nautobahn also supports **wamp-scram** authentication. to install:\n\n* ``scram``: installs wamp-scram dependencies\n\n-----\n\n\nxbr\n~~~\n\nautobahn includes support for `xbr <https://xbr.network/>`__. to install use this flavor:\n\n* ``xbr``:\n\nto install:\n\n.. code:: console\n\n    pip install autobahn[xbr]\n\nor (twisted, with more bells an whistles)\n\n.. code:: console\n\n    pip install autobahn[twisted,encryption,serialization,xbr]\n\nor (asyncio, with more bells an whistles)\n\n.. code:: console\n\n    pip install autobahn[asyncio,encryption,serialization,xbr]\n\n-----\n\n\nnative vector extensions (nvx)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n> this is not yet complete - alpha!\n\nautobahn contains **nvx**, a network accelerator library that provides simd accelerated native vector code for websocket (xor masking) and utf-8 validation.\n\n.. note:\n\n    nvx lives in namespace `autobahn.nvx` and currently requires a x86-86 cpu with at least sse2 and makes use of sse4.1 if available. the code is written using vector instrinsics, should compile with both gcc and clang,and interfaces with python using cffi, and hence runs fast on pypy.\n\n-----\n\n\nwamp serializers\n~~~~~~~~~~~~~~~~\n\n* ``serialization``: to install additional wamp serializers: cbor, messagepack, ubjson and flatbuffers\n\n**above is for advanced uses. in general we recommend to use cbor where you can,\nand json (from the standard library) otherwise.**\n\n-----\n\nto install autobahn with all available serializers:\n\n.. code:: console\n\n    pip install autobahn[serializers]\n\nor (development install)\n\n.. code:: console\n\n    pip install -e .[serializers]\n\nfurther, to speed up json on cpython using ``ujson``, set the environment variable:\n\n.. code:: console\n\n    autobahn_use_ujson=1\n\n.. warning::\n\n    using ``ujson`` (on both cpython and pypy) will break the ability of autobahn\n    to transport and translate binary application payloads in wamp transparently.\n    this ability depends on features of the regular json standard library module\n    not available on ``ujson``.\n\n\n.. |version| image:: https://img.shields.io/pypi/v/autobahn.svg\n   :target: https://pypi.python.org/pypi/autobahn\n\n.. |ci test status| image:: https://github.com/crossbario/autobahn-python/workflows/main/badge.svg\n   :target: https://github.com/crossbario/autobahn-python/actions?query=workflow%3amain\n   :alt: ci test status\n\n.. |ci deploy status| image:: https://github.com/crossbario/autobahn-python/workflows/deploy/badge.svg\n   :target: https://github.com/crossbario/autobahn-python/actions?query=workflow%3adeploy\n   :alt: ci deploy status\n\n.. |ci docker status| image:: https://github.com/crossbario/autobahn-python/workflows/docker/badge.svg\n   :target: https://github.com/crossbario/autobahn-python/actions?query=workflow%3adocker\n   :alt: ci docker status\n\n.. |ci exe status| image:: https://github.com/crossbario/autobahn-python/workflows/pyinstaller/badge.svg\n   :target: https://github.com/crossbario/autobahn-python/actions?query=workflow%3apyinstaller\n   :alt: ci exe status\n\n.. |docs| image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat\n   :target: https://autobahn.readthedocs.io/en/latest/\n\n.. |docker images| image:: https://img.shields.io/badge/download-docker-blue.svg?style=flat\n   :target: https://hub.docker.com/r/crossbario/autobahn-python/\n\n.. |exe download| image:: https://img.shields.io/badge/download-exe-blue.svg?style=flat\n   :target: https://download.crossbario.com/xbrnetwork/linux-amd64/xbrnetwork-latest\n",
  "docs_url": null,
  "keywords": "autobahn crossbar websocket realtime rfc6455 wamp rpc pubsub twisted asyncio xbr data-markets blockchain ethereum",
  "license": "mit license",
  "name": "autobahn",
  "package_url": "https://pypi.org/project/autobahn/",
  "project_url": "https://pypi.org/project/autobahn/",
  "project_urls": {
    "Homepage": "https://github.com/crossbario/autobahn-python",
    "Source": "https://github.com/crossbario/autobahn-python"
  },
  "release_url": "https://pypi.org/project/autobahn/23.6.2/",
  "requires_dist": [],
  "requires_python": ">=3.9",
  "summary": "websocket client & server library, wamp real-time framework",
  "version": "23.6.2",
  "releases": [],
  "developers": [
    "typedef_int_gmbh"
  ],
  "kwds": "autobahn_use_ujson websocket autobahnws websocketserverprotocol autobahn",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_autobahn",
  "homepage": "https://github.com/crossbario/autobahn-python",
  "release_count": 151,
  "dependency_ids": []
}
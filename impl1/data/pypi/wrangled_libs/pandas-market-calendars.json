{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "pandas_market_calendars\r\n=======================\r\nmarket calendars to use with pandas for trading applications.\r\n\r\n.. image:: https://badge.fury.io/py/pandas-market-calendars.svg\r\n    :target: https://badge.fury.io/py/pandas-market-calendars\r\n\r\n.. image:: https://readthedocs.org/projects/pandas-market-calendars/badge/?version=latest\r\n   :target: http://pandas-market-calendars.readthedocs.io/en/latest/?badge=latest\r\n   :alt: documentation status\r\n\r\n.. image:: https://coveralls.io/repos/github/rsheftel/pandas_market_calendars/badge.svg?branch=master\r\n    :target: https://coveralls.io/github/rsheftel/pandas_market_calendars?branch=master\r\n\r\ndocumentation\r\n-------------\r\nhttp://pandas-market-calendars.readthedocs.io/en/latest/\r\n\r\noverview\r\n--------\r\nthe pandas package is widely used in finance and specifically for time series analysis. it includes excellent\r\nfunctionality for generating sequences of dates and capabilities for custom holiday calendars, but as an explicit\r\ndesign choice it does not include the actual holiday calendars for specific exchanges or otc markets.\r\n\r\nthe pandas_market_calendars package looks to fill that role with the holiday, late open and early close calendars\r\nfor specific exchanges and otc conventions. pandas_market_calendars also adds several functions to manipulate the\r\nmarket calendars and includes a date_range function to create a pandas datetimeindex including only the datetimes\r\nwhen the markets are open. additionally the package contains product specific calendars for future exchanges which\r\nhave different market open, closes, breaks and holidays based on product type.\r\n\r\nthis package provides access to over 50+ unique exchange calendars for global equity and futures markets.\r\n\r\nthis package is a fork of the zipline package from quantopian and extracts just the relevant parts. all credit for\r\ntheir excellent work to quantopian.\r\n\r\nmajor releases\r\n~~~~~~~~~~~~~~\r\nas of v1.0 this package only works with python3. this is consistent with pandas dropping support for python2.\r\n\r\nas of v1.4 this package now has the concept of a break during the trading day. for example this can accommodate asian\r\nmarkets that have a lunch break, or futures markets that are open 24 hours with a break in the day for trade processing.\r\n\r\nas of v2.0 this package provides a mirror of all the calendars from the `exchange_calendars <https://github.com/gerrymanoim/exchange_calendars>`_\r\npackage, which itself is the now maintained fork of the original trading_calendars package. this adds over 50 calendars.\r\n\r\nas of v3.0, the function date_range() is more complete and consistent, for more discussion on the topic refer to pr #142 and issue #138.\r\n\r\nas of v4.0, this package provides the framework to add interruptions to calendars. these can also be added to a schedule and viewed using\r\nthe new interruptions_df property. a full list of changes can be found in pr #210.\r\n\r\nsource location\r\n~~~~~~~~~~~~~~~\r\nhosted on github: https://github.com/rsheftel/pandas_market_calendars\r\n\r\ninstallation\r\n~~~~~~~~~~~~\r\n``pip install pandas_market_calendars``\r\n\r\narch linux package available here: https://aur.archlinux.org/packages/python-pandas_market_calendars/\r\n\r\ncalendars\r\n---------\r\nthe list of `available calendars <https://pandas-market-calendars.readthedocs.io/en/latest/calendars.html>`_\r\n\r\nquick start\r\n-----------\r\n.. code:: python\r\n\r\n    import pandas_market_calendars as mcal\r\n    \r\n    # create a calendar\r\n    nyse = mcal.get_calendar('nyse')\r\n\r\n    # show available calendars\r\n    print(mcal.get_calendar_names())\r\n\r\n.. code:: python\r\n\r\n    early = nyse.schedule(start_date='2012-07-01', end_date='2012-07-10')\r\n    early\r\n\r\n    \r\n.. parsed-literal::\r\n\r\n                      market_open             market_close\r\n    =========== ========================= =========================\r\n     2012-07-02 2012-07-02 13:30:00+00:00 2012-07-02 20:00:00+00:00\r\n     2012-07-03 2012-07-03 13:30:00+00:00 2012-07-03 17:00:00+00:00\r\n     2012-07-05 2012-07-05 13:30:00+00:00 2012-07-05 20:00:00+00:00\r\n     2012-07-06 2012-07-06 13:30:00+00:00 2012-07-06 20:00:00+00:00\r\n     2012-07-09 2012-07-09 13:30:00+00:00 2012-07-09 20:00:00+00:00\r\n     2012-07-10 2012-07-10 13:30:00+00:00 2012-07-10 20:00:00+00:00\r\n\r\n    \r\n.. code:: python\r\n\r\n    mcal.date_range(early, frequency='1d')\r\n\r\n\r\n\r\n\r\n.. parsed-literal::\r\n\r\n    datetimeindex(['2012-07-02 20:00:00+00:00', '2012-07-03 17:00:00+00:00',\r\n                   '2012-07-05 20:00:00+00:00', '2012-07-06 20:00:00+00:00',\r\n                   '2012-07-09 20:00:00+00:00', '2012-07-10 20:00:00+00:00'],\r\n                  dtype='datetime64[ns, utc]', freq=none)\r\n\r\n\r\n\r\n.. code:: python\r\n\r\n    mcal.date_range(early, frequency='1h')\r\n\r\n\r\n\r\n\r\n.. parsed-literal::\r\n\r\n    datetimeindex(['2012-07-02 14:30:00+00:00', '2012-07-02 15:30:00+00:00',\r\n                   '2012-07-02 16:30:00+00:00', '2012-07-02 17:30:00+00:00',\r\n                   '2012-07-02 18:30:00+00:00', '2012-07-02 19:30:00+00:00',\r\n                   '2012-07-02 20:00:00+00:00', '2012-07-03 14:30:00+00:00',\r\n                   '2012-07-03 15:30:00+00:00', '2012-07-03 16:30:00+00:00',\r\n                   '2012-07-03 17:00:00+00:00', '2012-07-05 14:30:00+00:00',\r\n                   '2012-07-05 15:30:00+00:00', '2012-07-05 16:30:00+00:00',\r\n                   '2012-07-05 17:30:00+00:00', '2012-07-05 18:30:00+00:00',\r\n                   '2012-07-05 19:30:00+00:00', '2012-07-05 20:00:00+00:00',\r\n                   '2012-07-06 14:30:00+00:00', '2012-07-06 15:30:00+00:00',\r\n                   '2012-07-06 16:30:00+00:00', '2012-07-06 17:30:00+00:00',\r\n                   '2012-07-06 18:30:00+00:00', '2012-07-06 19:30:00+00:00',\r\n                   '2012-07-06 20:00:00+00:00', '2012-07-09 14:30:00+00:00',\r\n                   '2012-07-09 15:30:00+00:00', '2012-07-09 16:30:00+00:00',\r\n                   '2012-07-09 17:30:00+00:00', '2012-07-09 18:30:00+00:00',\r\n                   '2012-07-09 19:30:00+00:00', '2012-07-09 20:00:00+00:00',\r\n                   '2012-07-10 14:30:00+00:00', '2012-07-10 15:30:00+00:00',\r\n                   '2012-07-10 16:30:00+00:00', '2012-07-10 17:30:00+00:00',\r\n                   '2012-07-10 18:30:00+00:00', '2012-07-10 19:30:00+00:00',\r\n                   '2012-07-10 20:00:00+00:00'],\r\n                  dtype='datetime64[ns, utc]', freq=none)\r\n\r\ncontributing\r\n------------\r\nall improvements and additional (and corrections) in the form of pull requests are welcome. this package will grow in\r\nvalue and correctness the more eyes are on it.\r\n\r\nto add new functionality please include tests which are in standard pytest format. \r\n\r\nuse pytest to run the test suite.\r\n\r\nfor complete information on contributing see contributing.md_\r\n\r\n.. _contributing.md: https://github.com/rsheftel/pandas_market_calendars/blob/master/contributing.md\r\n\r\nfuture\r\n------\r\nthis package is open sourced under the mit license. everyone is welcome to add more exchanges or otc markets, confirm\r\nor correct the existing calendars, and generally do whatever they desire with this code.\r\n\r\nsponsor\r\n-------\r\n.. image:: https://www.tradinghours.com/img/logo-with-words.png\r\n    :target: https://www.tradinghours.com/data\r\n    :alt: tradinghours.com\r\n\r\n`tradinghours.com <https://www.tradinghours.com>`_ provides the most accurate and comprehensive coverage of market holidays and trading hours data available. they cover over 900 markets around the world. their data is continually monitored for changes and updated daily. `learn more <https://www.tradinghours.com/data>`_\r\n",
  "docs_url": null,
  "keywords": "trading,exchanges,markets,otc,datetime,holiday,business days",
  "license": "mit",
  "name": "pandas-market-calendars",
  "package_url": "https://pypi.org/project/pandas-market-calendars/",
  "project_url": "https://pypi.org/project/pandas-market-calendars/",
  "project_urls": {
    "Bug Tracker": "https://github.com/rsheftel/pandas_market_calendars/issues",
    "Changelog": "https://pandas-market-calendars.readthedocs.io/en/latest/change_log.html",
    "Documentation": "https://pandas-market-calendars.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/rsheftel/pandas_market_calendars",
    "Source": "https://github.com/rsheftel/pandas_market_calendars"
  },
  "release_url": "https://pypi.org/project/pandas-market-calendars/4.3.2/",
  "requires_dist": [
    "pandas >=1.1",
    "pytz",
    "python-dateutil",
    "exchange-calendars >=3.3",
    "pytest ; extra == 'dev'",
    "black ==23.7.0 ; extra == 'dev'",
    "pre-commit ; extra == 'dev'"
  ],
  "requires_python": ">=3.8",
  "summary": "market and exchange trading calendars for pandas",
  "version": "4.3.2",
  "releases": [],
  "developers": [
    "rsheftel@alumni.upenn.edu"
  ],
  "kwds": "pandas_market_calendars trading_calendars exchange_calendars calendars calendar",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pandas_market_calendars",
  "homepage": "",
  "release_count": 61,
  "dependency_ids": [
    "pypi_black",
    "pypi_exchange_calendars",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_python_dateutil",
    "pypi_pytz"
  ]
}
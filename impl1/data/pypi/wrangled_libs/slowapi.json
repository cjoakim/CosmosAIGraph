{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# slowapi\n\na rate limiting library for starlette and fastapi adapted from [flask-limiter](http://github.com/alisaifee/flask-limiter).\n\nthis package is used in various production setups, handling millions of requests per month, and seems to behave as expected.\nthere might be some api changes when changing the code to be fully `async`, but we will notify users via appropriate `semver` version changes.\n\nthe documentation is on [read the docs](https://slowapi.readthedocs.io/en/latest/).\n\n# quick start\n\n## installation\n\n`slowapi` is available from [pypi](https://pypi.org/project/slowapi/) so you can install it as usual:\n\n```\n$ pip install slowapi\n```\n\n# features\n\nmost feature are coming from flasklimiter and the underlying [limits](https://limits.readthedocs.io/).\n\nsupported now:\n\n- single and multiple `limit` decorator on endpoint functions to apply limits\n- redis, memcached and memory backends to track your limits (memory as a fallback)\n- support for sync and async http endpoints\n- support for shared limits across a set of routes\n\n\n# limitations and known issues\n\n  * the `request` argument must be explicitly passed to your endpoint, or `slowapi` won't be able to hook into it. in other words, write:\n\n```python\n    @limiter.limit(\"5/minute\")\n    async def myendpoint(request: request)\n        pass\n```\n\nand not:\n\n```python\n    @limiter.limit(\"5/minute\")\n    async def myendpoint()\n        pass\n```\n\n  * `websocket` endpoints are not supported yet.\n\n# developing and contributing\n\nprs are more than welcome! please include tests for your changes :)\n\nthe package uses [poetry](https://python-poetry.org) to manage dependencies. to setup your dev env:\n\n```bash\n$ poetry install\n```\n\nto run the tests:\n```bash\n$ pytest\n```\n\n# credits\n\ncredits go to [flask-limiter](https://github.com/alisaifee/flask-limiter) of which slowapi is a (still partial) adaptation to starlette and fastapi.\nit's also important to mention that the actual rate limiting work is done by [limits](https://github.com/alisaifee/limits/), `slowapi` is just a wrapper around it.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "slowapi",
  "package_url": "https://pypi.org/project/slowapi/",
  "project_url": "https://pypi.org/project/slowapi/",
  "project_urls": {
    "Documentation": "https://slowapi.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/laurents/slowapi",
    "Repository": "https://github.com/laurents/slowapi"
  },
  "release_url": "https://pypi.org/project/slowapi/0.1.8/",
  "requires_dist": [
    "limits (>=2.3)",
    "redis (>=3.4.1,<4.0.0) ; extra == \"redis\""
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "a rate limiting extension for starlette and fastapi",
  "version": "0.1.8",
  "releases": [],
  "developers": [
    "laurent@where.tf",
    "laurent_savaete"
  ],
  "kwds": "flasklimiter slowapi fastapi flask limiter",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_slowapi",
  "homepage": "https://github.com/laurents/slowapi",
  "release_count": 9,
  "dependency_ids": [
    "pypi_limits",
    "pypi_redis"
  ]
}
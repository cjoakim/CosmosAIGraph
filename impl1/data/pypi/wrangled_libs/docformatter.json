{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "license :: other/proprietary license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "============\ndocformatter\n============\n\n.. |ci| image:: https://img.shields.io/github/actions/workflow/status/pycqa/docformatter/ci.yml?branch=master\n    :target: https://github.com/pycqa/docformatter/actions/workflows/ci.yml\n.. |coveralls| image:: https://img.shields.io/coveralls/github/pycqa/docformatter\n    :target: https://coveralls.io/github/pycqa/docformatter\n.. |contributors| image:: https://img.shields.io/github/contributors/pycqa/docformatter\n    :target: https://github.com/pycqa/docformatter/graphs/contributors\n.. |commit| image:: https://img.shields.io/github/last-commit/pycqa/docformatter\n.. |black| image:: https://img.shields.io/badge/%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. |isort| image:: https://img.shields.io/badge/%20imports-isort-%231674b1\n    :target: https://pycqa.github.io/isort/\n.. |self| image:: https://img.shields.io/badge/%20formatter-docformatter-fedcba.svg\n    :target: https://github.com/pycqa/docformatter\n.. |sphinxstyle| image:: https://img.shields.io/badge/%20style-sphinx-0a507a.svg\n    :target: https://www.sphinx-doc.org/en/master/usage/index.html\n.. |numpstyle| image:: https://img.shields.io/badge/%20style-numpy-459db9.svg\n    :target: https://numpydoc.readthedocs.io/en/latest/format.html\n.. |googstyle| image:: https://img.shields.io/badge/%20style-google-3666d6.svg\n    :target: https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings\n\n.. |version| image:: https://img.shields.io/pypi/v/docformatter\n.. |license| image:: https://img.shields.io/pypi/l/docformatter\n.. |pyvers| image:: https://img.shields.io/pypi/pyversions/docformatter\n.. |pymat| image:: https://img.shields.io/pypi/format/docformatter\n.. |dd| image:: https://img.shields.io/pypi/dd/docformatter\n.. |pre| image:: https://img.shields.io/github/v/release/pycqa/docformatter?include_prereleases\n\n+----------------+----------------------------------------------------------+\n| **code**       + |black| |isort|                                          +\n+----------------+----------------------------------------------------------+\n| **docstrings** + |self| |numpstyle|                                       +\n+----------------+----------------------------------------------------------+\n| **github**     + |ci| |contributors| |commit| |pre|                       +\n+----------------+----------------------------------------------------------+\n| **pypi**       + |version| |license| |pyvers| |pymat| |dd|                +\n+----------------+----------------------------------------------------------+\n\nformats docstrings to follow `pep 257`_.\n\n.. _`pep 257`: http://www.python.org/dev/peps/pep-0257/\n\nfeatures\n========\n\n``docformatter`` automatically formats docstrings to follow a subset of the pep\n257 conventions. below are the relevant items quoted from pep 257.\n\n- for consistency, always use triple double quotes around docstrings.\n- triple quotes are used even though the string fits on one line.\n- multi-line docstrings consist of a summary line just like a one-line\n  docstring, followed by a blank line, followed by a more elaborate\n  description.\n- unless the entire docstring fits on a line, place the closing quotes\n  on a line by themselves.\n\n``docformatter`` also handles some of the pep 8 conventions.\n\n- don't write string literals that rely on significant trailing\n  whitespace. such trailing whitespace is visually indistinguishable\n  and some editors (or more recently, reindent.py) will trim them.\n\n``docformatter`` formats docstrings compatible with ``black`` when passed the\n``--black`` option.\n\n``docformatter`` formats field lists that use epytext or sphinx styles.\n\nsee the the full documentation at `read-the-docs`_, especially the\n`requirements`_ section for a more detailed discussion of pep 257 and other\nrequirements.\n\n.. _read-the-docs: https://docformatter.readthedocs.io\n.. _requirements: https://docformatter.readthedocs.io/en/latest/requirements.html\n\ninstallation\n============\n\nfrom pip::\n\n    $ pip install --upgrade docformatter\n\nor, if you want to use pyproject.toml to configure docformatter and you're using\npython < 3.11::\n\n    $ pip install --upgrade docformatter[tomli]\n\nwith python >=3.11, ``tomllib`` from the standard library is used.\n\nor, if you want to use a release candidate (or any other tag)::\n\n    $ pip install git+https://github.com/pycqa/docformatter.git@<rc_tag>\n\nwhere <rc_tag> is the release candidate tag you'd like to install.  release\ncandidate tags will have the format v1.6.0-rc1  release candidates will also be\nmade available as a github release.\n\nexample\n=======\n\nafter running::\n\n    $ docformatter --in-place example.py\n\nthis code\n\n.. code-block:: python\n\n    \"\"\"   here are some examples.\n\n        this module docstring should be dedented.\"\"\"\n\n\n    def launch_rocket():\n        \"\"\"launch\n    the\n    rocket. go colonize space.\"\"\"\n\n\n    def factorial(x):\n        '''\n\n        return x factorial.\n\n        this uses math.factorial.\n\n        '''\n        import math\n        return math.factorial(x)\n\n\n    def print_factorial(x):\n        \"\"\"print x factorial\"\"\"\n        print(factorial(x))\n\n\n    def main():\n        \"\"\"main\n        function\"\"\"\n        print_factorial(5)\n        if factorial(10):\n            launch_rocket()\n\n\ngets formatted into this\n\n.. code-block:: python\n\n    \"\"\"here are some examples.\n\n    this module docstring should be dedented.\n    \"\"\"\n\n\n    def launch_rocket():\n        \"\"\"launch the rocket.\n\n        go colonize space.\n        \"\"\"\n\n\n    def factorial(x):\n        \"\"\"return x factorial.\n\n        this uses math.factorial.\n        \"\"\"\n        import math\n        return math.factorial(x)\n\n\n    def print_factorial(x):\n        \"\"\"print x factorial.\"\"\"\n        print(factorial(x))\n\n\n    def main():\n        \"\"\"main function.\"\"\"\n        print_factorial(5)\n        if factorial(10):\n            launch_rocket()\n\nmarketing\n=========\ndo you use *docformatter*?  what style docstrings do you use?  add some badges to your project's **readme** and let everyone know.\n\n|self|\n\n.. code-block::\n\n    .. image:: https://img.shields.io/badge/%20formatter-docformatter-fedcba.svg\n        :target: https://github.com/pycqa/docformatter\n\n|sphinxstyle|\n\n.. code-block::\n\n    .. image:: https://img.shields.io/badge/%20style-sphinx-0a507a.svg\n        :target: https://www.sphinx-doc.org/en/master/usage/index.html\n\n|numpstyle|\n\n.. code-block::\n\n    .. image:: https://img.shields.io/badge/%20style-numpy-459db9.svg\n        :target: https://numpydoc.readthedocs.io/en/latest/format.html\n\n|googstyle|\n\n.. code-block::\n\n    .. image:: https://img.shields.io/badge/%20style-google-3666d6.svg\n        :target: https://google.github.io/styleguide/pyguide.html#s3.8-comments-and-docstrings\n\nissues\n======\n\nbugs and patches can be reported on the `github page`_.\n\n.. _`github page`: https://github.com/pycqa/docformatter/issues\n\n",
  "docs_url": null,
  "keywords": "pep 257,pep257,style,formatter,docstrings",
  "license": "expat",
  "name": "docformatter",
  "package_url": "https://pypi.org/project/docformatter/",
  "project_url": "https://pypi.org/project/docformatter/",
  "project_urls": {
    "Documentation": "https://docformatter.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/PyCQA/docformatter",
    "Repository": "https://github.com/PyCQA/docformatter"
  },
  "release_url": "https://pypi.org/project/docformatter/1.7.5/",
  "requires_dist": [
    "charset_normalizer (>=3.0.0,<4.0.0)",
    "tomli (>=2.0.0,<3.0.0) ; (python_version < \"3.11\") and (extra == \"tomli\")",
    "untokenize (>=0.1.1,<0.2.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "formats docstrings to follow pep 257",
  "version": "1.7.5",
  "releases": [],
  "developers": [
    "doyle.rowland@reliaqual.com",
    "doyle_rowland",
    "steven_myint"
  ],
  "kwds": "documentation docformatter pyguide sphinxstyle workflows",
  "license_kwds": "expat",
  "libtype": "pypi",
  "id": "pypi_docformatter",
  "homepage": "https://github.com/pycqa/docformatter",
  "release_count": 62,
  "dependency_ids": [
    "pypi_charset_normalizer",
    "pypi_tomli",
    "pypi_untokenize"
  ]
}
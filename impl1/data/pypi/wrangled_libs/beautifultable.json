{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: printing",
    "topic :: text processing"
  ],
  "description": "##########################################################################\nbeautifultable\n##########################################################################\n\n.. inclusion-marker-badges-start\n\n.. image:: https://badge.fury.io/py/beautifultable.svg\n    :target: https://badge.fury.io/py/beautifultable\n\n.. image:: https://img.shields.io/pypi/pyversions/beautifultable.svg\n    :target: https://pypi.python.org/pypi/beautifultable/\n\n.. image:: https://codecov.io/gh/pri22296/beautifultable/branch/master/graphs/badge.svg\n    :target: https://codecov.io/gh/pri22296/beautifultable/branch/master/\n\n.. image:: https://api.codacy.com/project/badge/grade/7a76eb35ad4e450eaf00339e98381511\n    :target: https://www.codacy.com/app/pri22296/beautifultable?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=pri22296/beautifultable&amp;utm_campaign=badge_grade\n\n.. image:: https://github.com/pri22296/beautifultable/actions/workflows/build.yml/badge.svg?branch=master\n    :target: https://github.com/pri22296/beautifultable/actions/workflows/build.yml\n\n.. image:: https://readthedocs.org/projects/beautifultable/badge/?version=latest\n    :alt: documentation status\n    :target: http://beautifultable.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/donate-paypal-yellow.svg\n    :target: https://paypal.me/beautifultable\n\n.. inclusion-marker-badges-end\n\n\n.. inclusion-marker-introduction-start\n\n**************************************************************************\nintroduction\n**************************************************************************\n\nthis package provides beautifultable class for easily printing\ntabular data in a visually appealing format to a terminal. \n\nfeatures included but not limited to:\n\n* full customization of the look and feel of the table\n* build the table as you wish, by adding rows, or by columns or even\n  mixing both these approaches.\n* full support for *colors* using ansi sequences or any library of your\n  choice. it just works.\n* plenty of predefined *styles* for multiple use cases and option to\n  create custom ones.\n* support for *unicode* characters.\n* supports streaming table when data is slow to retrieve.\n  \n.. inclusion-marker-introduction-end\n\n\n \n.. inclusion-marker-links-start\n\n**************************************************************************\nlinks\n**************************************************************************\n\n* `documentation <http://beautifultable.readthedocs.io/en/latest/>`_\n\n* `source <https://github.com/pri22296/beautifultable>`_\n\n* `api reference <http://beautifultable.readthedocs.io/en/latest/source/beautifultable.html#module-beautifultable>`_\n\n\n.. inclusion-marker-links-end\n\n\n\n.. inclusion-marker-usage-start\n\n**************************************************************************\nusage\n**************************************************************************\n\nhere is an example of how you can use beautifultable::\n\n    >>> from beautifultable import beautifultable\n    >>> table = beautifultable()\n    >>> table.rows.append([\"jacob\", 1, \"boy\"])\n    >>> table.rows.append([\"isabella\", 1, \"girl\"])\n    >>> table.rows.append([\"ethan\", 2, \"boy\"])\n    >>> table.rows.append([\"sophia\", 2, \"girl\"])\n    >>> table.rows.append([\"michael\", 3, \"boy\"])\n    >>> table.rows.header = [\"s1\", \"s2\", \"s3\", \"s4\", \"s5\"]\n    >>> table.columns.header = [\"name\", \"rank\", \"gender\"]\n    >>> print(table)\n    +----+----------+------+--------+\n    |    |   name   | rank | gender |\n    +----+----------+------+--------+\n    | s1 |  jacob   |  1   |  boy   |\n    +----+----------+------+--------+\n    | s2 | isabella |  1   |  girl  |\n    +----+----------+------+--------+\n    | s3 |  ethan   |  2   |  boy   |\n    +----+----------+------+--------+\n    | s4 |  sophia  |  2   |  girl  |\n    +----+----------+------+--------+\n    | s5 | michael  |  3   |  boy   |\n    +----+----------+------+--------+\n\n\nyou can learn more about beautifultable at this `tutorial <http://beautifultable.readthedocs.io/en/latest/quickstart.html>`_\n\n.. inclusion-marker-usage-end\n\n\n\n.. inclusion-marker-install-start\n\n**************************************************************************\ninstallation\n**************************************************************************\n\n::\n\n    python3 -m pip install beautifultable\n\n.. inclusion-marker-install-end\n\n\n\n.. inclusion-marker-changelog-start\n\n**************************************************************************\nchangelog\n**************************************************************************\n\n===========\ndevelopment\n===========\n\n\n==========\nv1.1.0\n==========\n\n* drop support for python 3.4, 3.5 and 3.6\n* add official support for python 3.9 and 3.10\n* added `asdict` and `aslist` method on the row object. (thanks to `@agent-hellboy <https://github.com/agent-hellboy>`_)\n* added `from_csv` and `to_csv` methods to export/import a csv file. (thanks to `@agent-hellboy <https://github.com/agent-hellboy>`_)\n* added `from_df` and `to_df` methods to export/import a dataframe. (thanks to `@agent-hellboy <https://github.com/agent-hellboy>`_)\n\n==========\nv1.0.1\n==========\n\n* fixed an issue where appending a column with a header to an empty table left the table instance in\n  an inconsistent state.\n\n==========\nv1.0.0\n==========\n\n* added two new views ``rows`` and ``columns`` to the ``beautifultable`` class. most of the existing\n  methods have been deprecated. methods of the form ``{}_row`` and ``{}_column`` have been moved to\n  views ``rows.{}`` and ``columns.{}``(ex. ``append_row`` is now ``rows.append``). calling older\n  deprecated methods will now raise a ``futurewarning``. special methods such as ``__len__``, ``__iter__``,\n  etc. have also been moved to the respective views. for details, refer the\n  api documentation and the updated tutorial\n* the existing styling attributes have also been deprecated. a new ``border`` property can be accessed\n  to control all styling attributes affecting the border. rest of the attributes can be accessed from\n  it's respective view.\n* added support for row headers. as a result rows can now be accessed by their keys similar\n  to columns\n* added two new methods ``to_csv`` and ``from_csv`` to directly export/import to a\n  csv file. (thanks to `@dinko-pehar <https://github.com/dinko-pehar>`_)\n* added ``beautifultable.rows.filter`` method to generate a new table with only certain rows\n* added a new ``shape`` attribute to the ``beautifultable`` class which returns a tuple of form (nrow, ncol)\n* added new attribute ``beautifultable.columns.header.alignment`` which can be used to have\n  a seperate header alignment. the default behaviour is to inherit ``beautifultable.columns.alignment``\n* updated ``beautifultable.rows.sort`` (earlier ``beautifultable.sort``) method to now\n  also accept any callables as a key.\n* updated behaviour of ``beautifultable.columns.width`` (earlier ``beautifultable.column_widths``).\n  it no longer overrides user specified widths by default. you can reset it to default\n  by setting it to **\"auto\"**\n* deprecated attribute ``serialno`` and ``serialno_header``. user can now easily implement\n  this functionality by using row headers if required\n* deprecated methods ``get_table_width()``, ``copy()`` and ``get_string()``.\n* deprecated constructor arguments and class attributes named ``sign_mode``, ``numeric_precision``,\n  ``max_width`` and renamed to ``sign``, ``precision`` and ``maxwidth`` respectively\n* fixed an issue where table was malformed if ``blessings`` module was used to generate colored strings.\n* fixed issues with the existing implementation of ``__iter__``, ``__copy__`` and ``__deepcopy__`` which\n  should now work more reliably.\n* fixed an issue where default padding could not be set to 0. (thanks to `@furlongm <https://github.com/furlongm>`_)\n* fixed several memory leak issues by ensuring that all internal objects hold only a weak reference\n  to the table instance.\n* dropped support for python 2\n\n==========\nv0.8.0\n==========\n\n* dropped support for python 3.3\n* added support for streaming tables using a generator for cases  where data retrieval is slow\n* alignment, padding, width can now be set for all columns using a simplified syntax like\n  ``table.column_alignments = beautifultable.align_left``\n\n==========\nv0.7.0\n==========\n\n* added 4 new styles, **style_box**, **style_box_doubled**, **style_box_rounded**,\n  **style_grid**.\n* renamed **style_restructured_text** to **style_rst**\n* **wcwidth** is now an optional dependency\n* updated the algorithm for calculating width of columns(better division of space among columns)\n* added support for paragraphs(using ``\\n`` character)\n* added finer control for intersection characters using 12 new\n  attributes ``intersect_{top|header|row|bottom}_{left|mid|right}``\n* added the ability to also accept bytestrings instead of unicode\n* deprecated attribute ``intersection_char``\n* deprecated methods ``get_top_border()``, ``get_bottom_border()``, ``get_header_separator()``,\n  ``get_row_separator()``, ``auto_calculate_width()``\n* fixed an issue with **wep_ellipsis** and **wep_strip** when using multibyte characters\n* fixed an issue where table would not be in proper form if ``column_width`` is too low\n\n==========\nv0.6.0\n==========\n\n* added support for handling multi byte strings\n* added support for colored strings using ansi escape sequences\n* added constraint where all strings must be unicode\n* fixed an issue where sometimes width was calculated as higher than intended\n\n==========\nv0.5.3\n==========\n\n* added support for handing color codes using ansi escape sequences(experimental)\n* fixed collections abcs deprecation warning\n\n==========\nv0.5.2\n==========\n\n* added new style **style_none**\n* fixed issue regarding improper conversion of non-string floats\n\n==========\nv0.5.1\n==========\n\n* added ``detect_numerics`` boolean for toggling automatic numeric conversion\n\n==========\nv0.5.0\n==========\n\n* added new property ``serialno_header``\n* deprecated methods with misspelled *\"seperator\"* in their name.\n* fixed an issue where table was corrupted when ``column_count`` was too high\n\n\n==========\nv0.4.0\n==========\n\n* added predefined styles for easier customization\n* added *reverse* argument to ``sort()`` method\n* fixed *enum34* dependency for python versions prior to 3.4\n\n==========\nv0.3.0\n==========\n\n* added property ``serialno`` for auto printing serial number\n* fixed an issue with ``sign_mode`` related to str conversion\n* fixed bugs related to python version prior to 3.3\n* fixed exception on **wep_ellipsis** and token length less than 3\n* fixed printing issues with empty table\n\n==========\nv0.2.0\n==========\n\n* added python 2 support\n\n==========\nv0.1.3\n==========\n\n* fixed minor issues\n\n==========\nv0.1.2\n==========\n\n* added new property ``default_padding``\n* added new method ``update_row``\n* fixed an issue in ``auto_calculate_width()``\n\n==========\nv0.1.1\n==========\n\n* initial release on pypi\n\n\n.. inclusion-marker-changelog-end\n\n\n.. inclusion-marker-contribution-start\n\n**************************************************************************\ncontribute\n**************************************************************************\n\nif you have any suggestions or bug reports, please create a issue. pull\nrequests are always welcome.\n\n.. inclusion-marker-contribution-end\n\n\n\n.. inclusion-marker-license-start\n\n**************************************************************************\nlicense\n**************************************************************************\n\nthis project is licensed under the mit license - see the `license.txt <https://github.com/pri22296/beautifultable/blob/master/license.txt>`_ file for details.\n\n\n.. inclusion-marker-license-end\n\n\n\n.. inclusion-marker-donation-start\n\n**************************************************************************\ndonation\n**************************************************************************\n\nlove *beautifultable*? consider supporting the development :)\n\n.. image:: https://www.paypalobjects.com/en_us/i/btn/btn_donatecc_lg.gif\n    :target: https://paypal.me/beautifultable\n\n\n.. inclusion-marker-donation-end\n\n\n",
  "docs_url": null,
  "keywords": "table terminal ascii",
  "license": "mit",
  "name": "beautifultable",
  "package_url": "https://pypi.org/project/beautifultable/",
  "project_url": "https://pypi.org/project/beautifultable/",
  "project_urls": {
    "Download": "https://github.com/pri22296/beautifultable/tarball/1.1.0",
    "Homepage": "https://github.com/pri22296/beautifultable"
  },
  "release_url": "https://pypi.org/project/beautifultable/1.1.0/",
  "requires_dist": [
    "wcwidth",
    "pandas ; extra == 'all'",
    "pandas ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "print text tables for terminals",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "priyam_singh",
    "priyamsingh.22296@gmail.com"
  ],
  "kwds": "beautifultable _column table tables get_table_width",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_beautifultable",
  "homepage": "https://github.com/pri22296/beautifultable",
  "release_count": 16,
  "dependency_ids": [
    "pypi_pandas",
    "pypi_wcwidth"
  ]
}
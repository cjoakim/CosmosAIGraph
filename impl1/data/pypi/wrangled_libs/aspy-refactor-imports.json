{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "# renamed\n\nthis library has been rewritten and renamed to `classify-imports` for version 4\n\n---\n\n[![build status](https://asottile.visualstudio.com/asottile/_apis/build/status/asottile.aspy.refactor_imports?branchname=main)](https://asottile.visualstudio.com/asottile/_build/latest?definitionid=5&branchname=main)\n[![azure devops coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/5/main.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionid=5&branchname=main)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/aspy.refactor_imports/main.svg)](https://results.pre-commit.ci/latest/github/asottile/aspy.refactor_imports/main)\n\naspy.refactor_imports\n=====================\n\nutilities for refactoring imports in python-like syntax.\n\n## installation\n\n`pip install aspy.refactor_imports`\n\n## examples\n\n### aspy.refactor_imports.import_obj\n\n#### constructing an import object\n\n```python\n>>> from aspy.refactor_imports.import_obj import fromimport\n>>> from aspy.refactor_imports.import_obj import importimport\n>>> fromimport.from_str('from foo import bar').to_text()\n'from foo import bar\\n'\n>>> importimport.from_str('import bar as baz').to_text()\n'import bar as baz\\n'\n```\n\n#### splitting an import object\n\n```python\n>>> from aspy.refactor_imports.import_obj import importimport\n>>> obj = importimport.from_str('import foo, bar, baz')\n>>> [i.to_text() for i in obj.split_imports()]\n['import foo\\n', 'import bar\\n', 'import baz\\n']\n```\n\n#### sorting import objects\n\n```python\n>>> import pprint\n>>> from aspy.refactor_imports.import_obj import fromimport\n>>> objs = sorted([\n    fromimport.from_str('from a import foo'),\n    fromimport.from_str('from a.b import baz'),\n    fromimport.from_str('from a import bar'),\n    fromimport.from_str('from a import bar as buz'),\n    fromimport.from_str('from a import bar as baz'),\n])\n>>> pprint.pprint([i.to_text() for i in objs])\n['from a import bar\\n',\n 'from a import bar as baz\\n',\n 'from a import bar as buz\\n',\n 'from a import foo\\n',\n 'from a.b import baz\\n']\n```\n\n```python\n# or to partition into blocks (even with mixed imports)\n>>> import buck.pprint as pprint\n>>> from aspy.refactor_imports.import_obj import fromimport\n>>> from aspy.refactor_imports.import_obj import importimport\n>>> from aspy.refactor_imports.sort import sort\n>>> partitioned = sort(\n    [\n        fromimport.from_str('from aspy import refactor_imports'),\n        importimport.from_str('import sys'),\n        fromimport.from_str('from pyramid.view import view_config'),\n        importimport.from_str('import cached_property'),\n    ],\n    separate=true,\n    import_before_from=true,\n))\n>>> pprint.pprint(partitioned)\n(\n    (importimport.from_str('import sys\\n'),),\n    (\n        importimport.from_str('import cached_property\\n'),\n        fromimport.from_str('from pyramid.view import view_config\\n'),\n    ),\n    (fromimport.from_str('from aspy import refactor_imports\\n'),),\n)\n\n```\n\n### aspy.refactor_imports.classify\n\n#### classify a module\n\n```python\n>>> from aspy.refactor_imports.classify import classify_import\n>>> classify_import('__future__')\n'future'\n>>> classify_import('aspy')\n'application'\n>>> classify_import('pyramid')\n'third_party'\n>>> classify_import('os')\n'builtin'\n>>> classify_import('os.path')\n'builtin'\n```\n\n#### also as convenient constants\n\n```python\n## from aspy.refactor_imports.classify\n\n\nclass importtype(object):\n    __slots__ = ()\n\n    future = 'future'\n    builtin = 'builtin'\n    third_party = 'third_party'\n    application = 'application'\n\n    __all__ = (future, builtin, third_party, application)\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aspy.refactor-imports",
  "package_url": "https://pypi.org/project/aspy.refactor-imports/",
  "project_url": "https://pypi.org/project/aspy.refactor-imports/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/aspy.refactor_imports"
  },
  "release_url": "https://pypi.org/project/aspy.refactor-imports/3.0.2/",
  "requires_dist": [
    "cached-property ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "utilities for refactoring imports in python-like syntax.",
  "version": "3.0.2",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "asottile visualstudio azure aspy importimport",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aspy.refactor_imports",
  "homepage": "https://github.com/asottile/aspy.refactor_imports",
  "release_count": 28,
  "dependency_ids": [
    "pypi_cached_property"
  ]
}
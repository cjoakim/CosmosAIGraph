{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.astpretty?branchname=main)](https://dev.azure.com/asottile/asottile/_build/latest?definitionid=35&branchname=main)\n[![azure devops coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/35/main.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionid=35&branchname=main)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/astpretty/main.svg)](https://results.pre-commit.ci/latest/github/asottile/astpretty/main)\n\nastpretty\n=========\n\npretty print the output of python stdlib `ast.parse`.\n\nastpretty is intended to be a replacement for `ast.dump`.\n\n## installation\n\n`pip install astpretty`\n\n\n## usage\n\n`astpretty` provides two api functions:\n\n\n### `astpretty.pprint(node, indent=four_space_indent, show_offsets=true)`\n\nprint a representation of the ast node.\n\n```python\n>>> astpretty.pprint(ast.parse('if x == y: y += 4').body[0])\nif(\n    lineno=1,\n    col_offset=0,\n    test=compare(\n        lineno=1,\n        col_offset=3,\n        left=name(lineno=1, col_offset=3, id='x', ctx=load()),\n        ops=[eq()],\n        comparators=[name(lineno=1, col_offset=8, id='y', ctx=load())],\n    ),\n    body=[\n        augassign(\n            lineno=1,\n            col_offset=11,\n            target=name(lineno=1, col_offset=11, id='y', ctx=store()),\n            op=add(),\n            value=num(lineno=1, col_offset=16, n=4),\n        ),\n    ],\n    orelse=[],\n)\n```\n\n`indent` allows control over the indentation string:\n\n```python\n>>> astpretty.pprint(ast.parse('if x == y: y += 4').body[0], indent='  ')\nif(\n  lineno=1,\n  col_offset=0,\n  test=compare(\n    lineno=1,\n    col_offset=3,\n    left=name(lineno=1, col_offset=3, id='x', ctx=load()),\n    ops=[eq()],\n    comparators=[name(lineno=1, col_offset=8, id='y', ctx=load())],\n  ),\n  body=[\n    augassign(\n      lineno=1,\n      col_offset=11,\n      target=name(lineno=1, col_offset=11, id='y', ctx=store()),\n      op=add(),\n      value=num(lineno=1, col_offset=16, n=4),\n    ),\n  ],\n  orelse=[],\n)\n```\n\n`show_offsets` controls whether the output includes line / column information:\n\n```python\n>>> astpretty.pprint(ast.parse('x += 5').body[0], show_offsets=false)\naugassign(\n    target=name(id='x', ctx=store()),\n    op=add(),\n    value=num(n=5),\n)\n```\n\n### `astpretty.pformat(node, indent=four_space_indent, show_offsets=true)`\n\nreturn a string representation of the ast node.\n\narguments are identical to `astpretty.pprint`.\n\n```python\n>>> astpretty.pformat(ast.parse('if x == y: y += 4').body[0])\n\"if(\\n    lineno=1,\\n    col_offset=0,\\n    test=compare(\\n        lineno=1,\\n        col_offset=3,\\n        left=name(lineno=1, col_offset=3, id='x', ctx=load()),\\n        ops=[eq()],\\n        comparators=[name(lineno=1, col_offset=8, id='y', ctx=load())],\\n    ),\\n    body=[\\n        augassign(\\n            lineno=1,\\n            col_offset=11,\\n            target=name(lineno=1, col_offset=11, id='y', ctx=store()),\\n            op=add(),\\n            value=num(lineno=1, col_offset=16, n=4),\\n        ),\\n    ],\\n    orelse=[],\\n)\"\n```\n\n### comparison with stdlib `ast.dump`\n\n```python\n>>> print(ast.dump(ast.parse('if x == y: y += 4').body[0]))\nif(test=compare(left=name(id='x', ctx=load()), ops=[eq()], comparators=[name(id='y', ctx=load())]), body=[augassign(target=name(id='y', ctx=store()), op=add(), value=num(n=4))], orelse=[])\n```\n\n### `typed-ast` support\n\n`astpretty` works with [typed-ast](https://github.com/python/typed_ast)!\n\nfor usage with `typed-ast` make sure you have `typed-ast` installed, a\nconvenient way to do this is with the `typed` extra to `astpretty`:\n\n```bash\npip install astpretty[typed]\n```\n\nthe apis above work equally well with the return values from the `ast` modules\nprovided by `typed_ast`:\n\n```pycon\n>>> import astpretty\n>>> from typed_ast import ast3\n>>> astpretty.pprint(ast3.parse('x = 4  # type: int'))\nmodule(\n    body=[\n        assign(\n            lineno=1,\n            col_offset=0,\n            targets=[name(lineno=1, col_offset=0, id='x', ctx=store())],\n            value=num(lineno=1, col_offset=4, n=4),\n            type_comment='int',\n        ),\n    ],\n    type_ignores=[],\n)\n```\n\nwith `typed-ast` installed, the commandline interface adds `--typed-27` and\n`--typed-3` options for using the alternative ast parsers:\n\n```console\n$ astpretty --typed-3 t.py\nmodule(\n    body=[\n        assign(\n            lineno=1,\n            col_offset=0,\n            targets=[name(lineno=1, col_offset=0, id='x', ctx=store())],\n            value=num(lineno=1, col_offset=4, n=4),\n            type_comment='int',\n        ),\n    ],\n    type_ignores=[],\n)\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "astpretty",
  "package_url": "https://pypi.org/project/astpretty/",
  "project_url": "https://pypi.org/project/astpretty/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/astpretty"
  },
  "release_url": "https://pypi.org/project/astpretty/3.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "pretty print the output of python stdlib `ast.parse`.",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "azure asottile print ast devops",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_astpretty",
  "homepage": "https://github.com/asottile/astpretty",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "about\n=====\n\na library for fitting continuous piecewise linear functions to data.\njust specify the number of line segments you desire and provide the\ndata.\n\n|downloads a month| |pwlf ci| |codecov| |pypi version| |conda|\n\ncheck out the\n`documentation <https://jekel.me/piecewise_linear_fit_py>`__!\n\nread the `blog\npost <http://jekel.me/2017/fit-a-piecewise-linear-function-to-data/>`__.\n\n.. figure:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/examplepiecewisefit.png\n   :alt: example of a continuous piecewise linear fit to data.\n\n   example of a continuous piecewise linear fit to data.\n\n.. figure:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/sinwavefit.png\n   :alt: example of a continuous piecewise linear fit to a sine wave.\n\n   example of a continuous piecewise linear fit to a sine wave.\n\nnow you can perform segmented constant fitting and piecewise\npolynomials! |example of multiple degree fits to a sine wave.|\n\nfeatures\n========\n\nfor a specified number of line segments, you can determine (and predict\nfrom) the optimal continuous piecewise linear function f(x). see `this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitforspecifiednumberoflinesegments.py>`__.\n\nyou can fit and predict a continuous piecewise linear function f(x) if\nyou know the specific x locations where the line segments terminate. see\n`this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitwithknownlinesegmentlocations.py>`__.\n\nif you want to pass different keywords for the scipy differential\nevolution algorithm see `this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitforspecifiednumberoflinesegments_passdiffevokeywords.py>`__.\n\nyou can use a different optimization algorithm to find the optimal\nlocation for line segments by using the objective function that\nminimizes the sum of square of residuals. see `this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/usecustomoptimizationroutine.py>`__.\n\ninstead of using differential evolution, you can now use a multi-start\ngradient optimization with fitfast() function. you can specify the\nnumber of starting points to use. the default is 2. this means that a\nlatin hyper cube sampling (space filling doe) of 2 is used to run 2\nl-bfgs-b optimizations. see `this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/sinewave_time_compare.py>`__\nwhich runs fit() function, then runs the fitfast() to compare the\nruntime differences!\n\ninstallation\n============\n\npython package index (pypi)\n---------------------------\n\nyou can now install with pip.\n\n::\n\n   python -m pip install pwlf\n\nconda\n-----\n\nif you have conda, you can also install from conda-forge.\n\n::\n\n   conda install -c conda-forge pwlf\n\nfrom source\n-----------\n\nor clone the repo\n\n::\n\n   git clone https://github.com/cjekel/piecewise_linear_fit_py.git\n\nthen install with pip\n\n::\n\n   python -m pip install ./piecewise_linear_fit_py\n\nhow it works\n============\n\nthis\n`paper <https://github.com/cjekel/piecewise_linear_fit_py/raw/master/paper/pwlf_jekel_venter_v2.pdf>`__\nexplains how this library works in detail.\n\nthis is based on a formulation of a piecewise linear least squares fit,\nwhere the user must specify the location of break points. see `this\npost <http://jekel.me/2018/continous-piecewise-linear-regression/>`__\nwhich goes through the derivation of a least squares regression problem\nif the break point locations are known. alternatively check out\n`golovchenko\n(2004) <http://golovchenko.org/docs/continuouspiecewiselinearfit.pdf>`__.\n\nglobal optimization is used to find the best location for the user\ndefined number of line segments. i specifically use the `differential\nevolution <https://docs.scipy.org/doc/scipy-0.17.0/reference/generated/scipy.optimize.differential_evolution.html>`__\nalgorithm in scipy. i default the differential evolution algorithm to be\naggressive, and it is probably overkill for your problem. so feel free\nto pass your own differential evolution keywords to the library. see\n`this\nexample <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/examples/fitforspecifiednumberoflinesegments_passdiffevokeywords.py>`__.\n\nchangelog\n=========\n\nall changes now stored in\n`changelog.md <https://github.com/cjekel/piecewise_linear_fit_py/blob/master/changelog.md>`__\n\nnew ``weights=`` keyword allows you to perform weighted pwlf fits!\nremoved tensorflow code which can now be found\n`here <https://github.com/cjekel/piecewise_linear_fit_py_tf>`__.\n\nrequirements\n============\n\npython 2.7+\n\nnumpy >= 1.14.0\n\nscipy >= 1.2.0\n\npydoe >= 0.3.8\n\nlicense\n=======\n\nmit license\n\ncitation\n========\n\n.. code:: bibtex\n\n   @manual{pwlf,\n   author = {jekel, charles f. and venter, gerhard},\n   title = {{pwlf:} a python library for fitting 1d continuous piecewise linear functions},\n   year = {2019},\n   url = {https://github.com/cjekel/piecewise_linear_fit_py}\n   }\n\n.. |downloads a month| image:: https://img.shields.io/pypi/dm/pwlf.svg\n.. |pwlf ci| image:: https://github.com/cjekel/piecewise_linear_fit_py/workflows/pwlf%20ci/badge.svg\n.. |codecov| image:: https://codecov.io/gh/cjekel/piecewise_linear_fit_py/branch/master/graph/badge.svg?token=agedfeqxed\n   :target: https://codecov.io/gh/cjekel/piecewise_linear_fit_py\n.. |pypi version| image:: https://img.shields.io/pypi/v/pwlf\n.. |conda| image:: https://img.shields.io/conda/vn/conda-forge/pwlf\n   :target: https://anaconda.org/conda-forge/pwlf\n.. |example of multiple degree fits to a sine wave.| image:: https://raw.githubusercontent.com/cjekel/piecewise_linear_fit_py/master/examples/figs/multi_degree.png\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "pwlf",
  "package_url": "https://pypi.org/project/pwlf/",
  "project_url": "https://pypi.org/project/pwlf/",
  "project_urls": {
    "Homepage": "https://github.com/cjekel/piecewise_linear_fit_py"
  },
  "release_url": "https://pypi.org/project/pwlf/2.2.1/",
  "requires_dist": [],
  "requires_python": ">3.5",
  "summary": "fit piecewise linear functions to data",
  "version": "2.2.1",
  "releases": [],
  "developers": [
    "charles_jekel",
    "cjekel@gmail.com"
  ],
  "kwds": "piecewise_linear_fit_py piecewise_linear_fit_py_tf continuouspiecewiselinearfit piecewise fitforspecifiednumberoflinesegments",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pwlf",
  "homepage": "https://github.com/cjekel/piecewise_linear_fit_py",
  "release_count": 53,
  "dependency_ids": []
}
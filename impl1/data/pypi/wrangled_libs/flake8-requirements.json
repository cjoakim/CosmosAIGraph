{
  "classifiers": [
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "package requirements checker\n============================\n\nthis module provides a plug-in for `flake8 <http://flake8.pycqa.org>`_, which checks/validates\npackage import requirements. it reports missing and/or not used project direct dependencies.\n\nthis plug-in adds new flake8 warnings:\n\n- ``i900``: package is not listed as a requirement.\n- ``i901``: package is required but not used. (not implemented yet)\n\nimportant notice\n----------------\n\nin order to collect project's dependencies, this checker evaluates python code from the\n``setup.py`` file stored in the project's root directory. code evaluation is done with the `eval()\n<https://docs.python.org/3/library/functions.html#eval>`_ function. as a fall-back method, this\nchecker also tries to load dependencies, in order, from the ``setup.cfg``, the ``pyproject.toml``\nfile from the `pep 621 <https://peps.python.org/pep-0621/>`_ project section, the ``pyproject.toml``\nfile from the `poetry <https://python-poetry.org/>`_ tool section, or from the\n``requirements.txt`` text file in the project's root directory.\n\nat this point it is very important to be aware of the consequences of the above approach. one\nmight inject malicious code into the ``setup.py`` file, which will be executed by this checker.\nhence, this checker shall never be use to check code from an unknown source! however, in most\ncases, one validates code from a known source (e.g. own code) and one will run script stored in\nthe ``setup.py`` file anyway. the worst case scenario is, that this checker will execute the\nequivalent of the ``python setup.py``, which shall be idempotent (it's a horribly designed\n``setup.py`` file if it's not).\n\nif you have noticed some side effects during the ``flake8`` check and your ``setup.py`` file is\nwritten in a standard way (e.g. `pypa-sampleproject\n<https://github.com/pypa/sampleproject/blob/master/setup.py>`_), please fill out a bug report.\n\ninstallation\n------------\n\nyou can install, upgrade, or uninstall ``flake8-requirements`` with these commands::\n\n  $ pip install flake8-requirements\n  $ pip install --upgrade flake8-requirements\n  $ pip uninstall flake8-requirements\n\ncustomization\n-------------\n\nfor projects with custom (private) dependencies, one can provide mapping between project name and\nprovided modules. such a mapping can be set on the command line during the flake8 invocation with\nthe ``--known-modules`` option or alternatively in the ``[flake8]`` section of the configuration\nfile, e.g. ``setup.cfg``. the syntax of the custom mapping looks like follows::\n\n  1st-project-name:[module1,module2,...],2nd-project-name:[modulea,moduleb,...],...\n\nif some local project lacks \"name\" attribute in the ``setup.py`` file (it is highly discouraged\nnot to provide the \"name\" attribute, though), one can omit the project name in the mapping and do\nas follows::\n\n  :[localmodule1,localmodule2,...],1st-local-library:[modulea,moduleb,...],...\n\nreal life example::\n\n  $ cat setup.cfg\n  [flake8]\n  max-line-length = 100\n  known-modules = my-lib:[mylib.drm,mylib.encryption]\n\nif you use `flake8-pyproject <https://pypi.org/project/flake8-pyproject/>`_, you can also configure\nthe known modules using a nicer syntax::\n\n  $ cat pyproject.toml\n  ...\n  [tool.flake8]\n  max-line-length = 100\n\n  [tool.flake8.known-modules]\n  my-lib = [\"mylib.drm\", \"mylib.encryption\"]\n\nnote that if the module's name contains dots, you have to quote it in pyproject.toml (e.g.\n``\"my_namespace.my_lib\" = [...]``).\n\nit is also possible to scan host's site-packages directory for installed packages. this feature is\ndisabled by default, but user can enable it with the ``--scan-host-site-packages`` command line\noption. please note, however, that the location of the site-packages directory will be determined\nby the python version used for flake8 execution.\n\nin order to read requirements from the text file, user shall provide the location of such a file\nwith the ``--requirements-file`` option. if the given location is not an absolute path, then it\nhas to be specified as a path relative to the project's root directory.\n\nif you use the ``-r`` flag in your requirements text file with more than one level of recursion\n(in other words, one file includes another, the included file includes yet another, and so on),\nadd the ``--requirements-max-depth`` option to flake8 (for example, ``--requirements-max-depth=3``\nto allow three levels of recursion).\n\nfaq\n---\n\n| **q:** package is added to the requirements, but flake8 still reports \"i900 '<name>' not listed\n         as a requirement\".\n| **a:** it happens when the name of the package is not the same as the name of the module. in such\n         a case, you have to provide the mapping between the package name and the module name. see\n         the \"`customization <#customization>`_\" section for more details. if the package for which\n         that happens is a well-known package, please fill out a bug report or add mapping to the\n         `known_3rd_parties <src/flake8_requirements/modules.py#l509>`_ and submit a pull request.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "flake8-requirements",
  "package_url": "https://pypi.org/project/flake8-requirements/",
  "project_url": "https://pypi.org/project/flake8-requirements/",
  "project_urls": {
    "Homepage": "https://github.com/Arkq/flake8-requirements"
  },
  "release_url": "https://pypi.org/project/flake8-requirements/2.0.1/",
  "requires_dist": [
    "flake8 >=4.0.0",
    "setuptools >=10.0.0",
    "tomli >=1.2.1 ; python_version < \"3.11\""
  ],
  "requires_python": "",
  "summary": "package requirements checker, plugin for flake8",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "arkadiusz.bokowy@gmail.com",
    "arkadiusz_bokowy"
  ],
  "kwds": "flake8_requirements dependencies flake8 requirements packages",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_requirements",
  "homepage": "https://github.com/arkq/flake8-requirements",
  "release_count": 29,
  "dependency_ids": [
    "pypi_flake8",
    "pypi_setuptools",
    "pypi_tomli"
  ]
}
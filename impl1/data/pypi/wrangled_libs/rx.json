{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: other environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "==========================================\nthe reactive extensions for python (rxpy)\n==========================================\n\n.. image:: https://github.com/reactivex/rxpy/workflows/python%20package/badge.svg\n        :target: https://github.com/reactivex/rxpy/actions\n\n.. image:: https://img.shields.io/coveralls/reactivex/rxpy.svg\n        :target: https://coveralls.io/github/reactivex/rxpy\n\n.. image:: https://img.shields.io/pypi/v/rx.svg\n        :target: https://pypi.python.org/pypi/rx\n\n.. image:: https://img.shields.io/readthedocs/rxpy.svg\n        :target: https://readthedocs.org/projects/rxpy/builds/\n        :alt: documentation status\n\n\n*a library for composing asynchronous and event-based programs using observable collections and\nquery operator functions in python*\n\nrxpy v3.0\n----------------\n\nfor v1.x please go to the `v1 branch <https://github.com/reactivex/rxpy/tree/release/v1.6.x>`_.\n\nrxpy v3.x runs on `python <http://www.python.org/>`_ 3.6 or above. to install\nrxpy:\n\n.. code:: console\n\n    pip3 install rx\n\n\nabout reactivex\n------------------\n\nreactive extensions for python (rxpy) is a set of libraries for composing\nasynchronous and event-based programs using observable sequences and pipable\nquery operators in python. using rx, developers represent asynchronous data\nstreams with observables, query asynchronous data streams using operators, and\nparameterize concurrency in data/event streams using schedulers.\n\n.. code:: python\n\n    import rx\n    from rx import operators as ops\n\n    source = rx.of(\"alpha\", \"beta\", \"gamma\", \"delta\", \"epsilon\")\n\n    composed = source.pipe(\n        ops.map(lambda s: len(s)),\n        ops.filter(lambda i: i >= 5)\n    )\n    composed.subscribe(lambda value: print(\"received {0}\".format(value)))\n\n\nlearning rxpy\n--------------\n\nread the `documentation\n<https://rxpy.readthedocs.io/en/latest/>`_ to learn\nthe principles of rxpy and get the complete reference of the available\noperators.\n\nif you need to migrate code from rxpy v1.x, read the `migration\n<https://rxpy.readthedocs.io/en/latest/migration.html>`_ section.\n\nthere is also a list of third party documentation available `here\n<https://rxpy.readthedocs.io/en/latest/additional_reading.html>`_.\n\n\ncommunity\n----------\n\njoin the conversation on slack!\n\nthe gracious folks at `pyslackers <https://pyslackers.com/>`_ have given us a home\nin the `#rxpy <https://pythondev.slack.com/messages/rxpy>`_ slack channel. please\njoin us there for questions, conversations, and all things related to rxpy.\n\nto join, navigate the page above to receive an email invite. after signing up,\njoin us in the #rxpy channel.\n\nplease follow the community guidelines and terms of service.\n\n\ndifferences from .net and rxjs\n------------------------------\n\nrxpy is a fairly complete implementation of\n`rx <http://reactivex.io/>`_ with more than\n`120 operators <https://rxpy.readthedocs.io/en/latest/operators.html>`_, and\nover `1300 passing unit-tests <https://coveralls.io/github/reactivex/rxpy>`_. rxpy\nis mostly a direct port of rxjs, but also borrows a bit from rxnet and rxjava in\nterms of threading and blocking operators.\n\nrxpy follows `pep 8 <http://legacy.python.org/dev/peps/pep-0008/>`_, so all\nfunction and method names are lowercase with words separated by underscores as\nnecessary to improve readability.\n\nthus .net code such as:\n\n.. code:: c#\n\n    var group = source.groupby(i => i % 3);\n\n\nneed to be written with an `_` in python:\n\n.. code:: python\n\n    group = source.pipe(ops.group_by(lambda i: i % 3))\n\nwith rxpy you should use `named keyword arguments\n<https://docs.python.org/3/glossary.html>`_ instead of positional arguments when\nan operator has multiple optional arguments. rxpy will not try to detect which\narguments you are giving to the operator (or not).",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "rx",
  "package_url": "https://pypi.org/project/Rx/",
  "project_url": "https://pypi.org/project/Rx/",
  "project_urls": {
    "Download": "https://github.com/ReactiveX/RxPY",
    "Homepage": "http://reactivex.io"
  },
  "release_url": "https://pypi.org/project/Rx/3.2.0/",
  "requires_dist": [],
  "requires_python": ">=3.6.0",
  "summary": "reactive extensions (rx) for python",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "dag@brattli.net",
    "dag_brattli"
  ],
  "kwds": "reactivex reactive rxpy rxjs rx",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_rx",
  "homepage": "http://reactivex.io",
  "release_count": 25,
  "dependency_ids": []
}
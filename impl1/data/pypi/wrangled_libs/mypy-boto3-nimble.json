{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "typing :: typed"
  ],
  "description": "<a id=\"mypy-boto3-nimble\"></a>\n\n# mypy-boto3-nimble\n\n[![pypi - mypy-boto3-nimble](https://img.shields.io/pypi/v/mypy-boto3-nimble.svg?color=blue)](https://pypi.org/project/mypy-boto3-nimble)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/mypy-boto3-nimble.svg?color=blue)](https://pypi.org/project/mypy-boto3-nimble)\n[![docs](https://img.shields.io/readthedocs/boto3-stubs.svg?color=blue)](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/)\n[![pypi - downloads](https://static.pepy.tech/badge/mypy-boto3-nimble)](https://pepy.tech/project/mypy-boto3-nimble)\n\n![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)\n\ntype annotations for\n[boto3.nimblestudio 1.34.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/nimble.html#nimblestudio)\nservice compatible with [vscode](https://code.visualstudio.com/),\n[pycharm](https://www.jetbrains.com/pycharm/),\n[emacs](https://www.gnu.org/software/emacs/),\n[sublime text](https://www.sublimetext.com/),\n[mypy](https://github.com/python/mypy),\n[pyright](https://github.com/microsoft/pyright) and other tools.\n\ngenerated by\n[mypy-boto3-builder 7.21.0](https://github.com/youtype/mypy_boto3_builder).\n\nmore information can be found on\n[boto3-stubs](https://pypi.org/project/boto3-stubs/) page and in\n[mypy-boto3-nimble docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/).\n\nsee how it helps to find and fix potential bugs:\n\n![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)\n\n- [mypy-boto3-nimble](#mypy-boto3-nimble)\n  - [how to install](#how-to-install)\n    - [vscode extension](#vscode-extension)\n    - [from pypi with pip](#from-pypi-with-pip)\n  - [how to uninstall](#how-to-uninstall)\n  - [usage](#usage)\n    - [vscode](#vscode)\n    - [pycharm](#pycharm)\n    - [emacs](#emacs)\n    - [sublime text](#sublime-text)\n    - [other ides](#other-ides)\n    - [mypy](#mypy)\n    - [pyright](#pyright)\n  - [explicit type annotations](#explicit-type-annotations)\n    - [client annotations](#client-annotations)\n    - [paginators annotations](#paginators-annotations)\n    - [waiters annotations](#waiters-annotations)\n    - [literals](#literals)\n    - [type definitions](#type-definitions)\n  - [how it works](#how-it-works)\n  - [what's new](#what's-new)\n    - [implemented features](#implemented-features)\n    - [latest changes](#latest-changes)\n  - [versioning](#versioning)\n  - [thank you](#thank-you)\n  - [documentation](#documentation)\n  - [support and contributing](#support-and-contributing)\n\n<a id=\"how-to-install\"></a>\n\n## how to install\n\n<a id=\"vscode-extension\"></a>\n\n### vscode extension\n\nadd\n[aws boto3](https://marketplace.visualstudio.com/items?itemname=boto3typed.boto3-ide)\nextension to your vscode and run `aws boto3: quick start` command.\n\nclick `modify` and select `boto3 common` and `nimblestudio`.\n\n<a id=\"from-pypi-with-pip\"></a>\n\n### from pypi with pip\n\ninstall `boto3-stubs` for `nimblestudio` service.\n\n```bash\n# install with boto3 type annotations\npython -m pip install 'boto3-stubs[nimble]'\n\n\n# lite version does not provide session.client/resource overloads\n# it is more ram-friendly, but requires explicit type annotations\npython -m pip install 'boto3-stubs-lite[nimble]'\n\n\n# standalone installation\npython -m pip install mypy-boto3-nimble\n```\n\n<a id=\"how-to-uninstall\"></a>\n\n## how to uninstall\n\n```bash\npython -m pip uninstall -y mypy-boto3-nimble\n```\n\n<a id=\"usage\"></a>\n\n## usage\n\n<a id=\"vscode\"></a>\n\n### vscode\n\n- install\n  [python extension](https://marketplace.visualstudio.com/items?itemname=ms-python.python)\n- install\n  [pylance extension](https://marketplace.visualstudio.com/items?itemname=ms-python.vscode-pylance)\n- set `pylance` as your python language server\n- install `boto3-stubs[nimble]` in your environment:\n\n```bash\npython -m pip install 'boto3-stubs[nimble]'\n```\n\nboth type checking and code completion should now work. no explicit type\nannotations required, write your `boto3` code as usual.\n\n<a id=\"pycharm\"></a>\n\n### pycharm\n\ninstall `boto3-stubs-lite[nimble]` in your environment:\n\n```bash\npython -m pip install 'boto3-stubs-lite[nimble]'`\n```\n\nboth type checking and code completion should now work. explicit type\nannotations **are required**.\n\nuse `boto3-stubs` package instead for implicit type discovery.\n\n<a id=\"emacs\"></a>\n\n### emacs\n\n- install `boto3-stubs` with services you use in your environment:\n\n```bash\npython -m pip install 'boto3-stubs[nimble]'\n```\n\n- install [use-package](https://github.com/jwiegley/use-package),\n  [lsp](https://github.com/emacs-lsp/lsp-mode/),\n  [company](https://github.com/company-mode/company-mode) and\n  [flycheck](https://github.com/flycheck/flycheck) packages\n- install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package\n\n```elisp\n(use-package lsp-pyright\n  :ensure t\n  :hook (python-mode . (lambda ()\n                          (require 'lsp-pyright)\n                          (lsp)))  ; or lsp-deferred\n  :init (when (executable-find \"python3\")\n          (setq lsp-pyright-python-executable-cmd \"python3\"))\n  )\n```\n\n- make sure emacs uses the environment where you have installed `boto3-stubs`\n\ntype checking should now work. no explicit type annotations required, write\nyour `boto3` code as usual.\n\n<a id=\"sublime-text\"></a>\n\n### sublime text\n\n- install `boto3-stubs[nimble]` with services you use in your environment:\n\n```bash\npython -m pip install 'boto3-stubs[nimble]'\n```\n\n- install [lsp-pyright](https://github.com/sublimelsp/lsp-pyright) package\n\ntype checking should now work. no explicit type annotations required, write\nyour `boto3` code as usual.\n\n<a id=\"other-ides\"></a>\n\n### other ides\n\nnot tested, but as long as your ide supports `mypy` or `pyright`, everything\nshould work.\n\n<a id=\"mypy\"></a>\n\n### mypy\n\n- install `mypy`: `python -m pip install mypy`\n- install `boto3-stubs[nimble]` in your environment:\n\n```bash\npython -m pip install 'boto3-stubs[nimble]'`\n```\n\ntype checking should now work. no explicit type annotations required, write\nyour `boto3` code as usual.\n\n<a id=\"pyright\"></a>\n\n### pyright\n\n- install `pyright`: `npm i -g pyright`\n- install `boto3-stubs[nimble]` in your environment:\n\n```bash\npython -m pip install 'boto3-stubs[nimble]'\n```\n\noptionally, you can install `boto3-stubs` to `typings` folder.\n\ntype checking should now work. no explicit type annotations required, write\nyour `boto3` code as usual.\n\n<a id=\"explicit-type-annotations\"></a>\n\n## explicit type annotations\n\n<a id=\"client-annotations\"></a>\n\n### client annotations\n\n`nimblestudioclient` provides annotations for `boto3.client(\"nimble\")`.\n\n```python\nfrom boto3.session import session\n\nfrom mypy_boto3_nimble import nimblestudioclient\n\nclient: nimblestudioclient = session().client(\"nimble\")\n\n# now client usage is checked by mypy and ide should provide code completion\n```\n\n<a id=\"paginators-annotations\"></a>\n\n### paginators annotations\n\n`mypy_boto3_nimble.paginator` module contains type annotations for all\npaginators.\n\n```python\nfrom boto3.session import session\n\nfrom mypy_boto3_nimble import nimblestudioclient\nfrom mypy_boto3_nimble.paginator import (\n    listeulaacceptancespaginator,\n    listeulaspaginator,\n    listlaunchprofilememberspaginator,\n    listlaunchprofilespaginator,\n    liststreamingimagespaginator,\n    liststreamingsessionbackupspaginator,\n    liststreamingsessionspaginator,\n    liststudiocomponentspaginator,\n    liststudiomemberspaginator,\n    liststudiospaginator,\n)\n\nclient: nimblestudioclient = session().client(\"nimble\")\n\n# explicit type annotations are optional here\n# types should be correctly discovered by mypy and ides\nlist_eula_acceptances_paginator: listeulaacceptancespaginator = client.get_paginator(\n    \"list_eula_acceptances\"\n)\nlist_eulas_paginator: listeulaspaginator = client.get_paginator(\"list_eulas\")\nlist_launch_profile_members_paginator: listlaunchprofilememberspaginator = client.get_paginator(\n    \"list_launch_profile_members\"\n)\nlist_launch_profiles_paginator: listlaunchprofilespaginator = client.get_paginator(\n    \"list_launch_profiles\"\n)\nlist_streaming_images_paginator: liststreamingimagespaginator = client.get_paginator(\n    \"list_streaming_images\"\n)\nlist_streaming_session_backups_paginator: liststreamingsessionbackupspaginator = (\n    client.get_paginator(\"list_streaming_session_backups\")\n)\nlist_streaming_sessions_paginator: liststreamingsessionspaginator = client.get_paginator(\n    \"list_streaming_sessions\"\n)\nlist_studio_components_paginator: liststudiocomponentspaginator = client.get_paginator(\n    \"list_studio_components\"\n)\nlist_studio_members_paginator: liststudiomemberspaginator = client.get_paginator(\n    \"list_studio_members\"\n)\nlist_studios_paginator: liststudiospaginator = client.get_paginator(\"list_studios\")\n```\n\n<a id=\"waiters-annotations\"></a>\n\n### waiters annotations\n\n`mypy_boto3_nimble.waiter` module contains type annotations for all waiters.\n\n```python\nfrom boto3.session import session\n\nfrom mypy_boto3_nimble import nimblestudioclient\nfrom mypy_boto3_nimble.waiter import (\n    launchprofiledeletedwaiter,\n    launchprofilereadywaiter,\n    streamingimagedeletedwaiter,\n    streamingimagereadywaiter,\n    streamingsessiondeletedwaiter,\n    streamingsessionreadywaiter,\n    streamingsessionstoppedwaiter,\n    streamingsessionstreamreadywaiter,\n    studiocomponentdeletedwaiter,\n    studiocomponentreadywaiter,\n    studiodeletedwaiter,\n    studioreadywaiter,\n)\n\nclient: nimblestudioclient = session().client(\"nimble\")\n\n# explicit type annotations are optional here\n# types should be correctly discovered by mypy and ides\nlaunch_profile_deleted_waiter: launchprofiledeletedwaiter = client.get_waiter(\n    \"launch_profile_deleted\"\n)\nlaunch_profile_ready_waiter: launchprofilereadywaiter = client.get_waiter(\"launch_profile_ready\")\nstreaming_image_deleted_waiter: streamingimagedeletedwaiter = client.get_waiter(\n    \"streaming_image_deleted\"\n)\nstreaming_image_ready_waiter: streamingimagereadywaiter = client.get_waiter(\"streaming_image_ready\")\nstreaming_session_deleted_waiter: streamingsessiondeletedwaiter = client.get_waiter(\n    \"streaming_session_deleted\"\n)\nstreaming_session_ready_waiter: streamingsessionreadywaiter = client.get_waiter(\n    \"streaming_session_ready\"\n)\nstreaming_session_stopped_waiter: streamingsessionstoppedwaiter = client.get_waiter(\n    \"streaming_session_stopped\"\n)\nstreaming_session_stream_ready_waiter: streamingsessionstreamreadywaiter = client.get_waiter(\n    \"streaming_session_stream_ready\"\n)\nstudio_component_deleted_waiter: studiocomponentdeletedwaiter = client.get_waiter(\n    \"studio_component_deleted\"\n)\nstudio_component_ready_waiter: studiocomponentreadywaiter = client.get_waiter(\n    \"studio_component_ready\"\n)\nstudio_deleted_waiter: studiodeletedwaiter = client.get_waiter(\"studio_deleted\")\nstudio_ready_waiter: studioreadywaiter = client.get_waiter(\"studio_ready\")\n```\n\n<a id=\"literals\"></a>\n\n### literals\n\n`mypy_boto3_nimble.literals` module contains literals extracted from shapes\nthat can be used in user code for type checking.\n\nfull list of `nimblestudio` literals can be found in\n[docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/literals/).\n\n```python\nfrom mypy_boto3_nimble.literals import automaticterminationmodetype\n\n\ndef check_value(value: automaticterminationmodetype) -> bool: ...\n```\n\n<a id=\"type-definitions\"></a>\n\n### type definitions\n\n`mypy_boto3_nimble.type_defs` module contains structures and shapes assembled\nto typed dictionaries and unions for additional type checking.\n\nfull list of `nimblestudio` typedefs can be found in\n[docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/type_defs/).\n\n```python\nfrom mypy_boto3_nimble.type_defs import accepteulasrequestrequesttypedef\n\n\ndef get_value() -> accepteulasrequestrequesttypedef:\n    return {...}\n```\n\n<a id=\"how-it-works\"></a>\n\n## how it works\n\nfully automated\n[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully\ngenerates type annotations for each service, patiently waiting for `boto3`\nupdates. it delivers drop-in type annotations for you and makes sure that:\n\n- all available `boto3` services are covered.\n- each public class and method of every `boto3` service gets valid type\n  annotations extracted from `botocore` schemas.\n- type annotations include up-to-date documentation.\n- link to documentation is provided for every method.\n- code is processed by [black](https://github.com/psf/black) and\n  [isort](https://github.com/pycqa/isort) for readability.\n\n<a id=\"what's-new\"></a>\n\n## what's new\n\n<a id=\"implemented-features\"></a>\n\n### implemented features\n\n- fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`\n  libraries\n- `mypy`, `pyright`, `vscode`, `pycharm`, `sublime text` and `emacs`\n  compatibility\n- `client`, `serviceresource`, `resource`, `waiter` `paginator` type\n  annotations for each service\n- generated `typedefs` for each service\n- generated `literals` for each service\n- auto discovery of types for `boto3.client` and `boto3.resource` calls\n- auto discovery of types for `session.client` and `session.resource` calls\n- auto discovery of types for `client.get_waiter` and `client.get_paginator`\n  calls\n- auto discovery of types for `serviceresource` and `resource` collections\n- auto discovery of types for `aiobotocore.session.create_client` calls\n\n<a id=\"latest-changes\"></a>\n\n### latest changes\n\nbuilder changelog can be found in\n[releases](https://github.com/youtype/mypy_boto3_builder/releases).\n\n<a id=\"versioning\"></a>\n\n## versioning\n\n`mypy-boto3-nimble` version is the same as related `boto3` version and follows\n[pep 440](https://www.python.org/dev/peps/pep-0440/) format.\n\n<a id=\"thank-you\"></a>\n\n## thank you\n\n- [allie fitter](https://github.com/alliefitter) for\n  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),\n  this package is based on top of his work\n- [black](https://github.com/psf/black) developers for an awesome formatting\n  tool\n- [timothy edmund crosley](https://github.com/timothycrosley) for\n  [isort](https://github.com/pycqa/isort) and how flexible it is\n- [mypy](https://github.com/python/mypy) developers for doing all dirty work\n  for us\n- [pyright](https://github.com/microsoft/pyright) team for the new era of typed\n  python\n\n<a id=\"documentation\"></a>\n\n## documentation\n\nall services type annotations can be found in\n[boto3 docs](https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/)\n\n<a id=\"support-and-contributing\"></a>\n\n## support and contributing\n\nthis package is auto-generated. please reports any bugs or request new features\nin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)\nrepository.\n",
  "docs_url": null,
  "keywords": "boto3 nimble type-annotations botocore mypy typeshed autocomplete",
  "license": "mit license",
  "name": "mypy-boto3-nimble",
  "package_url": "https://pypi.org/project/mypy-boto3-nimble/",
  "project_url": "https://pypi.org/project/mypy-boto3-nimble/",
  "project_urls": {
    "Documentation": "https://youtype.github.io/boto3_stubs_docs/mypy_boto3_nimble/",
    "Homepage": "https://github.com/youtype/mypy_boto3_builder",
    "Source": "https://github.com/youtype/mypy_boto3_builder",
    "Tracker": "https://github.com/youtype/mypy_boto3_builder/issues"
  },
  "release_url": "https://pypi.org/project/mypy-boto3-nimble/1.34.0/",
  "requires_dist": [
    "typing-extensions >=4.1.0 ; python_version < \"3.12\""
  ],
  "requires_python": ">=3.7",
  "summary": "type annotations for boto3.nimblestudio 1.34.0 service generated with mypy-boto3-builder 7.21.0",
  "version": "1.34.0",
  "releases": [],
  "developers": [
    "vlad.emelianov.nz@gmail.com",
    "vlad_emelianov"
  ],
  "kwds": "mypy_boto3_nimble mypy_boto3_builder boto3typed boto3_stubs_docs boto3",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_mypy_boto3_nimble",
  "homepage": "https://github.com/youtype/mypy_boto3_builder",
  "release_count": 188,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
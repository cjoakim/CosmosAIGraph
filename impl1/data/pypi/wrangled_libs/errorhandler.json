{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5"
  ],
  "description": "|travis|_ |coveralls|_ |docs|_ |pypi|_\n\n.. |travis| image:: https://api.travis-ci.org/simplistix/errorhandler.svg?branch=master\n.. _travis: https://travis-ci.org/simplistix/errorhandler\n\n.. |coveralls| image:: https://coveralls.io/repos/simplistix/errorhandler/badge.svg?branch=master\n.. _coveralls: https://coveralls.io/r/simplistix/errorhandler?branch=master\n\n.. |docs| image:: https://readthedocs.org/projects/errorhandler/badge/?version=latest\n.. _docs: http://errorhandler.readthedocs.org/en/latest/\n\n.. |pypi| image:: https://badge.fury.io/py/errorhandler.svg\n.. _pypi: https://badge.fury.io/py/errorhandler\n\nerrorhandler\n============\n\nthis is a handler for the python standard logging framework that can\nbe used to tell whether messages have been logged at or above a\ncertain level.\n\nthis can be useful when wanting to ensure that no errors have been\nlogged before committing data back to a database.\n\nas an example, first, you set up the error handler:\n\n>>> from errorhandler import errorhandler\n>>> e = errorhandler()\n\nthen you can log and check the handler at any point to see if it has\nbeen triggered:\n\n>>> e.fired\nfalse\n>>> from logging import getlogger\n>>> logger = getlogger()\n>>> logger.error('an error')\n>>> e.fired\ntrue\n\nyou can use the `fired` attribute to only perform actions when no\nerrors have been logged:\n\n>>> if e.fired:\n...   print \"not updating files as errors have occurred\"\nnot updating files as errors have occurred\n\ninstallation\n============\n\ndo the following in your virtualenv::\n\n  pip install errorhandler\n\ndocumentation\n=============\n\nthe latest documentation can also be found at:\nhttp://errorhandler.readthedocs.org/en/latest/\n\nlicensing\n=========\n\ncopyright (c) 2008-2015 simplistix ltd, 2016 chris withers.\nsee docs/license.txt for details.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "errorhandler",
  "package_url": "https://pypi.org/project/errorhandler/",
  "project_url": "https://pypi.org/project/errorhandler/",
  "project_urls": {
    "Homepage": "https://github.com/Simplistix/errorhandler"
  },
  "release_url": "https://pypi.org/project/errorhandler/2.0.1/",
  "requires_dist": [
    "pkginfo; extra == 'build'",
    "setuptools-git; extra == 'build'",
    "sphinx; extra == 'build'",
    "twine; extra == 'build'",
    "wheel; extra == 'build'",
    "coveralls; extra == 'test'",
    "nose; extra == 'test'",
    "nose-cov; extra == 'test'",
    "nose-fixes; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "a logging framework handler that tracks when messages above a certain level have been logged.",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "chris@simplistix.co.uk",
    "chris_withers"
  ],
  "kwds": "travis _travis _coveralls errorhandler simplistix",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_errorhandler",
  "homepage": "https://github.com/simplistix/errorhandler",
  "release_count": 5,
  "dependency_ids": [
    "pypi_coveralls",
    "pypi_nose",
    "pypi_nose_cov",
    "pypi_nose_fixes",
    "pypi_pkginfo",
    "pypi_setuptools_git",
    "pypi_sphinx",
    "pypi_twine",
    "pypi_wheel"
  ]
}
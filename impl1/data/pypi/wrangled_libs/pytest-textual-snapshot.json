{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "# pytest-textual-snapshot\n\nsnapshot testing for textual apps.\n\n## installation\n\ninstall using `pip`:\n\n```\npip install pytest-textual-snapshot\n```\n\nafter installing, the `snap_compare` fixture will automatically be made available.\n\n## about\n\na `pytest-textual-snapshot` test saves an svg screenshot of a running textual app to disk. \nthe next time the test runs, it takes another screenshot and compares it to the saved one.\nif the new screenshot differs from the old one, the test fails.\nthis is a convenient way to quickly and automatically detect visual regressions in your applications.\n\n## usage\n\n### running tests\n\nyou can run your tests using `pytest` as normal.\n\n#### my snapshot test failed, what do i do?\n\nif your snapshot test fails, it means that the screenshot taken during the test session\ndiffers from the last screenshot taken.\nthis change is shown in the failure report, which you'll be given a linked to in the event of a failure.\n\nif the diff shown in the failure report looks correct, you can update the snapshot on disk\nby running `pytest` with the `--snapshot-update` flag.\n\n### writing tests\n\n#### basic usage\n\ninject the `snap_compare` fixture into your test and call\nit with the path to the textual app (the file containing the `app` subclass).\n\n```python\ndef test_something(snap_compare):\n    assert snap_compare(\"path/to/app.py\")\n``` \n\n#### pressing keys\n\nkey presses can be simulated before the screenshot is taken.\n\n```python\ndef test_something(snap_compare):\n    assert snap_compare(\"path/to/app.py\", press=[\"tab\", \"left\", \"a\"])\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-textual-snapshot",
  "package_url": "https://pypi.org/project/pytest-textual-snapshot/",
  "project_url": "https://pypi.org/project/pytest-textual-snapshot/",
  "project_urls": {
    "Homepage": "https://github.com/darrenburns/pytest-textual-snapshot"
  },
  "release_url": "https://pypi.org/project/pytest-textual-snapshot/0.4.0/",
  "requires_dist": [
    "pytest (>=7.0.0)",
    "rich (>=12.0.0)",
    "textual (>=0.28.0)",
    "syrupy (>=3.0.0)",
    "jinja2 (>=3.0.0)"
  ],
  "requires_python": ">=3.6,<4.0",
  "summary": "snapshot testing for textual apps",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "darren@textualize.io",
    "darren_burns"
  ],
  "kwds": "pytest snapshot snap_compare tests testing",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_textual_snapshot",
  "homepage": "https://github.com/darrenburns/pytest-textual-snapshot",
  "release_count": 4,
  "dependency_ids": [
    "pypi_jinja2",
    "pypi_pytest",
    "pypi_rich",
    "pypi_syrupy",
    "pypi_textual"
  ]
}
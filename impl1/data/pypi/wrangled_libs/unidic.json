{
  "classifiers": [
    "license :: osi approved :: mit license",
    "natural language :: japanese"
  ],
  "description": "# unidic-py\n\nthis is a version of [unidic](https://unidic.ninjal.ac.jp/) packaged for use\nwith pip. \n\ncurrently it supports 2.3.0, the latest version of unidic. **note this will\ntake up 1gb on disk after install.** if you want a small package, try\n[unidic-lite](https://github.com/polm/unidic-lite).\n\nthe data for this dictionary is hosted as part of the aws open data\nsponsorship program. you can read the announcement\n[here](https://aws.amazon.com/jp/blogs/news/published-unidic-mecab-on-aws-open-data/).\n\nafter installing via pip, you need to download the dictionary using the\nfollowing command:\n\n    python -m unidic download\n\nwith [fugashi](https://github.com/polm/fugashi) or\n[mecab-python3](https://github.com/samurait/mecab-python3) unidic will be used\nautomatically when installed, though if you want you can manually pass the\nmecab arguments:\n\n    import fugashi\n    import unidic\n    tagger = fugashi.tagger('-d \"{}\"'.format(unidic.dicdir))\n    # that's it!\n\n## differences from the official unidic release\n\nthis has a few changes from the official unidic release to make it easier to use.\n\n- entries for \u4ee4\u548c have been added\n- single-character numeric and alphabetic words have been deleted\n- `unk.def` has been modified so unknown punctuation won't be marked as a noun\n\nsee the `extras` directory for details on how to replicate the build process.\n\n## fields\n\nhere is a list of fields included in this edition of unidic. for more information see the [unidic faq](https://unidic.ninjal.ac.jp/faq#col_name), though not all fields are included. for fields in the unidic faq the name given there is included.\n\nfields which are not applicable are usually marked with an asterisk (`*`).\n\n- **pos1, pos2, pos3, pos4**: part of speech fields. the earlier fields are more general, the later fields are more specific.\n- **ctype:** \u6d3b\u7528\u578b, conjugation type. will have a value like `\u4e94\u6bb5-\u30e9\u884c`. \n- **cform:** \u6d3b\u7528\u5f62, conjugation shape. will have a value like `\u9023\u7528\u5f62-\u4fc3\u97f3\u4fbf`.\n- **lform:** \u8a9e\u5f59\u7d20\u8aad\u307f, lemma reading. the reading of the lemma in katakana, this uses the same format as the `kana` field, not `pron`.\n- **lemma:** \u8a9e\u5f59\u7d20\uff08\uff0b\u8a9e\u5f59\u7d20\u7d30\u5206\u985e\uff09. the lemma is a non-inflected \"dictionary form\" of a word. unidic lemmas sometimes include extra info or have unusual forms, like using katakana for some place names. \n- **orth:** \u66f8\u5b57\u5f62\u51fa\u73fe\u5f62, the word as it appears in text, this appears to be identical to the surface.\n- **pron:** \u767a\u97f3\u5f62\u51fa\u73fe\u5f62, pronunciation. this is similar to kana except that long vowels are indicated with a \u30fc, so \u8b1b\u5e2b is \u3053\u30fc\u3057. \n- **orthbase:** \u66f8\u5b57\u5f62\u57fa\u672c\u5f62, the uninflected form of the word using its current written form. for example, for \u5f77\u5fa8\u3063\u305f the lemma is \u3055\u8ff7\u3046 but the orthbase is \u5f77\u5fa8\u3046. \n- **pronbase:** \u767a\u97f3\u5f62\u57fa\u672c\u5f62, the pronunciation of the base form. like `pron` for the `lemma` or `orthbase`.\n- **goshu:** \u8a9e\u7a2e, word type. etymological category. in order of frequency, \u548c, \u56fa, \u6f22, \u5916, \u6df7, \u8a18\u53f7, \u4e0d\u660e. defined for all dictionary words, blank for unks.\n- **itype:** \u8a9e\u982d\u5909\u5316\u5316\u578b, \"i\" is for \"initial\". this is the type of initial transformation the word undergoes when combining, for example \u5175 is \u3078\u534a\u6fc1 because it can be read as \u3079\u3044 in combination. this is available for <2% of entries.\n- **iform:** \u8a9e\u982d\u5909\u5316\u5f62, this is the initial form of the word in context, such as \u57fa\u672c\u5f62 or \u534a\u6fc1\u97f3\u5f62. \n- **ftype:** \u8a9e\u672b\u5909\u5316\u5316\u578b, \"f\" is for \"final\", but otherwise as itype. for example \u533b\u5b66 is \u30af\u4fc3 because it can change to \u3044\u304c\u3063 (apparently). this is available for <0.1% of entries.\n- **fform:** \u8a9e\u672b\u5909\u5316\u5f62, as iform but for final transformations.\n- **icontype:** \u8a9e\u982d\u5909\u5316\u7d50\u5408\u578b, initial change fusion type. describes phonetic change at the start of the word in counting expressions. only available for a few hundred entries, mostly numbers. values are n followed by a letter or number; most entries with this value are numeric.\n- **fcontype:** \u8a9e\u672b\u5909\u5316\u7d50\u5408\u578b, final change fusion type. this is also used for counting expressions, and like icontype it is only available for a few hundred entries. unlike icontype the values are very complicated, like `b1s6sjshs,b1s6s8sjshs`. \n- **type:** not entirely clear what this is, seems to have some overlap with pos. \n- **kana:** \u8aad\u307f\u304c\u306a, this is the typical representation of a word in kana, unlike pron. \u8b1b\u5e2b is \u3053\u3046\u3057.\n- **kanabase:** \u4eee\u540d\u5f62\u57fa\u672c\u5f62, this is the typical kana representation of the lemma.\n- **form:** \u8a9e\u5f62\u51fa\u73fe\u5f62, seems to be the same as `pron`.\n- **formbase:** \u8a9e\u5f62\u57fa\u672c\u5f62 seems to be the same as `pronbase`.\n- **atype:** accent type. this is a (potentially) comma-separated field which has the number of the mora taking the accent in \u6a19\u6e96\u8a9e (standard language). when there are multiple values, more common accent patterns come first.\n- **acontype:** this describes how the accent shifts when the word is used in a counter expression. it uses complicated notation.\n- **amodtype:** presumably accent related but unclear use. available for <25% of entries and only has 6 non-default values.\n- **lid:** \u8a9e\u5f59\u8868id. a long lemma id. this seems to be a kind of guid. there is usually one entry per line in the csv, except that half-width and full-width variations can be combined.\n- **lemma_id:** \u8a9e\u5f59\u7d20id. a shorter lemma id, starting from 1. this seems to be as unique as the `lemma` field, so many csv lines can share this value.\n\n# license\n\nthe modern japanese unidic is available under the gpl, lgpl, or bsd license,\n[see here](https://unidic.ninjal.ac.jp/download#unidic_bccwj). unidic is\ndeveloped by [ninjal](https://www.ninjal.ac.jp/), the national institute for\njapanese language and linguistics. unidic is copyrighted by the unidic\nconsortium and is distributed here under the terms of the [bsd\nlicense](./license.unidic).\n\nthe code in this repository is not written or maintained by ninjal. the code is\navailable under the mit or wtfpl license, as you prefer.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "unidic",
  "package_url": "https://pypi.org/project/unidic/",
  "project_url": "https://pypi.org/project/unidic/",
  "project_urls": {
    "Homepage": "https://github.com/polm/unidic-py"
  },
  "release_url": "https://pypi.org/project/unidic/1.1.0/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "unidic packaged for python",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "paul_o",
    "polm@dampfkraft.com"
  ],
  "kwds": "unidic pip unidic_bccwj dictionary python3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_unidic",
  "homepage": "https://github.com/polm/unidic-py",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "--------------------------------------------------------------------------\npathos: parallel graph management and execution in heterogeneous computing\n--------------------------------------------------------------------------\n\nabout the pathos framework\n==========================\n\n``pathos`` is a framework for heterogeneous computing. it provides a consistent\nhigh-level interface for configuring and launching parallel computations\nacross heterogeneous resources. ``pathos`` provides configurable launchers for\nparallel and distributed computing, where each launcher contains the\nsyntactic logic to configure and launch jobs in an execution environment.\nexamples of launchers that plug into ``pathos`` are: a queue-less mpi-based\nlauncher (in ``pyina``), a ssh-based launcher (in ``pathos``), and a multi-process\nlauncher (in ``multiprocess``).\n\n``pathos`` provides a consistent interface for parallel and/or distributed\nversions of ``map`` and ``apply`` for each launcher, thus lowering the barrier\nfor users to extend their code to parallel and/or distributed resources.\nthe guiding design principle behind ``pathos`` is that ``map`` and ``apply``\nshould be drop-in replacements in otherwise serial code, and thus switching\nto one or more of the ``pathos`` launchers is all that is needed to enable\ncode to leverage the selected parallel or distributed computing resource.\nthis not only greatly reduces the time to convert a code to parallel, but it\nalso enables a single code-base to be maintained instead of requiring\nparallel, serial, and distributed versions of a code. ``pathos`` maps can be\nnested, thus hierarchical heterogeneous computing is possible by merely\nselecting the desired hierarchy of ``map`` and ``pipe`` (``apply``) objects.\n\nthe ``pathos`` framework is composed of several interoperating packages:\n\n    - ``dill``: serialize all of python\n    - ``pox``: utilities for filesystem exploration and automated builds\n    - ``klepto``: persistent caching to memory, disk, or database\n    - ``multiprocess``: better multiprocessing and multithreading in python\n    - ``ppft``: distributed and parallel python\n    - ``pyina``: mpi parallel ``map`` and cluster scheduling\n    - ``pathos``: graph management and execution in heterogeneous computing\n\n\nabout pathos\n============\n\nthe ``pathos`` package provides a few basic tools to make parallel and\ndistributed computing more accessible to the end user. the goal of ``pathos``\nis to enable the user to extend their own code to parallel and distributed\ncomputing with minimal refactoring.\n\n``pathos`` provides methods for configuring, launching, monitoring, and\ncontrolling a service on a remote host. one of the most basic features\nof ``pathos`` is the ability to configure and launch a rpc-based service\non a remote host. ``pathos`` seeds the remote host with the  ``portpicker``\nscript, which allows the remote host to inform the localhost of a port\nthat is available for communication.\n\nbeyond the ability to establish a rpc service, and then post requests,\nis the ability to launch code in parallel. unlike parallel computing\nperformed at the node level (typically with mpi), ``pathos`` enables the\nuser to launch jobs in parallel across heterogeneous distributed resources.\n``pathos`` provides distributed ``map`` and ``pipe`` algorithms, where a mix of\nlocal processors and distributed workers can be selected.  ``pathos``\nalso provides a very basic automated load balancing service, as well as\nthe ability for the user to directly select the resources.\n\nthe high-level ``pool.map`` interface, yields a ``map`` implementation that\nhides the rpc internals from the user. with ``pool.map``, the user can launch\ntheir code in parallel, and as a distributed service, using standard python\nand without writing a line of server or parallel batch code.\n\nrpc servers and communication in general is known to be insecure.  however,\ninstead of attempting to make the rpc communication itself secure, ``pathos``\nprovides the ability to automatically wrap any distributes service or\ncommunication in a ssh-tunnel. ssh is a universally trusted method.\nusing ssh-tunnels, ``pathos`` has launched several distributed calculations\non national lab clusters, and to date has performed test calculations\nthat utilize node-to-node communication between several national lab clusters\nand a user's laptop.  ``pathos`` allows the user to configure and launch\nat a very atomistic level, through raw access to ssh and scp. \n\n``pathos`` is the core of a python framework for heterogeneous computing.\n``pathos`` is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  a list of issues is located at https://github.com/uqfoundation/pathos/issues, with a legacy list maintained at https://uqfoundation.github.io/project/pathos/query.\n\n\nmajor features\n==============\n\n``pathos`` provides a configurable distributed parallel ``map`` interface\nto launching rpc service calls, with:\n\n    - a ``map`` interface that meets and extends the python ``map`` standard\n    - the ability to submit service requests to a selection of servers\n    - the ability to tunnel server communications with ssh\n\nthe ``pathos`` core is built on low-level communication to remote hosts using\nssh. the interface to ssh, scp, and ssh-tunneled connections can:\n\n    - configure and launch remote processes with ssh\n    - configure and copy file objects with scp\n    - establish an tear-down a ssh-tunnel\n\nto get up and running quickly, ``pathos`` also provides infrastructure to:\n\n    - easily establish a ssh-tunneled connection to a rpc server\n\n\ncurrent release\n===============\n\nthe latest released version of ``pathos`` is available from:\n\n    https://pypi.org/project/pathos\n\n``pathos`` is distributed under a 3-clause bsd license.\n\n\ndevelopment version\n===================\n\nyou can get the latest development version with all the shiny new features at:\n\n    https://github.com/uqfoundation\n\nif you have a new contribution, please submit a pull request.\n\n\ninstallation\n============\n\n``pathos`` can be installed with ``pip``::\n\n    $ pip install pathos\n\n\nrequirements\n============\n\n``pathos`` requires:\n\n    - ``python`` (or ``pypy``), **>=3.7**\n    - ``setuptools``, **>=42**\n    - ``pox``, **>=0.3.3**\n    - ``dill``, **>=0.3.7**\n    - ``ppft``, **>=1.7.6.7**\n    - ``multiprocess``, **>=0.70.15**\n\n\nmore information\n================\n\nprobably the best way to get started is to look at the documentation at\nhttp://pathos.rtfd.io. also see ``pathos.tests`` and https://github.com/uqfoundation/pathos/tree/master/examples for a set of scripts that demonstrate the\nconfiguration and launching of communications with ssh and scp, and demonstrate\nthe configuration and execution of jobs in a hierarchical parallel workflow.\nyou can run the test suite with ``python -m pathos.tests``. tunnels and other\nconnections to remote servers can be established with the ``pathos_connect``\nscript (or with ``python -m pathos``). see ``pathos_connect --help`` for more\ninformation.  ``pathos`` also provides a ``portpicker`` script to select an\nopen port (also available with ``python -m pathos.portpicker``). the source\ncode is generally well documented, so further questions may be resolved by\ninspecting the code itself.  please feel free to submit a ticket on github,\nor ask a question on stackoverflow (**@mike mckerns**). if you would like to\nshare how you use ``pathos`` in your work, please send an email (to **mmckerns\nat uqfoundation dot org**).\n\nimportant classes and functions are found here:\n\n    - ``pathos.abstract_launcher``           [the worker pool api definition]\n    - ``pathos.pools``                       [all of the pathos worker pools]\n    - ``pathos.core``                        [the high-level command interface] \n    - ``pathos.hosts``                       [the hostname registry interface] \n    - ``pathos.serial.serialpool``           [the serial python worker pool]\n    - ``pathos.parallel.parallelpool``       [the parallelpython worker pool]\n    - ``pathos.multiprocessing.processpool`` [the multiprocessing worker pool]\n    - ``pathos.threading.threadpool``        [the multithreading worker pool]\n    - ``pathos.connection.pipe``             [the launcher base class]\n    - ``pathos.secure.pipe``                 [the secure launcher base class]\n    - ``pathos.secure.copier``               [the secure copier  base class]\n    - ``pathos.secure.tunnel``               [the secure tunnel base class]\n    - ``pathos.selector.selector``           [the selector base class]\n    - ``pathos.server.server``               [the server base class]\n    - ``pathos.profile``                     [profiling in threads and processes]\n    - ``pathos.maps``                        [standalone map instances]\n\n``pathos`` also provides two convenience scripts that are used to establish\nsecure distributed connections. these scripts are installed to a directory\non the user's ``$path``, and thus can be run from anywhere:\n\n    - ``portpicker``                         [get the portnumber of an open port]\n    - ``pathos_connect``                     [establish tunnel and/or rpc server]\n\ntyping ``--help`` as an argument to any of the above scripts will print out an\ninstructive help message.\n\n\ncitation\n========\n\nif you use ``pathos`` to do research that leads to publication, we ask that you\nacknowledge use of ``pathos`` by citing the following in your publication::\n\n    m.m. mckerns, l. strand, t. sullivan, a. fang, m.a.g. aivazis,\n    \"building a framework for predictive science\", proceedings of\n    the 10th python in science conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    michael mckerns and michael aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    https://uqfoundation.github.io/project/pathos\n\nplease see https://uqfoundation.github.io/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "pathos",
  "package_url": "https://pypi.org/project/pathos/",
  "project_url": "https://pypi.org/project/pathos/",
  "project_urls": {
    "Bug Tracker": "https://github.com/uqfoundation/pathos/issues",
    "Documentation": "http://pathos.rtfd.io",
    "Download": "https://pypi.org/project/pathos/#files",
    "Homepage": "https://github.com/uqfoundation/pathos",
    "Source Code": "https://github.com/uqfoundation/pathos"
  },
  "release_url": "https://pypi.org/project/pathos/0.3.1/",
  "requires_dist": [
    "ppft (>=1.7.6.7)",
    "dill (>=0.3.7)",
    "pox (>=0.3.3)",
    "multiprocess (>=0.70.15)"
  ],
  "requires_python": ">=3.7",
  "summary": "parallel graph management and execution in heterogeneous computing",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "mike_mckerns",
    "mmckerns@uqfoundation.org"
  ],
  "kwds": "pathos multiprocess multiprocessing parallelpython pathos_connect",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_pathos",
  "homepage": "https://github.com/uqfoundation/pathos",
  "release_count": 14,
  "dependency_ids": [
    "pypi_dill",
    "pypi_multiprocess",
    "pypi_pox",
    "pypi_ppft"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<p align='center'>\n<img src='images/logo.png'>\n<p align=\"center\">\u27a1\ufe0f <a href=\"http://discord.skerritt.blog\">discord</a> \u2b05\ufe0f<br>\n<i>the easiest way to identify anything</i><br>\n<code>pip3 install pywhat && pywhat --help</code>\n</p>\n\n<p align=\"center\">\n  <a href=\"http://discord.skerritt.blog\"><img alt=\"discord\" src=\"https://img.shields.io/discord/754001738184392704\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"pypi - downloads\" src=\"https://pepy.tech/badge/pywhat/month\"></a>  <a href=\"https://twitter.com/bee_sec_san\"><img alt=\"twitter follow\" src=\"https://img.shields.io/twitter/follow/bee_sec_san?style=social\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"pypi - python version\" src=\"https://img.shields.io/pypi/pyversions/pywhat\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/pywhat\"></a>\n</p>\n<hr>\n\n# \ud83e\udd14 `what` is this?\n\n![](images/main_demo.gif)\n\nimagine this: you come across some mysterious text \ud83e\uddd9\u200d\u2642\ufe0f `0x52908400098527886e0f7030069857d2e4169ee7` or `dqw4w9wgxcq` and you wonder what it is. what do you do?\n\nwell, with `what` all you have to do is ask `what \"0x52908400098527886e0f7030069857d2e4169ee7\"` and `what` will tell you!\n\n`what`'s job is to **identify _what_ something is.** whether it be a file or text! or even the hex of a file! what about text _within_ files? we have that too! `what` is recursive, it will identify **everything** in text and more!\n\n# installation\n\n## \ud83d\udd28 using pip\n\n```$ pip3 install pywhat```\n\nor\n\n```shell\n# installs optional dependencies that may improve the speed\n$ pip3 install pywhat[optimize] \n```\n\n## \ud83d\udd28 on mac?\n\n```$ brew install pywhat```\n\nor for our macports fans:\n\n```$ sudo port install pywhat```\n\n# \u2699 use cases\n\n## \ud83e\udda0 wannacry\n\n![](images/wannacry_demo.png)\n\nyou come across a new piece of malware called wanttocry. you think back to wannacry and remember it was stopped because a researcher found a kill-switch in the code.\n\nwhen a domain, hardcoded into wannacry, was registered the virus would stop.\n\nyou use `what` to identify all the domains in the malware, and use a domain registrar api to register all the domains.\n\n## \ud83e\udd88 faster analysis of pcap files\n\n![](images/pcap_demo.gif)\n\nsay you have a `.pcap` file from a network attack. `what` can identify this and quickly find you:\n\n- all urls\n- emails\n- phone numbers\n- credit card numbers\n- cryptocurrency addresses\n- social security numbers\n- and much more.\n\nwith `what`, you can identify the important things in the pcap in seconds, not minutes.\n\n## \ud83d\udc1e bug bounties\n\nyou can use pywhat to scan for things that'll make you money via bug bounties like:\n* api keys\n* webhooks\n* credentials\n* and more\n\nrun pywhat with:\n\n```\npywhat --include \"bug bounty\" text\n```\n\nto do this.\n\nhere are some examples \ud83d\udc47\n\n### \ud83d\udc19 github repository api key leaks\n\n1. download all github repositories of an organisation\n2. search for anything that you can submit as a bounty, like api keys\n\n```shell\n# download all repositories\nghuser=changeme; curl \"https://api.github.com/users/$ghuser/repos?per_page=1000\" | grep -o 'git@[^\"]*' | xargs -l1 git clone\n\n# will print when it finds things.\n# loops over all files in current directory.\nfind . -type f -execdir pywhat --include 'bug bounty' {} \\;\n```\n\n### \ud83d\udd77 scan all web pages for bounties\n\n```shell\n# recursively download all web pages of a site\nwget -r -np -k https://skerritt.blog\n\n# will print when it finds things.\n# loops over all files in current directory.\nfind . -type f -execdir pywhat --include 'bug bounty' {} \\;\n```\n\n**ps**: we support more filters than just bug bounties! run `pywhat --tags`\n\n## \ud83c\udf0c other features\n\nanytime you have a file and you want to find structured data in it that's useful, `what` is for you.\n\nor if you come across some piece of text and you don't know what it is, `what` will tell you.\n\n### \ud83d\udcc1 file & directory handling\n\n**file opening** you can pass in a file path by `what 'this/is/a/file/path'`. `what` is smart enough to figure out it's a file!\n\nwhat about a whole **directory**? `what` can handle that too! it will **recursively** search for files and output everything you need!\n\n### \ud83d\udd0d filtering your output\n\nsometimes, you only care about seeing things which are related to aws. or bug bounties, or cryptocurrencies!\n\nyou can filter output by using `what --rarity 0.2:0.8 --include identifiers,url https://skerritt.blog`. use `what --help` to get more information.\n\nto see all filters, run `pywhat --tags`! you can also combine them, for example to see all cryptocurrency wallets minus ripple you can do:\n\n```console\npywhat --include \"cryptocurrency wallet\" --exclude \"ripple wallet\" 1kfhe7w8bhaenaswwryaoccdb6qct6dbyy\n```\n\n### \ud83d\udc7d sorting, exporting, and more!\n\n**sorting** you can sort the output by using `what -k rarity --reverse text`. use `what --help` to get more information.\n\n**exporting** you can export to json using `what --json` and results can be sent directly to a file using `what --json > file.json`.\n\n**boundaryless mode** `what` has a special mode to match identifiable information within strings. by default, it is enabled in cli but disabled in api. use `what --help` or refer to [api documentation](https://github.com/bee-san/pywhat/wiki/api) for more information.\n\n\n# \ud83c\udf55 api\n\npywhat has an api! click here [https://github.com/bee-san/pywhat/wiki/api](https://github.com/bee-san/pywhat/wiki/api) to read about it.\n\n# \ud83d\udc7e contributing\n\n`what` not only thrives on contributors, but can't exist without them! if you want to add a new regex to check for things, you can read our documentation [here](https://github.com/bee-san/what/wiki/adding-your-own-regex)\n\nwe ask contributors to join the discord for quicker discussions, but it's not needed:\n<a href=\"http://discord.skerritt.blog\"><img alt=\"discord\" src=\"https://img.shields.io/discord/754001738184392704\"></a>\n\n# \ud83d\ude4f thanks\n\nwe would like to thank [dora](https://github.com/sdushantha/dora) for their work on a bug bounty specific regex database which we have used.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pywhat",
  "package_url": "https://pypi.org/project/pywhat/",
  "project_url": "https://pypi.org/project/pywhat/",
  "project_urls": {
    "Documentation": "https://github.com/bee-san/pyWhat/wiki"
  },
  "release_url": "https://pypi.org/project/pywhat/5.1.0/",
  "requires_dist": [
    "click (>=7.1.2,<8.0.0)",
    "rich (>=9.9,<11.0)",
    "orjson (>=3.6.1,<4.0.0); extra == \"optimize\""
  ],
  "requires_python": ">=3.6,<4.0",
  "summary": "what is that thing?",
  "version": "5.1.0",
  "releases": [],
  "developers": [
    "bee",
    "github@skerritt.blog"
  ],
  "kwds": "pip3 pip pyversions pypi pepy",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pywhat",
  "homepage": "",
  "release_count": 50,
  "dependency_ids": [
    "pypi_click",
    "pypi_orjson",
    "pypi_rich"
  ]
}
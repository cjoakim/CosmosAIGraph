{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<p align=\"center\">\n  <img src=\"https://github.com/biopragmatics/bioregistry/raw/main/docs/source/logo.png\" height=\"150\">\n</p>\n\n<h1 align=\"center\">\n    bioregistry\n</h1>\n\n<p align=\"center\">\n    <a href=\"https://github.com/biopragmatics/bioregistry/actions?query=workflow%3atests\">\n        <img alt=\"tests\" src=\"https://github.com/biopragmatics/bioregistry/workflows/tests/badge.svg\" />\n    </a>\n    <a href=\"https://pypi.org/project/bioregistry\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/bioregistry\" />\n    </a>\n    <a href=\"https://pypi.org/project/bioregistry\">\n        <img alt=\"pypi - python version\" src=\"https://img.shields.io/pypi/pyversions/bioregistry\" />\n    </a>\n    <a href=\"https://github.com/biopragmatics/bioregistry/blob/main/license\">\n        <img alt=\"pypi - license\" src=\"https://img.shields.io/pypi/l/bioregistry\" />\n    </a>\n    <a href='https://bioregistry.readthedocs.io/en/latest/?badge=latest'>\n        <img src='https://readthedocs.org/projects/bioregistry/badge/?version=latest' alt='documentation status' />\n    </a>\n    <a href=\"https://zenodo.org/badge/latestdoi/319481281\">\n        <img src=\"https://zenodo.org/badge/319481281.svg\" alt=\"doi\">\n    </a>\n    <a href=\"https://github.com/psf/black\">\n        <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"code style: black\">\n    </a>\n    <a href=\"https://github.com/biopragmatics/bioregistry/blob/main/.github/code_of_conduct.md\">\n        <img alt=\"contributor covenant\" src=\"https://img.shields.io/badge/contributor%20covenant-2.1-4baaaa.svg\" />\n    </a>\n</p>\n\n<p align=\"center\">\n   a community-driven integrative meta-registry of life science databases, ontologies, and other resources.\n   <br />more information <a href=\"https://bioregistry.io/summary\">here</a>.\n</p>\n\nthe bioregistry can be accessed, searched, and queried through its associated website at\nhttps://bioregistry.io.\n\n### \ud83d\udce5 download\n\nthe underlying data of the bioregistry can be downloaded (or edited) directly\nfrom [here](https://github.com/biopragmatics/bioregistry/blob/main/src/bioregistry/data/).\nseveral exports to yaml, tsv, and rdf, including consensus views over the\nregistry, are built on a nightly basis and can be downloaded via the\n[`exports/`](https://github.com/biopragmatics/bioregistry/tree/main/exports) directory.\n\nthe manually curated portions of these data are available under the\n[cc0 1.0 universal license](https://creativecommons.org/publicdomain/zero/1.0/).\naggregated data are redistributed under their original licenses.\n\n## \ud83d\ude4f contributing\n\ncontributions are both welcomed and encouraged. contribution guidelines for new\nprefix requests, record edits, record removals, and code updates are available\nin [contributing.md](docs/contributing.md).\n\nthe most simple contribution is to submit an issue:\n\n- submit a new prefix using the [issue template](https://github.com/biopragmatics/bioregistry/issues/new?assignees=cthoyt&labels=new%2cprefix&template=new-prefix.yml&title=add+prefix+%5bx%5d). a new pull request will be generated automatically for you.\n- update an existing record using one of the [existing issue templates](https://github.com/biopragmatics/bioregistry/issues/new/choose) (e.g., for updating a record's regular expression, merging two prefixes).\n- for any updates that don't have a corresponding template, feel free to start with a [blank issue](https://github.com/biopragmatics/bioregistry/issues/new).\n\nif you want to make a direct contribution, feel free to make edits directly to\nthe [bioregistry.json](https://github.com/biopragmatics/bioregistry/blob/main/src/bioregistry/data/bioregistry.json)\nfile either through the github interface or locally by [forking the repository](https://github.com/biopragmatics/bioregistry/blob/main/docs/contributing.md#code-contribution).\n\nif you want to make a contribution but don't know where to start, you can check\n[this list](https://biopragmatics.github.io/bioregistry/curation/) of curation\nto-do's that's automatically generated daily, including more detailed\ninformation on how to contribute.\n\n## \u2696\ufe0f governance\n\nthe bioregistry is maintained by a review team and core development team\nwhose memberships and duties are described in the\n[project governance](docs/governance.md).\n\n## \ud83e\uddf9 maintenance\n\n### \ud83e\udec0 health report\n\nthe bioregistry runs some automated tests weekly to check that various metadata haven't gone stale. for example,\nit checks that the homepages are still available and that each provider url is still able to resolve.\n\nit has a dedicated [dashboard](https://biopragmatics.github.io/bioregistry/health) that is not part of the main\nbioregistry site.\n\n### \u267b\ufe0f update\n\nthe database is automatically updated daily thanks to scheduled workflows in github actions. the workflow's\nconfiguration can be found [here](https://github.com/biopragmatics/bioregistry/blob/main/.github/workflows/update.yml)\nand the last run can be seen [here](https://github.com/biopragmatics/bioregistry/actions?query=workflow%3a%22update+data%22).\nfurther, a [changelog](https://github.com/biopragmatics/bioregistry/commits?author=actions-user) can be recapitulated from the\ncommits of the github actions bot.\n\nif you want to manually update the database, run the following:\n\n```shell\n$ tox -e update\n```\n\nmake sure that you have valid environment variables or `pystow` configurations\nfor `bioportal_api_key`, `ecoportal_api_key`, `agroportal_api_key`,\n`fairsharing_login`, and `fairsharing_password`.\n\n## \ud83d\ude80 installation\n\nthe bioregistry can be installed from [pypi](https://pypi.org/project/bioregistry/) with:\n\n```shell\n$ pip install bioregistry\n```\n\nit can be installed in development mode for local curation with:\n\n```shell\n$ git clone https://github.com/biopragmatics/bioregistry.git\n$ cd bioregistry\n$ pip install --editable .\n```\n\nbuild the docs locally with `tox -e docs` then view by opening\n`docs/build/html/index.html`.\n\n## \ud83d\udcaa usage\n\n### normalizing prefixes\n\nthe bioregistry can be used to normalize prefixes across miriam and all the (very plentiful) variants that pop up in\nontologies in obo foundry and the ols with the `normalize_prefix()` function.\n\n```python\nfrom bioregistry import normalize_prefix\n\n# doesn't affect canonical prefixes\nassert 'ncbitaxon' == normalize_prefix('ncbitaxon')\n\n# this works for uppercased prefixes, like:\nassert 'chebi' == normalize_prefix(\"chebi\")\n\n# this works for mixed case prefixes like\nassert 'fbbt' == normalize_prefix(\"fbbt\")\n\n# this works for synonym prefixes, like:\nassert 'ncbitaxon' == normalize_prefix('taxonomy')\n\n# this works for common mistaken prefixes, like:\nassert 'pubchem.compound' == normalize_prefix('pubchem')\n\n# this works for prefixes that are often written many ways, like:\nassert 'eccode' == normalize_prefix('ec-code')\nassert 'eccode' == normalize_prefix('ec_code')\n\n# if a prefix is not registered, it gives back `none`\nassert normalize_prefix('not a real key') is none\n```\n\n### parsing curies\n\nthe bioregistry supports parsing a curie into a pair of normalized prefix\nand identifier using the `parse_curie()` function:\n\n```python\nfrom bioregistry import parse_curie\n\n# obvious for canonical curies\nassert ('chebi', '1234') == parse_curie('chebi:1234')\n\n# normalize mixed case prefixes\nassert ('fbbt', '00007294') == parse_curie('fbbt:00007294')\n\n# normalize common mistaken prefixes\nassert ('pubchem.compound', '1234') == parse_curie('pubchem:1234')\n\n# remove the redundant prefix and normalize\nassert ('go', '1234') == parse_curie('go:go:1234')\n```\n\nthis will also apply the same normalization rules for prefixes from the previous\nsection on normalizing prefixes for the remaining examples.\n\n### normalizing curies\n\nthe bioregistry supports converting a curie to a canonical curie by normalizing\nthe prefix and removing redundant namespaces embedded in luis with the\n`normalize_curie()` function.\n\n```python\nfrom bioregistry import normalize_curie\n\n# idempotent to canonical curies\nassert 'chebi:1234' == normalize_curie('chebi:1234')\n\n# normalize common mistaken prefixes\nassert 'pubchem.compound:1234' == normalize_curie('pubchem:1234')\n\n# normalize mixed case prefixes\nassert 'fbbt:1234' == normalize_curie('fbbt:1234')\n\n# remove the redundant prefix and normalize\nassert 'go:1234' == normalize_curie('go:go:1234')\n```\n\n### parsing iris\n\nthe bioregistry can be used to parse curies from iris due to its vast registry of provider url\nstrings and additional programmatic logic implemented with python. it can parse obo library purls,\niris from the ols and identifiers.org, iris from the bioregistry website, and any other iris\nfrom well-formed providers registered in the bioregistry. the `parse_iri()` function\ngets a pre-parsed curie, while the `curie_from_iri()` function makes a canonical curie\nfrom the pre-parsed curie.\n\n```python\nfrom bioregistry import curie_from_iri, parse_iri\n\n# first-party iri\nassert ('chebi', '24867') == parse_iri('https://www.ebi.ac.uk/chebi/searchid.do?chebiid=chebi:24867')\nassert 'chebi:24867' == curie_from_iri('https://www.ebi.ac.uk/chebi/searchid.do?chebiid=chebi:24867')\n\n# obo library purl\nassert ('chebi', '24867') == parse_iri('http://purl.obolibrary.org/obo/chebi_24867')\nassert 'chebi:24867' == curie_from_iri('http://purl.obolibrary.org/obo/chebi_24867')\n\n# ols iri\nassert ('chebi', '24867') == parse_iri('https://www.ebi.ac.uk/ols/ontologies/chebi/terms?iri=http://purl.obolibrary.org/obo/chebi_24867')\nassert 'chebi:24867' == curie_from_iri('https://www.ebi.ac.uk/ols/ontologies/chebi/terms?iri=http://purl.obolibrary.org/obo/chebi_24867')\n\n# identifiers.org iris (with varying usage of http(s) and colon/slash separator\nassert ('chebi', '24867') == parse_iri('https://identifiers.org/chebi:24867')\nassert ('chebi', '24867') == parse_iri('http://identifiers.org/chebi:24867')\nassert ('chebi', '24867') == parse_iri('https://identifiers.org/chebi/24867')\nassert ('chebi', '24867') == parse_iri('http://identifiers.org/chebi/24867')\n\n# bioregistry iri\nassert ('chebi', '24867') == parse_iri('https://bioregistry.io/chebi:24867')\n```\n\nin general, the bioregistry knows how to parse both the http and https variants\nof any given uri:\n\n```python\nfrom bioregistry import parse_iri\n\nassert ('neuronames', '268') == parse_iri(\"http://braininfo.rprc.washington.edu/centraldirectory.aspx?id=268\")\nassert ('neuronames', '268') == parse_iri(\"https://braininfo.rprc.washington.edu/centraldirectory.aspx?id=268\")\n```\n\n### generating iris\n\nyou can generate an iri from either a curie or a pre-parsed curie\n(i.e., a 2-tuple of a prefix and identifier) with the `get_iri()` function.\nby default, it uses the following priorities:\n\n1. custom prefix map (`custom`)\n2. first-party iri (`default`)\n3. identifiers.org / miriam (`miriam`)\n4. ontology lookup service (`ols`)\n5. obo purl (`obofoundry`)\n6. name-to-thing (`n2t`)\n7. bioportal (`bioportal`)\n\n```python\nfrom bioregistry import get_iri\n\nassert get_iri(\"chebi\", \"24867\") == 'https://www.ebi.ac.uk/chebi/searchid.do?chebiid=chebi:24867'\nassert get_iri(\"chebi:24867\") == 'https://www.ebi.ac.uk/chebi/searchid.do?chebiid=chebi:24867'\n```\n\nit's possible to change the default priority list by passing an alternate\nsequence of metaprefixes to the `priority` keyword (see above). for example, if\nyou're working with obo ontologies, you might want to make obo purls the highest\npriority and when obo purls can't be generated, default to something else:\n\n```python\nfrom bioregistry import get_iri\n\npriority = [\"obofoundry\", \"default\", \"miriam\", \"ols\", \"n2t\", \"bioportal\"]\nassert get_iri(\"chebi:24867\", priority=priority) == 'http://purl.obolibrary.org/obo/chebi_24867'\nassert get_iri(\"hgnc:1234\", priority=priority) == 'https://bioregistry.io/hgnc:1234' \n```\n\neven deeper, you can add (or override) any of the bioregistry's default prefix\nmap with the `prefix_map` keyword:\n\n```python\nfrom bioregistry import get_iri\n\nprefix_map = {\n   \"myprefix\": \"https://example.org/myprefix/\",\n   \"chebi\": \"https://example.org/chebi/\",\n}\nassert get_iri(\"chebi:24867\", prefix_map=prefix_map) == 'https://example.org/chebi/24867'\nassert get_iri(\"myprefix:1234\", prefix_map=prefix_map) == 'https://example.org/myprefix/1234'\n```\n\na custom prefix map can be supplied in combination with a priority list, using\nthe `\"custom\"` key for changing the priority of the custom prefix map.\n\n```python\nfrom bioregistry import get_iri\n\nprefix_map = {\"lipidmaps\": \"https://example.org/lipidmaps/\"}\npriority = [\"obofoundry\", \"custom\", \"default\", \"bioregistry\"]\nassert get_iri(\"chebi:24867\", prefix_map=prefix_map, priority=priority) == \\\n    'http://purl.obolibrary.org/obo/chebi_24867'\nassert get_iri(\"lipidmaps:1234\", prefix_map=prefix_map, priority=priority) == \\\n    'https://example.org/lipidmaps/1234'\n```\n\nalternatively, there are direct functions for generating iris for different\nregistries:\n\n```python\nimport bioregistry as br\n\n# bioregistry iri\nassert br.get_bioregistry_iri('chebi', '24867') == 'https://bioregistry.io/chebi:24867'\n\n# default provider\nassert br.get_default_iri('chebi', '24867') == 'https://www.ebi.ac.uk/chebi/searchid.do?chebiid=chebi:24867'\n\n# obo library\nassert br.get_obofoundry_iri('chebi', '24867') == 'http://purl.obolibrary.org/obo/chebi_24867'\n\n# ols iri\nassert br.get_ols_iri('chebi', '24867') ==\n       'https://www.ebi.ac.uk/ols/ontologies/chebi/terms?iri=http://purl.obolibrary.org/obo/chebi_24867'\n\n# bioportal iri\nassert br.get_bioportal_iri('chebi', '24867') == \\\n    'https://bioportal.bioontology.org/ontologies/chebi/?p=classes&conceptid=http://purl.obolibrary.org/obo/chebi_24867'\n\n# identifiers.org iri\nassert br.get_identifiers_org_iri('chebi', '24867') == 'https://identifiers.org/chebi:24867'\n\n# name-to-thing iri\nassert br.get_n2t_iri('chebi', '24867') == 'https://n2t.net/chebi:24867'\n```\n\neach of these functions could also return `none` if there isn't a provider available or if the prefix\ncan't be mapped to the various resources.\n\n### prefix map\n\nthe bioregistry can be used to generate prefix maps with various flavors\ndepending on your context. prioritization works the same way as when generating\niris.\n\n```python\nfrom bioregistry import get_prefix_map\n\n# standard\nprefix_map = get_prefix_map()\n\n# prioritize obo prefixes over bioregistry\npriority = [\"obofoundry\", \"default\", \"miriam\", \"ols\", \"n2t\", \"bioportal\"]\nprefix_map = get_prefix_map(uri_prefix_priority=priority)\n\n# provide custom remapping that doesn't have prioritization logic\nremapping = {\"chebi\": \"chebi\"}\nprefix_map = get_prefix_map(remapping=remapping)\n```\n\n### getting metadata\n\nthe pattern for an entry in the bioregistry can be looked up quickly with `get_pattern()` if\nit exists. it prefers the custom curated, then miriam, then wikidata pattern.\n\n```python\nimport bioregistry\n\nassert '^go:\\\\d{7}$' == bioregistry.get_pattern('go')\n```\n\nentries in the bioregistry can be checked for deprecation with the `is_deprecated()` function. miriam and obo foundry\ndon't often agree - obo foundry takes precedence since it seems to be updated more often.\n\n```python\nimport bioregistry\n\nassert bioregistry.is_deprecated('nmr')\nassert not bioregistry.is_deprecated('efo')\n```\n\nentries in the bioregistry can be looked up with the `get_resource()` function.\n\n```python\nimport bioregistry\n\nentry = bioregistry.get_resource('taxonomy')\n# there are lots of mysteries to discover in this dictionary!\n```\n\nthe full bioregistry can be read in a python project using:\n\n```python\nimport bioregistry\n\nregistry = bioregistry.read_registry()\n```\n\n### \ud83d\udd78\ufe0f resolver app\n\nafter installation with the `[web]` extras, the bioregistry web application\ncan be run with the following code:\n\n```shell\n$ python -m pip install bioregistry[web]\n$ bioregistry web\n```\n\nto run a web app that functions like identifiers.org, but backed by the bioregistry.\na public instance of this app is hosted by the [gyori lab for computational biomedicine](https://gyorilab.github.io) at\nhttps://bioregistry.io.\n\n## \ud83d\udc4b attribution\n\n### \u2696\ufe0f license\n\nthe code in this repository is licensed under the\n[mit license](https://github.com/biopragmatics/bioregistry/blob/main/license).\n\n### \ud83d\udcdb badge\n\nif you use the bioregistry in your code, support us by including our\nbadge in your project's readme.md:\n\n```markdown\n[![powered by the bioregistry](https://img.shields.io/static/v1?label=powered%20by&message=bioregistry&color=ba274a&style=flat&logo=image/png;base64,ivborw0kggoaaaansuheugaaacgaaaaocayaaacm/rhtaaaacxbiwxmaaaenaaabjwgnvpdmaaaagxrfwhrtb2z0d2fyzqb3d3cuaw5rc2nhcguub3jnm+48ggaaci9jrefuwiwtmxl41muzxz/z291sstmqo9mqg0iswhbtooswgpuqhapwgufeowkigki81actypaqfbwpvkgffku0vgs+ygvheaoqeuesrndleehcbklyjtlkk9399y/n/rkbzqxt96+zed+z9/t7z+adeecnua1s5yfvsgrloaf2qtieeyluzkiafydke7koblkqsc4xgkpfxxz/owmt41ztivtr3j94eqxqq5adeasivkvb12rbtt0mb5xzsvfa/5xgnqtmci3eq7iqjwm+7jjjo8yvnhk/qdbuol8a7jzwwqqu01jeg6pd1nw4nubjjax6ewrrruv/m8edqtmflmxeb0jcbb6rirhmtcj0ymgc0wyjadtd9nw0twmu+in63nnu7c3fwtvgjpxrzvlakvgu8/ltecwzgju3mii/aba72vwtb5k45aei7x2puel9fzshzludmgphuljpj82lle6itsh6mpxp+fnt/sa4yzhbp22yfwfkgnmaby17kphfmqh1997qlxztnkq35xb505fintf0iz1wvftq7pxdlj4jdnjuny5yvpehjhh7fqogd/yyzi4ows86hj+qqmdpjabf3juxlhd21+8q0y4ldppv/vfno7+jzv3pa6soac0e8i8fsponpm7javr+erhzwu/ofj+e49tpt/hdtgxcylvqj8hatctgfmjcf2dwfptmz4nszx/uqqdyr+xpyvwoek+c03pgrdx4gkj7nbj+txh/hcgait7crlnxoy62dmzmzgwzjvzjuh2gi/xnrmoohsfe3aqq/kho0qxs+plzlh3fgwdt54ykxlsaqq0mbf1zhutsltzejemhjsrlgggdpgtxc09zdm5qti59jzbkog+zb1qyi95+xokeqogpdifpdnpjfq8uckl8fygmacqtn4dhxp3kinx7jnhi0zejnt8dla8plbu+48zzfyj08kh8ggiacb4zliahsurm3enml6eb6fzep1a+sut5ds2vddts+4gqccprhgv1kowiqrachhmxapxkiev/vl+8r/hgnqtmmi4gjh/iqoixzsqdzqulxdb9rpyi+1drdvx67wmursvckderxyxb0rosiokecurmg+tbzkxahbybzk6tenplkwmpzuix71wumiw+mhx2nejqrwifhsde4pihlfdislzxye1hhiwfttlk+rsu30rvnlxgvroapocw9dsw3vh6cgks4zxixlz3fw8dsammcfecv9xhybc/dsczmekgfojzy0teo17pvl7janbaboauwujlti4vow+t9sazbkyl0zb/qv/kalthqri3vojb0lpzw0vpmonotohoqrcyi7bzkeqanjo3hogbmgrourziagundgsosqsyupn6upx2nvelzxiybhinn3ulyx9uvwaw7xbqjxdqmr2x0uy93dh+dtlu9zcu9vdj1psvewwcii7owjaxfnorfcovhoxjrmr0goqwo9qbfaorxodohq0o1x8ron3csmyc6zt942uqbill53jl804sv6oy9/fxagg4wcjfdzuxlfv7gnpfrzfs7vkcriv7ejjrta/edr1rfkxzoqcoceytghqayudd4b2d4cf8pohg4zc0yufu7z5c9jy7svvbkptsh6gt0tcgbtfwspbtz/zrixyapbskk8te5+az4l4jduvqwpiscmqhjgocujjcrhctiesjurqtf89ftttpuvalpaya8knp1b3oq5zlag/nu//9cmscs6enonrauwjaziqv3kcovd3quups+uaxhu7z1spatpeqchsa78awd0wvnxa1xkdjurlcjrgqhmfn/euejk9jyr4nrn47hltjc58gm0sratjz/w3l5blukkzjdfzt1f5+3sq3nzjrdnajax1orb2bx2wemka9fvggbvw7q+oluu+2wliqdx+h3dzkjvprda5iqj93p+drqcq/phsaw8xj6afhdkhuivvoeribll/jxkov4gi34t8omgnb1yok7sdta01aik3j6yoggp+gapwhodop6lltlxb3mnyxali8da9/e0pjbzovv2brakyzqk/i3bg0ssiicqclqs/0wapb6uovo6k3+cdeetwm1aptp+dllljpskahoydwcovllytkkakccu4vo7irherfslvlpxz+v0hadcn+v8xjb9strdqfpavua0ckefrxwnuwvns6rbrkqb44r+lmc5f7tragafqyyzb9dv/4gd18asq8/gsc0zwjnjvcw97aewmocdtaaw6elxzlbchtc8ehwxbw6o+cinhmipetuu9ouvtwnnwnodzx+krlvaqigjmecv+spyh/ak3f5qdok+oopxicip2hijiwtuh6rqx6eh7bxlt0sth4xubsul6df/xaiqao9bbvn3takuuy/zawyzimpvx4fyjvrgqzoec9r1vk0tmrldmiidko45zxegxllrrw13p0/heqhq4cuhiyvfelnihotwaztnj4qzqbqffklg3omz135rny624clb0thjcomta5zmgnanbabmoohpmy5hvzebnulcoj71frxin0i9pdjzj24isilutco7ni3/kyqg5arfmleeykbzma6r1ho8ev+dseyseb2g3yrpwzp1c2f+n1gjb07rilcwnoki7j3g839ehqf2cg6fmhmbznprkevj/goriedv1wtlvzjesrv9wqqtoihrfwjresjwgar1zrui3ho7pfwhbgb3jrg6s1rogeoiunjgbipkv/zsf31irorn4hxau9b1zduhtlecelqxzz9xttrgc342df8iwqyayqbmkewo0xaw1bi4d4dnjswcff32frwnud5nwpedz5lie8nduhq1v+ha2xgdkho4szyjg1hbj501eh6ogj5ois8hf/owpm5hqnre51vdt4nc/7k+9biit8gya2ipixn5jwjqrrzsju0xt5gubtrfiebqfpisuvorzppi0vdeq9ycj63bwmxbzphtk7xhkva/drljkfau+bcy2n+fa3vzk0wvoxny4idokifn+io7ltz7zrobwcjdmv7vnhruov9dws9f8u4csas1k1j54wys4o6arwaas8hvlp998yuztnisl7wurolkdjskzqqtfl45fjb8gzwznijy6ds8jjs3p8ausvhg3txn26mytzo5w8rcjsbg1qze/x45elhy9i7whlxg26+cgsl8zfkdgh3zdkf2s7nep9pzhzmnk3fegwuwowrjr6ztdel529enrhf3lmfchebkbzinrwiawzkwi9a5qzh9d6dnvxyw3jzkej9udooypwdy/gxgdiufuguc2c4hy3kwxrohmeblqea6jv6glc8y0kr613hn+2phzak69jqah1p/hdsckllifgtnbg+f3eyfhtehth38mzom2sy4wqwqje9tnbe+xizkuqnrqcch9wswrdmggsjitnpatwtjofmikcgvpvx/knicm1gsgc8itzfii3ael+7fyg+c+6o8izl1ge5gaaaabjru5erkjggg==)](https://github.com/biopragmatics/bioregistry)\n```\n\nif your readme uses restructuredtext (.rst), use this instead:\n\n```\n.. image:: https://img.shields.io/static/v1?label=powered%20by&message=bioregistry&color=ba274a&style=flat&logo=image/png;base64,ivborw0kggoaaaansuheugaaacgaaaaocayaaacm/rhtaaaacxbiwxmaaaenaaabjwgnvpdmaaaagxrfwhrtb2z0d2fyzqb3d3cuaw5rc2nhcguub3jnm+48ggaaci9jrefuwiwtmxl41muzxz/z291sstmqo9mqg0iswhbtooswgpuqhapwgufeowkigki81actypaqfbwpvkgffku0vgs+ygvheaoqeuesrndleehcbklyjtlkk9399y/n/rkbzqxt96+zed+z9/t7z+adeecnua1s5yfvsgrloaf2qtieeyluzkiafydke7koblkqsc4xgkpfxxz/owmt41ztivtr3j94eqxqq5adeasivkvb12rbtt0mb5xzsvfa/5xgnqtmci3eq7iqjwm+7jjjo8yvnhk/qdbuol8a7jzwwqqu01jeg6pd1nw4nubjjax6ewrrruv/m8edqtmflmxeb0jcbb6rirhmtcj0ymgc0wyjadtd9nw0twmu+in63nnu7c3fwtvgjpxrzvlakvgu8/ltecwzgju3mii/aba72vwtb5k45aei7x2puel9fzshzludmgphuljpj82lle6itsh6mpxp+fnt/sa4yzhbp22yfwfkgnmaby17kphfmqh1997qlxztnkq35xb505fintf0iz1wvftq7pxdlj4jdnjuny5yvpehjhh7fqogd/yyzi4ows86hj+qqmdpjabf3juxlhd21+8q0y4ldppv/vfno7+jzv3pa6soac0e8i8fsponpm7javr+erhzwu/ofj+e49tpt/hdtgxcylvqj8hatctgfmjcf2dwfptmz4nszx/uqqdyr+xpyvwoek+c03pgrdx4gkj7nbj+txh/hcgait7crlnxoy62dmzmzgwzjvzjuh2gi/xnrmoohsfe3aqq/kho0qxs+plzlh3fgwdt54ykxlsaqq0mbf1zhutsltzejemhjsrlgggdpgtxc09zdm5qti59jzbkog+zb1qyi95+xokeqogpdifpdnpjfq8uckl8fygmacqtn4dhxp3kinx7jnhi0zejnt8dla8plbu+48zzfyj08kh8ggiacb4zliahsurm3enml6eb6fzep1a+sut5ds2vddts+4gqccprhgv1kowiqrachhmxapxkiev/vl+8r/hgnqtmmi4gjh/iqoixzsqdzqulxdb9rpyi+1drdvx67wmursvckderxyxb0rosiokecurmg+tbzkxahbybzk6tenplkwmpzuix71wumiw+mhx2nejqrwifhsde4pihlfdislzxye1hhiwfttlk+rsu30rvnlxgvroapocw9dsw3vh6cgks4zxixlz3fw8dsammcfecv9xhybc/dsczmekgfojzy0teo17pvl7janbaboauwujlti4vow+t9sazbkyl0zb/qv/kalthqri3vojb0lpzw0vpmonotohoqrcyi7bzkeqanjo3hogbmgrourziagundgsosqsyupn6upx2nvelzxiybhinn3ulyx9uvwaw7xbqjxdqmr2x0uy93dh+dtlu9zcu9vdj1psvewwcii7owjaxfnorfcovhoxjrmr0goqwo9qbfaorxodohq0o1x8ron3csmyc6zt942uqbill53jl804sv6oy9/fxagg4wcjfdzuxlfv7gnpfrzfs7vkcriv7ejjrta/edr1rfkxzoqcoceytghqayudd4b2d4cf8pohg4zc0yufu7z5c9jy7svvbkptsh6gt0tcgbtfwspbtz/zrixyapbskk8te5+az4l4jduvqwpiscmqhjgocujjcrhctiesjurqtf89ftttpuvalpaya8knp1b3oq5zlag/nu//9cmscs6enonrauwjaziqv3kcovd3quups+uaxhu7z1spatpeqchsa78awd0wvnxa1xkdjurlcjrgqhmfn/euejk9jyr4nrn47hltjc58gm0sratjz/w3l5blukkzjdfzt1f5+3sq3nzjrdnajax1orb2bx2wemka9fvggbvw7q+oluu+2wliqdx+h3dzkjvprda5iqj93p+drqcq/phsaw8xj6afhdkhuivvoeribll/jxkov4gi34t8omgnb1yok7sdta01aik3j6yoggp+gapwhodop6lltlxb3mnyxali8da9/e0pjbzovv2brakyzqk/i3bg0ssiicqclqs/0wapb6uovo6k3+cdeetwm1aptp+dllljpskahoydwcovllytkkakccu4vo7irherfslvlpxz+v0hadcn+v8xjb9strdqfpavua0ckefrxwnuwvns6rbrkqb44r+lmc5f7tragafqyyzb9dv/4gd18asq8/gsc0zwjnjvcw97aewmocdtaaw6elxzlbchtc8ehwxbw6o+cinhmipetuu9ouvtwnnwnodzx+krlvaqigjmecv+spyh/ak3f5qdok+oopxicip2hijiwtuh6rqx6eh7bxlt0sth4xubsul6df/xaiqao9bbvn3takuuy/zawyzimpvx4fyjvrgqzoec9r1vk0tmrldmiidko45zxegxllrrw13p0/heqhq4cuhiyvfelnihotwaztnj4qzqbqffklg3omz135rny624clb0thjcomta5zmgnanbabmoohpmy5hvzebnulcoj71frxin0i9pdjzj24isilutco7ni3/kyqg5arfmleeykbzma6r1ho8ev+dseyseb2g3yrpwzp1c2f+n1gjb07rilcwnoki7j3g839ehqf2cg6fmhmbznprkevj/goriedv1wtlvzjesrv9wqqtoihrfwjresjwgar1zrui3ho7pfwhbgb3jrg6s1rogeoiunjgbipkv/zsf31irorn4hxau9b1zduhtlecelqxzz9xttrgc342df8iwqyayqbmkewo0xaw1bi4d4dnjswcff32frwnud5nwpedz5lie8nduhq1v+ha2xgdkho4szyjg1hbj501eh6ogj5ois8hf/owpm5hqnre51vdt4nc/7k+9biit8gya2ipixn5jwjqrrzsju0xt5gubtrfiebqfpisuvorzppi0vdeq9ycj63bwmxbzphtk7xhkva/drljkfau+bcy2n+fa3vzk0wvoxny4idokifn+io7ltz7zrobwcjdmv7vnhruov9dws9f8u4csas1k1j54wys4o6arwaas8hvlp998yuztnisl7wurolkdjskzqqtfl45fjb8gzwznijy6ds8jjs3p8ausvhg3txn26mytzo5w8rcjsbg1qze/x45elhy9i7whlxg26+cgsl8zfkdgh3zdkf2s7nep9pzhzmnk3fegwuwowrjr6ztdel529enrhf3lmfchebkbzinrwiawzkwi9a5qzh9d6dnvxyw3jzkej9udooypwdy/gxgdiufuguc2c4hy3kwxrohmeblqea6jv6glc8y0kr613hn+2phzak69jqah1p/hdsckllifgtnbg+f3eyfhtehth38mzom2sy4wqwqje9tnbe+xizkuqnrqcch9wswrdmggsjitnpatwtjofmikcgvpvx/knicm1gsgc8itzfii3ael+7fyg+c+6o8izl1ge5gaaaabjru5erkjggg==\n    :target: https://github.com/biopragmatics/bioregistry\n    :alt: powered by the bioregistry\n```\n\nit looks like this: [![powered by the bioregistry](https://img.shields.io/static/v1?label=powered%20by&message=bioregistry&color=ba274a&style=flat&logo=image/png;base64,ivborw0kggoaaaansuheugaaacgaaaaocayaaacm/rhtaaaacxbiwxmaaaenaaabjwgnvpdmaaaagxrfwhrtb2z0d2fyzqb3d3cuaw5rc2nhcguub3jnm+48ggaaci9jrefuwiwtmxl41muzxz/z291sstmqo9mqg0iswhbtooswgpuqhapwgufeowkigki81actypaqfbwpvkgffku0vgs+ygvheaoqeuesrndleehcbklyjtlkk9399y/n/rkbzqxt96+zed+z9/t7z+adeecnua1s5yfvsgrloaf2qtieeyluzkiafydke7koblkqsc4xgkpfxxz/owmt41ztivtr3j94eqxqq5adeasivkvb12rbtt0mb5xzsvfa/5xgnqtmci3eq7iqjwm+7jjjo8yvnhk/qdbuol8a7jzwwqqu01jeg6pd1nw4nubjjax6ewrrruv/m8edqtmflmxeb0jcbb6rirhmtcj0ymgc0wyjadtd9nw0twmu+in63nnu7c3fwtvgjpxrzvlakvgu8/ltecwzgju3mii/aba72vwtb5k45aei7x2puel9fzshzludmgphuljpj82lle6itsh6mpxp+fnt/sa4yzhbp22yfwfkgnmaby17kphfmqh1997qlxztnkq35xb505fintf0iz1wvftq7pxdlj4jdnjuny5yvpehjhh7fqogd/yyzi4ows86hj+qqmdpjabf3juxlhd21+8q0y4ldppv/vfno7+jzv3pa6soac0e8i8fsponpm7javr+erhzwu/ofj+e49tpt/hdtgxcylvqj8hatctgfmjcf2dwfptmz4nszx/uqqdyr+xpyvwoek+c03pgrdx4gkj7nbj+txh/hcgait7crlnxoy62dmzmzgwzjvzjuh2gi/xnrmoohsfe3aqq/kho0qxs+plzlh3fgwdt54ykxlsaqq0mbf1zhutsltzejemhjsrlgggdpgtxc09zdm5qti59jzbkog+zb1qyi95+xokeqogpdifpdnpjfq8uckl8fygmacqtn4dhxp3kinx7jnhi0zejnt8dla8plbu+48zzfyj08kh8ggiacb4zliahsurm3enml6eb6fzep1a+sut5ds2vddts+4gqccprhgv1kowiqrachhmxapxkiev/vl+8r/hgnqtmmi4gjh/iqoixzsqdzqulxdb9rpyi+1drdvx67wmursvckderxyxb0rosiokecurmg+tbzkxahbybzk6tenplkwmpzuix71wumiw+mhx2nejqrwifhsde4pihlfdislzxye1hhiwfttlk+rsu30rvnlxgvroapocw9dsw3vh6cgks4zxixlz3fw8dsammcfecv9xhybc/dsczmekgfojzy0teo17pvl7janbaboauwujlti4vow+t9sazbkyl0zb/qv/kalthqri3vojb0lpzw0vpmonotohoqrcyi7bzkeqanjo3hogbmgrourziagundgsosqsyupn6upx2nvelzxiybhinn3ulyx9uvwaw7xbqjxdqmr2x0uy93dh+dtlu9zcu9vdj1psvewwcii7owjaxfnorfcovhoxjrmr0goqwo9qbfaorxodohq0o1x8ron3csmyc6zt942uqbill53jl804sv6oy9/fxagg4wcjfdzuxlfv7gnpfrzfs7vkcriv7ejjrta/edr1rfkxzoqcoceytghqayudd4b2d4cf8pohg4zc0yufu7z5c9jy7svvbkptsh6gt0tcgbtfwspbtz/zrixyapbskk8te5+az4l4jduvqwpiscmqhjgocujjcrhctiesjurqtf89ftttpuvalpaya8knp1b3oq5zlag/nu//9cmscs6enonrauwjaziqv3kcovd3quups+uaxhu7z1spatpeqchsa78awd0wvnxa1xkdjurlcjrgqhmfn/euejk9jyr4nrn47hltjc58gm0sratjz/w3l5blukkzjdfzt1f5+3sq3nzjrdnajax1orb2bx2wemka9fvggbvw7q+oluu+2wliqdx+h3dzkjvprda5iqj93p+drqcq/phsaw8xj6afhdkhuivvoeribll/jxkov4gi34t8omgnb1yok7sdta01aik3j6yoggp+gapwhodop6lltlxb3mnyxali8da9/e0pjbzovv2brakyzqk/i3bg0ssiicqclqs/0wapb6uovo6k3+cdeetwm1aptp+dllljpskahoydwcovllytkkakccu4vo7irherfslvlpxz+v0hadcn+v8xjb9strdqfpavua0ckefrxwnuwvns6rbrkqb44r+lmc5f7tragafqyyzb9dv/4gd18asq8/gsc0zwjnjvcw97aewmocdtaaw6elxzlbchtc8ehwxbw6o+cinhmipetuu9ouvtwnnwnodzx+krlvaqigjmecv+spyh/ak3f5qdok+oopxicip2hijiwtuh6rqx6eh7bxlt0sth4xubsul6df/xaiqao9bbvn3takuuy/zawyzimpvx4fyjvrgqzoec9r1vk0tmrldmiidko45zxegxllrrw13p0/heqhq4cuhiyvfelnihotwaztnj4qzqbqffklg3omz135rny624clb0thjcomta5zmgnanbabmoohpmy5hvzebnulcoj71frxin0i9pdjzj24isilutco7ni3/kyqg5arfmleeykbzma6r1ho8ev+dseyseb2g3yrpwzp1c2f+n1gjb07rilcwnoki7j3g839ehqf2cg6fmhmbznprkevj/goriedv1wtlvzjesrv9wqqtoihrfwjresjwgar1zrui3ho7pfwhbgb3jrg6s1rogeoiunjgbipkv/zsf31irorn4hxau9b1zduhtlecelqxzz9xttrgc342df8iwqyayqbmkewo0xaw1bi4d4dnjswcff32frwnud5nwpedz5lie8nduhq1v+ha2xgdkho4szyjg1hbj501eh6ogj5ois8hf/owpm5hqnre51vdt4nc/7k+9biit8gya2ipixn5jwjqrrzsju0xt5gubtrfiebqfpisuvorzppi0vdeq9ycj63bwmxbzphtk7xhkva/drljkfau+bcy2n+fa3vzk0wvoxny4idokifn+io7ltz7zrobwcjdmv7vnhruov9dws9f8u4csas1k1j54wys4o6arwaas8hvlp998yuztnisl7wurolkdjskzqqtfl45fjb8gzwznijy6ds8jjs3p8ausvhg3txn26mytzo5w8rcjsbg1qze/x45elhy9i7whlxg26+cgsl8zfkdgh3zdkf2s7nep9pzhzmnk3fegwuwowrjr6ztdel529enrhf3lmfchebkbzinrwiawzkwi9a5qzh9d6dnvxyw3jzkej9udooypwdy/gxgdiufuguc2c4hy3kwxrohmeblqea6jv6glc8y0kr613hn+2phzak69jqah1p/hdsckllifgtnbg+f3eyfhtehth38mzom2sy4wqwqje9tnbe+xizkuqnrqcch9wswrdmggsjitnpatwtjofmikcgvpvx/knicm1gsgc8itzfii3ael+7fyg+c+6o8izl1ge5gaaaabjru5erkjggg==)](https://github.com/biopragmatics/bioregistry)\n\n### \ud83d\udcd6 citation\n\n> [unifying the identification of biomedical entities with the bioregistry](https://bioregistry.io/doi:10.1038/s41597-022-01807-3)\n> <br />hoyt, c. t., balk, m., callahan, t. j., domingo-fernandez, d., haendel, m. a., hegde, h. b., himmelstein, d. s., karis, k., kunze, j., lubiana, t., matentzoglu, n., mcmurry, j., moxon, s., mungall, c. j., rutz, a., unni, d. r., willighagen, e., winston, d., and gyori, b. m. (2022)\n> <br />*nature scientific data*, s41597-022-01807-3\n\n```bibtex\n@article{hoyt2022bioregistry,\n    author = {hoyt, charles tapley and balk, meghan and callahan, tiffany j and domingo-fern{\\'{a}}ndez, daniel and haendel, melissa a and hegde, harshad b and himmelstein, daniel s and karis, klas and kunze, john and lubiana, tiago and matentzoglu, nicolas and mcmurry, julie and moxon, sierra and mungall, christopher j and rutz, adriano and unni, deepak r and willighagen, egon and winston, donald and gyori, benjamin m},\n    doi = {10.1038/s41597-022-01807-3},\n    issn = {2052-4463},\n    journal = {sci. data},\n    number = {1},\n    pages = {714},\n    title = {{unifying the identification of biomedical entities with the bioregistry}},\n    url = {https://doi.org/10.1038/s41597-022-01807-3},\n    volume = {9},\n    year = {2022}\n}\n```\n\ntalks on the bioregistry:\n\n- [future curation in the bioregistry](https://bit.ly/wpci2022-bioregistry-maintenance) (wpci, december 2022)\n- [the bioregistry - governance and review team](https://bit.ly/wpci2022-bioregistry-governance) (wpci, december 2022)\n- [development, maintenance, and expansion of the bioregistry](https://bit.ly/sorger-lab-bioregistry-2022)\n  (sorger lab meeting, october 2022)\n- [the bioregistry, curies, and obo community health](https://bit.ly/icbo2022-cth) (icbo 2022 (september))\n- [introduction to the bioregistry](https://bit.ly/bioregistry-short-talk) (sorger lab meeting, july 2021)\n\n### \ud83c\udf81 support\n\nthe bioregistry was primarily developed by the [gyori lab for computational biomedicine](https://gyorilab.github.io)\nat northeastern university, which was previously a part of the\n[laboratory of systems pharmacology](https://hits.harvard.edu/the-program/laboratory-of-systems-pharmacology/about/)\nin the [harvard program in therapeutic science (hits)](https://hits.harvard.edu)\nat [harvard medical school](https://hms.harvard.edu/).\n\n### \ud83d\udcb0 funding\n\n1. chan zuckerberg initiative (czi) 2023-329850\n2. darpa automating scientific knowledge extraction and modeling (askem) hr00112220036\n3. darpa young faculty award w911nf2010255 (pi: benjamin m. gyori).\n",
  "docs_url": null,
  "keywords": "databases,biological databases,biomedical databases",
  "license": "mit",
  "name": "bioregistry",
  "package_url": "https://pypi.org/project/bioregistry/",
  "project_url": "https://pypi.org/project/bioregistry/",
  "project_urls": {
    "Bug Tracker": "https://github.com/biopragmatics/bioregistry/issues",
    "Download": "https://github.com/biopragmatics/bioregistry/releases",
    "Homepage": "https://github.com/biopragmatics/bioregistry"
  },
  "release_url": "https://pypi.org/project/bioregistry/0.10.105/",
  "requires_dist": [
    "requests",
    "tqdm",
    "pystow >=0.1.13",
    "click",
    "more-click >=0.1.2",
    "pydantic",
    "curies >=0.7.0",
    "pyyaml ; extra == 'align'",
    "beautifulsoup4 ; extra == 'align'",
    "tabulate ; extra == 'align'",
    "defusedxml ; extra == 'align'",
    "class-resolver ; extra == 'align'",
    "fairsharing-client >=0.1.0 ; extra == 'align'",
    "matplotlib ; extra == 'charts'",
    "matplotlib-venn ; extra == 'charts'",
    "seaborn ; extra == 'charts'",
    "pandas ; extra == 'charts'",
    "jinja2 ; extra == 'charts'",
    "sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinx-click ; extra == 'docs'",
    "sphinx-automodapi ; extra == 'docs'",
    "autodoc-pydantic ; extra == 'docs'",
    "pyyaml ; extra == 'export'",
    "rdflib ; extra == 'export'",
    "rdflib-jsonld ; extra == 'export'",
    "ndex2 ; extra == 'export'",
    "more-itertools ; extra == 'gha'",
    "click-default-group ; extra == 'health'",
    "pandas ; extra == 'health'",
    "tabulate ; extra == 'health'",
    "pyyaml ; extra == 'health'",
    "jinja2 ; extra == 'health'",
    "coverage ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "more-itertools ; extra == 'tests'",
    "httpx ; extra == 'tests'",
    "pyyaml ; extra == 'web'",
    "rdflib ; extra == 'web'",
    "rdflib-jsonld ; extra == 'web'",
    "rdflib-endpoint ; extra == 'web'",
    "flask <2.2.4 ; extra == 'web'",
    "werkzeug <2.3.0 ; extra == 'web'",
    "fastapi ; extra == 'web'",
    "uvicorn ; extra == 'web'",
    "bootstrap-flask <=2.0.0 ; extra == 'web'",
    "markdown ; extra == 'web'",
    "curies[fastapi] ; extra == 'web'"
  ],
  "requires_python": ">=3.8",
  "summary": "integrated registry of biological databases and nomenclatures",
  "version": "0.10.105",
  "releases": [],
  "developers": [
    "charles_tapley_hoyt",
    "cthoyt@gmail.com"
  ],
  "kwds": "get_bioportal_iri get_bioregistry_iri bioportal_api_key bioregistry biopragmatics",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bioregistry",
  "homepage": "https://github.com/biopragmatics/bioregistry",
  "release_count": 680,
  "dependency_ids": [
    "pypi_autodoc_pydantic",
    "pypi_beautifulsoup4",
    "pypi_bootstrap_flask",
    "pypi_class_resolver",
    "pypi_click",
    "pypi_click_default_group",
    "pypi_coverage",
    "pypi_curies",
    "pypi_defusedxml",
    "pypi_fairsharing_client",
    "pypi_fastapi",
    "pypi_flask",
    "pypi_httpx",
    "pypi_jinja2",
    "pypi_markdown",
    "pypi_matplotlib",
    "pypi_matplotlib_venn",
    "pypi_more_click",
    "pypi_more_itertools",
    "pypi_ndex2",
    "pypi_pandas",
    "pypi_pydantic",
    "pypi_pystow",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_rdflib",
    "pypi_rdflib_endpoint",
    "pypi_rdflib_jsonld",
    "pypi_requests",
    "pypi_seaborn",
    "pypi_sphinx",
    "pypi_sphinx_automodapi",
    "pypi_sphinx_click",
    "pypi_sphinx_rtd_theme",
    "pypi_tabulate",
    "pypi_tqdm",
    "pypi_uvicorn",
    "pypi_werkzeug"
  ]
}
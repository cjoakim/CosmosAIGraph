{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "flask-graphql\n=============\n\n|build status| |coverage status| |pypi version|\n\nadds graphql support to your flask application.\n\nusage\n-----\n\njust use the ``graphqlview`` view from ``flask_graphql``\n\n.. code:: python\n\n    from flask_graphql import graphqlview\n\n    app.add_url_rule('/graphql', view_func=graphqlview.as_view('graphql', schema=schema, graphiql=true))\n\n    # optional, for adding batch query support (used in apollo-client)\n    app.add_url_rule('/graphql/batch', view_func=graphqlview.as_view('graphql', schema=schema, batch=true))\n\nthis will add ``/graphql`` and ``/graphiql`` endpoints to your app.\n\nsupported options\n~~~~~~~~~~~~~~~~~\n\n-  ``schema``: the ``graphqlschema`` object that you want the view to\n   execute when it gets a valid request.\n-  ``context``: a value to pass as the ``context`` to the ``graphql()``\n   function.\n-  ``root_value``: the ``root_value`` you want to provide to\n   ``executor.execute``.\n-  ``pretty``: whether or not you want the response to be pretty printed\n   json.\n-  ``executor``: the ``executor`` that you want to use to execute\n   queries.\n-  ``graphiql``: if ``true``, may present\n   `graphiql <https://github.com/graphql/graphiql>`__ when loaded\n   directly from a browser (a useful tool for debugging and\n   exploration).\n-  ``graphiql_template``: inject a jinja template string to customize\n   graphiql.\n-  ``batch``: set the graphql view as batch (for using in\n   `apollo-client <http://dev.apollodata.com/core/network.html#query-batching>`__\n   or\n   `reactrelaynetworklayer <https://github.com/nodkz/react-relay-network-layer>`__)\n\nyou can also subclass ``graphqlview`` and overwrite\n``get_root_value(self, request)`` to have a dynamic root value per\nrequest.\n\n.. code:: python\n\n    class userrootvalue(graphqlview):\n        def get_root_value(self, request):\n            return request.user\n\n.. |build status| image:: https://travis-ci.org/graphql-python/flask-graphql.svg?branch=master\n   :target: https://travis-ci.org/graphql-python/flask-graphql\n.. |coverage status| image:: https://coveralls.io/repos/graphql-python/flask-graphql/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/graphql-python/flask-graphql?branch=master\n.. |pypi version| image:: https://badge.fury.io/py/flask-graphql.svg\n   :target: https://badge.fury.io/py/flask-graphql",
  "docs_url": null,
  "keywords": "api graphql protocol rest flask",
  "license": "mit",
  "name": "flask-graphql",
  "package_url": "https://pypi.org/project/Flask-GraphQL/",
  "project_url": "https://pypi.org/project/Flask-GraphQL/",
  "project_urls": {
    "Download": "https://github.com/graphql-python/flask-graphql/releases",
    "Homepage": "https://github.com/graphql-python/flask-graphql"
  },
  "release_url": "https://pypi.org/project/Flask-GraphQL/2.0.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "adds graphql support to your flask application",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "flask_graphql graphqlview graphql graphqlschema graphiql_template",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flask_graphql",
  "homepage": "https://github.com/graphql-python/flask-graphql",
  "release_count": 9,
  "dependency_ids": []
}
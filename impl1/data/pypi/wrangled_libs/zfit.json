{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "|zfit_logo|\n\n*******************************\nzfit: scalable pythonic fitting\n*******************************\n\n.. image:: https://scikit-hep.org/assets/images/scikit--hep-affiliated-blue.svg\n   :target: https://scikit-hep.org\n\n.. image:: https://img.shields.io/pypi/v/zfit.svg\n   :target: https://pypi.python.org/pypi/zfit\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/zfit\n   :alt: conda-forge\n   :target: https://anaconda.org/conda-forge/zfit\n\n.. image:: https://github.com/zfit/zfit/workflows/ci/badge.svg\n   :target: https://github.com/zfit/zfit/actions\n\n.. image:: https://github.com/zfit/zfit/workflows/build/badge.svg\n   :target: https://github.com/zfit/zfit/actions\n\n.. image:: https://coveralls.io/repos/github/zfit/zfit/badge.svg?branch=meta_changes\n   :target: https://coveralls.io/github/zfit/zfit?branch=meta_changes\n\n.. image:: https://www.codefactor.io/repository/github/zfit/zfit/badge\n   :target: https://www.codefactor.io/repository/github/zfit/zfit\n   :alt: codefactor\n\n\n.. |zfit_logo| image:: docs/images/zfit-logo_hires.png\n   :target: https://github.com/zfit/zfit\n   :alt: zfit logo\n\n.. |scikit-hep_logo| image:: docs/images/scikit-hep-logo_168x168.png\n   :target: https://scikit-hep.org/affiliated\n   :alt: scikit-hep logo\n\nzfit is a highly scalable and customizable model manipulation and fitting library. it uses\n`tensorflow <https://www.tensorflow.org/>`_ as its computational backend\nand is optimised for simple and direct manipulation of probability density functions. the project is affiliated with\nand well integrated into `scikit-hep <https://scikit-hep.org/>`_, the hep python ecosystem.\n\n- **tutorials**: `interactive introduction and tutorials <https://zfit-tutorials.readthedocs.io/en/latest/>`_\n- **quick start**: `example scripts <examples>`_\n- **documentation**: see `stable documentation`_ or `latest documentation`_\n- **questions**: see the `faq <https://github.com/zfit/zfit/wiki/faq>`_,\n  `ask on stackoverflow <https://stackoverflow.com/questions/ask?tags=zfit>`_ (with the **zfit** tag) or `contact`_ us directly.\n- **physics, hep**: `zfit-physics <https://github.com/zfit/zfit-physics>`_ is the place to contribute and find more hep\n  related content\n- **statistical inference**: `hepstats <https://github.com/scikit-hep/hepstats>`_ for limits, ci, sweights and more\n\n\n\nif you use zfit in **research**, please\nconsider `citing <https://www.sciencedirect.com/science/article/pii/s2352711019303851>`_.\n\n*n.b.*: zfit is currently in *beta stage*, so while most core parts are established,\nsome may still be missing and bugs may be encountered.\nit is, however, mostly ready for production, and is being used in analyses projects.\nif you want to use it for your project and you are not sure if all the needed functionality is there,\nfeel free to `contact`_.\n\ninstallation\n=============\n\nzfit is available on pip. to install it (recommended: use a virtual/conda env!) with all the dependencies (minimizers, uproot, ...), use\n\n.. code-block:: bash\n\n   pip install -u zfit[all]\n   \n(the ``-u`` just indicates to upgrade zfit, in case you have it already installed)\nor for minimal dependencies\n\n.. code-block:: bash\n\n   pip install zfit\n\n\n\nwhy?\n====\n\nthe basic idea behind zfit is to offer a python oriented alternative to the very successful roofit library\nfrom the `root <https://root.cern.ch/>`_ data analysis package that can integrate with the other packages\nthat are part if the scientific python ecosystem.\ncontrary to the monolithic approach of root/roofit, the aim of zfit is to be light and flexible enough t\no integrate with any state-of-art tools and to allow scalability going to larger datasets.\n\nthese core ideas are supported by two basic pillars:\n\n- the skeleton and extension of the code is minimalist, simple and finite:\n  the zfit library is exclusively designed for the purpose of model fitting and sampling with no attempt to extend its\n  functionalities to features such as statistical methods or plotting.\n\n- zfit is designed for optimal parallelisation and scalability by making use of tensorflow as its backend.\n  the use of tensorflow provides crucial features in the context of model fitting like taking care of the\n  parallelisation and analytic derivatives.\n\n\n\nhow to use\n==========\n\nwhile the zfit library provides a model fitting and sampling framework for a broad list of applications,\nwe will illustrate its main features with a simple example by fitting a gaussian distribution with an unbinned\nlikelihood fit and a parameter uncertainty estimation.\n\n\nexample in short\n----------------\n.. code-block:: python\n\n    obs = zfit.space('x', limits=(-10, 10))\n\n    # create the model\n    mu    = zfit.parameter(\"mu\"   , 2.4, -1, 5)\n    sigma = zfit.parameter(\"sigma\", 1.3,  0, 5)\n    gauss = zfit.pdf.gauss(obs=obs, mu=mu, sigma=sigma)\n\n    # load the data\n    data_np = np.random.normal(size=10000)\n    data = zfit.data.from_numpy(obs=obs, array=data_np)\n\n    # build the loss\n    nll = zfit.loss.unbinnednll(model=gauss, data=data)\n\n    # minimize\n    minimizer = zfit.minimize.minuit()\n    result = minimizer.minimize(nll)\n\n    # calculate errors\n    param_errors = result.hesse()\n\nthis follows the zfit workflow\n\n.. image:: docs/images/zfit_workflow_v2.png\n    :alt: zfit workflow\n\n\n\n\nfull explanation\n----------------\n\nthe default space (e.g. normalization range) of a pdf is defined by an *observable space*, which is created using the ``zfit.space`` class:\n\n\n.. code-block:: python\n\n    obs = zfit.space('x', limits=(-10, 10))\n\n\nto create a simple gaussian pdf, we define its parameters and their limits using the ``zfit.parameter`` class.\n\n.. code-block:: python\n\n  # syntax: zfit.parameter(\"any_name\", value, lower, upper)\n    mu    = zfit.parameter(\"mu\"   , 2.4, -1, 5)\n    sigma = zfit.parameter(\"sigma\", 1.3,  0, 5)\n    gauss = zfit.pdf.gauss(obs=obs, mu=mu, sigma=sigma)\n\nfor simplicity, we create the dataset to be fitted starting from a numpy array, but zfit allows for the use of other sources such as root files:\n\n.. code-block:: python\n\n    mu_true = 0\n    sigma_true = 1\n    data_np = np.random.normal(mu_true, sigma_true, size=10000)\n    data = zfit.data.from_numpy(obs=obs, array=data_np)\n\nfits are performed in three steps:\n\n1. creation of a loss function, in our case a negative log-likelihood.\n2. instantiation of our minimiser of choice, in the example the ``minuit``.\n3. minimisation of the loss function.\n\n.. code-block:: python\n\n    # stage 1: create an unbinned likelihood with the given pdf and dataset\n    nll = zfit.loss.unbinnednll(model=gauss, data=data)\n\n    # stage 2: instantiate a minimiser (in this case a basic minuit)\n    minimizer = zfit.minimize.minuit()\n\n    # stage 3: minimise the given negative log-likelihood\n    result = minimizer.minimize(nll)\n\nerrors are calculated with a further function call to avoid running potentially expensive operations if not needed:\n\n.. code-block:: python\n\n    param_errors = result.hesse()\n\nonce we've performed the fit and obtained the corresponding uncertainties, we can examine the fit results:\n\n.. code-block:: python\n\n    print(\"function minimum:\", result.fmin)\n    print(\"converged:\", result.converged)\n    print(\"full minimizer information:\", result)\n\n    # information on all the parameters in the fit\n    params = result.params\n    print(params)\n\n    # printing information on specific parameters, e.g. mu\n    print(\"mu={}\".format(params[mu]['value']))\n\nand that's it!\nfor more details and information of what you can do with zfit, checkout the `latest documentation`_.\n\nprerequisites\n=============\n\n``zfit`` works with python versions 3.7, 3.8 and 3.9.\nthe following packages (amongst others) are required:\n\n- `tensorflow <https://www.tensorflow.org/>`_ >= 2.6\n- `tensorflow_probability <https://www.tensorflow.org/probability>`_\n- `scipy <https://www.scipy.org/>`_ >=1.2\n- `uproot <https://github.com/scikit-hep/uproot>`_\n- `iminuit <https://github.com/scikit-hep/iminuit>`_\n\n... and some other packages. for a full list, check the `requirements <requirements.txt>`_.\n\ninstalling\n==========\n\nzfit is currently *only available on pip*. the **conda version is highly outdated and should not be used**.\n\nif possible, use a conda or virtual environment and do:\n\n.. code-block:: console\n\n    $ pip install zfit\n\n\nfor the newest development version, you can install the version from git with\n\n.. code-block:: console\n\n   $ pip install git+https://github.com/zfit/zfit\n\n\ncontributing\n============\n\nany idea of how to improve the library? or interested to write some code?\ncontributions are always welcome, please have a look at the `contributing guide`_.\n\n.. _contributing guide: contributing.rst\n\n\ncontact\n========\n\nyou can contact us directly:\n - via e-mail: zfit@physik.uzh.ch\n - join our `gitter channel <https://gitter.im/zfit/zfit>`_\n\n\noriginal authors\n================\n\n| jonas eschle <jonas.eschle@cern.ch>\n| albert puig <albert.puig@cern.ch>\n| rafael silva coutinho <rsilvaco@cern.ch>\n\n\nsee here for `all authors and contributors`_\n\n..  _all authors and contributors: authors.rst\n\n\nacknowledgements\n================\n\nzfit has been developed with support from the university of zurich and the swiss national science foundation (snsf) under contracts 168169 and 174182.\n\nthe idea of zfit is inspired by the `tensorflowanalysis <https://gitlab.cern.ch/poluekt/tensorflowanalysis>`_ framework\ndeveloped by anton poluektov and `tensorprob <https://github.com/tensorprob/tensorprob>`_ by chris burr and igor babuschkin\nusing the tensorflow open source library and more libraries.\n\n.. _`latest documentation`: https://zfit.readthedocs.io/en/latest/\n.. _`stable documentation`: https://zfit.readthedocs.io/en/stable/\n",
  "docs_url": null,
  "keywords": "tensorflow,model,fitting,scalable,hep",
  "license": "bsd-3-clause",
  "name": "zfit",
  "package_url": "https://pypi.org/project/zfit/",
  "project_url": "https://pypi.org/project/zfit/",
  "project_urls": {
    "Homepage": "https://github.com/zfit/zfit"
  },
  "release_url": "https://pypi.org/project/zfit/0.16.0/",
  "requires_dist": [
    "attrs",
    "boost-histogram",
    "colorama",
    "colored",
    "colorlog",
    "deprecated",
    "dill",
    "dotmap",
    "frozendict",
    "hist",
    "iminuit >=2.3",
    "jacobi",
    "numdifftools",
    "numpy >=1.16",
    "ordered-set",
    "pandas",
    "pydantic <2.0.0",
    "pyyaml",
    "scipy >=1.2",
    "tabulate",
    "tensorflow <2.14,>=2.13",
    "tensorflow-probability <0.22,>=0.20",
    "texttable",
    "uhi",
    "uproot >=4",
    "xxhash",
    "zfit-interface",
    "typing-extensions ; python_version < \"3.9.0\"",
    "ipyopt >=0.12 ; extra == 'all'",
    "nlopt >=2.7.1 ; extra == 'all'",
    "asdf ; extra == 'all'",
    "awkward-pandas ; extra == 'all'",
    "pytest-randomly ; extra == 'alldev'",
    "sphinxcontrib-youtube <1.2.0,>=1.0.0 ; extra == 'alldev'",
    "bumpversion >=0.5.3 ; extra == 'alldev'",
    "sphinxcontrib-bibtex ; extra == 'alldev'",
    "seed-intersphinx-mapping ; extra == 'alldev'",
    "pyyaml ; extra == 'alldev'",
    "setuptools-scm-git-archive ; extra == 'alldev'",
    "sphinx-autodoc-typehints ; extra == 'alldev'",
    "matplotlib ; extra == 'alldev'",
    "setuptools >=30.3.0 ; extra == 'alldev'",
    "check-manifest ; extra == 'alldev'",
    "pytest-benchmark ; extra == 'alldev'",
    "pip >=9.0.1 ; extra == 'alldev'",
    "setuptools-scm[toml] >=3.4 ; extra == 'alldev'",
    "docformatter ; extra == 'alldev'",
    "tox >=2.9.1 ; extra == 'alldev'",
    "pytest-xdist ; extra == 'alldev'",
    "jax ; extra == 'alldev'",
    "progressbar2 ; extra == 'alldev'",
    "flake8 >=3.5.0 ; extra == 'alldev'",
    "watchdog >=0.8.3 ; extra == 'alldev'",
    "jupyter-sphinx ; extra == 'alldev'",
    "Jinja2 ; extra == 'alldev'",
    "ipyopt >=0.12 ; extra == 'alldev'",
    "jaxlib ; extra == 'alldev'",
    "mplhep ; extra == 'alldev'",
    "pytest-helpers-namespace ; extra == 'alldev'",
    "sphinx-panels ; extra == 'alldev'",
    "twine >=1.10.0 ; extra == 'alldev'",
    "pytest-runner >=2.11.1 ; extra == 'alldev'",
    "sphinxcontrib-images ; extra == 'alldev'",
    "pytest-ordering ; extra == 'alldev'",
    "sphinx-copybutton ; extra == 'alldev'",
    "pytest-rerunfailures >=6 ; extra == 'alldev'",
    "myst-nb ; extra == 'alldev'",
    "pydata-sphinx-theme >=0.9 ; extra == 'alldev'",
    "coverage >=4.5.1 ; extra == 'alldev'",
    "sphinx-togglebutton ; extra == 'alldev'",
    "scikit-hep-testdata ; extra == 'alldev'",
    "wheel >=0.29.0 ; extra == 'alldev'",
    "pytest-timeout >=1 ; extra == 'alldev'",
    "pyhf >=0.7.0 ; extra == 'alldev'",
    "pytest >=3.4.2 ; extra == 'alldev'",
    "nlopt >=2.7.1 ; extra == 'alldev'",
    "pre-commit ; extra == 'alldev'",
    "pygit2 ; extra == 'alldev'",
    "setupext-janitor ; extra == 'alldev'",
    "awkward-pandas ; extra == 'alldev'",
    "asdf ; extra == 'alldev'",
    "Sphinx >=3.5.4 ; extra == 'alldev'",
    "pytest-randomly ; extra == 'alldev-nonlinux'",
    "sphinxcontrib-youtube <1.2.0,>=1.0.0 ; extra == 'alldev-nonlinux'",
    "bumpversion >=0.5.3 ; extra == 'alldev-nonlinux'",
    "sphinxcontrib-bibtex ; extra == 'alldev-nonlinux'",
    "seed-intersphinx-mapping ; extra == 'alldev-nonlinux'",
    "pyyaml ; extra == 'alldev-nonlinux'",
    "setuptools-scm-git-archive ; extra == 'alldev-nonlinux'",
    "sphinx-autodoc-typehints ; extra == 'alldev-nonlinux'",
    "matplotlib ; extra == 'alldev-nonlinux'",
    "setuptools >=30.3.0 ; extra == 'alldev-nonlinux'",
    "check-manifest ; extra == 'alldev-nonlinux'",
    "pytest-benchmark ; extra == 'alldev-nonlinux'",
    "pip >=9.0.1 ; extra == 'alldev-nonlinux'",
    "setuptools-scm[toml] >=3.4 ; extra == 'alldev-nonlinux'",
    "docformatter ; extra == 'alldev-nonlinux'",
    "tox >=2.9.1 ; extra == 'alldev-nonlinux'",
    "pytest-xdist ; extra == 'alldev-nonlinux'",
    "jax ; extra == 'alldev-nonlinux'",
    "progressbar2 ; extra == 'alldev-nonlinux'",
    "flake8 >=3.5.0 ; extra == 'alldev-nonlinux'",
    "watchdog >=0.8.3 ; extra == 'alldev-nonlinux'",
    "jupyter-sphinx ; extra == 'alldev-nonlinux'",
    "Jinja2 ; extra == 'alldev-nonlinux'",
    "jaxlib ; extra == 'alldev-nonlinux'",
    "mplhep ; extra == 'alldev-nonlinux'",
    "pytest-helpers-namespace ; extra == 'alldev-nonlinux'",
    "sphinx-panels ; extra == 'alldev-nonlinux'",
    "twine >=1.10.0 ; extra == 'alldev-nonlinux'",
    "pytest-runner >=2.11.1 ; extra == 'alldev-nonlinux'",
    "sphinxcontrib-images ; extra == 'alldev-nonlinux'",
    "pytest-ordering ; extra == 'alldev-nonlinux'",
    "sphinx-copybutton ; extra == 'alldev-nonlinux'",
    "pytest-rerunfailures >=6 ; extra == 'alldev-nonlinux'",
    "myst-nb ; extra == 'alldev-nonlinux'",
    "pydata-sphinx-theme >=0.9 ; extra == 'alldev-nonlinux'",
    "coverage >=4.5.1 ; extra == 'alldev-nonlinux'",
    "sphinx-togglebutton ; extra == 'alldev-nonlinux'",
    "scikit-hep-testdata ; extra == 'alldev-nonlinux'",
    "wheel >=0.29.0 ; extra == 'alldev-nonlinux'",
    "pytest-timeout >=1 ; extra == 'alldev-nonlinux'",
    "pyhf >=0.7.0 ; extra == 'alldev-nonlinux'",
    "pytest >=3.4.2 ; extra == 'alldev-nonlinux'",
    "nlopt >=2.7.1 ; extra == 'alldev-nonlinux'",
    "pre-commit ; extra == 'alldev-nonlinux'",
    "pygit2 ; extra == 'alldev-nonlinux'",
    "setupext-janitor ; extra == 'alldev-nonlinux'",
    "awkward-pandas ; extra == 'alldev-nonlinux'",
    "asdf ; extra == 'alldev-nonlinux'",
    "Sphinx >=3.5.4 ; extra == 'alldev-nonlinux'",
    "pytest-randomly ; extra == 'alldev-windows'",
    "sphinxcontrib-youtube <1.2.0,>=1.0.0 ; extra == 'alldev-windows'",
    "bumpversion >=0.5.3 ; extra == 'alldev-windows'",
    "sphinxcontrib-bibtex ; extra == 'alldev-windows'",
    "seed-intersphinx-mapping ; extra == 'alldev-windows'",
    "pyyaml ; extra == 'alldev-windows'",
    "setuptools-scm-git-archive ; extra == 'alldev-windows'",
    "sphinx-autodoc-typehints ; extra == 'alldev-windows'",
    "matplotlib ; extra == 'alldev-windows'",
    "setuptools >=30.3.0 ; extra == 'alldev-windows'",
    "check-manifest ; extra == 'alldev-windows'",
    "pytest-benchmark ; extra == 'alldev-windows'",
    "pip >=9.0.1 ; extra == 'alldev-windows'",
    "setuptools-scm[toml] >=3.4 ; extra == 'alldev-windows'",
    "docformatter ; extra == 'alldev-windows'",
    "tox >=2.9.1 ; extra == 'alldev-windows'",
    "pytest-xdist ; extra == 'alldev-windows'",
    "jax ; extra == 'alldev-windows'",
    "progressbar2 ; extra == 'alldev-windows'",
    "flake8 >=3.5.0 ; extra == 'alldev-windows'",
    "watchdog >=0.8.3 ; extra == 'alldev-windows'",
    "jupyter-sphinx ; extra == 'alldev-windows'",
    "Jinja2 ; extra == 'alldev-windows'",
    "mplhep ; extra == 'alldev-windows'",
    "pytest-helpers-namespace ; extra == 'alldev-windows'",
    "sphinx-panels ; extra == 'alldev-windows'",
    "twine >=1.10.0 ; extra == 'alldev-windows'",
    "pytest-runner >=2.11.1 ; extra == 'alldev-windows'",
    "sphinxcontrib-images ; extra == 'alldev-windows'",
    "pytest-ordering ; extra == 'alldev-windows'",
    "sphinx-copybutton ; extra == 'alldev-windows'",
    "pytest-rerunfailures >=6 ; extra == 'alldev-windows'",
    "myst-nb ; extra == 'alldev-windows'",
    "pydata-sphinx-theme >=0.9 ; extra == 'alldev-windows'",
    "coverage >=4.5.1 ; extra == 'alldev-windows'",
    "sphinx-togglebutton ; extra == 'alldev-windows'",
    "scikit-hep-testdata ; extra == 'alldev-windows'",
    "wheel >=0.29.0 ; extra == 'alldev-windows'",
    "pytest-timeout >=1 ; extra == 'alldev-windows'",
    "pyhf >=0.7.0 ; extra == 'alldev-windows'",
    "pytest >=3.4.2 ; extra == 'alldev-windows'",
    "nlopt >=2.7.1 ; extra == 'alldev-windows'",
    "pre-commit ; extra == 'alldev-windows'",
    "pygit2 ; extra == 'alldev-windows'",
    "setupext-janitor ; extra == 'alldev-windows'",
    "awkward-pandas ; extra == 'alldev-windows'",
    "asdf ; extra == 'alldev-windows'",
    "Sphinx >=3.5.4 ; extra == 'alldev-windows'",
    "bumpversion >=0.5.3 ; extra == 'dev'",
    "check-manifest ; extra == 'dev'",
    "coverage >=4.5.1 ; extra == 'dev'",
    "docformatter ; extra == 'dev'",
    "flake8 >=3.5.0 ; extra == 'dev'",
    "jax ; extra == 'dev'",
    "jaxlib ; extra == 'dev'",
    "Jinja2 ; extra == 'dev'",
    "jupyter-sphinx ; extra == 'dev'",
    "matplotlib ; extra == 'dev'",
    "mplhep ; extra == 'dev'",
    "myst-nb ; extra == 'dev'",
    "pip >=9.0.1 ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "progressbar2 ; extra == 'dev'",
    "pydata-sphinx-theme >=0.9 ; extra == 'dev'",
    "pygit2 ; extra == 'dev'",
    "pyhf >=0.7.0 ; extra == 'dev'",
    "pytest-benchmark ; extra == 'dev'",
    "pytest-helpers-namespace ; extra == 'dev'",
    "pyyaml ; extra == 'dev'",
    "seed-intersphinx-mapping ; extra == 'dev'",
    "setupext-janitor ; extra == 'dev'",
    "setuptools >=30.3.0 ; extra == 'dev'",
    "setuptools-scm[toml] >=3.4 ; extra == 'dev'",
    "setuptools-scm-git-archive ; extra == 'dev'",
    "Sphinx >=3.5.4 ; extra == 'dev'",
    "sphinx-autodoc-typehints ; extra == 'dev'",
    "sphinx-copybutton ; extra == 'dev'",
    "sphinx-panels ; extra == 'dev'",
    "sphinx-togglebutton ; extra == 'dev'",
    "sphinxcontrib-bibtex ; extra == 'dev'",
    "sphinxcontrib-images ; extra == 'dev'",
    "sphinxcontrib-youtube <1.2.0,>=1.0.0 ; extra == 'dev'",
    "tox >=2.9.1 ; extra == 'dev'",
    "twine >=1.10.0 ; extra == 'dev'",
    "watchdog >=0.8.3 ; extra == 'dev'",
    "wheel >=0.29.0 ; extra == 'dev'",
    "pytest >=3.4.2 ; extra == 'dev'",
    "pytest-runner >=2.11.1 ; extra == 'dev'",
    "pytest-rerunfailures >=6 ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "pytest-ordering ; extra == 'dev'",
    "pytest-randomly ; extra == 'dev'",
    "scikit-hep-testdata ; extra == 'dev'",
    "pytest-timeout >=1 ; extra == 'dev'",
    "nlopt >=2.7.1 ; extra == 'dev'",
    "ipyopt >=0.12 ; extra == 'dev'",
    "bumpversion >=0.5.3 ; extra == 'dev-nonlinux'",
    "check-manifest ; extra == 'dev-nonlinux'",
    "coverage >=4.5.1 ; extra == 'dev-nonlinux'",
    "docformatter ; extra == 'dev-nonlinux'",
    "flake8 >=3.5.0 ; extra == 'dev-nonlinux'",
    "jax ; extra == 'dev-nonlinux'",
    "jaxlib ; extra == 'dev-nonlinux'",
    "Jinja2 ; extra == 'dev-nonlinux'",
    "jupyter-sphinx ; extra == 'dev-nonlinux'",
    "matplotlib ; extra == 'dev-nonlinux'",
    "mplhep ; extra == 'dev-nonlinux'",
    "myst-nb ; extra == 'dev-nonlinux'",
    "pip >=9.0.1 ; extra == 'dev-nonlinux'",
    "pre-commit ; extra == 'dev-nonlinux'",
    "progressbar2 ; extra == 'dev-nonlinux'",
    "pydata-sphinx-theme >=0.9 ; extra == 'dev-nonlinux'",
    "pygit2 ; extra == 'dev-nonlinux'",
    "pyhf >=0.7.0 ; extra == 'dev-nonlinux'",
    "pytest-benchmark ; extra == 'dev-nonlinux'",
    "pytest-helpers-namespace ; extra == 'dev-nonlinux'",
    "pyyaml ; extra == 'dev-nonlinux'",
    "seed-intersphinx-mapping ; extra == 'dev-nonlinux'",
    "setupext-janitor ; extra == 'dev-nonlinux'",
    "setuptools >=30.3.0 ; extra == 'dev-nonlinux'",
    "setuptools-scm[toml] >=3.4 ; extra == 'dev-nonlinux'",
    "setuptools-scm-git-archive ; extra == 'dev-nonlinux'",
    "Sphinx >=3.5.4 ; extra == 'dev-nonlinux'",
    "sphinx-autodoc-typehints ; extra == 'dev-nonlinux'",
    "sphinx-copybutton ; extra == 'dev-nonlinux'",
    "sphinx-panels ; extra == 'dev-nonlinux'",
    "sphinx-togglebutton ; extra == 'dev-nonlinux'",
    "sphinxcontrib-bibtex ; extra == 'dev-nonlinux'",
    "sphinxcontrib-images ; extra == 'dev-nonlinux'",
    "sphinxcontrib-youtube <1.2.0,>=1.0.0 ; extra == 'dev-nonlinux'",
    "tox >=2.9.1 ; extra == 'dev-nonlinux'",
    "twine >=1.10.0 ; extra == 'dev-nonlinux'",
    "watchdog >=0.8.3 ; extra == 'dev-nonlinux'",
    "wheel >=0.29.0 ; extra == 'dev-nonlinux'",
    "pytest >=3.4.2 ; extra == 'dev-nonlinux'",
    "pytest-runner >=2.11.1 ; extra == 'dev-nonlinux'",
    "pytest-rerunfailures >=6 ; extra == 'dev-nonlinux'",
    "pytest-xdist ; extra == 'dev-nonlinux'",
    "pytest-ordering ; extra == 'dev-nonlinux'",
    "pytest-randomly ; extra == 'dev-nonlinux'",
    "scikit-hep-testdata ; extra == 'dev-nonlinux'",
    "pytest-timeout >=1 ; extra == 'dev-nonlinux'",
    "nlopt >=2.7.1 ; extra == 'dev-nonlinux'",
    "asdf ; extra == 'hs3'",
    "ipyopt >=0.12 ; extra == 'ipyopt'",
    "nlopt >=2.7.1 ; extra == 'nlopt'",
    "pytest >=3.4.2 ; extra == 'tests'",
    "pytest-runner >=2.11.1 ; extra == 'tests'",
    "pytest-rerunfailures >=6 ; extra == 'tests'",
    "pytest-xdist ; extra == 'tests'",
    "pytest-ordering ; extra == 'tests'",
    "pytest-randomly ; extra == 'tests'",
    "scikit-hep-testdata ; extra == 'tests'",
    "pytest-timeout >=1 ; extra == 'tests'",
    "matplotlib ; extra == 'tests'",
    "nlopt >=2.7.1 ; extra == 'tests'",
    "ipyopt >=0.12 ; extra == 'tests'",
    "pytest >=3.4.2 ; extra == 'tests-nonlinux'",
    "pytest-runner >=2.11.1 ; extra == 'tests-nonlinux'",
    "pytest-rerunfailures >=6 ; extra == 'tests-nonlinux'",
    "pytest-xdist ; extra == 'tests-nonlinux'",
    "pytest-ordering ; extra == 'tests-nonlinux'",
    "pytest-randomly ; extra == 'tests-nonlinux'",
    "scikit-hep-testdata ; extra == 'tests-nonlinux'",
    "pytest-timeout >=1 ; extra == 'tests-nonlinux'",
    "matplotlib ; extra == 'tests-nonlinux'",
    "nlopt >=2.7.1 ; extra == 'tests-nonlinux'",
    "awkward-pandas ; extra == 'uproot'"
  ],
  "requires_python": "<3.12,>=3.8",
  "summary": "scalable pythonic model fitting for high energy physics",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "apuignav@gmail.com",
    "jonas.eschle@cern.ch",
    "matthieu.marinangeli@cern.ch",
    "rsilvaco@cern.ch",
    "zfit",
    "zfit@physik.uzh.ch"
  ],
  "kwds": "tensorflow tensorprob zfit_logo tensorflowanalysis zfit",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_zfit",
  "homepage": "https://github.com/zfit/zfit",
  "release_count": 52,
  "dependency_ids": [
    "pypi_asdf",
    "pypi_attrs",
    "pypi_awkward_pandas",
    "pypi_boost_histogram",
    "pypi_bumpversion",
    "pypi_check_manifest",
    "pypi_colorama",
    "pypi_colored",
    "pypi_colorlog",
    "pypi_coverage",
    "pypi_deprecated",
    "pypi_dill",
    "pypi_docformatter",
    "pypi_dotmap",
    "pypi_flake8",
    "pypi_frozendict",
    "pypi_hist",
    "pypi_iminuit",
    "pypi_ipyopt",
    "pypi_jacobi",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_jinja2",
    "pypi_jupyter_sphinx",
    "pypi_matplotlib",
    "pypi_mplhep",
    "pypi_myst_nb",
    "pypi_nlopt",
    "pypi_numdifftools",
    "pypi_numpy",
    "pypi_ordered_set",
    "pypi_pandas",
    "pypi_pip",
    "pypi_pre_commit",
    "pypi_progressbar2",
    "pypi_pydantic",
    "pypi_pydata_sphinx_theme",
    "pypi_pygit2",
    "pypi_pyhf",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_helpers_namespace",
    "pypi_pytest_ordering",
    "pypi_pytest_randomly",
    "pypi_pytest_rerunfailures",
    "pypi_pytest_runner",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_scikit_hep_testdata",
    "pypi_scipy",
    "pypi_seed_intersphinx_mapping",
    "pypi_setupext_janitor",
    "pypi_setuptools",
    "pypi_setuptools_scm",
    "pypi_setuptools_scm_git_archive",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_panels",
    "pypi_sphinx_togglebutton",
    "pypi_sphinxcontrib_bibtex",
    "pypi_sphinxcontrib_images",
    "pypi_sphinxcontrib_youtube",
    "pypi_tabulate",
    "pypi_tensorflow",
    "pypi_tensorflow_probability",
    "pypi_texttable",
    "pypi_tox",
    "pypi_twine",
    "pypi_typing_extensions",
    "pypi_uhi",
    "pypi_uproot",
    "pypi_watchdog",
    "pypi_wheel",
    "pypi_xxhash",
    "pypi_zfit_interface"
  ]
}
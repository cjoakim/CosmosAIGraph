{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5"
  ],
  "description": "=============\npython tokens\n=============\n\n.. image:: https://travis-ci.org/zalando-stups/python-tokens.svg?branch=master\n   :target: https://travis-ci.org/zalando-stups/python-tokens\n   :alt: build status\n\n.. image:: https://coveralls.io/repos/zalando-stups/python-tokens/badge.svg\n   :target: https://coveralls.io/r/zalando-stups/python-tokens\n   :alt: code coverage\n\n.. image:: https://img.shields.io/pypi/dw/stups-tokens.svg\n   :target: https://pypi.python.org/pypi/stups-tokens/\n   :alt: pypi downloads\n\n.. image:: https://img.shields.io/pypi/v/stups-tokens.svg\n   :target: https://pypi.python.org/pypi/stups-tokens/\n   :alt: latest pypi version\n\n.. image:: https://img.shields.io/pypi/l/stups-tokens.svg\n   :target: https://pypi.python.org/pypi/stups-tokens/\n   :alt: license\n\na python library that keeps oauth 2.0 service access tokens in memory for your usage.\n\ninstallation\n============\n\n.. code-block:: bash\n\n    $ sudo pip3 install --upgrade stups-tokens\n\nusage\n=====\n\n.. code-block:: python\n\n    import requests\n    import time\n    import tokens\n\n    # will use oauth2_access_token_url environment variable by default\n    # will try to read application credentials from credentials_dir\n    tokens.configure(url='https://example.com/access_tokens')\n    tokens.manage('example', ['read', 'write'])\n    tokens.start()\n\n    tok = tokens.get('example')\n\n    requests.get('https://example.org/', headers={'authorization': 'bearer {}'.format(tok)})\n\n    time.sleep(3600) # make the token expire\n\n    tok = tokens.get('example') # will refresh the expired token\n    requests.get('https://example.org/', headers={'authorization': 'bearer {}'.format(tok)})\n\nthis library also allows reading tokens directly from a file. the token needs to be in a file name ``${credentials_dir}/${token_name}-secret``:\n\n.. code-block:: python\n\n    import tokens\n\n    # the environment variable credentials_dir must be set correctly\n    tokens.configure(from_file_only=true)\n    tokens.manage('full-access')\n    tok = tokens.get('full-access')\n\n    requests.get('https://example.org/', headers={'authorization': 'bearer {}'.format(tok)})\n\nlocal testing\n=============\n\nthe \"tokens\" library allows injecting fixed oauth2 access tokens via the `oauth2_access_tokens` environment variable.\nthis allows testing applications using the library locally with personal oauth2 tokens (e.g. generated by \"zign\"):\n\n.. code-block:: bash\n\n    $ my_token=$(zign token -n mytok)\n    $ export oauth2_access_tokens=mytok=$my_token\n    $ ./myapp.py # start my local python app using the tokens library\n\n\nreleasing\n=========\n\nuploading a new version to pypi:\n\n.. code-block:: bash\n\n    $ ./release.sh <new-version>",
  "docs_url": null,
  "keywords": "",
  "license": "apache license version 2.0",
  "name": "stups-tokens",
  "package_url": "https://pypi.org/project/stups-tokens/",
  "project_url": "https://pypi.org/project/stups-tokens/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/zalando-stups/python-tokens"
  },
  "release_url": "https://pypi.org/project/stups-tokens/1.1.19/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "python library to manage oauth access tokens",
  "version": "1.1.19",
  "releases": [],
  "developers": [
    "henning.jacobs@zalando.de",
    "henning_jacobs"
  ],
  "kwds": "token_name token tokens access_tokens my_token",
  "license_kwds": "apache license version 2.0",
  "libtype": "pypi",
  "id": "pypi_stups_tokens",
  "homepage": "https://github.com/zalando-stups/python-tokens",
  "release_count": 17,
  "dependency_ids": []
}
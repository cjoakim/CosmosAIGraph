{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# duckdb_engine\n\n[![supported python versions](https://img.shields.io/pypi/pyversions/duckdb-engine)](https://pypi.org/project/duckdb-engine/) [![pypi version](https://badge.fury.io/py/duckdb-engine.svg)](https://badge.fury.io/py/duckdb-engine) [![pypi downloads](https://img.shields.io/pypi/dm/duckdb-engine.svg)](https://pypi.org/project/duckdb-engine/) [![codecov](https://codecov.io/gh/mause/duckdb_engine/graph/badge.svg)](https://codecov.io/gh/mause/duckdb_engine)\n\nbasic sqlalchemy driver for [duckdb](https://duckdb.org/)\n\n<!--ts-->\n* [duckdb_engine](#duckdb_engine)\n   * [installation](#installation)\n   * [usage](#usage)\n   * [usage in ipython/jupyter](#usage-in-ipythonjupyter)\n   * [configuration](#configuration)\n   * [how to register a pandas dataframe](#how-to-register-a-pandas-dataframe)\n   * [things to keep in mind](#things-to-keep-in-mind)\n      * [auto-incrementing id columns](#auto-incrementing-id-columns)\n      * [pandas read_sql() chunksize](#pandas-read_sql-chunksize)\n      * [unsigned integer support](#unsigned-integer-support)\n   * [alembic integration](#alembic-integration)\n   * [preloading extensions (experimental)](#preloading-extensions-experimental)\n   * [the name](#the-name)\n\n<!-- created by https://github.com/ekalinin/github-markdown-toc -->\n<!-- added by: me, at: wed 20 sep 2023 12:44:27 awst -->\n\n<!--te-->\n\n## installation\n```sh\n$ pip install duckdb-engine\n```\n\nduckdb engine also has a conda feedstock available, the instructions for the use of which are available in it's [repository](https://github.com/conda-forge/duckdb-engine-feedstock).\n\n## usage\n\nonce you've installed this package, you should be able to just use it, as sqlalchemy does a python path search\n\n```python\nfrom sqlalchemy import column, integer, sequence, string, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm.session import session\n\nbase = declarative_base()\n\n\nclass fakemodel(base):  # type: ignore\n    __tablename__ = \"fake\"\n\n    id = column(integer, sequence(\"fakemodel_id_sequence\"), primary_key=true)\n    name = column(string)\n\n\neng = create_engine(\"duckdb:///:memory:\")\nbase.metadata.create_all(eng)\nsession = session(bind=eng)\n\nsession.add(fakemodel(name=\"frank\"))\nsession.commit()\n\nfrank = session.query(fakemodel).one()\n\nassert frank.name == \"frank\"\n```\n\n## usage in ipython/jupyter\n\nwith ipython-sql and duckdb-engine you can query duckdb natively in your notebook! check out [duckdb's documentation](https://duckdb.org/docs/guides/python/jupyter) or\nalex monahan's great demo of this on [his blog](https://alex-monahan.github.io/2021/08/22/python_and_sql_better_together.html#an-example-workflow-with-duckdb).\n\n## configuration\n\nyou can configure duckdb by passing `connect_args` to the create_engine function\n```python\ncreate_engine(\n    'duckdb:///:memory:',\n    connect_args={\n        'read_only': true,\n        'config': {\n            'memory_limit': '500mb'\n        }\n    }\n)\n```\n\nthe supported configuration parameters are listed in the [duckdb docs](https://duckdb.org/docs/sql/configuration)\n\n## how to register a pandas dataframe\n\n```python\nconn = create_engine(\"duckdb:///:memory:\").connect()\n\n# with sqlalchemy 1.3\nconn.execute(\"register\", (\"dataframe_name\", pd.dataframe(...)))\n\n# with sqlalchemy 1.4+\nconn.execute(text(\"register(:name, :df)\"), {\"name\": \"test_df\", \"df\": df})\n\nconn.execute(\"select * from dataframe_name\")\n```\n\n## things to keep in mind\nduckdb's sql parser is based on the postgresql parser, but not all features in postgresql are supported in duckdb. because the `duckdb_engine` dialect is derived from the `postgresql` dialect, `sqlalchemy` may try to use postgresql-only features. below are some caveats to look out for.\n\n### auto-incrementing id columns\nwhen defining an integer column as a primary key, `sqlalchemy` uses the `serial` datatype for postgresql. duckdb does not yet support this datatype because it's a non-standard postgresql legacy type, so a workaround is to use the `sqlalchemy.sequence()` object to auto-increment the key. for more information on sequences, you can find the [`sqlalchemy sequence` documentation here](https://docs.sqlalchemy.org/en/14/core/defaults.html#associating-a-sequence-as-the-server-side-default).\n\nthe following example demonstrates how to create an auto-incrementing id column for a simple table:\n\n```python\n>>> import sqlalchemy\n>>> engine = sqlalchemy.create_engine('duckdb:////path/to/duck.db')\n>>> metadata = sqlalchemy.metadata(engine)\n>>> user_id_seq = sqlalchemy.sequence('user_id_seq')\n>>> users_table = sqlalchemy.table(\n...     'users',\n...     metadata,\n...     sqlalchemy.column(\n...         'id',\n...         sqlalchemy.integer,\n...         user_id_seq,\n...         server_default=user_id_seq.next_value(),\n...         primary_key=true,\n...     ),\n... )\n>>> metadata.create_all(bind=engine)\n```\n\n### pandas `read_sql()` chunksize\n\n**note**: this is no longer an issue in versions `>=0.5.0` of `duckdb`\n\nthe `pandas.read_sql()` method can read tables from `duckdb_engine` into dataframes, but the `sqlalchemy.engine.result.resultproxy` trips up when `fetchmany()` is called. therefore, for now `chunksize=none` (default) is necessary when reading duckdb tables into dataframes. for example:\n\n```python\n>>> import pandas as pd\n>>> import sqlalchemy\n>>> engine = sqlalchemy.create_engine('duckdb:////path/to/duck.db')\n>>> df = pd.read_sql('users', engine)                ### works as expected\n>>> df = pd.read_sql('users', engine, chunksize=25)  ### throws an exception\n```\n\n### unsigned integer support\n\nunsigned integers are supported by duckdb, and are available in [`duckdb_engine.datatypes`](duckdb_engine/datatypes.py).\n\n## alembic integration\n\nsqlalchemy's companion library `alembic` can optionally be used to manage database migrations.\n\nthis support can be enabling by adding an alembic implementation class for the `duckdb` dialect.\n\n```python\nfrom alembic.ddl.impl import defaultimpl\n\nclass alembicduckdbimpl(defaultimpl):\n    \"\"\"alembic implementation for duckdb.\"\"\"\n\n    __dialect__ = \"duckdb\"\n```\n\nafter loading this class with your program, alembic will no longer raise an error when generating or applying migrations.\n\n## preloading extensions (experimental)\n\n> duckdb 0.9.0+ includes builtin support for autoinstalling and autoloading of extensions, see [the extension documentation](http://duckdb.org/docs/archive/0.9.0/extensions/overview#autoloadable-extensions) for more information.\n\nuntil the duckdb python client allows you to natively preload extensions, i've added experimental support via a `connect_args` parameter\n\n```python\nfrom sqlalchemy import create_engine\n\ncreate_engine(\n    'duckdb:///:memory:',\n    connect_args={\n        'preload_extensions': ['https'],\n        'config': {\n            's3_region': 'ap-southeast-1'\n        }\n    }\n)\n```\n\n## the name\n\nyes, i'm aware this package should be named `duckdb-driver` or something, i wasn't thinking when i named it and it's too hard to change the name now\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "duckdb_engine",
  "package_url": "https://pypi.org/project/duckdb_engine/",
  "project_url": "https://pypi.org/project/duckdb_engine/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Mause/duckdb_engine/issues",
    "Changelog": "https://github.com/Mause/duckdb_engine/releases",
    "Homepage": "https://github.com/Mause/duckdb_engine",
    "Repository": "https://github.com/Mause/duckdb_engine"
  },
  "release_url": "https://pypi.org/project/duckdb_engine/0.10.0/",
  "requires_dist": [
    "duckdb (>=0.4.0)",
    "sqlalchemy (>=1.3.22)"
  ],
  "requires_python": ">=3.7",
  "summary": "sqlalchemy driver for duckdb",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "elliana",
    "me@mause.me"
  ],
  "kwds": "duckdb_engine duckdb sqlalchemy pyversions create_engine",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_duckdb_engine",
  "homepage": "https://github.com/mause/duckdb_engine",
  "release_count": 49,
  "dependency_ids": [
    "pypi_duckdb",
    "pypi_sqlalchemy"
  ]
}
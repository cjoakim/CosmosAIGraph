{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "tag-expressions\n===============\n\npackage to evaluate logical tag expressions by using a modified version of the `shunting yard algorithm <https://en.wikipedia.org/wiki/shunting-yard_algorithm>`_.\nthis package is a python port of cucumbers tag expression.\n\nit's also used by `radish <https://github.com/radish-bdd/radish>`_.\n\n|build status| |pypi package version| |pypi python versions|\n\n\ninstalling\n----------\n\n.. code:: bash\n\n    $ pip install tag-expressions\n\nhere is a tease\n---------------\n\n\n.. code:: python\n\n    >>> from tagexpressions import parse\n    >>>\n    >>> expression = '( a and b ) or ( c and d )'\n    >>> compiled_expression = parse(expression)\n    >>> print(compiled_expression)\n    ( ( a and b ) or ( c and d ) )\n    >>>\n    >>> data = ['a', 'b', 'c', 'd']\n    >>> assert compiled_expression.evaluate(data) == true\n    >>>\n    >>> data = ['a', 'c']\n    >>> assert compiled_expression.evaluate(data) == false\n    >>>\n    >>>\n    >>> expression = 'not a or b and not c or not d or e and f'\n    >>> compiled_expression = parse(expression)\n    >>> print(compiled_expression)\n    ( ( ( not ( a ) or ( b and not ( c ) ) ) or not ( d ) ) or ( e and f ) )\n    >>>\n    >>> data = ['b', 'e', 'f']\n    >>> assert compiled_expression.evaluate(data) == true\n    >>>\n    >>> data = ['a', 'c', 'd']\n    >>> assert compiled_expression.evaluate(data) == false\n\n\nusage\n-----\n\navailable operators\n~~~~~~~~~~~~~~~~~~~\n\n* **or** - \"or\" conjunction of two given variables\n* **and** - \"and\" conjunction of two given variables\n* **not** - negation of a single variable\n\nevery other token given in an *infix* is considered a variable.\n\noperator precedence\n~~~~~~~~~~~~~~~~~~~\n\nfrom high to low:\n\n* ()\n* or\n* and\n* not\n\n.. |build status| image:: https://travis-ci.org/timofurrer/tag-expressions.png?branch=master\n   :target: https://travis-ci.org/timofurrer/tag-expressions\n.. |pypi package version| image:: https://badge.fury.io/py/tag-expressions.svg\n   :target: https://badge.fury.io/py/tag-expressions\n.. |pypi python versions| image:: https://img.shields.io/pypi/pyversions/tag-expressions.svg\n   :target: https://pypi.python.org/pypi/tag-expressions\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "tag-expressions",
  "package_url": "https://pypi.org/project/tag-expressions/",
  "project_url": "https://pypi.org/project/tag-expressions/",
  "project_urls": {
    "Homepage": "http://github.com/timofurrer/tag-expressions"
  },
  "release_url": "https://pypi.org/project/tag-expressions/2.0.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "built-in functions, types, exceptions, and other objects.",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "timo_furrer",
    "tuxtimo@gmail.com"
  ],
  "kwds": "compiled_expression yard_algorithm tagexpressions expressions parse",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_tag_expressions",
  "homepage": "http://github.com/timofurrer/tag-expressions",
  "release_count": 5,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "[![image](https://img.shields.io/pypi/v/requests-aws4auth.svg)](https://pypi.python.org/pypi/requests-aws4auth)\n[![image](https://img.shields.io/pypi/l/requests-aws4auth.svg)](https://pypi.python.org/pypi/requests-aws4auth)\n\namazon web services version 4 authentication for the python [requests](https://github.com/kennethreitz/requests) library.\n\nfeatures\n========\n\n-   requests authentication for all aws services that support aws auth v4\n-   independent signing key objects\n-   automatic regeneration of keys when scope date boundary is passed\n-   support for sts temporary credentials\n\nimplements header-based authentication, get url parameter and post\nparameter authentication are not supported.\n\nsupported services\n==================\n\nthis package has been tested as working against:\n\nappstream, appsync, auto-scaling, cloudformation, cloudfront, cloudhsm,\ncloudsearch, cloudtrail, cloudwatch monitoring, cloudwatch logs,\ncodedeploy, cognito identity, cognito sync, config, datapipeline, direct\nconnect, dynamodb, elastic beanstalk, elasticache, ec2, ec2 container\nservice, elastic load balancing, elastic mapreduce, elasticsearch,\nelastic transcoder, glacier, identity and access management (iam), key\nmanagement service (kms), kinesis, lambda, opsworks, redshift,\nrelational database service (rds), route 53, simple storage service\n(s3), simple notification service (sns), simple queue service (sqs),\nstorage gateway, security token service (sts)\n\nthe following services do not support aws auth version 4 and are not\nusable with this package:\n\nsimple email service (ses), simple workflow service (swf),\nimport/export, simpledb, devpay, mechanical turk\n\nthe aws support api has not been tested as it requires a premium\nsubscription.\n\npython versions\n========\nin the 1.x semantic versions, the minimum python support will be gradually raised:\n\n* 1.0.x: support python2.7 and python3.3+.\n* 1.1.x: python2.7 is not supported, is best-effort. support python3.3+.\n* 1.2.x: [requires-python](https://packaging.python.org/guides/dropping-older-python-versions/#specify-the-version-ranges-for-supported-python-distributions) will be set to python3.3+, explicitly removing earlier versions. python<3.7 is not supported, is best-effort.\n* 1.3.x: [requires-python](https://packaging.python.org/guides/dropping-older-python-versions/#specify-the-version-ranges-for-supported-python-distributions) will be set to python3.7+, explicitly removing earlier versions. (best-effort is tbd)\n\ninstallation\n============\n\ninstall via pip:\n\n``` {.sourcecode .bash}\n$ pip install requests-aws4auth\n```\n\nrequests-aws4auth requires the\n[requests](https://github.com/kennethreitz/requests) library by kenneth\nreitz.\n\nrequests-aws4auth is tested on python 2.7 and 3.5 and up.\n\nbehaviour changes in 0.8\n========================\n\nversion 0.8 introduces request date checking and automatic key\nregeneration behaviour as default. this has implications for sharing\nauthentication objects between threads, and for storage of secret keys.\nsee the relevant sections below for details. see also the discussion in\n[github issue\n\\#10](https://github.com/sam-washington/requests-aws4auth/issues/10).\n\nbasic usage\n===========\n\n``` {.sourcecode .python}\n>>> import requests\n>>> from requests_aws4auth import aws4auth\n>>> endpoint = 'http://s3-eu-west-1.amazonaws.com'\n>>> auth = aws4auth('<access id>', '<access key>', 'eu-west-1', 's3')\n>>> response = requests.get(endpoint, auth=auth)\n>>> response.text\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <listallmybucketsresult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\n        <owner>\n        <id>bcaf1ffd86f461ca5fb16fd081034f</id>\n        <displayname>webfile</displayname>\n        ...\n```\n\nthis example would list your buckets in the `eu-west-1` region of the\namazon s3 service.\n\nsts temporary credentials\n=========================\n\n``` {.sourcecode .python}\n>>> from requests_aws4auth import aws4auth\n>>> auth = aws4auth('<access id>', '<access key>', 'eu-west-1', 's3',\n                    session_token='<session token>')\n...\n```\n\nthis example shows how to construct an aws4auth object for use with sts\ntemporary credentials. the `x-amz-security-token` header is added with\nthe session token. temporary credential timeouts are not managed \\-- in\ncase the temporary credentials expire, they need to be re-generated and\nthe aws4auth object re-constructed with the new credentials.\n\ndynamic sts credentials using botocore refreshablecredentials\n=============================================================\n\n``` {.sourcecode .python}\n>>> from requests_aws4auth import aws4auth\n>>> from botocore.session import session\n>>> credentials = session().get_credentials()\n>>> auth = aws4auth(region='eu-west-1', service='es',\n                    refreshable_credentials=credentials)\n...\n```\n\nthis example shows how to construct an aws4auth instance with\nautomatically refreshing credentials, suitable for long-running\napplications using aws iam assume-role.\nthe refreshablecredentials instance is used to generate valid static\ncredentials per-request, eliminating the need to recreate the aws4auth\ninstance when temporary credentials expire.\n\ndate handling\n=============\n\nif an http request to be authenticated contains a `date` or `x-amz-date`\nheader, aws will only accept the authorised request if the date in the\nheader matches the scope date of the signing key (see the [aws rest api date\ndocs](http://docs.aws.amazon.com/general/latest/gr/sigv4-date-handling.html).)).\n\nfrom version 0.8 of requests-aws4auth, if the header date does not match\nthe scope date, an `aws4auth` instance will automatically regenerate its\nsigning key, using the same scope parameters as the previous key except\nfor the date, which will be changed to match the request date. if a\nrequest does not include a date, the current date is added to the\nrequest in an `x-amz-date` header, and the signing key is regenerated if\nthis differs from the scope date.\n\nthis means that `aws4auth` now extracts and parses dates from the values\nof `x-amz-date` and `date` headers. supported date formats are:\n\n-   rfc 7231 (e.g. mon, 09 sep 2011 23:36:00 gmt)\n-   rfc 850 (e.g. sunday, 06-nov-94 08:49:37 gmt)\n-   c time (e.g. wed dec 4 00:00:00 2002)\n-   amz-date format (e.g. 20090325t010101z)\n-   iso 8601 / rfc 3339 (e.g. 2009-03-25t10:11:12.13-01:00)\n\nif either header is present but `aws4auth` cannot extract a date because\nall present date headers are in an unrecognisable format, `aws4auth`\nwill delete any `x-amz-date` and `date` headers present and replace with\na single `x-amz-date` header containing the current date. this behaviour\ncan be modified using the `raise_invalid_date` keyword argument of the\n`aws4auth` constructor.\n\nautomatic key regeneration\n==========================\n\nif you do not want the signing key to be automatically regenerated when\na mismatch between the request date and the scope date is encountered,\nuse the alternative `strictaws4auth` class, which is identical to\n`aws4auth` except that upon encountering a date mismatch it just raises\na `datemismatcherror`. you can also use the `passiveaws4auth` class,\nwhich mimics the `aws4auth` behaviour prior to version 0.8 and just\nsigns and sends the request, whether the date matches or not. in this\ncase it is up to the calling code to handle an authentication failure\nresponse from aws caused by the date mismatch.\n\nsecret key storage\n==================\n\nto allow automatic key regeneration, the secret key is stored in the\n`aws4auth` instance, in the signing key object. if you do not want this\nto occur, instantiate the instance using an `aws4signing` key which was\ncreated with the `store_secret_key` parameter set to false:\n\n``` {.sourcecode .python}\n>>> sig_key = aws4signingkey(secret_key, region, service, date, false)\n>>> auth = strictaws4auth(access_id, sig_key)\n```\n\nthe `aws4auth` class will then raise a `nosecretkeyerror` when it\nattempts to regenerate its key. a slightly more conceptually elegant way\nto handle this is to use the alternative `strictaws4auth` class, again\ninstantiating it with an `aws4signingkey` instance created with\n`store_secret_key = false`.\n\nmultithreading\n==============\n\nif you share `aws4auth` (or even `strictaws4auth`) instances between\nthreads you are likely to encounter problems. because `aws4auth`\ninstances may unpredictably regenerate their signing key as part of\nsigning a request, threads using the same instance may find the key\nchanged by another thread halfway through the signing process, which may\nresult in undefined behaviour.\n\nit may be possible to rig up a workable instance sharing mechanism using\nlocking primitives and the `strictaws4auth` class, however this poor\nauthor can\\'t think of a scenario which works safely yet doesn\\'t suffer\nfrom at some point blocking all threads for at least the duration of an\nhttp request, which could be several seconds. if several requests come\nin in close succession which all require key regenerations then the\nsystem could be forced into serial operation for quite a length of time.\n\nin short, it\\'s probably best to create a thread-local instance of\n`aws4auth` for each thread that needs to do authentication.\n\napi reference\n=============\n\nsee the doctrings in `aws4auth.py` and `aws4signingkey.py`.\n\ntesting\n=======\n\na test suite is included in the test folder.\n\nthe package passes all tests in the aws auth v4\n[test_suite](http://docs.aws.amazon.com/general/latest/gr/signature-v4-test-suite.html),\nand contains tests against the supported live services. see docstrings\nin `test/requests_aws4auth_test.py` for details about running the tests.\n\nconnection parameters are included in the tests for the aws support api,\nshould you have access and want to try it. the documentation says it\nsupports auth v4 so it should work if you have a subscription. do pass\non your results!\n\nunsupported aws features / todo\n===============================\n\n-   currently does not support amazon s3 chunked uploads\n-   tests for new aws services\n-   requires requests library to be present even if only using\n    aws4signingkey\n-   coherent documentation\n\nversion release notes\n=====================\n\n- update `history.md`\n- update `requests_aws4auth/__init__.py`\n- create a [release](https://github.com/tedder/requests-aws4auth/releases) on github\n\nprep:\n```\npython3 -m pip install --user --upgrade setuptools wheel testresources twine\n```\n\nbuild and release, creds in `~/.pypirc`:\n```\nrm -f dist/*; \\\npython3 setup.py sdist bdist_wheel && \\\npython3 -m twine upload --repository testpypi_requests_aws4auth dist/* && \\\npython3 -m twine upload --repository pypi dist/*\n```\n\n\n\n1.2.3 (2023-05-03)\n=========\n\n**changes**\n\n- add manifest file so tarball installs succeed, #66. thanks @jantman.\n\n1.2.2 (2023-02-02)\n=========\n\n**bugfixes**\n\n- the 1.2.0/1.2.1 releases had a regression error. the fix of #63 has been reverted.\n\n1.2.1 (2023-01-25)\n=========\n\n**bugfixes**\n\n- actually fix #34. build 1.2.0 was not fully released.\n\n\n1.2.0 (2023-01-20)\n=========\n\n**bugfixes**\n\n- fix #34, port numbers on header, with #63. thanks @phillipberndt.\n\n**changes**\n\n- test against 3.10. currently supporting 3.8-3.10.\n- small fixup to flake8 config\n\n1.1.2 (2022-03-24)\n=========\n\n**changes**\n\n- don't install markdown files, and especially not outside of our lib dir, see #51. thanks @benjaminp.\n- prevent unquoting of query string reserved characters, see #60. thanks @mliarakos.\n- add support for files as request body, see see #58. thanks @ussrliveson.\n- remove deprecated python 2.7 and python 3.5. currently testing against 3.8 and 3.9.\n- renamed main branch to 'main'\n\n\n1.1.1 (2021-06-04)\n=========\n\n**bugfixes**\n\n- secondary fix to query string ordering, documented in #49. it would fail with multiple values for the same key. thanks @martinamps.\n- fix minor deprecation warning in a regex.\n\n**package changes**\n\n- none\n\n**tests**\n\n- added tests for #49 secondary fix for string ordering.\n\n\n\n1.1.0 (2021-05-21)\n=========\n\n**new features**\n\n- query string ordering has been fixed. documented in #21, fixed in #23. thanks @zen4ever.\n- test for spaces before calling shlex on them in `amz_norm_whitespace`. shlex doesn't like to split whitespace on a string without whitespace, taking several orders of magnitude longer to parse through it. #35, thanks @noamkush.\n- added `refreshable_credentials`, see #37, thanks @teemuy.\n\n**package changes**\n\n- removed python2.7 support. usage of py2.7 is not supported. `requires-python` will be set to py3.3+ in the next minor release.\n\n**tests**\n\n- none\n\n\n1.0.1 (2020-09-28)\n=========\n\n**new features**\n\n- none\n\n**package changes**\n\n- bump to proper x.y.z semver syntax\n- bump project to stable (#33)\n\n**tests**\n\n- none\n\n1.0 (2020-06-06)\n=========\n\n**new features**\n\n- none!\n\n**package changes**\n\n- add flake8 config\n- convert docs to markdown\n- removed bundled six.py.\n- taken over ownership via [pep451](https://www.python.org/dev/peps/pep-0541/#continue-maintenance); [pypi issue here](https://github.com/pypa/pypi-support/issues/393), [successfully contacted sam](https://github.com/sam-washington/requests-aws4auth/issues/40).\n\n**tests**\n\n- remove sys path hacking from tests.\n- ensure they work now.\n- github actions are in place for continuous integration.\n- allow longer flake8 line length in tests.\n\n0.9 (2016-02-07)\n================\n\n**new features**\n\n-   support for sts temporary credentials. thanks to\n    <https://github.com/magdalene>\n\n**tests**\n\n-   tests for the sts temporary credentials functionality\n-   fixed `aws4signingkey.amz_date` deprecation warning test\n-   elastic mapreduce live service test no longer using deprecated describejobflows action\n\n0.8 (2015-12-31)\n================\n\nthis version introduces some behaviour changes designed to reduce the legwork needed when a signing key goes out of date. this has implications for multithreading and secret key storage. see the readme for further details.\n\n**new features**\n\n-   aws4auth class now checks request header date against signing key\n    scope date, and automatically regenerates the signing key with the\n    request date if they don't match\n-   added exceptions module with new exceptions:\n    requestsaws4authexception, datemismatcherror, nosecretkeyerror, dateformaterror\n-   added strictaws4auth and passiveaws4auth classes\n\n**aws4auth changes**\n\n-   added `regenerate_signing_key()` method, to allow regeneration of\n    current signing key with parameter overrides\n-   added methods for checking and extracting dates from requests:\n    `get_request_date()`, `parse_date()`, `handle_date_mismatch()`\n-   `__call__()` now checks for a date header in the request and\n    attempts to automatically regenerate the signing key with the\n    request date if request date differs from the signing key date\n-   can now supply a date to the constructor\n-   changed default included sig headers to include `date` header if\n    present\n\n**aws4signingkey changes**\n\n-   added new `store_secret_key` instantiation parameter which allows\n    control of whether the secret key is stored in the instance\n-   deprecated the `amz_date` property in favour of just `date`\n-   spelling typo fix in aws4authsigningkey module docstring. thanks to jhgorrell\n\n**package changes**\n\n-   dropped support for python 3.2. now only supported on python 2.7 and\n    3.3 and up, to match versions supported by requests.\n\n**tests**\n\n-   many new tests for the new functionality\n-   added tests for generating canonical path, including test for fix\n    added in 0.7 for percent encoding of paths\n-   added tests for generating canonical querystrings\n\n0.7 (2015-11-02)\n================\n\n**bugfixes**\n\n-   fixed percent encoded characters in url paths not being encoded\n    again for signature generation, as is expected for all services\n    except s3. this was causing authentication failures whenever these\n    characters appeared in a url. thanks to ipartola and cristi23 for\n    the report.\n-   two bugfixes for elasticsearch, thanks to matthew thompson for both:\n    -   no longer setting body to `b''` during signing if it's none\n    -   now stripping port from url netloc for signature generation\n\n**modules**\n\n-   upgraded the included version of six.py to 1.10\n\n**tests**\n\n-   fixed a couple of broken unicode tests on python 2\n-   added a couple more tests for encoding unicode request bodies\n\n0.6 (2015-09-07)\n================\n\n**bugfixes**\n\n-   included history.rst in built package to fix pip source install\n    failure. thanks to beirdo for the bug report.\n\n0.5 (2015-04-29)\n================\n\n**bugfixes**\n\n-   fixed bug when uploading to s3 with x-amz-acl header which caused\n    authentication failure - headers used in signature are now: host,\n    content-type and all `x-amz-*` headers (except for\n    x-amz-client-context which breaks mobile analytics auth if included)\n\n**docs**\n\n-   minor docstring and comment updates\n\n**license**\n\n-   changed content of license to vanilla mit license\n",
  "docs_url": null,
  "keywords": "requests authentication amazon web services aws s3 rest",
  "license": "mit license",
  "name": "requests-aws4auth",
  "package_url": "https://pypi.org/project/requests-aws4auth/",
  "project_url": "https://pypi.org/project/requests-aws4auth/",
  "project_urls": {
    "Download": "https://github.com/tedder/requests-aws4auth/tarball/1.2.3",
    "Homepage": "https://github.com/tedder/requests-aws4auth"
  },
  "release_url": "https://pypi.org/project/requests-aws4auth/1.2.3/",
  "requires_dist": [
    "requests",
    "six",
    "httpx ; extra == 'httpx'"
  ],
  "requires_python": ">=3.3",
  "summary": "aws4 authentication for requests",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "ted@tedder.dev",
    "ted_timmons"
  ],
  "kwds": "requests_aws4auth testpypi_requests_aws4auth requests_aws4auth_test aws4auth aws4authsigningkey",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_requests_aws4auth",
  "homepage": "https://github.com/tedder/requests-aws4auth",
  "release_count": 15,
  "dependency_ids": [
    "pypi_httpx",
    "pypi_requests",
    "pypi_six"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "# aiofiles: file support for asyncio\n\n[![pypi](https://img.shields.io/pypi/v/aiofiles.svg)](https://pypi.python.org/pypi/aiofiles)\n[![build](https://github.com/tinche/aiofiles/workflows/ci/badge.svg)](https://github.com/tinche/aiofiles/actions)\n[![coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/tinche/882f02e3df32136c847ba90d2688f06e/raw/covbadge.json)](https://github.com/tinche/aiofiles/actions/workflows/main.yml)\n[![supported python versions](https://img.shields.io/pypi/pyversions/aiofiles.svg)](https://github.com/tinche/aiofiles)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n**aiofiles** is an apache2 licensed library, written in python, for handling local\ndisk files in asyncio applications.\n\nordinary local file io is blocking, and cannot easily and portably be made\nasynchronous. this means doing file io may interfere with asyncio applications,\nwhich shouldn't block the executing thread. aiofiles helps with this by\nintroducing asynchronous versions of files that support delegating operations to\na separate thread pool.\n\n```python\nasync with aiofiles.open('filename', mode='r') as f:\n    contents = await f.read()\nprint(contents)\n'my file contents'\n```\n\nasynchronous iteration is also supported.\n\n```python\nasync with aiofiles.open('filename') as f:\n    async for line in f:\n        ...\n```\n\nasynchronous interface to tempfile module.\n\n```python\nasync with aiofiles.tempfile.temporaryfile('wb') as f:\n    await f.write(b'hello, world!')\n```\n\n## features\n\n- a file api very similar to python's standard, blocking api\n- support for buffered and unbuffered binary files, and buffered text files\n- support for `async`/`await` ([pep 492](https://peps.python.org/pep-0492/)) constructs\n- async interface to tempfile module\n\n## installation\n\nto install aiofiles, simply:\n\n```bash\n$ pip install aiofiles\n```\n\n## usage\n\nfiles are opened using the `aiofiles.open()` coroutine, which in addition to\nmirroring the builtin `open` accepts optional `loop` and `executor`\narguments. if `loop` is absent, the default loop will be used, as per the\nset asyncio policy. if `executor` is not specified, the default event loop\nexecutor will be used.\n\nin case of success, an asynchronous file object is returned with an\napi identical to an ordinary file, except the following methods are coroutines\nand delegate to an executor:\n\n- `close`\n- `flush`\n- `isatty`\n- `read`\n- `readall`\n- `read1`\n- `readinto`\n- `readline`\n- `readlines`\n- `seek`\n- `seekable`\n- `tell`\n- `truncate`\n- `writable`\n- `write`\n- `writelines`\n\nin case of failure, one of the usual exceptions will be raised.\n\n`aiofiles.stdin`, `aiofiles.stdout`, `aiofiles.stderr`,\n`aiofiles.stdin_bytes`, `aiofiles.stdout_bytes`, and\n`aiofiles.stderr_bytes` provide async access to `sys.stdin`,\n`sys.stdout`, `sys.stderr`, and their corresponding `.buffer` properties.\n\nthe `aiofiles.os` module contains executor-enabled coroutine versions of\nseveral useful `os` functions that deal with files:\n\n- `stat`\n- `statvfs`\n- `sendfile`\n- `rename`\n- `renames`\n- `replace`\n- `remove`\n- `unlink`\n- `mkdir`\n- `makedirs`\n- `rmdir`\n- `removedirs`\n- `link`\n- `symlink`\n- `readlink`\n- `listdir`\n- `scandir`\n- `access`\n- `path.exists`\n- `path.isfile`\n- `path.isdir`\n- `path.islink`\n- `path.ismount`\n- `path.getsize`\n- `path.getatime`\n- `path.getctime`\n- `path.samefile`\n- `path.sameopenfile`\n\n### tempfile\n\n**aiofiles.tempfile** implements the following interfaces:\n\n- temporaryfile\n- namedtemporaryfile\n- spooledtemporaryfile\n- temporarydirectory\n\nresults return wrapped with a context manager allowing use with async with and async for.\n\n```python\nasync with aiofiles.tempfile.namedtemporaryfile('wb+') as f:\n    await f.write(b'line1\\n line2')\n    await f.seek(0)\n    async for line in f:\n        print(line)\n\nasync with aiofiles.tempfile.temporarydirectory() as d:\n    filename = os.path.join(d, \"file.ext\")\n```\n\n### writing tests for aiofiles\n\nreal file io can be mocked by patching `aiofiles.threadpool.sync_open`\nas desired. the return type also needs to be registered with the\n`aiofiles.threadpool.wrap` dispatcher:\n\n```python\naiofiles.threadpool.wrap.register(mock.magicmock)(\n    lambda *args, **kwargs: threadpool.asyncbufferediobase(*args, **kwargs))\n\nasync def test_stuff():\n    data = 'data'\n    mock_file = mock.magicmock()\n\n    with mock.patch('aiofiles.threadpool.sync_open', return_value=mock_file) as mock_open:\n        async with aiofiles.open('filename', 'w') as f:\n            await f.write(data)\n\n        mock_file.write.assert_called_once_with(data)\n```\n\n### history\n\n#### 23.2.1 (2023-08-09)\n\n- import `os.statvfs` conditionally to fix importing on non-unix systems.\n  [#171](https://github.com/tinche/aiofiles/issues/171) [#172](https://github.com/tinche/aiofiles/pull/172)\n\n#### 23.2.0 (2023-08-09)\n\n- aiofiles is now tested on python 3.12 too.\n  [#166](https://github.com/tinche/aiofiles/issues/166) [#168](https://github.com/tinche/aiofiles/pull/168)\n- on python 3.12, `aiofiles.tempfile.namedtemporaryfile` now accepts a `delete_on_close` argument, just like the stdlib version.\n- on python 3.12, `aiofiles.tempfile.namedtemporaryfile` no longer exposes a `delete` attribute, just like the stdlib version.\n- added `aiofiles.os.statvfs` and `aiofiles.os.path.ismount`.\n  [#162](https://github.com/tinche/aiofiles/pull/162)\n- use [pdm](https://pdm.fming.dev/latest/) instead of poetry.\n  [#169](https://github.com/tinche/aiofiles/pull/169)\n\n#### 23.1.0 (2023-02-09)\n\n- added `aiofiles.os.access`.\n  [#146](https://github.com/tinche/aiofiles/pull/146)\n- removed `aiofiles.tempfile.temptypes.asyncspooledtemporaryfile.softspace`.\n  [#151](https://github.com/tinche/aiofiles/pull/151)\n- added `aiofiles.stdin`, `aiofiles.stdin_bytes`, and other stdio streams.\n  [#154](https://github.com/tinche/aiofiles/pull/154)\n- transition to `asyncio.get_running_loop` (vs `asyncio.get_event_loop`) internally.\n\n#### 22.1.0 (2022-09-04)\n\n- added `aiofiles.os.path.islink`.\n  [#126](https://github.com/tinche/aiofiles/pull/126)\n- added `aiofiles.os.readlink`.\n  [#125](https://github.com/tinche/aiofiles/pull/125)\n- added `aiofiles.os.symlink`.\n  [#124](https://github.com/tinche/aiofiles/pull/124)\n- added `aiofiles.os.unlink`.\n  [#123](https://github.com/tinche/aiofiles/pull/123)\n- added `aiofiles.os.link`.\n  [#121](https://github.com/tinche/aiofiles/pull/121)\n- added `aiofiles.os.renames`.\n  [#120](https://github.com/tinche/aiofiles/pull/120)\n- added `aiofiles.os.{listdir, scandir}`.\n  [#143](https://github.com/tinche/aiofiles/pull/143)\n- switched to calver.\n- dropped python 3.6 support. if you require it, use version 0.8.0.\n- aiofiles is now tested on python 3.11.\n\n#### 0.8.0 (2021-11-27)\n\n- aiofiles is now tested on python 3.10.\n- added `aiofiles.os.replace`.\n  [#107](https://github.com/tinche/aiofiles/pull/107)\n- added `aiofiles.os.{makedirs, removedirs}`.\n- added `aiofiles.os.path.{exists, isfile, isdir, getsize, getatime, getctime, samefile, sameopenfile}`.\n  [#63](https://github.com/tinche/aiofiles/pull/63)\n- added `suffix`, `prefix`, `dir` args to `aiofiles.tempfile.temporarydirectory`.\n  [#116](https://github.com/tinche/aiofiles/pull/116)\n\n#### 0.7.0 (2021-05-17)\n\n- added the `aiofiles.tempfile` module for async temporary files.\n  [#56](https://github.com/tinche/aiofiles/pull/56)\n- switched to poetry and github actions.\n- dropped 3.5 support.\n\n#### 0.6.0 (2020-10-27)\n\n- `aiofiles` is now tested on ppc64le.\n- added `name` and `mode` properties to async file objects.\n  [#82](https://github.com/tinche/aiofiles/pull/82)\n- fixed a deprecationwarning internally.\n  [#75](https://github.com/tinche/aiofiles/pull/75)\n- python 3.9 support and tests.\n\n#### 0.5.0 (2020-04-12)\n\n- python 3.8 support. code base modernization (using `async/await` instead of `asyncio.coroutine`/`yield from`).\n- added `aiofiles.os.remove`, `aiofiles.os.rename`, `aiofiles.os.mkdir`, `aiofiles.os.rmdir`.\n  [#62](https://github.com/tinche/aiofiles/pull/62)\n\n#### 0.4.0 (2018-08-11)\n\n- python 3.7 support.\n- removed python 3.3/3.4 support. if you use these versions, stick to aiofiles 0.3.x.\n\n#### 0.3.2 (2017-09-23)\n\n- the license is now included in the sdist.\n  [#31](https://github.com/tinche/aiofiles/pull/31)\n\n#### 0.3.1 (2017-03-10)\n\n- introduced a changelog.\n- `aiofiles.os.sendfile` will now work if the standard `os` module contains a `sendfile` function.\n\n### contributing\n\ncontributions are very welcome. tests can be run with `tox`, please ensure\nthe coverage at least stays the same before you submit a pull request.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aiofiles",
  "package_url": "https://pypi.org/project/aiofiles/",
  "project_url": "https://pypi.org/project/aiofiles/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Tinche/aiofiles/issues",
    "Changelog": "https://github.com/Tinche/aiofiles#history",
    "repository": "https://github.com/Tinche/aiofiles"
  },
  "release_url": "https://pypi.org/project/aiofiles/23.2.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "file support for asyncio.",
  "version": "23.2.1",
  "releases": [],
  "developers": [
    "tinchester@gmail.com"
  ],
  "kwds": "asyncio aiofiles pyversions statvfs python",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aiofiles",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet"
  ],
  "description": "python client for cloud spanner\n===============================\n\n|ga| |pypi| |versions| \n\n`cloud spanner`_ is the world's first fully managed relational database service\nto offer both strong consistency and horizontal scalability for\nmission-critical online transaction processing (oltp) applications. with cloud\nspanner you enjoy all the traditional benefits of a relational database; but\nunlike any other relational database service, cloud spanner scales horizontally\nto hundreds or thousands of servers to handle the biggest transactional\nworkloads.\n\n\n- `client library documentation`_\n- `product documentation`_\n\n.. |ga| image:: https://img.shields.io/badge/support-ga-gold.svg\n   :target: https://github.com/googleapis/google-cloud-python/blob/main/readme.rst#general-availability\n.. |pypi| image:: https://img.shields.io/pypi/v/google-cloud-spanner.svg\n   :target: https://pypi.org/project/google-cloud-spanner/\n.. |versions| image:: https://img.shields.io/pypi/pyversions/google-cloud-spanner.svg\n   :target: https://pypi.org/project/google-cloud-spanner/\n.. _cloud spanner: https://cloud.google.com/spanner/\n.. _client library documentation: https://cloud.google.com/python/docs/reference/spanner/latest\n.. _product documentation:  https://cloud.google.com/spanner/docs\n\nquick start\n-----------\n\nin order to use this library, you first need to go through the following steps:\n\n1. `select or create a cloud platform project.`_\n2. `enable billing for your project.`_\n3. `enable the google cloud spanner api.`_\n4. `setup authentication.`_\n\n.. _select or create a cloud platform project.: https://console.cloud.google.com/project\n.. _enable billing for your project.: https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project\n.. _enable the google cloud spanner api.:  https://cloud.google.com/spanner\n.. _setup authentication.: https://googleapis.dev/python/google-api-core/latest/auth.html\n\ninstallation\n~~~~~~~~~~~~\n\ninstall this library in a `virtualenv`_ using pip. `virtualenv`_ is a tool to\ncreate isolated python environments. the basic problem it addresses is one of\ndependencies and versions, and indirectly permissions.\n\nwith `virtualenv`_, it's possible to install this library without needing system\ninstall permissions, and without clashing with the installed system\ndependencies.\n\n.. _`virtualenv`: https://virtualenv.pypa.io/en/latest/\n\n\nsupported python versions\n^^^^^^^^^^^^^^^^^^^^^^^^^\npython >= 3.7\n\ndeprecated python versions\n^^^^^^^^^^^^^^^^^^^^^^^^^^\npython == 2.7.\npython == 3.5.\npython == 3.6.\n\n\nmac/linux\n^^^^^^^^^\n\n.. code-block:: console\n\n    pip install virtualenv\n    virtualenv <your-env>\n    source <your-env>/bin/activate\n    <your-env>/bin/pip install google-cloud-spanner\n\n\nwindows\n^^^^^^^\n\n.. code-block:: console\n\n    pip install virtualenv\n    virtualenv <your-env>\n    <your-env>\\scripts\\activate\n    <your-env>\\scripts\\pip.exe install google-cloud-spanner\n\n\nexample usage\n-------------\n\n\nexecuting arbitrary sql in a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngenerally, to work with cloud spanner, you will want a transaction. the\npreferred mechanism for this is to create a single function, which executes\nas a callback to ``database.run_in_transaction``:\n\n.. code:: python\n\n    # first, define the function that represents a single \"unit of work\"\n    # that should be run within the transaction.\n    def update_anniversary(transaction, person_id, unix_timestamp):\n        # the query itself is just a string.\n        #\n        # the use of @parameters is recommended rather than doing your\n        # own string interpolation; this provides protections against\n        # sql injection attacks.\n        query = \"\"\"select anniversary from people\n            where id = @person_id\"\"\"\n\n        # when executing the sql statement, the query and parameters are sent\n        # as separate arguments. when using parameters, you must specify\n        # both the parameters themselves and their types.\n        row = transaction.execute_sql(\n            query=query,\n            params={'person_id': person_id},\n            param_types={\n                'person_id': types.int64_param_type,\n            },\n        ).one()\n\n        # now perform an update on the data.\n        old_anniversary = row[0]\n        new_anniversary = _compute_anniversary(old_anniversary, years)\n        transaction.update(\n            'people',\n            ['person_id', 'anniversary'],\n            [person_id, new_anniversary],\n        )\n\n    # actually run the `update_anniversary` function in a transaction.\n    database.run_in_transaction(update_anniversary,\n        person_id=42,\n        unix_timestamp=1335020400,\n    )\n\n\nselect records using a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nonce you have a transaction object (such as the first argument sent to\n``run_in_transaction``), reading data is easy:\n\n.. code:: python\n\n    # define a select query.\n    query = \"\"\"select e.first_name, e.last_name, p.telephone\n        from employees as e, phones as p\n        where p.employee_id == e.employee_id\"\"\"\n\n    # execute the query and return results.\n    result = transaction.execute_sql(query)\n    for row in result.rows:\n        print(row)\n\n\ninsert records using data manipulation language (dml) with a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nuse the ``execute_update()`` method to execute a dml statement:\n\n.. code:: python\n\n    spanner_client = spanner.client()\n    instance = spanner_client.instance(instance_id)\n    database = instance.database(database_id)\n\n    def insert_singers(transaction):\n        row_ct = transaction.execute_update(\n            \"insert singers (singerid, firstname, lastname) \"\n            \" values (10, 'virginia', 'watson')\"\n        )\n\n        print(\"{} record(s) inserted.\".format(row_ct))\n\n    database.run_in_transaction(insert_singers)\n\n\ninsert records using mutations with a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nto add one or more records to a table, use ``insert``:\n\n.. code:: python\n\n    transaction.insert(\n        'citizens',\n        columns=['email', 'first_name', 'last_name', 'age'],\n        values=[\n            ['phred@exammple.com', 'phred', 'phlyntstone', 32],\n            ['bharney@example.com', 'bharney', 'rhubble', 31],\n        ],\n    )\n\n\nupdate records using data manipulation language (dml) with a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    spanner_client = spanner.client()\n    instance = spanner_client.instance(instance_id)\n    database = instance.database(database_id)\n\n    def update_albums(transaction):\n        row_ct = transaction.execute_update(\n            \"update albums \"\n            \"set marketingbudget = marketingbudget * 2 \"\n            \"where singerid = 1 and albumid = 1\"\n        )\n\n        print(\"{} record(s) updated.\".format(row_ct))\n\n    database.run_in_transaction(update_albums)\n\n\nupdate records using mutations with a transaction\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``transaction.update`` updates one or more existing records in a table.  fails\nif any of the records does not already exist.\n\n.. code:: python\n\n    transaction.update(\n        'citizens',\n        columns=['email', 'age'],\n        values=[\n            ['phred@exammple.com', 33],\n            ['bharney@example.com', 32],\n        ],\n    )\n\n\nconnection api\n--------------\nconnection api represents a wrap-around for python spanner api, written in accordance with pep-249, and provides a simple way of communication with a spanner database through connection objects:\n\n.. code:: python\n\n   from google.cloud.spanner_dbapi.connection import connect\n\n   connection = connect(\"instance-id\", \"database-id\")\n   connection.autocommit = true\n\n   cursor = connection.cursor()   \n   cursor.execute(\"select * from table_name\")\n\n   result = cursor.fetchall()\n\n\naborted transactions retry mechanism\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nin ``!autocommit`` mode, transactions can be aborted due to transient errors. in most cases retry of an aborted transaction solves the problem. to simplify it, connection tracks sql statements, executed in the current transaction. in case the transaction aborted, the connection initiates a new one and re-executes all the statements. in the process, the connection checks that retried statements are returning the same results that the original statements did. if results are different, the transaction is dropped, as the underlying data changed, and auto retry is impossible.\n\nauto-retry of aborted transactions is enabled only for ``!autocommit`` mode, as in ``autocommit`` mode transactions are never aborted.\n\n\nnext steps\n~~~~~~~~~~\n\n- see the `client library documentation`_ to learn how to connect to cloud\n  spanner using this client library.\n- read the `product documentation`_ to learn\n  more about the product and see how-to guides.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "google-cloud-spanner",
  "package_url": "https://pypi.org/project/google-cloud-spanner/",
  "project_url": "https://pypi.org/project/google-cloud-spanner/",
  "project_urls": {
    "Homepage": "https://github.com/googleapis/python-spanner"
  },
  "release_url": "https://pypi.org/project/google-cloud-spanner/3.40.1/",
  "requires_dist": [
    "google-api-core[grpc] (!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.0)",
    "google-cloud-core (<3.0dev,>=1.4.1)",
    "grpc-google-iam-v1 (<1.0.0dev,>=0.12.4)",
    "proto-plus (<2.0.0dev,>=1.22.0)",
    "sqlparse (>=0.4.4)",
    "protobuf (!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5)",
    "libcst (>=0.2.5) ; extra == 'libcst'",
    "opentelemetry-api (>=1.1.0) ; extra == 'tracing'",
    "opentelemetry-sdk (>=1.1.0) ; extra == 'tracing'",
    "opentelemetry-instrumentation (<0.23dev,>=0.20b0) ; extra == 'tracing'"
  ],
  "requires_python": ">=3.7",
  "summary": "google cloud spanner api client library",
  "version": "3.40.1",
  "releases": [],
  "developers": [
    "google_llc",
    "googleapis-packages@google.com"
  ],
  "kwds": "spanner_dbapi cloud spanner_client _cloud spanner",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_google_cloud_spanner",
  "homepage": "https://github.com/googleapis/python-spanner",
  "release_count": 92,
  "dependency_ids": [
    "pypi_google_api_core",
    "pypi_google_cloud_core",
    "pypi_grpc_google_iam_v1",
    "pypi_libcst",
    "pypi_opentelemetry_api",
    "pypi_opentelemetry_instrumentation",
    "pypi_opentelemetry_sdk",
    "pypi_proto_plus",
    "pypi_protobuf",
    "pypi_sqlparse"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "|image0|\n\n-  `live demo <http://alphatechadmin.pythonanywhere.com>`__\n\n--------------\n\n|circleci| |pypi python versions| |pypi| |conda| |readthedocs| |codecov|\n|downloads| |open in vs code|\n\nwhat is it?\n-----------\n\nd-tale is the combination of a flask back-end and a react front-end to\nbring you an easy way to view & analyze pandas data structures. it\nintegrates seamlessly with ipython notebooks & python/ipython terminals.\ncurrently this tool supports such pandas objects as dataframe, series,\nmultiindex, datetimeindex & rangeindex.\n\norigins\n-------\n\nd-tale was the product of a sas to python conversion. what was\noriginally a perl script wrapper on top of sas\u2019s ``insight`` function is\nnow a lightweight web client on top of pandas data structures.\n\nin the news\n-----------\n\n-  `4 libraries that can perform eda in one line of python\n   code <https://towardsdatascience.com/4-libraries-that-can-perform-eda-in-one-line-of-python-code-b13938a06ae>`__\n-  `react status <https://react.statuscode.com/issues/204>`__\n-  `kdnuggets <https://www.kdnuggets.com/2020/08/bring-pandas-dataframes-life-d-tale.html>`__\n-  `man institute <https://www.man.com/maninstitute/d-tale>`__ (warning:\n   contains deprecated functionality)\n-  `python\n   bytes <https://pythonbytes.fm/episodes/show/169/jupyter-notebooks-natively-on-your-ipad>`__\n-  `flaskcon 2020 <https://www.youtube.com/watch?v=bngolmuwbp4&t=33s>`__\n-  `san diego\n   python <https://www.youtube.com/watch?v=flsgur5yqee&t=29s>`__\n-  `medium: towards data\n   science <https://towardsdatascience.com/introduction-to-d-tale-5eddd81abe3f>`__\n-  `medium: exploratory data analysis \u2013 using\n   d-tale <https://medium.com/da-tum/exploratory-data-analysis-1-4-using-d-tale-99a2c267db79>`__\n-  `eod notes: using python and dtale to analyze\n   correlations <https://www.google.com/amp/s/eod-notes.com/2020/05/07/using-python-and-dtale-to-analyze-correlations/amp/>`__\n-  `data exploration is now super easy w/\n   d-tale <https://dibyendudeb.com/d-tale-data-exploration-tool/>`__\n-  `practical business\n   python <https://pbpython.com/dataframe-gui-overview.html>`__\n\ntutorials\n---------\n\n-  `pip install python youtube\n   channel <https://m.youtube.com/watch?v=0rihzndqc7k&feature=youtu.be>`__\n-  `machine_learning_2019 <https://www.youtube.com/watch?v=-egteuvby9c>`__\n-  `d-tale the best library to perform exploratory data analysis using\n   single line of\n   code\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25 <https://www.youtube.com/watch?v=xsxgcuiezuc>`__\n-  `explore and analyze pandas data structures w/\n   d-tale <https://m.youtube.com/watch?v=juu5iyvgqcg>`__\n-  `data preprocessing simplest method\n   \ud83d\udd25 <https://www.youtube.com/watch?v=q2kmnpkgn4g>`__\n\n## related resources\n\n-  `adventures in flask while developing\n   d-tale <https://github.com/man-group/dtale/blob/master/docs/flaskcon/flaskadventures.md>`__\n-  `adding range selection to\n   react-virtualized <https://github.com/man-group/dtale/blob/master/docs/range_selection.md>`__\n-  `building draggable/resizable\n   modals <https://github.com/man-group/dtale/blob/master/docs/draggable_resizable_modals.md>`__\n-  `embedding flask apps within\n   streamlit <https://github.com/man-group/dtale/blob/master/docs/embedded_streamlit.md>`__\n\nwhere to get it\n---------------\n\nthe source code is currently hosted on github at:\nhttps://github.com/man-group/dtale\n\nbinary installers for the latest released version are available at the\n`python package index <https://pypi.org/project/dtale>`__ and on conda\nusing `conda-forge <https://github.com/conda-forge/dtale-feedstock>`__.\n\n.. code:: sh\n\n   # conda\n   conda install dtale -c conda-forge\n   # if you want to also use \"export to png\" for charts\n   conda install -c plotly python-kaleido\n\n.. code:: sh\n\n   # or pypi\n   pip install dtale\n\ngetting started\n---------------\n\n======== =========\npycharm  jupyter\n======== =========\n|image9| |image10|\n======== =========\n\npython terminal\n~~~~~~~~~~~~~~~\n\nthis comes courtesy of pycharm |image11| feel free to invoke ``python``\nor ``ipython`` directly and use the commands in the screenshot above and\nit should work\n\nissues with windows firewall\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you run into issues with viewing d-tale in your browser on windows\nplease try making python public under \u201callowed apps\u201d in your firewall\nconfiguration. here is a nice article: `how to allow apps to communicate\nthrough the windows\nfirewall <https://www.howtogeek.com/howto/uncategorized/how-to-create-exceptions-in-windows-vista-firewall/>`__\n\nadditional functions available programmatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   import dtale\n   import pandas as pd\n\n   df = pd.dataframe([dict(a=1,b=2,c=3)])\n\n   # assigning a reference to a running d-tale process\n   d = dtale.show(df)\n\n   # accessing data associated with d-tale process\n   tmp = d.data.copy()\n   tmp['d'] = 4\n\n   # altering data associated with d-tale process\n   # fyi: this will clear any front-end settings you have at the time for this process (filter, sorts, formatting)\n   d.data = tmp\n\n   # shutting down d-tale process\n   d.kill()\n\n   # using python's `webbrowser` package it will try and open your server's default browser to this process\n   d.open_browser()\n\n   # there is also some helpful metadata about the process\n   d._data_id  # the process's data identifier\n   d._url  # the url to access the process\n\n   d2 = dtale.get_instance(d._data_id)  # returns a new reference to the instance running at that data_id\n\n   dtale.instances()  # prints a list of all ids & urls of running d-tale sessions\n\nlicense\n-------\n\nd-tale is licensed under the gnu lgpl v2.1. a copy of which is included\nin\n`license <https://github.com/man-group/dtale/blob/master/license.md>`__\n\nadditional documentation\n------------------------\n\nlocated on the main `github repo <https://github.com/man-group/dtale>`__\n\n.. |image0| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/title.png\n   :target: https://github.com/man-group/dtale\n.. |circleci| image:: https://circleci.com/gh/man-group/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151\n   :target: https://circleci.com/gh/man-group/dtale\n.. |pypi python versions| image:: https://img.shields.io/pypi/pyversions/dtale.svg\n   :target: https://pypi.python.org/pypi/dtale/\n.. |pypi| image:: https://img.shields.io/pypi/v/dtale\n   :target: https://pypi.org/project/dtale/\n.. |conda| image:: https://img.shields.io/conda/v/conda-forge/dtale\n   :target: https://anaconda.org/conda-forge/dtale\n.. |readthedocs| image:: https://readthedocs.org/projects/dtale/badge\n   :target: https://dtale.readthedocs.io\n.. |codecov| image:: https://codecov.io/gh/man-group/dtale/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/man-group/dtale\n.. |downloads| image:: https://pepy.tech/badge/dtale\n   :target: https://pepy.tech/project/dtale\n.. |open in vs code| image:: https://img.shields.io/badge/visual_studio_code-0078d4?style=for-the-badge&logo=visual%20studio%20code&logocolor=white\n   :target: https://open.vscode.dev/man-group/dtale\n.. |image9| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_demo_mini.gif\n.. |image10| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_ipython.gif\n.. |image11| image:: https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/python_terminal.png\n",
  "docs_url": null,
  "keywords": "numeric,pandas,visualization,flask",
  "license": "lgpl",
  "name": "dtale",
  "package_url": "https://pypi.org/project/dtale/",
  "project_url": "https://pypi.org/project/dtale/",
  "project_urls": {
    "Homepage": "https://github.com/man-group/dtale"
  },
  "release_url": "https://pypi.org/project/dtale/3.8.1/",
  "requires_dist": [
    "dash-colorscales",
    "dash-daq",
    "Flask-Compress",
    "future (>=0.14.0)",
    "kaleido",
    "missingno",
    "pandas",
    "squarify",
    "strsimpy",
    "six",
    "xlrd",
    "lz4 (<=2.2.1) ; python_version < \"3.0\"",
    "dash-bootstrap-components (<=0.10.5) ; python_version < \"3.0\"",
    "numpy (<=1.16.6) ; python_version < \"3.0\"",
    "openpyxl (<=2.6.4) ; python_version < \"3.0\"",
    "scikit-learn (<=0.20.4) ; python_version < \"3.0\"",
    "xarray (<=0.11.3) ; python_version < \"3.0\"",
    "lz4 (<=3.1.10) ; python_version < \"3.6\"",
    "et-xmlfile (<=1.0.1) ; python_version < \"3.6\"",
    "plotly (<=4.14.3) ; python_version < \"3.6\"",
    "seaborn (<=0.9.1) ; python_version < \"3.6\"",
    "Flask (<=1.1.4) ; python_version < \"3.7\"",
    "itsdangerous (<=1.1.0) ; python_version < \"3.7\"",
    "networkx (<=2.2) ; python_version <= \"3.4\"",
    "kiwisolver (<=1.1.0) ; python_version <= \"3.6\"",
    "requests (<=2.27.1) ; python_version <= \"3.6\"",
    "werkzeug (<=1.0.1) ; python_version <= \"3.6\"",
    "beautifulsoup4 (<=4.9.3) ; python_version == \"2.7\"",
    "Brotli (<=1.0.9) ; python_version == \"2.7\"",
    "certifi (<=2021.10.8) ; python_version == \"2.7\"",
    "cycler (<=0.10.0) ; python_version == \"2.7\"",
    "dash (<=1.21.0) ; python_version == \"2.7\"",
    "decorator (<=4.4.2) ; python_version == \"2.7\"",
    "MarkupSafe (<=1.1.1) ; python_version == \"2.7\"",
    "matplotlib (<=2.2.5) ; python_version == \"2.7\"",
    "pyparsing (<=2.4.7) ; python_version == \"2.7\"",
    "scipy (<=1.2.3) ; python_version == \"2.7\"",
    "statsmodels (<=0.10.2) ; python_version == \"2.7\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.0\"",
    "scipy (<=1.5.4) ; python_version == \"3.0\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.0\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.1\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.1\"",
    "packaging (<=21.0) ; python_version == \"3.1\"",
    "scipy (<=1.5.4) ; python_version == \"3.1\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.1\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.2\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.2\"",
    "packaging (<=21.0) ; python_version == \"3.2\"",
    "scipy (<=1.5.4) ; python_version == \"3.2\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.2\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.3\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.3\"",
    "packaging (<=21.0) ; python_version == \"3.3\"",
    "scipy (<=1.5.4) ; python_version == \"3.3\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.3\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.4\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.4\"",
    "packaging (<=21.0) ; python_version == \"3.4\"",
    "scipy (<=1.5.4) ; python_version == \"3.4\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.4\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.5\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.5\"",
    "networkx (<=2.4) ; python_version == \"3.5\"",
    "packaging (<=21.0) ; python_version == \"3.5\"",
    "scipy (<=1.5.4) ; python_version == \"3.5\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.5\"",
    "cycler (<=0.11.0) ; python_version == \"3.6\"",
    "dash (<=2.0.0) ; python_version == \"3.6\"",
    "dash-bootstrap-components (<=1.2.1) ; python_version == \"3.6\"",
    "dataclasses (<1) ; python_version == \"3.6\"",
    "immutables (<=0.19) ; python_version == \"3.6\"",
    "joblib (<=1.1.1) ; python_version == \"3.6\"",
    "MarkupSafe (<=2.0.1) ; python_version == \"3.6\"",
    "matplotlib (<=3.3.4) ; python_version == \"3.6\"",
    "networkx (<=2.5.1) ; python_version == \"3.6\"",
    "packaging (<=21.0) ; python_version == \"3.6\"",
    "scikit-learn (<=0.24.2) ; python_version == \"3.6\"",
    "scipy (<=1.5.4) ; python_version == \"3.6\"",
    "seaborn (<=0.11.2) ; python_version == \"3.6\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.6\"",
    "tenacity (<=7.0.0) ; python_version == \"3.6\"",
    "threadpoolctl (<=3.1.0) ; python_version == \"3.6\"",
    "zipp (<=3.15.0) ; python_version == \"3.6\"",
    "dash (!=2.13.0) ; python_version == \"3.7\"",
    "matplotlib (<=3.5.3) ; python_version == \"3.7\"",
    "networkx (<=2.6.3) ; python_version == \"3.7\"",
    "packaging (<=21.0) ; python_version == \"3.7\"",
    "scikit-learn (<=1.0.2) ; python_version == \"3.7\"",
    "scipy (<=1.7.3) ; python_version == \"3.7\"",
    "seaborn (<=0.12.2) ; python_version == \"3.7\"",
    "statsmodels (<=0.12.2) ; python_version == \"3.7\"",
    "threadpoolctl (<=3.1.0) ; python_version == \"3.7\"",
    "werkzeug (==2.2.3) ; python_version == \"3.7\"",
    "contourpy (<1.2.0) ; python_version == \"3.8\"",
    "matplotlib (<=3.7.2) ; python_version == \"3.8\"",
    "networkx (<=3.1) ; python_version == \"3.8\"",
    "scipy (<=1.10.1) ; python_version == \"3.8\"",
    "beautifulsoup4 ; python_version > \"3.0\"",
    "certifi ; python_version > \"3.0\"",
    "flask-ngrok ; python_version > \"3.0\"",
    "lz4 ; python_version > \"3.6\"",
    "cycler ; python_version > \"3.6\"",
    "dash-bootstrap-components (<=1.3.1) ; python_version > \"3.6\"",
    "dash ; python_version > \"3.7\"",
    "scikit-learn ; python_version > \"3.7\"",
    "seaborn ; python_version > \"3.7\"",
    "statsmodels ; python_version > \"3.7\"",
    "werkzeug ; python_version > \"3.7\"",
    "networkx ; python_version > \"3.8\"",
    "numpy ; python_version >= \"3.0\"",
    "openpyxl (!=3.2.0b1) ; python_version >= \"3.0\"",
    "xarray ; python_version >= \"3.0\"",
    "et-xmlfile ; python_version >= \"3.6\"",
    "plotly ; python_version >= \"3.6\"",
    "Flask (<2.3) ; python_version >= \"3.7\"",
    "itsdangerous ; python_version >= \"3.7\"",
    "requests ; python_version >= \"3.7\"",
    "contourpy ; python_version >= \"3.9\"",
    "matplotlib ; python_version >= \"3.9\"",
    "scipy ; python_version >= \"3.9\"",
    "arctic (<=1.79.4) ; extra == 'arctic'",
    "arcticdb ; extra == 'arcticdb'",
    "dash-bio (==0.7.1) ; (python_version == \"2.7\") and extra == 'dash-bio'",
    "ParmEd (==3.4.3) ; (python_version == \"3.6\") and extra == 'dash-bio'",
    "dash-bio ; (python_version > \"3.0\") and extra == 'dash-bio'",
    "rpy2 ; (python_version > \"3.0\") and extra == 'r'",
    "redis ; extra == 'redis'",
    "redislite ; extra == 'redis'",
    "streamlit ; extra == 'streamlit'",
    "swifter ; extra == 'swifter'",
    "ipython (<8.0.0) ; extra == 'tests'",
    "mock ; extra == 'tests'",
    "nbconvert ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pytest-server-fixtures ; extra == 'tests'",
    "importlib-metadata ; (python_version != \"3.6\") and extra == 'tests'",
    "importlib-metadata (<=3.7.3) ; (python_version <= \"3.6\") and extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "web client for visualizing pandas objects",
  "version": "3.8.1",
  "releases": [],
  "developers": [
    "man_alpha_technology",
    "manalphatech@man.com"
  ],
  "kwds": "pandas python dataframes pythonbytes flaskcon",
  "license_kwds": "lgpl",
  "libtype": "pypi",
  "id": "pypi_dtale",
  "homepage": "https://github.com/man-group/dtale",
  "release_count": 160,
  "dependency_ids": [
    "pypi_arctic",
    "pypi_arcticdb",
    "pypi_beautifulsoup4",
    "pypi_brotli",
    "pypi_certifi",
    "pypi_contourpy",
    "pypi_cycler",
    "pypi_dash",
    "pypi_dash_bio",
    "pypi_dash_bootstrap_components",
    "pypi_dash_colorscales",
    "pypi_dash_daq",
    "pypi_dataclasses",
    "pypi_decorator",
    "pypi_et_xmlfile",
    "pypi_flask",
    "pypi_flask_compress",
    "pypi_flask_ngrok",
    "pypi_future",
    "pypi_immutables",
    "pypi_importlib_metadata",
    "pypi_ipython",
    "pypi_itsdangerous",
    "pypi_joblib",
    "pypi_kaleido",
    "pypi_kiwisolver",
    "pypi_lz4",
    "pypi_markupsafe",
    "pypi_matplotlib",
    "pypi_missingno",
    "pypi_mock",
    "pypi_nbconvert",
    "pypi_networkx",
    "pypi_numpy",
    "pypi_openpyxl",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_parmed",
    "pypi_plotly",
    "pypi_pyparsing",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_server_fixtures",
    "pypi_redis",
    "pypi_redislite",
    "pypi_requests",
    "pypi_rpy2",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_six",
    "pypi_squarify",
    "pypi_statsmodels",
    "pypi_streamlit",
    "pypi_strsimpy",
    "pypi_swifter",
    "pypi_tenacity",
    "pypi_threadpoolctl",
    "pypi_werkzeug",
    "pypi_xarray",
    "pypi_xlrd",
    "pypi_zipp"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities",
    "typing :: stubs only"
  ],
  "description": "|githubactions| |readthedocs| |pypi| |downloads| |codecov| |circleci| |appveyor|\n\n.. .. |codequality| |twitterfollow|\n\n\n.. the large version wont work because github strips rst image rescaling. https://i.imgur.com/acwvrol.png\n.. image:: https://i.imgur.com/poyiswe.png\n   :height: 100px\n   :align: left\n\n\n..   .. raw:: html\n..       <img src=\"https://i.imgur.com/acwvrol.png\" height=\"100px\">\n\n\nubelt is a utility library for python with a stdlib like feel.\n\n\nelevator pitch:\n===============\n\nis the python standard library good?  yes.  could it's conciseness be improved?  yes.  ubelt aims to provide a quicker way to express things you can do in the standard library.  progress?  `ub.progiter <https://ubelt.readthedocs.io/en/latest/ubelt.progiter.html#ubelt.progiter.progiter>`_.  hashing?  `ub.hash_data <https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_data>`_ / `ub.hash_file <https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_file>`_.  caching?  `ub.cacher <https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.cacher>`_ / `ub.cachestamp <https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.cachestamp>`_.  shell commands?  `ub.cmd <https://ubelt.readthedocs.io/en/latest/ubelt.util_cmd.html#ubelt.util_cmd.cmd>`_. there are similar functions for downloading data, futures-based parallel (or serial) job execution, pretty reprs, path management, iteration, and one of my favorites: set operation enriched dictionaries: `ub.udict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.udict>`_.\n\nthere are 120ish functions and classes to help make your code shorter and easier to express concisely.  the library is fast to install and import, all dependencies are optional.  as of 2023 it is 6 years old, regularly maintained, and mature.  it is well tested and has moderate usage.\n\nto learn more, the function usefulness chart is a good place to start.  this shows how often i use particular functions, and while some of the less used ones are candidates for removal, some of them still worth checking out. for a slightly slower start, read the introduction:\n\n\nintroduction:\n=============\n\nubelt is a lightweight library of robust, tested, documented, and simple functions\nthat extend the python standard library. it has a flat api that all behaves\nsimilarly on windows, mac, and linux (up to some small unavoidable\ndifferences).  almost every function in ``ubelt`` was written with a doctest.\nthis provides helpful documentation and example usage as well as helping\nachieve 100% test coverage (with minor exceptions on windows).\n\n* goal: provide simple functions that accomplish common tasks not yet addressed by the python standard library.\n\n* constraints: must be low-impact pure python; it should be easy to install and use.\n\n* method: all functions are written with docstrings and doctests to ensure that a baseline level of documentation and testing always exists (even if functions are copy/pasted into other libraries)\n\n* motto: good utilities lift all codes.\n\n\nread the docs here: http://ubelt.readthedocs.io/en/latest/\n\nthese are some of the tasks that ubelt's api enables:\n\n  - extended pathlib with expand, ensuredir, endswith, augment, delete (ub.path)\n\n  - get paths to cross platform data/cache/config directories  (ub.path.appdir, ...)\n\n  - perform set operations on dictionaries (setdict)\n\n  - a dictionary with extended helper methods like subdict, take, peek_value, invert, sorted_keys, sorted_vals (udict)\n\n  - hash common data structures like list, dict, int, str, etc. (hash_data)\n\n  - hash files (hash_file)\n\n  - cache a block of code (cacher, cachestamp)\n\n  - time a block of code (timer)\n\n  - show loop progress with less overhead than tqdm (progiter)\n\n  - download a file with optional caching and hash verification (download, grabdata)\n\n  - run shell commands (cmd)\n\n  - find a file or directory in candidate locations (find_path, find_exe)\n\n  - string-repr for nested data structures (urepr)\n\n  - color text with ansi tags (color_text)\n\n  - horizontally concatenate multiline strings (hzcat)\n\n  - create cross platform symlinks (symlink)\n\n  - import a module using the path to that module (import_module_from_path)\n\n  - check if a particular flag or value is on the command line (argflag, argval)\n\n  - memoize functions (memoize, memoize_method, memoize_property)\n\n  - build ordered sets (oset)\n\n  - argmax/min/sort on lists and dictionaries (argmin, argsort,)\n\n  - get a histogram of items or find duplicates in a list (dict_hist, find_duplicates)\n\n  - group a sequence of items by some criterion (group_items)\n\nubelt is small. its top-level api is defined using roughly 40 lines:\n\n.. code:: python\n\n    from ubelt.util_arg import (argflag, argval,)\n    from ubelt.util_cache import (cachestamp, cacher,)\n    from ubelt.util_colors import (no_color, color_text, highlight_code,)\n    from ubelt.util_const import (noparam,)\n    from ubelt.util_cmd import (cmd,)\n    from ubelt.util_dict import (autodict, autoordereddict, setdict, udict, ddict,\n                                 dict_diff, dict_hist, dict_isect, dict_subset,\n                                 dict_union, dzip, find_duplicates, group_items,\n                                 invert_dict, map_keys, map_vals, map_values,\n                                 named_product, odict, sdict, sorted_keys,\n                                 sorted_vals, sorted_values, udict, varied_values,)\n    from ubelt.util_deprecate import (schedule_deprecation,)\n    from ubelt.util_download import (download, grabdata,)\n    from ubelt.util_download_manager import (downloadmanager,)\n    from ubelt.util_func import (compatible, identity, inject_method,)\n    from ubelt.util_repr import (reprextensions, urepr,)\n    from ubelt.util_futures import (executor, jobpool,)\n    from ubelt.util_io import (delete, touch,)\n    from ubelt.util_links import (symlink,)\n    from ubelt.util_list import (allsame, argmax, argmin, argsort, argunique,\n                                 boolmask, chunks, compress, flatten, iter_window,\n                                 iterable, peek, take, unique, unique_flags,)\n    from ubelt.util_hash import (hash_data, hash_file,)\n    from ubelt.util_import import (import_module_from_name,\n                                   import_module_from_path, modname_to_modpath,\n                                   modpath_to_modname, split_modpath,)\n    from ubelt.util_indexable import (indexablewalker, indexable_allclose,)\n    from ubelt.util_memoize import (memoize, memoize_method, memoize_property,)\n    from ubelt.util_mixins import (nicerepr,)\n    from ubelt.util_path import (path, tempdir, augpath, ensuredir, expandpath,\n                                 shrinkuser, userhome,)\n    from ubelt.util_platform import (darwin, linux, posix, win32, find_exe,\n                                     find_path, platform_cache_dir,\n                                     platform_config_dir, platform_data_dir,)\n    from ubelt.util_str import (codeblock, hzcat, indent, paragraph,)\n    from ubelt.util_stream import (capturestdout, capturestream, teestringio,)\n    from ubelt.util_time import (timer, timeparse, timestamp,)\n    from ubelt.util_zip import (split_archive, zopen,)\n    from ubelt.orderedset import (orderedset, oset,)\n    from ubelt.progiter import (progiter,)\n\n\ninstallation:\n=============\n\nubelt is distributed on pypi as a universal wheel and can be pip installed on\npython 3.6+. installations are tested on cpython and pypy implementations. for\npython 2.7 and 3.5, the last supported version was 0.11.1.\n\n::\n\n    pip install ubelt\n\nnote that our distributions on pypi are signed with gpg. the signing public key\nis ``d297d757``; this should agree with the value in `dev/public_gpg_key`.\n\n\nfunction usefulness\n===================\n\nwhen i had to hand pick a set of functions that i thought were the most useful\ni chose these and provided some comment on why:\n\n.. code:: python\n\n    import ubelt as ub\n\n    ub.path  # inherits from pathlib.path with quality of life improvements\n    ub.udict  # inherits from dict with keywise set operations and quality of life improvements\n    ub.cacher  # configuration based on-disk cachine\n    ub.cachestamp  # indirect caching with corruption detection\n    ub.hash_data  # hash mutable python containers, useful with cacher to config strings\n    ub.cmd  # combines the best of subprocess.popen and os.system\n    ub.download  # download a file with a single command. also see grabdata for the same thing, but caching from cachestamp.\n    ub.jobpool   # easy multi-threading / multi-procesing / or single-threaded processing\n    ub.progiter  # a minimal progress iterator. it's single threaded, informative, and faster than tqdm.\n    ub.memoize  # like ``functools.cache``, but uses ub.hash_data if the args are not hashable.\n    ub.urepr  # readable representations of nested data structures\n\n\nbut a better way might to objectively measure the frequency of usage and built\na histogram of usefulness. i generated this histogram using ``python dev/maintain/gen_api_for_docs.py``,\nwhich roughly counts the number of times i've used a ubelt function in another\nproject. note: this measure is biased towards older functions.\n\n================================================================================================================================================ ================\n function name                                                                                                                                         usefulness\n================================================================================================================================================ ================\n`ubelt.urepr <https://ubelt.readthedocs.io/en/latest/ubelt.util_repr.html#ubelt.util_repr.urepr>`__                                                          2893\n`ubelt.path <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.path>`__                                                             992\n`ubelt.progiter <https://ubelt.readthedocs.io/en/latest/ubelt.progiter.html#ubelt.progiter.progiter>`__                                                       544\n`ubelt.paragraph <https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.paragraph>`__                                                     482\n`ubelt.take <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.take>`__                                                             387\n`ubelt.codeblock <https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.codeblock>`__                                                     358\n`ubelt.expandpath <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.expandpath>`__                                                 331\n`ubelt.cmd <https://ubelt.readthedocs.io/en/latest/ubelt.util_cmd.html#ubelt.util_cmd.cmd>`__                                                                 302\n`ubelt.udict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.udict>`__                                                           271\n`ubelt.ensuredir <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.ensuredir>`__                                                   256\n`ubelt.odict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.odict>`__                                                           253\n`ubelt.iterable <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.iterable>`__                                                     252\n`ubelt.ddict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.ddict>`__                                                           238\n`ubelt.nicerepr <https://ubelt.readthedocs.io/en/latest/ubelt.util_mixins.html#ubelt.util_mixins.nicerepr>`__                                                 221\n`ubelt.noparam <https://ubelt.readthedocs.io/en/latest/ubelt.util_const.html#ubelt.util_const.noparam>`__                                                     216\n`ubelt.map_vals <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_vals>`__                                                     215\n`ubelt.flatten <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.flatten>`__                                                       214\n`ubelt.dzip <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dzip>`__                                                             200\n`ubelt.oset <https://ubelt.readthedocs.io/en/latest/ubelt.orderedset.html#ubelt.orderedset.oset>`__                                                           198\n`ubelt.peek <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.peek>`__                                                             196\n`ubelt.argflag <https://ubelt.readthedocs.io/en/latest/ubelt.util_arg.html#ubelt.util_arg.argflag>`__                                                         177\n`ubelt.group_items <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.group_items>`__                                               171\n`ubelt.hash_data <https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_data>`__                                                   165\n`ubelt.grabdata <https://ubelt.readthedocs.io/en/latest/ubelt.util_download.html#ubelt.util_download.grabdata>`__                                             131\n`ubelt.argval <https://ubelt.readthedocs.io/en/latest/ubelt.util_arg.html#ubelt.util_arg.argval>`__                                                           125\n`ubelt.timer <https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.timer>`__                                                           120\n`ubelt.dict_isect <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_isect>`__                                                 113\n`ubelt.dict_hist <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_hist>`__                                                   111\n`ubelt.augpath <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.augpath>`__                                                       106\n`ubelt.identity <https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.identity>`__                                                     106\n`ubelt.ensure_app_cache_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_cache_dir>`__                     105\n`ubelt.allsame <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.allsame>`__                                                       102\n`ubelt.memoize <https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize>`__                                                  99\n`ubelt.color_text <https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.color_text>`__                                              98\n`ubelt.dict_diff <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_diff>`__                                                    95\n`ubelt.delete <https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.delete>`__                                                              89\n`ubelt.hzcat <https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.hzcat>`__                                                              88\n`ubelt.schedule_deprecation <https://ubelt.readthedocs.io/en/latest/ubelt.util_deprecate.html#ubelt.util_deprecate.schedule_deprecation>`__                    87\n`ubelt.named_product <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.named_product>`__                                            85\n`ubelt.compress <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.compress>`__                                                      85\n`ubelt.indexablewalker <https://ubelt.readthedocs.io/en/latest/ubelt.util_indexable.html#ubelt.util_indexable.indexablewalker>`__                              74\n`ubelt.indent <https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.indent>`__                                                            68\n`ubelt.jobpool <https://ubelt.readthedocs.io/en/latest/ubelt.util_futures.html#ubelt.util_futures.jobpool>`__                                                  67\n`ubelt.unique <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.unique>`__                                                          63\n`ubelt.dict_union <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_union>`__                                                  57\n`ubelt.map_keys <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_keys>`__                                                      49\n`ubelt.invert_dict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.invert_dict>`__                                                48\n`ubelt.iter_window <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.iter_window>`__                                                46\n`ubelt.timestamp <https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.timestamp>`__                                                    46\n`ubelt.argsort <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argsort>`__                                                        44\n`ubelt.cacher <https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.cacher>`__                                                        43\n`ubelt.find_exe <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.find_exe>`__                                              41\n`ubelt.symlink <https://ubelt.readthedocs.io/en/latest/ubelt.util_links.html#ubelt.util_links.symlink>`__                                                      41\n`ubelt.dict_subset <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.dict_subset>`__                                                41\n`ubelt.writeto <https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.writeto>`__                                                            40\n`ubelt.find_duplicates <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.find_duplicates>`__                                        39\n`ubelt.chunks <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.chunks>`__                                                          38\n`ubelt.hash_file <https://ubelt.readthedocs.io/en/latest/ubelt.util_hash.html#ubelt.util_hash.hash_file>`__                                                    37\n`ubelt.modname_to_modpath <https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.modname_to_modpath>`__                              37\n`ubelt.ensure_unicode <https://ubelt.readthedocs.io/en/latest/ubelt.util_str.html#ubelt.util_str.ensure_unicode>`__                                            33\n`ubelt.memoize_property <https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize_property>`__                                33\n`ubelt.highlight_code <https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.highlight_code>`__                                      33\n`ubelt.sorted_vals <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_vals>`__                                                32\n`ubelt.cachestamp <https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html#ubelt.util_cache.cachestamp>`__                                                30\n`ubelt.win32 <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.win32>`__                                                    28\n`ubelt.import_module_from_name <https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.import_module_from_name>`__                    27\n`ubelt.argmax <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argmax>`__                                                          27\n`ubelt.readfrom <https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.readfrom>`__                                                          23\n`ubelt.import_module_from_path <https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.import_module_from_path>`__                    22\n`ubelt.compatible <https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.compatible>`__                                                  17\n`ubelt.touch <https://ubelt.readthedocs.io/en/latest/ubelt.util_io.html#ubelt.util_io.touch>`__                                                                17\n`ubelt.executor <https://ubelt.readthedocs.io/en/latest/ubelt.util_futures.html#ubelt.util_futures.executor>`__                                                16\n`ubelt.memoize_method <https://ubelt.readthedocs.io/en/latest/ubelt.util_memoize.html#ubelt.util_memoize.memoize_method>`__                                    16\n`ubelt.sorted_keys <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_keys>`__                                                14\n`ubelt.autodict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.autodict>`__                                                      11\n`ubelt.shrinkuser <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.shrinkuser>`__                                                  11\n`ubelt.inject_method <https://ubelt.readthedocs.io/en/latest/ubelt.util_func.html#ubelt.util_func.inject_method>`__                                            10\n`ubelt.varied_values <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.varied_values>`__                                             9\n`ubelt.split_modpath <https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.split_modpath>`__                                         8\n`ubelt.modpath_to_modname <https://ubelt.readthedocs.io/en/latest/ubelt.util_import.html#ubelt.util_import.modpath_to_modname>`__                               8\n`ubelt.get_app_cache_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_cache_dir>`__                             8\n`ubelt.zopen <https://ubelt.readthedocs.io/en/latest/ubelt.util_zip.html#ubelt.util_zip.zopen>`__                                                               7\n`ubelt.linux <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.linux>`__                                                     7\n`ubelt.capturestdout <https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.capturestdout>`__                                         6\n`ubelt.download <https://ubelt.readthedocs.io/en/latest/ubelt.util_download.html#ubelt.util_download.download>`__                                               5\n`ubelt.timeparse <https://ubelt.readthedocs.io/en/latest/ubelt.util_time.html#ubelt.util_time.timeparse>`__                                                     5\n`ubelt.darwin <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.darwin>`__                                                   5\n`ubelt.argmin <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argmin>`__                                                           5\n`ubelt.find_path <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.find_path>`__                                             4\n`ubelt.indexable_allclose <https://ubelt.readthedocs.io/en/latest/ubelt.util_indexable.html#ubelt.util_indexable.indexable_allclose>`__                         4\n`ubelt.boolmask <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.boolmask>`__                                                       3\n`ubelt.map_values <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.map_values>`__                                                   2\n`ubelt.autoordereddict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.autoordereddict>`__                                         2\n`ubelt.argunique <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.argunique>`__                                                     2\n`ubelt.no_color <https://ubelt.readthedocs.io/en/latest/ubelt.util_colors.html#ubelt.util_colors.no_color>`__                                                   2\n`ubelt.udict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.udict>`__                                                             1\n`ubelt.unique_flags <https://ubelt.readthedocs.io/en/latest/ubelt.util_list.html#ubelt.util_list.unique_flags>`__                                               1\n`ubelt.userhome <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.userhome>`__                                                       0\n`ubelt.split_archive <https://ubelt.readthedocs.io/en/latest/ubelt.util_zip.html#ubelt.util_zip.split_archive>`__                                               0\n`ubelt.sorted_values <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sorted_values>`__                                             0\n`ubelt.sdict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.sdict>`__                                                             0\n`ubelt.platform_data_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_data_dir>`__                             0\n`ubelt.platform_config_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_config_dir>`__                         0\n`ubelt.platform_cache_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.platform_cache_dir>`__                           0\n`ubelt.get_app_data_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_data_dir>`__                               0\n`ubelt.get_app_config_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.get_app_config_dir>`__                           0\n`ubelt.ensure_app_data_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_data_dir>`__                         0\n`ubelt.ensure_app_config_dir <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.ensure_app_config_dir>`__                     0\n`ubelt.tempdir <https://ubelt.readthedocs.io/en/latest/ubelt.util_path.html#ubelt.util_path.tempdir>`__                                                         0\n`ubelt.teestringio <https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.teestringio>`__                                             0\n`ubelt.setdict <https://ubelt.readthedocs.io/en/latest/ubelt.util_dict.html#ubelt.util_dict.setdict>`__                                                         0\n`ubelt.reprextensions <https://ubelt.readthedocs.io/en/latest/ubelt.util_repr.html#ubelt.util_repr.reprextensions>`__                                           0\n`ubelt.posix <https://ubelt.readthedocs.io/en/latest/ubelt.util_platform.html#ubelt.util_platform.posix>`__                                                     0\n`ubelt.orderedset <https://ubelt.readthedocs.io/en/latest/ubelt.orderedset.html#ubelt.orderedset.orderedset>`__                                                 0\n`ubelt.downloadmanager <https://ubelt.readthedocs.io/en/latest/ubelt.util_download_manager.html#ubelt.util_download_manager.downloadmanager>`__                 0\n`ubelt.capturestream <https://ubelt.readthedocs.io/en/latest/ubelt.util_stream.html#ubelt.util_stream.capturestream>`__                                         0\n================================================================================================================================================ ================\n\n\nexamples\n========\n\nthe most up to date examples are the doctests.\nwe also have a jupyter notebook: https://github.com/erotemic/ubelt/blob/main/docs/notebooks/ubelt%20demo.ipynb\n\nhere are some examples of some features inside ``ubelt``\n\npaths\n-----\n\nubelt extends ``pathlib.path`` by adding several new (often chainable) methods.\nnamely, ``augment``, ``delete``, ``expand``, ``ensuredir``, ``shrinkuser``. it\nalso modifies behavior of ``touch`` to be chainable. (new in 1.0.0)\n\n\n.. code:: python\n\n        >>> # ubelt extends pathlib functionality\n        >>> import ubelt as ub\n        >>> dpath = ub.path('~/.cache/ubelt/demo_path').expand().ensuredir()\n        >>> fpath = dpath / 'text_file.txt'\n        >>> aug_fpath = fpath.augment(suffix='.aux', ext='.jpg').touch()\n        >>> aug_dpath = dpath.augment('demo_path2')\n        >>> assert aug_fpath.read_text() == ''\n        >>> fpath.write_text('text data')\n        >>> assert aug_fpath.exists()\n        >>> assert not aug_fpath.delete().exists()\n        >>> assert dpath.exists()\n        >>> assert not dpath.delete().exists()\n        >>> print(f'{fpath.shrinkuser()}')\n        >>> print(f'{dpath.shrinkuser()}')\n        >>> print(f'{aug_fpath.shrinkuser()}')\n        >>> print(f'{aug_dpath.shrinkuser()}')\n        ~/.cache/ubelt/demo_path/text_file.txt\n        ~/.cache/ubelt/demo_path\n        ~/.cache/ubelt/demo_path/text_file.aux.jpg\n        ~/.cache/ubelt/demo_pathdemo_path2\n\nhashing\n-------\n\nthe ``ub.hash_data`` constructs a hash for common python nested data\nstructures. extensions to allow it to hash custom types can be registered.  by\ndefault it handles lists, dicts, sets, slices, uuids, and numpy arrays.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> data = [('arg1', 5), ('lr', .01), ('augmenters', ['flip', 'translate'])]\n    >>> ub.hash_data(data, hasher='sha256')\n    0d95771ff684756d7be7895b5594b8f8484adecef03b46002f97ebeb1155fb15\n\nsupport for torch tensors and pandas data frames are also included, but needs to\nbe explicitly enabled.  there also exists an non-public plugin architecture to\nextend this function to arbitrary types. while not officially supported, it is\nusable and will become better integrated in the future. see\n``ubelt/util_hash.py`` for details.\n\ncaching\n-------\n\ncache intermediate results from blocks of code inside a script with minimal\nboilerplate or modification to the original code.\n\nfor direct caching of data, use the ``cacher`` class.  by default results will\nbe written to the ubelt's appdir cache, but the exact location can be specified\nvia ``dpath`` or the ``appname`` arguments.  additionally, process dependencies\ncan be specified via the ``depends`` argument, which allows for implicit cache\ninvalidation.  as far as i can tell, this is the most concise way (4 lines of\nboilerplate) to cache a block of code with existing python syntax (as of\n2022-06-03).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> depends = ['config', {'of': 'params'}, 'that-uniquely-determine-the-process']\n    >>> cacher = ub.cacher('test_process', depends=depends, appname='myapp')\n    >>> # start fresh\n    >>> cacher.clear()\n    >>> for _ in range(2):\n    >>>     data = cacher.tryload()\n    >>>     if data is none:\n    >>>         myvar1 = 'result of expensive process'\n    >>>         myvar2 = 'another result'\n    >>>         data = myvar1, myvar2\n    >>>         cacher.save(data)\n    >>> myvar1, myvar2 = data\n\nfor indirect caching, use the ``cachestamp`` class. this simply writes a\n\"stamp\" file that marks that a process has completed. additionally you can\nspecify criteria for when the stamp should expire. if you let ``cachestamp``\nknow about the expected \"product\", it will expire the stamp if that file has\nchanged, which can be useful in situations where caches might becomes corrupt\nor need invalidation.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dpath = ub.path.appdir('ubelt/demo/cache').delete().ensuredir()\n    >>> params = {'params1': 1, 'param2': 2}\n    >>> expected_fpath = dpath / 'file.txt'\n    >>> stamp = ub.cachestamp('name', dpath=dpath, depends=params,\n    >>>                      hasher='sha256', product=expected_fpath,\n    >>>                      expires='2101-01-01t000000z', verbose=3)\n    >>> # start fresh\n    >>> stamp.clear()\n    >>>\n    >>> for _ in range(2):\n    >>>     if stamp.expired():\n    >>>         expected_fpath.write_text('expensive process')\n    >>>         stamp.renew()\n\nsee `<https://ubelt.readthedocs.io/en/latest/ubelt.util_cache.html>`_ for more\ndetails about ``cacher`` and ``cachestamp``.\n\nloop progress\n-------------\n\n``progiter`` is a no-threads attached progress meter that writes to stdout.  it\nis a mostly drop-in alternative to `tqdm\n<https://pypi.python.org/pypi/tqdm>`__.\n*the advantage of ``progiter`` is that it does not use any python threading*,\nand therefore can be safer with code that makes heavy use of multiprocessing.\n\nnote: ``progiter`` is also defined in a standalone module: ``pip install progiter``)\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> def is_prime(n):\n    ...     return n >= 2 and not any(n % i == 0 for i in range(2, n))\n    >>> for n in ub.progiter(range(1000), verbose=2):\n    >>>     # do some work\n    >>>     is_prime(n)\n        0/1000... rate=0.00 hz, eta=?, total=0:00:00, wall=14:05 est\n        1/1000... rate=82241.25 hz, eta=0:00:00, total=0:00:00, wall=14:05 est\n      257/1000... rate=177204.69 hz, eta=0:00:00, total=0:00:00, wall=14:05 est\n      642/1000... rate=94099.22 hz, eta=0:00:00, total=0:00:00, wall=14:05 est\n     1000/1000... rate=71886.74 hz, eta=0:00:00, total=0:00:00, wall=14:05 est\n\n\ncommand line interaction\n------------------------\n\nthe builtin python ``subprocess.popen`` module is great, but it can be a\nbit clunky at times. the ``os.system`` command is easy to use, but it\ndoesn't have much flexibility. the ``ub.cmd`` function aims to fix this.\nit is as simple to run as ``os.system``, but it returns a dictionary\ncontaining the return code, standard out, standard error, and the\n``popen`` object used under the hood.\n\nthis utility is designed to provide as consistent as possible behavior across\ndifferent platforms.  we aim to support windows, linux, and osx.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> info = ub.cmd('gcc --version')\n    >>> print(ub.urepr(info))\n    {\n        'command': 'gcc --version',\n        'err': '',\n        'out': 'gcc (ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\\ncopyright (c) 2015 free software foundation, inc.\\nthis is free software; see the source for copying conditions.  there is no\\nwarranty; not even for merchantability or fitness for a particular purpose.\\n\\n',\n        'proc': <subprocess.popen object at 0x7ff98b310390>,\n        'ret': 0,\n    }\n\nalso note the use of ``ub.urepr`` (previously ``ub.repr2``) to nicely format the output\ndictionary.\n\nadditionally, if you specify ``verbose=true``, ``ub.cmd`` will\nsimultaneously capture the standard output and display it in real time (i.e. it\nwill \"`tee <https://en.wikipedia.org/wiki/tee_(command)>`__\" the output).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> info = ub.cmd('gcc --version', verbose=true)\n    gcc (ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\n    copyright (c) 2015 free software foundation, inc.\n    this is free software; see the source for copying conditions.  there is no\n    warranty; not even for merchantability or fitness for a particular purpose.\n\na common use case for ``ub.cmd`` is parsing version numbers of programs\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> cmake_version = ub.cmd('cmake --version')['out'].splitlines()[0].split()[-1]\n    >>> print('cmake_version = {!r}'.format(cmake_version))\n    cmake_version = 3.11.0-rc2\n\nthis allows you to easily run a command line executable as part of a\npython process, see what it is doing, and then do something based on its\noutput, just as you would if you were interacting with the command line\nitself.\n\nthe idea is that ``ub.cmd`` removes the need to think about if you need to pass\na list of args, or a string. both will work.\n\nnew in ``1.0.0``, a third variant with different consequences for executing\nshell commands. using the ``system=true`` kwarg will directly use ``os.system``\ninstead of ``popen`` entirely. in this mode it is not possible to ``tee`` the\noutput because the program is executing directly in the foreground. this is\nuseful for doing things like spawning a vim session and returning if the user\nmanages to quit vim.\n\ndownloading files\n-----------------\n\nthe function ``ub.download`` provides a simple interface to download a\nurl and save its data to a file.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> url = 'http://i.imgur.com/rqwadag.png'\n    >>> fpath = ub.download(url, verbose=0)\n    >>> print(ub.shrinkuser(fpath))\n    ~/.cache/ubelt/rqwadag.png\n\nthe function ``ub.grabdata`` works similarly to ``ub.download``, but\nwhereas ``ub.download`` will always re-download the file,\n``ub.grabdata`` will check if the file exists and only re-download it if\nit needs to.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> url = 'http://i.imgur.com/rqwadag.png'\n    >>> fpath = ub.grabdata(url, verbose=0, hash_prefix='944389a39')\n    >>> print(ub.shrinkuser(fpath))\n    ~/.cache/ubelt/rqwadag.png\n\n\nnew in version 0.4.0: both functions now accepts the ``hash_prefix`` keyword\nargument, which if specified will check that the hash of the file matches the\nprovided value. the ``hasher`` keyword argument can be used to change which\nhashing algorithm is used (it defaults to ``\"sha512\"``).\n\ndictionary set operations\n-------------------------\n\n\ndictionary operations that are analogous to set operations.\nsee each funtions documentation for more details on the behavior of the values.\ntypically the last seen value is given priority.\n\ni hope python decides to add these to the stdlib someday.\n\n* ``ubelt.dict_union`` corresponds to ``set.union``.\n* ``ubelt.dict_isect`` corresponds to ``set.intersection``.\n* ``ubelt.dict_diff`` corresponds to ``set.difference``.\n\n.. code:: python\n\n   >>> d1 = {'a': 1, 'b': 2, 'c': 3}\n   >>> d2 = {'c': 10, 'e': 20, 'f': 30}\n   >>> d3 = {'e': 10, 'f': 20, 'g': 30, 'a': 40}\n   >>> ub.dict_union(d1, d2, d3)\n   {'a': 40, 'b': 2, 'c': 10, 'e': 10, 'f': 20, 'g': 30}\n\n   >>> ub.dict_isect(d1, d2)\n   {'c': 3}\n\n   >>> ub.dict_diff(d1, d2)\n   {'a': 1, 'b': 2}\n\n\nnew in version 1.2.0: ubelt now contains a dictionary subclass with set\noperations that can be invoked as ``ubelt.setdict`` or ``ub.sdict``.\nnote that n-ary operations are supported.\n\n\n.. code:: python\n\n   >>> d1 = ub.sdict({'a': 1, 'b': 2, 'c': 3})\n   >>> d2 = {'c': 10, 'e': 20, 'f': 30}\n   >>> d3 = {'e': 10, 'f': 20, 'g': 30, 'a': 40}\n   >>> d1 | d2 | d3\n   {'a': 40, 'b': 2, 'c': 10, 'e': 10, 'f': 20, 'g': 30}\n\n   >>> d1 & d2\n   {'c': 3}\n\n   >>> d1 - d2\n   {'a': 1, 'b': 2}\n\n   >>> ub.sdict.intersection({'a': 1, 'b': 2, 'c': 3}, ['b', 'c'], ['c', 'e'])\n   {'c': 3}\n\n\nnote this functionality and more is available in ``ubelt.udict`` or ``ub.udict``.\n\ngrouping items\n--------------\n\ngiven a list of items and corresponding ids, create a dictionary mapping each\nid to a list of its corresponding items.  in other words, group a sequence of\nitems of type ``vt`` and corresponding keys of type ``kt`` given by a function\nor corresponding list, group them into a ``dict[kt, list[vt]`` such that each\nkey maps to a list of the values associated with the key.  this is similar to\n`pandas.dataframe.groupby <https://pandas.pydata.org/docs/reference/api/pandas.dataframe.groupby.html>`_.\n\ngroup ids can be specified by a second list containing the id for\neach corresponding item.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> # group via a corresonding list\n    >>> item_list    = ['ham',     'jam',   'spam',     'eggs',    'cheese', 'bannana']\n    >>> groupid_list = ['protein', 'fruit', 'protein',  'protein', 'dairy',  'fruit']\n    >>> dict(ub.group_items(item_list, groupid_list))\n    {'dairy': ['cheese'], 'fruit': ['jam', 'bannana'], 'protein': ['ham', 'spam', 'eggs']}\n\n\nthey can also be given by a function that is executed on each item in the list\n\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> # group via a function\n    >>> item_list    = ['ham',     'jam',   'spam',     'eggs',    'cheese', 'bannana']\n    >>> def grouper(item):\n    ...     return item.count('a')\n    >>> dict(ub.group_items(item_list, grouper))\n    {1: ['ham', 'jam', 'spam'], 0: ['eggs', 'cheese'], 3: ['bannana']}\n\ndictionary histogram\n--------------------\n\nfind the frequency of items in a sequence.\ngiven a list or sequence of items, this returns a dictionary mapping each\nunique value in the sequence to the number of times it appeared.\nthis is similar to `pandas.dataframe.value_counts <https://pandas.pydata.org/docs/reference/api/pandas.dataframe.value_counts.html>`_.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> item_list = [1, 2, 39, 900, 1232, 900, 1232, 2, 2, 2, 900]\n    >>> ub.dict_hist(item_list)\n    {1232: 2, 1: 1, 2: 4, 900: 3, 39: 1}\n\n\neach item can also be given a weight\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> item_list = [1, 2, 39, 900, 1232, 900, 1232, 2, 2, 2, 900]\n    >>> weights   = [1, 1,  0,   0,    0,   0,  0.5, 0, 1, 1, 0.3]\n    >>> ub.dict_hist(item_list, weights=weights)\n    {1: 1, 2: 3, 39: 0, 900: 0.3, 1232: 0.5}\n\ndictionary manipulation\n-----------------------\n\nmap functions across dictionarys to transform the keys or values in a\ndictionary.  the ``ubelt.map_keys`` function applies a function to each key in\na dictionary and returns this transformed copy of the dictionary. key conflict\nbehavior currently raises and error, but may be configurable in the future. the\n``ubelt.map_vals`` function is the same except the function is applied to each\nvalue instead.  i these functions are useful enough to be ported to python\nitself.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {'a': [1, 2, 3], 'bb': [], 'ccc': [2,]}\n    >>> dict_keymod = ub.map_keys(len, dict_)\n    >>> dict_valmod = ub.map_vals(len, dict_)\n    >>> print(dict_keymod)\n    >>> print(dict_valmod)\n    {1: [1, 2, 3], 2: [], 3: [2]}\n    {'a': 3, 'bb': 0, 'ccc': 1}\n\ntake a subset of a dictionary. note this is similar to ``ub.dict_isect``,\nexcept this will raise an error if the given keys are not in the dictionary.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {'k': 3, 'dcvs_clip_max': 0.2, 'p': 0.1}\n    >>> subdict_ = ub.dict_subset(dict_, ['k', 'dcvs_clip_max'])\n    >>> print(subdict_)\n    {'k': 3, 'dcvs_clip_max': 0.2}\n\n\nthe ``ubelt.take`` function works on dictionarys (and lists). it is similar to\n``ubelt.dict_subset``, except that it returns just a list of the values, and\ndiscards information about the keys. it is also possible to specify a default\nvalue.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {1: 'a', 2: 'b', 3: 'c'}\n    >>> print(list(ub.take(dict_, [1, 3, 4, 5], default=none)))\n    ['a', 'c', none, none]\n\ninvert the mapping defined by a dictionary. by default ``invert_dict``\nassumes that all dictionary values are distinct (i.e. the mapping is\none-to-one / injective).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> mapping = {0: 'a', 1: 'b', 2: 'c', 3: 'd'}\n    >>> ub.invert_dict(mapping)\n    {'a': 0, 'b': 1, 'c': 2, 'd': 3}\n\nhowever, by specifying ``unique_vals=false`` the inverted dictionary\nbuilds a set of keys that were associated with each value.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> mapping = {'a': 0, 'a': 0, 'b': 1, 'c': 2, 'c': 2, 'd': 3}\n    >>> ub.invert_dict(mapping, unique_vals=false)\n    {0: {'a', 'a'}, 1: {'b'}, 2: {'c', 'c'}, 3: {'d'}}\n\n\nnew in version 1.2.0: ubelt now contains a dictionary subclass ``ubelt.udict``\nwith these quality of life operations (and also inherits from\n``ubelt.setdict``). the alias ``ubelt.udict`` can be used for quicker access.\n\n.. code:: python\n\n   >>> import ubelt as ub\n   >>> d1 = ub.udict({'a': 1, 'b': 2, 'c': 3})\n   >>> d1 & {'a', 'c'}\n   {'a': 1, 'c': 3}\n\n   >>> d1.map_keys(ord)\n   {97: 1, 98: 2, 99: 3}\n   >>> d1.invert()\n   {1: 'a', 2: 'b', 3: 'c'}\n   >>> d1.subdict(['b', 'c', 'e'], default=none)\n   {'b': 2, 'c': 3, 'e': none}\n   >>> d1.sorted_keys()\n   ordereddict([('a', 1), ('b', 2), ('c', 3)])\n   >>> d1.peek_key()\n   'a'\n   >>> d1.peek_value()\n   1\n\nnext time you have a default configuration dictionary like and you allow the\ndeveloper to pass keyword arguments to modify these behaviors, consider using\ndictionary intersection (&) to separate out only the relevant parts and\ndictionary union (|) to update those relevant parts.  you can also use\ndictionary differences (-) if you need to check for unused arguments.\n\n.. code:: python\n\n    import ubelt as ub\n\n    def run_multiple_algos(**kwargs):\n        algo1_defaults = {'opt1': 10, 'opt2': 11}\n        algo2_defaults = {'src': './here/', 'dst': './there'}\n\n        kwargs = ub.udict(kwargs)\n\n        algo1_specified = kwargs & algo1_defaults\n        algo2_specified = kwargs & algo2_defaults\n\n        algo1_config = algo1_defaults | algo1_specified\n        algo2_config = algo2_defaults | algo2_specified\n\n        unused_kwargs = kwargs - (algo1_defaults | algo2_defaults)\n\n        print('algo1_specified = {}'.format(ub.urepr(algo1_specified, nl=1)))\n        print('algo2_specified = {}'.format(ub.urepr(algo2_specified, nl=1)))\n        print(f'algo1_config={algo1_config}')\n        print(f'algo2_config={algo2_config}')\n        print(f'the following kwargs were unused {unused_kwargs}')\n\n    print(chr(10))\n    print('-- run with some specified --')\n    run_multiple_algos(src='box', opt2='fox')\n    print(chr(10))\n    print('-- run with extra unspecified --')\n    run_multiple_algos(a=1, b=2)\n\n\nproduces:\n\n.. code::\n\n    -- run with some specified --\n    algo1_specified = {\n        'opt2': 'fox',\n    }\n    algo2_specified = {\n        'src': 'box',\n    }\n    algo1_config={'opt1': 10, 'opt2': 'fox'}\n    algo2_config={'src': 'box', 'dst': './there'}\n    the following kwargs were unused {}\n\n\n    -- run with extra unspecified --\n    algo1_specified = {}\n    algo2_specified = {}\n    algo1_config={'opt1': 10, 'opt2': 11}\n    algo2_config={'src': './here/', 'dst': './there'}\n    the following kwargs were unused {'a': 1, 'b': 2}\n\n\n\nfind duplicates\n---------------\n\nfind all duplicate items in a list. more specifically,\n``ub.find_duplicates`` searches for items that appear more than ``k``\ntimes, and returns a mapping from each duplicate item to the positions\nit appeared in.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> items = [0, 0, 1, 2, 3, 3, 0, 12, 2, 9]\n    >>> ub.find_duplicates(items, k=2)\n    {0: [0, 1, 6], 2: [3, 8], 3: [4, 5]}\n\n\ncross-platform config and cache directories\n-------------------------------------------\n\nif you have an application which writes configuration or cache files,\nthe standard place to dump those files differs depending if you are on\nwindows, linux, or mac. ubelt offers a unified functions for determining\nwhat these paths are.\n\nnew in version 1.0.0: the ``ub.path.appdir`` classmethod provides a way to\nachieve the above with a chainable object oriented interface.\n\nthe ``ub.path.appdir(..., type='cache')``,\n``ub.path.appdir(..., type='config')``, and\n``ub.path.appdir(..., type='data')``\nfunctions find the correct platform-specific location for these files and\ncalling ``ensuredir`` ensures that the directories exist.\n\nthe config root directory is ``~/appdata/roaming`` on windows,\n``~/.config`` on linux and ``~/library/application support`` on mac. the\ncache root directory is ``~/appdata/local`` on windows, ``~/.config`` on\nlinux and ``~/library/caches`` on mac.\n\nexample usage on linux might look like this:\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> print(ub.path.appdir('my_app').ensuredir().shrinkuser())  # default is cache\n    ~/.cache/my_app\n    >>> print(ub.path.appdir('my_app', type='config').ensuredir().shrinkuser())\n    ~/.config/my_app\n\nsymlinks\n--------\n\nthe ``ub.symlink`` function will create a symlink similar to\n``os.symlink``. the main differences are that 1) it will not error if\nthe symlink exists and already points to the correct location. 2) it\nworks\\* on windows (\\*hard links and junctions are used if real symlinks\nare not available)\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dpath = ub.path('ubelt', 'demo_symlink')\n    >>> real_path = dpath / 'real_file.txt'\n    >>> link_path = dpath / 'link_file.txt'\n    >>> real_path.write_text('foo')\n    >>> ub.symlink(real_path, link_path)\n\n\nautodict - autovivification\n---------------------------\n\nwhile the ``collections.defaultdict`` is nice, it is sometimes more\nconvenient to have an infinitely nested dictionary of dictionaries.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> auto = ub.autodict()\n    >>> print('auto = {!r}'.format(auto))\n    auto = {}\n    >>> auto[0][10][100] = none\n    >>> print('auto = {!r}'.format(auto))\n    auto = {0: {10: {100: none}}}\n    >>> auto[0][1] = 'hello'\n    >>> print('auto = {!r}'.format(auto))\n    auto = {0: {1: 'hello', 10: {100: none}}}\n\nstring-based imports\n--------------------\n\nubelt contains functions to import modules dynamically without using the\npython ``import`` statement. while ``importlib`` exists, the ``ubelt``\nimplementation is simpler to user and does not have the disadvantage of\nbreaking ``pytest``.\n\nnote ``ubelt`` simply provides an interface to this functionality, the\ncore implementation is in ``xdoctest`` (over as of version ``0.7.0``,\nthe code is statically copied into an autogenerated file such that ``ubelt``\ndoes not actually depend on ``xdoctest`` during runtime).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> try:\n    >>>     # this is where i keep ubelt on my machine, so it is not expected to work elsewhere.\n    >>>     module = ub.import_module_from_path(ub.expandpath('~/code/ubelt/ubelt'))\n    >>>     print('module = {!r}'.format(module))\n    >>> except oserror:\n    >>>     pass\n    >>>\n    >>> module = ub.import_module_from_name('ubelt')\n    >>> print('module = {!r}'.format(module))\n    >>> #\n    >>> try:\n    >>>     module = ub.import_module_from_name('does-not-exist')\n    >>>     raise assertionerror\n    >>> except modulenotfounderror:\n    >>>     pass\n    >>> #\n    >>> modpath = ub.path(ub.util_import.__file__)\n    >>> print(ub.modpath_to_modname(modpath))\n    >>> modname = ub.util_import.__name__\n    >>> assert ub.path(ub.modname_to_modpath(modname)).resolve() == modpath.resolve()\n\n    module = <module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'>\n    >>> module = ub.import_module_from_name('ubelt')\n    >>> print('module = {!r}'.format(module))\n    module = <module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'>\n\nrelated to this functionality are the functions\n``ub.modpath_to_modname`` and ``ub.modname_to_modpath``, which\n*statically* transform (i.e. no code in the target modules is imported\nor executed) between module names (e.g. ``ubelt.util_import``) and\nmodule paths (e.g.\n``~/.local/conda/envs/cenv3/lib/python3.5/site-packages/ubelt/util_import.py``).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> modpath = ub.util_import.__file__\n    >>> print(ub.modpath_to_modname(modpath))\n    ubelt.util_import\n    >>> modname = ub.util_import.__name__\n    >>> assert ub.modname_to_modpath(modname) == modpath\n\nhorizontal string concatenation\n-------------------------------\n\nsometimes its just prettier to horizontally concatenate two blocks of\ntext.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> b = ub.urepr([[1, 2], [3, 4]], nl=1, cbr=true, trailsep=false)\n    >>> c = ub.urepr([[5, 6], [7, 8]], nl=1, cbr=true, trailsep=false)\n    >>> print(ub.hzcat(['a = ', b, ' * ', c]))\n    a = [[1, 2], * [[5, 6],\n         [3, 4]]    [7, 8]]\n\n\ntiming\n------\n\nquickly time a single line.\n\n.. code:: python\n\n    >>> import math\n    >>> import ubelt as ub\n    >>> timer = ub.timer('timer demo!', verbose=1)\n    >>> with timer:\n    >>>     math.factorial(100000)\n    tic('timer demo!')\n    ...toc('timer demo!')=0.1453s\n\n\nexternal tools\n--------------\n\nsome of the tools in ``ubelt`` also exist as standalone modules. i haven't\ndecided if its best to statically copy them into ubelt or require on pypi to\nsatisfy the dependency. there are some tools that are not used by default\nunless you explicitly allow for them.\n\ncode that is currently statically included (vendored):\n\n-  progiter - https://github.com/erotemic/progiter\n-  orderedset - https://github.com/luminosoinsight/ordered-set\n\ncode that is completely optional, and only used in specific cases:\n\n- numpy - ``ub.urepr`` will format a numpy array nicely by default\n- xxhash - this can be specified as a hasher to ``ub.hash_data``\n- pygments - used by the ``util_color`` module.\n- dateutil - used by the ``util_time`` module.\n\n\nsimilar tools\n-------------\n\nubelt is one of many python utility libraries. a selection of similar libraries\nare listed here.\n\nlibraries that contain a broad scope of utilities:\n\n* boltons: https://github.com/mahmoud/boltons\n* toolz: https://github.com/pytoolz/toolz\n* cytoolz: https://github.com/pytoolz/cytoolz/\n* unstdlib: https://github.com/shazow/unstdlib.py\n\nlibraries that contain a specific scope of utilities:\n\n* more-itertools: iteration tools: https://pypi.org/project/more-itertools/\n* funcy: functional tools: https://github.com/suor/funcy\n* rich: pretty cli displays - https://github.com/willmcgugan/rich\n* tempora: time related tools - https://github.com/jaraco/tempora\n\n\nlibraries that contain one specific data structure or utility:\n\n* benedict: dictionary tools - https://pypi.org/project/python-benedict/\n* tqdm: progress bars - https://pypi.org/project/tqdm/\n* pooch: data downloading - https://pypi.org/project/pooch/\n* timerit: snippet timing for benchmarks - https://github.com/erotemic/timerit\n\n\njaraco (i.e. jason r. coombs) has an extensive library of utilities:\n\n* jaraco.classes - https://github.com/jaraco/jaraco.classes\n* jaraco.collections - https://github.com/jaraco/jaraco.collections\n* jaraco.context - https://github.com/jaraco/jaraco.context\n* jaraco.crypto - https://github.com/jaraco/jaraco.crypto\n* jaraco.functools - https://github.com/jaraco/jaraco.functools\n* jaraco.geo - https://github.com/jaraco/jaraco.geo\n* jaraco.imaging - https://github.com/jaraco/jaraco.imaging\n* jaraco.itertools - https://github.com/jaraco/jaraco.itertools\n* jaraco.logging - https://github.com/jaraco/jaraco.logging\n* jaraco.media - https://github.com/jaraco/jaraco.media\n* jaraco.path - https://github.com/jaraco/jaraco.path\n* jaraco.text - https://github.com/jaraco/jaraco.text\n* jaraco.util - https://github.com/jaraco/jaraco.util\n* jaraco.windows - https://github.com/jaraco/jaraco.windows\n* and many others not listed here. see: https://github.com/jaraco?tab=repositories&q=jaraco.\n\n\nubelt is included in the the [bestof-python list](https://github.com/ml-tooling/best-of-python),\nwhich contains many other tools that you should check out.\n\n\nhistory:\n========\n\nubelt is a migration of the most useful parts of\n``utool``\\ (https://github.com/erotemic/utool) into a standalone module\nwith minimal dependencies.\n\nthe ``utool`` library contains a number of useful utility functions, but it\nalso contained non-useful functions, as well as the kitchen sink. a number of\nthe functions were too specific or not well documented. the ``ubelt`` is a port\nof the simplest and most useful parts of ``utool``.\n\nnote that there are other cool things in ``utool`` that are not in ``ubelt``.\nnotably, the doctest harness ultimately became `xdoctest <https://github.com/erotemic/xdoctest>`__.\ncode introspection and dynamic analysis tools were ported to `xinspect <https://github.com/erotemic/xinspect>`__.\nthe more ipython-y tools were ported to `xdev <https://github.com/erotemic/xdev>`__.\nparts of it made their way into `scriptconfig <https://gitlab.kitware.com/utils/scriptconfig>`__.\nthe init-file generation was moved to `mkinit <https://github.com/erotemic/mkinit>`__.\nsome vim and system-y things can be found in `vimtk <https://github.com/erotemic/vimtk>`__.\n\ndevelopment on ubelt started 2017-01-30 and development of utool mostly stopped\non utool was stopped later that year, but received patches until about 2020.\nubelt achieved 1.0.0 and removed support for python 2.7 and 3.5 on 2022-01-07.\n\n\nnotes.\n------\nprs are welcome.\n\nalso check out my other projects which are powered by ubelt:\n\n-  xinspect https://github.com/erotemic/xinspect\n-  xdev https://github.com/erotemic/xdev\n-  vimtk https://github.com/erotemic/vimtk\n-  graphid https://github.com/erotemic/graphid\n-  ibeis https://github.com/erotemic/ibeis\n-  kwarray https://github.com/kitware/kwarray\n-  kwimage https://github.com/kitware/kwimage\n-  kwcoco https://github.com/kitware/kwcoco\n\nand my projects related to ubelt:\n\n-  progiter https://github.com/erotemic/progiter\n-  timerit https://github.com/erotemic/timerit\n-  mkinit https://github.com/erotemic/mkinit\n-  xdoctest https://github.com/erotemic/xdoctest\n\n\n\n.. |circleci| image:: https://circleci.com/gh/erotemic/ubelt.svg?style=svg\n    :target: https://circleci.com/gh/erotemic/ubelt\n.. |travis| image:: https://img.shields.io/travis/erotemic/ubelt/main.svg?label=travis%20ci\n   :target: https://travis-ci.org/erotemic/ubelt?branch=main\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/erotemic/ubelt?branch=main&svg=true\n   :target: https://ci.appveyor.com/project/erotemic/ubelt/branch/main\n.. |codecov| image:: https://codecov.io/github/erotemic/ubelt/badge.svg?branch=main&service=github\n   :target: https://codecov.io/github/erotemic/ubelt?branch=main\n.. |pypi| image:: https://img.shields.io/pypi/v/ubelt.svg\n   :target: https://pypi.python.org/pypi/ubelt\n.. |downloads| image:: https://img.shields.io/pypi/dm/ubelt.svg\n   :target: https://pypistats.org/packages/ubelt\n.. |readthedocs| image:: https://readthedocs.org/projects/ubelt/badge/?version=latest\n    :target: http://ubelt.readthedocs.io/en/latest/\n.. |codequality| image:: https://api.codacy.com/project/badge/grade/4d815305fc014202ba7dea09c4676343\n    :target: https://www.codacy.com/manual/erotemic/ubelt?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=erotemic/ubelt&amp;utm_campaign=badge_grade\n.. |githubactions| image:: https://github.com/erotemic/ubelt/actions/workflows/tests.yml/badge.svg?branch=main\n    :target: https://github.com/erotemic/ubelt/actions?query=branch%3amain\n.. |twitterfollow| image:: https://img.shields.io/twitter/follow/erotemic.svg?style=social\n    :target: https://twitter.com/erotemic\n\n\n",
  "docs_url": null,
  "keywords": "utility,python,hashing,caching,stdlib,path,pathlib,dictionary,download",
  "license": "apache 2",
  "name": "ubelt",
  "package_url": "https://pypi.org/project/ubelt/",
  "project_url": "https://pypi.org/project/ubelt/",
  "project_urls": {
    "Homepage": "https://github.com/Erotemic/ubelt"
  },
  "release_url": "https://pypi.org/project/ubelt/1.3.4/",
  "requires_dist": [
    "jaraco.windows (>=3.9.1) ; platform_system == \"Windows\"",
    "pydantic (<2.0) ; platform_system == \"Windows\" and platform_python_implementation == \"PyPy\"",
    "Pygments (>=2.2.0) ; extra == 'all'",
    "pytest-timeout (>=1.4.2) ; extra == 'all'",
    "python-dateutil (>=2.8.1) ; extra == 'all'",
    "requests (>=2.25.1) ; extra == 'all'",
    "xdoctest (>=1.1.2) ; extra == 'all'",
    "Pygments (==2.2.0) ; extra == 'all-strict'",
    "pytest-timeout (==1.4.2) ; extra == 'all-strict'",
    "python-dateutil (==2.8.1) ; extra == 'all-strict'",
    "requests (==2.25.1) ; extra == 'all-strict'",
    "xdoctest (==1.1.2) ; extra == 'all-strict'",
    "colorama (==0.4.3) ; (platform_system == \"Windows\") and extra == 'all-strict'",
    "jaraco.windows (==3.9.1) ; (platform_system == \"Windows\") and extra == 'all-strict'",
    "pydantic (<2.0) ; (platform_system == \"Windows\" and platform_python_implementation == \"PyPy\") and extra == 'all-strict'",
    "coverage (==4.5) ; (python_version < \"2.7\" and python_version >= \"2.6\") and extra == 'all-strict'",
    "pytest-cov (==2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all-strict'",
    "pytest (<=4.6.11,==4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
    "xxhash (==2.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
    "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.9\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all-strict'",
    "xxhash (==3.0.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all-strict'",
    "numpy (==1.21.1) ; (python_version < \"3.11\" and python_version >= \"3.10\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.12\" and python_version >= \"3.10\") and extra == 'all-strict'",
    "xxhash (==3.2.0) ; (python_version < \"3.12\" and python_version >= \"3.11\") and extra == 'all-strict'",
    "numpy (==1.23.2) ; (python_version < \"3.12\" and python_version >= \"3.11\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'all-strict'",
    "coverage (==4.3.4) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'all-strict'",
    "pytest-cov (==2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all-strict'",
    "pytest (<=4.6.11,==4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'all-strict'",
    "pytest-cov (==2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all-strict'",
    "pytest (<=6.1.2,==4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "xxhash (==1.3.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "numpy (<2.0.0,==1.12.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
    "xxhash (==1.3.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
    "numpy (<2.0.0,==1.14.5) ; (python_version < \"3.8\" and python_version >= \"3.7\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
    "xxhash (==1.4.3) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
    "numpy (==1.19.2) ; (python_version < \"3.9\" and python_version >= \"3.8\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "coverage (==7.3.0) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'all-strict'",
    "xxhash (==3.4.1) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'all-strict'",
    "numpy (==1.26.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and platform_python_implementation == \"CPython\") and extra == 'all-strict'",
    "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all-strict'",
    "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all-strict'",
    "colorama (>=0.4.3) ; (platform_system == \"Windows\") and extra == 'all'",
    "jaraco.windows (>=3.9.1) ; (platform_system == \"Windows\") and extra == 'all'",
    "pydantic (<2.0) ; (platform_system == \"Windows\" and platform_python_implementation == \"PyPy\") and extra == 'all'",
    "coverage (>=4.5) ; (python_version < \"2.7\" and python_version >= \"2.6\") and extra == 'all'",
    "pytest-cov (>=2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all'",
    "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'all'",
    "coverage (>=5.3.1) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
    "xxhash (>=2.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
    "numpy (>=1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.9\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all'",
    "xxhash (>=3.0.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'all'",
    "numpy (>=1.21.1) ; (python_version < \"3.11\" and python_version >= \"3.10\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "coverage (>=6.1.1) ; (python_version < \"3.12\" and python_version >= \"3.10\") and extra == 'all'",
    "xxhash (>=3.2.0) ; (python_version < \"3.12\" and python_version >= \"3.11\") and extra == 'all'",
    "numpy (>=1.23.2) ; (python_version < \"3.12\" and python_version >= \"3.11\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "coverage (>=5.3.1) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'all'",
    "coverage (>=4.3.4) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'all'",
    "pytest-cov (>=2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all'",
    "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'all'",
    "coverage (>=5.3.1) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'all'",
    "pytest-cov (>=2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all'",
    "pytest (<=6.1.2,>=4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'all'",
    "coverage (>=6.1.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
    "xxhash (>=1.3.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
    "numpy (<2.0.0,>=1.12.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all'",
    "coverage (>=6.1.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
    "xxhash (>=1.3.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
    "numpy (<2.0.0,>=1.14.5) ; (python_version < \"3.8\" and python_version >= \"3.7\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "coverage (>=6.1.1) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
    "xxhash (>=1.4.3) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
    "numpy (>=1.19.2) ; (python_version < \"3.9\" and python_version >= \"3.8\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "coverage (>=7.3.0) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'all'",
    "xxhash (>=3.4.1) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'all'",
    "numpy (>=1.26.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and platform_python_implementation == \"CPython\") and extra == 'all'",
    "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all'",
    "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all'",
    "Pygments (>=2.9.0) ; extra == 'docs'",
    "myst-parser (>=0.16.1) ; extra == 'docs'",
    "sphinx-autoapi (>=1.8.4) ; extra == 'docs'",
    "sphinx-autobuild (>=2021.3.14) ; extra == 'docs'",
    "sphinx-reredirects (>=0.0.1) ; extra == 'docs'",
    "sphinx (>=4.3.2) ; extra == 'docs'",
    "sphinx-rtd-theme (>=1.0.0) ; extra == 'docs'",
    "sphinxcontrib-napoleon (>=0.7) ; extra == 'docs'",
    "Pygments (==2.9.0) ; extra == 'docs-strict'",
    "myst-parser (==0.16.1) ; extra == 'docs-strict'",
    "sphinx-autoapi (==1.8.4) ; extra == 'docs-strict'",
    "sphinx-autobuild (==2021.3.14) ; extra == 'docs-strict'",
    "sphinx-reredirects (==0.0.1) ; extra == 'docs-strict'",
    "sphinx (==4.3.2) ; extra == 'docs-strict'",
    "sphinx-rtd-theme (==1.0.0) ; extra == 'docs-strict'",
    "sphinxcontrib-napoleon (==0.7) ; extra == 'docs-strict'",
    "Pygments (>=2.2.0) ; extra == 'optional'",
    "python-dateutil (>=2.8.1) ; extra == 'optional'",
    "Pygments (==2.2.0) ; extra == 'optional-strict'",
    "python-dateutil (==2.8.1) ; extra == 'optional-strict'",
    "colorama (==0.4.3) ; (platform_system == \"Windows\") and extra == 'optional-strict'",
    "xxhash (==2.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
    "numpy (==1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.9\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==3.0.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional-strict'",
    "numpy (==1.21.1) ; (python_version < \"3.11\" and python_version >= \"3.10\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==3.2.0) ; (python_version < \"3.12\" and python_version >= \"3.11\") and extra == 'optional-strict'",
    "numpy (==1.23.2) ; (python_version < \"3.12\" and python_version >= \"3.11\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==1.3.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
    "numpy (<2.0.0,==1.12.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==1.3.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
    "numpy (<2.0.0,==1.14.5) ; (python_version < \"3.8\" and python_version >= \"3.7\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==1.4.3) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
    "numpy (==1.19.2) ; (python_version < \"3.9\" and python_version >= \"3.8\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "xxhash (==3.4.1) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'optional-strict'",
    "numpy (==1.26.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and platform_python_implementation == \"CPython\") and extra == 'optional-strict'",
    "colorama (>=0.4.3) ; (platform_system == \"Windows\") and extra == 'optional'",
    "xxhash (>=2.0.2) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
    "numpy (>=1.19.3) ; (python_version < \"3.10\" and python_version >= \"3.9\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=3.0.0) ; (python_version < \"3.11\" and python_version >= \"3.10\") and extra == 'optional'",
    "numpy (>=1.21.1) ; (python_version < \"3.11\" and python_version >= \"3.10\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=3.2.0) ; (python_version < \"3.12\" and python_version >= \"3.11\") and extra == 'optional'",
    "numpy (>=1.23.2) ; (python_version < \"3.12\" and python_version >= \"3.11\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=1.3.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
    "numpy (<2.0.0,>=1.12.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=1.3.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
    "numpy (<2.0.0,>=1.14.5) ; (python_version < \"3.8\" and python_version >= \"3.7\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=1.4.3) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
    "numpy (>=1.19.2) ; (python_version < \"3.9\" and python_version >= \"3.8\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "xxhash (>=3.4.1) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'optional'",
    "numpy (>=1.26.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and platform_python_implementation == \"CPython\") and extra == 'optional'",
    "jaraco.windows (==3.9.1) ; (platform_system == \"Windows\") and extra == 'runtime-strict'",
    "pydantic (<2.0) ; (platform_system == \"Windows\" and platform_python_implementation == \"PyPy\") and extra == 'runtime-strict'",
    "jaraco.windows (>=3.9.1) ; (platform_system == \"Windows\") and extra == 'runtime'",
    "pydantic (<2.0) ; (platform_system == \"Windows\" and platform_python_implementation == \"PyPy\") and extra == 'runtime'",
    "pytest-timeout (>=1.4.2) ; extra == 'tests'",
    "requests (>=2.25.1) ; extra == 'tests'",
    "xdoctest (>=1.1.2) ; extra == 'tests'",
    "pytest-timeout (==1.4.2) ; extra == 'tests-strict'",
    "requests (==2.25.1) ; extra == 'tests-strict'",
    "xdoctest (==1.1.2) ; extra == 'tests-strict'",
    "coverage (==4.5) ; (python_version < \"2.7\" and python_version >= \"2.6\") and extra == 'tests-strict'",
    "pytest-cov (==2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests-strict'",
    "pytest (<=4.6.11,==4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'tests-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.12\" and python_version >= \"3.10\") and extra == 'tests-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'tests-strict'",
    "coverage (==4.3.4) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'tests-strict'",
    "pytest-cov (==2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests-strict'",
    "pytest (<=4.6.11,==4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests-strict'",
    "coverage (==5.3.1) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'tests-strict'",
    "pytest-cov (==2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests-strict'",
    "pytest (<=6.1.2,==4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'tests-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'tests-strict'",
    "coverage (==6.1.1) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'tests-strict'",
    "coverage (==7.3.0) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'tests-strict'",
    "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests-strict'",
    "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests-strict'",
    "coverage (>=4.5) ; (python_version < \"2.7\" and python_version >= \"2.6\") and extra == 'tests'",
    "pytest-cov (>=2.8.1) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests'",
    "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"2.8.0\" and python_version >= \"2.7.0\") and extra == 'tests'",
    "coverage (>=5.3.1) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'tests'",
    "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests'",
    "coverage (>=6.1.1) ; (python_version < \"3.12\" and python_version >= \"3.10\") and extra == 'tests'",
    "coverage (>=5.3.1) ; (python_version < \"3.4\" and python_version >= \"2.7\") and extra == 'tests'",
    "coverage (>=4.3.4) ; (python_version < \"3.5\" and python_version >= \"3.4\") and extra == 'tests'",
    "pytest-cov (>=2.8.1) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests'",
    "pytest (<=4.6.11,>=4.6.0) ; (python_version < \"3.5.0\" and python_version >= \"3.4.0\") and extra == 'tests'",
    "coverage (>=5.3.1) ; (python_version < \"3.6\" and python_version >= \"3.5\") and extra == 'tests'",
    "pytest-cov (>=2.9.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests'",
    "pytest (<=6.1.2,>=4.6.0) ; (python_version < \"3.6.0\" and python_version >= \"3.5.0\") and extra == 'tests'",
    "coverage (>=6.1.1) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'tests'",
    "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests'",
    "coverage (>=6.1.1) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'tests'",
    "coverage (>=6.1.1) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'tests'",
    "coverage (>=7.3.0) ; (python_version < \"4.0\" and python_version >= \"3.12\") and extra == 'tests'",
    "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests'",
    "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests'",
    "autoflake (>=1.4) ; extra == 'types'",
    "mypy ; extra == 'types'",
    "yapf (>=0.32.0) ; extra == 'types'",
    "autoflake (==1.4) ; extra == 'types-strict'",
    "mypy ; extra == 'types-strict'",
    "yapf (==0.32.0) ; extra == 'types-strict'"
  ],
  "requires_python": ">=3.6",
  "summary": "a python utility belt containing simple tools, a stdlib like feel, and extra batteries",
  "version": "1.3.4",
  "releases": [],
  "developers": [
    "erotemic@gmail.com",
    "jon_crall"
  ],
  "kwds": "pathlib python3 python pytoolz importlib",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_ubelt",
  "homepage": "https://github.com/erotemic/ubelt",
  "release_count": 71,
  "dependency_ids": [
    "pypi_autoflake",
    "pypi_colorama",
    "pypi_coverage",
    "pypi_jaraco.windows",
    "pypi_mypy",
    "pypi_myst_parser",
    "pypi_numpy",
    "pypi_pydantic",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_timeout",
    "pypi_python_dateutil",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_autoapi",
    "pypi_sphinx_autobuild",
    "pypi_sphinx_reredirects",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_napoleon",
    "pypi_xdoctest",
    "pypi_xxhash",
    "pypi_yapf"
  ]
}
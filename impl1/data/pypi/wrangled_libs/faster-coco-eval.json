{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# faster-coco-eval\n\n## disclaimer\n\ni often use this project, but i saw it abandoned and without a public repository on github.\nalso, part of the project remained unfinished for a long time. i implemented some of the author's ideas and decided to make the results publicly available.\n\n## faster-coco-eval base\n\nthis package wraps a facebook c++ implementation of coco-eval operations found in the\n[pycocotools](https://github.com/cocodataset/cocoapi/tree/master/pythonapi/pycocotools) package.\nthis implementation greatly speeds up the evaluation time\nfor coco's ap metrics, especially when dealing with a high number of instances in an image.\n\n## comparison\n\nfor our use case with a test dataset of 5000 images from the coco val dataset.\ntesting was carried out using the mmdetection framework and the eval_metric.py script. the indicators are presented below.\n\nvisualization of testing **comparison.ipynb** available in directory [examples/comparison](./examples/comparison/comparison.ipynb)\ntested with yolo3 model (bbox eval) and yoloact model (segm eval)\n\n| type | cocoeval    | cocoeval_faster | profit       |\n| ---- | ----------- | --------------- | ------------ |\n| bbox | 18.477 sec. | 7.345 sec.      | 2.5x faster  |\n| segm | 29.819 sec. | 15.840 sec.     | 2x faster    |\n\n## usage\n\nthis package contains a faster implementation of the\n [pycocotools](https://github.com/cocodataset/cocoapi/tree/master/pythonapi/pycocotools) `cocoeval` class.  \nto import and use `cocoeval_faster` type:\n\n````python  \nfrom faster_coco_eval import coco, cocoeval_faster\n....\n````\n\nfor usage, look at the original `cocoeval` [class documentation.](https://github.com/cocodataset/cocoapi)\n\n## usage plot curves\n\n````python  \nfrom faster_coco_eval import coco\nfrom faster_coco_eval.extra import curves\n\ncocogt = coco(....)\ncocodt = cocogt.loadres(....)\n\ncur = curves(cocogt, cocodt, iou_tresh=0.5, ioutype='segm')\ncur.plot_pre_rec()\n````\n\n## setup dependencies\n\n- numpy\n- plotly (optional if extra.curve usage)  \n\n## history\n\n### v1.4.0\n\n- [x] fix issue <https://github.com/mixaill76/faster_coco_eval/issues/12>\n- [x] updated pre-rec calculation method\n- [x] updated required libraries\n- [x] moved all matplotlib dependencies to plotly\n- [x] append new examples & mmeval test file\n\n### v1.3.3\n\n- [x] fix by vitrox <https://github.com/vitrox-technologies/faster_coco_eval>\n    - missing file issue\n    - issue discovered by torchmetric\n    - fstring for python3.7\n    - windows compilation\n\n### v1.3.2\n\n- [x] rework math_matches function. moved to faster_eval_api\n- [x] moved calculations from python to c++\n- [x] separated extra classes\n- [x] added new sample data\n- [x] append miou based on tp pred.\n- [x] append mauc based on coco pre/rec.\n\n### v1.3.1\n\n- [x] rework mask code\n- [x] change np.float to float ([numpy deprecations](https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations))\n\n### v1.3.0\n\n- [x] remove pycocotools dependencies\n- [x] clean c/c++ code\n\n### v1.2.3\n\n- [x] implemented of mean iou for tp\n- [x] set fp-red fn-blue\n\n### v1.2.2\n\n- [x] removed own implementation of pre-rec  \n- [x] switched to the implementation of pre-rec calculation from coco eval  \n- [x] lost backward compatibility  \n- [x] implemented output fp/fn/tp + gt to pictures  \n\n### v1.2.1\n\n- [x] bug fix with pre-rec curve  \n- [x] rework error calc (tp/fp/fn)  \n- [x] change image plot to plotly\n- [x] append docker auto builder  \n- [x] append native iou calc (slow but accurate)  \n- [x] rework auc calc with [link](https://towardsdatascience.com/how-to-efficiently-implement-area-under-precision-recall-curve-pr-auc-a85872fd7f14)  \n\n### v1.1.3-v1.1.4\n\n- [x] rebuild plotly backend\n- [x] segm bug-fix\n\n### v1.1.2\n\n- [x] append fp fn error analysis via curves\n- [x] append confusion matrix\n- [x] append plotly backend support for roc / auc\n\n### v1.1.1\n\n- [x] redesigned curves\n- [x] reworked data preload\n- [x] append csrc to setup\n- [x] build sdist package\n\n### v1.1.0\n\n- [x] wrap c++ code\n- [x] get it to compile\n- [x] add cocoeval class wraper\n- [x] remove detectron2 dependencies\n- [x] remove torch dependencies\n- [x] append unittest\n- [x] append roc / auc curves  \n- [x] check if it works on windows\n\n## license\n\nthe original module was licensed with apache 2, i will continue with the same license.\ndistributed under the apache version 2.0 license, see [license](license) for more information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "faster-coco-eval",
  "package_url": "https://pypi.org/project/faster-coco-eval/",
  "project_url": "https://pypi.org/project/faster-coco-eval/",
  "project_urls": {
    "Homepage": "https://github.com/MiXaiLL76/faster_coco_eval"
  },
  "release_url": "https://pypi.org/project/faster-coco-eval/1.4.0/",
  "requires_dist": [
    "numpy",
    "plotly",
    "Pillow"
  ],
  "requires_python": ">=3.7",
  "summary": "faster interpretation of the original cocoeval",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "mike.milos@yandex.ru",
    "mixaill76"
  ],
  "kwds": "faster_coco_eval cocoeval_faster cocodataset faster_eval_api coco",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_faster_coco_eval",
  "homepage": "https://github.com/mixaill76/faster_coco_eval",
  "release_count": 5,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_pillow",
    "pypi_plotly"
  ]
}
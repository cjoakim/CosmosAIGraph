{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: build tools"
  ],
  "description": "|circleci| |appveyor| |readthedocs| |coveralls| |version|\n\n|pyversions| |license|\n\n**author**: `pahaz`_\n\n**repo**: https://github.com/pahaz/sshtunnel/\n\ninspired by https://github.com/jmagnusson/bgtunnel, which doesn't work on\nwindows.\n\nsee also: https://github.com/paramiko/paramiko/blob/master/demos/forward.py\n\nrequirements\n-------------\n\n* `paramiko`_\n\ninstallation\n============\n\n`sshtunnel`_ is on pypi, so simply run:\n\n::\n\n    pip install sshtunnel\n\nor ::\n\n    easy_install sshtunnel\n\nor ::\n\n    conda install -c conda-forge sshtunnel\n\nto have it installed in your environment.\n\nfor installing from source, clone the\n`repo <https://github.com/pahaz/sshtunnel>`_ and run::\n\n    python setup.py install\n\ntesting the package\n-------------------\n\nin order to run the tests you first need\n`tox <https://testrun.org/tox/latest/>`_ and run::\n\n    python setup.py test\n\nusage scenarios\n===============\n\none of the typical scenarios where ``sshtunnel`` is helpful is depicted in the\nfigure below. user may need to connect a port of a remote server (i.e. 8080)\nwhere only ssh port (usually port 22) is reachable. ::\n\n    ----------------------------------------------------------------------\n\n                                |\n    -------------+              |    +----------+\n        local    |              |    |  remote  | :22 ssh\n        client   | <== ssh ========> |  server  | :8080 web service\n    -------------+              |    +----------+\n                                |\n                             firewall (only port 22 is open)\n\n    ----------------------------------------------------------------------\n\n**fig1**: how to connect to a service blocked by a firewall through ssh tunnel.\n\n\nif allowed by the ssh server, it is also possible to reach a private server\n(from the perspective of ``remote server``) not directly visible from the\noutside (``local client``'s perspective). ::\n\n    ----------------------------------------------------------------------\n\n                                |\n    -------------+              |    +----------+               +---------\n        local    |              |    |  remote  |               | private\n        client   | <== ssh ========> |  server  | <== local ==> | server\n    -------------+              |    +----------+               +---------\n                                |\n                             firewall (only port 443 is open)\n\n    ----------------------------------------------------------------------\n\n**fig2**: how to connect to ``private server`` through ssh tunnel.\n\n\nusage examples\n==============\n\napi allows either initializing the tunnel and starting it or using a ``with``\ncontext, which will take care of starting **and stopping** the tunnel:\n\nexample 1\n---------\n\ncode corresponding to **fig1** above follows, given remote server's address is\n``pahaz.urfuclub.ru``, password authentication and randomly assigned local bind\nport.\n\n.. code-block:: python\n\n    from sshtunnel import sshtunnelforwarder\n\n    server = sshtunnelforwarder(\n        'alfa.8iq.dev',\n        ssh_username=\"pahaz\",\n        ssh_password=\"secret\",\n        remote_bind_address=('127.0.0.1', 8080)\n    )\n\n    server.start()\n\n    print(server.local_bind_port)  # show assigned local port\n    # work with `secret service` through `server.local_bind_port`.\n\n    server.stop()\n\nexample 2\n---------\n\nexample of a port forwarding to a private server not directly reachable,\nassuming password protected pkey authentication, remote server's ssh service is\nlistening on port 443 and that port is open in the firewall (**fig2**):\n\n.. code-block:: python\n\n    import paramiko\n    import sshtunnel\n\n    with sshtunnel.open_tunnel(\n        (remote_server_ip, 443),\n        ssh_username=\"\",\n        ssh_pkey=\"/var/ssh/rsa_key\",\n        ssh_private_key_password=\"secret\",\n        remote_bind_address=(private_server_ip, 22),\n        local_bind_address=('0.0.0.0', 10022)\n    ) as tunnel:\n        client = paramiko.sshclient()\n        client.load_system_host_keys()\n        client.set_missing_host_key_policy(paramiko.autoaddpolicy())\n        client.connect('127.0.0.1', 10022)\n        # do some operations with client session\n        client.close()\n\n    print('finish!')\n\nexample 3\n---------\n\nexample of a port forwarding for the vagrant mysql local port:\n\n.. code-block:: python\n\n    from sshtunnel import open_tunnel\n    from time import sleep\n\n    with open_tunnel(\n        ('localhost', 2222),\n        ssh_username=\"vagrant\",\n        ssh_password=\"vagrant\",\n        remote_bind_address=('127.0.0.1', 3306)\n    ) as server:\n\n        print(server.local_bind_port)\n        while true:\n            # press ctrl-c for stopping\n            sleep(1)\n\n    print('finish!')\n\nor simply using the cli:\n\n.. code-block:: console\n\n    (bash)$ python -m sshtunnel -u vagrant -p vagrant -l :3306 -r 127.0.0.1:3306 -p 2222 localhost\n\nexample 4\n---------\n\nopening an ssh session jumping over two tunnels. ssh transport and tunnels\nwill be daemonised, which will not wait for the connections to stop at close\ntime.\n\n.. code-block:: python\n\n    import sshtunnel\n    from paramiko import sshclient\n\n\n    with sshtunnel.open_tunnel(\n        ssh_address_or_host=('gw1_ip', 20022),\n        remote_bind_address=('gw2_ip', 22),\n    ) as tunnel1:\n        print('connection to tunnel1 (gw1_ip:gw1_port) ok...')\n        with sshtunnel.open_tunnel(\n            ssh_address_or_host=('localhost', tunnel1.local_bind_port),\n            remote_bind_address=('target_ip', 22),\n            ssh_username='gw2_user',\n            ssh_password='gw2_pwd',\n        ) as tunnel2:\n            print('connection to tunnel2 (gw2_ip:gw2_port) ok...')\n            with sshclient() as ssh:\n                ssh.connect('localhost',\n                    port=tunnel2.local_bind_port,\n                    username='target_user',\n                    password='target_pwd',\n                )\n                ssh.exec_command(...)\n\n\ncli usage\n=========\n\n::\n\n    $ sshtunnel --help\n    usage: sshtunnel [-h] [-u ssh_username] [-p ssh_port] [-p ssh_password] -r\n                     ip:port [ip:port ...] [-l [ip:port [ip:port ...]]]\n                     [-k ssh_host_key] [-k key_file] [-s key_password] [-t] [-v]\n                     [-v] [-x ip:port] [-c ssh_config_file] [-z] [-n]\n                     [-d [folder [folder ...]]]\n                     ssh_address\n\n    pure python ssh tunnel utils\n    version 0.4.0\n\n    positional arguments:\n      ssh_address           ssh server ip address (gw for ssh tunnels)\n                            set with \"-- ssh_address\" if immediately after -r or -l\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -u ssh_username, --username ssh_username\n                            ssh server account username\n      -p ssh_port, --server_port ssh_port\n                            ssh server tcp port (default: 22)\n      -p ssh_password, --password ssh_password\n                            ssh server account password\n      -r ip:port [ip:port ...], --remote_bind_address ip:port [ip:port ...]\n                            remote bind address sequence: ip_1:port_1 ip_2:port_2 ... ip_n:port_n\n                            equivalent to ssh -lxxxx:ip_address:port\n                            if port is omitted, defaults to 22.\n                            example: -r 10.10.10.10: 10.10.10.10:5900\n      -l [ip:port [ip:port ...]], --local_bind_address [ip:port [ip:port ...]]\n                            local bind address sequence: ip_1:port_1 ip_2:port_2 ... ip_n:port_n\n                            elements may also be valid unix socket domains:\n                            /tmp/foo.sock /tmp/bar.sock ... /tmp/baz.sock\n                            equivalent to ssh -lport:xxxxxxxxx:xxxx, being the local ip address optional.\n                            by default it will listen in all interfaces (0.0.0.0) and choose a random port.\n                            example: -l :40000\n      -k ssh_host_key, --ssh_host_key ssh_host_key\n                            gateway's host key\n      -k key_file, --private_key_file key_file\n                            rsa/dss/ecdsa private key file\n      -s key_password, --private_key_password key_password\n                            rsa/dss/ecdsa private key password\n      -t, --threaded        allow concurrent connections to each tunnel\n      -v, --verbose         increase output verbosity (default: error)\n      -v, --version         show version number and quit\n      -x ip:port, --proxy ip:port\n                            ip and port of ssh proxy to destination\n      -c ssh_config_file, --config ssh_config_file\n                            ssh configuration file, defaults to ~/.ssh/config\n      -z, --compress        request server for compression over ssh transport\n      -n, --noagent         disable looking for keys from an ssh agent\n      -d [folder [folder ...]], --host_pkey_directories [folder [folder ...]]\n                            list of directories where ssh pkeys (in the format `id_*`) may be found\n\n.. _pahaz: https://github.com/pahaz\n.. _sshtunnel: https://pypi.python.org/pypi/sshtunnel\n.. _paramiko: http://www.paramiko.org/\n.. |circleci| image:: https://circleci.com/gh/pahaz/sshtunnel.svg?style=svg\n   :target: https://circleci.com/gh/pahaz/sshtunnel\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/oxg1vx2ycmnw3xr9?svg=true&passingtext=windows%20-%20ok&failingtext=windows%20-%20fail\n   :target: https://ci.appveyor.com/project/pahaz/sshtunnel\n.. |readthedocs| image:: https://readthedocs.org/projects/sshtunnel/badge/?version=latest\n   :target: http://sshtunnel.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n.. |coveralls| image:: https://coveralls.io/repos/github/pahaz/sshtunnel/badge.svg?branch=master\n   :target: https://coveralls.io/github/pahaz/sshtunnel?branch=master\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/sshtunnel.svg\n.. |version| image:: https://img.shields.io/pypi/v/sshtunnel.svg\n   :target: `sshtunnel`_\n.. |license| image::  https://img.shields.io/pypi/l/sshtunnel.svg\n   :target: https://github.com/pahaz/sshtunnel/blob/master/license\n\nonline documentation\n====================\n\ndocumentation may be found at `readthedocs`_.\n\n.. _readthedocs: https://sshtunnel.readthedocs.org/\n\ncontributors\n============\n\n- `cameron maske`_\n- `gustavo machado`_\n- `colin jermain`_\n- `jm fern\u00e1ndez`_ - (big thanks!)\n- `lewis thompson`_\n- `erik rogers`_\n- `mart s\u00f5mermaa`_\n- `chronial`_\n- `dan harbin`_\n- `ignacio peluffo`_\n- `niels zeilemaker`_\n- `georgy rylov`_\n- `eddie chiang`_\n- `kkrasovskii`_\n\nchangelog\n=========\n\n- v.0.4.0 (`pahaz`_)\n    + change the daemon mod flag for all tunnel threads (is not fully backward compatible) to prevent unexpected hangs (`#219`_)\n    + add docker based end to end functinal tests for mongo/postgres/mysql (`#219`_)\n    + add docker based end to end hangs tests (`#219`_)\n\n- v.0.3.2 (`pahaz`_, `jm fern\u00e1ndez`_)\n    + fix host key directory detection\n    + unify default ssh config folder to `~/.ssh`\n\n- v.0.3.1 (`pahaz`_)\n    + increase open connection timeout to 10 secods\n\n- v.0.3.0 (`pahaz`_)\n    + change default with context behavior to use `.stop(force=true)` on exit (is not fully backward compatible)\n    + remove useless `daemon_forward_servers = true` hack for hangs prevention (is not fully backward compatible)\n    + set transport keepalive to 5 second by default (disabled for version < 0.3.0)\n    + set default transport timeout to 0.1\n    + deprecate and remove `block_on_close` option\n    + fix \"deadlocks\" / \"tunneling hangs\" (`#173`_, `#201`_, `#162`_, `#211`_)\n\n- v.0.2.2 (`pahaz`_)\n    + add `.stop(force=true)` for force close active connections (`#201`_)\n\n- v.0.2.1 (`pahaz`_, `eddie chiang`_ and `kkrasovskii`_)\n    + fixes bug with orphan thread for a tunnel that is down (`#170`_)\n\n- v.0.2.0 (`georgy rylov`_)\n    + support ipv6 without proxy command. use built-in paramiko create socket logic. the logic tries to use ipv6 socket family first, then ipv4 socket family.\n\n- v.0.1.5 (`jm fern\u00e1ndez`_)\n    + introduce `block_on_close` attribute\n\n- v.0.1.4 (`niels zeilemaker`_)\n    + allow loading pkeys from `~/.ssh`\n\n- v.0.1.3 (`ignacio peluffo`_ and others)\n    + ``pkey_file`` parameter updated to accept relative paths to user folder using ``~``\n    + several bugfixes\n\n- v.0.1.2 (`jm fern\u00e1ndez`_)\n    + fix #77\n\n- v.0.1.1 (`jm fern\u00e1ndez`_)\n    + fix #72\n\n- v.0.1.0 (`jm fern\u00e1ndez`_)\n    + add `tunnel_bindings` property\n    + several bugfixes (#49, #56, #57, #59, #60, #62, #64, #66, ...)\n      (`pahaz`_, `jm fern\u00e1ndez`_)\n    + add trace logging level (`jm fern\u00e1ndez`_)\n    + code and tests refactoring (`jm fern\u00e1ndez`_)\n    + drop python3.2 support\n\n- v.0.0.8 (`jm fern\u00e1ndez`_)\n    + merge `#31`_: support unix domain socket (local) forwarding (`dan harbin`_)\n    + simplify api (`jm fern\u00e1ndez`_)\n    + add sphinx-based documentation (`jm fern\u00e1ndez`_)\n    + add ``allow_agent`` (fixes `#36`_, `#46`_) (`jm fern\u00e1ndez`_)\n    + add ``compression`` (`jm fern\u00e1ndez`_)\n    + add ``__str__`` method (`jm fern\u00e1ndez`_)\n    + add test functions (`jm fern\u00e1ndez`_)\n    + fix default username when not provided and ssh_config file is skipped (`jm fern\u00e1ndez`_)\n    + fix gateway ip unresolvable exception catching (`jm fern\u00e1ndez`_)\n    + minor fixes (`jm fern\u00e1ndez`_)\n    + add appveyor support (`jm fern\u00e1ndez`_)\n\n- v.0.0.7 (`jm fern\u00e1ndez`_)\n    + tunnels can now be stopped and started safely (`#41`_) (`jm fern\u00e1ndez`_)\n    + add timeout to ssh gateway and keep-alive messages (`#29`_) (`jm fern\u00e1ndez`_)\n    + allow sending a pkey directly (`#43`_) (`chronial`_)\n    + add ``-v`` cli option to show current version (`jm fern\u00e1ndez`_)\n    + add coverage (`jm fern\u00e1ndez`_)\n    + refactoring (`jm fern\u00e1ndez`_)\n\n- v.0.0.6 (`pahaz`_)\n    + add ``-s`` cli options for ssh private key password support (`pahaz`_)\n\n- v.0.0.5 (`pahaz`_)\n    + add ``ssh_proxy`` argument, as well as ``ssh_config(5)`` ``proxycommand`` support (`lewis thompson`_)\n    + add some python 2.6 compatibility fixes (`mart s\u00f5mermaa`_)\n    + ``paramiko.transport`` inherits handlers of loggers passed to ``sshtunnelforwarder`` (`jm fern\u00e1ndez`_)\n    + fix `#34`_, `#33`_, code style and docs (`jm fern\u00e1ndez`_)\n    + add tests (`pahaz`_)\n    + add ci integration (`pahaz`_)\n    + normal packaging (`pahaz`_)\n    + disable check distenation socket connection by ``sshtunnelforwarder.local_is_up`` (`pahaz`_) [changed default behavior]\n    + use daemon mode = false in all threads by default; detail_ (`pahaz`_) [changed default behavior]\n\n- v.0.0.4.4 (`pahaz`_)\n   + fix issue `#24`_ - hide ssh password in logs (`pahaz`_)\n\n- v.0.0.4.3 (`pahaz`_)\n    + fix default port issue `#19`_ (`pahaz`_)\n\n- v.0.0.4.2 (`pahaz`_)\n    + fix thread.daemon mode for python < 3.3 `#16`_, `#21`_ (`lewis thompson`_, `erik rogers`_)\n\n- v.0.0.4.1 (`pahaz`_)\n    + fix cli issues `#13`_ (`pahaz`_)\n\n- v.0.0.4 (`pahaz`_)\n    + daemon mode by default for all threads (`jm fern\u00e1ndez`_, `pahaz`_) - *incompatible*\n    + move ``make_ssh_forward_server`` to ``sshtunnelforwarder.make_ssh_forward_server`` (`pahaz`_, `jm fern\u00e1ndez`_) - *incompatible*\n    + move ``make_ssh_forward_handler`` to ``sshtunnelforwarder.make_ssh_forward_handler_class`` (`pahaz`_, `jm fern\u00e1ndez`_) - *incompatible*\n    + rename ``open`` to ``open_tunnel`` (`jm fern\u00e1ndez`_) - *incompatible*\n    + add cli interface (`jm fern\u00e1ndez`_)\n    + support opening several tunnels at once (`jm fern\u00e1ndez`_)\n    + improve stability and readability (`jm fern\u00e1ndez`_, `pahaz`_)\n    + improve logging (`jm fern\u00e1ndez`_, `pahaz`_)\n    + add ``raise_exception_if_any_forwarder_have_a_problem`` argument for opening several tunnels at once (`pahaz`_)\n    + add ``ssh_config_file`` argument support (`jm fern\u00e1ndez`_)\n    + add python 3 support (`jm fern\u00e1ndez`_, `pahaz`_)\n\n- v.0.0.3 (`pahaz`_)\n    + add ``threaded`` option (`cameron maske`_)\n    + fix exception error message, correctly printing destination address (`gustavo machado`_)\n    + fix ``pip install`` failure (`colin jermain`_, `pahaz`_)\n\n- v.0.0.1 (`pahaz`_)\n    + ``sshtunnelforwarder`` class (`pahaz`_)\n    + ``open`` function (`pahaz`_)\n\n\n.. _pahaz: https://github.com/pahaz\n.. _cameron maske: https://github.com/cameronmaske\n.. _gustavo machado: https://github.com/gdmachado\n.. _colin jermain: https://github.com/cjermain\n.. _jm fern\u00e1ndez: https://github.com/fernandezcuesta\n.. _lewis thompson: https://github.com/lewisthompson\n.. _erik rogers: https://github.com/ewrogers\n.. _mart s\u00f5mermaa: https://github.com/mrts\n.. _chronial: https://github.com/chronial\n.. _dan harbin: https://github.com/rasterburn\n.. _ignacio peluffo: https://github.com/ipeluffo\n.. _niels zeilemaker: https://github.com/nielszeilemaker\n.. _georgy rylov: https://github.com/g0djan\n.. _eddie chiang: https://github.com/eddie-chiang\n.. _kkrasovskii: https://github.com/kkrasovskii\n.. _#13: https://github.com/pahaz/sshtunnel/issues/13\n.. _#16: https://github.com/pahaz/sshtunnel/issues/16\n.. _#19: https://github.com/pahaz/sshtunnel/issues/19\n.. _#21: https://github.com/pahaz/sshtunnel/issues/21\n.. _#24: https://github.com/pahaz/sshtunnel/issues/24\n.. _#29: https://github.com/pahaz/sshtunnel/issues/29\n.. _#31: https://github.com/pahaz/sshtunnel/issues/31\n.. _#33: https://github.com/pahaz/sshtunnel/issues/33\n.. _#34: https://github.com/pahaz/sshtunnel/issues/34\n.. _#36: https://github.com/pahaz/sshtunnel/issues/36\n.. _#41: https://github.com/pahaz/sshtunnel/issues/41\n.. _#43: https://github.com/pahaz/sshtunnel/issues/43\n.. _#46: https://github.com/pahaz/sshtunnel/issues/46\n.. _#170: https://github.com/pahaz/sshtunnel/issues/170\n.. _#201: https://github.com/pahaz/sshtunnel/issues/201\n.. _#162: https://github.com/pahaz/sshtunnel/issues/162\n.. _#173: https://github.com/pahaz/sshtunnel/issues/173\n.. _#201: https://github.com/pahaz/sshtunnel/issues/201\n.. _#211: https://github.com/pahaz/sshtunnel/issues/211\n.. _#219: https://github.com/pahaz/sshtunnel/issues/219\n.. _detail: https://github.com/pahaz/sshtunnel/commit/64af238b799b0e0057c4f9b386cda247e0006da9#diff-76bc1662a114401c2954deb92b740081r127\n\n\n",
  "docs_url": null,
  "keywords": "ssh tunnel paramiko proxy tcp-forward",
  "license": "mit",
  "name": "sshtunnel",
  "package_url": "https://pypi.org/project/sshtunnel/",
  "project_url": "https://pypi.org/project/sshtunnel/",
  "project_urls": {
    "Download": "https://pypi.python.org/packages/source/s/sshtunnel/sshtunnel-0.4.0.zip",
    "Homepage": "https://github.com/pahaz/sshtunnel"
  },
  "release_url": "https://pypi.org/project/sshtunnel/0.4.0/",
  "requires_dist": [
    "paramiko (>=2.7.2)",
    "sphinx ; extra == 'build_sphinx'",
    "sphinxcontrib-napoleon ; extra == 'build_sphinx'",
    "check-manifest ; extra == 'dev'",
    "tox (>=1.8.1) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "pure python ssh tunnels",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "pahaz.white@gmail.com",
    "pahaz_white"
  ],
  "kwds": "paramiko ssh_proxy make_ssh_forward_handler tunnel_bindings sshtunnelforwarder",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sshtunnel",
  "homepage": "https://github.com/pahaz/sshtunnel",
  "release_count": 28,
  "dependency_ids": [
    "pypi_check_manifest",
    "pypi_paramiko",
    "pypi_sphinx",
    "pypi_sphinxcontrib_napoleon",
    "pypi_tox"
  ]
}
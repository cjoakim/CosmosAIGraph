{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: security :: cryptography"
  ],
  "description": "# asn1crypto\n\na fast, pure python library for parsing and serializing asn.1 structures.\n\n - [features](#features)\n - [why another python asn.1 library?](#why-another-python-asn1-library)\n - [related crypto libraries](#related-crypto-libraries)\n - [current release](#current-release)\n - [dependencies](#dependencies)\n - [installation](#installation)\n - [license](#license)\n - [security policy](#security-policy)\n - [documentation](#documentation)\n - [continuous integration](#continuous-integration)\n - [testing](#testing)\n - [development](#development)\n - [ci tasks](#ci-tasks)\n\n[![github actions ci](https://github.com/wbond/asn1crypto/workflows/ci/badge.svg)](https://github.com/wbond/asn1crypto/actions?workflow=ci)\n[![circleci](https://circleci.com/gh/wbond/asn1crypto.svg?style=shield)](https://circleci.com/gh/wbond/asn1crypto)\n[![pypi](https://img.shields.io/pypi/v/asn1crypto.svg)](https://pypi.org/project/asn1crypto/)\n\n## features\n\nin addition to an asn.1 ber/der decoder and der serializer, the project includes\na bunch of asn.1 structures for use with various common cryptography standards:\n\n| standard               | module                                      | source                                                                                                                 |\n| ---------------------- | ------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| x.509                  | [`asn1crypto.x509`](asn1crypto/x509.py)     | [rfc 5280](https://tools.ietf.org/html/rfc5280)                                                                        |\n| crl                    | [`asn1crypto.crl`](asn1crypto/crl.py)       | [rfc 5280](https://tools.ietf.org/html/rfc5280)                                                                        |\n| csr                    | [`asn1crypto.csr`](asn1crypto/csr.py)       | [rfc 2986](https://tools.ietf.org/html/rfc2986), [rfc 2985](https://tools.ietf.org/html/rfc2985)                       |\n| ocsp                   | [`asn1crypto.ocsp`](asn1crypto/ocsp.py)     | [rfc 6960](https://tools.ietf.org/html/rfc6960)                                                                        |\n| pkcs#12                | [`asn1crypto.pkcs12`](asn1crypto/pkcs12.py) | [rfc 7292](https://tools.ietf.org/html/rfc7292)                                                                        |\n| pkcs#8                 | [`asn1crypto.keys`](asn1crypto/keys.py)     | [rfc 5208](https://tools.ietf.org/html/rfc5208)                                                                        |\n| pkcs#1 v2.1 (rsa keys) | [`asn1crypto.keys`](asn1crypto/keys.py)     | [rfc 3447](https://tools.ietf.org/html/rfc3447)                                                                        |\n| dsa keys               | [`asn1crypto.keys`](asn1crypto/keys.py)     | [rfc 3279](https://tools.ietf.org/html/rfc3279)                                                                        |\n| elliptic curve keys    | [`asn1crypto.keys`](asn1crypto/keys.py)     | [secg sec1 v2](http://www.secg.org/sec1-v2.pdf)                                                                        |\n| pkcs#3 v1.4            | [`asn1crypto.algos`](asn1crypto/algos.py)   | [pkcs#3 v1.4](ftp://ftp.rsasecurity.com/pub/pkcs/ascii/pkcs-3.asc)                                                        |\n| pkcs#5 v2.1            | [`asn1crypto.algos`](asn1crypto/algos.py)   | [pkcs#5 v2.1](http://www.emc.com/collateral/white-papers/h11302-pkcs5v2-1-password-based-cryptography-standard-wp.pdf) |\n| cms (and pkcs#7)       | [`asn1crypto.cms`](asn1crypto/cms.py)       | [rfc 5652](https://tools.ietf.org/html/rfc5652), [rfc 2315](https://tools.ietf.org/html/rfc2315)                       |\n| tsp                    | [`asn1crypto.tsp`](asn1crypto/tsp.py)       | [rfc 3161](https://tools.ietf.org/html/rfc3161)                                                                        |\n| pdf signatures         | [`asn1crypto.pdf`](asn1crypto/pdf.py)       | [pdf 1.7](http://wwwimages.adobe.com/content/dam/adobe/en/devnet/pdf/pdfs/pdf32000_2008.pdf)                           |\n\n## why another python asn.1 library?\n\npython has long had the [pyasn1](https://pypi.org/project/pyasn1/) and\n[pyasn1_modules](https://pypi.org/project/pyasn1-modules/) available for\nparsing and serializing asn.1 structures. while the project does include a\ncomprehensive set of tools for parsing and serializing, the performance of the\nlibrary can be very poor, especially when dealing with bit fields and parsing\nlarge structures such as crls.\n\nafter spending extensive time using *pyasn1*, the following issues were\nidentified:\n\n 1. poor performance\n 2. verbose, non-pythonic api\n 3. out-dated and incomplete definitions in *pyasn1-modules*\n 4. no simple way to map data to native python data structures\n 5. no mechanism for overridden universal asn.1 types\n\nthe *pyasn1* api is largely method driven, and uses extensive configuration\nobjects and lowercamelcase names. there were no consistent options for\nconverting types of native python data structures. since the project supports\nout-dated versions of python, many newer language features are unavailable\nfor use.\n\ntime was spent trying to profile issues with the performance, however the\narchitecture made it hard to pin down the primary source of the poor\nperformance. attempts were made to improve performance by utilizing unreleased\npatches and delaying parsing using the `any` type. even with such changes, the\nperformance was still unacceptably slow.\n\nfinally, a number of structures in the cryptographic space use universal data\ntypes such as `bitstring` and `octetstring`, but interpret the data as other\ntypes. for instance, signatures are really byte strings, but are encoded as\n`bitstring`. elliptic curve keys use both `bitstring` and `octetstring` to\nrepresent integers. parsing these structures as the base universal types and\nthen re-interpreting them wastes computation.\n\n*asn1crypto* uses the following techniques to improve performance, especially\nwhen extracting one or two fields from large, complex structures:\n\n - delayed parsing of byte string values\n - persistence of original asn.1 encoded data until a value is changed\n - lazy loading of child fields\n - utilization of high-level python stdlib modules\n\nwhile there is no extensive performance test suite, the\n`crltests.test_parse_crl` test case was used to parse a 21mb crl file on a\nlate 2013 rmbp. *asn1crypto* parsed the certificate serial numbers in just\nunder 8 seconds. with *pyasn1*, using definitions from *pyasn1-modules*, the\nsame parsing took over 4,100 seconds.\n\nfor smaller structures the performance difference can range from a few times\nfaster to an order of magnitude or more.\n\n## related crypto libraries\n\n*asn1crypto* is part of the modularcrypto family of python packages:\n\n - [asn1crypto](https://github.com/wbond/asn1crypto)\n - [oscrypto](https://github.com/wbond/oscrypto)\n - [csrbuilder](https://github.com/wbond/csrbuilder)\n - [certbuilder](https://github.com/wbond/certbuilder)\n - [crlbuilder](https://github.com/wbond/crlbuilder)\n - [ocspbuilder](https://github.com/wbond/ocspbuilder)\n - [certvalidator](https://github.com/wbond/certvalidator)\n\n## current release\n\n1.5.0 - [changelog](changelog.md)\n\n## dependencies\n\npython 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10 or pypy. *no third-party\npackages required.*\n\n## installation\n\n```bash\npip install asn1crypto\n```\n\n## license\n\n*asn1crypto* is licensed under the terms of the mit license. see the\n[license](license) file for the exact license text.\n\n## security policy\n\nthe security policies for this project are covered in\n[security.md](https://github.com/wbond/asn1crypto/blob/master/security.md).\n\n## documentation\n\nthe documentation for *asn1crypto* is composed of tutorials on basic usage and\nlinks to the source for the various pre-defined type classes.\n\n### tutorials\n\n - [universal types with ber/der decoder and der encoder](docs/universal_types.md)\n - [pem encoder and decoder](docs/pem.md)\n\n### reference\n\n - [universal types](asn1crypto/core.py), `asn1crypto.core`\n - [digest, hmac, signed digest and encryption algorithms](asn1crypto/algos.py), `asn1crypto.algos`\n - [private and public keys](asn1crypto/keys.py), `asn1crypto.keys`\n - [x509 certificates](asn1crypto/x509.py), `asn1crypto.x509`\n - [certificate revocation lists (crls)](asn1crypto/crl.py), `asn1crypto.crl`\n - [online certificate status protocol (ocsp)](asn1crypto/ocsp.py), `asn1crypto.ocsp`\n - [certificate signing requests (csrs)](asn1crypto/csr.py), `asn1crypto.csr`\n - [private key/certificate containers (pkcs#12)](asn1crypto/pkcs12.py), `asn1crypto.pkcs12`\n - [cryptographic message syntax (cms, pkcs#7)](asn1crypto/cms.py), `asn1crypto.cms`\n - [time stamp protocol (tsp)](asn1crypto/tsp.py), `asn1crypto.tsp`\n - [pdf signatures](asn1crypto/pdf.py), `asn1crypto.pdf`\n\n## continuous integration\n\nvarious combinations of platforms and versions of python are tested via:\n\n - [macos, linux, windows](https://github.com/wbond/asn1crypto/actions/workflows/ci.yml) via github actions\n - [arm64](https://circleci.com/gh/wbond/asn1crypto) via circleci\n\n## testing\n\ntests are written using `unittest` and require no third-party packages.\n\ndepending on what type of source is available for the package, the following\ncommands can be used to run the test suite.\n\n### git repository\n\nwhen working within a git working copy, or an archive of the git repository,\nthe full test suite is run via:\n\n```bash\npython run.py tests\n```\n\nto run only some tests, pass a regular expression as a parameter to `tests`.\n\n```bash\npython run.py tests ocsp\n```\n\n### pypi source distribution\n\nwhen working within an extracted source distribution (aka `.tar.gz`) from\npypi, the full test suite is run via:\n\n```bash\npython setup.py test\n```\n\n### package\n\nwhen the package has been installed via pip (or another method), the package\n`asn1crypto_tests` may be installed and invoked to run the full test suite:\n\n```bash\npip install asn1crypto_tests\npython -m asn1crypto_tests\n```\n\n## development\n\nto install the package used for linting, execute:\n\n```bash\npip install --user -r requires/lint\n```\n\nthe following command will run the linter:\n\n```bash\npython run.py lint\n```\n\nsupport for code coverage can be installed via:\n\n```bash\npip install --user -r requires/coverage\n```\n\ncoverage is measured by running:\n\n```bash\npython run.py coverage\n```\n\nto change the version number of the package, run:\n\n```bash\npython run.py version {pep440_version}\n```\n\nto install the necessary packages for releasing a new version on pypi, run:\n\n```bash\npip install --user -r requires/release\n```\n\nreleases are created by:\n\n - making a git tag in [pep 440](https://www.python.org/dev/peps/pep-0440/#examples-of-compliant-version-schemes) format\n - running the command:\n\n   ```bash\n   python run.py release\n   ```\n\nexisting releases can be found at https://pypi.org/project/asn1crypto/.\n\n## ci tasks\n\na task named `deps` exists to download and stage all necessary testing\ndependencies. on posix platforms, `curl` is used for downloads and on windows\npowershell with `net.webclient` is used. this configuration sidesteps issues\nrelated to getting pip to work properly and messing with `site-packages` for\nthe version of python being used.\n\nthe `ci` task runs `lint` (if flake8 is available for the version of python) and\n`coverage` (or `tests` if coverage is not available for the version of python).\nif the current directory is a clean git working copy, the coverage data is\nsubmitted to codecov.io.\n\n```bash\npython run.py deps\npython run.py ci\n```\n\n\n",
  "docs_url": null,
  "keywords": "asn1 crypto pki x509 certificate rsa dsa ec dh",
  "license": "mit",
  "name": "asn1crypto",
  "package_url": "https://pypi.org/project/asn1crypto/",
  "project_url": "https://pypi.org/project/asn1crypto/",
  "project_urls": {
    "Homepage": "https://github.com/wbond/asn1crypto"
  },
  "release_url": "https://pypi.org/project/asn1crypto/1.5.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "fast asn.1 parser and serializer with definitions for private keys, public keys, certificates, crl, ocsp, cms, pkcs#3, pkcs#7, pkcs#8, pkcs#12, pkcs#5, x.509 and tsp",
  "version": "1.5.1",
  "releases": [],
  "developers": [
    "wbond",
    "will@wbond.net"
  ],
  "kwds": "asn1crypto asn1crypto_tests asn1 asn certbuilder",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_asn1crypto",
  "homepage": "https://github.com/wbond/asn1crypto",
  "release_count": 33,
  "dependency_ids": []
}
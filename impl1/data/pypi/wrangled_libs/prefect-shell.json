{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "# integrating shell commands into your dataflow with `prefect-shell`\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/15331990/216169092-20cc6e77-ee3b-4aef-a8e7-02747eb5a549.png\">\n    <br>\n    <a href=\"https://pypi.python.org/pypi/prefect-shell/\" alt=\"pypi version\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/prefect-shell?color=0052ff&labelcolor=090422\"></a>\n    <a href=\"https://github.com/prefecthq/prefect-shell/\" alt=\"stars\">\n        <img src=\"https://img.shields.io/github/stars/prefecthq/prefect-shell?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://pepy.tech/badge/prefect-shell/\" alt=\"downloads\">\n        <img src=\"https://img.shields.io/pypi/dm/prefect-shell?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://github.com/prefecthq/prefect-shell/pulse\" alt=\"activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/prefecthq/prefect-shell?color=0052ff&labelcolor=090422\" /></a>\n    <br>\n    <a href=\"https://prefect-community.slack.com\" alt=\"slack\">\n        <img src=\"https://img.shields.io/badge/slack-join_community-red.svg?color=0052ff&labelcolor=090422&logo=slack\" /></a>\n    <a href=\"https://discourse.prefect.io/\" alt=\"discourse\">\n        <img src=\"https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052ff&labelcolor=090422&logo=discourse\" /></a>\n</p>\n\nvisit the full docs [here](https://prefecthq.github.io/prefect-shell) to see additional examples and the api reference.\n\nthe prefect-shell collection makes it easy to execute shell commands in your prefect flows. check out the examples below to get started!\n\n## getting started\n\n### integrate with prefect flows\n\nwith prefect-shell, you can bring your trusty shell commands (and/or scripts) straight into the prefect flow party, complete with awesome prefect logging.\n\nno more separate logs, just seamless integration. let's get the shell-abration started!\n\n```python\nfrom prefect import flow\nfrom datetime import datetime\nfrom prefect_shell import shelloperation\n\n@flow\ndef download_data():\n    today = datetime.today().strftime(\"%y%m%d\")\n\n    # for short running operations, you can use the `run` method\n    # which automatically manages the context\n    shelloperation(\n        commands=[\n            \"mkdir -p data\",\n            \"mkdir -p data/${today}\"\n        ],\n        env={\"today\": today}\n    ).run()\n\n    # for long running operations, you can use a context manager\n    with shelloperation(\n        commands=[\n            \"curl -o https://masie_web.apps.nsidc.org/pub/datasets/noaa/g02135/north/daily/data/n_seaice_extent_daily_v3.0.csv\",\n        ],\n        working_dir=f\"data/{today}\",\n    ) as download_csv_operation:\n\n        # trigger runs the process in the background\n        download_csv_process = download_csv_operation.trigger()\n\n        # then do other things here in the meantime, like download another file\n        ...\n\n        # when you're ready, wait for the process to finish\n        download_csv_process.wait_for_completion()\n\n        # if you'd like to get the output lines, you can use the `fetch_result` method\n        output_lines = download_csv_process.fetch_result()\n\ndownload_data()\n```\n\noutputs:\n```bash\n14:48:16.550 | info    | prefect.engine - created flow run 'tentacled-chachalaca' for flow 'download-data'\n14:48:17.977 | info    | flow run 'tentacled-chachalaca' - pid 19360 triggered with 2 commands running inside the '.' directory.\n14:48:17.987 | info    | flow run 'tentacled-chachalaca' - pid 19360 completed with return code 0.\n14:48:17.994 | info    | flow run 'tentacled-chachalaca' - pid 19363 triggered with 1 commands running inside the posixpath('data/20230201') directory.\n14:48:18.009 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\n  % total    % received % xferd  average speed   time    time     time  current\n                                 dl\n14:48:18.010 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\noad  upload   total   spent    left  speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n14:48:18.840 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\n 11 1630k   11  192k    0     0   229k      0  0:00:07 --:--:--  0:00:07  231k\n14:48:19.839 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\n 83 1630k   83 1368k    0     0   745k      0  0:00:02  0:00:01  0:00:01  747k\n14:48:19.993 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\n100 1630k  100 1630k    0     0   819k      0  0\n14:48:19.994 | info    | flow run 'tentacled-chachalaca' - pid 19363 stream output:\n:00:01  0:00:01 --:--:--  821k\n14:48:19.996 | info    | flow run 'tentacled-chachalaca' - pid 19363 completed with return code 0.\n14:48:19.998 | info    | flow run 'tentacled-chachalaca' - successfully closed all open processes.\n14:48:20.203 | info    | flow run 'tentacled-chachalaca' - finished in state completed()\n```\n\n!!! info \"utilize previously saved blocks\"\n\n    you can save commands within a `shelloperation` block, then reuse them across multiple flows, or even plain python scripts.\n    \n    save the block with desired commands:\n\n    ```python\n    from prefect_shell import shelloperation\n\n    ping_op = shelloperation(commands=[\"ping -t 1 prefect.io\"])\n    ping_op.save(\"block-name\")\n    ```\n\n    load the saved block:\n\n    ```python\n    from prefect_shell import shelloperation\n\n    ping_op = shelloperation.load(\"block-name\")\n    ```\n\n    to [view and edit the blocks](https://orion-docs.prefect.io/ui/blocks/) on prefect ui:\n\n    ```bash\n    prefect block register -m prefect_shell\n    ```\n\n## resources\n\nfor more tips on how to use tasks and flows in a collection, check out [using collections](https://orion-docs.prefect.io/collections/usage/)!\n\n### installation\n\ninstall `prefect-shell` with `pip`:\n\n```bash\npip install -u prefect-shell\n```\n\na list of available blocks in `prefect-shell` and their setup instructions can be found [here](https://prefecthq.github.io/prefect-shell/blocks_catalog).\n\nrequires an installation of python 3.7+.\n\nwe recommend using a python virtual environment manager such as pipenv, conda or virtualenv.\n\nthese tasks are designed to work with prefect 2. for more information about how to use prefect, please refer to the [prefect documentation](https://orion-docs.prefect.io/).\n\n### feedback\n\nif you encounter any bugs while using `prefect-shell`, feel free to open an issue in the [prefect-shell](https://github.com/prefecthq/prefect-shell) repository.\n\nif you have any questions or issues while using `prefect-shell`, you can find help in either the [prefect discourse forum](https://discourse.prefect.io/) or the [prefect slack community](https://prefect.io/slack).\n\nfeel free to star or watch [`prefect-shell`](https://github.com/prefecthq/prefect-shell) for updates too!\n \n### contributing\n \nif you'd like to help contribute to fix an issue or add a feature to `prefect-shell`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n \nhere are the steps:\n\n1. [fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)\n2. [clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)\n3. install the repository and its dependencies:\n```\npip install -e \".[dev]\"\n```\n4. make desired changes\n5. add tests\n6. insert an entry to [changelog.md](https://github.com/prefecthq/prefect-shell/blob/main/changelog.md)\n7. install `pre-commit` to perform quality checks prior to commit:\n```\npre-commit install\n```\n8. `git commit`, `git push`, and create a pull request\n",
  "docs_url": null,
  "keywords": "prefect",
  "license": "apache license 2.0",
  "name": "prefect-shell",
  "package_url": "https://pypi.org/project/prefect-shell/",
  "project_url": "https://pypi.org/project/prefect-shell/",
  "project_urls": {
    "Homepage": "https://github.com/PrefectHQ/prefect-shell"
  },
  "release_url": "https://pypi.org/project/prefect-shell/0.2.2/",
  "requires_dist": [
    "prefect >=2.13.5",
    "pytest ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "mkdocs ; extra == 'dev'",
    "mkdocs-material ; extra == 'dev'",
    "mkdocstrings[python] ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest-asyncio ; extra == 'dev'",
    "mkdocs-gen-files ; extra == 'dev'",
    "interrogate ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "pillow ; extra == 'dev'",
    "mock ; (python_version < \"3.8\") and extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "prefect tasks and subflows for interacting with shell commands.",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "help@prefect.io",
    "prefect_technologies"
  ],
  "kwds": "prefect_shell dataflow pip pypi shell",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_prefect_shell",
  "homepage": "https://github.com/prefecthq/prefect-shell",
  "release_count": 9,
  "dependency_ids": [
    "pypi_black",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_interrogate",
    "pypi_isort",
    "pypi_mkdocs",
    "pypi_mkdocs_gen_files",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings",
    "pypi_mock",
    "pypi_mypy",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_prefect",
    "pypi_pytest",
    "pypi_pytest_asyncio"
  ]
}
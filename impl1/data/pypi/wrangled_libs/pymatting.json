{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# pymatting: a python library for alpha matting\n[![license: mit](https://img.shields.io/github/license/pymatting/pymatting?color=brightgreen)](https://opensource.org/licenses/mit)\n[![ci](https://img.shields.io/github/actions/workflow/status/pymatting/pymatting/.github/workflows/tests.yml?branch=master)](https://github.com/pymatting/pymatting/actions?query=workflow%3atests)\n[![pypi](https://img.shields.io/pypi/v/pymatting)](https://pypi.org/project/pymatting/)\n[![joss](https://joss.theoj.org/papers/9766cab65bfbf07a70c8a835edd3875a/status.svg)](https://joss.theoj.org/papers/9766cab65bfbf07a70c8a835edd3875a)\n[![gitter](https://img.shields.io/gitter/room/pymatting/pymatting)](https://gitter.im/pymatting/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nwe introduce the pymatting package for python which implements various methods to solve the alpha matting problem.\n\n- **website and documentation:** [https://pymatting.github.io/](https://pymatting.github.io)\n- **benchmarks:**  [https://pymatting.github.io/benchmarks.html](https://pymatting.github.io/benchmarks.html)\n\n![lemur](https://github.com/pymatting/pymatting/raw/master/data/lemur/lemur_at_the_beach.png)\n\ngiven an input image and a hand-drawn trimap (top row), alpha matting estimates the alpha channel of a foreground object which can then be composed onto a different background (bottom row).\n\npymatting provides:\n- alpha matting implementations for:\n  - closed form alpha matting [[1]](#1)\n  - large kernel matting [[2]](#2)\n  - knn matting [[3]](#3)\n  - learning based digital matting [[4]](#4)\n  - random walk matting [[5]](#5)\n  - shared sampling matting [[6]](#6)\n- foreground estimation implementations for:\n  - closed form foreground estimation [[1]](#1)\n  - fast multi-level foreground estimation (cpu, cuda and opencl) [[7]](#7)\n- fast multithreaded knn search\n- preconditioners to accelerate the convergence rate of conjugate gradient descent:\n  - the *incomplete thresholded cholesky decomposition* (*incomplete* is part of the name. the implementation is quite complete.)\n  - the v-cycle geometric multigrid preconditioner\n- readable code leveraging [numpy](https://numpy.org/), [scipy](https://scipy.org/) and [numba](http://numba.pydata.org/)\n\n## getting started\n\n### requirements\n\nminimal requiremens\n* numpy>=1.16.0\n* pillow>=5.2.0\n* numba>=0.47.0\n* scipy>=1.1.0\n\nadditional requirements for gpu support\n* cupy-cuda90>=6.5.0 or similar\n* pyopencl>=2019.1.2\n\nrequirements to run the tests\n* pytest>=5.3.4\n\n### installation with pypi\n\n```bash\npip3 install pymatting\n```\n\n### installation from source\n\n```bash\ngit clone https://github.com/pymatting/pymatting\ncd pymatting\npip3 install .\n```\n\n## example\n```python\nfrom pymatting import cutout\n\ncutout(\n    # input image path\n    \"data/lemur/lemur.png\",\n    # input trimap path\n    \"data/lemur/lemur_trimap.png\",\n    # output cutout path\n    \"lemur_cutout.png\")\n```\n\n[more advanced examples](https://pymatting.github.io/examples.html)\n\n## trimap construction\n\nall implemented methods rely on trimaps which roughly classify the image into foreground, background and unknown reagions.\ntrimaps are expected to be `numpy.ndarrays` of type `np.float64`  having the same shape as the input image with only one color-channel.\ntrimap values of 0.0 denote pixels which are 100% background.\nsimilarly, trimap values of 1.0 denote pixels which are 100% foreground.\nall other values indicate unknown pixels which will be estimated by the algorithm.\n\n\n## testing\n\nrun the tests from the main directory:\n```\n python3 tests/download_images.py\n pip3 install -r requirements_tests.txt\n pytest\n```\n\ncurrently 89% of the code is covered by tests.\n\n## upgrade\n\n```bash\npip3 install --upgrade pymatting\npython3 -c \"import pymatting\"\n```\n\n## bug reports, questions and pull-requests\n\nplease, see [our community guidelines](https://github.com/pymatting/pymatting/blob/master/contributing.md).\n\n## authors\n\n- **thomas germer**\n- **tobias uelwer**\n- **stefan conrad**\n- **stefan harmeling**\n\nsee also the list of [contributors](https://github.com/pymatting/pymatting/contributors) who participated in this project.\n\n## projects using pymatting\n\n* [rembg](https://github.com/danielgatis/rembg) - an excellent tool for removing image backgrounds.\n* [paddleseg](https://github.com/paddlepaddle/paddleseg) - a library for a wide range of image segmentation tasks.\n* [chainner](https://github.com/chainner-org/chainner) - a node-based image processing gui.\n* [lsa-matting](https://github.com/kfeng123/lsa-matting) - improving deep image matting via local smoothness assumption.\n\n## license\n\nthis project is licensed under the mit license - see the [license.md](license.md) file for details\n\n## citing\n\nif you found pymatting to be useful for your work, please consider citing our [paper](https://doi.org/10.21105/joss.02481):\n\n```\n@article{germer2020,\n  doi = {10.21105/joss.02481},\n  url = {https://doi.org/10.21105/joss.02481},\n  year = {2020},\n  publisher = {the open journal},\n  volume = {5},\n  number = {54},\n  pages = {2481},\n  author = {thomas germer and tobias uelwer and stefan conrad and stefan harmeling},\n  title = {pymatting: a python library for alpha matting},\n  journal = {journal of open source software}\n}\n```\n\n## references\n\n<a id=\"1\">[1]</a>\nanat levin, dani lischinski, and yair weiss. a closed-form solution to natural image matting. ieee transactions on pattern analysis and machine intelligence, 30(2):228\u2013242, 2007.\n\n<a id=\"2\">[2]</a>\nkaiming he, jian sun, and xiaoou tang. fast matting using large kernel matting laplacian matrices. in 2010 ieee computer society conference on computer vision and pattern recognition, 2165\u20132172. ieee, 2010.\n\n<a id=\"3\">[3]</a>\nqifeng chen, dingzeyu li, and chi-keung tang. knn matting. ieee transactions on pattern analysis and machine intelligence, 35(9):2175\u20132188, 2013.\n\n<a id=\"4\">[4]</a>\nyuanjie zheng and chandra kambhamettu. learning based digital matting. in 2009 ieee 12th international conference on computer vision, 889\u2013896. ieee, 2009.\n\n<a id=\"5\">[5]</a>\nleo grady, thomas schiwietz, shmuel aharon, and r\u00fcdiger westermann. random walks for interactive alpha-matting. in proceedings of viip, volume 2005, 423\u2013429. 2005.\n\n<a id=\"6\">[6]</a>\neduardo s. l. gastal and manuel m. oliveira. \"shared sampling for real-time alpha matting\". computer graphics forum. volume 29 (2010), number 2, proceedings of eurographics 2010, pp. 575-584.\n\n<a id=\"7\">[7]</a>\ngermer, t., uelwer, t., conrad, s., & harmeling, s. (2020). fast multi-level foreground estimation. arxiv preprint arxiv:2006.14970.\n\nlemur image by mathias appel from https://www.flickr.com/photos/mathiasappel/25419442300/ licensed under [cc0 1.0 universal (cc0 1.0) public domain license](https://creativecommons.org/publicdomain/zero/1.0/).\n",
  "docs_url": null,
  "keywords": "alpha matting",
  "license": "mit",
  "name": "pymatting",
  "package_url": "https://pypi.org/project/PyMatting/",
  "project_url": "https://pypi.org/project/PyMatting/",
  "project_urls": {
    "Homepage": "https://pymatting.github.io",
    "Source": "https://github.com/pymatting/pymatting"
  },
  "release_url": "https://pypi.org/project/PyMatting/1.1.12/",
  "requires_dist": [
    "numpy >=1.16.0",
    "pillow >=5.2.0",
    "numba !=0.49.0",
    "scipy >=1.1.0"
  ],
  "requires_python": ">=3",
  "summary": "python package for alpha matting.",
  "version": "1.1.12",
  "releases": [],
  "developers": [
    "pymatting@gmail.com",
    "the_pymatting_developers"
  ],
  "kwds": "pymatting matting pytest workflows pip3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pymatting",
  "homepage": "https://pymatting.github.io",
  "release_count": 16,
  "dependency_ids": [
    "pypi_numba",
    "pypi_numpy",
    "pypi_pillow",
    "pypi_scipy"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "===============================\ninfoblox client\n===============================\n\n.. image:: https://travis-ci.org/infobloxopen/infoblox-client.svg?branch=master\n        :target: https://travis-ci.org/infobloxopen/infoblox-client\n\n.. image:: https://img.shields.io/pypi/v/infoblox-client.svg\n        :target: https://pypi.python.org/pypi/infoblox-client\n\n.. image:: https://codecov.io/github/infobloxopen/infoblox-client/coverage.svg?branch=master\n        :target: https://codecov.io/github/infobloxopen/infoblox-client?branch=master\n\n.. image:: https://readthedocs.org/projects/infoblox-client/badge/?version=latest\n        :target: http://infoblox-client.readthedocs.org/en/latest/?badge=latest\n\nclient for interacting with infoblox nios over wapi.\n\n* free software: apache license\n* documentation: https://infoblox-client.readthedocs.org.\n\ninstallation\n------------\n\ninstall infoblox-client using pip:\n\n::\n\n  pip install infoblox-client\n\nusage\n-----\n\nconfigure logger prior to loading infoblox_client to get all debug messages in console:\n\n.. code:: python\n\n  import logging\n  logging.basicconfig(level=logging.debug)\n\nlow level api, using connector module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nretrieve list of network views from nios:\n\n.. code:: python\n\n  from infoblox_client import connector\n\n  opts = {'host': '192.168.1.10', 'username': 'admin', 'password': 'admin'}\n  conn = connector.connector(opts)\n  # get all network_views\n  network_views = conn.get_object('networkview')\n  # search network by cidr in specific network view\n  network = conn.get_object('network', {'network': '100.0.0.0/8', 'network_view': 'default'})\n\n\nfor these request data is returned as list of dicts:\n\n.. code:: python\n\n  network_views:\n  [{u'_ref': u'networkview/zg5zlm5ldhdvcmtfdmlldyqw:default/true',\n    u'is_default': true,\n    u'name': u'default'}]\n\n  network:\n  [{u'_ref': u'network/zg5zlm5ldhdvcmskmtawljaumc4wlzgvma:100.0.0.0/8/default',\n    u'network': u'100.0.0.0/8',\n    u'network_view': u'default'}]\n\nhigh level api, using objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexample of creating network view, network, dns view, dnszone and hostrecord using nios objects:\n\n.. code:: python\n\n  from infoblox_client import connector\n  from infoblox_client import objects\n\n  opts = {'host': '192.168.1.10', 'username': 'admin', 'password': 'admin'}\n  conn = connector.connector(opts)\n\ncreate a network view, and network:\n\n.. code:: python\n\n  nview = objects.networkview.create(conn, name='my_view')\n  network = objects.network.create(conn, network_view='my_view', cidr='192.168.1.0/24')\n\ncreate a dns view and zone:\n\n.. code:: python\n\n  view = objects.dnsview.create(conn, network_view='my_view', name='my_dns_view')\n  zone = objects.dnszone.create(conn, view='my_dns_view', fqdn='my_zone.com')\n\ncreate a host record:\n\n.. code:: python\n\n  my_ip = objects.ip.create(ip='192.168.1.25', mac='aa:bb:cc:11:22:33')\n  hr = objects.hostrecord.create(conn, view='my_dns_view',\n                                 name='my_host_record.my_zone.com', ip=my_ip)\n\ncreate host record with extensible attributes (ea):\n\n.. code:: python\n\n  ea = objects.ea({'tenant id': tenantid, 'cmp type': cmptype,\n                   'cloud api owned': true})\n  host = objects.hostrecord.create(conn, name='new_host', ip=my_ip, extattrs=ea)\n\ncreate a host record with inherited extensible attributes (ea):\n\n.. code:: python\n\n  my_ip = objects.ip.create(ip='192.168.1.25', mac='aa:bb:cc:11:22:33', use_for_ea_inheritance=true)\n  hr = objects.hostrecord.create(conn, view='my_dns_view',\n                                 name='my_host_record.my_zone.com', ip=my_ip)\n\nset the ttl to 30 minutes:\n\n.. code:: python\n\n  hr = objects.hostrecord.create(conn, view='my_dns_view',\n                                 name='my_host_record.my_zone.com', ip=my_ip,\n                                 ttl = 1800)\n\ncreate a new host record, from the next available ip in a cidr, with a mac address, and dhcp enabled:\n\n.. code:: python\n\n    next = objects.ipallocation.next_available_ip_from_cidr('default', '10.0.0.0/24')\n    my_ip = objects.ip.create(ip=next, mac='aa:bb:cc:11:22:33', configure_for_dhcp=true)\n    host = objects.hostrecord.create(conn, name='some.valid.fqdn', view='internal', ip=my_ip)\n\nreply from nios is parsed back into objects and contains next data:\n\n.. code:: python\n\n  in [22]: hr\n  out[22]: hostrecordv4: _ref=record:host/zg5zlmhvc3qkljquy29tlm15x3pvbmuubxlfag9zdf9yzwnvcmq:my_host_record.my_zone.com/my_dns_view, name=my_host_record.my_zone.com, ipv4addrs=[<infoblox_client.objects.ipv4 object at 0x7f7d6b0fe9d0>], view=my_dns_view\n\n\ncreate a new fixed address, with a ms server dhcp reservation:\n\n.. code:: python\n\n  obj, created = objects.fixedaddress.create_check_exists(connector=conn,\n                                                          ip='192.168.100.100',\n                                                          mac='aa:bb:cc:11:22:33',\n                                                          comment='my dhcp reservation',\n                                                          name='my hostname',\n                                                          network_view='default',\n                                                          ms_server={'_struct': 'msdhcpserver',\n                                                                     'ipv4addr': '192.168.0.0'})\n\n\n\nhigh level api, using infobloxobjectmanager\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncreate a new fixed address, selecting it from the next available ip in a cidr:\n\n.. code:: python\n\n  from infoblox_client.object_manager import infobloxobjectmanager\n\n  new_address = infobloxobjectmanager(conn).create_fixed_address_from_cidr(netview='default', mac='aa:bb:cc:11:22:33', cidr='10.0.0.0/24', extattrs=[])\n\nwhat you get back is a ``fixedaddressv4`` object.\n\nobjects interface\n-----------------\n\nall top level objects support interface for crud operations. list of supported objects is defined in next section.\n\n- ``create(cls, connector, check_if_exists=true, update_if_exists=false, **kwargs)``\n    creates object on nios side.\n    requires connector passed as the first argument, ``check_if_exists`` and ``update_if_exists`` are optional.\n    object related fields are passed in as kwargs: ``field=value``, ``field2=value2``.\n\n- ``search(cls, connector, return_fields=none, search_extattrs=none, force_proxy=false, **kwargs)``\n    search single object on nios side, returns first object that match search criteria.\n    requires connector passed as the first argument.\n    ``return_fields`` can be set to retrieve particular fields from nios,\n    for example ``return_fields=['view', 'name']``.\n    if ``return_fields`` is ``[]`` default ``return_fields`` are returned by nios side for current ``wapi_version``.\n    ``search_extattrs`` is used to filter out results by extensible attributes.\n    ``force_proxy`` forces search request to be processed on grid master (applies only in cloud environment)\n\n- ``search_all(cls, connector, return_fields=none, search_extattrs=none, force_proxy=false, **kwargs)``\n    search all objects on nios side that match search criteria. returns a list of objects.\n    all other options are equal to ``search()``.\n\n- ``update(self)``\n    update the object on nios side by pushing changes done in the local object.\n\n- ``delete(self)``\n    deletes the object from nios side.\n\nsupported nios objects\n----------------------\nall nios objects are supported in the 0.6.0 verison release. check infoblox_client/objects.py for description of the objects.\nnewly supported objects\n\n* ``aaaadtcrecord``\n* ``aaaarecord``\n* ``aaaasharedrecord``\n* ``adtcrecord``\n* ``adtcrecordbase``\n* ``arecord``\n* ``arecordbase``\n* ``asharedrecord``\n* ``asharedrecordbase``\n* ``adauthserver``\n* ``adauthservice``\n* ``addressac``\n* ``admingroup``\n* ``adminrole``\n* ``adminuser``\n* ``aliasrecord``\n* ``allendpoints``\n* ``allnsgroup``\n* ``allrecords``\n* ``allrpzrecords``\n* ``anymember``\n* ``approvalworkflow``\n* ``authpolicy``\n* ``awsrte53task``\n* ``awsrte53taskgroup``\n* ``awsuser``\n* ``baseobject``\n* ``bfdtemplate``\n* ``bgpas``\n* ``bulkhost``\n* ``bulkhostnametemplate``\n* ``cnamedtcrecord``\n* ``cnamerecord``\n* ``cnamesharedrecord``\n* ``caarecord``\n* ``cacertificate``\n* ``capacityreport``\n* ``capacityreportobjectcount``\n* ``captiveportal``\n* ``captiveportalfile``\n* ``certificateauthservice``\n* ``changedobject``\n* ``ciscoiseendpoint``\n* ``clientsubnetdomain``\n* ``csvimporttask``\n* ``dhcplease``\n* ``dhcproaminghost``\n* ``dnsview``\n* ``dnszone``\n* ``dnszonedelegated``\n* ``dnszoneforward``\n* ``dbobjects``\n* ``dbsnapshot``\n* ``ddnsprincipalcluster``\n* ``ddnsprincipalclustergroup``\n* ``deletedobjects``\n* ``dhcidrecord``\n* ``dhcpoptiondefinition``\n* ``dhcpoptiondefinitionv4``\n* ``dhcpoptiondefinitionv6``\n* ``dhcpoptionspace``\n* ``dhcpoptionspacev4``\n* ``dhcpoptionspacev6``\n* ``dhcpstatistics``\n* ``dhcpddns``\n* ``dhcpfailover``\n* ``dhcpmember``\n* ``dhcpoption``\n* ``discovery``\n* ``discoveryautoconversionsetting``\n* ``discoveryciscoapicconfiguration``\n* ``discoveryclicredential``\n* ``discoverydevice``\n* ``discoverydevicecomponent``\n* ``discoverydeviceinterface``\n* ``discoverydeviceneighbor``\n* ``discoverydevicesupportbundle``\n* ``discoverydiagnostictask``\n* ``discoverygridproperties``\n* ``discoveryifaddrinfo``\n* ``discoverymemberproperties``\n* ``discoverynetworkinfo``\n* ``discoveryport``\n* ``discoveryscaninterface``\n* ``discoveryseedrouter``\n* ``discoverysnmp3credential``\n* ``discoverysnmpcredential``\n* ``discoverystatus``\n* ``discoveryvlaninfo``\n* ``discoveryvrf``\n* ``discoveryvrfmappingrule``\n* ``discoverytask``\n* ``discoverytaskport``\n* ``discoverytaskvserver``\n* ``distributionschedule``\n* ``dnamerecord``\n* ``dns64group``\n* ``dnskeyrecord``\n* ``dnsseckey``\n* ``dnssectrustedkey``\n* ``dsrecord``\n* ``dtc``\n* ``dtcallrecords``\n* ``dtccertificate``\n* ``dtclbdn``\n* ``dtcmonitor``\n* ``dtcmonitorhttp``\n* ``dtcmonitoricmp``\n* ``dtcmonitorpdp``\n* ``dtcmonitorsip``\n* ``dtcmonitorsnmp``\n* ``dtcmonitorsnmpoid``\n* ``dtcmonitortcp``\n* ``dtcobject``\n* ``dtcpool``\n* ``dtcpoolconsolidatedmonitorhealth``\n* ``dtcpoollink``\n* ``dtcserver``\n* ``dtcserverlink``\n* ``dtcservermonitor``\n* ``dtctopology``\n* ``dtctopologylabel``\n* ``dtctopologyrule``\n* ``dtctopologyrulesource``\n* ``dtclbdnrecord``\n* ``dxlendpoint``\n* ``dxlendpointbroker``\n* ``ea``\n* ``eadefinition``\n* ``exclusionrange``\n* ``exclusionrangetemplate``\n* ``extensibleattributedeflistvalues``\n* ``extserver``\n* ``extsyslogbackupserver``\n* ``fileop``\n* ``filterfingerprint``\n* ``filtermac``\n* ``filternac``\n* ``filteroption``\n* ``filterrelayagent``\n* ``filterrule``\n* ``fingerprint``\n* ``fixedaddress``\n* ``fixedaddresstemplate``\n* ``fixedaddresstemplatev4``\n* ``fixedaddresstemplatev6``\n* ``fixedaddressv4``\n* ``fixedaddressv6``\n* ``forwardingmemberserver``\n* ``ftpuser``\n* ``grid``\n* ``gridcloudapi``\n* ``gridcloudapicloudstatistics``\n* ``gridcloudapiuser``\n* ``gridcloudapivm``\n* ``gridcloudapivmaddress``\n* ``griddashboard``\n* ``griddhcpproperties``\n* ``griddns``\n* ``griddnsfixedrrsetorderfqdn``\n* ``gridfiledistribution``\n* ``gridlicensepool``\n* ``gridlicensepoolcontainer``\n* ``gridlicensesubpool``\n* ``gridmaxminddbinfo``\n* ``gridmembercloudapi``\n* ``gridservicerestartgroup``\n* ``gridservicerestartgrouporder``\n* ``gridservicerestartrequest``\n* ``gridservicerestartrequestchangedobject``\n* ``gridservicerestartstatus``\n* ``gridthreatanalytics``\n* ``gridthreatprotection``\n* ``gridx509certificate``\n* ``gridmembersoamname``\n* ``gridmembersoaserial``\n* ``hostrecord``\n* ``hostrecordv4``\n* ``hostrecordv6``\n* ``hostnamerewritepolicy``\n* ``hotfix``\n* ``hsmallgroups``\n* ``hsmsafenet``\n* ``hsmsafenetgroup``\n* ``hsmthales``\n* ``hsmthalesgroup``\n* ``ip``\n* ``ipaddress``\n* ``ipallocation``\n* ``iprange``\n* ``iprangev4``\n* ``iprangev6``\n* ``ipv4``\n* ``ipv4address``\n* ``ipv4hostaddress``\n* ``ipv6``\n* ``ipv6address``\n* ``ipv6hostaddress``\n* ``infobloxobject``\n* ``interface``\n* ``ipamstatistics``\n* ``ipv6networksetting``\n* ``kerberoskey``\n* ``ldapauthservice``\n* ``ldapeamapping``\n* ``ldapserver``\n* ``licensegridwide``\n* ``localuserauthservice``\n* ``logicfilterrule``\n* ``lomnetworkconfig``\n* ``lomuser``\n* ``mxrecord``\n* ``mxsharedrecord``\n* ``macfilteraddress``\n* ``mastergrid``\n* ``member``\n* ``memberdhcpproperties``\n* ``memberdns``\n* ``memberdnsgluerecordaddr``\n* ``memberdnsip``\n* ``memberfiledistribution``\n* ``memberlicense``\n* ``memberparentalcontrol``\n* ``memberthreatanalytics``\n* ``memberthreatprotection``\n* ``memberserver``\n* ``memberservicecommunication``\n* ``memberservicestatus``\n* ``msdhcpoption``\n* ``msdhcpserver``\n* ``msdnsserver``\n* ``msserver``\n* ``msserveradsitesdomain``\n* ``msserveradsitessite``\n* ``msserverdcnsrecordcreation``\n* ``msserverdhcp``\n* ``msserverdns``\n* ``mssuperscope``\n* ``namedacl``\n* ``naptrdtcrecord``\n* ``naptrrecord``\n* ``natgroup``\n* ``network``\n* ``networkcontainer``\n* ``networkcontainerv4``\n* ``networkcontainerv6``\n* ``networkdiscovery``\n* ``networktemplate``\n* ``networktemplatev4``\n* ``networktemplatev6``\n* ``networkv4``\n* ``networkv6``\n* ``networkview``\n* ``networkuser``\n* ``networkviewassocmember``\n* ``nodeinfo``\n* ``notificationrestendpoint``\n* ``notificationresttemplate``\n* ``notificationresttemplateparameter``\n* ``notificationrule``\n* ``notificationruleexpressionop``\n* ``nsrecord``\n* ``nsec3paramrecord``\n* ``nsec3record``\n* ``nsecrecord``\n* ``nsgroup``\n* ``nsgroupdelegation``\n* ``nsgroupforwardingmember``\n* ``nsgroupforwardstubserver``\n* ``nsgroupstubmember``\n* ``nxdomainrule``\n* ``ocspresponder``\n* ``option60matchrule``\n* ``orderedranges``\n* ``orderedresponsepolicyzones``\n* ``ospf``\n* ``outboundcloudclient``\n* ``outboundcloudclientevent``\n* ``parentalcontrolabs``\n* ``parentalcontrolavp``\n* ``parentalcontrolblockingpolicy``\n* ``parentalcontrolipspacediscriminator``\n* ``parentalcontrolmsp``\n* ``parentalcontrolnasgateway``\n* ``parentalcontrolsitemember``\n* ``parentalcontrolspm``\n* ``parentalcontrolsubscriber``\n* ``parentalcontrolsubscribersite``\n* ``permission``\n* ``ptrrecord``\n* ``ptrrecordv4``\n* ``ptrrecordv6``\n* ``radiusauthservice``\n* ``radiusserver``\n* ``rangetemplate``\n* ``rangetemplatev4``\n* ``rangetemplatev6``\n* ``rdatasubfield``\n* ``recordnamepolicy``\n* ``remoteddnszone``\n* ``restartservicestatus``\n* ``rir``\n* ``rirorganization``\n* ``rpzaipaddressrecord``\n* ``rpzarecord``\n* ``rpzaaaaipaddressrecord``\n* ``rpzaaaarecord``\n* ``rpzcnameclientipaddressrecord``\n* ``rpzcnameclientipaddressdnrecord``\n* ``rpzcnameipaddressrecord``\n* ``rpzcnameipaddressdnrecord``\n* ``rpzcnamerecord``\n* ``rpzmxrecord``\n* ``rpznaptrrecord``\n* ``rpzptrrecord``\n* ``rpzptrrecordv4``\n* ``rpzptrrecordv6``\n* ``rpzsrvrecord``\n* ``rpztxtrecord``\n* ``rrsigrecord``\n* ``ruleset``\n* ``srvdtcrecord``\n* ``srvrecord``\n* ``srvsharedrecord``\n* ``samlauthservice``\n* ``scavengingtask``\n* ``scheduledtask``\n* ``search``\n* ``settingnetwork``\n* ``settingviewaddress``\n* ``sharednetwork``\n* ``sharednetworkv4``\n* ``sharednetworkv6``\n* ``sharedrecordgroup``\n* ``smartfolderchildren``\n* ``smartfolderglobal``\n* ``smartfoldergroupby``\n* ``smartfolderpersonal``\n* ``smartfolderqueryitem``\n* ``snmpuser``\n* ``sortlist``\n* ``subobjects``\n* ``superhost``\n* ``superhostchild``\n* ``syslogendpoint``\n* ``syslogendpointservers``\n* ``syslogserver``\n* ``txtrecord``\n* ``txtsharedrecord``\n* ``tacacsplusauthservice``\n* ``tacacsplusserver``\n* ``taxii``\n* ``taxiirpzconfig``\n* ``tenant``\n* ``tftpfiledir``\n* ``threatanalyticsmoduleset``\n* ``threatanalyticswhitelist``\n* ``threatinsightcloudclient``\n* ``threatprotectiongridrule``\n* ``threatprotectionnatrule``\n* ``threatprotectionprofile``\n* ``threatprotectionprofilerule``\n* ``threatprotectionrule``\n* ``threatprotectionrulecategory``\n* ``threatprotectionruleset``\n* ``threatprotectionruletemplate``\n* ``threatprotectionstatinfo``\n* ``threatprotectionstatistics``\n* ``thresholdtrap``\n* ``tlsarecord``\n* ``trapnotification``\n* ``unknownrecord``\n* ``updatesdownloadmemberconfig``\n* ``upgradegroup``\n* ``upgradegroupmember``\n* ``upgradegroupschedule``\n* ``upgradeschedule``\n* ``upgradestatus``\n* ``upgradestep``\n* ``userprofile``\n* ``vdiscoverytask``\n* ``vlan``\n* ``vlanlink``\n* ``vlanrange``\n* ``vlanview``\n* ``vtftpdirmember``\n* ``zoneauthdiscrepancy``\n* ``zonerp``\n* ``zonestub``\n* ``zoneassociation``\n* ``zonenameserver``\n\nuntil 0.4.25 this project supported\n\n* ``networkview`` for 'networkview'\n* ``dnsview`` for 'view'\n* ``dnszone`` for 'zone_auth'\n* ``member`` for 'member'\n* ``network`` (v4 and v6)\n\n  * ``networkv4`` for 'network'\n  * ``networkv6`` for 'ipv6network'\n\n* ``iprange`` (v4 and v6)\n\n  * ``iprangev4`` for 'range'\n  * ``iprangev6`` for 'ipv6range'\n\n* ``hostrecord`` (v4 and v6)\n\n  * ``hostrecordv4`` for 'record:host'\n  * ``hostrecordv6`` for 'record:host'\n\n* ``fixedaddress`` (v4 and v6)\n\n  * ``fixedaddressv4`` for 'fixedaddress'\n  * ``fixedaddressv6`` for 'ipv6fixedaddress'\n\n* ``ipaddress`` (v4 and v6)\n\n  * ``ipv4address`` for 'ipv4address'\n  * ``ipv6address`` for 'ipv6address'\n\n* ``arecordbase``\n\n  * ``arecord`` for 'record:a'\n  * ``aaaarecord`` for 'record:aaaa'\n\n* ``ptrrecord`` (v4 and v6)\n\n  * ``ptrrecordv4`` for 'record:ptr'\n  * ``ptrrecordv6`` for 'record:ptr'\n\n* ``eadefinition`` for 'extensibleattributedef'\n* ``cnamerecord`` for 'record:cname'\n* ``mxrecord`` for 'record:mx'\n\n\nsearch by regular expression\n----------------------------\n\nsearch for partial match is supported only by low-level api for now.\nuse '~' with field name to search by regular expressions. not all\nfields support search by regular expression. refer to wapidoc to find\nout complete list of fields that can be searched this way. examples:\n\nfind all networks that starts with '10.10.':\n\n.. code:: python\n\n  conn = connector.connector(opts)\n  nw = conn.get_object('network', {'network~': '10.10.'})\n\n\nfind all host records that starts with '10.10.':\n\n.. code:: python\n\n  conn = connector.connector(opts)\n  hr = conn.get_object('record:host', {'ipv4addr~': '10.10.'})\n\n\nmore examples\n-------------\n\nutilizing extensible attributes and searching on them can easily be done with the ``get_object`` function.\nthe ``default`` field in ``return_fields`` acts like the ``+`` does in wapi.\n\n > ``_return_fields+`` specified list of fields (comma separated) will be returned in addition\n to the basic fields of the object (documented for each object).\n\nthis enables you to always get the default values in return, in addition to what you specify whether\nyou search for a ``network`` or a ``networkcontainer``,\ndefined as ``place_to_check`` in the code below.\n\n\n.. code:: python\n\n    from infoblox_client.connector import connector\n\n\n    def default_infoblox_connection():\n        opts = {'host': '192.168.1.10', 'username': 'admin', 'password': 'admin'}\n        conn = connector(opts)\n        return conn\n\n    def search_extensible_attribute(connection, place_to_check: str, extensible_attribute: str, value: str):\n        \"\"\"\n        find extensible attributes.\n        :param connection: infoblox connection\n        :param place_to_check: can be `network`, `networkcontainer` or `record:host` and so on.\n        :param extensible_attribute: which extensible attribute to search for. can be `customercode`, `location`\n        and so on.\n        :param value: the value you want to search for.\n        :return: result\n        \"\"\"\n        extensible_args = [\n            place_to_check,\n            {\n                f\"*{extensible_attribute}:~\": value,\n            }\n        ]\n        kwargs = {\n            'return_fields': [\n                'default',\n                'extattrs',\n            ]\n        }\n        result = {\"type\": f\"{place_to_check}\", \"objects\": connection.get_object(*extensible_args, **kwargs)}\n        return result\n\n    connection = default_infoblox_connection()\n\n    search_network = search_extensible_attribute(connection, \"network\", \"customercode\", \"infoblox\")\n    # print the output:\n    print(search_network)\n    {\n      \"type\": \"network\",\n      \"objects\": [\n        {\n          \"_ref\": \"network/zg5zlmhvc3qkljquy29tlm15x3pvbmuubxlfag9zdf9yzwnvcmq:192.168.1.1/28/default\",\n          \"comment\": \"infoblox network\",\n          \"extattrs\": {\n            \"customercode\": {\n              \"value\": \"infoblox\"\n            }\n          },\n          \"network\": \"192.168.1.0/28\",\n          \"network_view\": \"default\"\n        }\n      ]\n    }\n\n    search_host = search_extensible_attribute(connection, \"record:host\", \"customercode\", \"infoblox\")\n    # print the output:\n    print(search_host)\n    {\n      \"type\": \"record:host\",\n      \"objects\": [\n        {\n          \"_ref\": \"record:host/zg5zlm5ldhdvcmtfdmlldyqw:infobloxhost\",\n          \"extattrs\": {\n            \"customercode\": {\n              \"value\": \"infoblox\"\n            }\n          },\n          \"ipv4addrs\": [\n            {\n              \"_ref\": \"record:host_ipv4addr/zg5zlm5ldhdvcmtfdmlldyqwdvcmtfdmlldyqw:192.168.1.1/infobloxhost\",\n              \"configure_for_dhcp\": false,\n              \"host\": \"infobloxhost\",\n              \"ipv4addr\": \"192.168.1.1\"\n            }\n          ],\n          \"name\": \"infobloxhost\",\n          \"view\": \" \"\n        }\n      ]\n    }\n\nfeatures\n--------\n\n* todo\n\n\n\n\nhistory\n-------\n\n0.6.0 (2022-11-18)\n__________________\n* added support for python version 3.9 #352;\n* removed support for python version below 3.0 #352;\n\n0.5.2 (2022-10-12)\n__________________\n* added certificate based authentication logic #330;\n* fixed use of ea inheritance in ip objects #318;\n* fixed missing fields ('ipv4addr', 'ipv6addr') for 'class member()' #345;\n\n0.5.1 (2022-03-14)\n__________________\n* updated connector's urlencoding logic for proper array encoding #287;\n* updated infobloxobject's fetch method to raise `infobloxfetchgotmultipleobjects` exception #288;\n* fix a bug when calling abstracted class from_dict with v4 & v6 subclass #282;\n* fix a bug when updating dnszone object exception was raised and field not allowed to update #331;\n* fix a bug when arecord and aaaarecord object skips updating the updatable fields #334, #328;\n* raised an exception while searching with non searchable fields #339;\n* fix errors generated for the client using sphinx with make docs #343;\n\n**0.5.0 (2020-05-14)**\n______________________\n* majorly updated objects with around 380+ nios object calls supported now.(find the infoblox_client/objects.py file to list the supported objects and its descriptions)\n* bug fixes\n* python-six dependency set to >=1.11.0\n\n0.4.25 (2020-03-12)\n___________________\n* bug fixes\n\n0.4.24 (2020-02-25)\n___________________\n* added some extra fields(ms_server) for fixed address\n* supporting mx record\n* bug fixes - ptr records now return an ip\n\n0.4.23 (2019-09-10)\n___________________\n\n* added some extra fields for network class\n* fixed update option for a record\n* adding fields for fixed address\n\n0.4.22 (2019-02-21)\n___________________\n\n* supported returning default fileds plus user required fields reflecting wapi\n* supporting 'aliases' parameter of host record for dns\n\n0.4.21 (2019-01-18)\n___________________\n\n* supporting wapi version 2.10 or above\n\n0.4.20 (2018-03-27)\n___________________\n\n* updated default wapi version from 1.4 to 2.1\n\n0.4.19 (2018-02-06)\n___________________\n\n* changed logging of failure on object search from error to warning\n\n0.4.18 (2017-11-20)\n___________________\n\n* fix bug related to temporary unavailable status code\n\n0.4.17 (2017-11-09)\n___________________\n\n* added pagination support for wapi calls\n\n0.4.15 (2017-07-18)\n___________________\n\n* changed logic of generate duid using only mac address\n\n0.4.14 (2017-05-18)\n___________________\n\n* add function to check object is created or reused\n\n0.4.13 (2017-03-01)\n___________________\n* add ttl field to hostrecordv*\n* add cname record support\n* specify return fields for an srv record\n\n0.4.12 (2016-12-08)\n___________________\n* allow search all fields\n* remove ptrdname from ptr record search attributes\n\n0.4.11 (2016-10-31)\n___________________\n* add search hostrecords by mac\n\n0.4.10 (2016-10-24)\n___________________\n* updated history and author\n\n0.4.9 (2016-10-24)\n__________________\n* add function to get fixed addresses by mac\n\n0.4.8 (2016-10-10)\n__________________\n* add ptrdname search option to ptrrecord objects\n\n0.4.7 (2016-07-14)\n__________________\n* add zones extensible attribute update support\n\n0.4.6 (2016-07-01)\n__________________\n* add network_view support for host records\n\n0.4.5 (2016-06-13)\n__________________\n* allow raising exception in create_ea_definition\n* add pep8 check to tox\n* add pep8 check to travis ci\n* add examples of searching by regular expression\n\n0.4.4 (2016-05-11)\n__________________\n* pass only_ref option to update_from_dict\n* do not fail on processing unknown fields\n* fetch only object reference for service restart\n* update readme with example of using ea\n\n0.4.3 (2016-03-28)\n__________________\n* add default fields for member\n* update docstring for create_network\n* add  fields to fixedaddressv4 and ipaddress\n\n0.4.2 (2016-03-04)\n__________________\n* add max_retries option to connector\n* log failure on get with error log level\n\n0.4.1 (2016-02-26)\n__________________\n* add 'max_results' as connector option\n\n**0.4.0 (2016-02-19)**\n______________________\n* add max_results option to connector and objects\n* add tenant object\n* update readme.rst with more examples\n\n\n0.3.9 (2016-02-18)\n__________________\n* add 'configure_for_dns' field for hostrecord\n\n0.3.8 (2016-02-17)\n__________________\n* add 'extattrs' to dnszone/dnsview return_fields\n\n0.3.7 (2016-02-12)\n__________________\n* add return_fields to networkview\n\n0.3.6 (2016-01-28)\n__________________\n* add support for list and tuple values to ea object\n* remove _value_to_bool\n\n0.3.5 (2016-01-22)\n__________________\n* no changes\n\n0.3.4 (2016-01-21)\n__________________\n* do not override verify flag on request level\n\n0.3.3 (2016-01-20)\n__________________\n* create_required_ea_definitions return created list\n* add 'start_addr', 'end_addr' to ip detection list\n* add request type to connector logger\n* flake8 fixes\n\n0.3.2 (2016-01-19)\n__________________\n* convert strings into booleans for ssl_verify\n* update authors.rst, add contributors\n* remove unused methods from utils.py\n\n0.3.1 (2016-01-14)\n__________________\n* add 'zone' to search fields of host record\n\n\n**0.3.0 (2016-01-14)**\n______________________\n* update development status from pre-alpha to alpha\n* feature/tox testing (huge changes in testing env)\n* add 'network' to search fields of fixedaddress\n* allow domain-name-servers for ipv6\n* update existent ea for network instead of replace\n\n\n0.2.3 (2016-01-06)\n__________________\n* return none if search failed instead of exception\n* add ip_version as a public property for objects\n\n0.2.2 (2015-12-23)\n__________________\n* fix updating object from create method\n* rework delete_all_associated_objects logic\n* fix error handling in create_object\n* do not catch exception on create_dns_zone level\n* update feature version for member_ipv6_setting\n\n0.2.1 (2015-12-18)\n__________________\n* add infobloxmemberalreadyassigned exception\n* update dns record if already exists\n* add 'log_api_calls_as_info' option for connector\n* check for empty values in ea\n\n**0.2.0 (2015-12-17)**\n______________________\n* deprecate network_exists method in object_manager\n* add _global_field_processing for objects\n* add parsing 'extattrs' into ea objects for all infobloxobject childs\n* add docs badge to readme.rst\n* reworked get_network in object_manager\n* move _eq_ to baseobject\n* check if fixed address is found before delete\n\n\n0.1.4 (2015-12-08)\n__________________\n* field updates for member object\n* log all api calls in connector on debug level\n\n0.1.3 (2015-12-04)\n__________________\n* add 'network' field to ip versioned fields\n* skip adding dhcp options for ipv6 network\n* do not search iprange before creating\n\n0.1.2 (2015-12-02)\n__________________\n* do not fail if object is not found on delete\n* raise exception with details if reply is not json\n* add 'silent_ssl_warnings' option to connector\n\n0.1.1 (2015-12-01)\n__________________\n* fix unbind_name_from_record_a\n\n0.1.0 (2015-12-01)\n__________________\n* add new field type '_updateable_search_field' to objects and fix hostrecord search\n* fix 'make docs'\n* update readme.rst (fixed formatting)\n\n0.0.11 (2015-11-25)\n___________________\n* fix adding second ip to hostrecord\n* fix failing in pdb\n* convert ea values into boolean if possible\n* added 'ips' allias for ip field in hostrecord\n\n0.0.10 (2015-11-19)\n___________________\n* add utility to determine supported feature\n* update readme.rst with objects interface\n\n0.0.9 (2015-11-13)\n__________________\n* add allowed_object_types field for ea definition\n* allow to return default fields for object\n* update readme.rst with list of supported objects\n\n0.0.8 (2015-11-12)\n___________________\n* add extensible attributes definition support\n* fixed options processing for create_network in object_manager\n* fixed missed dnszone object in create_dns_zone\n\n0.0.7 (2015-10-27)\n____________________\n* added 'network' to iprange search fields\n* modified `get` method of the ea class to allow return default values\n\n0.0.6 (2015-10-26)\n____________________\n* added initial support of extensible attributes as sub objects\n* added search by extensible attributes\n* improved validation in connector\n* added delete_object_by_ref to object manager\n\n0.0.5 (2015-10-12)\n____________________\n* fixed issues in working with objects\n* added missed _get_object_type_from_ref\n* added code coverage\n* updated links to point to infobloxopen repository\n\n0.0.4 (2015-09-23)\n____________________\n* added object abstraction for interacting with nios objects\n* added object_manager to simplify some operations on objects\n\n0.0.3 (2015-09-15)\n____________________\n* added dependencies to package.\n\n\n0.0.2 (2015-09-11)\n____________________\n* fixed using dashes in package directory names that prevented package import after install.\n\n\n**0.0.1 (2015-09-11)**\n______________________\n* added connector to send wapi requests to nios, does not includes nios object model at this point.\n* first release on pypi.\n\n\n",
  "docs_url": null,
  "keywords": "infoblox-client",
  "license": "apache",
  "name": "infoblox-client",
  "package_url": "https://pypi.org/project/infoblox-client/",
  "project_url": "https://pypi.org/project/infoblox-client/",
  "project_urls": {
    "Homepage": "https://github.com/infobloxopen/infoblox-client"
  },
  "release_url": "https://pypi.org/project/infoblox-client/0.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "client for interacting with infoblox nios over wapi",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "jbelamaric@infoblox.com",
    "john_belamaric"
  ],
  "kwds": "infoblox infoblox_client infobloxopen infobloxhost travis",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_infoblox_client",
  "homepage": "https://github.com/infobloxopen/infoblox-client",
  "release_count": 60,
  "dependency_ids": []
}
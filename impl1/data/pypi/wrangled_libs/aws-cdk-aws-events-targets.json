{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# event targets for amazon eventbridge\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis library contains integration classes to send amazon eventbridge to any\nnumber of supported aws services. instances of these classes should be passed\nto the `rule.addtarget()` method.\n\ncurrently supported are:\n\n* [start a codebuild build](#start-a-codebuild-build)\n* [start a codepipeline pipeline](#start-a-codepipeline-pipeline)\n* run an ecs task\n* [invoke a lambda function](#invoke-a-lambda-function)\n* [invoke a api gateway rest api](#invoke-an-api-gateway-rest-api)\n* publish a message to an sns topic\n* send a message to an sqs queue\n* [start a stepfunctions state machine](#start-a-stepfunctions-state-machine)\n* [queue a batch job](#queue-a-batch-job)\n* make an aws api call\n* put a record to a kinesis stream\n* [log an event into a loggroup](#log-an-event-into-a-loggroup)\n* put a record to a kinesis data firehose stream\n* [put an event on an eventbridge bus](#put-an-event-on-an-eventbridge-bus)\n* [send an event to eventbridge api destination](#invoke-an-api-destination)\n\nsee the readme of the `@aws-cdk/aws-events` library for more information on\neventbridge.\n\n## event retry policy and using dead-letter queues\n\nthe codebuild, codepipeline, lambda, stepfunctions, loggroup and sqsqueue targets support attaching a [dead letter queue and setting retry policies](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html). see the [lambda example](#invoke-a-lambda-function).\nuse [escape hatches](https://docs.aws.amazon.com/cdk/latest/guide/cfn_layer.html) for the other target types.\n\n## invoke a lambda function\n\nuse the `lambdafunction` target to invoke a lambda function.\n\nthe code snippet below creates an event rule with a lambda function as a target\ntriggered for every events from `aws.ec2` source. you can optionally attach a\n[dead letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html).\n\n```python\nimport aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.function(self, \"myfunc\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"exports.handler = handler.tostring()\")\n)\n\nrule = events.rule(self, \"rule\",\n    event_pattern=events.eventpattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.queue(self, \"queue\")\n\nrule.add_target(targets.lambdafunction(fn,\n    dead_letter_queue=queue,  # optional: add a dead letter queue\n    max_event_age=cdk.duration.hours(2),  # optional: set the maxeventage retry policy\n    retry_attempts=2\n))\n```\n\n## log an event into a loggroup\n\nuse the `loggroup` target to log your events in a cloudwatch loggroup.\n\nfor example, the following code snippet creates an event rule with a cloudwatch loggroup as a target.\nevery events sent from the `aws.ec2` source will be sent to the cloudwatch loggroup.\n\n```python\nimport aws_cdk.aws_logs as logs\n\n\nlog_group = logs.loggroup(self, \"myloggroup\",\n    log_group_name=\"myloggroup\"\n)\n\nrule = events.rule(self, \"rule\",\n    event_pattern=events.eventpattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nrule.add_target(targets.cloudwatchloggroup(log_group))\n```\n\n## start a codebuild build\n\nuse the `codebuildproject` target to trigger a codebuild project.\n\nthe code snippet below creates a codecommit repository that triggers a codebuild project\non commit to the master branch. you can optionally attach a\n[dead letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html).\n\n```python\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.repository(self, \"myrepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.project(self, \"myproject\",\n    source=codebuild.source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.queue(self, \"deadletterqueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"oncommit\",\n    target=targets.codebuildproject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)\n```\n\n## start a codepipeline pipeline\n\nuse the `codepipeline` target to trigger a codepipeline pipeline.\n\nthe code snippet below creates a codepipeline pipeline that is triggered every hour\n\n```python\nimport aws_cdk.aws_codepipeline as codepipeline\n\n\npipeline = codepipeline.pipeline(self, \"pipeline\")\n\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.expression(\"rate(1 hour)\")\n)\n\nrule.add_target(targets.codepipeline(pipeline))\n```\n\n## start a stepfunctions state machine\n\nuse the `sfnstatemachine` target to trigger a state machine.\n\nthe code snippet below creates a simple statemachine that is triggered every minute with a\ndummy object as input.\nyou can optionally attach a\n[dead letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html)\nto the target.\n\n```python\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.rate(cdk.duration.minutes(1))\n)\n\ndlq = sqs.queue(self, \"deadletterqueue\")\n\nrole = iam.role(self, \"role\",\n    assumed_by=iam.serviceprincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.statemachine(self, \"sm\",\n    definition=sfn.wait(self, \"hello\", time=sfn.waittime.duration(cdk.duration.seconds(10)))\n)\n\nrule.add_target(targets.sfnstatemachine(state_machine,\n    input=events.ruletargetinput.from_object({\"someparam\": \"somevalue\"}),\n    dead_letter_queue=dlq,\n    role=role\n))\n```\n\n## queue a batch job\n\nuse the `batchjob` target to queue a batch job.\n\nthe code snippet below creates a simple jobqueue that is triggered every hour with a\ndummy object as input.\nyou can optionally attach a\n[dead letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html)\nto the target.\n\n```python\nimport aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import containerimage\n\n\njob_queue = batch.jobqueue(self, \"myqueue\",\n    compute_environments=[batch.jobqueuecomputeenvironment(\n        compute_environment=batch.computeenvironment(self, \"computeenvironment\",\n            managed=false\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.jobdefinition(self, \"myjob\",\n    container=batch.jobdefinitioncontainer(\n        image=containerimage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.queue(self, \"queue\")\n\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.rate(cdk.duration.hours(1))\n)\n\nrule.add_target(targets.batchjob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.ruletargetinput.from_object({\"someparam\": \"somevalue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.duration.hours(2)\n))\n```\n\n## invoke an api gateway rest api\n\nuse the `apigateway` target to trigger a rest api.\n\nthe code snippet below creates a api gateway rest api that is invoked every hour.\n\n```python\nimport aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.rate(cdk.duration.minutes(1))\n)\n\nfn = lambda_.function(self, \"myfunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    code=lambda_.code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.lambdarestapi(self, \"myrestapi\", handler=fn)\n\ndlq = sqs.queue(self, \"deadletterqueue\")\n\nrule.add_target(\n    targets.apigateway(rest_api,\n        path=\"/*/test\",\n        method=\"get\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"queryparam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))\n```\n\n## invoke an api destination\n\nuse the `targets.apidestination` target to trigger an external api. you need to\ncreate an `events.connection` and `events.apidestination` as well.\n\nthe code snippet below creates an external destination that is invoked every hour.\n\n```python\nconnection = events.connection(self, \"connection\",\n    authorization=events.authorization.api_key(\"x-api-key\", secretvalue.secrets_manager(\"apisecretname\")),\n    description=\"connection with api key x-api-key\"\n)\n\ndestination = events.apidestination(self, \"destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"calling example.com with api key x-api-key\"\n)\n\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.rate(cdk.duration.minutes(1)),\n    targets=[targets.apidestination(destination)]\n)\n```\n\n## put an event on an eventbridge bus\n\nuse the `eventbus` target to route event to a different eventbus.\n\nthe code snippet below creates the scheduled event rule that route events to an imported event bus.\n\n```python\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.expression(\"rate(1 minute)\")\n)\n\nrule.add_target(targets.eventbus(\n    events.eventbus.from_event_bus_arn(self, \"external\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")))\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-events-targets",
  "package_url": "https://pypi.org/project/aws-cdk.aws-events-targets/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-events-targets/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-events-targets/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-apigateway (==1.204.0)",
    "aws-cdk.aws-autoscaling (==1.204.0)",
    "aws-cdk.aws-codebuild (==1.204.0)",
    "aws-cdk.aws-codepipeline (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecs (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kinesis (==1.204.0)",
    "aws-cdk.aws-kinesisfirehose (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-sns-subscriptions (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.aws-stepfunctions (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "event targets for amazon eventbridge",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_codebuild aws_apigateway aws_codepipeline aws_ecs",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_events_targets",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 256,
  "dependency_ids": [
    "pypi_aws_cdk.aws_apigateway",
    "pypi_aws_cdk.aws_autoscaling",
    "pypi_aws_cdk.aws_codebuild",
    "pypi_aws_cdk.aws_codepipeline",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecs",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kinesis",
    "pypi_aws_cdk.aws_kinesisfirehose",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sns_subscriptions",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.aws_stepfunctions",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
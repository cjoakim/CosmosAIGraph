{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pebble\n======\n\npebble provides a neat api to manage threads and processes within an application.\n\n:source: https://github.com/noxdafox/pebble\n:documentation: https://pebble.readthedocs.io\n:download: https://pypi.org/project/pebble/\n\n|build badge| |docs badge| |downloads badge|\n\n.. |build badge| image:: https://github.com/noxdafox/pebble/actions/workflows/action.yml/badge.svg\n   :target: https://github.com/noxdafox/pebble/actions/workflows/action.yml\n   :alt: build status\n.. |docs badge| image:: https://readthedocs.org/projects/pebble/badge/?version=latest\n   :target: https://pebble.readthedocs.io\n   :alt: documentation status\n.. |downloads badge| image:: https://img.shields.io/pypi/dm/pebble\n   :target: https://pypistats.org/packages/pebble\n   :alt: pypi - downloads\n\nexamples\n--------\n\nrun a job in a separate thread and wait for its results.\n\n.. code:: python\n\n    from pebble import concurrent\n\n    @concurrent.thread\n    def function(foo, bar=0):\n        return foo + bar\n\n    future = function(1, bar=2)\n\n    result = future.result()  # blocks until results are ready\n\nsame code with asyncio support.\n\n.. code:: python\n\n    import asyncio\n\n    from pebble import asynchronous\n\n    @asynchronous.thread\n    def function(foo, bar=0):\n        return foo + bar\n\n    async def asynchronous_function():\n        result = await function(1, bar=2)  # blocks until results are ready\n        print(result)\n\n    asyncio.run(asynchronous_function())\n\nrun a function with a timeout of ten seconds and deal with errors.\n\n.. code:: python\n\n    from pebble import concurrent\n    from concurrent.futures import timeouterror\n\n    @concurrent.process(timeout=10)\n    def function(foo, bar=0):\n        return foo + bar\n\n    future = function(1, bar=2)\n\n    try:\n        result = future.result()  # blocks until results are ready\n    except timeouterror as error:\n        print(\"function took longer than %d seconds\" % error.args[1])\n    except exception as error:\n        print(\"function raised %s\" % error)\n        print(error.traceback)  # traceback of the function\n\npools support workers restart, timeout for long running tasks and more.\n\n.. code:: python\n\n    from pebble import processpool\n    from concurrent.futures import timeouterror\n\n    timeout_seconds = 3\n\n    def function(foo, bar=0):\n        return foo + bar\n\n    def task_done(future):\n        try:\n            result = future.result()  # blocks until results are ready\n        except timeouterror as error:\n            print(\"function took longer than %d seconds\" % error.args[1])\n        except exception as error:\n            print(\"function raised %s\" % error)\n            print(error.traceback)  # traceback of the function\n\n    with processpool(max_workers=5, max_tasks=10) as pool:\n        for index in range(0, 10):\n            future = pool.schedule(function, index, bar=1, timeout=timeout_seconds)\n            future.add_done_callback(task_done)\n",
  "docs_url": "https://pythonhosted.org/Pebble/",
  "keywords": "thread process pool decorator",
  "license": "lgpl",
  "name": "pebble",
  "package_url": "https://pypi.org/project/Pebble/",
  "project_url": "https://pypi.org/project/Pebble/",
  "project_urls": {
    "Homepage": "https://github.com/noxdafox/pebble"
  },
  "release_url": "https://pypi.org/project/Pebble/5.0.6/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "threading and multiprocessing eye-candy.",
  "version": "5.0.6",
  "releases": [],
  "developers": [
    "matteo_cafasso",
    "noxdafox@gmail.com"
  ],
  "kwds": "processpool workflows processes pebble process",
  "license_kwds": "lgpl",
  "libtype": "pypi",
  "id": "pypi_pebble",
  "homepage": "https://github.com/noxdafox/pebble",
  "release_count": 96,
  "dependency_ids": []
}
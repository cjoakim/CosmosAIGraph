{
  "classifiers": [
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: rust"
  ],
  "description": "# semsimian\n\nsemsimian is a package to provide fast semantic similarity calculations for ontologies. \nit is a rust library with a python interface. \n\nthis includes implementation of jaccard and resnik similarity of terms in an ontology,\nas well as a method to calculate the similarity of two sets of terms (so-called\ntermset similarity). other methods will be added in the future.\n\nsemsimian is currently integrated into [oak](https://github.com/incatools/ontology-access-kit) and\nthe [monarch app](https://github.com/monarch-initiative/monarch-app) to provide fast semantic \nsimilarity calculations.\n\n## installation\n\n- set up your virtual environment of choice.\n- cd `semsimian` (home directory of this project)\n- `pip install maturin`\n- `maturin develop`\n- `python`\n```\npython 3.9.16 (main, jan 11 2023, 10:02:19) \n[clang 14.0.6 ] :: anaconda, inc. on darwin\ntype \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from semsimian import semsimian\n>>> s = semsimian([('banana', 'is_a', 'fruit'), ('cherry', 'is_a', 'fruit')])\n>>> s.jaccard_similarity('banana', 'cherry')\n```\nthis should yield a value of 1.0.\n\n\n## releases\n\nas of version 0.1.14, the semsimian source is released on github, with a corresponding set of python wheels released to pypi.\n\nto trigger a new set of builds, first update the version number in `cargo.toml`, then [create a new release](https://github.com/monarch-initiative/semsimian/releases/new).\n\nwheels are prepared for the following environments and architectures:\n\n| os      | architectures                                                                            | python versions           |\n|---------|------------------------------------------------------------------------------------------|---------------------------|\n| linux   | x86_64, x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl | 3.7, 3.8, 3.9, 3.10, 3.11 |\n| macos   | x86_64, universal2                                                                       | 3.7, 3.8, 3.9, 3.10, 3.11 |\n| windows | x86_64                                                                                   | 3.7, 3.8, 3.9, 3.10, 3.11 |\n\n## troubleshooting\n\n### building for mac arm m1 architectures\n\nif a `import semsimian` results in a `importerror` warning about incompatible architecture, try the following:\n- install `conda`. [this guide may be helpful.](https://towardsdatascience.com/how-to-manage-conda-environments-on-an-apple-silicon-m1-mac-1e29cb3bad12)\n- set up a virtual environment with `conda` so that your python build is aligned with your processor architecture (in this case, arm).\ntry something like:\n```\n$ conda create -n myenv python=3.9\n...setup happens...\n$ conda activate myenv\n```\nand then proceed as above.\n\n\n### code coverage via docker\n\nbuild a docker image:\n\n```\ndocker build -t my-rust-app .\n```\n\nrun your tests inside a docker container and generate coverage:\n```\ndocker run -v \"$(pwd)\":/usr/src/app -t my-rust-app bash -c \"cargo_incremental=0 rustflags='-zprofile -ccodegen-units=1 -cinline-threshold=0 -coverflow-checks=off -zpanic_abort_tests -cpanic=abort' cargo test && grcov . -s . --binary-path ./target/debug/ -t html --branch --ignore-not-existing -o ./target/debug/coverage/\"\n```\n\nget coverage report from:\n```\nopen ./target/debug/coverage/index.html\n\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "semsimian",
  "package_url": "https://pypi.org/project/semsimian/",
  "project_url": "https://pypi.org/project/semsimian/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/semsimian/0.2.11/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "",
  "version": "0.2.11",
  "releases": [],
  "developers": [],
  "kwds": "jaccard_similarity ontologies ontology semsimian similarity",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_semsimian",
  "homepage": "",
  "release_count": 33,
  "dependency_ids": []
}
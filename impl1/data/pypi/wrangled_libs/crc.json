{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<h1 align=\"center\">crc</h1>\n<p align=\"center\">\n\ncalculate crc checksums, verify crc checksum, predefined crc configurations, custom crc configurations\n</p>\n\n<p align=\"center\">\n\n<a href=\"https://github.com/nicoretti/crc/actions\">\n    <img src=\"https://img.shields.io/github/checks-status/nicoretti/crc/master\" alt=\"checks master\">\n</a>\n<a href=\"https://coveralls.io/github/nicoretti/crc\">\n    <img src=\"https://img.shields.io/coverallscoverage/github/nicoretti/crc\" alt=\"coverage\">\n</a>\n<a href=\"https://opensource.org/licenses/bsd-2-clause\">\n    <img src=\"https://img.shields.io/pypi/l/crc\" alt=\"license\">\n</a>\n<a href=\"https://pypi.org/project/crc/\">\n    <img src=\"https://img.shields.io/pypi/dm/crc\" alt=\"downloads\">\n</a>\n<a href=\"https://pypi.org/project/crc/\">\n    <img src=\"https://img.shields.io/pypi/pyversions/crc\" alt=\"supported python versions\">\n</a>\n<a href=\"https://pypi.org/project/crc/\">\n    <img src=\"https://img.shields.io/pypi/v/crc\" alt=\"pypi package\">\n</a>\n</p>\n\n---\n* documentation: [https://nicoretti.github.io/crc](https://nicoretti.github.io/crc)\n* source code: [https://github.com/nicoretti/crc](https://github.com/nicoretti/crc)\n---\n\n## available crc configurations\nfor convince various frequently used crc configurations ship with the library out of the box.\n\n| crc8 | crc16    | crc32 | crc64 |\n|------|----------|-------|-------|\n| ccitt | ccitt    | crc32 | crc64 |\n| autosar | gsm      | autosar | |\n| saj1850 | profibus | bzip2 | |\n| bluetooth | modbus   | posix | |\n| maxim-dow |          | | | |\n\nif you find yourself in the position, where having a new configuration available out of the\nbox would be desirable, feel free to create a [pr](https://github.com/nicoretti/crc/pulls) or file an [issue](https://github.com/nicoretti/crc/issues).\n\n## custom configurations\n\nif you want to create a custom configuration, you should have the following information available:\n\n\ud83d\uddd2 note:\n\n    this library currently only supports bit widths of full bytes 8, 16, 24, 32, ...\n\n* **width**\n* **polynom**\n* **init value**\n* **final xor value**\n* **reversed input**\n* **reversed output**\n\nin case you only have a name of a specific crc configuration/algorithm and you are unsure what are the specific parameters\nof it, a look into this [crc-catalogue](http://reveng.sourceforge.net/crc-catalogue/all.htm) might help.\n\n\n## requirements\n* [\\>= python 3.8](https://www.python.org)\n\n## installation\n\n```shell\npip install crc\n```\n\n## examples\n\n### create a calculator\n\n#### pre defined configuration\n\n```python\nfrom crc import calculator, crc8\n\ncalculator = calculator(crc8.ccitt)\n```\n#### custom configuration\n\n```python\nfrom crc import calculator, configuration\n\nconfig = configuration(\n    width=8,\n    polynomial=0x07,\n    init_value=0x00,\n    final_xor_value=0x00,\n    reverse_input=false,\n    reverse_output=false,\n)\n\ncalculator = calculator(config)\n```\n\n### calculate a checksum\n\n#### standard\n\n```python\nfrom crc import calculator, crc8\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = calculator(crc8.ccitt)\n\nassert expected == calculator.checksum(data)\n```\n\n#### optimized for speed\n\n```python\nfrom crc import calculator, crc8\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = calculator(crc8.ccitt, optimized=true)\n\nassert expected == calculator.checksum(data)\n```\n\n### verify a checksum\n\n#### standard\n\n```python\nfrom crc import calculator, crc8\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = calculator(crc8.ccitt)\n\nassert calculator.verify(data, expected)\n```\n\n#### optimized for speed\n\n```python\nfrom crc import calculator, crc8\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\ncalculator = calculator(crc8.ccitt, optimized=true)\n\nassert calculator.verify(data, expected)\n```\n\n### calculate a checksum with raw registers\n\n#### register\n\n```python\nfrom crc import crc8, register\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\nregister = register(crc8.ccitt)\n\nregister.init()\nregister.update(data)\nassert expected == register.digest()\n```\n#### tablebasedregister\n\n```python\nfrom crc import crc8, tablebasedregister\n\nexpected = 0xbc\ndata = bytes([0, 1, 2, 3, 4, 5])\nregister = tablebasedregister(crc8.ccitt)\n\nregister.init()\nregister.update(data)\nassert expected == register.digest()\n```\n\nreferences & resources\n-----------------------\n* [a painless guide to crc error detection algorithms](http://www.zlib.net/crc_v3.txt)\n* [crc-catalogue](http://reveng.sourceforge.net/crc-catalogue/all.htm)\n",
  "docs_url": null,
  "keywords": "crc,crc8,crc16,crc32,crc64",
  "license": "bsd-2-clause",
  "name": "crc",
  "package_url": "https://pypi.org/project/crc/",
  "project_url": "https://pypi.org/project/crc/",
  "project_urls": {
    "Changelog": "https://nicoretti.github.io/crc/changelog/unreleased/",
    "Documentation": "https://nicoretti.github.io/crc/",
    "Homepage": "https://nicoretti.github.io/crc/",
    "Issues": "https://github.com/Nicoretti/crc/issues",
    "Repository": "https://github.com/Nicoretti/crc",
    "Source": "https://github.com/Nicoretti/crc"
  },
  "release_url": "https://pypi.org/project/crc/6.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.8,<4.0",
  "summary": "library and cli to calculate and verify all kinds of crc checksums",
  "version": "6.0.0",
  "releases": [],
  "developers": [
    "nico.coretti@gmail.com",
    "nicola_coretti"
  ],
  "kwds": "crc crc_v3 crc32 crc16 crc8",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_crc",
  "homepage": "https://github.com/nicoretti/crc",
  "release_count": 27,
  "dependency_ids": []
}
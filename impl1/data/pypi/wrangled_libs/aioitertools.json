{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "topic :: software development :: libraries"
  ],
  "description": "aioitertools\n============\n\nimplementation of itertools, builtins, and more for asyncio and mixed-type iterables.\n\n[![documentation](https://readthedocs.org/projects/aioitertools/badge/?version=latest)](https://aioitertools.omnilib.dev)\n[![version](https://img.shields.io/pypi/v/aioitertools.svg)](https://pypi.org/project/aioitertools)\n[![changelog](https://img.shields.io/badge/change-log-blue)](https://aioitertools.omnilib.dev/en/latest/changelog.html)\n[![license](https://img.shields.io/pypi/l/aioitertools.svg)](https://github.com/omnilib/aioitertools/blob/master/license)\n\n\ninstall\n-------\n\naioitertools requires python 3.6 or newer.\nyou can install it from pypi:\n\n    $ pip install aioitertools\n\n\nusage\n-----\n\naioitertools shadows the standard library whenever possible to provide\nasynchronous version of the modules and functions you already know.  it's\nfully compatible with standard iterators and async iterators alike, giving\nyou one unified,\u00a0familiar interface for interacting with iterable objects:\n\n```python\nfrom aioitertools import iter, next, map, zip\n\nsomething = iter(...)\nfirst_item = await next(something)\n\nasync for item in iter(something):\n    ...\n\n\nasync def fetch(url):\n    response = await aiohttp.request(...)\n    return response.json\n\nasync for value in map(fetch, many_urls):\n    ...\n\n\nasync for a, b in zip(something, something_else):\n    ...\n```\n\n\naioitertools emulates the entire `itertools` module, offering the same\nfunction signatures, but as async generators.  all functions support\nstandard iterables and async iterables alike, and can take functions or\ncoroutines:\n\n```python\nfrom aioitertools import chain, islice\n\nasync def generator1(...):\n    yield ...\n\nasync def generator2(...):\n    yield ...\n\nasync for value in chain(generator1(), generator2()):\n    ...\n\nasync for value in islice(generator1(), 2, none, 2):\n    ...\n```\n\n\nsee [builtins.py][], [itertools.py][], and [more_itertools.py][] for full\ndocumentation of functions and abilities.\n\n\nlicense\n-------\n\naioitertools is copyright [amethyst reese](https://noswap.com), and licensed under\nthe mit license.  i am providing code in this repository to you under an open\nsource license.  this is my personal repository; the license you receive to\nmy code is from me and not from my employer. see the `license` file for details.\n\n\n[builtins.py]: https://github.com/omnilib/aioitertools/blob/master/aioitertools/builtins.py\n[itertools.py]: https://github.com/omnilib/aioitertools/blob/master/aioitertools/itertools.py\n[more_itertools.py]: https://github.com/omnilib/aioitertools/blob/master/aioitertools/more_itertools.py\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "aioitertools",
  "package_url": "https://pypi.org/project/aioitertools/",
  "project_url": "https://pypi.org/project/aioitertools/",
  "project_urls": {
    "Documentation": "https://aioitertools.omnilib.dev/en/latest/",
    "Github": "https://github.com/omnilib/aioitertools",
    "Homepage": "https://aioitertools.omnilib.dev"
  },
  "release_url": "https://pypi.org/project/aioitertools/0.11.0/",
  "requires_dist": [
    "typing_extensions>=4.0; python_version < '3.10'"
  ],
  "requires_python": ">=3.6",
  "summary": "itertools and builtins for asyncio and mixed iterables",
  "version": "0.11.0",
  "releases": [],
  "developers": [
    "amethyst_reese",
    "amy@noswap.com"
  ],
  "kwds": "more_itertools aioitertools itertools asyncio iterators",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_aioitertools",
  "homepage": "https://aioitertools.omnilib.dev",
  "release_count": 18,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
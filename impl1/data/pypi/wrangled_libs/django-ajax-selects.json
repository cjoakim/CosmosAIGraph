{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "license :: other/proprietary license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: user interfaces"
  ],
  "description": "# edit `foreignkey`, `manytomanyfield` and `charfield` in django admin using jquery ui autocomplete\n\n[![build status](https://travis-ci.org/crucialfelix/django-ajax-selects.svg?branch=master)](https://travis-ci.org/crucialfelix/django-ajax-selects) [![pypi version](https://badge.fury.io/py/django-ajax-selects.svg)](https://badge.fury.io/py/django-ajax-selects)\n\nthis django app glues django admin, jquery ui together to enable searching and managing foreignkey  and manytomany relationships.\n\nat the time it was created django did not have any way to do this, and this solution glued together some technologies of the day.\n\nif you are building a new project then you should not use this.\n\ndjango has built in support now:\nhttps://docs.djangoproject.com/en/3.2/ref/contrib/admin/#django.contrib.admin.modeladmin.autocomplete_fields\n\n\n---\n\n![selecting](/docs/source/_static/kiss.png?raw=true)\n\n![selected](/docs/source/_static/kiss-all.png?raw=true)\n\n## documentation\n\nhttp://django-ajax-selects.readthedocs.org/en/latest/\n\n## installation\n\n`pip install django-ajax-selects`\n\nadd the app:\n\n```py\n# settings.py\ninstalled_apps = (\n    ...\n    'ajax_select',  # <-   add the app\n    ...\n)\n```\n\ninclude the urls in your project:\n\n```py\n# urls.py\nfrom django.urls import path\nfrom django.conf.urls import include\n\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom ajax_select import urls as ajax_select_urls\n\nadmin.autodiscover()\n\nurlpatterns = [\n    # this is the api endpoint that django-ajax-selects will call\n    # to lookup your model ids by name\n    path(\"admin/lookups/\", include(ajax_select_urls)),\n    path(\"admin/\", admin.site.urls),\n] + static(settings.static_url, document_root=settings.static_root)\n```\n\n## quick usage\n\ndefine a lookup channel:\n\n```python\n# yourapp/lookups.py\nfrom ajax_select import register, lookupchannel\nfrom .models import tag\n\n@register('tags')\nclass tagslookup(lookupchannel):\n\n    model = tag\n\n    def get_query(self, q, request):\n        return self.model.objects.filter(name__icontains=q).order_by('name')[:50]\n\n    def format_item_display(self, item):\n        return u\"<span class='tag'>%s</span>\" % item.name\n```\n\nadd field to a form:\n\n```python\n# yourapp/forms.py\nfrom ajax_select.fields import autocompleteselectmultiplefield\n\nclass documentform(modelform):\n\n    class meta:\n        model = document\n\n    tags = autocompleteselectmultiplefield('tags')\n```\n\nthis will now work in the django admin.\n\nto use a form outside, be sure to include `form.media` on the template where you place the form:\n\n```html\n{{ form.media }}\n{{ form }}\n```\n\nread the full documention here: [outside of the admin](http://django-ajax-selects.readthedocs.io/en/latest/outside-of-admin.html)\n\n## fully customizable\n\n* customize search query\n* query other resources besides django orm\n* format results with html\n* customize styling\n* customize security policy\n* add additional custom ui alongside widget\n* integrate with other ui elements elsewhere on the page using the javascript api\n* works in admin as well as in normal views\n\n## assets included by default\n\nhttps://jquery.com/ 3.7.1\nhttps://jqueryui.com/ 1.13.2\n\n## customize jquery\n\nto use a custom jquery ui theme you can set:\n\n```python\n# settings.py\najax_select_jqueryui_theme = \"/static/path-to-your-theme/jquery-ui-min.css\"\n```\n\nhttps://jqueryui.com/themeroller/\n\nif you need to use a different jquery or jquery ui then turn off the default assets:\n\n```python\n# settings.py\najax_select_bootstrap = false\n```\n\nand include jquery and jquery-ui yourself, making sure they are loaded before the django admin loads.\n\n\n## compatibility\n\n* django >=3.2\n* python >=3.10\n\n## contributors\n\nmany thanks to all contributors and pull requesters !\n\n<https://github.com/crucialfelix/django-ajax-selects/graphs/contributors/>\n\n## license\n\ndual licensed under the mit and gpl licenses:\n\n* <http://www.opensource.org/licenses/mit-license.php/>\n* <http://www.gnu.org/licenses/gpl.html/>\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit, gpl",
  "name": "django-ajax-selects",
  "package_url": "https://pypi.org/project/django-ajax-selects/",
  "project_url": "https://pypi.org/project/django-ajax-selects/",
  "project_urls": {
    "Documentation": "https://django-ajax-selects.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/crucialfelix/django-ajax-selects",
    "Repository": "https://github.com/crucialfelix/django-ajax-selects"
  },
  "release_url": "https://pypi.org/project/django-ajax-selects/3.0.1/",
  "requires_dist": [
    "Django (>=3.2)"
  ],
  "requires_python": ">=3.10,<4.0",
  "summary": "edit foreignkey, manytomanyfield and charfield in django admin using jquery ui autocomplete.",
  "version": "3.0.1",
  "releases": [],
  "developers": [
    "chris_sattinger",
    "crucialfelix@gmail.com"
  ],
  "kwds": "autocompleteselectmultiplefield autocomplete_fields django manytomanyfield autocomplete",
  "license_kwds": "mit, gpl",
  "libtype": "pypi",
  "id": "pypi_django_ajax_selects",
  "homepage": "https://github.com/crucialfelix/django-ajax-selects",
  "release_count": 37,
  "dependency_ids": [
    "pypi_django"
  ]
}
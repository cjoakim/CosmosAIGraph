{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "lightgbm python-package\n=======================\n\n|license| |python versions| |pypi version| |downloads| |api docs|\n\ninstallation\n------------\n\npreparation\n'''''''''''\n\n32-bit python is not supported. please install 64-bit version. if you have a strong need to install with 32-bit python, refer to `build 32-bit version with 32-bit python section <#build-32-bit-version-with-32-bit-python>`__.\n\n`setuptools <https://pypi.org/project/setuptools>`_ is needed.\n\ninstall from `pypi <https://pypi.org/project/lightgbm>`_\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: sh\n\n    pip install lightgbm\n\ncompiled library that is included in the wheel file supports both **gpu** and **cpu** versions out of the box. this feature is experimental and available only for **windows** and **linux** currently. to use **gpu** version you only need to install opencl runtime libraries. for nvidia and amd gpu they are included in the ordinary drivers for your graphics card, so no action is required. if you would like your amd or intel cpu to act like a gpu (for testing and debugging) you can install `amd app sdk <https://github.com/microsoft/lightgbm/releases/download/v2.0.12/amd-app-sdkinstaller-v3.0.130.135-ga-windows-f-x64.exe>`_ on **windows** and `pocl <http://portablecl.org>`_ on **linux**. many modern linux distributions provide packages for pocl, look for ``pocl-opencl-icd`` on debian-based distributions and ``pocl`` on redhat-based distributions.\n\nfor **windows** users, `vc runtime <https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads>`_ is needed if **visual studio** (2015 or newer) is not installed.\n\nfor **linux** users, **glibc** >= 2.14 is required for lightgbm ``<=3.3.3`` and **glibc** >= 2.28 is required for newer versions. also, in some rare cases, when you hit ``oserror: libgomp.so.1: cannot open shared object file: no such file or directory`` error during importing lightgbm, you need to install openmp runtime library separately (use your package manager and search for ``lib[g|i]omp`` for doing this).\n\nfor **macos** (we provide wheels for 3 newest macos versions) users:\n\n- starting from version 2.2.1, the library file in distribution wheels is built by the **apple clang** (xcode_8.3.3 for versions 2.2.1 - 2.3.1, xcode_9.4.1 for versions 2.3.2 - 3.3.2 and xcode_11.7 from version 4.0.0) compiler. this means that you don't need to install the **gcc** compiler anymore. instead of that you need to install the **openmp** library, which is required for running lightgbm on the system with the **apple clang** compiler. you can install the **openmp** library by the following command: ``brew install libomp``.\n\n- for version smaller than 2.2.1 and not smaller than 2.1.2, **gcc-8** with **openmp** support must be installed first. refer to `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#gcc>`__ for installation of **gcc-8** with **openmp** support.\n\n- for version smaller than 2.1.2, **gcc-7** with **openmp** is required.\n\nuse lightgbm with dask\n**********************\n\n.. warning::\n\n    dask-package is only tested on linux.\n\nto install all dependencies needed to use ``lightgbm.dask``, append ``[dask]``.\n\n.. code:: sh\n\n    pip install 'lightgbm[dask]'\n\nuse lightgbm with pandas\n************************\n\nto install all dependencies needed to use ``pandas`` in lightgbm, append ``[pandas]``.\n\n.. code:: sh\n\n    pip install 'lightgbm[pandas]'\n\nuse lightgbm with scikit-learn\n******************************\n\nto install all dependencies needed to use ``scikit-learn`` in lightgbm, append ``[scikit-learn]``.\n\n.. code:: sh\n\n    pip install 'lightgbm[scikit-learn]'\n\nbuild from sources\n******************\n\n.. code:: sh\n\n    pip install --no-binary lightgbm lightgbm\n\nfor **linux** and **macos** users, installation from sources requires installed `cmake`_.\n\nfor **linux** users, **glibc** >= 2.28 is required. also, in some rare cases you may need to install openmp runtime library separately (use your package manager and search for ``lib[g|i]omp`` for doing this).\n\nfor **macos** users, you can perform installation either with **apple clang** or **gcc**.\n\n- in case you prefer **apple clang**, you should install **openmp** (details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#apple-clang>`__) first and **cmake** version 3.16 or higher is required.\n\n- in case you prefer **gcc**, you need to install it (details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#gcc>`__) and specify compilers by running ``export cxx=g++-7 cc=gcc-7`` (replace \"7\" with version of **gcc** installed on your machine) first.\n\nfor **windows** users, **visual studio** (or `vs build tools <https://visualstudio.microsoft.com/downloads/>`_) is needed. if you get any errors during installation, you may need to install `cmake`_ (version 3.8 or higher).\n\nbuild threadless version\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_openmp=off\n\nall requirements, except the **openmp** requirement, from `build from sources section <#build-from-sources>`__ apply for this installation option as well.\n\nit is **strongly not recommended** to use this version of lightgbm!\n\nbuild mpi version\n~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_mpi=on\n\nall requirements from `build from sources section <#build-from-sources>`__ apply for this installation option as well.\n\nfor **windows** users, compilation with **mingw-w64** is not supported and `cmake`_ (version 3.8 or higher) is strongly required.\n\n**mpi** libraries are needed: details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#build-mpi-version>`__.\n\nbuild gpu version\n~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_gpu=on\n\nall requirements from `build from sources section <#build-from-sources>`__ apply for this installation option as well.\n\nfor **windows** users, `cmake`_ (version 3.8 or higher) is strongly required.\n\n**boost** and **opencl** are needed: details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#build-gpu-version>`__. almost always you also need to pass ``opencl_include_dir``, ``opencl_library`` options for **linux** and ``boost_root``, ``boost_librarydir`` options for **windows** to **cmake** via ``pip`` options, like\n\n.. code:: sh\n\n    pip install lightgbm \\\n      --config-settings=cmake.define.use_gpu=on \\\n      --config-settings=cmake.define.opencl_include_dir=\"/usr/local/cuda/include/\" \\\n      --config-settings=cmake.define.opencl_library=\"/usr/local/cuda/lib64/libopencl.so\"\n\nall available options that can be passed via ``cmake.define.{option}``.\n\n- boost_root\n\n- boost_dir\n\n- boost_include_dir\n\n- boost_librarydir\n\n- opencl_include_dir\n\n- opencl_library\n\nfor more details see `findboost <https://cmake.org/cmake/help/latest/module/findboost.html>`__ and `findopencl <https://cmake.org/cmake/help/latest/module/findopencl.html>`__.\n\nbuild cuda version\n~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_cuda=on\n\nall requirements from `build from sources section <#build-from-sources>`__ apply for this installation option as well, and `cmake`_ (version 3.16 or higher) is strongly required.\n\n**cuda** library (version 10.0 or higher) is needed: details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#build-cuda-version-experimental>`__.\n\nto use the cuda version within python, pass ``{\"device\": \"cuda\"}`` respectively in parameters.\n\nbuild hdfs version\n~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_hdfs=on\n\nall requirements from `build from sources section <#build-from-sources>`__ apply for this installation option as well.\n\n**hdfs** library is needed: details for installation can be found in `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst#build-hdfs-version>`__.\n\nnote that the installation process of hdfs version was tested only on **linux**.\n\nbuild with mingw-w64 on windows\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    # in sh.exe, git bash, or other unix-like shell\n    export cmake_generator='mingw makefiles'\n    pip install lightgbm --config-settings=cmake.define.cmake_sh=cmake_sh-notfound\n\n`cmake`_ and `mingw-w64 <https://www.mingw-w64.org/>`_ should be installed first.\n\nit is recommended to use **visual studio** for its better multithreading efficiency in **windows** for many-core systems\n(see `question 4 <https://github.com/microsoft/lightgbm/blob/master/docs/faq.rst#4-i-am-using-windows-should-i-use-visual-studio-or-mingw-for-compiling-lightgbm>`__ and `question 8 <https://github.com/microsoft/lightgbm/blob/master/docs/faq.rst#8-cpu-usage-is-low-like-10-in-windows-when-using-lightgbm-on-very-large-datasets-with-many-core-systems>`__).\n\nbuild 32-bit version with 32-bit python\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    # in sh.exe, git bash, or other unix-like shell\n    export cmake_generator='visual studio 17 2022'\n    export cmake_generator_platform='win32'\n    pip install --no-binary lightgbm lightgbm\n\nby default, installation in environment with 32-bit python is prohibited. however, you can remove this prohibition on your own risk by passing ``bit32`` option.\n\nit is **strongly not recommended** to use this version of lightgbm!\n\nbuild with time costs output\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pip install lightgbm --config-settings=cmake.define.use_timetag=on\n\nuse this option to make lightgbm output time costs for different internal routines, to investigate and benchmark its performance.\n\ninstall from `conda-forge channel <https://anaconda.org/conda-forge/lightgbm>`_\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\nif you use ``conda`` to manage python dependencies, you can install lightgbm using ``conda install``.\n\nwe strongly recommend installation from the ``conda-forge`` channel and not from the ``default`` one due to many reasons. the main ones are less time delay for new releases, greater number of supported architectures and better handling of dependency conflicts, especially workaround for openmp is crucial for lightgbm. more details can be found in `this comment <https://github.com/microsoft/lightgbm/issues/4948#issuecomment-1013766397>`_.\n\n**note**: the `lightgbm conda-forge feedstock <https://github.com/conda-forge/lightgbm-feedstock>`_ is not maintained by lightgbm maintainers.\n\n.. code:: sh\n\n    conda install -c conda-forge lightgbm\n\ninstall from github\n'''''''''''''''''''\n\nall requirements from `build from sources section <#build-from-sources>`__ apply for this installation option as well.\n\nfor **windows** users, if you get any errors during installation and there is the warning ``warning:lightgbm:compilation with msbuild from existing solution file failed.`` in the log, you should install `cmake`_ (version 3.8 or higher).\n\n.. code:: sh\n\n    git clone --recursive https://github.com/microsoft/lightgbm.git\n    # export cxx=g++-7 cc=gcc-7  # macos users, if you decided to compile with gcc, don't forget to specify compilers (replace \"7\" with version of gcc installed on your machine)\n    sh ./build-python.sh install\n\nnote: ``sudo`` (or administrator rights in **windows**) may be needed to perform the command.\n\nrun ``sh ./build-python.sh install --nomp`` to disable **openmp** support. all requirements from `build threadless version section <#build-threadless-version>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --mpi`` to enable **mpi** support. all requirements from `build mpi version section <#build-mpi-version>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --mingw``, if you want to use **mingw-w64** on **windows** instead of **visual studio**. all requirements from `build with mingw-w64 on windows section <#build-with-mingw-w64-on-windows>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --gpu`` to enable gpu support. all requirements from `build gpu version section <#build-gpu-version>`__ apply for this installation option as well. to pass additional options to **cmake** use the following syntax: ``sh ./build-python.sh install --gpu --opencl-include-dir=\"/usr/local/cuda/include/\"``, see `build gpu version section <#build-gpu-version>`__ for the complete list of them.\n\nrun ``sh ./build-python.sh install --cuda`` to enable cuda support. all requirements from `build cuda version section <#build-cuda-version>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --hdfs`` to enable hdfs support. all requirements from `build hdfs version section <#build-hdfs-version>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --bit32``, if you want to use 32-bit version. all requirements from `build 32-bit version with 32-bit python section <#build-32-bit-version-with-32-bit-python>`__ apply for this installation option as well.\n\nrun ``sh ./build-python.sh install --time-costs``, if you want to output time costs for different internal routines. all requirements from `build with time costs output section <#build-with-time-costs-output>`__ apply for this installation option as well.\n\nif you get any errors during installation or due to any other reasons, you may want to build dynamic library from sources by any method you prefer (see `installation guide <https://github.com/microsoft/lightgbm/blob/master/docs/installation-guide.rst>`__) and then just run ``sh ./build-python.sh install --precompile``.\n\nbuild wheel file\n****************\n\nyou can use ``sh ./build-python.sh install bdist_wheel`` to build a wheel file but not install it.\n\nthat script requires some dependencies like ``build``, ``scikit-build-core``, and ``wheel``.\nin environments with restricted or no internt access, install those tools and then pass ``--no-isolation``.\n\n.. code:: sh\n\n  sh ./build-python.sh bdist_wheel --no-isolation\n\nbuild with msbuild\n******************\n\nto use ``msbuild`` (windows-only), first build ``lib_lightgbm.dll`` by running the following from the root of the repo.\n\n.. code:: sh\n\n  msbuild.exe windows/lightgbm.sln /p:configuration=dll /p:platform=x64 /p:platformtoolset=v143\n\nthen install the python package using that library.\n\n.. code:: sh\n\n  sh ./build-python.sh install --precompile\n\ntroubleshooting\n---------------\n\nin case you are facing any errors during the installation process, you can examine ``$home/lightgbm_compilation.log`` file, in which all operations are logged, to get more details about occurred problem. also, please attach this file to the issue on github to help faster indicate the cause of the error.\n\nrefer to `faq <https://github.com/microsoft/lightgbm/tree/master/docs/faq.rst>`_.\n\nexamples\n--------\n\nrefer to the walk through examples in `python guide folder <https://github.com/microsoft/lightgbm/tree/master/examples/python-guide>`_.\n\ndevelopment guide\n-----------------\n\nthe code style of python-package follows `pep 8 <https://www.python.org/dev/peps/pep-0008/>`_.\n\nthe package's documentation strings (docstrings) are written in the `numpydoc style <https://numpydoc.readthedocs.io/en/latest/format.html>`_.\n\nto check that a contribution to the package matches its style expectations, run the following from the root of the repo.\n\n.. code:: sh\n\n    sh .ci/lint-python.sh\n\n.. |license| image:: https://img.shields.io/github/license/microsoft/lightgbm.svg\n   :target: https://github.com/microsoft/lightgbm/blob/master/license\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/lightgbm.svg?logo=python&logocolor=white\n   :target: https://pypi.org/project/lightgbm\n.. |pypi version| image:: https://img.shields.io/pypi/v/lightgbm.svg?logo=pypi&logocolor=white\n   :target: https://pypi.org/project/lightgbm\n.. |downloads| image:: https://pepy.tech/badge/lightgbm\n   :target: https://pepy.tech/project/lightgbm\n.. |api docs| image:: https://readthedocs.org/projects/lightgbm/badge/?version=latest\n   :target: https://lightgbm.readthedocs.io/en/latest/python-api.html\n.. _cmake: https://cmake.org/\n",
  "docs_url": null,
  "keywords": "",
  "license": "the mit license (mit)  copyright (c) microsoft corporation  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "lightgbm",
  "package_url": "https://pypi.org/project/lightgbm/",
  "project_url": "https://pypi.org/project/lightgbm/",
  "project_urls": {
    "Changelog": "https://github.com/microsoft/LightGBM/releases",
    "Documentation": "https://lightgbm.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/microsoft/LightGBM",
    "Repository": "https://github.com/microsoft/LightGBM.git"
  },
  "release_url": "https://pypi.org/project/lightgbm/4.2.0/",
  "requires_dist": [
    "dataclasses; python_version < \"3.7\"",
    "numpy",
    "scipy",
    "cffi>=1.15.1; extra == \"arrow\"",
    "pyarrow>=6.0.1; extra == \"arrow\"",
    "dask[array,dataframe,distributed]>=2.0.0; extra == \"dask\"",
    "pandas>=0.24.0; extra == \"dask\"",
    "pandas>=0.24.0; extra == \"pandas\"",
    "scikit-learn!=0.22.0; extra == \"scikit-learn\""
  ],
  "requires_python": ">=3.6",
  "summary": "lightgbm python package",
  "version": "4.2.0",
  "releases": [],
  "developers": [
    "yushi@microsoft.com"
  ],
  "kwds": "lib_lightgbm lightgbm_compilation lightgbm pypi pip",
  "license_kwds": "copyright license liable liability microsoft",
  "libtype": "pypi",
  "id": "pypi_lightgbm",
  "homepage": "https://github.com/microsoft/lightgbm",
  "release_count": 33,
  "dependency_ids": [
    "pypi_cffi",
    "pypi_dask",
    "pypi_dataclasses",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pyarrow",
    "pypi_scikit_learn!",
    "pypi_scipy"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "environment :: webassembly :: emscripten",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance",
    "typing :: typed"
  ],
  "description": "# repo-review\n\n[![actions status][actions-badge]][actions-link]\n[![documentation status][docs-badge]][docs-link]\n\n[![pypi version][pypi-version]][pypi-link]\n[![pypi platforms][pypi-platforms]][pypi-link]\n\n<!-- sphinx-start -->\n\nthis is a framework for building checks designed to check to see if a\nrepository follows guidelines. by itself, it does nothing - it requires at\nleast one plugin to be installed.\n\nwith one or more plugins, it will produce a list of results - green checkmarks\nmean this rule is followed, red x\u2019s mean the rule is not. a yellow warning sign\nmeans that the check was skipped because a previous required check failed. four\noutput formats are supported; `rich`, `svg`, `html`, and `json`.\n\n## plugins\n\nthese are some known plugins. feel free to request your plugin be added to this\nlist.\n\n- [sp-repo-review][]: checks based on the [scientific-python development guide][] at [scientific-python/cookie][].\n- [validate-pyproject][]: adds a check to validate pyproject sections, also supports plugins.\n\n`repo-review` itself also acts as a plugin for [validate-pyproject][], allowing\nyou to validate the `[tool.repo-review]` section of your `pyproject.toml`.\n\na live webassembly demo using [sp-repo-review][] and [validate-pyproject][] is\n[available here][repo-review-demo].\n\n## running repo-review\n\nrepo-review supports running multiple ways:\n\n- [from the command line][cli] on a local folder (or multiple folders).\n- from the command line on a remote repository on github (`gh:org/repo@branch`)\n- [from webassembly][webapp] in [pyodide][] (example in `docs/index.html`)\n- [from pre-commit][intro-pre-commit] (see caveats there)\n- [from github actions][intro-github-actions]\n- [from python][programmatic-usage]\n\nwhen installing, make sure you also install at least one plugin, as\n`repo-review` has no integrated checks. if you are using the command line\ninterface, make sure you include the `cli` extra (`repo-review[cli]`). some\nplugins, like `sp-repo-review`, support running directly, such as:\n\n```bash\npipx run sp-repo-review[cli] <args>\n```\n\nif the root of a package is not the repository root, pass `--package-dir a/b/c`.\n\n## configuration\n\nrepo-review [supports configuration][intro-configuring] via `pyproject.toml`:\n\n```toml\n[tool.repo-review]\nselect = [\"a\", \"b\", \"c100\"]\nignore = [\"a100\"]\n```\n\nif `--select` or `--ignore` are given on the command line, they will override\nthe `pyproject.toml` config.\n\n## comparison to other frameworks\n\nrepo-review was inspired by frameworks like [flake8][] and [ruff][]. it is\nprimarily different in two ways: it was designed to look at configuration files\nrather than python files; which means it also only needs a subset of the\nrepository (since most files are not configuration files). and it was designed\nto be runnable on external repositories, rather than pre-configured and run\nfrom inside the repository (which it can be). these differences also power the\nwebassembly/remote version, which only needs to make a few api calls to look at\nthe files that interest the plugin in question.\n\nso if you want to lint python code, use flake8 or ruff. but if you want to\ncheck flake8 or ruff's configuration, use repo-review! generally, repo-review\nplugins are more about requiring things to be present, like making use all your\nrepos have some [pre-commit][] check.\n\n## development of repo-review and plugins\n\nthis project is intended to be fun and easy to develop and design checks for -\nit requires and uses python 3.10, and uses a lot of the new features in 3.9 and\n3.10. it's maybe not entirely conventional, but it enables very simple plugin\ndevelopment. it works locally, remotely, and in webassembly (using\n[pyodide][]). [see the docs][writing-a-plugin].\n\nthere are a few key designs that are very useful and make this possible. first,\nall paths are handled as traversables. this allows a simple traversable\nimplementation based on `open_url` to provide a web interface for use in the\nwebapp. it also would allow `zipfile.path` to work just as well, too - no need\nto extract.\n\n[checks][] can request [fixtures][] (like [pytest][]) as arguments. check files\ncan add new fixtures as needed. fixtures are are specified with entry points,\nand take any other fixture as arguments as well - the `root` and `package`\nfixtures represents the root of the repository and of the package you are\nchecking, respectively, and are the basis for the other fixtures, which are\ntopologically sorted and cached. `pyproject` is provided as well. checks are\nspecified via an entrypoint that returns a dict of checks; this can also can\naccept fixtures, allowing dynamic check listings.\n\ncheck files do not depend on the main library, and can be extended (similar to\nflake8). you register new check files via entry-points - so extending this is\nwith custom checks or custom fixtures is easy and trivial. there's no need to\nsubclass or do anything with the base library - no dependency required.\n\nchecks are as simple as possible so they are easy to write. a check is a class\nwith the name (1-2 letters + number) and a docstring (the check message). it\nshould define a set of `requires` with any checks it depends on (by name), and\nhave a check classmethod. the docstring of this method is the failure message,\nand supports substitution. arguments to this method are fixtures, and `root` or\n`package` are built-in providing a traversable. any other fixtures are available\nby name. a new fixture can use any other fixtures, and can produce anything;\nfixtures are topologically sorted, pre-computed and cached.\n\nthe runner will topologically sort the checks, and checks that do not run will\nget a `none` result and the check method will not run. the front-end (rich\npowered cli or pyodide webapp) will render the markdown-formatted check\ndocstring only if the result is `false`.\n\nchecks are organized by [families][]. a plugin can customize the display name,\nchange the sort order, and add an optional (dynamic) description. like the other\ncollection functions, the family entry-point also supports fixtures.\n\n## links\n\nthis project inspired [try-pyhf](https://kratsg.github.io/try-pyhf/), an\ninterface for a high energy physics package in scikit-hep.\n\nthis project inspired [absense](https://princetonuniversity.github.io/absense/), an\nweb interface to absense.\n\nthis was developed for [scikit-hep][] before moving to scientific-python.\n\n<!-- prettier-ignore-start -->\n\n[actions-badge]: https://github.com/scientific-python/repo-review/workflows/ci/badge.svg\n[actions-link]: https://github.com/scientific-python/repo-review/actions\n[docs-badge]: https://readthedocs.org/projects/repo-review/badge/?version=latest\n[docs-link]: https://repo-review.readthedocs.io/en/latest/?badge=latest\n[flake8]: https://flake8.pycqa.org\n[pre-commit]: https://pre-commit.com\n[pyodide]: https://pyodide.org\n[pypi-link]: https://pypi.org/project/repo-review/\n[pypi-platforms]: https://img.shields.io/pypi/pyversions/repo-review\n[pypi-version]: https://badge.fury.io/py/repo-review.svg\n[pytest]: https://pytest.org\n[repo-review-demo]: https://scientific-python.github.io/repo-review\n[ruff]: https://beta.ruff.rs\n[scientific-python development guide]: https://learn.scientific-python.org/development\n[scientific-python/cookie]: https://github.com/scientific-python/cookie\n[scikit-hep]: https://scikit-hep.org\n[sp-repo-review]: https://pypi.org/project/sp-repo-review\n[validate-pyproject]: https://validate-pyproject.readthedocs.io\n\n[intro-pre-commit]: https://repo-review.readthedocs.io/en/latest/intro.html#pre-commit\n[intro-github-actions]: https://repo-review.readthedocs.io/en/latest/intro.html#github-actions\n[cli]: https://repo-review.readthedocs.io/en/latest/cli.html\n[programmatic-usage]: https://repo-review.readthedocs.io/en/latest/programmatic.html\n[webapp]: https://repo-review.readthedocs.io/en/latest/webapp.html\n[intro-configuring]: https://repo-review.readthedocs.io/en/latest/intro.html#configuring\n[writing-a-plugin]: https://repo-review.readthedocs.io/en/latest/plugins.html\n[fixtures]: https://repo-review.readthedocs.io/en/latest/fixtures.html\n[checks]: https://repo-review.readthedocs.io/en/latest/checks.html\n[families]: https://repo-review.readthedocs.io/en/latest/families.html\n[changelog]: https://repo-review.readthedocs.io/en/latest/changelog.html\n[api]: https://repo-review.readthedocs.io/en/latest/api/repo_review.html\n\n\n<!-- prettier-ignore-end -->\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "repo-review",
  "package_url": "https://pypi.org/project/repo-review/",
  "project_url": "https://pypi.org/project/repo-review/",
  "project_urls": {
    "Changelog": "https://github.com/scientific-python/repo-review/releases",
    "Demo": "https://scientific-python.github.io/repo-review",
    "Documentation": "https://repo-review.readthedocs.io",
    "Homepage": "https://repo-review.readthedocs.io",
    "Source": "https://github.com/scientific-python/repo-review"
  },
  "release_url": "https://pypi.org/project/repo-review/0.10.3/",
  "requires_dist": [
    "markdown-it-py",
    "pyyaml",
    "tomli; python_version < '3.11'",
    "typing-extensions; python_version < '3.11'",
    "click>=8; extra == 'cli'",
    "rich-click; extra == 'cli'",
    "rich>=12.2; extra == 'cli'",
    "repo-review[cli,test]; extra == 'dev'",
    "furo; extra == 'docs'",
    "myst-parser>=0.13; extra == 'docs'",
    "repo-review[cli]; extra == 'docs'",
    "sphinx-autodoc-typehints; extra == 'docs'",
    "sphinx-copybutton; extra == 'docs'",
    "sphinx-github-changelog; extra == 'docs'",
    "sphinx>=4.0; extra == 'docs'",
    "sphinxcontrib-programoutput; extra == 'docs'",
    "sphinxext-opengraph; extra == 'docs'",
    "pytest>=7; extra == 'test'",
    "sp-repo-review>=2023.12.21; extra == 'test'",
    "validate-pyproject>=0.14; extra == 'test'"
  ],
  "requires_python": ">=3.10",
  "summary": "framework that can run checks on repos",
  "version": "0.10.3",
  "releases": [],
  "developers": [
    "henryfs@princeton.edu"
  ],
  "kwds": "repo_review sphinx documentation pyversions repositories",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_repo_review",
  "homepage": "",
  "release_count": 21,
  "dependency_ids": [
    "pypi_click",
    "pypi_furo",
    "pypi_markdown_it_py",
    "pypi_myst_parser",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_repo_review",
    "pypi_rich",
    "pypi_rich_click",
    "pypi_sp_repo_review",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_github_changelog",
    "pypi_sphinxcontrib_programoutput",
    "pypi_sphinxext_opengraph",
    "pypi_tomli",
    "pypi_typing_extensions",
    "pypi_validate_pyproject"
  ]
}
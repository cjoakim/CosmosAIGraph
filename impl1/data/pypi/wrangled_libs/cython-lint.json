{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://github.com/marcogorelli/cython-lint/workflows/tox/badge.svg)](https://github.com/marcogorelli/cython-lint/actions?workflow=tox)\n[![coverage](https://codecov.io/gh/marcogorelli/cython-lint/branch/main/graph/badge.svg)](https://codecov.io/gh/marcogorelli/cython-lint)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/marcogorelli/cython-lint/main.svg)](https://results.pre-commit.ci/latest/github/marcogorelli/cython-lint/main)\n\ncython-lint\n===========\n\neverything ``flake8`` used to do (by accident), plus much more.\n\na tool and pre-commit hook to lint cython files.\n\n## used by\n\nhere's some major projects using ``cython-lint`` - is yours missing? feel free to open a pull request!\n\n- [ansible-pylibssh](https://github.com/ansible/pylibssh)\n- [arrow](https://github.com/apache/arrow)\n- [cupy](https://github.com/cupy/cupy)\n- [open library](https://github.com/internetarchive/openlibrary)\n- [pandas](https://github.com/pandas-dev/pandas)\n- [pymatgen](https://github.com/materialsproject/pymatgen)\n- [pyrfc](https://github.com/sap/pyrfc)\n- [rapids cuspatial](https://github.com/rapidsai/cuspatial)\n- [rapids cudf](https://github.com/rapidsai/cudf)\n- [rapids memory manager](https://github.com/rapidsai/rmm)\n- [sagemath/sage](https://github.com/sagemath/sage/issues)\n- [scikit-image](https://github.com/scikit-image/scikit-image)\n- [scikit-learn](https://github.com/scikit-learn/scikit-learn)\n- [scipy](https://github.com/scipy/scipy)\n- [spacy](https://github.com/explosion/spacy)\n- [yarl](https://github.com/aio-libs/yarl)\n- [yt](https://github.com/yt-project/yt)\n\n## installation\n\n```console\n$ pip install cython-lint\n```\n\n## usage as a pre-commit hook\n\nsee [pre-commit](https://github.com/pre-commit/pre-commit) for instructions\n\nsample `.pre-commit-config.yaml`:\n\n```yaml\n-   repo: https://github.com/marcogorelli/cython-lint\n    rev: v0.16.0\n    hooks:\n    -   id: cython-lint\n    -   id: double-quote-cython-strings\n```\n\n## command-line example\n\n```console\n$ cython-lint my_file_1.pyx my_file_2.pyx\nmy_file_1.pyx:54:5: 'get_conversion_factor' imported but unused\nmy_file_2.pyx:1112:38: 'mod' defined but unused (try prefixing with underscore?)\nmy_file_3.pyx:4:9: dangerous default value!\nmy_file_3.pyx:5:9: comma after base type in definition\n```\n\n## configuration\n\nthe following configuration options are available:\n- exclude lines by including a ``# no-cython-lint`` comment (analogous to ``# noqa`` in ``flake8``);\n\nas well as the following command-line arguments:\n- ``--max-line-length`` to control the maximum line length used by pycodestyle;\n- ``--no-pycodestyle`` if you don't want the pycodestyle checks;\n- ``--ignore`` if you want to ignore some specific pycodestyle checks;\n- ``--files`` to pass a regex pattern with which to match files to include;\n- ``--exclude`` to pass a regex pattern with which to match files to exclude.\n\nconfiguration can be set project-wise in a `pyproject.toml` file at the root of the project.\nhere's an example `pyproject.toml`:\n```\n[tool.cython-lint]\nmax-line-length = 88\nignore = ['e503', 'e504']\nexclude = 'my_project/excluded_cython_file.pyx'\n```\n\n## which checks are implemented?\n\n- assert statement with tuple condition (always true...)\n- comma after base type definition (e.g. ``cdef ndarray, arr``)\n- comparison between constants\n- dangerous default value\n- dict key repeated\n- dict key variable repeated\n- f-string without placeholders\n- if-statement with tuple condition (always true...)\n- late-binding closures https://docs.python-guide.org/writing/gotchas/#late-binding-closures\n- pointless string statement\n- ``pycodestyle`` nitpicks (which you can turn off with ``--no-pycodestyle``)\n- repeated element in set\n- ``.strip``, ``.rstrip``, or ``.lstrip`` used with repeated characters\n- unnecessary list index lookup\n- unnecessary import alias\n- variable defined but unused\n- variable imported but unused\n\nin addition, the following automated fixers are implemented:\n\n- double-quote-cython-strings (replace single quotes with double quotes, like the ``black`` formatter does)\n\nmore to come! requests welcome!\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "cython-lint",
  "package_url": "https://pypi.org/project/cython-lint/",
  "project_url": "https://pypi.org/project/cython-lint/",
  "project_urls": {
    "Homepage": "https://github.com/MarcoGorelli/cython-lint"
  },
  "release_url": "https://pypi.org/project/cython-lint/0.16.0/",
  "requires_dist": [
    "cython >=0.29.32",
    "pycodestyle",
    "tokenize-rt >=3.2.0",
    "tomli ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "a linter for cython files",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "marco_gorelli"
  ],
  "kwds": "cython excluded_cython_file badge flake8 implemented",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cython_lint",
  "homepage": "https://github.com/marcogorelli/cython-lint",
  "release_count": 43,
  "dependency_ids": [
    "pypi_cython",
    "pypi_pycodestyle",
    "pypi_tokenize_rt",
    "pypi_tomli"
  ]
}
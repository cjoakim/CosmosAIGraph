{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "=====================\ndjango datadog logger\n=====================\n\n\n.. image:: https://img.shields.io/pypi/v/django-datadog-logger.svg\n        :target: https://pypi.python.org/pypi/django-datadog-logger\n\n.. image:: https://img.shields.io/travis/namespace-ee/django-datadog-logger.svg\n        :target: https://travis-ci.com/namespace-ee/django-datadog-logger\n\n.. image:: https://readthedocs.org/projects/django-datadog-logger/badge/?version=latest\n        :target: https://django-datadog-logger.readthedocs.io/en/latest/?badge=latest\n        :alt: documentation status\n\n\n.. image:: https://pyup.io/repos/github/namespace-ee/django-datadog-logger/shield.svg\n     :target: https://pyup.io/repos/github/namespace-ee/django-datadog-logger/\n     :alt: updates\n\n\n\ndjango datadog logger integration package.\n\n\n* free software: mit license\n* documentation: https://django-datadog-logger.readthedocs.io.\n\n\nquick start\n-----------\n\nset up request id tracking (in front) and logging middlewares (at the end):\n\n.. code-block:: python\n\n    middleware = [\n        \"django_datadog_logger.middleware.request_id.requestidmiddleware\",\n        # ...\n        \"django_datadog_logger.middleware.error_log.errorloggingmiddleware\",\n        \"django_datadog_logger.middleware.request_log.requestloggingmiddleware\",\n    ]\n\nconfigure loggers in your django settings file:\n\n.. code-block:: python\n\n    api_log_root = env.str(\"api_log_root\")\n    logging = {\n        \"version\": 1,\n        \"disable_existing_loggers\": false,\n        \"formatters\": {\n            \"console\": {\"format\": \"{levelname} {message}\", \"style\": \"{\"},\n            \"json\": {\"()\": \"django_datadog_logger.formatters.datadog.datadogjsonformatter\"},\n        },\n        \"handlers\": {\n            \"console\": {\"level\": \"info\", \"class\": \"logging.streamhandler\", \"formatter\": \"console\"},\n            \"application\": {\n                \"level\": api_log_application_level,\n                \"class\": \"logging.filehandler\",\n                \"filename\": os.path.join(api_log_root, \"api.application.log\"),\n                \"formatter\": \"json\",\n            },\n            \"state\": {\n                \"level\": api_log_state_level,\n                \"class\": \"logging.filehandler\",\n                \"filename\": os.path.join(api_log_root, \"api.state.log\"),\n                \"formatter\": \"json\",\n            },\n            \"request\": {\n                \"level\": api_log_request_level,\n                \"class\": \"logging.filehandler\",\n                \"filename\": os.path.join(api_log_root, \"api.request.log\"),\n                \"formatter\": \"json\",\n            },\n            \"session\": {\n                \"level\": api_log_session_level,\n                \"class\": \"logging.filehandler\",\n                \"filename\": os.path.join(api_log_root, \"api.session.log\"),\n                \"formatter\": \"json\",\n            },\n            \"error\": {\n                \"level\": api_log_error_level,\n                \"class\": \"logging.filehandler\",\n                \"filename\": os.path.join(api_log_root, \"api.error.log\"),\n                \"formatter\": \"json\",\n            },\n        },\n        \"loggers\": {\n            \"\": {\"handlers\": [\"console\", \"error\"], \"level\": \"debug\", \"propagate\": true},\n            \"ddtrace\": {\"handlers\": [\"error\"], \"level\": \"error\", \"propagate\": false},\n            \"django.db.backends\": {\"handlers\": [\"error\"], \"level\": \"error\", \"propagate\": false},\n            \"twilio\": {\"handlers\": [\"error\"], \"level\": \"error\", \"propagate\": false},\n            \"my_project\": {\"handlers\": [\"application\"], \"level\": \"info\", \"propagate\": false},\n            \"my_project.throttling\": {\"handlers\": [\"application\"], \"level\": \"debug\", \"propagate\": false},\n            \"my_project.vehicles.viewsets.state\": {\"handlers\": [\"state\"], \"level\": \"info\", \"propagate\": false},\n            \"my_project.accounts.session\": {\"handlers\": [\"session\"], \"level\": \"debug\", \"propagate\": false},\n            \"my_project.session\": {\"handlers\": [\"session\"], \"level\": \"debug\", \"propagate\": false},\n            \"django_auth_ldap\": {\"level\": \"debug\", \"handlers\": [\"session\"], \"propagate\": false},\n            \"django_datadog_logger.middleware.error_log\": {\"handlers\": [\"error\"], \"level\": \"info\", \"propagate\": false},\n            \"django_datadog_logger.middleware.request_log\": {\"handlers\": [\"request\"], \"level\": \"info\", \"propagate\": false},\n            \"django_datadog_logger.rest_framework\": {\"handlers\": [\"application\"], \"level\": \"info\", \"propagate\": false},\n        },\n    }\n    django_datadog_logger_extra_include = r\"^(django_datadog_logger|my_project)(|\\..+)$\"\n\nadd celery logger configuration and request_id tracking decorator to tasks:\n\n.. code-block:: python\n\n    import logging\n\n    from celery import celery, shared_task\n    from celery.result import asyncresult\n    from celery.signals import after_setup_logger, after_setup_task_logger\n    from django.conf import settings\n    from django_datadog_logger.celery import store_celery_request\n\n    logger = logging.getlogger(__name__)\n\n\n    @after_setup_logger.connect\n    def on_after_setup_logger(logger, *args, **kwargs):\n        from django_datadog_logger.formatters.datadog import datadogjsonformatter\n\n        if settings.api_log_celery_json:\n            formatter = datadogjsonformatter()\n            for handler in list(logger.handlers):\n                handler.setformatter(formatter)\n                handler.setlevel(settings.api_log_celery_level)\n\n\n    @after_setup_task_logger.connect\n    def on_after_setup_task_logger(logger, *args, **kwargs):\n        from django_datadog_logger.formatters.datadog import datadogjsonformatter\n\n        if settings.api_log_celery_json:\n            formatter = datadogjsonformatter()\n            for handler in list(logger.handlers):\n                handler.setformatter(formatter)\n                handler.setlevel(settings.api_log_celery_level)\n\n\n    app = celery(\"my_project\")\n\n    # using a string here means the worker will not have to\n    # pickle the object when using windows.\n    app.config_from_object(\"django.conf:settings\", namespace=\"celery\")\n    app.autodiscover_tasks(lambda: settings.installed_apps)\n\n\n    @shared_task(bind=true)\n    @store_celery_request\n    def debug_task(self):\n        print(\"request: {0!r}\".format(self.request))\n        logger.critical(\"critical\", extra={\"level\": \"critical\"})\n        logger.error(\"error\", extra={\"level\": \"error\"})\n        logger.warning(\"warning\", extra={\"level\": \"warning\"})\n        logger.info(\"info\", extra={\"level\": \"info\"})\n        logger.debug(\"debug\", extra={\"level\": \"debug\"})\n        return 42\n        \nddtrace\n-------\n\nthe ddtrace library has an option to inject tracing context data into log records: https://ddtrace.readthedocs.io/en/stable/advanced_usage.html#logs-injection\n\nthere is a helper to look for those attributes and add them automatically to the log entry created by this library.\n\n.. code-block:: python\n\n    # log.py\n\n    # patch logging library to inject dd.* attributes on log records\n    import ddtrace\n    ddtrace.patch(logging=true)\n\n    # configure logger with datadogjsonformatter\n    import logging\n    from django_datadog_logger.formatters.datadog import datadogjsonformatter\n\n    logger = logging.root\n\n    handler = logging.streamhandler()\n    handler.formatter = datadogjsonformatter()\n    logger.addhandler(handler)\n    logger.setlevel(logging.info)\n\n\n    # log a test message\n    logger.info(\"test\")\n\n.. code-block:: bash\n\n    $ dd_service=django dd_env=test dd_version=1234 python log.py\n    {\"message\": \"test\", \"logger.name\": \"root\", \"logger.thread_name\": \"mainthread\", \"logger.method_name\": \"<module>\", \"syslog.timestamp\": \"2021-08-23t18:26:10.391099+00:00\", \"syslog.severity\": \"info\", \"dd.version\": \"1234\", \"dd.env\": \"test\", \"dd.service\": \"django\", \"dd.trace_id\": \"0\", \"dd.span_id\": \"0\"}\n\nif you remove the call to `datadog.patch(logging=true)` you end up with:\n\n.. code-block:: bash\n\n    $ python test.py\n    {\"message\": \"test\", \"logger.name\": \"root\", \"logger.thread_name\": \"mainthread\", \"logger.method_name\": \"<module>\", \"syslog.timestamp\": \"2021-08-23t18:27:47.951461+00:00\", \"syslog.severity\": \"info\"}\n\n\ncredits\n-------\n\nthis package was created with cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nhistory\n=======\n\n0.6.2 (2023-04-27)\n------------------\n\n* fixed case where accessing request.auth may raise errors\n\n0.6.1 (2023-04-27)\n------------------\n\n* removed dependency on celery package, fixed import error\n\n0.6.0 (2023-04-27)\n------------------\n\n* removed dependency on celery package\n\n0.5.6 (2023-01-17)\n------------------\n\n* datadog formatter: avoid recursion loop when accessing wsgi request auth attribute\n\n0.5.5 (2023-01-16)\n------------------\n\n* improved support for request version reporting in `http.request_version`\n* add support for `http.url_details.view_name`\n\n0.5.4 (2023-01-16)\n------------------\n\n* added support for http accept header as `http.accept`\n\n0.5.3 (2022-12-19)\n------------------\n\n* added support for jwt cid claim\n\n0.5.2 (2022-11-23)\n------------------\n\n* fixed: don't let the logger throw a disallowedhost error\n\n0.5.1 (2022-08-09)\n------------------\n\n* fixed: actionloginmixin class methods `perform_create` and `perform_update` call `super()`. remove atomic transaction\n\n0.5.0 (2021-10-20)\n------------------\n\n* added support for celery v5+\n\n0.4.0 (2021-08-27)\n------------------\n\n* enhancement: updated formatting in readme.rst #5\n* enhancement: extract and add dd.* attributes from log record to log entry dict #6\n* fixed: keyerror because a dict appears where a list is expected #7\n\n0.3.5 (2021-06-14)\n------------------\n\n* prevent recursion when warnings are logged whilst accessing wsgi request.user\n\n0.3.4 (2021-06-14)\n------------------\n\n* fixed import error for future package\n\n0.3.3 (2020-11-04)\n------------------\n\n* added support for incoming http x-request-id header values\n\n0.3.2 (2020-04-24)\n------------------\n\n* respect user.username_field\n\n0.3.1 (2020-04-24)\n------------------\n\n* removed api_log_request_duration_warn_seconds\n\n0.3.0 (2020-04-15)\n------------------\n\n* improved celery task received messages logging.\n* removed requestidfilter (not needed anymore).\n\n0.2.0 (2020-04-14)\n------------------\n\n* added celery request local.\n\n0.1.0 (2020-02-17)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "django_datadog_logger",
  "license": "mit license",
  "name": "django-datadog-logger",
  "package_url": "https://pypi.org/project/django-datadog-logger/",
  "project_url": "https://pypi.org/project/django-datadog-logger/",
  "project_urls": {
    "Homepage": "https://github.com/namespace-ee/django-datadog-logger"
  },
  "release_url": "https://pypi.org/project/django-datadog-logger/0.6.2/",
  "requires_dist": [
    "Django",
    "JSON-log-formatter",
    "djangorestframework"
  ],
  "requires_python": ">=3.6",
  "summary": "django datadog logger integration package.",
  "version": "0.6.2",
  "releases": [],
  "developers": [
    "lenno@namespace.ee",
    "lenno_nagel"
  ],
  "kwds": "django_datadog_logger django_datadog_logger_extra_include datadog actionloginmixin django",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_django_datadog_logger",
  "homepage": "https://github.com/namespace-ee/django-datadog-logger",
  "release_count": 18,
  "dependency_ids": [
    "pypi_django",
    "pypi_djangorestframework",
    "pypi_json_log_formatter"
  ]
}
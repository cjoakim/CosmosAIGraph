{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: http servers",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": " <a id=\"top\"></a>\n <p align=\"center\">\n     <img src=\"https://raw.githubusercontent.com/spec-first/connexion/main/docs/images/logo_banner.svg\" width=\"100%\"/>\n </p>\n <p align=\"center\">\n     <a href=\"https://pypi.org/project/connexion\"><img alt=\"coveralls\" src=\"https://img.shields.io/pypi/status/connexion.svg?style=flat-square&color=brightgreen\"></a>\n     <a href=\"https://pypi.org/project/connexion\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/connexion?color=brightgreen&style=flat-square\"></a>\n     <a href=\"https://github.com/spec-first/connexion/blob/main/license\"><img alt=\"license\" src=\"https://img.shields.io/pypi/l/connexion?style=flat-square&color=brightgreen\"></a>\n     <a href=\"https://github.com/spec-first/connexion/actions/workflows/pipeline.yml\"><img alt=\"github workflow status\" src=\"https://img.shields.io/github/actions/workflow/status/spec-first/connexion/pipeline.yml?style=flat-square\"></a>\n     <a href=\"https://coveralls.io/github/spec-first/connexion?branch=main\"><img alt=\"coveralls\" src=\"https://img.shields.io/coverallscoverage/github/spec-first/connexion?style=flat-square\"></a>\n     <br>\n     <br>\n     <a href=\"https://connexion.readthedocs.io/en/stable/\"><strong>explore the docs \u00bb</strong></a>\n </p>\n\n---\n\nconnexion is a modern python web framework that makes spec-first and api-first development easy.\nyou describe your api in an [openapi][openapi] (or [swagger][swagger]) specification with as much \ndetail as you want and connexion will guarantee that it works as you specified.\n\nit works either standalone, or in combination with any asgi or wsgi-compatible framework!\n\n<p align=\"center\">\n   <br>\n   <a href=\"https://connexion.readthedocs.io/en/latest/v3.html\"><strong>\ud83d\udce2 connexion 3 was recently released! read about the changes here \u00bb</strong></a>\n   <br>\n   <br>\n</p>\n\n## \u2728 features\n\nconnexion provides the following functionality **based on your specification**:\n\n- \ud83d\ude8f **automatic route registration**, no ``@route`` decorators needed\n- \ud83d\udd12 **authentication**, split from your application logic\n- \ud83d\udd0e **request and response validation** of headers, parameters, and body\n- \ud83d\udcec **parameter parsing and injection**, no request object needed\n- \ud83d\udce8 **response serialization**, you can return regular python objects\n- \ud83d\udcfa **a swagger ui console** with live documentation and \u2018try it out\u2019 feature\n- \ud83e\udde9 **pluggability**, in all dimensions\n\nconnexion also **helps you write your openapi specification** and develop against it by providing a command line interface which lets you test and mock your specification.\n\n```shell\n   connexion run openapi.yaml\n```\n\n <p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n## \ud83e\udef6 sponsors\n\n<a href=\"https://www.ml6.eu\"><img src=\"https://raw.githubusercontent.com/spec-first/connexion/main/docs/images/sponsors/ml6.png\" title=ml6 height=\"100\"></a>\n<a href=\"https://www.devmark.ai/fern/?utm_source=connexion&utm_loc=readme&utm_type=logo\"><img src=\"https://raw.githubusercontent.com/spec-first/connexion/main/docs/images/sponsors/fern.png\" title=fern height=\"100\"></a>\n\nsponsors help us dedicate time to maintain connexion. want to help?\n\n<a href=\"https://github.com/sponsors/spec-first\"><strong>explore the options \u00bb</strong></a>\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n## \ud83e\udea4 why connexion\n\nwith connexion, you write the spec first. connexion then calls your python\ncode, handling the mapping from the specification to the code. this\nincentivizes you to write the specification so that all of your\ndevelopers can understand what your api does, even before you write a\nsingle line of code.\n\nif multiple teams depend on your apis, you can use connexion to easily\nsend them the documentation of your api. this guarantees that your api will\nfollow the specification that you wrote. this is a different process from\nthe one offered by most frameworks, which generate a specification\n*after* you've written the code.\nsome disadvantages of generating specifications based on code is that\nthey often end up lacking details or mix your documentation with the implementation\nlogic of your application.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n## \u2692\ufe0f how to use\n\n### installation\n\nyou can install connexion using pip:\n\n```shell\n    $ pip install connexion\n```\n\nconnexion provides 'extras' with optional dependencies to unlock additional features:\n\n- `swagger-ui`: enables a swagger ui console for your application.\n- `uvicorn`: enables to run the your application using `app.run()` for\n  development instead of using an external asgi server.\n- `flask`: enables the `flaskapp` to build applications compatible with the flask\n  ecosystem.\n\nyou can install them as follows:\n\n```shell\n    $ pip install connexion[swagger-ui]\n    $ pip install connexion[swagger-ui,uvicorn].\n```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n### creating your application\n\nconnexion can be used either as a standalone application or as a middleware wrapping an existing\nasgi (or wsgi) application written using a different framework. the standalone application can be\nbuilt using either the `asyncapp` or `flaskapp`.\n\n- the `asyncapp` is a lightweight application with native asynchronous support. use it if you\n  are starting a new project and have no specific reason to use one of the other options.\n\n  ```python\n      from connexion import asyncapp\n\n      app = asyncapp(__name__)\n  ```\n\n- the `flaskapp` leverages the `flask` framework, which is useful if you're migrating from\n  connexion 2.x or you want to leverage the `flask` ecosystem.\n\n  ```python\n      from connexion import flaskapp\n\n      app = flaskapp(__name__)\n  ```\n\n- the `connexionmiddleware` can be wrapped around any existing asgi or wsgi application.\n  use it if you already have an application written in a different framework and want to add\n  functionality provided by connexion\n\n  ```python\n      from asgi_framework import app\n      from connexion import connexionmiddleware\n\n      app = app(__name__)\n      app = connexionmiddleware(app)\n  ```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n### registering an api\n\nwhile you can register individual routes on your application, connexion really shines when you\nregister an api defined by an openapi (or swagger) specification.\nthe operation described in your specification is automatically linked to your python view function via the ``operationid``\n\n**run.py**\n\n```python\n   def post_greeting(name: str, greeting: str):  # paramaeters are automatically unpacked\n       return f\"{greeting} {name}\", 200          # responses are automatically serialized\n\n   app.add_api(\"openapi.yaml\")\n```\n\n**openapi.yaml**\n\n```yaml\n   ...\n   paths:\n     /greeting/{name}:\n       post:\n         operationid: run.post_greeting\n         responses:\n           200:\n             content:\n               text/plain:\n                 schema:\n                   type: string\n         parameters:\n           - name: name\n             in: path\n             required: true\n             schema:\n               type: string\n           - name: greeting\n             in: query\n             required: true\n             schema:\n               type: string\n```\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n### running your application\n\nif you installed connexion using `connexion[uvicorn]`, you can run it using the\n`run` method. this is only recommended for development:\n\n```python\n    app.run()\n```\n\nin production, run your application using an asgi server such as `uvicorn`. if you defined your\n`app` in a python module called `run.py`, you can run it as follows:\n\n```shell\n    $ uvicorn run:app\n```\n\nor with gunicorn:\n\n```shell\n    $ gunicorn -k uvicorn.workers.uvicornworker run:app\n```\n\n----\n\nnow you're able to run and use connexion!\n\nsee the [examples][examples] folder for more examples.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n## \ud83d\udcdc changes\n\na full changelog is maintained on the [github releases page][releases].\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n## \ud83e\udd32 contributing\n\nwe welcome your ideas, issues, and pull requests. just follow the\nusual/standard github practices.\n\nfor easy development, install connexion using poetry with all extras, and\ninstall the pre-commit hooks to automatically run black formatting and static analysis checks.\n\n```shell\n    pip install poetry\n    poetry install --all-extras\n    pre-commit install\n```\n\nyou can find out more about how connexion works and where to apply your changes by having a look\nat our [architecture][architecture].\n\nunless you explicitly state otherwise in advance, any non trivial\ncontribution intentionally submitted for inclusion in this project by you\nto the steward of this repository shall be under the\nterms and conditions of apache license 2.0 written below, without any\nadditional copyright information, terms or conditions.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n## \ud83d\ude4f thanks\n\nwe'd like to thank all of connexion's contributors for working on this\nproject, swagger/openapi for their support, and zalando for originally developing and releasing connexion.\n\n## \ud83d\udcda recommended resources\n\nabout the advantages of working spec-first:\n\n* [blog atlassian][blog atlassian]\n* [api guidelines zalando][api guidelines zalando]\n* [blog ml6][blog ml6]\n* [blog zalando][blog zalando]\n\ntools to help you work spec-first:\n\n* [online swagger editor][online swagger editor]\n* [vs code plugin][vs code plugin]\n* [pycharm plugin][pycharm plugin]\n\n[openapi]: https://openapis.org/\n[swagger]: http://swagger.io/open-source-integrations/\n[blog atlassian]: https://www.atlassian.com/blog/technology/spec-first-api-development\n[blog ml6]: https://blog.ml6.eu/why-we-decided-to-help-maintain-connexion-c9f449877083\n[blog zalando]: https://engineering.zalando.com/posts/2016/12/crafting-effective-microservices-in-python.html\n[api guidelines zalando]: https://opensource.zalando.com/restful-api-guidelines/#api-first\n[online swagger editor]: https://editor.swagger.io/\n[vs code plugin]: https://marketplace.visualstudio.com/items?itemname=42crunch.vscode-openapi\n[pycharm plugin]: https://plugins.jetbrains.com/plugin/14837-openapi-swagger-editor\n[examples]: https://github.com/spec-first/connexion/blob/main/examples\n[releases]: https://github.com/spec-first/connexion/releases\n[architecture]: https://github.com/spec-first/connexion/blob/main/docs/images/architecture.png\n",
  "docs_url": null,
  "keywords": "api,swagger,openapi",
  "license": "apache-2.0",
  "name": "connexion",
  "package_url": "https://pypi.org/project/connexion/",
  "project_url": "https://pypi.org/project/connexion/",
  "project_urls": {
    "Homepage": "https://github.com/spec-first/connexion",
    "Repository": "https://github.com/spec-first/connexion"
  },
  "release_url": "https://pypi.org/project/connexion/3.0.5/",
  "requires_dist": [
    "Jinja2 (>=3.0.0)",
    "PyYAML (>=5.1)",
    "a2wsgi (>=1.7) ; extra == \"flask\"",
    "asgiref (>=3.4)",
    "flask[async] (>=2.2) ; extra == \"flask\"",
    "httpx (>=0.23)",
    "inflection (>=0.3.1)",
    "jsonschema (>=4.0.1)",
    "python-multipart (>=0.0.5)",
    "requests (>=2.27)",
    "starlette (>=0.27,<0.33)",
    "swagger-ui-bundle (>=1.1.0) ; extra == \"swagger-ui\"",
    "typing-extensions (>=4)",
    "uvicorn[standard] (>=0.17.6) ; extra == \"uvicorn\"",
    "werkzeug (>=2.2.1)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "connexion - api first applications with openapi/swagger",
  "version": "3.0.5",
  "releases": [],
  "developers": [
    "robbe.sneyders@gmail.com",
    "robbe_sneyders"
  ],
  "kwds": "logo_banner swagger openapi connexionmiddleware openapis",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_connexion",
  "homepage": "https://github.com/spec-first/connexion",
  "release_count": 154,
  "dependency_ids": [
    "pypi_a2wsgi",
    "pypi_asgiref",
    "pypi_flask",
    "pypi_httpx",
    "pypi_inflection",
    "pypi_jinja2",
    "pypi_jsonschema",
    "pypi_python_multipart",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_starlette",
    "pypi_swagger_ui_bundle",
    "pypi_typing_extensions",
    "pypi_uvicorn",
    "pypi_werkzeug"
  ]
}
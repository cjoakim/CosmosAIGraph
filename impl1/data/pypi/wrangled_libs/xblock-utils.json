{
  "classifiers": [
    "framework :: django :: 3.2",
    "framework :: django :: 4.2",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "xblock-utils: various utilities for xblocks\n###########################################\n\n|pypi-badge| |ci-badge| |codecov-badge| |doc-badge| |pyversions-badge|\n|license-badge| |status-badge|\n\npurpose\n*******\n\nthese are a collection of utility functions, base test classes and\ndocumentation that are useful for any xblocks.\n\n\n\u26a0\ufe0f deprecation notice \u26a0\ufe0f\n************************\n\n**effective date:** september 26, 2023\n\n**repository migration:**\nthis `xblock-utils` repository has been `deprecated <https://github.com/openedx/xblock-utils/issues/197>`_ as of september 26, 2023, and the code and documentation have been migrated to the `xblock <https://github.com/openedx/xblock>`_ repository.\n\nthis decision was made to streamline and consolidate our codebase.\n\nthe migration process was completed through this pull request: `pr #669 <https://github.com/openedx/xblock/pull/669>`_\n\n**archival**: we are going to archive the `xblock-utils` repository. this means that it will become read-only, and no further updates or changes will be accepted.\n\nwe appreciate your understanding and cooperation during this transition. if you have any questions or concerns, please don't hesitate to reach out to us through the `xblock` repository's issue tracker.\n\nthank you for your continued support and contributions to the open edx community.\n\n\ngetting started\n***************\n\ndeveloping\n==========\n\none time setup\n--------------\n.. code-block::\n\n  # clone the repository\n  git clone git@github.com:openedx/xblock-utils.git\n  cd xblock-utils\n\n  # set up a virtualenv with the same name as the repo and activate it\n  # here's how you might do that if you have virtualenvwrapper setup.\n  mkvirtualenv -p python3.8 xblock-utils\n\n\nevery time you develop something in this repo\n---------------------------------------------\n.. code-block::\n\n  # activate the virtualenv\n  # here's how you might do that if you're using virtualenvwrapper.\n  workon xblock-utils\n\n  # grab the latest code\n  git checkout master\n  git pull\n\n  # install/update the dev requirements\n  make requirements\n\n  # run the tests and quality checks (to verify the status before you make any changes)\n  make test \n\n  # make a new branch for your changes\n  git checkout -b <your_github_username>/<short_description>\n\n  # using your favorite editor, edit the code to make your change.\n  vim ...\n\n  # temporary until https://github.com/openedx/xblock-utils/issues/199 is resolved\n  mkdir var\n  touch var/workbench.log\n\n  # run your new tests\n  pytest ./path/to/new/tests\n\n  # run all the tests and quality checks\n  make test\n\n  # commit all your changes\n  git commit ...\n  git push\n\n  # open a pr and ask for review.\n\ndeploying\n=========\n\nthis component is automatically deployed to pypi whenever new github releases are made.\n\nto deploy this library.\n\n#. update the version in ``xblockutils/__init__.py`` based on semantic versioning.\n\n#. create a new github release with a tag matching the version.\n\n#. automation should build and deploy the version to pypi\n\ngetting help\n************\n\ndocumentation\n=============\n\nstart by going through `the documentation`_.  if you need more help see below.\n\n.. _the documentation: https://docs.openedx.org/projects/xblock-utils\n\nmore help\n=========\n\nif you're having trouble, we have discussion forums at\nhttps://discuss.openedx.org where you can connect with others in the\ncommunity.\n\nour real-time conversations are on slack. you can request a `slack\ninvitation`_, then join our `community slack workspace`_.\n\nfor anything non-trivial, the best path is to open an issue in this\nrepository with as many details about the issue you are facing as you\ncan provide.\n\nhttps://github.com/openedx/xblock-utils/issues\n\nfor more information about these options, see the `project getting help`_ page.\n\n.. _slack invitation: https://openedx.org/slack\n.. _community slack workspace: https://openedx.slack.com/\n.. _project getting help: https://openedx.org/getting-help\n\nlicense\n*******\n\nthe code in this repository is licensed under the agplv3 unless\notherwise noted.\n\nplease see `the license <license>`_ for details.\n\ncontributing\n************\n\ncontributions are very welcome.\nplease read `how to contribute <https://openedx.org/r/how-to-contribute>`_ for details.\n\nthis project is currently accepting all types of contributions, bug fixes,\nsecurity fixes, maintenance work, or new features.  however, please make sure\nto have a discussion about your new feature idea with the maintainers prior to\nbeginning development to maximize the chances of your change being accepted.\nyou can start a conversation by creating a new issue on this repo summarizing\nyour idea.\n\nthe open edx code of conduct\n****************************\n\nall community members are expected to follow the `open edx code of conduct`_.\n\n.. _open edx code of conduct: https://openedx.org/code-of-conduct/\n\npeople\n******\n\nthe assigned maintainers for this component and other project details may be\nfound in `backstage`_. backstage pulls this data from the ``catalog-info.yaml``\nfile in this repo.\n\n.. _backstage: https://backstage.openedx.org/catalog/default/component/xblock-utils\n\nreporting security issues\n*************************\n\nplease do not report security issues in public. please email security@openedx.org.\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/xblock-utils.svg\n    :target: https://pypi.python.org/pypi/xblock-utils/\n    :alt: pypi\n\n.. |ci-badge| image:: https://github.com/openedx/xblock-utils/workflows/python%20ci/badge.svg?branch=main\n    :target: https://github.com/openedx/xblock-utils/actions\n    :alt: ci\n\n.. |codecov-badge| image:: https://codecov.io/github/openedx/xblock-utils/coverage.svg?branch=main\n    :target: https://codecov.io/github/openedx/xblock-utils?branch=main\n    :alt: codecov\n\n.. |doc-badge| image:: https://readthedocs.org/projects/xblock-utils/badge/?version=latest\n    :target: https://docs.openedx.org/projects/xblock-utils/\n    :alt: documentation\n\n.. |pyversions-badge| image:: https://img.shields.io/pypi/pyversions/xblock-utils.svg\n    :target: https://pypi.python.org/pypi/xblock-utils/\n    :alt: supported python versions\n\n.. |license-badge| image:: https://img.shields.io/github/license/openedx/xblock-utils.svg\n    :target: https://github.com/openedx/xblock-utils/blob/main/license\n    :alt: license\n\n.. |status-badge| image:: https://img.shields.io/badge/status-maintained-brightgreen\n\nmore documentation\n******************\n\nstudioeditablexblockmixin\n=========================\n\n.. code:: python\n\n    from xblockutils.studio_editable import studioeditablexblockmixin\n\nthis mixin will automatically generate a working ``studio_view`` form\nthat allows content authors to edit the fields of your xblock. to use,\nsimply add the class to your base class list, and add a new class field\ncalled ``editable_fields``, set to a tuple of the names of the fields\nyou want your user to be able to edit.\n\n.. code:: python\n\n    @xblock.needs(\"i18n\")\n    class exampleblock(studioeditablexblockmixin, xblock):\n        ...\n        mode = string(\n            display_name=\"mode\",\n            help=\"determines the behaviour of this component. standard is recommended.\",\n            default='standard',\n            scope=scope.content,\n            values=('standard', 'crazy')\n        )\n        editable_fields = ('mode', 'display_name')\n\nthat's all you need to do. the mixin will read the optional\n``display_name``, ``help``, ``default``, and ``values`` settings from\nthe fields you mention and build the editor form as well as an ajax save\nhandler.\n\nif you want to validate the data, you can override\n``validate_field_data(self, validation, data)`` and/or\n``clean_studio_edits(self, data)`` - see the source code for details.\n\nsupported field types:\n\n* boolean:\n  ``field_name = boolean(display_name=\"field name\")``\n* float:\n  ``field_name = float(display_name=\"field name\")`` \n* integer:\n  ``field_name = integer(display_name=\"field name\")`` \n* string:\n  ``field_name = string(display_name=\"field name\")`` \n* string (multiline):\n  ``field_name = string(multiline_editor=true, resettable_editor=false)``\n* string (html):\n  ``field_name = string(multiline_editor='html', resettable_editor=false)``\n\nany of the above will use a dropdown menu if they have a pre-defined\nlist of possible values.\n\n* list of unordered unique values (i.e. sets) drawn from a small set of\n  possible values:\n  ``field_name = list(list_style='set', list_values_provider=some_method)``\n\n  - the ``list`` declaration must include the property ``list_style='set'`` to\n    indicate that the ``list`` field is being used with set semantics.\n  - the ``list`` declaration must also define a ``list_values_provider`` method\n    which will be called with the block as its only parameter and which must\n    return a list of possible values.\n* rudimentary support for dict, ordered list, and any other jsonfield-derived field types\n\n  - ``list_field = list(display_name=\"ordered list\", default=[])``\n  - ``dict_field = dict(display_name=\"normal dict\", default={})``\n\nsupported field options (all field types):\n\n* ``values`` can define a list of possible options, changing the ui element\n  to a select box. values can be set to any of the formats `defined in the\n  xblock source code <https://github.com/openedx/xblock/blob/master/xblock/fields.py>`__:\n\n  - a finite set of elements: ``[1, 2, 3]``\n  - a finite set of elements where the display names differ from the values::\n\n        [\n            {\"display_name\": \"always\", \"value\": \"always\"},\n            {\"display_name\": \"past due\", \"value\": \"past_due\"},\n        ]\n  - a range for floating point numbers with specific increments:\n    ``{\"min\": 0 , \"max\": 10, \"step\": .1}``\n  - a callable that returns one of the above. (note: the callable does\n    *not* get passed the xblock instance or runtime, so it cannot be a\n    normal member function)\n* ``values_provider`` can define a callable that accepts the xblock\n  instance as an argument, and returns a list of possible values in one\n  of the formats listed above.\n* ``resettable_editor`` - defaults to ``true``. set ``false`` to hide the\n  \"reset\" button used to return a field to its default value by removing\n  the field's value from the xblock instance.\n\nbasic screenshot: |screenshot 1|\n\nstudiocontainerxblockmixin\n==========================\n\n.. code:: python\n\n    from xblockutils.studio_editable import studiocontainerxblockmixin\n\nthis mixin helps to create xblocks that allow content authors to add,\nremove, or reorder child blocks. by removing any existing\n``author_view`` and adding this mixin, you'll get editable,\nre-orderable, and deletable child support in studio. to enable authors to\nadd arbitrary blocks as children, simply override ``author_edit_view`` \nand set ``can_add=true`` when calling ``render_children`` - see the \nsource code. to restrict authors so they can add only specific types of\nchild blocks or a limited number of children requires custom html.\n\nan example is the mentoring xblock: |screenshot 2|\n\nseleniumxblocktest\n==================\n\n.. code:: python\n\n    from xblockutils.base_test import seleniumxblocktest\n\nthis is a base class that you can use for writing selenium integration\ntests that are hosted in the xblock sdk (workbench).\n\nhere is an example:\n\n.. code:: python\n\n    class teststudentview(seleniumxblocktest):\n        \"\"\"\n        test the student view of mycoolxblock\n        \"\"\"\n        def setup(self):\n            super(teststudentview, self).setup()\n            self.set_scenario_xml('<mycoolblock display_name=\"test demo block\" field2=\"hello\" />')\n            self.element = self.go_to_view(\"student_view\")\n\n        def test_shows_field_2(self):\n            \"\"\"\n            the xblock should display the text value of field2.\n            \"\"\"\n            self.assertin(\"hello\", self.element.text)\n\nstudioeditablebasetest\n======================\n\n.. code:: python\n\n    from xblockutils.studio_editable_test import studioeditablebasetest\n\nthis is a subclass of ``seleniumxblocktest`` that adds a few helper\nmethods useful for testing the ``studio_view`` of any xblock using\n``studioeditablexblockmixin``.\n\nchild\\_isinstance\n=================\n\n.. code:: python\n\n    from xblockutils.helpers import child_isinstance\n\nif your xblock needs to find children/descendants of a particular\nclass/mixin, you should use\n\n.. code:: python\n\n    child_isinstance(self, child_usage_id, somexblockclassormixin)\n\nrather than calling\n\n.. code:: python\n\n    ``isinstance(self.runtime.get_block(child_usage_id), somexblockclassormixin)``.\n\non runtimes such as those in edx-platform, ``child_isinstance`` is\norders of magnitude faster.\n\n.. |screenshot 1| image:: https://cloud.githubusercontent.com/assets/945577/6341782/7d237966-bb83-11e4-9344-faa647056999.png\n.. |screenshot 2| image:: https://cloud.githubusercontent.com/assets/945577/6341803/d0195ec4-bb83-11e4-82f6-8052c9f70690.png\n\nxblockwithsettingsmixin\n=======================\n\nthis mixin provides access to instance-wide xblock-specific configuration settings.\nsee [wiki page](https://github.com/openedx/xblock-utils/wiki/settings-and-theme-support#accessing-xblock-specific-settings) for details\n\nthemablexblockmixin\n===================\n\nthis mixin provides xblock theming capabilities built on top of xblock-specific settings.\nsee [wiki page](https://github.com/openedx/xblock-utils/wiki/settings-and-theme-support#theming-support) for details\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "xblock-utils",
  "package_url": "https://pypi.org/project/xblock-utils/",
  "project_url": "https://pypi.org/project/xblock-utils/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/xblock-utils"
  },
  "release_url": "https://pypi.org/project/xblock-utils/4.0.0/",
  "requires_dist": [
    "Xblock[django]",
    "mako",
    "simplejson",
    "web-fragments"
  ],
  "requires_python": "",
  "summary": "various utilities for xblocks",
  "version": "4.0.0",
  "releases": [],
  "developers": [
    "edx",
    "oscm@edx.org"
  ],
  "kwds": "xblockutils xblock xblockwithsettingsmixin xblocks somexblockclassormixin",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_xblock_utils",
  "homepage": "https://github.com/openedx/xblock-utils",
  "release_count": 18,
  "dependency_ids": [
    "pypi_mako",
    "pypi_simplejson",
    "pypi_web_fragments",
    "pypi_xblock"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "|tests status| |coverage status|\n\npatroni: a template for postgresql ha with zookeeper, etcd or consul\n--------------------------------------------------------------------\n\nyou can find a version of this documentation that is searchable and also easier to navigate at `patroni.readthedocs.io <https://patroni.readthedocs.io>`__.\n\n\nthere are many ways to run high availability with postgresql; for a list, see the `postgresql documentation <https://wiki.postgresql.org/wiki/replication,_clustering,_and_connection_pooling>`__.\n\npatroni is a template for high availability (ha) postgresql solutions using python. for maximum accessibility, patroni supports a variety of distributed configuration stores like `zookeeper <https://zookeeper.apache.org/>`__, `etcd <https://github.com/coreos/etcd>`__, `consul <https://github.com/hashicorp/consul>`__ or `kubernetes <https://kubernetes.io>`__. database engineers, dbas, devops engineers, and sres who are looking to quickly deploy ha postgresql in datacenters - or anywhere else - will hopefully find it useful.\n\nwe call patroni a \"template\" because it is far from being a one-size-fits-all or plug-and-play replication system. it will have its own caveats. use wisely.\n\ncurrently supported postgresql versions: 9.3 to 16.\n\n**note to citus users**: starting from 3.0 patroni nicely integrates with the `citus <https://github.com/citusdata/citus>`__ database extension to postgres. please check the `citus support page <https://github.com/zalando/patroni/blob/master/docs/citus.rst>`__ in the patroni documentation for more info about how to use patroni high availability together with a citus distributed cluster.\n\n**note to kubernetes users**: patroni can run natively on top of kubernetes. take a look at the `kubernetes <https://github.com/zalando/patroni/blob/master/docs/kubernetes.rst>`__ chapter of the patroni documentation.\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n=================\nhow patroni works\n=================\n\npatroni originated as a fork of `governor <https://github.com/compose/governor>`__, the project from compose. it includes plenty of new features.\n\nfor an example of a docker-based deployment with patroni, see `spilo <https://github.com/zalando/spilo>`__, currently in use at zalando.\n\nfor additional background info, see:\n\n* `elephants on automatic: ha clustered postgresql with helm <https://www.youtube.com/watch?v=cftcvhfmgsy>`_, talk by josh berkus and oleksii kliukin at kubecon berlin 2017\n* `postgresql ha with kubernetes and patroni <https://www.youtube.com/watch?v=iruacgeg7qs>`__, talk by josh berkus at kubecon 2016 (video)\n* `feb. 2016 zalando tech blog post <https://tech.zalando.de/blog/zalandos-patroni-a-template-for-high-availability-postgresql/>`__\n\n==================\ndevelopment status\n==================\n\npatroni is in active development and accepts contributions. see our `contributing <https://github.com/zalando/patroni/blob/master/docs/contributing.rst>`__ section below for more details.\n\nwe report new releases information `here <https://github.com/zalando/patroni/releases>`__.\n\n=========\ncommunity\n=========\n\nthere are two places to connect with the patroni community: `on github <https://github.com/zalando/patroni>`__, via issues and prs, and on channel `#patroni <https://postgresteam.slack.com/archives/c9xpyg92a>`__ in the `postgresql slack <https://pgtreats.info/slack-invite>`__.  if you're using patroni, or just interested, please join us.\n\n===================================\ntechnical requirements/installation\n===================================\n\n**pre-requirements for mac os**\n\nto install requirements on a mac, run the following:\n\n::\n\n    brew install postgresql etcd haproxy libyaml python\n\n**psycopg**\n\nstarting from `psycopg2-2.8 <http://initd.org/psycopg/articles/2019/04/04/psycopg-28-released/>`__ the binary version of psycopg2 will no longer be installed by default. installing it from the source code requires c compiler and postgres+python dev packages.\nsince in the python world it is not possible to specify dependency as ``psycopg2 or psycopg2-binary`` you will have to decide how to install it.\n\nthere are a few options available:\n\n1. use the package manager from your distro\n\n::\n\n    sudo apt-get install python3-psycopg2  # install psycopg2 module on debian/ubuntu\n    sudo yum install python3-psycopg2      # install psycopg2 on redhat/fedora/centos\n\n2. specify one of `psycopg`, `psycopg2`, or `psycopg2-binary` in the list of dependencies when installing patroni with pip (see below).\n\n\n**general installation for pip**\n\npatroni can be installed with pip:\n\n::\n\n    pip install patroni[dependencies]\n\nwhere dependencies can be either empty, or consist of one or more of the following:\n\netcd or etcd3\n    `python-etcd` module in order to use etcd as dcs\nconsul\n    `python-consul` module in order to use consul as dcs\nzookeeper\n    `kazoo` module in order to use zookeeper as dcs\nexhibitor\n    `kazoo` module in order to use exhibitor as dcs (same dependencies as for zookeeper)\nkubernetes\n    `kubernetes` module in order to use kubernetes as dcs in patroni\nraft\n    `pysyncobj` module in order to use python raft implementation as dcs\naws\n    `boto3` in order to use aws callbacks\nall\n    all of the above (except psycopg family)\npsycopg3\n    `psycopg[binary]>=3.0.0` module\npsycopg2\n    `psycopg2>=2.5.4` module\npsycopg2-binary\n    `psycopg2-binary` module\n\nfor example, the command in order to install patroni together with psycopg3, dependencies for etcd as a dcs, and aws callbacks is:\n\n::\n\n    pip install patroni[psycopg3,etcd3,aws]\n\nnote that external tools to call in the replica creation or custom bootstrap scripts (i.e. wal-e) should be installed independently of patroni.\n\n=======================\nrunning and configuring\n=======================\n\nto get started, do the following from different terminals:\n::\n\n    > etcd --data-dir=data/etcd --enable-v2=true\n    > ./patroni.py postgres0.yml\n    > ./patroni.py postgres1.yml\n\nyou will then see a high-availability cluster start up. test different settings in the yaml files to see how the cluster's behavior changes. kill some of the components to see how the system behaves.\n\nadd more ``postgres*.yml`` files to create an even larger cluster.\n\npatroni provides an `haproxy <http://www.haproxy.org/>`__ configuration, which will give your application a single endpoint for connecting to the cluster's leader. to configure,\nrun:\n\n::\n\n    > haproxy -f haproxy.cfg\n\n::\n\n    > psql --host 127.0.0.1 --port 5000 postgres\n\n==================\nyaml configuration\n==================\n\ngo `here <https://github.com/zalando/patroni/blob/master/docs/settings.rst>`__ for comprehensive information about settings for etcd, consul, and zookeeper. and for an example, see `postgres0.yml <https://github.com/zalando/patroni/blob/master/postgres0.yml>`__.\n\n=========================\nenvironment configuration\n=========================\n\ngo `here <https://github.com/zalando/patroni/blob/master/docs/environment.rst>`__ for comprehensive information about configuring(overriding) settings via environment variables.\n\n===================\nreplication choices\n===================\n\npatroni uses postgres' streaming replication, which is asynchronous by default. patroni's asynchronous replication configuration allows for ``maximum_lag_on_failover`` settings. this setting ensures failover will not occur if a follower is more than a certain number of bytes behind the leader. this setting should be increased or decreased based on business requirements. it's also possible to use synchronous replication for better durability guarantees. see `replication modes documentation <https://github.com/zalando/patroni/blob/master/docs/replication_modes.rst>`__ for details.\n\n======================================\napplications should not use superusers\n======================================\n\nwhen connecting from an application, always use a non-superuser. patroni requires access to the database to function properly. by using a superuser from an application, you can potentially use the entire connection pool, including the connections reserved for superusers, with the ``superuser_reserved_connections`` setting. if patroni cannot access the primary because the connection pool is full, behavior will be undesirable.\n\n.. |tests status| image:: https://github.com/zalando/patroni/actions/workflows/tests.yaml/badge.svg\n   :target: https://github.com/zalando/patroni/actions/workflows/tests.yaml?query=branch%3amaster\n.. |coverage status| image:: https://coveralls.io/repos/zalando/patroni/badge.svg?branch=master\n   :target: https://coveralls.io/github/zalando/patroni?branch=master\n",
  "docs_url": null,
  "keywords": "etcd governor patroni postgresql postgres ha haproxy confd zookeeper exhibitor consul streaming replication kubernetes k8s",
  "license": "the mit license",
  "name": "patroni",
  "package_url": "https://pypi.org/project/patroni/",
  "project_url": "https://pypi.org/project/patroni/",
  "project_urls": {
    "Homepage": "https://github.com/zalando/patroni"
  },
  "release_url": "https://pypi.org/project/patroni/3.2.1/",
  "requires_dist": [
    "urllib3 !=1.21,>=1.19.1",
    "PyYAML",
    "click >=4.1",
    "prettytable >=0.7",
    "python-dateutil",
    "psutil >=2.0.0",
    "ydiff >=1.2.0",
    "python-etcd <0.5,>=0.4.3 ; extra == 'all'",
    "python-consul >=0.7.1 ; extra == 'all'",
    "boto3 ; extra == 'all'",
    "cryptography >=1.4 ; extra == 'all'",
    "pysyncobj >=0.3.8 ; extra == 'all'",
    "kazoo >=1.3.1 ; extra == 'all'",
    "boto3 ; extra == 'aws'",
    "python-consul >=0.7.1 ; extra == 'consul'",
    "python-etcd <0.5,>=0.4.3 ; extra == 'etcd'",
    "python-etcd <0.5,>=0.4.3 ; extra == 'etcd3'",
    "kazoo >=1.3.1 ; extra == 'exhibitor'",
    "psycopg2 >=2.5.4 ; extra == 'psycopg2'",
    "psycopg2-binary ; extra == 'psycopg2-binary'",
    "psycopg[binary] >=3.0.0 ; extra == 'psycopg3'",
    "pysyncobj >=0.3.8 ; extra == 'raft'",
    "cryptography >=1.4 ; extra == 'raft'",
    "kazoo >=1.3.1 ; extra == 'zookeeper'"
  ],
  "requires_python": "",
  "summary": "postgresql high-available orchestrator and cli",
  "version": "3.2.1",
  "releases": [],
  "developers": [
    "akukushkin@microsoft.com",
    "alexander_kukushkin",
    "polina.bungina@zalando.de"
  ],
  "kwds": "kubernetes availability postgres0 postgresteam zookeeper",
  "license_kwds": "the mit license",
  "libtype": "pypi",
  "id": "pypi_patroni",
  "homepage": "https://github.com/zalando/patroni",
  "release_count": 64,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_click",
    "pypi_cryptography",
    "pypi_kazoo",
    "pypi_prettytable",
    "pypi_psutil",
    "pypi_psycopg",
    "pypi_psycopg2",
    "pypi_psycopg2_binary",
    "pypi_pysyncobj",
    "pypi_python_consul",
    "pypi_python_dateutil",
    "pypi_python_etcd",
    "pypi_pyyaml",
    "pypi_urllib3",
    "pypi_ydiff"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# pycrdt-websocket\n\npycrdt-websocket is an async websocket connector for pycrdt.\n\n[![build status](https://github.com/jupyter-server/pycrdt-websocket/workflows/ci/badge.svg)](https://github.com/jupyter-server/pycrdt-websocket/actions)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n---\n\n**documentation**: <a href=\"https://davidbrochart.github.io/pycrdt-websocket\" target=\"_blank\">https://davidbrochart.github.io/pycrdt-websocket</a>\n\n**source code**: <a href=\"https://github.com/jupyter-server/pycrdt-websocket\" target=\"_blank\">https://github.com/jupyter-server/pycrdt-websocket</a>\n\n---\n\npycrdt-websocket is a python library for building websocket servers and clients that connect and synchronize shared documents.\nit can be used to create collaborative web applications.\n\nthe following diagram illustrates a typical architecture. the goal is to share a document among several clients.\n\neach client has an instance of a `doc`, representing their view of a document. a shared document also lives in a [room](./reference/room.md) on the server side. conceptually, a room can be seen as the place where clients collaborate on a document. the websocket to which a client connects points to the corresponding room through the endpoint path. in the example below, clients a and b connect to a websocket at path `room-1`, and thus both clients find themselves in a room called `room-1`. all the `doc` synchronization logic is taken care of by the [websocketprovider](./reference/websocket_provider.md).\n\neach update to a shared document can be persisted to disk using a [store](./reference/store.md), which can be a file or a database.\n```mermaid\nflowchart td\n    classdef room1 fill:#f96\n    classdef room2 fill:#bbf\n    a[client a<br>room-1]:::room1 <-->|websocket<br>provider| server(websocket server)\n    b[client b<br>room-1]:::room1 <-->|websocket<br>provider| server\n    c[client c<br>room-2]:::room2 <-->|websocket<br>provider| server\n    d[client d<br>room-2]:::room2 <-->|websocket<br>provider| server\n    server <--> room1((room-1<br>clients: a, b)):::room1\n    server <--> room2((room-2<br>clients: c, d)):::room2\n    a <-..-> room1\n    b <-..-> room1\n    c <-..-> room2\n    d <-..-> room2\n    room1 ---> store1[(store)]\n    room2 ---> store2[(store)]\n```\n",
  "docs_url": null,
  "keywords": "websocket,yjs",
  "license": "mit license  copyright (c) 2022 david brochart  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "pycrdt-websocket",
  "package_url": "https://pypi.org/project/pycrdt-websocket/",
  "project_url": "https://pypi.org/project/pycrdt-websocket/",
  "project_urls": {
    "Homepage": "https://github.com/jupyter-server/pycrdt-websocket",
    "Issues": "https://github.com/jupyter-server/pycrdt-websocket/issues",
    "Pypi": "https://pypi.org/project/pycrdt-websocket",
    "Source": "https://github.com/jupyter-server/pycrdt-websocket"
  },
  "release_url": "https://pypi.org/project/pycrdt-websocket/0.12.6/",
  "requires_dist": [
    "aiosqlite<1,>=0.18.0",
    "anyio<5,>=3.6.2",
    "pycrdt<0.9.0,>=0.8.1",
    "channels; extra == 'django'",
    "mkdocs; extra == 'docs'",
    "mkdocs-material; extra == 'docs'",
    "mkdocstrings-python; extra == 'docs'",
    "mypy; extra == 'test'",
    "pre-commit; extra == 'test'",
    "pytest; extra == 'test'",
    "pytest-asyncio; extra == 'test'",
    "uvicorn; extra == 'test'",
    "websockets>=10.0; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "websocket connector for pycrdt",
  "version": "0.12.6",
  "releases": [],
  "developers": [
    "david.brochart@gmail.com"
  ],
  "kwds": "websocket websocketprovider websocket_provider pycrdt yjs",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_pycrdt_websocket",
  "homepage": "",
  "release_count": 3,
  "dependency_ids": [
    "pypi_aiosqlite",
    "pypi_anyio",
    "pypi_channels",
    "pypi_mkdocs",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings_python",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pycrdt",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_uvicorn",
    "pypi_websockets"
  ]
}
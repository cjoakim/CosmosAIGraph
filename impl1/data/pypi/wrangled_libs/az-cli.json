{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "# az.cli\n\n[![pypi](https://img.shields.io/pypi/pyversions/az.cli)](https://pypi.python.org/pypi/az.cli)\n[![build status master](https://github.com/markwarneke/az.cli/workflows/build/badge.svg?branch=master)](https://github.com/markwarneke/az.cli/actions?query=workflow%3abuild)\n[![build status dev](https://github.com/markwarneke/az.cli/workflows/build/badge.svg?branch=dev)](https://github.com/markwarneke/az.cli/actions?query=workflow%3abuild)\n\npython [azure.cli.core](https://github.com/azure/azure-cli/blob/dev/src/azure-cli-core/azure/cli/core/__init__.py) interface to execute `az` [azure cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest) commands in python.\n\nthe method returns a named tuple `azresult = namedtuple('azresult', ['exit_code', 'result_dict', 'log'])`. the [`error_code`](https://docs.python.org/2/library/sys.html#sys.exit) where 0 == success. a `result_dict` containing successfull return as a python dictionary. on failure (`error_code` > 0) a log message inside `log` as a string.\n\n## usage\n\ninstall the package\n\n```bash\npip install az.cli\n```\n\nlogin using `az login` or [sign in using a service principal](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest#sign-in-using-a-service-principalt).\n\nunder the hood the package uses the [~/.azure](https://github.com/azure/azure-cli/blob/dev/src/azure-cli-core/azure/cli/core/_environment.py) folder to persist and retrieve config.\n\n## example\n\n```python\nfrom az.cli import az\n\n# azresult = namedtuple('azresult', ['exit_code', 'result_dict', 'log'])\nexit_code, result_dict, logs = az(\"group show -n test\")\n\n# on 0 (success) print result_dict, otherwise get info from `logs`\nif exit_code == 0:\n    print (result_dict)\nelse:\n    print(logs)\n```\n\n## interactive\n\nyou can run the command interactively to traverse the dictionary.\nnavigate to `src` and run `python3`.\nimport the library `from az.cli import az` and\u00a0run any command by executing the method `az(\"<my command>\")` to invoke azure cli.\n\n```python\n# cd src\n# python3\nfrom az.cli import az\n# on success, the `error_code` is 0 and the result_dict contains the output\naz(\"group list\") # list return tuple (exit_code, result_dict, log)\naz(\"group list\")[0] # 0\naz(\"group list\")[1] # print result_dict\naz(\"group list\")[1][0]['id'] # enumerate the id of the first element in dictionary\n\n# on error, the `error_code` will be != 1 and the log is present\naz(\"group show -n does-not-exsist\") # list return tuple (exit_code, result_dict, log)\naz(\"group show -n does-not-exsist\")[0] # 3\naz(\"group show -n does-not-exsist\")[2] # print the log\n```\n\n## build\n\n### local development\n\n- install [python3](https://www.python.org/downloads/)\n- install `requirements.txt` using `make init`\n\ni recommend to use [python3 virtual environments](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#installing-virtualenv).\n\n```bash\n# sets up environment\nmake env\n# installs requirements\nmake init\n```\n\n### docker\n\nto build the image run the following in order.\n\n```bash\n# runs docker build & create\nmake create\n```\n\n#### run\n\nafter the container is build & created you can run the `az.cli` interactivly.\n\n```bash\n# run docker run\nmake run\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "az.cli",
  "package_url": "https://pypi.org/project/az.cli/",
  "project_url": "https://pypi.org/project/az.cli/",
  "project_urls": {
    "Homepage": "https://github.com/MarkWarneke/Az.Cli"
  },
  "release_url": "https://pypi.org/project/az.cli/0.5/",
  "requires_dist": [
    "azure-cli"
  ],
  "requires_python": ">=3.7",
  "summary": "an interface to execute azure cli commands using python",
  "version": "0.5",
  "releases": [],
  "developers": [
    "mark_warneke",
    "warneke.mark@gmail.com"
  ],
  "kwds": "azure workflows cli workflow build",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_az.cli",
  "homepage": "https://github.com/markwarneke/az.cli",
  "release_count": 5,
  "dependency_ids": [
    "pypi_azure_cli"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development :: libraries"
  ],
  "description": "<img src=\"https://github.com/holoviz/datashader/raw/main/doc/_static/logo_horizontal.svg\" data-canonical-src=\"https://github.com/holoviz/datashader/raw/main/doc/_static/logo_horizontal.svg\" width=\"400\"/><br>\n\n-----------------\n\n# turn even the largest data into images, accurately\n\n|    |    |\n| --- | --- |\n| build status | [![build status](https://github.com/holoviz/datashader/workflows/tests/badge.svg)](https://github.com/holoviz/datashader/actions?query=workflow%3atests) |\n| coverage | [![codecov](https://codecov.io/gh/holoviz/datashader/branch/main/graph/badge.svg)](https://codecov.io/gh/holoviz/datashader) |\n| latest dev release | [![github tag](https://img.shields.io/github/tag/holoviz/datashader.svg?label=tag&colorb=11ccbb)](https://github.com/holoviz/datashader/tags) [![dev-site](https://img.shields.io/website-up-down-green-red/https/holoviz-dev.github.io/datashader.svg?label=dev%20website)](https://holoviz-dev.github.io/datashader/) |\n| latest release | [![github release](https://img.shields.io/github/release/holoviz/datashader.svg?label=tag&colorb=11ccbb)](https://github.com/holoviz/datashader/releases) [![pypi version](https://img.shields.io/pypi/v/datashader.svg?colorb=cc77dd)](https://pypi.python.org/pypi/datashader) [![datashader version](https://img.shields.io/conda/v/pyviz/datashader.svg?colorb=4488ff&style=flat)](https://anaconda.org/pyviz/datashader) [![conda-forge version](https://img.shields.io/conda/v/conda-forge/datashader.svg?label=conda%7cconda-forge&colorb=4488ff)](https://anaconda.org/conda-forge/datashader) [![defaults version](https://img.shields.io/conda/v/anaconda/datashader.svg?label=conda%7cdefaults&style=flat&colorb=4488ff)](https://anaconda.org/anaconda/datashader) |\n| python | [![python support](https://img.shields.io/pypi/pyversions/datashader.svg)](https://pypi.org/project/datashader/)\n| docs | [![gh-pages](https://img.shields.io/github/last-commit/holoviz/datashader/gh-pages.svg)](https://github.com/holoviz/datashader/tree/gh-pages) [![site](https://img.shields.io/website-up-down-green-red/http/datashader.org.svg)](http://datashader.org) |\n| support | [![discourse](https://img.shields.io/discourse/status?server=https%3a%2f%2fdiscourse.holoviz.org)](https://discourse.holoviz.org/) |\n\n-------\n\n[![history of os gis timeline](examples/assets/images/featured-badge-gh.svg)](https://makepath.com/history-of-open-source-gis/)\n\n-------\n\n## what is it?\n\ndatashader is a data rasterization pipeline for automating the process of\ncreating meaningful representations of large amounts of data. datashader\nbreaks the creation of images of data into 3 main steps:\n\n1. projection\n\n   each record is projected into zero or more bins of a nominal plotting grid\n   shape, based on a specified glyph.\n\n2. aggregation\n\n   reductions are computed for each bin, compressing the potentially large\n   dataset into a much smaller *aggregate* array.\n\n3. transformation\n\n   these aggregates are then further processed, eventually creating an image.\n\nusing this very general pipeline, many interesting data visualizations can be\ncreated in a performant and scalable way. datashader contains tools for easily\ncreating these pipelines in a composable manner, using only a few lines of code.\ndatashader can be used on its own, but it is also designed to work as\na pre-processing stage in a plotting library, allowing that library\nto work with much larger datasets than it would otherwise.\n\n## installation\n\ndatashader supports python 3.8, 3.9, 3.10, and 3.11 on linux, windows, or\nmac and can be installed with conda:\n\n    conda install datashader\n\nor with pip:\n\n    pip install datashader\n\nfor the best performance, we recommend using conda so that you are sure\nto get numerical libraries optimized for your platform. the latest\nreleases are avalailable on the pyviz channel `conda install -c pyviz\ndatashader` and the latest pre-release versions are avalailable on the\ndev-labelled channel `conda install -c pyviz/label/dev datashader`.\n\n## fetching examples\n\nonce you've installed datashader as above you can fetch the examples:\n\n    datashader examples\n    cd datashader-examples\n\nthis will create a new directory called\n<span class=\"title-ref\">datashader-examples</span> with all the data\nneeded to run the examples.\n\nto run all the examples you will need some extra dependencies. if you\ninstalled datashader **within a conda environment**, with that\nenvironment active run:\n\n    conda env update --file environment.yml\n\notherwise create a new environment:\n\n    conda env create --name datashader --file environment.yml\n    conda activate datashader\n\n## developer instructions\n\n1.  install python 3\n    [miniconda](https://docs.conda.io/en/latest/miniconda.html) or\n    [anaconda](https://www.anaconda.com/distribution/), if you don't\n    already have it on your system.\n\n2.  clone the datashader git repository if you do not already have it:\n\n        git clone git://github.com/holoviz/datashader.git\n\n3.  set up a new conda environment with all of the dependencies needed\n    to run the examples:\n\n        cd datashader\n        conda env create --name datashader --file ./examples/environment.yml\n        conda activate datashader\n\n4.  put the datashader directory into the python path in this\n    environment:\n\n        pip install --no-deps -e .\n\n## learning more\n\nafter working through the examples, you can find additional resources linked\nfrom the [datashader documentation](http://datashader.org),\nincluding api documentation and papers and talks about the approach.\n\n## some examples\n\n![usa census](examples/assets/images/usa_census.jpg)\n\n![nyc races](examples/assets/images/nyc_races.jpg)\n\n![nyc taxi](examples/assets/images/nyc_pickups_vs_dropoffs.jpg)\n",
  "docs_url": null,
  "keywords": "",
  "license": "new bsd",
  "name": "datashader",
  "package_url": "https://pypi.org/project/datashader/",
  "project_url": "https://pypi.org/project/datashader/",
  "project_urls": {
    "Homepage": "https://datashader.org",
    "Source": "https://github.com/holoviz/datashader"
  },
  "release_url": "https://pypi.org/project/datashader/0.16.0/",
  "requires_dist": [
    "colorcet",
    "dask",
    "multipledispatch",
    "numba",
    "numpy",
    "pandas",
    "param",
    "pillow",
    "pyct",
    "requests",
    "scipy",
    "toolz",
    "xarray",
    "bokeh >3.1 ; extra == 'all'",
    "codecov ; extra == 'all'",
    "dask-geopandas ; extra == 'all'",
    "fastparquet ; extra == 'all'",
    "flake8 ; extra == 'all'",
    "geodatasets ; extra == 'all'",
    "geopandas ; extra == 'all'",
    "graphviz ; extra == 'all'",
    "holoviews ; extra == 'all'",
    "matplotlib >=3.3 ; extra == 'all'",
    "nbconvert ; extra == 'all'",
    "nbformat ; extra == 'all'",
    "nbsite <0.9.0,>=0.8.2 ; extra == 'all'",
    "nbsmoke[verify] >0.5 ; extra == 'all'",
    "netcdf4 ; extra == 'all'",
    "networkx ; extra == 'all'",
    "numpydoc ; extra == 'all'",
    "panel >1.1 ; extra == 'all'",
    "pyarrow ; extra == 'all'",
    "pytest ; extra == 'all'",
    "pytest-benchmark ; extra == 'all'",
    "pytest-cov ; extra == 'all'",
    "python-graphviz ; extra == 'all'",
    "python-snappy ; extra == 'all'",
    "rasterio ; extra == 'all'",
    "rioxarray ; extra == 'all'",
    "scikit-image ; extra == 'all'",
    "shapely >=2.0.0 ; extra == 'all'",
    "spatialpandas ; extra == 'all'",
    "streamz ; extra == 'all'",
    "dask-geopandas ; extra == 'doc'",
    "geopandas ; extra == 'doc'",
    "shapely >=2.0.0 ; extra == 'doc'",
    "bokeh >3.1 ; extra == 'doc'",
    "geodatasets ; extra == 'doc'",
    "holoviews ; extra == 'doc'",
    "matplotlib >=3.3 ; extra == 'doc'",
    "panel >1.1 ; extra == 'doc'",
    "scikit-image ; extra == 'doc'",
    "spatialpandas ; extra == 'doc'",
    "networkx ; extra == 'doc'",
    "streamz ; extra == 'doc'",
    "fastparquet ; extra == 'doc'",
    "graphviz ; extra == 'doc'",
    "python-graphviz ; extra == 'doc'",
    "python-snappy ; extra == 'doc'",
    "rasterio ; extra == 'doc'",
    "nbsite <0.9.0,>=0.8.2 ; extra == 'doc'",
    "numpydoc ; extra == 'doc'",
    "dask-geopandas ; extra == 'examples'",
    "geopandas ; extra == 'examples'",
    "shapely >=2.0.0 ; extra == 'examples'",
    "bokeh >3.1 ; extra == 'examples'",
    "geodatasets ; extra == 'examples'",
    "holoviews ; extra == 'examples'",
    "matplotlib >=3.3 ; extra == 'examples'",
    "panel >1.1 ; extra == 'examples'",
    "scikit-image ; extra == 'examples'",
    "spatialpandas ; extra == 'examples'",
    "dask-geopandas ; extra == 'examples_extra'",
    "geopandas ; extra == 'examples_extra'",
    "shapely >=2.0.0 ; extra == 'examples_extra'",
    "bokeh >3.1 ; extra == 'examples_extra'",
    "geodatasets ; extra == 'examples_extra'",
    "holoviews ; extra == 'examples_extra'",
    "matplotlib >=3.3 ; extra == 'examples_extra'",
    "panel >1.1 ; extra == 'examples_extra'",
    "scikit-image ; extra == 'examples_extra'",
    "spatialpandas ; extra == 'examples_extra'",
    "networkx ; extra == 'examples_extra'",
    "streamz ; extra == 'examples_extra'",
    "fastparquet ; extra == 'examples_extra'",
    "graphviz ; extra == 'examples_extra'",
    "python-graphviz ; extra == 'examples_extra'",
    "python-snappy ; extra == 'examples_extra'",
    "rasterio ; extra == 'examples_extra'",
    "dask-geopandas ; extra == 'geopandas'",
    "geopandas ; extra == 'geopandas'",
    "shapely >=2.0.0 ; extra == 'geopandas'",
    "cupy ; extra == 'gpu_tests'",
    "cudf ; extra == 'gpu_tests'",
    "dask-cudf ; extra == 'gpu_tests'",
    "dask-geopandas ; extra == 'tests'",
    "geopandas ; extra == 'tests'",
    "shapely >=2.0.0 ; extra == 'tests'",
    "codecov ; extra == 'tests'",
    "geodatasets ; extra == 'tests'",
    "fastparquet ; extra == 'tests'",
    "flake8 ; extra == 'tests'",
    "nbconvert ; extra == 'tests'",
    "nbformat ; extra == 'tests'",
    "nbsmoke[verify] >0.5 ; extra == 'tests'",
    "netcdf4 ; extra == 'tests'",
    "pyarrow ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-benchmark ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "rasterio ; extra == 'tests'",
    "rioxarray ; extra == 'tests'",
    "scikit-image ; extra == 'tests'",
    "spatialpandas ; extra == 'tests'"
  ],
  "requires_python": ">=3.9",
  "summary": "data visualization toolchain based on aggregating into a grid",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "datashader_developers",
    "dev@datashader.org"
  ],
  "kwds": "svg logo_horizontal datashader badge image",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_datashader",
  "homepage": "https://datashader.org",
  "release_count": 42,
  "dependency_ids": [
    "pypi_bokeh",
    "pypi_codecov",
    "pypi_colorcet",
    "pypi_cudf",
    "pypi_cupy",
    "pypi_dask",
    "pypi_dask_cudf",
    "pypi_dask_geopandas",
    "pypi_fastparquet",
    "pypi_flake8",
    "pypi_geodatasets",
    "pypi_geopandas",
    "pypi_graphviz",
    "pypi_holoviews",
    "pypi_matplotlib",
    "pypi_multipledispatch",
    "pypi_nbconvert",
    "pypi_nbformat",
    "pypi_nbsite",
    "pypi_nbsmoke",
    "pypi_netcdf4",
    "pypi_networkx",
    "pypi_numba",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_pandas",
    "pypi_panel",
    "pypi_param",
    "pypi_pillow",
    "pypi_pyarrow",
    "pypi_pyct",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_python_graphviz",
    "pypi_python_snappy",
    "pypi_rasterio",
    "pypi_requests",
    "pypi_rioxarray",
    "pypi_scikit_image",
    "pypi_scipy",
    "pypi_shapely",
    "pypi_spatialpandas",
    "pypi_streamz",
    "pypi_toolz",
    "pypi_xarray"
  ]
}
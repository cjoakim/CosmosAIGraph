{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure event grid client library for python\n\nazure event grid is a fully-managed intelligent event routing service that allows for uniform event consumption using a publish-subscribe model.\n\n[source code][python-eg-src]\n| [package (pypi)][python-eg-pypi]\n| [package (conda)](https://anaconda.org/microsoft/azure-eventgrid/)\n| [api reference documentation][python-eg-ref-docs]\n| [product documentation][python-eg-product-docs]\n| [samples][python-eg-samples]\n| [changelog][python-eg-changelog]\n\n## getting started\n\n### prerequisites\n* python 3.7 or later is required to use this package.\n* you must have an [azure subscription][azure_subscription] and an event grid topic resource to use this package. follow this [step-by-step tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart-portal) to register the event grid resource provider and create event grid topics using the [azure portal](https://portal.azure.com/). there is a [similar tutorial](https://docs.microsoft.com/azure/event-grid/custom-event-quickstart) using [azure cli](https://docs.microsoft.com/cli/azure).\n\n\n### install the package\ninstall the azure event grid client library for python with [pip][pip]:\n\n```bash\npip install azure-eventgrid\n```\n\n* an existing event grid topic or domain is required. you can create the resource using [azure portal][azure_portal_create_eg_resource] or [azure cli][azure_cli_link]\n\nif you use azure cli, replace `<resource-group-name>` and `<resource-name>` with your own unique names.\n\n#### create an event grid topic\n\n```\naz eventgrid topic --create --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n#### create an event grid domain\n\n```\naz eventgrid domain --create --location <location> --resource-group <resource-group-name> --name <resource-name>\n```\n\n### authenticate the client\nin order to interact with the event grid service, you will need to create an instance of a client.\nan **endpoint** and **credential** are necessary to instantiate the client object.\n\n#### using azure active directory (aad)\n\nazure event grid provides integration with azure active directory (azure ad) for identity-based authentication of requests. with azure ad, you can use role-based access control (rbac) to grant access to your azure event grid resources to users, groups, or applications.\n\nto send events to a topic or domain with a `tokencredential`, the authenticated identity should have the \"eventgrid data sender\" role assigned.\n\nwith the `azure-identity` package, you can seamlessly authorize requests in both development and production environments. to learn more about azure active directory, see the [`azure-identity` readme](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md).\n\nfor example, you can use `defaultazurecredential` to construct a client which will authenticate using azure active directory:\n\n<!-- snippet:sample_authentication.client_auth_with_token_cred -->\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.eventgrid import eventgridpublisherclient, eventgridevent\n\ndefault_az_credential = defaultazurecredential()\nendpoint = os.environ[\"eventgrid_topic_endpoint\"]\nclient = eventgridpublisherclient(endpoint, default_az_credential)\n```\n\n<!-- end snippet -->\n\n#### looking up the endpoint\nyou can find the topic endpoint within the event grid topic resource on the azure portal. this will look like:\n`\"https://<event-grid-topic-name>.<topic-location>.eventgrid.azure.net/api/events\"`\n\n#### create the client with azurekeycredential\n\nto use an access key as the `credential` parameter,\npass the key as a string into an instance of [azurekeycredential][azure-key-credential].\n\n> **note:** the access key may be found in the azure portal in the \"access keys\" menu of the event grid topic resource.  they may also be obtained via the azure cli, or the `azure-mgmt-eventgrid` library. a guide for getting access keys can be found [here](https://docs.microsoft.com/azure/event-grid/get-access-keys).\n\n<!-- snippet:sample_authentication.client_auth_with_key_cred -->\n\n```python\nimport os\nfrom azure.eventgrid import eventgridpublisherclient\nfrom azure.core.credentials import azurekeycredential\n\ntopic_key = os.environ[\"eventgrid_topic_key\"]\nendpoint = os.environ[\"eventgrid_topic_endpoint\"]\n\ncredential_key = azurekeycredential(topic_key)\nclient = eventgridpublisherclient(endpoint, credential_key)\n```\n\n<!-- end snippet -->\n\n> **note:** a client may also be authenticated via sas signature, using the `azuresascredential`. a sample demonstrating this, is available [here][python-eg-sample-send-using-sas] ([async_version][python-eg-sample-send-using-sas-async]).\n\n> **note:** the `generate_sas` method can be used to generate a shared access signature. a sample demonstrating this can be seen [here][python-eg-generate-sas].\n\n## key concepts\n\n### topic\na **[topic](https://docs.microsoft.com/azure/event-grid/concepts#topics)** is a channel within the eventgrid service to send events. the event schema that a topic accepts is decided at topic creation time. if events of a schema type are sent to a topic that requires a different schema type, errors will be raised.\n\n### domain\nan event **[domain](https://docs.microsoft.com/azure/event-grid/event-domains)** is a management tool for large numbers of event grid topics related to the same application. they allow you to publish events to thousands of topics. domains also give you authorization and authentication control over each topic. for more information, visit [event domain overview](https://docs.microsoft.com/azure/event-grid/event-domains).\n\nwhen you create an event domain, a publishing endpoint for this domain is made available to you. this process is similar to creating an event grid topic. the only difference is that, when publishing to a domain, you must specify the topic within the domain that you'd like the event to be delivered to.\n\n### event schemas\nan **[event](https://docs.microsoft.com/azure/event-grid/concepts#events)** is the smallest amount of information that fully describes something that happened in the system. when a custom topic or domain is created, you must specify the schema that will be used when publishing events.\n\nevent grid supports multiple schemas for encoding events.\n\n#### event grid schema\nwhile you may configure your topic to use a [custom schema](https://docs.microsoft.com/azure/event-grid/input-mappings), it is more common to use the already-defined event grid schema. see the specifications and requirements [here](https://docs.microsoft.com/azure/event-grid/event-schema).\n\n#### cloudevents v1.0 schema\nanother option is to use the cloudevents v1.0 schema. [cloudevents](https://cloudevents.io/) is a cloud native computing foundation project which produces a specification for describing event data in a common way. the service summary of cloudevents can be found [here](https://docs.microsoft.com/azure/event-grid/cloud-event-schema).\n\n### eventgridpublisherclient\n`eventgridpublisherclient` provides operations to send event data to a topic hostname specified during client initialization.\n\nregardless of the schema that your topic or domain is configured to use, `eventgridpublisherclient` will be used to publish events to it. use the `send` method publishing events.\n\nthe following formats of events are allowed to be sent:\n- a list or a single instance of strongly typed eventgridevents.\n- a dict representation of a serialized eventgridevent object.\n- a list or a single instance of strongly typed cloudevents.\n- a dict representation of a serialized cloudevent object.\n\n- a dict representation of any custom schema.\n\nplease have a look at the [samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/samples) for detailed examples.\n\n\n **note:** it is important to know if your topic supports cloudevents or eventgridevents before publishing. if you send to a topic that does not support the schema of the event you are sending, send() will throw an exception.\n\n### system topics\na **[system topic](https://docs.microsoft.com/azure/event-grid/system-topics)** in event grid represents one or more events published by azure services such as azure storage or azure event hubs. for example, a system topic may represent all blob events or only blob creation and blob deletion events published for a specific storage account.\n\nthe names of the various event types for the system events published to azure event grid are available in `azure.eventgrid.systemeventnames`.\nfor complete list of recognizable system topics, visit [system topics](https://docs.microsoft.com/azure/event-grid/system-topics).\n\n for more information about the key concepts on event grid, see [concepts in azure event grid][publisher-service-doc].\n\n## event grid on kubernetes with azure arc\n\nevent grid on kubernetes with azure arc is an offering that allows you to run event grid on your own kubernetes cluster. this capability is enabled by the use of azure arc enabled kubernetes. through azure arc enabled kubernetes, a supported kubernetes cluster connects to azure. once connected, you are able to install event grid on it. learn more about it [here](https://docs.microsoft.com/azure/event-grid/kubernetes/overview).\n\n### support for cncf cloud events\n\nstarting with v4.7.0, this package also supports publishing a cncf cloud event from https://pypi.org/project/cloudevents/. you would be able to pass a cloudevent object from this library to the `send` api.\n\n```python\n\nfrom cloudevents.http import cloudevent\n\nevent = cloudevent(...)\n\nclient.send(event)\n```\n\n## examples\n\nthe following sections provide several code snippets covering some of the most common event grid tasks, including:\n\n* [send an event grid event](#send-an-event-grid-event)\n* [send a cloud event](#send-a-cloud-event)\n* [send multiple events](#send-multiple-events)\n* [send events as dictionaries](#send-events-as-dictionaries)\n* [consume a payload from storage queue](#consume-from-storage-queue)\n* [consume from servicebus](#consume-from-servicebus)\n\n### send an event grid event\n\nthis example publishes an event grid event.\n\n```python\nimport os\nfrom azure.core.credentials import azurekeycredential\nfrom azure.eventgrid import eventgridpublisherclient, eventgridevent\n\nkey = os.environ[\"eg_access_key\"]\nendpoint = os.environ[\"eg_topic_hostname\"]\n\nevent = eventgridevent(\n    data={\"team\": \"azure-sdk\"},\n    subject=\"door1\",\n    event_type=\"azure.sdk.demo\",\n    data_version=\"2.0\"\n)\n\ncredential = azurekeycredential(key)\nclient = eventgridpublisherclient(endpoint, credential)\n\nclient.send(event)\n```\n\n### send a cloud event\n\nthis example publishes a cloud event.\n\n```python\nimport os\nfrom azure.core.credentials import azurekeycredential\nfrom azure.core.messaging import cloudevent\nfrom azure.eventgrid import eventgridpublisherclient\n\nkey = os.environ[\"cloud_access_key\"]\nendpoint = os.environ[\"cloud_topic_hostname\"]\n\nevent = cloudevent(\n    type=\"azure.sdk.sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\n\ncredential = azurekeycredential(key)\nclient = eventgridpublisherclient(endpoint, credential)\n\nclient.send(event)\n```\n\n### send multiple events\n\nit is possible to send events as a batch when sending multiple events to a topic or a domain. this example sends a list of cloudevents using the send method.\n\n**warning:** when sending a list of multiple events at one time, iterating over and sending each event will not result in optimal performance. for best performance, it is highly recommended to send a list of events.\n\n```python\nimport os\nfrom azure.core.credentials import azurekeycredential\nfrom azure.core.messaging import cloudevent\nfrom azure.eventgrid import eventgridpublisherclient\n\nkey = os.environ[\"cloud_access_key\"]\nendpoint = os.environ[\"cloud_topic_hostname\"]\n\nevent0 = cloudevent(\n    type=\"azure.sdk.sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team\": \"azure-sdk\"}\n)\nevent1 = cloudevent(\n    type=\"azure.sdk.sample\",\n    source=\"https://egsample.dev/sampleevent\",\n    data={\"team2\": \"azure-eventgrid\"}\n)\n\nevents = [event0, event1]\n\ncredential = azurekeycredential(key)\nclient = eventgridpublisherclient(endpoint, credential)\n\nclient.send(events)\n```\n\n### send events as dictionaries\n\na dict representation of respective serialized models can also be used to publish cloudevent(s) or eventgridevent(s) apart from the strongly typed objects.\n\nuse a dict-like representation to send to a topic with custom schema as shown below.\n\n```python\nimport os\nimport uuid\nimport datetime as dt\nfrom msrest.serialization import utc\nfrom azure.core.credentials import azurekeycredential\nfrom azure.eventgrid import eventgridpublisherclient\n\nkey = os.environ[\"custom_schema_access_key\"]\nendpoint = os.environ[\"custom_schema_topic_hostname\"]\n\nevent = custom_schema_event = {\n    \"customsubject\": \"sample\",\n    \"customeventtype\": \"sample.event\",\n    \"customdataversion\": \"2.0\",\n    \"customid\": uuid.uuid4(),\n    \"customeventtime\": dt.datetime.now(utc()).isoformat(),\n    \"customdata\": \"sample data\"\n    }\n\ncredential = azurekeycredential(key)\nclient = eventgridpublisherclient(endpoint, credential)\n\nclient.send(event)\n```\n\n### consume from storage queue\n\nthis example consumes a message received from storage queue and deserializes it to a cloudevent object.\n\n```python\nfrom azure.core.messaging import cloudevent\nfrom azure.storage.queue import queueserviceclient, binarybase64decodepolicy\nimport os\nimport json\n\n# all types of cloudevents below produce same deserializedevent\nconnection_str = os.environ['storage_queue_conn_str']\nqueue_name = os.environ['storage_queue_name']\n\nwith queueserviceclient.from_connection_string(connection_str) as qsc:\n    payload =  qsc.get_queue_client(\n        queue=queue_name,\n        message_decode_policy=binarybase64decodepolicy()\n        ).peek_messages()\n\n    ## deserialize payload into a list of typed events\n    events = [cloudevent.from_dict(json.loads(msg.content)) for msg in payload]\n```\n\n### consume from servicebus\n\nthis example consumes a payload message received from servicebus and deserializes it to an eventgridevent object.\n\n```python\nfrom azure.eventgrid import eventgridevent\nfrom azure.servicebus import servicebusclient\nimport os\nimport json\n\n# all types of eventgridevents below produce same deserializedevent\nconnection_str = os.environ['service_bus_conn_str']\nqueue_name = os.environ['service_bus_queue_name']\n\nwith servicebusclient.from_connection_string(connection_str) as sb_client:\n    payload =  sb_client.get_queue_receiver(queue_name).receive_messages()\n\n    ## deserialize payload into a list of typed events\n    events = [eventgridevent.from_dict(json.loads(next(msg.body).decode('utf-8'))) for msg in payload]\n```\n\n## distributed tracing with eventgrid\n\nyou can use opentelemetry for python as usual with eventgrid since it's compatible with azure-core tracing integration.\n\nhere is an example of using opentelemetry to trace sending a cloudevent.\n\nfirst, set opentelemetry as enabled tracing plugin for eventgrid.\n\n```python\nfrom azure.core.settings import settings\nfrom azure.core.tracing.ext.opentelemetry_span import opentelemetryspan\n\nsettings.tracing_implementation = opentelemetryspan\n```\n\nregular open telemetry usage from here. see [opentelemetry](https://github.com/open-telemetry/opentelemetry-python) for details.\nthis example uses a simple console exporter to export the traces. any exporter can be used here including `azure-monitor-opentelemetry-exporter`, `jaeger`, `zipkin` etc.\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import tracerprovider\nfrom opentelemetry.sdk.trace.export import consolespanexporter\nfrom opentelemetry.sdk.trace.export import simplespanprocessor  # this requires opentelemetry >= 1.0.0\n\n# simple console exporter\nexporter = consolespanexporter()\n\ntrace.set_tracer_provider(tracerprovider())\ntracer = trace.get_tracer(__name__)\ntrace.get_tracer_provider().add_span_processor(\n    simplespanprocessor(exporter)\n)\n```\n\nonce the `tracer` and `exporter` are set, please follow the example below to start collecting traces while using the `send` method from the `eventgridpublisherclient` to send a cloudevent object.\n\n```python\nimport os\nfrom azure.eventgrid import eventgridpublisherclient\nfrom azure.core.messaging import cloudevent\nfrom azure.core.credentials import azurekeycredential\n\nhostname = os.environ['cloud_topic_hostname']\nkey = azurekeycredential(os.environ['cloud_access_key'])\ncloud_event = cloudevent(\n    source = 'demo',\n    type = 'sdk.demo',\n    data = {'test': 'hello'},\n)\nwith tracer.start_as_current_span(name=\"myapplication\"):\n    client = eventgridpublisherclient(hostname, key)\n    client.send(cloud_event)\n```\n\n## troubleshooting\n\n- enable `azure.eventgrid` logger to collect traces from the library.\n\n### general\nevent grid client library will raise exceptions defined in [azure core][azure_core_exceptions].\n\n### logging\nthis library uses the standard\n[logging][python_logging] library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\n### optional configuration\n\noptional keyword arguments can be passed in at the client and per-operation level.\nthe azure-core [reference documentation][azure_core_ref_docs]\ndescribes available configurations for retries, logging, transport protocols, and more.\n\n## next steps\n\nthe following section provides several code snippets illustrating common patterns used in the event grid python api.\n\n### more sample code\n\nthese code samples show common champion scenario operations with the azure event grid client library.\n\n* generate shared access signature: [sample_generate_sas.py][python-eg-generate-sas]\n\n* authenticate the client: [sample_authentication.py][python-eg-auth] ([async_version][python-eg-auth-async])\n\n* publish events to a topic using sas: [sample_publish_events_to_a_topic_using_sas_credential_async.py][python-eg-sample-send-using-sas] ([async_version][python-eg-sample-send-using-sas-async])\n* publish event grid events to a topic: [sample_publish_eg_events_to_a_topic.py][python-eg-sample-eg-event] ([async_version][python-eg-sample-eg-event-async])\n* publish eventgrid events to a domain topic: [sample_publish_eg_events_to_a_domain_topic.py][python-eg-sample-eg-event-to-domain] ([async_version][python-eg-sample-eg-event-to-domain-async])\n* publish a cloud event: [sample_publish_events_using_cloud_events_1.0_schema.py][python-eg-sample-send-cloudevent] ([async_version][python-eg-sample-send-cloudevent-async])\n* publish a custom schema: [sample_publish_custom_schema_to_a_topic.py][python-eg-publish-custom-schema] ([async_version][python-eg-publish-custom-schema-async])\n\nthe following samples cover publishing and consuming `dict` representations of eventgridevents and cloudevents.\n* publish eventgridevent as dict like representation: [sample_publish_eg_event_using_dict.py][python-eg-sample-send-eg-as-dict] ([async_version][python-eg-sample-send-eg-as-dict-async])\n\n* publish cloudevent as dict like representation: [sample_publish_cloud_event_using_dict.py][python-eg-sample-send-cloudevent-as-dict] ([async_version][python-eg-sample-send-cloudevent-as-dict-async])\n\n* consume a custom payload of raw cloudevent data: [sample_consume_custom_payload.py][python-eg-sample-consume-custom-payload]\n\nmore samples can be found [here][python-eg-samples].\n\n* more samples related to the send scenario can be seen [here][python-eg-publish-samples].\n* to see more samples related to consuming a payload from different messaging services as a typed object, please visit [consume samples][python-eg-consume-samples]\n\n### additional documentation\n\nfor more extensive documentation on azure event grid, see the [event grid documentation][python-eg-product-docs] on docs.microsoft.com.\n\n## contributing\nthis project welcomes contributions and suggestions. most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit [cla.microsoft.com][cla].\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct]. for more information see the [code of conduct faq][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- links -->\n\n[azure_cli_link]: https://pypi.org/project/azure-cli/\n[python-eg-src]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/\n[python-eg-pypi]: https://pypi.org/project/azure-eventgrid\n[python-eg-product-docs]: https://docs.microsoft.com/azure/event-grid/overview\n[python-eg-ref-docs]: https://azuresdkdocs.blob.core.windows.net/$web/python/azure-eventgrid/latest/index.html\n[publisher-service-doc]: https://docs.microsoft.com/azure/event-grid/concepts\n[python-eg-samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/samples\n[python-eg-changelog]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/eventgrid/azure-eventgrid/changelog.md\n[pip]: https://pypi.org/project/pip/\n\n[azure_portal_create_eg_resource]: https://ms.portal.azure.com/#blade/hubsextension/browseresource/resourcetype/microsoft.eventgrid%2ftopics\n[azure-key-credential]: https://aka.ms/azsdk/python/core/azurekeycredential\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[python_logging]: https://docs.python.org/3/library/logging.html\n[azure_core_ref_docs]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/core/azure-core#configurations\n[azure_subscription]: https://azure.microsoft.com/free/\n\n[python-eg-auth]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_authentication.py\n[python-eg-generate-sas]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_generate_sas.py\n[python-eg-sample-send-using-sas]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_to_a_topic_using_sas_credential.py\n[python-eg-sample-eg-event]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_topic.py\n[python-eg-sample-eg-event-to-domain]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_events_to_a_domain.py\n[python-eg-sample-send-cloudevent]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_events_using_cloud_events_1.0_schema.py\n[python-eg-publish-custom-schema]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_custom_schema_to_a_topic.py\n[python-eg-sample-send-eg-as-dict]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_eg_event_using_dict.py\n[python-eg-sample-send-cloudevent-as-dict]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_publish_cloud_event_using_dict.py\n\n[python-eg-auth-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_authentication_async.py\n[python-eg-sample-send-using-sas-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_to_a_topic_using_sas_credential_async.py\n[python-eg-sample-eg-event-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_topic_async.py\n[python-eg-sample-eg-event-to-domain-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_events_to_a_domain_async.py\n[python-eg-sample-send-cloudevent-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_events_using_cloud_events_1.0_schema_async.py\n[python-eg-publish-custom-schema-async]:https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_custom_schema_to_a_topic_async.py\n[python-eg-sample-send-eg-as-dict-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_eg_event_using_dict_async.py\n[python-eg-sample-send-cloudevent-as-dict-async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/async_samples/sample_publish_cloud_event_using_dict_async.py\n\n[python-eg-publish-samples]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/publish_samples\n[python-eg-consume-samples]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/consume_samples\n[python-eg-sample-consume-custom-payload]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/samples/sync_samples/sample_consume_custom_payload.py\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n# release history\n\n## 4.16.0 (2023-11-08)\n\n### features added\n\n- added new enum values to `systemeventnames` related to azure resource notifications.\n\n## 4.15.0 (2023-10-12)\n\n### features added\n\n- added new enum values to `systemeventnames` related to azure communication services and azure resource notifications.\n\n## 4.14.0 (2023-09-13)\n\n### features added\n\n- added new enum values to `systemeventnames` related to azure app configuration and azure eventgrid.\n\n## 4.13.0 (2023-06-08)\n\n### features added\n\n- added new enum values to `systemeventnames` related to azure container services.\n\n## 4.12.0b1 (2023-05-22)\n\n### features added\n\n- added a new eventgridclient that supports `publish_cloud_events`, `receive_cloud_events`, `acknowledge_cloud_events` , `release_cloud_events`, and `reject_cloud_events` operations.\n- added new models to support these new operations on eventgridclient.\n\n## 4.11.0 (2023-05-09)\n\n### features added\n\n- added new enum values to `systemeventnames` related to storage tasks, azure communication services and azure healthcareapis.\n\n## 4.10.0 (2023-04-11)\n\n### features added\n\n- added new enum values to `systemeventnames` related to azure communication services, databox and apimanagementgateway apis.\n\n### bugs fixed\n\n- `systemeventnames` enums for apimanagement were incorrectly capitalized, changed `api` to `api`.\n\n### other changes\n\n- removed `msrest` dependency and `six` dependency\n- added `isodate` dependency\n\n## 4.9.1 (2022-11-08)\n\n- this version and all future versions will require python 3.7+.\n\n### features added\n\n- added new enum values to `systemeventnames` related to health care apis.\n\n## 4.9.0 (2022-07-05)\n\n### features added\n\n- added support for publishing events to a channel.\n\n## 4.9.0b1 (2022-04-07)\n\n### features added\n\n- added support for publishing events to a channel.\n\n## 4.8.0 (2022-04-06)\n\n- this version and all future versions will require python 3.6+. python 2.7 is no longer supported.\n\n### features added\n\n- added new enum values to `systemeventnames` related to health care apis.\n\n## 4.7.1 (2021-11-18)\n\n### bugs fixed\n\n- the `send` api will raise on exceptions.\n\n## 4.7.0 (2021-11-09)\n\n### features added\n\n- added support for publishing native cncf cloudevents (https://pypi.org/project/cloudevents/).\n\n## 4.6.0 (2021-10-05)\n\n### features added\n\n- added new enum values to `systemevents`.\n\n## 4.5.0 (2021-08-10)\n\n### features added\n\n- added a new enum value `microsoft.containerservice.newkubernetesversionavailable` to `systemevents`.\n- added a `from_json` method which now accepts storage queuemessage, eventhub's eventdata or servicebusmessage or simply json bytes to return an `eventgridevent`\n\n## 4.4.0 (2021-07-19)\n\n- bumped `msrest` dependency to `0.6.21` to align with mgmt package.\n\n### features added\n\n- `eventgridpublisherclient` now supports azure active directory (aad) for authentication.\n\n## 4.3.0 (2021-06-09)\n\n  **new features**\n  - added new event names related to blob inventory to the `systemeventnames` enum.\n\n  **bug fixes**\n  - replaced the `servicebusdeadlettermessagesavailablewithnolistenereventname` with the right value.\n\n## 4.2.0 (2021-05-12)\n\n  **new features**\n  - added new event names to the `systemeventnames` enum.\n\n## 4.1.1 (2021-04-07)\n\n  **bug fixes**\n  - improved the `repr` on `eventgridevent` to show more meaningful text.\n\n## 4.1.0 (2021-03-23)\n\n  **new features**\n  - added new systemeventnames `acschatthreadparticipantremovedeventname`, `acschatthreadparticipantaddedeventname` and `acsrecordingfilestatusupdatedeventname`.\n\n## 4.0.0 (2021-03-09)\n\n  **note:** this is the first stable release of our efforts to create a user-friendly and pythonic client library for azure eventgrid. users migrating from `v1.x` are advised to view the [migration guide](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventgrid/azure-eventgrid/migration_guide.md).\n\n  **new features**\n  - `azure-eventgrid` package now supports `azure.core.messaging.cloudevent` which honors the cncf cloudevent spec.\n  - `azure.eventgrid.systemeventnames` can be used to get the event model type mapping for system events.\n  - implements the `eventgridpublisherclient` for the publish flow for eventgrid events, cloudevents and custom schema events.\n\n  **breaking changes**\n  - `azure.eventgrid.models` namespace along with all the models in it are now removed.:\n      - json documentation on the events is available here: https://docs.microsoft.com/azure/event-grid/system-topics\n      - `azure.eventgrid.systemeventnames` provides the list of available events name for easy switching.\n  - `azure.eventgrid.event_grid_client.eventgridclient` is now removed in favor of `azure.eventgrid.eventgridpublisherclient`.\n  - `azure.eventgrid.event_grid_client.eventgridclientconfiguration` is now removed.\n\n\n## 2.0.0 (2021-03-09)\n\n  **disclaimer:** v2.0.0 is functionally equivalent to v4.0.0. users are advised to use v4.0.0 instead of this.\n\n  **breaking changes**\n  - `~azure.eventgrid.cloudevent` is now removed in favor of `~azure.core.messaging.cloudevent`.\n  - all the `systemeventnames` related to azure communication service starting with `acs****` are renamed to `acs***` to honor pascal case.\n\n  **features**\n  - added support for two new `systemevents` - `servicebusdeadlettermessagesavailableperiodicnotificationseventdata` and `servicebusactivemessagesavailableperiodicnotificationseventdata`\n\n## 2.0.0b5 (2021-02-10)\n\n  **breaking changes**\n  - `eventgridsharedaccesssignaturecredential` is deprecated in favor of `azuresascredential`.\n  - `azure.eventgrid.models` namespace along with all the models in it are now removed. `azure.eventgrid.systemeventnames` can be used to get the event model type mapping.\n  - `topic_hostname` is renamed to `endpoint` in the `eventgridpublisherclient`.\n  - `azure.eventgrid.generate_shared_access_signature` method is now renamed to `generate_sas`.\n  - `eventgridconsumer`is now removed. please see the samples to see how events can be deserialized.\n  - `customevent` model is removed. dictionaries must be used to send a custom schema.\n\n  **bug fixes**\n  - `eventgridevent` has two additional required positional parameters namely, `data` and `data_version`.\n  - `eventgridpublisherclient` now appropriately throws a `valueerror` if an invalid credential is passed during initialization.\n\n## 2.0.0b4 (2020-11-11)\n\n  **bug fixes**\n  - `typeerror` is raised when bytes are passed to an `eventgridevent`.\n\n## 2.0.0b3 (2020-10-05)\n\n  **feature**\n  - added support for keyvault event types\n  - added distributed tracing support for cloudevents\n\n## 2.0.0b2 (2020-09-24)\n\n  **features**\n  - added support for azure communication services event types.\n\n## 2.0.0b1 (2020-09-08)\n\n  **features**\n  - version (2.0.0b1) is the first preview of our efforts to create a user-friendly and pythonic client library for azure eventgrid.\n  for more information about this, and preview releases of other azure sdk libraries, please visit https://azure.github.io/azure-sdk/releases/latest/python.html.\n  - added support for `cloudevents`.\n  - implements the `eventgridpublisherclient` for the publish flow for eventgrid events, cloudevents and customevents.\n  - implements the `eventgridconsumer` for the consume flow of the events.\n\n## 1.3.0 (2019-05-20)\n\n  - event schemas for new event types from iothub, media services,\n    container registry, maps, and appconfiguration services.\n\n## 1.2.0 (2018-08-28)\n\n  - event schemas for new events (iothub deviceconnected and\n    devicedisconnected events, resource events related to actions), and\n    breaking changes to the schema for iothub devicecreated event and\n    iothub devicedeleted event.\n\n## 1.1.0 (2018-05-24)\n\n  - event schemas for eventgrid subscription validation event, azure\n    media events, and servicebus events.\n\n## 1.0.0 (2018-04-26)\n\n**general breaking changes**\n\nthis version uses a next-generation code generator that *might*\nintroduce breaking changes.\n\n  - model signatures now use only keyword-argument syntax. all\n    positional arguments must be re-written as keyword-arguments. to\n    keep auto-completion in most cases, models are now generated for\n    python 2 and python 3. python 3 uses the \"*\" syntax for\n    keyword-only arguments.\n  - enum types now use the \"str\" mixin (class azureenum(str, enum)) to\n    improve the behavior when unrecognized enum values are encountered.\n    while this is not a breaking change, the distinctions are important,\n    and are documented here:\n    <https://docs.python.org/3/library/enum.html#others> at a glance:\n      - \"is\" should not be used at all.\n      - \"format\" will return the string value, where \"%s\" string\n        formatting will return `nameofenum.stringvalue`. format syntax\n        should be preferred.\n  - new long running operation:\n      - return type changes from\n        `msrestazure.azure_operation.azureoperationpoller` to\n        `msrest.polling.lropoller`. external api is the same.\n      - return type is now **always** a `msrest.polling.lropoller`,\n        regardless of the optional parameters used.\n      - the behavior has changed when using `raw=true`. instead of\n        returning the initial call result as `clientrawresponse`,\n        without polling, now this returns an lropoller. after polling,\n        the final resource will be returned as a `clientrawresponse`.\n      - new `polling` parameter. the default behavior is\n        `polling=true` which will poll using arm algorithm. when\n        `polling=false`, the response of the initial call will be\n        returned without polling.\n      - `polling` parameter accepts instances of subclasses of\n        `msrest.polling.pollingmethod`.\n      - `add_done_callback` will no longer raise if called after\n        polling is finished, but will instead execute the callback right\n        away.\n\n**features**\n\n  - client class can be used as a context manager to keep the underlying\n    http session open for performance\n  - support for consuming azure container registry events and azure iot\n    hub events published to event grid.\n\n## 0.1.0 (2018-01-30)\n\n  - initial release\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-eventgrid",
  "package_url": "https://pypi.org/project/azure-eventgrid/",
  "project_url": "https://pypi.org/project/azure-eventgrid/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python"
  },
  "release_url": "https://pypi.org/project/azure-eventgrid/4.16.0/",
  "requires_dist": [
    "isodate<1.0.0,>=0.6.1",
    "azure-core<2.0.0,>=1.24.0"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure event grid client library for python",
  "version": "4.16.0",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_subscription receive_cloud_events publish_cloud_events sample_publish_events_using_cloud_events_1 event_grid_client",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_eventgrid",
  "homepage": "https://github.com/azure/azure-sdk-for-python",
  "release_count": 33,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_isodate"
  ]
}
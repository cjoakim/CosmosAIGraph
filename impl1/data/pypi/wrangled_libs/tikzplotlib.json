{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: matplotlib",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: graphics :: graphics conversion",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/tikzplotlib\"><img alt=\"tikzplotlib\" src=\"https://nschloe.github.io/tikzplotlib/logo-tikzplotlib.svg\" width=\"60%\"></a>\n  <p align=\"center\">the artist formerly known as <em>matplotlib2tikz.</em></p>\n</p>\n\n[![pypi version](https://img.shields.io/pypi/v/tikzplotlib.svg?style=flat-square)](https://pypi.org/project/tikzplotlib)\n[![packaging status](https://repology.org/badge/tiny-repos/python:tikzplotlib.svg)](https://repology.org/project/python:tikzplotlib/versions)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/tikzplotlib.svg?style=flat-square)](https://pypi.org/pypi/tikzplotlib/)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.1173089.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173089)\n[![github stars](https://img.shields.io/github/stars/nschloe/tikzplotlib.svg?style=flat-square&logo=github&label=stars&logocolor=white)](https://github.com/nschloe/tikzplotlib)\n[![downloads](https://pepy.tech/badge/tikzplotlib/month?style=flat-square)](https://pepy.tech/project/tikzplotlib)\n\n<!--[![pypi downloads](https://img.shields.io/pypi/dm/tikzplotlib.svg?style=flat-square)](https://pypistats.org/packages/tikzplotlib)-->\n\n[![documentation status](https://readthedocs.org/projects/tikzplotlib/badge/?version=latest&style=flat-square)](https://readthedocs.org/projects/tikzplotlib/?badge=latest)\n[![awesome](https://img.shields.io/badge/awesome-yes-brightgreen.svg?style=flat-square)](https://github.com/nschloe/tikzplotlib)\n\n[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/tikzplotlib/ci?style=flat-square)](https://github.com/nschloe/tikzplotlib/actions?query=workflow%3aci)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/tikzplotlib.svg?style=flat-square)](https://codecov.io/gh/nschloe/tikzplotlib)\n[![lgtm](https://img.shields.io/lgtm/grade/python/github/nschloe/tikzplotlib.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/tikzplotlib)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\nthis is tikzplotlib, a python tool for converting matplotlib figures into\n[pgfplots](https://www.ctan.org/pkg/pgfplots) ([pgf/tikz](https://www.ctan.org/pkg/pgf))\nfigures like\n\n![](https://nschloe.github.io/tikzplotlib/example.png)\n\nfor native inclusion into latex or context documents.\n\nthe output of tikzplotlib is in [pgfplots](https://github.com/pgf-tikz/pgfplots/), a tex\nlibrary that sits on top of [pgf/tikz](https://en.wikipedia.org/wiki/pgf/tikz) and\ndescribes graphs in terms of axes, data etc. consequently, the output of tikzplotlib\n\n-   retains more information,\n-   can be more easily understood, and\n-   is more easily editable\n\nthan [raw tikz output](https://matplotlib.org/users/whats_new.html#pgf-tikz-backend).\nfor example, the matplotlib figure\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use(\"ggplot\")\n\nt = np.arange(0.0, 2.0, 0.1)\ns = np.sin(2 * np.pi * t)\ns2 = np.cos(2 * np.pi * t)\nplt.plot(t, s, \"o-\", lw=4.1)\nplt.plot(t, s2, \"o-\", lw=4.1)\nplt.xlabel(\"time (s)\")\nplt.ylabel(\"voltage (mv)\")\nplt.title(\"simple plot $\\\\frac{\\\\alpha}{2}$\")\nplt.grid(true)\n\nimport tikzplotlib\n\ntikzplotlib.save(\"test.tex\")\n```\n\n<!--close the figure and reset defaults\n<!--pytest-codeblocks:cont-->\n\n```python\nimport matplotlib as mpl\n\nplt.close()\nmpl.rcparams.update(mpl.rcparamsdefault)\n```\n\n-->\n(see above) gives\n\n```latex\n\\begin{tikzpicture}\n\n\\definecolor{color0}{rgb}{0.886274509803922,0.290196078431373,0.2}\n\\definecolor{color1}{rgb}{0.203921568627451,0.541176470588235,0.741176470588235}\n\n\\begin{axis}[\naxis background/.style={fill=white!89.8039215686275!black},\naxis line style={white},\ntick align=outside,\ntick pos=left,\ntitle={simple plot \\(\\displaystyle \\frac{\\alpha}{2}\\)},\nx grid style={white},\nxlabel={time (s)},\nxmajorgrids,\nxmin=-0.095, xmax=1.995,\nxtick style={color=white!33.3333333333333!black},\ny grid style={white},\nylabel={voltage (mv)},\nymajorgrids,\nymin=-1.1, ymax=1.1,\nytick style={color=white!33.3333333333333!black}\n]\n\\addplot [line width=1.64pt, color0, mark=*, mark size=3, mark options={solid}]\ntable {%\n0 0\n0.1 0.587785252292473\n% [...]\n1.9 -0.587785252292473\n};\n\\addplot [line width=1.64pt, color1, mark=*, mark size=3, mark options={solid}]\ntable {%\n0 1\n0.1 0.809016994374947\n% [...]\n1.9 0.809016994374947\n};\n\\end{axis}\n\n\\end{tikzpicture}\n```\n\n(use `get_tikz_code()` instead of `save()` if you want the code as a string.)\n\ntweaking the plot is straightforward and can be done as part of your tex work flow.\n[the fantastic pgfplots manual](http://pgfplots.sourceforge.net/pgfplots.pdf) contains\ngreat examples of how to make your plot look even better.\n\nof course, not all figures produced by matplotlib can be converted without error.\nnotably, [3d plots don't work](https://github.com/matplotlib/matplotlib/issues/7243).\n\n### installation\n\ntikzplotlib is [available from the python package\nindex](https://pypi.org/project/tikzplotlib/), so simply do\n\n```\npip install tikzplotlib\n```\n\nto install.\n\n### usage\n\n1. generate your matplotlib plot as usual.\n\n2. instead of `pyplot.show()`, invoke tikzplotlib by\n\n    ```python\n    import tikzplotlib\n\n    tikzplotlib.save(\"mytikz.tex\")\n    # or\n    tikzplotlib.save(\"mytikz.tex\", flavor=\"context\")\n    ```\n\n    to store the tikz file as `mytikz.tex`.\n\n3. add the contents of `mytikz.tex` into your tex source code. a convenient way of doing\n   so is via\n\n    ```latex\n    \\input{/path/to/mytikz.tex}\n    ```\n\n    also make sure that the packages for pgfplots and proper unicode support and are\n    included in the header of your document:\n\n    ```latex\n    \\usepackage[utf8]{inputenc}\n    \\usepackage{pgfplots}\n    \\declareunicodecharacter{2212}{\u2212}\n    \\usepgfplotslibrary{groupplots,dateplot}\n    \\usetikzlibrary{patterns,shapes.arrows}\n    \\pgfplotsset{compat=newest}\n    ```\n\n    or:\n\n    ```latex\n    \\setupcolors[state=start]\n    \\usemodule[tikz]\n    \\usemodule[pgfplots]\n    \\usepgfplotslibrary[groupplots,dateplot]\n    \\usetikzlibrary[patterns,shapes.arrows]\n    \\pgfplotsset{compat=newest}\n    \\unexpanded\\def\\startgroupplot{\\groupplot}\n    \\unexpanded\\def\\stopgroupplot{\\endgroupplot}\n    ```\n\n    you can also get the code via:\n\n    ```python\n    import tikzplotlib\n\n    tikzplotlib.flavors.latex.preamble()\n    # or\n    tikzplotlib.flavors.context.preamble()\n    ```\n\n4. [optional] clean up the figure before exporting to tikz using the `clean_figure`\n   command.\n\n    ```python\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # ... do your plotting\n\n    import tikzplotlib\n\n    tikzplotlib.clean_figure()\n    tikzplotlib.save(\"test.tex\")\n    ```\n\n    the command will remove points that are outside the axes limits, simplify curves and\n    reduce point density for the specified target resolution.\n\n    the feature originated from the\n    [matlab2tikz](https://github.com/matlab2tikz/matlab2tikz) project and is adapted to\n    matplotlib.\n\n### contributing\n\nif you experience bugs, would like to contribute, have nice examples of what tikzplotlib\ncan do, or if you are just looking for more information, then please visit\n[tikzplotlib's github page](https://github.com/nschloe/tikzplotlib).\n\n### testing\n\ntikzplotlib has automatic unit testing to make sure that the software doesn't\naccidentally get worse over time. in `test/`, a number of test cases are specified.\nthose run through tikzplotlib and compare the output with a previously stored reference\ntex file.\n\nto run the tests, just check out this repository and type\n\n```\npytest\n```\n\n### license\n\ntikzplotlib is published under the [mit\nlicense](https://en.wikipedia.org/wiki/mit_license).\n",
  "docs_url": null,
  "keywords": "latex,tikz,matplotlib,graphics",
  "license": "",
  "name": "tikzplotlib",
  "package_url": "https://pypi.org/project/tikzplotlib/",
  "project_url": "https://pypi.org/project/tikzplotlib/",
  "project_urls": {
    "Code": "https://github.com/nschloe/tikzplotlib",
    "Funding": "https://github.com/sponsors/nschloe",
    "Issues": "https://github.com/nschloe/tikzplotlib/issues"
  },
  "release_url": "https://pypi.org/project/tikzplotlib/0.10.1/",
  "requires_dist": [
    "matplotlib >= 1.4.0",
    "numpy",
    "Pillow",
    "webcolors"
  ],
  "requires_python": ">=3.7",
  "summary": "convert matplotlib figures into tikz/pgfplots",
  "version": "0.10.1",
  "releases": [],
  "developers": [
    "nico.schloemer@gmail.com"
  ],
  "kwds": "matplotlib2tikz matplotlib pyplot tikzplotlib plots",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_tikzplotlib",
  "homepage": "",
  "release_count": 28,
  "dependency_ids": [
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pillow",
    "pypi_webcolors"
  ]
}
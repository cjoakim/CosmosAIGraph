{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development :: embedded systems",
    "topic :: utilities"
  ],
  "description": "crccheck - classes to calculate crcs and checksums from binary data\r\n===================================================================\r\n\r\n\r\nthe ``crccheck.crc`` module implements all crcs listed in the\r\n`catalogue of parametrised crc algorithms <http://reveng.sourceforge.net/crc-catalogue/>`_:\r\n\r\n    crc-3/gsm, crc-3/rohc, crc-4/g-704, crc-4/interlaken, crc-5/epc-c1g2, crc-5/g-704, crc-5/usb, crc-6/cdma2000-a,\r\n    crc-6/cdma2000-b, crc-6/darc, crc-6/g-704, crc-6/gsm, crc-7/mmc, crc-7/rohc, crc-7/umts, crc-8/autosar,\r\n    crc-8/bluetooth, crc-8/cdma2000, crc-8/darc, crc-8/dvb-s2, crc-8/gsm-a, crc-8/gsm-b, crc-8/hitag, crc-8/i-432-1, \r\n    crc-8/i-code, crc-8/lte, crc-8/maxim-dow, crc-8/mifare-mad, crc-8/nrsc-5, crc-8/opensafety, crc-8/rohc, \r\n    crc-8/sae-j1850, crc-8/smbus, crc-8/tech-3250, crc-8/wcdma, crc-10/atm, crc-10/cdma2000, crc-10/gsm, crc-11/flexray, \r\n    crc-11/umts, crc-12/cdma2000, crc-12/dect, crc-12/gsm, crc-12/umts, crc-13/bbc, crc-14/darc, crc-14/gsm, crc-15/can,\r\n    crc-15/mpt1327, crc-16/arc, crc-16/cdma2000, crc-16/cms, crc-16/dds-110, crc-16/dect-r, crc-16/dect-x, crc-16/dnp,\r\n    crc-16/en-13757, crc-16/genibus, crc-16/gsm, crc-16/ibm-3740, crc-16/ibm-sdlc, crc-16/iso-iec-14443-3-a,\r\n    crc-16/kermit, crc-16/lj1200, crc-16/m17, crc-16/maxim-dow, crc-16/mcrf4xx, crc-16/modbus, crc-16/nrsc-5, \r\n    crc-16/opensafety-a, crc-16/opensafety-b, crc-16/profibus, crc-16/riello, crc-16/spi-fujitsu, crc-16/t10-dif,\r\n    crc-16/teledisk, crc-16/tms37157, crc-16/umts, crc-16/usb, crc-16/xmodem, crc-17/can-fd, crc-21/can-fd, crc-24/ble,\r\n    crc-24/flexray-a, crc-24/flexray-b, crc-24/interlaken, crc-24/lte-a, crc-24/lte-b, crc-24/openpgp, crc-24/os-9,\r\n    crc-30/cdma, crc-31/philips, crc-32/aixm, crc-32/autosar, crc-32/base91-d, crc-32/bzip2, crc-32/cd-rom-edc,\r\n    crc-32/cksum, crc-32/iscsi, crc-32/iso-hdlc, crc-32/jamcrc, crc-32/mef, crc-32/mpeg-2, crc-32/xfer, crc-40/gsm,\r\n    crc-64/ecma-182, crc-64/go-iso, crc-64/ms, crc-64/redis, crc-64/we, crc-64/xz, crc-82/darc\r\n\r\nfor the class names simply remove all dashes and slashes from the above names and apply camelcase, e.g.\r\n\"crc-32/mpeg-2\" is implemented by ``crc32mpeg2``. other crc can be calculated by using the general class\r\n``crccheck.crc.crc`` by providing all required crc parameters.\r\n\r\nthe ``crccheck.checksum`` module implements additive and xor checksums with 8, 16 and 32 bit:\r\n``checksum8``, ``checksum16``, ``checksum32`` and ``checksumxor8``, ``checksumxor16``, ``checksumxor32``\r\n\r\nusage example::\r\n\r\n    from crccheck.crc import crc32, crcxmodem\r\n    from crccheck.checksum import checksum32\r\n\r\n    # quick calculation\r\n    data = bytearray.fromhex(\"deadbeef\")\r\n    crc = crc32.calc(data)\r\n    checksum = checksum32.calc(data)\r\n\r\n    # procsss multiple data buffers\r\n    data1 = b\"binary string\"  # or use .encode(..) on normal sring - python 3 only\r\n    data2 = bytes.fromhex(\"1234567890\")  # python 3 only, use bytearray for older versions\r\n    data3 = (0x0, 255, 12, 99)  # iterable which returns ints in byte range (0..255)\r\n    crcinst = crcxmodem()\r\n    crcinst.process(data1)\r\n    crcinst.process(data2)\r\n    crcinst.process(data3[1:-1])\r\n    crcbytes = crcinst.finalbytes()\r\n    crchex = crcinst.finalhex()\r\n    crcint = crcinst.final()\r\n\r\n\r\nlicense:\r\n    mit license\r\n\r\n    copyright (c) 2015-2022 by martin scharrer <martin.scharrer@web.de>\r\n\r\n    permission is hereby granted, free of charge, to any person obtaining a copy of this software\r\n    and associated documentation files (the \"software\"), to deal in the software without\r\n    restriction, including without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the\r\n    software is furnished to do so, subject to the following conditions:\r\n\r\n    the above copyright notice and this permission notice shall be included in all copies or\r\n    substantial portions of the software.\r\n\r\n    the software is provided \"as is\", without warranty of any kind, express or implied, including\r\n    but not limited to the warranties of merchantability, fitness for a particular purpose and\r\n    noninfringement. in no event shall the authors or copyright holders be liable for any claim,\r\n    damages or other liability, whether in an action of contract, tort or otherwise, arising from,\r\n    out of or in connection with the software or the use or other dealings in the software.\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "crccheck",
  "package_url": "https://pypi.org/project/crccheck/",
  "project_url": "https://pypi.org/project/crccheck/",
  "project_urls": {
    "Homepage": "https://github.com/MartinScharrer/crccheck"
  },
  "release_url": "https://pypi.org/project/crccheck/1.3.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "calculation library for crcs and checksums",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "martin.scharrer@web.de",
    "martin_scharrer"
  ],
  "kwds": "crcs crc crc32 crc32mpeg2 crcxmodem",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_crccheck",
  "homepage": "https://github.com/martinscharrer/crccheck",
  "release_count": 8,
  "dependency_ids": []
}
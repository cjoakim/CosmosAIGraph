{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6"
  ],
  "description": "# efficientnet pytorch\n\n### quickstart\n\ninstall with `pip install efficientnet_pytorch` and load a pretrained efficientnet with:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b0')\n```\n\n### updates\n\n#### update (april 2, 2021)\n\nthe [efficientnetv2 paper](https://arxiv.org/abs/2104.00298) has been released! i am working on implementing it as you read this :) \n\nabout efficientnetv2:\n> efficientnetv2 is a new family of convolutional networks that have faster training speed and better parameter efficiency than previous models. to develop this family of models, we use a combination of training-aware neural architecture search and scaling, to jointly optimize training speed and parameter efficiency. the models were searched from the search space enriched with new ops such as fused-mbconv. \n\nhere is a comparison: \n> <img src=\"https://github.com/lukemelas/efficientnet-pytorch/releases/download/1.0/efficientnetv2-image.png\" width=\"100%\" />\n\n\n#### update (aug 25, 2020)\n\nthis update adds: \n * a new `include_top` (default: `true`) option ([#208](https://github.com/lukemelas/efficientnet-pytorch/pull/208))\n * continuous testing with [sotabench](https://sotabench.com/)\n * code quality improvements and fixes ([#215](https://github.com/lukemelas/efficientnet-pytorch/pull/215) [#223](https://github.com/lukemelas/efficientnet-pytorch/pull/223))\n\n#### update (may 14, 2020)\n\nthis update adds comprehensive comments and documentation (thanks to @workingcoder).\n\n#### update (january 23, 2020)\n\nthis update adds a new category of pre-trained model based on adversarial training, called _advprop_. it is important to note that the preprocessing required for the advprop pretrained models is slightly different from normal imagenet preprocessing. as a result, by default, advprop models are not used. to load a model with advprop, use:\n```python\nmodel = efficientnet.from_pretrained(\"efficientnet-b0\", advprop=true)\n```\nthere is also a new, large `efficientnet-b8` pretrained model that is only available in advprop form. when using these models, replace imagenet preprocessing code as follows:\n```python\nif advprop:  # for models using advprop pretrained weights\n    normalize = transforms.lambda(lambda img: img * 2.0 - 1.0)\nelse:\n    normalize = transforms.normalize(mean=[0.485, 0.456, 0.406],\n                                     std=[0.229, 0.224, 0.225])\n```\nthis update also addresses multiple other issues ([#115](https://github.com/lukemelas/efficientnet-pytorch/issues/115), [#128](https://github.com/lukemelas/efficientnet-pytorch/issues/128)).\n\n#### update (october 15, 2019)\n\nthis update allows you to choose whether to use a memory-efficient swish activation. the memory-efficient version is chosen by default, but it cannot be used when exporting using pytorch jit. for this purpose, we have also included a standard (export-friendly) swish activation function. to switch to the export-friendly version, simply call `model.set_swish(memory_efficient=false)` after loading your desired model. this update addresses issues [#88](https://github.com/lukemelas/efficientnet-pytorch/pull/88) and [#89](https://github.com/lukemelas/efficientnet-pytorch/pull/89).\n\n#### update (october 12, 2019)\n\nthis update makes the swish activation function more memory-efficient. it also addresses pull requests [#72](https://github.com/lukemelas/efficientnet-pytorch/pull/72), [#73](https://github.com/lukemelas/efficientnet-pytorch/pull/73), [#85](https://github.com/lukemelas/efficientnet-pytorch/pull/85), and [#86](https://github.com/lukemelas/efficientnet-pytorch/pull/86). thanks to the authors of all the pull requests!\n\n#### update (july 31, 2019)\n\n_upgrade the pip package with_ `pip install --upgrade efficientnet-pytorch`\n\nthe b6 and b7 models are now available. additionally, _all_ pretrained models have been updated to use autoaugment preprocessing, which translates to better performance across the board. usage is the same as before:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b7')\n```\n\n#### update (june 29, 2019)\n\nthis update adds easy model exporting ([#20](https://github.com/lukemelas/efficientnet-pytorch/issues/20)) and feature extraction ([#38](https://github.com/lukemelas/efficientnet-pytorch/issues/38)).\n\n * [example: export to onnx](#example-export)\n * [example: extract features](#example-feature-extraction)\n * also: fixed a cuda/cpu bug ([#32](https://github.com/lukemelas/efficientnet-pytorch/issues/32))\n\nit is also now incredibly simple to load a pretrained model with a new number of classes for transfer learning:\n```python\nmodel = efficientnet.from_pretrained('efficientnet-b1', num_classes=23)\n```\n\n\n#### update (june 23, 2019)\n\nthe b4 and b5 models are now available. their usage is identical to the other models:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b4')\n```\n\n### overview\nthis repository contains an op-for-op pytorch reimplementation of [efficientnet](https://arxiv.org/abs/1905.11946), along with pre-trained models and examples.\n\nthe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. this implementation is a work in progress -- new features are currently being implemented.\n\nat the moment, you can easily:\n * load pretrained efficientnet models\n * use efficientnet models for classification or feature extraction\n * evaluate efficientnet models on imagenet or your own images\n\n_upcoming features_: in the next few days, you will be able to:\n * train new models from scratch on imagenet with a simple command\n * quickly finetune an efficientnet on your own dataset\n * export efficientnet models for production\n\n### table of contents\n1. [about efficientnet](#about-efficientnet)\n2. [about efficientnet-pytorch](#about-efficientnet-pytorch)\n3. [installation](#installation)\n4. [usage](#usage)\n    * [load pretrained models](#loading-pretrained-models)\n    * [example: classify](#example-classification)\n    * [example: extract features](#example-feature-extraction)\n    * [example: export to onnx](#example-export)\n6. [contributing](#contributing)\n\n### about efficientnet\n\nif you're new to efficientnets, here is an explanation straight from the official tensorflow implementation:\n\nefficientnets are a family of image classification models, which achieve state-of-the-art accuracy, yet being an order-of-magnitude smaller and faster than previous models. we develop efficientnets based on automl and compound scaling. in particular, we first use [automl mobile framework](https://ai.googleblog.com/2018/08/mnasnet-towards-automating-design-of.html) to develop a mobile-size baseline network, named as efficientnet-b0; then, we use the compound scaling method to scale up this baseline to obtain efficientnet-b1 to b7.\n\n<table border=\"0\">\n<tr>\n    <td>\n    <img src=\"https://raw.githubusercontent.com/tensorflow/tpu/master/models/official/efficientnet/g3doc/params.png\" width=\"100%\" />\n    </td>\n    <td>\n    <img src=\"https://raw.githubusercontent.com/tensorflow/tpu/master/models/official/efficientnet/g3doc/flops.png\", width=\"90%\" />\n    </td>\n</tr>\n</table>\n\nefficientnets achieve state-of-the-art accuracy on imagenet with an order of magnitude better efficiency:\n\n\n* in high-accuracy regime, our efficientnet-b7 achieves state-of-the-art 84.4% top-1 / 97.1% top-5 accuracy on imagenet with 66m parameters and 37b flops, being 8.4x smaller and 6.1x faster on cpu inference than previous best [gpipe](https://arxiv.org/abs/1811.06965).\n\n* in middle-accuracy regime, our efficientnet-b1 is 7.6x smaller and 5.7x faster on cpu inference than [resnet-152](https://arxiv.org/abs/1512.03385), with similar imagenet accuracy.\n\n* compared with the widely used [resnet-50](https://arxiv.org/abs/1512.03385), our efficientnet-b4 improves the top-1 accuracy from 76.3% of resnet-50 to 82.6% (+6.3%), under similar flops constraint.\n\n### about efficientnet pytorch\n\nefficientnet pytorch is a pytorch re-implementation of efficientnet. it is consistent with the [original tensorflow implementation](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet), such that it is easy to load weights from a tensorflow checkpoint. at the same time, we aim to make our pytorch implementation as simple, flexible, and extensible as possible.\n\nif you have any feature requests or questions, feel free to leave them as github issues!\n\n### installation\n\ninstall via pip:\n```bash\npip install efficientnet_pytorch\n```\n\nor install from source:\n```bash\ngit clone https://github.com/lukemelas/efficientnet-pytorch\ncd efficientnet-pytorch\npip install -e .\n```\n\n### usage\n\n#### loading pretrained models\n\nload an efficientnet:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_name('efficientnet-b0')\n```\n\nload a pretrained efficientnet:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b0')\n```\n\ndetails about the models are below:\n\n|    *name*         |*# params*|*top-1 acc.*|*pretrained?*|\n|:-----------------:|:--------:|:----------:|:-----------:|\n| `efficientnet-b0` |   5.3m   |    76.3    |      \u2713      |\n| `efficientnet-b1` |   7.8m   |    78.8    |      \u2713      |\n| `efficientnet-b2` |   9.2m   |    79.8    |      \u2713      |\n| `efficientnet-b3` |    12m   |    81.1    |      \u2713      |\n| `efficientnet-b4` |    19m   |    82.6    |      \u2713      |\n| `efficientnet-b5` |    30m   |    83.3    |      \u2713      |\n| `efficientnet-b6` |    43m   |    84.0    |      \u2713      |\n| `efficientnet-b7` |    66m   |    84.4    |      \u2713      |\n\n\n#### example: classification\n\nbelow is a simple, complete example. it may also be found as a jupyter notebook in `examples/simple` or as a [colab notebook](https://colab.research.google.com/drive/1jw28xz1njq4cja4jle6tj6_f5lczelb4).\n\nwe assume that in your current directory, there is a `img.jpg` file and a `labels_map.txt` file (imagenet class names). these are both included in `examples/simple`.\n\n```python\nimport json\nfrom pil import image\nimport torch\nfrom torchvision import transforms\n\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b0')\n\n# preprocess image\ntfms = transforms.compose([transforms.resize(224), transforms.totensor(),\n    transforms.normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),])\nimg = tfms(image.open('img.jpg')).unsqueeze(0)\nprint(img.shape) # torch.size([1, 3, 224, 224])\n\n# load imagenet class names\nlabels_map = json.load(open('labels_map.txt'))\nlabels_map = [labels_map[str(i)] for i in range(1000)]\n\n# classify\nmodel.eval()\nwith torch.no_grad():\n    outputs = model(img)\n\n# print predictions\nprint('-----')\nfor idx in torch.topk(outputs, k=5).indices.squeeze(0).tolist():\n    prob = torch.softmax(outputs, dim=1)[0, idx].item()\n    print('{label:<75} ({p:.2f}%)'.format(label=labels_map[idx], p=prob*100))\n```\n\n#### example: feature extraction\n\nyou can easily extract features with `model.extract_features`:\n```python\nfrom efficientnet_pytorch import efficientnet\nmodel = efficientnet.from_pretrained('efficientnet-b0')\n\n# ... image preprocessing as in the classification example ...\nprint(img.shape) # torch.size([1, 3, 224, 224])\n\nfeatures = model.extract_features(img)\nprint(features.shape) # torch.size([1, 1280, 7, 7])\n```\n\n#### example: export to onnx\n\nexporting to onnx for deploying to production is now simple:\n```python\nimport torch\nfrom efficientnet_pytorch import efficientnet\n\nmodel = efficientnet.from_pretrained('efficientnet-b1')\ndummy_input = torch.randn(10, 3, 240, 240)\n\nmodel.set_swish(memory_efficient=false)\ntorch.onnx.export(model, dummy_input, \"test-b1.onnx\", verbose=true)\n```\n\n[here](https://colab.research.google.com/drive/1roaexexhaa8uo3ag2ycfdhitlrjmv0vp) is a colab example.\n\n\n#### imagenet\n\nsee `examples/imagenet` for details about evaluating on imagenet.\n\n### contributing\n\nif you find a bug, create a github issue, or even better, submit a pull request. similarly, if you have questions, simply post them as github issues.\n\ni look forward to seeing what the community does with these models!",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "efficientnet-pytorch",
  "package_url": "https://pypi.org/project/efficientnet-pytorch/",
  "project_url": "https://pypi.org/project/efficientnet-pytorch/",
  "project_urls": {
    "Homepage": "https://github.com/lukemelas/EfficientNet-PyTorch"
  },
  "release_url": "https://pypi.org/project/efficientnet-pytorch/0.7.1/",
  "requires_dist": [],
  "requires_python": ">=3.5.0",
  "summary": "efficientnet implemented in pytorch.",
  "version": "0.7.1",
  "releases": [],
  "developers": [
    "lmelaskyriazi@college.harvard.edu",
    "luke"
  ],
  "kwds": "efficientnet_pytorch efficientnetv2 efficientnet efficientnets imagenet",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_efficientnet_pytorch",
  "homepage": "https://github.com/lukemelas/efficientnet-pytorch",
  "release_count": 13,
  "dependency_ids": []
}
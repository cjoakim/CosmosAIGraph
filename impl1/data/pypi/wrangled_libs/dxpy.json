{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: unix shell",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "dxpy: dnanexus python api\n=========================\n\n[api documentation](http://autodoc.dnanexus.com/bindings/python/current/)\n\nbuilding\n--------\n\nfrom the dx-toolkit root directory:\n\n```\npython3 -m pip install -e src/python\n```\n\ndebugging\n---------\n\nset the `_dx_debug` environment variable to a positive integer before\nrunning a dxpy-based program (such as `dx`) to display the input and\noutput of each api call. supported values are 1, 2, and 3 with\nincreasing numbers producing successively more verbose output.\n\nexample:\n\n```\n$ _dx_debug=1 dx ls\n```\n\npython coding style\n-------------------\n\n* conform to [pep-8](http://legacy.python.org/dev/peps/pep-0008/).\n    * relax the line length requirement to 120 characters per line, where you judge readability not to be compromised.\n    * relax other pep-8 requirements at your discretion if it simplifies code or is needed to follow conventions\n      established elsewhere at dnanexus.\n* document your code in a format usable by [sphinx autodoc](http://sphinx-doc.org/ext/autodoc.html).\n* run `pylint -e` on your code before checking it in.\n* do not introduce module import-time side effects.\n    * do not add module-level attributes into the api unless you are absolutely certain they will remain constants. for\n      example, do not declare an attribute `dxpy.foo` (`dxpy._foo` is ok), or any other non-private variable in the\n      global scope of any module. this is because unless the value is a constant, it may need to be updated by an\n      initialization method, which may need to run lazily to avoid side effects at module load time. instead, use\n      accessor methods that can perform the updates at call time:\n\n      ```python\n      _foo = none\n\n      def get_foo():\n          initialize()\n          return _foo\n      ```\n\nother useful resources:\n\n* [google python style guide](http://google.github.io/styleguide/pyguide.html)\n\npython version compatibility\n----------------------------\ndxpy is supported on python 3 (3.6+)\n\nconvention for python scripts that are also modules\n---------------------------------------------------\n\nsome scripts, such as format converters, are useful both as standalone executables and as importable modules.\n\nwe have the following convention for these scripts:\n* install the script into ```src/python/dxpy/scripts``` with a name like ```dx_useful_script.py```. this will allow\n  importing with ```import dxpy.scripts.dx_useful_script```.\n* include in the script a top-level function called ```main()```, which should be the entry point processor, and\n  conclude the script with the following stanza:\n\n  ```python\n  if __name__ == '__main__':\n      main()\n  ```\n\n* the dxpy installation process (invoked through ```setup.py``` or with ```make -c src python``` at the top level)\n  will find the script and install a launcher for it into the executable path automatically. this is done using the\n  ```entry_points``` facility of setuptools/distribute.\n\n    * note: the install script will replace underscores in the name of your module with dashes in the name of the launcher\n      script.\n\n* typically, when called on the command line, *main()* will first parse the command line arguments (sys.argv). however,\n  when imported as a module, the arguments need to instead be passed as inputs to a function. the following is a\n  suggestion for how to accommodate both styles simultaneously with just one entry point (```main```):\n\n  ```python\n  def main(**kwargs):\n      if len(kwargs) == 0:\n          kwargs = vars(arg_parser.parse_args(sys.argv[1:]))\n      ...\n\n  if __name__ == '__main__':\n      main()\n  ```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "dxpy",
  "package_url": "https://pypi.org/project/dxpy/",
  "project_url": "https://pypi.org/project/dxpy/",
  "project_urls": {
    "Homepage": "https://github.com/dnanexus/dx-toolkit"
  },
  "release_url": "https://pypi.org/project/dxpy/0.367.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "dnanexus platform api bindings for python",
  "version": "0.367.0",
  "releases": [],
  "developers": [
    "aleksandra_zalcman",
    "support@dnanexus.com"
  ],
  "kwds": "_dx_debug dxpy dx_useful_script dx dnanexus",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_dxpy",
  "homepage": "https://github.com/dnanexus/dx-toolkit",
  "release_count": 328,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "topic :: software development :: libraries"
  ],
  "description": "aiosqlite\\: sqlite for asyncio\n==============================\n\n.. image:: https://readthedocs.org/projects/aiosqlite/badge/?version=latest\n   :target: https://aiosqlite.omnilib.dev/en/latest/?badge=latest\n   :alt: documentation status\n.. image:: https://img.shields.io/pypi/v/aiosqlite.svg\n   :target: https://pypi.org/project/aiosqlite\n   :alt: pypi release\n.. image:: https://img.shields.io/badge/change-log-blue\n   :target: https://github.com/omnilib/aiosqlite/blob/master/changelog.md\n   :alt: changelog\n.. image:: https://img.shields.io/pypi/l/aiosqlite.svg\n   :target: https://github.com/omnilib/aiosqlite/blob/master/license\n   :alt: mit licensed\n\naiosqlite provides a friendly, async interface to sqlite databases.\n\nit replicates the standard ``sqlite3`` module, but with async versions\nof all the standard connection and cursor methods, plus context managers for\nautomatically closing connections and cursors::\n\n    async with aiosqlite.connect(...) as db:\n        await db.execute(\"insert into some_table ...\")\n        await db.commit()\n\n        async with db.execute(\"select * from some_table\") as cursor:\n            async for row in cursor:\n                ...\n\nit can also be used in the traditional, procedural manner::\n\n    db = await aiosqlite.connect(...)\n    cursor = await db.execute('select * from some_table')\n    row = await cursor.fetchone()\n    rows = await cursor.fetchall()\n    await cursor.close()\n    await db.close()\n\naiosqlite also replicates most of the advanced features of ``sqlite3``::\n\n    async with aiosqlite.connect(...) as db:\n        db.row_factory = aiosqlite.row\n        async with db.execute('select * from some_table') as cursor:\n            async for row in cursor:\n                value = row['column']\n\n        await db.execute('insert into foo some_table')\n        assert db.total_changes > 0\n\n\ninstall\n-------\n\naiosqlite is compatible with python 3.7 and newer.\nyou can install it from pypi:\n\n.. code-block:: bash\n\n    $ pip install aiosqlite\n\n\ndetails\n-------\n\naiosqlite allows interaction with sqlite databases on the main asyncio event\nloop without blocking execution of other coroutines while waiting for queries\nor data fetches.  it does this by using a single, shared thread per connection.\nthis thread executes all actions within a shared request queue to prevent\noverlapping actions.\n\nconnection objects are proxies to the real connections, contain the shared\nexecution thread, and provide context managers to handle automatically closing\nconnections.  cursors are similarly proxies to the real cursors, and provide\nasync iterators to query results.\n\n\nlicense\n-------\n\naiosqlite is copyright `amethyst reese <https://noswap.com>`_, and licensed under the\nmit license.  i am providing code in this repository to you under an open source\nlicense.  this is my personal repository; the license you receive to my code\nis from me and not from my employer. see the `license`_ file for details.\n\n.. _license: https://github.com/omnilib/aiosqlite/blob/master/license\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "aiosqlite",
  "package_url": "https://pypi.org/project/aiosqlite/",
  "project_url": "https://pypi.org/project/aiosqlite/",
  "project_urls": {
    "Documentation": "https://aiosqlite.omnilib.dev",
    "Github": "https://github.com/omnilib/aiosqlite"
  },
  "release_url": "https://pypi.org/project/aiosqlite/0.19.0/",
  "requires_dist": [
    "typing_extensions >= 4.0; python_version < '3.8'",
    "aiounittest==1.4.1 ; extra == \"dev\" and ( python_version < '3.8')",
    "attribution==1.6.2 ; extra == \"dev\"",
    "black==23.3.0 ; extra == \"dev\"",
    "coverage[toml]==7.2.3 ; extra == \"dev\"",
    "flake8==5.0.4 ; extra == \"dev\"",
    "flake8-bugbear==23.3.12 ; extra == \"dev\"",
    "flit==3.7.1 ; extra == \"dev\"",
    "mypy==1.2.0 ; extra == \"dev\"",
    "ufmt==2.1.0 ; extra == \"dev\"",
    "usort==1.0.6 ; extra == \"dev\"",
    "sphinx==6.1.3 ; extra == \"docs\" and ( python_version >= '3.8')",
    "sphinx-mdinclude==0.5.3 ; extra == \"docs\""
  ],
  "requires_python": ">=3.7",
  "summary": "asyncio bridge to the standard sqlite3 module",
  "version": "0.19.0",
  "releases": [],
  "developers": [
    "amy@n7.gg"
  ],
  "kwds": "aiosqlite sqlite3 sqlite badge changelog",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_aiosqlite",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_aiounittest",
    "pypi_attribution",
    "pypi_black",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_flake8_bugbear",
    "pypi_flit",
    "pypi_mypy",
    "pypi_sphinx",
    "pypi_sphinx_mdinclude",
    "pypi_typing_extensions",
    "pypi_ufmt",
    "pypi_usort"
  ]
}
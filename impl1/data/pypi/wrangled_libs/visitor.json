{
  "classifiers": [
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "visitor\n=======\n\na tiny library to facilitate `visitor\n<https://en.wikipedia.org/wiki/visitor_pattern>`_ implementation in python\n(which are slightly peculiar due to dynamic typing). in fact, it is so small,\nyou may just be better off copy & pasting the source straight into your\nproject...\n\n\nexample use\n-----------\n\na simple json-encoder:\n\n.. code-block:: python\n\n    from visitor import visitor\n\n\n    class jsonencoder(visitor):\n        def __init__(self):\n            self.indent = 0\n\n        def escape_str(self, s):\n            # note: this is not a good escape function, do not use this in\n            # production!\n            s = s.replace('\\\\', '\\\\\\\\')\n            s = s.replace('\"', '\\\\\"')\n            return '\"' + s + '\"'\n\n        def visit_list(self, node):\n            self.indent += 1\n            s = '[\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(self.visit(item)\n                                                   for item in node)\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + ']'\n            return s\n\n        def visit_str(self, node):\n            return self.escape_str(node)\n\n        def visit_int(self, node):\n            return str(node)\n\n        def visit_bool(self, node):\n            return 'true' if node else 'false'\n\n        def visit_dict(self, node):\n            self.indent += 1\n            s = '{\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(\n                '{}: {}'.format(self.escape_str(key), self.visit(value))\n                for key, value in sorted(node.items())\n            )\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + '}'\n            return s\n\n\n    data = [\n        'list', 'of', 42, 'items', true, {\n            'sub1': 'some string',\n            'sub2': {\n                'sub2sub1': false,\n                'sub2sub2': 123,\n            }\n        }\n    ]\n\n    print(jsonencoder().visit(data))\n\n\n\noutput::\n\n    [\n      \"list\",\n      \"of\",\n      42,\n      \"items\",\n      true,\n      {\n        \"sub1\": \"some string\",\n        \"sub2\": {\n          \"sub2sub1\": false,\n          \"sub2sub2\": 123\n        }\n      }\n    ]",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "visitor",
  "package_url": "https://pypi.org/project/visitor/",
  "project_url": "https://pypi.org/project/visitor/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://github.com/mbr/visitor"
  },
  "release_url": "https://pypi.org/project/visitor/0.1.3/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a tiny pythonic visitor implementation.",
  "version": "0.1.3",
  "releases": [],
  "developers": [
    "git@marcbrinkmann.de",
    "marc_brinkmann"
  ],
  "kwds": "visit_dict jsonencoder escape_str visit_str visitor_pattern",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_visitor",
  "homepage": "http://github.com/mbr/visitor",
  "release_count": 5,
  "dependency_ids": []
}
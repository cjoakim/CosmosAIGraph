{
  "classifiers": [
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "signalfx was acquired by splunk in october 2019. see https://www.splunk.com/en_us/investor-relations/acquisitions/signalfx.html for more information.\n\npython client library for signalfx\n==================================\n\nthis is a programmatic interface in python for signalfx's metadata and\ningest apis. it is meant to provide a base for communicating with\nsignalfx apis that can be easily leveraged by scripts and applications\nto interact with signalfx or report metric and event data to signalfx.\nit is also the base for metric reporters that integrate with common\npython-based metric collections tools or libraries.\n\ninstallation\n------------\n\nto install with `pip`:\n\n.. code:: console\n\n    $ pip install signalfx\n\nto install from source:\n\n.. code:: console\n\n    $ git clone https://github.com/signalfx/signalfx-python.git\n    $ cd signalfx-python/\n    $ pip install -e .\n\nusage\n-----\n\nthis client library provides programmatic access to signalfx's apis:\n\n* the data ingest api;\n* the metadata rest api;\n* the signalflow api.\n\nyou start by instantiating a ``signalfx.signalfx()`` object, which then gives\nyou access to the api client that you want:\n\n.. code:: python\n\n    import signalfx\n\n    sfx = signalfx.signalfx(api_endpoint='https://api.{realm}.signalfx.com',\n            ingest_endpoint='https://ingest.{realm}.signalfx.com',\n            stream_endpoint='https://stream.{realm}.signalfx.com')\n\n\n    # for the ingest api\n    ingest = sfx.ingest('org_token')\n\n    # for the rest api\n    rest = sfx.rest('api_token')\n\n    # for the signalflow api\n    flow = sfx.signalflow('access_token')\n\nif no endpoints are set manually, this library uses the ``us0`` realm by default.\nif you are not in this realm, you will need to explicitly set the\nendpoint urls above. to determine if you are in a different realm and need to\nexplicitly set the endpoints, check your profile page in the signalfx\nweb application. you will also need to specify an access token when requesting\none of those clients. for the ingest client, you need to specify your\norganization access token (which can be obtained from the\nsignalfx organization you want to report data into). for the rest api,\nyou must use your user access token. for the signalflow client, either an\norganization access token or a user access token may be used. for more\ninformation on access tokens, see the api's `authentication documentation`_.\n\n.. _authentication documentation: https://developers.signalfx.com/basics/authentication.html\n\nreporting data\n~~~~~~~~~~~~~~\n\nbasic usage of the library for reporting data goes as follows:\n\n.. code:: python\n\n    import signalfx\n\n    with signalfx.signalfx().ingest('org_token') as sfx:\n        sfx.send(\n            gauges=[\n              {'metric': 'myfunc.time',\n               'value': 532,\n               'timestamp': 1442960607000},\n              ...\n            ],\n            counters=[\n              {'metric': 'myfunc.calls',\n               'value': 42,\n               'timestamp': 1442960607000},\n              ...\n            ],\n            cumulative_counters=[\n              {'metric': 'myfunc.calls_cumulative',\n               'value': 10,\n               'timestamp': 1442960607000},\n              ...\n            ])\n\nif you're sending data from multiple places in your code, you should create\nyour ingest client once and use it throughout your application. each ingest\nclient instance has an internal queue of datapoints and events that need to be\nsent to signalfx, as well as an internal thread draining that queue. **when you\nno longer need the client instance, make sure you call** ``.stop()`` **on it to\nensure the queue is fully drained.**\n\n.. code:: python\n\n    import signalfx\n\n    sfx = signalfx.signalfx().ingest('org_token')\n    try:\n        sfx.send(...)\n        sfx.send(...)\n    finally:\n        # make sure that everything gets sent.\n        sfx.stop()\n\nthe ``timestamp`` must be a millisecond precision timestamp; the number of\nmilliseconds elapsed since epoch. the ``timestamp`` field is optional, but\nstrongly recommended. if not specified, it will be set by signalfx's ingest\nservers automatically; in this situation, the timestamp of your datapoints will\nnot accurately represent the time of their measurement (network latency,\nbatching, etc. will all impact when those datapoints actually make it to\nsignalfx).\n\nwhen sending datapoints with multiple calls to ``send()``, it is recommended to\nre-use the same signalfx client object for each ``send()`` call.\n\nif you must use multiple client objects for the same token, which is not\nrecommended, it is important to call ``stop()`` after making all ``send()``\ncalls. each signalfx client object uses a background thread to send datapoints\nwithout blocking the caller. calling ``stop()`` will gracefully flush the\nthread's send queue and close its tcp connections.\n\nsending multi-dimensional data\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nreporting dimensions for the data is also optional, and can be accomplished by\nspecifying a ``dimensions`` parameter on each datapoint containing a dictionary\nof string to string key/value pairs representing the dimensions:\n\n.. code:: python\n\n    import signalfx\n\n    with signalfx.signalfx().ingest('org_token') as sfx:\n        sfx.send(\n            gauges=[\n              {\n                'metric': 'myfunc.time',\n                'value': 532,\n                'timestamp': 1442960607000,\n                'dimensions': {'host': 'server1', 'host_ip': '1.2.3.4'}\n              },\n              ...\n            ], ...)\n\nsee `examples/generic_usecase.py`_ for a complete code sample showing how to\nsend data to signalfx.\n\n.. _examples/generic_usecase.py: examples/generic_usecase.py\n\nsending events\n~~~~~~~~~~~~~~\n\nevents can be sent to signalfx via the ``send_event()`` function. the event\ntype must be specified, and dimensions and extra event properties can be\nsupplied as well.\n\n.. code:: python\n\n    import signalfx\n\n    with signalfx.signalfx().ingest('org_token') as sfx:\n        sfx.send_event(\n            event_type='deployments',\n            dimensions={\n                'host': 'myhost',\n                'service': 'myservice',\n                'instance': 'myinstance'},\n            properties={\n                'version': '2015.04.29-01'})\n\nmetric metadata and tags\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe library includes functions to search, retrieve, and update metric\nmetadata and tags. deleting tags is also supported.\n\n.. code:: python\n\n    import signalfx\n\n    with signalfx.signalfx().rest('org_token') as sfx:\n        sfx.update_tag('tag_name',\n                       description='an example tag',\n                       custom_properties={'version': 'some_number'})\n\naws integration\n~~~~~~~~~~~~~~~\n\noptionally, the client may be configured to append additional dimensions to all\nmetrics and events sent to signalfx. one use case for this is to append the aws\nunique id of the current host as an extra dimension. for example,\n\n.. code:: python\n\n    import signalfx\n    from signalfx.aws import aws_id_dimension, get_aws_unique_id\n\n    sfx = signalfx.signalfx().ingest('org_token')\n\n    # this dimension will be added to all datapoints sent.\n    sfx.add_dimensions({aws_id_dimension: get_aws_unique_id()})\n\n    try:\n        sfx.send(\n            gauges=[\n              {\n                'metric': 'myfunc.time',\n                'value': 532,\n                'timestamp': 1442960607000,\n                'dimensions': {'host': 'server1', 'host_ip': '1.2.3.4'}\n              },\n            ])\n    finally:\n        sfx.stop()\n\npyformance reporter\n~~~~~~~~~~~~~~~~~~~\n\n``pyformance`` is a python library that provides codahale-style metrics in a\nvery pythonic way. we offer a reporter that can report the ``pyformance``\nmetric registry data directly to signalfx.\n\n.. code:: python\n\n    from signalfx.pyformance import (count_calls, count_calls_with_dims,\n                                     gauge, signalfxreporter)\n\n    @count_calls\n    def callme():\n        # whatever\n        pass\n\n    @count_calls_with_dims(dimension_key=\"dimension_value\")\n    def callme_with_dims():\n        # whatever\n        pass\n\n    sfx = signalfxreporter(token='org_token')\n    sfx.start()\n\n    callme()\n    callme()\n    callme_with_dims()\n    callme_with_dims()\n    gauge('test').set_value(42)\n\nsee `examples/pyformance_usecase.py`_ for a complete code example using pyformance.\n\n.. _examples/pyformance_usecase.py: examples/pyformance_usecase.py\n\nexecuting signalflow computations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsignalflow is signalfx's real-time analytics computation language. the\nsignalflow api allows signalfx users to execute real-time streaming analytics\ncomputations on the signalfx platform. for more information, head over to our\ndevelopers documentation:\n\n* `signalflow overview`_\n* `signalflow api reference`_\n\n.. _signalflow overview: https://developers.signalfx.com/signalflow_analytics/signalflow_overview.html\n.. _signalflow api reference: https://developers.signalfx.com/signalflow_reference.html\n\nthe signalflow client accepts either an organization access token or a user api token.\nexecuting a signalflow program is very simple with this client library:\n\n.. code:: python\n\n    import signalfx\n\n    program = \"data('cpu.utilization').mean().publish()\"\n    with signalfx.signalfx().signalflow('access_token') as flow:\n        print('executing {0} ...'.format(program))\n        computation = flow.execute(program)\n        for msg in computation.stream():\n            if isinstance(msg, signalfx.signalflow.messages.datamessage):\n                print('{0}: {1}'.format(msg.logical_timestamp_ms, msg.data))\n            if isinstance(msg, signalfx.signalflow.messages.eventmessage):\n                print('{0}: {1}'.format(msg.timestamp_ms, msg.properties))\n\nmetadata about the streamed timeseries is received from ``.stream()``, but it\nis automatically intercepted by the client library and made available through\nthe ``computation`` object returned by ``execute()``:\n\n.. code:: python\n\n    if isinstance(msg, signalfx.signalflow.messages.datamessage):\n        for tsid, value in msg.data.items():\n            metadata = computation.get_metadata(tsid)\n            # display metadata and datapoint value as desired\n\nfor more examples of how to execute signalflow computation with this library,\ninterpret and use the returned stream messages, you can look at the simple\nexample in `examples/signalflow/basic.py` or at the `signalflow cli`_ and its\nimplementation which uses this library.\n\n.. _examples/signalflow/basic.py: examples/signalflow/basic.py\n.. _signalflow cli: https://github.com/signalfx/signalflow-cli\n\nbuilding a pandas dataframe from signalflow output\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwith the signalflow output being programmatically accessible, it's easy to\nconvert this data into any form that you need for further use or analysis. one\nsuch use case is to build a `pandas dataframe`_ with the computation's output.\nfor a complete example of how to do this, see\n`examples/signalflow/dataframe.py`.\n\n.. _examples/signalflow/dataframe.py: examples/signalflow/dataframe.py\n.. _pandas dataframe: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.html\n\nknown issues\n------------\n\nsending only 1 datapoint and not seeing it in the chart\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe reason you are not seeing the metrics in the chart is because the script\nthat is calling the python client module is exiting right after calling the\nsend method. the python client library is mainly targeted towards sending a\ncontinuous stream of metrics and was implemented to be asynchronous.\n\nto work around this problem (most common in short-lived scripts for example),\nregister an ``atexit`` function to cleanly stop the datapoint sending thread\nwhen your program exits:\n\n.. code:: python\n\n    import atexit\n    import signalfx\n\n    sfx = signalfx.signalfx().ingest('org_token')\n    atexit.register(sfx.stop)\n\nsslerror when working with tags, metrics, dimensions, metrictimeseries, organization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: console\n\n    error:root:posting to signalfx failed.\n    sslerror: hostname 'api.signalfx.com' doesn't match either of '*.signalfuse.com', 'signalfuse.com'.\n\nroot cause: signalfx's api endpoints (``api.signalfx.com``,\n``ingest.signalfx.com`` and ``stream.signalfx.com``) have ssl sni enabled and\nthe ``urllib3`` module in python versions prior to 2.7.8 had a bug that causes\nthe above issue. this was fixed in later versions of python; we recommend using\npython 2.7.9 or newer when using this library.\n\nexceeding int64 integer sizes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe protocol buffer used to transmit data through the ingest api restricts\nintegers and longs to (``-(2**63)`` to ``(2**63)-1``).  ``long`` values in\npython 2.x and ``int`` values in 3.x can exceed these values.  any value or\nproperty value less than ``-(2**63)`` or greater than ``(2**63)-1`` will raise\na ``valueerror`` exception.\n\nlicense\n-------\n\napache software license v2. copyright \u00a9 2014-2019 signalfx\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license v2",
  "name": "signalfx",
  "package_url": "https://pypi.org/project/signalfx/",
  "project_url": "https://pypi.org/project/signalfx/",
  "project_urls": {
    "Homepage": "https://github.com/signalfx/signalfx-python"
  },
  "release_url": "https://pypi.org/project/signalfx/1.1.16/",
  "requires_dist": [
    "certifi",
    "protobuf (<4.21.0,>=3.0.0)",
    "pyformance (>=0.3.1)",
    "requests (>=2.7.0)",
    "sseclient-py (>=1.4)",
    "urllib3 (>=1.15.1)",
    "six (>=1.6.0)",
    "ws4py (>=0.4.1)"
  ],
  "requires_python": "",
  "summary": "signalfx python library",
  "version": "1.1.16",
  "releases": [],
  "developers": [
    "info@signalfx.com",
    "signalfx"
  ],
  "kwds": "signalfx splunk signalfxreporter signalflow_analytics signalfuse",
  "license_kwds": "apache software license v2",
  "libtype": "pypi",
  "id": "pypi_signalfx",
  "homepage": "https://github.com/signalfx/signalfx-python",
  "release_count": 42,
  "dependency_ids": [
    "pypi_certifi",
    "pypi_protobuf",
    "pypi_pyformance",
    "pypi_requests",
    "pypi_six",
    "pypi_sseclient_py",
    "pypi_urllib3",
    "pypi_ws4py"
  ]
}
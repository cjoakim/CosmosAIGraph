{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "==========\ngraphql ws\n==========\n\nwebsocket backend for graphql subscriptions.\n\nsupports the following application servers:\n\npython 3 application servers, using asyncio:\n\n    * `aiohttp`_\n    * `websockets compatible servers`_ such as sanic\n      (via `websockets <https://github.com/aaugustin/websockets/>`__ library)\n    * `django v2+`_\n\npython 2 application servers:\n\n    * `gevent compatible servers`_ such as flask\n    * `django v1.x`_\n      (via `channels v1.x <https://channels.readthedocs.io/en/1.x/inshort.html>`__)\n\n\ninstallation instructions\n=========================\n\nfor instaling graphql-ws, just run this command in your shell\n\n.. code:: bash\n\n    pip install graphql-ws\n\n\nexamples\n========\n\npython 3 servers\n----------------\n\ncreate a subscribable schema like this:\n\n.. code:: python\n\n    import asyncio\n    import graphene\n\n\n    class query(graphene.objecttype):\n        hello = graphene.string()\n\n        @staticmethod\n        def resolve_hello(obj, info, **kwargs):\n            return \"world\"\n\n\n    class subscription(graphene.objecttype):\n        count_seconds = graphene.float(up_to=graphene.int())\n\n        async def resolve_count_seconds(root, info, up_to):\n            for i in range(up_to):\n                yield i\n                await asyncio.sleep(1.)\n            yield up_to\n\n\n    schema = graphene.schema(query=query, subscription=subscription)\n\naiohttp\n~~~~~~~\n\nthen just plug into your aiohttp server.\n\n.. code:: python\n\n    from graphql_ws.aiohttp import aiohttpsubscriptionserver\n    from .schema import schema\n\n    subscription_server = aiohttpsubscriptionserver(schema)\n\n\n    async def subscriptions(request):\n        ws = web.websocketresponse(protocols=('graphql-ws',))\n        await ws.prepare(request)\n\n        await subscription_server.handle(ws)\n        return ws\n\n\n    app = web.application()\n    app.router.add_get('/subscriptions', subscriptions)\n\n    web.run_app(app, port=8000)\n\nyou can see a full example here:\nhttps://github.com/graphql-python/graphql-ws/tree/master/examples/aiohttp\n\n\nwebsockets compatible servers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nworks with any framework that uses the websockets library for its websocket\nimplementation. for this example, plug in your sanic server.\n\n.. code:: python\n\n    from graphql_ws.websockets_lib import wslibsubscriptionserver\n    from . import schema\n\n    app = sanic(__name__)\n\n    subscription_server = wslibsubscriptionserver(schema)\n\n    @app.websocket('/subscriptions', subprotocols=['graphql-ws'])\n    async def subscriptions(request, ws):\n        await subscription_server.handle(ws)\n        return ws\n\n\n    app.run(host=\"0.0.0.0\", port=8000)\n\n\ndjango v2+\n~~~~~~~~~~\n\n\ndjango channels 2\n~~~~~~~~~~~~~~~~~\n\nset up with django channels just takes three steps:\n\n1. install the apps\n2. set up your schema\n3. configure the channels router application\n\nfirst ``pip install channels`` and it to your ``installed_apps``. if you\nwant graphiql, install the ``graphql_ws.django`` app before\n``graphene_django`` to serve a graphiql template that will work with\nwebsockets:\n\n.. code:: python\n\n    installed_apps = [\n        \"channels\",\n        \"graphql_ws.django\",\n        \"graphene_django\",\n        # ...\n    ]\n\npoint to your schema in django settings:\n\n.. code:: python\n\n    graphene = {\n        'schema': 'yourproject.schema.schema'\n    }\n\nfinally, you can set up channels routing yourself (maybe using\n``graphql_ws.django.routing.websocket_urlpatterns`` in your\n``urlrouter``), or you can just use one of the preset channels\napplications:\n\n.. code:: python\n\n    asgi_application = 'graphql_ws.django.routing.application'\n    # or\n    asgi_application = 'graphql_ws.django.routing.auth_application'\n\nrun ``./manage.py runserver`` and go to\n`http://localhost:8000/graphql <http://localhost:8000/graphql>`__ to test!\n\n\npython 2  servers\n-----------------\n\ncreate a subscribable schema like this:\n\n.. code:: python\n\n    import graphene\n    from rx import observable\n\n\n    class query(graphene.objecttype):\n        hello = graphene.string()\n\n        @staticmethod\n        def resolve_hello(obj, info, **kwargs):\n            return \"world\"\n\n\n    class subscription(graphene.objecttype):\n        count_seconds = graphene.float(up_to=graphene.int())\n\n        async def resolve_count_seconds(root, info, up_to=5):\n            return observable.interval(1000)\\\n                             .map(lambda i: \"{0}\".format(i))\\\n                             .take_while(lambda i: int(i) <= up_to)\n\n\n    schema = graphene.schema(query=query, subscription=subscription)\n\ngevent compatible servers\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthen just plug into your gevent server, for example, flask:\n\n.. code:: python\n\n    from flask_sockets import sockets\n    from graphql_ws.gevent import geventsubscriptionserver\n    from schema import schema\n\n    subscription_server = geventsubscriptionserver(schema)\n    app.app_protocol = lambda environ_path_info: 'graphql-ws'\n\n\n    @sockets.route('/subscriptions')\n    def echo_socket(ws):\n        subscription_server.handle(ws)\n        return []\n\nyou can see a full example here:\nhttps://github.com/graphql-python/graphql-ws/tree/master/examples/flask_gevent\n\ndjango v1.x\n~~~~~~~~~~~\n\nfor django v1.x and django channels v1.x, setup your schema in ``settings.py``\n\n.. code:: python\n\n    graphene = {\n        'schema': 'yourproject.schema.schema'\n    }\n\nthen ``pip install \"channels<1\"`` and it to your django apps, adding the\nfollowing to your ``settings.py``\n\n.. code:: python\n\n    channels_ws_protocols = [\"graphql-ws\", ]\n    channel_layers = {\n        \"default\": {\n            \"backend\": \"asgiref.inmemory.channellayer\",\n            \"routing\": \"django_subscriptions.urls.channel_routing\",\n        },\n    }\n\nand finally add the channel routes\n\n.. code:: python\n\n    from channels.routing import route_class\n    from graphql_ws.django_channels import graphqlsubscriptionconsumer\n\n    channel_routing = [\n        route_class(graphqlsubscriptionconsumer, path=r\"^/subscriptions\"),\n    ]\n\nyou can see a full example here:\nhttps://github.com/graphql-python/graphql-ws/tree/master/examples/django_subscriptions\n\n\n",
  "docs_url": null,
  "keywords": "graphql,subscriptions,graphene,websockets",
  "license": "mit",
  "name": "graphql-ws",
  "package_url": "https://pypi.org/project/graphql-ws/",
  "project_url": "https://pypi.org/project/graphql-ws/",
  "project_urls": {
    "Homepage": "https://github.com/graphql-python/graphql-ws"
  },
  "release_url": "https://pypi.org/project/graphql-ws/0.4.4/",
  "requires_dist": [
    "graphql-core (==2.*)",
    "flake8 (<4,>=3.7) ; extra == 'dev'",
    "black ; extra == 'dev'",
    "tox (<4,>=3) ; extra == 'dev'",
    "Sphinx (<2,>=1.8) ; extra == 'dev'",
    "bumpversion (>=0.5.3) ; extra == 'maintainer'",
    "wheel (>=0.33.6) ; extra == 'maintainer'",
    "PyYAML (<6,>=5.3) ; extra == 'maintainer'",
    "pytest-cov ; extra == 'test'",
    "graphene (<3,>=2.0) ; extra == 'test'",
    "gevent ; extra == 'test'",
    "graphene-django ; extra == 'test'",
    "pytest (<5,>=4) ; (python_version < \"3\") and extra == 'test'",
    "mock ; (python_version < \"3\") and extra == 'test'",
    "django (==1.11.*) ; (python_version < \"3\") and extra == 'test'",
    "channels (==1.*) ; (python_version < \"3\") and extra == 'test'",
    "pytest (>5) ; (python_version >= \"3\") and extra == 'test'",
    "django (==3.*) ; (python_version >= \"3\") and extra == 'test'",
    "channels (==3.*) ; (python_version >= \"3\") and extra == 'test'",
    "pytest-asyncio ; (python_version >= \"3.4\") and extra == 'test'",
    "aiohttp ; (python_version >= \"3.5\") and extra == 'test'"
  ],
  "requires_python": "",
  "summary": "websocket backend for graphql subscriptions",
  "version": "0.4.4",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "graphene_django websockets_lib graphql_ws websocket websockets",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_graphql_ws",
  "homepage": "https://github.com/graphql-python/graphql-ws",
  "release_count": 5,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_black",
    "pypi_bumpversion",
    "pypi_channels",
    "pypi_django",
    "pypi_flake8",
    "pypi_gevent",
    "pypi_graphene",
    "pypi_graphene_django",
    "pypi_graphql_core",
    "pypi_mock",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_cov",
    "pypi_pyyaml",
    "pypi_sphinx",
    "pypi_tox",
    "pypi_wheel"
  ]
}
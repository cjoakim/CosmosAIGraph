{
  "classifiers": [],
  "description": "<!--- spdx-license-identifier: apache-2.0 -->\n\n# onnx optimizer\n\n[![pypi version](https://img.shields.io/pypi/v/onnxoptimizer.svg)](https://pypi.python.org/pypi/onnxoptimizer/)\n[![pypi license](https://img.shields.io/pypi/l/onnxoptimizer.svg)](https://pypi.python.org/pypi/onnxoptimizer/)\n[![prs welcome](https://img.shields.io/badge/prs-welcome-brightgreen.svg)](https://github.com/onnx/optimizer/pulls)\n\n## introduction\n\nonnx provides a c++ library for performing arbitrary optimizations on onnx models, as well as a growing list of prepackaged optimization passes.\n\nthe primary motivation is to share work between the many onnx backend implementations. not all possible optimizations can be directly implemented on onnx graphs - some will need additional backend-specific information - but many can, and our aim is to provide all such passes along with onnx so that they can be re-used with a single function call.\n\nyou may be interested in invoking the provided passes, or in implementing new ones (or both).\n\n## installation\n\nyou can install onnxoptimizer from pypi:\n\n```bash\npip3 install onnxoptimizer\n```\n\nnote that you may need to upgrade your pip first if you have trouble:\n\n```bash\npip3 install -u pip\n```\n\nif you want to build from source:\n\n```bash\ngit clone --recursive https://github.com/onnx/optimizer onnxoptimizer\ncd onnxoptimizer\npip3 install -e .\n```\n\nnote that you need to install protobuf before building from source.\n\n\n## command-line api\nnow you can use command-line api in terminal instead of  python script.\n\n```\npython -m onnxoptimizer input_model.onnx output_model.onnx\n```\n\narguments list is following:\n```\n# python3 -m onnxoptimizer -h                                 \nusage: python -m onnxoptimizer input_model.onnx output_model.onnx \n\nonnxoptimizer command-line api\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --print_all_passes    print all available passes\n  --print_fuse_elimination_passes\n                        print all fuse and elimination passes\n  -p [passes ...], --passes [passes ...]\n                        list of optimization passes name, if no set, fuse_and_elimination_passes will be used\n  --fixed_point         fixed point\n```\n## roadmap\n\n* more built-in pass\n* separate graph rewriting and constant folding (or a pure graph rewriting mode, see [issue #9](https://github.com/onnx/optimizer/issues/9) for the details)\n\n## relevant tools\n\n* [onnx-simplifier](https://github.com/daquexian/onnx-simplifier): a handy and popular tool based on onnxoptimizer\n\n* [convertmodel.com](https://convertmodel.com/#outputformat=onnx&inputformat=onnx): onnx optimizer compiled as webassembly so that it can be used out-of-the-box\n\n## code of conduct\n\n[onnx open source code of conduct](https://onnx.ai/codeofconduct.html)\n",
  "docs_url": null,
  "keywords": "deep-learning onnx",
  "license": "apache license v2.0",
  "name": "onnxoptimizer",
  "package_url": "https://pypi.org/project/onnxoptimizer/",
  "project_url": "https://pypi.org/project/onnxoptimizer/",
  "project_urls": {
    "Homepage": "https://github.com/onnx/optimizer"
  },
  "release_url": "https://pypi.org/project/onnxoptimizer/0.3.13/",
  "requires_dist": [
    "onnx",
    "mypy (==0.600) ; extra == 'mypy'"
  ],
  "requires_python": "",
  "summary": "open neural network exchange",
  "version": "0.3.13",
  "releases": [],
  "developers": [
    "onnx-technical-discuss@lists.lfai.foundation",
    "onnx_optimizer_authors"
  ],
  "kwds": "onnxoptimizer optimizer optimizations spdx onnx",
  "license_kwds": "apache license v2.0",
  "libtype": "pypi",
  "id": "pypi_onnxoptimizer",
  "homepage": "https://github.com/onnx/optimizer",
  "release_count": 23,
  "dependency_ids": [
    "pypi_mypy",
    "pypi_onnx"
  ]
}
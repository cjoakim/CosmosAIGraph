{
  "classifiers": [
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: communications"
  ],
  "description": "cloudfoundry python client\n==========================\n.. image:: https://img.shields.io/pypi/v/cloudfoundry-client.svg\n    :target: https://pypi.python.org/pypi/cloudfoundry-client\n\n.. image:: https://img.shields.io/github/license/antechrestos/cf-python-client.svg\n    :target: https://raw.githubusercontent.com/antechrestos/cf-python-client/master/license\n\nthe cf-python-client repo contains a python client library for cloud foundry. \n\ninstalling\n----------\n\nsupported versions\n~~~~~~~~~~~~~~~~~~\n\n- starting version ``1.11.0``, versions older than python ``3.6.0`` will not be supported anymore. this late version was released by the end 2016.\n  for those that are still using python 2.7, it won't be supported by the end of 2020 and all library shall stop supporting it.\n- starting version ``1.25.0``, versions older than python ``3.7.0`` will not be supported anymore.\n\nsee `official documentation`_.\n\n.. _`official documentation`: https://endoflife.date/python\n\n\nfrom pip\n~~~~~~~~\n\n.. code-block:: bash\n\n    $ pip install cloudfoundry-client\n\nfrom sources\n~~~~~~~~~~~~\n\nto build the library run :\n\n.. code-block:: bash\n\n    $ python setup.py install\n\n\nrun the client\n--------------\nto run the client, enter the following command :\n\n.. code-block:: bash\n\n    $ cloudfoundry-client\n\nthis will explains you how the client works. at first execution, it will ask you information about the platform you want to reach (url, login and so on).\nplease note that your credentials won't be saved on your disk: only tokens will be kept for further use.\n\nuse the client in your code\n---------------------------\nyou may build the client and use it in your code\n\nclient\n~~~~~~\nto instantiate the client, nothing easier\n\n.. code-block:: python\n\n    from cloudfoundry_client.client import cloudfoundryclient\n    target_endpoint = 'https://somewhere.org'\n    proxy = dict(http=os.environ.get('http_proxy', ''), https=os.environ.get('https_proxy', ''))\n    client = cloudfoundryclient(target_endpoint, proxy=proxy, verify=false)\n    # init with user credentials\n    client.init_with_user_credentials('login', 'password')\n    # init with refresh token (that will retrieve a fresh access token)\n    client.init_with_token('refresh-token')\n    # init with access and refresh token (if the above method is not convenient)\n    client.refresh_token = 'refresh-token'\n    client._access_token = 'access-token'\n\nyou can also instantiate the client by reading the config file generated by `cf login`, which allows for authenticating via sso and ldap:\n\n.. code-block:: python\n\n    # init with endpoint & token from the cf cli config file\n    from cloudfoundry_client.client import cloudfoundryclient\n\n    # use the default file, i.e. ~/.cf/config.json\n    client = cloudfoundryclient.build_from_cf_config()\n    # or specify an alternative path\n    # - other kwargs can be passed through to cloudfoundryclient instantiation\n    client = cloudfoundryclient.build_from_cf_config(config_path=\"some/path/config.json\", proxy=proxy, verify=false)\n\nit can also be instantiated with oauth code flow if you possess a dedicated oauth application with its redirection\n\n.. code-block:: python\n\n    from flask import request\n    from cloudfoundry_client.client import cloudfoundryclient\n    target_endpoint = 'https://somewhere.org'\n    proxy = dict(http=os.environ.get('http_proxy', ''), https=os.environ.get('https_proxy', ''))\n    client = cloudfoundryclient(target_endpoint, proxy=proxy, verify=false, client_id='my-client-id', client_secret='my-client-secret')\n\n    @app.route('/login')\n    def login():\n        global client\n        return redirect(client.generate_authorize_url('http://localhost:9999/code', '666'))\n\n    @app.route('/code')\n    def code():\n        global client\n        client.init_authorize_code_process('http://localhost:9999/code', request.args.get('code'))\n\n\nand then you can use it as follows:\n\n.. code-block:: python\n\n    for organization in client.v2.organizations:\n        print(organization['metadata']['guid'])\n\napi v2\n-------\n\nentities\n~~~~~~~~\nentities returned by api v2 calls (*organization*, *space*, *app*..) are navigable ie you can call the method associated with the *xxx_url* entity attribute\n(note that if the attribute's name ends with a list, it will be interpreted as a list of object. other wise you will get a single entity).\n\n.. code-block:: python\n\n    for organization in client.v2.organizations:\n        for space in organization.spaces(): # perform a get on spaces_url attribute\n            organization_reloaded = space.organization()  # perform a get on organization_url attribute\n\napplication object provides more methods such as\n - instances\n - stats\n - start\n - stop\n - summary\n\nas instance, you can get all the summaries as follows:\n\nor else:\n\n.. code-block:: python\n\n    for app in client.v2.apps:\n        print(app.summary())\n\navailable managers\n~~~~~~~~~~~~~~~~~~\nso far the implemented managers that are available are:\n\n- ``service_plans``\n- ``service_plan_visibilities``\n- ``service_instances``\n- ``service_keys``\n- ``service_bindings``\n- ``service_brokers``\n- ``apps``\n- ``events``\n- ``buildpacks``\n- ``organizations``\n- ``spaces``\n- ``services``\n- ``routes``\n- ``shared_domains``\n- ``private_domains``\n- ``security_groups``\n\nnote that even if, while navigating, you reach an entity manager that does not exist, the get will be performed and you will get the expected entities.\nfor example, event entity manager is not yet implemented but you can do\n\n.. code-block:: python\n\n    for app in client.v2.apps:\n        for event in app.events():\n            handle_event_object()\n\nall managers provide the following methods:\n\n- ``list(**kwargs)``: return an *iterator* on entities, according to the given filtered parameters\n- ``get_first(**kwargs)``: return the first matching entity according to the given parameters. returns ```none`` if none returned\n- ``get``: perform a **get** on the entity. if the entity cannot be find it will raise an exception due to http *not found* response status\n- ``__iter__``: iteration on the manager itself. alias for a no-filter list\n- ``__getitem__``: alias for the ``get`` operation\n- ``_create``: the create operation. since it is a generic operation (only takes a *dict* object), this operation is protected\n- ``_update``: the update operation. since it is a generic operation (only takes a the resource id and a *dict* object), this operation is protected\n- ``_remove``: the delete operation. this operation is maintained protected.\n\n.. code-block:: python\n\n    # assume you have an organization named `test-org` with a guid of `test-org-guid`\n    org_get = client.v2.organizations.get('test-org-guid')\n    org_get_first = client.v2.organizations.get_first(**{'name': 'test-org'})\n    org_from_list = list(client.v2.organizations.list(**{'name': 'test-org'}))[0]\n    assert org_get == org_get_first == org_from_list\n\n    # you can also specify multiple values for a query parameter.\n    for organization in client.v2.organizations.list(**{'name': ['org1', 'org2']}):\n        print(organization['metadata']['guid'])\n\n    # order and paging parameters are also supported.\n    query = {\n    \t'order-by': 'name',\n    \t'order-direction': 'desc',\n    \t'results-per-page': 100\n    }\n    for organization in client.v2.organizations.list(**query):\n        print(organization['entity']['name'])\n\napi v3\n------\n\nentities\n~~~~~~~~\n\nentities returned by api v3 calls transcripts links by providing a call on the object with the name of the link itself.\nlet's explain it with the next code\n\n.. code-block:: python\n\n  for app in client.v3.apps.list(space_guids='space_guid'):\n    for task in app.tasks():\n        print('task %s' % task['guid'])\n    app.stop()\n    space = app.space()\n\nanother example:\n\n.. code-block:: python\n\n    app = client.v3.apps['app-guid']\n    for task in app.tasks():\n        task.cancel()\n    for task in client.v3.tasks.list(app_guids=['app-guid-1', 'app-guid-2']):\n        task.cancel()\n\nwhen supported by the api, parent entities can be included in a single call. the included entities replace the links mentioned above.\nthe following code snippet issues three requests to the api in order to get app, space and organization data:\n\n.. code-block:: python\n\n  app = client.v3.apps.get(\"app-guid\")\n  print(\"app name: %s\" % app[\"name\"])\n  space = app.space()\n  print(\"space name: %s\" % space[\"name\"])\n  org = space.organization()\n  print(\"org name: %s\" % org[\"name\"])\n\nby changing the first line only, a single request fetches all the data. the navigation from app to space and space to organization remains unchanged.\n\n.. code-block:: python\n\n  app = client.v3.apps.get(\"app-guid\", include=\"space.organization\")\n\navailable managers on api v3 are:\n\n- ``apps``\n- ``buildpacks``\n- ``domains``\n- ``feature_flags``\n- ``isolation_segments``\n- ``jobs``\n- ``organizations``\n- ``organization_quotas``\n- ``processes``\n- ``roles``\n- ``security_groups``\n- ``service_brokers``\n- ``service_credential_bindings``\n- ``service_instances``\n- ``service_offerings``\n- ``service_plans``\n- ``spaces``\n- ``tasks``\n\nthe managers provide the same methods as the v2 managers with the following differences:\n\n- ``get(**kwargs)``: supports keyword arguments that are passed on to the api, e.g. \"include\"\n\n\nnetworking\n----------\n\npolicy server\n~~~~~~~~~~~~~\n\nat the moment we have only the network policies implemented\n\n.. code-block:: python\n\n  for policy in client.network.v1.external.policies.list():\n    print('destination protocol = {}'.format(policy['destination']['protocol']))\n    print('destination from port = {}'.format(policy['destination']['ports']['start']))\n    print('destination to port = {}'.format(policy['destination']['ports']['end']))\n\n\navailable managers on api v3 are:\n\n- ``policy``\n\nthis manager provides:\n\n- ``list(**kwargs)``: return an *iterator* on entities, according to the given filtered parameters\n- ``__iter__``: iteration on the manager itself. alias for a no-filter list\n- ``_create``: the create operation. since it is a generic operation (only takes a *dict* object), this operation is protected\n- ``_remove``: the delete operation. this operation is maintained protected.\n\n\napplication logs\n----------------\n\nrecent logs of an application can be get as follows:\n\n.. code-block:: python\n\n    app = client.v2.apps['app-guid']\n    for log in app.recent_logs():\n        print(log)\n\n\nlogs can also be streamed using a websocket as follows:\n\n.. code-block:: python\n\n    app = client.v2.apps['app-guid']\n    for log in app.stream_logs():\n        # read message infinitely (use break to exit... it will close the underlying websocket)\n        print(log)\n    # or\n    for log in client.doppler.stream_logs('app-guid'):\n        # read message infinitely (use break to exit... it will close the underlying websocket)\n        print(log)\n\n..\n\nlogs can also be streamed directly from rlp gateway:\n\n.. code-block:: python\n\n    import asyncio\n    from cloudfoundry_client.client import cloudfoundryclient\n\n    target_endpoint = 'https://somewhere.org'\n    proxy = dict(http=os.environ.get('http_proxy', ''), https=os.environ.get('https_proxy', ''))\n    rlp_client = cloudfoundryclient(target_endpoint, client_id='client_id', client_secret='client_secret', verify=false)\n    # init with client credentials\n    rlp_client.init_with_client_credentials()\n\n    async def get_logs_for_app(rlp_client, app_guid):\n        async for log in rlp_client.rlpgateway.stream_logs(app_guid,\n                                                           params={'counter': '', 'gauge': ''},\n                                                           headers={'user-agent': 'cf-python-client'})):\n            print(log)\n\n    loop = asyncio.get_event_loop()\n    loop.create_task(get_logs_for_app(rlp_client, \"app_guid\"))\n    loop.run_forever()\n    loop.close()\n..\n\ncommand line interface\n----------------------\n\nthe client comes with a command line interface. run ``cloudfoundry-client`` command. at first execution, it will ask you information about the target platform and your credential (do not worry they are not saved). after that you may have a help by running ``cloudfoundry-client -h``\n\noperations (experimental)\n-------------------------\n\nfor now the only operation that is implemented is the push one.\n\n.. code-block:: python\n\n    from cloudfoundry_client.operations.push.push import pushoperation\n    operation = pushoperation(client)\n    operation.push(client.v2.spaces.get_first(name='my space')['metadata']['guid'], path)\n\n\nissues and contributions\n------------------------\n\nplease submit issue/pull request.\n\nyou can run tests by doing so. in the project directory:\n\n.. code-block:: bash\n\n    $ export pythonpath=main\n    $ python -m unittest discover test\n    # or even\n    $ python setup.py test\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "cloudfoundry-client",
  "package_url": "https://pypi.org/project/cloudfoundry-client/",
  "project_url": "https://pypi.org/project/cloudfoundry-client/",
  "project_urls": {
    "Homepage": "http://github.com/antechrestos/cf-python-client"
  },
  "release_url": "https://pypi.org/project/cloudfoundry-client/1.35.2/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a client library for cloudfoundry",
  "version": "1.35.2",
  "releases": [],
  "developers": [
    "antechrestos@gmail.com",
    "benjamin_einaudi"
  ],
  "kwds": "cloudfoundry_client cloudfoundryclient cloudfoundry pip cloud",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_cloudfoundry_client",
  "homepage": "http://github.com/antechrestos/cf-python-client",
  "release_count": 83,
  "dependency_ids": []
}
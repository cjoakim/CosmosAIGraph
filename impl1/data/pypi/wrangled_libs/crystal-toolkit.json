{
  "classifiers": [],
  "description": "# crystal toolkit\n\n## citations\n\nyou can read more about crystal toolkit in our preprint, available [here](https://arxiv.org/abs/2302.06147).\n\na [citation.cff](citation.cff) file is available or a bibtex citation is as follows:\n\n```bibtex\n@article{horton2023crystal,\n  title={crystal toolkit: a web app framework to improve usability and accessibility of materials science research algorithms},\n  author={horton, matthew and shen, jimmy-xuan and burns, jordan and cohen, orion and chabbey, fran{\\c{c}}ois and ganose, alex m and guha, rishabh and huck, patrick and li, hamming howard and mcdermott, matthew and others},\n  journal={arxiv preprint arxiv:2302.06147},\n  year={2023}\n}\n```\n\n**if you use crystal toolkit, either for your own web apps, or by incorporating images generated by crystal toolkit in your work, please make sure to cite it appropriately!** citations are a good way to recognize the contributions of the crystal toolkit developers, and allow us to see how it has been used by the community.\n\n## interested in contributing?\n\na current list of new contributor issues can be seen [here](https://github.com/materialsproject/crystaltoolkit/labels/new-contributor).\nif you would like a new-contributor issue assigned, get in touch with project maintainers!\n\n## status\n\n[![tests](https://github.com/materialsproject/crystaltoolkit/actions/workflows/pytest-docs.yml/badge.svg)](https://github.com/materialsproject/crystaltoolkit/actions/workflows/pytest-docs.yml)\n[![visual regression test status](https://percy.io/static/images/percy-badge.svg)](https://percy.io/6f28436a/crystaltoolkit)\n[![docker build status](https://img.shields.io/docker/cloud/build/materialsproject/crystaltoolkit)](https://hub.docker.com/repository/docker/materialsproject/crystaltoolkit/general)\n[![release](https://github.com/materialsproject/crystaltoolkit/actions/workflows/release.yml/badge.svg)](https://github.com/materialsproject/crystaltoolkit/actions/workflows/release.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/materialsproject/crystaltoolkit/main.svg)](https://results.pre-commit.ci/latest/github/materialsproject/crystaltoolkit/main)\n[![arxiv link](https://img.shields.io/badge/arxiv-2302.06147-blue)](https://arxiv.org/abs/2302.06147)\n\n## installation\n\n```sh\npip install crystal-toolkit\n```\n\n## documentation\n\ndocumentation can be found at [docs.crystaltoolkit.org](https://docs.crystaltoolkit.org).\n\n## example apps\n\n| description                                                                                                                                                                                                                                                                                                                                                               | &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; |\n| :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------ |\n| [bandstructure.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/bandstructure.py)<br>  demonstrates capabilities of the `bandstructureanddoscomponent` component                                                                                                                                                            | [![launch codespace]][create codespace]    |\n| [basic_hello_structure.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/basic_hello_structure.py)<br>  uses `structuremoleculecomponent` to show a simple `pymatgen` structure                                                                                                                                              | [![launch codespace]][create codespace]    |\n| [basic_hello_structure_interactive.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/basic_hello_structure_interactive.py)<br>  adds a button to the `basic_hello_structure.py` to toggle between two structures interactively                                                                                               | [![launch codespace]][create codespace]    |\n| [basic_hello_world.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/basic_hello_world.py)<br>  bare-bones example showing how to render the text \"hello scientist!\" in dash app                                                                                                                                             | [![launch codespace]][create codespace]    |\n| [diffraction.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/diffraction.py)<br>  demonstrates capabilities of the `xraydiffractioncomponent` component                                                                                                                                                                    | [![launch codespace]][create codespace]    |\n| [diffraction_dynamic.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/diffraction_dynamic.py)<br>  adds a button to `diffraction.py` to load a new structure on the fly                                                                                                                                                     | [![launch codespace]][create codespace]    |\n| [diffraction_empty.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/diffraction_empty.py)<br>  shows `xraydiffractioncomponent` can be mounted without a passing structure                                                                                                                                                  | [![launch codespace]][create codespace]    |\n| [kwarg_inputs.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/kwarg_inputs.py)<br>  shows off boolean input (aka toggle), matrix input and slider input components                                                                                                                                                         | [![launch codespace]][create codespace]    |\n| [phase_diagram.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/phase_diagram.py)<br>  combines `mprester.get_entries_in_chemsys()` and the `phasediagram` component to plot the li-o-co convex hull                                                                                                                        | [![launch codespace]][create codespace]    |\n| [pourbaix.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/pourbaix.py)<br>  combines `mprester.get_pourbaix_entries()` and the `pourbaixdiagramcomponent` to plot the fe-co pourbaix diagram                                                                                                                               | [![launch codespace]][create codespace]    |\n| [structure.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/structure.py)<br>  show cases multiple layout options for the `structuremoleculecomponent`                                                                                                                                                                      | [![launch codespace]][create codespace]    |\n| [structure_magnetic.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/structure_magnetic.py)<br>  plots a structure with magnetic moments                                                                                                                                                                                    | [![launch codespace]][create codespace]    |\n| [matbench_dielectric_structure_on_hover.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/matbench_dielectric_structure_on_hover.py)<br>  creates a scatter plot hooked up to a `structuremoleculecomponent` and `datatable` that show the structure and highlight the table row corresponding to the hovered scatter point. | [![launch codespace]][create codespace]    |\n| [matbench_dielectric_datatable_xrd.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/matbench_dielectric_datatable_xrd.py)<br>  renders a `datatable` hooked up to a `structuremoleculecomponent` and `xraydiffractioncomponent` so that hovering a table row will show the corresponding structure and its xrd pattern.     | [![launch codespace]][create codespace]    |\n| [transformations.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/transformations.py)<br>  combines `structuremoleculecomponent` and `alltransformationscomponent` to apply interactive structure transformations                                                                                                           | [![launch codespace]][create codespace]    |\n| [transformations_minimal.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/transformations_minimal.py)<br>  shows how to restrict the types of allowed transformations                                                                                                                                                       | [![launch codespace]][create codespace]    |\n| [write_structure_screenshot_to_file.py](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/write_structure_screenshot_to_file.py)<br>  shows to save interactive structure views as image files                                                                                                                                   | [![launch codespace]][create codespace]    |\n\n[launch codespace]: https://img.shields.io/badge/launch-codespace-darkblue?logo=github\n[create codespace]: https://github.com/codespaces/new?hide_repo_select=true&ref=main&repo=98350025\n\n## team and contribution policy\n\nthe [crystal toolkit development team](https://github.com/materialsproject/crystaltoolkit/graphs/contributors) includes:\n\n* [matthew horton](https://github.com/mkhorton), lead\n* [fran\u00e7ois chabbey](<https://github.com/chabb>) for react components\n* [jimmy shen](https://github.com/jmmshn) contributed pythreejs support, surface plotting, initial arrows/axes support, and various bug fixes\n* [joey montoya](https://github.com/josephmontoya-tri) contributed pourbaix component\n* [shyam dwaraknath](https://github.com/shyamd) for planned contributions for ellipsoid support and architectural design\n* [donny winston](https://github.com/dwinston), assisted by [tyler huntington](https://github.com/tylerhuntington), for helping embed crystal toolkit in a django app\n* [matt mcdermott](https://github.com/mattmcdermott) contributed phase diagram, x-ray diffraction, x-ray absorption spectrum components\n* [jason munro](https://github.com/munrojm) contributed band structure component\n* [janosh riebesell](https://github.com/janosh) contributed phonon band structure component, [3 example apps](https://github.com/materialsproject/crystaltoolkit/blob/main/crystal_toolkit/apps/examples/matbench_dielectric_structure_on_hover.py), tests\n* [stephen weitzner](https://github.com/sweitzner) contributed pov-ray integration (in progress)\n* [richard tran](https://github.com/ciflord) for contributing plotly-powered wulff shapes to pymatgen, which crystal toolkit uses\n* [guy moore](https://github.com/guymoore13) for contributing magnetic moment visualization\n* [steve zeltmann](https://github.com/sezelt) for contributing electron diffraction\n* [patrick huck](https://github.com/tschaume), releases, operations, bugfixes and poc for mp / mpcontribs\n\nnew contributors are welcome, please see our [code of conduct](code-of-conduct.md). if you are a new contributor please modify this readme in your pull request to add your name to the list.\n\n## future of this repository\n\nthe crystal toolkit repository is home of an object-oriented python framework for rendering materials science data based on the schema employed by the materials project.\n\nthe custom plotly dash components that power crystal toolkit are now maintained in a [separate repository](https://github.com/materialsproject/dash-mp-components) for ease of development, as well as the [custom react components](https://github.com/materialsproject/mp-react-components). these components were formerly included in the crystal toolkit repo, and are still considered part of crystal toolkit in spirit.\n\nthere are some [important issues](https://github.com/materialsproject/crystaltoolkit/issues/265) still to be resolved, as well as general improvements to documentation and test suite planned. some [currently-private code](https://github.com/materialsproject/crystaltoolkit/issues/264) is also planned to be re-incorporated into the public crystal toolkit repo.\n\n## acknowledgements\n\nthank you to all the authors and maintainers of the libraries crystal toolkit\ndepends upon, and in particular [pymatgen](http://pymatgen.org) for crystallographic\nanalysis and [dash from plotly](https://plot.ly/products/dash/) for their web app framework.\n\nthank you to the [nersc spin](https://nersc.gov/systems/spin) service for\nhosting the app and for their technical support.\n\n## contact\n\nplease contact @mkhorton with any queries or add an issue on the [github issues](https://github.com/materialsproject/crystaltoolkit/issues) page.\n",
  "docs_url": null,
  "keywords": "",
  "license": "crystal toolkit copyright (c) 2017, the regents of the university of california, through lawrence berkeley national laboratory (subject to receipt of any required approvals from the u.s. dept. of energy). all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  (1) redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  (2) redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  (3) neither the name of the university of california, lawrence berkeley national laboratory, u.s. dept. of energy nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright owner or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.  you are under no obligation whatsoever to provide any bug fixes, patches, or upgrades to the features, functionality or performance of the source code (\"enhancements\") to anyone; however, if you choose to make your enhancements available either publicly, or directly to lawrence berkeley national laboratory or its contributors, without imposing a separate written license agreement for such enhancements, then you hereby grant the following license: a  non-exclusive, royalty-free perpetual license to install, use, modify, prepare derivative works, incorporate into other computer software, distribute, and sublicense such enhancements or derivative works thereof, in binary and source code form. ",
  "name": "crystal-toolkit",
  "package_url": "https://pypi.org/project/crystal-toolkit/",
  "project_url": "https://pypi.org/project/crystal-toolkit/",
  "project_urls": {
    "docs": "https://docs.crystaltoolkit.org",
    "repo": "https://github.com/materialsproject/crystaltoolkit"
  },
  "release_url": "https://pypi.org/project/crystal-toolkit/2023.11.3/",
  "requires_dist": [
    "crystaltoolkit-extension",
    "dash-mp-components >=0.4.38",
    "dash >=2.11.0",
    "flask-caching",
    "frozendict",
    "pymatgen",
    "scikit-image",
    "scikit-learn",
    "shapely",
    "webcolors",
    "pydantic-settings",
    "mp-api",
    "black ; extra == 'dev'",
    "dash[testing] ; extra == 'dev'",
    "dephell ; extra == 'dev'",
    "jinja2 ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "recommonmark ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "ifermi ; extra == 'fermi'",
    "pyfftw ; extra == 'fermi'",
    "kaleido ; extra == 'figures'",
    "dscribe ; extra == 'localenv'",
    "robocrys ; extra == 'robocrys'",
    "dash-extensions ; extra == 'server'",
    "gunicorn[gevent] ; extra == 'server'",
    "habanero ; extra == 'server'",
    "hiphive ; extra == 'server'",
    "redis ; extra == 'server'",
    "py4DSTEM >=0.13.11 ; extra == 'temdiff'",
    "playwright ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-playwright ; extra == 'test'",
    "dash-vtk ; extra == 'vtk'"
  ],
  "requires_python": ">=3.9",
  "summary": "crystal toolkit is a web app framework from the materials project allowing python",
  "version": "2023.11.3",
  "releases": [],
  "developers": [
    "mkhorton@lbl.gov"
  ],
  "kwds": "crystal_toolkit citations crystaltoolkit crystal citation",
  "license_kwds": "copyright laboratory contributors toolkit berkeley",
  "libtype": "pypi",
  "id": "pypi_crystal_toolkit",
  "homepage": "",
  "release_count": 56,
  "dependency_ids": [
    "pypi_black",
    "pypi_crystaltoolkit_extension",
    "pypi_dash",
    "pypi_dash_extensions",
    "pypi_dash_mp_components",
    "pypi_dash_vtk",
    "pypi_dephell",
    "pypi_dscribe",
    "pypi_flask_caching",
    "pypi_frozendict",
    "pypi_gunicorn",
    "pypi_habanero",
    "pypi_hiphive",
    "pypi_ifermi",
    "pypi_jinja2",
    "pypi_kaleido",
    "pypi_mp_api",
    "pypi_playwright",
    "pypi_pre_commit",
    "pypi_py4dstem",
    "pypi_pydantic_settings",
    "pypi_pyfftw",
    "pypi_pymatgen",
    "pypi_pytest",
    "pypi_pytest_playwright",
    "pypi_recommonmark",
    "pypi_redis",
    "pypi_robocrys",
    "pypi_scikit_image",
    "pypi_scikit_learn",
    "pypi_shapely",
    "pypi_sphinx_rtd_theme",
    "pypi_webcolors"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: multimedia :: sound/audio"
  ],
  "description": "pysoundfile\n===========\n\n`pysoundfile <https://github.com/bastibe/pysoundfile>`__ is an audio\nlibrary based on libsndfile, cffi and numpy. full documentation is\navailable on http://pysoundfile.readthedocs.org/.\n\npysoundfile can read and write sound files. file reading/writing is\nsupported through `libsndfile <http://www.mega-nerd.com/libsndfile/>`__,\nwhich is a free, cross-platform, open-source (lgpl) library for reading\nand writing many different sampled sound file formats that runs on many\nplatforms including windows, os x, and unix. it is accessed through\n`cffi <http://cffi.readthedocs.org/>`__, which is a foreign function\ninterface for python calling c code. cffi is supported for cpython 2.6+,\n3.x and pypy 2.0+. pysoundfile represents audio data as numpy arrays.\n\n| pysoundfile is bsd licensed (bsd 3-clause license).\n| (c) 2013, bastian bechtold\n\n\nbreaking changes\n----------------\n\npysoundfile has evolved rapidly during the last few releases. most\nnotably, we changed the import name from ``import pysoundfile`` to\n``import soundfile`` in 0.7. in 0.6, we cleaned up many small\ninconsistencies, particularly in the the ordering and naming of\nfunction arguments and the removal of the indexing interface.\n\nin 0.8.0, we changed the default value of ``always_2d`` from ``true``\nto ``false``. also, the order of arguments of the ``write`` function\nchanged from ``write(data, file, ...)`` to ``write(file, data, ...)``.\n\nin 0.9.0, we changed the ``ctype`` arguments of the ``buffer_*``\nmethods to ``dtype``, using the numpy ``dtype`` notation. the old\n``ctype`` arguments still work, but are now officially deprecated.\n\ninstallation\n------------\n\npysoundfile depends on the python packages cffi and numpy, and the\nsystem library libsndfile.\n\nto install the python dependencies, i recommend using the `anaconda\n<http://continuum.io/downloads>`__ distribution of python 3. this will\ncome with all dependencies pre-installed. to install the dependencies\nmanually, you can use the ``conda`` package manager, which will\ninstall all dependencies using ``conda install cffi numpy`` (conda is\nalso available independently of anaconda with ``pip install conda;\nconda init``).\n\nwith cffi and numpy installed, you can use ``pip install pysoundfile``\nto download and install the latest release of pysoundfile. on windows\nand os x, this will also install the library libsndfile. on linux, you\nneed to install libsndfile using your distribution's package manager,\nfor example ``sudo apt-get install libsndfile1``.\n\nread/write functions\n--------------------\n\ndata can be written to the file using `soundfile.write()`, or read from\nthe file using `soundfile.read()`. pysoundfile can open all file formats\nthat `libsndfile supports\n<http://www.mega-nerd.com/libsndfile/#features>`__, for example wav,\nflac, ogg and mat files.\n\nhere is an example for a program that reads a wave file and copies it\ninto an ogg-vorbis file:\n\n.. code:: python\n\n    import soundfile as sf\n\n    data, samplerate = sf.read('existing_file.wav')\n    sf.write('new_file.ogg', data, samplerate)\n\nblock processing\n----------------\n\nsound files can also be read in short, optionally overlapping blocks\nwith `soundfile.blocks()`.\nfor example, this calculates the signal level for each block of a long\nfile:\n\n.. code:: python\n\n   import numpy as np\n   import soundfile as sf\n\n   rms = [np.sqrt(np.mean(block**2)) for block in\n          sf.blocks('myfile.wav', blocksize=1024, overlap=512)]\n\nsoundfile objects\n-----------------\n\nsound files can also be opened as `soundfile.soundfile` objects. every\nsoundfile has a specific sample rate, data format and a set number of\nchannels.\n\nif a file is opened, it is kept open for as long as the soundfile\nobject exists. the file closes when the object is garbage collected,\nbut you should use the `soundfile.soundfile.close()` method or the\ncontext manager to close the file explicitly:\n\n.. code:: python\n\n   import soundfile as sf\n\n   with sf.soundfile('myfile.wav', 'r+') as f:\n       while f.tell() < len(f):\n           pos = f.tell()\n           data = f.read(1024)\n           f.seek(pos)\n           f.write(data*2)\n\nall data access uses frames as index. a frame is one discrete time-step\nin the sound file. every frame contains as many samples as there are\nchannels in the file.\n\nraw files\n---------\n\npysoundfile can usually auto-detect the file type of sound files. this\nis not possible for raw files, though:\n\n.. code:: python\n\n   import soundfile as sf\n\n   data, samplerate = sf.read('myfile.raw', channels=1, samplerate=44100,\n                              subtype='float')\n\nnote that on x86, this defaults to ``endian='little'``. if you are\nreading big endian data (mostly old powerpc/6800-based files), you\nhave to set ``endian='big'`` accordingly.\n\nyou can write raw files in a similar way, but be advised that in most\ncases, a more expressive format is better and should be used instead.\n\nvirtual io\n----------\n\nif you have an open file-like object, pysoundfile can open it just like\nregular files:\n\n.. code:: python\n\n    import soundfile as sf\n    with open('filename.flac', 'rb') as f:\n        data, samplerate = sf.read(f)\n\nhere is an example using an http request:\n\n.. code:: python\n\n    import io\n    import soundfile as sf\n    from urllib.request import urlopen\n\n    url = \"http://tinyurl.com/shepard-risset\"\n    data, samplerate = sf.read(io.bytesio(urlopen(url).read()))\n\nnote that the above example only works with python 3.x.\nfor python 2.x support, replace the third line with:\n\n.. code:: python\n\n    from urllib2 import urlopen\n\nnews\n----\n\n2013-08-27 v0.1.0 bastian bechtold:\n    initial prototype. a simple wrapper for libsndfile in python\n\n2013-08-30 v0.2.0 bastian bechtold:\n    bugfixes and more consistency with pysoundcard\n\n2013-08-30 v0.2.1 bastian bechtold:\n    bugfixes\n\n2013-09-27 v0.3.0 bastian bechtold:\n    added binary installer for windows, and context manager\n\n2013-11-06 v0.3.1 bastian bechtold:\n    switched from distutils to setuptools for easier installation\n\n2013-11-29 v0.4.0 bastian bechtold:\n    thanks to david blewett, now with virtual io!\n\n2013-12-08 v0.4.1 bastian bechtold:\n    thanks to xidorn quan, flac files are not float32 any more.\n\n2014-02-26 v0.5.0 bastian bechtold:\n    thanks to matthias geier, improved seeking and a flush() method.\n\n2015-01-19 v0.6.0 bastian bechtold:\n    a big, big thank you to matthias geier, who did most of the work!\n\n    - switched to ``float64`` as default data type.\n    - function arguments changed for consistency.\n    - added unit tests.\n    - added global ``read()``, ``write()``, ``blocks()`` convenience\n      functions.\n    - documentation overhaul and hosting on readthedocs.\n    - added ``'x'`` open mode.\n    - added ``tell()`` method.\n    - added ``__repr__()`` method.\n\n2015-04-12 v0.7.0 bastian bechtold:\n    again, thanks to matthias geier for all of his hard work, but also\n    nils werner and whistler7 for their many suggestions and help.\n\n    - renamed ``import pysoundfile`` to ``import soundfile``.\n    - installation through pip wheels that contain the necessary\n      libraries for os x and windows.\n    - removed ``exclusive_creation`` argument to ``write``.\n    - added ``truncate()`` method.\n\n2015-10-20 v0.8.0 bastian bechtold:\n    again, matthias geier contributed a whole lot of hard work to this\n    release.\n\n    - changed the default value of ``always_2d`` from ``true`` to\n      ``false``.\n    - numpy is now optional, and only loaded for ``read`` and\n      ``write``.\n    - added ``soundfile.buffer_read`` and\n      ``soundfile.buffer_read_into`` and ``soundfile.buffer_write``,\n      which read/write raw data without involving numpy.\n    - added ``info`` function that returns metadata of a sound file.\n    - changed the argument order of the ``write`` function from\n      ``write(data, file, ...)`` to ``write(file, data, ...)``\n\n    and many more minor bug fixes.\n\n2017-02-02 v0.9.0 bastian bechtold:\n    thank you, matthias geier, tomas garcia, and todd, for contributions\n    for this release.\n\n    - adds support for alac files.\n    - adds new member ``__libsndfile_version__``\n    - adds number of frames to ``info`` class\n    - adds ``dtype`` argument to ``buffer_*`` methods\n    - deprecates ``ctype`` argument to ``buffer_*`` methods\n    - adds official support for python 3.6\n\n    and some minor bug fixes.",
  "docs_url": null,
  "keywords": "audio,libsndfile",
  "license": "bsd 3-clause license",
  "name": "pysoundfile",
  "package_url": "https://pypi.org/project/PySoundFile/",
  "project_url": "https://pypi.org/project/PySoundFile/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/bastibe/PySoundFile"
  },
  "release_url": "https://pypi.org/project/PySoundFile/0.9.0.post1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "an audio library based on libsndfile, cffi and numpy",
  "version": "0.9.0.post1",
  "releases": [],
  "developers": [
    "basti@bastibe.de",
    "bastian_bechtold"
  ],
  "kwds": "pysoundfile soundfile pysoundcard python audio",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_pysoundfile",
  "homepage": "https://github.com/bastibe/pysoundfile",
  "release_count": 14,
  "dependency_ids": []
}
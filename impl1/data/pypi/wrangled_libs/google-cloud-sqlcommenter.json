{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "![pypi - python version](https://img.shields.io/pypi/pyversions/google-cloud-sqlcommenter)\n![pypi](https://img.shields.io/pypi/v/google-cloud-sqlcommenter)\n![pypi - django version](https://img.shields.io/pypi/djversions/google-cloud-sqlcommenter)\n\n# sqlcommenter\n\npython modules for popular projects that add meta info to your sql queries as comments.\n\n * [django](#django)\n * [sqlalchemy](#sqlalchemy)\n * [psycopg2](#psycopg2)\n\n## local install\n\n```shell\npip3 install --user google-cloud-sqlcommenter\n```\n\nif you'd like to record the opencensus trace context as well, just install it:\n\n```shell\npip3 install google-cloud-sqlcommenter[opencensus]\n```\n\nif you'd like to record the opentelemetry trace context as well (python 3+ only),\njust install it:\n\n```shell\npip3 install google-cloud-sqlcommenter[opentelemetry]\n```\n\n## usage\n\n### django\n\nadd the provided django middleware to your django project's settings. all queries executed within the standard request\u2192response cycle will have the sql comment prepended to them.\n\n```python\nmiddleware = [\n  'google.cloud.sqlcommenter.django.middleware.sqlcommenter',\n  ...\n]\n```\n\nwhich when viewed say on postgresql logs, produces\n```shell\n2019-05-28 11:54:50.780 pdt [64128] log:  statement: insert into \"polls_question\"\n(\"question_text\", \"pub_date\") values\n('wassup?', '2019-05-28t18:54:50.767481+00:00'::timestamptz) returning\n\"polls_question\".\"id\" /*controller='index',framework='django%3a2.2.1',route='%5epolls/%24'*/\n```\nif you want the opencensus attributes included, you must set the\n``sqlcommenter_with_opencensus`` setting to ``true``.\n\nif you want the opentelemetry attributes included, you must set the\n``sqlcommenter_with_opentelemetry`` setting to ``true``.\n\nyou cannot use opentelemetry and opencensus together, as they use the same attributes.\n\n### sqlalchemy\n\nattach the provided event listener to the `before_cursor_execute` event of the database engine, with `retval=true`. all queries executed with that engine will have the sql comment prepended to them.\n\n```python\nimport sqlalchemy\nfrom google.cloud.sqlcommenter.sqlalchemy.executor import beforeexecutefactory\n\nengine = sqlalchemy.create_engine(...)\nlistener = beforeexecutefactory(\n    with_db_driver=true,\n    with_db_framework=true,\n    # you may use one of opencensus or opentelemetry\n    with_opencensus=true,\n    with_opentelemetry=true,\n)\nsqlalchemy.event.listen(engine, 'before_cursor_execute', listener, retval=true)\nengine.execute(...) # comment will be added before execution\n```\n\nwhich will produce a backend log such as when viewed on postgresql\n```shell\n2019-05-28 11:52:06.527 pdt [64087] log:  statement: select * from polls_question\n/*db_driver='psycopg2',framework='sqlalchemy%3a1.3.4',\ntraceparent='00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01',\ntracestate='congo%%3dt61rcwkgmze%%2crojo%%3d00f067aa0ba902b7'*/\n```\n\n### psycopg2\n\nuse the provided cursor factory to generate database cursors. all queries executed with such cursors will have the sql comment prepended to them.\n\n```python\nimport psycopg2\nfrom google.cloud.sqlcommenter.psycopg2.extension import commentercursorfactory\n\ncursor_factory = commentercursorfactory(\n    with_db_driver=true,\n    with_dbapi_level=true,\n    with_dbapi_threadsafety=true,\n    with_driver_paramstyle=true,\n    with_libpq_version=true,\n    # you may use one of opencensus or opentelemetry\n    with_opencensus=true,\n    with_opentelemetry=true,\n)\nconn = psycopg2.connect(..., cursor_factory=cursor_factory)\ncursor = conn.cursor()\ncursor.execute(...) # comment will be added before execution\n```\n\nwhich will produce a backend log such as when viewed on postgresql\n```shell\n2019-05-28 02:33:25.287 pdt [57302] log:  statement: select * from\npolls_question /*db_driver='psycopg2%%3a2.8.2%%20%%28dt%%20dec%%20pq3%%20ext%%20lo64%%29',\ndbapi_level='2.0',dbapi_threadsafety=2,driver_paramstyle='pyformat',\nlibpq_version=100001,traceparent='00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01',\ntracestate='congo%%3dt61rcwkgmze%%2crojo%%3d00f067aa0ba902b7'*/\n```\n\n## options\n\nwith django, each option translates to a django setting by uppercasing it and prepending `sqlcommenter_`. for example, `with_framework` is controlled by the django setting `sqlcommenter_with_framework`.\n\n| options                   | included by default? | django                                                                                                                                                                       | sqlalchemy                                                                                                                                                                   | psycopg2                                                                                                                                                                     |                          notes                          |\n| ------------------------- | :------------------: | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :-----------------------------------------------------: |\n| `with_framework`          |  :heavy_check_mark:  | [django version](https://docs.djangoproject.com/en/stable/releases/)                                                                                                         | [flask version](http://flask.pocoo.org/)                                                                                                                                     | [flask version](http://flask.pocoo.org/)                                                                                                                                     |\n| `with_controller`         |  :heavy_check_mark:  | [django view](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.resolvermatch.view_name)                                                                | [flask endpoint](http://flask.pocoo.org/docs/1.0/api/#flask.flask.endpoint)                                                                                                  | [flask endpoint](http://flask.pocoo.org/docs/1.0/api/#flask.flask.endpoint)                                                                                                  |\n| `with_route`              |  :heavy_check_mark:  | [django route](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.resolvermatch.route)                                                                   | [flask route](http://flask.pocoo.org/docs/1.0/api/#flask.flask.route)                                                                                                        | [flask route](http://flask.pocoo.org/docs/1.0/api/#flask.flask.route)                                                                                                        |\n| `with_app_name `          |                      | [django app name](https://docs.djangoproject.com/en/stable/ref/urlresolvers/#django.urls.resolvermatch.app_name)                                                             |                                                                                                                                                                              |                                                                                                                                                                              |\n| `with_opencensus`         |                      | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) |  [[1]](#1-opencensus)[[3]](#3-traceparent/tracestate)   |\n| `with_opentelemetry`      |                      | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) | [w3c tracecontext.traceparent](https://www.w3.org/tr/trace-context/#traceparent-field), [w3c tracecontext.tracestate](https://www.w3.org/tr/trace-context/#tracestate-field) | [[2]](#2-opentelemetry)[[3]](#3-traceparent/tracestate) |\n| `with_db_driver`          |                      | [django db engine](https://docs.djangoproject.com/en/stable/ref/settings/#engine)                                                                                            | [sqlalchemy db driver](https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls)                                                                                    | [psycopg2 version](http://initd.org/psycopg/docs/)                                                                                                                           |\n| `with_db_framework`       |                      |                                                                                                                                                                              | [sqlalchemy version](https://www.sqlalchemy.org/)                                                                                                                            |                                                                                                                                                                              |\n| `with_dbapi_threadsafety` |                      |                                                                                                                                                                              |                                                                                                                                                                              | [psycopg2 thread safety](http://initd.org/psycopg/docs/module.html#psycopg2.threadsafety)                                                                                    |\n| `with_dbapi_level`        |                      |                                                                                                                                                                              |                                                                                                                                                                              | [psycopg2 api level](http://initd.org/psycopg/docs/module.html#psycopg2.apilevel)                                                                                            |\n| `with_libpq_version`      |                      |                                                                                                                                                                              |                                                                                                                                                                              | [psycopg2 libpq version](http://initd.org/psycopg/docs/module.html#psycopg2.__libpq_version__)                                                                               |\n| `with_driver_paramstyle`  |                      |                                                                                                                                                                              |                                                                                                                                                                              | [psycopg2 parameter style](http://initd.org/psycopg/docs/module.html#psycopg2.paramstyle)                                                                                    |\n\n#### [1] `opencensus`\n\nfor `opencensus` to work correctly, note that [opencensus for\npython](https://github.com/census-instrumentation/opencensus-python) must be\ninstalled in the python environment.\n\n#### [2] `opentelemetry`\n\nfor `opentelemetry` to work correctly, note that [opentelemetry for\npython](https://github.com/open-telemetry/opentelemetry-python) must be\ninstalled in the python environment.\n\n#### [3] `traceparent/tracestate`\nbecause the w3c tracecontext's `traceparent` and `tracestate` are quite ephemeral per request, including these attributes can have a negative impact on query caching.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "google-cloud-sqlcommenter",
  "package_url": "https://pypi.org/project/google-cloud-sqlcommenter/",
  "project_url": "https://pypi.org/project/google-cloud-sqlcommenter/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/google-cloud-sqlcommenter/2.0.0/",
  "requires_dist": [
    "django (>=1.11) ; extra == 'django'",
    "flask ; extra == 'flask'",
    "opencensus ; extra == 'opencensus'",
    "opentelemetry-api (~=1.0) ; extra == 'opentelemetry'",
    "psycopg2 ; extra == 'psycopg2'",
    "sqlalchemy ; extra == 'sqlalchemy'"
  ],
  "requires_python": "",
  "summary": "augment sql statements with meta information about frameworks and the running environment.",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "google_developers",
    "sqlcommenter@googlegroups.com"
  ],
  "kwds": "sqlalchemy sqlcommenter_with_opencensus sqlcommenter_with_opentelemetry sqlcommenter_ sqlcommenter_with_framework",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_google_cloud_sqlcommenter",
  "homepage": "",
  "release_count": 6,
  "dependency_ids": [
    "pypi_django",
    "pypi_flask",
    "pypi_opencensus",
    "pypi_opentelemetry_api",
    "pypi_psycopg2",
    "pypi_sqlalchemy"
  ]
}
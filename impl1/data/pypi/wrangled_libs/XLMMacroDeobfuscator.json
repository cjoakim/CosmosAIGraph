{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: security",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# xlmmacrodeobfuscator\nxlmmacrodeobfuscator can be used to decode obfuscated xlm macros (also known as excel 4.0 macros). it utilizes an internal xlm emulator to interpret the macros, without fully performing the code.\n\nit supports both xls, xlsm, and xlsb formats. \n\nit uses [xlrd2](https://github.com/dissectmalware/xlrd2), [pyxlsb2](https://github.com/dissectmalware/pyxlsb2) and its own parser to extract cells and other information from xls, xlsb and xlsm files, respectively.\n\nyou can also find xlm grammar in [xlm-macro-lark.template](xlmmacrodeobfuscator/xlm-macro.lark.template)\n\n# installing the emulator\n\n1. install using pip\n\n```\npip install xlmmacrodeobfuscator --force\n```\n\nor\n\n```\npip install xlmmacrodeobfuscator[defusedxml] --force\n```\n\n2. installing the latest development\n\n```\npip install -u https://github.com/dissectmalware/xlmmacrodeobfuscator/archive/master.zip --force\n```\n\n# running the emulator\nto deobfuscate macros in excel documents: \n\n```\nxlmdeobfuscator --file document.xlsm\n```\n\nto only extract macros in excel documents (without any deobfuscation): \n\n```\nxlmdeobfuscator --file document.xlsm -x\n```\n\nto only get the deobfuscated macros and without any indentation:\n\n```\nxlmdeobfuscator --file document.xlsm --no-indent --output-formula-format \"[[int-formula]]\"\n```\n\nto export the output in json format \n```\nxlmdeobfuscator --file document.xlsm --export-json result.json\n```\nto see a sample json output, please check [this link](https://pastebin.com/bwms7mi0) out.\n\nto use a config file\n```\nxlmdeobfuscator --file document.xlsm -c default.config\n```\n\ndefault.config file must be a valid json file, such as:\n\n```json\n{\n\t\"no-indent\": true,\n\t\"output-formula-format\": \"[[cell-addr]] [[int-formula]]\",\n\t\"non-interactive\": true,\n\t\"output-level\": 1\n}\n```\n\n# command line \n\n```\n\n          _        _______\n|\\     /|( \\      (       )\n( \\   / )| (      | () () |\n \\ (_) / | |      | || || |\n  ) _ (  | |      | |(_)| |\n / ( ) \\ | |      | |   | |\n( /   \\ )| (____/\\| )   ( |\n|/     \\|(_______/|/     \\|\n   ______   _______  _______  ______   _______           _______  _______  _______ _________ _______  _______\n  (  __  \\ (  ____ \\(  ___  )(  ___ \\ (  ____ \\|\\     /|(  ____ \\(  ____ \\(  ___  )\\__   __/(  ___  )(  ____ )\n  | (  \\  )| (    \\/| (   ) || (   ) )| (    \\/| )   ( || (    \\/| (    \\/| (   ) |   ) (   | (   ) || (    )|\n  | |   ) || (__    | |   | || (__/ / | (__    | |   | || (_____ | |      | (___) |   | |   | |   | || (____)|\n  | |   | ||  __)   | |   | ||  __ (  |  __)   | |   | |(_____  )| |      |  ___  |   | |   | |   | ||     __)\n  | |   ) || (      | |   | || (  \\ \\ | (      | |   | |      ) || |      | (   ) |   | |   | |   | || (\\ (\n  | (__/  )| (____/\\| (___) || )___) )| )      | (___) |/\\____) || (____/\\| )   ( |   | |   | (___) || ) \\ \\__\n  (______/ (_______/(_______)|/ \\___/ |/       (_______)\\_______)(_______/|/     \\|   )_(   (_______)|/   \\__/\n\n    \nxlmmacrodeobfuscator(v0.2.0) - https://github.com/dissectmalware/xlmmacrodeobfuscator\n\nerror: --file is missing\n\nusage: deobfuscator.py [-h] [-c file_path] [-f file_path] [-n] [-x]\n                       [--sort-formulas] [--defined-names] [-2]\n                       [--with-ms-excel] [-s] [-d day]\n                       [--output-formula-format output_formula_format]\n                       [--extract-formula-format extract_formula_format]\n                       [--no-indent] [--silent] [--export-json file_path]\n                       [--start-point cell_addr] [-p password]\n                       [-o output_level] [--timeout n]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c file_path, --config-file file_path\n                        specify a config file (must be a valid json file)\n  -f file_path, --file file_path\n                        the path of a xlsm file\n  -n, --noninteractive  disable interactive shell\n  -x, --extract-only    only extract cells without any emulation\n  --sort-formulas       sort extracted formulas based on their cell address\n                        (requires -x)\n  --defined-names       extract all defined names\n  -2, --no-ms-excel     [deprecated] do not use ms excel to process xls files\n  --with-ms-excel       use ms excel to process xls files\n  -s, --start-with-shell\n                        open an xlm shell before interpreting the macros in\n                        the input\n  -d day, --day day     specify the day of month\n  --output-formula-format output_formula_format\n                        specify the format for output formulas ([[cell-addr]],\n                        [[int-formula]], and [[status]]\n  --extract-formula-format extract_formula_format\n                        specify the format for extracted formulas ([[cell-\n                        addr]], [[cell-formula]], and [[cell-value]]\n  --no-indent           do not show indent before formulas\n  --silent              do not print output\n  --export-json file_path\n                        export the output to json\n  --start-point cell_addr\n                        start interpretation from a specific cell address\n  -p password, --password password\n                        password to decrypt the protected document\n  -o output_level, --output-level output_level\n                        set the level of details to be shown (0:all commands,\n                        1: commands no jump 2:important commands 3:strings in\n                        important commands).\n  --timeout n           stop emulation after n seconds (0: not interruption\n                        n>0: stop emulation after n seconds)\n```\n\n# library\nthe following example shows how xlmmacrodeobfuscator can be used in a python project to deobfuscate xlm macros:\n\n```python\nfrom xlmmacrodeobfuscator.deobfuscator import process_file\n\nresult = process_file(file='path/to/an/excel/file', \n            noninteractive= true, \n            noindent= true, \n            output_formula_format='[[cell-addr]], [[int-formula]]',\n            return_deobfuscated= true,\n            timeout= 30)\n\nfor record in result:\n    print(record)\n```\n\n* note: the xlmdeofuscator logo will not be shown when you use it as a library\n\n# requirements\n\nplease read requirements.txt to get the list of python libraries that xlmmacrodeobfuscator is dependent on.\n\nxlmdeobfuscator can be executed on any os to extract and deobfuscate macros in xls, xlsm, and xlsb files. you do not need to install ms excel.\n\nnote: if you want to use ms excel (on windows), you need to install pywin32 library and use --with-ms-excel switch.\nif --with-ms-excel is used, xlmdeobfuscator, first, attempts to load xls files with ms excel, if it fails it uses [xlrd2 library](https://github.com/dissectmalware/xlrd2).\n\n# project using xlmmacrodeofuscator\nxlmmacrodeofuscator is adopted in the following projects:\n* [cape sandbox](https://github.com/ctxis/cape)\n* [fame](https://certsocietegenerale.github.io/fame/)\n* [remnux](https://remnux.org/)\n* [intelowl](https://github.com/intelowlproject/intelowl)\n* [assemblyline 4](https://cybercentrecanada.github.io/assemblyline4_docs/) by canadian centre for cyber security \n* [oletools](https://github.com/decalage2/oletools) by [@decalage2](https://twitter.com/decalage2)\n\nplease contact me if you incorporated xlmmacrodeofuscator in your project.\n\n# how to contribute\nif you found a bug or would like to suggest an improvement, please create a new issue on the [issues page](https://github.com/dissectmalware/xlmmacrodeobfuscator/issues).\n\nfeel free to contribute to the project forking the project and submitting a pull request.\n\nyou can reach [me (@dissectmlaware) on twitter](https://twitter.com/dissectmalware) via a direct message.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "xlmmacrodeobfuscator",
  "package_url": "https://pypi.org/project/XLMMacroDeobfuscator/",
  "project_url": "https://pypi.org/project/XLMMacroDeobfuscator/",
  "project_urls": {
    "Homepage": "https://github.com/DissectMalware/XLMMacroDeobfuscator"
  },
  "release_url": "https://pypi.org/project/XLMMacroDeobfuscator/0.2.7/",
  "requires_dist": [
    "pyxlsb2",
    "lark-parser",
    "xlrd2",
    "untangle (==1.2.1)",
    "msoffcrypto-tool",
    "roman",
    "defusedxml ; extra == 'secure'"
  ],
  "requires_python": ">=3.4",
  "summary": "xlmmacrodeobfuscator is an xlm emulation engine written in python 3, designed to analyze and deobfuscate malicious xlm macros, also known as excel 4.0 macros, contained in ms excel files (xls, xlsm, and xlsb).",
  "version": "0.2.7",
  "releases": [],
  "developers": [
    "amirreza_niakanlahiji",
    "aniak2@uis.edu"
  ],
  "kwds": "xlmmacrodeobfuscator xlmdeofuscator xlm xlsb xlmmacrodeofuscator",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_xlmmacrodeobfuscator",
  "homepage": "https://github.com/dissectmalware/xlmmacrodeobfuscator",
  "release_count": 12,
  "dependency_ids": [
    "pypi_defusedxml",
    "pypi_lark_parser",
    "pypi_msoffcrypto_tool",
    "pypi_pyxlsb2",
    "pypi_roman",
    "pypi_untangle",
    "pypi_xlrd2"
  ]
}
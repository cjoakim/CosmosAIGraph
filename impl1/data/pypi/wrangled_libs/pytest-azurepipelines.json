{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "=====================\npytest-azurepipelines\n=====================\n\n.. image:: https://img.shields.io/pypi/v/pytest-azurepipelines.svg\n    :target: https://pypi.org/project/pytest-azurepipelines\n    :alt: pypi version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-azurepipelines.svg\n    :target: https://pypi.org/project/pytest-azurepipelines\n    :alt: python versions\n\n.. image:: https://img.shields.io/pypi/dm/pytest-azurepipelines.svg\n     :target: https://pypi.python.org/pypi/pytest-azurepipelines/\n     :alt: pypi download month\n\n.. image:: https://anaconda.org/conda-forge/pytest-azurepipelines/badges/version.svg\n     :target: https://anaconda.org/conda-forge/pytest-azurepipelines\n\nmaking pytest easier to use with microsoft azure pipelines.\n\njust run pytest with this plugin and see your test results in the azure pipelines ui!\n\n----\n\nfeatures:\n\n* formats the pytest output to show test docstrings and module names instead of just test case names in the azure pipelines ui.\n* uploads test results automatically, no need for a separate test results upload command\n* displays the number of failed tests if there were failures as an error message in the ui\n* automatically formats code coverage and uploads coverage data if pytest-cov is installed\n* supports running inside a docker container and automatically uploads test results\n\ninstallation\n------------\n\nyou can install \"pytest-azurepipelines\" via `pip`_ from `pypi`_::\n\n    $ pip install pytest-azurepipelines\n\nusage\n-----\n\nthis plugin requires no configuration.\n\nhere is an example of installing the plugin and running the tests.\n\n.. code-block:: yaml\n\n  - script: |\n      python -m pip install --upgrade pip\n      pip install pytest pytest-azurepipelines\n      pip install -e .\n    displayname: 'install dependencies'\n\n  - script: |\n      python -m pytest tests/\n    displayname: 'pytest'\n\nif you want to change the azure pipelines \"test run title\", you can provide the `--test-run-title` flag with the run title.\n\n.. code-block:: yaml\n\n  - script: |\n      pip install pytest pytest-azurepipelines\n      pytest tests/ --test-run-title=\"windows test\"\n\nif you have long docstrings in your functions and want them to be shortened, you can use the `--napoleon-docstrings` flag:\n\n.. code-block:: yaml\n\n   - script: |\n      pip install pytest pytest-azurepipelines\n      pytest tests/ --test-run-title=\"windows test\" --napoleon-docstrings\n\nthe directory where the html reports are searched for can be changed with the `--report-dir` flag. it defaults to `htmlcov`:\n\n.. code-block:: yaml\n\n   - script: |\n      pip install pytest pytest-azurepipelines\n      pytest tests/ --report-dir=custom_folder\n\nfixtures\n--------\n\nthe following fixtures are made available by this plugin.\n\n``record_pipelines_property``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncalling `record_pipelines_property(key: str, value: str)` will result in `property` tags being added to the `test-case` for the related node. \n\n.. code-block:: python\n\n    def test_basic(record_pipelines_property):\n        record_pipelines_property(\"test\", \"value\")\n        assert 1 == 1\n\n``add_pipelines_attachment``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nadd an attachment to a node test-case by calling the `add_pipelines_attachment(path: str, description: str)` function with the filepath and a description.\n\nattachments can be viewed in the azure pipelines ui under the 'attachments' tab for a test case.\n\n.. code-block:: python\n\n    def test_attachment(add_pipelines_attachment):\n        pth = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'fixture.gif')\n        add_pipelines_attachment(path, \"peanut butter jelly time\")\n        assert 1 == 1\n\nusing the automatic code coverage upload\n----------------------------------------\n\nfrom version 0.6.0, pytest will upload successful coverage data into a format that azure supports and package\nthe htmlcov directory into a zip file as an artifact for the build.\n\nto use this feature, add the `--cov` flag with (optional, but required) path to your code files and also ensure you add `--cov-report html` as an option.\n\n.. code-block:: yaml\n\n   - script: |\n      pip install pytest pytest-azurepipelines pytest-cov\n      pytest tests/ --cov my_project --cov-report html\n\nto disable coverage upload, use the `--no-coverage-upload` flag.\n\nrunning in docker\n-----------------\n\nthe plugin automatically detects when running inside a docker\ncontainer. it will apply\nthe mappings to the path to report them back to azure pipelines using the path\nfrom the host that has been bind mounted to the docker container. \n\nno configuration is required if bind mounting is\nused to the path the pytest output is written to. also ensure the files are\nwritten using an account the host has access to, this can be done by supplying\nthe user and group of the host account to the run command.\n\n.. code-block:: bash\n\n    docker run --user \"$(id -u):$(id -g)\" ...\n\nto disable docker discovery, use the `--no-docker-discovery` flag.\n\ncontributing\n------------\n\ncontributions are very welcome. \n\nlicense\n-------\n\ndistributed under the terms of the mit license, \"pytest-azurepipelines\" is free and open source software\n\n\nissues\n------\n\nif you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`apache software license 2.0`: http://www.apache.org/licenses/license-2.0\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/tonybaloney/pytest-azurepipelines/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`pypi`: https://pypi.org/project\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-azurepipelines",
  "package_url": "https://pypi.org/project/pytest-azurepipelines/",
  "project_url": "https://pypi.org/project/pytest-azurepipelines/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/pytest-azurepipelines"
  },
  "release_url": "https://pypi.org/project/pytest-azurepipelines/1.0.5/",
  "requires_dist": [
    "importlib-resources",
    "pytest (>=5.0.0)",
    "pytest-nunit (<2.0.0,>=1.0.0)"
  ],
  "requires_python": ">=3.5",
  "summary": "formatting pytest output for azure pipelines ui",
  "version": "1.0.5",
  "releases": [],
  "developers": [
    "anthony_shaw",
    "anthonyshaw@apache.org"
  ],
  "kwds": "azurepipelines pytest pyversions pip pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_azurepipelines",
  "homepage": "https://github.com/azure/pytest-azurepipelines",
  "release_count": 21,
  "dependency_ids": [
    "pypi_importlib_resources",
    "pypi_pytest",
    "pypi_pytest_nunit"
  ]
}
{
  "classifiers": [
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![tests](https://img.shields.io/github/workflow/status/maxcountryman/flask-bcrypt/tests/master?label=tests)](https://github.com/maxcountryman/flask-bcrypt/actions)\n[![version](https://img.shields.io/pypi/v/flask-bcrypt.svg)](https://pypi.python.org/pypi/flask-bcrypt)\n[![supported python versions](https://img.shields.io/pypi/pyversions/flask-bcrypt.svg)](https://pypi.python.org/pypi/flask-bcrypt)\n\n# flask-bcrypt\n\nflask-bcrypt is a flask extension that provides bcrypt hashing utilities for\nyour application.\n\ndue to the recent increased prevalence of powerful hardware, such as modern\ngpus, hashes have become increasingly easy to crack. a proactive solution to\nthis is to use a hash that was designed to be \"de-optimized\". bcrypt is such\na hashing facility; unlike hashing algorithms such as md5 and sha1, which are\noptimized for speed, bcrypt is intentionally structured to be slow.\n\nfor sensitive data that must be protected, such as passwords, bcrypt is an\nadvisable choice.\n\n## installation\n\ninstall the extension with one of the following commands:\n\n    $ easy_install flask-bcrypt\n\nor alternatively if you have pip installed:\n\n    $ pip install flask-bcrypt\n\n## usage\n\nto use the extension simply import the class wrapper and pass the flask app\nobject back to here. do so like this:\n\n    from flask import flask\n    from flask_bcrypt import bcrypt\n\n    app = flask(__name__)\n    bcrypt = bcrypt(app)\n\ntwo primary hashing methods are now exposed by way of the bcrypt object. use\nthem like so:\n\n    pw_hash = bcrypt.generate_password_hash('hunter2')\n    bcrypt.check_password_hash(pw_hash, 'hunter2') # returns true\n\n## documentation\n\nthe sphinx-compiled documentation is available here: https://flask-bcrypt.readthedocs.io/\n\n\n",
  "docs_url": "https://pythonhosted.org/Flask-Bcrypt/",
  "keywords": "",
  "license": "bsd",
  "name": "flask-bcrypt",
  "package_url": "https://pypi.org/project/Flask-Bcrypt/",
  "project_url": "https://pypi.org/project/Flask-Bcrypt/",
  "project_urls": {
    "Homepage": "https://github.com/maxcountryman/flask-bcrypt"
  },
  "release_url": "https://pypi.org/project/Flask-Bcrypt/1.0.1/",
  "requires_dist": [
    "Flask",
    "bcrypt (>=3.1.1)"
  ],
  "requires_python": "",
  "summary": "brcrypt hashing for flask.",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "max_countryman",
    "maxc@me.com"
  ],
  "kwds": "flask_bcrypt bcrypt flask check_password_hash generate_password_hash",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_flask_bcrypt",
  "homepage": "https://github.com/maxcountryman/flask-bcrypt",
  "release_count": 16,
  "dependency_ids": [
    "pypi_bcrypt",
    "pypi_flask"
  ]
}
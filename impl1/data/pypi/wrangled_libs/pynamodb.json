{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "========\npynamodb\n========\n\n.. image:: https://img.shields.io/pypi/v/pynamodb.svg\n    :target: https://pypi.python.org/pypi/pynamodb/\n.. image:: https://img.shields.io/conda/vn/conda-forge/pynamodb.svg\n    :target: https://anaconda.org/conda-forge/pynamodb\n.. image:: https://github.com/pynamodb/pynamodb/workflows/tests/badge.svg\n    :target: https://github.com/pynamodb/pynamodb/actions\n.. image:: https://img.shields.io/coveralls/pynamodb/pynamodb/master.svg\n    :target: https://coveralls.io/r/pynamodb/pynamodb\n\na pythonic interface for amazon's `dynamodb <http://aws.amazon.com/dynamodb/>`_.\n\ndynamodb is a great nosql service provided by amazon, but the api is verbose.\npynamodb presents you with a simple, elegant api.\n\nuseful links:\n\n* see the full documentation at https://pynamodb.readthedocs.io/\n* ask questions in the `github issues <https://github.com/pynamodb/pynamodb/issues>`_\n* see release notes at https://pynamodb.readthedocs.io/en/latest/release_notes.html\n\ninstallation\n============\nfrom pypi::\n\n    $ pip install pynamodb\n\nfrom github::\n\n    $ pip install git+https://github.com/pynamodb/pynamodb#egg=pynamodb\n\nfrom conda-forge::\n\n    $ conda install -c conda-forge pynamodb\n\n\nbasic usage\n===========\n\ncreate a model that describes your dynamodb table.\n\n.. code-block:: python\n\n    from pynamodb.models import model\n    from pynamodb.attributes import unicodeattribute\n\n    class usermodel(model):\n        \"\"\"\n        a dynamodb user\n        \"\"\"\n        class meta:\n            table_name = \"dynamodb-user\"\n        email = unicodeattribute(null=true)\n        first_name = unicodeattribute(range_key=true)\n        last_name = unicodeattribute(hash_key=true)\n\npynamodb allows you to create the table if needed (it must exist before you can use it!):\n\n.. code-block:: python\n\n    usermodel.create_table(read_capacity_units=1, write_capacity_units=1)\n\ncreate a new user:\n\n.. code-block:: python\n\n    user = usermodel(\"john\", \"denver\")\n    user.email = \"djohn@company.org\"\n    user.save()\n\nnow, search your table for all users with a last name of 'denver' and whose\nfirst name begins with 'j':\n\n.. code-block:: python\n\n    for user in usermodel.query(\"denver\", usermodel.first_name.startswith(\"j\")):\n        print(user.first_name)\n\nexamples of ways to query your table with filter conditions:\n\n.. code-block:: python\n\n    for user in usermodel.query(\"denver\", usermodel.email==\"djohn@company.org\"):\n        print(user.first_name)\n\nretrieve an existing user:\n\n.. code-block:: python\n\n    try:\n        user = usermodel.get(\"john\", \"denver\")\n        print(user)\n    except usermodel.doesnotexist:\n        print(\"user does not exist\")\n\nupgrade warning\n===============\n\nthe behavior of 'unicodesetattribute' has changed in backwards-incompatible ways\nas of the 1.6.0 and 3.0.1 releases of pynamodb.\n\nsee `unicodesetattribute upgrade docs <https://pynamodb.readthedocs.io/en/latest/release_notes.html>`_\nfor detailed instructions on how to safely perform the upgrade.\n\nadvanced usage\n==============\n\nwant to use indexes? no problem:\n\n.. code-block:: python\n\n    from pynamodb.models import model\n    from pynamodb.indexes import globalsecondaryindex, allprojection\n    from pynamodb.attributes import numberattribute, unicodeattribute\n\n    class viewindex(globalsecondaryindex):\n        class meta:\n            read_capacity_units = 2\n            write_capacity_units = 1\n            projection = allprojection()\n        view = numberattribute(default=0, hash_key=true)\n\n    class testmodel(model):\n        class meta:\n            table_name = \"testmodel\"\n        forum = unicodeattribute(hash_key=true)\n        thread = unicodeattribute(range_key=true)\n        view = numberattribute(default=0)\n        view_index = viewindex()\n\nnow query the index for all items with 0 views:\n\n.. code-block:: python\n\n    for item in testmodel.view_index.query(0):\n        print(\"item queried from index: {0}\".format(item))\n\nit's really that simple.\n\n\nwant to use dynamodb local? just add a ``host`` name attribute and specify your local server.\n\n.. code-block:: python\n\n    from pynamodb.models import model\n    from pynamodb.attributes import unicodeattribute\n\n    class usermodel(model):\n        \"\"\"\n        a dynamodb user\n        \"\"\"\n        class meta:\n            table_name = \"dynamodb-user\"\n            host = \"http://localhost:8000\"\n        email = unicodeattribute(null=true)\n        first_name = unicodeattribute(range_key=true)\n        last_name = unicodeattribute(hash_key=true)\n\nwant to enable streams on a table? just add a ``stream_view_type`` name attribute and specify\nthe type of data you'd like to stream.\n\n.. code-block:: python\n\n    from pynamodb.models import model\n    from pynamodb.attributes import unicodeattribute\n    from pynamodb.constants import stream_new_and_old_image\n\n    class animalmodel(model):\n        \"\"\"\n        a dynamodb animal\n        \"\"\"\n        class meta:\n            table_name = \"dynamodb-user\"\n            host = \"http://localhost:8000\"\n            stream_view_type = stream_new_and_old_image\n        type = unicodeattribute(null=true)\n        name = unicodeattribute(range_key=true)\n        id = unicodeattribute(hash_key=true)\n\nfeatures\n========\n\n* python >= 3.6 support\n* an orm-like interface with query and scan filters\n* compatible with dynamodb local\n* supports the entire dynamodb api\n* support for unicode, binary, json, number, set, and utc datetime attributes\n* support for global and local secondary indexes\n* provides iterators for working with queries, scans, that are automatically paginated\n* automatic pagination for bulk operations\n* complex queries\n* batch operations with automatic pagination\n* iterators for working with query and scan operations\n",
  "docs_url": null,
  "keywords": "python dynamodb amazon",
  "license": "mit",
  "name": "pynamodb",
  "package_url": "https://pypi.org/project/pynamodb/",
  "project_url": "https://pypi.org/project/pynamodb/",
  "project_urls": {
    "Homepage": "http://jlafon.io/pynamodb.html"
  },
  "release_url": "https://pypi.org/project/pynamodb/5.5.1/",
  "requires_dist": [
    "botocore >=1.12.54",
    "typing-extensions >=3.7 ; python_version < \"3.8\"",
    "blinker <2.0,>=1.3 ; extra == 'signals'"
  ],
  "requires_python": ">=3.6",
  "summary": "a pythonic interface to dynamodb",
  "version": "5.5.1",
  "releases": [],
  "developers": [
    "jharrod_lafon",
    "jlafon@eyesopen.com"
  ],
  "kwds": "dynamodb pynamodb pip workflows pythonic",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pynamodb",
  "homepage": "http://jlafon.io/pynamodb.html",
  "release_count": 88,
  "dependency_ids": [
    "pypi_blinker",
    "pypi_botocore",
    "pypi_typing_extensions"
  ]
}
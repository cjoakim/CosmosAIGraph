{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: software development :: libraries"
  ],
  "description": "==========================================\ngoogle-api-helper python google api helper\n==========================================\n\ngoogle-api-helper helps streamline access to google apis including authentication using oauth2 and factory methods to create an api service. i.e. creating a compute api service is not to bad but still needs some code:\n\n.. code-block:: python\n\n  import googleapiclient.discovery\n  from oauth2client.service_account import serviceaccountcredentials\n\n  credentials = serviceaccountcredentials.from_json_keyfile_name(\"service_account.json\", [\"https://www.googleapis.com/auth/compute\"])\n  compute = googleapiclient.discovery.build('compute', 'v1', credentials=credentials)\n\nwith google-api-helper that's a oneliner:\n\n.. code-block:: python\n\n  from googleapi import googleapi\n  compute = googleapi.compute().with_service_account_file(\"service_account.json\")\n\nalso using the oauth2 flow is simple\n\n.. code-block:: python\n\n  from googleapi import googleapi\n  compute = googleapi.compute().with_oauth2_flow(\"client_secret.json\")\n\npython-google-api-client also got retries for server errors included, but not for rate limiting. therefore every api call you make needs to implement an exponential backoff. this is automatically done by using google-api-helper.\n\n.. code-block:: python\n\n  from googleapi import googleapi\n  compute = googleapi.compute().with_oauth2_flow(\"client_secret.json\")\n  # directly using the api service without retries\n  compute.service.instances().list(project=\"my-gcp-project\", zone=\"europe-west1-d\").execute()\n  # wrapper including retries for rate limiting and server side errors \n  compute.instances().list(project=\"my-gcp-project\", zone=\"europe-west1-d\").execute()\n\ninstallation\n------------\n\nadd `google-api-helper` to your requirements.txt or your module requirements or install via pip:\n\n.. code-block:: bash\n\n  pip install google-api-helper\n\n\nquickstart\n----------\n\nimport googleapi in your python code\n\n.. code-block:: python\n\n  from googleapi import googleapi\n\ncreate the api from a factory method or specify it by yourself:\n\n.. code-block:: python\n\n  compute = googleapi.compute()\n  drive = googleapi.drive()\n  gmail = googleapi(\"gmail\", \"v1\", [\"https://mail.google.com/\"])\n\nauthenticate with oauth2\n\n.. code-block:: python\n\n  # use compute engine or app engine default credentials\n  compute.with_application_credentials()\n  # use a service account to access a users drive\n  drive.with_service_account_file(\"service_account.json\", \"test@example.com\")\n  # or run a oauth2 flow to ask the user for credentials\n  gmail.with_oauth2_flow(\"client_secret.json\")\n\n\nand call the api\n\n.. code-block:: python\n\n  instances = compute.instances().list(project=\"project-id\", zone=\"europe-west1-d\").execute()\n  drive_files = drive.files().list(q=\"name='test'\").execute()\n  messages = gmail.users().messages().list(userid=\"me\").execute()\n\n\nbuilding and publishing\n-----------------------\n\n.. code-block:: bash\n\n  python setup.py bdist_wheel --universal\n  python -m twine upload dist/*\n\n\n",
  "docs_url": null,
  "keywords": "google api python",
  "license": "gnu gpl v3",
  "name": "google-api-helper",
  "package_url": "https://pypi.org/project/google-api-helper/",
  "project_url": "https://pypi.org/project/google-api-helper/",
  "project_urls": {
    "Homepage": "https://github.com/r00tat/google-api-helper"
  },
  "release_url": "https://pypi.org/project/google-api-helper/0.3.1/",
  "requires_dist": [
    "google-api-python-client",
    "google-auth",
    "google-auth-oauthlib"
  ],
  "requires_python": "",
  "summary": "python helper class to streamlime interaction with google apis. based on python-google-api-client.",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "github@frig.at",
    "paul_woelfel"
  ],
  "kwds": "googleapiclient api oauth2client service_account with_oauth2_flow",
  "license_kwds": "gnu gpl v3",
  "libtype": "pypi",
  "id": "pypi_google_api_helper",
  "homepage": "https://github.com/r00tat/google-api-helper",
  "release_count": 9,
  "dependency_ids": [
    "pypi_google_api_python_client",
    "pypi_google_auth",
    "pypi_google_auth_oauthlib"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "# applaunchservices\nsimple package for registering an app with apple launch services to handle uti and url. see apple documentations for details.\n\n## url\nlaunch services allows a gui app to register a url scheme.\nthis means the app can be called when the user types a url like `<scheme>://<something>`.\n\n - `set_url_scheme_handler`: sets the given bundleid as the default handler for a given url scheme.\n - `get_url_scheme_handler`: gets the default bundleid for a given url scheme.\n - `open_url`: opens the given url with launch services\n\n## files\nlaunch services allows a gui app to register a uniform type identifier (uti).\nthis means the app can be called when the user double click on a file in the finder that matches this scheme.\nor if the user types an url like `<file:///path/to/file.ext>`.\n\n- `set_uti_handler`: sets the given bundleid as the default handler for a given uniform type identifier and role.\n- `get_uti_handler`: gets the default bundleid for a given uniform type identifier and role.\n- `open_path`: opens the given path with launch services\n\nthe roles are:\n - 'none'\n - 'viewer'\n - 'editor'\n - 'shell'\n - 'all'\n\n\n## bundle identifier\nthe bundle identifier is used to identify an app. two functions are supplied:\n\n - `get_bundle_identifier()`: gets the current bundle identifier if it exists (the app is a gui app)\n - `get_bundle_identifier(pid)`: gets the bundle identifier for the given process id if it exists (the app is a gui app)\n - `get_bundle_identifier_for_path(path)`: gets the bundle identifier if the path points to a bundle\n\n## usage example:\n```python\nimport applaunchservices as als\nfrom pyqt5.qtwidgets import qapplication, qwidget\nfrom pyqt5.qtcore import qevent, qt\n\n# this app opens python scripts as an editor\nuniform_type_identifier = \"public.python-script\"\nrole = 'editor'\n\n\nclass macapplication(qapplication):\n    \"\"\"application that process fileopen events.\"\"\"\n    def event(self, event):\n        if event.type() == qevent.fileopen:\n            widget.setwindowtitle(str(event.file()))\n        return qapplication.event(self, event)\n\n# create application and window\napp = macapplication([''])\nwidget = qwidget()\n\n# reset old handler at the end\nold_handler = als.get_uti_handler(uniform_type_identifier, role)\napp.abouttoquit.connect(\n    lambda: als.set_uti_handler(\n        uniform_type_identifier, role, old_handler))\n\n\n# when the app is visible, register itself as a handler\ndef handle_applicationstatechanged(state):\n    if state == qt.applicationactive and app._starting:\n        app._starting = false\n        bundle_identifier = als.get_bundle_identifier()\n        als.set_uti_handler(\n            uniform_type_identifier, role, bundle_identifier)\n\n\napp._starting = true\napp.applicationstatechanged.connect(handle_applicationstatechanged)\n\n# launch app\nwidget.setwindowtitle('test')\nwidget.show()\napp.exec_()\n# the app can now receive file open events\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "applaunchservices",
  "package_url": "https://pypi.org/project/applaunchservices/",
  "project_url": "https://pypi.org/project/applaunchservices/",
  "project_urls": {
    "Homepage": "https://github.com/impact27/applaunchservices"
  },
  "release_url": "https://pypi.org/project/applaunchservices/0.3.0/",
  "requires_dist": [
    "pyobjc-framework-CoreServices"
  ],
  "requires_python": "",
  "summary": "simple package for registering an app with apple launch services to handle uti and url",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "qpeter@bluewin.ch",
    "quentin_peter"
  ],
  "kwds": "set_url_scheme_handler get_url_scheme_handler get_uti_handler set_uti_handler bundleid",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_applaunchservices",
  "homepage": "https://github.com/impact27/applaunchservices",
  "release_count": 12,
  "dependency_ids": [
    "pypi_pyobjc_framework_coreservices"
  ]
}
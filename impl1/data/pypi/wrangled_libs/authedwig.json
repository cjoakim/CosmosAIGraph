{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "hedwig library for python\n=========================\n\n.. image:: https://github.com/cloudchacho/hedwig-python/workflows/pytest/badge.svg\n    :target: https://github.com/cloudchacho/hedwig-python/actions?query=workflow%3apytest\n\n.. image:: https://codecov.io/gh/cloudchacho/hedwig-python/branch/main/graph/badge.svg?token=81lqigyssn\n    :target: https://codecov.io/gh/cloudchacho/hedwig-python\n\n.. image:: https://img.shields.io/pypi/v/authedwig.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/authedwig\n\n.. image:: https://img.shields.io/pypi/pyversions/authedwig.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/authedwig\n\n.. image:: https://img.shields.io/pypi/implementation/authedwig.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/authedwig\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\nhedwig is a inter-service communication bus that works on aws sqs/sns, while keeping things pretty simple and\nstraight forward. it uses `json schema`_ `draft v4`_ for schema validation so all incoming\nand outgoing messages are validated against pre-defined schema.\n\nhedwig allows separation of concerns between consumers and publishers so your services are loosely coupled, and the\ncontract is enforced by the schema validation. hedwig may also be used to build asynchronous apis.\n\nfor intra-service messaging, see taskhawk_.\n\nonly python 3.6+ is supported currently.\n\nyou can find the latest, most up to date, documentation at `read the docs`_.\n\nquick start\n-----------\n\nfirst, install the library:\n\n.. code:: sh\n\n    $ pip install authedwig[aws,jsonschema]\n\nnext, set up a few configuration settings:\n\ncommon required settings:\n\n.. code:: python\n\n    hedwig_queue = \"dev-myapp\"\n\n    hedwig_callbacks = {\n        (\"email.send\", \"1.*\"): \"send_email\",\n    }\n\n    hedwig_message_routing = {\n        (\"email.send\", \"1.*\"): \"send-email-v1\",\n    }\n\n    hedwig_jsonschema_file = \"schema.json\"\n\n\nwhen using aws, additional required settings are:\n\n.. code:: python\n\n    aws_access_key = <your aws key>\n    aws_account_id = <your aws account id>\n    aws_region = <your aws region>\n    aws_secret_key = <your aws secret key>\n\n    hedwig_consumer_backend = 'hedwig.backends.aws.awssqsconsumerbackend'\n    hedwig_publisher_backend = 'hedwig.backends.aws.awssnspublisherbackend'\n\n\nin case of gcp, additional required settings are:\n\n.. code:: python\n\n    hedwig_consumer_backend = 'hedwig.backends.gcp.googlepubsubconsumerbackend'\n    hedwig_publisher_backend = 'hedwig.backends.gcp.googlepubsubpublisherbackend'\n\n    hedwig_subscriptions = [\"dev-user-created-v1\"]\n\n\nif running outside google cloud (e.g. locally), set ``google_application_credentials``.\n\nwithin google cloud, these credentials and permissions are managed by google using iam.\n\nif the pub/sub resources lie in a different project, set ``google_cloud_project`` to the project id.\n\nfor django projects, simple use `django settings`_ to configure hedwig. for flask projects, use `flask config`_.\nfor other frameworks, you can either declare an environment variable called ``settings_module`` that points to a\nmodule where settings may be found, or manually configure using ``hedwig.conf.settings.configure_with_object``.\n\ncreate a json-schema and save as ``schema.json``:\n\n.. code:: json\n\n    {\n        \"id\": \"https://github.com/cloudchacho/hedwig-python/schema#\",\n        \"$schema\": \"http://json-schema.org/draft-04/schema\",\n        \"schemas\": {\n            \"email.send\": {\n                \"1.*\": {\n                    \"description\": \"request to send email\",\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"to\",\n                        \"subject\"\n                    ],\n                    \"properties\": {\n                        \"to\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^\\\\s+@\\\\s+$\"\n                        },\n                        \"subject\": {\n                            \"type\": \"string\",\n                            \"minlength\": 2\n                        }\n                    }\n                }\n            }\n        }\n    }\n\nthen, simply define your topic handler:\n\n.. code:: python\n\n   def send_email(message: hedwig.message = none) -> none:\n       # send email\n\nand finally, send a message:\n\n.. code:: python\n\n    message = hedwig.message.new(\n        \"email.send\",\n        strictversion('1.0'),\n        {\n            'to': 'example@email.com',\n            'subject': 'hello!',\n        },\n    )\n    message.publish()\n\n\ndevelopment\n-----------\n\ngetting started\n~~~~~~~~~~~~~~~\nassuming that you have python, ``pyenv`` and ``pyenv-virtualenv``, and `protoc installed`_, set up your\nenvironment and install the required dependencies like this instead of\nthe ``pip install authedwig`` defined above:\n\n.. code:: sh\n\n    $ git clone https://github.com/cloudchacho/hedwig.git /usr/local/lib/protobuf/include/hedwig\n    ...\n    $ git clone https://github.com/cloudchacho/hedwig-python.git\n    $ cd hedwig-python\n    $ pyenv virtualenv 3.6.5 hedwig-3.6\n    ...\n    $ pyenv activate hedwig-3.6\n    $ pip install -r requirements/dev-3.6.txt\n\nre-compile protobuf\n~~~~~~~~~~~~~~~~~~~\non making any change to test protobufs or container protobuf, the file would need to be re-compiled:\n\n.. code:: sh\n\n    $ make proto_compile\n\nrunning tests\n~~~~~~~~~~~~~\nyou can run tests in using ``make test``. by default,\nit will run all of the unit and functional tests, but you can also specify your own\n``py.test`` options.\n\n.. code:: sh\n\n    $ py.test\n    $ py.test tests/test_consumer.py\n\ngenerating documentation\n~~~~~~~~~~~~~~~~~~~~~~~~\nsphinx is used for documentation. you can generate html locally with the\nfollowing:\n\n.. code:: sh\n\n    $ pip install -e .[dev]\n    $ make docs\n\n\ngetting help\n------------\n\nwe use github issues for tracking bugs and feature requests.\n\n* if it turns out that you may have found a bug, please `open an issue <https://github.com/cloudchacho/hedwig-python/issues/new>`__\n\n.. _read the docs: https://authedwig.readthedocs.io/en/latest/\n.. _django settings: https://docs.djangoproject.com/en/2.0/topics/settings/\n.. _flask config: https://flask.palletsprojects.com/en/1.1.x/config/\n.. _draft v4: http://json-schema.org/specification-links.html#draft-4\n.. _json schema: http://json-schema.org/\n.. _taskhawk: https://github.com/cloudchacho/taskhawk-python\n.. _protoc installed: https://github.com/protocolbuffers/protobuf/\n\n\n",
  "docs_url": null,
  "keywords": "python authedwig hedwig",
  "license": "apache software license (apache license 2.0)",
  "name": "authedwig",
  "package_url": "https://pypi.org/project/authedwig/",
  "project_url": "https://pypi.org/project/authedwig/",
  "project_urls": {
    "Homepage": "https://github.com/cloudchacho/hedwig-python"
  },
  "release_url": "https://pypi.org/project/authedwig/9.2.0/",
  "requires_dist": [
    "funcy",
    "dataclasses ; python_version < \"3.7\"",
    "boto3 ; extra == 'aws'",
    "retrying ; extra == 'aws'",
    "boto3-stubs[sns,sqs] ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "pip-tools ; extra == 'dev'",
    "protobuf (<3.20.0) ; extra == 'dev'",
    "types-dataclasses ; extra == 'dev'",
    "types-protobuf (<3.20.0) ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "mypy-protobuf (<3.3.0) ; (python_version < \"3.7\") and extra == 'dev'",
    "docutils (<0.18) ; (python_version < \"3.8\") and extra == 'dev'",
    "Sphinx (==3.2.1) ; (python_version < \"3.8\") and extra == 'dev'",
    "sphinx-autodoc-typehints (<1.13.0) ; (python_version < \"3.8\") and extra == 'dev'",
    "jinja2 (<3.1) ; (python_version >= \"3.7\" and python_version < \"3.8\") and extra == 'dev'",
    "Sphinx (>3) ; (python_version >= \"3.8\") and extra == 'dev'",
    "sphinx-autodoc-typehints ; (python_version >= \"3.8\") and extra == 'dev'",
    "google-cloud-pubsub (>=2.0.0) ; extra == 'gcp'",
    "grpcio-status (==1.48.2) ; extra == 'gcp'",
    "jsonpointer ; extra == 'jsonschema'",
    "jsonschema ; extra == 'jsonschema'",
    "opentelemetry-api ; extra == 'opentelemetry'",
    "protobuf (<3.20.0) ; extra == 'protobuf'",
    "bumpversion ; extra == 'publish'",
    "twine ; extra == 'publish'",
    "black ; extra == 'test'",
    "coverage ; extra == 'test'",
    "coveralls ; extra == 'test'",
    "factory-boy ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "freezegun ; extra == 'test'",
    "ipdb ; extra == 'test'",
    "moto[sns,sqs] ; extra == 'test'",
    "mypy ; extra == 'test'",
    "opentelemetry-sdk ; extra == 'test'",
    "protobuf ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-env ; extra == 'test'",
    "structlog ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "hedwig python library",
  "version": "9.2.0",
  "releases": [],
  "developers": [
    "aniruddha_maru",
    "aniruddhamaru@gmail.com",
    "cloudchacho"
  ],
  "kwds": "hedwig_queue hedwig hedwig_message_routing hedwig_subscriptions hedwig_publisher_backend",
  "license_kwds": "apache software license (apache license 2.0)",
  "libtype": "pypi",
  "id": "pypi_authedwig",
  "homepage": "https://github.com/cloudchacho/hedwig-python",
  "release_count": 41,
  "dependency_ids": [
    "pypi_black",
    "pypi_boto3",
    "pypi_boto3_stubs",
    "pypi_bumpversion",
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_dataclasses",
    "pypi_docutils",
    "pypi_factory_boy",
    "pypi_flake8",
    "pypi_freezegun",
    "pypi_funcy",
    "pypi_google_cloud_pubsub",
    "pypi_grpcio_status",
    "pypi_ipdb",
    "pypi_jinja2",
    "pypi_jsonpointer",
    "pypi_jsonschema",
    "pypi_moto",
    "pypi_mypy",
    "pypi_mypy_protobuf",
    "pypi_opentelemetry_api",
    "pypi_opentelemetry_sdk",
    "pypi_pip_tools",
    "pypi_protobuf",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_env",
    "pypi_retrying",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_structlog",
    "pypi_twine",
    "pypi_types_dataclasses",
    "pypi_types_protobuf",
    "pypi_wheel"
  ]
}
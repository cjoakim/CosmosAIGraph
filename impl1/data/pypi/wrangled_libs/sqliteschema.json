{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: database",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: terminals"
  ],
  "description": ".. contents:: **sqliteschema**\n   :backlinks: top\n   :depth: 2\n\n\nsummary\n=======\n`sqliteschema <https://github.com/thombashi/sqliteschema>`__ is a python library to dump table schema of a sqlite database file.\n\n\n.. image:: https://badge.fury.io/py/sqliteschema.svg\n    :target: https://badge.fury.io/py/sqliteschema\n    :alt: pypi package version\n\n.. image:: https://img.shields.io/pypi/pyversions/sqliteschema.svg\n    :target: https://pypi.org/project/sqliteschema\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/sqliteschema.svg\n    :target: https://pypi.org/project/sqliteschema\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/sqliteschema/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/thombashi/sqliteschema/actions/workflows/ci.yml\n    :alt: ci status of linux/macos/windows\n\n.. image:: https://coveralls.io/repos/github/thombashi/sqliteschema/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/sqliteschema?branch=master\n    :alt: test coverage\n\n.. image:: https://github.com/thombashi/sqliteschema/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/sqliteschema/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\n\ninstallation\n============\n\ninstall from pypi\n------------------------------\n::\n\n    pip install sqliteschema\n\ninstall optional dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n::\n\n    pip install sqliteschema[cli]  # to use cli\n    pip install sqliteschema[dumps]  # to use dumps method\n    pip install sqliteschema[logging]  # to use logging\n\ninstall from ppa (for ubuntu)\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-sqliteschema\n\n\nusage\n=====\nfull example source code can be found at `examples/get_table_schema.py <https://github.com/thombashi/sqliteschema/blob/master/examples/get_table_schema.py>`__\n\nextract sqlite schemas as dict\n----------------------------------\n:sample code:\n    .. code:: python\n\n        import json\n        import sqliteschema\n\n        extractor = sqliteschema.sqliteschemaextractor(sqlite_db_path)\n\n        print(\n            \"--- dump all of the table schemas into a dictionary ---\\n{}\\n\".format(\n                json.dumps(extractor.fetch_database_schema_as_dict(), indent=4)\n            )\n        )\n\n        print(\n            \"--- dump a specific table schema into a dictionary ---\\n{}\\n\".format(\n                json.dumps(extractor.fetch_table_schema(\"sampletable1\").as_dict(), indent=4)\n            )\n        )\n\n:output:\n    .. code::\n\n        --- dump all of the table schemas into a dictionary ---\n        {\n            \"sampletable0\": [\n                {\n                    \"field\": \"attr_a\",\n                    \"index\": false,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"attr_b\",\n                    \"index\": false,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                }\n            ],\n            \"sampletable1\": [\n                {\n                    \"field\": \"foo\",\n                    \"index\": true,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"bar\",\n                    \"index\": false,\n                    \"type\": \"real\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"hoge\",\n                    \"index\": true,\n                    \"type\": \"text\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                }\n            ],\n            \"constraints\": [\n                {\n                    \"field\": \"primarykey_id\",\n                    \"index\": true,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"pri\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"notnull_value\",\n                    \"index\": false,\n                    \"type\": \"real\",\n                    \"nullable\": \"no\",\n                    \"key\": \"\",\n                    \"default\": \"\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"unique_value\",\n                    \"index\": true,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"uni\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                }\n            ]\n        }\n\n        --- dump a specific table schema into a dictionary ---\n        {\n            \"sampletable1\": [\n                {\n                    \"field\": \"foo\",\n                    \"index\": true,\n                    \"type\": \"integer\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"bar\",\n                    \"index\": false,\n                    \"type\": \"real\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                },\n                {\n                    \"field\": \"hoge\",\n                    \"index\": true,\n                    \"type\": \"text\",\n                    \"nullable\": \"yes\",\n                    \"key\": \"\",\n                    \"default\": \"null\",\n                    \"extra\": \"\"\n                }\n            ]\n        }\n\n\nextract sqlite schemas as tabular text\n--------------------------------------------------------------------\ntable schemas can be output with the ``dumps`` method.\nthe ``dumps`` method requires an additional package that can be installed as follows:\n\n::\n\n    pip install sqliteschema[dumps]\n\nusage is as follows:\n\n:sample code:\n    .. code:: python\n\n        import sqliteschema\n\n        extractor = sqliteschema.sqliteschemaextractor(sqlite_db_path)\n\n        for verbosity_level in range(2):\n            print(\"--- dump all of the table schemas with a tabular format: verbosity_level={} ---\".format(\n                verbosity_level))\n            print(extractor.dumps(output_format=\"markdown\", verbosity_level=verbosity_level))\n\n        for verbosity_level in range(2):\n            print(\"--- dump a specific table schema with a tabular format: verbosity_level={} ---\".format(\n                verbosity_level))\n            print(extractor.fetch_table_schema(\"sampletable1\").dumps(\n                output_format=\"markdown\", verbosity_level=verbosity_level))\n\n:output:\n    .. code::\n\n        --- dump all of the table schemas with a tabular format: verbosity_level=0 ---\n        # sampletable0\n        | field  |  type   |\n        | ------ | ------- |\n        | attr_a | integer |\n        | attr_b | integer |\n\n        # sampletable1\n        | field |  type   |\n        | ----- | ------- |\n        | foo   | integer |\n        | bar   | real    |\n        | hoge  | text    |\n\n        # constraints\n        |     field     |  type   |\n        | ------------- | ------- |\n        | primarykey_id | integer |\n        | notnull_value | real    |\n        | unique_value  | integer |\n\n        --- dump all of the table schemas with a tabular format: verbosity_level=1 ---\n        # sampletable0\n        | field  |  type   | nullable | key | default | index | extra |\n        | ------ | ------- | -------- | --- | ------- | :---: | ----- |\n        | attr_a | integer | yes      |     | null    |       |       |\n        | attr_b | integer | yes      |     | null    |       |       |\n\n        # sampletable1\n        | field |  type   | nullable | key | default | index | extra |\n        | ----- | ------- | -------- | --- | ------- | :---: | ----- |\n        | foo   | integer | yes      |     | null    |   x   |       |\n        | bar   | real    | yes      |     | null    |       |       |\n        | hoge  | text    | yes      |     | null    |   x   |       |\n\n        # constraints\n        |     field     |  type   | nullable | key | default | index | extra |\n        | ------------- | ------- | -------- | --- | ------- | :---: | ----- |\n        | primarykey_id | integer | yes      | pri | null    |   x   |       |\n        | notnull_value | real    | no       |     |         |       |       |\n        | unique_value  | integer | yes      | uni | null    |   x   |       |\n\n        --- dump a specific table schema with a tabular format: verbosity_level=0 ---\n        # sampletable1\n        | field |  type   |\n        | ----- | ------- |\n        | foo   | integer |\n        | bar   | real    |\n        | hoge  | text    |\n\n        --- dump a specific table schema with a tabular format: verbosity_level=1 ---\n        # sampletable1\n        | field |  type   | nullable | key | default | index | extra |\n        | ----- | ------- | -------- | --- | ------- | :---: | ----- |\n        | foo   | integer | yes      |     | null    |   x   |       |\n        | bar   | real    | yes      |     | null    |       |       |\n        | hoge  | text    | yes      |     | null    |   x   |       |\n\n\ncli usage\n----------------------------------\n\n:sample code:\n    .. code:: console\n\n        pip install --upgrade sqliteschema[cli]\n        python3 -m sqliteschema <path/to/sqlite_file>\n\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/sqliteschema/network/dependencies>`__\n\noptional dependencies\n----------------------------------\n- `loguru <https://github.com/delgan/loguru>`__\n    - used for logging if the package installed\n- `pytablewriter <https://github.com/thombashi/pytablewriter>`__\n    - required when getting table schemas with tabular text by ``dumps`` method\n",
  "docs_url": null,
  "keywords": "sqlite,library,schema",
  "license": "mit license",
  "name": "sqliteschema",
  "package_url": "https://pypi.org/project/sqliteschema/",
  "project_url": "https://pypi.org/project/sqliteschema/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/sqliteschema/releases",
    "Homepage": "https://github.com/thombashi/sqliteschema",
    "Source": "https://github.com/thombashi/sqliteschema",
    "Tracker": "https://github.com/thombashi/sqliteschema/issues"
  },
  "release_url": "https://pypi.org/project/sqliteschema/2.0.0/",
  "requires_dist": [
    "mbstrdecoder <2,>=0.8.3",
    "tabledata <2,>=1.3.1",
    "typepy <2,>=1.1.4",
    "pytablewriter <2,>=0.64.0 ; extra == 'cli'",
    "loguru <1,>=0.4.1 ; extra == 'cli'",
    "pytablewriter <2,>=0.64.0 ; extra == 'dumps'",
    "loguru <1,>=0.4.1 ; extra == 'logging'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytablewriter <2,>=0.64.0 ; extra == 'test'",
    "pytest-md-report >=0.5.0 ; extra == 'test'",
    "SimpleSQLite >=1.3.2 ; extra == 'test'",
    "pytest-discord >=0.1.6 ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "a python library to dump table schema of a sqlite database file.",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "sqlite_file sqlite sqlite_db_path sqliteschema get_table_schema",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_sqliteschema",
  "homepage": "https://github.com/thombashi/sqliteschema",
  "release_count": 73,
  "dependency_ids": [
    "pypi_loguru",
    "pypi_mbstrdecoder",
    "pypi_pytablewriter",
    "pypi_pytest",
    "pypi_pytest_discord",
    "pypi_pytest_md_report",
    "pypi_simplesqlite",
    "pypi_tabledata",
    "pypi_typepy"
  ]
}
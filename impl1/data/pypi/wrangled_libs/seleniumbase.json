{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: web environment",
    "environment :: win32 (ms windows)",
    "framework :: pytest",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: internet :: www/http :: browsers",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: image processing",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development",
    "topic :: software development :: code generators",
    "topic :: software development :: libraries",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing",
    "topic :: software development :: testing :: acceptance",
    "topic :: software development :: testing :: traffic generation",
    "topic :: utilities"
  ],
  "description": "a complete web automation framework for end-to-end testing.\n<!-- seleniumbase docs -->\n\n\n<h1>seleniumbase</h1>\n\n<p align=\"center\"><a href=\"https://github.com/seleniumbase/seleniumbase/\"><img src=\"https://seleniumbase.github.io/cdn/img/sb_logo_10t.png\" alt=\"seleniumbase\" title=\"seleniumbase\" width=\"266\" /></a></p>\n\n<h2 align=\"center\" class=\"hero__title\">all-in-one test automation framework</h2>\n\n<h3 align=\"center\"><img src=\"https://seleniumbase.github.io/cdn/img/python_logo.png\" title=\"seleniumbase\" width=\"29\" /> for python enthusiasts and enterprise developers <img src=\"https://seleniumbase.github.io/cdn/img/python_logo.png\" title=\"seleniumbase\" width=\"29\" /></h3>\n\n<p align=\"center\"><a href=\"https://pypi.python.org/pypi/seleniumbase\" target=\"_blank\"><img src=\"https://img.shields.io/pypi/v/seleniumbase.svg?color=3399ee\" alt=\"pypi version\" /></a> <a href=\"https://github.com/seleniumbase/seleniumbase/releases\" target=\"_blank\"><img src=\"https://img.shields.io/github/v/release/seleniumbase/seleniumbase.svg?color=22aaee\" alt=\"github version\" /></a> <a href=\"https://seleniumbase.io\"><img src=\"https://img.shields.io/badge/docs-seleniumbase.io-11bbaa.svg\" alt=\"seleniumbase docs\" /></a> <a href=\"https://github.com/seleniumbase/seleniumbase/actions\" target=\"_blank\"><img src=\"https://github.com/seleniumbase/seleniumbase/workflows/ci%20build/badge.svg\" alt=\"seleniumbase github actions\" /></a> <a href=\"https://gitter.im/seleniumbase/seleniumbase\" target=\"_blank\"><img src=\"https://img.shields.io/gitter/room/seleniumbase/seleniumbase.svg\" alt=\"gitter chat\"/></a></p>\n\n<p align=\"center\">\n<a href=\"#python_installation\">\ud83d\ude80 start</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/features_list.md\">\ud83c\udff0 features</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/readme.md\">\ud83d\udcda examples</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md\">\ud83c\udf9b\ufe0f options</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/readme.md\">\ud83c\udf20 scripts</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md\">\ud83d\udcf1 mobile</a>\n<br />\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/method_summary.md\">\ud83d\udcd8 apis</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/syntax_formats.md\"> \ud83d\udd21 formats</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/readme.md\">\ud83d\udcca dashboard</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md\">\ud83d\udd34 recorder</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/locale_codes.md\">\ud83d\uddfe locales</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/readme.md\">\ud83c\udf10 grid</a>\n<br />\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/commander.md\">\ud83c\udf96\ufe0f gui</a> |\n<a href=\"https://seleniumbase.io/demo_page\">\ud83d\udcf0 testpage</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/case_plans.md\">\ud83d\uddc2\ufe0f caseplans</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/html_inspector.md\">\ud83d\udd75\ufe0f inspector</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/master_qa/readme.md\">\ud83e\uddec hybrid</a> |\n<a href=\"https://seleniumbase.io/devices/?url=seleniumbase.com\">\ud83d\udcbb farm</a>\n<br />\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md\">\ud83d\udc41\ufe0f how</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/examples/migration/raw_selenium\">\ud83d\ude9d migrate</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/examples/boilerplates\">\u267b\ufe0f templates</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/integrations/node_js\">\ud83d\ude89 nodegui</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/readme.md\">\ud83d\udcf6 charts</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/readme.md\">\ud83d\ude8e tours</a>\n<br />\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/github/workflows/readme.md\">\ud83e\udd16 ci/cd</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md\">\ud83d\udd79\ufe0f jsmgr</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/translations.md\">\ud83c\udf0f translator</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/readme.md\">\ud83c\udf9e\ufe0f presenter</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/readme.md\">\ud83d\udec2 dialog</a> |\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/readme.md\">\ud83d\uddbc\ufe0f visual</a>\n<br />\n</p>\n\n--------\n\n<p align=\"left\"><a href=\"https://github.com/seleniumbase/seleniumbase/\"><img src=\"https://seleniumbase.github.io/cdn/img/super_logo_sb2.png\" alt=\"seleniumbase\" title=\"seleniumbase\" width=\"232\" /></a></p>\n\n<blockquote>\n<p dir=\"auto\"><strong>explore the readme:</strong></p>\n<ul dir=\"auto\">\n<li><a href=\"#install_seleniumbase\"   ><strong>get started / installation</strong></a></li>\n<li><a href=\"#basic_example_and_usage\"><strong>basic example / usage</strong></a></li>\n<li><a href=\"#common_methods\"         ><strong>common test methods</strong></a></li>\n<li><a href=\"#fun_facts\"              ><strong>fun facts / learn more</strong></a></li>\n<li><a href=\"#demo_mode_and_debugging\"><strong>demo mode / debugging</strong></a></li>\n<li><a href=\"#command_line_options\"   ><strong>command-line options</strong></a></li>\n<li><a href=\"#directory_configuration\"><strong>directory configuration</strong></a></li>\n<li><a href=\"#seleniumbase_dashboard\" ><strong>seleniumbase dashboard</strong></a></li>\n<li><a href=\"#creating_visual_reports\"><strong>generating test reports</strong></a></li>\n</ul>\n</blockquote>\n\n--------\n\n<a id=\"multiple_examples\"></a>\n\n<p align=\"left\"><b>example:</b> <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/test_demo_site.py\" target=\"_blank\">test_demo_site.py</a> from <a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/examples\" target=\"_blank\">./examples/</a> (uses <code translate=\"no\">--chrome</code> by default)</p>\n\n```bash\ncd examples/\npytest test_demo_site.py\n```\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/demo_page\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/demo_page_5.gif\" width=\"480\" alt=\"seleniumbase example\" title=\"seleniumbase example\" /></a></p>\n\n> easy to type, click, select, toggle, drag-and-drop, etc.\n\n--------\n\n<p align=\"left\"><b>example:</b> <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/test_coffee_cart.py\" target=\"_blank\">test_coffee_cart.py</a> from <a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/examples\" target=\"_blank\">./examples/</a></p>\n\n```bash\ncd examples/\npytest test_coffee_cart.py --demo\n```\n\n<p>(<code translate=\"no\">--demo</code> mode slows down tests and highlights actions)</p>\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/coffee/\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/coffee_cart.gif\" width=\"480\" alt=\"seleniumbase coffee cart test\" title=\"seleniumbase coffee cart test\" /></a></p>\n\n> seleniumbase automation can easily order coffee!\n\n<p align=\"left\"><b>here's the code for <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/test_coffee_cart.py\">test_coffee_cart.py</a>:</b></p>\n\n```python\nfrom seleniumbase import basecase\nbasecase.main(__name__, __file__)\n\nclass coffeecarttest(basecase):\n    def test_coffee_cart(self):\n        self.open(\"https://seleniumbase.io/coffee/\")\n        self.assert_title(\"coffee cart\")\n        self.assert_element('button:contains(\"total: $0.00\")')\n        self.click('div[data-sb=\"cappuccino\"]')\n        self.assert_exact_text(\"cart (1)\", 'a[aria-label=\"cart page\"]')\n        self.click('div[data-sb=\"flat-white\"]')\n        self.assert_exact_text(\"cart (2)\", 'a[aria-label=\"cart page\"]')\n        self.click('div[data-sb=\"cafe-latte\"]')\n        self.assert_exact_text(\"cart (3)\", 'a[aria-label=\"cart page\"]')\n        self.click('a[aria-label=\"cart page\"]')\n        self.assert_exact_text(\"total: $53.00\", \"button.pay\")\n        self.click(\"button.pay\")\n        self.type(\"input#name\", \"selenium coffee\")\n        self.type(\"input#email\", \"test@test.test\")\n        self.click(\"button#submit-payment\")\n        self.assert_text(\"thanks for your purchase.\", \"#app .success\")\n```\n\n(for more examples, see the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/readme.md\">seleniumbase/examples/</a> folder.)\n\n--------\n\n<details>\n<summary> \u25b6\ufe0f how is <b>seleniumbase</b> different from raw selenium? (<b>click to expand</b>)</summary>\n<div>\n\n<p>\ud83d\udca1 seleniumbase is a python framework for browser automation and testing. seleniumbase uses <a href=\"https://www.w3.org/tr/webdriver2/#endpoints\" target=\"_blank\">selenium/webdriver</a> apis and incorporates test-runners such as <code translate=\"no\">pytest</code>, <code translate=\"no\">pynose</code>, and <code translate=\"no\">behave</code> to provide organized structure, test discovery, test execution, test state (<i>eg. passed, failed, or skipped</i>), and command-line options for changing default settings (<i>eg. browser selection</i>). with raw selenium, you would need to set up your own options-parser for configuring tests from the command-line.</p>\n\n<p>\ud83d\udca1 seleniumbase's driver manager gives you more control over automatic driver downloads. (use <code translate=\"no\">--driver-version=ver</code> with your <code translate=\"no\">pytest</code> run command to specify the version.) by default, seleniumbase will download a driver version that matches your major browser version if not set.</p>\n\n<p>\ud83d\udca1 seleniumbase automatically detects between css selectors and xpath, which means you don't need to specify the type of selector in your commands (<i>but optionally you could</i>).</p>\n\n<p>\ud83d\udca1 seleniumbase methods often perform multiple actions in a single method call. for example, <code translate=\"no\">self.type(selector, text)</code> does the following:<br />1. waits for the element to be visible.<br />2. waits for the element to be interactive.<br />3. clears the text field.<br />4. types in the new text.<br />5. presses enter/submit if the text ends in <code translate=\"no\">\"\\n\"</code>.<br />with raw selenium, those actions require multiple method calls.</p>\n\n<p>\ud83d\udca1 seleniumbase uses default timeout values when not set:<br />\n\u2705 <code translate=\"no\">self.click(\"button\")</code><br />\nwith raw selenium, methods would fail instantly (<i>by default</i>) if an element needed more time to load:<br />\n\u274c <code translate=\"no\">self.driver.find_element(by=\"css selector\", value=\"button\").click()</code><br />\n(reliable code is better than unreliable code.)</p>\n\n<p>\ud83d\udca1 seleniumbase lets you change the explicit timeout values of methods:<br />\n\u2705 <code translate=\"no\">self.click(\"button\", timeout=10)</code><br />\nwith raw selenium, that requires more code:<br />\n\u274c <code translate=\"no\">webdriverwait(driver, 10).until(ec.element_to_be_clickable(\"css selector\", \"button\")).click()</code><br />\n(simple code is better than complex code.)</p>\n\n<p>\ud83d\udca1 seleniumbase gives you clean error output when a test fails. with raw selenium, error messages can get very messy.</p>\n\n<p>\ud83d\udca1 seleniumbase gives you the option to generate a dashboard and reports for tests. it also saves screenshots from failing tests to the <code translate=\"no\">./latest_logs/</code> folder. raw <a href=\"https://www.selenium.dev/documentation/webdriver/\" translate=\"no\" target=\"_blank\">selenium</a> does not have these options out-of-the-box.</p>\n\n<p>\ud83d\udca1 seleniumbase includes desktop gui apps for running tests, such as <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/commander.md\" translate=\"no\">seleniumbase commander</a> for <code translate=\"no\">pytest</code> and <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/readme.md\" translate=\"no\">seleniumbase behave gui</a> for <code translate=\"no\">behave</code>.</p>\n\n<p>\ud83d\udca1 seleniumbase has its own <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md\">recorder / test generator</a> for creating tests from manual browser actions.</p>\n\n<p>\ud83d\udca1 seleniumbase comes with <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/case_plans.md\">test case management software, (\"caseplans\")</a>, for organizing tests and step descriptions.</p>\n\n<p>\ud83d\udca1 seleniumbase includes tools for <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/readme.md\">building data apps, (\"chartmaker\")</a>, which can generate javascript from python.</p>\n\n</div>\n</details>\n\n--------\n\n<p>\ud83d\udcda <b>learn about different ways of writing tests:</b></p>\n\n<p align=\"left\">\ud83d\udcd8\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/test_simple_login.py\">example test</a> using <code translate=\"no\"><a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/fixtures/base_case.py\">basecase</a></code> class inheritance. runs with <b><a href=\"https://docs.pytest.org/en/latest/how-to/usage.html\">pytest</a></b> or <b><a href=\"https://github.com/mdmintz/pynose\">pynose</a></b>.  (<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/readme.md\">learn more</a>). (use <code translate=\"no\">self.driver</code> to access selenium's raw <code translate=\"no\">driver</code>.)</p>\n\n```python\nfrom seleniumbase import basecase\nbasecase.main(__name__, __file__)\n\nclass testsimplelogin(basecase):\n    def test_simple_login(self):\n        self.open(\"seleniumbase.io/simple/login\")\n        self.type(\"#username\", \"demo_user\")\n        self.type(\"#password\", \"secret_pass\")\n        self.click('a:contains(\"sign in\")')\n        self.assert_exact_text(\"welcome!\", \"h1\")\n        self.assert_element(\"img#image1\")\n        self.highlight(\"#image1\")\n        self.click_link(\"sign out\")\n        self.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">\ud83d\udcd7\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/sb_fixture_tests.py\">example test</a> using the <b><code translate=\"no\">sb</code></b> <code translate=\"no\">pytest</code> fixture. runs with <b><a href=\"https://docs.pytest.org/en/latest/how-to/usage.html\">pytest</a></b>. (use <code translate=\"no\">sb.driver</code> to access selenium's raw <code translate=\"no\">driver</code>.)</p>\n\n```python\ndef test_sb_fixture_with_no_class(sb):\n    sb.open(\"seleniumbase.io/simple/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.click('a:contains(\"sign in\")')\n    sb.assert_exact_text(\"welcome!\", \"h1\")\n    sb.assert_element(\"img#image1\")\n    sb.highlight(\"#image1\")\n    sb.click_link(\"sign out\")\n    sb.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">\ud83d\udcd9\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/raw_login_sb.py\">example test</a> using the <b><code translate=\"no\">sb</code></b> context manager. runs with pure <b><code translate=\"no\">python</code></b>. (use <code translate=\"no\">sb.driver</code> to access selenium's raw <code translate=\"no\">driver</code>.)</p>\n\n```python\nfrom seleniumbase import sb\n\nwith sb() as sb:\n    sb.open(\"seleniumbase.io/simple/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.click('a:contains(\"sign in\")')\n    sb.assert_exact_text(\"welcome!\", \"h1\")\n    sb.assert_element(\"img#image1\")\n    sb.highlight(\"#image1\")\n    sb.click_link(\"sign out\")\n    sb.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">\ud83d\udcd4\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/raw_login_context.py\">example test</a> using the <b><code translate=\"no\">drivercontext</code></b> manager. runs with pure <b><code translate=\"no\">python</code></b>. (the <code translate=\"no\">driver</code> is an improved version of selenium's raw <code translate=\"no\">driver</code>, with more methods.)</p>\n\n```python\nfrom seleniumbase import drivercontext\n\nwith drivercontext() as driver:\n    driver.open(\"seleniumbase.io/simple/login\")\n    driver.type(\"#username\", \"demo_user\")\n    driver.type(\"#password\", \"secret_pass\")\n    driver.click('a:contains(\"sign in\")')\n    driver.assert_exact_text(\"welcome!\", \"h1\")\n    driver.assert_element(\"img#image1\")\n    driver.highlight(\"#image1\")\n    driver.click_link(\"sign out\")\n    driver.assert_text(\"signed out\", \"#top_message\")\n```\n\n<p align=\"left\">\ud83d\udcd4\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/raw_login_driver.py\">example test</a> using the <b><code translate=\"no\">driver</code></b> manager. runs with pure <b><code translate=\"no\">python</code></b>. (the <code>driver</code> is an improved version of selenium's raw <code translate=\"no\">driver</code>, with more methods.)</p>\n\n```python\nfrom seleniumbase import driver\n\ndriver = driver()\ntry:\n    driver.open(\"seleniumbase.io/simple/login\")\n    driver.type(\"#username\", \"demo_user\")\n    driver.type(\"#password\", \"secret_pass\")\n    driver.click('a:contains(\"sign in\")')\n    driver.assert_exact_text(\"welcome!\", \"h1\")\n    driver.assert_element(\"img#image1\")\n    driver.highlight(\"#image1\")\n    driver.click_link(\"sign out\")\n    driver.assert_text(\"signed out\", \"#top_message\")\nfinally:\n    driver.quit()\n```\n\n<p align=\"left\">\ud83d\udcd5\ud83d\udcdd an <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/features/login_app.feature\"> example test</a> using <b translate=\"no\">behave-bdd</b> <a href=\"https://behave.readthedocs.io/en/stable/gherkin.html#features\" target=\"_blank\">gherkin</a> syntax. runs with <b><code translate=\"no\">behave</code></b>. (<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/readme.md\">learn more</a>)</p>\n\n```gherkin\nfeature: seleniumbase scenarios for the simple app\n\n  scenario: verify the simple app (login / logout)\n    given open \"seleniumbase.io/simple/login\"\n    and type \"demo_user\" into \"#username\"\n    and type \"secret_pass\" into \"#password\"\n    and click 'a:contains(\"sign in\")'\n    and assert exact text \"welcome!\" in \"h1\"\n    and assert element \"img#image1\"\n    and highlight \"#image1\"\n    and click link \"sign out\"\n    and assert text \"signed out\" in \"#top_message\"\n```\n\n--------\n\n<a id=\"python_installation\"></a>\n<h2><img src=\"https://seleniumbase.github.io/cdn/img/python_logo.png\" title=\"seleniumbase\" width=\"42\" /> set up python & git:</h2>\n\n<a href=\"https://www.python.org/downloads/\"><img src=\"https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=face42\" title=\"supported python versions\" /></a>\n\n\ud83d\udd35 add <b><a href=\"https://www.python.org/downloads/\">python</a></b> and <b><a href=\"https://git-scm.com/\">git</a></b> to your system path.\n\n\ud83d\udd35 using a <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md\">python virtual env</a> is recommended.\n\n<a id=\"install_seleniumbase\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> install seleniumbase:</h2>\n\n**you can install ``seleniumbase`` from [pypi](https://pypi.org/project/seleniumbase/) or [github](https://github.com/seleniumbase/seleniumbase):**\n\n\ud83d\udd35 **how to install ``seleniumbase`` from pypi:**\n\n```bash\npip install seleniumbase\n```\n\n* (add ``--upgrade`` or ``-u`` to upgrade seleniumbase.)\n* (add ``--force-reinstall`` to upgrade indirect packages.)\n* (use ``pip3`` if multiple versions of python are present.)\n\n\ud83d\udd35 **how to install ``seleniumbase`` from a github clone:**\n\n```bash\ngit clone https://github.com/seleniumbase/seleniumbase.git\ncd seleniumbase/\npip install -e .\n```\n\n\ud83d\udd35 **how to upgrade an existing install from a github clone:**\n\n```bash\ngit pull\npip install -e .\n```\n\n\ud83d\udd35 **type ``seleniumbase`` or ``sbase`` to verify that seleniumbase was installed successfully:**\n\n```bash\n   ______     __           _                  ____                \n  / ____/__  / /__  ____  (_)_  ______ ___   / _  \\____  ________ \n  \\__ \\/ _ \\/ / _ \\/ __ \\/ / / / / __ `__ \\ / /_) / __ \\/ ___/ _ \\\n ___/ /  __/ /  __/ / / / / /_/ / / / / / // /_) / (_/ /__  /  __/\n/____/\\___/_/\\___/_/ /_/_/\\__,_/_/ /_/ /_//_____/\\__,_/____/\\___/ \n------------------------------------------------------------------\n\n * usage: \"seleniumbase [command] [parameters]\"\n *    or:        \"sbase [command] [parameters]\"\n\ncommands:\n      get / install    [driver] [options]\n      methods          (list common python methods)\n      options          (list common pytest options)\n      behave-options   (list common behave options)\n      gui / commander  [optional path or test file]\n      behave-gui       (sbase commander for behave)\n      caseplans        [optional path or test file]\n      mkdir            [directory] [options]\n      mkfile           [file.py] [options]\n      mkrec / codegen  [file.py] [options]\n      recorder         (open recorder desktop app.)\n      record           (if args: mkrec. else: app.)\n      mkpres           [file.py] [lang]\n      mkchart          [file.py] [lang]\n      print            [file] [options]\n      translate        [sb_file.py] [lang] [action]\n      convert          [webdriver_unittest_file.py]\n      extract-objects  [sb_file.py]\n      inject-objects   [sb_file.py] [options]\n      objectify        [sb_file.py] [options]\n      revert-objects   [sb_file.py] [options]\n      encrypt / obfuscate\n      decrypt / unobfuscate\n      download server  (get selenium grid jar file)\n      grid-hub         [start|stop] [options]\n      grid-node        [start|stop] --hub=[host/ip]\n * (example: \"sbase get chromedriver latest\") *\n\n    type \"sbase help [command]\" for specific command info.\n    for info on all commands, type: \"seleniumbase --help\".\n    use \"pytest\" for running tests.\n```\n\n<h3>\ud83d\udd35 downloading webdrivers:</h3>\n\n\u2705 seleniumbase automatically downloads webdrivers as needed, such as ``chromedriver``.\n\n<div></div>\n<details>\n<summary> \u25b6\ufe0f here's sample output from a chromedriver download. (<b>click to expand</b>)</summary>\n\n```bash\n*** chromedriver to download = 116.0.5845.96 (latest stable) \n\ndownloading chromedriver-mac-arm64.zip from:\nhttps://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/mac-arm64/chromedriver-mac-arm64.zip ...\ndownload complete!\n\nextracting ['chromedriver'] from chromedriver-mac-arm64.zip ...\nunzip complete!\n\nthe file [chromedriver] was saved to:\n/users/michael/github/seleniumbase/seleniumbase/drivers/chromedriver\n\nmaking [chromedriver 116.0.5845.96] executable ...\n[chromedriver 116.0.5845.96] is now ready for use!\n```\n\n</details>\n\n\n<a id=\"basic_example_and_usage\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> basic example / usage:</h2>\n\n\ud83d\udd35 if you've cloned seleniumbase, you can run tests from the [examples/](https://github.com/seleniumbase/seleniumbase/tree/master/examples) folder.\n\n<p align=\"left\">here's <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/my_first_test.py\">my_first_test.py</a>:</p>\n\n```bash\ncd examples/\npytest my_first_test.py\n```\n\n> (uses ``--chrome`` by default.)\n\n<a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/my_first_test.py\"><img src=\"https://seleniumbase.github.io/cdn/gif/swag_labs_4.gif\" alt=\"seleniumbase test\" title=\"seleniumbase test\" width=\"480\" /></a>\n\n> seleniumbase easily handles login, shopping, and checkout.\n\n<p align=\"left\"><b>here's the code for <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/my_first_test.py\">my_first_test.py</a>:</b></p>\n\n```python\nfrom seleniumbase import basecase\nbasecase.main(__name__, __file__)\n\nclass mytestclass(basecase):\n    def test_swag_labs(self):\n        self.open(\"https://www.saucedemo.com\")\n        self.type(\"#user-name\", \"standard_user\")\n        self.type(\"#password\", \"secret_sauce\\n\")\n        self.assert_element(\"div.inventory_list\")\n        self.assert_exact_text(\"products\", \"span.title\")\n        self.click('button[name*=\"backpack\"]')\n        self.click(\"#shopping_cart_container a\")\n        self.assert_exact_text(\"your cart\", \"span.title\")\n        self.assert_text(\"backpack\", \"div.cart_item\")\n        self.click(\"button#checkout\")\n        self.type(\"#first-name\", \"seleniumbase\")\n        self.type(\"#last-name\", \"automation\")\n        self.type(\"#postal-code\", \"77123\")\n        self.click(\"input#continue\")\n        self.assert_text(\"checkout: overview\")\n        self.assert_text(\"backpack\", \"div.cart_item\")\n        self.assert_text(\"29.99\", \"div.inventory_item_price\")\n        self.click(\"button#finish\")\n        self.assert_exact_text(\"thank you for your order!\", \"h2\")\n        self.assert_element('img[alt=\"pony express\"]')\n        self.js_click(\"a#logout_sidebar_link\")\n        self.assert_element(\"div#login_button_container\")\n```\n\n* by default, **[css selectors](https://www.w3schools.com/cssref/css_selectors.asp)** are used for finding page elements.\n* if you're new to css selectors, games like [css diner](http://flukeout.github.io/) can help you learn.\n* for more reading, [here's an advanced guide on css attribute selectors](https://developer.mozilla.org/en-us/docs/web/css/attribute_selectors).\n\n\n<a id=\"common_methods\"></a>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> here are some common seleniumbase methods:</h3>\n\n```python\nself.open(url)  # navigate the browser window to the url.\nself.type(selector, text)  # update the field with the text.\nself.click(selector)  # click the element with the selector.\nself.click_link(link_text)  # click the link containing text.\nself.go_back()  # navigate back to the previous url.\nself.select_option_by_text(dropdown_selector, option)\nself.hover_and_click(hover_selector, click_selector)\nself.drag_and_drop(drag_selector, drop_selector)\nself.get_text(selector)  # get the text from the element.\nself.get_current_url()  # get the url of the current page.\nself.get_page_source()  # get the html of the current page.\nself.get_attribute(selector, attribute)  # get element attribute.\nself.get_title()  # get the title of the current page.\nself.switch_to_frame(frame)  # switch into the iframe container.\nself.switch_to_default_content()  # leave the iframe container.\nself.open_new_window()  # open a new window in the same browser.\nself.switch_to_window(window)  # switch to the browser window.\nself.switch_to_default_window()  # switch to the original window.\nself.get_new_driver(options)  # open a new driver with options.\nself.switch_to_driver(driver)  # switch to the browser driver.\nself.switch_to_default_driver()  # switch to the original driver.\nself.wait_for_element(selector)  # wait until element is visible.\nself.is_element_visible(selector)  # return element visibility.\nself.is_text_visible(text, selector)  # return text visibility.\nself.sleep(seconds)  # do nothing for the given amount of time.\nself.save_screenshot(name)  # save a screenshot in .png format.\nself.assert_element(selector)  # verify the element is visible.\nself.assert_text(text, selector)  # verify text in the element.\nself.assert_exact_text(text, selector)  # verify text is exact.\nself.assert_title(title)  # verify the title of the web page.\nself.assert_downloaded_file(file)  # verify file was downloaded.\nself.assert_no_404_errors()  # verify there are no broken links.\nself.assert_no_js_errors()  # verify there are no js errors.\n```\n\n\ud83d\udd35 for the complete list of seleniumbase methods, see: <b><a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/method_summary.md\">method summary</a></b>\n\n\n<a id=\"fun_facts\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> fun facts / learn more:</h2>\n\n<p>\u2705 seleniumbase automatically handles common <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">webdriver</a> actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.</p>\n\n<p>\u2705 seleniumbase lets you <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md\">customize test runs from the command-line</a>.</p>\n\n<p>\u2705 seleniumbase uses simple syntax for commands. example:</p>\n\n```python\nself.type(\"input\", \"dogs\\n\")  # (the \"\\n\" presses enter)\n```\n\nmost seleniumbase scripts can be run with <code translate=\"no\">pytest</code>, <code translate=\"no\">pynose</code>, or pure <code translate=\"no\">python</code>. not all test runners can run all test formats. for example, tests that use the ``sb`` pytest fixture can only be run with ``pytest``. (see <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/syntax_formats.md\">syntax formats</a>) there's also a <a href=\"https://behave.readthedocs.io/en/stable/gherkin.html#features\" target=\"_blank\">gherkin</a> test format that runs with <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/readme.md\">behave</a>.\n\n```bash\npytest coffee_cart_tests.py --rs\npytest test_sb_fixture.py --demo\npytest test_suite.py --rs --html=report.html --dashboard\n\npynose basic_test.py --mobile\npynose test_suite.py --headless --report --show-report\n\npython raw_sb.py\npython raw_test_scripts.py\n\nbehave realworld.feature\nbehave calculator.feature -d rs -d dashboard\n```\n\n<p>\u2705 <code translate=\"no\">pytest</code> includes automatic test discovery. if you don't specify a specific file or folder to run, <code translate=\"no\">pytest</code> will automatically search through all subdirectories for tests to run based on the following criteria:</p>\n\n* python files that start with ``test_`` or end with ``_test.py``.\n* python methods that start with ``test_``.\n\nwith a seleniumbase [pytest.ini](https://github.com/seleniumbase/seleniumbase/blob/master/examples/pytest.ini) file present, you can modify default discovery settings. the python class name can be anything because ``seleniumbase.basecase`` inherits ``unittest.testcase`` to trigger autodiscovery.\n\n<p>\u2705 you can do a pre-flight check to see which tests would get discovered by <code translate=\"no\">pytest</code> before the actual run:</p>\n\n```bash\npytest --co -q\n```\n\n<p>\u2705 you can be more specific when calling <code translate=\"no\">pytest</code> or <code translate=\"no\">pynose</code> on a file:</p>\n\n```bash\npytest [file_name.py]::[class_name]::[method_name]\n\npynose [file_name.py]:[class_name].[method_name]\n```\n\n<p>\u2705 no more flaky tests! seleniumbase methods automatically wait for page elements to finish loading before interacting with them (<i>up to a timeout limit</i>). this means <b>you no longer need random <span><code translate=\"no\">time.sleep()</code></span> statements</b> in your scripts.</p>\n<img src=\"https://img.shields.io/badge/flaky%20tests%3f-%20no%21-11bbdd.svg\" alt=\"no more flaky tests!\" />\n\n\u2705 seleniumbase supports all major browsers and operating systems:\n<p><b>browsers:</b> chrome, edge, firefox, and safari.</p>\n<p><b>systems:</b> linux/ubuntu, macos, and windows.</p>\n\n\u2705 seleniumbase works on all popular ci/cd platforms:\n<p><a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/github/workflows/readme.md\"><img alt=\"github actions integration\" src=\"https://img.shields.io/badge/github_actions-12b2c2.svg?logo=githubactions&logocolor=cfffc2\" /></a> <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/readme.md\"><img alt=\"jenkins integration\" src=\"https://img.shields.io/badge/jenkins-32b242.svg?logo=jenkins&logocolor=white\" /></a> <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/azure_pipelines/readme.md\"><img alt=\"azure integration\" src=\"https://img.shields.io/badge/azure-2288ee.svg?logo=azurepipelines&logocolor=white\" /></a> <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/readme.md\"><img alt=\"google cloud integration\" src=\"https://img.shields.io/badge/google_cloud-11cae8.svg?logo=googlecloud&logocolor=ee0066\" /></a> <a href=\"#utilizing_advanced_features\"><img alt=\"aws integration\" src=\"https://img.shields.io/badge/aws-4488dd.svg?logo=amazonaws&logocolor=ffff44\" /></a> <a href=\"https://en.wikipedia.org/wiki/personal_computer\" target=\"_blank\"><img alt=\"your computer\" src=\"https://img.shields.io/badge/\ud83d\udcbb_your_computer-44e6e6.svg\" /></a></p>\n\n<p>\u2705 seleniumbase includes an automated/manual hybrid solution called <b><a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/master_qa/readme.md\">masterqa</a></b> to speed up manual testing with automation while manual testers handle validation.</p>\n\n<p>\u2705 seleniumbase supports <a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/examples/offline_examples\">running tests while offline</a> (<i>assuming webdrivers have previously been downloaded when online</i>).</p>\n\n<p>\u2705 for a full list of seleniumbase features, <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/features_list.md\">click here</a>.</p>\n\n\n<a id=\"demo_mode_and_debugging\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> demo mode / debugging:</h2>\n\n\ud83d\udd35 <b>demo mode</b> helps you see what a test is doing. if a test is moving too fast for your eyes, run it in <b>demo mode</b> to pause the browser briefly between actions, highlight page elements being acted on, and display assertions:\n\n```bash\npytest my_first_test.py --demo\n```\n\n\ud83d\udd35 ``time.sleep(seconds)`` can be used to make a test wait at a specific spot:\n\n```python\nimport time; time.sleep(3)  # do nothing for 3 seconds.\n```\n\n\ud83d\udd35 **debug mode** with python's built-in **[pdb](https://docs.python.org/3/library/pdb.html)** library helps you debug tests:\n\n```python\nimport pdb; pdb.set_trace()\nimport pytest; pytest.set_trace()\nbreakpoint()  # shortcut for \"import pdb; pdb.set_trace()\"\n```\n\n> (**``pdb``** commands: ``n``, ``c``, ``s``, ``u``, ``d`` => ``next``, ``continue``, ``step``, ``up``, ``down``)\n\n\ud83d\udd35 to pause an active test that throws an exception or error, (*and keep the browser window open while **debug mode** begins in the console*), add **``--pdb``** as a ``pytest`` option:\n\n```bash\npytest test_fail.py --pdb\n```\n\n\ud83d\udd35 to start tests in debug mode, add **``--trace``** as a ``pytest`` option:\n\n```bash\npytest test_coffee_cart.py --trace\n```\n\n<a href=\"https://github.com/mdmintz/pdbp\"><img src=\"https://seleniumbase.github.io/cdn/gif/coffee_pdbp.gif\" alt=\"seleniumbase test with the pdbp (pdb+) debugger\" title=\"seleniumbase test with the pdbp (pdb+) debugger\" /></a>\n\n\n<a id=\"command_line_options\"></a>\n<h2>\ud83d\udd35 command-line options:</h2>\n\n<a id=\"pytest_options\"></a>\n\u2705 here are some useful command-line options that come with <code translate=\"no\">pytest</code>:\n\n```bash\n-v  # verbose mode. prints the full name of each test and shows more details.\n-q  # quiet mode. print fewer details in the console output when running tests.\n-x  # stop running the tests after the first failure is reached.\n--html=report.html  # creates a detailed pytest-html report after tests finish.\n--co | --collect-only  # show what tests would get run. (without running them)\n--co -q  # (both options together!) - do a dry run with full test names shown.\n-n=num  # multithread the tests using that many threads. (speed up test runs!)\n-s  # see print statements. (should be on by default with pytest.ini present.)\n--junit-xml=report.xml  # creates a junit-xml report after tests finish.\n--pdb  # if a test fails, enter post mortem debug mode. (don't use with ci!)\n--trace  # enter debug mode at the beginning of each test. (don't use with ci!)\n-m=marker  # run tests with the specified pytest marker.\n```\n\n<a id=\"new_pytest_options\"></a>\n\u2705 seleniumbase provides additional <code translate=\"no\">pytest</code> command-line options for tests:\n\n```bash\n--browser=browser  # (the web browser to use. default: \"chrome\".)\n--chrome  # (shortcut for \"--browser=chrome\". on by default.)\n--edge  # (shortcut for \"--browser=edge\".)\n--firefox  # (shortcut for \"--browser=firefox\".)\n--safari  # (shortcut for \"--browser=safari\".)\n--settings-file=file  # (override default seleniumbase settings.)\n--env=env  # (set the test env. access with \"self.env\" in tests.)\n--account=str  # (set account. access with \"self.account\" in tests.)\n--data=string  # (extra test data. access with \"self.data\" in tests.)\n--var1=string  # (extra test data. access with \"self.var1\" in tests.)\n--var2=string  # (extra test data. access with \"self.var2\" in tests.)\n--var3=string  # (extra test data. access with \"self.var3\" in tests.)\n--variables=dict  # (extra test data. access with \"self.variables\".)\n--user-data-dir=dir  # (set the chrome user data directory to use.)\n--protocol=protocol  # (the selenium grid protocol: http|https.)\n--server=server  # (the selenium grid server/ip used for tests.)\n--port=port  # (the selenium grid port used by the test server.)\n--cap-file=file  # (the web browser's desired capabilities to use.)\n--cap-string=string  # (the web browser's desired capabilities to use.)\n--proxy=server:port  # (connect to a proxy server:port as tests are running)\n--proxy=username:password@server:port  # (use an authenticated proxy server)\n--proxy-bypass-list=string # (\";\"-separated hosts to bypass, eg \"*.foo.com\")\n--proxy-pac-url=url  # (connect to a proxy server using a pac_url.pac file.)\n--proxy-pac-url=username:password@url  # (authenticated proxy with pac url.)\n--proxy-driver  # (if a driver download is needed, will use: --proxy=proxy.)\n--multi-proxy  # (allow multiple authenticated proxies when multi-threaded.)\n--agent=string  # (modify the web browser's user-agent string.)\n--mobile  # (use the mobile device emulator while running tests.)\n--metrics=string  # (set mobile metrics: \"csswidth,cssheight,pixelratio\".)\n--chromium-arg=\"arg=n,arg2\"  # (set chromium args, \",\"-separated, no spaces.)\n--firefox-arg=\"arg=n,arg2\"  # (set firefox args, comma-separated, no spaces.)\n--firefox-pref=set  # (set a firefox preference:value set, comma-separated.)\n--extension-zip=zip  # (load a chrome extension .zip|.crx, comma-separated.)\n--extension-dir=dir  # (load a chrome extension directory, comma-separated.)\n--binary-location=path  # (set path of the chromium browser binary to use.)\n--driver-version=ver  # (set the chromedriver or uc_driver version to use.)\n--sjw  # (skip js waits for readystate to be \"complete\" or angular to load.)\n--pls=pls  # (set pageloadstrategy on chrome: \"normal\", \"eager\", or \"none\".)\n--headless  # (run tests in headless mode. the default arg on linux os.)\n--headless2  # (use the new headless mode, which supports extensions.)\n--headed  # (run tests in headed/gui mode on linux os, where not default.)\n--xvfb  # (run tests using the xvfb virtual display server on linux os.)\n--locale=locale_code  # (set the language locale code for the web browser.)\n--interval=seconds  # (the autoplay interval for presentations & tour steps)\n--start-page=url  # (the starting url for the web browser when tests begin.)\n--archive-logs  # (archive existing log files instead of deleting them.)\n--archive-downloads  # (archive old downloads instead of deleting them.)\n--time-limit=seconds  # (safely fail any test that exceeds the time limit.)\n--slow  # (slow down the automation. faster than using demo mode.)\n--demo  # (slow down and visually see test actions as they occur.)\n--demo-sleep=seconds  # (set the wait time after slow & demo mode actions.)\n--highlights=num  # (number of highlight animations for demo mode actions.)\n--message-duration=seconds  # (the time length for messenger alerts.)\n--check-js  # (check for javascript errors after page loads.)\n--ad-block  # (block some types of display ads from loading.)\n--host-resolver-rules=rules  # (set host-resolver-rules, comma-separated.)\n--block-images  # (block images from loading during tests.)\n--do-not-track  # (indicate to websites that you don't want to be tracked.)\n--verify-delay=seconds  # (the delay before masterqa verification checks.)\n--recorder  # (enables the recorder for turning browser actions into code.)\n--rec-behave  # (same as recorder mode, but also generates behave-gherkin.)\n--rec-sleep  # (if the recorder is enabled, also records self.sleep calls.)\n--rec-print  # (if the recorder is enabled, prints output after tests end.)\n--disable-js  # (disable javascript on websites. pages might break!)\n--disable-csp  # (disable the content security policy of websites.)\n--disable-ws  # (disable web security on chromium-based browsers.)\n--enable-ws  # (enable web security on chromium-based browsers.)\n--enable-sync  # (enable \"chrome sync\" on websites.)\n--uc | --undetected  # (use undetected-chromedriver to evade bot-detection.)\n--uc-cdp-events  # (capture cdp events when running in \"--undetected\" mode.)\n--log-cdp  # (\"goog:loggingprefs\", {\"performance\": \"all\", \"browser\": \"all\"})\n--remote-debug  # (sync to chrome remote debugger chrome://inspect/#devices)\n--ftrace | --final-trace  # (debug mode after each test. don't use with ci!)\n--dashboard  # (enable the seleniumbase dashboard. saved at: dashboard.html)\n--dash-title=string  # (set the title shown for the generated dashboard.)\n--enable-3d-apis  # (enables webgl and 3d apis.)\n--swiftshader  # (chrome \"--use-gl=angle\" / \"--use-angle=swiftshader-webgl\")\n--incognito  # (enable chrome's incognito mode.)\n--guest  # (enable chrome's guest mode.)\n--dark  # (enable chrome's dark mode.)\n--devtools  # (open chrome's devtools when the browser opens.)\n--rs | --reuse-session  # (reuse browser session for all tests.)\n--rcs | --reuse-class-session  # (reuse session for tests in class.)\n--crumbs  # (delete all cookies between tests reusing a session.)\n--disable-beforeunload  # (disable the \"beforeunload\" event on chrome.)\n--window-size=width,height  # (set the browser's starting window size.)\n--maximize  # (start tests with the browser window maximized.)\n--screenshot  # (save a screenshot at the end of each test.)\n--no-screenshot  # (no screenshots saved unless tests directly ask it.)\n--visual-baseline  # (set the visual baseline for visual/layout tests.)\n--wire  # (use selenium-wire's webdriver for replacing selenium webdriver.)\n--external-pdf  # (set chromium \"plugins.always_open_pdf_externally\":true.)\n--timeout-multiplier=multiplier  # (multiplies the default timeout values.)\n--list-fail-page  # (after each failing test, list the url of the failure.)\n```\n\n(see the full list of command-line option definitions **[here](https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/plugins/pytest_plugin.py)**. for detailed examples of command-line options, see **[customizing_test_runs.md](https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md)**)\n\n--------\n\n\ud83d\udd35 during test failures, logs and screenshots from the most recent test run will get saved to the ``latest_logs/`` folder. those logs will get moved to ``archived_logs/`` if you add --archive_logs to command-line options, or have ``archive_existing_logs`` set to true in [settings.py](https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/config/settings.py), otherwise log files with be cleaned up at the start of the next test run. the ``test_suite.py`` collection contains tests that fail on purpose so that you can see how logging works.\n\n```bash\ncd examples/\n\npytest test_suite.py --chrome\n\npytest test_suite.py --firefox\n```\n\nan easy way to override seleniumbase/config/settings.py is by using a custom settings file.\nhere's the command-line option to add to tests: (see [examples/custom_settings.py](https://github.com/seleniumbase/seleniumbase/blob/master/examples/custom_settings.py))\n``--settings_file=custom_settings.py``\n(settings include default timeout values, a two-factor auth key, db credentials, s3 credentials, and other important settings used by tests.)\n\n\ud83d\udd35 to pass additional data from the command-line to tests, add ``--data=\"any string\"``.\ninside your tests, you can use ``self.data`` to access that.\n\n<a id=\"directory_configuration\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> directory configuration:</h2>\n\n\ud83d\udd35 when running tests with **``pytest``**, you'll want a copy of **[pytest.ini](https://github.com/seleniumbase/seleniumbase/blob/master/pytest.ini)** in your root folders. when running tests with **``pynose``**, you'll want a copy of **[setup.cfg](https://github.com/seleniumbase/seleniumbase/blob/master/setup.cfg)** in your root folders. these files specify default configuration details for tests. test folders should also include a blank **[__init__.py](https://github.com/seleniumbase/seleniumbase/blob/master/examples/offline_examples/__init__.py)** file to allow your test files to import other files from that folder.\n\n\ud83d\udd35 ``sbase mkdir dir`` creates a folder with config files and sample tests:\n\n```bash\nsbase mkdir ui_tests\n```\n\n> that new folder will have these files:\n\n```bash\nui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 my_first_test.py\n\u251c\u2500\u2500 parameterized_test.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 test_demo_site.py\n\u2514\u2500\u2500 boilerplates/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_test_case.py\n    \u251c\u2500\u2500 boilerplate_test.py\n    \u251c\u2500\u2500 classic_obj_test.py\n    \u251c\u2500\u2500 page_objects.py\n    \u251c\u2500\u2500 sb_fixture_test.py\n    \u2514\u2500\u2500 samples/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 google_objects.py\n        \u251c\u2500\u2500 google_test.py\n        \u251c\u2500\u2500 sb_swag_test.py\n        \u2514\u2500\u2500 swag_labs_test.py\n```\n\n<b>protip\u2122:</b> you can also create a boilerplate folder without any sample tests in it by adding ``-b`` or ``--basic`` to the ``sbase mkdir`` command:\n\n```bash\nsbase mkdir ui_tests --basic\n```\n\n> that new folder will have these files:\n\n```bash\nui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.cfg\n```\n\nof those files, the ``pytest.ini`` config file is the most important, followed by a blank ``__init__.py`` file. there's also a ``setup.cfg`` file (for pynose). finally, the ``requirements.txt`` file can be used to help you install seleniumbase into your environments (if it's not already installed).\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> log files from failed tests:</h3>\n\nlet's try an example of a test that fails:\n\n```python\n\"\"\" test_fail.py \"\"\"\nfrom seleniumbase import basecase\nbasecase.main(__name__, __file__)\n\nclass mytestclass(basecase):\n\n    def test_find_army_of_robots_on_xkcd_desert_island(self):\n        self.open(\"https://xkcd.com/731/\")\n        self.assert_element(\"div#army_of_robots\", timeout=1)  # this should fail\n```\n\nyou can run it from the ``examples/`` folder like this:\n\n```bash\npytest test_fail.py\n```\n\n\ud83d\udd35 you'll notice that a logs folder, \"latest_logs\", was created to hold information about the failing test, and screenshots. during test runs, past results get moved to the archived_logs folder if you have archive_existing_logs set to true in [settings.py](https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/config/settings.py), or if your run tests with ``--archive-logs``. if you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.\n\n--------\n\n<a id=\"seleniumbase_dashboard\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> seleniumbase dashboard:</h2>\n\n\ud83d\udd35 the ``--dashboard`` option for pytest generates a seleniumbase dashboard located at ``dashboard.html``, which updates automatically as tests run and produce results. example:\n\n```bash\npytest --dashboard --rs --headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dashboard_1.png\" alt=\"the seleniumbase dashboard\" title=\"the seleniumbase dashboard\" width=\"380\" />\n\n\ud83d\udd35 additionally, you can host your own seleniumbase dashboard server on a port of your choice. here's an example of that using python's ``http.server``:\n\n```bash\npython -m http.server 1948\n```\n\n\ud83d\udd35 now you can navigate to ``http://localhost:1948/dashboard.html`` in order to view the dashboard as a web app. this requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (use <kbd>ctrl+c</kbd> to stop the http server.)\n\n\ud83d\udd35 here's a full example of what the seleniumbase dashboard may look like:\n\n```bash\npytest test_suite.py --dashboard --rs --headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dashboard_2.png\" alt=\"the seleniumbase dashboard\" title=\"the seleniumbase dashboard\" width=\"480\" />\n\n--------\n\n<a id=\"creating_visual_reports\"></a>\n<h2><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> generating test reports:</h2>\n\n<h3>\ud83d\udd35 pytest reports:</h3>\n\n\u2705 using ``--html=report.html`` gives you a fancy report of the name specified after your test suite completes.\n\n```bash\npytest test_suite.py --html=report.html\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/html_report.png\" alt=\"example pytest report\" title=\"example pytest report\" width=\"520\" />\n\n\u2705 when combining pytest html reports with seleniumbase dashboard usage, the pie chart from the dashboard will get added to the html report. additionally, if you set the html report url to be the same as the dashboard url when also using the dashboard, (example: ``--dashboard --html=dashboard.html``), then the dashboard will become an advanced html report when all the tests complete.\n\n\u2705 here's an example of an upgraded html report:\n\n```bash\npytest test_suite.py --dashboard --html=report.html\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/dash_report.jpg\" alt=\"dashboard pytest html report\" title=\"dashboard pytest html report\" width=\"520\" />\n\nif viewing pytest html reports in [jenkins](https://www.jenkins.io/), you may need to [configure jenkins settings](https://stackoverflow.com/a/46197356) for the html to render correctly. this is due to [jenkins csp changes](https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/).\n\nyou can also use ``--junit-xml=report.xml`` to get an xml report instead. jenkins can use this file to display better reporting for your tests.\n\n```bash\npytest test_suite.py --junit-xml=report.xml\n```\n\n<h3>\ud83d\udd35 pynose reports:</h3>\n\nthe ``--report`` option gives you a fancy report after your test suite completes.\n\n```bash\npynose test_suite.py --report\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/nose_report.png\" alt=\"example pynose report\" title=\"example pynose report\" width=\"320\" />\n\n(note: you can add ``--show-report`` to immediately display pynose reports after the test suite completes. only use ``--show-report`` when running tests locally because it pauses the test run.)\n\n<h3>\ud83d\udd35 behave dashboard & reports:</h3>\n\n(the [behave_bdd/](https://github.com/seleniumbase/seleniumbase/tree/master/examples/behave_bdd) folder can be found in the [examples/](https://github.com/seleniumbase/seleniumbase/tree/master/examples) folder.)\n\n```bash\nbehave behave_bdd/features/ -d dashboard -d headless\n```\n\n<img src=\"https://seleniumbase.github.io/cdn/img/sb_behave_dashboard.png\" title=\"seleniumbase\" width=\"500\">\n\nyou can also use ``--junit`` to get ``.xml`` reports for each <code translate=\"no\">behave</code> feature. jenkins can use these files to display better reporting for your tests.\n\n```bash\nbehave behave_bdd/features/ --junit -d rs -d headless\n```\n\n<h3>\ud83d\udd35 allure reports:</h3>\n\nsee: [https://docs.qameta.io/allure/](https://docs.qameta.io/allure/#_pytest)\n\nseleniumbase no longer includes ``allure-pytest`` as part of installed dependencies. if you want to use it, install it first:\n\n```bash\npip install allure-pytest\n```\n\nnow your tests can create allure results files, which can be processed by allure reports.\n\n```bash\npytest test_suite.py --alluredir=allure_results\n```\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> using a proxy server:</h3>\n\nif you wish to use a proxy server for your browser tests (chromium or firefox), you can add ``--proxy=ip_address:port`` as an argument on the command line.\n\n```bash\npytest proxy_test.py --proxy=ip_address:port\n```\n\nif the proxy server that you wish to use requires authentication, you can do the following (chromium only):\n\n```bash\npytest proxy_test.py --proxy=username:password@ip_address:port\n```\n\nseleniumbase also supports socks4 and socks5 proxies:\n\n```bash\npytest proxy_test.py --proxy=\"socks4://ip_address:port\"\n\npytest proxy_test.py --proxy=\"socks5://ip_address:port\"\n```\n\nto make things easier, you can add your frequently-used proxies to proxy_list in [proxy_list.py](https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/config/proxy_list.py), and then use ``--proxy=key_from_proxy_list`` to use the ip_address:port of that key.\n\n```bash\npytest proxy_test.py --proxy=proxy1\n```\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> changing the user-agent:</h3>\n\n\ud83d\udd35 if you wish to change the user-agent for your browser tests (chromium and firefox only), you can add ``--agent=\"user agent string\"`` as an argument on the command-line.\n\n```bash\npytest user_agent_test.py --agent=\"mozilla/5.0 (nintendo 3ds; u; ; en) version/1.7412.eu\"\n```\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> handling pop-up / pop up alerts:</h3>\n\n\ud83d\udd35 <code translate=\"no\">self.accept_alert()</code> automatically waits for and accepts alert pop-ups. <code translate=\"no\">self.dismiss_alert()</code> automatically waits for and dismisses alert pop-ups. on occasion, some methods like <code translate=\"no\">self.click(selector)</code> might dismiss a pop-up on its own because they call javascript to make sure that the <code translate=\"no\">readystate</code> of the page is <code translate=\"no\">complete</code> before advancing. if you're trying to accept a pop-up that got dismissed this way, use this workaround: call <code translate=\"no\">self.find_element(selector).click()</code> instead, (which will let the pop-up remain on the screen), and then use <code translate=\"no\">self.accept_alert()</code> to accept the pop-up (<a href=\"https://github.com/seleniumbase/seleniumbase/issues/600#issuecomment-647270426\">more on that here</a>). if pop-ups are intermittent, wrap code in a try/except block.\n\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> building guided tours for websites:</h3>\n\n\ud83d\udd35 learn about <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/readme.md\">seleniumbase interactive walkthroughs</a> (in the ``examples/tour_examples/`` folder). it's great for prototyping a website onboarding experience.\n\n\n<a id=\"utilizing_advanced_features\"></a>\n\n--------\n\n<div></div>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> production environments & integrations:</h3>\n\n<div></div>\n<details>\n<summary> \u25b6\ufe0f here are some things you can do to set up a production environment for your testing. (<b>click to expand</b>)</summary>\n\n<ul>\n<li>you can set up a <a href=\"https://jenkins.io/\" target=\"_blank\">jenkins</a> build server for running tests at regular intervals. for a real-world jenkins example of headless browser automation in action, check out the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/readme.md\">seleniumbase jenkins example on azure</a> or the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/readme.md\">seleniumbase jenkins example on google cloud</a>.</li>\n\n<li>you can use <a href=\"https://selenium.dev/documentation/en/grid/\" target=\"_blank\">the selenium grid</a> to scale your testing by distributing tests on several machines with parallel execution. to do this, check out the <a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/seleniumbase/utilities/selenium_grid\">seleniumbase selenium_grid folder</a>, which should have everything you need, including the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/readme.md\">selenium grid readme</a> to help you get started.</li>\n\n<li>if you're using the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md\">seleniumbase mysql feature</a> to save results from tests running on a server machine, you can install <a href=\"https://dev.mysql.com/downloads/tools/workbench/\">mysql workbench</a> to help you read & write from your db more easily.</li>\n\n<li>if you're using aws, you can set up an <a href=\"https://aws.amazon.com/s3/\" target=\"_blank\">amazon s3</a> account for saving log files and screenshots from your tests. to activate this feature, modify <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/config/settings.py\">settings.py</a> with connection details in the s3 section, and add <code translate=\"no\">--with-s3-logging</code> on the command-line when running your tests.</li>\n</ul>\n\nhere's an example of running tests with some additional features enabled:\n\n```bash\npytest [your_test_file.py] --with-db-reporting --with-s3-logging\n```\n\n</details>\n\n\n<a id=\"detailed_method_specifications\"></a>\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> detailed method specifications and examples:</h3>\n\n\ud83d\udd35 **navigating to a web page: (and related commands)**\n\n```python\nself.open(\"https://xkcd.com/378/\")  # this method opens the specified page.\n\nself.go_back()  # this method navigates the browser to the previous page.\n\nself.go_forward()  # this method navigates the browser forward in history.\n\nself.refresh_page()  # this method reloads the current page.\n\nself.get_current_url()  # this method returns the current page url.\n\nself.get_page_source()  # this method returns the current page source.\n```\n\n<b>protip\u2122:</b> you can use the <code translate=\"no\">self.get_page_source()</code> method with python's <code translate=\"no\">find()</code> command to parse through html to find something specific. (for more advanced parsing, see the <a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/examples/test_parse_soup.py\">beautifulsoup example</a>.)\n\n```python\nsource = self.get_page_source()\nhead_open_tag = source.find('<head>')\nhead_close_tag = source.find('</head>', head_open_tag)\neverything_inside_head = source[head_open_tag+len('<head>'):head_close_tag]\n```\n\n\ud83d\udd35 **clicking:**\n\nto click an element on the page:\n\n```python\nself.click(\"div#my_id\")\n```\n\n**protip\u2122:** in most web browsers, you can right-click on a page and select ``inspect element`` to see the css selector details that you'll need to create your own scripts.\n\n\ud83d\udd35 **typing text:**\n\n<code translate=\"no\">self.type(selector, text)</code>  # updates the text from the specified element with the specified value. an exception is raised if the element is missing or if the text field is not editable. example:\n\n```python\nself.type(\"input#id_value\", \"2012\")\n```\n\nyou can also use <code translate=\"no\">self.add_text()</code> or the <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">webdriver</a> <code translate=\"no\">.send_keys()</code> command, but those won't clear the text box first if there's already text inside.\n\n\ud83d\udd35 **getting the text from an element on a page:**\n\n```python\ntext = self.get_text(\"header h2\")\n```\n\n\ud83d\udd35 **getting the attribute value from an element on a page:**\n\n```python\nattribute = self.get_attribute(\"#comic img\", \"title\")\n```\n\n\ud83d\udd35 **asserting existence of an element on a page within some number of seconds:**\n\n```python\nself.wait_for_element_present(\"div.my_class\", timeout=10)\n```\n\n(note: you can also use: ``self.assert_element_present(element)``)\n\n\ud83d\udd35 **asserting visibility of an element on a page within some number of seconds:**\n\n```python\nself.wait_for_element_visible(\"a.my_class\", timeout=5)\n```\n\n(note: the short versions of that are ``self.find_element(element)`` and ``self.assert_element(element)``. the ``find_element()`` version returns the element.)\n\nsince the line above returns the element, you can combine that with ``.click()`` as shown below:\n\n```python\nself.find_element(\"a.my_class\", timeout=5).click()\n\n# but you're better off using the following statement, which does the same thing:\n\nself.click(\"a.my_class\")  # do it this way!\n```\n\n**protip\u2122:** you can use dots to signify class names (ex: ``div.class_name``) as a simplified version of ``div[class=\"class_name\"]`` within a css selector. \n\nyou can also use ``*=`` to search for any partial value in a css selector as shown below:\n\n```python\nself.click('a[name*=\"partial_name\"]')\n```\n\n\ud83d\udd35 **asserting visibility of text inside an element on a page within some number of seconds:**\n\n```python\nself.assert_text(\"make it so!\", \"div#trek div.picard div.quotes\")\nself.assert_text(\"tea. earl grey. hot.\", \"div#trek div.picard div.quotes\", timeout=3)\n```\n\n(note: ``self.find_text(text, element)`` and ``self.wait_for_text(text, element)`` also do this. for backwards compatibility, older method names were kept, but the default timeout may be different.)\n\n\ud83d\udd35 **asserting anything:**\n\n```python\nself.assert_true(var1 == var2)\n\nself.assert_false(var1 == var2)\n\nself.assert_equal(var1, var2)\n```\n\n\ud83d\udd35 **useful conditional statements: (with creative examples)**\n\n\u2753 ``is_element_visible(selector):``  (visible on the page)\n\n```python\nif self.is_element_visible('div#warning'):\n    print(\"red alert: something bad might be happening!\")\n```\n\n\u2753 ``is_element_present(selector):``  (present in the html)\n\n```python\nif self.is_element_present('div#top_secret img.tracking_cookie'):\n    self.contact_cookie_monster()  # not a real seleniumbase method\nelse:\n    current_url = self.get_current_url()\n    self.contact_the_nsa(url=current_url, message=\"dark zone found\")  # not a real seleniumbase method\n```\n\n```python\ndef is_there_a_cloaked_klingon_ship_on_this_page():\n    if self.is_element_present(\"div.ships div.klingon\"):\n        return not self.is_element_visible(\"div.ships div.klingon\")\n    return false\n```\n\n\u2753 ``is_text_visible(text, selector):``  (text visible on element)\n\n```python\nif self.is_text_visible(\"you shall not pass!\", \"h1\"):\n    self.open(\"https://www.youtube.com/watch?v=3xyxuesmb-y\")\n```\n\n<div></div>\n<details>\n<summary> \u25b6\ufe0f click for a longer example of <code translate=\"no\">is_text_visible():</code></summary>\n\n```python\ndef get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):\n    selector = \"div.superbowl_%s div.commercials div.transcript div.picard\" % superbowl_year\n    if self.is_text_visible(\"yes, it was i who summoned you all here.\", selector):\n        return \"picard paramount+ superbowl ad 2020\"\n    elif self.is_text_visible(\"commander, signal the following: our network is secure!\"):\n        return \"picard mirror universe iboss superbowl ad 2018\"\n    elif self.is_text_visible(\"for the love of marketing and earl grey tea!\", selector):\n        return \"picard mirror universe hubspot superbowl ad 2015\"\n    elif self.is_text_visible(\"delivery drones... engage\", selector):\n        return \"picard mirror universe amazon superbowl ad 2015\"\n    elif self.is_text_visible(\"bing it on screen!\", selector):\n        return \"picard mirror universe microsoft superbowl ad 2015\"\n    elif self.is_text_visible(\"ok glass, make it so!\", selector):\n        return \"picard mirror universe google superbowl ad 2015\"\n    elif self.is_text_visible(\"number one, i've never seen anything like it.\", selector):\n        return \"picard mirror universe tesla superbowl ad 2015\"\n    elif self.is_text_visible(\"let us make sure history never forgets the name ... facebook\", selector):\n        return \"picard mirror universe facebook superbowl ad 2015\"\n    elif self.is_text_visible(\"\"\"with the first link, the chain is forged.\n                              the first speech censored, the first thought forbidden,\n                              the first freedom denied, chains us all irrevocably.\"\"\", selector):\n        return \"picard mirror universe wikimedia superbowl ad 2015\"\n    else:\n        raise exception(\"reports of my assimilation are greatly exaggerated.\")\n```\n\n</details>\n\n\u2753 ``is_link_text_visible(link_text):``\n\n```python\nif self.is_link_text_visible(\"stop! hammer time!\"):\n    self.click_link(\"stop! hammer time!\")\n```\n\n<h3>\ud83d\udd35 switching tabs:</h3>\n\n<p>if your test opens up a new tab/window, you can switch to it. (seleniumbase automatically switches to new tabs that don't open to <code translate=\"no\">about:blank</code> urls.)</p>\n\n```python\nself.switch_to_window(1)  # this switches to the new tab (0 is the first one)\n```\n\n<h3>\ud83d\udd35 how to handle iframes:</h3>\n\n\ud83d\udd35 <b>iframes</b> follow the same principle as new windows: you must first switch to the iframe if you want to perform actions in there:\n\n```python\nself.switch_to_frame(\"iframe\")\n# ... now perform actions inside the iframe\nself.switch_to_parent_frame()  # exit the current iframe\n```\n\nto exit from multiple iframes, use ``self.switch_to_default_content()``. (if inside a single iframe, this has the same effect as ``self.switch_to_parent_frame()``.)\n\n```python\nself.switch_to_frame('iframe[name=\"frame1\"]')\nself.switch_to_frame('iframe[name=\"frame2\"]')\n# ... now perform actions inside the inner iframe\nself.switch_to_default_content()  # back to the main page\n```\n\n\ud83d\udd35 you can also use a context manager to act inside iframes:\n\n```python\nwith self.frame_switch(\"iframe\"):\n    # ... now perform actions while inside the code block\n# you have left the iframe\n```\n\nthis also works with nested iframes:\n\n```python\nwith self.frame_switch('iframe[name=\"frame1\"]'):\n    with self.frame_switch('iframe[name=\"frame2\"]'):\n        # ... now perform actions while inside the code block\n    # you are now back inside the first iframe\n# you have left all the iframes\n```\n\n<h3>\ud83d\udd35 how to execute custom jquery scripts:</h3>\n\n<p>jquery is a powerful javascript library that allows you to perform advanced actions in a web browser.\nif the web page you're on already has jquery loaded, you can start executing jquery scripts immediately.\nyou'd know this because the web page would contain something like the following in the html:</p>\n\n```html\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n```\n\n\ud83d\udd35 it's ok if you want to use jquery on a page that doesn't have it loaded yet. to do so, run the following command first:\n\n```python\nself.activate_jquery()\n```\n\n<div></div>\n<details>\n<summary> \u25b6\ufe0f here are some examples of using jquery in your scripts. (<b>click to expand</b>)</summary>\n\n```python\nself.execute_script(\"jquery, window.scrollto(0, 600)\")  # scrolling the page\n\nself.execute_script(\"jquery('#annoying-widget').hide()\")  # hiding elements on a page\n\nself.execute_script(\"jquery('#hidden-widget').show(0)\")  # showing hidden elements on a page\n\nself.execute_script(\"jquery('#annoying-button a').remove()\")  # removing elements on a page\n\nself.execute_script(\"jquery('%s').mouseover()\" % (mouse_over_item))  # mouse-over elements on a page\n\nself.execute_script(\"jquery('input#the_id').val('my_text')\")  # fast text input on a page\n\nself.execute_script(\"jquery('div#dropdown a.link').click()\")  # click elements on a page\n\nself.execute_script(\"return jquery('div#amazing')[0].text\")  # returns the css \"text\" of the element given\n\nself.execute_script(\"return jquery('textarea')[2].value\")  # returns the css \"value\" of the 3rd textarea element on the page\n```\n\n(most of the above commands can be done directly with built-in seleniumbase methods.)\n\n</details>\n\n<h3>\ud83d\udd35 how to handle a restrictive csp:</h3>\n\n\u2757 some websites have a restrictive [content security policy](https://developer.mozilla.org/en-us/docs/web/http/csp) to prevent users from loading jquery and other external libraries onto their websites. if you need to use jquery or another js library on those websites, add ``--disable-csp`` as a ``pytest`` command-line option to load a chromium extension that bypasses the csp.\n\n<h3>\ud83d\udd35 more javascript fun:</h3>\n\n<div></div>\n<details>\n<summary> \u25b6\ufe0f in this example, javascript creates a referral button on a page, which is then clicked. (<b>click to expand</b>)</summary>\n\n```python\nstart_page = \"https://xkcd.com/465/\"\ndestination_page = \"https://github.com/seleniumbase/seleniumbase\"\nself.open(start_page)\nreferral_link = '''<a class='analytics test' href='%s'>free-referral button!</a>''' % destination_page\nself.execute_script('''document.body.innerhtml = \\\"%s\\\"''' % referral_link)\nself.click(\"a.analytics\")  # clicks the generated button\n```\n\n(due to popular demand, this traffic generation example has been included in seleniumbase with the <code translate=\"no\">self.generate_referral(start_page, end_page)</code> and the <code translate=\"no\">self.generate_traffic(start_page, end_page, loops)</code> methods.)\n\n</details>\n\n<h3>\ud83d\udd35 how to use deferred asserts:</h3>\n\n<p>let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. that's where deferred asserts come in. here's the example:</p>\n\n```python\nfrom seleniumbase import basecase\nbasecase.main(__name__, __file__)\n\nclass mytestclass(basecase):\n    def test_deferred_asserts(self):\n        self.open('https://xkcd.com/993/')\n        self.wait_for_element('#comic')\n        self.deferred_assert_element('img[alt=\"brand identity\"]')\n        self.deferred_assert_element('img[alt=\"rocket ship\"]')  # will fail\n        self.deferred_assert_element('#comicmap')\n        self.deferred_assert_text('fake item', '#middlecontainer')  # will fail\n        self.deferred_assert_text('random', '#middlecontainer')\n        self.deferred_assert_element('a[name=\"super fake !!!\"]')  # will fail\n        self.process_deferred_asserts()\n```\n\n<code translate=\"no\">deferred_assert_element()</code> and <code translate=\"no\">deferred_assert_text()</code> will save any exceptions that would be raised.\nto flush out all the failed deferred asserts into a single exception, make sure to call <code translate=\"no\">self.process_deferred_asserts()</code> at the end of your test method. if your test hits multiple pages, you can call <code translate=\"no\">self.process_deferred_asserts()</code> before navigating to a new page so that the screenshot from your log files matches the url where the deferred asserts were made.\n\n<h3>\ud83d\udd35 how to access raw <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">webdriver</a>:</h3>\n\n<p>if you need access to any commands that come with standard <a href=\"https://www.selenium.dev/documentation/webdriver/\" target=\"_blank\">webdriver</a>, you can call them directly like this:</p>\n\n```python\nself.driver.delete_all_cookies()\ncapabilities = self.driver.capabilities\nself.driver.find_elements(\"partial link text\", \"github\")\n```\n\n(in general, you'll want to use the seleniumbase versions of methods when available.)\n\n<h3>\ud83d\udd35 how to retry failing tests automatically:</h3>\n\n<p>you can use <code translate=\"no\">pytest --reruns=num</code> to retry failing tests that many times. add <code translate=\"no\">--reruns-delay=seconds</code> to wait that many seconds between retries. example:</p>\n\n```bash\npytest --reruns=1 --reruns-delay=1\n```\n\n<p>you can use the <code translate=\"no\">@retry_on_exception()</code> decorator to retry failing methods. (first import: <code translate=\"no\">from seleniumbase import decorators</code>). to learn more about seleniumbase decorators, <a href=\"https://github.com/seleniumbase/seleniumbase/tree/master/seleniumbase/common\">click here</a>.</p>\n\n--------\n\n> \"catch bugs in qa before deploying code to production!\"\n\n<p align=\"left\"><a href=\"https://seleniumbase.io/error_page\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/cdn/gif/error_page.gif\" alt=\"catch bugs in qa before deploying code to production!\" title=\"catch bugs in qa before deploying code to production!\" /></a></p>\n\n--------\n\n<h3><img src=\"https://seleniumbase.github.io/img/logo7.png\" title=\"seleniumbase\" width=\"32\" /> wrap-up</h3>\n\n<p>\n<div><b>if you see something, say something!</b></div>\n<div><a href=\"https://github.com/seleniumbase/seleniumbase/issues?q=is%3aissue+is%3aclosed\"><img src=\"https://img.shields.io/github/issues-closed-raw/seleniumbase/seleniumbase.svg?color=22bb88\" title=\"closed issues\" /></a>   <a href=\"https://github.com/seleniumbase/seleniumbase/pulls?q=is%3apr+is%3aclosed\"><img src=\"https://img.shields.io/github/issues-pr-closed/seleniumbase/seleniumbase.svg?logo=github&logocolor=white&color=22bb99\" title=\"closed pull requests\" /></a></div>\n</p>\n\n<p align=\"left\"><a href=\"https://github.com/seleniumbase/seleniumbase/\"><img src=\"https://seleniumbase.github.io/cdn/img/sb_logo_10t.png\" alt=\"seleniumbase\" title=\"seleniumbase\" width=\"266\" /></a></p>\n\n<p><div>\n<span><a href=\"https://www.youtube.com/playlist?list=plp9ukicxkbc5uilgi2bue3awc7jyxpd3m\"><img src=\"https://seleniumbase.github.io/cdn/img/youtube.png\" title=\"seleniumbase playlist on youtube\" alt=\"seleniumbase playlist on youtube\" width=\"68\" /></a></span>\n<span><a href=\"https://github.com/seleniumbase/seleniumbase\"><img src=\"https://seleniumbase.github.io/img/social/share_github.svg\" title=\"seleniumbase on github\" alt=\"seleniumbase on github\" width=\"62\" /></a></span>\n<span><a href=\"https://www.facebook.com/seleniumbase\"><img src=\"https://seleniumbase.io/img/social/share_facebook.svg\" title=\"seleniumbase on facebook\" alt=\"seleniumbase on facebook\" width=\"64\" /></a></span>\n<span><a href=\"https://gitter.im/seleniumbase/seleniumbase\" target=\"_blank\"><img src=\"https://seleniumbase.github.io/img/social/share_gitter.svg\" title=\"seleniumbase on gitter\" alt=\"seleniumbase on gitter\" width=\"50\" /></a></span>\n</div></p>\n\n<p><div><b><a href=\"https://github.com/mdmintz\">https://github.com/mdmintz</a></b></div></p>\n\n<div><a href=\"https://github.com/seleniumbase/seleniumbase/\"><img src=\"https://seleniumbase.github.io/cdn/img/fancy_logo_14.png\" title=\"seleniumbase\" width=\"240\" /></a></div> <div><a href=\"https://seleniumbase.io\"><img src=\"https://img.shields.io/badge/docs-seleniumbase.io-11bbaa.svg\" alt=\"seleniumbase docs\" /></a></div> <div><a href=\"https://github.com/seleniumbase/seleniumbase\"><img src=\"https://img.shields.io/badge/tested%20with-seleniumbase-04c38e.svg\" alt=\"tested with seleniumbase\" /></a></div> <div><a href=\"https://github.com/seleniumbase/seleniumbase/blob/master/license\"><img src=\"https://img.shields.io/badge/license-mit-22bbcc.svg\" title=\"seleniumbase\" /></a> <a href=\"https://gitter.im/seleniumbase/seleniumbase\" target=\"_blank\"><img src=\"https://img.shields.io/gitter/room/seleniumbase/seleniumbase.svg\" alt=\"gitter chat\"/></a></div>\n<div><a href=\"https://pepy.tech/project/seleniumbase\" target=\"_blank\"><img src=\"https://static.pepy.tech/badge/seleniumbase\" alt=\"seleniumbase pypi downloads\" /></a></div>\n<div><a href=\"https://github.com/seleniumbase/seleniumbase\"><img src=\"https://hits.dwyl.com/seleniumbase/hits.svg\" alt=\"visitor badge\"/></a></div>\n<div><a href=\"https://github.com/seleniumbase/seleniumbase/stargazers\"><img src=\"https://img.shields.io/github/stars/seleniumbase/seleniumbase.svg?color=19a57b\" title=\"stargazers\" /></a></div>\n\n--------\n\n<p><a href=\"https://github.com/seleniumbase/seleniumbase/\"><img src=\"https://seleniumbase.github.io/cdn/img/super_logo_sb.png\" alt=\"seleniumbase\" title=\"seleniumbase\" width=\"300\" /></a></p>\n<p><a href=\"https://pypi.org/project/seleniumbase/\" target=\"_blank\"><img src=\"https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=22aaee&logo=python&logocolor=fedc54\" title=\"supported python versions\" /></a></p>\n",
  "docs_url": null,
  "keywords": "pytest automation selenium browser testing webdriver sbase",
  "license": "mit",
  "name": "seleniumbase",
  "package_url": "https://pypi.org/project/seleniumbase/",
  "project_url": "https://pypi.org/project/seleniumbase/",
  "project_urls": {
    "Blog": "https://seleniumbase.com/",
    "Changelog": "https://github.com/seleniumbase/SeleniumBase/releases",
    "Documentation": "https://seleniumbase.io/",
    "Download": "https://pypi.org/project/seleniumbase/#files",
    "Gitter": "https://gitter.im/seleniumbase/SeleniumBase",
    "Homepage": "https://github.com/seleniumbase/SeleniumBase",
    "PyPI": "https://pypi.org/project/seleniumbase/",
    "Source": "https://github.com/seleniumbase/SeleniumBase"
  },
  "release_url": "https://pypi.org/project/seleniumbase/4.22.3/",
  "requires_dist": [
    "pip >=23.3.2",
    "packaging >=23.2",
    "wheel >=0.42.0",
    "attrs >=23.1.0",
    "certifi >=2023.11.17",
    "parse >=1.20.0",
    "parse-type >=0.6.2",
    "six ==1.16.0",
    "idna ==3.6",
    "chardet ==5.2.0",
    "charset-normalizer ==3.3.2",
    "requests ==2.31.0",
    "pynose ==1.4.8",
    "sniffio ==1.3.0",
    "h11 ==0.14.0",
    "outcome ==1.3.0.post0",
    "trio-websocket ==0.11.1",
    "wsproto ==1.2.0",
    "cssselect ==1.2.0",
    "sortedcontainers ==2.4.0",
    "fasteners ==0.19",
    "execnet ==2.0.2",
    "iniconfig ==2.0.0",
    "py ==1.11.0",
    "pytest ==7.4.3",
    "pytest-html ==2.0.1",
    "pytest-metadata ==3.0.0",
    "pytest-ordering ==0.6",
    "pytest-rerunfailures ==13.0",
    "pytest-xdist ==3.5.0",
    "parameterized ==0.9.0",
    "sbvirtualdisplay ==1.3.0",
    "behave ==1.2.6",
    "beautifulsoup4 ==4.12.2",
    "pygments ==2.17.2",
    "tabcompleter ==1.3.0",
    "pdbp ==1.5.0",
    "colorama ==0.4.6",
    "exceptiongroup ==1.2.0",
    "pyotp ==2.9.0",
    "mdurl ==0.1.2",
    "rich ==13.7.0",
    "pyreadline3 ==3.4.1 ; platform_system == \"Windows\"",
    "urllib3 <2,>=1.26.18 ; python_version < \"3.10\"",
    "setuptools >=68.0.0 ; python_version < \"3.8\"",
    "filelock >=3.12.2 ; python_version < \"3.8\"",
    "platformdirs >=4.0.0 ; python_version < \"3.8\"",
    "trio ==0.22.2 ; python_version < \"3.8\"",
    "selenium ==4.11.2 ; python_version < \"3.8\"",
    "pluggy ==1.2.0 ; python_version < \"3.8\"",
    "soupsieve ==2.4.1 ; python_version < \"3.8\"",
    "markdown-it-py ==2.2.0 ; python_version < \"3.8\"",
    "urllib3 <2.2.0,>=1.26.18 ; python_version >= \"3.10\"",
    "setuptools >=69.0.3 ; python_version >= \"3.8\"",
    "filelock >=3.13.1 ; python_version >= \"3.8\"",
    "platformdirs >=4.1.0 ; python_version >= \"3.8\"",
    "trio ==0.23.2 ; python_version >= \"3.8\"",
    "selenium ==4.16.0 ; python_version >= \"3.8\"",
    "pluggy ==1.3.0 ; python_version >= \"3.8\"",
    "soupsieve ==2.5 ; python_version >= \"3.8\"",
    "markdown-it-py ==3.0.0 ; python_version >= \"3.8\"",
    "allure-pytest ==2.13.2 ; extra == 'allure'",
    "allure-python-commons ==2.13.2 ; extra == 'allure'",
    "allure-behave ==2.13.2 ; extra == 'allure'",
    "pytest-cov ==4.1.0 ; extra == 'coverage'",
    "coverage ==7.2.7 ; (python_version < \"3.8\") and extra == 'coverage'",
    "coverage ==7.3.4 ; (python_version >= \"3.8\") and extra == 'coverage'",
    "mccabe ==0.7.0 ; extra == 'flake8'",
    "flake8 ==5.0.4 ; (python_version < \"3.9\") and extra == 'flake8'",
    "pyflakes ==2.5.0 ; (python_version < \"3.9\") and extra == 'flake8'",
    "pycodestyle ==2.9.1 ; (python_version < \"3.9\") and extra == 'flake8'",
    "flake8 ==6.1.0 ; (python_version >= \"3.9\") and extra == 'flake8'",
    "pyflakes ==3.1.0 ; (python_version >= \"3.9\") and extra == 'flake8'",
    "pycodestyle ==2.11.1 ; (python_version >= \"3.9\") and extra == 'flake8'",
    "ipdb ==0.13.13 ; extra == 'ipdb'",
    "ipython ==7.34.0 ; extra == 'ipdb'",
    "pdfminer.six ==20221105 ; extra == 'pdfminer'",
    "pycparser ==2.21 ; extra == 'pdfminer'",
    "cffi ==1.15.1 ; (python_version < \"3.8\") and extra == 'pdfminer'",
    "cryptography ==39.0.2 ; (python_version < \"3.9\") and extra == 'pdfminer'",
    "cffi ==1.16.0 ; (python_version >= \"3.8\") and extra == 'pdfminer'",
    "cryptography ==41.0.7 ; (python_version >= \"3.9\") and extra == 'pdfminer'",
    "Pillow ==9.5.0 ; (python_version < \"3.8\") and extra == 'pillow'",
    "Pillow ==10.1.0 ; (python_version >= \"3.8\") and extra == 'pillow'",
    "psutil ==5.9.6 ; extra == 'psutil'",
    "selenium-wire ==5.1.0 ; extra == 'selenium-wire'",
    "Brotli ==1.1.0 ; extra == 'selenium-wire'",
    "blinker ==1.7.0 ; extra == 'selenium-wire'",
    "h2 ==4.1.0 ; extra == 'selenium-wire'",
    "hpack ==4.0.0 ; extra == 'selenium-wire'",
    "hyperframe ==6.0.1 ; extra == 'selenium-wire'",
    "kaitaistruct ==0.10 ; extra == 'selenium-wire'",
    "pyasn1 ==0.5.1 ; extra == 'selenium-wire'",
    "zstandard ==0.22.0 ; extra == 'selenium-wire'"
  ],
  "requires_python": ">=3.7",
  "summary": "a complete web automation framework for end-to-end testing.",
  "version": "4.22.3",
  "releases": [],
  "developers": [
    "mdmintz@gmail.com",
    "michael_mintz"
  ],
  "kwds": "seleniumbase selenium install_seleniumbase raw_selenium seleniumbase_dashboard",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_seleniumbase",
  "homepage": "https://github.com/seleniumbase/seleniumbase",
  "release_count": 887,
  "dependency_ids": [
    "pypi_allure_behave",
    "pypi_allure_pytest",
    "pypi_allure_python_commons",
    "pypi_attrs",
    "pypi_beautifulsoup4",
    "pypi_behave",
    "pypi_blinker",
    "pypi_brotli",
    "pypi_certifi",
    "pypi_cffi",
    "pypi_chardet",
    "pypi_charset_normalizer",
    "pypi_colorama",
    "pypi_coverage",
    "pypi_cryptography",
    "pypi_cssselect",
    "pypi_exceptiongroup",
    "pypi_execnet",
    "pypi_fasteners",
    "pypi_filelock",
    "pypi_flake8",
    "pypi_h11",
    "pypi_h2",
    "pypi_hpack",
    "pypi_hyperframe",
    "pypi_idna",
    "pypi_iniconfig",
    "pypi_ipdb",
    "pypi_ipython",
    "pypi_kaitaistruct",
    "pypi_markdown_it_py",
    "pypi_mccabe",
    "pypi_mdurl",
    "pypi_outcome",
    "pypi_packaging",
    "pypi_parameterized",
    "pypi_parse",
    "pypi_parse_type",
    "pypi_pdbp",
    "pypi_pdfminer.six",
    "pypi_pillow",
    "pypi_pip",
    "pypi_platformdirs",
    "pypi_pluggy",
    "pypi_psutil",
    "pypi_py",
    "pypi_pyasn1",
    "pypi_pycodestyle",
    "pypi_pycparser",
    "pypi_pyflakes",
    "pypi_pygments",
    "pypi_pynose",
    "pypi_pyotp",
    "pypi_pyreadline3",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_html",
    "pypi_pytest_metadata",
    "pypi_pytest_ordering",
    "pypi_pytest_rerunfailures",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_rich",
    "pypi_sbvirtualdisplay",
    "pypi_selenium",
    "pypi_selenium_wire",
    "pypi_setuptools",
    "pypi_six",
    "pypi_sniffio",
    "pypi_sortedcontainers",
    "pypi_soupsieve",
    "pypi_tabcompleter",
    "pypi_trio",
    "pypi_trio_websocket",
    "pypi_urllib3",
    "pypi_wheel",
    "pypi_wsproto",
    "pypi_zstandard"
  ],
  "documentation_summary": "SeleniumBase, a comprehensive web automation framework for end-to-end testing, is available on PyPI as version 4.24.3, released on March 1, 2024. It supports Python 3.7 and above, offering features for web crawling, scraping, and testing, with a focus on browser automation. The framework simplifies interactions with web elements using Selenium/WebDriver APIs and integrates with test runners like pytest for structured testing and reporting. SeleniumBase provides additional tools for test management, data visualization, and GUI applications for test execution. It enhances raw Selenium by automating driver management, simplifying method calls, and improving error handling and reporting. Installation can be done via pip, and the package is licensed under the MIT License.",
  "embedding": [
    -0.0029481472447514534,
    0.0015112933469936252,
    0.0025361336302012205,
    -0.01434776559472084,
    -0.022034067660570145,
    0.011356338858604431,
    -0.018890300765633583,
    -0.017089905217289925,
    -0.013309075497090816,
    -0.008351064287126064,
    -0.005525828339159489,
    0.015580343082547188,
    -0.019665855914354324,
    0.03337655961513519,
    0.003919322043657303,
    -0.019804347306489944,
    0.022712677717208862,
    -0.024069899693131447,
    -0.007236204110085964,
    -0.014070780947804451,
    0.020593751221895218,
    -0.02138315513730049,
    -0.0028840946033596992,
    -0.009722134098410606,
    -0.003048553830012679,
    0.006592216435819864,
    -0.008794237859547138,
    -0.03694964945316315,
    -0.0015952540561556816,
    -0.01124554593116045,
    0.024056050926446915,
    -0.0109962597489357,
    -0.02652120776474476,
    -0.023169701918959618,
    -0.0021950972732156515,
    0.014223122037947178,
    -0.007284676190465689,
    0.0016099688364192843,
    0.031160686165094376,
    -0.0051207393407821655,
    -0.004147833678871393,
    0.013669154606759548,
    0.010968562215566635,
    -0.019388871267437935,
    -0.03908242657780647,
    -0.009278960525989532,
    0.004185918718576431,
    -0.01810089685022831,
    -0.01879335567355156,
    0.024208391085267067,
    -0.0015952540561556816,
    0.013980761170387268,
    -0.02347438409924507,
    -0.02589799277484417,
    0.013108261860907078,
    0.0006149907712824643,
    -0.009459000080823898,
    0.020039783790707588,
    0.0032078195363283157,
    -0.012879750691354275,
    -0.01434776559472084,
    0.013911515474319458,
    -0.0374482199549675,
    0.004421355202794075,
    -0.018225539475679398,
    0.003718508640304208,
    -0.006810341030359268,
    0.022089464589953423,
    -0.0015173522988334298,
    0.01208342146128416,
    0.019970538094639778,
    0.032074734568595886,
    0.008551876991987228,
    -0.00279234373010695,
    0.038611553609371185,
    -0.010836994275450706,
    -0.034096717834472656,
    0.03232401981949806,
    0.001506965490989387,
    -0.01692371442914009,
    0.007291600573807955,
    0.009368980303406715,
    -0.02089843340218067,
    0.036506474018096924,
    0.03855615481734276,
    0.014860185794532299,
    -0.0008794238092377782,
    0.010283026844263077,
    0.005370025057345629,
    -0.004016266204416752,
    0.00645718676969409,
    -0.011113977991044521,
    0.024623867124319077,
    0.04340337589383125,
    -0.01984589546918869,
    0.029692672193050385,
    -0.0011503486894071102,
    0.03201933577656746,
    -0.003863925114274025,
    -0.04102131351828575,
    0.005189985502511263,
    -0.0035090395249426365,
    -0.012395028956234455,
    -0.005543139763176441,
    -0.030163545161485672,
    -0.017865460366010666,
    -0.012298084795475006,
    0.006661462597548962,
    0.021341608837246895,
    0.004570234101265669,
    -0.0015173522988334298,
    0.041824568063020706,
    0.014680146239697933,
    -0.039165522903203964,
    -0.004414430819451809,
    -0.005165749229490757,
    0.016965262591838837,
    -0.014790939167141914,
    -0.00598631426692009,
    -0.009493622928857803,
    0.0021275824401527643,
    -0.0007383351912721992,
    0.024956248700618744,
    -0.02681203931570053,
    0.01260276697576046,
    -0.004483676515519619,
    -0.005349251441657543,
    -0.015247962437570095,
    0.0004189381143078208,
    -0.015898874029517174,
    0.014119253493845463,
    -0.006062484811991453,
    0.020496807992458344,
    0.003805065993219614,
    -0.014458558522164822,
    0.009036599658429623,
    -0.01746383309364319,
    -0.006678774021565914,
    -0.020939981564879417,
    -0.024900851771235466,
    0.02388986013829708,
    0.042101550847291946,
    -0.01649438962340355,
    -0.004819519352167845,
    -0.0011373651213943958,
    0.02512243762612343,
    -0.0043105618096888065,
    -0.035537030547857285,
    0.004050889518111944,
    -0.0028771699871867895,
    0.03149306774139404,
    -0.004881841130554676,
    -0.013883817009627819,
    0.0013485653325915337,
    0.009112769737839699,
    -0.0132259801030159,
    0.012305009178817272,
    0.008766540326178074,
    -0.018987245857715607,
    -0.01643899269402027,
    -0.004504450596868992,
    0.020441411063075066,
    -0.01977664977312088,
    -0.030108148232102394,
    -0.020510656759142876,
    0.030883703380823135,
    0.02017827518284321,
    -0.004224004223942757,
    -0.024693112820386887,
    -0.008351064287126064,
    -0.0007569449953734875,
    0.02292041666805744,
    -0.0017726968508213758,
    0.0029948882292956114,
    -0.0006076333811506629,
    -0.0006972203846089542,
    0.008067155256867409,
    0.008067155256867409,
    0.016882168129086494,
    0.000686400686390698,
    0.014527805149555206,
    0.02451307326555252,
    0.0010066633112728596,
    0.028321601450443268,
    -0.015234113670885563,
    -0.004165145102888346,
    -0.011847985908389091,
    -0.0004994365735910833,
    0.012561218813061714,
    0.021604742854833603,
    0.0178377628326416,
    0.013502964749932289,
    0.011501755565404892,
    -0.01936117373406887,
    -0.5880922079086304,
    -0.017145302146673203,
    -0.022795774042606354,
    -0.02123081497848034,
    0.014624749310314655,
    0.01635589823126793,
    0.007603207603096962,
    0.005550064612179995,
    -0.0154557004570961,
    0.010165308602154255,
    -0.0044040437787771225,
    0.01782391220331192,
    -0.004116673022508621,
    -0.0012291159946471453,
    -0.018834903836250305,
    -0.016203558072447777,
    0.01504022441804409,
    -0.034096717834472656,
    0.02019212581217289,
    -0.003798141609877348,
    -0.02352978102862835,
    0.04074433073401451,
    -0.03249020874500275,
    0.01685446873307228,
    0.006758406758308411,
    0.002345707267522812,
    0.004327873233705759,
    -0.007125410251319408,
    0.017048358917236328,
    0.0018263624515384436,
    -0.012893599458038807,
    0.040273457765579224,
    0.0023837925400584936,
    -5.147464253241196e-05,
    0.0439850389957428,
    -0.004919926170259714,
    -0.016660580411553383,
    0.03149306774139404,
    0.0005228070658631623,
    0.057280268520116806,
    -0.00831644143909216,
    -0.0021327759604901075,
    -0.0011434240732342005,
    -0.0035176952369511127,
    0.005923992954194546,
    -0.0025413271505385637,
    0.010234554298222065,
    0.006768793798983097,
    -0.003926246426999569,
    -0.008683444932103157,
    -0.009763682261109352,
    -0.02192327380180359,
    0.007333148270845413,
    -0.003559242933988571,
    0.026645850390195847,
    0.01076082419604063,
    0.010989335365593433,
    -0.00925818644464016,
    0.0014879228547215462,
    -3.824758096016012e-05,
    -0.009701360948383808,
    0.030440527945756912,
    0.006692623253911734,
    -0.010961636900901794,
    -0.010816220194101334,
    0.023640574887394905,
    0.00374274468049407,
    -0.01678522303700447,
    0.010525387711822987,
    -0.015788082033395767,
    0.017117604613304138,
    -0.014278518967330456,
    0.00678610522300005,
    -0.006100569851696491,
    0.04866606742143631,
    0.03922091796994209,
    0.037697505205869675,
    0.0019336937693879008,
    -0.01124554593116045,
    0.01163332350552082,
    0.014749391935765743,
    -0.0037600561045110226,
    0.0012611421989277005,
    -0.03647877648472786,
    0.07401009649038315,
    -0.020109029486775398,
    -0.03287798538804054,
    -0.015192566439509392,
    -0.006065947003662586,
    -0.024803906679153442,
    0.026853587478399277,
    0.024526922032237053,
    -0.0025880681350827217,
    -0.013551436364650726,
    0.015995819121599197,
    0.005872058216482401,
    -0.0038466136902570724,
    0.017782365903258324,
    -0.01657748594880104,
    -0.01943041943013668,
    -0.01410540472716093,
    -0.015428001992404461,
    -0.0032268622890114784,
    -0.02380676567554474,
    0.02074609324336052,
    0.01197262853384018,
    -0.009140468202531338,
    0.004677565302699804,
    0.010712351649999619,
    -0.014236971735954285,
    0.010601557791233063,
    -0.023280495777726173,
    -0.018751809373497963,
    0.003330731298774481,
    0.01602351851761341,
    -0.021120021119713783,
    -0.017740817740559578,
    -0.00015991491090971977,
    0.00954209454357624,
    -0.013842269778251648,
    -0.005124201998114586,
    0.00010808863589772955,
    -0.009382829070091248,
    0.02584259584546089,
    0.007443941663950682,
    -0.006024399306625128,
    0.01713145337998867,
    -0.009576717391610146,
    -0.0173391904681921,
    -0.012221913784742355,
    0.005647008772939444,
    0.0271444208920002,
    0.006619914900511503,
    0.00278541911393404,
    0.025233231484889984,
    0.013814571313560009,
    0.036589570343494415,
    -0.01879335567355156,
    0.004113210830837488,
    -0.011474057100713253,
    -0.0015000408748164773,
    0.007880191318690777,
    0.006703009828925133,
    0.003024317789822817,
    -0.0037011972162872553,
    0.0002566428738646209,
    -0.003495190292596817,
    0.013461416587233543,
    0.008461857214570045,
    0.011508679948747158,
    -0.011231696233153343,
    -0.011231696233153343,
    -0.022615734487771988,
    0.037697505205869675,
    -0.013634531758725643,
    -0.02479005791246891,
    -0.02124466374516487,
    -0.016965262591838837,
    -0.001612565596587956,
    -0.0039020103868097067,
    -0.014527805149555206,
    0.005653933621942997,
    -0.01782391220331192,
    -0.016258953139185905,
    -0.03766980767250061,
    0.012021100148558617,
    -0.016688279807567596,
    0.05088194087147713,
    -0.009223563596606255,
    -0.059219155460596085,
    -0.007797096390277147,
    -0.02436073310673237,
    -0.004573696292936802,
    0.021203115582466125,
    0.020081331953406334,
    0.011017033830285072,
    -0.026687396690249443,
    0.021064624190330505,
    0.014333915896713734,
    -0.0039123971946537495,
    -0.013807646930217743,
    0.02875092625617981,
    -0.018613316118717194,
    -0.014804788865149021,
    0.05536907911300659,
    0.019471967592835426,
    -0.002717904280871153,
    0.013239829801023006,
    -0.025247080251574516,
    -0.014306217432022095,
    -0.022463392466306686,
    -0.008004833944141865,
    -0.002506704069674015,
    0.03448449447751045,
    -0.004359033890068531,
    -0.012533520348370075,
    -0.016605183482170105,
    0.026715096086263657,
    -0.00414437148720026,
    0.0326010026037693,
    0.014320067130029202,
    0.014022309333086014,
    -0.002730022417381406,
    -0.013350622728466988,
    -0.0020375626627355814,
    -0.010594633407890797,
    0.012422727420926094,
    -0.014140027575194836,
    0.033598143607378006,
    -0.016203558072447777,
    0.036063302308321,
    -0.010497689247131348,
    -0.012720485217869282,
    -0.02240799553692341,
    0.019527364522218704,
    0.0057647270150482655,
    -0.005432346370071173,
    0.016106612980365753,
    0.00027070846408605576,
    0.023585177958011627,
    0.014250820502638817,
    -0.005252306815236807,
    0.02541327103972435,
    -0.024416130036115646,
    -0.01186875905841589,
    -0.01190338283777237,
    0.018557921051979065,
    0.024069899693131447,
    0.024056050926446915,
    -0.024333033710718155,
    -0.026230374351143837,
    0.02311430498957634,
    0.010116836056113243,
    -0.038750045001506805,
    0.02667354792356491,
    -0.009535170160233974,
    0.040688931941986084,
    -0.04002417251467705,
    0.040495045483112335,
    -0.025385573506355286,
    0.02172938548028469,
    0.02235259860754013,
    0.0442897230386734,
    -0.00046394800301641226,
    0.034096717834472656,
    0.009410527534782887,
    0.020081331953406334,
    -0.006626839283853769,
    -0.013696853071451187,
    -0.01528951060026884,
    0.017990102991461754,
    -0.009777531027793884,
    -0.0309114009141922,
    0.015912724658846855,
    0.0003944856289308518,
    -0.006737633142620325,
    -0.014375463128089905,
    0.015760382637381554,
    0.019859744235873222,
    0.014250820502638817,
    0.03232401981949806,
    0.014458558522164822,
    0.020150577649474144,
    0.004996096715331078,
    0.01567728817462921,
    -0.01936117373406887,
    0.0011996864341199398,
    -0.016134310513734818,
    -0.0034882656764239073,
    -0.037642110139131546,
    -0.010636181570589542,
    -0.009964494965970516,
    -0.007921739481389523,
    -0.01305979024618864,
    0.0307175125926733,
    -0.0044594407081604,
    0.012644314207136631,
    0.014693995006382465,
    0.015109471045434475,
    -0.021632440388202667,
    -0.028861720114946365,
    -0.03376433625817299,
    0.030329735949635506,
    0.001365011208690703,
    0.0036734987515956163,
    -0.023972954601049423,
    -0.009209713898599148,
    -0.010712351649999619,
    -0.0028061929624527693,
    0.011834136210381985,
    0.00637062918394804,
    0.017491532489657402,
    -0.006609527859836817,
    -0.009265110827982426,
    -0.03013584576547146,
    0.009050448425114155,
    0.030800607055425644,
    0.004085512366145849,
    -0.010082213208079338,
    0.005349251441657543,
    0.013876892626285553,
    0.005854746792465448,
    0.0271444208920002,
    0.01506792288273573,
    0.06442645192146301,
    -0.007997909560799599,
    -0.010019891895353794,
    -0.03370893746614456,
    -0.009126618504524231,
    -0.0264519602060318,
    0.010469990782439709,
    0.0008932730415835977,
    0.00414090882986784,
    -0.03517695143818855,
    0.014264670200645924,
    0.004043964669108391,
    0.010359196923673153,
    0.0012048798380419612,
    0.03182544931769371,
    -0.011259394697844982,
    -0.012713559903204441,
    -0.025371722877025604,
    -0.013689928688108921,
    0.013869968242943287,
    0.04176916927099228,
    0.03365354239940643,
    0.019610458984971046,
    0.022020218893885612,
    0.0003280527889728546,
    -0.005934379529207945,
    -0.047170355916023254,
    0.002416684292256832,
    0.003953944891691208,
    -0.00382237765006721,
    -0.01490173302590847,
    0.030191242694854736,
    -0.003256291849538684,
    0.026438111439347267,
    2.748199403868057e-05,
    0.0016575754852965474,
    0.00974290817975998,
    -0.010386895388364792,
    0.0037358200643211603,
    -0.008309516124427319,
    -0.007575509138405323,
    -0.01690986566245556,
    0.00020211168157402426,
    -0.003491728100925684,
    0.03670036420226097,
    -0.00663030194118619,
    0.0009469386423006654,
    0.03182544931769371,
    0.01148790679872036,
    -0.018003951758146286,
    -0.009237412363290787,
    0.005141513422131538,
    0.005376949440687895,
    0.052045270800590515,
    -0.030939100310206413,
    0.02304505929350853,
    0.006363704800605774,
    0.03938710689544678,
    -0.006391403265297413,
    0.006571442820131779,
    0.016549786552786827,
    -0.008240270428359509,
    0.014403161592781544,
    -0.023557478561997414,
    0.0013502964284271002,
    -0.018682563677430153,
    0.016245104372501373,
    0.007914814166724682,
    -0.014458558522164822,
    -0.018904149532318115,
    -0.0019717789255082607,
    0.017990102991461754,
    -0.004580621141940355,
    -0.0001849083782872185,
    0.04694876819849014,
    0.0017623099265620112,
    0.010227629914879799,
    -0.0075616599060595036,
    -0.021701687946915627,
    -0.04171377420425415,
    0.00939667783677578,
    -0.02596723847091198,
    0.007610131986439228,
    -0.024679264053702354,
    -0.020081331953406334,
    0.033321160823106766,
    0.0011027420405298471,
    -0.015621891245245934,
    -0.009929872117936611,
    0.00477104727178812,
    0.02715826965868473,
    -0.030468227341771126,
    0.00095732556656003,
    0.007166957948356867,
    0.03201933577656746,
    -0.007388545200228691,
    -0.005955153610557318,
    0.003079714486375451,
    -0.03365354239940643,
    -0.0016177590005099773,
    -0.0054842811077833176,
    -0.032213225960731506,
    -0.015261812135577202,
    -0.022449543699622154,
    0.016466692090034485,
    0.00677225599065423,
    0.02375136874616146,
    -0.0074647157453000546,
    0.018613316118717194,
    0.031105289235711098,
    -0.0008028204902075231,
    0.0015017719706520438,
    0.01100318506360054,
    -0.02339128963649273,
    0.00334284920245409,
    0.012575068511068821,
    -0.021618591621518135,
    -0.007457790896296501,
    0.015400303527712822,
    -0.001251620939001441,
    0.019721252843737602,
    -0.031216083094477654,
    0.00042542992741800845,
    -0.022601885721087456,
    0.01187568437308073,
    -0.017366889864206314,
    -0.011266319081187248,
    0.01434776559472084,
    -0.036312587559223175,
    -0.0038085284177213907,
    0.02541327103972435,
    -0.024416130036115646,
    0.003048553830012679,
    -0.0024270713329315186,
    0.00807408057153225,
    -0.0022487628739327192,
    -0.029914259910583496,
    0.04980170354247093,
    -0.015608041547238827,
    0.005934379529207945,
    0.016605183482170105,
    -0.014292368665337563,
    0.02430533617734909,
    0.017380738630890846,
    0.00764475530013442,
    0.0034744166769087315,
    0.0032770654652267694,
    -0.03099449723958969,
    -0.027172118425369263,
    0.0035367379896342754,
    0.041963059455156326,
    0.026922833174467087,
    -0.019402721896767616,
    -0.02715826965868473,
    0.010082213208079338,
    -0.022158710286021233,
    -0.017076056450605392,
    0.0015164867509156466,
    -0.031022194772958755,
    -0.020344465970993042,
    0.004514837171882391,
    -0.008808087557554245,
    -0.010740050114691257,
    -0.007229279261082411,
    -0.006993843242526054,
    -0.021757084876298904,
    -0.019596610218286514,
    0.022574186325073242,
    -0.0034415246918797493,
    -0.00020135429804213345,
    -0.0012412340147420764,
    0.006661462597548962,
    0.010961636900901794,
    -0.0030987572390586138,
    -0.012374254874885082,
    0.004521762020885944,
    0.007367771118879318,
    0.01037304662168026,
    0.02771223708987236,
    0.048222895711660385,
    0.00956979300826788,
    0.0038708497304469347,
    0.005189985502511263,
    -0.02095383033156395,
    0.01949966512620449,
    0.0020029398147016764,
    -0.049552418291568756,
    0.017117604613304138,
    0.011965704150497913,
    -0.0027681076899170876,
    -0.004324411042034626,
    0.01013068575412035,
    0.0050549558363854885,
    -0.0019336937693879008,
    0.012408877722918987,
    0.034373700618743896,
    0.00374966929666698,
    -0.005335402209311724,
    -0.03780829906463623,
    -0.0221448615193367,
    -0.0031160686630755663,
    0.016037367284297943,
    -0.021895576268434525,
    0.031077591702342033,
    -0.028293903917074203,
    -0.01635589823126793,
    0.017865460366010666,
    -0.008932730183005333,
    0.0015441850991919637,
    -0.0013684735167771578,
    0.030302036553621292,
    -0.012201139703392982,
    0.019042642787098885,
    0.01955506205558777,
    0.02242184616625309,
    -0.0329887792468071,
    0.021757084876298904,
    -0.03753131628036499,
    -0.024249939247965813,
    -0.01194493006914854,
    0.007125410251319408,
    0.0236821211874485,
    0.003569629741832614,
    0.016674429178237915,
    0.012346556410193443,
    0.03188084438443184,
    0.03179774805903435,
    0.0010715813841670752,
    0.007769397925585508,
    -0.004708725959062576,
    -0.008448008447885513,
    -0.008690369315445423,
    -0.032351717352867126,
    -0.017810063436627388,
    -0.013052865862846375,
    -0.009050448425114155,
    0.01657748594880104,
    0.01506792288273573,
    -0.02570410445332527,
    -0.012034949846565723,
    0.00869729369878769,
    -0.009576717391610146,
    0.0353708416223526,
    0.019098037853837013,
    0.03517695143818855,
    0.03581401705741882,
    0.009486697614192963,
    -0.0008400401566177607,
    -0.006889974232763052,
    -0.019181134179234505,
    -0.007852492853999138,
    0.019582761451601982,
    0.011654096655547619,
    0.003086639102548361,
    -0.016120461747050285,
    -0.0008404729887843132,
    -0.003863925114274025,
    -0.017782365903258324,
    -0.03963639214634895,
    0.030025053769350052,
    0.014527805149555206,
    0.03337655961513519,
    -0.039027027785778046,
    -0.010255328379571438,
    -0.01058770902454853,
    0.03694964945316315,
    -0.007457790896296501,
    -0.024180693551898003,
    0.005726641975343227,
    -0.0011442896211519837,
    -0.011342490091919899,
    0.021480100229382515,
    -0.007568584755063057,
    0.003649262711405754,
    0.00414437148720026,
    0.007630906067788601,
    0.003805065993219614,
    -0.022615734487771988,
    -0.030052751302719116,
    -0.007298525422811508,
    -0.021216966211795807,
    0.05694788694381714,
    0.006166353821754456,
    -0.016549786552786827,
    0.009091995656490326,
    0.00797021109610796,
    -0.02598108910024166,
    -0.008025608025491238,
    -0.007990985177457333,
    0.03941480815410614,
    -0.04415123164653778,
    0.010469990782439709,
    0.002695399336516857,
    -0.004964936058968306,
    -0.012775881215929985,
    0.017076056450605392,
    -0.001945811789482832,
    0.0010075288591906428,
    -0.019998235628008842,
    0.003884698962792754,
    -0.0019077265169471502,
    0.020801490172743797,
    -0.01323290541768074,
    -0.0025118975900113583,
    -0.005127664189785719,
    -0.006432950496673584,
    -0.007457790896296501,
    -0.025856444612145424,
    -0.005228071007877588,
    -0.015608041547238827,
    -0.00765860453248024,
    -0.02053835429251194,
    -0.02688128501176834,
    0.029277196153998375,
    0.01775466650724411,
    0.005037644412368536,
    -0.004012804012745619,
    0.03922091796994209,
    -0.019956689327955246,
    0.01587117649614811,
    0.004767585080116987,
    0.018225539475679398,
    -0.024693112820386887,
    0.003259754041209817,
    -0.022172559052705765,
    -0.013309075497090816,
    0.012755108065903187,
    -0.023917557671666145,
    -0.03559242933988571,
    -0.02958187833428383,
    0.01977664977312088,
    0.019333474338054657,
    0.03872234746813774,
    -0.03570322319865227,
    -0.001212670118547976,
    -0.002695399336516857,
    0.03152076527476311,
    0.0025205533020198345,
    -0.03154846280813217,
    0.017602326348423958,
    -0.009320507757365704,
    0.004185918718576431,
    0.02463771589100361,
    0.00024841990671120584,
    -0.006062484811991453,
    0.02082918770611286,
    0.007935588248074055,
    0.013987686485052109,
    -0.02463771589100361,
    0.004722575191408396,
    -0.016743674874305725,
    0.003950482700020075,
    0.018350182101130486,
    0.01162639819085598,
    -0.03789139539003372,
    -0.03703274577856064,
    -0.02055220492184162,
    0.04722575098276138,
    -0.019388871267437935,
    -0.03689425438642502,
    -0.017810063436627388,
    -0.011854910291731358,
    0.003621564246714115,
    -0.0034726853482425213,
    -0.0068449643440544605,
    0.011494831182062626,
    -0.03747592121362686,
    0.0010464796796441078,
    -0.032130129635334015,
    -0.004549460485577583,
    -0.008974277414381504,
    0.0346783809363842,
    0.007236204110085964,
    0.0005695481086149812,
    -0.009368980303406715,
    -0.019804347306489944,
    -0.026008786633610725,
    0.012485048733651638,
    -0.008828861638903618,
    0.028778625652194023,
    0.012104195542633533,
    -0.01448625698685646,
    0.010539236478507519,
    0.013115187175571918,
    0.010469990782439709,
    0.028640134260058403,
    -0.03362584486603737,
    0.02833545207977295,
    -0.004494063556194305,
    -0.000486452947370708,
    -0.0030537473503500223,
    -0.008808087557554245,
    -0.025219382718205452,
    -0.008724992163479328,
    -0.0016567098209634423,
    -0.0009400140261277556,
    -0.008835786022245884,
    0.02791997604072094,
    -0.0037635185290127993,
    -0.0062252129428088665,
    0.018751809373497963,
    -0.011709493584930897,
    0.0011546765454113483,
    -0.012727409601211548,
    0.02819695882499218,
    -0.0004152594192419201,
    -0.017311492934823036,
    0.0023907171562314034,
    0.00032610524795018137,
    -0.004663716070353985,
    -0.025884144008159637,
    0.0009720402886159718,
    -0.008406461216509342,
    0.01740843616425991,
    -0.00692805927246809,
    -0.02145240269601345,
    0.005449657794088125,
    -0.0009192402358166873,
    0.002660776488482952,
    -0.0017259558662772179,
    0.03642338141798973,
    0.021770933642983437,
    0.003522888757288456,
    0.02653505653142929,
    -0.034152112901210785,
    0.013773023150861263,
    -0.025357874110341072,
    -0.00589975668117404,
    -0.010954712517559528,
    -0.03681115806102753,
    0.0036388756707310677,
    -0.015760382637381554,
    0.024748509749770164,
    -0.005685094278305769,
    0.009445150382816792,
    0.00045226275688037276,
    -0.03174235299229622,
    -0.013163658790290356,
    0.004722575191408396,
    0.021480100229382515,
    -0.0038466136902570724,
    -0.01298361923545599,
    -0.007838644087314606,
    0.0026538518723100424,
    -0.01499867718666792,
    -0.00845493283122778,
    -0.00573010416701436,
    -0.017560778185725212,
    0.02157704532146454,
    -0.005491205491125584,
    -0.0075616599060595036,
    -0.007187731564044952,
    0.0005085251177661121,
    0.031299177557229996,
    -0.016065064817667007,
    0.004816057160496712,
    0.18502523005008698,
    0.020856887102127075,
    0.02569025568664074,
    0.020219823345541954,
    0.01065695472061634,
    0.009701360948383808,
    0.003209550864994526,
    0.0025534452870488167,
    0.019513513892889023,
    -0.00971520971506834,
    0.01588502526283264,
    -0.021009227260947227,
    -0.02519168332219124,
    0.01114167645573616,
    -0.0015779425157234073,
    -0.005581225268542767,
    -0.006176740396767855,
    -0.024180693551898003,
    -0.025288628414273262,
    -0.0005803678068332374,
    0.014652447775006294,
    -0.016272803768515587,
    -0.036395683884620667,
    -0.030800607055425644,
    0.01796240545809269,
    -0.0012784537393599749,
    -0.02429148741066456,
    0.00207911035977304,
    0.009555944241583347,
    0.019665855914354324,
    -0.0288340225815773,
    0.017533080652356148,
    -0.004916463978588581,
    0.013752250000834465,
    -0.019056491553783417,
    -0.013219055719673634,
    0.016342049464583397,
    0.0075270370580255985,
    0.007457790896296501,
    0.018613316118717194,
    -0.023058908060193062,
    -0.021272363141179085,
    -0.0022072154097259045,
    -0.047807417809963226,
    -0.00929973367601633,
    -0.020662996917963028,
    -0.00557083822786808,
    -0.0015917917480692267,
    -0.008898107334971428,
    0.01846097595989704,
    -0.029221799224615097,
    -0.0009564599604345858,
    0.0262580718845129,
    0.01754692941904068,
    -0.01567728817462921,
    -0.0008045516442507505,
    0.014610899612307549,
    0.014790939167141914,
    0.03550933301448822,
    0.012401953339576721,
    -0.020413711667060852,
    0.027255214750766754,
    -0.010719276033341885,
    0.02409759722650051,
    -0.04952471703290939,
    0.01725609600543976,
    -0.02366827242076397,
    0.011411735787987709,
    0.001212670118547976,
    0.010643105953931808,
    -0.016951413825154305,
    -0.009368980303406715,
    -0.007790171541273594,
    0.004324411042034626,
    -0.023931408300995827,
    -0.041602980345487595,
    0.034207507967948914,
    0.005508516915142536,
    0.03933171182870865,
    0.02311430498957634,
    -0.009223563596606255,
    0.010096062906086445,
    -0.012706635519862175,
    0.004075125325471163,
    -0.008538028225302696,
    -0.012325783260166645,
    0.026839738711714745,
    -0.02332204207777977,
    -0.010061439126729965,
    -0.03592481091618538,
    -0.02570410445332527,
    -0.01656363531947136,
    0.00557083822786808,
    -0.024623867124319077,
    0.006024399306625128,
    0.03703274577856064,
    -0.003947020508348942,
    0.025025494396686554,
    -0.01977664977312088,
    -0.0024997794535011053,
    -0.021424703299999237,
    0.05855439230799675,
    0.0001345968630630523,
    0.027878427878022194,
    0.01732534170150757,
    -0.014984828419983387,
    -0.004511374980211258,
    0.02164629101753235,
    -0.006900360807776451,
    -0.031936243176460266,
    0.012789730913937092,
    -0.00807408057153225,
    0.027476800605654716,
    -0.014306217432022095,
    -0.006491809617727995,
    -0.01740843616425991,
    -0.010733125731348991,
    -0.017990102991461754,
    0.0034207510761916637,
    0.00803945679217577,
    -0.002749064937233925,
    -0.0018454050878062844,
    -0.004352109041064978,
    -0.01448625698685646,
    -0.02166013978421688,
    -0.003656187327578664,
    -0.031576164066791534,
    -0.0035800167825073004,
    -0.008676520548760891,
    -0.0021743234246969223,
    -0.022712677717208862,
    -0.02332204207777977,
    0.010220705531537533,
    -0.0027888815384358168,
    -0.009507471695542336,
    -0.0590529628098011,
    -0.02555176243185997,
    0.005096503533422947,
    -0.008981202729046345,
    0.01034534815698862,
    -0.019402721896767616,
    -0.006948833353817463,
    0.014860185794532299,
    -0.008905031718313694,
    -0.03340425714850426,
    -0.02416684292256832,
    -0.016896016895771027,
    -0.008295667357742786,
    -0.00898812711238861,
    0.004829906392842531,
    -0.02652120776474476,
    -0.013066714629530907,
    0.01963815651834011,
    -0.015151018276810646,
    0.026355016976594925,
    -0.005061880685389042,
    -0.02728291228413582,
    -0.0173391904681921,
    0.009950646199285984,
    0.014430860057473183,
    -0.047668926417827606,
    -0.016272803768515587,
    0.01901494339108467,
    -0.014610899612307549,
    -0.05506439507007599,
    -0.004774509463459253,
    -0.17527540028095245,
    -0.007104636635631323,
    0.038528457283973694,
    -0.03694964945316315,
    -0.008122552186250687,
    0.009022749960422516,
    0.004719112999737263,
    0.022518789395689964,
    -0.025787198916077614,
    -0.011453283950686455,
    0.031936243176460266,
    -0.01211804524064064,
    -0.018087048083543777,
    -0.01893184892833233,
    0.005851284600794315,
    -0.0011970896739512682,
    -0.028501641005277634,
    0.02290656790137291,
    0.04581313580274582,
    0.013724551536142826,
    0.030246639624238014,
    -0.02735215798020363,
    0.007018079049885273,
    -0.0007643023855052888,
    0.007146184332668781,
    -0.010712351649999619,
    0.0135722104460001,
    -0.027393706142902374,
    -0.005460044834762812,
    -0.01823938824236393,
    -0.014223122037947178,
    0.005311165936291218,
    0.02075994201004505,
    -0.00988832488656044,
    -0.006703009828925133,
    0.011605625040829182,
    -0.0017986641032621264,
    -0.01635589823126793,
    -0.015261812135577202,
    0.02131390944123268,
    0.009368980303406715,
    0.019042642787098885,
    0.005712792742997408,
    0.0007076072506606579,
    -0.0014455096097663045,
    -0.011605625040829182,
    0.015718834474682808,
    -0.02262958325445652,
    0.028723228722810745,
    -0.047031864523887634,
    0.022643432021141052,
    -0.008524179458618164,
    -0.001420408021658659,
    -0.008392611518502235,
    0.017186850309371948,
    0.007423168048262596,
    -0.001306152087636292,
    -0.00654374435544014,
    0.022934265434741974,
    -0.0002849904412869364,
    -0.007125410251319408,
    -0.019596610218286514,
    0.02569025568664074,
    -0.0025274779181927443,
    -0.015912724658846855,
    -0.007388545200228691,
    -0.021078472957015038,
    0.02847394347190857,
    0.00939667783677578,
    0.009479773230850697,
    0.003039898118004203,
    0.011377112939953804,
    0.005996701307594776,
    -0.005380412098020315,
    0.0036146396305412054,
    0.009091995656490326,
    0.0024790058378130198,
    0.02924949862062931,
    0.023862160742282867,
    -0.011183224618434906,
    -0.01448625698685646,
    0.0307175125926733,
    0.017283793538808823,
    0.017353041097521782,
    0.019596610218286514,
    0.012768956832587719,
    0.020455259829759598,
    -0.007769397925585508,
    -0.008254120126366615,
    -0.011190149001777172,
    0.039525602012872696,
    -0.022366449236869812,
    -0.01441701129078865,
    -0.01448625698685646,
    0.03232401981949806,
    -0.010698502883315086,
    -0.0016722901491448283,
    0.0029516094364225864,
    0.033321160823106766,
    -0.01782391220331192,
    0.009182015433907509,
    -0.013530662283301353,
    -0.02562100999057293,
    0.0021916350815445185,
    0.04113210737705231,
    0.03035743348300457,
    -0.03301648050546646,
    0.01754692941904068,
    0.018973395228385925,
    -0.005598536692559719,
    -0.012727409601211548,
    -0.006948833353817463,
    0.018488673493266106,
    0.0002702756901271641,
    -0.012221913784742355,
    0.01977664977312088,
    -0.008420309983193874,
    0.009078146889805794,
    -0.007540886290371418,
    -0.01900109462440014,
    0.015469550155103207,
    -0.013676078990101814,
    -0.01636974699795246,
    0.017297644168138504,
    -0.037365127354860306,
    -0.026147278025746346,
    -0.08547722548246384,
    -0.03719893470406532,
    0.015344907529652119,
    0.011197073385119438,
    -0.02924949862062931,
    -0.015469550155103207,
    -0.004189381375908852,
    0.027836879715323448,
    0.004618706181645393,
    -0.0035332755651324987,
    0.0009633845766074955,
    0.014887883327901363,
    -0.008614199236035347,
    0.004732962232083082,
    0.013904591090977192,
    -0.005723179318010807,
    -0.007914814166724682,
    0.00862804800271988,
    -0.00414437148720026,
    0.0050895786844193935,
    -0.005477356258779764,
    -0.00549812987446785,
    0.01204187422990799,
    0.012408877722918987,
    -0.0026417337357997894,
    0.017103753983974457,
    -0.041935358196496964,
    0.0010153190232813358,
    0.0004977054195478559,
    0.024956248700618744,
    -0.008967353031039238,
    -0.018294785171747208,
    0.007284676190465689,
    -0.011792588979005814,
    0.01051846332848072,
    -0.010850843973457813,
    -0.04074433073401451,
    -0.02610573172569275,
    0.029332593083381653,
    -0.029194101691246033,
    -0.0019371560774743557,
    -0.0033289999701082706,
    0.03487227112054825,
    -0.017366889864206314,
    -0.0288340225815773,
    0.02095383033156395,
    0.002986232517287135,
    0.02681203931570053,
    0.028501641005277634,
    -0.020427562296390533,
    -0.028307752683758736,
    -0.003380934474989772,
    -0.012408877722918987,
    -0.02778148278594017,
    0.01790700852870941,
    0.003711584024131298,
    0.021050775423645973,
    -0.008614199236035347,
    -0.00978445541113615,
    -0.004632555413991213,
    0.008752690628170967,
    0.008759615011513233,
    -0.027379857376217842,
    0.015898874029517174,
    -0.023031210526823997,
    0.0001309181679971516,
    0.017740817740559578,
    0.0024114910047501326,
    0.027601443231105804,
    -0.01538645476102829,
    -0.012651238590478897,
    0.0001477968762628734,
    -0.000965115730650723,
    0.008406461216509342,
    -0.029055610299110413,
    0.00262788450345397,
    -0.004182456526905298,
    -0.0052419197745621204,
    0.019111888483166695,
    0.0021275824401527643,
    -0.0122842350974679,
    0.006734170485287905,
    0.008413385599851608,
    -0.017436135560274124,
    0.006692623253911734,
    0.008704218082129955,
    0.022172559052705765,
    0.011647172272205353,
    0.020718393847346306,
    -0.03908242657780647,
    0.01600966788828373,
    0.011640247888863087,
    0.02569025568664074,
    0.005750877782702446,
    -0.0063221571035683155,
    -0.014943280257284641,
    -0.006412176880985498,
    -0.00891195610165596,
    -0.007990985177457333,
    0.020455259829759598,
    -0.04093821719288826,
    -0.016743674874305725,
    -0.0895765870809555,
    0.002844278234988451,
    0.021535497158765793,
    -0.012824353761970997,
    0.006488347426056862,
    -0.019901292398571968,
    0.021424703299999237,
    -0.0432925820350647,
    -0.01458320114761591,
    0.017436135560274124,
    -0.053596381098032,
    0.005169211886823177,
    -0.009050448425114155,
    -0.009251262061297894,
    -0.020358314737677574,
    0.005006483756005764,
    0.011210923083126545,
    -0.02178478240966797,
    0.04420662671327591,
    0.00901582557708025,
    -0.008614199236035347,
    0.0009408796322531998,
    0.03927631303668022,
    0.003957407083362341,
    -0.03271179646253586,
    0.008683444932103157,
    0.013655305840075016,
    0.013336773961782455,
    -0.012450425885617733,
    -0.036035604774951935,
    0.029831163585186005,
    -0.000281528162304312,
    -0.011709493584930897,
    0.020247522741556168,
    -0.009348206222057343,
    0.004040502477437258,
    0.012395028956234455,
    -0.005321552976965904,
    0.014846336096525192,
    -0.0022331825457513332,
    -0.015981970354914665,
    -0.020081331953406334,
    0.00023824941308703274,
    -0.011619473807513714,
    0.0007725253817625344,
    -0.006703009828925133,
    0.010068364441394806,
    0.009389753453433514,
    0.029083307832479477,
    0.03681115806102753,
    0.011418660171329975,
    -0.0004739021242130548,
    -0.009445150382816792,
    -0.015303359366953373,
    0.011501755565404892,
    -0.01789315976202488,
    -0.00013135095650795847,
    0.003417288651689887,
    -0.011681795120239258,
    0.0033826655708253384,
    0.007610131986439228,
    0.04971860721707344,
    0.013385246507823467,
    0.012235763482749462,
    0.011086279526352882,
    -0.011591775342822075,
    -0.03694964945316315,
    -0.026507357135415077,
    -0.007180807180702686,
    0.01444470975548029,
    -0.03215782716870308,
    -0.04043964669108391,
    0.011709493584930897,
    0.025150137022137642,
    0.02534402534365654,
    -0.004348646849393845,
    -0.007949437014758587,
    -0.006959219928830862,
    -0.025607159361243248,
    0.009091995656490326,
    0.006484885234385729,
    -0.009999117814004421,
    -0.025814898312091827,
    -0.003739282488822937,
    0.04492678493261337,
    0.007180807180702686,
    -0.024679264053702354,
    -0.014693995006382465,
    0.009729058481752872,
    0.002918717684224248,
    -0.0011918962700292468,
    0.001451568678021431,
    0.005979389417916536,
    0.019887443631887436,
    0.004674103111028671,
    0.017283793538808823,
    0.013849194161593914,
    0.009555944241583347,
    0.032268621027469635,
    0.0019838970620185137,
    0.002640002639964223,
    -0.0031749277841299772,
    0.020635299384593964,
    -0.03063441812992096,
    -0.026271920651197433,
    0.010068364441394806,
    0.014984828419983387,
    -0.00950054731220007,
    0.009133543819189072,
    0.00294295372441411,
    0.013703777454793453,
    -0.010816220194101334,
    0.013135960325598717,
    0.007236204110085964,
    0.0005440136301331222,
    0.004161682911217213,
    -0.015829628333449364,
    0.013579134829342365,
    -0.035121556371450424,
    0.028072316199541092,
    0.0005812333547510207,
    0.011155526153743267,
    0.050660353153944016,
    -0.030329735949635506,
    0.006848426535725594,
    -0.008690369315445423,
    0.005366562865674496,
    -0.010670804418623447,
    0.0044352044351398945,
    -0.0056123859249055386,
    -0.00860034953802824,
    -0.01832248456776142,
    -0.027324460446834564,
    -0.0044698272831737995,
    -0.02256033755838871,
    -0.017934706062078476,
    -0.013842269778251648,
    -0.006696085445582867,
    0.036728061735630035,
    0.0755058079957962,
    0.0309114009141922,
    -0.015691136941313744,
    -0.0017666377825662494,
    -0.001902532996609807,
    -0.023709820583462715,
    -0.0050514936447143555,
    0.013094413094222546,
    0.0013000931357964873,
    -0.005788963288068771,
    0.025925692170858383,
    -0.028723228722810745,
    -0.019181134179234505,
    -0.02757374569773674,
    -0.008344139903783798,
    -0.006741095334291458,
    -0.02659045346081257,
    0.01417465042322874,
    -0.035121556371450424,
    0.02742140367627144,
    0.038057584315538406,
    0.009452074766159058,
    0.014472408220171928,
    -0.000770794227719307,
    -0.031991638243198395,
    0.013953062705695629,
    0.04066123440861702,
    0.00021931497030891478,
    -0.003076252294704318,
    -0.0745086669921875,
    0.010310725308954716,
    0.01775466650724411,
    -0.028016919270157814,
    -0.015580343082547188,
    0.027047475799918175,
    0.013253678567707539,
    0.000614125223364681,
    -0.010629256255924702,
    0.03503846004605293,
    -0.0012239225907251239,
    0.010636181570589542,
    0.008441084064543247,
    -0.027823030948638916,
    -0.027518348768353462,
    0.0031299178954213858,
    0.006460648961365223,
    -0.01061540748924017,
    -0.015538795851171017,
    -0.01184106059372425
  ]
}
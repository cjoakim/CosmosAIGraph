{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.7"
  ],
  "description": "hellosign python sdk\n-------------------\n\n\na python wrapper for the [hellosign api](http://www.hellosign.com/api)\n\n\n## installation\n\ninstall using `easy_install`:\n\n````sh\neasy_install hellosign-python-sdk\n````\n\ninstall using `pip`:\n\n````sh\npip install hellosign-python-sdk\n````\n\ninstall from code:\n````sh\ngit clone https://github.com/hellosign/hellosign-python-sdk.git\ncd hellosign-python-sdk\npython setup.py install\n````\n\n## configuration\n\nin your application, import `hsclient`:\n\n````python\nfrom hellosign_sdk import hsclient\n````\n\nthen create a hsclient object and pass authentication information to initialize it:\n\n````python\n# initialize hsclient using email and password\nclient = hsclient(email_address=\"api_user@example.com\", password=\"your_password\")\n\n# initialize hsclient using api key\nclient = hsclient(api_key=\"your_api_key\")\n\n# initialize hsclient using api token\nclient = hsclient(access_token=\"your_api_access_token\")\n````\nnote: in case you initialize the hsclient with all the above credentials, the priority order is as follow: access_token, api_key, then email and password.\n\n## usage\n\nfor more information about the wrapper, its methods and parameters visit our detailed api documentation on  [readthedocs](http://hellosign-python-sdk.readthedocs.org/en/v3/py-modindex.html).\n\n### account\n\n#### get current account information\n\n````python\naccount = client.get_account_info()\n````\n\nthe account information is also stored in `client.account`. for example, to print the `email_address` of your account:\n\n````python\nprint client.account.email_address\n````\n\n#### update your account information\n\n````python\nclient.account.callback_url = \"https://www.example.com/callback\"\nclient.update_account_info()\n````\n\n#### create a new hellosign account\n\n````python\nnew_account = client.create_account(\"new_user@example.com\")\n````\n\n\n### signature request\n\n\n#### get a signature request\n\n````python\nsignature_request = client.get_signature_request(\"fa5c8a0b0f492d768749333ad6fcc214c111e967\")\nprint signature_request.requester_email_address\nprint signature_request.signature_request_id\n````\n\n#### get a list of your signature requests\n\n````python\nsignature_request_list = client.get_signature_request_list(page=1)\n\n# print out the name of the signers in every signature request\nfor signature_request in signature_request_list:\n    print signature_request.signatures[0].signer_name\n````\n\n#### send a signature request\n\n````python\nfiles = [\"nda.pdf\", \"appendixa.pdf\"]\nsigners = [\n    {\"name\": \"jack\", \"email_address\": \"jack@example.com\"},\n    {\"name\": \"jill\", \"email_address\": \"jill@example.com\"}\n]\ncc_email_addresses = [\"lawyer@hellosign.com\", \"lawyer@example.com\"]\n\n# send a signature request with remote files\nsignature_request = client.send_signature_request(\n                                test_mode=true,\n                                files=none,\n                                file_urls=[\"http://www.example.com/download/sample.pdf\"],\n                                title=\"nda with acme co.\",\n                                subject=\"the nda we talked about\",\n                                message=\"please sign this nda and then we can discuss more. let me know if you have any questions.\",\n                                signing_redirect_url=none,\n                                signers=signers,\n                                cc_email_addresses=cc_email_addresses)\n\n# send a signature request with uploaded files\nsignature_request = client.send_signature_request(\n                                test_mode=true,\n                                files=files,\n                                file_urls=none,\n                                title=\"nda with acme co.\",\n                                subject=\"the nda we talked about\",\n                                message=\"please sign this nda and then we can discuss more. let me know if you have any questions.\",\n                                signing_redirect_url=none,\n                                signers=signers,\n                                cc_email_addresses=cc_email_addresses)\n````\n\n#### send a signature request with template\n\n````python\nsigners = [\n    {\"name\": \"jack\", \"email_address\": \"jack@example.com\"},\n    {\"name\": \"jill\", \"email_address\": \"jill@example.com\"}\n]\ncc_email_addresses = [\"lawyer@hellosign.com\", \"lawyer@example.com\"]\nccs = [\n    { \"email_address\": \"lawyer@hellosign.com\", \"role_name\": \"lawyer 1\" },\n    { \"email_address\": \"lawyer@example.com\", \"role_name\": \"lawyer 2\" }\n]\ncustom_fields = [\n    { \"field 1\": \"value 1\" },\n    { \"field 2\": \"value 2\" }\n]\n\n# send a signature request with uploaded files\nsignature_request = client.send_signature_request_with_template(\n                                        test_mode=true,\n                                        template_id=\"fa5c8a0b0f492d768749333ad6fcc214c111e967\",\n                                        title=\"nda with acme co.\",\n                                        subject=\"the nda we talked about\",\n                                        message=\"please sign this nda and then we can discuss more. let me know if you have any questions.\",\n                                        signing_redirect_url=none,\n                                        signers=signers,\n                                        ccs=ccs,\n                                        custom_fields=custom_fields)\n````\n\n### embedded\n\n#### embedded signing\n\n````python\nsigners = [\n    {\"name\": \"jack\", \"email_address\": \"jack@example.com\"},\n    {\"name\": \"jill\", \"email_address\": \"jill@example.com\"}\n]\nsignature_request = client.send_signature_request_embedded(\n                                test_mode=true,\n                                client_id=\"your client id\",\n                                files=[\"path/to/nda.pdf\"],\n                                title=\"nda with acme co.\",\n                                subject=\"the nda we talked about\",\n                                message=\"please sign this nda and then we can discuss more. let me know if you have any questions.\",\n                                signing_redirect_url=none\n                                signers=signers,\n                                cc_email_addresses=none,\n                                form_fields_per_document=none)\n\n# retrieve the signature url to pass to the embedded iframe\nfor signature in signature_request.signatures:\n    embedded_obj = client.get_embedded_object(signature.signature_id)\n    sign_url = embedded_obj.sign_url\n\n````\n\nmore information about the asscociated front-end code can be found [here](https://www.hellosign.com/api/embeddedsigningwalkthrough#clientside)\n\n#### embedded requesting\n\n````python\n\n# create a draft and retrieve the claim url\ndraft = client.create_embedded_unclaimed_draft(\n                    test_mode=true,\n                    client_id=\"your client id\",\n                    requester_email_address=\"requester@example.com\",\n                    files=[\"path/to/nda.pdf\"],\n                    draft_type=\"signature_request\",\n                    subject=\"the nda we talked about\",\n                    message=\"please sign this nda and then we can discuss more. let me know if you have any questions.\",\n                    is_for_embedded_signing=false)\nclaim_url = draft.claim_url\n````\n\nmore information about the associated front-end code can be found [here](https://app.hellosign.com/api/embeddedrequestingwalkthrough#embeddedrequestingclientside)\n\nonce the user edits the draft in the embedded iframe and sends the signature request your app callback will receive a `signature_request_sent` event containing a `signaturerequest` object. if we had used `is_for_embedded_signing=true`, we would want to get the signature ids out of the `signaturerequest` from that event and fetch the signature urls at this point. in your event callback handler, you will need to do something like this:\n\n````python\nclient = hsclient(api_key='your_api_key')\nevent_data = json.loads(request.post.get('json'))\nif event_data['event']['event_type'] == 'signature_request_sent':\n    sig_req = event_data['signature_request']\n    for sig in sig_req['signature_request']['signatures']:\n        embedded_obj = client.get_embedded_object(sig['signature_id'])\n        sign_url = embedded_obj.sign_url\n        # save sign_url somewhere\n````\n\n\n## tests\n\nyou can run the test suite by executing the following commands after you cloned the repo:\nnote that it requires to have a hellosign account, with at least one template and one api app.\n\n**warning:** we advise against running the tests against your personal account as they perform destructive actions.\n\n```\ncd hellosign_sdk\ncp tests/test_helper.sample.py tests/test_helper.py\nhellosign_api_key='your api key'\nhellosign_api_client_id='your app client id'\nhellosign_api_client_secret='your app client secret'\nnosetests --with-coverage --cover-package=hellosign_sdk --include=hellosign_sdk/tests/unit_tests/* --include=hellosign_sdk/tests/functional_tests/*\n```\n\n## additional notes\n\n### local callbacks\nwe do not allow app callbacks (event or oauth) to be set to localhost. however it is still possible to test callbacks against a local server. tunneling services such as [ngrok](http://ngrok.com) can help you set this up.\n\n## license\n\n```\nthe mit license (mit)\n\ncopyright (c) 2015 hellosign.com\n\npermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"software\"), to deal\nin the software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is\nfurnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in the\nsoftware.\n```\n\n\n",
  "docs_url": null,
  "keywords": "hellosign python sdk",
  "license": "mit",
  "name": "hellosign-python-sdk",
  "package_url": "https://pypi.org/project/hellosign-python-sdk/",
  "project_url": "https://pypi.org/project/hellosign-python-sdk/",
  "project_urls": {
    "Homepage": "https://github.com/hellosign/hellosign-python-sdk"
  },
  "release_url": "https://pypi.org/project/hellosign-python-sdk/4.0.0/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": "",
  "summary": "a python wrapper for the hellosign api (http://www.hellosign.com/api)",
  "version": "4.0.0",
  "releases": [],
  "developers": [
    "apisupport@hellosign.com",
    "hellosign"
  ],
  "kwds": "hellosign_sdk hsclient hellosign_api_key hellosign_api_client_secret hellosign_api_client_id",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_hellosign_python_sdk",
  "homepage": "https://github.com/hellosign/hellosign-python-sdk",
  "release_count": 49,
  "dependency_ids": [
    "pypi_requests"
  ]
}
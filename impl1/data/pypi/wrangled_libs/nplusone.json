{
  "classifiers": [],
  "description": "permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"software\"), to deal\nin the software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is\nfurnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in\nthe software.\n\ndescription: ========\n        nplusone\n        ========\n        \n        .. image:: https://img.shields.io/pypi/v/nplusone.svg\n            :target: http://badge.fury.io/py/nplusone\n            :alt: latest version\n        \n        .. image:: https://img.shields.io/travis/jmcarp/nplusone/master.svg\n            :target: https://travis-ci.org/jmcarp/nplusone\n            :alt: travis-ci\n        \n        .. image:: https://img.shields.io/codecov/c/github/jmcarp/nplusone/master.svg\n            :target: https://codecov.io/github/jmcarp/nplusone\n            :alt: code coverage\n        \n        nplusone is a library for detecting the n+1 queries problem in python orms, including sqlalchemy, peewee, and the django orm.\n        \n        the problem\n        ===========\n        \n        many object-relational mapping (orm) libraries default to lazy loading for relationships. this pattern can be efficient when related rows are rarely accessed, but quickly becomes inefficient as relationships are accessed more frequently. in these cases, loading related rows eagerly using a ``join`` can be vastly more performant. unfortunately, understanding when to use lazy versus eager loading can be challenging: you might not notice the problem until your app has slowed to a crawl.\n        \n        ``nplusone`` is an orm profiling tool to help diagnose and improve poor performance caused by inappropriate lazy loading. ``nplusone`` monitors applications using django or sqlalchemy and sends notifications when potentially expensive lazy loads are emitted. it can identify the offending relationship attribute and specific lines of code behind the problem, and recommend fixes for better performance.\n        \n        ``nplusone`` also detects inappropriate eager loading for flask-sqlalchemy and the django orm, emitting a warning when related data are eagerly loaded but never accessed within the current request.\n        \n        installation\n        ============\n        \n        ::\n        \n            pip install -u nplusone\n        \n        nplusone supports python >= 2.7 or >= 3.3.\n        \n        usage\n        =====\n        \n        note: ``nplusone`` should only be used for development and should not be deployed to production environments.\n        \n        django\n        ******\n        \n        note: ``nplusone`` supports django >= 1.8.\n        \n        add ``nplusone`` to ``installed_apps``: ::\n        \n            installed_apps = (\n                ...\n                'nplusone.ext.django',\n            )\n        \n        add ``nplusonemiddleware``: ::\n        \n            middleware = (\n                'nplusone.ext.django.nplusonemiddleware',\n                ...\n            )\n        \n        optionally configure logging settings: ::\n        \n            nplusone_logger = logging.getlogger('nplusone')\n            nplusone_log_level = logging.warn\n        \n        configure logging handlers: ::\n        \n            logging = {\n                'version': 1,\n                'handlers': {\n                    'console': {\n                        'class': 'logging.streamhandler',\n                    },\n                },\n                'loggers': {\n                    'nplusone': {\n                        'handlers': ['console'],\n                        'level': 'warn',\n                    },\n                },\n            }\n        \n        when your app loads data lazily, ``nplusone`` will emit a log message: ::\n        \n            potential n+1 query detected on `<model>.<field>`\n        \n        consider using `select_related <https://docs.djangoproject.com/en/1.8/ref/models/querysets/#select-related>`_ or `prefetch_related <https://docs.djangoproject.com/en/1.8/ref/models/querysets/#prefetch-related>`_ in this case.\n        \n        when your app eagerly loads related data without accessing it, ``nplusone`` will log a warning: ::\n        \n            potential unnecessary eager load detected on `<model>.<field>`\n        \n        flask-sqlalchemy\n        ****************\n        \n        wrap application with ``nplusone``: ::\n        \n            from flask import flask\n            from nplusone.ext.flask_sqlalchemy import nplusone\n        \n            app = flask(__name__)\n            nplusone(app)\n        \n        optionally configure logging settings: ::\n        \n            app = flask(__name__)\n            app.config['nplusone_logger'] = logging.getlogger('app.nplusone')\n            app.config['nplusone_log_level'] = logging.error\n            nplusone(app)\n        \n        when your app loads data lazily, ``nplusone`` will emit a log message: ::\n        \n            potential n+1 query detected on `<model>.<field>`\n        \n        consider using ``subqueryload`` or ``joinedload`` in this case; see sqlalchemy's guide to `relationship loading <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html>`_ for complete documentation.\n        \n        when your app eagerly loads related data without accessing it, ``nplusone`` will log a warning: ::\n        \n            potential unnecessary eager load detected on `<model>.<field>`\n        \n        wsgi\n        ****\n        \n        for other frameworks that follow the wsgi specification, wrap your application with `nplusonemiddleware`. you must also import the relevant ``nplusone`` extension for your orm: ::\n        \n            import bottle\n            from nplusone.ext.wsgi import nplusonemiddleware\n            import nplusone.ext.sqlalchemy\n        \n            app = nplusonemiddleware(bottle.app())\n        \n        generic\n        *******\n        \n        the integrations above are coupled to the request-response cycle. to use ``nplusone`` outside the context of an http request, use the ``profiler`` context manager: you must also import the relevant ``nplusone`` extension for your orm: ::\n        \n            from nplusone.core import profiler\n            import nplusone.ext.sqlalchemy\n        \n            with profiler.profiler():\n                ...\n        \n        customizing notifications\n        *************************\n        \n        by default, ``nplusone`` logs all potentially unnecessary queries using a logger named \"nplusone\". when the `nplusone_raise` configuration option is set, ``nplusone`` will also raise an ``nplusoneerror``. this can be used to force all automated tests involving unnecessary queries to fail. ::\n        \n            # django config\n            nplusone_raise = true\n        \n            # flask config\n            app.config['nplusone_raise'] = true\n        \n        the exception type can also be specified, if desired, using the ``nplusone_error`` option.\n        \n        ignoring notifications\n        **********************\n        \n        to ignore notifications from ``nplusone`` globally, configure the whitelist using the `nplusone_whitelist` option: ::\n        \n            # django config\n            nplusone_whitelist = [\n                {'label': 'n_plus_one', 'model': 'myapp.mymodel'}\n            ]\n        \n            # flask-sqlalchemy config\n            app.config['nplusone_whitelist'] = [\n                {'label': 'unused_eager_load', 'model': 'mymodel', 'field': 'my_field'}\n            ]\n        \n        you can whitelist models by exact name or by `fnmatch <https://docs.python.org/3/library/fnmatch.html>`_ patterns: ::\n        \n            # django config\n            nplusone_whitelist = [\n                {'model': 'myapp.*'}\n            ]\n        \n        to suppress notifications locally, use the ``ignore`` context manager: ::\n        \n            from nplusone.core import signals\n        \n            with signals.ignore(signals.lazy_load):\n                # lazy-load rows\n                # ...\n        \n        license\n        =======\n        \n        mit licensed. see the bundled `license <https://github.com/jmcarp/nplusone/blob/master/license>`_ file for more details.\n        \nkeywords: nplusone\nplatform: unknown\nclassifier: development status :: 2 - pre-alpha\nclassifier: intended audience :: developers\nclassifier: license :: osi approved :: mit license\nclassifier: natural language :: english\nclassifier: programming language :: python :: 2\nclassifier: programming language :: python :: 2.7\nclassifier: programming language :: python :: 3\nclassifier: programming language :: python :: 3.3\nclassifier: programming language :: python :: 3.4\nclassifier: programming language :: python :: 3.5\nclassifier: programming language :: python :: 3.6\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright 2016 joshua carp",
  "name": "nplusone",
  "package_url": "https://pypi.org/project/nplusone/",
  "project_url": "https://pypi.org/project/nplusone/",
  "project_urls": {
    "Homepage": "https://github.com/jmcarp/nplusone"
  },
  "release_url": "https://pypi.org/project/nplusone/1.0.0/",
  "requires_dist": [
    "six (>=1.9.0)",
    "blinker (>=1.3)"
  ],
  "requires_python": "",
  "summary": "detecting the n+1 queries problem in python",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "jm.carp@gmail.com",
    "joshua_carp"
  ],
  "kwds": "copyright nplusonemiddleware liable permission liability",
  "license_kwds": "copyright 2016 joshua carp",
  "libtype": "pypi",
  "id": "pypi_nplusone",
  "homepage": "https://github.com/jmcarp/nplusone",
  "release_count": 17,
  "dependency_ids": [
    "pypi_blinker",
    "pypi_six"
  ]
}
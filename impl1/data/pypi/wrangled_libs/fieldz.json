{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# fieldz\n\n[![license](https://img.shields.io/pypi/l/fieldz.svg?color=green)](https://github.com/pyapp-kit/fieldz/raw/main/license)\n[![pypi](https://img.shields.io/pypi/v/fieldz.svg?color=green)](https://pypi.org/project/fieldz)\n[![python version](https://img.shields.io/pypi/pyversions/fieldz.svg?color=green)](https://python.org)\n[![ci](https://github.com/pyapp-kit/fieldz/actions/workflows/ci.yml/badge.svg)](https://github.com/pyapp-kit/fieldz/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/pyapp-kit/fieldz/branch/main/graph/badge.svg)](https://codecov.io/gh/pyapp-kit/fieldz)\n\nunified api for working with multiple dataclass-like libraries\n\n## dataclass patterns\n\nthere are many libraries that implement a similar dataclass-like pattern!\n\n### [`dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass)\n\n```python\nimport dataclasses\n\n@dataclasses.dataclass\nclass somedataclass:\n    a: int = 0\n    b: str = \"b\"\n    c: list[int] = dataclasses.field(default_factory=list)\n```\n\n### [`pydantic.basemodel`](https://docs.pydantic.dev/latest/)\n\n```python\nimport pydantic\n\nclass somepydanticmodel(pydantic.basemodel):\n    a: int = 0\n    b: str = \"b\"\n    c: list[int] = pydantic.field(default_factory=list)\n```\n\n### [`attrs.define`](https://www.attrs.org/en/stable/overview.html)\n\n```python\nimport attr\n\n@attr.define\nclass someattrsmodel:\n    a: int = 0\n    b: str = \"b\"\n    c: list[int] = attr.field(default=attr.factory(list))\n```\n\n### [`msgspec.struct`](https://jcristharif.com/msgspec/)\n\n```python\nimport msgspec\n\nclass somemsgspecstruct(msgspec.struct):\n    a: int = 0\n    b: str = \"b\"\n    c: list[int] = msgspec.field(default_factory=list)\n```\n\netc...\n\n## unified api\n\nthese are all awesome libraries, and each has its own strengths and weaknesses.\nsometimes, however, you just want to be able to query basic information about a\ndataclass-like object, such as getting field names or types, or converting it to\na dictionary.\n\n`fieldz` provides a unified api for these operations (following or\nextending the api from `dataclasses` when possible).\n\n```python\ndef fields(obj: any) -> tuple[field, ...]:\n    \"\"\"return a tuple of fieldz.field objects for the object.\"\"\"\n\ndef replace(obj: any, /, **changes: any) -> any:\n    \"\"\"return a copy of obj with the specified changes.\"\"\"\n\ndef asdict(obj: any) -> dict[str, any]:\n    \"\"\"return a dict representation of obj.\"\"\"\n\ndef astuple(obj: any) -> tuple[any, ...]:\n    \"\"\"return a tuple representation of obj.\"\"\"\n\ndef params(obj: any) -> dataclassparams:\n    \"\"\"return parameters used to define the dataclass.\"\"\"\n```\n\nthe `fieldz.field` and `fieldz.dataclassparam` objects are\nsimple dataclasses that match the protocols of `dataclasses.field` and the\n(private) `dataclasses._dataclassparams` objects, respectively. the field object\nalso adds a `native_field` attribute that is the original field object from the\nunderlying library.\n\n### example\n\n```python\nfrom fieldz import field, fields\n\nstandardized_fields = (\n    field(name=\"a\", type=int, default=0),\n    field(name=\"b\", type=str, default=\"b\"),\n    field(name=\"c\", type=list[int], default_factory=list),\n)\n\nassert (\n    fields(somedataclass)\n    == fields(somepydanticmodel)\n    == fields(someattrsmodel)\n    == fields(somemsgspecstruct)\n    == standardized_fields\n)\n```\n\n### supported libraries\n\n- [x] [`dataclasses`](https://docs.python.org/3/library/dataclasses.html)\n- [x] [`collections.namedtuple`](https://docs.python.org/3/library/collections.html#collections.namedtuple)\n- [x] [`pydantic`](https://docs.pydantic.dev/latest/) (v1 and v2)\n- [x] [`attrs`](https://www.attrs.org/en/stable/overview.html)\n- [x] [`msgspec`](https://jcristharif.com/msgspec/)\n- [x] [`dataclassy`](https://github.com/biqqles/dataclassy)\n- [x] [`sqlmodel`](https://sqlmodel.tiangolo.com) (it's just pydantic)\n\n... maybe someday?\n\n- [ ] [`pyfields`](https://smarie.github.io/python-pyfields/)\n- [ ] [`marshmallow`](https://marshmallow.readthedocs.io/en/stable/quickstart.html)\n- [ ] [`sqlalchemy`](https://docs.sqlalchemy.org/en/20/orm/quickstart.html)\n- [ ] [`django`](https://docs.djangoproject.com/en/dev/topics/db/models/)\n- [ ] [`peewee`](http://docs.peewee-orm.com/en/latest/peewee/models.html#models)\n- [ ] [`pyrsistent`](https://github.com/tobgu/pyrsistent/)\n- [ ] [`recordclass`](https://pypi.org/project/recordclass/)\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "fieldz",
  "package_url": "https://pypi.org/project/fieldz/",
  "project_url": "https://pypi.org/project/fieldz/",
  "project_urls": {
    "homepage": "https://github.com/pyapp-kit/fieldz",
    "repository": "https://github.com/pyapp-kit/fieldz"
  },
  "release_url": "https://pypi.org/project/fieldz/0.0.2/",
  "requires_dist": [
    "typing-extensions",
    "black; extra == 'dev'",
    "hatch; extra == 'dev'",
    "ipython; extra == 'dev'",
    "mypy; extra == 'dev'",
    "pdbpp; extra == 'dev'",
    "rich; extra == 'dev'",
    "ruff; extra == 'dev'",
    "annotated-types; extra == 'test'",
    "attrs; extra == 'test'",
    "dataclassy; extra == 'test'",
    "msgspec; extra == 'test'",
    "pydantic; extra == 'test'",
    "pytest; extra == 'test'",
    "pytest-cov; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "utilities for providing compatibility with many dataclass-like libraries",
  "version": "0.0.2",
  "releases": [],
  "developers": [
    "talley.lambert@gmail.com"
  ],
  "kwds": "pyfields fieldz fields badge pyversions",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_fieldz",
  "homepage": "",
  "release_count": 1,
  "dependency_ids": [
    "pypi_annotated_types",
    "pypi_attrs",
    "pypi_black",
    "pypi_dataclassy",
    "pypi_hatch",
    "pypi_ipython",
    "pypi_msgspec",
    "pypi_mypy",
    "pypi_pdbpp",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_rich",
    "pypi_ruff",
    "pypi_typing_extensions"
  ]
}
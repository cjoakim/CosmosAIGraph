{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "# cornac\n\n**cornac** is a comparative framework for multimodal recommender systems. it focuses on making it **convenient** to work with models leveraging **auxiliary data** (e.g., item descriptive text and image, social network, etc). **cornac** enables **fast** experiments and **straightforward** implementations of new models. it is **highly compatible** with existing machine learning libraries (e.g., tensorflow, pytorch).\n\n*cornac is one of the frameworks recommended by [acm recsys 2023](https://github.com/acmrecsys/recsys-evaluation-frameworks) for the evaluation and reproducibility of recommendation algorithms.*\n\n### quick links\n\n[website](https://cornac.preferred.ai/) |\n[documentation](https://cornac.readthedocs.io/en/latest/index.html) |\n[tutorials](tutorials#tutorials) |\n[examples](https://github.com/preferredai/cornac/tree/master/examples#cornac-examples-directory) |\n[models](#models) |\n[datasets](./cornac/datasets/readme.md#datasets) |\n[paper](http://www.jmlr.org/papers/volume21/19-805/19-805.pdf) |\n[preferred.ai](https://preferred.ai/)\n\n[![.github/workflows/python-package.yml](https://github.com/preferredai/cornac/actions/workflows/python-package.yml/badge.svg)](https://github.com/preferredai/cornac/actions/workflows/python-package.yml)\n[![circleci](https://img.shields.io/circleci/project/github/preferredai/cornac/master.svg?logo=circleci)](https://circleci.com/gh/preferredai/cornac)\n[![appveyor](https://ci.appveyor.com/api/projects/status/0yq4td1xg4kkhdwu?svg=true)](https://ci.appveyor.com/project/tqtg/cornac)\n[![codecov](https://img.shields.io/codecov/c/github/preferredai/cornac/master.svg?logo=codecov)](https://codecov.io/gh/preferredai/cornac)\n[![docs](https://img.shields.io/readthedocs/cornac/latest.svg)](https://cornac.readthedocs.io/en/latest)\n<br />\n[![release](https://img.shields.io/github/release-pre/preferredai/cornac.svg)](https://github.com/preferredai/cornac/releases)\n[![pypi](https://img.shields.io/pypi/v/cornac.svg)](https://pypi.org/project/cornac/)\n[![conda](https://img.shields.io/conda/vn/conda-forge/cornac.svg)](https://anaconda.org/conda-forge/cornac)\n[![conda recipe](https://img.shields.io/badge/recipe-cornac-green.svg)](https://github.com/conda-forge/cornac-feedstock)\n[![downloads](https://static.pepy.tech/personalized-badge/cornac?period=month&units=international_system&left_color=grey&right_color=orange&left_text=downloads/month)](https://pepy.tech/project/cornac)\n<br />\n[![python](https://img.shields.io/pypi/pyversions/cornac.svg)](https://cornac.preferred.ai/)\n[![conda platforms](https://img.shields.io/conda/pn/conda-forge/cornac.svg)](https://anaconda.org/conda-forge/cornac)\n[![license](https://img.shields.io/badge/license-apache%202.0-yellow.svg)](https://opensource.org/licenses/apache-2.0)\n\n\n## installation\n\ncurrently, we are supporting python 3. there are several ways to install cornac:\n\n- **from pypi (recommended):**\n  ```bash\n  pip3 install cornac\n  ```\n\n- **from anaconda:**\n  ```bash\n  conda install cornac -c conda-forge\n  ```\n\n- **from the github source (for latest updates):**\n  ```bash\n  pip3 install cython numpy scipy\n  pip3 install git+https://github.com/preferredai/cornac.git\n  ```\n\n**note:** \n\nadditional dependencies required by models are listed [here](readme.md#models).\n\nsome algorithm implementations use `openmp` to support multi-threading. for mac os users, in order to run those algorithms efficiently, you might need to install `gcc` from homebrew to have an openmp compiler:\n```bash\nbrew install gcc | brew link gcc\n```\n\n## getting started: your first cornac experiment\n\n![](flow.jpg)\n<p align=\"center\"><i>flow of an experiment in cornac</i></p>\n\n```python\nimport cornac\nfrom cornac.eval_methods import ratiosplit\nfrom cornac.models import mf, pmf, bpr\nfrom cornac.metrics import mae, rmse, precision, recall, ndcg, auc, map\n\n# load the built-in movielens 100k and split the data based on ratio\nml_100k = cornac.datasets.movielens.load_feedback()\nrs = ratiosplit(data=ml_100k, test_size=0.2, rating_threshold=4.0, seed=123)\n\n# initialize models, here we are comparing: biased mf, pmf, and bpr\nmf = mf(k=10, max_iter=25, learning_rate=0.01, lambda_reg=0.02, use_bias=true, seed=123)\npmf = pmf(k=10, max_iter=100, learning_rate=0.001, lambda_reg=0.001, seed=123)\nbpr = bpr(k=10, max_iter=200, learning_rate=0.001, lambda_reg=0.01, seed=123)\nmodels = [mf, pmf, bpr]\n\n# define metrics to evaluate the models\nmetrics = [mae(), rmse(), precision(k=10), recall(k=10), ndcg(k=10), auc(), map()]\n\n# put it together in an experiment, voil\u00e0!\ncornac.experiment(eval_method=rs, models=models, metrics=metrics, user_based=true).run()\n```\n\n**output:**\n\n|                          |    mae |   rmse |    auc |     map | ndcg@10 | precision@10 | recall@10 |  train (s) | test (s) |\n| ------------------------ | -----: | -----: | -----: | ------: | ------: | -----------: | --------: | ---------: | -------: |\n| [mf](cornac/models/mf)   | 0.7430 | 0.8998 | 0.7445 |  0.0548 |  0.0761 |       0.0675 |    0.0463 |       0.13 |     1.57 |\n| [pmf](cornac/models/pmf) | 0.7534 | 0.9138 | 0.7744 |  0.0671 |  0.0969 |       0.0813 |    0.0639 |       2.18 |     1.64 |\n| [bpr](cornac/models/bpr) |    n/a |    n/a | 0.8695 |  0.1042 |  0.1500 |       0.1110 |    0.1195 |       3.74 |     1.49 |\n\n\nfor more details, please take a look at our [examples](examples) as well as [tutorials](tutorials). for learning purposes, this list of [tutorials on recommender systems](https://github.com/preferredai/tutorials/tree/master/recommender-systems) will be more organized and comprehensive. \n\n\n## model serving\n\nhere, we provide a simple way to serve a cornac model by launching a standalone web service with [flask](https://github.com/pallets/flask). it is very handy for testing or creating a demo application. first, we install the dependency:\n```bash\n$ pip3 install flask\n```\nsupposed that we want to serve the trained bpr model from previous example, we need to save it:\n```python\nbpr.save(\"save_dir\", save_trainset=true)\n```\nafter that, the model can be deployed easily by running cornac serving app as follows:\n```bash\n$ flask_app='cornac.serving.app' \\\n  model_path='save_dir/bpr' \\\n  model_class='cornac.models.bpr' \\\n  flask run --host localhost --port 8080\n\n# running on http://localhost:8080\n```\nhere we go, our model service is now ready. let's get `top-5` item recommendations for the user `\"63\"`:\n```bash\n$ curl -x get \"http://localhost:8080/recommend?uid=63&k=5&remove_seen=false\"\n\n# response: {\"recommendations\": [\"50\", \"181\", \"100\", \"258\", \"286\"], \"query\": {\"uid\": \"63\", \"k\": 5, \"remove_seen\": false}}\n```\nif we want to remove seen items during training, we need to provide `train_set` which has been saved with the model earlier, when starting the serving app. we can also leverage [wsgi](https://flask.palletsprojects.com/en/3.0.x/deploying/) server for model deployment in production. please refer to [this](https://cornac.readthedocs.io/en/latest/user/iamadeveloper.html#running-an-api-service) guide for more details.\n\n## efficient retrieval with ann search\n\none important aspect of deploying recommender model is efficient retrieval via approximate nearest neighor (ann) search in vector space. cornac integrates several vector similarity search frameworks for the ease of deployment. [this example](tutorials/ann_hnswlib.ipynb) demonstrates how ann search will work seamlessly with any recommender models supporting it (e.g., mf).\n\n| supported framework | cornac wrapper | examples |\n| :---: | :---: | :---: |\n| [spotify/annoy](https://github.com/spotify/annoy) | [annoyann](cornac/models/ann/recom_ann_annoy.py) | [ann_all.ipynb](examples/ann_all.ipynb)\n| [meta/faiss](https://github.com/facebookresearch/faiss) | [faissann](cornac/models/ann/recom_ann_faiss.py) | [ann_all.ipynb](examples/ann_all.ipynb)\n| [nmslib/hnswlib](https://github.com/nmslib/hnswlib) | [hnswlibann](cornac/models/ann/recom_ann_hnswlib.py) | [ann_hnswlib.ipynb](tutorials/ann_hnswlib.ipynb), [ann_all.ipynb](examples/ann_all.ipynb)\n| [google/scann](https://github.com/google-research/google-research/tree/master/scann) | [scannann](cornac/models/ann/recom_ann_scann.py) | [ann_all.ipynb](examples/ann_all.ipynb)\n\n\n## models\n\nthe recommender models supported by cornac are listed below. why don't you join us to lengthen the list?\n\n| year | model and paper | additional dependencies | examples |\n| :---: | --- | :---: | :---: |\n| 2021 | [bilateral variational autoencoder for collaborative filtering (bivaecf)](cornac/models/bivaecf), [paper](https://dl.acm.org/doi/pdf/10.1145/3437963.3441759) | [requirements.txt](cornac/models/bivaecf/requirements.txt) | [preferredai/bi-vae](https://github.com/preferredai/bi-vae)\n|      | [causal inference for visual debiasing in visually-aware recommendation (causalrec)](cornac/models/causalrec), [paper](https://arxiv.org/abs/2107.02390) | [requirements.txt](cornac/models/causalrec/requirements.txt) | [causalrec_clothing.py](examples/causalrec_clothing.py)\n|      | [explainable recommendation with comparative constraints on product aspects (comparer)](cornac/models/comparer), [paper](https://dl.acm.org/doi/pdf/10.1145/3437963.3441754) | n/a | [preferredai/comparer](https://github.com/preferredai/comparer)\n| 2020 | [adversarial training towards robust multimedia recommender system (amr)](cornac/models/amr), [paper](https://ieeexplore.ieee.org/document/8618394) | [requirements.txt](cornac/models/amr/requirements.txt) | [amr_clothing.py](examples/amr_clothing.py)\n|      | [hybrid neural recommendation with joint deep representation learning of ratings and reviews (hrdr)](cornac/models/hrdr), [paper](https://www.sciencedirect.com/science/article/abs/pii/s0925231219313207) | [requirements.txt](cornac/models/hrdr/requirements.txt) | [hrdr_example.py](examples/hrdr_example.py)\n|      | [lightgcn: simplifying and powering graph convolution network for recommendation](cornac/models/lightgcn), [paper](https://arxiv.org/pdf/2002.02126.pdf) | [requirements.txt](cornac/models/lightgcn/requirements.txt) | [lightgcn_example.py](examples/lightgcn_example.py)\n| 2019 | [embarrassingly shallow autoencoders for sparse data (ease\u1d3f)](cornac/models/ease), [paper](https://arxiv.org/pdf/1905.03375.pdf) | n/a | [ease_movielens.py](examples/ease_movielens.py)\n|      | [neural graph collaborative filtering (ngcf)](cornac/models/ngcf), [paper](https://arxiv.org/pdf/1905.08108.pdf) | [requirements.txt](cornac/models/ngcf/requirements.txt) | [ngcf_example.py](examples/ngcf_example.py)\n| 2018 | [collaborative context poisson factorization (c2pf)](cornac/models/c2pf), [paper](https://www.ijcai.org/proceedings/2018/0370.pdf) | n/a | [c2pf_exp.py](examples/c2pf_example.py)\n|      | [graph convolutional matrix completion (gcmc)](cornac/models/gcmc), [paper](https://www.kdd.org/kdd2018/files/deep-learning-day/dlday18_paper_32.pdf) | [requirements.txt](cornac/models/gcmc/requirements.txt) | [gcmc_example.py](examples/gcmc_example.py)\n|      | [multi-task explainable recommendation (mter)](cornac/models/mter), [paper](https://arxiv.org/pdf/1806.03568.pdf) | n/a | [mter_exp.py](examples/mter_example.py)\n|      | [neural attention rating regression with review-level explanations (narre)](cornac/models/narre), [paper](http://www.thuir.cn/group/~yqliu/publications/www2018_cc.pdf) | [requirements.txt](cornac/models/narre/requirements.txt) | [narre_example.py](examples/narre_example.py)\n|      | [probabilistic collaborative representation learning (pcrl)](cornac/models/pcrl), [paper](http://www.hadylauw.com/publications/uai18.pdf) | [requirements.txt](cornac/models/pcrl/requirements.txt) | [pcrl_exp.py](examples/pcrl_example.py)\n|      | [variational autoencoder for collaborative filtering (vaecf)](cornac/models/vaecf), [paper](https://arxiv.org/pdf/1802.05814.pdf) | [requirements.txt](cornac/models/vaecf/requirements.txt) | [vaecf_citeulike.py](examples/vaecf_citeulike.py)\n| 2017 | [collaborative variational autoencoder (cvae)](cornac/models/cvae), [paper](http://eelxpeng.github.io/assets/paper/collaborative_variational_autoencoder.pdf) | [requirements.txt](cornac/models/cvae/requirements.txt) | [cvae_exp.py](examples/cvae_example.py)\n|      | [conditional variational autoencoder for collaborative filtering (cvaecf)](cornac/models/cvaecf), [paper](https://seslab.kaist.ac.kr/xe2/?module=file&act=procfiledownload&file_srl=18019&sid=4be19b9d0134a4aeacb9ef1ecd81c784&module_srl=1379) | [requirements.txt](cornac/models/cvaecf/requirements.txt) | [cvaecf_filmtrust.py](examples/cvaecf_filmtrust.py)\n|      | [generalized matrix factorization (gmf)](cornac/models/ncf), [paper](https://arxiv.org/pdf/1708.05031.pdf) | [requirements.txt](cornac/models/ncf/requirements.txt) | [ncf_exp.py](examples/ncf_example.py)\n|      | [indexable bayesian personalized ranking (ibpr)](cornac/models/ibpr), [paper](http://www.hadylauw.com/publications/cikm17a.pdf) | [requirements.txt](cornac/models/ibpr/requirements.txt) | [ibpr_exp.py](examples/ibpr_example.py)\n|      | [matrix co-factorization (mcf)](cornac/models/mcf), [paper](http://papers.www2017.com.au.s3-website-ap-southeast-2.amazonaws.com/proceedings/p1113.pdf) | n/a | [mcf_office.py](examples/mcf_office.py)\n|      | [multi-layer perceptron (mlp)](cornac/models/ncf), [paper](https://arxiv.org/pdf/1708.05031.pdf) | [requirements.txt](cornac/models/ncf/requirements.txt) | [ncf_exp.py](examples/ncf_example.py)\n|      | [neural matrix factorization (neumf) / neural collaborative filtering (ncf)](cornac/models/ncf), [paper](https://arxiv.org/pdf/1708.05031.pdf) | [requirements.txt](cornac/models/ncf/requirements.txt) | [ncf_exp.py](examples/ncf_example.py)\n|      | [online indexable bayesian personalized ranking (online ibpr)](cornac/models/online_ibpr), [paper](http://www.hadylauw.com/publications/cikm17a.pdf) | [requirements.txt](cornac/models/online_ibpr/requirements.txt) |\n|      | [visual matrix factorization (vmf)](cornac/models/vmf), [paper](http://papers.www2017.com.au.s3-website-ap-southeast-2.amazonaws.com/proceedings/p1113.pdf) | [requirements.txt](cornac/models/vmf/requirements.txt) | [vmf_clothing.py](examples/vmf_clothing.py)\n| 2016 | [collaborative deep ranking (cdr)](cornac/models/cdr), [paper](http://inpluslab.com/chenliang/homepagefiles/paper/hao-pakdd2016.pdf) | [requirements.txt](cornac/models/cdr/requirements.txt) | [cdr_exp.py](examples/cdr_example.py)\n|      | [collaborative ordinal embedding (coe)](cornac/models/coe), [paper](http://www.hadylauw.com/publications/sdm16.pdf) | [requirements.txt](cornac/models/coe/requirements.txt) |\n|      | [convolutional matrix factorization (convmf)](cornac/models/conv_mf), [paper](http://uclab.khu.ac.kr/resources/publication/c_351.pdf) | [requirements.txt](cornac/models/conv_mf/requirements.txt) | [convmf_exp.py](examples/conv_mf_example.py)\n|      | [learn to rank user preferences based on phrase-level sentiment analysis across multiple categories (lrppm)](cornac/models/lrppm), [paper](https://www.yongfeng.me/attach/sigir16-chen.pdf) | n/a | [lrppm_example.py](examples/lrppm_example.py)\n|      | [spherical k-means (skm)](cornac/models/skm), [paper](https://www.sciencedirect.com/science/article/pii/s092523121501509x) | n/a | [skm_movielens.py](examples/skm_movielens.py)\n|      | [visual bayesian personalized ranking (vbpr)](cornac/models/vbpr), [paper](https://arxiv.org/pdf/1510.01784.pdf) | [requirements.txt](cornac/models/vbpr/requirements.txt) | [vbpr_tradesy.py](examples/vbpr_tradesy.py)\n| 2015 | [collaborative deep learning (cdl)](cornac/models/cdl), [paper](https://arxiv.org/pdf/1409.2944.pdf) | [requirements.txt](cornac/models/cdl/requirements.txt) | [cdl_exp.py](examples/cdl_example.py)\n|      | [hierarchical poisson factorization (hpf)](cornac/models/hpf), [paper](http://jakehofman.com/inprint/poisson_recs.pdf) | n/a | [hpf_movielens.py](examples/hpf_movielens.py)\n|      | [trirank: review-aware explainable recommendation by modeling aspects](cornac/models/trirank), [paper](https://wing.comp.nus.edu.sg/wp-content/uploads/publications/pdf/trirank-%20review-aware%20explainable%20recommendation%20by%20modeling%20aspects.pdf) | n/a | [trirank_example.py](examples/trirank_example.py)\n| 2014 | [explicit factor model (efm)](cornac/models/efm), [paper](https://www.yongfeng.me/attach/efm-zhang.pdf) | n/a | [efm_example.py](examples/efm_example.py)\n|      | [social bayesian personalized ranking (sbpr)](cornac/models/sbpr), [paper](https://cseweb.ucsd.edu/~jmcauley/pdfs/cikm14.pdf) | n/a | [sbpr_epinions.py](examples/sbpr_epinions.py)\n| 2013 | [hidden factors and hidden topics (hft)](cornac/models/hft), [paper](https://cs.stanford.edu/people/jure/pubs/reviews-recsys13.pdf) | n/a | [hft_exp.py](examples/hft_example.py)\n| 2012 | [weighted bayesian personalized ranking (wbpr)](cornac/models/bpr), [paper](http://proceedings.mlr.press/v18/gantner12a/gantner12a.pdf) | n/a | [bpr_netflix.py](examples/bpr_netflix.py)\n| 2011 | [collaborative topic regression (ctr)](cornac/models/ctr), [paper](http://www.cs.columbia.edu/~blei/papers/wangblei2011.pdf) | n/a | [ctr_citeulike.py](examples/ctr_example_citeulike.py)\n| earlier | [baseline only](cornac/models/baseline_only), [paper](http://courses.ischool.berkeley.edu/i290-dm/s11/secure/a1-koren.pdf) | n/a | [svd_exp.py](examples/svd_example.py)\n|      | [bayesian personalized ranking (bpr)](cornac/models/bpr), [paper](https://arxiv.org/ftp/arxiv/papers/1205/1205.2618.pdf) | n/a | [bpr_netflix.py](examples/bpr_netflix.py)\n|      | [factorization machines (fm)](cornac/models/fm), [paper](https://www.csie.ntu.edu.tw/~b97053/paper/factorization%20machines%20with%20libfm.pdf) | linux only | [fm_example.py](examples/fm_example.py)\n|      | [global average (globalavg)](cornac/models/global_avg), [paper](https://datajobs.com/data-science-repo/recommender-systems-[netflix].pdf) | n/a | [biased_mf.py](examples/biased_mf.py)\n|      | [global personalized top frequent (gptop)](cornac/models/gp_top), [paper](https://dl.acm.org/doi/pdf/10.1145/3587153) | n/a | [gp_top_tafeng.py](examples/gp_top_tafeng.py)\n|      | [item k-nearest-neighbors (itemknn)](cornac/models/knn), [paper](https://dl.acm.org/doi/pdf/10.1145/371920.372071) | n/a | [knn_movielens.py](examples/knn_movielens.py)\n|      | [matrix factorization (mf)](cornac/models/mf), [paper](https://datajobs.com/data-science-repo/recommender-systems-[netflix].pdf) | n/a | [biased_mf.py](examples/biased_mf.py), [given_data.py](examples/given_data.py)\n|      | [maximum margin matrix factorization (mmmf)](cornac/models/mmmf), [paper](https://link.springer.com/content/pdf/10.1007/s10994-008-5073-7.pdf) | n/a | [mmmf_exp.py](examples/mmmf_exp.py)\n|      | [most popular (mostpop)](cornac/models/most_pop), [paper](https://arxiv.org/ftp/arxiv/papers/1205/1205.2618.pdf) | n/a | [bpr_netflix.py](examples/bpr_netflix.py)\n|      | [non-negative matrix factorization (nmf)](cornac/models/nmf), [paper](http://papers.nips.cc/paper/1861-algorithms-for-non-negative-matrix-factorization.pdf) | n/a | [nmf_exp.py](examples/nmf_example.py)\n|      | [probabilistic matrix factorization (pmf)](cornac/models/pmf), [paper](https://papers.nips.cc/paper/3208-probabilistic-matrix-factorization.pdf) | n/a | [pmf_ratio.py](examples/pmf_ratio.py)\n|      | [singular value decomposition (svd)](cornac/models/svd), [paper](https://people.engr.tamu.edu/huangrh/spring16/papers_course/matrix_factorization.pdf) | n/a | [svd_exp.py](examples/svd_example.py)\n|      | [social recommendation using pmf (sorec)](cornac/models/sorec), [paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.304.2464&rep=rep1&type=pdf) | n/a | [sorec_filmtrust.py](examples/sorec_filmtrust.py)\n|      | [user k-nearest-neighbors (userknn)](cornac/models/knn), [paper](https://arxiv.org/pdf/1301.7363.pdf) | n/a | [knn_movielens.py](examples/knn_movielens.py)\n|      | [weighted matrix factorization (wmf)](cornac/models/wmf), [paper](http://yifanhu.net/pub/cf.pdf) | [requirements.txt](cornac/models/wmf/requirements.txt) | [wmf_exp.py](examples/wmf_example.py)\n\n\n## contributing\n\nthis project welcomes contributions and suggestions. before contributing, please see our [contribution guidelines](https://cornac.readthedocs.io/en/latest/developer/index.html).\n\n## citation\n\nif you use cornac in a scientific publication, we would appreciate citations to the following papers:\n\n- [cornac: a comparative framework for multimodal recommender systems](http://jmlr.org/papers/v21/19-805.html), salah *et al.*, journal of machine learning research, 21(95):1\u20135, 2020.\n\n  ```\n  @article{salah2020cornac,\n    title={cornac: a comparative framework for multimodal recommender systems},\n    author={salah, aghiles and truong, quoc-tuan and lauw, hady w},\n    journal={journal of machine learning research},\n    volume={21},\n    number={95},\n    pages={1--5},\n    year={2020}\n  }\n  ```\n\n- [exploring cross-modality utilization in recommender systems](https://ieeexplore.ieee.org/abstract/document/9354572), truong *et al.*, ieee internet computing, 25(4):50\u201357, 2021.\n\n  ```\n  @article{truong2021exploring,\n    title={exploring cross-modality utilization in recommender systems},\n    author={truong, quoc-tuan and salah, aghiles and tran, thanh-binh and guo, jingyao and lauw, hady w},\n    journal={ieee internet computing},\n    year={2021},\n    publisher={ieee}\n  }\n  ```\n\n- [multi-modal recommender systems: hands-on exploration](https://dl.acm.org/doi/10.1145/3460231.3473324), truong *et al.*, acm conference on recommender systems, 2021.\n\n  ```\n  @inproceedings{truong2021multi,\n    title={multi-modal recommender systems: hands-on exploration},\n    author={truong, quoc-tuan and salah, aghiles and lauw, hady},\n    booktitle={fifteenth acm conference on recommender systems},\n    pages={834--837},\n    year={2021}\n  }\n  ```\n\n## license\n\n[apache license 2.0](license)\n",
  "docs_url": null,
  "keywords": "recommender system,collaborative filtering,multimodal,preference learning,recommendation",
  "license": "",
  "name": "cornac",
  "package_url": "https://pypi.org/project/cornac/",
  "project_url": "https://pypi.org/project/cornac/",
  "project_urls": {
    "Homepage": "https://cornac.preferred.ai"
  },
  "release_url": "https://pypi.org/project/cornac/1.18.0/",
  "requires_dist": [
    "numpy",
    "scipy",
    "tqdm",
    "powerlaw",
    "pytest ; extra == 'tests'",
    "pytest-pep8 ; extra == 'tests'",
    "pytest-xdist ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "Flask ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "a comparative framework for multimodal recommender systems",
  "version": "1.18.0",
  "releases": [],
  "developers": [],
  "kwds": "recommender recommendation recommendations collaborative collaborative_variational_autoencoder",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_cornac",
  "homepage": "https://cornac.preferred.ai",
  "release_count": 54,
  "dependency_ids": [
    "pypi_flask",
    "pypi_numpy",
    "pypi_powerlaw",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_pep8",
    "pypi_pytest_xdist",
    "pypi_scipy",
    "pypi_tqdm"
  ]
}
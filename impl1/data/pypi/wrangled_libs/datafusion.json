{
  "classifiers": [],
  "description": "<!---\n  licensed to the apache software foundation (asf) under one\n  or more contributor license agreements.  see the notice file\n  distributed with this work for additional information\n  regarding copyright ownership.  the asf licenses this file\n  to you under the apache license, version 2.0 (the\n  \"license\"); you may not use this file except in compliance\n  with the license.  you may obtain a copy of the license at\n\n    http://www.apache.org/licenses/license-2.0\n\n  unless required by applicable law or agreed to in writing,\n  software distributed under the license is distributed on an\n  \"as is\" basis, without warranties or conditions of any\n  kind, either express or implied.  see the license for the\n  specific language governing permissions and limitations\n  under the license.\n-->\n\n# datafusion in python\n\n[![python test](https://github.com/apache/arrow-datafusion-python/actions/workflows/test.yaml/badge.svg)](https://github.com/apache/arrow-datafusion-python/actions/workflows/test.yaml)\n[![python release build](https://github.com/apache/arrow-datafusion-python/actions/workflows/build.yml/badge.svg)](https://github.com/apache/arrow-datafusion-python/actions/workflows/build.yml)\n\nthis is a python library that binds to [apache arrow](https://arrow.apache.org/) in-memory query engine [datafusion](https://github.com/apache/arrow-datafusion).\n\ndatafusion's python bindings can be used as an end-user tool as well as providing a foundation for building new systems.\n\n## features\n\n- execute queries using sql or dataframes against csv, parquet, and json data sources.\n- queries are optimized using datafusion's query optimizer.\n- execute user-defined python code from sql.\n- exchange data with pandas and other dataframe libraries that support pyarrow.\n- serialize and deserialize query plans in substrait format.\n- experimental support for transpiling sql queries to dataframe calls with polars, pandas, and cudf.\n\n## comparison with other projects\n\nhere is a comparison with similar projects that may help understand when datafusion might be suitable and unsuitable\nfor your needs:\n\n- [duckdb](http://www.duckdb.org/) is an open source, in-process analytic database. like datafusion, it supports\n  very fast execution, both from its custom file format and directly from parquet files. unlike datafusion, it is\n  written in c/c++ and it is primarily used directly by users as a serverless database and query system rather than\n  as a library for building such database systems.\n\n- [polars](http://pola.rs/) is one of the fastest dataframe libraries at the time of writing. like datafusion, it\n  is also written in rust and uses the apache arrow memory model, but unlike datafusion it does not provide full sql\n  support, nor as many extension points.\n\n## example usage\n\nthe following example demonstrates running a sql query against a parquet file using datafusion, storing the results\nin a pandas dataframe, and then plotting a chart.\n\nthe parquet file used in this example can be downloaded from the following page:\n\n- https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page\n\n```python\nfrom datafusion import sessioncontext\n\n# create a datafusion context\nctx = sessioncontext()\n\n# register table with context\nctx.register_parquet('taxi', 'yellow_tripdata_2021-01.parquet')\n\n# execute sql\ndf = ctx.sql(\"select passenger_count, count(*) \"\n             \"from taxi \"\n             \"where passenger_count is not null \"\n             \"group by passenger_count \"\n             \"order by passenger_count\")\n\n# convert to pandas\npandas_df = df.to_pandas()\n\n# create a chart\nfig = pandas_df.plot(kind=\"bar\", title=\"trip count by number of passengers\").get_figure()\nfig.savefig('chart.png')\n```\n\nthis produces the following chart:\n\n![chart](examples/chart.png)\n\n## configuration\n\nit is possible to configure runtime (memory and disk settings) and configuration settings when creating a context.\n\n```python\nruntime = (\n    runtimeconfig()\n    .with_disk_manager_os()\n    .with_fair_spill_pool(10000000)\n)\nconfig = (\n    sessionconfig()\n    .with_create_default_catalog_and_schema(true)\n    .with_default_catalog_and_schema(\"foo\", \"bar\")\n    .with_target_partitions(8)\n    .with_information_schema(true)\n    .with_repartition_joins(false)\n    .with_repartition_aggregations(false)\n    .with_repartition_windows(false)\n    .with_parquet_pruning(false)\n    .set(\"datafusion.execution.parquet.pushdown_filters\", \"true\")\n)\nctx = sessioncontext(config, runtime)\n```\n\nrefer to the [api documentation](https://arrow.apache.org/datafusion-python/#api-reference) for more information.\n\nprinting the context will show the current configuration settings.\n\n```python\nprint(ctx)\n```\n\n## more examples\n\nsee [examples](examples/readme.md) for more information.\n\n### executing queries with datafusion\n\n- [query a parquet file using sql](./examples/sql-parquet.py)\n- [query a parquet file using the dataframe api](./examples/dataframe-parquet.py)\n- [run a sql query and store the results in a pandas dataframe](./examples/sql-to-pandas.py)\n- [run a sql query with a python user-defined function (udf)](./examples/sql-using-python-udf.py)\n- [run a sql query with a python user-defined aggregation function (udaf)](./examples/sql-using-python-udaf.py)\n- [query pyarrow data](./examples/query-pyarrow-data.py)\n- [create dataframe](./examples/import.py)\n- [export dataframe](./examples/export.py)\n\n### running user-defined python code\n\n- [register a python udf with datafusion](./examples/python-udf.py)\n- [register a python udaf with datafusion](./examples/python-udaf.py)\n\n### substrait support\n\n- [serialize query plans using substrait](./examples/substrait.py)\n\n### executing sql against dataframe libraries (experimental)\n\n- [executing sql on polars](./examples/sql-on-polars.py)\n- [executing sql on pandas](./examples/sql-on-pandas.py)\n- [executing sql on cudf](./examples/sql-on-cudf.py)\n\n## how to install (from pip)\n\n### pip\n\n```bash\npip install datafusion\n# or\npython -m pip install datafusion\n```\n\n### conda\n\n```bash\nconda install -c conda-forge datafusion\n```\n\nyou can verify the installation by running:\n\n```python\n>>> import datafusion\n>>> datafusion.__version__\n'0.6.0'\n```\n\n## how to develop\n\nthis assumes that you have rust and cargo installed. we use the workflow recommended by [pyo3](https://github.com/pyo3/pyo3) and [maturin](https://github.com/pyo3/maturin).\n\nthe maturin tools used in this workflow can be installed either via conda or pip. both approaches should offer the same experience. multiple approaches are only offered to appease developer preference. bootstrapping for both conda and pip are as follows.\n\nbootstrap (conda):\n\n```bash\n# fetch this repo\ngit clone git@github.com:apache/arrow-datafusion-python.git\n# create the conda environment for dev\nconda env create -f ./conda/environments/datafusion-dev.yaml -n datafusion-dev\n# activate the conda environment\nconda activate datafusion-dev\n```\n\nbootstrap (pip):\n\n```bash\n# fetch this repo\ngit clone git@github.com:apache/arrow-datafusion-python.git\n# prepare development environment (used to build wheel / install in development)\npython3 -m venv venv\n# activate the venv\nsource venv/bin/activate\n# update pip itself if necessary\npython -m pip install -u pip\n# install dependencies (for python 3.8+)\npython -m pip install -r requirements-310.txt\n```\n\nthe tests rely on test data in git submodules.\n\n```bash\ngit submodule init\ngit submodule update\n```\n\nwhenever rust code changes (your changes or via `git pull`):\n\n```bash\n# make sure you activate the venv using \"source venv/bin/activate\" first\nmaturin develop\npython -m pytest\n```\n\n### running & installing pre-commit hooks\n\narrow-datafusion-python takes advantage of [pre-commit](https://pre-commit.com/) to assist developers with code linting to help reduce the number of commits that ultimately fail in ci due to linter errors. using the pre-commit hooks is optional for the developer but certainly helpful for keeping prs clean and concise.\n\nour pre-commit hooks can be installed by running `pre-commit install`, which will install the configurations in your arrow_datafusion_python_root/.github directory and run each time you perform a commit, failing to complete the commit if an offending lint is found allowing you to make changes locally before pushing.\n\nthe pre-commit hooks can also be run adhoc without installing them by simply running `pre-commit run --all-files`\n\n## how to update dependencies\n\nto change test dependencies, change the `requirements.in` and run\n\n```bash\n# install pip-tools (this can be done only once), also consider running in venv\npython -m pip install pip-tools\npython -m piptools compile --generate-hashes -o requirements-310.txt\n```\n\nto update dependencies, run with `-u`\n\n```bash\npython -m piptools compile -u --generate-hashes -o requirements-310.txt\n```\n\nmore details [here](https://github.com/jazzband/pip-tools)\n\n",
  "docs_url": null,
  "keywords": "datafusion,dataframe,rust,query-engine",
  "license": "apache-2.0",
  "name": "datafusion",
  "package_url": "https://pypi.org/project/datafusion/",
  "project_url": "https://pypi.org/project/datafusion/",
  "project_urls": {
    "Homepage": "https://github.com/apache/arrow-datafusion-python",
    "documentation": "https://arrow.apache.org/datafusion-python",
    "homepage": "https://arrow.apache.org/datafusion-python",
    "repository": "https://github.com/apache/arrow-datafusion-python"
  },
  "release_url": "https://pypi.org/project/datafusion/33.0.0/",
  "requires_dist": [
    "pyarrow >=11.0.0"
  ],
  "requires_python": ">=3.6",
  "summary": "build and run queries against data",
  "version": "33.0.0",
  "releases": [],
  "developers": [
    "dev@arrow.apache.org"
  ],
  "kwds": "arrow_datafusion_python_root datafusion python3 python license",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_datafusion",
  "homepage": "https://github.com/apache/arrow-datafusion-python",
  "release_count": 21,
  "dependency_ids": [
    "pypi_pyarrow"
  ]
}
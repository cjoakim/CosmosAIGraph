{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: testing"
  ],
  "description": "===============\npytest-reporter\n===============\n\n.. image:: https://img.shields.io/pypi/v/pytest-reporter.svg\n    :target: https://pypi.org/project/pytest-reporter\n    :alt: pypi version\n\ngenerate `pytest`_ reports from templates. you may use one of the available\ntemplates on pypi (like the reference template `pytest-reporter-html1`_),\ninherit them in your own template to tweak their content and appearence or\nmake your own from scratch.\n\nanything text based can be generated like html, latex, csv et.c.\n\n\ninstallation\n------------\n\nyou can install \"pytest-reporter\" via `pip`_ from `pypi`_::\n\n    $ pip install pytest-reporter\n\n\nusage\n-----\n\nspecify the template you want to use and the output path of the report::\n\n    $ pytest --template-dir=templates --template=report.html --report=report.html\n\n\nwriting templates\n-----------------\n\nthis plugin does not come with built-in support for any template engines,\nit is up to each template to implement the rendering (or use another template\nplugin as base). a minimal template may just implement the\n``pytest_reporter_render`` hook.\n\nthis is a very basic jinja2 template implementation:\n\n.. code:: python\n\n    from jinja2 import environment, filesystemloader, templatenotfound\n\n    def pytest_reporter_render(template_name, dirs, context):\n        env = environment(loader=filesystemloader(dirs))\n        try:\n            template = env.get_template(template_name)\n        except templatenotfound:\n            # don't know about this name, may be provided by some other template\n            return\n        return template.render(context)\n\nsee `pytest-reporter-html1`_ for a full reference implementation.\n\n\nthe template context\n--------------------\n\nthe standard context available for all templates include the following:\n\n* ``config``: `config <https://docs.pytest.org/en/latest/reference.html#config>`_\n* ``session``: `session <https://docs.pytest.org/en/latest/reference.html#session>`_\n* ``started``: unix timestamp when session started\n* ``ended``: unix timestamp when session was finished\n* ``warnings[]``: list of warnings.warningmessage\n* ``items``: dictionary of collected items with nodeid as keys\n* ``tests[]``: list of each test run as dictionaries with the following keys:\n\n  * ``item``: `item <https://docs.pytest.org/en/latest/reference.html#item>`_\n  * ``phases[]``: list of each test phase (setup, call, teardown) as dictionaries\n    with the following keys:\n\n    * ``call`` (optional): `callinfo <https://docs.pytest.org/en/latest/reference.html#callinfo>`_ if available.\n    * ``report``: `testreport <https://docs.pytest.org/en/latest/reference.html#testreport>`_\n    * ``sections``: same as ``report.sections`` but only the sections captured for this phase\n    * ``log_records[]``: list of `logging.logrecord <https://docs.python.org/3/library/logging.html#logging.logrecord>`_\n      recorded during the test phase\n    * ``status``: status of this phase. dictionary with the following keys:\n\n      * ``category``: category of the status (e.g. ``\"passed\"``) or empty string\n      * ``letter``: single letter version of status (e.g. ``\"p\"``) or empty string\n      * ``word``: uppercase word version of status (e.g. ``\"passed\"``) or empty string\n      * ``style``: dictionary with e.g. ``{\"yellow\": true}`` or empty dictionary\n\n  * ``status``: status of whole test. dictionary with the following keys:\n\n    * ``category``: category of the test status (e.g. ``\"passed\"``)\n    * ``letter``: single letter version of test status (e.g. ``\"p\"``)\n    * ``word``: uppercase word version of test status (e.g. ``\"passed\"``)\n    * ``style``: dictionary with e.g. ``{\"yellow\": true}`` or empty dictionary\n\nthe context may be extended or modified using the following methods:\n\n* ``config.template_context``\n* the ``template_context`` fixture\n* the ``pytest_reporter_context()``  hook\n\n\nhooks\n-----\n\nsee `hooks.py`_ for a complete list of hooks available.\n\n\nlicense\n-------\n\ndistributed under the terms of the `mit`_ license, \"pytest-reporter\" is free and open source software\n\n\nissues\n------\n\nif you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`pytest-reporter-html1`: https://pypi.org/project/pytest-reporter-html1\n.. _`mit`: http://opensource.org/licenses/mit\n.. _`file an issue`: https://github.com/christiansandberg/pytest-reporter/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`pip`: https://pypi.org/project/pip/\n.. _`pypi`: https://pypi.org/project\n.. _`hooks.py`: https://github.com/christiansandberg/pytest-reporter/blob/master/pytest_reporter/hooks.py\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-reporter",
  "package_url": "https://pypi.org/project/pytest-reporter/",
  "project_url": "https://pypi.org/project/pytest-reporter/",
  "project_urls": {
    "Homepage": "https://github.com/christiansandberg/pytest-reporter"
  },
  "release_url": "https://pypi.org/project/pytest-reporter/0.5.2/",
  "requires_dist": [
    "pytest"
  ],
  "requires_python": ">=3.5",
  "summary": "generate pytest reports with templates",
  "version": "0.5.2",
  "releases": [],
  "developers": [
    "christian_sandberg",
    "christiansandberg@me.com"
  ],
  "kwds": "pytest_reporter_render pytest_reporter pytest_reporter_context pytest pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_reporter",
  "homepage": "https://github.com/christiansandberg/pytest-reporter",
  "release_count": 9,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
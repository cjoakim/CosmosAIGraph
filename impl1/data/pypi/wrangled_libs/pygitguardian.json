{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security"
  ],
  "description": "<a href=\"https://gitguardian.com/\"><img src=\"https://cdn.jsdelivr.net/gh/gitguardian/py-gitguardian/doc/logo.svg\"></a>\n\n# [py-gitguardian](https://github.com/gitguardian/py-gitguardian) - gitguardian api client\n\n[![pypi](https://img.shields.io/pypi/v/pygitguardian?color=%231b2d55&style=for-the-badge)](https://pypi.org/project/pygitguardian/)\n[![license](https://img.shields.io/github/license/gitguardian/py-gitguardian?color=%231b2d55&style=for-the-badge)](license)\n[![github stars](https://img.shields.io/github/stars/gitguardian/py-gitguardian?color=%231b2d55&style=for-the-badge)](https://github.com/gitguardian/py-gitguardian/stargazers)\n![github workflow status](https://img.shields.io/github/actions/workflow/status/gitguardian/py-gitguardian/test-lint.yml?branch=master&style=for-the-badge)\n[![codecov](https://img.shields.io/codecov/c/github/gitguardian/py-gitguardian?style=for-the-badge)](https://codecov.io/gh/gitguardian/py-gitguardian/)\n\napi client library for the [gitguardian api](https://api.gitguardian.com/).\n\nthe gitguardian api puts at your fingertips the power to detect more than 200 types of secrets in any text content, as well as other potential security vulnerabilities.\n\n**py-gitguardian** can be used to create integrations to scan various data sources, from your workstation's filesystem to your favorite chat application.\n\nyou can check api details [here](https://api.gitguardian.com/docs)\nwith all the response codes and expected structures on each method.\n\n## requirements\n\npython 3.7+\n\n## projects using `py-gitguardian`\n\n- [**gitguardian shield**](https://github.com/gitguardian/gg-shield) - scan for secrets in your ci and pre-commit.\n\n## getting started\n\nyou can obtain api keys for api usage on your [dashboard](https://dashboard.gitguardian.com/api/v1/auth/user/github_login/authorize?utm_source=github&utm_medium=py_gitguardian&utm_campaign=py1).\n\n**pip**\n\n```bash\npip3 install --upgrade pygitguardian\n```\n\n**pipenv**\n\n```bash\npipenv install pygitguardian\n```\n\n**poetry**\n\n```bash\npoetry add pygitguardian\n```\n\n## examples\n\ncheck [examples/](examples/) for full examples on how to use py-gitguardian.\n\n### scanning text content\n\n```py\n# please don't hardcode your gg_api_key in source code :)\napi_key = os.getenv(\"gg_api_key\")\ndocument = \"\"\"\n    import urllib.request\n    url = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\n    response = urllib.request.urlopen(url)\n    consume(response.read())\"\n\"\"\"\n\nclient = ggclient(api_key=api_key)\n\n# check the health of the api and the api key used.\nif client.health_check().success:\n    try:\n        scan_result = client.content_scan(document)\n    except exception as exc:\n        # handle exceptions such as schema validation\n        traceback.print_exc(2, file=sys.stderr)\n        print(str(exc))\n        print(scan_result)\nelse:\n    print(\"invalid api key\")\n```\n\n### scanning multiple files\n\n```py\napi_key = os.getenv(\"gg_api_key\")\nclient = ggclient(api_key=api_key)\n\n# create a list of dictionaries for scanning\nfile_paths = (pathlib.path(name) for name in glob.iglob(\"**/*\", recursive=true))\nto_scan = [\n    {\"filename\": path.name, \"document\": path.read_text(errors=\"replace\")}\n    for path in file_paths\n]\n\nscan = client.multi_content_scan(to_scan)\n```\n\n### transform results to dict or json\n\nany model in `py-gitguardian` can be turned to a json string or a dictionary using\nthe `to_dict` and `to_json` methods.\n\n```py\nfrom pygitguardian.models import detail\n\ndetail = detail(\"invalid api key.\")\nprint(detail.to_dict())\nprint(detail.to_json())\n```\n\n### dependencies\n\npy-gitguardian depends on these excellent libraries:\n\n- `requests` - http client\n- `marshmallow` - request (de)serialization and input validation\n",
  "docs_url": null,
  "keywords": "api-client devsecops secrets-detection security-tools library gitguardian",
  "license": "mit",
  "name": "pygitguardian",
  "package_url": "https://pypi.org/project/pygitguardian/",
  "project_url": "https://pypi.org/project/pygitguardian/",
  "project_urls": {
    "Homepage": "https://github.com/GitGuardian/py-gitguardian"
  },
  "release_url": "https://pypi.org/project/pygitguardian/1.11.0/",
  "requires_dist": [
    "marshmallow <4,>=3.5",
    "requests <3,>=2",
    "marshmallow-dataclass <8.6.0,>=8.5.8",
    "typing-extensions"
  ],
  "requires_python": "",
  "summary": "python wrapper for gitguardian's api -- scan security policy breaks everywhere",
  "version": "1.11.0",
  "releases": [],
  "developers": [
    "gitguardian",
    "support@gitguardian.com"
  ],
  "kwds": "py_gitguardian pygitguardian gitguardian py pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pygitguardian",
  "homepage": "https://github.com/gitguardian/py-gitguardian",
  "release_count": 24,
  "dependency_ids": [
    "pypi_marshmallow",
    "pypi_marshmallow_dataclass",
    "pypi_requests",
    "pypi_typing_extensions"
  ]
}
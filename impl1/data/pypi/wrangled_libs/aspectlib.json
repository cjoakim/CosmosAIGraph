{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": "========\noverview\n========\n\n\n\n``aspectlib`` is an aspect-oriented programming, monkey-patch and decorators library. it is useful when changing\nbehavior in existing code is desired. it includes tools for debugging and testing: simple mock/record and a complete\ncapture/replay framework.\n\n* free software: bsd 2-clause license\n\ninstallation\n============\n\n::\n\n    pip install aspectlib\n\nyou can also install the in-development version with::\n\n    pip install https://github.com/ionelmc/python-aspectlib/archive/main.zip\n\n\ndocumentation\n=============\n\ndocs are hosted at readthedocs.org: `python-aspectlib docs <http://python-aspectlib.readthedocs.org/en/latest/>`_.\n\nimplementation status\n=====================\n\nweaving functions, methods, instances and classes is completed.\n\npending:\n\n* *\"concerns\"* (see `docs/todo.rst`)\n\nif ``aspectlib.weave`` doesn't work for your scenario please report a bug!\n\nrequirements\n============\n\n:os: any\n:runtime: python 2.6, 2.7, 3.3, 3.4 or pypy\n\npython 3.2, 3.1 and 3.0 are *not* supported (some objects are too crippled).\n\nsimilar projects\n================\n\n* `function_trace <https://github.com/redhatqe/function_trace>`_ - extremely simple\n\n\nchangelog\n=========\n\n2.0.0 (2022-10-20)\n------------------\n\n* drop support for legacy pythons (2.7, 3.6 or older).\n* remove travis/appveyor ci and switch to github actions.\n* added support for tornado 6 (in the test suite).\n\n1.5.2 (2020-11-15)\n------------------\n\n* fixed broken import on python 3.9.\n  contributed by felix yan in `#19 <https://github.com/ionelmc/python-aspectlib/pull/19>`_.\n\n1.5.1 (2020-06-11)\n------------------\n\n* remove some debug leftover prints from `v1.5.0`.\n\n1.5.0 (2020-04-05)\n------------------\n\n* fixed ``weave`` to stop reading attributes that don't match the method selector.\n  contributed by jonas maurus in `#14 <https://github.com/ionelmc/python-aspectlib/pull/14>`_.\n* added support for python 3.7 and 3.8 (``async def`` functions and generators).\n\n1.4.2 (2016-05-10)\n------------------\n\n* fix forgotten debug prints.\n\n1.4.1 (2016-05-06)\n------------------\n\n* fixed weaving of objects that don't live on root-level modules.\n\n1.4.0 (2016-04-09)\n------------------\n\n* corrected weaving of methods, the weaved function should be unbound.\n* rolling back only applies undos once.\n* added a convenience ``weave`` fixture for pytest.\n\n1.3.3 (2015-10-02)\n------------------\n\n* fixed typo in ``absolutelly_all_methods`` name (now ``absolutely_all_methods``). old name is still there for\n  backwards compatibility.\n\n1.3.2 (2015-09-22)\n------------------\n\n* fixed another tricky bug in the generator advising wrappers - result was not returned if only `proceed` was yielded.\n\n1.3.1 (2015-09-12)\n------------------\n\n* corrected result handling when using aspects on generators.\n\n1.3.0 (2015-06-06)\n------------------\n\n* added ``messages`` property to ``aspectlib.test.logcapture``. change ``call`` to have level name instead of number.\n* fixed a bogus warning from ``aspectlib.patch_module``` when patching methods on old style classes.\n\n1.2.2 (2014-11-25)\n------------------\n\n* added support for weakrefs in the ``__logged__`` wrapper from ``aspectlib.debug.log`` decorator.\n\n1.2.1 (2014-10-15)\n------------------\n\n* don't raise exceptions from ``replay.__exit__`` if there would be an error (makes original cause hard to debug).\n\n1.2.0 (2014-06-24)\n------------------\n\n* fixed weaving methods that were defined in some baseclass (and not on the target class).\n* fixed wrong qualname beeing used in the story/replay recording. now used the alias given to the weaver instead of\n  whatever is the realname on the current platform.\n\n1.1.1 (2014-06-14)\n------------------\n\n* use ``aspectlib_debug`` for every logger in ``aspectlib``.\n\n1.1.0 (2014-06-13)\n------------------\n\n* added a `bind` option to ``aspectlib.aspect`` so you can access the cutpoint from the advisor.\n* replaced automatic importing in ``aspectlib.test.replay`` with extraction of context variables (locals and globals\n  from the calling ``aspectlib.test.story``). works better than the previous inference of module from ast of the\n  result.\n* all the methods on the replay are now properties: ``aspectlib.test.story.diff``,\n  ``aspectlib.test.story.unexpected`` and ``aspectlib.test.story.missing``.\n* added ``aspectlib.test.story.actual`` and ``aspectlib.test.story.expected``.\n* added an ``aspectlib_debug`` environment variable option to switch on debug logging in ``aspectlib``'s internals.\n\n1.0.0 (2014-05-03)\n------------------\n\n* reworked the internals ``aspectlib.test.story`` to keep call ordering, to allow dependencies and improved the\n  serialization (used in the diffs and the missing/unexpected lists).\n\n\n0.9.0 (2014-04-16)\n------------------\n\n* changed ``aspectlib.test.record``:\n\n    * renamed `history` option to `calls`.\n    * renamed `call` option to `iscalled`.\n    * added `callback` option.\n    * added `extended` option.\n\n* changed ``aspectlib.weave``:\n\n    * allow weaving everything in a module.\n    * allow weaving instances of new-style classes.\n\n* added ``aspectlib.test.story`` class for capture-replay and stub/mock testing.\n\n0.8.1 (2014-04-01)\n------------------\n\n* use simpler import for the py3support.\n\n0.8.0 (2014-03-31)\n------------------\n\n* change ``aspectlib.debug.log`` to use ``aspectlib.aspect`` and work as expected with coroutines or generators.\n* fixed ``aspectlib.debug.log`` to work on python 3.4.\n* remove the undocumented ``aspectlib.yield`` advice. it was only usable when decorating generators.\n\n0.7.0 (2014-03-28)\n------------------\n\n* add support for decorating generators and coroutines in ``aspectlib.aspect``.\n* made aspectlib raise better exceptions.\n\n0.6.1 (2014-03-22)\n------------------\n\n* fix checks inside ``aspectlib.debug.log`` that would inadvertently call ``__bool__``/``__nonzero``.\n\n0.6.0 (2014-03-17)\n------------------\n\n* don't include __getattribute__ in all_methods - it's too dangerous dangerous dangerous dangerous dangerous dangerous\n  ... ;)\n* do a more reliable check for old-style classes in debug.log\n* when weaving a class don't weave attributes that are callable but are not actually routines (functions, methods etc)\n\n0.5.0 (2014-03-16)\n------------------\n\n* changed ``aspectlib.debug.log``:\n\n    * renamed `arguments` to `call_args`.\n    * renamed `arguments_repr` to `call_args_repr`.\n    * added `call` option.\n    * fixed issue with logging from old-style methods (object name was a generic \"instance\").\n\n* fixed issues with weaving some types of builtin methods.\n* allow to apply multiple aspects at the same time.\n* validate string targets before weaving. ``aspectlib.weave('mod.invalid name', aspect)`` now gives a clear error\n  (``invalid name`` is not a valid identifier)\n* various documentation improvements and examples.\n\n0.4.1 (2014-03-08)\n------------------\n\n* remove junk from 0.4.0's source distribution.\n\n0.4.0 (2014-03-08)\n------------------\n\n* changed ``aspectlib.weave``:\n\n    * replaced `only_methods`, `skip_methods`, `skip_magicmethods` options with `methods`.\n    * renamed `on_init` option to `lazy`.\n    * added `aliases` option.\n    * replaced `skip_subclasses` option with `subclasses`.\n\n* fixed weaving methods from a string target.\n\n0.3.1 (2014-03-05)\n------------------\n\n* `???`\n\n0.3.0 (2014-03-05)\n------------------\n\n* first public release.\n\n\n",
  "docs_url": null,
  "keywords": "aop,aspects,aspect oriented programming,decorators,patch,monkeypatch,weave,debug,log,tests,mock,capture,replay,capture-replay,debugging,patching,monkeypatching,record,recording,mocking,logger",
  "license": "bsd-2-clause",
  "name": "aspectlib",
  "package_url": "https://pypi.org/project/aspectlib/",
  "project_url": "https://pypi.org/project/aspectlib/",
  "project_urls": {
    "Changelog": "https://python-aspectlib.readthedocs.io/en/latest/changelog.html",
    "Documentation": "https://python-aspectlib.readthedocs.io/",
    "Homepage": "https://github.com/ionelmc/python-aspectlib",
    "Issue Tracker": "https://github.com/ionelmc/python-aspectlib/issues"
  },
  "release_url": "https://pypi.org/project/aspectlib/2.0.0/",
  "requires_dist": [
    "fields"
  ],
  "requires_python": ">=3.7",
  "summary": "``aspectlib`` is an aspect-oriented programming, monkey-patch and decorators library. it is useful when changing",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "contact@ionelmc.ro"
  ],
  "kwds": "aspectlib_debug aspectlib aspect aspects replay",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_aspectlib",
  "homepage": "https://github.com/ionelmc/python-aspectlib",
  "release_count": 29,
  "dependency_ids": [
    "pypi_fields"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: web environment",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: information technology",
    "intended audience :: manufacturing",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "intended audience :: telecommunications industry",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: os independent",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications",
    "topic :: database",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: human machine interfaces",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: interface engine/protocol translator",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: archiving",
    "topic :: system :: networking :: monitoring",
    "topic :: utilities"
  ],
  "description": "# grafana-client\n\n[![tests](https://github.com/panodata/grafana-client/workflows/test/badge.svg)](https://github.com/panodata/grafana-client/actions?query=workflow%3atest)\n[![test coverage](https://img.shields.io/codecov/c/gh/panodata/grafana-client.svg?style=flat-square)](https://codecov.io/gh/panodata/grafana-client/)\n[![license](https://img.shields.io/github/license/panodata/grafana-client.svg?style=flat-square)](https://github.com/panodata/grafana-client/blob/main/license) \n\n[![python versions](https://img.shields.io/pypi/pyversions/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)\n[![grafana versions](https://img.shields.io/badge/grafana-5.x%20--%2010.x-blue.svg?style=flat-square)](https://github.com/grafana/grafana)\n\n[![status](https://img.shields.io/pypi/status/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)\n[![pypi](https://img.shields.io/pypi/v/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)\n[![downloads](https://img.shields.io/pypi/dm/grafana-client.svg?style=flat-square)](https://pypi.org/project/grafana-client/)\n<!-- [![conda](https://img.shields.io/conda/v/panodata/grafana-client.svg?style=flat-square)](https://anaconda.org/panodata/grafana-client) -->\n\n\n## about\n\na client library for accessing the grafana http api, written in python.\n\n\n## setup\n\ninstall the package from pypi.\n```\npip install grafana-client --upgrade\n```\n\n\n## usage\n\n### api overview\n\nthis section gives you an idea about how to use the api on behalf of a few\nsamples.\n\n```python\nfrom grafana_client import grafanaapi\n\n# connect to grafana api endpoint using the `grafanaapi` class\ngrafana = grafanaapi.from_url(\n    \"https://username:password@daq.example.org/grafana/\")\n\n# create user\nuser = grafana.admin.create_user({\n    \"name\": \"user\", \n    \"email\": \"user@example.org\", \n    \"login\": \"user\", \n    \"password\": \"userpassword\", \n    \"orgid\": 1,\n})\n\n# change user password\nuser = grafana.admin.change_user_password(2, \"newpassword\")\n\n# search dashboards based on tag\ngrafana.search.search_dashboards(tag=\"applications\")\n\n# find a user by email\nuser = grafana.users.find_user(\"test@example.org\")\n\n# add user to team 2\ngrafana.teams.add_team_member(2, user[\"id\"])\n\n# create or update a dashboard\ngrafana.dashboard.update_dashboard(\n    dashboard={\"dashboard\": {...}, \"folderid\": 0, \"overwrite\": true})\n\n# delete a dashboard by uid\ngrafana.dashboard.delete_dashboard(dashboard_uid=\"foobar\")\n\n# create organization\ngrafana.organization.create_organization(\n    organization={\"name\": \"new_organization\"})\n```\n\n### example programs\n\nthere are complete example programs to get you started within the [examples\nfolder] of this repository.\n\nfeel free to use them as blueprints for your own programs. if you think your\nexercises could be useful for others, don't hesitate to share them back.\n\n\n## authentication\n\nthere are several ways to authenticate to the grafana http api.\n\n1. anonymous access\n2. grafana api token\n3. http basic authentication\n4. http header authentication\n\nthe [grafana admin api] is a subset of the grafana api. for accessing those api\nresources, you will need to use http basic authentication.\n\n```python\nfrom grafana_client import grafanaapi, headerauth, tokenauth\n\n# 1. anonymous access\ngrafana = grafanaapi.from_url(\n    url=\"https://daq.example.org/grafana/\",\n)\n\n# 2. use grafana api token.\ngrafana = grafanaapi.from_url(\n    url=\"https://daq.example.org/grafana/\",\n    credential=tokenauth(token=\"eyjrijoiwhg...dgjpzci6mx0=\"),\n)\n\n# 3. use http basic authentication.\ngrafana = grafanaapi.from_url(\n    url=\"https://username:password@daq.example.org/grafana/\",\n)\ngrafana = grafanaapi.from_url(\n    url=\"https://daq.example.org/grafana/\",\n    credential=(\"username\", \"password\")\n)\n\n# 4. use http header authentication.\ngrafana = grafanaapi.from_url(\n    url=\"https://daq.example.org/grafana/\",\n    credential=headerauth(name=\"x-webauth-user\", value=\"foobar\"),\n)\n\n# optionally turn off tls certificate verification.\ngrafana = grafanaapi.from_url(\n    url=\"https://username:password@daq.example.org/grafana/?verify=false\",\n)\n\n# use `grafana_url` and `grafana_token` environment variables.\ngrafana = grafanaapi.from_env()\n```\n\nplease note that, on top of the specific examples above, the object obtained by\n`credential` can be an arbitrary `requests.auth.authbase` instance.\n\n## selecting organizations\n\nif the grafana api is authenticated as a user (for example, with http basic authentication),\nit will use the user's current organization context.\nthat context can be changed with the `grafanaapi.user.switch_actual_user_organisation` function.\n\n```python\ngrafana.user.switch_actual_user_organisation(1)\n```\n\nan instance of `grafanaapi` can also be bound to a single organization with the `organization_id` parameter,\nensuring that all requests will be made to that organization.\nthis parameter will cause `grafanaclient` to use the [x-grafana-org-id header].\n\n```python\ngrafana = grafanaapi(..., organization_id=1)\n```\n\napi tokens are bound to a single organization, so the `organization_id` parameter does not need to be specified.\n\n## timeout settings\n\nthe default timeout value is five seconds, used for both connect and read timeout.\n\nthe constructors of `grafanaapi` and `grafanaclient`, as well as the factory methods\n`from_url` and `from_env` accept the `timeout` argument, which can be obtained as a\nscalar `float` value, or as a tuple of `(<read timeout>, <connect timeout>)`.\n\n\n## proxy\n\nthe underlying `requests` library honors the `http_proxy` and `https_proxy`\nenvironment variables. setting them before invoking an application using\n`grafana-client` has been confirmed to work. for example:\n```\nexport http_proxy=10.10.1.10:3128\nexport https_proxy=10.10.1.11:1080\n```\n\n\n## details\n\nthis section of the documentation outlines which parts of the grafana http api\nare supported, and to which degree. see also [grafana http api reference].\n\n### compatibility\n\n`grafana-client` is largely compatible with grafana 5.x-10.x. however, earlier\nversions of grafana might not support certain features or subsystems.\n\n### overview\n\n| api | status |\n|---|---|\n| admin | + |\n| alerting | +- |\n| alerting notification channels | + |\n| alerting provisioning | + |\n| annotations | + |\n| authentication | +- |\n| dashboard | + |\n| dashboard versions | + |\n| dashboard permissions | + |\n| data source | + |\n| data source permissions | + |\n| external group sync | + |\n| folder | + |\n| folder permissions | + |\n| folder/dashboard search | +- |\n| health | + |\n| organisation | + |\n| other | + |\n| plugin | + |\n| preferences | + |\n| rbac | +- |\n| snapshot | + |\n| teams | + |\n| user | + |\n\n\n### data source health check\n\n#### introduction\n\nfor checking whether a grafana data source is healthy, grafana 9 and newer has\na server-side data source health check api. for earlier versions, a client-side\nimplementation is provided.\n\nthis implementation works in the same manner as the \"save & test\" button works,\nwhen creating a data source in the user interface.\n\nthe feature can be explored through corresponding client programs in the\n[examples folder] of this repository.\n\n#### compatibility\n\nthe minimum required version for data source health checks is grafana 7.\nprometheus only works on grafana 8 and newer.\n\n#### data source coverage\n\nhealth checks are supported for these grafana data source types.\n\n- cratedb\n- elasticsearch\n- graphite\n- influxdb\n- jaeger\n- loki\n- microsoft sql server\n- opentsdb\n- postgresql\n- prometheus\n- tempo\n- testdata\n- zipkin\n\nwe are humbly asking the community to contribute adapters for other data\nsource types, popular or not.\n\n\n## applications\n\na list of applications based on `grafana-client`.\n\n- [grafana-import-tool](https://github.com/peekjef72/grafana-import-tool)\n- [grafana-ldap-sync-script](https://github.com/novatecconsulting/grafana-ldap-sync-script)\n- [grafana-snapshots-tool](https://github.com/peekjef72/grafana-snapshots-tool)\n- [grafana-wtf](https://github.com/panodata/grafana-wtf)\n- [nixops-grafana](https://github.com/tewfik-ghariani/nixops-grafana)\n\n\n## project information\n\n### history\n\nthe library was originally conceived by [andrew prokhorenkov] and contributors\nas [grafana_api]. thank you very much for your efforts!\n\nat [future maintenance of `grafana_api`], we discussed the need for a fork\nbecause the repository stopped receiving updates since more than a year.\nwhile forking it, we renamed the package to `grafana-client` and slightly\ntrimmed the module namespace.\n\n\n### acknowledgements\n\nthanks to the original authors and all [contributors] who helped to co-create\nand conceive this software in one way or another. you know who you are.\n\n\n### contributing\n\nany kind of contribution and feedback are very much welcome! just create an\nissue or submit a patch if you think we should include a new feature, or to \nreport or fix a bug.\n\nthe issue tracker url is: https://github.com/panodata/grafana-client/issues\n\n\n### development\n\nin order to set up a development environment for `grafana-client`, please\nfollow the [development documentation].\n\n\n### license\n\n`grafana-client` is licensed under the terms of the mit license, see [license] file.\n\n\n[andrew prokhorenkov]: https://github.com/m0nhawk/grafana_api\n[contributors]: https://github.com/panodata/grafana-client/graphs/contributors\n[development documentation]: https://github.com/panodata/grafana-client/blob/main/docs/development.md\n[examples folder]: https://github.com/panodata/grafana-client/tree/main/examples\n[future maintenance of `grafana_api`]: https://github.com/m0nhawk/grafana_api/issues/88\n[grafana_api]: https://github.com/m0nhawk/grafana_api\n[grafana admin api]: https://grafana.com/docs/grafana/latest/http_api/admin/\n[x-grafana-org-id header]: https://grafana.com/docs/grafana/latest/developers/http_api/auth/#x-grafana-org-id-header\n[grafana http api reference]: https://grafana.com/docs/grafana/latest/http_api/\n[license]: https://github.com/panodata/grafana-client/blob/main/license\n",
  "docs_url": null,
  "keywords": "grafana http api grafana-client grafana-api http-client grafana-utils grafana-automation grafana-toolbox",
  "license": "mit",
  "name": "grafana-client",
  "package_url": "https://pypi.org/project/grafana-client/",
  "project_url": "https://pypi.org/project/grafana-client/",
  "project_urls": {
    "Homepage": "https://github.com/panodata/grafana-client",
    "Source": "https://github.com/panodata/grafana-client",
    "Tracker": "https://github.com/panodata/grafana-client/issues"
  },
  "release_url": "https://pypi.org/project/grafana-client/3.10.0/",
  "requires_dist": [
    "requests <3,>=2.23.0",
    "verlib2 ==0.2.0",
    "dataclasses ; python_version <= \"3.6\"",
    "importlib-metadata ; python_version <= \"3.7\"",
    "isort <6 ; extra == 'develop'",
    "black <24 ; extra == 'develop'",
    "build <2 ; extra == 'develop'",
    "poethepoet <1 ; extra == 'develop'",
    "pip-review <2 ; extra == 'develop'",
    "ruff ==0.1.3 ; (python_version >= \"3.7\") and extra == 'develop'",
    "parameterized <1,>=0.8 ; extra == 'test'",
    "codecov <3 ; extra == 'test'",
    "coverage[toml] <8 ; extra == 'test'",
    "unittest-xml-reporting <4 ; extra == 'test'",
    "requests-mock <2 ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "a client library for accessing the grafana http api, written in python",
  "version": "3.10.0",
  "releases": [],
  "developers": [
    "andreas.motl@panodata.org",
    "andreas_motl",
    "andrew.prokhorenkov@gmail.com",
    "andrew_prokhorenkov"
  ],
  "kwds": "grafana_api grafana_client grafanaclient grafana_url grafana",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_grafana_client",
  "homepage": "https://github.com/panodata/grafana-client",
  "release_count": 21,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_codecov",
    "pypi_coverage",
    "pypi_dataclasses",
    "pypi_importlib_metadata",
    "pypi_isort",
    "pypi_parameterized",
    "pypi_pip_review",
    "pypi_poethepoet",
    "pypi_requests",
    "pypi_requests_mock",
    "pypi_ruff",
    "pypi_unittest_xml_reporting",
    "pypi_verlib2"
  ]
}
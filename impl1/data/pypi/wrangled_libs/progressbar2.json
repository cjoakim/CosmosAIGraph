{
  "classifiers": [
    "development status :: 5 - production/stable",
    "development status :: 6 - mature",
    "environment :: console",
    "environment :: macos x",
    "environment :: other environment",
    "environment :: win32 (ms windows)",
    "environment :: x11 applications",
    "framework :: ipython",
    "framework :: jupyter",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: other audience",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: ms-dos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: ironpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: unix shell",
    "topic :: desktop environment",
    "topic :: education :: computer aided instruction (cai)",
    "topic :: education :: testing",
    "topic :: office/business",
    "topic :: other/nonlisted topic",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: pre-processors",
    "topic :: software development :: user interfaces",
    "topic :: system :: installation/setup",
    "topic :: system :: logging",
    "topic :: system :: monitoring",
    "topic :: system :: shells",
    "topic :: terminals",
    "topic :: utilities"
  ],
  "description": "##############################################################################\ntext progress bar library for python.\n##############################################################################\n\nbuild status:\n\n.. image:: https://github.com/wolph/python-progressbar/actions/workflows/main.yml/badge.svg\n    :alt: python-progressbar test status \n    :target: https://github.com/wolph/python-progressbar/actions\n\ncoverage:\n\n.. image:: https://coveralls.io/repos/wolph/python-progressbar/badge.svg?branch=master\n  :target: https://coveralls.io/r/wolph/python-progressbar?branch=master\n\n******************************************************************************\ninstall\n******************************************************************************\n\nthe package can be installed through `pip` (this is the recommended method):\n\n    pip install progressbar2\n\nor if `pip` is not available, `easy_install` should work as well:\n\n    easy_install progressbar2\n\nor download the latest release from pypi (https://pypi.python.org/pypi/progressbar2) or github.\n\nnote that the releases on pypi are signed with my gpg key (https://pgp.mit.edu/pks/lookup?op=vindex&search=0xe81444e9ce1f695d) and can be checked using gpg:\n\n     gpg --verify progressbar2-<version>.tar.gz.asc progressbar2-<version>.tar.gz\n\n******************************************************************************\nintroduction\n******************************************************************************\n\na text progress bar is typically used to display the progress of a long\nrunning operation, providing a visual cue that processing is underway.\n\nthe progressbar is based on the old python progressbar package that was published on the now defunct google code. since that project was completely abandoned by its developer and the developer did not respond to email, i decided to fork the package. this package is still backwards compatible with the original progressbar package so you can safely use it as a drop-in replacement for existing project.\n\nthe progressbar class manages the current progress, and the format of the line\nis given by a number of widgets. a widget is an object that may display\ndifferently depending on the state of the progress bar. there are many types\nof widgets:\n\n - `absoluteeta <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#absoluteeta>`_\n - `adaptiveeta <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#adaptiveeta>`_\n - `adaptivetransferspeed <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#adaptivetransferspeed>`_\n - `animatedmarker <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#animatedmarker>`_\n - `bar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#bar>`_\n - `bouncingbar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#bouncingbar>`_\n - `counter <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#counter>`_\n - `currenttime <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#currenttime>`_\n - `datasize <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#datasize>`_\n - `dynamicmessage <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#dynamicmessage>`_\n - `eta <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#eta>`_\n - `filetransferspeed <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#filetransferspeed>`_\n - `formatcustomtext <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#formatcustomtext>`_\n - `formatlabel <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#formatlabel>`_\n - `formatlabelbar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#formatlabel>`_\n - `granularbar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#granularbar>`_\n - `percentage <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#percentage>`_\n - `percentagelabelbar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#percentagelabelbar>`_\n - `reversebar <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#reversebar>`_\n - `rotatingmarker <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#rotatingmarker>`_\n - `simpleprogress <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#simpleprogress>`_\n - `timer <http://progressbar-2.readthedocs.io/en/latest/_modules/progressbar/widgets.html#timer>`_\n\nthe progressbar module is very easy to use, yet very powerful. it will also\nautomatically enable features like auto-resizing when the system supports it.\n\n******************************************************************************\nsecurity contact information\n******************************************************************************\n\nto report a security vulnerability, please use the\n`tidelift security contact <https://tidelift.com/security>`_.\ntidelift will coordinate the fix and disclosure.\n\n******************************************************************************\nknown issues\n******************************************************************************\n\n- the jetbrains (pycharm, etc) editors work out of the box, but for more advanced features such as the `multibar` support you will need to enable the \"enable terminal in output console\" checkbox in the run dialog.\n- the idle editor doesn't support these types of progress bars at all: https://bugs.python.org/issue23220\n- jupyter notebooks buffer `sys.stdout` which can cause mixed output. this issue can be resolved easily using: `import sys; sys.stdout.flush()`. linked issue: https://github.com/wolph/python-progressbar/issues/173\n\n******************************************************************************\nlinks\n******************************************************************************\n\n* documentation\n    - https://progressbar-2.readthedocs.org/en/latest/\n* source\n    - https://github.com/wolph/python-progressbar\n* bug reports\n    - https://github.com/wolph/python-progressbar/issues\n* package homepage\n    - https://pypi.python.org/pypi/progressbar2\n* my blog\n    - https://w.wol.ph/\n\n******************************************************************************\nusage\n******************************************************************************\n\nthere are many ways to use python progressbar, you can see a few basic examples\nhere but there are many more in the examples file.\n\nwrapping an iterable\n==============================================================================\n.. code:: python\n\n    import time\n    import progressbar\n\n    for i in progressbar.progressbar(range(100)):\n        time.sleep(0.02)\n\nprogressbars with logging\n==============================================================================\n\nprogressbars with logging require `stderr` redirection _before_ the\n`streamhandler` is initialized. to make sure the `stderr` stream has been\nredirected on time make sure to call `progressbar.streams.wrap_stderr()` before\nyou initialize the `logger`.\n\none option to force early initialization is by using the `wrap_stderr`\nenvironment variable, on linux/unix systems this can be done through:\n\n.. code:: sh\n\n    # wrap_stderr=true python your_script.py\n\nif you need to flush manually while wrapping, you can do so using:\n\n.. code:: python\n\n    import progressbar\n\n    progressbar.streams.flush()\n\nin most cases the following will work as well, as long as you initialize the\n`streamhandler` after the wrapping has taken place.\n\n.. code:: python\n\n    import time\n    import logging\n    import progressbar\n\n    progressbar.streams.wrap_stderr()\n    logging.basicconfig()\n\n    for i in progressbar.progressbar(range(10)):\n        logging.error('got %d', i)\n        time.sleep(0.2)\n\nmultiple (threaded) progressbars\n==============================================================================\n\n.. code:: python\n\n    import random\n    import threading\n    import time\n\n    import progressbar\n\n    bars = 5\n    n = 50\n\n\n    def do_something(bar):\n        for i in bar(range(n)):\n            # sleep up to 0.1 seconds\n            time.sleep(random.random() * 0.1)\n\n            # print messages at random intervals to show how extra output works\n            if random.random() > 0.9:\n                bar.print('random message for bar', bar, i)\n\n\n    with progressbar.multibar() as multibar:\n        for i in range(bars):\n            # get a progressbar\n            bar = multibar[f'thread label here {i}']\n            # create a thread and pass the progressbar\n            threading.thread(target=do_something, args=(bar,)).start()\n\ncontext wrapper\n==============================================================================\n.. code:: python\n\n   import time\n   import progressbar\n\n   with progressbar.progressbar(max_value=10) as bar:\n       for i in range(10):\n           time.sleep(0.1)\n           bar.update(i)\n\ncombining progressbars with print output\n==============================================================================\n.. code:: python\n\n    import time\n    import progressbar\n\n    for i in progressbar.progressbar(range(100), redirect_stdout=true):\n        print('some text', i)\n        time.sleep(0.1)\n\nprogressbar with unknown length\n==============================================================================\n.. code:: python\n\n    import time\n    import progressbar\n\n    bar = progressbar.progressbar(max_value=progressbar.unknownlength)\n    for i in range(20):\n        time.sleep(0.1)\n        bar.update(i)\n\nbar with custom widgets\n==============================================================================\n.. code:: python\n\n    import time\n    import progressbar\n\n    widgets=[\n        ' [', progressbar.timer(), '] ',\n        progressbar.bar(),\n        ' (', progressbar.eta(), ') ',\n    ]\n    for i in progressbar.progressbar(range(20), widgets=widgets):\n        time.sleep(0.1)\n\nbar with wide chinese (or other multibyte) characters\n==============================================================================\n\n.. code:: python\n\n    # vim: fileencoding=utf-8\n    import time\n    import progressbar\n\n\n    def custom_len(value):\n        # these characters take up more space\n        characters = {\n            '\u8fdb': 2,\n            '\u5ea6': 2,\n        }\n\n        total = 0\n        for c in value:\n            total += characters.get(c, 1)\n\n        return total\n\n\n    bar = progressbar.progressbar(\n        widgets=[\n            '\u8fdb\u5ea6: ',\n            progressbar.bar(),\n            ' ',\n            progressbar.counter(format='%(value)02d/%(max_value)d'),\n        ],\n        len_func=custom_len,\n    )\n    for i in bar(range(10)):\n        time.sleep(0.1)\n\nshowing multiple independent progress bars in parallel\n==============================================================================\n\n.. code:: python\n\n    import random\n    import sys\n    import time\n\n    import progressbar\n\n    bars = 5\n    n = 100\n\n    # construct the list of progress bars with the `line_offset` so they draw\n    # below each other\n    bars = []\n    for i in range(bars):\n        bars.append(\n            progressbar.progressbar(\n                max_value=n,\n                # we add 1 to the line offset to account for the `print_fd`\n                line_offset=i + 1,\n                max_error=false,\n            )\n        )\n\n    # create a file descriptor for regular printing as well\n    print_fd = progressbar.lineoffsetstreamwrapper(sys.stdout, 0)\n\n    # the progress bar updates, normally you would do something useful here\n    for i in range(n * bars):\n        time.sleep(0.005)\n\n        # increment one of the progress bars at random\n        bars[random.randrange(0, bars)].increment()\n\n        # print a status message to the `print_fd` below the progress bars\n        print(f'hi, we are at update {i+1} of {n * bars}', file=print_fd)\n\n    # cleanup the bars\n    for bar in bars:\n        bar.finish()\n\n    # add a newline to make sure the next print starts on a new line\n    print()\n\n******************************************************************************\n\nnaturally we can do this from separate threads as well:\n\n.. code:: python\n\n    import random\n    import threading\n    import time\n\n    import progressbar\n\n    bars = 5\n    n = 100\n\n    # create the bars with the given line offset\n    bars = []\n    for line_offset in range(bars):\n        bars.append(progressbar.progressbar(line_offset=line_offset, max_value=n))\n\n\n    class worker(threading.thread):\n        def __init__(self, bar):\n            super().__init__()\n            self.bar = bar\n\n        def run(self):\n            for i in range(n):\n                time.sleep(random.random() / 25)\n                self.bar.update(i)\n\n\n    for bar in bars:\n        worker(bar).start()\n\n    print()\n",
  "docs_url": null,
  "keywords": "repl,animated,bar,color,console,duration,efficient,elapsed,eta,feedback,live,meter,monitor,monitoring,multi-threaded,progress,progress-bar,progressbar,progressmeter,python,rate,simple,speed,spinner,stats,terminal,throughput,time,visual",
  "license": "bsd-3-clause",
  "name": "progressbar2",
  "package_url": "https://pypi.org/project/progressbar2/",
  "project_url": "https://pypi.org/project/progressbar2/",
  "project_urls": {
    "bugs": "https://github.com/wolph/python-progressbar/issues",
    "documentation": "https://progressbar-2.readthedocs.io/en/latest/",
    "repository": "https://github.com/wolph/python-progressbar/"
  },
  "release_url": "https://pypi.org/project/progressbar2/4.3.2/",
  "requires_dist": [
    "python-utils >=3.8.1",
    "sphinx >=1.8.5 ; extra == 'docs'",
    "sphinx-autodoc-typehints >=1.6.0 ; extra == 'docs'",
    "dill >=0.3.6 ; extra == 'tests'",
    "flake8 >=3.7.7 ; extra == 'tests'",
    "freezegun >=0.3.11 ; extra == 'tests'",
    "pytest-cov >=2.6.1 ; extra == 'tests'",
    "pytest-mypy ; extra == 'tests'",
    "pytest >=4.6.9 ; extra == 'tests'",
    "sphinx >=1.8.5 ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "a python progressbar library to provide visual (yet text based) progress to long running operations.",
  "version": "4.3.2",
  "releases": [],
  "developers": [
    "wolph@wol.ph"
  ],
  "kwds": "progressbar2 progressbar progressbars python progressmeter",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_progressbar2",
  "homepage": "",
  "release_count": 105,
  "dependency_ids": [
    "pypi_dill",
    "pypi_flake8",
    "pypi_freezegun",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mypy",
    "pypi_python_utils",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints"
  ]
}
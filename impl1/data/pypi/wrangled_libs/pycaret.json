{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<div align=\"center\">\n\n<img src=\"docs/images/logo.png\" alt=\"drawing\" width=\"200\"/>\n\n## **an open-source, low-code machine learning library in python**\n## \ud83c\udf89\ud83c\udf89\ud83c\udf89 **pycaret 3.0 is now available. \ud83c\udf89\ud83c\udf89\ud83c\udf89**\n## `pip install --upgrade pycaret` </br>\n\n<p align=\"center\">\n<h3>\n  <a href=\"https://pycaret.gitbook.io/\">docs</a> \u2022\n  <a href=\"https://pycaret.gitbook.io/docs/get-started/tutorials\">tutorials</a> \u2022\n  <a href=\"https://pycaret.gitbook.io/docs/learn-pycaret/official-blog\">blog</a> \u2022\n  <a href=\"https://www.linkedin.com/company/pycaret/\">linkedin</a> \u2022\n  <a href=\"https://www.youtube.com/channel/ucxa1ytyj9beeo50lxyi_b3g\">youtube</a> \u2022\n    <a href=\"https://join.slack.com/t/pycaret/shared_invite/zt-row9phbm-bojdevpyngf7_nxnbp307w\">slack</a>\n</h3>\n</p>\n\n| overview | |\n|---|---|\n| **ci/cd** | ![pytest on push](https://github.com/pycaret/pycaret/workflows/pytest%20on%20push/badge.svg) [![documentation status](https://readthedocs.org/projects/pip/badge/?version=stable)](http://pip.pypa.io/en/stable/?badge=stable) |\n| **code** |  [![!pypi](https://img.shields.io/pypi/v/pycaret?color=orange)](https://pypi.org/project/pycaret/) [![!python-versions](https://img.shields.io/badge/python-3.7%20%7c%203.8%20%7c%203.9%20%7c%203.10%20%7c%203.11-blue)](https://badge.fury.io/py/pycaret) [![!black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n| **downloads**| [![downloads](https://static.pepy.tech/personalized-badge/pycaret?period=week&units=international_system&left_color=grey&right_color=blue&left_text=weekly%20(pypi))](https://pepy.tech/project/pycaret) [![downloads](https://static.pepy.tech/personalized-badge/pycaret?period=month&units=international_system&left_color=grey&right_color=blue&left_text=monthly%20(pypi))](https://pepy.tech/project/pycaret) [![downloads](https://static.pepy.tech/personalized-badge/pycaret?period=total&units=international_system&left_color=grey&right_color=blue&left_text=cumulative%20(pypi))](https://pepy.tech/project/pycaret) |\n| **license** | [![license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://img.shields.io/pypi/l/ansicolortags.svg)\n| **community** | [![slack](https://img.shields.io/badge/slack-chat-green.svg?logo=slack)](https://join.slack.com/t/pycaret/shared_invite/zt-20gl4zb8k-l~zqdyi9ltrv4dwxyple7a) |\n\n\n\n![alt text](docs/images/quick_start.gif)\n\n<div align=\"left\">\n\n# welcome to pycaret\npycaret is an open-source, low-code machine learning library in python that automates machine learning workflows. it is an end-to-end machine learning and model management tool that speeds up the experiment cycle exponentially and makes you more productive.\n\nin comparison with the other open-source machine learning libraries, pycaret is an alternate low-code library that can be used to replace hundreds of lines of code with few lines only. this makes experiments exponentially fast and efficient. pycaret is essentially a python wrapper around several machine learning libraries and frameworks such as scikit-learn, xgboost, lightgbm, catboost, optuna, hyperopt, ray, and few more.\n\nthe design and simplicity of pycaret are inspired by the emerging role of citizen data scientists, a term first used by gartner. citizen data scientists are power users who can perform both simple and moderately sophisticated analytical tasks that would previously have required more technical expertise. pycaret was inspired by the caret library in r programming language.\n\n# \ud83d\ude80 installation\n\n## \ud83c\udf10 option 1: install via pypi\npycaret is tested and supported on 64-bit systems with:\n- python 3.8, 3.9, 3.10 and 3.11\n- ubuntu 16.04 or later\n- windows 7 or later\n\nyou can install pycaret with python's pip package manager:\n\n```python\n# install pycaret\npip install pycaret\n```\n\npycaret's default installation will not install all the optional dependencies automatically. depending on the use case, you may be interested in one or more extras:\n\n```python\n# install analysis extras\npip install pycaret[analysis]\n\n# models extras\npip install pycaret[models]\n\n# install tuner extras\npip install pycaret[tuner]\n\n# install mlops extras\npip install pycaret[mlops]\n\n# install parallel extras\npip install pycaret[parallel]\n\n# install test extras\npip install pycaret[test]\n\n##\n\n# install multiple extras together\npip install pycaret[analysis,models]\n```\n\ncheck out all [optional dependencies](https://github.com/pycaret/pycaret/blob/master/requirements-optional.txt). if you want to install everything including all the optional dependencies:\n\n```python\n# install full version\npip install pycaret[full]\n```\n## \ud83d\udcc4 option 2: build from source\ninstall the development version of the library directly from the source. the api may be unstable. it is not recommended for production use.\n\n```python\npip install git+https://github.com/pycaret/pycaret.git@master --upgrade\n```\n\n## \ud83d\udce6 option 3: docker\ndocker creates virtual environments with containers that keep a pycaret installation separate from the rest of the system. pycaret docker comes pre-installed with a jupyter notebook. it can share resources with its host machine (access directories, use the gpu, connect to the internet, etc.). the pycaret docker images are always tested for the latest major releases.\n\n```python\n# default version\ndocker run -p 8888:8888 pycaret/slim\n\n# full version\ndocker run -p 8888:8888 pycaret/full\n```\n\n## \ud83c\udfc3\u200d\u2642\ufe0f quickstart\n\n### 1. functional api\n```python\n# classification functional api example\n\n# loading sample dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import *\ns = setup(data, target = 'purchase', session_id = 123)\n\n# model training and selection\nbest = compare_models()\n\n# evaluate trained model\nevaluate_model(best)\n\n# predict on hold-out/test set\npred_holdout = predict_model(best)\n\n# predict on new data\nnew_data = data.copy().drop('purchase', axis = 1)\npredictions = predict_model(best, data = new_data)\n\n# save model\nsave_model(best, 'best_pipeline')\n```\n\n### 2. oop api\n\n```python\n# classification oop api example\n\n# loading sample dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import classificationexperiment\ns = classificationexperiment()\ns.setup(data, target = 'purchase', session_id = 123)\n\n# model training and selection\nbest = s.compare_models()\n\n# evaluate trained model\ns.evaluate_model(best)\n\n# predict on hold-out/test set\npred_holdout = s.predict_model(best)\n\n# predict on new data\nnew_data = data.copy().drop('purchase', axis = 1)\npredictions = s.predict_model(best, data = new_data)\n\n# save model\ns.save_model(best, 'best_pipeline')\n```\n\n\n## \ud83d\udcc1 modules\n<div align=\"center\">\n\n## **classification**\n\n  functional api           |  oop api\n:-------------------------:|:-------------------------:\n![](docs/images/classification_functional.png)  | ![](docs/images/classification_oop.png)\n\n## **regression**\n\n  functional api           |  oop api\n:-------------------------:|:-------------------------:\n![](docs/images/regression_functional.png)  | ![](docs/images/regression_oop.png)\n\n## **time series**\n\n  functional api           |  oop api\n:-------------------------:|:-------------------------:\n![](docs/images/time_series_functional.png)  | ![](docs/images/time_series_oop.png)\n\n## **clustering**\n\n  functional api           |  oop api\n:-------------------------:|:-------------------------:\n![](docs/images/clustering_functional.png)  | ![](docs/images/clustering_oop.png)\n\n## **anomaly detection**\n\n  functional api           |  oop api\n:-------------------------:|:-------------------------:\n![](docs/images/anomaly_functional.png)  | ![](docs/images/anomaly_oop.png)\n\n<div align=\"left\">\n\n# \ud83d\udc65 who should use pycaret?\npycaret is an open source library that anybody can use. in our view the ideal target audience of pycaret is: <br />\n\n- experienced data scientists who want to increase productivity.\n- citizen data scientists who prefer a low code machine learning solution.\n- data science professionals who want to build rapid prototypes.\n- data science and machine learning students and enthusiasts.\n\n# \ud83c\udfae training on gpus\nto train models on the gpu, simply pass use_gpu = true in the setup function. there is no change in the use of the api; however, in some cases, additional libraries have to be installed. the following models can be trained on gpus:\n\n- extreme gradient boosting\n- catboost\n- light gradient boosting machine requires [gpu installation](https://lightgbm.readthedocs.io/en/latest/gpu-tutorial.html)\n- logistic regression, ridge classifier, random forest, k neighbors classifier, k neighbors regressor, support vector machine, linear regression, ridge regression, lasso regression requires [cuml >= 0.15](https://github.com/rapidsai/cuml)\n\n# \ud83d\udda5\ufe0f pycaret intel sklearnex support\nyou can apply [intel optimizations](https://github.com/intel/scikit-learn-intelex) for machine learning algorithms and speed up your workflow. to train models with intel optimizations use `sklearnex` engine. there is no change in the use of the api, however, installation of intel sklearnex is required:\n\n```python\npip install scikit-learn-intelex\n```\n\n# \ud83e\udd1d contributors\n<a href=\"https://github.com/pycaret/pycaret/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=pycaret/pycaret\" width=600/>\n</a>\n\n# \ud83d\udcdd license\npycaret is completely free and open-source and licensed under the [mit](https://github.com/pycaret/pycaret/blob/master/license) license.\n\n# \u2139\ufe0f more information\n\n| important links              |            description                                       |\n| -------------------------- | -------------------------------------------------------------- |\n| :star: **[tutorials]**        | tutorials developed and maintained by core developers       |\n| :clipboard: **[example notebooks]** | example notebooks created by community               |\n| :orange_book: **[blog]** | official blog by creator of pycaret                      |\n| :books: **[documentation]**      | api docs                              |\n| :tv: **[videos]**            | video resources             |\n| \u2708\ufe0f **[cheat sheet]**            | community cheat sheet            |\n| :loudspeaker: **[discussions]**        | community discussion board on github|\n| :hammer_and_wrench: **[release notes]**          | release notes          |\n\n[tutorials]: https://pycaret.gitbook.io/docs/get-started/tutorials\n[example notebooks]: https://github.com/pycaret/examples\n[blog]: https://pycaret.gitbook.io/docs/learn-pycaret/official-blog\n[documentation]: https://pycaret.gitbook.io/docs/\n[videos]: https://pycaret.gitbook.io/docs/learn-pycaret/videos\n[cheat sheet]: https://pycaret.gitbook.io/docs/learn-pycaret/cheat-sheet\n[discussions]: https://github.com/pycaret/pycaret/discussions\n[release notes]: https://github.com/pycaret/pycaret/releases\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pycaret",
  "package_url": "https://pypi.org/project/pycaret/",
  "project_url": "https://pypi.org/project/pycaret/",
  "project_urls": {
    "Homepage": "https://github.com/pycaret/pycaret"
  },
  "release_url": "https://pypi.org/project/pycaret/3.2.0/",
  "requires_dist": [
    "category-encoders (>=2.4.0)",
    "cloudpickle",
    "deprecation (>=2.1.0)",
    "imbalanced-learn (>=0.8.1)",
    "importlib-metadata (>=4.12.0)",
    "ipython (>=5.5.0)",
    "ipywidgets (>=7.6.5)",
    "jinja2 (>=1.2)",
    "joblib (>=1.2.0)",
    "kaleido (>=0.2.1)",
    "lightgbm (>=3.0.0)",
    "markupsafe (>=2.0.1)",
    "matplotlib (<=3.6,>=3.3.0)",
    "nbformat (>=4.2.0)",
    "numba (>=0.55.0)",
    "numpy (<1.27,>=1.21)",
    "pandas (<2.0.0,>=1.3.0)",
    "plotly-resampler (>=0.8.3.1)",
    "plotly (>=5.0.0)",
    "pmdarima (!=1.8.1,<3.0.0,>=1.8.0)",
    "psutil (>=5.9.0)",
    "pyod (>=1.0.8)",
    "requests (>=2.27.1)",
    "schemdraw (==0.15)",
    "scikit-learn (<1.3.0,>=1.0)",
    "scikit-plot (>=0.3.7)",
    "scipy (~=1.10.1)",
    "sktime (!=0.17.1,!=0.17.2,!=0.18.0,<0.22.0,>=0.16.1)",
    "statsmodels (>=0.12.1)",
    "tbats (>=1.1.3)",
    "tqdm (>=4.62.0)",
    "xxhash",
    "yellowbrick (>=1.4)",
    "wurlitzer ; platform_system != \"Windows\"",
    "pickle5 ; python_version < \"3.8\"",
    "Flask (==2.2.3) ; extra == 'analysis'",
    "explainerdashboard (>=0.3.8) ; extra == 'analysis'",
    "fairlearn (==0.7.0) ; extra == 'analysis'",
    "interpret (>=0.2.7) ; extra == 'analysis'",
    "shap (>=0.38.0) ; extra == 'analysis'",
    "umap-learn (>=0.5.2) ; extra == 'analysis'",
    "ydata-profiling (>=4.3.1) ; extra == 'analysis'",
    "Flask (==2.2.3) ; extra == 'full'",
    "Werkzeug (<3.0,>=2.2) ; extra == 'full'",
    "boto3 (>=1.24.56) ; extra == 'full'",
    "dash[testing] ; extra == 'full'",
    "evidently (<0.3,>=0.1.45.dev0) ; extra == 'full'",
    "explainerdashboard (>=0.3.8) ; extra == 'full'",
    "fairlearn (==0.7.0) ; extra == 'full'",
    "fastapi (>=0.75.0) ; extra == 'full'",
    "flask (>=2.0.3) ; extra == 'full'",
    "fugue (>=0.8.0) ; extra == 'full'",
    "fugue[dask] (>=0.8.0) ; extra == 'full'",
    "gradio (>=2.8.10) ; extra == 'full'",
    "hyperopt (>=0.2.7) ; extra == 'full'",
    "interpret (>=0.2.7) ; extra == 'full'",
    "kmodes (>=0.11.1) ; extra == 'full'",
    "m2cgen (>=0.9.0) ; extra == 'full'",
    "mlflow (<2.0.0,>=1.24.0) ; extra == 'full'",
    "mlxtend (>=0.19.0) ; extra == 'full'",
    "moto (>=3.0.7) ; extra == 'full'",
    "optuna (>=3.0.0) ; extra == 'full'",
    "pytest (>=7.0.1) ; extra == 'full'",
    "scikit-optimize (>=0.9.0) ; extra == 'full'",
    "shap (>=0.38.0) ; extra == 'full'",
    "statsforecast (<1.6.0,>=0.5.5) ; extra == 'full'",
    "triad (<=0.9.1) ; extra == 'full'",
    "umap-learn (>=0.5.2) ; extra == 'full'",
    "uvicorn (>=0.17.6) ; extra == 'full'",
    "ydata-profiling (>=4.3.1) ; extra == 'full'",
    "scikit-learn-intelex (>=2023.0.1) ; (platform_machine == \"x86_64\" or platform_machine == \"AMD64\") and extra == 'full'",
    "catboost (>=0.23.2) ; (platform_system != \"Darwin\") and extra == 'full'",
    "catboost (<1.2,>=0.23.2) ; (platform_system == \"Darwin\") and extra == 'full'",
    "ray[tune] (>=1.0.0) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'full'",
    "tune-sklearn (>=0.2.1) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'full'",
    "xgboost (>=1.1.0) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'full'",
    "boto3 (>=1.24.56) ; extra == 'mlops'",
    "evidently (<0.3,>=0.1.45.dev0) ; extra == 'mlops'",
    "fastapi (>=0.75.0) ; extra == 'mlops'",
    "gradio (>=2.8.10) ; extra == 'mlops'",
    "m2cgen (>=0.9.0) ; extra == 'mlops'",
    "mlflow (<2.0.0,>=1.24.0) ; extra == 'mlops'",
    "uvicorn (>=0.17.6) ; extra == 'mlops'",
    "kmodes (>=0.11.1) ; extra == 'models'",
    "mlxtend (>=0.19.0) ; extra == 'models'",
    "statsforecast (<1.6.0,>=0.5.5) ; extra == 'models'",
    "scikit-learn-intelex (>=2023.0.1) ; (platform_machine == \"x86_64\" or platform_machine == \"AMD64\") and extra == 'models'",
    "catboost (>=0.23.2) ; (platform_system != \"Darwin\") and extra == 'models'",
    "catboost (<1.2,>=0.23.2) ; (platform_system == \"Darwin\") and extra == 'models'",
    "xgboost (>=1.1.0) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'models'",
    "Werkzeug (<3.0,>=2.2) ; extra == 'parallel'",
    "flask (>=2.0.3) ; extra == 'parallel'",
    "fugue (>=0.8.0) ; extra == 'parallel'",
    "triad (<=0.9.1) ; extra == 'parallel'",
    "dash[testing] ; extra == 'test'",
    "fugue[dask] (>=0.8.0) ; extra == 'test'",
    "moto (>=3.0.7) ; extra == 'test'",
    "pytest (>=7.0.1) ; extra == 'test'",
    "hyperopt (>=0.2.7) ; extra == 'tuners'",
    "optuna (>=3.0.0) ; extra == 'tuners'",
    "scikit-optimize (>=0.9.0) ; extra == 'tuners'",
    "ray[tune] (>=1.0.0) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'tuners'",
    "tune-sklearn (>=0.2.1) ; (python_version != \"3.11\" or platform_system != \"Windows\") and extra == 'tuners'"
  ],
  "requires_python": ">=3.8",
  "summary": "pycaret - an open source, low-code machine learning library in python.",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "moez.ali@queensu.ca",
    "moez_ali"
  ],
  "kwds": "pycaret python py gitbook pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pycaret",
  "homepage": "https://github.com/pycaret/pycaret",
  "release_count": 95,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_catboost",
    "pypi_category_encoders",
    "pypi_cloudpickle",
    "pypi_dash",
    "pypi_deprecation",
    "pypi_evidently",
    "pypi_explainerdashboard",
    "pypi_fairlearn",
    "pypi_fastapi",
    "pypi_flask",
    "pypi_fugue",
    "pypi_gradio",
    "pypi_hyperopt",
    "pypi_imbalanced_learn",
    "pypi_importlib_metadata",
    "pypi_interpret",
    "pypi_ipython",
    "pypi_ipywidgets",
    "pypi_jinja2",
    "pypi_joblib",
    "pypi_kaleido",
    "pypi_kmodes",
    "pypi_lightgbm",
    "pypi_m2cgen",
    "pypi_markupsafe",
    "pypi_matplotlib",
    "pypi_mlflow",
    "pypi_mlxtend",
    "pypi_moto",
    "pypi_nbformat",
    "pypi_numba",
    "pypi_numpy",
    "pypi_optuna",
    "pypi_pandas",
    "pypi_pickle5",
    "pypi_plotly",
    "pypi_plotly_resampler",
    "pypi_pmdarima",
    "pypi_psutil",
    "pypi_pyod",
    "pypi_pytest",
    "pypi_ray",
    "pypi_requests",
    "pypi_schemdraw",
    "pypi_scikit_learn",
    "pypi_scikit_learn_intelex",
    "pypi_scikit_optimize",
    "pypi_scikit_plot",
    "pypi_scipy",
    "pypi_shap",
    "pypi_sktime",
    "pypi_statsforecast",
    "pypi_statsmodels",
    "pypi_tbats",
    "pypi_tqdm",
    "pypi_triad",
    "pypi_tune_sklearn",
    "pypi_umap_learn",
    "pypi_uvicorn",
    "pypi_werkzeug",
    "pypi_wurlitzer",
    "pypi_xgboost",
    "pypi_xxhash",
    "pypi_ydata_profiling",
    "pypi_yellowbrick"
  ]
}
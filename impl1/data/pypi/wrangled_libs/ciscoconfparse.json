{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: plugins",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "intended audience :: telecommunications industry",
    "license :: osi approved :: gnu general public license (gpl)",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: communications",
    "topic :: internet",
    "topic :: system :: networking",
    "topic :: system :: networking :: monitoring"
  ],
  "description": "# ciscoconfparse\n\n[![git commits][41]][42] [![version][2]][3] [![downloads][6]][7] [![license][8]][9]\n\n[![sonarcloud][51]][52] [![sonarcloud maintainability rating][53]][54] [![sonarcloud lines of code][55]][56] [![sonarcloud bugs][59]][60] [![sonarcloud code smells][57]][58] [![sonarcloud tech debt][61]][62]\n\n[![snyk package health][37]][38]\n\n\n## introduction: what is ciscoconfparse?\n\nshort answer: ciscoconfparse is a [python][10] library\nthat helps you quickly answer questions like these about your\ncisco configurations:\n\n- what interfaces are shutdown?\n- which interfaces are in trunk mode?\n- what address and subnet mask is assigned to each interface?\n- which interfaces are missing a critical command?\n- is this configuration missing a standard config line?\n\nit can help you:\n\n- audit existing router / switch / firewall / wlc configurations\n- modify existing configurations\n- build new configurations\n\nspeaking generally, the library examines an ios-style config and breaks\nit into a set of linked parent / child relationships. you can perform\ncomplex queries about these relationships.\n\n[![cisco ios config: parent / child][11]][11]\n\n## generic usage\n\nthe following code will parse a configuration stored in\n`exampleswitch.conf` and select interfaces that are shutdown.\n\nin this case, the parent is a line containing `interface` and\nthe child is a line containing the word `shutdown`.\n\n```python\nfrom ciscoconfparse import ciscoconfparse\n\nparse = ciscoconfparse('exampleswitch.conf', syntax='ios')\n\nfor intf_obj in parse.find_parent_objects('^interface', '^\\s+shutdown'):\n    print(\"shutdown: \" + intf_obj.text)\n```\n\nthe next example will find the ip address assigned to interfaces.\n\n```python\nfrom ciscoconfparse import ciscoconfparse\n\nparse = ciscoconfparse('exampleswitch.conf', syntax='ios')\n\nfor ccp_obj in parse.find_objects('^interface'):\n\n    intf_name = ccp_obj.re_match_typed('^interface\\s+(\\s.+?)$')\n\n    # search children of all interfaces for a regex match and return\n    # the value matched in regex match group 1.  if there is no match,\n    # return a default value: ''\n    intf_ip_addr = ccp_obj.re_match_iter_typed(\n        r'ip\\saddress\\s(\\d+\\.\\d+\\.\\d+\\.\\d+)\\s', result_type=str,\n        group=1, default='')\n    print(f\"{intf_name}: {intf_ip_addr}\")\n```\n\n## cisco ios factory usage\n\nciscoconfparse has a special feature that abstracts common ios / nxos / asa / iosxr fields; at this time, it is only supported on those configuration types. you will see factory parsing in ciscoconfparse code as parsing the configuration with `factory=true`.  a fraction of these pre-parsed cisco ios fields follows; some variables are not used below, but simply called out for quick reference.\n\n```python\nfrom ciscoconfparse import ipv4obj, ipv6obj\nfrom ciscoconfparse import ciscoconfparse\n\n##############################################################################\n# parse an example cisco ios hsrp configuration from:\n#     tests/fixtures/configs/sample_08.ios\n#\n# !\n# interface fastethernet0/0\n#  ip address 172.16.2.1 255.255.255.0\n#  ipv6 dhcp server ipv6_2fl_north_lan\n#  ipv6 address fd01:ab00::/64 eui-64\n#  ipv6 address fe80::1 link-local\n#  ipv6 enable\n#  ipv6 ospf 11 area 0\n#  standby 110 ip 172.16.2.254\n#  standby 110 ipv6 autoconfig\n#  standby 110 priority 150\n#  standby 110 preempt delay minimum 15\n#  standby 110 track dialer1 75\n#  standby 110 track fastethernet 0/1\n#  standby 110 track fastethernet1/0 30\n#  standby 111 ip 172.16.2.253\n#  standby 111 priority 150\n#  standby 111 preempt delay minimum 15\n#  standby 111 track dialer1 50\n#\n##############################################################################\nparse = ciscoconfparse('tests/fixtures/configs/sample_08.ios', syntax='ios', factory=true)\nfor ccp_obj in parse.find_objects('^interface'):\n\n    # skip if there are no hsrpinterfacegroup() instances...\n    if len(ccp_obj.hsrp_interfaces) == 0:\n        continue\n\n    # interface name, such as 'fastethernet0/0'\n    intf_name = ccp_obj.name\n\n    # interface description\n    intf_description = ccp_obj.description\n\n    # ipv4obj\n    intf_v4obj = ccp_obj.ipv4_addr_object\n\n    # ipv4 address object: ipaddress.ipv4address()\n    intf_v4addr = ccp_obj.ipv4_addr_object.ip\n\n    # ipv4 netmask object: ipaddress.ipv4address()\n    intf_v4masklength = ccp_obj.ipv4_addr_object.masklength\n\n    # set() of ipv4 secondary address/prefixlen strings\n    intf_v4secondary_networks = ccp_obj.ip_secondary_networks\n\n    # set() of ipv4 secondary address strings\n    intf_v4secondary_addresses = ccp_obj.ip_secondary_addresses\n\n    # list of hsrp ipv4 addrs from the ciscoconfpasre/models_cisco.py hsrpinterfacegroup()\n    intf_hsrp_addresses = [hsrp_grp.ip for hsrp_grp in ccp_obj.hsrp_interfaces]\n\n    # a bool for using hsrp bia mac-address...\n    intf_hsrp_usebia = any([ii.use_bia for ii in ccp_obj.hsrp_interfaces])\n\n    ##########################################################################\n    # print a simple interface summary\n    ##########################################################################\n    print(\"----\")\n    print(f\"interface {ccp_obj.interface_object.name}: {intf_v4addr}/{intf_v4masklength}\")\n    print(f\"  interface {intf_name} description: {intf_description}\")\n\n    ##########################################################################\n    # print hsrp group interface tracking information\n    ##########################################################################\n    print(\"\")\n    print(f\"  hsrp tracking for {set([ii.interface_name for ii in ccp_obj.hsrp_interfaces])}\")\n    for hsrp_intf_group in ccp_obj.hsrp_interfaces:\n        group = hsrp_intf_group.hsrp_group\n        # hsrp_intf_group.interface_tracking is a list of dictionaries\n        if len(hsrp_intf_group.interface_tracking) > 0:\n            print(f\"  --- hsrp group {group} ---\")\n            for track_intf in hsrp_intf_group.interface_tracking:\n                print(f\"    --- tracking {track_intf.interface} ---\")\n                print(f\"    tracking interface: {track_intf.interface}\")\n                print(f\"    tracking decrement: {track_intf.decrement}\")\n                print(f\"    tracking weighting: {track_intf.weighting}\")\n\n\n    ##########################################################################\n    # break out inidividual interface name components\n    #   example: 'serial3/4/5.6:7 multipoint'\n    ##########################################################################\n    # the base ciscoconfparse/ccp_util.py ciscointerface() instance\n    intf_cisco_interface = ccp_obj.interface_object\n    # the ciscoconfparse/ccp_util.py ciscointerface() name, 'serial3/4/5.6:7 multipoint'\n    intf_name = ccp_obj.interface_object.name\n    # the ciscoconfparse/ccp_util.py ciscointerface() prefix, 'serial'\n    intf_prefix = ccp_obj.interface_object.prefix\n    # the ciscoconfparse/ccp_util.py ciscointerface() digit separator, '/'\n    digit_separator = ccp_obj.interface_object.digit_separator or \"\"\n    # the ciscoconfparse/ccp_util.py ciscointerface() slot, 3\n    intf_slot = ccp_obj.interface_object.slot or \"\"\n    # the ciscoconfparse/ccp_util.py ciscointerface() card, 4\n    intf_card = ccp_obj.interface_object.card or \"\"\n    # the ciscoconfparse/ccp_util.py ciscointerface() card, 5\n    intf_port = ccp_obj.interface_object.port\n    # the ciscoconfparse/ccp_util.py ciscointerface() subinterface, 6\n    intf_subinterface = ccp_obj.interface_object.subinterface or \"\"\n    # the ciscoconfparse/ccp_util.py ciscointerface() channel, 7\n    intf_channel = ccp_obj.interface_object.channel or \"\"\n    # the ciscoconfparse/ccp_util.py ciscointerface() interface_class, 'multipoint'\n    intf_class = ccp_obj.interface_object.interface_class or \"\"\n\n    ##########################################################################\n    # extract all ipv4obj() with re_match_iter_typed()\n    ##########################################################################\n    _default = none\n    for _obj in ccp_obj.children:\n        # get a dict() from re_match_iter_typed() by caling it with 'groupdict'\n        intf_dict = _obj.re_match_iter_typed(\n            # add a regex match-group called 'v4addr'\n            r\"ip\\s+address\\s+(?p<v4addr>\\s.+?\\d)\\s*(?p<secondary>secondary)*$\",\n            # cast the v4addr regex match group as an ipv4obj() type\n            groupdict={\"v4addr\": ipv4obj, \"secondary\": str},\n            # default to none if there is no regex match\n            default=_default,\n        )\n        intf_ipv4obj = intf_dict[\"v4addr\"]\n\n    ##########################################################################\n    # extract all ipv6obj() with re_match_iter_typed()\n    ##########################################################################\n    _default = none\n    for _obj in ccp_obj.children:\n        # get a dict() from re_match_iter_typed() by caling it with 'groupdict'\n        intf_dict = _obj.re_match_iter_typed(\n            # add regex match-groups called 'v6addr' and an optional 'ipv6type'\n            r\"ipv6\\s+address\\s+(?p<v6addr>\\s.+?\\d)\\s*(?p<v6type>eui.64|link.local)*$\",\n            # cast the v6addr regex match group as an ipv6obj() type\n            groupdict={\"v6addr\": ipv6obj, \"v6type\": str},\n            # default to none if there is no regex match\n            default=_default,\n        )\n        intf_ipv6obj = intf_dict[\"v6addr\"]\n        intf_ipv6type = intf_dict[\"v6type\"]\n        # skip this object if it has no ipv6 address\n        if intf_ipv6obj is _default:\n            continue\n```\n\nwhen that is run, you will see information similar to this...\n\n```\n----\ninterface fastethernet0/0: 172.16.2.1/24\n  interface fastethernet0/0 description: [ipv4 and ipv6 desktop / laptop hosts on 2nd-floor north lan]\n\n  hsrp group tracking for {'fastethernet0/0'}\n  --- hsrp group 110 ---\n    --- tracking dialer1 ---\n    tracking interface: dialer1\n    tracking decrement: 75\n    tracking weighting: none\n    --- tracking fastethernet 0/1 ---\n    tracking interface: fastethernet 0/1\n    tracking decrement: 10\n    tracking weighting: none\n    --- tracking fastethernet1/0 ---\n    tracking interface: fastethernet1/0\n    tracking decrement: 30\n    tracking weighting: none\n  --- hsrp group 111 ---\n    --- tracking dialer1 ---\n    tracking interface: dialer1\n    tracking decrement: 50\n    tracking weighting: none\ngrp {'addr': <ipv6obj fd01:ab00::/64>}\nresult <iosintfline # 231 'fastethernet0/0' primary_ipv4: '172.16.2.1/24'> <ipv6obj fd01:ab00::/64>\n```\n\n\n## are there private copies of ciscoconfparse()?\n\nyes.  [cisco systems][27] maintains their own copy of `ciscoconfparse()`. the terms of the gplv3\nlicense allow this as long as they don't distribute their modified private copy in\nbinary form.  also refer to this [gplv3 license primer / gplv3 101][45].  officially, [modified\ncopies of ciscoconfparse source-code must also be licensed as gplv3][45].\n\ndear [cisco systems][27]: please consider porting your improvements back into\nthe [`github ciscoconfparse repo`](https://github.com/mpenning/ciscoconfparse).\n\n## are you releasing licensing besides gplv3?\n\n[i will not](https://github.com/mpenning/ciscoconfparse/issues/270#issuecomment-1774035592); however, you can take the solution cisco does above as long as you comply with the gplv3 terms.  if it's truly a problem for your company, there are commercial solutions available (to include purchasing the project, or hiring me).\n\n## what if we don\\'t use cisco ios?\n\ndon\\'t let that stop you.\n\nas of ciscoconfparse 1.2.4, you can parse [brace-delimited configurations][13] into a cisco ios style (see [github issue \\#17][14]), which means that ciscoconfparse can parse these configurations:\n\n- juniper networks junos\n- palo alto networks firewall configurations\n- f5 networks configurations\n\nciscoconfparse also handles anything that has a cisco ios style of configuration, which includes:\n\n- cisco ios, cisco nexus, cisco ios-xr, cisco ios-xe, aironet os, cisco asa, cisco catos\n- arista eos\n- brocade\n- hp switches\n- force 10 switches\n- dell powerconnect switches\n- extreme networks\n- enterasys\n- screenos\n\n## docs\n\n- blogs\n  - kirk byers published [a ciscoconfparse blog piece](https://pynet.twb-tech.com/blog/parsing-configurations-w-ciscoconfparse.html)\n  - henry \u00f6lsner published [a ciscoconfparse blog piece](https://codingnetworker.com/2016/06/parse-cisco-ios-configuration-ciscoconfparse/)\n- the latest copy of the docs are [archived on the web][15]\n- there is also a [ciscoconfparse tutorial][16]\n\n## installation and downloads\n\n-   use `poetry` for python3.x\\... :\n\n        python -m pip install ciscoconfparse\n\nif you\\'re interested in the source, you can always pull from the [github repo][17]:\n\n- download from [the github repo][17]: :\n\n        git clone git://github.com/mpenning/ciscoconfparse\n        cd ciscoconfparse/\n        python -m pip install .\n\n## github star history\n\n[![github star history chart][40]][40]\n\n## what is the pythonic way of handling script credentials?\n\n1. never hard-code credentials\n2. use [python-dotenv](https://github.com/theskumar/python-dotenv)\n\n\n## is this a tool, or is it artwork?\n\nthat depends on who you ask.  many companies use ciscoconfparse as part of their\nnetwork engineering toolbox; others regard it as a form of artwork.\n\n## pre-requisites\n\n[the ciscoconfparse python package][3] requires python versions 3.7+ (note: python version 3.7.0 has a bug - ref [github issue \\#117][18], but version 3.7.1 works); the os should not matter.\n\n\n## other resources\n\n- [dive into python3](http://www.diveintopython3.net/) is a good way to learn python\n- [team cymru][30] has a [secure ios template][29], which is especially useful for external-facing routers / switches\n- [cisco\\'s guide to hardening ios devices][31]\n- [center for internet security benchmarks][32] (an email address, cookies, and javascript are required)\n\n## bug tracker and support\n\n- please report any suggestions, bug reports, or annoyances with a [github bug report][24].\n- if you\\'re having problems with general python issues, consider searching for a solution on [stack overflow][33].  if you can\\'t find a solution for your problem or need more help, you can [ask on stack overflow][34] or [reddit/r/python][39].\n- if you\\'re having problems with your cisco devices, you can contact:\n  - [cisco tac][28]\n  - [reddit/r/cisco][35]\n  - [reddit/r/networking][36]\n  - [networkengineering.se][23]\n\n## dependencies\n\n- [python 3](https://python.org/)\n- [passlib](https://github.com/glic3rinu/passlib)\n- [toml](https://github.com/uiri/toml)\n- [dnspython](https://github.com/rthalley/dnspython)\n- [loguru](https://github.com/delgan/loguru)\n- [deprecated](https://github.com/tantale/deprecated)\n\n\n## unit-tests and development\n\n- we are manually disabling some [sonarcloud](https://sonarcloud.io/) alerts with:\n  - `#pragma warning disable s1313`\n  - `#pragma warning restore s1313`\n  - where `s1313` is a false-positive that [sonarcloud](https://sonarcloud.io) flags in [ciscoconfparse](https://github.com/mpenning/ciscoconfparse/).\n  - those `#pragma warning` lines should be carefully-fenced to ensure that we don't disable a [sonarcloud](https://sonarcloud.io/) alert that is useful.\n\n### semantic versioning and conventional commits\n\n- at this point, [ciscoconfparse][3] does not adhere to [semantic versioning][49]\n- although we added [commitizen][48] as a dev dependency, we are not enforcing commit rules (such as [conventional commits][50]) yet.\n\n### execute unit tests\n\nthe project\\'s [test workflow][1] checks ciscoconfparse on python versions 3.7 and higher, as well as a [pypy jit][22] executable.\n\nif you already git cloned the repo and want to manually run tests either run with `make test` from the base directory, or manually run with [`pytest`][63] in a unix-like system...\n\n```shell\n$ cd tests\n$ pytest -vvs ./test_*py\n...\n```\n\n### execute miss report\n\nif you already have have `pytest` and `pytest-cov` installed, run a test line miss report as shown below.\n\n```shell\n$ cd tests\n$ pytest --cov-report=term-missing --cov=ciscoconfparse ./\n...\n```\n\n\n## editing the package\n\nthis uses the example of editing the package on a git branch called `develop`...\n\n-   `git clone https://github.com/mpenning/ciscoconfparse`\n-   `cd ciscoconfparse`\n-   `git branch develop`\n-   `git checkout develop`\n-   add / modify / delete on the `develop` branch\n-   `make test`\n-   if tests run clean, `git commit` all the pending changes on the `develop` branch\n-   if you plan to publish this as an official version rev, edit the version number in [pyproject.toml][12].  in the future, we want to integrate `commitizen` to manage versioning.\n-   `git checkout main`\n-   `git merge develop`\n-   `make test`\n-   `git push origin main`\n-   `make pypi`\n\n## sphinx documentation\n\nbuilding the ciscoconfparse documentation tarball comes down to this one wierd trick:\n\n- `cd sphinx-doc/`\n- `pip install -r ./requirements.txt;  # install sphinx dependencies`\n- `pip install -r ../requirements.txt; # install ccp dependencies`\n- `make html`\n\n## license and copyright\n\n[ciscoconfparse][3] is licensed [gplv3][21]\n\n- copyright (c) 2022-2023 david michael pennington\n- copyright (c) 2022 david michael pennington at wellsky\n- copyright (c) 2022 david michael pennington\n- copyright (c) 2019-2021 david michael pennington at cisco systems / thousandeyes\n- copyright (c) 2012-2019 david michael pennington at samsung data services\n- copyright (c) 2011-2012 david michael pennington at dell computer corp\n- copyright (c) 2007-2011 david michael pennington\n\nthe word \\\"cisco\\\" is a registered trademark of [cisco systems][27].\n\n## author\n\n[ciscoconfparse][3] was written by [david michael pennington][25] (mike \\[\\~at\\~\\] pennington \\[.dot.\\] net).\n\n## interesting users (and some downstream projects)\n\nthe following are featured [ciscoconfparse](https://github.com/mpenning/ciscoconfparse/) users / projects:\n\n- [salt](https://github.com/saltstack/salt)\n- [suzieq](https://github.com/netenglabs/suzieq):  suzieq collects, normalizes, and stores timestamped data that is otherwise only available to engineers by logging into each device, providing a rich data lake that can be queried and leveraged for next generation monitoring and alerting\n- [netwalk](https://github.com/icovada/netwalk): python library to discover, parse, analyze and change cisco switched networks\n- [netlint](https://github.com/kircheneer/netlint)\n- [cisco_switchport_auditor](https://github.com/corvese/cisco_switchport_auditor): parses cisco switch configuration into switch & interface objects to access configuration details of the aforementioned in a programatic manner. works with ssh, restconf, or with running/start-up config files.\n- [nipper-ng](https://github.com/arpitn30/nipper-ng): a network security analyzer\n- [pynipper-ng](https://github.com/syn-4ck/pynipper-ng): a network security analyzer\n- [build_fabric](https://github.com/sjhloco/build_fabric): build a declarative cisco nxos leaf and spine fabric using ansible\n- [junos-ansible](https://github.com/yzguy/junos-ansible)\n- [faddr](https://github.com/kido5217/faddr)\n- [netopsnornir](https://github.com/wangcongxing/netopsnornir/)\n- [adala](https://github.com/blindhog/adala): extract useful information about your cisco network\n- [xlina](https://github.com/blindhog/xlina):\n  - organize_acls.py: extract and organize access-list configurations and organizes associated objects and object-groups.\n  - organize_anyconnect.py: extract and organize anyconnect profiles and associated group policies, auth servers, access-lists, etc\n  - organize_static_nats.py: extract and organize static nat configurations and associated objects and object-groups\n  - organize_auto_nat.py: extract and organize auto nat configurations with associated objects\n  - organize_crypto_maps.py: extract and organize crypto map configurations and associated access-lists, transform-sets, tunnel-groups, etc\n- [catalyst_2_meraki_config_checker](https://github.com/fadysharobeem/catalyst_2_meraki_config_checker): check the cisco catalyst configuration text file and verify if they are supported by the meraki ms platform.\n- [parse_nxos_config](https://github.com/ocptech/parse_nxos_config): generates an excel file with the information gathered from running-config file from cisco nxos\n- [nornir3_cdp_map](https://github.com/nouse4it/nornir3_cdp_map): set interface descriptions by looking at the hostname of its cdp neighbor\n- [devicebanner](https://github.com/labeveryday/devicebanner/): update the banner message of the day on network devices\n- [iosconfigslicer](https://github.com/imanassypov/iosconfigslicer): simple script to slice cisco configuration file, and replicate sections of the config via ssh to another device\n- [ciscocfg](https://github.com/mareel-io/ciscocfg): a simple rpcd for ciscoconfparse\n- [confparser](https://github.com/yshornikov/confparser/): ssh with paramiko, and dump information about your configs into sqllite3 / excel\n- [parse_config](https://github.com/sergey-link/parse_config/): dump information about your vlans / vrfs to excel\n- finally, _[cisco systems](https://cisco.com/) product engineering and advanced services_\n\n## other useful network management projects\n\n- [netbox](https://github.com/netbox-community/netbox/): netbox is the source of truth for everything on your network, from physical components like power systems and cabling to virtual assets like ip addresses and vlans\n  - [ntc-netbox-plugin-onboarding](https://github.com/networktocode/ntc-netbox-plugin-onboarding): a plugin for netbox to easily onboard new devices.\n- [nautobot](https://github.com/nautobot/nautobot): network source of truth & network automation platform.\n- [nornir](https://github.com/nornir-automation/nornir): network automation via plugins - a pluggable multi-threaded framework with inventory management to help operate collections of devices\n- [network-importer](https://github.com/networktocode/network-importer/): the network importer is a tool/library to analyze and/or synchronize an existing network with a network source of truth (sot), it's designed to be idempotent and by default it's only showing the difference between the running network and the remote sot.\n- [nuts](https://github.com/network-unit-testing-system/nuts): nuts defines a desired network state and checks it against a real network using pytest and nornir.\n- [jerikan](https://vincent.bernat.ch/en/blog/2021-network-jerikan-ansible):\n- [nettowel](https://github.com/infrastructureascode-ch/nettowel/): collection of useful network automation functions\n- [napalm-panos](https://github.com/napalm-automation-community/napalm-panos)\n- [tacquito](https://github.com/facebookincubator/tacquito/): a go tacacs+ implementation\n- [assessment-cmds](https://github.com/blindhog/assessment-cmds/): useful show commands to check your cisco router's health\n- [learn-to-cloud](https://github.com/labeveryday/learn-to-cloud): primer for cloud-computing fundamentals\n\n\n\n  [1]: https://github.com/mpenning/ciscoconfparse/blob/main/.github/workflows/tests.yml\n  [2]: https://img.shields.io/pypi/v/ciscoconfparse.svg\n  [3]: https://pypi.python.org/pypi/ciscoconfparse/\n  [4]: https://github.com/mpenning/ciscoconfparse/actions/workflows/tests.yml/badge.svg\n  [5]: https://github.com/mpenning/ciscoconfparse/actions/workflows/tests.yml\n  [6]: https://pepy.tech/badge/ciscoconfparse\n  [7]: https://pepy.tech/project/ciscoconfparse\n  [8]: http://img.shields.io/badge/license-gplv3-blue.svg\n  [9]: https://www.gnu.org/copyleft/gpl.html\n  [10]: https://www.python.org\n  [11]: https://raw.githubusercontent.com/mpenning/ciscoconfparse/master/sphinx-doc/_static/ciscoconfparse_overview_75pct.png\n  [12]: https://github.com/mpenning/ciscoconfparse/blob/main/pyproject.toml\n  [13]: https://github.com/mpenning/ciscoconfparse/blob/master/configs/sample_01.junos\n  [14]: https://github.com/mpenning/ciscoconfparse/issues/17\n  [15]: http://www.pennington.net/py/ciscoconfparse/\n  [16]: http://pennington.net/tutorial/ciscoconfparse/ccp_tutorial.html\n  [17]: https://github.com/mpenning/ciscoconfparse\n  [18]: https://github.com/mpenning/ciscoconfparse/issues/117\n  [19]: https://github.com/mpenning/ciscoconfparse/issues/13\n  [20]: https://github.com/crackerjackmack/\n  [21]: http://www.gnu.org/licenses/gpl-3.0.html\n  [22]: https://pypy.org\n  [23]: https://networkengineering.stackexchange.com/\n  [24]: https://github.com/mpenning/ciscoconfparse/issues/new/choose\n  [25]: https://github.com/mpenning\n  [26]: https://github.com/muir\n  [27]: https://www.cisco.com/\n  [28]: https://www.cisco.com/go/support\n  [29]: https://www.cymru.com/documents/secure-ios-template.html\n  [30]: https://team-cymru.com/company/\n  [31]: http://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html\n  [32]: https://learn.cisecurity.org/benchmarks\n  [33]: https://stackoverflow.com\n  [34]: http://stackoverflow.com/questions/ask\n  [35]: https://www.reddit.com/r/cisco/\n  [36]: https://www.reddit.com/r/networking\n  [37]: https://snyk.io/advisor/python/ciscoconfparse/badge.svg\n  [38]: https://snyk.io/advisor/python/ciscoconfparse\n  [39]: https://www.reddit.com/r/python/\n  [40]: https://api.star-history.com/svg?repos=mpenning/ciscoconfparse&type=date\n  [41]: https://img.shields.io/github/commit-activity/m/mpenning/ciscoconfparse\n  [42]: https://img.shields.io/github/commit-activity/m/mpenning/ciscoconfparse\n  [43]: https://www.codefactor.io/content/badges/b.svg\n  [44]: https://www.codefactor.io/repository/github/mpenning/ciscoconfparse/\n  [45]: https://fossa.com/blog/open-source-software-licenses-101-gpl-v3/\n  [46]: https://app.codacy.com/project/badge/grade/4774ebb0292d4e1d9dc30bf263d9df14\n  [47]: https://app.codacy.com/gh/mpenning/ciscoconfparse/dashboard\n  [48]: https://commitizen-tools.github.io/commitizen/\n  [49]: https://semver.org/\n  [50]: https://www.conventionalcommits.org/en/v1.0.0/\n  [51]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=alert_status\n  [52]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [53]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=sqale_rating\n  [54]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [55]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=ncloc\n  [56]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [57]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=code_smells\n  [58]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [59]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=bugs\n  [60]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [61]: https://sonarcloud.io/api/project_badges/measure?project=mpenning_ciscoconfparse&metric=sqale_index\n  [62]: https://sonarcloud.io/summary/new_code?id=mpenning_ciscoconfparse\n  [63]: https://docs.pytest.org/en/\n\n",
  "docs_url": null,
  "keywords": "parse,audit,query,modify,cisco ios,cisco,nxos,asa,juniper",
  "license": "gpl-3.0-only",
  "name": "ciscoconfparse",
  "package_url": "https://pypi.org/project/ciscoconfparse/",
  "project_url": "https://pypi.org/project/ciscoconfparse/",
  "project_urls": {
    "documentation": "http://www.pennington.net/py/ciscoconfparse/",
    "homepage": "http://www.pennington.net/py/ciscoconfparse/",
    "repository": "https://github.com/mpenning/ciscoconfparse",
    "source": "https://github.com/mpenning/ciscoconfparse"
  },
  "release_url": "https://pypi.org/project/ciscoconfparse/1.9.41/",
  "requires_dist": [
    "deprecated (>=1.2.14)",
    "dnspython (>=2.4.2,<3.0.0)",
    "hier_config (>=2.2.2)",
    "loguru (==0.7.2)",
    "passlib (>=1.7.4,<2.0.0)",
    "toml (>=0.10.2)"
  ],
  "requires_python": ">=3.8,<4.0.0",
  "summary": "parse, audit, query, build, and modify cisco ios-style and junos-style configs",
  "version": "1.9.41",
  "releases": [],
  "developers": [
    "mike@pennington.net",
    "mike_pennington"
  ],
  "kwds": "ciscoconfparse ciscoconfparse_overview_75pct ciscocfg cisco ciscoconfpasre",
  "license_kwds": "gpl-3.0-only",
  "libtype": "pypi",
  "id": "pypi_ciscoconfparse",
  "homepage": "",
  "release_count": 334,
  "dependency_ids": [
    "pypi_deprecated",
    "pypi_dnspython",
    "pypi_hier_config",
    "pypi_loguru",
    "pypi_passlib",
    "pypi_toml"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "lib_detect_testenv\n==================\n\n\nversion v2.0.8 as of 2023-07-14 see `changelog`_\n\n|build_badge| |codeql| |license| |jupyter| |pypi|\n|pypi-downloads| |black| |codecov| |cc_maintain| |cc_issues| |cc_coverage| |snyk|\n\n\n\n.. |build_badge| image:: https://github.com/bitranox/lib_detect_testenv/actions/workflows/python-package.yml/badge.svg\n   :target: https://github.com/bitranox/lib_detect_testenv/actions/workflows/python-package.yml\n\n\n.. |codeql| image:: https://github.com/bitranox/lib_detect_testenv/actions/workflows/codeql-analysis.yml/badge.svg?event=push\n   :target: https://github.com//bitranox/lib_detect_testenv/actions/workflows/codeql-analysis.yml\n\n.. |license| image:: https://img.shields.io/github/license/webcomics/pywine.svg\n   :target: http://en.wikipedia.org/wiki/mit_license\n\n.. |jupyter| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/bitranox/lib_detect_testenv/master?filepath=lib_detect_testenv.ipynb\n\n.. for the pypi status link note the dashes, not the underscore !\n.. |pypi| image:: https://img.shields.io/pypi/status/lib-detect-testenv?label=pypi%20package\n   :target: https://badge.fury.io/py/lib_detect_testenv\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/bitranox/lib_detect_testenv\n   :target: https://codecov.io/gh/bitranox/lib_detect_testenv\n\n.. |cc_maintain| image:: https://img.shields.io/codeclimate/maintainability-percentage/bitranox/lib_detect_testenv?label=cc%20maintainability\n   :target: https://codeclimate.com/github/bitranox/lib_detect_testenv/maintainability\n   :alt: maintainability\n\n.. |cc_issues| image:: https://img.shields.io/codeclimate/issues/bitranox/lib_detect_testenv?label=cc%20issues\n   :target: https://codeclimate.com/github/bitranox/lib_detect_testenv/maintainability\n   :alt: maintainability\n\n.. |cc_coverage| image:: https://img.shields.io/codeclimate/coverage/bitranox/lib_detect_testenv?label=cc%20coverage\n   :target: https://codeclimate.com/github/bitranox/lib_detect_testenv/test_coverage\n   :alt: code coverage\n\n.. |snyk| image:: https://snyk.io/test/github/bitranox/lib_detect_testenv/badge.svg\n   :target: https://snyk.io/test/github/bitranox/lib_detect_testenv\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/lib-detect-testenv\n   :target: https://pypi.org/project/lib-detect-testenv/\n   :alt: pypi - downloads\n\ndetects test environments: pytest, doctest and pycharm docrunner\n\n----\n\nautomated tests, github actions, documentation, badges, etc. are managed with `pizzacutter <https://github\n.com/bitranox/pizzacutter>`_ (cookiecutter on steroids)\n\npython version required: 3.8.0 or newer\n\ntested on recent linux with python 3.8, 3.9, 3.10, 3.11, 3.12-dev, pypy-3.9, pypy-3.10 - architectures: amd64\n\n`100% code coverage <https://codeclimate.com/github/bitranox/lib_detect_testenv/test_coverage>`_, flake8 style checking ,mypy static type checking ,tested under `linux, macos, windows <https://github.com/bitranox/lib_detect_testenv/actions/workflows/python-package.yml>`_, automatic daily builds and monitoring\n\n----\n\n- `try it online`_\n- `usage`_\n- `usage from commandline`_\n- `installation and upgrade`_\n- `requirements`_\n- `acknowledgements`_\n- `contribute`_\n- `report issues <https://github.com/bitranox/lib_detect_testenv/blob/master/issue_template.md>`_\n- `pull request <https://github.com/bitranox/lib_detect_testenv/blob/master/pull_request_template.md>`_\n- `code of conduct <https://github.com/bitranox/lib_detect_testenv/blob/master/code_of_conduct.md>`_\n- `license`_\n- `changelog`_\n\n----\n\ntry it online\n-------------\n\nyou might try it right away in jupyter notebook by using the \"launch binder\" badge, or click `here <https://mybinder.org/v2/gh/{{rst_include.\nrepository_slug}}/master?filepath=lib_detect_testenv.ipynb>`_\n\nusage\n-----------\n\n- detect if test environment is active\n\n.. code-block:: python\n\n    def is_testenv_active(arg_string: optional[str] = none) -> bool:\n        \"\"\"\n        returns true if test environment is detected (\"pytest\", \"doctest\", \"setup.py test\")\n\n\n        parameter\n        ----------\n        arg_string  : optional, if none : str(sys.argv())\n\n\n        result\n        ----------\n        true if test environment is detected\n\n\n        exceptions\n        ----------\n        none\n\n\n        examples\n        ----------\n\n        >>> assert is_testenv_active() == true\n        \"\"\"\n\n- detect if doctest is active\n\n.. code-block:: python\n\n    def is_doctest_active(arg_string: optional[str] = none) -> bool:\n        \"\"\"\n        returns true if pycharm \"docrunner.py\" or \"doctest.py\" is detected\n\n\n        parameter\n        ----------\n        arg_string  : optional, if none : str(sys.argv())\n\n\n        result\n        ----------\n        true if docrunner is detected\n\n\n        exceptions\n        ----------\n        none\n\n        >>> assert false == is_doctest_active(arg_string=\"\")\n        >>> assert true == is_doctest_active(arg_string=\"docrunner.py\")\n        >>> assert true == is_doctest_active(arg_string=\"doctest.py\")\n\n        \"\"\"\n\n- detect if pytest is active\n\n.. code-block:: python\n\n    def is_pytest_active(arg_string: optional[str] = none) -> bool:\n        \"\"\"\n        returns true if \"pytest\" is detected\n\n\n        parameter\n        ----------\n        arg_string  : optional, if none : str(sys.argv())\n\n\n        result\n        ----------\n        true if pytest is detected\n\n\n        exceptions\n        ----------\n        none\n\n        >>> assert true == is_pytest_active(arg_string='pytest.py')\n        >>> assert true == is_pytest_active(arg_string='/pytest/__main__.py')\n\n        \"\"\"\n\n- detect if setup.py is active\n\n.. code-block:: python\n\n    def is_setup_active(arg_string: optional[str] = none) -> bool:\n        \"\"\"\n        returns true if \"setup.py\" is detected\n\n\n        parameter\n        ----------\n        arg_string  : optional, if none : str(sys.argv())\n\n\n        result\n        ----------\n        true if setup.py is detected\n\n\n        exceptions\n        ----------\n        none\n\n        >>> assert false == is_setup_active(arg_string=\"\")\n        >>> assert true == is_setup_active(arg_string=\"setup.py\")\n\n        \"\"\"\n\n- detect if \"setup.py test\" is active\n\n.. code-block:: python\n\n    def is_setup_test_active(arg_string: optional[str] = none) -> bool:\n        \"\"\"\n        returns true if \"setup.py test\" is detected\n\n\n        parameter\n        ----------\n        arg_string  : optional, if none : str(sys.argv())\n\n\n        result\n        ----------\n        true if \"setup.py test\" is detected\n\n\n        exceptions\n        ----------\n        none\n\n        >>> assert false == is_setup_test_active('')\n        >>> assert false == is_setup_test_active('setup.py')\n        >>> assert true == is_setup_test_active('setup.py test')\n\n        \"\"\"\n\n- add a path to the syspath\n\n.. code-block:: python\n\n    def add_path_to_syspath(path_to_append: pathlikeorstring) -> none:\n        \"\"\"\n        adds a path to the syspath\n\n        parameter\n        ----------\n        path_to_append\n            the path to append - will be resolved by this function and added to syspath\n            if path_to_append is a file, its parent directory will be added.\n\n\n        result\n        ----------\n        none\n\n\n        exceptions\n        ----------\n        none\n\n\n        examples\n        ----------\n\n        >>> add_path_to_syspath(pathlib.path(__file__).parent)\n        >>> path1 = str(sys.path)\n        >>> add_path_to_syspath(pathlib.path(__file__))\n        >>> path2 = str(sys.path)\n        >>> assert path1 == path2\n        \"\"\"\n\n- put this in your `__init__.py` to automatically add the package directory to the syspath if the test environment is active.\n  this is useful for local testing of packages.\n\n.. code-block:: python\n\n    # __init__.py :\n    # this should be your first import in __init__\n    from lib_detect_testenv import *\n    if is_testenv_active():\n        add_path_to_syspath(__file__)\n\nusage from commandline\n------------------------\n\nthere are no cli commands\n\ninstallation and upgrade\n------------------------\n\n- before you start, its highly recommended to update pip and setup tools:\n\n\n.. code-block::\n\n    python -m pip --upgrade pip\n    python -m pip --upgrade setuptools\n\n- to install the latest release from pypi via pip (recommended):\n\n.. code-block::\n\n    python -m pip install --upgrade lib_detect_testenv\n\n\n- to install the latest release from pypi via pip, including test dependencies:\n\n.. code-block::\n\n    python -m pip install --upgrade lib_detect_testenv[test]\n\n- to install the latest version from github via pip:\n\n\n.. code-block::\n\n    python -m pip install --upgrade git+https://github.com/bitranox/lib_detect_testenv.git\n\n\n- include it into your requirements.txt:\n\n.. code-block::\n\n    # insert following line in your requirements.txt:\n    # for the latest release on pypi:\n    lib_detect_testenv\n\n    # for the latest development version :\n    lib_detect_testenv @ git+https://github.com/bitranox/lib_detect_testenv.git\n\n    # to install and upgrade all modules mentioned in requirements.txt:\n    python -m pip install --upgrade -r /<path>/requirements.txt\n\n\n- to install the latest development version, including test dependencies from source code:\n\n.. code-block::\n\n    # cd ~\n    $ git clone https://github.com/bitranox/lib_detect_testenv.git\n    $ cd lib_detect_testenv\n    python -m pip install -e .[test]\n\n- via makefile:\n  makefiles are a very convenient way to install. here we can do much more,\n  like installing virtual environments, clean caches and so on.\n\n.. code-block:: shell\n\n    # from your shell's homedirectory:\n    $ git clone https://github.com/bitranox/lib_detect_testenv.git\n    $ cd lib_detect_testenv\n\n    # to run the tests:\n    $ make test\n\n    # to install the package\n    $ make install\n\n    # to clean the package\n    $ make clean\n\n    # uninstall the package\n    $ make uninstall\n\nrequirements\n------------\nfollowing modules will be automatically installed :\n\n.. code-block:: bash\n\n    ## project requirements\n\nacknowledgements\n----------------\n\n- special thanks to \"uncle bob\" robert c. martin, especially for his books on \"clean code\" and \"clean architecture\"\n\ncontribute\n----------\n\ni would love for you to fork and send me pull request for this project.\n- `please contribute <https://github.com/bitranox/lib_detect_testenv/blob/master/contributing.md>`_\n\nlicense\n-------\n\nthis software is licensed under the `mit license <http://en.wikipedia.org/wiki/mit_license>`_\n\n---\n\nchangelog\n=========\n\n- new major version for incompatible api changes,\n- new minor version for added functionality in a backwards compatible manner\n- new patch version for backwards compatible bug fixes\n\nv2.0.8\n---------\n2023-07-14:\n    - remove dependency click\n    - remove dependency cli_exit_tools to avoid circular dependency\n\nv2.0.7\n---------\n2023-07-14:\n    - add codeql badge\n    - move 3rd_party_stubs outside the src directory\n    - add pypy 3.10 tests\n    - add python 3.12-dev tests\n\nv2.0.6\n---------\n2023-07-13:\n    - require minimum python 3.8\n    - remove python 3.7 tests\n\nv2.0.5\n---------\n2023-07-11:\n    - introduce pep517 packaging standard\n    - introduce pyproject.toml build-system\n    - remove mypy.ini\n    - remove pytest.ini\n    - remove setup.cfg\n    - remove setup.py\n    - remove .bettercodehub.yml\n    - remove .travis.yml\n    - update black config\n    - clean ./tests/test_cli.py\n\nv2.0.4\n---------\n2023-06-26: suppress upload of .egg files to pypi.org\n\nv2.0.3\n---------\n2023-01-13:\n    - update github actions : checkout@v3 and setup-python@v4\n    - remove \"better code\" badges\n    - remove python 3.6 tests\n    - add python 3.11 tests\n    - update to pypy 3.9 tests\n\nv2.0.2.2\n---------\n2022-06-02: update to github actions checkout@v3 and setup-python@v3\n\nv2.0.2.1\n--------\n2022-06-01: update github actions test matrix\n\nv2.0.2\n--------\n2022-03-29: remedy mypy untyped decorator makes function \"cli_info\" untyped\n\nv2.0.1\n--------\n2022-03-25: fix github actions windows test\n\nv2.0.0\n-------\n2021-11-23:\n    - add \"setup.py test\" detection\n\nv1.0.2\n-------\n2021-11-22:\n    - remove second github action yml\n    - fix \"setup.py test\"\n\nv1.0.1\n------\n2021-11-21: implement github actions\n\nv1.0.0\n------\n2021-11-19: initial release\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "lib-detect-testenv",
  "package_url": "https://pypi.org/project/lib-detect-testenv/",
  "project_url": "https://pypi.org/project/lib-detect-testenv/",
  "project_urls": {
    "Changelog": "https://github.com/bitranox/lib_detect_testenv/blob/master/CHANGES.rst",
    "Documentation": "https://github.com/bitranox/lib_detect_testenv/blob/master/README.rst",
    "Homepage": "https://github.com/bitranox/lib_detect_testenv",
    "Repository": "https://github.com/bitranox/lib_detect_testenv.git"
  },
  "release_url": "https://pypi.org/project/lib-detect-testenv/2.0.8/",
  "requires_dist": [
    "black ; extra == 'test'",
    "codecov ; extra == 'test'",
    "coloredlogs ; extra == 'test'",
    "coverage ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-runner ; extra == 'test'",
    "readme-renderer ; extra == 'test'",
    "mypy ; (platform_python_implementation != \"PyPy\") and extra == 'test'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "detects if pytest or doctest or pyrunner on pycharm is running",
  "version": "2.0.8",
  "releases": [],
  "developers": [
    "bitranox@gmail.com"
  ],
  "kwds": "lib_detect_testenv is_testenv_active build_badge is_doctest_active is_pytest_active",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_lib_detect_testenv",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": [
    "pypi_black",
    "pypi_codecov",
    "pypi_coloredlogs",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_runner",
    "pypi_readme_renderer"
  ]
}
{
  "classifiers": [
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "|linux build status| |code coverage| |documentation status|\n\n.. |linux build status| image:: https://github.com/common-workflow-language/cwl-utils/actions/workflows/ci-tests.yml/badge.svg?branch=main\n   :target: https://github.com/common-workflow-language/cwl-utils/actions/workflows/ci-tests.yml\n.. |code coverage| image:: https://codecov.io/gh/common-workflow-language/cwl-utils/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/common-workflow-language/cwl-utils\n.. |documentation status| image:: https://readthedocs.org/projects/cwl-utils/badge/?version=latest\n   :target: https://cwl-utils.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\ncwl-utils\n---------\n\npython utilities and autogenerated classes for loading and parsing `cwl\nv1.0 <https://github.com/common-workflow-language/cwl-utils/blob/main/cwl_utils/parser/v1_0.py>`__,\n`cwl\nv1.1 <https://github.com/common-workflow-language/cwl-utils/blob/main/cwl_utils/parser/v1_1.py>`__,\nand `cwl\nv1.2 <https://github.com/common-workflow-language/cwl-utils/blob/main/cwl_utils/parser/v1_2.py>`__\ndocuments.\n\nrequires python 3.8+\n\ninstallation\n------------\n\n::\n\n   pip3 install cwl-utils\n\nto install from source::\n\n   git clone https://github.com/common-workflow-language/cwl-utils.git\n   cd cwl-utils\n   pip3 install .\n\nusage\n-----\n\npull the all referenced software container images\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cwl-docker-extract`` is useful to cache or pre-pull all software\ncontainer images referenced in a cwl commandlinetool or cwl workflow\n(including all referenced commandlinetools and sub-workflows and so on).\n\nthe default behaviour is to use the docker engine to download and save\nthe software container images in docker format.\n\n.. code:: bash\n\n   cwl-docker-extract path_to_my_workflow.cwl\n\n.. code:: bash\n\n   cwl-docker-extract --dir directory path_to_my_workflow.cwl\n\nor you can use the singularity software container engine to download and\nsave the software container images and convert them to the singularity\nformat at the same time.\n\n.. code:: bash\n\n   cwl-docker-extract --singularity --dir directory path_to_my_workflow.cwl\n\n\nprint all referenced software packages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cwl-cite-extract`` prints all software packages found (recursively) in the\nspecified cwl document.\n\ncurrently the package name and any listed specs and version field are printed\nfor all ``softwarerequirement`` s found.\n\n.. code:: bash\n\n   cwl-cite-extract path_to_my_workflow.cwl\n\n\nreplace cwl expressions with concrete steps\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cwl-expression-refactor`` refactors cwl documents so that any cwl expression\nevaluations are separate steps (either cwl expressiontools or cwl commandlinetools.)\nthis allows execution by cwl engines that do not want to support inline expression\nevaluation outside of concrete steps, or do not want to directly support cwl's\noptional ``inlinejavascriptrequirement`` at all.\n\n\n.. code:: bash\n\n   cwl-expression-refactor directory/path/to/save/outputs path_to_my_workflow.cwl [more_workflows.cwl]\n\nsplit a packed cwl document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cwl-graph-split`` splits a packed cwl document file into multiple files.\n\npacked cwl documents use the $graph construct to contain multiple cwl process\nobjects (workflow, commandlinetool, expressiontool, operation). typically\npacked cwl documents contain a cwl workflow under the name \"main\" and the\nworkflow steps (including any sub-workflows).\n\n.. code:: bash\n\n   cwl-graph-split --outdir optional/directory/path/to/save/outputs path_to_my_workflow.cwl\n\nnormalize a cwl document\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n``cwl-normalizer`` normalizes one or more cwl document so that for each document,\na json format cwl document is produces with it and all of its dependencies packed\ntogether, upgrading to cwl v1.2, as needed. can optionally refactor cwl\nexpressions into separate steps in the manner of cwl-expression-refactor.\n\n.. code:: bash\n\n   cwl-normalizer directory/path/to/save/outputs path_to_my_workflow.cwl [more_workflows.cwl]\n\n\nusing the cwl parsers\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   from pathlib import path\n   from ruamel import yaml\n   import sys\n\n   from cwl_utils.parser import load_document_by_uri, save\n\n   # file input - this is the only thing you will need to adjust or take in as an input to your function:\n   cwl_file = path(\"testdata/md5sum.cwl\")  # or a plain string works as well\n\n   # import cwl object\n   cwl_obj = load_document_by_uri(cwl_file)\n\n   # view cwl object\n   print(\"list of object attributes:\\n{}\".format(\"\\n\".join(map(str, dir(cwl_obj)))))\n\n   # export cwl object into a built-in typed object\n   saved_obj = save(cwl_obj)\n   print(f\"export of the loaded cwl object: {saved_obj}.\")\n\ndevelopment\n-----------\n\nregenerate parsers\n~~~~~~~~~~~~~~~~~~\n\nto regenerate install the ``schema_salad`` package and run:\n\n``cwl_utils/parser/cwl_v1_0.py`` was created via\n``schema-salad-tool --codegen python https://github.com/common-workflow-language/common-workflow-language/raw/codegen/v1.0/commonworkflowlanguage.yml --codegen-parser-info \"org.w3id.cwl.v1_0\" > cwl_utils/parser/cwl_v1_0.py``\n\n``cwl_utils/parser/cwl_v1_1.py`` was created via\n``schema-salad-tool --codegen python https://github.com/common-workflow-language/cwl-v1.1/raw/codegen/commonworkflowlanguage.yml --codegen-parser-info \"org.w3id.cwl.v1_1\" > cwl_utils/parser/cwl_v1_1.py``\n\n``cwl_utils/parser/cwl_v1_2.py`` was created via\n``schema-salad-tool --codegen python https://github.com/common-workflow-language/cwl-v1.2/raw/1.2.1_proposed/commonworkflowlanguage.yml --codegen-parser-info \"org.w3id.cwl.v1_2\" > cwl_utils/parser/cwl_v1_2.py``\n\nrelease\n~~~~~~~\n\nto release cwlutils, bump the version in ``cwl_utils/__meta__.py``, and\ntag that commit with the new version. the\n`gh-action-pypi-publish <https://github.com/pypa/gh-action-pypi-publish>`__\nshould release that tag.\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "cwl-utils",
  "package_url": "https://pypi.org/project/cwl-utils/",
  "project_url": "https://pypi.org/project/cwl-utils/",
  "project_urls": {
    "Homepage": "https://github.com/common-workflow-language/cwl-utils"
  },
  "release_url": "https://pypi.org/project/cwl-utils/0.32/",
  "requires_dist": [
    "cwl-upgrader >=1.2.3",
    "packaging",
    "rdflib",
    "requests",
    "schema-salad <9,>=8.5",
    "ruamel.yaml <0.19,>=0.17.6",
    "importlib-resources ; python_version < \"3.9\"",
    "cwlformat ; extra == 'pretty'"
  ],
  "requires_python": ">=3.8",
  "summary": "",
  "version": "0.32",
  "releases": [],
  "developers": [
    "common-workflow-language@googlegroups.com",
    "common_workflow_language_working_group"
  ],
  "kwds": "documentation cwl_utils cwl_v1_0 cwl_v1_1 cwl_v1_2",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_cwl_utils",
  "homepage": "https://github.com/common-workflow-language/cwl-utils",
  "release_count": 32,
  "dependency_ids": [
    "pypi_cwl_upgrader",
    "pypi_cwlformat",
    "pypi_importlib_resources",
    "pypi_packaging",
    "pypi_rdflib",
    "pypi_requests",
    "pypi_ruamel.yaml",
    "pypi_schema_salad"
  ]
}
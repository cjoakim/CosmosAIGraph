{
  "classifiers": [
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries"
  ],
  "description": "tiny framework for building *good* api client libraries thanks to\n`urllib3 <https://github.com/shazow/urllib3/>`_.\n\nhighlights\n==========\n\n- threadsafely reuses connections with keep-alive (via urllib3).\n- small and easy to understand codebase perfect for extending and building upon.\n- built-in support for rate limiting and request throttling.\n- functional examples for the\n  `klout api <https://github.com/shazow/apiclient/blob/master/examples/klout.py>`_\n  and the\n  `facebook opengraph api <https://github.com/shazow/apiclient/blob/master/examples/facebook.py>`_.\n\n\nexamples\n========\n\nhow to make your own super-simple client api library::\n\n    >>> from apiclient import apiclient\n    >>> class acmepublicapi(apiclient):\n    ...    base_url = 'https://localhost:1234/'\n\n    >>> acme_api = acmepublicapi()\n\n    >>> acme_api.call('/hello')\n    {'what': 'world'}\n    >>> acme_api.call('/echo', params={\"ping\": \"pong\"})\n    {'ping': 'pong'}\n\n\nhow to add rate limiting to your client api library so that we don't exceed 10\nrequests per minute::\n\n    >>> from apiclient import ratelimiter\n    >>> lock = ratelimiter(max_messages=10, every_seconds=60)\n    >>> acme_api = acmepublicapi(rate_limit_lock=lock)\n\n    >>> # get the first 100 pages\n    >>> for page in xrange(100):\n    ...     # whenever our request rate exceeds the specifications of the api's\n    ...     # ratelimiter, the next request will block until the next request window\n    ...     r = acme_api.call('/stream', page=str(page))\n\nfor more specific api examples, see the\n`examples/ <https://github.com/shazow/apiclient/blob/master/examples/>`_ directory.\n\n\nextending\n=========\n\nto handle different calling conventions, ``apiclient`` can be extended through\nsubclassing.\n\nfor example, if an api requires that all arguments be json encoded, the\n``_compose_url`` method could be implemented like this::\n\n    >>> class jsonargsapiclient(apiclient):\n    ...     def _compose_url(self, path, params=none):\n    ...         if params is not none:\n    ...             params = dict((key, json.dumps(val))\n    ...                            for (key, val) in params.iteritems())\n    ...         return apiclient._compose_url(self, path, params=params)\n\nor if an api returns yaml instead of json, the ``_handle_response`` method\ncould be overridden::\n\n    >>> class yamlresponseapiclient(apiclient):\n    ...     def _handle_response(self, response):\n    ...         return yaml.load(response.data)\n\n\ntodo\n====\n\n- tests.\n- more documentation.\n- more types of api handshakes, like oauth and oauth2.\n- more examples.\n\n\ncontributing\n============\n\nany contribution is highly encouraged and desired. :)\n\n#. fork on github.\n#. make the changes. bonus points if changes include documentation and tests.\n#. send a pull request.\n\nif you're unsure if it's a good idea,\n`open an issue <https://github.com/shazow/apiclient/issues>`_ or\n`contact me <https://github.com/inbox/new/shazow>`_ to discuss your proposal.\nextra juicy bonus points if you pick off some of the items in the **todo** list.\n\n\nlicense\n=======\n\n`mit <https://github.com/shazow/apiclient/blob/master/license>`_\n\n\nchanges\n=======\n\n1.0.3 (2016-05-15)\n------------------\n\n* python 3 fixes.\n\n\n1.0.2 (2011-10-20)\n------------------\n\n* fixed setup.py from failing upon not seeing readme.rst when installing using\n  easy_install.\n\n\n1.0.1 (2011-10-10)\n------------------\n\n* fixed setup.py package not including a manifest.in\n\n\n1.0 (2011-10-03)\n----------------\n\n* published decoupled code from socialgrapple.",
  "docs_url": null,
  "keywords": "api client urllib3 keepalive threadsafe http rest",
  "license": "mit",
  "name": "apiclient",
  "package_url": "https://pypi.org/project/apiclient/",
  "project_url": "https://pypi.org/project/apiclient/",
  "project_urls": {
    "Homepage": "https://github.com/shazow/apiclient"
  },
  "release_url": "https://pypi.org/project/apiclient/1.0.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "framework for making good api client libraries using urllib3.",
  "version": "1.0.4",
  "releases": [],
  "developers": [
    "andrey.petrov@shazow.net",
    "andrey_petrov"
  ],
  "kwds": "apiclient api acme_api oauth2 ratelimiter",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_apiclient",
  "homepage": "https://github.com/shazow/apiclient",
  "release_count": 5,
  "dependency_ids": []
}
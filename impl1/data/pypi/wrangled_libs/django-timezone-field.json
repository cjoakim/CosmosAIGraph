{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "# django-timezone-field\n\n[![ci](https://github.com/mfogel/django-timezone-field/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/mfogel/django-timezone-field/actions)\n[![codecov](https://codecov.io/gh/mfogel/django-timezone-field/branch/main/graph/badge.svg?token=rwekzmim3l)](https://codecov.io/gh/mfogel/django-timezone-field)\n[![pypi downloads](https://img.shields.io/pypi/dm/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\n[![pypi python support](https://img.shields.io/pypi/pyversions/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\n[![pypi django support](https://img.shields.io/pypi/djversions/django-timezone-field.svg)](https://pypi.python.org/pypi/django-timezone-field/)\n\na django app providing db, form, and rest framework fields for\n[`zoneinfo`](https://docs.python.org/3/library/zoneinfo.html) and [`pytz`](http://pypi.python.org/pypi/pytz/) timezone\nobjects.\n\n## the transition from `pytz` to `zoneinfo`\n\nlike django, this app supports both `pytz` and `zoneinfo` objects while the community transitions away from `pytz` to\n`zoneinfo`. all exposed fields and functions that return a timezone object accept an optional boolean kwarg `use_pytz`.\n\nif not explicitly specified, the default value used for `use_pytz` matches django's behavior:\n\n- django <= 3.x: `use_pytz` defaults to `true`\n- django == 4.x: `use_pytz` defaults to the value of\n  [`django.conf.settings.use_deprecated_pytz`](https://docs.djangoproject.com/en/4.0/ref/settings/#use-deprecated-pytz),\n  which itself defaults to `false`\n- django >= 5.x: django plans to\n  [drop support for `pytz` altogether](https://docs.djangoproject.com/en/4.0/releases/4.0/#zoneinfo-default-timezone-implementation),\n  and this app will likely do the same.\n\nnote that this app does _not_ declare `pytz` to be a dependency, so if you're using this app with `use_pytz=true`, you'll need\nto ensure `pytz` is included in the environment yourself.\n\n### differences in recognized timezones between `pytz` and `zoneinfo`\n\n`pytz` and `zoneinfo` search for timezone data differently.\n\n- `pytz` bundles and searches within its own copy of the [iana timezone db](https://www.iana.org/time-zones)\n- `zoneinfo` first searches the local system's timezone db for a match. if no match is found, it then searches within\n  the [`tzdata`](https://pypi.org/project/tzdata/) package _if it is installed_. the `tzdata` package contains a copy of\n  the iana timezone db.\n\nif the local system's timezone db doesn't cover the entire iana timezone db and the `tzdata` package is not installed,\nyou may run across errors like `zoneinfonotfounderror: 'no time zone found with key pacific/kanton'` for seemingly valid\ntimezones when transitioning from `pytz` to `zoneinfo`. the easy fix is to add `tzdata` to your project with\n`poetry add tzdata` or `pip install tzdata`.\n\nassuming you have the `tzdata` package installed if needed, no\n[data migration](https://docs.djangoproject.com/en/4.0/topics/migrations/#data-migrations) should be necessary when\nswitching from `pytz` to `zoneinfo`.\n\n## examples\n\n### database field\n\n```python\nimport zoneinfo\nimport pytz\nfrom django.db import models\nfrom timezone_field import timezonefield\n\nclass mymodel(models.model):\n    tz1 = timezonefield(default=\"asia/dubai\")               # defaults supported, in modelform renders like \"asia/dubai\"\n    tz2 = timezonefield(choices_display=\"with_gmt_offset\")  # in modelform renders like \"gmt+04:00 asia/dubai\"\n    tz3 = timezonefield(use_pytz=true)                      # returns pytz timezone objects\n    tz4 = timezonefield(use_pytz=false)                     # returns zoneinfo objects\n\nmy_model = mymodel(\n    tz2=\"america/vancouver\",                     # assignment of a string\n    tz3=pytz.timezone(\"america/vancouver\"),      # assignment of a pytz timezone\n    tz4=zoneinfo.zoneinfo(\"america/vancouver\"),  # assignment of a zoneinfo\n)\nmy_model.full_clean() # validates against pytz.common_timezones by default\nmy_model.save()       # values stored in db as strings\nmy_model.tz3          # value returned as pytz timezone: <dsttzinfo 'america/vancouver' lmt-1 day, 15:48:00 std>\nmy_model.tz4          # value returned as zoneinfo: zoneinfo.zoneinfo(key='america/vancouver')\n```\n\n### form field\n\n```python\nfrom django import forms\nfrom timezone_field import timezoneformfield\n\nclass myform(forms.form):\n    tz1 = timezoneformfield()                                   # renders like \"asia/dubai\"\n    tz2 = timezoneformfield(choices_display=\"with_gmt_offset\")  # renders like \"gmt+04:00 asia/dubai\"\n    tz3 = timezoneformfield(use_pytz=true)                      # returns pytz timezone objects\n    tz4 = timezoneformfield(use_pytz=false)                     # returns zoneinfo objects\n\nmy_form = myform({\"tz3\": \"europe/berlin\", \"tz4\": \"europe/berlin\"})\nmy_form.full_clean()         # validates against pytz.common_timezones by default\nmy_form.cleaned_data[\"tz3\"]  # value returned as pytz timezone: <dsttzinfo 'europe/berlin' lmt+0:53:00 std>\nmy_form.cleaned_data[\"tz4\"]  # value returned as zoneinfo: zoneinfo.zoneinfo(key='europe/berlin')\n```\n\n### rest framework serializer field\n\n```python\nfrom rest_framework import serializers\nfrom timezone_field.rest_framework import timezoneserializerfield\n\nclass myserializer(serializers.serializer):\n    tz1 = timezoneserializerfield(use_pytz=true)\n    tz2 = timezoneserializerfield(use_pytz=false)\n\nmy_serializer = myserializer(data={\n    \"tz1\": \"america/argentina/buenos_aires\",\n    \"tz2\": \"america/argentina/buenos_aires\",\n})\nmy_serializer.is_valid()\nmy_serializer.validated_data[\"tz1\"]  # <dsttzinfo 'america/argentina/buenos_aires' lmt-1 day, 20:06:00 std>\nmy_serializer.validated_data[\"tz2\"]  # zoneinfo.zoneinfo(key='america/argentina/buenos_aires')\n```\n\n## installation\n\nreleases are hosted on [`pypi`](https://pypi.org/project/django-timezone-field/) and can be installed using various\npython packaging tools.\n\n```bash\n# with poetry\npoetry add django-timezone-field\n\n# with pip\npip install django-timezone-field\n```\n\n## running the tests\n\nfrom the repository root, with [`poetry`](https://python-poetry.org/):\n\n```bash\npoetry install\npoetry run pytest\n```\n\n## changelog\n\n#### 6.1.0 (2023-11-25)\n\n- add support for django 5.0\n- add support for python 3.12\n- fix issue with `factory` timezone on some bsd systems ([#114](https://github.com/mfogel/django-timezone-field/issues/114))\n\n#### 6.0.1 (2023-09-07)\n\n- use correct default backend when running with django 3.x ([#109](https://github.com/mfogel/django-timezone-field/issues/109))\n\n#### 6.0 (2023-08-20)\n\n- breaking: `pytz` removed from dependencies. if you use this package with `use_pytz=true`, you'll need to install\n  `pytz` yourself.\n- drop support for django 2.2\n- drop support for python 3.7\n\n#### 5.1 (2023-06-18)\n\n- add django as a dependency of this package, with correct version constraints\n  ([#90](https://github.com/mfogel/django-timezone-field/issues/90))\n- add support for django 4.1, 4.2\n- add support for python 3.11\n\n#### 5.0 (2022-02-08)\n\n- add support for `zoneinfo` objects ([#79](https://github.com/mfogel/django-timezone-field/issues/79))\n- add support for django 4.0\n- remove `timezone_field.utils.add_gmt_offset_to_choices`, `display_gmt_offset` kwarg (use `choices_display` instead)\n- drop support for django 3.0, 3.1\n- drop support for python 3.5, 3.6\n\n#### 4.2.3 (2022-01-13)\n\n- fix sdist installs ([#78](https://github.com/mfogel/django-timezone-field/issues/78))\n- officially support python 3.10\n\n#### 4.2.1 (2021-07-07)\n\n- reinstate `timezonefield.default_choices` ([#76](https://github.com/mfogel/django-timezone-field/issues/76))\n\n#### 4.2 (2021-07-07)\n\n- officially support django 3.2, python 3.9\n- fix bug with field deconstruction ([#74](https://github.com/mfogel/django-timezone-field/issues/74))\n- housekeeping: use poetry, github actions, pytest\n\n#### 4.1.2 (2021-03-17)\n\n- avoid `nonexistenttimeerror` during dst transition ([#70](https://github.com/mfogel/django-timezone-field/issues/70))\n\n#### 4.1.1 (2020-11-28)\n\n- don't import `rest_framework` from package root ([#67](https://github.com/mfogel/django-timezone-field/issues/67))\n\n#### 4.1 (2020-11-28)\n\n- add django rest framework serializer field\n- add new `choices_display` kwarg with supported values `with_gmt_offset` and `standard`\n- deprecate `display_gmt_offset` kwarg\n\n#### 4.0 (2019-12-03)\n\n- add support for django 3.0, python 3.8\n- drop support for django 1.11, 2.0, 2.1, python 2.7, 3.4\n\n#### 3.1 (2019-10-02)\n\n- officially support django 2.2 (already worked)\n- add option to display tz offsets in form field ([#46](https://github.com/mfogel/django-timezone-field/issues/46))\n\n#### 3.0 (2018-09-15)\n\n- support django 1.11, 2.0, 2.1\n- add support for python 3.7\n- change default human-readable timezone names to exclude underscores\n  ([#32](https://github.com/mfogel/django-timezone-field/issues/32) &\n  [#37](https://github.com/mfogel/django-timezone-field/issues/37))\n\n#### 2.1 (2018-03-01)\n\n- add support for django 1.10, 1.11\n- add support for python 3.6\n- add wheel support\n- support bytes in db fields ([#38](https://github.com/mfogel/django-timezone-field/issues/38) &\n  [#39](https://github.com/mfogel/django-timezone-field/issues/39))\n\n#### 2.0 (2016-01-31)\n\n- drop support for django 1.7, add support for django 1.9\n- drop support for python 3.2, 3.3, add support for python 3.5\n- remove tests from source distribution\n\n#### 1.3 (2015-10-12)\n\n- drop support for django 1.6, add support for django 1.8\n- various [bug fixes](https://github.com/mfogel/django-timezone-field/issues?q=milestone%3a1.3)\n\n#### 1.2 (2015-02-05)\n\n- for form field, changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`, to\n  match db field behavior.\n\n#### 1.1 (2014-10-05)\n\n- django 1.7 compatibility\n- added support for formatting `choices` kwarg as `[[<str>, <str>], ...]`, in addition to previous format of\n  `[[<pytz.timezone>, <str>], ...]`.\n- changed default list of accepted timezones from `pytz.all_timezones` to `pytz.common_timezones`. if you have timezones\n  in your db that are in `pytz.all_timezones` but not in `pytz.common_timezones`, this is a backward-incompatible\n  change. old behavior can be restored by specifying `choices=[(tz, tz) for tz in pytz.all_timezones]` in your model\n  definition.\n\n#### 1.0 (2013-08-04)\n\n- initial release as `timezone_field`.\n\n## credits\n\noriginally adapted from [brian rosner's django-timezones](https://github.com/brosner/django-timezones).\n\nmade possible thanks to the work of the\n[contributors](https://github.com/mfogel/django-timezone-field/graphs/contributors).\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-2-clause",
  "name": "django-timezone-field",
  "package_url": "https://pypi.org/project/django-timezone-field/",
  "project_url": "https://pypi.org/project/django-timezone-field/",
  "project_urls": {
    "Homepage": "https://github.com/mfogel/django-timezone-field/",
    "Repository": "https://github.com/mfogel/django-timezone-field/"
  },
  "release_url": "https://pypi.org/project/django-timezone-field/6.1.0/",
  "requires_dist": [
    "Django (>=3.2,<6.0)",
    "backports.zoneinfo (>=0.2.1,<0.3.0) ; python_version < \"3.9\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "a django app providing db, form, and rest framework fields for zoneinfo and pytz timezone objects.",
  "version": "6.1.0",
  "releases": [],
  "developers": [
    "mike@fogel.ca",
    "mike_fogel"
  ],
  "kwds": "timezonefield timezone_field timezoneformfield all_timezones timezoneserializerfield",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_django_timezone_field",
  "homepage": "https://github.com/mfogel/django-timezone-field/",
  "release_count": 26,
  "dependency_ids": [
    "pypi_backports.zoneinfo",
    "pypi_django"
  ]
}
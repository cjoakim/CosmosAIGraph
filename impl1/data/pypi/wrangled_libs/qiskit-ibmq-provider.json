{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "# qiskit ibm quantum provider (_now deprecated_)\n\n[![license](https://img.shields.io/github/license/qiskit/qiskit-ibmq-provider.svg?style=popout-square)](https://opensource.org/licenses/apache-2.0)[![build status](https://img.shields.io/travis/com/qiskit/qiskit-ibmq-provider/master.svg?style=popout-square)](https://travis-ci.com/qiskit/qiskit-ibmq-provider)[![](https://img.shields.io/github/release/qiskit/qiskit-ibmq-provider.svg?style=popout-square)](https://github.com/qiskit/qiskit-ibmq-provider/releases)[![](https://img.shields.io/pypi/dm/qiskit-ibmq-provider.svg?style=popout-square)](https://pypi.org/project/qiskit-ibmq-provider/)\n\n---\n\n**_please note:_** _as of version 0.20.0, released in january 2023, `qiskit-ibmq-provider` has been deprecated\nwith its support ending and eventual archival being no sooner than 3 months from that date. the\nfunction provided by `qiskit-ibmq-provider` is not going away rather it has being split out to separate repositories.\nplease see the [migration guides](#migration-guides) section below for more detail. we encourage you\nto migrate over at your earliest convenience._\n\n---\n\n**qiskit** is an open-source sdk for working with quantum computers at the level of circuits, algorithms, and application modules.\n\nthis module contains a provider that allows accessing the **[ibm quantum]**\nsystems and simulators.\n\n## migration guides\n\n\nall the functionality that `qiskit-ibmq-provider` provides has been migrated to other packages:\n\n| formerly | current package | details | migration guide |\n| :---: | :---: | :---: | :---: |\n| [`qiskit.providers.ibmq.experiment`](https://qiskit.org/documentation/apidoc/ibmq_experiment.html) | [`qiskit-ibm-experiment`](https://pypi.org/project/qiskit-ibm-experiment/)<br>(no docs yet) |  for the features related with the ibm quantum experiment database service. | [guide](https://github.com/qiskit/qiskit-ibm-experiment/blob/main/docs/tutorials/migration%20guide.ipynb) |\n| [`qiskit.providers.ibmq.runtime`](https://qiskit.org/documentation/apidoc/ibmq_runtime.html) | [`qiskit-ibm-runtime`](https://pypi.org/project/qiskit-ibm-runtime/)<br>([docs](https://qiskit.org/documentation/partners/qiskit_ibm_runtime/)) | use this package if you prefer getting high quality probability distribution or expectation values without having to optimize the circuits or mitigate results yourself. | [guide](https://qiskit.org/documentation/partners/qiskit_ibm_runtime/migrate_from_ibmq.html) |\n| rest of [`qiskit.providers.ibmq`](https://qiskit.org/documentation/apidoc/ibmq_provider.html) | [`qiskit-ibm-provider`](https://pypi.org/project/qiskit-ibm-provider)<br>([docs](https://qiskit.org/documentation/partners/qiskit_ibm_provider/)) | use this package if you need direct access to the backends to do experiments like device characterization. | [guide](https://qiskit.org/documentation/partners/qiskit_ibm_provider/tutorials/migration_guide_from_qiskit-ibmq-provider.html) |\n\n\nthese packages can be installed by themselves (via the standard pip install command, e.g. ``pip install qiskit-ibm-provider``) and are not part of the qiskit metapackage.\n\n\n## installation\n\nwe encourage installing qiskit via the pip tool (a python package manager),\nwhich installs all qiskit elements and components, including this one.\n\n```bash\npip install qiskit\n```\n\npip will handle all dependencies automatically for us and you will always\ninstall the latest (and well-tested) version.\n\nto install from source, follow the instructions in the\n[contribution guidelines].\n\n## setting up the ibm quantum provider\n\nonce the package is installed, you can access the provider from qiskit.\n\n> **note**: since november 2019 (and with version `0.4` of this\n> `qiskit-ibmq-provider` package / version `0.14` of the `qiskit` package)\n> legacy quantum experience or qconsole (v1) accounts are no longer supported.\n> if you are still using a v1 account, please follow the steps described in\n> [update instructions](#updating-to-the-new-ibm-quantum) to update your account.\n\n### configure your ibm quantum credentials\n\n1. create an ibm quantum account or log in to your existing account by visiting\n   the [ibm quantum login page].\n\n2. copy (and/or optionally regenerate) your api token from your\n   [ibm quantum account page].\n\n3. take your token from step 2, here called `my_api_token`, and run:\n\n   ```python\n   from qiskit import ibmq\n   ibmq.save_account('my_api_token')\n   ```\n\n   the command above stores your credentials locally in a configuration file called `qiskitrc`.\n   by default, this file is located in `$home/.qiskit`, where `$home` is your home directory. if\n   you are still using `qconfig.py`, please delete that file and run the command above.\n\n### accessing your ibm quantum backends\n\nafter calling `ibmq.save_account()`, your credentials will be stored on disk.\nonce they are stored, at any point in the future you can load and use them\nin your program simply via:\n\n```python\nfrom qiskit import ibmq\n\nprovider = ibmq.load_account()\nbackend = provider.get_backend('ibmq_qasm_simulator')\n```\n\nalternatively, if you do not want to save your credentials to disk and only\nintend to use them during the current session, you can use:\n\n```python\nfrom qiskit import ibmq\n\nprovider = ibmq.enable_account('my_api_token')\nbackend = provider.get_backend('ibmq_qasm_simulator')\n```\n\nby default, all ibm quantum accounts have access to the same, open project\n(hub: `ibm-q`, group: `open`, project: `main`). for convenience, the\n`ibmq.load_account()` and `ibmq.enable_account()` methods will return a provider\nfor that project. if you have access to other projects, you can use:\n\n```python\nprovider_2 = ibmq.get_provider(hub='my_hub', group='my_group', project='my_project')\n```\n\n## updating to the new ibm quantum\n\nsince november 2019 (and with version `0.4` of this `qiskit-ibmq-provider`\npackage), the ibm quantum provider only supports the new [ibm quantum], dropping\nsupport for the legacy quantum experience and qconsole accounts. the new ibm quantum is also referred as `v2`, whereas the legacy one and qconsole as `v1`.\n\nthis section includes instructions for updating your accounts and programs.\nplease note that:\n  * the ibm quantum experience `v1` credentials and the programs written for pre-0.3\n    versions will still be working during the `0.3.x` series. from 0.4 onwards,\n    only `v2` credentials are supported, and it is recommended to upgrade\n    in order to take advantage of the new features.\n  * updating your credentials to the ibm quantum `v2` implies that you\n    will need to update your programs. the sections below contain instructions\n    on how to perform the transition.\n\n### updating your ibm quantum credentials\n\nif you have credentials for the legacy quantum experience or qconsole stored in\ndisk, you can make use of `ibmq.update_account()` helper. this helper will read\nyour current credentials stored in disk and attempt to convert them:\n\n```python\nfrom qiskit import ibmq\n\nibmq.update_account()\n```\n\n```\nfound 2 credentials.\nthe credentials stored will be replaced with a single entry with token \"mytoken\"\nand the new ibm quantum v2 url (https://auth.quantum-computing.ibm.com/api).\n\nin order to access the provider, please use the new \"ibmq.get_provider()\" methods:\n\n  provider0 = ibmq.load_account()\n  provider1 = ibmq.get_provider(hub='a', group='b', project='c')\n\nnote you need to update your programs in order to retrieve backends from a\nspecific provider directly:\n\n  backends = provider0.backends()\n  backend = provider0.get_backend('ibmq_qasm_simulator')\n\nupdate the credentials? [y/n]\n```\n\nupon confirmation, your credentials will be overwritten with a valid ibm quantum\nv2 set of credentials. for more complex cases, consider deleting your\nprevious credentials via `ibmq.delete_accounts()` and follow the instructions\nin the [ibm quantum account page].\n\n### updating your programs\n\nthe new ibm quantum support also introduces a more structured approach for accessing backends.\npreviously, access to all backends was centralized through:\n\n```python\nibmq.backends()\nibmq.get_backend('ibmq_qasm_simulator')\n```\n\nin version `0.3` onwards, the preferred way to access the backends is via a\n`provider` for one of your projects instead of via the global `ibmq` instance\ndirectly, allowing for more granular control over\nthe project you are using:\n\n```python\nmy_provider = ibmq.get_provider()\nmy_provider.backends()\nmy_provider.get_backend('ibmq_qasm_simulator')\n```\n\nin a similar spirit, you can check the providers that you have access to via:\n```python\nibmq.providers()\n```\n\nin addition, since the new ibm quantum provides only one set of\ncredentials, the account management methods in ibmq are now in singular form.\nfor example, you should use `ibmq.load_account()` instead of\n`ibmq.load_accounts()`. an `ibmqaccounterror` exception is raised if you\nattempt to use the legacy methods with an ibm quantum v2 account.\n\nthe following tables contains a quick reference for the differences between the\ntwo versions. please refer to the documentation of each method for more in\ndepth details:\n\n### account management\n\n| &lt;0.3 / v1 credentials | &gt;=0.3 and v2 credentials |\n| --- | --- |\n| n/a | `ibmq.update_account()` |\n| `ibmq.save_account(token, url)` | `ibmq.save_account(token)`\n| `ibmq.load_accounts()` | `provider = ibmq.load_account()`\n| `ibmq.enable_account()` | `provider = ibmq.enable_account()`\n| `ibmq.disable_accounts()` | `ibmq.disable_account()`\n| `ibmq.active_accounts()` | `ibmq.active_account()`\n| `ibmq.stored_accounts()` | `ibmq.stored_account()`\n| `ibmq.delete_accounts()` | `ibmq.delete_account()`\n\n### using backends\n\n| &lt;0.3 / v1 credentials | &gt;=0.3 and v2 credentials |\n| --- | --- |\n| n/a | `providers = ibmq.providers()` |\n| `backend = ibmq.get_backend(name, hub='hub')` | `provider = ibmq.get_provider(hub='hub')` |\n|                                           | `backend = provider.get_backend(name)` |\n| `backends = ibmq.backends(hub='hub')` | `provider = ibmq.get_provider(hub='hub')` |\n|                                       | `backends = provider.backends()` |\n\n\n## contribution guidelines\n\nif you'd like to contribute to ibm quantum provider, please take a look at our\n[contribution guidelines]. this project adheres to qiskit's [code of conduct].\nby participating, you are expect to uphold to this code.\n\nwe use [github issues] for tracking requests and bugs. please use our [slack]\nfor discussion and simple questions. to join our slack community use the\ninvite link at [qiskit.org]. for questions that are more suited for a forum we\nuse the `qiskit` tag in [stack exchange].\n\n## next steps\n\nnow you're set up and ready to check out some of the other examples from our\n[qiskit tutorial] repository.\n\n## authors and citation\n\nthe qiskit ibm quantum provider is the work of [many people] who contribute to the\nproject at different levels. if you use qiskit, please cite as per the included\n[bibtex file].\n\n## license\n\n[apache license 2.0].\n\n\n[ibm quantum]: https://quantum-computing.ibm.com\n[ibm quantum login page]:  https://quantum-computing.ibm.com/login\n[ibm quantum account page]: https://quantum-computing.ibm.com/account\n[contribution guidelines]: https://github.com/qiskit/qiskit-ibmq-provider/blob/master/contributing.md\n[code of conduct]: https://github.com/qiskit/qiskit-ibmq-provider/blob/master/code_of_conduct.md\n[github issues]: https://github.com/qiskit/qiskit-ibmq-provider/issues\n[slack]: https://qiskit.slack.com\n[qiskit.org]: https://qiskit.org\n[stack exchange]: https://quantumcomputing.stackexchange.com/questions/tagged/qiskit\n[qiskit tutorial]: https://github.com/qiskit/qiskit-tutorial\n[many people]: https://github.com/qiskit/qiskit-ibmq-provider/graphs/contributors\n[bibtex file]: https://github.com/qiskit/qiskit/blob/master/qiskit.bib\n[apache license 2.0]: https://github.com/qiskit/qiskit-ibmq-provider/blob/master/license.txt\n",
  "docs_url": null,
  "keywords": "qiskit sdk quantum api ibmq",
  "license": "apache 2.0",
  "name": "qiskit-ibmq-provider",
  "package_url": "https://pypi.org/project/qiskit-ibmq-provider/",
  "project_url": "https://pypi.org/project/qiskit-ibmq-provider/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Qiskit/qiskit-ibmq-provider/issues",
    "Documentation": "https://qiskit.org/documentation/",
    "Homepage": "https://github.com/Qiskit/qiskit-ibmq-provider",
    "Source Code": "https://github.com/Qiskit/qiskit-ibmq-provider"
  },
  "release_url": "https://pypi.org/project/qiskit-ibmq-provider/0.20.2/",
  "requires_dist": [
    "qiskit-terra (>=0.18.0)",
    "requests (>=2.19)",
    "requests-ntlm (<=1.1.0)",
    "numpy (<1.24)",
    "urllib3 (>=1.21.1)",
    "python-dateutil (>=2.8.0)",
    "websocket-client (>=1.5.1)",
    "websockets (>=9.1) ; python_version < \"3.7\"",
    "dataclasses (>=0.8) ; python_version < \"3.7\"",
    "websockets (>=10.0) ; python_version >= \"3.7\"",
    "matplotlib (>=2.1) ; extra == 'visualization'",
    "ipywidgets (<=7.7.2) ; extra == 'visualization'",
    "seaborn (>=0.9.0) ; extra == 'visualization'",
    "plotly (>=4.4) ; extra == 'visualization'",
    "ipyvuetify (>=1.1) ; extra == 'visualization'",
    "pyperclip (>=1.7) ; extra == 'visualization'",
    "ipython (>=5.0.0) ; extra == 'visualization'",
    "traitlets (!=5.0.5) ; extra == 'visualization'",
    "ipyvue (>=1.4.1) ; extra == 'visualization'"
  ],
  "requires_python": ">=3.7",
  "summary": "qiskit provider for accessing the quantum devices and simulators at ibmq",
  "version": "0.20.2",
  "releases": [],
  "developers": [
    "hello@qiskit.org",
    "qiskit_development_team"
  ],
  "kwds": "qiskit_ibm_provider qiskit_ibm_runtime ibmq_provider ibmq qconfig",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_qiskit_ibmq_provider",
  "homepage": "https://github.com/qiskit/qiskit-ibmq-provider",
  "release_count": 51,
  "dependency_ids": [
    "pypi_dataclasses",
    "pypi_ipython",
    "pypi_ipyvue",
    "pypi_ipyvuetify",
    "pypi_ipywidgets",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_plotly",
    "pypi_pyperclip",
    "pypi_python_dateutil",
    "pypi_qiskit_terra",
    "pypi_requests",
    "pypi_requests_ntlm",
    "pypi_seaborn",
    "pypi_traitlets",
    "pypi_urllib3",
    "pypi_websocket_client",
    "pypi_websockets"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "# coingecko api wrapper\n[![pypi version](https://img.shields.io/pypi/v/pycoingecko.svg)](https://pypi.python.org/pypi/pycoingecko/)\n![github](https://img.shields.io/github/license/man-c/pycoingecko)\n\npython3 wrapper around the [coingecko](https://www.coingecko.com/) api (v3)\n\n### installation\npypi\n```bash\npip install -u pycoingecko\n```\nor from source\n```bash\ngit clone https://github.com/man-c/pycoingecko.git\ncd pycoingecko\npython3 setup.py install\n```\n\n### usage\n\nfor **free api**:\n```python\nfrom pycoingecko import coingeckoapi\ncg = coingeckoapi()\n```\n\nfor users with **pro api** key:\n```python\nfrom pycoingecko import coingeckoapi\ncg = pycoingecko.coingeckoapi(api_key='your_api_key')\n```\n\n### examples\nthe required parameters for each endpoint are defined as required (mandatory) parameters for the corresponding functions.\\\n**any optional parameters** can be passed using same names, as defined in coingecko api doc (https://www.coingecko.com/en/api/documentation).\n\nfor any parameter:\n- ***lists** are supported as input for multiple-valued comma-separated parameters\\\n  (e.g. see /simple/price usage examples).*\n- ***booleans** are supported as input for boolean type parameters; they can be `str` ('true', 'false'') or `bool` (`true`, `false`)\\\n  (e.g. see /simple/price usage examples).*\n\nusage examples:\n```python\n# /simple/price endpoint with the required parameters\n>>> cg.get_price(ids='bitcoin', vs_currencies='usd')\n{'bitcoin': {'usd': 3462.04}}\n\n>>> cg.get_price(ids='bitcoin,litecoin,ethereum', vs_currencies='usd')\n# or (lists can be used for multiple-valued arguments)\n>>> cg.get_price(ids=['bitcoin', 'litecoin', 'ethereum'], vs_currencies='usd')\n{'bitcoin': {'usd': 3461.27}, 'ethereum': {'usd': 106.92}, 'litecoin': {'usd': 32.72}}\n\n>>> cg.get_price(ids='bitcoin,litecoin,ethereum', vs_currencies='usd,eur')\n# or (lists can be used for multiple-valued arguments)\n>>> cg.get_price(ids=['bitcoin', 'litecoin', 'ethereum'], vs_currencies=['usd', 'eur'])\n{'bitcoin': {'usd': 3459.39, 'eur': 3019.33}, 'ethereum': {'usd': 106.91, 'eur': 93.31}, 'litecoin': {'usd': 32.72, 'eur': 28.56}}\n\n# optional parameters can be passed as defined in the api doc (https://www.coingecko.com/api/docs/v3)\n>>> cg.get_price(ids='bitcoin', vs_currencies='usd', include_market_cap='true', include_24hr_vol='true', include_24hr_change='true', include_last_updated_at='true')\n{'bitcoin': {'usd': 3458.74, 'usd_market_cap': 60574330199.29028, 'usd_24h_vol': 4182664683.6247883, 'usd_24h_change': 1.2295378479069035, 'last_updated_at': 1549071865}}\n# or (also booleans can be used for boolean type arguments)\n>>> cg.get_price(ids='bitcoin', vs_currencies='usd', include_market_cap=true, include_24hr_vol=true, include_24hr_change=true, include_last_updated_at=true)\n{'bitcoin': {'usd': 3458.74, 'usd_market_cap': 60574330199.29028, 'usd_24h_vol': 4182664683.6247883, 'usd_24h_change': 1.2295378479069035, 'last_updated_at': 1549071865}}\n```\n\n### api documentation\nhttps://www.coingecko.com/en/api/documentation\n\n### endpoints included\n> :warning: **endpoints documentation**: to make sure that you are using properly each endpoint you should check the [api documentation](https://www.coingecko.com/en/api/documentation). return behaviour and parameters of the endpoints, such as *pagination*, might have changed. <br> any **optional parameters** defined in coingecko api doc can be passed as function parameters using same parameters names with the api *(see examples above)*.\n<details><summary>ping</summary>\n<p>\n\n* **/ping** (check api server status)\n  ```python\n  cg.ping()\n  ```\n</details>\n\n<details><summary>simple</summary>\n<p>\n\n* **/simple/price** (get the current price of any cryptocurrencies in any other supported currencies that you need)\n  ```python\n  cg.get_price()\n  ```\n* **/simple/token_price/{id}** (get current price of tokens (using contract addresses) for a given platform in any other currency that you need)\n  ```python\n  cg.get_token_price()\n  ```\n* **/simple/supported_vs_currencies** (get list of supported_vs_currencies)\n  ```python\n  cg.get_supported_vs_currencies()\n  ```\n</details>\n\n<details><summary>coins</summary>\n<p>\n\n* **/coins/list** (list all supported coins id, name and symbol (no pagination required))\n  ```python\n  cg.get_coins_list()\n  ```\n\n* **/coins/markets** (list all supported coins price, market cap, volume, and market related data)\n  ```python \n  cg.get_coins_markets()\n  ```\n* **/coins/{id}** (get current data (name, price, market, ... including exchange tickers) for a coin)\n  ```python \n  cg.get_coin_by_id()\n  ```\n* **/coins/{id}/tickers** (get coin tickers (paginated to 100 items))\n  ```python \n  cg.get_coin_ticker_by_id()\n  ```\n* **/coins/{id}/history** (get historical data (name, price, market, stats) at a given date for a coin)\n  ```python \n  cg.get_coin_history_by_id()\n  ```\n* **/coins/{id}/market_chart** (get historical market data include price, market cap, and 24h volume (granularity auto))\n  ```python \n  cg.get_coin_market_chart_by_id()\n  ```\n* **/coins/{id}/market_chart/range** (get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto))\n  ```python \n  cg.get_coin_market_chart_range_by_id()\n  ```\n\n[//]: # (* **/coins/{id}/status_updates** &#40;get status updates for a given coin &#40;beta&#41;&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_coin_status_updates_by_id&#40;&#41;)\n\n[//]: # (  ```)\n* **/coins/{id}/ohlc** (get coin's ohlc (beta))\n  ```python\n  cg.get_coin_ohlc_by_id()\n  ```\n</details>\n\n<details><summary>contract</summary>\n<p>\n\n* **/coins/{id}/contract/{contract_address}** (get coin info from contract address)\n  ```python\n  cg.get_coin_info_from_contract_address_by_id()\n  ```\n* **/coins/{id}/contract/{contract_address}/market_chart/** (get historical market data include price, market cap, and 24h volume (granularity auto) from a contract address)\n  ```python\n  cg.get_coin_market_chart_from_contract_address_by_id()\n  ```\n* **/coins/{id}/contract/{contract_address}/market_chart/range** (get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto) from a contract address)\n  ```python\n  cg.get_coin_market_chart_range_from_contract_address_by_id()\n  ```\n</details>\n\n<details><summary>asset_platforms</summary>\n<p>\n\n* **/asset_platforms** (list all asset platforms (blockchain networks))\n  ```python\n  cg.get_asset_platforms()\n  ```\n</details>\n\n<details><summary>categories</summary>\n<p>\n\n* **/coins/categories/list** (list all categories)\n  ```python\n  cg.get_coins_categories_list()\n  ```\n* **coins/categories** (list all categories with market data)\n  ```python\n  cg.get_coins_categories()\n  ```\n</details>\n\n<details><summary>exchanges</summary>\n<p>\n\n* **/exchanges** (list all exchanges)\n  ```python\n  cg.get_exchanges_list()\n  ```\n* **/exchanges/list** (list all supported markets id and name (no pagination required))\n  ```python\n  cg.get_exchanges_id_name_list()\n  ```\n* **/exchanges/{id}** (get exchange volume in btc and top 100 tickers only)\n  ```python\n  cg.get_exchanges_by_id()\n  ```\n* **/exchanges/{id}/tickers** (get exchange tickers (paginated, 100 tickers per page))\n  ```python\n  cg.get_exchanges_tickers_by_id()\n  ```\n\n[//]: # (* **/exchanges/{id}/status_updates** &#40;get status updates for a given exchange &#40;beta&#41;&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_exchanges_status_updates_by_id&#40;&#41;)\n\n[//]: # (  ```)\n* **/exchanges/{id}/volume_chart** (get volume_chart data for a given exchange)\n  ```python\n  cg.get_exchanges_volume_chart_by_id()\n  ```\n</details>\n\n[//]: # (<details><summary>finance</summary>)\n\n[//]: # (<p>)\n\n[//]: # ()\n[//]: # (* **/finance_platforms** &#40;list all finance platforms&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_finance_platforms&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (* **/finance_products** &#40;list all finance products&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_finance_products&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (</details>)\n\n<details><summary>indexes</summary>\n<p>\n\n* **/indexes** (list all market indexes)\n```python\ncg.get_indexes()\n```\n* **/indexes/{market_id}/{id}** (get market index by market id and index id)\n```python\ncg.get_indexes_by_market_id_and_index_id()\n```\n* **/indexes/list** (list market indexes id and name)\n```python\ncg.get_indexes_list()\n```\n</details>\n\n<details><summary>derivatives</summary>\n<p>\n\n* **/derivatives** (list all derivative tickers)\n  ```python\n  cg.get_derivatives()\n  ```\n* **/derivatives/exchanges** (list all derivative exchanges)\n  ```python\n  cg.get_derivatives_exchanges()\n  ```\n* **/derivatives/exchanges/{id}** (show derivative exchange data)\n  ```python\n  cg.get_derivatives_exchanges_by_id()\n  ```\n* **/derivatives/exchanges/list** (list all derivative exchanges name and identifier)\n  ```python\n  cg.get_derivatives_exchanges_list()\n  ```\n</details>\n\n<details><summary>nfts (beta)</summary>\n<p>\n\n* **/nfts/list** (list all supported nft ids, paginated by 100 items per page, paginated to 100 items)\n  ```python\n  cg.get_nfts_list()\n  ```\n* **/nfts/{id}** (get current data (name, price_floor, volume_24h ...) for an nft collection. native_currency (string) is only a representative of the currency.)\n  ```python\n  cg.get_nfts_by_id()\n  ```\n* **/nfts/{asset_platform_id}/contract/{contract_address}** (get current data (name, price_floor, volume_24h ...) for an nft collection. native_currency (string) is only a representative of the currency)\n  ```python\n  cg.get_nfts_collection_by_asset_platform_id_and_contract_address()\n  ```\n</details>\n\n[//]: # (<details><summary>status_updates</summary>)\n\n[//]: # (<p>)\n\n[//]: # ()\n[//]: # (* **/status_updates** &#40;list all status_updates with data &#40;description, category, created_at, user, user_title and pin&#41;&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_status_updates&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (</details>)\n\n[//]: # (<details><summary>events</summary>)\n\n[//]: # (<p>)\n\n[//]: # ()\n[//]: # (* **/events** &#40;get events, paginated by 100&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_events&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (* **/events/countries** &#40;get list of event countries&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_events_countries&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (* **/events/types** &#40;get list of events types&#41;)\n\n[//]: # (  ```python)\n\n[//]: # (  cg.get_events_types&#40;&#41;)\n\n[//]: # (  ```)\n\n[//]: # (</details>)\n\n<details><summary>exchange_rates</summary>\n<p>\n\n* **/exchange_rates** (get btc-to-currency exchange rates)\n  ```python\n  cg.get_exchange_rates()\n  ```\n</details>\n\n<details><summary>search</summary>\n<p>\n\n* **/search** (search for coins, categories and markets on coingecko)\n  ```python\n  cg.search()\n  ```\n</details>\n\n<details><summary>trending</summary>\n<p>\n\n* **/search/trending** (get trending search coins (top-7) on coingecko in the last 24 hours)\n  ```python\n  cg.get_search_trending()\n  ```\n</details>\n\n<details><summary>global</summary>\n<p>\n\n  - **/global** (get cryptocurrency global data)\n    ```python\n    cg.get_global()\n    ```\n  - **/global/decentralized_finance_defi** (get cryptocurrency global decentralized finance(defi) data)\n    ```python\n    cg.get_global_decentralized_finance_defi()\n    ```\n</details>\n\n<details><summary>companies (beta)</summary>\n<p>\n\n  - **/companies/public_treasury/{coin_id}** (get public companies data)\n    ```python\n    cg.get_companies_public_treasury_by_coin_id()\n    ```\n</details>\n\n### test\n\n#### installation\ninstall required packages for testing using:\n```bash\npip install pytest responses\n```\n\n#### usage\n\nrun unit tests with:\n\n```\n# after installing pytest and responses using pip3\npytest tests\n```\n\n## license\n[mit](https://choosealicense.com/licenses/mit/)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pycoingecko",
  "package_url": "https://pypi.org/project/pycoingecko/",
  "project_url": "https://pypi.org/project/pycoingecko/",
  "project_urls": {
    "Homepage": "https://github.com/man-c/pycoingecko"
  },
  "release_url": "https://pypi.org/project/pycoingecko/3.1.0/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": "",
  "summary": "python wrapper around the coingecko api",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "christoforou_manolis",
    "emchristoforou@gmail.com"
  ],
  "kwds": "pycoingecko coingeckoapi pip3 coingecko python3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pycoingecko",
  "homepage": "https://github.com/man-c/pycoingecko",
  "release_count": 17,
  "dependency_ids": [
    "pypi_requests"
  ]
}
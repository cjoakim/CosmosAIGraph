{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development :: build tools",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing"
  ],
  "description": "*doit* comes from the idea of bringing the power of build-tools to execute any\nkind of task\n\n*doit* can be uses as a simple **task runner** allowing you to easily define ad hoc\ntasks, helping you to organize all your project related tasks in an unified\neasy-to-use & discoverable way.\n\n*doit* scales-up with an efficient execution model like a **build-tool**.\n*doit* creates a dag (direct acyclic graph) and is able to cache task results.\nit ensures that only required tasks will be executed and in the correct order\n(aka incremental-builds).\n\nthe *up-to-date* check to cache task results is not restricted to looking for\nfile modification on dependencies.  nor it requires \"target\" files.\nso it is also suitable to handle **workflows** not handled by traditional build-tools.\n\ntasks' dependencies and creation can be done dynamically during it is execution\nmaking it suitable to drive complex workflows and **pipelines**.\n\n*doit* is build with a plugin architecture allowing extensible commands, custom\noutput, storage backend and \"task loader\". it also provides an api allowing\nusers to create new applications/tools leveraging *doit* functionality like a framework.\n\n*doit* is a mature project being actively developed for more than 10 years.\nit includes several extras like: parallel execution, auto execution (watch for file\nchanges), shell tab-completion, dag visualisation, ipython integration, and more.\n\n\n\nsample code\n===========\n\ndefine functions returning python dict with task's meta-data.\n\nsnippet from `tutorial <http://pydoit.org/tutorial-1.html>`_:\n\n.. code:: python\n\n  def task_imports():\n      \"\"\"find imports from a python module\"\"\"\n      for name, module in pkg_modules.by_name.items():\n          yield {\n              'name': name,\n              'file_dep': [module.path],\n              'actions': [(get_imports, (pkg_modules, module.path))],\n          }\n\n  def task_dot():\n      \"\"\"generate a graphviz's dot graph from module imports\"\"\"\n      return {\n          'targets': ['requests.dot'],\n          'actions': [module_to_dot],\n          'getargs': {'imports': ('imports', 'modules')},\n          'clean': true,\n      }\n\n  def task_draw():\n      \"\"\"generate image from a dot file\"\"\"\n      return {\n          'file_dep': ['requests.dot'],\n          'targets': ['requests.png'],\n          'actions': ['dot -tpng %(dependencies)s -o %(targets)s'],\n          'clean': true,\n      }\n\n\nrun from terminal::\n\n  $ doit list\n  dot       generate a graphviz's dot graph from module imports\n  draw      generate image from a dot file\n  imports   find imports from a python module\n  $ doit\n  .  imports:requests.models\n  .  imports:requests.__init__\n  .  imports:requests.help\n  (...)\n  .  dot\n  .  draw\n\n\nproject details\n===============\n\n - website & docs - `http://pydoit.org <http://pydoit.org>`_\n - project management on github - `https://github.com/pydoit/doit <https://github.com/pydoit/doit>`_\n - discussion group - `https://groups.google.com/forum/#!forum/python-doit <https://groups.google.com/forum/#!forum/python-doit>`_\n - news/twitter - `https://twitter.com/pydoit <https://twitter.com/pydoit>`_\n - plugins, extensions and projects based on doit - `https://github.com/pydoit/doit/wiki/powered-by-doit <https://github.com/pydoit/doit/wiki/powered-by-doit>`_\n\nlicense\n=======\n\nthe mit license\ncopyright (c) 2008-2022 eduardo naufel schettino",
  "docs_url": null,
  "keywords": "build make task automation pipeline task-runner",
  "license": "mit",
  "name": "doit",
  "package_url": "https://pypi.org/project/doit/",
  "project_url": "https://pypi.org/project/doit/",
  "project_urls": {
    "Documentation": "https://pydoit.org/",
    "Homepage": "http://pydoit.org",
    "Source": "https://github.com/pydoit/doit/",
    "Tracker": "https://github.com/pydoit/doit/issues"
  },
  "release_url": "https://pypi.org/project/doit/0.36.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "doit - automation tool",
  "version": "0.36.0",
  "releases": [],
  "developers": [
    "eduardo_naufel_schettino",
    "schettino72@gmail.com"
  ],
  "kwds": "builds tasks task_imports pipelines pipeline",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_doit",
  "homepage": "http://pydoit.org",
  "release_count": 48,
  "dependency_ids": []
}
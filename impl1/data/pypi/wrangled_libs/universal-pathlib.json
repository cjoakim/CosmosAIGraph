{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# universal pathlib\n\n[![pypi](https://img.shields.io/pypi/v/universal_pathlib.svg)](https://pypi.org/project/universal_pathlib/)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/universal_pathlib)](https://pypi.org/project/universal_pathlib/)\n[![pypi - license](https://img.shields.io/pypi/l/universal_pathlib)](https://github.com/fsspec/universal_pathlib/blob/main/license)\n[![conda (channel only)](https://img.shields.io/conda/vn/conda-forge/universal_pathlib?label=conda)](https://anaconda.org/conda-forge/universal_pathlib)\n\n[![tests](https://github.com/fsspec/universal_pathlib/actions/workflows/tests.yml/badge.svg)](https://github.com/fsspec/universal_pathlib/actions/workflows/tests.yml)\n[![github issues](https://img.shields.io/github/issues/fsspec/universal_pathlib)](https://github.com/fsspec/universal_pathlib/issues)\n[![codestyle black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![changelog](https://img.shields.io/badge/changelog-keep%20a%20changelog-%23e05735)](./changelog.md)\n\nuniversal pathlib is a python library that aims to extend python's built-in [`pathlib.path`](https://docs.python.org/3/library/pathlib.html) api to use a variety of backend filesystems using [`fsspec`](https://filesystem-spec.readthedocs.io/en/latest/intro.html)\n\n## installation\n\n### pypi\n\n```bash\npython -m pip install universal_pathlib\n```\n\n### conda\n\n```bash\nconda install -c conda-forge universal_pathlib\n```\n\n## basic usage\n\n```pycon\n# pip install universal_pathlib s3fs\n>>> from upath import upath\n>>>\n>>> s3path = upath(\"s3://test_bucket\") / \"example.txt\"\n>>> s3path.name\nexample.txt\n>>> s3path.stem\nexample\n>>> s3path.suffix\n.txt\n>>> s3path.exists()\ntrue\n>>> s3path.read_text()\n'hello world'\n```\n\nfor more examples, see the [example notebook here](notebooks/examples.ipynb)\n\n### currently supported filesystems (and schemes)\n\n- `file:` local filessystem\n- `memory:` ephemeral filesystem in ram\n- `az:`, `adl:`, `abfs:` and `abfss:` azure storage (requires `adlfs` to be installed)\n- `http:` and `https:` http(s)-based filesystem\n- `hdfs:` hadoop distributed filesystem\n- `gs:` and `gcs:` google cloud storage (requires `gcsfs` to be installed)\n- `s3:` and `s3a:` aws s3 (requires `s3fs` to be installed)\n- `webdav+http:` and `webdav+https:` webdav-based filesystem on top of http(s) (requires `webdav4[fsspec]` to be installed)\n\nother fsspec-compatible filesystems may also work, but are not supported and tested.\ncontributions for new filesystems are welcome!\n\n### class hierarchy\n\nthe individual `upath` subclasses relate in the following way with `pathlib` classes:\n\n```mermaid\nflowchart tb\n  subgraph s0[pathlib]\n    a---> b\n    a--> ap\n    a--> aw\n\n    b--> bp\n    ap---> bp\n    b--> bw\n    aw---> bw\n  end\n  subgraph s1[upath]\n    b ---> u\n    u --> up\n    u --> uw\n    bp --> up\n    bw --> uw\n    u --> ul\n    u --> us3\n    u --> uh\n    u -.-> uo\n  end\n\n  a(purepath)\n  ap(pureposixpath)\n  aw(purewindowspath)\n  b(path)\n  bp(posixpath)\n  bw(windowspath)\n\n  u(upath)\n  up(posixupath)\n  uw(windowsupath)\n  ul(localpath)\n  us3(s3path)\n  uh(httppath)\n  uo(...path)\n\n  classdef np fill:#f7f7f7,stroke:#2166ac,stroke-width:2px,color:#333\n  classdef nu fill:#f7f7f7,stroke:#b2182b,stroke-width:2px,color:#333\n\n  class a,ap,aw,b,bp,bw,up,uw np\n  class u,ul,us3,uh,uo nu\n\n  style uo stroke-dasharray: 3 3\n\n  style s0 fill:none,stroke:#0571b0,stroke-width:3px,stroke-dasharray: 3 3,color:#0571b0\n  style s1 fill:none,stroke:#ca0020,stroke-width:3px,stroke-dasharray: 3 3,color:#ca0020\n```\n\nwhen instantiating `upath` the returned instance type depends on the path that was provided to the constructor.\nfor \"uri\"-style paths, `upath` returns a subclass instance corresponding to the supported `fsppec` protocol, defined\nby the uri-scheme. if there is no specialized subclass implementation available, `upath` with return a `upath` instance\nand raise a warning that the protocol is currently not being tested in the test-suite, and correct behavior is not\nguaranteed.\nif a local path is provided, `upath` will return a `posixupath` or `windowsupath` instance.\nthese two subclasses are 100% compatible with the `posixpath` and `windowspath` classes of their\nspecific python version, and are tested against all relevant tests of the cpython pathlib test-suite.\n\n### upath public class api\n\n`upath`'s public class interface is identical to `pathlib.path` with the addition of the following attributes:\n\n- `upath(...).protocol: str` the filesystem_spec protocol _(note: for `posixupath` and `windowsupath` it's an empty string)_\n- `upath(...).storage_options: dict[str, any]` the storage options for instantiating the filesystem_spec class\n- `upath(...).path: str` the filesystem_spec compatible path for use with filesystem instances\n- `upath(...).fs: abstractfilesystem` convenience attribute to access an instantiated filesystem\n\nthe first three provide a public interface to access a file via fsspec as follows:\n\n```python\nfrom upath import upath\nfrom fsspec import filesystem\n\np = upath(\"s3://bucket/file.txt\", anon=true)\n\nfs = filesystem(p.protocol, **p.storage_options)  # equivalent to p.fs\nwith fs.open(p.path) as f:\n    data = f.read()\n```\n\n### register custom upath implementations\n\nin case you develop a custom upath implementation, feel free to open an issue to discuss integrating it\nin `universal_pathlib`. you can dynamically register your implementation too! here are your options:\n\n#### dynamic registration from python\n\n```python\n# for example: mymodule/submodule.py\nfrom upath import upath\nfrom upath.registry import register_implementation\n\nmy_protocol = \"myproto\"\nclass mypath(upath):\n    ...  # your custom implementation\n\nregister_implementation(my_protocol, mypath)\n```\n\n#### registration via entry points\n\n```toml\n# pyproject.toml\n[project.entry-points.\"unversal_pathlib.implementations\"]\nmyproto = \"my_module.submodule:mypath\"\n```\n\n```ini\n# setup.cfg\n[options.entry_points]\nuniversal_pathlib.implementations =\n    myproto = my_module.submodule:mypath\n```\n\n### known issues solvable by installing newer upstream dependencies\n\nsome issues in upath's behavior with specific filesystems can be fixed by installing newer versions of\nthe dependencies. the following list will be kept up to date whenever we encounter more:\n\n- **upath().glob()** fsspec fixed its glob behavior when handling `**` patterns in versions `fsspec>=2023.9.0`\n- **gcspath().mkdir()** a few mkdir quirks are solved by installing `gcsfs>=2022.7.1`\n- **fsspec.filesystem(webdavpath().protocol)** the webdav protocol was added to fsspec in version `fsspec>=2022.5.0`\n\n## contributing\n\ncontributions are very welcome.\nto learn more, see the [contributor guide](contributing.rst).\n\n## license\n\ndistributed under the terms of the [mit license](license),\n*universal_pathlib* is free and open source software.\n\n## issues\n\nif you encounter any problems,\nplease [file an issue](https://github.com/fsspec/universal_pathlib/issues) along with a detailed description.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "universal-pathlib",
  "package_url": "https://pypi.org/project/universal-pathlib/",
  "project_url": "https://pypi.org/project/universal-pathlib/",
  "project_urls": {
    "Homepage": "https://github.com/fsspec/universal_pathlib"
  },
  "release_url": "https://pypi.org/project/universal-pathlib/0.1.4/",
  "requires_dist": [
    "fsspec >=2022.1.0",
    "pytest ==7.3.2 ; extra == 'dev'",
    "pytest-sugar ==0.9.6 ; extra == 'dev'",
    "pytest-cov ==4.1.0 ; extra == 'dev'",
    "pytest-mock ==3.11.1 ; extra == 'dev'",
    "pylint ==2.17.4 ; extra == 'dev'",
    "mypy ==1.3.0 ; extra == 'dev'",
    "packaging ; extra == 'dev'",
    "adlfs ; extra == 'dev'",
    "aiohttp ; extra == 'dev'",
    "requests ; extra == 'dev'",
    "gcsfs ; extra == 'dev'",
    "s3fs ; extra == 'dev'",
    "moto[s3,server] ; extra == 'dev'",
    "webdav4[fsspec] ; extra == 'dev'",
    "wsgidav ; extra == 'dev'",
    "cheroot ; extra == 'dev'",
    "hadoop-test-cluster ; extra == 'dev'",
    "pyarrow ; extra == 'dev'",
    "pydantic ; extra == 'dev'",
    "pydantic-settings ; extra == 'dev'",
    "pytest ==7.3.2 ; extra == 'tests'",
    "pytest-sugar ==0.9.6 ; extra == 'tests'",
    "pytest-cov ==4.1.0 ; extra == 'tests'",
    "pytest-mock ==3.11.1 ; extra == 'tests'",
    "pylint ==2.17.4 ; extra == 'tests'",
    "mypy ==1.3.0 ; extra == 'tests'",
    "packaging ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "pathlib api extended to use fsspec backends",
  "version": "0.1.4",
  "releases": [],
  "developers": [
    "andrewfulton9@gmail.com"
  ],
  "kwds": "universal_pathlib pathlib unversal_pathlib pyversions pycon",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_universal_pathlib",
  "homepage": "https://github.com/fsspec/universal_pathlib",
  "release_count": 25,
  "dependency_ids": [
    "pypi_adlfs",
    "pypi_aiohttp",
    "pypi_cheroot",
    "pypi_fsspec",
    "pypi_gcsfs",
    "pypi_hadoop_test_cluster",
    "pypi_moto",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pyarrow",
    "pypi_pydantic",
    "pypi_pydantic_settings",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_sugar",
    "pypi_requests",
    "pypi_s3fs",
    "pypi_webdav4",
    "pypi_wsgidav"
  ]
}
{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: repoze public license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "venusian\n========\n\n.. image:: https://github.com/pylons/venusian/workflows/build%20and%20test/badge.svg\n    :target: https://github.com/pylons/venusian/actions?query=workflow%3a%22build+and+test%22\n\n.. image:: https://readthedocs.org/projects/venusian/badge/?version=latest\n        :target: https://docs.pylonsproject.org/projects/venusian/en/latest/\n        :alt: documentation status\n\nvenusian is a library which allows framework authors to defer\ndecorator actions.  instead of taking actions when a function (or\nclass) decorator is executed at import time, you can defer the action\nusually taken by the decorator until a separate \"scan\" phase.\n\nsee the \"docs\" directory of the package or the online documentation at\nhttps://docs.pylonsproject.org/projects/venusian/en/latest/\n\n3.1.0 (2023-11-06)\n------------------\n\n- remove support for python 3.5 and 3.6\n\n- add support for python 3.9, 3.10, 3.11 and 3.12.\n\n- use github actions instead of travis.\n\n3.0.0 (2019-10-04)\n------------------\n\n- this release matches 2.0.0 other than in the version number. this fixes an\n  issue with requires-python metadata not being uploaded correctly to pypi.\n\n  this version is only compatible with python 3.5+\n\n2.0.0 (2019-10-04)\n------------------\n\n- drop support for python 2.7, 3.3, and 3.4\n\n- removed the usage of the ``imp`` module to squelch the warnings regarding a\n  deprecated modules. see https://github.com/pylons/venusian/pull/63 and\n  https://github.com/pylons/venusian/issues/57\n\n1.2.0 (2019-01-08)\n------------------\n\n- add support for python 3.7.\n\n- drop support for python 3.3.\n\n1.1.0 (2017-04-24)\n------------------\n\n- updated to using py.test instead of nosetest, and added support for python\n  3.4 -> 3.6\n\n- make scanning more resilient of metaclasses that return proxies for any\n  attribute access.\n\n- fix bug where using the same venusian decorator on both a class and its\n  methods would cause the method decorations to be ignored. see\n  https://github.com/pylons/venusian/issues/40\n\n- drop support for python 2.6.\n\n- drop support for python 3.2:  it is no longer supported by current\n  packaging / ci tools.\n\n- support loaders that require the module name as argument to their\n  ``get_filename()`` method. this fixes problems with zipped packages\n  on python 3.\n\n- micro-optimization when ignores are used (see\n  https://github.com/pylons/venusian/pull/20).\n\n- a tox run now combines coverage between py2 and py3.\n\n1.0 (2014-06-30)\n----------------\n\n- fix an issue under pypy > 2.0 where attached decorators may not be found.\n\n- drop support of python 2.4 / 2.5 / jython.\n\n- add ``lift`` and ``onlyliftedfrom`` class decorators to allow for inheritance\n  of venusian decorators attached to superclass methods.  see the api\n  documentation for more information.\n\n- fix bug where otherwise undecorated subclass of a superclass that had\n  venusian decorators on it would inherit its superclass' decorations.\n  venusian decorators should have never been inherited implicitly.  see\n  https://github.com/pylons/venusian/issues/11#issuecomment-4977352\n\n1.0a8 (2013-04-15)\n------------------\n\n- pass ``ignore`` argument along recursively to ``walk_packages`` so custom\n  ignore functions will ignore things recursively.  see\n  https://github.com/pylons/venusian/pull/16\n\n- don't run tox tests under python 2.4 anymore (tox no longer supports 2.4).\n\n1.0a7 (2012-08-25)\n------------------\n\n- venusian now works on python 3.3b2+ (importlib-based).\n\n- use nose-exclude instead of relying on fragile module-scope code to ensure\n  we don't get errors resulting from import of fixture code during\n  \"nosetests\".\n\n- bug fix: no longer suppress ``importerror`` while scanning by default.  if\n  you want to suppress ``importerror`` while scanning, you'll now need use an\n  ``onerror`` callback as described in the documentation.\n\n1.0a6 (2012-04-23)\n------------------\n\n- don't ignore decorated objects within their original locations if they\n  happen to be imported into another module (remove ``seen`` set from invoke\n  in venusian scanning).  see https://github.com/pylons/venusian/pull/13 .\n\n1.0a5 (2012-04-21)\n------------------\n\n- slightly less sucky way to ignore objects during scanning that are only\n  imported into a module but not actually defined there.  see 1.0a4 change\n  notes for rationale.  now instead of checking whether the module of the\n  *scanned object* matches the module being scanned, we check whether the\n  module of the *venusian attachment* matches the module being scanned.  this\n  allows some genuine uses of imported objects as venusian scan targets while\n  preventing inappropriate double-scanning of objects that have a venusian\n  attachment which just happen to be imported into other scanned modules.\n\n- add ``dev`` and ``docs`` setup.py commands (ala pyramid).\n\n1.0a4 (2012-04-16)\n------------------\n\n- attempt to ignore objects during scanning that are only imported into a\n  module but not actually defined there.  this is a semantics change, but\n  it's the right thing to do, because i found myself facing a situation like\n  this::\n\n    # in a module named \"one\"\n\n    from two import anotheradecoratedthing\n    @adecorator\n    def adecoratedthing(): pass\n\n    # and scanning both modules\n    scan('one')\n    scan('two')\n\n  in this case you'd wind up with two repeated registrations for\n  \"anotherdecoratedthing\", which isn't what anyone expects.\n\n1.0a3 (2012-02-08)\n------------------\n\n- add an ``ignore`` argument to the ``scan`` method of a ``scanner``.  this\n  argument allows a user to ignore packages, modules, and global objects by\n  name during a ``scan``.  see the \"ignore scan argument\" in the narrative\n  documentation for more details.\n\n1.0a2 (2011-09-02)\n------------------\n\n- close imploader file handle to avoid resource warnings on python 3.\n\n1.0a1 (2011-08-27)\n------------------\n\n- python 3 compatibility.\n\n- allow an ``onerror`` callback to be passed to ``scanner.scan()``.\n\n0.9 (2011-06-18)\n----------------\n\n- prevent corner case scan-time exception when trying to introspect insane\n  module-scope objects.  see https://github.com/pylons/venusian/issues/5 .\n\n0.8 (2011-04-30)\n----------------\n\n- normal \"setup.py test\" can't support running the venusian tests under py\n  2.4 or 2.5; when it scans the 'classdecorators' fixture, it barfs.  to get\n  around this, we used to depend on ``nose`` in ``setup_requires`` and tell\n  \"setup.py test\" to use nose by setting test_suite to \"nose.collector\" but\n  we can't anymore because folks use venusian in systems which install from\n  pip bundles; pip bundles do not support setup_requires.  so, sorry, we're\n  painted into a corner; at this point you just have to know to install nose\n  and run \"setup.py nosetests\" rather than \"setup.py test\".  or just run\n  \"tox\" which tests it under all pythons.\n\n0.7 (2011-03-16)\n----------------\n\n- use pylons theme in documentation.\n\n- fix orphaned pyc test on pypy.\n\n- fix github issue #1: subclasses of decorated classes that do not\n  have any decorations should not inherit the decorations of their\n  parent classes. \n\n- fix github issue #2: scans should only \"find\" each object once per\n  scan, regardless of how many modules that object is imported into.\n\n0.6 (2011-01-09)\n----------------\n\n- some metaclasses (elixir's) don't raise an attributeerror when asked for a\n  nonexistent attribute during a scan.  we now catch all exceptions when\n  interrogating an object for ``__venusian_callbacks__`` rather than just\n  attributeerror.\n\n0.5 (2010-12-19)\n----------------\n\n- make ``codeinfo`` attribute available as an attribute of the attachinfo\n  object. it will be a tuple in the form ``(filename, lineno, function,\n  sourceline)`` representing the context of the venusian decorator.  eg.\n  ``('/home/chrism/projects/venusian/tests/test_advice.py', 81,\n  'testcallinfo', 'add_handler(foo, bar)')``\n\n0.4 (2010-09-03)\n----------------\n\n- bug fix: when a venusian decorator used as a class decorator was\n  used against both a class *and* a subclass of that class, the\n  superclass and subclass would effectively share the same set of\n  callbacks.  this was not the intent: each class declaration should\n  have its own local set of callbacks; callbacks added via decorations\n  should not be inherited, and a superclass should not receive its\n  subclass' decorations.\n\n- arrange test fixtures into a single directory.\n\n0.3 (2010-06-24)\n----------------\n\n- ignore orphaned modules (``.pyc`` or ``.pyo`` files without a\n  corresponding ``.py`` file) during a scan.\n\n0.2 (2010-04-18)\n----------------\n\n- add the concept of scan categories (see the \"scan categories\"\n  section of the documentation) to allow an application to make use of\n  more than one venusian-using framework simultaneously.\n\n0.1 (2010-02-15)\n----------------\n\n- initial release.\n",
  "docs_url": null,
  "keywords": "web wsgi zope",
  "license": "bsd-derived (repoze)",
  "name": "venusian",
  "package_url": "https://pypi.org/project/venusian/",
  "project_url": "https://pypi.org/project/venusian/",
  "project_urls": {
    "Homepage": "https://pylonsproject.org/"
  },
  "release_url": "https://pypi.org/project/venusian/3.1.0/",
  "requires_dist": [
    "Sphinx >=4.3.2 ; extra == 'docs'",
    "repoze.sphinx.autointerface ; extra == 'docs'",
    "pylons-sphinx-themes ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "pytest ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "coverage ; extra == 'testing'"
  ],
  "requires_python": ">=3.7",
  "summary": "a library for deferring decorator actions",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "chris_mcdonough",
    "pylons-devel@googlegroups.com"
  ],
  "kwds": "__venusian_callbacks__ wsgi py3 py2 pylonsproject",
  "license_kwds": "bsd-derived (repoze)",
  "libtype": "pypi",
  "id": "pypi_venusian",
  "homepage": "https://pylonsproject.org/",
  "release_count": 23,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_pylons_sphinx_themes",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_repoze.sphinx.autointerface",
    "pypi_sphinx",
    "pypi_sphinx_copybutton"
  ]
}
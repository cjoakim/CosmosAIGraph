{
  "classifiers": [
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "this package lets you use real python (pep435_-style) enums with django.\n\n.. image:: https://travis-ci.org/hzdg/django-enumfields.svg?branch=master\n    :target: https://travis-ci.org/hzdg/django-enumfields\n\n.. image:: https://img.shields.io/pypi/v/django-enumfields.svg\n    :target: https://pypi.python.org/pypi/django-enumfields\n\n.. image:: https://img.shields.io/pypi/pyversions/django-enumfields.svg\n    :target: https://pypi.python.org/pypi/django-enumfields/\n\ninstallation\n------------\n\n1. ``pip install django-enumfields``\n\n\nincluded tools\n--------------\n\n\nenumfield, enumintegerfield\n```````````````````````````\n\n.. code-block:: python\n\n    from enumfields import enumfield\n    from enum import enum\n\n    class color(enum):\n        red = 'r'\n        green = 'g'\n        blue = 'b'\n\n    class mymodel(models.model):\n\n        color = enumfield(color, max_length=1)\n\nelsewhere:\n\n.. code-block:: python\n\n    m = mymodel.objects.filter(color=color.red)\n\n``enumintegerfield`` works identically, but the underlying storage mechanism is\nan ``integerfield`` instead of a ``charfield``.\n\n\nusage in forms\n~~~~~~~~~~~~~~\n\ncall the ``formfield`` method to use an ``enumfield`` directly in a ``form``.\n\n.. code-block:: python\n\n    class myform(forms.form):\n\n        color = enumfield(color, max_length=1).formfield()\n\nenum\n````\n\nnormally, you just use normal pep435_-style enums, however, django-enumfields\nalso includes its own version of enum with a few extra bells and whistles.\nnamely, the smart definition of labels which are used, for example, in admin\ndropdowns. by default, it will create labels by title-casing your constant\nnames. you can provide custom labels with a nested \"labels\" class.\n\n.. code-block:: python\n\n    from enumfields import enumfield, enum  # our own enum class\n\n    class color(enum):\n        red = 'r'\n        green = 'g'\n        blue = 'b'\n\n        class labels:\n            red = 'a custom label'\n\n    class mymodel(models.model):\n        color = enumfield(color, max_length=1)\n\n    assert color.green.label == 'green'\n    assert color.red.label == 'a custom label'\n\n\n.. _pep435: http://www.python.org/dev/peps/pep-0435/\n\n\nenumfieldlistfilter\n```````````````````\n\n``enumfields.admin.enumfieldlistfilter`` is provided to allow using enums in\n``list_filter``.\n\n\n.. code-block:: python\n\n    from enumfields.admin import enumfieldlistfilter\n\n    class mymodeladmin(admin.modeladmin):\n        list_filter = [('color', enumfieldlistfilter)]\n\ndjango rest framework integration\n`````````````````````````````````\n\n``enumsupportserializermixin`` mixin allows you to use enums in drf serializers.\n\n\n.. code-block:: python\n\n    # models.py\n    from enumfields import enumfield\n    from enum import enum\n\n    class color(enum):\n        red = 'r'\n        green = 'g'\n        blue = 'b'\n\n    class mymodel(models.model):\n        color = enumfield(color, max_length=1)\n\n\n    # serializers.py\n    from enumfields.drf.serializers import enumsupportserializermixin\n    from rest_framework import serializers\n    from .models import mymodel\n\n    class mymodelserializer(enumsupportserializermixin, serializers.modelserializer):\n        class meta:\n            model = mymodel\n            fields = '__all__'\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-enumfields",
  "package_url": "https://pypi.org/project/django-enumfields/",
  "project_url": "https://pypi.org/project/django-enumfields/",
  "project_urls": {
    "Homepage": "https://github.com/hzdg/django-enumfields"
  },
  "release_url": "https://pypi.org/project/django-enumfields/2.1.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "real python enums for django.",
  "version": "2.1.1",
  "releases": [],
  "developers": [
    "hzdg",
    "webmaster@hzdg.com"
  ],
  "kwds": "enumfields enumfield enumfieldlistfilter enumintegerfield enums",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_enumfields",
  "homepage": "https://github.com/hzdg/django-enumfields",
  "release_count": 31,
  "dependency_ids": []
}
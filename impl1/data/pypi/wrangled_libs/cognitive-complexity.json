{
  "classifiers": [
    "environment :: console",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "# congnitive-complexity\n\n[![build status](https://travis-ci.org/melevir/cognitive_complexity.svg?branch=master)](https://travis-ci.org/melevir/cognitive_complexity)\n[![maintainability](https://api.codeclimate.com/v1/badges/853d47d353e7becc9f09/maintainability)](https://codeclimate.com/github/melevir/cognitive_complexity/maintainability)\n[![test coverage](https://api.codeclimate.com/v1/badges/853d47d353e7becc9f09/test_coverage)](https://codeclimate.com/github/melevir/cognitive_complexity/test_coverage)\n[![pypi version](https://badge.fury.io/py/cognitive-complexity.svg)](https://badge.fury.io/py/cognitive-complexity)\n![pypi - python version](https://img.shields.io/pypi/pyversions/cognitive-complexity)\n\nlibrary to calculate python functions cognitive complexity via code.\n\n## installation\n\n```bash\npip install cognitive_complexity\n```\n\n## usage\n\n```python\n>>> import ast\n\n>>> funcdef = ast.parse(\"\"\"\n... def f(a):\n...     return a * f(a - 1)  # +1 for recursion\n... \"\"\").body[0]\n\n>>> from cognitive_complexity.api import get_cognitive_complexity\n>>> get_cognitive_complexity(funcdef)\n1\n```\n\n### flake8-cognitive-complexity extension\n\nperhaps the most common way to use this library (especially if you are\nalready using the [flake8 linter](https://flake8.pycqa.org/en/latest/))\nis to use the\n[flake8-cognitive-complexity extension](https://github.com/melevir/flake8-cognitive-complexity).\nif you run flake8 with this extension installed, flake8 will let you know\nif your code is too complex. for more details and documentation, visit the\n[flake8-cognitive-complexity extension repository](https://github.com/melevir/flake8-cognitive-complexity).\n\n## what is cognitive complexity\n\nhere are some readings about cognitive complexity:\n\n- [cognitive complexity, because testability != understandability](https://blog.sonarsource.com/cognitive-complexity-because-testability-understandability);\n- [cognitive complexity: a new way of measuring understandability](https://www.sonarsource.com/docs/cognitivecomplexity.pdf),\n  white paper by g. ann campbell;\n- [cognitive complexity: the new guide to refactoring for maintainable code](https://www.youtube.com/watch?v=5c6agtlksjy);\n- [cognitive complexity](https://docs.codeclimate.com/docs/cognitive-complexity)\n  from codeclimate docs;\n- [is your code readable by humans? cognitive complexity tells you](https://www.tomasvotruba.cz/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/).\n\n## realization details\n\nthis is not precise realization of original algorithm\nproposed by [g. ann campbell](https://github.com/ganncamp),\nbut it gives rather similar results.\nthe algorithm gives complexity points for breaking control flow, nesting,\nrecursion, stacks logic operation etc.\n\n## contributing\n\nwe would love you to contribute to our project. it's simple:\n\n- create an issue with bug you found or proposal you have. wait for\n  approve from maintainer.\n- create a pull request. make sure all checks are green.\n- fix review comments if any.\n- be awesome.\n\nhere are useful tips:\n\n- you can run all checks and tests with `make check`. please do it\n  before travisci does.\n- we use [bestdoctor python styleguide](https://github.com/best-doctor/guides/blob/master/guides/python_styleguide.md).\n  sorry, styleguide is available only in russian for now.\n- we respect [django coc](https://www.djangoproject.com/conduct/).\n  make soft, not bullshit.",
  "docs_url": null,
  "keywords": "flake8",
  "license": "mit",
  "name": "cognitive-complexity",
  "package_url": "https://pypi.org/project/cognitive-complexity/",
  "project_url": "https://pypi.org/project/cognitive-complexity/",
  "project_urls": {
    "Homepage": "https://github.com/Melevir/cognitive_complexity"
  },
  "release_url": "https://pypi.org/project/cognitive-complexity/1.3.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "library to calculate python functions cognitive complexity via code",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "ilya_lebedev",
    "melevir@gmail.com"
  ],
  "kwds": "get_cognitive_complexity flake8 cognitive_complexity testability funcdef",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cognitive_complexity",
  "homepage": "https://github.com/melevir/cognitive_complexity",
  "release_count": 8,
  "dependency_ids": []
}
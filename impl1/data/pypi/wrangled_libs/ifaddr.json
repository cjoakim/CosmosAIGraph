{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: system :: networking"
  ],
  "description": "ifaddr - enumerate network interfaces/adapters and their ip addresses\n=====================================================================\n\n.. image:: https://github.com/pydron/ifaddr/workflows/ci/badge.svg\n    :target: https://github.com/pydron/ifaddr/actions?query=workflow%3aci+branch%3amaster\n\n.. image:: https://img.shields.io/pypi/v/ifaddr.svg\n    :target: https://pypi.python.org/pypi/ifaddr\n\n.. image:: https://codecov.io/gh/pydron/ifaddr/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/pydron/ifaddr\n\n`ifaddr` is a small python library that allows you to find all the ethernet and\nip addresses of the computer. it is tested on **linux**, **os x**, and\n**windows**. other bsd derivatives like **openbsd**, **freebsd**, and\n**netbsd** should work too, but i haven't personally tested those.\n**solaris/illumos** should also work.\n\nthis library is open source and released under the mit license. it works\nwith python 3.7+.\n\nyou can install it with `pip install ifaddr`. it doesn't need to\ncompile anything, so there shouldn't be any surprises. even on windows.\n\nproject links:\n\n* `ifaddr github page <https://github.com/smurn/ifaddr>`_\n* `ifaddr documentation (although there isn't much to document) <http://pythonhosted.org/ifaddr/>`_\n* `ifaddr on pypi <https://pypi.org/project/ifaddr/>`_\n\n\n----------------------\nlet's get going!\n----------------------\n\n.. code-block:: python\n\n    import ifaddr\n\n    adapters = ifaddr.get_adapters()\n\n    for adapter in adapters:\n        print(\"ips of network adapter \" + adapter.nice_name)\n        for ip in adapter.ips:\n            print(\"   %s/%s\" % (ip.ip, ip.network_prefix))\n\nthis will print::\n\n    ips of network adapter h5321 gw mobile broadband driver\n       ip ('fe80::9:ebdf:30ab:39a3', 0l, 17l)/64\n       ip 169.254.57.163/16\n    ips of network adapter intel(r) centrino(r) advanced-n 6205\n       ip ('fe80::481f:3c9d:c3f6:93f8', 0l, 12l)/64\n       ip 192.168.0.51/24\n    ips of network adapter intel(r) 82579lm gigabit network connection\n       ip ('fe80::85cd:e07e:4f7a:6aa6', 0l, 11l)/64\n       ip 192.168.0.53/24\n    ips of network adapter software loopback interface 1\n       ip ('::1', 0l, 0l)/128\n       ip 127.0.0.1/8\n\nyou get both ipv4 and ipv6 addresses. the later complete with\nflowinfo and scope_id.\n\nif you wish to include network interfaces that do not have a configured ip\naddresss, pass the `include_unconfigured` parameter to `get_adapters()`.\nadapters with no configured ip addresses will have an zero-length `ips`\nproperty.  for example:\n\n.. code-block:: python\n\n    import ifaddr\n\n    adapters = ifaddr.get_adapters(include_unconfigured=true)\n\n    for adapter in adapters:\n        print(\"ips of network adapter \" + adapter.nice_name)\n        if adapter.ips:\n            for ip in adapter.ips:\n                print(\"   %s/%s\" % (ip.ip, ip.network_prefix))\n        else:\n            print(\"  no ips configured\")\n\n\n---------\nchangelog\n---------\n\n0.2.0\n-----\n\n* added an option to include ip-less adapters, thanks to memory\n* fixed a bug where an interface's name was `bytes`, not `str`, on windows\n* added an implementation of `netifaces.interfaces()` (available through\n  `ifaddr.netifaces.interfaces()`)\n* added type hints\n\nbackwards incompatible/breaking changes:\n\n* dropped python 3.6 support\n\n0.1.7\n-----\n\n* fixed python 3 compatibility in the examples, thanks to tristan stenner and josef schlehofer\n* exposed network interface indexes in adapter.index, thanks to dmitry tantsur\n* added the license file to distributions on pypi, thanks to tom\u00e1\u0161 chv\u00e1tal\n* fixed illumos/solaris compatibility based on a patch proposed by jorge schrauwen\n* set up universal wheels, ifaddr will have both source and wheel distributions on pypi from now on\n\n------------\nalternatives\n------------\n\nalastair houghton develops `netifaces  <https://pypi.python.org/pypi/netifaces>`_\nwhich can do  everything this library can, and more. the only drawback is that it needs\nto be compiled, which can make the installation difficult.\n\nas of ifaddr 0.2.0 we implement the equivalent of `netifaces.interfaces()`. it's available through\n`ifaddr.netifaces.interfaces()`.\n\n\n",
  "docs_url": "https://pythonhosted.org/ifaddr/",
  "keywords": "network interfaces,network adapters,network addresses,ip addresses",
  "license": "mit",
  "name": "ifaddr",
  "package_url": "https://pypi.org/project/ifaddr/",
  "project_url": "https://pypi.org/project/ifaddr/",
  "project_urls": {
    "Homepage": "https://github.com/pydron/ifaddr"
  },
  "release_url": "https://pypi.org/project/ifaddr/0.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "cross-platform network interface and ip address enumeration library",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "scm@smurn.org",
    "stefan_c"
  ],
  "kwds": "interfaces network_prefix interface get_adapters addresss",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ifaddr",
  "homepage": "https://github.com/pydron/ifaddr",
  "release_count": 10,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: artistic license",
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: text processing",
    "topic :: text processing :: general",
    "topic :: text processing :: indexing",
    "topic :: text processing :: linguistic"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/fuzzy.svg\n   :target: https://pypi.org/project/fuzzy\n\n.. image:: https://img.shields.io/pypi/pyversions/fuzzy.svg\n\n.. image:: https://img.shields.io/travis/yougov/fuzzy/master.svg\n   :target: http://travis-ci.org/yougov/fuzzy\n\n\nfuzzy is a python library implementing common phonetic algorithms quickly.\ntypically this is in string similarity exercises, but they're pretty versatile.\n\nit uses c extensions (via cython) for speed.\n\nthe algorithms are:\n\n* `soundex <http://en.wikipedia.org/wiki/soundex>`_\n* `nysiis <http://en.wikipedia.org/wiki/nysiis>`_\n* `double metaphone <http://en.wikipedia.org/wiki/metaphone>`_ based on maurice\n  aubrey's c code from his perl implementation.\n\nusage\n=====\n\nthe functions are quite easy to use!\n\n>>> import fuzzy\n>>> soundex = fuzzy.soundex(4)\n>>> soundex('fuzzy')\n'f200'\n>>> dmeta = fuzzy.dmetaphone()\n>>> dmeta('fuzzy')\n['fs', none]\n>>> fuzzy.nysiis('fuzzy')\n'fasy'\n\nperformance\n===========\n\nfuzzy's double metaphone was ~10 times faster than the pure python\nimplementation by  `andrew collins <http://www.atomodo.com/code/double-metaphone>`_\nin some recent `testing <http://chmullig.com/2011/03/pypy-testing/>`_.\nsoundex and nysiis should be similarly faster. using ipython's timeit::\n\n  in [3]: timeit soundex('fuzzy')\n  1000000 loops, best of 3: 326 ns per loop\n\n  in [4]: timeit dmeta('fuzzy')\n  100000 loops, best of 3: 2.18 us per loop\n\n  in [5]: timeit fuzzy.nysiis('fuzzy')\n  100000 loops, best of 3: 13.7 us per loop\n\n\ndistance metrics\n================\n\nwe recommend the `python-levenshtein <http://code.google.com/p/pylevenshtein/>`_\nmodule for fast, c based string distance/similarity metrics. among others\nfunctions it includes:\n\n * `levenshtein <http://en.wikipedia.org/wiki/levenshtein_distance>`_ edit distance\n * `jaro <http://en.wikipedia.org/wiki/jaro_distance>`_ distance\n * `jaro-winkler <http://en.wikipedia.org/wiki/jaro%e2%80%93winkler_distance>`_ distance\n * `hamming distance <http://en.wikipedia.org/wiki/hamming_distance>`_\n\nin testing it's been several times faster than comparable pure python\nimplementations of those algorithms.",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fuzzy",
  "package_url": "https://pypi.org/project/Fuzzy/",
  "project_url": "https://pypi.org/project/Fuzzy/",
  "project_urls": {
    "Homepage": "https://github.com/yougov/Fuzzy"
  },
  "release_url": "https://pypi.org/project/Fuzzy/1.2.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "fast python phonetic algorithms",
  "version": "1.2.2",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "yougov"
  ],
  "kwds": "phonetic fuzzy algorithms metaphone python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fuzzy",
  "homepage": "https://github.com/yougov/fuzzy",
  "release_count": 5,
  "dependency_ids": []
}
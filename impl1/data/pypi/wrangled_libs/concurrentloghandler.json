{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: apache software license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: logging"
  ],
  "description": "overview\n========\nthis module provides an additional log handler for python's standard logging\npackage (pep 282). this handler will write log events to log file which is \nrotated when the log file reaches a certain size.  multiple processes can\nsafely write to the same log file concurrently.\n\ndetails\n=======\n.. _portalocker:  http://code.activestate.com/recipes/65203/\n\nthe ``concurrentrotatingfilehandler`` class is a drop-in replacement for\npython's standard log handler ``rotatingfilehandler``. this module uses file\nlocking so that multiple processes can concurrently log to a single file without\ndropping or clobbering log events. this module provides a file rotation scheme\nlike with ``rotatingfilehanler``.  extra care is taken to ensure that logs\ncan be safely rotated before the rotation process is started. (this module works\naround the file rename issue with ``rotatingfilehandler`` on windows, where a\nrotation failure means that all subsequent log events are dropped).\n\nthis module attempts to preserve log records at all cost. this means that log\nfiles will grow larger than the specified maximum (rotation) size. so if disk\nspace is tight, you may want to stick with ``rotatingfilehandler``, which will\nstrictly adhere to the maximum file size.\n\nif you have multiple instances of a script (or multiple scripts) all running at\nthe same time and writing to the same log file, then *all* of the scripts should\nbe using ``concurrentrotatingfilehandler``. you should not attempt to mix\nand match ``rotatingfilehandler`` and ``concurrentrotatingfilehandler``.\n\nthis package bundles `portalocker`_ to deal with file locking.  please be aware\nthat portalocker only supports unix (posix) an nt platforms at this time, and\ntherefore this package only supports those platforms as well.\n\ninstallation\n============\nuse the following command to install this package::\n\n    pip install concurrentloghandler\n\nif you are installing from source, you can use::\n\n    python setup.py install\n\n\nexamples\n========\n\nsimple example\n--------------\nhere is a example demonstrating how to use this module directly (from within\npython code)::\n\n    from logging import getlogger, info\n    from cloghandler import concurrentrotatingfilehandler\n    import os\n    \n    log = getlogger()\n    # use an absolute path to prevent file rotation trouble.\n    logfile = os.path.abspath(\"mylogfile.log\")\n    # rotate log after reaching 512k, keep 5 old copies.\n    rotatehandler = concurrentrotatingfilehandler(logfile, \"a\", 512*1024, 5)\n    log.addhandler(rotatehandler)\n    log.setlevel(info)\n    \n    log.info(\"here is a very exciting log message, just for you\")\n\n\nautomatic fallback example\n--------------------------\nif you are distributing your code and you are unsure if the\n`concurrentloghandler` package has been installed everywhere your code will run,\npython makes it easy to gracefully fallback to the built in\n`rotatingfilehandler`, here is an example::\n\n    try:\n        from cloghandler import concurrentrotatingfilehandler as rfhandler\n    except importerror:\n        # next 2 lines are optional:  issue a warning to the user\n        from warnings import warn\n        warn(\"concurrentloghandler package not installed.  using builtin log handler\")\n        from logging.handlers import rotatingfilehandler as rfhandler\n    \n    log = getlogger()\n    rotatehandler = rfhandler(\"/path/to/mylogfile.log\", \"a\", 1048576, 15)\n    log.addhandler(rotatehandler)\n\n\n\nconfig file example\n-------------------\nthis example shows you how to use this log handler with the logging config file\nparser. this allows you to keep your logging configuration code separate from\nyour application code.\n\nexample config file: ``logging.ini``::\n\n    [loggers]\n    keys=root\n    \n    [handlers]\n    keys=hand01\n    \n    [formatters]\n    keys=form01\n    \n    [logger_root]\n    level=notset\n    handlers=hand01\n    \n    [handler_hand01]\n    class=handlers.concurrentrotatingfilehandler\n    level=notset\n    formatter=form01\n    args=(\"rotating.log\", \"a\", 512*1024, 5)\n    \n    [formatter_form01]\n    format=%(asctime)s %(levelname)s %(message)s\n\nexample python code: ``app.py``::\n\n    import logging, logging.config\n    import cloghandler\n    \n    logging.config.fileconfig(\"logging.ini\")\n    log = logging.getlogger()\n    log.info(\"here is a very exciting log message, just for you\")\n\n\nchange log\n==========\n\n.. _red hat bug #858912: https://bugzilla.redhat.com/show_bug.cgi?id=858912\n.. _python bug #15960: http://bugs.python.org/issue15960\n.. _lp bug 1199332: https://bugs.launchpad.net/python-concurrent-log-handler/+bug/1199332\n.. _lp bug 1199333: https://bugs.launchpad.net/python-concurrent-log-handler/+bug/1199333\n\n\n- 0.9.1:  bug fixes - `lp bug 1199332`_ and `lp bug 1199333`_.\n   * more gracefully handle out of disk space scenarios. prevent release() from\n     throwing an exception.\n   * handle logging.shutdown() in python 2.7+. close the lock file stream via\n     close().\n   * big thanks to dan callaghan for forwarding these issues and patches.\n\n- 0.9.0:  now requires python 2.6+\n   * revamp file opening/closing and file-locking internals (inspired by\n     feedback from vinay sajip.)\n   * add the 'delay' parameter (delayed log file opening) to better match the\n     core logging functionality in more recent version of python.\n   * for anyone still using python 2.3-2.5, please use the latest 0.8.x release\n\n- 0.8.6:  fixed packaging bug with test script\n   * fix a small packaging bug from the 0.8.5 release.  (thanks to bj\u00f6rn h\u00e4user \n     for bringing this to my attention.)\n   * updated stresstest.py to always use the correct python version when\n     launching sub-processes instead of the system's default \"python\".\n\n- 0.8.5:  fixed valueerror: i/o operation on closed file\n   * thanks to vince carney, arif kasim, matt drew, nick coghlan, and\n     dan callaghan for bug reports.  bugs can now be filled here:\n     https://bugs.launchpad.net/python-concurrent-log-handler.  bugs resolved\n     `red hat bug #858912`_ and `python bug #15960`_\n   * updated ez_setup.py to 0.7.7\n   * updated portalocker to 0.3 (now maintained by rick van hattem)\n   * initial python 3 support (needs more testing)\n   * fixed minor spelling mistakes\n\n- 0.8.4:  fixed lock-file naming issue\n   * resolved a minor issue where lock-files would be improperly named if the\n     log file contained \".log\" in the middle of the log name.  for example, if\n     you log file was \"/var/log/mycompany.logging.mysource.log\", the lock file\n     would be named \"/var/log/mycompany.ging.mysource.lock\", which is not correct.\n     thanks to dirk rothe for pointing this out.  since this introduce a slight \n     lock-file behavior difference, make sure all concurrent writers are updated\n     to 0.8.4 at the same time if this issue effects you.\n   * updated ez_setup.py to 0.6c11\n\n- 0.8.3:  fixed a log file rotation bug and updated docs\n   * fixed a bug that happens after log rotation when multiple processes are\n     witting to the same log file. each process ends up writing to their own\n     log file (\"log.1\" or \"log.2\" instead of \"log\"). the fix is simply to reopen\n     the log file and check the size again.  i do not believe this bug results in\n     data loss; however, this certainly was not the desired behavior.  (a big\n     thanks goes to oliver tonnhofer for finding, documenting, and providing a\n     patch for this bug.)\n   * cleanup the docs. (aka \"the page you are reading right now\") i fixed some\n     silly mistakes and typos... who writes this stuff?\n\n- 0.8.2:  minor bug fix release (again)\n   * found and resolved another issue with older logging packages that do not\n     support encoding.\n\n- 0.8.1:  minor bug fix release\n   * now importing \"codecs\" directly; i found some slight differences in the\n     logging module in different python 2.4.x releases that caused the module to\n     fail to load.\n\n- 0.8.0:  minor feature release\n    * add better support for using ``logging.config.fileconfig()``. this class\n      is now available using ``class=handlers.concurrentrotatingfilehandler``.\n    * minor changes in how the ``filename`` parameter is handled when given a\n      relative path.\n\n- 0.7.4:  minor bug fix\n    * fixed a typo in the package description (incorrect class name)\n    * added a change log; which you are reading now.\n    * fixed the ``close()`` method to no longer assume that stream is still\n      open.\n\nto-do\n=====\n* this module has had minimal testing in a multi-threaded process.  i see no\n  reason why this should be an issue, but no stress-testing has been done in a\n  threaded situation. if this is important to you, you could always add\n  threading support to the ``stresstest.py`` script and send me the patch.",
  "docs_url": null,
  "keywords": "logging,windows,linux,unix,rotate,portalocker",
  "license": "http://www.apache.org/licenses/license-2.0",
  "name": "concurrentloghandler",
  "package_url": "https://pypi.org/project/ConcurrentLogHandler/",
  "project_url": "https://pypi.org/project/ConcurrentLogHandler/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://launchpad.net/python-concurrent-log-handler"
  },
  "release_url": "https://pypi.org/project/ConcurrentLogHandler/0.9.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "concurrent logging handler (drop-in replacement for rotatingfilehandler) python 2.6+",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "lowell87@gmail.com",
    "lowell_alleman"
  ],
  "kwds": "concurrentloghandler concurrentrotatingfilehandler logging rotatingfilehandler logfile",
  "license_kwds": "http://www.apache.org/licenses/license-2.0",
  "libtype": "pypi",
  "id": "pypi_concurrentloghandler",
  "homepage": "http://launchpad.net/python-concurrent-log-handler",
  "release_count": 13,
  "dependency_ids": []
}
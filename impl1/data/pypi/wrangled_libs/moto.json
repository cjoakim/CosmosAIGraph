{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing"
  ],
  "description": "# moto - mock aws services\n\n[![join the chat at https://gitter.im/awsmoto/lobby](https://badges.gitter.im/awsmoto/lobby.svg)](https://gitter.im/awsmoto/lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![build status](https://github.com/getmoto/moto/workflows/testndeploy/badge.svg)](https://github.com/getmoto/moto/actions)\n[![coverage status](https://codecov.io/gh/getmoto/moto/branch/master/graph/badge.svg)](https://codecov.io/gh/getmoto/moto)\n[![docs](https://readthedocs.org/projects/pip/badge/?version=stable)](http://docs.getmoto.org)\n[![pypi](https://img.shields.io/pypi/v/moto.svg)](https://pypi.org/project/moto/)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/moto.svg)](#)\n[![pypi - downloads](https://img.shields.io/pypi/dw/moto.svg)](https://pypistats.org/packages/moto)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![financial contributors](https://opencollective.com/moto/tiers/badge.svg)](https://opencollective.com/moto)\n\n\n## install\n\n```console\n$ pip install 'moto[ec2,s3,all]'\n```\n\n## in a nutshell\n\n\nmoto is a library that allows your tests to easily mock out aws services.\n\nimagine you have the following python code that you want to test:\n\n```python\nimport boto3\n\n\nclass mymodel:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def save(self):\n        s3 = boto3.client(\"s3\", region_name=\"us-east-1\")\n        s3.put_object(bucket=\"mybucket\", key=self.name, body=self.value)\n```\n\ntake a minute to think how you would have tested that in the past.\n\nnow see how you could test it with moto:\n\n```python\nimport boto3\nfrom moto import mock_s3\nfrom mymodule import mymodel\n\n\n@mock_s3\ndef test_my_model_save():\n    conn = boto3.resource(\"s3\", region_name=\"us-east-1\")\n    # we need to create the bucket since this is all in moto's 'virtual' aws account\n    conn.create_bucket(bucket=\"mybucket\")\n    model_instance = mymodel(\"steve\", \"is awesome\")\n    model_instance.save()\n    body = conn.object(\"mybucket\", \"steve\").get()[\"body\"].read().decode(\"utf-8\")\n    assert body == \"is awesome\"\n```\n\nwith the decorator wrapping the test, all the calls to s3 are automatically mocked out. the mock keeps track of the state of the buckets and keys.\n\nfor a full list of which services and features are covered, please see our [implementation coverage](https://github.com/getmoto/moto/blob/master/implementation_coverage.md).\n\n\n### documentation\nthe full documentation can be found here:\n\n[http://docs.getmoto.org/en/latest/](http://docs.getmoto.org/en/latest/)\n\n\n### financial contributions\nsupport this project and its continued development, by sponsoring us!\n\nclick the `sponsor`-button at the top of the page for more information.\n\nour finances are managed by opencollective, which means you have full visibility into all our contributions and expenses:\nhttps://opencollective.com/moto\n\n### security contact information\n\nto report a security vulnerability, please use the\n[tidelift security contact](https://tidelift.com/security).\ntidelift will coordinate the fix and disclosure.\n",
  "docs_url": null,
  "keywords": "aws ec2 s3 boto3 mock",
  "license": "apache license 2.0",
  "name": "moto",
  "package_url": "https://pypi.org/project/moto/",
  "project_url": "https://pypi.org/project/moto/",
  "project_urls": {
    "Changelog": "https://github.com/getmoto/moto/blob/master/CHANGELOG.md",
    "Documentation": "http://docs.getmoto.org/en/latest/",
    "Homepage": "https://github.com/getmoto/moto",
    "Issue tracker": "https://github.com/getmoto/moto/issues"
  },
  "release_url": "https://pypi.org/project/moto/4.2.12/",
  "requires_dist": [
    "boto3 >=1.9.201",
    "botocore >=1.12.201",
    "cryptography >=3.3.1",
    "requests >=2.5",
    "xmltodict",
    "werkzeug !=2.2.0,!=2.2.1,>=0.5",
    "python-dateutil <3.0.0,>=2.1",
    "responses >=0.13.0",
    "Jinja2 >=2.10.1",
    "importlib-metadata ; python_version < \"3.8\"",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'all'",
    "ecdsa !=0.15 ; extra == 'all'",
    "docker >=3.0.0 ; extra == 'all'",
    "graphql-core ; extra == 'all'",
    "PyYAML >=5.1 ; extra == 'all'",
    "cfn-lint >=0.40.0 ; extra == 'all'",
    "sshpubkeys >=3.1.0 ; extra == 'all'",
    "openapi-spec-validator >=0.5.0 ; extra == 'all'",
    "pyparsing >=3.0.7 ; extra == 'all'",
    "jsondiff >=1.1.2 ; extra == 'all'",
    "py-partiql-parser ==0.5.0 ; extra == 'all'",
    "aws-xray-sdk !=0.96,>=0.93 ; extra == 'all'",
    "setuptools ; extra == 'all'",
    "multipart ; extra == 'all'",
    "PyYAML >=5.1 ; extra == 'apigateway'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'apigateway'",
    "ecdsa !=0.15 ; extra == 'apigateway'",
    "openapi-spec-validator >=0.5.0 ; extra == 'apigateway'",
    "PyYAML >=5.1 ; extra == 'apigatewayv2'",
    "graphql-core ; extra == 'appsync'",
    "docker >=3.0.0 ; extra == 'awslambda'",
    "docker >=3.0.0 ; extra == 'batch'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'cloudformation'",
    "ecdsa !=0.15 ; extra == 'cloudformation'",
    "docker >=3.0.0 ; extra == 'cloudformation'",
    "graphql-core ; extra == 'cloudformation'",
    "PyYAML >=5.1 ; extra == 'cloudformation'",
    "cfn-lint >=0.40.0 ; extra == 'cloudformation'",
    "sshpubkeys >=3.1.0 ; extra == 'cloudformation'",
    "openapi-spec-validator >=0.5.0 ; extra == 'cloudformation'",
    "pyparsing >=3.0.7 ; extra == 'cloudformation'",
    "jsondiff >=1.1.2 ; extra == 'cloudformation'",
    "py-partiql-parser ==0.5.0 ; extra == 'cloudformation'",
    "aws-xray-sdk !=0.96,>=0.93 ; extra == 'cloudformation'",
    "setuptools ; extra == 'cloudformation'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'cognitoidp'",
    "ecdsa !=0.15 ; extra == 'cognitoidp'",
    "sshpubkeys >=3.1.0 ; extra == 'ds'",
    "docker >=3.0.0 ; extra == 'dynamodb'",
    "py-partiql-parser ==0.5.0 ; extra == 'dynamodb'",
    "docker >=3.0.0 ; extra == 'dynamodbstreams'",
    "py-partiql-parser ==0.5.0 ; extra == 'dynamodbstreams'",
    "sshpubkeys >=3.1.0 ; extra == 'ebs'",
    "sshpubkeys >=3.1.0 ; extra == 'ec2'",
    "sshpubkeys >=3.1.0 ; extra == 'efs'",
    "sshpubkeys >=3.1.0 ; extra == 'eks'",
    "pyparsing >=3.0.7 ; extra == 'glue'",
    "jsondiff >=1.1.2 ; extra == 'iotdata'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'proxy'",
    "ecdsa !=0.15 ; extra == 'proxy'",
    "docker >=2.5.1 ; extra == 'proxy'",
    "graphql-core ; extra == 'proxy'",
    "PyYAML >=5.1 ; extra == 'proxy'",
    "cfn-lint >=0.40.0 ; extra == 'proxy'",
    "sshpubkeys >=3.1.0 ; extra == 'proxy'",
    "openapi-spec-validator >=0.5.0 ; extra == 'proxy'",
    "pyparsing >=3.0.7 ; extra == 'proxy'",
    "jsondiff >=1.1.2 ; extra == 'proxy'",
    "py-partiql-parser ==0.5.0 ; extra == 'proxy'",
    "aws-xray-sdk !=0.96,>=0.93 ; extra == 'proxy'",
    "setuptools ; extra == 'proxy'",
    "multipart ; extra == 'proxy'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'resourcegroupstaggingapi'",
    "ecdsa !=0.15 ; extra == 'resourcegroupstaggingapi'",
    "docker >=3.0.0 ; extra == 'resourcegroupstaggingapi'",
    "graphql-core ; extra == 'resourcegroupstaggingapi'",
    "PyYAML >=5.1 ; extra == 'resourcegroupstaggingapi'",
    "cfn-lint >=0.40.0 ; extra == 'resourcegroupstaggingapi'",
    "sshpubkeys >=3.1.0 ; extra == 'resourcegroupstaggingapi'",
    "openapi-spec-validator >=0.5.0 ; extra == 'resourcegroupstaggingapi'",
    "pyparsing >=3.0.7 ; extra == 'resourcegroupstaggingapi'",
    "jsondiff >=1.1.2 ; extra == 'resourcegroupstaggingapi'",
    "py-partiql-parser ==0.5.0 ; extra == 'resourcegroupstaggingapi'",
    "sshpubkeys >=3.1.0 ; extra == 'route53resolver'",
    "PyYAML >=5.1 ; extra == 's3'",
    "py-partiql-parser ==0.5.0 ; extra == 's3'",
    "PyYAML >=5.1 ; extra == 's3crc32c'",
    "py-partiql-parser ==0.5.0 ; extra == 's3crc32c'",
    "crc32c ; extra == 's3crc32c'",
    "python-jose[cryptography] <4.0.0,>=3.1.0 ; extra == 'server'",
    "ecdsa !=0.15 ; extra == 'server'",
    "docker >=3.0.0 ; extra == 'server'",
    "graphql-core ; extra == 'server'",
    "PyYAML >=5.1 ; extra == 'server'",
    "cfn-lint >=0.40.0 ; extra == 'server'",
    "sshpubkeys >=3.1.0 ; extra == 'server'",
    "openapi-spec-validator >=0.5.0 ; extra == 'server'",
    "pyparsing >=3.0.7 ; extra == 'server'",
    "jsondiff >=1.1.2 ; extra == 'server'",
    "py-partiql-parser ==0.5.0 ; extra == 'server'",
    "aws-xray-sdk !=0.96,>=0.93 ; extra == 'server'",
    "setuptools ; extra == 'server'",
    "flask !=2.2.0,!=2.2.1 ; extra == 'server'",
    "flask-cors ; extra == 'server'",
    "PyYAML >=5.1 ; extra == 'ssm'",
    "aws-xray-sdk !=0.96,>=0.93 ; extra == 'xray'",
    "setuptools ; extra == 'xray'"
  ],
  "requires_python": ">=3.7",
  "summary": "",
  "version": "4.2.12",
  "releases": [],
  "developers": [
    "spulec@gmail.com",
    "steve_pulec"
  ],
  "kwds": "mock_s3 badge boto3 badges moto",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_moto",
  "homepage": "https://github.com/getmoto/moto",
  "release_count": 1939,
  "dependency_ids": [
    "pypi_aws_xray_sdk",
    "pypi_boto3",
    "pypi_botocore",
    "pypi_cfn_lint",
    "pypi_crc32c",
    "pypi_cryptography",
    "pypi_docker",
    "pypi_ecdsa",
    "pypi_flask",
    "pypi_flask_cors",
    "pypi_graphql_core",
    "pypi_importlib_metadata",
    "pypi_jinja2",
    "pypi_jsondiff",
    "pypi_multipart",
    "pypi_openapi_spec_validator",
    "pypi_py_partiql_parser",
    "pypi_pyparsing",
    "pypi_python_dateutil",
    "pypi_python_jose",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_responses",
    "pypi_setuptools",
    "pypi_sshpubkeys",
    "pypi_werkzeug",
    "pypi_xmltodict"
  ]
}
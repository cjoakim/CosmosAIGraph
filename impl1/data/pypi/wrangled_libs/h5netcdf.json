{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "h5netcdf\n========\n\n.. image:: https://github.com/h5netcdf/h5netcdf/workflows/ci/badge.svg\n    :target: https://github.com/h5netcdf/h5netcdf/actions\n.. image:: https://badge.fury.io/py/h5netcdf.svg\n    :target: https://pypi.org/project/h5netcdf/\n.. image:: https://github.com/h5netcdf/h5netcdf/actions/workflows/pages/pages-build-deployment/badge.svg?branch=gh-pages\n    :target: https://h5netcdf.github.io/h5netcdf/\n\na python interface for the `netcdf4`_ file-format that reads and writes local or\nremote hdf5 files directly via `h5py`_ or `h5pyd`_, without relying on the unidata\nnetcdf library.\n\n.. _netcdf4: https://docs.unidata.ucar.edu/netcdf-c/current/file_format_specifications.html#netcdf_4_spec\n.. _h5py: https://www.h5py.org/\n.. _h5pyd: https://github.com/hdfgroup/h5pyd\n\n\n.. why-h5netcdf\n\nwhy h5netcdf?\n-------------\n\n- it has one less binary dependency (netcdf c). if you already have h5py\n  installed, reading netcdf4 with h5netcdf may be much easier than installing\n  netcdf4-python.\n- we've seen occasional reports of better performance with h5py than\n  netcdf4-python, though in many cases performance is identical. for\n  `one workflow`_, h5netcdf was reported to be almost **4x faster** than\n  `netcdf4-python`_.\n- anecdotally, hdf5 users seem to be unexcited about switching to netcdf --\n  hopefully this will convince them that netcdf4 is actually quite sane!\n- finally, side-stepping the netcdf c library (and cython bindings to it)\n  gives us an easier way to identify the source of performance issues and\n  bugs in the netcdf libraries/specification.\n\n.. _one workflow: https://github.com/unidata/netcdf4-python/issues/390#issuecomment-93864839\n.. _xarray: https://github.com/pydata/xarray/\n\ninstall\n-------\n\nensure you have a recent version of h5py installed (i recommend using `conda`_ or\nthe community effort `conda-forge`_).\nat least version 3.0 is required. then::\n\n    $ pip install h5netcdf\n\nor if you are already using conda::\n\n    $ conda install h5netcdf\n\nnote:\n\nfrom version 1.2. h5netcdf tries to align with a `nep29`_-like support policy with regard\nto it's upstream dependencies.\n\n.. _conda: https://conda.io/\n.. _conda-forge: https://conda-forge.org/\n.. _nep29: https://numpy.org/neps/nep-0029-deprecation_policy.html\n\nusage\n-----\n\nh5netcdf has two apis, a new api and a legacy api. both interfaces currently\nreproduce most of the features of the netcdf interface, with the notable\nexception of support for operations that rename or delete existing objects.\nwe simply haven't gotten around to implementing this yet. patches\nwould be very welcome.\n\nnew api\n~~~~~~~\n\nthe new api supports direct hierarchical access of variables and groups. its\ndesign is an adaptation of h5py to the netcdf data model. for example:\n\n.. code-block:: python\n\n    import h5netcdf\n    import numpy as np\n\n    with h5netcdf.file('mydata.nc', 'w') as f:\n        # set dimensions with a dictionary\n        f.dimensions = {'x': 5}\n        # and update them with a dict-like interface\n        # f.dimensions['x'] = 5\n        # f.dimensions.update({'x': 5})\n\n        v = f.create_variable('hello', ('x',), float)\n        v[:] = np.ones(5)\n\n        # you don't need to create groups first\n        # you also don't need to create dimensions first if you supply data\n        # with the new variable\n        v = f.create_variable('/grouped/data', ('y',), data=np.arange(10))\n\n        # access and modify attributes with a dict-like interface\n        v.attrs['foo'] = 'bar'\n\n        # you can access variables and groups directly using a hierarchical\n        # keys like h5py\n        print(f['/grouped/data'])\n\n        # add an unlimited dimension\n        f.dimensions['z'] = none\n        # explicitly resize a dimension and all variables using it\n        f.resize_dimension('z', 3)\n\nnotes:\n\n- automatic resizing of unlimited dimensions with array indexing is not available.\n- dimensions need to be manually resized with ``group.resize_dimension(dimension, size)``.\n- arrays are returned padded with ``fillvalue`` (taken from underlying hdf5 dataset) up to\n  current size of variable's dimensions. the behaviour is equivalent to netcdf4-python's\n  ``dataset.set_auto_mask(false)``.\n\nlegacy api\n~~~~~~~~~~\n\nthe legacy api is designed for compatibility with `netcdf4-python`_. to use it, import\n``h5netcdf.legacyapi``:\n\n.. _netcdf4-python: https://github.com/unidata/netcdf4-python\n\n.. code-block:: python\n\n    import h5netcdf.legacyapi as netcdf4\n    # everything here would also work with this instead:\n    # import netcdf4\n    import numpy as np\n\n    with netcdf4.dataset('mydata.nc', 'w') as ds:\n        ds.createdimension('x', 5)\n        v = ds.createvariable('hello', float, ('x',))\n        v[:] = np.ones(5)\n\n        g = ds.creategroup('grouped')\n        g.createdimension('y', 10)\n        g.createvariable('data', 'i8', ('y',))\n        v = g['data']\n        v[:] = np.arange(10)\n        v.foo = 'bar'\n        print(ds.groups['grouped'].variables['data'])\n\nthe legacy api is designed to be easy to try-out for netcdf4-python users, but it is not an\nexact match. here is an incomplete list of functionality we don't include:\n\n- utility functions ``chartostring``, ``num2date``, etc., that are not directly necessary\n  for writing netcdf files.\n- h5netcdf variables do not support automatic masking or scaling (e.g., of values matching\n  the ``_fillvalue`` attribute). we prefer to leave this functionality to client libraries\n  (e.g., `xarray`_), which can implement their exact desired scaling behavior. nevertheless\n  arrays are returned padded with ``fillvalue`` (taken from underlying hdf5 dataset) up to\n  current size of variable's dimensions. the behaviour is equivalent to netcdf4-python's\n  ``dataset.set_auto_mask(false)``.\n\n.. _invalid netcdf:\n\ninvalid netcdf files\n~~~~~~~~~~~~~~~~~~~~\n\nh5py implements some features that do not (yet) result in valid netcdf files:\n\n- data types:\n    - booleans\n    - complex values\n    - non-string variable length types\n    - enum types\n    - reference types\n- arbitrary filters:\n    - scale-offset filters\n\nby default [#]_, h5netcdf will not allow writing files using any of these features,\nas files with such features are not readable by other netcdf tools.\n\nhowever, these are still valid hdf5 files. if you don't care about netcdf\ncompatibility, you can use these features by setting ``invalid_netcdf=true``\nwhen creating a file:\n\n.. code-block:: python\n\n  # avoid the .nc extension for non-netcdf files\n  f = h5netcdf.file('mydata.h5', invalid_netcdf=true)\n  ...\n\n  # works with the legacy api, too, though compression options are not exposed\n  ds = h5netcdf.legacyapi.dataset('mydata.h5', invalid_netcdf=true)\n  ...\n\nin such cases the `_ncproperties` attribute will not be saved to the file or be removed\nfrom an existing file. a warning will be issued if the file has `.nc`-extension.\n\n.. rubric:: footnotes\n\n.. [#] h5netcdf we will raise ``h5netcdf.compatibilityerror``.\n\ndecoding variable length strings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nh5py 3.0 introduced `new behavior`_ for handling variable length string.\ninstead of being automatically decoded with utf-8 into numpy arrays of ``str``,\nthey are required as arrays of ``bytes``.\n\nthe legacy api preserves the old behavior of h5py (which matches netcdf4),\nand automatically decodes strings.\n\nthe new api matches h5py behavior. explicitly set ``decode_vlen_strings=true``\nin the ``h5netcdf.file`` constructor to opt-in to automatic decoding.\n\n.. _new behavior: https://docs.h5py.org/en/stable/strings.html\n\n.. _phony dims:\n\ndatasets with missing dimension scales\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nby default [#]_ h5netcdf raises a ``valueerror`` if variables with no dimension\nscale associated with one of their axes are accessed.\nyou can set ``phony_dims='sort'`` when opening a file to let h5netcdf invent\nphony dimensions according to `netcdf`_ behaviour.\n\n.. code-block:: python\n\n  # mimic netcdf-behaviour for non-netcdf files\n  f = h5netcdf.file('mydata.h5', mode='r', phony_dims='sort')\n  ...\n\nnote, that this iterates once over the whole group-hierarchy. this has affects\non performance in case you rely on laziness of group access.\nyou can set ``phony_dims='access'`` instead to defer phony dimension creation\nto group access time. the created phony dimension naming will differ from\n`netcdf`_ behaviour.\n\n.. code-block:: python\n\n  f = h5netcdf.file('mydata.h5', mode='r', phony_dims='access')\n  ...\n\n.. rubric:: footnotes\n\n.. [#] keyword default setting ``phony_dims=none`` for backwards compatibility.\n\n.. _netcdf: https://docs.unidata.ucar.edu/netcdf-c/current/interoperability_hdf5.html\n\ntrack order\n~~~~~~~~~~~\n\nas of h5netcdf 1.1.0, if h5py 3.7.0 or greater is detected, the ``track_order``\nparameter is set to ``true`` enabling `order tracking`_ for newly created\nnetcdf4 files. this helps ensure that files created with the h5netcdf library\ncan be modified by the netcdf4-c and netcdf4-python implementation used in\nother software stacks. since this change should be transparent to most users,\nit was made without deprecation.\n\nsince track_order is set at creation time, any dataset that was created with\n``track_order=false`` (h5netcdf version 1.0.2 and older except for 0.13.0) will\ncontinue to opened with order tracker disabled.\n\nthe following describes the behavior of h5netcdf with respect to order tracking\nfor a few key versions:\n\n- version 0.12.0 and earlier, the ``track_order`` parameter`order was missing\n  and thus order tracking was implicitely set to ``false``.\n- version 0.13.0 enabled order tracking by setting the parameter\n  ``track_order`` to ``true`` by default without deprecation.\n- versions 0.13.1 to 1.0.2 set ``track_order`` to ``false`` due to a bug in a\n  core dependency of h5netcdf, h5py `upstream bug`_ which was resolved in h5py\n  3.7.0 with the help of the h5netcdf team.\n- in version 1.1.0, if h5py 3.7.0 or above is detected, the ``track_order``\n  parameter is set to ``true`` by default.\n\n\n.. _order tracking: https://docs.unidata.ucar.edu/netcdf-c/current/file_format_specifications.html#creation_order\n.. _upstream bug: https://github.com/h5netcdf/h5netcdf/issues/136\n.. _[*]: https://github.com/h5netcdf/h5netcdf/issues/128\n\n.. changelog\n\nchangelog\n---------\n\n`changelog`_\n\n.. _changelog: https://github.com/h5netcdf/h5netcdf/blob/main/changelog.rst\n\n.. license\n\nlicense\n-------\n\n`3-clause bsd`_\n\n.. _3-clause bsd: https://github.com/h5netcdf/h5netcdf/blob/main/license\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright (c) 2015, h5netcdf developers all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "h5netcdf",
  "package_url": "https://pypi.org/project/h5netcdf/",
  "project_url": "https://pypi.org/project/h5netcdf/",
  "project_urls": {
    "changelog": "https://github.com/h5netcdf/h5netcdf/blob/main/CHANGELOG.rst",
    "documentation": "https://h5netcdf.org",
    "homepage": "https://h5netcdf.org",
    "repository": "https://github.com/h5netcdf/h5netcdf"
  },
  "release_url": "https://pypi.org/project/h5netcdf/1.3.0/",
  "requires_dist": [
    "h5py",
    "packaging",
    "netCDF4 ; extra == 'test'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.9",
  "summary": "netcdf4 via h5py",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "devteam@h5netcdf.org",
    "kmuehlbauer@wradlib.org",
    "shoyer@gmail.com"
  ],
  "kwds": "interoperability_hdf5 h5py h5netcdf h5pyd _h5py",
  "license_kwds": "copyright liability liable disclaimer negligence",
  "libtype": "pypi",
  "id": "pypi_h5netcdf",
  "homepage": "",
  "release_count": 40,
  "dependency_ids": [
    "pypi_h5py",
    "pypi_netcdf4",
    "pypi_packaging",
    "pypi_pytest"
  ]
}
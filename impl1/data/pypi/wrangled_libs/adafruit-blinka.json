{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: micropython"
  ],
  "description": "\nintroduction\n============\n\n.. image:: https://readthedocs.org/projects/adafruit-micropython-blinka/badge/?version=latest\n    :target: https://circuitpython.readthedocs.io/projects/blinka/en/latest/\n    :alt: documentation status\n\n.. image:: https://img.shields.io/discord/327254708534116352.svg\n    :target: https://adafru.it/discord\n    :alt: discord\n\n.. image:: https://travis-ci.com/adafruit/adafruit_blinka.svg?branch=master\n    :target: https://travis-ci.com/adafruit/adafruit_blinka\n    :alt: build status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style: black\n\nthis repository contains a selection of packages emulating the circuitpython api\nfor devices or hosts running cpython or micropython. working code exists to emulate these circuitpython packages:\n\n* **analogio** - analog input/output pins, using pin identities from board+microcontroller packages\n* **bitbangio** - software-driven interfaces for i2c, spi\n* **board** - breakout-specific pin identities\n* **busio** - hardware-driven interfaces for i2c, spi, uart\n* **digitalio** - digital input/output pins, using pin identities from board+microcontroller packages\n* **keypad** - support for scanning keys and key matrices\n* **microcontroller** - chip-specific pin identities\n* **micropython** - micropython-specific module\n* **neopixel_write** - low-level interface to neopixels\n* **pulseio** - contains classes that provide access to basic pulse io (pwm)\n* **pwmio** - contains classes that provide access to basic pulse io (pwm)\n* **rainbowio** - provides the colorwheel() function\n* **usb_hid** - act as a hid-device using usb_gadget kernel driver\n\nfor details, see the `blinka api reference\n<https://circuitpython.readthedocs.io/projects/blinka/en/latest/index.html>`_.\n\ndependencies\n=============\n\nthe emulation described above is intended to provide a\ncircuitpython-like api for devices which are running cpython or\nmicropython. since corresponding packages should be built-in to any\nstandard circuitpython image, they have no value on a device already\nrunning circuitpython and would likely conflict in unhappy ways.\n\nthe test suites in the test/src folder under **testing.universal** are by design\nintended to run on *either* circuitpython *or* cpython/micropython+compatibility layer to prove conformance.\n\ninstalling from pypi\n=====================\n\non supported gnu/linux systems like the raspberry pi, you can install the driver locally `from\npypi <https://pypi.org/project/adafruit-blinka/>`_. to install for current user:\n\n.. code-block:: shell\n\n    pip3 install adafruit-blinka\n\nto install system-wide (this may be required in some cases):\n\n.. code-block:: shell\n\n    sudo pip3 install adafruit-blinka\n\nto install in a virtual environment in your current project:\n\n.. code-block:: shell\n\n    mkdir project-name && cd project-name\n    python3 -m venv .env\n    source .env/bin/activate\n    pip3 install adafruit-blinka\n\nusage example\n=============\n\nthe pin names may vary by board, so you may need to change the pin names in the code. this\nexample runs on the raspberry pi boards to blink an led connected to gpio 18 (pin 12):\n\n.. code-block:: python\n\n    import time\n    import board\n    import digitalio\n\n    pin = board.d18\n\n    print(\"hello blinky!\")\n\n    led = digitalio.digitalinout(pin)\n    led.direction = digitalio.direction.output\n\n    while true:\n        led.value = true\n        time.sleep(0.5)\n        led.value = false\n        time.sleep(0.5)\n\ncontributing\n============\n\ncontributions are welcome! please read our `code of conduct\n<https://github.com/adafruit/adafruit_blinka/blob/master/code_of_conduct.md>`_\nbefore contributing to help this project stay welcoming.\n\nbuilding locally\n================\n\nsphinx documentation\n-----------------------\n\nsphinx is used to build the documentation based on rst files and comments in the code. first,\ninstall dependencies (feel free to reuse the virtual environment from above):\n\n.. code-block:: shell\n\n    python3 -m venv .env\n    source .env/bin/activate\n    pip install sphinx sphinx-rtd-theme adafruit-platformdetect\n\nnow, once you have the virtual environment activated:\n\n.. code-block:: shell\n\n    cd docs\n    sphinx-build -e -w -b html . _build/html\n\nthis will output the documentation to ``docs/_build/html``. open the index.html in your browser to\nview them. it will also (due to -w) error out on any warning like travis will. this is a good way to\nlocally verify it will pass.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "adafruit-blinka",
  "package_url": "https://pypi.org/project/Adafruit-Blinka/",
  "project_url": "https://pypi.org/project/Adafruit-Blinka/",
  "project_urls": {
    "Homepage": "https://github.com/adafruit/Adafruit_Blinka"
  },
  "release_url": "https://pypi.org/project/Adafruit-Blinka/8.28.1/",
  "requires_dist": [
    "Adafruit-PlatformDetect >=3.53.0",
    "Adafruit-PureIO >=1.1.7",
    "pyftdi >=0.40.0",
    "adafruit-circuitpython-typing"
  ],
  "requires_python": ">=3.7.0",
  "summary": "circuitpython apis for non-circuitpython versions of python such as cpython on linux and micropython.",
  "version": "8.28.1",
  "releases": [],
  "developers": [
    "adafruit_industries",
    "circuitpython@adafruit.com"
  ],
  "kwds": "adafruit_blinka blinka blink blinky adafru",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_adafruit_blinka",
  "homepage": "https://github.com/adafruit/adafruit_blinka",
  "release_count": 246,
  "dependency_ids": [
    "pypi_adafruit_circuitpython_typing",
    "pypi_adafruit_platformdetect",
    "pypi_adafruit_pureio",
    "pypi_pyftdi"
  ]
}
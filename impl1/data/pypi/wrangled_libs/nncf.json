{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "neural networks compression framework\n<div align=\"center\">\n\n# neural network compression framework (nncf)\n\n[key features](#key-features) \u2022\n[installation](#installation-guide) \u2022\n[documentation](#documentation) \u2022\n[usage](#usage) \u2022\n[tutorials and samples](#model-compression-tutorials-and-samples) \u2022\n[third-party integration](#third-party-repository-integration) \u2022\n[model zoo](./docs/modelzoo.md)\n\n[![github release](https://img.shields.io/github/v/release/openvinotoolkit/nncf?color=green)](https://github.com/openvinotoolkit/nncf/releases)\n[![website](https://img.shields.io/website?up_color=blue&up_message=docs&url=https%3a%2f%2fdocs.openvino.ai%2flatest%2fopenvino_docs_model_optimization_guide.html)](https://docs.openvino.ai/latest/openvino_docs_model_optimization_guide.html)\n[![apache license version 2.0](https://img.shields.io/badge/license-apache_2.0-green.svg)](license)\n[![pypi downloads](https://static.pepy.tech/badge/nncf)](https://pypi.org/project/nncf/)\n\n</div>\n\nneural network compression framework (nncf) provides a suite of post-training and training-time algorithms for neural networks inference optimization in [openvino&trade;](https://docs.openvino.ai) with minimal accuracy drop.\n\nnncf is designed to work with models from [pytorch](https://pytorch.org/), [tensorflow](https://www.tensorflow.org/), [onnx](https://onnx.ai/) and [openvino&trade;](https://docs.openvino.ai/latest/home.html).\n\nnncf provides [samples](#model-compression-tutorials-and-samples) that demonstrate the usage of compression algorithms for different use cases and models. see compression results achievable with the nncf-powered samples at [model zoo page](./docs/modelzoo.md).\n\nthe framework is organized as a python\\* package that can be built and used in a standalone mode. the framework\narchitecture is unified to make it easy to add different compression algorithms for both pytorch and tensorflow deep\nlearning frameworks.\n\n## key features\n\n### post-training compression algorithms\n\n| compression algorithm                                                       |openvino|pytorch|   tensorflow   |     onnx       |\n|:----------------------------------------------------------------------------| :---: | :---: |:--------:|:------------------:|\n| [post-training quantization](./docs/compression_algorithms/post_training/quantization.md) | supported | supported |supported| supported |\n| [weights compression](./docs/compression_algorithms/compressweights.md) | supported | supported |not supported| not supported |\n\n### training-time compression algorithms\n\n|compression algorithm|pytorch|tensorflow|\n| :--- | :---: | :---: |\n|[quantization aware training](./docs/compression_algorithms/quantization.md) | supported | supported |\n|[mixed-precision quantization](./docs/compression_algorithms/quantization.md#mixed_precision_quantization) | supported | not supported |\n|[binarization](./docs/compression_algorithms/binarization.md) | supported | not supported |\n|[sparsity](./docs/compression_algorithms/sparsity.md) | supported | supported |\n|[filter pruning](./docs/compression_algorithms/pruning.md) | supported | supported |\n|[movement pruning](./nncf/experimental/torch/sparsity/movement/movementsparsity.md) | experimental | not supported |\n\n- automatic, configurable model graph transformation to obtain the compressed model.\n  > **note**: limited support for tensorflow models. the models created using sequential or keras functional api are only supported.\n- common interface for compression methods.\n- gpu-accelerated layers for faster compressed model fine-tuning.\n- distributed training support.\n- git patch for prominent third-party repository ([huggingface-transformers](https://github.com/huggingface/transformers)) demonstrating the process of integrating nncf into custom training pipelines\n- seamless combination of pruning, sparsity and quantization algorithms. please refer to [optimum-intel](https://github.com/huggingface/optimum-intel/tree/main/examples/openvino) for examples of\njoint (movement) pruning, quantization and distillation (jpqd), end-to-end from nncf optimization to compressed openvino ir.\n- exporting pytorch compressed models to onnx\\* checkpoints and tensorflow compressed models to savedmodel or frozen graph format, ready to use with [openvino&trade; toolkit](https://docs.openvino.ai).\n- support for [accuracy-aware model training](./docs/usage.md#accuracy-aware-model-training) pipelines via the [adaptive compression level training](./docs/accuracy_aware_model_training/adaptivecompressionleveltraining.md) and [early exit training](./docs/accuracy_aware_model_training/earlyexittraining.md).\n\n## documentation\n\nthis documentation covers detailed information about nncf algorithms and functions needed for the contribution to nncf.\n\nthe latest user documentation for nncf is available [here](https://docs.openvino.ai/latest/openvino_docs_model_optimization_guide.html).\n\nnncf api documentation can be found [here](https://openvinotoolkit.github.io/nncf/autoapi/nncf/).\n\n## usage\n\n### post-training quantization\n\nthe nncf ptq is the simplest way to apply 8-bit quantization. to run the algorithm you only need your model and a small (~300 samples) calibration dataset.\n\n[openvino](https://github.com/openvinotoolkit/openvino) is the preferred backend to run ptq with, and pytorch, tensorflow and onnx are also supported.\n\n<details open><summary><b>openvino</b></summary>\n\n```python\nimport nncf\nimport openvino.runtime as ov\nimport torch\nfrom torchvision import datasets, transforms\n\n# instantiate your uncompressed model\nmodel = ov.core().read_model(\"/model_path\")\n\n# provide validation part of the dataset to collect statistics needed for the compression algorithm\nval_dataset = datasets.imagefolder(\"/path\", transform=transforms.compose([transforms.totensor()]))\ndataset_loader = torch.utils.data.dataloader(val_dataset, batch_size=1)\n\n# step 1: initialize transformation function\ndef transform_fn(data_item):\n    images, _ = data_item\n    return images\n\n# step 2: initialize nncf dataset\ncalibration_dataset = nncf.dataset(dataset_loader, transform_fn)\n# step 3: run the quantization pipeline\nquantized_model = nncf.quantize(model, calibration_dataset)\n```\n\n</details>\n\n<details><summary><b>pytorch</b></summary>\n\n```python\nimport nncf\nimport torch\nfrom torchvision import datasets, models\n\n# instantiate your uncompressed model\nmodel = models.mobilenet_v2()\n\n# provide validation part of the dataset to collect statistics needed for the compression algorithm\nval_dataset = datasets.imagefolder(\"/path\", transform=transforms.compose([transforms.totensor()]))\ndataset_loader = torch.utils.data.dataloader(val_dataset)\n\n# step 1: initialize the transformation function\ndef transform_fn(data_item):\n    images, _ = data_item\n    return images\n\n# step 2: initialize nncf dataset\ncalibration_dataset = nncf.dataset(dataset_loader, transform_fn)\n# step 3: run the quantization pipeline\nquantized_model = nncf.quantize(model, calibration_dataset)\n\n```\n\n</details>\n\n<details><summary><b>tensorflow</b></summary>\n\n```python\nimport nncf\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\n\n# instantiate your uncompressed model\nmodel = tf.keras.applications.mobilenetv2()\n\n# provide validation part of the dataset to collect statistics needed for the compression algorithm\nval_dataset = tfds.load(\"/path\", split=\"validation\",\n                        shuffle_files=false, as_supervised=true)\n\n# step 1: initialize transformation function\ndef transform_fn(data_item):\n    images, _ = data_item\n    return images\n\n# step 2: initialize nncf dataset\ncalibration_dataset = nncf.dataset(val_dataset, transform_fn)\n# step 3: run the quantization pipeline\nquantized_model = nncf.quantize(model, calibration_dataset)\n```\n\n</details>\n\n<details><summary><b>onnx</b></summary>\n\n```python\nimport onnx\nimport nncf\nimport torch\nfrom torchvision import datasets\n\n# instantiate your uncompressed model\nonnx_model = onnx.load_model(\"/model_path\")\n\n# provide validation part of the dataset to collect statistics needed for the compression algorithm\nval_dataset = datasets.imagefolder(\"/path\", transform=transforms.compose([transforms.totensor()]))\ndataset_loader = torch.utils.data.dataloader(val_dataset, batch_size=1)\n\n# step 1: initialize transformation function\ninput_name = onnx_model.graph.input[0].name\ndef transform_fn(data_item):\n    images, _ = data_item\n    return {input_name: images.numpy()}\n\n# step 2: initialize nncf dataset\ncalibration_dataset = nncf.dataset(dataset_loader, transform_fn)\n# step 3: run the quantization pipeline\nquantized_model = nncf.quantize(onnx_model, calibration_dataset)\n```\n\n</details>\n\n[//]: # (nncf provides full  [samples]&#40;#post-training-quantization-samples&#41;, which demonstrate post-training quantization usage for pytorch, tensorflow, onnx, openvino.)\n\n### training-time compression\n\nbelow is an example of accuracy aware quantization pipeline where model weights and compression parameters may be fine-tuned to achieve a higher accuracy.\n\n<details><summary><b>pytorch</b></summary>\n\n```python\nimport torch\nimport nncf.torch  # important - must be imported before any other external package that depends on torch\n\nfrom nncf import nncfconfig\nfrom nncf.torch import create_compressed_model, register_default_init_args\n\n# instantiate your uncompressed model\nfrom torchvision.models.resnet import resnet50\nmodel = resnet50()\n\n# load a configuration file to specify compression\nnncf_config = nncfconfig.from_json(\"resnet50_int8.json\")\n\n# provide data loaders for compression algorithm initialization, if necessary\nimport torchvision.datasets as datasets\nrepresentative_dataset = datasets.imagefolder(\"/path\", transform=transforms.compose([transforms.totensor()]))\ninit_loader = torch.utils.data.dataloader(representative_dataset)\nnncf_config = register_default_init_args(nncf_config, init_loader)\n\n# apply the specified compression algorithms to the model\ncompression_ctrl, compressed_model = create_compressed_model(model, nncf_config)\n\n# now use compressed_model as a usual torch.nn.module\n# to fine-tune compression parameters along with the model weights\n\n# ... the rest of the usual pytorch-powered training pipeline\n\n# export to onnx or .pth when done fine-tuning\ncompression_ctrl.export_model(\"compressed_model.onnx\")\ntorch.save(compressed_model.state_dict(), \"compressed_model.pth\")\n```\n\n**note (pytorch)**: due to the way nncf works within the pytorch backend, `import nncf` must be done before any other import of `torch` in your package _or_ in third-party packages that your code utilizes, otherwise the compression may be applied incompletely.\n\n</details>\n\n<details><summary><b>tensorflow</b></summary>\n\n```python\nimport tensorflow as tf\n\nfrom nncf import nncfconfig\nfrom nncf.tensorflow import create_compressed_model, register_default_init_args\n\n# instantiate your uncompressed model\nfrom tensorflow.keras.applications import resnet50\nmodel = resnet50()\n\n# load a configuration file to specify compression\nnncf_config = nncfconfig.from_json(\"resnet50_int8.json\")\n\n# provide dataset for compression algorithm initialization\nrepresentative_dataset = tf.data.dataset.list_files(\"/path/*.jpeg\")\nnncf_config = register_default_init_args(nncf_config, representative_dataset, batch_size=1)\n\n# apply the specified compression algorithms to the model\ncompression_ctrl, compressed_model = create_compressed_model(model, nncf_config)\n\n# now use compressed_model as a usual keras model\n# to fine-tune compression parameters along with the model weights\n\n# ... the rest of the usual tensorflow-powered training pipeline\n\n# export to frozen graph, tensorflow savedmodel or .h5  when done fine-tuning\ncompression_ctrl.export_model(\"compressed_model.pb\", save_format=\"frozen_graph\")\n```\n\n</details>\n\nfor a more detailed description of nncf usage in your training code, see [this tutorial](docs/usage.md).\n\n## model compression tutorials and samples\n\nfor a quicker start with nncf-powered compression, try sample notebooks and scripts presented below.\n\n### model compression tutorials\n\na collection of ready-to-run jupyter* notebooks are available to demonstrate how to use nncf compression algorithms to optimize models for inference with the openvino toolkit:\n\n- [accelerate inference of nlp models with post-training quantization api of nncf](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/105-language-quantize-bert)\n- [convert and optimize yolov8 with openvino](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/230-yolov8-optimization)\n- [convert and optimize yolov7 with openvino](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/226-yolov7-optimization)\n- [nncf post-training optimization of segment anything model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/237-segment-anything)\n- [nncf post-training optimization of clip model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/228-clip-zero-shot-image-classification)\n- [nncf post-training optimization of imagebind model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/239-image-bind)\n- [nncf post-training optimization of whisper model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/227-whisper-subtitles-generation)\n- [nncf post-training optimization of blip model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/233-blip-visual-language-processing)\n- [nncf post-training optimization of deepfloyd if model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/238-deepfloyd-if)\n- [nncf post-training optimization of grammatical error correction model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/214-grammar-correction)\n- [nncf post-training optimization of dolly 2.0 model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/240-dolly-2-instruction-following)\n- [nncf post-training optimization of massively multilingual speech model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/255-mms-massively-multilingual-speech)\n- [nncf post-training optimization of oneformer model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/249-oneformer-segmentation)\n- [nncf post-training optimization of instructpix2pix model](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/231-instruct-pix2pix-image-editing)\n- [quantize a segmentation model and show live inference](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/110-ct-segmentation-quantize)\n- [training to deployment with tensorflow and openvino](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/301-tensorflow-training-openvino)\n- [migrate quantization from pot api to nncf api](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/111-yolov5-quantization-migration)\n- [post-training quantization of pytorch model with nncf](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/112-pytorch-post-training-quantization-nncf)\n- [optimizing pytorch models with nncf of openvino by 8-bit quantization](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/302-pytorch-quantization-aware-training)\n- [optimizing tensorflow models with nncf of openvino by 8-bit quantization](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/305-tensorflow-quantization-aware-training)\n- [accelerate inference of sparse transformer models with openvino and 4th gen intel xeon scalable processors](https://github.com/openvinotoolkit/openvino_notebooks/blob/main/notebooks/116-sparsity-optimization)\n- [quantization with accuracy control using nncf](https://github.com/openvinotoolkit/openvino_notebooks/tree/main/notebooks/122-quantizing-model-with-accuracy-control)\n\n### post-training quantization samples\n\ncompact scripts demonstrating quantization and corresponding inference speed boost:\n\n- [post-training quantization of mobilenet v2 openvino model](examples/post_training_quantization/openvino/mobilenet_v2/readme.md)\n- [post-training quantization of yolov8 openvino model](examples/post_training_quantization/openvino/yolov8/readme.md)\n- [post-training quantization of anomaly classification openvino model with control of accuracy metric](examples/post_training_quantization/openvino/quantize_with_accuracy_control/readme.md)\n- [post-training quantization of yolov8 openvino model with control of accuracy metric](examples/post_training_quantization/openvino/yolov8_quantize_with_accuracy_control/readme.md)\n- [post-training quantization of mobilenet v2 pytorch model](examples/post_training_quantization/torch/mobilenet_v2/readme.md)\n- [post-training quantization of ssd pytorch model](examples/post_training_quantization/torch/ssd300_vgg16/readme.md)\n- [post-training quantization of mobilenet v2 onnx model](examples/post_training_quantization/onnx/mobilenet_v2/readme.md)\n- [post-training quantization of mobilenet v2 tensorflow model](examples/post_training_quantization/tensorflow/mobilenet_v2/readme.md)\n\n### training-time compression samples\n\nthese examples provide full pipelines including compression, training and inference for classification, object detection and segmentation tasks.\n\n- pytorch samples:\n  - [image classification sample](examples/torch/classification/readme.md)\n  - [object detection sample](examples/torch/object_detection/readme.md)\n  - [semantic segmentation sample](examples/torch/semantic_segmentation/readme.md)\n- tensorflow samples:\n  - [image classification sample](examples/tensorflow/classification/readme.md)\n  - [object detection sample](examples/tensorflow/object_detection/readme.md)\n  - [instance segmentation sample](examples/tensorflow/segmentation/readme.md)\n\n## third-party repository integration\n\nnncf may be straightforwardly integrated into training/evaluation pipelines of third-party repositories.\n\n### used by\n\n- [openvino training extensions](https://github.com/openvinotoolkit/training_extensions)\n\n  nncf is integrated into openvino training extensions as model optimization backend. so you can train, optimize and export new models based on the available model templates as well as run exported models with openvino.\n\n- [huggingface optimum intel](https://huggingface.co/docs/optimum/intel/optimization_ov)\n\n  nncf is used as a compression backend within the renowned `transformers` repository in huggingface optimum intel.\n\n### git patches for third-party repository\n\nsee [third_party_integration](./third_party_integration) for examples of code modifications (git patches and base commit ids are provided) that are necessary to integrate nncf into the following repositories:\n\n- [huggingface-transformers](third_party_integration/huggingface_transformers/readme.md)\n\n## installation guide\n\nfor detailed installation instructions please refer to the [installation](./docs/installation.md) page.\n\nnncf can be installed as a regular pypi package via pip:\n\n```bash\npip install nncf\n```\n\nif you want to install both nncf and the supported pytorch version in one line, you can do this by simply running:\n\n```bash\npip install nncf[torch]\n```\n\nother viable options besides `[torch]` are `[tf]`, `[onnx]` and `[openvino]`.\n\nnncf is also available via [conda](https://anaconda.org/conda-forge/nncf):\n\n```bash\nconda install -c conda-forge nncf\n```\n\nyou may also use one of the dockerfiles in the [docker](./docker) directory to build an image with an environment already set up and ready for running nncf [sample scripts](#model-compression-tutorials-and-samples).\n\n### system requirements\n\n- ubuntu\\* 18.04 or later (64-bit)\n- python\\* 3.7 or later\n- supported frameworks:\n  - pytorch\\* >=2.0, <2.2\n  - tensorflow\\* >=2.8.4, <=2.12.1\n  - onnx\\* ~=1.13.1\n  - openvino\\* >=2022.3.0\n\nthis repository is tested on python* 3.8.10, pytorch* 2.1.0 (nvidia cuda\\* toolkit 11.8) and tensorflow* 2.12.1 (nvidia cuda\\* toolkit 11.8).\n\n## nncf compressed model zoo\n\nlist of models and compression results for them can be found at our [model zoo page](./docs/modelzoo.md).\n\n## citing\n\n```bi\n@article{kozlov2020neural,\n    title =   {neural network compression framework for fast model inference},\n    author =  {kozlov, alexander and lazarevich, ivan and shamporov, vasily and lyalyushkin, nikolay and gorbachev, yury},\n    journal = {arxiv preprint arxiv:2002.08679},\n    year =    {2020}\n}\n```\n\n## contributing guide\n\nrefer to the [contributing.md](./contributing.md) file for guidelines on contributions to the nncf repository.\n\n## useful links\n\n- [documentation](./docs)\n- example scripts (model objects available through links in respective readme.md files):\n  - [pytorch](./examples/torch)\n  - [tensorflow](./examples/tensorflow)\n- [faq](./docs/faq.md)\n- [notebooks](https://github.com/openvinotoolkit/openvino_notebooks#-model-training)\n- [huggingface optimum intel](https://huggingface.co/docs/optimum/intel/optimization_ov)\n- [openvino model optimization guide](https://docs.openvino.ai/latest/openvino_docs_model_optimization_guide.html)\n\n## telemetry\n\nnncf as part of the openvino\u2122 toolkit collects anonymous usage data for the purpose of improving openvino\u2122 tools.\nyou can opt-out at any time by running the following command in the python environment where you have nncf installed:\n\n`opt_in_out --opt_out`\n\nmore information is available at https://docs.openvino.ai/latest/openvino_docs_telemetry_information.html.\n",
  "docs_url": null,
  "keywords": "compression,quantization,sparsity,mixed-precision-training,quantization-aware-training,hawq,classification,pruning,object-detection,semantic-segmentation,nas,nlp,bert,transformers,mmdetection",
  "license": "apache-2.0",
  "name": "nncf",
  "package_url": "https://pypi.org/project/nncf/",
  "project_url": "https://pypi.org/project/nncf/",
  "project_urls": {
    "Homepage": "https://github.com/openvinotoolkit/nncf"
  },
  "release_url": "https://pypi.org/project/nncf/2.7.0/",
  "requires_dist": [
    "jsonschema >=3.2.0",
    "jstyleson >=0.0.2",
    "natsort >=7.1.0",
    "networkx <=2.8.2,>=2.6",
    "ninja <1.11,>=1.10.0.post2",
    "numpy <1.27,>=1.19.1",
    "openvino-telemetry >=2023.2.0",
    "packaging >=20.0",
    "pandas <2.1,>=1.1.5",
    "psutil",
    "pydot >=1.4.1",
    "pymoo >=0.6.0.1",
    "pyparsing <3.0",
    "rich >=13.5.2",
    "scikit-learn >=0.24.0",
    "scipy >=1.3.2",
    "texttable >=1.6.3",
    "tqdm >=4.54.1",
    "tensorflow ~=2.12.0 ; extra == 'all'",
    "tensorflow-metadata <=1.13.0 ; extra == 'all'",
    "onnx ~=1.13.1 ; extra == 'all'",
    "openvino ==2023.2 ; extra == 'all'",
    "torch <2.2,>=2.0 ; (python_version < \"3.11\") and extra == 'all'",
    "onnxruntime ~=1.14.1 ; (python_version < \"3.11\") and extra == 'all'",
    "black ==23.3.0 ; extra == 'dev'",
    "isort ==5.12.0 ; extra == 'dev'",
    "kaleido >=0.2.1 ; extra == 'dev'",
    "matplotlib <3.6,>=3.3.4 ; extra == 'dev'",
    "pillow >=9.0.0 ; extra == 'dev'",
    "plotly-express >=0.4.1 ; extra == 'dev'",
    "pre-commit ==3.2.2 ; extra == 'dev'",
    "onnx ~=1.13.1 ; extra == 'onnx'",
    "onnxruntime ~=1.14.1 ; (python_version < \"3.11\") and extra == 'onnx'",
    "openvino ==2023.2 ; extra == 'openvino'",
    "torch <2.2,>=2.0 ; (python_version < \"3.11\") and extra == 'pytorch'",
    "tensorflow ~=2.12.0 ; extra == 'tensorflow'",
    "tensorflow-metadata <=1.13.0 ; extra == 'tensorflow'",
    "tensorflow ~=2.12.0 ; extra == 'tensorflow2'",
    "tensorflow-metadata <=1.13.0 ; extra == 'tensorflow2'",
    "pytest ; extra == 'tests'",
    "tensorflow ~=2.12.0 ; extra == 'tf'",
    "tensorflow-metadata <=1.13.0 ; extra == 'tf'",
    "torch <2.2,>=2.0 ; (python_version < \"3.11\") and extra == 'torch'"
  ],
  "requires_python": "",
  "summary": "neural networks compression framework",
  "version": "2.7.0",
  "releases": [],
  "developers": [
    "alexander.kozlov@intel.com",
    "intel"
  ],
  "kwds": "compression compression_algorithms create_compressed_model compressed_model accuracy_aware_model_training",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_nncf",
  "homepage": "https://github.com/openvinotoolkit/nncf",
  "release_count": 16,
  "dependency_ids": [
    "pypi_black",
    "pypi_isort",
    "pypi_jsonschema",
    "pypi_jstyleson",
    "pypi_kaleido",
    "pypi_matplotlib",
    "pypi_natsort",
    "pypi_networkx",
    "pypi_ninja",
    "pypi_numpy",
    "pypi_onnx",
    "pypi_onnxruntime",
    "pypi_openvino",
    "pypi_openvino_telemetry",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_plotly_express",
    "pypi_pre_commit",
    "pypi_psutil",
    "pypi_pydot",
    "pypi_pymoo",
    "pypi_pyparsing",
    "pypi_pytest",
    "pypi_rich",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_tensorflow",
    "pypi_tensorflow_metadata",
    "pypi_texttable",
    "pypi_torch",
    "pypi_tqdm"
  ],
  "documentation_summary": "The HTML text provides detailed information about the Neural Network Compression Framework (NNCF) version 2.8.1, released on February 9, 2024. NNCF, developed by Intel, is designed for optimizing neural network inference with minimal accuracy drop, supporting PyTorch, TensorFlow, ONNX, and OpenVINO\u2122. It offers post-training and training-time compression algorithms, including quantization, sparsity, and pruning, to enhance model efficiency. The framework is available as a Python package and supports various compression methods across different platforms. Key features include GPU-accelerated layers, distributed training, and seamless integration of multiple compression algorithms. The documentation provides comprehensive guides on installation, usage, and integrating NNCF into custom training pipelines. Additionally, the text mentions the availability of sample notebooks and scripts for quick start, third-party repository integration, and a model zoo showcasing compression results.",
  "embedding": [
    -0.0230997446924448,
    -0.003425329690799117,
    0.018329760059714317,
    -0.014317029155790806,
    0.015003510750830173,
    0.010120292194187641,
    -0.005283075850456953,
    -0.016900179907679558,
    -0.014734579250216484,
    -0.010955393314361572,
    0.04257600009441376,
    0.019447946920990944,
    -0.015357366763055325,
    0.004090579692274332,
    0.005226458888500929,
    -0.011542795225977898,
    0.014479802921414375,
    -0.0094975046813488,
    -0.008796869777143002,
    -0.033800359815359116,
    0.014062252826988697,
    0.026907239109277725,
    -0.027346020564436913,
    -0.050587307661771774,
    -0.008379318751394749,
    0.01777774468064308,
    0.020113196223974228,
    -0.016121696680784225,
    0.012278816662728786,
    0.009631970897316933,
    0.015909383073449135,
    -0.0024575325660407543,
    -0.0187543872743845,
    -0.008612864650785923,
    0.0013579238438978791,
    -0.016475552693009377,
    0.004508130252361298,
    -0.013941940851509571,
    0.04285908490419388,
    0.005007067695260048,
    0.03779185935854912,
    0.02631276100873947,
    -0.014154255390167236,
    -0.00047593683120794594,
    -0.012972374446690083,
    -0.012193890288472176,
    -0.012342510744929314,
    -0.0032643249724060297,
    -0.00791222881525755,
    0.00750883249565959,
    0.004578901454806328,
    0.020863372832536697,
    0.005353847052901983,
    0.022873276844620705,
    -0.005789090413600206,
    0.006702039856463671,
    -0.029950404539704323,
    0.04602963849902153,
    -0.007784840185195208,
    -0.010934161953628063,
    0.004423204809427261,
    0.01674448326230049,
    -0.035017628222703934,
    0.011953268200159073,
    0.0055909305810928345,
    -0.0014755810843780637,
    0.008018385618925095,
    0.02682231366634369,
    -0.010452917777001858,
    -0.0016118157655000687,
    0.018513765186071396,
    0.060580212622880936,
    -0.02082091011106968,
    -0.0009642586228437722,
    0.03125259652733803,
    -0.018301451578736305,
    -0.014451494440436363,
    0.0306014996021986,
    -0.01094831619411707,
    -0.01810329221189022,
    0.005785551853477955,
    0.004341817926615477,
    -0.0008589863427914679,
    0.03688598796725273,
    0.005813860334455967,
    0.02677985094487667,
    0.0005555545212700963,
    0.01396317221224308,
    -0.0095541225746274,
    -0.004890295211225748,
    0.024911489337682724,
    0.01763620227575302,
    0.027331866323947906,
    0.013177611865103245,
    -0.0107855424284935,
    0.016376473009586334,
    -0.00898087490350008,
    0.00257607433013618,
    0.005063684657216072,
    0.021302154287695885,
    -0.032016925513744354,
    0.03714076429605484,
    -0.007317749783396721,
    -0.01589522883296013,
    -0.03303603082895279,
    -0.030516574159264565,
    -0.007246978580951691,
    0.017381425946950912,
    0.014805350452661514,
    0.032696329057216644,
    -0.011620643548667431,
    0.03855619207024574,
    -0.03917897865176201,
    -0.03753708302974701,
    0.01467796228826046,
    -0.0070240492932498455,
    0.03303603082895279,
    -0.017876824364066124,
    0.010063675232231617,
    0.0038570344913750887,
    0.008513784036040306,
    0.006786965299397707,
    0.02182586118578911,
    -0.009101185947656631,
    -0.015343212522566319,
    -0.005746627692133188,
    0.022264642640948296,
    -0.012859140522778034,
    0.0008930450421757996,
    -0.03181876614689827,
    0.0187543872743845,
    0.017876824364066124,
    0.015385675244033337,
    0.0027990038506686687,
    -0.02225048840045929,
    0.018131600692868233,
    -0.000192077670362778,
    -0.021019069477915764,
    -0.04152858257293701,
    -0.003662413451820612,
    0.008421781472861767,
    0.030941201373934746,
    -0.039150670170784,
    -0.037055838853120804,
    -0.007487601134926081,
    0.02581736072897911,
    -0.016687866300344467,
    0.011960345320403576,
    0.0298937875777483,
    -0.0130148371681571,
    0.0038428802508860826,
    -0.04450097680091858,
    -0.018060829490423203,
    0.019900882616639137,
    0.01555552612990141,
    0.00997874978929758,
    0.005123840179294348,
    0.010084906592965126,
    -0.025704126805067062,
    -0.015428137965500355,
    -0.01924978755414486,
    0.034338220953941345,
    -0.02921438217163086,
    -0.01871192455291748,
    0.0023566833697259426,
    0.008987952023744583,
    0.04886049032211304,
    -0.039518680423498154,
    -0.012668058276176453,
    -0.008329778909683228,
    0.032158467918634415,
    0.012222199700772762,
    0.003934883046895266,
    0.008719021454453468,
    0.009108263067901134,
    0.0025300730485469103,
    0.03425329551100731,
    0.01664540357887745,
    -0.022476956248283386,
    0.002082444727420807,
    0.015583834610879421,
    0.01259020995348692,
    0.02571828104555607,
    0.007629143539816141,
    -0.02706293575465679,
    -0.018669461831450462,
    0.010134446434676647,
    -0.01555552612990141,
    -0.001222573802806437,
    -0.003538563847541809,
    0.016164159402251244,
    0.007445137947797775,
    0.004041039850562811,
    0.006479110103100538,
    -0.5639055371284485,
    -0.009936287067830563,
    0.0038782658521085978,
    -0.026199525222182274,
    0.009341808035969734,
    -0.004564747214317322,
    -0.004359510727226734,
    -0.00656049745157361,
    -0.01358808483928442,
    0.029044531285762787,
    -0.018414685502648354,
    0.006464955862611532,
    -0.009249805472791195,
    -0.007077127695083618,
    -0.0286057498306036,
    -0.023014819249510765,
    -0.005944787058979273,
    -0.015258287079632282,
    -0.003324480727314949,
    6.413646769942716e-05,
    -0.008329778909683228,
    0.022774197161197662,
    -0.0012924603652209044,
    0.02370837703347206,
    -0.006351721938699484,
    0.032583095133304596,
    0.02135877124965191,
    0.010254757478833199,
    0.04118888080120087,
    -0.029695626348257065,
    -0.03739554062485695,
    0.016758637502789497,
    0.006454340182244778,
    -0.010806773789227009,
    0.049115266650915146,
    -0.015725377947092056,
    -0.01555552612990141,
    0.03184707462787628,
    0.025590892881155014,
    0.030233489349484444,
    -0.02210894599556923,
    -0.008039616979658604,
    0.007791917305439711,
    0.002282373607158661,
    -0.012370819225907326,
    0.00014895142521709204,
    0.007466369774192572,
    0.01835806854069233,
    0.012618518434464931,
    -0.016050925478339195,
    0.009539968334138393,
    -0.01069353986531496,
    0.013857015408575535,
    0.008761484175920486,
    0.0029564700089395046,
    -0.02820943109691143,
    0.03521578758955002,
    -0.020311355590820312,
    0.017409734427928925,
    -0.00040936758159659803,
    0.00629510497674346,
    0.01646139845252037,
    -0.0013411156833171844,
    -0.05732473358511925,
    -0.016121696680784225,
    0.022830814123153687,
    -0.00047505219117738307,
    -0.030233489349484444,
    0.0031422446481883526,
    -0.014033944346010685,
    0.00515214866027236,
    0.015314904041588306,
    0.013566853478550911,
    -0.023623451590538025,
    0.018060829490423203,
    0.030799658969044685,
    0.019830111414194107,
    0.01023352611809969,
    -0.001859515206888318,
    0.030941201373934746,
    0.003998577129095793,
    0.0038074946496635675,
    -0.006312797777354717,
    -0.02103322371840477,
    8.818764035822824e-05,
    0.014649653807282448,
    0.00907287746667862,
    0.008903026580810547,
    0.02082091011106968,
    -0.0018294374458491802,
    0.007572526577860117,
    0.029440850019454956,
    -0.02414715848863125,
    -0.04625610634684563,
    -0.013333308510482311,
    0.013736704364418983,
    -0.0016472014831379056,
    -0.003469561692327261,
    -0.006362337619066238,
    0.003131628967821598,
    0.018726078793406487,
    0.004600132815539837,
    -0.023128053173422813,
    -0.010367991402745247,
    0.0024699175264686346,
    0.009455041959881783,
    -0.0004635518416762352,
    0.005442311055958271,
    0.016518015414476395,
    -0.011663106270134449,
    -0.0240339245647192,
    -0.0297805517911911,
    -0.020113196223974228,
    0.0009819514816626906,
    0.008641173131763935,
    -0.03555548936128616,
    0.030941201373934746,
    0.019589489325881004,
    0.011146475560963154,
    0.005966018419712782,
    -0.00343240681104362,
    0.007154976017773151,
    0.0007311557419598103,
    0.029950404539704323,
    0.023510217666625977,
    -0.014147178269922733,
    0.014423185959458351,
    -0.013687164522707462,
    -0.055371444672346115,
    -0.0022062945645302534,
    0.012653904035687447,
    0.016871871426701546,
    0.04124549776315689,
    0.002024058485403657,
    0.03793340176343918,
    0.013007760047912598,
    0.010396299883723259,
    0.0070382035337388515,
    0.01664540357887745,
    -0.031224286183714867,
    -0.008159928023815155,
    0.011811725795269012,
    0.01732480898499489,
    -0.03193200007081032,
    -0.025689972564578056,
    0.010537843219935894,
    -0.0056581636890769005,
    0.018513765186071396,
    0.01280252356082201,
    -0.015541371889412403,
    -0.011719723232090473,
    -0.022590190172195435,
    -0.0407925620675087,
    0.00857040099799633,
    -0.00018887083570007235,
    -0.001180110964924097,
    -0.019193170592188835,
    -0.048662327229976654,
    -0.03467792645096779,
    -0.020367972552776337,
    0.012852063402533531,
    0.021627701818943024,
    -0.035187479108572006,
    0.013807475566864014,
    -0.012781292200088501,
    0.003733184887096286,
    -0.016475552693009377,
    0.03513086214661598,
    -0.0005812090821564198,
    -0.014932739548385143,
    -0.021868323907256126,
    -0.030969509854912758,
    -0.0007541563827544451,
    0.01494689378887415,
    0.009646125137805939,
    -0.01842883974313736,
    -0.0011571103241294622,
    -0.007289441302418709,
    -0.008464244194328785,
    -0.018839312717318535,
    -0.0026503843255341053,
    0.003998577129095793,
    -0.02471332997083664,
    -0.019688569009304047,
    0.019405484199523926,
    0.013595161959528923,
    0.004394896328449249,
    0.028733137995004654,
    -0.019094090908765793,
    0.012002808041870594,
    -0.008223622106015682,
    -0.01494689378887415,
    -0.033375732600688934,
    0.03456469252705574,
    -0.0021443695295602083,
    -0.011146475560963154,
    0.012540670111775398,
    -0.017055876553058624,
    0.0016472014831379056,
    0.020764291286468506,
    0.0037084147334098816,
    -0.012852063402533531,
    0.006033251062035561,
    -0.014522265642881393,
    0.0014003865653648973,
    -0.007208054419606924,
    0.020551977679133415,
    -0.02450101636350155,
    0.021259691566228867,
    0.0034518688917160034,
    0.018669461831450462,
    -0.0017223958857357502,
    -0.017480505630373955,
    -0.021769244223833084,
    -0.017098339274525642,
    0.023595143109560013,
    -0.011316327378153801,
    0.016079233959317207,
    -0.022491110488772392,
    -0.006075713783502579,
    0.006751579698175192,
    -0.01289452612400055,
    0.028506670147180557,
    0.011146475560963154,
    0.009023337624967098,
    0.029384233057498932,
    -0.020099041983485222,
    0.014246257953345776,
    0.02682231366634369,
    -0.037225689738988876,
    -0.001617123605683446,
    0.02745925448834896,
    -0.018400531262159348,
    -0.02274588868021965,
    0.02377914823591709,
    0.007027587853372097,
    0.040764253586530685,
    -0.014833658933639526,
    0.025053031742572784,
    -0.021698473021388054,
    0.005760781932622194,
    0.0035651030484586954,
    0.026411840692162514,
    -0.002622075844556093,
    0.016376473009586334,
    0.010601537302136421,
    0.009589508175849915,
    0.01312099490314722,
    -0.02239203080534935,
    -0.013885323889553547,
    -0.013835784047842026,
    0.00772114610299468,
    -0.007236362900584936,
    0.0070382035337388515,
    0.009815976023674011,
    -0.005541390739381313,
    -0.0031634760089218616,
    -0.009808898903429508,
    0.04917188361287117,
    0.005778474733233452,
    0.008450089953839779,
    -0.013913632370531559,
    0.007317749783396721,
    -0.0018559766467660666,
    0.02185416966676712,
    -0.03167722374200821,
    0.02274588868021965,
    -0.031762149184942245,
    -0.005842168815433979,
    -0.0169992595911026,
    -0.029157765209674835,
    -0.025222882628440857,
    -0.00496460497379303,
    -0.020551977679133415,
    0.043227095156908035,
    0.00496460497379303,
    0.02503887750208378,
    0.029327616095542908,
    0.01732480898499489,
    0.02145785093307495,
    -0.01064400002360344,
    -0.015201670117676258,
    0.0248548723757267,
    0.016588786616921425,
    0.005789090413600206,
    0.010566151700913906,
    -0.0429157018661499,
    0.016687866300344467,
    -0.021273845806717873,
    0.005428156815469265,
    0.0030077791307121515,
    0.006489725783467293,
    -0.020764291286468506,
    -0.006351721938699484,
    -0.014932739548385143,
    -0.003998577129095793,
    0.015329058282077312,
    -0.03198861703276634,
    -0.01613585092127323,
    -0.004812446888536215,
    0.009292268194258213,
    0.008280239067971706,
    -0.0068117352202534676,
    -0.002825543051585555,
    0.018584536388516426,
    0.0010774927213788033,
    -0.00294585432857275,
    -0.02510964870452881,
    -0.0105519974604249,
    -0.004932757932692766,
    0.03207354247570038,
    -0.007423906587064266,
    0.01932055875658989,
    -0.004200275056064129,
    0.025548430159687996,
    -0.01763620227575302,
    0.009865515865385532,
    2.144217660315917e-06,
    0.02921438217163086,
    0.000301883730571717,
    0.00937719363719225,
    -0.00798300001770258,
    -0.001745396526530385,
    -0.0003352789208292961,
    0.03430991247296333,
    0.023580988869071007,
    0.001665778923779726,
    -0.007537140976637602,
    -0.03838634118437767,
    -0.009179034270346165,
    -0.01878269575536251,
    0.016772791743278503,
    0.005283075850456953,
    0.00596247985959053,
    0.0037296460941433907,
    0.0025088416878134012,
    0.0012632672442123294,
    -0.00048168699140660465,
    0.008556246757507324,
    0.01312099490314722,
    0.005615700501948595,
    -0.02063690312206745,
    0.0006714424816891551,
    -0.009341808035969734,
    -0.011316327378153801,
    -0.0016056232852861285,
    0.017593739554286003,
    0.0169992595911026,
    0.029837168753147125,
    0.0036004886496812105,
    0.027232786640524864,
    0.040877487510442734,
    -0.014472725801169872,
    -0.01967441476881504,
    0.0011173015227541327,
    -0.00021142918558325619,
    0.021146457642316818,
    0.01763620227575302,
    -0.02124553732573986,
    0.026652462780475616,
    0.009985826909542084,
    0.021401233971118927,
    -0.010297220200300217,
    0.004168428014963865,
    -0.008853486739099026,
    0.007137283217161894,
    -0.004992913454771042,
    0.0001037794427247718,
    0.018726078793406487,
    -0.009943364188075066,
    0.016518015414476395,
    0.02138707973062992,
    0.0014773503644391894,
    0.0019639029633253813,
    0.031620606780052185,
    -0.0029423157684504986,
    -0.04011315852403641,
    -0.004267507698386908,
    0.015980154275894165,
    -0.0042462763376533985,
    -0.0028556210454553366,
    -0.001322538242675364,
    0.029950404539704323,
    -0.03824479877948761,
    -0.021726781502366066,
    -0.02624198980629444,
    0.004384280648082495,
    -0.012314202263951302,
    -0.014975202269852161,
    0.02060859464108944,
    -0.004147196654230356,
    0.00357571872882545,
    -0.033800359815359116,
    -0.0007139052613638341,
    -0.015668760985136032,
    -0.02724694088101387,
    -0.040198083966970444,
    0.00029281614115461707,
    0.015357366763055325,
    0.005297230090945959,
    0.019363021478056908,
    0.005102608818560839,
    0.015116744674742222,
    -0.007445137947797775,
    0.009009183384478092,
    -0.007324826903641224,
    -0.025704126805067062,
    -0.04141534864902496,
    0.022052329033613205,
    -0.04577486217021942,
    -0.0050530689768493176,
    -0.0063835689797997475,
    0.00480183120816946,
    0.00023863189562689513,
    0.02063690312206745,
    -0.0017825515242293477,
    -0.003181168809533119,
    0.01494689378887415,
    -0.007172668818384409,
    0.01903747394680977,
    0.006273873616009951,
    -0.004352433606982231,
    0.01631985604763031,
    -0.01396317221224308,
    0.02560504712164402,
    -0.016687866300344467,
    -0.017452197149395943,
    -0.022972356528043747,
    -0.025732435286045074,
    0.01409056130796671,
    0.015173361636698246,
    0.014578882604837418,
    -0.015357366763055325,
    -0.0025070724077522755,
    0.0354139469563961,
    -0.018513765186071396,
    -0.005870477296411991,
    0.009773513302206993,
    0.003338634967803955,
    -0.0005559968412853777,
    -0.013977326452732086,
    0.02767156809568405,
    -0.0004940719809383154,
    -0.0025300730485469103,
    0.01749465987086296,
    -0.0035845651291310787,
    0.04257600009441376,
    0.030516574159264565,
    0.002415069844573736,
    0.03456469252705574,
    -0.01817406341433525,
    0.00665250001475215,
    -0.03425329551100731,
    0.03753708302974701,
    -0.007607912179082632,
    0.0349327027797699,
    -0.009469196200370789,
    -0.0010677615646272898,
    -0.016277393326163292,
    -0.017664510756731033,
    -0.016985105350613594,
    0.027798956260085106,
    0.007402675226330757,
    -0.022590190172195435,
    -0.019971653819084167,
    -0.00022093908046372235,
    -0.0009421426220797002,
    -0.016489706933498383,
    -0.0008749098633415997,
    -0.02389238215982914,
    0.001838283846154809,
    -0.00840762723237276,
    0.0077565317042171955,
    0.02368006855249405,
    -0.03439484164118767,
    0.006588805932551622,
    -0.019164862111210823,
    -0.023623451590538025,
    -0.01763620227575302,
    -0.006082790903747082,
    -0.022731734439730644,
    -0.0042462763376533985,
    0.028591595590114594,
    0.020042425021529198,
    0.04520868882536888,
    0.02060859464108944,
    -0.0011818802449852228,
    0.011564026586711407,
    -0.0038570344913750887,
    -0.004897372331470251,
    0.016150005161762238,
    0.007466369774192572,
    -0.015314904041588306,
    -0.003282018005847931,
    0.012144350446760654,
    0.012774215079843998,
    0.011380021460354328,
    -0.03878265991806984,
    0.01732480898499489,
    0.013736704364418983,
    0.005636931862682104,
    -0.011960345320403576,
    -0.0056581636890769005,
    -0.014076407067477703,
    0.014833658933639526,
    0.011210169643163681,
    0.0024062234442681074,
    0.022915739566087723,
    -0.03130921348929405,
    -0.01920732483267784,
    0.035980116575956345,
    0.012696366757154465,
    0.029044531285762787,
    0.012130196206271648,
    -0.0037650319281965494,
    0.022335413843393326,
    -0.0009244497632607818,
    0.01106862723827362,
    0.0028166966512799263,
    -0.01575368642807007,
    -0.006142946891486645,
    -0.028917143121361732,
    -0.03841464966535568,
    0.0182872973382473,
    -0.0077494545839726925,
    0.01467796228826046,
    0.012441590428352356,
    -0.005021221935749054,
    -0.028832217678427696,
    0.01842883974313736,
    -0.02257603593170643,
    -0.006181871052831411,
    0.018881775438785553,
    -0.033234190195798874,
    -0.04251938313245773,
    -0.008832255378365517,
    -0.0047487523406744,
    -0.015682915225625038,
    0.005261844489723444,
    -0.012236353941261768,
    -0.0015030049253255129,
    0.009115340188145638,
    0.003039626171812415,
    0.006694962736219168,
    0.0016206621658056974,
    0.017834361642599106,
    0.03745215758681297,
    0.03088458441197872,
    0.02014150470495224,
    0.018131600692868233,
    -0.0069638933055102825,
    -0.019561180844902992,
    -0.016900179907679558,
    -0.014055175706744194,
    0.004104733932763338,
    0.028803909197449684,
    0.03496101126074791,
    -0.014762887731194496,
    -0.01494689378887415,
    0.018980855122208595,
    -0.006415416020900011,
    -0.04167012870311737,
    -0.03620658442378044,
    0.03382866829633713,
    0.046907201409339905,
    0.030346723273396492,
    -0.029950404539704323,
    -0.025944748893380165,
    -0.00881810113787651,
    -0.004812446888536215,
    -0.009009183384478092,
    -0.028775600716471672,
    0.0031440139282494783,
    -0.017834361642599106,
    -0.012668058276176453,
    0.019306404516100883,
    -0.001295114285312593,
    0.010905853472650051,
    0.007586680818349123,
    -0.017791898921132088,
    -0.0013835784047842026,
    -0.016418935731053352,
    -0.002202756004408002,
    0.014104715548455715,
    -0.00900210626423359,
    0.030346723273396492,
    0.0077706859447062016,
    -0.00944796483963728,
    0.05262552201747894,
    -0.007622066419571638,
    -0.020976606756448746,
    0.021981557831168175,
    -0.02084921859204769,
    0.03682937100529671,
    -0.021953249350190163,
    -0.016617095097899437,
    -0.03702753037214279,
    -0.024939797818660736,
    0.004532900173217058,
    0.0025707664899528027,
    -0.007855611853301525,
    -0.01707003079354763,
    -0.007728223223239183,
    0.008542092517018318,
    -0.002087752567604184,
    -0.009221496991813183,
    -0.035017628222703934,
    -0.0008014846825972199,
    0.020481206476688385,
    -0.013007760047912598,
    -0.02745925448834896,
    -0.01544229220598936,
    0.0040870411321520805,
    -0.026949701830744743,
    -0.007452215068042278,
    -0.012993605807423592,
    -0.015357366763055325,
    0.014352414757013321,
    -0.0006608268013224006,
    -0.004766445606946945,
    -0.027020473033189774,
    0.06709116697311401,
    -0.019405484199523926,
    -0.0030042405705899,
    0.005028299055993557,
    -0.004207352176308632,
    -0.03363050892949104,
    0.01501766499131918,
    -0.016121696680784225,
    -0.008393472991883755,
    0.015258287079632282,
    -0.011259709484875202,
    -0.027954652905464172,
    -0.009752281941473484,
    -0.011988653801381588,
    0.032979413866996765,
    0.02649676613509655,
    -0.02317051589488983,
    0.0025636893697082996,
    0.040226392447948456,
    -0.016886025667190552,
    -0.02096245251595974,
    -0.0035155632067471743,
    0.021797552704811096,
    0.0028326204046607018,
    -0.027020473033189774,
    0.008959643542766571,
    -0.02888883464038372,
    0.01831560581922531,
    -0.03425329551100731,
    0.0020346741657704115,
    0.037876784801483154,
    -0.023368675261735916,
    -0.04588809609413147,
    0.010275988839566708,
    0.0013782705646008253,
    -0.006857736501842737,
    0.01037506852298975,
    0.014593036845326424,
    -0.0165321696549654,
    -0.023453600704669952,
    0.01742388866841793,
    -0.020551977679133415,
    -0.012816677801311016,
    -0.0032501707319170237,
    0.01728234626352787,
    -0.008520861156284809,
    -0.0016056232852861285,
    -0.0012614979641512036,
    -0.01978764869272709,
    -0.00026229603099636734,
    -0.012724675238132477,
    -0.025774898007512093,
    0.0003828283806797117,
    -0.004217967856675386,
    0.02103322371840477,
    0.021670164540410042,
    -0.017296500504016876,
    -0.02614290826022625,
    -0.026114599779248238,
    -0.024444399401545525,
    -0.018343914300203323,
    -0.050332531332969666,
    0.0290728397667408,
    -0.019334712997078896,
    0.00914364866912365,
    0.010799696668982506,
    0.01885346695780754,
    0.0005732473218813539,
    0.037763550877571106,
    -0.007027587853372097,
    0.006907276343554258,
    -0.010686462745070457,
    0.01985841989517212,
    0.007020510733127594,
    -0.01650386117398739,
    -0.04769983887672424,
    -0.0023071435280144215,
    -0.006564036011695862,
    0.0028715445660054684,
    0.001065992284566164,
    0.025449350476264954,
    0.01885346695780754,
    -0.01603677123785019,
    0.018839312717318535,
    -0.0028290818445384502,
    -0.002066521206870675,
    0.0033793284092098475,
    0.04237784072756767,
    -0.019009165465831757,
    -0.02260434441268444,
    0.007558372337371111,
    -0.0066241915337741375,
    0.020169813185930252,
    -0.0024203776847571135,
    0.015725377947092056,
    -0.015767840668559074,
    -0.007123128976672888,
    -0.01824483461678028,
    -0.0028326204046607018,
    0.02443024516105652,
    -0.006196025293320417,
    -0.00193028652574867,
    0.01831560581922531,
    -0.0028326204046607018,
    0.042406149208545685,
    0.021840015426278114,
    0.005516620818525553,
    0.0018347452860325575,
    0.012901603244245052,
    -0.030799658969044685,
    0.012979451566934586,
    0.02828020229935646,
    0.0034217911306768656,
    -0.003853495931252837,
    -0.02145785093307495,
    0.04781307280063629,
    -0.008627018891274929,
    -0.017862670123577118,
    -0.0012323048431426287,
    -0.001845360966399312,
    -0.015739532187581062,
    -0.008761484175920486,
    -0.011146475560963154,
    -0.013397002592682838,
    0.006861275061964989,
    -0.0038570344913750887,
    0.002354914089664817,
    0.006592344492673874,
    -0.014578882604837418,
    -0.002423916244879365,
    -0.007706991862505674,
    -0.005856323055922985,
    0.025873977690935135,
    -0.02152862213551998,
    -0.041019029915332794,
    -0.01838637702167034,
    -0.012073579244315624,
    0.007494678255170584,
    0.012455744668841362,
    0.18230681121349335,
    0.006737425457686186,
    0.006932046264410019,
    0.022618500515818596,
    0.004610748495906591,
    0.015145053155720234,
    0.0004847832315135747,
    0.000647114822641015,
    -0.01978764869272709,
    0.022760042920708656,
    0.0022841428872197866,
    0.008577478118240833,
    0.0035084860865026712,
    -0.007997154258191586,
    0.016659557819366455,
    -0.021726781502366066,
    -0.011380021460354328,
    -0.04857740178704262,
    -0.02091998979449272,
    0.029299307614564896,
    -0.007855611853301525,
    -0.012420359067618847,
    -0.001086339121684432,
    0.010736002586781979,
    0.019561180844902992,
    -0.00636587617918849,
    -0.010325528681278229,
    0.0011066858423873782,
    0.02771403081715107,
    0.013064377009868622,
    -0.005283075850456953,
    0.0321301594376564,
    -0.0006758656818419695,
    -0.0009607200627215207,
    -0.03796171024441719,
    -0.004317048005759716,
    0.026128754019737244,
    0.0058173988945782185,
    -0.01671617478132248,
    0.02471332997083664,
    0.01416133251041174,
    -0.05214427411556244,
    -0.001745396526530385,
    -0.007997154258191586,
    -0.003211246570572257,
    -0.015244132839143276,
    -0.022349568083882332,
    0.0016330471262335777,
    -0.024232083931565285,
    0.009709819220006466,
    -0.043623413890600204,
    0.014550574123859406,
    -0.004915065132081509,
    0.01971687749028206,
    -0.0015339674428105354,
    0.0035014087334275246,
    -0.027077089995145798,
    0.004734598100185394,
    0.04053778573870659,
    0.02278835140168667,
    -0.023878227919340134,
    0.03685767948627472,
    0.00041556009091436863,
    0.0019692108035087585,
    -0.04433112591505051,
    0.013064377009868622,
    -0.038726042956113815,
    0.005930632818490267,
    0.026539228856563568,
    0.007629143539816141,
    -0.007572526577860117,
    0.0014348876429721713,
    -0.026723233982920647,
    -0.0198159571737051,
    -0.012689289636909962,
    -0.03957529738545418,
    0.029412541538476944,
    0.009702742099761963,
    0.03173384070396423,
    0.0398583821952343,
    0.01763620227575302,
    0.006263257935643196,
    0.017438042908906937,
    0.0038782658521085978,
    -0.00798300001770258,
    -0.012151427567005157,
    0.010912930592894554,
    -0.02963900938630104,
    -0.0062243337742984295,
    -0.04614287242293358,
    0.005010606255382299,
    -0.012222199700772762,
    -0.008846409618854523,
    -0.0182872973382473,
    -0.007990077137947083,
    0.008209467865526676,
    -0.012533592991530895,
    0.01414010114967823,
    0.006181871052831411,
    0.025916440412402153,
    -0.05772105231881142,
    0.07031834125518799,
    0.014274566434323788,
    0.0018630537670105696,
    -0.0048655252903699875,
    0.015215824358165264,
    -0.012745906598865986,
    0.011620643548667431,
    0.01263974979519844,
    0.00014629749057348818,
    0.007593757938593626,
    -0.022689271718263626,
    0.005028299055993557,
    -0.006121715530753136,
    0.013113916851580143,
    0.010021212510764599,
    0.005343231372535229,
    -0.024982260540127754,
    0.02503887750208378,
    -0.02614290826022625,
    0.0014543497236445546,
    -0.008683635853230953,
    -0.00999998115003109,
    -0.002938777208328247,
    -0.032724637538194656,
    -0.022448647767305374,
    -0.03252647817134857,
    0.013637624680995941,
    -0.014918584376573563,
    -0.0009430272621102631,
    0.04271754249930382,
    -0.013241305947303772,
    0.026114599779248238,
    -0.004363049287348986,
    -0.009801821783185005,
    -0.0011907267617061734,
    -0.016376473009586334,
    0.006440185941755772,
    -0.0042604305781424046,
    0.009186111390590668,
    -0.023694222792983055,
    0.01215850468724966,
    0.01617831364274025,
    -0.015258287079632282,
    0.02117476612329483,
    -0.0042321220971643925,
    0.006242026574909687,
    -0.006022635381668806,
    0.025774898007512093,
    -0.00143754156306386,
    -0.001223458442837,
    0.011351712979376316,
    0.00819531362503767,
    -0.008393472991883755,
    0.0063835689797997475,
    -0.020311355590820312,
    -0.014720425009727478,
    -0.04189659655094147,
    -0.00772114610299468,
    -0.0010350298834964633,
    -0.04699212685227394,
    -0.03003532998263836,
    0.011599412187933922,
    0.0032714020926505327,
    -0.009865515865385532,
    -0.023326212540268898,
    -0.17811714112758636,
    0.006082790903747082,
    0.008832255378365517,
    -0.022561881691217422,
    0.027699876576662064,
    0.010417532175779343,
    0.018697770312428474,
    0.011698491871356964,
    -0.018527919426560402,
    -0.00015459100541193038,
    0.014593036845326424,
    -0.006762195378541946,
    -0.005414002574980259,
    -0.010884622111916542,
    -0.0009757589432410896,
    0.028987914323806763,
    -0.04450097680091858,
    0.008152850903570652,
    0.019051628187298775,
    0.017579585313796997,
    0.02281665988266468,
    -0.03145075589418411,
    -0.004578901454806328,
    0.017338963225483894,
    -0.005222920328378677,
    -0.0033881748095154762,
    0.0008629672229290009,
    -0.010311374440789223,
    -0.006252642255276442,
    -0.016305701807141304,
    -0.011415407061576843,
    -0.029723934829235077,
    0.032158467918634415,
    -0.006273873616009951,
    0.013673010282218456,
    0.014225026592612267,
    0.024161312729120255,
    0.001465850044041872,
    -0.008563323877751827,
    0.033404041081666946,
    0.010028289631009102,
    0.0356404148042202,
    0.011401252821087837,
    -0.0027919267304241657,
    -0.013489005155861378,
    -0.018527919426560402,
    -0.0006962124025449157,
    -0.02581736072897911,
    0.01280252356082201,
    0.0035421024076640606,
    0.0482943169772625,
    -0.01226466242223978,
    0.027869727462530136,
    -0.01092708483338356,
    0.012073579244315624,
    0.008931335061788559,
    -0.004589517135173082,
    -0.005905862897634506,
    0.01896670088171959,
    -0.0277848020195961,
    -0.01578199490904808,
    -0.012349587865173817,
    -0.009568276815116405,
    -0.01515920739620924,
    -0.0011128783226013184,
    -0.05109686031937599,
    -0.04769983887672424,
    0.019872574135661125,
    -0.012887449003756046,
    -0.0066171144135296345,
    0.010339682921767235,
    -0.02506718598306179,
    -0.006033251062035561,
    0.008060848340392113,
    0.011111089959740639,
    0.01903747394680977,
    -0.015201670117676258,
    0.012186813168227673,
    0.013673010282218456,
    0.015980154275894165,
    -0.0011341096833348274,
    0.03671613708138466,
    -0.001831206725910306,
    -0.0005223804619163275,
    0.012908680364489555,
    -0.007784840185195208,
    0.0032501707319170237,
    0.006457878742367029,
    -0.016758637502789497,
    0.008811024017632008,
    -0.00293346936814487,
    -0.022406185045838356,
    0.01714080199599266,
    0.008379318751394749,
    0.011316327378153801,
    0.027374329045414925,
    0.003289095126092434,
    0.0025371501687914133,
    0.006974508985877037,
    -0.022618500515818596,
    0.009971672669053078,
    0.022844968363642693,
    -0.03031841479241848,
    0.02278835140168667,
    0.05658871307969093,
    0.03295110538601875,
    -0.03173384070396423,
    0.010134446434676647,
    0.02503887750208378,
    -0.0182872973382473,
    0.019631952047348022,
    0.020651057362556458,
    0.017975904047489166,
    0.018131600692868233,
    -0.015116744674742222,
    0.025520121678709984,
    -0.008152850903570652,
    -0.015682915225625038,
    0.009957518428564072,
    -0.032016925513744354,
    0.054408956319093704,
    -0.009936287067830563,
    -0.03473454341292381,
    -0.010099060833454132,
    -0.01796174980700016,
    -0.0037862632889300585,
    -0.1162913590669632,
    -4.262863512849435e-05,
    0.0030148562509566545,
    0.04874725267291069,
    -0.023326212540268898,
    -0.014847813174128532,
    -0.01831560581922531,
    0.06041036173701286,
    -0.0038888815324753523,
    0.03266802057623863,
    -0.0036801062524318695,
    0.011401252821087837,
    0.007990077137947083,
    0.033092647790908813,
    -0.013248383067548275,
    -0.009440887719392776,
    -0.026978010311722755,
    -0.0008983528823591769,
    -0.028832217678427696,
    0.024939797818660736,
    -0.017862670123577118,
    0.00883933249861002,
    0.007565449457615614,
    -0.02103322371840477,
    -0.011769263073801994,
    0.015343212522566319,
    -0.032554786652326584,
    0.009752281941473484,
    0.018060829490423203,
    -0.005686472170054913,
    0.020452897995710373,
    -0.046907201409339905,
    0.007784840185195208,
    -0.020806755870580673,
    -0.0017719358438625932,
    0.007565449457615614,
    -0.003963191527873278,
    -0.004539977293461561,
    0.02460009604692459,
    -0.016305701807141304,
    0.002882160246372223,
    -0.01030429732054472,
    -0.014097638428211212,
    -0.0023584526497870684,
    -0.017721127718687057,
    0.007395598106086254,
    -0.023524371907114983,
    0.033262498676776886,
    0.01821652613580227,
    -0.020240584388375282,
    -0.00655341986566782,
    -0.016970951110124588,
    -0.0257890522480011,
    -0.0021496776025742292,
    0.03442315012216568,
    -0.012413281947374344,
    0.008273161947727203,
    0.029837168753147125,
    -0.022774197161197662,
    -0.010813850909471512,
    0.009065800346434116,
    0.01992919109761715,
    0.01603677123785019,
    0.0182872973382473,
    0.009702742099761963,
    -0.00023863189562689513,
    -0.005244151689112186,
    0.0021142917685210705,
    -0.01016275491565466,
    -0.019971653819084167,
    -0.013432388193905354,
    0.004688596818596125,
    -0.016702020540833473,
    0.0031086283270269632,
    -0.034762851893901825,
    0.0011712645646184683,
    -0.004826601129025221,
    -0.027020473033189774,
    0.016886025667190552,
    -0.0008828716818243265,
    -0.021698473021388054,
    -0.0006617114413529634,
    -0.022802505642175674,
    -0.021684318780899048,
    -0.0080325398594141,
    0.020580286160111427,
    0.004911526571959257,
    -0.00650741858407855,
    0.001630393206141889,
    -0.028789754956960678,
    0.022307105362415314,
    -0.01617831364274025,
    0.014147178269922733,
    -0.013184688985347748,
    -0.019759340211749077,
    3.859937351080589e-06,
    -0.03167722374200821,
    0.0115498723462224,
    -0.007094820495694876,
    0.03864111751317978,
    -0.03736723214387894,
    -0.020084887742996216,
    -0.0731491893529892,
    0.02567581832408905,
    0.00193028652574867,
    -0.03614996746182442,
    -0.0027866188902407885,
    -0.010063675232231617,
    0.0020983682479709387,
    -0.015102590434253216,
    0.021571084856987,
    0.02232125960290432,
    -0.0532200001180172,
    0.013205920346081257,
    0.009738127700984478,
    0.019221479073166847,
    -0.013736704364418983,
    -0.011104012839496136,
    0.02049536071717739,
    -6.883612513775006e-05,
    0.037338923662900925,
    -0.013319154269993305,
    0.011578180827200413,
    0.007869766093790531,
    0.05341815948486328,
    0.011004933156073093,
    -0.029554083943367004,
    -0.0066383457742631435,
    -0.022632654756307602,
    0.0379900187253952,
    -0.008315624669194221,
    0.005785551853477955,
    0.004840755369514227,
    -0.007806071545928717,
    0.007480524014681578,
    0.011889574117958546,
    0.006259719375520945,
    0.01150033250451088,
    0.00558031490072608,
    0.002616768004372716,
    -0.005753704812377691,
    0.019589489325881004,
    -0.04260430857539177,
    -0.03479116037487984,
    0.02253357321023941,
    0.020721828565001488,
    -0.019688569009304047,
    -0.00620310241356492,
    -0.0036341049708426,
    -0.00032753832056187093,
    0.031365830451250076,
    0.016942642629146576,
    0.039405446499586105,
    -0.0039207288064062595,
    -0.00386057305149734,
    -0.029582392424345016,
    -0.006599421612918377,
    -0.00558031490072608,
    0.017990058287978172,
    -0.009065800346434116,
    0.0035916422493755817,
    -0.01294406596571207,
    0.04905864968895912,
    0.010290143080055714,
    0.02842174470424652,
    0.01953287236392498,
    0.00378980184905231,
    -0.01368008740246296,
    -0.03479116037487984,
    0.00370487617328763,
    0.024840718135237694,
    -0.030658116564154625,
    0.015626298263669014,
    -0.03714076429605484,
    0.0048513710498809814,
    -0.010396299883723259,
    -0.0044727446511387825,
    0.01358808483928442,
    -0.0094975046813488,
    -0.0273177120834589,
    -0.03668782860040665,
    0.016234930604696274,
    0.01599430851638317,
    -0.01489027589559555,
    -0.0035987193696200848,
    -0.0014136562822386622,
    0.03524409607052803,
    -0.002215140964835882,
    -0.031337521970272064,
    0.0037933404091745615,
    0.015357366763055325,
    -0.0031581681687384844,
    -0.010941239073872566,
    -0.0013543852837756276,
    -0.008513784036040306,
    -0.009617816656827927,
    0.002223987365141511,
    0.014692116528749466,
    -0.0026645385660231113,
    0.004405512008816004,
    0.02428870089352131,
    -0.005544929299503565,
    0.007600835058838129,
    0.001201342442072928,
    -0.006995740346610546,
    -0.012420359067618847,
    -0.014472725801169872,
    -0.01071477122604847,
    -0.012123119086027145,
    -0.01889592967927456,
    0.010750156827270985,
    0.01960364356637001,
    0.012852063402533531,
    -0.022972356528043747,
    -0.02225048840045929,
    0.01624908484518528,
    -0.02631276100873947,
    0.028195276856422424,
    -0.007600835058838129,
    -0.01571122370660305,
    -0.03878265991806984,
    0.0029511621687561274,
    0.009228574112057686,
    -0.005254767369478941,
    0.05282368138432503,
    0.0021443695295602083,
    -0.0024557632859796286,
    0.03388528525829315,
    0.02164185605943203,
    -0.016702020540833473,
    0.013269614428281784,
    -0.007303595542907715,
    -0.010806773789227009,
    0.02481240965425968,
    0.004939835052937269,
    -0.007968845777213573,
    -0.01421087235212326,
    -0.03111105225980282,
    -0.014118869788944721,
    -0.03314926475286484,
    -0.0056121619418263435,
    0.08849240094423294,
    -0.0021638318430632353,
    -0.027940498664975166,
    -0.02467086724936962,
    0.0019373636459931731,
    -0.005219381768256426,
    -0.013503159396350384,
    -0.007636220660060644,
    0.007459292188286781,
    -0.0027706953696906567,
    -0.031224286183714867,
    -0.0027706953696906567,
    -0.029299307614564896,
    -0.028690675273537636,
    -0.01142956130206585,
    -0.006656038574874401,
    -0.015357366763055325,
    0.006096945144236088,
    0.010870467871427536,
    0.001050953404046595,
    0.02091998979449272,
    -0.0052795372903347015,
    -0.014932739548385143,
    -0.00550954369828105,
    -0.02874729223549366,
    -0.001894900924526155,
    0.03354558348655701,
    0.013949017971754074,
    -0.013389925472438335,
    -0.0349327027797699,
    0.013531467877328396,
    0.006900199223309755,
    -0.008117465302348137,
    -0.0202830471098423,
    0.005948325619101524,
    0.014260412193834782,
    -0.005870477296411991,
    -0.006627730093896389,
    -0.011295095086097717,
    0.031224286183714867,
    0.00258845929056406,
    0.01807498373091221,
    -0.023878227919340134,
    -0.020367972552776337,
    0.010389222763478756,
    -0.004830139689147472,
    0.0013756166445091367,
    -0.03631981834769249,
    -0.043142169713974
  ]
}
{
  "classifiers": [],
  "description": "dbfread - read dbf files with python\n====================================\n\ndbf is a file format used by databases such dbase, visual foxpro, and\nfoxbase+. this library reads dbf files and returns the data as native\npython data types for further processing. it is primarily intended for\nbatch jobs and one-off scripts.\n\n::\n\n    >>> from dbfread import dbf\n    >>> for record in dbf('people.dbf'):\n    ...     print(record)\n    ordereddict([('name', 'alice'), ('birthdate', datetime.date(1987, 3, 1))])\n    ordereddict([('name', 'bob'), ('birthdate', datetime.date(1980, 11, 12))])\n\nby default records are streamed directly from the file.  if you have\nenough memory you can instead load them into a list. this allows for\nrandom access::\n\n    >>> table = dbf('people.dbf', load=true)\n    >>> print(table.records[1]['name'])\n    bob\n    >>> print(table.records[0]['name'])\n    alice\n\nfull documentation at https://dbfread.readthedocs.io/\n\nsee docs/changes.rst for a full list of changes in each version.\n\n\nmain features\n-------------\n\n* written for python 3, but also works in 2.7\n\n* simple but flexible api\n\n* data is returned as native python data types\n\n* records are ordered dictionaries, but can be reconfigured to be of\n  any type\n\n* aims to handle all variants of dbf files. (currently only widely\n  tested with visual foxpro, but should work well with other\n  variants.)\n\n* support for 18 field types. custom types can be added by subclassing\n  ``fieldparser``\n\n* reads ``fpt`` and ``dbt`` memo files, both text and binary data\n\n* handles mixed case file names gracefully on case sensitive file systems\n\n* can retrieve deleted records\n\n\ninstalling\n----------\n\nrequires python 3.2 or 2.7.\n\n::\n\n  pip install dbfread\n\n``dbfread`` is a pure python module and doesn't depend on any packages\noutside the standard library.\n\nto build documentation locally::\n\n    python setup.py docs\n\nthis requires sphinx. the resulting files can be found in\n``docs/_build/``.\n\n\nsource code\n------------\n\nlatest stable release: http://github.com/olemb/dbfread/\n\ndevelopment version: http://github.com/olemb/dbfread/tree/develop/\n\n\napi changes\n-----------\n\n``dbfread.open()`` and ``dbfread.read()`` are deprecated as of version\n``2.0``, and will be removed in ``2.2``.\n\nthe ``dbf`` class is no longer a subclass of ``list``. this makes the\napi a lot cleaner and easier to understand, but old code that relied\non this behaviour will be broken. iteration and record counting works\nthe same as before. other list operations can be rewritten using the\n``record`` attribute. for example::\n\n    table = dbfread.read('people.dbf')\n    print(table[1])\n\ncan be rewritten as::\n\n    table = dbf('people.dbf', load=true)\n    print(table.records[1])\n\n``open()`` and ``read()`` both return ``deprecateddbf``, which is a\nsubclass of ``dbf`` and ``list`` and thus backward compatible.\n\n\nlicense\n-------\n\ndbfread is released under the terms of the `mit license\n<http://en.wikipedia.org/wiki/mit_license>`_.\n\n\ncontact\n-------\n\nole martin bjorndalen - ombdalen@gmail.com\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "dbfread",
  "package_url": "https://pypi.org/project/dbfread/",
  "project_url": "https://pypi.org/project/dbfread/",
  "project_urls": {
    "Homepage": "https://dbfread.readthedocs.io/"
  },
  "release_url": "https://pypi.org/project/dbfread/2.0.7/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "read dbf files with python",
  "version": "2.0.7",
  "releases": [],
  "developers": [
    "ole_martin_bjorndalen",
    "ombdalen@gmail.com"
  ],
  "kwds": "dbfread dbf databases ordereddict deprecateddbf",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dbfread",
  "homepage": "https://dbfread.readthedocs.io/",
  "release_count": 15,
  "dependency_ids": []
}
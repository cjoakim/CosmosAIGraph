{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "|coverage|_\n|codecov|_\n|nala|_\n\nabout\n=====\n\na python package for `asn.1`_ parsing, encoding and decoding.\n\nthis project is *under development* and does only support a subset\nof the asn.1 specification syntax.\n\nsupported codecs:\n\n- basic encoding rules (ber)\n- distinguished encoding rules (der)\n- generic string encoding rules (gser)\n- json encoding rules (jer)\n- basic octet encoding rules (oer)\n- aligned packed encoding rules (per)\n- unaligned packed encoding rules (uper)\n- xml encoding rules (xer)\n\nmiscellaneous features:\n\n- `c` source code generator for oer and uper (with some limitations).\n\nproject homepage: https://github.com/eerimoq/asn1tools\n\ndocumentation: http://asn1tools.readthedocs.org/en/latest\n\nknown limitations\n=================\n\n- the ``class`` keyword (x.681) and its friends are not yet supported.\n\n- parametrization (x.683) is not yet supported.\n\n- the ``embedded pdv`` type is not yet supported.\n\n- the ``any`` and ``any defined by`` types are not supported. they\n  were removed from the asn.1 standard 1994.\n\n- ``with component`` and ``with components`` constraints are ignored,\n  except for oer ``real``.\n\n- the ``duration`` type is not yet supported.\n\ninstallation\n============\n\n.. code-block:: python\n\n    pip install asn1tools\n\nexample usage\n=============\n\nthis is an example asn.1 specification defining the messages of a\nfictitious foo protocol (based on the fooprotocol on wikipedia).\n\n.. code-block:: text\n\n   foo definitions ::= begin\n\n       question ::= sequence {\n           id        integer,\n           question  ia5string\n       }\n\n       answer ::= sequence {\n           id        integer,\n           answer    boolean\n       }\n\n   end\n\nscripting\n---------\n\n`compile`_ the asn.1 specification, and `encode`_ and `decode`_ a\nquestion using the default codec (ber).\n\n.. code-block:: python\n\n   >>> import asn1tools\n   >>> foo = asn1tools.compile_files('tests/files/foo.asn')\n   >>> encoded = foo.encode('question', {'id': 1, 'question': 'is 1+1=3?'})\n   >>> encoded\n   bytearray(b'0\\x0e\\x02\\x01\\x01\\x16\\x09is 1+1=3?')\n   >>> foo.decode('question', encoded)\n   {'id': 1, 'question': 'is 1+1=3?'}\n\nthe same asn.1 specification, but using the per codec.\n\n.. code-block:: python\n\n   >>> import asn1tools\n   >>> foo = asn1tools.compile_files('tests/files/foo.asn', 'per')\n   >>> encoded = foo.encode('question', {'id': 1, 'question': 'is 1+1=3?'})\n   >>> encoded\n   bytearray(b'\\x01\\x01\\tis 1+1=3?')\n   >>> foo.decode('question', encoded)\n   {'id': 1, 'question': 'is 1+1=3?'}\n\nsee the `examples`_ folder for additional examples.\n\ncommand line tool\n-----------------\n\nthe shell subcommand\n^^^^^^^^^^^^^^^^^^^^\n\nuse the command line shell to convert data between given formats. the\ndefault input codec is ber and output codec is gser (produces human\nreadable text).\n\n.. code-block:: text\n\n   > asn1tools shell\n\n   welcome to the asn1tools shell!\n\n   $ help\n   commands:\n     compile\n     convert\n     exit\n     help\n   $ compile tests/files/foo.asn\n   $ convert question 300e0201011609497320312b313d333f\n   question question ::= {\n       id 1,\n       question \"is 1+1=3?\"\n   }\n   $ compile --output-codec xer tests/files/foo.asn\n   $ convert question 300e0201011609497320312b313d333f\n   <question>\n       <id>1</id>\n       <question>is 1+1=3?</question>\n   </question>\n   $ compile -o uper tests/files/foo.asn\n   $ convert question 300e0201011609497320312b313d333f\n   01010993cd03156c5eb37e\n   $ exit\n   >\n\nthe convert subcommand\n^^^^^^^^^^^^^^^^^^^^^^\n\nconvert given encoded question from ber to gser (produces human\nreadable text).\n\n.. code-block:: text\n\n   > asn1tools convert tests/files/foo.asn question 300e0201011609497320312b313d333f\n   question question ::= {\n       id 1,\n       question \"is 1+1=3?\"\n   }\n   >\n\nconvert given encoded question from uper to xer (xml).\n\n.. code-block:: text\n\n   > asn1tools convert -i uper -o xer tests/files/foo.asn question 01010993cd03156c5eb37e\n   <question>\n       <id>1</id>\n       <question>is 1+1=3?</question>\n   </question>\n   >\n\nconvert given encoded question from uper to jer (json).\n\n.. code-block:: text\n\n   > asn1tools convert -i uper -o jer tests/files/foo.asn question 01010993cd03156c5eb37e\n   {\n       \"id\": 1,\n       \"question\": \"is 1+1=3?\"\n   }\n   >\n\ncontinuously convert encoded questions read from standard input. any\nline that cannot be converted is printed as is, in this example the\ndates.\n\n.. code-block:: text\n\n   > cat encoded.txt\n   2018-02-24 11:22:09\n   300e0201011609497320312b313d333f\n   2018-02-24 11:24:15\n   300e0201021609497320322b323d353f\n   > cat encoded.txt | asn1tools convert tests/files/foo.asn question -\n   2018-02-24 11:22:09\n   question question ::= {\n       id 1,\n       question \"is 1+1=3?\"\n   }\n   2018-02-24 11:24:15\n   question question ::= {\n       id 2,\n       question \"is 2+2=5?\"\n   }\n   >\n\nthe convert subcommand with a cache\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconvert given encoded pcch-message from uper to gser with the\n``--cache-dir`` option set to ``my_cache``. using a cache\nsignificantly reduces the command execution time after the first call.\n\n.. code-block:: text\n\n   > time asn1tools convert --cache-dir my_cache -i uper tests/files/3gpp/rrc_8_6_0.asn pcch-message 28\n   pcch-message pcch-message ::= {\n       message c1 : paging : {\n           systeminfomodification true,\n           noncriticalextension {\n           }\n       }\n   }\n\n   real    0m2.090s\n   user    0m1.977s\n   sys     0m0.032s\n   > time asn1tools convert --cache-dir my_cache -i uper tests/files/3gpp/rrc_8_6_0.asn pcch-message 28\n   pcch-message pcch-message ::= {\n       message c1 : paging : {\n           systeminfomodification true,\n           noncriticalextension {\n           }\n       }\n   }\n\n   real    0m0.276s\n   user    0m0.197s\n   sys     0m0.026s\n   >\n\nthe parse subcommand\n^^^^^^^^^^^^^^^^^^^^\n\nparse given asn.1 specification and write it as a python dictionary to\ngiven file. use the created file to convert given encoded question\nfrom ber to gser (produces human readable text). the conversion is\nsignificantly faster than passing .asn-file(s) to the convert\nsubcommand, especially for larger asn.1 specifications.\n\n.. code-block:: text\n\n   > asn1tools parse tests/files/foo.asn foo.py\n   > asn1tools convert foo.py question 300e0201011609497320312b313d333f\n   question question ::= {\n       id 1,\n       question \"is 1+1=3?\"\n   }\n   >\n\nthe generate c source subcommand\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ngenerate oer or uper c source code from an asn.1 specification.\n\nno dynamic memory is used in the generated code. to achieve this all\ntypes in the asn.1 specification must have a known maximum size,\ni.e. ``integer (0..7)``, ``octet string (size(12))``, etc.\n\nbelow is an example generating oer c source code from\n`tests/files/c_source/c_source.asn`_.\n\n.. code-block:: text\n\n   > asn1tools generate_c_source --namespace oer tests/files/c_source/c_source.asn\n   successfully generated oer.h and oer.c.\n\nthe same as above, but generate uper c source code instead of oer.\n\n.. code-block:: text\n\n   > asn1tools generate_c_source --codec uper --namespace uper tests/files/c_source/c_source.asn\n   successfully generated uper.h and uper.c.\n\nthe same as the first example, but also generate fuzz testing c source\ncode for `libfuzzer`_.\n\n.. code-block:: text\n\n   > asn1tools generate_c_source --namespace oer --generate-fuzzer tests/files/c_source/c_source.asn\n   successfully generated oer.h and oer.c.\n   successfully generated oer_fuzzer.c and oer_fuzzer.mk.\n\n   run \"make -f oer_fuzzer.mk\" to build and run the fuzzer. requires a\n   recent version of clang.\n\nsee `oer.h`_, `oer.c`_, `uper.h`_, `uper.c`_, `oer_fuzzer.c`_ and\n`oer_fuzzer.mk`_ for the contents of the generated files.\n\nlimitations by design:\n\n- only the types ``boolean``, ``integer``, ``null``, ``octet string``,\n  ``bit string``, ``enumerated``, ``sequence``, ``sequence of``, and ``choice``\n  are supported. the oer generator also supports ``real``.\n\n- all types must have a known maximum size, i.e. ``integer (0..7)``,\n  ``octet string (size(12))``.\n\n- ``integer`` must be 64 bits or less.\n\n- ``real`` must be ieee 754 binary32 or binary64. binary32 is\n  generated as ``float`` and binary64 as ``double``.\n\n- recursive types are not supported.\n\nknown limitations:\n\n- extension additions (``...``) are only supported in the oer generator.\n  see `compact_extensions_uper`_ for how to make uper ``choice`` and\n  ``sequence`` extendable without using ``...``.\n\n- named numbers in ``enumerated`` are not yet supported.\n\nother oer and/or uper c code generators:\n\n- https://github.com/vlm/asn1c\n\n- https://github.com/ttsiodras/asn1scc\n\nsee the `benchmark example`_ for a comparison of `asn1c`, `asn1scc`\nand `asn1tools`.\n\ncontributing\n============\n\n#. fork the repository.\n\n#. install prerequisites.\n\n   .. code-block:: text\n\n      pip install -r requirements.txt\n\n#. implement the new feature or bug fix.\n\n#. implement test case(s) to ensure that future changes do not break\n   legacy.\n\n#. run the tests.\n\n   .. code-block:: text\n\n      make test\n\n#. create a pull request.\n\nspecifications\n==============\n\nasn.1 specifications released by itu and ietf.\n\ngeneral\n-------\n\n- `x.680: specification of basic notation\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.680-0207.pdf>`_\n\n- `x.681: information object specification\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.681-0207.pdf>`_\n\n- `x.682: constraint specification\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.682-0207.pdf>`_\n\n- `x.683: parameterization of asn.1 specifications\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.683-0207.pdf>`_\n\nencodings\n---------\n\n- `x.690: specification of basic encoding rules (ber), canonical\n  encoding rules (cer) and distinguished encoding rules (der)\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.690-0207.pdf>`_\n\n- `x.691: specification of packed encoding rules (per)\n  <https://www.itu.int/rec/dologin_pub.asp?lang=e&id=t-rec-x.691-201508-i!!pdf-e&type=items>`_\n\n- `x.693: xml encoding rules (xer)\n  <https://www.itu.int/itu-t/studygroups/com17/languages/x.693-0112.pdf>`_\n\n- `x.696: specification of octet encoding rules (oer)\n  <https://www.itu.int/rec/dologin_pub.asp?lang=e&id=t-rec-x.696-201508-i!!pdf-e&type=items>`_\n\n- `rfc 3641: generic string encoding rules (gser) for asn.1\n  <https://tools.ietf.org/html/rfc3641>`_\n\n- `overview of the json encoding rules (jer)\n  <http://www.oss.com/asn1/resources/asn1-papers/overview_of_jer.pdf>`_\n\n.. |coverage| image:: https://coveralls.io/repos/github/eerimoq/asn1tools/badge.svg?branch=master\n.. _coverage: https://coveralls.io/github/eerimoq/asn1tools\n\n.. |codecov| image:: https://codecov.io/gh/eerimoq/asn1tools/branch/master/graph/badge.svg\n.. _codecov: https://codecov.io/gh/eerimoq/asn1tools\n\n.. |nala| image:: https://img.shields.io/badge/nala-test-blue.svg\n.. _nala: https://github.com/eerimoq/nala\n\n.. _asn.1: https://en.wikipedia.org/wiki/abstract_syntax_notation_one\n\n.. _compile: http://asn1tools.readthedocs.io/en/latest/#asn1tools.compile_files\n.. _encode: http://asn1tools.readthedocs.io/en/latest/#asn1tools.compiler.specification.encode\n.. _decode: http://asn1tools.readthedocs.io/en/latest/#asn1tools.compiler.specification.decode\n.. _examples: https://github.com/eerimoq/asn1tools/tree/master/examples\n\n.. _tests/files/c_source/c_source.asn: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/c_source.asn\n\n.. _oer.h: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/oer.h\n\n.. _oer.c: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/oer.c\n\n.. _uper.h: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/uper.h\n\n.. _uper.c: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/uper.c\n\n.. _oer_fuzzer.c: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/oer_fuzzer.c\n\n.. _oer_fuzzer.mk: https://github.com/eerimoq/asn1tools/blob/master/tests/files/c_source/oer_fuzzer.mk\n\n.. _libfuzzer: https://llvm.org/docs/libfuzzer.html\n\n.. _benchmark example: https://github.com/eerimoq/asn1tools/blob/master/examples/benchmarks/c_source\n\n.. _compact_extensions_uper: https://github.com/eerimoq/asn1tools/blob/master/examples/compact_extensions_uper\n",
  "docs_url": null,
  "keywords": "asn.1,asn1",
  "license": "mit",
  "name": "asn1tools",
  "package_url": "https://pypi.org/project/asn1tools/",
  "project_url": "https://pypi.org/project/asn1tools/",
  "project_urls": {
    "Homepage": "https://github.com/eerimoq/asn1tools"
  },
  "release_url": "https://pypi.org/project/asn1tools/0.166.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "asn.1 parsing, encoding and decoding.",
  "version": "0.166.0",
  "releases": [],
  "developers": [
    "erik.moqvist@gmail.com",
    "erik_moqvist"
  ],
  "kwds": "asn1tools asn1 encodings asn asn1c",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_asn1tools",
  "homepage": "https://github.com/eerimoq/asn1tools",
  "release_count": 188,
  "dependency_ids": []
}
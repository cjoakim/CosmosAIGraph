{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: rust",
    "topic :: internet :: www/http",
    "topic :: software development",
    "topic :: software development :: libraries",
    "typing :: typed"
  ],
  "description": "<!-- markdownlint-disable -->\n<p align=\"center\">\n  <img src=\"https://github.com/litestar-org/branding/blob/473f54621e55cde9acbb6fcab7fc03036173eb3d/assets/branding%20-%20svg%20-%20transparent/logo%20-%20banner%20-%20inline%20-%20light.svg#gh-light-mode-only\" alt=\"litestar logo - light\" width=\"100%\" height=\"auto\" />\n  <img src=\"https://github.com/litestar-org/branding/blob/473f54621e55cde9acbb6fcab7fc03036173eb3d/assets/branding%20-%20svg%20-%20transparent/logo%20-%20banner%20-%20inline%20-%20dark.svg#gh-dark-mode-only\" alt=\"litestar logo - dark\" width=\"100%\" height=\"auto\" />\n</p>\n<!-- markdownlint-restore -->\n\n<div align=\"center\">\n\n<!-- prettier-ignore-start -->\n\n| project   |     | status|\n|-----------|:----||\n| ci/cd     |     | [![publish](https://github.com/litestar-org/fast-query-parsers/actions/workflows/publish.yaml/badge.svg)](https://github.com/litestar-org/fast-query-parsers/actions/workflows/publish.yaml) [![ci](https://github.com/litestar-org/fast-query-parsers/actions/workflows/ci.yaml/badge.svg)](https://github.com/litestar-org/fast-query-parsers/actions/workflows/ci.yaml|\n| package   |     | [![pypi - version](https://img.shields.io/pypi/v/fast-query-parsers?labelcolor=202235&color=edb641&logo=python&logocolor=edb641)](https://badge.fury.io/py/litestar) ![pypi - support python versions](https://img.shields.io/pypi/pyversions/fast-query-parsers?labelcolor=202235&color=edb641&logo=python&logocolor=edb641) ![pypi - downloads](https://img.shields.io/pypi/dm/fast-query-parsers?logo=python&label=fast-query-parsers%20downloads&labelcolor=202235&color=edb641&logocolor=edb641)                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| community |     | [![reddit](https://img.shields.io/reddit/subreddit-subscribers/litestarapi?label=r%2flitestar&logo=reddit&labelcolor=202235&color=edb641&logocolor=edb641)](https://reddit.com/r/litestarapi) [![discord](https://img.shields.io/discord/919193495116337154?labelcolor=202235&color=edb641&label=chat%20on%20discord&logo=discord&logocolor=edb641)](https://discord.gg/x3fjqy8d2j) [![matrix](https://img.shields.io/badge/chat%20on%20matrix-bridged-202235?labelcolor=202235&color=edb641&logo=matrix&logocolor=edb641)](https://matrix.to/#/#litestar:matrix.org) [![medium](https://img.shields.io/badge/medium-202235?labelcolor=202235&color=edb641&logo=medium&logocolor=edb641)](https://blog.litestar.dev) [![twitter](https://img.shields.io/twitter/follow/litestarapi?labelcolor=202235&color=edb641&logo=twitter&logocolor=edb641&style=flat)](https://twitter.com/litestarapi) [![blog](https://img.shields.io/badge/blog-litestar.dev-202235?logo=blogger&labelcolor=202235&color=edb641&logocolor=edb641)](https://blog.litestar.dev) |\n| meta      |     | [![litestar project](https://img.shields.io/badge/litestar%20org-%e2%ad%90%20fast%20query%20parsers-202235.svg?logo=python&labelcolor=202235&color=edb641&logocolor=edb641)](https://github.com/litestar-org/fast-query-parsers) [![license - mit](https://img.shields.io/badge/license-mit-202235.svg?logo=python&labelcolor=202235&color=edb641&logocolor=edb641)](https://spdx.org/licenses/) [![litestar sponsors](https://img.shields.io/badge/sponsor-%e2%9d%a4-%23edb641.svg?&logo=github&logocolor=edb641&labelcolor=202235)](https://github.com/sponsors/litestar-org) [![linting - ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json&labelcolor=202235)](https://github.com/astral-sh/ruff) [![code style - black](https://img.shields.io/badge/code%20style-black-000000.svg?logo=python&labelcolor=202235&logocolor=edb641)](https://github.com/psf/black)                                                                                                         |\n\n<!-- prettier-ignore-end -->\n</div>\n\n# fast query parsers\n\nthis library includes ultra-fast rust based query string and urlencoded parsers. these parsers are used\nby [`litestar`](https://github.com/litestar-org/litestar), but are developed separately - and can of course be used separately.\n\n> [!important]\\\n> [**_starlite has been renamed to litestar_**](https://litestar.dev/about/organization.html#litestar-and-starlite)\n\n</div>\n\n## installation\n\n```shell\npip install fast-query-parsers\n```\n\n## usage\n\nthe library exposes two function `parse_query_string` and `parse_url_encoded_dict`.\n\n### `parse_query_string`\n\nthis function is used to parse a query string into a list of key/value tuples.\n\n```python\nfrom fast_query_parsers import parse_query_string\n\nresult = parse_query_string(b\"value=1&value=2&type=dollar&country=us\", \"&\")\n# [(\"value\", \"1\"), (\"value\", \"2\"), (\"type\", \"dollar\"), (\"country\", \"us\")]\n```\n\nthe first argument to this function is a byte string that includes the query string to be parsed, the second argument is\nthe separator used.\n\n#### benchmarks\n\nquery string parsing is more than x5 times faster than the standard library:\n\n```text\nstdlib parse_qsl parsing query string: mean +- std dev: 2.86 us +- 0.03 us\n.....................\nparse_query_string parsing query string: mean +- std dev: 916 ns +- 13 ns\n.....................\nstdlib parse_qsl parsing urlencoded query string: mean +- std dev: 8.30 us +- 0.10 us\n.....................\nparse_query_string urlencoded query string: mean +- std dev: 1.50 us +- 0.03 us\n```\n\n### `parse_url_encoded_dict`\n\nthis function is used to parse a url-encoded form data dictionary and parse it into the python equivalent of json types.\n\n```python\nfrom urllib.parse import urlencode\n\nfrom fast_query_parsers import parse_url_encoded_dict\n\nencoded = urlencode(\n    [\n        (\"value\", \"10\"),\n        (\"value\", \"12\"),\n        (\"veggies\", '[\"tomato\", \"potato\", \"aubergine\"]'),\n        (\"nested\", '{\"some_key\": \"some_value\"}'),\n        (\"calories\", \"122.53\"),\n        (\"healthy\", \"true\"),\n        (\"polluting\", \"false\"),\n        (\"json\", \"null\"),\n    ]\n).encode()\n\nresult = parse_url_encoded_dict(encoded, parse_numbers=true)\n\n# result == {\n#     \"value\": [10, 12],\n#     \"veggies\": [\"tomato\", \"potato\", \"aubergine\"],\n#     \"nested\": {\"some_key\": \"some_value\"},\n#     \"calories\": 122.53,\n#     \"healthy\": true,\n#     \"polluting\": false,\n#     \"json\": none,\n# }\n```\n\nthis function handles type conversions correctly - unlike the standard library function `parse_qs`. additionally, it\ndoes not nest all values inside lists.\n\nnote: the second argument passed to `parse_url_encoded_dict` dictates whether numbers should be parsed. if `true`,\nthe value will be parsed into an int or float as appropriate, otherwise it will be kept as a string.\nby default the value of this arg is `true`.\n\n#### benchmarks\n\nurl encoded parsing is more than x2 times faster than the standard library, without accounting for parsing of values:\n\n```text\nstdlib parse_qs parsing url-encoded values into dict: mean +- std dev: 8.99 us +- 0.09 us\n.....................\nparse_url_encoded_dict parse url-encoded values into dict: mean +- std dev: 3.77 us +- 0.08 us\n```\n\nto actually mimic the parsing done by `parse_url_encoded_dict` we will need a utility along these lines:\n\n```python\nfrom collections import defaultdict\nfrom contextlib import suppress\nfrom json import loads, jsondecodeerror\nfrom typing import any, defaultdict, dict, list\nfrom urllib.parse import parse_qsl\n\n\ndef parse_url_encoded_form_data(encoded_data: bytes) -> dict[str, any]:\n    \"\"\"parse an url encoded form data into dict of parsed values\"\"\"\n    decoded_dict: defaultdict[str, list[any]] = defaultdict(list)\n    for k, v in parse_qsl(encoded_data.decode(), keep_blank_values=true):\n        with suppress(jsondecodeerror):\n            v = loads(v) if isinstance(v, str) else v\n        decoded_dict[k].append(v)\n    return {k: v if len(v) > 1 else v[0] for k, v in decoded_dict.items()}\n```\n\nwith the above, the benchmarks looks like so:\n\n```text\npython parse_url_encoded_form_data parsing url-encoded values into dict: mean +- std dev: 19.7 us +- 0.1 us\n.....................\nparse_url_encoded_dict parsing url-encoded values into dict: mean +- std dev: 3.69 us +- 0.03 us\n```\n\n## contributing\n\nall contributions are of course welcome!\n\n### repository setup\n\n1. run `cargo install` to setup the rust dependencies and `poetry install` to setup the python dependencies.\n2. install the pre-commit hooks with `pre-commit install` (requires [pre-commit](https://pre-commit.com/)).\n\n### building\n\nrun `poetry run maturin develop --release --strip` to install a release wheel (without debugging info). this wheel can be\nused in tests and benchmarks.\n\n### benchmarking\n\nthere are basic benchmarks using pyperf in place. to run these execute `poetry run python benchrmarks.py`.\n\n",
  "docs_url": null,
  "keywords": "query,query string,qs,query parameters,rust,asgi,starlite,litestar,parser",
  "license": "",
  "name": "fast-query-parsers",
  "package_url": "https://pypi.org/project/fast-query-parsers/",
  "project_url": "https://pypi.org/project/fast-query-parsers/",
  "project_urls": {
    "Source Code": "https://github.com/starlite-api/fast-query-parsers"
  },
  "release_url": "https://pypi.org/project/fast-query-parsers/1.0.3/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "ultra-fast query string and url-encoded form-data parsers",
  "version": "1.0.3",
  "releases": [],
  "developers": [
    "nhirschfeld@gmail.com"
  ],
  "kwds": "litestar_ litestar starlite _starlite 20light",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fast_query_parsers",
  "homepage": "",
  "release_count": 9,
  "dependency_ids": []
}
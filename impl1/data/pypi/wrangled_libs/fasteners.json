{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": "fasteners\n=========\n\n[![documentation status](https://readthedocs.org/projects/fasteners/badge/?version=latest)](https://readthedocs.org/projects/fasteners/?badge=latest)\n[![downloads](https://img.shields.io/pypi/dm/fasteners.svg)](https://pypi.python.org/pypi/fasteners/)\n[![latest version](https://img.shields.io/pypi/v/fasteners.svg)](https://pypi.python.org/pypi/fasteners/)\n\ncross-platform locks for threads and processes.\n\n\ud83d\udd29 install\n----------\n\n```\npip install fasteners\n```\n\n\ud83d\udd29 usage\n--------\nlock for processes has the same api as the \n[threading.lock](https://docs.python.org/3/library/threading.html#threading.lock)\nfor threads:\n```python\nimport fasteners\nimport threading\n\nlock = threading.lock()                                 # for threads\nlock = fasteners.interprocesslock('path/to/lock.file')  # for processes\n\nwith lock:\n    ... # exclusive access\n\n# or alternatively    \n\nlock.acquire()\n... # exclusive access\nlock.release()\n```\n\nreader writer lock has a similar api, which is the same for threads or processes:\n\n```python\nimport fasteners\n\nrw_lock = fasteners.readerwriterlock()                                 # for threads\nrw_lock = fasteners.interprocessreaderwriterlock('path/to/lock.file')  # for processes\n\nwith rw_lock.write_lock():\n    ... # write access\n\nwith rw_lock.read_lock():\n    ... # read access\n\n# or alternatively\n\nrw_lock.acquire_read_lock()\n... # read access\nrw_lock.release_read_lock()\n\nrw_lock.acquire_write_lock()\n... # write access\nrw_lock.release_write_lock()\n```\n\n\ud83d\udd29 overview\n-----------\n\npython standard library provides a lock for threads (both a reentrant one, and a\nnon-reentrant one, see below). fasteners extends this, and provides a lock for\nprocesses, as well as reader writer locks for both threads and processes.\ndefinitions of terms used in this overview can be found in the\n[glossary](https://fasteners.readthedocs.io/en/latest/guide/glossary/).\n\nthe specifics of the locks are as follows:\n\n### process locks\n\nthe `fasteners.interprocesslock` uses [fcntl](https://man7.org/linux/man-pages/man2/fcntl.2.html) on unix-like systems and \nmsvc [_locking](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/locking?view=msvc-160) on windows. \nas a result, if used cross-platform it guarantees an intersection of their features:\n\n| lock | reentrant | mandatory |\n|------|-----------|-----------|\n| fcntl                        | \u2718 | \u2718 |\n| _locking                     | \u2714 | \u2714 |\n| fasteners.interprocesslock   | \u2718 | \u2718 |\n\n\nthe `fasteners.interprocessreaderwriterlock` also uses fcntl on unix-like systems and \n[lockfileex](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-lockfileex) on windows. their \nfeatures are as follows:\n\n| lock | reentrant | mandatory | upgradable | preference | \n|------|-----------|-----------|------------|------------|\n| fcntl                                    | \u2718 | \u2718 | \u2714 | reader |\n| lockfileex                               | \u2714 | \u2714 | \u2718 | reader |\n| fasteners.interprocessreaderwriterlock   | \u2718 | \u2718 | \u2718 | reader |\n\n\n### thread locks\n\nfasteners does not provide a simple thread lock, but for the sake of comparison note that the `threading` module\nprovides both a reentrant and non-reentrant locks:\n\n| lock | reentrant | mandatory |\n|------|-----------|-----------|\n| threading.lock  | \u2718 | \u2718 |\n| threading.rlock | \u2714 | \u2718 |\n\n\nthe `fasteners.readerwriterlock` at the moment is as follows:\n\n| lock | reentrant | mandatory | upgradable | preference | \n|------|-----------|-----------|-------------|------------|\n| fasteners.readerwriterlock | \u2714 | \u2718 | \u2718 | writer |\n\nif your threads are created by some other means than the standard library `threading`\nmodule (for example `eventlet`), you may need to provide the corresponding thread\nidentification and synchronisation functions to the `readerwriterlock`.\n",
  "docs_url": "https://pythonhosted.org/fasteners/",
  "keywords": "lock thread process fasteners",
  "license": "apache-2.0",
  "name": "fasteners",
  "package_url": "https://pypi.org/project/fasteners/",
  "project_url": "https://pypi.org/project/fasteners/",
  "project_urls": {
    "Homepage": "https://github.com/harlowja/fasteners"
  },
  "release_url": "https://pypi.org/project/fasteners/0.19/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a python package that provides useful locks",
  "version": "0.19",
  "releases": [],
  "developers": [
    "joshua_harlow"
  ],
  "kwds": "_locking fasteners release_read_lock read_lock release_write_lock",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_fasteners",
  "homepage": "https://github.com/harlowja/fasteners",
  "release_count": 23,
  "dependency_ids": []
}
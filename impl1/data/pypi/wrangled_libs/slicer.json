{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "# slicer [alpha]\n![license](https://img.shields.io/github/license/interpretml/slicer.svg?style=flat-square)\n![python version](https://img.shields.io/pypi/pyversions/slicer.svg?style=flat-square)\n![package version](https://img.shields.io/pypi/v/slicer.svg?style=flat-square)\n![build status](https://img.shields.io/azure-devops/build/ms/interpret/405/master?style=flat-square)\n![coverage](https://img.shields.io/azure-devops/coverage/ms/interpret/405/master.svg?style=flat-square)\n![maintenance](https://img.shields.io/maintenance/yes/2020.svg?style=flat-square)\n\n*(equal contribution) samuel jenkins & harsha nori & scott lundberg*\n\n**slicer** wraps tensor-like objects and provides a uniform slicing interface via `__getitem__`.\n\n<br/>\nit supports many data types including:\n\n&nbsp;&nbsp;\n[numpy](https://github.com/numpy/numpy) |\n[pandas](https://github.com/pandas-dev/pandas) |\n[scipy](https://docs.scipy.org/doc/scipy/reference/sparse.html) |\n[pytorch](https://github.com/pytorch/pytorch) |\n[list](https://github.com/python/cpython) |\n[tuple](https://github.com/python/cpython) |\n[dict](https://github.com/python/cpython)\n\nand enables upgraded slicing functionality on its objects:\n```python\n# handles non-integer indexes for slicing.\ns(df)[:, [\"age\", \"income\"]]\n\n# handles nested slicing in one call.\ns(nested_list)[..., :5]\n```\n\nit can also simultaneously slice many objects at once:\n```python\n# gets first elements of both objects.\ns(first=df, second=ar)[0, :]\n```\n\nthis package has **0** dependencies. not even one.\n\n## installation\n\npython 3.6+ | linux, mac, windows\n```sh\npip install slicer\n```\n\n## getting started\n\nbasic anonymous slicing:\n```python\nfrom slicer import slicer as s\nli = [[1, 2, 3], [4, 5, 6]]\ns(li)[:, 0:2].o\n# [[1, 2], [4, 5]]\ndi = {'x': [1, 2, 3], 'y': [4, 5, 6]}\ns(di)[:, 0:2].o\n# {'x': [1, 2], 'y': [4, 5]}\n```\n\nbasic named slicing:\n```python\nimport pandas as pd\nimport numpy as np\ndf = pd.dataframe({'a': [1, 3], 'b': [2, 4]})\nar = np.array([[5, 6], [7, 8]])\nsliced = s(first=df, second=ar)[0, :]\nsliced.first\n# a    1\n# b    2\n# name: 0, dtype: int64\nsliced.second\n# array([5, 6])\n```\n\nreal example:\n```python\nfrom slicer import slicer as s\nfrom slicer import alias as a\n\ndata = [[1, 2], [3, 4]]\nvalues = [[5, 6], [7, 8]]\nidentifiers = [\"id1\", \"id1\"]\ninstance_names = [\"r1\", \"r2\"]\nfeature_names = [\"f1\", \"f2\"]\nfull_name = \"a\"\n\nslicer = s(\n    data=data,\n    values=values,\n    # aliases are objects that also function as slicing keys.\n    # a(obj, dim) where dim informs what dimension it can be sliced on.\n    identifiers=a(identifiers, 0),\n    instance_names=a(instance_names, 0),\n    feature_names=a(feature_names, 1),\n    full_name=full_name,\n)\n\nsliced = slicer[:, 1]  # tensor-like parallel slicing on all objects\nassert sliced.data == [2, 4]\nassert sliced.instance_names == [\"r1\", \"r2\"]\nassert sliced.feature_names == \"f2\"\nassert sliced.values == [6, 8]\n\nsliced = slicer[\"r1\", \"f2\"]  # example use of aliasing\nassert sliced.data == 2\nassert sliced.feature_names == \"f2\"\nassert sliced.instance_names == \"r1\"\nassert sliced.values == 6\n```\n\n## contact us\nraise an issue on github, or contact us at interpret@microsoft.com\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "slicer",
  "package_url": "https://pypi.org/project/slicer/",
  "project_url": "https://pypi.org/project/slicer/",
  "project_urls": {
    "Homepage": "https://github.com/interpretml/slicer"
  },
  "release_url": "https://pypi.org/project/slicer/0.0.7/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a small package for big slicing.",
  "version": "0.0.7",
  "releases": [],
  "developers": [
    "interpret@microsoft.com",
    "interpretml"
  ],
  "kwds": "slicing slicer shields slice sliced",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_slicer",
  "homepage": "https://github.com/interpretml/slicer",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.9"
  ],
  "description": "# ontology access kit (oak)\n\npython lib for common ontology operations over a variety of backends.\n\n<img src=\"docs/logos/oak-logo_black-icon.png\" width=\"20%\">\n\n[![pypi version](https://badge.fury.io/py/oaklib.svg)](https://badge.fury.io/py/oaklib)\n![](https://github.com/incatools/ontology-access-kit/workflows/build/badge.svg)\n[![badge](https://img.shields.io/badge/launch-binder-579aca.svg)](https://mybinder.org/v2/gh/incatools/ontology-access-kit/main?filepath=notebooks)\n[![downloads](https://pepy.tech/badge/oaklib/week)](https://pepy.tech/project/oaklib)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.6456239.svg)](https://doi.org/10.5281/zenodo.6456239)\n[![contributor covenant](https://img.shields.io/badge/contributor%20covenant-2.1-4baaaa.svg)](.github/code_of_conduct.md) \n\noak provides a collection of [interfaces](https://incatools.github.io/ontology-access-kit/packages/interfaces/index.html#interfaces) for various ontology operations, including:\n\n - [look up basic features](https://incatools.github.io/ontology-access-kit/guide/basics.html) of an ontology element, such as its label, definition, relationships, or aliases\n - search an ontology for a term\n - validate an ontology\n - modify or delete terms\n - generate and visualize subgraphs\n - identify lexical matches and export as sssom mapping tables\n - perform more advanced operations, such as graph traversal, owl axiom processing, or text annotation\n\nthese interfaces are *separated* from any particular backend, for which there a number of different [adapters](https://incatools.github.io/ontology-access-kit/implementations/index.html).\nthis means the same python api and command line can be used regardless of whether the ontology:\n\n - is served by a remote api such as ols or bioportal\n - is present locally on the filesystem in owl, obo, obojson, or sqlite formats\n - is to be downloaded from a remote repository such as the obo library\n - is queried from a remote database, including sparql endpoints (ontobee/ubergraph), a sql database, a solr/es endpoint\n\n## documentation:\n\n- [incatools.github.io/ontology-access-kit](https://incatools.github.io/ontology-access-kit)\n- presentations:\n   - [using the oak command line](https://doi.org/10.5281/zenodo.7708962) *obo academy 2023*\n   - [introduction to oak](https://doi.org/10.5281/zenodo.7765088) *oak workshop 2022*\n\n## contributing\n\nsee the contribution guidelines at [contributing.md](.github/contributing.md).\nall contributors are expected to uphold our [code of conduct](.github/code_of_conduct.md).\n\n## usage\n\n```python\nfrom oaklib import get_adapter\n\n# connect to the cl sqlite database adapter\n# (will first download if not already downloaded)\nadapter = get_adapter(\"sqlite:obo:cl\")\n\nneuron = \"cl:0000540\"\n\nprint('## basic info')\nprint(f'id: {neuron}')\nprint(f'label: {adapter.label(neuron)}')\n\nfor alias in adapter.entity_aliases(neuron):\n    print(f'alias: {alias}')\n\nprint('## relationships (direct)')\nfor relationship in adapter.relationships([neuron]):\n    print(f' * {relationship.predicate} -> {relationship.object} \"{adapter.label(relationship.object)}\"')\n    \nprint('## ancestors (over is_a and part_of)')\nfrom oaklib.datamodels.vocabulary import is_a, part_of\nfrom oaklib.interfaces import obographinterface\n\nif not isinstance(adapter, obographinterface):\n    raise valueerror('this adapter does not support graph operations')\n\nfor ancestor in adapter.ancestors(neuron, predicates=[is_a, part_of]):\n    print(f' * ancestor: \"{adapter.label(ancestor)}\"')\n```\n\nfor more examples, see\n\n- [demo notebook](https://github.com/incatools/ontology-access-kit/blob/main/notebooks/basic-demo.ipynb)\n- [tutorial part 2](https://incatools.github.io/ontology-access-kit/intro/tutorial02.html)\n\n## command line\n\nsee:\n\n - [cli docs](https://incatools.github.io/ontology-access-kit/cli.html)\n - [example notebooks](https://github.com/incatools/ontology-access-kit/tree/main/notebooks/commands)\n\n## search\n\nuse the pronto backend to fetch and parse an ontology from the obo library, then use the `search` command\n\n```bash\nrunoak -i obolibrary:pato.obo search osmol \n```\n\nreturns:\n\n```\npato:0001655 ! osmolarity\npato:0001656 ! decreased osmolarity\npato:0001657 ! increased osmolarity\npato:0002027 ! osmolality\npato:0002028 ! decreased osmolality\npato:0002029 ! increased osmolality\npato:0045034 ! normal osmolality\npato:0045035 ! normal osmolarity\n```\n\n### qc and validation\n\nperform validation on pr using sqlite/rdftab instance:\n\n```bash\nrunoak -i sqlite:../semantic-sql/db/pr.db validate\n```\n\n### list all terms\n\nlist all terms obolibrary has for mondo\n\n```bash\nrunoak -i obolibrary:mondo.obo terms \n```\n\n### lexical index\n\nmake a lexical index of all terms in mondo:\n\n```bash\nrunoak  -i obolibrary:mondo.obo lexmatch -l mondo.index.yaml\n```\n\n### search\n\nsearching over obo using ontobee:\n\n```bash\nrunoak  -i ontobee: search tentacle\n```\n\nyields:\n\n```\nhttp://purl.obolibrary.org/obo/ceph_0000256 ! tentacle\nhttp://purl.obolibrary.org/obo/ceph_0000257 ! tentacle absence\nhttp://purl.obolibrary.org/obo/ceph_0000258 ! tentacle pad\n...\n```\n\nsearching over a broader set of ontologies in bioportal (requires api key)\n(https://www.bioontology.org/wiki/bioportal_help#getting_an_api_key)\n\n```bash\nrunoak set-apikey bioportal your-key-here\nrunoak  -i bioportal: search tentacle\n```\n\nyields:\n\n```\nbto:0001357 ! tentacle\nhttp://purl.jp/bio/4/id/200906071014668510 ! tentacle\nceph:0000256 ! tentacle\nhttp://www.projecthalo.com/aura#tentacle ! tentacle\nceph:0000256 ! tentacle\n...\n```\nalternatively, you can add \"bioportal_api_key\" to your environment variables.\n\nsearching over more limited set of ontologies in ubergraph:\n\n```bash\nrunoak -v -i ubergraph: search tentacle\n```\n\nyields\n```\nuberon:0013206 ! nasal tentacle\n```\n\n### annotating texts\n\n```bash\nrunoak  -i bioportal: annotate neuron from ca4 region of hippocampus of mouse\n```\n\nyields:\n\n```yaml\nobject_id: cl:0000540\nobject_label: neuron\nobject_source: https://data.bioontology.org/ontologies/nifdys\nmatch_type: pref\nsubject_start: 1\nsubject_end: 6\nsubject_label: neuron\n\nobject_id: http://www.co-ode.org/ontologies/galen#neuron\nobject_label: neuron\nobject_source: https://data.bioontology.org/ontologies/galen\nmatch_type: pref\nsubject_start: 1\nsubject_end: 6\nsubject_label: neuron\n\n...\n```\n\n### mapping\n\ncreate a sssom mapping file for a set of ontologies:\n\n```bash\nrobot merge -i http://purl.obolibrary.org/obo/hp.owl -i http://purl.obolibrary.org/obo/mp.owl convert --check false -o hp-mp.obo\nrunoak lexmatch -i hp-mp.obo -o hp-mp.sssom.tsv\n```\n\n\n\n\n### visualization of ancestor graphs\n\nuse the sqlite backend to visualize graph up from 'vacuole' using test ontology sqlite:\n\n```bash\nrunoak -i sqlite:tests/input/go-nucleus.db  viz go:0005773\n```\n\n![img](notebooks/output/vacuole.png)\n\nsame using ubergraph, restricting to is-a and part-of\n\n```bash\nrunoak -i ubergraph:  viz go:0005773 -p i,bfo:0000050\n```\n\nsame using pronto, fetching ontology from obolibrary\n\n```bash\nrunoak -i obolibrary:go.obo  viz go:0005773\n```\n\n## configuration\n\noak uses [`pystow`](https://github.com/cthoyt/pystow) for caching. by default,\nthis goes inside `~/.data/`, but can be configured following\n[these instructions](https://github.com/cthoyt/pystow#%ef%b8%8f%ef%b8%8f-configuration).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "oaklib",
  "package_url": "https://pypi.org/project/oaklib/",
  "project_url": "https://pypi.org/project/oaklib/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/oaklib/0.5.25/",
  "requires_dist": [
    "SPARQLWrapper",
    "SQLAlchemy (>=1.4.32)",
    "airium (>=0.2.5)",
    "appdirs (>=1.4.4)",
    "class-resolver (>=0.4.2)",
    "click",
    "curies (>=0.6.6)",
    "eutils (>=0.6.0)",
    "funowl (>=0.2.0)",
    "gilda (>=1.0.0) ; extra == \"gilda\"",
    "kgcl-rdflib (==0.5.0)",
    "kgcl-schema (>=0.6.0)",
    "linkml-renderer (>=0.3.0)",
    "linkml-runtime (>=1.5.3)",
    "llm ; extra == \"llm\"",
    "ndex2 (>=3.5.0,<4.0.0)",
    "networkx (>=2.7.1)",
    "ols-client (>=0.1.1)",
    "ontoportal-client (>=0.0.3)",
    "prefixmaps (>=0.1.2)",
    "pronto (>=2.5.0)",
    "pydantic",
    "pysolr (>=3.9.0,<4.0.0)",
    "pystow (>=0.5.0)",
    "ratelimit (>=2.2.1)",
    "requests-cache (>=1.0.1,<2.0.0)",
    "semsimian (>=0.2.1,<0.3.0)",
    "semsql (>=0.3.1)",
    "sssom (>=0.4.0,<0.5.0)",
    "urllib3 (<2) ; extra == \"gilda\""
  ],
  "requires_python": ">=3.9,<4.0.0",
  "summary": "ontology access kit: python library for common ontology operations over a variety of backends",
  "version": "0.5.25",
  "releases": [],
  "developers": [
    "cjm@berkeleybop.org",
    "cmungall"
  ],
  "kwds": "ontologies ontology owl icon ubergraph",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_oaklib",
  "homepage": "",
  "release_count": 123,
  "dependency_ids": [
    "pypi_airium",
    "pypi_appdirs",
    "pypi_class_resolver",
    "pypi_click",
    "pypi_curies",
    "pypi_eutils",
    "pypi_funowl",
    "pypi_gilda",
    "pypi_kgcl_rdflib",
    "pypi_kgcl_schema",
    "pypi_linkml_renderer",
    "pypi_linkml_runtime",
    "pypi_llm",
    "pypi_ndex2",
    "pypi_networkx",
    "pypi_ols_client",
    "pypi_ontoportal_client",
    "pypi_prefixmaps",
    "pypi_pronto",
    "pypi_pydantic",
    "pypi_pysolr",
    "pypi_pystow",
    "pypi_ratelimit",
    "pypi_requests_cache",
    "pypi_semsimian",
    "pypi_semsql",
    "pypi_sparqlwrapper",
    "pypi_sqlalchemy",
    "pypi_sssom",
    "pypi_urllib3"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: c++",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": ".. figure:: https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png\n   :alt: pybind11 logo\n\n**pybind11 \u2014 seamless operability between c++11 and python**\n\n|latest documentation status| |stable documentation status| |gitter chat| |github discussions| |ci| |build status|\n\n|repology| |pypi package| |conda-forge| |python versions|\n\n`setuptools example <https://github.com/pybind/python_example>`_\n\u2022 `scikit-build example <https://github.com/pybind/scikit_build_example>`_\n\u2022 `cmake example <https://github.com/pybind/cmake_example>`_\n\n.. start\n\n\n**pybind11** is a lightweight header-only library that exposes c++ types\nin python and vice versa, mainly to create python bindings of existing\nc++ code. its goals and syntax are similar to the excellent\n`boost.python <http://www.boost.org/doc/libs/1_58_0/libs/python/doc/>`_\nlibrary by david abrahams: to minimize boilerplate code in traditional\nextension modules by inferring type information using compile-time\nintrospection.\n\nthe main issue with boost.python\u2014and the reason for creating such a\nsimilar project\u2014is boost. boost is an enormously large and complex suite\nof utility libraries that works with almost every c++ compiler in\nexistence. this compatibility has its cost: arcane template tricks and\nworkarounds are necessary to support the oldest and buggiest of compiler\nspecimens. now that c++11-compatible compilers are widely available,\nthis heavy machinery has become an excessively large and unnecessary\ndependency.\n\nthink of this library as a tiny self-contained version of boost.python\nwith everything stripped away that isn't relevant for binding\ngeneration. without comments, the core header files only require ~4k\nlines of code and depend on python (3.6+, or pypy) and the c++\nstandard library. this compact implementation was possible thanks to\nsome of the new c++11 language features (specifically: tuples, lambda\nfunctions and variadic templates). since its creation, this library has\ngrown beyond boost.python in many ways, leading to dramatically simpler\nbinding code in many common situations.\n\ntutorial and reference documentation is provided at\n`pybind11.readthedocs.io <https://pybind11.readthedocs.io/en/latest>`_.\na pdf version of the manual is available\n`here <https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/>`_.\nand the source code is always available at\n`github.com/pybind/pybind11 <https://github.com/pybind/pybind11>`_.\n\n\ncore features\n-------------\n\n\npybind11 can map the following core c++ features to python:\n\n- functions accepting and returning custom data structures per value,\n  reference, or pointer\n- instance methods and static methods\n- overloaded functions\n- instance attributes and static attributes\n- arbitrary exception types\n- enumerations\n- callbacks\n- iterators and ranges\n- custom operators\n- single and multiple inheritance\n- stl data structures\n- smart pointers with reference counting like ``std::shared_ptr``\n- internal references with correct reference counting\n- c++ classes with virtual (and pure virtual) methods can be extended\n  in python\n\ngoodies\n-------\n\nin addition to the core functionality, pybind11 provides some extra\ngoodies:\n\n- python 3.6+, and pypy3 7.3 are supported with an implementation-agnostic\n  interface (pybind11 2.9 was the last version to support python 2 and 3.5).\n\n- it is possible to bind c++11 lambda functions with captured\n  variables. the lambda capture data is stored inside the resulting\n  python function object.\n\n- pybind11 uses c++11 move constructors and move assignment operators\n  whenever possible to efficiently transfer custom data types.\n\n- it's easy to expose the internal storage of custom data types through\n  pythons' buffer protocols. this is handy e.g.\u00a0for fast conversion\n  between c++ matrix classes like eigen and numpy without expensive\n  copy operations.\n\n- pybind11 can automatically vectorize functions so that they are\n  transparently applied to all entries of one or more numpy array\n  arguments.\n\n- python's slice-based access and assignment operations can be\n  supported with just a few lines of code.\n\n- everything is contained in just a few header files; there is no need\n  to link against any additional libraries.\n\n- binaries are generally smaller by a factor of at least 2 compared to\n  equivalent bindings generated by boost.python. a recent pybind11\n  conversion of pyrosetta, an enormous boost.python binding project,\n  `reported <https://graylab.jhu.edu/sergey/2016.rosettacon/pyrosetta-4.pdf>`_\n  a binary size reduction of **5.4x** and compile time reduction by\n  **5.8x**.\n\n- function signatures are precomputed at compile time (using\n  ``constexpr``), leading to smaller binaries.\n\n- with little extra effort, c++ types can be pickled and unpickled\n  similar to regular python objects.\n\nsupported compilers\n-------------------\n\n1. clang/llvm 3.3 or newer (for apple xcode's clang, this is 5.0.0 or\n   newer)\n2. gcc 4.8 or newer\n3. microsoft visual studio 2017 or newer\n4. intel classic c++ compiler 18 or newer (icc 20.2 tested in ci)\n5. cygwin/gcc (previously tested on 2.5.1)\n6. nvcc (cuda 11.0 tested in ci)\n7. nvidia pgi (20.9 tested in ci)\n\nabout\n-----\n\nthis project was created by `wenzel\njakob <http://rgl.epfl.ch/people/wjakob>`_. significant features and/or\nimprovements to the code were contributed by jonas adler, lori a. burns,\nsylvain corlay, eric cousineau, aaron gokaslan, ralf grosse-kunstleve, trent houliston, axel\nhuebl, @hulucc, yannick jadoul, sergey lyskov, johan mabille, tomasz mi\u0105sko,\ndean moldovan, ben pritchard, jason rhinelander, boris sch\u00e4ling, pim\nschellart, henry schreiner, ivan smirnov, boris staletic, and patrick stewart.\n\nwe thank google for a generous financial contribution to the continuous\nintegration infrastructure used by this project.\n\n\ncontributing\n~~~~~~~~~~~~\n\nsee the `contributing\nguide <https://github.com/pybind/pybind11/blob/master/.github/contributing.md>`_\nfor information on building and contributing to pybind11.\n\nlicense\n~~~~~~~\n\npybind11 is provided under a bsd-style license that can be found in the\n`license <https://github.com/pybind/pybind11/blob/master/license>`_\nfile. by using, distributing, or contributing to this project, you agree\nto the terms and conditions of this license.\n\n.. |latest documentation status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest\n   :target: http://pybind11.readthedocs.org/en/latest\n.. |stable documentation status| image:: https://img.shields.io/badge/docs-stable-blue.svg\n   :target: http://pybind11.readthedocs.org/en/stable\n.. |gitter chat| image:: https://img.shields.io/gitter/room/gitterhq/gitter.svg\n   :target: https://gitter.im/pybind/lobby\n.. |ci| image:: https://github.com/pybind/pybind11/workflows/ci/badge.svg\n   :target: https://github.com/pybind/pybind11/actions\n.. |build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true\n   :target: https://ci.appveyor.com/project/wjakob/pybind11\n.. |pypi package| image:: https://img.shields.io/pypi/v/pybind11.svg\n   :target: https://pypi.org/project/pybind11/\n.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg\n   :target: https://github.com/conda-forge/pybind11-feedstock\n.. |repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg\n   :target: https://repology.org/project/python:pybind11/versions\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg\n   :target: https://pypi.org/project/pybind11/\n.. |github discussions| image:: https://img.shields.io/static/v1?label=discussions&message=ask&color=blue&logo=github\n   :target: https://github.com/pybind/pybind11/discussions\n",
  "docs_url": null,
  "keywords": "c++11,python bindings",
  "license": "bsd",
  "name": "pybind11-global",
  "package_url": "https://pypi.org/project/pybind11-global/",
  "project_url": "https://pypi.org/project/pybind11-global/",
  "project_urls": {
    "Bug Tracker": "https://github.com/pybind/pybind11/issues",
    "Changelog": "https://pybind11.readthedocs.io/en/latest/changelog.html",
    "Chat": "https://gitter.im/pybind/Lobby",
    "Discussions": "https://github.com/pybind/pybind11/discussions",
    "Documentation": "https://pybind11.readthedocs.io/",
    "Homepage": "https://github.com/pybind/pybind11"
  },
  "release_url": "https://pypi.org/project/pybind11-global/2.11.1/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "seamless operability between c++11 and python",
  "version": "2.11.1",
  "releases": [],
  "developers": [
    "wenzel.jakob@epfl.ch",
    "wenzel_jakob"
  ],
  "kwds": "pybind11 pybind cmake_example python_example cmake",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pybind11_global",
  "homepage": "https://github.com/pybind/pybind11",
  "release_count": 21,
  "dependency_ids": []
}
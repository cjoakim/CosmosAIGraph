{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "please read\n`upgrade-v2.0.md <https://github.com/graphql-python/graphene/blob/master/upgrade-v2.0.md>`__\nto learn how to upgrade to graphene ``2.0``.\n\n--------------\n\n|graphene logo| graphene-sqlalchemy |build status| |pypi version| |coverage status|\n===================================================================================\n\na `sqlalchemy <http://www.sqlalchemy.org/>`__ integration for\n`graphene <http://graphene-python.org/>`__.\n\ninstallation\n------------\n\nfor instaling graphene, just run this command in your shell\n\n.. code:: bash\n\n    pip install \"graphene-sqlalchemy>=2.0\"\n\nexamples\n--------\n\nhere is a simple sqlalchemy model:\n\n.. code:: python\n\n    from sqlalchemy import column, integer, string\n    from sqlalchemy.orm import backref, relationship\n\n    from sqlalchemy.ext.declarative import declarative_base\n\n    base = declarative_base()\n\n    class usermodel(base):\n        __tablename__ = 'department'\n        id = column(integer, primary_key=true)\n        name = column(string)\n        last_name = column(string)\n\nto create a graphql schema for it you simply have to write the\nfollowing:\n\n.. code:: python\n\n    from graphene_sqlalchemy import sqlalchemyobjecttype\n\n    class user(sqlalchemyobjecttype):\n        class meta:\n            model = usermodel\n\n    class query(graphene.objecttype):\n        users = graphene.list(user)\n\n        def resolve_users(self, info):\n            query = user.get_query(info)  # sqlalchemy query\n            return query.all()\n\n    schema = graphene.schema(query=query)\n\nthen you can simply query the schema:\n\n.. code:: python\n\n    query = '''\n        query {\n          users {\n            name,\n            lastname\n          }\n        }\n    '''\n    result = schema.execute(query, context_value={'session': db_session})\n\nto learn more check out the following `examples <examples/>`__:\n\n-  **full example**: `flask sqlalchemy\n   example <examples/flask_sqlalchemy>`__\n\ncontributing\n------------\n\nafter cloning this repo, ensure dependencies are installed by running:\n\n.. code:: sh\n\n    python setup.py install\n\nafter developing, the full test suite can be evaluated by running:\n\n.. code:: sh\n\n    python setup.py test # use --pytest-args=\"-v -s\" for verbose mode\n\n.. |graphene logo| image:: http://graphene-python.org/favicon.png\n.. |build status| image:: https://travis-ci.org/graphql-python/graphene-sqlalchemy.svg?branch=master\n   :target: https://travis-ci.org/graphql-python/graphene-sqlalchemy\n.. |pypi version| image:: https://badge.fury.io/py/graphene-sqlalchemy.svg\n   :target: https://badge.fury.io/py/graphene-sqlalchemy\n.. |coverage status| image:: https://coveralls.io/repos/graphql-python/graphene-sqlalchemy/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/graphql-python/graphene-sqlalchemy?branch=master\n\n\n",
  "docs_url": null,
  "keywords": "api graphql protocol rest relay graphene",
  "license": "mit",
  "name": "graphene-sqlalchemy",
  "package_url": "https://pypi.org/project/graphene-sqlalchemy/",
  "project_url": "https://pypi.org/project/graphene-sqlalchemy/",
  "project_urls": {
    "Homepage": "https://github.com/graphql-python/graphene-sqlalchemy"
  },
  "release_url": "https://pypi.org/project/graphene-sqlalchemy/2.3.0/",
  "requires_dist": [
    "graphene (<3,>=2.1.3)",
    "promise (>=2.3)",
    "SQLAlchemy (<2,>=1.2)",
    "six (<2,>=1.10.0)",
    "singledispatch (<4,>=3.4.0.3)",
    "tox (==3.7.0) ; extra == 'dev'",
    "coveralls (==1.10.0) ; extra == 'dev'",
    "pre-commit (==1.14.4) ; extra == 'dev'",
    "pytest (==4.3.1) ; extra == 'test'",
    "mock (==2.0.0) ; extra == 'test'",
    "pytest-cov (==2.6.1) ; extra == 'test'",
    "sqlalchemy-utils (==0.33.9) ; extra == 'test'",
    "pytest-benchmark (==3.2.1) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "graphene sqlalchemy integration",
  "version": "2.3.0",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "graphene_sqlalchemy graphene flask_sqlalchemy sqlalchemy graphql",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_graphene_sqlalchemy",
  "homepage": "https://github.com/graphql-python/graphene-sqlalchemy",
  "release_count": 27,
  "dependency_ids": [
    "pypi_coveralls",
    "pypi_graphene",
    "pypi_mock",
    "pypi_pre_commit",
    "pypi_promise",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_singledispatch",
    "pypi_six",
    "pypi_sqlalchemy",
    "pypi_sqlalchemy_utils",
    "pypi_tox"
  ]
}
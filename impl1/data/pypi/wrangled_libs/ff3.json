{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: financial and insurance industry",
    "intended audience :: healthcare industry",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: security :: cryptography"
  ],
  "description": "[![build status](https://travis-ci.com/mysto/python-fpe.svg?branch=main)](https://travis-ci.com/mysto/python-fpe)\n[![coverage status](https://coveralls.io/repos/github/mysto/python-fpe/badge.svg?branch=main)](https://coveralls.io/github/mysto/python-fpe?branch=main)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](https://opensource.org/licenses/apache-2.0)\n[![downloads](https://pepy.tech/badge/ff3)](https://pepy.tech/project/ff3)\n[![pypi version](https://badge.fury.io/py/ff3.svg)](https://badge.fury.io/py/ff3)\n\n# ff3 - format preserving encryption in python\n\nan implementation of the nist approved ff3 and ff3-1 format preserving encryption (fpe) algorithms in python.\n\nthis package implements the ff3 algorithm for format preserving encryption as described in the march 2016 nist publication 800-38g _methods for format-preserving encryption_,\nand revised on february 28th, 2019 with a draft update for ff3-1.\n\n* [nist recommendation sp 800-38g (ff3)](http://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-38g.pdf)\n* [nist recommendation sp 800-38g revision 1 (ff3-1)](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-38gr1-draft.pdf)\n\nchanges to minimum domain size and revised tweak length have been implemented in this package with\nsupport for both 64-bit and 56-bit tweaks. nist has only published official test vectors for 64-bit tweaks, \nbut draft acvp test vectors have been used for testing ff3-1. it is expected the final\nnist standard will provide updated test vectors with 56-bit tweak lengths.\n\n## requires\n\nthis project was built and tested with python 3.6 and later versions.  the only dependency is [pycryptodome](https://pycryptodome.readthedocs.io).\n\n## installation\n\nfor a normal installation of the latest pypi release with pip:\n\n`pip3 install ff3`\n\nto instead install the development version:\n\n```bash\ngit clone https://github.com/mysto/python-fpe.git\ncd python-fpe\npip3 install --editable .\n```\n\nbefore contributing any pull requests, you will need to first fork this repository and change the remote origin to reflect your fork:\n\n```bash\ngit remote set-url origin git@github.com:your-github-username/python-fpe.git\n```\n\nto uninstall:\n\n```bash\npip3 uninstall ff3\n```\n\n## usage\n\nff3 is a feistel cipher, and feistel ciphers are initialized with a radix representing an alphabet. the number of\ncharacters in an alphabet is called the _radix_.\nthe following radix values are typical:\n\n* radix 10: digits 0..9\n* radix 36: alphanumeric 0..9, a-z\n* radix 62: alphanumeric 0..9, a-z, a-z\n\nspecial characters and international character sets, such as those found in utf-8, are supported by specifying a custom alphabet.\nalso, all elements in a plaintext string share the same radix. thus, an identification number that consists of an initial letter followed\nby 6 digits (e.g. a123456) cannot be correctly encrypted by fpe while preserving this convention.\n\ninput plaintext has maximum length restrictions based upon the chosen radix (2 * floor(96/log2(radix))):\n\n* radix 10: 56\n* radix 36: 36\n* radix 62: 32\n\nto work around string length, its possible to encode longer text in chunks.\n\nas with any cryptographic package, managing and protecting the key(s) is crucial. the tweak is generally not kept secret.\nthis package does not store the key in memory after initializing the cipher.\n\n## code example\n\nthe example code below uses the default domain [0-9] and can help you get started.\n\n```python3\n\nfrom ff3 import ff3cipher\n\nkey = \"2de79d232df5585d68ce47882ae256d6\"\ntweak = \"cbd09280979564\"\nc = ff3cipher(key, tweak)\n\nplaintext = \"3992520240\"\nciphertext = c.encrypt(plaintext)\ndecrypted = c.decrypt(ciphertext)\n\nprint(f\"{plaintext} -> {ciphertext} -> {decrypted}\")\n\n# format encrypted value\nccn = f\"{ciphertext[:4]} {ciphertext[4:8]} {ciphertext[8:12]} {ciphertext[12:]}\"\nprint(f\"encrypted ccn value with formatting: {ccn}\")\n```\n## cli example\n\nthis package installs the command line scripts ff3_encrypt and ff3_decrypt which can be run\nfrom the linux or windows command line.\n\n```bash\n% ff3_encrypt 2de79d232df5585d68ce47882ae256d6 cbd09280979564 3992520240\n8901801106\n% ff3_decrypt 2de79d232df5585d68ce47882ae256d6 cbd09280979564 8901801106\n3992520240\n\n```\n\n\n## custom alphabets\n\ncustom alphabets up to 256 characters are supported. to use an alphabet consisting of the uppercase letters a-f (radix=6), we can continue\nfrom the above code example with:\n\n```python3\nc6 = ff3cipher.withcustomalphabet(key, tweak, \"abcdef\")\nplaintext = \"baddcafe\"\nciphertext = c6.encrypt(plaintext)\ndecrypted = c6.decrypt(ciphertext)\n\nprint(f\"{plaintext} -> {ciphertext} -> {decrypted}\")\n```\n\n## testing\n\nofficial [test vectors](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/ff3samples.pdf) for ff3 provided by nist,\nare used for testing in this package. also included are draft acvp test vectors with 56-bit tweaks.\n\nto run unit tests on this implementation, including all test vectors from the nist specification, run the command:\n\n```bash\npython3 -m ff3.ff3_test\n```\n\n## performance benchmarks\n\nthe mysto ff3 was benchmarked on a macbook air (1.1 ghz quad-core intel core i5)\nperforming 70,000 tokenization per second with random 8 character data input.\n\nto run the performance tests:\n\n```bash\npython3 -m ff3.ff3_perf\n```\n\n## the ff3 algorithm\n\nthe ff3 algorithm is a tweakable block cipher based on an eight round feistel cipher. a block cipher operates on fixed-length groups of bits, called blocks. a feistel cipher is not a specific cipher,\nbut a design model.  this ff3 feistel encryption consisting of eight rounds of processing\nthe plaintext. each round applies an internal function or _round function_, followed by transformation steps.\n\nthe ff3 round function uses aes encryption in ecb mode, which is performed each iteration\non alternating halves of the text being encrypted. the *key* value is used only to initialize the aes cipher. thereafter\nthe *tweak* is used together with the intermediate encrypted text as input to the round function.\n\n## other fpe algorithms\n\nonly ff1 and ff3 have been approved by nist for format preserving encryption. there are patent claims on ff1 which allegedly include open source implementations. given the issues raised in [\"the curse of small domains: new attacks on format-preserving encryption\"](https://eprint.iacr.org/2018/556.pdf) by hoang, tessaro and trieu in 2018, it is prudent to be very cautious about using any fpe that isn't a standard and hasn't stood up to public scrutiny.\n\n## implementation notes\n\nthis implementation was originally based upon the [capital one go implementation](https://github.com/capitalone/fpe).  it follows the algorithm as outlined in the nist specification as closely as possible, including naming.\n\nfpe can be used for data tokenization of sensitive data which is cryptographically reversible. this implementation does not provide any guarantees regarding pci dss or other validation.\n\nwhile all nist and acvp test vectors pass, this package has not otherwise been extensively tested.\n\nthe cryptographic library used is [pycryptodome](https://pypi.org/project/pycryptodome/) for aes encryption. ff3 uses a single-block with an iv of 0, which is effectively ecb mode. aes ecb is the only block cipher function which matches the requirement of the ff3 spec.\n\nthe domain size was revised in ff3-1 to radix<sup>minlen</sup> >= 1,000,000 and is represented by the constant `domain_min` in `ff3.py`. ff3-1 is in draft status.\n\nthe tweak is required in the initial `ff3cipher` constructor, but can optionally be overridden in each `encrypt` and `decrypt` call. this is similar to passing an iv or nonce when creating an encrypter object.\n\n## author\n\nbrad schoening\n\n## license\n\nthis project is licensed under the terms of the [apache 2.0 license](https://www.apache.org/licenses/license-2.0).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ff3",
  "package_url": "https://pypi.org/project/ff3/",
  "project_url": "https://pypi.org/project/ff3/",
  "project_urls": {
    "Homepage": "https://github.com/mysto/python-fpe"
  },
  "release_url": "https://pypi.org/project/ff3/1.0.1/",
  "requires_dist": [
    "pycryptodome"
  ],
  "requires_python": ">=3.6",
  "summary": "format preserving encryption (fpe) with ff3",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "bschoeni+llc@gmail.com",
    "schoening_consulting"
  ],
  "kwds": "fpe pip3 python3 badge pip",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ff3",
  "homepage": "https://github.com/mysto/python-fpe",
  "release_count": 6,
  "dependency_ids": [
    "pypi_pycryptodome"
  ]
}
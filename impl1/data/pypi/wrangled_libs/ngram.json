{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: text processing",
    "topic :: text processing :: indexing",
    "topic :: text processing :: linguistic"
  ],
  "description": "the ngram class extends the python 'set' class with efficient\nfuzzy search for members by means of an n-gram similarity measure.\nit also has static methods to compare a pair of strings.\n\nthe n-grams are character based not word-based, and the class does not\nimplement a language model, merely searching for members by string similarity.\n\nsee the `documentation`_, which includes a tutorial and release notes.\n\nuse the `github issue tracker`_ to report issues.\n\ninstallation\n============\n\nto install python-ngram from `pypi`_::\n\n   pip install ngram\n\nhow does it work?\n=================\n\nthe set stores arbitrary items, but for non-string items a `key` function\n(such as `str`) must be specified to provide a string represenation.  the key\nfunction can also be used to normalise string items (e.g. lower-casing) prior\nto n-gram indexing.\n\nto index a string it pads the string with a specified dummy character, then\nsplits it into overlapping substrings of n (default n=3) characters in length\nand associates each n-gram to the items that use it.\n\nto find items similar to a query string, it splits the query into n-grams,\ncollects all items sharing at least one n-gram with the query,\nand ranks the items by score based on the ratio of shared to unshared\nn-grams between strings.\n\nhistory\n=======\n\nin 2007, michel albert (exhuma) wrote the python-ngram module based on perl's\n`string::trigram`_ module by tarek ahmed, and committed the code for 2.0.0b2 to\na now-disused `sourceforge`_ subversion repo.\n\nsince late 2008, graham poulter has maintained python-ngram, initially refactoring\nit to build on the `set` class, and also adding features, documentation, tests,\nperformance improvements and python 3 support.\n\ndevelopment\n===========\n\ndevelopment takes place on `github`_.  on checking out the repo run `tox` to build\nthe sphinx documentation and run tests.  run `pip install -e .` to install the module \nin editable mode, inside a virtualenv.\n\n.. _documentation: https://python-ngram.readthedocs.io/en/latest/\n.. _github: http://github.com/gpoulter/python-ngram\n.. _github issue tracker: https://github.com/gpoulter/python-ngram/issues\n.. _pypi: http://pypi.python.org/pypi/ngram\n.. _string::trigram: http://search.cpan.org/dist/string-trigram/\n.. _sourceforge: https://sourceforge.net/projects/python-ngram/\n\n\n",
  "docs_url": "https://pythonhosted.org/ngram/",
  "keywords": "ngram set string text similarity",
  "license": "lgpl3",
  "name": "ngram",
  "package_url": "https://pypi.org/project/ngram/",
  "project_url": "https://pypi.org/project/ngram/",
  "project_urls": {
    "Documentation": "https://python-ngram.readthedocs.io/en/latest/",
    "Download": "http://pypi.python.org/pypi/ngram",
    "Homepage": "https://github.com/gpoulter/python-ngram"
  },
  "release_url": "https://pypi.org/project/ngram/4.0.3/",
  "requires_dist": [],
  "requires_python": ">=3.0",
  "summary": "a `set` subclass providing fuzzy search based on n-grams.",
  "version": "4.0.3",
  "releases": [],
  "developers": [
    "graham_poulter"
  ],
  "kwds": "ngram gram similarity _string strings",
  "license_kwds": "lgpl3",
  "libtype": "pypi",
  "id": "pypi_ngram",
  "homepage": "https://github.com/gpoulter/python-ngram",
  "release_count": 10,
  "dependency_ids": []
}
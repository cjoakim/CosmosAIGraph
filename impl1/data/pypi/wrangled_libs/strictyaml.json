{
  "classifiers": [
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "topic :: software development :: libraries",
    "topic :: text processing :: markup"
  ],
  "description": "# strictyaml\n\nstrictyaml is a [type-safe](https://en.wikipedia.org/wiki/type_safety) yaml parser\nthat parses and validates a [restricted subset](https://hitchdev.com/strictyaml/features-removed) of the [yaml](https://hitchdev.com/strictyaml/what-is-yaml)\nspecification.\n\npriorities:\n\n- beautiful api\n- refusing to parse [the ugly, hard to read and insecure features of yaml](https://hitchdev.com/strictyaml/features-removed) like [the norway problem](https://hitchdev.com/strictyaml/why/implicit-typing-removed).\n- strict validation of markup and straightforward type casting.\n- clear, readable exceptions with **code snippets** and **line numbers**.\n- acting as a near-drop in replacement for pyyaml, ruamel.yaml or poyo.\n- ability to read in yaml, make changes and write it out again with comments preserved.\n- [not speed](https://hitchdev.com/strictyaml/why/speed-not-a-priority), currently.\n\n\nsimple example:\n\n```yaml\n# all about the character\nname: ford prefect\nage: 42\npossessions:\n- towel\n\n```\n\n\n```python\nfrom strictyaml import load, map, str, int, seq, yamlerror\n\n```\n\n\n\n\n\ndefault parse result:\n\n\n```python\n>>> load(yaml_snippet)\nyaml({'name': 'ford prefect', 'age': '42', 'possessions': ['towel']})\n```\n\n\n\nall data is string, list or ordereddict:\n\n\n```python\n>>> load(yaml_snippet).data\n{'name': 'ford prefect', 'age': '42', 'possessions': ['towel']}\n```\n\n\n\nquickstart with schema:\n\n\n```python\nfrom strictyaml import load, map, str, int, seq, yamlerror\n\nschema = map({\"name\": str(), \"age\": int(), \"possessions\": seq(str())})\n\n```\n\n\n\n\n\n42 is now parsed as an integer:\n\n\n```python\n>>> person = load(yaml_snippet, schema)\n>>> person.data\n{'name': 'ford prefect', 'age': 42, 'possessions': ['towel']}\n```\n\n\n\na yamlerror will be raised if there are syntactic problems, violations of your schema or use of disallowed yaml features:\n\n```yaml\n# all about the character\nname: ford prefect\nage: 42\n\n```\n\n\n\n\n\n\nfor example, a schema violation:\n\n\n```python\ntry:\n    person = load(yaml_snippet, schema)\nexcept yamlerror as error:\n    print(error)\n\n```\n\n```yaml\nwhile parsing a mapping\n  in \"<unicode string>\", line 1, column 1:\n    # all about the character\n     ^ (line: 1)\nrequired key(s) 'possessions' not found\n  in \"<unicode string>\", line 3, column 1:\n    age: '42'\n    ^ (line: 3)\n```\n\n\n\n\n\nif parsed correctly:\n\n\n```python\nfrom strictyaml import load, map, str, int, seq, yamlerror, as_document\n\nschema = map({\"name\": str(), \"age\": int(), \"possessions\": seq(str())})\n\n```\n\n\n\n\n\nyou can modify values and write out the yaml with comments preserved:\n\n\n```python\nperson = load(yaml_snippet, schema)\nperson['age'] = 43\nprint(person.as_yaml())\n\n```\n\n```yaml\n# all about the character\nname: ford prefect\nage: 43\npossessions:\n- towel\n```\n\n\n\n\n\nas well as look up line numbers:\n\n\n```python\n>>> person = load(yaml_snippet, schema)\n>>> person['possessions'][0].start_line\n5\n```\n\n\n\nand construct yaml documents from dicts or lists:\n\n\n```python\nprint(as_document({\"x\": 1}).as_yaml())\n\n```\n\n```yaml\nx: 1\n```\n\n\n\n\n\n\n\n## install\n\n```sh\n$ pip install strictyaml\n```\n\n\n## why strictyaml?\n\nthere are a number of formats and approaches that can achieve more or\nless the same purpose as strictyaml. i've tried to make it the best one.\nbelow is a series of documented justifications:\n\n- [why avoid using environment variables as configuration?](https://hitchdev.com/strictyaml/why-not/environment-variables-as-config)\n- [why not use hjson?](https://hitchdev.com/strictyaml/why-not/hjson)\n- [why not hocon?](https://hitchdev.com/strictyaml/why-not/hocon)\n- [why not use ini files?](https://hitchdev.com/strictyaml/why-not/ini)\n- [why not use json schema for validation?](https://hitchdev.com/strictyaml/why-not/json-schema)\n- [why not json for simple configuration files?](https://hitchdev.com/strictyaml/why-not/json)\n- [why not json5?](https://hitchdev.com/strictyaml/why-not/json5)\n- [why not use the yaml 1.2 standard? - we don't need a new standard!](https://hitchdev.com/strictyaml/why-not/ordinary-yaml)\n- [why not use kwalify with standard yaml to validate my yaml?](https://hitchdev.com/strictyaml/why-not/pykwalify)\n- [why not use python's schema library (or similar) for validation?](https://hitchdev.com/strictyaml/why-not/python-schema)\n- [why not use sdlang?](https://hitchdev.com/strictyaml/why-not/sdlang)\n- [what is wrong with toml?](https://hitchdev.com/strictyaml/why-not/toml)\n- [why shouldn't i just use python code for configuration?](https://hitchdev.com/strictyaml/why-not/turing-complete-code)\n- [why not use xml for configuration or dsls?](https://hitchdev.com/strictyaml/why-not/xml)\n\n\n\n## using strictyaml\n\nhow to:\n\n- [build a yaml document from scratch in code](https://hitchdev.com/strictyaml/using/alpha/howto/build-yaml-document)\n- [either/or schema validation of different, equally valid different kinds of yaml](https://hitchdev.com/strictyaml/using/alpha/howto/either-or-validation)\n- [labeling exceptions](https://hitchdev.com/strictyaml/using/alpha/howto/label-exceptions)\n- [merge yaml documents](https://hitchdev.com/strictyaml/using/alpha/howto/merge-yaml-documents)\n- [revalidate an already validated document](https://hitchdev.com/strictyaml/using/alpha/howto/revalidation)\n- [reading in yaml, editing it and writing it back out](https://hitchdev.com/strictyaml/using/alpha/howto/roundtripping)\n- [get line numbers of yaml elements](https://hitchdev.com/strictyaml/using/alpha/howto/what-line)\n- [parsing yaml without a schema](https://hitchdev.com/strictyaml/using/alpha/howto/without-a-schema)\n\n\ncompound validators:\n\n- [fixed length sequences (fixedseq)](https://hitchdev.com/strictyaml/using/alpha/compound/fixed-length-sequences)\n- [mappings combining defined and undefined keys (mapcombined)](https://hitchdev.com/strictyaml/using/alpha/compound/map-combined)\n- [mappings with arbitrary key names (mappattern)](https://hitchdev.com/strictyaml/using/alpha/compound/map-pattern)\n- [mapping with defined keys and a custom key validator (map)](https://hitchdev.com/strictyaml/using/alpha/compound/mapping-with-slug-keys)\n- [using a yaml object of a parsed mapping](https://hitchdev.com/strictyaml/using/alpha/compound/mapping-yaml-object)\n- [mappings with defined keys (map)](https://hitchdev.com/strictyaml/using/alpha/compound/mapping)\n- [optional keys with defaults (map/optional)](https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys-with-defaults)\n- [validating optional keys in mappings (map)](https://hitchdev.com/strictyaml/using/alpha/compound/optional-keys)\n- [sequences of unique items (uniqueseq)](https://hitchdev.com/strictyaml/using/alpha/compound/sequences-of-unique-items)\n- [sequence/list validator (seq)](https://hitchdev.com/strictyaml/using/alpha/compound/sequences)\n- [updating document with a schema](https://hitchdev.com/strictyaml/using/alpha/compound/update)\n\n\nscalar validators:\n\n- [boolean (bool)](https://hitchdev.com/strictyaml/using/alpha/scalar/boolean)\n- [parsing comma separated items (commaseparated)](https://hitchdev.com/strictyaml/using/alpha/scalar/comma-separated)\n- [datetimes (datetime)](https://hitchdev.com/strictyaml/using/alpha/scalar/datetime)\n- [decimal numbers (decimal)](https://hitchdev.com/strictyaml/using/alpha/scalar/decimal)\n- [email and url validators](https://hitchdev.com/strictyaml/using/alpha/scalar/email-and-url)\n- [empty key validation](https://hitchdev.com/strictyaml/using/alpha/scalar/empty)\n- [enumerated scalars (enum)](https://hitchdev.com/strictyaml/using/alpha/scalar/enum)\n- [floating point numbers (float)](https://hitchdev.com/strictyaml/using/alpha/scalar/float)\n- [hexadecimal integers (hexint)](https://hitchdev.com/strictyaml/using/alpha/scalar/hexadecimal-integer)\n- [integers (int)](https://hitchdev.com/strictyaml/using/alpha/scalar/integer)\n- [validating strings with regexes (regex)](https://hitchdev.com/strictyaml/using/alpha/scalar/regular-expressions)\n- [parsing strings (str)](https://hitchdev.com/strictyaml/using/alpha/scalar/string)\n\n\nrestrictions:\n\n- [disallowed yaml](https://hitchdev.com/strictyaml/using/alpha/restrictions/disallowed-yaml)\n- [duplicate keys](https://hitchdev.com/strictyaml/using/alpha/restrictions/duplicate-keys)\n- [dirty load](https://hitchdev.com/strictyaml/using/alpha/restrictions/loading-dirty-yaml)\n\n\n\n## design justifications\n\nthere are some design decisions in strictyaml which are controversial\nand/or not obvious. those are documented here:\n\n- [what is wrong with duplicate keys?](https://hitchdev.com/strictyaml/why/duplicate-keys-disallowed)\n- [what is wrong with explicit tags?](https://hitchdev.com/strictyaml/why/explicit-tags-removed)\n- [what is wrong with flow-style yaml?](https://hitchdev.com/strictyaml/why/flow-style-removed)\n- [the norway problem - why strictyaml refuses to do implicit typing and so should you](https://hitchdev.com/strictyaml/why/implicit-typing-removed)\n- [what is wrong with node anchors and references?](https://hitchdev.com/strictyaml/why/node-anchors-and-references-removed)\n- [why does strictyaml not parse direct representations of python objects?](https://hitchdev.com/strictyaml/why/not-parse-direct-representations-of-python-objects)\n- [why does strictyaml only parse from strings and not files?](https://hitchdev.com/strictyaml/why/only-parse-strings-not-files)\n- [why is parsing speed not a high priority for strictyaml?](https://hitchdev.com/strictyaml/why/speed-not-a-priority)\n- [what is syntax typing?](https://hitchdev.com/strictyaml/why/syntax-typing-bad)\n- [why does strictyaml make you define a schema in python - a turing-complete language?](https://hitchdev.com/strictyaml/why/turing-complete-schema)\n\n\n\n## star contributors\n\n- @wwoods\n- @chrisburr\n- @jnichols0\n\n## other contributors\n\n- @eulores\n- @waltwoods\n- @christophergs\n- @gvx\n- @alexandredecan\n- @lots0logs\n- @tobbez\n- @jaredsampson\n- @bobotig\n\nstrictyaml also includes code from [ruamel.yaml](https://yaml.readthedocs.io/en/latest/), copyright anthon van der neut.\n\n## contributing\n\n- before writing any code, please read the tutorial on [contributing to hitchdev libraries](https://hitchdev.com/approach/contributing-to-hitch-libraries/).\n- before writing any code, if you're proposing a new feature, please raise it on github. if it's an existing feature / bug, please comment and briefly describe how you're going to implement it.\n- all code needs to come accompanied with a story that exercises it or a modification to an existing story. this is used both to test the code and build the documentation.\n",
  "docs_url": null,
  "keywords": "yaml",
  "license": "mit",
  "name": "strictyaml",
  "package_url": "https://pypi.org/project/strictyaml/",
  "project_url": "https://pypi.org/project/strictyaml/",
  "project_urls": {
    "changelog": "https://hitchdev.com/strictyaml/changelog",
    "documentation": "https://hitchdev.com/strictyaml/using",
    "homepage": "https://hitchdev.com/strictyaml",
    "repository": "https://github.com/crdoconnor/strictyaml"
  },
  "release_url": "https://pypi.org/project/strictyaml/1.7.3/",
  "requires_dist": [
    "python-dateutil (>=2.6.0)"
  ],
  "requires_python": ">=3.7.0",
  "summary": "strict, typed yaml parser",
  "version": "1.7.3",
  "releases": [],
  "developers": [
    "colm.oconnor.github@gmail.com"
  ],
  "kwds": "yaml_snippet yaml type_safety as_yaml strictyaml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_strictyaml",
  "homepage": "",
  "release_count": 83,
  "dependency_ids": [
    "pypi_python_dateutil"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: console :: curses",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: user interfaces",
    "topic :: terminals",
    "topic :: text processing :: general"
  ],
  "description": "asciimatics\n===========\n\nasciimatics is a package to help people create full-screen text uis (from interactive forms to\nascii animations) on any platform.  it is licensed under the apache software foundation license 2.0.\n\nwhy?\n----\n\nwhy not?  it brings a little joy to anyone who was programming in the 80s...  oh and it provides a\nsingle cross-platform python class to do all the low-level console function you could ask for,\nincluding:\n\n* coloured/styled text - including 256 colour terminals and unicode characters (even cjk languages)\n* cursor positioning\n* keyboard input (without blocking or echoing) including unicode support\n* mouse input (terminal permitting)\n* detecting and handling when the console resizes\n* screen scraping\n\nin addition, it provides some simple, high-level apis to provide more complex features including:\n\n* anti-aliased ascii line-drawing\n* image to ascii conversion - including jpeg and gif formats\n* many animation effects - e.g. sprites, particle systems, banners, etc.\n* various widgets for text uis - e.g. buttons, text boxes, radio buttons, etc.\n\ncurrently this package has been proven to work on centos 6 & 7, raspbian (i.e. debian wheezy),\nubuntu 14.04, windows 7, 8 & 10, osx 10.11 and android marshmallow (courtesy of https://termux.com),\nthough it should also work for any other platform that provides a working curses implementation.\n\nit should be implementation agnostic and has been successfully tested on cpython and pypy2.\n\n(please let me know if you successfully verified it on other platforms so that i can update this\nlist).\n\ninstallation\n------------\n\nasciimatics supports python version 3.  for the precise list of tested versions,\nrefer to `pypi <https://pypi.python.org/pypi/asciimatics>`_.  the last version of asciimatics\nto support python 2 is v1.14.\n\nto install asciimatics, simply install with `pip` as follows:\n\n.. code-block:: bash\n\n    $ pip install asciimatics\n\nthis should install all your dependencies for you.  if you don't use pip or it fails to install\nthem, you can install the dependencies directly using the packages listed in `requirements.txt\n<https://github.com/peterbrittain/asciimatics/blob/master/requirements.txt>`_.\nadditionally, windows users (who aren't using `pip`) will need to install `pywin32`.\n\nhow to use it?\n--------------\nto use the low-level api, simply create a screen and use it to print coloured text at any location,\nor get mouse/keyboard input.  for example, here is a variant on the classic \"hello world\":\n\n.. code-block:: python\n\n    from random import randint\n    from asciimatics.screen import screen\n\n    def demo(screen):\n        while true:\n            screen.print_at('hello world!',\n                            randint(0, screen.width), randint(0, screen.height),\n                            colour=randint(0, screen.colours - 1),\n                            bg=randint(0, screen.colours - 1))\n            ev = screen.get_key()\n            if ev in (ord('q'), ord('q')):\n                return\n            screen.refresh()\n\n    screen.wrapper(demo)\n\nthat same code works on windows, osx and linux and paves the way for all the higher level features.\nthese still need the screen, but now you also create a scene using some effects and then get the\nscreen to play it.  for example, this code:\n\n.. code-block:: python\n\n    from asciimatics.effects import cycle, stars\n    from asciimatics.renderers import figlettext\n    from asciimatics.scene import scene\n    from asciimatics.screen import screen\n\n    def demo(screen):\n        effects = [\n            cycle(\n                screen,\n                figlettext(\"asciimatics\", font='big'),\n                int(screen.height / 2 - 8)),\n            cycle(\n                screen,\n                figlettext(\"rocks!\", font='big'),\n                int(screen.height / 2 + 3)),\n            stars(screen, 200)\n        ]\n        screen.play([scene(effects, 500)])\n\n    screen.wrapper(demo)\n\nshould produce something like this:\n\n.. image:: https://asciinema.org/a/18756.png\n   :alt: asciicast\n   :target: https://asciinema.org/a/18756?autoplay=1\n\nor maybe you're looking to create a tui?  in which case this\n`simple code <https://github.com/peterbrittain/asciimatics/blob/master/samples/contact_list.py>`__\nwill give you this:\n\n.. image:: https://asciinema.org/a/45946.png\n    :alt: contact list sample\n    :target: https://asciinema.org/a/45946?autoplay=1\n\ndocumentation\n-------------\n\nfull documentation of all the above (and more!) is available at http://asciimatics.readthedocs.org/\n\nmore examples\n-------------\n\nmore examples of what you can do are available in the project samples directory, hosted on github.\nsee https://github.com/peterbrittain/asciimatics/tree/v1.15/samples.\n\nto view them, simply download these files and then simply run them directly with `python`.\nalternatively, you can browse recordings of many of the samples in the gallery at\nhttps://github.com/peterbrittain/asciimatics/wiki.\n\nbugs and enhancements\n---------------------\n\nif you have a problem, please check out the troubleshooting guide at\nhttp://asciimatics.readthedocs.io/en/latest/troubleshooting.html.  if this doesn't solve your\nproblem, you can report bugs (or submit enhancement requests) at\nhttps://github.com/peterbrittain/asciimatics/issues.\n\nalternatively, if you just have some questions, feel free to drop in at\nhttps://gitter.im/asciimatics/lobby.\n\ncontributing to the project\n---------------------------\n\nif you'd like to take part in this project (and see your name in the credits!), check out the\nguidance at http://asciimatics.readthedocs.org/en/latest/contributing.html\n\n",
  "docs_url": null,
  "keywords": "ascii ansi art credits titles animation curses ncurses windows xterm mouse keyboard terminal tty color colour crossplatform console",
  "license": "apache 2.0",
  "name": "asciimatics",
  "package_url": "https://pypi.org/project/asciimatics/",
  "project_url": "https://pypi.org/project/asciimatics/",
  "project_urls": {
    "Homepage": "https://github.com/peterbrittain/asciimatics"
  },
  "release_url": "https://pypi.org/project/asciimatics/1.15.0/",
  "requires_dist": [
    "pyfiglet >=0.7.2",
    "Pillow >=2.7.0",
    "wcwidth",
    "pywin32 ; sys_platform == \"win32\""
  ],
  "requires_python": ">= 3.8",
  "summary": "a cross-platform package to replace curses (mouse/keyboard input & text colours/positioning) and create ascii animations",
  "version": "1.15.0",
  "releases": [],
  "developers": [
    "peter.brittain.os@gmail.com",
    "peter_brittain"
  ],
  "kwds": "ascii asciimatics unicode tty interactive",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_asciimatics",
  "homepage": "https://github.com/peterbrittain/asciimatics",
  "release_count": 24,
  "dependency_ids": [
    "pypi_pillow",
    "pypi_pyfiglet",
    "pypi_pywin32",
    "pypi_wcwidth"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "<br>\n<div align=\"center\"><a href=\"https://www.union.ai/pandera\"><img src=\"docs/source/_static/pandera-banner.png\" width=\"400\"></a></div>\n\n<h1 align=\"center\">\n  the open-source framework for precision data testing\n</h1>\n\n<p align=\"center\">\n  \ud83d\udcca \ud83d\udd0e \u2705\n</p>\n\n<p align=\"center\">\n  <i>data validation for scientists, engineers, and analysts seeking correctness.</i>\n</p>\n\n<br>\n\n\n[![ci build](https://img.shields.io/github/actions/workflow/status/unionai-oss/pandera/ci-tests.yml?branch=main&label=tests&style=for-the-badge)](https://github.com/unionai-oss/pandera/actions/workflows/ci-tests.yml?query=branch%3amain)\n[![documentation status](https://readthedocs.org/projects/pandera/badge/?version=stable&style=for-the-badge)](https://pandera.readthedocs.io/en/stable/?badge=stable)\n[![pypi version shields.io](https://img.shields.io/pypi/v/pandera.svg?style=for-the-badge)](https://pypi.org/project/pandera/)\n[![pypi license](https://img.shields.io/pypi/l/pandera.svg?style=for-the-badge)](https://pypi.python.org/pypi/)\n[![pyopensci](https://go.union.ai/pandera-pyopensci-badge)](https://github.com/pyopensci/software-review/issues/12)\n[![project status: active \u2013 the project has reached a stable, usable state and is being actively developed.](https://img.shields.io/badge/repo%20status-active-green?style=for-the-badge)](https://www.repostatus.org/#active)\n[![documentation status](https://readthedocs.org/projects/pandera/badge/?version=latest&style=for-the-badge)](https://pandera.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://img.shields.io/codecov/c/github/unionai-oss/pandera?style=for-the-badge)](https://codecov.io/gh/unionai-oss/pandera)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/pandera.svg?style=for-the-badge)](https://pypi.python.org/pypi/pandera/)\n[![doi](https://img.shields.io/badge/doi-10.5281/zenodo.3385265-blue?style=for-the-badge)](https://doi.org/10.5281/zenodo.3385265)\n[![asv](http://img.shields.io/badge/benchmarked%20by-asv-green.svg?style=for-the-badge)](https://pandera-dev.github.io/pandera-asv-logs/)\n[![monthly downloads](https://img.shields.io/pypi/dm/pandera?style=for-the-badge&color=blue)](https://pepy.tech/project/pandera)\n[![total downloads](https://img.shields.io/pepy/dt/pandera?style=for-the-badge&color=blue)](https://pepy.tech/project/pandera)\n[![conda downloads](https://img.shields.io/conda/dn/conda-forge/pandera?style=for-the-badge)](https://anaconda.org/conda-forge/pandera)\n[![discord](https://img.shields.io/badge/discord-chat-purple?color=%235765f2&label=discord&logo=discord&style=for-the-badge)](https://discord.gg/vyanhwuakb)\n\n`pandera` is a [union.ai](https://union.ai/blog-post/pandera-joins-union-ai) open\nsource project that provides a flexible and expressive api for performing data\nvalidation on dataframe-like objects to make data processing pipelines more readable and robust.\n\ndataframes contain information that `pandera` explicitly validates at runtime.\nthis is useful in production-critical or reproducible research settings. with\n`pandera`, you can:\n\n1. define a schema once and use it to validate\n   [different dataframe types](https://pandera.readthedocs.io/en/stable/supported_libraries.html)\n   including [pandas](http://pandas.pydata.org), [dask](https://dask.org),\n   [modin](https://modin.readthedocs.io/), and [pyspark](https://spark.apache.org/docs/3.2.0/api/python/user_guide/pandas_on_spark/index.html).\n1. [check](https://pandera.readthedocs.io/en/stable/checks.html) the types and\n   properties of columns in a `dataframe` or values in a `series`.\n1. perform more complex statistical validation like\n   [hypothesis testing](https://pandera.readthedocs.io/en/stable/hypothesis.html#hypothesis).\n1. seamlessly integrate with existing data analysis/processing pipelines\n   via [function decorators](https://pandera.readthedocs.io/en/stable/decorators.html#decorators).\n1. define dataframe models with the\n   [class-based api](https://pandera.readthedocs.io/en/stable/dataframe_models.html#dataframe-models)\n   with pydantic-style syntax and validate dataframes using the typing syntax.\n1. [synthesize data](https://pandera.readthedocs.io/en/stable/data_synthesis_strategies.html#data-synthesis-strategies)\n   from schema objects for property-based testing with pandas data structures.\n1. [lazily validate](https://pandera.readthedocs.io/en/stable/lazy_validation.html)\n   dataframes so that all validation checks are executed before raising an error.\n1. [integrate](https://pandera.readthedocs.io/en/stable/integrations.html) with\n   a rich ecosystem of python tools like [pydantic](https://pydantic-docs.helpmanual.io),\n   [fastapi](https://fastapi.tiangolo.com/), and [mypy](http://mypy-lang.org/).\n\n## documentation\n\nthe official documentation is hosted here: https://pandera.readthedocs.io\n\n\n## install\n\nusing pip:\n\n```\npip install pandera\n```\n\nusing conda:\n\n```\nconda install -c conda-forge pandera\n```\n\n### extras\n\ninstalling additional functionality:\n\n<details>\n\n<summary><i>pip</i></summary>\n\n```bash\npip install pandera[hypotheses]  # hypothesis checks\npip install pandera[io]          # yaml/script schema io utilities\npip install pandera[strategies]  # data synthesis strategies\npip install pandera[mypy]        # enable static type-linting of pandas\npip install pandera[fastapi]     # fastapi integration\npip install pandera[dask]        # validate dask dataframes\npip install pandera[pyspark]     # validate pyspark dataframes\npip install pandera[modin]       # validate modin dataframes\npip install pandera[modin-ray]   # validate modin dataframes with ray\npip install pandera[modin-dask]  # validate modin dataframes with dask\npip install pandera[geopandas]   # validate geopandas geodataframes\n```\n\n</details>\n\n<details>\n\n<summary><i>conda</i></summary>\n\n```bash\nconda install -c conda-forge pandera-hypotheses  # hypothesis checks\nconda install -c conda-forge pandera-io          # yaml/script schema io utilities\nconda install -c conda-forge pandera-strategies  # data synthesis strategies\nconda install -c conda-forge pandera-mypy        # enable static type-linting of pandas\nconda install -c conda-forge pandera-fastapi     # fastapi integration\nconda install -c conda-forge pandera-dask        # validate dask dataframes\nconda install -c conda-forge pandera-pyspark     # validate pyspark dataframes\nconda install -c conda-forge pandera-modin       # validate modin dataframes\nconda install -c conda-forge pandera-modin-ray   # validate modin dataframes with ray\nconda install -c conda-forge pandera-modin-dask  # validate modin dataframes with dask\nconda install -c conda-forge pandera-geopandas   # validate geopandas geodataframes\n```\n\n</details>\n\n## quick start\n\n```python\nimport pandas as pd\nimport pandera as pa\n\n\n# data to validate\ndf = pd.dataframe({\n    \"column1\": [1, 4, 0, 10, 9],\n    \"column2\": [-1.3, -1.4, -2.9, -10.1, -20.4],\n    \"column3\": [\"value_1\", \"value_2\", \"value_3\", \"value_2\", \"value_1\"]\n})\n\n# define schema\nschema = pa.dataframeschema({\n    \"column1\": pa.column(int, checks=pa.check.le(10)),\n    \"column2\": pa.column(float, checks=pa.check.lt(-1.2)),\n    \"column3\": pa.column(str, checks=[\n        pa.check.str_startswith(\"value_\"),\n        # define custom checks as functions that take a series as input and\n        # outputs a boolean or boolean series\n        pa.check(lambda s: s.str.split(\"_\", expand=true).shape[1] == 2)\n    ]),\n})\n\nvalidated_df = schema(df)\nprint(validated_df)\n\n#     column1  column2  column3\n#  0        1     -1.3  value_1\n#  1        4     -1.4  value_2\n#  2        0     -2.9  value_3\n#  3       10    -10.1  value_2\n#  4        9    -20.4  value_1\n```\n\n## dataframe model\n\n`pandera` also provides an alternative api for expressing schemas inspired\nby [dataclasses](https://docs.python.org/3/library/dataclasses.html) and\n[pydantic](https://pydantic-docs.helpmanual.io/). the equivalent `dataframemodel`\nfor the above `dataframeschema` would be:\n\n\n```python\nfrom pandera.typing import series\n\nclass schema(pa.dataframemodel):\n\n    column1: int = pa.field(le=10)\n    column2: float = pa.field(lt=-1.2)\n    column3: str = pa.field(str_startswith=\"value_\")\n\n    @pa.check(\"column3\")\n    def column_3_check(cls, series: series[str]) -> series[bool]:\n        \"\"\"check that values have two elements after being split with '_'\"\"\"\n        return series.str.split(\"_\", expand=true).shape[1] == 2\n\nschema.validate(df)\n```\n\n## development installation\n\n```\ngit clone https://github.com/pandera-dev/pandera.git\ncd pandera\nexport python_version=...  # specify desired python version\npip install -r dev/requirements-${python_version}.txt\npip install -e .\n```\n\n## tests\n\n```\npip install pytest\npytest tests\n```\n\n## contributing to pandera [![github contributors](https://img.shields.io/github/contributors/pandera-dev/pandera.svg?style=for-the-badge)](https://github.com/pandera-dev/pandera/graphs/contributors)\n\nall contributions, bug reports, bug fixes, documentation improvements,\nenhancements and ideas are welcome.\n\na detailed overview on how to contribute can be found in the\n[contributing guide](https://github.com/pandera-dev/pandera/blob/main/.github/contributing.md)\non github.\n\n## issues\n\ngo [here](https://github.com/pandera-dev/pandera/issues) to submit feature\nrequests or bugfixes.\n\n## need help?\n\nthere are many ways of getting help with your questions. you can ask a question\non [github discussions](https://github.com/pandera-dev/pandera/discussions/categories/q-a)\npage or reach out to the maintainers and pandera community on\n[discord](https://discord.gg/vyanhwuakb)\n\n## why `pandera`?\n\n- [dataframe-centric data types](https://pandera.readthedocs.io/en/stable/dtypes.html),\n  [column nullability](https://pandera.readthedocs.io/en/stable/dataframe_schemas.html#null-values-in-columns),\n  and [uniqueness](https://pandera.readthedocs.io/en/stable/dataframe_schemas.html#validating-the-joint-uniqueness-of-columns)\n  are first-class concepts.\n- define [dataframe models](https://pandera.readthedocs.io/en/stable/schema_models.html) with the class-based api with\n  [pydantic](https://pydantic-docs.helpmanual.io/)-style syntax and validate dataframes using the typing syntax.\n- `check_input` and `check_output` [decorators](https://pandera.readthedocs.io/en/stable/decorators.html#decorators-for-pipeline-integration)\n  enable seamless integration with existing code.\n- [`check`s](https://pandera.readthedocs.io/en/stable/checks.html) provide flexibility and performance by providing access to `pandas`\n  api by design and offers built-in checks for common data tests.\n- [`hypothesis`](https://pandera.readthedocs.io/en/stable/hypothesis.html) class provides a tidy-first interface for statistical hypothesis\n  testing.\n- `check`s and `hypothesis` objects support both [tidy and wide data validation](https://pandera.readthedocs.io/en/stable/checks.html#wide-checks).\n- use schemas as generative contracts to [synthesize data](https://pandera.readthedocs.io/en/stable/data_synthesis_strategies.html) for unit testing.\n- [schema inference](https://pandera.readthedocs.io/en/stable/schema_inference.html) allows you to bootstrap schemas from data.\n\n## how to cite\n\nif you use `pandera` in the context of academic or industry research, please\nconsider citing the **paper** and/or **software package**.\n\n### [paper](https://conference.scipy.org/proceedings/scipy2020/niels_bantilan.html)\n\n```\n@inproceedings{ niels_bantilan-proc-scipy-2020,\n  author    = { {n}iels {b}antilan },\n  title     = { pandera: {s}tatistical {d}ata {v}alidation of {p}andas {d}ataframes },\n  booktitle = { {p}roceedings of the 19th {p}ython in {s}cience {c}onference },\n  pages     = { 116 - 124 },\n  year      = { 2020 },\n  editor    = { {m}eghann {a}garwal and {c}hris {c}alloway and {d}illon {n}iederhut and {d}avid {s}hupe },\n  doi       = { 10.25080/majora-342d178e-010 }\n}\n```\n\n### software package\n\n[![doi](https://img.shields.io/badge/doi-10.5281/zenodo.3385265-blue?style=for-the-badge)](https://doi.org/10.5281/zenodo.3385265)\n\n\n## license and credits\n\n`pandera` is licensed under the [mit license](license.txt) and is written and\nmaintained by niels bantilan (niels@pandera.ci)\n",
  "docs_url": null,
  "keywords": "pandas,validation,data-structures",
  "license": "mit",
  "name": "pandera",
  "package_url": "https://pypi.org/project/pandera/",
  "project_url": "https://pypi.org/project/pandera/",
  "project_urls": {
    "Documentation": "https://pandera.readthedocs.io",
    "Homepage": "https://github.com/pandera-dev/pandera",
    "Issue Tracker": "https://github.com/pandera-dev/pandera/issues"
  },
  "release_url": "https://pypi.org/project/pandera/0.18.0/",
  "requires_dist": [
    "multimethod",
    "numpy >=1.19.0",
    "packaging >=20.0",
    "pandas >=1.2.0",
    "pydantic",
    "typeguard >=3.0.2",
    "typing-inspect >=0.6.0",
    "wrapt",
    "typing-extensions >=3.7.4.3 ; python_version < \"3.8\"",
    "black ; extra == 'all'",
    "pyyaml >=5.1 ; extra == 'all'",
    "hypothesis >=5.41.1 ; extra == 'all'",
    "shapely ; extra == 'all'",
    "scipy ; extra == 'all'",
    "pyspark >=3.2.0 ; extra == 'all'",
    "pandas-stubs ; extra == 'all'",
    "fastapi ; extra == 'all'",
    "ray ; extra == 'all'",
    "dask ; extra == 'all'",
    "geopandas ; extra == 'all'",
    "frictionless <=4.40.8 ; extra == 'all'",
    "modin ; extra == 'all'",
    "dask ; extra == 'dask'",
    "fastapi ; extra == 'fastapi'",
    "geopandas ; extra == 'geopandas'",
    "shapely ; extra == 'geopandas'",
    "scipy ; extra == 'hypotheses'",
    "pyyaml >=5.1 ; extra == 'io'",
    "black ; extra == 'io'",
    "frictionless <=4.40.8 ; extra == 'io'",
    "modin ; extra == 'modin'",
    "ray ; extra == 'modin'",
    "dask ; extra == 'modin'",
    "modin ; extra == 'modin-dask'",
    "dask ; extra == 'modin-dask'",
    "modin ; extra == 'modin-ray'",
    "ray ; extra == 'modin-ray'",
    "pandas-stubs ; extra == 'mypy'",
    "pyspark >=3.2.0 ; extra == 'pyspark'",
    "hypothesis >=5.41.1 ; extra == 'strategies'"
  ],
  "requires_python": ">=3.7",
  "summary": "a light-weight and flexible data validation and testing tool for statistical data objects.",
  "version": "0.18.0",
  "releases": [],
  "developers": [
    "niels.bantilan@gmail.com",
    "niels_bantilan"
  ],
  "kwds": "validated_df validation pandas pandera validating",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pandera",
  "homepage": "https://github.com/pandera-dev/pandera",
  "release_count": 79,
  "dependency_ids": [
    "pypi_black",
    "pypi_dask",
    "pypi_fastapi",
    "pypi_frictionless",
    "pypi_geopandas",
    "pypi_hypothesis",
    "pypi_modin",
    "pypi_multimethod",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pandas_stubs",
    "pypi_pydantic",
    "pypi_pyspark",
    "pypi_pyyaml",
    "pypi_ray",
    "pypi_scipy",
    "pypi_shapely",
    "pypi_typeguard",
    "pypi_typing_extensions",
    "pypi_typing_inspect",
    "pypi_wrapt"
  ]
}
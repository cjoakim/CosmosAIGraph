{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: project status: active \u2014 the project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://github.com/jwodder/check-wheel-contents/workflows/test/badge.svg?branch=master\n    :target: https://github.com/jwodder/check-wheel-contents/actions?workflow=test\n    :alt: ci status\n\n.. image:: https://codecov.io/gh/jwodder/check-wheel-contents/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/check-wheel-contents\n\n.. image:: https://img.shields.io/pypi/pyversions/check-wheel-contents.svg\n    :target: https://pypi.org/project/check-wheel-contents/\n\n.. image:: https://img.shields.io/github/license/jwodder/check-wheel-contents.svg\n    :target: https://opensource.org/licenses/mit\n    :alt: mit license\n\n`github <https://github.com/jwodder/check-wheel-contents>`_\n| `pypi <https://pypi.org/project/check-wheel-contents/>`_\n| `issues <https://github.com/jwodder/check-wheel-contents/issues>`_\n| `changelog <https://github.com/jwodder/check-wheel-contents/blob/master/changelog.md>`_\n\ngetting the right files into your wheel is tricky, and sometimes we mess up and\npublish a wheel containing ``__pycache__`` directories or ``tests/``.  do we\nhave to manually check the contents of every wheel we build before uploading it\nto pypi?  how about letting this program check for you?  just run\n``check-wheel-contents`` on your wheel, and it'll fail and notify you if any of\nseveral common errors & mistakes are detected.  the errors are described below,\nalong with common causes and corresponding fixes.\n\ninstallation\n============\n``check-wheel-contents`` requires python 3.7 or higher.  just use `pip\n<https://pip.pypa.io>`_ for python 3 (you have pip, right?) to install\n``check-wheel-contents`` and its dependencies::\n\n    python3 -m pip install check-wheel-contents\n\n\nusage\n=====\n\n::\n\n    check-wheel-contents [<options>] <wheel or directory> ...\n\n``check-wheel-contents`` takes zero or more paths as arguments, each pointing\nto either a wheel to analyze or a directory that will be traversed for wheels\nto analyze.  if a given wheel fails any checks, a message will be printed for\neach check along with (if applicable) a list of filepaths in the wheel causing\nthe check to fail, and the command will exit with a nonzero status.  if a wheel\npasses all checks, the program will print ``{path_to_wheel}: ok``.\n\noptions\n-------\n\n-c file, --config file  read configuration from the given file; see below for\n                        more information\n\n--no-config             disable reading from the configuration file\n\n-h, --help              display a usage message and exit\n\n-v, --version           display the program version and exit\n\nthe remaining options can be given either on the command line or in the\nconfiguration file; see \"`configuration options`_\" for more information.\n\n\nconfiguration\n=============\n\nconfiguration file\n------------------\n\nif a configuration file is specified on the command line with the ``--config``\noption, ``check-wheel-contents`` reads its configuration from the given file.\nfiles with a ``.toml`` extension are parsed as toml files, and the\nconfiguration is read from the ``tool.check-wheel-contents`` table.  all other\nfiles are parsed as ini files, and their configuration is read from the\n``[check-wheel-contents]`` section (unless the file is named ``setup.cfg``, in\nwhich case the section ``[tool:check-wheel-contents]`` is used instead).\n\nif no configuration file is specified on the command line, the program begins\nsearching for a file named ``pyproject.toml``, ``tox.ini``, ``setup.cfg``,\n``check-wheel-contents.cfg``, or ``.check-wheel-contents.cfg``, starting in the\ncurrent directory and going up.  the files are read using the same rules as for\nthe ``--config`` option, and the first file in the list that contains the\nappropriate section is used.  searching stops once a directory containing any\nof the named files is found, even if none of them contain the relevant section.\n\nconfiguration options\n---------------------\n\nthe following options may be set either on the command line or in the\nconfiguration file.  settings given on the command line override those in the\nconfiguration file.  unknown keys in configuration files are ignored.\n\n``--select <checks>`` / ``select = <checks>``\n   select/enable only the given checks.  ``<checks>`` is a comma-separated list\n   of check ids and/or check id prefixes (to select all checks beginning with\n   the given prefixes).\n\n   in a toml file, ``<checks>`` may alternatively be given as a list of\n   strings.\n\n   by default, all checks are selected (though some checks are no-ops when\n   certain other options are/aren't given).\n\n``--ignore <checks>`` / ``ignore = <checks>``\n   ignore/skip the given checks.  ``<checks>`` is a comma-separated list of\n   check ids and/or check id prefixes (to ignore all checks beginning with the\n   given prefixes).\n\n   in a toml file, ``<checks>`` may alternatively be given as a list of\n   strings.\n\n   by default, no checks are ignored.\n\n``--toplevel <names>`` / ``toplevel = <names>``\n   tell ``check-wheel-contents`` to check that the toplevel library entries of\n   the wheel equal the set of names in the comma-separated list ``<names>``;\n   e.g., ``--toplevel foo.py,bar/`` checks that ``foo.py``, ``bar``, and\n   nothing else is at the top level of your wheel.  trailing slashes on\n   directory names are optional.\n\n   in a toml file, ``<names>`` may alternatively be given as a list of strings.\n\n   this option disables check w009 and enables checks w201 and w202.  it is\n   also used by check w005 to prevent failure on common names that are\n   intentionally used as toplevel names.\n\n``--package <path>`` / ``package = <paths>``\n   tell ``check-wheel-contents`` to check that the wheel's library sections\n   contain the file tree rooted at ``<path>``.\n\n   paths given on the command line are resolved relative to the current working\n   directory.  paths given in a configuration file are resolved relative to the\n   directory containing the configuration file.\n\n   on the command line, multiple paths can be specified by supplying\n   ``--package`` multiple times.  in a configuration file, multiple paths can\n   be specified by setting ``package`` to a comma-separated list of paths.  in\n   a toml file, ``<paths>`` may alternatively be given as a list of strings.\n\n   this option disables check w009 and enables checks w101 and w102.\n\n``--src-dir <path>`` / ``src_dir = <paths>``\n   the same as ``--package``, except that only the contents of ``<path>``\n   (which must be a directory) and not ``<path>`` itself are checked against\n   the wheel's contents.\n\n``--package-omit <patterns>`` / ``package_omit = <patterns>``\n   ignore files & directories inside ``--package`` or ``--src-dir`` arguments\n   that match any of the glob patterns in the comma-separated list\n   ``<patterns>``.  ignored files will not be looked for in wheels for check\n   w101, and if any of them do show up in a wheel, it will cause check w102 to\n   fail.\n\n   in a toml file, ``<patterns>`` may alternatively be given as a list of\n   strings.\n\n   the default set of ignored patterns is ``.*, cvs, rcs, *.pyc, *.pyo,\n   *.egg-info``.\n\n\nchecks\n======\n\n**note**: unless otherwise stated, the common causes and their fixes listed\nhere are specific to projects developed using setuptools.  users of other tools\nlike flit and poetry will have to consult those projects' documentation in\norder to resolve failed checks.\n\n**note**: when rebuilding a wheel with setuptools, it is a good idea to delete\nthe ``build/`` directory first.  (this can be done in a single command with\n``python setup.py clean --all bdist_wheel``.)  not doing this can cause various\nchecks to continue to fail or new ones to start failing.\n\n\nw001 \u2014 wheel contains .pyc/.pyo files\n-------------------------------------\nthis check fails if there are any files in the wheel with a ``.pyc`` or\n``.pyo`` extension.  such files are compiled python bytecode files, and they do\nnot belong in wheels, because (a) they are platform-specific and thus useless\nto many of your users, and (b) pip generates ``.pyc`` files for the ``.py``\nfiles in your wheel automatically.\n\ncommon causes:\n\n- you have ``include_package_data`` set to ``true``, your ``manifest.in``\n  contains ``graft packagename`` or ``recursive-include packagename *``, and\n  the line ``global-exclude *.py[co]`` or similar is either missing from the\n  ``manifest.in`` or else in the wrong location.\n\n  **solution**: ensure that ``global-exclude *.py[co]`` appears in your\n  ``manifest.in`` file *after* all ``include``, ``recursive-include``,\n  ``global-include``, and ``graft`` commands.\n\n- you have ``[install]optimize = 1`` set in ``setup.cfg`` (or, equivalently,\n  ``options={\"install\": {\"optimize\": \"1\"}}`` set in ``setup.py``).\n\n  **solution**: remove this setting.  it's only useful when using ``setup.py\n  install`` anyway, which is deprecated.\n\n\nw002 \u2014 wheel contains duplicate files\n-------------------------------------\nthis check fails if any two files in the wheel have the same contents.  common\nfile contents, such as files that are empty or just contain the line \"``# -*-\ncoding: utf-8 -*-``\", are excluded from this check.\n\ncommon causes:\n\n- *(build tool agnostic)* you copied a file or directory when you actually\n  meant to rename it.\n\n  **solution**: delete the original copy of the file or directory.\n\n- you built a wheel, renamed a file or directory, and then built a wheel again\n  without first deleting the ``build/`` directory.\n\n  **solution**: delete the ``build/`` directory and build the wheel again.\n\n\nw003 \u2014 wheel contains non-module at library toplevel\n----------------------------------------------------\nthis check fails if there are any files at the root of the purelib or platlib\nsection of the wheel that are not python modules or ``.pth`` files.\nnon-modules belong elsewhere in a wheel:\n\n- licenses and similar notices should be stored in the wheel's ``*.dist-info``\n  directory using ``wheel``'s ``license_files`` option.\n\n- package data/resource files belong inside a package directory so that they\n  can be located with ``pkg_resources`` or ``importlib-resources``.\n\n- a project's ``readme`` should already be used as the project's\n  ``long_description``, in which case the text of the ``readme`` is already\n  included in the wheel inside the ``*.dist-info/metadata`` file.  there should\n  thus be no need to store the ``readme`` in the wheel's library sections.\n\n\nw004 \u2014 module is not located at importable path\n-----------------------------------------------\nthis check fails if there are any python modules in the purelib or platlib\nsection of the wheel that cannot be imported due to one or more of their path\ncomponents being invalid python identifiers.\n\ncommon causes:\n\n- *(build tool agnostic)* you gave a package directory or module a name\n  containing a hyphen or other character not allowed in python identifiers.\n\n  **solution**: rename the offending directory or module to remove the\n  offending character, most likely by changing it to an underscore.\n\n- *(build tool agnostic)* you gave a package directory or module the name of a\n  python keyword.\n\n  **solution**: rename the offending directory or module.\n\n- *(build tool agnostic)* your package contains database migration files\n  generated by alembic or django, which (may) begin with numbers and thus do\n  not have valid python identifiers as names.\n\n  **solution**: ignore this check.  (ignoring checks only for specific files is\n  not yet implemented.)\n\n\nw005 \u2014 wheel contains common toplevel name in library\n-----------------------------------------------------\nthis check fails if there are any files or directories named ``.eggs``,\n``.nox``, ``.tox``, ``.venv``, ``app``, ``build``, ``cli``, ``data``, ``dist``,\n``doc``, ``docs``, ``example``, ``examples``, ``lib``, ``scripts``, ``src``,\n``test``, ``tests``, or ``venv`` located at the root of the purelib or platlib\nsection of the wheel.  these names are conventionally used for directories that\ndon't belong in wheels (aside from ``src``, whose contents belong in wheels but\nitself does not belong in a wheel).  projects should only use toplevel names\nthat resemble the project name; using common names will cause different\nprojects' files to overwrite each other on installation.\n\nif the ``--toplevel`` option is set, the names listed in the option will not\ncause this check to fail.\n\ncommon causes:\n\n- for ``src``: you failed to set up your ``src/`` layout correctly.  ``src``\n  should not contain an ``__init__.py`` file, ``where='src'`` needs to be\n  passed to ``setuptools.find_packages()`` in ``setup.py``, and\n  ``package_dir={\"\": \"src\"}`` needs to be passed to ``setup()`` in\n  ``setup.py``.\n\n- for directories other than ``src``: the directory contains an ``__init__.py``\n  file, and the directory is not listed in the ``exclude`` argument to\n  ``setuptools.find_packages()`` in ``setup.py``.\n\n  **solution**: include ``'dirname'`` and ``'dirname.*'`` in the list passed to\n  the ``exclude`` argument of ``find_packages()``.\n\n- for directories other than ``src``: the directory is listed in the\n  ``exclude`` argument to ``find_packages()``, but ``'dirname.*'`` is not, and\n  a subdirectory of the directory contains an ``__init__.py`` file.\n\n  **solution**: include ``'dirname.*'`` in the list passed to the ``exclude``\n  argument of ``find_packages()``.\n\n- you actually want to include your tests or examples in your wheel.\n\n  **solution**: move the tests or whatever to inside your main package\n  directory (e.g., move ``tests/`` to ``somepackage/tests/``) so that they\n  won't collide with other projects' files on installation.\n\n- you are actually making a package whose name is one of the listed names.\n\n  **solution**: include the name of your package in the ``--toplevel`` option\n  so that ``check-wheel-contents`` knows it's meant to be there.\n\n\nw006 \u2014 ``__init__.py`` at top level of library\n----------------------------------------------\nthis check fails if there is a file named ``__init__.py`` at the root of the\npurelib or platlib section of the wheel.  ``__init__.py`` files only belong\ninside package directories, not at the root of an installation.\n\ncommon causes:\n\n- you failed to set up your ``src/`` layout correctly.  ``src`` should not\n  contain an ``__init__.py`` file, ``where='src'`` needs to be passed to\n  ``setuptools.find_packages()`` in ``setup.py``, and ``package_dir={\"\":\n  \"src\"}`` needs to be passed to ``setup()`` in ``setup.py``.\n\n- you created an ``__init__.py`` file at the root of your project and set\n  ``packages='.'`` in ``setup.py``.\n\n  **solution**: configure your project's packages correctly.  for single-file\n  modules, pass a list of their names (without the ``.py`` extension) to the\n  ``py_modules`` argument to ``setup()``.  for package modules (directories),\n  pass a list of their names and the dotted names of their descendant\n  subpackages (possibly obtained by calling ``setuptools.find_packages()``) to\n  ``packages``.\n\n\nw007 \u2014 wheel library is empty\n-----------------------------\nthis check fails if the wheel contains no files in either its purelib or\nplatlib section.\n\ncommon causes:\n\n- your project consists of a single-file ``.py`` module, but you declared it to\n  ``setup()`` in ``setup.py`` using the ``packages`` keyword.\n\n  **solution**: single-file modules must be declared to ``setup()`` using the\n  ``py_modules`` keyword.  pass it a list of the names of your single-file\n  modules without the ``.py`` extension.\n\n- you are using ``setuptools.find_packages()`` to list your packages for\n  ``setup()``, but your package does not contain an ``__init__.py`` file.\n\n  **solution**: create an ``__init__.py`` file in your package.  if this is not\n  an option because you are building a namespace package, use\n  ``setuptools.find_namespace_packages()`` instead of ``find_packages()``.  be\n  sure to set the arguments appropriately so that the function only finds your\n  main package; `see the documentation for further information\n  <https://setuptools.readthedocs.io/en/latest/setuptools.html#find-namespace-packages>`_.\n\n- you're deliberately creating a wheel that only contains scripts, headers, or\n  other data files.\n\n  **solution**: ignore this check.\n\n\nw008 \u2014 wheel is empty\n---------------------\nthis check fails if the wheel contains no files other than the ``*.dist-info``\nmetadata directory.  it is a stronger check than w007, intended for users who\nare creating wheels that only contain scripts, headers, and other data files\nand thus need to ignore w007.\n\ncommon causes:\n\n- same causes as for w007\n\n- you're deliberately creating an empty wheel whose only function is to cause a\n  set of dependencies to be installed.\n\n  **solution**: ignore this check.\n\n\nw009 \u2014 wheel contains multiple toplevel library entries\n-------------------------------------------------------\nthis check fails if the wheel's purelib and platlib sections contain more than\none toplevel entry between them, excluding ``.pth`` files and files &\ndirectories that begin with an underscore.  this is generally a sign that\nsomething has gone wrong in packaging your project, as very few projects want\nto distribute code with multiple top-level modules or packages.\n\nthis check is disabled if the ``--toplevel``, ``--package``, or ``--src-dir``\noption is given either on the command line or in the configuration file.\n\ncommon causes:\n\n- you built a wheel, renamed a toplevel file or directory, and then built a\n  wheel again without first deleting the ``build/`` directory.\n\n  **solution**: delete the ``build/`` directory and build the wheel again.\n\n- you are using ``setuptools.find_packages()`` in your ``setup.py``, your\n  project contains multiple directories with ``__init__.py`` files, and one or\n  more of these directories (other than your main package) is not listed in the\n  ``exclude`` argument to ``find_packages()``.\n\n  **solution**: pass a list of all ``__init__.py``-having directories in your\n  project other than your main package to the ``exclude`` argument of\n  ``find_packages()``.  for proper exclusion, each directory ``dirname`` should\n  correspond to two elements of this list, ``'dirname'`` and ``'dirname.*'``,\n  in order to ensure that the directory and all of its subdirectories are\n  excluded.\n\n- you are deliberately creating a wheel with multiple top-level python modules\n  or packages.\n\n  **solution**: use the ``--toplevel`` option to let ``check-wheel-contents``\n  know what toplevel entries to expect.\n\n\nw010 \u2014 toplevel library directory contains no python modules\n------------------------------------------------------------\nthis check fails if a directory tree rooted at the root of the purelib or\nplatlib section of the wheel contains no python modules.  ``*-stubs``\ndirectories are excluded from this check.\n\n\nw101 \u2014 wheel library is missing files in package tree\n-----------------------------------------------------\nthis check is only enabled if the ``--package`` or ``--src-dir`` option is set.\nthis check fails if a path in a tree rooted at an argument to ``--package`` or\ninside an argument to ``--src-dir`` does not appear in the wheel's purelib or\nplatlib section.  empty directories and local files & directories that match\nany of the patterns specified with ``--package-omit`` or its default value are\nexcluded from this check.\n\nnote that this check only checks file paths, i.e., names of files &\ndirectories.  file contents are not examined.\n\nfor example, given the below local tree::\n\n    /usr/src/project/\n    \u251c\u2500\u2500 foo/\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 foo.py\n    \u2514\u2500\u2500 src/\n        \u251c\u2500\u2500 bar/\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.py\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 empty/\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 quux/\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 data.dat\n        \u2514\u2500\u2500 bar.egg-info/\n            \u2514\u2500\u2500 pkg-info\n\nif the options ``--package /usr/src/project/foo`` and ``--src-dir\n/usr/src/project/src`` are supplied and ``--package-omit`` is left at its\ndefault value, then ``check-wheel-contents`` will look for the following paths\nin the wheel, and the check will fail if any of them do not appear in either\nthe purelib or platlib section::\n\n    foo/__init__.py\n    foo/foo.py\n    bar/__init__.py\n    bar/bar.py\n    bar/quux/data.dat\n\nnote that ``foo/.gitignore`` and ``src/bar.egg-info`` are omitted from this\ncheck (and if they do appear in the wheel, it will cause check w102 to fail).\nempty directories are ignored altogether.\n\ncommon causes:\n\n- for python files: you failed to pass all of your project's packages &\n  subpackages to ``setup()``'s ``packages`` argument.  if you are using\n  ``setuptools.find_packages()``, all of your packages & subpackages need to\n  contain ``__init__.py`` files.\n\n- for non-python files: you failed to declare your project's package data\n  appropriately.  `see the setuptools documentation for information on how to\n  do this`__.\n\n__ https://setuptools.pypa.io/en/latest/userguide/datafiles.html\n\n\nw102 \u2014 wheel library contains files not in package tree\n-------------------------------------------------------\nthis check is only enabled if the ``--package`` or ``--src-dir`` option is set.\nthis check fails if the purelib or platlib section of the wheel contains any\nfiles at paths that do not exist in any of the file trees specified with\n``--package`` or ``--src-dir``.\n\nnote that this check only checks file paths, i.e., names of files &\ndirectories.  file contents are not examined.\n\nfor example, given the local tree and options shown in the example under w101,\nthis check will fail if the wheel contains any files in its purelib or platlib\nsection other than the following::\n\n    foo/__init__.py\n    foo/foo.py\n    bar/__init__.py\n    bar/bar.py\n    bar/quux/data.dat\n\nnote that files & directories that match any of the patterns specified with\n``--package-omit`` or its default value are ignored in local trees, and so any\nentries with those names in the wheel will cause this check to fail.  empty\ndirectories are ignored altogether.\n\ncommon causes: see common causes of w009\n\n\nw201 \u2014 wheel library is missing specified toplevel entry\n--------------------------------------------------------\nthis check is only enabled if the ``--toplevel`` option is set.  this check\nfails if one or more of the names given in the ``--toplevel`` option does not\nappear at the root of the purelib or platlib section of the wheel.\n\ncommon causes: see common causes of w007\n\n\nw202 \u2014 wheel library has undeclared toplevel entry\n--------------------------------------------------\nthis check is only enabled if the ``--toplevel`` option is set.  this check\nfails if there is a file or directory at the root of the purelib or platlib\nsection of the wheel that is not listed in the ``--toplevel`` option.\n``*.pth`` files are ignored for the purposes of this check.\n\ncommon causes: see common causes of w009\n",
  "docs_url": null,
  "keywords": "linter,packaging,wheel",
  "license": "mit",
  "name": "check-wheel-contents",
  "package_url": "https://pypi.org/project/check-wheel-contents/",
  "project_url": "https://pypi.org/project/check-wheel-contents/",
  "project_urls": {
    "Bug Tracker": "https://github.com/jwodder/check-wheel-contents/issues",
    "Homepage": "https://github.com/jwodder/check-wheel-contents",
    "Source Code": "https://github.com/jwodder/check-wheel-contents"
  },
  "release_url": "https://pypi.org/project/check-wheel-contents/0.6.0/",
  "requires_dist": [
    "attrs >=18.1",
    "click >=7.0",
    "packaging",
    "pydantic ~=2.0",
    "wheel-filename ~=1.1",
    "tomli <3.0,>=1.2 ; python_version < \"3.11\"",
    "backports.cached-property ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "check your wheels have the right contents",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "check-wheel-contents@varonathe.org",
    "john_thorvald_wodder_ii"
  ],
  "kwds": "path_to_wheel wheel notices svg badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_check_wheel_contents",
  "homepage": "https://github.com/jwodder/check-wheel-contents",
  "release_count": 10,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_backports.cached_property",
    "pypi_click",
    "pypi_packaging",
    "pypi_pydantic",
    "pypi_tomli",
    "pypi_wheel_filename"
  ]
}
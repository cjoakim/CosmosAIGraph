{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: https://github.com/seatgeek/thefuzz/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/seatgeek/thefuzz\n\nthefuzz\n=======\n\nfuzzy string matching like a boss. it uses `levenshtein distance <https://en.wikipedia.org/wiki/levenshtein_distance>`_ to calculate the differences between sequences in a simple-to-use package.\n\nrequirements\n============\n\n-  python 3.7 or higher\n-  `rapidfuzz <https://github.com/maxbachmann/rapidfuzz/>`_\n\nfor testing\n~~~~~~~~~~~\n-  pycodestyle\n-  hypothesis\n-  pytest\n\ninstallation\n============\n\nusing pip via pypi\n\n.. code:: bash\n\n    pip install thefuzz\n\n\nusing pip via github\n\n.. code:: bash\n\n    pip install git+git://github.com/seatgeek/thefuzz.git@0.20.0#egg=thefuzz\n\nadding to your ``requirements.txt`` file (run ``pip install -r requirements.txt`` afterwards)\n\n.. code:: bash\n\n    git+ssh://git@github.com/seatgeek/thefuzz.git@0.20.0#egg=thefuzz\n\nmanually via git\n\n.. code:: bash\n\n    git clone git://github.com/seatgeek/thefuzz.git thefuzz\n    cd thefuzz\n    python setup.py install\n\n\nusage\n=====\n\n.. code:: python\n\n    >>> from thefuzz import fuzz\n    >>> from thefuzz import process\n\nsimple ratio\n~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> fuzz.ratio(\"this is a test\", \"this is a test!\")\n        97\n\npartial ratio\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> fuzz.partial_ratio(\"this is a test\", \"this is a test!\")\n        100\n\ntoken sort ratio\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> fuzz.ratio(\"fuzzy wuzzy was a bear\", \"wuzzy fuzzy was a bear\")\n        91\n    >>> fuzz.token_sort_ratio(\"fuzzy wuzzy was a bear\", \"wuzzy fuzzy was a bear\")\n        100\n\ntoken set ratio\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> fuzz.token_sort_ratio(\"fuzzy was a bear\", \"fuzzy fuzzy was a bear\")\n        84\n    >>> fuzz.token_set_ratio(\"fuzzy was a bear\", \"fuzzy fuzzy was a bear\")\n        100\n\npartial token sort ratio\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> fuzz.token_sort_ratio(\"fuzzy was a bear\", \"wuzzy fuzzy was a bear\")\n        84\n    >>> fuzz.partial_token_sort_ratio(\"fuzzy was a bear\", \"wuzzy fuzzy was a bear\")\n        100\n\nprocess\n~~~~~~~\n\n.. code:: python\n\n    >>> choices = [\"atlanta falcons\", \"new york jets\", \"new york giants\", \"dallas cowboys\"]\n    >>> process.extract(\"new york jets\", choices, limit=2)\n        [('new york jets', 100), ('new york giants', 78)]\n    >>> process.extractone(\"cowboys\", choices)\n        (\"dallas cowboys\", 90)\n\nyou can also pass additional parameters to ``extractone`` method to make it use a specific scorer. a typical use case is to match file paths:\n\n.. code:: python\n\n    >>> process.extractone(\"system of a down - hypnotize - heroin\", songs)\n        ('/music/library/good/system of a down/2005 - hypnotize/01 - attack.mp3', 86)\n    >>> process.extractone(\"system of a down - hypnotize - heroin\", songs, scorer=fuzz.token_sort_ratio)\n        (\"/music/library/good/system of a down/2005 - hypnotize/10 - she's like heroin.mp3\", 61)\n\n.. |build status| image:: https://github.com/seatgeek/thefuzz/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/seatgeek/thefuzz\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "gplv2",
  "name": "thefuzz",
  "package_url": "https://pypi.org/project/thefuzz/",
  "project_url": "https://pypi.org/project/thefuzz/",
  "project_urls": {
    "Homepage": "https://github.com/seatgeek/thefuzz"
  },
  "release_url": "https://pypi.org/project/thefuzz/0.20.0/",
  "requires_dist": [
    "rapidfuzz <4.0.0,>=3.0.0"
  ],
  "requires_python": ">=3.7",
  "summary": "fuzzy string matching in python",
  "version": "0.20.0",
  "releases": [],
  "developers": [
    "adam@seatgeek.com",
    "adam_cohen"
  ],
  "kwds": "levenshtein_distance pycodestyle pip python pytest",
  "license_kwds": "gplv2",
  "libtype": "pypi",
  "id": "pypi_thefuzz",
  "homepage": "https://github.com/seatgeek/thefuzz",
  "release_count": 3,
  "dependency_ids": [
    "pypi_rapidfuzz"
  ]
}
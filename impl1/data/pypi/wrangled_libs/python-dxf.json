{
  "classifiers": [],
  "description": "|build status| |coverage status| |pypi version|\n\npython module and command-line tool for storing and retrieving data in a\ndocker registry.\n\n-  store arbitrary data (blob-store)\n-  content addressable\n-  set up named aliases to blobs\n-  supports docker registry schemas v1 and v2\n-  works on python 3.6+\n\nplease note that ``dxf`` does *not* generate docker container\nconfiguration, so you won\u2019t be able to ``docker pull`` data you store\nusing ``dxf``. see `this\nissue <https://github.com/davedoesdev/dxf/issues/3>`__ for more details.\n\ncommand-line example:\n\n.. code:: shell\n\n   dxf push-blob fred/datalogger logger.dat @may15-readings\n   dxf pull-blob fred/datalogger @may15-readings\n\nwhich is the same as:\n\n.. code:: shell\n\n   dxf set-alias fred/datalogger may15-readings $(dxf push-blob fred/datalogger logger.dat)\n   dxf pull-blob fred/datalogger $(dxf get-alias fred/datalogger may15-readings)\n\nmodule example:\n\n.. code:: python\n\n   from dxf import dxf\n\n   def auth(dxf, response):\n       dxf.authenticate('fred', 'somepassword', response=response)\n\n   dxf = dxf('registry-1.docker.io', 'fred/datalogger', auth)\n\n   dgst = dxf.push_blob('logger.dat')\n   dxf.set_alias('may15-readings', dgst)\n\n   assert dxf.get_alias('may15-readings') == [dgst]\n\n   for chunk in dxf.pull_blob(dgst):\n       sys.stdout.write(chunk)\n\nusage\n-----\n\nthe module api is described\n`here <http://rawgit.davedoesdev.com/davedoesdev/dxf/master/docs/_build/html/index.html>`__.\n\nthe ``dxf`` command-line tool uses the following environment variables:\n\n-  ``dxf_host`` - host where docker registry is running.\n-  ``dxf_insecure`` - set this to ``1`` if you want to connect to the\n   registry using ``http`` rather than ``https`` (which is the default).\n-  ``dxf_username`` - name of user to authenticate as.\n-  ``dxf_password`` - user\u2019s password.\n-  ``dxf_authorization`` - http ``authorization`` header value.\n-  ``dxf_auth_host`` - if set, always perform token authentication to\n   this host, overriding the value returned by the registry.\n-  ``dxf_progress`` - if this is set to ``1``, a progress bar is\n   displayed (on standard error) during ``push-blob`` and ``pull-blob``.\n   if this is set to ``0``, a progress bar is not displayed. if this is\n   set to any other value, a progress bar is only displayed if standard\n   error is a terminal.\n-  ``dxf_blob_info`` - set this to ``1`` if you want ``pull-blob`` to\n   prepend each blob with its digest and size (printed in plain text,\n   separated by a space and followed by a newline).\n-  ``dxf_chunk_size`` - number of bytes ``pull-blob`` should download at\n   a time. defaults to 8192.\n-  ``dxf_skiptlsverify`` - set this to ``1`` to skip tls certificate\n   verification.\n-  ``dxf_tlsverify`` - optional path to custom ca bundle to use for tls\n   verification.\n-  ``dxf_platform`` - optional platform (e.g.\u00a0``linux/amd64``) to use\n   for multi-arch manifests. if a multi-arch manifest is encountered and\n   this is not set then a dict containing entries for each platform will\n   be displayed.\n\nyou can use the following options with ``dxf``. supply the name of the\nrepository you wish to work with in each case as the second argument.\n\n-  ``dxf push-blob <repo> <file> [@alias]``\n\n      upload a file to the registry and optionally give it a name\n      (alias). the blob\u2019s hash is printed to standard output.\n\n   ..\n\n      the hash or the alias can be used to fetch the blob later using\n      ``pull-blob``.\n\n-  ``dxf pull-blob <repo> <hash>|<@alias>...``\n\n      download blobs from the registry to standard output. for each blob\n      you can specify its hash, prefixed by ``sha256:`` (remember the\n      registry is content-addressable) or an alias you\u2019ve given it\n      (using ``push-blob`` or ``set-alias``).\n\n-  ``dxf blob-size <repo> <hash>|<@alias>...``\n\n      print the size of blobs in the registry. if you specify an alias,\n      the sum of all the blobs it points to will be printed.\n\n-  ``dxf mount-blob <repo> <from-repo> <hash> [@alias]``\n\n      cross mount a blob from another repository and optionally give it\n      an alias. specify the blob by its hash, prefixed by ``sha256:``.\n\n   ..\n\n      this is useful to avoid having to upload a blob to your repository\n      if you know it already exists in the registry.\n\n-  ``dxf del-blob <repo> <hash>|<@alias>...``\n\n      delete blobs from the registry. if you specify an alias the blobs\n      it points to will be deleted, not the alias itself. use\n      ``del-alias`` for that.\n\n-  ``dxf set-alias <repo> <alias> <hash>|<file>...``\n\n      give a name (alias) to a set of blobs. for each blob you can\n      either specify its hash (as printed by ``push-blob`` or\n      ``get-alias``) or, if you have the blob\u2019s contents on disk, its\n      filename (including a path separator to distinguish it from a\n      hash).\n\n-  ``dxf get-alias <repo> <alias>...``\n\n      for each alias you specify, print the hashes of all the blobs it\n      points to.\n\n-  ``dxf del-alias <repo> <alias>...``\n\n      delete each specified alias. the blobs they point to won\u2019t be\n      deleted (use ``del-blob`` for that), but their hashes will be\n      printed.\n\n-  ``dxf get-digest <repo> <alias>...``\n\n      for each alias you specify, print the hash of its configuration\n      blob. for an alias created using ``dxf``, this is the hash of the\n      first blob it points to. for a docker image tag, this is the same\n      as ``docker inspect alias --format='{{.id}}'``.\n\n-  ``dxf get-manifest <repo> <alias>...``\n\n      for each alias you specify, print its manifest obtained from the\n      registry.\n\n-  ``dxf list-aliases <repo>``\n\n      print all the aliases defined in the repository.\n\n-  ``dxf list-repos``\n\n      print the names of all the repositories in the registry. not all\n      versions of the registry support this.\n\ncertificates\n------------\n\nif your registry uses ssl with a self-issued certificate, you\u2019ll need to\nsupply ``dxf`` with a set of trusted certificate authorities.\n\nset the ``requests_ca_bundle`` environment variable to the path of a pem\nfile containing the trusted certificate authority certificates.\n\nboth the module and command-line tool support ``requests_ca_bundle``.\n\nalternatively, you can set the ``dxf_tlsverify`` environment variable\nfor the command-line tool or pass the ``tlsverify`` option to the\nmodule.\n\nauthentication tokens\n---------------------\n\n``dxf`` automatically obtains docker registry authentication tokens\nusing your ``dxf_username`` and ``dxf_password``, or\n``dxf_authorization``, environment variables as necessary.\n\nhowever, if you wish to override this then you can use the following\ncommand:\n\n-  ``dxf auth <repo> <action>...``\n\n      authenticate to the registry using ``dxf_username`` and\n      ``dxf_password``, or ``dxf_authorization``, and print the\n      resulting token.\n\n   ..\n\n      ``action`` can be ``pull``, ``push`` or ``*``.\n\nif you assign the token to the ``dxf_token`` environment variable, for\nexample:\n\n``dxf_token=$(dxf auth fred/datalogger pull)``\n\nthen subsequent ``dxf`` commands will use the token without needing\n``dxf_username`` and ``dxf_password``, or ``dxf_authorization``, to be\nset.\n\nnote however that the token expires after a few minutes, after which\n``dxf`` will exit with ``eacces``.\n\ndocker cloud authentication\n---------------------------\n\nyou can use the\n```dockercloud`` <https://github.com/docker/python-dockercloud>`__\nlibrary to read authentication information from your docker\nconfiguration file and pass it to ``dxf``:\n\n.. code:: python\n\n   auth = 'basic ' + dockercloud.api.auth.load_from_file()\n   dxf_obj = dxf.dxf('index.docker.io', repo='myorganization/myimage')\n   dxf_obj.authenticate(authorization=auth, actions=['pull'])\n   dxf_obj.list_aliases()\n\nthanks to `cyrilleverrier <https://github.com/cyrilleverrier>`__ for\nthis tip.\n\ninstallation\n------------\n\n.. code:: shell\n\n   pip install python-dxf\n\nlicence\n-------\n\n`mit <https://raw.github.com/davedoesdev/dxf/master/licence>`__\n\nother projects that use dxf\n---------------------------\n\ndocker-charon\n~~~~~~~~~~~~~\n\nhttps://github.com/gabrieldemarmiesse/docker-charon\n\nthis package allows you to transfer docker images from one registry to\nanother. the second one being disconnected from the internet.\n\nunlike ``docker save`` and ``docker load``, it creates the payload\ndirectly from the registry (it\u2019s faster) and is able to compute diffs to\nonly take the layers needed, hence reducing the size.\n\ntests\n-----\n\n.. code:: shell\n\n   make test\n\nlint\n----\n\n.. code:: shell\n\n   make lint\n\ncode coverage\n-------------\n\n.. code:: shell\n\n   make coverage\n\n`coverage.py <http://nedbatchelder.com/code/coverage/>`__ results are\navailable\n`here <http://rawgit.davedoesdev.com/davedoesdev/dxf/master/htmlcov/index.html>`__.\n\ncoveralls page is `here <https://coveralls.io/r/davedoesdev/dxf>`__.\n\n.. |build status| image:: https://github.com/davedoesdev/dxf/workflows/ci/badge.svg\n   :target: https://github.com/davedoesdev/dxf/actions\n.. |coverage status| image:: https://coveralls.io/repos/davedoesdev/dxf/badge.png?branch=master\n   :target: https://coveralls.io/r/davedoesdev/dxf?branch=master\n.. |pypi version| image:: https://badge.fury.io/py/python-dxf.png\n   :target: http://badge.fury.io/py/python-dxf\n",
  "docs_url": null,
  "keywords": "docker registry",
  "license": "mit",
  "name": "python-dxf",
  "package_url": "https://pypi.org/project/python-dxf/",
  "project_url": "https://pypi.org/project/python-dxf/",
  "project_urls": {
    "Homepage": "https://github.com/davedoesdev/dxf"
  },
  "release_url": "https://pypi.org/project/python-dxf/11.4.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "package for accessing a docker v2 registry",
  "version": "11.4.0",
  "releases": [],
  "developers": [
    "dave@davedoesdev.com",
    "david_halls"
  ],
  "kwds": "dxf_platform dxf_blob_info dxf_host dxf_token dxf_username",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_dxf",
  "homepage": "https://github.com/davedoesdev/dxf",
  "release_count": 66,
  "dependency_ids": []
}
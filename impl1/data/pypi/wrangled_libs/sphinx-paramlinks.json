{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "framework :: sphinx :: extension",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: documentation"
  ],
  "description": "==================\nsphinx paramlinks\n==================\n\na `sphinx <http://sphinx.pocoo.org/>`_ extension which allows ``:param:``\ndirectives within python documentation to be linkable.\n\nthis is an experimental extension that's used by the\n`sqlalchemy <http://www.sqlalchemy.org>`_ project and related projects.\n\nconfiguration\n=============\n\njust turn it on in ``conf.py``::\n\n    extensions = [\n                'sphinx_paramlinks',\n\n                # your other sphinx extensions\n                # ...\n            ]\n\nsince version 0.5.3, you can modify how clickable hyperlinks are placed around the names of\nthe parameter using the ``paramlinks_hyperlink_param`` setting in ``conf.py``::\n\n    paramlinks_hyperlink_param='name'\n\nthis parameter accepts the following values:\n\n* ``'none'``: no link will be be inserted. the parameter still has a target\n  attached to it so that you can e.g. jump to it from the search.\n\n* ``'name'``: the parameter name is a clickable hyperlink.\n\n* ``'link_symbol'``: a clickable link symbol is inserted after the parameter\n  name (but before an eventual type specification). by default, this symbol\n  only shows when hovering the parameter description (see below)\n\n* ``'name_and_symbol'``: link both the name and also generate a link symbol.\n\nthe default is ``paramlinks_hyperlink_param = 'link_symbol'``.\n\nfeatures\n========\n\n* ``:param:`` directives within sphinx function/method descriptions\n  will be given a paragraph link so that they can be linked\n  to externally.\n\n* a new text role ``:paramref:`` is added, which works like ``:meth:``,\n  ``:func:``, etc.  just append the parameter name as an additional token::\n\n     :paramref:`.environmentcontext.configure.transactional_ddl`\n\n  the directive makes use of the existing python role to do the method/function\n  lookup, searching first the ``:meth:``, then the ``:class:``, and then  the\n  ``:func:`` role; then the parameter name is applied separately to produce the\n  final reference link. (new in 0.3.4, search for ``:meth:`` / ``:func:`` /\n  ``:class:`` individually  rather than using ``:obj:`` which catches lots of\n  things that don't have parameters)\n\n* the paramlinks are also added to the master index as well as the list\n  of domain objects, which allows them to be searchable through the\n  searchindex.js system.  (new in 0.3.0)\n\nstylesheet\n==========\n\nthe paragraph link involves a short stylesheet, to allow the links to\nbe visible when hovered.  this sheet is called\n``sphinx_paramlinks.css`` and the plugin will copy it to the ``_static``\ndirectory of the output automatically. the stylesheet is added to the\n``css_files`` list present in the template namespace for sphinx via the\n``sphinx.add_stylesheet()`` hook.\n\ncustomization\n-------------\n\nto customize the link styling, you can override the configuration of\n``sphinx_paramlinks.css`` by adding a custom style sheet via::\n\n     app.add_css_file(\"path/to/custom.css\")\n\nif the parameter name is a hyperlink, the html code will look something like\nthis::\n\n     <a class=\"paramname reference internal\" href=\"#package.method.params.parameter_name\">\n          <strong>parameter_name</strong>\n     </a>\n\nthe class ``paramname`` is defined by ``sphinx-paramlinks`` and can be used to\ncustomize the styling.\n\nif a link symbol is inserted after the hyperlink, the html code will look\nsomething like this::\n\n     <a class=\"paramlink headerlink reference internal\" href=\"#package.method.params.parameter_name\">\u00b6</a>\n\nthe class ``paramlink`` is defined by ``sphinx-paramlinks`` and can be used to\ncustomize the styling.\n\n\ncompatibility\n=============\n\npython compatibility\n--------------------\n\nsphinx-paramlinks is fully python 3 compatible.\n\nsphinx compatibility\n--------------------\n\ni've tried *very* hard to make as few assumptions as possible about sphinx\nand to use only very simple public apis, so that architectural changes in future\nsphinx versions won't break this plugin.   to come up with this plugin i\nspent many hours with sphinx source and tried many different approaches to\nvarious elements of functionality; hopefully what's here is as simple and\nstable as possible based on the current extension capabilities of sphinx.\n\none element that involves using a bit of internals is the usage of the\n``sphinx.domains.python.pyxrefrole`` class, which is currently the\nsphinx class that defines roles for things like ``:meth:``,\n``:func:``, etc.  the object is used as-is in order to define the\n``:paramref:`` role; the product of this role is later transformed\nusing standard hooks.\n\nanother assumption is that in order to locate the rst nodes sphinx\ncreates for the ``:param:`` tags, we look at ``nodes.strong``,\nassuming that this is the type of node currently used to render\n``:param:`` within rst.  if this changes, or needs to be expanded to\nsupport other domains, this traversal can be opened up as needed.\nthis part was difficult as sphinx really doesn't provide any hooks\ninto how the \"info field list\" aspect of domains is handled.\n\noverall, the approach here is to apply extra information to constructs\ngoing into the sphinx system, then do some transformations as the data\ncomes back out.   this relies on as little of how sphinx does its\nthing as possible, rather than going with custom domains and heavy use\nof injected apis which may change in future releases.\n\n",
  "docs_url": null,
  "keywords": "sphinx",
  "license": "mit",
  "name": "sphinx-paramlinks",
  "package_url": "https://pypi.org/project/sphinx-paramlinks/",
  "project_url": "https://pypi.org/project/sphinx-paramlinks/",
  "project_urls": {
    "Homepage": "http://github.com/sqlalchemyorg/sphinx-paramlinks"
  },
  "release_url": "https://pypi.org/project/sphinx-paramlinks/0.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "allows param links in sphinx function/method descriptions to be linkable",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "mike@zzzcomputing.com",
    "mike_bayer"
  ],
  "kwds": "sphinx_paramlinks paramlinks_hyperlink_param sphinx link_symbol paramlinks",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sphinx_paramlinks",
  "homepage": "http://github.com/sqlalchemyorg/sphinx-paramlinks",
  "release_count": 30,
  "dependency_ids": []
}
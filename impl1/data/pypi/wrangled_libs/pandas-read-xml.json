{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# pandas read xml\n\na tool to help read xml files as pandas dataframes.\n\nsee example in [google colab here](https://colab.research.google.com/github/minchulkim87/pandas_read_xml/blob/master/pandas_read_xml_example.ipynb)\n\nisn't it annoying working with data in xml format? i think so. take a look at this simple example.\n\n```xml\n<first-tag>\n    <not-interested>\n        blah blah\n    </not-interested>\n    <second-tag>\n        <the-tag-you-want-as-root>\n            <row>\n                <columna>\n                    the data that you want\n                </columna>\n                <columnb>\n                    more data that you want\n                </columnb>\n            </row>\n            <row>\n                <columna>\n                    yet more data that you want\n                </columna>\n                <columnb>\n                    eh, get this data too\n                </columnb>\n            </row>\n        </the-tag-you-want-as-root>\n    </second-tag>\n    <another-irrelevant-tag>\n        some other info that you do not want\n    </another-irrelevant-tag>\n</first-tag>\n```\n\ni wish there was a simple `df = pd.read_xml('some_file.xml')` like `pd.read_csv()` and `pd.read_json()` that we all love.\n\ni can't solve this with my time and skills, but perhaps this package will help get you started.\n\n\n## install\n\n```bash\npip install pandas_read_xml\n```\n\n## import package\n\n```python\nimport pandas_read_xml as pdx\n```\n\n## read xml as pandas dataframe\n\nyou will need to identify the path to the \"root\" tag in the xml from which you want to extract the data.\n\n```python\ndf = pdx.read_xml(\"test.xml\", ['first-tag', 'second-tag', 'the-tag-you-want-as-root'])\n```\n\nby default, pandas-read-xml will treat the root tag as being the \"rows\" of the pandas dataframe. if this is not true, pass the argument `root_is_rows=false`.\n\n*sometimes, the xml structure is such that pandas will treat rows vs columns in a way that we think are opposites. for these cases, the read_xml may fail. try using `transpose=true` as an argument in such cases. this argument will only affect the reading if `root_is_rows=false` is passed.\n\n# auto flatten\n\nthe real cumbersome part of working with xml data (or json data) is that they do not represent a single table. rather, they are a (nested) tree representations of what probably were relational databases. often, these xml data are exported without a clearly documented schema, and more often, no clear way of navigating the data.\n\nwhat is even more annoying is that, in comparison to json, the data structures are not consistent across xml files from the same schema. some files may have multiples of the same tag, resulting in a list-type data, while in other files of the *same* schema will only have on of that tag, resulting in a non-list-type data. in other times, the tags are not present which means that the resulting \"column\" is not just null, but not even a column. this makes it difficult to \"flatten\".\n\npandas already has some tools to help \"explode\" (items in list become separate rows) and \"normalise\" (key, value pairs in one column become separate columns of data), but they fail when there are these mixed types within the same tags (columns). besides, \"flattening\" (combining exploding and normalising) duplicates other data in the dataframe as well, leading to an explosion of memory requirements.\n\nso, in this tool, i have also attempted to make a few different tools to separate the relational tables.\n\nsee the example in colab (or run the notebook elsewhere)\n\nthe `auto_separate_tables` method will separate out what it guesses to be separate tables. the resulting `data` is a dictionary where the keys are the \"table names\" and the corresponding values are the pandas dataframes. each of the separate tables will have the `key_columns` as common columns.\n\nyou can see the list of separated tables by using python dictionary methods.\n\n```python\ndata.keys()\n```\n\nand then view the table of interest.\n\nthere are also other \"smaller\" functions that does parts of the job:\n\n- flatten(df)\n- auto_flatten(df, key_columns)\n- fully_flatten(df, key_columns)\n\neven more if you look through the code.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pandas-read-xml",
  "package_url": "https://pypi.org/project/pandas-read-xml/",
  "project_url": "https://pypi.org/project/pandas-read-xml/",
  "project_urls": {
    "Homepage": "https://github.com/minchulkim87/pandas_read_xml"
  },
  "release_url": "https://pypi.org/project/pandas-read-xml/0.3.1/",
  "requires_dist": [
    "pyarrow",
    "pandas",
    "xmltodict",
    "requests",
    "zipfile36",
    "distlib",
    "urllib3 (>=1.26.3)"
  ],
  "requires_python": ">=3.6",
  "summary": "a tool to read xml files as pandas dataframes.",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "min_chul_kim",
    "minchulkim87@gmail.com"
  ],
  "kwds": "pandas_read_xml pandas_read_xml_example read_xml xml tags",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pandas_read_xml",
  "homepage": "https://github.com/minchulkim87/pandas_read_xml",
  "release_count": 14,
  "dependency_ids": [
    "pypi_distlib",
    "pypi_pandas",
    "pypi_pyarrow",
    "pypi_requests",
    "pypi_urllib3",
    "pypi_xmltodict",
    "pypi_zipfile36"
  ]
}
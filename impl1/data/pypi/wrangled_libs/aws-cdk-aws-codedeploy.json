{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# aws codedeploy construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\naws codedeploy is a deployment service that automates application deployments to\namazon ec2 instances, on-premises instances, serverless lambda functions, or\namazon ecs services.\n\nthe cdk currently supports amazon ec2, on-premise and aws lambda applications.\n\n## ec2/on-premise applications\n\nto create a new codedeploy application that deploys to ec2/on-premise instances:\n\n```python\napplication = codedeploy.serverapplication(self, \"codedeployapplication\",\n    application_name=\"myapplication\"\n)\n```\n\nto import an already existing application:\n\n```python\napplication = codedeploy.serverapplication.from_server_application_name(self, \"existingcodedeployapplication\", \"myexistingapplication\")\n```\n\n## ec2/on-premise deployment groups\n\nto create a new codedeploy deployment group that deploys to ec2/on-premise instances:\n\n```python\nimport aws_cdk.aws_autoscaling as autoscaling\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# application: codedeploy.serverapplication\n# asg: autoscaling.autoscalinggroup\n# alarm: cloudwatch.alarm\n\ndeployment_group = codedeploy.serverdeploymentgroup(self, \"codedeploydeploymentgroup\",\n    application=application,\n    deployment_group_name=\"mydeploymentgroup\",\n    auto_scaling_groups=[asg],\n    # adds user data that installs the codedeploy agent on your auto-scaling groups hosts\n    # default: true\n    install_agent=true,\n    # adds ec2 instances matching tags\n    ec2_instance_tags=codedeploy.instancetagset({\n        # any instance with tags satisfying\n        # key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        # will match this group\n        \"key1\": [\"v1\", \"v2\"],\n        \"key2\": [],\n        \"\": [\"v3\"]\n    }),\n    # adds on-premise instances matching tags\n    on_premise_instance_tags=codedeploy.instancetagset({\n        \"key1\": [\"v1\", \"v2\"]\n    }, {\n        \"key2\": [\"v3\"]\n    }),\n    # cloudwatch alarms\n    alarms=[alarm],\n    # whether to ignore failure to fetch the status of alarms from cloudwatch\n    # default: false\n    ignore_poll_alarms_failure=false,\n    # auto-rollback configuration\n    auto_rollback=codedeploy.autorollbackconfig(\n        failed_deployment=true,  # default: true\n        stopped_deployment=true,  # default: false\n        deployment_in_alarm=true\n    )\n)\n```\n\nall properties are optional - if you don't provide an application,\none will be automatically created.\n\nto import an already existing deployment group:\n\n```python\n# application: codedeploy.serverapplication\n\ndeployment_group = codedeploy.serverdeploymentgroup.from_server_deployment_group_attributes(self, \"existingcodedeploydeploymentgroup\",\n    application=application,\n    deployment_group_name=\"myexistingdeploymentgroup\"\n)\n```\n\n### load balancers\n\nyou can [specify a load balancer](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-elastic-load-balancing.html)\nwith the `loadbalancer` property when creating a deployment group.\n\n`loadbalancer` is an abstract class with static factory methods that allow you to create instances of it from various sources.\n\nwith classic elastic load balancer, you provide it directly:\n\n```python\nimport aws_cdk.aws_elasticloadbalancing as elb\n\n# lb: elb.loadbalancer\n\nlb.add_listener(\n    external_port=80\n)\n\ndeployment_group = codedeploy.serverdeploymentgroup(self, \"deploymentgroup\",\n    load_balancer=codedeploy.loadbalancer.classic(lb)\n)\n```\n\nwith application load balancer or network load balancer,\nyou provide a target group as the load balancer:\n\n```python\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# alb: elbv2.applicationloadbalancer\n\nlistener = alb.add_listener(\"listener\", port=80)\ntarget_group = listener.add_targets(\"fleet\", port=80)\n\ndeployment_group = codedeploy.serverdeploymentgroup(self, \"deploymentgroup\",\n    load_balancer=codedeploy.loadbalancer.application(target_group)\n)\n```\n\n## deployment configurations\n\nyou can also pass a deployment configuration when creating the deployment group:\n\n```python\ndeployment_group = codedeploy.serverdeploymentgroup(self, \"codedeploydeploymentgroup\",\n    deployment_config=codedeploy.serverdeploymentconfig.all_at_once\n)\n```\n\nthe default deployment configuration is `serverdeploymentconfig.one_at_a_time`.\n\nyou can also create a custom deployment configuration:\n\n```python\ndeployment_config = codedeploy.serverdeploymentconfig(self, \"deploymentconfiguration\",\n    deployment_config_name=\"mydeploymentconfiguration\",  # optional property\n    # one of these is required, but both cannot be specified at the same time\n    minimum_healthy_hosts=codedeploy.minimumhealthyhosts.count(2)\n)\n```\n\nor import an existing one:\n\n```python\ndeployment_config = codedeploy.serverdeploymentconfig.from_server_deployment_config_name(self, \"existingdeploymentconfiguration\", \"myexistingdeploymentconfiguration\")\n```\n\n## lambda applications\n\nto create a new codedeploy application that deploys to a lambda function:\n\n```python\napplication = codedeploy.lambdaapplication(self, \"codedeployapplication\",\n    application_name=\"myapplication\"\n)\n```\n\nto import an already existing application:\n\n```python\napplication = codedeploy.lambdaapplication.from_lambda_application_name(self, \"existingcodedeployapplication\", \"myexistingapplication\")\n```\n\n## lambda deployment groups\n\nto enable traffic shifting deployments for lambda functions, codedeploy uses lambda aliases, which can balance incoming traffic between two different versions of your function.\nbefore deployment, the alias sends 100% of invokes to the version used in production.\nwhen you publish a new version of the function to your stack, codedeploy will send a small percentage of traffic to the new version, monitor, and validate before shifting 100% of traffic to the new version.\n\nto create a new codedeploy deployment group that deploys to a lambda function:\n\n```python\n# my_application: codedeploy.lambdaapplication\n# func: lambda.function\n\nversion = func.current_version\nversion1_alias = lambda_.alias(self, \"alias\",\n    alias_name=\"prod\",\n    version=version\n)\n\ndeployment_group = codedeploy.lambdadeploymentgroup(self, \"bluegreendeployment\",\n    application=my_application,  # optional property: one will be created for you if not provided\n    alias=version1_alias,\n    deployment_config=codedeploy.lambdadeploymentconfig.linear_10percent_every_1minute\n)\n```\n\nin order to deploy a new version of this function:\n\n1. reference the version with the latest changes `const version = func.currentversion`.\n2. re-deploy the stack (this will trigger a deployment).\n3. monitor the codedeploy deployment as traffic shifts between the versions.\n\n### create a custom deployment config\n\ncodedeploy for lambda comes with built-in configurations for traffic shifting.\nif you want to specify your own strategy,\nyou can do so with the customlambdadeploymentconfig construct,\nletting you specify precisely how fast a new function version is deployed.\n\n```python\n# application: codedeploy.lambdaapplication\n# alias: lambda.alias\nconfig = codedeploy.customlambdadeploymentconfig(self, \"customconfig\",\n    type=codedeploy.customlambdadeploymentconfigtype.canary,\n    interval=duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.lambdadeploymentgroup(self, \"bluegreendeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)\n```\n\nyou can specify a custom name for your deployment config, but if you do you will not be able to update the interval/percentage through cdk.\n\n```python\nconfig = codedeploy.customlambdadeploymentconfig(self, \"customconfig\",\n    type=codedeploy.customlambdadeploymentconfigtype.canary,\n    interval=duration.minutes(1),\n    percentage=5,\n    deployment_config_name=\"mydeploymentconfig\"\n)\n```\n\n### rollbacks and alarms\n\ncodedeploy will roll back if the deployment fails. you can optionally trigger a rollback when one or more alarms are in a failed state:\n\n```python\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# alias: lambda.alias\n\n# or add alarms to an existing group\n# blue_green_alias: lambda.alias\n\nalarm = cloudwatch.alarm(self, \"errors\",\n    comparison_operator=cloudwatch.comparisonoperator.greater_than_threshold,\n    threshold=1,\n    evaluation_periods=1,\n    metric=alias.metric_errors()\n)\ndeployment_group = codedeploy.lambdadeploymentgroup(self, \"bluegreendeployment\",\n    alias=alias,\n    deployment_config=codedeploy.lambdadeploymentconfig.linear_10percent_every_1minute,\n    alarms=[alarm\n    ]\n)\ndeployment_group.add_alarm(cloudwatch.alarm(self, \"bluegreenerrors\",\n    comparison_operator=cloudwatch.comparisonoperator.greater_than_threshold,\n    threshold=1,\n    evaluation_periods=1,\n    metric=blue_green_alias.metric_errors()\n))\n```\n\n### pre and post hooks\n\ncodedeploy allows you to run an arbitrary lambda function before traffic shifting actually starts (pretraffic hook) and after it completes (posttraffic hook).\nwith either hook, you have the opportunity to run logic that determines whether the deployment must succeed or fail.\nfor example, with pretraffic hook you could run integration tests against the newly created lambda version (but not serving traffic). with posttraffic hook, you could run end-to-end validation checks.\n\n```python\n# warm_up_user_cache: lambda.function\n# end_to_end_validation: lambda.function\n# alias: lambda.alias\n\n\n# pass a hook whe creating the deployment group\ndeployment_group = codedeploy.lambdadeploymentgroup(self, \"bluegreendeployment\",\n    alias=alias,\n    deployment_config=codedeploy.lambdadeploymentconfig.linear_10percent_every_1minute,\n    pre_hook=warm_up_user_cache\n)\n\n# or configure one on an existing deployment group\ndeployment_group.add_post_hook(end_to_end_validation)\n```\n\n### import an existing deployment group\n\nto import an already existing deployment group:\n\n```python\n# application: codedeploy.lambdaapplication\n\ndeployment_group = codedeploy.lambdadeploymentgroup.from_lambda_deployment_group_attributes(self, \"existingcodedeploydeploymentgroup\",\n    application=application,\n    deployment_group_name=\"myexistingdeploymentgroup\"\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-codedeploy",
  "package_url": "https://pypi.org/project/aws-cdk.aws-codedeploy/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-codedeploy/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-codedeploy/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-autoscaling (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancing (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancingv2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::codedeploy",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws aws_autoscaling cdk aws_cloudwatch",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_codedeploy",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_autoscaling",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_elasticloadbalancing",
    "pypi_aws_cdk.aws_elasticloadbalancingv2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: rust"
  ],
  "description": "# css_inline\n\n[<img alt=\"build status\" src=\"https://img.shields.io/github/actions/workflow/status/stranger6667/css-inline/build.yml?style=flat-square&labelcolor=555555&logo=github\" height=\"20\">](https://github.com/stranger6667/css-inline/actions/workflows/build.yml)\n[<img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/css_inline.svg?style=flat-square\" height=\"20\">](https://pypi.org/project/css_inline/)\n[<img alt=\"versions\" src=\"https://img.shields.io/pypi/pyversions/css_inline.svg?style=flat-square\" height=\"20\">](https://pypi.org/project/css_inline/)\n[<img alt=\"license\" src=\"https://img.shields.io/pypi/l/css_inline.svg?style=flat-square\" height=\"20\">](https://opensource.org/licenses/mit)\n[<img alt=\"codecov.io\" src=\"https://img.shields.io/codecov/c/gh/stranger6667/css-inline?logo=codecov&style=flat-square&token=tozvv4kdy0\" height=\"20\">](https://app.codecov.io/github/stranger6667/css-inline)\n[<img alt=\"gitter\" src=\"https://img.shields.io/gitter/room/stranger6667/css-inline?style=flat-square\" height=\"20\">](https://gitter.im/stranger6667/css-inline)\n\n`css_inline` is a high-performance library for inlining css into html 'style' attributes.\n\nthis library is designed for scenarios such as preparing html emails or embedding html into third-party web pages.\n\nfor instance, the library transforms html like this:\n\n```html\n<html>\n    <head>\n        <style>h1 { color:blue; }</style>\n    </head>\n    <body>\n        <h1>big text</h1>\n    </body>\n</html>\n```\n\ninto:\n\n```html\n<html>\n    <head></head>\n    <body>\n        <h1 style=\"color:blue;\">big text</h1>\n    </body>\n</html>\n```\n\n- uses reliable components from mozilla's servo project\n- 10-400x faster than alternatives\n- inlines css from `style` and `link` tags\n- removes `style` and `link` tags\n- resolves external stylesheets (including local files)\n- can process multiple documents in parallel\n- works on linux, windows, and macos\n- supports html5 & css3\n\n## installation\n\ninstall with `pip`:\n\n```\npip install css_inline\n```\n\npre-compiled wheels are available for most popular platforms.\nif not available for your platform, a rust compiler will be needed to build this package from source. rust version 1.65 or higher is required.\n\n## usage\n\n```python\nimport css_inline\n\nhtml = \"\"\"<html>\n<head>\n    <style>h1 { color:blue; }</style>\n</head>\n<body>\n    <h1>big text</h1>\n</body>\n</html>\"\"\"\n\ninlined = css_inline.inline(html)\n# html becomes this:\n#\n# <html>\n# <head>\n#    <style>h1 { color:blue; }</style>\n# </head>\n# <body>\n#     <h1 style=\"color:blue;\">big text</h1>\n# </body>\n# </html>\n```\n\nwhen there is a need to inline multiple html documents simultaneously, `css_inline` offers the `inline_many` function.\nthis feature allows for concurrent processing of several inputs, significantly improving performance when dealing with a large number of documents.\n\n```python\nimport css_inline\n\ncss_inline.inline_many([\"<...>\", \"<...>\"])\n```\n\nunder the hood, `inline_many`, spawns threads at the rust layer to handle the parallel processing of inputs.\nthis results in faster execution times compared to employing parallel processing techniques at the python level.\n\n**note**: to fully benefit from `inline_many`, you should run your application on a multicore machine.\n\n### configuration\n\nfor configuration options use the `cssinliner` class:\n\n```python\nimport css_inline\n\ninliner = css_inline.cssinliner(keep_style_tags=true)\ninliner.inline(\"...\")\n```\n\n- `inline_style_tags`. specifies whether to inline css from \"style\" tags. default: `true`\n- `keep_style_tags`. specifies whether to keep \"style\" tags after inlining. default: `false`\n- `keep_link_tags`. specifies whether to keep \"link\" tags after inlining. default: `false`\n- `base_url`. the base url used to resolve relative urls. if you'd like to load stylesheets from your filesystem, use the `file://` scheme. default: `none`\n- `load_remote_stylesheets`. specifies whether remote stylesheets should be loaded. default: `true`\n- `extra_css`. extra css to be inlined. default: `none`\n- `preallocate_node_capacity`. **advanced**. preallocates capacity for html nodes during parsing. this can improve performance when you have an estimate of the number of nodes in your html document. default: `32`\n\nyou can also skip css inlining for an html tag by adding the `data-css-inline=\"ignore\"` attribute to it:\n\n```html\n<head>\n    <style>h1 { color:blue; }</style>\n</head>\n<body>\n    <!-- the tag below won't receive additional styles -->\n    <h1 data-css-inline=\"ignore\">big text</h1>\n</body>\n```\n\nthe `data-css-inline=\"ignore\"` attribute also allows you to skip `link` and `style` tags:\n\n```html\n<head>\n    <!-- styles below are ignored -->\n    <style data-css-inline=\"ignore\">h1 { color:blue; }</style>\n</head>\n<body>\n    <h1>big text</h1>\n</body>\n```\n\nif you'd like to load stylesheets from your filesystem, use the `file://` scheme:\n\n```python\nimport css_inline\n\n# styles/email is relative to the current directory\ninliner = css_inline.cssinliner(base_url=\"file://styles/email/\")\ninliner.inline(\"...\")\n```\n\n## xhtml compatibility\n\nif you'd like to work around some xhtml compatibility issues like closing empty tags (`<hr>` vs. `<hr/>`), you can use the following snippet that involves `lxml`:\n\n```python\nimport css_inline\nfrom lxml import html, etree\n\ndocument = \"...\"  # your html document\ninlined = css_inline.inline(document)\ntree = html.fromstring(inlined)\ninlined = etree.tostring(tree).decode(encoding=\"utf-8\")\n```\n\n## performance\n\n`css-inline`  is powered by efficient tooling from mozilla's servo project and significantly outperforms other python alternatives in terms of speed.\nmost of the time it achieves over a **10x** speed advantage compared to the next fastest alternative.\n\nhere is the performance comparison:\n\n|             | size    | `css_inline 0.11.2` | `premailer 3.10.0`      | `toronado 0.1.0`        | `inlinestyler 0.2.5`    | `pynliner 0.8.0`        |\n|-------------|---------|---------------------|-------------------------|-------------------------|-------------------------|-------------------------|\n| basic       | 230 b   | 6.75 \u00b5s             | 131.50 \u00b5s  (**19.48x**) | 666.20 \u00b5s  (**98.70x**) | 1.05 ms  (**155.82x**)  | 1.20 ms  (**178.63x**)  |\n| realistic-1 | 8.58 kb | 138.79 \u00b5s           | 1.43 ms  (**10.34x**)   | 16.52 ms  (**119.07x**) | 27.59 ms  (**198.85x**) | 51.74 ms  (**372.84x**) |\n| realistic-2 | 4.3 kb  | 86.95 \u00b5s            | 2.69 ms  (**31.03x**)   | error                   | 18.06 ms  (**207.76x**) | error                   |\n| github page | 1.81 mb | 338.88 ms           | 25.58 s  (**75.49x**)   | error                   | error                   | error                   |\n\nthe above data was obtained from benchmarking the inlining of css in html, as described in the usage section.\nnote that the `toronado`, `inlinestyler` and `pynliner` libraries both encountered errors when used to inline css in the last scenario.\n\nthe benchmarking code is available in the `benches/bench.py` file. the benchmarks were conducted using the stable `rustc 1.74.1` on python `3.11.6`.\n\n## comparison with other libraries\n\nbesides performance, `css-inline` differs from other python libraries for css inlining.\n\n- generally supports more css features than other libraries (for example, `toronado` and `pynliner` do not support pseudo-elements);\n- it has fewer configuration options and not as flexible as `premailer`;\n- works on fewer platforms than lxml-based libraries (`premailer`, `inlinestyler`, `toronado`, and optionally `pynliner`);\n- does not have debug logs yet;\n- supports only html 5.\n\n## python support\n\n`css_inline` supports cpython 3.7, 3.8, 3.9, 3.10, 3.11, 3.12 and pypy 3.7, 3.8, 3.9, 3.10.\n\n## further reading\n\nif you want to know how this library was created & how it works internally, you could take a look at these articles:\n\n- [rust crate](https://dygalo.dev/blog/rust-for-a-pythonista-2/)\n- [python bindings](https://dygalo.dev/blog/rust-for-a-pythonista-3/)\n\n## license\n\nthis project is licensed under the terms of the [mit license](https://opensource.org/licenses/mit).\n\n",
  "docs_url": null,
  "keywords": "css,html,email,stylesheet,inlining",
  "license": "",
  "name": "css-inline",
  "package_url": "https://pypi.org/project/css-inline/",
  "project_url": "https://pypi.org/project/css-inline/",
  "project_urls": {
    "homepage": "https://github.com/Stranger6667/css-inline/tree/master/bindings/python",
    "repository": "https://github.com/Stranger6667/css-inline"
  },
  "release_url": "https://pypi.org/project/css-inline/0.11.2/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "high-performance library for inlining css into html 'style' attributes",
  "version": "0.11.2",
  "releases": [],
  "developers": [
    "dmitry@dygalo.dev"
  ],
  "kwds": "css_inline extra_css inlinestyler css3 css",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_css_inline",
  "homepage": "",
  "release_count": 37,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: robot framework",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: ironpython",
    "programming language :: python :: implementation :: jython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "python remote server for robot framework\n========================================\n\n`robot framework`_ remote servers allow hosting test libraries on different\nprocesses or machines than robot framework itself is running on. this project\nimplements a generic remote server using the python_ programming language.\nsee the `remote library interface documentation`_ for more information about\nthe remote interface in general as well as for a list of remote server\nimplementations in other programming languages.\n\nthis project is hosted on github_ and downloads are available on pypi_.\n\n.. _robot framework: http://robotframework.org\n.. _remote library interface documentation: https://github.com/robotframework/remoteinterface\n.. _github: https://github.com/robotframework/pythonremoteserver\n.. _pypi: http://pypi.python.org/pypi/robotremoteserver\n\n.. contents::\n   :local:\n\nsupported python versions\n-------------------------\n\nthis remote server is implemented with python_ and supports also jython_ (jvm),\nironpython_ (.net) and pypy_. remote server version 1.1 supports python 2.6,\n2.7 and 3.3-3.9. remote server version 1.1.1 supports python 3.10 and 3.11\nas well.\n\n.. _python: http://python.org\n.. _jython: http://jython.org\n.. _ironpython: http://ironpython.net\n.. _pypy: http://pypy.org/\n\nsupported library apis\n----------------------\n\nstarting from the remote server version 1.1, robot framework's `static,\nhybrid and dynamic library apis`__ are all supported. this includes setting\ncustom name and tags for keywords using the `robot.api.deco.keyword`__.\nearlier remote server versions support only the static and hybrid\napis and do not support the keyword decorator at all.\n\nfor most parts these apis work exactly like when using with robot framework\nnormally. the main limitation is that logging using ``robot.api.logger`` or\npython's ``logging`` module `is currently not supported`__.\n\n__ http://robotframework.org/robotframework/latest/robotframeworkuserguide.html#creating-test-libraries\n__ http://robot-framework.readthedocs.io/en/latest/autodoc/robot.api.html#robot.api.deco.keyword\n__ https://github.com/robotframework/pythonremoteserver/issues/26\n\ninstallation\n------------\n\nthe easiest installation approach is using `pip`_::\n\n    pip install robotremoteserver\n\nalternatively you can download the source distribution from pypi_, extract it\nand install the remote server using::\n\n    python setup.py install\n\n.. _`pip`: http://www.pip-installer.org\n\nremote server configuration\n---------------------------\n\nthe remote server is implemented as a class ``robotremoteserver`` and it\naccepts the following configuration parameters when it is initialized:\n\n    =====================  =================  ========================================\n          argument              default                    explanation\n    =====================  =================  ========================================\n    ``library``                               test library instance or module to host. mandatory argument.\n    ``host``                ``'127.0.0.1'``   address to listen. use ``'0.0.0.0'`` to listen to all available ipv4 interfaces.\n    ``port``                ``8270``          port to listen. use ``0`` to select a free port automatically. can be given as an integer or as a string. the default port ``8270`` is `registered by iana`__ for remote server usage.\n    ``port_file``           ``none``          file to write the port that is used. ``none`` (default) means no such file is written.\n    ``allow_stop``          ``'deprecated'``  deprecated since version 1.1. use ``allow_remote_stop`` instead.\n    ``serve``               ``true``          if ``true``, start the server automatically and wait for it to be stopped. if ``false``, server can be started using the ``serve`` method. new in version 1.1.\n    ``allow_remote_stop``   ``true``          allow/disallow stopping the server remotely using ``stop remote server`` keyword and ``stop_remote_server`` xml-rpc method. new in version 1.1.\n    =====================  =================  ========================================\n\n__ https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=8270\n\nstarting remote server\n----------------------\n\nthe remote server can be started simply by creating an instance of the server\nand passing a test library instance or module to it:\n\n.. sourcecode:: python\n\n    from robotremoteserver import robotremoteserver\n    from mylibrary import mylibrary\n\n    robotremoteserver(mylibrary())\n\nby default the server listens to address 127.0.0.1 and port 8270. as `discussed\nabove`__, the remote server accepts various configuration parameters. some of\nthem are used by this example:\n\n__ `remote server configuration`_\n\n.. sourcecode:: python\n\n    from robotremoteserver import robotremoteserver\n    from examplelibrary import examplelibrary\n\n    robotremoteserver(examplelibrary(), host='10.0.0.42', port=0,\n                      port_file='/tmp/remote-port.txt')\n\nstarting from version 1.1, the server can be initialized without starting it by\nusing the argument ``serve=false``. the server can then started afterwards by\ncalling its ``serve`` method explicitly. this example is functionally\nequivalent to the example above:\n\n.. sourcecode:: python\n\n    from robotremoteserver import robotremoteserver\n    from examplelibrary import examplelibrary\n\n    server = robotremoteserver(examplelibrary(), host='10.0.0.42', port=0,\n                               port_file='/tmp/remote-port.txt', serve=false)\n    server.serve()\n\nstarting server on background\n-----------------------------\n\nthe main benefit of separately initializing and starting the server is that\nit makes it easier to start the server in a background thread. servers started\nin a thread work exactly like servers running in the main tread except that\n`stopping the server`__ gracefully using ``ctrl-c`` or signals is not\nsupported automatically. users must thus register signal handlers separately\nif needed.\n\nalso this following example is functionally nearly equivalent to the earlier\nexamples except. the main difference is that not all same signals are handled.\n\n.. sourcecode:: python\n\n    import signal\n    import threading\n    from examplelibrary import examplelibrary\n    from robotremoteserver import robotremoteserver\n\n    server = robotremoteserver(examplelibrary(), port=0, serve=false)\n    signal.signal(signal.sigint, lambda signum, frame: server.stop())\n    server_thread = threading.thread(target=server.serve)\n    server_thread.start()\n    while server_thread.is_alive():\n        server_thread.join(0.1)\n\n__ `stopping remote server`_\n\ngetting active server port\n--------------------------\n\nif the server uses the default port ``8270`` or some other port is given\nexplicitly when `configuring the server`__, you obviously know which port\nto use when connecting the server. when using the port ``0``, the server\nselects a free port automatically, but there are various ways how to find\nout the actual port:\n\n- address and port that are used are printed into the console where the server\n  is started.\n\n- if ``port_file`` argument is used, the server writes the port into the\n  specified file where other tools can easily read it. starting from the\n  remote server version 1.1, the server removes the port file automatically\n  when the server is stopped.\n\n- starting from the version 1.1, the server has ``activate`` method that can\n  be called to activate the server without starting it. this method returns\n  the port that the server binds and also sets it available via the attributes\n  discussed below.\n\n- a started or actived server instance has ``server_address`` attribute that\n  contains the address and the port as a tuple. starting from the version 1.1\n  there is also ``server_port`` attribute that contains just the port as\n  an integer.\n\n__ `remote server configuration`__\n\nstopping remote server\n----------------------\n\nthe remote server can be gracefully stopped using several different methods:\n\n- hitting ``ctrl-c`` on the console where the server is running. not supported\n  automatically if the server is `started on a background thread`__.\n\n- sending the process ``sigint``, ``sigterm``, or ``sighup`` signal. does not\n  work on windows and not supported if the server is started on a background\n  thread.\n\n- using the``stop remote server`` keyword. can be disabled by using\n  ``allow_remote_stop=false`` when `initializing the server`__.\n\n- using the ``stop_remote_server`` function in the xml-rpc interface.\n  can be disabled with the ``allow_remote_stop=false`` initialization parameter.\n\n- running ``python -m robotremoteserver stop [uri]`` which uses the\n  aforementioned ``stop_remote_server`` xml-rpc function internally.\n  can be disabled with the ``allow_remote_stop=false`` initialization parameter.\n\n- using the ``stop_remote_server`` function provided by the\n  ``robotremoteserver`` module similarly as when `testing is server running`_.\n  uses the ``stop_remote_server`` xml-rpc function internally and\n  can be disabled with the ``allow_remote_stop=false`` initialization parameter.\n\n- calling the ``stop`` method of the running server instance. mainly useful when\n  `running the server on background`__.\n\n__ `starting server on background`_\n__ `remote server configuration`_\n__ `starting server on background`_\n\ntesting is server running\n-------------------------\n\nstarting from the version 1.0.1, the ``robotremoteserver`` module supports\ntesting is a remote server running. this can be accomplished by running\nthe module as a script with ``test`` argument and an optional uri::\n\n    $ python -m robotremoteserver test\n    remote server running at http://127.0.0.1:8270.\n    $ python -m robotremoteserver test http://10.0.0.42:57347\n    no remote server running at http://10.0.0.42:57347.\n\nstarting from the version 1.1, the ``robotremoteserver`` module contains\nfunction ``test_remote_server`` that can be used programmatically:\n\n.. sourcecode:: python\n\n    from robotremoteserver import test_remote_server\n\n    if test_remote_server('http://localhost:8270'):\n        print('remote server running!')\n\nthe ``robotremoteserver`` module can be also used to stop a remote server by\nusing ``stop`` argument on the command line or by using the\n``stop_remote_server`` function programmatically. testing and stopping should\nwork also with other robot framework remote server implementations.\n\nlisting keywords and viewing documentation\n------------------------------------------\n\nusing the built-in libdoc__ tool you can list the keywords available on the server::\n\n    $ python -m robot.libdoc remote::http://127.0.0.1:8270 list\n    count items in directory\n    stop remote server\n    strings should be equal\n\nit is also possible to show the documentation on the command line by using\nargument ``show``. html documentation can be created by providing name of\nan output file::\n\n    $ python -m robot.libdoc remote::http://127.0.0.1:8270 mylibrary.html\n    /path/to/mylibrary.html\n\n__ http://robotframework.org/robotframework/#built-in-tools\n\nexample\n-------\n\nthe remote server project contains an example__ that can be studied and also\nexecuted once the library is installed. you can get the example by cloning\nthe project on github_, and it is also included in the source distribution\navailable on pypi_.\n\n__ https://github.com/robotframework/pythonremoteserver/tree/master/example\n\n\n",
  "docs_url": null,
  "keywords": "robotframework testing testautomation remoteinterface",
  "license": "apache license 2.0",
  "name": "robotremoteserver",
  "package_url": "https://pypi.org/project/robotremoteserver/",
  "project_url": "https://pypi.org/project/robotremoteserver/",
  "project_urls": {
    "Download": "https://pypi.python.org/pypi/robotremoteserver",
    "Homepage": "https://github.com/robotframework/PythonRemoteServer"
  },
  "release_url": "https://pypi.org/project/robotremoteserver/1.1.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "robot framework remote server implemented with python",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "robotframework@gmail.com"
  ],
  "kwds": "test_remote_server robotframeworkuserguide robotremoteserver robotframework robot",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_robotremoteserver",
  "homepage": "https://github.com/robotframework/pythonremoteserver",
  "release_count": 6,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "![v](https://img.shields.io/badge/version-2.3.1-blue) ![v](https://img.shields.io/badge/updated-november%2029,%20%202023-green)\r\n\r\n### update (november 2023) -  version 2.3.0: verbosity parameter added, long-standing issues fixed\r\n\r\n---\r\n![sweetviz logo](http://cooltiming.com/sv/logo.png) \r\n\r\n_in-depth eda **(target analysis, comparison, feature analysis, correlation)** in two lines of code!_\r\n\r\n![features](http://cooltiming.com/sv/features.png)\r\n\r\nsweetviz is an open-source python library that generates beautiful, high-density visualizations to kickstart eda (exploratory data analysis) with just two lines of code. output is a fully self-contained html application.\r\n\r\nthe system is built around quickly **visualizing target values** and **comparing datasets**. its goal is to help quick analysis of target characteristics, training vs testing data, and other such data characterization tasks. \r\n\r\nusage and parameters are described below, [you can also find an article describing its features in depth and see examples in action here](https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34).\r\n\r\n**sweetviz development is still ongoing!** please let me know if you run into any data, compatibility or install issues! thank you for [reporting any bugs in the issue tracking system here](https://github.com/fbdesignpro/sweetviz/issues), and i welcome your feedback and questions on usage/features [in the brand-new github \"discussions\" tab right here!](https://github.com/fbdesignpro/sweetviz/discussions).\r\n\r\n## examples & mentions\r\n[**example html report** using the titanic dataset](http://cooltiming.com/sweetviz_report.html)\r\n\r\n[**example notebook w/docs** on colab (jupyter/other notebooks should also work)](https://colab.research.google.com/drive/1-md6yewcvgwvnqwtbirqsyqygdnoeswg?usp=sharing)\r\n\r\n[**medium article** describing its features in depth](https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34)\r\n\r\nkd nugget articles:\r\n[![kdnuggets](https://www.kdnuggets.com/images/tkb-2102-g.png)](https://www.kdnuggets.com/2021/02/powerful-exploratory-data-analysis-sweetviz.html) [![kdnuggets](https://www.kdnuggets.com/images/tkb-2103-g.png)](https://www.kdnuggets.com/2021/03/know-your-data-much-faster-sweetviz-python-library.html)\r\n\r\n# features\r\n- **target analysis** \r\n  - shows how a target value (e.g. \"survived\" in the titanic dataset) relates to other features\r\n- **visualize and compare**\r\n  - distinct datasets (e.g. training vs test data)\r\n  - intra-set characteristics (e.g. male versus female)\r\n- **mixed-type associations**\r\n  - sweetviz integrates associations for numerical (pearson's correlation), categorical (uncertainty coefficient) and categorical-numerical (correlation ratio) datatypes seamlessly, to provide maximum information for all data types.\r\n- **type inference**\r\n  - automatically detects numerical, categorical and text features, with optional manual overrides \r\n- **summary information** \r\n  - type, unique values, missing values, duplicate rows, most frequent values\r\n  - numerical analysis: \r\n    - min/max/range, quartiles, mean, mode, standard deviation, sum, median absolute deviation, coefficient of variation, kurtosis, skewness\r\n\r\n## new & notable\r\n- version 2.2: big compatibility update for python 3.7+ and numpy versions\r\n- version 2.1: **comet.ml** support\r\n- version 2.0: **jupyter, colab & other notebook** support, report **scaling & vertical layout**  \r\n\r\n_(see below for docs on these features)_\r\n\r\n# upgrading\r\nsome people have experienced mixed results behavior upgrading through `pip`. to update to the latest from an existing install, it is recommended to `pip uninstall sweetviz` first, then simply install.\r\n\r\n# installation\r\nsweetviz currently supports python 3.6+ and pandas 0.25.3+. reports are output using the base \"os\" module, so custom environments such as google colab which require custom file operations are not yet supported, although i am looking into a solution. \r\n## using pip\r\nthe best way to install sweetviz (other than from source) is to use pip:\r\n```\r\npip install sweetviz\r\n```\r\n#### installation issues & fixes\r\nin some rare cases, users have reported errors such as `modulenotfounderror: no module named 'sweetviz'` and `attributeerror: module 'sweetviz' has no attribute 'analyze'`.\r\nin those cases, we suggest the following:\r\n- make sure none of your scripts are named `sweetviz.py`, as that interferes with the library itself. delete or rename that script (and any associated `.pyc` files), and try again.\r\n- try uninstalling the library using `pip uninstall sweetviz`, then reinstalling\r\n- the issue may stem from using multiple versions of python, or from os permissions. the following stack overflow articles have resolved many of these issues reported: [article 1](https://stackoverflow.com/questions/32680081/importerror-after-successful-pip-installation/32680082), [article 2](https://stackoverflow.com/questions/14295680/unable-to-import-a-module-that-is-definitely-installed), [article 3](https://stackoverflow.com/questions/44528638/after-pip-successful-installed-modulenotfounderror) \r\n- if all else fails, post a bug issue [here on github](https://github.com/fbdesignpro/sweetviz/issues). thank you for taking the time, it may help resolve the issue for you and everyone else!\r\n# basic usage\r\ncreating a report is a quick 2-line process:\r\n1. create a `dataframereport` object using one of: `analyze()`, `compare()` or `compare_intra()`\r\n2. use a `show_xxx()` function to render the report. you can now use either **html** or **notebook** report options, as well as scaling: (more info on these options below)\r\n\r\n![report_show_options](http://cooltiming.com/sv/layout-anim3.gif) \r\n\r\n## step 1: create the report\r\nthere are 3 main functions for creating reports:\r\n- analyze(...)\r\n- compare(...)\r\n- compare_intra(...)\r\n\r\n#### analyzing a single dataframe (and its optional target feature)\r\nto analyze a single dataframe, simply use the `analyze(...)` function, then the `show_html(...)` function:\r\n```\r\nimport sweetviz as sv\r\n\r\nmy_report = sv.analyze(my_dataframe)\r\nmy_report.show_html() # default arguments will generate to \"sweetviz_report.html\"\r\n```\r\nwhen run, this will output a 1080p widescreen html app in your default browser:\r\n![widescreen demo](http://cooltiming.com/sv/demo_wide.png)\r\n##### optional arguments\r\nthe `analyze()` function can take multiple other arguments:\r\n```\r\nanalyze(source: union[pd.dataframe, tuple[pd.dataframe, str]],\r\n            target_feat: str = none,\r\n            feat_cfg: featureconfig = none,\r\n            pairwise_analysis: str = 'auto',\r\n            verbosity: str = 'default'):\r\n```\r\n- **source:** either the data frame (as in the example) or a tuple containing the data frame and a name to show in the report. \r\ne.g. `my_df` or `[my_df, \"training\"]`\r\n- **target_feat:** a string representing the name of the feature to be marked as \"target\". *only boolean and numerical features can be targets for now.*\r\n- **feat_cfg:** a featureconfig object representing features to be skipped, or to be forced a certain type in the analysis. the arguments can either be a single string or list of strings. parameters are `skip`, `force_cat`, `force_num` and `force_text`. the \"force_\" arguments override the built-in type detection. they can be constructed as follows:\r\n```\r\nfeature_config = sv.featureconfig(skip=\"passengerid\", force_text=[\"age\"])\r\n```\r\n- **verbosity:** **[new]** can be set to `full`, `progress_only` (to only display the progress bar but not report generation messages) and `off` (fully quiet, except for errors or warnings). default  verbosity can also be set in the ini override, under the \"general\" heading (see \"the config file\" section below for details).\r\n- **pairwise_analysis:** correlations and other associations can take quadratic time (n^2) to complete. the default setting (\"auto\") will run without warning until a data set contains \"association_auto_threshold\" features. past that threshold, you need to explicitly pass the parameter `pairwise_analysis=\"on\"` (or `=\"off\"`) since processing that many features would take a long time. this parameter also covers the generation of the association graphs (based on [drazen zaric's concept](https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec)):\r\n\r\n![pairwise sample](http://cooltiming.com/sv/pairwise.png)\r\n\r\n#### comparing two dataframes (e.g. test vs training sets)\r\nto compare two data sets, simply use the `compare()` function. its parameters are the same as `analyze()`, except with an inserted second parameter to cover the comparison dataframe. it is recommended to use the [dataframe, \"name\"] format of parameters to better differentiate between the base and compared dataframes. (e.g. `[my_df, \"train\"]` vs `my_df`)\r\n```\r\nmy_report = sv.compare([my_dataframe, \"training data\"], [test_df, \"test data\"], \"survived\", feature_config)\r\n```\r\n#### comparing two subsets of the same dataframe (e.g. male vs female)\r\nanother way to get great insights is to use the comparison functionality to split your dataset into 2 sub-populations.\r\n\r\nsupport for this is built in through the `compare_intra()` function. this function takes a boolean series as one of the arguments, as well as an explicit \"name\" tuple for naming the (true, false) resulting datasets. note that internally, this creates 2 separate dataframes to represent each resulting group. as such, it is more of a shorthand function of doing such processing manually.\r\n```\r\nmy_report = sv.compare_intra(my_dataframe, my_dataframe[\"sex\"] == \"male\", [\"male\", \"female\"], \"survived\", feature_config)\r\n```\r\n## step 2: show the report\r\nonce you have created your report object (e.g. `my_report` in the examples above), simply pass it into one of the two `show' functions:\r\n\r\n### show_html()\r\n```\r\nshow_html(  filepath='sweetviz_report.html', \r\n            open_browser=true, \r\n            layout='widescreen', \r\n            scale=none)\r\n```            \r\n**show_html(...)** will create and save an html report at the given file path. there are options for:\r\n- **layout**: either `'widescreen'` or `'vertical'`. the widescreen layout displays details on the right side of the screen, as the mouse goes over each feature. the new (as of 2.0) vertical layout is more compact horizontally and enables expanding each detail area upon clicking.\r\n- **scale**: use a floating-point number (e.g. `scale = 0.8` or `none`) to scale the entire report. this is very useful to fit reports to any output.\r\n- **open_browser**: enables the automatic opening of a web browser to show the report. since under some circumstances this is not desired (or causes issues with some ide's), you can disable it here.\r\n\r\n### show_notebook()\r\n```\r\nshow_notebook(  w=none, \r\n                h=none, \r\n                scale=none,\r\n                layout='widescreen',\r\n                filepath=none,\r\n                file_layout=none,\r\n                file_scale=none)\r\n```            \r\n**show_notebook(...)** is new as of 2.0 and will embed an iframe element showing the report right inside a notebook (e.g. jupyter, google colab, etc.). \r\n\r\nnote that since notebooks are generally a more constrained visual environment, it is probably a good idea to use custom width/height/scale values (`w`, `h`, `scale`) and even **set custom default values in an ini override** (see below). the options are:\r\n- **w** (width): sets the width of the output _window_ for the report (the full report may not fit; use `layout` and/or `scale` for the report itself). can be as a percentage string (`w=\"100%\"`) or number of pixels (`w=900`).\r\n- **h** (height): sets the height of the output _window_ for the report. can be as a number of pixels (`h=700`) or \"full\" to stretch the window to be as tall as all the features (`h=\"full\"`).\r\n- **scale**: same as for `show_html()`, above.\r\n- **layout**: same as for `show_html()`, above.\r\n- **filepath**: an optional output html report.\r\n- **file_layout**: layout for the optional file output only (same as `layout` for `show_html()`, above)\r\n- **file_scale**: scale for the optional file output only (same as `scale` for `show_html()`, above)\r\n# customizing defaults: the config file\r\nthe package contains an ini file for configuration. you can override any setting by providing your own then calling this before creating a report:\r\n```\r\nsv.config_parser.read(\"override.ini\")\r\n```\r\n**important #1:** it is best to load overrides **before any other command**, as many of the ini options are used in the report generation.  \r\n\r\n**important #2:** always **put the header line** (e.g. `[general]`) before a set of values in your override ini file, **otherwise your settings will be ignored**. see examples below. if setting multiple values, only include the `[general]` line once.\r\n\r\n\r\n### most useful config overrides\r\nyou can look into the file `sweetviz_defaults.ini` for what can be overriden (warning: much of it is a work in progress and not well documented), but the most useful overrides are as follows.\r\n\r\n#### default report layout, size\r\noverride any of these (by putting them in your own ini, again do not forget the header), to avoid having to set them every time you do a \"show\" command:\r\n\r\n**important**: note the double '%' if specifying a percentage\r\n```\r\n[output_defaults]\r\nhtml_layout = widescreen\r\nhtml_scale = 1.0\r\nnotebook_layout = vertical\r\nnotebook_scale = 0.9\r\nnotebook_width = 100%%\r\nnotebook_height = 700\r\n```\r\n\r\n##### chinese, japanse, korean (cjk) character support\r\n```\r\n[general]\r\nuse_cjk_font = 1 \r\n```\r\n*\\*if setting multiple values for `[general]` only include the `[general]` line once*.\r\n\r\nwill switch the font in the graphs to use a cjk-compatible font. although this font is not as compact, it will get rid of any warnings and \"unknown character\" symbols for these languages.\r\n##### remove sweetviz logo\r\n```\r\n[layout]\r\nshow_logo = 0\r\n```\r\nwill remove the sweetviz logo from the top of the page. \r\n\r\n##### set default verbosity level\r\n```\r\n[general]\r\ndefault_verbosity = off \r\n```\r\n*\\*if setting multiple values for `[general]` only include the `[general]` line once*.\r\n\r\ncan be set to `full`, `progress_only` (to only display the progress bar but not report generation messages) and `off` (fully quiet, except for errors or warnings).\r\n\r\n# correlation/association analysis\r\na major source of insight and unique feature of sweetviz' associations graph and analysis is that **it unifies in a single graph** (and detail views):\r\n - numerical correlation (between numerical features)\r\n - uncertainty coefficient (for categorical-categorical)\r\n - correlation ratio (for categorical-numerical)\r\n![pairwise sample](http://cooltiming.com/sv/pairwise.png)\r\n\r\n squares represent categorical-featured-related variables and circles represent numerical-numerical correlations. note that the trivial diagonal is left empty, for clarity.\r\n \r\nimportant: categorical-categorical associations (provided by the squares showing the uncertainty coefficient) are assymmetrical, meaning that each row represents **how much the row title (on the left) gives information on each column**. _for example, \"sex\", \"pclass\" and \"fare\" are the elements that give the most information on \"survived\"._ \r\n\r\nfor the titanic dataset, this information is rather symmetrical but it is not always the case!\r\n\r\ncorrelations are also displayed in the detail section of each feature, with the target value highlighted when applicable. e.g.:\r\n\r\n![associations detail](http://cooltiming.com/sv/associations_detail.png)\r\n\r\nfinally, it is worth noting these correlation/association methods shouldn\u2019t be taken as gospel as they make some assumptions on the underlying distribution of data and relationships. however they can be a _very_ useful starting point.\r\n\r\n# comet.ml integration\r\nas of 2.1, sweetviz now fully integrates [comet.ml](https://www.comet.ml). this means sweetviz will **automatically log any reports generated** using `show_html()` and `show_notebook()` to your workspace, as long as your api key is set up correctly in your environment.\r\n\r\nadditionally, you can also use the new function `report.log_comet(experiment_object)` to explicitly upload a report for a given experiment to your workspace.\r\n\r\nyou can see an example of a [colab notebook](https://colab.research.google.com/drive/1sk1i-gu6nlchesbmtfd9zuzjhyzlefar?usp=sharing) to generate the report, and its corresponding report in a [comet.ml workspace](https://www.comet.ml/fbdesignpro/sweetviz-comet/d005158117c24924b07476887cd5ddfa?experiment-tab=html).\r\n\r\n## comet report parameters\r\nyou can customize how the sweetviz report looks in your comet workspace by overriding the `[comet_ml_defaults]` section of configuration file. see above for more information on using the ini override.\r\n\r\nyou can choose to use either the `widescreen` (horizontal) or `vertical` layouts, as well as set your preferred scale, by putting the following in your override ini file:\r\n```\r\n[comet_ml_defaults]\r\nhtml_layout = vertical\r\nhtml_scale = 0.85\r\n```\r\n\r\n# troubleshooting / faq\r\n- **installation issues**\r\n\r\nplease see the \"installation issues & fixes\" section at the top of this document\r\n- **asian characters, \"runtimewarning: glyph ### missing from current font\"**\r\n\r\nsee section above regarding cjk characters support. if you find the need for additional character types, definitely [post a request in the issue tracking system.](https://github.com/fbdesignpro/sweetviz/issues)\r\n\r\n- **...any other issues**\r\n\r\ndevelopment is ongoing so absolutely feel free to report any issues and/or suggestions [in the issue tracking system here](https://github.com/fbdesignpro/sweetviz/issues) or [in our forum (you should be able to log in with your github account!)](https://sweetviz.fbdesignpro.com)\r\n\r\n# contribute\r\nthis is my first open-source project! i built it to be the most useful tool possible and help as many people as possible with their data science work. if it is useful to you, your contribution is more than welcome and can take many forms:\r\n### 1. spread the word!\r\na star here on github, and a twitter or instagram post are the easiest contribution and can potentially help grow this project tremendously! if you find this project useful, these quick actions from you would mean a lot and could go a long way. \r\n\r\nkaggle notebooks/posts, medium articles, youtube video tutorials and other content take more time but will help all the more!\r\n\r\n### 2. report bugs & issues\r\ni expect there to be many quirks once the project is used by more and more people with a variety of new (& \"unclean\") data. if you found a bug, please [open a new issue here](https://github.com/fbdesignpro/sweetviz/issues).\r\n\r\n### 3. suggest and discuss usage/features\r\nto make sweetviz as useful as possible we need to hear what you would like it to do, or what it could do better! [head on to our discourse server and post your suggestions there; no login required!](https://sweetviz.fbdesignpro.com).\r\n\r\n### 4. contribute to the development\r\ni definitely welcome the help i can get on this project, simply get in touch on the issue tracker and/or our discourse forum. \r\n\r\nplease note that after a hectic development period, the code itself right now needs a bit of cleanup. :)\r\n\r\n# special thanks & related materials\r\n### contributors\r\n**a very special thanks to everyone who have contributed on github, through reports, feedback and commits!** i want to give a special shout out to **frank male** who has been of tremendous help for fixing issues and setting up the new build pipeline for 2.2.0.\r\n\r\n[![contributors](https://contrib.rocks/image?repo=fbdesignpro/sweetviz)](https://github.com/fbdesignpro/sweetviz/graphs/contributors)\r\n\r\nmade with [contrib.rocks](https://contrib.rocks).\r\n### related materials\r\ni want sweetviz to be a hub of the best of what's out there, a way to get the most valuable information and visualization, without reinventing the wheel.\r\n\r\nas such, i want to point some of those great resources that were inspiring and integrated into sweetviz:\r\n- [pandas-profiling](https://github.com/pandas-profiling/pandas-profiling) was the original inspiration for this project. some of its type-detection code was included in sweetviz.\r\n- [shaked zychlinski: the search for categorical correlation](https://towardsdatascience.com/the-search-for-categorical-correlation-a1cf7f1888c9) is a great article about different types of variable interactions that was the basis of that analysis in sweetviz.\r\n- [drazen zaric: better heatmaps and correlation matrix plots in python](https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec) was the basis for our association graphs.\r\n\r\n",
  "docs_url": null,
  "keywords": "pandas,data-science,data-analysis,python,eda",
  "license": "mit license  copyright (c) 2020 fbdesignpro  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "sweetviz",
  "package_url": "https://pypi.org/project/sweetviz/",
  "project_url": "https://pypi.org/project/sweetviz/",
  "project_urls": {
    "Bug Tracker": "https://github.com/fbdesignpro/sweetviz/issues",
    "Changelog": "https://github.com/fbdesignpro/sweetviz/releases",
    "Discussions": "https://github.com/fbdesignpro/sweetviz/discussions",
    "Homepage": "https://github.com/fbdesignpro/sweetviz"
  },
  "release_url": "https://pypi.org/project/sweetviz/2.3.1/",
  "requires_dist": [
    "pandas !=1.0.0,!=1.0.1,!=1.0.2,>=0.25.3",
    "numpy >=1.16.0",
    "matplotlib >=3.1.3",
    "tqdm >=4.43.0",
    "scipy >=1.3.2",
    "jinja2 >=2.11.1",
    "importlib-resources >=1.2.0",
    "importlib-metadata ; python_version < \"3.8\"",
    "pytest >=6 ; extra == 'dev'",
    "pytest-cov >=3 ; extra == 'dev'",
    "sphinx >=4.0 ; extra == 'docs'",
    "myst-parser >=0.13 ; extra == 'docs'",
    "sphinx-book-theme >=0.1.0 ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "pytest >=6 ; extra == 'test'",
    "pytest-cov >=3 ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "a pandas-based library to visualize and compare datasets.",
  "version": "2.3.1",
  "releases": [],
  "developers": [
    "fb@fbdesignpro.com"
  ],
  "kwds": "pandas python dataframes visualizations datasets",
  "license_kwds": "copyright fbdesignpro license liable mit",
  "libtype": "pypi",
  "id": "pypi_sweetviz",
  "homepage": "",
  "release_count": 35,
  "dependency_ids": [
    "pypi_furo",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_jinja2",
    "pypi_matplotlib",
    "pypi_myst_parser",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_book_theme",
    "pypi_sphinx_copybutton",
    "pypi_tqdm"
  ]
}
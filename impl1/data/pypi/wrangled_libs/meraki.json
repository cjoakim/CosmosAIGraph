{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "# meraki dashboard api python library\n\nthe meraki dashboard api python library provides all current\nmeraki [dashboard api](https://developer.cisco.com/meraki/api-v1/) calls to interface with the cisco meraki\ncloud-managed platform. meraki generates the library based on dashboard api's openapi spec to keep it up to date with\nthe latest api releases, and provides the full source code for the library including the tools used to generate the\nlibrary, if you are participating in the early access program or would like to contribute to the development of the\nlibrary. meraki welcomes constructive pull requests that maintain backwards compatibility with prior versions. the\nlibrary requires python 3.8+, receives support from the community, and you can install it\nvia [pypi](https://pypi.org/project/meraki/):\n\n    pip install --upgrade meraki\n\nif you participate\nin [our early access program](https://community.meraki.com/t5/developers-apis/updated-beta-testing-with-the-meraki-developer-early-access/m-p/145344#m5808)\nand would like to use early access features via the library,\nyou'll [find instructions in the generator readme](https://github.com/meraki/dashboard-api-python/tree/main/generator#readme).\n\n## features\n\nwhile you can make direct http requests to dashboard api in any programming language or rest api client, using a client\nlibrary can make it easier for you to focus on your specific use case, without the overhead of having to write functions\nto handle the dashboard api calls. the python library can also take care of error handling, logging, retries, and other\nconvenient processes and options for you automatically.\n\n* support for all api endpoints, as it uses the [openapi specification](https://api.meraki.com/api/v1/openapispec) to\n  generate source code\n* log all api requests made to a local file as well as on-screen console\n* automatic retries upon 429 rate limit errors, using\n  the [`retry-after` field](https://developer.cisco.com/meraki/api-v1/#!rate-limit) within response headers\n* get all (or a specified number of) pages of data with built-in pagination control\n* tweak settings such as maximum retries, certificate path, suppress logging, and other options\n* simulate post/put/delete calls to preview first, so that network configuration does not get changed\n\n## setup\n\n1. enable api access in your meraki dashboard organization and obtain an api\n   key ([instructions](https://documentation.meraki.com/zgeneral_administration/other_topics/the_cisco_meraki_dashboard_api))\n\n2. keep your api key safe and secure, as it is similar to a password for your dashboard. if publishing your python code\n   to a wider audience, please research secure handling of api keys.\n\n3. install the latest version of [python 3](ttps://wiki.python.org/moin/beginnersguide/nonprogrammers)\n\n4. use _pip_ (or an alternative such as _easy_install_) to install the library from the\n   python [package index](https://pypi.org/project/meraki/):\n    * `pip install meraki`\n    * if you have both python3 and python2 installed, you may need to use `pip3` (so `pip3 install meraki`) along\n      with `python3` on your system\n    * if _meraki_ was previously installed, you can upgrade to the latest non-beta release\n      with `pip install --upgrade meraki`\n\n5. the library supports meraki dashboard api v1. you can also specify the version of the library when installing with\n   _pip_:\n    * see the full [release history](https://pypi.org/project/meraki/#history) to pick the version you want, or\n      use `pip install meraki==` without including a version number to display the list of available versions\n    * versions begin with _1_ (1.0.0b**z** for beta)\n    * specify the version you want with the install command; for example: `pip install meraki==1.34.0`\n    * you can also see the version currently installed with `pip show meraki`\n    * end-of-life v0 versions of the python library begin with _0_ (0.**x**.**y**) and are not supported nor\n      recommended.\n\n## usage\n\n1. export your api key as\n   an [environment variable](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html), for example:\n\n    ```shell\n    export meraki_dashboard_api_key=your_key_here\n    ```\n\n2. alternatively, define your api key as a variable in your source code; this method is not recommended due to its\n   inherent insecurity.\n\n3. single line of code to import and use the library goes at the top of your script:\n\n    ```python\n    import meraki\n    ```\n\n4. instantiate the client (api consumer class), optionally specifying any of the parameters available to set:\n\n    ```python\n    dashboard = meraki.dashboardapi()\n    ```\n\n5. make dashboard api calls in your source code, using the format _client.scope.operation_, where _client_ is the name\n   you defined in the previous step (**dashboard** above), _scope_ is the corresponding scope that represents the first\n   tag from the openapi spec, and _operation_ is the operation of the api endpoint. for example, to make a call to get\n   the list of organizations accessible by the api key defined in step 1, use this function call:\n\n    ```python\n    my_orgs = dashboard.organizations.getorganizations()\n    ```\n\n### examples\n\nyou can find fully working example scripts in the **examples** folder.\n\n| script                  | purpose                                                                                                                                                                                               |\n|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **org_wide_clients.py** | that code collects the clients of all networks, in all orgs to which the key has access. no changes are made, since only get endpoints are called, and the data is written to local csv output files. |\n\n## asyncio\n\n**asyncio** is a library to write concurrent code using the **async/await** syntax. special thanks to heimo\nstieg ([@coregreenberet](https://github.com/coregreenberet)) who has ported the api to asyncio.\n\n### installation on macos\n\nif you use a mac, then you may need to take\n[additional python installation steps](https://bugs.python.org/issue43404) that aren't required on other platforms. this\nis [a limitation of macos and not the library](https://github.com/meraki/dashboard-api-python/issues/226). this step is\nnot required on windows.\n\n### usage\n\nthe usage is similiar to the sequential version above. however it has has some differences.\n\n1. export your api key as\n   an [environment variable](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html), for example:\n\n    ```shell\n    export meraki_dashboard_api_key=your_key_here\n    ```\n\n2. alternatively, define your api key as a variable in your source code; this method is not recommended due to its\n   inherent insecurity.\n\n3. single line of code to import and use the library goes at the top of your script:\n\n    ```python\n    import meraki.aio\n    ```\n\n4. instantiate the client (api consumer class), optionally specifying any of the parameters available to set:\n\n    ```python\n    async with meraki.aio.asyncdashboardapi() as aiomeraki:\n    ```\n   the **async with** statement is important here to make sure, that the client sessions will be closed after using the\n   api.\n\n5. make dashboard api calls in your source code, using the format await _client.section.operation_, where _client_ is\n   the name you defined in the previous step (**aiomeraki** above), _section_ is the corresponding group (or tag from\n   the openapi spec) from the [api docs](https://developer.cisco.com/meraki/api/#/rest), and _operation_ is the name (or\n   operation id from openapi) of the api endpoint. for example, to make a call to get the list of organizations\n   accessible by the api key defined in step 1, use this function call:\n\n    ```python\n    my_orgs = await aiomeraki.organizations.getorganizations()\n    ```\n6. run everything inside an event loop.\n\n```python\nimport asyncio\n\nif __name__ == \"__main__\":\n    # replace my_async_entry_point with the name of your entry point method\n    asyncio.run(my_async_entry_point())\n```\n\n### examples\n\nyou can find fully working example scripts in the **examples** folder.\n| script | purpose |\n|-------------------------||\n| **aio_org_wide_clients.py** | that code is a asyncio port from org_wide_clients.py and collects the clients of all\nnetworks, in all orgs to which the key has access. no changes are made, since only get endpoints are called, and the\ndata is written to local csv output files. |\n| **aio_ips2firewall.py**     | that code will collect the source ip of security events and creates l7 firewall rules to\nblock them. `usage: aio_ips2firewall.py [-h] -o organizations [organizations ...] [-f filter] [-s] [-d days]` |\n\n## note for application developers and ecosystem partners\n\nwe're so glad that you're leveraging our python library. it's best practice to identify your application with every api\nrequest that you make. you can easily do this automatically just by following the format defined\nin [config.py](https://github.com/meraki/dashboard-api-python/blob/master/meraki/config.py) and passing the session\nkwarg:\n\n``` python\nmeraki_python_sdk_caller\n```\n\nunless you are an ecosystem partner, this identifier is optional.\n\n1. if you are an ecosystem partner and you have questions about this requirement, please reach out to your ecosystem\n   rep.\n2. if you have any questions about the formatting, please ask your question by opening an issue in this repo.\n",
  "docs_url": null,
  "keywords": "meraki,dashboard,cisco",
  "license": "mit",
  "name": "meraki",
  "package_url": "https://pypi.org/project/meraki/",
  "project_url": "https://pypi.org/project/meraki/",
  "project_urls": {
    "Homepage": "https://github.com/meraki/dashboard-api-python"
  },
  "release_url": "https://pypi.org/project/meraki/1.41.0/",
  "requires_dist": [
    "requests",
    "aiohttp"
  ],
  "requires_python": ">=3.8",
  "summary": "cisco meraki dashboard api library",
  "version": "1.41.0",
  "releases": [],
  "developers": [
    "api-feedback@meraki.net",
    "cisco_meraki"
  ],
  "kwds": "the_cisco_meraki_dashboard_api meraki_dashboard_api_key meraki_python_sdk_caller meraki _meraki_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_meraki",
  "homepage": "https://github.com/meraki/dashboard-api-python",
  "release_count": 114,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_requests"
  ]
}
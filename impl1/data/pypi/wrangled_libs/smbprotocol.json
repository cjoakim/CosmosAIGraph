{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# smbprotocol\nsmbv2 and v3 client for python.\n\n\n[![test workflow](https://github.com/jborean93/smbprotocol/actions/workflows/ci.yml/badge.svg)](https://github.com/jborean93/smbprotocol/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/jborean93/smbprotocol/branch/master/graph/badge.svg)](https://codecov.io/gh/jborean93/smbprotocol)\n[![pypi version](https://badge.fury.io/py/smbprotocol.svg)](https://badge.fury.io/py/smbprotocol)\n[![license](https://img.shields.io/badge/license-mit-blue.svg)](https://github.com/jborean93/smbprotocol/blob/master/license)\n\nsmb is a network file sharing protocol and has numerous iterations over the\nyears. this library implements the smbv2 and smbv3 protocol based on the\n[ms-smb2](https://msdn.microsoft.com/en-us/library/cc246482.aspx) document.\n\n\n## features\n\n* negotiation of the smb 2.0.2 protocol to smb 3.1.1 (windows 10/server 2016)\n* authentication with both ntlm and kerberos\n* message signing\n* message encryption (smb 3.x.x+)\n* connect to a tree/share\n* opening of files, pipes and directories\n* set create contexts when opening files\n* read and writing of files and pipes\n* sending ioctl commands\n* sending of multiple messages in one packet (compounding)\n* experimental support for both standalone and dfs server shares\n\nthis is definitely not feature complete as smb is quite a complex protocol, see\nbacklog for features that would be nice to have in this library.\n\n\n## requirements\n\n* python 3.7+\n* for kerberos auth on linux\n    * [python-gssapi](https://github.com/pythongssapi/python-gssapi)\n    * [pykrb5](https://github.com/jborean93/pykrb5)\n\nto use kerberos authentication on linux, further dependencies are required, to install these dependencies run\n\n```bash\n# for debian/ubuntu/etc:\nsudo apt-get install gcc python-dev libkrb5-dev\npip install smbprotocol[kerberos]\n\n# for rhel/centos/etc:\nsudo yum install gcc python-devel krb5-devel krb5-workstation python-devel\npip install smbprotocol[kerberos]\n```\n\nkerberos auth with windows should just work out of the box with the `pyspnego` library but on linux, the\n`python-gssapi` library must be installed and `smbprotocol` requires a particular gssapi extension to be available to\nwork. this extension should be installed on the majority of mit or heimdal kerberos installs but that is not a\nguarantee. to verify that kerberos is available on linux you can run the following check in a python console:\n\n```python\ntry:\n    from gssapi.raw import inquire_sec_context_by_oid\n    print(\"python-gssapi extension is available\")\nexcept importerror as exc:\n    print(f\"python-gssapi extension is not available: {exc}\")\n```\n\nif it isn't available, then either a newer version of the system's gssapi implementation needs to be setup and\npython-gssapi compiled against that newer version. in the absence of this extension, only ntlm auth is used.\n\n\n## installation\n\nto install smbprotocol, simply run\n\n```bash\npip install smbprotocol\n\n# to install with kerberos support\npip install smbprotocol[kerberos]\n```\n\nthis will download the required packages that are used in this package and get\nyour python environment ready to go.\n\n\n## additional info\n\none of the first steps as part of the smb protocol is to negotiate the dialect\nused and other features that are available. currently smbprotocol supports\nthe following dialects;\n\n* `2.0.0`: added with server 2008/windows vista\n* `2.1.0`: added with server 2008 r2/windows 7\n* `3.0.0`: added with server 2012/windows 8\n* `3.0.2`: added with server 2012 r2/windows 8.1\n* `3.1.1`: added with server 2016/windows10\n\neach dialect adds in more features to the protocol where some are minor but\nsome are major. one major changes is in dialect 3.x where it added message\nencryption. message encryption is set to true by default and needs to be\noverridden when creating a session object for the older dialects.\n\nby default, the negotiation process will use the latest dialect that is\nsupported by the server but this can be overridden if required. when this is\ndone by the following code\n\n```python\nimport uuid\n\nfrom smbprotocol.connection import connection, dialects\n\nconnection = connection(uuid.uuid4(), \"server\", 445)\nconnection.connect(dialects.smb_3_0_2)\n```\n\nwhile you shouldn't want to downgrade to an earlier version, this does allow\nyou to set a minimum dialect version if required.\n\n\n## examples\n\nthere are 2 different apis you can use with this library.\n\n* `smbprotocol`: low level interface that can do whatever you want but quite verbose\n* `smbclient`: higher level interface that implements the builtin `os` and `os.path` file system functions but for smb support\n\nthe `examples` folder contains some examples of both the high and low level\ninterface but for everyday user's it is recommended to use `smbclient` as it\nis a lot simpler.\n\n### smbclient interface\n\nthe higher level interface `smbclient` is designed to make this library easier\nfor people to use for simple and common use cases. it is designed to replicate\nthe builtin `os` and `os.path` filesystem functions like `os.open()`,\n`os.stat()`, and `os.path.exists()`. it is also designed to handle connections\nto a dfs target unlike `smbprotocol`.\n\na connection made by `smbclient` is kept in a pool and re-used for future\nrequests to the same server until the python process exists. this makes\nauthentication simple and only required for the first call to the server. any\ndfs referrals are also cached in that python process. this optimises any\nfuture requests to that same dfs namespace.\n\nthe functions in `smbclient` have a global config object that can be used to\nset any connection defaults to use for any future connections. it can also be\nused to specify any domain based dfs settings for more advanced setups. it is\nrecommended to use `clientconfig()` to set any global credentials like so:\n\n```python\nimport smbclient\n\nsmbclient.clientconfig(username='user', password='password')\n```\n\nthe `clientconfig` is a singleton and any future instanciations of that\nobject will just update the keys being set. you can set the following keys on\nthe `clientconfig`:\n\n* `client_guid`: the client guid to identify the client to the server on a new connection\n* `username`: the default username to use when creating a new smb session if explicit credentials weren't set\n* `password`: the default password to use for authentication\n* `domain_controller`: the domain controller hostname. this is useful for environments with dfs servers as it is used to identify the dfs domain information automatically\n* `skip_dfs`: whether to skip doing any dfs resolution, useful if there is a bug or you don't want to waste any roundtrip requesting referrals\n* `auth_protocol`: the authentication protocol to use; `negotiate` (default), `kerberos`, or `ntlm`\n* `require_secure_negotiate`: control whether the client validates the negotiation info when connecting to a share (default: `true`).\n    * more information can be found on [smb3 secure dialect negotiation](https://docs.microsoft.com/en-us/archive/blogs/openspecification/smb3-secure-dialect-negotiation)\n\nas well as setting the default credentials on the `clientconfig` you can also\nspecify the credentials and other connection parameters on each `smbclient`\nfunction or when registering a new server. these functions accept the\nfollowing kwargs:\n\n* `username`: the username used to connect to the share\n* `password`: the password used to connect to the share\n* `port`: override the default port (`445`) to connect to\n* `encrypt`: whether to force encryption on the connection, requires smbv3 or newer on the remote server (default: `false`)\n* `connection_timeout`: override the connection timeout in seconds (default: `60`)\n\nif using kerberos authentication and a kerberos ticket has already set by\n`kinit` then `smbclient` will automatically use those credentials without\nhaving to be explicitly set. if no ticket has been retrieved or you wish to use\ndifferent credentials then set the default credentials on the `clientconfig`\nor specify `username` and `password` on the first request to the server.\n\nfor example i only need to set the credentials on the first request to create\nthe directory and not for the subsequent file creation in that dir.\n\n```python\nimport smbclient\n\n# optional - specify the default credentials to use on the global config object\nsmbclient.clientconfig(username='user', password='pass')\n\n# optional - register the credentials with a server (overrides clientconfig for that server)\nsmbclient.register_session(\"server\", username=\"user\", password=\"pass\")\n\nsmbclient.mkdir(r\"\\\\server\\share\\directory\", username=\"user\", password=\"pass\")\n\nwith smbclient.open_file(r\"\\\\server\\share\\directory\\file.txt\", mode=\"w\") as fd:\n    fd.write(u\"file contents\")\n```\n\nif you wish to reset the cache you can either start a new python process or\ncall `smbclient.reset_connection_cache()` to close all the connections that\nhave been cached by the client.\n\n\n## logging\n\nthis library makes use of the builtin python logging facilities. log messages\nare logged to the `smbprotocol` named logger as well as `smbprotocol.*` where\n`*` is each python script in the `smbprotocol` directory.\n\nthese logs are really useful when debugging issues as they give you a more\nstep by step snapshot of what it is doing and what may be going wrong. the\ndebug side will also print out a human readable string of each smb packet that\nis sent out from the client so it can get very verbose.\n\n\n## testing\n\nto this module, you need to install some pre-requisites first. this can be done\nby running;\n\n```bash\npip install -r requirements-dev.txt\n\n# you can also run tox by installing tox\npip install tox\n```\n\nfrom there to run the basic tests run;\n\n```bash\npy.test -v --pep8 --cov smbprotocol --cov-report term-missing\n\n# or with tox 2.7, 2.7, 3.4, 3.5, and 3.6\ntox\n```\n\nthere are extra tests that only run when certain environment variables are set.\nto run these tests set the following variables;\n\n* `smb_user`: the username to authenticate with\n* `smb_password`: the password to authenticate with\n* `smb_server`: the ip or hostname of the server to authenticate with\n* `smb_port`: the port the smb server is listening on, default is `445`\n* `smb_share`: the name of the share to connect to, a share with this name must exist as well as a share with the name`$smb_share-encrypted` must also exist that forces encryption\n\nfrom here running `tox` or `py.test` with these environment variables set will\nactivate the integration tests.\n\nthis requires either windows 10 or server 2016 as they support dialect 3.1.1\nwhich is required by the tests.\n\nif you don't have access to a windows host, you can use docker to setup a\nsamba container and use that as part of the tests. to do so run the following\nbash commands;\n\n```bash\nsource ./build_helpers/lib.sh\n\nlib::setup::smb_server\n```\n\nthis command will also set the required `smb_*` env vars used in testing.\n\n\n## backlog\n\nhere is a list of features that i would like to incorporate, prs are welcome\nif you want to implement them yourself;\n\n* multiple channel support to speed up large data transfers\n* lots and lots more...\n",
  "docs_url": null,
  "keywords": "smb,smb2,smb3,cifs,python",
  "license": "mit license  copyright (c) 2017 jordan borean, red hat  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "smbprotocol",
  "package_url": "https://pypi.org/project/smbprotocol/",
  "project_url": "https://pypi.org/project/smbprotocol/",
  "project_urls": {
    "homepage": "https://github.com/jborean93/smbprotocol"
  },
  "release_url": "https://pypi.org/project/smbprotocol/1.12.0/",
  "requires_dist": [
    "cryptography >=2.0",
    "pyspnego",
    "pyspnego[kerberos] ; extra == 'kerberos'"
  ],
  "requires_python": ">=3.7",
  "summary": "interact with a server using the smb 2/3 protocol",
  "version": "1.12.0",
  "releases": [],
  "developers": [
    "jborean93@gmail.com"
  ],
  "kwds": "smbprotocol smbv3 smb3 smb_3_0_2 smb",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_smbprotocol",
  "homepage": "",
  "release_count": 34,
  "dependency_ids": [
    "pypi_cryptography",
    "pypi_pyspnego"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: cython",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "===============================================================\n pyre2: python re2 wrapper for linear-time regular expressions\n===============================================================\n\n.. image:: https://github.com/andreasvc/pyre2/workflows/build/badge.svg\n    :target: https://github.com/andreasvc/pyre2/actions?query=workflow:build\n    :alt: build ci status\n\n.. image:: https://github.com/andreasvc/pyre2/workflows/release/badge.svg\n    :target: https://github.com/andreasvc/pyre2/actions?query=workflow:release\n    :alt: release ci status\n\n.. image:: https://img.shields.io/github/v/tag/andreasvc/pyre2?color=green&include_prereleases&label=latest%20release\n    :target: https://github.com/andreasvc/pyre2/releases\n    :alt: github tag (latest semver, including pre-release)\n\n.. image:: https://badge.fury.io/py/pyre2.svg\n   :target: https://badge.fury.io/py/pyre2\n    :alt: pypi version\n\n.. image:: https://github.com/andreasvc/pyre2/workflows/conda/badge.svg\n    :target: https://github.com/andreasvc/pyre2/actions?query=workflow:conda\n    :alt: conda ci status\n\n.. image:: https://img.shields.io/github/license/andreasvc/pyre2\n    :target: https://github.com/andreasvc/pyre2/blob/master/license\n    :alt: license\n\n.. image:: https://img.shields.io/badge/python-3.6+-blue.svg\n    :target: https://www.python.org/downloads/\n    :alt: python version\n\n.. image:: https://anaconda.org/conda-forge/pyre2/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyre2\n   :alt: version\n\n.. image:: https://anaconda.org/conda-forge/pyre2/badges/platforms.svg\n   :target: https://anaconda.org/conda-forge/pyre2\n   :alt: platforms\n\n.. image:: https://anaconda.org/conda-forge/pyre2/badges/downloads.svg\n   :target: https://anaconda.org/conda-forge/pyre2\n   :alt: downloads\n\n\n.. contents:: table of contents\n   :depth: 2\n   :backlinks: top\n\n\nsummary\n=======\n\npyre2 is a python extension that wraps\n`google's re2 regular expression library <https://github.com/google/re2>`_.\nthe re2 engine compiles (strictly) regular expressions to\ndeterministic finite automata, which guarantees linear-time behavior.\n\nintended as a drop-in replacement for ``re``. unicode is supported by encoding\nto utf-8, and bytes strings are treated as utf-8 when the unicode flag is given.\nfor best performance, work with utf-8 encoded bytes strings.\n\ninstallation\n============\n\nnormal usage for linux/mac/windows::\n\n  $ pip install pyre2\n\ncompiling from source\n---------------------\n\nrequirements for building the c++ extension from the repo source:\n\n* a build environment with ``gcc`` or ``clang`` (e.g. ``sudo apt-get install build-essential``)\n* build tools and libraries: re2, pybind11, and cmake installed in the build\n  environment.\n\n  + on ubuntu/debian: ``sudo apt-get install build-essential cmake ninja-build python3-dev cython3 pybind11-dev libre2-dev``\n  + on gentoo, install dev-util/cmake, dev-python/pybind11, and dev-libs/re2\n  + for a venv you can install the pybind11, cmake, and cython packages from pypi\n\non macos, use the ``brew`` package manager::\n\n  $ brew install -s re2 pybind11\n\non windows use the ``vcpkg`` package manager::\n\n  $ vcpkg install re2:x64-windows pybind11:x64-windows\n\nyou can pass some cmake environment variables to alter the build type or\npass a toolchain file (the latter is required on windows) or specify the\ncmake generator.  for example::\n\n  $ cmake_generator=\"unix makefiles\" cmake_toolchain_file=clang_toolchain.cmake tox -e deploy\n\nfor development, get the source::\n\n    $ git clone git://github.com/andreasvc/pyre2.git\n    $ cd pyre2\n    $ make install\n\n\nplatform-agnostic building with conda\n-------------------------------------\n\nan alternative to the above is provided via the `conda`_ recipe (use the\n`miniconda installer`_ if you don't have ``conda`` installed already).\n\n\n.. _conda: https://anaconda.org/conda-forge/pyre2\n.. _miniconda installer: https://docs.conda.io/en/latest/miniconda.html\n\n\nbackwards compatibility\n=======================\n\nthe stated goal of this module is to be a drop-in replacement for ``re``, i.e.::\n\n    try:\n        import re2 as re\n    except importerror:\n        import re\n\nthat being said, there are features of the ``re`` module that this module may\nnever have; these will be handled through fallback to the original ``re`` module:\n\n* lookahead assertions ``(?!...)``\n* backreferences (``\\\\n`` in search pattern)\n* \\w and \\s not supported inside character classes\n\non the other hand, unicode character classes are supported (e.g., ``\\p{greek}``).\nsyntax reference: https://github.com/google/re2/wiki/syntax\n\nhowever, there are times when you may want to be notified of a failover. the\nfunction ``set_fallback_notification`` determines the behavior in these cases::\n\n    try:\n        import re2 as re\n    except importerror:\n        import re\n    else:\n        re.set_fallback_notification(re.fallback_warning)\n\n``set_fallback_notification`` takes three values:\n``re.fallback_quietly`` (default), ``re.fallback_warning`` (raise a warning),\nand ``re.fallback_exception`` (raise an exception).\n\ndocumentation\n=============\n\nconsult the docstrings in the source code or interactively\nthrough ipython or ``pydoc re2`` etc.\n\nunicode support\n===============\n\npython ``bytes`` and ``unicode`` strings are fully supported, but note that\n``re2`` works with utf-8 encoded strings under the hood, which means that\n``unicode`` strings need to be encoded and decoded back and forth.\nthere are two important factors:\n\n* whether a ``unicode`` pattern and search string is used (will be encoded to utf-8 internally)\n* the ``unicode`` flag: whether operators such as ``\\w`` recognize unicode characters.\n\nto avoid the overhead of encoding and decoding to utf-8, it is possible to pass\nutf-8 encoded bytes strings directly but still treat them as ``unicode``::\n\n    in [18]: re2.findall(u'\\w'.encode('utf8'), u'm\u00f6tley cr\u00fce'.encode('utf8'), flags=re2.unicode)\n    out[18]: ['m', '\\xc3\\xb6', 't', 'l', 'e', 'y', 'c', 'r', '\\xc3\\xbc', 'e']\n    in [19]: re2.findall(u'\\w'.encode('utf8'), u'm\u00f6tley cr\u00fce'.encode('utf8'))\n    out[19]: ['m', 't', 'l', 'e', 'y', 'c', 'r', 'e']\n\nhowever, note that the indices in ``match`` objects will refer to the bytes string.\nthe indices of the match in the ``unicode`` string could be computed by\ndecoding/encoding, but this is done automatically and more efficiently if you\npass the ``unicode`` string::\n\n    >>> re2.search(u'\u00fc'.encode('utf8'), u'm\u00f6tley cr\u00fce'.encode('utf8'), flags=re2.unicode)\n    <re2.match object; span=(10, 12), match='\\xc3\\xbc'>\n    >>> re2.search(u'\u00fc', u'm\u00f6tley cr\u00fce', flags=re2.unicode)\n    <re2.match object; span=(9, 10), match=u'\\xfc'>\n\nfinally, if you want to match bytes without regard for unicode characters,\npass bytes strings and leave out the ``unicode`` flag (this will cause latin 1\nencoding to be used with ``re2`` under the hood)::\n\n    >>> re2.findall(br'.', b'\\x80\\x81\\x82')\n    ['\\x80', '\\x81', '\\x82']\n\nperformance\n===========\n\nperformance is of course the point of this module, so it better perform well.\nregular expressions vary widely in complexity, and the salient feature of ``re2`` is\nthat it behaves well asymptotically. this being said, for very simple substitutions,\ni've found that occasionally python's regular ``re`` module is actually slightly faster.\nhowever, when the ``re`` module gets slow, it gets *really* slow, while this module\nbuzzes along.\n\nin the below example, i'm running the data against 8mb of text from the colossal wikipedia\nxml file. i'm running them multiple times, being careful to use the ``timeit`` module.\nto see more details, please see the `performance script <http://github.com/andreasvc/pyre2/tree/master/tests/performance.py>`_.\n\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|test             |description                                                                |# total runs|``re`` time(s)|``re2`` time(s)|% ``re`` time|``regex`` time(s)|% ``regex`` time|\n+=================+===========================================================================+============+==============+===============+=============+=================+================+\n|findall uri|email|find list of '([a-za-z][a-za-z0-9]*)://([^ /]+)(/[^ ]*)?|([^ @]+)@([^ @]+)'|2           |6.262         |0.131          |2.08%        |5.119            |2.55%           |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|replace wikilinks|this test replaces links of the form [[obama|barack_obama]] to obama.      |100         |4.374         |0.815          |18.63%       |1.176            |69.33%          |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|remove wikilinks |this test splits the data by the <page> tag.                               |100         |4.153         |0.225          |5.43%        |0.537            |42.01%          |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n\nfeel free to add more speed tests to the bottom of the script and send a pull request my way!\n\ncurrent status\n==============\n\nthe tests show the following differences with python's ``re`` module:\n\n* the ``$`` operator in python's ``re`` matches twice if the string ends\n  with ``\\n``. this can be simulated using ``\\n?$``, except when doing\n  substitutions.\n* the ``pyre2`` module and python's ``re`` may behave differently with nested groups.\n  see ``tests/test_emptygroups.txt`` for the examples.\n\nplease report any further issues with ``pyre2``.\n\ntests\n=====\n\nif you would like to help, one thing that would be very useful\nis writing comprehensive tests for this. it's actually really easy:\n\n* come up with regular expression problems using the regular python 're' module.\n* write a session in python traceback format `example <http://github.com/andreasvc/pyre2/blob/master/tests/test_search.txt>`_.\n* replace your ``import re`` with ``import re2 as re``.\n* save it with as ``test_<name>.txt`` in the tests directory. you can comment on it however you like and indent the code with 4 spaces.\n\n\ncredits\n=======\nthis code builds on the following projects (in chronological order):\n\n- google's re2 regular expression library: https://github.com/google/re2\n- facebook's pyre2 github repository: http://github.com/facebook/pyre2/\n- mike axiak's cython version of this: http://github.com/axiak/pyre2/ (seems not actively maintained)\n- this fork adds python 3 support and other improvements.\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pyre2",
  "package_url": "https://pypi.org/project/pyre2/",
  "project_url": "https://pypi.org/project/pyre2/",
  "project_urls": {
    "Homepage": "https://github.com/andreasvc/pyre2"
  },
  "release_url": "https://pypi.org/project/pyre2/0.3.6/",
  "requires_dist": [
    "regex ; extra == 'perf'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "python wrapper for google\\'s re2 using cython",
  "version": "0.3.6",
  "releases": [],
  "developers": [
    "andreas@unstable.nl",
    "andreas_van_cranenburgh",
    "nerdboy@gentoo.org",
    "steve_arnold"
  ],
  "kwds": "regex expressions automata re2 pattern",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pyre2",
  "homepage": "https://github.com/andreasvc/pyre2",
  "release_count": 6,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_regex"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: gnu affero general public license v3 or later (agplv3+)",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: software development :: build tools",
    "topic :: software development :: compilers"
  ],
  "description": "mach-o mach-o mangler\n=====================\n\n.. image:: https://travis-ci.org/njsmith/machomachomangler.svg?branch=master\n   :target: https://travis-ci.org/njsmith/machomachomangler\n   :alt: automated test status (travis)\n\n.. image:: https://ci.appveyor.com/api/projects/status/9p8cuhx8vwn2i2jp?svg=true\n   :target: https://ci.appveyor.com/project/njsmith/machomachomangler\n   :alt: automated test status (appveyor)\n\n.. image:: https://codecov.io/gh/njsmith/machomachomangler/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/njsmith/machomachomangler\n   :alt: test coverage\n\n\nthis is a little library for mangling mach-o and pe files in various\nways. these are the formats used for executables and shared libraries\non macos and windows, respectively. (if you want the equivalent for\nfor linux, then check out `patchelf\n<https://github.com/nixos/patchelf>`__.)\n\n\nmacho-o features\n----------------\n\nsome rather specialized (and complex) mach-o mangling tools designed\nto support `the pynativelib proposal\n<https://github.com/njsmith/wheel-builders/blob/pynativelib-proposal/pynativelib-proposal.rst>`__\nto allow native libraries to be distributed as standalone `wheel files\n<https://pypi.python.org/pypi/wheel>`__. specifically this includes:\n\n* for pynativelib libraries: a tool that takes a dylib, and a mangling\n  rule, and applies the mangling rule to all the exported\n  symbols. e.g., it can convert a library that exports ``ssl_new``\n  into one that exports ``pynativelib_openssl__ssl_new``. it also\n  changes the library id while it's at it, e.g. from ``ssl.dylib`` ->\n  ``pynativelib_openssl__ssl.dylib`` (like ``install_name_tool -id``)\n\n  additionally: a tool that creates a \"placeholder\" library, which\n  imports the mangled library described above, and then re-exports the\n  symbols under their original names.\n\n* for code that wants to use a pynativelib library: a tool that\n  takes a dylib/bundle/executable, a list of \"original\" dylibs, and\n  for each \"original\" dylib, a newname for that dylib, and a\n  mangling rule. it then (a) replaces the import of the original\n  dylib with an absolute import of the new dylib name from a\n  non-existent directory, (b) marks this as a \"weak\" import, (c)\n  applies the mangling rule to all symbols imported from this dylib,\n  (d) marks these symbols for lookup in the flat namespace.\n\nit turns out that this *exact* combination of things is the only way\nprovided for by the macos linker/loader to have dylib/bundle a linked\nagainst dylib b where the relative on-disk location of a and b is not\nknown until after the executable starts, while preserving the usual\ntwo-level namespace rules for avoiding symbol collisions. i promise it\nwill all make sense once i have a chance to write it up properly...\n\nsome known limitations of the mach-o mangling code:\n\n- unsurprisingly, this kind of patching does not play well with code\n  signing. the code doesn't take any special case with signatures;\n  they'll probably just get messed up. if you want to sign your\n  binaries, then do your mangling first before signing.\n\n- we currently only rewrite the new-style dyld_info symbol table\n  (introduced in 10.5), not the (almost?) totally redundant\n  symtab/dysymtab symbol table. (interesting fact: all mach-o binaries\n  include two completely different representations of their symbols\n  tables. the new one is more compact, to save space, but then they\n  keep the old one around for compatibility, so... anyway.) as far as\n  i can tell, the only thing in in modern macos that still uses\n  symtab/dysymtab is ``dladdr``, and i don't think anyone is relying\n  on ``dladdr`` output for, well... anything? i think worst case, you\n  might end up seeing the original symbol names inside a debugger or\n  profiler? but this wouldn't be *too* hard to fix if it becomes a\n  problem.\n\n- it doesn't do any special handling of the dyld_info weak_bind table,\n  or weak exports. (nb these have nothing to do\n  ``__attribute__((weak))`` or ``__attribute__((weak_import))`` or any\n  of the mentions of the word ``weak`` in the ``ld`` man page \u00e2\u20ac\u201c i\n  think they're for implementing `vague linkage\n  <http://www.airs.com/blog/archives/52>`__.) this is *probably* not a\n  disastrous option, but i'm not 100% sure whether it's actually\n  correct \u00e2\u20ac\u201c it's an incredibly obscure part of the mach-o format, and\n  mach-o is pretty obscure to start with. fortunately this feature is\n  only used by c++ libraries, so we can get started without it.\n\n- when mangling imports, we convert any lazy imports (that need\n  mangling) into eager imports. this is required because the lazy\n  import stubs hard-code the memory layout of the import table into\n  immediate constants inside the stub assembly itself, and i do not\n  feel like trying to automatically rewrite x86-64 opcodes. instead,\n  we leave the lazy import table alone (so all the unmangled lazy\n  imports can continue to use it), and eagerly bind all the mangled\n  imports, so the unmangled stubs never get called.\n\n- i noticed some new code dyld in macos 10.12 that imposes some\n  annoying arbitrary restrictions on which order the different bits of\n  dyld_info appear in the file. this should only affect libraries that\n  are built with 10.12 as their minimum required version, so for folks\n  trying to build stuff for general distribution this shouldn't matter\n  for a while. this also isn't hard to fix, it just means that we'll\n  probably have to start making some pointless redundant copies of\n  bits of the file that we *didn't* change, just so that the second\n  copy can be placed after the bit of the file that we did change,\n  which is tiresome and i haven't gotten around to it yet.\n\n- when mangling imports, we don't check for re-exports, which are also\n  a kind of import. should probably fix this...\n\n\npe features\n-----------\n\na tool that can read in a pe file (``.exe`` or ``.dll``) that is\ncurrently linked to ``foo.dll``, and rewrite it so that it becomes\nlinked to ``bar.dll`` instead (similar to ``patchelf --replace`` on\nlinux, or ``install_name_tool -change`` on os x). this is useful for\navoiding naming collisions between different versions of the same\nlibrary.\n\nfor example, suppose you have two python extensions ``a.dll`` and\n``b.dll``, that are distributed separately by different people. they\nboth contain some fortran code linked to to ``libgfortran-3.dll``, so\nboth packages ship a copy of ``libgfortran-3.dll``. because of the way\nwindows dll loading works, what will happen is that if i load\n``a.dll`` first, then *both* ``a.dll`` and ``b.dll`` will end up using\na's copy of ``libgfortran-3.dll``, while b's copy will be ignored. (or\nvice-versa if i import b first.) this will happen even if i arrange\nthings so that a's copy is not on the dll search path at the time that\nb is loaded -- windows always checks for already-loaded dll's with a\ngiven basename before it actually checks the dll search path (modulo\nsome complications around sxs assemblies, but you don't really want to\ngo there).\n\nthis is bad, because there's no guarantee that ``b.dll`` will work\nwith a's version of ``libgfortran-3.dll`` (e.g., a's copy might be too\nold for b). welcome to `dll hell\n<https://en.wikipedia.org/wiki/dll_hell>`_!\n\nwe could avoid all this by renaming the colliding libraries to have\ndifferent names, e.g. ``libgfortran-3-for-a.dll`` and\n``libgfortran-3-for-b.dll``. but if we just rename the files, then\neverything will break, because ``a.dll`` is looking for\n``libgfortran-3.dll``, not ``libgfortran-3-for-a.dll``.\n\nthis is where ``machomachomangler`` comes in: it lets you patch\n``a.dll`` so that it's linked to ``libgfortran-3-for-a.dll``. and then\neverything works. hooray.\n\nthis basically solves the same problem as private sxs assemblies,\nexcept better in all ways: it's simpler (no xml manifests), more\nflexible (no finicky requirements for the filesystem layout), and\ndoesn't require reading the awful sxs assembly documentation.\n\nexample usage::\n\n  $ python3 -m machomachomangler.cmd.redll a.dll a-patched.dll libgfortran-3.dll libgfortan-3-for-a.dll\n\nthere's an example in ``example/`` then you can play with. e.g. on\ndebian with a mingw-w64 cross-compiler and wine installed::\n\n  $ cd pe-example/\n\n  $ ./build.sh\n  + i686-w64-mingw32-gcc -shared test_dll.c -o test_dll.dll\n  + i686-w64-mingw32-gcc test.c -o test.exe -l. -ltest_dll\n  + i686-w64-mingw32-strip test.exe\n\n  $ wine test.exe\n  dll_function says: test_dll\n\n  $ mv test_dll.dll test_dll_renamed.dll\n\n  # apparently wine's way of signalling a missing dll is to fail silently.\n  $ wine test.exe || echo \"failed -- test_dll.dll is missing\"\n  failed -- test_dll.dll is missing\n\n  $ pythonpath=.. python3 -m machomachomangler.cmd.redll test.exe test-patched.exe test_dll.dll test_dll_renamed.dll\n\n  # now it works again:\n  $ wine test-patched.exe\n  dll_function says: test_dll\n\nsome known limitations of the pe dll-import-switcheroo code:\n\n- the command line tool could be less minimalist.\n\n- gnu ``objdump`` has a bug where it can't read the import tables of\n  our patched pe files -- it just shows all of the import table until\n  it hits the patched entry, and then it stops displaying\n  anything. (the issue is that ``binutils`` wants all the data\n  involved in the import tables to come from a single pe section.)\n  however, i've tried giving the patched files to dependency walker,\n  ``wine``, and windows itself, and they all handle them fine -- so\n  the files are okay, it's just a bug in ``objdump``. just be warned\n  that if you're trying to use ``objdump`` to check if the patching\n  worked, then it's almost certainly going to tell you a confusing\n  lie.\n\n- unsurprisingly, this kind of patching does not play well with code\n  signing. we try to at least clear any existing signatures (so that\n  the binary becomes unsigned, rather than signed with an invalid\n  signature), but this hasn't been tested.\n\n- we don't try to handle files with trailing data after the end of the\n  pe file proper. this commonly occurs with e.g. self-extracting\n  archives and installers. shouldn't be a big deal in theory, but i\n  did find that when compiling a simple ``.exe`` with mingw-w64 the\n  tool refused to work until i had run ``strip`` on the binary, even\n  though in theory this should work fine -- so probably there's some\n  improvements possible.\n\n  [note to self: it looks like this is a gnu extension for putting\n  long section names into pe files, which i guess are they use for\n  their debug format -- this is `documented here\n  <https://sourceware.org/binutils/docs/bfd/coff.html>`__, search for\n  \"coff long section names\". it's probably not hard to handle this\n  better, e.g. by stripping it ourself or even fixing it up.]\n\n- we don't try to update the pe header checksum, since the algorithm\n  for doing this is (nominally) a secret, and i'm informed that for\n  regular user-space code there's nothing that actually cares about\n  whether it's correct. but my information could be wrong. (note: it\n  looks like binutils might know how to compute this checksum? i'm not\n  sure.)\n\n  [update: stefan kanthak informs me that this algorithm is well\n  known, and in fact it looks `pefile has an mit-licensed python\n  implementation\n  <https://github.com/erocarrera/pefile/blob/master/pefile.py#l5150>`_\n  so i guess it might be good to fix this at some point.]\n\n\ngeneral limitations\n-------------------\n\nonly tested on **python 3.4 and 3.5**. probably any python 3 will\nwork, and python 2 definitely won't without some fixes. (there's lots\nof fiddly byte-string handling.)\n\ni'm lazy, so i just load the whole binary files into memory -- maybe\nseveral copies of it. this actually wouldn't be too hard to fix (using\nmemory mapping etc.) but i guess it doesn't matter that much because\n`who has multi-gigabyte mach-o/pe images?\n<http://tvtropes.org/pmwiki/pmwiki.php/main/whatcouldpossiblygowrong>`_?\n\n\ncontact\n-------\n\nwheel-builders@python.org\n\n\nlicense\n-------\n\nit's saturday afternoon, i've got the flu or something, and i'm\nspending my free time writing software to make some proprietary\noperating systems -- ones that are backed by one of the world's larger\ncorporations -- better able to compete for developers with other,\nbetter-designed operating systems. i mean, i'm not saying that poring\nover the pe/coff specification isn't fun!  but it's not *that*\nfun. (and honestly the mach-o docs are absolutely terrible, to the\nextent they exist at all.)\n\nto assuage my annoyance, this software is licensed under the *gnu\naffero general public license as published by the free software\nfoundation, either version 3 of the license or (at your option)\nany later version*. see ``license.txt`` for details.\n\nthis **shouldn't have any effect** on most uses, since it only affects\npeople who are redistributing this software or running it on behalf of\nother people; you can *use* this software to manipulate your\nbsd-licensed dlls, your proprietary-licensed dlls, or whatever you\nlike, and that's fine. the license affects the code for\nmachomachomangler itself; not the code you run it on.\n\nhowever, if for some reason you or your company have some kind of\nallergy to this license, send me `an email\n<mailto:njs@pobox.com>`_ and we'll work out an appropriate tithe.\n\nalso, to preserve our options in case i get over this fit of pique,\nplease **license all contributions under the mit license**. (i\ndefinitely will not switch to any proprietary license, but might\nswitch to a permissive oss license.) thanks!\n\n\ncode of conduct\n---------------\n\ncontributors are requested to follow our `code of conduct\n<https://github.com/njsmith/machomachomangler/blob/master/code_of_conduct.md>`_\nin all project spaces.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "machomachomangler",
  "package_url": "https://pypi.org/project/machomachomangler/",
  "project_url": "https://pypi.org/project/machomachomangler/",
  "project_urls": {
    "Homepage": "https://github.com/njsmith/machomachomangler"
  },
  "release_url": "https://pypi.org/project/machomachomangler/0.0.1/",
  "requires_dist": [
    "attrs"
  ],
  "requires_python": "",
  "summary": "tools for mangling mach-o and pe binaries",
  "version": "0.0.1",
  "releases": [],
  "developers": [
    "nathaniel_j",
    "njs@pobox.com"
  ],
  "kwds": "pefile file tool tools documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_machomachomangler",
  "homepage": "https://github.com/njsmith/machomachomangler",
  "release_count": 1,
  "dependency_ids": [
    "pypi_attrs"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "=============\nabc-backports\n=============\n\nusage:\n\n.. code-block:: python\n\n    try:\n        # abcs live in \"collections.abc\" in python >= 3.3\n        from collections.abc import coroutine, generator\n    except importerror:\n        # fall back to import from \"backports_abc\"\n        from backports_abc import coroutine, generator\n\nyou can also install the abcs into the stdlib by calling the ``patch()``\nfunction:\n\n.. code-block:: python\n\n    import backports_abc\n    backports_abc.patch()\n\n    try:\n        # abcs live in \"collections.abc\" in python >= 3.3\n        from collections.abc import coroutine, generator\n    except importerror:\n        # fall back to import from \"collections\" in python <= 3.2\n        from backports_abc import coroutine, generator\n\ncurrently, ``patch()`` provides the following names if missing:\n\n* ``collections.abc.generator``\n* ``collections.abc.awaitable``\n* ``collections.abc.coroutine``\n* ``inspect.isawaitable(obj)``\n\nall of them are also available directly from the ``backports_abc``\nmodule namespace.\n\nin python 2.x and python 3.2, it patches the ``collections`` module\ninstead of the ``collections.abc`` module.  any names that are already\navailable when importing this module will not be overwritten.\n\nthe names that were previously patched by ``patch()`` can be queried\nthrough the mapping in ``backports_abc.patched``.\n\nchangelog\n=========\n\n0.5 (2016-11-12)\n----------------\n\n* support old-style (mro-missing) classes\n\n0.4 (2015-09-14)\n----------------\n\n* direct wheel building support\n\n* make all names available at the module level instead of requiring patching\n\n\n0.3 (2015-07-03)\n----------------\n\n* removed patching of ``inspect.iscoroutine()`` as it is not abc based\n\n\n0.2 (2015-07-03)\n----------------\n\n* require explicit ``backports_abc.patch()`` call to do the patching\n  (avoids side-effects on import and allows future configuration)\n\n* provide access to patched names through global ``patched`` dict\n\n* add abc based implementations of inspect.iscoroutine() and\n  inspect.isawaitable()\n\n\n0.1 (2015-06-24)\n----------------\n\n* initial public release\n\n* provided abcs: generator, coroutine, awaitable",
  "docs_url": null,
  "keywords": "",
  "license": "unknown",
  "name": "backports_abc",
  "package_url": "https://pypi.org/project/backports_abc/",
  "project_url": "https://pypi.org/project/backports_abc/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/cython/backports_abc"
  },
  "release_url": "https://pypi.org/project/backports_abc/0.5/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a backport of recent additions to the 'collections.abc' module.",
  "version": "0.5",
  "releases": [],
  "developers": [
    "cython-devel@python.org",
    "stefan_behnel_et_al"
  ],
  "kwds": "backports_abc coroutine backports python patches",
  "license_kwds": "unknown",
  "libtype": "pypi",
  "id": "pypi_backports_abc",
  "homepage": "https://github.com/cython/backports_abc",
  "release_count": 4,
  "dependency_ids": []
}
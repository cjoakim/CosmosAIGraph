{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "# fraction  [![downloads](https://pepy.tech/badge/fraction/week)](https://pepy.tech/project/fraction)\n\nfraction is a _python_ module that is designed for fractional values **_numerator/denominator_**\n\n### installation\neasy to install\n```\n$ python -m pip install fraction\n```\n### usage\n#### import\n```\n>>> from fraction import fraction\n```\n#### initialization\n##### creates a fraction equal to 0/1\n```\n>>> f1 = fraction()\n```\n##### creates a fraction equal to (1/2) / (1/4)\n```\n>>> print(fraction('1/2', '1/4'))\n2/1\n```\n##### create fraction objects from strings and decimals\n```\n>>> print(fraction('1.2'))\n6/5\n>>> print(fraction('1.22/6'))\n61/300\n```\n##### create fraction objects from recurring decimals\n```\n>>> f = fraction.fromdecimal(1.3, rec='3')\n>>> print(f)\n4/3\n>>> f = fraction.fromdecimal(24.5067, rec='067')\n>>> print(f)\n122411/4995\n```\n##### creates a fraction equal to 3/10\n```\n>>> a = fraction('3/10')\n>>> b = fraction('1/2')\n\n# get numerator/denominator\n>>> a.numerator, a.denominator\n(3, 10)\n```\n### arithmetic operations\n##### computes reciprocal of fraction as fraction object\n```\n>>> recip_a = fraction.reciprocal(a)\n>>> recip_a.numerator, recip_a.denominator\n(10, 3)\n```\n##### perform addition of fraction objects (returns a fraction object)\n```\n>>> sum_ab = a + b\n>>> sum_ab.numerator, sum_ab.denominator\n(4, 5)\n```\n##### perform subtraction of fraction objects (returns a fraction object)\n```\n>>> diff_ab = a - b\n>>> diff_ab.numerator, diff_ab.denominator\n(-1, 5)\n```\n##### perform multiplication of fraction objects (returns a fraction object)\n```\n>>> mul_ab = a * b\n>>> mul_ab.numerator, mul_ab.denominator\n(3, 20)\n```\n##### perform div of fraction objects (returns a fraction object)\n```\n>>> div_ab = a / b\n>>> div_ab.numerator, div_ab.denominator\n(3, 5)\n```\n### comparison/relational operations\n##### supports comparison operations [<, <=, >, >=, ==, !=] (returns boolean)\n```\n>>> a < b\ntrue\n>>> a == fraction(7, 10)\nfalse\n```\n### convert fraction into a float string\n```\n>>> a = fraction('1/3')\n>>> a.todecimal(decplaces=5)\n'0.33333'\n```\n### for debugging \n##### supports str() and repr() built in objects methods\n```\n>>> a = fraction()\n>>> print a\n0/1\n>>> a\nfraction: 0/1\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fraction",
  "package_url": "https://pypi.org/project/Fraction/",
  "project_url": "https://pypi.org/project/Fraction/",
  "project_urls": {
    "Homepage": "https://github.com/bradley101/fraction"
  },
  "release_url": "https://pypi.org/project/Fraction/2.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "fraction carries out all the fraction operations including addition, subtraction, multiplication, division, reciprocation",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "hi@shantanubanerjee.com",
    "shantanu_banerjee"
  ],
  "kwds": "fraction fractional denominator_ reciprocal denominator",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fraction",
  "homepage": "https://github.com/bradley101/fraction",
  "release_count": 10,
  "dependency_ids": []
}
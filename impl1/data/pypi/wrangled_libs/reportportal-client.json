{
  "classifiers": [
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# reportportal python client\n\n[![pypi](https://img.shields.io/pypi/v/reportportal-client.svg?maxage=259200)](https://pypi.python.org/pypi/reportportal-client)\n[![python versions](https://img.shields.io/pypi/pyversions/reportportal-client.svg)](https://pypi.org/project/reportportal-client)\n[![build status](https://github.com/reportportal/client-python/actions/workflows/tests.yml/badge.svg)](https://github.com/reportportal/client-python/actions/workflows/tests.yml)\n[![codecov.io](https://codecov.io/gh/reportportal/client-python/branch/develop/graph/badge.svg)](https://codecov.io/gh/reportportal/client-python)\n[![join slack chat!](https://slack.epmrpp.reportportal.io/badge.svg)](https://slack.epmrpp.reportportal.io/)\n[![stackoverflow](https://img.shields.io/badge/reportportal-stackoverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/reportportal)\n[![build with love](https://img.shields.io/badge/build%20with-\u2764%ef%b8%8f%e2%80%8d-lightgrey.svg)](http://reportportal.io?style=flat)\n\nlibrary used only for implementors of custom listeners for reportportal\n\n## already implemented listeners:\n\n- [pytest framework](https://github.com/reportportal/agent-python-pytest)\n- [robot framework](https://github.com/reportportal/agent-python-robotframework)\n- [behave framework](https://github.com/reportportal/agent-python-behave)\n- [nose framework (archived)](https://github.com/reportportal/agent-python-nosetests)\n\n## installation\n\nthe latest stable version is available on pypi:\n\n```\npip install reportportal-client\n```\n\n## usage\n\nbasic usage example:\n\n```python\nimport os\nimport subprocess\nfrom mimetypes import guess_type\n\nfrom reportportal_client import rpclient\nfrom reportportal_client.helpers import timestamp\n\nendpoint = \"http://docker.local:8080\"\nproject = \"default\"\n# you can get uuid from user profile page in the reportportal.\napi_key = \"1adf271d-505f-44a8-ad71-0afbdf8c83bd\"\nlaunch_name = \"test launch\"\nlaunch_doc = \"testing logging with attachment.\"\n\n\nclient = rpclient(endpoint=endpoint, project=project,\n                  api_key=api_key)\n\n# start log upload thread\nclient.start()\n\n# start launch.\nlaunch = client.start_launch(name=launch_name,\n                             start_time=timestamp(),\n                             description=launch_doc)\n\nitem_id = client.start_test_item(name=\"test case\",\n                                 description=\"first test case\",\n                                 start_time=timestamp(),\n                                 attributes=[{\"key\": \"key\", \"value\": \"value\"},\n                                             {\"value\", \"tag\"}],\n                                 item_type=\"step\",\n                                 parameters={\"key1\": \"val1\",\n                                             \"key2\": \"val2\"})\n\n# create text log message with info level.\nclient.log(time=timestamp(),\n           message=\"hello world!\",\n           level=\"info\")\n\n# create log message with attached text output and warn level.\nclient.log(time=timestamp(),\n           message=\"too high memory usage!\",\n           level=\"warn\",\n           attachment={\n               \"name\": \"free_memory.txt\",\n               \"data\": subprocess.check_output(\"free -h\".split()),\n               \"mime\": \"text/plain\"\n           })\n\n# create log message with binary file, info level and custom mimetype.\nimage = \"/tmp/image.png\"\nwith open(image, \"rb\") as fh:\n    attachment = {\n        \"name\": os.path.basename(image),\n        \"data\": fh.read(),\n        \"mime\": guess_type(image)[0] or \"application/octet-stream\"\n    }\n    client.log(timestamp(), \"screen shot of issue.\", \"info\", attachment)\n\nclient.finish_test_item(item_id=item_id, end_time=timestamp(), status=\"passed\")\n\n# finish launch.\nclient.finish_launch(end_time=timestamp())\n\n# due to async nature of the service we need to call terminate() method which\n# ensures all pending requests to server are processed.\n# failure to call terminate() may result in lost data.\nclient.terminate()\n```\n\n# send attachment (screenshots)\n\nthe client uses `requests` library for working with rp and the same semantics\nto work with attachments (data).\n\nto log an attachment you need to pass file content and metadata to ``\n\n```python\nimport logging\n\nfrom reportportal_client import rplogger, rploghandler\n\nlogging.setloggerclass(rplogger)\nrp_logger = logging.getlogger(__name__)\nrp_logger.setlevel(logging.debug)\nrp_logger.addhandler(rploghandler())\n\nscreenshot_file_path = 'path/to/file.png'\n\nwith open(screenshot_file_path, \"rb\") as image_file:\n    file_data = image_file.read()\n\n    # noinspection pyargumentlist\n    rp_logger.info(\n        \"some text here\",\n        attachment={\"name\": \"test_name_screenshot.png\",\n                    \"data\": file_data,\n                    \"mime\": \"image/png\"}\n    )\n```\n\n# copyright notice\n\nlicensed under the [apache 2.0](https://www.apache.org/licenses/license-2.0)\nlicense (see the license.txt file).\n",
  "docs_url": null,
  "keywords": "testing,reporting,reportportal,client",
  "license": "apache 2.0.",
  "name": "reportportal-client",
  "package_url": "https://pypi.org/project/reportportal-client/",
  "project_url": "https://pypi.org/project/reportportal-client/",
  "project_urls": {
    "Download": "https://github.com/reportportal/client-Python/tarball/5.5.4",
    "Homepage": "https://github.com/reportportal/client-Python"
  },
  "release_url": "https://pypi.org/project/reportportal-client/5.5.4/",
  "requires_dist": [
    "aenum",
    "requests >=2.28.0",
    "aiohttp >=3.8.3",
    "certifi >=2023.7.22"
  ],
  "requires_python": "",
  "summary": "python client for reportportal v5.",
  "version": "5.5.4",
  "releases": [],
  "developers": [
    "reportportal_team",
    "support@reportportal.io"
  ],
  "kwds": "reportportal_client reportportal pyversions pytest reporting",
  "license_kwds": "apache 2.0.",
  "libtype": "pypi",
  "id": "pypi_reportportal_client",
  "homepage": "https://github.com/reportportal/client-python",
  "release_count": 43,
  "dependency_ids": [
    "pypi_aenum",
    "pypi_aiohttp",
    "pypi_certifi",
    "pypi_requests"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: utilities"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/meshio\"><img alt=\"meshio\" src=\"https://nschloe.github.io/meshio/logo-with-text.svg\" width=\"60%\"></a>\n  <p align=\"center\">i/o for mesh files.</p>\n</p>\n\n[![pypi version](https://img.shields.io/pypi/v/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)\n[![anaconda cloud](https://anaconda.org/conda-forge/meshio/badges/version.svg?=style=flat-square)](https://anaconda.org/conda-forge/meshio/)\n[![packaging status](https://repology.org/badge/tiny-repos/python:meshio.svg)](https://repology.org/project/python:meshio/versions)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/meshio.svg?style=flat-square)](https://pypi.org/project/meshio/)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.1173115.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173115)\n[![github stars](https://img.shields.io/github/stars/nschloe/meshio.svg?style=flat-square&logo=github&label=stars&logocolor=white)](https://github.com/nschloe/meshio)\n[![downloads](https://pepy.tech/badge/meshio/month?style=flat-square)](https://pepy.tech/project/meshio)\n\n<!--[![pypi downloads](https://img.shields.io/pypi/dm/meshio.svg?style=flat-square)](https://pypistats.org/packages/meshio)-->\n\n[![discord](https://img.shields.io/static/v1?logo=discord&logocolor=white&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/z6dmsjh4hr)\n\n[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/meshio/ci?style=flat-square)](https://github.com/nschloe/meshio/actions?query=workflow%3aci)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/meshio.svg?style=flat-square)](https://app.codecov.io/gh/nschloe/meshio)\n[![lgtm](https://img.shields.io/lgtm/grade/python/github/nschloe/meshio.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/meshio)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\nthere are various mesh formats available for representing unstructured meshes.\nmeshio can read and write all of the following and smoothly converts between them:\n\n> [abaqus](http://abaqus.software.polimi.it/v6.14/index.html) (`.inp`),\n> ansys msh (`.msh`),\n> [avs-ucd](https://lanl.github.io/lagrit/pages/docs/read_avs.html) (`.avs`),\n> [cgns](https://cgns.github.io/) (`.cgns`),\n> [dolfin xml](https://manpages.ubuntu.com/manpages/jammy/en/man1/dolfin-convert.1.html) (`.xml`),\n> [exodus](https://nschloe.github.io/meshio/exodus.pdf) (`.e`, `.exo`),\n> [flac3d](https://www.itascacg.com/software/flac3d) (`.f3grid`),\n> [h5m](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html) (`.h5m`),\n> [kratos/mdpa](https://github.com/kratosmultiphysics/kratos/wiki/input-data) (`.mdpa`),\n> [medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html) (`.mesh`, `.meshb`),\n> [med/salome](https://docs.salome-platform.org/latest/dev/medcoupling/developer/med-file.html) (`.med`),\n> [nastran](https://help.autodesk.com/view/nstrn/2019/enu/?guid=guid-42b54acb-fbe3-47ca-b8fe-475e7ad91a00) (bulk data, `.bdf`, `.fem`, `.nas`),\n> [netgen](https://github.com/ngsolve/netgen) (`.vol`, `.vol.gz`),\n> [neuroglancer precomputed format](https://github.com/google/neuroglancer/tree/master/src/neuroglancer/datasource/precomputed#mesh-representation-of-segmented-object-surfaces),\n> [gmsh](https://gmsh.info/doc/texinfo/gmsh.html#file-formats) (format versions 2.2, 4.0, and 4.1, `.msh`),\n> [obj](https://en.wikipedia.org/wiki/wavefront_.obj_file) (`.obj`),\n> [off](https://segeval.cs.princeton.edu/public/off_format.html) (`.off`),\n> [permas](https://www.intes.de) (`.post`, `.post.gz`, `.dato`, `.dato.gz`),\n> [ply](<https://en.wikipedia.org/wiki/ply_(file_format)>) (`.ply`),\n> [stl](<https://en.wikipedia.org/wiki/stl_(file_format)>) (`.stl`),\n> [tecplot .dat](http://paulbourke.net/dataformats/tp/),\n> [tetgen .node/.ele](https://wias-berlin.de/software/tetgen/fformats.html),\n> [svg](https://www.w3.org/tr/svg/) (2d output only) (`.svg`),\n> [su2](https://su2code.github.io/docs_v7/mesh-file/) (`.su2`),\n> [ugrid](https://www.simcenter.msstate.edu/software/documentation/ug_io/3d_grid_file_type_ugrid.html) (`.ugrid`),\n> [vtk](https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf) (`.vtk`),\n> [vtu](https://vtk.org/wiki/vtk_xml_formats) (`.vtu`),\n> [wkt](https://en.wikipedia.org/wiki/well-known_text_representation_of_geometry) ([tin](https://en.wikipedia.org/wiki/triangulated_irregular_network)) (`.wkt`),\n> [xdmf](https://xdmf.org/index.php/xdmf_model_and_format) (`.xdmf`, `.xmf`).\n\n([here's a little survey](https://forms.gle/psenb3n3gv3wbeus8) on which formats are actually\nused.)\n\ninstall with one of\n\n```\npip install meshio[all]\nconda install -c conda-forge meshio\n```\n\n(`[all]` pulls in all optional dependencies. by default, meshio only uses numpy.)\nyou can then use the command-line tool\n\n<!--pytest-codeblocks:skip-->\n\n```sh\nmeshio convert    input.msh output.vtk   # convert between two formats\n\nmeshio info       input.xdmf             # show some info about the mesh\n\nmeshio compress   input.vtu              # compress the mesh file\nmeshio decompress input.vtu              # decompress the mesh file\n\nmeshio binary     input.msh              # convert to binary format\nmeshio ascii      input.msh              # convert to ascii format\n```\n\nwith any of the supported formats.\n\nin python, simply do\n\n<!--pytest-codeblocks:skip-->\n\n```python\nimport meshio\n\nmesh = meshio.read(\n    filename,  # string, os.pathlike, or a buffer/open file\n    # file_format=\"stl\",  # optional if filename is a path; inferred from extension\n    # see meshio-convert -h for all possible formats\n)\n# mesh.points, mesh.cells, mesh.cells_dict, ...\n\n# mesh.vtk.read() is also possible\n```\n\nto read a mesh. to write, do\n\n```python\nimport meshio\n\n# two triangles and one quad\npoints = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [0.0, 1.0],\n    [1.0, 1.0],\n    [2.0, 0.0],\n    [2.0, 1.0],\n]\ncells = [\n    (\"triangle\", [[0, 1, 2], [1, 3, 2]]),\n    (\"quad\", [[1, 4, 5, 3]]),\n]\n\nmesh = meshio.mesh(\n    points,\n    cells,\n    # optionally provide extra data on points, cells, etc.\n    point_data={\"t\": [0.3, -1.2, 0.5, 0.7, 0.0, -3.0]},\n    # each item in cell data must match the cells array\n    cell_data={\"a\": [[0.1, 0.2], [0.4]]},\n)\nmesh.write(\n    \"foo.vtk\",  # str, os.pathlike, or buffer/open file\n    # file_format=\"vtk\",  # optional if first argument is a path; inferred from extension\n)\n\n# alternative with the same options\nmeshio.write_points_cells(\"foo.vtk\", points, cells)\n```\n\nfor both input and output, you can optionally specify the exact `file_format`\n(in case you would like to enforce ascii over binary vtk, for example).\n\n#### time series\n\nthe [xdmf format](https://xdmf.org/index.php/xdmf_model_and_format) supports\ntime series with a shared mesh. you can write times series data using meshio\nwith\n\n<!--pytest-codeblocks:skip-->\n\n```python\nwith meshio.xdmf.timeserieswriter(filename) as writer:\n    writer.write_points_cells(points, cells)\n    for t in [0.0, 0.1, 0.21]:\n        writer.write_data(t, point_data={\"phi\": data})\n```\n\nand read it with\n\n<!--pytest-codeblocks:skip-->\n\n```python\nwith meshio.xdmf.timeseriesreader(filename) as reader:\n    points, cells = reader.read_points_cells()\n    for k in range(reader.num_steps):\n        t, point_data, cell_data = reader.read_data(k)\n```\n\n### paraview plugin\n\n<img alt=\"gmsh paraview\" src=\"https://nschloe.github.io/meshio/gmsh-paraview.png\" width=\"60%\">\n*a gmsh file opened with paraview.*\n\nif you have downloaded a binary version of paraview, you may proceed as follows.\n\n- install meshio for the python major version that paraview uses (check `pvpython --version`)\n- open paraview\n- find the file `paraview-meshio-plugin.py` of your meshio installation (on linux:\n  `~/.local/share/paraview-5.9/plugins/`) and load it under _tools / manage plugins / load new_\n- _optional:_ activate _auto load_\n\nyou can now open all meshio-supported files in paraview.\n\n### performance comparison\n\nthe comparisons here are for a triangular mesh with about 900k points and 1.8m\ntriangles. the red lines mark the size of the mesh in memory.\n\n#### file sizes\n\n<img alt=\"file size\" src=\"https://nschloe.github.io/meshio/filesizes.svg\" width=\"60%\">\n\n#### i/o speed\n\n<img alt=\"performance\" src=\"https://nschloe.github.io/meshio/performance.svg\" width=\"90%\">\n\n#### maximum memory usage\n\n<img alt=\"memory usage\" src=\"https://nschloe.github.io/meshio/memory.svg\" width=\"90%\">\n\n### installation\n\nmeshio is [available from the python package index](https://pypi.org/project/meshio/),\nso simply run\n\n```\npip install meshio\n```\n\nto install.\n\nadditional dependencies (`netcdf4`, `h5py`) are required for some of the output formats\nand can be pulled in by\n\n```\npip install meshio[all]\n```\n\nyou can also install meshio from [anaconda](https://anaconda.org/conda-forge/meshio):\n\n```\nconda install -c conda-forge meshio\n```\n\n### testing\n\nto run the meshio unit tests, check out this repository and type\n\n```\ntox\n```\n\n### license\n\nmeshio is published under the [mit license](https://en.wikipedia.org/wiki/mit_license).\n\n\n",
  "docs_url": null,
  "keywords": "mesh,file formats,scientific,engineering,fem,finite elements",
  "license": "mit",
  "name": "meshio",
  "package_url": "https://pypi.org/project/meshio/",
  "project_url": "https://pypi.org/project/meshio/",
  "project_urls": {
    "Code": "https://github.com/nschloe/meshio",
    "Funding": "https://github.com/sponsors/nschloe",
    "Homepage": "https://github.com/nschloe/meshio",
    "Issues": "https://github.com/nschloe/meshio/issues"
  },
  "release_url": "https://pypi.org/project/meshio/5.3.4/",
  "requires_dist": [
    "numpy",
    "rich",
    "importlib-metadata ; python_version < \"3.8\"",
    "netCDF4 ; extra == 'all'",
    "h5py ; extra == 'all'"
  ],
  "requires_python": ">=3.7",
  "summary": "i/o for many mesh formats",
  "version": "5.3.4",
  "releases": [],
  "developers": [
    "nico.schloemer@gmail.com"
  ],
  "kwds": "meshio mesh meshb meshes logo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_meshio",
  "homepage": "https://github.com/nschloe/meshio",
  "release_count": 212,
  "dependency_ids": [
    "pypi_h5py",
    "pypi_importlib_metadata",
    "pypi_netcdf4",
    "pypi_numpy",
    "pypi_rich"
  ]
}
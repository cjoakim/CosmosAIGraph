{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pytest-sanic\n============\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - build\n      - | |travis|\n    * - docs\n      - |docs|\n    * - package\n      - | |version| |wheel| |supported-versions| |supported-implementations|\n\n.. |travis| image:: https://travis-ci.org/yunstanford/pytest-sanic.svg?branch=master\n    :alt: travis-ci build status\n    :target: https://travis-ci.org/yunstanford/pytest-sanic\n\n.. |docs| image:: https://readthedocs.org/projects/pytest-sanic/badge/?style=flat\n    :target: https://readthedocs.org/projects/pytest-sanic\n    :alt: documentation status\n\n.. |version| image:: https://img.shields.io/pypi/v/pytest-sanic.svg\n    :alt: pypi package latest release\n    :target: https://pypi.python.org/pypi/pytest-sanic\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/pytest-sanic.svg\n    :alt: pypi wheel\n    :target: https://pypi.python.org/pypi/pytest-sanic\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/pytest-sanic.svg\n    :alt: supported versions\n    :target: https://pypi.python.org/pypi/pytest-sanic\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/pytest-sanic.svg\n    :alt: supported implementations\n    :target: https://pypi.python.org/pypi/pytest-sanic\n\n.. end-badges\n\na pytest plugin for `sanic <http://sanic.readthedocs.io/en/latest/>`_. it helps you to test your code asynchronously.\n\nthis plugin provides:\n\n* very easy testing with async coroutines\n* common and useful fixtures\n* asynchronous fixture support\n* test_client/sanic_client for sanic application\n* test_server for sanic application\n\n\nyou can find out more here:\n\nhttp://pytest-sanic.readthedocs.io/en/latest/\n\n\nreleases and change logs can be found here:\n\nhttps://github.com/yunstanford/pytest-sanic/releases\n\n\n-------\ninstall\n-------\n\n.. code::\n\n    pip install pytest-sanic\n\n\n-----------\nquick start\n-----------\n\nyou don't have to load ``pytest-sanic`` explicitly. ``pytest`` will do it for you.\n\nyou can set up a fixture for your ``app`` like this:\n\n.. code-block:: python\n\n    import pytest\n    from .app import create_app\n\n    @pytest.yield_fixture\n    def app():\n        app = create_app(test_config, **params)\n        yield app\n\nthis ``app`` fixture can then be used from tests:\n\n.. code-block:: python\n\n    async def test_sanic_db_find_by_id(app):\n        \"\"\"\n        let's assume that, in db we have,\n            {\n                \"id\": \"123\",\n                \"name\": \"kobe bryant\",\n                \"team\": \"lakers\",\n            }\n        \"\"\"\n        doc = await app.db[\"players\"].find_by_id(\"123\")\n        assert doc.name == \"kobe bryant\"\n        assert doc.team == \"lakers\"\n\nto send requests to your ``app``, you set up a client fixture using the loop_ and sanic_client_ fixtures:\n\n.. code-block:: python\n\n    @pytest.fixture\n    def test_cli(loop, app, sanic_client):\n        return loop.run_until_complete(sanic_client(app))\n\nthis ``test_cli`` fixture can then be used to send requests to your ``app``:\n\n.. code-block:: python\n\n    async def test_index(test_cli):\n        resp = await test_cli.get('/')\n        assert resp.status_code == 200\n\n    async def test_player(test_cli):\n        resp = await test_cli.get('/player')\n        assert resp.status_code == 200\n\n--------------------\nasynchronous fixture\n--------------------\n\n``pytest-sanic`` also supports asynchronous fixtures, just writes them like common pytest fixtures.\n\n.. code-block:: python\n\n    @pytest.fixture\n    async def async_fixture_sleep():\n        await asyncio.sleep(0.1)\n        return \"sleep...\"\n\n\n--------\nfixtures\n--------\n\nsome fixtures for easy testing.\n\n``loop``\n~~~~~~~~\n\n``pytest-sanic`` creates an event loop and injects it as a fixture. ``pytest`` will use this event loop to run your ``async tests``.\nby default, fixture ``loop`` is an instance of `asyncio.new_event_loop`. but `uvloop` is also an option for you, by simpy passing\n``--loop uvloop``. keep mind to just use one single event loop.\n\n\n``unused_port``\n~~~~~~~~~~~~~~~\n\nan unused tcp port on the localhost.\n\n\n``test_server``\n~~~~~~~~~~~~~~~\n\ncreates a testserver instance by giving a ``sanic`` application. it's very easy to utilize ``test_server`` to create your `sanic`\napplication server for testing.\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def app():\n        app = sanic(\"test_sanic_app\")\n\n        @app.route(\"/test_get\", methods=['get'])\n        async def test_get(request):\n            return response.json({\"get\": true})\n\n        yield app\n\n    @pytest.fixture\n    def sanic_server(loop, app, test_server):\n        return loop.run_until_complete(test_server(app))\n\nyou can also very easily override this ``loop`` fixture by creating your own, simply like,\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def loop():\n        loop = myeventloop()\n        yield loop\n        loop.close()\n\n``test_client``\n~~~~~~~~~~~~~~~\n\n``test_client`` has been deprecated, please use `sanic_client` instead, check out `issue <https://github.com/yunstanford/pytest-sanic/issues/22>`_ for more context.\n\n\n``sanic_client``\n~~~~~~~~~~~~~~~~\n\ncreates a testclient instance by giving a ``sanic`` application. you can simply have a client by using ``sanic_client``, like\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def app():\n        app = sanic(\"test_sanic_app\")\n\n        @app.route(\"/test_get\", methods=['get'])\n        async def test_get(request):\n            return response.json({\"get\": true})\n\n        @app.route(\"/test_post\", methods=['post'])\n        async def test_post(request):\n            return response.json({\"post\": true})\n\n        @app.route(\"/test_put\", methods=['put'])\n        async def test_put(request):\n            return response.json({\"put\": true})\n\n        @app.route(\"/test_delete\", methods=['delete'])\n        async def test_delete(request):\n            return response.json({\"delete\": true})\n\n        @app.route(\"/test_patch\", methods=['patch'])\n        async def test_patch(request):\n            return response.json({\"patch\": true})\n\n        @app.route(\"/test_options\", methods=['options'])\n        async def test_options(request):\n            return response.json({\"options\": true})\n\n        @app.route(\"/test_head\", methods=['head'])\n        async def test_head(request):\n            return response.json({\"head\": true})\n\n        @app.websocket(\"/test_ws\")\n        async def test_ws(request, ws):\n            data = await ws.recv()\n            await ws.send(data)\n\n        yield app\n\n    @pytest.fixture\n    def test_cli(loop, app, sanic_client):\n        return loop.run_until_complete(sanic_client(app, protocol=websocketprotocol))\n\n    #########\n    # tests #\n    #########\n\n    async def test_fixture_test_client_get(test_cli):\n        \"\"\"\n        get request\n        \"\"\"\n        resp = await test_cli.get('/test_get')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"get\": true}\n\n    async def test_fixture_test_client_post(test_cli):\n        \"\"\"\n        post request\n        \"\"\"\n        resp = await test_cli.post('/test_post')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"post\": true}\n\n    async def test_fixture_test_client_put(test_cli):\n        \"\"\"\n        put request\n        \"\"\"\n        resp = await test_cli.put('/test_put')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"put\": true}\n\n    async def test_fixture_test_client_delete(test_cli):\n        \"\"\"\n        delete request\n        \"\"\"\n        resp = await test_cli.delete('/test_delete')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"delete\": true}\n\n    async def test_fixture_test_client_patch(test_cli):\n        \"\"\"\n        patch request\n        \"\"\"\n        resp = await test_cli.patch('/test_patch')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"patch\": true}\n\n    async def test_fixture_test_client_options(test_cli):\n        \"\"\"\n        options request\n        \"\"\"\n        resp = await test_cli.options('/test_options')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        assert resp_json == {\"options\": true}\n\n    async def test_fixture_test_client_head(test_cli):\n        \"\"\"\n        head request\n        \"\"\"\n        resp = await test_cli.head('/test_head')\n        assert resp.status_code == 200\n        resp_json = resp.json()\n        # head should not have body\n        assert resp_json is none\n\n    async def test_fixture_test_client_ws(test_cli):\n        \"\"\"\n        websockets\n        \"\"\"\n        ws_conn = await test_cli.ws_connect('/test_ws')\n        data = 'hello world!'\n        await ws_conn.send(data)\n        msg = await ws_conn.recv()\n        assert msg == data\n        await ws_conn.close()\n\n\nsmall notes:\n\n``test_cli.ws_connect`` does not work in ``sanic.__version__ <= '0.5.4'``, because of a sanic bug, but it\nhas been fixed in master branch. and ``websockets.__version__ >= '4.0'`` has broken websockets in ``sanic.__version__ <= '0.6.0'``, but it has been fixed in `master <https://github.com/channelcat/sanic/commit/bca1e084116335fd939c2ee226070f0428cd5de8>`_.\n\n\n----\ntips\n----\n\n* `blueprints testing <https://github.com/yunstanford/pytest-sanic/issues/3>`_\n* ``test_cli.ws_connect`` does not work in ``sanic.__version__ <= '0.5.4'``, because of a sanic bug, but it has been fixed in master branch.\n* `importing app has loop already running <https://github.com/yunstanford/pytest-sanic/issues/1>`_ when you have `db_init` listeners.\n* `incorrect coverage report <https://github.com/pytest-dev/pytest-cov/issues/117>`_ with ``pytest-cov``, but we can have workarounds for this issue, it's a pytest loading plugin problem essentially.\n* websockets > 4.0 has broken websockets in ``sanic.__version__ <= '0.6.0'``, but it has been fixed in `this commit <https://github.com/channelcat/sanic/commit/bca1e084116335fd939c2ee226070f0428cd5de8>`_\n\n\nfeel free to create issue if you have any question. you can also check out `closed issues <https://github.com/yunstanford/pytest-sanic/issues?q=is%3aclosed>`_\n\n\n-----------\ndevelopment\n-----------\n\n``pytest-sanic`` accepts contributions on github, in the form of issues or pull requests.\n\n\nbuild.\n\n.. code::\n\n    poetry install\n\n\nrun unit tests.\n\n.. code::\n\n    poetry run pytest ./tests --cov pytest_sanic\n\n\n---------\nreference\n---------\n\nsome useful pytest plugins:\n\n* `pytest-tornado <https://github.com/eugeniy/pytest-tornado>`_\n* `pytest-asyncio <https://github.com/pytest-dev/pytest-asyncio>`_\n* `pytest-aiohttp <https://github.com/aio-libs/pytest-aiohttp>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-sanic",
  "package_url": "https://pypi.org/project/pytest-sanic/",
  "project_url": "https://pypi.org/project/pytest-sanic/",
  "project_urls": {
    "Documentation": "https://pytest-sanic.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/yunstanford/pytest-sanic",
    "Repository": "https://github.com/yunstanford/pytest-sanic"
  },
  "release_url": "https://pypi.org/project/pytest-sanic/1.9.1/",
  "requires_dist": [
    "pytest (>=5.2)",
    "async_generator (>=1.10,<2.0)",
    "httpx (>=0.18.1)",
    "websockets (>=9.1,<11.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "a pytest plugin for sanic",
  "version": "1.9.1",
  "releases": [],
  "developers": [
    "yun_xu",
    "yunxu1992@gmail.com"
  ],
  "kwds": "pytest_sanic pytest badges pyversions sanic",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_sanic",
  "homepage": "https://github.com/yunstanford/pytest-sanic",
  "release_count": 30,
  "dependency_ids": [
    "pypi_async_generator",
    "pypi_httpx",
    "pypi_pytest",
    "pypi_websockets"
  ]
}
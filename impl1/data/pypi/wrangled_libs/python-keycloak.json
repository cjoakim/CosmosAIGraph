{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "[![circleci](https://github.com/marcospereirampj/python-keycloak/actions/workflows/daily.yaml/badge.svg)](https://github.com/marcospereirampj/python-keycloak/)\n[![documentation status](https://readthedocs.org/projects/python-keycloak/badge/?version=latest)](http://python-keycloak.readthedocs.io/en/latest/?badge=latest)\n\n# python keycloak\n\nfor review- see https://github.com/marcospereirampj/python-keycloak\n\n**python-keycloak** is a python package providing access to the keycloak api.\n\n## installation\n\n### via pypi package:\n\n`$ pip install python-keycloak`\n\n### manually\n\n`$ python setup.py install`\n\n## dependencies\n\npython-keycloak depends on:\n\n- python 3\n- [requests](https://requests.readthedocs.io)\n- [python-jose](http://python-jose.readthedocs.io/en/latest/)\n- [urllib3](https://urllib3.readthedocs.io/en/stable/)\n\n### tests dependencies\n\n- [tox](https://tox.readthedocs.io/)\n- [pytest](https://docs.pytest.org/en/latest/)\n- [pytest-cov](https://github.com/pytest-dev/pytest-cov)\n- [wheel](https://github.com/pypa/wheel)\n\n## bug reports\n\nplease report bugs and feature requests at\nhttps://github.com/marcospereirampj/python-keycloak/issues\n\n## documentation\n\nthe documentation for python-keycloak is available on [readthedocs](http://python-keycloak.readthedocs.io).\n\n## contributors\n\n- [agriness team](http://www.agriness.com/pt/)\n- [marcos pereira](marcospereira.mpj@gmail.com)\n- [martin devlin](https://bitbucket.org/devlinmpearson/)\n- [shon t. urbas](https://bitbucket.org/surbas/)\n- [markus spanier](https://bitbucket.org/spanierm/)\n- [remco kranenburg](https://bitbucket.org/remco47/)\n- [armin](https://bitbucket.org/arminfelder/)\n- [njordr](https://bitbucket.org/njordr/)\n- [josha inglis](https://bitbucket.org/joshainglis/)\n- [alex](https://bitbucket.org/alex_zel/)\n- [ewan jone](https://bitbucket.org/kisamoto/)\n- [lukas martini](https://github.com/lutoma)\n- [adamatics](https://www.adamatics.com)\n\n## usage\n\n```python\nfrom keycloak import keycloakopenid\n\n# configure client\nkeycloak_openid = keycloakopenid(server_url=\"http://localhost:8080/auth/\",\n                                 client_id=\"example_client\",\n                                 realm_name=\"example_realm\",\n                                 client_secret_key=\"secret\")\n\n# get wellknown\nconfig_well_known = keycloak_openid.well_known()\n\n# get code with oauth authorization request\nauth_url = keycloak_openid.auth_url(\n    redirect_uri=\"your_call_back_url\",\n    scope=\"email\",\n    state=\"your_state_info\")\n\n# get access token with code\naccess_token = keycloak_openid.token(\n    grant_type='authorization_code',\n    code='the_code_you_get_from_auth_url_callback',\n    redirect_uri=\"your_call_back_url\")\n\n\n# get token\ntoken = keycloak_openid.token(\"user\", \"password\")\ntoken = keycloak_openid.token(\"user\", \"password\", totp=\"012345\")\n\n# get token using token exchange\ntoken = keycloak_openid.exchange_token(token['access_token'], \"my_client\", \"other_client\", \"some_user\")\n\n# get userinfo\nuserinfo = keycloak_openid.userinfo(token['access_token'])\n\n# refresh token\ntoken = keycloak_openid.refresh_token(token['refresh_token'])\n\n# logout\nkeycloak_openid.logout(token['refresh_token'])\n\n# get certs\ncerts = keycloak_openid.certs()\n\n# get rpt (entitlement)\ntoken = keycloak_openid.token(\"user\", \"password\")\nrpt = keycloak_openid.entitlement(token['access_token'], \"resource_id\")\n\n# introspect rpt\ntoken_rpt_info = keycloak_openid.introspect(keycloak_openid.introspect(token['access_token'], rpt=rpt['rpt'],\n                                                                       token_type_hint=\"requesting_party_token\"))\n\n# introspect token\ntoken_info = keycloak_openid.introspect(token['access_token'])\n\n# decode token\nkeycloak_public_key = \"-----begin public key-----\\n\" + keycloak_openid.public_key() + \"\\n-----end public key-----\"\noptions = {\"verify_signature\": true, \"verify_aud\": true, \"verify_exp\": true}\ntoken_info = keycloak_openid.decode_token(token['access_token'], key=keycloak_public_key, options=options)\n\n# get permissions by token\ntoken = keycloak_openid.token(\"user\", \"password\")\nkeycloak_openid.load_authorization_config(\"example-authz-config.json\")\npolicies = keycloak_openid.get_policies(token['access_token'], method_token_info='decode', key=keycloak_public_key)\npermissions = keycloak_openid.get_permissions(token['access_token'], method_token_info='introspect')\n\n# get uma-permissions by token\ntoken = keycloak_openid.token(\"user\", \"password\")\npermissions = keycloak_openid.uma_permissions(token['access_token'])\n\n# get uma-permissions by token with specific resource and scope requested\ntoken = keycloak_openid.token(\"user\", \"password\")\npermissions = keycloak_openid.uma_permissions(token['access_token'], permissions=\"resource#scope\")\n\n# get auth status for a specific resource and scope by token\ntoken = keycloak_openid.token(\"user\", \"password\")\nauth_status = keycloak_openid.has_uma_access(token['access_token'], \"resource#scope\")\n\n\n# keycloak admin\n\nfrom keycloak import keycloakadmin\nfrom keycloak import keycloakopenidconnection\n\nkeycloak_connection = keycloakopenidconnection(\n                        server_url=\"http://localhost:8080/\",\n                        username='example-admin',\n                        password='secret',\n                        realm_name=\"master\",\n                        user_realm_name=\"only_if_other_realm_than_master\",\n                        client_id=\"my_client\",\n                        client_secret_key=\"client-secret\",\n                        verify=true)\n\nkeycloak_admin = keycloakadmin(connection=keycloak_connection)\n\n# add user\nnew_user = keycloak_admin.create_user({\"email\": \"example@example.com\",\n                                       \"username\": \"example@example.com\",\n                                       \"enabled\": true,\n                                       \"firstname\": \"example\",\n                                       \"lastname\": \"example\"})\n\n# add user and raise exception if username already exists\n# exist_ok currently defaults to true for backwards compatibility reasons\nnew_user = keycloak_admin.create_user({\"email\": \"example@example.com\",\n                                       \"username\": \"example@example.com\",\n                                       \"enabled\": true,\n                                       \"firstname\": \"example\",\n                                       \"lastname\": \"example\"},\n                                      exist_ok=false)\n\n# add user and set password\nnew_user = keycloak_admin.create_user({\"email\": \"example@example.com\",\n                                       \"username\": \"example@example.com\",\n                                       \"enabled\": true,\n                                       \"firstname\": \"example\",\n                                       \"lastname\": \"example\",\n                    \"credentials\": [{\"value\": \"secret\",\"type\": \"password\",}]})\n\n# add user and specify a locale\nnew_user = keycloak_admin.create_user({\"email\": \"example@example.fr\",\n                                       \"username\": \"example@example.fr\",\n                                       \"enabled\": true,\n                                       \"firstname\": \"example\",\n                                       \"lastname\": \"example\",\n                                       \"attributes\": {\n                                           \"locale\": [\"fr\"]\n                                       }})\n\n# user counter\ncount_users = keycloak_admin.users_count()\n\n# get users returns a list of users, filtered according to query parameters\nusers = keycloak_admin.get_users({})\n\n# get user id from username\nuser_id_keycloak = keycloak_admin.get_user_id(\"username-keycloak\")\n\n# get user\nuser = keycloak_admin.get_user(\"user-id-keycloak\")\n\n# update user\nresponse = keycloak_admin.update_user(user_id=\"user-id-keycloak\",\n                                      payload={'firstname': 'example update'})\n\n# update user password\nresponse = keycloak_admin.set_user_password(user_id=\"user-id-keycloak\", password=\"secret\", temporary=true)\n\n# get user credentials\ncredentials = keycloak_admin.get_credentials(user_id='user_id')\n\n# get user credential by id\ncredential = keycloak_admin.get_credential(user_id='user_id', credential_id='credential_id')\n\n# delete user credential\nresponse = keycloak_admin.delete_credential(user_id='user_id', credential_id='credential_id')\n\n# delete user\nresponse = keycloak_admin.delete_user(user_id=\"user-id-keycloak\")\n\n# get consents granted by the user\nconsents = keycloak_admin.consents_user(user_id=\"user-id-keycloak\")\n\n# send user action\nresponse = keycloak_admin.send_update_account(user_id=\"user-id-keycloak\",\n                                              payload=['update_password'])\n\n# send verify email\nresponse = keycloak_admin.send_verify_email(user_id=\"user-id-keycloak\")\n\n# get sessions associated with the user\nsessions = keycloak_admin.get_sessions(user_id=\"user-id-keycloak\")\n\n# get themes, social providers, auth providers, and event listeners available on this server\nserver_info = keycloak_admin.get_server_info()\n\n# get clients belonging to the realm returns a list of clients belonging to the realm\nclients = keycloak_admin.get_clients()\n\n# get client - id (not client-id) from client by name\nclient_id = keycloak_admin.get_client_id(\"my-client\")\n\n# get representation of the client - id of client (not client-id)\nclient = keycloak_admin.get_client(client_id=\"client_id\")\n\n# get all roles for the realm or client\nrealm_roles = keycloak_admin.get_realm_roles()\n\n# get all roles for the realm or client that their names includes the searched text\nrealm_roles = keycloak_admin.get_realm_roles(search_text=\"companya_\")\n\n# get all roles for the client\nclient_roles = keycloak_admin.get_client_roles(client_id=\"client_id\")\n\n# get client role\nrole = keycloak_admin.get_client_role(client_id=\"client_id\", role_name=\"role_name\")\n\n# warning: deprecated\n# get client role id from name\nrole_id = keycloak_admin.get_client_role_id(client_id=\"client_id\", role_name=\"test\")\n\n# create client role\nkeycloak_admin.create_client_role(client_role_id='client_id', payload={'name': 'rolename', 'clientrole': true})\n\n# assign client role to user. note that both role_name and role_id appear to be required.\nkeycloak_admin.assign_client_role(client_id=\"client_id\", user_id=\"user_id\", role_id=\"role_id\", role_name=\"test\")\n\n# retrieve client roles of a user.\nkeycloak_admin.get_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# retrieve available client roles of a user.\nkeycloak_admin.get_available_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# retrieve composite client roles of a user.\nkeycloak_admin.get_composite_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# delete client roles of a user.\nkeycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles={\"id\": \"role-id\"})\nkeycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles=[{\"id\": \"role-id_1\"}, {\"id\": \"role-id_2\"}])\n\n# get the client authorization settings\nclient_authz_settings = get_client_authz_settings(client_id=\"client_id\")\n\n# get all client authorization resources\nclient_resources = get_client_authz_resources(client_id=\"client_id\")\n\n# get all client authorization scopes\nclient_scopes = get_client_authz_scopes(client_id=\"client_id\")\n\n# get all client authorization permissions\nclient_permissions = get_client_authz_permissions(client_id=\"client_id\")\n\n# get all client authorization policies\nclient_policies = get_client_authz_policies(client_id=\"client_id\")\n\n# create new group\ngroup = keycloak_admin.create_group({\"name\": \"example group\"})\n\n# get all groups\ngroups = keycloak_admin.get_groups()\n\n# get group\ngroup = keycloak_admin.get_group(group_id='group_id')\n\n# get group by name\ngroup = keycloak_admin.get_group_by_path(path='/group/subgroup')\n\n# function to trigger user sync from provider\nsync_users(storage_id=\"storage_di\", action=\"action\")\n\n# get client role id from name\nrole_id = keycloak_admin.get_client_role_id(client_id=client_id, role_name=\"test\")\n\n# assign client role to user. note that both role_name and role_id appear to be required.\nkeycloak_admin.assign_client_role(client_id=client_id, user_id=user_id, role_id=role_id, role_name=\"test\")\n\n# assign realm roles to user\nkeycloak_admin.assign_realm_roles(user_id=user_id, roles=realm_roles)\n\n# assign realm roles to client's scope\nkeycloak_admin.assign_realm_roles_to_client_scope(client_id=client_id, roles=realm_roles)\n\n# get realm roles assigned to client's scope\nkeycloak_admin.get_realm_roles_of_client_scope(client_id=client_id)\n\n# remove realm roles assigned to client's scope\nkeycloak_admin.delete_realm_roles_of_client_scope(client_id=client_id, roles=realm_roles)\n\nanother_client_id = keycloak_admin.get_client_id(\"my-client-2\")\n\n# assign client roles to client's scope\nkeycloak_admin.assign_client_roles_to_client_scope(client_id=another_client_id, client_roles_owner_id=client_id, roles=client_roles)\n\n# get client roles assigned to client's scope\nkeycloak_admin.get_client_roles_of_client_scope(client_id=another_client_id, client_roles_owner_id=client_id)\n\n# remove client roles assigned to client's scope\nkeycloak_admin.delete_client_roles_of_client_scope(client_id=another_client_id, client_roles_owner_id=client_id, roles=client_roles)\n\n# get all idp providers\nidps = keycloak_admin.get_idps()\n\n# get a specific idp provider, using its alias\nidp = keycloak_admin.get_idp(\"idp-alias\")\n\n# create a new realm\nkeycloak_admin.create_realm(payload={\"realm\": \"demo\"}, skip_exists=false)\n\n# changing realm\nkeycloak_admin = keycloakadmin(realm_name=\"main\", ...)\nkeycloak_admin.get_users() # get user in main realm\nkeycloak_admin.change_current_realm(\"demo\") # change realm to 'demo'\nkeycloak_admin.get_current_realm() # gives 'demo'\nkeycloak_admin.get_users() # get users in realm 'demo'\nkeycloak_admin.create_user(...) # creates a new user in 'demo'\n\n# get user events\nkeycloak_admin.get_events(query={'type': 'login',\n                                 'user': user['id'],\n                                 'datefrom': '2023-08-02'})\n\n# get admin events\nkeycloak_admin.get_admin_events(query={'resourcetypes': 'user',\n                                                'operationtypes': 'update',\n                                                'resourcepath': 'users/' + user['id'],\n                                                'datefrom': '2023-08-02'\n                                                })\n\n# keycloak uma\n\nfrom keycloak import keycloakopenidconnection\nfrom keycloak import keycloakuma\n\nkeycloak_connection = keycloakopenidconnection(\n                        server_url=\"http://localhost:8080/\",\n                        realm_name=\"master\",\n                        client_id=\"my_client\",\n                        client_secret_key=\"client-secret\")\n\nkeycloak_uma = keycloakuma(connection=keycloak_connection)\n\n# create a resource set\nresource_set = keycloak_uma.resource_set_create({\n                \"name\": \"example_resource\",\n                \"scopes\": [\"example:read\", \"example:write\"],\n                \"type\": \"urn:example\"})\n\n# list resource sets\nresource_sets = uma.resource_set_list()\n\n# get resource set\nlatest_resource = uma.resource_set_read(resource_set[\"_id\"])\n\n# update resource set\nlatest_resource[\"name\"] = \"new resource name\"\numa.resource_set_update(resource_set[\"_id\"], latest_resource)\n\n# delete resource set\numa.resource_set_delete(resource_id=resource_set[\"_id\"])\n```\n\n",
  "docs_url": null,
  "keywords": "keycloak,openid,oidc",
  "license": "mit",
  "name": "python-keycloak",
  "package_url": "https://pypi.org/project/python-keycloak/",
  "project_url": "https://pypi.org/project/python-keycloak/",
  "project_urls": {
    "Documentation": "https://python-keycloak.readthedocs.io/en/latest/",
    "Issue tracker": "https://github.com/marcospereirampj/python-keycloak/issues"
  },
  "release_url": "https://pypi.org/project/python-keycloak/3.7.0/",
  "requires_dist": [
    "Sphinx (>=6.1.0,<7.0.0) ; extra == \"docs\"",
    "alabaster (>=0.7.12,<0.8.0) ; extra == \"docs\"",
    "commonmark (>=0.9.1,<0.10.0) ; extra == \"docs\"",
    "deprecation (>=2.1.0)",
    "m2r2 (>=0.3.2,<0.4.0) ; extra == \"docs\"",
    "mock (>=4.0.3,<5.0.0) ; extra == \"docs\"",
    "python-jose (>=3.3.0)",
    "readthedocs-sphinx-ext (>=2.1.9,<3.0.0) ; extra == \"docs\"",
    "recommonmark (>=0.7.1,<0.8.0) ; extra == \"docs\"",
    "requests (>=2.20.0)",
    "requests-toolbelt (>=0.6.0)",
    "sphinx-autoapi (>=3.0.0,<4.0.0) ; extra == \"docs\"",
    "sphinx-rtd-theme (>=1.0.0,<2.0.0) ; extra == \"docs\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "python-keycloak is a python package providing access to the keycloak api.",
  "version": "3.7.0",
  "releases": [],
  "developers": [
    "marcos_pereira",
    "marcospereira.mpj@gmail.com"
  ],
  "kwds": "keycloak_openid keycloak keycloak_uma keycloak_admin keycloak_connection",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_keycloak",
  "homepage": "",
  "release_count": 111,
  "dependency_ids": [
    "pypi_alabaster",
    "pypi_commonmark",
    "pypi_deprecation",
    "pypi_m2r2",
    "pypi_mock",
    "pypi_python_jose",
    "pypi_readthedocs_sphinx_ext",
    "pypi_recommonmark",
    "pypi_requests",
    "pypi_requests_toolbelt",
    "pypi_sphinx",
    "pypi_sphinx_autoapi",
    "pypi_sphinx_rtd_theme"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "sas7bdat.py\n===========\n\nthis module will read sas7bdat files using pure python (2.6+, 3+). no sas software\nrequired! the module started out as a port of the r script of the same name\nfound here: <https://github.com/biostatmatt/sas7bdat> but has since been\ncompletely rewritten.\n\nalso included with this library is a simple command line script,\n`sas7bdat_to_csv`, which converts sas7bdat files to csv files. it will also\nprint out header information and meta data using the `--header` option and it\nwill batch convert files as well. use the `--help` option for more information.\n\nas is, i've successfully tested the script almost three hundred sample files i\nfound on the internet. for the most part, it works well. we can now read\ncompressed files!\n\ni'm sure there are more issues that i haven't come across yet. please let me\nknow if you come across a data file that isn't supported and i'll see if i can\nadd support for the file.\n\nusage\n=====\n\nto install, run:\n\n```\npip install sas7bdat\n```\n\nto create a sas7bdat object, simply pass the constructor a file path. the\nobject is iterable so you can read the contents like this:\n\n```\n#!python\nfrom sas7bdat import sas7bdat\nwith sas7bdat('foo.sas7bdat', skip_header=true) as reader:\n    for row in reader:\n        print row\n```\n\neach row will be a list of values of type `string`, `float`, `datetime.date`,\n`datetime.datetime`, or `datetime.time`. without `skip_header`, the first row\nreturned will be the sas variable names.\n\nif you'd like to get a pandas dataframe, use the `to_data_frame` method:\n\n```\n#!python\ndf = reader.to_data_frame()\n```\n\n[variable\nattributes](https://support.sas.com/documentation/cdl/en/lrcon/65287/html/default/viewer.htm#n08fs0rt7fikeln1uh0t8v5pt25d.htm)\nare available from `reader.columns`. the order of these columns will be the same\nas the corresponding values in each `row`. each `column` has the following\nattributes:\n\n* `col_id` (`int`) - the column number\n* `name` (`bytes`)\n* `label` (`bytes`)\n* `format` (`str`)\n* `type` (`str`)\n* `length` (`int`)",
  "docs_url": null,
  "keywords": "sas,sas7bdat,csv,converter",
  "license": "mit",
  "name": "sas7bdat",
  "package_url": "https://pypi.org/project/sas7bdat/",
  "project_url": "https://pypi.org/project/sas7bdat/",
  "project_urls": {
    "Homepage": "https://bitbucket.org/jaredhobbs/sas7bdat"
  },
  "release_url": "https://pypi.org/project/sas7bdat/2.2.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a sas7bdat file reader for python",
  "version": "2.2.3",
  "releases": [],
  "developers": [
    "jared@pyhacker.com",
    "jared_hobbs"
  ],
  "kwds": "sas7bdat_to_csv sas7bdat sas csv files",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sas7bdat",
  "homepage": "https://bitbucket.org/jaredhobbs/sas7bdat",
  "release_count": 29,
  "dependency_ids": []
}
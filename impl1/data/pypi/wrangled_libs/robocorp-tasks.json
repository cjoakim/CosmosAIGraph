{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: application frameworks"
  ],
  "description": "# robocorp-tasks\n\n`robocorp-tasks` is a python framework designed to simplify the development \nof python automations.\n\n## why\n\nwhile python is widely used in the automation world, many solutions end up being \nad-hoc, making it difficult to navigate different projects and keep up with the\nfeatures required for analysing the results of such automations afterwards.\n\n## how\n\n`robocorp-tasks` provides a runner for running tasks that offers logging \nout of the box for python code (showing method calls, arguments, assigns, etc)\nby leveraging `robocorp-log`, and managing the lifecycle for running such tasks.\n\n## getting started\n\nreplace the code in your `__main__` with a method that has the name of your task\n(which should not have parameters) and decorate it with the `@task` decorator, like this:\n\ni.e.:\n\n\n```\nfrom robocorp.tasks import task\n\n@task\ndef my_task():\n    ...\n```\n\n2. call your task using the command line below, customizing the directory and task name as needed:\n\n\n```\npython -m robocorp.tasks run <path/to/file.py or directory> -t <task_name>\n```\n\nnote: if you have only one defined task in your target, the `-t <task_name>` option is not needed. \n\nnote: the task name is the name of the method decorated with `@task`.\n\nnote: if a directory is given, only files named `*task*.py` will be used for collection.\n\nnote: in the current version only one task can be run per invocation. if more than one task \nis found an error will be given and no tasks will be run.\n\n3. view the log results in `output/log.html`.\n\n## guides\n\n- [logging customization](https://github.com/robocorp/robo/blob/master/tasks/docs/guides/00-logging-customization.md)\n- [output customization](https://github.com/robocorp/robo/blob/master/tasks/docs/guides/01-output-customization.md)\n\n## api reference\n\ninformation on specific functions or classes: [robocorp.tasks](https://github.com/robocorp/robo/blob/master/tasks/docs/api/robocorp.tasks.md)\n\n## changelog\n\na list of releases and corresponding changes can be found in the [changelog](https://github.com/robocorp/robo/blob/master/tasks/docs/changelog.md).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "robocorp-tasks",
  "package_url": "https://pypi.org/project/robocorp-tasks/",
  "project_url": "https://pypi.org/project/robocorp-tasks/",
  "project_urls": {
    "Homepage": "https://github.com/robocorp/robo/",
    "Repository": "https://github.com/robocorp/robo/"
  },
  "release_url": "https://pypi.org/project/robocorp-tasks/2.6.0/",
  "requires_dist": [
    "robocorp-log (>=2.4,<3)",
    "psutil (>=5.9,<6.0)",
    "docstring_parser_fork (>=0.0.5,<0.0.6)"
  ],
  "requires_python": ">=3.9,<4.0",
  "summary": "the automation framework for python",
  "version": "2.6.0",
  "releases": [],
  "developers": [
    "fabio@robocorp.com",
    "fabio_zadrozny"
  ],
  "kwds": "robocorp task_name my_task automation python",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_robocorp_tasks",
  "homepage": "https://github.com/robocorp/robo/",
  "release_count": 22,
  "dependency_ids": [
    "pypi_docstring_parser_fork",
    "pypi_psutil",
    "pypi_robocorp_log"
  ]
}
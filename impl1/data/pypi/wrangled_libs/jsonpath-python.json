{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.6"
  ],
  "description": "- [jsonpath-python](#jsonpath-python)\n  - [features](#features)\n  - [jsonpath syntax](#jsonpath-syntax)\n    - [operators](#operators)\n    - [examples](#examples)\n      - [select fields](#select-fields)\n      - [recursive descent](#recursive-descent)\n      - [slice](#slice)\n      - [filter expression](#filter-expression)\n      - [sorter expression](#sorter-expression)\n      - [field-extractor expression](#field-extractor-expression)\n    - [appendix: example json data:](#appendix-example-json-data)\n  - [todo list](#todo-list)\n\n# jsonpath-python\n\na more powerful jsonpath implementation in modern python.\n\n## features\n\n- [x] **light. (no need to install third-party dependencies.)**\n- [x] **support filter operator, including multi-selection, inverse-selection filtering.**\n- [x] **support sorter operator, including sorting by multiple fields, ascending and descending order.**\n- [x] support basic semantics of jsonpath.\n- [x] support output modes: value, path.\n- [ ] support embedded syntax.\n- [ ] support user-defined function.\n- [ ] support parent operator.\n\n## installation\n\n```bash\npip install jsonpath-python\n\n# import\n>>> from jsonpath import jsonpath\n```\n\n## jsonpath syntax\n\nthe jsonpath syntax in this project borrows from [jsonpath - xpath for json](http://goessner.net/articles/jsonpath/) and is **modified** and **extended** on it.\n\n### operators\n\n| operator         | description                                                                  |\n| ---------------- | ---------------------------------------------------------------------------- |\n| `$`              | the root object/element                                                      |\n| `@`              | the current object/element                                                   |\n| `.` or `[]`      | child operator                                                               |\n| `..`             | recursive descent                                                            |\n| `*`              | wildcard                                                                     |\n| `''`             | (experimental) wrap field with special character: dots(`.`) and space (` `). |\n| `start:end:step` | array slice operator (it's same as the slice in python)                      |\n| `?()`            | applies a filter expression                                                  |\n| `/()`            | applies a sorter expression                                                  |\n| `()`             | applies a field-extractor expression                                         |\n\n### examples\n\nbefore running the following example, please import this module and the example data:\n\n```python\n>>> from jsonpath import jsonpath\n\n# for the data used in the following example, please refer to the appendix part.\n```\n\n#### select fields\n\nselect a field:\n\n```python\n>>> jsonpath(\"$.book\").parse(data)\n[[{'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'j. r. r. tolkien', 'title': 'the lord of the rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]]\n>>> jsonpath(\"$[book]\").parse(data)\n[[{'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'j. r. r. tolkien', 'title': 'the lord of the rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]]\n```\n\n(**experimental**) select a field with special character: dots(`.`) and space (` `).\n\n```python\n>>> jsonpath(\"$.'a.b c'\").parse(data)\n['a.b c']\n>>> jsonpath(\"$['a.b c']\").parse(data)\n['a.b c']\n```\n\nselect multiple fields:\n\n```python\n>>> jsonpath(\"$[bicycle,scores]\").parse(data)\n[{'color': 'red', 'price': 19.95}, {'math': {'score': 100, 'avg': 60}, 'english': {'score': 95, 'avg': 80}, 'physic': {'score': 90, 'avg': 70}, 'chemistry': {'score': 85, 'avg': 80}, 'chinese': {'score': 60, 'avg': 75}}]\n```\n\nselect all fields using wildcard `*`:\n\n```python\n>>> jsonpath(\"$.*\").parse(data)\n['a.b c', [{'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'j. r. r. tolkien', 'title': 'the lord of the rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}], {'color': 'red', 'price': 19.95}, {'math': {'score': 100, 'avg': 60}, 'english': {'score': 95, 'avg': 80}, 'physic': {'score': 90, 'avg': 70}, 'chemistry': {'score': 85, 'avg': 80}, 'chinese': {'score': 60, 'avg': 75}}]\n```\n\n#### recursive descent\n\n```python\n>>> jsonpath(\"$..price\").parse(data)\n[8.95, 12.99, 8.99, 22.99, 19.95]\n```\n\n#### slice\n\nsupport python-like slice.\n\n```python\n>>> jsonpath(\"$.book[1:3]\").parse(data)\n[{'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]\n>>> jsonpath(\"$.book[1:-1]\").parse(data)\n[{'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]\n>>> jsonpath(\"$.book[0:-1:2]\").parse(data)\n[{'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}]\n>>> jsonpath(\"$.book[-1:1]\").parse(data)\n[]\n>>> jsonpath(\"$.book[-1:-11:3]\").parse(data)\n[]\n>>> jsonpath(\"$.book[:]\").parse(data)\n[{'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}, {'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'j. r. r. tolkien', 'title': 'the lord of the rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}]\n>>> jsonpath(\"$.book[::-1]\").parse(data)\n[{'category': 'fiction', 'author': 'j. r. r. tolkien', 'title': 'the lord of the rings', 'isbn': '0-395-19395-8', 'price': 22.99, 'brand': {'version': 'v1.0.3'}}, {'category': 'fiction', 'author': 'herman melville', 'title': 'moby dick', 'isbn': '0-553-21311-3', 'price': 8.99, 'brand': {'version': 'v1.0.2'}}, {'category': 'fiction', 'author': 'evelyn waugh', 'title': 'sword of honour', 'price': 12.99, 'brand': {'version': 'v0.0.1'}}, {'category': 'reference', 'author': 'nigel rees', 'title': 'sayings of the century', 'price': 8.95, 'brand': {'version': 'v1.0.0'}}]\n\n```\n\n#### filter expression\n\nsupport all python comparison operators (`==`, `!=`, `<`, `>`, `>=`, `<=`), python membership operators (`in`, `not in`), python logical operators (`and`, `or`, `not`).\n\n```python\n>>> jsonpath(\"$.book[?(@.price>8 and @.price<9)].price\").parse(data)\n[8.95, 8.99]\n>>> jsonpath('$.book[?(@.category==\"reference\")].category').parse(data)\n['reference']\n>>> jsonpath('$.book[?(@.category!=\"reference\" and @.price<9)].title').parse(data)\n['moby dick']\n>>> jsonpath('$.book[?(@.author==\"herman melville\" or @.author==\"evelyn waugh\")].author').parse(data)\n['evelyn waugh', 'herman melville']\n```\n\n`note`: you must use double quote(`\"\"`) instead of single quote(`''`) to wrap the compared string, because single quote(`''`) has another usage in this jsonpath syntax .\n\n#### sorter expression\n\nsupport sorting by multiple fields (using operator `,`) and reverse sort (using operator `~`).\n\n```python\n>>> jsonpath(\"$.book[/(price)].price\").parse(data)\n[8.95, 8.99, 12.99, 22.99]\n>>> jsonpath(\"$.book[/(~price)].price\").parse(data)\n[22.99, 12.99, 8.99, 8.95]\n>>> jsonpath(\"$.book[/(category,price)].price\").parse(data)\n[8.99, 12.99, 22.99, 8.95]\n>>> jsonpath(\"$.book[/(brand.version)].brand.version\").parse(data)\n['v0.0.1', 'v1.0.0', 'v1.0.2', 'v1.0.3']\n>>> jsonpath(\"$.scores[/(score)].score\").parse(data)\n[60, 85, 90, 95, 100]\n```\n\n#### field-extractor expression\n\nusing `(field1,field2,\u2026,filedn)` after a dict object to extract its fields.\n\n```python\n>>> jsonpath(\"$.scores[/(score)].(score)\").parse(data)\n[{'score': 60}, {'score': 85}, {'score': 90}, {'score': 95}, {'score': 100}]\n>>> jsonpath(\"$.book[/(category,price)].(title,price)\").parse(data)\n[{'title': 'moby dick', 'price': 8.99}, {'title': 'sword of honour', 'price': 12.99}, {'title': 'the lord of the rings', 'price': 22.99}, {'title': 'sayings of the century', 'price': 8.95}]\n```\n\n### appendix: example json data:\n\n```python\ndata = {\n    \"a.b c\": \"a.b c\",\n    \"book\": [\n        {\n            \"category\": \"reference\",\n            \"author\": \"nigel rees\",\n            \"title\": \"sayings of the century\",\n            \"price\": 8.95,\n            \"brand\": {\n                \"version\": \"v1.0.0\"\n            }\n        },\n        {\n            \"category\": \"fiction\",\n            \"author\": \"evelyn waugh\",\n            \"title\": \"sword of honour\",\n            \"price\": 12.99,\n            \"brand\": {\n                \"version\": \"v0.0.1\"\n            }\n        },\n        {\n            \"category\": \"fiction\",\n            \"author\": \"herman melville\",\n            \"title\": \"moby dick\",\n            \"isbn\": \"0-553-21311-3\",\n            \"price\": 8.99,\n            \"brand\": {\n                \"version\": \"v1.0.2\"\n            }\n        },\n        {\n            \"category\": \"fiction\",\n            \"author\": \"j. r. r. tolkien\",\n            \"title\": \"the lord of the rings\",\n            \"isbn\": \"0-395-19395-8\",\n            \"price\": 22.99,\n            \"brand\": {\n                \"version\": \"v1.0.3\"\n            }\n        }\n    ],\n    \"bicycle\": {\n        \"color\": \"red\",\n        \"price\": 19.95\n    },\n    \"scores\": {\n        \"math\": {\n            \"score\": 100,\n            \"avg\": 60\n        },\n        \"english\": {\n            \"score\": 95,\n            \"avg\": 80\n        },\n        \"physic\": {\n            \"score\": 90,\n            \"avg\": 70\n        },\n        \"chemistry\": {\n            \"score\": 85,\n            \"avg\": 80\n        },\n        \"chinese\": {\n            \"score\": 60,\n            \"avg\": 75\n        }\n    }\n}\n```\n\n## todo list\n\n- syntax and character set (refer to k8s)\n\n> the name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9a-z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "jsonpath-python",
  "package_url": "https://pypi.org/project/jsonpath-python/",
  "project_url": "https://pypi.org/project/jsonpath-python/",
  "project_urls": {
    "Homepage": "https://github.com/zhangxianbing/jsonpath-python"
  },
  "release_url": "https://pypi.org/project/jsonpath-python/1.0.6/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a more powerful jsonpath implementation in modern python",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "zhangxianbing"
  ],
  "kwds": "jsonpath json parse fields filtering",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jsonpath_python",
  "homepage": "https://github.com/zhangxianbing/jsonpath-python",
  "release_count": 6,
  "dependency_ids": []
}
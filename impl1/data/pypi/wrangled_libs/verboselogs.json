{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system",
    "topic :: system :: logging",
    "topic :: system :: systems administration",
    "topic :: terminals"
  ],
  "description": "verboselogs: verbose logging level for python's logging module\n==============================================================\n\n.. image:: https://travis-ci.org/xolox/python-verboselogs.svg?branch=master\n   :target: https://travis-ci.org/xolox/python-verboselogs\n\n.. image:: https://coveralls.io/repos/xolox/python-verboselogs/badge.png?branch=master\n   :target: https://coveralls.io/r/xolox/python-verboselogs?branch=master\n\nthe verboselogs_ package extends python's logging_ module to add the log levels\nnotice_, spam_, success_ and verbose_:\n\n- the notice level sits between the predefined warning and info levels.\n- the spam level sits between the predefined debug and notset levels.\n- the success level sits between the predefined warning and error levels.\n- the verbose level sits between the predefined info and debug levels.\n\nthe code to do this is simple and short, but i still don't want to copy/paste\nit to every project i'm working on, hence this package. it's currently tested\non python 2.6, 2.7, 3.4, 3.5, 3.6 and pypy.\n\n.. contents::\n   :local:\n   :depth: 2\n\ninstallation\n------------\n\nthe verboselogs package is available on pypi_ which means installation should\nbe as simple as:\n\n.. code-block:: sh\n\n   $ pip install verboselogs\n\nthere's actually a multitude of ways to install python packages (e.g. the `per\nuser site-packages directory`_, `virtual environments`_ or just installing\nsystem wide) and i have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).\n\nusage\n-----\n\nit's very simple to start using the verboselogs package:\n\n>>> import logging, verboselogs\n>>> logger = verboselogs.verboselogger('verbose-demo')\n>>> logger.addhandler(logging.streamhandler())\n>>> logger.setlevel(logging.verbose)\n>>> logger.verbose(\"can we have verbose logging? %s\", \"yes we can!\")\n\nhere's a skeleton of a very simple python program with a command line interface\nand configurable logging:\n\n.. code-block:: python\n\n   \"\"\"\n   usage: demo.py [options]\n\n   this is the usage message of demo.py. usually\n   this text explains how to use the program.\n\n   supported options:\n     -v, --verbose  make more noise\n     -h, --help     show this message and exit\n   \"\"\"\n\n   import getopt\n   import logging\n   import sys\n   import verboselogs\n\n   logger = verboselogs.verboselogger('demo')\n   logger.addhandler(logging.streamhandler())\n   logger.setlevel(logging.info)\n\n   # command line option defaults.\n   verbosity = 0\n\n   # parse command line options.\n   opts, args = getopt.getopt(sys.argv[1:], 'vqh', ['verbose', 'quiet', 'help'])\n\n   # map command line options to variables.\n   for option, argument in opts:\n       if option in ('-v', '--verbose'):\n           verbosity += 1\n       elif option in ('-q', '--quiet'):\n           verbosity -= 1\n       elif option in ('-h', '--help'):\n           print __doc__.strip()\n           sys.exit(0)\n       else:\n           assert false, \"unhandled option!\"\n\n   # configure logger for requested verbosity.\n   if verbosity >= 4:\n       logger.setlevel(logging.spam)\n   elif verbosity >= 3:\n       logger.setlevel(logging.debug)\n   elif verbosity >= 2:\n       logger.setlevel(logging.verbose)\n   elif verbosity >= 1:\n       logger.setlevel(logging.notice)\n   elif verbosity < 0:\n       logger.setlevel(logging.warning)\n\n   # your code goes here.\n   ...\n\nif you want to set verboselogger_ as the default logging class for all\nsubsequent logger instances, you can do so using `verboselogs.install()`_:\n\n.. code-block:: python\n\n   import logging\n   import verboselogs\n\n   verboselogs.install()\n   logger = logging.getlogger(__name__) # will be a verboselogger instance\n\npylint plugin\n-------------\n\nif using the above `verboselogs.install()`_ approach, pylint_ is not smart\nenough to recognize that logging_ is using verboselogs, resulting in errors\nlike::\n\n   e:285,24: module 'logging' has no 'verbose' member (no-member)\n   e:375,12: instance of 'rootlogger' has no 'verbose' member (no-member)\n\nto fix this, verboselogs provides a pylint plugin verboselogs.pylint_ which,\nwhen loaded with ``pylint --load-plugins verboselogs.pylint``, adds the\nverboselogs methods and constants to pylint's understanding of the logging_\nmodule.\n\noverview of logging levels\n--------------------------\n\nthe table below shows the names, `numeric values`_ and descriptions_ of the\npredefined log levels and the verbose, notice, and spam levels defined by this\npackage, plus some notes that i added.\n\n========  =====  =============================  =============================\nlevel     value  description                    notes\n========  =====  =============================  =============================\nnotset    0      when a logger is created, the  this level isn't intended to\n                 level is set to notset (note   be used explicitly, however\n                 that the root logger is        when a logger has its level\n                 created with level warning).   set to notset its effective\n                                                level will be inherited from\n                                                the parent logger.\nspam      5      way too verbose for regular\n                 debugging, but nice to have\n                 when someone is getting\n                 desperate in a late night\n                 debugging session and decides\n                 that they want as much\n                 instrumentation as possible!\n                 :-)\ndebug     10     detailed information,          usually at this level the\n                 typically of interest only     logging output is so low\n                 when diagnosing problems.      level that it's not useful\n                                                to users who are not\n                                                familiar with the software's\n                                                internals.\nverbose   15     detailed information that\n                 should be understandable to\n                 experienced users to provide\n                 insight in the software's\n                 behavior; a sort of high\n                 level debugging information.\ninfo      20     confirmation that things\n                 are working as expected.\nnotice    25     auditing information about\n                 things that have multiple\n                 success paths or may need to\n                 be reverted.\nwarning   30     an indication that something\n                 unexpected happened, or\n                 indicative of some problem\n                 in the near future (e.g.\n                 \u2018disk space low\u2019). the\n                 software is still working\n                 as expected.\nsuccess   35     a very explicit confirmation\n                 of success.\nerror     40     due to a more serious\n                 problem, the software has not\n                 been able to perform some\n                 function.\ncritical  50     a serious error, indicating\n                 that the program itself may\n                 be unable to continue\n                 running.\n========  =====  =============================  =============================\n\ncontact\n-------\n\nthe latest version of verboselogs is available on pypi_ and github_. the\ndocumentation is hosted on `read the docs`_. for bug reports please create an\nissue on github_. if you have questions, suggestions, etc. feel free to send me\nan e-mail at `peter@peterodding.com`_.\n\nlicense\n-------\n\nthis software is licensed under the `mit license`_.\n\n\u00a9 2017 peter odding.\n\n.. external references:\n.. _descriptions: http://docs.python.org/howto/logging.html#when-to-use-logging\n.. _github: https://github.com/xolox/python-verboselogs\n.. _logging: http://docs.python.org/library/logging.html\n.. _mit license: http://en.wikipedia.org/wiki/mit_license\n.. _notice: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.notice\n.. _numeric values: http://docs.python.org/howto/logging.html#logging-levels\n.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/\n.. _peter@peterodding.com: peter@peterodding.com\n.. _pylint: https://pypi.python.org/pypi/pylint\n.. _pypi: https://pypi.python.org/pypi/verboselogs\n.. _read the docs: https://verboselogs.readthedocs.io\n.. _spam: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.spam\n.. _success: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.success\n.. _verbose: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.verbose\n.. _verboselogger: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.verboselogger\n.. _verboselogs.install(): http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.install\n.. _verboselogs.pylint: http://verboselogs.readthedocs.io/en/latest/api.html#verboselogs.pylint\n.. _verboselogs: https://pypi.python.org/pypi/verboselogs/\n.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "verboselogs",
  "package_url": "https://pypi.org/project/verboselogs/",
  "project_url": "https://pypi.org/project/verboselogs/",
  "project_urls": {
    "Homepage": "https://verboselogs.readthedocs.io"
  },
  "release_url": "https://pypi.org/project/verboselogs/1.7/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "verbose logging level for python's logging module",
  "version": "1.7",
  "releases": [],
  "developers": [
    "peter@peterodding.com",
    "peter_odding"
  ],
  "kwds": "_verboselogs verboselogs_ verboselogger_ _verboselogger _logging",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_verboselogs",
  "homepage": "https://verboselogs.readthedocs.io",
  "release_count": 12,
  "dependency_ids": []
}
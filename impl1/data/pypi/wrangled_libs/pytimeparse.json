{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: text processing"
  ],
  "description": "=====================================\n pytimeparse: time expression parser\n=====================================\n\n.. image:: https://travis-ci.org/wroberts/pytimeparse.svg?branch=master\n    :target: https://travis-ci.org/wroberts/pytimeparse\n    :alt: travis ci build status\n\n.. image:: https://coveralls.io/repos/wroberts/pytimeparse/badge.svg\n    :target: https://coveralls.io/r/wroberts/pytimeparse\n    :alt: test code coverage\n\n.. image:: https://img.shields.io/pypi/v/pytimeparse.svg\n    :target: https://pypi.python.org/pypi/pytimeparse/\n    :alt: latest version\n\ncopyright (c) 2014 will roberts <wildwilhelm@gmail.com>\n\nlicensed under the mit license (see source file ``timeparse.py`` for\ndetails).\n\na small python library to parse various kinds of time expressions,\ninspired by\n`this stackoverflow question <http://stackoverflow.com/questions/4628122/how-to-construct-a-timedelta-object-from-a-simple-string>`_.\n\nthe single function ``pytimeparse.timeparse.timeparse`` defined in the\nlibrary (also available as ``pytimeparse.parse``) parses time\nexpressions like the following:\n\n- ``32m``\n- ``2h32m``\n- ``3d2h32m``\n- ``1w3d2h32m``\n- ``1w 3d 2h 32m``\n- ``1 w 3 d 2 h 32 m``\n- ``4:13``\n- ``4:13:02``\n- ``4:13:02.266``\n- ``2:04:13:02.266``\n- ``2 days,  4:13:02`` (``uptime`` format)\n- ``2 days,  4:13:02.266``\n- ``5hr34m56s``\n- ``5 hours, 34 minutes, 56 seconds``\n- ``5 hrs, 34 mins, 56 secs``\n- ``2 days, 5 hours, 34 minutes, 56 seconds``\n- ``1.2 m``\n- ``1.2 min``\n- ``1.2 mins``\n- ``1.2 minute``\n- ``1.2 minutes``\n- ``172 hours``\n- ``172 hr``\n- ``172 h``\n- ``172 hrs``\n- ``172 hour``\n- ``1.24 days``\n- ``5 d``\n- ``5 day``\n- ``5 days``\n- ``5.6 wk``\n- ``5.6 week``\n- ``5.6 weeks``\n\nit returns the time as a number of seconds (an integer value if\npossible, otherwise a floating-point number)::\n\n    >>> from pytimeparse import parse\n    >>> parse('1.2 minutes')\n    72\n\na number of seconds can be converted back into a string using the\n``datetime`` module in the standard library, as noted in\n`this other stackoverflow question <http://stackoverflow.com/questions/538666/python-format-timedelta-to-string>`_::\n\n    >>> from pytimeparse import parse\n    >>> import datetime\n    >>> parse('1 day, 14:20:16')\n    138016\n    >>> str(datetime.timedelta(seconds=138016))\n    '1 day, 14:20:16'\n\nfuture work\n-----------\n\n1. give the user more flexibility over which characters to use as\n   separators between fields in a time expression (e.g., ``+`` might\n   be useful).\n2. internationalisation?\n3. wow, https://github.com/bear/parsedatetime .\n\n\n",
  "docs_url": null,
  "keywords": "time parsing parser",
  "license": "license :: osi approved :: mit license",
  "name": "pytimeparse",
  "package_url": "https://pypi.org/project/pytimeparse/",
  "project_url": "https://pypi.org/project/pytimeparse/",
  "project_urls": {
    "Homepage": "https://github.com/wroberts/pytimeparse"
  },
  "release_url": "https://pypi.org/project/pytimeparse/1.1.8/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "time expression parser",
  "version": "1.1.8",
  "releases": [],
  "developers": [
    "wildwilhelm@gmail.com",
    "will_roberts"
  ],
  "kwds": "pytimeparse timeparse parsedatetime timedelta seconds",
  "license_kwds": "license :: osi approved :: mit license",
  "libtype": "pypi",
  "id": "pypi_pytimeparse",
  "homepage": "https://github.com/wroberts/pytimeparse",
  "release_count": 10,
  "dependency_ids": []
}
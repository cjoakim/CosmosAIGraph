{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "topic :: database :: front-ends"
  ],
  "description": "================================\nproject is currently unsupported\n================================\n\n\n\n\n.. image:: https://travis-ci.org/dropbox/pyhive.svg?branch=master\n    :target: https://travis-ci.org/dropbox/pyhive\n.. image:: https://img.shields.io/codecov/c/github/dropbox/pyhive.svg\n\n======\npyhive\n======\n\npyhive is a collection of python `db-api <http://www.python.org/dev/peps/pep-0249/>`_ and\n`sqlalchemy <http://www.sqlalchemy.org/>`_ interfaces for `presto <http://prestodb.io/>`_ ,\n`hive <http://hive.apache.org/>`_ and `trino <https://trino.io/>`_.\n\nusage\n=====\n\ndb-api\n------\n.. code-block:: python\n\n    from pyhive import presto  # or import hive or import trino\n    cursor = presto.connect('localhost').cursor()  # or use hive.connect or use trino.connect\n    cursor.execute('select * from my_awesome_data limit 10')\n    print cursor.fetchone()\n    print cursor.fetchall()\n\ndb-api (asynchronous)\n---------------------\n.. code-block:: python\n\n    from pyhive import hive\n    from tcliservice.ttypes import toperationstate\n    cursor = hive.connect('localhost').cursor()\n    cursor.execute('select * from my_awesome_data limit 10', async=true)\n\n    status = cursor.poll().operationstate\n    while status in (toperationstate.initialized_state, toperationstate.running_state):\n        logs = cursor.fetch_logs()\n        for message in logs:\n            print message\n\n        # if needed, an asynchronous query can be cancelled at any time with:\n        # cursor.cancel()\n\n        status = cursor.poll().operationstate\n\n    print cursor.fetchall()\n\nin python 3.7 `async` became a keyword; you can use `async_` instead:\n\n.. code-block:: python\n\n    cursor.execute('select * from my_awesome_data limit 10', async_=true)\n\n\nsqlalchemy\n----------\nfirst install this package to register it with sqlalchemy, see ``entry_points`` in ``setup.py``.\n\n.. code-block:: python\n\n    from sqlalchemy import *\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.schema import *\n    # presto\n    engine = create_engine('presto://localhost:8080/hive/default')\n    # trino\n    engine = create_engine('trino+pyhive://localhost:8080/hive/default')\n    # hive\n    engine = create_engine('hive://localhost:10000/default')\n\n    # sqlalchemy < 2.0\n    logs = table('my_awesome_data', metadata(bind=engine), autoload=true)\n    print select([func.count('*')], from_obj=logs).scalar()\n\n    # hive + https + ldap or basic auth\n    engine = create_engine('hive+https://username:password@localhost:10000/')\n    logs = table('my_awesome_data', metadata(bind=engine), autoload=true)\n    print select([func.count('*')], from_obj=logs).scalar()\n\n    # sqlalchemy >= 2.0\n    metadata_obj = metadata()\n    books = table(\"books\", metadata_obj, column(\"id\", integer), column(\"title\", string), column(\"primary_author\", string))\n    metadata_obj.create_all(engine)\n    inspector = inspect(engine)\n    inspector.get_columns('books')\n\n    with engine.connect() as con:\n        data = [{ \"id\": 1, \"title\": \"the hobbit\", \"primary_author\": \"tolkien\" }, \n                { \"id\": 2, \"title\": \"the silmarillion\", \"primary_author\": \"tolkien\" }]\n        con.execute(books.insert(), data[0])\n        result = con.execute(text(\"select * from books\"))\n        print(result.fetchall())\n\nnote: query generation functionality is not exhaustive or fully tested, but there should be no\nproblem with raw sql.\n\npassing session configuration\n-----------------------------\n\n.. code-block:: python\n\n    # db-api\n    hive.connect('localhost', configuration={'hive.exec.reducers.max': '123'})\n    presto.connect('localhost', session_props={'query_max_run_time': '1234m'})\n    trino.connect('localhost',  session_props={'query_max_run_time': '1234m'})\n    # sqlalchemy\n    create_engine(\n        'presto://user@host:443/hive',\n        connect_args={'protocol': 'https',\n                      'session_props': {'query_max_run_time': '1234m'}}\n    )\n    create_engine(\n        'trino+pyhive://user@host:443/hive',\n        connect_args={'protocol': 'https',\n                      'session_props': {'query_max_run_time': '1234m'}}\n    )\n    create_engine(\n        'hive://user@host:10000/database',\n        connect_args={'configuration': {'hive.exec.reducers.max': '123'}},\n    )\n    # sqlalchemy with ldap\n    create_engine(\n        'hive://user:password@host:10000/database',\n        connect_args={'auth': 'ldap'},\n    )\n\nrequirements\n============\n\ninstall using\n\n- ``pip install 'pyhive[hive]'`` or ``pip install 'pyhive[hive_pure_sasl]'`` for the hive interface\n- ``pip install 'pyhive[presto]'`` for the presto interface\n- ``pip install 'pyhive[trino]'`` for the trino interface\n\nnote: ``'pyhive[hive]'`` extras uses `sasl <https://pypi.org/project/sasl/>`_ that doesn't support python 3.11, see `github issue <https://github.com/cloudera/python-sasl/issues/30>`_.\nhence pyhive also supports `pure-sasl <https://pypi.org/project/pure-sasl/>`_ via additional extras ``'pyhive[hive_pure_sasl]'`` which support python 3.11.\n\npyhive works with\n\n- python 2.7 / python 3\n- for presto: `presto installation <https://prestodb.io/docs/current/installation.html>`_\n- for trino: `trino installation <https://trino.io/docs/current/installation.html>`_\n- for hive: `hiveserver2 <https://cwiki.apache.org/confluence/display/hive/setting+up+hiveserver2>`_ daemon\n\nchangelog\n=========\nsee https://github.com/dropbox/pyhive/releases.\n\ncontributing\n============\n- please fill out the dropbox contributor license agreement at https://opensource.dropbox.com/cla/ and note this in your pull request.\n- changes must come with tests, with the exception of trivial things like fixing comments. see .travis.yml for the test environment setup.\n- notes on project scope:\n\n  - this project is intended to be a minimal hive/presto client that does that one thing and nothing else.\n    features that can be implemented on top of pyhive, such integration with your favorite data analysis library, are likely out of scope.\n  - we prefer having a small number of generic features over a large number of specialized, inflexible features.\n    for example, the presto code takes an arbitrary ``requests_session`` argument for customizing http calls, as opposed to having a separate parameter/branch for each ``requests`` option.\n\ntips for test environment setup\n================================\nyou can setup test environment by following ``.travis.yaml`` in this repository. it uses `cloudera's cdh 5 <https://docs.cloudera.com/documentation/enterprise/release-notes/topics/cdh_vd_cdh_download_510.html>`_ which requires username and password for download.\nit may not be feasible for everyone to get those credentials. hence below are alternative instructions to setup test environment.\n\nyou can clone `this repository <https://github.com/big-data-europe/docker-hive/blob/master/docker-compose.yml>`_ which has docker compose setup for presto and hive.\nyou can add below lines to its docker-compose.yaml to start trino in same environment::\n \n    trino:\n        image: trinodb/trino:351    \n        ports:     \n            - \"18080:18080\"    \n        volumes:    \n            - ./trino:/etc/trino\n\nnote: ``./trino`` for docker volume defined above is `trino config from pyhive repository <https://github.com/dropbox/pyhive/tree/master/scripts/travis-conf/trino>`_\n\nthen run::\n    docker-compose up -d\n\ntesting\n=======\n.. image:: https://travis-ci.org/dropbox/pyhive.svg\n    :target: https://travis-ci.org/dropbox/pyhive\n.. image:: http://codecov.io/github/dropbox/pyhive/coverage.svg?branch=master\n    :target: http://codecov.io/github/dropbox/pyhive?branch=master\n\nrun the following in an environment with hive/presto::\n\n    ./scripts/make_test_tables.sh\n    virtualenv --no-site-packages env\n    source env/bin/activate\n    pip install -e .\n    pip install -r dev_requirements.txt\n    py.test\n\nwarning: this drops/creates tables named ``one_row``, ``one_row_complex``, and ``many_rows``, plus a\ndatabase called ``pyhive_test_database``.\n\nupdating tcliservice\n====================\n\nthe tcliservice module is autogenerated using a ``tcliservice.thrift`` file. to update it, the\n``generate.py`` file can be used: ``python generate.py <tcliserviceurl>``. when left blank, the\nversion for hive 2.3 will be downloaded.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license, version 2.0",
  "name": "pyhive",
  "package_url": "https://pypi.org/project/PyHive/",
  "project_url": "https://pypi.org/project/PyHive/",
  "project_urls": {
    "Homepage": "https://github.com/dropbox/PyHive"
  },
  "release_url": "https://pypi.org/project/PyHive/0.7.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python interface to hive",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "jing@dropbox.com",
    "jing_wang"
  ],
  "kwds": "sqlalchemy pyhive_test_database db python database",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_pyhive",
  "homepage": "https://github.com/dropbox/pyhive",
  "release_count": 28,
  "dependency_ids": []
}
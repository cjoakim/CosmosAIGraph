{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# rembg\n\n[![downloads](https://img.shields.io/pypi/dm/rembg.svg)](https://img.shields.io/pypi/dm/rembg.svg)\n[![license](https://img.shields.io/badge/license-mit-blue.svg)](https://img.shields.io/badge/license-mit-blue.svg)\n[![hugging face spaces](https://img.shields.io/badge/\ud83e\udd17%20hugging%20face-spaces-blue)](https://huggingface.co/spaces/kenjiedec/rembg)\n[![streamlit app](https://img.shields.io/badge/\ud83c\udf88%20streamlit%20community-cloud-blue)](https://bgremoval.streamlit.app/)\n\n\nrembg is a tool to remove images background.\n\n<p style=\"display: flex;align-items: center;justify-content: center;\">\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-1.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-1.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-2.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-2.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-3.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/car-3.out.png\" width=\"100\" />\n</p>\n\n<p style=\"display: flex;align-items: center;justify-content: center;\">\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-1.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-1.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-2.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-2.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-3.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/animal-3.out.png\" width=\"100\" />\n</p>\n\n<p style=\"display: flex;align-items: center;justify-content: center;\">\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-1.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-1.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-2.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-2.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-3.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/girl-3.out.png\" width=\"100\" />\n</p>\n\n<p style=\"display: flex;align-items: center;justify-content: center;\">\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-1.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-1.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-2.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-2.out.png\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-3.jpg\" width=\"100\" />\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/examples/anime-girl-3.out.png\" width=\"100\" />\n</p>\n\n**if this project has helped you, please consider making a [donation](https://www.buymeacoffee.com/danielgatis).**\n\n## sponsor\n\n<table>\n  <tr>\n    <td align=\"center\" vertical-align=\"center\">\n      <a href=\"https://photoroom.com/api/remove-background?utm_source=rembg&utm_medium=github_webpage&utm_campaign=sponsor\" >\n        <img src=\"https://font-cdn.photoroom.com/media/api-logo.png\" width=\"120px;\" alt=\"unsplash\" />\n      </a>\n    </td>\n    <td align=\"center\" vertical-align=\"center\">\n      <b>photoroom remove background api</b>\n      <br />\n      <a href=\"https://photoroom.com/api/remove-background?utm_source=rembg&utm_medium=github_webpage&utm_campaign=sponsor\">https://photoroom.com/api</a>\n      <br />\n      <p width=\"200px\">\n        fast and accurate background remover api<br/>\n      </p>\n    </td>\n  </tr>\n</table>\n\n## requirements\n\n```\npython: >3.7, <3.12\n```\n\n## installation\n\ncpu support:\n\n```bash\npip install rembg # for library\npip install rembg[cli] # for library + cli\n```\n\ngpu support:\n\nfirst of all, you need to check if your system supports the `onnxruntime-gpu`.\n\ngo to https://onnxruntime.ai and check the installation matrix.\n\n<p style=\"display: flex;align-items: center;justify-content: center;\">\n  <img src=\"https://raw.githubusercontent.com/danielgatis/rembg/master/onnxruntime-installation-matrix.png\" width=\"400\" />\n</p>\n\nif yes, just run:\n\n```bash\npip install rembg[gpu] # for library\npip install rembg[gpu,cli] # for library + cli\n```\n\n## usage as a cli\n\nafter the installation step you can use rembg just typing `rembg` in your terminal window.\n\nthe `rembg` command has 4 subcommands, one for each input type:\n- `i` for files\n- `p` for folders\n- `s` for http server\n- `b` for rgb24 pixel binary stream\n\nyou can get help about the main command using:\n\n```\nrembg --help\n```\n\nas well, about all the subcommands using:\n\n```\nrembg <command> --help\n```\n\n### rembg `i`\n\nused when input and output are files.\n\nremove the background from a remote image\n\n```\ncurl -s http://input.png | rembg i > output.png\n```\n\nremove the background from a local file\n\n```\nrembg i path/to/input.png path/to/output.png\n```\n\nremove the background specifying a model\n\n```\nrembg i -m u2netp path/to/input.png path/to/output.png\n```\n\nremove the background returning only the mask\n\n```\nrembg i -om path/to/input.png path/to/output.png\n```\n\n\nremove the background applying an alpha matting\n\n```\nrembg i -a path/to/input.png path/to/output.png\n```\n\npassing extras parameters\n\n```\nsam example\n\nrembg i -m sam -x '{ \"sam_prompt\": [{\"type\": \"point\", \"data\": [724, 740], \"label\": 1}] }' examples/plants-1.jpg examples/plants-1.out.png\n```\n\n```\ncustom model example\n\nrembg i -m u2net_custom -x '{\"model_path\": \"~/.u2net/u2net.onnx\"}' path/to/input.png path/to/output.png\n```\n\n### rembg `p`\n\nused when input and output are folders.\n\nremove the background from all images in a folder\n\n```\nrembg p path/to/input path/to/output\n```\n\nsame as before, but watching for new/changed files to process\n\n```\nrembg p -w path/to/input path/to/output\n```\n\n### rembg `s`\n\nused to start http server.\n\nto see the complete endpoints documentation, go to: `http://localhost:5000/api`.\n\nremove the background from an image url\n\n```\ncurl -s \"http://localhost:5000/api/remove?url=http://input.png\" -o output.png\n```\n\nremove the background from an uploaded image\n\n```\ncurl -s -f file=@/path/to/input.jpg \"http://localhost:5000/api/remove\"  -o output.png\n```\n\n### rembg `b`\n\nprocess a sequence of rgb24 images from stdin. this is intended to be used with another program, such as ffmpeg, that outputs rgb24 pixel data to stdout, which is piped into the stdin of this program, although nothing prevents you from manually typing in images at stdin.\n\n```\nrembg b image_width image_height -o output_specifier\n```\n\narguments:\n\n- image_width : width of input image(s)\n- image_height : height of input image(s)\n- output_specifier: printf-style specifier for output filenames, for example if `output-%03u.png`, then output files will be named `output-000.png`, `output-001.png`, `output-002.png`, etc. output files will be saved in png format regardless of the extension specified. you can omit it to write results to stdout.\n\nexample usage with ffmpeg:\n\n```\nffmpeg -i input.mp4 -ss 10 -an -f rawvideo -pix_fmt rgb24 pipe:1 | rembg b 1280 720 -o folder/output-%03u.png\n```\n\nthe width and height values must match the dimension of output images from ffmpeg. note for ffmpeg, the \"`-an -f rawvideo -pix_fmt rgb24 pipe:1`\" part is required for the whole thing to work.\n\n\n## usage as a library\n\ninput and output as bytes\n\n```python\nfrom rembg import remove\n\ninput_path = 'input.png'\noutput_path = 'output.png'\n\nwith open(input_path, 'rb') as i:\n    with open(output_path, 'wb') as o:\n        input = i.read()\n        output = remove(input)\n        o.write(output)\n```\n\ninput and output as a pil image\n\n```python\nfrom rembg import remove\nfrom pil import image\n\ninput_path = 'input.png'\noutput_path = 'output.png'\n\ninput = image.open(input_path)\noutput = remove(input)\noutput.save(output_path)\n```\n\ninput and output as a numpy array\n\n```python\nfrom rembg import remove\nimport cv2\n\ninput_path = 'input.png'\noutput_path = 'output.png'\n\ninput = cv2.imread(input_path)\noutput = remove(input)\ncv2.imwrite(output_path, output)\n```\n\nhow to iterate over files in a performatic way\n\n```python\nfrom pathlib import path\nfrom rembg import remove, new_session\n\nsession = new_session()\n\nfor file in path('path/to/folder').glob('*.png'):\n    input_path = str(file)\n    output_path = str(file.parent / (file.stem + \".out.png\"))\n\n    with open(input_path, 'rb') as i:\n        with open(output_path, 'wb') as o:\n            input = i.read()\n            output = remove(input, session=session)\n            o.write(output)\n```\nto see a full list of examples on how to use rembg, go to the [examples](usage.md) page.\n## usage as a docker\n\njust replace the `rembg` command for `docker run danielgatis/rembg`.\n\ntry this:\n\n```\ndocker run danielgatis/rembg i path/to/input.png path/to/output.png\n```\n\n## models\n\nall models are downloaded and saved in the user home folder in the `.u2net` directory.\n\nthe available models are:\n\n-   u2net ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/u2net.onnx), [source](https://github.com/xuebinqin/u-2-net)): a pre-trained model for general use cases.\n-   u2netp ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/u2netp.onnx), [source](https://github.com/xuebinqin/u-2-net)): a lightweight version of u2net model.\n-   u2net_human_seg ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/u2net_human_seg.onnx), [source](https://github.com/xuebinqin/u-2-net)): a pre-trained model for human segmentation.\n-   u2net_cloth_seg ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/u2net_cloth_seg.onnx), [source](https://github.com/levindabhi/cloth-segmentation)): a pre-trained model for cloths parsing from human portrait. here clothes are parsed into 3 category: upper body, lower body and full body.\n-   silueta ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/silueta.onnx), [source](https://github.com/xuebinqin/u-2-net/issues/295)): same as u2net but the size is reduced to 43mb.\n-   isnet-general-use ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/isnet-general-use.onnx), [source](https://github.com/xuebinqin/dis)): a new pre-trained model for general use cases.\n-   isnet-anime ([download](https://github.com/danielgatis/rembg/releases/download/v0.0.0/isnet-anime.onnx), [source](https://github.com/skytnt/anime-segmentation)): a high-accuracy segmentation for anime character.\n-   sam ([download encoder](https://github.com/danielgatis/rembg/releases/download/v0.0.0/vit_b-encoder-quant.onnx), [download decoder](https://github.com/danielgatis/rembg/releases/download/v0.0.0/vit_b-decoder-quant.onnx), [source](https://github.com/facebookresearch/segment-anything)): a pre-trained model for any use cases.\n\n### how to train your own model\n\nif you need more fine tuned models try this:\nhttps://github.com/danielgatis/rembg/issues/193#issuecomment-1055534289\n\n\n## some video tutorials\n\n- https://www.youtube.com/watch?v=3xqwpxjxymq\n- https://www.youtube.com/watch?v=dfkrgxdkgju\n- https://www.youtube.com/watch?v=ai-bs_t7yje\n- https://www.youtube.com/watch?v=d7w-c0urvcq\n\n## references\n\n- https://arxiv.org/pdf/2005.09007.pdf\n- https://github.com/nathanua/u-2-net\n- https://github.com/pymatting/pymatting\n\n## faq\n\n### when will this library provide support for python version 3.xx?\n\nthis library directly depends on the [onnxruntime](https://pypi.org/project/onnxruntime) library. therefore, we can only update the python version when [onnxruntime](https://pypi.org/project/onnxruntime) provides support for that specific version.\n\n## buy me a coffee\n\nliked some of my work? buy me a coffee (or more likely a beer)\n\n<a href=\"https://www.buymeacoffee.com/danielgatis\" target=\"_blank\"><img src=\"https://bmc-cdn.nyc3.digitaloceanspaces.com/bmc-button-images/custom_images/orange_img.png\" alt=\"buy me a coffee\" style=\"height: auto !important;width: auto !important;\"></a>\n\n## license\n\ncopyright (c) 2020-present [daniel gatis](https://github.com/danielgatis)\n\nlicensed under [mit license](./license.txt)\n",
  "docs_url": null,
  "keywords": "remove,background,u2net",
  "license": "",
  "name": "rembg",
  "package_url": "https://pypi.org/project/rembg/",
  "project_url": "https://pypi.org/project/rembg/",
  "project_urls": {
    "Homepage": "https://github.com/danielgatis/rembg"
  },
  "release_url": "https://pypi.org/project/rembg/2.0.53/",
  "requires_dist": [
    "jsonschema",
    "numpy",
    "onnxruntime",
    "opencv-python-headless",
    "pillow",
    "pooch",
    "pymatting",
    "scikit-image",
    "scipy",
    "tqdm",
    "aiohttp ; extra == 'cli'",
    "asyncer ; extra == 'cli'",
    "click ; extra == 'cli'",
    "fastapi ; extra == 'cli'",
    "filetype ; extra == 'cli'",
    "gradio ; extra == 'cli'",
    "python-multipart ; extra == 'cli'",
    "uvicorn ; extra == 'cli'",
    "watchdog ; extra == 'cli'",
    "bandit ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "imagehash ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "setuptools ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "onnxruntime-gpu ; extra == 'gpu'"
  ],
  "requires_python": ">=3.8, <3.12",
  "summary": "remove image background",
  "version": "2.0.53",
  "releases": [],
  "developers": [
    "daniel_gatis",
    "danielgatis@gmail.com"
  ],
  "kwds": "rembg background remove svg remover",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_rembg",
  "homepage": "https://github.com/danielgatis/rembg",
  "release_count": 25,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_asyncer",
    "pypi_bandit",
    "pypi_black",
    "pypi_click",
    "pypi_fastapi",
    "pypi_filetype",
    "pypi_flake8",
    "pypi_gradio",
    "pypi_imagehash",
    "pypi_isort",
    "pypi_jsonschema",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_onnxruntime",
    "pypi_onnxruntime_gpu",
    "pypi_opencv_python_headless",
    "pypi_pillow",
    "pypi_pooch",
    "pypi_pymatting",
    "pypi_pytest",
    "pypi_python_multipart",
    "pypi_scikit_image",
    "pypi_scipy",
    "pypi_setuptools",
    "pypi_tqdm",
    "pypi_twine",
    "pypi_uvicorn",
    "pypi_watchdog",
    "pypi_wheel"
  ]
}
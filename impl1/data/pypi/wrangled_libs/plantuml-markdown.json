{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: filters",
    "topic :: text processing :: markup :: html"
  ],
  "description": "[![build status](https://travis-ci.org/mikitex70/plantuml-markdown.svg?branch=master)](https://travis-ci.org/mikitex70/plantuml-markdown)\n\n[plantuml][] extension for [python-markdown][]\n==============================================\n\n* [introduction](#introduction)\n* [installation](#installation)\n  * [using a local plantuml binary](#using-a-local-plantuml-binary)\n  * [using a remote server](#using-a-remote-server)\n    * [using a plantuml server](#using-a-plantuml-server)\n    * [using a kroki server](#using-a-kroki-server)\n    * [file inclusion management](#file-inclusion-management)\n* [plugin options](#plugin-options)\n  * [a note on the `priority` configuration](#a-note-on-the-priority-configuration)\n* [running tests](#running-tests)\n* [running tests using docker](#running-tests-using-docker)\n\nintroduction\n------------\n\nthis plugin implements a block extension that can be used to specify a [plantuml] diagram that will be converted into an\nimage and inserted into the document.\n\nsyntax:\n\n```markdown\n::uml:: [format=\"png|svg|txt\"] [classes=\"class1 class2 ...\"] [alt=\"text for alt\"] [title=\"text for title\"] [width=\"300px\"] [height=\"300px\"]\n  plantuml script diagram\n::end-uml::\n```\n\nexample:\n\n```markdown\n::uml:: format=\"png\" classes=\"uml mydiagram\" alt=\"my super diagram placeholder\" title=\"my super diagram\" width=\"300px\" height=\"300px\"\n  goofy ->  mickeymouse: calls\n  goofy <-- mickeymouse: responds\n::end-uml::\n```\n\nthe gitlab/github block syntax is also recognized. example:\n\n    ```plantuml id=\"mydiag\" format=\"png\" classes=\"uml mydiagram\" alt=\"my super diagram placeholder\" title=\"my super diagram\" width=\"300px\" height=\"300px\"\n      goofy ->  mickeymouse: calls\n      goofy <-- mickeymouse: responds\n    ```\n\noptions are optional (otherwise the wouldn't be options), but if present must be specified in the order \n`id`, `format`, `classes`, `alt`, `title`, `width`, `height`, and `source`.\nthe option value may be enclosed in single or double quotes.\n\nsupported values for `format` parameter are:\n\n* `png`: html `img` tag with embedded png image\n* `svg`: html `img` tag with embedded svg image (links are not navigable)\n* `svg_object`: html `object` tag with embedded svg image (links are navigable)\n* `svg_inline`: html5 `svg` tag with inline svg image source (links are navigable, can be manipulated with css rules)\n* `txt`: plain text diagrams.\n\nthe `width` and `height` options must include a [css unit](https://www.w3schools.com/cssref/css_units.asp).\n\n`source` parameter is used for inclusion of an external source diagram instead on an inline code. here's an example in\ngitlab/github block syntax.\n\n> basic.puml\n\n    @startuml\n    title authentication sequence\n        alice->bob: authentication request\n        note right of bob: bob thinks about it\n        bob->alice: authentication response\n    @enduml\n\n> index.md\n\n    ```plantuml source=\"basic.puml\"\n    '' this code is appended to the contents of basic.puml\n    goofy ->  mickeymouse: calls\n    goofy <-- mickeymouse: responds\n    ```\n\ninstallation\n------------\n\nto use the plugin with [python-markdown][] you have these choices:\n\n* with `pip`, do a simple `pip install plantuml-markdown`, and the plugin should be ready to be used\n* on windows you can use [chocolatey](https://chocolatey.org/), a package manager for windows: do a \n  `choco install plantuml` and you are ready to work (this command will install all dependencies, java and graphviz\n   included, see https://chocolatey.org/packages/plantuml for details)\n* copy the file `plantuml-markdown.py` in the `extensions` folder of [python-markdown][]. for example, for python 2.7\n  you must do:\n  \n  ```console\n  $ sudo cp plantuml-markdown.py /usr/lib/python27/site-packages/markdown/extensions/\n  ```\n* copy the file somewhere in your home. a good choice may be the `user-site` path, for example (`bash` syntax):\n\n  ```console\n  $ export installpath=\"`python -m site --user-site`/plantuml-markdown\"\n  $ mkdir -p \"$installpath\"\n  $ cp plantuml-markdown.py \"$installpath/mdx_plantuml-markdown.py\"\n  $ export pythonpath=\"$installpath\"\n  ```\n  \n  you must export `pythonpath` before running `markdown_py`, or you can put the definition in `~/.bashrc`.\n\nafter installed, you can use this plugin by activating it in the `markdown_py` command. for example:\n\n    markdown_py -x plantuml_markdown mydoc.md > out.html\n\nbut before to use it, you need to configure which [plantuml] binary to use: a local binary, or a remote server.\n\n### using a local plantuml binary\n\nyou need to install [plantuml][] (see the site for details) and [graphviz][] 2.26.3 or later.\nthe plugin expects a program `plantuml` in the classpath. if not installed by your package\nmanager, you can create a shell script and place it somewhere in the classpath. for example,\nsave the following into `/usr/local/bin/plantuml` (supposing [plantuml][] installed into\n`/opt/plantuml`):\n\n```\n#!/bin/bash\njava $plantuml_javaopts -jar /opt/plantuml/plantuml.jar ${@}\n```\n\nthe `plantuml_javaopts` variable can be used to set specific java options, such as memory tuning options,\nor to set system variable used by plantuml, such as then include search path. this would avoid modifications of the\n`plantuml` script. \nfor example, with a diagram like:\n\n````\n```plantuml\n!include mydefs.puml\n\na --> b\n```\n````\n\nyou can do:\n\n```\nexport plantuml_javaopts=\"-dplantuml.include.path=$home/plantuml_defs\"\nmarkdown_py -x plantuml_markdown mydoc.md > out.html\n```\n\nthe same thing can be done using the environment variable `_java_options`, which is read by default by the `java`\nexecutable.\n\non windows can be used the following `plantuml.bat` (many thanks to [henn1001](https://github.com/henn1001)):\n\n```\n@echo off\nset mypath=%~dp0\n\nsetlocal\nset graphviz_dot=%mypath%\\graphviz\\bin\\dot.exe\n\njava %plantuml_javaopts% -jar %mypath%\\plantuml.jar %*\n```\n\nmake sure the `plantuml.bat` is on the path.\n\nfor [gentoo linux][gentoo] there is an ebuild at http://gpo.zugaina.org/dev-util/plantuml/rdep: you can download\nthe ebuild and the `files` subfolder or you can add the `zugaina` repository with [layman][]\n(recommended).\n\n### using a remote server\n\n#### using a plantuml server\n\nfrom version `2.0` a [plantuml server] can be used for rendering diagrams. this speedups a\nlot the diagrams rendering but needs to send the diagram source to a server.\n\nyou can download the [war](http://sourceforge.net/projects/plantuml/files/plantuml.war/download) and deploy in a servlet\ncontainer, or you can run it as a [docker container](https://hub.docker.com/r/plantuml/plantuml-server/).\n\nin either cases you need to specify the url of the server in a configuration file like:\n\n```yaml\nplantuml_markdown:\n  server: http://www.plantuml.com/plantuml  # plantuml server, for remote rendering\n  # other global options\n  insecure: false                           # set to true if the server uses self-signed certificates\n  cachedir: /tmp                            # set a non-empty value to enable caching\n  base_dir: .                               # where to search for diagrams to include\n  config:                                   # plantuml config file, relative to base_dir (a plantuml file included in every diagram)\n  format: png                               # default diagram image format\n  classes: class1,class2                    # default diagram classes\n  encoding: utf-8                           # character encoding for external files (default utf-8)\n  title: uml diagram                        # default title (tooltip) for diagram images\n  alt: uml diagram image                    # default `alt` attribute for diagram images\n  image_maps: true                          # generate image maps when the format is png and there are hyperlinks\n  priority: 30                              # plugin priority; the higher, the sooner will be applied (default 30)\n  http_method: get                          # get or post  - note that plantuml.com only supports get (default get)       \n  fallback_to_get: true                     # when using post, should get be used as fallback (post will fail if @startuml/@enduml tags not used) (default true)\n  theme: bluegray                           # theme to be set, can be overridden inside puml files, (default none)\n  puml_notheme_cmdlist: [                             \n                          'version', \n                          'listfonts', \n                          'stdlib', \n                          'license'\n                        ]                   # theme will not be set if listed commands present (default as listed)\n```\n\nthen you need to specify the configuration file on the command line:\n\n    markdown_py -x plantuml_markdown -c myconfig.yml mydoc.md > out.html\n\n#### using a kroki server\n\nstarting from version `3.7.0` a [kroki] server can be used as an alternative of [plantuml server].\nthe configuration is similar, only use the `server_kroki` configuration property instead of the `server` property.\n\n#### file inclusion management\n\nusually, remote servers, for security reasons, do not allow arbitrary '!include' instructions to be executed.\n\nto try to bypass this limitation, the plugin behaves as follows:\n* the inclusion of [stdlib](https://plantuml.com/stdlib) libraries is considered secure and managed by the server; \n  example `!include <c4/c4_container>`\n* if the source to be included starts with `http` or `https`, the inclusion can be handled by the server; be aware that \n  the server may refuse to include them ([kroki] in an example)\n* if the source name matches one of the regular expressions in the `server_include_whitelist` configuration, the file is\n  assumed to be safe for the server; an example is `!include c4/c4_container.puml` with the server [kroki], which has a\n  copy of the c4 library internally\n* otherwise, it is assumed that the file is local and that the `include` statement is replaced with the contents of the \n  file before sending it to the remote server. this behavior can be changed by declaring an appropriate regular\n  expression in `server_include_whitelist` or by adding a comment to the line:\n    * if the comment begins with `local`, include is forced local; e.g. `!include c4/c4_container.puml ' local file`\n      will search and read the local file `c4/c4_container.puml`\n    * if the comment begins with `remote`, include is treated as a server side include;\n      for example `!include my_configuration.puml 'server-side include`\n* includes are resolved recursively, as when used with a local plantuml.\n\nif using a local plantuml installation includes works out of the box only if includes are in the current directory. if \nthey are in other directories there are two possibilities:\n* use the directory in includes (ex: `!include includes/my-defs.puml`)\n* set the `base_dir` option in the plugin configuration (ex: `base_dir: includes`) **and** change the default plantuml\n  command in something like `plantuml_cmd: java -dplantuml.include.path=includes -jar path/to/plantuml.jar` \n\nplugin options\n--------------\n\nthe plugin has several configuration option:\n\n* `alt`: text to show when image is not available. defaults to `uml diagram`\n* `base_dir`: path where to search for external diagrams files\n* `cachedir`: directory for caching of diagrams. defaults to `''`, no caching\n* `classes`: space separated list of classes for the generated image. defaults to `uml`\n* `config`: plantuml config file, relative to `base_dir` (a plantuml file included before every diagram, see\n  [plantuml documentation](https://plantuml.com/command-line)). defaults to `none`\n* `encoding`: character encoding for external files (see `source` parameter); default encoding is `utf-8`. please note \n  that on windows text files may use the `cp1252` as default encoding, so setting `encoding: cp1252` may fix incorrect \n  characters rendering.\n* `fallback_to_get`: fallback to `get` if `post` fails. defaults to true\n* `format`: format of image to generate (`png`, `svg`, `svg_object`, `svg_inline` or `txt`). defaults to `png` (see \n  example section above for further explanations of the values for `format`)\n* `remove_inline_svg_size`: when `format` is `svg_inline`, remove the `width` and `height` attributes of the generated\n  svg. defaults to `true`\n* `http_method`: http method for server - `get` or `post`. \"defaults to `get`\n* `image_maps`: generate image maps if format is `png` and the diagram has hyperlinks; `true`, `on`, `yes` or `1`\n  activates image maps, everything else disables it. defaults to `true`\n* `insecure`: if `true` do not validate ssl certificate of the plantuml server; set to `true` when using a custom \n  plantuml installation with self-signed certificates. defaults to `false`\n* `kroki_server`: kroki server url, as alternative to `server` for remote rendering (image maps mus be disabled \n  manually). defaults to `''`, use plantuml server if defined\n* `plantuml_cmd`: command to run for executing plantuml locally; for example, if you need to set the include directory\n  the value can be `java -dplantuml.include.path=includes -jar plantuml.jar`. defaults to `plantuml` (the system script)\n* `priority`: extension priority. higher values means the extension is applied sooner than others. defaults to `30`\n* `puml_notheme_cmdlist`: theme will not be set if listed commands present. default list is\n  `['version', 'listfonts', 'stdlib', 'license']`. **if modifying please copy the default list provided and append**\n* `server`: plantuml server url, for remote rendering. defaults to `''`, use local command\n* `server_include_whitelist`: list of regular expressions defining which include files are supported by the server. \n  defaults to `[r'^c4.*$']` (all files starting with `c4`). **see [inclusion management](#inclusion-management) for \n  details**\n* `theme`: default theme to use, will be overridden  by !theme directive. defaults to blank i.e. plantuml `none` theme\n* `title`: tooltip for the diagram\n\nfor passing options to the `plantuml_plugin` see the documentation of the tool you are using.\n\nfor `markdown_py`, simply write a yaml file with the configurations and use the `-c` option on the command line.\nsee the [using a plantuml server](#using-plantuml-server) section for an example.\n\n### a note on the `priority` configuration\n\nwith `markdownm_py` plugin extensions can conflict if they manipulate the same block of text. \nexamples are the [fenced code blocks](https://python-markdown.github.io/extensions/fenced_code_blocks)\nor [snippets](https://facelessuser.github.io/pymdown-extensions/extensions/snippets/) extensions.\n\nevery plugin has a priority configured, most wants to be run as te first or the last plugin in the chain. the\n`plantuml_markdown` plugin fits in the middle, trying to work as best without conflicting with other plugins.\n\nif you are getting strange behaviours in conjunction with other plugins, you can use the `priority` configuration to\ntry to avoid the conflict, letting the plugin run before (higher value) or after other plugins (lower value).\n\nas an example of possible conflicts see issue [#38](https://github.com/mikitex70/plantuml-markdown/issues/38).\n\nrunning tests\n-------------\n\n`plantuml-markdown` is tested with python >= 3.6 and `markdown >= 3.0.1`. older versions of python or `markdown` may\nwork, but if it doesn't i can't guarantee a fix as they are end-of-life versions.\n\nthe test execution requires a specific version of [plantuml] (the image generated can be different with different \n[plantuml] versions).\n\nbefore to run tests, install the required dependencies:\n\n```bash\npip install -r test-requirements.txt\n```\n\nto run the tests, execute the following command:\n\n```bash\nnose2 --verbose -f\n```\n\nthis command uses a custom version of the `plantuml` command which will download the expected version of [plantuml] for\ntests execution without clobbering the system.\n\n\nrunning tests using docker\n-------------------------\n\nthis requires `docker` and `docker-compose` to be installed\n\nfirst setup a small python alpine image with all the dependencies pre-installed. \n```bash\ndocker-compose build\n``` \n\nthen run the container to automatically trigger tests and print the output mapping the contents of your workspace\n\n```bash\ndocker-compose up\n```\n\nto set specific version of markdown or python:\n```bash\nptyhon_ver=3.9 markdown_ver=3.3.7 docker-compose build && docker-compose up\n```\n\n\n[python-markdown]: https://python-markdown.github.io/\n[plantuml]: http://plantuml.sourceforge.net/\n[plantuml server]: http://plantuml.com/server\n[kroki]: https://kroki.io/\n[graphviz]: http://www.graphviz.org\n[gentoo]: http://www.gentoo.org\n[layman]: http://wiki.gentoo.org/wiki/layman\n",
  "docs_url": null,
  "keywords": "markdown,typesetting,include,plugin,extension",
  "license": "",
  "name": "plantuml-markdown",
  "package_url": "https://pypi.org/project/plantuml-markdown/",
  "project_url": "https://pypi.org/project/plantuml-markdown/",
  "project_urls": {
    "Homepage": "https://github.com/mikitex70/plantuml-markdown"
  },
  "release_url": "https://pypi.org/project/plantuml-markdown/3.9.2/",
  "requires_dist": [
    "Markdown",
    "requests",
    "six"
  ],
  "requires_python": "",
  "summary": "a plantuml plugin for markdown",
  "version": "3.9.2",
  "releases": [],
  "developers": [
    "michele.tessaro@email.it",
    "michele_tessaro"
  ],
  "kwds": "plantuml_markdown plantuml_plugin markdown_py plantuml_cmd plantuml_defs",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_plantuml_markdown",
  "homepage": "https://github.com/mikitex70/plantuml-markdown",
  "release_count": 43,
  "dependency_ids": [
    "pypi_markdown",
    "pypi_requests",
    "pypi_six"
  ]
}
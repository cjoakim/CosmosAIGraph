{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "# frozendict\n### table of contents\n* [introduction](#introduction)\n* [install](#install)\n* [api](#api)\n* [examples](#examples)\n* [building](#building)\n* [benchmarks](#benchmarks)\n\n# introduction\nwelcome, fellow programmer!\n\n`frozendict` is a simple immutable dictionary. it's fast as `dict`, and \n[sometimes faster](https://github.com/marco-sulla/python-frozendict#benchmarks)!\n\nunlike other similar implementations, immutability is guaranteed: you can't \nchange the internal variables of the class, and they are all immutable \nobjects.  reinvoking `__init__` does not alter the object.\n\nthe api is the same as `dict`, without methods that can change the \nimmutability. so it supports also `fromkeys`, unlike other implementations. \nfurthermore it can be `pickle`d, un`pickle`d and have an hash, if all values \nare hashable.\n\nyou can also add any `dict` to a `frozendict` using the `|` operator. the result is a new `frozendict`.\n\n# install\n\nyou can install `frozendict` by simply typing in a command line:\n\n```bash\npip install frozendict\n```\n\nthe c extension is optional by default from version 2.3.5. you can make it mandatory using:\n\n```bash\ncibuildwheel=1 pip install frozendict\n```\n\non the contrary, if you want the pure py implementation:\n\n```bash\nfrozendict_pure_py=1 pip install frozendict\n```\n\n# api\nthe api is the same of `dict` of python 3.10, without the methods and operands which alter the map. additionally, `frozendict` supports these methods:\n\n### `__hash__()`\n\nif all the values of the `frozendict` are hashable, returns an hash, otherwise raises a typeerror.\n\n### `set(key, value)`\n\nit returns a new `frozendict`. if key is already in the original `frozendict`, the new one will have it with the new value associated. otherwise, the new `frozendict` will contain the new (key, value) item.\n\n### `delete(key)`\n\nit returns a new `frozendict` without the item corresponding to the key. if the key is not present, a keyerror is raised.\n\n### `setdefault(key[, default])`\n\nif key is already in `frozendict`, the object itself is returned unchanged. otherwise, the new `frozendict` will contain the new (key, default) item. the parameter default defaults to none.\n\n### `key([index])`\n\nit returns the key at the specified index (determined by the insertion order). if index is not passed, it defaults to 0. if the index is negative, the position will be the size of the `frozendict` + index\n\n### `value([index])`\nsame as `key(index)`, but it returns the value at the given index.\n\n### `item([index])`\nsame as `key(index)`, but it returns a tuple with (key, value) at the given index.\n\n# examples\n\n```python\nfrom frozendict import frozendict\n\nfd = frozendict(guzzanti = \"corrado\", hicks = \"bill\")\n\nprint(fd)\n# frozendict({'guzzanti': 'corrado', 'hicks': 'bill'})\n\nfrozendict({\"guzzanti\": \"corrado\", \"hicks\": \"bill\"})\n# frozendict({'guzzanti': 'corrado', 'hicks': 'bill'})\n\nhash(fd)\n# 5833699487320513741\n\nfd_unhashable = frozendict({1: []})\nhash(fd_unhashable)\n# typeerror: not all values are hashable.\n\nfrozendict({frozendict(nested = 4, key = 2): 42})\n# frozendict({frozendict({'nested': 4, 'key': 2}): 42})\n\nfd | {1: 2}\n# frozendict({'guzzanti': 'corrado', 'hicks': 'bill', 1: 2})\n\nfd.set(1, 2)\n# frozendict.frozendict({'guzzanti': 'corrado', 'hicks': 'bill', 1: 2})\n\nfd.set(\"guzzanti\", \"sabina\")\n# frozendict.frozendict({'guzzanti': 'sabina', 'hicks': 'bill'})\n\nfd.delete(\"guzzanti\")\n# frozendict.frozendict({'hicks': 'bill'})\n\nfd.setdefault(\"guzzanti\", \"sabina\")\n# frozendict.frozendict({'guzzanti': 'corrado', 'hicks': 'bill'})\n\nfd.setdefault(1, 2)\n# frozendict.frozendict({'guzzanti': 'corrado', 'hicks': 'bill', 1: 2})\n\nfd.key()\n# 'guzzanti'\n\nfd.value(1)\n# 'bill'\n\nfd.item(-1)\n# (1, 2)\n\nprint(fd[\"guzzanti\"])\n# corrado\n\nfd[\"brignano\"]\n# keyerror: 'brignano'\n\nlen(fd)\n# 2\n\n\"guzzanti\" in fd\n# true\n\n\"guzzanti\" not in fd\n# false\n\n\"brignano\" in fd\n# false\n\nfd5 = frozendict(fd)\nid_fd5 = id(fd5)\nfd5 |= {1: 2}\nfd5\n# frozendict.frozendict({'guzzanti': 'corrado', 'hicks': 'bill', 1: 2})\nid(fd5) != id_fd5\n# true\n\nfd2 = fd.copy()\nfd2 == fd\n# true\n\nfd3 = frozendict(fd)\nfd3 == fd\n# true\n\nfd4 = frozendict({\"hicks\": \"bill\", \"guzzanti\": \"corrado\"})\n\nprint(fd4)\n# frozendict({'hicks': 'bill', 'guzzanti': 'corrado'})\n\nfd4 == fd\n# true\n\nimport pickle\nfd_unpickled = pickle.loads(pickle.dumps(fd))\nprint(fd_unpickled)\n# frozendict({'guzzanti': 'corrado', 'hicks': 'bill'})\nfd_unpickled == fd\n# true\n\nfrozendict(guzzanti=\"corrado\", hicks=\"bill\")\n# frozendict({'guzzanti': 'corrado', 'hicks': 'bill'}\n\nfd.get(\"guzzanti\")\n# 'corrado'\n\nprint(fd.get(\"brignano\"))\n# none\n\ntuple(fd.keys())\n# ('guzzanti', 'hicks')\n\ntuple(fd.values())\n# ('corrado', 'bill')\n\ntuple(fd.items())\n# (('guzzanti', 'corrado'), ('hicks', 'bill'))\n\nfrozendict.fromkeys([\"corrado\", \"sabina\"], \"guzzanti\")\n# frozendict({'corrado': 'guzzanti', 'sabina': 'guzzanti'})\n\niter(fd)\n# <dict_keyiterator object at 0x7feb75c49188>\n\nfd[\"guzzanti\"] = \"caterina\"\n# typeerror: 'frozendict' object doesn't support item assignment\n```\n\n# building\nyou can build `frozendict` directly from the code, using\n\n```\npython3 setup.py bdist_wheel\n```\n\nthe c extension is optional by default from version 2.3.5. you can make it mandatory by passing the environment variable `cibuildwheel` with value `1`\n\non the contrary, if you want the pure py implementation, you can pass the env var `frozendict_pure_py` with value `1`\n\n# benchmarks\n\nsome benchmarks between `dict` and `frozendict`[1]:\n\n```\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(d)`;         size:    5; keys: str; type:       dict; time: 8.02e-08; sigma: 4e-09\nname: `constructor(d)`;         size:    5; keys: str; type: frozendict; time: 8.81e-08; sigma: 3e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(d)`;         size:    5; keys: int; type:       dict; time: 7.96e-08; sigma: 5e-09\nname: `constructor(d)`;         size:    5; keys: int; type: frozendict; time: 8.97e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(d)`;         size: 1000; keys: str; type:       dict; time: 6.38e-06; sigma: 9e-08\nname: `constructor(d)`;         size: 1000; keys: str; type: frozendict; time: 6.21e-06; sigma: 2e-07\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(d)`;         size: 1000; keys: int; type:       dict; time: 3.49e-06; sigma: 3e-07\nname: `constructor(d)`;         size: 1000; keys: int; type: frozendict; time: 3.48e-06; sigma: 2e-07\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(kwargs)`;    size:    5; keys: str; type:       dict; time: 2.40e-07; sigma: 1e-09\nname: `constructor(kwargs)`;    size:    5; keys: str; type: frozendict; time: 2.48e-07; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(kwargs)`;    size: 1000; keys: str; type:       dict; time: 4.80e-05; sigma: 1e-06\nname: `constructor(kwargs)`;    size: 1000; keys: str; type: frozendict; time: 2.90e-05; sigma: 7e-07\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(seq2)`;      size:    5; keys: str; type:       dict; time: 2.01e-07; sigma: 9e-10\nname: `constructor(seq2)`;      size:    5; keys: str; type: frozendict; time: 2.50e-07; sigma: 1e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(seq2)`;      size:    5; keys: int; type:       dict; time: 2.18e-07; sigma: 2e-09\nname: `constructor(seq2)`;      size:    5; keys: int; type: frozendict; time: 2.73e-07; sigma: 1e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(seq2)`;      size: 1000; keys: str; type:       dict; time: 4.29e-05; sigma: 6e-07\nname: `constructor(seq2)`;      size: 1000; keys: str; type: frozendict; time: 4.33e-05; sigma: 6e-07\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(seq2)`;      size: 1000; keys: int; type:       dict; time: 3.04e-05; sigma: 4e-07\nname: `constructor(seq2)`;      size: 1000; keys: int; type: frozendict; time: 3.45e-05; sigma: 4e-07\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(o)`;         size:    5; keys: str; type:       dict; time: 7.93e-08; sigma: 3e-09\nname: `constructor(o)`;         size:    5; keys: str; type: frozendict; time: 2.41e-08; sigma: 6e-10\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(o)`;         size:    5; keys: int; type:       dict; time: 7.94e-08; sigma: 5e-09\nname: `constructor(o)`;         size:    5; keys: int; type: frozendict; time: 2.41e-08; sigma: 6e-10\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(o)`;         size: 1000; keys: str; type:       dict; time: 6.18e-06; sigma: 3e-07\nname: `constructor(o)`;         size: 1000; keys: str; type: frozendict; time: 2.41e-08; sigma: 6e-10\n////////////////////////////////////////////////////////////////////////////////\nname: `constructor(o)`;         size: 1000; keys: int; type:       dict; time: 3.47e-06; sigma: 2e-07\nname: `constructor(o)`;         size: 1000; keys: int; type: frozendict; time: 2.41e-08; sigma: 6e-10\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `o.copy()`;               size:    5; keys: str; type:       dict; time: 7.28e-08; sigma: 2e-09\nname: `o.copy()`;               size:    5; keys: str; type: frozendict; time: 3.18e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o.copy()`;               size:    5; keys: int; type:       dict; time: 7.21e-08; sigma: 4e-09\nname: `o.copy()`;               size:    5; keys: int; type: frozendict; time: 3.32e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o.copy()`;               size: 1000; keys: str; type:       dict; time: 6.16e-06; sigma: 3e-07\nname: `o.copy()`;               size: 1000; keys: str; type: frozendict; time: 3.18e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o.copy()`;               size: 1000; keys: int; type:       dict; time: 3.46e-06; sigma: 1e-07\nname: `o.copy()`;               size: 1000; keys: int; type: frozendict; time: 3.18e-08; sigma: 2e-09\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `o == o`;                 size:    5; keys: str; type:       dict; time: 7.23e-08; sigma: 8e-10\nname: `o == o`;                 size:    5; keys: str; type: frozendict; time: 2.44e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o == o`;                 size:    5; keys: int; type:       dict; time: 7.30e-08; sigma: 1e-09\nname: `o == o`;                 size:    5; keys: int; type: frozendict; time: 2.44e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o == o`;                 size: 1000; keys: str; type:       dict; time: 1.38e-05; sigma: 1e-07\nname: `o == o`;                 size: 1000; keys: str; type: frozendict; time: 2.44e-08; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `o == o`;                 size: 1000; keys: int; type:       dict; time: 1.05e-05; sigma: 7e-08\nname: `o == o`;                 size: 1000; keys: int; type: frozendict; time: 2.44e-08; sigma: 2e-09\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o`;             size:    5; keys: str; type:       dict; time: 7.33e-08; sigma: 2e-09\nname: `for x in o`;             size:    5; keys: str; type: frozendict; time: 6.70e-08; sigma: 1e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o`;             size:    5; keys: int; type:       dict; time: 7.33e-08; sigma: 2e-09\nname: `for x in o`;             size:    5; keys: int; type: frozendict; time: 6.70e-08; sigma: 1e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o`;             size: 1000; keys: str; type:       dict; time: 8.84e-06; sigma: 5e-08\nname: `for x in o`;             size: 1000; keys: str; type: frozendict; time: 7.06e-06; sigma: 6e-08\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o`;             size: 1000; keys: int; type:       dict; time: 8.67e-06; sigma: 7e-08\nname: `for x in o`;             size: 1000; keys: int; type: frozendict; time: 6.94e-06; sigma: 3e-08\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.values()`;    size:    5; keys: str; type:       dict; time: 7.28e-08; sigma: 9e-10\nname: `for x in o.values()`;    size:    5; keys: str; type: frozendict; time: 6.48e-08; sigma: 8e-10\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.values()`;    size:    5; keys: int; type:       dict; time: 7.25e-08; sigma: 1e-09\nname: `for x in o.values()`;    size:    5; keys: int; type: frozendict; time: 6.45e-08; sigma: 1e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.values()`;    size: 1000; keys: str; type:       dict; time: 9.06e-06; sigma: 5e-07\nname: `for x in o.values()`;    size: 1000; keys: str; type: frozendict; time: 7.04e-06; sigma: 4e-08\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.values()`;    size: 1000; keys: int; type:       dict; time: 9.53e-06; sigma: 3e-08\nname: `for x in o.values()`;    size: 1000; keys: int; type: frozendict; time: 6.97e-06; sigma: 3e-08\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.items()`;     size:    5; keys: str; type:       dict; time: 1.13e-07; sigma: 3e-09\nname: `for x in o.items()`;     size:    5; keys: str; type: frozendict; time: 1.16e-07; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.items()`;     size:    5; keys: int; type:       dict; time: 1.14e-07; sigma: 3e-09\nname: `for x in o.items()`;     size:    5; keys: int; type: frozendict; time: 1.17e-07; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.items()`;     size: 1000; keys: str; type:       dict; time: 1.53e-05; sigma: 3e-07\nname: `for x in o.items()`;     size: 1000; keys: str; type: frozendict; time: 1.53e-05; sigma: 4e-07\n////////////////////////////////////////////////////////////////////////////////\nname: `for x in o.items()`;     size: 1000; keys: int; type:       dict; time: 1.53e-05; sigma: 3e-07\nname: `for x in o.items()`;     size: 1000; keys: int; type: frozendict; time: 1.55e-05; sigma: 4e-07\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.dumps(o)`;        size:    5; keys: str; type:       dict; time: 6.82e-07; sigma: 2e-08\nname: `pickle.dumps(o)`;        size:    5; keys: str; type: frozendict; time: 2.86e-06; sigma: 1e-07\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.dumps(o)`;        size:    5; keys: int; type:       dict; time: 4.77e-07; sigma: 2e-08\nname: `pickle.dumps(o)`;        size:    5; keys: int; type: frozendict; time: 2.72e-06; sigma: 8e-08\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.dumps(o)`;        size: 1000; keys: str; type:       dict; time: 1.24e-04; sigma: 4e-06\nname: `pickle.dumps(o)`;        size: 1000; keys: str; type: frozendict; time: 1.92e-04; sigma: 5e-06\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.dumps(o)`;        size: 1000; keys: int; type:       dict; time: 2.81e-05; sigma: 6e-07\nname: `pickle.dumps(o)`;        size: 1000; keys: int; type: frozendict; time: 7.37e-05; sigma: 1e-06\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.loads(dump)`;     size:    5; keys: str; type:       dict; time: 9.08e-07; sigma: 6e-09\nname: `pickle.loads(dump)`;     size:    5; keys: str; type: frozendict; time: 1.79e-06; sigma: 9e-08\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.loads(dump)`;     size:    5; keys: int; type:       dict; time: 4.46e-07; sigma: 6e-09\nname: `pickle.loads(dump)`;     size:    5; keys: int; type: frozendict; time: 1.32e-06; sigma: 7e-08\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.loads(dump)`;     size: 1000; keys: str; type:       dict; time: 1.57e-04; sigma: 8e-06\nname: `pickle.loads(dump)`;     size: 1000; keys: str; type: frozendict; time: 1.69e-04; sigma: 7e-06\n////////////////////////////////////////////////////////////////////////////////\nname: `pickle.loads(dump)`;     size: 1000; keys: int; type:       dict; time: 5.97e-05; sigma: 5e-06\nname: `pickle.loads(dump)`;     size: 1000; keys: int; type: frozendict; time: 6.68e-05; sigma: 2e-06\n################################################################################\n////////////////////////////////////////////////////////////////////////////////\nname: `class.fromkeys()`;       size:    5; keys: str; type:       dict; time: 1.88e-07; sigma: 1e-09\nname: `class.fromkeys()`;       size:    5; keys: str; type: frozendict; time: 2.22e-07; sigma: 7e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `class.fromkeys()`;       size:    5; keys: int; type:       dict; time: 2.08e-07; sigma: 6e-09\nname: `class.fromkeys()`;       size:    5; keys: int; type: frozendict; time: 2.44e-07; sigma: 2e-09\n////////////////////////////////////////////////////////////////////////////////\nname: `class.fromkeys()`;       size: 1000; keys: str; type:       dict; time: 4.05e-05; sigma: 4e-06\nname: `class.fromkeys()`;       size: 1000; keys: str; type: frozendict; time: 3.84e-05; sigma: 5e-07\n////////////////////////////////////////////////////////////////////////////////\nname: `class.fromkeys()`;       size: 1000; keys: int; type:       dict; time: 2.93e-05; sigma: 7e-07\nname: `class.fromkeys()`;       size: 1000; keys: int; type: frozendict; time: 3.08e-05; sigma: 2e-06\n################################################################################\n```\n\n[1] benchmarks done under linux 64 bit, python 3.10.2, using the c extension.\n",
  "docs_url": null,
  "keywords": "immutable hashable picklable frozendict dict dictionary map mapping mappingproxytype developers stable utility",
  "license": "lgpl v3",
  "name": "frozendict",
  "package_url": "https://pypi.org/project/frozendict/",
  "project_url": "https://pypi.org/project/frozendict/",
  "project_urls": {
    "Bug Reports": "https://github.com/Marco-Sulla/python-frozendict/issues",
    "Homepage": "https://github.com/Marco-Sulla/python-frozendict",
    "Source": "https://github.com/Marco-Sulla/python-frozendict"
  },
  "release_url": "https://pypi.org/project/frozendict/2.3.10/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a simple immutable dictionary",
  "version": "2.3.10",
  "releases": [],
  "developers": [
    "marco_sulla",
    "marcosullaroma@gmail.com"
  ],
  "kwds": "frozendict_pure_py dict_keyiterator immutability hashable frozendict",
  "license_kwds": "lgpl v3",
  "libtype": "pypi",
  "id": "pypi_frozendict",
  "homepage": "https://github.com/marco-sulla/python-frozendict",
  "release_count": 31,
  "dependency_ids": []
}
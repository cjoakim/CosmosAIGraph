{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "gorilla\n=======\n\n.. image:: https://img.shields.io/travis/christophercrouzet/gorilla/master.svg\n   :target: https://travis-ci.org/christophercrouzet/gorilla\n   :alt: build status\n\n.. image:: https://img.shields.io/coveralls/christophercrouzet/gorilla/master.svg\n   :target: https://coveralls.io/r/christophercrouzet/gorilla\n   :alt: coverage status\n\n.. image:: https://img.shields.io/pypi/v/gorilla.svg\n   :target: https://pypi.python.org/pypi/gorilla\n   :alt: pypi latest version\n\n.. image:: https://readthedocs.org/projects/gorilla/badge/?version=latest\n   :target: https://gorilla.readthedocs.io\n   :alt: documentation status\n\n.. image:: https://img.shields.io/pypi/l/gorilla.svg\n   :target: https://pypi.python.org/pypi/gorilla\n   :alt: license\n\n\ngorilla is a python library that provides a convenient approach to monkey\npatching.\n\nmonkey patching is the process of **modifying module and class attributes at\nruntime** with the purpose of replacing or extending third-party code.\n\nalthough *not* a recommended practice, it is sometimes useful to fix or modify\nthe behaviour of a piece of code from a third-party library, or to extend its\npublic interface while making the additions feel like they are built-in into\nthe library.\n\nthe python language makes monkey patching extremely easy but the advantages of\ngorilla are multiple, not only in assuring a **consistent behaviour** on both\npython 2 and python 3 versions, but also in preventing common source of errors,\nand making the process both **intuitive and convenient** even when faced with\n*large* numbers of patches to create.\n\n\nfeatures\n--------\n\n* intuitive and convenient decorator approach to create patches.\n* can create patches for all class or module members at once.\n* compatible with both python 2 and python 3.\n* customizable behaviour.\n\n\nusage\n-----\n\nthanks to the dynamic nature of python that makes monkey patching possible, the\nprocess happens at runtime without ever having to directly modify the source\ncode of the third-party library:\n\n.. code-block:: python\n\n   >>> import gorilla\n   >>> import destination\n   >>> @gorilla.patches(destination.class)\n   ... class myclass(object):\n   ...     def method(self):\n   ...         print(\"hello\")\n   ...     @classmethod\n   ...     def class_method(cls):\n   ...         print(\"world!\")\n\n\nthe code above creates two patches, one for each member of the class\n``myclass``, but does not apply them yet. in other words, they define the\ninformation required to carry on the operation but are not yet inserted into\nthe specified destination class ``destination.class``.\n\nsuch patches created with the decorators can then be automatically retrieved by\nrecursively scanning a package or a module, then applied:\n\n.. code-block:: python\n\n   >>> import gorilla\n   >>> import mypackage\n   >>> patches = gorilla.find_patches([mypackage])\n   >>> for patch in patches:\n   ...     gorilla.apply(patch)\n\n\nsee the `tutorial`_ section from the documentation for more detailed examples\nand explanations on how to use gorilla.\n\n\ndocumentation\n-------------\n\nread the documentation online at `gorilla.readthedocs.io`_ or check its source\nin the ``doc`` directory.\n\n\nout there\n---------\n\nprojects using gorilla include:\n\n* `bana <https://github.com/christophercrouzet/bana>`_\n* `mlflow <https://github.com/mlflow/mlflow>`_\n\n\nauthor\n------\n\nchristopher crouzet\n<`christophercrouzet.com <https://christophercrouzet.com>`_>\n\n\n.. _gorilla.readthedocs.io: https://gorilla.readthedocs.io\n.. _tutorial: https://gorilla.readthedocs.io/en/latest/tutorial.html\n\n\n",
  "docs_url": null,
  "keywords": "gorilla monkey patch patching",
  "license": "mit",
  "name": "gorilla",
  "package_url": "https://pypi.org/project/gorilla/",
  "project_url": "https://pypi.org/project/gorilla/",
  "project_urls": {
    "Homepage": "https://github.com/christophercrouzet/gorilla"
  },
  "release_url": "https://pypi.org/project/gorilla/0.4.0/",
  "requires_dist": [
    "coverage ; extra == 'dev'",
    "pycodestyle ; extra == 'dev'",
    "pydocstyle ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "sphinx (>=1.3) ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "sphinx (>=1.3) ; extra == 'docs'"
  ],
  "requires_python": "",
  "summary": "convenient approach to monkey patching",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "christopher@crouzet.pm",
    "christopher_crouzet"
  ],
  "kwds": "gorilla _gorilla patch patches find_patches",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gorilla",
  "homepage": "https://github.com/christophercrouzet/gorilla",
  "release_count": 5,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_pycodestyle",
    "pypi_pydocstyle",
    "pypi_pylint",
    "pypi_sphinx",
    "pypi_tox"
  ]
}
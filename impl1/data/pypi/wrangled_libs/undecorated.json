{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python"
  ],
  "description": "undecorated\n-----------\n\nthis library provides an easy way to strip a function of its decorators.\n\ntested on python 2.6 up to 3.6: |travis|\n\n\n.. |travis| image:: https://travis-ci.org/mapleoin/undecorated.svg?branch=master\n    :target: https://travis-ci.org/mapleoin/undecorated\n\n\nquickstart\n``````````\n\ninstall:\n\n.. code:: bash\n\n    $ pip install undecorated\n\ntry it on one of your functions:\n\n.. code:: python\n\n   >>> from undecorated import undecorated\n   >>> undecorated(my_decorated_function)\n   <function my_decorated_function at 0x7fbdd6e95938>\n\n`undecorated` has returned your original function clean of any decorators.\n\n\nit also works with class decorators!\n\n\nexample\n```````\n\n.. code:: python\n\n    >>> from functools import wraps\n    >>> from undecorated import undecorated\n    >>>\n    >>> def decorate_with(*decorations):\n    ...     def decorator(f):\n    ...         @wraps(f)\n    ...         def wrapper(*args, **kwargs):\n    ...             print decorations\n    ...             return f(*args, **kwargs)\n    ...         return wrapper\n    ...     return decorator\n    ... \n    >>> @decorate_with('yellow_bauble')\n    ... @decorate_with('red_bauble')\n    ... @decorate_with('tinsel')\n    ... def tree():\n    ...     print 'tree'\n    ... \n    >>> tree()\n    ('yellow_bauble',)\n    ('red_bauble',)\n    ('tinsel',)\n    tree\n    >>> undecorated(tree)()\n    tree\n\n\nproject\n```````\n\nthis project uses `semantic versioning <http://semver.org>`.\n\n\nlicense\n```````\n\ncopyright 2016 ionu\u021b ar\u021b\u0103ri\u0219i <ionut@artarisi.eu>\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "undecorated",
  "package_url": "https://pypi.org/project/undecorated/",
  "project_url": "https://pypi.org/project/undecorated/",
  "project_urls": {
    "Homepage": "https://github.com/mapleoin/undecorated"
  },
  "release_url": "https://pypi.org/project/undecorated/0.3.0/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "undecorate python functions, methods or classes",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "ionut@artarisi.eu"
  ],
  "kwds": "my_decorated_function decorators decorator functools decorate_with",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_undecorated",
  "homepage": "https://github.com/mapleoin/undecorated",
  "release_count": 5,
  "dependency_ids": []
}
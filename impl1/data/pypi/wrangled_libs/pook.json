{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pook |pypi| |coverage status| |documentation status| |stability| |quality| |versions|\n=====================================================================================\n\nversatile, expressive and hackable utility library for http traffic mocking\nand expectations made easy in `python`_. heavily inspired by `gock`_.\n\nto get started, read the `documentation`_, `how it works`_, `faq`_ or `examples`_.\n\nfeatures\n--------\n\n-  simple, expressive and fluent api.\n-  provides both pythonic and chainable dsl api styles.\n-  full-featured http response definitions and expectations.\n-  matches any http protocol primitive (url, method, query params, headers, body...).\n-  full regular expressions capable mock expectations matching.\n-  supports most popular http clients via interceptor adapters.\n-  configurable volatile, persistent or ttl limited mocks.\n-  works with unittest and pytest.\n-  first-class json & xml support matching and responses.\n-  supports json schema body matching.\n-  works in both runtime and testing environments.\n-  can be used as decorator and/or via context managers.\n-  supports real networking mode with optional traffic filtering.\n-  map/filter mocks easily for generic or custom mock expectations.\n-  custom user-defined mock matcher functions.\n-  simulated raised error exceptions.\n-  network delay simulation (only available for ``aiohttp``).\n-  pluggable and hackable api.\n-  customizable http traffic mock interceptor engine.\n-  supports third-party mocking engines, such as `mocket`_.\n-  fits good for painless test doubles.\n-  does not support websocket traffic mocking.\n-  works with +3.8 (including pypy).\n-  dependency-less: just 3 small dependencies for jsonschema, xml tree comparison, and url parsing.\n\n\nsupported http clients\n----------------------\n\n``pook`` can work with multiple mock engines, however it provides a\nbuilt-in one by default, which currently supports traffic mocking in\nthe following http clients:\n\n-  \u2714  `urllib3`_ v1+\n-  \u2714  `requests`_ v2+\n-  \u2714  `aiohttp`_ v3+\n-  \u2714  `urllib`_ / `http.client`_\n\nmore http clients can be supported progressively.\n\n**note**: only recent http client package versions were tested.\n\ninstallation\n------------\n\nusing ``pip`` package manager (requires pip 1.8+):\n\n.. code:: bash\n\n    pip install --upgrade pook\n\nor install the latest sources from github:\n\n.. code:: bash\n\n    pip install -e git+git://github.com/h2non/pook.git#egg=pook\n\n\ngetting started\n---------------\n\nsee readthedocs documentation:\n\n|documentation status|\n\n\napi\n---\n\nsee `annotated api reference`_ documention.\n\n\nexamples\n--------\n\nsee `examples`_ documentation for full featured code and use case examples.\n\nbasic mocking:\n\n.. code:: python\n\n    import pook\n    import requests\n\n    @pook.on\n    def test_my_api():\n        mock = pook.get('http://twitter.com/api/1/foobar', reply=404, response_json={'error': 'not found'})\n\n        resp = requests.get('http://twitter.com/api/1/foobar')\n        assert resp.status_code == 404\n        assert resp.json() == {\"error\": \"not found\"}\n        assert mock.calls == 1\n\nusing the chainable api dsl:\n\n.. code:: python\n\n    import pook\n    import requests\n\n    @pook.on\n    def test_my_api():\n        mock = (pook.get('http://twitter.com/api/1/foobar')\n                  .reply(404)\n                  .json({'error': 'not found'}))\n\n        resp = requests.get('http://twitter.com/api/1/foobar')\n        assert resp.json() == {\"error\": \"not found\"}\n        assert mock.calls == 1\n\nusing the decorator:\n\n.. code:: python\n\n    import pook\n    import requests\n\n    @pook.get('http://httpbin.org/status/500', reply=204)\n    @pook.get('http://httpbin.org/status/400', reply=200)\n    def fetch(url):\n        return requests.get(url)\n\n    res = fetch('http://httpbin.org/status/400')\n    print('#1 status:', res.status_code)\n\n    res = fetch('http://httpbin.org/status/500')\n    print('#2 status:', res.status_code)\n\n\nsimple ``unittest`` integration:\n\n.. code:: python\n\n    import pook\n    import unittest\n    import requests\n\n\n    class testunittestengine(unittest.testcase):\n\n        @pook.on\n        def test_request(self):\n            pook.get('server.com/foo').reply(204)\n            res = requests.get('http://server.com/foo')\n            self.assertequal(res.status_code, 204)\n\n        def test_request_with_context_manager(self):\n            with pook.use():\n                pook.get('server.com/bar', reply=204)\n                res = requests.get('http://server.com/bar')\n                self.assertequal(res.status_code, 204)\n\n\nusing the context manager for isolated http traffic interception blocks:\n\n.. code:: python\n\n    import pook\n    import requests\n\n    # enable http traffic interceptor\n    with pook.use():\n        pook.get('http://httpbin.org/status/500', reply=204)\n\n        res = requests.get('http://httpbin.org/status/500')\n        print('#1 status:', res.status_code)\n\n    # interception-free http traffic\n    res = requests.get('http://httpbin.org/status/200')\n    print('#2 status:', res.status_code)\n\nexample using `mocket`_ python library as underlying mock engine:\n\n.. code:: python\n\n    import pook\n    import requests\n    from mocket.plugins.pook_mock_engine import mocketengine\n\n    # use mocket library as underlying mock engine\n    pook.set_mock_engine(mocketengine)\n\n    # explicitly enable pook http mocking (optional)\n    pook.on()\n\n    # target server url to mock out\n    url = 'http://twitter.com/api/1/foobar'\n\n    # define your mock\n    mock = pook.get(url,\n                    reply=404, times=2,\n                    headers={'content-type': 'application/json'},\n                    response_json={'error': 'foo'})\n\n    # run first http request\n    requests.get(url)\n    assert mock.calls == 1\n\n    # run second http request\n    res = requests.get(url)\n    assert mock.calls == 2\n\n    # assert response data\n    assert res.status_code == 404\n    assert res.json() == {'error': 'foo'}\n\n    # explicitly disable pook (optional)\n    pook.off()\n\n\nexample using hy language (lisp dialect for python):\n\n.. code:: hy\n\n    (import [pook])\n    (import [requests])\n\n    (defn request [url &optional [status 404]]\n      (doto (.mock pook url) (.reply status))\n      (let [res (.get requests url)]\n        (. res status_code)))\n\n    (defn run []\n      (with [(.use pook)]\n        (print \"status:\" (request \"http://server.com/foo\" :status 204))))\n\n    ;; run test program\n    (defmain [&args] (run))\n\n\ndevelopment\n-----------\n\nclone the repository:\n\n.. code:: bash\n\n    git clone git@github.com:h2non/pook.git\n\n\nuse [`hatch`](https://hatch.pypa.io/) to configure the environment by running the test suite:\n\n.. code:: bash\n\n    hatch run test\n\n\ninstall the pre-commit hook:\n\n.. code:: bash\n\n    hatch run lint:install\n\n\nlint the code:\n\n.. code:: bash\n\n    hatch run lint:run\n\n\nrun tests on all supported python versions and implementations (this requires your host operating system to have each implementation available):\n\n.. code:: bash\n\n    hatch run test:test\n\n\nto run tests only for a specific version, affix the version designation to the environment name (the left side of the `:`):\n\n.. code:: bash\n\n    hatch run test.pypy3.10:test\n\n\ngenerate documentation:\n\n.. code:: bash\n\n    hatch run docs:build\n\n\nlicense\n-------\n\nmit - tomas aparicio\n\n.. _go: https://golang.org\n.. _python: http://python.org\n.. _gock: https://github.com/h2non/gock\n.. _annotated api reference: http://pook.readthedocs.io/en/latest/api.html\n.. _examples: http://pook.readthedocs.io/en/latest/examples.html\n.. _aiohttp: https://github.com/keepsafe/aiohttp\n.. _requests: http://docs.python-requests.org/en/master/\n.. _urllib3: https://github.com/shazow/urllib3\n.. _urllib: https://docs.python.org/3/library/urllib.html\n.. _http.client: https://docs.python.org/3/library/http.client.html\n.. _documentation: http://pook.readthedocs.io/en/latest/\n.. _faq: http://pook.readthedocs.io/en/latest/faq.html\n.. _how it works: http://pook.readthedocs.io/en/latest/how_it_works.html\n.. _mocket: https://github.com/mindflayer/python-mocket\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pook.svg?maxage=2592000?style=flat-square\n   :target: https://pypi.python.org/pypi/pook\n.. |coverage status| image:: https://coveralls.io/repos/github/h2non/pook/badge.svg?branch=master\n   :target: https://coveralls.io/github/h2non/pook?branch=master\n.. |documentation status| image:: https://img.shields.io/badge/docs-latest-green.svg?style=flat\n   :target: http://pook.readthedocs.io/en/latest/?badge=latest\n.. |quality| image:: https://codeclimate.com/github/h2non/pook/badges/gpa.svg\n   :target: https://codeclimate.com/github/h2non/pook\n   :alt: code climate\n.. |stability| image:: https://img.shields.io/pypi/status/pook.svg\n   :target: https://pypi.python.org/pypi/pook\n   :alt: stability\n.. |versions| image:: https://img.shields.io/pypi/pyversions/pook.svg\n   :target: https://pypi.python.org/pypi/pook\n   :alt: python versions\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pook",
  "package_url": "https://pypi.org/project/pook/",
  "project_url": "https://pypi.org/project/pook/",
  "project_urls": {
    "Homepage": "https://github.com/h2non/pook"
  },
  "release_url": "https://pypi.org/project/pook/1.3.0/",
  "requires_dist": [
    "furl>=0.5.6",
    "jsonschema>=2.5.1",
    "xmltodict>=0.11.0"
  ],
  "requires_python": "",
  "summary": "http traffic mocking and expectations made easy",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "tomas@aparicio.me"
  ],
  "kwds": "pook_mock_engine api test_my_api pook test_request",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pook",
  "homepage": "",
  "release_count": 36,
  "dependency_ids": [
    "pypi_furl",
    "pypi_jsonschema",
    "pypi_xmltodict"
  ]
}
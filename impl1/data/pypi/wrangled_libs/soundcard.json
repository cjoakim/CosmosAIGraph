{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: multimedia :: sound/audio :: capture/recording",
    "topic :: multimedia :: sound/audio :: players"
  ],
  "description": "soundcard\n=========\n\n|version| |python| |status| |license|\n\n|contributors| |downloads|\n\nsoundcard is a library for playing and recording audio without resorting to a\ncpython extension. instead, it is implemented using the wonderful `cffi\n<http://cffi.readthedocs.io/en/latest/>`__ and the native audio libraries of\nlinux, windows and macos.\n\nsoundcard is cross-platform, and supports linux/pulseaudio, mac/coreaudio, and\nwindows/wasapi. while the programming interface is identical across platforms,\nsound card naming schemes and default block sizes can vary between devices and\nplatforms.\n\nsoundcard is still in development. all major features work on all platforms, but\nthere are a few known issues that still need to be fixed. if you find a bug,\nplease open an issue, and i will try to fix it. or open a pull request, and i\nwill try to include your fix into soundcard.\n\nhowever, please be aware that this is a hobby project of mine that i am\ndeveloping for free, and in my spare time. while i try to be as accomodating as\npossible, i can not guarantee a timely response to issues. publishing open\nsource software on github does not imply an obligation to *fix your problem\nright now*. please be civil.\n\n| soundcard is licensed under the terms of the bsd 3-clause license\n| (c) 2016 bastian bechtold\n\n\n|open-issues| |closed-issues| |open-prs| |closed-prs|\n\n.. |status| image:: https://img.shields.io/pypi/status/soundcard.svg\n.. |contributors| image:: https://img.shields.io/github/contributors/bastibe/soundcard.svg\n.. |version| image:: https://img.shields.io/pypi/v/soundcard.svg\n.. |python| image:: https://img.shields.io/pypi/pyversions/soundcard.svg\n.. |license| image:: https://img.shields.io/github/license/bastibe/soundcard.svg\n.. |downloads| image:: https://img.shields.io/pypi/dm/soundcard.svg\n.. |open-issues| image:: https://img.shields.io/github/issues/bastibe/soundcard.svg\n.. |closed-issues| image:: https://img.shields.io/github/issues-closed/bastibe/soundcard.svg\n.. |open-prs| image:: https://img.shields.io/github/issues-pr/bastibe/soundcard.svg\n.. |closed-prs| image:: https://img.shields.io/github/issues-pr-closed/bastibe/soundcard.svg\n\ntutorial\n--------\n\nhere is how you get to your speakers and microphones:\n\n.. code:: python\n\n    import soundcard as sc\n\n    # get a list of all speakers:\n    speakers = sc.all_speakers()\n    # get the current default speaker on your system:\n    default_speaker = sc.default_speaker()\n    # get a list of all microphones:\n    mics = sc.all_microphones()\n    # get the current default microphone on your system:\n    default_mic = sc.default_microphone()\n\n    # search for a sound card by substring:\n    >>> sc.get_speaker('scarlett')\n    <speaker focusrite scarlett 2i2 (2 channels)>\n    >>> one_mic = sc.get_microphone('scarlett')\n    <microphone focusrite scalett 2i2 (2 channels)>\n    # fuzzy-search to get the same results:\n    one_speaker = sc.get_speaker('fs2i2')\n    one_mic = sc.get_microphone('fs2i2')\n\n\nall of these functions return ``speaker`` and ``microphone`` objects, which can\nbe used for playback and recording. all data passed in and out of these objects\nare *frames \u00d7 channels* numpy arrays.\n\n.. code:: python\n\n    import numpy\n\n    >>> print(default_speaker)\n    <speaker focusrite scarlett 2i2 (2 channels)>\n    >>> print(default_mic)\n    <microphone focusrite scarlett 2i2 (2 channels)>\n\n    # record and play back one second of audio:\n    data = default_mic.record(samplerate=48000, numframes=48000)\n    default_speaker.play(data/numpy.max(data), samplerate=48000)\n\n    # alternatively, get a `recorder` and `player` object\n    # and play or record continuously:\n    with default_mic.recorder(samplerate=48000) as mic, \\\n          default_speaker.player(samplerate=48000) as sp:\n        for _ in range(100):\n            data = mic.record(numframes=1024)\n            sp.play(data)\n\nlatency\n-------\n\nby default, soundcard records and plays at the operating system's default\nconfiguration. particularly on laptops, this configuration might have extreme\nlatencies, up to multiple seconds.\n\nin order to request lower latencies, pass a ``blocksize`` to ``player`` or\n``recorder``. this tells the operating system your desired latency, and it will\ntry to honor your request as best it can. on windows/wasapi, setting\n``exclusive_mode=true`` might help, too (this is currently experimental).\n\nanother source of latency is in the ``record`` function, which buffers output up\nto the requested ``numframes``. in general, for optimal latency, you should use\na ``numframes`` significantly lower than the ``blocksize`` above, maybe by a\nfactor of two or four.\n\nto get the audio data as quickly as absolutely possible, you can use\n``numframes=none``, which will return whatever audio data is available right\nnow, without any buffering. note that this might receive different numbers of\nframes each time.\n\nwith the above settings, block sizes of 256 samples or ten milliseconds are\nusually no problem. the total latency of playback and recording is dependent on\nhow these buffers are handled by the operating system, though, and might be\nsignificantly higher.\n\nadditionally, it might help to experiment with advice from here: https://askubuntu.com/questions/707171/how-can-i-fix-choppy-audio and edit your /etc/pulse/default.pa file to replace the line saying ::\n\n    load-module module-udev-detect\n\nwith ::\n\n    load-module module-udev-detect tsched=0\n\nand then do not forget to restart pulseaudio with ::\n\n    pulseaudio -k\n\n\nchannel maps\n------------\n\nsome professional sound cards have large numbers of channels. if you want to\nrecord or play only a subset of those channels, you can specify a channel map.\nfor playback, a channel map of ``[0, 3, 4]`` will play three-channel audio data\non the physical channels one, four, and five. for recording, a channel map of\n``[0, 3, 4]`` will return three-channel audio data recorded from the physical\nchannels one, four, and five.\n\nin addition, pulseaudio/linux defines channel ``-1`` as the mono mix of all\nchannels for both playback and recording. coreaudio/macos defines channel ``-1``\nas silence for both playback and recording.\n\nfaq\n---\nq: how to make it work on a headless raspberry pi?\n\na: pulseaudio is not installed by default on the raspberry pi os lite distribution (https://www.raspberrypi.org/software/operating-systems/). in order to use ``soundcard``, you have to install pulseaudio first, and edit the configuration (with a fix to avoid the main output to be in mono-only). ::\n\n    sudo apt install -y python3-pip python3-numpy pulseaudio\n    sudo nano /usr/share/pulseaudio/alsa-mixer/profile-sets/default.conf\n    # comment the block [mapping analog-mono] with ';'\n    pulseaudio -d\n    python3 -m pip install soundcard\n\n\nknown issues:\n-------------\n\n* windows/wasapi currently records garbage if you record only a single channel.\n  the reason for this is yet unknown. multi-channel and channel maps work,\n  though.\n* windows/wasapi silently ignores the blocksize in some cases. apparently, it\n  only supports variable block sizes in exclusive mode.\n* error messages often report some internal cffi/backend errors. this will be\n  improved in the future.\n\nchangelog\n---------\n\n- 2018-04-25 implements fixed block sizes when recording\n  (thank you, pariente manuel!)\n- 2018-05-10 adds a test suite and various fixes for windows\n- 2018-05-11 various fixes for macos\n- 2018-06-27 adds latency property to linux/pulseaudio\n  (thank you, pariente manuel!)\n- 2018-07-17 adds loopback support for windows\n  (thank you, jan leskovec!)\n- 2018-10-16 adds bug fix for ipython on windows\n  (thank you, sebastian michel!)\n- 2018-11-28 adds sphinx/readthedocs documentation\n- 2019-03-25 adds support for python 3.5\n  (thank you, daniel r. kumor!)\n- 2019-04-29 adds experimental support for exclusive mode on windows\n- 2019-05-13 fixes sample rate conversion on macos\n- 2019-05-15 fixes silence recording on macos\n- 2019-06-11 fixes exception when monitoring default device on linux\n  (thank you, inti pelupessy!)\n- 2019-06-18 fixes crash when opening many streams on linux\n- 2019-08-23 fixes attribute error when accessing stream state on linux\n  (thank you, dav\u00ed\u00f0 sindri p\u00e9tursson!)\n- 2019-10-08 fixes inconsistent dtypes when recording on linux\n- 2020-01-06 fixes silent recordings on windows\n- 2020-04-28 get and set the pulseaudio program name on linux\n  (thank you, philipp a.!)\n- 2020-05-14 fixes error with unicode soundcard names on windows\n  (thank you, bakezq!)\n- 2020-05-18 adds support for pyinstaller (v4)\n  (thank you, bob thomas!)\n- 2020-05-19 adds compatibility with windows 7\n  (thank you, demberto!)\n- 2021-11-24 adds compatibility with nixos library naming\n  (thank you, shithead!)\n- 2021-12-23 fixes deprecation for python 3.10\n  (thank you, nekyo!)\n- 2022-04-29 fixes deprecation in recent numpy\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause",
  "name": "soundcard",
  "package_url": "https://pypi.org/project/SoundCard/",
  "project_url": "https://pypi.org/project/SoundCard/",
  "project_urls": {
    "Homepage": "https://github.com/bastibe/SoundCard"
  },
  "release_url": "https://pypi.org/project/SoundCard/0.4.2/",
  "requires_dist": [
    "cffi",
    "numpy"
  ],
  "requires_python": ">=3.5",
  "summary": "play and record audio without resorting to cpython extensions",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "bastian_bechtold"
  ],
  "kwds": "soundcard coreaudio audio pulseaudio all_microphones",
  "license_kwds": "bsd 3-clause",
  "libtype": "pypi",
  "id": "pypi_soundcard",
  "homepage": "https://github.com/bastibe/soundcard",
  "release_count": 13,
  "dependency_ids": [
    "pypi_cffi",
    "pypi_numpy"
  ]
}
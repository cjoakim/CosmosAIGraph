{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pydeps\n======\n\n.. image:: https://readthedocs.org/projects/pydeps/badge/?version=latest\n   :target: https://readthedocs.org/projects/pydeps/?badge=latest\n   :alt: documentation status\n\n.. image:: https://github.com/thebjorn/pydeps/actions/workflows/ci-cd.yml/badge.svg\n   :target: https://github.com/thebjorn/pydeps/actions/workflows/ci-cd.yml\n\n.. image:: https://codecov.io/gh/thebjorn/pydeps/branch/master/graph/badge.svg?token=vsywrsfcja\n   :target: https://codecov.io/gh/thebjorn/pydeps\n\n.. image:: https://pepy.tech/badge/pydeps\n   :target: https://pepy.tech/project/pydeps\n   :alt: downloads\n\npython module dependency visualization.\n\nthis package is primarily intended to be used from the command line through the\n``pydeps`` command.\n\n.. contents::\n   :depth: 2\n\n\n**feature requests and bug reports:**\n\nplease report bugs and feature requests on github at\nhttps://github.com/thebjorn/pydeps/issues\n\nhow to install\n--------------\n::\n\n    pip install pydeps\n\nto create graphs with ``pydeps`` you also need to install graphviz_. please follow the\ninstallation instructions provided in the graphviz link (and make\nsure the ``dot`` command is on your path).\n\nusage\n------------------\n::\n\n    usage: pydeps [-h] [--debug] [--config file] [--no-config] [--version] [-l log]\n                  [--find-package] [-v] [-o file] [-t format] [--display program]\n                  [--noshow] [--show-deps] [--show-raw-deps] [--deps-output deps_out]\n                  [--show-dot] [--dot-output dot_out] [--nodot] [--no-output]\n                  [--show-cycles] [--debug-mf int] [--noise-level int]\n                  [--max-bacon int] [--max-module-depth int] [--pylib] [--pylib-all]\n                  [--include-missing] [-x pattern [pattern ...]]\n                  [-xx module [module ...]] [--only module_path [module_path ...]]\n                  [--externals] [--reverse] [--rankdir {tb,bt,lr,rl}] [--cluster]\n                  [--min-cluster-size int] [--max-cluster-size int]\n                  [--keep-target-cluster] [--collapse-target-cluster]\n                  [--rmprefix prefix [prefix ...]] [--start-color int]\n                  fname\n\npositional arguments:\n  fname                 filename\n\noptional arguments:\n  -h, --help                             show this help message and exit\n  --debug                                turn on all the show and verbose options (mainly for debugging pydeps itself)\n  --config file                          specify config file\n  --no-config                            disable processing of config files\n  --version                              print pydeps version\n  -l log, --log log                      set log-level to one of critical, error, warning, info, debug, notset.\n  --find-package                         tries to automatically find the name of the current package.\n  -v, --verbose                          be more verbose (-vv, -vvv for more verbosity)\n  -o file                                write output to 'file'\n  -t format                              output format (svg|png)\n  --display program                      program to use to display the graph (png or svg file depending on the t parameter)\n  --noshow, --no-show                    don't call external program to display graph\n  --show-deps                            show output of dependency analysis\n  --show-raw-deps                        show output of dependency analysis before removing skips\n  --deps-output                          write output of dependency analysis to file (instead of screen)\n  --show-dot                             show output of dot conversion\n  --dot-output                           write dot code to file (instead of screen)\n  --nodot, --no-dot                      skip dot conversion\n  --no-output                            don't create .svg/.png file, implies --no-show (-t/-o will be ignored)\n  --show-cycles                          show only import cycles\n  --debug-mf int                         set the modulefinder.debug flag to this value\n  --noise-level int                      exclude sources or sinks with degree greater than noise-level\n  --max-bacon int                        exclude nodes that are more than n hops away (default=2, 0 -> infinite)\n  --max-module-depth int                 coalesce deep modules to at most n levels\n  --pylib                                include python std lib modules\n  --pylib-all                            include python all std lib modules (incl. c modules)\n  --include-missing                      include modules that are not installed (or can't be found on sys.path)\n  --only module_path                     only include modules that start with module_path, multiple paths can be provided\n  --externals                            create list of direct external dependencies\n  --reverse                              draw arrows to (instead of from) imported modules\n  --rankdir                              set the direction of the graph, legal values are tb (default, imported modules above importing modules), bt (opposite direction of tb), lr (left-to-right) and rl (right-to-left)\n  --cluster                              draw external dependencies as separate clusters\n  --min-cluster-size int                 the minimum number of nodes a dependency must have before being clustered (default=0)\n  --max-cluster-size int                 the maximum number of nodes a dependency can have before the cluster is collapsed to a single node (default=0)\n  --keep-target-cluster                  draw target module as a cluster\n  --collapse-target-cluster              collapse target module (this implies --cluster)\n  --rmprefix prefix                      remove prefix from the displayed name of the nodes (multiple prefixes can be provided)\n  -x pattern, --exclude pattern          input files to skip (e.g. `foo.*`), multiple patterns can be provided\n  --exclude-exact module                 (shorthand -xx module) same as --exclude, except requires the full match. `-xx foo.bar` will exclude foo.bar, but not foo.bar.blob\n\n**note:** if an option with a variable number of arguments (like ``-x``) is provided\nbefore ``fname``, separate the arguments from the filename with ``--`` otherwise ``fname``\nwill be parsed as an argument of the option. example: ``$ pydeps -x os sys -- pydeps``.\n\nyou can of course also import ``pydeps`` from python and use it as a library, look in\n``tests/test_relative_imports.py`` for examples.\n\nexample\n-------\n\nthis is the result of running ``pydeps`` on itself (``pydeps pydeps``):\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps.svg?sanitize=true\n\n(full disclosure: this is for an early version of pydeps)\n\nnotes\n-----------\n\npydeps finds imports by looking for import-opcodes in\npython bytecodes (think `.pyc` files). therefore, only imported files\nwill be found (ie. pydeps will not look at files in your directory that\nare not imported). additionally, only files that can be found using\nthe python import machinery will be considered (ie. if a module is\nmissing or not installed, it will not be included regardless if it is\nbeing imported). this can be modified by using the ``--include-missing``\nflag.\n\n**displaying the graph:**\n\nto display the resulting ``.svg`` or ``.png`` files, ``pydeps`` by default\ncalls an appropriate opener for the platform, like ``xdg-open foo.svg``.\n\nthis can be overridden with the ``--display program`` option, where ``program`` is an\nexecutable that can display the image file of the graph.\n\nyou can also export the name of such a viewer in either the ``pydeps_display``\nor ``browser`` environment variable, which changes the default behaviour\nwhen ``--display`` is not used.\n\nconfiguration files\n-------------------\n\nall options can also be set in a ``.pydeps`` file using ``.ini`` file\nsyntax (parsable by ``configparser``). command line options override\noptions in the ``.pydeps`` file in the current directory, which again\noverrides options in the user's home directory\n(``%userprofile%\\.pydeps`` on windows and ``${home}/.pydeps``\notherwise).\n\nan example .pydeps file::\n\n    [pydeps]\n    max_bacon = 2\n    no_show = true\n    verbose = 0\n    pylib = false\n    exclude =\n        os\n        re\n        sys\n        collections\n        __future__\n\npydeps will also look for configuration data in ``pyproject.toml`` (under\n``[tool.pydeps]``) and ``setup.cfg`` (under ``[pydeps]``).\n\nbacon (scoring)\n---------------\n\n``pydeps`` also contains an erd\u0151s-like scoring function (a.k.a. bacon\nnumber, from six degrees of kevin bacon\n(http://en.wikipedia.org/wiki/six_degrees_of_kevin_bacon) that lets\nyou filter out modules that are more than a given number of 'hops'\naway from the module you're interested in.  this is useful for finding\nthe interface a module has to the rest of the world.\n\nto find pydeps' interface to the python stdlib (less some very common\nmodules).\n\n::\n\n    shell> pydeps pydeps --show --max-bacon 2 --pylib -x os re types _* enum\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-pylib.svg?sanitize=true\n\n``--max-bacon 2`` (the default) gives the modules that are at most 2\nhops away, and modules that belong together have similar colors.\ncompare that to the output with the ``--max-bacon=0`` (infinite)\nfilter:\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-pylib-all.svg?sanitize=true\n   :width: 40%\n\nimport cycles\n-------------\n\n``pydeps`` can detect and display cycles with the ``--show-cycles``\nparameter.  this will _only_ display the cycles, and for big libraries\nit is not a particularly fast operation.  given a folder with the\nfollowing contents (this uses yaml to define a directory structure,\nlike in the tests)::\n\n        relimp:\n            - __init__.py\n            - a.py: |\n                from . import b\n            - b.py: |\n                from . import a\n\n``pydeps relimp --show-cycles`` displays:\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-cycle.svg?sanitize=true\n\n\n.. _clustering:\n\nclustering\n----------\n\nrunning `pydeps pydeps --max-bacon=4` on version 1.8.0 of pydeps gives the following graph:\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4.svg?sanitize=true\n\nif you are not interested in the internal structure of external modules, you can add the ``--cluster`` flag, which\nwill collapse external modules into folder-shaped objects::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster.svg?sanitize=true\n\nto see the internal structure _and_ delineate external modules, use the ``--max-cluster-size`` flag, which controls\nhow many nodes can be in a cluster before it is collapsed to a folder icon::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=1000\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max1000.svg?sanitize=true\n\nor, using a smaller max-cluster-size::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3.svg?sanitize=true\n\nto remove clusters with too few nodes, use the ``--min-cluster-size`` flag::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3-min2.svg?sanitize=true\n\nin some situations it can be useful to draw the target module as a cluster::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2 --keep-target-cluster\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3-min2-keep-target.svg?sanitize=true\n\n..and since the cluster boxes include the module name, we can remove those prefixes::\n\n    shell> pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2 --keep-target-cluster --rmprefix pydeps. stdlib_list.\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rmprefix.svg?sanitize=true\n\n.. _maximum_module_depth:\n\nmaximum module depth\n--------------------\n\nfor python packages that have a module structure more than two levels deep, the graph can easily become overwhelmingly complex.\nuse the ``--max-module-depth=n`` flag to examine the internal dependencies of a package while limiting the module depth\n(private and testing-related modules are removed to further simplify the graph using ``-x ...``)::\n\n    shell> pydeps pandas --only pandas --max-module-depth=2 -x pandas._* pandas.test* pandas.conftest\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pandas-max-module-depth.svg?sanitize=true\n\ngraph direction\n---------------\n\nthe direction of the graph can be specified using the ``--rankdir`` flag.\n\ntop to bottom (default)::\n\n    shell> pydeps pydeps --rankdir tb\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-tb.svg?sanitize=true\n\nbottom to top::\n\n    shell> pydeps pydeps --rankdir bt\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-bt.svg?sanitize=true\n\nleft to right::\n\n    shell> pydeps pydeps --rankdir lr\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-lr.svg?sanitize=true\n\nright to left::\n\n    shell> pydeps pydeps --rankdir rl\n\n.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-rl.svg?sanitize=true\n\ncollapsing target package\n-------------------------\n\nwhen internal target package dependencies are unimportant, they can be collapsed using the ``--collapse-target-cluster`` flag. this option also implies ``--cluster``::\n\n    shell> pydeps pydeps --collapse-target-cluster\n\n.. image:: https://raw.githubusercontent.com/mlga/pydeps/collapse-target/docs/_static/pydeps-collapse-target-cluster.svg?sanitize=true\n\nintermediate format\n-------------------\n\nan attempt has been made to keep the intermediate formats readable,\neg. the output from ``pydeps --show-deps ..`` looks like this::\n\n    ...\n    \"pydeps.mf27\": {\n        \"imported_by\": [\n            \"__main__\",\n            \"pydeps.py2depgraph\"\n        ],\n        \"kind\": \"imp.py_source\",\n        \"name\": \"pydeps.mf27\",\n        \"path\": \"pydeps\\\\mf27.py\"\n    },\n    \"pydeps.py2depgraph\": {\n        \"imported_by\": [\n            \"__main__\",\n            \"pydeps.pydeps\"\n        ],\n        \"imports\": [\n            \"pydeps.depgraph\",\n            \"pydeps.mf27\"\n        ],\n        \"kind\": \"imp.py_source\",\n        \"name\": \"pydeps.py2depgraph\",\n        \"path\": \"pydeps\\\\py2depgraph.py\"\n    }, ...\n\nversion history\n---------------\n\n**version 1.12.13** better docs for larger packages.\nsee maximum_module_depth_ for an example.\nthanks to sheromon_ for the pr.\n\n**version 1.12.5** pydeps can now read configuration data from ``pyproject.toml``.\nthanks to septatrix_ for pushing the idea and for countering my toml-rant with\nan informative argument.\n\n**version 1.11.0** drop support for python 3.6.\nthanks to pawamoy_ for removing imports of the deprecated ``imp`` module.\n(parts of it has been vendorized due to a python bug, see the code for details.)\n\n**version 1.10.1** thanks to vector400_ for a new option ``--rankdir`` which\nrenders the graph in different directions.\n\n**version 1.10.0** supports python 3.10.\n\n**version 1.9.15** thanks to `pipeline foundation`_ for a very much improved ci\npipeline, and a cd pipeline as well.\n\n**version 1.9.14** thanks to poneill_ for fixing a cryptic error message when\nrun in a directory without an ``__init__.py`` file.\n\n**version 1.9.13** thanks to glumia_ and simonbiggs_ for improving the documentation.\n\n**version 1.9.10** ``no_show`` is now honored when placed in ``.pydeps`` file.\nthanks to romain-dartigues_ for the pr.\n\n**version 1.9.8** fix for ``maximum recursion depth exceeded`` when using large\nframeworks (like ``sympy``).  thanks to tanujkhattar_ for finding the fix and to\nbalopat_ for reporting it.\n\n**version 1.9.7** check ``pydeps_display`` and ``browser`` for a program to open\nthe graph, pr by jhermann_\n\n..\n    **version 1.9.4** pydeps is now available as a pre-commit.com hook thanks to\n    a pr by ewen-lbh_\n\n**version 1.9.1** graphs are now stable on python 3.x as well -\nthis was already the case for py2.7 (thanks to pawamoy_ for reporting\nand testing the issue and to kinow_ for helping with testing).\n\n**version 1.9.0** supports python 3.8.\n\n**version 1.8.7** includes a new flag ``--rmprefix`` which lets you remove\nprefixes from the node-labels in the graph. the _name_ of the nodes are not effected\nso this does not cause merging of nodes, nor does it change coloring - but it\ncan lead to multiple nodes with the same label (hovering over the node will\ngive the full name). thanks to  aroberge_ for the enhancement request.\n\n**version 1.8.5** with svg as the output format (which is the default),\npaths are now hilighted on mouse hover (thanks to tomasito665_ for the\nenhancement request).\n\n**version 1.8.2** incldes a new flag ``--only`` that causes pydeps to\nonly report on the paths specified::\n\n    shell> pydeps mypackage --only mypackage.a mypackage.b\n\n**version 1.8.0** includes 4 new flags for drawing external dependencies as\nclusters. see clustering_ for examples.\nadditionally, the arrowheads now have the color of the source node.\n\n**version 1.7.3** includes a new flag ``-xx`` or ``--exclude-exact`` which\nmatches the functionality of the ``--exclude`` flag, except it requires an\nexact match, i.e. ``-xx foo.bar`` will exclude foo.bar, but not\n``foo.bar.blob`` (thanks to avenzaoleg_ for the pr).\n\n**version 1.7.2** includes a new flag, ``--no-output``, which prevents\ncreation of the .svg/.png file.\n\n**version 1.7.1** fixes excludes in .pydeps files (thanks to eqvis_\nfor the bug report).\n\n**version 1.7.0** the new ``--reverse`` flag reverses the direction\nof the arrows in the dependency graph, so they point _to_ the imported\nmodule instead of _from_ the imported module (thanks to goetzk_ for\nthe bug report and tobiasmaier_ for the pr!).\n\n**version 1.5.0** python 3 support (thanks to eight04_ for the pr).\n\n**version 1.3.4** ``--externals`` will now include modules that\nhaven't been installed (what ``modulefinder`` calls ``badmodules``).\n\n**version 1.2.8** a shortcut for finding the direct external dependencies\nof a package was added::\n\n    pydeps --externals mypackage\n\nwhich will print a json formatted list of module names to the screen, e.g.::\n\n    (dev) go|c:\\srv\\lib\\dk-tasklib> pydeps --externals dktasklib\n    [\n        \"dkfileutils\"\n    ]\n\nwhich means that the ``dktasklib`` package only depends on the ``dkfileutils``\npackage.\n\nthis functionality is also available programmatically::\n\n    import os\n    from pydeps.pydeps import externals\n    # the directory that contains setup.py (one level up from actual package):\n    os.chdir('package-directory')\n    print externals('mypackage')\n\n**version 1.2.5:** the defaults are now sensible, such that::\n\n    shell> pydeps mypackage\n\nwill likely do what you want. it is the same as\n``pydeps --show --max-bacon=2 mypackage`` which means display the\ndependency graph in your browser, but limit it to two hops (which\nincludes only the modules that your module imports -- not continuing\ndown the import chain).  the old default behavior is available with\n``pydeps --noshow --max-bacon=0 mypackage``.\n\ncontributing\n------------\n#. fork it\n#. it is appreciated (but not required) if you raise an issue first: https://github.com/thebjorn/pydeps/issues\n#. create your feature branch (`git checkout -b my-new-feature`)\n#. commit your changes (`git commit -am 'add some feature'`)\n#. push to the branch (`git push origin my-new-feature`)\n#. create new pull request\n\n.. _graphviz: http://www.graphviz.org/download/\n.. _avenzaoleg: https://github.com/avenzaoleg\n.. _eqvis: https://github.com/eqvis\n.. _goetzk: https://github.com/goetzk\n.. _tobiasmaier: https://github.com/tobiasmaier\n.. _eight04: https://github.com/eight04\n.. _tomasito665: https://github.com/tomasito665\n.. _aroberge: https://github.com/aroberge\n.. _pawamoy: https://github.com/pawamoy\n.. _kinow: https://github.com/kinow\n.. _ewen-lbh: https://github.com/ewen-lbh\n.. _jhermann: https://github.com/jhermann\n.. _balopat: https://github.com/balopat\n.. _tanujkhattar: https://github.com/tanujkhattar\n.. _romain-dartigues: https://github.com/romain-dartigues\n.. _glumia: https://github.com/glumia\n.. _simonbiggs: https://github.com/simonbiggs\n.. _poneill: https://github.com/poneill\n.. _pipeline foundation: https://pipeline.foundation\n.. _vector400: https://github.com/vector400\n.. _pawamoy: https://github.com/pawamoy\n.. _septatrix: https://github.com/septatrix\n.. _sheromon: https://github.com/sheromon\n",
  "docs_url": "https://pythonhosted.org/pydeps/",
  "keywords": "python module dependency graphs",
  "license": "bsd",
  "name": "pydeps",
  "package_url": "https://pypi.org/project/pydeps/",
  "project_url": "https://pypi.org/project/pydeps/",
  "project_urls": {
    "Homepage": "https://github.com/thebjorn/pydeps"
  },
  "release_url": "https://pypi.org/project/pydeps/1.12.17/",
  "requires_dist": [
    "stdlib-list",
    "enum34 ; python_version < \"3.4\""
  ],
  "requires_python": "",
  "summary": "display module dependencies",
  "version": "1.12.17",
  "releases": [],
  "developers": [
    "bjorn",
    "bp@datakortet.no"
  ],
  "kwds": "pydeps pydeps_display py2depgraph py_source badge",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pydeps",
  "homepage": "https://github.com/thebjorn/pydeps",
  "release_count": 110,
  "dependency_ids": [
    "pypi_enum34",
    "pypi_stdlib_list"
  ]
}
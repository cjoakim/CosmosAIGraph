{
  "classifiers": [],
  "description": "# importer from openqasm 3 to qiskit\n\n[![license](https://img.shields.io/github/license/qiskit/qiskit-qasm3-import.svg?style=flat)](https://opensource.org/licenses/apache-2.0)[![release](https://img.shields.io/github/release/qiskit/qiskit-qasm3-import.svg?style=flat)](https://github.com/qiskit/qiskit-qasm3-import/releases)[![downloads](https://img.shields.io/pypi/dm/qiskit-qasm3-import.svg?style=flat)](https://pypi.org/project/qiskit-qasm3-import/)\n\nthis repository provides the python package `qiskit_qasm3_import`, which is a\nbasic and temporary importer from openqasm 3 into qiskit's `quantumcircuit`.\n\nqiskit itself accepts this package as an optional dependency if it is installed.\nin that case, qiskit exposes the functions `qiskit.qasm3.load` and\n`qiskit.qasm3.loads`, which are wrappers around `qiskit_qasm3_import.parse`.\nthis project is a stop-gap measure until various technical decisions can be\nresolved the correct way; terra makes strong guarantees of stability and support\nin its interfaces, and we are not yet ready to make that commitment for this\nproject, hence the minimal wrappers.\n\n\n## example\n\nthe principal entry point to the package is the top-level `parse` function,\nwhich accepts a string containing a complete openqasm 3 programme.  this complex\nexample shows a lot of the capabilities of the importer.\n\n```qasm\nopenqasm 3.0;\n// the 'stdgates.inc' include is supported, and the gates are only available\n// if it has correctly been included.\ninclude \"stdgates.inc\";\n\n// parametrised inputs are supported.\ninput float[64] a;\n\nqubit[3] q;\nbit[2] mid;\nbit[3] out;\n\n// aliasing and re-aliasing are supported.\nlet aliased = q[0:1];\n\n// parametrised gates that make use of the stdlib.\ngate my_gate(a) c, t {\n  gphase(a / 2);\n  ry(a) c;\n  cx c, t;\n}\n\n// gate modifiers work as well; this gate is equivalent to `p(-a) c;`.\ngate my_phase(a) c {\n  ctrl @ inv @ gphase(a) c;\n}\n\n// we handle mathematical expressions on gate creation and complex indexing\n// of temporary collections.\nmy_gate(a * 2) aliased[0], q[{1, 2}][0];\nmeasure q[0] -> mid[0];\nmeasure q[1] -> mid[1];\n\nwhile (mid == \"00\") {\n  reset q[0];\n  reset q[1];\n  my_gate(a) q[0], q[1];\n  // we support the builtin mathematical symbols.\n  my_phase(a - pi/2) q[1];\n  mid[0] = measure q[0];\n  mid[1] = measure q[1];\n}\n\n// the condition resolver can also handle simple cases that don't look\n// _exactly_ like equality conditions.\nif (mid[0]) {\n  // there is limited support for aliasing within nested scopes.\n  let inner_alias = q[{0, 1}];\n  reset inner_alias;\n}\n\nout = measure q;\n```\n\nassuming this program is stored as a string in a variable `program`, we then\nimport it into a `quantumcircuit` by doing:\n\n```python\nfrom qiskit_qasm3_import import parse\ncircuit = parse(program)\n```\n\n`circuit` is now a complete `quantumcircuit`, so we can see exactly what it\nturned into:\n\n```python\ncircuit.draw()\n```\n```text\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2510\n  q_0: \u25240              \u251c\u2524m\u251c\u2500\u2500\u2500\u25240            \u251c\u25240         \u251c\u2524m\u251c\u2500\u2500\u2500\n       \u2502  my_gate(2*a) \u2502\u2514\u2565\u2518\u250c\u2500\u2510\u2502             \u2502\u2502          \u2502\u2514\u2565\u2518\u250c\u2500\u2510\n  q_1: \u25241              \u251c\u2500\u256b\u2500\u2524m\u251c\u25241            \u251c\u25241         \u251c\u2500\u256b\u2500\u2524m\u251c\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518\u2502             \u2502\u2502  if_else \u2502 \u2551 \u2514\u2565\u2518\n  q_2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524m\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u256b\u2500\u2524  while_loop \u251c\u2524          \u251c\u2500\u256b\u2500\u2500\u256b\u2500\n              \u2514\u2565\u2518        \u2551  \u2551 \u2502             \u2502\u2502          \u2502 \u2551  \u2551\nmid_0: \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u256c\u2550\u25611            \u255e\u25610         \u255e\u2550\u256c\u2550\u2550\u256c\u2550\n               \u2551            \u2551 \u2502             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2551  \u2551\nmid_1: \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u25610            \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u256c\u2550\n               \u2551              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2551  \u2551\nout_0: \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u256c\u2550\n               \u2551                                             \u2551\nout_1: \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\n               \u2551\nout_2: \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n```\n\n\n## installation\n\ninstall the latest release of the `qiskit_qasm3_import` package from pip:\n\n```text\npip install qiskit_qasm3_import\n```\n\nthis will automatically install all the dependencies as well (an openqasm 3\nparser, for example) if they are not already installed.  alternatively, you can\ninstall qiskit terra directly with this package as an optional dependency by\ndoing\n\n```text\npip install qiskit-terra[qasm3-import]\n```\n\n\n## developing\n\nif you're looking to contribute to this project, please first read\n[our contributing guidelines](contributing.md).\n\nset up your development environment by installing the development requirements\nwith pip:\n\n```bash\npip install -r requirements-dev.txt tox\n```\n\nthis installs a few more packages than the dependencies of the package at\nruntime, because there are some tools we use for testing also included, such as\n`tox` and `pytest`.\n\nafter the development requirements are installed, you can install an editable\nversion of the package with\n\n```bash\npip install -e .\n```\n\nafter this, any changes you make to the library code will immediately be present\nwhen you open a new python interpreter session.\n\n\n### building documentation\n\nafter the development requirements have been installed, the command\n\n```bash\ntox -e docs\n```\n\nwill build the html documentation, and place it in `docs/_build/html`.  the\ndocumentation state of the `main` branch of this repository is published to\nhttps://qiskit.github.io/qiskit-qasm3-import.\n\n\n### code style and linting\n\nthe python components of this repository are formatted using `black`.  you can\nrun this on the required files by running\n\n```bash\ntox -e black\n```\n\nthe full lint suite can be run with\n\n```bash\ntox -e lint\n```\n\n\n## license\n\nthis project is licensed under [version 2.0 of the apache license](license).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0 license",
  "name": "qiskit-qasm3-import",
  "package_url": "https://pypi.org/project/qiskit-qasm3-import/",
  "project_url": "https://pypi.org/project/qiskit-qasm3-import/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Qiskit/qiskit-qasm3-import/issues",
    "Documentation": "https://qiskit.github.io/qiskit-qasm3-import",
    "Homepage": "https://github.com/Qiskit/qiskit-qasm3-import",
    "Source Code": "https://github.com/Qiskit/qiskit-qasm3-import"
  },
  "release_url": "https://pypi.org/project/qiskit-qasm3-import/0.4.1/",
  "requires_dist": [
    "qiskit >=0.37.0",
    "openqasm3[parser] <0.6,>=0.4"
  ],
  "requires_python": "",
  "summary": "importer for parsing openqasm 3 strings into qiskit circuits",
  "version": "0.4.1",
  "releases": [],
  "developers": [
    "jake_lishman"
  ],
  "kwds": "qiskit_qasm3_import qasm3 qiskit openqasm qasm",
  "license_kwds": "apache 2.0 license",
  "libtype": "pypi",
  "id": "pypi_qiskit_qasm3_import",
  "homepage": "https://github.com/qiskit/qiskit-qasm3-import",
  "release_count": 6,
  "dependency_ids": [
    "pypi_openqasm3",
    "pypi_qiskit"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing"
  ],
  "description": "pytest-only\n===========\n\nonly run tests marked with ``@pytest.mark.only``. if none are marked, all tests run as usual.\n\nborrowed from `mocha <https://mochajs.org/>`_.\n\n\ninstallation\n------------\n\n.. code-block:: bash\n\n    pip install pytest-only\n\n\nusage\n-----\n\nuse it on functions\n\n.. code-block:: python\n\n    import pytest\n\n    def test_that_will_not_run():\n        assert 0\n\n    @pytest.mark.only\n    def test_that_will_run():\n        assert 1\n\n\n.. code-block:: bash\n\n    $ py.test -v test_example.py\n\n    ============================= test session starts ==============================\n    platform linux -- python 3.6.1, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /tmp/example/bin/python3.6\n    cachedir: .cache\n    rootdir: /tmp/example, inifile:\n    plugins: only-1.0.0\n    collected 2 items\n\n    test_example.py::test_that_will_run passed\n\n    =========================== 1 passed in 0.00 seconds ===========================\n\n\nor use it on classes\n\n.. code-block:: python\n\n    import pytest\n\n    class testthatwillnotrun:\n        def test_that_will_not_run(self):\n            assert 0\n\n\n    @pytest.mark.only\n    class testthatwillrun:\n        def test_that_will_run(self):\n            assert 1\n\n\n.. code-block:: bash\n\n    $ py.test -v test_example.py\n\n    ============================= test session starts ==============================\n    platform linux -- python 3.6.1, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /tmp/example/bin/python3.6\n    cachedir: .cache\n    rootdir: /tmp/example, inifile:\n    plugins: only-1.0.0\n    collected 2 items\n\n    test_example.py::testthatwillrun::test_that_will_run passed\n\n    =========================== 1 passed in 0.00 seconds ===========================\n\n\nor use it on modules\n\n.. code-block:: python\n\n    # test_example.py\n    import pytest\n\n    pytestmark = pytest.mark.only\n\n    def test_that_will_run():\n        assert 1\n\n\n.. code-block:: python\n\n    # test_example2.py\n    def test_that_will_not_run():\n        assert 0\n\n\n.. code-block:: bash\n\n    $ py.test -v test_example.py test_example2.py\n\n    ============================= test session starts ==============================\n    platform linux -- python 3.6.1, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/they4kman/.virtualenvs/tmp-53d5944c7c78d28/bin/python3.6\n    cachedir: .cache\n    rootdir: /home/they4kman/.virtualenvs/tmp-53d5944c7c78d28, inifile:\n    plugins: only-1.0.0\n    collected 2 items\n\n    test_example.py::test_that_will_run passed\n\n    =========================== 1 passed in 0.00 seconds ===========================\n\n\n\ndisable for single test run\n---------------------------\n\nto run all the tests, regardless of whether ``@pytest.mark.only`` is used, pass\nthe ``--no-only`` flag to pytest:\n\n.. code-block:: bash\n\n    $ py.test --no-only\n\n\nif ``--no-only`` has already been passed (perhaps by way of ``addopts`` in\n*pytest.ini*), use the ``--only`` flag to re-enable it:\n\n.. code-block:: bash\n\n    $ py.test --no-only --only\n\n\npylint checker\n--------------\n\nif you use pylint, you can avoid committing stray `only` marks with the bundled plugin. just enable the pylint checker in your plugins and enable the `unexpected-focused` rule.\n\n.. code-block:: ini\n\n    [master]\n    load-plugins=pytest_only.ext.pylint\n\n    [messages control]\n    enable=unexpected-focused\n\n.. code-block:: console\n\n    $ cat test_ninja.py\n    import pytest\n\n    @pytest.mark.only\n    def test_ninja():\n        pass\n\n    $ pylint test_ninja.py\n    ************* module mymain\n    test_ninja.py:3:0: w1650: unexpected focused test(s) using pytest.mark.only: def test_ninja (unexpected-focused)\n\n\ndevelopment\n-----------\n\n1. install the test/dev requirements using `poetry <https://python-poetry.org/>`_\n\n    .. code-block:: bash\n\n        poetry install\n\n2. run the tests\n\n    .. code-block:: bash\n\n        py.test\n\n3. run the tests on all currently-supported platforms\n\n    .. code-block:: bash\n\n        tox\n",
  "docs_url": null,
  "keywords": "pytest",
  "license": "mit",
  "name": "pytest-only",
  "package_url": "https://pypi.org/project/pytest-only/",
  "project_url": "https://pypi.org/project/pytest-only/",
  "project_urls": {
    "Homepage": "https://github.com/theY4Kman/pytest-only",
    "Repository": "https://github.com/theY4Kman/pytest-only"
  },
  "release_url": "https://pypi.org/project/pytest-only/2.0.0/",
  "requires_dist": [
    "pytest (<7.1); python_version <= \"3.6\"",
    "pytest (>=7.1); python_version >= \"3.7\" and python_version < \"4.0\""
  ],
  "requires_python": ">=3.6.2,<4",
  "summary": "use @pytest.mark.only to run a single test",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "they4kman@gmail.com",
    "zach_kanzler"
  ],
  "kwds": "test_that_will_not_run test_that_will_run pytest_only test_example test_example2",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_only",
  "homepage": "https://github.com/they4kman/pytest-only",
  "release_count": 7,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
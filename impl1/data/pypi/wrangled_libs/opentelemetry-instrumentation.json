{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "opentelemetry instrumentation\n=============================\n\n|pypi|\n\n.. |pypi| image:: https://badge.fury.io/py/opentelemetry-instrumentation.svg\n   :target: https://pypi.org/project/opentelemetry-instrumentation/\n\ninstallation\n------------\n\n::\n\n    pip install opentelemetry-instrumentation\n\n\nthis package provides a couple of commands that help automatically instruments a program:\n\n.. note::\n    you need to install a distro package to get auto instrumentation working. the ``opentelemetry-distro``\n    package contains the default distro and configurator and automatically configures some of the common options for users.\n    for more info about ``opentelemetry-distro`` check `here <https://opentelemetry-python.readthedocs.io/en/latest/examples/distro/readme.html>`__\n    ::\n\n        pip install opentelemetry-distro[otlp]\n\n    when creating a custom distro and/or configurator, be sure to add entry points for each under `opentelemetry_distro` and `opentelemetry_configurator` respectfully.\n    if you have entry points for multiple distros or configurators present in your environment, you should specify the entry point name of the distro and configurator you want to be used via the `otel_python_distro` and `otel_python_configurator` environment variables.\n\n\nopentelemetry-bootstrap\n-----------------------\n\n::\n\n    opentelemetry-bootstrap --action=install|requirements\n\nthis commands inspects the active python site-packages and figures out which\ninstrumentation packages the user might want to install. by default it prints out\na list of the suggested instrumentation packages which can be added to a requirements.txt\nfile. it also supports installing the suggested packages when run with :code:`--action=install`\nflag.\n\n\nopentelemetry-instrument\n------------------------\n\n::\n\n    opentelemetry-instrument python program.py\n\nthe instrument command will try to automatically detect packages used by your python program\nand when possible, apply automatic tracing instrumentation on them. this means your program\nwill get automatic distributed tracing for free without having to make any code changes\nat all. this will also configure a global tracer and tracing exporter without you having to\nmake any code changes. by default, the instrument command will use the otlp exporter but\nthis can be overridden when needed.\n\nthe command supports the following configuration options as cli arguments and environment vars:\n\n\n* ``--traces_exporter`` or ``otel_traces_exporter``\n* ``--metrics_exporter`` or ``otel_metrics_exporter``\n* ``--distro`` or ``otel_python_distro``\n* ``--configurator`` or ``otel_python_configurator``\n\nused to specify which trace exporter to use. can be set to one or more of the well-known exporter\nnames (see below).\n\n    - defaults to `otlp`.\n    - can be set to `none` to disable automatic tracer initialization.\n\nyou can pass multiple values to configure multiple exporters e.g, ``zipkin,prometheus``\n\nwell known trace exporter names:\n\n    - jaeger_proto\n    - jaeger_thrift\n    - opencensus\n    - zipkin_json\n    - zipkin_proto\n    - otlp\n    - otlp_proto_grpc (`deprecated`)\n    - otlp_proto_http (`deprecated`)\n\nnote: the default transport protocol for ``otlp`` is grpc.\nhttp is currently supported for traces only, and should be set using ``otel_exporter_otlp_traces_protocol=http/protobuf``\n\n* ``--id-generator`` or ``otel_python_id_generator``\n\nused to specify which ids generator to use for the global tracer provider. by default, it\nwill use the random ids generator.\n\nthe code in ``program.py`` needs to use one of the packages for which there is\nan opentelemetry integration. for a list of the available integrations please\ncheck `here <https://opentelemetry-python.readthedocs.io/en/stable/index.html#integrations>`_\n\n* ``otel_python_disabled_instrumentations``\n\nif set by the user, opentelemetry-instrument will read this environment variable to disable specific instrumentations.\ne.g otel_python_disabled_instrumentations = \"requests,django\"\n\n\nexamples\n^^^^^^^^\n\n::\n\n    opentelemetry-instrument --traces_exporter otlp flask run --port=3000\n\nthe above command will pass ``--traces_exporter otlp`` to the instrument command and ``--port=3000`` to ``flask run``.\n\n::\n\n    opentelemetry-instrument --traces_exporter zipkin_json,otlp celery -a tasks worker --loglevel=info\n\nthe above command will configure global trace provider, attach zipkin and otlp exporters to it and then\nstart celery with the rest of the arguments.\n\n::\n\n    opentelemetry-instrument --id_generator random flask run --port=3000\n\nthe above command will configure the global trace provider to use the random ids generator, and then\npass ``--port=3000`` to ``flask run``.\n\nreferences\n----------\n\n* `opentelemetry project <https://opentelemetry.io/>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "opentelemetry-instrumentation",
  "package_url": "https://pypi.org/project/opentelemetry-instrumentation/",
  "project_url": "https://pypi.org/project/opentelemetry-instrumentation/",
  "project_urls": {
    "Homepage": "https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/opentelemetry-instrumentation"
  },
  "release_url": "https://pypi.org/project/opentelemetry-instrumentation/0.43b0/",
  "requires_dist": [
    "opentelemetry-api~=1.4",
    "setuptools>=16.0",
    "wrapt<2.0.0,>=1.0.0"
  ],
  "requires_python": ">=3.7",
  "summary": "instrumentation tools & auto instrumentation for opentelemetry python",
  "version": "0.43b0",
  "releases": [],
  "developers": [
    "cncf-opentelemetry-contributors@lists.cncf.io"
  ],
  "kwds": "opentelemetry_configurator opentelemetry_distro otel_python_disabled_instrumentations opentelemetry instrumentation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_opentelemetry_instrumentation",
  "homepage": "",
  "release_count": 42,
  "dependency_ids": [
    "pypi_opentelemetry_api",
    "pypi_setuptools",
    "pypi_wrapt"
  ]
}
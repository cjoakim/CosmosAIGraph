{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3"
  ],
  "description": "# fastchat\n| [**demo**](https://chat.lmsys.org/) | [**discord**](https://discord.gg/hswakcrnfx) | [**x**](https://x.com/lmsysorg) |\n\nfastchat is an open platform for training, serving, and evaluating large language model based chatbots.\n- fastchat powers chatbot arena (https://chat.lmsys.org/), serving over 5 million chat requests for 30+ llms.\n- arena has collected over 100k human votes from side-by-side llm battles to compile an online [llm elo leaderboard](https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard).\n\nfastchat's core features include:\n- the training and evaluation code for state-of-the-art models (e.g., vicuna, mt-bench).\n- a distributed multi-model serving system with web ui and openai-compatible restful apis.\n\n## news\n- [2023/09] \ud83d\udd25 we released **lmsys-chat-1m**, a large-scale real-world llm conversation dataset. read the [report](https://arxiv.org/abs/2309.11998).\n- [2023/08] we released **vicuna v1.5** based on llama 2 with 4k and 16k context lengths. download [weights](#vicuna-weights).\n- [2023/07] we released **chatbot arena conversations**, a dataset containing 33k conversations with human preferences. download it [here](https://huggingface.co/datasets/lmsys/chatbot_arena_conversations).\n\n<details>\n<summary>more</summary>\n\n- [2023/08] we released **longchat v1.5** based on llama 2 with 32k context lengths. download [weights](#longchat).\n- [2023/06] we introduced **mt-bench**, a challenging multi-turn question set for evaluating chatbots. check out the blog [post](https://lmsys.org/blog/2023-06-22-leaderboard/).\n- [2023/06] we introduced **longchat**, our long-context chatbots and evaluation tools. check out the blog [post](https://lmsys.org/blog/2023-06-29-longchat/).\n- [2023/05] we introduced **chatbot arena** for battles among llms. check out the blog [post](https://lmsys.org/blog/2023-05-03-arena).\n- [2023/03] we released **vicuna: an open-source chatbot impressing gpt-4 with 90% chatgpt quality**. check out the blog [post](https://vicuna.lmsys.org).\n\n</details>\n\n<a href=\"https://chat.lmsys.org\"><img src=\"assets/demo_narrow.gif\" width=\"70%\"></a>\n\n## contents\n- [install](#install)\n- [model weights](#model-weights)\n- [inference with command line interface](#inference-with-command-line-interface)\n- [serving with web gui](#serving-with-web-gui)\n- [api](#api)\n- [evaluation](#evaluation)\n- [fine-tuning](#fine-tuning)\n- [citation](#citation)\n\n## install\n\n### method 1: with pip\n\n```bash\npip3 install \"fschat[model_worker,webui]\"\n```\n\n### method 2: from source\n\n1. clone this repository and navigate to the fastchat folder\n```bash\ngit clone https://github.com/lm-sys/fastchat.git\ncd fastchat\n```\n\nif you are running on mac:\n```bash\nbrew install rust cmake\n```\n\n2. install package\n```bash\npip3 install --upgrade pip  # enable pep 660 support\npip3 install -e \".[model_worker,webui]\"\n```\n\n## model weights\n### vicuna weights\n[vicuna](https://lmsys.org/blog/2023-03-30-vicuna/) is based on llama 2 and should be used under llama's [model license](https://github.com/facebookresearch/llama/blob/main/license).\n\nyou can use the commands below to start chatting. it will automatically download the weights from hugging face repos.\nsee more command options and how to handle out-of-memory in the \"inference with command line interface\" section below.\n\n**note: `transformers>=4.31` is required for 16k versions.**\n\n| size | chat command | hugging face repo |\n| ---  | --- | --- |\n| 7b   | `python3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5`  | [lmsys/vicuna-7b-v1.5](https://huggingface.co/lmsys/vicuna-7b-v1.5)   |\n| 7b-16k   | `python3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5-16k`  | [lmsys/vicuna-7b-v1.5-16k](https://huggingface.co/lmsys/vicuna-7b-v1.5-16k)   |\n| 13b  | `python3 -m fastchat.serve.cli --model-path lmsys/vicuna-13b-v1.5` | [lmsys/vicuna-13b-v1.5](https://huggingface.co/lmsys/vicuna-13b-v1.5) |\n| 13b-16k  | `python3 -m fastchat.serve.cli --model-path lmsys/vicuna-13b-v1.5-16k` | [lmsys/vicuna-13b-v1.5-16k](https://huggingface.co/lmsys/vicuna-13b-v1.5-16k) |\n| 33b  | `python3 -m fastchat.serve.cli --model-path lmsys/vicuna-33b-v1.3` | [lmsys/vicuna-33b-v1.3](https://huggingface.co/lmsys/vicuna-33b-v1.3) |\n\n**old weights**: see [docs/vicuna_weights_version.md](docs/vicuna_weights_version.md) for all versions of weights and their differences.\n\n### longchat\nwe release [longchat](https://lmsys.org/blog/2023-06-29-longchat/) models under llama's [model license](https://github.com/facebookresearch/llama/blob/main/license).\n\n| size | chat command | hugging face repo |\n| ---  | --- | --- |\n| 7b   | `python3 -m fastchat.serve.cli --model-path lmsys/longchat-7b-32k-v1.5`  | [lmsys/longchat-7b-32k](https://huggingface.co/lmsys/longchat-7b-32k-v1.5)   |\n\n### fastchat-t5\nyou can use the commands below to chat with fastchat-t5. it will automatically download the weights from hugging face repos.\n\n| size | chat command | hugging face repo |\n| ---  | --- | --- |\n| 3b   | `python3 -m fastchat.serve.cli --model-path lmsys/fastchat-t5-3b-v1.0`  | [lmsys/fastchat-t5-3b-v1.0](https://huggingface.co/lmsys/fastchat-t5-3b-v1.0) |\n\n## inference with command line interface\n\n<a href=\"https://chat.lmsys.org\"><img src=\"assets/screenshot_cli.png\" width=\"70%\"></a>\n\n(experimental feature: you can specify `--style rich` to enable rich text output and better text streaming quality for some non-ascii content. this may not work properly on certain terminals.)\n\n#### supported models\nfastchat supports a wide range of models, including\nllama 2, vicuna, alpaca, baize, chatglm, dolly, falcon, fastchat-t5, gpt4all, guanaco, mtp, openassistant, openchat, redpajama, stablelm, wizardlm, xdan-ai and more.\n\nsee a complete list of supported models and instructions to add a new model [here](docs/model_support.md).\n\n#### single gpu\nthe command below requires around 14gb of gpu memory for vicuna-7b and 28gb of gpu memory for vicuna-13b.\nsee the [\"not enough memory\" section](#not-enough-memory) below if you do not have enough memory.\n`--model-path` can be a local folder or a hugging face repo name.\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5\n```\n\n#### multiple gpus\nyou can use model parallelism to aggregate gpu memory from multiple gpus on the same machine. \n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --num-gpus 2\n```\n\ntips:\nsometimes the \"auto\" device mapping strategy in huggingface/transformers does not perfectly balance the memory allocation across multiple gpus.\nyou can use `--max-gpu-memory` to specify the maximum memory per gpu for storing model weights.\nthis allows it to allocate more memory for activations, so you can use longer context lengths or larger batch sizes. for example,\n\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --num-gpus 2 --max-gpu-memory 8gib\n```\n\n#### cpu only\nthis runs on the cpu only and does not require gpu. it requires around 30gb of cpu memory for vicuna-7b and around 60gb of cpu memory for vicuna-13b.\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --device cpu\n```\n\nuse intel ai accelerator avx512_bf16/amx to accelerate cpu inference.\n```\ncpu_isa=amx python3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --device cpu\n```\n\n#### metal backend (mac computers with apple silicon or amd gpus)\nuse `--device mps` to enable gpu acceleration on mac computers (requires torch >= 2.0).\nuse `--load-8bit` to turn on 8-bit compression.\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --device mps --load-8bit\n```\nvicuna-7b can run on a 32gb m1 macbook with 1 - 2 words / second.\n\n#### intel xpu (intel data center and arc a-series gpus)\ninstall the [intel extension for pytorch](https://intel.github.io/intel-extension-for-pytorch/xpu/latest/tutorials/installation.html). set the oneapi environment variables:\n```\nsource /opt/intel/oneapi/setvars.sh\n```\n\nuse `--device xpu` to enable xpu/gpu acceleration.\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --device xpu\n```\nvicuna-7b can run on an intel arc a770 16gb.\n\n#### ascend npu (huawei ai processor)\ninstall the [ascend pytorch adapter](https://github.com/ascend/pytorch). set the cann environment variables:\n```\nsource /usr/local/ascend/ascend-toolkit/set_env.sh\n```\n\nuse `--device npu` to enable npu acceleration.\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --device npu\n```\nvicuna-7b/13b can run on an ascend 910b npu 60gb.\n\n#### not enough memory\nif you do not have enough memory, you can enable 8-bit compression by adding `--load-8bit` to commands above.\nthis can reduce memory usage by around half with slightly degraded model quality.\nit is compatible with the cpu, gpu, and metal backend.\n\nvicuna-13b with 8-bit compression can run on a single gpu with 16 gb of vram, like an nvidia rtx 3090, rtx 4080, t4, v100 (16gb), or an amd rx 6800 xt.\n\n```\npython3 -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5 --load-8bit\n```\n\nin addition to that, you can add `--cpu-offloading` to commands above to offload weights that don't fit on your gpu onto the cpu memory.\nthis requires 8-bit compression to be enabled and the bitsandbytes package to be installed, which is only available on linux operating systems.\n\n#### more platforms and quantization\n- for amd gpu users, please install rocm and [the rocm version of pytorch](https://pytorch.org/get-started/locally/) before you install fastchat. see also this [post](https://github.com/lm-sys/fastchat/issues/104#issuecomment-1613791563).\n- fastchat supports exllama v2. see [docs/exllama_v2.md](/docs/exllama_v2.md).\n- fastchat supports gptq 4bit inference with [gptq-for-llama](https://github.com/qwopqwop200/gptq-for-llama). see [docs/gptq.md](/docs/gptq.md).\n- fastchat supports awq 4bit inference with [mit-han-lab/llm-awq](https://github.com/mit-han-lab/llm-awq). see [docs/awq.md](/docs/awq.md).\n- [mlc llm](https://mlc.ai/mlc-llm/), backed by [tvm unity](https://github.com/apache/tvm/tree/unity) compiler, deploys vicuna natively on phones, consumer-class gpus and web browsers via vulkan, metal, cuda and webgpu.\n\n## serving with web gui\n\n<a href=\"https://chat.lmsys.org\"><img src=\"assets/screenshot_gui.png\" width=\"70%\"></a>\n\nto serve using the web ui, you need three main components: web servers that interface with users, model workers that host one or more models, and a controller to coordinate the webserver and model workers. you can learn more about the architecture [here](docs/server_arch.md).\n\nhere are the commands to follow in your terminal:\n\n#### launch the controller\n```bash\npython3 -m fastchat.serve.controller\n```\n\nthis controller manages the distributed workers.\n\n#### launch the model worker(s)\n```bash\npython3 -m fastchat.serve.model_worker --model-path lmsys/vicuna-7b-v1.5\n```\nwait until the process finishes loading the model and you see \"uvicorn running on ...\". the model worker will register itself to the controller .\n\nto ensure that your model worker is connected to your controller properly, send a test message using the following command:\n```bash\npython3 -m fastchat.serve.test_message --model-name vicuna-7b-v1.5\n```\nyou will see a short output.\n\n#### launch the gradio web server\n```bash\npython3 -m fastchat.serve.gradio_web_server\n```\n\nthis is the user interface that users will interact with.\n\nby following these steps, you will be able to serve your models using the web ui. you can open your browser and chat with a model now.\nif the models do not show up, try to reboot the gradio web server.\n\n#### (optional): advanced features, scalability\n- you can register multiple model workers to a single controller, which can be used for serving a single model with higher throughput or serving multiple models at the same time. when doing so, please allocate different gpus and ports for different model workers.\n```\n# worker 0\ncuda_visible_devices=0 python3 -m fastchat.serve.model_worker --model-path lmsys/vicuna-7b-v1.5 --controller http://localhost:21001 --port 31000 --worker http://localhost:31000\n# worker 1\ncuda_visible_devices=1 python3 -m fastchat.serve.model_worker --model-path lmsys/fastchat-t5-3b-v1.0 --controller http://localhost:21001 --port 31001 --worker http://localhost:31001\n```\n- you can also launch a multi-tab gradio server, which includes the chatbot arena tabs.\n```bash\npython3 -m fastchat.serve.gradio_web_server_multi\n```\n- the default model worker based on huggingface/transformers has great compatibility but can be slow. if you want high-throughput batched serving, you can try [vllm integration](docs/vllm_integration.md).\n\n#### (optional): advanced features, third party ui\n- if you want to host it on your own ui or third party ui. launch the openai compatible server, host with a hosting service like ngrok, and enter the credentials approriatly.\n    - https://github.com/wongsaang/chatgpt-ui\n    - https://github.com/mckaywrigley/chatbot-ui\n- note some third party provider only offer the stand `gpt-3.5-turbo, gpt-4, etc`, so you will have to add your own custom model inside the code. [here is an example of a modification of creating a ui with any custom model name](https://github.com/ztjhz/betterchatgpt/pull/461)\n\n\n## api\n### openai-compatible restful apis & sdk\nfastchat provides openai-compatible apis for its supported models, so you can use fastchat as a local drop-in replacement for openai apis.\nthe fastchat server is compatible with both [openai-python](https://github.com/openai/openai-python) library and curl commands.\nsee [docs/openai_api.md](docs/openai_api.md).\n\n### hugging face generation apis\nsee [fastchat/serve/huggingface_api.py](fastchat/serve/huggingface_api.py).\n\n### langchain integration\nsee [docs/langchain_integration](docs/langchain_integration.md).\n\n## evaluation\nwe use mt-bench, a set of challenging multi-turn open-ended questions to evaluate models. \nto automate the evaluation process, we prompt strong llms like gpt-4 to act as judges and assess the quality of the models' responses.\nsee instructions for running mt-bench at [fastchat/llm_judge](fastchat/llm_judge).\n\nmt-bench is the new recommended way to benchmark your models. if you are still looking for the old 80 questions used in the vicuna blog post, please go to [vicuna-blog-eval](https://github.com/lm-sys/vicuna-blog-eval).\n\n## fine-tuning\n### data\n\nvicuna is created by fine-tuning a llama base model using approximately 125k user-shared conversations gathered from sharegpt.com with public apis. to ensure data quality, we convert the html back to markdown and filter out some inappropriate or low-quality samples. additionally, we divide lengthy conversations into smaller segments that fit the model's maximum context length. for detailed instructions to clean the sharegpt data, check out [here](docs/commands/data_cleaning.md).\n\nwe will not release the sharegpt dataset. if you would like to try the fine-tuning code, you can run it with some dummy conversations in [dummy_conversation.json](data/dummy_conversation.json). you can follow the same format and plug in your own data.\n\n### code and hyperparameters\nour code is based on [stanford alpaca](https://github.com/tatsu-lab/stanford_alpaca) with additional support for multi-turn conversations.\nwe use similar hyperparameters as the stanford alpaca.\n\n| hyperparameter | global batch size | learning rate | epochs | max length | weight decay |\n| --- | ---: | ---: | ---: | ---: | ---: |\n| vicuna-13b | 128 | 2e-5 | 3 | 2048 | 0 |\n\n### fine-tuning vicuna-7b with local gpus\n\n- install dependency\n```bash\npip3 install -e \".[train]\"\n```\n\n- you can use the following command to train vicuna-7b with 4 x a100 (40gb). update `--model_name_or_path` with the actual path to llama weights and `--data_path` with the actual path to data.\n```bash\ntorchrun --nproc_per_node=4 --master_port=20001 fastchat/train/train_mem.py \\\n    --model_name_or_path meta-llama/llama-2-7b-hf \\\n    --data_path data/dummy_conversation.json \\\n    --bf16 true \\\n    --output_dir output_vicuna \\\n    --num_train_epochs 3 \\\n    --per_device_train_batch_size 2 \\\n    --per_device_eval_batch_size 2 \\\n    --gradient_accumulation_steps 16 \\\n    --evaluation_strategy \"no\" \\\n    --save_strategy \"steps\" \\\n    --save_steps 1200 \\\n    --save_total_limit 10 \\\n    --learning_rate 2e-5 \\\n    --weight_decay 0. \\\n    --warmup_ratio 0.03 \\\n    --lr_scheduler_type \"cosine\" \\\n    --logging_steps 1 \\\n    --fsdp \"full_shard auto_wrap\" \\\n    --fsdp_transformer_layer_cls_to_wrap 'llamadecoderlayer' \\\n    --tf32 true \\\n    --model_max_length 2048 \\\n    --gradient_checkpointing true \\\n    --lazy_preprocess true\n```\n\ntips:\n- if you are using v100 which is not supported by flashattention, you can use the [memory-efficient attention](https://arxiv.org/abs/2112.05682) implemented in [xformers](https://github.com/facebookresearch/xformers). install xformers and replace `fastchat/train/train_mem.py` above with [fastchat/train/train_xformers.py](fastchat/train/train_xformers.py).\n- if you meet out-of-memory due to \"fsdp warning: when using fsdp, it is efficient and recommended... \", see solutions [here](https://github.com/huggingface/transformers/issues/24724#issuecomment-1645189539).\n- if you meet out-of-memory during model saving, see solutions [here](https://github.com/pytorch/pytorch/issues/98823).\n- to turn on logging to popular experiment tracking tools such as tensorboard, mlflow or weights & biases, use the `report_to` argument, e.g. pass `--report_to wandb` to turn on logging to weights & biases.\n\n### other models, platforms and lora support\nmore instructions to train other models (e.g., fastchat-t5) and use lora are in [docs/training.md](docs/training.md).\n\n### fine-tuning on any cloud with skypilot\n[skypilot](https://github.com/skypilot-org/skypilot) is a framework built by uc berkeley for easily and cost effectively running ml workloads on any cloud (aws, gcp, azure, lambda, etc.).\nfind skypilot documentation [here](https://github.com/skypilot-org/skypilot/tree/master/llm/vicuna) on using managed spot instances to train vicuna and save on your cloud costs.\n\n## citation\nthe code (training, serving, and evaluation) in this repository is mostly developed for or derived from the paper below.\nplease cite it if you find the repository helpful.\n\n```\n@misc{zheng2023judging,\n      title={judging llm-as-a-judge with mt-bench and chatbot arena},\n      author={lianmin zheng and wei-lin chiang and ying sheng and siyuan zhuang and zhanghao wu and yonghao zhuang and zi lin and zhuohan li and dacheng li and eric. p xing and hao zhang and joseph e. gonzalez and ion stoica},\n      year={2023},\n      eprint={2306.05685},\n      archiveprefix={arxiv},\n      primaryclass={cs.cl}\n}\n```\n\nwe are also planning to add more of our research to this repository.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fschat",
  "package_url": "https://pypi.org/project/fschat/",
  "project_url": "https://pypi.org/project/fschat/",
  "project_urls": {
    "Bug Tracker": "https://github.com/lm-sys/fastchat/issues",
    "Homepage": "https://github.com/lm-sys/fastchat"
  },
  "release_url": "https://pypi.org/project/fschat/0.2.34/",
  "requires_dist": [
    "aiohttp",
    "fastapi",
    "httpx",
    "markdown2[all]",
    "nh3",
    "numpy",
    "prompt-toolkit >=3.0.0",
    "pydantic <2,>=1",
    "requests",
    "rich >=10.0.0",
    "shortuuid",
    "tiktoken",
    "uvicorn",
    "black ==23.3.0 ; extra == 'dev'",
    "pylint ==2.8.2 ; extra == 'dev'",
    "openai <1 ; extra == 'llm_judge'",
    "anthropic >=0.3 ; extra == 'llm_judge'",
    "ray ; extra == 'llm_judge'",
    "accelerate >=0.21 ; extra == 'model_worker'",
    "peft ; extra == 'model_worker'",
    "sentencepiece ; extra == 'model_worker'",
    "torch ; extra == 'model_worker'",
    "transformers >=4.31.0 ; extra == 'model_worker'",
    "protobuf ; extra == 'model_worker'",
    "einops ; extra == 'train'",
    "flash-attn >=2.0 ; extra == 'train'",
    "wandb ; extra == 'train'",
    "gradio ; extra == 'webui'"
  ],
  "requires_python": ">=3.8",
  "summary": "an open platform for training, serving, and evaluating large language model based chatbots.",
  "version": "0.2.34",
  "releases": [],
  "developers": [],
  "kwds": "chatbot fastchat chatbots chatbot_arena_conversations chatglm",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fschat",
  "homepage": "",
  "release_count": 42,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_aiohttp",
    "pypi_anthropic",
    "pypi_black",
    "pypi_einops",
    "pypi_fastapi",
    "pypi_flash_attn",
    "pypi_gradio",
    "pypi_httpx",
    "pypi_markdown2",
    "pypi_nh3",
    "pypi_numpy",
    "pypi_openai",
    "pypi_peft",
    "pypi_prompt_toolkit",
    "pypi_protobuf",
    "pypi_pydantic",
    "pypi_pylint",
    "pypi_ray",
    "pypi_requests",
    "pypi_rich",
    "pypi_sentencepiece",
    "pypi_shortuuid",
    "pypi_tiktoken",
    "pypi_torch",
    "pypi_transformers",
    "pypi_uvicorn",
    "pypi_wandb"
  ]
}
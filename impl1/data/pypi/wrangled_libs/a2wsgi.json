{
  "classifiers": [
    "programming language :: python :: 3"
  ],
  "description": "# a2wsgi\n\nconvert wsgi app to asgi app or asgi app to wsgi app.\n\npure python. only depend on the standard library.\n\ncompared with other converters, the advantage is that a2wsgi will not accumulate the requested content or response content in the memory, so you don't have to worry about the memory limit caused by a2wsgi. this problem exists in converters implemented by uvicorn/startlette or hypercorn.\n\n## install\n\n```\npip install a2wsgi\n```\n\n## how to use\n\n### `wsgimiddleware`\n\nconvert wsgi app to asgi app:\n\n```python\nfrom a2wsgi import wsgimiddleware\n\nasgi_app = wsgimiddleware(wsgi_app)\n```\n\nwsgimiddleware executes wsgi applications with a thread pool of up to 10 threads by default. if you want to increase or decrease this number, just like `wsgimiddleware(..., workers=15)`.\n\n### `asgimiddleware`\n\nconvert asgi app to wsgi app:\n\n```python\nfrom a2wsgi import asgimiddleware\n\nwsgi_app = asgimiddleware(asgi_app)\n```\n\n`asgimiddleware` will wait for the asgi application's background task to complete before returning the last null byte. but sometimes you may not want to wait indefinitely for the execution of the background task of the asgi application, then you only need to give the parameter `asgimiddleware(..., wait_time=5.0)`, after the time exceeds, the asgi task corresponding to the request will be tried to cancel, and the last null byte will be returned.\n\nyou can also specify your own event loop through the `loop` parameter instead of the default event loop. like `asgimiddleware(..., loop=faster_loop)`\n\n### access the original `scope`/`environ`\n\nsometimes you may need to access the original wsgi environ in the asgi application, just use `scope[\"wsgi_environ\"]`; it is also easy to access the asgi scope in the wsgi application, use `environ[\"asgi.scope\"]`.\n\n## benchmark\n\nrun `pytest ./benchmark.py -s` to compare the performance of `a2wsgi` and `uvicorn.middleware.wsgi.wsgimiddleware` / `asgiref.wsgi.wsgitoasgi`.\n\n## why a2wsgi\n\n### convert wsgi app to asgi app\n\nyou can convert an existing wsgi project to an asgi project to make it easier to migrate from wsgi applications to asgi applications.\n\n### convert asgi app to wsgi app\n\nthere is a lot of support for wsgi. converting asgi to wsgi, you will be able to use many existing services to deploy asgi applications.\n\n## compatibility list\n\nthis list quickly demonstrates the compatibility of some common frameworks for users who are unfamiliar with the wsgi and asgi protocols.\n\n- wsgi: [django(wsgi)](https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/)/[ku\u00ed(wsgi)](https://kui.aber.sh/wsgi/)/[pyramid](https://trypyramid.com/)/[bottle](https://bottlepy.org/)/[flask](https://flask.palletsprojects.com/)\n- asgi: [django(asgi)](https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/)/[ku\u00ed(asgi)](https://kui.aber.sh/asgi/)/[starlette](https://www.starlette.io/)/[fastapi](https://fastapi.tiangolo.com/)/[sanic](https://sanic.readthedocs.io/en/stable/)/[quart](https://pgjones.gitlab.io/quart/)\n- **unsupport**: [aiohttp](https://docs.aiohttp.org/en/stable/)\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "a2wsgi",
  "package_url": "https://pypi.org/project/a2wsgi/",
  "project_url": "https://pypi.org/project/a2wsgi/",
  "project_urls": {
    "Homepage": "https://github.com/abersheeran/a2wsgi",
    "Repository": "https://github.com/abersheeran/a2wsgi"
  },
  "release_url": "https://pypi.org/project/a2wsgi/1.9.0/",
  "requires_dist": [],
  "requires_python": ">=3.8.0",
  "summary": "convert wsgi app to asgi app or asgi app to wsgi app.",
  "version": "1.9.0",
  "releases": [],
  "developers": [
    "me@abersheeran.com"
  ],
  "kwds": "wsgi_app wsgi_environ wsgi wsgimiddleware asgi_app",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_a2wsgi",
  "homepage": "https://github.com/abersheeran/a2wsgi",
  "release_count": 24,
  "dependency_ids": []
}
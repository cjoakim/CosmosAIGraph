{
  "classifiers": [
    "license :: osi approved :: gnu lesser general public license v2 or later (lgplv2+)",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "crc32c\n======\n\n.. image:: https://github.com/icrar/crc32c/workflows/build%20and%20release%20to%20pypi/badge.svg?branch=master\n\n.. image:: https://badge.fury.io/py/crc32c.svg\n    :target: https://badge.fury.io/py/crc32c\n\nthis package implements the crc32c checksum algorithm.\nit automatically chooses between a hardware-based implementation\n(using the crc32c sse 4.2 instruction of intel cpus,\nand the crc32* instructions on armv8 cpus),\nor a software-based one when no hardware support can be found.\n\nbecause ``crc32c`` is in pypi, you can install it with::\n\n pip install crc32c\n\nsupported platforms are linux and osx using the gcc and clang compilers,\nand windows using the visual studio compiler. other compilers in\nwindows (mingw for instance) might work.\nbinary wheels are also provided in pypi for major platforms/architectures.\n\n\nusage\n-----\n\nthe only method exposed by this module is ``crc32c(data, [crc])``.\nit computes the crc32c checksum of ``data``\nstarting with an initial ``crc`` checksum,\nsimilarly to how the built-in ``binascii.crc32`` works.\nit can thus be used like this:\n\n.. code-block:: python\n\n  print(crc32c.crc32c(b'hello world'))\n  # 3381945770\n  crc = crc32c.crc32c(b'hello')\n  print(crc32c.crc32c(b' world', crc))\n  # 3381945770\n\nin older versions,\nthe function exposed by this module was called ``crc32``.\nthat name is still present but deprecated,\nand will be removed in new versions of the library.\n\nadditionally one can consult\nthe following module-level values:\n\n * ``hardware_based`` indicates if the algorithm in use\n   is software- or hardware-based.\n * ``big_endian`` indicates whether the platform is big endian or not.\n\nimplementation details\n----------------------\n\nby default,\nif your cpu doesn't have crc32c hardware support,\nthe package will fallback to use a software implementation\nof the crc32c checksum algorithm.\nthis behavior can be changed by setting\nthe ``crc32c_sw_mode`` environment variable\nto one of the following values:\n\n* ``auto``: same as if unset, will eventually be discontinued.\n* ``force``: use software implementation regardless of hardware support.\n* ``none``: fail to import the module with an ``importerror``\n  if no hardware support is found (old 1.x default behavior).\n\nthe software algorithm is based\non intel's `slice-by-8 package <https://sourceforge.net/projects/slicing-by-8/>`_,\nwith some adaptations done\nby `evan jones <https://www.evanjones.ca/crc32c.html>`_\nand packaging provided by `ferry toth <https://github.com/htot/crc32c>`_.\nfurther adaptations were required\nto make the code more portable\nand fit for inclusion within this python package.\n\nthe intel sse 4.2 algorithm\nis based on `mark adler's code <http://stackoverflow.com/questions/17645167/implementing-sse-4-2s-crc32c-in-software/17646775>`_,\nwith some modifications required\nto make the code more portable\nand fit for inclusion within this python package.\n\nthe armv8 hardware implementation\nis based on google's `crc32c <https://github.com/google/crc32c>`_\nc++ library.\n\ncopyright\n---------\n\nthis package is copyrighted::\n\n icrar - international centre for radio astronomy research\n (c) uwa - the university of western australia, 2017\n copyright by uwa (in the framework of the icrar)\n\nthe original slice-by-8 software algorithm\nis copyrighted by::\n\n copyright (c) 2004-2006 intel corporation - all rights reserved\n\nfurther adaptations to the slice-by-8 algorithm\nprevious to the inclusion in this package\nare copyrighted by::\n\n copyright 2008,2009,2010 massachusetts institute of technology.\n\nthe original intel sse 4.2 crc32c algorithm\nis copyrighted by::\n\n copyright (c) 2013 mark adler\n\nthe crc32c armv8 hardware code\nis copyrighted by::\n\n copyright 2017 the crc32c authors\n\na copy of the `authors <authors.google-crc32c>`_ file\nfrom google's crc32c project\nas it was at the time of copying the code\nis included in this repository.\n\nlicense\n-------\n\nthis package is licensed under `the lgpl-2.1 license <license>`_.\n\nthe original slice-by-8 software algorithm\nis licensed under `the 2-clause bsd licence\n<https://opensource.org/licenses/bsd-license.html>`_.\n\nfurther modifications to the slice-by-8 software algorithm\nare licensed under `a 3-clause bsd licence <license.slice-by-8>`_\n\nthe original intel sse 4.2 crc32c algorithm's code\nis licensed under a custom license\nembedded in the ``crc32c_adler.c`` file.\n\nthe original crc32c armv8 hardware code\nis licensed under `a 3-clause bsd license <license.google-crc32c>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "lgplv2.1+",
  "name": "crc32c",
  "package_url": "https://pypi.org/project/crc32c/",
  "project_url": "https://pypi.org/project/crc32c/",
  "project_urls": {
    "Homepage": "https://github.com/ICRAR/crc32c"
  },
  "release_url": "https://pypi.org/project/crc32c/2.3.post0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a python package implementing the crc32c algorithm in hardware and software",
  "version": "2.3.post0",
  "releases": [],
  "developers": [
    "rtobar@icrar.org",
    "the_icrar_dia_team"
  ],
  "kwds": "crc32 crc32c crc crc32c_sw_mode crc32c_adler",
  "license_kwds": "lgplv2.1+",
  "libtype": "pypi",
  "id": "pypi_crc32c",
  "homepage": "https://github.com/icrar/crc32c",
  "release_count": 15,
  "dependency_ids": []
}
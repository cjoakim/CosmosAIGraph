{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: system :: logging"
  ],
  "description": "# minilog\n\na minimalistic logging wrapper for python.\n\n[![unix build status](https://img.shields.io/travis/com/jacebrowning/minilog.svg?label=unix)](https://travis-ci.com/jacebrowning/minilog)\n[![windows build status](https://img.shields.io/appveyor/ci/jacebrowning/minilog.svg?label=windows)](https://ci.appveyor.com/project/jacebrowning/minilog)\n[![coverage status](https://img.shields.io/coveralls/jacebrowning/minilog/main.svg)](https://coveralls.io/r/jacebrowning/minilog)\n[![scrutinizer code quality](https://img.shields.io/scrutinizer/g/jacebrowning/minilog.svg)](https://scrutinizer-ci.com/g/jacebrowning/minilog)\n[![pypi license](https://img.shields.io/pypi/l/minilog.svg)](https://pypi.org/project/minilog)\n[![pypi version](https://img.shields.io/pypi/v/minilog.svg)](https://pypi.org/project/minilog)\n[![pypi downloads](https://img.shields.io/pypi/dm/minilog.svg?color=orange)](https://pypistats.org/packages/minilog)\n\n## usage\n\nevery project should utilize logging, but for simple use cases, this requires a bit too much boilerplate. instead of including all of this in your modules:\n\n```python\nimport logging\n\nlog = logging.getlogger(__name__)\n\ndef greet(name):\n    log.info(\"hello, %s!\", name)\n\nif __name__ == \"__main__\":\n    logging.basicconfig(\n        level=logging.info,\n        format=\"%(levelname)s: %(name)s: %(message)s\",\n    )\n```\n\nwith this package you can simply:\n\n```python\nimport log\n\ndef greet(name):\n    log.info(\"hello, %s!\", name)\n\nif __name__ == \"__main__\":\n    log.init()\n```\n\nit will produce the exact same standard library `logging` records behind the scenes with automatic formatting for non-strings.\n\n## installation\n\ninstall this library directly into an activated virtual environment:\n\n```text\n$ pip install minilog\n```\n\nor add it to your [poetry](https://poetry.eustace.io/) project:\n\n```text\n$ poetry add minilog\n```\n\n## documentation\n\nto view additional options, please consult the [full documentation](https://minilog.readthedocs.io/en/latest/logging/).\n",
  "docs_url": null,
  "keywords": "logging",
  "license": "mit",
  "name": "minilog",
  "package_url": "https://pypi.org/project/minilog/",
  "project_url": "https://pypi.org/project/minilog/",
  "project_urls": {
    "Documentation": "https://minilog.readthedocs.io",
    "Homepage": "https://pypi.org/project/minilog",
    "Repository": "https://github.com/jacebrowning/minilog"
  },
  "release_url": "https://pypi.org/project/minilog/2.3/",
  "requires_dist": [],
  "requires_python": ">=3.8,<4.0",
  "summary": "minimalistic wrapper for python logging.",
  "version": "2.3",
  "releases": [],
  "developers": [
    "jace_browning",
    "jacebrowning@gmail.com"
  ],
  "kwds": "minilog logging getlogger log coverage",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_minilog",
  "homepage": "https://pypi.org/project/minilog",
  "release_count": 55,
  "dependency_ids": []
}
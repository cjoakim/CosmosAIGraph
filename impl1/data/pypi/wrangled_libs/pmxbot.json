{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: communications :: chat :: internet relay chat",
    "topic :: internet :: www/http :: wsgi :: application"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/pmxbot.svg\n   :target: https://pypi.org/project/pmxbot\n\n.. image:: https://img.shields.io/pypi/pyversions/pmxbot.svg\n\n.. image:: https://github.com/pmxbot/pmxbot/workflows/tests/badge.svg\n   :target: https://github.com/pmxbot/pmxbot/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/pmxbot/badge/?version=latest\n   :target: https://pmxbot.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/pmxbot\n   :target: https://tidelift.com/subscription/pkg/pypi-pmxbot?utm_source=pypi-pmxbot&utm_medium=readme\n\npmxbot is bot for irc and slack written in\n`python <https://python.org>`_. originally built for internal use\nat `yougov <https://yougov.com/>`_,\nit's been sanitized and set free upon the world. you can find out more details\non `the project website <https://github.com/pmxbot/pmxbot>`_.\n\ncommands\n========\n\npmxbot listens to commands prefixed by a '!'\nif it's a command, it knows it will reply, take an action, etc.\nit can search the web, store quotes you, track karma, make decisions,\nand do just about anything else you could want. it stores logs and quotes\nand karma in either a sqlite or mongodb\ndatabase, and there's a web interface for reviewing the logs and karma.\n\ncontains\n========\n\npmxbot will respond to things you say if it detects words and phrases it's\nbeen told to recognize. for example, mention sql on rails.\n\nrequirements\n============\n\n`pmxbot` requires python 3. it also requires a few python packages as defined\nin setup.py. some optional dependencies are installed with\n`extras\n<https://packaging.python.org/installing/#installing-setuptools-extras>`_:\n\n- mongodb: enable mongodb persistence (instead of sqlite).\n- irc: irc bot client.\n- slack: slack bot client.\n- viewer: enable the web viewer application.\n\ntesting\n=======\n\n`pmxbot` includes a test suite that does some functional tests written against\nthe python irc server and quite a few unit tests as well. install\n`tox <https://pypi.org/project/tox>`_ and run ``tox`` to invoke the tests.\n\nconfiguration\n=============\n\nconfiguration is based on very easy yaml files. check out config.yaml in the\nsource tree for an example.\n\nusage\n=====\n\nonce you've setup a config file, you just need to call ``pmxbot config.yaml``\nand it will join and connect. we recommend running pmxbot under\nyour favorite process supervisor to make it\nautomatically restart if it crashes (or terminates due to a planned\nrestart).\n\ncustom features\n===============\n\nsetuptools entry points plugin\n------------------------------\n\n``pmxbot`` provides an extension mechanism for adding commands, and uses this\nmechanism even for its own built-in commands.\n\nto create a setuptools\nentry point plugin, package your modules using\nthe setuptools tradition and install it alongside pmxbot. your package\nshould define an entry point in the group ``pmxbot_handlers`` by including\nsomething similar to the following in the package's setup.py::\n\n    entry_points = {\n        'pmxbot_handlers': [\n            'plugin name = pmxbot.mymodule',\n        ],\n    },\n\nduring startup,\npmxbot will load ``pmxbot.mymodule``. ``plugin name`` can be anything, but should\nbe a name suitable to identify the plugin (and it will be displayed during\npmxbot startup).\n\nnote that the ``pmxbot`` package is a namespace package, and you're welcome\nto use that namespace for your plugin (e.g.\n`pmxbot.nsfw <https://github.com/pmxbot/pmxbot.nsfw>`_).\n\nif your plugin requires any initialization, specify an initialization function\n(or class method) in the entry point. for example::\n\n    'plugin name = pmxbot.mymodule:initialize_func'\n\non startup, pmxbot will call ``initialize_func`` with no parameters.\n\nwithin the script you'll want to import the decorator(s) you need to use with::\n\n    from pmxbot.core import command, contains, regexp, execdelay, execat`.\n\nyou'll\nthen decorate each function with the appropriate line so pmxbot registers it.\n\na command (!g) gets the @command decorator::\n\n  @command(aliases=('tt', 'tear', 'cry'))\n  def tinytear(rest):\n    \"i cry a tiny tear for you.\"\n    if rest:\n      return \"/me sheds a single tear for %s\" % rest\n    else:\n      return \"/me sits and cries as a single tear slowly trickles down its cheek\"\n\na response (when someone says something) uses the @contains decorator::\n\n  @contains(\"sqlonrails\")\n  def yay_sor():\n    karma.karma.store.change('sql on rails', 1)\n    return \"only 76,417 lines...\"\n\neach handler may solicit any of the following parameters:\n\n - channel (the channel in which the message occurred)\n - nick (the nickname that triggered the command or behavior)\n - rest (any text after the command)\n\na more complicated response (when you want to extract data from a message) uses\nthe @regexp decorator::\n\n    @regexp(\"jira\", r\"(?<![a-za-z0-9/])(ops|lib|sales|ux|general|support)-\\d\\d+\")\n    def jira(client, event, channel, nick, match):\n        return \"https://jira.example.com/browse/%s\" % match.group()\n\nfor an example of how to implement a setuptools-based plugin, see one of the\nmany examples in the pmxbot project itself or one of the popular third-party\nprojects:\n\n - `motivation <https://github.com/pmxbot/motivation>`_.\n - `wolframalpha <https://github.com/jaraco/wolframalpha>`_.\n - `jaraco.translate <https://github.com/jaraco/jaraco.translate>`_.\n - `excuses <https://github.com/pmxbot/excuses>`_.\n\nweb interface\n=============\n\npmxbot includes a web server for allowing users to view the logs, read the\nhelp, and check karma. you specify the host, port, base path, logo, title,\netc with the same yaml config file. just run like ``pmxbotweb config.yaml``\nand it will start up. like pmxbot, use of a supervisor is recommended to\nrestart the process following termination.\n\npmxbot as a slack bot (native)\n==============================\n\nto use pmxbot as a slack bot, install with ``pmxbot[slack]``,\nand set ``slack token`` in your config to the token from your\n`bot user <https://api.slack.com/bot-users>`_. easy, peasy.\n\npmxbot as a slack bot (irc)\n===========================\n\nas slack provides an irc interface, it's easy to configure pmxbot for use\nin slack. here's how:\n\n0. install with ``pmxbot[irc]``.\n1. `enable the irc gateway <https://slack.zendesk.com/hc/en-us/articles/201727913-connecting-to-slack-over-irc-and-xmpp>`.\n2. create an e-mail for the bot.\n3. create the account for the bot in slack and activate its account.\n4. log into slack using that new account and `get the irc gateway\n   password <https://my.slack.com/account/gateways>` for that\n   account.\n5. configure the pmxbot as you would for an irc server, but use these\n   settings for the connection:\n\n    message rate limit: 2.5\n    password: <gateway password>\n    server_host: <team name>.irc.slack.com\n    server_port: 6667\n\n   the rate limit is necessary because slack will kick the bot if it issues more than 25 messages in 10 seconds, so throttling it to 2.5 messages per\n   second avoids hitting the limit.\n6. consider leaving 'log_channels' and 'other_channels' empty, especially\n   if relying on slack logging. slack will automatically re-join pmxbot to\n   any channels to which it has been ``/invited``.\n\nfor enterprise\n==============\n\navailable as part of the tidelift subscription.\n\nthis project and the maintainers of thousands of other packages are working with tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`learn more <https://tidelift.com/subscription/pkg/pypi-pmxbot?utm_source=pypi-pmxbot&utm_medium=referral&utm_campaign=github>`_.\n\nsecurity contact\n================\n\nto report a security vulnerability, please use the\n`tidelift security contact <https://tidelift.com/security>`_.\ntidelift will coordinate the fix and disclosure.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pmxbot",
  "package_url": "https://pypi.org/project/pmxbot/",
  "project_url": "https://pypi.org/project/pmxbot/",
  "project_urls": {
    "Homepage": "https://github.com/pmxbot/pmxbot"
  },
  "release_url": "https://pypi.org/project/pmxbot/1122.16.0/",
  "requires_dist": [
    "requests",
    "pyyaml",
    "feedparser",
    "pytz",
    "beautifulsoup4",
    "wordnik-py3",
    "more-itertools",
    "tempora",
    "jaraco.collections (>=3.4)",
    "jaraco.itertools",
    "jaraco.context",
    "jaraco.classes",
    "jaraco.functools",
    "inflect",
    "python-dateutil",
    "jaraco.mongodb (>=7.3.1)",
    "importlib-metadata (>=3.6)",
    "importlib-resources (>=1.3)",
    "dnspython",
    "sphinx (>=3.5) ; extra == 'docs'",
    "jaraco.packaging (>=9) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "jaraco.tidelift (>=1.4) ; extra == 'docs'",
    "irc (>=15.0) ; extra == 'irc'",
    "pymongo (>=3) ; extra == 'mongodb'",
    "slack-sdk ; extra == 'slack'",
    "pytest (>=6) ; extra == 'testing'",
    "pytest-checkdocs (>=2.4) ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler (>=2.2) ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "more-itertools ; extra == 'testing'",
    "jaraco.mongodb ; extra == 'testing'",
    "setuptools-scm ; extra == 'testing'",
    "types-requests ; extra == 'testing'",
    "types-python-dateutil ; extra == 'testing'",
    "types-pytz ; extra == 'testing'",
    "types-pyyaml ; extra == 'testing'",
    "jaraco.test (>=5.3) ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "cherrypy (>=3.2.3) ; extra == 'viewer'",
    "jinja2 (>=2.11.2) ; extra == 'viewer'"
  ],
  "requires_python": ">=3.8",
  "summary": "irc bot - full featured, yet extensible and customizable",
  "version": "1122.16.0",
  "releases": [],
  "developers": [
    "dev@yougov.com",
    "jaraco@jaraco.com",
    "jason_r",
    "yougov"
  ],
  "kwds": "pmxbot pmxbot_handlers pmxbotweb badge badges",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pmxbot",
  "homepage": "https://github.com/pmxbot/pmxbot",
  "release_count": 265,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_cherrypy",
    "pypi_dnspython",
    "pypi_feedparser",
    "pypi_furo",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_inflect",
    "pypi_irc",
    "pypi_jaraco.classes",
    "pypi_jaraco.collections",
    "pypi_jaraco.context",
    "pypi_jaraco.functools",
    "pypi_jaraco.itertools",
    "pypi_jaraco.mongodb",
    "pypi_jaraco.packaging",
    "pypi_jaraco.test",
    "pypi_jaraco.tidelift",
    "pypi_jinja2",
    "pypi_more_itertools",
    "pypi_pymongo",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_rst.linker",
    "pypi_setuptools_scm",
    "pypi_slack_sdk",
    "pypi_sphinx",
    "pypi_sphinx_lint",
    "pypi_tempora",
    "pypi_types_python_dateutil",
    "pypi_types_pytz",
    "pypi_types_pyyaml",
    "pypi_types_requests",
    "pypi_wordnik_py3"
  ]
}
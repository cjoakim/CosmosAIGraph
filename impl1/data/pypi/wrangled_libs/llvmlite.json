{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: code generators",
    "topic :: software development :: compilers"
  ],
  "description": "========\nllvmlite\n========\n\n.. image:: https://dev.azure.com/numba/numba/_apis/build/status/numba.llvmlite?branchname=main\n   :target: https://dev.azure.com/numba/numba/_build/latest?definitionid=2&branchname=main\n   :alt: azure pipelines\n.. image:: https://codeclimate.com/github/numba/llvmlite/badges/gpa.svg\n   :target: https://codeclimate.com/github/numba/llvmlite\n   :alt: code climate\n.. image:: https://coveralls.io/repos/github/numba/llvmlite/badge.svg\n   :target: https://coveralls.io/github/numba/llvmlite\n   :alt: coveralls.io\n.. image:: https://readthedocs.org/projects/llvmlite/badge/\n   :target: https://llvmlite.readthedocs.io\n   :alt: readthedocs.io\n\na lightweight llvm python binding for writing jit compilers\n-----------------------------------------------------------\n\n.. _llvmpy: https://github.com/llvmpy/llvmpy\n\nllvmlite is a project originally tailored for numba_'s needs, using the\nfollowing approach:\n\n* a small c wrapper around the parts of the llvm c++ api we need that are\n  not already exposed by the llvm c api.\n* a ctypes python wrapper around the c api.\n* a pure python implementation of the subset of the llvm ir builder that we\n  need for numba.\n\nwhy llvmlite\n============\n\nthe old llvmpy_  binding exposes a lot of llvm apis but the mapping of\nc++-style memory management to python is error prone. numba_ and many jit\ncompilers do not need a full llvm api.  only the ir builder, optimizer,\nand jit compiler apis are necessary.\n\nkey benefits\n============\n\n* the ir builder is pure python code and decoupled from llvm's\n  frequently-changing c++ apis.\n* materializing a llvm module calls llvm's ir parser which provides\n  better error messages than step-by-step ir building through the c++\n  api (no more segfaults or process aborts).\n* most of llvmlite uses the llvm c api which is small but very stable\n  (low maintenance when changing llvm version).\n* the binding is not a python c-extension, but a plain dll accessed using\n  ctypes (no need to wrestle with python's compiler requirements and c++ 11\n  compatibility).\n* the python binding layer has sane memory management.\n* llvmlite is faster than llvmpy thanks to a much simpler architecture\n  (the numba_ test suite is twice faster than it was).\n\ncompatibility\n=============\n\nllvmlite works with python 3.8 and greater. we attempt to test with the latest\npython version, this can be checked by looking at the public ci builds.\n\nas of version 0.41.0, llvmlite requires llvm 14.x.x on all architectures\n\nhistorical compatibility table:\n\n=================  ========================\nllvmlite versions  compatible llvm versions\n=================  ========================\n0.41.0 - ...       14.x.x\n0.40.0 - 0.40.1    11.x.x and 14.x.x (12.x.x and 13.x.x untested but may work)\n0.37.0 - 0.39.1    11.x.x\n0.34.0 - 0.36.0    10.0.x (9.0.x for  ``aarch64`` only)\n0.33.0             9.0.x\n0.29.0 - 0.32.0    7.0.x, 7.1.x, 8.0.x\n0.27.0 - 0.28.0    7.0.x\n0.23.0 - 0.26.0    6.0.x\n0.21.0 - 0.22.0    5.0.x\n0.17.0 - 0.20.0    4.0.x\n0.16.0 - 0.17.0    3.9.x\n0.13.0 - 0.15.0    3.8.x\n0.9.0 - 0.12.1     3.7.x\n0.6.0 - 0.8.0      3.6.x\n0.1.0 - 0.5.1      3.5.x\n=================  ========================\n\ndocumentation\n=============\n\nyou'll find the documentation at http://llvmlite.pydata.org\n\n\npre-built binaries\n==================\n\nwe recommend you use the binaries provided by the numba_ team for\nthe conda_ package manager.  you can find them in numba's `anaconda.org\nchannel <https://anaconda.org/numba>`_.  for example::\n\n   $ conda install --channel=numba llvmlite\n\n(or, simply, the official llvmlite package provided in the anaconda_\ndistribution)\n\n.. _numba: http://numba.pydata.org/\n.. _conda: http://conda.pydata.org/\n.. _anaconda: http://docs.continuum.io/anaconda/index.html\n\n\nother build methods\n===================\n\nif you don't want to use our pre-built packages, you can compile\nand install llvmlite yourself.  the documentation will teach you how:\nhttp://llvmlite.pydata.org/en/latest/install/index.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "llvmlite",
  "package_url": "https://pypi.org/project/llvmlite/",
  "project_url": "https://pypi.org/project/llvmlite/",
  "project_urls": {
    "Homepage": "http://llvmlite.readthedocs.io",
    "Source": "https://github.com/numba/llvmlite"
  },
  "release_url": "https://pypi.org/project/llvmlite/0.41.1/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "lightweight wrapper around basic llvm functionality",
  "version": "0.41.1",
  "releases": [],
  "developers": [],
  "kwds": "llvmlite azure numba badges numba_",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_llvmlite",
  "homepage": "http://llvmlite.readthedocs.io",
  "release_count": 55,
  "dependency_ids": []
}
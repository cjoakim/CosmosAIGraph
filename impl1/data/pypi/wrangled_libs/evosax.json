{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "jax-based evolution strategies\n# `evosax`: jax-based evolution strategies \ud83e\udd8e\n[![pyversions](https://img.shields.io/pypi/pyversions/evosax.svg?style=flat-square)](https://pypi.python.org/pypi/evosax) [![pypi version](https://badge.fury.io/py/evosax.svg)](https://badge.fury.io/py/evosax)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![codecov](https://codecov.io/gh/roberttlange/evosax/branch/main/graph/badge.svg?token=5fusx35kwo)](https://codecov.io/gh/roberttlange/evosax)\n[![paper](http://img.shields.io/badge/paper-arxiv.2212.04180-b31b1b.svg)](http://arxiv.org/abs/2212.04180)\n<a href=\"https://github.com/roberttlange/evosax/blob/main/docs/logo.png?raw=true\"><img src=\"https://github.com/roberttlange/evosax/blob/main/docs/logo.png?raw=true\" width=\"170\" align=\"right\" /></a>\n\ntired of having to handle asynchronous processes for neuroevolution? do you want to leverage massive vectorization and high-throughput accelerators for evolution strategies (es)? `evosax` allows you to leverage jax, xla compilation and auto-vectorization/parallelization to scale es to your favorite accelerators. the api is based on the classical `ask`, `evaluate`, `tell` cycle of es. both `ask` and `tell` calls are compatible with `jit`, `vmap`/`pmap` and `lax.scan`. it includes a vast set of both classic (e.g. cma-es, differential evolution, etc.) and modern neuroevolution (e.g. openai-es, augmented rs, etc.) strategies. you can get started here \ud83d\udc49 [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/00_getting_started.ipynb)\n\n## basic `evosax` api usage \ud83c\udf72\n\n```python\nimport jax\nfrom evosax import cma_es\n\n# instantiate the search strategy\nrng = jax.random.prngkey(0)\nstrategy = cma_es(popsize=20, num_dims=2, elite_ratio=0.5)\nes_params = strategy.default_params\nstate = strategy.initialize(rng, es_params)\n\n# run ask-eval-tell loop - note: by default minimization!\nfor t in range(num_generations):\n    rng, rng_gen, rng_eval = jax.random.split(rng, 3)\n    x, state = strategy.ask(rng_gen, state, es_params)\n    fitness = ...  # your population evaluation fct \n    state = strategy.tell(x, fitness, state, es_params)\n\n# get best overall population member & its fitness\nstate.best_member, state.best_fitness\n```\n\n## implemented evolution strategies \ud83e\udd8e\n\n| strategy | reference | import | example |\n| --- | --- | ---  | --- |\n| openai-es | [salimans et al. (2017)](https://arxiv.org/pdf/1703.03864.pdf) | [`openes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/open_es.py) | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/03_cnn_mnist.ipynb)\n| pgpe | [sehnke et al. (2010)](https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=a64d1ae8313a364b814998e9e245b40a?doi=10.1.1.180.7104&rep=rep1&type=pdf) | [`pgpe`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/pgpe.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/02_mlp_control.ipynb)\n| ars | [mania et al. (2018)](https://arxiv.org/pdf/1803.07055.pdf) | [`ars`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/ars.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/00_getting_started.ipynb)\n| esmc | [merchant et al. (2021)](https://proceedings.mlr.press/v139/merchant21a.html) | [`esmc`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/esmc.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| persistent es | [vicol et al. (2021)](http://proceedings.mlr.press/v139/vicol21a.html) | [`persistentes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/persistent_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/04_lrate_pes.ipynb)\n| noise-reuse es | [li et al. (2023)](https://arxiv.org/pdf/2304.12180.pdf) | [`noisereusees`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/noise_reuse_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/04_lrate_pes.ipynb)\n| xnes | [wierstra et al. (2014)](https://www.jmlr.org/papers/volume15/wierstra14a/wierstra14a.pdf) | [`xnes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/xnes.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| snes | [wierstra et al. (2014)](https://www.jmlr.org/papers/volume15/wierstra14a/wierstra14a.pdf) | [`snes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/sxnes.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| cr-fm-nes | [nomura & ono (2022)](https://arxiv.org/abs/2201.11422) | [`cr_fm_nes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/cr_fm_nes.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| guided es | [maheswaranathan et al. (2018)](https://arxiv.org/abs/1806.10230) | [`guidedes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/guided_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| asebo | [choromanski et al. (2019)](https://arxiv.org/abs/1903.04268) | [`asebo`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/asebo.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| cma-es | [hansen & ostermeier (2001)](http://www.cmap.polytechnique.fr/~nikolaus.hansen/cmaartic.pdf) | [`cma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/cma_es.py) | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| sep-cma-es | [ros & hansen (2008)](https://hal.inria.fr/inria-00287367/document) | [`sep_cma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/sep_cma_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| bipop-cma-es | [hansen (2009)](https://hal.inria.fr/inria-00382093/document) | [`bipop_cma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/bipop_cma_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/06_restart_es.ipynb)\n| ipop-cma-es | [auer & hansen (2005)](http://www.cmap.polytechnique.fr/~nikolaus.hansen/cec2005ipopcmaes.pdf) | [`ipop_cma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/ipop_cma_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/06_restart_es.ipynb)\n| full-iamalgam | [bosman et al. (2013)](https://tinyurl.com/y9fcccx2) | [`full_iamalgam`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/full_iamalgam.py)  |[![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| independent-iamalgam | [bosman et al. (2013)](https://tinyurl.com/y9fcccx2) | [`indep_iamalgam`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/indep_iamalgam.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| ma-es | [bayer & sendhoff (2017)](https://www.honda-ri.de/pubs/pdf/3376.pdf) | [`ma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/ma_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| lm-ma-es | [loshchilov et al. (2017)](https://arxiv.org/pdf/1705.06693.pdf) | [`lm_ma_es`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/lm_ma_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| rmes | [li & zhang (2017)](https://ieeexplore.ieee.org/document/8080257) | [`rmes`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/rm_es.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| simple genetic | [such et al. (2017)](https://arxiv.org/abs/1712.06567) | [`simplega`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/simple_ga.py) | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| samr-ga | [clune et al. (2008)](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000187) | [`samr_ga`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/samr_ga.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| gesmr-ga | [kumar et al. (2022)](https://arxiv.org/abs/2204.04817) | [`gesmr_ga`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/gesmr_ga.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| mr15-ga | [rechenberg (1978)](https://link.springer.com/chapter/10.1007/978-3-642-81283-5_8) | [`mr15_ga`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/mr15_ga.py) | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| lga | [lange et al. (2023b)](https://arxiv.org/abs/2304.03995) | [`lga`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/lga.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| simple gaussian | [rechenberg (1978)](https://link.springer.com/chapter/10.1007/978-3-642-81283-5_8) | [`simplees`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/simple_es.py) | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| des | [lange et al. (2023a)](https://arxiv.org/abs/2211.11260) | [`des`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/des.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| les | [lange et al. (2023a)](https://arxiv.org/abs/2211.11260) | [`les`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/les.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| particle swarm optimization | [kennedy & eberhart (1995)](https://ieeexplore.ieee.org/document/488968) | [`pso`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/pso.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| differential evolution | [storn & price (1997)](https://www.metabolic-economics.de/pages/seminar_theoretische_biologie_2007/literatur/schaber/storn1997jglobopt11.pdf) | [`de`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/de.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| gld | [golovin et al. (2019)](https://arxiv.org/pdf/1911.06317.pdf) | [`gld`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/gld.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| simulated annealing | [rasdi rere et al. (2015)](https://www.sciencedirect.com/science/article/pii/s1877050915035759) | [`simanneal`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/sim_anneal.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n| population-based training | [jaderberg et al. (2017)](https://arxiv.org/abs/1711.09846) | [`pbt`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/pbt.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/05_quadratic_pbt.ipynb)\n| random search | [bergstra & bengio (2012)](https://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf) | [`randomsearch`](https://github.com/roberttlange/evosax/tree/main/evosax/strategies/random.py)  | [![colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb)\n\n\n\n\n## installation \u23f3\n\nthe latest `evosax` release can directly be installed from pypi:\n\n```\npip install evosax\n```\n\nif you want to get the most recent commit, please install directly from the repository:\n\n```\npip install git+https://github.com/roberttlange/evosax.git@main\n```\n\nin order to use jax on your accelerators, you can find more details in the [jax documentation](https://github.com/google/jax#installation).\n\n## examples \ud83d\udcd6\n* \ud83d\udcd3 [classic es tasks](https://github.com/roberttlange/evosax/blob/main/examples/01_classic_benchmark.ipynb): api introduction on rosenbrock function (cma-es, simple ga, etc.).\n* \ud83d\udcd3 [cartpole-control](https://github.com/roberttlange/evosax/blob/main/examples/02_mlp_control.ipynb): openes & pepg on the `cartpole-v1` gym task (mlp/lstm controller).\n* \ud83d\udcd3 [mnist-classifier](https://github.com/roberttlange/evosax/blob/main/examples/03_cnn_mnist.ipynb): openes on mnist with cnn network.\n* \ud83d\udcd3 [lratetune-pes](https://github.com/roberttlange/evosax/blob/main/examples/04_lrate_pes.ipynb): persistent/noise-reuse es on meta-learning problem as in [vicol et al. (2021)](http://proceedings.mlr.press/v139/vicol21a.html).\n* \ud83d\udcd3 [quadratic-pbt](https://github.com/roberttlange/evosax/blob/main/examples/05_quadratic_pbt.ipynb): pbt on toy quadratic problem as in [jaderberg et al. (2017)](https://arxiv.org/abs/1711.09846).\n* \ud83d\udcd3 [restart-wrappers](https://github.com/roberttlange/evosax/blob/main/examples/06_restart_es.ipynb): custom restart wrappers as e.g. used in (b)ipop-cma-es.\n* \ud83d\udcd3 [brax control](https://github.com/roberttlange/evosax/blob/main/examples/07_brax_control.ipynb): evolve tanh mlps on brax tasks using the `evojax` wrapper.\n* \ud83d\udcd3 [bbob visualizer](https://github.com/roberttlange/evosax/blob/main/examples/08_bbo_visualizer.ipynb): visualize evolution rollouts on 2d fitness landscapes.\n\n## key features \ud83d\udcb5\n\n- **strategy diversity**: `evosax` implements more than 30 classical and modern neuroevolution strategies. all of them follow the same simple `ask`/`eval` api and come with tailored tools such as the [clipup](https://arxiv.org/abs/2008.02387) optimizer, parameter reshaping into pytrees and fitness shaping (see below).\n\n- **vectorization/parallelization of `ask`/`tell` calls**: both `ask` and `tell` calls can leverage `jit`, `vmap`/`pmap`. this enables vectorized/parallel rollouts of different evolution strategies.\n\n```python\nfrom evosax.strategies.ars import ars, evoparams\n# e.g. vectorize over different initial perturbation stds\nstrategy = ars(popsize=100, num_dims=20)\nes_params = evoparams(sigma_init=jnp.array([0.1, 0.01, 0.001]), sigma_decay=0.999, ...)\n\n# specify how to map over es hyperparameters \nmap_dict = evoparams(sigma_init=0, sigma_decay=none, ...)\n\n# vmap-composed batch initialize, ask and tell functions \nbatch_init = jax.vmap(strategy.init, in_axes=(none, map_dict))\nbatch_ask = jax.vmap(strategy.ask, in_axes=(none, 0, map_dict))\nbatch_tell = jax.vmap(strategy.tell, in_axes=(0, 0, 0, map_dict))\n```\n\n- **scan through evolution rollouts**: you can also `lax.scan` through entire `init`, `ask`, `eval`, `tell` loops for fast compilation of es loops:\n\n```python\n@partial(jax.jit, static_argnums=(1,))\ndef run_es_loop(rng, num_steps):\n    \"\"\"run evolution ask-eval-tell loop.\"\"\"\n    es_params = strategy.default_params\n    state = strategy.initialize(rng, es_params)\n\n    def es_step(state_input, tmp):\n        \"\"\"helper es step to lax.scan through.\"\"\"\n        rng, state = state_input\n        rng, rng_iter = jax.random.split(rng)\n        x, state = strategy.ask(rng_iter, state, es_params)\n        fitness = ...\n        state = strategy.tell(y, fitness, state, es_params)\n        return [rng, state], fitness[jnp.argmin(fitness)]\n\n    _, scan_out = jax.lax.scan(es_step,\n                               [rng, state],\n                               [jnp.zeros(num_steps)])\n    return jnp.min(scan_out)\n```\n\n- **population parameter reshaping**: we provide a `paramaterreshaper` wrapper to reshape flat parameter vectors into pytrees. the wrapper is compatible with jax neural network libraries such as flax/haiku and makes it easier to afterwards evaluate network populations.\n\n```python\nfrom flax import linen as nn\nfrom evosax import parameterreshaper\n\nclass mlp(nn.module):\n    num_hidden_units: int\n    ...\n\n    @nn.compact\n    def __call__(self, obs):\n        ...\n        return ...\n\nnetwork = mlp(64)\nnet_params = network.init(rng, jnp.zeros(4,), rng)\n\n# initialize reshaper based on placeholder network shapes\nparam_reshaper = parameterreshaper(net_params)\n\n# get population candidates & reshape into stacked pytrees\nx = strategy.ask(...)\nx_shaped = param_reshaper.reshape(x)\n```\n\n\n- **flexible fitness shaping**: by default `evosax` assumes that the fitness objective is to be minimized. if you would like to maximize instead, perform rank centering, z-scoring or add weight regularization you can use the `fitnessshaper`: \n\n```python\nfrom evosax import fitnessshaper\n\n# instantiate jittable fitness shaper (e.g. for open es)\nfit_shaper = fitnessshaper(centered_rank=true,\n                           z_score=false,\n                           weight_decay=0.01,\n                           maximize=true)\n\n# shape the evaluated fitness scores\nfit_shaped = fit_shaper.apply(x, fitness) \n```\n<details>\n  <summary>additonal work-in-progress</summary>\n    **strategy restart wrappers**: *work-in-progress*. you can also choose from a set of different restart mechanisms, which will relaunch a strategy (with e.g. new population size) based on termination criteria. note: for all restart strategies which alter the population size the ask and tell methods will have to be re-compiled at the time of change. note that all strategies can also be executed without explicitly providing `es_params`. in this case the default parameters will be used.\n\n    ```python\n    from evosax import cma_es\n    from evosax.restarts import bipop_restarter\n\n    # define a termination criterion (kwargs - fitness, state, params)\n    def std_criterion(fitness, state, params):\n        \"\"\"restart strategy if fitness std across population is small.\"\"\"\n        return fitness.std() < 0.001\n\n    # instantiate base cma-es & wrap with bipop restarts\n    # pass strategy-specific kwargs separately (e.g. elite_ration or opt_name)\n    strategy = cma_es(num_dims, popsize, elite_ratio)\n    re_strategy = bipop_restarter(\n                    strategy,\n                    stop_criteria=[std_criterion],\n                    strategy_kwargs={\"elite_ratio\": elite_ratio}\n                )\n    state = re_strategy.initialize(rng)\n\n    # ask/tell loop - restarts are automatically handled \n    rng, rng_gen, rng_eval = jax.random.split(rng, 3)\n    x, state = re_strategy.ask(rng_gen, state)\n    fitness = ...  # your population evaluation fct \n    state = re_strategy.tell(x, fitness, state)\n    ```\n\n    - **batch strategy rollouts**: *work-in-progress*. we are currently also working on different ways of incorporating multiple subpopulations with different communication protocols.\n\n    ```python\n    from evosax.experimental.subpops import batchstrategy\n\n    # instantiates 5 cma-es subpops of 20 members\n    strategy = batchstrategy(\n            strategy_name=\"cma_es\",\n            num_dims=4096,\n            popsize=100,\n            num_subpops=5,\n            strategy_kwargs={\"elite_ratio\": 0.5},\n            communication=\"best_subpop\",\n        )\n\n    state = strategy.initialize(rng)\n    # ask for evaluation candidates of different subpopulation es\n    x, state = strategy.ask(rng_iter, state)\n    fitness = ...\n    state = strategy.tell(x, fitness, state)\n    ```\n\n    - **indirect encodings**: *work-in-progress*. es can struggle with high-dimensional search spaces (e.g. due to harder estimation of covariances). one potential way to alleviate this challenge, is to use indirect parameter encodings in a lower dimensional space. so far we provide jax-compatible encodings with random projections (gaussian/rademacher) and hypernetworks for mlps. they act as drop-in replacements for the `parameterreshaper`:\n\n    ```python\n    from evosax.experimental.decodings import randomdecoder, hyperdecoder\n\n    # for arbitrary network architectures / search spaces\n    num_encoding_dims = 6\n    param_reshaper = randomdecoder(num_encoding_dims, net_params)\n    x_shaped = param_reshaper.reshape(x)\n\n    # for mlp-based models we also support a hypernetwork en/decoding\n    reshaper = hyperdecoder(\n            net_params,\n            hypernet_config={\n                \"num_latent_units\": 3,  # latent units per module kernel/bias\n                \"num_hidden_units\": 2,  # hidden dimensionality of a_i^j embedding\n            },\n        )\n    x_shaped = param_reshaper.reshape(x)\n    ```\n</details>\n\n\n## resources & other great jax-es tools \ud83d\udcdd\n* \ud83d\udcfa [rob's mlc research jam talk](https://www.youtube.com/watch?v=wn6lq2bexla&t=51s): small motivation talk at the ml collective research jam.\n* \ud83d\udcdd [rob's 02/2021 blog](https://roberttlange.github.io/posts/2021/02/cma-es-jax/): tutorial on cma-es & leveraging jax's primitives.\n* \ud83d\udcbb [evojax](https://github.com/google/evojax): jax-es library by google brain with great rollout wrappers.\n* \ud83d\udcbb [qdax](https://github.com/adaptive-intelligent-robotics/qdax): quality-diversity algorithms in jax.\n\n## acknowledgements & citing `evosax` \u270f\ufe0f\n\nif you use `evosax` in your research, please cite the following [paper](https://arxiv.org/abs/2212.04180):\n\n```\n@article{evosax2022github,\n  author = {robert tjarko lange},\n  title = {evosax: jax-based evolution strategies},\n  journal={arxiv preprint arxiv:2212.04180},\n  year = {2022},\n}\n```\n\nwe acknowledge financial support by the [google trc](https://sites.research.google/trc/about/) and the deutsche\nforschungsgemeinschaft (dfg, german research foundation) under germany's excellence strategy - exc 2002/1 [\"science of intelligence\"](https://www.scienceofintelligence.de/) - project number 390523135.\n\n## development \ud83d\udc77\n\nyou can run the test suite via `python -m pytest -vv --all`. if you find a bug or are missing your favourite feature, feel free to create an issue and/or start [contributing](contributing.md) \ud83e\udd17.\n\n## disclaimer \u26a0\ufe0f\n\nthis repository contains an independent reimplementation of les and des based on the corresponding iclr 2023 publication [(lange et al., 2023)](https://arxiv.org/abs/2211.11260). it is unrelated to google or deepmind. the implementation has been tested to roughly reproduce the official results on a range of tasks.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "evosax",
  "package_url": "https://pypi.org/project/evosax/",
  "project_url": "https://pypi.org/project/evosax/",
  "project_urls": {
    "Download": "https://github.com/RobertTLange/evosax/archive/v0.1.5.tar.gz",
    "Homepage": "https://github.com/RobertTLange/evosax"
  },
  "release_url": "https://pypi.org/project/evosax/0.1.5/",
  "requires_dist": [
    "jax",
    "chex",
    "flax",
    "numpy",
    "pyyaml",
    "matplotlib",
    "pickle5 ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "jax-based evolution strategies",
  "version": "0.1.5",
  "releases": [],
  "developers": [
    "robert_tjarko_lange",
    "robertlange0@gmail.com"
  ],
  "kwds": "evosax evojax badge evosax2022github evoparams",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_evosax",
  "homepage": "https://github.com/roberttlange/evosax",
  "release_count": 15,
  "dependency_ids": [
    "pypi_chex",
    "pypi_flax",
    "pypi_jax",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pickle5",
    "pypi_pyyaml"
  ],
  "documentation_summary": "Evosax is a JAX-based library for implementing Evolution Strategies (ES), designed to simplify the process of neuroevolution and leverage the power of vectorization and high-throughput accelerators. It offers a straightforward API based on the classical ask, evaluate, tell cycle of ES, compatible with JAX's jit, vmap/pmap, and lax.scan for efficient scaling. The library includes a wide range of both classic and modern neuroevolution strategies, such as CMA-ES, Differential Evolution, OpenAI-ES, and more. Evosax enables easy integration with JAX, allowing for massive vectorization and parallelization to scale ES to preferred accelerators. It also features tools for population parameter reshaping into PyTrees, flexible fitness shaping, and strategy restart wrappers for enhanced functionality. The library is available for installation via PyPI or directly from the repository, with detailed documentation and examples provided for users to get started.",
  "embedding": [
    -0.03492336347699165,
    -0.009811599738895893,
    0.01145746186375618,
    -0.006385663524270058,
    -0.00850479956716299,
    0.0403483510017395,
    0.0011496313381940126,
    -0.014177020639181137,
    -0.025245973840355873,
    -0.03184355050325394,
    0.008448288775980473,
    -0.019496051594614983,
    -0.00838471483439207,
    0.019086351618170738,
    0.0045349509455263615,
    -0.010970060713589191,
    0.012050820514559746,
    -0.04125251621007919,
    -0.00642451411113143,
    -0.00034568406408652663,
    -0.0005394967156462371,
    -0.0018401164561510086,
    0.0035336592700332403,
    0.001547852298244834,
    -0.003634318243712187,
    0.015851138159632683,
    0.008737904019653797,
    -0.00783373974263668,
    -0.017278023064136505,
    0.0091334767639637,
    0.03235214576125145,
    0.0013315238757058978,
    -0.02530248463153839,
    -0.013915659859776497,
    -0.019467797130346298,
    -0.02301381714642048,
    0.002611835254356265,
    -0.004849289543926716,
    0.042156681418418884,
    -0.009274751879274845,
    0.01596415787935257,
    -0.003185767913237214,
    -0.007657145150005817,
    -0.014339487068355083,
    -0.03715552017092705,
    0.0003141177585348487,
    -0.023310497403144836,
    -0.02856595441699028,
    -6.390519411070272e-05,
    0.0159076489508152,
    0.03955720737576485,
    0.02678588032722473,
    -0.01975034736096859,
    0.036929477006196976,
    0.025034060701727867,
    -0.01580875553190708,
    0.0023946238216012716,
    0.002795493695884943,
    0.007643017452210188,
    0.008822670206427574,
    0.0076642087660729885,
    0.011076018214225769,
    -0.022208545356988907,
    0.016260838136076927,
    -0.008059781044721603,
    -0.011471590027213097,
    -0.017701849341392517,
    0.0034153410233557224,
    0.0020785192027688026,
    0.014777442440390587,
    0.045462533831596375,
    0.027393365278840065,
    -0.027591152116656303,
    -0.012947921641170979,
    0.014148765243589878,
    -0.01816806010901928,
    -0.01582288183271885,
    -0.0014180552680045366,
    -0.00032427196856588125,
    -0.00521307485178113,
    0.003980443812906742,
    -0.011316186748445034,
    -0.004923459608107805,
    0.024186406284570694,
    0.015059993602335453,
    0.011153719387948513,
    0.0012953219702467322,
    0.021982504054903984,
    -0.03014824166893959,
    -0.013477705419063568,
    0.03291724622249603,
    -0.006018346641212702,
    0.004036954138427973,
    0.01678355783224106,
    -0.03246516361832619,
    0.03492336347699165,
    -0.017913764342665672,
    -0.007381657138466835,
    -0.01486220769584179,
    -0.018521249294281006,
    -0.0019425413338467479,
    0.008236375637352467,
    -0.01888856664299965,
    -0.012834900990128517,
    -0.03732505068182945,
    -0.00922530610114336,
    -0.0071944668889045715,
    -0.0028837909922003746,
    0.017843125388026237,
    0.02167169749736786,
    -0.017857253551483154,
    0.025189464911818504,
    -0.006053665187209845,
    -0.04865536466240883,
    0.023691941052675247,
    -0.016218455508351326,
    0.043880242854356766,
    -0.005227202083915472,
    -0.024045130237936974,
    0.005569796077907085,
    -0.016119562089443207,
    0.005485030356794596,
    -0.0012070245575159788,
    0.004806906916201115,
    0.004167634062469006,
    -0.019199373200535774,
    -0.0426652729511261,
    -0.01303975097835064,
    -0.03379315510392189,
    -0.009027519263327122,
    0.03868129849433899,
    -0.012531157582998276,
    -0.000709469080902636,
    0.007946760393679142,
    -0.033143289387226105,
    0.00841297022998333,
    -0.0021897738333791494,
    -0.0015911179361864924,
    -0.018097421154379845,
    -0.021219614893198013,
    0.015257779508829117,
    0.012806645594537258,
    0.002203901531174779,
    0.01042614970356226,
    -0.02421466074883938,
    -0.0012564710341393948,
    0.02468087151646614,
    0.003454191843047738,
    0.004725673235952854,
    -0.004644440021365881,
    0.011895417235791683,
    -0.03591229394078255,
    0.0171084925532341,
    -0.012834900990128517,
    -0.004432526417076588,
    0.016161944717168808,
    -0.010652191005647182,
    0.030713345855474472,
    -0.004326569382101297,
    -0.0115775465965271,
    0.00906283874064684,
    0.026347925886511803,
    -0.02305619977414608,
    -0.022180290892720222,
    -0.025288356468081474,
    0.02674349769949913,
    0.028057361021637917,
    0.007586507126688957,
    -0.016048923134803772,
    -0.013364684768021107,
    -0.008723776787519455,
    0.0009730366291478276,
    -0.015992414206266403,
    0.007438167463988066,
    -0.014720931649208069,
    0.00924649741500616,
    0.009790408425033092,
    0.03243691101670265,
    0.00021036840917076916,
    0.011217293329536915,
    0.031560998409986496,
    0.04054613783955574,
    0.03517765924334526,
    0.014494890347123146,
    0.008815606124699116,
    0.008299949578940868,
    0.008822670206427574,
    -0.0026771752163767815,
    0.006141962483525276,
    -0.004930523224174976,
    0.01419114787131548,
    0.032521676272153854,
    -0.02712494134902954,
    -0.012453456409275532,
    -0.5669112801551819,
    -0.009352453984320164,
    -0.022265056148171425,
    -0.02492104098200798,
    0.007466422859579325,
    -0.024144023656845093,
    -0.006682342384010553,
    0.006855404935777187,
    -0.00028718708199448884,
    0.03950069472193718,
    -0.039189890027046204,
    -0.01409225445240736,
    -0.0058064330369234085,
    -0.023988619446754456,
    -0.012898474931716919,
    -0.026870645582675934,
    0.00512830913066864,
    -0.05026590824127197,
    0.044219307601451874,
    0.006816554348915815,
    -0.016133688390254974,
    0.01812567748129368,
    -0.0022197950165718794,
    0.007438167463988066,
    0.00963500514626503,
    0.02287254109978676,
    -0.007869058288633823,
    -0.01356247067451477,
    0.042354464530944824,
    0.0036731690634042025,
    -0.00291734398342669,
    0.013866214081645012,
    -0.00820105616003275,
    -0.01042614970356226,
    0.06413918733596802,
    -0.004757460672408342,
    -0.021120723336935043,
    0.06408267468214035,
    0.013018559664487839,
    0.01979272998869419,
    -0.01658577099442482,
    -0.0019337116973474622,
    -0.011634057387709618,
    0.007826675660908222,
    -0.0021950716618448496,
    0.008617820218205452,
    0.00841297022998333,
    -0.016953088343143463,
    -0.0015990647953003645,
    -0.020145921036601067,
    0.004817502573132515,
    -0.0028890888206660748,
    0.00516362814232707,
    -0.0065234070643782616,
    -0.0007858462631702423,
    0.016020668670535088,
    0.013534215278923512,
    -0.016077179461717606,
    0.005432052072137594,
    0.0047715879045426846,
    0.0014048105804249644,
    0.016811812296509743,
    -0.0018772013718262315,
    -0.02434181049466133,
    0.00462324870750308,
    0.04379547759890556,
    -0.01421233918517828,
    -0.0065163434483110905,
    -0.008992200717329979,
    -0.031984828412532806,
    0.0256415456533432,
    0.013788511976599693,
    0.0004640025144908577,
    0.012114394456148148,
    0.034386515617370605,
    0.016882451251149178,
    -0.003118661930784583,
    0.011054826900362968,
    -0.0023822621442377567,
    0.031900063157081604,
    0.015512076206505299,
    -0.005961836315691471,
    -0.01730627752840519,
    -0.0036113611422479153,
    0.03907686844468117,
    -0.011958991177380085,
    -0.02818450890481472,
    -0.008307013660669327,
    0.007254509255290031,
    -0.0074240402318537235,
    0.017758360132575035,
    0.0032987885642796755,
    0.003088640747591853,
    -0.054928008466959,
    0.026828262954950333,
    0.0019566689152270555,
    0.00454201502725482,
    0.005089458543807268,
    -0.010539170354604721,
    -0.03379315510392189,
    -0.0033959154970943928,
    0.010369638912379742,
    0.009967003017663956,
    0.010454404167830944,
    0.010991252027451992,
    0.01562509685754776,
    -0.016755303367972374,
    0.0067176613956689835,
    0.019354775547981262,
    -0.009458410553634167,
    -0.01989162340760231,
    -0.029780926182866096,
    0.0007231551571749151,
    -0.019778603687882423,
    0.00572873093187809,
    -0.03834223374724388,
    0.026489200070500374,
    0.017504064366221428,
    -0.0008503033313900232,
    -0.02099357545375824,
    0.014268849045038223,
    -0.03020475246012211,
    0.012029629200696945,
    0.012771327048540115,
    0.015158887021243572,
    0.007084978278726339,
    -0.02774655446410179,
    -0.0171508751809597,
    -0.04108298569917679,
    0.0010542701929807663,
    -0.020400216802954674,
    -0.013357620686292648,
    -0.003252873895689845,
    0.003078045090660453,
    0.03345409408211708,
    -0.014720931649208069,
    -0.000294471625238657,
    0.0034294684883207083,
    -0.004082868807017803,
    -0.009967003017663956,
    -0.0182669535279274,
    0.014226466417312622,
    0.007473486475646496,
    -0.028113871812820435,
    -0.03998103365302086,
    0.001309449435211718,
    0.00048695981968194246,
    0.0037826579064130783,
    0.005368478130549192,
    0.015215396881103516,
    0.012057884596288204,
    -0.00645983312278986,
    -0.020739277824759483,
    0.014346551150083542,
    -0.006028942298144102,
    -0.013166898861527443,
    -0.019001586362719536,
    -0.02387559972703457,
    -0.009995258413255215,
    -0.027195580303668976,
    0.00906283874064684,
    0.0036908285692334175,
    0.005725199356675148,
    -0.0009924620389938354,
    -0.03935942053794861,
    0.001562862889841199,
    -0.030600324273109436,
    0.015992414206266403,
    -0.013498896732926369,
    -0.03435825929045677,
    -0.006297366227954626,
    -0.04003754258155823,
    0.005795836914330721,
    0.021261999383568764,
    0.006774171721190214,
    -0.0017006066627800465,
    -0.00019966234685853124,
    -0.003634318243712187,
    0.007607698440551758,
    -0.016698792576789856,
    0.002611835254356265,
    0.011725885793566704,
    -0.02602299116551876,
    -0.011146655306220055,
    0.02299969084560871,
    -0.0012061416637152433,
    0.0012105564819648862,
    0.005025884136557579,
    -0.006809490732848644,
    0.005477966740727425,
    -0.01174001395702362,
    0.014593783766031265,
    -0.03743807226419449,
    0.026390308514237404,
    -0.002150923013687134,
    -0.017235640436410904,
    0.022688884288072586,
    0.03574276342988014,
    0.008229311555624008,
    0.02540137805044651,
    0.02780306525528431,
    0.013505960814654827,
    0.017913764342665672,
    -0.0005990974023006856,
    -0.0038073810283094645,
    -0.026037119328975677,
    0.02473738230764866,
    -0.040998220443725586,
    -0.013103324919939041,
    0.024186406284570694,
    0.021148977801203728,
    0.000853393750730902,
    -0.030515559017658234,
    -0.0026047714054584503,
    -0.006767107639461756,
    0.015709862112998962,
    0.017659466713666916,
    -0.013887405395507812,
    0.00012571332626976073,
    0.002943833125755191,
    0.006477492395788431,
    0.017998529598116875,
    0.023691941052675247,
    0.0030727472621947527,
    -0.016642281785607338,
    0.023225732147693634,
    0.0066187684424221516,
    0.020682768896222115,
    0.010087087750434875,
    -0.006074856501072645,
    0.005435584113001823,
    0.027774810791015625,
    0.006036005914211273,
    -0.018040912225842476,
    0.03729679435491562,
    -0.010482659563422203,
    0.04481266438961029,
    -0.010080023668706417,
    0.029498374089598656,
    -0.02583933249115944,
    0.004418398719280958,
    0.013498896732926369,
    0.006389195099473,
    0.0004030773416161537,
    0.017518190667033195,
    0.0003375165688339621,
    0.013477705419063568,
    0.015794627368450165,
    0.00026577498647384346,
    -0.0026171330828219652,
    -0.01792789064347744,
    0.008596628904342651,
    0.00972683448344469,
    0.02223680168390274,
    0.005064735189080238,
    -0.020301323384046555,
    -0.0045632063411176205,
    0.034386515617370605,
    0.029357098042964935,
    0.02295730821788311,
    0.015173014253377914,
    0.0027495790272951126,
    0.018252825364470482,
    0.025048188865184784,
    0.004086400847882032,
    -0.02367781288921833,
    -0.02535899542272091,
    -0.01600654050707817,
    -0.00017847098933998495,
    -0.01864839717745781,
    -0.02814212627708912,
    -0.03950069472193718,
    -0.019962262362241745,
    -0.021742336452007294,
    0.03859653323888779,
    0.0010798764415085316,
    0.019467797130346298,
    0.016557516530156136,
    0.0007032883004285395,
    0.004559674300253391,
    -0.009069901891052723,
    -0.044360581785440445,
    0.017461681738495827,
    0.0017482872353866696,
    0.0034118089824914932,
    -0.01630322076380253,
    -0.0015584479551762342,
    -0.013513023965060711,
    0.003461255459114909,
    0.03483859822154045,
    0.012255670502781868,
    0.026630476117134094,
    -0.0231550931930542,
    -0.009161731228232384,
    -0.030374282971024513,
    0.026192521676421165,
    0.038087937980890274,
    -0.012622986920177937,
    0.02181297354400158,
    -0.01342119462788105,
    0.023183347657322884,
    0.002052030060440302,
    -0.018945075571537018,
    -0.0038073810283094645,
    0.04820328205823898,
    -0.012524094432592392,
    -0.021247871220111847,
    -0.02966790460050106,
    -0.01652926206588745,
    -0.032097846269607544,
    0.0013588960282504559,
    -0.008377651683986187,
    -0.011245548725128174,
    -0.021925995126366615,
    0.03048730455338955,
    0.008518926799297333,
    -0.03068508952856064,
    -0.01287021953612566,
    0.034386515617370605,
    0.011450398713350296,
    0.0053084357641637325,
    -0.024327682331204414,
    -0.01308213360607624,
    -0.0034206388518214226,
    0.03153274580836296,
    0.02852357178926468,
    -0.014494890347123146,
    0.0037155519239604473,
    -0.01748993620276451,
    -0.00982572790235281,
    -0.0010348447831347585,
    0.013477705419063568,
    -0.002818451030179858,
    -0.01610543392598629,
    -0.027619406580924988,
    0.015370800159871578,
    -0.015639225021004677,
    0.028212765231728554,
    0.004545547068119049,
    0.02808561734855175,
    -0.030176497995853424,
    -0.0037826579064130783,
    0.012750135734677315,
    0.0028113871812820435,
    0.002703664358705282,
    0.028933271765708923,
    -0.001543437479995191,
    0.006166685838252306,
    0.0402635857462883,
    0.006827150005847216,
    -0.013717873953282833,
    0.007572379428893328,
    -0.005961836315691471,
    -0.018055038526654243,
    -0.013859149999916553,
    0.020838171243667603,
    0.020400216802954674,
    0.023861471563577652,
    -0.00040815444663167,
    -0.0012502903118729591,
    0.02099357545375824,
    0.030063476413488388,
    -0.012488774955272675,
    0.01229805313050747,
    0.010397894307971,
    0.0164021123200655,
    0.009324198588728905,
    0.013626044616103172,
    0.008921562694013119,
    -0.03240865468978882,
    0.0020096474327147007,
    0.02181297354400158,
    -0.010143597610294819,
    0.006343280430883169,
    0.02205314300954342,
    -0.015059993602335453,
    -0.030176497995853424,
    -0.0044961003586649895,
    0.05077449977397919,
    0.015497948043048382,
    0.016260838136076927,
    -0.01409225445240736,
    0.005449711345136166,
    -0.019340649247169495,
    -0.004644440021365881,
    -0.007975015789270401,
    0.004450185690075159,
    -0.005732262972742319,
    0.008165737614035606,
    -0.0037155519239604473,
    -0.025726310908794403,
    0.015215396881103516,
    -0.015950031578540802,
    -0.0038992103654891253,
    -0.017179129645228386,
    -0.01620432734489441,
    -0.02972441539168358,
    0.0016361495945602655,
    0.04317386448383331,
    0.018379973247647285,
    0.0328889898955822,
    0.011132528074085712,
    0.010228363797068596,
    0.0275063868612051,
    0.006608172785490751,
    -0.023183347657322884,
    -0.006209068465977907,
    -0.04602763429284096,
    0.004655035678297281,
    0.014819825068116188,
    0.015229524113237858,
    -0.023508282378315926,
    -0.008038589730858803,
    0.008921562694013119,
    0.031702276319265366,
    -0.003471851348876953,
    0.017659466713666916,
    -0.016557516530156136,
    -0.011683503165841103,
    0.014290041290223598,
    0.032662950456142426,
    0.039811503142118454,
    0.024991678074002266,
    -0.031363215297460556,
    0.0011672907276079059,
    -0.025175336748361588,
    -0.002979152137413621,
    0.008299949578940868,
    0.00010595680214464664,
    -0.002859067637473345,
    0.026051245629787445,
    0.011224357411265373,
    -0.022265056148171425,
    -0.02299969084560871,
    -0.0024829211179167032,
    0.011867161840200424,
    -0.010503850877285004,
    -0.016981342807412148,
    -0.0010048237163573503,
    -0.007381657138466835,
    -0.007748974021524191,
    0.0311089176684618,
    -0.02415815182030201,
    0.009811599738895893,
    0.018719036132097244,
    -0.04065915569663048,
    0.007628889754414558,
    0.012658306397497654,
    -0.00514243682846427,
    0.026658732444047928,
    0.0021209020633250475,
    0.0041888258419930935,
    -0.01678355783224106,
    0.03619484230875969,
    0.0038321043830364943,
    0.027591152116656303,
    -0.018761418759822845,
    -0.025825204327702522,
    0.008787350729107857,
    0.018945075571537018,
    -0.011690567247569561,
    0.001373906503431499,
    -0.0005377307534217834,
    -0.018238697201013565,
    -0.021982504054903984,
    0.0006114590796642005,
    -0.007593570742756128,
    -0.01744755357503891,
    0.01426178589463234,
    -0.030939387157559395,
    -0.013943915255367756,
    0.013265791349112988,
    -0.020555619150400162,
    0.0008379417122341692,
    -0.03647739440202713,
    0.0015045866603031754,
    0.01692483387887478,
    -0.010263682343065739,
    -0.03192831575870514,
    -0.008511863648891449,
    -0.003938061185181141,
    0.02003289945423603,
    0.04260876402258873,
    0.0401788204908371,
    0.049587782472372055,
    -0.007840803824365139,
    0.012976176105439663,
    0.003567212261259556,
    0.006996680982410908,
    -0.019496051594614983,
    -0.01229098904877901,
    0.012509966269135475,
    0.0054037971422076225,
    -0.0012317477958276868,
    0.016458623111248016,
    0.015497948043048382,
    -0.012573540210723877,
    -0.05574740469455719,
    -0.014410125091671944,
    0.010553297586739063,
    -0.013936851173639297,
    -0.022929051890969276,
    -0.019284138455986977,
    -0.04582984745502472,
    -0.017659466713666916,
    0.021459784358739853,
    -0.0071944668889045715,
    0.01984924077987671,
    -0.0379466637969017,
    0.01562509685754776,
    0.034782085567712784,
    0.004835162311792374,
    0.027887830510735512,
    0.021148977801203728,
    -0.004135847091674805,
    0.001535490620881319,
    0.02622077614068985,
    0.006431577727198601,
    -0.02660222165286541,
    -0.022448714822530746,
    -0.017475808039307594,
    -0.02521771937608719,
    -0.010171853005886078,
    0.02051323652267456,
    0.0050400118343532085,
    0.030063476413488388,
    0.02189773879945278,
    0.03735330328345299,
    -0.01349183265119791,
    0.01821044273674488,
    -0.021841229870915413,
    -0.009366581216454506,
    0.016938960179686546,
    -0.005594519432634115,
    -0.007911440916359425,
    -0.010193044319748878,
    -0.03325630724430084,
    -0.03523416817188263,
    0.0019319456769153476,
    0.010849976912140846,
    -0.012093203142285347,
    0.009423092007637024,
    -0.05727318301796913,
    0.015497948043048382,
    0.01720738410949707,
    0.020866425707936287,
    0.045321255922317505,
    -0.014664421789348125,
    0.016797685995697975,
    0.026432691141963005,
    -0.006307961884886026,
    0.005043543875217438,
    -0.03028951771557331,
    0.01566747948527336,
    0.007720719091594219,
    0.01490459032356739,
    0.02119136042892933,
    -0.034782085567712784,
    -0.032323889434337616,
    0.004386611748486757,
    -0.02257586270570755,
    -0.052837125957012177,
    -0.001336821704171598,
    0.04342816025018692,
    -0.005562731996178627,
    0.034132219851017,
    -0.023409388959407806,
    0.004019294865429401,
    -0.007586507126688957,
    0.0268423892557621,
    -0.017136747017502785,
    0.00901339203119278,
    0.016953088343143463,
    -0.022971434518694878,
    -0.009458410553634167,
    0.031984828412532806,
    0.025867586955428123,
    0.00827169418334961,
    0.023706069216132164,
    0.002357538789510727,
    0.015399055555462837,
    -0.019001586362719536,
    -0.0033447030000388622,
    0.002899684477597475,
    0.014537272974848747,
    0.02569805644452572,
    0.011033634655177593,
    -0.000693134090397507,
    0.026249032467603683,
    -0.02852357178926468,
    -0.007748974021524191,
    -0.009853982366621494,
    0.007918504998087883,
    0.038172703236341476,
    -0.024327682331204414,
    -0.0048987362533807755,
    -0.016670536249876022,
    -0.017179129645228386,
    -0.005372009705752134,
    -0.008639011532068253,
    -0.016260838136076927,
    -0.02348002791404724,
    0.008116290904581547,
    -0.005251925438642502,
    0.020555619150400162,
    -0.005311967805027962,
    -0.011994309723377228,
    -0.008603692054748535,
    -0.01152809988707304,
    0.02065451256930828,
    -0.028452932834625244,
    0.012156777083873749,
    0.02189773879945278,
    -0.04427581652998924,
    0.013965106569230556,
    0.005947708617895842,
    -0.008080972358584404,
    0.020908808335661888,
    0.025175336748361588,
    0.0010145363630726933,
    -0.011153719387948513,
    0.018055038526654243,
    0.022406332194805145,
    0.025570908561348915,
    0.016260838136076927,
    0.008999264799058437,
    -0.016091305762529373,
    0.0011646418133750558,
    -0.00836352352052927,
    0.005389669444411993,
    -0.004178229719400406,
    0.021205488592386246,
    -0.005975963547825813,
    -0.01969383843243122,
    -0.008935690857470036,
    0.004411335103213787,
    0.01792789064347744,
    0.001247641397640109,
    0.02013179287314415,
    0.007215658202767372,
    0.014749187044799328,
    -0.004033422097563744,
    -0.013272855430841446,
    0.027068430557847023,
    -0.007975015789270401,
    -0.024412447586655617,
    0.01164818461984396,
    -0.02133263647556305,
    0.027548769488930702,
    -0.006332684773951769,
    0.01878967322409153,
    -0.008949818089604378,
    -0.04000928997993469,
    -0.01970796473324299,
    -0.027675917372107506,
    -0.000549209420569241,
    0.020075282081961632,
    0.01421233918517828,
    -0.007416976150125265,
    -0.013407067395746708,
    -0.02143152989447117,
    0.025712184607982635,
    0.01686832308769226,
    -0.010461468249559402,
    -0.014169956557452679,
    0.014438380487263203,
    -0.0183517187833786,
    0.01624670997262001,
    -0.024186406284570694,
    0.012467583641409874,
    -0.008794414810836315,
    -0.0012608859688043594,
    -0.02592409774661064,
    -0.013809703290462494,
    0.010970060713589191,
    0.01662815362215042,
    0.03221086785197258,
    -0.037551090121269226,
    -0.010002322494983673,
    -0.007784293033182621,
    -0.04082868993282318,
    -0.0006737086805514991,
    -0.04221319034695625,
    0.03178704157471657,
    0.01720738410949707,
    0.004104060120880604,
    0.006809490732848644,
    0.026390308514237404,
    0.0014101084088906646,
    -0.008681394159793854,
    -0.01970796473324299,
    0.01210733037441969,
    -0.006830682046711445,
    -0.000532874430064112,
    0.0025376654230058193,
    -0.009896364994347095,
    -0.04145030304789543,
    -0.006544598378241062,
    0.018803801387548447,
    0.03139146789908409,
    -0.002926173619925976,
    -0.009380709379911423,
    0.004923459608107805,
    0.007402848452329636,
    0.007685400079935789,
    0.006813022308051586,
    0.009910493157804012,
    0.009818663820624352,
    0.0311089176684618,
    -0.04981382563710213,
    -0.003498340491205454,
    0.029159313067793846,
    -0.040376607328653336,
    -0.019156990572810173,
    0.010871168226003647,
    0.006544598378241062,
    -0.015978286042809486,
    -0.00708144623786211,
    0.0017889040755107999,
    -0.015286034904420376,
    -0.0026047714054584503,
    0.003125725779682398,
    0.014579656533896923,
    0.011831843294203281,
    0.013286982662975788,
    0.02233569324016571,
    0.00443605799227953,
    0.005343754775822163,
    -0.018775545060634613,
    0.0051000542007386684,
    -0.03921814635396004,
    0.003003875259310007,
    0.02032957784831524,
    -0.03611007705330849,
    -0.011323250830173492,
    -0.0067918309941887856,
    0.025034060701727867,
    0.020456727594137192,
    0.011174910701811314,
    -0.00715208426117897,
    -0.00958555843681097,
    -0.019015714526176453,
    -0.014297104440629482,
    0.0018595418659970164,
    -0.011210230179131031,
    -0.010009385645389557,
    0.012396945618093014,
    0.00022692415222991258,
    0.012015501037240028,
    -0.0143324239179492,
    0.00906283874064684,
    -0.013103324919939041,
    0.012156777083873749,
    -0.004425462335348129,
    0.005506221670657396,
    -0.015257779508829117,
    -0.011556355282664299,
    -0.025005806237459183,
    -0.03091113083064556,
    0.01490459032356739,
    0.17710326611995697,
    0.007074382621794939,
    -0.008907435461878777,
    0.03449953347444534,
    0.01758882962167263,
    0.021869484335184097,
    0.005700476001948118,
    0.026107756420969963,
    -0.02285841479897499,
    0.0050682672299444675,
    -0.008250502869486809,
    -0.0030921727884560823,
    0.009069901891052723,
    0.0024564319755882025,
    0.031363215297460556,
    -0.006223196163773537,
    -0.006714129354804754,
    -0.030600324273109436,
    -0.004926991183310747,
    0.013915659859776497,
    0.034669067710638046,
    0.007960887625813484,
    -0.005266053136438131,
    -0.011252612806856632,
    0.024045130237936974,
    -0.012276861816644669,
    -0.006664683111011982,
    -0.01356247067451477,
    -0.016133688390254974,
    -0.01486220769584179,
    -0.01864839717745781,
    0.041958894580602646,
    0.0002693068818189204,
    0.0013977468479424715,
    -0.028537698090076447,
    -0.0026030053850263357,
    0.002608303213492036,
    0.01246052049100399,
    2.063950159936212e-05,
    0.00822224747389555,
    0.009147603996098042,
    -0.031702276319265366,
    -0.04145030304789543,
    -0.008165737614035606,
    -0.014565528370440006,
    -0.020075282081961632,
    -0.017560573294758797,
    -0.013456514105200768,
    0.006830682046711445,
    -0.010058832354843616,
    -0.010108279064297676,
    0.0005562732112593949,
    -0.013089196756482124,
    0.027054304257035255,
    -0.010072960518300533,
    0.008978073485195637,
    0.010397894307971,
    -0.005085926502943039,
    0.017080236226320267,
    0.005061203148216009,
    -0.019213499501347542,
    0.023140965029597282,
    0.0009668558486737311,
    -0.019905751571059227,
    -0.025288356468081474,
    0.0010392596013844013,
    -0.03687296807765961,
    0.0016855961875990033,
    0.0055768596939742565,
    0.009938748553395271,
    -0.017701849341392517,
    -0.032662950456142426,
    -0.0020184770692139864,
    -0.019863368943333626,
    -0.014523145742714405,
    -0.03130670264363289,
    0.018606014549732208,
    0.0171084925532341,
    0.03464081138372421,
    0.02521771937608719,
    -0.009733898565173149,
    0.023974493145942688,
    -0.0035937016364187002,
    0.03370838984847069,
    0.003297022543847561,
    -0.02766178920865059,
    0.03868129849433899,
    -0.010588616132736206,
    -0.01672704704105854,
    -0.003010939108207822,
    -0.012234479188919067,
    -0.03588403761386871,
    0.008610756136476994,
    -0.021064212545752525,
    0.01720738410949707,
    0.0009076966089196503,
    -0.004443122074007988,
    0.02353653870522976,
    -0.023903854191303253,
    0.00015231290308292955,
    -0.03868129849433899,
    0.04616891220211983,
    -0.008285822346806526,
    -0.015950031578540802,
    0.007897313684225082,
    0.001910754363052547,
    -0.013809703290462494,
    -0.005357882473617792,
    0.0015981817850843072,
    -0.022222673520445824,
    -0.029893945902585983,
    -0.00850479956716299,
    -0.002417581155896187,
    -0.011817715130746365,
    0.008003270253539085,
    -0.0068907239474356174,
    -0.0007677453104406595,
    -6.070441668271087e-05,
    0.03551672026515007,
    -0.00991755723953247,
    -0.007010808680206537,
    -0.02209552563726902,
    -0.007579443510621786,
    0.005463839042931795,
    -0.020795788615942,
    -0.008843861520290375,
    -0.05238504335284233,
    0.007890249602496624,
    0.007452295161783695,
    0.019354775547981262,
    0.009486665949225426,
    0.009811599738895893,
    0.014494890347123146,
    -0.0006838628905825317,
    -0.005891198292374611,
    -0.02766178920865059,
    0.003118661930784583,
    -0.02449721284210682,
    -0.02411576919257641,
    0.00515303248539567,
    -0.01726389490067959,
    0.004135847091674805,
    0.01174001395702362,
    0.015497948043048382,
    0.025175336748361588,
    -0.01354127936065197,
    0.001610543462447822,
    0.04331514239311218,
    -0.011238484643399715,
    -0.011174910701811314,
    -0.0343017503619194,
    0.016797685995697975,
    0.013378812000155449,
    -0.0023186879698187113,
    0.02391798235476017,
    -0.02938535250723362,
    -0.008716712705790997,
    -0.009020456112921238,
    0.03192831575870514,
    -0.019962262362241745,
    -0.016331475228071213,
    0.004930523224174976,
    0.011655248701572418,
    0.00015330624592024833,
    -0.016373857855796814,
    -0.01975034736096859,
    -0.17823347449302673,
    0.009253560565412045,
    0.010602744296193123,
    -0.03681645542383194,
    0.017193257808685303,
    -0.007190934848040342,
    0.029639650136232376,
    0.013046814128756523,
    -0.010390830226242542,
    0.003106300253421068,
    0.02143152989447117,
    0.018719036132097244,
    -0.04331514239311218,
    -0.017857253551483154,
    -0.01562509685754776,
    -0.012785454280674458,
    -0.010941806249320507,
    0.010454404167830944,
    0.01893094927072525,
    0.021685825660824776,
    -0.007572379428893328,
    -0.04978556931018829,
    0.017179129645228386,
    0.015639225021004677,
    0.007572379428893328,
    0.0067918309941887856,
    0.006406854838132858,
    0.0047645242884755135,
    0.004598525352776051,
    -0.03229563310742378,
    -0.02602299116551876,
    -0.002655983902513981,
    -0.009069901891052723,
    -0.0274640042334795,
    0.0037755940575152636,
    0.00031566296820528805,
    0.0004487711994443089,
    -0.003754402743652463,
    -0.024765636771917343,
    0.029300587251782417,
    0.020018771290779114,
    -0.00019944160885643214,
    -0.0036837649531662464,
    -0.03308677673339844,
    -0.01545556541532278,
    -0.011111336760222912,
    0.0025200059171766043,
    -0.008610756136476994,
    -0.004086400847882032,
    -0.03283248096704483,
    0.03020475246012211,
    -0.018719036132097244,
    0.008130419068038464,
    0.010842912830412388,
    0.027252089232206345,
    0.0033411711920052767,
    0.0065551940351724625,
    0.01845061220228672,
    0.045179981738328934,
    -0.003567212261259556,
    -0.0012891411315649748,
    -0.01792789064347744,
    0.032097846269607544,
    0.0026542178820818663,
    -0.010546233505010605,
    -0.015300162136554718,
    -0.03667518123984337,
    0.0367034375667572,
    -0.025415504351258278,
    0.026828262954950333,
    0.031221937388181686,
    0.05328920856118202,
    -0.007332210894674063,
    -0.009324198588728905,
    0.013943915255367756,
    -0.004686822649091482,
    -0.013760256581008434,
    0.024624360725283623,
    0.014049871824681759,
    -0.028961526229977608,
    -0.031363215297460556,
    0.043597690761089325,
    -0.015130631625652313,
    -0.002064391737803817,
    0.005880602635443211,
    -0.0016282028518617153,
    0.024129895493388176,
    -0.014085191302001476,
    -0.002173880347982049,
    0.005961836315691471,
    0.01442425325512886,
    -0.009931684471666813,
    -0.0018295207992196083,
    0.0021332637406885624,
    0.020668640732765198,
    0.04176110774278641,
    0.0007792239775881171,
    0.015441438183188438,
    0.011570482514798641,
    -0.02065451256930828,
    0.011181974783539772,
    0.004633844364434481,
    -0.041619833558797836,
    -0.013004431501030922,
    0.02056974731385708,
    0.0002953545772470534,
    -0.03133495897054672,
    0.009868110530078411,
    0.03449953347444534,
    -0.005590987391769886,
    -0.027350982651114464,
    0.005054139532148838,
    0.016020668670535088,
    0.007558251731097698,
    -0.0017527021700516343,
    0.038031429052352905,
    -0.0012061416637152433,
    -0.01176826935261488,
    0.03365188091993332,
    0.007431103847920895,
    0.028509443625807762,
    -0.010574488900601864,
    -0.0232398584485054,
    -0.0024140491150319576,
    0.003902742173522711,
    -0.026432691141963005,
    -0.11177736520767212,
    -0.016373857855796814,
    0.006473960820585489,
    0.009119348600506783,
    0.001779191312380135,
    0.02275952138006687,
    -0.02574043907225132,
    0.027591152116656303,
    -0.03998103365302086,
    0.030374282971024513,
    -0.03068508952856064,
    -0.002136795548722148,
    -0.0066187684424221516,
    0.00776310171931982,
    0.011796523816883564,
    -0.0010480893542990088,
    -0.019467797130346298,
    0.00030219764448702335,
    -0.023423517122864723,
    0.023564793169498444,
    0.0011549291666597128,
    -0.0072898282669484615,
    -0.004330101422965527,
    0.00889330729842186,
    -0.010609807446599007,
    0.010807594284415245,
    -0.02381908893585205,
    0.019340649247169495,
    0.015794627368450165,
    0.02013179287314415,
    0.011980182491242886,
    -0.011860097758471966,
    0.01840822771191597,
    -0.0005222787149250507,
    0.014720931649208069,
    -0.003138087224215269,
    -0.006897788029164076,
    -0.04241097718477249,
    0.02353653870522976,
    -0.01720738410949707,
    0.0013986298581585288,
    -0.01361191738396883,
    0.010016449727118015,
    -0.019665582105517387,
    -0.01442425325512886,
    0.0046303123235702515,
    -0.009119348600506783,
    0.027407493442296982,
    0.01287021953612566,
    -0.03057206980884075,
    -0.026573965325951576,
    -0.018224570900201797,
    -0.019354775547981262,
    -0.015596841461956501,
    0.018309336155653,
    -0.031024152413010597,
    -0.022321566939353943,
    0.010885295458137989,
    -0.016854194924235344,
    -0.023508282378315926,
    0.007480550091713667,
    0.01087823137640953,
    0.006025410257279873,
    -0.017942018806934357,
    -0.006456301081925631,
    -0.008525990881025791,
    -0.0008043887210078537,
    -0.004979969933629036,
    0.011980182491242886,
    -0.04145030304789543,
    -0.01960907317698002,
    0.031278450042009354,
    -0.01797027327120304,
    0.01686832308769226,
    -0.011259675957262516,
    -0.004319505766034126,
    -0.003095704596489668,
    -0.0006211717845872045,
    0.005400265101343393,
    0.004969374276697636,
    -0.03057206980884075,
    -0.0025058784522116184,
    -0.006961361970752478,
    -0.025669801980257034,
    0.0038073810283094645,
    0.01740517094731331,
    -0.009020456112921238,
    0.006731789093464613,
    -0.011902481317520142,
    -0.06939464062452316,
    0.0034259366802871227,
    0.0010171852773055434,
    0.028071489185094833,
    -0.01836584508419037,
    -0.021685825660824776,
    -0.01090648677200079,
    -0.004326569382101297,
    0.006265578791499138,
    -0.011951927095651627,
    -0.0011090144980698824,
    -0.03828572481870651,
    -0.00961381383240223,
    -0.07363291084766388,
    0.015851138159632683,
    0.004976437892764807,
    -0.02507644332945347,
    0.007565315812826157,
    -0.032239124178886414,
    0.003736743237823248,
    0.0011275570141151547,
    0.012495839037001133,
    0.001395980827510357,
    -0.036025311797857285,
    0.0012379286345094442,
    -0.0005315499729476869,
    -0.005439115688204765,
    -0.005463839042931795,
    0.004845757968723774,
    0.019778603687882423,
    -0.03599705919623375,
    0.03283248096704483,
    0.009401900693774223,
    -0.0030550877563655376,
    -0.0016114263562485576,
    0.05877070501446724,
    -0.012573540210723877,
    0.005439115688204765,
    -0.03322805464267731,
    -0.00772778270766139,
    0.02147391252219677,
    -0.027873702347278595,
    -0.006537534762173891,
    0.0017315107397735119,
    -0.012347499839961529,
    0.012764262966811657,
    0.026913028210401535,
    0.013463578186929226,
    0.0066576190292835236,
    0.02473738230764866,
    0.004421930760145187,
    -0.009027519263327122,
    0.024313554167747498,
    -0.036307863891124725,
    -0.03930291160941124,
    0.020541492849588394,
    -0.010864104144275188,
    -0.01356247067451477,
    0.014106382615864277,
    0.006018346641212702,
    0.020809916779398918,
    0.01927001029253006,
    0.010885295458137989,
    0.042580507695674896,
    0.006901319604367018,
    -0.014480763114988804,
    -0.029159313067793846,
    0.010101214982569218,
    -0.012898474931716919,
    0.020004644989967346,
    -0.0021332637406885624,
    -0.005569796077907085,
    -0.0050682672299444675,
    0.040772177278995514,
    0.048570599406957626,
    0.02425704337656498,
    -0.0030762790702283382,
    -0.008815606124699116,
    -0.03034602850675583,
    -0.03342583775520325,
    0.001976094441488385,
    -0.025768695399165154,
    -0.022406332194805145,
    -0.01552620343863964,
    -0.010539170354604721,
    0.023042073473334312,
    0.01493284571915865,
    0.016910705715417862,
    -0.01692483387887478,
    -0.002698366530239582,
    -0.027916084975004196,
    -0.024271171540021896,
    0.027096686884760857,
    0.011408016085624695,
    -0.016614027321338654,
    -0.009691515937447548,
    0.034443024545907974,
    0.028269274160265923,
    0.01672704704105854,
    -0.039133381098508835,
    -0.008928626775741577,
    -0.023268114775419235,
    0.019736221060156822,
    -0.011492781341075897,
    0.007388721220195293,
    -0.013534215278923512,
    0.0069578299298882484,
    0.0048316302709281445,
    0.03028951771557331,
    -0.0025235379580408335,
    -0.003655509790405631,
    0.019383031874895096,
    0.018478866666555405,
    0.005937112960964441,
    0.0011319718323647976,
    0.009670324623584747,
    -0.029583139345049858,
    0.004044018220156431,
    -0.02175646275281906,
    0.0025058784522116184,
    -0.007067318540066481,
    0.008441225625574589,
    0.016995470970869064,
    0.007173275575041771,
    0.0038427000399678946,
    -0.03240865468978882,
    0.024087512865662575,
    -3.824378291028552e-05,
    0.017419299110770226,
    0.017800742760300636,
    -0.009861046448349953,
    -0.011181974783539772,
    0.023663686588406563,
    0.021827101707458496,
    0.004919927567243576,
    0.039952777326107025,
    0.007416976150125265,
    -0.004958778619766235,
    0.009839855134487152,
    0.00949372909963131,
    -0.009599686600267887,
    0.008730840869247913,
    0.002392857801169157,
    0.00025672451010905206,
    0.0069189793430268764,
    0.0012829602928832173,
    -0.01541318278759718,
    -0.00924649741500616,
    -0.007367529906332493,
    0.034103963524103165,
    0.0037614665925502777,
    -0.027280345559120178,
    0.10482659935951233,
    0.010680445469915867,
    -0.0012070245575159788,
    0.007388721220195293,
    -0.025274230167269707,
    0.04147855564951897,
    -0.0024581977631896734,
    0.02305619977414608,
    -0.006406854838132858,
    -0.029131056740880013,
    -0.007734846789389849,
    -0.011683503165841103,
    -0.007487614173442125,
    -0.03896384686231613,
    0.004425462335348129,
    0.02846706099808216,
    -0.00975508987903595,
    0.028890889137983322,
    -0.00046223655226640403,
    0.0026877708733081818,
    0.021021829918026924,
    0.01118903886526823,
    -0.010934742167592049,
    -0.007508805487304926,
    -0.025895843282341957,
    0.011076018214225769,
    0.038511764258146286,
    0.04294782504439354,
    0.0020220091100782156,
    -0.04040485993027687,
    0.0006626715185120702,
    -0.012072011828422546,
    -0.02924407832324505,
    -0.012785454280674458,
    -0.016317347064614296,
    0.01816806010901928,
    -0.007311019580811262,
    -0.01672704704105854,
    0.026107756420969963,
    0.00583468796685338,
    -0.019962262362241745,
    -0.012615923769772053,
    -0.0005408211727626622,
    -0.032239124178886414,
    0.01296911295503378,
    -0.014148765243589878,
    -0.006163154263049364,
    0.011563419364392757,
    -0.07617587596178055
  ]
}
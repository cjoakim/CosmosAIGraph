{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# python db-api and sqlalchemy dialect for pinot\n\nthis module allows accessing pinot via its [sql api](https://docs.pinot.apache.org/users/user-guide-query/pinot-query-language).\n\ncurrent supported pinot version: 0.9.3.\n\n## usage\n\n### using the db api to query pinot broker directly:\n\n```python\nfrom pinotdb import connect\n\n# this assumes 8000 is the broker port\nconn = connect(host='localhost', port=8000, path='/query/sql', scheme='http')\ncurs = conn.cursor()\ncurs.execute(\"\"\"\n    select place,\n           cast(regexp_extract(place, '(.*),', 1) as float) as lat,\n \u00a0 \u00a0 \u00a0     cast(regexp_extract(place, ',(.*)', 1) as float) as lon\n      from places\n     limit 10\n\"\"\")\nfor row in curs:\n    print(row)\n```\n\nfor https:\n\n```python\nfrom pinotdb import connect\n\n# this assumes that 443 is the broker secure https port\nconn = connect(host='localhost', port=443, path='/query/sql', scheme='https')\ncurs = conn.cursor()\ncurs.execute(\"\"\"\n    select place,\n           cast(regexp_extract(place, '(.*),', 1) as float) as lat,\n \u00a0 \u00a0 \u00a0     cast(regexp_extract(place, ',(.*)', 1) as float) as lon\n      from places\n     limit 10\n\"\"\")\nfor row in curs:\n    print(row)\n```\n\npinot also supports basic auth, e.g.\n\n```python\nconn = connect(host=\"localhost\", port=443, path=\"/query/sql\", scheme=\"https\", username=\"my-user\", password=\"my-password\", verify_ssl=true)\n```\n\nto pass in additional query parameters (such as `usemultistageengine=true`) you may pass\nthem in as part of the `execute` method. for example:\n\n```python\ncurs.execute(\"select * from airlinestats air limit 10\", queryoptions=\"usemultistageengine=true\")\n```\n\n### using sqlalchemy:\n\nsince db engine requires more information beyond pinot broker, you need to provide pinot controller for table and schema information.\n\nthe db engine connection string is format as:\n\n```\npinot+<pinot-broker-protocol>://<pinot-broker-host>:<pinot-broker-port><pinot-broker-path>?controller=<pinot-controller-protocol>://<pinot-controller-host>:<pinot-controller-port>/\n```\n\ndefault scheme is http so you can ignore it. e.g. `pinot+http://localhost:8099/query/sql?controller=http://localhost:9000/` and `pinot://localhost:8099/query/sql?controller=localhost:9000/` work in same way.\n\nfor https, you have to specify the `https` scheme explicitly along with the port.\n\n```\npinot+https://<pinot-broker-host>:<pinot-broker-port><pinot-broker-path>?controller=https://<pinot-controller-host>:<pinot-controller-port>/\n```\n\ne.g. `pinot+https://pinot-broker.pinot.live:443/query/sql?controller=https://pinot-controller.pinot.live/`.\n\nplease note that the broker port 443 has to be explicitly put there.\n\nthis can be used as superset to pinot connection:\n\n<img title=\"superset pinot connection\" src=\"assets/images/screenshots/superset-connection.png\"/>\n\nif you have basic auth:\n\n```\npinot+https://<my-user>:<my-password>@<pinot-broker-host>:<pinot-broker-port><pinot-broker-path>?controller=https://<pinot-controller-host>:<pinot-controller-port>/[&&verify_ssl=<true/false>]\n```\n\ne.g.\n`pinot+https://my-user:my-password@my-secure-pinot-broker:443/query/sql?controller=https://my-secure-pinot-controller/&&verify_ssl=true`.\n\nbelow are some sample scripts to query pinot using sqlalchemy:\n\n```python\nfrom sqlalchemy import *\nfrom sqlalchemy.engine import create_engine\nfrom sqlalchemy.schema import *\n\nengine = create_engine('pinot://localhost:8099/query/sql?controller=http://localhost:9000/')  # uses http by default :(\n# or, using explicit http:\n# engine = create_engine('pinot+http://localhost:8099/query/sql?controller=http://localhost:9000/')\n# or, using explicit https:\n# engine = create_engine('pinot+https://localhost:8099/query/sql?controller=https://localhost:9000/')\n# or, provide extra argument to connect with multi-stage engine enabled:\n# engine = create_engine(\n#     \"pinot://localhost:8000/query/sql?controller=http://localhost:9000/\",\n#     connect_args={\"usemultistageengine\": \"true\"}\n# )\n\nplaces = table('places', metadata(bind=engine), autoload=true)\nprint(select([func.count('*')], from_obj=places).scalar())\n```\n\n\n## examples with pinot quickstart\n\nstart pinot batch quickstart\n\n```bash\ndocker run --name pinot-quickstart -p 2123:2123 -p 9000:9000 -p 8000:8000 -d apachepinot/pinot:latest quickstart -type batch\n```\n\nonce pinot batch quickstart is up, you can run below sample code snippet to query pinot:\n\n```bash\npython3 examples/pinot_quickstart_batch.py\n```\n\nsample output:\n\n```\nsending sql to pinot: select * from baseballstats limit 5\n[0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 'nl', 11, 11, 'aardsda01', 'david allan', 1, 0, 0, 0, 0, 0, 0, 'sfn', 0, 2004]\n[2, 45, 0, 0, 0, 0, 0, 0, 0, 0, 'nl', 45, 43, 'aardsda01', 'david allan', 1, 0, 0, 0, 1, 0, 0, 'chn', 0, 2006]\n[0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 'al', 25, 2, 'aardsda01', 'david allan', 1, 0, 0, 0, 0, 0, 0, 'cha', 0, 2007]\n[1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 'al', 47, 5, 'aardsda01', 'david allan', 1, 0, 0, 0, 0, 0, 1, 'bos', 0, 2008]\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'al', 73, 3, 'aardsda01', 'david allan', 1, 0, 0, 0, 0, 0, 0, 'sea', 0, 2009]\n\nsending sql to pinot: select playername, sum(runs) from baseballstats where yearid>=2000 group by playername limit 5\n['scott michael', 26.0]\n['justin morgan', 0.0]\n['jason andre', 0.0]\n['jeffrey ellis', 0.0]\n['maximiliano r.', 16.0]\n\nsending sql to pinot: select playername,sum(runs) as sum_runs from baseballstats where yearid>=2000 group by playername order by sum_runs desc limit 5\n['adrian', 1820.0]\n['jose antonio', 1692.0]\n['rafael', 1565.0]\n['brian michael', 1500.0]\n['alexander emmanuel', 1426.0]\n```\n\nstart pinot hybrid quickstart\n\n```bash\ndocker run --name pinot-quickstart -p 2123:2123 -p 9000:9000 -p 8000:8000 -d apachepinot/pinot:latest quickstart -type hybrid\n```\n\nbelow is an example against pinot quickstart hybrid:\n\n```bash\npython3 examples/pinot_quickstart_hybrid.py\n```\n\n```bash\nsending sql to pinot: select * from airlinestats limit 5\n[171, 153, 19393, 0, 8, 8, 1433, '1400-1459', 0, 1425, 1240, 165, 'null', 0, 'wn', -2147483648, 1, 27, 17540, 0, 2, 2, 1242, '1200-1259', 0, 'mdw', 13232, 1323202, 30977, 'chicago, il', 'il', 17, 'illinois', 41, 861, 4, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-27', 402, 1, -2147483648, -2147483648, 1, -2147483648, 'bos', 10721, 1072102, 30721, 'boston, ma', 'ma', 25, 'massachusetts', 13, 1, ['null'], -2147483648, 'n556wn', 6, 12, -2147483648, 'wn', -2147483648, 1254, 1427, 2014]\n[183, 141, 20398, 1, 17, 17, 1302, '1200-1259', 1, 1245, 1005, 160, 'null', 0, 'mq', 0, 1, 27, 17540, 0, -6, 0, 959, '1000-1059', -1, 'cmh', 11066, 1106603, 31066, 'columbus, oh', 'oh', 39, 'ohio', 44, 990, 4, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-27', 3574, 1, 0, -2147483648, 1, 17, 'mia', 13303, 1330303, 32467, 'miami, fl', 'fl', 12, 'florida', 33, 1, ['null'], 0, 'n605mq', 13, 29, -2147483648, 'mq', 0, 1028, 1249, 2014]\n[-2147483648, -2147483648, 20304, -2147483648, -2147483648, -2147483648, -2147483648, '2100-2159', -2147483648, 2131, 2005, 146, 'null', 0, 'oo', -2147483648, 1, 27, 17541, 1, 52, 52, 2057, '2000-2059', 3, 'cos', 11109, 1110902, 30189, 'colorado springs, co', 'co', 8, 'colorado', 82, 809, 4, -2147483648, [11292], 1, [1129202], ['den'], -2147483648, 73, [9], 0, ['null'], [9], [-2147483648], [2304], 1, -2147483648, '2014-01-27', 5554, 1, -2147483648, -2147483648, 1, -2147483648, 'iah', 12266, 1226603, 31453, 'houston, tx', 'tx', 48, 'texas', 74, 1, ['sea', 'psc', 'phx', 'msy', 'atl', 'tys', 'den', 'chs', 'pdx', 'lax', 'ewr', 'sfo', 'pit', 'rdu', 'rap', 'lse', 'san', 'sbn', 'iah', 'oak', 'bro', 'jfk', 'sat', 'ord', 'acy', 'dfw', 'bwi'], -2147483648, 'n795sk', -2147483648, 19, -2147483648, 'oo', -2147483648, 2116, -2147483648, 2014]\n[153, 125, 20436, 1, 41, 41, 1442, '1400-1459', 2, 1401, 1035, 146, 'null', 0, 'f9', 2, 1, 27, 17541, 1, 34, 34, 1109, '1000-1059', 2, 'den', 11292, 1129202, 30325, 'denver, co', 'co', 8, 'colorado', 82, 967, 4, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-27', 658, 1, 8, -2147483648, 1, 31, 'sfo', 14771, 1477101, 32457, 'san francisco, ca', 'ca', 6, 'california', 91, 1, ['null'], 0, 'n923fr', 11, 17, -2147483648, 'f9', 0, 1126, 1431, 2014]\n[-2147483648, -2147483648, 20304, -2147483648, -2147483648, -2147483648, -2147483648, '1400-1459', -2147483648, 1432, 1314, 78, 'b', 1, 'oo', -2147483648, 1, 27, 17541, -2147483648, -2147483648, -2147483648, -2147483648, '1300-1359', -2147483648, 'eau', 11471, 1147103, 31471, 'eau claire, wi', 'wi', 55, 'wisconsin', 45, 268, 2, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-27', 5455, 1, -2147483648, -2147483648, 1, -2147483648, 'ord', 13930, 1393003, 30977, 'chicago, il', 'il', 17, 'illinois', 41, 1, ['null'], -2147483648, 'n903sw', -2147483648, -2147483648, -2147483648, 'oo', -2147483648, -2147483648, -2147483648, 2014]\n\nsending sql to pinot: select count(*) from airlinestats limit 5\n[17772]\n\nsending sql to pinot: select airlineid, sum(cancelled) from airlinestats where year > 2010 group by airlineid limit 5\n[20409, 40.0]\n[19930, 16.0]\n[19805, 60.0]\n[19790, 115.0]\n[20366, 172.0]\n\nsending sql to pinot: select origincityname, max(flights) from airlinestats group by origincityname order by max(flights) desc limit 5\n['casper, wy', 1.0]\n['deadhorse, ak', 1.0]\n['austin, tx', 1.0]\n['chicago, il', 1.0]\n['monterey, ca', 1.0]\n\nsending sql to pinot: select origincityname, sum(cancelled) as sum_cancelled from airlinestats where year>2010 group by origincityname order by sum_cancelled desc limit 5\n['chicago, il', 178.0]\n['atlanta, ga', 111.0]\n['new york, ny', 65.0]\n['houston, tx', 62.0]\n['denver, co', 49.0]\n\nsending count(*) sql to pinot\n17773\n\nsending sql: \"select origincityname, sum(cancelled) as sum_cancelled from \"airlinestats\" where year>2010 group by origincityname order by sum_cancelled desc limit 5\" to pinot\n[('chicago, il', 178.0), ('atlanta, ga', 111.0), ('new york, ny', 65.0), ('houston, tx', 62.0), ('denver, co', 49.0)]\n```\n\n## examples with existing pinot.live demo cluster\n\njust run below script to query `pinot.live` demo cluster in two ways using pinotdb connect and sqlalchemy.\n\n```bash\npython3 examples/pinot_live.py\n```\n\nand response:\n\n```bash\nsending sql to pinot: select * from airlinestats limit 5\n[384, 359, 19805, 0, 13, 13, 1238, '1200-1259', 0, 1225, 900, 385, 'null', 0, 'aa', -2147483648, 3, 1, 16071, 0, 14, 14, 914, '0900-0959', 0, 'lax', 12892, 1289203, 32575, 'los angeles, ca', 'ca', 6, 'california', 91, 2475, 10, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-01', 1, 1, -2147483648, -2147483648, 1, -2147483648, 'jfk', 12478, 1247802, 31703, 'new york, ny', 'ny', 36, 'new york', 22, 1, ['sea', 'psc', 'phx', 'msy', 'atl', 'tys', 'den', 'chs', 'pdx', 'lax', 'ewr', 'sfo', 'pit', 'rdu', 'rap', 'lse', 'san', 'sbn', 'iah', 'oak', 'bro', 'jfk', 'sat', 'ord', 'acy', 'dfw', 'bwi', 'tpa', 'bfl', 'bos', 'sna', 'isn'], -2147483648, 'n338aa', 5, 20, -2147483648, 'aa', -2147483648, 934, 1233, 2014]\n[269, 251, 19805, 0, -36, 0, 1549, '1600-1659', -2, 1625, 825, 300, 'null', 0, 'aa', -2147483648, 3, 1, 16071, 0, -5, 0, 820, '0800-0859', -1, 'jfk', 12478, 1247802, 31703, 'new york, ny', 'ny', 36, 'new york', 22, 2248, 9, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-01', 44, 1, -2147483648, -2147483648, 1, -2147483648, 'las', 12889, 1288903, 32211, 'las vegas, nv', 'nv', 32, 'nevada', 85, 1, ['sea', 'psc', 'phx', 'msy', 'atl', 'tys', 'den', 'chs', 'pdx', 'lax', 'ewr', 'sfo', 'pit', 'rdu', 'rap', 'lse', 'san', 'sbn', 'iah', 'oak'], -2147483648, 'n3dvaa', 6, 12, -2147483648, 'aa', -2147483648, 832, 1543, 2014]\n[307, 288, 19805, 0, -26, 0, 2039, '2100-2159', -2, 2105, 1340, 325, 'null', 0, 'aa', -2147483648, 3, 1, 16071, 0, -8, 0, 1332, '1300-1359', -1, 'lax', 12892, 1289203, 32575, 'los angeles, ca', 'ca', 6, 'california', 91, 2556, 11, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-01', 162, 1, -2147483648, -2147483648, 1, -2147483648, 'hnl', 12173, 1217301, 32134, 'honolulu, hi', 'hi', 15, 'hawaii', 2, 1, ['sea', 'psc', 'phx', 'msy', 'atl', 'tys', 'den'], -2147483648, 'n5fcaa', 8, 11, -2147483648, 'aa', -2147483648, 1343, 2031, 2014]\n[141, 126, 19805, 0, -19, 0, 1456, '1500-1559', -2, 1515, 1135, 160, 'null', 0, 'aa', -2147483648, 3, 1, 16071, 0, 0, 0, 1135, '1100-1159', 0, 'dca', 11278, 1127802, 30852, 'washington, dc', 'va', 51, 'virginia', 38, 1192, 5, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-01', 130, 1, -2147483648, -2147483648, 1, -2147483648, 'dfw', 11298, 1129803, 30194, 'dallas/fort worth, tx', 'tx', 48, 'texas', 74, 1, ['null'], -2147483648, 'n3egaa', 4, 11, -2147483648, 'aa', -2147483648, 1146, 1452, 2014]\n[300, 277, 19805, 0, -8, 0, 32, '0001-0559', -1, 40, 1625, 315, 'null', 0, 'aa', -2147483648, 3, 1, 16071, 0, 7, 7, 1632, '1600-1659', 0, 'jfk', 12478, 1247802, 31703, 'new york, ny', 'ny', 36, 'new york', 22, 2475, 10, -2147483648, [-2147483648], 0, [-2147483648], ['null'], -2147483648, -2147483648, [-2147483648], -2147483648, ['null'], [-2147483648], [-2147483648], [-2147483648], 0, -2147483648, '2014-01-01', 180, 1, -2147483648, -2147483648, 1, -2147483648, 'lax', 12892, 1289203, 32575, 'los angeles, ca', 'ca', 6, 'california', 91, 1, ['null'], -2147483648, 'n335aa', 10, 13, -2147483648, 'aa', -2147483648, 1645, 22, 2014]\n\nsending count(*) sql to pinot\n9746\n\nsending sql: \"select playername, sum(runs) as sum_runs from \"baseballstats\" where yearid>=2000 group by playername order by sum_runs desc limit 5\" to pinot\n[(19790, 581.0), (19977, 522.0), (19690, 520.0), (19805, 481.0), (20409, 410.0), (21171, 385.0), (19930, 378.0), (20355, 377.0), (19393, 326.0), (20437, 268.0)]\n```\n\n## development\n\nin order to develop this library, you need to have installed poetry and tox.\n\nafter you make sure you have them installed, test the library:\n\n1. run the pinot quickstart (for integration tests): `$ make run-pinot`\n2. on a separate shell, run: `$ make init`\n3. then: `$ make test`\n\n## release\n\n### prepare release credential\n\nfirst, configure your credentials for the release. you can simply attach your pypi api token to the poetry tool:\n\n```\n$ poetry config pypi-token.pypi <your_api_token_generated_from_pypi.org>\n```\n\nyou should only need to do this once to set up your poetry config for the release.\nalternatively, you can also use username and password:\n\n```\n$ poetry publish --username=<your_username> --password='<your_password>'\n```\n\n### build and release a new pinot db-api to pypi\n\nbump the project to whichever next version is more suitable according to\n[semver](https://semver.org/). for example, to bump the patch version automatically,\nsimply ran the following command:\n\n```\n$ poetry version patch\n```\n\nrun to build the distribution:\n\n```\n$ poetry build\n```\n\nthen publish it to [pinotdb in pypi](https://pypi.org/project/pinotdb/):\n\n```\n$ poetry publish\n```\n\nyou can also go to github action: [pinotdb pypi publisher](https://github.com/python-pinot-dbapi/pinot-dbapi/actions/workflows/pinotdb-pypi-publisher.yml) to click and run the workflow to publish to pypi.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pinotdb",
  "package_url": "https://pypi.org/project/pinotdb/",
  "project_url": "https://pypi.org/project/pinotdb/",
  "project_urls": {
    "Homepage": "https://github.com/python-pinot-dbapi/pinot-dbapi"
  },
  "release_url": "https://pypi.org/project/pinotdb/5.1.2/",
  "requires_dist": [
    "ciso8601 (>=2.1.3,<3.0.0)",
    "httpx (>=0.23.0,<0.24.0)",
    "sqlalchemy (>=1.4,<2) ; extra == \"sqlalchemy\"",
    "requests (>=2.25.0,<3.0.0) ; extra == \"sqlalchemy\""
  ],
  "requires_python": ">=3.7,<4",
  "summary": "python db-api and sqlalchemy dialect for pinot.",
  "version": "5.1.2",
  "releases": [],
  "developers": [
    "beto@dealmeida.net",
    "beto_dealmeida"
  ],
  "kwds": "sqlalchemy pinotdb pinot pinot_quickstart_batch pinot_live",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pinotdb",
  "homepage": "https://github.com/python-pinot-dbapi/pinot-dbapi",
  "release_count": 40,
  "dependency_ids": [
    "pypi_ciso8601",
    "pypi_httpx",
    "pypi_requests",
    "pypi_sqlalchemy"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http",
    "topic :: security",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://travis-ci.org/gehirninc/python-jwt.svg?branch=master\n    :target: https://travis-ci.org/gehirninc/python-jwt\n.. image:: https://coveralls.io/repos/gehirninc/python-jwt/badge.png?branch=master\n    :target:  https://coveralls.io/r/gehirninc/python-jwt?branch=master\n.. image:: https://badge.fury.io/py/jwt.svg?dummy\n    :target: http://badge.fury.io/py/jwt\n\npython-jwt\n==========\n\n*python-jwt* is a json web token (jwt) implementation in python developed by `gehirn inc`_.\n\n\nexamples\n--------\n\n.. code-block:: python\n\n   import json\n   from datetime import datetime, timedelta, timezone\n\n   from jwt import (\n       jwt,\n       jwk_from_dict,\n       jwk_from_pem,\n   )\n   from jwt.utils import get_int_from_datetime\n\n\n   instance = jwt()\n\n   message = {\n       'iss': 'https://example.com/',\n       'sub': 'yosida95',\n       'iat': get_int_from_datetime(datetime.now(timezone.utc)),\n       'exp': get_int_from_datetime(\n           datetime.now(timezone.utc) + timedelta(hours=1)),\n   }\n\n   \"\"\"\n   encode the message to jwt(jws).\n   \"\"\"\n\n   # load a rsa key from a jwk dict.\n   signing_key = jwk_from_dict({\n       'kty': 'rsa',\n       'e': 'aqab',\n       'n': '...',\n       'd': '...'})\n   # or load a rsa key from a pem file.\n   with open('rsa_private_key.pem', 'rb') as fh:\n       signing_key = jwk_from_pem(fh.read())\n   # you can also load an octet key in the same manner as the rsa.\n   # signing_key = jwk_from_dict({'kty': 'oct', 'k': '...'})\n\n   compact_jws = instance.encode(message, signing_key, alg='rs256')\n\n   \"\"\"\n   decode the jwt with verifying the signature.\n   \"\"\"\n\n   # load a public key from pem file corresponding to the signing private key.\n   with open('rsa_public_key.json', 'r') as fh:\n       verifying_key = jwk_from_dict(json.load(fh))\n\n   message_received = instance.decode(\n       compact_jws, verifying_key, do_time_check=true)\n\n   \"\"\"\n   successfuly retrieved the `message` from the `compact_jws`\n   \"\"\"\n   assert message == message_received\n\n\ninstallation\n------------\n\nyou can install python-jwt with pip.\n\n.. code-block:: shell\n\n   $ pip install jwt\n\n\nimplementation details\n-------------------------\n\nsupported algorithms\n~~~~~~~~~~~~~~~~~~~~\n\n- unsecured\n\n  - none (disabled by default for security)\n\n- symmetric\n\n  - hs256\n  - hs384\n  - hs512\n\n- asymmetric\n\n  - ps256\n  - ps384\n  - ps512\n  - rs256\n  - rs384\n  - rs512\n\nsupported python versions\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- python 3.6+\n\n\nlicense\n-------\npython-jwt is licensed under the apache license version 2.  see ./license.rst.\n\n\n.. _gehirn inc: http://www.gehirn.co.jp/\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "jwt",
  "package_url": "https://pypi.org/project/jwt/",
  "project_url": "https://pypi.org/project/jwt/",
  "project_urls": {
    "Homepage": "https://github.com/GehirnInc/python-jwt"
  },
  "release_url": "https://pypi.org/project/jwt/1.3.1/",
  "requires_dist": [
    "cryptography (!=3.4.0,>=3.1)"
  ],
  "requires_python": ">= 3.6",
  "summary": "json web token library for python 3.",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "kohei.yoshida@gehirn.co.jp",
    "kohei_yoshida"
  ],
  "kwds": "jwt token jws compact_jws badge",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jwt",
  "homepage": "https://github.com/gehirninc/python-jwt",
  "release_count": 18,
  "dependency_ids": [
    "pypi_cryptography"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: text processing"
  ],
  "description": "# character\n\ncharacter: translation edit rate on character level\n\ncharacter (cer) is a novel character level metric inspired by the commonly applied translation edit rate (ter). it is defined\nas the minimum number of character edits required to adjust a hypothesis, until it completely matches the reference,\nnormalized by the length of the hypothesis sentence. character calculates the character level edit distance while\nperforming the shift edit on word level. unlike the strict matching criterion in ter, a hypothesis word is considered\nto match a reference word and could be shifted, if the edit distance between them is below a threshold value. the\nlevenshtein distance between the reference and the shifted hypothesis sequence is computed on the character level. in\naddition, the lengths of hypothesis sequences instead of reference sequences are used for normalizing the edit\ndistance, which effectively counters the issue that shorter translations normally achieve lower ter.\n\n\n## modifications by bram vanroy\n\nbram vanroy made some changes to this package that do not affect the result of the metric but that should\nimprove usability. code has been re-written to avoid the need for custom c++ code (instead the [c implementation\nof levenshtein](https://github.com/maxbachmann/levenshtein) alongside an lru cache is used), to make functions more\naccessible and readable, and typing info has been included. packaging has also improved to make uploading to pypi a\nbreeze. this means that the package can now be installed via pip:\n\n```shell\npip install cer\n```\n\nthe main functions are `calculate_cer` and `calculate_cer_corpus`, which both expect tokenized input. the first\nargument contains the hypotheses and the second the references.\n\n```python\nfrom cer import calculate_cer\n\ncer_score = calculate_cer([\"i\", \"like\", \"your\", \"bag\"], [\"i\", \"like\", \"their\", \"bags\"])\ncer_score\n0.3333333333333333\n```\n\n`calculate_cer_corpus` is similar but instead it expects a sequence of sequence of words, basically a corpus of\nsentences of words. it will report some statistics of the sentence-level cer scores that were calculated.\n\n```python\nfrom cer import calculate_cer_corpus\n\nhyps = [\"this week the saudis denied information published in the new york times\",\n        \"this is in fact an estimate\"]\nrefs = [\"saudi arabia denied this week information published in the american new york times\",\n        \"this is actually an estimate\"]\n\nhyps = [sent.split() for sent in hyps]\nrefs = [sent.split() for sent in refs]\n\ncer_corpus_score = calculate_cer_corpus(hyps, refs)\ncer_corpus_score\n{\n    'count': 2,\n    'mean': 0.3127282211789254,\n    'median': 0.3127282211789254,\n    'std': 0.07561653111280243,\n    'min': 0.25925925925925924,\n    'max': 0.36619718309859156\n}\n```\n\nin addition to the python interface, a command-line entry-point is also installed, which you can use as\n`calculate-cer`. its idea is to calculate aggregate scores on the corpus-level (similar to calculate_cer_corpus)\nbased on two input files. one with hypotheses and one with references (one on each line). results are written to\nstdout.\n\n```shell\nusage: calculate-cer [-h] [-r] fhyp fref\n\ncharacter: character level translation edit rate\n\npositional arguments:\n  fhyp                path to file containing hypothesis sentences. one per line.\n  fref                path to file containing reference sentences. one per line.\n\noptional arguments:\n  -h, --help          show this help message and exit\n  -r, --per_sentence  whether to output cer scores per ref/hyp pair in addition to corpus-level statistics\n```\n\n## license\n[gplv3](license)\n\n",
  "docs_url": null,
  "keywords": "machine-translation machine-translation-evaluation evaluation mt",
  "license": "gplv3",
  "name": "cer",
  "package_url": "https://pypi.org/project/cer/",
  "project_url": "https://pypi.org/project/cer/",
  "project_urls": {
    "Homepage": "https://github.com/BramVanroy/CharacTER",
    "Issue tracker": "https://github.com/BramVanroy/CharacTER/issues",
    "Source": "https://github.com/BramVanroy/CharacTER"
  },
  "release_url": "https://pypi.org/project/cer/1.2.0/",
  "requires_dist": [
    "Levenshtein",
    "isort (>=5.5.4) ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "pytest ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "translation edit rate on the character level",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "bram_vanroy",
    "bramvanroy@hotmail.com"
  ],
  "kwds": "calculate_cer_corpus cer_corpus_score translations corpus levenshtein",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_cer",
  "homepage": "https://github.com/bramvanroy/character",
  "release_count": 4,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_isort",
    "pypi_levenshtein",
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: security",
    "topic :: security :: cryptography"
  ],
  "description": "############################################\namazon dynamodb encryption client for python\n############################################\n\n.. image:: https://img.shields.io/pypi/v/dynamodb-encryption-sdk.svg\n   :target: https://pypi.python.org/pypi/dynamodb-encryption-sdk\n   :alt: latest version\n\n.. image:: https://img.shields.io/pypi/pyversions/dynamodb-encryption-sdk.svg\n   :target: https://pypi.org/project/dynamodb-encryption-sdk\n   :alt: supported python versions\n\n.. image:: https://img.shields.io/badge/code_style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/aws-dynamodb-encryption-python/badge/?version=latest\n   :target: http://aws-dynamodb-encryption-python.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. image:: https://github.com/aws/aws-dynamodb-encryption-python/workflows/tests/badge.svg\n   :target: https://github.com/aws/aws-dynamodb-encryption-python/actions?query=workflow%3atests\n   :alt: tests\n\n.. image:: https://github.com/aws/aws-dynamodb-encryption-python/workflows/static%20analysis/badge.svg\n   :target: https://github.com/aws/aws-dynamodb-encryption-python/actions?query=workflow%3a%22static+analysis%22\n   :alt: static analysis\n\nthe `amazon dynamodb encryption client for python`_ provides client-side encryption of `amazon\ndynamodb`_ items to help you to protect your table data before you send it to dynamodb. it\nprovides an implementation of the `amazon dynamodb encryption client`_ that is fully compatible\nwith the `amazon dynamodb encryption client for java`_.\n\nyou can find the latest python documentation at `read the docs`_ and you can find the latest\nfull documents in our `primary documents`_.\n\nyou can find our source on `github`_.\n\n`security issue notifications`_\n\nsee `support policy`_ for details on the current support status of all major versions of this library.\n\n***************\ngetting started\n***************\n\nrequired prerequisites\n======================\n\n* python 3.7+\n\n\ninstallation\n============\n\n.. note::\n\n   if you have not already installed `cryptography`_, you might need to install additional\n   prerequisites as detailed in the `cryptography installation guide`_ for your operating\n   system.\n\n   .. code::\n\n       $ pip install dynamodb-encryption-sdk\n\nconcepts\n========\n\nfor a detailed description of the concepts that are important to understand when using this\nclient, please review our `concepts guide`_.\n\n\n*****\nusage\n*****\n\nhelper clients\n==============\n\nwe provide helper clients that look and feel like the low level client (`encryptedclient`_),\nservice resource (`encryptedresource`_), and table resource (`encryptedtable`_) available\nfrom the `boto3`_ library. for most uses, once configured, these clients can be used exactly\nas you would a standard client from `boto3`_, and your items will be transparently encrypted\non write and decrypted on read.\n\nwhat can't i do with the helper clients?\n----------------------------------------\n\nfor most uses, the helper clients (once configured) can be used as drop-in replacements for\nthe `boto3`_ clients. however, there are a couple cases where this is not the case.\n\nupdate item\n^^^^^^^^^^^\n\nbecause we can't know that a partial update you might be making to an item covers all\nof the signed attributes in your item, we do not allow ``update_item`` on the helper clients.\n\nthis is because if you update only some of the signed attributes, then next time you try\nto read that item the signature validation will fail.\n\nattribute filtering\n^^^^^^^^^^^^^^^^^^^\n\nbecause we can't know what attributes in an item are signed, the helper clients do not allow\nany attribute filtering.\n\nfor ``get_item``, ``batch_get_item``, and ``scan``, this includes the use of ``attributestoget``\nand ``projectionexpression``.\n\nfor ``scan``, this also includes the use of ``select`` values ``specific_attributes`` and\n``all_projected_attributes``.\n\nthis is because if you do not retrieve all signed attributes, the signature validation will\nfail.\n\nitem encryptor\n==============\n\nthe helper clients provide a familiar interface but the actual item encryption and decryption\nis handled by a low-level item encryptor. you usually will not need to interact with these\nlow-level functions, but for certain advanced use cases it can be useful.\n\nif you do choose to use the item encryptor functions directly, you will need to provide a\n`cryptoconfig`_ for each call.\n\n.. code-block:: python\n\n   >>> from dynamodb_encryption_sdk.encrypted.item import decrypt_python_item, encrypt_python_item\n   >>> plaintext_item = {\n   ...     'some': 'data',\n   ...     'more': 5\n   ... }\n   >>> encrypted_item = encrypt_python_item(\n   ...     item=plaintext_item,\n   ...     crypto_config=my_crypto_config\n   ... )\n   >>> decrypted_item = decrypt_python_item(\n   ...     item=encrypted_item,\n   ...     crypto_config=my_crypto_config\n   ... )\n\n\nwhen should i use the item encryptor?\n-------------------------------------\n\none example of a use case where you might want to use the item encryptor directly is when\nprocessing items in a `dynamodb stream`_. since you receive the items data directly, and\nin dynamodb json format, you can use the `decrypt_dynamodb_item`_ function to decrypt the\nitem in the stream. we also provide helper `transformation functions`_\n\nadvanced use\n============\n\nby default, the helper clients use your attribute actions and cryptographic materials provider\nto build the `cryptoconfig`_ that is provided to the item encryptor. for some advanced use\ncases, you might want to provide a custom `cryptoconfig`_ for specific operations.\n\nall data plane operations (get item, put item, etc) on helper clients accept a ``crypto_config``\nparameter in addition to all of the parameters that the underlying `boto3`_ client accepts.\n\nif this parameter is supplied, that `cryptoconfig`_ will be used for that operation instead\nof the one that the client would normally construct for you.\n\n.. code-block:: python\n\n    >>> from dynamodb_encryption_sdk.encrypted.table import encryptedtable\n    >>> encrypted_table = encryptedtable(\n    ...     table=table,\n    ...     materials_provider=my_crypto_materials_provider\n    ... )\n    >>> encrypted_table.put_item(\n    ...     item=my_standard_item\n    ... )  # this uses the crypto config built by the helper\n    >>> encrypted_table.put_item(\n    ...     item=my_special_item,\n    ...     crypto_config=my_special_crypto_config\n    ... )  # this uses my_special_crypto_config\n\n\n.. _amazon dynamodb encryption client: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/\n.. _amazon dynamodb: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/introduction.html\n.. _primary documents: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/\n.. _concepts guide: https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/concepts.html\n.. _amazon dynamodb encryption client for java: https://github.com/aws/aws-dynamodb-encryption-java/\n.. _amazon dynamodb encryption client for python: https://github.com/aws/aws-dynamodb-encryption-python/\n.. _dynamodb stream: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/streams.html\n.. _read the docs: http://aws-dynamodb-encryption-python.readthedocs.io/en/latest/\n.. _github: https://github.com/aws/aws-dynamodb-encryption-python/\n.. _cryptography: https://cryptography.io/en/latest/\n.. _cryptography installation guide: https://cryptography.io/en/latest/installation.html\n.. _boto3: https://boto3.readthedocs.io/en/latest/\n.. _encryptedclient: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/encrypted/client.html\n.. _encryptedresource: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/encrypted/resource.html\n.. _encryptedtable: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/encrypted/table.html\n.. _cryptoconfig: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/encrypted/config.html\n.. _decrypt_dynamodb_item: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/encrypted/item.html#dynamodb_encryption_sdk.encrypted.item.decrypt_dynamodb_item\n.. _transformation functions: https://aws-dynamodb-encryption-python.readthedocs.io/en/latest/lib/tools/transform.html\n.. _security issue notifications: https://github.com/aws/aws-dynamodb-encryption-python/blob/master/contributing.md#user-content-security-issue-notifications\n.. _support policy: https://github.com/aws/aws-dynamodb-encryption-python/blob/master/support_policy.rst\n\n\n",
  "docs_url": null,
  "keywords": "dynamodb-encryption-sdk aws kms encryption dynamodb",
  "license": "apache license 2.0",
  "name": "dynamodb-encryption-sdk",
  "package_url": "https://pypi.org/project/dynamodb-encryption-sdk/",
  "project_url": "https://pypi.org/project/dynamodb-encryption-sdk/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-dynamodb-encryption-python"
  },
  "release_url": "https://pypi.org/project/dynamodb-encryption-sdk/3.2.0/",
  "requires_dist": [
    "boto3 (>=1.4.4)",
    "cryptography (>=1.8.1)",
    "attrs (>=17.4.0)"
  ],
  "requires_python": "",
  "summary": "dynamodb encryption client for python",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "amazon_web_services",
    "aws-cryptools@amazon.com"
  ],
  "kwds": "dynamodb_encryption_sdk _decrypt_dynamodb_item decrypt_dynamodb_item encrypt_python_item _encryptedclient",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_dynamodb_encryption_sdk",
  "homepage": "https://github.com/aws/aws-dynamodb-encryption-python",
  "release_count": 19,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_boto3",
    "pypi_cryptography"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: desktop environment",
    "topic :: system :: archiving :: backup",
    "topic :: system :: archiving :: mirroring",
    "topic :: utilities"
  ],
  "description": "dirsync\n=======\n\n|copyright| 2014-2019 thomas khyn\n|copyright| 2003-2015 anand b pillai\n\nadvanced directory tree synchronisation tool\n\nbased on `python robocopier`_ by anand b pillai\n\nif you like dirsync and are looking for a way to thank me and/or encourage\nfuture development, here is my btc or bch donation address:\n``1ewenyr8rv6tmc1hsltkpurtn5wjgabfg9``.\n\nusage\n-----\n\nfrom the command line::\n\n   dirsync <sourcedir> <targetdir> [options]\n\nfrom python::\n\n   from dirsync import sync\n   sync(sourcedir, targetdir, action, **options)\n\n\nmain options\n------------\n\nchosing one option among the following ones is mandatory\n\n--diff, -d              only report difference between sourcedir and targetdir\n--sync, -s              synchronize content between sourcedir and targetdir\n--update, -u            update existing content between sourcedir and targetdir\n\nif you use one of the above options (e.g. ``sync``) most of the time, you\nmay consider defining the ``action`` option in a `configuration file`_ parsed\nby dirsync.\n\n\nadditional options\n------------------\n\n--verbose, -v           provide verbose output\n--purge, -p             purge files when synchronizing (does not purge by\n                        default)\n--force, -f             force copying of files, by trying to change file\n                        permissions\n--twoway, -2            update files in source directory from target\n                        directory (only updates target from source by default)\n--create, -c            create target directory if it does not exist (by\n                        default, target directory should exist.)\n--ctime                 also takes into account the source file\\'s creation\n                        time (windows) or the source file\\'s last metadata\n                        change (unix)\n--content               takes into account only content of files. \n                        synchronize only different files.\n                        at two-way synchronization source files content \n                        have priority if destination and source are existed\n--ignore, -x patterns   regex patterns to ignore\n--only, -o patterns     regex patterns to include (exclude every other)\n--exclude, -e patterns  regex patterns to exclude\n--include, -i patterns  regex patterns to include (with precedence over\n                        excludes)\n\n\nconfiguration file\n------------------\n\n.. note::\n   configuration files are only used when using the command line, and ignored\n   when dirsync is called from within python.\n\nif you want to use predefined options all the time, or if you need specific\noptions when 'dirsyncing' a specific source directory, dirsync looks for\ntwo configuration files, by order or priority (the last takes precedence)::\n\n    ~/.dirsync\n    source/directory/.dirsync\n\n.. note::\n   a ~/.dirsync configuration file is automatically created the first time\n   dirsync is ran from the command line. it enables ``sync`` mode by default.\n\n.. warning::\n   any ``source/directory/.dirsync`` file is automatically excluded from the\n   files to compare. you have to explicitly include using the ``--include``\n   option it if you want it to be covered by the comparison.\n\nthe command line options always override the values defined in the\nconfiguration files.\n\nthe configuration files must have a ``defaults`` section, and the options are\nas defined above. the only exception is for the option ``action``, which can\ntake 3 values ``diff``, ``sync`` or ``update``.\n\nexample config file::\n\n   [defaults]\n   action = sync\n   create = true\n\n\ncustom logger\n-------------\n\nfrom python, you may not want to have the output sent to ``stdout``. to do so,\nyou can simply pass your custom logger via the ``logger`` keyword argument of\nthe ``sync`` function::\n\n   sync(sourcedir, targetdir, action, logger=my_logger, **options)\n\n\n.. |copyright| unicode:: 0xa9\n\n.. _`python robocopier`: http://code.activestate.com/recipes/231501-python-robocopier-advanced-directory-synchronizati/",
  "docs_url": null,
  "keywords": "directory,folder,update,synchronisation",
  "license": "",
  "name": "dirsync",
  "package_url": "https://pypi.org/project/dirsync/",
  "project_url": "https://pypi.org/project/dirsync/",
  "project_urls": {
    "Homepage": "https://github.com/tkhyn/dirsync/"
  },
  "release_url": "https://pypi.org/project/dirsync/2.2.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "advanced directory tree synchronisation tool",
  "version": "2.2.5",
  "releases": [],
  "developers": [
    "thomas@ksytek.com",
    "thomas_khyn"
  ],
  "kwds": "dirsyncing synchronize dirsync synchronizing synchronisation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_dirsync",
  "homepage": "https://github.com/tkhyn/dirsync/",
  "release_count": 9,
  "dependency_ids": []
}
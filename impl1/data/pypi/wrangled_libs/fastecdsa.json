{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: cc0 1.0 universal (cc0 1.0) public domain dedication",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security :: cryptography"
  ],
  "description": "fastecdsa\n=========\n.. image:: https://img.shields.io/pypi/v/fastecdsa.svg\n    :target: https://pypi.org/project/fastecdsa/\n    :alt: pypi\n\n.. image:: https://travis-ci.com/antonkueltz/fastecdsa.svg?branch=master\n    :target: https://travis-ci.com/antonkueltz/fastecdsa\n    :alt: travis ci\n\n.. image:: https://readthedocs.org/projects/fastecdsa/badge/?version=stable\n    :target: https://fastecdsa.readthedocs.io/en/stable/?badge=stable\n    :alt: documentation status\n\n.. contents::\n\nabout\n-----\nthis is a python package for doing fast elliptic curve cryptography, specifically\ndigital signatures.\n\nsecurity\n--------\nthere is no nonce reuse, no branching on secret material,\nand all points are validated before any operations are performed on them. timing side challenges\nare mitigated via montgomery point multiplication. nonces are generated per rfc6979_. the default\ncurve used throughout the package is p256 which provides 128 bits of security. if you require a\nhigher level of security you can specify the curve parameter in a method to use a curve over a\nbigger field e.g. p384. all that being said, crypto is tricky and i'm not beyond making mistakes.\nplease use a more established and reviewed library for security critical applications. open an\nissue or email me if you see any security issue or risk with this library.\n\npython versions supported\n-------------------------\nthe initial release of this package was targeted at python2.7. earlier versions may work but have\nno guarantee of correctness or stability. as of release 1.2.1+ python3 is supported as well. due to\npython2's eol on january 1st 2020 release 2.x of this package only supports python3.5+.\n\noperating systems supported\n---------------------------\nthis package is targeted at the linux and macos operating systems. due to the the dependency on\nthe gmp c library building this package on windows is difficult and no official support or\ndistributions are provided for windows oses. see issue11_ for what users have done to get things\nbuilding.\n\nsupported primitives\n--------------------\ncurves over prime fields\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------------------------+-----------------------------------------+-------------+\n| name                      | class                                   | proposed by |\n+===========================+=========================================+=============+\n| p192 / secp192r1          | :code:`fastecdsa.curve.p192`            | nist / nsa  |\n+---------------------------+-----------------------------------------+-------------+\n| p224 / secp224r1          | :code:`fastecdsa.curve.p224`            | nist / nsa  |\n+---------------------------+-----------------------------------------+-------------+\n| p256 / secp256r1          | :code:`fastecdsa.curve.p256`            | nist / nsa  |\n+---------------------------+-----------------------------------------+-------------+\n| p384 / secp384r1          | :code:`fastecdsa.curve.p384`            | nist / nsa  |\n+---------------------------+-----------------------------------------+-------------+\n| p521 / secp521r1          | :code:`fastecdsa.curve.p521`            | nist / nsa  |\n+---------------------------+-----------------------------------------+-------------+\n| secp192k1                 | :code:`fastecdsa.curve.secp192k1`       | certicom    |\n+---------------------------+-----------------------------------------+-------------+\n| secp224k1                 | :code:`fastecdsa.curve.secp224k1`       | certicom    |\n+---------------------------+-----------------------------------------+-------------+\n| secp256k1 (bitcoin curve) | :code:`fastecdsa.curve.secp256k1`       | certicom    |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp160r1           | :code:`fastecdsa.curve.brainpoolp160r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp192r1           | :code:`fastecdsa.curve.brainpoolp192r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp224r1           | :code:`fastecdsa.curve.brainpoolp224r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp256r1           | :code:`fastecdsa.curve.brainpoolp256r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp320r1           | :code:`fastecdsa.curve.brainpoolp320r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp384r1           | :code:`fastecdsa.curve.brainpoolp384r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n| brainpoolp512r1           | :code:`fastecdsa.curve.brainpoolp512r1` | bsi         |\n+---------------------------+-----------------------------------------+-------------+\n\narbitrary curves\n~~~~~~~~~~~~~~~~\nas of version 1.5.1 construction of arbitrary curves in weierstrass form\n(:code:`y^2 = x^3 + ax + b (mod p)`) is supported. i advise against using custom curves for any\nsecurity critical applications. it's up to you to make sure that the parameters you pass here are\ncorrect, no validation of the base point is done, and in general no sanity checks are done. use\nat your own risk.\n\n.. code:: python\n\n    from fastecdsa.curve import curve\n    curve = curve(\n        name,  # (str): the name of the curve\n        p,  # (long): the value of p in the curve equation.\n        a,  # (long): the value of a in the curve equation.\n        b,  # (long): the value of b in the curve equation.\n        q,  # (long): the order of the base point of the curve.\n        gx,  # (long): the x coordinate of the base point of the curve.\n        gy,  # (long): the y coordinate of the base point of the curve.\n        oid  # (str): the object identifier of the curve (optional).\n    )\n\nhash functions\n~~~~~~~~~~~~~~\nany hash function in the :code:`hashlib` module (:code:`md5, sha1, sha224, sha256, sha384, sha512`)\nwill work, as will any hash function that implements the same interface / core functionality as the\nthose in :code:`hashlib`. for instance, if you wish to use sha3 as the hash function the\n:code:`pysha3` package will work with this library as long as it is at version >=1.0b1 (as previous\nversions didn't work with the :code:`hmac` module which is used in nonce generation). note\nthat :code:`sha3_224, sha3_256, sha3_384, sha3_512` are all in :code:`hashlib` as of python3.6.\n\nperformance\n-----------\n\ncurves over prime fields\n~~~~~~~~~~~~~~~~~~~~~~~~\ncurrently it does elliptic curve arithmetic significantly faster than the :code:`ecdsa`\npackage. you can see the times for 1,000 signature and verification operations over\nvarious curves below. these were run on an early 2014 macbook air with a 1.4 ghz intel\ncore i5.\n\n+-----------+------------------------+--------------------+---------+\n| curve     | :code:`fastecdsa` time | :code:`ecdsa` time | speedup |\n+-----------+------------------------+--------------------+---------+\n| p192      | 3.62s                  | 1m35.49s           | ~26x    |\n+-----------+------------------------+--------------------+---------+\n| p224      | 4.50s                  | 2m13.42s           | ~29x    |\n+-----------+------------------------+--------------------+---------+\n| p256      | 6.15s                  | 2m52.43s           | ~28x    |\n+-----------+------------------------+--------------------+---------+\n| p384      | 12.11s                 | 6m21.01s           | ~31x    |\n+-----------+------------------------+--------------------+---------+\n| p521      | 22.21s                 | 11m39.53s          | ~31x    |\n+-----------+------------------------+--------------------+---------+\n| secp256k1 | 5.92s                  | 2m57.19s           | ~30x    |\n+-----------+------------------------+--------------------+---------+\n\nbenchmarking\n~~~~~~~~~~~~\nif you'd like to benchmark performance on your machine you can do so using the command:\n\n.. code:: bash\n\n    $ python setup.py benchmark\n\nthis will use the :code:`timeit` module to benchmark 1000 signature and verification operations\nfor each curve supported by this package. alternatively, if you have not cloned the repo but\nhave installed the package via e.g. :code:`pip` you can use the following command:\n\n.. code:: bash\n\n    $ python -m fastecdsa.benchmark\n\ninstalling\n----------\nyou can use pip: :code:`$ pip install fastecdsa` or clone the repo and use\n:code:`$ python setup.py install`. note that you need to have a c compiler.\nyou  also need to have gmp_ on your system as the underlying\nc code in this package includes the :code:`gmp.h` header (and links against gmp\nvia the :code:`-lgmp` flag). you can install all dependencies as follows:\n\napt\n~~~\n\n.. code:: bash\n\n    $ sudo apt-get install python-dev libgmp3-dev\n\nyum\n~~~\n\n.. code:: bash\n\n    $ sudo yum install python-devel gmp-devel\n\nusage\n-----\ngenerating keys\n~~~~~~~~~~~~~~~\nyou can use this package to generate keys if you like. recall that private keys on elliptic curves\nare integers, and public keys are points i.e. integer pairs.\n\n.. code:: python\n\n    from fastecdsa import keys, curve\n\n    \"\"\"the reason there are two ways to generate a keypair is that generating the public key requires\n    a point multiplication, which can be expensive. that means sometimes you may want to delay\n    generating the public key until it is actually needed.\"\"\"\n\n    # generate a keypair (i.e. both keys) for curve p256\n    priv_key, pub_key = keys.gen_keypair(curve.p256)\n\n    # generate a private key for curve p256\n    priv_key = keys.gen_private_key(curve.p256)\n\n    # get the public key corresponding to the private key we just generated\n    pub_key = keys.get_public_key(priv_key, curve.p256)\n\n\nsigning and verifying\n~~~~~~~~~~~~~~~~~~~~~\nsome basic usage is shown below:\n\n.. code:: python\n\n    from fastecdsa import curve, ecdsa, keys\n    from hashlib import sha384\n\n    m = \"a message to sign via ecdsa\"  # some message\n\n    ''' use default curve and hash function (p256 and sha2) '''\n    private_key = keys.gen_private_key(curve.p256)\n    public_key = keys.get_public_key(private_key, curve.p256)\n    # standard signature, returns two integers\n    r, s = ecdsa.sign(m, private_key)\n    # should return true as the signature we just generated is valid.\n    valid = ecdsa.verify((r, s), m, public_key)\n\n    ''' specify a different hash function to use with ecdsa '''\n    r, s = ecdsa.sign(m, private_key, hashfunc=sha384)\n    valid = ecdsa.verify((r, s), m, public_key, hashfunc=sha384)\n\n    ''' specify a different curve to use with ecdsa '''\n    private_key = keys.gen_private_key(curve.p224)\n    public_key = keys.get_public_key(private_key, curve.p224)\n    r, s = ecdsa.sign(m, private_key, curve=curve.p224)\n    valid = ecdsa.verify((r, s), m, public_key, curve=curve.p224)\n\n    ''' using sha3 via pysha3>=1.0b1 package '''\n    import sha3  # pip install [--user] pysha3==1.0b1\n    from hashlib import sha3_256\n    private_key, public_key = keys.gen_keypair(curve.p256)\n    r, s = ecdsa.sign(m, private_key, hashfunc=sha3_256)\n    valid = ecdsa.verify((r, s), m, public_key, hashfunc=sha3_256)\n\narbitrary elliptic curve arithmetic\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nthe :code:`point` class allows arbitrary arithmetic to be performed over curves. the two main\noperations are point addition and point multiplication (by a scalar) which can be done via the\nstandard python operators (:code:`+` and :code:`*` respectively):\n\n.. code:: python\n\n    # example taken from the document below (section 4.3.2):\n    # https://koclab.cs.ucsb.edu/teaching/cren/docs/w02/nist-routines.pdf\n\n    from fastecdsa.curve import p256\n    from fastecdsa.point import point\n\n    xs = 0xde2444bebc8d36e682edd27e0f271508617519b3221a8fa0b77cab3989da97c9\n    ys = 0xc093ae7ff36e5380fc01a5aad1e66659702de80f53cec576b6350b243042a256\n    s = point(xs, ys, curve=p256)\n\n    xt = 0x55a8b00f8da1d44e62f6b3b25316212e39540dc861c89575bb8cf92e35e0986b\n    yt = 0x5421c3209c2d6c704835d82ac4c3dd90f61a8a52598b9e7ab656e9d8c8b24316\n    t = point(xt, yt, curve=p256)\n\n    # point addition\n    r = s + t\n\n    # point subtraction: (xs, ys) - (xt, yt) = (xs, ys) + (xt, -yt)\n    r = s - t\n\n    # point doubling\n    r = s + s  # produces the same value as the operation below\n    r = 2 * s  # s * 2 works fine too i.e. order doesn't matter\n\n    d = 0xc51e4753afdec1e6b6c6a5b992f43f8dd0c7a8933072708b6522468b2ffb06fd\n\n    # scalar multiplication\n    r = d * s  # s * d works fine too i.e. order doesn't matter\n\n    e = 0xd37f628ece72a462f0145cbefe3f0b355ee8332d37acdd83a358016aea029db7\n\n    # joint scalar multiplication\n    r = d * s + e * t\n\nimporting and exporting keys\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nyou can also export keys as files, asn.1 encoded and formatted per rfc5480_ and rfc5915_. both\nprivate keys and public keys can be exported as follows:\n\n.. code:: python\n\n    from fastecdsa.curve import p256\n    from fastecdsa.keys import export_key, gen_keypair\n\n    d, q = gen_keypair(p256)\n    # save the private key to disk\n    export_key(d, curve=p256, filepath='/path/to/exported/p256.key')\n    # save the public key to disk\n    export_key(q, curve=p256, filepath='/path/to/exported/p256.pub')\n\nkeys stored in this format can also be imported. the import function will figure out if the key\nis a public or private key and parse it accordingly:\n\n.. code:: python\n\n    from fastecdsa.keys import import_key\n\n    # if the file is a private key then parsed_d is a long and parsed_q is a point object\n    # if the file is a public key then parsed_d will be none\n    parsed_d, parsed_q = import_key('/path/to/file.key')\n\nother encoding formats can also be specified, such as sec1_ for public keys. this is done using\nclasses found in the :code:`fastecdsa.encoding` package, and passing them as keyword args to\nthe key functions:\n\n.. code:: python\n\n    from fastecdsa.curve import p256\n    from fastecdsa.encoding.sec1 import sec1encoder\n    from fastecdsa.keys import export_key, gen_keypair, import_key\n\n    _, q = gen_keypair(p256)\n    export_key(q, curve=p256, filepath='/path/to/p256.key', encoder=sec1encoder)\n    parsed_q = import_key('/path/to/p256.key', curve=p256, public=true, decoder=sec1encoder)\n\nencoding signatures\n~~~~~~~~~~~~~~~~~~~\nder encoding of ecdsa signatures as defined in rfc2459_ is also supported. the\n:code:`fastecdsa.encoding.der` provides the :code:`derencoder` class which encodes signatures:\n\n.. code:: python\n\n    from fastecdsa.encoding.der import derencoder\n\n    r, s = 0xdeadc0de, 0xbadc0de\n    encoded = derencoder.encode_signature(r, s)\n    decoded_r, decoded_s = derencoder.decode_signature(encoded)\n\nacknowledgements\n----------------\nthanks to those below for contributing improvements:\n\n- boneyard93501\n- clouds56\n- m-kus\n- sirk390\n- targon\n- notstatilko\n- bbbrumley\n- luinxz\n- jjchidguez\n- j08ny\n- trevor-crypto\n- sylvainpelissier\n\n.. _issue11: https://github.com/antonkueltz/fastecdsa/issues/11\n.. _gmp: https://gmplib.org/\n.. _rfc2459: https://tools.ietf.org/html/rfc2459\n.. _rfc5480: https://tools.ietf.org/html/rfc5480\n.. _rfc5915: https://tools.ietf.org/html/rfc5915\n.. _rfc6979: https://tools.ietf.org/html/rfc6979\n.. _sec1: http://www.secg.org/sec1-v2.pdf\n",
  "docs_url": null,
  "keywords": "elliptic,curve,cryptography,ecdsa,ecc",
  "license": "this is free and unencumbered software released into the public domain.  anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.  in jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. we make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. we intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.  for more information, please refer to <http://unlicense.org/> ",
  "name": "fastecdsa",
  "package_url": "https://pypi.org/project/fastecdsa/",
  "project_url": "https://pypi.org/project/fastecdsa/",
  "project_urls": {
    "docs": "https://fastecdsa.readthedocs.io",
    "pypi": "https://pypi.org/project/fastecdsa/",
    "repo": "https://github.com/AntonKueltz/fastecdsa"
  },
  "release_url": "https://pypi.org/project/fastecdsa/2.3.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "fast elliptic curve digital signatures",
  "version": "2.3.0",
  "releases": [],
  "developers": [
    "kueltz.anton@gmail.com"
  ],
  "kwds": "ecdsa fastecdsa pysha3 ecc signatures",
  "license_kwds": "copyright software liable compiled noninfringement",
  "libtype": "pypi",
  "id": "pypi_fastecdsa",
  "homepage": "",
  "release_count": 43,
  "dependency_ids": []
}
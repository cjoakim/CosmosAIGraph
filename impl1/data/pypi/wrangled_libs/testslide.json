{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "topic :: software development :: testing",
    "topic :: software development :: testing :: acceptance",
    "topic :: software development :: testing :: bdd",
    "topic :: software development :: testing :: mocking",
    "topic :: software development :: testing :: unit"
  ],
  "description": "![testslide](./docs/testslide_logo.png)\n\n[![build status](https://github.com/facebook/testslide/workflows/ci/badge.svg)](https://github.com/facebook/testslide/actions?query=workflow%3aci)\n[![coverage status](https://coveralls.io/repos/github/facebook/testslide/badge.svg?branch=main)](https://coveralls.io/github/facebook/testslide?branch=main)\n[![documentation status](https://readthedocs.org/projects/testslide/badge/?version=main)](https://testslide.readthedocs.io/en/main/?badge=main)\n[![github license](https://img.shields.io/badge/license-mit-blue.svg)](license)\n[![pypi version](https://badge.fury.io/py/testslide.svg)](https://badge.fury.io/py/testslide)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\na test framework for python that enable [unit testing](https://docs.python.org/3/library/unittest.html) / [tdd](https://en.wikipedia.org/wiki/test-driven_development) / [bdd](https://en.wikipedia.org/wiki/behavior-driven_development) to be productive and enjoyable.\n\nits well behaved mocks with thorough api validations catches bugs both when code is first written or long in the future when it is changed.\n\nthe flexibility of using them with existing `unittest.testcase` or testslide's own test runner let users get its benefits without requiring refactoring existing code.\n\n## quickstart\n\ninstall:\n\n```\npip install testslide\n```\n\nscaffold the code you want to test `backup.py`:\n\n```python\nclass backup:\n  def delete(self, path):\n    pass\n```\n\nwrite a test case `backup_test.py` describing the expected behavior:\n\n```python\nimport testslide, backup, storage\n\nclass testbackupdelete(testslide.testcase):\n  def setup(self):\n    super().setup()\n    self.storage_mock = testslide.strictmock(storage.client)\n    # makes storage.client(timeout=60) return self.storage_mock\n    self.mock_constructor(storage, 'client')\\\n      .for_call(timeout=60)\\\n      .to_return_value(self.storage_mock)\n\n  def test_delete_from_storage(self):\n    # set behavior and assertion for the call at the mock\n    self.mock_callable(self.storage_mock, 'delete')\\\n      .for_call('/file/to/delete')\\\n      .to_return_value(true)\\\n      .and_assert_called_once()\n    backup.backup().delete('/file/to/delete')\n```\n\ntestslide's `strictmock`, `mock_constructor()` and `mock_callable()` are seamlessly integrated with python's testcase.\n\nrun the test and see the failure:\n\n![failing test](https://raw.githubusercontent.com/facebook/testslide/main/docs/test_fail.png)\n\ntestslide's mocks failure messages guide you towards the solution, that you can now implement:\n\n```python\nimport storage\n\nclass backup:\n  def __init__(self):\n    self.storage = storage.client(timeout=60)\n\n  def delete(self, path):\n    self.storage.delete(path)\n```\n\nand watch the test go green:\n\n![passing test](https://raw.githubusercontent.com/facebook/testslide/main/docs/test_pass.png)\n\nit is all about letting the failure messages guide you towards the solution. there's a plethora of validation inside testslide's mocks, so you can trust they will help you iterate quickly when writing code and also cover you when breaking changes are introduced.\n\n## full documentation\n\nthere's a lot more that testslide can offer, please check the full documentation at https://testslide.readthedocs.io/ to learn more.\n\n## requirements\n\n* linux\n* python 3\n\n## join the testslide community\n\ntestslide is open source software, contributions are very welcome!\n\nsee the [contributing](contributing.md) file for how to help out.\n\n## license\n\ntestslide is mit licensed, as found in the [license](license) file.\n\n\n## terms of use\n\nhttps://opensource.facebook.com/legal/terms\n\n\n## privacy policy\n\nhttps://opensource.facebook.com/legal/privacy\n\n## copyright\n\ncopyright \u00a9 2021 meta platforms, inc\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "testslide",
  "package_url": "https://pypi.org/project/TestSlide/",
  "project_url": "https://pypi.org/project/TestSlide/",
  "project_urls": {
    "Homepage": "https://github.com/facebook/TestSlide"
  },
  "release_url": "https://pypi.org/project/TestSlide/2.7.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a test framework for python that makes mocking and iterating over code with tests a breeze",
  "version": "2.7.1",
  "releases": [],
  "developers": [
    "fabio.ornellas@gmail.com",
    "fabio_pugliese_ornellas"
  ],
  "kwds": "testslide_logo testslide badge github test_pass",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_testslide",
  "homepage": "https://github.com/facebook/testslide",
  "release_count": 55,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# lazy-imports\n\n[![apache-2.0 license](https://img.shields.io/github/license/telekom/lazy-imports)](https://github.com/telekom/lazy-imports/blob/main/license)\n[![contributor covenant](https://img.shields.io/badge/code%20of%20conduct-contributor%20covenant-ff69b4.svg)](https://github.com/telekom/lazy-imports/blob/main/code_of_conduct.md)\n[![python version](https://img.shields.io/pypi/pyversions/lazy-imports)](https://www.python.org)\n[![pypi](https://img.shields.io/pypi/v/lazy-imports.svg)](https://pypi.python.org/pypi/lazy-imports)\n<br/>\n[![pytest](https://github.com/telekom/lazy-imports/actions/workflows/pytest.yml/badge.svg)](https://github.com/telekom/lazy-imports/actions/workflows/pytest.yml)\n[![static code checks](https://github.com/telekom/lazy-imports/actions/workflows/static_checks.yml/badge.svg)](https://github.com/telekom/lazy-imports/actions/workflows/static_checks.yml)\n[![github issues](https://img.shields.io/github/issues-raw/telekom/lazy-imports)](https://github.com/telekom/lazy-imports/issues)\n\nthis is a python tool to support lazy imports.\nlikewise, the actual initialization of the module does not occur until usage time\nto postpone `modulenotfounderror`s to the time of the actual usage of the module.\nthis is useful when using various optional dependencies which might not all be\ninstalled or which have high load times and/or ressource consumption.\n\n## table of contents\n\n- [maintainers](#maintainers)\n- [installation](#installation)\n- [usage & example for lazyimporter](#usage--example-for-lazyimporter)\n- [usage & example for try_import](#usage--example-for-try_import)\n- [support and feedback](#support-and-feedback)\n- [reporting security vulnerabilities](#reporting-security-vulnerabilities)\n- [contribution](#contribution)\n- [code of conduct](#code-of-conduct)\n- [licensing](#licensing)\n\n## maintainers\n\n[![one conversation](https://raw.githubusercontent.com/telekom/lazy-imports/main/docs/source/imgs/1c-logo.png)](https://www.welove.ai/)\n<br/>\nthis project is maintained by the [one conversation](https://www.welove.ai/)\nteam of [deutsche telekom ag](https://www.telekom.com/).\nit is based on\n[`_lazymodule`](https://github.com/huggingface/transformers/blob/e218249b02465ec8b6029f201f2503b9e3b61feb/src/transformers/file_utils.py#l1945)\nfrom [huggingface](https://huggingface.co/) and\n[`try_import()`](https://github.com/optuna/optuna/blob/1f92d496b0c4656645384e31539e4ee74992ff55/optuna/_imports.py#l89)\nfrom the [optuna framework](https://optuna.readthedocs.io/).\nmany thanks to huggingface for\n[your consent](https://github.com/huggingface/transformers/issues/12861#issuecomment-886712209)\nand to optuna for\n[your consent](https://github.com/optuna/optuna/issues/2776#issuecomment-874614137)\nto publish it as a standalone package \ud83e\udd17 \u2665.\n\n## installation\n\nlazy-imports is available at [the python package index (pypi)](https://pypi.org/project/lazy-imports/).\nit can be installed with pip:\n\n```bash\n$ pip install lazy-imports\n```\n\n## usage & example for lazyimporter\n\na good and easy to understand example of how to use lazy-imports can be found in the\n[`__init__.py` file of the hpoflow package](https://github.com/telekom/hpoflow/blob/1b26f3b86cad607dd89a31fa9135256d956948cb/hpoflow/__init__.py).\nit is printed here:\n\n```python\nimport sys\nfrom typing import type_checking\n\nfrom lazy_imports import lazyimporter\n\nfrom hpoflow.version import __version__\n\n\n_import_structure = {\n    \"mlflow\": [\n        \"normalize_mlflow_entry_name\",\n        \"normalize_mlflow_entry_names_in_dict\",\n        \"check_repo_is_dirty\",\n    ],\n    \"optuna\": [\"significancerepeatedtrainingpruner\"],\n    \"optuna_mlflow\": [\"optunamlflow\"],\n    \"optuna_transformers\": [\"optunamlflowcallback\"],\n    \"utils\": [\"func_no_exception_caller\"],\n}\n\n# direct imports for type-checking\nif type_checking:\n    from hpoflow.mlflow import (  # noqa: f401\n        check_repo_is_dirty,\n        normalize_mlflow_entry_name,\n        normalize_mlflow_entry_names_in_dict,\n    )\n    from hpoflow.optuna import significancerepeatedtrainingpruner  # noqa: f401\n    from hpoflow.optuna_mlflow import optunamlflow  # noqa: f401\n    from hpoflow.optuna_transformers import optunamlflowcallback  # noqa: f401\n    from hpoflow.utils import func_no_exception_caller  # noqa: f401\nelse:\n    sys.modules[__name__] = lazyimporter(\n        __name__,\n        globals()[\"__file__\"],\n        _import_structure,\n        extra_objects={\"__version__\": __version__},\n    )\n```\n\n## usage & example for try_import\n\n`try_import` is a context manager that can wrap imports of optional packages to defer\nexceptions. this way you don't have to import the packages every time you call a function,\nbut you can still import the package at the top of your module. the context manager\ndefers the exceptions until you actually need to use the package.\nyou can see an example below:\n\n```python\nfrom lazy_imports import try_import\n\nwith try_import() as optional_package_import:  # use try_import as a context manager\n    import optional_package  # optional package that might not be installed\n\n# other non optional functions here\n\ndef optional_function():  # optional function that uses the optional package\n    optional_package_import.check()  # check if the import was ok or raise a meaningful exception\n\n    optional_package.some_external_function()  # use the optional package here\n```\n\n## support and feedback\n\nthe following channels are available for discussions, feedback, and support requests:\n\n- [open an issue in our github repository](https://github.com/telekom/lazy-imports/issues/new/choose)\n- [send an e-mail to our open source team](mailto:opensource@telekom.de)\n\n## reporting security vulnerabilities\n\nthis project is built with security and data privacy in mind to ensure your data is safe.\nwe are grateful for security researchers and users reporting a vulnerability to us, first.\nto ensure that your request is handled in a timely manner and non-disclosure of vulnerabilities\ncan be assured, please follow the below guideline.\n\n**please do not report security vulnerabilities directly on github.\ngithub issues can be publicly seen and therefore would result in a direct disclosure.**\n\nplease address questions about data privacy, security concepts,\nand other media requests to the [opensource@telekom.de](mailto:opensource@telekom.de) mailbox.\n\n## contribution\n\nour commitment to open source means that we are enabling - in fact encouraging - all interested\nparties to contribute and become part of our developer community.\n\ncontribution and feedback is encouraged and always welcome. for more information about how to\ncontribute, as well as additional contribution information, see our\n[contribution guidelines](https://github.com/telekom/lazy-imports/blob/main/contributing.md).\n\n## code of conduct\n\nthis project has adopted the [contributor covenant](https://www.contributor-covenant.org/)\nas our code of conduct. please see the details in our\n[contributor covenant code of conduct](https://github.com/telekom/lazy-imports/blob/main/code_of_conduct.md).\nall contributors must abide by the code of conduct.\n\n## licensing\n\ncopyright (c) 2021 [philip may](https://may.la/), [deutsche telekom ag](https://www.telekom.com/)<br/>\ncopyright (c) 2020, 2021 [the huggingface team](https://huggingface.co/)<br/>\ncopyright (c) 2018 preferred networks, inc.\n\nlicensed under the [apache license, version 2.0](https://github.com/telekom/lazy-imports/blob/main/license) (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n[http://www.apache.org/licenses/license-2.0](http://www.apache.org/licenses/license-2.0)\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n",
  "docs_url": null,
  "keywords": "import imports lazy",
  "license": "",
  "name": "lazy-imports",
  "package_url": "https://pypi.org/project/lazy-imports/",
  "project_url": "https://pypi.org/project/lazy-imports/",
  "project_urls": {
    "Bug Tracker": "https://github.com/telekom/lazy-imports/issues",
    "Code of Conduct": "https://github.com/telekom/lazy-imports/blob/main/CODE_OF_CONDUCT.md",
    "Contributing": "https://github.com/telekom/lazy-imports/blob/main/CONTRIBUTING.md",
    "Homepage": "https://github.com/telekom/lazy-imports",
    "Source Code": "https://github.com/telekom/lazy-imports"
  },
  "release_url": "https://pypi.org/project/lazy-imports/0.3.1/",
  "requires_dist": [
    "flake8 ; extra == 'all'",
    "isort ; extra == 'all'",
    "pylint ; extra == 'all'",
    "mypy ; extra == 'all'",
    "pylintfileheader ; extra == 'all'",
    "black ; extra == 'all'",
    "mdformat ; extra == 'all'",
    "pydocstyle ; extra == 'all'",
    "packaging ; extra == 'all'",
    "pytest ; extra == 'all'",
    "black ; extra == 'checking'",
    "flake8 ; extra == 'checking'",
    "isort ; extra == 'checking'",
    "mdformat ; extra == 'checking'",
    "pydocstyle ; extra == 'checking'",
    "mypy ; extra == 'checking'",
    "pylint ; extra == 'checking'",
    "pylintfileheader ; extra == 'checking'",
    "pytest ; extra == 'testing'",
    "packaging ; extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "summary": "tool to support lazy imports",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "philip.may@t-systems.com",
    "philip_may"
  ],
  "kwds": "lazy_imports lazyimporter _lazymodule _import_structure _imports",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_lazy_imports",
  "homepage": "https://github.com/telekom/lazy-imports",
  "release_count": 6,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_isort",
    "pypi_mdformat",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pydocstyle",
    "pypi_pylint",
    "pypi_pylintfileheader",
    "pypi_pytest"
  ]
}
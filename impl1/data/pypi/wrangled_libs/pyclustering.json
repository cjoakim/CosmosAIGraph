{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: microsoft",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "operating system :: ios",
    "programming language :: c",
    "programming language :: c++",
    "programming language :: python :: 3",
    "topic :: education",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: bio-informatics",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development :: libraries"
  ],
  "description": "|joss|\n\npyclustering\n============\n\n**pyclustering** is a python, c++ data mining library (clustering\nalgorithm, oscillatory networks, neural networks). the library provides\npython and c++ implementations (c++ pyclustering library) of each algorithm or\nmodel. c++ pyclustering library is a part of pyclustering and supported for\nlinux, windows and macos operating systems.\n\nofficial repository: https://github.com/annoviko/pyclustering/\n\ndocumentation: https://pyclustering.github.io/docs/0.10.1/html/\n\n\ndependencies\n============\n\n**required packages**: scipy, matplotlib, numpy, pillow\n\n**python version**: >=3.6 (32-bit, 64-bit)\n\n**c++ version**: >= 14 (32-bit, 64-bit)\n\n\nperformance\n===========\n\neach algorithm is implemented using python and c/c++ language, if your platform is not supported then python\nimplementation is used, otherwise c/c++. implementation can be chosen by `ccore` flag (by default it is always\n'true' and it means that c/c++ is used), for example:\n\n.. code:: python\n\n    # as by default - c/c++ part of the library is used\n    xmeans_instance_1 = xmeans(data_points, start_centers, 20, ccore=true);\n\n    # the same - c/c++ part of the library is used by default\n    xmeans_instance_2 = xmeans(data_points, start_centers, 20);\n\n    # switch off core - python is used\n    xmeans_instance_3 = xmeans(data_points, start_centers, 20, ccore=false);\n\n\ninstallation\n============\n\ninstallation using pip3 tool:\n\n.. code:: bash\n\n    $ pip3 install pyclustering\n\nmanual installation from official repository using makefile:\n\n.. code:: bash\n\n    # get sources of the pyclustering library, for example, from repository\n    $ mkdir pyclustering\n    $ cd pyclustering/\n    $ git clone https://github.com/annoviko/pyclustering.git .\n\n    # compile ccore library (core of the pyclustering library).\n    $ cd ccore/\n    $ make ccore_64bit      # build for 64-bit os\n\n    # $ make ccore_32bit    # build for 32-bit os\n\n    # return to parent folder of the pyclustering library\n    $ cd ../\n\n    # install pyclustering library\n    $ python3 setup.py install\n\n    # optionally - test the library\n    $ python3 setup.py test\n\nmanual installation using cmake:\n\n.. code:: bash\n\n    # get sources of the pyclustering library, for example, from repository\n    $ mkdir pyclustering\n    $ cd pyclustering/\n    $ git clone https://github.com/annoviko/pyclustering.git .\n\n    # generate build files.\n    $ mkdir build\n    $ cmake ..\n\n    # build pyclustering-shared target depending on what was generated (makefile or msvc solution)\n    # if makefile has been generated then\n    $ make pyclustering-shared\n\n    # return to parent folder of the pyclustering library\n    $ cd ../\n\n    # install pyclustering library\n    $ python3 setup.py install\n\n    # optionally - test the library\n    $ python3 setup.py test\n\nmanual installation using microsoft visual studio solution:\n\n1. clone repository from: https://github.com/annoviko/pyclustering.git\n2. open folder `pyclustering/ccore`\n3. open visual studio project `ccore.sln`\n4. select solution platform: `x86` or `x64`\n5. build `pyclustering-shared` project.\n6. add pyclustering folder to python path or install it using setup.py\n\n.. code:: bash\n\n    # install pyclustering library\n    $ python3 setup.py install\n\n    # optionally - test the library\n    $ python3 setup.py test\n\n\nproposals, questions, bugs\n==========================\n\nin case of any questions, proposals or bugs related to the pyclustering\nplease contact to pyclustering@yandex.ru.\n\nissue tracker: https://github.com/annoviko/pyclustering/issues\n\n\nlibrary content\n===============\n\n**clustering algorithms (module pyclustering.cluster):** \n\n- **agglomerative** (pyclustering.cluster.agglomerative);\n- **bang** (pyclustering.cluster.bang);\n- **birch** (pyclustering.cluster.birch);\n- **bsas** (pyclustering.cluster.bsas);\n- **clarans** (pyclustering.cluster.clarans);\n- **clique** (pyclustering.cluster.clique);\n- **cure** (pyclustering.cluster.cure);\n- **dbscan** (pyclustering.cluster.dbscan);\n- **elbow** (pyclustering.cluster.elbow);\n- **ema** (pyclustering.cluster.ema);\n- **fuzzy c-means** (pyclustering.cluster.fcm);\n- **ga (genetic algorithm)** (pyclustering.cluster.ga);\n- **g-means** (pyclustering.cluster.gmeans);\n- **hsyncnet** (pyclustering.cluster.hsyncnet);\n- **k-means** (pyclustering.cluster.kmeans);\n- **k-means++** (pyclustering.cluster.center_initializer);\n- **k-medians** (pyclustering.cluster.kmedians);\n- **k-medoids** (pyclustering.cluster.kmedoids);\n- **mbsas** (pyclustering.cluster.mbsas);\n- **optics** (pyclustering.cluster.optics);\n- **rock** (pyclustering.cluster.rock);\n- **silhouette** (pyclustering.cluster.silhouette);\n- **som-sc** (pyclustering.cluster.somsc);\n- **syncnet** (pyclustering.cluster.syncnet);\n- **sync-som** (pyclustering.cluster.syncsom);\n- **ttsas** (pyclustering.cluster.ttsas);\n- **x-means** (pyclustering.cluster.xmeans);\n\n\n**oscillatory networks and neural networks (module pyclustering.nnet):**\n\n- **oscillatory network based on hodgkin-huxley model** (pyclustering.nnet.hhn);\n- **fsync: oscillatory network based on landau-stuart equation and kuramoto model** (pyclustering.nnet.fsync);\n- **hysteresis oscillatory network** (pyclustering.nnet.hysteresis);\n- **legion: local excitatory global inhibitory oscillatory network** (pyclustering.nnet.legion);\n- **pcnn: pulse-coupled neural network** (pyclustering.nnet.pcnn);\n- **som: self-organized map** (pyclustering.nnet.som);\n- **sync: oscillatory network based on kuramoto model** (pyclustering.nnet.sync);\n- **syncpr: oscillatory network based on kuramoto model for pattern recognition** (pyclustering.nnet.syncpr);\n- **syncsegm: oscillatory network based on kuramoto model for image segmentation** (pyclustering.nnet.syncsegm);\n\n**graph coloring algorithms (module pyclustering.gcolor):**\n\n- **dsatur** (pyclustering.gcolor.dsatur);\n- **hysteresis oscillatory network for graph coloring** (pyclustering.gcolor.hysteresis);\n- **sync: oscillatory network based on kuramoto model for graph coloring** (pyclustering.gcolor.sync);\n\n**containers (module pyclustering.container):**\n\n- **cf-tree** (pyclustering.container.cftree);\n- **kd-tree** (pyclustering.container.kdtree);\n\n\ncite the library\n================\n\nif you are using pyclustering library in a scientific paper, please, cite the library:\n\nnovikov, a., 2019. pyclustering: data mining library. journal of open source software, 4(36), p.1230. available at: http://dx.doi.org/10.21105/joss.01230.\n\nbibtex entry:\n\n.. code::\n\n    @article{novikov2019,\n        doi         = {10.21105/joss.01230},\n        url         = {https://doi.org/10.21105/joss.01230},\n        year        = 2019,\n        month       = {apr},\n        publisher   = {the open journal},\n        volume      = {4},\n        number      = {36},\n        pages       = {1230},\n        author      = {andrei novikov},\n        title       = {{pyclustering}: data mining library},\n        journal     = {journal of open source software}\n    }\n\n\n\n.. |joss| image:: http://joss.theoj.org/papers/10.21105/joss.01230/status.svg\n   :target: https://doi.org/10.21105/joss.01230",
  "docs_url": null,
  "keywords": "pyclustering data-mining clustering cluster-analysis machine-learning neural-network oscillatory-network",
  "license": "bsd-3-clause",
  "name": "pyclustering",
  "package_url": "https://pypi.org/project/pyclustering/",
  "project_url": "https://pypi.org/project/pyclustering/",
  "project_urls": {
    "Bug Tracker": "https://github.com/annoviko/pyclustering/issues",
    "Documentation": "https://pyclustering.github.io/docs/0.10.1/html/index.html",
    "Homepage": "https://pyclustering.github.io/",
    "Repository": "https://github.com/annoviko/pyclustering"
  },
  "release_url": "https://pypi.org/project/pyclustering/0.10.1.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "pyclustring is a python data mining library",
  "version": "0.10.1.2",
  "releases": [],
  "developers": [
    "andrei_novikov",
    "pyclustering@yandex.ru"
  ],
  "kwds": "pyclustering pyclustring cluster clustering matplotlib",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_pyclustering",
  "homepage": "https://github.com/annoviko/pyclustering",
  "release_count": 17,
  "dependency_ids": []
}
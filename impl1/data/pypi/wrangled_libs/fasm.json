{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "## fpga assembly (fasm) parser and generation library\n\nthis repository documents the fasm file format and provides parsing libraries and simple tooling for working with fasm files.\n\nit provides both a pure python parser based on `textx` and a significantly faster c parser based on `antlr`. the library will try and use the antlr parser first and fall back to the `textx` parser if the compiled module is not found.\n\nwhich parsers are supported by your currently install can be found via `python3 -c \"import fasm.parser as p; print(p.available)`. the currently in use parser can be found via `fasm.parser.implementation`.\n\nit is highly recommended to use the antlr parser as it is about 15 times faster.\n\nfunctions for parsing and generating fasm files.\n\n## build instructions\n\ncmake is required, and antlr has a few dependencies:\n\n    sudo apt install cmake default-jre-headless uuid-dev libantlr4-runtime-dev\n\npull dependencies in `third_party`:\n\n    git submodule update --init\n\nbuild:\n\n    make build\n\ntest with:\n\n    python setup.py test\n\nthe antlr runtime can either be linked statically or as a shared library. use the\n`--antlr-runtime=[static|shared]` flag to select between the two modes e.g.:\n\n    python setup.py install --antlr-runtime=shared\n\nor, using `pip`:\n\n    pip install . --install-option=\"--antlr-runtime=shared\" --no-use-pep517\n\nthe runtime will be built and statically linked by default. this flag is available in the build_ext, build, develop, and install commands.\n\nthe --no-use-pep517 flag is needed because there is currently no way to pass flags with pep517.\nrelevant issue: https://github.com/pypa/pip/issues/5771\n\n## fpga assembly (fasm)\n\nfpga assembly is a file format designed by the\n[f4pga project](https://f4pga.org/) developers to provide a plain\ntext file format for configuring the internals of an fpga.\n\nit is designed to allow fpga place and route to not care about the *actual*\nbitstream format used on an fpga.\n\n![fasm ecosystem diagram](docs/_static/image/fasm-diagram.png)\n\n### properties\n\n * removing a line from a fasm file leaves you with a valid fasm file.\n * allow annotation with human readable comments.\n * allow annotation with \"computer readable\" comments.\n * has syntactic sugar for expressing memory / lut init bits / other large\n   arrays of data.\n * has a canonical form.\n * does not require any specific bitstream format.\n\n### supported by\n\nfasm is currently supported by the\n[f4pga verilog to routing fork](https://github.com/f4pga/vtr-verilog-to-routing),\nbut we hope to get it merged upstream sometime soon.\n\nit is also used by [project x-ray](https://github.com/f4pga/prjxray).\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fasm",
  "package_url": "https://pypi.org/project/fasm/",
  "project_url": "https://pypi.org/project/fasm/",
  "project_urls": {
    "Homepage": "https://github.com/chipsalliance/fasm"
  },
  "release_url": "https://pypi.org/project/fasm/0.0.2.post100/",
  "requires_dist": [
    "textx"
  ],
  "requires_python": "",
  "summary": "fpga assembly (fasm) parser and generation library",
  "version": "0.0.2.post100",
  "releases": [],
  "developers": [
    "f4pga-wg@lists.chipsalliance.org",
    "f4pga_authors"
  ],
  "kwds": "parser parsers fpga parsing fasm",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fasm",
  "homepage": "https://github.com/chipsalliance/fasm",
  "release_count": 9,
  "dependency_ids": [
    "pypi_textx"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: c++",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing"
  ],
  "description": "==========\npytest-cpp\n==========\n\n|python| |version| |anaconda| |ci| |black|\n\nuse `pytest <https://pypi.python.org/pypi/pytest>`_ runner to discover and execute c++ tests.\n\nsupports `google test <https://code.google.com/p/googletest>`_,\n`boost.test <http://www.boost.org/doc/libs/release/libs/test>`_,\nand `catch2 <https://github.com/catchorg/catch2>`_:\n\n.. |version| image:: http://img.shields.io/pypi/v/pytest-cpp.png\n  :target: https://crate.io/packages/pytest-cpp\n\n.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/pytest-cpp.svg\n    :target: https://anaconda.org/conda-forge/pytest-cpp\n\n.. |ci| image:: https://github.com/pytest-dev/pytest-cpp/workflows/test/badge.svg\n    :target: https://github.com/pytest-dev/pytest-cpp/actions\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/pytest-cpp.svg\n    :target: https://pypi.python.org/pypi/pytest-cpp/\n    :alt: supported python versions\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\nthis brings several benefits:\n\n* allows you to run all your tests in multi-language projects with a single\n  command;\n* execute c++ tests in **parallel** using\n  `pytest-xdist <https://pypi.python.org/pypi/pytest-xdist>`_ plugin;\n* use ``--junitxml`` option to produce a single and uniform xml file with all\n  your test suite results;\n* filter which tests to run using standard test filtering capabilities, such as\n  by file names, directories, keywords by using the ``-k`` option, etc.;\n\n.. contents:: **table of contents**\n\n\ninstallation\n============\n\ninstall using `pip <http://pip-installer.org/>`_:\n\n.. code-block:: console\n\n    $ pip install pytest-cpp\n\nusage\n=====\n\n.. code-block:: console\n\n    $ pytest\n\nonce installed, pytest runs will search and run tests\nfound in **executable** files, detecting if the suites are\ngoogle, boost, or catch2 tests automatically.\n\nconfiguration options\n~~~~~~~~~~~~~~~~~~~~~\n\nfollowing are the options that can be put in the pytest configuration file related\nto pytest-cpp.\n\ncpp_files\n^^^^^^^^^\n\nyou can configure which files are tested for suites by using the ``cpp_files``\nini configuration option:\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_files = test_suite*\n\nby default matches ``test_*`` and ``*_test`` executable files.\n\ncpp_arguments\n^^^^^^^^^^^^^\n\narguments to the c++ tests can be provided with the\n``cpp_arguments`` ini configuration option.\n\nfor example:\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_arguments =-v --log-dir=logs\n\nyou can change this option directly in the command-line using\npytest's ``-o`` option:\n\n.. code-block:: console\n\n    $ pytest -o cpp_arguments='-v --log-dir=logs'\n\n**important**: do not pass filtering arguments (for example ``--gtest_filter``), as this will conflict\nwith the plugin functionality and behave incorrectly.\n\nto filter tests, use the standard pytest filtering facilities (such as ``-k``).\n\ncpp_ignore_py_files\n^^^^^^^^^^^^^^^^^^^\n\nthis option defaults to ``true`` and configures the plugin to ignore ``*.py`` files that\nwould otherwise match the ``cpp_files`` option.\n\nset it to ``false`` if you have c++ executable files that end with the ``*.py`` extension.\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_ignore_py_files = false\n\ncpp_harness\n^^^^^^^^^^^\n\nthis option allows the usage of tools that are used by invoking them on the console\nwrapping the test binary, like valgrind and memcheck:\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_harness = valgrind --tool=memcheck\n\n\ncpp_harness_collect\n^^^^^^^^^^^^^^^^^^^\n\nthis option allows the usage of tools or emulators (like wine or qemu) that are used by invoking them\non the console wrapping the test binary during a test collection.\n\nmight be used in the combination with ``cpp_harness`` to run a binary in emulators, like wine or qemu\nin cross-compilation targets.\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_harness_collect = qemu-x86_64 -l libs/\n\nor\n\n.. code-block:: ini\n\n    [pytest]\n    cpp_harness_collect = qemu-x86_64 -l libs/\n    cpp_harness = qemu-x86_64 -l libs/\n\nchangelog\n=========\n\nplease consult `changelog <https://github.com/pytest-dev/pytest-cpp/blob/master/changelog.md>`_.\n\nsupport\n=======\n\nall feature requests and bugs are welcome, so please make sure to add\nfeature requests and bugs to the\n`issues <https://github.com/pytest-dev/pytest-cpp/issues>`_ page!\n",
  "docs_url": null,
  "keywords": "pytest test unittest",
  "license": "mit",
  "name": "pytest-cpp",
  "package_url": "https://pypi.org/project/pytest-cpp/",
  "project_url": "https://pypi.org/project/pytest-cpp/",
  "project_urls": {
    "Homepage": "http://github.com/pytest-dev/pytest-cpp"
  },
  "release_url": "https://pypi.org/project/pytest-cpp/2.5.0/",
  "requires_dist": [
    "pytest >=7.0",
    "colorama"
  ],
  "requires_python": ">=3.7",
  "summary": "use pytest's runner to discover and execute c++ tests",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "bruno_oliveira",
    "nicoddemus@gmail.com"
  ],
  "kwds": "pytest googletest test_suite cpp_ignore_py_files cpp_harness_collect",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_cpp",
  "homepage": "http://github.com/pytest-dev/pytest-cpp",
  "release_count": 26,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_pytest"
  ]
}
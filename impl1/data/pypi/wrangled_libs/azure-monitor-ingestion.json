{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure monitor ingestion client library for python\n\nthe azure monitor ingestion client library is used to send custom logs to [azure monitor][azure_monitor_overview] using the [logs ingestion api][ingestion_overview].\n\nthis library allows you to send data from virtually any source to supported built-in tables or to custom tables that you create in log analytics workspace. you can even extend the schema of built-in tables with custom columns.\n\n**resources:**\n\n- [source code][source]\n- [package (pypi)][package]\n- [package (conda)](https://anaconda.org/microsoft/azure-monitor-ingestion/)\n- [api reference documentation][python-ingestion-ref-docs]\n- [service documentation][azure_monitor_overview]\n- [samples][samples]\n- [change log][changelog]\n\n## getting started\n\n### prerequisites\n\n- python 3.7 or later\n- an [azure subscription][azure_subscription]\n- an [azure log analytics workspace][azure_monitor_create_using_portal]\n- a [data collection endpoint][data_collection_endpoint]\n- a [data collection rule][data_collection_rule]\n\n### install the package\n\ninstall the azure monitor ingestion client library for python with [pip][pip]:\n\n```bash\npip install azure-monitor-ingestion\n```\n\n### create the client\n\nan authenticated client is required to upload logs to azure monitor. the library includes both synchronous and asynchronous forms of the clients. to authenticate, create an instance of a token credential. use that instance when creating a `logsingestionclient`. the following examples use `defaultazurecredential` from the [azure-identity](https://pypi.org/project/azure-identity/) package.\n\n#### synchronous clients\n\nconsider the following example, which creates synchronous clients for uploading logs:\n\n```python\nimport os\nfrom azure.identity import defaultazurecredential\nfrom azure.monitor.ingestion import logsingestionclient\n\nendpoint = os.environ['data_collection_endpoint']\ncredential = defaultazurecredential()\nlogs_client = logsingestionclient(endpoint, credential)\n```\n\n#### asynchronous clients\n\nthe asynchronous forms of the client apis are found in the `.aio`-suffixed namespace. for example:\n\n```python\nimport os\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.monitor.ingestion.aio import logsingestionclient\n\nendpoint = os.environ['data_collection_endpoint']\ncredential = defaultazurecredential()\nlogs_client = logsingestionclient(endpoint, credential)\n```\n\n#### configure clients for non-public azure clouds\n\nby default, `logsingestionclient` is configured to connect to the public azure cloud. to connect to non-public azure clouds, some additional configuration is required. the appropriate scope for authentication must be provided using the `credential_scopes` keyword argument. the following example shows how to configure the client to connect to azure us government:\n\n```python\nlogs_client = logsingestionclient(endpoint, credential_scopes=[\"https://monitor.azure.us//.default\"])\n```\n\n## key concepts\n\n### data collection endpoint\n\ndata collection endpoints (dces) allow you to uniquely configure ingestion settings for azure monitor. [this article][data_collection_endpoint] provides an overview of data collection endpoints including their contents and structure and how you can create and work with them.\n\n### data collection rule\n\ndata collection rules (dcr) define data collected by azure monitor and specify how and where that data should be sent or stored. the rest api call must specify a dcr to use. a single dce can support multiple dcrs, so you can specify a different dcr for different sources and target tables.\n\nthe dcr must understand the structure of the input data and the structure of the target table. if the two don't match, it can use a transformation to convert the source data to match the target table. you may also use the transform to filter source data and perform any other calculations or conversions.\n\nfor more information, see [data collection rules in azure monitor][data_collection_rule], and see [this article][data_collection_rule_structure] for details about a dcr's structure. for information on how to retrieve a dcr id, see [this tutorial][data_collection_rule_tutorial].\n\n### log analytics workspace tables\n\ncustom logs can send data to any custom table that you create and to certain built-in tables in your log analytics workspace. the target table must exist before you can send data to it. the following built-in tables are currently supported:\n\n- [commonsecuritylog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [securityevents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [syslog](https://learn.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [windowsevents](https://learn.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n### logs retrieval\n\nthe logs that were uploaded using this library can be queried using the [azure monitor query][azure_monitor_query] client library.\n\n## examples\n\n- [upload custom logs](#upload-custom-logs)\n- [upload with custom error handling](#upload-with-custom-error-handling)\n\n### upload custom logs\n\nthis example shows uploading logs to azure monitor.\n\n```python\nimport os\n\nfrom azure.core.exceptions import httpresponseerror\nfrom azure.identity import defaultazurecredential\nfrom azure.monitor.ingestion import logsingestionclient\n\nendpoint = os.environ['data_collection_endpoint']\ncredential = defaultazurecredential()\n\nclient = logsingestionclient(endpoint=endpoint, credential=credential, logging_enable=true)\n\nrule_id = os.environ['logs_dcr_rule_id']\nbody = [\n      {\n        \"time\": \"2021-12-08t23:51:14.1104269z\",\n        \"computer\": \"computer1\",\n        \"additionalcontext\": \"context-2\"\n      },\n      {\n        \"time\": \"2021-12-08t23:51:14.1104269z\",\n        \"computer\": \"computer2\",\n        \"additionalcontext\": \"context\"\n      }\n    ]\n\ntry:\n    client.upload(rule_id=rule_id, stream_name=os.environ['logs_dcr_stream_name'], logs=body)\nexcept httpresponseerror as e:\n    print(f\"upload failed: {e}\")\n```\n\n### upload with custom error handling\n\nto upload logs with custom error handling, you can pass a callback function to the `on_error` parameter of the `upload` method. the callback function is called for each error that occurs during the upload and should expect one argument that corresponds to an `logsuploaderror` object. this object contains the error encountered and the list of logs that failed to upload.\n\n```python\n# example 1: collect all logs that failed to upload.\nfailed_logs = []\ndef on_error(error):\n    print(\"log chunk failed to upload with error: \", error.error)\n    failed_logs.extend(error.failed_logs)\n\n# example 2: ignore all errors.\ndef on_error_pass(error):\n    pass\n\nclient.upload(rule_id=rule_id, stream_name=os.environ['logs_dcr_stream_name'], logs=body, on_error=on_error)\n```\n\n## troubleshooting\n\nfor details on diagnosing various failure scenarios, see our [troubleshooting guide](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/troubleshooting.md).\n\n## next steps\n\nto learn more about azure monitor, see the [azure monitor service documentation][azure_monitor_overview].\n\n### samples\n\nthe following code samples show common scenarios with the azure monitor ingestion client library.\n\n#### logs ingestion samples\n\n- [upload a list of logs][sample_send_small_logs] ([async sample][sample_send_small_logs_async])\n- [upload a list of logs with custom error handling][sample_custom_error_callback] ([async sample][sample_custom_error_callback_async])\n- [upload the contents of a file][sample_upload_file_contents] ([async sample][sample_upload_file_contents_async])\n- [upload data in a pandas dataframe][sample_upload_pandas_dataframe] ([async sample][sample_upload_pandas_dataframe_async])\n\n## contributing\n\nthis project welcomes contributions and suggestions. most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit [cla.microsoft.com][cla].\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repositories using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct]. for more information, see the [code of conduct faq][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- links -->\n\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/\n[azure_monitor_query]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query#readme\n[azure_subscription]: https://azure.microsoft.com/free/python/\n[changelog]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/changelog.md\n[data_collection_endpoint]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n[data_collection_rule_structure]: https://learn.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-structure\n[data_collection_rule_tutorial]: https://learn.microsoft.com/azure/azure-monitor/logs/tutorial-logs-ingestion-portal#collect-information-from-the-dcr\n[ingestion_overview]: https://learn.microsoft.com/azure/azure-monitor/logs/logs-ingestion-api-overview\n[package]: https://aka.ms/azsdk-python-monitor-ingestion-pypi\n[pip]: https://pypi.org/project/pip/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[python-ingestion-ref-docs]: https://aka.ms/azsdk/python/monitor-ingestion/docs\n[samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/samples\n[source]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/\n\n[sample_send_small_logs]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_send_small_logs.py\n[sample_send_small_logs_async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_send_small_logs_async.py\n[sample_custom_error_callback]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_custom_error_callback.py\n[sample_custom_error_callback_async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_custom_error_callback_async.py\n[sample_upload_file_contents]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_file_contents.py\n[sample_upload_file_contents_async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_file_contents_async.py\n[sample_upload_pandas_dataframe]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_upload_pandas_dataframe.py\n[sample_upload_pandas_dataframe_async]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_upload_pandas_dataframe_async.py\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n# release history\n\n## 1.0.3 (2023-11-07)\n\n### other changes\n\n- add type validation for the `logs` parameter in the `upload` method. ([#32591](https://github.com/azure/azure-sdk-for-python/pull/32591/))\n\n## 1.0.2 (2023-06-15)\n\n### bugs fixed\n\n- fixed issue preventing custom authentication policies or credential scopes to be passed to the client. ([#30739](https://github.com/azure/azure-sdk-for-python/pull/30739/))\n\n## 1.0.1 (2023-04-11)\n\n### bugs fixed\n  - fixed an issue where log entry sizes were miscalculated when chunking. ([#29584](https://github.com/azure/azure-sdk-for-python/pull/29584))\n\n## 1.0.0 (2023-02-16)\n\n### features added\n  - added new `on_error` parameter to the `upload` method to allow users to handle errors in their own way.\n    - an `logsuploaderror` class was added to encapsulate information about the error. an instance of this class is passed to the `on_error` callback.\n  - added io support for upload. now io streams can be passed in using the `logs` parameter. ([#28373](https://github.com/azure/azure-sdk-for-python/pull/28373))\n\n### breaking changes\n  - removed support for max_concurrency\n\n### other changes\n  - removed `msrest` dependency.\n  - added requirement for `isodate>=0.6.0` (`isodate` was required by `msrest`).\n  - added requirement for `typing-extensions>=4.0.1`.\n\n## 1.0.0b1 (2022-07-15)\n\n  ## features\n  - version (1.0.0b1) is the first preview of our efforts to create a user-friendly and pythonic client library for azure monitor ingestion.\n    for more information about this, and preview releases of other azure sdk libraries, please visit https://azure.github.io/azure-sdk/releases/latest/python.html.\n  - added `~azure.monitor.ingestion.logsingestionclient` to send logs to azure monitor along with `~azure.monitor.ingestion.aio.logsingestionclient`.\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-monitor-ingestion",
  "package_url": "https://pypi.org/project/azure-monitor-ingestion/",
  "project_url": "https://pypi.org/project/azure-monitor-ingestion/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python"
  },
  "release_url": "https://pypi.org/project/azure-monitor-ingestion/1.0.3/",
  "requires_dist": [
    "azure-core<2.0.0,>=1.24.0",
    "isodate>=0.6.0",
    "typing-extensions>=4.0.1"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure monitor ingestion client library for python",
  "version": "1.0.3",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_monitor_overview azure_monitor_query azure_monitor_create_using_portal azure_subscription python_logging",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_monitor_ingestion",
  "homepage": "https://github.com/azure/azure-sdk-for-python",
  "release_count": 5,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_isodate",
    "pypi_typing_extensions"
  ]
}
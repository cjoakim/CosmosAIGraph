{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# lightfm\n\n![lightfm logo](lightfm.png)\n\n| build status | |\n|---|---|\n| linux |[![circle ci](https://circleci.com/gh/lyst/lightfm.svg?style=svg)](https://circleci.com/gh/lyst/lightfm)|\n| osx (openmp disabled)|[![travis ci](https://travis-ci.org/lyst/lightfm.svg?branch=master)](https://travis-ci.org/lyst/lightfm)|\n| windows (openmp disabled) |[![appveyor](https://ci.appveyor.com/api/projects/status/6cqpqb6969i1h4p7/branch/master?svg=true)](https://ci.appveyor.com/project/maciejkula/lightfm/branch/master)|\n\n[![gitter chat](https://badges.gitter.im/gitterhq/gitter.png)](https://gitter.im/lightfm-rec/lobby) [![pypi](https://img.shields.io/pypi/v/lightfm.svg)](https://pypi.python.org/pypi/lightfm/)\n[![anaconda-server badge](https://anaconda.org/conda-forge/lightfm/badges/version.svg)](https://anaconda.org/conda-forge/lightfm)\n\nlightfm is a python implementation of a number of popular recommendation algorithms for both implicit and explicit feedback, including efficient implementation of bpr and warp ranking losses. it's easy to use, fast (via multithreaded model estimation), and produces high quality results.\n\nit also makes it possible to incorporate both item and user metadata into the traditional matrix factorization algorithms. it represents each user and item as the sum of the latent representations of their features, thus allowing recommendations to generalise to new items (via item features) and to new users (via user features).\n\nfor more details, see the [documentation](http://lyst.github.io/lightfm/docs/home.html).\n\nneed help? contact me via [email](mailto:lightfm@zoho.com), [twitter](https://twitter.com/maciej_kula), or [gitter](https://gitter.im/lightfm-rec/lobby).\n\n## installation\ninstall from `pip`:\n```\npip install lightfm\n```\nor conda:\n```\nconda install -c conda-forge lightfm\n```\n\n## quickstart\nfitting an implicit feedback model on the movielens 100k dataset is very easy:\n```python\nfrom lightfm import lightfm\nfrom lightfm.datasets import fetch_movielens\nfrom lightfm.evaluation import precision_at_k\n\n# load the movielens 100k dataset. only five\n# star ratings are treated as positive.\ndata = fetch_movielens(min_rating=5.0)\n\n# instantiate and train the model\nmodel = lightfm(loss='warp')\nmodel.fit(data['train'], epochs=30, num_threads=2)\n\n# evaluate the trained model\ntest_precision = precision_at_k(model, data['test'], k=5).mean()\n```\n\n## articles and tutorials on using lightfm\n1. [learning to rank sketchfab models with lightfm](http://blog.ethanrosenthal.com/2016/11/07/implicit-mf-part-2/)\n2. [metadata embeddings for user and item cold-start recommendations](http://building-babylon.net/2016/01/26/metadata-embeddings-for-user-and-item-cold-start-recommendations/)\n3. [recommendation systems - learn python for data science](https://www.youtube.com/watch?v=9gbc9r-msak)\n4. [using lightfm to recommend projects to consultants](https://medium.com/product-at-catalant-technologies/using-lightfm-to-recommend-projects-to-consultants-44084df7321c#.gu887ky51)\n\n## how to cite\nplease cite lightfm if it helps your research. you can use the following bibtex entry:\n```\n@inproceedings{dblp:conf/recsys/kula15,\n  author    = {maciej kula},\n  editor    = {toine bogers and\n               marijn koolen},\n  title     = {metadata embeddings for user and item cold-start recommendations},\n  booktitle = {proceedings of the 2nd workshop on new trends on content-based recommender\n               systems co-located with 9th {acm} conference on recommender systems\n               (recsys 2015), vienna, austria, september 16-20, 2015.},\n  series    = {{ceur} workshop proceedings},\n  volume    = {1448},\n  pages     = {14--21},\n  publisher = {ceur-ws.org},\n  year      = {2015},\n  url       = {http://ceur-ws.org/vol-1448/paper4.pdf},\n}\n```\n\n## development\npull requests are welcome. to install for development:\n\n1. clone the repository: `git clone git@github.com:lyst/lightfm.git`\n2. setup a virtual environment: `cd lightfm && python3 -m venv venv && source ./venv/bin/activate`\n3. install it for development using pip: `pip install -e . && pip install -r test-requirements.txt`\n4. you can run tests by running `./venv/bin/py.test tests`.\n5. lightfm uses [black](https://github.com/ambv/black) to enforce code formatting and flake8 for linting, see `lint-requirements.txt`.\n6. [optional]: you can install pre-commit to locally enfore formatting and linting. install with:\n    ```bash\n    pip install pre-commit\n    pre-commit install\n    ```\n\nwhen making changes to the `.pyx` extension files, you'll need to run `python setup.py cythonize` in order to produce the extension `.c` files before running `pip install -e .`.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "lightfm",
  "package_url": "https://pypi.org/project/lightfm/",
  "project_url": "https://pypi.org/project/lightfm/",
  "project_urls": {
    "Download": "https://github.com/lyst/lightfm/tarball/1.17",
    "Homepage": "https://github.com/lyst/lightfm"
  },
  "release_url": "https://pypi.org/project/lightfm/1.17/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "lightfm recommendation model",
  "version": "1.17",
  "releases": [],
  "developers": [
    "data@ly.st",
    "lyst_ltd"
  ],
  "kwds": "lightfm openmp travis sketchfab git",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_lightfm",
  "homepage": "https://github.com/lyst/lightfm",
  "release_count": 15,
  "dependency_ids": []
}
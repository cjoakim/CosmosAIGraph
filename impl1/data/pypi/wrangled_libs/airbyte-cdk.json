{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# connector development kit \\(python\\)\n\nthe airbyte python cdk is a framework for rapidly developing production-grade airbyte connectors. the cdk currently offers helpers specific for creating airbyte source connectors for:\n\n* http apis \\(rest apis, graphql, etc..\\)\n* singer taps\n* generic python sources \\(anything not covered by the above\\)\n\nthe cdk provides an improved developer experience by providing basic implementation structure and abstracting away low-level glue boilerplate.\n\nthis document is a general introduction to the cdk. readers should have basic familiarity with the [airbyte specification](https://docs.airbyte.com/understanding-airbyte/airbyte-protocol/) before proceeding.\n\n## getting started\n\ngenerate an empty connector using the code generator. first clone the airbyte repository then from the repository root run\n\n```text\ncd airbyte-integrations/connector-templates/generator\n./generate.sh\n```\n\nthen follow the interactive prompt. next, find all `todo`s in the generated project directory -- they're accompanied by lots of comments explaining what you'll need to do in order to implement your connector. upon completing all todos properly, you should have a functioning connector.\n\nadditionally, you can follow [this tutorial](https://docs.airbyte.io/connector-development/tutorials/cdk-tutorial-python-http) for a complete walkthrough of creating an http connector using the airbyte cdk.\n\n### concepts & documentation\n\nsee the [concepts docs](docs/concepts/) for a tour through what the api offers.\n\n### example connectors\n\n**http connectors**:\n\n* [exchangerates api](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-exchange-rates/source_exchange_rates/source.py)\n* [stripe](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-stripe/source_stripe/source.py)\n* [slack](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-slack/source_slack/source.py)\n\n**singer connectors**:\n\n* [salesforce](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-salesforce-singer/source_salesforce_singer/source.py)\n* [github](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-github-singer/source_github_singer/source.py)\n\n**simple python connectors using the barebones `source` abstraction**:\n\n* [google sheets](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-google-sheets/google_sheets_source/google_sheets_source.py)\n* [mailchimp](https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-mailchimp/source_mailchimp/source.py)\n\n## contributing\n\n### first time setup\n\nwe assume `python` points to python &gt;=3.8.\n\nsetup a virtual env:\n\n```text\npython -m venv .venv\nsource .venv/bin/activate\npip install -e \".[dev]\" # [dev] installs development-only dependencies\n```\n\n#### iteration\n\n* iterate on the code locally\n* run tests via `python -m pytest -s unit_tests`\n* perform static type checks using `mypy airbyte_cdk`. `mypy` configuration is in `mypy.ini`.\n * run `mypy <files to check>` to only check specific files. this is useful as the cdk still contains code that is not compliant.\n* the `type_check_and_test.sh` script bundles both type checking and testing in one convenient command. feel free to use it!\n\n##### autogenerated files\nif the iteration you are working on includes changes to the models, you might want to regenerate them. in order to do that, you can run:\n```commandline\n./gradlew :airbyte-cdk:python:format\n```\nthis will generate the files based on the schemas, add the license information and format the code. if you want to only do the former and rely on\npre-commit to the others, you can run the appropriate generation command i.e. `./gradlew generatecomponentmanifestclassfiles`.\n\n#### testing\n\nall tests are located in the `unit_tests` directory. run `python -m pytest --cov=airbyte_cdk unit_tests/` to run them. this also presents a test coverage report.\n\n#### building and testing a connector with your local cdk\n\nwhen developing a new feature in the cdk, you may find it helpful to run a connector that uses that new feature. you can test this in one of two ways:\n* running a connector locally\n* building and running a source via docker\n\n##### installing your local cdk into a local python connector\n\nin order to get a local python connector running your local cdk, do the following.\n\nfirst, make sure you have your connector's virtual environment active:\n```bash\n# from the `airbyte/airbyte-integrations/connectors/<connector-directory>` directory\nsource .venv/bin/activate\n\n# if you haven't installed dependencies for your connector already\npip install -e .\n```\n\nthen, navigate to the cdk and install it in editable mode:\n```bash\ncd ../../../airbyte-cdk/python\npip install -e .\n```\n\nyou should see that `pip` has uninstalled the version of `airbyte-cdk` defined by your connector's `setup.py` and installed your local cdk. any changes you make will be immediately reflected in your editor, so long as your editor's interpreter is set to your connector's virtual environment.\n\n##### building a python connector in docker with your local cdk installed\n_pre-requisite: install the [`airbyte-ci` cli](https://github.com/airbytehq/airbyte/blob/master/airbyte-ci/connectors/pipelines/readme.md)_\n\nyou can build your connector image with the local cdk using\n```bash\n# from the airbytehq/airbyte base directory\nairbyte-ci connectors --use-local-cdk --name=<connector> build\n```\nnote that the local cdk is injected at build time, so if you make changes, you will have to run the build command again to see them reflected.\n\n##### running connector acceptance tests for a single connector in docker with your local cdk installed\n_pre-requisite: install the [`airbyte-ci` cli](https://github.com/airbytehq/airbyte/blob/master/airbyte-ci/connectors/pipelines/readme.md)_\n\nto run acceptance tests for a single connectors using the local cdk, from the connector directory, run\n```bash\nairbyte-ci connectors --use-local-cdk --name=<connector> test\n```\n\n#### when you don't have access to the api\nthere can be some time where you do not have access to the api (either because you don't have the credentials, network access, etc...) you will probably still want to do end-to-end testing at least once. in order to do so, you can emulate the server you would be reaching using a server stubbing tool.\n\nfor example, using [mockserver](https://www.mock-server.com/), you can set up an expectation file like this:\n```\n{\n  \"httprequest\": {\n    \"method\": \"get\",\n    \"path\": \"/data\"\n  },\n  \"httpresponse\": {\n    \"body\": \"{\\\"data\\\": [{\\\"record_key\\\": 1}, {\\\"record_key\\\": 2}]}\"\n  }\n}\n```\n\nassuming this file has been created at `secrets/mock_server_config/expectations.json`, running the following command will allow to match any requests on path `/data` to return the response defined in the expectation file:\n`docker run -d --rm -v $(pwd)/secrets/mock_server_config:/config -p 8113:8113 --env mockserver_log_level=trace --env mockserver_server_port=8113 --env mockserver_watch_initialization_json=true --env mockserver_persisted_expectations_path=/config/expectations.json --env mockserver_initialization_json_path=/config/expectations.json mockserver/mockserver:5.15.0`\n\nhttp requests to `localhost:8113/data` should now return the body defined in the expectations file. to test this, the implementer either has to change the code which defines the base url for python source or update the `url_base` from low-code. with the connector builder running in docker, you will have to use domain `host.docker.internal` instead of `localhost` as the requests are executed within docker.\n\n#### publishing a new version to pypi\n\n1. open a pr\n2. once it is approved and **merged**, an airbyte member must run the `publish cdk manually` workflow from master using `release-type=major|manor|patch` and setting the changelog message.\n\n## coming soon\n\n* full oauth 2.0 support \\(including refresh token issuing flow via ui or cli\\)\n* airbyte java http cdk\n* cdk for async http endpoints \\(request-poll-wait style endpoints\\)\n* cdk for other protocols\n* don't see a feature you need? [create an issue and let us know how we can help!](https://github.com/airbytehq/airbyte/issues/new?assignees=&labels=type%2fenhancement&template=feature-request.md&title=)\n",
  "docs_url": null,
  "keywords": "airbyte connector-development-kit cdk",
  "license": "mit",
  "name": "airbyte-cdk",
  "package_url": "https://pypi.org/project/airbyte-cdk/",
  "project_url": "https://pypi.org/project/airbyte-cdk/",
  "project_urls": {
    "Documentation": "https://docs.airbyte.io/",
    "Homepage": "https://github.com/airbytehq/airbyte",
    "Source": "https://github.com/airbytehq/airbyte",
    "Tracker": "https://github.com/airbytehq/airbyte/issues"
  },
  "release_url": "https://pypi.org/project/airbyte-cdk/0.58.1/",
  "requires_dist": [
    "airbyte-protocol-models ==0.5.1",
    "backoff",
    "dpath ~=2.0.1",
    "isodate ~=0.6.1",
    "jsonschema ~=3.2.0",
    "jsonref ~=0.2",
    "pendulum <3.0.0",
    "genson ==1.2.2",
    "pydantic <2.0.0,>=1.10.8",
    "pyrate-limiter ~=3.1.0",
    "python-dateutil",
    "PyYAML >=6.0.1",
    "requests",
    "requests-cache",
    "Deprecated ~=1.2",
    "Jinja2 ~=3.1.2",
    "cachetools",
    "wcmatch ==8.4",
    "avro ~=1.11.2 ; extra == 'dev'",
    "fastavro ~=1.8.0 ; extra == 'dev'",
    "freezegun ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-mock ; extra == 'dev'",
    "requests-mock ; extra == 'dev'",
    "pytest-httpserver ; extra == 'dev'",
    "pandas ==2.0.3 ; extra == 'dev'",
    "pyarrow ==12.0.1 ; extra == 'dev'",
    "langchain ==0.0.271 ; extra == 'dev'",
    "openai[embeddings] ==0.27.9 ; extra == 'dev'",
    "cohere ==4.21 ; extra == 'dev'",
    "tiktoken ==0.4.0 ; extra == 'dev'",
    "unstructured ==0.10.27 ; extra == 'dev'",
    "unstructured[docx,pptx] ==0.10.27 ; extra == 'dev'",
    "pdf2image ==1.16.3 ; extra == 'dev'",
    "pdfminer.six ==20221105 ; extra == 'dev'",
    "unstructured.pytesseract >=0.3.12 ; extra == 'dev'",
    "pytesseract ==0.3.10 ; extra == 'dev'",
    "markdown ; extra == 'dev'",
    "avro ~=1.11.2 ; extra == 'file-based'",
    "fastavro ~=1.8.0 ; extra == 'file-based'",
    "pyarrow ==12.0.1 ; extra == 'file-based'",
    "unstructured ==0.10.27 ; extra == 'file-based'",
    "unstructured[docx,pptx] ==0.10.27 ; extra == 'file-based'",
    "pdf2image ==1.16.3 ; extra == 'file-based'",
    "pdfminer.six ==20221105 ; extra == 'file-based'",
    "unstructured.pytesseract >=0.3.12 ; extra == 'file-based'",
    "pytesseract ==0.3.10 ; extra == 'file-based'",
    "markdown ; extra == 'file-based'",
    "Sphinx ~=4.2 ; extra == 'sphinx-docs'",
    "sphinx-rtd-theme ~=1.0 ; extra == 'sphinx-docs'",
    "langchain ==0.0.271 ; extra == 'vector-db-based'",
    "openai[embeddings] ==0.27.9 ; extra == 'vector-db-based'",
    "cohere ==4.21 ; extra == 'vector-db-based'",
    "tiktoken ==0.4.0 ; extra == 'vector-db-based'"
  ],
  "requires_python": ">=3.8",
  "summary": "a framework for writing airbyte connectors.",
  "version": "0.58.1",
  "releases": [],
  "developers": [
    "airbyte",
    "contact@airbyte.io"
  ],
  "kwds": "airbyte_cdk cdk airbytehq airbyte documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_airbyte_cdk",
  "homepage": "https://github.com/airbytehq/airbyte",
  "release_count": 321,
  "dependency_ids": [
    "pypi_airbyte_protocol_models",
    "pypi_avro",
    "pypi_backoff",
    "pypi_cachetools",
    "pypi_cohere",
    "pypi_deprecated",
    "pypi_dpath",
    "pypi_fastavro",
    "pypi_freezegun",
    "pypi_genson",
    "pypi_isodate",
    "pypi_jinja2",
    "pypi_jsonref",
    "pypi_jsonschema",
    "pypi_langchain",
    "pypi_markdown",
    "pypi_mypy",
    "pypi_openai",
    "pypi_pandas",
    "pypi_pdf2image",
    "pypi_pdfminer.six",
    "pypi_pendulum",
    "pypi_pyarrow",
    "pypi_pydantic",
    "pypi_pyrate_limiter",
    "pypi_pytesseract",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_httpserver",
    "pypi_pytest_mock",
    "pypi_python_dateutil",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_requests_cache",
    "pypi_requests_mock",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_tiktoken",
    "pypi_unstructured",
    "pypi_unstructured.pytesseract",
    "pypi_wcmatch"
  ]
}
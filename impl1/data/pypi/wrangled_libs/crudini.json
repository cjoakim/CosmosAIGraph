{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: system :: systems administration",
    "topic :: utilities"
  ],
  "description": "# crudini - a utility for manipulating ini files\n\n## usage:\n```\ncrudini --set [option]...   config_file section   [param] [value]\ncrudini --get [option]...   config_file [section] [param]\ncrudini --del [option]...   config_file section   [param] [list value]\ncrudini --merge [option]... config_file [section]\n\nsection can be empty (\"\") or \"default\" in which case,\nparams not in a section, i.e. global parameters are operated on.\nif 'default' is used with --set, an explicit [default] section is added.\n\nmultiple --set|--del|--get operations for a config_file can be specified.\n\n```\n## options:\n```\n\n  --existing[=what]  for --set, --del and --merge, fail if item is missing,\n                       where what is 'file', 'section', or 'param',\n                       or if what not specified; all specified items.\n  --format=fmt       for --get, select the output fmt.\n                       formats are 'sh','ini','lines'\n  --ini-options=opt  set options for handling ini files.  options are:\n                       'nospace': use format name=value not name = value\n                       'ignoreindent': ignore leading whitespace\n  --inplace          lock and write files in place.\n                       this is not atomic but has less restrictions\n                       than the default replacement method.\n  --list             for --set and --del, update a list (set) of values\n  --list-sep=str     delimit list values with \"str\" instead of \" ,\".\n                       an empty str means any whitespace is a delimiter.\n  --output=file      write output to file instead. '-' means stdout\n  --verbose          indicate on stderr if changes were made\n  --help             write this help to stdout\n  --version          write version to stdout\n\n```\n## examples:\n```\n\n# add/update a var\n  crudini --set config_file section parameter value\n\n# add/update a var in the root or global area.\n# i.e. that's not under a [section].\n  crudini --set config_file \"\" parameter value\n\n# update an existing var\n  crudini --set --existing config_file section parameter value\n\n# add/update/delete multiple variables atomically\n  crudini --set config_file section parameter1 value \\\n          --set config_file section parameter2 value \\\n          --del config_file section parameter3\n\n# get multiple items from stdin\n  env | crudini --get - '' user --get - '' shell\n\n# add/append a value to a comma separated list\n# note any whitespace around commas is ignored\n  crudini --set --list config_file section parameter a_value\n\n# add/append a value to a whitespace separated list\n# note multiline lists are supported (as newline is whitespace)\n  crudini --set --list --list-sep= config_file section parameter a_value\n\n# delete a var\n  crudini --del config_file section parameter\n\n# delete a section\n  crudini --del config_file section\n\n# output a value\n  crudini --get config_file section parameter\n\n# output a global value not in a section\n  crudini --get config_file \"\" parameter\n\n# output a section\n  crudini --get config_file section\n\n# output a section, parseable by shell\n  eval \"$(crudini --get --format=sh config_file section)\"\n\n# update an ini file from shell variable(s)\n  echo name=\"$name\" | crudini --merge config_file section\n\n# merge an ini file from another ini\n  crudini --merge config_file < another.ini\n\n# compare two ini files using standard unix text processing\n  diff <(crudini --get --format=lines file1.ini|sort) \\\n       <(crudini --get --format=lines file2.ini|sort)\n\n# rewrite ini file to use name=value format rather than name = value\n  crudini --ini-options=nospace --set config_file \"\"\n\n# add/update a var, ensuring complete file in name=value format\n  crudini --ini-options=nospace --set config_file section parameter value\n\n# read indented ini file, like .gitconfig\n  crudini --ini-options=ignoreindent --format=lines --get ~/.gitconfig\n```\n## installation\n\non windows ensure a python interpreter is installed.\nfor example installing from https://www.python.org/downloads/\nwill put the py launcher and pip in the path.\n\nthen ensure the iniparse module is installed by\nrunning the following from a \"cmd\" prompt:\n\n```\npip install iniparse\n```\n\nthen crudini can be invoked by downloading just the crudini.py\nfile and running like:\n\n```\npy crudini.py --help\n```\n\non linux systems crudini is generally available from your standard\npackage manager, and installing will also ensure the iniparse\ndependency is appropriately installed on your system.\nyou can also download and run the single crudini.py file directly\nto use latest version.\n",
  "docs_url": null,
  "keywords": "ini,config,edit",
  "license": "gplv2",
  "name": "crudini",
  "package_url": "https://pypi.org/project/crudini/",
  "project_url": "https://pypi.org/project/crudini/",
  "project_urls": {
    "Homepage": "http://github.com/pixelb/crudini"
  },
  "release_url": "https://pypi.org/project/crudini/0.9.5/",
  "requires_dist": [
    "iniparse >=0.5"
  ],
  "requires_python": "",
  "summary": "a utility for manipulating ini files",
  "version": "0.9.5",
  "releases": [],
  "developers": [
    "p@draigbrady.com"
  ],
  "kwds": "config_file crudini config parameter3 parameters",
  "license_kwds": "gplv2",
  "libtype": "pypi",
  "id": "pypi_crudini",
  "homepage": "http://github.com/pixelb/crudini",
  "release_count": 10,
  "dependency_ids": [
    "pypi_iniparse"
  ]
}
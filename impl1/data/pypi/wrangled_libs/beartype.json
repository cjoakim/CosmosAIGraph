{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: code generators",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance",
    "typing :: typed"
  ],
  "description": ".. # ------------------( license                             )------------------\n.. # copyright (c) 2014-2023 beartype authors.\n.. # see \"license\" for further details.\n.. #\n.. # ------------------( seo                                 )------------------\n.. # metadata converted into html-specific meta tags parsed by search engines.\n.. # note that:\n.. # * the \"description\" should be no more than 300 characters and ideally no\n.. #   more than 150 characters, as search engines may silently truncate this\n.. #   description to 150 characters in edge cases.\n\n.. meta::\n   :description lang=en:\n     beartype is an open-source pure-python pep-compliant constant-time runtime\n     type checker emphasizing efficiency and portability.\n\n.. # ------------------( synopsis                            )------------------\n\n=================\n|beartype-banner|\n=================\n\n|rtd-badge| |ci-badge| |codecov-badge|\n\n    \u26a0\n\n    `beartype documentation lives at readthedocs (rtd) <beartype rtd_>`__. it's\n    readable, structured, and soothing to the deep folds of your big galactic\n    brain. open your mind to an ocean of mundane knowledge that will exhaust\n    you at work. enter... **the bearpedia:**\n\n        https://beartype.readthedocs.io\n\n    the document you are now reading was once a monolithic ~316kb file known to\n    induce migraines in 22% of the whole devops population. for your safety,\n    that document no longer exists. this is how much beartype cares.\n\n**beartype** is an `open-source <beartype license_>`__ `pure-python <beartype\npure_>`__ `pep-compliant <beartype peps_>`__ `near-real-time <beartype faq_>`__\n`hybrid runtime-static <beartype hybrid_>`__ `third-generation <beartype\nthird_>`__ `type checker <beartype eli5_>`__ emphasizing efficiency,\nusability, unsubstantiated jargon we just made up, and thrilling puns.\n\n.. #fixme: once we actually receive a sponsor at this tier, please remove this\n.. #placeholder as well as the icon links below. kthx\n.. #the `bear team <beartype organization_>`__ gratefully thanks `our family of\n.. #breathtaking github sponsors <beartype sponsorship_>`__:\n.. #\n.. #* **your iconic url here.** `let us bestow you with eyeballs <beartype\n.. #  sponsorship_>`__.\n.. #fixme: once we actually receive a sponsor at this tier, please remove this\n.. #placeholder as well as the icon links below. kthx\n.. #    |icon-for-glorious-sponsor|\n\n.. code-block:: bash\n\n   # install beartype.\n   $ pip3 install beartype\n   # edit the \"{your_package}.__init__\" submodule with your favourite ide.\n   $ vim {your_package}/__init__.py      # <-- so, i see that you too vim\n\n.. code-block:: python\n\n   from beartype.claw import beartype_this_package       # <-- hype comes\n   beartype_this_package()                               # <-- hype goes\n\nbeartype now implicitly type-checks *all* annotated classes, callables, and\nvariable assignments across *all* submodules of ``{your_package}``. congrats.\nthis day all bugs die. :superscript:`...server slowly crashes`\n\nbeartype also publishes a `plethora of apis for fine-grained control over\ntype-checking <beartype apis>`. for those who are about to qa, beartype salutes\nyou. would you like to know more?\n\n   # so let's do this.\n   $ python3\n\n.. code-block:: python\n\n   # ....................{ raise the paw                   }....................\n   # manually enforce type hints across individual classes and callables.\n   # do this only if you want a(nother) repetitive stress injury.\n\n   # import the @beartype decorator.\n   >>> from beartype import beartype      # <-- eponymous import; it's eponymous\n\n   # annotate @beartype-decorated classes and callables with type hints.\n   >>> @beartype                          # <-- you too will believe in magic\n   ... def quote_wiggum(lines: list[str]) -> none:\n   ...     print('\u201c{}\u201d\\n\\t\u2014 police chief wiggum'.format(\"\\n \".join(lines)))\n\n   # call those callables with valid parameters.\n   >>> quote_wiggum([\"okay, folks. show's over!\", \" nothing to see here. show's\u2026\",])\n   \u201cokay, folks. show's over!\n    nothing to see here. show's\u2026\u201d\n      \u2014 police chief wiggum\n\n   # call those callables with invalid parameters.\n   >>> quote_wiggum([b\"oh, my god! a horrible plane crash!\", b\"hey, everybody! get a load of this flaming wreckage!\",])\n   traceback (most recent call last):\n     file \"<stdin>\", line 1, in <module>\n     file \"<string>\", line 30, in quote_wiggum\n     file \"/home/springfield/beartype/lib/python3.9/site-packages/beartype/_decor/_code/_pep/_error/errormain.py\", line 220, in get_beartype_violation\n       raise exception_cls(\n   beartype.roar.beartypecallhintparamviolation: @beartyped\n   quote_wiggum() parameter lines=[b'oh, my god! a horrible plane\n   crash!', b'hey, everybody! get a load of thi...'] violates type hint\n   list[str], as list item 0 value b'oh, my god! a horrible plane crash!'\n   not str.\n\n   # ....................{ make it so                      }....................\n   # squash bugs by refining type hints with @beartype validators.\n   >>> from beartype.vale import is  # <---- validator factory\n   >>> from typing import annotated  # <---------------- if python \u2265 3.9.0\n   # >>> from typing_extensions import annotated   # <-- if python < 3.9.0\n\n   # validators are type hints constrained by lambda functions.\n   >>> listofstrings = annotated[  # <----- type hint matching non-empty list of strings\n   ...     list[str],  # <----------------- type hint matching possibly empty list of strings\n   ...     is[lambda lst: bool(lst)]  # <-- lambda matching non-empty object\n   ... ]\n\n   # annotate @beartype-decorated callables with validators.\n   >>> @beartype\n   ... def quote_wiggum_safer(lines: listofstrings) -> none:\n   ...     print('\u201c{}\u201d\\n\\t\u2014 police chief wiggum'.format(\"\\n \".join(lines)))\n\n   # call those callables with invalid parameters.\n   >>> quote_wiggum_safer([])\n   beartype.roar.beartypecallhintparamviolation: @beartyped\n   quote_wiggum_safer() parameter lines=[] violates type hint\n   typing.annotated[list[str], is[lambda lst: bool(lst)]], as value []\n   violates validator is[lambda lst: bool(lst)].\n\n   # ....................{ at any time                     }....................\n   # type-check anything against any type hint \u2013 anywhere at anytime.\n   >>> from beartype.door import (\n   ...     is_bearable,  # <-------- like \"isinstance(...)\"\n   ...     die_if_unbearable,  # <-- like \"assert isinstance(...)\"\n   ... )\n   >>> is_bearable(['the', 'goggles', 'do', 'nothing.'], list[str])\n   true\n   >>> die_if_unbearable([0xcafebeef, 0x8badf00d], listofstrings)\n   beartype.roar.beartypedoorhintviolation: object [3405692655, 2343432205]\n   violates type hint typing.annotated[list[str], is[lambda lst: bool(lst)]],\n   as list index 0 item 3405692655 not instance of str.\n\n   # ....................{ go to plaid                     }....................\n   # type-check anything in around 1\u00b5s (one millionth of a second) \u2013 including\n   # this list of one million 2-tuples of numpy arrays.\n   >>> from beartype.door import is_bearable\n   >>> from numpy import array, ndarray\n   >>> data = [(array(i), array(i)) for i in range(1000000)]\n   >>> %time is_bearable(data, list[tuple[ndarray, ndarray]])\n       cpu times: user 31 \u00b5s, sys: 2 \u00b5s, total: 33 \u00b5s\n       wall time: 36.7 \u00b5s\n   true\n\nbeartype brings rust_- and `c++`_-inspired `zero-cost abstractions <zero-cost\nabstraction_>`__ into the lawless world of `dynamically-typed`_ python by\n`enforcing type safety at the granular level of functions and methods <beartype\neli5_>`__ against `type hints standardized by the python community <beartype\npeps_>`__ in `o(1) non-amortized worst-case time with negligible constant\nfactors <beartype math_>`__. if the prior sentence was unreadable jargon, `see\nour friendly and approachable faq for a human-readable synopsis <beartype\nfaq_>`__.\n\nbeartype is `portably implemented <beartype codebase_>`__ in `python 3\n<python_>`__, `continuously stress-tested <beartype tests_>`__ via `github\nactions`_ **\u00d7** tox_ **\u00d7** pytest_ **\u00d7** codecov_, and `permissively\ndistributed <beartype license_>`__ under the `mit license`_. beartype has *no*\nruntime dependencies, `only one test-time dependency <pytest_>`__, and `only\none documentation-time dependency <sphinx_>`__. beartype supports `all actively\ndeveloped python versions <python status_>`__, `all python package managers\n<beartype install_>`__, and `multiple platform-specific package managers\n<beartype install_>`__.\n\n.. # fixme: gah! libraries.io has fallen down and cannot get back up... *again.*\n.. #     beartype `powers quality assurance across the python ecosystem <beartype\n.. #     dependents_>`__.\n\n.. # fixme: remove *all* of the following urls except those specifically\n.. # required above -- which should be most of them, frankly.\n\n.. # ------------------( images                              )------------------\n.. |beartype-banner| image:: https://raw.githubusercontent.com/beartype/beartype-assets/main/banner/logo.png\n   :target: https://beartype.readthedocs.io\n   :alt: beartype \u2014[ the bare-metal type checker ]\u2014\n.. |beartype-contributors| image:: https://contrib.rocks/image?repo=beartype/beartype\n   :target: https://github.com/beartype/beartype/graphs/contributors\n   :alt: beartype contributors\n.. |beartype-stars| image:: https://star-history.com/#beartype/beartype&date\n   :target: https://github.com/beartype/beartype/stargazers\n   :alt: beartype stargazers\n\n.. # ------------------( images ~ badge                      )------------------\n.. |bear-ified| image:: https://raw.githubusercontent.com/beartype/beartype-assets/main/badge/bear-ified.svg\n   :align: top\n   :target: https://beartype.readthedocs.io\n   :alt: bear-ified\n.. |ci-badge| image:: https://github.com/beartype/beartype/workflows/test/badge.svg\n   :target: https://github.com/beartype/beartype/actions?workflow=test\n   :alt: beartype continuous integration (ci) status\n.. |codecov-badge| image:: https://codecov.io/gh/beartype/beartype/branch/main/graph/badge.svg?token=e6f4ysy9zq\n   :target: https://codecov.io/gh/beartype/beartype\n   :alt: beartype test coverage status\n.. |rtd-badge| image:: https://readthedocs.org/projects/beartype/badge/?version=latest\n   :target: https://beartype.readthedocs.io/en/latest/?badge=latest\n   :alt: beartype read the docs (rtd) status\n\n.. # ------------------( images ~ downstream                 )------------------\n.. # insert links to github sponsors funding at the icon level here, please!\n\n.. # ------------------( links ~ beartype : funding          )------------------\n.. _betse:\n   https://github.com/betsee/betse\n.. _betsee:\n   https://github.com/betsee/betsee\n.. _github sponsors:\n   https://github.com/sponsors/leycec\n.. _paul allen:\n   https://en.wikipedia.org/wiki/paul_allen\n.. _paul allen discovery center:\n   http://www.alleninstitute.org/what-we-do/frontiers-group/discovery-centers/allen-discovery-center-tufts-university\n.. _paul allen discovery center award:\n   https://www.alleninstitute.org/what-we-do/frontiers-group/news-press/press-resources/press-releases/paul-g-allen-frontiers-group-announces-allen-discovery-center-tufts-university\n.. _paul g. allen frontiers group:\n   https://www.alleninstitute.org/what-we-do/frontiers-group\n.. _tufts university:\n   https://www.tufts.edu\n.. _beartype sponsorship:\n   https://github.com/sponsors/leycec\n\n.. # ------------------( links ~ beartype : local            )------------------\n.. _beartype license:\n   license\n\n.. # ------------------( links ~ beartype : local : module   )------------------\n.. _beartype errormain:\n   beartype/_decor/_code/_pep/_error/errormain.py\n.. _beartype pephint:\n   beartype/_decor/_code/_pep/_pephint.py\n.. _beartype test data pep:\n   beartype_test/unit/data/hint/pep/proposal/\n.. _beartype test data pep 484:\n   beartype_test/unit/data/hint/pep/proposal/data_hintpep484.py\n.. _@callable_cached:\n   beartype/_util/cache/utilcachecall.py\n.. _beartype util data pep:\n   beartype/_util/hint/data/pep/proposal/\n.. _beartype util data pep parent:\n   beartype/_util/hint/data/pep/utilhintdatapep.py\n.. _beartype util pep:\n   beartype/_util/hint/pep/proposal\n\n.. # ------------------( links ~ beartype : package          )------------------\n.. _beartype anaconda:\n   https://anaconda.org/conda-forge/beartype\n.. _beartype gentoo:\n   https://github.com/leycec/raiagent\n.. _beartype homebrew:\n   https://github.com/beartype/homebrew-beartype\n.. _beartype macports:\n   https://ports.macports.org/port/py-beartype\n.. _beartype pypi:\n   https://pypi.org/project/beartype\n\n.. # ------------------( links ~ beartype : package : meta   )------------------\n.. _libraries.io:\n   https://libraries.io\n.. _beartype dependents:\n   https://libraries.io/pypi/beartype/dependents\n\n.. # ------------------( links ~ beartype : github           )------------------\n.. _beartype:\n   https://github.com/beartype/beartype\n.. _beartype issues:\n   https://github.com/beartype/beartype/issues\n.. _beartype 1.0.0:\n   https://github.com/beartype/beartype/issues/7\n.. _beartype codebase:\n   https://github.com/beartype/beartype/tree/main/beartype\n.. _beartype organization:\n   https://github.com/beartype\n.. _beartype profiler:\n   https://github.com/beartype/beartype/blob/main/bin/profile.bash\n.. _beartype pulls:\n   https://github.com/beartype/beartype/pulls\n.. _beartype tests:\n   https://github.com/beartype/beartype/actions?workflow=tests\n\n.. # ------------------( links ~ beartype : github : user    )------------------\n.. _patrick-kidger:\n   https://github.com/patrick-kidger\n.. _harens:\n   https://github.com/harens\n.. _leycec:\n   https://github.com/leycec\n\n.. # ------------------( links ~ beartype : rtd              )------------------\n.. _beartype apis:\n   https://beartype.readthedocs.io/en/latest/api\n.. _beartype rtd:\n   https://beartype.readthedocs.io\n.. _beartype eli5:\n   https://beartype.readthedocs.io/en/latest/eli5\n.. _beartype faq:\n   https://beartype.readthedocs.io/en/latest/faq\n.. _beartype peps:\n   https://beartype.readthedocs.io/en/latest/pep\n.. _beartype hybrid:\n   https://beartype.readthedocs.io/en/latest/faq/#faq-hybrid\n.. _beartype install:\n   https://beartype.readthedocs.io/en/latest/install\n.. _beartype math:\n   https://beartype.readthedocs.io/en/latest/math\n.. _beartype pure:\n   https://beartype.readthedocs.io/en/latest/faq/#faq-pure\n.. _beartype third:\n   https://beartype.readthedocs.io/en/latest/faq/#faq-third\n\n.. # ------------------( links ~ github                      )------------------\n.. _github actions:\n   https://github.com/features/actions\n.. _github account signin:\n   https://github.com/login\n.. _github account signup:\n   https://github.com/join\n.. _gitter:\n   https://gitter.im\n\n.. # ------------------( links ~ idea                        )------------------\n.. _denial-of-service:\n   https://en.wikipedia.org/wiki/denial-of-service_attack\n.. _dry:\n   https://en.wikipedia.org/wiki/don%27t_repeat_yourself\n.. _ide:\n   https://en.wikipedia.org/wiki/integrated_development_environment\n.. _jit:\n   https://en.wikipedia.org/wiki/just-in-time_compilation\n.. _sqa:\n   https://en.wikipedia.org/wiki/software_quality_assurance\n.. _amortized analysis:\n   https://en.wikipedia.org/wiki/amortized_analysis\n.. _computer vision:\n   https://en.wikipedia.org/wiki/computer_vision\n.. _continuous integration:\n   https://en.wikipedia.org/wiki/continuous_integration\n.. _duck typing:\n   https://en.wikipedia.org/wiki/duck_typing\n.. _gratis versus libre:\n   https://en.wikipedia.org/wiki/gratis_versus_libre\n.. _memory safety:\n   https://en.wikipedia.org/wiki/memory_safety\n.. _multiple dispatch:\n   https://en.wikipedia.org/wiki/multiple_dispatch\n.. _near-real-time:\n   https://en.wikipedia.org/wiki/real-time_computing#near_real-time\n.. _random walk:\n   https://en.wikipedia.org/wiki/random_walk\n.. _real-time:\n   https://en.wikipedia.org/wiki/real-time_computing\n.. _set theory:\n   https://en.wikipedia.org/wiki/set_theory\n.. _shield wall:\n   https://en.wikipedia.org/wiki/shield_wall\n.. _dynamic typing:\n.. _dynamically-typed:\n.. _static typing:\n.. _statically-typed:\n   https://en.wikipedia.org/wiki/type_system\n.. _topological sort:\n   https://en.wikipedia.org/wiki/topological_sorting\n.. _type inference:\n   https://en.wikipedia.org/wiki/type_inference\n.. _zero-cost abstraction:\n   https://boats.gitlab.io/blog/post/zero-cost-abstractions\n\n.. # ------------------( links ~ kipling                     )------------------\n.. _the jungle book:\n   https://www.gutenberg.org/files/236/236-h/236-h.htm\n.. _shere khan:\n   https://en.wikipedia.org/wiki/shere_khan\n\n.. # ------------------( links ~ math                        )------------------\n.. _euler\u2013mascheroni constant:\n   https://en.wikipedia.org/wiki/euler%e2%80%93mascheroni_constant\n.. _coupon collector's problem:\n   https://en.wikipedia.org/wiki/coupon_collector%27s_problem\n.. _big o:\n   https://en.wikipedia.org/wiki/big_o_notation\n\n.. # ------------------( links ~ math : set                  )------------------\n.. _conjunction:\n   https://en.wikipedia.org/wiki/logical_conjunction\n.. _disjunction:\n   https://en.wikipedia.org/wiki/logical_disjunction\n.. _intersection:\n   https://en.wikipedia.org/wiki/intersection_(set_theory)\n.. _relative set complement:\n   https://en.wikipedia.org/wiki/complement_(set_theory)#relative_complement\n\n.. # ------------------( links ~ math : type                 )------------------\n.. _covariance:\n   https://en.wikipedia.org/wiki/covariance_and_contravariance_(computer_science)\n\n.. # ------------------( links ~ meme                        )------------------\n.. _rngesus:\n   https://knowyourmeme.com/memes/rngesus\n.. _goes up to eleven:\n   https://www.youtube.com/watch?v=umsv4oteqbe\n.. _greased lightning:\n   https://www.youtube.com/watch?v=h-kl8a4rnq8\n.. _ludicrous speed:\n   https://www.youtube.com/watch?v=6ttvklmxefe\n.. _the gripping hand:\n   http://catb.org/jargon/html/o/on-the-gripping-hand.html\n\n.. # ------------------( links ~ os : linux                  )------------------\n.. _gentoo:\n   https://www.gentoo.org\n\n.. # ------------------( links ~ os : macos                  )------------------\n.. _macos:\n   https://en.wikipedia.org/wiki/macos\n.. _homebrew:\n   https://brew.sh\n.. _macports:\n   https://www.macports.org\n\n.. # ------------------( links ~ other                       )------------------\n.. _heliotrope:\n   https://en.wikipedia.org/wiki/heliotropium\n\n.. # ------------------( links ~ py                          )------------------\n.. _python:\n   https://www.python.org\n.. _python status:\n   https://devguide.python.org/#status-of-python-branches\n.. _pip:\n   https://pip.pypa.io\n\n.. # ------------------( links ~ py : cli                    )------------------\n.. _-o:\n   https://docs.python.org/3/using/cmdline.html#cmdoption-o\n.. _pythonoptimize:\n   https://docs.python.org/3/using/cmdline.html#envvar-pythonoptimize\n\n.. # ------------------( links ~ py : interpreter            )------------------\n.. _brython:\n   https://brython.info\n.. _cpython:\n   https://github.com/python/cpython\n.. _nuitka:\n   https://nuitka.net\n.. _numba:\n   https://numba.pydata.org\n.. _pypy:\n   https://www.pypy.org\n\n.. # ------------------( links ~ py : interpreter : cpython  )------------------\n.. _cpython bug tracker:\n   https://github.com/python/cpython/issues\n\n.. # ------------------( links ~ py : lang                   )------------------\n.. _generic alias parameters:\n   https://docs.python.org/3/library/stdtypes.html#genericalias.__parameters__\n.. _isinstancecheck:\n   https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks\n.. _mro:\n   https://docs.python.org/3/library/stdtypes.html#class.__mro__\n.. _object:\n   https://docs.python.org/3/reference/datamodel.html#basic-customization\n.. _operator precedence:\n   https://docs.python.org/3/reference/expressions.html#operator-precedence\n\n.. # ------------------( links ~ py : misc                   )------------------\n.. _guido van rossum:\n   https://en.wikipedia.org/wiki/guido_van_rossum\n.. _realpython:\n   https://realpython.com/python-type-checking\n\n.. # ------------------( links ~ py : package                )------------------\n.. _django:\n   https://www.djangoproject.com\n.. _networkx:\n   https://networkx.org\n.. _pandas:\n   https://pandas.pydata.org\n.. _pytorch:\n   https://pytorch.org\n.. _sympy:\n   https://www.sympy.org\n.. _numerary:\n   https://github.com/posita/numerary\n.. _pyenv:\n   https://operatingops.org/2020/10/24/tox-testing-multiple-python-versions-with-pyenv\n.. _typing_extensions:\n   https://pypi.org/project/typing-extensions\n\n.. # ------------------( links ~ py : package : boto3        )------------------\n.. _boto3:\n   https://aws.amazon.com/sdk-for-python\n.. _bearboto3:\n   https://github.com/beartype/bearboto3\n.. _mypy-boto3:\n   https://mypy-boto3.readthedocs.io\n\n.. # ------------------( links ~ py : package : jax          )------------------\n.. _jax.numpy:\n   https://jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html\n\n.. # ------------------( links ~ py : package : numpy        )------------------\n.. _numpy:\n   https://numpy.org\n.. _numpy.dtype:\n   https://numpy.org/doc/stable/reference/arrays.dtypes.html\n.. _numpy.empty_like:\n   https://numpy.org/doc/stable/reference/generated/numpy.empty_like.html\n.. _numpy.floating:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.floating\n.. _numpy.generic:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.generic\n.. _numpy.integer:\n   https://numpy.org/doc/stable/reference/arrays.scalars.html?highlight=numpy%20generic#numpy.integer\n.. _numpy.typing:\n   https://numpy.org/devdocs/reference/typing.html\n.. _numpy.typing.ndarray:\n   https://numpy.org/devdocs/reference/typing.html#ndarray\n\n.. # ------------------( links ~ py : package : sphinx       )------------------\n.. _sphinx:\n   https://www.sphinx-doc.org\n.. _sphinx.ext.autodoc:\n   https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html\n\n.. # ------------------( links ~ py : package : test         )------------------\n.. _codecov:\n   https://about.codecov.io\n.. _pytest:\n   https://docs.pytest.org\n.. _tox:\n   https://tox.readthedocs.io\n\n.. # ------------------( links ~ py : service                )------------------\n.. _anaconda:\n   https://docs.conda.io/en/latest/miniconda.html\n.. _pypi:\n   https://pypi.org\n\n.. # ------------------( links ~ py : type : runtime         )------------------\n.. _enforce:\n   https://github.com/russbaz/enforce\n.. _enforce_typing:\n   https://github.com/matchawine/python-enforce-typing\n.. _pydantic:\n   https://pydantic-docs.helpmanual.io\n.. _pytypes:\n   https://github.com/stewori/pytypes\n.. _typeen:\n   https://github.com/k2bd/typen\n.. _typical:\n   https://github.com/seandstewart/typical\n\n.. # ------------------( links ~ py : type : runtime : typeg )------------------\n.. _typeguard:\n   https://github.com/agronholm/typeguard\n.. _typeguard.check_type:\n   https://typeguard.readthedocs.io/en/latest/userguide.html#checking-types-directly\n\n.. # ------------------( links ~ py : type : runtime : data  )------------------\n.. _pycontracts:\n   https://github.com/alexandruburlacu/pycontracts\n.. _contracts:\n   https://pypi.org/project/contracts\n.. _covenant:\n   https://github.com/kisielk/covenant\n.. _dpcontracts:\n   https://pypi.org/project/dpcontracts\n.. _icontract:\n   https://github.com/parquery/icontract\n.. _pyadbc:\n   https://pypi.org/project/pyadbc\n.. _pcd:\n   https://pypi.org/project/pcd\n\n.. # ------------------( links ~ py : type : static          )------------------\n.. _pyre:\n   https://pyre-check.org\n.. _pytype:\n   https://github.com/google/pytype\n\n.. # ------------------( links ~ py : type : static : pyright)------------------\n.. _pyright:\n   https://github.com/microsoft/pyright\n.. _pyright plugins:\n   https://github.com/microsoft/pyright/issues/607#issuecomment-873467941\n.. _pyright pep violation #1:\n   https://github.com/beartype/beartype/issues/126\n.. _pyright pep violation #2:\n   https://github.com/beartype/beartype/issues/127\n\n.. # ------------------( links ~ py : type : static : mypy   )------------------\n.. _mypy:\n   http://mypy-lang.org\n.. _mypy install:\n   https://mypy.readthedocs.io/en/stable/getting_started.html\n.. _mypy plugin:\n   https://mypy.readthedocs.io/en/stable/extending_mypy.html\n.. _type narrowing:\n   https://mypy.readthedocs.io/en/stable/type_narrowing.html\n\n.. # ------------------( links ~ py : type : tensor          )------------------\n.. _jaxtyping:\n   https://github.com/google/jaxtyping\n.. _nptyping:\n   https://github.com/ramonhagenaars/nptyping\n.. _torchtyping:\n   https://github.com/patrick-kidger/torchtyping\n\n.. # ------------------( links ~ soft : ide                  )------------------\n.. _pycharm:\n   https://en.wikipedia.org/wiki/pycharm\n.. _vim:\n   https://www.vim.org\n\n.. # ------------------( links ~ soft : ide : vscode         )------------------\n.. _pylance:\n   https://github.com/microsoft/pylance-release\n.. _vscode:\n   https://code.visualstudio.com\n.. _vscode mypy extension:\n   https://marketplace.visualstudio.com/items?itemname=matangover.mypy\n\n.. # ------------------( links ~ soft : lang                 )------------------\n.. _c:\n   https://en.wikipedia.org/wiki/c_(programming_language)\n.. _c++:\n   https://en.wikipedia.org/wiki/c%2b%2b\n.. _ruby:\n   https://www.ruby-lang.org\n.. _rust:\n   https://www.rust-lang.org\n\n.. # ------------------( links ~ soft : license              )------------------\n.. _mit license:\n   https://opensource.org/licenses/mit\n\n.. # ------------------( links ~ soft : web                  )------------------\n.. _react:\n   https://reactjs.org\n",
  "docs_url": null,
  "keywords": "type checking,type hints,pep 483,pep 484,pep 544,pep 563,pep 585,pep 586,pep 589,pep 593,pep 604,pep 3141",
  "license": "mit",
  "name": "beartype",
  "package_url": "https://pypi.org/project/beartype/",
  "project_url": "https://pypi.org/project/beartype/",
  "project_urls": {
    "Documentation": "https://beartype.readthedocs.io",
    "Download": "https://github.com/beartype/beartype/archive/0.16.4.tar.gz",
    "Forums": "https://github.com/beartype/beartype/discussions",
    "Homepage": "https://beartype.readthedocs.io",
    "Issues": "https://github.com/beartype/beartype/issues",
    "Releases": "https://github.com/beartype/beartype/releases",
    "Source": "https://github.com/beartype/beartype"
  },
  "release_url": "https://pypi.org/project/beartype/0.16.4/",
  "requires_dist": [
    "typing-extensions >=3.10.0.0 ; extra == 'all'",
    "coverage >=5.5 ; extra == 'dev'",
    "pandera ; extra == 'dev'",
    "typing-extensions >=3.10.0.0 ; extra == 'dev'",
    "pytest >=4.0.0 ; extra == 'dev'",
    "tox >=3.20.1 ; extra == 'dev'",
    "sphinx <6.0.0,>=4.2.0 ; extra == 'dev'",
    "pydata-sphinx-theme <=0.7.2 ; extra == 'dev'",
    "autoapi >=0.9.0 ; extra == 'dev'",
    "sphinxext-opengraph >=0.7.5 ; extra == 'dev'",
    "mypy >=0.800 ; (platform_python_implementation != \"PyPy\") and extra == 'dev'",
    "sphinx ; (python_version >= \"3.8.0\") and extra == 'dev'",
    "numpy ; (sys_platform != \"darwin\" and platform_python_implementation != \"PyPy\") and extra == 'dev'",
    "sphinx <6.0.0,>=4.2.0 ; extra == 'doc-rtd'",
    "pydata-sphinx-theme <=0.7.2 ; extra == 'doc-rtd'",
    "autoapi >=0.9.0 ; extra == 'doc-rtd'",
    "sphinxext-opengraph >=0.7.5 ; extra == 'doc-rtd'",
    "pandera ; extra == 'test-tox'",
    "typing-extensions >=3.10.0.0 ; extra == 'test-tox'",
    "pytest >=4.0.0 ; extra == 'test-tox'",
    "coverage >=5.5 ; extra == 'test-tox-coverage'",
    "mypy >=0.800 ; (platform_python_implementation != \"PyPy\") and extra == 'test-tox'",
    "sphinx ; (python_version >= \"3.8.0\") and extra == 'test-tox'",
    "numpy ; (sys_platform != \"darwin\" and platform_python_implementation != \"PyPy\") and extra == 'test-tox'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "unbearably fast runtime type checking in pure python.",
  "version": "0.16.4",
  "releases": [],
  "developers": [
    "cecil_curry",
    "leycec@gmail.com"
  ],
  "kwds": "metadata _beartype longer get_beartype_violation seo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_beartype",
  "homepage": "https://beartype.readthedocs.io",
  "release_count": 33,
  "dependency_ids": [
    "pypi_autoapi",
    "pypi_coverage",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_pandera",
    "pypi_pydata_sphinx_theme",
    "pypi_pytest",
    "pypi_sphinx",
    "pypi_sphinxext_opengraph",
    "pypi_tox",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# tidy3d\n\n[![notebooks](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/flexcompute-readthedocs/tidy3d-docs/readthedocs?labpath=docs%2fsource%2fnotebooks)\n![tests](https://github.com/flexcompute/tidy3d/actions/workflows//run_tests.yml/badge.svg)\n[![documentation status](https://readthedocs.com/projects/flexcompute-tidy3ddocumentation/badge/?version=latest)](https://flexcompute-tidy3ddocumentation.readthedocs-hosted.com/?badge=latest)\n[![pypi version shields.io](https://img.shields.io/pypi/v/tidy3d.svg)](https://pypi.python.org/pypi/tidy3d/)\n\n![](https://raw.githubusercontent.com/flexcompute/tidy3d/main/img/tidy3d-logo.svg)\n\ntidy3d is a software product from flexcompute that enables large scale electromagnetic simulation using the finite-difference time-domain (fdtd) method.\n\nthis repository stores the python interface for tidy3d.\n\nthis code allows you to:\n* programmatically define fdtd simulations.\n* submit and magange simulations running on flexcompute's servers.\n* download and postprocess the results from the simulations.\n\nyou can find a detailed documentation and api reference [here](https://docs.flexcompute.com/projects/tidy3d/en/stable/).\nthe source code for our documentation is [here](https://github.com/flexcompute-readthedocs/tidy3d-docs).\n\n![](https://raw.githubusercontent.com/flexcompute/tidy3d/main/img/snippet.png)\n\n## installation\n\n### signing up for tidy3d\n\nnote that while this front end package is open source, to run simulations on flexcompute servers requires an account with credits.\nyou can sign up for an account [here](https://tidy3d.simulation.cloud/signup).\nafter that, you can install the front end with the instructions below, or visit [this page](https://docs.flexcompute.com/projects/tidy3d/en/stable/quickstart.html) in our documentation for more details.\n\n### installing the front end \n\nto install the tidy3d python api locally, the following instructions should work for most users.\n\n```\npip install --user tidy3d\ntidy3d configure --apikey=xxx\n```\n\nwhere `xxx` is your api key, which can be copied from your [account page](https://tidy3d.simulation.cloud/account) in the web interface.\n\nin a hosted jupyter notebook environment (eg google colab), it may be more convenient to install and configure via the following lines at the top of the notebook.\n\n```\n!pip install tidy3d\nimport tidy3d.web as web\nweb.configure(\"xxx\")\n```\n\nif those commands did not work, advanced installation instructions are below, which should help solve the issue.\n\n### advanced installation instructions\n\nsome users might require more a specialized installation, which we cover below.\n\n#### using pip (recommended)\n\nthe easiest way to install the tidy3d python interface is through [pip](https://pypi.org/project/tidy3d/).\n\n```\npip install tidy3d\n```\n\nthis will install the latest stable version.\n\nto get a specific version `x.y.z`, including the \"pre-release\" versions, you may specify the version in the command as:\n\n```\npip install tidy3d==x.y.z\n```\n\n### installing from source\n\nalternatively, for development purposes, eg. developing your own features, you may download and install the package from source as:\n\n```\ngit clone https://github.com/flexcompute/tidy3d.git\ncd tidy3d\npip install -e .\n```\n\n### configuring and authentication\n\nwith the front end installed, it must now be configured with your account information, which is done via an \"api key\".\n\nyou can find your api key in the [web interface](http://tidy3d.simulation.cloud). after signing in and navigating to the account page by clicking the \"account center\" icon on the left-hand side. then, click on the \"api key\" tab on the right hand side of the menu and copy your api key.\n\nnote: we refer to your api specific api key value as `xxx` below.\n\nto link your api key with tidy3d, you may use one of three following options:\n\n#### command line (recommended)\n\nthe easiest way is through the command line via the `tidy3d configure` command. run:\n\n```\ntidy3d configure\n```\n\nand then enter your api key `xxx` when prompted.\n\nnote that windows users must run the following instead (ideally in an anaconda prompt):\n\n```\npip install pipx\npipx run tidy3d configure\n```\n\nyou can also specify your api key directly as an option to this command using the `api-key` argument, for example:\n\n```\ntidy3d configure --apikey=xxx\n```\n\n#### manually\n\nalternatively, you can manually set up the config file where tidy3d looks for the api key. the api key must be in a file called `.tidy3d/config` located in your home directory, containing the following\n\n```\napikey = \"xxx\"\n```\n\nyou can manually set up your file like this, or do it through the command line line:\n\n``echo 'apikey = \"xxx\"' > ~/.tidy3d/config``\n\nnote the quotes around `xxx`.\n\nnote that windows users will most likely need to place the `.tidy3d/config` file in their `c:\\users\\username\\` directory (where `username` is your username).\n\n#### environment variable\n\nlastly, you may set the api key as an environment variable named `simcloud_apikey`.\n\nthis can be set up using\n\n``export simcloud_apikey=\"xxx\"``\n\nnote the quotes around `xxx`.\n\n### testing the installation and authentication\n\n#### front end package\n\nyou can verify the front end installation worked by running:\n\n```\npython -c \"import tidy3d as td; print(td.__version__)\"\n```\n\nand it should print out the version number, for example:\n\n```\n2.0.0\n```\n\n#### authentication\n\nto test the authentication, you may try importing the web interface via.\n\n```\npython -c \"import tidy3d.web\"\n```\n\nit should pass without any errors if the api key is set up correctly.\n\nto get started, our documentation has a lot of [examples](https://docs.flexcompute.com/projects/tidy3d/en/latest/examples.html) for inspiration.\n\n## issues / feedback / bug reporting\n\nyour feedback helps us immensely!\n\nif you find bugs, file an [issue](https://github.com/flexcompute/tidy3d/issues).\nfor more general discussions, questions, comments, anything else, open a topic in the [discussions tab](https://github.com/flexcompute/tidy3d/discussions).\n\n## license\n\n[gnu lgpl](https://github.com/flexcompute/tidy3d/blob/main/license)\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "tidy3d",
  "package_url": "https://pypi.org/project/tidy3d/",
  "project_url": "https://pypi.org/project/tidy3d/",
  "project_urls": {
    "Bug Tracker": "https://github.com/flexcompute/tidy3d/issues",
    "Homepage": "https://github.com/flexcompute/tidy3d"
  },
  "release_url": "https://pypi.org/project/tidy3d/2.5.0/",
  "requires_dist": [
    "scipy",
    "pyroots >=0.5.0",
    "xarray >=0.16.2",
    "importlib-metadata >=6.0.0",
    "h5netcdf ==1.0.2",
    "h5py >=3.0.0",
    "rich <12.6.0",
    "matplotlib >=3.5",
    "shapely >=2.0",
    "pydantic ==2.*",
    "PyYAML",
    "dask",
    "toml",
    "boto3 ==1.28.*",
    "requests ==2.31.*",
    "pyjwt",
    "click ==8.1.*",
    "responses",
    "pre-commit ; extra == 'dev'",
    "black ==22.3.0 ; extra == 'dev'",
    "ruff ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "memory-profiler ; extra == 'dev'",
    "dill ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "gdspy ; extra == 'gdspy'",
    "gdstk ; extra == 'gdstk'",
    "jaxlib <=0.4.14,>=0.3.14 ; (platform_system != \"Windows\") and extra == 'jax'",
    "jax[cpu] <=0.4.14,>=0.3.14 ; (platform_system != \"Windows\") and extra == 'jax'",
    "jaxlib ==0.3.14 ; (platform_system == \"Windows\" and python_version < \"3.9\") and extra == 'jax'",
    "jax[cpu] ==0.3.14 ; (platform_system == \"Windows\" and python_version < \"3.9\") and extra == 'jax'",
    "jaxlib <=0.4.14,>=0.3.14 ; (platform_system == \"Windows\" and python_version >= \"3.9\") and extra == 'jax'",
    "jax[cpu] <=0.4.14,>=0.3.14 ; (platform_system == \"Windows\" and python_version >= \"3.9\") and extra == 'jax'",
    "trimesh ==3.20.0 ; extra == 'trimesh'",
    "networkx <=3.0,>=2.6.3 ; extra == 'trimesh'",
    "rtree ==1.0.1 ; extra == 'trimesh'",
    "vtk <=9.2.6 ; extra == 'vtk'"
  ],
  "requires_python": ">=3.8",
  "summary": "a fast fdtd solver",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "tyler@flexcompute.com",
    "tyler_hughes"
  ],
  "kwds": "tidy3d tidy3ddocumentation flexcompute badge_logo svg",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_tidy3d",
  "homepage": "https://github.com/flexcompute/tidy3d",
  "release_count": 43,
  "dependency_ids": [
    "pypi_black",
    "pypi_boto3",
    "pypi_click",
    "pypi_dask",
    "pypi_dill",
    "pypi_gdspy",
    "pypi_gdstk",
    "pypi_h5netcdf",
    "pypi_h5py",
    "pypi_importlib_metadata",
    "pypi_ipython",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_matplotlib",
    "pypi_memory_profiler",
    "pypi_networkx",
    "pypi_pre_commit",
    "pypi_pydantic",
    "pypi_pyjwt",
    "pypi_pyroots",
    "pypi_pytest",
    "pypi_pytest_timeout",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_responses",
    "pypi_rich",
    "pypi_rtree",
    "pypi_ruff",
    "pypi_scipy",
    "pypi_shapely",
    "pypi_toml",
    "pypi_tox",
    "pypi_trimesh",
    "pypi_vtk",
    "pypi_xarray"
  ]
}
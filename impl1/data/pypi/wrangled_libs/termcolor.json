{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: terminals"
  ],
  "description": "# termcolor\n\n[![pypi version](https://img.shields.io/pypi/v/termcolor.svg?logo=pypi&logocolor=ffe873)](https://pypi.org/project/termcolor)\n[![supported python versions](https://img.shields.io/pypi/pyversions/termcolor.svg?logo=python&logocolor=ffe873)](https://pypi.org/project/termcolor)\n[![pypi downloads](https://img.shields.io/pypi/dm/termcolor.svg)](https://pypistats.org/packages/termcolor)\n[![github actions status](https://github.com/termcolor/termcolor/workflows/test/badge.svg)](https://github.com/termcolor/termcolor/actions)\n[![codecov](https://codecov.io/gh/termcolor/termcolor/branch/main/graph/badge.svg)](https://codecov.io/gh/termcolor/termcolor)\n[![licence](https://img.shields.io/github/license/termcolor/termcolor.svg)](copying.txt)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![tidelift](https://tidelift.com/badges/package/pypi/termcolor)](https://tidelift.com/subscription/pkg/pypi-termcolor?utm_source=pypi-termcolor&utm_medium=referral&utm_campaign=readme)\n\n## installation\n\n### from pypi\n\n```bash\npython3 -m pip install --upgrade termcolor\n```\n\n### from source\n\n```bash\ngit clone https://github.com/termcolor/termcolor\ncd termcolor\npython3 -m pip install .\n```\n\n### demo\n\nto see demo output, run:\n\n```bash\npython3 -m termcolor\n```\n\n## example\n\n```python\nimport sys\n\nfrom termcolor import colored, cprint\n\ntext = colored(\"hello, world!\", \"red\", attrs=[\"reverse\", \"blink\"])\nprint(text)\ncprint(\"hello, world!\", \"green\", \"on_red\")\n\nprint_red_on_cyan = lambda x: cprint(x, \"red\", \"on_cyan\")\nprint_red_on_cyan(\"hello, world!\")\nprint_red_on_cyan(\"hello, universe!\")\n\nfor i in range(10):\n    cprint(i, \"magenta\", end=\" \")\n\ncprint(\"attention!\", \"red\", attrs=[\"bold\"], file=sys.stderr)\n```\n\n## text properties\n\n| text colors     | text highlights    | attributes  |\n| --------------- | ------------------ | ----------- |\n| `black`         | `on_black`         | `bold`      |\n| `red`           | `on_red`           | `dark`      |\n| `green`         | `on_green`         | `underline` |\n| `yellow`        | `on_yellow`        | `blink`     |\n| `blue`          | `on_blue`          | `reverse`   |\n| `magenta`       | `on_magenta`       | `concealed` |\n| `cyan`          | `on_cyan`          |             |\n| `white`         | `on_white`         |             |\n| `light_grey`    | `on_light_grey`    |             |\n| `dark_grey`     | `on_dark_grey`     |             |\n| `light_red`     | `on_light_red`     |             |\n| `light_green`   | `on_light_green`   |             |\n| `light_yellow`  | `on_light_yellow`  |             |\n| `light_blue`    | `on_light_blue`    |             |\n| `light_magenta` | `on_light_magenta` |             |\n| `light_cyan`    | `on_light_cyan`    |             |\n\n## terminal properties\n\n| terminal     | bold    | dark | underline | blink      | reverse | concealed |\n| ------------ | ------- | ---- | --------- | ---------- | ------- | --------- |\n| xterm        | yes     | no   | yes       | bold       | yes     | yes       |\n| linux        | yes     | yes  | bold      | yes        | yes     | no        |\n| rxvt         | yes     | no   | yes       | bold/black | yes     | no        |\n| dtterm       | yes     | yes  | yes       | reverse    | yes     | yes       |\n| teraterm     | reverse | no   | yes       | rev/red    | yes     | no        |\n| aixterm      | normal  | no   | yes       | no         | yes     | yes       |\n| putty        | color   | no   | yes       | no         | yes     | no        |\n| windows      | no      | no   | no        | no         | yes     | no        |\n| cygwin ssh   | yes     | no   | color     | color      | color   | yes       |\n| mac terminal | yes     | no   | yes       | yes        | yes     | yes       |\n\n## overrides\n\nterminal colour detection can be disabled or enabled in several ways.\n\nin order of precedence:\n\n1. calling `colored` or `cprint` with a truthy `no_color` disables colour.\n2. calling `colored` or `cprint` with a truthy `force_color` forces colour.\n3. setting the `ansi_colors_disabled` environment variable to any value disables colour.\n4. setting the [`no_color`](https://no-color.org/) environment variable to any value\n   disables colour.\n5. setting the [`force_color`](https://force-color.org/) environment variable to any\n   value forces colour.\n6. setting the `term` environment variable to `dumb`, or using such a\n   [dumb terminal](https://en.wikipedia.org/wiki/computer_terminal#character-oriented_terminal),\n   disables colour.\n7. finally, termcolor will attempt to detect whether the terminal supports colour.\n",
  "docs_url": null,
  "keywords": "ansi,ansi color,ansi colour,color,colour,formatting,termcolor,terminal",
  "license": "mit",
  "name": "termcolor",
  "package_url": "https://pypi.org/project/termcolor/",
  "project_url": "https://pypi.org/project/termcolor/",
  "project_urls": {
    "Changelog": "https://github.com/termcolor/termcolor/releases",
    "Homepage": "https://github.com/termcolor/termcolor",
    "Source": "https://github.com/termcolor/termcolor"
  },
  "release_url": "https://pypi.org/project/termcolor/2.4.0/",
  "requires_dist": [
    "pytest; extra == 'tests'",
    "pytest-cov; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "ansi color formatting for output in terminal",
  "version": "2.4.0",
  "releases": [],
  "developers": [
    "hugo_van_kemenade",
    "konstantin.lepa@gmail.com"
  ],
  "kwds": "termcolor ansi_colors_disabled ansi pypi on_light_cyan",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_termcolor",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. this file is included into docs/history.rst\n\n\ngreenlets are lightweight coroutines for in-process concurrent\nprogramming.\n\nthe \"greenlet\" package is a spin-off of `stackless`_, a version of\ncpython that supports micro-threads called \"tasklets\". tasklets run\npseudo-concurrently (typically in a single or a few os-level threads)\nand are synchronized with data exchanges on \"channels\".\n\na \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words.\nthis is useful when you want to control exactly when your code runs.\nyou can build custom scheduled micro-threads on top of greenlet;\nhowever, it seems that greenlets are useful on their own as a way to\nmake advanced control flow structures. for example, we can recreate\ngenerators; the difference with python's own generators is that our\ngenerators can call nested functions and the nested functions can\nyield values too. (additionally, you don't need a \"yield\" keyword. see\nthe example in `test_generator.py\n<https://github.com/python-greenlet/greenlet/blob/adca19bf1f287b3395896a8f41f3f4fd1797fdc7/src/greenlet/tests/test_generator.py#l1>`_).\n\ngreenlets are provided as a c extension module for the regular unmodified\ninterpreter.\n\n.. _`stackless`: http://www.stackless.com\n\n\nwho is using greenlet?\n======================\n\nthere are several libraries that use greenlet as a more flexible\nalternative to python's built in coroutine support:\n\n - `concurrence`_\n - `eventlet`_\n - `gevent`_\n\n.. _concurrence: http://opensource.hyves.org/concurrence/\n.. _eventlet: http://eventlet.net/\n.. _gevent: http://www.gevent.org/\n\ngetting greenlet\n================\n\nthe easiest way to get greenlet is to install it with pip::\n\n  pip install greenlet\n\n\nsource code archives and binary distributions are available on the\npython package index at https://pypi.org/project/greenlet\n\nthe source code repository is hosted on github:\nhttps://github.com/python-greenlet/greenlet\n\ndocumentation is available on readthedocs.org:\nhttps://greenlet.readthedocs.io\n",
  "docs_url": "https://pythonhosted.org/greenlet/",
  "keywords": "greenlet coroutine concurrency threads cooperative",
  "license": "mit license",
  "name": "greenlet",
  "package_url": "https://pypi.org/project/greenlet/",
  "project_url": "https://pypi.org/project/greenlet/",
  "project_urls": {
    "Bug Tracker": "https://github.com/python-greenlet/greenlet/issues",
    "Documentation": "https://greenlet.readthedocs.io/",
    "Homepage": "https://greenlet.readthedocs.io/",
    "Source Code": "https://github.com/python-greenlet/greenlet/"
  },
  "release_url": "https://pypi.org/project/greenlet/3.0.3/",
  "requires_dist": [
    "Sphinx ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "objgraph ; extra == 'test'",
    "psutil ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "lightweight in-process concurrent programming",
  "version": "3.0.3",
  "releases": [],
  "developers": [
    "alexey_borzenkov",
    "jason@seecoresoftware.com",
    "jason_madden",
    "snaury@gmail.com"
  ],
  "kwds": "greenlets greenlet coroutines concurrency coroutine",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_greenlet",
  "homepage": "https://greenlet.readthedocs.io/",
  "release_count": 50,
  "dependency_ids": [
    "pypi_furo",
    "pypi_objgraph",
    "pypi_psutil",
    "pypi_sphinx"
  ]
}
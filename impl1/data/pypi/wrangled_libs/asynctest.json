{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/asynctest.svg\n    :target: https://pypi.python.org/pypi/asynctest\n    :alt: pypi\n.. image:: https://travis-ci.org/martiusweb/asynctest.svg?branch=master\n    :target: https://travis-ci.org/martiusweb/asynctest\n    :alt: travis\n.. image:: https://ci.appveyor.com/api/projects/status/github/martiusweb/asynctest?branch=master&svg=true\n    :target: https://ci.appveyor.com/project/martiusweb/asynctest/branch/master\n    :alt: appveyor\n.. image:: https://img.shields.io/pypi/pyversions/asynctest.svg\n    :target: https://github.com/martiusweb/asynctest\n    :alt: supported python versions\n\n=========\nasynctest\n=========\n\nthe package asynctest is built on top of the standard unittest module and\ncuts down boilerplate code when testing libraries for asyncio.\n\ncurrently, asynctest targets the \"selector\" model, hence, some features\nwill not (yet?) work with windows' proactor.\n\n.. warning::\n\n   since asynctest 0.13, python 3.4 is not supported anymore.\n\nauthor & license\n----------------\n\nauthored by martin richard <martius@martiusweb.net> and licensed under the\napache 2 license.\n\nsee the authors file for a comprehensive list of the authors.\n\ndocumentation\n-------------\n\n.. image:: https://readthedocs.org/projects/asynctest/badge/\n   :target: http://asynctest.readthedocs.org/en/latest/\n\nfull documentation is available at http://asynctest.readthedocs.org/en/latest/.\nit includes a tutorial with tested examples of how to use ``testcase`` or\nmocks.\n\nfeatures\n--------\n\ntestcases\n~~~~~~~~~\n\n  - initialize and close a loop created for each test (it can be\n    configurated), if the loop uses a selector, it will be updated with\n    a testselector object wrapping the original selector (see below),\n\n  - if the test function is a coroutine function or returns a coroutine, it\n    will run on the loop,\n\n  - testcase.setup() and testcase.teardown() can be coroutine functions,\n\n  - control post-test checks with `@fail_on`, for instance, the test fail if\n    the loop didn't run, some optional checks can be activated,\n\n  - clockedtestcase allows to control the loop clock and run timed events\n    without waiting the wall clock.\n\nmock and coroutinemock\n~~~~~~~~~~~~~~~~~~~~~~\n\n  - coroutinemock is a new mock class which mocks a coroutine function, and\n    returns a coroutine when called,\n\n  - magicmock supports asynchronous context managers and asynchronous\n    iterators,\n\n  - noncallablemock, mock and coroutinemock can return coroutinemock objects\n    when its attributes are get if there is a matching attribute in the spec\n    (or spec_set) object which is a coroutine function,\n\n  - patch(), patch.object(), patch.multiple() return a magickmock or\n    coroutinemock object by default, according to the patched target,\n\n  - patch(), patch.object(), patch.multiple() handle generators and coroutines\n    and their behavior can be controled when the generator or coroutine pauses,\n\n  - all the patch() methods can decorate coroutine functions,\n\n  - mock_open() returns a magickmock object by default.\n\n  - return_once() can be used with mock.side_effect to return a value only\n    once when a mock is called.\n\nselectors\n~~~~~~~~~\n\nthe module asynctest.selector provides classes to mock objects performing io\n(files, sockets, etc).\n\n  - filemock is a special type of mock which represents a file.\n    filemock.fileno() returns a special value which allows to identify uniquely\n    the mock,\n\n  - socketmock is a special type of filemock which uses socket.socket as spec,\n\n  - testselector is a custom selector able to wrap a real selector\n    implementation and deal with filemock objects, it can replace a selector\n    loop by calling `loop._selector = testselector(loop._selector)`, and will\n    intercept mock so they don't get registered to the actual selector.\n\n  - set_read_ready() and set_write_ready() to force read and write event\n    callbacks to be scheduled on the loop, as if the selector scheduled them.\n\nhelpers\n~~~~~~~\n\n  - the coroutine exhaust_callbacks(loop) returns once all the callbacks which\n    should be called immediately are executed, which is useful when the test\n    author needs to assert things which are not yet executed by the loop.\n\nroadmap\n-------\n\ni hope i will find time to develop and release the following features:\n\n- set of warnings against common mistakes\n- proactor support\n\ntests\n-----\n\nasynctest is unit tested. you can run asynctest test suite with this command::\n\n$ pythonpath=. python -m unittest test\n\n\n",
  "docs_url": null,
  "keywords": "unittest,test,testing,asyncio,tulip,selectors,async,mock",
  "license": "apache 2",
  "name": "asynctest",
  "package_url": "https://pypi.org/project/asynctest/",
  "project_url": "https://pypi.org/project/asynctest/",
  "project_urls": {
    "Homepage": "https://github.com/Martiusweb/asynctest/"
  },
  "release_url": "https://pypi.org/project/asynctest/0.13.0/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "enhance the standard unittest package with features for testing asyncio libraries",
  "version": "0.13.0",
  "releases": [],
  "developers": [
    "martin_richard",
    "martius@martiusweb.net"
  ],
  "kwds": "asynctest asyncio async martius travis",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_asynctest",
  "homepage": "https://github.com/martiusweb/asynctest/",
  "release_count": 21,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": "===============================\ndesert: dry deserialization\n===============================\n\n\n\n\ndesert generates serialization schemas for ``dataclasses`` and ``attrs`` classes. writing\ncode that's dry (\"don't repeat yourself\") helps avoid bugs and improve readability. desert\nhelps you write code that's dry.\n\n\n\n\n\n\n\ninstallation\n============\n\n::\n\n    pip install desert\n\nor with `poetry`_\n\n::\n\n   poetry add desert\n\n\nusage\n=========\n\n..\n    start-basic-usage\n\na simple example models two ``person`` objects in a ``car``.\n\n.. code-block:: python\n\n\n\n        from dataclasses import dataclass\n\n        # or using attrs\n        # from attr import dataclass\n\n        from typing import list\n\n\timport desert\n\n        @dataclass\n        class person:\n            name: str\n            age: int\n\n        @dataclass\n        class car:\n            passengers: list[person]\n\n        # load some simple data types.\n        data = {'passengers': [{'name': 'alice', 'age': 21}, {'name': 'bob', 'age': 22}]}\n\n\n        # create a schema for the car class.\n        schema = desert.schema(car)\n\n        # load the data.\n        car = schema.load(data)\n        assert car == car(passengers=[person(name='alice', age=21), person(name='bob', age=22)])\n\n\n..\n    end-basic-usage\n\ndocumentation\n=============\n\n\nhttps://desert.readthedocs.io/\n\n\nlimitations\n============\n\nstring annotations and forward references inside of functions are not supported.\n\n\n\n\n\nacknowledgements\n=================\n\n- this package began as an extension of marshmallow-dataclass_ to add support for attrs_.\n\n\n.. _poetry: https://poetry.eustace.io\n.. _marshmallow-dataclass: https://pypi.org/project/marshmallow-dataclass/\n.. _attrs: http://www.attrs.org/\n\n2022.09.22 (2022-09-22)\n-----------------------\n\n\nbackward-incompatible changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- update all project dependencies and fix all deprecated warnings. python 3.6\n  support was dropped to allow updating deprecated dependencies.\n  `#161 <https://github.com/python-desert/desert/issues/161>`_\n\n\nchanges\n^^^^^^^\n\n- it is now possible to use `type-variant generics`_ in your dataclasses, such as ``sequence``\n  or ``mutablesequence`` instead of ``list``, ``mapping`` instead of ``dict``, etc.\n\n  this allows you to hide implementation details from users of your dataclasses. if a field\n  in your dataclass works just as fine with a tuple as a list, you no longer need to force\n  your users to pass in a ``list`` just to satisfy type checkers.\n\n  for example, by using ``mapping`` or ``mutablemapping``, users can pass ``ordereddict`` to\n  a ``dict`` attribute without mypy complaining.\n\n  .. code-block:: python\n\n      @dataclass\n      class oldway:\n          str_list: list[str]\n          num_map: dict[str, float]\n\n\n      # mypy will reject this even though marshmallow works just fine. if you use\n      # type-variant generics, mypy will accept this code.\n      instance = oldclass([], collections.chainmap(my_defaults))\n\n\n      @dataclass\n      class newway:\n          str_list: list[str]  # type-invariants still work\n          num_map: mutablemapping[str, float]  # now generics do too\n\n\n  .. _type-variant generics: https://mypy.readthedocs.io/en/stable/generics.html\n  \n  `#140 <https://github.com/python-desert/desert/issues/140>`_\n\n\n----\n\n\n2020.11.18 (2020-11-18)\n-----------------------\n\n\nchanges\n^^^^^^^\n\n- schemas no longer copy non-field dataclass attributes. thanks to @sveinse for report and test.\n  `#79 <https://github.com/python-desert/desert/issues/79>`_\n\n\n----\n\n\n2020.01.06 (2020-01-06)\n-----------------------\n\n\nchanges\n^^^^^^^\n\n- additional metadata are supported in ib() and fields(). thanks to @sveinse for reporting and testing.\n  `#28 <https://github.com/python-desert/desert/issues/28>`_\n\n\n----\n\n\n2020.01.05 (2020-01-05)\n-----------------------\n\n\nchanges\n^^^^^^^\n\n- add support for attrs factories that take ``self`` (``attr.factory(..., takes_self=true)``).\n  `#27 <https://github.com/python-desert/desert/issues/27>`_\n\n\n----\n\n\n2020.01.04 (2020-01-04)\n-----------------------\n\n\nchanges\n^^^^^^^\n\n- add support for tuple[int, ...] per https://docs.python.org/3/library/typing.html#typing.tuple\n  `#16 <https://github.com/python-desert/desert/issues/16>`_ thanks to @sveinse for reporting and testing.\n- use module imports internally.\n  `#18 <https://github.com/python-desert/desert/issues/18>`_\n- desert version only needs to be updated in _version.py\n  `#19 <https://github.com/python-desert/desert/issues/19>`_\n- fix doctests.\n  `#20 <https://github.com/python-desert/desert/issues/20>`_\n\n\n----\n\n\n2020.01.03\n--------------\n\nchanges\n^^^^^^^^\n\n- ``optional`` fields allow ``none``. `#11 <https://github.com/python-desert/desert/issues/11>`__. thanks to @sveinse for reporting and testing.\n\n2019.12.18\n--------------\n\nchanges\n^^^^^^^\n\n- improve error message for unknown generics.\n  `#10 <https://github.com/python-desert/desert/pull/10>`_\n\n2019.12.10\n--------------\n\nchanges\n^^^^^^^\n\n- add ``unknowntype`` exception with better error message for types that should be generic.\n  `#8  <https://github.com/python-desert/desert/issues/8>`_\n\n\n\n2019.12.09\n--------------\n\nchanges\n^^^^^^^\n\n- marshmallow schema ``meta`` arguments are accepted, allowing exclusion of unknown fields and other options.\n  `#3  <https://github.com/python-desert/desert/pull/3>`_\n\n2019.11.06 (2019-11-06)\n-----------------------\n\n\nchanges\n^^^^^^^\n\n- add twine and wheel development dependencies.\n  `#2 <https://github.com/python-desert/desert/issues/2>`_\n\n\n----\n\n\n2019.11.06 (2019-11-06)\n-----------------------\n\nchanges\n^^^^^^^\n\n- switch to calver\n\n\nbackward-incompatible changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- non-optional fields without a default or factory now have `required=true` so raise ``marshmallow.exceptions.validationerror`` when missing.\n  `#1 <https://github.com/python-desert/desert/issues/1>`_\n\n\n----\n\n0.1.0 (2019-06-22)\n------------------\n\nchanges\n^^^^^^^\n\n- first release on pypi.\n\n---\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "desert",
  "package_url": "https://pypi.org/project/desert/",
  "project_url": "https://pypi.org/project/desert/",
  "project_urls": {
    "Homepage": "https://github.com/python-desert/desert"
  },
  "release_url": "https://pypi.org/project/desert/2022.9.22/",
  "requires_dist": [
    "marshmallow (>=3.0)",
    "attrs",
    "typing-inspect",
    "dataclasses ; python_version < \"3.7\"",
    "coverage ; extra == 'dev'",
    "cuvner ; extra == 'dev'",
    "marshmallow-enum ; extra == 'dev'",
    "marshmallow-union ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-sphinx ; extra == 'dev'",
    "pytest-travis-fold ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "importlib-metadata ; extra == 'dev'",
    "versioneer ; extra == 'dev'",
    "black ; extra == 'dev'",
    "build ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pex ; extra == 'dev'",
    "bump2version ; extra == 'dev'",
    "docutils ; extra == 'dev'",
    "check-manifest ; extra == 'dev'",
    "readme-renderer ; extra == 'dev'",
    "pygments ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "towncrier ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "coverage ; extra == 'test'",
    "cuvner ; extra == 'test'",
    "marshmallow-enum ; extra == 'test'",
    "marshmallow-union ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-sphinx ; extra == 'test'",
    "pytest-travis-fold ; extra == 'test'",
    "tox ; extra == 'test'",
    "importlib-metadata ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "deserialize to objects while staying dry",
  "version": "2022.9.22",
  "releases": [],
  "developers": [
    "desert_contributors",
    "python-desert@users.noreply.github.com"
  ],
  "kwds": "serialization deserialization dataclass_ deserialize pip",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_desert",
  "homepage": "https://github.com/python-desert/desert",
  "release_count": 19,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_black",
    "pypi_build",
    "pypi_bump2version",
    "pypi_check_manifest",
    "pypi_coverage",
    "pypi_cuvner",
    "pypi_dataclasses",
    "pypi_docutils",
    "pypi_importlib_metadata",
    "pypi_isort",
    "pypi_marshmallow",
    "pypi_marshmallow_enum",
    "pypi_marshmallow_union",
    "pypi_mypy",
    "pypi_pex",
    "pypi_pygments",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_sphinx",
    "pypi_pytest_travis_fold",
    "pypi_readme_renderer",
    "pypi_towncrier",
    "pypi_tox",
    "pypi_twine",
    "pypi_typing_inspect",
    "pypi_versioneer",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "knack\n=====\n\n.. image:: https://img.shields.io/pypi/v/knack.svg\n    :target: https://pypi.python.org/pypi/knack\n\n.. image:: https://img.shields.io/pypi/pyversions/knack.svg\n    :target: https://pypi.python.org/pypi/knack\n\n.. image:: https://dev.azure.com/azure-sdk/public/_apis/build/status/cli/microsoft.knack?branchname=dev\n    :target: https://dev.azure.com/azure-sdk/public/_build/latest?definitionid=1643&branchname=dev\n\n\n------------\n\n\n::\n\n    _                     _\n   | | ___ __   __ _  ___| | __\n   | |/ / '_ \\ / _` |/ __| |/ /\n   |   <| | | | (_| | (__|   <\n   |_|\\_\\_| |_|\\__,_|\\___|_|\\_\\\n\n\n**a command-line interface framework**\n\ninstallation is easy via pip:\n\n.. code-block:: bash\n\n    pip install knack\n\nknack can be installed as a non-privileged user to your home directory by adding \"--user\" as below:\n\n.. code-block:: bash\n\n    pip install knack --user\n\n------------\n\n.. note:: the project is in `initial development phase <https://semver.org/#how-should-i-deal-with-revisions-in-the-0yz-initial-development-phase>`__. we recommend pinning to at least a specific minor version when marking **knack** as a dependency in your project.\n\n------------\n\n\nusage\n=====\n\n\n.. code-block:: python\n\n    import sys\n    from collections import ordereddict\n\n    from knack import cli, argumentscontext, clicommandsloader\n    from knack.commands import commandgroup\n\n\n    def abc_str(length=3):\n        import string\n        return string.ascii_lowercase[:length]\n\n\n    class mycommandsloader(clicommandsloader):\n        def load_command_table(self, args):\n            with commandgroup(self, 'abc', '__main__#{}') as g:\n                g.command('str', 'abc_str')\n            return ordereddict(self.command_table)\n\n        def load_arguments(self, command):\n            with argumentscontext(self, 'abc str') as ac:\n                ac.argument('length', type=int)\n            super(mycommandsloader, self).load_arguments(command)\n\n\n    mycli = cli(cli_name='mycli', commands_loader_cls=mycommandsloader)\n    exit_code = mycli.invoke(sys.argv[1:])\n    sys.exit(exit_code)\n\n    # $ python mycli.py abc str\n    # \"abc\"\n\n    # $ python mycli.py abc str --length 5\n    # \"abcde\"\n\n    # $ python mycli.py abc str --length 100\n    # \"abcdefghijklmnopqrstuvwxyz\"\n\n\nmore samples and snippets are available at `examples <https://github.com/microsoft/knack/tree/dev/examples>`__.\n\n\ndocumentation\n=============\n\ndocumentation is available at `docs <https://github.com/microsoft/knack/tree/dev/docs>`__.\n\ndeveloper setup\n===============\n\nin a virtual environment, install the `requirements.txt` file.\n\n.. code-block:: bash\n\n    pip install -r requirements.txt\n    pip install -e .\n\nrun automation\n==============\n\nthis project supports running automation using `tox <https://tox.readthedocs.io/en/latest/>`__.\n\n.. code-block:: bash\n\n    pip install tox\n    tox\n\n\nreal-world uses\n===============\n\n- `azure cli <https://github.com/azure/azure-cli/>`__: the azure cli 2.0 is azure's new command line experience for managing azure resources.\n- `vsts cli <https://github.com/microsoft/vsts-cli>`__: a command-line interface for visual studio team services (vsts) and team foundation server (tfs). with the vsts cli, you can manage and work with resources including pull requests, work items, builds, and more.\n- `service fabric cli <https://github.com/azure/service-fabric-cli>`__: a command-line interface for interacting with azure service fabric clusters and their related entities.\n\ndo you use knack in your cli as well? open a pull request to include it here. we would love to have it in our list.\n\n\nrelease history\n===============\n\nsee `github releases <https://github.com/microsoft/knack/releases>`__.\n\n\ncontribute code\n===============\n\nthis project has adopted the `microsoft open source code of conduct <https://opensource.microsoft.com/codeofconduct/>`__.\n\nfor more information see the `code of conduct faq <https://opensource.microsoft.com/codeofconduct/faq/>`__ or contact `opencode@microsoft.com <mailto:opencode@microsoft.com>`__ with any additional questions or comments.\n\nif you would like to become an active contributor to this project, please\nfollow the instructions provided in `contribution license agreement <https://cla.microsoft.com/>`__.\n\n\nlicense\n=======\n\nknack is licensed under `mit <license>`__.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "knack",
  "package_url": "https://pypi.org/project/knack/",
  "project_url": "https://pypi.org/project/knack/",
  "project_urls": {
    "Homepage": "https://github.com/microsoft/knack"
  },
  "release_url": "https://pypi.org/project/knack/0.11.0/",
  "requires_dist": [
    "argcomplete",
    "jmespath",
    "packaging",
    "pygments",
    "pyyaml",
    "tabulate"
  ],
  "requires_python": "",
  "summary": "a command-line interface framework",
  "version": "0.11.0",
  "releases": [],
  "developers": [
    "azpycli@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure knack sdk pyversions svg",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_knack",
  "homepage": "https://github.com/microsoft/knack",
  "release_count": 38,
  "dependency_ids": [
    "pypi_argcomplete",
    "pypi_jmespath",
    "pypi_packaging",
    "pypi_pygments",
    "pypi_pyyaml",
    "pypi_tabulate"
  ]
}
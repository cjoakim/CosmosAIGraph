{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "ghapi\n================\n\n<!-- warning: this file was autogenerated! do not edit! -->\n\n[`ghapi`](https://ghapi.fast.ai/cli.html#ghapi) provides 100%\nalways-updated coverage of the entire [github\napi](https://docs.github.com/rest). because we automatically convert the\n[openapi\nspec](https://docs.github.com/rest/overview/openapi-description) to a\npythonic api, [`ghapi`](https://ghapi.fast.ai/cli.html#ghapi) is always\nup to date with the latest changes to github apis. furthermore, because\nthis is all done dynamically, the entire package is only 35kb in size!\n\nusing [`ghapi`](https://ghapi.fast.ai/cli.html#ghapi), you can automate\nnearly anything that you can do through the github web interface or\nthrough the `git` client, such as:\n\n- open, list, comment on, or modify\n  [issues](https://guides.github.com/features/issues/) or [pull\n  requests](https://docs.github.com/github/collaborating-with-issues-and-pull-requests/about-pull-requests)\n- create, list, or modify [git\n  tags](https://git-scm.com/book/en/v2/git-basics-tagging) or [github\n  releases](https://docs.github.com/github/administering-a-repository/managing-releases-in-a-repository),\n  including uploading release assets\n- configure and run github\n  [actions](https://github.com/features/actions) and\n  [webhooks](https://docs.github.com/developers/webhooks-and-events/about-webhooks)\n- set up github [users](https://docs.github.com/rest/reference/users)\n  and\n  [organizations](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-organizations)\n- manage your\n  [deployments](https://docs.github.com/rest/guides/delivering-deployments)\n- \u2026and much, much more.\n\nthere are two ways to use\n[`ghapi`](https://ghapi.fast.ai/cli.html#ghapi): either through python,\nor from the command line. an overview of each is provided below.\n\n## installation\n\nto install, run either `pip install ghapi` or\n`conda install -c fastai ghapi`.\n\n## how to use - python\n\nthroughout this documentation, you will see code inputs and outputs\nshown in this format:\n\n``` python\n1+1\n```\n\n    2\n\nwe recommend reading the documentation on the [official\nsite](https://ghapi.fast.ai/), rather than on github, since not all the\nfunctionality described on this page is available through the github\nviewer.\n\nall of the documentation is available directly as jupyter notebooks, for\ninstance the current page you\u2019re reading is available as a notebook\n[here](https://github.com/fastai/ghapi/blob/master/index.ipynb). to open\nany page as an interactive notebook in google colab, click the *colab*\nbadge at the top of the page.\n\nto access the github api, first create a\n[`ghapi`](https://ghapi.fast.ai/core.html#ghapi) object:\n\n``` python\nfrom ghapi.all import ghapi\napi = ghapi()\n```\n\nevery part of the api includes documentation directly in the `api`\nobject itself. for instance, here\u2019s how to explore the groups of\nfunctionality provided by the api by displaying the object:\n\n``` python\napi\n```\n\n- [actions](https://docs.github.com/rest/reference/actions)\n- [activity](https://docs.github.com/rest/reference/activity)\n- [apps](https://docs.github.com/rest/reference/apps)\n- [billing](https://docs.github.com/rest/reference/billing)\n- [checks](https://docs.github.com/rest/reference/checks)\n- [code_scanning](https://docs.github.com/rest/reference/code-scanning)\n- [codes_of_conduct](https://docs.github.com/rest/reference/codes-of-conduct)\n- [emojis](https://docs.github.com/rest/reference/emojis)\n- [enterprise_admin](https://docs.github.com/rest/reference/enterprise-admin)\n- [gists](https://docs.github.com/rest/reference/gists)\n- [git](https://docs.github.com/rest/reference/git)\n- [gitignore](https://docs.github.com/rest/reference/gitignore)\n- [interactions](https://docs.github.com/rest/reference/interactions)\n- [issues](https://docs.github.com/rest/reference/issues)\n- [licenses](https://docs.github.com/rest/reference/licenses)\n- [markdown](https://docs.github.com/rest/reference/markdown)\n- [meta](https://docs.github.com/rest/reference/meta)\n- [migrations](https://docs.github.com/rest/reference/migrations)\n- [oauth_authorizations](https://docs.github.com/rest/reference/oauth-authorizations)\n- [orgs](https://docs.github.com/rest/reference/orgs)\n- [projects](https://docs.github.com/rest/reference/projects)\n- [pulls](https://docs.github.com/rest/reference/pulls)\n- [rate_limit](https://docs.github.com/rest/reference/rate-limit)\n- [reactions](https://docs.github.com/rest/reference/reactions)\n- [repos](https://docs.github.com/rest/reference/repos)\n- [scim](https://docs.github.com/rest/reference/scim)\n- [search](https://docs.github.com/rest/reference/search)\n- [secret_scanning](https://docs.github.com/rest/reference/secret-scanning)\n- [teams](https://docs.github.com/rest/reference/teams)\n- [users](https://docs.github.com/rest/reference/users)\n\nthen we can explore the endpoints provided by the api in each group,\ne.g.\u00a0for the `git` group:\n\n``` python\napi.git\n```\n\n- [git.create_blob](https://docs.github.com/rest/reference/git#create-a-blob)(owner,\n  repo, content, encoding): *create a blob*\n- [git.get_blob](https://docs.github.com/rest/reference/git#get-a-blob)(owner,\n  repo, file_sha): *get a blob*\n- [git.create_commit](https://docs.github.com/rest/reference/git#create-a-commit)(owner,\n  repo, message, tree, parents, author, committer, signature): *create a\n  commit*\n- [git.get_commit](https://docs.github.com/rest/reference/git#get-a-commit)(owner,\n  repo, commit_sha): *get a commit*\n- [git.list_matching_refs](https://docs.github.com/rest/reference/git#list-matching-references)(owner,\n  repo, ref, per_page, page): *list matching references*\n- [git.get_ref](https://docs.github.com/rest/reference/git#get-a-reference)(owner,\n  repo, ref): *get a reference*\n- [git.create_ref](https://docs.github.com/rest/reference/git#create-a-reference)(owner,\n  repo, ref, sha, key): *create a reference*\n- [git.update_ref](https://docs.github.com/rest/reference/git#update-a-reference)(owner,\n  repo, ref, sha, force): *update a reference*\n- [git.delete_ref](https://docs.github.com/rest/reference/git#delete-a-reference)(owner,\n  repo, ref): *delete a reference*\n- [git.create_tag](https://docs.github.com/rest/reference/git#create-a-tag-object)(owner,\n  repo, tag, message, object, type, tagger): *create a tag object*\n- [git.get_tag](https://docs.github.com/rest/reference/git#get-a-tag)(owner,\n  repo, tag_sha): *get a tag*\n- [git.create_tree](https://docs.github.com/rest/reference/git#create-a-tree)(owner,\n  repo, tree, base_tree): *create a tree*\n- [git.get_tree](https://docs.github.com/rest/reference/git#get-a-tree)(owner,\n  repo, tree_sha, recursive): *get a tree*\n\nhere\u2019s how to learn about an endpoint you want to use, e.g.:\n\n``` python\napi.git.get_ref\n```\n\n[git.get_ref](https://docs.github.com/rest/reference/git#get-a-reference)(owner,\nrepo, ref): *get a reference*\n\nin jupyter notebook full tab completion, parameter lists, etc are\nprovided for all endpoints. endpoints are called as standard python\nmethods:\n\n``` python\napi.git.get_ref(owner='fastai', repo='fastcore', ref='heads/master')\n```\n\n- ref: refs/heads/master\n- node_id: mdm6umvmmji1ndywntk5onjlznmvagvhzhmvbwfzdgvy\n- url:\n  https://api.github.com/repos/fastai/fastcore/git/refs/heads/master\n- object:\n  - sha: 0e3084ed009baa51db38a640ae7c23d638af2756\n  - type: commit\n  - url:\n    https://api.github.com/repos/fastai/fastcore/git/commits/0e3084ed009baa51db38a640ae7c23d638af2756\n\nto use [`ghapi`](https://ghapi.fast.ai/cli.html#ghapi) to access\nauthenticated operations (other than when running through github\nactions), you will need a github [personal access\ntoken](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token),\nwhich is a secret code used to access your account. if you don\u2019t have\none, [click here](https://github.com/settings/tokens/new) to create one.\nyou\u2019ll be asked to enter a name \u2013 choose anything you like, for instance\n\u201c*ghapi*\u201d. you\u2019ll also be asked to choose \u201cscopes\u201d; this limits what\nyou\u2019ll be able to do with the api using this token. if you\u2019re not sure,\nclick \u201c*repo*\u201d \u201c*gist*\u201d, \u201c*notifications*\u201d, and \u201c*workflow*\u201d. then click\n\u201cgenerate token\u201d at the bottom of the screen, and copy the token (the\nlong string of letters and numbers shown). you can easily do that by\nclicking the little clipboard icon next to the token.\n\nrather than pasting that token into every script, it\u2019s easiest to save\nit as an environment variable. if you save it as `$github_token` then it\nwill be most convenient, so add this to the end of your `.bashrc` or\n`.zshrc` file:\n\n    export github_token=xxx\n\n\u2026replacing the `xxx` with the token you just copied. (don\u2019t forget to\n`source` that file after you change it.), pass a \\[github token\\].\n\nas well as your `token`, you can also pass any parameters you want\nauto-inserted into relevant methods, such as `owner` and `repo`:\n\n``` python\napi = ghapi(owner='fastai', repo='fastcore', token=github_token)\n```\n\nwe can now repeat the previous method, but only need to pass `ref`:\n\n``` python\napi.git.get_ref('heads/master')\n```\n\n- ref: refs/heads/master\n- node_id: mdm6umvmmji1ndywntk5onjlznmvagvhzhmvbwfzdgvy\n- url:\n  https://api.github.com/repos/fastai/fastcore/git/refs/heads/master\n- object:\n  - sha: 0e3084ed009baa51db38a640ae7c23d638af2756\n  - type: commit\n  - url:\n    https://api.github.com/repos/fastai/fastcore/git/commits/0e3084ed009baa51db38a640ae7c23d638af2756\n\nnow that we\u2019ve provided our token, we can use authenticated endpoints\nsuch as creating an issue:\n\n``` python\nissue = api.issues.create(\"remember to check out ghapi!\")\n```\n\nsince we\u2019ve now checked out ghapi, let\u2019s close this issue. \ud83d\ude0e\n\n``` python\napi.issues.update(issue.number, state='closed')\n```\n\n## how to use - command line\n\nyou can use [`ghapi`](https://ghapi.fast.ai/core.html#ghapi) via the\ncommand line, and can access nearly everything in the [github\napi](https://docs.github.com/rest). we provide an overview here of one\nof the command line programs,\n[`ghapi`](https://ghapi.fast.ai/cli.html#ghapi) \u2013 see the full cli docs\npage for details on all the programs available.\n\nwe strongly recommend enabling tab completion for\n[`ghapi`](https://ghapi.fast.ai/cli.html#ghapi), which you can do by\nplacing the following command at the end of your `~/.bashrc` or\n`~/.zshrc` file:\n\n``` bash\neval \"$(completion-ghapi --install)\"\n```\n\nto get started with the [`ghapi`](https://ghapi.fast.ai/cli.html#ghapi)\ncommand, first find the name of the operation you wish to perform, for\ninstance by searching the [full api\nreference](https://ghapi.fast.ai/fullapi.html).\n\nto use [`ghapi`](https://ghapi.fast.ai/cli.html#ghapi), pass the method\nname (exactly the same as you\u2019d use in the python api) as the first\nparameter, followed by any positional parameters required, and then\nkeyword arguments with \u201c`--`\u201d before each parameter name.\n\nfor instance, [git.get_ref](https://ghapi.fast.ai/fullapi.html#git)\ntakes three parameters: `owner`, `repo`, and `ref`. if we wish to pass\nthe first two as positional parameters, and the last as a named\nargument, then we\u2019d call:\n\n``` bash\nghapi git.get_ref fastai ghapi-test --ref heads/master\n```\n\nif you have enabled tab completion, then after you\u2019ve typed `ghapi g`\ntry pressing <kbd>tab</kbd>, and you\u2019ll see all the operation groups\navailable in the github api that start with `g`. if you keep typing,\ne.g.\u00a0`ghapi git.`, and hit <kbd>tab</kbd> again, you\u2019ll now see all the\noperations available in the `git` group, i.e:\n\n    git.create_blob git.create_commit git.create_ref git.create_tag git.create_tree git.delete_ref git.get_blob git.get_commit git.get_ref git.get_tag git.get_tree git.list_matching_refs git.name git.update_ref git.verbs\n\nif you pass just `--help` after the operation name, you\u2019ll see a full\nlist of all parameters accepted, and a link to the official github\ndocumentation.\n\n``` bash\nghapi git.get_ref --help\n>>> git.get_ref(owner, repo, ref)\n>>> https://docs.github.com/rest/reference/git#get-a-reference\n```\n\nin addition to `--help` and the github operation parameters, you can\nalso pass the following:\n\n- `--headers`: a list of extra headers to pass, json-encoded\n- `--token`: a github authentation token\n- `--debug`: print requests before sending them\n\n\n",
  "docs_url": null,
  "keywords": "github api",
  "license": "apache software license 2.0",
  "name": "ghapi",
  "package_url": "https://pypi.org/project/ghapi/",
  "project_url": "https://pypi.org/project/ghapi/",
  "project_urls": {
    "Documentation": "https://ghapi.fast.ai/",
    "Homepage": "https://github.com/fastai/ghapi"
  },
  "release_url": "https://pypi.org/project/ghapi/1.0.4/",
  "requires_dist": [
    "pip",
    "packaging",
    "fastcore (>=1.5.4)",
    "jsonref ; extra == 'dev'",
    "matplotlib ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "a python client for the github api",
  "version": "1.0.4",
  "releases": [],
  "developers": [
    "info@fast.ai",
    "jeremy_howard"
  ],
  "kwds": "ghapi openapi api apis github",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_ghapi",
  "homepage": "https://github.com/fastai/ghapi",
  "release_count": 28,
  "dependency_ids": [
    "pypi_fastcore",
    "pypi_jsonref",
    "pypi_matplotlib",
    "pypi_packaging",
    "pypi_pip"
  ]
}
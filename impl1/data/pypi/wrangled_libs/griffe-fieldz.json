{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation",
    "topic :: software development",
    "topic :: software development :: documentation",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "# griffe-fieldz\n\n[![license](https://img.shields.io/pypi/l/griffe-fieldz.svg?color=green)](https://github.com/pyapp-kit/griffe-fieldz/raw/main/license)\n[![pypi](https://img.shields.io/pypi/v/griffe-fieldz.svg?color=green)](https://pypi.org/project/griffe-fieldz)\n[![python version](https://img.shields.io/pypi/pyversions/griffe-fieldz.svg?color=green)](https://python.org)\n[![ci](https://github.com/pyapp-kit/griffe-fieldz/actions/workflows/ci.yml/badge.svg)](https://github.com/pyapp-kit/griffe-fieldz/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/pyapp-kit/griffe-fieldz/branch/main/graph/badge.svg)](https://codecov.io/gh/pyapp-kit/griffe-fieldz)\n\ngriffe extension adding support for data-class like things (pydantic, attrs,\netc...). this extension will inject the fields of the data-class into the\ndocumentation, preventing you from duplicating field metadata in your\ndocstrings.\n\nit supports anything that [fieldz](https://github.com/pyapp-kit/fieldz)\nsupports, which is currently:\n\n- [`dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass)\n- [`pydantic.basemodel`](https://docs.pydantic.dev/latest/)\n- [`attrs.define`](https://www.attrs.org/en/stable/overview.html)\n- [`msgspec.struct`](https://jcristharif.com/msgspec/)\n\n## installation\n\nwith `pip`:\n\n```bash\npip install griffe-fieldz\n```\n\nto use the extension in a mkdocs project, use this configuration:\n\n```yaml\n# mkdocs.yml\nplugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - griffe_fieldz\n```\n\nyou may use any of the following options, provided as a dictionary under the\n`griffe_fieldz` key.\n\n| option              | description                                      | default |\n|---------------------|--------------------------------------------------|---------|\n| `include_inherited` | include inherited fields in class parameters.    | `false` |\n| `include_private`   | include private fields in the documentation.     | `false` |\n\nfor example:\n\n```yml\n        options:\n          extensions:\n          - griffe_fieldz: {include_inherited: true}\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "griffe-fieldz",
  "package_url": "https://pypi.org/project/griffe-fieldz/",
  "project_url": "https://pypi.org/project/griffe-fieldz/",
  "project_urls": {
    "homepage": "https://github.com/pyapp-kit/griffe-fieldz",
    "repository": "https://github.com/pyapp-kit/griffe-fieldz"
  },
  "release_url": "https://pypi.org/project/griffe-fieldz/0.1.2/",
  "requires_dist": [
    "fieldz>=0.0.2",
    "griffe>=0.35",
    "black; extra == 'dev'",
    "ipython; extra == 'dev'",
    "mypy; extra == 'dev'",
    "pdbpp; extra == 'dev'",
    "pre-commit; extra == 'dev'",
    "rich; extra == 'dev'",
    "ruff; extra == 'dev'",
    "pytest; extra == 'test'",
    "pytest-cov; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "griffe extension adding support for data-class like things (pydantic, attrs, etc...)",
  "version": "0.1.2",
  "releases": [],
  "developers": [
    "talley.lambert@example.com"
  ],
  "kwds": "griffe_fieldz griffe fieldz fields field",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_griffe_fieldz",
  "homepage": "",
  "release_count": 3,
  "dependency_ids": [
    "pypi_black",
    "pypi_fieldz",
    "pypi_griffe",
    "pypi_ipython",
    "pypi_mypy",
    "pypi_pdbpp",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_rich",
    "pypi_ruff"
  ]
}
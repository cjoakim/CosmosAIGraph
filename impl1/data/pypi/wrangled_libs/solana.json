{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/michaelhly/solana-py/master/docs/img/solana-py-logo.jpeg\" width=\"25%\" height=\"25%\">\n</div>\n\n---\n\n[![actions\nstatus](https://github.com/michaelhly/solanapy/workflows/ci/badge.svg)](https://github.com/michaelhly/solanapy/actions?query=workflow%3aci)\n[![pypi version](https://badge.fury.io/py/solana.svg)](https://badge.fury.io/py/solana)\n[![codecov](https://codecov.io/gh/michaelhly/solana-py/branch/master/graph/badge.svg)](https://codecov.io/gh/michaelhly/solana-py/branch/master)\n[![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://github.com/michaelhly/solana-py/blob/master/license)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# solana.py\n\n**\ud83d\udc0d the solana python sdk \ud83d\udc0d**\n\nsolana.py is the base python library for interacting with solana.\nyou can use it to build transactions and interact\nwith the\n[solana json rpc api](https://docs.solana.com/apps/jsonrpc-api),\nmuch like you would do with\n[solana-web3.js](https://github.com/solana-labs/solana-web3.js/)\n\nit also covers the\n[spl token program](https://spl.solana.com/token).\n\n[latest documentation](https://michaelhly.github.io/solana-py/).\n\nnote: this library uses many core types from the [solders](https://github.com/kevinheavey/solders) package which used to be provided by `solana-py` itself. if you are upgrading from an old version and you're looking for something that was deleted, it's probably in `solders` now.\n\n**\u2693\ufe0e see also: [anchorpy](https://github.com/kevinheavey/anchorpy),**\n**a python client for**\n**[anchor](https://project-serum.github.io/anchor/getting-started/introduction.html)-based**\n**programs on solana. \u2693\ufe0e**\n\n## \u26a1 quickstart\n\n### installation\n\n```sh\npip install solana\n```\n\n### general usage\n\nnote: check out the\n[solana cookbook](https://solanacookbook.com/)\nfor more detailed examples!\n\n```py\nimport solana\n```\n\n### api client\n\n```py\nfrom solana.rpc.api import client\n\nhttp_client = client(\"https://api.devnet.solana.com\")\n```\n\n### async api client\n\n```py\nimport asyncio\nfrom solana.rpc.async_api import asyncclient\n\nasync def main():\n    async with asyncclient(\"https://api.devnet.solana.com\") as client:\n        res = await client.is_connected()\n    print(res)  # true\n\n    # alternatively, close the client explicitly instead of using a context manager:\n    client = asyncclient(\"https://api.devnet.solana.com\")\n    res = await client.is_connected()\n    print(res)  # true\n    await client.close()\n\nasyncio.run(main())\n```\n\n### websockets client\n\n```py\nimport asyncio\nfrom asyncstdlib import enumerate\nfrom solana.rpc.websocket_api import connect\n\nasync def main():\n    async with connect(\"wss://api.devnet.solana.com\") as websocket:\n        await websocket.logs_subscribe()\n        first_resp = await websocket.recv()\n        subscription_id = first_resp.result\n        next_resp = await websocket.recv()\n        print(next_resp)\n        await websocket.logs_unsubscribe(subscription_id)\n\n    # alternatively, use the client as an infinite asynchronous iterator:\n    async with connect(\"wss://api.devnet.solana.com\") as websocket:\n        await websocket.logs_subscribe()\n        first_resp = await websocket.recv()\n        subscription_id = first_resp.result\n        async for idx, msg in enumerate(websocket):\n            if idx == 3:\n                break\n            print(msg)\n        await websocket.logs_unsubscribe(subscription_id)\n\nasyncio.run(main())\n```\n\n## \ud83d\udd28 development\n\n### setup\n\n1. install [poetry](https://python-poetry.org/docs/#installation)\n2. install dev dependencies:\n\n```sh\npoetry install\n\n```\n\n3. activate the poetry shell.\n\n```sh\npoetry shell\n```\n\n### lint\n\n```sh\nmake lint\n```\n\n### tests\n\n```sh\n# all tests\nmake tests\n# unit tests only\nmake unit-tests\n# integration tests only\nmake int-tests\n```\n",
  "docs_url": null,
  "keywords": "solana,blockchain,web3",
  "license": "mit",
  "name": "solana",
  "package_url": "https://pypi.org/project/solana/",
  "project_url": "https://pypi.org/project/solana/",
  "project_urls": {
    "Documentation": "https://michaelhly.github.io/solana-py/",
    "Homepage": "https://github.com/michaelhly/solanapy"
  },
  "release_url": "https://pypi.org/project/solana/0.30.2/",
  "requires_dist": [
    "construct-typing (>=0.5.2,<0.6.0)",
    "httpx (>=0.23.0,<0.24.0)",
    "typing-extensions (>=4.2.0)",
    "cachetools (>=4.2.2,<5.0.0)",
    "types-cachetools (>=4.2.4,<5.0.0)",
    "websockets (>=9.0,<12.0)",
    "solders (>=0.18.0,<0.19.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "solana python api",
  "version": "0.30.2",
  "releases": [],
  "developers": [
    "michael_huang",
    "michaelhly@gmail.com"
  ],
  "kwds": "solanapy solana solanacookbook badge workflow",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_solana",
  "homepage": "https://github.com/michaelhly/solanapy",
  "release_count": 66,
  "dependency_ids": [
    "pypi_cachetools",
    "pypi_construct_typing",
    "pypi_httpx",
    "pypi_solders",
    "pypi_types_cachetools",
    "pypi_typing_extensions",
    "pypi_websockets"
  ]
}
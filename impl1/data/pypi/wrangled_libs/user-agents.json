{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "python user agents\n==================\n\n`user_agents` is a python library that provides an easy way to identify/detect devices like mobile phones, tablets and their capabilities by parsing (browser/http) user agent strings. the goal is to reliably detect whether:\n\n* user agent is a mobile, tablet or pc based device\n* user agent has touch capabilities (has touch screen)\n\n`user_agents` relies on the excellent [ua-parser](https://github.com/ua-parser/uap-python) to do the actual parsing of the raw user agent string.\n\ninstallation\n------------\n\n![build status](https://secure.travis-ci.org/selwin/python-user-agents.png)\n\n`user-agents` is hosted on [pypi](http://pypi.python.org/pypi/user-agents/) and can be installed as such:\n\n    pip install pyyaml ua-parser user-agents\n\nalternatively, you can also get the latest source code from [github](https://github.com/selwin/python-user-agents) and install it manually.\n\nusage\n-----\n\nvarious basic information that can help you identify visitors can be accessed `browser`, `device` and `os` attributes. for example:\n\n```python\nfrom user_agents import parse\n\n# iphone's user agent string\nua_string = 'mozilla/5.0 (iphone; cpu iphone os 5_1 like mac os x) applewebkit/534.46 (khtml, like gecko) version/5.1 mobile/9b179 safari/7534.48.3'\nuser_agent = parse(ua_string)\n\n# accessing user agent's browser attributes\nuser_agent.browser  # returns browser(family=u'mobile safari', version=(5, 1), version_string='5.1')\nuser_agent.browser.family  # returns 'mobile safari'\nuser_agent.browser.version  # returns (5, 1)\nuser_agent.browser.version_string   # returns '5.1'\n\n# accessing user agent's operating system properties\nuser_agent.os  # returns operatingsystem(family=u'ios', version=(5, 1), version_string='5.1')\nuser_agent.os.family  # returns 'ios'\nuser_agent.os.version  # returns (5, 1)\nuser_agent.os.version_string  # returns '5.1'\n\n# accessing user agent's device properties\nuser_agent.device  # returns device(family=u'iphone', brand=u'apple', model=u'iphone')\nuser_agent.device.family  # returns 'iphone'\nuser_agent.device.brand # returns 'apple'\nuser_agent.device.model # returns 'iphone'\n\n# viewing a pretty string version\nstr(user_agent) # returns \"iphone / ios 5.1 / mobile safari 5.1\"\n```\n\n`user_agents` also expose a few other more \"sophisticated\" attributes that are derived from one or more basic attributes defined above. as for now, these attributes should correctly identify popular platforms/devices, pull requests to support smaller ones are always welcome.\n\ncurrently these attributes are supported:\n\n* `is_mobile`: whether user agent is identified as a mobile phone (iphone, android phones, blackberry, windows phone devices etc)\n* `is_tablet`: whether user agent is identified as a tablet device (ipad, kindle fire, nexus 7 etc)\n* `is_pc`: whether user agent is identified to be running a traditional \"desktop\" os (windows, os x, linux)\n* `is_touch_capable`: whether user agent has touch capabilities\n* `is_bot`: whether user agent is a search engine crawler/spider\n\nfor example:\n\n```python\nfrom user_agents import parse\n\n# let's start from an old, non touch blackberry device\nua_string = 'blackberry9700/5.0.0.862 profile/midp-2.1 configuration/cldc-1.1 vendorid/331 untrusted/1.0 3gpp-gba'\nuser_agent = parse(ua_string)\nuser_agent.is_mobile # returns true\nuser_agent.is_tablet # returns false\nuser_agent.is_touch_capable # returns false\nuser_agent.is_pc # returns false\nuser_agent.is_bot # returns false\nstr(user_agent) # returns \"blackberry 9700 / blackberry os 5 / blackberry 9700\"\n\n# now a samsung galaxy s3\nua_string = 'mozilla/5.0 (linux; u; android 4.0.4; en-gb; gt-i9300 build/imm76d) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30'\nuser_agent = parse(ua_string)\nuser_agent.is_mobile # returns true\nuser_agent.is_tablet # returns false\nuser_agent.is_touch_capable # returns true\nuser_agent.is_pc # returns false\nuser_agent.is_bot # returns false\nstr(user_agent) # returns \"samsung gt-i9300 / android 4.0.4 / android 4.0.4\"\n\n# ipad's user agent string\nua_string = 'mozilla/5.0(ipad; u; cpu iphone os 3_2 like mac os x; en-us) applewebkit/531.21.10 (khtml, like gecko) version/4.0.4 mobile/7b314 safari/531.21.10'\nuser_agent = parse(ua_string)\nuser_agent.is_mobile # returns false\nuser_agent.is_tablet # returns true\nuser_agent.is_touch_capable # returns true\nuser_agent.is_pc # returns false\nuser_agent.is_bot # returns false\nstr(user_agent) # returns \"ipad / ios 3.2 / mobile safari 4.0.4\"\n\n# kindle fire's user agent string\nua_string = 'mozilla/5.0 (macintosh; u; intel mac os x 10_6_3; en-us; silk/1.1.0-80) applewebkit/533.16 (khtml, like gecko) version/5.0 safari/533.16 silk-accelerated=true'\nuser_agent = parse(ua_string)\nuser_agent.is_mobile # returns false\nuser_agent.is_tablet # returns true\nuser_agent.is_touch_capable # returns true\nuser_agent.is_pc # returns false\nuser_agent.is_bot # returns false\nstr(user_agent) # returns \"kindle / android / amazon silk 1.1.0-80\"\n\n# touch capable windows 8 device\nua_string = 'mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0; touch)'\nuser_agent = parse(ua_string)\nuser_agent.is_mobile # returns false\nuser_agent.is_tablet # returns false\nuser_agent.is_touch_capable # returns true\nuser_agent.is_pc # returns true\nuser_agent.is_bot # returns false\nstr(user_agent) # returns \"pc / windows 8 / ie 10\"\n```\n\nrunning tests\n-------------\n\n    python -m unittest discover\n\nchangelog\n---------\n### version 2.2.0 (2020-08-23)\n* `ua-parser` >= 0.10.0 is required. thanks @jnozsc!\n* added `get_device()`, `get_os()` and `get_browser()` instance methods\nto `useragent`. thanks @rodrigondec!\n\n### version 2.1 (2020-02-08)\n\n* `python-user-agents` now require `ua-parser>=0.9.0`. thanks @jnozsc!\n* properly detect chrome mobile browser families. thanks @jnozsc!\n\n### version 2.0 (2019-04-07)\n\n* `python-user-agents` now require `ua-parser>=0.8.0`. thanks @imdagger!\n\n### version 1.1\n\n* fixes packaging issue\n\n### version 1.0\n\n* adds compatibility with `ua-parser` 0.4.0\n* access to more device information in `user_agent.device.brand` and `user_agent.device.model`\n\n### version 0.3.2\n\n* better mobile detection\n* better pc detection\n\n### version 0.3.1\n\n* user\\_agent.is\\_mobile returns true when mobile spider is detected\n\n### version 0.3.0\n\n* added **str**/**unicode** methods for convenience of pretty string\n\n### version 0.2.0\n\n* fixed errors when running against newer versions if ua-parser\n* support for python 3\n\n### version 0.1.1\n\n* added `is_bot` property\n* symbian os devices are now detected as a mobile device\n\n### version 0.1\n\n* initial release\n\ndeveloped by the cool guys at [stamps](http://stamps.co.id).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "user-agents",
  "package_url": "https://pypi.org/project/user-agents/",
  "project_url": "https://pypi.org/project/user-agents/",
  "project_urls": {
    "Homepage": "https://github.com/selwin/python-user-agents"
  },
  "release_url": "https://pypi.org/project/user-agents/2.2.0/",
  "requires_dist": [
    "ua-parser (>=0.10.0)"
  ],
  "requires_python": "",
  "summary": "a library to identify devices (phones, tablets) and their capabilities by parsing browser user agent strings.",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "selwin.ong@gmail.com",
    "selwin_ong"
  ],
  "kwds": "get_device user_agent user_agents is_touch_capable is_mobile",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_user_agents",
  "homepage": "https://github.com/selwin/python-user-agents",
  "release_count": 12,
  "dependency_ids": [
    "pypi_ua_parser"
  ]
}
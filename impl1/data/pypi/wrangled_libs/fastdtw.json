{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: scientific/engineering"
  ],
  "description": "fastdtw\n-------\n\npython implementation of `fastdtw\n<http://cs.fit.edu/~pkc/papers/tdm04.pdf>`_ [1]_, which is an approximate dynamic time warping (dtw) algorithm that provides optimal or near-optimal alignments with an o(n) time and memory complexity.\n\ninstall\n-------\n\n::\n\n  pip install fastdtw\n\nexample\n-------\n\n::\n\n  import numpy as np\n  from scipy.spatial.distance import euclidean\n\n  from fastdtw import fastdtw\n\n  x = np.array([[1,1], [2,2], [3,3], [4,4], [5,5]])\n  y = np.array([[2,2], [3,3], [4,4]])\n  distance, path = fastdtw(x, y, dist=euclidean)\n  print(distance)\n\nreferences\n----------\n\n.. [1] stan salvador, and philip chan. \"fastdtw: toward accurate dynamic time warping in linear time and space.\" intelligent data analysis 11.5 (2007): 561-580.\n\n\n",
  "docs_url": null,
  "keywords": "dtw",
  "license": "mit",
  "name": "fastdtw",
  "package_url": "https://pypi.org/project/fastdtw/",
  "project_url": "https://pypi.org/project/fastdtw/",
  "project_urls": {
    "Homepage": "https://github.com/slaypni/fastdtw"
  },
  "release_url": "https://pypi.org/project/fastdtw/0.3.4/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "summary": "dynamic time warping (dtw) algorithm with an o(n) time and memory complexity.",
  "version": "0.3.4",
  "releases": [],
  "developers": [
    "kazuaki_tanida"
  ],
  "kwds": "numpy distance warping fastdtw scipy",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_fastdtw",
  "homepage": "https://github.com/slaypni/fastdtw",
  "release_count": 8,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
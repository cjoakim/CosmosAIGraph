{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# pyconify\n\n[![license](https://img.shields.io/pypi/l/pyconify.svg?color=green)](https://github.com/pyapp-kit/pyconify/raw/main/license)\n[![pypi](https://img.shields.io/pypi/v/pyconify.svg?color=green)](https://pypi.org/project/pyconify)\n[![conda](https://img.shields.io/conda/vn/conda-forge/pyconify)](https://github.com/conda-forge/pyconify-feedstock)\n[![python version](https://img.shields.io/pypi/pyversions/pyconify.svg?color=green)](https://python.org)\n[![ci](https://github.com/pyapp-kit/pyconify/actions/workflows/ci.yml/badge.svg)](https://github.com/pyapp-kit/pyconify/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/pyapp-kit/pyconify/branch/main/graph/badge.svg)](https://codecov.io/gh/pyapp-kit/pyconify)\n\npython wrapper for the [iconify](https://github.com/iconify) api.\n\niconify is a versatile icon framework that includes 100+ icon sets with more\nthan 100,000 icons from fontawesome, material design icons, dashicons, feather\nicons, emojione, noto emoji and many other open source icon sets.\n\nsearch for icons at: https://icon-sets.iconify.design\n\n## installation\n\n```sh\npip install pyconify\n# or\nconda install -c conda-forge pyconify\n```\n\n## usage\n\n```python\nimport pyconify\n\n# info on available collections\ncollections = pyconify.collections()\n\n# info on specific collection(s)\ndetails = pyconify.collection(\"fa\", \"fa-brands\")\n\n# search for icons\nhits = pyconify.search(\"python\")\n\n# get icon data\ndata = pyconify.icon_data(\"fa-brands\", \"python\")\n\n# get svg\nsvg = pyconify.svg(\"fa-brands\", \"python\")\n\n# get path to svg on disk\n# will either return cached version, or write to temp file\nfile_name = pyconify.svg_path(\"fa-brands\", \"python\")\n\n# get css\ncss = pyconify.css(\"fa-brands\", \"python\")\n\n# keywords\npyconify.keywords('home')\n\n# api version\npyconify.iconify_version()\n```\n\nsee details for each of these results in the [iconify api documentation](https://iconify.design/docs/api/queries.html).\n\n### cache\n\nwhile the first fetch of any given svg will require internet access,\npyconfiy caches svgs for faster retrieval and offline use. to\nsee or clear cache directory:\n\n```python\nimport pyconify\n\n# reveal location of cache\n# will be ~/.cache/pyconify on linux and macos\n# will be %localappdata%\\pyconify on windows\n# falls back to ~/.pyconify if none of the above are available\npyconify.get_cache_directory()\n\n# remove the cache directory (and all its contents)\npyconify.clear_cache()\n```\n\nif you'd like to precache a number of svgs, the current recommendation\nis to use the `svg()` function:\n\n```python\nimport pyconify\n\nimport pyconify\n\nicons_to_store = {\"mdi:bell\", \"mdi:bell-off\", \"mdi:bell-outline\"}\nfor key in icons_to_store:\n    pyconify.svg(key)\n```\n\nlater calls to `svg()` will use the cached values.\n\nto specify a custom cache directory, set the `pyconify_cache` environment\nvariable to your desired directory.\nto disable caching altogether, set the `pyconify_cache` environment variable to\n`false` or `0`.\n\n### freedesktop themes\n\n`pyconify` includes a convenience function to generate a directory of svg files\nin the [freedesktop icon theme specification](https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html)\n\nit takes a mapping of names from the [icon naming spec](https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html)\nto iconify keys (e.g. `\"prefix:icon\"`). icons will be placed in the\nappropriate freedesktop subdirectory based on the icon name. unknown icons will be placed\nin the `other` subdirectory.\n\n```python\nfrom pyconify import freedesktop_theme\nfrom pyconify.api import svg\nicons = {\n    \"edit-copy\": \"ic:sharp-content-copy\",\n    \"edit-delete\": {\"key\": \"ic:sharp-delete\", \"color\": \"red\"},\n    \"weather-overcast\": \"ic:sharp-cloud\",\n    \"weather-clear\": \"ic:sharp-wb-sunny\",\n    \"bell\": \"bi:bell\",\n}\nfolder = freedesktop_theme(\n    \"mytheme\",\n    icons,\n    base_directory=\"~/desktop/icons\",\n)\n```\n\nwould create\n\n```\n~/desktop/icons/\n\u251c\u2500\u2500 mytheme\n\u2502   \u251c\u2500\u2500 actions\n\u2502   \u2502   \u251c\u2500\u2500 edit-copy.svg\n\u2502   \u2502   \u2514\u2500\u2500 edit-delete.svg\n\u2502   \u251c\u2500\u2500 status\n\u2502   \u2502   \u251c\u2500\u2500 weather-clear.svg\n\u2502   \u2502   \u2514\u2500\u2500 weather-overcast.svg\n\u2502   \u2514\u2500\u2500 other\n\u2502       \u2514\u2500\u2500 bell.svg\n\u2514\u2500\u2500 index.theme\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "pyconify",
  "package_url": "https://pypi.org/project/pyconify/",
  "project_url": "https://pypi.org/project/pyconify/",
  "project_urls": {
    "homepage": "https://github.com/pyapp-kit/pyconify",
    "repository": "https://github.com/pyapp-kit/pyconify"
  },
  "release_url": "https://pypi.org/project/pyconify/0.1.6/",
  "requires_dist": [
    "requests",
    "black; extra == 'dev'",
    "ipython; extra == 'dev'",
    "mypy; extra == 'dev'",
    "pdbpp; extra == 'dev'",
    "rich; extra == 'dev'",
    "ruff; extra == 'dev'",
    "types-requests; extra == 'dev'",
    "pytest; extra == 'test'",
    "pytest-cov; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "iconify for python. universal icon framework",
  "version": "0.1.6",
  "releases": [],
  "developers": [
    "talley.lambert@gmail.com"
  ],
  "kwds": "pyconify iconify pyconify_cache pyversions iconify_version",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_pyconify",
  "homepage": "",
  "release_count": 6,
  "dependency_ids": [
    "pypi_black",
    "pypi_ipython",
    "pypi_mypy",
    "pypi_pdbpp",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_rich",
    "pypi_ruff",
    "pypi_types_requests"
  ]
}
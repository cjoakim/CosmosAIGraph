{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "silence tensorflow\n=========================================================================================\n|pip| |downloads|\n\nsimple python package to shut up tensorflow warnings and logs, letting you focus on the \nimportant errors.\n\nhow do i install this package?\n----------------------------------------------\nas usual, just download it using pip:\n\n.. code:: shell\n\n    pip install silence_tensorflow\n\n\nhow do i use it?\n----------------------------------------\nyou only need to import the package before import tensorflow:\n\n.. code:: python\n\n    from silence_tensorflow import silence_tensorflow\n    silence_tensorflow()\n    import tensorflow as tf\n\n    ...\n\n    # your code\n\ncan it be done within the import?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsure, you can do everything with a single line by\nimporting the submodule auto:\n\n.. code:: python\n\n    import silence_tensorflow.auto\n    import tensorflow as tf\n\n    ...\n\n    # your code\n\nhow can i get pylint to ignore the unused import?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nyou can use the flag 'disable=unused-import' as such:\n\n.. code:: python\n\n    import silence_tensorflow.auto  # pylint: disable=unused-import\n    import tensorflow as tf\n\n    ...\n\n    # your code\n\nhow can i get pylint to ignore the unused variable?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nif you import silence_tensorflow in the context of a function\nyou will get a different warning from pyling: unused variable.\nyou can use the flag 'disable=unused-variable' as such:\n\n.. code:: python\n    \n    def func():\n        import silence_tensorflow.auto  # pylint: disable=unused-variable\n        import tensorflow as tf\n\n        ...\n\n        # your code\n\nhow does this work under the hood?\n----------------------------------------\nthis package will set the `kmp_affinity` system variable to `\"noverbose\"`,\n`tf_cpp_min_log_level` to level `3` (only errors logged).\n\nif you need a custom value for `kmp_affinity` you should reset it after importing the package, as follows:\n\n.. code:: python\n\n    import os\n    from silence_tensorflow import silence_tensorflow\n    backup = os.environ[\"kmp_affinity\"]\n    silence_tensorflow()\n    os.environ[\"kmp_affinity\"] = backup\n\n.. |pip| image:: https://badge.fury.io/py/silence-tensorflow.svg\n    :target: https://badge.fury.io/py/silence-tensorflow\n    :alt: pypi project\n\n.. |downloads| image:: https://pepy.tech/badge/silence-tensorflow\n    :target: https://pepy.tech/badge/silence-tensorflow\n    :alt: pypi total project downloads",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "silence-tensorflow",
  "package_url": "https://pypi.org/project/silence-tensorflow/",
  "project_url": "https://pypi.org/project/silence-tensorflow/",
  "project_urls": {
    "Homepage": "https://github.com/LucaCappelletti94/silence_tensorflow"
  },
  "release_url": "https://pypi.org/project/silence-tensorflow/1.2.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "simple python package to shut up tensorflow warnings and logs.",
  "version": "1.2.1",
  "releases": [],
  "developers": [
    "cappelletti.luca94@gmail.com",
    "luca_cappelletti"
  ],
  "kwds": "silence_tensorflow tensorflow pip python silence",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_silence_tensorflow",
  "homepage": "https://github.com/lucacappelletti94/silence_tensorflow",
  "release_count": 7,
  "dependency_ids": []
}
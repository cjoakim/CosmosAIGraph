{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development"
  ],
  "description": "retry2\n======\n\n.. image:: https://img.shields.io/pypi/dm/retry.svg?maxage=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n.. image:: https://img.shields.io/pypi/v/retry.svg?maxage=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n.. image:: https://img.shields.io/pypi/l/retry2.svg?maxage=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n\neasy to use retry decorator.\n\n\n[this is a fork of https://github.com/invl/retry which is not maintained anymore]\n\nfeatures\n--------\n\n- no external dependency (stdlib only).\n- (optionally) preserve function signatures (`pip install decorator`).\n- original traceback, easy to debug.\n\n\ninstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install retry2\n\n\napi\n---\n\nretry decorator\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    def retry(exceptions=exception, tries=-1, delay=0, max_delay=none, backoff=1, jitter=0, logger=logging_logger,\n              on_exception=none):\n        \"\"\"return a retry decorator.\n\n        :param exceptions: an exception or a tuple of exceptions to catch. default: exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: none (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if none, logging is disabled.\n        :param on_exception: handler called when exception occurs. will be passed the captured\n                             exception as an argument. further retries are stopped when handler\n                             returns true. default: none\n        \"\"\"\n\nvarious retrying logic can be achieved by combination of arguments.\n\n\nexamples\n\"\"\"\"\"\"\"\"\n\n.. code:: python\n\n    from retry import retry\n\n.. code:: python\n\n    @retry()\n    def make_trouble():\n        '''retry until succeed'''\n\n.. code:: python\n\n    @retry(zerodivisionerror, tries=3, delay=2)\n    def make_trouble():\n        '''retry on zerodivisionerror, raise error after 3 attempts, sleep 2 seconds between attempts.'''\n\n.. code:: python\n\n    @retry((valueerror, typeerror), delay=1, backoff=2)\n    def make_trouble():\n        '''retry on valueerror or typeerror, sleep 1, 2, 4, 8, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry((valueerror, typeerror), delay=1, backoff=2, max_delay=4)\n    def make_trouble():\n        '''retry on valueerror or typeerror, sleep 1, 2, 4, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry(valueerror, delay=1, jitter=1)\n    def make_trouble():\n        '''retry on valueerror, sleep 1, 2, 3, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    # if you enable logging, you can get warnings like 'valueerror, retrying in\n    # 1 seconds'\n    if __name__ == '__main__':\n        import logging\n        logging.basicconfig()\n        make_trouble()\n\nretry_call\n^^^^^^^^^^\n\n.. code:: python\n\n    def retry_call(f, fargs=none, fkwargs=none, exceptions=exception, tries=-1, delay=0, max_delay=none, backoff=1,\n                   jitter=0, logger=logging_logger, on_exception=none):\n        \"\"\"\n        calls a function and re-executes it if it failed.\n\n        :param f: the function to execute.\n        :param fargs: the positional arguments of the function to execute.\n        :param fkwargs: the named arguments of the function to execute.\n        :param exceptions: an exception or a tuple of exceptions to catch. default: exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: none (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if none, logging is disabled.\n        :param on_exception: handler called when exception occurs. will be passed the captured\n                             exception as an argument. further retries are stopped when handler\n                             returns true. default: none\n        :returns: the result of the f function.\n        \"\"\"\n\nthis is very similar to the decorator, except that it takes a function and its arguments as parameters. the use case behind it is to be able to dynamically adjust the retry arguments.\n\n.. code:: python\n\n    import requests\n\n    from retry.api import retry_call\n\n\n    def make_trouble(service, info=none):\n        if not info:\n            info = ''\n        r = requests.get(service + info)\n        return r.text\n\n\n    def what_is_my_ip(approach=none):\n        if approach == \"optimistic\":\n            tries = 1\n        elif approach == \"conservative\":\n            tries = 3\n        else:\n            # skeptical\n            tries = -1\n        result = retry_call(make_trouble, fargs=[\"http://ipinfo.io/\"], fkwargs={\"info\": \"ip\"}, tries=tries)\n        print(result)\n\n    what_is_my_ip(\"conservative\")\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "retry2",
  "package_url": "https://pypi.org/project/retry2/",
  "project_url": "https://pypi.org/project/retry2/",
  "project_urls": {
    "Homepage": "https://github.com/eSAMTrade/retry"
  },
  "release_url": "https://pypi.org/project/retry2/0.9.5/",
  "requires_dist": [
    "decorator (>=3.4.2)"
  ],
  "requires_python": ">=2.6",
  "summary": "easy to use retry decorator.",
  "version": "0.9.5",
  "releases": [],
  "developers": [
    "andrei.suiu@gmail.com",
    "andrei_suiu"
  ],
  "kwds": "retry_call retrying retry retry2 retries",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_retry2",
  "homepage": "https://github.com/esamtrade/retry",
  "release_count": 3,
  "dependency_ids": [
    "pypi_decorator"
  ]
}
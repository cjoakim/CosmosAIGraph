{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# deltalake-python\n\n[![pypi](https://img.shields.io/pypi/v/deltalake.svg?style=flat-square)](https://pypi.org/project/deltalake/)\n[![userdoc](https://img.shields.io/badge/docs-user-blue)](https://delta-io.github.io/delta-rs/python/)\n[![apidoc](https://img.shields.io/badge/docs-api-blue)](https://delta-io.github.io/delta-rs/python/api_reference.html)\n\nnative [delta lake](https://delta.io/) python binding based on\n[delta-rs](https://github.com/delta-io/delta-rs) with\n[pandas](https://pandas.pydata.org/) integration.\n\n\n## example\n\n```python\nfrom deltalake import deltatable\ndt = deltatable(\"../rust/tests/data/delta-0.2.0\")\ndt.version()\n3\ndt.files()\n['part-00000-cb6b150b-30b8-4662-ad28-ff32ddab96d2-c000.snappy.parquet',\n 'part-00000-7c2deba3-1994-4fb8-bc07-d46c948aa415-c000.snappy.parquet',\n 'part-00001-c373a5bd-85f0-4758-815e-7eb62007a15c-c000.snappy.parquet']\n```\n\nsee the [user guide](https://delta-io.github.io/delta-rs/python/usage.html) for more examples.\n\n## installation\n\n```bash\npip install deltalake\n```\n\nnote: official binary wheels are linked against openssl statically for remote\nobjection store communication. please file github issue to request for critical\nopenssl upgrade.\n\n\n## build custom wheels\n\nsometimes you may wish to build custom wheels. maybe you want to try out some\nunreleased features. or maybe you want to tweak the optimization of the rust code.\n\nto compile the package, you will need the rust compiler and [maturin](https://github.com/pyo3/maturin):\n\n```sh\ncurl https://sh.rustup.rs -ssf | sh -s\npip install maturin\n```\n\nthen you can build wheels for your own platform like so:\n\n```sh\nmaturin build --release --out wheels\n```\n\nfor a build that is optimized for the system you are on (but sacrificing portability):\n\n```sh\nrustflags=\"-c target-cpu=native\" maturin build --release --out wheels\n```\n\n#### cross compilation\n\nthe above command only works for your current platform. to create wheels for other\nplatforms, you'll need to cross compile. cross compilation requires installing\ntwo additional components: to cross compile rust code, you will need to install\nthe target with `rustup`; to cross compile the python bindings, you will need\nto install `ziglang`.\n\nthe following example is for manylinux2014. other targets will require different\nrust `target` and python `compatibility` tags.\n\n```sh\nrustup target add x86_64-unknown-linux-gnu\npip install ziglang\n```\n\nthen you can build the wheel with:\n\n```sh\nmaturin build --release --zig \\\n    --target x86_64-unknown-linux-gnu \\\n    --compatibility manylinux2014 \\\n    --out wheels\n```\n\nif you expect to only run on more modern system, you can set a newer `target-cpu`\nflag to rust and use a newer compatibility tag for linux. for example, here\nwe set compatibility with cpus newer than haswell (2013) and linux os with \nglibc version of at least 2.24:\n\n```sh\nrustflags=\"-c target-cpu=haswell\" maturin build --release --zig \\\n    --target x86_64-unknown-linux-gnu \\\n    --compatibility manylinux_2_24 \\\n    --out wheels\n```\n\nsee note about `rustflags` from [the arrow-rs readme](https://github.com/apache/arrow-rs/blob/master/arrow/readme.md#performance-tips).\n\n",
  "docs_url": null,
  "keywords": "deltalake,delta,datalake,pandas,arrow",
  "license": "apache-2.0",
  "name": "deltalake",
  "package_url": "https://pypi.org/project/deltalake/",
  "project_url": "https://pypi.org/project/deltalake/",
  "project_urls": {
    "Homepage": "https://github.com/delta-io/delta-rs",
    "documentation": "https://delta-io.github.io/delta-rs/",
    "repository": "https://github.com/delta-io/delta-rs/tree/main/python/"
  },
  "release_url": "https://pypi.org/project/deltalake/0.14.0/",
  "requires_dist": [
    "pyarrow >=8",
    "pandas ; extra == 'pandas'",
    "mypy ; extra == 'devel'",
    "ruff >=0.1.5 ; extra == 'devel'",
    "packaging >=20 ; extra == 'devel'",
    "pytest ; extra == 'devel'",
    "pytest-mock ; extra == 'devel'",
    "pytest-cov ; extra == 'devel'",
    "pytest-timeout ; extra == 'devel'",
    "sphinx <=4.5 ; extra == 'devel'",
    "sphinx-rtd-theme ; extra == 'devel'",
    "toml ; extra == 'devel'",
    "wheel ; extra == 'devel'",
    "pytest-benchmark ; extra == 'devel'",
    "pyspark ; extra == 'pyspark'",
    "delta-spark ; extra == 'pyspark'",
    "numpy ==1.22.2 ; extra == 'pyspark'"
  ],
  "requires_python": ">=3.8",
  "summary": "native delta lake python binding based on delta-rs with pandas integration",
  "version": "0.14.0",
  "releases": [],
  "developers": [
    "dave2008713@gmail.com",
    "willjones127@gmail.com"
  ],
  "kwds": "deltalake datalake delta deltatable pandas",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_deltalake",
  "homepage": "https://github.com/delta-io/delta-rs",
  "release_count": 42,
  "dependency_ids": [
    "pypi_delta_spark",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pyarrow",
    "pypi_pyspark",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_timeout",
    "pypi_ruff",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_toml",
    "pypi_wheel"
  ]
}
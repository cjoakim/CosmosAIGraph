{
  "classifiers": [
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries"
  ],
  "description": "================================================================================\nlml - load me later. a lazy plugin management system.\n================================================================================\n\n.. image:: https://api.travis-ci.org/python-lml/lml.svg\n   :target: http://travis-ci.org/python-lml/lml\n\n.. image:: https://codecov.io/github/python-lml/lml/coverage.png\n   :target: https://codecov.io/github/python-lml/lml\n.. image:: https://badge.fury.io/py/lml.svg\n   :target: https://pypi.org/project/lml\n\n.. image:: https://pepy.tech/badge/lml/month\n   :target: https://pepy.tech/project/lml/month\n\n.. image:: https://img.shields.io/github/stars/python-lml/lml.svg?style=social&maxage=3600&label=star\n    :target: https://github.com/python-lml/lml/stargazers\n\n.. image:: https://img.shields.io/static/v1?label=continuous%20templating&message=%e6%a8%a1%e7%89%88%e6%9b%b4%e6%96%b0&color=blue&style=flat-square\n    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects\n\n.. image:: https://img.shields.io/static/v1?label=coding%20style&message=black&color=black&style=flat-square\n    :target: https://github.com/psf/black\n\n.. image:: https://readthedocs.org/projects/lml/badge/?version=latest\n   :target: http://lml.readthedocs.org/en/latest/\n\n**lml** seamlessly finds the lml based plugins from your current python\nenvironment but loads your plugins on demand. it is designed to support\nplugins that have external dependencies, especially bulky and/or\nmemory hungry ones. lml provides the plugin management system only and the\nplugin interface is on your shoulder.\n\n**lml** enabled applications helps your customers [#f1]_ in two ways:\n\n#. your customers could cherry-pick the plugins from pypi per python environment.\n   they could remove a plugin using `pip uninstall` command.\n#. only the plugins used at runtime gets loaded into computer memory.\n\nwhen you would use **lml** to refactor your existing code, it aims to flatten the\ncomplexity and to shrink the size of your bulky python library by\ndistributing the similar functionalities across its plugins. however, you as\nthe developer need to do the code refactoring by yourself and lml would lend you a hand.\n\n.. [#f1] the end developers who uses your library and packages achieve their\n         objectives.\n\n\nquick start\n================================================================================\n\nthe following code tries to get you started quickly with **non-lazy** loading.\n\n.. code-block:: python\n\n    from lml.plugin import plugininfo, pluginmanager\n\n\n    @plugininfo(\"cuisine\", tags=[\"portable battery\"])\n    class boost(object):\n        def make(self, food=none, **keywords):\n            print(\"i can cook %s for robots\" % food)\n\n\n    class cuisinemanager(pluginmanager):\n        def __init__(self):\n            pluginmanager.__init__(self, \"cuisine\")\n\n        def get_a_plugin(self, food_name=none, **keywords):\n            return pluginmanager.get_a_plugin(self, key=food_name, **keywords)\n\n\n    if __name__ == '__main__':\n        manager = cuisinemanager()\n        chef = manager.get_a_plugin(\"portable battery\")\n        chef.make()\n\n\nat a glance, above code simply replaces the factory pattern should you write\nthem without lml. what's not obvious is, that once you got hands-on with it,\nyou can start work on how to do **lazy** loading.\n\n\ninstallation\n================================================================================\n\n\nyou can install lml via pip:\n\n.. code-block:: bash\n\n    $ pip install lml\n\n\nor clone it and install it:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/python-lml/lml.git\n    $ cd lml\n    $ python setup.py install\n\nlml enabled project\n================================================================================\n\nbeyond the documentation above, here is a list of projects using lml:\n\n#. `pyexcel <https://github.com/pyexcel/pyexcel>`_\n#. `pyecharts <https://github.com/pyecharts/pyecharts>`_\n#. `moban <https://github.com/moremoban/moban>`_\n\nlml is available on these distributions:\n\n#. `arch linux <https://aur.archlinux.org/packages/python-lml/>`_\n#. `conda forge <https://anaconda.org/conda-forge/lml>`_\n#. `opensuse <https://build.opensuse.org/package/show/devel:languages:python/python-lml>`_\n\n\nlicense\n================================================================================\n\nnew bsd\n\nchange log\n================================================================================\n\n0.1.0 - 21/10/2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. non class object can be a plugin too\n#. `#20 <https://github.com/python-lml/lml/issues/20>`_: when a plugin was not\n   installed, it now calls raise_exception method\n\n0.0.9 - 7/1/2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#11 <https://github.com/python-lml/lml/issues/11>`_: more test contents for\n   opensuse package validation\n\n0.0.8 - 4/1/2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#9 <https://github.com/python-lml/lml/issues/9>`_: include tests, docs for\n   opensuse package validation\n\n0.0.7 - 17/11/2018\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#8 <https://github.com/python-lml/lml/issues/8>`_: get_primary_key will fail\n   when a module is loaded later\n#. deprecated old style plugin scanner: scan_plugins\n\n0.0.6 - 07/11/2018\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. revert the version 0.0.5 changes. raise import error and log the exception\n\n0.0.5 - 06/11/2018\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#6 <https://github.com/python-lml/lml/issues/6>`_: catch and ignore\n   modulenotfounderror\n\n0.0.4 - 07.08.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#4 <https://github.com/python-lml/lml/issues/4>`_: to find plugin names with\n   different naming patterns\n\n0.0.3 - 12/06/2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `dict` can be a pluggable type in addition to `function`, `class`\n#. get primary tag of your tag, helping you find out which category of plugins\n   your tag points to\n\n0.0.2 - 23/10/2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `pyexcel#103 <https://github.com/pyexcel/pyexcel/issues/103>`_: include\n   license in tar ball\n\n0.0.1 - 30/05/2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. first release\n\n\n\n",
  "docs_url": null,
  "keywords": "python",
  "license": "new bsd",
  "name": "lml",
  "package_url": "https://pypi.org/project/lml/",
  "project_url": "https://pypi.org/project/lml/",
  "project_urls": {
    "Download": "https://github.com/python-lml/lml/archive/0.1.0.tar.gz",
    "Homepage": "https://github.com/python-lml/lml"
  },
  "release_url": "https://pypi.org/project/lml/0.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "load me later. a lazy plugin management system.",
  "version": "0.1.0",
  "releases": [],
  "developers": [
    "wangc_2011@hotmail.com"
  ],
  "kwds": "lml pluginmanager get_a_plugin lazy modulenotfounderror",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_lml",
  "homepage": "https://github.com/python-lml/lml",
  "release_count": 10,
  "dependency_ids": []
}
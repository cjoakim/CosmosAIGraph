{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": ".. image:: https://img.shields.io/badge/chat-join%20now-blue.svg\n   :target: https://gitter.im/python-trio/general\n   :alt: join chatroom\n\n.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg\n   :target: https://async-generator.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. image:: https://travis-ci.org/python-trio/async_generator.svg?branch=master\n   :target: https://travis-ci.org/python-trio/async_generator\n   :alt: automated test status\n\n.. image:: https://ci.appveyor.com/api/projects/status/af4eyed8o8tc3t0r/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/python-trio/trio/history\n   :alt: automated test status (windows)\n\n.. image:: https://codecov.io/gh/python-trio/async_generator/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-trio/async_generator\n   :alt: test coverage\n\nthe async_generator library\n===========================\n\npython 3.6 added `async generators\n<https://www.python.org/dev/peps/pep-0525/>`__. (what's an async\ngenerator? `check out my 5-minute lightning talk demo from pycon 2016\n<https://youtu.be/pulzit8kylk?t=24m30s>`__.) python 3.7 adds some more\ntools to make them usable, like ``contextlib.asynccontextmanager``.\n\nthis library gives you all that back to python 3.5.\n\nfor example, this code only works in python 3.6+:\n\n.. code-block:: python3\n\n   async def load_json_lines(stream_reader):\n       async for line in stream_reader:\n           yield json.loads(line)\n\nbut this code does the same thing, and works on python 3.5+:\n\n.. code-block:: python3\n\n   from async_generator import async_generator, yield_\n\n   @async_generator\n   async def load_json_lines(stream_reader):\n       async for line in stream_reader:\n           await yield_(json.loads(line))\n\nor in python 3.7, you can write:\n\n.. code-block:: python3\n\n   from contextlib import asynccontextmanager\n\n   @asynccontextmanager\n   async def background_server():\n       async with trio.open_nursery() as nursery:\n           value = await nursery.start(my_server)\n           try:\n               yield value\n           finally:\n               # kill the server when the scope exits\n               nursery.cancel_scope.cancel()\n\nthis is the same, but back to 3.5:\n\n.. code-block:: python3\n\n   from async_generator import async_generator, yield_, asynccontextmanager\n\n   @asynccontextmanager\n   @async_generator\n   async def background_server():\n       async with trio.open_nursery() as nursery:\n           value = await nursery.start(my_server)\n           try:\n               await yield_(value)\n           finally:\n               # kill the server when the scope exits\n               nursery.cancel_scope.cancel()\n\n(and if you're on 3.6, you can use ``@asynccontextmanager`` with\nnative generators.)\n\n\nlet's do this\n=============\n\n* install: ``python3 -m pip install -u async_generator`` (or on windows,\n  maybe ``py -3 -m pip install -u async_generator``\n\n* manual: https://async-generator.readthedocs.io/\n\n* bug tracker and source code: https://github.com/python-trio/async_generator\n\n* real-time chat: https://gitter.im/python-trio/general\n\n* license: mit or apache 2, your choice\n\n* contributor guide: https://trio.readthedocs.io/en/latest/contributing.html\n\n* code of conduct: contributors are requested to follow our `code of\n  conduct\n  <https://trio.readthedocs.io/en/latest/code-of-conduct.html>`__ in\n  all project spaces.\n\n\nhow come some of those links talk about \"trio\"?\n===============================================\n\n`trio <https://trio.readthedocs.io>`__ is a new async concurrency\nlibrary for python that's obsessed with usability and correctness \u2013 we\nwant to make it *easy* to get things *right*. the ``async_generator``\nlibrary is maintained by the trio project as part of that mission, and\nbecause trio uses ``async_generator`` internally.\n\nyou can use ``async_generator`` with any async library. it works great\nwith ``asyncio``, or twisted, or whatever you like. (but we think trio\nis pretty sweet.)\n\n\n",
  "docs_url": null,
  "keywords": "async",
  "license": "mit -or- apache license 2.0",
  "name": "async_generator",
  "package_url": "https://pypi.org/project/async_generator/",
  "project_url": "https://pypi.org/project/async_generator/",
  "project_urls": {
    "Homepage": "https://github.com/python-trio/async_generator"
  },
  "release_url": "https://pypi.org/project/async_generator/1.10/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "async generators and context managers for python 3.5+",
  "version": "1.10",
  "releases": [],
  "developers": [
    "nathaniel_j",
    "njs@pobox.com"
  ],
  "kwds": "async_generator python3 async await pycon",
  "license_kwds": "mit -or- apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_async_generator",
  "homepage": "https://github.com/python-trio/async_generator",
  "release_count": 12,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: graphics",
    "topic :: multimedia :: graphics :: graphics conversion"
  ],
  "description": "# [willow image library](https://pypi.org/project/willow/)\n\n[![pypi](https://img.shields.io/pypi/v/willow.svg)](https://pypi.org/project/willow/)\n[![pypi downloads](https://img.shields.io/pypi/dm/willow.svg)](https://pypi.org/project/willow/)\n[![build status](https://github.com/torchbox/willow/workflows/ci/badge.svg)](https://github.com/wagtail/willow/actions)\n\na wrapper that combines the functionality of multiple python image libraries into one api.\n\n[documentation](https://willow.readthedocs.io/en/latest/index.html)\n\n## overview\n\nwillow is a simple image library that combines the apis of [pillow](https://pillow.readthedocs.io/), [wand](https://docs.wand-py.org) and [opencv](https://opencv.org/). \nit converts the image between the libraries when necessary.\n\nwillow currently has basic resize and crop operations, face and feature detection and animated gif support. \nnew operations and library integrations can also be [easily implemented](https://willow.readthedocs.org/en/latest/guide/extend.html).\n\nthe library is written in pure python and supports versions 3.8 3.9, 3.10, 3.11 and 3.12.\n\n## examples\n\n### resizing an image\n\n```python\nfrom willow.image import image\n\nf = open('test.png', 'rb')\nimg = image.open(f)\n\n# resize the image to 100x100 pixels\nimg = img.resize((100, 100))\n\n# save it\nwith open('test_thumbnail.png', 'wb') as out:\n   img.save_as_png(out)\n```\n\nthis will open the image file with pillow or wand (if pillow is unavailable).\n\nit will then resize it to 100x100 pixels and save it back out as a png file.\n\n\n### detecting faces\n\n```python\nfrom willow.image import image\n\nf = open('photo.png', 'rb')\nimg = image.open(f)\n\n# find faces\nfaces = img.detect_faces()\n```\n\nlike above, the image file will be loaded with either pillow or wand.\n\nas neither pillow nor wand support detecting faces, willow would automatically convert the image to opencv and use that to perform the detection.\n\n## available operations\n\n[documentation](https://willow.readthedocs.org/en/latest/reference.html#builtin-operations)\n\n| operation                               | pillow | wand | opencv |\n|-----------------------------------------|--------|------|--------|\n| `get_size()`                            | \u2713      | \u2713    | \u2713      |\n| `get_frame_count()`                     | \u2713**    | \u2713    | \u2713**    |\n| `resize(size)`                          | \u2713      | \u2713    |        |\n| `crop(rect)`                            | \u2713      | \u2713    |        |\n| `rotate(angle)`                         | \u2713      | \u2713    |        |\n| `set_background_color_rgb(color)`       | \u2713      | \u2713    |        |\n| `auto_orient()`                         | \u2713      | \u2713    |        |\n| `save_as_jpeg(file, quality)`           | \u2713      | \u2713    |        |\n| `save_as_png(file)`                     | \u2713      | \u2713    |        |\n| `save_as_gif(file)`                     | \u2713      | \u2713    |        |\n| `save_as_webp(file, quality)`           | \u2713      | \u2713    |        |\n| `save_as_heif(file, quality, lossless)` | \u2713\u207a     |      |        |\n| `save_as_avif(file, quality, lossless)` | \u2713\u207a     | \u2713\u207a   |        |\n| `has_alpha()`                           | \u2713      | \u2713    | \u2713*     |\n| `has_animation()`                       | \u2713*     | \u2713    | \u2713*     |\n| `get_pillow_image()`                    | \u2713      |      |        |\n| `get_wand_image()`                      |        | \u2713    |        |\n| `detect_features()`                     |        |      | \u2713      |\n| `detect_faces(cascade_filename)`        |        |      | \u2713      |\n\n\\* always returns `false`\n\n\\** always returns `1`\n\n\u207a requires the [pillow-heif](https://pypi.org/project/pillow-heif/) library\n",
  "docs_url": null,
  "keywords": "imaging",
  "license": "",
  "name": "willow",
  "package_url": "https://pypi.org/project/Willow/",
  "project_url": "https://pypi.org/project/Willow/",
  "project_urls": {
    "Changelog": "https://github.com/wagtail/Willow/blob/main/CHANGELOG.txt",
    "Source": "https://github.com/wagtail/Willow"
  },
  "release_url": "https://pypi.org/project/Willow/1.7.0/",
  "requires_dist": [
    "filetype>=1.0.10,!=1.1.0",
    "defusedxml>=0.7,<1.0",
    "Sphinx>=7.0 ; extra == \"docs\"",
    "sphinx-wagtail-theme>=6.1.1,<7.0 ; extra == \"docs\"",
    "sphinxcontrib-spelling>=8.0,<9.0 ; extra == \"docs\"",
    "sphinx_copybutton>=0.5 ; extra == \"docs\"",
    "pillow-heif>=0.10.0,<1.0.0 ; extra == \"heif\" and ( python_version < '3.12')",
    "pillow-heif>=0.13.0,<1.0.0 ; extra == \"heif\" and ( python_version >= '3.12')",
    "Pillow>=9.1.0,<11.0.0 ; extra == \"pillow\"",
    "willow[pillow,wand,heif] ; extra == \"testing\"",
    "coverage[toml]>=7.2.7,<8.0 ; extra == \"testing\"",
    "pre-commit>=3.4.0 ; extra == \"testing\"",
    "Wand>=0.6,<1.0 ; extra == \"wand\""
  ],
  "requires_python": ">=3.8",
  "summary": "a python image library that sits on top of pillow, wand and opencv",
  "version": "1.7.0",
  "releases": [],
  "developers": [
    "hello@wagtail.org",
    "karl@kaed.uk"
  ],
  "kwds": "get_pillow_image get_wand_image library libraries willow",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_willow",
  "homepage": "",
  "release_count": 29,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_defusedxml",
    "pypi_filetype",
    "pypi_pillow",
    "pypi_pillow_heif",
    "pypi_pre_commit",
    "pypi_sphinx",
    "pypi_sphinx_wagtail_theme",
    "pypi_sphinx_copybutton",
    "pypi_sphinxcontrib_spelling",
    "pypi_wand",
    "pypi_willow"
  ]
}
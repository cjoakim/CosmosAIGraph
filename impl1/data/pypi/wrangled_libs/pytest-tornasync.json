{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: testing"
  ],
  "description": "================\npytest-tornasync\n================\n\n.. image:: https://travis-ci.org/eukaryote/pytest-tornasync.svg?branch=master\n    :target: https://travis-ci.org/eukaryote/pytest-tornasync\n\na simple pytest plugin that provides some helpful fixtures for testing\ntornado (version 5.0 or newer)  apps and easy handling of plain\n(undecoratored) native coroutine tests (python 3.5+).\n\nwhy another tornado pytest plugin when the excellent ``pytest-tornado`` already\nexists? the main reason is that i didn't want to have to decorate every test\ncoroutine with ``@pytest.mark.gen_test``. this plugin doesn't have anything\nlike ``gen_test``. defining a test with ``async def`` and a name that\nbegins with ``test_`` is all that is required.\n\n\ninstallation\n------------\n\ninstall using pip, which must be run with python 3.5+:\n\n.. code-block:: sh\n\n    pip install pytest-tornasync\n\n\nusage\n-----\n\ndefine an ``app`` fixture:\n\n.. code-block:: python\n\n    import pytest\n\n\n    @pytest.fixture\n    def app():\n        import yourapp\n        return yourapp.make_app()  # a tornado.web.application\n\n\ncreate tests as native coroutines using python 3.5+ ``async def``:\n\n.. code-block:: python\n\n    async def test_app(http_server_client):\n        resp = await http_server_client.fetch('/')\n        assert resp.code == 200\n        # ...\n\n\nfixtures\n--------\n\nwhen the plugin is installed, then ``pytest --fixtures`` will show\nthe fixtures that are available:\n\nhttp_server_port\n    port used by `http_server`.\nhttp_server\n    start a tornado http server that listens on all available interfaces.\n\n    you must create an `app` fixture, which returns\n    the `tornado.web.application` to be tested.\n\n    raises:\n    fixturelookuperror: tornado application fixture not found\nhttp_server_client\n    create an asynchronous http client that can fetch from `http_server`.\nhttp_client\n    create an asynchronous http client that can fetch from anywhere.\nio_loop\n    create a new `tornado.ioloop.ioloop` for each test case.\n\n\n\nexamples\n--------\n\n.. code-block:: python\n\n    import time\n\n    import tornado.web\n    import tornado.gen\n\n    import pytest\n\n\n    class mainhandler(tornado.web.requesthandler):\n        def get(self):\n            self.write(\"hello, world!\")\n\n\n    @pytest.fixture\n    def app():\n        return tornado.web.application([(r\"/\", mainhandler)])\n\n\n    async def test_http_server_client(http_server_client):\n        # http_server_client fetches from the `app` fixture and takes path\n        resp = await http_server_client.fetch('/')\n        assert resp.code == 200\n        assert resp.body == b\"hello, world!\"\n\n\n    async def test_http_client(http_client):\n        # http_client fetches from anywhere and takes full url\n        resp = await http_client.fetch('http://httpbin.org/status/204')\n        assert resp.code == 204\n\n\n    async def example_coroutine(period):\n        await tornado.gen.sleep(period)\n\n\n    async def test_example():\n        # no fixtures needed\n        period = 1.0\n        start = time.time()\n        await example_coroutine(period)\n        elapsed = time.time() - start\n        assert elapsed >= period\n\n\nchanges\n=======\n\n0.6.0 (2018-11-19)\n------------------\n\n - minor updates to avoid a pytest warning under pytest 4\n - repo switch to using a 'src' dir\n\n\n0.5.0 (2018-05-28)\n------------------\n\n - updated to work with tornado 5, which is now the minimum required version\n - require pytest >= 3.0\n - the `io_loop` fixture always refers to a `tornado.ioloop.ioloop instance` now\n - the `io_loop_asyncio` and `io_loop_tornado` fixtures have been removed, since\n   now that tornado 5 always uses asyncio under python 3, there would be no\n   difference between the two fixtures, so `io_loop` is all that is needed\n - tox tests now test more versions of tornado (5.0.* and latest 5.*),\n   pytest (3.0.* and latest 3.*), and python (3.5, 3.6, 3.7, and pypy3).\n\n\n",
  "docs_url": null,
  "keywords": "testing py.test tornado",
  "license": "http://www.opensource.org/licenses/mit-license.php",
  "name": "pytest-tornasync",
  "package_url": "https://pypi.org/project/pytest-tornasync/",
  "project_url": "https://pypi.org/project/pytest-tornasync/",
  "project_urls": {
    "Homepage": "https://github.com/eukaryote/pytest-tornasync"
  },
  "release_url": "https://pypi.org/project/pytest-tornasync/0.6.0.post2/",
  "requires_dist": [
    "pytest (>=3.0)",
    "tornado (>=5.0)"
  ],
  "requires_python": "",
  "summary": "py.test plugin for testing python 3.5+ tornado code",
  "version": "0.6.0.post2",
  "releases": [],
  "developers": [
    "calvin_smith",
    "sapientdust+pytest-tornasync@gmail.com"
  ],
  "kwds": "pytest gen_test io_loop_tornado test_example tornado",
  "license_kwds": "http://www.opensource.org/licenses/mit-license.php",
  "libtype": "pypi",
  "id": "pypi_pytest_tornasync",
  "homepage": "https://github.com/eukaryote/pytest-tornasync",
  "release_count": 7,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_tornado"
  ]
}
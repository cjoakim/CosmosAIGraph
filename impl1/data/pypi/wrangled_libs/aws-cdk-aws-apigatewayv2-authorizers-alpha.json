{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 2",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# aws apigatewayv2 authorizers\n\n<!--begin stability banner-->---\n\n\n![deprecated](https://img.shields.io/badge/deprecated-critical.svg?style=for-the-badge)\n\n> this api may emit warnings. backward compatibility is not guaranteed.\n\n---\n<!--end stability banner-->\n\nall constructs moved to aws-cdk-lib/aws-apigatewayv2-authorizers.\n\n## table of contents\n\n* [introduction](#introduction)\n* [http apis](#http-apis)\n\n  * [default authorization](#default-authorization)\n  * [route authorization](#route-authorization)\n  * [jwt authorizers](#jwt-authorizers)\n\n    * [user pool authorizer](#user-pool-authorizer)\n  * [lambda authorizers](#lambda-authorizers)\n  * [iam authorizers](#iam-authorizers)\n* [websocket apis](#websocket-apis)\n\n  * [lambda authorizer](#lambda-authorizer)\n  * [iam authorizers](#iam-authorizer)\n\n## introduction\n\napi gateway supports multiple mechanisms for controlling and managing access to your http api. they are mainly\nclassified into lambda authorizers, jwt authorizers, and standard aws iam roles and policies. more information is\navailable at [controlling and managing access to an http\napi](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html).\n\n## http apis\n\naccess control for http apis is managed by restricting which routes can be invoked via.\n\nauthorizers and scopes can either be applied to the api, or specifically for each route.\n\n### default authorization\n\nwhen using default authorization, all routes of the api will inherit the configuration.\n\nin the example below, all routes will require the `manage:books` scope present in order to invoke the integration.\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httpjwtauthorizer\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = httpjwtauthorizer(\"defaultauthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.httpapi(self, \"httpapi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"manage:books\"]\n)\n```\n\n### route authorization\n\nauthorization can also be configured for each route. when a route authorization is configured, it takes precedence over default authorization.\n\nthe example below showcases default authorization, along with route authorization. it also shows how to remove authorization entirely for a route.\n\n* `get /books` and `get /books/{id}` use the default authorizer settings on the api\n* `post /books` will require the `['write:books']` scope\n* `post /login` removes the default authorizer (unauthenticated route)\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httpjwtauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import httpurlintegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = httpjwtauthorizer(\"defaultauthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.httpapi(self, \"httpapi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"read:books\"]\n)\n\napi.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books\",\n    methods=[apigwv2.httpmethod.get]\n)\n\napi.add_routes(\n    integration=httpurlintegration(\"booksidintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books/{id}\",\n    methods=[apigwv2.httpmethod.get]\n)\n\napi.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books\",\n    methods=[apigwv2.httpmethod.post],\n    authorization_scopes=[\"write:books\"]\n)\n\napi.add_routes(\n    integration=httpurlintegration(\"loginintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/login\",\n    methods=[apigwv2.httpmethod.post],\n    authorizer=apigwv2.httpnoneauthorizer()\n)\n```\n\n### jwt authorizers\n\njwt authorizers allow the use of json web tokens (jwts) as part of [openid connect](https://openid.net/specs/openid-connect-core-1_0.html) and [oauth 2.0](https://oauth.net/2/) frameworks to allow and restrict clients from accessing http apis.\n\nwhen configured, api gateway validates the jwt submitted by the client, and allows or denies access based on its content.\n\nthe location of the token is defined by the `identitysource` which defaults to the http `authorization` header. however it also\n[supports a number of other options](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.identity-sources).\nit then decodes the jwt and validates the signature and claims, against the options defined in the authorizer and route (scopes).\nfor more information check the [jwt authorizer documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-jwt-authorizer.html).\n\nclients that fail authorization are presented with either 2 responses:\n\n* `401 - unauthorized` - when the jwt validation fails\n* `403 - forbidden` - when the jwt validation is successful but the required scopes are not met\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httpjwtauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import httpurlintegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = httpjwtauthorizer(\"booksauthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.httpapi(self, \"httpapi\")\n\napi.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books\",\n    authorizer=authorizer\n)\n```\n\n#### user pool authorizer\n\nuser pool authorizer is a type of jwt authorizer that uses a cognito user pool and app client to control who can access your api. after a successful authorization from the app client, the generated access token will be used as the jwt.\n\nclients accessing an api that uses a user pool authorizer must first sign in to a user pool and obtain an identity or access token.\nthey must then use this token in the specified `identitysource` for the api call. more information is available at [using amazon cognito user\npools as authorizer](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html).\n\n```python\nimport aws_cdk.aws_cognito as cognito\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httpuserpoolauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import httpurlintegration\n\n\nuser_pool = cognito.userpool(self, \"userpool\")\n\nauthorizer = httpuserpoolauthorizer(\"booksauthorizer\", user_pool)\n\napi = apigwv2.httpapi(self, \"httpapi\")\n\napi.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books\",\n    authorizer=authorizer\n)\n```\n\n### lambda authorizers\n\nlambda authorizers use a lambda function to control access to your http api. when a client calls your api, api gateway invokes your lambda function and uses the response to determine whether the client can access your api.\n\nlambda authorizers depending on their response, fall into either two types - simple or iam. you can learn about differences [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.payload-format-response).\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httplambdaauthorizer, httplambdaresponsetype\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import httpurlintegration\n\n# this function handles your auth logic\n# auth_handler: lambda.function\n\n\nauthorizer = httplambdaauthorizer(\"booksauthorizer\", auth_handler,\n    response_types=[httplambdaresponsetype.simple]\n)\n\napi = apigwv2.httpapi(self, \"httpapi\")\n\napi.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books\",\n    authorizer=authorizer\n)\n```\n\n### iam authorizers\n\napi gateway supports iam via the included `httpiamauthorizer` and grant syntax:\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import httpiamauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import httpurlintegration\n\n# principal: iam.anyprincipal\n\n\nauthorizer = httpiamauthorizer()\n\nhttp_api = apigwv2.httpapi(self, \"httpapi\",\n    default_authorizer=authorizer\n)\n\nroutes = http_api.add_routes(\n    integration=httpurlintegration(\"booksintegration\", \"https://get-books-proxy.example.com\"),\n    path=\"/books/{book}\"\n)\n\nroutes[0].grant_invoke(principal)\n```\n\n## websocket apis\n\nyou can set an authorizer to your websocket api's `$connect` route to control access to your api.\n\n### lambda authorizer\n\nlambda authorizers use a lambda function to control access to your websocket api. when a client connects to your api, api gateway invokes your lambda function and uses the response to determine whether the client can access your api.\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import websocketlambdaauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import websocketlambdaintegration\n\n# this function handles your auth logic\n# auth_handler: lambda.function\n\n# this function handles your websocket requests\n# handler: lambda.function\n\n\nauthorizer = websocketlambdaauthorizer(\"authorizer\", auth_handler)\n\nintegration = websocketlambdaintegration(\"integration\", handler)\n\napigwv2.websocketapi(self, \"websocketapi\",\n    connect_route_options=apigwv2.websocketrouteoptions(\n        integration=integration,\n        authorizer=authorizer\n    )\n)\n```\n\n### iam authorizer\n\niam authorizers can be used to allow identity-based access to your websocket api.\n\n```python\nfrom aws_cdk.aws_apigatewayv2_authorizers_alpha import websocketiamauthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations_alpha import websocketlambdaintegration\n\n# this function handles your connect route\n# connect_handler: lambda.function\n\n\nweb_socket_api = apigwv2.websocketapi(self, \"websocketapi\")\n\nweb_socket_api.add_route(\"$connect\",\n    integration=websocketlambdaintegration(\"integration\", connect_handler),\n    authorizer=websocketiamauthorizer()\n)\n\n# create an iam user (identity)\nuser = iam.user(self, \"user\")\n\nweb_socket_arn = stack.of(self).format_arn(\n    service=\"execute-api\",\n    resource=web_socket_api.api_id\n)\n\n# grant access to the iam user\nuser.attach_inline_policy(iam.policy(self, \"allowinvoke\",\n    statements=[\n        iam.policystatement(\n            actions=[\"execute-api:invoke\"],\n            effect=iam.effect.allow,\n            resources=[web_socket_arn]\n        )\n    ]\n))\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-apigatewayv2-authorizers-alpha",
  "package_url": "https://pypi.org/project/aws-cdk.aws-apigatewayv2-authorizers-alpha/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-apigatewayv2-authorizers-alpha/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-apigatewayv2-authorizers-alpha/2.114.1a0/",
  "requires_dist": [
    "aws-cdk-lib <3.0.0,>=2.114.1",
    "aws-cdk.aws-apigatewayv2-alpha ==2.114.1.a0",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.92.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "this module is deprecated. all constructs are now available under aws-cdk-lib/aws-apigatewayv2-authorizers",
  "version": "2.114.1a0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_apigatewayv2_authorizers_alpha aws_apigatewayv2_integrations_alpha httpjwtauthorizer apigatewayv2 aws_cdk",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_apigatewayv2_authorizers_alpha",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 169,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_aws_cdk.aws_apigatewayv2_alpha",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
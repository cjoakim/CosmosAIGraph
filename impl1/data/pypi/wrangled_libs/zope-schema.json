{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: zope :: 3",
    "intended audience :: developers",
    "license :: osi approved :: zope public license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "=============\n zope.schema\n=============\n\n.. image:: https://img.shields.io/pypi/v/zope.schema.svg\n   :target: https://pypi.org/project/zope.schema/\n   :alt: latest version\n\n.. image:: https://img.shields.io/pypi/pyversions/zope.schema.svg\n   :target: https://pypi.org/project/zope.schema/\n   :alt: supported python versions\n\n.. image:: https://github.com/zopefoundation/zope.schema/workflows/tests/badge.svg\n   :target: https://github.com/zopefoundation/zope.schema/actions?query=workflow%3atests\n   :alt: tests status\n\n.. image:: https://readthedocs.org/projects/zopeschema/badge/?version=latest\n   :target: https://zopeschema.readthedocs.org/en/latest/\n   :alt: documentation status\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/zope.schema/badge.svg\n   :target: https://coveralls.io/github/zopefoundation/zope.schema\n   :alt: code coverage\n\nschemas extend the notion of interfaces to detailed descriptions of\nattributes (but not methods).  every schema is an interface and\nspecifies the public fields of an object.  a *field* roughly\ncorresponds to an attribute of a python object.  but a field provides\nspace for at least a title and a description.  it can also constrain\nits value and provide a validation method.  besides you can optionally\nspecify characteristics such as its value being read-only or not\nrequired.\n\nsee https://zopeschema.readthedocs.io/ for more information.\n\n\n=========\n changes\n=========\n\n7.0.1 (2023-01-02)\n==================\n\n- fix fallback when ``zope.i18nmessageid`` is not installed (regression\n  introduced in 7.0.0).\n\n\n7.0.0 (2023-01-01)\n==================\n\n- add support for python 3.11.\n\n- drop support for python 2.7, 3.5, 3.6.\n\n- drop ``zope.schema._compat`` module.\n\n- fix test deprecation warning on python 3.11.\n  (`#112 <https://github.com/zopefoundation/zope.schema/issues/112>`_)\n\n6.2.1 (2022-09-14)\n==================\n\n- fix outsized integer test values that break tests on newer python versions.\n  (`#115 <https://github.com/zopefoundation/zope.schema/issues/115>`_)\n\n\n6.2.0 (2021-10-18)\n==================\n\n- add support for python 3.10.\n\n\n6.1.1 (2021-10-13)\n==================\n\n- fix incompatibility introduced in 6.1.0:\n  the `bool` field constructor implicitly set required to false if not given.\n  while this is the desired behavior in most common cases,\n  it broke special cases.\n  see `issue 104 <https://github.com/zopefoundation/zope.schema/issues/104>`_\n  (scroll down, it is around the *reopen*).\n\n\n6.1.0 (2021-02-09)\n==================\n\n- fix ``ifield.required`` to not be required by default.\n  see `issue 104 <https://github.com/zopefoundation/zope.schema/issues/104>`_.\n\n6.0.1 (2021-01-25)\n==================\n\n- bring branch coverage to 100%.\n\n- add support for python 3.9.\n\n- fix fieldupdateevent implementation by having an ``object`` attribute as the\n  ``ifieldupdatedevent`` interfaces claims there should be.\n\n6.0.0 (2020-03-21)\n==================\n\n- require zope.interface 5.0.\n\n- ensure the resolution orders of all fields are consistent and make\n  sense. in particular, ``bool`` fields now correctly implement\n  ``ibool`` before ``ifromunicode``. see `issue 80\n  <https://github.com/zopefoundation/zope.schema/issues/80>`_.\n\n- add support for python 3.8.\n\n- drop support for python 3.4.\n\n5.0.1 (2020-03-06)\n==================\n\n- fix: add ``text.unicode_normalization = 'nfc'`` as default, because some are\n  persisting schema fields. setting that attribute only in ``__init__``\n  breaks loading old objects.\n\n\n5.0 (2020-03-06)\n================\n\n- set ``idecimal`` attributes ``min``, ``max`` and ``default`` as ``decimal``\n  type instead of ``number``.\n  see `issue 88 <https://github.com/zopefoundation/zope.schema/issues/88>`_.\n\n- enable unicode normalization for ``text`` fields.\n  the default is nfc normalization. valid forms are 'nfc', 'nfkc', 'nfd', and\n  'nfkd'. to disable normalization, set ``unicode_normalization`` to ``false``\n  or ``none`` when calling ``__init__`` of the ``text`` field.\n  see `issue 86 <https://github.com/zopefoundation/zope.schema/issues/86>`_.\n\n\n4.9.3 (2018-10-12)\n==================\n\n- fix a rest error in getdoc() results when having \"subfields\"\n  with titles.\n\n\n4.9.2 (2018-10-11)\n==================\n\n- make sure that the title for ``iobject.validate_invariants`` is a unicode\n  string.\n\n\n4.9.1 (2018-10-05)\n==================\n\n- fix ``simpleterm`` token for non-ascii bytes values.\n\n\n4.9.0 (2018-09-24)\n==================\n\n- make ``nativestring`` and ``nativestringline`` distinct types that\n  implement the newly-distinct interfaces ``inativestring`` and\n  ``inativestringline``. previously these were just aliases for either\n  ``text`` (on python 3) or ``bytes`` (on python 2).\n\n- fix ``field.getdoc()`` when ``value_type`` or ``key_type`` is\n  present. previously it could produce rest that generated sphinx\n  warnings. see `issue 76 <https://github.com/zopefoundation/zope.schema/issues/76>`_.\n\n- make ``dottedname`` accept leading underscores for each segment.\n\n- add ``pythonidentifier``, which accepts one segment of a dotted\n  name, e.g., a python variable or class.\n\n4.8.0 (2018-09-19)\n==================\n\n- add the interface ``ifrombytes``, which is implemented by the\n  numeric and bytes fields, as well as ``uri``, ``dottedname``, and\n  ``id``.\n\n- fix passing ``none`` as the description to a field constructor. see\n  `issue 69 <https://github.com/zopefoundation/zope.schema/issues/69>`_.\n\n4.7.0 (2018-09-11)\n==================\n\n- make ``wrongtype`` have an ``expected_type`` field.\n\n- add ``notaninterface``, an exception derived from ``wrongtype`` and\n  ``schemanotprovided`` and raised by the constructor of ``object``\n  and when validation fails for ``interfacefield``.\n\n- give ``schemanotprovided`` a ``schema`` field.\n\n- give ``wrongcontainedtype`` an ``errors`` list.\n\n- give ``tooshort``, ``toolong``, ``toobig`` and ``toosmall`` a\n  ``bound`` field and the common superclasses ``lenoutofbounds``,\n  ``orderableoutofbounds``, respectively, both of which inherit from\n  ``outofbounds``.\n\n4.6.2 (2018-09-10)\n==================\n\n- fix checking a field's constraint to set the ``field`` and ``value``\n  properties if the constraint raises a ``validationerror``. see\n  `issue 66\n  <https://github.com/zopefoundation/zope.schema/issues/66>`_.\n\n\n4.6.1 (2018-09-10)\n==================\n\n- fix the ``field`` constructor to again allow ``messageid`` values\n  for the ``description``. this was a regression introduced with the\n  fix for `issue 60\n  <https://github.com/zopefoundation/zope.schema/issues/60>`_. see\n  `issue 63\n  <https://github.com/zopefoundation/zope.schema/issues/63>`_.\n\n\n4.6.0 (2018-09-07)\n==================\n\n- add support for python 3.7.\n\n- ``object`` instances call their schema's ``validateinvariants``\n  method by default to collect errors from functions decorated with\n  ``@invariant`` when validating. this can be disabled by passing\n  ``validate_invariants=false`` to the ``object`` constructor. see\n  `issue 10 <https://github.com/zopefoundation/zope.schema/issues/10>`_.\n\n- ``validationerror`` can be sorted on python 3.\n\n- ``dottedname`` and ``id`` consistently handle non-ascii unicode\n  values on python 2 and 3 by raising ``invaliddottedname`` and\n  ``invalidid`` in ``fromunicode`` respectively. previously, a\n  ``unicodeencodeerror`` would be raised on python 2 while python 3\n  would raise the descriptive exception.\n\n- ``field`` instances are hashable on python 3, and use a defined\n  hashing algorithm that matches what equality does on all versions of\n  python. previously, on python 2, fields were hashed based on their\n  identity. this violated the rule that equal objects should have\n  equal hashes, and now they do. since having equal hashes does not\n  imply that the objects are equal, this is not expected to be a\n  compatibility problem. see `issue 36\n  <https://github.com/zopefoundation/zope.schema/issues/36>`_.\n\n- ``field`` instances are only equal when their ``.interface`` is\n  equal. in practice, this means that two otherwise identical fields\n  of separate schemas are not equal, do not hash the same, and can\n  both be members of the same ``dict`` or ``set``. prior to this\n  release, when hashing was identity based but only worked on python\n  2, that was the typical behaviour. (field objects that are *not*\n  members of a schema continue to compare and hash equal if they have\n  the same attributes and interfaces.) see `issue 40\n  <https://github.com/zopefoundation/zope.schema/issues/40>`_.\n\n- orderable fields, including ``int``, ``float``, ``decimal``,\n  ``timedelta``, ``date`` and ``time``, can now have a\n  ``missing_value`` without needing to specify concrete ``min`` and\n  ``max`` values (they must still specify a ``default`` value). see\n  `issue 9 <https://github.com/zopefoundation/zope.schema/issues/9>`_.\n\n- ``choice``, ``simplevocabulary`` and  ``simpleterm`` all gracefully\n  handle using unicode token values with non-ascii characters by encoding\n  them with the ``backslashreplace`` error handler. see `issue 15\n  <https://github.com/zopefoundation/zope.schema/issues/15>`_ and `pr\n  6 <https://github.com/zopefoundation/zope.schema/pull/6>`_.\n\n- all instances of ``validationerror`` have a ``field`` and ``value``\n  attribute that is set to the field that raised the exception and the\n  value that failed validation.\n\n- ``float``, ``int`` and ``decimal`` fields raise ``validationerror``\n  subclasses for literals that cannot be parsed. these subclasses also\n  subclass ``valueerror`` for backwards compatibility.\n\n- add a new exception ``schemanotcorrectlyimplemented``, a subclass of\n  ``wrongcontainedtype`` that is raised by the ``object`` field. it\n  has a dictionary (``schema_errors``) mapping invalid schema\n  attributes to their corresponding exception, and a list\n  (``invariant_errors``) containing the exceptions raised by\n  validating invariants. see `issue 16\n  <https://github.com/zopefoundation/zope.schema/issues/16>`_.\n\n- add new fields ``mapping`` and ``mutablemapping``, corresponding to\n  the collections abcs of the same name; ``dict`` now extends and\n  specializes ``mutablemapping`` to only accept instances of ``dict``.\n\n- add new fields ``sequence`` and ``mutablesequence``, corresponding\n  to the collections abcs of the same name; ``tuple`` now extends\n  ``sequence`` and ``list`` now extends ``mutablesequence``.\n\n- add new field ``collection``, implementing ``icollection``. this is\n  the base class of ``sequence``. previously this was known as\n  ``abstractcollection`` and was not public. it can be subclassed to\n  add ``value_type``, ``_type`` and ``unique`` attributes at the class\n  level, enabling a simpler constructor call. see `issue 23\n  <https://github.com/zopefoundation/zope.schema/issues/23>`_.\n\n- make ``object`` respect a ``schema`` attribute defined by a\n  subclass, enabling a simpler constructor call. see `issue 23\n  <https://github.com/zopefoundation/zope.schema/issues/23>`_.\n\n- add fields and interfaces representing python's numeric tower. in\n  descending order of generality these are ``number``, ``complex``,\n  ``real``, ``rational`` and ``integral``. the ``int`` class extends\n  ``integral``, the ``float`` class extends ``real``, and the\n  ``decimal`` class extends ``number``. see `issue 49\n  <https://github.com/zopefoundation/zope.schema/issues/49>`_.\n\n- make ``iterable`` and ``container`` properly implement ``iiterable``\n  and ``icontainer``, respectively.\n\n- make ``simplevocabulary.fromitems`` accept triples to allow\n  specifying the title of terms. see `issue 18\n  <https://github.com/zopefoundation/zope.schema/issues/18>`_.\n\n- make ``treevocabulary.fromdict`` only create\n  ``ititledtokenizedterms`` when a title is actually provided.\n\n- make ``choice`` fields reliably raise a ``validationerror`` when a\n  named vocabulary cannot be found; for backwards compatibility this\n  is also a ``valueerror``. previously this only worked when the\n  default ``vocabularyregistry`` was in use, not when it was replaced\n  with `zope.vocabularyregistry\n  <https://pypi.org/project/zope.vocabularyregistry/>`_. see `issue 55\n  <https://github.com/zopefoundation/zope.schema/issues/55>`_.\n\n- make ``simplevocabulary`` and ``simpleterm`` have value-based\n  equality and hashing methods.\n\n- all fields of the schema of an ``object`` field are bound to the\n  top-level value being validated before attempting validation of\n  their particular attribute. previously only ``ichoice`` fields were\n  bound. see `issue 17\n  <https://github.com/zopefoundation/zope.schema/issues/17>`_.\n\n- share the internal logic of ``object`` field validation and\n  ``zope.schema.getvalidationerrors``. see `issue 57\n  <https://github.com/zopefoundation/zope.schema/issues/57>`_.\n\n\n- make ``field.getdoc()`` return more information about the properties\n  of the field, such as its required and readonly status. subclasses\n  can add more information using the new method\n  ``field.getextradoclines()``. this is used to generate sphinx\n  documentation when using `repoze.sphinx.autointerface\n  <https://pypi.org/project/repoze.sphinx.autointerface/>`_. see\n  `issue 60\n  <https://github.com/zopefoundation/zope.schema/issues/60>`_.\n\n\n4.5.0 (2017-07-10)\n==================\n\n- drop support for python 2.6, 3.2, and 3.3.\n\n- add support for python 3.5 and 3.6.\n\n- drop support for 'setup.py test'. use zope.testrunner instead.\n\n\n4.4.2 (2014-09-04)\n==================\n\n- fix description of min max field: max value is included, not excluded.\n\n\n4.4.1 (2014-03-19)\n==================\n\n- add support for python 3.4.\n\n\n4.4.0 (2014-01-22)\n==================\n\n- add an event on field properties to notify that a field has been updated.\n  this event enables definition of subscribers based on an event, a context\n  and a field. the event contains also the old value and the new value.\n  (also see package ``zope.schemaevent`` that define a field event handler)\n\n\n4.3.3 (2014-01-06)\n==================\n\n- pep 8 cleanup.\n\n- don't raise requiredmissing if a field's defaultfactory returns the field's\n  missing_value.\n\n- update ``boostrap.py`` to version 2.2.\n\n- add the ability to swallow valueerrors when rendering a simplevocabulary,\n  allowing for cases where vocabulary items may be duplicated (e.g., due to\n  user input).\n\n- include the field name in ``constraintnotsatisfied``.\n\n\n4.3.2 (2013-02-24)\n==================\n\n- fix python 2.6 support. (forgot to run tox with all environments before last\n  release.)\n\n\n4.3.1 (2013-02-24)\n==================\n\n- make sure that we do not fail during bytes decoding of term token when\n  generated from a bytes value by ignoring all errors. (another option would\n  have been to hexlify the value, but that would break way too many tests.)\n\n\n4.3.0 (2013-02-24)\n==================\n\n- fix a bug where bytes values were turned into tokens inproperly in\n  python 3.\n\n- add ``zope.schema.fieldproperty.createfieldproperties()`` function which\n  maps schema fields into ``fieldproperty`` instances.\n\n4.2.2 (2012-11-21)\n==================\n\n- add support for python 3.3.\n\n4.2.1 (2012-11-09)\n==================\n\n- fix the default property of fields that have no defaultfactory attribute.\n\n\n4.2.0 (2012-05-12)\n==================\n\n- automate build of sphinx html docs and running doctest snippets via tox.\n\n- drop explicit support for python 3.1.\n\n- introduce nativestring and nativestringline which are equal to bytes and\n  bytesline on python 2 and text and textline on python 3.\n\n- change iuri from a bytes string to a \"native\" string. this is a backwards\n  incompatibility which only affects python 3.\n\n- bring unit test coverage to 100%.\n\n- move doctests from the package and wired up as normal sphinx documentation.\n\n- add explicit support for pypy.\n\n- add support for continuous integration using ``tox`` and ``jenkins``.\n\n- drop the external ``six`` dependency in favor of a much-trimmed\n  ``zope.schema._compat`` module.\n\n- ensure tests pass when run under ``nose``.\n\n- add ``setup.py dev`` alias (runs ``setup.py develop`` plus installs\n  ``nose`` and ``coverage``).\n\n- add ``setup.py docs`` alias (installs ``sphinx`` and dependencies).\n\n\n4.1.1 (2012-03-23)\n==================\n\n- remove trailing slash in manifest.in, it causes winbot to crash.\n\n\n4.1.0 (2012-03-23)\n==================\n\n- add treevocabulary for nested tree-like vocabularies.\n\n- fix broken object field validation where the schema contains a choice with\n  icountextsourcebinder source. in this case the vocabulary was not iterable\n  because the field was not bound and the source binder didn't return the\n  real vocabulary. added simple test for icontextsourcebinder validation. but a\n  test with an object field with a schema using a choice with\n  icontextsourcebinder is still missing.\n\n4.0.1 (2011-11-14)\n==================\n\n- fix bug in ``fromunicode`` method of ``dottedname`` which would fail\n  validation on being given unicode. introduced in 4.0.0.\n\n4.0.0 (2011-11-09)\n==================\n\n- fix deprecated unittest methods.\n\n- port to python 3. this adds a dependency on six and removes support for\n  python 2.5.\n\n3.8.1 (2011-09-23)\n==================\n\n- fix broken object field validation. previous version was using a volatile\n  property on object field values which ends in a forbiddenattribute error\n  on security proxied objects.\n\n3.8.0 (2011-03-18)\n==================\n\n- implement a ``defaultfactory`` attribute for all fields. it is a callable\n  that can be used to compute default values. the simplest case is::\n\n    date(defaultfactory=datetime.date.today)\n\n  if the factory needs a context to compute a sensible default value, then it\n  must provide ``icontextawaredefaultfactory``, which can be used as follows::\n\n    @provider(icontextawaredefaultfactory)\n    def today(context):\n        return context.today()\n\n    date(defaultfactory=today)\n\n3.7.1 (2010-12-25)\n==================\n\n- rename the validation token, used in the validation of schema with object\n  field to avoid infinite recursion:\n  ``__schema_being_validated`` became ``_v_schema_being_validated``,\n  a volatile attribute, to avoid persistency and therefore,\n  read/write conflicts.\n\n- don't allow \"[\\]^`\" in dottedname.\n  https://bugs.launchpad.net/zope.schema/+bug/191236\n\n3.7.0 (2010-09-12)\n==================\n\n- improve error messages when term tokens or values are duplicates.\n\n- fix the buildout so the tests run.\n\n3.6.4 (2010-06-08)\n==================\n\n- fix validation of schema with object field that specify interface schema.\n\n3.6.3 (2010-04-30)\n==================\n\n- prefer the standard libraries doctest module to the one from zope.testing.\n\n3.6.2 (2010-04-30)\n==================\n\n- avoid maximum recursion when validating object field that points to cycles\n\n- make the dependency on ``zope.i18nmessageid`` optional.\n\n3.6.1 (2010-01-05)\n==================\n\n- allow \"setup.py test\" to run at least a subset of the tests runnable\n  via ``bin/test`` (227 for ``setup.py test`` vs. 258. for\n  ``bin/test``)\n\n- make ``zope.schema._bootstrapfields.validatedproperty`` descriptor\n  work under jython.\n\n- make \"setup.py test\" tests pass on jython.\n\n3.6.0 (2009-12-22)\n==================\n\n- prefer zope.testing.doctest over doctestunit.\n\n- extend validation error to hold the field name.\n\n- add fieldproperty class that uses field.get and field.set methods\n  instead of storing directly on the instance __dict__.\n\n3.5.4 (2009-03-25)\n==================\n\n- don't fail trying to validate default value for choice fields with\n  icontextsourcebinder object given as a source. see\n  https://bugs.launchpad.net/zope3/+bug/340416.\n\n- add an interface for ``dottedname`` field.\n\n- add ``vocabularyname`` attribute to the ``ichoice`` interface, change\n  \"vocabulary\" attribute description to be more sensible, making it\n  ``zope.schema.field`` instead of plain ``zope.interface.attribute``.\n\n- make ibool interface of bool more important than ifromunicode so adapters\n  registered for ibool take precendence over adapters registered for\n  ifromunicode.\n\n\n3.5.3 (2009-03-10)\n==================\n\n- make choice and bool fields implement ifromunicode interface, because\n  they do provide the ``fromunicode`` method.\n\n- change package's mailing list address to zope-dev at zope.org, as\n  zope3-dev at zope.org is now retired.\n\n- fix package's documentation formatting. change package's description.\n\n- add buildout part that builds sphinx-generated documentation.\n\n- remove zpkg-related file.\n\n3.5.2 (2009-02-04)\n==================\n\n- made validation tests compatible with python 2.5 again (hopefully not\n  breaking python 2.4)\n\n- add an __all__ package attribute to expose documentation.\n\n3.5.1 (2009-01-31)\n==================\n\n- stop using the old old set type.\n\n- make tests compatible and silent with python 2.4.\n\n- fix __cmp__ method in validationerror. show some side effects based on the\n  existing __cmp__ implementation. see validation.txt\n\n- make 'repr' of the validationerror and its subclasses more sensible. this\n  may require you to adapt your doctests for the new style, but now it makes\n  much more sense for debugging for developers.\n\n3.5.0a2 (2008-12-11)\n====================\n\n- move zope.testing to \"test\" extras_require, as it is not needed\n  for zope.schema itself.\n\n- change the order of classes in set_types tuple, introduced in\n  previous release to one that was in 3.4 (settype, set), because\n  third-party code could be dependent on that order. the one\n  example is z3c.form's converter.\n\n3.5.0a1 (2008-10-10)\n====================\n\n- add the doctests to the long description.\n\n- remove use of deprecated 'sets' module when running under python 2.6.\n\n- remove spurious doctest failure when running under python 2.6.\n\n- add support to bootstrap on jython.\n\n- add helper methods for schema validation: ``getvalidationerrors``\n  and ``getschemavalidationerrors``.\n\n- zope.schema now works on python2.5\n\n3.4.0 (2007-09-28)\n==================\n\nadd beforeobjectassignedevent that is triggered before the object\nfield sets a value.\n\n3.3.0 (2007-03-15)\n==================\n\ncorresponds to the version of the zope.schema package shipped as part of\nthe zope 3.3.0 release.\n\n3.2.1 (2006-03-26)\n==================\n\ncorresponds to the version of the zope.schema package shipped as part of\nthe zope 3.2.1 release.\n\nfix missing import of 'vocabularyregistryerror'.  see\nhttp://www.zope.org/collectors/zope3-dev/544 .\n\n3.2.0 (2006-01-05)\n==================\n\ncorresponds to the version of the zope.schema package shipped as part of\nthe zope 3.2.0 release.\n\nadd \"iterable\" sources to replace vocabularies, which are now deprecated\nand scheduled for removal in zope 3.3.\n\n3.1.0 (2005-10-03)\n==================\n\ncorresponds to the version of the zope.schema package shipped as part of\nthe zope 3.1.0 release.\n\nallow 'choice' fields to take either a 'vocabulary' or a 'source'\nargument (sources are a simpler implementation).\n\nadd 'timedelta' and 'asciiline' field types.\n\n3.0.0 (2004-11-07)\n==================\n\ncorresponds to the version of the zope.schema package shipped as part of\nthe zope x3.0.0 release.\n",
  "docs_url": null,
  "keywords": "zope3 schema field interface typing",
  "license": "zpl 2.1",
  "name": "zope.schema",
  "package_url": "https://pypi.org/project/zope.schema/",
  "project_url": "https://pypi.org/project/zope.schema/",
  "project_urls": {
    "Homepage": "https://github.com/zopefoundation/zope.schema"
  },
  "release_url": "https://pypi.org/project/zope.schema/7.0.1/",
  "requires_dist": [
    "setuptools",
    "zope.interface (>=5.0.0)",
    "zope.event",
    "Sphinx ; extra == 'docs'",
    "repoze.sphinx.autointerface ; extra == 'docs'",
    "zope.i18nmessageid ; extra == 'test'",
    "zope.testing ; extra == 'test'",
    "zope.testrunner ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "zope.interface extension for defining data schemas",
  "version": "7.0.1",
  "releases": [],
  "developers": [
    "zope-dev@zope.org",
    "zope_foundation_and_contributors"
  ],
  "kwds": "zope3 __schema_being_validated _v_schema_being_validated schemaevent schemanotprovided",
  "license_kwds": "zpl 2.1",
  "libtype": "pypi",
  "id": "pypi_zope.schema",
  "homepage": "https://github.com/zopefoundation/zope.schema",
  "release_count": 51,
  "dependency_ids": [
    "pypi_repoze.sphinx.autointerface",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_zope.event",
    "pypi_zope.i18nmessageid",
    "pypi_zope.interface",
    "pypi_zope.testing",
    "pypi_zope.testrunner"
  ]
}
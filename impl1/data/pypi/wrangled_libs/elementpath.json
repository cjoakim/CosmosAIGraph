{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: text processing :: markup :: xml"
  ],
  "description": "***********\nelementpath\n***********\n\n.. image:: https://img.shields.io/pypi/v/elementpath.svg\n   :target: https://pypi.python.org/pypi/elementpath/\n.. image:: https://img.shields.io/pypi/pyversions/elementpath.svg\n   :target: https://pypi.python.org/pypi/elementpath/\n.. image:: https://img.shields.io/pypi/implementation/elementpath.svg\n   :target: https://pypi.python.org/pypi/elementpath/\n.. image:: https://img.shields.io/badge/license-mit-blue.svg\n   :alt: mit license\n   :target: https://lbesson.mit-license.org/\n.. image:: https://img.shields.io/pypi/dm/elementpath.svg\n   :target: https://pypi.python.org/pypi/elementpath/\n\n.. elementpath-introduction\n\nthe proposal of this package is to provide xpath 1.0, 2.0, 3.0 and 3.1\nselectors for elementtree xml data structures, both for the standard\nelementtree library and for the `lxml.etree <http://lxml.de>`_ library.\n\nfor `lxml.etree <http://lxml.de>`_ this package can be useful for providing\nxpath 2.0/3.0/3.1 selectors, because `lxml.etree <http://lxml.de>`_ already\nhas it's own implementation of xpath 1.0.\n\n\ninstallation and usage\n======================\n\nyou can install the package with *pip* in a python 3.7+ environment::\n\n    pip install elementpath\n\nfor using it import the package and apply the selectors on elementtree nodes:\n\n>>> import elementpath\n>>> from xml.etree import elementtree\n>>> root = elementtree.xml('<a><b1/><b2><c1/><c2/><c3/></b2></a>')\n>>> elementpath.select(root, '/a/b2/*')\n[<element 'c1' at ...>, <element 'c2' at ...>, <element 'c3' at ...>]\n\nthe *select* api provides the standard xpath result format that is a list or an elementary\ndatatype's value. if you want only to iterate over results you can use the generator function\n*iter_select* that accepts the same arguments of *select*.\n\nthe selectors api works also using xml data trees based on the `lxml.etree <http://lxml.de>`_\nlibrary:\n\n>>> import elementpath\n>>> import lxml.etree as etree\n>>> root = etree.xml('<a><b1/><b2><c1/><c2/><c3/></b2></a>')\n>>> elementpath.select(root, '/a/b2/*')\n[<element c1 at ...>, <element c2 at ...>, <element c3 at ...>]\n\nwhen you need to apply the same xpath expression to several xml data you can also use the\n*selector* class, creating an instance and then using it to apply the path on distinct xml\ndata:\n\n>>> import elementpath\n>>> import lxml.etree as etree\n>>> selector = elementpath.selector('/a/*/*')\n>>> root = etree.xml('<a><b1/><b2><c1/><c2/><c3/></b2></a>')\n>>> selector.select(root)\n[<element c1 at ...>, <element c2 at ...>, <element c3 at ...>]\n>>> root = etree.xml('<a><b1><c0/></b1><b2><c1/><c2/><c3/></b2></a>')\n>>> selector.select(root)\n[<element c0 at ...>, <element c1 at ...>, <element c2 at ...>, <element c3 at ...>]\n\npublic api classes and functions are described into the\n`elementpath manual on the \"read the docs\" site <http://elementpath.readthedocs.io/en/latest/>`_.\n\nfor default the xpath 2.0 is used. if you need xpath 1.0 parser provide the *parser* argument:\n\n>>> from elementpath import select, xpath1parser\n>>> from xml.etree import elementtree\n>>> root = elementtree.xml('<a><b1/><b2><c1/><c2/><c3/></b2></a>')\n>>> select(root, '/a/b2/*', parser=xpath1parser)\n[<element 'c1' at ...>, <element 'c2' at ...>, <element 'c3' at ...>]\n\nfor xpath 3.0/3.1 import the parser from *elementpath.xpath3* subpackage, that is not loaded\nfor default:\n\n>>> from elementpath.xpath3 import xpath3parser\n>>> select(root, 'math:atan(1.0e0)', parser=xpath3parser)\n0.7853981633974483\n\nnote: *xpath3parser* is an alias of *xpath31parser*.\n\nif you need only xpath 3.0 you can also use a more specific subpackage,\navoiding the loading of xpath 3.1 implementation:\n\n>>> from elementpath.xpath30 import xpath30parser\n>>> select(root, 'math:atan(1.0e0)', parser=xpath30parser)\n0.7853981633974483\n\n\ncontributing\n============\n\nyou can contribute to this package reporting bugs, using the issue tracker or by a pull request.\nin case you open an issue please try to provide a test or test data for reproducing the wrong\nbehaviour. the provided testing code shall be added to the tests of the package.\n\nthe xpath parsers are based on an implementation of the pratt's top down operator precedence parser.\nthe implemented parser includes some lookup-ahead features, helpers for registering tokens and for\nextending language implementations. also the token class has been generalized using a `mutablesequence`\nas base class. see *tdop.py* for the basic internal classes and *xpath1_parser.py* for extensions\nand for a basic usage of the parser.\n\nif you like you can use the basic parser and tokens provided by the *tdop.py* module to\nimplement other types of parsers (i think it could be also a funny exercise!).\n\n\nlicense\n=======\n\nthis software is distributed under the terms of the mit license.\nsee the file 'license' in the root directory of the present\ndistribution, or http://opensource.org/licenses/mit.\n",
  "docs_url": null,
  "keywords": "xpath,xpath2,xpath3,xpath31,pratt-parser,elementtree,lxml",
  "license": "mit",
  "name": "elementpath",
  "package_url": "https://pypi.org/project/elementpath/",
  "project_url": "https://pypi.org/project/elementpath/",
  "project_urls": {
    "Homepage": "https://github.com/sissaschool/elementpath"
  },
  "release_url": "https://pypi.org/project/elementpath/4.1.5/",
  "requires_dist": [
    "tox ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "lxml ; extra == 'dev'",
    "xmlschema (>=2.0.0) ; extra == 'dev'",
    "Sphinx ; extra == 'dev'",
    "memory-profiler ; extra == 'dev'",
    "memray ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "lxml-stubs ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "xpath 1.0/2.0/3.0/3.1 parsers and selectors for elementtree and lxml",
  "version": "4.1.5",
  "releases": [],
  "developers": [
    "brunato@sissa.it",
    "davide_brunato"
  ],
  "kwds": "xpath2 xpath3 xpath xpath30 xpath3parser",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_elementpath",
  "homepage": "https://github.com/sissaschool/elementpath",
  "release_count": 69,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_flake8",
    "pypi_lxml",
    "pypi_lxml_stubs",
    "pypi_memory_profiler",
    "pypi_memray",
    "pypi_mypy",
    "pypi_sphinx",
    "pypi_tox",
    "pypi_xmlschema"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: python :: 3"
  ],
  "description": "<img width=\"300\" src=\"https://ax.dev/img/ax_logo_lockup.svg\" alt=\"ax logo\" />\n\n<hr/>\n\n[![support ukraine](https://img.shields.io/badge/support-ukraine-ffd500?style=flat&labelcolor=005bbb)](https://opensource.fb.com/support-ukraine)\n[![build status](https://img.shields.io/pypi/v/ax-platform.svg)](https://pypi.org/project/ax-platform/)\n[![build status](https://img.shields.io/pypi/pyversions/ax-platform.svg)](https://pypi.org/project/ax-platform/)\n[![build status](https://img.shields.io/pypi/wheel/ax-platform.svg)](https://pypi.org/project/ax-platform/)\n[![build status](https://github.com/facebook/ax/workflows/build%20and%20test%20workflow/badge.svg)](https://github.com/facebook/ax/actions?query=workflow%3a%22build+and+test+workflow%22)\n[![codecov](https://codecov.io/gh/facebook/ax/branch/main/graph/badge.svg)](https://codecov.io/gh/facebook/ax)\n[![build status](https://img.shields.io/badge/license-mit-green.svg)](license)\n\nax is an accessible, general-purpose platform for understanding, managing,\ndeploying, and automating adaptive experiments.\n\nadaptive experimentation is the machine-learning guided process of iteratively\nexploring a (possibly infinite) parameter space in order to identify optimal\nconfigurations in a resource-efficient manner. ax currently supports bayesian\noptimization and bandit optimization as exploration strategies. bayesian\noptimization in ax is powered by [botorch](https://github.com/facebookexternal/botorch),\na modern library for bayesian optimization research built on pytorch.\n\nfor full documentation and tutorials, see the [ax website](https://ax.dev)\n\n## why ax?\n\n* **versatility**: ax supports different kinds of experiments, from dynamic ml-assisted a/b testing, to hyperparameter optimization in machine learning.\n* **customization**: ax makes it easy to add new modeling and decision algorithms, enabling research and development with minimal overhead.\n* **production-completeness**: ax comes with storage integration and ability to fully save and reload experiments.\n* **support for multi-modal and constrained experimentation**: ax allows for running and combining multiple experiments (e.g. simulation with a real-world \"online\" a/b test) and for constrained optimization (e.g. improving classification accuracy without significant increase in resource-utilization).\n* **efficiency in high-noise setting**: ax offers state-of-the-art algorithms specifically geared to noisy experiments, such as simulations with reinforcement-learning agents.\n* **ease of use**: ax includes 3 different apis that strike different balances between lightweight structure and flexibility. using the most concise loop api, a whole optimization can be done in just one function call. the service api integrates easily with external schedulers. the most elaborate developer api affords full algorithm customization and experiment introspection.\n\n## getting started\n\nto run a simple optimization loop in ax (using the\n[booth response surface](https://www.sfu.ca/~ssurjano/booth.html) as the\nartificial evaluation function):\n\n```python\n>>> from ax import optimize\n>>> best_parameters, best_values, experiment, model = optimize(\n        parameters=[\n          {\n            \"name\": \"x1\",\n            \"type\": \"range\",\n            \"bounds\": [-10.0, 10.0],\n          },\n          {\n            \"name\": \"x2\",\n            \"type\": \"range\",\n            \"bounds\": [-10.0, 10.0],\n          },\n        ],\n        # booth function\n        evaluation_function=lambda p: (p[\"x1\"] + 2*p[\"x2\"] - 7)**2 + (2*p[\"x1\"] + p[\"x2\"] - 5)**2,\n        minimize=true,\n    )\n\n# best_parameters contains {'x1': 1.02, 'x2': 2.97}; the global min is (1, 3)\n```\n\n## installation\n\n### requirements\nyou need python 3.9 or later to run ax.\n\nthe required python dependencies are:\n\n* [botorch](https://www.botorch.org)\n* jinja2\n* pandas\n* scipy\n* sklearn\n* plotly >=2.2.1\n\n### stable version\n\n#### installing via pip\nwe recommend installing ax via pip (even if using conda environment):\n\n```\nconda install pytorch torchvision -c pytorch  # osx only (details below)\npip install ax-platform\n```\n\ninstallation will use python wheels from pypi, available for [osx, linux, and windows](https://pypi.org/project/ax-platform/#files).\n\n*note*: make sure the `pip` being used to install `ax-platform` is actually the one from the newly created conda environment.\nif you're using a unix-based os, you can use `which pip` to check.\n\n*recommendation for macos users*: pytorch is a required dependency of botorch, and can be automatically installed via pip.\nhowever, **we recommend you [install pytorch manually](https://pytorch.org/get-started/locally/#anaconda-1) before installing ax, using the anaconda package manager**.\ninstalling from anaconda will link against mkl (a library that optimizes mathematical computation for intel processors).\nthis will result in up to an order-of-magnitude speed-up for bayesian optimization, as at the moment, installing pytorch from pip does not link against mkl.\n\nif you need cuda on macos, you will need to build pytorch from source. please consult the pytorch installation instructions above.\n\n#### optional dependencies\n\nto use ax with a notebook environment, you will need jupyter. install it first:\n```\npip install jupyter\n```\n\nif you want to store the experiments in mysql, you will need sqlalchemy:\n```\npip install sqlalchemy\n```\n\n### latest version\n\n#### installing from git\n\nyou can install the latest (bleeding edge) version from git.\n\nfirst, see recommendation for installing pytorch for macos users above.\n\nat times, the bleeding edge for ax can depend on bleeding edge versions of botorch (or gpytorch). we therefore recommend installing those from git as well:\n\n```\npip install git+https://github.com/cornellius-gp/linear_operator.git\npip install git+https://github.com/cornellius-gp/gpytorch.git\nexport allow_latest_gpytorch_linop=true\npip install git+https://github.com/pytorch/botorch.git\nexport allow_botorch_latest=true\npip install git+https://github.com/facebook/ax.git#egg=ax-platform\n```\n\n#### optional dependencies\n\nif using ax in jupyter notebooks:\n\n```\npip install git+https://github.com/facebook/ax.git#egg=ax-platform[notebook]\n```\n\nto support plotly-based plotting in newer jupyter notebook versions\n\n```\npip install \"notebook>=5.3\" \"ipywidgets==7.5\"\n```\n\n[see plotly repo's readme](https://github.com/plotly/plotly.py#jupyter-notebook-support) for details and jupyterlab instructions.\n\nif storing ax experiments via sqlalchemy in mysql or sqlite:\n```\npip install git+https://github.com/facebook/ax.git#egg=ax-platform[mysql]\n```\n\n## join the ax community\n\n### getting help\n\nplease open an issue on our [issues page](https://github.com/facebook/ax/issues) with any questions, feature requests or bug reports! if posting a bug report, please include a minimal reproducible example (as a code snippet) that we can use to reproduce and debug the problem you encountered.\n\n### contributing\n\nsee the [contributing](contributing.md) file for how to help out.\n\nwhen contributing to ax, we recommend cloning the [repository](https://github.com/facebook/ax) and installing all optional dependencies:\n\n```\npip install git+https://github.com/cornellius-gp/linear_operator.git\npip install git+https://github.com/cornellius-gp/gpytorch.git\nexport allow_latest_gpytorch_linop=true\npip install git+https://github.com/pytorch/botorch.git\nexport allow_botorch_latest=true\ngit clone https://github.com/facebook/ax.git --depth 1\ncd ax\npip install -e .[tutorial]\n```\n\nsee recommendation for installing pytorch for macos users above.\n\nthe above example limits the cloned directory size via the\n[`--depth`](https://git-scm.com/docs/git-clone#documentation/git-clone.txt---depthltdepthgt)\nargument to `git clone`. if you require the entire commit history you may remove this\nargument.\n\n## license\n\nax is licensed under the [mit license](./license).\n\n\n",
  "docs_url": null,
  "keywords": "experimentation,optimization",
  "license": "mit",
  "name": "ax-platform",
  "package_url": "https://pypi.org/project/ax-platform/",
  "project_url": "https://pypi.org/project/ax-platform/",
  "project_urls": {
    "Homepage": "https://github.com/facebook/Ax"
  },
  "release_url": "https://pypi.org/project/ax-platform/0.3.6/",
  "requires_dist": [
    "botorch ==0.9.5",
    "jinja2",
    "pandas",
    "scipy",
    "scikit-learn",
    "ipywidgets",
    "plotly >=5.12.0",
    "typeguard",
    "pyre-extensions",
    "beautifulsoup4 ; extra == 'dev'",
    "black ==22.3.0 ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "hypothesis ; extra == 'dev'",
    "Jinja2 ; extra == 'dev'",
    "pyfakefs ==5.1.0 ; extra == 'dev'",
    "pytest >=4.6 ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "sphinx ==5.3.0 ; extra == 'dev'",
    "sphinx-autodoc-typehints ==1.19.5 ; extra == 'dev'",
    "torchvision >=0.5.0 ; extra == 'dev'",
    "nbconvert ; extra == 'dev'",
    "jupyter-client ==6.1.12 ; extra == 'dev'",
    "yappi ; extra == 'dev'",
    "SQLAlchemy ==1.4.17 ; extra == 'mysql'",
    "jupyter ; extra == 'notebook'",
    "beautifulsoup4 ; extra == 'tutorial'",
    "black ==22.3.0 ; extra == 'tutorial'",
    "flake8 ; extra == 'tutorial'",
    "hypothesis ; extra == 'tutorial'",
    "Jinja2 ; extra == 'tutorial'",
    "pyfakefs ==5.1.0 ; extra == 'tutorial'",
    "pytest >=4.6 ; extra == 'tutorial'",
    "pytest-cov ; extra == 'tutorial'",
    "sphinx ==5.3.0 ; extra == 'tutorial'",
    "sphinx-autodoc-typehints ==1.19.5 ; extra == 'tutorial'",
    "torchvision >=0.5.0 ; extra == 'tutorial'",
    "nbconvert ; extra == 'tutorial'",
    "jupyter-client ==6.1.12 ; extra == 'tutorial'",
    "yappi ; extra == 'tutorial'",
    "SQLAlchemy ==1.4.17 ; extra == 'tutorial'",
    "jupyter ; extra == 'tutorial'",
    "tensorboard ; extra == 'tutorial'",
    "torchvision ; extra == 'tutorial'",
    "torchx ; extra == 'tutorial'",
    "ray ; extra == 'tutorial'",
    "tabulate ; extra == 'tutorial'",
    "pyarrow ; extra == 'tutorial'",
    "tensorboardX ; extra == 'tutorial'",
    "matplotlib ; extra == 'tutorial'",
    "pyro-ppl ; extra == 'tutorial'",
    "pytorch-lightning ; extra == 'tutorial'",
    "papermill ; extra == 'tutorial'",
    "beautifulsoup4 ; extra == 'unittest'",
    "black ==22.3.0 ; extra == 'unittest'",
    "flake8 ; extra == 'unittest'",
    "hypothesis ; extra == 'unittest'",
    "Jinja2 ; extra == 'unittest'",
    "pyfakefs ==5.1.0 ; extra == 'unittest'",
    "pytest >=4.6 ; extra == 'unittest'",
    "pytest-cov ; extra == 'unittest'",
    "sphinx ==5.3.0 ; extra == 'unittest'",
    "sphinx-autodoc-typehints ==1.19.5 ; extra == 'unittest'",
    "torchvision >=0.5.0 ; extra == 'unittest'",
    "nbconvert ; extra == 'unittest'",
    "jupyter-client ==6.1.12 ; extra == 'unittest'",
    "yappi ; extra == 'unittest'",
    "SQLAlchemy ==1.4.17 ; extra == 'unittest'",
    "jupyter ; extra == 'unittest'",
    "tensorboard ; extra == 'unittest'",
    "torchvision ; extra == 'unittest'",
    "torchx ; extra == 'unittest'",
    "tensorboard ; extra == 'unittest_minimal'",
    "torchvision ; extra == 'unittest_minimal'",
    "torchx ; extra == 'unittest_minimal'"
  ],
  "requires_python": ">=3.9",
  "summary": "adaptive experimentation",
  "version": "0.3.6",
  "releases": [],
  "developers": [
    "facebook"
  ],
  "kwds": "ax_logo_lockup svg ax pypi logo",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ax_platform",
  "homepage": "https://github.com/facebook/ax",
  "release_count": 38,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_black",
    "pypi_botorch",
    "pypi_flake8",
    "pypi_hypothesis",
    "pypi_ipywidgets",
    "pypi_jinja2",
    "pypi_jupyter",
    "pypi_jupyter_client",
    "pypi_matplotlib",
    "pypi_nbconvert",
    "pypi_pandas",
    "pypi_papermill",
    "pypi_plotly",
    "pypi_pyarrow",
    "pypi_pyfakefs",
    "pypi_pyre_extensions",
    "pypi_pyro_ppl",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytorch_lightning",
    "pypi_ray",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sqlalchemy",
    "pypi_tabulate",
    "pypi_tensorboard",
    "pypi_tensorboardx",
    "pypi_torchvision",
    "pypi_torchx",
    "pypi_typeguard",
    "pypi_yappi"
  ]
}
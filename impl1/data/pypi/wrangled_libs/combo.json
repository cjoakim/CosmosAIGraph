{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: financial and insurance industry",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "combo: a python toolbox for machine learning model combination\r\n==============================================================\r\n\r\n\r\n**deployment & documentation & stats**\r\n\r\n.. image:: https://img.shields.io/pypi/v/combo.svg?color=brightgreen\r\n   :target: https://pypi.org/project/combo/\r\n   :alt: pypi version\r\n\r\n\r\n.. image:: https://readthedocs.org/projects/pycombo/badge/?version=latest\r\n   :target: https://pycombo.readthedocs.io/en/latest/?badge=latest\r\n   :alt: documentation status\r\n\r\n\r\n.. image:: https://mybinder.org/badge_logo.svg\r\n   :target: https://mybinder.org/v2/gh/yzhao062/combo/master\r\n   :alt: binder\r\n\r\n\r\n.. image:: https://img.shields.io/github/stars/yzhao062/combo.svg\r\n   :target: https://github.com/yzhao062/combo/stargazers\r\n   :alt: github stars\r\n\r\n\r\n.. image:: https://img.shields.io/github/forks/yzhao062/combo.svg?color=blue\r\n   :target: https://github.com/yzhao062/combo/network\r\n   :alt: github forks\r\n\r\n\r\n.. image:: https://pepy.tech/badge/combo\r\n   :target: https://pepy.tech/project/combo\r\n   :alt: downloads\r\n\r\n\r\n.. image:: https://pepy.tech/badge/combo/month\r\n   :target: https://pepy.tech/project/combo\r\n   :alt: downloads\r\n\r\n\r\n----\r\n\r\n\r\n**build status & coverage & maintainability & license**\r\n\r\n.. image:: https://github.com/yzhao062/combo/actions/workflows/testing.yml/badge.svg\r\n   :target: https://github.com/yzhao062/combo/actions/workflows/testing.yml\r\n   :alt: testing\r\n\r\n\r\n.. image:: https://circleci.com/gh/yzhao062/combo.svg?style=svg\r\n   :target: https://circleci.com/gh/yzhao062/combo\r\n   :alt: circle ci\r\n\r\n\r\n.. image:: https://ci.appveyor.com/api/projects/status/te7uieha87305ike/branch/master?svg=true\r\n   :target: https://ci.appveyor.com/project/yzhao062/combo/branch/master\r\n   :alt: build status\r\n\r\n\r\n.. image:: https://coveralls.io/repos/github/yzhao062/combo/badge.svg\r\n   :target: https://coveralls.io/github/yzhao062/combo\r\n   :alt: coverage status\r\n\r\n\r\n.. image:: https://api.codeclimate.com/v1/badges/465ebba81e990abb357b/maintainability\r\n   :target: https://codeclimate.com/github/yzhao062/combo/maintainability\r\n   :alt: maintainability\r\n\r\n\r\n.. image:: https://img.shields.io/github/license/yzhao062/combo.svg\r\n   :target: https://github.com/yzhao062/combo/blob/master/license\r\n   :alt: license\r\n\r\n\r\n----\r\n\r\n\r\n**combo** is a comprehensive python toolbox for **combining machine learning (ml) models and scores**.\r\n**model combination** can be considered as a subtask of `ensemble learning <https://en.wikipedia.org/wiki/ensemble_learning>`_,\r\nand has been widely used in real-world tasks and data science competitions like kaggle [#bell2007lessons]_.\r\n**combo** has been used/introduced in various research works since its inception [#raschka2020machine]_ [#zhao2019pyod]_.\r\n\r\n**combo** library supports the combination of models and score from\r\nkey ml libraries such as `scikit-learn <https://scikit-learn.org/stable/index.html>`_,\r\n`xgboost <https://xgboost.ai/>`_, and `lightgbm <https://github.com/microsoft/lightgbm>`_,\r\nfor crucial tasks including classification, clustering, anomaly detection.\r\nsee figure below for some representative combination approaches.\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/combo/master/docs/figs/framework_demo.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/combo/master/docs/figs/framework_demo.png\r\n   :alt: combination framework demo\r\n\r\n\r\n**combo** is featured for:\r\n\r\n* **unified apis, detailed documentation, and interactive examples** across various algorithms.\r\n* **advanced and latest models**, such as stacking/dcs/des/eac/lscp.\r\n* **comprehensive coverage** for classification, clustering, anomaly detection, and raw score.\r\n* **optimized performance with jit and parallelization** when possible, using `numba <https://github.com/numba/numba>`_ and `joblib <https://github.com/joblib/joblib>`_.\r\n\r\n\r\n**api demo**\\ :\r\n\r\n.. code-block:: python\r\n\r\n\r\n   from combo.models.classifier_stacking import stacking\r\n   # initialize a group of base classifiers\r\n   classifiers = [decisiontreeclassifier(), logisticregression(),\r\n                  kneighborsclassifier(), randomforestclassifier(),\r\n                  gradientboostingclassifier()]\r\n\r\n   clf = stacking(base_estimators=classifiers) # initialize a stacking model\r\n   clf.fit(x_train, y_train) # fit the model\r\n\r\n   # predict on unseen data\r\n   y_test_labels = clf.predict(x_test)  # label prediction\r\n   y_test_proba = clf.predict_proba(x_test)  # probability prediction\r\n\r\n\r\n**citing combo**\\ :\r\n\r\n`combo paper <http://www.andrew.cmu.edu/user/yuezhao2/papers/20-aaai-combo.pdf>`_ is published in\r\n`aaai 2020 <https://aaai.org/conferences/aaai-20/>`_ (demo track).\r\nif you use combo in a scientific publication, we would appreciate citations to the following paper::\r\n\r\n    @inproceedings{zhao2020combo,\r\n      title={combining machine learning models and scores using combo library},\r\n      author={zhao, yue and wang, xuejian and cheng, cheng and ding, xueying},\r\n      booktitle={thirty-fourth aaai conference on artificial intelligence},\r\n      month = {feb},\r\n      year={2020},\r\n      address = {new york, usa}\r\n    }\r\n\r\nor::\r\n\r\n    zhao, y., wang, x., cheng, c. and ding, x., 2020. combining machine learning models and scores using combo library. thirty-fourth aaai conference on artificial intelligence.\r\n\r\n\r\n**key links and resources**\\ :\r\n\r\n\r\n* `awesome-ensemble-learning <https://github.com/yzhao062/awesome-ensemble-learning>`_ (ensemble learning related books, papers, and more)\r\n* `view the latest codes on github <https://github.com/yzhao062/combo>`_\r\n* `view the documentation & api <https://pycombo.readthedocs.io/>`_\r\n* `view all examples <https://github.com/yzhao062/combo/tree/master/examples>`_\r\n* `view the demo video for aaai 2020 <https://youtu.be/pasj49ij7w4>`_\r\n* `execute interactive jupyter notebooks <https://mybinder.org/v2/gh/yzhao062/combo/master>`_\r\n\r\n\r\n**table of contents**\\ :\r\n\r\n\r\n* `installation <#installation>`_\r\n* `api cheatsheet & reference <#api-cheatsheet--reference>`_\r\n* `implemented algorithms <#implemented-algorithms>`_\r\n* `example 1: classifier combination with stacking/dcs/des <#example-of-stackingdcsdes>`_\r\n* `example 2: simple classifier combination <#example-of-classifier-combination>`_\r\n* `example 3: clustering combination <#example-of-clustering-combination>`_\r\n* `example 4: outlier detector combination <#example-of-outlier-detector-combination>`_\r\n* `development status <#development-status>`_\r\n* `inclusion criteria <#inclusion-criteria>`_\r\n\r\n\r\n----\r\n\r\n\r\ninstallation\r\n^^^^^^^^^^^^\r\n\r\nit is recommended to use **pip** for installation. please make sure\r\n**the latest version** is installed, as combo is updated frequently:\r\n\r\n.. code-block:: bash\r\n\r\n   pip install combo            # normal install\r\n   pip install --upgrade combo  # or update if needed\r\n   pip install --pre combo      # or include pre-release version for new features\r\n\r\nalternatively, you could clone and run setup.py file:\r\n\r\n.. code-block:: bash\r\n\r\n   git clone https://github.com/yzhao062/combo.git\r\n   cd combo\r\n   pip install .\r\n\r\n\r\n**required dependencies**\\ :\r\n\r\n\r\n* python 3.5, 3.6, or 3.7\r\n* joblib\r\n* matplotlib (**optional for running examples**)\r\n* numpy>=1.13\r\n* numba>=0.35\r\n* pyod\r\n* scipy>=0.19.1\r\n* scikit_learn>=0.20\r\n\r\n\r\n**note on python 2**\\ :\r\nthe maintenance of python 2.7 will be stopped by january 1, 2020 (see `official announcement <https://github.com/python/devguide/pull/344>`_).\r\nto be consistent with the python change and combo's dependent libraries, e.g., scikit-learn,\r\n**combo only supports python 3.5+** and we encourage you to use\r\npython 3.5 or newer for the latest functions and bug fixes. more information can\r\nbe found at `moving to require python 3 <https://python3statement.org/>`_.\r\n\r\n\r\n----\r\n\r\n\r\napi cheatsheet & reference\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nfull api reference: (https://pycombo.readthedocs.io/en/latest/api.html).\r\nthe following apis are consistent for most of the models\r\n(api cheatsheet: https://pycombo.readthedocs.io/en/latest/api_cc.html).\r\n\r\n* **fit(x, y)**\\ : fit estimator. y is optional for unsupervised methods.\r\n* **predict(x)**\\ : predict on a particular sample once the estimator is fitted.\r\n* **predict_proba(x)**\\ : predict the probability of a sample belonging to each class once the estimator is fitted.\r\n* **fit_predict(x, y)**\\ : fit estimator and predict on x. y is optional for unsupervised methods.\r\n\r\nfor raw score combination (after the score matrix is generated),\r\nuse individual methods from\r\n`\"score_comb.py\" <https://github.com/yzhao062/combo/blob/master/combo/models/score_comb.py>`_ directly.\r\nraw score combination api: (https://pycombo.readthedocs.io/en/latest/api.html#score-combination).\r\n\r\n\r\n----\r\n\r\n\r\nimplemented algorithms\r\n^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n**combo** groups combination frameworks by tasks. general purpose methods are\r\nfundamental ones which can be applied to various tasks.\r\n\r\n===================  ======================================================================================================  =====  ===========================================\r\ntask                 algorithm                                                                                               year   ref\r\n===================  ======================================================================================================  =====  ===========================================\r\ngeneral purpose      average & weighted average: average across all scores/prediction results, maybe with weights            n/a    [#zhou2012ensemble]_\r\ngeneral purpose      maximization: simple combination by taking the maximum scores                                           n/a    [#zhou2012ensemble]_\r\ngeneral purpose      median: take the median value across all scores/prediction results                                      n/a    [#zhou2012ensemble]_\r\ngeneral purpose      majority vote & weighted majority vote                                                                  n/a    [#zhou2012ensemble]_\r\nclassification       simpleclassifieraggregator: combining classifiers by general purpose methods above                      n/a    n/a\r\nclassification       dcs: dynamic classifier selection (combination of multiple classifiers using local accuracy estimates)  1997   [#woods1997combination]_\r\nclassification       des: dynamic ensemble selection (from dynamic classifier selection to dynamic ensemble selection)       2008   [#ko2008from]_\r\nclassification       stacking (meta ensembling): use a meta learner to learn the base classifier results                     n/a    [#gorman2016kaggle]_\r\nclustering           clusterer ensemble: combine the results of multiple clustering results by relabeling                    2006   [#zhou2006clusterer]_\r\nclustering           combining multiple clusterings using evidence accumulation (eac)                                        2002   [#fred2005combining]_\r\nanomaly detection    simpledetectorcombination: combining outlier detectors by general purpose methods above                 n/a    [#aggarwal2017outlier]_\r\nanomaly detection    average of maximum (aom): divide base detectors into subgroups to take the maximum, and then average    2015   [#aggarwal2015theoretical]_\r\nanomaly detection    maximum of average (moa): divide base detectors into subgroups to take the average, and then maximize   2015   [#aggarwal2015theoretical]_\r\nanomaly detection    xgbod: a semi-supervised combination framework for outlier detection                                    2018   [#zhao2018xgbod]_\r\nanomaly detection    locally selective combination (lscp)                                                                    2019   [#zhao2019lscp]_\r\n===================  ======================================================================================================  =====  ===========================================\r\n\r\n\r\n**the comparison among selected implemented models** is made available below\r\n(\\ `figure <https://raw.githubusercontent.com/yzhao062/combo/master/examples/compare_selected_classifiers.png>`_\\ ,\r\n`compare_selected_classifiers.py <https://github.com/yzhao062/combo/blob/master/examples/compare_selected_classifiers.py>`_\\, `interactive jupyter notebooks <https://mybinder.org/v2/gh/yzhao062/combo/master>`_\\ ).\r\nfor jupyter notebooks, please navigate to **\"/notebooks/compare_selected_classifiers.ipynb\"**.\r\n\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/combo/master/examples/compare_selected_classifiers.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/combo/master/examples/compare_selected_classifiers.png\r\n   :alt: comparison of selected models\r\n\r\n\r\n----\r\n\r\n\r\n**all implemented modes** are associated with examples, check\r\n`\"combo examples\" <https://github.com/yzhao062/combo/blob/master/examples>`_\r\nfor more information.\r\n\r\n\r\nexample of stacking/dcs/des\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n\r\n`\"examples/classifier_stacking_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/classifier_stacking_example.py>`_\r\ndemonstrates the basic api of stacking (meta ensembling). `\"examples/classifier_dcs_la_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/classifier_dcs_la_example.py>`_\r\ndemonstrates the basic api of dynamic classifier selection by local accuracy. `\"examples/classifier_des_la_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/classifier_des_la_example.py>`_\r\ndemonstrates the basic api of dynamic ensemble selection by local accuracy.\r\n\r\nit is noted **the basic api is consistent across all these models**.\r\n\r\n\r\n#. initialize a group of classifiers as base estimators\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      # initialize a group of classifiers\r\n      classifiers = [decisiontreeclassifier(random_state=random_state),\r\n                     logisticregression(random_state=random_state),\r\n                     kneighborsclassifier(),\r\n                     randomforestclassifier(random_state=random_state),\r\n                     gradientboostingclassifier(random_state=random_state)]\r\n\r\n\r\n#. initialize, fit, predict, and evaluate with stacking\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      from combo.models.classifier_stacking import stacking\r\n\r\n      clf = stacking(base_estimators=classifiers, n_folds=4, shuffle_data=false,\r\n                   keep_original=true, use_proba=false, random_state=random_state)\r\n\r\n      clf.fit(x_train, y_train)\r\n      y_test_predict = clf.predict(x_test)\r\n      evaluate_print('stacking | ', y_test, y_test_predict)\r\n\r\n\r\n#. see a sample output of classifier_stacking_example.py\r\n\r\n   .. code-block:: bash\r\n\r\n\r\n      decision tree        | accuracy:0.9386, roc:0.9383, f1:0.9521\r\n      logistic regression  | accuracy:0.9649, roc:0.9615, f1:0.973\r\n      k neighbors          | accuracy:0.9561, roc:0.9519, f1:0.9662\r\n      gradient boosting    | accuracy:0.9605, roc:0.9524, f1:0.9699\r\n      random forest        | accuracy:0.9605, roc:0.961, f1:0.9693\r\n\r\n      stacking             | accuracy:0.9868, roc:0.9841, f1:0.9899\r\n\r\n\r\n----\r\n\r\n\r\nexample of classifier combination\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n\r\n`\"examples/classifier_comb_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/classifier_comb_example.py>`_\r\ndemonstrates the basic api of predicting with multiple classifiers. **it is noted that the api across all other algorithms are consistent/similar**.\r\n\r\n#. initialize a group of classifiers as base estimators\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      # initialize a group of classifiers\r\n      classifiers = [decisiontreeclassifier(random_state=random_state),\r\n                     logisticregression(random_state=random_state),\r\n                     kneighborsclassifier(),\r\n                     randomforestclassifier(random_state=random_state),\r\n                     gradientboostingclassifier(random_state=random_state)]\r\n\r\n\r\n#. initialize, fit, predict, and evaluate with a simple aggregator (average)\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      from combo.models.classifier_comb import simpleclassifieraggregator\r\n\r\n      clf = simpleclassifieraggregator(classifiers, method='average')\r\n      clf.fit(x_train, y_train)\r\n      y_test_predicted = clf.predict(x_test)\r\n      evaluate_print('combination by avg   |', y_test, y_test_predicted)\r\n\r\n\r\n\r\n#. see a sample output of classifier_comb_example.py\r\n\r\n   .. code-block:: bash\r\n\r\n\r\n      decision tree        | accuracy:0.9386, roc:0.9383, f1:0.9521\r\n      logistic regression  | accuracy:0.9649, roc:0.9615, f1:0.973\r\n      k neighbors          | accuracy:0.9561, roc:0.9519, f1:0.9662\r\n      gradient boosting    | accuracy:0.9605, roc:0.9524, f1:0.9699\r\n      random forest        | accuracy:0.9605, roc:0.961, f1:0.9693\r\n\r\n      combination by avg   | accuracy:0.9693, roc:0.9677, f1:0.9763\r\n      combination by w_avg | accuracy:0.9781, roc:0.9716, f1:0.9833\r\n      combination by max   | accuracy:0.9518, roc:0.9312, f1:0.9642\r\n      combination by w_vote| accuracy:0.9649, roc:0.9644, f1:0.9728\r\n      combination by median| accuracy:0.9693, roc:0.9677, f1:0.9763\r\n\r\n\r\n----\r\n\r\n\r\nexample of clustering combination\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n\r\n`\"examples/cluster_comb_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/cluster_comb_example.py>`_\r\ndemonstrates the basic api of combining multiple base clustering estimators. `\"examples/cluster_eac_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/cluster_eac_example.py>`_\r\ndemonstrates the basic api of combining multiple clusterings using evidence accumulation (eac).\r\n\r\n#. initialize a group of clustering methods as base estimators\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      # initialize a set of estimators\r\n      estimators = [kmeans(n_clusters=n_clusters),\r\n                    minibatchkmeans(n_clusters=n_clusters),\r\n                    agglomerativeclustering(n_clusters=n_clusters)]\r\n\r\n\r\n#. initialize a clusterer ensemble class and fit the model\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      from combo.models.cluster_comb import clustererensemble\r\n      # combine by clusterer ensemble\r\n      clf = clustererensemble(estimators, n_clusters=n_clusters)\r\n      clf.fit(x)\r\n\r\n\r\n#. get the aligned results\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      # generate the labels on x\r\n      aligned_labels = clf.aligned_labels_\r\n      predicted_labels = clf.labels_\r\n\r\n\r\n\r\nexample of outlier detector combination\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n\r\n`\"examples/detector_comb_example.py\" <https://github.com/yzhao062/combo/blob/master/examples/detector_comb_example.py>`_\r\ndemonstrates the basic api of combining multiple base outlier detectors.\r\n\r\n#. initialize a group of outlier detection methods as base estimators\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      # initialize a set of estimators\r\n      detectors = [knn(), lof(), ocsvm()]\r\n\r\n\r\n#. initialize a simple averaging aggregator, fit the model, and make\r\n   the prediction.\r\n\r\n   .. code-block:: python\r\n\r\n\r\n      from combo.models.detector combination import simpledetectoraggregator\r\n      clf = simpledetectoraggregator(base_estimators=detectors)\r\n      clf_name = 'aggregation by averaging'\r\n      clf.fit(x_train)\r\n\r\n      y_train_pred = clf.labels_  # binary labels (0: inliers, 1: outliers)\r\n      y_train_scores = clf.decision_scores_  # raw outlier scores\r\n\r\n      # get the prediction on the test data\r\n      y_test_pred = clf.predict(x_test)  # outlier labels (0 or 1)\r\n      y_test_scores = clf.decision_function(x_test)  # outlier scores\r\n\r\n\r\n#. evaluate the prediction using roc and precision @ rank n.\r\n\r\n   .. code-block:: python\r\n\r\n      # evaluate and print the results\r\n      print(\"\\non training data:\")\r\n      evaluate_print(clf_name, y_train, y_train_scores)\r\n      print(\"\\non test data:\")\r\n      evaluate_print(clf_name, y_test, y_test_scores)\r\n\r\n#. see sample outputs on both training and test data.\r\n\r\n   .. code-block:: bash\r\n\r\n      on training data:\r\n      aggregation by averaging roc:0.9994, precision @ rank n:0.95\r\n\r\n      on test data:\r\n      aggregation by averaging roc:1.0, precision @ rank n:1.0\r\n\r\n\r\n----\r\n\r\n\r\ndevelopment status\r\n^^^^^^^^^^^^^^^^^^\r\n\r\n**combo** is currently **under development** as of feb, 2020. a concrete plan has\r\nbeen laid out and will be implemented in the next few months.\r\n\r\nsimilar to other libraries built by us, e.g., python outlier detection toolbox\r\n(`pyod <https://github.com/yzhao062/pyod>`_),\r\n**combo** is also targeted to be published in *journal of machine learning research (jmlr)*,\r\n`open-source software track <http://www.jmlr.org/mloss/>`_. a demo paper has been presented in\r\n*aaai 2020* for progress update.\r\n\r\n**watch & star** to get the latest update! also feel free to send me an email (zhaoy@cmu.edu)\r\nfor suggestions and ideas.\r\n\r\n\r\n----\r\n\r\n\r\ninclusion criteria\r\n^^^^^^^^^^^^^^^^^^\r\n\r\nsimilarly to scikit-learn, we mainly consider well-established algorithms for inclusion.\r\na rule of thumb is at least two years since publication, 50+ citations, and usefulness.\r\n\r\nhowever, we encourage the author(s) of newly proposed models to share and add your implementation into combo\r\nfor boosting ml accessibility and reproducibility.\r\nthis exception only applies if you could commit to the maintenance of your model for at least two year period.\r\n\r\n\r\n----\r\n\r\n\r\nreference\r\n^^^^^^^^^\r\n\r\n.. [#aggarwal2015theoretical] aggarwal, c.c. and sathe, s., 2015. theoretical foundations and algorithms for outlier ensembles. *acm sigkdd explorations newsletter*, 17(1), pp.24-47.\r\n\r\n.. [#aggarwal2017outlier] aggarwal, c.c. and sathe, s., 2017. outlier ensembles: an introduction. springer.\r\n\r\n.. [#bell2007lessons] bell, r.m. and koren, y., 2007. lessons from the netflix prize challenge. *sigkdd explorations*, 9(2), pp.75-79.\r\n\r\n.. [#gorman2016kaggle] gorman, b. (2016). a kaggler's guide to model stacking in practice. [online] the official blog of kaggle.com. available at: http://blog.kaggle.com/2016/12/27/a-kagglers-guide-to-model-stacking-in-practice [accessed 26 jul. 2019].\r\n\r\n.. [#ko2008from] ko, a.h., sabourin, r. and britto jr, a.s., 2008. from dynamic classifier selection to dynamic ensemble selection. *pattern recognition*, 41(5), pp.1718-1731.\r\n\r\n.. [#fred2005combining] fred, a. l. n., & jain, a. k. (2005). combining multiple clusterings using evidence accumulation. *ieee transactions on pattern analysis and machine intelligence*, 27(6), 835\u2013850. https://doi.org/10.1109/tpami.2005.113\r\n\r\n.. [#raschka2020machine] raschka, s., patterson, j. and nolet, c., 2020. machine learning in python: main developments and technology trends in data science, machine learning, and artificial intelligence. arxiv preprint arxiv:2002.04803.\r\n\r\n.. [#woods1997combination] woods, k., kegelmeyer, w.p. and bowyer, k., 1997. combination of multiple classifiers using local accuracy estimates. *ieee transactions on pattern analysis and machine intelligence*, 19(4), pp.405-410.\r\n\r\n.. [#zhao2018xgbod] zhao, y. and hryniewicki, m.k. xgbod: improving supervised outlier detection with unsupervised representation learning. *ieee international joint conference on neural networks*, 2018.\r\n\r\n.. [#zhao2019lscp] zhao, y., nasrullah, z., hryniewicki, m.k. and li, z., 2019, may. lscp: locally selective combination in parallel outlier ensembles. in *proceedings of the 2019 siam international conference on data mining (sdm)*, pp. 585-593. society for industrial and applied mathematics.\r\n\r\n.. [#zhao2019pyod] zhao, y., nasrullah, z. and li, z., 2019. pyod: a python toolbox for scalable outlier detection. *journal of machine learning research*, 20, pp.1-7.\r\n\r\n.. [#zhou2006clusterer] zhou, z.h. and tang, w., 2006. clusterer ensemble. *knowledge-based systems*, 19(1), pp.77-83.\r\n\r\n.. [#zhou2012ensemble] zhou, z.h., 2012. ensemble methods: foundations and algorithms. chapman and hall/crc.\r\n\r\n",
  "docs_url": null,
  "keywords": "ensemble learning,model combination,outlier ensembles,data mining,machine learning,clustering,python",
  "license": "",
  "name": "combo",
  "package_url": "https://pypi.org/project/combo/",
  "project_url": "https://pypi.org/project/combo/",
  "project_urls": {
    "Download": "https://github.com/yzhao062/combo/archive/master.zip",
    "Homepage": "https://github.com/yzhao062/combo"
  },
  "release_url": "https://pypi.org/project/combo/0.1.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a python toolbox for machine learning model combination",
  "version": "0.1.3",
  "releases": [],
  "developers": [
    "yue_zhao",
    "zhaoy@cmu.edu"
  ],
  "kwds": "ensemble_learning ensemble ensembles classifier compare_selected_classifiers",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_combo",
  "homepage": "https://github.com/yzhao062/combo",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "[![pypi version](https://badge.fury.io/py/msgraph-sdk.svg)](https://badge.fury.io/py/msgraph-sdk)\n[![downloads](https://pepy.tech/badge/msgraph-sdk)](https://pepy.tech/project/msgraph-sdk)\n[![supported versions](https://img.shields.io/pypi/pyversions/msgraph-sdk.svg)](https://pypi.org/project/msgraph-sdk)\n[![contributors](https://img.shields.io/github/contributors/microsoftgraph/msgraph-sdk-python.svg)](https://github.com/microsoftgraph/msgraph-sdk-python/graphs/contributors)\n\n# microsoft graph sdk for python\n\nget started with the microsoft graph sdk for python by integrating the [microsoft graph api](https://docs.microsoft.com/graph/overview) into your python application.\n\n> **note:** \n> * this sdk allows you to build applications using the [v1.0](https://docs.microsoft.com/graph/use-the-api#version) of microsoft graph. if you want to try the latest microsoft graph apis, try the [beta](https://github.com/microsoftgraph/msgraph-beta-sdk-python) sdk.  \n\n## 1. installation\n\n```py\npip install msgraph-sdk\n```\n> **note:** \n> * the microsoft graph sdk for python is a fairly large package. it may take a few minutes for the initial installation to complete.\n> * enable long paths in your environment if you receive a `could not install packages due to an oserror`. for details, see [enable long paths in windows 10, version 1607, and later](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell#enable-long-paths-in-windows-10-version-1607-and-later).\n\n## 2. getting started with microsoft graph\n\n### 2.1 register your application\n\nregister your application by following the steps at [register your app with the microsoft identity platform](https://docs.microsoft.com/graph/auth-register-app-v2).\n\n### 2.2 select and create an authentication provider\n\nto start writing code and making requests to the microsoft graph service, you need to set up an authentication provider. this object will authenticate your requests to microsoft graph. for authentication, the microsoft graph python sdk supports both sync and async credential classes from azure identity. which library to choose depends on the type of application you are building.\n\n> **note**: for authentication we support both `sync` and `async` credential classes from `azure.identity`. please see the azure identity [docs](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity?view=azure-python) for more information.\n\nthe easiest way to filter this decision is by looking at the permissions set you'd use. microsoft graph supports 2 different types of permissions: delegated and application permissions:\n- application permissions are used when you don\u2019t need a user to login to your app, but the app will perform tasks on its own and run in the background. \n- delegated permissions, also called scopes, are used when your app requires a user to login and interact with data related to this user in a session.\n\nthe following table lists common libraries by permissions set. \n| msal library | permissions set | common use case |\n|---|---|---|\n| [clientsecretcredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.aio.clientsecretcredential?view=azure-python&preserve-view=true) | application permissions | daemon apps or applications running in the background without a signed-in user. |\n| [devicecodecredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.devicecodecredential?view=azure-python) | delegated permissions | enviroments where authentication is triggered in one machine and completed in another e.g in a cloud server. |\n| [interactivebrowsercredentials](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.interactivebrowsercredential?view=azure-python) | delegated permissions | environments where a browser is available and the user wants to key in their username/password. |\n| [authorizationcodecredentials](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.authorizationcodecredential?view=azure-python) | delegated permissions | usually for custom customer applications where the frontend calls the backend and waits for the authorization code at a particular url. |\n\nyou can also use [environmentcredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.environmentcredential?view=azure-python), [defaultazurecredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python), [onbehalfofcredential](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.onbehalfofcredential?view=azure-python), or any other [azure identity library](https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#credential-classes).\n\nonce you've picked an authentication library, we can initiate the authentication provider in your app. the following example uses clientsecretcredential with application permissions.\n```python\nimport asyncio\n\nfrom azure.identity.aio import clientsecretcredential\n\ncredential = clientsecretcredential(\"tenantid\",\n                                    \"clientid\",\n                                    \"clientsecret\")\nscopes = ['https://graph.microsoft.com/.default']\n```\n\nthe following example uses devicecodecredentials with delegated permissions.\n```python\nimport asyncio\n\nfrom azure.identity import devicecodecredential\n\ncredential = devicecodecredential(\"client_id\",\n                                  \"tenant_id\")\ngraph_scopes = ['user.read', 'calendars.readwrite.shared']\n```\n\n### 2.3 initialize a graphserviceclient object\n\nyou must create **graphserviceclient** object to make requests against the service. to create a new instance of this class, you need to provide credentials and scopes, which can authenticate requests to microsoft graph.\n\n```py\n# example using async credentials and application access.\nfrom azure.identity.aio import clientsecretcredential\nfrom msgraph import graphserviceclient\n\ncredential = clientsecretcredential(\n    'tenant_id',\n    'client_id',\n    'client_secret',\n)\nscopes = ['https://graph.microsoft.com/.default']\nclient = graphserviceclient(credentials=credential, scopes=scopes)\n```\n\nthe above example uses default scopes for [app-only access](https://learn.microsoft.com/en-us/graph/permissions-overview?tabs=http#application-permissions).  if using [delegated access](https://learn.microsoft.com/en-us/graph/permissions-overview#delegated-permissions) you can provide custom scopes:\n\n```py\n# example using sync credentials and delegated access.\nfrom azure.identity import devicecodecredential\nfrom msgraph import graphserviceclient\n\ncredential=devicecodecredential(\n    'client_id',\n    'tenant_id',\n)\nscopes = ['user.read', 'mail.read']\nclient = graphserviceclient(credentials=credential, scopes=scopes)\n```\n\n## 3. make requests against the service\n\nafter you have a **graphserviceclient** that is authenticated, you can begin making calls against the service. the requests against the service look like our [rest api](https://docs.microsoft.com/graph/api/overview?view=graph-rest-1.0).\n\n> **note**: this sdk offers an asynchronous api by default. async is a concurrency model that is far more efficient than multi-threading, and can provide significant performance benefits and enable the use of long-lived network connections such as websockets. we support popular python async envronments such as `asyncio`, `anyio` or `trio`.\n\nthe following is a complete example that shows how to fetch a user from microsoft graph.\n\n```py\nimport asyncio\nfrom azure.identity.aio import clientsecretcredential\nfrom msgraph import graphserviceclient\n\ncredential = clientsecretcredential(\n    'tenant_id',\n    'client_id',\n    'client_secret'\n)\nscopes = ['https://graph.microsoft.com/.default']\nclient = graphserviceclient(credentials=credential, scopes=scopes)\n\n# get /users/{id | userprincipalname}\nasync def get_user():\n    user = await client.users.by_user_id('userprincipalname').get()\n    if user:\n        print(user.display_name)\nasyncio.run(get_user())\n```\n\nnote that to calling `me` requires a signed-in user and therefore delegated permissions. see [authenticating users](https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#authenticate-users) for more:\n\n```py\nimport asyncio\nfrom azure.identity import interactivebrowsercredential\nfrom msgraph import graphserviceclient\n\ncredential = interactivebrowsercredential()\nscopes=['user.read']\nclient = graphserviceclient(credentials=credential, scopes=scopes,)\n\n# get /me\nasync def me():\n    me = await client.me.get()\n    if me:\n        print(me.display_name)\nasyncio.run(me())\n```\n\n### 3.1 error handling\n\nfailed requests raise `apierror` exceptions. you can handle these exceptions using `try` `catch` statements.\n```py\nfrom kiota_abstractions.api_error import apierror\nasync def get_user():\n    try:\n        user = await client.users.by_user_id('userid').get()\n        print(user.user_principal_name, user.display_name, user.id)\n    except apierror as e:\n        print(f'error: {e.error.message}')\nasyncio.run(get_user())\n```\n\n\n## documentation and resources\n\n* [overview](https://docs.microsoft.com/graph/overview)\n\n* [microsoft graph website](https://aka.ms/graph)\n\n* [samples](docs)\n\n## upgrading\n\nfor detailed information on breaking changes, bug fixes and new functionality introduced during major upgrades, check out our [upgrade guide](upgrading.md)\n\n\n## issues\n\nview or log issues on the [issues](https://github.com/microsoftgraph/msgraph-sdk-python/issues) tab in the repo.\n\n## contribute\n\nplease read our [contributing](contributing.md) guidelines carefully for advice on how to contribute to this repo.\n\n## copyright and license\n\ncopyright (c) microsoft corporation. all rights reserved. licensed under the mit [license](license).\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/). for more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## third party notices\n[third-party notices](third%20party%20notices)\n",
  "docs_url": null,
  "keywords": "msgraph,openapi,microsoft,graph",
  "license": "mit license  copyright (c) microsoft corporation.  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software ",
  "name": "msgraph-sdk",
  "package_url": "https://pypi.org/project/msgraph-sdk/",
  "project_url": "https://pypi.org/project/msgraph-sdk/",
  "project_urls": {
    "documentation": "https://github.com/microsoftgraph/msgraph-sdk-python/docs",
    "homepage": "https://github.com/microsoftgraph/msgraph-sdk-python#readme",
    "repository": "https://github.com/microsoftgraph/msgraph-sdk-python"
  },
  "release_url": "https://pypi.org/project/msgraph-sdk/1.0.0/",
  "requires_dist": [
    "azure-identity >=1.12.0",
    "microsoft-kiota-abstractions <2.0.0,>=1.0.0",
    "microsoft-kiota-authentication-azure <2.0.0,>=1.0.0",
    "microsoft-kiota-serialization-json <2.0.0,>=1.0.0",
    "microsoft-kiota-serialization-text <2.0.0,>=1.0.0",
    "microsoft-kiota-http <2.0.0,>=1.0.0",
    "msgraph-core >=1.0.0a2",
    "yapf ; extra == 'dev'",
    "bumpver ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "mypy ; extra == 'dev'"
  ],
  "requires_python": ">=3.8",
  "summary": "the microsoft graph python sdk",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "graphtooling+python@microsoft.com"
  ],
  "kwds": "microsoftgraph msgraph graph pyversions graphs",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_msgraph_sdk",
  "homepage": "",
  "release_count": 18,
  "dependency_ids": [
    "pypi_azure_identity",
    "pypi_bumpver",
    "pypi_isort",
    "pypi_microsoft_kiota_abstractions",
    "pypi_microsoft_kiota_authentication_azure",
    "pypi_microsoft_kiota_http",
    "pypi_microsoft_kiota_serialization_json",
    "pypi_microsoft_kiota_serialization_text",
    "pypi_msgraph_core",
    "pypi_mypy",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_yapf"
  ]
}
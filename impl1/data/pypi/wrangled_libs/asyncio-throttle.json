{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# asyncio-throttle\n\n[![travis-ci](https://travis-ci.org/hallazzang/asyncio-throttle.svg?branch=master)](https://travis-ci.org/hallazzang/asyncio-throttle)\n[![pypi-version](https://badge.fury.io/py/asyncio-throttle.svg)](https://badge.fury.io/py/asyncio-throttle)\n\nsimple, easy-to-use throttler for asyncio.\n\n## example\n\n```python\nimport time\nimport random\nimport asyncio\n\nfrom asyncio_throttle import throttler\n\nasync def worker(no, throttler, n):\n    for _ in range(n):\n        await asyncio.sleep(random.random() * 2)\n\n        async with throttler:\n            print(time.time(), 'worker #%d: bang!' % no)\n\nasync def main():\n    throttler = throttler(rate_limit=5)\n\n    tasks = [\n        loop.create_task(worker(no, throttler, 10))\n            for no in range(5)\n    ]\n    await asyncio.wait(tasks)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nloop.close()\n```\n\nhere i limited work rate to 5/sec while there are 5 workers.\nand the result:\n\n```plain\n1508273760.3462772 worker #2: bang!\n1508273760.590009 worker #3: bang!\n1508273760.856431 worker #0: bang!\n1508273761.0110679 worker #2: bang!\n1508273761.086856 worker #4: bang!\n1508273761.350699 worker #3: bang!\n1508273761.5906 worker #1: bang!\n1508273761.8655958 worker #4: bang!\n1508273762.224158 worker #0: bang!\n1508273762.600234 worker #2: bang!\n1508273762.694332 worker #2: bang!\n1508273762.726774 worker #0: bang!\n1508273762.944273 worker #4: bang!\n```\n\n## installation\n\n```bash\n$ pip install asyncio-throttle\n```\n\nit requires python 3.6 or later.\n\n## usage\n\n`asyncio_throttle.throttler` introduces simple apis: `flush()` and\n`acquire()`. but you will not be interested in those because you can\njust use it within `with` statement and it looks nicer.\n\nfirst, create a throttler given desired rate limit. for example if you\nwant to limit rate to 500/min, you can make it as:\n\n```python\nfrom asyncio_throttle import throttler\n\nthrottler = throttler(rate_limit=500, period=60)\n```\n\nthen whenever you want to do some jobs which should have limited\nrate(e.g. sending request to server), put it in `async with` statement:\n\n```python\nasync with throttler:\n    send_a_request()\n```\n\nit's that easy. `asyncio_throttler` can be easily integrated with\n`aiohttp` too:\n\n```python\nasync def worker(throttler, session):\n    while true:\n        async with throttler:\n            async with session.get('http://example.com') as resp:\n                do_some_job_with(await resp.text())\n\n        await asyncio.sleep(0.05)\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "asyncio-throttle",
  "package_url": "https://pypi.org/project/asyncio-throttle/",
  "project_url": "https://pypi.org/project/asyncio-throttle/",
  "project_urls": {
    "Homepage": "https://github.com/hallazzang/asyncio-throttle"
  },
  "release_url": "https://pypi.org/project/asyncio-throttle/1.0.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "simple, easy-to-use throttler for asyncio",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "hallazzang@gmail.com",
    "hanjun_kim"
  ],
  "kwds": "asyncio_throttle asyncio_throttler asyncio async throttle",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_asyncio_throttle",
  "homepage": "https://github.com/hallazzang/asyncio-throttle",
  "release_count": 7,
  "dependency_ids": []
}
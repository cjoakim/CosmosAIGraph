{
  "classifiers": [],
  "description": "django-request-logging\n==========================\n\nplug django-request-logging into your django project and you will have intuitive and color coded request/response payload logging, for both web requests and api requests. supports django 1.8+.\n\n## installing\n\n```bash\n$ pip install django-request-logging\n```\n\nthen add ```request_logging.middleware.loggingmiddleware``` to your ```middleware```.\n\nfor example:\n\n```python\nmiddleware = (\n    ...,\n    'request_logging.middleware.loggingmiddleware',\n    ...,\n)\n```\n\nand configure logging in your app:\n\n```python\nlogging = {\n    'version': 1,\n    'disable_existing_loggers': false,\n    'handlers': {\n        'console': {\n            'class': 'logging.streamhandler',\n        },\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['console'],\n            'level': 'debug',  # change debug level as appropiate\n            'propagate': false,\n        },\n    },\n}\n```\n\n## details\n\nmost of the times you don't have to care about these details. but in case you need to dig deep:\n\n* all logs are configured using logger name \"django.request\".\n* if http status code is between 400 - 599, uris are logged at error level, otherwise they are logged at info level.\n* if http status code is between 400 - 599, data are logged at error level, otherwise they are logged at debug level.\n\nsee `request_logging_http_4xx_log_level` setting to override this.\n\n\na `no_logging` decorator is included for views with sensitive data. this decorator allows control over logging behaviour of single views via the following parameters:\n```\n* value\n    * false: the view does not log any activity at all (overrules settings of log_headers, log_body, log_response and automatically sets them to false).\n    * true: the view logs incoming requests (potentially log headers, body and response, depending on their specific settings)\n    * none: no_logging_default_value is used (can be defined in settings file as django_request_logging_no_logging_default_value)\n* msg\n    * reason for deactivation of logging gets logged instead of request itself (only if silent=true and value=false)\n    * no_logging_msg is used by default\n* log_headers\n    * false: request headers will not get logged\n    * true: request headers will get logged (if value is true)\n    * none: log_headers_default_value is used (can be defined in settings file as django_request_logging_log_headers_default_value)\n* no_header_logging_msg\n    * reason for deactivation of header logging gets logged instead of headers (only if silent=true and log_headers=false)\n    * no_header_logging_msg is used by default\n* log_body\n    * false: request body will not get logged\n    * true: request headers will get logged (if value is true)\n    * none: log_body_default_value is used (can be defined in settings file as django_request_logging_log_body_default_value)\n* no_body_logging_msg\n    * reason for deactivation of body logging gets logged instead of body (only if silent=true and log_body=false)\n    * no_body_logging_msg is used by default\n* log_response\n    * false: response will not get logged\n    * true: response will get logged (if value is true)\n    * none: log_response_default_value is used (can be defined in settings file as django_request_logging_log_response_default_value)\n* no_response_logging_msg\n    * reason for deactivation of body logging gets logged instead of body (only if silent=true and log_body=false)\n    * no_response_logging_msg is used by default\n* silent\n    * true: deactivate logging of alternative messages case parts of the logging are deactivated (request/header/body/response)\n    * false: alternative messages for deactivated parts of logging (request/header/body/response) are logged instead\n```\n\nby default, value of http headers `http_authorization` and `http_proxy_authorization` are replaced wih `*****`. you can use `request_logging_sensitive_headers` setting to override this default behaviour with your list of sensitive headers.\n\n## django settings\nyou can customized some behaves of django-request-logging by following settings in django `settings.py`.\n### request_logging_data_log_level\nby default, data will log in debug level, you can change to other valid level (ex. logging.info) if need.\n### request_logging_enable_colorize\nit's enabled by default. if you want to log into log file instead of console, you may want to remove ansi color. you can set `request_logging_enable_colorize=false` to disable colorize.\n### request_logging_disable_colorize (deprecated)\nthis legacy setting will still available, but you should't use this setting anymore. you should use `request_logging_enable_colorize` instead.\nwe keep this settings for backward compatibility.\n### request_logging_max_body_length\nby default, max length of a request body and a response content is cut to 50000 characters.\n### request_logging_http_4xx_log_level\nby default, http status codes between 400 - 499 are logged at error level.  you can set `request_logging_http_4xx_log_level=logging.warning` (etc) to override this.\nif you set `request_logging_http_4xx_log_level=logging.info` they will be logged the same as normal requests.\n### request_logging_sensitive_headers\nthe value of the headers defined in this settings will be replaced with `'*****'` to hide the sensitive information while logging. by default it is set as `request_logging_sensitive_headers = [\"http_authorization\", \"http_proxy_authorization\"]`\n### django_request_logging_logger_name\nname of the logger that is used to log django.request occurrances with the new loggingmiddleware. defaults to \"django.request\".\n### django_request_logging_no_logging_default_value\nglobal default to activate/deactivate logging of all views. can be overruled for each individual view by using the @no_logging decator's \"value\" parameter.\n### django_request_logging_log_headers_default_value = true\nglobal default to activate/deactivate logging of request headers for all views. can be overruled for each individual view by using the @no_logging decator's \"log_headers\" parameter.\n### django_request_logging_log_body_default_value = true\nglobal default to activate/deactivate logging of request bodys for all views. can be overruled for each individual view by using the @no_logging decator's \"log_body\" parameter.\n### django_request_logging_log_response_default_value = true\nglobal default to activate/deactivate logging of responses for all views. can be overruled for each individual view by using the @no_logging decator's \"log_response\" parameter.\n\n\n## deploying, etc.\n\n### maintenance\n\nuse `pyenv` to maintain a set of virtualenvs for 2.7 and a couple versions of python 3.\nmake sure the `requirements-dev.txt` installs for all of them, at least until we give up on 2.7.\nat that point, update this readme to let users know the last version they can use with 2.7.\n\n### setup\n\n- `pip install twine pypandoc pbr wheel`\n- if `pypandoc` complains that `pandoc` isn't installed, you can add that via `brew` if you have homebrew installed\n- you will need a `.pypirc` file in your user root folder that looks like this:\n\n```\n    index-servers=\n        testpypi\n        pypi\n\n    [testpypi]\n    username = rhumbix\n    password = password for dev@rhumbix.com at pypi\n\n    [pypi]\n    username = rhumbix\n    password = password for dev@rhumbix.com at pypi\n```\n\n### publishing\n\n- bump the version value in `request_logging/__init__.py`\n- run `python setup.py publish`\n- manually tag per the instructions in the output of that command\n- todo: add automagic `git tag` logic to the publish process\n- todo: setup 2fa at pypi\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-request-logging",
  "package_url": "https://pypi.org/project/django-request-logging/",
  "project_url": "https://pypi.org/project/django-request-logging/",
  "project_urls": {
    "Homepage": "https://github.com/Rhumbix/django-request-logging.git"
  },
  "release_url": "https://pypi.org/project/django-request-logging/0.7.5/",
  "requires_dist": [
    "Django"
  ],
  "requires_python": "",
  "summary": "django middleware that logs http request body.",
  "version": "0.7.5",
  "releases": [],
  "developers": [
    "dev@rhumbix.com",
    "rhumbix"
  ],
  "kwds": "django_request_logging_logger_name django_request_logging_log_headers_default_value django_request_logging_log_response_default_value django_request_logging_no_logging_default_value django_request_logging_log_body_default_value",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_request_logging",
  "homepage": "https://github.com/rhumbix/django-request-logging.git",
  "release_count": 34,
  "dependency_ids": [
    "pypi_django"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: build tools"
  ],
  "description": "# eth-event\n\n[![pypi status](https://img.shields.io/pypi/v/eth-event.svg)](https://pypi.org/project/eth-event/) [![build status](https://img.shields.io/github/workflow/status/iamdefinitelyahuman/eth-event/main%20workflow)](https://github.com/iamdefinitelyahuman/eth-event/actions) [![coverage status](https://img.shields.io/codecov/c/github/iamdefinitelyahuman/eth-event)](https://codecov.io/gh/iamdefinitelyahuman/eth-event)\n\ntools for ethereum event decoding and topic generation.\n\n## installation\n\nyou can install the latest release via `pip`:\n\n```bash\npip install eth-event\n```\n\nor clone the repository and use `setuptools` for the most up-to-date version:\n\n```bash\ngit clone https://github.com/iamdefinitelyahuman/eth-event.git\ncd eth-event\npython3 setup.py install\n```\n\n## usage\n\nthe public api is well documented within the docstrings. the following example may also help:\n\n```python\n>>> from eth_event import get_topics\n\n# generating a topic map\n>>> abi = open('abi.json').read()\n>>> topic_map = get_topic_map(abi)\n>>> topic_map\n{\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': {\n        'name': 'transfer',\n        'inputs': [\n            {'name': 'from', 'type': 'address', 'indexed': true},\n            {'name': 'to', 'type': 'address', 'indexed': true},\n            {'name': 'value', 'type': 'uint256', 'indexed': false}\n        ]\n    }\n}\n\n# decoding event logs from a transaction receipt\n>>> tx = token.transfer(account[1], 100, {'from': account[0]})\n<transaction object '0x615a157e84715d5f960a38fe2a3ddb566c8393cfc71f15b06170a0eff74dfdde'>\n>>> eth_event.decode_logs(tx.logs, topic_map)\n[{\n    'name': 'transfer',\n    'address': \"0x3194cbdc3dbcd3e11a07892e7ba5c3394048cc87\",\n    'data': [\n        {'name': 'from', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': true},\n        {'name': 'to', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': true},\n        {'name': 'tokens', 'type': 'uint256', 'value': 100, 'decoded': true}\n    ],\n}]\n\n# decoding a structlog from geth's debug_tracetransaction endpoint\n>>> trace = web3.provider.make_request(\n    \"debug_tracetransaction\",\n    ['0x615a157e84715d5f960a38fe2a3ddb566c8393cfc71f15b06170a0eff74dfdde', {}]\n)\n>>> struct_log = trace['result']['structlogs']\n\n>>> eth_event.decode_trace(struct_log, topic_map, initial_address=\"0x3194cbdc3dbcd3e11a07892e7ba5c3394048cc87\")\n[{\n    'name': 'transfer',\n    'address': \"0x3194cbdc3dbcd3e11a07892e7ba5c3394048cc87\",\n    'data': [\n        {'name': 'from', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': true},\n        {'name': 'to', 'type': 'address', 'value': '0xbd4940951bfa463f8fb6db762e55686f6cfdb73a', 'decoded': true},\n        {'name': 'tokens', 'type': 'uint256', 'value': 100, 'decoded': true}\n    ],\n}]\n```\n\n## limitations\n\n* if an array is indexed in an event, the topic is generated as a sha3 hash and so cannot be decrypted. in this case, the unencrypted topic is returned and `decoded` is set to `false`.\n\n* anonymous events cannot be decoded. use the `allow_undecoded` kwarg when calling `decode_logs` and `decode_trace` to receive the undecoded log without raising an exception.\n\n* when decoding a trace, the initial address for the call cannot be determined. to include addresses where decoded events were emitted you must supply the initial address with the `initial_address` keyword argument.\n\n## tests\n\nto run the test suite:\n\n```bash\n$ tox\n```\n\n## development\n\nthis project is still in development. comments, questions, criticisms and pull requests are welcomed.\n\n## license\n\nthis project is licensed under the [mit license](license).\n\n\n",
  "docs_url": null,
  "keywords": "ethereum",
  "license": "mit",
  "name": "eth-event",
  "package_url": "https://pypi.org/project/eth-event/",
  "project_url": "https://pypi.org/project/eth-event/",
  "project_urls": {
    "Homepage": "https://github.com/iamdefinitelyahuman/eth-event"
  },
  "release_url": "https://pypi.org/project/eth-event/1.2.3/",
  "requires_dist": [
    "eth-abi (<3.0.0,>=2.0.0)",
    "eth-hash[pycryptodome] (<1.0.0,>=0.2.0)",
    "eth-utils (<2.0.0,>=1.2.0)",
    "hexbytes (<1.0.0,>=0.2.0)"
  ],
  "requires_python": ">=3.6, <4",
  "summary": "ethereum event decoder and topic generator",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "ben@hauser.id",
    "benjamin_hauser"
  ],
  "kwds": "eth_event event 20workflow events status",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_eth_event",
  "homepage": "https://github.com/iamdefinitelyahuman/eth-event",
  "release_count": 14,
  "dependency_ids": [
    "pypi_eth_abi",
    "pypi_eth_hash",
    "pypi_eth_utils",
    "pypi_hexbytes"
  ]
}
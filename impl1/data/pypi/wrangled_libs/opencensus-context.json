{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "opencensus runtime context\n============================================================================\n\n|pypi|\n\n.. |pypi| image:: https://badge.fury.io/py/opencensus-context.svg\n   :target: https://pypi.org/project/opencensus-context/\n\nthe **opencensus runtime context** provides in-process context propagation.\nby default, ``thread local storage`` is used for python 2.7, 3.4 and 3.5;\n``contextvars`` is used for python >= 3.6, which provides ``asyncio`` support.\n\ninstallation\n------------\n\nthis library is installed by default with ``opencensus``, there is no need\nto install it explicitly.\n\nusage\n-----\n\nin most cases context propagation happens automatically within a process,\nfollowing the control flow of threads and asynchronous coroutines. the runtime\ncontext is a dictionary stored in a `context variable <https://docs.python.org/3/library/contextvars.html>`_\nwhen available, and in `thread local storage <https://docs.python.org/2/library/threading.html#threading.local>`_\notherwise.\n\nthere are cases where you may want to propagate the context explicitly:\n\nexplicit thread creation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from threading import thread\n    from opencensus.common.runtime_context import runtimecontext\n\n    def work(name):\n        # here you will get the context from the parent thread\n        print(runtimecontext)\n\n    thread = thread(\n        # propagate context explicitly\n        target=runtimecontext.with_current_context(work),\n        args=('foobar',),\n    )\n    thread.start()\n    thread.join()\n\nthread pool\n~~~~~~~~~~~\n\n.. code:: python\n\n    from multiprocessing.dummy import pool as threadpool\n    from opencensus.common.runtime_context import runtimecontext\n\n    def work(name):\n        # here you will get the context from the parent thread\n        print(runtimecontext)\n\n    pool = threadpool(2)\n    # propagate context explicitly\n    pool.map(runtimecontext.with_current_context(work), [\n        'bear',\n        'cat',\n        'dog',\n        'horse',\n        'rabbit',\n    ])\n    pool.close()\n    pool.join()\n\nreferences\n----------\n\n* `examples <https://github.com/census-instrumentation/opencensus-python/tree/master/context/opencensus-context/examples>`_\n* `opencensus project <https://opencensus.io/>`_\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "opencensus-context",
  "package_url": "https://pypi.org/project/opencensus-context/",
  "project_url": "https://pypi.org/project/opencensus-context/",
  "project_urls": {
    "Homepage": "https://github.com/census-instrumentation/opencensus-python/tree/master/context/opencensus-context"
  },
  "release_url": "https://pypi.org/project/opencensus-context/0.1.3/",
  "requires_dist": [
    "contextvars ; python_version >= \"3.6\" and python_version < \"3.7\""
  ],
  "requires_python": "",
  "summary": "opencensus runtime context",
  "version": "0.1.3",
  "releases": [],
  "developers": [
    "census-developers@googlegroups.com",
    "opencensus_authors"
  ],
  "kwds": "runtime_context asyncio pypi opencensus py",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_opencensus_context",
  "homepage": "https://github.com/census-instrumentation/opencensus-python/tree/master/context/opencensus-context",
  "release_count": 5,
  "dependency_ids": [
    "pypi_contextvars"
  ]
}
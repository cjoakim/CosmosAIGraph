{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: image recognition",
    "topic :: system :: logging",
    "topic :: system :: monitoring"
  ],
  "description": "<div align=\"center\">\n\n<img src=\"https://github.com/allegroai/clearml-agent/blob/master/docs/clearml_agent_logo.png?raw=true\" width=\"250px\">\n\n**clearml agent - ml-ops made easy  \nml-ops scheduler & orchestration solution supporting linux, macos and windows**\n\n[![github license](https://img.shields.io/github/license/allegroai/clearml-agent.svg)](https://img.shields.io/github/license/allegroai/clearml-agent.svg)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/clearml-agent.svg)](https://img.shields.io/pypi/pyversions/clearml-agent.svg)\n[![pypi version shields.io](https://img.shields.io/pypi/v/clearml-agent.svg)](https://img.shields.io/pypi/v/clearml-agent.svg)\n[![pypi downloads](https://pepy.tech/badge/clearml-agent/month)](https://pypi.org/project/clearml-agent/)\n[![artifact hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/allegroai)](https://artifacthub.io/packages/search?repo=allegroai)\n</div>\n\n---\n\n### clearml-agent\n\n#### *formerly known as trains agent*\n\n* run jobs (experiments) on any local or cloud based resource\n* implement optimized resource utilization policies\n* deploy execution environments with either virtualenv or fully docker containerized with zero effort\n* launch-and-forget service containers\n* [cloud autoscaling](https://clear.ml/docs/latest/docs/guides/services/aws_autoscaler)\n* [customizable cleanup](https://clear.ml/docs/latest/docs/guides/services/cleanup_service)\n* advanced [pipeline building and execution](https://clear.ml/docs/latest/docs/guides/frameworks/pytorch/notebooks/table/tabular_training_pipeline)\n\nit is a zero configuration fire-and-forget execution agent, providing a full ml/dl cluster solution.\n\n**full automation in 5 steps**\n\n1. clearml server [self-hosted](https://github.com/allegroai/clearml-server)\n   or [free tier hosting](https://app.clear.ml)\n2. `pip install clearml-agent` ([install](#installing-the-clearml-agent) the clearml agent on any gpu machine:\n   on-premises / cloud / ...)\n3. create a [job](https://clear.ml/docs/latest/docs/apps/clearml_task) or\n   add [clearml](https://github.com/allegroai/clearml) to your code with just 2 lines of code\n4. change the [parameters](#using-the-clearml-agent) in the ui & schedule for [execution](#using-the-clearml-agent) (or\n   automate with an [automl pipeline](#automl-and-orchestration-pipelines-))\n5. :chart_with_downwards_trend: :chart_with_upwards_trend: :eyes:  :beer:\n\n\"all the deep/machine-learning devops your research needs, and then some... because ain't nobody got time for that\"\n\n**try clearml now** [self hosted](https://github.com/allegroai/clearml-server)\nor [free tier hosting](https://app.clear.ml)\n<a href=\"https://app.clear.ml\"><img src=\"https://github.com/allegroai/clearml-agent/blob/master/docs/screenshots.gif?raw=true\" width=\"100%\"></a>\n\n### simple, flexible experiment orchestration\n\n**the clearml agent was built to address the dl/ml r&d devops needs:**\n\n* easily add & remove machines from the cluster\n* reuse machines without the need for any dedicated containers or images\n* **combine gpu resources across any cloud and on-prem**\n* **no need for yaml / json / template configuration of any kind**\n* **user friendly ui**\n* manageable resource allocation that can be used by researchers and engineers\n* flexible and controllable scheduler with priority support\n* automatic instance spinning in the cloud\n\n**using the clearml agent, you can now set up a dynamic cluster with \\*epsilon devops**\n\n*epsilon - because we are :triangular_ruler: and nothing is really zero work\n\n### kubernetes integration (optional)\n\nwe think kubernetes is awesome, but it should be a choice. we designed `clearml-agent` so you can run bare-metal or\ninside a pod with any mix that fits your environment.\n\nfind dockerfiles in the [docker](./docker) dir and a helm chart in https://github.com/allegroai/clearml-helm-charts\n\n#### benefits of integrating existing k8s with clearml-agent\n\n- clearml-agent adds the missing scheduling capabilities to k8s\n- allowing for more flexible automation from code\n- a programmatic interface for easier learning curve (and debugging)\n- seamless integration with ml/dl experiment manager\n- web ui for customization, scheduling & prioritization of jobs\n\n**two k8s integration flavours**\n\n- spin clearml-agent as a long-lasting service pod:\n    - use [clearml-agent](https://hub.docker.com/r/allegroai/clearml-agent) docker image\n    - map docker socket into the pod (soon replaced by [podman](https://github.com/containers/podman))\n    - allow the clearml-agent to manage sibling dockers\n    - benefits: full use of the clearml scheduling, no need to worry about wrong container images / lost pods etc.\n    - downside: sibling containers\n- kubernetes glue, map clearml jobs directly to k8s jobs:\n    - run the [clearml-k8s glue](https://github.com/allegroai/clearml-agent/blob/master/examples/k8s_glue_example.py) on\n      a k8s cpu node\n    - the clearml-k8s glue pulls jobs from the clearml job execution queue and prepares a k8s job (based on provided\n      yaml template)\n    - inside the pod itself the clearml-agent will install the job (experiment) environment and spin and monitor the\n      experiment's process\n    - benefits: kubernetes full view of all running jobs in the system\n    - downside: no real scheduling (k8s scheduler), no docker image verification (post-mortem only)\n\n### using the clearml agent\n\n**full scale hpc with a click of a button**\n\nthe clearml agent is a job scheduler that listens on job queue(s), pulls jobs, sets the job environments, executes the\njob and monitors its progress.\n\nany 'draft' experiment can be scheduled for execution by a clearml agent.\n\na previously run experiment can be put into 'draft' state by either of two methods:\n\n* using the **'reset'** action from the experiment right-click context menu in the clearml ui - this will clear any\n  results and artifacts the previous run had created.\n* using the **'clone'** action from the experiment right-click context menu in the clearml ui - this will create a new \n  'draft' experiment with the same configuration as the original experiment.\n\nan experiment is scheduled for execution using the **'enqueue'** action from the experiment right-click context menu in\nthe clearml ui and selecting the execution queue.\n\nsee [creating an experiment and enqueuing it for execution](#from-scratch).\n\nonce an experiment is enqueued, it will be picked up and executed by a clearml agent monitoring this queue.\n\nthe clearml ui workers & queues page provides ongoing execution information:\n\n- workers tab: monitor you cluster\n    - review available resources\n    - monitor machines statistics (cpu / gpu / disk / network)\n- queues tab:\n    - control the scheduling order of jobs\n    - cancel or abort job execution\n    - move jobs between execution queues\n\n#### what the clearml agent actually does\n\nthe clearml agent executes experiments using the following process:\n\n- create a new virtual environment (or launch the selected docker image)\n- clone the code into the virtual-environment (or inside the docker)\n- install python packages based on the package requirements listed for the experiment\n    - special note for pytorch: the clearml agent will automatically select the torch packages based on the cuda_version\n      environment variable of the machine\n- execute the code, while monitoring the process\n- log all stdout/stderr in the clearml ui, including the cloning and installation process, for easy debugging\n- monitor the execution and allow you to manually abort the job using the clearml ui (or, in the unfortunate case of a\n  code crash, catch the error and signal the experiment has failed)\n\n#### system design & flow\n\n<img src=\"https://github.com/allegroai/clearml-agent/blob/master/docs/clearml_architecture.png\" width=\"100%\" alt=\"clearml-architecture\">\n\n#### installing the clearml agent\n\n```bash\npip install clearml-agent\n```\n\n#### clearml agent usage examples\n\nfull interface and capabilities are available with\n\n```bash\nclearml-agent --help\nclearml-agent daemon --help\n```\n\n#### configuring the clearml agent\n\n```bash\nclearml-agent init\n```\n\nnote: the clearml agent uses a cache folder to cache pip packages, apt packages and cloned repositories. the default\nclearml agent cache folder is `~/.clearml`.\n\nsee full details in your configuration file at `~/clearml.conf`.\n\nnote: the **clearml agent** extends the **clearml** configuration file `~/clearml.conf`.\nthey are designed to share the same configuration file, see example [here](docs/clearml.conf)\n\n#### running the clearml agent\n\nfor debug and experimentation, start the clearml agent in `foreground` mode, where all the output is printed to screen:\n\n```bash\nclearml-agent daemon --queue default --foreground\n```\n\nfor actual service mode, all the stdout will be stored automatically into a temporary file (no need to pipe).\nnotice: with `--detached` flag, the *clearml-agent* will be running in the background\n\n```bash\nclearml-agent daemon --detached --queue default\n```\n\ngpu allocation is controlled via the standard os environment `nvidia_visible_devices` or `--gpus` flag (or disabled\nwith `--cpu-only`).\n\nif no flag is set, and `nvidia_visible_devices` variable doesn't exist, all gpus will be allocated for\nthe `clearml-agent`. <br>\nif `--cpu-only` flag is set, or `nvidia_visible_devices=\"none\"`, no gpu will be allocated for\nthe `clearml-agent`.\n\nexample: spin two agents, one per gpu on the same machine:\n\nnotice: with `--detached` flag, the *clearml-agent* will run in the background\n\n```bash\nclearml-agent daemon --detached --gpus 0 --queue default\nclearml-agent daemon --detached --gpus 1 --queue default\n```\n\nexample: spin two agents, pulling from dedicated `dual_gpu` queue, two gpus per agent\n\n```bash\nclearml-agent daemon --detached --gpus 0,1 --queue dual_gpu\nclearml-agent daemon --detached --gpus 2,3 --queue dual_gpu\n```\n\n##### starting the clearml agent in docker mode\n\nfor debug and experimentation, start the clearml agent in `foreground` mode, where all the output is printed to screen\n\n```bash\nclearml-agent daemon --queue default --docker --foreground\n```\n\nfor actual service mode, all the stdout will be stored automatically into a file (no need to pipe).\nnotice: with `--detached` flag, the *clearml-agent* will run in the background\n\n```bash\nclearml-agent daemon --detached --queue default --docker\n```\n\nexample: spin two agents, one per gpu on the same machine, with default `nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04`\ndocker:\n\n```bash\nclearml-agent daemon --detached --gpus 0 --queue default --docker nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04\nclearml-agent daemon --detached --gpus 1 --queue default --docker nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04\n```\n\nexample: spin two agents, pulling from dedicated `dual_gpu` queue, two gpus per agent, with default \n`nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04` docker:\n\n```bash\nclearml-agent daemon --detached --gpus 0,1 --queue dual_gpu --docker nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04\nclearml-agent daemon --detached --gpus 2,3 --queue dual_gpu --docker nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04\n```\n\n##### starting the clearml agent - priority queues\n\npriority queues are also supported, example use case:\n\nhigh priority queue: `important_jobs`, low priority queue: `default`\n\n```bash\nclearml-agent daemon --queue important_jobs default\n```\n\nthe **clearml agent** will first try to pull jobs from the `important_jobs` queue, and only if it is empty, the agent \nwill try to pull from the `default` queue.\n\nadding queues, managing job order within a queue, and moving jobs between queues, is available using the web ui, see\nexample on our [free server](https://app.clear.ml/workers-and-queues/queues)\n\n##### stopping the clearml agent\n\nto stop a **clearml agent** running in the background, run the same command line used to start the agent with `--stop`\nappended. for example, to stop the first of the above shown same machine, single gpu agents:\n\n```bash\nclearml-agent daemon --detached --gpus 0 --queue default --docker nvidia/cuda:11.0.3-cudnn8-runtime-ubuntu20.04 --stop\n```\n\n### how do i create an experiment on the clearml server? <a name=\"from-scratch\"></a>\n\n* integrate [clearml](https://github.com/allegroai/clearml) with your code\n* execute the code on your machine (manually / pycharm / jupyter notebook)\n* as your code is running, **clearml** creates an experiment logging all the necessary execution information:\n    - git repository link and commit id (or an entire jupyter notebook)\n    - git diff (we\u2019re not saying you never commit and push, but still...)\n    - python packages used by your code (including specific versions used)\n    - hyperparameters\n    - input artifacts\n\n  you now have a 'template' of your experiment with everything required for automated execution\n\n* in the clearml ui, right-click on the experiment and select 'clone'. a copy of your experiment will be created.\n* you now have a new draft experiment cloned from your original experiment, feel free to edit it\n    - change the hyperparameters\n    - switch to the latest code base of the repository\n    - update package versions\n    - select a specific docker image to run in (see docker execution mode section)\n    - or simply change nothing to run the same experiment again...\n* schedule the newly created experiment for execution: right-click the experiment and select 'enqueue'\n\n### clearml-agent services mode <a name=\"services\"></a>\n\nclearml-agent services is a special mode of clearml-agent that provides the ability to launch long-lasting jobs that\npreviously had to be executed on local / dedicated machines. it allows a single agent to launch multiple dockers (tasks)\nfor different use cases: \n* auto-scaler service (spinning instances when the need arises and the budget allows)\n* controllers (implementing pipelines and more sophisticated devops logic)\n* optimizer (such as hyperparameter optimization or sweeping)\n* application (such as interactive bokeh apps for increased data transparency)\n\nclearml-agent services mode will spin **any** task enqueued into the specified queue. every task launched by\nclearml-agent services will be registered as a new node in the system, providing tracking and transparency capabilities.\ncurrently, clearml-agent in services-mode supports cpu only configuration. clearml-agent services mode can be launched\nalongside gpu agents.\n\n```bash\nclearml-agent daemon --services-mode --detached --queue services --create-queue --docker ubuntu:18.04 --cpu-only\n```\n\n**note**: it is the user's responsibility to make sure the proper tasks are pushed into the specified queue.\n\n### automl and orchestration pipelines <a name=\"automl-pipes\"></a>\n\nthe clearml agent can also be used to implement automl orchestration and experiment pipelines in conjunction with the\nclearml package.\n\nsample automl & orchestration examples can be found in the\nclearml [example/automation](https://github.com/allegroai/clearml/tree/master/examples/automation) folder.\n\nautoml examples:\n\n- [toy keras training experiment](https://github.com/allegroai/clearml/blob/master/examples/optimization/hyper-parameter-optimization/base_template_keras_simple.py)\n    - in order to create an experiment-template in the system, this code must be executed once manually\n- [random search over the above keras experiment-template](https://github.com/allegroai/clearml/blob/master/examples/automation/manual_random_param_search_example.py)\n    - this example will create multiple copies of the keras experiment-template, with different hyperparameter\n      combinations\n\nexperiment pipeline examples:\n\n- [first step experiment](https://github.com/allegroai/clearml/blob/master/examples/automation/task_piping_example.py)\n    - this example will \"process data\", and once done, will launch a copy of the 'second step' experiment-template\n- [second step experiment](https://github.com/allegroai/clearml/blob/master/examples/automation/toy_base_task.py)\n    - in order to create an experiment-template in the system, this code must be executed once manually\n\n### license\n\napache license, version 2.0 (see the [license](https://www.apache.org/licenses/license-2.0.html) for more information)\n\n\n",
  "docs_url": null,
  "keywords": "clearml trains devops machine deep learning agent automation hpc cluster",
  "license": "apache license 2.0",
  "name": "clearml-agent",
  "package_url": "https://pypi.org/project/clearml-agent/",
  "project_url": "https://pypi.org/project/clearml-agent/",
  "project_urls": {
    "Homepage": "https://github.com/allegroai/clearml-agent"
  },
  "release_url": "https://pypi.org/project/clearml-agent/1.6.1/",
  "requires_dist": [
    "attrs (<23.0.0,>=18.0)",
    "furl (<2.2.0,>=2.0.0)",
    "jsonschema (<5.0.0,>=2.6.0)",
    "pathlib2 (<2.4.0,>=2.3.0)",
    "psutil (<5.10.0,>=3.4.2)",
    "pyparsing (<3.1.0,>=2.0.3)",
    "python-dateutil (<2.9.0,>=2.4.2)",
    "pyjwt (<2.7.0,>=2.4.0)",
    "PyYAML (<6.1,>=3.12)",
    "requests (<=2.31.0,>=2.20.0)",
    "six (<1.17.0,>=1.13.0)",
    "urllib3 (<1.27.0,>=1.21.1)",
    "virtualenv (<21,>=16)",
    "typing (<3.8.0,>=3.6.4) ; python_version < \"3.5\"",
    "enum34 (<1.2.0,>=0.9) ; python_version < \"3.6\""
  ],
  "requires_python": "",
  "summary": "clearml agent - auto-magical devops for deep learning",
  "version": "1.6.1",
  "releases": [],
  "developers": [
    "allegroai",
    "clearml@allegro.ai"
  ],
  "kwds": "clearml clearml_architecture clearml_task clearml_agent_logo cleanup_service",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_clearml_agent",
  "homepage": "https://github.com/allegroai/clearml-agent",
  "release_count": 89,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_enum34",
    "pypi_furl",
    "pypi_jsonschema",
    "pypi_pathlib2",
    "pypi_psutil",
    "pypi_pyjwt",
    "pypi_pyparsing",
    "pypi_python_dateutil",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_six",
    "pypi_typing",
    "pypi_urllib3",
    "pypi_virtualenv"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/stumpy.svg\n    :target: https://pypi.org/project/stumpy/\n    :alt: pypi version\n.. image:: https://anaconda.org/conda-forge/stumpy/badges/version.svg\n    :target: https://anaconda.org/conda-forge/stumpy\n    :alt: conda-forge version\n.. image:: https://static.pepy.tech/badge/stumpy/month\n    :target: https://pepy.tech/project/stumpy\n    :alt: pypi downloads\n.. image:: https://img.shields.io/pypi/l/stumpy.svg\n    :target: https://github.com/tdameritrade/stumpy/blob/master/license.txt\n    :alt: license\n.. image:: https://github.com/tdameritrade/stumpy/workflows/tests/badge.svg\n    :target: https://github.com/tdameritrade/stumpy/actions?query=workflow%3atests+branch%3amain\n    :alt: test status\n.. image:: https://codecov.io/gh/tdameritrade/stumpy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/tdameritrade/stumpy\n    :alt: code coverage\n.. image:: https://readthedocs.org/projects/stumpy/badge/?version=latest\n    :target: https://stumpy.readthedocs.io/\n    :alt: readthedocs status\n.. image:: https://mybinder.org/badge_logo.svg\n    :target: https://mybinder.org/v2/gh/tdameritrade/stumpy/main?filepath=notebooks\n    :alt: binder\n.. image:: http://joss.theoj.org/papers/10.21105/joss.01504/status.svg\n    :target: https://doi.org/10.21105/joss.01504\n    :alt: joss\n.. image:: https://zenodo.org/badge/184809315.svg\n    :target: https://zenodo.org/badge/latestdoi/184809315\n    :alt: doi\n.. image:: https://app.fossa.com/api/projects/custom%2b9056%2fgithub.com%2ftdameritrade%2fstumpy.svg?type=shield\n    :target: https://app.fossa.io/projects/custom%2b9056%2fgithub.com%2ftdameritrade%2fstumpy?ref=badge_shield\n    :alt: fossa\n.. image:: https://img.shields.io/twitter/follow/stumpy_dev.svg?style=social\n    :target: https://twitter.com/stumpy_dev\n    :alt: twitter\n\n|\n\n.. image:: https://raw.githubusercontent.com/tdameritrade/stumpy/master/docs/images/stumpy_logo_small.png\n    :target: https://github.com/tdameritrade/stumpy\n    :alt: stumpy logo\n\n======\nstumpy\n======\n\nstumpy is a powerful and scalable python library that efficiently computes something called the `matrix profile <https://stumpy.readthedocs.io/en/latest/tutorial_the_matrix_profile.html>`__, which is just an academic way of saying \"for every (green) subsequence within your time series, automatically identify its corresponding nearest-neighbor (grey)\":\n\n.. image:: https://github.com/tdameritrade/stumpy/blob/main/docs/images/stumpy_demo.gif?raw=true\n    :alt: stumpy animated gif\n\nwhat's important is that once you've computed your matrix profile (middle panel above) it can then be used for a variety of time series data mining tasks such as:\n\n* pattern/motif (approximately repeated subsequences within a longer time series) discovery\n* anomaly/novelty (discord) discovery\n* shapelet discovery\n* semantic segmentation \n* streaming (on-line) data\n* fast approximate matrix profiles\n* time series chains (temporally ordered set of subsequence patterns)\n* snippets for summarizing long time series\n* pan matrix profiles for selecting the best subsequence window size(s)\n* `and more ... <https://www.cs.ucr.edu/~eamonn/100_time_series_data_mining_questions__with_answers.pdf>`__\n\nwhether you are an academic, data scientist, software developer, or time series enthusiast, stumpy is straightforward to install and our goal is to allow you to get to your time series insights faster. see `documentation <https://stumpy.readthedocs.io/en/latest/>`__ for more information.\n\n-------------------------\nhow to use stumpy\n-------------------------\n\nplease see our `api documentation <https://stumpy.readthedocs.io/en/latest/api.html>`__ for a complete list of available functions and see our informative `tutorials <https://stumpy.readthedocs.io/en/latest/tutorials.html>`__ for more comprehensive example use cases. below, you will find code snippets that quickly demonstrate how to use stumpy.\n\ntypical usage (1-dimensional time series data) with `stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stump>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n    \n    if __name__ == \"__main__\":\n        your_time_series = np.random.rand(10000)\n        window_size = 50  # approximately, how many data points might be found in a pattern \n    \n        matrix_profile = stumpy.stump(your_time_series, m=window_size)\n\ndistributed usage for 1-dimensional time series data with dask distributed via `stumped <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stumped>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n    from dask.distributed import client\n\n    if __name__ == \"__main__\":\n        with client() as dask_client:\n            your_time_series = np.random.rand(10000)\n            window_size = 50  # approximately, how many data points might be found in a pattern \n    \n            matrix_profile = stumpy.stumped(dask_client, your_time_series, m=window_size)\n\ngpu usage for 1-dimensional time series data with `gpu-stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.gpu_stump>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n    from numba import cuda\n\n    if __name__ == \"__main__\":\n        your_time_series = np.random.rand(10000)\n        window_size = 50  # approximately, how many data points might be found in a pattern\n        all_gpu_devices = [device.id for device in cuda.list_devices()]  # get a list of all available gpu devices\n\n        matrix_profile = stumpy.gpu_stump(your_time_series, m=window_size, device_id=all_gpu_devices)\n\nmulti-dimensional time series data with `mstump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.mstump>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n\n    if __name__ == \"__main__\":\n        your_time_series = np.random.rand(3, 1000)  # each row represents data from a different dimension while each column represents data from the same dimension\n        window_size = 50  # approximately, how many data points might be found in a pattern\n\n        matrix_profile, matrix_profile_indices = stumpy.mstump(your_time_series, m=window_size)\n\ndistributed multi-dimensional time series data analysis with dask distributed `mstumped <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.mstumped>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n    from dask.distributed import client\n\n    if __name__ == \"__main__\":\n        with client() as dask_client:\n            your_time_series = np.random.rand(3, 1000)   # each row represents data from a different dimension while each column represents data from the same dimension\n            window_size = 50  # approximately, how many data points might be found in a pattern\n\n            matrix_profile, matrix_profile_indices = stumpy.mstumped(dask_client, your_time_series, m=window_size)\n\ntime series chains with `anchored time series chains (atsc) <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.atsc>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n    \n    if __name__ == \"__main__\":\n        your_time_series = np.random.rand(10000)\n        window_size = 50  # approximately, how many data points might be found in a pattern \n        \n        matrix_profile = stumpy.stump(your_time_series, m=window_size)\n\n        left_matrix_profile_index = matrix_profile[:, 2]\n        right_matrix_profile_index = matrix_profile[:, 3]\n        idx = 10  # subsequence index for which to retrieve the anchored time series chain for\n\n        anchored_chain = stumpy.atsc(left_matrix_profile_index, right_matrix_profile_index, idx)\n\n        all_chain_set, longest_unanchored_chain = stumpy.allc(left_matrix_profile_index, right_matrix_profile_index)\n\nsemantic segmentation with `fast low-cost unipotent semantic segmentation (fluss) <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.fluss>`__:\n\n.. code:: python\n\n    import stumpy\n    import numpy as np\n\n    if __name__ == \"__main__\":\n        your_time_series = np.random.rand(10000)\n        window_size = 50  # approximately, how many data points might be found in a pattern\n\n        matrix_profile = stumpy.stump(your_time_series, m=window_size)\n\n        subseq_len = 50\n        correct_arc_curve, regime_locations = stumpy.fluss(matrix_profile[:, 1], \n                                                        l=subseq_len, \n                                                        n_regimes=2, \n                                                        excl_factor=1\n                                                        )\n\n------------\ndependencies\n------------\n\nsupported python and numpy versions are determined according to the `nep 29 deprecation policy <https://numpy.org/neps/nep-0029-deprecation_policy.html>`__.\n\n* `numpy <http://www.numpy.org/>`__\n* `numba <http://numba.pydata.org/>`__\n* `scipy <https://www.scipy.org/>`__\n\n---------------\nwhere to get it\n---------------\n\nconda install (preferred):\n\n.. code:: bash\n    \n    conda install -c conda-forge stumpy\n\npypi install, presuming you have numpy, scipy, and numba installed: \n\n.. code:: bash\n\n    python -m pip install stumpy\n\nto install stumpy from source, see the instructions in the `documentation <https://stumpy.readthedocs.io/en/latest/install.html>`__.\n\n-------------\ndocumentation\n-------------\n\nin order to fully understand and appreciate the underlying algorithms and applications, it is imperative that you read the original publications_. for a more detailed example of how to use stumpy please consult the latest `documentation <https://stumpy.readthedocs.io/en/latest/>`__ or explore our `hands-on tutorials <https://stumpy.readthedocs.io/en/latest/tutorials.html>`__.\n\n-----------\nperformance\n-----------\n\nwe tested the performance of computing the exact matrix profile using the numba jit compiled version of the code on randomly generated time series data with various lengths (i.e., ``np.random.rand(n)``) along with different `cpu and gpu hardware resources <hardware_>`_. \n\n.. image:: https://raw.githubusercontent.com/tdameritrade/stumpy/master/docs/images/performance.png\n    :alt: stumpy performance plot\n\nthe raw results are displayed in the table below as hours:minutes:seconds.milliseconds and with a constant window size of `m = 50`. note that these reported runtimes include the time that it takes to move the data from the host to all of the gpu device(s). you may need to scroll to the right side of the table in order to see all of the runtimes.\n\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n|    i     |  n = 2\\ :sup:`i`  | gpu-stomp    | stump.2     | stump.16    | stumped.128 | stumped.256 | gpu-stump.1 | gpu-stump.2 | gpu-stump.dgx1 | gpu-stump.dgx2 |\n+==========+===================+==============+=============+=============+=============+=============+=============+=============+================+================+\n| 6        | 64                | 00:00:10.00  | 00:00:00.00 | 00:00:00.00 | 00:00:05.77 | 00:00:06.08 | 00:00:00.03 | 00:00:01.63 | nan            | nan            |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 7        | 128               | 00:00:10.00  | 00:00:00.00 | 00:00:00.00 | 00:00:05.93 | 00:00:07.29 | 00:00:00.04 | 00:00:01.66 | nan            | nan            |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 8        | 256               | 00:00:10.00  | 00:00:00.00 | 00:00:00.01 | 00:00:05.95 | 00:00:07.59 | 00:00:00.08 | 00:00:01.69 | 00:00:06.68    | 00:00:25.68    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 9        | 512               | 00:00:10.00  | 00:00:00.00 | 00:00:00.02 | 00:00:05.97 | 00:00:07.47 | 00:00:00.13 | 00:00:01.66 | 00:00:06.59    | 00:00:27.66    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 10       | 1024              | 00:00:10.00  | 00:00:00.02 | 00:00:00.04 | 00:00:05.69 | 00:00:07.64 | 00:00:00.24 | 00:00:01.72 | 00:00:06.70    | 00:00:30.49    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 11       | 2048              | nan          | 00:00:00.05 | 00:00:00.09 | 00:00:05.60 | 00:00:07.83 | 00:00:00.53 | 00:00:01.88 | 00:00:06.87    | 00:00:31.09    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 12       | 4096              | nan          | 00:00:00.22 | 00:00:00.19 | 00:00:06.26 | 00:00:07.90 | 00:00:01.04 | 00:00:02.19 | 00:00:06.91    | 00:00:33.93    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 13       | 8192              | nan          | 00:00:00.50 | 00:00:00.41 | 00:00:06.29 | 00:00:07.73 | 00:00:01.97 | 00:00:02.49 | 00:00:06.61    | 00:00:33.81    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 14       | 16384             | nan          | 00:00:01.79 | 00:00:00.99 | 00:00:06.24 | 00:00:08.18 | 00:00:03.69 | 00:00:03.29 | 00:00:07.36    | 00:00:35.23    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 15       | 32768             | nan          | 00:00:06.17 | 00:00:02.39 | 00:00:06.48 | 00:00:08.29 | 00:00:07.45 | 00:00:04.93 | 00:00:07.02    | 00:00:36.09    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 16       | 65536             | nan          | 00:00:22.94 | 00:00:06.42 | 00:00:07.33 | 00:00:09.01 | 00:00:14.89 | 00:00:08.12 | 00:00:08.10    | 00:00:36.54    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 17       | 131072            | 00:00:10.00  | 00:01:29.27 | 00:00:19.52 | 00:00:09.75 | 00:00:10.53 | 00:00:29.97 | 00:00:15.42 | 00:00:09.45    | 00:00:37.33    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 18       | 262144            | 00:00:18.00  | 00:05:56.50 | 00:01:08.44 | 00:00:33.38 | 00:00:24.07 | 00:00:59.62 | 00:00:27.41 | 00:00:13.18    | 00:00:39.30    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 19       | 524288            | 00:00:46.00  | 00:25:34.58 | 00:03:56.82 | 00:01:35.27 | 00:03:43.66 | 00:01:56.67 | 00:00:54.05 | 00:00:19.65    | 00:00:41.45    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 20       | 1048576           | 00:02:30.00  | 01:51:13.43 | 00:19:54.75 | 00:04:37.15 | 00:03:01.16 | 00:05:06.48 | 00:02:24.73 | 00:00:32.95    | 00:00:46.14    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 21       | 2097152           | 00:09:15.00  | 09:25:47.64 | 03:05:07.64 | 00:13:36.51 | 00:08:47.47 | 00:20:27.94 | 00:09:41.43 | 00:01:06.51    | 00:01:02.67    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 22       | 4194304           | nan          | 36:12:23.74 | 10:37:51.21 | 00:55:44.43 | 00:32:06.70 | 01:21:12.33 | 00:38:30.86 | 00:04:03.26    | 00:02:23.47    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 23       | 8388608           | nan          | 143:16:09.94| 38:42:51.42 | 03:33:30.53 | 02:00:49.37 | 05:11:44.45 | 02:33:14.60 | 00:15:46.26    | 00:08:03.76    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 24       | 16777216          | nan          | nan         | nan         | 14:39:11.99 | 07:13:47.12 | 20:43:03.80 | 09:48:43.42 | 01:00:24.06    | 00:29:07.84    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| nan      | 17729800          | 09:16:12.00  | nan         | nan         | 15:31:31.75 | 07:18:42.54 | 23:09:22.43 | 10:54:08.64 | 01:07:35.39    | 00:32:51.55    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 25       | 33554432          | nan          | nan         | nan         | 56:03:46.81 | 26:27:41.29 | 83:29:21.06 | 39:17:43.82 | 03:59:32.79    | 01:54:56.52    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 26       | 67108864          | nan          | nan         | nan         | 211:17:37.60| 106:40:17.17| 328:58:04.68| 157:18:30.50| 15:42:15.94    | 07:18:52.91    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| nan      | 100000000         | 291:07:12.00 | nan         | nan         | nan         | 234:51:35.39| nan         | nan         | 35:03:44.61    | 16:22:40.81    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n| 27       | 134217728         | nan          | nan         | nan         | nan         | nan         | nan         | nan         | 64:41:55.09    | 29:13:48.12    |\n+----------+-------------------+--------------+-------------+-------------+-------------+-------------+-------------+-------------+----------------+----------------+\n\n^^^^^^^^^^^^^^^^^^\nhardware resources\n^^^^^^^^^^^^^^^^^^\n\n.. _hardware:\n\ngpu-stomp: these results are reproduced from the original `matrix profile ii <https://ieeexplore.ieee.org/abstract/document/7837898>`__ paper - nvidia tesla k80 (contains 2 gpus) and serves as the performance benchmark to compare against.\n    \nstump.2: `stumpy.stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stump>`__ executed with 2 cpus in total - 2x intel(r) xeon(r) cpu e5-2650 v4 @ 2.20ghz processors parallelized with numba on a single server without dask.\n\nstump.16: `stumpy.stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stump>`__ executed with 16 cpus in total - 16x intel(r) xeon(r) cpu e5-2650 v4 @ 2.20ghz processors parallelized with numba on a single server without dask.\n\nstumped.128: `stumpy.stumped <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stumped>`__ executed with 128 cpus in total - 8x intel(r) xeon(r) cpu e5-2650 v4 @ 2.20ghz processors x 16 servers, parallelized with numba, and distributed with dask distributed.\n\nstumped.256: `stumpy.stumped <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.stumped>`__ executed with 256 cpus in total - 8x intel(r) xeon(r) cpu e5-2650 v4 @ 2.20ghz processors x 32 servers, parallelized with numba, and distributed with dask distributed.\n\ngpu-stump.1: `stumpy.gpu_stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.gpu_stump>`__ executed with 1x nvidia geforce gtx 1080 ti gpu, 512 threads per block, 200w power limit, compiled to cuda with numba, and parallelized with python multiprocessing\n\ngpu-stump.2: `stumpy.gpu_stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.gpu_stump>`__ executed with 2x nvidia geforce gtx 1080 ti gpu, 512 threads per block, 200w power limit, compiled to cuda with numba, and parallelized with python multiprocessing\n\ngpu-stump.dgx1: `stumpy.gpu_stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.gpu_stump>`__ executed with 8x nvidia tesla v100, 512 threads per block, compiled to cuda with numba, and parallelized with python multiprocessing\n\ngpu-stump.dgx2: `stumpy.gpu_stump <https://stumpy.readthedocs.io/en/latest/api.html#stumpy.gpu_stump>`__ executed with 16x nvidia tesla v100, 512 threads per block, compiled to cuda with numba, and parallelized with python multiprocessing\n\n-------------\nrunning tests\n-------------\n\ntests are written in the ``tests`` directory and processed using `pytest <https://docs.pytest.org/en/latest/>`__ and requires ``coverage.py`` for code coverage analysis. tests can be executed with:\n\n.. code:: bash\n\n    ./test.sh\n\n--------------\npython version\n--------------\n\nstumpy supports `python 3.7+ <https://python3statement.org/>`__ and, due to the use of unicode variable names/identifiers, is not compatible with python 2.x. given the small dependencies, stumpy may work on older versions of python but this is beyond the scope of our support and we strongly recommend that you upgrade to the most recent version of python.\n\n------------\ngetting help\n------------\n\nfirst, please check the `discussions <https://github.com/tdameritrade/stumpy/discussions>`__ and `issues <https://github.com/tdameritrade/stumpy/issues?utf8=%e2%9c%93&q=>`__ on github to see if your question has already been answered there. if no solution is available there feel free to open a new discussion or issue and the authors will attempt to respond in a reasonably timely fashion.\n\n------------\ncontributing\n------------\n\nwe welcome `contributions <https://github.com/tdameritrade/stumpy/blob/master/contributing.md>`__ in any form! assistance with documentation, particularly expanding tutorials, is always welcome. to contribute please `fork the project <https://github.com/tdameritrade/stumpy/fork>`__, make your changes, and submit a pull request. we will do our best to work through any issues with you and get your code merged into the main branch.\n\n------\nciting\n------\n\nif you have used this codebase in a scientific publication and wish to cite it, please use the `journal of open source software article <http://joss.theoj.org/papers/10.21105/joss.01504>`__.\n\n    s.m. law, (2019). *stumpy: a powerful and scalable python library for time series data mining*. journal of open source software, 4(39), 1504.\n\n.. code:: bibtex\n\n    @article{law2019stumpy,\n      author  = {law, sean m.},\n      title   = {{stumpy: a powerful and scalable python library for time series data mining}},\n      journal = {{the journal of open source software}},\n      volume  = {4},\n      number  = {39},\n      pages   = {1504},\n      year    = {2019}\n    }\n\n----------\nreferences\n----------\n\n.. _publications:\n\nyeh, chin-chia michael, et al. (2016) matrix profile i: all pairs similarity joins for time series: a unifying view that includes motifs, discords, and shapelets. icdm:1317-1322. `link <https://ieeexplore.ieee.org/abstract/document/7837992>`__\n\nzhu, yan, et al. (2016) matrix profile ii: exploiting a novel algorithm and gpus to break the one hundred million barrier for time series motifs and joins. icdm:739-748. `link <https://ieeexplore.ieee.org/abstract/document/7837898>`__\n\nyeh, chin-chia michael, et al. (2017) matrix profile vi: meaningful multidimensional motif discovery. icdm:565-574. `link <https://ieeexplore.ieee.org/abstract/document/8215529>`__ \n\nzhu, yan, et al. (2017) matrix profile vii: time series chains: a new primitive for time series data mining. icdm:695-704. `link <https://ieeexplore.ieee.org/abstract/document/8215542>`__\n\ngharghabi, shaghayegh, et al. (2017) matrix profile viii: domain agnostic online semantic segmentation at superhuman performance levels. icdm:117-126. `link <https://ieeexplore.ieee.org/abstract/document/8215484>`__\n\nzhu, yan, et al. (2017) exploiting a novel algorithm and gpus to break the ten quadrillion pairwise comparisons barrier for time series motifs and joins. kais:203-236. `link <https://link.springer.com/article/10.1007%2fs10115-017-1138-x>`__\n\nzhu, yan, et al. (2018) matrix profile xi: scrimp++: time series motif discovery at interactive speeds. icdm:837-846. `link <https://ieeexplore.ieee.org/abstract/document/8594908>`__\n\nyeh, chin-chia michael, et al. (2018) time series joins, motifs, discords and shapelets: a unifying view that exploits the matrix profile. data min knowl disc:83-123. `link <https://link.springer.com/article/10.1007/s10618-017-0519-9>`__\n\ngharghabi, shaghayegh, et al. (2018) \"matrix profile xii: mpdist: a novel time series distance measure to allow data mining in more challenging scenarios.\" icdm:965-970. `link <https://ieeexplore.ieee.org/abstract/document/8594928>`__\n\nzimmerman, zachary, et al. (2019) matrix profile xiv: scaling time series motif discovery with gpus to break a quintillion pairwise comparisons a day and beyond. socc '19:74-86. `link <https://dl.acm.org/doi/10.1145/3357223.3362721>`__\n\nakbarinia, reza, and betrand cloez. (2019) efficient matrix profile computation using different distance functions. arxiv:1901.05708. `link <https://arxiv.org/abs/1901.05708>`__\n\nkamgar, kaveh, et al. (2019) matrix profile xv: exploiting time series consensus motifs to find structure in time series sets. icdm:1156-1161. `link <https://ieeexplore.ieee.org/abstract/document/8970797>`__\n\n-------------------\nlicense & trademark\n-------------------\n\n| stumpy\n| copyright 2019 td ameritrade. released under the terms of the 3-clause bsd license.\n| stumpy is a trademark of td ameritrade ip company, inc. all rights reserved.\n",
  "docs_url": null,
  "keywords": "time series matrix profile motif discord",
  "license": "3-clause bsd license",
  "name": "stumpy",
  "package_url": "https://pypi.org/project/stumpy/",
  "project_url": "https://pypi.org/project/stumpy/",
  "project_urls": {
    "Homepage": "https://github.com/TDAmeritrade/stumpy"
  },
  "release_url": "https://pypi.org/project/stumpy/1.12.0/",
  "requires_dist": [
    "numpy >=1.18",
    "scipy >=1.5",
    "numba >=0.55.2",
    "pandas >=0.20.0 ; extra == 'ci'",
    "dask >=1.2.2 ; extra == 'ci'",
    "distributed >=1.28.1 ; extra == 'ci'",
    "coverage >=4.5.3 ; extra == 'ci'",
    "flake8 >=3.7.7 ; extra == 'ci'",
    "flake8-docstrings >=1.5.0 ; extra == 'ci'",
    "black >=22.1.0 ; extra == 'ci'",
    "pytest >=4.4.1 ; extra == 'ci'",
    "isort >=5.11.0 ; extra == 'ci'"
  ],
  "requires_python": "",
  "summary": "a powerful and scalable library that can be used for a variety of time series data mining tasks",
  "version": "1.12.0",
  "releases": [],
  "developers": [
    "sean_m",
    "seanmylaw@gmail.com"
  ],
  "kwds": "tutorial_the_matrix_profile matrix_profile matrix_profile_indices right_matrix_profile_index badge_shield",
  "license_kwds": "3-clause bsd license",
  "libtype": "pypi",
  "id": "pypi_stumpy",
  "homepage": "https://github.com/tdameritrade/stumpy",
  "release_count": 28,
  "dependency_ids": [
    "pypi_black",
    "pypi_coverage",
    "pypi_dask",
    "pypi_distributed",
    "pypi_flake8",
    "pypi_flake8_docstrings",
    "pypi_isort",
    "pypi_numba",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pytest",
    "pypi_scipy"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: asyncio",
    "framework :: pydantic",
    "framework :: pydantic :: 2",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: isc license (iscl)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: database",
    "topic :: database :: front-ends",
    "topic :: internet",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: object brokering",
    "typing :: typed"
  ],
  "description": "<b><h1>odmantic</h1></b>\n\n[![build](https://github.com/art049/odmantic/workflows/build/badge.svg)](https://github.com/art049/odmantic/actions?query=workflow%3a%22build%22+branch%3amaster)\n[![coverage](https://codecov.io/gh/art049/odmantic/branch/master/graph/badge.svg?token=3nyzk14stz)](https://codecov.io/gh/art049/odmantic)\n![python-3.8-3.9-3.10-3.11-3.12](https://img.shields.io/badge/python-3.8%20|%203.9%20|%203.10%20|%203.11%20|%203.12-informational.svg)\n[![package version](https://img.shields.io/pypi/v/odmantic?color=%2334d058&label=pypi)](https://pypi.org/project/odmantic)\n[![codspeed](https://img.shields.io/endpoint?url=https://codspeed.io/badge.json)](https://codspeed.io/art049/odmantic)\n\n---\n\n**documentation**: [https://art049.github.io/odmantic/](https://art049.github.io/odmantic/)\n\n---\n\nsync and async odm (object document mapper) for <a href=\"https://www.mongodb.com/\"\ntarget=\"_blank\">mongodb</a> based on standard python type hints. built on top of <a\nhref=\"https://pydantic-docs.helpmanual.io/\" target=\"_blank\">pydantic</a> for model\ndefinition and validation.\n\ncore features:\n\n- **simple**: define your model by typing your fields using python types, build queries\n  using python comparison operators\n\n- **developer experience**: field/method autocompletion, type hints, data validation,\n  performing database operations with a functional api\n\n- **fully typed**: leverage static analysis to reduce runtime issues\n\n- **asyncio support**: works well with asgi frameworks (<a href=\"https://fastapi.tiangolo.com/\"\n  target=\"_blank\">fastapi</a>, <a href=\"https://pgjones.gitlab.io/quart/\"\n  target=\"_blank\">quart</a>, <a href=\"https://sanicframework.org/\"\n  target=\"_blank\">sanic</a>, <a href=\"https://www.starlette.io/\"\n  target=\"_blank\">starlette</a>, ...) but works also perfectly in synchronous environments\n\n- **serialization**: built-in json serialization and json schema generation\n\n## requirements\n\n**python**: 3.8 and later (tested against 3.8, 3.9, 3.10 and 3.11)\n\n**pydantic**: 2.5 and later\n\n**mongodb**: 4.0 and later\n\n## installation\n\n```shell\npip install odmantic\n```\n\n## example\n\n> to enjoy an async context without any code boilerplate, you can reproduce the\n> following steps using the asyncio repl (only for python 3.8+).\n>\n> ```\n> python3.8 -m asyncio\n> ```\n>\n> if you are using an earlier version of python, you can use <a\n> href=\"https://ipython.readthedocs.io/en/stable/install/index.html\"\n> target=\"_blank\">ipython</a> which provide an autoawait feature (starting from python\n> 3.6).\n\n### define your first model\n\n```python\nfrom typing import optional\n\nfrom odmantic import field, model\n\n\nclass publisher(model):\n    name: str\n    founded: int = field(ge=1440)\n    location: optional[str] = none\n```\n\nby defining the `publisher` class, we've just created an odmantic model \ud83c\udf89. in this\nexample, the model will represent book publishers.\n\nthis model contains three fields:\n\n- `name`: this is the name of the publisher. this is a simple string field without any\n  specific validation, but it will be required to build a new publisher.\n\n- `founded`: this is the year of foundation of the publisher. since the printing press was invented in 1440, it would be handy to allow only values above 1440. the\n  `ge` keyword argument passed to the field is exactly doing this. the model will\n  require a founded value greater or equal than 1440.\n\n- `location`: this field will contain the country code of the publisher. defining this\n  field as `optional` with a `none` default value makes it a non required field that\n  will be set automatically when not specified.\n\nthe collection name has been defined by odmantic as well. in this case it will be\n`publisher`.\n\n### create some instances\n\n```python\ninstances = [\n    publisher(name=\"harpercollins\", founded=1989, location=\"us\"),\n    publisher(name=\"hachette livre\", founded=1826, location=\"fr\"),\n    publisher(name=\"lulu\", founded=2002)\n]\n```\n\nwe defined three instances of the publisher model. they all have a `name` property as it\nwas required. all the foundations years are later than 1440. the last publisher has no\nlocation specified so by default this field is set to `none` (it will be stored as\n`null` in the database).\n\nfor now, those instances only exists locally. we will persist them in a database in the\nnext step.\n\n### populate the database with your instances\n\n> for the next steps, you'll need to start a local mongodb server.the easiest way is\n> to use docker. simply run the next command in a terminal (closing the terminal will\n> terminate the mongodb instance and remove the container).\n>\n> ```shell\n> docker run --rm -p 27017:27017 mongo\n> ```\n\nfirst, let's connect to the database using the engine. in odmantic, every database\noperation is performed using the engine object.\n\n```python\nfrom odmantic import aioengine\n\nengine = aioengine()\n```\n\nby default, the `aioengine` (stands for asyncioengine) automatically tries to connect to a\nmongodb instance running locally (on port 27017). since we didn't provide any database name, it will use\nthe database named `test` by default.\n\nthe next step is to persist the instances we created before. we can perform this\noperation using the `aioengine.save_all` method.\n\n```python\nawait engine.save_all(instances)\n```\n\nmost of the engine i/o methods are asynchronous, hence the `await` keyword used here.\nonce the operation is complete, we should be able to see our created documents in the\ndatabase. you can use <a href=\"https://www.mongodb.com/products/compass\"\ntarget=\"_blank\">compass</a> or <a href=\"https://robomongo.org/\"\ntarget=\"_blank\">robomongo</a> if you'd like to have a graphical interface.\n\nanother possibility is to use `mongo` cli directly:\n\n```shell\nmongo --eval \"db.publisher.find({})\"\n```\n\noutput:\n\n```js\nconnecting to: mongodb://127.0.0.1:27017\n{\n  \"_id\": objectid(\"5f67b331514d6855bc5c54c9\"),\n  \"founded\": 1989,\n  \"location\": \"us\",\n  \"name\": \"harpercollins\"\n},\n{\n  \"_id\": objectid(\"5f67b331514d6855bc5c54ca\"),\n  \"founded\":1826,\n  \"location\": \"fr\",\n  \"name\": \"hachette livre\"\n},\n{\n  \"_id\": objectid(\"5f67b331514d6855bc5c54cb\"),\n  \"founded\": 2002,\n  \"location\": null,\n  \"name\": \"lulu\"\n}\n```\n\nthe created instances are stored in the `test` database under the `publisher` collection.\n\nwe can see that an `_id` field has been added to each document. mongodb need this field\nto act as a primary key. actually, this field is added by odmantic and you can access it\nunder the name `id`.\n\n```python\nprint(instances[0].id)\n#> objectid(\"5f67b331514d6855bc5c54c9\")\n```\n\n### find instances matching a criteria\n\nsince we now have some documents in the database, we can start building some queries.\n\nfirst, let's find publishers created before the 2000s:\n\n```python\nearly_publishers = await engine.find(publisher, publisher.founded <= 2000)\nprint(early_publishers)\n#> [publisher(name=\"harpercollins\", founded=1989, location=\"us),\n#>  publisher(name=\"hachette livre\", founded=1826, location=\"fr\")]\n```\n\nhere, we called the `engine.find` method. the first argument we need to specify is the\nmodel class we want to query on (in our case `publisher`). the second argument is the\nactual query. similarly to <a href=\"https://www.sqlalchemy.org/\"\ntarget=\"_blank\">sqlalchemy</a>, you can build odmantic queries using the regular python\noperators.\n\nwhen awaited, the `engine.find` method will return the list of matching instances stored\nin the database.\n\nanother possibility is to query for at most one instance. for example, if we want to\nretrieve a publisher from canada (ca):\n\n```python\nca_publisher = await engine.find_one(publisher, publisher.location == \"ca\")\nprint(ca_publisher)\n#> none\n```\n\nhere the result is `none` because no matching instances have been found in the database.\nthe `engine.find_one` method returns an instance if one exists in the database\notherwise, it will return `none`.\n\n### modify an instance\n\nfinally, let's edit some instances. for example, we can set the `location` for the\npublisher named `lulu`.\nfirst, we need to gather the instance from the database:\n\n```python\nlulu = await engine.find_one(publisher, publisher.name == \"lulu\")\nprint(lulu)\n#> publisher(name=\"lulu\", founded=2002, location=none)\n```\n\nwe still have the same instance, with no location set. we can change this field:\n\n```python\nlulu.location = \"us\"\nprint(lulu)\n#> publisher(name=\"lulu\", founded=2002, location=\"us)\n```\n\nthe location has been changed locally but the last step to persist this change is to\nsave the document:\n\n```python\nawait engine.save(lulu)\n```\n\nwe can now check the database state:\n\n```shell\nmongo --eval \"db.publisher.find({name: 'lulu'})\"\n```\n\noutput:\n\n```json hl_lines=\"5\"\nconnecting to: mongodb://127.0.0.1:27017\n{\n  \"_id\": objectid(\"5f67b331514d6855bc5c54cb\"),\n  \"founded\": 2002,\n  \"location\": \"us\",\n  \"name\": \"lulu\"\n}\n```\n\nthe document have been successfully updated !\n\nnow, what if we would like to change the foundation date with an invalid one (before 1440) ?\n\n```python\nlulu.founded = 1000\n#> validationerror: 1 validation error for publisher\n#> founded\n#>   ensure this value is greater than 1440\n#>   (type=value_error.number.not_gt; limit_value=1440)\n```\n\nthis will raise an exception as it's not matching the model definition.\n\n### next steps\n\nif you already have experience with pydantic and fastapi, the [usage with fastapi](https://art049.github.io/odmantic/usage_fastapi/) example sould be interesting for you to get kickstarted.\n\notherwise, to get started on more advanced practices like relations and building more\nadvanced queries, you can directly check the other sections of the\n[documentation](https://art049.github.io/odmantic/).\n\nif you wish to contribute to the project (thank you! :smiley:), you can have a look to the\n[contributing](https://art049.github.io/odmantic/contributing/) section of the\ndocumentation.\n\n## license\n\nthis project is licensed under the terms of the <a\nhref=\"https://github.com/art049/odmantic/blob/master/license\" target=\"_blank\">isc license</a>.\n",
  "docs_url": null,
  "keywords": "mongodb,asyncio,types,pydantic,motor",
  "license": "",
  "name": "odmantic",
  "package_url": "https://pypi.org/project/odmantic/",
  "project_url": "https://pypi.org/project/odmantic/",
  "project_urls": {
    "Documentation": "https://art049.github.io/odmantic",
    "Source": "https://github.com/art049/odmantic"
  },
  "release_url": "https://pypi.org/project/odmantic/1.0.0/",
  "requires_dist": [
    "pydantic >=2.5.2",
    "typing-extensions >= 4.2.0; python_version<'3.11'",
    "motor >=3.1.1",
    "pymongo >=4.1.0",
    "ipython ~= 7.16.1 ; extra == \"dev\"",
    "pydocstyle[toml] ~= 6.3.0 ; extra == \"doc\"",
    "mkdocs-material ~= 9.5.2 ; extra == \"doc\"",
    "mkdocstrings[python] ~= 0.24.0 ; extra == \"doc\"",
    "mkdocs-macros-plugin ~= 1.0.4 ; extra == \"doc\"",
    "fastapi >=0.100.0 ; extra == \"fastapi\"",
    "ruff ~= 0.0.277 ; extra == \"test\"",
    "mypy ~= 1.4.1 ; extra == \"test\"",
    "pytest ~= 7.0 ; extra == \"test\"",
    "pytest-xdist ~= 2.1.0 ; extra == \"test\"",
    "pytest-asyncio ~= 0.16.0 ; extra == \"test\"",
    "pytest-sugar ~= 0.9.5 ; extra == \"test\"",
    "inline-snapshot ~= 0.6.0 ; extra == \"test\"",
    "async-asgi-testclient ~= 1.4.11 ; extra == \"test\"",
    "asyncmock ~= 0.4.2 ; extra == \"test\"",
    "coverage[toml] ~= 6.2 ; extra == \"test\"",
    "pytz ~= 2023.3 ; extra == \"test\"",
    "types-pytz ~= 2023.3.0.0 ; extra == \"test\"",
    "darglint ~= 1.8.1 ; extra == \"test\"",
    "uvicorn ~= 0.17.0 ; extra == \"test\"",
    "fastapi >=0.104.0 ; extra == \"test\"",
    "requests ~= 2.24 ; extra == \"test\"",
    "typer ~= 0.4.1 ; extra == \"test\"",
    "semver ~= 2.13.0 ; extra == \"test\"",
    "pytest-benchmark ~= 4.0.0 ; extra == \"test\"",
    "pytest-codspeed ~= 2.1.0 ; extra == \"test\"",
    "httpx ~= 0.24.1 ; extra == \"test\""
  ],
  "requires_python": ">=3.8",
  "summary": "odmantic, an asyncio mongodb object document mapper for python using type hints ",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "arthur.pastel@gmail.com"
  ],
  "kwds": "badge mongo mongodb python3 workflows",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_odmantic",
  "homepage": "",
  "release_count": 19,
  "dependency_ids": [
    "pypi_async_asgi_testclient",
    "pypi_asyncmock",
    "pypi_coverage",
    "pypi_darglint",
    "pypi_fastapi",
    "pypi_httpx",
    "pypi_inline_snapshot",
    "pypi_ipython",
    "pypi_mkdocs_macros_plugin",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings",
    "pypi_motor",
    "pypi_mypy",
    "pypi_pydantic",
    "pypi_pydocstyle",
    "pypi_pymongo",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_benchmark",
    "pypi_pytest_codspeed",
    "pypi_pytest_sugar",
    "pypi_pytest_xdist",
    "pypi_pytz",
    "pypi_requests",
    "pypi_ruff",
    "pypi_semver",
    "pypi_typer",
    "pypi_types_pytz",
    "pypi_typing_extensions",
    "pypi_uvicorn"
  ]
}
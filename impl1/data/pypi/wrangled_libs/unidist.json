{
  "classifiers": [],
  "description": "<p align=\"center\">\n    <a href=\"https://unidist.readthedocs.io\"><img alt=\"\" src=\"https://github.com/modin-project/unidist/blob/d17f0da551846277c9d56a7f5e7d8f244c09d660/docs/img/unidist-logo-simple-628x128.png?raw=true\"></a>\n</p>\n<h2 align=\"center\">unified distributed execution</h2>\n\n<p align=\"center\">\n<a href=\"https://github.com/modin-project/unidist/actions\"><img src=\"https://github.com/modin-project/unidist/actions/workflows/ci.yml/badge.svg\" align=\"center\"></a>\n<a href=\"https://unidist.readthedocs.io/en/latest/?badge=latest\"><img alt=\"\" src=\"https://readthedocs.org/projects/unidist/badge/?version=latest\" align=\"center\"></a>\n<a href=\"https://pypi.org/project/unidist/0.5.1/\"><img src=\"https://img.shields.io/badge/pypi-0.5.1-blue.svg\" alt=\"pypi version\" align=\"center\"></a>\n<a href=\"https://pepy.tech/project/unidist\"><img src=\"https://static.pepy.tech/personalized-badge/unidist?period=total&units=international_system&left_color=black&right_color=blue&left_text=downloads\" align=\"center\"></a>\n</p>\n\n### what is unidist?\n\nunidist is a framework that is intended to provide the unified api for distributed execution by supporting various performant execution backends. at the moment the following backends are supported under the hood:\n\n* [mpi](https://www.mpi-forum.org/)\n* [dask distributed](https://distributed.dask.org/en/latest/)\n* [ray](https://docs.ray.io/en/master/index.html)\n* [python multiprocessing](https://docs.python.org/3/library/multiprocessing.html)\n\nunidist is designed to work in a [task-based parallel](https://en.wikipedia.org/wiki/task_parallelism) model.\n\nalso, the framework provides a python sequential backend (`pyseq`), that can be used for debugging.\n\n### installation\n\n#### using pip\n\nunidist can be installed with `pip` on linux, windows and macos:\n\n```bash\npip install unidist # install unidist with dependencies for python multiprocessing and python sequential backends\n```\n\nunidist can also be used with mpi, dask or ray execution backend.\nif you don't have mpi, dask or ray installed, you will need to install unidist with one of the targets:\n\n```bash\npip install unidist[all] # install unidist with dependencies for all the backends\npip install unidist[mpi] # install unidist with dependencies for mpi backend\npip install unidist[dask] # install unidist with dependencies for dask backend\npip install unidist[ray] # install unidist with dependencies for ray backend\n```\n\nunidist automatically detects which execution backends are installed and uses that for scheduling computation.\n\n**note:** there are different mpi implementations, each of which can be used as a backend in unidist.\nmapping `unidist[mpi]` installs `mpi4py` package, which is just a python wrapper for mpi.\nto enable unidist on mpi execution you need to have a working mpi implementation and certain software installed beforehand.\nrefer to [installation](https://mpi4py.readthedocs.io/en/latest/install.html) page of the `mpi4py` documentation for details.\nalso, you can find some instructions on [mpi backend](https://unidist.readthedocs.io/en/latest/optimization_notes/mpi.html) page.\n\n#### using conda\n\nfor installing unidist with dependencies for mpi and dask execution backends into a conda environment\nthe following command should be used:\n\n```bash\nconda install unidist-mpi unidist-dask -c conda-forge\n```\n\nall set of backends could be available in a conda environment by specifying:\n\n```bash\nconda install unidist-all -c conda-forge\n```\n\nor explicitly:\n\n```bash\nconda install unidist-mpi unidist-dask unidist-ray -c conda-forge\n```\n\n**note:** there are different mpi implementations, each of which can be used as a backend in unidist.\nby default, mapping `unidist-mpi` installs a default mpi implementation, which comes with `mpi4py` package and is ready to use.\nthe conda dependency solver decides on which mpi implementation is to be installed. if you want to use a specific version of mpi,\nyou can install the core dependencies for mpi backend and the specific version of mpi as `conda install unidist-mpi <mpi>`\nas shown in the [installation](https://mpi4py.readthedocs.io/en/latest/install.html)\npage of `mpi4py` documentation. that said, it is highly encouraged to use your own mpi binaries as stated in the\n[using external mpi libraries](https://conda-forge.org/docs/user/tipsandtricks.html#using-external-message-passing-interface-mpi-libraries)\nsection of the conda-forge documentation in order to get ultimate performance.\n\nfor more information refer to [installation](https://unidist.readthedocs.io/en/latest/installation.html) section.\n\n#### choosing an execution backend\n\nif you want to choose a specific execution backend to run on,\nyou can set the environment variable `unidist_backend` and unidist will do computation with that backend:\n\n```bash\nexport unidist_backend=mpi  # unidist will use mpi\nexport unidist_backend=dask  # unidist will use dask\nexport unidist_backend=ray  # unidist will use ray\n```\n\nthis can also be done within a notebook/interpreter before you initialize unidist:\n\n```python\nfrom unidist.config import backend\n\nbackend.put(\"mpi\")  # unidist will use mpi\nbackend.put(\"dask\")  # unidist will use dask\nbackend.put(\"ray\")  # unidist will use ray\n```\n\nif you have installed all the execution backends and haven't specified any of the execution backends, mpi is used by default.\ncurrently, almost all mpi implementations require ``mpiexec`` command to be used when running an mpi program.\nif you use a backend other than mpi, you run a program as a regular python script (see below).\n\n#### usage\n\n```python\n# script.py\n\nimport unidist\nunidist.init() # mpi backend is used by default\n\n@unidist.remote\ndef foo(x):\n    return x * x\n\n# this will run `foo` on a pool of workers in parallel;\n# `refs` will contain object references to actual data\nrefs = [foo.remote(i) for i in range(5)]\n# to get the data call `unidist.get(...)`\nprint(unidist.get(refs))\n```\n\nrun the `script.py` with:\n\n```bash\n$ mpiexec -n 1 python script.py  # for mpi backend\n# $ python script.py  # for any other supported backend\n[0, 1, 4, 9, 16]  # output\n```\n\nfor more examples refer to [getting started](https://unidist.readthedocs.io/en/latest/getting_started.html) section\nin our documentation.\n\n### powered by unidist\n\nunidist is meant to be used not only directly by users to get better performance in their workloads,\nbut also be a core component of other libraries to power those with the performant execution backends.\nrefer to `libraries powered by unidist` section of [using unidist](https://unidist.readthedocs.io/en/latest/using_unidist/index.html) page\nto get more information on which libraries have already been using unidist.\n\n### full documentation\n\nvisit the complete documentation on readthedocs: https://unidist.readthedocs.io.\n",
  "docs_url": "https://pythonhosted.org/unidist/",
  "keywords": "",
  "license": "apache-2.0",
  "name": "unidist",
  "package_url": "https://pypi.org/project/unidist/",
  "project_url": "https://pypi.org/project/unidist/",
  "project_urls": {
    "Homepage": "https://github.com/modin-project/unidist"
  },
  "release_url": "https://pypi.org/project/unidist/0.5.1/",
  "requires_dist": [
    "packaging",
    "cloudpickle",
    "ray[default] >=1.13.0 ; extra == 'all'",
    "pydantic <2 ; extra == 'all'",
    "dask[complete] >=2.22.0 ; extra == 'all'",
    "distributed >=2.22.0 ; extra == 'all'",
    "mpi4py >=3.0.3 ; extra == 'all'",
    "msgpack >=1.0.0 ; extra == 'all'",
    "psutil ; extra == 'all'",
    "dask[complete] >=2.22.0 ; extra == 'dask'",
    "distributed >=2.22.0 ; extra == 'dask'",
    "mpi4py >=3.0.3 ; extra == 'mpi'",
    "msgpack >=1.0.0 ; extra == 'mpi'",
    "psutil ; extra == 'mpi'",
    "ray[default] >=1.13.0 ; extra == 'ray'",
    "pydantic <2 ; extra == 'ray'"
  ],
  "requires_python": ">=3.7.1",
  "summary": "unified distributed execution",
  "version": "0.5.1",
  "releases": [],
  "developers": [],
  "kwds": "logo href unidist html unidist_backend",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_unidist",
  "homepage": "https://github.com/modin-project/unidist",
  "release_count": 9,
  "dependency_ids": [
    "pypi_cloudpickle",
    "pypi_dask",
    "pypi_distributed",
    "pypi_mpi4py",
    "pypi_msgpack",
    "pypi_packaging",
    "pypi_psutil",
    "pypi_pydantic",
    "pypi_ray"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: information analysis"
  ],
  "description": "<div align=\"center\">\n\n<img src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/fabric_logo.png\" width=\"400px\">\n\n**fabric is the fast and lightweight way to scale pytorch models without boilerplate**\n\n______________________________________________________________________\n\n<p align=\"center\">\n  <a href=\"https://lightning.ai/\">website</a> \u2022\n  <a href=\"https://lightning.ai/docs/fabric/\">docs</a> \u2022\n  <a href=\"#getting-started\">getting started</a> \u2022\n  <a href=\"#faq\">faq</a> \u2022\n  <a href=\"#asking-for-help\">help</a> \u2022\n  <a href=\"https://discord.gg/vptpczkgna\">discord</a>\n</p>\n\n[![pypi - python version](https://img.shields.io/pypi/pyversions/lightning_fabric)](https://pypi.org/project/lightning_fabric/)\n[![pypi status](https://badge.fury.io/py/lightning_fabric.svg)](https://badge.fury.io/py/lightning_fabric)\n[![pypi - downloads](https://img.shields.io/pypi/dm/lightning-fabric)](https://pepy.tech/project/lightning-fabric)\n[![conda](https://img.shields.io/conda/v/conda-forge/lightning_fabric?label=conda&color=success)](https://anaconda.org/conda-forge/lightning_fabric)\n\n</div>\n\n# lightning fabric: expert control.\n\nrun on any device at any scale with expert-level control over pytorch training loop and scaling strategy. you can even write your own trainer.\n\nfabric is designed for the most complex models like foundation model scaling, llms, diffusion, transformers, reinforcement learning, active learning. of any size.\n\n<table>\n<tr>\n<th>what to change</th>\n<th>resulting fabric code (copy me!)</th>\n</tr>\n<tr>\n<td>\n<sub>\n\n```diff\n+ import lightning as l\n  import torch; import torchvision as tv\n\n  dataset = tv.datasets.cifar10(\"data\", download=true,\n                                train=true,\n                                transform=tv.transforms.totensor())\n\n+ fabric = l.fabric()\n+ fabric.launch()\n\n  model = tv.models.resnet18()\n  optimizer = torch.optim.sgd(model.parameters(), lr=0.001)\n- device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n- model.to(device)\n+ model, optimizer = fabric.setup(model, optimizer)\n\n  dataloader = torch.utils.data.dataloader(dataset, batch_size=8)\n+ dataloader = fabric.setup_dataloaders(dataloader)\n\n  model.train()\n  num_epochs = 10\n  for epoch in range(num_epochs):\n      for batch in dataloader:\n          inputs, labels = batch\n-         inputs, labels = inputs.to(device), labels.to(device)\n          optimizer.zero_grad()\n          outputs = model(inputs)\n          loss = torch.nn.functional.cross_entropy(outputs, labels)\n-         loss.backward()\n+         fabric.backward(loss)\n          optimizer.step()\n```\n\n</sub>\n<td>\n<sub>\n\n```python\nimport lightning as l\nimport torch; import torchvision as tv\n\ndataset = tv.datasets.cifar10(\"data\", download=true,\n                              train=true,\n                              transform=tv.transforms.totensor())\n\nfabric = l.fabric()\nfabric.launch()\n\nmodel = tv.models.resnet18()\noptimizer = torch.optim.sgd(model.parameters(), lr=0.001)\nmodel, optimizer = fabric.setup(model, optimizer)\n\ndataloader = torch.utils.data.dataloader(dataset, batch_size=8)\ndataloader = fabric.setup_dataloaders(dataloader)\n\nmodel.train()\nnum_epochs = 10\nfor epoch in range(num_epochs):\n    for batch in dataloader:\n        inputs, labels = batch\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = torch.nn.functional.cross_entropy(outputs, labels)\n        fabric.backward(loss)\n        optimizer.step()\n```\n\n</sub>\n</td>\n</tr>\n</table>\n\n## key features\n\n<details>\n  <summary>easily switch from running on cpu to gpu (apple silicon, cuda, \u2026), tpu, multi-gpu or even multi-node training</summary>\n\n```python\n# use your available hardware\n# no code changes needed\nfabric = fabric()\n\n# run on gpus (cuda or mps)\nfabric = fabric(accelerator=\"gpu\")\n\n# 8 gpus\nfabric = fabric(accelerator=\"gpu\", devices=8)\n\n# 256 gpus, multi-node\nfabric = fabric(accelerator=\"gpu\", devices=8, num_nodes=32)\n\n# run on tpus\nfabric = fabric(accelerator=\"tpu\")\n```\n\n</details>\n\n<details>\n  <summary>use state-of-the-art distributed training strategies (ddp, fsdp, deepspeed) and mixed precision out of the box</summary>\n\n```python\n# use state-of-the-art distributed training techniques\nfabric = fabric(strategy=\"ddp\")\nfabric = fabric(strategy=\"deepspeed\")\nfabric = fabric(strategy=\"fsdp\")\n\n# switch the precision\nfabric = fabric(precision=\"16-mixed\")\nfabric = fabric(precision=\"64\")\n```\n\n</details>\n\n<details>\n  <summary>all the device logic boilerplate is handled for you</summary>\n\n```diff\n  # no more of this!\n- model.to(device)\n- batch.to(device)\n```\n\n</details>\n\n<details>\n  <summary>build your own custom trainer using fabric primitives for training checkpointing, logging, and more</summary>\n\n```python\nimport lightning as l\n\n\nclass mycustomtrainer:\n    def __init__(self, accelerator=\"auto\", strategy=\"auto\", devices=\"auto\", precision=\"32-true\"):\n        self.fabric = l.fabric(accelerator=accelerator, strategy=strategy, devices=devices, precision=precision)\n\n    def fit(self, model, optimizer, dataloader, max_epochs):\n        self.fabric.launch()\n\n        model, optimizer = self.fabric.setup(model, optimizer)\n        dataloader = self.fabric.setup_dataloaders(dataloader)\n        model.train()\n\n        for epoch in range(max_epochs):\n            for batch in dataloader:\n                input, target = batch\n                optimizer.zero_grad()\n                output = model(input)\n                loss = loss_fn(output, target)\n                self.fabric.backward(loss)\n                optimizer.step()\n```\n\nyou can find a more extensive example in our [examples](../../examples/fabric/build_your_own_trainer)\n\n</details>\n\n______________________________________________________________________\n\n<div align=\"center\">\n    <a href=\"https://lightning.ai/docs/fabric/stable/\">read the lightning fabric docs</a>\n</div>\n\n______________________________________________________________________\n\n## continuous integration\n\nlightning is rigorously tested across multiple cpus and gpus and against major python and pytorch versions.\n\n###### \\*codecov is > 90%+ but build delays may show less\n\n<details>\n  <summary>current build statuses</summary>\n\n<center>\n\n|       system / pytorch ver.        |                                                   1.12                                                    |                                                   1.13                                                    |                                                    2.0                                                    |                                                       2.1                                                        |\n| :--------------------------------: | :-------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------: |\n|        linux py3.9 \\[gpus\\]        |                                                                                                           |                                                                                                           |                                                                                                           | ![build status](https://dev.azure.com/lightning-ai/lightning/_apis/build/status%2flightning-fabric%20%28gpus%29) |\n|  linux (multiple python versions)  | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) |    ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg)     |\n|   osx (multiple python versions)   | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) |    ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg)     |\n| windows (multiple python versions) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) | ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg) |    ![test fabric](https://github.com/lightning-ai/lightning/actions/workflows/ci-tests-fabric.yml/badge.svg)     |\n\n</center>\n</details>\n\n______________________________________________________________________\n\n# getting started\n\n## install lightning\n\n<details>\n\n<summary>prerequisites</summary>\n\n> tip: we strongly recommend creating a virtual environment first.\n> don\u2019t know what this is? follow our [beginner guide here](https://lightning.ai/docs/stable/install/installation.html).\n\n- python 3.8.x or later (3.8.x, 3.9.x, 3.10.x, ...)\n\n</details>\n\n```bash\npip install -u lightning\n```\n\n## convert your pytorch to fabric\n\n1. create the `fabric` object at the beginning of your training code.\n\n   ```\n   import lightning as l\n\n   fabric = l.fabric()\n   ```\n\n1. call `setup()` on each model and optimizer pair and `setup_dataloaders()` on all your data loaders.\n\n   ```\n   model, optimizer = fabric.setup(model, optimizer)\n   dataloader = fabric.setup_dataloaders(dataloader)\n   ```\n\n1. remove all `.to` and `.cuda` calls -> fabric will take care of it.\n\n   ```diff\n   - model.to(device)\n   - batch.to(device)\n   ```\n\n1. replace `loss.backward()` by `fabric.backward(loss)`.\n\n   ```diff\n   - loss.backward()\n   + fabric.backward(loss)\n   ```\n\n1. run the script from the terminal with\n\n   ```bash\n   lightning run model path/to/train.py\n   ```\n\nor use the launch() method in a notebook. learn more about [launching distributed training](https://lightning.ai/docs/fabric/stable/fundamentals/launch.html).\n\n______________________________________________________________________\n\n# faq\n\n## when to use fabric?\n\n- **minimum code changes**- you want to scale your pytorch model to use multi-gpu or use advanced strategies like deepspeed without having to refactor. you don\u2019t care about structuring your code- you just want to scale it as fast as possible.\n- **maximum control**- write your own training and/or inference logic down to the individual optimizer calls. you aren\u2019t forced to conform to a standardized epoch-based training loop like the one in lightning trainer. you can do flexible iteration based training, meta-learning, cross-validation and other types of optimization algorithms without digging into framework internals. this also makes it super easy to adopt fabric in existing pytorch projects to speed-up and scale your models without the compromise on large refactors. just remember: with great power comes a great responsibility.\n- **maximum flexibility**- you want to have full control over your entire training- in fabric all features are opt-in, and it provides you with a tool box of primitives so you can build your own trainer.\n\n## when to use the [lightning trainer](https://lightning.ai/docs/pytorch/stable/common/trainer.html)?\n\n- you want to have all the engineering boilerplate handled for you - dozens of features like checkpointing, logging and early stopping out of the box. less hassle, less error prone, easy to try different techniques and features.\n- you want to have good defaults chosen for you - so you can have a better starting point.\n- you want your code to be modular, readable and well structured - easy to share between projects and with collaborators.\n\n## can i use fabric with my lightningmodule or lightning callback?\n\nyes :) fabric works with pytorch lightningmodules and callbacks, so you can choose how to structure your code and reuse existing models and callbacks as you wish. read more [here](https://lightning.ai/docs/fabric/stable/fundamentals/code_structure.html).\n\n<img src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/continuum.png\" width=\"800px\">\n\n______________________________________________________________________\n\n# examples\n\n- [gan](https://github.com/lightning-ai/lightning/tree/master/examples/fabric/dcgan)\n- [meta learning](https://github.com/lightning-ai/lightning/tree/master/examples/fabric/meta_learning)\n- [reinforcement learning](https://github.com/lightning-ai/lightning/tree/master/examples/fabric/reinforcement_learning)\n- [k-fold cross validation](https://github.com/lightning-ai/lightning/tree/master/examples/fabric/kfold_cv)\n\n______________________________________________________________________\n\n## asking for help\n\nif you have any questions please:\n\n1. [read the docs](https://lightning.ai/docs/fabric).\n1. [ask a question in our forum](https://lightning.ai/forums/).\n1. [join our discord community](https://discord.com/invite/tfxfetezxv).\n\n\n",
  "docs_url": null,
  "keywords": "deep learning,pytorch,ai",
  "license": "apache-2.0",
  "name": "lightning-fabric",
  "package_url": "https://pypi.org/project/lightning-fabric/",
  "project_url": "https://pypi.org/project/lightning-fabric/",
  "project_urls": {
    "Bug Tracker": "https://github.com/Lightning-AI/lightning/issues",
    "Documentation": "https://pytorch-lightning.rtfd.io/en/latest/",
    "Download": "https://github.com/Lightning-AI/lightning",
    "Homepage": "https://github.com/Lightning-AI/lightning",
    "Source Code": "https://github.com/Lightning-AI/lightning"
  },
  "release_url": "https://pypi.org/project/lightning-fabric/2.1.3/",
  "requires_dist": [
    "numpy >=1.17.2",
    "torch >=1.12.0",
    "fsspec[http] >=2022.5.0",
    "packaging >=20.0",
    "typing-extensions >=4.0.0",
    "lightning-utilities >=0.8.0",
    "torchvision >=0.13.0 ; extra == 'all'",
    "torchmetrics >=0.10.0 ; extra == 'all'",
    "lightning-utilities >=0.8.0 ; extra == 'all'",
    "deepspeed <=0.9.3,>=0.8.2 ; (platform_system != \"Windows\") and extra == 'all'",
    "deepspeed <=0.9.3,>=0.8.2 ; (platform_system != \"Windows\") and extra == 'deepspeed'",
    "torchvision >=0.13.0 ; extra == 'dev'",
    "torchmetrics >=0.10.0 ; extra == 'dev'",
    "lightning-utilities >=0.8.0 ; extra == 'dev'",
    "coverage ==7.3.1 ; extra == 'dev'",
    "pytest ==7.4.0 ; extra == 'dev'",
    "pytest-cov ==4.1.0 ; extra == 'dev'",
    "pytest-timeout ==2.1.0 ; extra == 'dev'",
    "pytest-rerunfailures ==12.0 ; extra == 'dev'",
    "pytest-random-order ==1.1.0 ; extra == 'dev'",
    "click ==8.1.7 ; extra == 'dev'",
    "tensorboardX >=2.2 ; extra == 'dev'",
    "torchmetrics >=0.7.0 ; extra == 'dev'",
    "deepspeed <=0.9.3,>=0.8.2 ; (platform_system != \"Windows\") and extra == 'dev'",
    "torchvision >=0.13.0 ; extra == 'examples'",
    "torchmetrics >=0.10.0 ; extra == 'examples'",
    "lightning-utilities >=0.8.0 ; extra == 'examples'",
    "deepspeed <=0.9.3,>=0.8.2 ; (platform_system != \"Windows\") and extra == 'strategies'",
    "coverage ==7.3.1 ; extra == 'test'",
    "pytest ==7.4.0 ; extra == 'test'",
    "pytest-cov ==4.1.0 ; extra == 'test'",
    "pytest-timeout ==2.1.0 ; extra == 'test'",
    "pytest-rerunfailures ==12.0 ; extra == 'test'",
    "pytest-random-order ==1.1.0 ; extra == 'test'",
    "click ==8.1.7 ; extra == 'test'",
    "tensorboardX >=2.2 ; extra == 'test'",
    "torchmetrics >=0.7.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "",
  "version": "2.1.3",
  "releases": [],
  "developers": [
    "lightning_ai_et_al",
    "pytorch@lightning.ai"
  ],
  "kwds": "pytorch lightning_fabric scaling scale fabric_logo",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_lightning_fabric",
  "homepage": "https://github.com/lightning-ai/lightning",
  "release_count": 26,
  "dependency_ids": [
    "pypi_click",
    "pypi_coverage",
    "pypi_deepspeed",
    "pypi_fsspec",
    "pypi_lightning_utilities",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_random_order",
    "pypi_pytest_rerunfailures",
    "pypi_pytest_timeout",
    "pypi_tensorboardx",
    "pypi_torch",
    "pypi_torchmetrics",
    "pypi_torchvision",
    "pypi_typing_extensions"
  ]
}
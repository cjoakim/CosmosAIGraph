{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<figure>\n<img src=\"docs/assets/vizier_logo2.png\" width=20% align=\"right\"/>\n</figure>\n\n# open source vizier: reliable and flexible black-box optimization.\n[![pypi version](https://badge.fury.io/py/google-vizier.svg)](https://badge.fury.io/py/google-vizier)\n![continuous integration](https://github.com/google/vizier/workflows/ci/badge.svg)\n![docs](https://github.com/google/vizier/workflows/docs_test/badge.svg)\n\n  [**google ai blog**](https://ai.googleblog.com/2023/02/open-source-vizier-towards-reliable-and.html)\n| [**getting started**](#getting_started)\n| [**documentation**](#documentation)\n| [**installation**](#installation)\n| [**citing and highlights**](#citing_vizier)\n\n## what is open source (oss) vizier?\n[oss vizier](https://arxiv.org/abs/2207.13676) is a python-based service for black-box optimization and research, based on [google vizier](https://dl.acm.org/doi/10.1145/3097983.3098043), one of the first hyperparameter tuning services designed to work at scale.\n\n<figure>\n<p align=\"center\" width=65%>\n<img src=\"docs/assets/oss_vizier_service.gif\"/>\n  <br>\n  <em><b>oss vizier's distributed client-server system. animation by tom small.</b></em>\n</p>\n</figure>\n\n## getting started <a name=\"getting_started\"></a>\nas a basic example for users, below shows how to tune a simple objective using all flat search space types:\n\n```python\nfrom vizier.service import clients\nfrom vizier.service import pyvizier as vz\n\n# objective function to maximize.\ndef evaluate(w: float, x: int, y: float, z: str) -> float:\n  return w**2 - y**2 + x * ord(z)\n\n# algorithm, search space, and metrics.\nstudy_config = vz.studyconfig(algorithm='gaussian_process_bandit')\nstudy_config.search_space.root.add_float_param('w', 0.0, 5.0)\nstudy_config.search_space.root.add_int_param('x', -2, 2)\nstudy_config.search_space.root.add_discrete_param('y', [0.3, 7.2])\nstudy_config.search_space.root.add_categorical_param('z', ['a', 'g', 'k'])\nstudy_config.metric_information.append(vz.metricinformation('metric_name', goal=vz.objectivemetricgoal.maximize))\n\n# setup client and begin optimization. vizier service will be implicitly created.\nstudy = clients.study.from_study_config(study_config, owner='my_name', study_id='example')\nfor i in range(10):\n  suggestions = study.suggest(count=1)\n  for suggestion in suggestions:\n    params = suggestion.parameters\n    objective = evaluate(params['w'], params['x'], params['y'], params['z'])\n    suggestion.complete(vz.measurement({'metric_name': objective}))\n```\n\n## documentation <a name=\"documentation\"></a>\noss vizier's interface consists of [three main apis](https://oss-vizier.readthedocs.io/en/latest/guides/index.html):\n\n* [**user api:**](https://oss-vizier.readthedocs.io/en/latest/guides/index.html#for-users) allows a user to optimize their blackbox objective and optionally setup a server for distributed multi-client settings.\n* [**developer api:**](https://oss-vizier.readthedocs.io/en/latest/guides/index.html#for-developers) defines abstractions and utilities for implementing new optimization algorithms for research and to be hosted in the service.\n* [**benchmarking api:**](https://oss-vizier.readthedocs.io/en/latest/guides/index.html#for-benchmarking) a wide collection of objective functions and methods to benchmark and compare algorithms.\n\nadditionally, it contains [advanced api](https://oss-vizier.readthedocs.io/en/latest/advanced_topics/index.html) for:\n\n* [**tensorflow probability:**](https://oss-vizier.readthedocs.io/en/latest/advanced_topics/index.html#tensorflow-probability) for writing bayesian optimization algorithms using tensorflow probability and flax.\n* [**pyglove:**](https://oss-vizier.readthedocs.io/en/latest/advanced_topics/index.html#pyglove) for large-scale evolutionary experimentation and program search using oss vizier as a distributed backend.\n\nplease see oss vizier's [readthedocs documentation](https://oss-vizier.readthedocs.io/) for detailed information.\n\n## installation <a name=\"installation\"></a>\n**most common:** to tune objectives using our default state-of-the-art jax-based bayesian optimizer, run:\n\n```bash\npip install google-vizier[jax]\n```\n\nto install a **minimal version** that consists of only the core service and client api from `requirements.txt`, run:\n\n```bash\npip install google-vizier\n```\n\nfor **full installation** to support all algorithms and benchmarks, run:\n\n```bash\npip install google-vizier[all]\n```\n\nfor **specific installations**, you can run:\n\n```bash\npip install google-vizier[x]\n```\n\nwhich will install additional packages from `requirements-x.txt`, such as:\n\n* `requirements-jax.txt`: jax libraries shared by both algorithms and benchmarks.\n* `requirements-tf.txt`: tensorflow libraries used by benchmarks.\n* `requirements-algorithms.txt`: additional repositories (e.g. evojax) for algorithms.\n* `requirements-benchmarks.txt`: additional repositories (e.g. nasbench-201) for benchmarks.\n* `requirements-test.txt`: libraries needed for testing code.\n\ncheck if all unit tests work by running `run_tests.sh` after a full installation. oss vizier requires python 3.10+, while client-only packages require python 3.8+.\n\n## citing and highlights <a name=\"citing_vizier\"></a>\n<ins>**citing vizier:**</ins> if you found this code useful, please consider citing the [oss vizier paper](https://arxiv.org/abs/2207.13676) as well as the [google vizier paper](https://dl.acm.org/doi/10.1145/3097983.3098043).\n\n<ins>**highlights:**</ins> we track [notable users](https://oss-vizier.readthedocs.io/en/latest/highlights/applications.html) and [media attention](https://oss-vizier.readthedocs.io/en/latest/highlights/media.html) - let us know if oss vizier was helpful for your work.\n\nthanks!\n\n```\n@inproceedings{oss_vizier,\n  author    = {xingyou song and\n               sagi perel and\n               chansoo lee and\n               greg kochanski and\n               daniel golovin},\n  title     = {open source vizier: distributed infrastructure and api for reliable and flexible black-box optimization},\n  booktitle = {automated machine learning conference, systems track (automl-conf systems)},\n  year      = {2022},\n}\n@inproceedings{google_vizier,\n  author    = {daniel golovin and\n               benjamin solnik and\n               subhodeep moitra and\n               greg kochanski and\n               john karro and\n               d. sculley},\n  title     = {google vizier: {a} service for black-box optimization},\n  booktitle = {proceedings of the 23rd {acm} {sigkdd} international conference on\n               knowledge discovery and data mining, halifax, ns, canada, august 13\n               - 17, 2017},\n  pages     = {1487--1495},\n  publisher = {{acm}},\n  year      = {2017},\n  url       = {https://doi.org/10.1145/3097983.3098043},\n  doi       = {10.1145/3097983.3098043},\n}\n```\n",
  "docs_url": null,
  "keywords": "ai machine learning hyperparameter blackbox optimization framework",
  "license": "apache license 2.0",
  "name": "google-vizier",
  "package_url": "https://pypi.org/project/google-vizier/",
  "project_url": "https://pypi.org/project/google-vizier/",
  "project_urls": {
    "Homepage": "https://github.com/google/vizier"
  },
  "release_url": "https://pypi.org/project/google-vizier/0.1.13/",
  "requires_dist": [
    "attrs ==23.1.0",
    "absl-py >=1.0.0",
    "numpy >=1.21.5",
    "protobuf >=3.6",
    "portpicker >=1.3.1",
    "grpcio >=1.35.0",
    "grpcio-tools >=1.35.0",
    "googleapis-common-protos >=1.56.4",
    "sqlalchemy >=1.4",
    "emukit ==0.4.9 ; extra == 'algorithms'",
    "scipy <1.8.0,>1.2.3 ; extra == 'algorithms'",
    "cvxpy ==1.2.1 ; extra == 'algorithms'",
    "cvxopt ==1.3.0 ; extra == 'algorithms'",
    "scikit-learn ==1.1.2 ; extra == 'algorithms'",
    "evojax ==0.2.15 ; extra == 'algorithms'",
    "lightgbm ==2.2.3 ; extra == 'algorithms'",
    "jax >=0.4.10 ; extra == 'all'",
    "jaxlib >=0.4.10 ; extra == 'all'",
    "jaxopt >=0.7 ; extra == 'all'",
    "flax >=0.6.10 ; extra == 'all'",
    "optax >=0.1.5 ; extra == 'all'",
    "chex >=0.1.7 ; extra == 'all'",
    "tfp-nightly[jax] ; extra == 'all'",
    "equinox >=0.10.6 ; extra == 'all'",
    "jaxtyping >=0.2.20 ; extra == 'all'",
    "typeguard <=2.13.3 ; extra == 'all'",
    "tensorflow >=2.9.1 ; extra == 'all'",
    "emukit ==0.4.9 ; extra == 'all'",
    "scipy <1.8.0,>1.2.3 ; extra == 'all'",
    "cvxpy ==1.2.1 ; extra == 'all'",
    "cvxopt ==1.3.0 ; extra == 'all'",
    "scikit-learn ==1.1.2 ; extra == 'all'",
    "evojax ==0.2.15 ; extra == 'all'",
    "lightgbm ==2.2.3 ; extra == 'all'",
    "ale-py ; extra == 'all'",
    "dopamine-rl ; extra == 'all'",
    "nats-bench ; extra == 'all'",
    "xgboost ==1.5.1 ; extra == 'all'",
    "ray ==2.3.1 ; extra == 'all'",
    "coverage <=6.4.2,>=4.5 ; extra == 'all'",
    "mock <=4.0.3,>=3.0 ; extra == 'all'",
    "pytest ; extra == 'all'",
    "ale-py ; extra == 'benchmarks'",
    "dopamine-rl ; extra == 'benchmarks'",
    "nats-bench ; extra == 'benchmarks'",
    "xgboost ==1.5.1 ; extra == 'benchmarks'",
    "ray ==2.3.1 ; extra == 'benchmarks'",
    "jax >=0.4.10 ; extra == 'jax'",
    "jaxlib >=0.4.10 ; extra == 'jax'",
    "jaxopt >=0.7 ; extra == 'jax'",
    "flax >=0.6.10 ; extra == 'jax'",
    "optax >=0.1.5 ; extra == 'jax'",
    "chex >=0.1.7 ; extra == 'jax'",
    "tfp-nightly[jax] ; extra == 'jax'",
    "equinox >=0.10.6 ; extra == 'jax'",
    "jaxtyping >=0.2.20 ; extra == 'jax'",
    "typeguard <=2.13.3 ; extra == 'jax'",
    "coverage <=6.4.2,>=4.5 ; extra == 'test'",
    "mock <=4.0.3,>=3.0 ; extra == 'test'",
    "pytest ; extra == 'test'",
    "tensorflow >=2.9.1 ; extra == 'tf'"
  ],
  "requires_python": ">=3.8",
  "summary": "open source vizier: distributed service framework for blackbox optimization and research.",
  "version": "0.1.13",
  "releases": [],
  "developers": [
    "oss-vizier-dev@google.com",
    "vizier_team"
  ],
  "kwds": "google_vizier vizier_logo2 hyperparameter tensorflow svg",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_google_vizier",
  "homepage": "https://github.com/google/vizier",
  "release_count": 32,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_ale_py",
    "pypi_attrs",
    "pypi_chex",
    "pypi_coverage",
    "pypi_cvxopt",
    "pypi_cvxpy",
    "pypi_dopamine_rl",
    "pypi_emukit",
    "pypi_equinox",
    "pypi_evojax",
    "pypi_flax",
    "pypi_googleapis_common_protos",
    "pypi_grpcio",
    "pypi_grpcio_tools",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_jaxopt",
    "pypi_jaxtyping",
    "pypi_lightgbm",
    "pypi_mock",
    "pypi_nats_bench",
    "pypi_numpy",
    "pypi_optax",
    "pypi_portpicker",
    "pypi_protobuf",
    "pypi_pytest",
    "pypi_ray",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sqlalchemy",
    "pypi_tensorflow",
    "pypi_tfp_nightly",
    "pypi_typeguard",
    "pypi_xgboost"
  ]
}
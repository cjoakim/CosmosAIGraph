{
  "classifiers": [],
  "description": "# zigpy-zigate\n\n![build & tests](https://github.com/zigpy/zigpy-zigate/workflows/build%20&%20tests/badge.svg?branch=master)\n[![coverage](https://coveralls.io/repos/github/zigpy/zigpy-zigate/badge.svg?branch=master)](https://coveralls.io/github/zigpy/zigpy-zigate?branch=master)\n\n[zigpy-zigate](https://github.com/zigpy/zigpy-zigate) is a python 3 implementation for the [zigpy](https://github.com/zigpy/) project to implement [zigate](https://www.zigate.fr/) based [zigbee](https://www.zigbee.org) radio devices.\n\n- https://github.com/zigpy/zigpy-zigate\n\nzigate is a open source zigbee adapter hardware that was initially launched on kickstarter by @fairecasoimeme\n\n- https://www.zigate.fr\n- https://www.kickstarter.com/projects/1361563794/zigate-universal-zigbee-gateway-for-smarthome\n\n## hardware and firmware compatibility\nthe zigate usb adapter communicates via a pl-2303hx usb to serial bridge controller module by prolific. \nthere's also a wi-fi adapter to communicate with zigate over network.\n\nnote! zigate open source zigbee usb and gpio adapter hardware requires zigate 3.1a firmware or later to work with this zigpy-zigate module, however zigate 3.1d firmware or later is recommended as it contains a specific bug-fix related to zigpy. see all available official zigate firmware releases [here (link)](https://github.com/fairecasoimeme/zigate/releases).\n\n### known working zigate compatible zigbee radio modules\n- [zigate + usb / zigate usb-ttl](https://zigate.fr/produit/zigate-usb/)\n- [zigate + usb-din / zigate usb-din](https://zigate.fr/produit/zigatev2-usb-din/)\n- [pizigate + / pizigate (zigate hat/shield module for raspberry pi compatible gpio header)](https://zigate.fr/produit/pizigatev2/)\n  - tip! pizigate are not limited to raspberry pi series as works with all computers with a raspberry pi compatible gpio header.\n- [zigate ethernet (zigate ethernet serial-to-ip server)](https://zigate.fr/produit/zigate-ethernet/) (note! requires the [pizigate + radio module](https://zigate.fr/produit/pizigatev2/))\n  - tip! [zigate ethernet](https://zigate.fr/produit/zigate-ethernet/) can as alternativly also be used via [esphome serial bridge firmware for esp32](https://github.com/thegroove/esphome-zbbridge/) as an option.\n- [zigate + wifi pack / zigate wifi pack (zigate wifi serial-to-ip server)](https://zigate.fr/produit/zigatev2-pack-wifi/)\n  - tip! [zigate compatible wifi module](https://zigate.fr/produit/module-wifi-v1-3-compatible-zigate/) can also be used to convert radio board from [zigate usb-ttl](https://zigate.fr/produit/zigate-ttl/) into this \"zigate wifi pack\".\n\n### experimental zigate compatible zigbee radio modules\n- [open lumi gateway](https://github.com/openlumi) - [diy zigate wifi bridge hacked from an xiaomi lumi gateway with modded openwrt firmware](https://github.com/zigpy/zigpy-zigate/issues/59)\n\n## port configuration\n\n- to configure __usb__ zigate (usb ttl or din) port, just specify the port, example : `/dev/ttyusb0`\n    - alternatively you could manually set port to `auto` to enable automatic usb port discovery\n- to configure __pizigate__ port, specify the port, example : `/dev/serial0` or `/dev/ttyama0`\n- to configure __wifi__ zigate, manually specify ip address and port, example : `socket://192.168.1.10:9999` \n\n__pizigate__ does require some additional adjustements on raspberry pi 3/zero, and 4:\n- [raspberry pi 3 and raspberry pi zero configuration adjustements](https://zigate.fr/documentation/compatibilite-raspberry-pi-3-et-zero-w/)\n- [raspberry pi 4 configuration adjustements](https://zigate.fr/documentation/compatibilite-raspberry-pi-4-b/)\n\n## flasher (zigate firmware tool)\n\nzigpy-zigate has an integrated python \"flasher\" tool to flash firmware updates on your zigate (nxp jennic jn5168).\n\nthanks to sander hoentjen (tjikkun) zigpy-zigate now has an integrated firmware flasher tool!\n- [tjikkun original zigate-flasher repo](https://github.com/tjikkun/zigate-flasher)\n\nsee all available official zigate firmware releases [here (link)](https://github.com/fairecasoimeme/zigate/releases).\n\n### flasher usage\n\n```bash\nusage: python3 -m zigpy_zigate.tools.flasher [-h] -p {/dev/ttyusb0} [-w write] [-s save] [-u] [-d] [--gpio] [--din]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p {/dev/ttyusb0}, --serialport {/dev/ttyusb0}\n                        serial port, e.g. /dev/ttyusb0\n  -w write, --write write\n                        firmware bin to flash onto the chip\n  -s save, --save save  file to save the currently loaded firmware to\n  -u, --upgrade         download and flash the lastest available firmware\n  -d, --debug           set log level to debug\n  --gpio                configure gpio for pizigate flash\n  --din                 configure usb for zigate din flash\n\n```\n\n## testing new releases\n\ntesting a new release of the zigpy-zigate library before it is released in home assistant.\n\nif you are using supervised home assistant (formerly known as the hassio/hass.io distro):\n- add https://github.com/home-assistant/hassio-addons-development as \"add-on\" repository\n- install \"custom deps deployment\" addon\n- update config like: \n  ```\n  pypi:\n    - zigpy-zigate==0.5.1\n  apk: []\n  ```\n  where 0.5.1 is the new version\n- start the addon\n\nif you are instead using some custom python installation of home assistant then do this:\n- activate your python virtual env\n- update package with ``pip``\n  ```\n  pip install zigpy-zigate==0.5.1\n\n## releases via pypi\ntagged versions are also released via pypi\n\n- https://pypi.org/project/zigpy-zigate/\n- https://pypi.org/project/zigpy-zigate/#history\n- https://pypi.org/project/zigpy-zigate/#files\n\n## developer references\ndocuments that layout the serial protocol used for zigate serial interface communication can be found here:\n\n- https://github.com/fairecasoimeme/zigate/tree/master/protocol\n- https://github.com/doudz/zigate\n- https://github.com/neonox31/zigate\n- https://github.com/nouknouk/node-zigate\n\n## how to contribute\n\nif you are looking to make a contribution to this project we suggest that you follow the steps in these guides:\n- https://github.com/firstcontributions/first-contributions/blob/master/readme.md\n- https://github.com/firstcontributions/first-contributions/blob/master/github-desktop-tutorial.md\n\nsome developers might also be interested in receiving donations in the form of hardware such as zigbee modules or devices, and even if such donations are most often donated with no strings attached it could in many cases help the developers motivation and indirect improve the development of this project.\n\n## related projects\n\n#### zigpy\n[zigpy](https://github.com/zigpy/zigpy) is [zigbee protocol stack](https://en.wikipedia.org/wiki/zigbee) integration project to implement the [zigbee home automation](https://www.zigbee.org/) standard as a python 3 library. zigbee home automation integration with zigpy allows you to connect one of many off-the-shelf zigbee adapters using one of the available zigbee radio library modules compatible with zigpy to control zigbee based devices. there is currently support for controlling zigbee device types such as binary sensors (e.g., motion and door sensors), sensors (e.g., temperature sensors), lightbulbs, switches, and fans. a working implementation of zigbe exist in [home assistant](https://www.home-assistant.io) (python based open source home automation software) as part of its [zha component](https://www.home-assistant.io/components/zha/)\n\n#### zha device handlers\nzha deviation handling in home assistant relies on the third-party [zha device handlers](https://github.com/zigpy/zha-device-handlers) project. zigbee devices that deviate from or do not fully conform to the standard specifications set by the [zigbee alliance](https://www.zigbee.org) may require the development of custom [zha device handlers](https://github.com/zigpy/zha-device-handlers) (zha custom quirks handler implementation) to for all their functions to work properly with the zha component in home assistant. these zha device handlers for home assistant can thus be used to parse custom messages to and from non-compliant zigbee devices. the custom quirks implementations for zigpy implemented as zha device handlers for home assistant are a similar concept to that of [hub-connected device handlers for the smartthings platform](https://docs.smartthings.com/en/latest/device-type-developers-guide/) as well as that of [zigbee-herdsman converters as used by zigbee2mqtt](https://www.zigbee2mqtt.io/how_tos/how_to_support_new_devices.html), meaning they are each virtual representations of a physical device that expose additional functionality that is not provided out-of-the-box by the existing integration between these platforms.\n\n#### zha integration component for home assistant\n[zha integration component for home assistant](https://www.home-assistant.io/integrations/zha/) is a reference implementation of the zigpy library as integrated into the core of [home assistant](https://www.home-assistant.io) (a python based open source home automation software). there are also other gui and non-gui projects for home assistant's zha components which builds on or depends on its features and functions to enhance or improve its user-experience, some of those are listed and linked below.\n\n#### zha custom radios\n[zha-custom-radios](https://github.com/zha-ng/zha-custom-radios) adds support for custom radio modules for zigpy to [[home assistant's zha (zigbee home automation) integration component]](https://www.home-assistant.io/integrations/zha/). this custom component for home assistant allows users to test out new modules for zigpy in home assistant's zha integration component before they are integrated into zigpy zha and also helps developers new zigpy radio modules without having to modify the home assistant's source code.\n\n#### zha custom\n[zha_custom](https://github.com/adminiuga/zha_custom) is a custom component package for home assistant (with its zha component for zigpy integration) that acts as zigpy commands service wrapper, when installed it allows you to enter custom commands via to zigy to example change advanced configuration and settings that are not available in the ui.\n\n#### zha map\n[zha-map](https://github.com/zha-ng/zha-map) for home assistant's zha component can build a zigbee network topology map.\n\n#### zha network visualization card\n[zha-network-visualization-card](https://github.com/dmulcahey/zha-network-visualization-card) is a custom lovelace element for home assistant which visualize the zigbee network for the zha component.\n\n#### zha network card\n[zha-network-card](https://github.com/dmulcahey/zha-network-card) is a custom lovelace card for home assistant that displays zha component zigbee network and device information in home assistant\n\n#### zigzag\n[zigzag](https://github.com/samantha-uk/zigzag) is an custom card/panel for [home assistant](https://www.home-assistant.io/) that displays a graphical layout of zigbee devices and the connections between them. zigzag can be installed as a panel or a custom card and relies on the data provided by the [zha-map](https://github.com/zha-ng/zha-map) integration commponent.\n\n#### zha device exporter\n[zha-device-exporter](https://github.com/dmulcahey/zha-device-exporter) is a custom component for home assistant to allow the zha component to export lists of zigbee devices.\n",
  "docs_url": null,
  "keywords": "",
  "license": "gpl-3.0",
  "name": "zigpy-zigate",
  "package_url": "https://pypi.org/project/zigpy-zigate/",
  "project_url": "https://pypi.org/project/zigpy-zigate/",
  "project_urls": {
    "repository": "https://github.com/zigpy/zigpy-zigate"
  },
  "release_url": "https://pypi.org/project/zigpy-zigate/0.12.0/",
  "requires_dist": [
    "voluptuous",
    "zigpy >=0.60.0",
    "pyusb >=1.1.0",
    "gpiozero",
    "async-timeout ; python_version < \"3.11\"",
    "pytest >=7.1.2 ; extra == 'testing'",
    "pytest-asyncio >=0.19.0 ; extra == 'testing'",
    "pytest-timeout >=2.1.0 ; extra == 'testing'",
    "pytest-mock >=3.8.2 ; extra == 'testing'",
    "pytest-cov >=3.0.0 ; extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "a library which communicates with zigate radios for zigpy",
  "version": "0.12.0",
  "releases": [],
  "developers": [
    "sebatien.ramage@gmail.com"
  ],
  "kwds": "zigpy_zigate zigpy zigatev2 zigbee2mqtt zigate",
  "license_kwds": "gpl-3.0",
  "libtype": "pypi",
  "id": "pypi_zigpy_zigate",
  "homepage": "",
  "release_count": 26,
  "dependency_ids": [
    "pypi_async_timeout",
    "pypi_gpiozero",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_timeout",
    "pypi_pyusb",
    "pypi_voluptuous",
    "pypi_zigpy"
  ]
}
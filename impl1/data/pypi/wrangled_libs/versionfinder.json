{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: version control"
  ],
  "description": "versionfinder\n=============\n\n.. image:: https://img.shields.io/github/forks/jantman/versionfinder.svg\n   :alt: github forks\n   :target: https://github.com/jantman/versionfinder/network\n\n.. image:: https://img.shields.io/github/issues/jantman/versionfinder.svg\n   :alt: github open issues\n   :target: https://github.com/jantman/versionfinder/issues\n\n.. image:: https://secure.travis-ci.org/jantman/versionfinder.png?branch=master\n   :target: http://travis-ci.org/jantman/versionfinder\n   :alt: travis-ci for master branch\n\n.. image:: https://codecov.io/github/jantman/versionfinder/coverage.svg?branch=master\n   :target: https://codecov.io/github/jantman/versionfinder?branch=master\n   :alt: coverage report for master branch\n\n.. image:: https://readthedocs.org/projects/versionfinder/badge/?version=latest\n   :target: https://readthedocs.org/projects/versionfinder/?badge=latest\n   :alt: sphinx documentation for latest release\n\n.. image:: http://www.repostatus.org/badges/latest/active.svg\n   :alt: project status: active \u2013 the project has reached a stable, usable state and is being actively developed.\n   :target: http://www.repostatus.org/#active\n\npython package to find the version of another package/distribution, whether installed via pip, setuptools or git\n\noverview\n--------\n\nversionfinder is a library intended to identify the version/source details of a\nspecified python distribution (usually the one calling it), whether it was\ninstalled via pip, setuptools or git. this is intended to allow packages to\ndetermine what version they are, beyond what is simply coded in the package:\n\n* for packages installed via pip, return the exact requirement that was installed,\n  even if it was a source control url (editable or not).\n* for packages installed via setuptools, return the installed version.\n* for packages that are a git clone, return the url, commit, tag, and whether the\n  repository is dirty (modified) or not.\n\nthis is mainly intended for projects that need to display their version information\nto users (i.e. for use in filing bug reports or support requests) and wish to be as\nspecific as possible, including whether the package was installed from a fork, a specific\ntag or commit from a git repo, or has local changes not committed to git.\n\nrequirements\n------------\n\n* python 3.5+\n\nusage\n-----\n\nversionfinder is primarily intended to return information about the package/\ndistribution it is called from. as some operations can be quite a bit more time\nconsuming than simply reading a ``pkg_resources`` or ``pip`` distribution version,\nit's recommended that versionfinder be run once during the startup or initialization\nof your application/process, and the result stored for later use.\n\nthe simplest example is finding the version information for whatever package/distribution\ncontains the calling module. in ``mymodule.py``, a module within the \"mypackage\"\npackage/distribution:\n\n.. code-block:: python\n\n    import logging\n    from versionfinder import find_version\n\n    # if you are using the python logging module, you'll likely want to\n    # suppress logging from versionfinder itself, as well as the debug-level\n    # logging from ``pip`` and ``git``, which are called by versionfinder.\n    for lname in ['versionfinder', 'pip', 'git']:\n        l = logging.getlogger(lname)\n        l.setlevel(logging.critical)\n        l.propagate = true\n\n    class myclass(object):\n\n        def __init__(self):\n            self._versioninfo = find_version('mypackage')\n\n        @property\n        def versioninfo(self):\n            return self._versioninfo\n\nthe ``_versioninfo`` attribute of the class will be set to the ``versioninfo``\nobject returned by ``find_version()``. we can inspect some of that object's\nproperties, which are documented in the\n`api docs <http://versionfinder.readthedocs.io/en/latest/versionfinder.versioninfo.html#versionfinder.versioninfo.versioninfo>`_.\n\n.. code-block:: pycon\n\n    >>> from mypackage.mymodule import myclass\n    >>> c = myclass()\n    >>> v = c.versioninfo\n    >>> v\n    versioninfo(git_commit=123456ab, git_is_dirty=true, git_remotes={'origin': 'https://github.com/someone/foo.git'}, git_tag=v1.2.3, pip_requirement=git+https://github.com/someone/foo@v1.2.3#egg=foo, pip_url=http://foo.com, pip_version=1.2.3, pkg_resources_url=http://foo.com, pkg_resources_version=1.2.3)\n    >>> v.pip_version\n    '1.2.3'\n    >>> v.pkg_resources_version\n    '1.2.3'\n    >>> v.version\n    '1.2.3'\n    >>> v.pip_url\n    'http://foo.com'\n    >>> v.pkg_resources_url\n    'http://foo.com'\n    >>> v.url\n    'http://foo.com'\n    >>> v.pip_requirement\n    'git+https://github.com/someone/foo@v1.2.3#egg=foo'\n    >>> v.git_remotes\n    {'origin': 'https://github.com/someone/foo.git'}\n    >>> v.git_remote\n    'https://github.com/someone/foo.git'\n    >>> v.git_commit\n    '123456ab'\n    >>> v.git_tag\n    'v1.2.3'\n    >>> v.git_is_dirty\n    true\n    >>> v.git_str\n    'git+https://github.com/someone/foo@v1.2.3#egg=foo*'\n    >>> v.short_str\n    '1.2.3 <http://foo.com>'\n    >>> v.long_str\n    '1.2.3 <http://foo.com> (git+https://github.com/someone/foo@v1.2.3#egg=foo*)'\n\nbugs and feature requests\n-------------------------\n\nbug reports and feature requests are happily accepted via the `github issue tracker <https://github.com/jantman/versionfinder/issues>`_. pull requests are\nwelcome. issues that don't have an accompanying pull request will be worked on\nas my time and priority allows.\n\ndevelopment\n===========\n\nto install for development:\n\n1. fork the `versionfinder <https://github.com/jantman/versionfinder>`_ repository on github\n2. create a new branch off of master in your fork.\n\n.. code-block:: bash\n\n    $ virtualenv versionfinder\n    $ cd versionfinder && source bin/activate\n    $ pip install -e git+git@github.com:yourname/versionfinder.git@branchname#egg=versionfinder\n    $ cd src/versionfinder\n\nthe git clone you're now in will probably be checked out to a specific commit,\nso you may want to ``git checkout branchname``.\n\nguidelines\n----------\n\n* pep8 compliant with some exceptions (see pytest.ini)\n* 100% test coverage with pytest (with valid tests)\n\ntesting\n-------\n\ntesting is done via `pytest <https://docs.pytest.org/en/latest/>`_, driven by `tox <https://tox.readthedocs.org/>`_.\n\n* testing is as simple as:\n\n  * ``pip install tox``\n  * ``tox``\n\n* if you want to pass additional arguments to pytest, add them to the tox command line after \"--\". i.e., for verbose pytext output on py27 tests: ``tox -e py27 -- -v``\n\nacceptance tests\n----------------\n\nversionfinder has a suite of acceptance tests that create virtualenvs, install a\ntest package (`versionfinder-test-pkg <https://github.com/jantman/versionfinder-test-pkg>`_) in them,\nand then call ``versionfinder.find_version()`` from multiple locations in the package, printing a json-serialized\ndict of the results of each call (and an exception, if one was caught). for further information\non the acceptance tests, see ``versionfinder/tests/test_acceptance.py``.\n\ncurrently-tested scenarios are:\n\n* pip\n\n  * install from local git clone\n  * install editable from local git clone\n  * install editable from local git clone then change a file (dirty)\n  * install editable from local git clone then commit and tag\n  * install editable from local git clone checked out to a tag\n  * install editable from local git clone checked out to a commit\n  * install editable from local git clone with multiple remotes\n  * install from sdist\n  * install from sdist with pip 1.5.4\n  * install from wheel\n  * install from git url\n  * install from git fork url\n  * install from git url with commit\n  * install from git url with tag\n  * install from git url with branch\n  * install editable from git url\n  * install editable from git fork url\n  * install editable from git url with multiple remotes\n  * install editable from git url and then change a file in the clone (dirty)\n  * install editable from git url with commit\n  * install editable from git url with tag\n  * install editable from git url with branch\n  * install sdist in a venv that's also a git repo\n  * install wheel in a venv that's also a git repo\n\n* setuptools / setup.py\n\n  * setup.py develop\n  * setup.py install\n\n* easy_install\n\n  * install from sdist\n  * install from egg\n  * install from source directory\n  * install from sdist in a venv that's also a git repo\n  * install from egg in a venv that's also a git repo\n  * install from source directory in a venv that's also a git repo\n\nrelease checklist\n-----------------\n\n1. open an issue for the release; cut a branch off master for that issue.\n2. confirm that there are changes.rst entries for all major changes.\n3. ensure that travis tests passing in all environments.\n4. ensure that test coverage is no less than the last release (ideally, 100%).\n5. increment the version number in versionfinder/version.py and add version and release date to changes.rst, then push to github.\n6. confirm that readme.rst renders correctly on github.\n7. upload package to testpypi:\n\n   * make sure your ~/.pypirc file is correct (a repo called ``test`` for https://testpypi.python.org/pypi)\n   * ``rm -rf dist``\n   * ``python setup.py register -r https://testpypi.python.org/pypi``\n   * ``python setup.py sdist bdist_wheel``\n   * ``twine upload -r test dist/*``\n   * check that the readme renders at https://testpypi.python.org/pypi/versionfinder\n\n8. create a pull request for the release to be merged into master. upon successful travis build, merge it.\n9. tag the release in git, push tag to github:\n\n   * tag the release. for now the message is quite simple: ``git tag -a x.y.z -m 'x.y.z released yyyy-mm-dd'``\n   * push the tag to github: ``git push origin x.y.z``\n\n11. upload package to live pypi:\n\n    * ``twine upload dist/*``\n\n10. make sure any gh issues fixed in the release were closed.\n\nlicense and disclaimer\n----------------------\n\nthis software is licensed under the `gnu lesser general public license (lgpl) 3.0 <https://www.gnu.org/licenses/lgpl-3.0.en.html>`_.\n\n",
  "docs_url": null,
  "keywords": "version git pip pkg_resources setuptools",
  "license": "",
  "name": "versionfinder",
  "package_url": "https://pypi.org/project/versionfinder/",
  "project_url": "https://pypi.org/project/versionfinder/",
  "project_urls": {
    "Homepage": "https://github.com/jantman/versionfinder"
  },
  "release_url": "https://pypi.org/project/versionfinder/1.1.1/",
  "requires_dist": [
    "GitPython (~=3.1)"
  ],
  "requires_python": "",
  "summary": "python package to find the version of another package, whether installed via pip, setuptools or git.",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "jason@jasonantman.com",
    "jason_antman"
  ],
  "kwds": "pip_version pkg_resources_version _versioninfo versionfinder find_version",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_versionfinder",
  "homepage": "https://github.com/jantman/versionfinder",
  "release_count": 7,
  "dependency_ids": [
    "pypi_gitpython"
  ]
}
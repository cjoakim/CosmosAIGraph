{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "[![pypi version](https://img.shields.io/pypi/pyversions/nptyping.svg)](https://img.shields.io/pypi/pyversions/nptyping.svg)\n[![downloads](https://pepy.tech/badge/nptyping/month)](https://pepy.tech/project/nptyping)\n[![pypi version](https://badge.fury.io/py/nptyping.svg)](https://badge.fury.io/py/nptyping)\n[![codecov](https://codecov.io/gh/ramonhagenaars/nptyping/branch/master/graph/badge.svg)](https://codecov.io/gh/ramonhagenaars/nptyping)\n[![code style](https://img.shields.io/badge/code%20style-black-black)](https://img.shields.io/badge/code%20style-black-black)\n\n\n<p align='center'>\n  <a href='https://https://pypi.org/project/nptyping/'>\n    <img src='https://github.com/ramonhagenaars/nptyping/raw/master/resources/logo.png' />\n  </a> \n</p>\n\n\ud83e\uddca *type hints for `numpy`* <br/>\n\ud83d\udc3c *type hints for `pandas.dataframe`* <br/>\n\ud83d\udca1 *extensive dynamic type checks for dtypes shapes and structures* <br/>\n\ud83d\ude80 *[jump to the quickstart](https://github.com/ramonhagenaars/nptyping/blob/master/userdocs.md#quickstart)*\n\nexample of a hinted `numpy.ndarray`:\n\n```python\n>>> from nptyping import ndarray, int, shape\n\n>>> arr: ndarray[shape[\"2, 2\"], int]\n\n```\n\nexample of a hinted `pandas.dataframe`:\n\n```python\n>>> from nptyping import dataframe, structure as s\n\n>>> df: dataframe[s[\"name: str, x: float, y: float\"]]\n\n```\n\n### installation\n\n| command                          | description                   |\n|:---------------------------------|-------------------------------|\n| `pip install nptyping`           | install the basics            |\n| `pip install nptyping[pandas]`   | install with pandas extension |\n| `pip install nptyping[complete]` | install with all extensions   |\n\n### instance checking\n\nexample of instance checking:\n```python\n>>> import numpy as np\n\n>>> isinstance(np.array([[1, 2], [3, 4]]), ndarray[shape[\"2, 2\"], int])\ntrue\n\n>>> isinstance(np.array([[1., 2.], [3., 4.]]), ndarray[shape[\"2, 2\"], int])\nfalse\n\n>>> isinstance(np.array([1, 2, 3, 4]), ndarray[shape[\"2, 2\"], int])\nfalse\n\n```\n\n`nptyping` also provides `assert_isinstance`. in contrast to `assert isinstance(...)`, this won't cause ides or mypy\ncomplaints. here is an example: \n```python\n>>> from nptyping import assert_isinstance\n\n>>> assert_isinstance(np.array([1]), ndarray[shape[\"1\"], int])\ntrue\n\n```\n\n### numpy structured arrays\n\nyou can also express structured arrays using `nptyping.structure`:\n```python\n>>> from nptyping import structure\n\n>>> structure[\"name: str, age: int\"]\nstructure['age: int, name: str']\n\n```\n\nhere is an example to see it in action:\n```python\n>>> from typing import any\n>>> import numpy as np\n>>> from nptyping import ndarray, structure\n\n>>> arr = np.array([(\"peter\", 34)], dtype=[(\"name\", \"u10\"), (\"age\", \"i4\")])\n>>> isinstance(arr, ndarray[any, structure[\"name: str, age: int\"]])\ntrue\n\n```\n\nsubarrays can be expressed with a shape expression between square brackets:\n```python\n>>> structure[\"name: int[3, 3]\"]\nstructure['name: int[3, 3]']\n\n```\n\n### numpy record arrays\nthe recarray is a specialization of a structured array. you can use `recarray`\nto express them.\n\n```python\n>>> from nptyping import recarray\n\n>>> arr = np.array([(\"peter\", 34)], dtype=[(\"name\", \"u10\"), (\"age\", \"i4\")])\n>>> rec_arr = arr.view(np.recarray)\n>>> isinstance(rec_arr, recarray[any, structure[\"name: str, age: int\"]])\ntrue\n\n```\n\n### pandas dataframes\npandas dataframes can be expressed with `structure` also. to make it more concise, you may want to alias `structure`.\n```python\n>>> from nptyping import dataframe, structure as s\n\n>>> df: dataframe[s[\"x: float, y: float\"]]\n\n```\n\n### more examples\n\nhere is an example of a rich expression that can be done with `nptyping`:\n```python\ndef plan_route(\n        locations: ndarray[shape[\"[from, to], [x, y]\"], float]\n) -> ndarray[shape[\"* stops, [x, y]\"], float]:\n    ...\n\n```\n\nmore examples can be found in the [documentation](https://github.com/ramonhagenaars/nptyping/blob/master/userdocs.md#examples).\n\n## documentation\n\n* [user documentation](https://github.com/ramonhagenaars/nptyping/blob/master/userdocs.md) <br/>\nthe place to go if you are using this library. <br/><br/>\n  \n* [release notes](https://github.com/ramonhagenaars/nptyping/blob/master/history.md) <br/>\nto see what's new, check out the release notes. <br/><br/>\n\n* [contributing](https://github.com/ramonhagenaars/nptyping/blob/master/contributing.md) <br/>\nif you're interested in developing along, find the guidelines here. <br/><br/>\n\n* [license](https://github.com/ramonhagenaars/nptyping/blob/master/license) <br/>\nif you want to check out how open source this library is.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "nptyping",
  "package_url": "https://pypi.org/project/nptyping/",
  "project_url": "https://pypi.org/project/nptyping/",
  "project_urls": {
    "Homepage": "https://github.com/ramonhagenaars/nptyping"
  },
  "release_url": "https://pypi.org/project/nptyping/2.5.0/",
  "requires_dist": [
    "typing-extensions (<5.0.0,>=4.0.0) ; python_version < \"3.10\"",
    "numpy (==1.21.5) ; python_version < \"3.8\"",
    "numpy (<2.0.0,>=1.20.0) ; python_version >= \"3.8\"",
    "invoke (>=1.6.0) ; extra == 'build'",
    "pip-tools (>=6.5.0) ; extra == 'build'",
    "pandas ; extra == 'complete'",
    "pandas-stubs-fork ; (python_version >= \"3.8\") and extra == 'complete'",
    "invoke (>=1.6.0) ; extra == 'dev'",
    "pip-tools (>=6.5.0) ; extra == 'dev'",
    "autoflake ; extra == 'dev'",
    "black ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "codecov (>=2.1.0) ; extra == 'dev'",
    "feedparser ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pyright ; extra == 'dev'",
    "setuptools ; extra == 'dev'",
    "typeguard ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "pandas ; extra == 'dev'",
    "beartype (<0.10.0) ; (python_version < \"3.10\") and extra == 'dev'",
    "beartype (>=0.10.0) ; (python_version >= \"3.10\") and extra == 'dev'",
    "pandas-stubs-fork ; (python_version >= \"3.8\") and extra == 'dev'",
    "pandas ; extra == 'pandas'",
    "pandas-stubs-fork ; (python_version >= \"3.8\") and extra == 'pandas'",
    "autoflake ; extra == 'qa'",
    "black ; extra == 'qa'",
    "coverage ; extra == 'qa'",
    "codecov (>=2.1.0) ; extra == 'qa'",
    "feedparser ; extra == 'qa'",
    "isort ; extra == 'qa'",
    "mypy ; extra == 'qa'",
    "pylint ; extra == 'qa'",
    "pyright ; extra == 'qa'",
    "setuptools ; extra == 'qa'",
    "typeguard ; extra == 'qa'",
    "wheel ; extra == 'qa'",
    "beartype (<0.10.0) ; (python_version < \"3.10\") and extra == 'qa'",
    "beartype (>=0.10.0) ; (python_version >= \"3.10\") and extra == 'qa'"
  ],
  "requires_python": ">=3.7",
  "summary": "type hints for numpy.",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "ramon.hagenaars@gmail.com",
    "ramon_hagenaars"
  ],
  "kwds": "nptyping badge svg code pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_nptyping",
  "homepage": "https://github.com/ramonhagenaars/nptyping",
  "release_count": 28,
  "dependency_ids": [
    "pypi_autoflake",
    "pypi_beartype",
    "pypi_black",
    "pypi_codecov",
    "pypi_coverage",
    "pypi_feedparser",
    "pypi_invoke",
    "pypi_isort",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pandas_stubs_fork",
    "pypi_pip_tools",
    "pypi_pylint",
    "pypi_pyright",
    "pypi_setuptools",
    "pypi_typeguard",
    "pypi_typing_extensions",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": ".. http://docutils.sourceforge.net/docs/user/rst/quickref.html\n\n.. |nbsp| unicode:: 0xa0\n   :trim:\n\nimap_tools \ud83d\udce7\n=============\n\nhigh level lib for work with email by imap:\n\n- basic message operations: fetch, uids, numbers\n- parsed email message attributes\n- query builder for search criteria\n- actions with emails: copy, delete, flag, move, append\n- actions with folders: list, set, get, create, exists, rename, subscribe, delete, status\n- idle commands: start, poll, stop, wait\n- exceptions on failed imap operations\n- no external dependencies, tested\n\n.. image:: https://img.shields.io/pypi/dm/imap_tools.svg?style=social\n\n===============  ================================================================================================\npython version   3.5+\nlicense          apache-2.0\npypi             https://pypi.python.org/pypi/imap_tools/\nrfc              `imap4.1 <https://tools.ietf.org/html/rfc3501>`_,\n                 `email <https://tools.ietf.org/html/rfc2822>`_,\n                 `imap related rfcs <https://github.com/ikvk/imap_tools/blob/master/docs/imap_related_rfcs.txt>`_\n===============  ================================================================================================\n\n.. contents::\n\ninstallation\n------------\n::\n\n    $ pip install imap-tools\n\nguide\n-----\n\nbasic\n^^^^^\n\ninfo about lib are at: *this page*, docstrings, issues, pull requests, examples, source, stackoverflow.com\n\n.. code-block:: python\n\n    from imap_tools import mailbox, and\n\n    # get date, subject and body len of all emails from inbox folder\n    with mailbox('imap.mail.com').login('test@mail.com', 'pwd') as mailbox:\n        for msg in mailbox.fetch():\n            print(msg.date, msg.subject, len(msg.text or msg.html))\n\n`description of this^ example <https://github.com/ikvk/imap_tools/blob/master/examples/basic.py>`_.\n\nmailbox, mailboxtls, mailboxunencrypted - for create mailbox client. `tls example <https://github.com/ikvk/imap_tools/blob/master/examples/tls.py>`_.\n\nbasemailbox.<auth> - login, login_utf8, xoauth2, logout - authentication functions, they support context manager.\n\nbasemailbox.fetch - first searches email uids by criteria in current folder, then fetch and yields `mailmessage <#email-attributes>`_, args:\n\n* *criteria* = 'all', message search criteria, `query builder <#search-criteria>`_\n* *charset* = 'us-ascii', indicates charset of the strings that appear in the search criteria. see rfc2978\n* *limit* = none, limit on the number of read emails, useful for actions with a large number of messages, like \"move\"\n* *mark_seen* = true, mark emails as seen on fetch\n* *reverse* = false, in order from the larger date to the smaller\n* *headers_only* = false, get only email headers (without text, html, attachments)\n* *bulk* = false, false - fetch each message separately per n commands - low memory consumption, slow; true - fetch all messages per 1 command - high memory consumption, fast\n\nbasemailbox.uids - search mailbox for matching message uids in current folder, returns [str | none], none when mailmessage.from_bytes used, args:\n\n* *criteria* = 'all', message search criteria, `query builder <#search-criteria>`_\n* *charset* = 'us-ascii', indicates charset of the strings that appear in the search criteria. see rfc2978\n\nbasemailbox.<action> - `copy, move, delete, flag, append <#actions-with-emails>`_\n\nbasemailbox.folder - `folder manager <#actions-with-folders>`_\n\nbasemailbox.idle - `idle manager <#idle-workflow>`_\n\nbasemailbox.numbers - search mailbox for matching message numbers in current folder, returns [str]\n\nbasemailbox.client - imaplib.imap4/imap4_ssl client instance.\n\nemail attributes\n^^^^^^^^^^^^^^^^\n\nmailmessage and mailattachment public attributes are cached by functools.lru_cache\n\n.. code-block:: python\n\n    for msg in mailbox.fetch():  # generator: imap_tools.mailmessage\n        msg.uid          # str | none: '123'\n        msg.subject      # str: 'some subject \u4f60 \u043f\u0440\u0438\u0432\u0435\u0442'\n        msg.from_        # str: 'bart\u00f6lke@ya.ru'\n        msg.to           # tuple: ('iam@goo.ru', 'friend@ya.ru', )\n        msg.cc           # tuple: ('cc@mail.ru', )\n        msg.bcc          # tuple: ('bcc@mail.ru', )\n        msg.reply_to     # tuple: ('reply_to@mail.ru', )\n        msg.date         # datetime.datetime: 1900-1-1 for unparsed, may be naive or with tzinfo\n        msg.date_str     # str: original date - 'tue, 03 jan 2017 22:26:59 +0500'\n        msg.text         # str: 'hello \u4f60 \u043f\u0440\u0438\u0432\u0435\u0442'\n        msg.html         # str: '<b>hello \u4f60 \u043f\u0440\u0438\u0432\u0435\u0442</b>'\n        msg.flags        # tuple: ('\\\\seen', '\\\\flagged', 'encrypted')\n        msg.headers      # dict: {'received': ('from 1.m.ru', 'from 2.m.ru'), 'anti-virus': ('clean',)}\n        msg.size_rfc822  # int: 20664 bytes - size info from server (*useful with headers_only arg)\n        msg.size         # int: 20377 bytes - size of received message\n\n        for att in msg.attachments:  # list: imap_tools.mailattachment\n            att.filename             # str: 'cat.jpg'\n            att.payload              # bytes: b'\\xff\\xd8\\xff\\xe0\\'\n            att.content_id           # str: 'part45.06020801.00060008@mail.ru'\n            att.content_type         # str: 'image/jpeg'\n            att.content_disposition  # str: 'inline'\n            att.part                 # email.message.message: original object\n            att.size                 # int: 17361 bytes\n\n        msg.obj              # email.message.message: original object\n        msg.from_values      # imap_tools.emailaddress | none\n        msg.to_values        # tuple: (imap_tools.emailaddress,)\n        msg.cc_values        # tuple: (imap_tools.emailaddress,)\n        msg.bcc_values       # tuple: (imap_tools.emailaddress,)\n        msg.reply_to_values  # tuple: (imap_tools.emailaddress,)\n        # emailaddress(name='ya', email='im@ya.ru')  # \"full\" property = 'ya <im@ya.ru>'\n\nsearch criteria\n^^^^^^^^^^^^^^^\n\nyou can pass *\"criteria\"* argument to 3 methods of mailbox: *fetch, uids, numbers*. criteria can be of three types:\n\n.. code-block:: python\n\n    from imap_tools import and\n\n    mailbox.fetch(and(subject='weather'))  # query, the str-like object\n    mailbox.fetch('text \"hello\"')          # str\n    mailbox.fetch(b'text \"\\xd1\\x8f\"')      # bytes\n\nuse *\"charset\"* argument for encode criteria to the desired encoding. if criteria is bytes - encoding will be ignored.\n\n.. code-block:: python\n\n    mailbox.uids(a(subject='\u0436\u0451\u043b\u0442\u044b\u0439'), charset='utf8')\n\nquery builder implements all search logic described in `rfc3501 <https://tools.ietf.org/html/rfc3501#section-6.4.4>`_.\nit uses this classes:\n\n========  =====  ========================================== ======================================\nclass     alias  description                                arguments\n========  =====  ========================================== ======================================\nand       a      combine conditions by logical \"and\"        search keys (see table below) | str\nor        o      combine conditions by logical \"or\"         search keys (see table below) | str\nnot       n      invert the result of a logical expression  and/or instances | str\nheader    h      header value for search by header key      name: str, value: str\nuidrange  u      uid range value for search by uid key      start: str, end: str\n========  =====  ========================================== ======================================\n\nsee `query examples <https://github.com/ikvk/imap_tools/blob/master/examples/search.py>`_. a few examples:\n\n.. code-block:: python\n\n    from imap_tools import a, and, or, not\n    # and\n    a(text='hello', new=true)  # '(text \"hello\" new)'\n    # or\n    or(text='hello', date=datetime.date(2000, 3, 15))  # '(or text \"hello\" on 15-mar-2000)'\n    # not\n    not(text='hello', new=true)  # 'not (text \"hello\" new)'\n    # complex\n    a(or(from_='from@ya.ru', text='\"the text\"'), not(or(a(answered=false), a(new=true))), to='to@ya.ru')\n    # python note: you can't do: a(text='two', not(subject='one'))\n    a(not(subject='one'), text='two')  # use kwargs after logic classes (args)\n\nsearch key table. key types marked with `*` can accepts a sequence of values like list, tuple, set or generator.\n\n=============  ===============  ======================  ================================================================\nkey            types            results                 description\n=============  ===============  ======================  ================================================================\nanswered       bool             `answered/unanswered`   with/without the answered flag\nseen           bool             `seen/unseen`           with/without the seen flag\nflagged        bool             `flagged/unflagged`     with/without the flagged flag\ndraft          bool             `draft/undraft`         with/without the draft flag\ndeleted        bool             `deleted/undeleted`     with/without the deleted flag\nkeyword        str*             keyword key             with the specified keyword flag\nno_keyword     str*             unkeyword key           without the specified keyword flag\n`from_`        str*             from `\"from@ya.ru\"`     contain specified str in envelope struct's from field\nto             str*             to `\"to@ya.ru\"`         contain specified str in envelope struct's to field\nsubject        str*             subject \"hello\"         contain specified str in envelope struct's subject field\nbody           str*             body \"some_key\"         contain specified str in body of the message\ntext           str*             text \"some_key\"         contain specified str in header or body of the message\nbcc            str*             bcc `\"bcc@ya.ru\"`       contain specified str in envelope struct's bcc field\ncc             str*             cc `\"cc@ya.ru\"`         contain specified str in envelope struct's cc field\ndate           datetime.date*   on 15-mar-2000          internal date is within specified date\ndate_gte       datetime.date*   since 15-mar-2000       internal date is within or later than the specified date\ndate_lt        datetime.date*   before 15-mar-2000      internal date is earlier than the specified date\nsent_date      datetime.date*   senton 15-mar-2000      rfc2822 date: header is within the specified date\nsent_date_gte  datetime.date*   sentsince 15-mar-2000   rfc2822 date: header is within or later than the specified date\nsent_date_lt   datetime.date*   sentbefore 1-mar-2000   rfc2822 date: header is earlier than the specified date\nsize_gt        int >= 0         larger 1024             rfc2822 size larger than specified number of octets\nsize_lt        int >= 0         smaller 512             rfc2822 size smaller than specified number of octets\nnew            true             new                     have the recent flag set but not the seen flag\nold            true             old                     do not have the recent flag set\nrecent         true             recent                  have the recent flag set\nall            true             all                     all, criteria by default\nuid            iter(str)/str/u  uid 1,2,17              corresponding to the specified unique identifier set\nheader         h(str, str)*     header \"a-spam\" \"5.8\"   have a header that contains the specified str in the text\ngmail_label    str*             x-gm-labels \"label1\"    have this gmail label\n=============  ===============  ======================  ================================================================\n\nserver side search notes:\n\n* for string search keys a message matches if the string is a substring of the field. the matching is case-insensitive.\n* when searching by dates - email's time and timezone are disregarding.\n\nactions with emails\n^^^^^^^^^^^^^^^^^^^\n\nfirst of all read about uid `at rfc3501 <https://tools.ietf.org/html/rfc3501#section-2.3.1.1>`_.\n\naction's uid_list arg may takes:\n\n* str, that is comma separated uids\n* sequence, that contains str uids\n\nto get uids, use the maibox methods: uids, fetch.\n\nfor actions with a large number of messages imap command may be too large and will cause exception at server side,\nuse 'limit' argument for fetch in this case.\n\n.. code-block:: python\n\n    with mailbox('imap.mail.com').login('test@mail.com', 'pwd', initial_folder='inbox') as mailbox:\n\n        # copy messages with uid in 23,27 from current folder to folder1\n        mailbox.copy('23,27', 'folder1')\n\n        # move all messages from current folder to inbox/folder2\n        mailbox.move(mailbox.uids(), 'inbox/folder2')\n\n        # delete messages with 'cat' word in its html from current folder\n        mailbox.delete([msg.uid for msg in mailbox.fetch() if 'cat' in msg.html])\n\n        # flag unseen messages in current folder as \\seen, \\flagged and tag1\n        flags = (imap_tools.mailmessageflags.seen, imap_tools.mailmessageflags.flagged, 'tag1')\n        mailbox.flag(mailbox.uids(and(seen=false)), flags, true)\n\n        # append: add message to mailbox directly, to inbox folder with \\seen flag and now date\n        with open('/tmp/message.eml', 'rb') as f:\n            msg = imap_tools.mailmessage.from_bytes(f.read())  # *or use bytes instead mailmessage\n        mailbox.append(msg, 'inbox', dt=none, flag_set=[imap_tools.mailmessageflags.seen])\n\nactions with folders\n^^^^^^^^^^^^^^^^^^^^\n\nbasemailbox.login/xoauth2 has initial_folder arg, that is \"inbox\" by default, use none for not set folder on login.\n\n.. code-block:: python\n\n    with mailbox('imap.mail.com').login('test@mail.com', 'pwd') as mailbox:\n\n        # list: get all subfolders of the specified folder (root by default)\n        for f in mailbox.folder.list('inbox'):\n            print(f)  # folderinfo(name='inbox|cats', delim='|', flags=('\\\\unmarked', '\\\\haschildren'))\n\n        # set: select folder for work\n        mailbox.folder.set('inbox')\n\n        # get: get selected folder\n        current_folder = mailbox.folder.get()\n\n        # create: create new folder\n        mailbox.folder.create('inbox|folder1')\n\n        # exists: check is folder exists (shortcut for list)\n        is_exists = mailbox.folder.exists('inbox|folder1')\n\n        # rename: set new name to folder\n        mailbox.folder.rename('folder3', 'folder4')\n\n        # subscribe: subscribe/unsubscribe to folder\n        mailbox.folder.subscribe('inbox|\u043f\u0430\u043f\u043a\u0430 \u0434\u0432\u0430', true)\n\n        # delete: delete folder\n        mailbox.folder.delete('folder4')\n\n        # status: get folder status info\n        stat = mailbox.folder.status('some_folder')\n        print(stat)  # {'messages': 41, 'recent': 0, 'uidnext': 11996, 'uidvalidity': 1, 'unseen': 5}\n\nidle workflow\n^^^^^^^^^^^^^\n\nidle logic are in mailbox.idle manager, its methods are in the table below:\n\n======== ============================================================================== ================================\nmethod   description                                                                    arguments\n======== ============================================================================== ================================\nstart    switch on mailbox idle mode\npoll     poll for idle responses                                                        timeout: |nbsp| optional[float]\nstop     switch off mailbox idle mode\nwait     switch on idle, poll responses, switch off idle on response, return responses  timeout: |nbsp| optional[float]\n======== ============================================================================== ================================\n\n.. code-block:: python\n\n    from imap_tools import mailbox, a\n\n    # waiting for updates 60 sec, print unseen immediately if any update\n    with mailbox('imap.my.moon').login('acc', 'pwd', 'inbox') as mailbox:\n        responses = mailbox.idle.wait(timeout=60)\n        if responses:\n            for msg in mailbox.fetch(a(seen=false)):\n                print(msg.date, msg.subject)\n        else:\n            print('no updates in 60 sec')\n\nread docstrings and see `detailed examples <https://github.com/ikvk/imap_tools/blob/master/examples/idle.py>`_.\n\nexceptions\n^^^^^^^^^^\n\nmost lib server actions raises exception if result is marked as not success.\n\ncustom lib exceptions here: `errors.py <https://github.com/ikvk/imap_tools/blob/master/imap_tools/errors.py>`_.\n\nrelease notes\n-------------\n\nhistory of important changes: `release_notes.rst <https://github.com/ikvk/imap_tools/blob/master/docs/release_notes.rst>`_\n\ncontribute\n----------\n\nif you found a bug or have a question, then:\n\n1. look for answer at: this page, issues, pull requests, examples, source, rfcs, stackoverflow.com, internet.\n2. and only then - create merge request or issue.\n\nreasons\n-------\n\n- excessive low level of `imaplib` library.\n- other libraries contain various shortcomings or not convenient.\n- open source projects make world better.\n\nthanks\n------\n\nbig thanks to people who helped develop this library:\n\n`shilkazx <https://github.com/shilkazx>`_,\n`somepad <https://github.com/somepad>`_,\n`0xthiebaut <https://github.com/0xthiebaut>`_,\n`tpyoknig <https://github.com/tpyoknig>`_,\n`parchd-1 <https://github.com/parchd-1>`_,\n`dojasoncom <https://github.com/dojasoncom>`_,\n`randomstrangerontheinternet <https://github.com/randomstrangerontheinternet>`_,\n`jonnyarnold <https://github.com/jonnyarnold>`_,\n`mitrich3000 <https://github.com/mitrich3000>`_,\n`audemed44 <https://github.com/audemed44>`_,\n`mkalioby <https://github.com/mkalioby>`_,\n`atlas0fd00m <https://github.com/atlas0fd00m>`_,\n`unqx <https://github.com/unqx>`_,\n`daitangio <https://github.com/daitangio>`_,\n`upils <https://github.com/upils>`_,\n`foosec <https://github.com/foosec>`_,\n`frispete <https://github.com/frispete>`_,\n`ph89 <https://github.com/ph89>`_,\n`amarkham09 <https://github.com/amarkham09>`_,\n`nixcodex <https://github.com/nixcodex>`_,\n`backelj <https://github.com/backelj>`_,\n`ohayak <https://github.com/ohayak>`_,\n`mwherman95926 <https://github.com/mwherman95926>`_,\n`andyfensham <https://github.com/andyfensham>`_,\n`mike-code <https://github.com/mike-code>`_,\n`aknrdureegaesr <https://github.com/aknrdureegaesr>`_,\n`ktulinger <https://github.com/ktulinger>`_,\n`samgentlemankaka <https://github.com/samgentlemankaka>`_,\n`devkral <https://github.com/devkral>`_,\n`tnusraddinov <https://github.com/tnusraddinov>`_,\n`thepeshka <https://github.com/thepeshka>`_,\n`shofstet <https://github.com/shofstet>`_,\n`the7erm <https://github.com/the7erm>`_,\n`c0da <https://github.com/c0da>`_,\n`dev4max <https://github.com/dev4max>`_,\n`ascheucher <https://github.com/ascheucher>`_,\n`borutia <https://github.com/borutia>`_,\n`nathan30 <https://github.com/nathan30>`_,\n`daniel55411 <https://github.com/daniel55411>`_,\n`rcarmo <https://github.com/rcarmo>`_,\n`bhernacki <https://github.com/bhernacki>`_,\n`ilep <https://github.com/ilep>`_,\n`thkue <https://github.com/thkue>`_,\n`repodiac <https://github.com/repodiac>`_,\n`tiuub <https://github.com/tiuub>`_,\n`yannik <https://github.com/yannik>`_,\n`pete312 <https://github.com/pete312>`_,\n`edkedk99 <https://github.com/edkedk99>`_,\n`ulissemini <https://github.com/ulissemini>`_,\n`nicarex <https://github.com/nicarex>`_,\n`ranjithnair1980 <https://github.com/ranjithnair1980>`_,\n`nickc-nz <https://github.com/nickc-nz>`_,\n`mweinelt <https://github.com/mweinelt>`_,\n`lucbouge <https://github.com/lucbouge>`_,\n`jacquelincharbonnel <https://github.com/jacquelincharbonnel>`_,\n`stumpylog <https://github.com/stumpylog>`_,\n`dimitrisstr <https://github.com/dimitrisstr>`_,\n`abionics <https://github.com/abionics>`_,\n`link2xt <https://github.com/link2xt>`_\n\nhelp the project\n----------------\n1. found a bug or figure out how to improve the library - open issue or merge request \ud83c\udfaf\n2. do not know how to improve library - try to help other open projects that you use \u270b\n3. nowhere to put your money - spend it on your family, friends, loved ones, or people around you \ud83d\udcb0\n4. star the project \u2b50\n\n\n",
  "docs_url": null,
  "keywords": "imap,imap-client,python3,python,email",
  "license": "apache-2.0",
  "name": "imap-tools",
  "package_url": "https://pypi.org/project/imap-tools/",
  "project_url": "https://pypi.org/project/imap-tools/",
  "project_urls": {
    "Homepage": "https://github.com/ikvk/imap_tools"
  },
  "release_url": "https://pypi.org/project/imap-tools/1.5.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "work with email by imap",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "kaukinvk@ya.ru",
    "vladimir_kaukin"
  ],
  "kwds": "imap_tools imaplib imap imap4 imap_related_rfcs",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_imap_tools",
  "homepage": "https://github.com/ikvk/imap_tools",
  "release_count": 99,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: cython",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# cython blis: fast blas-like operations from python and cython, without the tears\n\nthis repository provides the [blis linear algebra](https://github.com/flame/blis)\nroutines as a self-contained python c-extension.\n\ncurrently, we only supports single-threaded execution, as this is actually best for our workloads (ml inference).\n\n[![azure pipelines](https://img.shields.io/azure-devops/build/explosion-ai/public/6/master.svg?logo=azure-pipelines&style=flat-square)](https://dev.azure.com/explosion-ai/public/_build?definitionid=6)\n[![pypi version](https://img.shields.io/pypi/v/blis.svg?style=flat-square&logo=pypi&logocolor=white)](https://pypi.python.org/pypi/blis)\n[![conda](https://img.shields.io/conda/vn/conda-forge/cython-blis.svg?style=flat-square&logo=conda-forge&logocolor=white)](https://anaconda.org/conda-forge/cython-blis)\n[![python wheels](https://img.shields.io/badge/wheels-%e2%9c%93-4c1.svg?longcache=true&style=flat-square&logo=python&logocolor=white)](https://github.com/explosion/wheelwright/releases)\n\n## installation\n\nyou can install the package via pip, first making sure that `pip`, `setuptools`,\nand `wheel` are up-to-date:\n\n```bash\npip install -u pip setuptools wheel\npip install blis\n```\n\nwheels should be available, so installation should be fast. if you want to install from source and you're on windows, you'll need to install llvm.\n\n### building blis for alternative architectures\n\nthe provided wheels should work on x86_64 and osx/arm64 architectures. unfortunately we do not currently know a way to provide different wheels for alternative architectures, and we cannot provide a single binary that works everywhere. so if the wheel doesn't work for your cpu, you'll need to specify source distribution, and tell blis your cpu architecture using the `blis_arch` environment variable.\n\n#### a) install with auto-detected cpu support\n\n```bash\npip install spacy --no-binary blis\n```\n\n#### b) install using an existing configuration\n\nprovide an architecture from the [supported configurations](https://github.com/explosion/cython-blis/tree/v0.9.0/blis/_src/make).\n\n```bash\nblis_arch=\"power9\" pip install spacy --no-binary blis\n```\n\n#### c) install with generic arch support\n\n> \u26a0\ufe0f `generic` is not optimized for any particular cpu and is extremely slow. only recommended for testing!\n\n```bash\nblis_arch=\"generic\" pip install spacy --no-binary blis\n```\n\n#### d) build specific support\n\nin order to compile blis, `cython-blis` bundles makefile scripts for specific architectures, that are compiled by running the blis build system and logging the commands. we do not yet have logs for every architecture, as there are some architectures we have not had access to.\n\n[see here](https://github.com/flame/blis/blob/0.9.0/config_registry) for list of\narchitectures. for example, here's how to build support for the intel architecture `knl`:\n\n```bash\ngit clone https://github.com/explosion/cython-blis && cd cython-blis\ngit pull && git submodule init && git submodule update && git submodule status\npython3 -m venv venv\nsource venv/bin/activate\npip install -u pip setuptools wheel\npip install -r requirements.txt\n./bin/generate-make-jsonl linux knl\nblis_arch=\"knl\" python setup.py build_ext --inplace\nblis_arch=\"knl\" python setup.py bdist_wheel\n```\n\nfingers crossed, this will build you a wheel that supports your platform. you\ncould then [submit a pr](https://github.com/explosion/cython-blis/pulls) with\nthe `blis/_src/make/linux-knl.jsonl` and\n`blis/_src/include/linux-knl/blis.h` files so that you can run:\n\n```bash\nblis_arch=\"knl\" pip install --no-binary=blis\n```\n\n## usage\n\ntwo apis are provided: a high-level python api, and direct\n[cython](http://cython.org) access, which provides fused-type, nogil\ncython bindings to the underlying blis linear algebra library. fused\ntypes are a simple template mechanism, allowing just a touch of\ncompile-time generic programming:\n\n```python\ncimport blis.cy\na = <float*>calloc(nn * ni, sizeof(float))\nb = <float*>calloc(no * ni, sizeof(float))\nc = <float*>calloc(nr_b0 * nr_b1, sizeof(float))\nblis.cy.gemm(blis.cy.no_transpose, blis.cy.no_transpose,\n             no, ni, nn,\n             1.0, a, ni, 1, b, no, 1,\n             1.0, c, no, 1)\n```\n\nbindings have been added as we've needed them. please submit pull requests if\nthe library is missing some functions you require.\n\n## development\n\nto build the source package, you should run the following command:\n\n```bash\n./bin/update-vendored-source\n```\n\nthis populates the `blis/_src` folder for the various architectures, using the\n`flame-blis` submodule.\n\n## updating the build files\n\nin order to compile the blis sources, we use jsonl files that provide the\nexplicit compiler flags. we build these jsonl files by running blis's build\nsystem, and then converting the log. this avoids us having to replicate the\nbuild system within python: we just use the jsonl to make a bunch of subprocess\ncalls. to support a new os/architecture combination, we have to provide the\njsonl file and the header.\n\n### linux\n\nthe linux build files need to be produced from within the manylinux2014\ndocker container, so that they will be compatible with the wheel building\nprocess.\n\nfirst, install docker. then do the following to start the container:\n\n    sudo docker run -it quay.io/pypa/manylinux2014_x86_64:latest\n\nonce within the container, the following commands should check out the repo and\nbuild the jsonl files for the generic arch:\n\n    mkdir /usr/local/repos\n    cd /usr/local/repos\n    git clone https://github.com/explosion/cython-blis && cd cython-blis\n    git pull && git submodule init && git submodule update && git submodule\n    status\n    /opt/python/cp36-cp36m/bin/python -m venv env3.6\n    source env3.6/bin/activate\n    pip install -r requirements.txt\n    ./bin/generate-make-jsonl linux generic --export\n    blis_arch=generic python setup.py build_ext --inplace\n    # n.b.: don't copy to /tmp, docker cp doesn't work from there.\n    cp blis/_src/include/linux-generic/blis.h /linux-generic-blis.h\n    cp blis/_src/make/linux-generic.jsonl /\n\nthen from a new terminal, retrieve the two files we need out of the container:\n\n    sudo docker ps -l # get the container id\n    # when i'm in vagrant, i need to go via cat -- but then i end up with dummy\n    # lines at the top and bottom. sigh. if you don't have that problem and\n    # sudo docker cp just works, just copy the file.\n    sudo docker cp aa9d42588791:/linux-generic-blis.h - | cat > linux-generic-blis.h\n    sudo docker cp aa9d42588791:/linux-generic.jsonl - | cat > linux-generic.jsonl\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "blis",
  "package_url": "https://pypi.org/project/blis/",
  "project_url": "https://pypi.org/project/blis/",
  "project_urls": {
    "Homepage": "https://github.com/explosion/cython-blis"
  },
  "release_url": "https://pypi.org/project/blis/0.9.1/",
  "requires_dist": [
    "numpy (>=1.15.0)"
  ],
  "requires_python": "",
  "summary": "the blis blas-like linear algebra library, as a self-contained c-extension.",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "contact@explosion.ai",
    "explosion"
  ],
  "kwds": "blas blis pipelines cython pip",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_blis",
  "homepage": "https://github.com/explosion/cython-blis",
  "release_count": 46,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
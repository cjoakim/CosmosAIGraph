{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: multimedia :: sound/audio"
  ],
  "description": "# pyogg\n\npyogg provides bindings for xiph.org's ogg vorbis, ogg opus and flac audio file formats.\n\nit comes bundled with the required dynamic libraries (.dll) in the windows wheel (.whl) distributions.\n\nthe required libraries include the ogg library (e.g. libogg.dll) and at least either ogg opus' libraries (e.g. libopus.dll, libopusfile.dll) and / or ogg vorbis' libraries (e.g. libvorbis.dll, libvorbisfile.dll) \nto support opus and vorbis respectively, or the flac c library (e.g. libflac.dll) for flac support.\n\nyou can install pyogg using pypi.\n\n\tpip install pyogg\n\n\nall the functions, structures and datatypes are the same as in the c++ implementation, except for some that couldn't be translated.\nif you want to use them natively you will have to use ctypes' data types.\nplease refer to the official documentation and the c++ headers.\n\nyou can import the various functions from pyogg.ogg, pyogg.vorbis, pyogg.opus and pyogg.flac or use the predefined classes and functions from pyogg.\n\npyogg is not capable of playing files, however, you can use openal for normal or even 3d playback with [pyopenal](https://github.com/zuzu-typ/pyopenal).\n\nhere's a reference for pyogg's own classes and functions:\n\n\t<class> pyogg.vorbisfile(path)\n\t\t# opens and reads an ogg vorbis file to a buffer. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<int> vorbisfile.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> vorbisfile.frequency\n\t\t\t# audio frequency (e.g. 48000, 44100, etc.)\n\n\t\t<str or bytes> vorbisfile.buffer\n\t\t\t# audio data\n\n\t\t<int> vorbisfile.buffer_length\n\t\t\t# length of the buffer\n\n\t<class> pyogg.opusfile(path)\n\t\t# opens and reads an ogg opus file to a buffer. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<int> opusfile.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> opusfile.frequency\n\t\t\t# audio frequency (always 48000)\n\n\t\t<opus_int16_p> opusfile.buffer\n\t\t\t# audio data\n\n\t\t<int> opusfile.buffer_length\n\t\t\t# length of the buffer\n\n\t<class> pyogg.flacfile(path)\n\t\t# opens and reads a flac file to a buffer. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<int> flacfile.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> flacfile.frequency\n\t\t\t# audio frequency (e.g. 48000, 44100, etc.)\n\n\t\t<flac__int16_array> flacfile.buffer\n\t\t\t# audio data\n\n\t\t<int> flacfile.buffer_length\n\t\t\t# length of the buffer\n\n\t<class> pyogg.vorbisfilestream(path)\n\t\t# opens an ogg vorbis file and prepares it for repeated reading. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<vorbis.oggvorbis_file> vorbisfilestream.vf\n\t\t\t# vorbis audio file stream\n\n\t\t<int> vorbisfilestream.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> vorbisfilestream.frequency\n\t\t\t# audio frequency (always 48000)\n\n\t\t<method> get_buffer() -> [buffer, buffer_length] or none\n\t\t\t# reads some audio data into a buffer (to set the buffer size, see pyoggsetstreambuffersize)\n\t\t\t# if the file reaches it's end this method returns none\n\t\t\t\t<str or bytes> buffer # a buffer containing some audio data\n\t\t\t\t<int> buffer_length   # length of the buffer\n\n\t\t<method> clean_up() -> none\n\t\t\t# deletes the buffer and closes the file\n\n\t<class> pyogg.opusfilestream(path)\n\t\t# opens an ogg opus file and prepares it for repeated reading. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<opus.oggopusfile> opusfilestream.of\n\t\t\t# opus audio file stream\n\n\t\t<int> opusfilestream.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> opusfilestream.frequency\n\t\t\t# audio frequency (always 48000)\n\n\t\t<method> get_buffer() -> [buffer, buffer_length] or none\n\t\t\t# reads some audio data into a buffer (to set the buffer size, see pyoggsetstreambuffersize)\n\t\t\t# if the file reaches it's end this method returns none\n\t\t\t\t<opus_int16_p> buffer # a buffer containing some audio data\n\t\t\t\t<int> buffer_length   # length of the buffer\n\n\t\t<method> clean_up() -> none\n\t\t\t# deletes the buffer and closes the file\n\n\t<class> pyogg.flacfilestream(path)\n\t\t# opens a flac file and prepares it for repeated reading. \n\t\t\t<str> path # path to the file (can be relative or absolute)\n\n\t\t<flac__streamdecoder> flacfilestream.decoder\n\t\t\t# flac audio file stream decoder\n\n\t\t<int> flacfilestream.channels\n\t\t\t# how many audio channels the audio data has (1 = mono, 2 = stereo, etc.)\n\n\t\t<int> flacfilestream.frequency\n\t\t\t# audio frequency (e.g. 48000, 44100, etc.)\n\n\t\t<method> get_buffer() -> [buffer, buffer_length] or none\n\t\t\t# reads some audio data into a buffer (to set the buffer size, see pyoggsetstreambuffersize)\n\t\t\t# if the file reaches it's end this method returns none\n\t\t\t\t<flac__int16_array> buffer # a buffer containing some audio data\n\t\t\t\t<int> buffer_length   # length of the buffer\n\n\t\t<method> clean_up() -> none\n\t\t\t# deletes the buffer and closes the file\n\n\t<method> pyogg.pyoggsetstreambuffersize(size)\n\t\t# changes the maximum size for stream buffers (initially 8192)\n\t\t\t<int> size # how much data each stream buffer holds\n\n\n\n",
  "docs_url": null,
  "keywords": "xiph ogg vorbis opus flac sound playback audio",
  "license": "bsd 3-clause \"new\" or \"revised\"",
  "name": "pyogg",
  "package_url": "https://pypi.org/project/PyOgg/",
  "project_url": "https://pypi.org/project/PyOgg/",
  "project_urls": {
    "Homepage": "https://github.com/Zuzu-Typ/PyOgg"
  },
  "release_url": "https://pypi.org/project/PyOgg/0.6.14a1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "xiph.org's ogg vorbis, opus and flac for python",
  "version": "0.6.14a1",
  "releases": [],
  "developers": [
    "zuzu",
    "zuzu.typ@gmail.com"
  ],
  "kwds": "opusfilestream opusfile opus_int16_p flacfilestream flac__streamdecoder",
  "license_kwds": "bsd 3-clause \"new\" or \"revised\"",
  "libtype": "pypi",
  "id": "pypi_pyogg",
  "homepage": "https://github.com/zuzu-typ/pyogg",
  "release_count": 25,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: networking"
  ],
  "description": "mac vendor lookup\n=================\n\nthis library provides an easy way to get vendor information from a mac address. it contains a local copy of the ieee's\noui prefix list. it has an asynchronous interface using python 3's asyncio as well as a regular synchronous interface\nfor old-school usage.\n\n## installation\n\n    pip install mac-vendor-lookup\n\n## basic usage\n\n```python\nfrom mac_vendor_lookup import maclookup\n\nprint(maclookup().lookup(\"00:80:41:12:fe\"))\n```\n\noutput:\n\n> veb kombinat robotron\n\n## update the vendor list\n\nthe library contains a list of mac prefixes obtained at build-time. if you need up-to-date information, you can\ndownload a fresh copy of the list directly from ieee with `maclookup.update_vendors` or `asyncmaclookup.update_vendors`:\n\n```python\nfrom mac_vendor_lookup import maclookup\n\nmac = maclookup()\nmac.update_vendors()  # <- this can take a few seconds for the download\n\ndef find_mac(mac_address):\n    print(mac.lookup(mac_address))\n\n```\n\n## vendor list custom location or path\n\nthe library stores and looks for the list of mac prefixes in a group predefined defaults paths. if a custom \ndirectory is required, then override the class variable `cache_path` of `class basemaclookup(...)` from it default \nlocation of: `os.path.expanduser('~/.cache/mac-vendors.txt')` to your prefered location.\n\n```python\nfrom mac_vendor_lookup import maclookup, basemaclookup\n\nbasemaclookup.cache_path = \"/relative/or/absolute/path/to/the/prefered/storage/location\"\nmac = maclookup()\nmac.update_vendors()  # <- this can take a few seconds for the download and it will be stored in the new path\n\ndef find_mac(mac_address):\n    print(mac.lookup(mac_address))\n\n```\n\n## async interface\n\nthere is also an asynchronous interface available:\n\n```python\nfrom mac_vendor_lookup import asyncmaclookup\n\nasync def main():\n    mac = asyncmaclookup()\n    print(await mac.lookup(\"98:ed:5c:ff:ee:01\"))\n```\n\noutput:\n\n> tesla motors, inc\n\n## command line interface\n\nthis library provides a rudimentary command line interface:\n\n```bash\n$ mac_vendor_lookup 50-d3-7f-00-01-00\nyu fly mikly way science and technology co., ltd.\n$ python3 -m mac_vendor_lookup 00:26:12:12:fe\nspace exploration technologies\n```\n\n\n",
  "docs_url": null,
  "keywords": "mac-address oui lookup",
  "license": "",
  "name": "mac-vendor-lookup",
  "package_url": "https://pypi.org/project/mac-vendor-lookup/",
  "project_url": "https://pypi.org/project/mac-vendor-lookup/",
  "project_urls": {
    "Homepage": "https://github.com/bauerj/mac_vendor_lookup"
  },
  "release_url": "https://pypi.org/project/mac-vendor-lookup/0.1.12/",
  "requires_dist": [
    "aiofiles",
    "aiohttp",
    "coverage ; extra == 'test'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": "<4, >=3.5",
  "summary": "find the vendor for a given mac address",
  "version": "0.1.12",
  "releases": [],
  "developers": [
    "johann_bauer",
    "pypi.org@bauerj.eu"
  ],
  "kwds": "mac_vendor_lookup mac_address find_mac basemaclookup maclookup",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_mac_vendor_lookup",
  "homepage": "https://github.com/bauerj/mac_vendor_lookup",
  "release_count": 10,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_aiohttp",
    "pypi_coverage",
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://github.com/asottile/pyupgrade/actions/workflows/main.yml/badge.svg)](https://github.com/asottile/pyupgrade/actions/workflows/main.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/pyupgrade/main.svg)](https://results.pre-commit.ci/latest/github/asottile/pyupgrade/main)\n\npyupgrade\n=========\n\na tool (and pre-commit hook) to automatically upgrade syntax for newer\nversions of the language.\n\n## installation\n\n```bash\npip install pyupgrade\n```\n\n## as a pre-commit hook\n\nsee [pre-commit](https://github.com/pre-commit/pre-commit) for instructions\n\nsample `.pre-commit-config.yaml`:\n\n```yaml\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.15.0\n    hooks:\n    -   id: pyupgrade\n```\n\n## implemented features\n\n### set literals\n\n```diff\n-set(())\n+set()\n-set([])\n+set()\n-set((1,))\n+{1}\n-set((1, 2))\n+{1, 2}\n-set([1, 2])\n+{1, 2}\n-set(x for x in y)\n+{x for x in y}\n-set([x for x in y])\n+{x for x in y}\n```\n\n### dictionary comprehensions\n\n```diff\n-dict((a, b) for a, b in y)\n+{a: b for a, b in y}\n-dict([(a, b) for a, b in y])\n+{a: b for a, b in y}\n```\n\n### replace unnecessary lambdas in `collections.defaultdict` calls\n\n```diff\n-defaultdict(lambda: [])\n+defaultdict(list)\n-defaultdict(lambda: list())\n+defaultdict(list)\n-defaultdict(lambda: {})\n+defaultdict(dict)\n-defaultdict(lambda: dict())\n+defaultdict(dict)\n-defaultdict(lambda: ())\n+defaultdict(tuple)\n-defaultdict(lambda: tuple())\n+defaultdict(tuple)\n-defaultdict(lambda: set())\n+defaultdict(set)\n-defaultdict(lambda: 0)\n+defaultdict(int)\n-defaultdict(lambda: 0.0)\n+defaultdict(float)\n-defaultdict(lambda: 0j)\n+defaultdict(complex)\n-defaultdict(lambda: '')\n+defaultdict(str)\n```\n\n### format specifiers\n\n```diff\n-'{0} {1}'.format(1, 2)\n+'{} {}'.format(1, 2)\n-'{0}' '{1}'.format(1, 2)\n+'{}' '{}'.format(1, 2)\n```\n\n### printf-style string formatting\n\navailability:\n- unless `--keep-percent-format` is passed.\n\n```diff\n-'%s %s' % (a, b)\n+'{} {}'.format(a, b)\n-'%r %2f' % (a, b)\n+'{!r} {:2f}'.format(a, b)\n-'%(a)s %(b)s' % {'a': 1, 'b': 2}\n+'{a} {b}'.format(a=1, b=2)\n```\n\n### unicode literals\n\n```diff\n-u'foo'\n+'foo'\n-u\"foo\"\n+'foo'\n-u'''foo'''\n+'''foo'''\n```\n\n### invalid escape sequences\n\n```diff\n # strings with only invalid sequences become raw strings\n-'\\d'\n+r'\\d'\n # strings with mixed valid / invalid sequences get escaped\n-'\\n\\d'\n+'\\n\\\\d'\n-u'\\d'\n+r'\\d'\n # this fixes a syntax error in python3.3+\n-'\\n'\n+r'\\n'\n```\n\n### `is` / `is not` comparison to constant literals\n\nin python3.8+, comparison to literals becomes a `syntaxwarning` as the success\nof those comparisons is implementation specific (due to common object caching).\n\n```diff\n-x is 5\n+x == 5\n-x is not 5\n+x != 5\n-x is 'foo'\n+x == 'foo'\n```\n\n### `.encode()` to bytes literals\n\n```diff\n-'foo'.encode()\n+b'foo'\n-'foo'.encode('ascii')\n+b'foo'\n-'foo'.encode('utf-8')\n+b'foo'\n-u'foo'.encode()\n+b'foo'\n-'\\xa0'.encode('latin1')\n+b'\\xa0'\n```\n\n### extraneous parens in `print(...)`\n\na fix for [python-modernize/python-modernize#178]\n\n```diff\n # ok: printing an empty tuple\n print(())\n # ok: printing a tuple\n print((1,))\n # ok: parenthesized generator argument\n sum((i for i in range(3)), [])\n # fixed:\n-print((\"foo\"))\n+print(\"foo\")\n```\n\n[python-modernize/python-modernize#178]: https://github.com/python-modernize/python-modernize/issues/178\n\n### constant fold `isinstance` / `issubclass` / `except`\n\n```diff\n-isinstance(x, (int, int))\n+isinstance(x, int)\n\n-issubclass(y, (str, str))\n+issubclass(y, str)\n\n try:\n     raises()\n-except (error1, error1, error2):\n+except (error1, error2):\n     pass\n```\n\n### unittest deprecated aliases\n\nrewrites [deprecated unittest method aliases](https://docs.python.org/3/library/unittest.html#deprecated-aliases) to their non-deprecated forms.\n\n```diff\n from unittest import testcase\n\n\n class mytests(testcase):\n     def test_something(self):\n-        self.failunlessequal(1, 1)\n+        self.assertequal(1, 1)\n-        self.assertequals(1, 1)\n+        self.assertequal(1, 1)\n```\n\n### `super()` calls\n\n```diff\n class c(base):\n     def f(self):\n-        super(c, self).f()\n+        super().f()\n```\n\n### \"new style\" classes\n\n#### rewrites class declaration\n\n```diff\n-class c(object): pass\n+class c: pass\n-class c(b, object): pass\n+class c(b): pass\n```\n\n#### removes `__metaclass__ = type` declaration\n\n```diff\n class c:\n-    __metaclass__ = type\n```\n\n### forced `str(\"native\")` literals\n\n```diff\n-str()\n+''\n-str(\"foo\")\n+\"foo\"\n```\n\n### `.encode(\"utf-8\")`\n\n```diff\n-\"foo\".encode(\"utf-8\")\n+\"foo\".encode()\n```\n\n### `# coding: ...` comment\n\nas of [pep 3120], the default encoding for python source is utf-8\n\n```diff\n-# coding: utf-8\n x = 1\n```\n\n[pep 3120]: https://www.python.org/dev/peps/pep-3120/\n\n### `__future__` import removal\n\navailability:\n- by default removes `nested_scopes`, `generators`, `with_statement`,\n  `absolute_import`, `division`, `print_function`, `unicode_literals`\n- `--py37-plus` will also remove `generator_stop`\n\n```diff\n-from __future__ import with_statement\n```\n\n### remove unnecessary py3-compat imports\n\n```diff\n-from io import open\n-from six.moves import map\n-from builtins import object  # python-future\n```\n\n### import replacements\n\navailability:\n- `--py36-plus` (and others) will replace imports\n\nsee also [reorder-python-imports](https://github.com/asottile/reorder_python_imports#removing--rewriting-obsolete-six-imports)\n\nsome examples:\n\n```diff\n-from collections import deque, mapping\n+from collections import deque\n+from collections.abc import mapping\n```\n\n```diff\n-from typing import sequence\n+from collections.abc import sequence\n```\n\n```diff\n-from typing_extensions import concatenate\n+from typing import concatenate\n```\n\n### rewrite `mock` imports\n\navailability:\n- [unless `--keep-mock` is passed on the commandline](https://github.com/asottile/pyupgrade/issues/314).\n\n```diff\n-from mock import patch\n+from unittest.mock import patch\n```\n\n### `yield` => `yield from`\n\n```diff\n def f():\n-    for x in y:\n-        yield x\n+    yield from y\n-    for a, b in c:\n-        yield (a, b)\n+    yield from c\n```\n\n### python2 and old python3.x blocks\n\n```diff\n import sys\n-if sys.version_info < (3,):  # also understands `six.py2` (and `not`), `six.py3` (and `not`)\n-    print('py2')\n-else:\n-    print('py3')\n+print('py3')\n```\n\navailability:\n- `--py36-plus` will remove python <= 3.5 only blocks\n- `--py37-plus` will remove python <= 3.6 only blocks\n- so on and so forth\n\n```diff\n # using --py36-plus for this example\n\n import sys\n-if sys.version_info < (3, 6):\n-    print('py3.5')\n-else:\n-    print('py3.6+')\n+print('py3.6+')\n\n-if sys.version_info <= (3, 5):\n-    print('py3.5')\n-else:\n-    print('py3.6+')\n+print('py3.6+')\n\n-if sys.version_info >= (3, 6):\n-    print('py3.6+')\n-else:\n-    print('py3.5')\n+print('py3.6+')\n```\n\nnote that `if` blocks without an `else` will not be rewritten as it could introduce a syntax error.\n\n### remove `six` compatibility code\n\n```diff\n-six.text_type\n+str\n-six.binary_type\n+bytes\n-six.class_types\n+(type,)\n-six.string_types\n+(str,)\n-six.integer_types\n+(int,)\n-six.unichr\n+chr\n-six.iterbytes\n+iter\n-six.print_(...)\n+print(...)\n-six.exec_(c, g, l)\n+exec(c, g, l)\n-six.advance_iterator(it)\n+next(it)\n-six.next(it)\n+next(it)\n-six.callable(x)\n+callable(x)\n-six.moves.range(x)\n+range(x)\n-six.moves.xrange(x)\n+range(x)\n\n\n-from six import text_type\n-text_type\n+str\n\n-@six.python_2_unicode_compatible\n class c:\n     def __str__(self):\n         return u'c()'\n\n-class c(six.iterator): pass\n+class c: pass\n\n-class c(six.with_metaclass(m, b)): pass\n+class c(b, metaclass=m): pass\n\n-@six.add_metaclass(m)\n-class c(b): pass\n+class c(b, metaclass=m): pass\n\n-isinstance(..., six.class_types)\n+isinstance(..., type)\n-issubclass(..., six.integer_types)\n+issubclass(..., int)\n-isinstance(..., six.string_types)\n+isinstance(..., str)\n\n-six.b('...')\n+b'...'\n-six.u('...')\n+'...'\n-six.byte2int(bs)\n+bs[0]\n-six.indexbytes(bs, i)\n+bs[i]\n-six.int2byte(i)\n+bytes((i,))\n-six.iteritems(dct)\n+dct.items()\n-six.iterkeys(dct)\n+dct.keys()\n-six.itervalues(dct)\n+dct.values()\n-next(six.iteritems(dct))\n+next(iter(dct.items()))\n-next(six.iterkeys(dct))\n+next(iter(dct.keys()))\n-next(six.itervalues(dct))\n+next(iter(dct.values()))\n-six.viewitems(dct)\n+dct.items()\n-six.viewkeys(dct)\n+dct.keys()\n-six.viewvalues(dct)\n+dct.values()\n-six.create_unbound_method(fn, cls)\n+fn\n-six.get_unbound_function(meth)\n+meth\n-six.get_method_function(meth)\n+meth.__func__\n-six.get_method_self(meth)\n+meth.__self__\n-six.get_function_closure(fn)\n+fn.__closure__\n-six.get_function_code(fn)\n+fn.__code__\n-six.get_function_defaults(fn)\n+fn.__defaults__\n-six.get_function_globals(fn)\n+fn.__globals__\n-six.raise_from(exc, exc_from)\n+raise exc from exc_from\n-six.reraise(tp, exc, tb)\n+raise exc.with_traceback(tb)\n-six.reraise(*sys.exc_info())\n+raise\n-six.assertcountequal(self, a1, a2)\n+self.assertcountequal(a1, a2)\n-six.assertraisesregex(self, e, r, fn)\n+self.assertraisesregex(e, r, fn)\n-six.assertregex(self, s, r)\n+self.assertregex(s, r)\n\n # note: only for *literals*\n-six.ensure_binary('...')\n+b'...'\n-six.ensure_str('...')\n+'...'\n-six.ensure_text('...')\n+'...'\n```\n\n### `open` alias\n\n```diff\n-with io.open('f.txt') as f:\n+with open('f.txt') as f:\n     ...\n```\n\n\n### redundant `open` modes\n\n```diff\n-open(\"foo\", \"u\")\n+open(\"foo\")\n-open(\"foo\", \"ur\")\n+open(\"foo\")\n-open(\"foo\", \"ub\")\n+open(\"foo\", \"rb\")\n-open(\"foo\", \"rub\")\n+open(\"foo\", \"rb\")\n-open(\"foo\", \"r\")\n+open(\"foo\")\n-open(\"foo\", \"rt\")\n+open(\"foo\")\n-open(\"f\", \"r\", encoding=\"utf-8\")\n+open(\"f\", encoding=\"utf-8\")\n-open(\"f\", \"wt\")\n+open(\"f\", \"w\")\n```\n\n\n### `oserror` aliases\n\n```diff\n # also understands:\n # - ioerror\n # - windowserror\n # - mmap.error and uses of `from mmap import error`\n # - select.error and uses of `from select import error`\n # - socket.error and uses of `from socket import error`\n\n def throw():\n-    raise environmenterror('boom')\n+    raise oserror('boom')\n\n def catch():\n     try:\n         throw()\n-    except environmenterror:\n+    except oserror:\n         handle_error()\n```\n\n### `timeouterror` aliases\n\navailability:\n- `--py310-plus` for `socket.timeout`\n- `--py311-plus` for `asyncio.timeout`\n\n```diff\n\n def throw(a):\n     if a:\n-        raise asyncio.timeouterror('boom')\n+        raise timeouterror('boom')\n     else:\n-        raise socket.timeout('boom')\n+        raise timeouterror('boom')\n\n def catch(a):\n     try:\n         throw(a)\n-    except (asyncio.timeouterror, socket.timeout):\n+    except timeouterror:\n         handle_error()\n```\n\n### `typing.text` str alias\n\n```diff\n-def f(x: text) -> none:\n+def f(x: str) -> none:\n     ...\n```\n\n\n### unpacking list comprehensions\n\n```diff\n-foo, bar, baz = [fn(x) for x in items]\n+foo, bar, baz = (fn(x) for x in items)\n```\n\n\n### rewrite `xml.etree.celementtree` to `xml.etree.elementtree`\n\n```diff\n-import xml.etree.celementtree as et\n+import xml.etree.elementtree as et\n-from xml.etree.celementtree import xml\n+from xml.etree.elementtree import xml\n```\n\n\n### rewrite `type` of primitive\n\n```diff\n-type('')\n+str\n-type(b'')\n+bytes\n-type(0)\n+int\n-type(0.)\n+float\n```\n\n### `typing.namedtuple` / `typing.typeddict` py36+ syntax\n\navailability:\n- `--py36-plus` is passed on the commandline.\n\n```diff\n-nt = typing.namedtuple('nt', [('a', int), ('b', tuple[str, ...])])\n+class nt(typing.namedtuple):\n+    a: int\n+    b: tuple[str, ...]\n\n-d1 = typing.typeddict('d1', a=int, b=str)\n+class d1(typing.typeddict):\n+    a: int\n+    b: str\n\n-d2 = typing.typeddict('d2', {'a': int, 'b': str})\n+class d2(typing.typeddict):\n+    a: int\n+    b: str\n```\n\n### f-strings\n\navailability:\n- `--py36-plus` is passed on the commandline.\n\n```diff\n-'{foo} {bar}'.format(foo=foo, bar=bar)\n+f'{foo} {bar}'\n-'{} {}'.format(foo, bar)\n+f'{foo} {bar}'\n-'{} {}'.format(foo.bar, baz.womp)\n+f'{foo.bar} {baz.womp}'\n-'{} {}'.format(f(), g())\n+f'{f()} {g()}'\n-'{x}'.format(**locals())\n+f'{x}'\n```\n\n_note_: `pyupgrade` is intentionally timid and will not create an f-string\nif it would make the expression longer or if the substitution parameters are\nsufficiently complicated (as this can decrease readability).\n\n\n### `subprocess.run`: replace `universal_newlines` with `text`\n\navailability:\n- `--py37-plus` is passed on the commandline.\n\n```diff\n-output = subprocess.run(['foo'], universal_newlines=true)\n+output = subprocess.run(['foo'], text=true)\n```\n\n\n### `subprocess.run`: replace `stdout=subprocess.pipe, stderr=subprocess.pipe` with `capture_output=true`\n\navailability:\n- `--py37-plus` is passed on the commandline.\n\n```diff\n-output = subprocess.run(['foo'], stdout=subprocess.pipe, stderr=subprocess.pipe)\n+output = subprocess.run(['foo'], capture_output=true)\n```\n\n\n### remove parentheses from `@functools.lru_cache()`\n\navailability:\n- `--py38-plus` is passed on the commandline.\n\n```diff\n import functools\n\n-@functools.lru_cache()\n+@functools.lru_cache\n def expensive():\n     ...\n```\n\n### shlex.join\n\navailability:\n- `--py38-plus` is passed on the commandline.\n\n```diff\n-' '.join(shlex.quote(arg) for arg in cmd)\n+shlex.join(cmd)\n```\n\n### replace `@functools.lru_cache(maxsize=none)` with shorthand\n\navailability:\n- `--py39-plus` is passed on the commandline.\n\n```diff\n import functools\n\n-@functools.lru_cache(maxsize=none)\n+@functools.cache\n def expensive():\n     ...\n```\n\n\n### pep 585 typing rewrites\n\navailability:\n- file imports `from __future__ import annotations`\n    - unless `--keep-runtime-typing` is passed on the commandline.\n- `--py39-plus` is passed on the commandline.\n\n```diff\n-def f(x: list[str]) -> none:\n+def f(x: list[str]) -> none:\n     ...\n```\n\n\n### pep 604 typing rewrites\n\navailability:\n- file imports `from __future__ import annotations`\n    - unless `--keep-runtime-typing` is passed on the commandline.\n- `--py310-plus` is passed on the commandline.\n\n```diff\n-def f() -> optional[str]:\n+def f() -> str | none:\n     ...\n```\n\n```diff\n-def f() -> union[int, str]:\n+def f() -> int | str:\n     ...\n```\n\n\n### remove quoted annotations\n\navailability:\n- file imports `from __future__ import annotations`\n\n```diff\n-def f(x: 'queue.queue[int]') -> c:\n+def f(x: queue.queue[int]) -> c:\n```\n\n\n### use `datetime.utc` alias\n\navailability:\n- `--py311-plus` is passed on the commandline.\n\n```diff\n import datetime\n\n-datetime.timezone.utc\n+datetime.utc\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyupgrade",
  "package_url": "https://pypi.org/project/pyupgrade/",
  "project_url": "https://pypi.org/project/pyupgrade/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/pyupgrade"
  },
  "release_url": "https://pypi.org/project/pyupgrade/3.15.0/",
  "requires_dist": [
    "tokenize-rt (>=5.2.0)"
  ],
  "requires_python": ">=3.8.1",
  "summary": "a tool to automatically upgrade syntax for newer versions.",
  "version": "3.15.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "pyupgrade pip py3 yaml py36",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyupgrade",
  "homepage": "https://github.com/asottile/pyupgrade",
  "release_count": 166,
  "dependency_ids": [
    "pypi_tokenize_rt"
  ]
}
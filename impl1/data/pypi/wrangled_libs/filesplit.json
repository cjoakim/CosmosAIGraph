{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://badge.fury.io/py/filesplit.png\n    :target: https://badge.fury.io/py/filesplit\n\nfilesplit\n==========\n\nfile splitting and merging made easy for python programmers!\n\nthis module \n    * can split files of any size into multiple chunks and also merge them back. \n    * can handle both structured and unstructured files.\n\n\nsystem requirements\n--------------------\n\n**operating system**: windows/linux/mac\n\n**python version**: 3.x.x\n\n\ninstallation\n------------\n\nthe module is available as a part of pypi and can be easily installed\nusing ``pip``\n\n::\n\n    pip install filesplit\n\nsplit\n-----\n\ncreate an instance\n\n.. code-block:: python\n\n    from filesplit.split import split\n\n    split = split(inputfile: str, outputdir: str)\n\n``inputfile`` (str, required) - path to the original file.\n\n``outputdir`` (str, required) - output directory path to write the file splits.\n\nwith the instance created, the following methods can be used on the instance\n\n\nbysize (size: int, newline: optional[bool] = false, includeheader: optional[bool] = false, callback: optional[callable] = none) -> none\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsplits file by size.\n\nargs:\n\n``size`` (int, required): max size in bytes that is allowed in each split.\n\n``newline`` (bool, optional): setting this to true will not produce any incomplete lines in each split. defaults to false.\n\n``includeheader`` (bool, optional): setting this to true will include header in each split. the first line is treated as a header. defaults to false.\n\n``callback`` (callable, optional): callback function to invoke after each split. the callback function should accept two arguments [func (str, int)] - full path to the split file, \nsplit file size (bytes). defaults to none.\n\nreturns:\n\n``none``\n\n\nbylinecount(self, linecount: int, includeheader: optional[bool] = false, callback: optional[callable] = none) -> none\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsplits file by line count.\n\nargs:\n\n``linecount`` (int, required): max lines that is allowed in each split.\n\n``includeheader`` (bool, optional): setting this to true will include header in each split. the first line is treated as a header. defaults to false.\n\n``callback`` (callable, optional): callback function to invoke after each split. the callback function should accept two arguments [func (str, int)] - full path to the split file, \nsplit file size (bytes). defaults to none.\n\nreturns:\n\n``none``\n\nthe file splits are generated in this fashion ``[original_filename]_1.ext, [original_filename]_2.ext, .., [original_filename]_n.ext``.\n\na manifest file is also created in the output directory to keep track of the file splits. this manifest file is required for merge operation.\n\nmoreover, \n    * the delimiter for the generated splits can be changed by setting ``splitdelimiter`` property like ``split.splitdelimiter='$'``. default is ``_`` (underscore).\n    * the manifest file name for the generated splits can be changed by setting ``manfilename`` property like ``split.manfilename='man'``. default is ``manifest``.\n    * to forcefully and safely terminate the process set the property ``terminate`` to true while the process is running.\n\n\nmerge\n-----\n\ncreate an instance\n\n.. code-block:: python\n\n    from filesplit.merge import merge\n\n    merge = merge(inputdir: str, outputdir: str, outputfilename: str)\n\n``inputdir`` (str, required) - path to the directory containing file splits.\n\n``outputdir`` (str, required) - output directory path to write the merged file.\n\n``outputfilename`` (str, required) - name to use for the merged file.\n\nwith the instance created, the following method can be used on the instance\n\n\nmerge(cleanup: optional[bool] = false, callback: optional[callable] = none) -> none\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmerges the split files back into one single file.\n\nargs:\n\n``cleanup`` (bool, optional): if true, all the split files and manifest file will be purged after successful merge. defaults to false.\n\n``callback`` (callable, optional): callback function to invoke after merge. the callback function should accept two arguments [func (str, int)] - full path to the merged file, \nmerged file size (bytes). defaults to none.\n\nreturns:\n\n``none``\n\nmoreover, \n    * the manifest file name can be changed by setting ``manfilename`` property like ``merge.manfilename='man'``. \n      the manifest file name should match with the one used during the file split process and should be available in the same directory as that of file splits. default is ``manifest``.\n    * to forcefully and safely terminate the process set the property ``terminate`` to true while the process is running.\n",
  "docs_url": null,
  "keywords": "file split,filesplit,split file,splitfile",
  "license": "",
  "name": "filesplit",
  "package_url": "https://pypi.org/project/filesplit/",
  "project_url": "https://pypi.org/project/filesplit/",
  "project_urls": {
    "Bug Reports": "https://github.com/ram-jayapalan/filesplit/issues",
    "Download": "https://github.com/ram-jayapalan/filesplit/archive/refs/tags/v4.0.1.tar.gz",
    "Homepage": "https://github.com/ram-jayapalan/filesplit",
    "Source": "https://github.com/ram-jayapalan/filesplit"
  },
  "release_url": "https://pypi.org/project/filesplit/4.0.1/",
  "requires_dist": [],
  "requires_python": ">=3, <4",
  "summary": "python module that is capable of splitting files and merging it back.",
  "version": "4.0.1",
  "releases": [],
  "developers": [
    "ramp16888@gmail.com",
    "ramprakash_jayapalan"
  ],
  "kwds": "splitfile filesplit splitting split splits",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_filesplit",
  "homepage": "https://github.com/ram-jayapalan/filesplit",
  "release_count": 9,
  "dependency_ids": []
}
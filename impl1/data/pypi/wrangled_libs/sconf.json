{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "![](https://github.com/khanrc/sconf/workflows/build/badge.svg)\n[![codecov](https://codecov.io/gh/khanrc/sconf/branch/master/graph/badge.svg)](https://codecov.io/gh/khanrc/sconf)\n![pypi - python version](https://img.shields.io/pypi/pyversions/sconf)\n![pypi](https://img.shields.io/pypi/v/sconf?color=blue)\n\n# sconf: simple config system supporting cli modification\n\nsconf is yaml-based simple config library.\n\n\n## features\n\n- supports merging multiple configs\n- supports cli modification by argparse-like interface\n- supports coloring modified key-values\n- supports global access to config objects\n\n\n## install\n\n```\n$ pip install sconf\n```\n\n## usage\n\n### quickstart\n\n#### a minimal example\n\n```py\nfrom sconf import config\n\ncfg = config(default=\"configs/defaults.yaml\")\ncfg.argv_update()  # apply cli modification\n```\n\nyou can modify `cfg` by cli in the runtime, by argparse-like interface.\n\n#### init with argparse and multiple configs\n\n```py\nimport argparse\nfrom sconf import config\n\nparser = argparse.argumentparser()\nparser.add_argument(\"name\")\nparser.add_argument(\"config_paths\", nargs=\"*\")\nparser.add_argument(\"--show\", action=\"store_true\", default=false)\nargs, left_argv = parser.parse_known_args()\n\n# merging multiple configs if given\ncfg = config(*args.config_paths, default=\"configs/defaults.yaml\")\ncfg.argv_update(left_argv)\n```\n\nrun:\n\n```\npython train.py example configs/exp.yaml --lr 0.1\n```\n\nthe resulting `cfg` is based on `configs/defaults.yaml`, merged with `configs/exp.yaml`, and updated by `--lr 0.1`.\n\n### dumps\n\nsconf dumps contents with coloring modified items.\n\n```py\nprint(cfg.dumps())\n\n# if you do not want to colorize:\nprint(cfg.dumps(modified_color=none))\n```\n\n### access\n\n- item access with dictionary-like interfaces:\n\n```py\n# access\nprint(cfg['key'])\nprint(cfg['key1']['key2'])\n\n# get\nprint(cfg.get('non-key', 'default-value'))\n\n# unpacking\nfunction(**cfg['model'])\n```\n\n- attribute access:\n\n```py\nprint(cfg.key)\nprint(cfg.key1.key2)\n```\n\n- **note** that the attribute access returns method object for the duplicated key, unlike the item access.\n\n```py\ncfg = config({'get': 2})\n\nprint(cfg['get'])  # 2\nprint(cfg.get)  # method object\n```\n\n\n### cli modification\n\nsconf supports cli modification like argparse. also you can access to the child key using dot.\n\n```\n# yaml example\nbatch_size: 64\nmodel:\n    encoder:\n        n_channels: 64\n    decoder:\n        n_channels: 64\n```\n\n- cli modification:\n\n```\n> python train.py --batch_size 128 --model.encoder.n_channels 32\n```\n\n- accessing via partial key is also available:\n\n```\n> python train.py --encoder.n_channels 32\n```\n\n- use triple dashs `---` if you want to modify multiple keys:\n\n```\n# modifying encoder.n_channels and decoder.n_channels both.\n> python train.py ---n_channels 32\n```\n\n\n### global access to config object\n\nglobal access is useful in ml project, even though it can be anti-pattern in sw engineering.\n\n```py\n# main.py\ncfg = config({'weight_decay': 0.001})  # first config is automatically registered to 'default' key\n\n# train.py\ncfg = config.get_default()  # get 'default' config\nprint(cfg.weight_decay)  # 0.001\n```\n\nnote `from_registry` helps global access to multiple configs.\n\n\n## note\n\n- sconf use utf-8 as a default encoding. if you want different encoding, use file pointer (`open` function) instead of file path as a key.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "sconf",
  "package_url": "https://pypi.org/project/sconf/",
  "project_url": "https://pypi.org/project/sconf/",
  "project_urls": {
    "Homepage": "https://github.com/khanrc/sconf"
  },
  "release_url": "https://pypi.org/project/sconf/0.2.5/",
  "requires_dist": [
    "ruamel.yaml",
    "munch"
  ],
  "requires_python": ">=3.6",
  "summary": "simple config supporting cli modification",
  "version": "0.2.5",
  "releases": [],
  "developers": [
    "khanrc",
    "khanrc@naver.com"
  ],
  "kwds": "sconf pyversions cli svg pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sconf",
  "homepage": "https://github.com/khanrc/sconf",
  "release_count": 9,
  "dependency_ids": [
    "pypi_munch",
    "pypi_ruamel.yaml"
  ]
}
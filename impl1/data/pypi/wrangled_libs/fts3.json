{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "license :: osi approved :: apache software license",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "fts3-rest-flask\n===============\n\nfts3-rest-flask is the restful api for the fts3 service.  \n\nthis is the front-facing component to communicate with the fts3 service,\nallowing submission of transfers, querying transfer updates, as well as configuration management.  \n\nthe project consists of an apache module running python3 + flask. \nit is also a direct continuation of the former [fts-rest][1], where the migration \ndecision and evaluation can be seen [here][2].\n\n## installation\n\nthe project should be installed via rpms, provided via the fts repository.\n\n### installing the client\n\nmake sure to have the fts repositories enabled:\n- [production][3] repository: official rpms deemed ready for production\n- [development][4] repository: rpms built on the latest `develop` branch commit\n\n#### installing the client:\n```shell\n$ yum install -y fts-rest-client\n```\n\n#### installing the server\n\nthe project needs `mod_wsgi` built for python 3.6, which on centos 7 is provided by the `rh-python36-mod_wsgi` package.\nall other requirements are specified in the spec files.\n```shell\n$ yum-config-manager --enable centos-sclo-rh\n$ yum install -y rh-python36-mod_wsgi\n$ yum install -y fts-rest-server\n```\n\nconfiguring the server is done via the following two configuration files:\n- `/etc/fts3/fts3restconfig`\n- `/etc/htpd/conf.d/fts3rest.conf`\n\n## development\n\nthe project is tracked using jira, under the [fts project][5] (requires cern log-in). \nsoon the project will be mirrored on github, where issues and pull requests are also accepted (and encouraged!). \n\nfor development purposes, using a virtual environment is encouraged.\n\n### git workflow\n\nthis project follows a simplified [gitflow][6] model. the main branch is the `develop` branch,\nwith `master` being reserved only for tagged released.\n\nfeature branches are developed separately and merged into the `develop` branch.\nwhen preparing a release, either `develop` is merged directly into `master`\nor a release branch is created. production hotfixes are allowed only in case of necessity.\nboth release and hotfix branch changes must be merged back into `develop`.\n\n### development workflow\n\nwhen taking on a task, the following workflow model should be followed:\n1. create a jira ticket for the identified problem\n2. estimate the magnitude of the task:\n    - small changes can go directly on the `develop` branch\n    - larger changes must go into a separate feature branch\n3. implement and test your changes\n4. merge them into the `develop` branch:\n    - merge large changes via merge requests and request code review\n    - changes affecting the database must also be code reviewed!\n5. close the jira ticket and mark the appropriate `fixversion`\n\n### continuous integration\n\nthe project uses gitlab-ci for ci/cd. the [pipeline][7] runs for every push, in every branch:\n- black: checks code must be formatted with `black`\n- pylint: checks for syntax errors (runs for every supported python3 version)\n  - if you are sure that pylint is mistaken, add `# pylint: skip-file` at the beginning of the relevant file\n- functional tests: run for every supported python3 version\n- bandit: detects potential security issues in the code\n  - allowed to fail as it flags many false positives.\n  - to ignore a false positive, append `# nosec` to the offending line\n- build: rpm for the client and server, plus `sdist` and `wheel` for the client\n- deploy: upload client and server rpm to the fts testing repository\n\nmerge requests will proceed only if the pipeline succeeds.  \nin case of emergency the pipeline can be [skipped][8].\n\nthe pipeline runs in a container from the image tagged as `ci`. the dockerfile is in the `.gitlab-ci` directory and the \nimage is hosted in the container registry of this project. the image contains the pre-installed python environment \nin order to speed up ci execution. when new environment is desired (such as new or upgraded dependencies), \na new image must be created via the `.gitlab-ci/docker/docker_push.sh` script.\n\n#### during development\n\ndevelopers may add the `.gitlab-ci/pre-commit` hook to their local repository, \nenabling the following checks before every commit:\n- run `black` to format the changed files\n- run `pylint` only on the changed files\n  - note: as pylint works better when it is run on the full project, some rules have been disabled\n- run `radon` and `bandit` only on the changed files\n  - in case of false positives, the hook can be skipped with the commit option `--no-verify`\n\na convenience script is provided to install the `pre-commit` hook:\n```shell\n$ cd .gitlab-ci/\n$ ./precommit_install.sh\n```\n\n### python dependencies\n\nthe project uses [pip-tools][9] to manage dependencies:\n- `requirements.in`: list of dependencies for the production app\n- `dev-requirements.in`: extra list of packages used for development (e.g. static code analysis)\n\n### setting up the development environment\n\nthe `pipcompile.sh` script is provided to help set up a development environment:\n```shell\n$ virtualenv venv\n$ source venv/bin/activate\n(venv) $ pip install --upgrade pip\n(venv) $ pip install pip-tools\n(venv) $ ./pipcompile.sh --sync\n```\n\nrunning `pipcompile.sh` will generate `requirements.txt`. running the command with `--sync`\nwill also synchronize the virtual environment with the requirements.\n\nadditionally, you will need to configure the httpd config file. \na template version for development is offered at `src/fts3rest/fts3rest_dev_conf.in`. \nto fill it with the right paths and install it, run the `install-httpd-dev.sh` script:\n```shell\n$ cd src/fts3rest/\n$ ./install-httpd-dev.sh\n```\n\n### functional tests\n\nthe functional tests reside under `src/fts3rest/fts3rest/tests/functional`. \n\nin oder to run the tests, a fully functional mysql-compatible database is required.\nthe database must have the appropriate fts schema and the connection details configured \nin the fts3 rest config file. \n\nexample on centos 7 with locally installed `mariadb`: \n```shell\n$ wget https://gitlab.cern.ch/fts/fts3/-/raw/v3.11.0/src/db/schema/mysql/fts-schema-7.0.0.sql\n$ mysql -u root --execute \"create database ftsflask;\"\n$ mysql -u root --execute \"create user 'fts3'@'%';\"\n$ mysql -u root --execute \"grant all privileges on ftsflask.* to 'fts3'@'%' identified by 'ftsflaskpass';\"\n$ mysql -u fts3 --password=ftsflaskpass ftsflask\nmariadb [ftsflask]> source fts-schema-7.0.0.sql\n```\n\nbefore running the tests, make sure to include the `fts3rest` project in the `pythonpath`.  \nadditionally, the `fts3testconfig` environment variable can also be set to use a different config file during testing:\n```shell\n$ export pythonpath=\"${project_dir}/src:${project_dir}/src/fts3rest\"\n$ export fts3testconfig=\"${project_dir}/src/fts3rest/fts3rest/tests/fts3testconfig\"\n```\n\nfor ease-of-use, the `runtests.sh` script is provided:\n```shell\n$ cd src/fts3rest\n$ ./runtests.sh\n```\n\n**note**: oidc tests are not run in the ci as the container would need a client registered and this has not yet been set up.   \nto run oidc tests in a development environment, the environment variables `xdc_clientid` and `xdc_clientsecret` must be set.\n\n### building packages\n\nin order to build rpm packages, two utility scripts are provided \nfor the client and server: `fts-rest-client.sh` and `fts-rest-server.sh`.\n\nthe following example shows how to build server packages:\n```shell\n$ ./packaging/server/fts-rest-server.sh\n$ tree \"build/server/rpms\"\n```\n\n## useful links\n\n- documentation: https://fts3-docs.web.cern.ch/fts3-docs/fts-rest/docs/index.html\n- fts repository: https://fts-repo.web.cern.ch/fts-repo/\n- apache license, version 2.0: https://www.apache.org/licenses/license-2.0\n- support channels: fts-support@cern.ch\n- development team contact: fts-devel@cern.ch \n\n\n[1]: https://gitlab.cern.ch/fts/fts-rest\n[2]: https://its.cern.ch/jira/browse/fts-1496\n[3]: https://fts-repo.web.cern.ch/fts-repo/el7/x86_64/\n[4]: https://fts-repo.web.cern.ch/fts-repo/testing/el7/x86_64/\n[5]: https://its.cern.ch/jira/projects/fts/issues\n[6]: https://nvie.com/posts/a-successful-git-branching-model/\n[7]: https://gitlab.cern.ch/fts/fts-rest-flask/-/pipelines\n[8]: https://docs.gitlab.com/ee/ci/yaml/#skipping-jobs\n[9]: https://github.com/jazzband/pip-tools\n\n[10]: https://fts3-docs.web.cern.ch/fts3-docs/fts-rest/docs/index.html\n[11]: https://www.apache.org/licenses/license-2.0\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "fts3",
  "package_url": "https://pypi.org/project/fts3/",
  "project_url": "https://pypi.org/project/fts3/",
  "project_urls": {
    "Homepage": "https://gitlab.cern.ch/fts/fts-rest-flask"
  },
  "release_url": "https://pypi.org/project/fts3/3.12.2/",
  "requires_dist": [
    "M2Crypto",
    "requests",
    "setuptools (>=39)"
  ],
  "requires_python": ">=3.6",
  "summary": "fts python3 cli and libraries",
  "version": "3.12.2",
  "releases": [],
  "developers": [
    "cern",
    "fts-devel@cern.ch"
  ],
  "kwds": "fts3restconfig fts3rest_dev_conf fts3rest mod_wsgi flask",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_fts3",
  "homepage": "https://gitlab.cern.ch/fts/fts-rest-flask",
  "release_count": 4,
  "dependency_ids": [
    "pypi_m2crypto",
    "pypi_requests",
    "pypi_setuptools"
  ]
}
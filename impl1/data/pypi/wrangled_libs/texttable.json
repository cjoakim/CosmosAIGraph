{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "# texttable\n\npython module to create simple ascii tables\n\n## availability\n\nthis module is available on [pypi](https://pypi.org/project/texttable/), and has been packaged for several linux/unix platforms\n([debian](https://packages.debian.org/search?&searchon=names&keywords=python-texttable+),\n[freebsd](https://www.freebsd.org/cgi/ports.cgi?query=texttable&stype=all), fedora, suse...).\n\n## dependencies\n\nif available, [cjkwrap](https://github.com/fgallaire/cjkwrap) library is used instead of textwrap, for a better wrapping of cjk text.\n\nif available, [wcwidth](https://github.com/jquast/wcwidth) library is used for a better rendering (basic emoji support).\n\n## documentation\n\n```\nname\n    texttable - module to create simple ascii tables\n\nfile\n    /usr/local/lib/python2.7/dist-packages/texttable.py\n\ndescription\n\n    example:\n\n        table = texttable()\n        table.set_cols_align([\"l\", \"r\", \"c\"])\n        table.set_cols_valign([\"t\", \"m\", \"b\"])\n        table.add_rows([[\"name\", \"age\", \"nickname\"],\n                        [\"mr\\nxavier\\nhuon\", 32, \"xav'\"],\n                        [\"mr\\nbaptiste\\nclement\", 1, \"baby\"],\n                        [\"mme\\nlouise\\nbourgeau\", 28, \"lou\\n\\nloue\"]])\n        print(table.draw())\n        print()\n\n        table = texttable()\n        table.set_deco(texttable.header)\n        table.set_cols_dtype(['t',  # text\n                              'f',  # float (decimal)\n                              'e',  # float (exponent)\n                              'i',  # integer\n                              'a']) # automatic\n        table.set_cols_align([\"l\", \"r\", \"r\", \"r\", \"l\"])\n        table.add_rows([[\"text\",    \"float\", \"exp\", \"int\", \"auto\"],\n                        [\"abcd\",    \"67\",    654,   89,    128.001],\n                        [\"efghijk\", 67.5434, .654,  89.6,  12800000000000000000000.00023],\n                        [\"lmn\",     5e-78,   5e-78, 89.4,  .000000000000128],\n                        [\"opqrstu\", .023,    5e+78, 92.,   12800000000000000000000]])\n        print(table.draw())\n\n    result:\n\n        +----------+-----+----------+\n        |   name   | age | nickname |\n        +==========+=====+==========+\n        | mr       |     |          |\n        | xavier   |  32 |          |\n        | huon     |     |   xav'   |\n        +----------+-----+----------+\n        | mr       |     |          |\n        | baptiste |   1 |          |\n        | clement  |     |   baby   |\n        +----------+-----+----------+\n        | mme      |     |   lou    |\n        | louise   |  28 |          |\n        | bourgeau |     |   loue   |\n        +----------+-----+----------+\n\n         text     float       exp      int     auto\n        ==============================================\n        abcd      67.000   6.540e+02    89   128.001\n        efghijk   67.543   6.540e-01    90   1.280e+22\n        lmn        0.000   5.000e-78    89   0.000\n        opqrstu    0.023   5.000e+78    92   1.280e+22\n\nclasses\n    class texttable\n     |  methods defined here:\n     |\n     |  __init__(self, max_width=80)\n     |      constructor\n     |\n     |      - max_width is an integer, specifying the maximum width of the table\n     |      - if set to 0, size is unlimited, therefore cells won't be wrapped\n     |\n     |  add_row(self, array)\n     |      add a row in the rows stack\n     |\n     |      - cells can contain newlines and tabs\n     |\n     |  add_rows(self, rows, header=true)\n     |      add several rows in the rows stack\n     |\n     |      - the 'rows' argument can be either an iterator returning arrays,\n     |        or a by-dimensional array\n     |      - 'header' specifies if the first row should be used as the header\n     |        of the table\n     |\n     |  draw(self)\n     |      draw the table\n     |\n     |      - the table is returned as a whole string\n     |\n     |  header(self, array)\n     |      specify the header of the table\n     |\n     |  reset(self)\n     |      reset the instance\n     |\n     |      - reset rows and header\n     |\n     |  set_chars(self, array)\n     |      set the characters used to draw lines between rows and columns\n     |\n     |      - the array should contain 4 fields:\n     |\n     |          [horizontal, vertical, corner, header]\n     |\n     |      - default is set to:\n     |\n     |          ['-', '|', '+', '=']\n     |\n     |  set_cols_align(self, array)\n     |      set the desired columns alignment\n     |\n     |      - the elements of the array should be either \"l\", \"c\" or \"r\":\n     |\n     |          * \"l\": column flushed left\n     |          * \"c\": column centered\n     |          * \"r\": column flushed right\n     |\n     |  set_cols_dtype(self, array)\n     |      set the desired columns datatype for the cols.\n     |\n     |      - the elements of the array should be either a callable or any of\n     |        \"a\", \"t\", \"f\", \"e\" or \"i\":\n     |\n     |          * \"a\": automatic (try to use the most appropriate datatype)\n     |          * \"t\": treat as text\n     |          * \"f\": treat as float in decimal format\n     |          * \"e\": treat as float in exponential format\n     |          * \"i\": treat as int\n     |          * \"b\": treat as boolean\n     |          * a callable: should return formatted string for any value given\n     |\n     |      - by default, automatic datatyping is used for each column\n     |\n     |  set_cols_valign(self, array)\n     |      set the desired columns vertical alignment\n     |\n     |      - the elements of the array should be either \"t\", \"m\" or \"b\":\n     |\n     |          * \"t\": column aligned on the top of the cell\n     |          * \"m\": column aligned on the middle of the cell\n     |          * \"b\": column aligned on the bottom of the cell\n     |\n     |  set_cols_width(self, array)\n     |      set the desired columns width\n     |\n     |      - the elements of the array should be integers, specifying the\n     |        width of each column. for example:\n     |\n     |              [10, 20, 5]\n     |\n     |  set_deco(self, deco)\n     |      set the table decoration\n     |\n     |      - 'deco' can be a combination of:\n     |\n     |          texttable.border: border around the table\n     |          texttable.header: horizontal line below the header\n     |          texttable.hlines: horizontal lines between rows\n     |          texttable.vlines: vertical lines between columns\n     |\n     |         all of them are enabled by default\n     |\n     |      - example:\n     |\n     |          texttable.border | texttable.header\n     |\n     |  set_header_align(self, array)\n     |      set the desired header alignment\n     |\n     |      - the elements of the array should be either \"l\", \"c\" or \"r\":\n     |\n     |          * \"l\": column flushed left\n     |          * \"c\": column centered\n     |          * \"r\": column flushed right\n     |\n     |  set_max_width(self, max_width)\n     |      set the maximum width of the table\n     |\n     |      - max_width is an integer, specifying the maximum width of the table\n     |      - if set to 0, size is unlimited, therefore cells won't be wrapped\n     |\n     |  set_precision(self, width)\n     |      set the desired precision for float/exponential formats\n     |\n     |      - width must be an integer >= 0\n     |\n     |      - default value is set to 3\n     |\n     |  ----------------------------------------------------------------------\n     |  data and other attributes defined here:\n     |\n     |  border = 1\n     |\n     |  header = 2\n     |\n     |  hlines = 4\n     |\n     |  vlines = 8\n\ndata\n    __all__ = ['texttable', 'arraysizeerror']\n    __author__ = 'gerome fournier <jef(at)foutaise.org>'\n    __credits__ = 'jeff kowalczyk:\\n    - textwrap improved import\\n ...at...\n    __license__ = 'mit'\n    __version__ = '1.7.0'\n\nversion\n    1.7.0\n\nauthor\n    gerome fournier <jef(at)foutaise.org>\n\ncredits\n    jeff kowalczyk:\n        - textwrap improved import\n        - comment concerning header output\n\n    anonymous:\n        - add_rows method, for adding rows in one go\n\n    sergey simonenko:\n        - redefined len() function to deal with non-ascii characters\n\n    roger lew:\n        - columns datatype specifications\n\n    brian peterson:\n        - better handling of unicode errors\n\n    frank sachsenheim:\n        - add python 2/3-compatibility\n\n    maximilian hils:\n        - fix minor bug for python 3 compatibility\n\n    frinkelpi:\n        - preserve empty lines\n```\n\n## forks\n\n* [latextable](https://github.com/jaearly/latextable) is a fork of texttable that provide a latex backend.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "texttable",
  "package_url": "https://pypi.org/project/texttable/",
  "project_url": "https://pypi.org/project/texttable/",
  "project_urls": {
    "Download": "https://github.com/foutaise/texttable/archive/v1.7.0.tar.gz",
    "Homepage": "https://github.com/foutaise/texttable/"
  },
  "release_url": "https://pypi.org/project/texttable/1.7.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "module to create simple ascii tables",
  "version": "1.7.0",
  "releases": [],
  "developers": [
    "gerome_fournier",
    "jef@foutaise.org"
  ],
  "kwds": "texttable cjkwrap textwrap ascii unicode",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_texttable",
  "homepage": "https://github.com/foutaise/texttable/",
  "release_count": 29,
  "dependency_ids": []
}
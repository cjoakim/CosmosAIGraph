{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: clustering",
    "topic :: system :: software distribution",
    "topic :: system :: systems administration"
  ],
  "description": "*fab-classic* is a python (2.7 or 3.4+) library and command-line tool\nfor streamlining the use of ssh for application deployment or systems\nadministration tasks.\n\nfab-classic is forked from `fabric 1.14 <https://github.com/fabric/fabric/tree/1.14>`_\nand is intended to add only bug fixes and compatibility patches, for projects\nalready using fabric-1.x in some way. it includes python3 compatibility patches\nfrom `fabric3 <https://github.com/mathiasertl/fabric/>`_.\n\nupstream *fabric* is now on version 2.x. fabric-2.x is python3 compatible,\nand comes *after* fabric3. fabric-2.x has significant compatibility-breaking\nchanges, in order to fix some long-standing limitations.\n\n\ninstall\n-------\n\nfab-classic is `on pypi <https://pypi.org/project/fab-classic/>`_,\nso you can ``pip install fab-classic``\n\nbe sure to ``pip uninstall fabric`` first if you happen to have it installed,\nbecause *fab-classic* uses the same import name \"fabric\" and entrypoint (tool)\nname \"fab\".\n\nstarting with version 1.16, *fab-classic* depends on\n`paramiko-ng <https://github.com/ploxiln/paramiko-ng/>`_ instead of\n`paramiko <https://github.com/paramiko/paramiko/>`_. both of those packages\nare imported with the name ``paramiko``, and unfortunately that means that you\nshould make sure you uninstall *paramiko* before *paramiko-ng* is installed,\nor you will get strange issues (even if things seem to work at first).\n\nstarting with version 1.18, you can switch back to depending on the package\nnamed *paramiko* by setting the environment variable ``paramiko_replace=1``\nwhile installing *fab-classic*::\n\n    paramiko_replace=1 pip install --no-binary fab-classic fab-classic==1.18.0\n\n(*paramiko-ng* also supports ``paramiko_replace``,\nsee `paramiko-ng#installation <https://github.com/ploxiln/paramiko-ng/#installation>`_)\n\n\ndocumentation\n-------------\n\napi documentation: https://ploxiln.github.io/fab-classic/\n\nchangelog: https://github.com/ploxiln/fab-classic/releases\n\nfor a quick command reference, run ``fab --help``\n\n\nusage introduction\n------------------\n\nfab-classic provides a basic suite of operations for executing local or remote shell\ncommands (normally or via ``sudo``) and uploading/downloading files, as well as\nauxiliary functionality such as prompting the running user for input, or\naborting execution.\n\ntypical use involves creating a python module containing one or more functions,\nthen executing them via the ``fab`` command-line tool. below is a small but\ncomplete \"fabfile\" containing a single task:\n\n.. code-block:: python\n\n    from fabric.api import run\n\n    def host_type():\n        run('uname -s')\n\nif you save the above as ``fabfile.py`` (the default module that\n``fab`` loads), you can run the tasks defined in it on one or more\nservers, like so::\n\n    $ fab -h localhost,linuxbox host_type\n    [localhost] run: uname -s\n    [localhost] out: darwin\n    [linuxbox] run: uname -s\n    [linuxbox] out: linux\n\n    done.\n    disconnecting from localhost... done.\n    disconnecting from linuxbox... done.\n\nin addition to use via the ``fab`` tool, fabric's components may be imported\ninto other python code, providing a pythonic interface to the ssh protocol\nsuite at a higher level than that provided by the ``paramiko-ng`` library\n(which fabric itself uses).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "fab-classic",
  "package_url": "https://pypi.org/project/fab-classic/",
  "project_url": "https://pypi.org/project/fab-classic/",
  "project_urls": {
    "Homepage": "https://github.com/ploxiln/fab-classic"
  },
  "release_url": "https://pypi.org/project/fab-classic/1.19.2/",
  "requires_dist": [
    "paramiko-ng",
    "six (>=1.10.0)"
  ],
  "requires_python": "",
  "summary": "fab-classic is a simple, pythonic tool for remote execution and deployment.",
  "version": "1.19.2",
  "releases": [],
  "developers": [
    "jeff@bitprophet.org",
    "jeff_forcier",
    "pierce.lopez@gmail.com",
    "pierce_lopez"
  ],
  "kwds": "fabric3 fabric fabfile fab python3",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fab_classic",
  "homepage": "https://github.com/ploxiln/fab-classic",
  "release_count": 16,
  "dependency_ids": [
    "pypi_paramiko_ng",
    "pypi_six"
  ]
}
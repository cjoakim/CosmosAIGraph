{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: software distribution",
    "typing :: typed"
  ],
  "description": "requirements parser\n===================\n\n[![python ci](https://github.com/madpah/requirements-parser/actions/workflows/poetry.yml/badge.svg)](https://github.com/madpah/requirements-parser/actions/workflows/poetry.yml)\n[![documentation status](http://readthedocs.org/projects/requirements-parser/badge/?version=latest)](http://requirements-parser.readthedocs.io/en/latest/?badge=latest)\n[![license](https://img.shields.io/badge/license-apache_2.0-blue.svg)](https://opensource.org/licenses/apache-2.0)\n\nthis is a small python module for parsing [pip](http://www.pip-installer.org/) requirement files.\n\nthe goal is to parse everything in the \n[pip requirement file format](https://pip.pypa.io/en/stable/reference/pip_install/#requirements-file-format) spec.\n\ninstallation\n============\n\n    pip install requirements-parser\n\nor\n\n    poetry add requirements-parser\n\nexamples\n========\n\nrequirements parser can parse a file-like object or a text string.\n\n``` {.python}\n>>> import requirements\n>>> with open('requirements.txt', 'r') as fd:\n...     for req in requirements.parse(fd):\n...         print(req.name, req.specs)\ndjango [('>=', '1.11'), ('<', '1.12')]\nsix [('==', '1.10.0')]\n```\n\nit can handle most if not all of the options in requirement files that\ndo not involve traversing the local filesystem. these include:\n\n-   editables (`-e git+https://github.com/toastdriven/pyelasticsearch.git]{.title-ref}`)\n-   version control uris\n-   egg hashes and subdirectories (`[\\#egg=django-haystack&subdirectory=setup]{.title-ref}`)\n-   extras ([docparser\\[pdf\\]]{.title-ref})\n-   urls\n\ndocumentation\n=============\n\nfor more details and examples, the documentation is available at:\n<http://requirements-parser.readthedocs.io>.\n\n\nchange log\n==========\n\nchange log is available on github [here]()\n\n",
  "docs_url": null,
  "keywords": "pip,requirements,parse",
  "license": "apache-2.0",
  "name": "requirements-parser",
  "package_url": "https://pypi.org/project/requirements-parser/",
  "project_url": "https://pypi.org/project/requirements-parser/",
  "project_urls": {
    "Bug Tracker": "https://github.com/madpah/requirements-parser/issues",
    "Homepage": "https://github.com/madpah/requirements-parser",
    "Repository": "https://github.com/madpah/requirements-parser"
  },
  "release_url": "https://pypi.org/project/requirements-parser/0.5.0/",
  "requires_dist": [
    "types-setuptools (>=57.0.0)"
  ],
  "requires_python": ">=3.6,<4.0",
  "summary": "this is a small python module for parsing pip requirement files.",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "paul_horton",
    "simplyecommerce@gmail.com"
  ],
  "kwds": "pip pip_install parsing parse parser",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_requirements_parser",
  "homepage": "https://github.com/madpah/requirements-parser",
  "release_count": 10,
  "dependency_ids": [
    "pypi_types_setuptools"
  ]
}
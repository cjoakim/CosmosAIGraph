{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pyzenodo\n\n[![doi](https://zenodo.org/badge/138543765.svg)](https://zenodo.org/badge/latestdoi/138543765)\n![actions status](https://github.com/space-physics/pyzenodo3/workflows/ci/badge.svg)\n[![pypi versions](https://img.shields.io/pypi/pyversions/pyzenodo3.svg)](https://pypi.python.org/pypi/pyzenodo3)\n[![pypi download stats](http://pepy.tech/badge/pyzenodo3)](http://pepy.tech/project/pyzenodo3)\n\npure python wrapper for [zenodo rest api](http://developers.zenodo.org/).\n\nallows upload / download of data from zenodo.\n\n## install\n\n```sh\npip install pyzenodo3\n```\n\nlatest development\n\n```sh\ngit clone https://github.com/scivision/pyzenodo3\n\npip install -e pyzenodo3\n```\n\n## usage\n\nhere are several examples of using zenodo from python 3.\nall of them assume you have first:\n\n```python\nimport pyzenodo3\n\nzen = pyzenodo3.zenodo()\n```\n\n### upload file to zenodo\n\n0. get a zenodo `deposit:write` [api token](https://zenodo.org/account/settings/applications/tokens/new/).\n   this token must remain private, not uploaded to github, etc.!\n1. create a simple text file `mymeta.ini` containing title, author etc. (see the example `meta.ini` in this repo)\n2. upload file to zenodo  (myapitoken is the cut-n-pasted zenodo api text token)\n\n   ```sh\n   python upload_zenodo.py myapitoken mymeta.ini myfile.zip --use-sandbox\n   ```\n\nnote the `--use-sandbox` is to avoid making junk uploads while testing out.\nonce you're sure things are working as intended, not using that flag uploads to \"real\" zenodo permanently.\n\n\n### find zenodo record by github repo\n\n```python\nrec = zen.find_record__by_github_repo('scivision/lowtran')\n```\nthis zenodo record contains the metadata that can be further manipulated in a simple class containing the data in dictionaries, with a few future helper methods.\n\n### find zenodo records by github username\n\n```python\nrecs = zen.search('scivision')\n```\nrecs is a `list` of zenodo records for the github username queried, as in the example above.\n\n## notes\n\n* we don't use `deposit:publish` api token to keep a human-in-the-loop in case of hacking of sensor nodes.",
  "docs_url": null,
  "keywords": "zenodo,open data",
  "license": "",
  "name": "pyzenodo3",
  "package_url": "https://pypi.org/project/pyzenodo3/",
  "project_url": "https://pypi.org/project/pyzenodo3/",
  "project_urls": {
    "Homepage": "https://github.com/space-physics/pyzenodo3"
  },
  "release_url": "https://pypi.org/project/pyzenodo3/1.0.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "pure python 3 wrapper for the zenodo rest api",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "michael_hirsch",
    "scivision@users.noreply.github.com"
  ],
  "kwds": "pyzenodo3 pyzenodo upload_zenodo pyversions zenodo",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyzenodo3",
  "homepage": "https://github.com/space-physics/pyzenodo3",
  "release_count": 5,
  "dependency_ids": []
}
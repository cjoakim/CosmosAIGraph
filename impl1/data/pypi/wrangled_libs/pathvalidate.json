{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: filesystems",
    "topic :: text processing"
  ],
  "description": ".. contents:: **pathvalidate**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`pathvalidate <https://github.com/thombashi/pathvalidate>`__ is a python library to sanitize/validate a string such as filenames/file-paths/etc.\n\n.. image:: https://badge.fury.io/py/pathvalidate.svg\n    :target: https://badge.fury.io/py/pathvalidate\n    :alt: pypi package version\n\n.. image:: https://anaconda.org/thombashi/pathvalidate/badges/version.svg\n    :target: https://anaconda.org/thombashi/pathvalidate\n    :alt: conda package version\n\n.. image:: https://img.shields.io/pypi/pyversions/pathvalidate.svg\n    :target: https://pypi.org/project/pathvalidate\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/pathvalidate.svg\n    :target: https://pypi.org/project/pathvalidate\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/pathvalidate/workflows/tests/badge.svg\n    :target: https://github.com/thombashi/pathvalidate/actions?query=workflow%3atests\n    :alt: linux/macos/windows ci status\n\n.. image:: https://coveralls.io/repos/github/thombashi/pathvalidate/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/pathvalidate?branch=master\n    :alt: test coverage: coveralls\n\n.. image:: https://github.com/thombashi/pathvalidate/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/pathvalidate/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\nfeatures\n---------\n- sanitize/validate a string as a:\n    - file name\n    - file path\n- sanitize will do:\n    - remove invalid characters for a target platform\n    - replace reserved names for a target platform\n    - normalize\n    - remove unprintable characters\n- argument validator/sanitizer for ``argparse`` and ``click``\n- multi platform support:\n    - ``linux``\n    - ``windows``\n    - ``macos``\n    - ``posix``\n    - ``universal`` (platform independent)\n- multibyte character support\n\nexamples\n==========\nsanitize a filename\n---------------------\n:sample code:\n    .. code-block:: python\n\n        from pathvalidate import sanitize_filename\n\n        fname = \"fi:l*e/p\\\"a?t>h|.t<xt\"\n        print(f\"{fname} -> {sanitize_filename(fname)}\\n\")\n\n        fname = \"\\0_a*b:c<d>e%f/(g)h+i_0.txt\"\n        print(f\"{fname} -> {sanitize_filename(fname)}\\n\")\n\n:output:\n    .. code-block::\n\n        fi:l*e/p\"a?t>h|.t<xt -> filepath.txt\n\n        _a*b:c<d>e%f/(g)h+i_0.txt -> _abcde%f(g)h+i_0.txt\n\nthe default target ``platform`` is ``universal``.\ni.e. the sanitized file name is valid for any platform.\n\nsanitize a filepath\n---------------------\n:sample code:\n    .. code-block:: python\n\n        from pathvalidate import sanitize_filepath\n\n        fpath = \"fi:l*e/p\\\"a?t>h|.t<xt\"\n        print(f\"{fpath} -> {sanitize_filepath(fpath)}\\n\")\n\n        fpath = \"\\0_a*b:c<d>e%f/(g)h+i_0.txt\"\n        print(f\"{fpath} -> {sanitize_filepath(fpath)}\\n\")\n\n:output:\n    .. code-block::\n\n        fi:l*e/p\"a?t>h|.t<xt -> file/path.txt\n\n        _a*b:c<d>e%f/(g)h+i_0.txt -> _abcde%f/(g)h+i_0.txt\n\nvalidate a filename\n---------------------\n:sample code:\n    .. code-block:: python\n\n        import sys\n        from pathvalidate import validationerror, validate_filename\n\n        try:\n            validate_filename(\"fi:l*e/p\\\"a?t>h|.t<xt\")\n        except validationerror as e:\n            print(f\"{e}\\n\", file=sys.stderr)\n\n        try:\n            validate_filename(\"com1\")\n        except validationerror as e:\n            print(f\"{e}\\n\", file=sys.stderr)\n\n:output:\n    .. code-block::\n\n        [pv1100] invalid characters found: platform=universal, description=invalids=('/'), value='fi:l*e/p\"a?t>h|.t<xt'\n\n        [pv1002] found a reserved name by a platform: 'com1' is a reserved name, platform=universal, reusable_name=false\n\ncheck a filename\n------------------\n:sample code:\n    .. code-block:: python\n\n        from pathvalidate import is_valid_filename, sanitize_filename\n\n        fname = \"fi:l*e/p\\\"a?t>h|.t<xt\"\n        print(f\"is_valid_filename('{fname}') return {is_valid_filename(fname)}\\n\")\n\n        sanitized_fname = sanitize_filename(fname)\n        print(f\"is_valid_filename('{sanitized_fname}') return {is_valid_filename(sanitized_fname)}\\n\")\n\n:output:\n    .. code-block::\n\n        is_valid_filename('fi:l*e/p\"a?t>h|.t<xt') return false\n\n        is_valid_filename('filepath.txt') return true\n\nfilename/filepath validator for ``argparse``\n----------------------------------------------\n:sample code:\n    .. code-block:: python\n\n        from argparse import argumentparser\n\n        from pathvalidate.argparse import validate_filename_arg, validate_filepath_arg\n\n        parser = argumentparser()\n        parser.add_argument(\"--filename\", type=validate_filename_arg)\n        parser.add_argument(\"--filepath\", type=validate_filepath_arg)\n        options = parser.parse_args()\n\n        if options.filename:\n            print(f\"filename: {options.filename}\")\n\n        if options.filepath:\n            print(f\"filepath: {options.filepath}\")\n\n:output:\n    .. code-block::\n\n        $ ./examples/argparse_validate.py --filename eg\n        filename: eg\n        $ ./examples/argparse_validate.py --filename e?g\n        usage: argparse_validate.py [-h] [--filename filename] [--filepath filepath]\n        argparse_validate.py: error: argument --filename: [pv1100] invalid characters found: invalids=(':'), value='e:g', platform=windows\n\n.. note::\n    ``validate_filepath_arg`` consider ``platform`` as of ``\"auto\"`` if the input is an absolute file path.\n\nfilename/filepath sanitizer for ``argparse``\n----------------------------------------------\n:sample code:\n    .. code-block:: python\n\n        from argparse import argumentparser\n\n        from pathvalidate.argparse import sanitize_filename_arg, sanitize_filepath_arg\n\n\n        parser = argumentparser()\n        parser.add_argument(\"--filename\", type=sanitize_filename_arg)\n        parser.add_argument(\"--filepath\", type=sanitize_filepath_arg)\n        options = parser.parse_args()\n\n        if options.filename:\n            print(\"filename: {}\".format(options.filename))\n\n        if options.filepath:\n            print(\"filepath: {}\".format(options.filepath))\n\n:output:\n    .. code-block::\n\n        $ ./examples/argparse_sanitize.py --filename e/g\n        filename: eg\n\n.. note::\n    ``sanitize_filepath_arg`` is set platform as ``\"auto\"``.\n\nfilename/filepath validator for ``click``\n-------------------------------------------\n:sample code:\n    .. code-block:: python\n\n        import click\n\n        from pathvalidate.click import validate_filename_arg, validate_filepath_arg\n\n\n        @click.command()\n        @click.option(\"--filename\", callback=validate_filename_arg)\n        @click.option(\"--filepath\", callback=validate_filepath_arg)\n        def cli(filename: str, filepath: str) -> none:\n            if filename:\n                click.echo(f\"filename: {filename}\")\n            if filepath:\n                click.echo(f\"filepath: {filepath}\")\n\n\n        if __name__ == \"__main__\":\n            cli()\n\n:output:\n    .. code-block::\n\n        $ ./examples/click_validate.py --filename ab\n        filename: ab\n        $ ./examples/click_validate.py --filepath e?g\n        usage: click_validate.py [options]\n        try 'click_validate.py --help' for help.\n\n        error: invalid value for '--filename': [pv1100] invalid characters found: invalids=('?'), value='e?g', platform=windows\n\nfilename/filepath sanitizer for ``click``\n-------------------------------------------\n:sample code:\n    .. code-block:: python\n\n        import click\n\n        from pathvalidate.click import sanitize_filename_arg, sanitize_filepath_arg\n\n\n        @click.command()\n        @click.option(\"--filename\", callback=sanitize_filename_arg)\n        @click.option(\"--filepath\", callback=sanitize_filepath_arg)\n        def cli(filename, filepath):\n            if filename:\n                click.echo(f\"filename: {filename}\")\n            if filepath:\n                click.echo(f\"filepath: {filepath}\")\n\n\n        if __name__ == \"__main__\":\n            cli()\n\n:output:\n    .. code-block::\n\n        $ ./examples/click_sanitize.py --filename a/b\n        filename: ab\n\nfor more information\n----------------------\nmore examples can be found at \nhttps://pathvalidate.rtfd.io/en/latest/pages/examples/index.html\n\ninstallation\n============\ninstallation: pip\n------------------------------\n::\n\n    pip install pathvalidate\n\ninstallation: conda\n------------------------------\n::\n\n    conda install -c thombashi pathvalidate\n\ninstallation: apt\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-pathvalidate\n\n\ndependencies\n============\npython 3.7+\nno external dependencies.\n\ndocumentation\n===============\nhttps://pathvalidate.rtfd.io/\n\nsponsors\n====================================\n.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&u=6da7176e51ae2654bcfd22564772ef8a3bb22318&v=4\n   :target: https://github.com/chasbecker\n   :alt: charles becker (chasbecker)\n.. image:: https://avatars.githubusercontent.com/u/9919?s=48&v=4\n   :target: https://github.com/github\n   :alt: onetime: github (github)\n.. image:: https://avatars.githubusercontent.com/u/46711571?s=48&u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&v=4\n   :target: https://github.com/arturi0\n   :alt: onetime: arturi0\n.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&v=4\n   :target: https://github.com/b4tman\n   :alt: onetime: dmitry belyaev (b4tman)\n\n`become a sponsor <https://github.com/sponsors/thombashi>`__\n\n",
  "docs_url": null,
  "keywords": "file,path,validation,validator,sanitization,sanitizer",
  "license": "mit license",
  "name": "pathvalidate",
  "package_url": "https://pypi.org/project/pathvalidate/",
  "project_url": "https://pypi.org/project/pathvalidate/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/pathvalidate/releases",
    "Documentation": "https://pathvalidate.rtfd.io/",
    "Homepage": "https://github.com/thombashi/pathvalidate",
    "Source": "https://github.com/thombashi/pathvalidate",
    "Tracker": "https://github.com/thombashi/pathvalidate/issues"
  },
  "release_url": "https://pypi.org/project/pathvalidate/3.2.0/",
  "requires_dist": [
    "sphinx-rtd-theme >=1.2.2 ; extra == 'docs'",
    "Sphinx >=2.4 ; extra == 'docs'",
    "urllib3 <2 ; extra == 'docs'",
    "allpairspy >=2 ; extra == 'test'",
    "click >=6.2 ; extra == 'test'",
    "Faker >=1.0.8 ; extra == 'test'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytest-md-report >=0.4.1 ; extra == 'test'",
    "pytest-discord >=0.1.4 ; (python_version >= \"3.7\") and extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "pathvalidate is a python library to sanitize/validate a string such as filenames/file-paths/etc.",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "sanitize_filepath validate_filepath_arg pathvalidate sanitize_filepath_arg sanitize_filename",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pathvalidate",
  "homepage": "https://github.com/thombashi/pathvalidate",
  "release_count": 79,
  "dependency_ids": [
    "pypi_allpairspy",
    "pypi_click",
    "pypi_faker",
    "pypi_pytest",
    "pypi_pytest_discord",
    "pypi_pytest_md_report",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_urllib3"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure identity client library for python\n\nthe azure identity library provides [microsoft entra id](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) ([formerly azure active directory](https://learn.microsoft.com/azure/active-directory/fundamentals/new-name)) token authentication support across the azure sdk. it provides a set of [`tokencredential`](https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python) implementations, which can be used to construct azure sdk clients that support microsoft entra token authentication.\n\n[source code](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity)\n| [package (pypi)](https://pypi.org/project/azure-identity/)\n| [package (conda)](https://anaconda.org/microsoft/azure-identity/)\n| [api reference documentation][ref_docs]\n| [microsoft entra id documentation](https://learn.microsoft.com/entra/identity/)\n\n## getting started\n\n### install the package\n\ninstall azure identity with pip:\n\n```sh\npip install azure-identity\n```\n\n### prerequisites\n\n- an [azure subscription](https://azure.microsoft.com/free/python)\n- python 3.7 or a recent version of python 3 (this library doesn't support end-of-life versions)\n\n### authenticate during local development\n\nwhen debugging and executing code locally, it's typical for developers to use their own accounts for authenticating calls to azure services. the azure identity library supports authenticating through developer tools to simplify local development.\n\n#### authenticate via visual studio code\n\ndevelopers using visual studio code can use the [azure account extension](https://marketplace.visualstudio.com/items?itemname=ms-vscode.azure-account) to authenticate via the editor. apps using `defaultazurecredential` or `visualstudiocodecredential` can then use this account to authenticate calls in their app when running locally.\n\nto authenticate in visual studio code, ensure the azure account extension is installed. once installed, open the **command palette** and run the **azure: sign in** command.\n\nit's a [known issue](https://github.com/azure/azure-sdk-for-python/issues/23249) that `visualstudiocodecredential` doesn't work with [azure account extension](https://marketplace.visualstudio.com/items?itemname=ms-vscode.azure-account) versions newer than **0.9.11**. a long-term fix to this problem is in progress. in the meantime, consider [authenticating via the azure cli](#authenticate-via-the-azure-cli).\n\n#### authenticate via the azure cli\n\n`defaultazurecredential` and `azureclicredential` can authenticate as the user signed in to the [azure cli][azure_cli]. to sign in to the azure cli, run `az login`. on a system with a default web browser, the azure cli will launch the browser to authenticate a user.\n\nwhen no default browser is available, `az login` will use the device code authentication flow. this flow can also be selected manually by running `az login --use-device-code`.\n\n#### authenticate via the azure developer cli\n\ndevelopers coding outside of an ide can also use the [azure developer cli][azure_developer_cli] to authenticate. applications using the `defaultazurecredential` or the `azuredeveloperclicredential` can then use this account to authenticate calls in their application when running locally.\n\nto authenticate with the [azure developer cli][azure_developer_cli], users can run the command `azd auth login`. for users running on a system with a default web browser, the azure developer cli will launch the browser to authenticate the user.\n\nfor systems without a default web browser, the `azd auth login --use-device-code` command will use the device code authentication flow.\n\n## key concepts\n\n### credentials\n\na credential is a class that contains or can obtain the data needed for a service client to authenticate requests. service clients across the azure sdk accept a credential instance when they're constructed, and use that credential to authenticate requests.\n\nthe azure identity library focuses on oauth authentication with microsoft entra id. it offers various credential classes capable of acquiring a microsoft entra access token. see the [credential classes](#credential-classes \"credential classes\") section below for a list of this library's credential classes.\n\n### defaultazurecredential\n\n`defaultazurecredential` is appropriate for most applications that will run in azure because it combines common production credentials with development credentials. `defaultazurecredential` attempts to authenticate via the following mechanisms, in this order, stopping when one succeeds:\n\n>note: `defaultazurecredential` is intended to simplify getting started with the library by handling common\n>scenarios with reasonable default behaviors. developers who want more control or whose scenario\n>isn't served by the default settings should use other credential types.\n\n![defaultazurecredential authentication flow](https://raw.githubusercontent.com/azure/azure-sdk-for-python/main/sdk/identity/azure-identity/images/mermaidjs/defaultazurecredentialauthflow.svg)\n\n1. **environment** - `defaultazurecredential` will read account information specified via [environment variables](#environment-variables \"environment variables\") and use it to authenticate.\n1. **workload identity** - if the application is deployed to azure kubernetes service with managed identity enabled, `defaultazurecredential` will authenticate with it.\n1. **managed identity** - if the application is deployed to an azure host with managed identity enabled, `defaultazurecredential` will authenticate with it.\n1. **azure cli** - if a user has signed in via the azure cli `az login` command, `defaultazurecredential` will authenticate as that user.\n1. **azure powershell** - if a user has signed in via azure powershell's `connect-azaccount` command, `defaultazurecredential` will authenticate as that user.\n1. **azure developer cli** - if the developer has authenticated via the azure developer cli `azd auth login` command, the `defaultazurecredential` will authenticate with that account.\n1. **interactive browser** - if enabled, `defaultazurecredential` will interactively authenticate a user via the default browser. this credential type is disabled by default.\n\n#### continuation policy\n\nas of version 1.14.0, `defaultazurecredential` will attempt to authenticate with all developer credentials until one succeeds, regardless of any errors previous developer credentials experienced. for example, a developer credential may attempt to get a token and fail, so `defaultazurecredential` will continue to the next credential in the flow. deployed service credentials will stop the flow with a thrown exception if they're able to attempt token retrieval, but don't receive one. prior to version 1.14.0, developer credentials would similarly stop the authentication flow if token retrieval failed, but this is no longer the case.\n\nthis allows for trying all of the developer credentials on your machine while having predictable deployed behavior.\n\n#### note about `visualstudiocodecredential`\n\ndue to a [known issue](https://github.com/azure/azure-sdk-for-python/issues/23249), `visualstudiocodecredential` has been removed from the `defaultazurecredential` token chain. when the issue is resolved in a future release, this change will be reverted.\n\n## examples\n\nthe following examples are provided below:\n\n- [authenticate with defaultazurecredential](#authenticate-with-defaultazurecredential \"authenticate with defaultazurecredential\")\n- [define a custom authentication flow with chainedtokencredential](#define-a-custom-authentication-flow-with-chainedtokencredential \"define a custom authentication flow with chainedtokencredential\")\n- [async credentials](#async-credentials \"async credentials\")\n\n### authenticate with `defaultazurecredential`\n\nmore details on configuring your environment to use the `defaultazurecredential` can be found in the class's [reference documentation][default_cred_ref].\n\nthis example demonstrates authenticating the `blobserviceclient` from the [azure-storage-blob][azure_storage_blob] library using `defaultazurecredential`.\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.storage.blob import blobserviceclient\n\ndefault_credential = defaultazurecredential()\n\nclient = blobserviceclient(account_url, credential=default_credential)\n```\n\n#### enable interactive authentication with `defaultazurecredential`\n\ninteractive authentication is disabled in the `defaultazurecredential` by default and can be enabled with a keyword argument:\n\n```python\ndefaultazurecredential(exclude_interactive_browser_credential=false)\n```\n\nwhen enabled, `defaultazurecredential` falls back to interactively authenticating via the system's default web browser when no other credential is available.\n\n#### specify a user-assigned managed identity for `defaultazurecredential`\n\nmany azure hosts allow the assignment of a user-assigned managed identity. to configure `defaultazurecredential` to authenticate a user-assigned identity, use the `managed_identity_client_id` keyword argument:\n\n```python\ndefaultazurecredential(managed_identity_client_id=client_id)\n```\n\nalternatively, set the environment variable `azure_client_id` to the identity's client id.\n\n### define a custom authentication flow with `chainedtokencredential`\n\n`defaultazurecredential` is generally the quickest way to get started developing applications for azure. for more advanced scenarios, [chainedtokencredential][chain_cred_ref] links multiple credential instances to be tried sequentially when authenticating. it will try each chained credential in turn until one provides a token or fails to authenticate due to an error.\n\nthe following example demonstrates creating a credential that will first attempt to authenticate using managed identity. the credential will fall back to authenticating via the azure cli when a managed identity is unavailable. this example uses the `eventhubproducerclient` from the [azure-eventhub][azure_eventhub] client library.\n\n```python\nfrom azure.eventhub import eventhubproducerclient\nfrom azure.identity import azureclicredential, chainedtokencredential, managedidentitycredential\n\nmanaged_identity = managedidentitycredential()\nazure_cli = azureclicredential()\ncredential_chain = chainedtokencredential(managed_identity, azure_cli)\n\nclient = eventhubproducerclient(namespace, eventhub_name, credential_chain)\n```\n\n### async credentials\n\nthis library includes a set of async apis. to use the async credentials in [azure.identity.aio][ref_docs_aio], you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). for more information, see [azure-core documentation][azure_core_transport_doc].\n\nasync credentials should be closed when they're no longer needed. each async credential is an async context manager and defines an async `close` method. for example:\n\n```python\nfrom azure.identity.aio import defaultazurecredential\n\n# call close when the credential is no longer needed\ncredential = defaultazurecredential()\n...\nawait credential.close()\n\n# alternatively, use the credential as an async context manager\ncredential = defaultazurecredential()\nasync with credential:\n  ...\n```\n\nthis example demonstrates authenticating the asynchronous `secretclient` from [azure-keyvault-secrets][azure_keyvault_secrets] with an asynchronous\ncredential.\n\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.keyvault.secrets.aio import secretclient\n\ndefault_credential = defaultazurecredential()\nclient = secretclient(\"https://my-vault.vault.azure.net\", default_credential)\n```\n\n## managed identity support\n\n[managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `defaultazurecredential` or the `managedidentitycredential` directly for the following azure services:\n\n- [azure app service and azure functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=python)\n- [azure arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n- [azure cloud shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n- [azure kubernetes service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n- [azure service fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n- [azure virtual machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n- [azure virtual machines scale sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\n### examples\n\n#### authenticate with a user-assigned managed identity\n\n```python\nfrom azure.identity import managedidentitycredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = managedidentitycredential(client_id=managed_identity_client_id)\nclient = secretclient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n#### authenticate with a system-assigned managed identity\n\n```python\nfrom azure.identity import managedidentitycredential\nfrom azure.keyvault.secrets import secretclient\n\ncredential = managedidentitycredential()\nclient = secretclient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n## cloud configuration\n\ncredentials default to authenticating to the microsoft entra endpoint for azure public cloud. to access resources in other clouds, such as azure government or a private cloud, configure credentials with the `authority` argument. [azureauthorityhosts](https://aka.ms/azsdk/python/identity/docs#azure.identity.azureauthorityhosts) defines authorities for well-known clouds:\n\n```python\nfrom azure.identity import azureauthorityhosts\n\ndefaultazurecredential(authority=azureauthorityhosts.azure_government)\n```\n\nif the authority for your cloud isn't listed in `azureauthorityhosts`, you can explicitly specify its url:\n\n```python\ndefaultazurecredential(authority=\"https://login.partner.microsoftonline.cn\")\n```\n\nas an alternative to specifying the `authority` argument, you can also set the `azure_authority_host` environment variable to the url of your cloud's authority. this approach is useful when configuring multiple credentials to authenticate to the same cloud:\n\n```sh\nazure_authority_host=https://login.partner.microsoftonline.cn\n```\n\nnot all credentials require this configuration. credentials that authenticate through a development tool, such as `azureclicredential`, use that tool's configuration. similarly, `visualstudiocodecredential` accepts an `authority` argument but defaults to the authority matching vs code's \"azure: cloud\" setting.\n\n## credential classes\n\n### authenticate azure-hosted applications\n\n|credential|usage\n|-|-\n|[`defaultazurecredential`][default_cred_ref]| provides a simplified authentication experience to quickly start developing applications run in azure.\n|[`chainedtokencredential`][chain_cred_ref]| allows users to define custom authentication flows composing multiple credentials.\n|[`environmentcredential`][environment_cred_ref]| authenticates a service principal or user via credential information specified in environment variables.\n|[`managedidentitycredential`][managed_id_cred_ref]| authenticates the managed identity of an azure resource.\n|[`workloadidentitycredential`][workload_id_cred_ref]| supports [microsoft entra workload id](https://learn.microsoft.com/azure/aks/workload-identity-overview) on kubernetes.\n\n### authenticate service principals\n\n|credential|usage|reference\n|-|-|-\n|[`certificatecredential`][cert_cred_ref]| authenticates a service principal using a certificate. | [service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n|[`clientassertioncredential`][client_assertion_cred_ref]| authenticates a service principal using a signed client assertion. |\n|[`clientsecretcredential`][client_secret_cred_ref]| authenticates a service principal using a secret. | [service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n\n### authenticate users\n\n|credential|usage|reference\n|-|-|-\n|[`authorizationcodecredential`][auth_code_cred_ref]| authenticates a user with a previously obtained authorization code. | [oauth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`devicecodecredential`][device_code_cred_ref]| interactively authenticates a user on devices with limited ui. | [device code authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code)\n|[`interactivebrowsercredential`][interactive_cred_ref]| interactively authenticates a user with the default system browser. | [oauth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\n|[`onbehalfofcredential`][obo_cred_ref]| propagates the delegated user identity and permissions through the request chain. | [on-behalf-of authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)\n|[`usernamepasswordcredential`][userpass_cred_ref]| authenticates a user with a username and password (doesn't support multi-factor authentication). |  [username + password authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc)\n\n### authenticate via development tools\n\n|credential|usage|reference\n|-|-|-\n|[`azureclicredential`][cli_cred_ref]| authenticates in a development environment with the azure cli. | [azure cli authentication](https://learn.microsoft.com/cli/azure/authenticate-azure-cli)\n|[`azuredeveloperclicredential`][azd_cli_cred_ref]| authenticates in a development environment with the azure developer cli. | [azure developer cli reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference)\n|[`azurepowershellcredential`][powershell_cred_ref]| authenticates in a development environment with the azure powershell. | [azure powershell authentication](https://learn.microsoft.com/powershell/azure/authenticate-azureps)\n|[`visualstudiocodecredential`][vscode_cred_ref]| authenticates as the user signed in to the visual studio code azure account extension. | [vs code azure account extension](https://marketplace.visualstudio.com/items?itemname=ms-vscode.azure-account)\n\n## environment variables\n\n[defaultazurecredential][default_cred_ref] and [environmentcredential][environment_cred_ref] can be configured with environment variables. each type of authentication requires values for specific\nvariables:\n\n### service principal with secret\n\n|variable name|value\n|-|-\n|`azure_client_id`|id of a microsoft entra application\n|`azure_tenant_id`|id of the application's microsoft entra tenant\n|`azure_client_secret`|one of the application's client secrets\n\n### service principal with certificate\n\n|variable name|value\n|-|-\n|`azure_client_id`|id of a microsoft entra application\n|`azure_tenant_id`|id of the application's microsoft entra tenant\n|`azure_client_certificate_path`|path to a pem or pkcs12 certificate file including private key\n|`azure_client_certificate_password`|password of the certificate file, if any\n\n### username and password\n\n|variable name|value\n|-|-\n|`azure_client_id`|id of a microsoft entra application\n|`azure_username`|a username (usually an email address)\n|`azure_password`|that user's password\n\nconfiguration is attempted in the above order. for example, if values for a client secret and certificate are both present, the client secret will be used.\n\n## continuous access evaluation\n\nas of version 1.14.0, accessing resources protected by [continuous access evaluation (cae)][cae] is possible on a per-request basis. this behavior can be enabled by setting the `enable_cae` keyword argument to `true` in the credential's `get_token` method. cae isn't supported for developer and managed identity credentials.\n\n## token caching\n\ntoken caching is a feature provided by the azure identity library that allows apps to:\n- cache tokens in memory (default) or on disk (opt-in).\n- improve resilience and performance.\n- reduce the number of requests made to microsoft entra id to obtain access tokens.\n\nthe azure identity library offers both in-memory and persistent disk caching. for more details, see the [token caching documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/token_caching.md).\n\n## brokered authentication\n\nan authentication broker is an application that runs on a user\u2019s machine and manages the authentication handshakes and token maintenance for connected accounts. currently, only the windows web account manager (wam) is supported. to enable support, use the [`azure-identity-broker`][azure_identity_broker] package. for details on authenticating using wam, see the [broker plugin documentation][azure_identity_broker_readme].\n\n## troubleshooting\n\nsee the [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n### error handling\n\ncredentials raise `credentialunavailableerror` when they're unable to attempt authentication because they lack required data or state. for example,\n[environmentcredential][environment_cred_ref] will raise this exception when [its configuration](#environment-variables \"its configuration\") is incomplete.\n\ncredentials raise `azure.core.exceptions.clientauthenticationerror` when they fail to authenticate. `clientauthenticationerror` has a `message` attribute, which describes why authentication failed. when raised by `defaultazurecredential` or `chainedtokencredential`, the message collects error messages from each credential in the chain.\n\nfor more information on handling specific microsoft entra id errors, see the microsoft entra id [error code documentation](https://learn.microsoft.com/azure/active-directory/develop/reference-error-codes).\n\n### logging\n\nthis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging. credentials log basic information, including http sessions (urls, headers, etc.) at info level. these log entries don't contain authentication secrets.\n\ndetailed debug level logging, including request/response bodies and header values, isn't enabled by default. it can be enabled with the `logging_enable` argument. for example:\n\n```python\ncredential = defaultazurecredential(logging_enable=true)\n```\n\n> caution: debug level logs from credentials contain sensitive information.\n> these logs must be protected to avoid compromising account security.\n\n## next steps\n\n### client library support\n\nclient and management libraries listed on the [azure sdk release page](https://azure.github.io/azure-sdk/releases/latest/python.html) that support microsoft entra authentication accept credentials from this library. you can learn more about using these libraries in their documentation, which is linked from the release page.\n\n### known issues\n\nthis library doesn't support [azure ad b2c][b2c].\n\nfor other open issues, refer to the library's [github repository](https://github.com/azure/azure-sdk-for-python/issues?q=is%3aopen+is%3aissue+label%3aazure.identity).\n\n### provide feedback\n\nif you encounter bugs or have suggestions, [open an issue](https://github.com/azure/azure-sdk-for-python/issues).\n\n## contributing\n\nthis project welcomes contributions and suggestions. most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you'll only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/). for more information, see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n[auth_code_cred_ref]: https://aka.ms/azsdk/python/identity/authorizationcodecredential\n[azd_cli_cred_ref]: https://aka.ms/azsdk/python/identity/azuredeveloperclicredential\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_developer_cli]:https://aka.ms/azure-dev\n[azure_core_transport_doc]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/client_library_developer.md#transport\n[azure_identity_broker]: https://pypi.org/project/azure-identity-broker\n[azure_identity_broker_readme]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity-broker\n[azure_eventhub]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub\n[azure_keyvault_secrets]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets\n[azure_storage_blob]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob\n[b2c]: https://learn.microsoft.com/azure/active-directory-b2c/overview\n[cae]: https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation\n[cert_cred_ref]: https://aka.ms/azsdk/python/identity/certificatecredential\n[chain_cred_ref]: https://aka.ms/azsdk/python/identity/chainedtokencredential\n[cli_cred_ref]: https://aka.ms/azsdk/python/identity/azclicredential\n[client_assertion_cred_ref]: https://aka.ms/azsdk/python/identity/clientassertioncredential\n[client_secret_cred_ref]: https://aka.ms/azsdk/python/identity/clientsecretcredential\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/defaultazurecredential\n[device_code_cred_ref]: https://aka.ms/azsdk/python/identity/devicecodecredential\n[environment_cred_ref]: https://aka.ms/azsdk/python/identity/environmentcredential\n[interactive_cred_ref]: https://aka.ms/azsdk/python/identity/interactivebrowsercredential\n[managed_id_cred_ref]: https://aka.ms/azsdk/python/identity/managedidentitycredential\n[obo_cred_ref]: https://aka.ms/azsdk/python/identity/onbehalfofcredential\n[powershell_cred_ref]: https://aka.ms/azsdk/python/identity/powershellcredential\n[ref_docs]: https://aka.ms/azsdk/python/identity/docs\n[ref_docs_aio]: https://aka.ms/azsdk/python/identity/aio/docs\n[troubleshooting_guide]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/troubleshooting.md\n[userpass_cred_ref]: https://aka.ms/azsdk/python/identity/usernamepasswordcredential\n[vscode_cred_ref]: https://aka.ms/azsdk/python/identity/vscodecredential\n[workload_id_cred_ref]: https://aka.ms/azsdk/python/identity/workloadidentitycredential\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fidentity%2fazure-identity%2freadme.png)\n\n\n# release history\n\n## 1.15.0 (2023-10-26)\n\n### features added\n\n- added bearer token provider.  ([#32655](https://github.com/azure/azure-sdk-for-python/pull/32655))\n\n### bugs fixed\n\n- fixed issue interactivebrowsercredential does not hand over to next credential in chain if no browser is supported.([#32276](https://github.com/azure/azure-sdk-for-python/pull/32276))\n\n## 1.15.0b2 (2023-10-12)\n\n### features added\n\n- added `enable_support_logging` as a keyword argument to credentials using msal's `publicclientapplication`. this allows additional support logging which may contain pii. ([#32135](https://github.com/azure/azure-sdk-for-python/pull/32135))\n\n### breaking changes\n\n> these changes do not impact the api of stable versions such as 1.14.0.\n> only code written against a beta version such as 1.15.0b1 may be affected.\n- windows web account manager (wam) brokered authentication is moved into another package.\n\n### bugs fixed\n\n- `managedidentitycredential` will now correctly retry when the instance metadata endpoint returns a 410 response.  ([#32200](https://github.com/azure/azure-sdk-for-python/pull/32200))\n\n## 1.14.1 (2023-10-09)\n\n### bugs fixed\n\n- bug fixes for developer credentials\n\n## 1.15.0b1 (2023-09-12)\n\n### features added\n\n- added windows web account manager (wam) brokered authentication support.\n- added `enable_msa_passthrough` suppport for `interactivebrowsercredential`. by default `interactivebrowsercredential` only lists microsoft entra accounts. if you set `enable_msa_passthrough` to `true`, it lists both microsoft entra accounts and msa outlook.com accounts that are logged in to windows.\n\n### bugs fixed\n\n- ensure `azurepowershellcredential` calls powershell with the `-noprofile` flag to avoid loading user profiles for more consistent behavior.  ([#31682](https://github.com/azure/azure-sdk-for-python/pull/31682))\n- fixed an issue with subprocess-based developer credentials (such as azureclicredential) where the process would sometimes hang waiting for user input.  ([#31534](https://github.com/azure/azure-sdk-for-python/pull/31534))\n- fixed an issue with `clientassertioncredential` not properly checking if cae should be enabled.  ([#31544](https://github.com/azure/azure-sdk-for-python/pull/31544))\n- `managedidentitycredential` will fall through to the next credential in the chain in the case that docker desktop returns a 403 response when attempting to access the imds endpoint.  ([#31824](https://github.com/azure/azure-sdk-for-python/pull/31824))\n\n### other changes\n\n- update typing of async credentials to match the `asynctokencredential` protocol.\n- if within `defaultazurecredential`, `environmentcredential` will now use log level info instead of warning to inform users of an incomplete environment configuration.  ([#31814](https://github.com/azure/azure-sdk-for-python/pull/31814))\n- strengthened `azureclicredential` and `azuredeveloperclicredential` error checking when determining if a user is logged in or not. now, if an `aadsts` error exists in the error, the full error message is propagated instead of a canned error message. ([#30047](https://github.com/azure/azure-sdk-for-python/pull/30047))\n- `managedidentitycredential` instances using imds will now be allowed to continue sending requests to the imds endpoint even after previous attempts failed. this is to prevent credential instances from potentially being permanently disabled after a temporary network failure.\n- imds endpoint probes in `managedidentitycredential` will now only occur when inside a credential chain such as `defaultazurecredential`. this probe request timeout has been increased to 1 second from 0.3 seconds to reduce the likelihood of false negatives.\n\n## 1.14.0 (2023-08-08)\n\n### features added\n\n- continuous access evaluation (cae) is now configurable per-request by setting the `enable_cae` keyword argument to `true` in `get_token`. this applies to user credentials and service principal credentials.  ([#30777](https://github.com/azure/azure-sdk-for-python/pull/30777))\n\n### breaking changes\n\n- cp1 client capabilities for cae is no longer always-on by default for user credentials. this capability will now be configured as-needed in each `get_token` request by each sdk.  ([#30777](https://github.com/azure/azure-sdk-for-python/pull/30777))\n  - suffixes are now appended to persistent cache names to indicate whether cae or non-cae tokens are stored in the cache. this is to prevent cae and non-cae tokens from being mixed/overwritten in the same cache. this could potentially cause issues if you are trying to share the same cache between applications that are using different versions of the azure identity library as each application would be reading from a different cache file.\n  - since cae is no longer always enabled for user-credentials, the `azure_identity_disable_cp1` environment variable is no longer supported.\n\n### bugs fixed\n\n- credential types correctly implement `azure-core`'s `tokencredential` protocol.  ([#25175](https://github.com/azure/azure-sdk-for-python/issues/25175))\n\n## 1.14.0b2 (2023-07-11)\n\n### features added\n\n- added `workload_identity_tenant_id` support in `defaultazurecredential`.\n\n## 1.14.0b1 (2023-06-06)\n\n### features added\n\n- continue attempt next credential when finding an expired token from cached token credential in defaultazurecredential. ([#30441](https://github.com/azure/azure-sdk-for-python/pull/30441))\n\n### other changes\n\n- visualstudiocodecredential prints an informative error message when used (as it is currently broken) ([#30385](https://github.com/azure/azure-sdk-for-python/pull/30385))\n- removed dependency on `six`. ([#30613](https://github.com/azure/azure-sdk-for-python/pull/30613))\n\n## 1.13.0 (2023-05-11)\n\n### breaking changes\n\n> these changes do not impact the api of stable versions such as 1.12.0.\n> only code written against a beta version such as 1.13.0b4 may be affected.\n- windows web account manager (wam) brokered authentication is still in preview and not available in this release. it will be available in the next beta release.\n- additional continuous access evaluation (cae) support for service principal credentials is still in preview and not available in this release. it will be available in the next beta release.\n- renamed keyword argument `developer_credential_timeout` to `process_timeout` in `defaultazurecredential` to remain consistent with the other credentials that launch a subprocess to acquire tokens.\n\n## 1.13.0b4 (2023-04-11)\n\n### features added\n\n- credentials that are implemented via launching a subprocess to acquire tokens now have configurable timeouts using the `process_timeout` keyword argument. this addresses scenarios where these proceses can take longer than the current default timeout values. the affected credentials are `azureclicredential`, `azuredeveloperclicredential`, and `azurepowershellcredential`. (note: for `defaultazurecredential`, the `developer_credential_timeout` keyword argument allows users to propagate this option to `azureclicredential`, `azuredeveloperclicredential`, and `azurepowershellcredential` in the authentication chain.) ([#28290](https://github.com/azure/azure-sdk-for-python/pull/28290))\n\n## 1.13.0b3 (2023-03-07)\n\n### features added\n\n- changed parameter from `instance_discovery` to `disable_instance_discovery` to make it more explicit.\n- service principal credentials now enable support for [continuous access evaluation (cae)](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation-workload). this indicates to microsoft entra id that your application can handle cae claims challenges.\n\n## 1.13.0b2 (2023-02-07)\n\n### features added\n\n- added `azuredevelopercredential` for azure developer cli. ([#27916](https://github.com/azure/azure-sdk-for-python/pull/27916))\n- added `workloadidentitycredential` for workload identity federation on kubernetes ([#28536](https://github.com/azure/azure-sdk-for-python/pull/28536))\n- added support to use \"tryautodetect\" as the value for `azure_regional_authority_name` to enable auto detecting the appropriate authority ([#526](https://github.com/azuread/microsoft-authentication-library-for-python/issues/526))\n\n## 1.13.0b1 (2023-01-10)\n\n### features added\n\n- added windows web account manager (wam) brokered authentication support. ([#23687](https://github.com/azure/azure-sdk-for-python/issues/23687))\n\n### breaking changes\n\n> these changes do not impact the api of stable versions such as 1.12.0.\n> only code written against a beta version such as 1.12.0b1 may be affected.\n- replaced `validate_authority` with `instance_discovery`. now instead of setting validate_authority=false to disable authority validation and instance discovery, you need to use instance_discovery=false.\n\n### bugs fixed\n\n- fixed an issue where `azureclicredential` would return the wrong error message when the azure cli was not installed on non-english consoles. ([#27965](https://github.com/azure/azure-sdk-for-python/issues/27965))\n\n## 1.12.0 (2022-11-08)\n\n### bugs fixed\n\n- `azureclicredential` now works even when `az` prints warnings to stderr. ([#26857](https://github.com/azure/azure-sdk-for-python/issues/26857)) (thanks to @micromaomao for the contribution)\n- fixed issue where user-supplied `tokencachepersistenceoptions` weren't propagated when using `sharedtokencachecredential` ([#26982](https://github.com/azure/azure-sdk-for-python/issues/26982))\n\n### breaking changes\n\n- excluded `visualstudiocodecredential` from `defaultazurecredential` token chain by default as sdk\n  authentication via visual studio code is broken due to\n  issue [#23249](https://github.com/azure/azure-sdk-for-python/issues/23249). the `visualstudiocodecredential` will be\n  re-enabled in the `defaultazurecredential` flow once a fix is in place.\n  issue [#25713](https://github.com/azure/azure-sdk-for-python/issues/25713) tracks this. in the meantime\n  visual studio code users can authenticate their development environment using the [azure cli](https://learn.microsoft.com/cli/azure/).\n\n### other changes\n\n- added python 3.11 support and stopped supporting python 3.6.\n\n## 1.12.0b2 (2022-10-11)\n\n1.12.0 release candidate\n\n## 1.12.0b1 (2022-09-22)\n\n### features added\n\n- added ability to specify `tenant_id` for `azureclicredential` & `azurepowershellcredential` (thanks @tikicoder)    ([#25207](https://github.com/azure/azure-sdk-for-python/pull/25207))\n- removed `visualstudiocodecredential` from `defaultazurecredential` token chain. ([#23249](https://github.com/azure/azure-sdk-for-python/issues/23249))\n- `environmentcredential` added `azure_client_certificate_password` support for the cert password    ([#24652](https://github.com/azure/azure-sdk-for-python/issues/24652))\n- added `validate_authority` support for msal client  ([#22625](https://github.com/azure/azure-sdk-for-python/issues/22625))\n\n## 1.11.0 (2022-09-19)\n\n### features added\n\n- added `additionally_allowed_tenants` to the following credential options to force explicit opt-in behavior for multi-tenant authentication:\n  - `authorizationcodecredential`\n  - `azureclicredential`\n  - `azurepowershellcredential`\n  - `certificatecredential`\n  - `clientassertioncredential`\n  - `clientsecretcredential`\n  - `defaultazurecredential`\n  - `onbehalfofcredential`\n  - `usernamepasswordcredential`\n  - `visualstudiocodecredential`\n\n### breaking changes\n\n- credential types supporting multi-tenant authentication will now throw `clientauthenticationerror` if the requested tenant id doesn't match the credential's tenant id, and is not included in `additionally_allowed_tenants`. applications must now explicitly add additional tenants to the `additionally_allowed_tenants` list, or add '*' to list, to enable acquiring tokens from tenants other than the originally specified tenant id.\n\nmore information on this change and the consideration behind it can be found [here](https://aka.ms/azsdk/blog/multi-tenant-guidance).\n\n- these beta features in 1.11.0b3 have been removed from this release and will be added back in 1.12.0b1\n  - `tenant_id` for `azureclicredential`\n  - removed `visualstudiocodecredential` from `defaultazurecredential` token chain\n  - `azure_client_certificate_password` support for `environmentcredential`\n  - `validate_authority` support\n\n## 1.11.0b3 (2022-08-09)\n\nazure-identity is supported on python 3.7 or later. for more details, please read our page on [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy).\n\n### features added\n\n- added ability to specify `tenant_id` for `azureclicredential` (thanks @tikicoder)    ([#25207](https://github.com/azure/azure-sdk-for-python/pull/25207))\n\n### breaking changes\n\n- removed `visualstudiocodecredential` from `defaultazurecredential` token chain. ([#23249](https://github.com/azure/azure-sdk-for-python/issues/23249))\n\n## 1.11.0b2 (2022-07-05)\n\n### features added\n\n- `environmentcredential` added `azure_client_certificate_password` support for the cert password    ([#24652](https://github.com/azure/azure-sdk-for-python/issues/24652))\n\n### bugs fixed\n\n- fixed the issue that failed to parse pem certificate if it does not start with \"-----\"    ([#24643](https://github.com/azure/azure-sdk-for-python/issues/24643))\n\n## 1.11.0b1 (2022-05-10)\n\n### features added\n\n- added `validate_authority` support for msal client  ([#22625](https://github.com/azure/azure-sdk-for-python/issues/22625))\n\n## 1.10.0 (2022-04-28)\n\n### breaking changes\n\n> these changes do not impact the api of stable versions such as 1.9.0.\n> only code written against a beta version such as 1.10.0b1 may be affected.\n- `validate_authority` support is not available in 1.10.0.\n\n### other changes\n\n- supported msal-extensions version 1.0.0    ([#23927](https://github.com/azure/azure-sdk-for-python/issues/23927))\n\n## 1.10.0b1 (2022-04-07)\n\n### features added\n\n- added `validate_authority` support for msal client  ([#22625](https://github.com/azure/azure-sdk-for-python/issues/22625))\n\n## 1.9.0 (2022-04-05)\n\n### features added\n\n- added pii logging if logging.debug is enabled.    ([#23203](https://github.com/azure/azure-sdk-for-python/issues/23203))\n\n### breaking changes\n\n> these changes do not impact the api of stable versions such as 1.8.0.\n> only code written against a beta version such as 1.9.0b1 may be affected.\n- `validate_authority` support is not available in 1.9.0.\n\n### bugs fixed\n\n- added check on `content` from msal response.    ([#23483](https://github.com/azure/azure-sdk-for-python/issues/23483))\n- fixed the issue that async obo credential does not refresh correctly.    ([#21981](https://github.com/azure/azure-sdk-for-python/issues/21981))\n\n### other changes\n\n- removed `resource_id`, please use `identity_config` instead.\n- renamed argument name `get_assertion` to `func` for `clientassertioncredential`.\n\n## 1.9.0b1 (2022-03-08)\n\n### features added\n\n- added `validate_authority` support for msal client  ([#22625](https://github.com/azure/azure-sdk-for-python/issues/22625))\n- added `resource_id` support for user-assigned managed identity  ([#22329](https://github.com/azure/azure-sdk-for-python/issues/22329))\n- added `clientassertioncredential` support  ([#22328](https://github.com/azure/azure-sdk-for-python/issues/22328))\n- updated app service api version to \"2019-08-01\" ([#23034](https://github.com/azure/azure-sdk-for-python/issues/23034))\n\n## 1.8.0 (2022-03-01)\n\n### bugs fixed\n\n- handle injected \"tenant_id\" and \"claims\" ([#23138](https://github.com/azure/azure-sdk-for-python/issues/23138))\n\n  \"tenant_id\" argument in get_token() method is only supported by:\n\n  - `authorizationcodecredential`\n  - `azureclicredential`\n  - `azurepowershellcredential`\n  - `interactivebrowsercredential`\n  - `devicecodecredential`\n  - `environmentcredential`\n  - `usernamepasswordcredential`\n\n   it is ignored by other types of credentials.\n\n### other changes\n\n- python 2.7 is no longer supported. please use python version 3.6 or later.\n\n## 1.7.1 (2021-11-09)\n\n### bugs fixed\n\n- fix multi-tenant auth using async aadclient ([#21289](https://github.com/azure/azure-sdk-for-python/issues/21289))\n\n## 1.7.0 (2021-10-14)\n\n### breaking changes\n> these changes do not impact the api of stable versions such as 1.6.0.\n> only code written against a beta version such as 1.7.0b1 may be affected.\n\n- the `allow_multitenant_authentication` argument has been removed and the default behavior is now as if it were true.\n  the multitenant authentication feature can be totally disabled by setting the environment variable\n  `azure_identity_disable_multitenantauth` to `true`.\n- `azure.identity.regionalauthority` is removed.\n- `regional_authority` argument is removed for `certificatecredential` and `clientsecretcredential`.\n- `azureapplicationcredential` is removed.\n- `client_credential` in the ctor of `onbehalfofcredential` is removed. please use `client_secret` or `client_certificate` instead.\n- make `user_assertion` in the ctor of `onbehalfofcredential` a keyword only argument.\n\n## 1.7.0b4 (2021-09-09)\n\n### features added\n- `certificatecredential` accepts certificates in pkcs12 format\n  ([#13540](https://github.com/azure/azure-sdk-for-python/issues/13540))\n- `onbehalfofcredential` supports the on-behalf-of authentication flow for\n  accessing resources on behalf of users\n  ([#19308](https://github.com/azure/azure-sdk-for-python/issues/19308))\n- `defaultazurecredential` allows specifying the client id of interactive browser via keyword argument `interactive_browser_client_id`\n  ([#20487](https://github.com/azure/azure-sdk-for-python/issues/20487))\n\n### other changes\n- added context manager methods and `close()` to credentials in the\n  `azure.identity` namespace. at the end of a `with` block, or when `close()`\n  is called, these credentials close their underlying transport sessions.\n  ([#18798](https://github.com/azure/azure-sdk-for-python/issues/18798))\n\n\n## 1.6.1 (2021-08-19)\n\n### other changes\n- persistent cache implementations are now loaded on demand, enabling\n  workarounds when importing transitive dependencies such as pywin32\n  fails\n  ([#19989](https://github.com/azure/azure-sdk-for-python/issues/19989))\n\n\n## 1.7.0b3 (2021-08-10)\n\n### breaking changes\n> these changes do not impact the api of stable versions such as 1.6.0.\n> only code written against a beta version such as 1.7.0b1 may be affected.\n- renamed `azure_pod_identity_token_url` to `azure_pod_identity_authority_host`.\n  the value should now be a host, for example \"http://169.254.169.254\" (the\n  default).\n\n### bugs fixed\n- fixed import of `azure.identity.aio.azureapplicationcredential`\n  ([#19943](https://github.com/azure/azure-sdk-for-python/issues/19943))\n\n### other changes\n- added `customhookpolicy` to credential http pipelines. this allows applications\n  to initialize credentials with `raw_request_hook` and `raw_response_hook`\n  keyword arguments. the value of these arguments should be a callback taking a\n  `pipelinerequest` and `pipelineresponse`, respectively. for example:\n  `managedidentitycredential(raw_request_hook=lambda request: print(request.http_request.url))`\n- reduced redundant `chainedtokencredential` and `defaultazurecredential`\n  logging. on python 3.7+, credentials invoked by these classes now log debug\n  rather than info messages.\n  ([#18972](https://github.com/azure/azure-sdk-for-python/issues/18972))\n- persistent cache implementations are now loaded on demand, enabling\n  workarounds when importing transitive dependencies such as pywin32\n  fails\n  ([#19989](https://github.com/azure/azure-sdk-for-python/issues/19989))\n\n\n## 1.7.0b2 (2021-07-08)\n### features added\n- `interactivebrowsercredential` keyword argument `login_hint` enables\n  pre-filling the username/email address field on the login page\n  ([#19225](https://github.com/azure/azure-sdk-for-python/issues/19225))\n- `azureapplicationcredential`, a default credential chain for applications\n  deployed to azure\n  ([#19309](https://github.com/azure/azure-sdk-for-python/issues/19309))\n\n### bugs fixed\n- `azure.identity.aio.managedidentitycredential` is an async context manager\n  that closes its underlying transport session at the end of a `with` block\n\n### other changes\n- most credentials can use tenant id values returned from authentication\n  challenges, enabling them to request tokens from the correct tenant. this\n  behavior is optional and controlled by a new keyword argument,\n  `allow_multitenant_authentication`.\n  ([#19300](https://github.com/azure/azure-sdk-for-python/issues/19300))\n  - when `allow_multitenant_authentication` is false, which is the default, a\n    credential will raise `clientauthenticationerror` when its configured tenant\n    doesn't match the tenant specified for a token request. this may be a\n    different exception than was raised by prior versions of the credential. to\n    maintain the prior behavior, set environment variable\n    azure_identity_enable_legacy_tenant_selection to \"true\".\n- `certificatecredential` and `clientsecretcredential` support regional sts\n  on azure vms by either keyword argument `regional_authority` or environment\n  variable `azure_regional_authority_name`. see `azure.identity.regionalauthority`\n  for possible values.\n  ([#19301](https://github.com/azure/azure-sdk-for-python/issues/19301))\n- upgraded minimum `azure-core` version to 1.11.0 and minimum `msal` version to\n  1.12.0\n- after imds authentication fails, `managedidentitycredential` raises consistent\n  error messages and uses `raise from` to propagate inner exceptions\n  ([#19423](https://github.com/azure/azure-sdk-for-python/pull/19423))\n\n## 1.7.0b1 (2021-06-08)\nbeginning with this release, this library requires python 2.7 or 3.6+.\n\n### added\n- `visualstudiocodecredential` gets its default tenant and authority\n  configuration from vs code user settings\n  ([#14808](https://github.com/azure/azure-sdk-for-python/issues/14808))\n\n## 1.6.0 (2021-05-13)\nthis is the last version to support python 3.5. the next version will require\npython 2.7 or 3.6+.\n\n### added\n- `azurepowershellcredential` authenticates as the identity logged in to azure\n  powershell. this credential is part of `defaultazurecredential` by default\n  but can be disabled by a keyword argument:\n  `defaultazurecredential(exclude_powershell_credential=true)`\n  ([#17341](https://github.com/azure/azure-sdk-for-python/issues/17341))\n\n### fixed\n- `azureclicredential` raises `credentialunavailableerror` when the cli times out,\n  and kills timed out subprocesses\n- reduced retry delay for `managedidentitycredential` on azure vms\n\n## 1.6.0b3 (2021-04-06)\n### breaking changes\n> these changes do not impact the api of stable versions such as 1.5.0.\n> only code written against a beta version such as 1.6.0b1 may be affected.\n- removed property `authenticationrequirederror.error_details`\n\n### fixed\n- credentials consistently retry token requests after connection failures, or\n  when instructed to by a retry-after header\n- managedidentitycredential caches tokens correctly\n\n### added\n- `interactivebrowsercredential` functions in more wsl environments\n  ([#17615](https://github.com/azure/azure-sdk-for-python/issues/17615))\n\n## 1.6.0b2 (2021-03-09)\n### breaking changes\n> these changes do not impact the api of stable versions such as 1.5.0.\n> only code written against a beta version such as 1.6.0b1 may be affected.\n- renamed `certificatecredential` keyword argument `certificate_bytes` to\n  `certificate_data`\n- credentials accepting keyword arguments `allow_unencrypted_cache` and\n  `enable_persistent_cache` to configure persistent caching accept a\n  `cache_persistence_options` argument instead whose value should be an\n  instance of `tokencachepersistenceoptions`. for example:\n  ```\n  # before (e.g. in 1.6.0b1):\n  devicecodecredential(enable_persistent_cache=true, allow_unencrypted_cache=true)\n\n  # after:\n  cache_options = tokencachepersistenceoptions(allow_unencrypted_storage=true)\n  devicecodecredential(cache_persistence_options=cache_options)\n  ```\n\n  see the documentation and samples for more details.\n\n### added\n- new class `tokencachepersistenceoptions` configures persistent caching\n- the `authenticationrequirederror.claims` property provides any additional\n  claims required by a user credential's `authenticate()` method\n\n## 1.6.0b1 (2021-02-09)\n### changed\n- raised minimum msal version to 1.7.0\n- raised minimum six version to 1.12.0\n\n### added\n- `interactivebrowsercredential` uses pkce internally to protect authorization\n  codes\n- `certificatecredential` can load a certificate from bytes instead of a file\n  path. to provide a certificate as bytes, use the keyword argument\n  `certificate_bytes` instead of `certificate_path`, for example:\n  `certificatecredential(tenant_id, client_id, certificate_bytes=cert_bytes)`\n  ([#14055](https://github.com/azure/azure-sdk-for-python/issues/14055))\n- user credentials support continuous access evaluation (cae)\n- application authentication apis from 1.5.0b2\n\n### fixed\n- `managedidentitycredential` correctly parses responses from the current\n  (preview) version of azure ml managed identity\n  ([#15361](https://github.com/azure/azure-sdk-for-python/issues/15361))\n\n## 1.5.0 (2020-11-11)\n### breaking changes\n- renamed optional `certificatecredential` keyword argument `send_certificate`\n  (added in 1.5.0b1) to `send_certificate_chain`\n- removed user authentication apis added in prior betas. these will be\n  reintroduced in 1.6.0b1. passing the keyword arguments below\n  generally won't cause a runtime error, but the arguments have no effect.\n  ([#14601](https://github.com/azure/azure-sdk-for-python/issues/14601))\n  - removed `authenticate` method from `devicecodecredential`,\n    `interactivebrowsercredential`, and `usernamepasswordcredential`\n  - removed `allow_unencrypted_cache` and `enable_persistent_cache` keyword\n    arguments from `certificatecredential`, `clientsecretcredential`,\n    `devicecodecredential`, `interactivebrowsercredential`, and\n    `usernamepasswordcredential`\n  - removed `disable_automatic_authentication` keyword argument from\n    `devicecodecredential` and `interactivebrowsercredential`\n  - removed `allow_unencrypted_cache` keyword argument from\n    `sharedtokencachecredential`\n  - removed classes `authenticationrecord` and `authenticationrequirederror`\n- removed `identity_config` keyword argument from `managedidentitycredential`\n  (was added in 1.5.0b1)\n\n### changed\n- `devicecodecredential` parameter `client_id` is now optional. when not\n   provided, the credential will authenticate users to an azure development\n   application.\n   ([#14354](https://github.com/azure/azure-sdk-for-python/issues/14354))\n- credentials raise `valueerror` when constructed with tenant ids containing\n  invalid characters\n  ([#14821](https://github.com/azure/azure-sdk-for-python/issues/14821))\n- raised minimum msal version to 1.6.0\n\n### added\n- `managedidentitycredential` supports service fabric\n  ([#12705](https://github.com/azure/azure-sdk-for-python/issues/12705))\n  and azure arc\n  ([#12702](https://github.com/azure/azure-sdk-for-python/issues/12702))\n\n### fixed\n- prevent `visualstudiocodecredential` using invalid authentication data when\n  no user is signed in to visual studio code\n  ([#14438](https://github.com/azure/azure-sdk-for-python/issues/14438))\n- `managedidentitycredential` uses the api version supported by azure functions\n  on linux consumption hosting plans\n  ([#14670](https://github.com/azure/azure-sdk-for-python/issues/14670))\n- `interactivebrowsercredential.get_token()` raises a clearer error message when\n  it times out waiting for a user to authenticate on python 2.7\n  ([#14773](https://github.com/azure/azure-sdk-for-python/pull/14773))\n\n## 1.5.0b2 (2020-10-07)\n### fixed\n- `azureclicredential.get_token` correctly sets token expiration time,\n  preventing clients from using expired tokens\n  ([#14345](https://github.com/azure/azure-sdk-for-python/issues/14345))\n\n### changed\n- adopted msal-extensions 0.3.0\n([#13107](https://github.com/azure/azure-sdk-for-python/issues/13107))\n\n## 1.4.1 (2020-10-07)\n### fixed\n- `azureclicredential.get_token` correctly sets token expiration time,\n  preventing clients from using expired tokens\n  ([#14345](https://github.com/azure/azure-sdk-for-python/issues/14345))\n\n## 1.5.0b1 (2020-09-08)\n### added\n- application authentication apis from 1.4.0b7\n- `managedidentitycredential` supports the latest version of app service\n  ([#11346](https://github.com/azure/azure-sdk-for-python/issues/11346))\n- `defaultazurecredential` allows specifying the client id of a user-assigned\n  managed identity via keyword argument `managed_identity_client_id`\n  ([#12991](https://github.com/azure/azure-sdk-for-python/issues/12991))\n- `certificatecredential` supports subject name/issuer authentication when\n  created with `send_certificate=true`. the async `certificatecredential`\n  (`azure.identity.aio.certificatecredential`) will support this in a\n  future version.\n  ([#10816](https://github.com/azure/azure-sdk-for-python/issues/10816))\n- credentials in `azure.identity` support adfs authorities, excepting\n  `visualstudiocodecredential`. to configure a credential for this, configure\n  the credential with `authority` and `tenant_id=\"adfs\"` keyword arguments, for\n  example\n  `clientsecretcredential(authority=\"<your adfs uri>\", tenant_id=\"adfs\")`.\n  async credentials (those in `azure.identity.aio`) will support adfs in a\n  future release.\n  ([#12696](https://github.com/azure/azure-sdk-for-python/issues/12696))\n- `interactivebrowsercredential` keyword argument `redirect_uri` enables\n  authentication with a user-specified application having a custom redirect uri\n  ([#13344](https://github.com/azure/azure-sdk-for-python/issues/13344))\n\n### breaking changes\n- removed `authentication_record` keyword argument from the async\n  `sharedtokencachecredential`, i.e. `azure.identity.aio.sharedtokencachecredential`\n\n## 1.4.0 (2020-08-10)\n### added\n- `defaultazurecredential` uses the value of environment variable\n`azure_client_id` to configure a user-assigned managed identity.\n([#10931](https://github.com/azure/azure-sdk-for-python/issues/10931))\n\n### breaking changes\n- renamed `vscodecredential` to `visualstudiocodecredential`\n- removed application authentication apis added in 1.4.0 beta versions. these\n  will be reintroduced in 1.5.0b1. passing the keyword arguments below\n  generally won't cause a runtime error, but the arguments have no effect.\n  - removed `authenticate` method from `devicecodecredential`,\n    `interactivebrowsercredential`, and `usernamepasswordcredential`\n  - removed `allow_unencrypted_cache` and `enable_persistent_cache` keyword\n    arguments from `certificatecredential`, `clientsecretcredential`,\n    `devicecodecredential`, `interactivebrowsercredential`, and\n    `usernamepasswordcredential`\n  - removed `disable_automatic_authentication` keyword argument from\n    `devicecodecredential` and `interactivebrowsercredential`\n  - removed `allow_unencrypted_cache` keyword argument from\n    `sharedtokencachecredential`\n  - removed classes `authenticationrecord` and `authenticationrequirederror`\n  - removed `identity_config` keyword argument from `managedidentitycredential`\n\n## 1.4.0b7 (2020-07-22)\n- `defaultazurecredential` has a new optional keyword argument,\n`visual_studio_code_tenant_id`, which sets the tenant the credential should\nauthenticate in when authenticating as the azure user signed in to visual\nstudio code.\n- renamed `authenticationrecord.deserialize` positional parameter `json_string`\nto `data`.\n\n\n## 1.4.0b6 (2020-07-07)\n- `azureclicredential` no longer raises an exception due to unexpected output\n  from the cli when run by pycharm (thanks @nvolcz)\n  ([#11362](https://github.com/azure/azure-sdk-for-python/pull/11362))\n- upgraded minimum `msal` version to 1.3.0\n- the async `azureclicredential` correctly invokes `/bin/sh`\n  ([#12048](https://github.com/azure/azure-sdk-for-python/issues/12048))\n\n## 1.4.0b5 (2020-06-12)\n- prevent an error on importing `azureclicredential` on windows caused by a bug\n  in old versions of python 3.6 (this bug was fixed in python 3.6.5).\n  ([#12014](https://github.com/azure/azure-sdk-for-python/issues/12014))\n- `sharedtokencachecredential.get_token` raises `valueerror` instead of\n  `clientauthenticationerror` when called with no scopes.\n  ([#11553](https://github.com/azure/azure-sdk-for-python/issues/11553))\n\n## 1.4.0b4 (2020-06-09)\n- `managedidentitycredential` can configure a user-assigned identity using any\n  identifier supported by the current hosting environment. to specify an\n  identity by its client id, continue using the `client_id` argument. to\n  specify an identity by any other id, use the `identity_config` argument,\n  for example: `managedidentitycredential(identity_config={\"object_id\": \"..\"})`\n  ([#10989](https://github.com/azure/azure-sdk-for-python/issues/10989))\n- `certificatecredential` and `clientsecretcredential` can optionally store\n  access tokens they acquire in a persistent cache. to enable this, construct\n  the credential with `enable_persistent_cache=true`. on linux, the persistent\n  cache requires libsecret and `pygobject`. if these are unavailable or\n  unusable (e.g. in an ssh session), loading the persistent cache will raise an\n  error. you may optionally configure the credential to fall back to an\n  unencrypted cache by constructing it with keyword argument\n  `allow_unencrypted_cache=true`.\n  ([#11347](https://github.com/azure/azure-sdk-for-python/issues/11347))\n- `azureclicredential` raises `credentialunavailableerror` when no user is\n  logged in to the azure cli.\n  ([#11819](https://github.com/azure/azure-sdk-for-python/issues/11819))\n- `azureclicredential` and `vscodecredential`, which enable authenticating as\n  the identity signed in to the azure cli and visual studio code, respectively,\n  can be imported from `azure.identity` and `azure.identity.aio`.\n- `azure.identity.aio.authorizationcodecredential.get_token()` no longer accepts\n  optional keyword arguments `executor` or `loop`. prior versions of the method\n  didn't use these correctly, provoking exceptions, and internal changes in this\n  version have made them obsolete.\n- `interactivebrowsercredential` raises `credentialunavailableerror` when it\n  can't start an http server on `localhost`.\n  ([#11665](https://github.com/azure/azure-sdk-for-python/pull/11665))\n- when constructing `defaultazurecredential`, you can now configure a tenant id\n  for `interactivebrowsercredential`. when none is specified, the credential\n  authenticates users in their home tenants. to specify a different tenant, use\n  the keyword argument `interactive_browser_tenant_id`, or set the environment\n  variable `azure_tenant_id`.\n  ([#11548](https://github.com/azure/azure-sdk-for-python/issues/11548))\n- `sharedtokencachecredential` can be initialized with an `authenticationrecord`\n  provided by a user credential.\n  ([#11448](https://github.com/azure/azure-sdk-for-python/issues/11448))\n- the user authentication api added to `devicecodecredential` and\n  `interactivebrowsercredential` in 1.4.0b3 is available on\n  `usernamepasswordcredential` as well.\n  ([#11449](https://github.com/azure/azure-sdk-for-python/issues/11449))\n- the optional persistent cache for `devicecodecredential` and\n  `interactivebrowsercredential` added in 1.4.0b3 is now available on linux and\n  macos as well as windows.\n  ([#11134](https://github.com/azure/azure-sdk-for-python/issues/11134))\n  - on linux, the persistent cache requires libsecret and `pygobject`. if these\n    are unavailable, or libsecret is unusable (e.g. in an ssh session), loading\n    the persistent cache will raise an error. you may optionally configure the\n    credential to fall back to an unencrypted cache by constructing it with\n    keyword argument `allow_unencrypted_cache=true`.\n\n## 1.4.0b3 (2020-05-04)\n- `environmentcredential` correctly initializes `usernamepasswordcredential`\nwith the value of `azure_tenant_id`\n([#11127](https://github.com/azure/azure-sdk-for-python/pull/11127))\n- values for the constructor keyword argument `authority` and\n`azure_authority_host` may optionally specify an \"https\" scheme. for example,\n\"https://login.microsoftonline.us\" and \"login.microsoftonline.us\" are both valid.\n([#10819](https://github.com/azure/azure-sdk-for-python/issues/10819))\n- first preview of new api for authenticating users with `devicecodecredential`\n  and `interactivebrowsercredential`\n  ([#10612](https://github.com/azure/azure-sdk-for-python/pull/10612))\n  - new method `authenticate` interactively authenticates a user, returns a\n    serializable `authenticationrecord`\n  - new constructor keyword arguments\n    - `authentication_record` enables initializing a credential with an\n      `authenticationrecord` from a prior authentication\n    - `disable_automatic_authentication=true` configures the credential to raise\n    `authenticationrequirederror` when interactive authentication is necessary\n    to acquire a token rather than immediately begin that authentication\n    - `enable_persistent_cache=true` configures these credentials to use a\n    persistent cache on supported platforms (in this release, windows only).\n    by default they cache in memory only.\n- now `defaultazurecredential` can authenticate with the identity signed in to\nvisual studio code's azure extension.\n([#10472](https://github.com/azure/azure-sdk-for-python/issues/10472))\n\n## 1.4.0b2 (2020-04-06)\n- after an instance of `defaultazurecredential` successfully authenticates, it\nuses the same authentication method for every subsequent token request. this\nmakes subsequent requests more efficient, and prevents unexpected changes of\nauthentication method.\n([#10349](https://github.com/azure/azure-sdk-for-python/pull/10349))\n- all `get_token` methods consistently require at least one scope argument,\nraising an error when none is passed. although `get_token()` may sometimes\nhave succeeded in prior versions, it couldn't do so consistently because its\nbehavior was undefined, and dependened on the credential's type and internal\nstate. ([#10243](https://github.com/azure/azure-sdk-for-python/issues/10243))\n- `sharedtokencachecredential` raises `credentialunavailableerror` when the\ncache is available but contains ambiguous or insufficient information. this\ncauses `chainedtokencredential` to correctly try the next credential in the\nchain. ([#10631](https://github.com/azure/azure-sdk-for-python/issues/10631))\n- the host of the active directory endpoint credentials should use can be set\nin the environment variable `azure_authority_host`. see\n`azure.identity.knownauthorities` for a list of common values.\n([#8094](https://github.com/azure/azure-sdk-for-python/issues/8094))\n\n\n## 1.3.1 (2020-03-30)\n\n- `managedidentitycredential` raises `credentialunavailableerror` when no\nidentity is configured for an imds endpoint. this causes\n`chainedtokencredential` to correctly try the next credential in the chain.\n([#10488](https://github.com/azure/azure-sdk-for-python/issues/10488))\n\n\n## 1.4.0b1 (2020-03-10)\n- `defaultazurecredential` can now authenticate using the identity logged in to\nthe azure cli, unless explicitly disabled with a keyword argument:\n`defaultazurecredential(exclude_cli_credential=true)`\n([#10092](https://github.com/azure/azure-sdk-for-python/pull/10092))\n\n\n## 1.3.0 (2020-02-11)\n\n- correctly parse token expiration time on windows app service\n([#9393](https://github.com/azure/azure-sdk-for-python/issues/9393))\n- credentials raise `credentialunavailableerror` when they can't attempt to\nauthenticate due to missing data or state\n([#9372](https://github.com/azure/azure-sdk-for-python/pull/9372))\n- `certificatecredential` supports password-protected private keys\n([#9434](https://github.com/azure/azure-sdk-for-python/pull/9434))\n\n\n## 1.2.0 (2020-01-14)\n\n- all credential pipelines include `proxypolicy`\n([#8945](https://github.com/azure/azure-sdk-for-python/pull/8945))\n- async credentials are async context managers and have an async `close` method\n([#9090](https://github.com/azure/azure-sdk-for-python/pull/9090))\n\n\n## 1.1.0 (2019-11-27)\n\n- constructing `defaultazurecredential` no longer raises `importerror` on python\n3.8 on windows ([8294](https://github.com/azure/azure-sdk-for-python/pull/8294))\n- `interactivebrowsercredential` raises when unable to open a web browser\n([8465](https://github.com/azure/azure-sdk-for-python/pull/8465))\n- `interactivebrowsercredential` prompts for account selection\n([8470](https://github.com/azure/azure-sdk-for-python/pull/8470))\n- the credentials composing `defaultazurecredential` are configurable by keyword\narguments ([8514](https://github.com/azure/azure-sdk-for-python/pull/8514))\n- `sharedtokencachecredential` accepts an optional `tenant_id` keyword argument\n([8689](https://github.com/azure/azure-sdk-for-python/pull/8689))\n\n\n## 1.0.1 (2019-11-05)\n\n- `clientcertificatecredential` uses application and tenant ids correctly\n([8315](https://github.com/azure/azure-sdk-for-python/pull/8315))\n- `interactivebrowsercredential` properly caches tokens\n([8352](https://github.com/azure/azure-sdk-for-python/pull/8352))\n- adopted msal 1.0.0 and msal-extensions 0.1.3\n([8359](https://github.com/azure/azure-sdk-for-python/pull/8359))\n\n\n## 1.0.0 (2019-10-29)\n### breaking changes:\n- async credentials now default to [`aiohttp`](https://pypi.org/project/aiohttp/)\nfor transport but the library does not require it as a dependency because the\nasync api is optional. to use async credentials, please install\n[`aiohttp`](https://pypi.org/project/aiohttp/) or see\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md#transport)\nfor information about customizing the transport.\n- renamed `clientsecretcredential` parameter \"`secret`\" to \"`client_secret`\"\n- all credentials with `tenant_id` and `client_id` positional parameters now accept them in that order\n- changes to `interactivebrowsercredential` parameters\n  - positional parameter `client_id` is now an optional keyword argument. if no value is provided,\nthe azure cli's client id will be used.\n  - optional keyword argument `tenant` renamed `tenant_id`\n- changes to `devicecodecredential`\n  - optional positional parameter `prompt_callback` is now a keyword argument\n  - `prompt_callback`'s third argument is now a `datetime` representing the\n  expiration time of the device code\n  - optional keyword argument `tenant` renamed `tenant_id`\n- changes to `managedidentitycredential`\n  - now accepts no positional arguments, and only one keyword argument:\n  `client_id`\n  - transport configuration is now done through keyword arguments as\n  described in\n  [`azure-core` documentation](https://github.com/azure/azure-sdk-for-python/blob/azure-identity_1.0.0/sdk/core/azure-core/client_library_developer.md#transport)\n\n### fixes and improvements:\n- authenticating with a single sign-on shared with other microsoft applications\nonly requires a username when multiple users have signed in\n([#8095](https://github.com/azure/azure-sdk-for-python/pull/8095))\n- `defaultazurecredential` accepts an `authority` keyword argument, enabling\nits use in national clouds\n([#8154](https://github.com/azure/azure-sdk-for-python/pull/8154))\n\n### dependency changes\n- adopted [`msal_extensions`](https://pypi.org/project/msal-extensions/) 0.1.2\n- constrained [`msal`](https://pypi.org/project/msal/) requirement to >=0.4.1,\n<1.0.0\n\n\n## 1.0.0b4 (2019-10-07)\n### new features:\n- `authorizationcodecredential` authenticates with a previously obtained\nauthorization code. see microsoft entra's\n[authorization code documentation](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\nfor more information about this authentication flow.\n- multi-cloud support: client credentials accept the authority of an azure active\ndirectory authentication endpoint as an `authority` keyword argument. known\nauthorities are defined in `azure.identity.knownauthorities`. the default\nauthority is for azure public cloud, `login.microsoftonline.com`\n(`knownauthorities.azure_public_cloud`). an application running in azure\ngovernment would use `knownauthorities.azure_government` instead:\n>```\n>from azure.identity import defaultazurecredential, knownauthorities\n>credential = defaultazurecredential(authority=knownauthorities.azure_government)\n>```\n\n### breaking changes:\n- removed `client_secret` parameter from `interactivebrowsercredential`\n\n### fixes and improvements:\n- `usernamepasswordcredential` correctly handles environment configuration with\nno tenant information ([#7260](https://github.com/azure/azure-sdk-for-python/pull/7260))\n- user realm discovery requests are sent through credential pipelines\n([#7260](https://github.com/azure/azure-sdk-for-python/pull/7260))\n\n\n## 1.0.0b3 (2019-09-10)\n### new features:\n- `sharedtokencachecredential` authenticates with tokens stored in a local\ncache shared by microsoft applications. this enables azure sdk clients to\nauthenticate silently after you've signed in to visual studio 2019, for\nexample. `defaultazurecredential` includes `sharedtokencachecredential` when\nthe shared cache is available, and environment variable `azure_username`\nis set. see the\n[readme](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md#single-sign-on)\nfor more information.\n\n### dependency changes:\n- new dependency: [`msal-extensions`](https://pypi.org/project/msal-extensions/)\n0.1.1\n\n## 1.0.0b2 (2019-08-05)\n### breaking changes:\n- removed `azure.core.configuration` from the public api in preparation for a\nrevamped configuration api. static `create_config` methods have been renamed\n`_create_config`, and will be removed in a future release.\n\n### dependency changes:\n- adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b2\n  - if you later want to revert to a version requiring azure-core 1.0.0b1,\n  of this or another azure sdk library, you must explicitly install azure-core\n  1.0.0b1 as well. for example:\n  `pip install azure-core==1.0.0b1 azure-identity==1.0.0b1`\n- adopted [msal](https://pypi.org/project/msal/) 0.4.1\n- new dependency for python 2.7: [mock](https://pypi.org/project/mock/)\n\n### new features:\n- added credentials for authenticating users:\n - `devicecodecredential`\n - `interactivebrowsercredential`\n - `usernamepasswordcredential`\n  - async versions of these credentials will be added in a future release\n\n## 1.0.0b1 (2019-06-28)\nversion 1.0.0b1 is the first preview of our efforts to create a user-friendly\nand pythonic authentication api for azure sdk client libraries. for more\ninformation about preview releases of other azure sdk libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\nthis release supports service principal and managed identity authentication.\nsee the\n[documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md)\nfor more details. user authentication will be added in an upcoming preview\nrelease.\n\nthis release supports only global microsoft entra tenants, i.e. those\nusing the https://login.microsoftonline.com authentication endpoint.\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-identity",
  "package_url": "https://pypi.org/project/azure-identity/",
  "project_url": "https://pypi.org/project/azure-identity/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity"
  },
  "release_url": "https://pypi.org/project/azure-identity/1.15.0/",
  "requires_dist": [
    "azure-core<2.0.0,>=1.23.0",
    "cryptography>=2.5",
    "msal<2.0.0,>=1.24.0",
    "msal-extensions<2.0.0,>=0.3.0"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure identity library for python",
  "version": "1.15.0",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_identity_broker azuredevelopercredential azure_pod_identity_token_url azureapplicationcredential azureauthorityhosts",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_identity",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity",
  "release_count": 58,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_cryptography",
    "pypi_msal",
    "pypi_msal_extensions"
  ]
}
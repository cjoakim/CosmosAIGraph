{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: aws cdk",
    "framework :: aws cdk :: 2",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# aws servicecatalogappregistry construct library\n\n<!--begin stability banner-->---\n\n\n![cdk-constructs: experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> the apis of higher level constructs in this module are experimental and under active development.\n> they are subject to non-backward compatible changes or removal in any future version. these are\n> not subject to the [semantic versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. this means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n<!--end stability banner-->\n\n[aws service catalog app registry](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/appregistry.html)\nenables organizations to create and manage repositories of applications and associated resources.\n\n## table of contents\n\n* [application](#application)\n* [application-associator](#application-associator)\n* [attribute-group](#attribute-group)\n* [associations](#associations)\n\n  * [associating application with an attribute group](#attribute-group-association)\n  * [associating application with a stack](#resource-association)\n* [sharing](#sharing)\n\n  * [sharing an application](#sharing-an-application)\n  * [sharing an attribute group](#sharing-an-attribute-group)\n\nthe `@aws-cdk/aws-servicecatalogappregistry-alpha` package contains resources that enable users to automate governance and management of their aws resources at scale.\n\n```python\nimport aws_cdk.aws_servicecatalogappregistry_alpha as appreg\n```\n\n## application\n\nan appregistry application enables you to define your applications and associated resources.\nthe application name must be unique at the account level and it's immutable.\n\n```python\napplication = appreg.application(self, \"myfirstapplication\",\n    application_name=\"myfirstapplicationname\",\n    description=\"description for my application\"\n)\n```\n\nan application that has been created outside of the stack can be imported into your cdk app.\napplications can be imported by their arn via the `application.fromapplicationarn()` api:\n\n```python\nimported_application = appreg.application.from_application_arn(self, \"myimportedapplication\", \"arn:aws:servicecatalog:us-east-1:012345678910:/applications/0aqmvxvgmry0ecc4mjhwypun6i\")\n```\n\n## application-associator\n\n`applicationassociator` defines an appregistry application to contain all the stacks in deployed through your cdk package. this helps to manage all the\ncdk deployed resources.\n\n### create a new application to associate all the stacks in the cdk.app scope\n\nif you want to create an application named `myassociatedapplication` in account `123456789012` and region `us-east-1`\nand want to associate all stacks in the `app` scope to `myassociatedapplication`, then use as shown in the example below:\n\n```python\napp = app()\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.create_application_stack(\n        application_name=\"myassociatedapplication\",\n        # 'application containing stacks deployed via cdk.' is the default\n        application_description=\"associated application description\",\n        stack_name=\"myassociatedapplicationstack\",\n        # aws account and region that are implied by the current cli configuration is the default\n        env=environment(account=\"123456789012\", region=\"us-east-1\")\n    )]\n)\n```\n\nthis will create a stack `myassociatedapplicationstack` containing an application `myassociatedapplication`\nwith the `tagkey` as `managedby` and `tagvalue` as `cdk_application_associator`.\n\nby default, the stack will have system managed application manager console url as its output for the application created.\nif you want to remove the output, then use as shown in the example below:\n\n```python\napp = app()\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.create_application_stack(\n        application_name=\"myassociatedapplication\",\n        # 'application containing stacks deployed via cdk.' is the default\n        application_description=\"associated application description\",\n        stack_name=\"myassociatedapplicationstack\",\n        # disables emitting application manager url as output\n        emit_application_manager_url_as_output=false,\n        # aws account and region that are implied by the current cli configuration is the default\n        env=environment(account=\"123456789012\", region=\"us-east-1\")\n    )]\n)\n```\n\n### import existing application to associate all the stacks in the cdk.app scope\n\nif you want to re-use an existing application with arn: `arn:aws:servicecatalog:us-east-1:123456789012:/applications/applicationid`\nand want to associate all stacks in the `app` scope to your imported application, then use as shown in the example below:\n\n```python\napp = app()\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.existing_application_from_arn(\n        application_arn_value=\"arn:aws:servicecatalog:us-east-1:123456789012:/applications/applicationid\",\n        stack_name=\"myassociatedapplicationstack\"\n    )]\n)\n```\n\n### associate attribute group to the application used by `applicationassociator`\n\nif you want to associate an attribute group with application created by `applicationassociator`, then use as shown in the example below:\n\n```python\nimport aws_cdk as cdk\n\n\napp = app()\n\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.create_application_stack(\n        application_name=\"myassociatedapplication\",\n        # 'application containing stacks deployed via cdk.' is the default\n        application_description=\"associated application description\",\n        stack_name=\"myassociatedapplicationstack\",\n        # aws account and region that are implied by the current cli configuration is the default\n        env=cdk.environment(account=\"123456789012\", region=\"us-east-1\")\n    )]\n)\n\n# associate application to the attribute group.\nassociated_app.app_registry_application.add_attribute_group(\"myattributegroup\",\n    attribute_group_name=\"myattributegroupname\",\n    description=\"test attribute group\",\n    attributes={}\n)\n```\n\n### associate stacks deployed by cdk pipelines\n\nif you are using cdk pipelines to deploy your application, the application stacks will be inside stages, and\napplicationassociator will not be able to find them. call `associatestage` on each stage object before adding it to the\npipeline, as shown in the example below:\n\n```python\nimport aws_cdk as cdk\nimport aws_cdk.pipelines as codepipeline\nimport aws_cdk.aws_codecommit as codecommit\n# repo: codecommit.repository\n# pipeline: codepipeline.codepipeline\n# beta: cdk.stage\n\nclass applicationpipelinestack(cdk.stack):\n    def __init__(self, scope, id, *, application, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none, crossregionreferences=none, permissionsboundary=none, suppresstemplateindentation=none):\n        super().__init__(scope, id, application=application, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting, crossregionreferences=crossregionreferences, permissionsboundary=permissionsboundary, suppresstemplateindentation=suppresstemplateindentation)\n\n        # associate the stage to application associator.\n        application.associate_stage(beta)\n        pipeline.add_stage(beta)\n\napp = app()\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.create_application_stack(\n        application_name=\"mypipelineassociatedapplication\",\n        stack_name=\"mypipelineassociatedapplicationstack\",\n        env=cdk.environment(account=\"123456789012\", region=\"us-east-1\")\n    )]\n)\n\ncdk_pipeline = applicationpipelinestack(app, \"cdkapplicationpipelinestack\",\n    application=associated_app,\n    env=cdk.environment(account=\"123456789012\", region=\"us-east-1\")\n)\n```\n\n### associate cross-account stack\n\nby default, applicationassociator will not perform cross-account stack associations with the target application,\nto avoid deployment failures for accounts which have not been setup for cross-account associations.\nto enable cross-account stack associations, make sure all accounts are in the same organization as the\ntarget application's account and that resource sharing is enabled within the organization.\nif you wish to turn on cross-account sharing and associations, set the `associatecrossaccountstacks` field to `true`,\nas shown in the example below:\n\n```python\napp = app()\nassociated_app = appreg.applicationassociator(app, \"associatedapplication\",\n    applications=[appreg.targetapplication.create_application_stack(\n        associate_cross_account_stacks=true,\n        application_name=\"myassociatedapplication\",\n        env=environment(account=\"123456789012\", region=\"us-east-1\")\n    )]\n)\n```\n\n### associate cross-region stack\n\ncurrently, cross-region stack association is not supported.\n\n## attribute group\n\nan appregistry attribute group acts as a container for user-defined attributes for an application.\nmetadata is attached in a machine-readable format to integrate with automated workflows and tools.\nthe attribute group name must be unique at the account level and it's immutable.\n\n```python\nattribute_group = appreg.attributegroup(self, \"myfirstattributegroup\",\n    attribute_group_name=\"myfirstattributegroupname\",\n    description=\"description for my attribute group\",  # the description is optional,\n    attributes={\n        \"project\": \"foo\",\n        \"team\": [\"member1\", \"member2\", \"member3\"],\n        \"public\": false,\n        \"stages\": {\n            \"alpha\": \"complete\",\n            \"beta\": \"incomplete\",\n            \"release\": \"not started\"\n        }\n    }\n)\n```\n\nan attribute group that has been created outside of the stack can be imported into your cdk app.\nattribute groups can be imported by their arn via the `attributegroup.fromattributegrouparn()` api:\n\n```python\nimported_attribute_group = appreg.attributegroup.from_attribute_group_arn(self, \"myimportedattrgroup\", \"arn:aws:servicecatalog:us-east-1:012345678910:/attribute-groups/0aqmvxvgmry0ecc4mjhwypun6i\")\n```\n\n## associations\n\nyou can associate your appregistry application with attribute groups and resources.\nresources are cloudformation stacks that you can associate with an application to group relevant\nstacks together to enable metadata rich insights into your applications and resources.\na cloudformation stack can only be associated with one appregistry application.\nif a stack is associated with multiple applications in your app or is already associated with one,\ncdk will fail at deploy time.\n\n### associating application with a new attribute group\n\nyou can create and associate an attribute group to an application with the `addattributegroup()` api:\n\n```python\n# application: appreg.application\n# attribute_group: appreg.attributegroup\n\napplication.add_attribute_group(\"myattributegroupid\",\n    attribute_group_name=\"myattributegroupname\",\n    description=\"test attribute group\",\n    attributes={}\n)\n```\n\n### associating an attribute group with application\n\nyou can associate an application with an attribute group with `associatewith`:\n\n```python\n# application: appreg.application\n# attribute_group: appreg.attributegroup\n\nattribute_group.associate_with(application)\n```\n\n### associating application with a stack\n\nyou can associate a stack with an application with the `associateapplicationwithstack()` api:\n\n```python\n# application: appreg.application\napp = app()\nmy_stack = stack(app, \"mystack\")\napplication.associate_application_with_stack(my_stack)\n```\n\n## sharing\n\nyou can share your appregistry applications and attribute groups with aws organizations, organizational units (ous), aws accounts within an organization, as well as iam roles and users. appregistry requires that aws organizations is enabled in an account before deploying a share of an application or attribute group.\n\n### sharing an application\n\n```python\nimport aws_cdk.aws_iam as iam\n# application: appreg.application\n# my_role: iam.irole\n# my_user: iam.iuser\n\napplication.share_application(\"myshareid\",\n    name=\"myshare\",\n    accounts=[\"123456789012\"],\n    organization_arns=[\"arn:aws:organizations::123456789012:organization/o-my-org-id\"],\n    roles=[my_role],\n    users=[my_user]\n)\n```\n\ne.g., sharing an application with multiple accounts and allowing the accounts to associate resources to the application.\n\n```python\nimport aws_cdk.aws_iam as iam\n# application: appreg.application\n\napplication.share_application(\"myshareid\",\n    name=\"myshare\",\n    accounts=[\"123456789012\", \"234567890123\"],\n    share_permission=appreg.sharepermission.allow_access\n)\n```\n\n### sharing an attribute group\n\n```python\nimport aws_cdk.aws_iam as iam\n# attribute_group: appreg.attributegroup\n# my_role: iam.irole\n# my_user: iam.iuser\n\nattribute_group.share_attribute_group(\"myshareid\",\n    name=\"myshare\",\n    accounts=[\"123456789012\"],\n    organization_arns=[\"arn:aws:organizations::123456789012:organization/o-my-org-id\"],\n    roles=[my_role],\n    users=[my_user]\n)\n```\n\ne.g., sharing an application with multiple accounts and allowing the accounts to associate applications to the attribute group.\n\n```python\nimport aws_cdk.aws_iam as iam\n# attribute_group: appreg.attributegroup\n\nattribute_group.share_attribute_group(\"myshareid\",\n    name=\"myshare\",\n    accounts=[\"123456789012\", \"234567890123\"],\n    share_permission=appreg.sharepermission.allow_access\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-servicecatalogappregistry-alpha",
  "package_url": "https://pypi.org/project/aws-cdk.aws-servicecatalogappregistry-alpha/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-servicecatalogappregistry-alpha/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-servicecatalogappregistry-alpha/2.116.1a0/",
  "requires_dist": [
    "aws-cdk-lib <3.0.0,>=2.116.1",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.93.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "the cdk construct library for aws::servicecatalogappregistry",
  "version": "2.116.1a0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_servicecatalogappregistry_alpha aws_cdk aws_codecommit aws_iam servicecatalog",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_servicecatalogappregistry_alpha",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 172,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
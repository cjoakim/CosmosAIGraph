{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "topic :: scientific/engineering :: astronomy",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "======\npyerfa\n======\n\n|pypi status| |zenodo| |ci status| |documentation status|\n\npyerfa is the python_ wrapper for the erfa_ library (essential routines for\nfundamental astronomy), a c library containing key algorithms for astronomy,\nwhich is based on the sofa library published by the international astronomical\nunion (iau).  all c routines are wrapped as numpy_ `universal functions\n<https://numpy.org/devdocs/reference/ufuncs.html>`_, so that they can be\ncalled with scalar or array inputs.\n\nthe project is a split of ``astropy._erfa`` module, developed in the\ncontext of astropy_ project, into a standalone package.  it contains\nthe erfa_ c source code as a git submodule.  the wrapping is done\nwith help of the jinja2_ template engine.\n\nif you use this package in your research, please cita it via doi\n`10.5281/zenodo.3940699 <https://doi.org/10.5281/zenodo.3940699>`_.\n\n.. installation\n\ninstallation instructions\n-------------------------\n\nthe package can be installed from the package directory using a simple::\n\n  $ pip install .\n\nand similarly a wheel_ can be created with::\n\n  $ pip wheel .\n\n.. note:: if you already have the c library ``liberfa`` on your\n  system, you can use that by setting environment variable\n  ``pyerfa_use_system_liberfa=1``.\n\n\n.. _wheel: https://github.com/pypa/wheel\n\nthe package can be obtained from pypi_ or directly from the git repository::\n\n  $ git clone --recursive https://github.com/liberfa/pyerfa/\n\n\n\ntesting\n-------\n\nfor testing, one can install the packages together with its testing\ndependencies and then test it with::\n\n  $ pip install .[test]\n  $ pytest\n\nalternatively, one can use ``tox``, which will set up a separate testing\nenvironment for you, with::\n\n  $ tox -e test\n\n\nusage\n-----\n\nthe package can be imported as ``erfa`` which has all erfa_ ufuncs wrapped with\npython code that tallies errors and warnings.  also exposed are the constants\ndefined by erfa_ in `erfam.h\n<https://github.com/liberfa/erfa/blob/master/src/erfam.h>`_, as well\nas `numpy.dtype` corresponding to structures used by erfa_.  examples::\n\n  >>> import erfa\n  >>> erfa.jd2cal(2460000., [0, 1, 2, 3])\n  (array([2023, 2023, 2023, 2023], dtype=int32),\n   array([2, 2, 2, 2], dtype=int32),\n   array([24, 25, 26, 27], dtype=int32),\n   array([0.5, 0.5, 0.5, 0.5]))\n  >>> erfa.plan94(2460000., [0, 1, 2, 3], 1)\n  array([([ 0.09083713, -0.39041392, -0.21797389], [0.02192341, 0.00705449, 0.00149618]),\n         ([ 0.11260694, -0.38275202, -0.21613731], [0.02160375, 0.00826891, 0.00217806]),\n         ([ 0.13401992, -0.37387798, -0.21361622], [0.0212094 , 0.00947838, 0.00286503]),\n         ([ 0.15500031, -0.36379788, -0.21040601], [0.02073822, 0.01068061, 0.0035561 ])],\n        dtype={'names': ['p', 'v'], 'formats': [('<f8', (3,)), ('<f8', (3,))], 'offsets': [0, 24], 'itemsize': 48, 'aligned': true})\n  >>> erfa.dt_pv\n  dtype([('p', '<f8', (3,)), ('v', '<f8', (3,))], align=true)\n  >>> erfa.dt_eraldbody\n  dtype([('bm', '<f8'), ('dl', '<f8'), ('pv', [('p', '<f8', (3,)), ('v', '<f8', (3,))])], align=true)\n  >>> erfa.daysec\n  86400.0\n\nit is also possible to use the ufuncs directly, though then one has to\ndeal with the warning and error states explicitly.  for instance, compare::\n\n  >>> erfa.jd2cal(-600000., [0, 1, 2, 3])\n  traceback (most recent call last):\n  ...\n  erfaerror: erfa function \"jd2cal\" yielded 4 of \"unacceptable date (note 1)\"\n  >>> erfa.ufunc.jd2cal(-600000., [0, 1, 2, 3])\n  (array([-1, -1, -1, -1], dtype=int32),\n   ...,\n   array([-1, -1, -1, -1], dtype=int32))\n\n\nlicense\n-------\n\npyerfa is licensed under a 3-clause bsd style license - see the\n`license.rst <license.rst>`_ file.\n\n\n.. references\n.. _python: https://www.python.org/\n.. _erfa: https://github.com/liberfa/erfa\n.. _numpy: https://numpy.org/\n.. _astropy: https://www.astropy.org\n.. _pypi: https://pypi.org/project/pyerfa/\n.. _jinja2: https://palletsprojects.com/p/jinja/\n.. |pypi status| image:: https://img.shields.io/pypi/v/pyerfa.svg\n    :target: https://pypi.python.org/pypi/pyerfa\n    :alt: pypi status\n.. |zenodo| image:: https://zenodo.org/badge/261332899.svg\n   :target: https://zenodo.org/badge/latestdoi/261332899\n   :alt: doi 10.5281/zenodo.3940699\n.. |ci status| image:: https://github.com/liberfa/pyerfa/workflows/ci/badge.svg\n    :target: https://github.com/liberfa/pyerfa/actions\n    :alt: github actions ci status\n.. |documentation status| image:: https://img.shields.io/readthedocs/pyerfa/latest.svg?logo=read%20the%20docs&logocolor=white&label=docs&version=stable\n    :target: https://pyerfa.readthedocs.io/en/stable/?badge=stable\n    :alt: documentation status\n",
  "docs_url": null,
  "keywords": "astronomy,astrophysics,cosmology,space,science,coordinate",
  "license": "bsd 3-clause license",
  "name": "pyerfa",
  "package_url": "https://pypi.org/project/pyerfa/",
  "project_url": "https://pypi.org/project/pyerfa/",
  "project_urls": {
    "Homepage": "https://github.com/liberfa/pyerfa"
  },
  "release_url": "https://pypi.org/project/pyerfa/2.0.1.1/",
  "requires_dist": [
    "numpy >=1.19",
    "sphinx-astropy >=1.3 ; extra == 'docs'",
    "pytest ; extra == 'test'",
    "pytest-doctestplus >=0.7 ; extra == 'test'"
  ],
  "requires_python": ">=3.9",
  "summary": "python bindings for erfa",
  "version": "2.0.1.1",
  "releases": [],
  "developers": [
    "the_pyerfa_developers"
  ],
  "kwds": "python_ astropy python astropy_ _python",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_pyerfa",
  "homepage": "https://github.com/liberfa/pyerfa",
  "release_count": 11,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_pytest",
    "pypi_pytest_doctestplus",
    "pypi_sphinx_astropy"
  ]
}
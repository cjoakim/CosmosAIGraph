{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3"
  ],
  "description": "logstash_formatter: json logs for logstash\n==========================================\n\nthis library is provided to allow standard python logging to output log data\nas json objects ready to be shipped out to logstash.\n\nthis project has been originally open sourced by `exoscale <https://www.exoscale.ch/>`_ (which is a great hosting service btw), thanks to them.\n\ninstalling\n----------\npip (`pypi`_)::\n\n    pip install logstash_formatter\n\n.. _pypi: https://pypi.python.org/pypi/logstash_formatter\n\nmanual::\n\n    python setup.py install\n\nusage\n-----\n\njson outputs are provided by the logstashformatter logging formatter.\n\n::\n\n    import logging\n    from logstash_formatter import logstashformatterv1\n\n    logger = logging.getlogger()\n    handler = logging.streamhandler()\n    formatter = logstashformatterv1()\n\n    handler.setformatter(formatter)\n    logger.addhandler(handler)\n\nthe logstashformatter may take the following named parameters:\n\n* ``fmt``: config as a json string that supports:\n\n  * ``extra``: provide extra fields always present in logs.\n  * ``source_host``: override source host name.\n\n* ``json_cls``: json encoder to forward to ``json.dump``.\n* ``json_default``: default json representation for unknown types,\n  by default coerce everything to a string.\n\n``logstashformatterv1`` adheres to the more 1.2.0 schema and will not update\nfields, apart from a special handling of ``msg`` which will be updated to\n``message`` when applicable.\n\nyou can also add extra fields to your json output by specifying a dict in place of message, or by specifying\nthe named argument ``extra`` as a dictionary. when supplying the ``exc_info`` named argument with a truthy value,\nand if an exception is found on the stack, its traceback will be attached to the payload as well.\n\n::\n\n    logger.info({\"account\": 123, \"ip\": \"172.20.19.18\"})\n    logger.info(\"classic message for account: {account}\", extra={\"account\": account})\n    \n    try:\n      h = {}\n      h['key']\n    except:\n      logger.info(\"something unexpected happened\", exc_info=true)\n\nsample output for logstashformatter\n-----------------------------------\n\nthe following keys will be found in the output json:\n\n* ``@source_host``: source hostname for the log\n* ``@timestamp``: iso 8601 timestamp\n* ``@message``: short message for this log\n* ``@fields``: all extra fields\n\n::\n\n  {\n    \"@fields\": {\n        \"account\": \"pyr\",\n        \"args\": [],\n        \"created\": 1367480388.013037,\n        \"exception\": [\n            \"traceback (most recent call last):\\n\",\n            \"  file \\\"test.py\\\", line 16, in <module>\\n    k['unknown']\\n\",\n            \"keyerror: 'unknown'\\n\"\n        ],\n        \"filename\": \"test.py\",\n        \"funcname\": \"<module>\",\n        \"levelname\": \"warning\",\n        \"levelno\": 30,\n        \"lineno\": 18,\n        \"module\": \"test\",\n        \"msecs\": 13.036966323852539,\n        \"name\": \"root\",\n        \"pathname\": \"test.py\",\n        \"process\": 1819,\n        \"processname\": \"mainprocess\",\n        \"relativecreated\": 18.002986907958984,\n        \"thread\": 140060726359808,\n        \"threadname\": \"mainthread\"\n    },\n    \"@message\": \"test\",\n    \"@source_host\": \"phoenix.spootnik.org\",\n    \"@timestamp\": \"2013-05-02t09:39:48.013158\"\n  }\n\n\nsample output for logstashformatterv1\n-------------------------------------\n\nthe following keys will be found in the output json:\n\n* ``@timestamp``: iso 8601 timestamp\n* ``@version``: version of the schema\n\n::\n\n    {\"@version\": 1,\n     \"account\": \"pyr\",\n     \"lineno\": 1,\n     \"levelno\": 30,\n     \"filename\": \"test.py\",\n     \"thread\": 140566036444928,\n     \"@timestamp\": \"2015-03-30t09:46:23.000z\",\n     \"threadname\": \"mainthread\",\n     \"relativecreated\": 51079.52117919922,\n     \"process\": 10787,\n     \"source_host\": \"phoenix.spootnik.org\",\n     \"processname\": \"mainprocess\",\n     \"pathname\": \"test.py\",\n     \"args\": [],\n     \"module\": \"test\",\n     \"msecs\": 999.9005794525146,\n     \"created\": 1427708782.9999006,\n     \"name\": \"root\",\n     \"stack_info\": null,\n     \"funcname\": \"<module>\",\n     \"levelname\": \"warning\",\n     \"message\": \"foo\"}\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit, see license file",
  "name": "logstash_formatter",
  "package_url": "https://pypi.org/project/logstash_formatter/",
  "project_url": "https://pypi.org/project/logstash_formatter/",
  "project_urls": {
    "Homepage": "https://github.com/exoscale/python-logstash-formatter"
  },
  "release_url": "https://pypi.org/project/logstash_formatter/0.5.17/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "json formatter meant for logstash",
  "version": "0.5.17",
  "releases": [],
  "developers": [
    "pierre",
    "pierre-yves.ritschard@exoscale.ch"
  ],
  "kwds": "logstash_formatter logstashformatter logstashformatterv1 logstash logging",
  "license_kwds": "mit, see license file",
  "libtype": "pypi",
  "id": "pypi_logstash_formatter",
  "homepage": "https://github.com/exoscale/python-logstash-formatter",
  "release_count": 13,
  "dependency_ids": []
}
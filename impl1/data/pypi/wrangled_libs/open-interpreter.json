{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11"
  ],
  "description": "<h1 align=\"center\">\u25cf open interpreter</h1>\n\n<p align=\"center\">\n    <a href=\"https://discord.gg/6p3fd6rbvm\">\n        <img alt=\"discord\" src=\"https://img.shields.io/discord/1146610656779440188?logo=discord&style=flat&logocolor=white\"/></a>\n    <a href=\"docs/readme_ja.md\"><img src=\"https://img.shields.io/badge/\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8-\u65e5\u672c\u8a9e-white.svg\" alt=\"ja doc\"/></a>\n    <a href=\"docs/readme_zh.md\"><img src=\"https://img.shields.io/badge/\u6587\u6863-\u4e2d\u6587\u7248-white.svg\" alt=\"zh doc\"/></a>\n    <a href=\"docs/readme_in.md\"><img src=\"https://img.shields.io/badge/hindi-white.svg\" alt=\"in doc\"/></a>\n    <img src=\"https://img.shields.io/static/v1?label=license&message=mit&color=white&style=flat\" alt=\"license\"/>\n    <br>\n    <br>\n    <b>let language models run code on your computer.</b><br>\n    an open-source, locally running implementation of openai's code interpreter.<br>\n    <br><a href=\"https://openinterpreter.com\">get early access to the desktop app</a>\u200e \u200e |\u200e \u200e <b><a href=\"https://docs.openinterpreter.com/\">read our new docs</a></b><br>\n</p>\n\n<br>\n\n![poster](https://github.com/killianlucas/open-interpreter/assets/63927363/08f0d493-956b-4d49-982e-67d4b20c4b56)\n\n<br>\n\n**update:** \u25cf 0.1.12 supports `interpreter --vision` ([documentation](https://docs.openinterpreter.com/usage/terminal/vision))\n\n<br>\n\n```shell\npip install open-interpreter\n```\n\n```shell\ninterpreter\n```\n\n<br>\n\n**open interpreter** lets llms run code (python, javascript, shell, and more) locally. you can chat with open interpreter through a chatgpt-like interface in your terminal by running `$ interpreter` after installing.\n\nthis provides a natural-language interface to your computer's general-purpose capabilities:\n\n- create and edit photos, videos, pdfs, etc.\n- control a chrome browser to perform research\n- plot, clean, and analyze large datasets\n- ...etc.\n\n**\u26a0\ufe0f note: you'll be asked to approve code before it's run.**\n\n<br>\n\n## demo\n\nhttps://github.com/killianlucas/open-interpreter/assets/63927363/37152071-680d-4423-9af3-64836a6f7b60\n\n#### an interactive demo is also available on google colab:\n\n[![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1wkmrxzgserej2xurikzxreaxdxmsgwbb?usp=sharing)\n\n#### along with an example implementation of a voice interface (inspired by _her_):\n\n[![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1nojyghdgxh6y1g1oxthebbb2atyodbik)\n\n## quick start\n\n```shell\npip install open-interpreter\n```\n\n### terminal\n\nafter installation, simply run `interpreter`:\n\n```shell\ninterpreter\n```\n\n### python\n\n```python\nimport interpreter\n\ninterpreter.chat(\"plot aapl and meta's normalized stock prices\") # executes a single command\ninterpreter.chat() # starts an interactive chat\n```\n\n## comparison to chatgpt's code interpreter\n\nopenai's release of [code interpreter](https://openai.com/blog/chatgpt-plugins#code-interpreter) with gpt-4 presents a fantastic opportunity to accomplish real-world tasks with chatgpt.\n\nhowever, openai's service is hosted, closed-source, and heavily restricted:\n\n- no internet access.\n- [limited set of pre-installed packages](https://wfhbrian.com/mastering-chatgpts-code-interpreter-list-of-python-packages/).\n- 100 mb maximum upload, 120.0 second runtime limit.\n- state is cleared (along with any generated files or links) when the environment dies.\n\n---\n\nopen interpreter overcomes these limitations by running in your local environment. it has full access to the internet, isn't restricted by time or file size, and can utilize any package or library.\n\nthis combines the power of gpt-4's code interpreter with the flexibility of your local development environment.\n\n## commands\n\n**update:** the generator update (0.1.5) introduced streaming:\n\n```python\nmessage = \"what operating system are we on?\"\n\nfor chunk in interpreter.chat(message, display=false, stream=true):\n  print(chunk)\n```\n\n### interactive chat\n\nto start an interactive chat in your terminal, either run `interpreter` from the command line:\n\n```shell\ninterpreter\n```\n\nor `interpreter.chat()` from a .py file:\n\n```python\ninterpreter.chat()\n```\n\n**you can also stream each chunk:**\n\n```python\nmessage = \"what operating system are we on?\"\n\nfor chunk in interpreter.chat(message, display=false, stream=true):\n  print(chunk)\n```\n\n### programmatic chat\n\nfor more precise control, you can pass messages directly to `.chat(message)`:\n\n```python\ninterpreter.chat(\"add subtitles to all videos in /videos.\")\n\n# ... streams output to your terminal, completes task ...\n\ninterpreter.chat(\"these look great but can you make the subtitles bigger?\")\n\n# ...\n```\n\n### start a new chat\n\nin python, open interpreter remembers conversation history. if you want to start fresh, you can reset it:\n\n```python\ninterpreter.reset()\n```\n\n### save and restore chats\n\n`interpreter.chat()` returns a list of messages, which can be used to resume a conversation with `interpreter.messages = messages`:\n\n```python\nmessages = interpreter.chat(\"my name is killian.\") # save messages to 'messages'\ninterpreter.reset() # reset interpreter (\"killian\" will be forgotten)\n\ninterpreter.messages = messages # resume chat from 'messages' (\"killian\" will be remembered)\n```\n\n### customize system message\n\nyou can inspect and configure open interpreter's system message to extend its functionality, modify permissions, or give it more context.\n\n```python\ninterpreter.system_message += \"\"\"\nrun shell commands with -y so the user doesn't have to confirm them.\n\"\"\"\nprint(interpreter.system_message)\n```\n\n### change your language model\n\nopen interpreter uses [litellm](https://docs.litellm.ai/docs/providers/) to connect to hosted language models.\n\nyou can change the model by setting the model parameter:\n\n```shell\ninterpreter --model gpt-3.5-turbo\ninterpreter --model claude-2\ninterpreter --model command-nightly\n```\n\nin python, set the model on the object:\n\n```python\ninterpreter.model = \"gpt-3.5-turbo\"\n```\n\n[find the appropriate \"model\" string for your language model here.](https://docs.litellm.ai/docs/providers/)\n\n### running open interpreter locally\n\nopen interpreter uses [lm studio](https://lmstudio.ai/) to connect to local language models (experimental).\n\nsimply run `interpreter` in local mode from the command line:\n\n```shell\ninterpreter --local\n```\n\n**you will need to run lm studio in the background.**\n\n1. download [https://lmstudio.ai/](https://lmstudio.ai/) then start it.\n2. select a model then click **\u2193 download**.\n3. click the **\u2194\ufe0f** button on the left (below \ud83d\udcac).\n4. select your model at the top, then click **start server**.\n\nonce the server is running, you can begin your conversation with open interpreter.\n\n(when you run the command `interpreter --local`, the steps above will be displayed.)\n\n> **note:** local mode sets your `context_window` to 3000, and your `max_tokens` to 1000. if your model has different requirements, set these parameters manually (see below).\n\n#### context window, max tokens\n\nyou can modify the `max_tokens` and `context_window` (in tokens) of locally running models.\n\nfor local mode, smaller context windows will use less ram, so we recommend trying a much shorter window (~1000) if it's is failing / if it's slow. make sure `max_tokens` is less than `context_window`.\n\n```shell\ninterpreter --local --max_tokens 1000 --context_window 3000\n```\n\n### debug mode\n\nto help contributors inspect open interpreter, `--debug` mode is highly verbose.\n\nyou can activate debug mode by using it's flag (`interpreter --debug`), or mid-chat:\n\n```shell\n$ interpreter\n...\n> %debug true <- turns on debug mode\n\n> %debug false <- turns off debug mode\n```\n\n### interactive mode commands\n\nin the interactive mode, you can use the below commands to enhance your experience. here's a list of available commands:\n\n**available commands:**\n\n- `%debug [true/false]`: toggle debug mode. without arguments or with `true` it\n  enters debug mode. with `false` it exits debug mode.\n- `%reset`: resets the current session's conversation.\n- `%undo`: removes the previous user message and the ai's response from the message history.\n- `%save_message [path]`: saves messages to a specified json path. if no path is provided, it defaults to `messages.json`.\n- `%load_message [path]`: loads messages from a specified json path. if no path is provided, it defaults to `messages.json`.\n- `%tokens [prompt]`: (_experimental_) calculate the tokens that will be sent with the next prompt as context and estimate their cost. optionally calculate the tokens and estimated cost of a `prompt` if one is provided. relies on [litellm's `cost_per_token()` method](https://docs.litellm.ai/docs/completion/token_usage#2-cost_per_token) for estimated costs.\n- `%help`: show the help message.\n\n### configuration\n\nopen interpreter allows you to set default behaviors using a `config.yaml` file.\n\nthis provides a flexible way to configure the interpreter without changing command-line arguments every time.\n\nrun the following command to open the configuration file:\n\n```\ninterpreter --config\n```\n\n#### multiple configuration files\n\nopen interpreter supports multiple `config.yaml` files, allowing you to easily switch between configurations via the `--config_file` argument.\n\n**note**: `--config_file` accepts either a file name or a file path. file names will use the default configuration directory, while file paths will use the specified path.\n\nto create or edit a new configuration, run:\n\n```\ninterpreter --config --config_file $config_path\n```\n\nto have open interpreter load a specific configuration file run:\n\n```\ninterpreter --config_file $config_path\n```\n\n**note**: replace `$config_path` with the name of or path to your configuration file.\n\n##### cli example\n\n1. create a new `config.turbo.yaml` file\n   ```\n   interpreter --config --config_file config.turbo.yaml\n   ```\n2. edit the `config.turbo.yaml` file to set `model` to `gpt-3.5-turbo`\n3. run open interpreter with the `config.turbo.yaml` configuration\n   ```\n   interpreter --config_file config.turbo.yaml\n   ```\n\n##### python example\n\nyou can also load configuration files when calling open interpreter from python scripts:\n\n```python\nimport os\nimport interpreter\n\ncurrentpath = os.path.dirname(os.path.abspath(__file__))\nconfig_path=os.path.join(currentpath, './config.test.yaml')\n\ninterpreter.extend_config(config_path=config_path)\n\nmessage = \"what operating system are we on?\"\n\nfor chunk in interpreter.chat(message, display=false, stream=true):\n  print(chunk)\n```\n\n## sample fastapi server\n\nthe generator update enables open interpreter to be controlled via http rest endpoints:\n\n```python\n# server.py\n\nfrom fastapi import fastapi\nfrom fastapi.responses import streamingresponse\nimport interpreter\n\napp = fastapi()\n\n@app.get(\"/chat\")\ndef chat_endpoint(message: str):\n    def event_stream():\n        for result in interpreter.chat(message, stream=true):\n            yield f\"data: {result}\\n\\n\"\n\n    return streamingresponse(event_stream(), media_type=\"text/event-stream\")\n\n@app.get(\"/history\")\ndef history_endpoint():\n    return interpreter.messages\n```\n\n```shell\npip install fastapi uvicorn\nuvicorn server:app --reload\n```\n\n## safety notice\n\nsince generated code is executed in your local environment, it can interact with your files and system settings, potentially leading to unexpected outcomes like data loss or security risks.\n\n**\u26a0\ufe0f open interpreter will ask for user confirmation before executing code.**\n\nyou can run `interpreter -y` or set `interpreter.auto_run = true` to bypass this confirmation, in which case:\n\n- be cautious when requesting commands that modify files or system settings.\n- watch open interpreter like a self-driving car, and be prepared to end the process by closing your terminal.\n- consider running open interpreter in a restricted environment like google colab or replit. these environments are more isolated, reducing the risks of executing arbitrary code.\n\nthere is **experimental** support for a [safe mode](docs/safe_mode.md) to help mitigate some risks.\n\n## how does it work?\n\nopen interpreter equips a [function-calling language model](https://platform.openai.com/docs/guides/gpt/function-calling) with an `exec()` function, which accepts a `language` (like \"python\" or \"javascript\") and `code` to run.\n\nwe then stream the model's messages, code, and your system's outputs to the terminal as markdown.\n\n# contributing\n\nthank you for your interest in contributing! we welcome involvement from the community.\n\nplease see our [contributing guidelines](docs/contributing.md) for more details on how to get involved.\n\n# roadmap\n\nvisit [our roadmap](https://github.com/killianlucas/open-interpreter/blob/main/docs/roadmap.md) to preview the future of open interpreter.\n\n## license\n\nopen interpreter is licensed under the mit license. you are permitted to use, copy, modify, distribute, sublicense, and sell copies of the software.\n\n**note**: this software is not affiliated with openai.\n\n> having access to a junior programmer working at the speed of your fingertips ... can make new workflows effortless and efficient, as well as open the benefits of programming to new audiences.\n>\n> \u2014 _openai's code interpreter release_\n\n<br>\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "open-interpreter",
  "package_url": "https://pypi.org/project/open-interpreter/",
  "project_url": "https://pypi.org/project/open-interpreter/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/open-interpreter/0.1.17/",
  "requires_dist": [
    "appdirs (>=1.4.4,<2.0.0)",
    "astor (>=0.8.1,<0.9.0)",
    "git-python (>=1.0.3,<2.0.0)",
    "inquirer (>=3.1.3,<4.0.0)",
    "litellm (==0.13.2)",
    "openai (>=0.28.0,<0.29.0)",
    "pyyaml (>=6.0.1,<7.0.0)",
    "rich (>=13.4.2,<14.0.0)",
    "six (>=1.16.0,<2.0.0)",
    "tiktoken (>=0.4.0,<0.5.0)",
    "tokentrim (>=0.1.13,<0.2.0)",
    "wget (>=3.2,<4.0)",
    "yaspin (>=3.0.1,<4.0.0)",
    "psutil (>=5.9.6,<6.0.0)",
    "pyreadline3 (>=3.4.1,<4.0.0) ; sys_platform == \"win32\"",
    "html2image (>=2.0.4.3,<3.0.0.0)",
    "ipykernel (>=6.26.0,<7.0.0)",
    "jupyter-client (>=8.6.0,<9.0.0)"
  ],
  "requires_python": ">=3.10,<3.12",
  "summary": "let language models run code.",
  "version": "0.1.17",
  "releases": [],
  "developers": [
    "killian@openinterpreter.com",
    "killian_lucas"
  ],
  "kwds": "\u6587\u6863 discord readme_zh \u4e2d\u6587\u7248 href",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_open_interpreter",
  "homepage": "",
  "release_count": 99,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_astor",
    "pypi_git_python",
    "pypi_html2image",
    "pypi_inquirer",
    "pypi_ipykernel",
    "pypi_jupyter_client",
    "pypi_litellm",
    "pypi_openai",
    "pypi_psutil",
    "pypi_pyreadline3",
    "pypi_pyyaml",
    "pypi_rich",
    "pypi_six",
    "pypi_tiktoken",
    "pypi_tokentrim",
    "pypi_wget",
    "pypi_yaspin"
  ]
}
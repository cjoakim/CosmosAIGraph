{
  "classifiers": [
    "environment :: web environment",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: testing",
    "topic :: software development :: testing :: unit",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "<!-- markdownlint-disable -->\n<p align=\"center\">\n  <img src=\"https://github.com/starlite-api/branding/blob/9ab099a2089219c07727baaa29f67e9474ff93c8/assets/starlite%20branding%20-%20svg%20-%20transparent/logo%20-%20banner%20-%20inline%20-%20light.svg#gh-light-mode-only\" alt=\"starlite logo - light\" width=\"100%\" height=\"auto\" />\n  <img src=\"https://github.com/starlite-api/branding/blob/9ab099a2089219c07727baaa29f67e9474ff93c8/assets/starlite%20branding%20-%20svg%20-%20transparent/logo%20-%20banner%20-%20inline%20-%20dark.svg#gh-dark-mode-only\" alt=\"starlite logo - dark\" width=\"100%\" height=\"auto\" />\n</p>\n<!-- markdownlint-restore -->\n\n<!-- markdownlint-disable -->\n<div align=\"center\">\n\n![pypi - license](https://img.shields.io/pypi/l/pydantic-factories?color=blue)\n![pypi - python version](https://img.shields.io/pypi/pyversions/pydantic-factories)\n\n[![discord](https://img.shields.io/discord/919193495116337154?color=202235&label=%20discord&logo=discord)](https://discord.gg/x3fjqy8d2j) [![matrix](https://img.shields.io/badge/%5bm%5d%20matrix-bridged-blue?color=202235)](https://matrix.to/#/#starlitespace:matrix.org) [![reddit](https://img.shields.io/reddit/subreddit-subscribers/starlite?label=r%2fstarlite&logo=reddit)](https://reddit.com/r/starlite)\n\n</div>\n<!-- markdownlint-restore -->\n\n# \u26a0\ufe0f\n\n# the next version of this library is released as [polyfactory](https://pypi.org/project/polyfactory/). users are encouraged to migrate to it.\n\n# \u26a0\ufe0f\n\n# pydantic-factories\n\nthis library offers powerful mock data generation capabilities for [pydantic](https://github.com/samuelcolvin/pydantic)\nbased models, `dataclasses` and `typedict`s. it can also be used with other libraries that use pydantic as a foundation.\n\ncheck out [the documentation \ud83d\udcda](https://starlite-api.github.io/pydantic-factories/).\n\n## installation\n\n```shell\npip install pydantic-factories\n```\n\n## example\n\n```python\nfrom datetime import date, datetime\nfrom typing import list, union\n\nfrom pydantic import basemodel, uuid4\n\nfrom pydantic_factories import modelfactory\n\n\nclass person(basemodel):\n    id: uuid4\n    name: str\n    hobbies: list[str]\n    age: union[float, int]\n    birthday: union[datetime, date]\n\n\nclass personfactory(modelfactory):\n    __model__ = person\n\n\nresult = personfactory.build()\n```\n\nthat's it - with almost no work, we are able to create a mock data object fitting the `person` class model definition.\n\nthis is possible because of the typing information available on the pydantic model and model-fields, which are used as a\nsource of truth for data generation.\n\nthe factory parses the information stored in the pydantic model and generates a dictionary of kwargs that are passed to\nthe `person` class' init method.\n\n## features\n\n- \u2705 supports both built-in and pydantic types\n- \u2705 supports pydantic field constraints\n- \u2705 supports complex field types\n- \u2705 supports custom model fields\n- \u2705 supports dataclasses\n- \u2705 supports typeddicts\n\n## why this library?\n\n- \ud83d\udcaf powerful\n- \ud83d\udcaf extensible\n- \ud83d\udcaf simple\n- \ud83d\udcaf rigorously tested\n\n## contributing\n\nthis library is open to contributions - in fact we welcome it. [please see the contribution guide!](contributing.md)\n",
  "docs_url": null,
  "keywords": "dataclasses,factory,faker,mock,pydantic,pytest,starlite,tdd,testing",
  "license": "mit",
  "name": "pydantic-factories",
  "package_url": "https://pypi.org/project/pydantic-factories/",
  "project_url": "https://pypi.org/project/pydantic-factories/",
  "project_urls": {
    "Documentation": "https://github.com/starlite-api/pydantic-factories",
    "Homepage": "https://github.com/starlite-api/pydantic-factories",
    "Repository": "https://github.com/starlite-api/pydantic-factories"
  },
  "release_url": "https://pypi.org/project/pydantic-factories/1.17.3/",
  "requires_dist": [
    "faker",
    "pydantic (>=1.10.0)",
    "typing-extensions"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "mock data generation for pydantic based models and python dataclasses",
  "version": "1.17.3",
  "releases": [],
  "developers": [
    "na",
    "nhirschfeld@gmail.com"
  ],
  "kwds": "starlite starlitespace 2fstarlite pytest 20light",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pydantic_factories",
  "homepage": "https://github.com/starlite-api/pydantic-factories",
  "release_count": 62,
  "dependency_ids": [
    "pypi_faker",
    "pypi_pydantic",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: c",
    "programming language :: c++",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: utilities"
  ],
  "description": "# pot: python optimal transport\n\n[![pypi version](https://badge.fury.io/py/pot.svg)](https://badge.fury.io/py/pot)\n[![anaconda cloud](https://anaconda.org/conda-forge/pot/badges/version.svg)](https://anaconda.org/conda-forge/pot)\n[![build status](https://github.com/pythonot/pot/actions/workflows/build_tests.yml/badge.svg)](https://github.com/pythonot/pot/actions)\n[![codecov status](https://codecov.io/gh/pythonot/pot/branch/master/graph/badge.svg)](https://codecov.io/gh/pythonot/pot)\n[![downloads](https://static.pepy.tech/badge/pot)](https://pepy.tech/project/pot)\n[![anaconda downloads](https://anaconda.org/conda-forge/pot/badges/downloads.svg)](https://anaconda.org/conda-forge/pot)\n[![license](https://anaconda.org/conda-forge/pot/badges/license.svg)](https://github.com/pythonot/pot/blob/master/license)\n\nthis open source python library provide several solvers for optimization\nproblems related to optimal transport for signal, image processing and machine\nlearning.\n\nwebsite and documentation: [https://pythonot.github.io/](https://pythonot.github.io/)\n\nsource code (mit): [https://github.com/pythonot/pot](https://github.com/pythonot/pot)\n\npot provides the following generic ot solvers (links to examples):\n\n* [ot network simplex solver](https://pythonot.github.io/auto_examples/plot_ot_1d.html) for the linear program/ earth movers distance [1] .\n* [conditional gradient](https://pythonot.github.io/auto_examples/plot_optim_otreg.html) [6] and [generalized conditional gradient](https://pythonot.github.io/auto_examples/plot_optim_otreg.html) for regularized ot [7].\n* entropic regularization ot solver with [sinkhorn knopp\n  algorithm](https://pythonot.github.io/auto_examples/plot_ot_1d.html) [2] ,\n  stabilized version [9] [10] [34], lazy cpu/gpu solver from geomloss [60] [61], greedy sinkhorn [22] and [screening\n  sinkhorn [26]\n  ](https://pythonot.github.io/auto_examples/plot_screenkhorn_1d.html).\n* bregman projections for [wasserstein barycenter](https://pythonot.github.io/auto_examples/barycenters/plot_barycenter_lp_vs_entropic.html) [3], [convolutional barycenter](https://pythonot.github.io/auto_examples/barycenters/plot_convolutional_barycenter.html) [21]  and unmixing [4].\n* sinkhorn divergence [23] and entropic regularization ot from empirical data.\n* debiased sinkhorn barycenters [sinkhorn divergence barycenter](https://pythonot.github.io/auto_examples/barycenters/plot_debiased_barycenter.html) [37]\n* [smooth optimal transport solvers](https://pythonot.github.io/auto_examples/plot_ot_1d_smooth.html) (dual and semi-dual) for kl and squared l2 regularizations [17].\n* weak ot solver between empirical distributions [39]\n* non regularized [wasserstein barycenters [16] ](https://pythonot.github.io/auto_examples/barycenters/plot_barycenter_lp_vs_entropic.html) with lp solver (only small scale).\n* [gromov-wasserstein distances](https://pythonot.github.io/auto_examples/gromov/plot_gromov.html) and [gw barycenters](https://pythonot.github.io/auto_examples/gromov/plot_gromov_barycenter.html)  (exact [13] and regularized [12,51]), differentiable using gradients from graph dictionary learning [38]\n * [fused-gromov-wasserstein distances solver](https://pythonot.github.io/auto_examples/gromov/plot_fgw.html#sphx-glr-auto-examples-plot-fgw-py) and [fgw barycenters](https://pythonot.github.io/auto_examples/gromov/plot_barycenter_fgw.html) (exact [24] and regularized [12,51]).\n* [stochastic\n  solver](https://pythonot.github.io/auto_examples/others/plot_stochastic.html) and\n  [differentiable losses](https://pythonot.github.io/auto_examples/backends/plot_stoch_continuous_ot_pytorch.html) for\n  large-scale optimal transport (semi-dual problem [18] and dual problem [19])\n* [sampled solver of gromov wasserstein](https://pythonot.github.io/auto_examples/gromov/plot_gromov.html) for large-scale problem with any loss functions [33]\n* non regularized [free support wasserstein barycenters](https://pythonot.github.io/auto_examples/barycenters/plot_free_support_barycenter.html) [20].\n* [one dimensional unbalanced ot](https://pythonot.github.io/auto_examples/unbalanced-partial/plot_uot_1d.html) with kl relaxation and [barycenter](https://pythonot.github.io/auto_examples/unbalanced-partial/plot_uot_barycenter_1d.html) [10, 25]. also [exact unbalanced ot](https://pythonot.github.io/auto_examples/unbalanced-partial/plot_unbalanced_ot.html) with kl and quadratic regularization and the [regularization path of uot](https://pythonot.github.io/auto_examples/unbalanced-partial/plot_regpath.html) [41]\n* [partial wasserstein and gromov-wasserstein](https://pythonot.github.io/auto_examples/unbalanced-partial/plot_partial_wass_and_gromov.html) (exact [29] and entropic [3]\n  formulations).\n* [sliced wasserstein](https://pythonot.github.io/auto_examples/sliced-wasserstein/plot_variance.html) [31, 32] and max-sliced wasserstein [35] that can be used for gradient flows [36].\n* [wasserstein distance on the circle](https://pythonot.github.io/auto_examples/plot_compute_wasserstein_circle.html) [44, 45]\n* [spherical sliced wasserstein](https://pythonot.github.io/auto_examples/sliced-wasserstein/plot_variance_ssw.html) [46]\n* [graph dictionary learning solvers](https://pythonot.github.io/auto_examples/gromov/plot_gromov_wasserstein_dictionary_learning.html) [38].\n* [semi-relaxed (fused) gromov-wasserstein divergences](https://pythonot.github.io/auto_examples/gromov/plot_semirelaxed_fgw.html) (exact and regularized [48]).\n* [efficient discrete multi marginal optimal transport regularization](https://pythonot.github.io/auto_examples/others/plot_demd_gradient_minimize.html) [50].\n* [several backends](https://pythonot.github.io/quickstart.html#solving-ot-with-multiple-backends) for easy use of pot with  [pytorch](https://pytorch.org/)/[jax](https://github.com/google/jax)/[numpy](https://numpy.org/)/[cupy](https://cupy.dev/)/[tensorflow](https://www.tensorflow.org/) arrays.\n* smooth strongly convex nearest brenier potentials [58], with an extension to bounding potentials using [59].\n\npot provides the following machine learning related solvers:\n\n* [optimal transport for domain\n  adaptation](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_classes.html)\n  with [group lasso regularization](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_classes.html),   [laplacian regularization](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_laplacian.html) [5] [30] and [semi\n  supervised setting](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_semi_supervised.html).\n* [linear ot mapping](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_linear_mapping.html) [14] and [joint ot mapping estimation](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_mapping.html) [8].\n* [wasserstein discriminant analysis](https://pythonot.github.io/auto_examples/others/plot_wda.html) [11] (requires autograd + pymanopt).\n* [jcpot algorithm for multi-source domain adaptation with target shift](https://pythonot.github.io/auto_examples/domain-adaptation/plot_otda_jcpot.html) [27].\n* [graph neural network ot layers tfgw](https://pythonot.github.io/auto_examples/gromov/plot_gnn_tfgw.html) [52] and tw (ot-gnn) [53] \n\nsome other examples are available in the  [documentation](https://pythonot.github.io/auto_examples/index.html).\n\n#### using and citing the toolbox\n\nif you use this toolbox in your research and find it useful, please cite pot\nusing the following reference from our [jmlr paper](https://jmlr.org/papers/v22/20-451.html):\n\n    r\u00e9mi flamary, nicolas courty, alexandre gramfort, mokhtar z. alaya, aur\u00e9lie boisbunon, stanislas chambon, laetitia chapel, adrien corenflos, kilian fatras, nemo fournier, l\u00e9o gautheron, nathalie t.h. gayraud, hicham janati, alain rakotomamonjy, ievgen redko, antoine rolet, antony schutz, vivien seguy, danica j. sutherland, romain tavenard, alexander tong, titouan vayer,\n    pot python optimal transport library,\n    journal of machine learning research, 22(78):1\u22128, 2021.\n    website: https://pythonot.github.io/\n\nin bibtex format:\n\n```bibtex\n@article{flamary2021pot,\n  author  = {r{\\'e}mi flamary and nicolas courty and alexandre gramfort and mokhtar z. alaya and aur{\\'e}lie boisbunon and stanislas chambon and laetitia chapel and adrien corenflos and kilian fatras and nemo fournier and l{\\'e}o gautheron and nathalie t.h. gayraud and hicham janati and alain rakotomamonjy and ievgen redko and antoine rolet and antony schutz and vivien seguy and danica j. sutherland and romain tavenard and alexander tong and titouan vayer},\n  title   = {pot: python optimal transport},\n  journal = {journal of machine learning research},\n  year    = {2021},\n  volume  = {22},\n  number  = {78},\n  pages   = {1-8},\n  url     = {http://jmlr.org/papers/v22/20-451.html}\n}\n```\n\n## installation\n\nthe library has been tested on linux, macosx and windows. it requires a c++ compiler for building/installing the emd solver and relies on the following python modules:\n\n- numpy (>=1.16)\n- scipy (>=1.0)\n- cython (>=0.23) (build only, not necessary when installing from pip or conda)\n\n#### pip installation\n\n\nyou can install the toolbox through pypi with:\n\n```console\npip install pot\n```\n\nor get the very latest version by running:\n\n```console\npip install -u https://github.com/pythonot/pot/archive/master.zip # with --user for user install (no root)\n```\n\n#### anaconda installation with conda-forge\n\nif you use the anaconda python distribution, pot is available in [conda-forge](https://conda-forge.org). to install it and the required dependencies:\n\n```console\nconda install -c conda-forge pot\n```\n\n#### post installation check\nafter a correct installation, you should be able to import the module without errors:\n\n```python\nimport ot\n```\n\nnote that for easier access the module is named `ot` instead of `pot`.\n\n\n### dependencies\n\nsome sub-modules require additional dependencies which are discussed below\n\n* **ot.dr** (wasserstein dimensionality reduction) depends on autograd and pymanopt that can be installed with:\n\n```shell\npip install pymanopt autograd\n```\n\n\n## examples\n\n### short examples\n\n* import the toolbox\n\n```python\nimport ot\n```\n\n* compute wasserstein distances\n\n```python\n# a,b are 1d histograms (sum to 1 and positive)\n# m is the ground cost matrix\nwd = ot.emd2(a, b, m) # exact linear program\nwd_reg = ot.sinkhorn2(a, b, m, reg) # entropic regularized ot\n# if b is a matrix compute all distances to a and return a vector\n```\n\n* compute ot matrix\n\n```python\n# a,b are 1d histograms (sum to 1 and positive)\n# m is the ground cost matrix\nt = ot.emd(a, b, m) # exact linear program\nt_reg = ot.sinkhorn(a, b, m, reg) # entropic regularized ot\n```\n\n* compute wasserstein barycenter\n\n```python\n# a is a n*d matrix containing d  1d histograms\n# m is the ground cost matrix\nba = ot.barycenter(a, m, reg) # reg is regularization parameter\n```\n\n### examples and notebooks\n\nthe examples folder contain several examples and use case for the library. the full documentation with examples and output is available on [https://pythonot.github.io/](https://pythonot.github.io/).\n\n\n## acknowledgements\n\nthis toolbox has been created by\n\n* [r\u00e9mi flamary](https://remi.flamary.com/)\n* [nicolas courty](http://people.irisa.fr/nicolas.courty/)\n\nit is currently maintained by \n\n* [r\u00e9mi flamary](https://remi.flamary.com/)\n* [c\u00e9dric vincent-cuaz](https://cedricvincentcuaz.github.io/)\n\nthe numerous contributors to this library are listed [here](contributors.md).\n\npot has benefited from the financing or manpower from the following partners:\n\n<img src=\"https://pythonot.github.io/master/_static/images/logo_anr.jpg\" alt=\"anr\" style=\"height:60px;\"/><img src=\"https://pythonot.github.io/master/_static/images/logo_cnrs.jpg\" alt=\"cnrs\" style=\"height:60px;\"/><img src=\"https://pythonot.github.io/master/_static/images/logo_3ia.jpg\" alt=\"3ia\" style=\"height:60px;\"/><img src=\"https://pythonot.github.io/master/_static/images/logo_hiparis.png\" alt=\"hi!paris\" style=\"height:60px;\"/>\n\n\n\n## contributions and code of conduct\n\nevery contribution is welcome and should respect the [contribution guidelines](https://pythonot.github.io/master/contributing.html). each member of the project is expected to follow the [code of conduct](https://pythonot.github.io/master/code_of_conduct.html).\n\n## support\n\nyou can ask questions and join the development discussion:\n\n* on the pot [slack channel](https://pot-toolbox.slack.com)\n* on the pot [gitter channel](https://gitter.im/pythonot/community)\n* on the pot [mailing list](https://mail.python.org/mm3/mailman3/lists/pot.python.org/)\n\nyou can also post bug reports and feature requests in github issues. make sure to read our [guidelines](.github/contributing.md) first.\n\n## references\n\n[1] bonneel, n., van de panne, m., paris, s., & heidrich, w. (2011, december). [displacement interpolation using lagrangian mass transport](https://people.csail.mit.edu/sparis/publi/2011/sigasia/bonneel_11_displacement_interpolation.pdf). in acm transactions on graphics (tog) (vol. 30, no. 6, p. 158). acm.\n\n[2] cuturi, m. (2013). [sinkhorn distances: lightspeed computation of optimal transport](https://arxiv.org/pdf/1306.0895.pdf). in advances in neural information processing systems (pp. 2292-2300).\n\n[3] benamou, j. d., carlier, g., cuturi, m., nenna, l., & peyr\u00e9, g. (2015). [iterative bregman projections for regularized transportation problems](https://arxiv.org/pdf/1412.5154.pdf). siam journal on scientific computing, 37(2), a1111-a1138.\n\n[4] s. nakhostin, n. courty, r. flamary, d. tuia, t. corpetti, [supervised planetary unmixing with optimal transport](https://hal.archives-ouvertes.fr/hal-01377236/document), workshop on hyperspectral image and signal processing : evolution in remote sensing (whispers), 2016.\n\n[5] n. courty; r. flamary; d. tuia; a. rakotomamonjy, [optimal transport for domain adaptation](https://arxiv.org/pdf/1507.00504.pdf), in ieee transactions on pattern analysis and machine intelligence , vol.pp, no.99, pp.1-1\n\n[6] ferradans, s., papadakis, n., peyr\u00e9, g., & aujol, j. f. (2014). [regularized discrete optimal transport](https://arxiv.org/pdf/1307.5551.pdf). siam journal on imaging sciences, 7(3), 1853-1882.\n\n[7] rakotomamonjy, a., flamary, r., & courty, n. (2015). [generalized conditional gradient: analysis of convergence and applications](https://arxiv.org/pdf/1510.06567.pdf). arxiv preprint arxiv:1510.06567.\n\n[8] m. perrot, n. courty, r. flamary, a. habrard (2016), [mapping estimation for discrete optimal transport](http://remi.flamary.com/biblio/perrot2016mapping.pdf), neural information processing systems (nips).\n\n[9] schmitzer, b. (2016). [stabilized sparse scaling algorithms for entropy regularized transport problems](https://arxiv.org/pdf/1610.06519.pdf). arxiv preprint arxiv:1610.06519.\n\n[10] chizat, l., peyr\u00e9, g., schmitzer, b., & vialard, f. x. (2016). [scaling algorithms for unbalanced transport problems](https://arxiv.org/pdf/1607.05816.pdf). arxiv preprint arxiv:1607.05816.\n\n[11] flamary, r., cuturi, m., courty, n., & rakotomamonjy, a. (2016). [wasserstein discriminant analysis](https://arxiv.org/pdf/1608.08063.pdf). arxiv preprint arxiv:1608.08063.\n\n[12] gabriel peyr\u00e9, marco cuturi, and justin solomon (2016), [gromov-wasserstein averaging of kernel and distance matrices](http://proceedings.mlr.press/v48/peyre16.html)  international conference on machine learning (icml).\n\n[13] m\u00e9moli, facundo (2011). [gromov\u2013wasserstein distances and the metric approach to object matching](https://media.adelaide.edu.au/acvt/publications/2011/2011-gromov%e2%80%93wasserstein%20distances%20and%20the%20metric%20approach%20to%20object%20matching.pdf). foundations of computational mathematics 11.4 : 417-487.\n\n[14] knott, m. and smith, c. s. (1984).[on the optimal mapping of distributions](https://link.springer.com/article/10.1007/bf00934745), journal of optimization theory and applications vol 43.\n\n[15] peyr\u00e9, g., & cuturi, m. (2018). [computational optimal transport](https://arxiv.org/pdf/1803.00567.pdf) .\n\n[16] agueh, m., & carlier, g. (2011). [barycenters in the wasserstein space](https://hal.archives-ouvertes.fr/hal-00637399/document). siam journal on mathematical analysis, 43(2), 904-924.\n\n[17] blondel, m., seguy, v., & rolet, a. (2018). [smooth and sparse optimal transport](https://arxiv.org/abs/1710.06276). proceedings of the twenty-first international conference on artificial intelligence and statistics (aistats).\n\n[18] genevay, a., cuturi, m., peyr\u00e9, g. & bach, f. (2016) [stochastic optimization for large-scale optimal transport](https://arxiv.org/abs/1605.08527). advances in neural information processing systems (2016).\n\n[19] seguy, v., bhushan damodaran, b., flamary, r., courty, n., rolet, a.& blondel, m. [large-scale optimal transport and mapping estimation](https://arxiv.org/pdf/1711.02283.pdf). international conference on learning representation (2018)\n\n[20] cuturi, m. and doucet, a. (2014) [fast computation of wasserstein barycenters](http://proceedings.mlr.press/v32/cuturi14.html). international conference in machine learning\n\n[21] solomon, j., de goes, f., peyr\u00e9, g., cuturi, m., butscher, a., nguyen, a. & guibas, l. (2015). [convolutional wasserstein distances: efficient optimal transportation on geometric domains](https://dl.acm.org/citation.cfm?id=2766963). acm transactions on graphics (tog), 34(4), 66.\n\n[22] j. altschuler, j.weed, p. rigollet, (2017) [near-linear time approximation algorithms for optimal transport via sinkhorn iteration](https://papers.nips.cc/paper/6792-near-linear-time-approximation-algorithms-for-optimal-transport-via-sinkhorn-iteration.pdf), advances in neural information processing systems (nips) 31\n\n[23] aude, g., peyr\u00e9, g., cuturi, m., [learning generative models with sinkhorn divergences](https://arxiv.org/abs/1706.00292), proceedings of the twenty-first international conference on artificial intelligence and statistics, (aistats) 21, 2018\n\n[24] vayer, t., chapel, l., flamary, r., tavenard, r. and courty, n. (2019). [optimal transport for structured data with application on graphs](http://proceedings.mlr.press/v97/titouan19a.html) proceedings of the 36th international conference on machine learning (icml).\n\n[25] frogner c., zhang c., mobahi h., araya-polo m., poggio t. (2015). [learning with a wasserstein loss](http://cbcl.mit.edu/wasserstein/)  advances in neural information processing systems (nips).\n\n[26] alaya m. z., b\u00e9rar m., gasso g., rakotomamonjy a. (2019). [screening sinkhorn algorithm for regularized optimal transport](https://papers.nips.cc/paper/9386-screening-sinkhorn-algorithm-for-regularized-optimal-transport), advances in neural information processing systems 33 (neurips).\n\n[27] redko i., courty n., flamary r., tuia d. (2019). [optimal transport for multi-source domain adaptation under target shift](http://proceedings.mlr.press/v89/redko19a.html), proceedings of the twenty-second international conference on artificial intelligence and statistics (aistats) 22, 2019.\n\n[28] caffarelli, l. a., mccann, r. j. (2010). [free boundaries in optimal transport and monge-ampere obstacle problems](http://www.math.toronto.edu/~mccann/papers/annals2010.pdf), annals of mathematics, 673-730.\n\n[29] chapel, l., alaya, m., gasso, g. (2020). [partial optimal transport with applications on positive-unlabeled learning](https://arxiv.org/abs/2002.08276), advances in neural information processing systems (neurips), 2020.\n\n[30] flamary r., courty n., tuia d., rakotomamonjy a. (2014). [optimal transport with laplacian regularization: applications to domain adaptation and shape matching](https://remi.flamary.com/biblio/flamary2014optlaplace.pdf), nips workshop on optimal transport and machine learning otml, 2014.\n\n[31] bonneel, nicolas, et al. [sliced and radon wasserstein barycenters of measures](https://perso.liris.cnrs.fr/nicolas.bonneel/wassersteinsliced-jmiv.pdf), journal of mathematical imaging and vision 51.1 (2015): 22-45\n\n[32] huang, m., ma s., lai, l. (2021). [a riemannian block coordinate descent method for computing the projection robust wasserstein distance](http://proceedings.mlr.press/v139/huang21e.html), proceedings of the 38th international conference on machine learning (icml).\n\n[33] kerdoncuff t., emonet r., marc s. [sampled gromov wasserstein](https://hal.archives-ouvertes.fr/hal-03232509/document), machine learning journal (mjl), 2021\n\n[34] feydy, j., s\u00e9journ\u00e9, t., vialard, f. x., amari, s. i., trouv\u00e9, a., & peyr\u00e9, g. (2019, april). [interpolating between optimal transport and mmd using sinkhorn divergences](http://proceedings.mlr.press/v89/feydy19a/feydy19a.pdf). in the 22nd international conference on artificial intelligence and statistics (pp. 2681-2690). pmlr.\n\n[35] deshpande, i., hu, y. t., sun, r., pyrros, a., siddiqui, n., koyejo, s., ... & schwing, a. g. (2019). [max-sliced wasserstein distance and its use for gans](https://openaccess.thecvf.com/content_cvpr_2019/papers/deshpande_max-sliced_wasserstein_distance_and_its_use_for_gans_cvpr_2019_paper.pdf). in proceedings of the ieee/cvf conference on computer vision and pattern recognition (pp. 10648-10656).\n\n[36] liutkus, a., simsekli, u., majewski, s., durmus, a., & st\u00f6ter, f. r.\n(2019, may). [sliced-wasserstein flows: nonparametric generative modeling\nvia optimal transport and diffusions](http://proceedings.mlr.press/v97/liutkus19a/liutkus19a.pdf). in international conference on\nmachine learning (pp. 4104-4113). pmlr.\n\n[37] janati, h., cuturi, m., gramfort, a. [debiased sinkhorn barycenters](http://proceedings.mlr.press/v119/janati20a/janati20a.pdf) proceedings of the 37th international\nconference on machine learning, pmlr 119:4692-4701, 2020\n\n[38] c. vincent-cuaz, t. vayer, r. flamary, m. corneli, n. courty, [online graph\ndictionary learning](https://arxiv.org/pdf/2102.06555.pdf), international conference on machine learning (icml), 2021.\n\n[39] gozlan, n., roberto, c., samson, p. m., & tetali, p. (2017). [kantorovich duality for general transport costs and applications](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.712.1825&rep=rep1&type=pdf). journal of functional analysis, 273(11), 3327-3405.\n\n[40] forrow, a., h\u00fctter, j. c., nitzan, m., rigollet, p., schiebinger, g., & weed, j. (2019, april). [statistical optimal transport via factored couplings](http://proceedings.mlr.press/v89/forrow19a/forrow19a.pdf). in the 22nd international conference on artificial intelligence and statistics (pp. 2454-2465). pmlr.\n\n[41] chapel*, l., flamary*, r., wu, h., f\u00e9votte, c., gasso, g. (2021). [unbalanced optimal transport through non-negative penalized linear regression](https://proceedings.neurips.cc/paper/2021/file/c3c617a9b80b3ae1ebd868b0017cc349-paper.pdf) advances in neural information processing systems (neurips), 2020. (two first co-authors)\n\n[42] delon, j., gozlan, n., and saint-dizier, a. [generalized wasserstein barycenters between probability measures living on different subspaces](https://arxiv.org/pdf/2105.09755). arxiv preprint arxiv:2105.09755, 2021.\n\n[43]  \u00e1lvarez-esteban, pedro c., et al. [a fixed-point approach to barycenters in wasserstein space.](https://arxiv.org/pdf/1511.05355.pdf) journal of mathematical analysis and applications 441.2 (2016): 744-762.\n\n[44] delon, julie, julien salomon, and andrei sobolevski. [fast transport optimization for monge costs on the circle.](https://arxiv.org/abs/0902.3527) siam journal on applied mathematics 70.7 (2010): 2239-2258.\n\n[45] hundrieser, shayan, marcel klatt, and axel munk. [the statistics of circular optimal transport.](https://arxiv.org/abs/2103.15426) directional statistics for innovative applications: a bicentennial tribute to florence nightingale. singapore: springer nature singapore, 2022. 57-82.\n\n[46] bonet, c., berg, p., courty, n., septier, f., drumetz, l., & pham, m. t. (2023). [spherical sliced-wasserstein](https://openreview.net/forum?id=jxq0ipgmdu). international conference on learning representations.\n\n[47] chowdhury, s., & m\u00e9moli, f. (2019). [the gromov\u2013wasserstein distance between networks and stable network invariants](https://academic.oup.com/imaiai/article/8/4/757/5627736). information and inference: a journal of the ima, 8(4), 757-787.\n\n[48] c\u00e9dric vincent-cuaz, r\u00e9mi flamary, marco corneli, titouan vayer, nicolas courty (2022). [semi-relaxed gromov-wasserstein divergence and applications on graphs](https://openreview.net/pdf?id=rshamexjc-x). international conference on learning representations (iclr), 2022.\n\n[49] redko, i., vayer, t., flamary, r., and courty, n. (2020). [co-optimal transport](https://proceedings.neurips.cc/paper/2020/file/cc384c68ad503482fb24e6d1e3b512ae-paper.pdf). advances in neural information processing systems, 33.\n\n[50] liu, t., puigcerver, j., & blondel, m. (2023). [sparsity-constrained optimal transport](https://openreview.net/forum?id=yhy9nbqj5bp). proceedings of the eleventh international conference on learning representations (iclr).\n\n[51] xu, h., luo, d., zha, h., & duke, l. c. (2019). [gromov-wasserstein learning for graph matching and node embedding](http://proceedings.mlr.press/v97/xu19b.html). in international conference on machine learning (icml), 2019.\n\n[52] collas, a., vayer, t., flamary, f., & breloy, a. (2023). [entropic wasserstein component analysis](https://arxiv.org/abs/2303.05119). arxiv.\n\n[53] c. vincent-cuaz, r. flamary, m. corneli, t. vayer, n. courty (2022). [template based graph neural network with optimal transport distances](https://papers.nips.cc/paper_files/paper/2022/file/4d3525bc60ba1adc72336c0392d3d902-paper-conference.pdf). advances in neural information processing systems, 35.\n\n[54] b\u00e9cigneul, g., ganea, o. e., chen, b., barzilay, r., & jaakkola, t. s. (2020). [optimal transport graph neural networks](https://arxiv.org/pdf/2006.04804).\n\n[55] ronak mehta, jeffery kline, vishnu suresh lokhande, glenn fung, & vikas singh (2023). [efficient discrete multi marginal optimal transport regularization](https://openreview.net/forum?id=r98zfmt-je). in the eleventh international conference on learning representations (iclr).\n\n[56] jeffery kline. [properties of the d-dimensional earth mover\u2019s problem](https://www.sciencedirect.com/science/article/pii/s0166218x19301441). discrete applied mathematics, 265: 128\u2013141, 2019.\n\n[57] delon, j., desolneux, a., & salmona, a. (2022). [gromov\u2013wasserstein\ndistances between gaussian distributions](https://hal.science/hal-03197398v2/file/main.pdf). journal of applied probability, 59(4),\n1178-1198.\n\n[58] paty f-p., d\u2019aspremont 1., & cuturi m. (2020). [regularity as regularization:smooth and strongly convex brenier potentials in optimal transport.](http://proceedings.mlr.press/v108/paty20a/paty20a.pdf) in international conference on artificial intelligence and statistics, pages 1222\u20131232. pmlr, 2020.\n\n[59] taylor a. b. (2017). [convex interpolation and performance estimation of first-order methods for convex optimization.](https://dial.uclouvain.be/pr/boreal/object/boreal%3a182881/datastream/pdf_01/view) phd thesis, catholic university of louvain, louvain-la-neuve, belgium, 2017.\n\n[60] feydy, j., roussillon, p., trouv\u00e9, a., & gori, p. (2019). [fast and scalable optimal transport for brain tractograms](https://arxiv.org/pdf/2107.02010.pdf). in medical image computing and computer assisted intervention\u2013miccai 2019: 22nd international conference, shenzhen, china, october 13\u201317, 2019, proceedings, part iii 22 (pp. 636-644). springer international publishing.\n\n[61] charlier, b., feydy, j., glaunes, j. a., collin, f. d., & durif, g. (2021). [kernel operations on the gpu, with autodiff, without memory overflows](https://www.jmlr.org/papers/volume22/20-275/20-275.pdf). the journal of machine learning research, 22(1), 3457-3462.\n\n[62] h. van assel, c. vincent-cuaz, t. vayer, r. flamary, n. courty (2023). [interpolating between clustering and dimensionality reduction with gromov-wasserstein](https://arxiv.org/pdf/2310.03398.pdf). neurips 2023 workshop optimal transport and machine learning.\n\n[63] li, j., tang, j., kong, l., liu, h., li, j., so, a. m. c., & blanchet, j. (2022). [a convergent single-loop algorithm for relaxation of gromov-wasserstein in graph data](https://openreview.net/pdf?id=0jxpyvwmiif). in the eleventh international conference on learning representations.\n\n[64] ma, x., chu, x., wang, y., lin, y., zhao, j., ma, l., & zhu, w. (2023). [fused gromov-wasserstein graph mixup for graph-level classifications](https://openreview.net/pdf?id=uqkugunu40). in thirty-seventh conference on neural information processing systems.\n\n[65] scetbon, m., cuturi, m., & peyr\u00e9, g. (2021). [low-rank sinkhorn factorization](https://arxiv.org/pdf/2103.04737.pdf).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pot",
  "package_url": "https://pypi.org/project/POT/",
  "project_url": "https://pypi.org/project/POT/",
  "project_urls": {
    "Download": "https://github.com/PythonOT/POT/archive/0.9.2.tar.gz",
    "Homepage": "https://github.com/PythonOT/POT"
  },
  "release_url": "https://pypi.org/project/POT/0.9.2/",
  "requires_dist": [
    "numpy >=1.16",
    "scipy >=1.6"
  ],
  "requires_python": ">=3.6",
  "summary": "python optimal transport library",
  "version": "0.9.2",
  "releases": [],
  "developers": [
    "ncourty@gmail.com",
    "remi.flamary@gmail.com",
    "remi_flamary"
  ],
  "kwds": "badges pip badge workflows pythonot",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pot",
  "homepage": "https://github.com/pythonot/pot",
  "release_count": 26,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "# outdated\n\n[![build status](https://travis-ci.org/alexmojaki/outdated.svg?branch=master)](https://travis-ci.org/alexmojaki/outdated) [![coverage status](https://coveralls.io/repos/github/alexmojaki/outdated/badge.svg?branch=master&uncache)](https://coveralls.io/github/alexmojaki/outdated?branch=master) [![supports python versions 2.7 and 3.5+](https://img.shields.io/pypi/pyversions/outdated.svg)](https://pypi.python.org/pypi/outdated)\n\nthis is a mini-library which, given a package name and a version, checks if it's the latest version available on pypi.\n\nto install:\n\n    pip install outdated\n\n## quickstart:\n\n    from outdated import warn_if_outdated\n\n    warn_if_outdated('my-package-name', '1.2.3')\n\nthis will:\n\n- show a warning if the given version is not the latest. the warning includes the package name, the given version, and the latest version.\n- perform the check in a background thread (so it doesn't delay anything)\n- make at most one http call (unless there is an http error, in which case it will try 3 times) to the pypi server for that specific package\n- cache the result of the http call on disk for 24 hours\n- show a warning if any exception occurs during the check\n\nthis will *not* check what version is currently installed, it will only use the given version. library authors must make sure that the version in their `setup.py` matches the version here.\n\nthe package name argument must be exactly the name used on pypi, so that e.g. https://pypi.python.org/pypi/my-package-name is a valid url.\n\noptional arguments:\n\n- `background` (default `true`): run the check in a separate thread. set to `false` to run immediately.\n- `raise_exceptions` (default: `false`): if `true`, allow exceptions to bubble to the top. otherwise, show a warning including the exception message. if `background` is `true` and this is `true` then this will result in a full traceback showing but the process continuing.\n\n## lower level api\n\n    from outdated import check_outdated\n\n    is_outdated, latest_version = check_outdated('my-package-name', '1.2.3')\n    \n`is_outdated` is a boolean which is true if the given version is earlier than the latest version, which is the string `latest_version`.\n\noptional arguments:\n\n- `repository_url` (default `https://pypi.python.org/pypi/%s/json`): a `%` style format string to use a different repository pypi repository url, e.g. test.pypi.org or a private repository. the string is formatted with the package name.\n\nthis still makes the http call with retries and caches the result on disk. it doesn't use a separate thread or emit any warnings (unless there is an exception specifically while using the cache, in which case the check will be done without the cache).\n\n## additional configuration\n\nto disable all warnings from this library, set the environment variable `outdated_ignore` to any non-empty value.\n\nto always raise exceptions instead of converting them to warnings (both in general in `warn_if_outdated` and more specifically when there's a caching problem) set the environment variable `outdated_raise_exception=1`.\n\nthe warnings are also categorised so that you can easily control them with standard [warning filters](https://docs.python.org/3/library/warnings.html#the-warnings-filter). the classes are [here](https://github.com/alexmojaki/outdated/blob/master/outdated/mywarnings.py) and can be imported directly from the `outdated` module.\n\n## performance\n\nthis library works by fetching a url such as [this](https://pypi.python.org/pypi/requests/json) - the time it takes to visit that link is essentially the speed of the library. this is much faster than the command `pip list --outdated` or any equivalent code.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "outdated",
  "package_url": "https://pypi.org/project/outdated/",
  "project_url": "https://pypi.org/project/outdated/",
  "project_urls": {
    "Homepage": "http://github.com/alexmojaki/outdated"
  },
  "release_url": "https://pypi.org/project/outdated/0.2.2/",
  "requires_dist": [
    "setuptools (>=44)",
    "littleutils",
    "requests"
  ],
  "requires_python": "",
  "summary": "check if a version of a pypi package is outdated",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "alex.mojaki@gmail.com",
    "alex_hall"
  ],
  "kwds": "pyversions latest_version check_outdated warn_if_outdated is_outdated",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_outdated",
  "homepage": "http://github.com/alexmojaki/outdated",
  "release_count": 6,
  "dependency_ids": [
    "pypi_littleutils",
    "pypi_requests",
    "pypi_setuptools"
  ]
}
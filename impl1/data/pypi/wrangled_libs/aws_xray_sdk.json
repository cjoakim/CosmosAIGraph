{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "![build status](https://github.com/aws/aws-xray-sdk-python/actions/workflows/integrationtesting.yaml/badge.svg)\n[![codecov](https://codecov.io/gh/aws/aws-xray-sdk-python/branch/master/graph/badge.svg)](https://codecov.io/gh/aws/aws-xray-sdk-python)\n\n### :mega: opentelemetry python with aws x-ray\n\naws x-ray supports using opentelemetry python and the aws distro for opentelemetry (adot) collector to instrument your application and send trace data to x-ray. the opentelemetry sdks are an industry-wide standard for tracing instrumentation. they provide more instrumentations and have a larger community for support, but may not have complete feature parity with the x-ray sdks. see [choosing between the adot and x-ray sdks](https://docs.aws.amazon.com/xray/latest/devguide/xray-instrumenting-your-app.html#xray-instrumenting-choosing) for more help with choosing between the two.\n\nif you want additional features when tracing your python applications, please [open an issue on the opentelemetry python instrumentation repository](https://github.com/open-telemetry/opentelemetry-python-contrib/issues/new?labels=feature-request&template=feature_request.md&title=x-ray%20compatible%20feature%20request).\n\n### :mega: python versions end-of-support notice\n\naws x-ray sdk for python versions `>2.11.0` has dropped support for python 2.7, 3.4, 3.5, and 3.6.\n\n# aws x-ray sdk for python\n\n![screenshot of the aws x-ray console](/images/example_servicemap.png?raw=true)\n\n## installing\n\nthe aws x-ray sdk for python is compatible with python 3.7, 3.8, 3.9, 3.10, and 3.11.\n\ninstall the sdk using the following command (the sdk's non-testing dependencies will be installed).\n\n```\npip install aws-xray-sdk\n```\n\nto install the sdk's testing dependencies, use the following command.\n\n```\npip install tox\n```\n\n## getting help\n\nuse the following community resources for getting help with the sdk. we use the github\nissues for tracking bugs and feature requests.\n\n* ask a question in the [aws x-ray forum](https://forums.aws.amazon.com/forum.jspa?forumid=241&start=0).\n* open a support ticket with [aws support](http://docs.aws.amazon.com/awssupport/latest/user/getting-started.html).\n* if you think you may have found a bug, open an [issue](https://github.com/aws/aws-xray-sdk-python/issues/new).\n\n## opening issues\n\nif you encounter a bug with the aws x-ray sdk for python, we want to hear about\nit. before opening a new issue, search the [existing issues](https://github.com/aws/aws-xray-sdk-python/issues)\nto see if others are also experiencing the issue. include the version of the aws x-ray\nsdk for python, python language, and botocore/boto3 if applicable. in addition, \ninclude the repro case when appropriate.\n\nthe github issues are intended for bug reports and feature requests. for help and\nquestions about using the aws sdk for python, use the resources listed\nin the [getting help](https://github.com/aws/aws-xray-sdk-python#getting-help) section. keeping the list of open issues lean helps us respond in a timely manner.\n\n## documentation\n\nthe [developer guide](https://docs.aws.amazon.com/xray/latest/devguide) provides in-depth\nguidance about using the aws x-ray service.\nthe [api reference](http://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/)\nprovides guidance for using the sdk and module-level documentation.\n\n## quick start\n\n### configuration\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nxray_recorder.configure(\n    sampling=false,\n    context_missing='log_error',\n    plugins=('ec2plugin', 'ecsplugin', 'elasticbeanstalkplugin'),\n    daemon_address='127.0.0.1:3000',\n    dynamic_naming='*mysite.com*'\n)\n```\n\n### start a custom segment/subsegment\n\nusing context managers for implicit exceptions recording:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nwith xray_recorder.in_segment('segment_name') as segment:\n    # add metadata or annotation here if necessary\n    segment.put_metadata('key', dict, 'namespace')\n    with xray_recorder.in_subsegment('subsegment_name') as subsegment:\n        subsegment.put_annotation('key', 'value')\n        # do something here\n    with xray_recorder.in_subsegment('subsegment2') as subsegment:\n        subsegment.put_annotation('key2', 'value2')\n        # do something else \n```\n\nasync versions of context managers:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nasync with xray_recorder.in_segment_async('segment_name') as segment:\n    # add metadata or annotation here if necessary\n    segment.put_metadata('key', dict, 'namespace')\n    async with xray_recorder.in_subsegment_async('subsegment_name') as subsegment:\n        subsegment.put_annotation('key', 'value')\n        # do something here\n    async with xray_recorder.in_subsegment_async('subsegment2') as subsegment:\n        subsegment.put_annotation('key2', 'value2')\n        # do something else \n```\n\ndefault begin/end functions:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\n# start a segment\nsegment = xray_recorder.begin_segment('segment_name')\n# start a subsegment\nsubsegment = xray_recorder.begin_subsegment('subsegment_name')\n\n# add metadata or annotation here if necessary\nsegment.put_metadata('key', dict, 'namespace')\nsubsegment.put_annotation('key', 'value')\nxray_recorder.end_subsegment()\n\n# close the segment\nxray_recorder.end_segment()\n```\n\n### oversampling mitigation\nto modify the sampling decision at the subsegment level, subsegments that inherit the decision of their direct parent (segment or subsegment) can be created using `xray_recorder.begin_subsegment()` and unsampled subsegments can be created using\n`xray_recorder.begin_subsegment_without_sampling()`.\n\nthe code snippet below demonstrates creating a sampled or unsampled subsegment based on the sampling decision of each sqs message processed by lambda.\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.core.models.subsegment import subsegment\nfrom aws_xray_sdk.core.utils.sqs_message_helper import sqsmessagehelper\n\ndef lambda_handler(event, context):\n\n    for message in event['records']:\n        if sqsmessagehelper.issampled(message):\n            subsegment = xray_recorder.begin_subsegment('sampled_subsegment')\n            print('sampled - processing sqs message')\n\n        else:\n            subsegment = xray_recorder.begin_subsegment_without_sampling('unsampled_subsegment')\n            print('unsampled - processing sqs message')\n    \n    xray_recorder.end_subsegment()   \n```\n\nthe code snippet below demonstrates wrapping a downstream aws sdk request with an unsampled subsegment.\n```python\nfrom aws_xray_sdk.core import xray_recorder, patch_all\nimport boto3\n\npatch_all()\n\ndef lambda_handler(event, context):\n    subsegment = xray_recorder.begin_subsegment_without_sampling('unsampled_subsegment')\n    client = boto3.client('sqs')\n    print(client.list_queues())\n    \n    xray_recorder.end_subsegment()\n```\n\n### capture\n\nas a decorator:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\n@xray_recorder.capture('subsegment_name')\ndef myfunc():\n    # do something here\n\nmyfunc()\n```\n\nor as a context manager:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nwith xray_recorder.capture('subsegment_name') as subsegment:\n    # do something here\n    subsegment.put_annotation('mykey', val)\n    # do something more\n```\n\nasync capture as decorator:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\n@xray_recorder.capture_async('subsegment_name')\nasync def myfunc():\n    # do something here\n\nasync def main():\n    await myfunc()\n```\n\nor as context manager:\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nasync with xray_recorder.capture_async('subsegment_name') as subsegment:\n    # do something here\n    subsegment.put_annotation('mykey', val)\n    # do something more\n```\n\n### adding annotations/metadata using recorder\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\n# start a segment if no segment exist\nsegment1 = xray_recorder.begin_segment('segment_name')\n\n# this will add the key value pair to segment1 as it is active\nxray_recorder.put_annotation('key', 'value')\n\n# start a subsegment so it becomes the active trace entity\nsubsegment1 = xray_recorder.begin_subsegment('subsegment_name')\n\n# this will add the key value pair to subsegment1 as it is active\nxray_recorder.put_metadata('key', 'value')\n\nif xray_recorder.is_sampled():\n    # some expensitve annotations/metadata generation code here\n    val = compute_annotation_val()\n    metadata = compute_metadata_body()\n    xray_recorder.put_annotation('mykey', val)\n    xray_recorder.put_metadata('mykey', metadata)\n```\n\n### generate noop trace and entity id\nx-ray python sdk will by default generate no-op trace and entity id for unsampled requests and secure random trace and entity id for sampled requests. if customer wants to enable generating secure random trace and entity id for all the (sampled/unsampled) requests (this is applicable for trace id injection into logs use case) then they should set the `aws_xray_noop_id` environment variable as false.\n\n### disabling x-ray\noften times, it may be useful to be able to disable x-ray for specific use cases, whether to stop x-ray from sending traces at any moment, or to test code functionality that originally depended on x-ray instrumented packages to begin segments prior to the code call. for example, if your application relied on an xraymiddleware to instrument incoming web requests, and you have a method which begins subsegments based on the segment generated by that middleware, it would be useful to be able to disable x-ray for your unit tests so that `segmentnotfound` exceptions are not thrown when you need to test your method.\n\nthere are two ways to disable x-ray, one is through environment variables, and the other is through the sdkconfig module.\n\n**disabling through the environment variable:**\n\nprior to running your application, make sure to have the environment variable `aws_xray_sdk_enabled` set to `false`. \n\n**disabling through the sdkconfig module:**\n```\nfrom aws_xray_sdk import global_sdk_config\n\nglobal_sdk_config.set_sdk_enabled(false)\n```\n\n**important notes:**\n* environment variables always take precedence over the sdkconfig module when disabling/enabling. if your environment variable is set to `false` while your code calls `global_sdk_config.set_sdk_enabled(true)`, x-ray will still be disabled.\n\n* if you need to re-enable x-ray again during runtime and acknowledge disabling/enabling through the sdkconfig module, you may run the following in your application:\n```\nimport os\nfrom aws_xray_sdk import global_sdk_config\n\ndel os.environ['aws_xray_sdk_enabled']\nglobal_sdk_config.set_sdk_enabled(true)\n```\n\n### trace aws lambda functions\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\ndef lambda_handler(event, context):\n    # ... some code\n\n    subsegment = xray_recorder.begin_subsegment('subsegment_name')\n    # code to record\n    # add metadata or annotation here, if necessary\n    subsegment.put_metadata('key', dict, 'namespace')\n    subsegment.put_annotation('key', 'value')\n\n    xray_recorder.end_subsegment()\n\n    # ... some other code\n```\n\n### trace threadpoolexecutor\n\n```python\nimport concurrent.futures\n\nimport requests\n\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.core import patch\n\npatch(('requests',))\n\nurls = ['http://www.amazon.com/',\n        'http://aws.amazon.com/',\n        'http://example.com/',\n        'http://www.bilibili.com/',\n        'http://invalid-domain.com/']\n\ndef load_url(url, trace_entity):\n    # set the parent x-ray entity for the worker thread.\n    xray_recorder.set_trace_entity(trace_entity)\n    # subsegment captured from the following http get will be\n    # a child of parent entity passed from the main thread.\n    resp = requests.get(url)\n    # prevent thread pollution\n    xray_recorder.clear_trace_entities()\n    return resp\n\n# get the current active segment or subsegment from the main thread.\ncurrent_entity = xray_recorder.get_trace_entity()\nwith concurrent.futures.threadpoolexecutor(max_workers=5) as executor:\n    # pass the active entity from main thread to worker threads.\n    future_to_url = {executor.submit(load_url, url, current_entity): url for url in urls}\n    for future in concurrent.futures.as_completed(future_to_url):\n        url = future_to_url[future]\n        try:\n            data = future.result()\n        except exception:\n            pass\n```\n\n### trace sql queries\nby default, if no other value is provided to `.configure()`, sql trace streaming is enabled\nfor all the supported db engines. those currently are:\n- any engine attached to the django orm.\n- any engine attached to sqlalchemy.\n\nthe behaviour can be toggled by sending the appropriate `stream_sql` value, for example:\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nxray_recorder.configure(service='fallback_name', stream_sql=true)\n```\n\n### patch third-party libraries\n\n```python\nfrom aws_xray_sdk.core import patch\n\nlibs_to_patch = ('boto3', 'mysql', 'requests')\npatch(libs_to_patch)\n```\n\n#### automatic module patching\n\nfull modules in the local codebase can be recursively patched by providing the module references\nto the patch function.\n```python\nfrom aws_xray_sdk.core import patch\n\nlibs_to_patch = ('boto3', 'requests', 'local.module.ref', 'other_module')\npatch(libs_to_patch)\n```\nan `xray_recorder.capture()` decorator will be applied to all functions and class methods in the\ngiven module and all the modules inside them recursively. some files/modules can be excluded by\nproviding to the `patch` function a regex that matches them.\n```python\nfrom aws_xray_sdk.core import patch\n\nlibs_to_patch = ('boto3', 'requests', 'local.module.ref', 'other_module')\nignore = ('local.module.ref.some_file', 'other_module.some_module\\.*')\npatch(libs_to_patch, ignore_module_patterns=ignore)\n```\n\n### django\n#### add django middleware\n\nin django settings.py, use the following.\n\n```python\ninstalled_apps = [\n    # ... other apps\n    'aws_xray_sdk.ext.django',\n]\n\nmiddleware = [\n    'aws_xray_sdk.ext.django.middleware.xraymiddleware',\n    # ... other middlewares\n]\n```\n\nyou can configure the x-ray recorder in a django app under the \u2018xray_recorder\u2019 namespace. for a minimal configuration, the 'aws_xray_tracing_name' is required unless it is specified in an environment variable.\n```\nxray_recorder = {\n    'aws_xray_tracing_name': 'my application', # required - the segment name for segments generated from incoming requests\n}\n```\nfor more information about configuring django with x-ray read more about it in the [api reference](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)\n\n#### sql tracing\nif django's orm is patched - either using the `auto_instrument = true` in your settings file\nor explicitly calling `patch_db()` - the sql query trace streaming can then be enabled or \ndisabled updating the `stream_sql` variable in your settings file. it is enabled by default.\n\n#### automatic patching\nthe automatic module patching can also be configured through django settings.\n```python\nxray_recorder = {\n    'patch_modules': [\n        'boto3',\n        'requests',\n        'local.module.ref',\n        'other_module',\n    ],\n    'ignore_module_patterns': [\n        'local.module.ref.some_file',\n        'other_module.some_module\\.*',\n    ],\n    ...\n}\n```\nif `auto_patch_parent_segment_name` is also specified, then a segment parent will be created \nwith the supplied name, wrapping the automatic patching so that it captures any dangling\nsubsegments created on the import patching.\n\n### django in lambda\nx-ray can't search on http annotations in subsegments.   to enable searching the middleware adds the http values as annotations\nthis allows searching in the x-ray console like so\n\nthis is configurable in settings with `urls_as_annotation` that has 3 valid values\n`lambda` - the default, which uses urls as annotations by default if running in a lambda context\n`all` - do this for every request (useful if running in a mixed lambda/other deployment)\n`none` - don't do this for any (avoiding hitting the 50 annotation limit)\n\n```\nannotation.url beginswith \"https://your.url.com/here\"\n```\n\n### add flask middleware\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.ext.flask.middleware import xraymiddleware\n\napp = flask(__name__)\n\nxray_recorder.configure(service='fallback_name', dynamic_naming='*mysite.com*')\nxraymiddleware(app, xray_recorder)\n```\n\n### add bottle middleware(plugin)\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.ext.bottle.middleware import xraymiddleware\n\napp = bottle()\n\nxray_recorder.configure(service='fallback_name', dynamic_naming='*mysite.com*')\napp.install(xraymiddleware(xray_recorder))\n```\n\n### serverless support for flask & django & bottle using x-ray\nserverless is an application model that enables you to shift more of your operational responsibilities to aws. as a result, you can focus only on your applications and services, instead of the infrastructure management tasks such as server provisioning, patching, operating system maintenance, and capacity provisioning. with serverless, you can deploy your web application to [aws lambda](https://aws.amazon.com/lambda/) and have customers interact with it through a lambda-invoking endpoint, such as [amazon api gateway](https://aws.amazon.com/api-gateway/). \n\nx-ray supports the serverless model out of the box and requires no extra configuration. the middlewares in lambda generate `subsegments` instead of `segments` when an endpoint is reached. this is because `segments` cannot be generated inside the lambda function, but it is generated automatically by the lambda container. therefore, when using the middlewares with this model, it is important to make sure that your methods only generate `subsegments`.\n\nthe following guide shows an example of setting up a serverless application that utilizes api gateway and lambda:\n\n[instrumenting web frameworks in a serverless environment](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python-serverless.html)\n\n### working with aiohttp\n\nadding aiohttp middleware. support aiohttp >= 2.3.\n\n```python\nfrom aiohttp import web\n\nfrom aws_xray_sdk.ext.aiohttp.middleware import middleware\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.core.async_context import asynccontext\n\nxray_recorder.configure(service='fallback_name', context=asynccontext())\n\napp = web.application(middlewares=[middleware])\napp.router.add_get(\"/\", handler)\n\nweb.run_app(app)\n```\n\ntracing aiohttp client. support aiohttp >=3.\n\n```python\nfrom aws_xray_sdk.ext.aiohttp.client import aws_xray_trace_config\n\nasync def foo():\n    trace_config = aws_xray_trace_config()\n    async with clientsession(loop=loop, trace_configs=[trace_config]) as session:\n        async with session.get(url) as resp\n            await resp.read()\n```\n\n### use sqlalchemy orm\nthe sqlalchemy integration requires you to override the session and query classes for sql alchemy\n\nsqlalchemy integration uses subsegments so you need to have a segment started before you make a query.\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.ext.sqlalchemy.query import xraysessionmaker\n\nxray_recorder.begin_segment('sqlalchemytest')\n\nsession = xraysessionmaker(bind=engine)\nsession = session()\n\nxray_recorder.end_segment()\napp = flask(__name__)\n\nxray_recorder.configure(service='fallback_name', dynamic_naming='*mysite.com*')\nxraymiddleware(app, xray_recorder)\n```\n\n### add flask-sqlalchemy\n\n```python\nfrom aws_xray_sdk.core import xray_recorder\nfrom aws_xray_sdk.ext.flask.middleware import xraymiddleware\nfrom aws_xray_sdk.ext.flask_sqlalchemy.query import xrayflasksqlalchemy\n\napp = flask(__name__)\napp.config[\"sqlalchemy_database_uri\"] = \"sqlite:///:memory:\"\n\nxraymiddleware(app, xray_recorder)\ndb = xrayflasksqlalchemy(app)\n\n```\n\n### ignoring httplib requests\n\nif you want to ignore certain httplib requests you can do so based on the hostname or url that is being requsted. the hostname is matched using the python [fnmatch library](https://docs.python.org/3/library/fnmatch.html) which does unix glob style matching.\n\n```python\nfrom aws_xray_sdk.ext.httplib import add_ignored as xray_add_ignored\n\n# ignore requests to test.myapp.com\nxray_add_ignored(hostname='test.myapp.com')\n\n# ignore requests to a subdomain of myapp.com with a glob pattern\nxray_add_ignored(hostname='*.myapp.com')\n\n# ignore requests to /test-url and /other-test-url\nxray_add_ignored(urls=['/test-path', '/other-test-path'])\n\n# ignore requests to myapp.com for /test-url\nxray_add_ignored(hostname='myapp.com', urls=['/test-url'])\n```\n\nif you use a subclass of httplib to make your requests, you can also filter on the class name that initiates the request. this must use the complete package name to do the match.\n\n```python\nfrom aws_xray_sdk.ext.httplib import add_ignored as xray_add_ignored\n\n# ignore all requests made by botocore\nxray_add_ignored(subclass='botocore.awsrequest.awshttpconnection')\n```\n\n## license\n\nthe aws x-ray sdk for python is licensed under the apache 2.0 license. see license and notice.txt for more information.\n",
  "docs_url": null,
  "keywords": "aws xray sdk",
  "license": "apache license 2.0",
  "name": "aws-xray-sdk",
  "package_url": "https://pypi.org/project/aws-xray-sdk/",
  "project_url": "https://pypi.org/project/aws-xray-sdk/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-xray-sdk-python"
  },
  "release_url": "https://pypi.org/project/aws-xray-sdk/2.12.1/",
  "requires_dist": [
    "wrapt",
    "botocore>=1.11.3"
  ],
  "requires_python": ">=3.7",
  "summary": "the aws x-ray sdk for python (the sdk) enables python developers to record and emit information from within their applications to the aws x-ray service.",
  "version": "2.12.1",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_xray_sdk aws_xray_sdk_enabled aws_xray_trace_config aws_xray_tracing_name xray",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_aws_xray_sdk",
  "homepage": "https://github.com/aws/aws-xray-sdk-python",
  "release_count": 32,
  "dependency_ids": [
    "pypi_botocore",
    "pypi_wrapt"
  ]
}
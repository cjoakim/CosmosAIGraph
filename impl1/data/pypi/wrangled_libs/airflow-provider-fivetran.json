{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# fivetran provider for apache airflow\n\nthis package provides an operator, sensor, and hook that integrates [fivetran](https://fivetran.com) into apache airflow. `fivetranoperator` allows you to start fivetran jobs from airflow and `fivetransensor` allows you to monitor a fivetran sync job for completion before running downstream processes.\n\n[fivetran automates your data pipeline, and airflow automates your data processing.](https://www.youtube.com/watch?v=sisx6l2cksw&ab_channel=fivetran)\n\n## installation\n\nprerequisites: an environment running `apache-airflow`.\n\n```\npip install airflow-provider-fivetran\n```\n\n## configuration\n\nin the airflow user interface, configure a connection for fivetran. most of the connection config fields will be left blank. configure the following fields:\n\n* `conn id`: `fivetran_default`\n* `conn type`: `fivetran`\n* `fivetran api key`: your fivetran api key\n* `fivetran api secret`: your fivetran api secret\n\nfind the fivetran api key and secret in the [fivetran account settings](https://fivetran.com/account/settings), under the **api config** section. see our documentation for more information on [fivetran api authentication](https://fivetran.com/docs/rest-api/getting-started#authentication).\n\nthe sensor and operator assume the `conn id` is set to `fivetran_default`, however if you are managing multipe fivetran accounts, you can set this to anything you like. see the dag in examples to see how to specify a custom `conn id`.\n\n## modules\n\n### [fivetran operator](https://github.com/fivetran/airflow-provider-fivetran/blob/main/fivetran_provider/operators/fivetran.py)\n\n`fivetranoperator` starts a fivetran sync job. note that when a fivetran sync job is controlled via an operator, it is no longer run on the schedule as managed by fivetran. in other words, it is now scheduled only from airflow.\n\n`fivetranoperator` requires that you specify the `connector_id` of the sync job to start. you can find `connector_id` in the settings page of the connector you configured in the [fivetran dashboard](https://fivetran.com/dashboard/connectors).\n\nimport into your dag via:\n```\nfrom fivetran_provider.operators.fivetran import fivetranoperator\n```\n\n### [fivetran sensor](https://github.com/fivetran/airflow-provider-fivetran/blob/main/fivetran_provider/sensors/fivetran.py)\n\n`fivetransensor` monitors a fivetran sync job for completion. monitoring with `fivetransensor` allows you to trigger downstream processes only when the fivetran sync jobs have completed, ensuring data consistency. you can use multiple instances of `fivetransensor` to monitor multiple fivetran connectors.\n\nnote, it is possible to monitor a sync that is scheduled and managed from fivetran; in other words, you can use `fivetransensor` without using `fivetranoperator`. if used in this way, your dag will wait until the sync job starts on its fivetran-controlled schedule and then completes.\n\n`fivetransensor` requires that you specify the `connector_id` of the sync job to start. you can find `connector_id` in the settings page of the connector you configured in the [fivetran dashboard](https://fivetran.com/dashboard/connectors).\n\nimport into your dag via:\n```\nfrom fivetran_provider.sensors.fivetran import fivetransensor\n```\n\n## examples\n\nsee the [**examples**](https://github.com/fivetran/airflow-provider-fivetran/tree/main/fivetran_provider/example_dags) directory for an example dag.\n\n## issues\n\nplease submit [issues](https://github.com/fivetran/airflow-provider-fivetran/issues) and [pull requests](https://github.com/fivetran/airflow-provider-fivetran/pulls) in our official repo:\n[https://github.com/fivetran/airflow-provider-fivetran](https://github.com/fivetran/airflow-provider-fivetran)\n\nwe are happy to hear from you. please email any feedback to the authors at [devrel@fivetran.com](mailto:devrel@fivetran.com).\n\n\n## acknowledgements\n\nspecial thanks to [pete dejoy](https://github.com/petedejoy), [plinio guzman](https://github.com/pgzmnk), and [david koenitzer](https://github.com/sunkickr) of [astronomer.io](https://www.astronomer.io/) for their contributions and support in getting this provider off the ground.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "airflow-provider-fivetran",
  "package_url": "https://pypi.org/project/airflow-provider-fivetran/",
  "project_url": "https://pypi.org/project/airflow-provider-fivetran/",
  "project_urls": {
    "Bug Tracker": "https://github.com/fivetran/airflow-provider-fivetran/issues",
    "Homepage": "https://github.com/fivetran/airflow-provider-fivetran"
  },
  "release_url": "https://pypi.org/project/airflow-provider-fivetran/1.1.4/",
  "requires_dist": [
    "requests",
    "apache-airflow (>=1.10)"
  ],
  "requires_python": ">=3.6",
  "summary": "a fivetran provider for apache airflow",
  "version": "1.1.4",
  "releases": [],
  "developers": [
    "devrel@fivetran.com",
    "fivetran"
  ],
  "kwds": "airflow fivetran_provider fivetran_default pipeline fivetransensor",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_airflow_provider_fivetran",
  "homepage": "https://github.com/fivetran/airflow-provider-fivetran",
  "release_count": 15,
  "dependency_ids": [
    "pypi_apache_airflow",
    "pypi_requests"
  ]
}
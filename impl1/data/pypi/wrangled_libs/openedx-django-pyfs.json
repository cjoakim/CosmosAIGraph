{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.2",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "openedx-django-pyfs\n===================\n\n|pypi-badge| |ci-badge| |codecov-badge| |pyversions-badge|\n|license-badge|\n\na django module which extends pyfilesystem2 with several methods to\nmake it convenient for web use. specifically, it extends pyfilesystem2\nwith two methods:\n\n.. code-block::\n\n    fs.get_url(filename, timeout=0)\n\nthis will return a externally-usable url to the resource. if\ntimeout>0, the url may stop working after that period (in\nseconds). details are implementation-dependent. on amazon s3, this is\na secure url, which is only available for that period. for a static\nfilesystem, the urls are unsecure and permanent.\n\n.. code-block::\n\n    fs.expire(filename, seconds, days, expires=true)\n\nthis allows us to create temporary objects. our use-case was that we\nwanted to generate visualizations to users which were .png images. the\nlifetime of those images was a single web request, so we set them to\nexpire after a few minutes. another use case was memoization.\n\nnote that expired files are not automatically removed. to remove them,\ncall ``expire_objects()``. in our system, we had a cron job do\nthis for a while. celery, manual removals, etc. are all options.\n\nto configure a openedx-django-pyfs to use static files, set a parameter in\ndjango settings:\n\n.. code-block::\n\n    djfs = {'type' : 'osfs',\n            'directory_root' : 'djpyfs/static/djpyfs',\n            'url_root' : '/static/djpyfs'}\n\nhere, ``directory_root`` is where the files go. ``url_root`` is the url\nbase of where your web server is configured to serve them from.\n\nto use files on s3, you need ``boto`` installed. then,\n\n.. code-block::\n\n    djfs = {'type' : 's3fs',\n            'bucket' : 'my-bucket',\n            'prefix' : '/pyfs/' }\n\n``bucket`` is your s3 bucket. ``prefix`` is optional, and gives a base\nwithin that bucket.\n\nto get your filesystem, call:\n\n.. code-block::\n\n    def get_filesystem(namespace)\n\neach module should pass a unique namespace. these will typically\ncorrespond to subdirectories within the filesystem.\n\nthe openedx-django-pyfs interface is designed as a generic (non-django\nspecific) extension to pyfilesystem2. however, the specific\nimplementation is very django-specific.\n\ngood next steps would be to:\n\n* allow django storages to act as a back-end for pyfilesystem\n* allow openedx-django-pyfs to act as a back-end for django storages\n* support more types of pyfilesystems (esp. in-memory would be nice)\n\nstate: this code is tested and has worked well in a range of settings,\nand is currently deployed on edx.org.\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/openedx-django-pyfs.svg\n    :target: https://pypi.python.org/pypi/openedx-django-pyfs/\n    :alt: pypi\n\n.. |ci-badge| image:: https://github.com/openedx/django-pyfs/workflows/python%20ci/badge.svg?branch=master\n    :target: https://github.com/openedx/django-pyfs/actions?query=workflow%3a%22python+ci%22\n    :alt: github ci\n\n.. |codecov-badge| image:: http://codecov.io/github/openedx/django-pyfs/coverage.svg?branch=master\n    :target: http://codecov.io/github/openedx/django-pyfs?branch=master\n    :alt: codecov\n\n.. |pyversions-badge| image:: https://img.shields.io/pypi/pyversions/openedx-django-pyfs.svg\n    :target: https://pypi.python.org/pypi/openedx-django-pyfs\n    :alt: supported python versions\n\n.. |license-badge| image:: https://img.shields.io/github/license/openedx/django-pyfs.svg\n    :target: https://github.com/openedx/django-pyfs/blob/master/license.txt\n    :alt: license\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "openedx-django-pyfs",
  "package_url": "https://pypi.org/project/openedx-django-pyfs/",
  "project_url": "https://pypi.org/project/openedx-django-pyfs/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/django-pyfs"
  },
  "release_url": "https://pypi.org/project/openedx-django-pyfs/3.4.1/",
  "requires_dist": [
    "django",
    "fs >=2.0.1",
    "fs-s3fs"
  ],
  "requires_python": "",
  "summary": "django pyfilesystem integration",
  "version": "3.4.1",
  "releases": [],
  "developers": [
    "open_edx",
    "oscm@tcril.org"
  ],
  "kwds": "pyfilesystems pyfilesystem pyfilesystem2 pyfs django",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_openedx_django_pyfs",
  "homepage": "https://github.com/openedx/django-pyfs",
  "release_count": 4,
  "dependency_ids": [
    "pypi_django",
    "pypi_fs",
    "pypi_fs_s3fs"
  ]
}
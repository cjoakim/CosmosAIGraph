{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": "# langsmith client sdk\n\nthis package contains the python client for interacting with the [langsmith platform](https://www.langchain.plus/).\n\nto install:\n\n```bash\npip install langchainplus-sdk\n```\n\nlangsmith helps you and your team develop and evaluate language models and intelligent agents. it is compatible with any llm application and provides seamless integration with [langchain](https://github.com/hwchase17/langchain), a widely recognized open-source framework that simplifies the process for developers to create powerful language model applications.\n\n> **note**: you can enjoy the benefits of langsmith without using the langchain open-source packages! to get started with your own proprietary framework, set up your account and then skip to [logging traces outside langchain](#logging-traces-outside-langchain).\n\na typical workflow looks like:\n\n1. set up an account with langsmith or host your [local server](https://docs.langchain.plus/docs/getting-started/local_installation).\n2. log traces.\n3. debug, create datasets, and evaluate runs.\n\nwe'll walk through these steps in more detail below.\n\n## 1. connect to langsmith\n\nsign up for [langsmith](https://www.langchain.plus/) using your github, discord accounts, or an email address and password. if you sign up with an email, make sure to verify your email address before logging in.\n\nthen, create a unique api key on the [settings page](https://www.langchain.plus/settings), which is found in the menu at the top right corner of the page.\n\nnote: save the api key in a secure location. it will not be shown again.\n\n## 2. log traces\n\nyou can log traces natively in your langchain application or using a langsmith runtree.\n\n### logging traces with langchain\n\nlangsmith seamlessly integrates with the python langchain library to record traces from your llm applications.\n\n1. **copy the environment variables from the settings page and add them to your application.**\n\ntracing can be activated by setting the following environment variables or by manually specifying the langchaintracer.\n\n```python\nimport os\nos.environ[\"langchain_tracing_v2\"] = \"true\"\nos.environ[\"langchain_endpoint\"] = \"https://api.langchain.plus\" # or your own server\nos.environ[\"langchain_api_key\"] = \"<your-langchainplus-api-key>\"\n# os.environ[\"langchain_project\"] = \"my project name\" # optional: \"default\" is used if not set\n```\n\n> **tip:** projects are groups of traces. all runs are logged to a project. if not specified, the project is set to `default`.\n\n2. **run an agent, chain, or language model in langchain**\n\nif the environment variables are correctly set, your application will automatically connect to the langsmith platform.\n\n```python\nfrom langchain.chat_models import chatopenai\n\nchat = chatopenai()\nresponse = chat.predict(\n    \"translate this sentence from english to french. i love programming.\"\n)\nprint(response)\n```\n\n### logging traces outside langchain\n\n_note: this api is experimental and may change in the future_\n\nyou can still use the langsmith development platform without depending on any\nlangchain code. you can connect either by setting the appropriate environment variables,\nor by directly specifying the connection information in the runtree.\n\n1. **copy the environment variables from the settings page and add them to your application.**\n\n```python\nimport os\nos.environ[\"langchain_endpoint\"] = \"https://api.langchain.plus\" # or your own server\nos.environ[\"langchain_api_key\"] = \"<your-langchainplus-api-key>\"\n# os.environ[\"langchain_project\"] = \"my project name\" # optional: \"default\" is used if not set\n```\n\n2. **log traces using a runtree.**\n\na runtree tracks your application. each runtree object is required to have a `name` and `run_type`. these and other important attributes are as follows:\n\n- `name`: `str` - used to identify the component's purpose\n- `run_type`: `str` - currently one of \"llm\", \"chain\" or \"tool\"; more options will be added in the future\n- `inputs`: `dict` - the inputs to the component\n- `outputs`: `optional[dict]` - the (optional) returned values from the component\n- `error`: `optional[str]` - any error messages that may have arisen during the call\n\n```python\nfrom langchainplus_sdk.run_trees import runtree\n\nparent_run = runtree(\n    name=\"my chat bot\",\n    run_type=\"chain\",\n    inputs={\"text\": \"summarize this morning's meetings.\"},\n    serialized={},  # serialized representation of this chain\n    # project_name= \"defaults to the langchain_project env var\"\n    # api_url= \"defaults to the langchain_endpoint env var\"\n    # api_key= \"defaults to the langchain_api_key env var\"\n)\n# .. my chat bot calls an llm\nchild_llm_run = parent_run.create_child(\n    name=\"my proprietary llm\",\n    run_type=\"llm\",\n    inputs={\n        \"prompts\": [\n            \"you are an ai assistant. the time is xyz.\"\n            \" summarize this morning's meetings.\"\n        ]\n    },\n)\nchild_llm_run.end(\n    outputs={\n        \"generations\": [\n            \"i should use the transcript_loader tool\"\n            \" to fetch meeting_transcripts from xyz\"\n        ]\n    }\n)\n# ..  my chat bot takes the llm output and calls\n# a tool / function for fetching transcripts ..\nchild_tool_run = parent_run.create_child(\n    name=\"transcript_loader\",\n    run_type=\"tool\",\n    inputs={\"date\": \"xyz\", \"content_type\": \"meeting_transcripts\"},\n)\n# the tool returns meeting notes to the chat bot\nchild_tool_run.end(outputs={\"meetings\": [\"meeting1 notes..\"]})\n\nchild_chain_run = parent_run.create_child(\n    name=\"unreliable component\",\n    run_type=\"tool\",\n    inputs={\"input\": \"summarize these notes...\"},\n)\n\ntry:\n    # .... the component does work\n    raise valueerror(\"something went wrong\")\nexcept exception as e:\n    child_chain_run.end(error=f\"i errored again {e}\")\n    pass\n# .. the chat agent recovers\n\nparent_run.end(outputs={\"output\": [\"the meeting notes are as follows:...\"]})\n\n# this posts all nested runs as a batch\nres = parent_run.post(exclude_child_runs=false)\nres.result()\n```\n\n## create a dataset from existing runs\n\nonce your runs are stored in langsmith, you can convert them into a dataset.\nfor this example, we will do so using the client, but you can also do this using\nthe web interface, as explained in the [langsmith docs](https://docs.langchain.plus/docs/).\n\n```python\nfrom langchainplus_sdk import langchainplusclient\n\nclient = langchainplusclient()\ndataset_name = \"example dataset\"\n# we will only use examples from the top level agentexecutor run here,\n# and exclude runs that errored.\nruns = client.list_runs(\n    project_name=\"my_project\",\n    execution_order=1,\n    error=false,\n)\n\ndataset = client.create_dataset(dataset_name, description=\"an example dataset\")\nfor run in runs:\n    client.create_example(\n        inputs=run.inputs,\n        outputs=run.outputs,\n        dataset_id=dataset.id,\n    )\n```\n\n## evaluating runs\n\nyou can run evaluations directly using the langsmith client.\n\n```python\nfrom typing import optional\nfrom langchainplus_sdk.evaluation import stringevaluator\n\n\ndef jaccard_chars(output: str, answer: str) -> float:\n    \"\"\"naive jaccard similarity between two strings.\"\"\"\n    prediction_chars = set(output.strip().lower())\n    answer_chars = set(answer.strip().lower())\n    intersection = prediction_chars.intersection(answer_chars)\n    union = prediction_chars.union(answer_chars)\n    return len(intersection) / len(union)\n\n\ndef grader(run_input: str, run_output: str, answer: optional[str]) -> dict:\n    \"\"\"compute the score and/or label for this run.\"\"\"\n    if answer is none:\n        value = \"ambiguous\"\n        score = 0.5\n    else:\n        score = jaccard_chars(run_output, answer)\n        value = \"correct\" if score > 0.9 else \"incorrect\"\n    return dict(score=score, value=value)\n\nevaluator = stringevaluator(evaluation_name=\"jaccard\", grading_function=grader)\n\nruns = client.list_runs(\n    project_name=\"my_project\",\n    execution_order=1,\n    error=false,\n)\nfor run in runs:\n    client.evaluate_run(run, evaluator)\n```\n\n## additional documentation\n\nto learn more about the langsmith platform, check out the [docs](https://docs.langchain.plus/docs/).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "langchainplus-sdk",
  "package_url": "https://pypi.org/project/langchainplus-sdk/",
  "project_url": "https://pypi.org/project/langchainplus-sdk/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/langchainplus-sdk/0.0.20/",
  "requires_dist": [
    "pydantic (>=1,<2)",
    "requests (>=2,<3)",
    "tenacity (>=8.1.0,<9.0.0)"
  ],
  "requires_python": ">=3.8.1,<4.0",
  "summary": "client library to connect to the langsmith llm tracing and evaluation platform.",
  "version": "0.0.20",
  "releases": [],
  "developers": [
    "langchain"
  ],
  "kwds": "langchain_project langchaintracer langchainplus_sdk langchainplusclient langchainplus",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_langchainplus_sdk",
  "homepage": "",
  "release_count": 23,
  "dependency_ids": [
    "pypi_pydantic",
    "pypi_requests",
    "pypi_tenacity"
  ]
}
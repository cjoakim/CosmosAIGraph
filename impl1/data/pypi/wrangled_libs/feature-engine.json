{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# feature engine\n\n[![pypi - python version](https://img.shields.io/pypi/pyversions/feature_engine?logo=python)](https://pypi.org/project/feature-engine/)\n[![github](https://img.shields.io/github/license/feature-engine/feature_engine)](https://github.com/feature-engine/feature_engine/blob/master/license.md)\n[![pypi](https://img.shields.io/pypi/v/feature_engine?logo=pypi)](https://pypi.org/project/feature-engine)\n[![conda](https://img.shields.io/conda/v/conda-forge/feature_engine?logo=anaconda)](https://anaconda.org/conda-forge/feature_engine)\n[![circleci](https://img.shields.io/circleci/build/github/feature-engine/feature_engine/main?logo=circleci)](https://app.circleci.com/pipelines/github/feature-engine/feature_engine)\n[![codecov](https://img.shields.io/codecov/c/github/feature-engine/feature_engine?logo=codecov&token=zbkksn6erl)](https://codecov.io/github/feature-engine/feature_engine)\n[![read the docs](https://img.shields.io/readthedocs/feature_engine?logo=readthedocs)](https://feature-engine.readthedocs.io/en/latest/index.html)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![github contributors](https://img.shields.io/github/contributors/feature-engine/feature_engine?logo=github)](https://github.com/feature-engine/feature_engine/graphs/contributors)\n[![gitter](https://img.shields.io/gitter/room/feature-engine/feaure_engine?logo=gitter)](https://gitter.im/feature_engine/community)\n[![monthly downloads](https://img.shields.io/pypi/dm/feature-engine)](https://img.shields.io/pypi/dm/feature-engine)\n[![doi](https://zenodo.org/badge/163630824.svg)](https://zenodo.org/badge/latestdoi/163630824)\n[![joss](https://joss.theoj.org/papers/10.21105/joss.03642/status.svg)](https://doi.org/10.21105/joss.03642)\n[![first-timers-only](https://img.shields.io/badge/first--timers--only-friendly-blue.svg?style=flat)](https://www.firsttimersonly.com/)\n[![sponsorship](https://img.shields.io/badge/powered%20by-trainindata-orange.svg)](https://www.trainindata.com/)\n\n<div align=\"center\">\n\n[![feature-engine logo](https://raw.githubusercontent.com/feature-engine/feature_engine/main/docs/images/logo/featureengine.png)](http://feature-engine.readthedocs.io)\n\n</div>\n\nfeature-engine is a python library with multiple transformers to engineer and select features for use in machine learning models. \nfeature-engine's transformers follow scikit-learn's functionality with fit() and transform() methods to learn the \ntransforming parameters from the data and then transform it.\n\n\n## feature-engine features in the following resources\n\n* [feature engineering for machine learning, online course](https://www.trainindata.com/p/feature-engineering-for-machine-learning)\n\n* [feature selection for machine learning, online course](https://www.trainindata.com/p/feature-selection-for-machine-learning)\n\n* [feature engineering for time series forecasting, online course](https://www.trainindata.com/p/feature-engineering-for-forecasting)\n\n* [python feature engineering cookbook](https://packt.link/0ewso)\n\n* [feature selection in machine learning with python book](https://leanpub.com/feature-selection-in-machine-learning)\n\n\n## blogs about feature-engine\n\n* [feature-engine: a new open-source python package for feature engineering](https://trainindata.medium.com/feature-engine-a-new-open-source-python-package-for-feature-engineering-29a0ab88ea7c)\n\n* [practical code implementations of feature engineering for machine learning with python](https://towardsdatascience.com/practical-code-implementations-of-feature-engineering-for-machine-learning-with-python-f13b953d4bcd)\n\n\n## documentation\n\n* [documentation](https://feature-engine.trainindata.com)\n\n\n## current feature-engine's transformers include functionality for:\n\n* missing data imputation\n* categorical encoding\n* discretisation\n* outlier capping or removal\n* variable transformation\n* variable creation\n* variable selection\n* datetime features\n* time series\n* preprocessing\n* scikit-learn wrappers\n\n### imputation methods\n* meanmedianimputer\n* randomsampleimputer\n* endtailimputer\n* addmissingindicator\n* categoricalimputer\n* arbitrarynumberimputer\n* dropmissingdata\n\n### encoding methods\n* onehotencoder\n* ordinalencoder\n* countfrequencyencoder\n* meanencoder\n* woeencoder\n* rarelabelencoder\n* decisiontreeencoder\n* stringsimilarityencoder\n\n### discretisation methods\n* equalfrequencydiscretiser\n* equalwidthdiscretiser\n* geometricwidthdiscretiser\n* decisiontreediscretiser\n* arbitrarydiscreriser\n\n### outlier handling methods\n* winsorizer\n* arbitraryoutliercapper\n* outliertrimmer\n\n### variable transformation methods\n* logtransformer\n* logcptransformer\n* reciprocaltransformer\n* arcsintransformer\n* powertransformer\n* boxcoxtransformer\n* yeojohnsontransformer\n\n### variable creation:\n * mathfeatures\n * relativefeatures\n * cyclicalfeatures\n\n### feature selection:\n * dropfeatures\n * dropconstantfeatures\n * dropduplicatefeatures\n * dropcorrelatedfeatures\n * smartcorrelationselection\n * shufflefeaturesselector\n * selectbysinglefeatureperformance\n * selectbytargetmeanperformance\n * recursivefeatureelimination\n * recursivefeatureaddition\n * drophighpsifeatures\n * selectbyinformationvalue\n * probefeatureselection\n\n### datetime\n * datetimefeatures\n * datetimesubtraction\n\n### time series\n * lagfeatures\n * windowfeatures\n * expandingwindowfeatures\n\n### preprocessing\n * matchcategories\n * matchvariables\n\n### wrappers:\n * sklearntransformerwrapper\n\n## installation\n\nfrom pypi using pip:\n\n```\npip install feature_engine\n```\n\nfrom anaconda:\n\n```\nconda install -c conda-forge feature_engine\n```\n\nor simply clone it:\n\n```\ngit clone https://github.com/feature-engine/feature_engine.git\n```\n\n## example usage\n\n```python\n>>> import pandas as pd\n>>> from feature_engine.encoding import rarelabelencoder\n\n>>> data = {'var_a': ['a'] * 10 + ['b'] * 10 + ['c'] * 2 + ['d'] * 1}\n>>> data = pd.dataframe(data)\n>>> data['var_a'].value_counts()\n```\n\n```\nout[1]:\na    10\nb    10\nc     2\nd     1\nname: var_a, dtype: int64\n```\n\n```python \n>>> rare_encoder = rarelabelencoder(tol=0.10, n_categories=3)\n>>> data_encoded = rare_encoder.fit_transform(data)\n>>> data_encoded['var_a'].value_counts()\n```\n\n```\nout[2]:\na       10\nb       10\nrare     3\nname: var_a, dtype: int64\n```\n\nfind more examples in our [jupyter notebook gallery](https://nbviewer.org/github/feature-engine/feature-engine-examples/tree/main/) \nor in the [documentation](https://feature-engine.trainindata.com).\n\n## contribute\n\ndetails about how to contribute can be found in the [contribute page](https://feature-engine.trainindata.com/en/latest/contribute/index.html)\n\nbriefly:\n\n- fork the repo\n- clone your fork into your local computer: ``git clone https://github.com/<yourusername>/feature_engine.git``\n- navigate into the repo folder ``cd feature_engine``\n- install feature-engine as a developer: ``pip install -e .``\n- optional: create and activate a virtual environment with any tool of choice\n- install feature-engine dependencies: ``pip install -r requirements.txt`` and ``pip install -r test_requirements.txt``\n- create a feature branch with a meaningful name for your feature: ``git checkout -b myfeaturebranch``\n- develop your feature, tests and documentation\n- make sure the tests pass\n- make a pr\n\nthank you!!\n\n\n### documentation\n\nfeature-engine documentation is built using [sphinx](https://www.sphinx-doc.org) and is hosted on [read the docs](https://readthedocs.org/).\n\nto build the documentation make sure you have the dependencies installed: from the root directory: ``pip install -r docs/requirements.txt``.\n\nnow you can build the docs using: ``sphinx-build -b html docs build``\n\n\n## license\n\nthe content of this repository is licensed under a [bsd 3-clause license](https://github.com/feature-engine/feature_engine/blob/main/license.md).\n\n## sponsor us\n\n[sponsor us](https://github.com/sponsors/feature-engine) and support further our \nmission to democratize machine learning and programming tools through open-source \nsoftware.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3 clause",
  "name": "feature-engine",
  "package_url": "https://pypi.org/project/feature-engine/",
  "project_url": "https://pypi.org/project/feature-engine/",
  "project_urls": {
    "Homepage": "http://github.com/feature-engine/feature_engine"
  },
  "release_url": "https://pypi.org/project/feature-engine/1.6.2/",
  "requires_dist": [
    "numpy >=1.18.2",
    "pandas >=1.0.3",
    "scikit-learn >=1.0.0",
    "scipy >=1.4.1",
    "statsmodels >=0.11.1"
  ],
  "requires_python": ">=3.8.0",
  "summary": "feature engineering package with scikit-learn's fit transform functionality",
  "version": "1.6.2",
  "releases": [],
  "developers": [
    "soledad_galli",
    "solegalli@protonmail.com"
  ],
  "kwds": "feature_engine pypi feaure_engine shields pyversions",
  "license_kwds": "bsd 3 clause",
  "libtype": "pypi",
  "id": "pypi_feature_engine",
  "homepage": "http://github.com/feature-engine/feature_engine",
  "release_count": 38,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_pandas",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_statsmodels"
  ]
}
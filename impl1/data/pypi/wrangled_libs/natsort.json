{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: financial and insurance industry",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: information analysis",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "natsort\n=======\n\n.. image:: https://img.shields.io/pypi/v/natsort.svg\n    :target: https://pypi.org/project/natsort/\n\n.. image:: https://img.shields.io/pypi/pyversions/natsort.svg\n    :target: https://pypi.org/project/natsort/\n\n.. image:: https://img.shields.io/pypi/l/natsort.svg\n    :target: https://github.com/sethmmorton/natsort/blob/main/license\n\n.. image:: https://github.com/sethmmorton/natsort/workflows/tests/badge.svg\n    :target: https://github.com/sethmmorton/natsort/actions\n\n.. image:: https://codecov.io/gh/sethmmorton/natsort/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/sethmmorton/natsort\n\n.. image:: https://img.shields.io/pypi/dw/natsort.svg\n    :target: https://pypi.org/project/natsort/\n\nsimple yet flexible natural sorting in python.\n\n    - source code: https://github.com/sethmmorton/natsort\n    - downloads: https://pypi.org/project/natsort/\n    - documentation: https://natsort.readthedocs.io/\n\n      - `examples and recipes`_\n      - `how does natsort work?`_\n      - `api`_\n\n    - `quick description`_\n    - `quick examples`_\n    - `faq`_\n    - `requirements`_\n    - `optional dependencies`_\n    - `installation`_\n    - `how to run tests`_\n    - `how to build documentation`_\n    - `dropped deprecated apis`_\n    - `history`_\n\n**note**: please see the `dropped deprecated apis`_ section for changes.\n\nquick description\n-----------------\n\nwhen you try to sort a list of strings that contain numbers, the normal python\nsort algorithm sorts lexicographically, so you might not get the results that\nyou expect:\n\n.. code-block:: pycon\n\n    >>> a = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> sorted(a)\n    ['1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '2 ft 7 in', '7 ft 6 in']\n\nnotice that it has the order ('1', '10', '2') - this is because the list is\nbeing sorted in lexicographical order, which sorts numbers like you would\nletters (i.e. 'b', 'ba', 'c').\n\n`natsort`_ provides a function `natsorted()`_ that helps sort lists\n\"naturally\" (\"naturally\" is rather ill-defined, but in general it means\nsorting based on meaning and not computer code point).\nusing `natsorted()`_ is simple:\n\n.. code-block:: pycon\n\n    >>> from natsort import natsorted\n    >>> a = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> natsorted(a)\n    ['1 ft 5 in', '2 ft 7 in', '2 ft 11 in', '7 ft 6 in', '10 ft 2 in']\n\n`natsorted()`_ identifies numbers anywhere in a string and sorts them\nnaturally. below are some other things you can do with `natsort`_\n(also see the `examples and recipes`_ for a quick start guide, or the\n`api`_ for complete details).\n\n**note**: `natsorted()`_ is designed to be a drop-in replacement for the\nbuilt-in `sorted()`_ function. like `sorted()`_, `natsorted()`_\n`does not sort in-place`. to sort a list and assign the output to the same\nvariable, you must explicitly assign the output to a variable:\n\n.. code-block:: pycon\n\n    >>> a = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> natsorted(a)\n    ['1 ft 5 in', '2 ft 7 in', '2 ft 11 in', '7 ft 6 in', '10 ft 2 in']\n    >>> print(a)  # 'a' was not sorted; \"natsorted\" simply returned a sorted list\n    ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> a = natsorted(a)  # now 'a' will be sorted because the sorted list was assigned to 'a'\n    >>> print(a)\n    ['1 ft 5 in', '2 ft 7 in', '2 ft 11 in', '7 ft 6 in', '10 ft 2 in']\n\nplease see `generating a reusable sorting key and sorting in-place`_ for\nan alternate way to sort in-place naturally.\n\nquick examples\n--------------\n\n- `sorting versions`_\n- `sort paths like my file browser (e.g. windows explorer on windows)`_\n- `sorting by real numbers (i.e. signed floats)`_\n- `locale-aware sorting (or \"human sorting\")`_\n- `further customizing natsort`_\n- `sorting mixed types`_\n- `handling bytes`_\n- `generating a reusable sorting key and sorting in-place`_\n- `other useful things`_\n\nsorting versions\n++++++++++++++++\n\n`natsort`_ does not actually *comprehend* version numbers.\nit just so happens that the most common versioning schemes are designed to\nwork with standard natural sorting techniques; these schemes include\n``major.minor``, ``major.minor.patch``, ``year.month.day``. if your data\nconforms to a scheme like this, then it will work out-of-the-box with\n`natsorted()`_ (as of `natsort`_ version >= 4.0.0):\n\n.. code-block:: pycon\n\n    >>> a = ['version-1.9', 'version-2.0', 'version-1.11', 'version-1.10']\n    >>> natsorted(a)\n    ['version-1.9', 'version-1.10', 'version-1.11', 'version-2.0']\n\nif you need to versions that use a more complicated scheme, please see\n`these version sorting examples`_.\n\nsort paths like my file browser (e.g. windows explorer on windows)\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nprior to `natsort`_ version 7.1.0, it was a common request to be able to\nsort paths like windows explorer. as of `natsort`_ 7.1.0, the function\n`os_sorted()`_ has been added to provide users the ability to sort\nin the order that their file browser might sort (e.g windows explorer on\nwindows, finder on macos, dolphin/nautilus/thunar/etc. on linux).\n\n.. code-block:: python\n\n    import os\n    from natsort import os_sorted\n    print(os_sorted(os.listdir()))\n    # the directory sorted like your file browser might show\n\noutput will be different depending on the operating system you are on.\n\nfor users **not** on windows (e.g. macos/linux) it is **strongly** recommended\nto also install `pyicu`_, which will help\n`natsort`_ give results that match most file browsers. if this is not installed,\nit will fall back on python's built-in `locale`_ module and will give good\nresults for most input, but will give poor results for special characters.\n\nsorting by real numbers (i.e. signed floats)\n++++++++++++++++++++++++++++++++++++++++++++\n\nthis is useful in scientific data analysis (and was the default behavior\nof `natsorted()`_ for `natsort`_ version < 4.0.0). use the `realsorted()`_\nfunction:\n\n.. code-block:: pycon\n\n    >>> from natsort import realsorted, ns\n    >>> # note that when interpreting as signed floats, the below numbers are\n    >>> #            +5.10,                -3.00,            +5.30,              +2.00\n    >>> a = ['position5.10.data', 'position-3.data', 'position5.3.data', 'position2.data']\n    >>> natsorted(a)\n    ['position2.data', 'position5.3.data', 'position5.10.data', 'position-3.data']\n    >>> natsorted(a, alg=ns.real)\n    ['position-3.data', 'position2.data', 'position5.10.data', 'position5.3.data']\n    >>> realsorted(a)  # shortcut for natsorted with alg=ns.real\n    ['position-3.data', 'position2.data', 'position5.10.data', 'position5.3.data']\n\nlocale-aware sorting (or \"human sorting\")\n+++++++++++++++++++++++++++++++++++++++++\n\nthis is where the non-numeric characters are also ordered based on their\nmeaning, not on their ordinal value, and a locale-dependent thousands\nseparator and decimal separator is accounted for in the number.\nthis can be achieved with the `humansorted()`_ function:\n\n.. code-block:: pycon\n\n    >>> a = ['apple', 'apple15', 'banana', 'apple14,689', 'banana']\n    >>> natsorted(a)\n    ['apple', 'banana', 'apple14,689', 'apple15', 'banana']\n    >>> import locale\n    >>> locale.setlocale(locale.lc_all, 'en_us.utf-8')\n    'en_us.utf-8'\n    >>> natsorted(a, alg=ns.locale)\n    ['apple15', 'apple14,689', 'apple', 'banana', 'banana']\n    >>> from natsort import humansorted\n    >>> humansorted(a)  # shortcut for natsorted with alg=ns.locale\n    ['apple15', 'apple14,689', 'apple', 'banana', 'banana']\n\nyou may find you need to explicitly set the locale to get this to work\n(as shown in the example). please see `locale issues`_ and the\n`optional dependencies`_ section below before using the `humansorted()`_ function.\n\nfurther customizing natsort\n+++++++++++++++++++++++++++\n\nif you need to combine multiple algorithm modifiers (such as ``ns.real``,\n``ns.locale``, and ``ns.ignorecase``), you can combine the options using the\nbitwise or operator (``|``). for example,\n\n.. code-block:: pycon\n\n    >>> a = ['apple', 'apple15', 'banana', 'apple14,689', 'banana']\n    >>> natsorted(a, alg=ns.real | ns.locale | ns.ignorecase)\n    ['apple', 'apple15', 'apple14,689', 'banana', 'banana']\n    >>> # the ns enum provides long and short forms for each option.\n    >>> ns.locale == ns.l\n    true\n    >>> # you can also customize the convenience functions, too.\n    >>> natsorted(a, alg=ns.real | ns.locale | ns.ignorecase) == realsorted(a, alg=ns.l | ns.ic)\n    true\n    >>> natsorted(a, alg=ns.real | ns.locale | ns.ignorecase) == humansorted(a, alg=ns.r | ns.ic)\n    true\n\nall of the available customizations can be found in the documentation for\n`the ns enum`_.\n\nyou can also add your own custom transformation functions with the ``key``\nargument. these can be used with ``alg`` if you wish.\n\n.. code-block:: pycon\n\n    >>> a = ['apple2.50', '2.3apple']\n    >>> natsorted(a, key=lambda x: x.replace('apple', ''), alg=ns.real)\n    ['2.3apple', 'apple2.50']\n\nsorting mixed types\n+++++++++++++++++++\n\nyou can mix and match `int`_, `float`_, and `str`_ types when you sort:\n\n.. code-block:: pycon\n\n    >>> a = ['4.5', 6, 2.0, '5', 'a']\n    >>> natsorted(a)\n    [2.0, '4.5', '5', 6, 'a']\n    >>> # sorted(a) would raise an \"unorderable types\" typeerror\n\nhandling bytes\n++++++++++++++\n\n`natsort`_ does not officially support the `bytes`_ type, but\nconvenience functions are provided that help you decode to `str`_ first:\n\n.. code-block:: pycon\n\n    >>> from natsort import as_utf8\n    >>> a = [b'a', 14.0, 'b']\n    >>> # natsorted(a) would raise a typeerror (bytes() < str())\n    >>> natsorted(a, key=as_utf8) == [14.0, b'a', 'b']\n    true\n    >>> a = [b'a56', b'a5', b'a6', b'a40']\n    >>> # natsorted(a) would return the same results as sorted(a)\n    >>> natsorted(a, key=as_utf8) == [b'a5', b'a6', b'a40', b'a56']\n    true\n\ngenerating a reusable sorting key and sorting in-place\n++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nunder the hood, `natsorted()`_ works by generating a custom sorting\nkey using `natsort_keygen()`_ and then passes that to the built-in\n`sorted()`_. you can use the `natsort_keygen()`_ function yourself to\ngenerate a custom sorting key to sort in-place using the `list.sort()`_\nmethod.\n\n.. code-block:: pycon\n\n    >>> from natsort import natsort_keygen\n    >>> natsort_key = natsort_keygen()\n    >>> a = ['2 ft 7 in', '1 ft 5 in', '10 ft 2 in', '2 ft 11 in', '7 ft 6 in']\n    >>> natsorted(a) == sorted(a, key=natsort_key)\n    true\n    >>> a.sort(key=natsort_key)\n    >>> a\n    ['1 ft 5 in', '2 ft 7 in', '2 ft 11 in', '7 ft 6 in', '10 ft 2 in']\n\nall of the algorithm customizations mentioned in the\n`further customizing natsort`_ section can also be applied to\n`natsort_keygen()`_ through the *alg* keyword option.\n\nother useful things\n+++++++++++++++++++\n\n - recursively descend into lists of lists\n - automatic unicode normalization of input data\n - `controlling the case-sensitivity`_\n - `sorting file paths correctly`_\n - `allow custom sorting keys`_\n - `accounting for units`_\n\nfaq\n---\n\nhow do i debug `natsorted()`_?\n    the best way to debug `natsorted()`_ is to generate a key using `natsort_keygen()`_\n    with the same options being passed to `natsorted()`_. one can take a look at\n    exactly what is being done with their input using this key - it is highly\n    recommended to `look at this issue describing how to debug`_ for *how* to debug,\n    and also to review the `how does natsort work?`_ page for *why* `natsort`_ is\n    doing that to your data.\n\n    if you are trying to sort custom classes and running into trouble, please\n    take a look at https://github.com/sethmmorton/natsort/issues/60. in short,\n    custom classes are not likely to be sorted correctly if one relies\n    on the behavior of ``__lt__`` and the other rich comparison operators in\n    their custom class - it is better to use a ``key`` function with\n    `natsort`_, or use the `natsort`_ key as part of your rich comparison\n    operator definition.\n\n`natsort`_ gave me results i didn't expect, and it's a terrible library!\n    did you try to debug using the above advice? if so, and you still cannot figure out\n    the error, then please `file an issue`_.\n\nhow *does* `natsort`_ work?\n    if you don't want to read `how does natsort work?`_,\n    here is a quick primer.\n\n    `natsort`_ provides a `key function`_ that can be passed to `list.sort()`_\n    or `sorted()`_ in order to modify the default sorting behavior. this key\n    is generated on-demand with the key generator `natsort_keygen()`_.\n    `natsorted()`_ is essentially a wrapper for the following code:\n\n    .. code-block:: pycon\n\n        >>> from natsort import natsort_keygen\n        >>> natsort_key = natsort_keygen()\n        >>> sorted(['1', '10', '2'], key=natsort_key)\n        ['1', '2', '10']\n\n    users can further customize `natsort`_ sorting behavior with the ``key``\n    and/or ``alg`` options (see details in the `further customizing natsort`_\n    section).\n\n    the key generated by `natsort_keygen()`_ *always* returns a `tuple`_. it\n    does so in the following way (*some details omitted for clarity*):\n\n      1. assume the input is a string, and attempt to split it into numbers and\n         non-numbers using regular expressions. numbers are then converted into\n         either `int`_ or `float`_.\n      2. if the above fails because the input is not a string, assume the input\n         is some other sequence (e.g. `list`_ or `tuple`_), and recursively\n         apply the key to each element of the sequence.\n      3. if the above fails because the input is not iterable, assume the input\n         is an `int`_ or `float`_, and just return the input in a `tuple`_.\n\n    because a `tuple`_ is always returned, a `typeerror`_ should not be common\n    unless one tries to do something odd like sort an `int`_ against a `list`_.\n\nshell script\n------------\n\n`natsort`_ comes with a shell script called `natsort`_, or can also be called\nfrom the command line with ``python -m natsort``.  check out the\n`shell script wiki documentation`_ for more details.\n\nrequirements\n------------\n\n`natsort`_ requires python 3.7 or greater.\n\noptional dependencies\n---------------------\n\nfastnumbers\n+++++++++++\n\nthe most efficient sorting can occur if you install the\n`fastnumbers`_ package\n(version >=2.0.0); it helps with the string to number conversions.\n`natsort`_ will still run (efficiently) without the package, but if you need\nto squeeze out that extra juice it is recommended you include this as a\ndependency. `natsort`_ will not require (or check) that\n`fastnumbers`_ is installed at installation.\n\npyicu\n+++++\n\nit is recommended that you install `pyicu`_ if you wish to sort in a\nlocale-dependent manner, see this page on `locale issues`_ for an explanation why.\n\ninstallation\n------------\n\nuse ``pip``!\n\n.. code-block:: console\n\n    $ pip install natsort\n\nif you want to install the `optional dependencies`_, you can use the\n`\"extras\" notation`_ at installation time to install those dependencies as\nwell - use ``fast`` for `fastnumbers`_ and ``icu`` for `pyicu`_.\n\n.. code-block:: console\n\n    # install both optional dependencies.\n    $ pip install natsort[fast,icu]\n    # install just fastnumbers\n    $ pip install natsort[fast]\n\nhow to run tests\n----------------\n\nplease note that `natsort`_ is not set-up to support ``python setup.py test``.\n\nthe recommended way to run tests is with `tox`_. after installing ``tox``,\nrunning tests is as simple as executing the following in the `natsort`_ directory:\n\n.. code-block:: console\n\n    $ tox\n\n``tox`` will create virtual a virtual environment for your tests and install\nall the needed testing requirements for you.  you can specify a particular\npython version with the ``-e`` flag, e.g. ``tox -e py36``. static analysis\nis done with ``tox -e flake8``. you can see all available testing environments\nwith ``tox --listenvs``.\n\nhow to build documentation\n--------------------------\n\nif you want to build the documentation for `natsort`_, it is recommended to\nuse ``tox``:\n\n.. code-block:: console\n\n    $ tox -e docs\n\nthis will place the documentation in ``build/sphinx/html``.\n\ndropped deprecated apis\n-----------------------\n\nin `natsort`_ version 6.0.0, the following apis and functions were removed\n\n - ``number_type`` keyword argument (deprecated since 3.4.0)\n - ``signed`` keyword argument (deprecated since 3.4.0)\n - ``exp`` keyword argument (deprecated since 3.4.0)\n - ``as_path`` keyword argument (deprecated since 3.4.0)\n - ``py3_safe`` keyword argument (deprecated since 3.4.0)\n - ``ns.typesafe`` (deprecated since version 5.0.0)\n - ``ns.digit`` (deprecated since version 5.0.0)\n - ``ns.version`` (deprecated since version 5.0.0)\n - ``versorted()`` (discouraged since version 4.0.0,\n   officially deprecated since version 5.5.0)\n - ``index_versorted()`` (discouraged since version 4.0.0,\n   officially deprecated since version 5.5.0)\n\nin general, if you want to determine if you are using deprecated apis you\ncan run your code with the following flag\n\n.. code-block:: console\n\n    $ python -wdefault::deprecationwarning my-code.py\n\nby default `deprecationwarnings`_ are not shown, but this will cause them\nto be shown. alternatively, you can just set the environment variable\n``pythonwarnings`` to \"default::deprecationwarning\" and then run your code.\n\nauthor\n------\n\nseth m. morton\n\nhistory\n-------\n\nplease visit the changelog `on github`_.\n\n.. _natsort: https://natsort.readthedocs.io/en/stable/index.html\n.. _natsorted(): https://natsort.readthedocs.io/en/stable/api.html#natsort.natsorted\n.. _natsort_keygen(): https://natsort.readthedocs.io/en/stable/api.html#natsort.natsort_keygen\n.. _realsorted(): https://natsort.readthedocs.io/en/stable/api.html#natsort.realsorted\n.. _humansorted(): https://natsort.readthedocs.io/en/stable/api.html#natsort.humansorted\n.. _os_sorted(): https://natsort.readthedocs.io/en/stable/api.html#natsort.os_sorted\n.. _the ns enum: https://natsort.readthedocs.io/en/stable/api.html#natsort.ns\n.. _fastnumbers: https://github.com/sethmmorton/fastnumbers\n.. _sorted(): https://docs.python.org/3/library/functions.html#sorted\n.. _list.sort(): https://docs.python.org/3/library/stdtypes.html#list.sort\n.. _key function: https://docs.python.org/3/howto/sorting.html#key-functions\n.. _locale: https://docs.python.org/3/library/locale.html\n.. _int: https://docs.python.org/3/library/functions.html#int\n.. _float: https://docs.python.org/3/library/functions.html#float\n.. _str: https://docs.python.org/3/library/stdtypes.html#str\n.. _bytes: https://docs.python.org/3/library/stdtypes.html#bytes\n.. _list: https://docs.python.org/3/library/stdtypes.html#list\n.. _tuple: https://docs.python.org/3/library/stdtypes.html#tuple\n.. _typeerror: https://docs.python.org/3/library/exceptions.html#typeerror\n.. _deprecationwarnings: https://docs.python.org/3/library/exceptions.html#deprecationwarning\n.. _\"extras\" notation: https://packaging.python.org/tutorials/installing-packages/#installing-setuptools-extras\n.. _pyicu: https://pypi.org/project/pyicu\n.. _tox: https://tox.readthedocs.io/en/latest/\n.. _examples and recipes: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes\n.. _how does natsort work?: https://github.com/sethmmorton/natsort/wiki/how-does-natsort-work%3f\n.. _api: https://natsort.readthedocs.io/en/stable/api.html\n.. _on github: https://github.com/sethmmorton/natsort/blob/main/changelog.md\n.. _file an issue: https://github.com/sethmmorton/natsort/issues/new\n.. _look at this issue describing how to debug: https://github.com/sethmmorton/natsort/issues/13#issuecomment-50422375\n.. _controlling the case-sensitivity: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes#controlling-case-when-sorting\n.. _sorting file paths correctly: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes#sort-os-generated-paths\n.. _allow custom sorting keys: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes#using-a-custom-sorting-key\n.. _accounting for units: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes#accounting-for-units-when-sorting\n.. _these version sorting examples: https://github.com/sethmmorton/natsort/wiki/examples-and-recipes#sorting-more-expressive-versioning-schemes\n.. _locale issues: https://github.com/sethmmorton/natsort/wiki/possible-issues-with-natsort.humansorted-or-ns.locale\n.. _shell script wiki documentation: https://github.com/sethmmorton/natsort/wiki/shell-script\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "natsort",
  "package_url": "https://pypi.org/project/natsort/",
  "project_url": "https://pypi.org/project/natsort/",
  "project_urls": {
    "Homepage": "https://github.com/SethMMorton/natsort"
  },
  "release_url": "https://pypi.org/project/natsort/8.4.0/",
  "requires_dist": [
    "fastnumbers (>=2.0.0) ; extra == 'fast'",
    "PyICU (>=1.0.0) ; extra == 'icu'"
  ],
  "requires_python": ">=3.7",
  "summary": "simple yet flexible natural sorting in python.",
  "version": "8.4.0",
  "releases": [],
  "developers": [
    "drtuba78@gmail.com",
    "seth_m"
  ],
  "kwds": "natsort _natsort_keygen _natsort natsort_keygen natsort_key",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_natsort",
  "homepage": "https://github.com/sethmmorton/natsort",
  "release_count": 59,
  "dependency_ids": [
    "pypi_fastnumbers",
    "pypi_pyicu"
  ]
}
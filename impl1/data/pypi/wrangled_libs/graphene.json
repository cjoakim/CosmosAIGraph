{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "|graphene logo| `graphene <http://graphene-python.org>`__ |build status| |pypi version| |coverage status|\n=========================================================================================================\n\n`\ufffd\ufffd\ufffd\ufffd join the community on\nslack <https://join.slack.com/t/graphenetools/shared_invite/enqtote2mdq1ntg4mdm1lta4nzk0mgu0ngewnzuxzgnjndq4zjawndjjmjy0oge1zdgxztg4yjm2ztc4mje2ztazzje2zthhztqzztkymmm>`__\n\n**we are looking for contributors**! please check the\n`roadmap <https://github.com/graphql-python/graphene/blob/master/roadmap.md>`__\nto see how you can help \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\nintroduction\n------------\n\n`graphene <http://graphene-python.org>`__ is an opinionated python\nlibrary for building graphql schemas/types fast and easily.\n\n-  **easy to use:** graphene helps you use graphql in python without\n   effort.\n-  **relay:** graphene has builtin support for relay.\n-  **data agnostic:** graphene supports any kind of data source: sql\n   (django, sqlalchemy), nosql, custom python objects, etc. we believe\n   that by providing a complete api you could plug graphene anywhere\n   your data lives and make your data available through graphql.\n\nintegrations\n------------\n\ngraphene has multiple integrations with different frameworks:\n\n+-------------------+-------------------------------------------------+\n| integration       | package                                         |\n+===================+=================================================+\n| django            | `graphene-django <https:/                       |\n|                   | /github.com/graphql-python/graphene-django/>`__ |\n+-------------------+-------------------------------------------------+\n| sqlalchemy        | `graphene-sqlalchemy <https://git               |\n|                   | hub.com/graphql-python/graphene-sqlalchemy/>`__ |\n+-------------------+-------------------------------------------------+\n\nalso, graphene is fully compatible with the graphql spec, working\nseamlessly with all graphql clients, such as\n`relay <https://github.com/facebook/relay>`__,\n`apollo <https://github.com/apollographql/apollo-client>`__ and\n`gql <https://github.com/graphql-python/gql>`__.\n\ninstallation\n------------\n\nto install `graphene`, just run this command in your shell\n\n.. code:: bash\n\n   pip install \"graphene>=3.0\"\n\nexamples\n--------\n\nhere is one example for you to get started:\n\n.. code:: python\n\n   import graphene\n\n   class query(graphene.objecttype):\n       hello = graphene.string(description='a typical hello world')\n\n       def resolve_hello(self, info):\n           return 'world'\n\n   schema = graphene.schema(query=query)\n\nthen querying ``graphene.schema`` is as simple as:\n\n.. code:: python\n\n   query = '''\n       query sayhello {\n         hello\n       }\n   '''\n   result = schema.execute(query)\n\nif you want to learn even more, you can also check the following\n`examples <examples/>`__:\n\n-  **basic schema**: `starwars example <examples/starwars>`__\n-  **relay schema**: `starwars relay\n   example <examples/starwars_relay>`__\n\ndocumentation\n-------------\n\ndocumentation and links to additional resources are available at\nhttps://docs.graphene-python.org/en/latest/\n\ncontributing\n------------\n\nafter cloning this repo, create a\n`virtualenv <https://virtualenv.pypa.io/en/stable/>`__ and ensure\ndependencies are installed by running:\n\n.. code:: sh\n\n   virtualenv venv\n   source venv/bin/activate\n   pip install -e \".[test]\"\n\nwell-written tests and maintaining good test coverage is important to\nthis project. while developing, run new and existing tests with:\n\n.. code:: sh\n\n   py.test graphene/relay/tests/test_node.py # single file\n   py.test graphene/relay # all tests in directory\n\nadd the ``-s`` flag if you have introduced breakpoints into the code for\ndebugging. add the ``-v`` (\ufffd\ufffd\ufffdverbose\ufffd\ufffd\ufffd) flag to get more detailed test\noutput. for even more detailed output, use ``-vv``. check out the\n`pytest documentation <https://docs.pytest.org/en/latest/>`__ for more\noptions and test running controls.\n\nyou can also run the benchmarks with:\n\n.. code:: sh\n\n   py.test graphene --benchmark-only\n\ngraphene supports several versions of python. to make sure that changes\ndo not break compatibility with any of those versions, we use ``tox`` to\ncreate virtualenvs for each python version and run tests with that\nversion. to run against all python versions defined in the ``tox.ini``\nconfig file, just run:\n\n.. code:: sh\n\n   tox\n\nif you wish to run against a specific version defined in the ``tox.ini``\nfile:\n\n.. code:: sh\n\n   tox -e py36\n\ntox can only use whatever versions of python are installed on your\nsystem. when you create a pull request, travis will also be running the\nsame tests and report the results, so there is no need for potential\ncontributors to try to install every single version of python on their\nown system ahead of time. we appreciate opening issues and pull requests\nto make graphene even more stable & useful!\n\nbuilding documentation\n~~~~~~~~~~~~~~~~~~~~~~\n\nthe documentation is generated using the excellent\n`sphinx <http://www.sphinx-doc.org/>`__ and a custom theme.\n\nan html version of the documentation is produced by running:\n\n.. code:: sh\n\n   make docs\n\n.. |graphene logo| image:: http://graphene-python.org/favicon.png\n.. |build status| image:: https://travis-ci.org/graphql-python/graphene.svg?branch=master\n   :target: https://travis-ci.org/graphql-python/graphene\n.. |pypi version| image:: https://badge.fury.io/py/graphene.svg\n   :target: https://badge.fury.io/py/graphene\n.. |coverage status| image:: https://coveralls.io/repos/graphql-python/graphene/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/graphql-python/graphene?branch=master\n",
  "docs_url": null,
  "keywords": "api graphql protocol rest relay graphene",
  "license": "mit",
  "name": "graphene",
  "package_url": "https://pypi.org/project/graphene/",
  "project_url": "https://pypi.org/project/graphene/",
  "project_urls": {
    "Homepage": "https://github.com/graphql-python/graphene"
  },
  "release_url": "https://pypi.org/project/graphene/3.3/",
  "requires_dist": [
    "graphql-core (<3.3,>=3.1)",
    "graphql-relay (<3.3,>=3.1)",
    "aniso8601 (<10,>=8)",
    "black (==22.3.0) ; extra == 'dev'",
    "flake8 (<5,>=4) ; extra == 'dev'",
    "pytest (<7,>=6) ; extra == 'dev'",
    "pytest-benchmark (<4,>=3.4) ; extra == 'dev'",
    "pytest-cov (<4,>=3) ; extra == 'dev'",
    "pytest-mock (<4,>=3) ; extra == 'dev'",
    "pytest-asyncio (<2,>=0.16) ; extra == 'dev'",
    "snapshottest (<1,>=0.6) ; extra == 'dev'",
    "coveralls (<4,>=3.3) ; extra == 'dev'",
    "mock (<5,>=4) ; extra == 'dev'",
    "pytz (==2022.1) ; extra == 'dev'",
    "iso8601 (<2,>=1) ; extra == 'dev'",
    "pytest (<7,>=6) ; extra == 'test'",
    "pytest-benchmark (<4,>=3.4) ; extra == 'test'",
    "pytest-cov (<4,>=3) ; extra == 'test'",
    "pytest-mock (<4,>=3) ; extra == 'test'",
    "pytest-asyncio (<2,>=0.16) ; extra == 'test'",
    "snapshottest (<1,>=0.6) ; extra == 'test'",
    "coveralls (<4,>=3.3) ; extra == 'test'",
    "mock (<5,>=4) ; extra == 'test'",
    "pytz (==2022.1) ; extra == 'test'",
    "iso8601 (<2,>=1) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "graphql framework for python",
  "version": "3.3",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "graphene graphenetools graphql apollographql starwars_relay",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_graphene",
  "homepage": "https://github.com/graphql-python/graphene",
  "release_count": 98,
  "dependency_ids": [
    "pypi_aniso8601",
    "pypi_black",
    "pypi_coveralls",
    "pypi_flake8",
    "pypi_graphql_core",
    "pypi_graphql_relay",
    "pypi_iso8601",
    "pypi_mock",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytz",
    "pypi_snapshottest"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# arxiv.py\n[![pypi](https://img.shields.io/pypi/v/arxiv)](https://pypi.org/project/arxiv/) ![pypi - python version](https://img.shields.io/pypi/pyversions/arxiv) [![github workflow status (branch)](https://img.shields.io/github/actions/workflow/status/lukasschwab/arxiv.py/python-package.yml?branch=master)](https://github.com/lukasschwab/arxiv.py/actions?query=branch%3amaster) [![full package documentation](https://img.shields.io/badge/docs-hosted-brightgreen)](https://lukasschwab.me/arxiv.py/index.html)\n\npython wrapper for [the arxiv api](https://arxiv.org/help/api/index).\n\n[arxiv](https://arxiv.org/) is a project by the cornell university library that provides open access to 1,000,000+ articles in physics, mathematics, computer science, quantitative biology, quantitative finance, and statistics.\n\n## usage\n\n### installation\n\n```bash\n$ pip install arxiv\n```\n\nin your python script, include the line\n\n```python\nimport arxiv\n```\n\n### examples\n\n#### fetching results\n\n```python\nimport arxiv\n\n# construct the default api client.\nclient = arxiv.client()\n\n# search for the 10 most recent articles matching the keyword \"quantum.\"\nsearch = arxiv.search(\n  query = \"quantum\",\n  max_results = 10,\n  sort_by = arxiv.sortcriterion.submitteddate\n)\n\nresults = client.results(search)\n\n# `results` is a generator; you can iterate over its elements one by one...\nfor r in client.results(search):\n  print(r.title)\n# ...or exhaust it into a list. careful: this is slow for large results sets.\nall_results = list(results)\nprint([r.title for r in all_results])\n\n# for advanced query syntax documentation, see the arxiv api user manual:\n# https://arxiv.org/help/api/user-manual#query_details\nsearch = arxiv.search(query = \"au:del_maestro and ti:checkerboard\")\nfirst_result = next(client.results(search))\nprint(first_result)\n\n# search for the paper with id \"1605.08386v1\"\nsearch_by_id = arxiv.search(id_list=[\"1605.08386v1\"])\n# reuse client to fetch the paper, then print its title.\nfirst_result = next(client.results(search))\nprint(first_result.title)\n```\n\n#### downloading papers\n\nto download a pdf of the paper with id \"1605.08386v1,\" run a `search` and then use `result.download_pdf()`:\n\n```python\nimport arxiv\n\npaper = next(arxiv.client().results(arxiv.search(id_list=[\"1605.08386v1\"])))\n# download the pdf to the pwd with a default filename.\npaper.download_pdf()\n# download the pdf to the pwd with a custom filename.\npaper.download_pdf(filename=\"downloaded-paper.pdf\")\n# download the pdf to a specified directory with a custom filename.\npaper.download_pdf(dirpath=\"./mydir\", filename=\"downloaded-paper.pdf\")\n```\n\nthe same interface is available for downloading .tar.gz files of the paper source:\n\n```python\nimport arxiv\n\npaper = next(arxiv.client().results(arxiv.search(id_list=[\"1605.08386v1\"])))\n# download the archive to the pwd with a default filename.\npaper.download_source()\n# download the archive to the pwd with a custom filename.\npaper.download_source(filename=\"downloaded-paper.tar.gz\")\n# download the archive to a specified directory with a custom filename.\npaper.download_source(dirpath=\"./mydir\", filename=\"downloaded-paper.tar.gz\")\n```\n\n#### fetching results with a custom client\n\n```python\nimport arxiv\n\nbig_slow_client = arxiv.client(\n  page_size = 1000,\n  delay_seconds = 10.0,\n  num_retries = 5\n)\n\n# prints 1000 titles before needing to make another request.\nfor result in big_slow_client.results(arxiv.search(query=\"quantum\")):\n  print(result.title)\n```\n\n#### logging\n\nto inspect this package's network behavior and api logic, configure a `debug`-level logger.\n\n```pycon\n>>> import logging, arxiv\n>>> logging.basicconfig(level=logging.debug)\n>>> client = arxiv.client()\n>>> paper = next(client.results(arxiv.search(id_list=[\"1605.08386v1\"])))\ninfo:arxiv.arxiv:requesting 100 results at offset 0\ninfo:arxiv.arxiv:requesting page (first: false, try: 0): https://export.arxiv.org/api/query?search_query=&id_list=1605.08386v1&sortby=relevance&sortorder=descending&start=0&max_results=100\ndebug:urllib3.connectionpool:starting new https connection (1): export.arxiv.org:443\ndebug:urllib3.connectionpool:https://export.arxiv.org:443 \"get /api/query?search_query=&id_list=1605.08386v1&sortby=relevance&sortorder=descending&start=0&max_results=100&user-agent=arxiv.py%2f1.4.8 http/1.1\" 200 979\n```\n\n## types \n\n### client\n\na `client` specifies a reusable strategy for fetching results from arxiv's api. for most use cases the default client should suffice.\n\nclients configurations specify pagination and retry logic. *reusing* a client allows successive api calls to use the same connection pool and ensures they abide by the rate limit you set.\n\n### search\n\na `search` specifies a search of arxiv's database. use `client.results` to get a generator yielding `result`s.\n\n### result\n\nthe `result` objects yielded by `client.results` include metadata about each paper and helper methods for downloading their content.\n\nthe meaning of the underlying raw data is documented in the [arxiv api user manual: details of atom results returned](https://arxiv.org/help/api/user-manual#_details_of_atom_results_returned).\n\n`result` also exposes helper methods for downloading papers: `result.download_pdf` and `result.download_source`.\n",
  "docs_url": null,
  "keywords": "arxiv api wrapper academic journals papers",
  "license": "mit",
  "name": "arxiv",
  "package_url": "https://pypi.org/project/arxiv/",
  "project_url": "https://pypi.org/project/arxiv/",
  "project_urls": {
    "Homepage": "https://github.com/lukasschwab/arxiv.py"
  },
  "release_url": "https://pypi.org/project/arxiv/2.1.0/",
  "requires_dist": [
    "feedparser ==6.0.10",
    "requests ==2.31.0"
  ],
  "requires_python": ">=3.7",
  "summary": "python wrapper for the arxiv api: https://arxiv.org/help/api/",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "lukas.schwab@gmail.com",
    "lukas_schwab"
  ],
  "kwds": "arxiv pyversions documentation pycon py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_arxiv",
  "homepage": "https://github.com/lukasschwab/arxiv.py",
  "release_count": 33,
  "dependency_ids": [
    "pypi_feedparser",
    "pypi_requests"
  ]
}
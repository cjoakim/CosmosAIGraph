{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# mr. proper\n\n[![build status](https://travis-ci.org/best-doctor/mr_proper.svg?branch=master)](https://travis-ci.org/best-doctor/mr_proper)\n[![pypi version](https://badge.fury.io/py/mr-proper.svg)](https://badge.fury.io/py/mr-proper)\n[![maintainability](https://api.codeclimate.com/v1/badges/4b2234d95d5c4944e2e6/maintainability)](https://codeclimate.com/github/best-doctor/mr_proper/maintainability)\n[![test coverage](https://api.codeclimate.com/v1/badges/4b2234d95d5c4944e2e6/test_coverage)](https://codeclimate.com/github/best-doctor/mr_proper/test_coverage)\n\nstatic python code analyzer, that tries to check if functions in code are\n[pure](https://en.wikipedia.org/wiki/pure_function) or not and why.\n\n![have fun with mr clean](https://raw.githubusercontent.com/best-doctor/mr_proper/master/docs_img/mr_clean_sponge.jpg)\n\n*disclaimer*: this library is very experimental and has a lot of edge cases.\nfunctions that mr. proper marks as pure can be not pure, but they are\nusually cleaner than other functions.\n\n## installation\n\n```bash\npip install mr_proper\n```\n\n## what mr. proper check\n\n1. that function has no blacklisted calls (like `print`)\n   and blacklisted attributes access (like `smth.count`);\n1. that function not uses global objects (only local vars and function arguments);\n1. that function has al least one return;\n1. that function not mutates it's arguments;\n1. that function has no local imports;\n1. that function has no arguments of forbidden types (like orm objects);\n1. that function not uses `self`, `class` or `super`;\n1. that function has calls of only pure functions.\n\nthis list is not enought to say that function is pure and some points\nare quite controversial, but it's a nice start.\n\n## example\n\nconsole usage:\n\n```python\n    # test.py\n    def add_one(n: int) -> int:\n        return n + 1\n\n    def print_amount_of_users(users_qs: queryset) -> none:\n        print(f'current amount of users is {users_qs.count()}')\n```\n\n```bash\n$ mr_propper test.py\nadd_one is pure!\nprint_amount_of_users is not pure because of:\n    it uses forbidden argument types (queryset)\n    it calls not pure functions (print)\n    it has no return\n```\n\nusage inside python code sample:\n\n```jupyterpython\n>>> import ast\n>>> from mr_propper.utils import is_function_pure\n>>> funcdef = ast.parse('''\n    def add_one(n: int) -> int:\n        return n + 1\n''').body[0]\n>>> is_function_pure(funcdef)\ntrue\n>>> is_function_pure(funcdef, with_errors=true)\n(true, [])\n```\n\n## parameters\n\ncli interface:\n\n- `filepath`: path to .py file to check (directories are not supported for now);\n- `--recursive`: require inner calls to be pure for function pureness.\n\n## code prerequisites\n\n1. python 3.7+;\n1. functions are fully type-annotated;\n1. no dynamic calls (like `getattr(sender, 'send_' + message_type)(message)`).\n\n## contributing\n\nwe would love you to contribute to our project. it's simple:\n\n1. create an issue with bug you found or proposal you have.\n   wait for approve from maintainer.\n1. create a pull request. make sure all checks are green.\n1. fix review comments if any.\n1. be awesome.\n\nhere are useful tips:\n\n- you can run all checks and tests with `make check`.\n  please do it before travisci does.\n- we use [bestdoctor python styleguide](https://github.com/best-doctor/guides/blob/master/guides/en/python_styleguide.md).\n- we respect [django coc](https://www.djangoproject.com/conduct/).\n  make soft, not bullshit.\n\n\n",
  "docs_url": null,
  "keywords": "static-analyzer,pure-function",
  "license": "mit",
  "name": "mr-proper",
  "package_url": "https://pypi.org/project/mr-proper/",
  "project_url": "https://pypi.org/project/mr-proper/",
  "project_urls": {
    "Homepage": "https://github.com/best-doctor/mr_proper"
  },
  "release_url": "https://pypi.org/project/mr-proper/0.0.7/",
  "requires_dist": [
    "click (>=7.1.2)",
    "setuptools",
    "stdlib-list (>=0.5.0)",
    "typing-extensions (>=3.7.4.3) ; python_version < \"3.8\""
  ],
  "requires_python": "",
  "summary": "static python code analyzer, that tries to check if functions in code are pure or not and why.",
  "version": "0.0.7",
  "releases": [],
  "developers": [
    "ilya_lebedev",
    "melevir@gmail.com"
  ],
  "kwds": "analyzer maintainability tests test_coverage coverage",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_mr_proper",
  "homepage": "https://github.com/best-doctor/mr_proper",
  "release_count": 7,
  "dependency_ids": [
    "pypi_click",
    "pypi_setuptools",
    "pypi_stdlib_list",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# project-oriented workflow in python\n\nfinding project directories in python (data science) projects.\n\nthis library aims to provide both\nthe programmatic functionality from the r [`rprojroot`][rprojroot] package\nand the interactive functionality from the r [`here`][here] package.\n\n## motivation\n\n**problem**: i have a project that has a specific folder structure,\nfor example, one mentioned in [noble 2009][noble2009] or something similar to [this project template][project-template],\nand i want to be able to:\n\n1. run my python scripts without having to specify a series of `../` to get to the `data` folder.\n2. `cd` into the directory of my python script instead of calling it from the root project directory and specify all the folders to the script.\n3. reference datasets from a root directory when using a jupyter notebook because everytime i use a jupyter notebook,\n  the working directory changes to the location of the notebook, not where i launched the notebook server.\n\n**solution**: `pyprojroot` finds the root working directory for your project as a `pathlib.path` object.\nyou can now use the `here` function to pass in a relative path from the project root directory\n(no matter what working directory you are in the project),\nand you will get a full path to the specified file.\nthat is, in a jupyter notebook,\nyou can write something like `pandas.read_csv(here('data/my_data.csv'))`\ninstead of `pandas.read_csv('../data/my_data.csv')`.\nthis allows you to restructure the files in your project without having to worry about changing file paths.\n\ngreat for reading and writing datasets!\n\nfurther reading:\n\n* [project-oriented workflows](https://www.tidyverse.org/articles/2017/12/workflow-vs-script/)\n* [stop the working directory insanity](https://gist.github.com/jennybc/362f52446fe1ebc4c49f)\n* [ode to the here package](https://github.com/jennybc/here_here)\n\n## installation\n\n### pip\n\n```bash\npython -m pip install pyprojroot\n```\n\n### conda\n\nhttps://anaconda.org/conda-forge/pyprojroot\n\n```bash\nconda install -c conda-forge pyprojroot\n```\n\n## example usage\n\n### interactive\n\nthis is based on the r [`here`][here] library.\n\n```python\nfrom pyprojroot.here import here\n\nhere()\n```\n\n### programmatic\n\nthis based on the r [`rprojroot`][rprojroot] library.\n\n```python\nimport pyprojroot\n\nbase_path = pyprojroot.find_root(pyprojroot.has_dir(\".git\"))\n```\n\n## demonstration\n\nload the packages\n\n```\nin [1]: from pyprojroot.here import here\nin [2]: import pandas as pd\n```\n\nthe current working directory is the \"notebooks\" folder\n\n```\nin [3]: !pwd\n/home/dchen/git/hub/scipy-2019-pandas/notebooks\n```\n\nin the notebooks folder, i have all my notebooks\n\n```\nin [4]: !ls\n01-intro.ipynb  02-tidy.ipynb  03-apply.ipynb  04-plots.ipynb  05-model.ipynb  untitled.ipynb\n```\n\nif i wanted to access data in my notebooks i'd have to use `../data`\n\n```\nin [5]: !ls ../data\nbillboard.csv  country_timeseries.csv  gapminder.tsv  pew.csv  table1.csv  table2.csv  table3.csv  table4a.csv  table4b.csv  weather.csv\n```\n\nhowever, with there `here` function, i can access my data all from the project root.\nthis means if i move the notebook to another folder or subfolder i don't have to change the path to my data.\nonly if i move the data to another folder would i need to change the path in my notebook (or script)\n\n```\nin [6]: pd.read_csv(here('data/gapminder.tsv'), sep='\\t').head()\nout[6]:\n       country continent  year  lifeexp       pop   gdppercap\n0  afghanistan      asia  1952   28.801   8425333  779.445314\n1  afghanistan      asia  1957   30.332   9240934  820.853030\n2  afghanistan      asia  1962   31.997  10267083  853.100710\n3  afghanistan      asia  1967   34.020  11537966  836.197138\n4  afghanistan      asia  1972   36.088  13079460  739.981106\n```\n\nby the way, you get a `pathlib.path` object path back!\n\n```\nin [7]: here('data/gapminder.tsv')\nout[7]: posixpath('/home/dchen/git/hub/scipy-2019-pandas/data/gapminder.tsv')\n```\n\n[here]: https://github.com/r-lib/here\n[rprojroot]: https://github.com/r-lib/rprojroot\n[noble2009]: https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424\n[project-template]: https://chendaniely.github.io/sdal/2017/05/30/project_templates/\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pyprojroot",
  "package_url": "https://pypi.org/project/pyprojroot/",
  "project_url": "https://pypi.org/project/pyprojroot/",
  "project_urls": {
    "Bug Tracker": "https://github.com/chendaniely/pyprojroot/issues",
    "Homepage": "https://github.com/chendaniely/pyprojroot"
  },
  "release_url": "https://pypi.org/project/pyprojroot/0.3.0/",
  "requires_dist": [
    "typing-extensions"
  ],
  "requires_python": ">=3.7",
  "summary": "project-oriented workflow in python",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "chendaniely@gmail.com"
  ],
  "kwds": "pathlib base_path directory directories subfolder",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyprojroot",
  "homepage": "",
  "release_count": 4,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
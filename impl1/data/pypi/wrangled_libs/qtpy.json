{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: macos x",
    "environment :: win32 (ms windows)",
    "environment :: x11 applications :: qt",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: user interfaces",
    "topic :: software development :: widget sets"
  ],
  "description": "# qtpy: abstraction layer for pyqt5/pyside2/pyqt6/pyside6\r\n\r\n[![license](https://img.shields.io/pypi/l/qtpy.svg)](./license)\r\n[![pypi version](https://img.shields.io/pypi/v/qtpy.svg)](https://pypi.org/project/qtpy/)\r\n[![conda version](https://img.shields.io/conda/vn/conda-forge/qtpy.svg)](https://www.anaconda.com/download/)\r\n[![download count](https://img.shields.io/conda/dn/conda-forge/qtpy.svg)](https://www.anaconda.com/download/)\r\n[![opencollective backers](https://opencollective.com/spyder/backers/badge.svg?color=blue)](#backers)\r\n[![join the chat at https://gitter.im/spyder-ide/public](https://badges.gitter.im/spyder-ide/spyder.svg)](https://gitter.im/spyder-ide/public)<br>\r\n[![pypi status](https://img.shields.io/pypi/status/qtpy.svg)](https://github.com/spyder-ide/qtpy)\r\n[![github build status](https://github.com/spyder-ide/qtpy/workflows/tests/badge.svg)](https://github.com/spyder-ide/qtpy/actions)\r\n[![coverage status](https://coveralls.io/repos/github/spyder-ide/qtpy/badge.svg?branch=master)](https://coveralls.io/github/spyder-ide/qtpy?branch=master)\r\n\r\n*copyright \u00a9 2009\u2013 the spyder development team*\r\n\r\n\r\n## description\r\n\r\n**qtpy** is a small abstraction layer that lets you\r\nwrite applications using a single api call to either pyqt or pyside.\r\n\r\nit provides support for pyqt5, pyside2, pyqt6 and pyside6 using the qt5 layout\r\n(where the qtgui module has been split into qtgui and qtwidgets).\r\n\r\nbasically, you can write your code as if you were using pyqt or pyside directly,\r\nbut import qt modules from `qtpy` instead of `pyqt5`, `pyside2`, `pyqt6` or `pyside6`.\r\n\r\naccordingly, when porting code between different qt bindings (pyqt vs pyside) or qt versions (qt5 vs qt6), qtpy makes this much more painless, and allows you to easily and incrementally transition between them. qtpy handles incompatibilities and differences between bindings or qt versions for you while keeping your project running, so you can focus more on your own code and less on keeping track of supporting every qt version and binding. furthermore, when you do want to upgrade or support new bindings, it allows you to update your project module by module rather than all at once.  you can check out examples of this approach in projects using qtpy, like [git-cola](https://github.com/git-cola/git-cola/issues/232).\r\n\r\n### attribution and acknowledgments\r\n\r\nthis project is based on the [pyqode.qt](https://github.com/pyqode/pyqode.qt)\r\nproject and the [spyderlib.qt](https://github.com/spyder-ide/spyder/tree/2.3/spyderlib/qt)\r\nmodule from the [spyder](https://github.com/spyder-ide/spyder) project, and\r\nalso includes contributions adapted from\r\n[qt-helpers](https://github.com/glue-viz/qt-helpers), developed as part of the\r\n[glue](http://glueviz.org) project.\r\n\r\nunlike `pyqode.qt` this is not a namespace package, so it is not tied\r\nto a particular project or namespace.\r\n\r\n\r\n### license\r\n\r\nthis project is released under the [mit license](license.txt).\r\n\r\n\r\n### requirements\r\n\r\nyou need pyqt5, pyside2, pyqt6 or pyside6 installed in your system to make use\r\nof qtpy. if several of these packages are found, pyqt5 is used by\r\ndefault unless you set the `qt_api` environment variable.\r\n\r\n`qt_api` can take the following values:\r\n\r\n* `pyqt5` (to use pyqt5).\r\n* `pyside2` (to use pyside2).\r\n* `pyqt6` (to use pyqt6).\r\n* `pyside6` (to use pyside6).\r\n\r\n\r\n### module aliases and constants\r\n\r\n* `qtcore.pyqtsignal`, `qtcore.pyqtslot` and `qtcore.pyqtproperty` (available on pyqt5/6) are instead exposed as `qtcore.signal`, `qtcore.slot` and `qtcore.property`, respectively, following the qt5 module layout.\r\n\r\n* the qt version being used can be checked with `qtcore.__version__` (instead of `qtcore.qt_version_str`) as well as from `qtpy.qt_version`.\r\n\r\n* for pyqt6 enums, unscoped enum access was added by promoting the enums of the `qtcore`, `qtgui`, `qttest` and `qtwidgets` modules.\r\n\r\n* compatibility is added between the `qtgui` and `qtopengl` modules for the `qopengl*` classes.\r\n\r\n* to check the current binding version, you can use `qtpy.pyside_version` for pyside2/6 and `qtpy.pyqt_version` for pyqt5/6. if the respective binding is not being used, the value of its attribute will be `none`.\r\n\r\n* to check the current selected binding, you can use `qtpy.api_name`\r\n\r\n* there are boolean values to check if qt5/6, pyqt5/6 or pyside2/6 are being used: `qtpy.qt5`, `qtpy.qt6`, `qtpy.pyqt5`, `qtpy.pyqt6`, `qtpy.pyside2` and `qtpy.pyside6`. `true` if currently being used, `false` otherwise.\r\n\r\n#### compat module\r\n\r\nin the `qtpy.compat` module, you can find wrappers for `qfiledialog` static methods and sip/shiboken functions, such as:\r\n\r\n* `qfiledialog.getexistingdirectory` wrapped with `qtpy.compat.getexistingdirectory`\r\n\r\n* `qfiledialog.getopenfilename` wrapped with `qtpy.compat.getopenfilename`\r\n\r\n* `qfiledialog.getopenfilenames` wrapped with `qtpy.compat.getopenfilenames`\r\n\r\n* `qfiledialog.getsavefilename` wrapped with `qtpy.compat.getsavefilename`\r\n\r\n* `sip.isdeleted` and `shiboken.isvalid` wrapped with `qtpy.compat.isalive`\r\n\r\n\r\n### installation\r\n\r\n```bash\r\npip install qtpy\r\n```\r\n\r\nor\r\n\r\n```bash\r\nconda install qtpy\r\n```\r\n\r\n\r\n### type checker integration\r\n\r\ntype checkers have no knowledge of installed packages, so these tools require\r\nadditional configuration.\r\n\r\na command line interface (cli) is offered to help with usage of qtpy (to get mypy\r\nand pyright/pylance args/configurations).\r\n\r\n#### mypy\r\n\r\nthe `mypy-args` command helps you to generate command line arguments for mypy\r\nthat will enable it to process the qtpy source files with the same api\r\nas qtpy itself would have selected.\r\n\r\nif you run\r\n\r\n```bash\r\nqtpy mypy-args\r\n```\r\n\r\nqtpy will output a string of mypy cli args that will reflect the currently\r\nselected qt api.\r\nfor example, in an environment where pyqt5 is installed and selected\r\n(or the default fallback, if no binding can be found in the environment),\r\nthis would output the following:\r\n\r\n```text\r\n--always-true=pyqt5 --always-false=pyside2 --always-false=pyqt6 --always-false=pyside6\r\n```\r\n\r\nusing bash or a similar shell, this can be injected into\r\nthe mypy command line invocation as follows:\r\n\r\n```bash\r\nmypy --package mypackage $(qtpy mypy-args)\r\n```\r\n\r\n#### pyright/pylance\r\n\r\nin the case of pyright, instead of runtime arguments, it is required to create a\r\nconfig file for the project, called `pyrightconfig.json` or a `pyright` section\r\nin `pyproject.toml`. see [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md)\r\nfor reference. in order to set this configuration, qtpy offers the `pyright-config`\r\ncommand for guidance.\r\n\r\nif you run\r\n\r\n```bash\r\nqtpy pyright-config\r\n```\r\n\r\nyou will get the necessary configs to be included in your project files. if you don't\r\nhave them, it is recommended to create the latter. for example, in an environment where pyqt5\r\nis installed and selected (or the default fallback, if no binding can be found in the\r\nenvironment), this would output the following:\r\n\r\n```text\r\npyrightconfig.json:\r\n{\"defineconstant\": {\"pyqt5\": true, \"pyside2\": false, \"pyqt6\": false, \"pyside6\": false}}\r\n\r\npyproject.toml:\r\n[tool.pyright.defineconstant]\r\npyqt5 = true\r\npyside2 = false\r\npyqt6 = false\r\npyside6 = false\r\n```\r\n\r\n**note**: these configurations are necessary for the correct usage of the default vscode's type\r\nchecking feature while using qtpy in your source code.\r\n\r\n\r\n## testing matrix\r\n\r\ncurrently, qtpy runs tests for different bindings on linux, windows and macos, using\r\npython 3.7 and 3.11, and installing those bindings with `conda` and `pip`. for the\r\npyqt bindings, we also check the installation of extra packages via `pip`.\r\n\r\nfollowing this, the current test matrix looks something like this:\r\n\r\n|         | python          | 3.7                                        |      | 3.11               |                            |\r\n|---------|-----------------|--------------------------------------------|------|--------------------|----------------------------|\r\n| os      | binding / manager | conda                                      | pip  | conda              | pip                        |\r\n| linux   | pyqt5           | 5.12                                       | 5.15 | 5.15               | 5.15 (with extras)         |\r\n|         | pyqt6           | skip (unavailable)                         | 6.3  | skip (unavailable) | 6.5 (with extras)          |\r\n|         | pyside2         | 5.13                                       | 5.12 | 5.15               | skip (no wheels available) |\r\n|         | pyside6         | 6.4                                        | 6.3  | 6.5                | 6.5                        |\r\n| windows | pyqt5           | 5.9                                        | 5.15 | 5.15               | 5.15 (with extras)         |\r\n|         | pyqt6           | skip (unavailable)                         | 6.2  | skip (unavailable) | 6.5 (with extras)          |\r\n|         | pyside2         | 5.13                                       | 5.12 | 5.15               | skip (no wheels available) |\r\n|         | pyside6         | skip (test hang with 6.4. 6.5 unavailable) | 6.2  | 6.5                | 6.5                        |\r\n| macos   | pyqt5           | 5.12                                       | 5.15 | 5.15               | 5.15 (with extras)         |\r\n|         | pyqt6           | skip (unavailable)                         | 6.3  | skip (unavailable) | 6.5 (with extras)          |\r\n|         | pyside2         | 5.13                                       | 5.12 | 5.15               | skip (no wheels available) |\r\n|         | pyside6         | 6.4                                        | 6.3  | 6.5                | 6.5                        |\r\n\r\n**note**: the mentioned extra packages for the pyqt bindings are the following:\r\n\r\n* `pyqt3d` and `pyqt6-3d`\r\n* `pyqtchart` and `pyqt6-charts`\r\n* `pyqtdatavisualization` and `pyqt6-datavisualization`\r\n* `pyqtnetworkauth` and `pyqt6-networkauth`\r\n* `pyqtpurchasing`\r\n* `pyqtwebengine` and `pyqt6-webengine` \r\n* `qscintilla` and `pyqt6-qscintilla`\r\n\r\n## contributing\r\n\r\neveryone is welcome to contribute! see our [contributing guide](contributing.md) for more details.\r\n\r\n\r\n## sponsors\r\n\r\nqtpy is funded thanks to the generous support of\r\n\r\n\r\n[![quansight](https://user-images.githubusercontent.com/16781833/142477716-53152d43-99a0-470c-a70b-c04bbfa97dd4.png)](https://www.quansight.com/)[![numfocus](https://i2.wp.com/numfocus.org/wp-content/uploads/2017/07/numfocus_lrg.png?fit=320%2c148&ssl=1)](https://numfocus.org/)\r\n\r\nand the donations we have received from our users around the world through [open collective](https://opencollective.com/spyder/):\r\n\r\n[![sponsors](https://opencollective.com/spyder/sponsors.svg)](https://opencollective.com/spyder#support)\r\n",
  "docs_url": null,
  "keywords": "qt pyqt5 pyqt6 pyside2 pyside6",
  "license": "mit",
  "name": "qtpy",
  "package_url": "https://pypi.org/project/QtPy/",
  "project_url": "https://pypi.org/project/QtPy/",
  "project_urls": {
    "Bug Tracker": "https://github.com/spyder-ide/qtpy/issues",
    "Github": "https://github.com/spyder-ide/qtpy",
    "Homepage": "https://github.com/spyder-ide/qtpy",
    "Parent Project": "https://www.spyder-ide.org/"
  },
  "release_url": "https://pypi.org/project/QtPy/2.4.1/",
  "requires_dist": [
    "packaging",
    "pytest !=7.0.0,!=7.0.1,>=6 ; extra == 'test'",
    "pytest-cov >=3.0.0 ; extra == 'test'",
    "pytest-qt ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "provides an abstraction layer on top of the various qt bindings (pyqt5/6 and pyside2/6).",
  "version": "2.4.1",
  "releases": [],
  "developers": [
    "colin_duquesnoy_and_the_spyder_development_team",
    "spyder.python@gmail.com",
    "spyder_development_team_and_qtpy_contributors"
  ],
  "kwds": "pyside_version qtopengl pyqt6 qtpy pyside6",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_qtpy",
  "homepage": "https://github.com/spyder-ide/qtpy",
  "release_count": 40,
  "dependency_ids": [
    "pypi_packaging",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_qt"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/nilearn.svg\n    :target: https://pypi.org/project/nilearn/\n    :alt: pypi package\n\n.. image:: https://img.shields.io/pypi/pyversions/nilearn.svg\n    :target: https://pypi.org/project/nilearn/\n    :alt: pypi - python version\n\n.. image:: https://github.com/nilearn/nilearn/workflows/build/badge.svg?branch=main&event=push\n    :target: https://github.com/nilearn/nilearn/actions\n    :alt: github actions build status\n\n.. image:: https://codecov.io/gh/nilearn/nilearn/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/nilearn/nilearn\n    :alt: coverage status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: http://img.shields.io/twitter/follow/nilearn.svg\n    :target: https://twitter.com/nilearn\n    :alt: twitter\n\n.. image:: https://img.shields.io/mastodon/follow/109669703955432270?domain=https%3a%2f%2ffosstodon.org%2f\n    :target: https://fosstodon.org/@nilearn\n    :alt: mastodon\n\n.. image:: https://img.shields.io/discord/711993354929569843\n    :target: https://discord.gg/ssqabejhkz\n    :alt: discord\n\n\n\n\nnilearn\n=======\n\nnilearn enables approachable and versatile analyses of brain volumes. it provides statistical and machine-learning tools, with instructive documentation & friendly community.\n\nit supports general linear model (glm) based analysis and leverages the `scikit-learn <https://scikit-learn.org>`_ python toolbox for multivariate statistics with applications such as predictive modelling, classification, decoding, or connectivity analysis.\n\nimportant links\n===============\n\n- official source code repo: https://github.com/nilearn/nilearn/\n- html documentation (stable release): https://nilearn.github.io/\n\ninstall\n=======\n\nlatest release\n--------------\n\n**1. setup a virtual environment**\n\nwe recommend that you install ``nilearn`` in a virtual python environment,\neither managed with the standard library ``venv`` or with ``conda``\n(see `miniconda <https://docs.conda.io/en/latest/miniconda.html>`_ for instance).\neither way, create and activate a new python environment.\n\nwith ``venv``:\n\n.. code-block:: bash\n\n    python3 -m venv /<path_to_new_env>\n    source /<path_to_new_env>/bin/activate\n\nwindows users should change the last line to ``\\<path_to_new_env>\\scripts\\activate.bat`` in order to activate their virtual environment.\n\nwith ``conda``:\n\n.. code-block:: bash\n\n    conda create -n nilearn python=3.9\n    conda activate nilearn\n\n**2. install nilearn with pip**\n\nexecute the following command in the command prompt / terminal\nin the proper python environment:\n\n.. code-block:: bash\n\n    python -m pip install -u nilearn\n\ndevelopment version\n-------------------\n\nplease find all development setup instructions in the\n`contribution guide <https://nilearn.github.io/stable/development.html#setting-up-your-environment>`_.\n\ncheck installation\n------------------\n\ntry importing nilearn in a python / ipython session:\n\n.. code-block:: python\n\n    import nilearn\n\nif no error is raised, you have installed nilearn correctly.\n\ndrop-in hours\n=============\n\nthe nilearn team organizes regular online drop-in hours to answer questions,\ndiscuss feature requests, or have any nilearn-related discussions. nilearn\ndrop-in hours occur *every wednesday from 4pm to 5pm utc*, and we make sure that at\nleast one member of the core-developer team is available. these events are held\non `jitsi meet <https://meet.jit.si/nilearn-drop-in-hours>`_ and are fully open,\nanyone is welcome to join!\nfor more information and ways to engage with the nilearn team see\n`how to get help <https://nilearn.github.io/stable/development.html#how-to-get-help>`_.\n\ndependencies\n============\n\nthe required dependencies to use the software are listed in the file `pyproject.toml <https://github.com/nilearn/nilearn/blob/main/pyproject.toml>`_.\n\nif you are using nilearn plotting functionalities or running the examples, matplotlib >= 3.3.0 is required.\n\nsome plotting functions in nilearn support both matplotlib and plotly as plotting engines.\nin order to use the plotly engine in these functions, you will need to install both plotly and kaleido, which can both be installed with pip and anaconda.\n\nif you want to run the tests, you need pytest >= 6.0.0 and pytest-cov for coverage reporting.\n\ndevelopment\n===========\n\ndetailed instructions on how to contribute are available at\nhttp://nilearn.github.io/stable/development.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "new bsd",
  "name": "nilearn",
  "package_url": "https://pypi.org/project/nilearn/",
  "project_url": "https://pypi.org/project/nilearn/",
  "project_urls": {
    "Changelog": "https://nilearn.github.io/stable/changes/whats_new.html",
    "Development": "https://github.com/nilearn/nilearn",
    "Discussions": "https://neurostars.org/tag/nilearn",
    "Homepage": "https://nilearn.github.io"
  },
  "release_url": "https://pypi.org/project/nilearn/0.10.2/",
  "requires_dist": [
    "joblib>=1.0.0",
    "lxml",
    "nibabel>=3.2.0",
    "numpy>=1.19.0",
    "packaging",
    "pandas>=1.1.5",
    "requests>=2.25.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.6.0",
    "black; extra == 'dev'",
    "blacken-docs; extra == 'dev'",
    "codespell; extra == 'dev'",
    "flake8; extra == 'dev'",
    "flake8-docstrings; extra == 'dev'",
    "flake8-functions; extra == 'dev'",
    "flake8-use-fstring; extra == 'dev'",
    "flynt; extra == 'dev'",
    "isort; extra == 'dev'",
    "nilearn[doc,plotly,plotting,test]; extra == 'dev'",
    "pre-commit; extra == 'dev'",
    "tomli; extra == 'dev'",
    "furo; extra == 'doc'",
    "memory-profiler; extra == 'doc'",
    "myst-parser; extra == 'doc'",
    "nilearn[plotly]; extra == 'doc'",
    "numpydoc; extra == 'doc'",
    "ruamel-yaml; extra == 'doc'",
    "sphinx-copybutton; extra == 'doc'",
    "sphinx-design; extra == 'doc'",
    "sphinx-gallery; extra == 'doc'",
    "sphinx<7.2.0; extra == 'doc'",
    "sphinxcontrib-bibtex; extra == 'doc'",
    "sphinxext-opengraph; extra == 'doc'",
    "joblib==1.0.0; extra == 'min'",
    "nibabel==3.2.0; extra == 'min'",
    "numpy==1.19.0; extra == 'min'",
    "pandas==1.1.5; extra == 'min'",
    "scikit-learn==1.0.0; extra == 'min'",
    "scipy==1.6.0; extra == 'min'",
    "kaleido; extra == 'plotly'",
    "plotly; extra == 'plotly'",
    "matplotlib==3.3.0; extra == 'plotmin'",
    "matplotlib>=3.3.0; extra == 'plotting'",
    "coverage; extra == 'test'",
    "pytest-cov; extra == 'test'",
    "pytest>=6.0.0; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "statistical learning for neuroimaging in python",
  "version": "0.10.2",
  "releases": [],
  "developers": [
    "bertrand.thirion@inria.fr",
    "nilearn_developers"
  ],
  "kwds": "pypi nilearn pytest badge pyversions",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_nilearn",
  "homepage": "",
  "release_count": 43,
  "dependency_ids": [
    "pypi_black",
    "pypi_blacken_docs",
    "pypi_codespell",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_flake8_docstrings",
    "pypi_flake8_functions",
    "pypi_flake8_use_fstring",
    "pypi_flynt",
    "pypi_furo",
    "pypi_isort",
    "pypi_joblib",
    "pypi_kaleido",
    "pypi_lxml",
    "pypi_matplotlib",
    "pypi_memory_profiler",
    "pypi_myst_parser",
    "pypi_nibabel",
    "pypi_nilearn",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_plotly",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_ruamel_yaml",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_design",
    "pypi_sphinx_gallery",
    "pypi_sphinxcontrib_bibtex",
    "pypi_sphinxext_opengraph",
    "pypi_tomli"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "singledispatchmethod\n====================\n\nbackport of ``@functools.singledispatchmethod`` decorator [1]_ from\npython 3.8 to python 2.7-3.7. these are merely ~30 lines of code, but\nwhy bother yourself with copypasta?\n\n.. code:: bash\n\n   $ pip install singledispatchmethod\n\nthe decorator transforms a method into a single-dispatch [2]_ generic\nfunction [3]_. note that since the dispatch happens on the type of the\nfirst non-self or non-cls argument, you have to create your function\naccordingly:\n\n.. code:: python\n\n    from singledispatchmethod import singledispatchmethod\n\n    class negator:\n\n        @singledispatchmethod\n        def neg(self, arg):\n            raise notimplementederror(\"cannot negate a\")\n\n        @neg.register\n        def _(self, arg: int):\n            return -arg\n\n        @neg.register\n        def _(self, arg: bool):\n            return not arg\n\n``@singledispatchmethod`` supports nesting with other decorators such as\n``@classmethod``. however, in order to expose ``dispatcher.register``,\n``@singledispatchmethod`` must be the *outer most* decorator. here is\nthe ``negator`` class with the ``neg`` methods being class bound:\n\n.. code:: python\n\n    from singledispatchmethod import singledispatchmethod\n\n    class negator:\n\n        @singledispatchmethod\n        @classmethod\n        def neg(cls, arg):\n            raise notimplementederror(\"cannot negate a\")\n\n        @neg.register\n        @classmethod\n        def _(cls, arg: int):\n            return -arg\n\n        @neg.register\n        @classmethod\n        def _(cls, arg: bool):\n            return not arg\n\nthe same pattern can be used for other similar decorators, such as\n``@staticmethod`` or ``@abstractmethod``. please note, since\n``@singledispatchmethod`` decorator is based on\n``@functools.singledispatch``, type annotations are supported by\n``dispatcher.register`` only since python 3.7.\n\n.. [1] https://docs.python.org/3.8/library/functools.html#functools.singledispatchmethod\n.. [2] https://docs.python.org/3.8/glossary.html#term-single-dispatch\n.. [3] https://docs.python.org/3.8/glossary.html#term-generic-function",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "singledispatchmethod",
  "package_url": "https://pypi.org/project/singledispatchmethod/",
  "project_url": "https://pypi.org/project/singledispatchmethod/",
  "project_urls": {
    "Bugs": "https://github.com/ikalnytskyi/singledispatchmethod/issues",
    "Documentation": "https://docs.python.org/3.8/library/functools.html#functools.singledispatchmethod",
    "Homepage": "https://github.com/ikalnytskyi/singledispatchmethod",
    "Source": "https://github.com/ikalnytskyi/singledispatchmethod"
  },
  "release_url": "https://pypi.org/project/singledispatchmethod/1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "backport of @functools.singledispatchmethod to python 2.7-3.7.",
  "version": "1.0",
  "releases": [],
  "developers": [
    "ihor@kalnytskyi.com",
    "ihor_kalnytskyi"
  ],
  "kwds": "functools singledispatchmethod decorators decorator staticmethod",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_singledispatchmethod",
  "homepage": "https://github.com/ikalnytskyi/singledispatchmethod",
  "release_count": 1,
  "dependency_ids": []
}
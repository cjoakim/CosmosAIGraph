{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: other audience",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "pyopencl: pythonic access to opencl, with arrays and algorithms\n===============================================================\n\n.. image:: https://gitlab.tiker.net/inducer/pyopencl/badges/main/pipeline.svg\n    :alt: gitlab build status\n    :target: https://gitlab.tiker.net/inducer/pyopencl/commits/main\n.. image:: https://github.com/inducer/pyopencl/workflows/ci/badge.svg?branch=main&event=push\n    :alt: github build status\n    :target: https://github.com/inducer/pyopencl/actions?query=branch%3amain+workflow%3aci+event%3apush\n.. image:: https://badge.fury.io/py/pyopencl.svg\n    :alt: python package index release page\n    :target: https://pypi.org/project/pyopencl/\n.. image:: https://zenodo.org/badge/1575307.svg\n    :alt: zenodo doi for latest release\n    :target: https://zenodo.org/badge/latestdoi/1575307\n\npyopencl lets you access gpus and other massively parallel compute\ndevices from python. it tries to offer computing goodness in the\nspirit of its sister project `pycuda <https://mathema.tician.de/software/pycuda>`__:\n\n* object cleanup tied to lifetime of objects. this idiom, often\n  called `raii <https://en.wikipedia.org/wiki/resource_acquisition_is_initialization>`__\n  in c++, makes it much easier to write correct, leak- and\n  crash-free code.\n\n* completeness. pyopencl puts the full power of opencl's api at\n  your disposal, if you wish.  every obscure ``get_info()`` query and\n  all cl calls are accessible.\n\n* automatic error checking. all cl errors are automatically\n  translated into python exceptions.\n\n* speed. pyopencl's base layer is written in c++, so all the niceties\n  above are virtually free.\n\n* helpful and complete `documentation <https://documen.tician.de/pyopencl>`__\n  as well as a `wiki <https://wiki.tiker.net/pyopencl>`__.\n\n* liberal license. pyopencl is open-source under the\n  `mit license <https://en.wikipedia.org/wiki/mit_license>`__\n  and free for commercial, academic, and private use.\n\n* broad support. pyopencl was tested and works with apple's, amd's, and nvidia's\n  cl implementations.\n\nsimple 4-step `install instructions <https://documen.tician.de/pyopencl/misc.html#installation>`__\nusing conda on linux and macos (that also install a working opencl implementation!)\ncan be found in the `documentation <https://documen.tician.de/pyopencl/>`__.\n\nwhat you'll need if you do *not* want to use the convenient instructions above and\ninstead build from source:\n\n* gcc/g++ new enough to be compatible with pybind11\n  (see their `faq <https://pybind11.readthedocs.io/en/stable/faq.html>`__)\n* `numpy <https://numpy.org>`__, and\n* an opencl implementation. (see this `howto <https://wiki.tiker.net/openclhowto>`__\n  for how to get one.)\n\nlinks\n-----\n\n* `documentation <https://documen.tician.de/pyopencl>`__\n  (read how things work)\n* `conda forge <https://anaconda.org/conda-forge/pyopencl>`__\n  (download binary packages for linux, macos, windows)\n* `python package index <https://pypi.python.org/pypi/pyopencl>`__\n  (download releases)\n* `c. gohlke's windows binaries <https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopencl>`__\n  (download windows binaries)\n* `github <https://github.com/inducer/pyopencl>`__\n  (get latest source code, file bugs)\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyopencl",
  "package_url": "https://pypi.org/project/pyopencl/",
  "project_url": "https://pypi.org/project/pyopencl/",
  "project_urls": {
    "Homepage": "http://mathema.tician.de/software/pyopencl"
  },
  "release_url": "https://pypi.org/project/pyopencl/2023.1.4/",
  "requires_dist": [
    "numpy",
    "pytools >=2021.2.7",
    "platformdirs >=2.2.0",
    "oclgrind-binary-distribution >=18.3 ; extra == 'oclgrind'",
    "pocl-binary-distribution >=1.2 ; extra == 'pocl'",
    "pytest >=7.0.0 ; extra == 'test'",
    "Mako ; extra == 'test'"
  ],
  "requires_python": "~=3.8",
  "summary": "python wrapper for opencl",
  "version": "2023.1.4",
  "releases": [],
  "developers": [
    "andreas_kloeckner",
    "inform@tiker.net"
  ],
  "kwds": "pyopencl opencl pythonlibs pybind11 pythonic",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyopencl",
  "homepage": "http://mathema.tician.de/software/pyopencl",
  "release_count": 94,
  "dependency_ids": [
    "pypi_mako",
    "pypi_numpy",
    "pypi_oclgrind_binary_distribution",
    "pypi_platformdirs",
    "pypi_pocl_binary_distribution",
    "pypi_pytest",
    "pypi_pytools"
  ]
}
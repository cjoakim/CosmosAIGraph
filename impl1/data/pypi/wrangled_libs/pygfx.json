{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<h1 align=\"center\"><img src=\"docs/_static/pygfx_with_name.svg\" width=\"600\"/></h1>\n\n[![ci ](https://github.com/pygfx/pygfx/workflows/ci/badge.svg)\n](https://github.com/pygfx/pygfx/actions)\n[![documentation status\n](https://readthedocs.org/projects/pygfx/badge/?version=stable)\n](https://pygfx.readthedocs.io)\n[![pypi version ](https://badge.fury.io/py/pygfx.svg)\n](https://badge.fury.io/py/pygfx)\n\na python render engine targeting vulkan/metal/dx12.\n\n<p align=\"center\">\n<img src=\"./docs/_static/readme_sponza.png\" alt=\"drawing\" width=\"200\"/>\n<img src=\"./docs/_static/readme_pbr_example.webp\" alt=\"drawing\" width=\"200\"/>\n<img src=\"./docs/_static/readme_torus_knot_wire.png\" alt=\"drawing\" width=\"200\"/>\n</p>\n<p align=\"center\">\n[<a href=\"https://pygfx.readthedocs.io/en/stable/guide.html\">user guide</a>]\n[<a href=\"https://pygfx.readthedocs.io/en/stable/_gallery/index.html\">example gallery</a>]\n[<a href=\"https://pygfx.readthedocs.io/en/stable/reference.html\">api reference</a>]\n</p>\n\n## installation\n\n```bash\npip install -u pygfx glfw\n```\n\nto work correctly, pygfx needs _some_ window to render to. glfw is one\nlightweight option, but there are others, too. if you use a different\nwgpu-compatible window manager or only render offscreen you may choose to omit\nglfw. examples of alternatives include: `jupyter_rfb` (rendering in jupyter),\n`pyqt`, `pyside`, or `wx`.\n\nin addition there are some platform\nrequirements, see the [wgpu docs](https://wgpu-py.readthedocs.io/en/stable/start.html). in\nessence, you need modern (enough) graphics drivers, and `pip>=20.3`.\n\n## status\n\nwe're currently working towards version `1.0`, which means that the api\ncan change with each version. we expect to reach `1.0` near the end of\n2023, at which point we start caring about backwards compatibility.\n\nthis means that until then, you should probably pin the pygfx version\nthat you're using, and check the [release notes](https://github.com/pygfx/pygfx/releases)\nwhen you update.\n\n## usage example\n\n> **note**\n> the example below is designed against the `main` branch,\n> and may not work on the latest release from pypi, while we're in beta.\n\n> **note**\n> a walkthrough of this example can be found in [the\n> guide](https://pygfx.readthedocs.io/en/stable/guide.html#how-to-use-pygfx).\n\n```python\nimport pygfx as gfx\nimport pylinalg as la\n\ncube = gfx.mesh(\n    gfx.box_geometry(200, 200, 200),\n    gfx.meshphongmaterial(color=\"#336699\"),\n)\n\nrot = la.quat_from_euler((0, 0.01), order=\"xy\")\n\ndef animate():\n    cube.local.rotation = la.quat_mul(rot, cube.local.rotation)\n\nif __name__ == \"__main__\":\n    gfx.show(cube, before_render=animate)\n\n```\n<img src=\"./docs/_static/guide_rotating_cube.gif\" alt=\"drawing\" width=\"400\"/>\n\n\n## feature highlights\nsome of pygfx's key features are:\n\n- sdf based text rendering ([example](\n  https://pygfx.readthedocs.io/en/stable/_gallery/feature_demo/text_contrast.html))\n- order-independent transparency (oit) ([example](\n  https://pygfx.readthedocs.io/en/stable/_gallery/feature_demo/transparency2.html))\n- lights, shadows, and physically based rendering (pbr) ([example](\n  https://pygfx.readthedocs.io/en/stable/_gallery/feature_demo/pbr.html))\n- event system with built-in picking ([example](\n  https://pygfx.readthedocs.io/en/stable/_gallery/feature_demo/picking_points.html))\n- texture and color mapping supporting 1d, 2d and 3d data ([example](\n  https://pygfx.readthedocs.io/en/stable/_gallery/feature_demo/colormap_channels.html))\n\n\nand many more! check out our [feature demos](\nhttps://pygfx.readthedocs.io/en/stable/_gallery/index.html) in the docs.\n\n## about pygfx\n\npygfx is a threejs inspired graphics library that uses wgpu (the successor of\nopengl) to provide gpu acceleration to rendering workloads. it is mature enough\nto serve as a general-purpose rendering engine (yes, you _can_ write a game with\nit.) while being geared towards scientific and medical visualization. thanks to\nits low level of abstraction it is flexible and can be adapted to various\nuse-cases. in other words, pygfx emphasizes on hackability and correctness while\nmaintaining the level of performance you would expect from a gpu accelerated\nlibrary.\n\n## license\n\npygfx is licensed under the [bsd 2-clause \"simplified\" license](license). this means:\n\n- :white_check_mark: it is free (and open source) forever. :cupid:\n- :white_check_mark: you _can_ use it commercially.\n- :white_check_mark: you _can_ distribute it and freely make changes.\n- :x: you _can not_ hold us accountable for the results of using pygfx.\n\n## contributing\nwe use a pull request (pr) based workflow similar to many other open-source\nlibraries in the python ecosystem. you can read more about this workflow\n[here](https://docs.github.com/en/get-started/quickstart/github-flow);\nif you have previously contributed to open-source, a lot of this will look\nfamiliar already.\n\n### development install\nto get a working dev install of pygfx you can use the following steps:\n\n```bash\n# click the fork button on github and navigate to your fork\ngit clone <address_of_your_fork>\ncd pygfx\n# if you use a venv, create and activate it\npip install -e .[dev,docs,examples]\npytest\n```\n\n### testing\n\nthe test suite is divided into two parts; unit tests for the core, and unit\ntests for the examples.\n\n* `pytest -v tests` runs the core unit tests.\n* `pytest -v examples` tests the examples.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 2-clause",
  "name": "pygfx",
  "package_url": "https://pypi.org/project/pygfx/",
  "project_url": "https://pypi.org/project/pygfx/",
  "project_urls": {
    "Homepage": "https://github.com/pygfx/pygfx"
  },
  "release_url": "https://pypi.org/project/pygfx/0.1.17/",
  "requires_dist": [
    "numpy",
    "wgpu <0.14.0,>=0.13.0",
    "pylinalg <0.5.0,>=0.4.1",
    "freetype-py",
    "uharfbuzz",
    "Jinja2",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "flake8-black ; extra == 'dev'",
    "pep8-naming ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "setuptools ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "imageio ; extra == 'dev'",
    "psutil ; extra == 'dev'",
    "pyinstaller >=4 ; extra == 'dev'",
    "sphinx >7.2 ; extra == 'docs'",
    "numpy ; extra == 'docs'",
    "wgpu ; extra == 'docs'",
    "jinja2 ; extra == 'docs'",
    "sphinx-gallery ; extra == 'docs'",
    "imageio ; extra == 'docs'",
    "matplotlib ; extra == 'docs'",
    "pytest ; extra == 'docs'",
    "imageio-ffmpeg >=0.4.7 ; extra == 'docs'",
    "scikit-image ; extra == 'docs'",
    "trimesh ; extra == 'docs'",
    "pytest ; extra == 'examples'",
    "PySide6-Essentials ; extra == 'examples'",
    "imageio ; extra == 'examples'",
    "imageio-ffmpeg >=0.4.7 ; extra == 'examples'",
    "scikit-image ; extra == 'examples'",
    "trimesh ; extra == 'examples'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "a threejs-like render engine based on wgpu",
  "version": "0.1.17",
  "releases": [],
  "developers": [
    "almar.klein@gmail.com",
    "almar_klein"
  ],
  "kwds": "pygfx pygfx_with_name pyside pytest py",
  "license_kwds": "bsd 2-clause",
  "libtype": "pypi",
  "id": "pypi_pygfx",
  "homepage": "https://github.com/pygfx/pygfx",
  "release_count": 18,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_flake8_black",
    "pypi_freetype_py",
    "pypi_imageio",
    "pypi_imageio_ffmpeg",
    "pypi_jinja2",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pep8_naming",
    "pypi_psutil",
    "pypi_pyinstaller",
    "pypi_pylinalg",
    "pypi_pyside6_essentials",
    "pypi_pytest",
    "pypi_scikit_image",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_sphinx_gallery",
    "pypi_trimesh",
    "pypi_twine",
    "pypi_uharfbuzz",
    "pypi_wgpu",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation",
    "topic :: multimedia :: graphics :: graphics conversion",
    "topic :: printing",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: markup :: xml",
    "topic :: utilities"
  ],
  "description": ".. -*- mode: rst -*-\n\n======\nsvglib\n======\n\n---------------------------------------------------------------------------\na pure-python library for reading and converting svg\n---------------------------------------------------------------------------\n\n.. image:: https://github.com/deeplook/svglib/workflows/ci/badge.svg\n  :target: https://github.com/deeplook/svglib/actions?query=workflow%3aci\n\n.. image:: https://results.pre-commit.ci/badge/github/deeplook/svglib/master.svg\n  :target: https://results.pre-commit.ci/latest/github/deeplook/svglib/master\n  :alt: pre-commit.ci status\n\n.. image:: https://pyup.io/repos/github/deeplook/svglib/shield.svg\n  :target: https://pyup.io/repos/github/deeplook/svglib/\n\n.. image:: https://img.shields.io/pypi/implementation/svglib.svg\n  :target: https://pypi.org/project/svglib\n\n.. image:: https://img.shields.io/pypi/pyversions/svglib.svg\n  :target: https://pypi.org/project/svglib\n\n.. image:: https://img.shields.io/pypi/dm/svglib.svg\n  :target: https://pepy.tech/project/svglib\n\n.. image:: https://img.shields.io/pypi/v/svglib.svg\n  :target: https://pypi.org/project/svglib\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/svglib.svg\n  :target: https://github.com/conda-forge/svglib-feedstock\n\n.. image:: https://img.shields.io/conda/dn/conda-forge/svglib.svg\n  :target: https://github.com/conda-forge/svglib-feedstock\n\n.. image:: https://img.shields.io/conda/pn/conda-forge/svglib.svg\n  :target: https://pypi.org/project/svglib\n\n.. image:: https://img.shields.io/pypi/l/svglib.svg\n  :target: https://pypi.org/project/svglib\n\n.. image:: https://static.streamlit.io/badges/streamlit_badge_black_white.svg\n  :target: https://share.streamlit.io/deeplook/streamlit-svglib/master/streamlit_app.py\n\n\nabout\n-----\n\n``svglib`` is a pure-python library for reading svg_ files and converting\nthem (to a reasonable degree) to other formats using the reportlab_ open\nsource toolkit.\n\nused as a package you can read existing svg files and convert them into\nreportlab ``drawing`` objects that can be used in a variety of contexts,\ne.g. as reportlab platypus ``flowable`` objects or in rml_.\nas a command-line tool it converts svg files into pdf ones (but adding\nother output formats like bitmap or eps is really easy and will be better\nsupported, soon).\n\ntests include a huge `w3c svg test suite`_ plus ca. 200 `flags from\nwikipedia`_ and some selected `symbols from wikipedia`_ (with increasingly\nless pointing to missing features).\n\n\nfeatures\n--------\n\n- convert svg_ files into reportlab_ graphics ``drawing`` objects\n- handle plain or compressed svg files (.svg and .svgz)\n- allow patterns for output files on command-line\n- install a python package named ``svglib``\n- install a python command-line script named ``svg2pdf``\n- provide a pytest_ test suite with over 90% code coverage\n- test entire `w3c svg test suite`_ after pulling from the internet\n- test all svg `flags from wikipedia`_ after pulling from the internet\n- test selected svg `symbols from wikipedia`_ after pulling from the net\n- support python 3.7+ and pypy3\n\n\nknown limitations\n-----------------\n\n- @import rules in stylesheets are ignored. css is supported, but the range\n  of supported attributes is still limited\n- clipping is limited to single paths, no mask support\n- color gradients are not supported (limitation of reportlab)\n- svg ``foreignobject`` elements are not supported.\n\n\nexamples\n--------\n\nyou can use ``svglib`` as a python package e.g. like in the following\ninteractive python session:\n\n.. code:: python\n\n    >>> from svglib.svglib import svg2rlg\n    >>> from reportlab.graphics import renderpdf, renderpm\n    >>>\n    >>> drawing = svg2rlg(\"file.svg\")\n    >>> renderpdf.drawtofile(drawing, \"file.pdf\")\n    >>> renderpm.drawtofile(drawing, \"file.png\", fmt=\"png\")\n\nnote that the second parameter of ``drawtofile`` can be any\n`python file object`_, like a ``bytesio`` buffer if you don't want the result\nto be written on disk for example.\n\nin addition a script named ``svg2pdf`` can be used more easily from\nthe system command-line. here is the output from ``svg2pdf -h``::\n\n    usage: svg2pdf [-h] [-v] [-o path_pat] [path [path ...]]\n\n    svg2pdf v. x.x.x\n    a converter from svg to pdf (via reportlab graphics)\n\n    positional arguments:\n      path                  input svg file path with extension .svg or .svgz.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         print version number and exit.\n      -o path_pat, --output path_pat\n                            set output path (incl. the placeholders: dirname,\n                            basename,base, ext, now) in both, %(name)s and {name}\n                            notations.\n\n    examples:\n      # convert path/file.svg to path/file.pdf\n      svg2pdf path/file.svg\n\n      # convert file1.svg to file1.pdf and file2.svgz to file2.pdf\n      svg2pdf file1.svg file2.svgz\n\n      # convert file.svg to out.pdf\n      svg2pdf -o out.pdf file.svg\n\n      # convert all svg files in path/ to pdf files with names like:\n      # path/file1.svg -> file1.pdf\n      svg2pdf -o \"%(base)s.pdf\" path/file*.svg\n\n      # like before but with timestamp in the pdf files:\n      # path/file1.svg -> path/out-12-58-36-file1.pdf\n      svg2pdf -o {{dirname}}/out-{{now.hour}}-{{now.minute}}-{{now.second}}-%(base)s.pdf path/file*.svg\n\n    issues/pull requests:\n        https://github.com/deeplook/svglib\n\n    copyleft by dinu gherman, 2008-2021 (lgpl 3):\n        http://www.gnu.org/copyleft/gpl.html\n\n\ndependencies\n------------\n\n``svglib`` depends mainly on the ``reportlab`` package, which provides\nthe abstractions for building complex ``drawings`` which it can render\ninto different fileformats, including pdf, eps, svg and various bitmaps\nones. other dependancies are ``lxml`` which is used in the context of svg\ncss stylesheets.\n\n\ninstallation\n------------\n\nthere are three ways to install ``svglib``.\n\n1. using ``pip``\n++++++++++++++++\n\nwith the ``pip`` command on your system and a working internet\nconnection you can install the newest version of ``svglib`` with only\none command in a terminal::\n\n    $ pip install svglib\n\nyou can also use ``pip`` to install the very latest version of the\nrepository from github, but then you won't be able to conveniently\nrun the test suite::\n\n    $ pip install git+https://github.com/deeplook/svglib\n\n\n2. using ``conda``\n++++++++++++++++++\n\nif you use anaconda_ or miniconda_ you are surely using its respective package\nmanager, conda_, as well. in that case you should be able to install ``svglib``\nusing these simple commands::\n\n    $ conda config --add channels conda-forge\n    $ conda install svglib\n\n``svglib`` was kindly packaged for ``conda`` by nicoddemus_. see here more about\n`svglib with conda`_.\n\n\n3. manual installation\n+++++++++++++++++++++++\n\nalternatively, you can install a tarball like ``svglib-<version>.tar.gz``\nafter downloading it from the `svglib page on pypi`_ or the\n`svglib releases page on github`_ and executing a sequence of commands\nlike shown here::\n\n    $ tar xfz svglib-<version>.tar.gz\n    $ cd svglib-<version>\n    $ python setup.py install\n\nthis will install a python package named ``svglib`` in the\n``site-packages`` subfolder of your python installation and a script\ntool named ``svg2pdf`` in your ``bin`` directory, e.g. in\n``/usr/local/bin``.\n\n\ntesting\n-------\n\nthe ``svglib`` tarball distribution contains a pytest_ test suite\nin the ``tests`` directory. there, in ``tests/readme.rst``, you can\nalso read more about testing. you can run the testsuite e.g. like\nshown in the following lines on the command-line::\n\n    $ tar xfz svglib-<version>.tar.gz\n    $ cd svglib-<version>\n    $ pythonpath=. py.test\n    ======================== test session starts =========================\n    platform darwin -- python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0\n    rootdir: /users/dinu/repos/github/deeplook/svglib, inifile:\n    plugins: cov-2.4.0\n    collected 36 items\n\n    tests/test_basic.py ............................\n    tests/test_samples.py .s.s.s.s\n\n    =============== 32 passed, 4 skipped in 49.18 seconds ================\n\n\nbug reports\n-----------\n\nplease report bugs on the `svglib issue tracker`_ on github (pull\nrequests are also appreciated)!\nif necessary, please include information about the operating system, as\nwell as the versions of ``svglib``, reportlab and python being used!\n\n\n.. _svg: http://www.w3.org/graphics/svg/\n.. _w3c svg test suite:\n      http://www.w3.org/graphics/svg/wg/wiki/test_suite_overview\n.. _flags from wikipedia:\n      https://en.wikipedia.org/wiki/gallery_of_sovereign_state_flags\n.. _symbols from wikipedia:\n      https://en.wikipedia.org/wiki/list_of_symbols\n.. _reportlab: https://www.reportlab.com/opensource/\n.. _rml: https://www.reportlab.com/software/rml-reference/\n.. _svglib issue tracker: https://github.com/deeplook/svglib/issues\n.. _pytest: http://pytest.org\n.. _svglib page on pypi: https://pypi.org/project/svglib/\n.. _svglib releases page on github: https://github.com/deeplook/svglib/releases\n.. _python file object: https://docs.python.org/3/glossary.html#term-file-object\n.. _anaconda: https://www.anaconda.com/download/\n.. _miniconda: https://conda.io/miniconda.html\n.. _conda: https://conda.io\n.. _svglib with conda: https://github.com/conda-forge/svglib-feedstock\n.. _nicoddemus: https://github.com/nicoddemus",
  "docs_url": null,
  "keywords": "svg,pdf,reportlab,conversion,graphics",
  "license": "lgpl 3",
  "name": "svglib",
  "package_url": "https://pypi.org/project/svglib/",
  "project_url": "https://pypi.org/project/svglib/",
  "project_urls": {
    "Homepage": "https://github.com/deeplook/svglib"
  },
  "release_url": "https://pypi.org/project/svglib/1.5.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a pure-python library for reading and converting svg",
  "version": "1.5.1",
  "releases": [],
  "developers": [
    "dinu_gherman",
    "gherman@darwin.in-berlin.de"
  ],
  "kwds": "svg svg2pdf svg_ _svg svg2rlg",
  "license_kwds": "lgpl 3",
  "libtype": "pypi",
  "id": "pypi_svglib",
  "homepage": "https://github.com/deeplook/svglib",
  "release_count": 22,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "concrete actions for aws code pipeline\n# aws codepipeline actions\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis package contains actions that can be used in a codepipeline.\n\n```python\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n```\n\n## sources\n\n### aws codecommit\n\nto use a codecommit repository in a codepipeline:\n\n```python\nrepo = codecommit.repository(self, \"repo\",\n    repository_name=\"myrepo\"\n)\n\npipeline = codepipeline.pipeline(self, \"mypipeline\",\n    pipeline_name=\"mypipeline\"\n)\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codecommitsourceaction(\n    action_name=\"codecommit\",\n    repository=repo,\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"source\",\n    actions=[source_action]\n)\n```\n\nif you want to use existing role which can be used by on commit event rule.\nyou can specify the role object in eventrole property.\n\n```python\n# repo: codecommit.repository\nevent_role = iam.role.from_role_arn(self, \"event-role\", \"rolearn\")\nsource_action = codepipeline_actions.codecommitsourceaction(\n    action_name=\"codecommit\",\n    repository=repo,\n    output=codepipeline.artifact(),\n    event_role=event_role\n)\n```\n\nif you want to clone the entire codecommit repository (only available for codebuild actions),\nyou can set the `codebuildcloneoutput` property to `true`:\n\n```python\n# project: codebuild.pipelineproject\n# repo: codecommit.repository\n\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codecommitsourceaction(\n    action_name=\"codecommit\",\n    repository=repo,\n    output=source_output,\n    code_build_clone_output=true\n)\n\nbuild_action = codepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,  # the build action must use the codecommitsourceaction output as input.\n    outputs=[codepipeline.artifact()]\n)\n```\n\nthe codecommit source action emits variables:\n\n```python\n# project: codebuild.pipelineproject\n# repo: codecommit.repository\n\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codecommitsourceaction(\n    action_name=\"codecommit\",\n    repository=repo,\n    output=source_output,\n    variables_namespace=\"mynamespace\"\n)\n\n# later:\n\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"commit_id\": codebuild.buildenvironmentvariable(\n            value=source_action.variables.commit_id\n        )\n    }\n)\n```\n\n### github\n\nif you want to use a github repository as the source, you must create:\n\n* a [github access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line),\n  with scopes **repo** and **admin:repo_hook**.\n* a [secrets manager secret](https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html)\n  with the value of the **github access token**. pick whatever name you want (for example `my-github-token`).\n  this token can be stored either as plaintext or as a secret key/value.\n  if you stored the token as plaintext,\n  set `secretvalue.secretsmanager('my-github-token')` as the value of `oauthtoken`.\n  if you stored it as a secret key/value,\n  you must set `secretvalue.secretsmanager('my-github-token', { jsonfield : 'my-github-token' })` as the value of `oauthtoken`.\n\nto use github as the source of a codepipeline:\n\n```python\n# read the secret from secrets manager\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.githubsourceaction(\n    action_name=\"github_source\",\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    oauth_token=secretvalue.secrets_manager(\"my-github-token\"),\n    output=source_output,\n    branch=\"develop\"\n)\npipeline.add_stage(\n    stage_name=\"source\",\n    actions=[source_action]\n)\n```\n\nthe github source action emits variables:\n\n```python\n# source_output: codepipeline.artifact\n# project: codebuild.pipelineproject\n\n\nsource_action = codepipeline_actions.githubsourceaction(\n    action_name=\"github_source\",\n    output=source_output,\n    owner=\"my-owner\",\n    repo=\"my-repo\",\n    oauth_token=secretvalue.secrets_manager(\"my-github-token\"),\n    variables_namespace=\"mynamespace\"\n)\n\n# later:\n\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"commit_url\": codebuild.buildenvironmentvariable(\n            value=source_action.variables.commit_url\n        )\n    }\n)\n```\n\n### bitbucket\n\ncodepipeline can use a bitbucket git repository as a source:\n\n**note**: you have to manually connect codepipeline through the aws console with your bitbucket account.\nthis is a one-time operation for a given aws account in a given region.\nthe simplest way to do that is to either start creating a new codepipeline,\nor edit an existing one, while being logged in to bitbucket.\nchoose bitbucket as the source,\nand grant codepipeline permissions to your bitbucket account.\ncopy & paste the connection arn that you get in the console,\nor use the [`codestar-connections list-connections` aws cli operation](https://docs.aws.amazon.com/cli/latest/reference/codestar-connections/list-connections.html)\nto find it.\nafter that, you can safely abort creating or editing the pipeline -\nthe connection has already been created.\n\n```python\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codestarconnectionssourceaction(\n    action_name=\"bitbucket_source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n)\n```\n\nyou can also use the `codestarconnectionssourceaction` to connect to github, in the same way\n(you just have to select github as the source when creating the connection in the console).\n\nsimilarly to `githubsourceaction`, `codestarconnectionssourceaction` also emits the variables:\n\n```python\n# project: codebuild.project\n\n\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codestarconnectionssourceaction(\n    action_name=\"bitbucket_source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\",\n    variables_namespace=\"somespace\"\n)\n\n# later:\n\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"commit_id\": codebuild.buildenvironmentvariable(\n            value=source_action.variables.commit_id\n        )\n    }\n)\n```\n\n### aws s3 source\n\nto use an s3 bucket as a source in codepipeline:\n\n```python\nsource_bucket = s3.bucket(self, \"mybucket\",\n    versioned=true\n)\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.s3sourceaction(\n    action_name=\"s3source\",\n    bucket=source_bucket,\n    bucket_key=\"path/to/file.zip\",\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"source\",\n    actions=[source_action]\n)\n```\n\nthe region of the action will be determined by the region the bucket itself is in.\nwhen using a newly created bucket,\nthat region will be taken from the stack the bucket belongs to;\nfor an imported bucket,\nyou can specify the region explicitly:\n\n```python\nsource_bucket = s3.bucket.from_bucket_attributes(self, \"sourcebucket\",\n    bucket_name=\"my-bucket\",\n    region=\"ap-southeast-1\"\n)\n```\n\nby default, the pipeline will poll the bucket to detect changes.\nyou can change that behavior to use cloudwatch events by setting the `trigger`\nproperty to `s3trigger.events` (it's `s3trigger.poll` by default).\nif you do that, make sure the source bucket is part of an aws cloudtrail trail -\notherwise, the cloudwatch events will not be emitted,\nand your pipeline will not react to changes in the bucket.\nyou can do it through the cdk:\n\n```python\nimport aws_cdk.aws_cloudtrail as cloudtrail\n\n# source_bucket: s3.bucket\n\nsource_output = codepipeline.artifact()\nkey = \"some/key.zip\"\ntrail = cloudtrail.trail(self, \"cloudtrail\")\ntrail.add_s3_event_selector([cloudtrail.s3eventselector(\n    bucket=source_bucket,\n    object_prefix=key\n)],\n    read_write_type=cloudtrail.readwritetype.write_only\n)\nsource_action = codepipeline_actions.s3sourceaction(\n    action_name=\"s3source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    trigger=codepipeline_actions.s3trigger.events\n)\n```\n\nthe s3 source action emits variables:\n\n```python\n# source_bucket: s3.bucket\n\n# later:\n# project: codebuild.pipelineproject\nkey = \"some/key.zip\"\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.s3sourceaction(\n    action_name=\"s3source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    variables_namespace=\"mynamespace\"\n)\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"version_id\": codebuild.buildenvironmentvariable(\n            value=source_action.variables.version_id\n        )\n    }\n)\n```\n\n### aws ecr\n\nto use an ecr repository as a source in a pipeline:\n\n```python\nimport aws_cdk.aws_ecr as ecr\n\n# ecr_repository: ecr.repository\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.ecrsourceaction(\n    action_name=\"ecr\",\n    repository=ecr_repository,\n    image_tag=\"some-tag\",  # optional, default: 'latest'\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"source\",\n    actions=[source_action]\n)\n```\n\nthe ecr source action emits variables:\n\n```python\nimport aws_cdk.aws_ecr as ecr\n# ecr_repository: ecr.repository\n\n# later:\n# project: codebuild.pipelineproject\n\n\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.ecrsourceaction(\n    action_name=\"source\",\n    output=source_output,\n    repository=ecr_repository,\n    variables_namespace=\"mynamespace\"\n)\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"image_uri\": codebuild.buildenvironmentvariable(\n            value=source_action.variables.image_uri\n        )\n    }\n)\n```\n\n## build & test\n\n### aws codebuild\n\nexample of a codebuild project used in a pipeline, alongside codecommit:\n\n```python\n# project: codebuild.pipelineproject\n\nrepository = codecommit.repository(self, \"myrepository\",\n    repository_name=\"myrepository\"\n)\nproject = codebuild.pipelineproject(self, \"myproject\")\n\nsource_output = codepipeline.artifact()\nsource_action = codepipeline_actions.codecommitsourceaction(\n    action_name=\"codecommit\",\n    repository=repository,\n    output=source_output\n)\nbuild_action = codepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    outputs=[codepipeline.artifact()],  # optional\n    execute_batch_build=true,  # optional, defaults to false\n    combine_batch_build_artifacts=true\n)\n\ncodepipeline.pipeline(self, \"mypipeline\",\n    stages=[codepipeline.stageprops(\n        stage_name=\"source\",\n        actions=[source_action]\n    ), codepipeline.stageprops(\n        stage_name=\"build\",\n        actions=[build_action]\n    )\n    ]\n)\n```\n\nthe default category of the codebuild action is `build`;\nif you want a `test` action instead,\noverride the `type` property:\n\n```python\n# project: codebuild.pipelineproject\n\nsource_output = codepipeline.artifact()\ntest_action = codepipeline_actions.codebuildaction(\n    action_name=\"integrationtest\",\n    project=project,\n    input=source_output,\n    type=codepipeline_actions.codebuildactiontype.test\n)\n```\n\n#### multiple inputs and outputs\n\nwhen you want to have multiple inputs and/or outputs for a project used in a\npipeline, instead of using the `secondarysources` and `secondaryartifacts`\nproperties of the `project` class, you need to use the `extrainputs` and\n`outputs` properties of the codebuild codepipeline\nactions. example:\n\n```python\n# repository1: codecommit.repository\n# repository2: codecommit.repository\n\n# project: codebuild.pipelineproject\n\nsource_output1 = codepipeline.artifact()\nsource_action1 = codepipeline_actions.codecommitsourceaction(\n    action_name=\"source1\",\n    repository=repository1,\n    output=source_output1\n)\nsource_output2 = codepipeline.artifact(\"source2\")\nsource_action2 = codepipeline_actions.codecommitsourceaction(\n    action_name=\"source2\",\n    repository=repository2,\n    output=source_output2\n)\nbuild_action = codepipeline_actions.codebuildaction(\n    action_name=\"build\",\n    project=project,\n    input=source_output1,\n    extra_inputs=[source_output2\n    ],\n    outputs=[\n        codepipeline.artifact(\"artifact1\"),  # for better buildspec readability - see below\n        codepipeline.artifact(\"artifact2\")\n    ]\n)\n```\n\n**note**: when a codebuild action in a pipeline has more than one output, it\nonly uses the `secondary-artifacts` field of the buildspec, never the\nprimary output specification directly under `artifacts`. because of that, it\npays to explicitly name all output artifacts of that action, like we did\nabove, so that you know what name to use in the buildspec.\n\nexample buildspec for the above project:\n\n```python\nproject = codebuild.pipelineproject(self, \"myproject\",\n    build_spec=codebuild.buildspec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": []\n            }\n        },\n        \"artifacts\": {\n            \"secondary-artifacts\": {\n                \"artifact1\": {},\n                \"artifact2\": {}\n            }\n        }\n    })\n)\n```\n\n#### variables\n\nthe codebuild action emits variables.\nunlike many other actions, the variables are not static,\nbut dynamic, defined in the buildspec,\nin the 'exported-variables' subsection of the 'env' section.\nexample:\n\n```python\n# later:\n# project: codebuild.pipelineproject\nsource_output = codepipeline.artifact()\nbuild_action = codepipeline_actions.codebuildaction(\n    action_name=\"build1\",\n    input=source_output,\n    project=codebuild.pipelineproject(self, \"project\",\n        build_spec=codebuild.buildspec.from_object({\n            \"version\": \"0.2\",\n            \"env\": {\n                \"exported-variables\": [\"my_var\"\n                ]\n            },\n            \"phases\": {\n                \"build\": {\n                    \"commands\": \"export my_var=\\\"some value\\\"\"\n                }\n            }\n        })\n    ),\n    variables_namespace=\"mynamespace\"\n)\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"myvar\": codebuild.buildenvironmentvariable(\n            value=build_action.variable(\"my_var\")\n        )\n    }\n)\n```\n\n### jenkins\n\nin order to use jenkins actions in the pipeline,\nyou first need to create a `jenkinsprovider`:\n\n```python\njenkins_provider = codepipeline_actions.jenkinsprovider(self, \"jenkinsprovider\",\n    provider_name=\"myjenkinsprovider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)\n```\n\nif you've registered a jenkins provider in a different cdk app,\nor outside the cdk (in the codepipeline aws console, for example),\nyou can import it:\n\n```python\njenkins_provider = codepipeline_actions.jenkinsprovider.from_jenkins_provider_attributes(self, \"jenkinsprovider\",\n    provider_name=\"myjenkinsprovider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)\n```\n\nnote that a jenkins provider\n(identified by the provider name-category(build/test)-version tuple)\nmust always be registered in the given account, in the given aws region,\nbefore it can be used in codepipeline.\n\nwith a `jenkinsprovider`,\nwe can create a jenkins action:\n\n```python\n# jenkins_provider: codepipeline_actions.jenkinsprovider\n\nbuild_action = codepipeline_actions.jenkinsaction(\n    action_name=\"jenkinsbuild\",\n    jenkins_provider=jenkins_provider,\n    project_name=\"myproject\",\n    type=codepipeline_actions.jenkinsactiontype.build\n)\n```\n\n## deploy\n\n### aws cloudformation\n\nthis module contains actions that allows you to deploy to cloudformation from aws codepipeline.\n\nfor example, the following code fragment defines a pipeline that automatically deploys a cloudformation template\ndirectly from a codecommit repository, with a manual approval step in between to confirm the changes:\n\n```python\n# source stage: read from repository\nrepo = codecommit.repository(stack, \"templaterepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.artifact(\"sourceartifact\")\nsource = cpactions.codecommitsourceaction(\n    action_name=\"source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.codecommittrigger.poll\n)\nsource_stage = {\n    \"stage_name\": \"source\",\n    \"actions\": [source]\n}\n\n# deployment stage: create and deploy changeset with manual approval\nstack_name = \"ourstack\"\nchange_set_name = \"stagedchangeset\"\n\nprod_stage = {\n    \"stage_name\": \"deploy\",\n    \"actions\": [\n        cpactions.cloudformationcreatereplacechangesetaction(\n            action_name=\"preparechanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=true,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.manualapprovalaction(\n            action_name=\"approvechanges\",\n            run_order=2\n        ),\n        cpactions.cloudformationexecutechangesetaction(\n            action_name=\"executechanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.pipeline(stack, \"pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/awscloudformation/latest/userguide/continuous-delivery-codepipeline.html)\nfor more details about using cloudformation in codepipeline.\n\n#### actions for updating individual cloudformation stacks\n\nthis package contains the following cloudformation actions:\n\n* **cloudformationcreateupdatestackaction** - deploy a cloudformation template directly from the pipeline. the indicated stack is created,\n  or updated if it already exists. if the stack is in a failure state, deployment will fail (unless `replaceonfailure`\n  is set to `true`, in which case it will be destroyed and recreated).\n* **cloudformationdeletestackaction** - delete the stack with the given name.\n* **cloudformationcreatereplacechangesetaction** - prepare a change set to be applied later. you will typically use change sets if you want\n  to manually verify the changes that are being staged, or if you want to separate the people (or system) preparing the\n  changes from the people (or system) applying the changes.\n* **cloudformationexecutechangesetaction** - execute a change set prepared previously.\n\n#### actions for deploying cloudformation stacksets to multiple accounts\n\nyou can use cloudformation stacksets to deploy the same cloudformation template to multiple\naccounts in a managed way. if you use aws organizations, stacksets can be deployed to\nall accounts in a particular organizational unit (ou), and even automatically to new\naccounts as soon as they are added to a particular ou. for more information, see\nthe [working with stacksets](https://docs.aws.amazon.com/awscloudformation/latest/userguide/what-is-cfnstacksets.html)\nsection of the cloudformation developer guide.\n\nthe actions available for updating stacksets are:\n\n* **cloudformationdeploystacksetaction** - create or update a cloudformation stackset directly from the pipeline, optionally\n  immediately create and update stack instances as well.\n* **cloudformationdeploystackinstancesaction** - update outdated stack instaces using the current version of the stackset.\n\nhere's an example of using both of these actions:\n\n```python\n# pipeline: codepipeline.pipeline\n# source_output: codepipeline.artifact\n\n\npipeline.add_stage(\n    stage_name=\"deploystacksets\",\n    actions=[\n        # first, update the stackset itself with the newest template\n        codepipeline_actions.cloudformationdeploystacksetaction(\n            action_name=\"updatestackset\",\n            run_order=1,\n            stack_set_name=\"mystackset\",\n            template=codepipeline_actions.stacksettemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # change this to 'stacksetdeploymentmodel.organizations()' if you want to deploy to ous\n            deployment_model=codepipeline_actions.stacksetdeploymentmodel.self_managed(),\n            # this deploys to a set of accounts\n            stack_instances=codepipeline_actions.stackinstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # afterwards, update/create additional instances in other accounts\n        codepipeline_actions.cloudformationdeploystackinstancesaction(\n            action_name=\"addmoreinstances\",\n            run_order=2,\n            stack_set_name=\"mystackset\",\n            stack_instances=codepipeline_actions.stackinstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)\n```\n\n#### lambda deployed through codepipeline\n\nif you want to deploy your lambda through codepipeline,\nand you don't use assets (for example, because your cdk code and lambda code are separate),\nyou can use a special lambda `code` class, `cfnparameterscode`.\nnote that your lambda must be in a different stack than your pipeline.\nthe lambda itself will be deployed, alongside the entire stack it belongs to,\nusing a cloudformation codepipeline action. example:\n\n```python\nlambda_stack = cdk.stack(app, \"lambdastack\")\nlambda_code = lambda_.code.from_cfn_parameters()\nlambda_.function(lambda_stack, \"lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x\n)\n# other resources that your lambda needs, added to the lambdastack...\n\npipeline_stack = cdk.stack(app, \"pipelinestack\")\npipeline = codepipeline.pipeline(pipeline_stack, \"pipeline\")\n\n# add the source code repository containing this code to your pipeline,\n# and the source code of the lambda function, if they're separate\ncdk_source_output = codepipeline.artifact()\ncdk_source_action = codepipeline_actions.codecommitsourceaction(\n    repository=codecommit.repository(pipeline_stack, \"cdkcoderepo\",\n        repository_name=\"cdkcoderepo\"\n    ),\n    action_name=\"cdkcode_source\",\n    output=cdk_source_output\n)\nlambda_source_output = codepipeline.artifact()\nlambda_source_action = codepipeline_actions.codecommitsourceaction(\n    repository=codecommit.repository(pipeline_stack, \"lambdacoderepo\",\n        repository_name=\"lambdacoderepo\"\n    ),\n    action_name=\"lambdacode_source\",\n    output=lambda_source_output\n)\npipeline.add_stage(\n    stage_name=\"source\",\n    actions=[cdk_source_action, lambda_source_action]\n)\n\n# synthesize the lambda cdk template, using codebuild\n# the below values are just examples, assuming your cdk code is in typescript/javascript -\n# adjust the build environment and/or commands accordingly\ncdk_build_project = codebuild.project(pipeline_stack, \"cdkbuildproject\",\n    environment=codebuild.buildenvironment(\n        build_image=codebuild.linuxbuildimage.ubuntu_14_04_nodejs_10_1_0\n    ),\n    build_spec=codebuild.buildspec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": [\"npm run build\", \"npm run cdk synth lambdastack -- -o .\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"files\": \"lambdastack.template.yaml\"\n        }\n    })\n)\ncdk_build_output = codepipeline.artifact()\ncdk_build_action = codepipeline_actions.codebuildaction(\n    action_name=\"cdk_build\",\n    project=cdk_build_project,\n    input=cdk_source_output,\n    outputs=[cdk_build_output]\n)\n\n# build your lambda code, using codebuild\n# again, this example assumes your lambda is written in typescript/javascript -\n# make sure to adjust the build environment and/or commands if they don't match your specific situation\nlambda_build_project = codebuild.project(pipeline_stack, \"lambdabuildproject\",\n    environment=codebuild.buildenvironment(\n        build_image=codebuild.linuxbuildimage.ubuntu_14_04_nodejs_10_1_0\n    ),\n    build_spec=codebuild.buildspec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": \"npm run build\"\n            }\n        },\n        \"artifacts\": {\n            \"files\": [\"index.js\", \"node_modules/**/*\"\n            ]\n        }\n    })\n)\nlambda_build_output = codepipeline.artifact()\nlambda_build_action = codepipeline_actions.codebuildaction(\n    action_name=\"lambda_build\",\n    project=lambda_build_project,\n    input=lambda_source_output,\n    outputs=[lambda_build_output]\n)\n\npipeline.add_stage(\n    stage_name=\"build\",\n    actions=[cdk_build_action, lambda_build_action]\n)\n\n# finally, deploy your lambda stack\npipeline.add_stage(\n    stage_name=\"deploy\",\n    actions=[\n        codepipeline_actions.cloudformationcreateupdatestackaction(\n            action_name=\"lambda_cfn_deploy\",\n            template_path=cdk_build_output.at_path(\"lambdastack.template.yaml\"),\n            stack_name=\"lambdastackdeployedname\",\n            admin_permissions=true,\n            parameter_overrides=lambda_code.assign(lambda_build_output.s3_location),\n            extra_inputs=[lambda_build_output\n            ]\n        )\n    ]\n)\n```\n\n#### cross-account actions\n\nif you want to update stacks in a different account,\npass the `account` property when creating the action:\n\n```python\nsource_output = codepipeline.artifact()\ncodepipeline_actions.cloudformationcreateupdatestackaction(\n    action_name=\"cloudformationcreateupdate\",\n    stack_name=\"mystackname\",\n    admin_permissions=true,\n    template_path=source_output.at_path(\"template.yaml\"),\n    account=\"123456789012\"\n)\n```\n\nthis will create a new stack, called `<pipelinestackname>-support-123456789012`, in your `app`,\nthat will contain the role that the pipeline will assume in account 123456789012 before executing this action.\nthis support stack will automatically be deployed before the stack containing the pipeline.\n\nyou can also pass a role explicitly when creating the action -\nin that case, the `account` property is ignored,\nand the action will operate in the same account the role belongs to:\n\n```python\nfrom aws_cdk.core import physicalname\n\n# in stack for account 123456789012...\n# other_account_stack: stack\n\naction_role = iam.role(other_account_stack, \"actionrole\",\n    assumed_by=iam.accountprincipal(\"123456789012\"),\n    # the role has to have a physical name set\n    role_name=physicalname.generate_if_needed\n)\n\n# in the pipeline stack...\nsource_output = codepipeline.artifact()\ncodepipeline_actions.cloudformationcreateupdatestackaction(\n    action_name=\"cloudformationcreateupdate\",\n    stack_name=\"mystackname\",\n    admin_permissions=true,\n    template_path=source_output.at_path(\"template.yaml\"),\n    role=action_role\n)\n```\n\n### aws codedeploy\n\n#### server deployments\n\nto use codedeploy for ec2/on-premise deployments in a pipeline:\n\n```python\n# deployment_group: codedeploy.serverdeploymentgroup\npipeline = codepipeline.pipeline(self, \"mypipeline\",\n    pipeline_name=\"mypipeline\"\n)\n\n# add the source and build stages to the pipeline...\nbuild_output = codepipeline.artifact()\ndeploy_action = codepipeline_actions.codedeployserverdeployaction(\n    action_name=\"codedeploy\",\n    input=build_output,\n    deployment_group=deployment_group\n)\npipeline.add_stage(\n    stage_name=\"deploy\",\n    actions=[deploy_action]\n)\n```\n\n##### lambda deployments\n\nto use codedeploy for blue-green lambda deployments in a pipeline:\n\n```python\nlambda_code = lambda_.code.from_cfn_parameters()\nfunc = lambda_.function(self, \"lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x\n)\n# used to make sure each cdk synthesis produces a different version\nversion = func.current_version\nalias = lambda_.alias(self, \"lambdaalias\",\n    alias_name=\"prod\",\n    version=version\n)\n\ncodedeploy.lambdadeploymentgroup(self, \"deploymentgroup\",\n    alias=alias,\n    deployment_config=codedeploy.lambdadeploymentconfig.linear_10percent_every_1minute\n)\n```\n\nthen, you need to create your pipeline stack,\nwhere you will define your pipeline,\nand deploy the `lambdastack` using a cloudformation codepipeline action\n(see above for a complete example).\n\n### ecs\n\ncodepipeline can deploy an ecs service.\nthe deploy action receives one input artifact which contains the [image definition file](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-create.html#pipelines-create-image-definitions):\n\n```python\nimport aws_cdk.aws_ecs as ecs\n\n# service: ecs.fargateservice\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nbuild_output = codepipeline.artifact()\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"deploy\",\n    actions=[\n        codepipeline_actions.ecsdeployaction(\n            action_name=\"deployaction\",\n            service=service,\n            # if your file is called imagedefinitions.json,\n            # use the `input` property,\n            # and leave out the `imagefile` property\n            input=build_output,\n            # if your file name is _not_ imagedefinitions.json,\n            # use the `imagefile` property,\n            # and leave out the `input` property\n            image_file=build_output.at_path(\"imagedef.json\"),\n            deployment_timeout=duration.minutes(60)\n        )\n    ]\n)\n```\n\n#### deploying ecs applications to existing services\n\ncodepipeline can deploy to an existing ecs service which uses the\n[ecs service arn format that contains the cluster name](https://docs.aws.amazon.com/amazonecs/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\nthis also works if the service is in a different account and/or region than the pipeline:\n\n```python\nimport aws_cdk.aws_ecs as ecs\n\n\nservice = ecs.baseservice.from_service_arn_with_cluster(self, \"ecsservice\", \"arn:aws:ecs:us-east-1:123456789012:service/myclustername/myservicename\")\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nbuild_output = codepipeline.artifact()\n# add source and build stages to the pipeline as usual...\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"deploy\",\n    actions=[\n        codepipeline_actions.ecsdeployaction(\n            action_name=\"deployaction\",\n            service=service,\n            input=build_output\n        )\n    ]\n)\n```\n\nwhen deploying across accounts, especially in a cdk pipelines self-mutating pipeline,\nit is recommended to provide the `role` property to the `ecsdeployaction`.\nthe role will need to have permissions assigned to it for ecs deployment.\nsee [the codepipeline documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-custom-role.html#how-to-update-role-new-services)\nfor the permissions needed.\n\n#### deploying ecs applications stored in a separate source code repository\n\nthe idiomatic cdk way of deploying an ecs application is to have your dockerfiles and your cdk code in the same source code repository,\nleveraging [docker assets](https://docs.aws.amazon.com/cdk/latest/guide/assets.html#assets_types_docker),\nand use the [cdk pipelines module](https://docs.aws.amazon.com/cdk/api/latest/docs/pipelines-readme.html).\n\nhowever, if you want to deploy a docker application whose source code is kept in a separate version control repository than the cdk code,\nyou can use the `tagparametercontainerimage` class from the ecs module.\nhere's an example:\n\n```python\n#\n# this is the stack containing a simple ecs service that uses the provided containerimage.\n#\nclass ecsappstack(cdk.stack):\n    def __init__(self, scope, id, *, image, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, image=image, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        task_definition = ecs.taskdefinition(self, \"taskdefinition\",\n            compatibility=ecs.compatibility.fargate,\n            cpu=\"1024\",\n            memory_mi_b=\"2048\"\n        )\n        task_definition.add_container(\"appcontainer\",\n            image=image\n        )\n        ecs.fargateservice(self, \"ecsservice\",\n            task_definition=task_definition,\n            cluster=ecs.cluster(self, \"cluster\",\n                vpc=ec2.vpc(self, \"vpc\",\n                    max_azs=1\n                )\n            )\n        )\n\n#\n# this is the stack containing the codepipeline definition that deploys an ecs service.\n#\nclass pipelinestack(cdk.stack):\n\n    def __init__(self, scope, id, *, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        # ********* ecs part ****************\n\n        # this is the ecr repository where the built docker image will be pushed\n        app_ecr_repo = ecr.repository(self, \"ecsdeployrepository\")\n        # the build that creates the docker image, and pushes it to the ecr repo\n        app_code_docker_build = codebuild.pipelineproject(self, \"appcodedockerimagebuildandpushproject\",\n            environment=codebuild.buildenvironment(\n                # we need to run docker\n                privileged=true\n            ),\n            build_spec=codebuild.buildspec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"build\": {\n                        \"commands\": [\"$(aws ecr get-login --region $aws_default_region --no-include-email)\", \"docker build -t $repository_uri:$codebuild_resolved_source_version .\"\n                        ]\n                    },\n                    \"post_build\": {\n                        \"commands\": [\"docker push $repository_uri:$codebuild_resolved_source_version\", \"export imagetag=$codebuild_resolved_source_version\"\n                        ]\n                    }\n                },\n                \"env\": {\n                    # save the imagetag environment variable as a codepipeline variable\n                    \"exported-variables\": [\"imagetag\"\n                    ]\n                }\n            }),\n            environment_variables={\n                \"repository_uri\": codebuild.buildenvironmentvariable(\n                    value=app_ecr_repo.repository_uri\n                )\n            }\n        )\n        # needed for `docker push`\n        app_ecr_repo.grant_pull_push(app_code_docker_build)\n        # create the containerimage used for the ecs application stack\n        self.tag_parameter_container_image = ecs.tagparametercontainerimage(app_ecr_repo)\n\n        cdk_code_build = codebuild.pipelineproject(self, \"cdkcodebuildproject\",\n            build_spec=codebuild.buildspec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"install\": {\n                        \"commands\": [\"npm install\"\n                        ]\n                    },\n                    \"build\": {\n                        \"commands\": [\"npx cdk synth --verbose\"\n                        ]\n                    }\n                },\n                \"artifacts\": {\n                    # store the entire cloud assembly as the output artifact\n                    \"base-directory\": \"cdk.out\",\n                    \"files\": \"**/*\"\n                }\n            })\n        )\n\n        # ********* pipeline part ****************\n\n        app_code_source_output = codepipeline.artifact()\n        cdk_code_source_output = codepipeline.artifact()\n        cdk_code_build_output = codepipeline.artifact()\n        app_code_build_action = codepipeline_actions.codebuildaction(\n            action_name=\"appcodedockerimagebuildandpush\",\n            project=app_code_docker_build,\n            input=app_code_source_output\n        )\n        codepipeline.pipeline(self, \"codepipelinedeployingecsapplication\",\n            artifact_bucket=s3.bucket(self, \"artifactbucket\",\n                removal_policy=cdk.removalpolicy.destroy\n            ),\n            stages=[codepipeline.stageprops(\n                stage_name=\"source\",\n                actions=[\n                    # this is the action that takes the source of your application code\n                    codepipeline_actions.codecommitsourceaction(\n                        action_name=\"appcodesource\",\n                        repository=codecommit.repository(self, \"appcodesourcerepository\", repository_name=\"appcodesourcerepository\"),\n                        output=app_code_source_output\n                    ),\n                    # this is the action that takes the source of your cdk code\n                    # (which would probably include this pipeline code as well)\n                    codepipeline_actions.codecommitsourceaction(\n                        action_name=\"cdkcodesource\",\n                        repository=codecommit.repository(self, \"cdkcodesourcerepository\", repository_name=\"cdkcodesourcerepository\"),\n                        output=cdk_code_source_output\n                    )\n                ]\n            ), codepipeline.stageprops(\n                stage_name=\"build\",\n                actions=[app_code_build_action,\n                    codepipeline_actions.codebuildaction(\n                        action_name=\"cdkcodebuildandsynth\",\n                        project=cdk_code_build,\n                        input=cdk_code_source_output,\n                        outputs=[cdk_code_build_output]\n                    )\n                ]\n            ), codepipeline.stageprops(\n                stage_name=\"deploy\",\n                actions=[\n                    codepipeline_actions.cloudformationcreateupdatestackaction(\n                        action_name=\"cfn_deploy\",\n                        stack_name=\"sampleecsstackdeployedfromcodepipeline\",\n                        # this name has to be the same name as used below in the cdk code for the application stack\n                        template_path=cdk_code_build_output.at_path(\"ecsstackdeployedinpipeline.template.json\"),\n                        admin_permissions=true,\n                        parameter_overrides={\n                            # read the tag pushed to the ecr repository from the codepipeline variable saved by the application build step,\n                            # and pass it as the cloudformation parameter for the tag\n                            \"self.tag_parameter_container_image.tag_parameter_name\": app_code_build_action.variable(\"imagetag\")\n                        }\n                    )\n                ]\n            )\n            ]\n        )\n\napp = cdk.app()\n\n# the codepipeline stack needs to be created first\npipeline_stack = pipelinestack(app, \"aws-cdk-pipeline-ecs-separate-sources\")\n# we supply the image to the ecs application stack from the codepipeline stack\necsappstack(app, \"ecsstackdeployedinpipeline\",\n    image=pipeline_stack.tag_parameter_container_image\n)\n```\n\n### aws s3 deployment\n\nto use an s3 bucket as a deployment target in codepipeline:\n\n```python\nsource_output = codepipeline.artifact()\ntarget_bucket = s3.bucket(self, \"mybucket\")\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\ndeploy_action = codepipeline_actions.s3deployaction(\n    action_name=\"s3deploy\",\n    bucket=target_bucket,\n    input=source_output\n)\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"deploy\",\n    actions=[deploy_action]\n)\n```\n\n#### invalidating the cloudfront cache when deploying to s3\n\nthere is currently no native support in codepipeline for invalidating a cloudfront cache after deployment.\none workaround is to add another build step after the deploy step,\nand use the aws cli to invalidate the cache:\n\n```python\n# create a cloudfront web distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.distribution\n\n\n# create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.pipelineproject(self, \"invalidateproject\",\n    build_spec=codebuild.buildspec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${cloudfront_id} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"cloudfront_id\": codebuild.buildenvironmentvariable(value=distribution.distribution_id)\n    }\n)\n\n# add cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionid}\"\ninvalidate_build_project.add_to_role_policy(iam.policystatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:createinvalidation\"\n    ]\n))\n\n# create the pipeline (here only the s3 deploy and invalidate cache build)\ndeploy_bucket = s3.bucket(self, \"deploybucket\")\ndeploy_input = codepipeline.artifact()\ncodepipeline.pipeline(self, \"pipeline\",\n    stages=[codepipeline.stageprops(\n        stage_name=\"deploy\",\n        actions=[\n            codepipeline_actions.s3deployaction(\n                action_name=\"s3deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.codebuildaction(\n                action_name=\"invalidatecache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)\n```\n\n### alexa skill\n\nyou can deploy to alexa using codepipeline with the following action:\n\n```python\n# read the secrets from parameterstore\nclient_id = secretvalue.secrets_manager(\"alexaclientid\")\nclient_secret = secretvalue.secrets_manager(\"alexaclientsecret\")\nrefresh_token = secretvalue.secrets_manager(\"alexarefreshtoken\")\n\n# add deploy action\nsource_output = codepipeline.artifact()\ncodepipeline_actions.alexaskilldeployaction(\n    action_name=\"deployskill\",\n    run_order=1,\n    input=source_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)\n```\n\nif you need manifest overrides you can specify them as `parameteroverridesartifact` in the action:\n\n```python\n# deploy some cfn change set and store output\nexecute_output = codepipeline.artifact(\"cloudformation\")\nexecute_change_set_action = codepipeline_actions.cloudformationexecutechangesetaction(\n    action_name=\"executechangestest\",\n    run_order=2,\n    stack_name=\"mystack\",\n    change_set_name=\"mychangeset\",\n    output_file_name=\"overrides.json\",\n    output=execute_output\n)\n\n# provide cfn output as manifest overrides\nclient_id = secretvalue.secrets_manager(\"alexaclientid\")\nclient_secret = secretvalue.secrets_manager(\"alexaclientsecret\")\nrefresh_token = secretvalue.secrets_manager(\"alexarefreshtoken\")\nsource_output = codepipeline.artifact()\ncodepipeline_actions.alexaskilldeployaction(\n    action_name=\"deployskill\",\n    run_order=1,\n    input=source_output,\n    parameter_overrides_artifact=execute_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)\n```\n\n### aws service catalog\n\nyou can deploy a cloudformation template to an existing service catalog product with the following action:\n\n```python\ncdk_build_output = codepipeline.artifact()\nservice_catalog_deploy_action = codepipeline_actions.servicecatalogdeployactionbeta1(\n    action_name=\"servicecatalogdeploy\",\n    template_path=cdk_build_output.at_path(\"sample.template.json\"),\n    product_version_name=\"version - \" + date.now.to_string,\n    product_version_description=\"this is a version from the pipeline with a new description.\",\n    product_id=\"prod-xxxxxxxx\"\n)\n```\n\n## approve & invoke\n\n### manual approval action\n\nthis package contains an action that stops the pipeline until someone manually clicks the approve button:\n\n```python\nimport aws_cdk.aws_sns as sns\n\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"approve\")\nmanual_approval_action = codepipeline_actions.manualapprovalaction(\n    action_name=\"approve\",\n    notification_topic=sns.topic(self, \"topic\"),  # optional\n    notify_emails=[\"some_email@example.com\"\n    ],  # optional\n    additional_information=\"additional info\"\n)\napprove_stage.add_action(manual_approval_action)\n```\n\nif the `notificationtopic` has not been provided,\nbut `notifyemails` were,\na new sns topic will be created\n(and accessible through the `notificationtopic` property of the action).\n\nif you want to grant a principal permissions to approve the changes,\nyou can invoke the method `grantmanualapproval` passing it a `igrantable`:\n\n```python\npipeline = codepipeline.pipeline(self, \"mypipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"approve\")\nmanual_approval_action = codepipeline_actions.manualapprovalaction(\n    action_name=\"approve\"\n)\napprove_stage.add_action(manual_approval_action)\n\nrole = iam.role.from_role_arn(self, \"admin\", arn.format(arncomponents(service=\"iam\", resource=\"role\", resource_name=\"admin\"), self))\nmanual_approval_action.grant_manual_approval(role)\n```\n\n### aws lambda\n\nthis module contains an action that allows you to invoke a lambda function in a pipeline:\n\n```python\n# fn: lambda.function\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nlambda_action = codepipeline_actions.lambdainvokeaction(\n    action_name=\"lambda\",\n    lambda_=fn\n)\npipeline.add_stage(\n    stage_name=\"lambda\",\n    actions=[lambda_action]\n)\n```\n\nthe lambda action can have up to 5 inputs,\nand up to 5 outputs:\n\n```python\n# fn: lambda.function\n\nsource_output = codepipeline.artifact()\nbuild_output = codepipeline.artifact()\nlambda_action = codepipeline_actions.lambdainvokeaction(\n    action_name=\"lambda\",\n    inputs=[source_output, build_output\n    ],\n    outputs=[\n        codepipeline.artifact(\"out1\"),\n        codepipeline.artifact(\"out2\")\n    ],\n    lambda_=fn\n)\n```\n\nthe lambda action supports custom user parameters that pipeline\nwill pass to the lambda function:\n\n```python\n# fn: lambda.function\n\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nlambda_action = codepipeline_actions.lambdainvokeaction(\n    action_name=\"lambda\",\n    lambda_=fn,\n    user_parameters={\n        \"foo\": \"bar\",\n        \"baz\": \"qux\"\n    },\n    # or\n    user_parameters_string=\"my-parameter-string\"\n)\n```\n\nthe lambda invoke action emits variables.\nunlike many other actions, the variables are not static,\nbut dynamic, defined by the function calling the `putjobsuccessresult`\napi with the `outputvariables` property filled with the map of variables\nexample:\n\n```python\n# later:\n# project: codebuild.pipelineproject\nlambda_invoke_action = codepipeline_actions.lambdainvokeaction(\n    action_name=\"lambda\",\n    lambda_=lambda_.function(self, \"func\",\n        runtime=lambda_.runtime.nodejs_14_x,\n        handler=\"index.handler\",\n        code=lambda_.code.from_inline(\"\"\"\n                    const aws = require('aws-sdk');\n\n                    exports.handler = async function(event, context) {\n                        const codepipeline = new aws.codepipeline();\n                        await codepipeline.putjobsuccessresult({\n                            jobid: event['codepipeline.job'].id,\n                            outputvariables: {\n                                my_var: \"some value\",\n                            },\n                        }).promise();\n                    }\n                \"\"\")\n    ),\n    variables_namespace=\"mynamespace\"\n)\nsource_output = codepipeline.artifact()\ncodepipeline_actions.codebuildaction(\n    action_name=\"codebuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"myvar\": codebuild.buildenvironmentvariable(\n            value=lambda_invoke_action.variable(\"my_var\")\n        )\n    }\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html)\non how to write a lambda function invoked from codepipeline.\n\n### aws step functions\n\nthis module contains an action that allows you to invoke a step function in a pipeline:\n\n```python\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\nstart_state = stepfunctions.pass(self, \"startstate\")\nsimple_state_machine = stepfunctions.statemachine(self, \"simplestatemachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.stepfunctioninvokeaction(\n    action_name=\"invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.statemachineinput.literal({\"ishelloworldexample\": true})\n)\npipeline.add_stage(\n    stage_name=\"stepfunctions\",\n    actions=[step_function_action]\n)\n```\n\nthe `statemachineinput` can be created with one of 2 static factory methods:\n`literal`, which takes an arbitrary map as its only argument, or `filepath`:\n\n```python\nimport aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.pipeline(self, \"mypipeline\")\ninput_artifact = codepipeline.artifact()\nstart_state = stepfunctions.pass(self, \"startstate\")\nsimple_state_machine = stepfunctions.statemachine(self, \"simplestatemachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.stepfunctioninvokeaction(\n    action_name=\"invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.statemachineinput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"stepfunctions\",\n    actions=[step_function_action]\n)\n```\n\nsee [the aws documentation](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-stepfunctions.html)\nfor information on action structure reference.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-codepipeline-actions",
  "package_url": "https://pypi.org/project/aws-cdk.aws-codepipeline-actions/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-codepipeline-actions/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-codepipeline-actions/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudformation (==1.204.0)",
    "aws-cdk.aws-codebuild (==1.204.0)",
    "aws-cdk.aws-codecommit (==1.204.0)",
    "aws-cdk.aws-codedeploy (==1.204.0)",
    "aws-cdk.aws-codepipeline (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecr (==1.204.0)",
    "aws-cdk.aws-ecs (==1.204.0)",
    "aws-cdk.aws-events-targets (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-sns-subscriptions (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-stepfunctions (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "concrete actions for aws code pipeline",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_codepipeline_actions aws_codepipeline aws_stepfunctions cdk_source_action",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_codepipeline_actions",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 257,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudformation",
    "pypi_aws_cdk.aws_codebuild",
    "pypi_aws_cdk.aws_codecommit",
    "pypi_aws_cdk.aws_codedeploy",
    "pypi_aws_cdk.aws_codepipeline",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecr",
    "pypi_aws_cdk.aws_ecs",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_events_targets",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sns_subscriptions",
    "pypi_aws_cdk.aws_stepfunctions",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is a detailed documentation page for the `aws-cdk.aws-codepipeline-actions` package version 1.204.0, released on June 19, 2023, available on PyPI. It provides a comprehensive guide on using various AWS CodePipeline actions with the AWS Cloud Development Kit (CDK), including actions for source stages like AWS CodeCommit, GitHub, BitBucket, AWS S3, and AWS ECR. It also covers build and test actions using AWS CodeBuild, deployment actions for AWS CloudFormation, AWS CodeDeploy, ECS, and S3, along with manual approval and AWS Lambda invoke actions. The package, which requires Python version 3.7 or newer, is licensed under Apache-2.0 and is now inactive, with users encouraged to migrate to AWS CDK v2.",
  "embedding": [
    -0.039842817932367325,
    -0.002841152483597398,
    -0.003453606041148305,
    -0.017324184998869896,
    -0.0031517664901912212,
    0.006479020696133375,
    -0.004906647372990847,
    -0.011406727135181427,
    0.006805428769439459,
    -0.0074687739834189415,
    0.021802641451358795,
    0.0029131025075912476,
    0.01299313921481371,
    0.03282329440116882,
    -0.005822695326060057,
    -0.008072452619671822,
    0.018222685903310776,
    -0.023683873936533928,
    -0.006672057788819075,
    0.0074687739834189415,
    0.012164835818111897,
    -0.0038396797608584166,
    -0.011308453977108002,
    -0.01898079365491867,
    -0.020005643367767334,
    0.0061140055768191814,
    -0.0001481777726439759,
    -0.044363394379615784,
    0.005720912478864193,
    -0.01738034188747406,
    0.03147554770112038,
    -0.0072792465798556805,
    -0.002570900833234191,
    -0.03282329440116882,
    -0.02030046470463276,
    -0.012979100458323956,
    0.00479433499276638,
    0.004211714491248131,
    0.022574789822101593,
    -0.014881391078233719,
    0.0071037583984434605,
    0.006212279200553894,
    -0.006212279200553894,
    -0.014642727561295033,
    -0.011259316466748714,
    0.020089877769351006,
    -0.0023024040274322033,
    -0.020019683986902237,
    -0.03268290311098099,
    0.012024445459246635,
    0.018685974180698395,
    0.03181248530745506,
    -0.017211873084306717,
    -0.025733575224876404,
    0.0222097747027874,
    -0.0029253866523504257,
    -0.011891074478626251,
    0.044363394379615784,
    0.011870015412569046,
    -0.0013126510893926024,
    0.01274043694138527,
    -0.0022286989260464907,
    -0.013091412372887135,
    -0.01753477193415165,
    -0.005036508664488792,
    -0.02100241743028164,
    -0.019107144325971603,
    0.022504594177007675,
    -0.01496562547981739,
    0.00756002776324749,
    0.026253020390868187,
    0.030605126172304153,
    -0.0032535495702177286,
    -0.01867193542420864,
    0.04399837926030159,
    -0.021128768101334572,
    -0.04630078375339508,
    0.015611422248184681,
    -0.01381442416459322,
    0.005380465183407068,
    0.012712358497083187,
    -0.0032482848037034273,
    0.0222097747027874,
    0.029257377609610558,
    0.01590624265372753,
    0.01729610748589039,
    0.0027025167364627123,
    0.002395412651821971,
    -0.006861585192382336,
    -0.0029341611079871655,
    0.016692427918314934,
    -0.0008476075599901378,
    0.020553167909383774,
    0.03377795219421387,
    0.015077938325703144,
    0.023052116855978966,
    -0.01383548229932785,
    0.029678547754883766,
    0.0016873180866241455,
    -0.03613651171326637,
    0.007187992800027132,
    0.006815957836806774,
    -0.023038078099489212,
    0.006647489499300718,
    -0.030071642249822617,
    -0.017913825809955597,
    -0.019584473222494125,
    0.009981763549149036,
    0.028316760435700417,
    0.00888671725988388,
    -0.020440854132175446,
    0.022476516664028168,
    -0.009286830201745033,
    -0.024231398478150368,
    0.005713892634958029,
    -0.010051959194242954,
    0.01264918316155672,
    0.011385668069124222,
    8.247941150330007e-05,
    -0.010002821683883667,
    -0.0027709573041647673,
    0.033019840717315674,
    0.016116827726364136,
    -0.006629940588027239,
    0.002156748902052641,
    0.007047602441161871,
    -0.027263831347227097,
    -0.025186052545905113,
    0.014600610360503197,
    -0.020553167909383774,
    0.02703920751810074,
    0.0010941684013232589,
    0.02115684561431408,
    -0.03905663266777992,
    -0.02236420474946499,
    0.023866383358836174,
    -0.006998465862125158,
    0.005082135554403067,
    -0.028976596891880035,
    -0.004127480089664459,
    0.002179562347009778,
    0.03318830952048302,
    -0.021128768101334572,
    -0.003822130849584937,
    -0.0046258666552603245,
    0.015035821124911308,
    0.012908904813230038,
    -0.01387058012187481,
    0.021648213267326355,
    -0.005608600098639727,
    0.01854558289051056,
    0.004127480089664459,
    -0.02466660737991333,
    -0.012522831559181213,
    0.0004376234719529748,
    -0.0037835235707461834,
    0.016860896721482277,
    -0.002418226096779108,
    -0.006636959966272116,
    -0.01272639725357294,
    0.004966313485056162,
    0.019008871167898178,
    -0.02411908470094204,
    -0.015344680286943913,
    0.01672050729393959,
    0.02716555818915367,
    0.024989506229758263,
    -0.010690735653042793,
    -0.030885906890034676,
    -0.018208645284175873,
    0.020904142409563065,
    0.006615901831537485,
    -0.026491684839129448,
    0.013014198280870914,
    -0.021479744464159012,
    0.023473288863897324,
    0.013821443542838097,
    0.007714457344263792,
    -0.007538969162851572,
    -0.003825640771538019,
    0.01834903657436371,
    -0.007286265958100557,
    7.370500679826364e-05,
    0.02762884832918644,
    -0.016495881602168083,
    -0.020370658487081528,
    -0.0002228699013357982,
    0.0022041306365281343,
    0.006847545970231295,
    0.020426815375685692,
    0.007531949318945408,
    0.030913984403014183,
    -0.020216230303049088,
    -0.013301998376846313,
    -0.5952556729316711,
    -0.015920281410217285,
    -0.047676607966423035,
    -0.05975019186735153,
    0.0020847986452281475,
    -0.005956066306680441,
    0.006096456665545702,
    0.025551067665219307,
    -0.03776504099369049,
    0.02166225202381611,
    -0.006665038410574198,
    0.05171985551714897,
    0.0023375016171485186,
    -0.018110372126102448,
    -0.024764882400631905,
    -0.001623264979571104,
    0.0014144341694191098,
    -0.02357156202197075,
    -0.01274043694138527,
    0.019626589491963387,
    -0.0030991199892014265,
    0.031503625214099884,
    -0.01371615007519722,
    -0.013491525314748287,
    0.01983717642724514,
    0.008563819341361523,
    -0.0053523872047662735,
    -0.000887092377524823,
    0.0028604562394320965,
    0.008816522546112537,
    -0.02334693819284439,
    0.03529416769742966,
    0.01054332498461008,
    -0.005257623735815287,
    0.04512150213122368,
    0.017253991216421127,
    -0.0005457680090330541,
    0.022434400394558907,
    -0.0017373322043567896,
    0.0557350218296051,
    -0.01999160461127758,
    -0.0014477769145742059,
    -0.005236565135419369,
    0.009665885008871555,
    0.01909310556948185,
    -0.013210744597017765,
    0.028078097850084305,
    0.01742246001958847,
    0.0028709853067994118,
    -0.022701142355799675,
    0.020272385329008102,
    -0.014333868399262428,
    -0.0010722323786467314,
    -0.00316229579038918,
    -0.006331610959023237,
    0.009651846252381802,
    0.022027267143130302,
    -0.022883649915456772,
    0.005780578125268221,
    0.007173953577876091,
    -0.013652974739670753,
    0.03678230568766594,
    -0.0032658337149769068,
    -0.01757688820362091,
    -0.01777343451976776,
    0.0005154963000677526,
    0.009034127928316593,
    -0.019724862650036812,
    -0.021381471306085587,
    -0.008486605249345303,
    -0.017745357006788254,
    0.007377520203590393,
    0.005229545757174492,
    -0.007244149222970009,
    0.01792786456644535,
    0.025691458955407143,
    0.013674032874405384,
    -0.00712130730971694,
    -0.014200497418642044,
    0.013652974739670753,
    0.023585600778460503,
    -0.004780296236276627,
    -0.005910439416766167,
    -0.033216387033462524,
    0.026632074266672134,
    0.006580804008990526,
    -0.023178469389677048,
    -0.016467804089188576,
    -0.0019198398804292083,
    -0.013744228519499302,
    0.006426374427974224,
    0.01643972657620907,
    -0.005970105528831482,
    -0.04360528290271759,
    -0.01694513112306595,
    0.03268290311098099,
    0.01165241003036499,
    0.028316760435700417,
    -0.029285455122590065,
    -0.020876064896583557,
    -0.006608881987631321,
    -0.00627545453608036,
    -0.007826769724488258,
    -0.0026516253128647804,
    0.01788574829697609,
    0.011673469096422195,
    -0.020763752982020378,
    0.005166369955986738,
    0.02049701102077961,
    -0.01792786456644535,
    -0.0018040176946669817,
    -0.03074551559984684,
    0.0003156592429149896,
    -0.008697190321981907,
    0.009848392568528652,
    -0.031503625214099884,
    0.020482972264289856,
    -0.015920281410217285,
    0.015414875000715256,
    -0.0036852501798421144,
    -0.005931498017162085,
    -0.006738743279129267,
    0.011147004552185535,
    -0.018377114087343216,
    0.017211873084306717,
    0.00481188390403986,
    0.015274484641849995,
    -0.016495881602168083,
    -0.008577859029173851,
    -0.0031517664901912212,
    0.014544454403221607,
    0.004815393593162298,
    0.02271518111228943,
    0.00307455169968307,
    0.02345925010740757,
    -0.005099684465676546,
    0.04902435839176178,
    -0.006436903961002827,
    -0.017085522413253784,
    -0.014530415646731853,
    -0.010838145390152931,
    0.014979665167629719,
    0.014516375958919525,
    -0.009048166684806347,
    0.0038607383612543344,
    -0.026744388043880463,
    -0.02334693819284439,
    0.005605089943856001,
    -0.007447715383023024,
    0.01186299603432417,
    -0.01081006694585085,
    0.009483377449214458,
    -0.011168062686920166,
    0.026140708476305008,
    -0.0024094516411423683,
    -0.033132154494524,
    -0.02284153178334236,
    -0.024750841781497,
    0.010760930366814137,
    -0.005868322215974331,
    0.006482530850917101,
    0.02049701102077961,
    -0.020623361691832542,
    -0.015007742680609226,
    -0.036922696977853775,
    0.027699042111635208,
    -0.010564384050667286,
    0.024484099820256233,
    -0.009209616109728813,
    -0.03669807314872742,
    0.015302563086152077,
    -0.018812324851751328,
    -0.009511454962193966,
    -0.0029552197083830833,
    0.02416120283305645,
    0.013610857538878918,
    -0.013765286654233932,
    0.01145586371421814,
    0.01870001293718815,
    0.024301592260599136,
    -0.0069563486613333225,
    0.0049417451955378056,
    -0.020356619730591774,
    -0.010529286228120327,
    0.03563110530376434,
    0.03206518664956093,
    0.023136351257562637,
    -0.011568175628781319,
    -0.03476068377494812,
    -0.008591897785663605,
    -0.0017487389268353581,
    0.012789573520421982,
    0.006036791019141674,
    0.03900047764182091,
    -0.027249792590737343,
    0.019893331453204155,
    -0.007567047141492367,
    0.013800384476780891,
    -0.005383975338190794,
    0.03925317898392677,
    0.008830561302602291,
    0.01909310556948185,
    0.004759237635880709,
    -0.005327818915247917,
    -0.014340887777507305,
    -0.015063898637890816,
    -0.0015785155119374394,
    -0.02159205637872219,
    0.0266882311552763,
    -0.007679359521716833,
    0.029903173446655273,
    -0.015077938325703144,
    0.00527166249230504,
    -0.010683716274797916,
    0.015274484641849995,
    0.0003071041719522327,
    -0.005899910349398851,
    0.006075398065149784,
    -0.02073567546904087,
    0.007889945060014725,
    0.03824236989021301,
    -0.013154588639736176,
    0.000544013106264174,
    -0.015836047008633614,
    -0.02014603465795517,
    -0.004517063964158297,
    0.02731998823583126,
    0.012242049910128117,
    -0.017913825809955597,
    0.008837580680847168,
    0.005657736677676439,
    0.02681458182632923,
    -0.005173389334231615,
    -0.023248665034770966,
    0.00671417498961091,
    0.0033044409938156605,
    0.014572531916201115,
    -0.0323459692299366,
    0.037006933242082596,
    -0.00332198990508914,
    0.031587857753038406,
    -0.0013231802731752396,
    0.02093222178518772,
    -0.0006887908093631268,
    0.0059911641292274,
    0.012438597157597542,
    0.036304980516433716,
    0.014390024356544018,
    0.01781555265188217,
    -0.007149385288357735,
    0.01360383816063404,
    0.015049859881401062,
    0.005134781822562218,
    0.012129737995564938,
    0.007475793361663818,
    0.008802483789622784,
    0.0010099339997395873,
    0.0013196705840528011,
    0.037428103387355804,
    0.016846857964992523,
    0.011203160509467125,
    0.022279970347881317,
    0.03105437569320202,
    0.008170725777745247,
    0.027193637564778328,
    -0.04851895198225975,
    -0.03374987095594406,
    -0.029678547754883766,
    -0.02637937292456627,
    -0.0183209590613842,
    -0.0030113758984953165,
    -0.011708566918969154,
    0.0066264308989048,
    -0.03492915257811546,
    0.022785374894738197,
    0.01365999411791563,
    0.03338485583662987,
    0.012607065960764885,
    -0.005085645243525505,
    0.001535520888864994,
    0.00036808630102314055,
    -0.049501683562994,
    0.023908499628305435,
    0.03405873104929924,
    -0.008641034364700317,
    0.009342987090349197,
    -0.01177174225449562,
    0.015134094282984734,
    -0.045065347105264664,
    0.0315597802400589,
    -0.01582200825214386,
    0.03074551559984684,
    0.004825923126190901,
    0.01424261461943388,
    -0.029987407848238945,
    0.0090622054412961,
    0.01412328239530325,
    -0.007307324558496475,
    0.004320517182350159,
    0.004081853199750185,
    0.003811601782217622,
    -0.013301998376846313,
    0.021816682070493698,
    0.014333868399262428,
    0.054555743932724,
    0.008949893526732922,
    -0.0041871462017297745,
    -0.012887846678495407,
    -0.012424558401107788,
    -0.023332899436354637,
    -0.003571182955056429,
    0.021999189630150795,
    0.003041208954527974,
    -0.0048540011048316956,
    0.022069383412599564,
    -0.016776662319898605,
    -0.013091412372887135,
    -0.0206514410674572,
    0.019696785137057304,
    -0.010592462494969368,
    -0.0012064807815477252,
    -0.031700171530246735,
    0.004295948892831802,
    0.029706627130508423,
    0.02459641359746456,
    0.00921663548797369,
    -0.002307668561115861,
    0.0198792926967144,
    -0.02209746278822422,
    -0.015330640599131584,
    -0.04835048317909241,
    0.004783805925399065,
    0.01017129048705101,
    -0.008381311781704426,
    -0.022967882454395294,
    0.021100690588355064,
    0.009139420464634895,
    0.011624332517385483,
    0.04408261179924011,
    -0.003202657913789153,
    0.021339353173971176,
    0.006844036281108856,
    -0.02369791455566883,
    -0.04669387638568878,
    0.008563819341361523,
    0.012403499335050583,
    0.03074551559984684,
    0.024329671636223793,
    0.009104322642087936,
    0.0127614950761199,
    -0.012438597157597542,
    -0.0032517947256565094,
    0.010739872232079506,
    -0.031279001384973526,
    -0.016032593324780464,
    -0.013702111318707466,
    0.007637242320924997,
    0.03184056282043457,
    -0.025930123403668404,
    0.03324446827173233,
    0.006436903961002827,
    0.014993703924119473,
    -0.00793206226080656,
    -0.008893737569451332,
    0.008655073121190071,
    0.0018549092346802354,
    0.006022751796990633,
    -0.024582374840974808,
    0.001600451534613967,
    -0.03914086893200874,
    0.01983717642724514,
    0.031503625214099884,
    0.002114631701260805,
    -0.007574066519737244,
    0.021184924989938736,
    0.01334411557763815,
    -0.04119056835770607,
    -0.020286425948143005,
    0.03383410722017288,
    -0.002341011306270957,
    0.01874212920665741,
    0.0028955538291484118,
    0.006247376557439566,
    -0.05918862670660019,
    -0.007581086363643408,
    -0.03577149659395218,
    -0.016453765332698822,
    -0.025789732113480568,
    0.004320517182350159,
    -0.0011906868312507868,
    0.008472565561532974,
    0.005524365697056055,
    -0.003323744749650359,
    -0.00347290956415236,
    -0.018531544134020805,
    -0.007307324558496475,
    -0.003822130849584937,
    0.004299458581954241,
    0.025691458955407143,
    0.007342422381043434,
    -0.003713328391313553,
    0.021423587575554848,
    -0.006457962095737457,
    -0.011736644431948662,
    -0.019626589491963387,
    -0.03324446827173233,
    0.0009081509779207408,
    -0.02688477747142315,
    0.0021848268806934357,
    -0.0023059137165546417,
    0.006282474379986525,
    0.006317571736872196,
    0.019233496859669685,
    0.05362916365265846,
    -0.01659415476024151,
    0.012171855196356773,
    0.010613520629703999,
    -0.0358557291328907,
    0.012361382134258747,
    0.03619266673922539,
    0.009708002209663391,
    0.0008963054860942066,
    0.006703645456582308,
    -0.0037203477695584297,
    -0.01476907916367054,
    -0.03141938894987106,
    0.014797156676650047,
    0.000640092883259058,
    0.02256075106561184,
    -0.007093229331076145,
    -0.013098432682454586,
    0.026365332305431366,
    -0.01311247143894434,
    -0.002614772878587246,
    -0.001730312709696591,
    -0.02486315555870533,
    0.008311117067933083,
    0.02205534465610981,
    -0.0006199117633514106,
    0.029875095933675766,
    -0.0074406955391168594,
    0.013589799404144287,
    -0.00958866998553276,
    5.5031974625308067e-05,
    0.011589234694838524,
    -0.005071606487035751,
    0.0007624957943335176,
    0.0194862000644207,
    -0.02205534465610981,
    0.024498140439391136,
    -0.008851620368659496,
    -0.009595689363777637,
    -0.03192479535937309,
    0.015807969495654106,
    0.03355332463979721,
    0.00505756726488471,
    0.005868322215974331,
    0.01816652901470661,
    0.02369791455566883,
    -0.004703081212937832,
    0.031391311436891556,
    -8.790857100393623e-05,
    -0.01272639725357294,
    -0.030099719762802124,
    -0.008416409604251385,
    0.0005010185413993895,
    -0.007644261699169874,
    0.012431577779352665,
    -0.009925607591867447,
    -0.023936577141284943,
    -0.019710823893547058,
    0.030970141291618347,
    -0.0008353234152309597,
    0.023276742547750473,
    0.0015881673898547888,
    0.012052522972226143,
    -0.011722605675458908,
    0.004190655890852213,
    -0.01194723043590784,
    0.0014828745042905211,
    0.016580116003751755,
    0.00444335862994194,
    0.015358719043433666,
    0.043773751705884933,
    0.03324446827173233,
    0.004320517182350159,
    0.014165399596095085,
    0.004120460711419582,
    0.009342987090349197,
    -0.041050177067518234,
    0.012087620794773102,
    0.0012933473335579038,
    -0.014432141557335854,
    -0.012571968138217926,
    -0.004801354371011257,
    -0.0032833823934197426,
    0.023908499628305435,
    0.00039813865441828966,
    0.0206514410674572,
    0.01142076589167118,
    -0.0011415501357987523,
    -0.0009063960751518607,
    -0.0068545653484761715,
    -0.017590926960110664,
    -0.010557364672422409,
    -0.017352264374494553,
    -0.005398014094680548,
    0.019766980782151222,
    -0.03787735104560852,
    -0.015850085765123367,
    0.026940934360027313,
    0.01667838916182518,
    -0.0011766477255150676,
    -0.010852184146642685,
    0.03504146635532379,
    0.006837016437202692,
    -0.0004909279523417354,
    0.016397608444094658,
    0.047171201556921005,
    -0.010739872232079506,
    -0.0014898939989507198,
    -0.029004674404859543,
    0.008037355728447437,
    0.010515247471630573,
    0.008304096758365631,
    0.016509920358657837,
    0.006924760527908802,
    0.009497416205704212,
    -0.007763593923300505,
    0.02014603465795517,
    -0.009883490391075611,
    0.0009906303603202105,
    0.033918339759111404,
    -0.03478876128792763,
    -0.010304661467671394,
    -0.018447309732437134,
    -0.02642148919403553,
    -0.034507982432842255,
    0.011055750772356987,
    -0.008767385967075825,
    0.020216230303049088,
    0.029088908806443214,
    -0.021493783220648766,
    -0.019359847530722618,
    0.01447425875812769,
    -0.0053523872047662735,
    0.022729219868779182,
    0.01933177001774311,
    0.02712344191968441,
    0.015442953445017338,
    0.028751971200108528,
    -0.01940196566283703,
    -0.019500238820910454,
    -0.030520891770720482,
    -0.004727649502456188,
    0.006738743279129267,
    0.0327390618622303,
    0.0027727121487259865,
    -0.016397608444094658,
    -0.007335403002798557,
    0.022462477907538414,
    0.00869017094373703,
    -0.013765286654233932,
    0.0227994155138731,
    -0.013765286654233932,
    0.009069225750863552,
    -0.03408680856227875,
    0.00010759614815469831,
    -0.0027604280039668083,
    0.02010391838848591,
    -0.011561156250536442,
    -0.02973470464348793,
    0.04439147189259529,
    -0.009279810823500156,
    -0.00022023757628630847,
    -0.011168062686920166,
    -0.0037273673806339502,
    -0.00025007055955938995,
    0.00040230649756267667,
    -0.037203479558229446,
    -0.0115962540730834,
    -0.009750119410455227,
    -0.018896559253335,
    -0.010880262590944767,
    -0.016032593324780464,
    0.019317731261253357,
    -0.0055138361640274525,
    -0.002209395170211792,
    0.02859754115343094,
    0.004292439203709364,
    -0.019851215183734894,
    0.01621510088443756,
    -0.006285984069108963,
    0.03366563841700554,
    -0.0078057111240923405,
    -0.009757138788700104,
    -0.019303692504763603,
    -0.01839115284383297,
    0.030183954164385796,
    -0.002449813997372985,
    0.0016996023477986455,
    -0.02251863293349743,
    -0.03248635679483414,
    -0.006980916950851679,
    7.721476868027821e-05,
    -0.008402370847761631,
    -0.022279970347881317,
    -0.021872837096452713,
    0.006226317957043648,
    -0.011210179887712002,
    0.001066967728547752,
    -0.016201062127947807,
    0.01898079365491867,
    -0.015021782368421555,
    0.0008454139460809529,
    -0.007096739020198584,
    -0.01601855456829071,
    0.010318700224161148,
    0.025551067665219307,
    0.015302563086152077,
    0.01586412452161312,
    0.05472421273589134,
    0.0013898657634854317,
    0.008297077380120754,
    -0.04046053811907768,
    0.006198239978402853,
    -0.020272385329008102,
    -0.002233963692560792,
    0.016116827726364136,
    0.004639905411750078,
    0.014151360839605331,
    -0.022729219868779182,
    -0.03358140587806702,
    -0.025845889002084732,
    0.006250886246562004,
    0.03172824904322624,
    0.009897529147565365,
    -0.015695655718445778,
    -0.0019408984808251262,
    0.02381022647023201,
    0.01264216285198927,
    0.008191784843802452,
    -0.0023813736625015736,
    0.025845889002084732,
    -0.013631915673613548,
    -0.0023936578072607517,
    0.04228561371564865,
    0.006826487369835377,
    0.021872837096452713,
    -0.010676695965230465,
    0.005524365697056055,
    0.0033167251385748386,
    -0.00207075965590775,
    -0.021521860733628273,
    0.015134094282984734,
    0.014333868399262428,
    -0.005310270003974438,
    0.011406727135181427,
    -0.014600610360503197,
    -0.0076302229426801205,
    -0.031896717846393585,
    0.029959330335259438,
    0.008584878407418728,
    -0.019317731261253357,
    0.01694513112306595,
    0.021170884370803833,
    0.022532673552632332,
    0.006138573866337538,
    -0.00898499134927988,
    -0.03175632655620575,
    -0.020482972264289856,
    0.009300869889557362,
    -0.039646271616220474,
    -0.0035009877756237984,
    -0.029313532635569572,
    0.033104076981544495,
    0.009279810823500156,
    -0.0012836954556405544,
    -0.042959488928318024,
    -0.02080586925148964,
    -0.0015574569115415215,
    -0.015190250240266323,
    -0.03004356473684311,
    0.02389446087181568,
    0.007300305180251598,
    0.0015258691273629665,
    -0.0005277805030345917,
    0.021957071498036385,
    -0.0319528728723526,
    0.03237404674291611,
    -0.01862981729209423,
    -0.008781424723565578,
    0.017829591408371925,
    -0.011554136872291565,
    -0.011490961536765099,
    -0.015850085765123367,
    -0.00956761185079813,
    -0.006310552358627319,
    0.019612550735473633,
    0.0206514410674572,
    -0.0062157888896763325,
    0.02583184838294983,
    -0.03358140587806702,
    -0.005054057575762272,
    -0.00898499134927988,
    -0.0012521076714619994,
    -0.010901320725679398,
    0.009967724792659283,
    0.009792236611247063,
    -0.029903173446655273,
    -0.007889945060014725,
    0.009342987090349197,
    0.021114729344844818,
    0.0026639094576239586,
    -0.003344803350046277,
    -0.013182666152715683,
    -0.005892890505492687,
    0.01964062824845314,
    -0.0046644737012684345,
    -0.02236420474946499,
    -0.02229400910437107,
    -0.012845729477703571,
    0.0192896518856287,
    0.0047662570141255856,
    0.029060831293463707,
    0.025186052545905113,
    0.0050014108419418335,
    -0.01608875021338463,
    -0.040544770658016205,
    0.01582200825214386,
    -0.02965047024190426,
    -0.008016296662390232,
    -0.01476907916367054,
    0.018503466621041298,
    0.002235718537122011,
    -0.002290119882673025,
    0.009378083981573582,
    -0.01369509194046259,
    -0.0063561792485415936,
    0.01577989012002945,
    0.008612955920398235,
    -0.016397608444094658,
    -0.0026410960126668215,
    -0.01377932634204626,
    -0.00422926340252161,
    0.01316862739622593,
    0.002930651418864727,
    0.004738179035484791,
    -0.0034588705748319626,
    -0.010592462494969368,
    -0.0030868358444422483,
    -0.031896717846393585,
    0.02657591924071312,
    -0.01933177001774311,
    -0.040741316974163055,
    -0.02010391838848591,
    0.017310146242380142,
    0.004861020483076572,
    -0.022574789822101593,
    0.029706627130508423,
    0.15499109029769897,
    0.027656925842165947,
    0.0010555610060691833,
    0.013393252156674862,
    0.0027727121487259865,
    -0.004243302624672651,
    0.004439848940819502,
    0.022925766184926033,
    -0.04739582911133766,
    0.013926736079156399,
    -0.015358719043433666,
    -0.0021374451462179422,
    -0.024582374840974808,
    0.011231238953769207,
    0.00685807503759861,
    -0.007005485240370035,
    -0.015555265359580517,
    -0.017436498776078224,
    -0.01200338639318943,
    0.0009458808926865458,
    0.012670241296291351,
    -0.02209746278822422,
    -0.00606135930866003,
    -0.032317887991666794,
    0.013203725218772888,
    -0.027951745316386223,
    -0.0037308770697563887,
    0.008992010727524757,
    0.006212279200553894,
    0.0026867229025810957,
    -0.026842661201953888,
    0.007707437500357628,
    0.005197957623749971,
    0.009055186063051224,
    -0.0194862000644207,
    -0.03167209401726723,
    0.01586412452161312,
    -0.010599481873214245,
    0.024722764268517494,
    0.019387926906347275,
    -0.024147164076566696,
    -0.028078097850084305,
    0.0018671934958547354,
    -0.04020783677697182,
    -0.006033281330019236,
    -0.009729060344398022,
    -0.008184765465557575,
    -0.007672340143471956,
    0.0021830720361322165,
    0.024694686755537987,
    -0.021184924989938736,
    0.001849644584581256,
    0.021339353173971176,
    0.022153617814183235,
    -0.017085522413253784,
    -0.018770208582282066,
    0.01104873139411211,
    0.024217357859015465,
    0.030296266078948975,
    0.04037630185484886,
    -0.022420359775424004,
    0.027656925842165947,
    -0.00997474417090416,
    0.0020883085671812296,
    -0.048687420785427094,
    -0.0030219051986932755,
    -0.016973210498690605,
    -0.01924753561615944,
    -0.0017680426826700568,
    0.010269563645124435,
    -0.03186864033341408,
    -0.029790861532092094,
    -0.0033395385835319757,
    -0.0006971264956519008,
    -0.00316229579038918,
    -0.007707437500357628,
    0.03243020176887512,
    0.020525088533759117,
    0.001830340945161879,
    0.03577149659395218,
    -0.003801072482019663,
    0.01157519593834877,
    -0.03447990491986275,
    -0.018334997817873955,
    0.014375985600054264,
    -0.00198301556520164,
    0.030183954164385796,
    -0.0040994021110236645,
    -0.011111906729638577,
    0.003416753374040127,
    -0.017015326768159866,
    -0.01870001293718815,
    -0.0032921568490564823,
    -0.014979665167629719,
    0.005254114046692848,
    0.021648213267326355,
    0.015485070645809174,
    0.0010029145050793886,
    -0.012515812180936337,
    0.01694513112306595,
    -0.022265931591391563,
    0.07435080409049988,
    0.006022751796990633,
    0.013273919932544231,
    -0.008030335418879986,
    -0.0004922441439703107,
    -0.0006242989329621196,
    0.01819460652768612,
    -0.005398014094680548,
    -0.0016285296296700835,
    0.006142083555459976,
    -0.03714732080698013,
    -0.016116827726364136,
    0.007960140705108643,
    -0.006987936329096556,
    -0.0037414063699543476,
    -0.014741000719368458,
    -0.014895430766046047,
    -0.004432829562574625,
    -0.010557364672422409,
    -0.021844759583473206,
    -0.01157519593834877,
    -0.0031201785895973444,
    0.006545706186443567,
    -0.02341713383793831,
    -0.021297236904501915,
    -0.014586571604013443,
    -0.004313497804105282,
    -0.022743258625268936,
    -0.024806998670101166,
    0.024582374840974808,
    0.0019654668867588043,
    0.023978695273399353,
    -0.00816370639950037,
    -0.02190091647207737,
    -0.027053246274590492,
    -0.03248635679483414,
    -0.00810755044221878,
    0.010262544266879559,
    0.028513306751847267,
    -0.011870015412569046,
    0.015555265359580517,
    -0.0031078944448381662,
    0.00845852680504322,
    0.0008261102484539151,
    -0.030492814257740974,
    0.028007902204990387,
    0.0014126792084425688,
    -0.019163301214575768,
    -0.007889945060014725,
    -0.011441824957728386,
    -0.010002821683883667,
    0.02411908470094204,
    0.01870001293718815,
    0.036529604345560074,
    -0.018573660403490067,
    -0.019500238820910454,
    -0.0061280447989702225,
    0.014741000719368458,
    0.014404064044356346,
    -0.03178440406918526,
    -0.010381876491010189,
    0.016229139640927315,
    0.006594843231141567,
    -0.03989897668361664,
    -0.00964482594281435,
    -0.17823976278305054,
    0.0010345024056732655,
    0.004924196284264326,
    -0.03759657219052315,
    0.010690735653042793,
    -0.012712358497083187,
    -0.007868886925280094,
    0.010276583954691887,
    -0.00099589501041919,
    -0.013688072562217712,
    0.026351293548941612,
    0.009539533406496048,
    -0.01381442416459322,
    -0.008058413863182068,
    -0.0030570027884095907,
    -0.01517621148377657,
    -0.027263831347227097,
    0.010964496992528439,
    0.024484099820256233,
    0.002842907328158617,
    0.03554686903953552,
    -0.014684844762086868,
    0.014628688804805279,
    0.01975294202566147,
    -0.017057443037629128,
    -0.01334411557763815,
    -0.017520733177661896,
    -0.021465705707669258,
    0.014214536175131798,
    -0.0013591554015874863,
    -0.017001288011670113,
    0.018615778535604477,
    0.007482812739908695,
    0.013491525314748287,
    0.01955639384686947,
    0.00405377522110939,
    0.012094640173017979,
    -0.017394380643963814,
    -0.032598670572042465,
    0.02692689560353756,
    0.028541386127471924,
    0.018952716141939163,
    0.011139985173940659,
    -0.03989897668361664,
    0.0008533109212294221,
    0.0010169536108151078,
    0.015035821124911308,
    -0.023978695273399353,
    -0.008191784843802452,
    -0.021297236904501915,
    0.03335677832365036,
    -0.03925317898392677,
    -0.0041415193118155,
    -0.0020426814444363117,
    0.010529286228120327,
    0.010655637830495834,
    0.02774116024374962,
    -0.007300305180251598,
    -0.037315789610147476,
    -0.03810197860002518,
    0.0016522204969078302,
    -0.02567742019891739,
    -0.0002150826039724052,
    -0.015513148158788681,
    -0.03113861009478569,
    -0.0015495599946007133,
    -0.019738901406526566,
    0.029453923925757408,
    -0.02174648642539978,
    -0.00041744232294149697,
    0.018208645284175873,
    -0.005924478638917208,
    -0.016313374042510986,
    -0.013674032874405384,
    0.015218328684568405,
    0.005980634596198797,
    -0.03417104482650757,
    0.023445211350917816,
    0.010164271108806133,
    -0.009076245129108429,
    -0.024722764268517494,
    0.03841083496809006,
    -0.027544613927602768,
    0.014277712441980839,
    0.029173143208026886,
    0.012305226176977158,
    -0.0046995715238153934,
    -0.0033202350605279207,
    0.005282192025333643,
    -0.008662092499434948,
    0.01952831633388996,
    -0.006872114259749651,
    0.008556799963116646,
    -0.001882987329736352,
    -0.0036396232899278402,
    0.001181912375614047,
    -0.01983717642724514,
    -0.016004515811800957,
    -0.009013068862259388,
    -0.0226028673350811,
    -0.010445051826536655,
    0.004745198413729668,
    -0.028204448521137238,
    -0.0024357750080525875,
    0.034507982432842255,
    0.016903014853596687,
    -0.01757688820362091,
    0.021367432549595833,
    0.033721793442964554,
    -0.01679070293903351,
    -0.024385826662182808,
    -0.001133653218857944,
    0.01792786456644535,
    0.0014925263822078705,
    -0.000566826609428972,
    0.046553485095500946,
    0.0039239139296114445,
    -0.002993826987221837,
    -0.00313772726804018,
    -0.008283038623631,
    0.011989347636699677,
    0.01643972657620907,
    0.002855191472917795,
    -0.005219016224145889,
    -0.027811355888843536,
    -0.03338485583662987,
    -0.09271387755870819,
    -0.015091977082192898,
    0.011027672328054905,
    -0.007777632679790258,
    -0.011870015412569046,
    -0.011933191679418087,
    -0.025031624361872673,
    -0.0014986684545874596,
    0.012326284311711788,
    -0.02903275191783905,
    0.0019970545545220375,
    0.03184056282043457,
    -0.01882636360824108,
    0.00974310003221035,
    0.016046632081270218,
    -0.011666449718177319,
    -0.04009552299976349,
    -0.004481966141611338,
    -0.006886153481900692,
    0.01659415476024151,
    -0.018208645284175873,
    0.014572531916201115,
    0.0007563537219539285,
    -0.01913522370159626,
    -0.005685814656317234,
    0.016580116003751755,
    -0.02060932293534279,
    0.014390024356544018,
    0.030689360573887825,
    0.02326270379126072,
    0.0037729942705482244,
    -0.03200903162360191,
    0.006994955707341433,
    -0.00664397981017828,
    -0.011448844335973263,
    -0.018854442983865738,
    -0.02576165460050106,
    -0.023782148957252502,
    0.045149579644203186,
    -0.01246667467057705,
    -0.0018426250899210572,
    0.0111048873513937,
    0.01999160461127758,
    -0.01952831633388996,
    -0.02197111025452614,
    0.004271380603313446,
    0.009869450703263283,
    0.020426815375685692,
    0.005240074824541807,
    -0.02993125095963478,
    -0.02984701655805111,
    -0.010283603332936764,
    -0.02953815832734108,
    0.005068096332252026,
    0.011139985173940659,
    0.013386232778429985,
    -0.0005431356839835644,
    -0.0021111220121383667,
    -0.013449408113956451,
    0.0013512583682313561,
    -0.01796998269855976,
    -0.009729060344398022,
    -0.020370658487081528,
    0.020946260541677475,
    0.01999160461127758,
    -0.004573219921439886,
    0.02299596183001995,
    -0.009722040966153145,
    0.026140708476305008,
    -0.012242049910128117,
    -0.02060932293534279,
    0.03877585381269455,
    -0.006496569607406855,
    0.030212031677365303,
    -0.01742246001958847,
    -0.004555671475827694,
    0.008311117067933083,
    -0.014095204882323742,
    0.010711793787777424,
    -0.008507663384079933,
    -0.011448844335973263,
    0.0014346152311190963,
    0.00590342003852129,
    -0.015639500692486763,
    0.029790861532092094,
    0.009736079722642899,
    0.014319829642772675,
    0.0015829027397558093,
    0.027488457038998604,
    -0.021213002502918243,
    0.012206953018903732,
    -0.001045909128151834,
    0.03919702395796776,
    -0.013007178902626038,
    -0.010438032448291779,
    0.0034641351085156202,
    0.010044938884675503,
    -0.007180973421782255,
    -0.03605227544903755,
    0.013042275793850422,
    -0.057026613503694534,
    -0.013070354238152504,
    -0.09136612713336945,
    0.02049701102077961,
    -0.01636953093111515,
    -0.005633168388158083,
    0.01959851197898388,
    0.0013372193789109588,
    0.018573660403490067,
    -0.01601855456829071,
    0.015344680286943913,
    0.026589957997202873,
    -0.03683846443891525,
    0.015260445885360241,
    -0.0008370782597921789,
    0.020623361691832542,
    -0.002776221837848425,
    -0.008676132187247276,
    0.025003544986248016,
    -0.021914955228567123,
    0.06255800276994705,
    -0.024736803025007248,
    -0.03265482559800148,
    -0.012010405771434307,
    0.03304792195558548,
    0.003071041777729988,
    -0.01862981729209423,
    0.007195012178272009,
    -0.028120214119553566,
    0.009806275367736816,
    -0.007918023504316807,
    0.0007159914821386337,
    0.016271257773041725,
    -0.0009888755157589912,
    0.00031522050267085433,
    0.015091977082192898,
    0.01722591184079647,
    0.02571953646838665,
    0.031166687607765198,
    0.016509920358657837,
    0.03094206377863884,
    0.0005497164675034583,
    0.007742535322904587,
    -0.011469902470707893,
    -0.00831813644617796,
    -0.016074711456894875,
    0.015695655718445778,
    0.0010845165234059095,
    -0.006405315827578306,
    0.01139970775693655,
    0.031503625214099884,
    0.019668707624077797,
    0.024877194315195084,
    0.017057443037629128,
    -0.0385793037712574,
    -0.04020783677697182,
    0.012578987516462803,
    -0.014937547966837883,
    0.022462477907538414,
    -0.00845852680504322,
    -0.016116827726364136,
    0.037119243294000626,
    0.02477892115712166,
    -0.009314908646047115,
    0.015288523398339748,
    -0.003944972530007362,
    0.010073017328977585,
    -0.01823672465980053,
    -0.03787735104560852,
    -0.02809213660657406,
    -0.01613086648285389,
    -0.020244307816028595,
    -0.01870001293718815,
    -0.05607195943593979,
    -0.004215224180370569,
    0.008795463480055332,
    0.013400271534919739,
    -0.028864283114671707,
    -0.003853718750178814,
    -0.008247940801084042,
    -0.006191220600157976,
    0.002546332310885191,
    0.008591897785663605,
    -0.004106421489268541,
    -0.03335677832365036,
    0.008837580680847168,
    0.0013837236911058426,
    -0.021184924989938736,
    -0.02049701102077961,
    -0.008942874148488045,
    -0.008774405345320702,
    -7.469212869182229e-05,
    0.005756009835749865,
    -0.0005137414555065334,
    0.005612109787762165,
    0.03254251554608345,
    0.011308453977108002,
    -0.002691987669095397,
    -0.009378083981573582,
    -0.037315789610147476,
    0.020763752982020378,
    -0.008360253646969795,
    -0.0033483130391687155,
    0.009286830201745033,
    0.009188557043671608,
    0.002109366934746504,
    -0.00773551594465971,
    0.0011555891251191497,
    0.01064159907400608,
    -0.03751233592629433,
    0.004236282780766487,
    -0.009658865630626678,
    0.019359847530722618,
    -0.029706627130508423,
    0.015344680286943913,
    -0.003357087494805455,
    -0.01707148365676403,
    0.01905098930001259,
    -0.0027130460366606712,
    -0.0028288683388382196,
    -0.02306615747511387,
    0.028864283114671707,
    -0.004629376344382763,
    0.015723735094070435,
    0.0697459951043129,
    0.0031991482246667147,
    0.02400677278637886,
    0.008416409604251385,
    0.012319264933466911,
    0.008935854770243168,
    0.014979665167629719,
    0.001916330074891448,
    -0.019359847530722618,
    -0.00223045377060771,
    -0.0467500314116478,
    -0.0029236318077892065,
    -0.013126510195434093,
    0.008949893526732922,
    0.012628124095499516,
    0.022588828578591347,
    -0.014032028615474701,
    0.07693398743867874,
    -0.003997619263827801,
    -0.026744388043880463,
    -0.004790825303643942,
    0.004130990244448185,
    0.011820878833532333,
    0.012150796130299568,
    0.005405033472925425,
    0.0010046694660559297,
    -0.006057849619537592,
    -0.005668265745043755,
    0.007833789102733135,
    -0.025200091302394867,
    -0.0037624649703502655,
    -0.02330482006072998,
    0.000292845768854022,
    -0.03032434545457363,
    0.04037630185484886,
    -0.00273234979249537,
    0.011617312207818031,
    0.03226173296570778,
    0.015920281410217285,
    0.019233496859669685,
    -0.005127762444317341,
    -0.048659343272447586,
    -0.017239952459931374,
    0.03487299755215645,
    0.016383569687604904,
    -0.002147974446415901,
    -0.05537000671029091,
    0.016144905239343643,
    0.008177746087312698,
    -0.00974310003221035,
    -0.02856946364045143,
    0.003051738254725933,
    0.014235595241189003,
    -0.017239952459931374,
    -0.017436498776078224,
    -0.0013854786520823836,
    -0.008676132187247276,
    -0.00044859148329123855,
    -0.007237129379063845,
    -0.025789732113480568,
    -0.04548651725053787,
    0.017015326768159866,
    0.013259881176054478,
    0.004885588772594929,
    -0.01017129048705101,
    -0.014053087681531906
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: security :: cryptography"
  ],
  "description": "# oscrypto\n\na compilation-free, always up-to-date encryption library for python that works\non windows, os x, linux and bsd. supports the following versions of python:\n2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10 and pypy.\n\n - [supported operating systems](#supported-operationg-systems)\n - [features](#features)\n - [why another python crypto library?](#why-another-python-crypto-library)\n - [related crypto libraries](#related-crypto-libraries)\n - [current release](#current-release)\n - [dependencies](#dependencies)\n - [installation](#installation)\n - [license](#license)\n - [documentation](#documentation)\n - [continuous integration](#continuous-integration)\n - [testing](#testing)\n - [development](#development)\n - [ci tasks](#ci-tasks)\n\n[![github actions ci](https://github.com/wbond/oscrypto/workflows/ci/badge.svg)](https://github.com/wbond/oscrypto/actions?workflow=ci)\n[![circleci](https://circleci.com/gh/wbond/oscrypto.svg?style=shield)](https://circleci.com/gh/wbond/oscrypto)\n[![pypi](https://img.shields.io/pypi/v/oscrypto.svg)](https://pypi.python.org/pypi/oscrypto)\n\n## supported operating systems\n\nthe library integrates with the encryption library that is part of the operating\nsystem. this means that a compiler is never needed, and os security updates take\ncare of patching vulnerabilities. supported operating systems include:\n\n - windows xp or newer\n   - uses:\n     - [cryptography api: next generation (cng)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa376210(v=vs.85).aspx)\n     - [secure channel](https://msdn.microsoft.com/en-us/library/windows/desktop/aa380123(v=vs.85).aspx) for tls\n     - [cryptoapi](https://msdn.microsoft.com/en-us/library/windows/desktop/aa380256(v=vs.85).aspx) for trust lists and xp support\n   - tested on:\n     - windows xp (no sni)\n     - windows 7\n     - windows 8.1\n     - windows server 2012\n     - windows 10\n - os x 10.7 or newer\n   - uses:\n     - [security.framework](https://developer.apple.com/library/prerelease/mac/documentation/security/reference/securityframeworkreference/index.html)\n     - [secure transport](https://developer.apple.com/library/prerelease/mac/documentation/security/reference/securetransportref/index.html#//apple_ref/doc/uid/tp30000155) for tls\n     - [commoncrypto](http://www.opensource.apple.com/source/commoncrypto/commoncrypto-55010/commoncrypto/) for pbkdf2\n     - openssl (or libressl on macos 10.13) for the pkcs #12 kdf\n   - tested on:\n     - os x 10.7\n     - os x 10.8\n     - os x 10.9\n     - os x 10.10\n     - os x 10.11\n     - os x 10.11 with openssl 1.1.0\n     - macos 10.12\n     - macos 10.13 with libressl 2.2.7\n     - macos 10.14\n     - macos 10.15\n     - macos 10.15 with openssl 3.0\n     - macos 11\n     - macos 12\n - linux or bsd\n   - uses one of:\n     - [openssl 0.9.8](https://www.openssl.org/docs/man0.9.8/)\n     - [openssl 1.0.x](https://www.openssl.org/docs/man1.0.0/)\n     - [openssl 1.1.0](https://www.openssl.org/docs/man1.1.0/)\n     - [openssl 3.0](https://www.openssl.org/docs/man3.0/)\n     - [libressl](http://www.libressl.org/)\n   - tested on:\n     - arch linux with openssl 1.0.2\n     - openbsd 5.7 with libressl\n     - ubuntu 10.04 with openssl 0.9.8\n     - ubuntu 12.04 with openssl 1.0.1\n     - ubuntu 15.04 with openssl 1.0.1\n     - ubuntu 16.04 with openssl 1.0.2 on raspberry pi 3 (armhf)\n     - ubuntu 18.04 with openssl 1.1.x (amd64, arm64, ppc64el)\n     - ubuntu 22.04 with openssl 3.0 (amd64)\n\n*os x 10.6 will not be supported due to a lack of available\ncryptographic primitives and due to lack of vendor support.*\n\n## features\n\ncurrently the following features are implemented. many of these should only be\nused for integration with existing/legacy systems. if you don't know which you\nshould, or should not use, please see [learning](docs/readme.md#learning).\n\n - [tlsv1.x socket wrappers](docs/tls.md)\n   - certificate verification performed by os trust roots\n   - custom ca certificate support\n   - sni support (except windows xp)\n   - session reuse via ids/tickets\n   - modern cipher suites (rc4, des, anon and null ciphers disabled)\n   - weak dh parameters and certificate signatures rejected\n   - sslv3 disabled by default, sslv2 unimplemented\n   - crl/ocsp revocation checks consistenty disabled\n - [exporting os trust roots](docs/trust_list.md)\n   - pem-formatted ca certs from the os for openssl-based code\n - [encryption/decryption](docs/symmetric.md)\n   - aes (128, 192, 256), cbc mode, pkcs7 padding\n   - aes (128, 192, 256), cbc mode, no padding\n   - tripledes 3-key, cbc mode, pkcs5 padding\n   - tripledes 2-key, cbc mode, pkcs5 padding\n   - des, cbc mode, pkcs5 padding\n   - rc2 (40-128), cbc mode, pkcs5 padding\n   - rc4 (40-128)\n   - rsa pkcsv1.5\n   - rsa oaep (sha1 only)\n - [generating public/private key pairs](docs/asymmetric.md)\n   - rsa (1024, 2048, 3072, 4096 bit)\n   - dsa (1024 bit on all platforms - 2048, 3072 bit with openssl 1.x or\n     windows 8)\n   - ec (secp256r1, secp384r1, secp521r1 curves)\n - [generating dh parameters](docs/asymmetric.md)\n - [signing and verification](docs/asymmetric.md)\n   - rsa pkcsv1.5\n   - rsa pss\n   - dsa\n   - ec\n - [loading and normalizing der and pem formatted keys](docs/keys.md)\n   - rsa public and private keys\n   - dsa public and private keys\n   - ec public and private keys\n   - x.509 certificates\n   - pkcs#12 archives (`.pfx`/`.p12`)\n - [key derivation](docs/kdf.md)\n   - pbkdf2\n   - pbkdf1\n   - pkcs#12 kdf\n - [random byte generation](docs/util.md)\n\nthe feature set was largely driven by the technologies used related to\ngenerating and validating x.509 certificates. the various cbc encryption schemes\nand kdfs are used to load encrypted private keys, and the various rsa padding\nschemes are part of x.509 signatures.\n\nfor modern cryptography not tied to an existing system, please see the\n[modern cryptography](docs/readme.md#modern-cryptography) section of the docs.\n\n*please note that this library does not include modern block modes such as ctr\nand gcm due to lack of support from both os x and openssl 0.9.8.*\n\n## why another python crypto library?\n\nin short, the existing cryptography libraries for python didn't fit the needs of\na couple of projects i was working on. primarily these are applications\ndistributed to end-users who aren't programmers, that need to handle tls and\nvarious technologies related to x.509 certificates.\n\nif your system is not tied to aes, tls, x.509, or related technologies, you\nprobably want [more modern cryptography](docs/readme.md#modern-cryptography).\n\ndepending on your needs, the [cryptography](https://cryptography.io) package may\nbe a good (or better) fit.\n\nsome things that make oscrypto unique:\n\n - no compiler needed, ever. no need to pre-compile shared libraries. just\n   distribute the python source files, any way you want.\n - uses the operating system's crypto library - does not require openssl on\n   windows or os x.\n - relies on the operating system for security patching. you don't need to\n   rebuild all of your apps every time there is a new tls vulnerability.\n - intentionally limited in scope to crypto primitives. other libraries\n   built upon it deal with certificate path validation, creating certificates\n   and csrs, constructing cms structures.\n - built on top of a fast, pure-python asn.1 parser,\n   [asn1crypto](https://github.com/wbond/asn1crypto).\n - tls functionality uses the operating system's trust list/ca certs and is\n   pre-configured with sane defaults\n - public apis are simple and use strict type checks to avoid errors\n\nsome downsides include:\n\n - does not currently implement:\n   - standalone dh key exchange\n   - various encryption modes such as gcm, ccm, ctr, cfb, ofb, ecb\n   - key wrapping\n   - cmac\n   - hkdf\n - non-tls functionality is architected for dealing with data that fits in\n   memory and is available all at once\n - developed by a single developer\n\n## related crypto libraries\n\n*oscrypto* is part of the modularcrypto family of python packages:\n\n - [asn1crypto](https://github.com/wbond/asn1crypto)\n - [oscrypto](https://github.com/wbond/oscrypto)\n - [csrbuilder](https://github.com/wbond/csrbuilder)\n - [certbuilder](https://github.com/wbond/certbuilder)\n - [crlbuilder](https://github.com/wbond/crlbuilder)\n - [ocspbuilder](https://github.com/wbond/ocspbuilder)\n - [certvalidator](https://github.com/wbond/certvalidator)\n\n## current release\n\n1.2.1 - [changelog](changelog.md)\n\n## dependencies\n\n - [*asn1crypto*](https://github.com/wbond/asn1crypto)\n - python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10 or pypy\n - openssl/libressl if on linux\u00b9\n\n*\u00b9 on linux, `ctypes.util.find_library()` is used to located openssl. alpine linux does not have an appropriate install by default for `find_library()` to work properly. instead, `oscrypto.use_openssl()` must be called with the path to the openssl shared libraries.*\n\n## installation\n\n```bash\npip install oscrypto\n```\n\n## license\n\n*oscrypto* is licensed under the terms of the mit license. see the\n[license](license) file for the exact license text.\n\n## documentation\n\n[*oscrypto* documentation](docs/readme.md)\n\n## continuous integration\n\nvarious combinations of platforms and versions of python are tested via:\n\n - [macos, linux, windows](https://github.com/wbond/oscrypto/actions/workflows/ci.yml) via github actions\n - [arm64](https://circleci.com/gh/wbond/oscrypto) via circleci\n\n## testing\n\ntests are written using `unittest` and require no third-party packages.\n\ndepending on what type of source is available for the package, the following\ncommands can be used to run the test suite.\n\n### git repository\n\nwhen working within a git working copy, or an archive of the git repository,\nthe full test suite is run via:\n\n```bash\npython run.py tests\n```\n\nto run only some tests, pass a regular expression as a parameter to `tests`.\n\n```bash\npython run.py tests aes\n```\n\nto run tests multiple times, in order to catch edge-case bugs, pass an integer\nto `tests`. if combined with a regular expression for filtering, pass the\nrepeat count after the regular expression.\n\n```bash\npython run.py tests 20\npython run.py tests aes 20\n```\n\n#### backend options\n\nto run tests using a custom build of openssl, or to use openssl on windows or\nmac, add `use_openssl` after `run.py`, like:\n\n```bash\npython run.py use_openssl=/path/to/libcrypto.so,/path/to/libssl.so tests\n```\n\nto run tests forcing the use of ctypes, even if cffi is installed, add\n`use_ctypes` after `run.py`:\n\n```bash\npython run.py use_ctypes=true tests\n```\n\nto run tests using the legacy windows crypto functions on windows 7+, add\n`use_winlegacy` after `run.py`:\n\n```bash\npython run.py use_winlegacy=true tests\n```\n\n#### internet tests\n\nto skip tests that require an internet connection, add `skip_internet` after\n`run.py`:\n\n```bash\npython run.py skip_internet=true tests\n```\n\n### pypi source distribution\n\nwhen working within an extracted source distribution (aka `.tar.gz`) from\npypi, the full test suite is run via:\n\n```bash\npython setup.py test\n```\n\n#### test options\n\nthe following env vars can control aspects of running tests:\n\n##### force openssl shared library paths\n\nsetting the env var `oscrypto_use_openssl` to a string in the form:\n\n```\n/path/to/libcrypto.so,/path/to/libssl.so\n```\n\nwill force use of specific openssl shared libraries.\n\nthis also works on mac and windows to force use of openssl instead of using\nnative crypto libraries.\n\n##### force use of ctypes\n\nby default, oscrypto will use the `cffi` module for ffi if it is installed.\n\nto use the slightly slower, but more widely-tested, `ctypes` ffi layer, set\nthe env var `openssl_use_ctypes=true`.\n\n##### force use of legacy windows crypto apis\n\non windows 7 and newer, oscrypto will use the cng backend by default.\n\nto force use of the older cryptoapi, set the env var\n`openssl_use_winlegacy=true`.\n\n##### skip tests requiring an internet connection\n\nsome of the tls tests require an active internet connection to ensure that\nvarious \"bad\" server certificates are rejected.\n\nto skip tests requiring an internet connection, set the env var\n`openssl_skip_internet_tests=true`.\n\n### package\n\nwhen the package has been installed via pip (or another method), the package\n`oscrypto_tests` may be installed and invoked to run the full test suite:\n\n```bash\npip install oscrypto_tests\npython -m oscrypto_tests\n```\n\n## development\n\nto install the package used for linting, execute:\n\n```bash\npip install --user -r requires/lint\n```\n\nthe following command will run the linter:\n\n```bash\npython run.py lint\n```\n\nsupport for code coverage can be installed via:\n\n```bash\npip install --user -r requires/coverage\n```\n\ncoverage is measured by running:\n\n```bash\npython run.py coverage\n```\n\nto install the packages requires to generate the api documentation, run:\n\n```bash\npip install --user -r requires/api_docs\n```\n\nthe documentation can then be generated by running:\n\n```bash\npython run.py api_docs\n```\n\nto install the necessary packages for releasing a new version on pypi, run:\n\n```bash\npip install --user -r requires/release\n```\n\nreleases are created by:\n\n - making a git tag in [semver](http://semver.org/) format\n - running the command:\n\n   ```bash\n   python run.py release\n   ```\n\nexisting releases can be found at https://pypi.python.org/pypi/oscrypto.\n\n## ci tasks\n\na task named `deps` exists to download and stage all necessary testing\ndependencies. on posix platforms, `curl` is used for downloads and on windows\npowershell with `net.webclient` is used. this configuration sidesteps issues\nrelated to getting pip to work properly and messing with `site-packages` for\nthe version of python being used.\n\nthe `ci` task runs `lint` (if flake8 is available for the version of python) and\n`coverage` (or `tests` if coverage is not available for the version of python).\nif the current directory is a clean git working copy, the coverage data is\nsubmitted to codecov.io.\n\n```bash\npython run.py deps\npython run.py ci\n```\n\n\n",
  "docs_url": null,
  "keywords": "crypto pki tls ssl x509 certificate encrypt decrypt sign verify rsa dsa ec dh",
  "license": "mit",
  "name": "oscrypto",
  "package_url": "https://pypi.org/project/oscrypto/",
  "project_url": "https://pypi.org/project/oscrypto/",
  "project_urls": {
    "Homepage": "https://github.com/wbond/oscrypto"
  },
  "release_url": "https://pypi.org/project/oscrypto/1.3.0/",
  "requires_dist": [
    "asn1crypto (>=1.5.1)"
  ],
  "requires_python": "",
  "summary": "tls (ssl) sockets, key generation, encryption, decryption, signing, verification and kdfs using the os crypto libraries. does not require a compiler, and relies on the os for patching. works on windows, os x and linux/bsd.",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "wbond",
    "will@wbond.net"
  ],
  "kwds": "oscrypto_use_openssl oscrypto_tests pypy cryptoapi use_openssl",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_oscrypto",
  "homepage": "https://github.com/wbond/oscrypto",
  "release_count": 24,
  "dependency_ids": [
    "pypi_asn1crypto"
  ]
}
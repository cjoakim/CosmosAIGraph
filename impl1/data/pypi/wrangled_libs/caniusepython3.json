{
  "classifiers": [
    "development status :: 7 - inactive",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "** note ** this project is no longer actively developed!\n\ncan i use python 3?\n===================\n\nthis script takes in a set of dependencies and then figures out which\nof them are holding you up from porting to python 3.\n\ncommand-line/web usage\n----------------------\n\nyou can specify your dependencies in multiple ways::\n\n    caniusepython3 -r requirements.txt test-requirement.txt\n    caniusepython3 -m pkg-info\n    caniusepython3 -p numpy scipy ipython\n    # if your project's setup.py uses setuptools\n    # (note that setup_requires can't be checked) ...\n    python setup.py caniusepython3\n\nthe output of the script will tell you how many (implicit) dependencies you need\nto transition to python 3 in order to allow you to make the same transition. it\nwill also list what projects have no dependencies blocking their\ntransition so you can ask them to start a port to python 3.\n\nif you prefer a web interface you can use https://caniusepython3.com by\njannis leidel.\n\n\nintegrating with your tests\n---------------------------\n\nif you want to check for python 3 availability as part of your tests, you can\nuse ``caniusepython3.check()``:\n\n.. code-block:: python\n\n    def check(requirements_paths=[], metadata=[], projects=[]):\n        \"\"\"return true if all of the specified dependencies have been ported to python 3.\n\n        the requirements_paths argument takes a sequence of file paths to\n        requirements files. the 'metadata' argument takes a sequence of strings\n        representing metadata. the 'projects' argument takes a sequence of project\n        names.\n\n        any project that is not listed on pypi will be considered ported.\n        \"\"\"\n\nyou can then integrate it into your tests like so:\n\n.. code-block:: python\n\n  import unittest\n  import caniusepython3\n\n  class dependenciesonpython3(unittest.testcase):\n    def test_dependencies(self):\n      # will begin to fail when dependencies are no longer blocking you\n      # from using python 3.\n      self.assertfalse(caniusepython3.check(projects=['ipython']))\n\nfor the change log, how to tell if a project has been ported, as well as help on\nhow to port a project, please see the\n`project website <https://github.com/brettcannon/caniusepython3>`__.\n\nextending ``pylint --py3k``\n---------------------------\n\nin `pylint <https://pypi.python.org/pypi/pylint>`__ 1.4, a ``--py3k`` option was\nadded to the linting tool to turn on checks for python 2/3\nincompatibilities (all other checks are turned off). while great,\nthose checks are a little conservative in order to always be accurate. to fill\nout those checks with stricter -- albeit potentially inaccurate -- checkers,\n``caniusepython3.pylint_checker`` exists. on top of everything ``pylint --py3k``\nalready checks for, it adds checks for:\n\n#. uses of ``open()`` (in python3, ``open()`` is actually ``io.open()``)\n#. string literals that do not have a ``b``/``u`` prefix or\n   ``from __future__ import unicode_literals``\n\nif you wish to use the checker with pylint, you can add it to your pylint\nconfiguration file, e.g.:\n\n.. code-block:: ini\n\n    [master]\n    load-plugins=caniusepython3.pylint_checker\n\nsecret, bonus feature\n---------------------\nif you would like to use a different name for the script and\nsetuptools command then set the environment variable ``ciu_alt_name`` to what\nyou would like the alternative name to be. reddit suggests ``icanhazpython3``.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "caniusepython3",
  "package_url": "https://pypi.org/project/caniusepython3/",
  "project_url": "https://pypi.org/project/caniusepython3/",
  "project_urls": {
    "Homepage": "https://github.com/brettcannon/caniusepython3"
  },
  "release_url": "https://pypi.org/project/caniusepython3/7.3.0/",
  "requires_dist": [
    "distlib",
    "setuptools",
    "packaging",
    "backports.functools-lru-cache",
    "requests",
    "futures ; python_version == \"2.7\""
  ],
  "requires_python": "",
  "summary": "determine what projects are blocking you from porting to python 3",
  "version": "7.3.0",
  "releases": [],
  "developers": [
    "brett@python.org",
    "brett_cannon"
  ],
  "kwds": "dependenciesonpython3 python3 caniusepython3 ipython setup_requires",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_caniusepython3",
  "homepage": "https://github.com/brettcannon/caniusepython3",
  "release_count": 25,
  "dependency_ids": [
    "pypi_backports.functools_lru_cache",
    "pypi_distlib",
    "pypi_futures",
    "pypi_packaging",
    "pypi_requests",
    "pypi_setuptools"
  ]
}
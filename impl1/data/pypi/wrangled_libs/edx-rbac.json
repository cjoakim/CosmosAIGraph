{
  "classifiers": [
    "development status :: 3 - alpha",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "intended audience :: developers",
    "license :: osi approved :: gnu affero general public license v3 or later (agplv3+)",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8"
  ],
  "description": "edx-rbac\n=============================\n\n|pypi-badge| |ci-badge| |codecov-badge| |doc-badge| |pyversions-badge|\n|license-badge|\n\noverview\n--------\n\nlibrary to help manage role based access controls for django services.\n\n* see the `getting started <https://github.com/openedx/edx-rbac/blob/master/docs/getting_started.rst>`_ guide to setup\n  your development environment.\n\n* see the `how to guide <https://github.com/openedx/edx-rbac/blob/master/docs/how_to_guide.rst>`_ to learn about the\n  fundamentals of edx-rbac and how to implement rbac in your django service.\n\nlicense\n-------\n\nthe code in this repository is licensed under the agpl 3.0 unless\notherwise noted.\n\nplease see ``license.txt`` for details.\n\nhow to contribute\n-----------------\n\ncontributions are very welcome.\n\nplease read `how to contribute <https://github.com/openedx/.github/blob/master/contributing.md>`_ for details.\n\n\npr description template should be automatically applied if you are sending pr from github interface; otherwise you\ncan find it it at `pull_request_template.md <https://github.com/openedx/edx-rbac/blob/master/.github/pull_request_template.md>`_\n\nissue report template should be automatically applied if you are sending it from github ui as well; otherwise you\ncan find it at `issue_template.md <https://github.com/openedx/edx-rbac/blob/master/.github/issue_template.md>`_\n\nreporting security issues\n-------------------------\n\nplease do not report security issues in public. please email security@edx.org.\n\ngetting help\n------------\n\nhave a question about this repository, or about open edx in general?  please\nrefer to this `list of resources`_ if you need any assistance.\n\n.. _list of resources: https://open.edx.org/getting-help\n\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/edx-rbac.svg\n    :target: https://pypi.python.org/pypi/edx-rbac/\n    :alt: pypi\n\n.. |ci-badge| image:: https://github.com/openedx/edx-rbac/workflows/python%20ci/badge.svg?branch=master\n    :target: https://github.com/openedx/edx-rbac/actions?query=workflow%3a%22python+ci%22\n    :alt: ci\n\n.. |codecov-badge| image:: http://codecov.io/github/edx/edx-rbac/coverage.svg?branch=master\n    :target: http://codecov.io/github/edx/edx-rbac?branch=master\n    :alt: codecov\n\n.. |doc-badge| image:: https://readthedocs.org/projects/edx-rbac/badge/?version=latest\n    :target: http://edx-rbac.readthedocs.io/en/latest/\n    :alt: documentation\n\n.. |pyversions-badge| image:: https://img.shields.io/pypi/pyversions/edx-rbac.svg\n    :target: https://pypi.python.org/pypi/edx-rbac/\n    :alt: supported python versions\n\n.. |license-badge| image:: https://img.shields.io/github/license/edx/edx-rbac.svg\n    :target: https://github.com/openedx/edx-rbac/blob/master/license.txt\n    :alt: license\n\n\nchange log\n----------\n\n..\n   all enhancements and patches to edx_rbac will be documented\n   in this file.  it adheres to the structure of http://keepachangelog.com/ ,\n   but in restructuredtext instead of markdown (for ease of incorporation into\n   sphinx documentation and the pypi description).\n\n   this project adheres to semantic versioning (http://semver.org/).\n\n.. there should always be an \"unreleased\" section for changes pending release.\n\nunreleased\n--------------------\n\n[1.8.0]\n-------\n* switch from ``edx-sphinx-theme`` to ``sphinx-book-theme`` since the former is\n  deprecated\n* added support for django 4.2\n\n[1.7.0]\n-------\n\n* fix: ``utils.get_role_auth_claim_for_user()`` now preserves the order of (role, context) pairs\n  as returned by the `get_assignment()` function.\n\n[1.6.0] - 2022-01-19\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* drop support for django<3.2\n* replacing ugettext with gettext to resolve removedindjango40 error.\n* added django40 support\n\n[1.5.1] - 2021-11-01\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* replacing ugettext_lazy with gettext_lazy to resolve removedindjango40warning.\n\n[1.5.0] - 2021-07-07\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* added support for django 3.0, 3.1, 3.2\n\n[1.4.2] - 2021-03-22\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* modifies ``create_role_auth_claim_for_user`` to return a list of *unique*\n  (role:context) entries, so that the jwt does not become too large\n  to fit in cookies/headers.\n\n[1.4.1] - 2021-01-22\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* add a ``userroleassignment.applies_to_all`` field, because explicit is better than implicit.\n  see the adr at `docs/decisions/0002-explicit-role-assignment-wildcard.rst`.\n\n[1.4.0]\n-------\n\n* update pypi token.\n\n[1.3.3] - 2020-10-02\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* removed ``python_2_unicode_compatible`` decorator.\n\n[1.3.2] - 2020-07-28\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``permissionrequiredforlistingmixin.get_queryset()`` should allow falsey ``base_queryset`` properties, like\n  an empty ``queryset`` object.  adds tests to verify that this is the case.\n\n[1.3.1] - 2020-06-16\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* update ``get_assignments()`` to guard against anonymoususers.\n* update ``contexts_accessible_from_database()`` to use ``get_assignments()`` instead of building a \"custom\" queryset.\n\n[1.3.0] - 2020-06-11\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adds a permissionrequiredforlistingmixin that can be used in drf modelviewsets and supports a list action.\n  this should allow list actions to return all of the elements from a base_queryset that\n  the requesting user has access to, either via their jwt or db-assigned roles.\n* adds/modifies utility functions that deal with permission-checking to support multiple roles and multiple contexts.\n\n[1.2.1] - 2020-05-08\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* exposes a new ``utils.feature_roles_from_jwt()`` function, which, given a decoded jwt,\n  will provide a mapping of feature roles to contexts/identifiers.\n* modifies ``utils.user_has_access_via_database()`` to check for multiple database role assignments\n  for a given user and role name (i.e. uses a ``filter()`` instead of a ``get()``).\n\n[1.2.0] - 2020-04-30\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* removed support for django 2.0 and 2.1\n* added support for python 3.8\n\n[1.1.3] - 2020-04-13\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* added check for anonymoususer in user_has_access_via_database to prevent 500 errors.\n\n[1.1.2] - 2020-03-27\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* added support for django 2.0, 2.1, and 2.2.\n\n[1.1.1] - 2020-03-02\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* fix bug in implicit role check when the same role has multiple contexts available.\n\n[1.1.0] - 2020-02-18\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* update `permissionrequiredmixin` to pass through an object to rule predicates, if `self.get_permision_required` exists and is callable\n\n\n[1.0.5] - 2019-12-18\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* updated requirements.\n\n[1.0.4] - 2019-12-17\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* updated utils for user with multiple contexts.\n\n[1.0.3] - 2019-09-12\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* use functools.wraps to prevent the decorator from swallowing the view name\n\n[1.0.2] - 2019-07-12\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* store current request on thread local storage using crum.\n\n[1.0.1] - 2019-05-27\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* edx-drf-extensions version upgrade.\n\n[1.0.0] - 2019-05-20\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* removed `get_request_or_stub` and `get_decoded_jwt_from_request` from utils.py\n\n[0.2.1] - 2019-05-08\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* edx-drf-extensions version upgrade.\n\n[0.2.0] - 2019-04-30\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* check for jwt presence in implicit permission.\n* refactor role retrieval to remove the dependency on django models for assigning roles.\n\n[0.1.11] - 2019-04-08\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* get jwt token from request.auth if it is not set on the cookie. this supports client credentials oauth2 flow.\n\n[0.1.10] - 2019-04-01\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* update context checks for implicit and explicit access for all resources access.\n\n[0.1.9] - 2019-04-01\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding support for checking context for implicit and explicit access.\n\n[0.1.8] - 2019-03-22\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding an additional argument for the permission_required decorator\n\n[0.1.7] - 2019-03-20\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding a mixin for authz permissions support.\n\n[0.1.6] - 2019-03-19\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding a decorator for authz permissions support.\n\n[0.1.5] - 2019-03-18\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding django admin support for models extending userroleassignment.\n\n[0.1.4] - 2019-03-07\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding a number of utils for roles in jwts and the database\n\n[0.1.3] - 2019-03-07\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* adding get_context to the userroleassignment class.\n\n[0.1.2] - 2019-03-06\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* quality fixes\n\n[0.1.1] - 2019-03-06\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* bumping version so we get pip updated with new models we added\n\n[0.1.0] - 2019-02-28\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nadded\n_____\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "django edx",
  "license": "agpl 3.0",
  "name": "edx-rbac",
  "package_url": "https://pypi.org/project/edx-rbac/",
  "project_url": "https://pypi.org/project/edx-rbac/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/edx-rbac"
  },
  "release_url": "https://pypi.org/project/edx-rbac/1.8.0/",
  "requires_dist": [
    "Django",
    "django-crum",
    "django-model-utils",
    "edx-drf-extensions",
    "six"
  ],
  "requires_python": "",
  "summary": "library to help managing role based access controls for django apps",
  "version": "1.8.0",
  "releases": [],
  "developers": [
    "edx",
    "oscm@edx.org"
  ],
  "kwds": "django edx_rbac django40 create_role_auth_claim_for_user pyversions",
  "license_kwds": "agpl 3.0",
  "libtype": "pypi",
  "id": "pypi_edx_rbac",
  "homepage": "https://github.com/openedx/edx-rbac",
  "release_count": 37,
  "dependency_ids": [
    "pypi_django",
    "pypi_django_crum",
    "pypi_django_model_utils",
    "pypi_edx_drf_extensions",
    "pypi_six"
  ]
}
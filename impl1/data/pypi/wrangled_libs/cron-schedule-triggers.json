{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# cronscheduletriggers: quartz syntax based cron trigger library.\n\n[![pipeline status](https://gitlab.com/dameon.andersen/cstriggers/badges/master/pipeline.svg)](https://gitlab.com/dameon.andersen/cstriggers/commits/master) [![coverage report](https://gitlab.com/dameon.andersen/cstriggers/badges/master/coverage.svg)](https://gitlab.com/dameon.andersen/cstriggers/commits/master)\n\n cron schedule triggers (cstriggers) is a python library enabling the ability to determine the next execution of a live schedule. its syntax is that of [quartz job scheduler](http://www.quartz-scheduler.org). this library is not a scheduling app or a task queue, there are plenty of those in the wild to choose from. when you need advanced customisation of triggers for tasks, and a common and conventional syntax for schedule notation, cstriggers comes to your aid. \n\n## this library is for those who\n\n - want the ability to generate future task data for visualization purposes.\n - want to combine their own choice of solutions to build a customizable integrated task queuing/scheduling system at any scale.\n - do not want to run java, but want to take advantage of the rich _quartz cron_ syntax\n - do not want to drag in many dependencies into their project (uses standard python3 libraries only).\n\n\n## example usage\n\ninitialize a schedule object with a cron notation string, a start date, and an optional end date. call `.next_trigger()` for a new date. notice that when an end_date is given, the schedule terminates at `2022-10-13t00:00:00` and not `2030-03-01t00:00:00` as it would naturally.\n\n```python\nfrom cstriggers.core.trigger import quartzcron\n\nschedule_string = \"0 0 0 1 jan-mar ? 2010-2030\"\nstart_date = \"2019-10-13t00:00:00\"\nend_date = \"2022-10-13t00:00:00\"\ncron_obj = quartzcron(schedule_string=schedule_string, start_date=start_date, end_date=end_date)\n\nprint(cron_obj.next_trigger(isoformat=true))\n```\n```\n>> 2020-01-01t00:00:00\n```\n\nfor multiple sequential dates call either `.next_trigger()` multiple times.\n\n```python\nfrom cstriggers.core.trigger import quartzcron\n\nschedule_string = \"0 0 0 1 jan-mar ? 2010-2030\"\nstart_date = \"2019-10-13t00:00:00\"\nend_date = \"2022-10-13t00:00:00\"\ncron_obj = quartzcron(schedule_string=schedule_string, start_date=start_date, end_date=end_date)\n\nprint(cron_obj.next_trigger(isoformat=true))\nprint(cron_obj.next_trigger(isoformat=true))\n\n```\n\n```\n>> 2020-01-01t00:00:00\n>> 2020-02-01t00:00:00\n```\n\nor call `.next_triggers()` with the number of triggers needed. \n\n```python\nfrom cstriggers.core.trigger import quartzcron\n\nschedule_string = \"0 0 0 1 jan-mar ? 2010-2030\"\nstart_date = \"2019-10-13t00:00:00\"\nend_date = \"2022-10-13t00:00:00\"\ncron_obj = quartzcron(schedule_string=schedule_string, start_date=start_date, end_date=end_date)\n\nprint(cron_obj.next_triggers(number_of_triggers=10, isoformat=true))\n```\n\n```\n>> [\n    '2020-01-01t00:00:00', \n    '2020-02-01t00:00:00', \n    '2020-03-01t00:00:00', \n    '2021-01-01t00:00:00', \n    '2021-02-01t00:00:00', \n    '2021-03-01t00:00:00', \n    '2022-01-01t00:00:00', \n    '2022-02-01t00:00:00', \n    '2022-03-01t00:00:00', \n    '2023-01-01t00:00:00'\n]\n```\n\n## roadmap\n- support for last_trigger(s) to retroactively look at schedule dates.\n- support for aws cron expression syntax.\n\n",
  "docs_url": null,
  "keywords": "quartz cron notation cronjob aws rate schedule scheduling office/business triggers tasks jobs runner rq queue apscheduler calendar date datetime",
  "license": "mit",
  "name": "cron-schedule-triggers",
  "package_url": "https://pypi.org/project/cron-schedule-triggers/",
  "project_url": "https://pypi.org/project/cron-schedule-triggers/",
  "project_urls": {
    "Homepage": "https://gitlab.com/dameon.andersen/cstriggers"
  },
  "release_url": "https://pypi.org/project/cron-schedule-triggers/0.0.11/",
  "requires_dist": [
    "pytz (==2019.3)"
  ],
  "requires_python": ">=3.6",
  "summary": "cron schedule triggers ~ a library for determining quartz cron schedule trigger dates.",
  "version": "0.0.11",
  "releases": [],
  "developers": [
    "dameon.andersen@facteon.global",
    "dameon_andersen"
  ],
  "kwds": "cron_ scheduler cron scheduling cronjob",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cron_schedule_triggers",
  "homepage": "https://gitlab.com/dameon.andersen/cstriggers",
  "release_count": 10,
  "dependency_ids": [
    "pypi_pytz"
  ]
}
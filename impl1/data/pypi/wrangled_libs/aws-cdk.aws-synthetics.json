{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon cloudwatch synthetics construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\namazon cloudwatch synthetics allow you to monitor your application by generating **synthetic** traffic. the traffic is produced by a **canary**: a configurable script that runs on a schedule. you configure the canary script to follow the same routes and perform the same actions as a user, which allows you to continually verify your user experience even when you don't have any traffic on your applications.\n\n## canary\n\nto illustrate how to use a canary, assume your application defines the following endpoint:\n\n```console\n% curl \"https://api.example.com/user/books/topbook/\"\nthe hitchhikers guide to the galaxy\n\n```\n\nthe below code defines a canary that will hit the `books/topbook` endpoint every 5 minutes:\n\n```python\ncanary = synthetics.canary(self, \"mycanary\",\n    schedule=synthetics.schedule.rate(duration.minutes(5)),\n    test=synthetics.test.custom(\n        code=synthetics.code.from_asset(path.join(__dirname, \"canary\")),\n        handler=\"index.handler\"\n    ),\n    runtime=synthetics.runtime.synthetics_nodejs_puppeteer_3_1,\n    environment_variables={\n        \"stage\": \"prod\"\n    }\n)\n```\n\nthe following is an example of an `index.js` file which exports the `handler` function:\n\n```js\nconst synthetics = require('synthetics');\nconst log = require('syntheticslogger');\n\nconst pageloadblueprint = async function () {\n  // configure the stage of the api using environment variables\n  const url = `https://api.example.com/${process.env.stage}/user/books/topbook/`;\n\n  const page = await synthetics.getpage();\n  const response = await page.goto(url, { waituntil: 'domcontentloaded', timeout: 30000 });\n  // wait for page to render. increase or decrease wait time based on endpoint being monitored.\n  await page.waitfor(15000);\n  // this will take a screenshot that will be included in test output artifacts.\n  await synthetics.takescreenshot('loaded', 'loaded');\n  const pagetitle = await page.title();\n  log.info('page title: ' + pagetitle);\n  if (response.status() !== 200) {\n    throw 'failed to load page!';\n  }\n};\n\nexports.handler = async () => {\n  return await pageloadblueprint();\n};\n```\n\n> **note:** the function **must** be called `handler`.\n\nthe canary will automatically produce a cloudwatch dashboard:\n\n![ui screenshot](images/ui-screenshot.png)\n\nthe canary code will be executed in a lambda function created by synthetics on your behalf. the lambda function includes a custom [runtime](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries_library.html) provided by synthetics. the provided runtime includes a variety of handy tools such as [puppeteer](https://www.npmjs.com/package/puppeteer-core) (for nodejs based one) and chromium.\n\nto learn more about synthetics capabilities, check out the [docs](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries.html).\n\n### canary schedule\n\nyou can specify the schedule on which a canary runs by providing a\n[`schedule`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-synthetics.schedule.html)\nobject to the `schedule` property.\n\nconfigure a run rate of up to 60 minutes with `schedule.rate`:\n\n```python\nschedule = synthetics.schedule.rate(duration.minutes(5))\n```\n\nyou can also specify a [cron expression](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries_cron.html) with `schedule.cron`:\n\n```python\nschedule = synthetics.schedule.cron(\n    hour=\"0,8,16\"\n)\n```\n\nif you want the canary to run just once upon deployment, you can use `schedule.once()`.\n\n### configuring the canary script\n\nto configure the script the canary executes, use the `test` property. the `test` property accepts a `test` instance that can be initialized by the `test` class static methods. currently, the only implemented method is `test.custom()`, which allows you to bring your own code. in the future, other methods will be added. `test.custom()` accepts `code` and `handler` properties -- both are required by synthetics to create a lambda function on your behalf.\n\nthe `synthetics.code` class exposes static methods to bundle your code artifacts:\n\n* `code.frominline(code)` - specify an inline script.\n* `code.fromasset(path)` - specify a .zip file or a directory in the local filesystem which will be zipped and uploaded to s3 on deployment. see the above note for directory structure.\n* `code.frombucket(bucket, key[, objectversion])` - specify an s3 object that contains the .zip file of your runtime code. see the above note for directory structure.\n\nusing the `code` class static initializers:\n\n```python\n# to supply the code from a s3 bucket:\nimport aws_cdk.aws_s3 as s3\n# to supply the code inline:\nsynthetics.canary(self, \"inline canary\",\n    test=synthetics.test.custom(\n        code=synthetics.code.from_inline(\"/* synthetics handler code */\"),\n        handler=\"index.handler\"\n    ),\n    runtime=synthetics.runtime.synthetics_nodejs_puppeteer_3_4\n)\n\n# to supply the code from your local filesystem:\nsynthetics.canary(self, \"asset canary\",\n    test=synthetics.test.custom(\n        code=synthetics.code.from_asset(path.join(__dirname, \"canary\")),\n        handler=\"index.handler\"\n    ),\n    runtime=synthetics.runtime.synthetics_nodejs_puppeteer_3_4\n)\nbucket = s3.bucket(self, \"code bucket\")\nsynthetics.canary(self, \"bucket canary\",\n    test=synthetics.test.custom(\n        code=synthetics.code.from_bucket(bucket, \"canary.zip\"),\n        handler=\"index.handler\"\n    ),\n    runtime=synthetics.runtime.synthetics_nodejs_puppeteer_3_4\n)\n```\n\n> **note:** synthetics have a specified folder structure for canaries. for node scripts supplied via `code.fromasset()` or `code.frombucket()`, the canary resource requires the following folder structure:\n>\n> ```plaintext\n> canary/\n> \u251c\u2500\u2500 nodejs/\n>    \u251c\u2500\u2500 node_modules/\n>         \u251c\u2500\u2500 <filename>.js\n> ```\n>\n> for python scripts supplied via `code.fromasset()` or `code.frombucket()`, the canary resource requires the following folder structure:\n>\n> ```plaintext\n> canary/\n> \u251c\u2500\u2500 python/\n>     \u251c\u2500\u2500 <filename>.py\n> ```\n>\n> see synthetics [docs](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries_writingcanary.html).\n\n### running a canary on a vpc\n\nyou can specify what [vpc a canary executes in](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries_vpc.html).\nthis can allow for monitoring services that may be internal to a specific vpc. to place a canary within a vpc, you can specify the `vpc` property with the desired `vpc` to place then canary in.\nthis will automatically attach the appropriate iam permissions to attach to the vpc. this will also create a security group and attach to the default subnets for the vpc unless specified via `vpcsubnets` and `securitygroups`.\n\n```python\nimport aws_cdk.aws_ec2 as ec2\n\n# vpc: ec2.ivpc\n\nsynthetics.canary(self, \"vpc canary\",\n    test=synthetics.test.custom(\n        code=synthetics.code.from_asset(path.join(__dirname, \"canary\")),\n        handler=\"index.handler\"\n    ),\n    runtime=synthetics.runtime.synthetics_nodejs_puppeteer_3_4,\n    vpc=vpc\n)\n```\n\n> **note:** by default, the synthetics runtime needs access to the s3 and cloudwatch apis, which will fail in a private subnet without internet access enabled (e.g. an isolated subnnet).\n>\n> ensure that the canary is placed in a vpc either with internet connectivity or with vpc endpoints for s3 and cloudwatch enabled and configured.\n>\n> see [synthetics vpc docs](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/cloudwatch_synthetics_canaries_vpc.html).\n\n### alarms\n\nyou can configure a cloudwatch alarm on a canary metric. metrics are emitted by cloudwatch automatically and can be accessed by the following apis:\n\n* `canary.metricsuccesspercent()` - percentage of successful canary runs over a given time\n* `canary.metricduration()` - how much time each canary run takes, in seconds.\n* `canary.metricfailed()` - number of failed canary runs over a given time\n\ncreate an alarm that tracks the canary metric:\n\n```python\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# canary: synthetics.canary\n\ncloudwatch.alarm(self, \"canaryalarm\",\n    metric=canary.metric_success_percent(),\n    evaluation_periods=2,\n    threshold=90,\n    comparison_operator=cloudwatch.comparisonoperator.less_than_threshold\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-synthetics",
  "package_url": "https://pypi.org/project/aws-cdk.aws-synthetics/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-synthetics/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-synthetics/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-s3-assets (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::synthetics",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cloudwatch aws_cdk cdk_aws cloudwatch amazoncloudwatch",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_synthetics",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 193,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_s3_assets",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: other environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: libraries"
  ],
  "description": "# python-i18n [![build status](https://travis-ci.org/danhper/python-i18n.png?branch=master)](https://travis-ci.org/danhper/python-i18n) [![coverage status](https://coveralls.io/repos/github/danhper/python-i18n/badge.svg?branch=master)](https://coveralls.io/github/danhper/python-i18n?branch=master) [![code climate](https://codeclimate.com/github/danhper/python-i18n/badges/gpa.svg)](https://codeclimate.com/github/danhper/python-i18n)\n\n\nthis library provides i18n functionality for python 3 out of the box. the usage is mostly based on rails i18n library.\n\n## installation\n\njust run\n\n    pip install python-i18n\n\nif you want to use yaml to store your translations, use\n\n    pip install python-i18n[yaml]\n\n## usage\n### basic usage\n\nthe simplest, though not very useful usage would be\n\n    import i18n\n    i18n.add_translation('foo', 'bar')\n    i18n.t('foo') # bar\n\n### using translation files\n\nyaml and json formats are supported to store translations. with the default configuration, if you have the following `foo.en.yml` file\n\n    en:\n      hi: hello world !\n\nin `/path/to/translations` folder, you simply need to add the folder to the translations path.\n\n    import i18n\n    i18n.load_path.append('/path/to/translations')\n    i18n.t('foo.hi') # hello world !\n\nplease note that yaml format is used as default file format if you have `yaml` module installed.\nif both `yaml` and `json` modules available and you want to use json to store translations, explicitly specify that: `i18n.set('file_format', 'json')`\n\n### memoization\n\nsetting the configuration value `enable_memoization` in the settings dir will load the files from disk the first time they\nare loaded and then store their content in memory. on the next use the file content will be provided from memory and not\nloaded from disk, preventing disk access. while this can be useful in some contexts, keep in mind there is no current way of\nissuing a command to the reloader to re-read the files from disk, so if you are updating your translation file without restarting\nthe interpreter do not use this option.\n\n### namespaces\n\n#### file namespaces\nin the above example, the translation key is `foo.hi` and not just `hi`. this is because the translation filename format is by default `{namespace}.{locale}.{format}`, so the {namespace} part of the file is used as translation.\n\nto remove `{namespace}` from filename format please change the `filename_format` configuration.\n\n    i18n.set('filename_format', '{locale}.{format}')\n\n#### directory namespaces\nif your files are in subfolders, the foldernames are also used as namespaces, so for example if your translation root path is `/path/to/translations` and you have the file `/path/to/translations/my/app/name/foo.en.yml`, the translation namespace for the file will be `my.app.name` and the file keys will therefore be accessible from `my.app.name.foo.my_key`.\n\n## functionalities\n### placeholder\n\nyou can of course use placeholders in your translations. with the default configuration, the placeholders are used by inserting `%{placeholder_name}` in the ntranslation string. here is a sample usage.\n\n    i18n.add_translation('hi', 'hello %{name} !')\n    i18n.t('hi', name='bob') # hello bob !\n\n### pluralization\n\npluralization is based on rail i18n module. by passing a `count` variable to your translation, it will be pluralized. the translation value should be a dictionnary with at least the keys `one` and `many`. you can add a `zero` or `few` key when needed, if it is not present `many` will be used instead. here is a sample usage.\n\n    i18n.add_translation('mail_number', {\n        'zero': 'you do not have any mail.',\n        'one': 'you have a new mail.',\n        'few': 'you only have %{count} mails.',\n        'many': 'you have %{count} new mails.'\n    })\n    i18n.t('mail_number', count=0) # you do not have any mail.\n    i18n.t('mail_number', count=1) # you have a new mail.\n    i18n.t('mail_number', count=3) # you only have 3 new mails.\n    i18n.t('mail_number', count=12) # you have 12 new mails.\n\n### fallback\n\nyou can set a fallback which will be used when the key is not found in the default locale.\n\n    i18n.set('locale', 'jp')\n    i18n.set('fallback', 'en')\n    i18n.add_translation('foo', 'bar', locale='en')\n    i18n.t('foo') # bar\n\n### skip locale from root\nsometimes i18n structure file came from another project or not contains root element with locale eg. `en` name.\n\n    {\n        \"foo\": \"foobar\"\n    }\n\nhowever we would like to use this i18n .json file in our python sub-project or micro service as base file for translations.\n`python-i18n` has special configuration tha is skipping locale eg. `en` root data element from the file.\n\n    i18n.set('skip_locale_root_data', true)\n\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "python-i18n",
  "package_url": "https://pypi.org/project/python-i18n/",
  "project_url": "https://pypi.org/project/python-i18n/",
  "project_urls": {
    "Download": "https://github.com/tuvistavie/python-i18n/archive/master.zip",
    "Homepage": "https://github.com/tuvistavie/python-i18n"
  },
  "release_url": "https://pypi.org/project/python-i18n/0.3.9/",
  "requires_dist": [
    "pyyaml (>=3.10) ; extra == 'yaml'"
  ],
  "requires_python": "",
  "summary": "translation library for python",
  "version": "0.3.9",
  "releases": [],
  "developers": [
    "daniel_perez",
    "tuvistavie@gmail.com"
  ],
  "kwds": "i18n add_translation translations locale yaml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_i18n",
  "homepage": "https://github.com/tuvistavie/python-i18n",
  "release_count": 17,
  "dependency_ids": [
    "pypi_pyyaml"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. image:: https://github.com/agronholm/typeguard/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/typeguard/actions/workflows/test.yml\n  :alt: build status\n.. image:: https://coveralls.io/repos/agronholm/typeguard/badge.svg?branch=master&service=github\n  :target: https://coveralls.io/github/agronholm/typeguard?branch=master\n  :alt: code coverage\n.. image:: https://readthedocs.org/projects/typeguard/badge/?version=latest\n  :target: https://typeguard.readthedocs.io/en/latest/?badge=latest\n  :alt: documentation\n\nthis library provides run-time type checking for functions defined with\n`pep 484 <https://www.python.org/dev/peps/pep-0484/>`_ argument (and return) type\nannotations, and any arbitrary objects. it can be used together with static type\ncheckers as an additional layer of type safety, to catch type violations that could only\nbe detected at run time.\n\ntwo principal ways to do type checking are provided:\n\n#. the ``check_type`` function:\n\n   * like ``isinstance()``, but supports arbitrary type annotations (within limits)\n   * can be used as a ``cast()`` replacement, but with actual checking of the value\n#. code instrumentation:\n\n   * entire modules, or individual functions (via ``@typechecked``) are recompiled, with\n     type checking code injected into them\n   * automatically checks function arguments, return values and assignments to annotated\n     local variables\n   * for generator functions (regular and async), checks yield and send values\n   * requires the original source code of the instrumented module(s) to be accessible\n\ntwo options are provided for code instrumentation:\n\n#. the ``@typechecked`` function:\n\n   * can be applied to functions individually\n#. the import hook (``typeguard.install_import_hook()``):\n\n   * automatically instruments targeted modules on import\n   * no manual code changes required in the target modules\n   * requires the import hook to be installed before the targeted modules are imported\n   * may clash with other import hooks\n\nsee the documentation_ for further information.\n\n.. _documentation: https://typeguard.readthedocs.io/en/latest/\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "typeguard",
  "package_url": "https://pypi.org/project/typeguard/",
  "project_url": "https://pypi.org/project/typeguard/",
  "project_urls": {
    "Change log": "https://typeguard.readthedocs.io/en/latest/versionhistory.html",
    "Documentation": "https://typeguard.readthedocs.io/en/latest/",
    "Issue tracker": "https://github.com/agronholm/typeguard/issues",
    "Source code": "https://github.com/agronholm/typeguard"
  },
  "release_url": "https://pypi.org/project/typeguard/4.1.5/",
  "requires_dist": [
    "importlib-metadata >=3.6 ; python_version < \"3.10\"",
    "typing-extensions >=4.7.0 ; python_version < \"3.12\"",
    "packaging ; extra == 'doc'",
    "Sphinx >=7 ; extra == 'doc'",
    "sphinx-autodoc-typehints >=1.2.0 ; extra == 'doc'",
    "coverage[toml] >=7 ; extra == 'test'",
    "pytest >=7 ; extra == 'test'",
    "mypy >=1.2.0 ; (platform_python_implementation != \"PyPy\") and extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "run-time type checker for python",
  "version": "4.1.5",
  "releases": [],
  "developers": [
    "alex.gronholm@nextday.fi"
  ],
  "kwds": "typeguard check_type type typechecked yml",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_typeguard",
  "homepage": "",
  "release_count": 65,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_importlib_metadata",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "window ops\n================\n\n<!-- warning: this file was autogenerated! do not edit! -->\n\nthis library is intended to be used as an alternative to\n`pd.series.rolling` and `pd.series.expanding` to gain a speedup by using\nnumba optimized functions operating on numpy arrays. there are also\nonline classes for more efficient updates of window statistics.\n\n## install\n\n`pip install window-ops`\n\n## how to use\n\n### transformations\n\nfor a transformations `n_samples` -\\> `n_samples` you can use\n`{[seasonal_](rolling|expanding)}_{(mean|max|min|std)}` on an array.\n\n#### benchmarks\n\n``` python\npd.__version__\n```\n\n    '1.3.5'\n\n``` python\nn_samples = 10_000  # array size\nwindow_size = 8  # for rolling operations\nseason_length = 7  # for seasonal operations\nexecute_times = 10 # number of times each function will be executed\n```\n\naverage times in milliseconds.\n\n``` python\ntimes.applymap('{:.2f}'.format)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>window_ops</th>\n      <th>pandas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>rolling_mean</th>\n      <td>0.03</td>\n      <td>0.43</td>\n    </tr>\n    <tr>\n      <th>rolling_max</th>\n      <td>0.14</td>\n      <td>0.57</td>\n    </tr>\n    <tr>\n      <th>rolling_min</th>\n      <td>0.14</td>\n      <td>0.58</td>\n    </tr>\n    <tr>\n      <th>rolling_std</th>\n      <td>0.06</td>\n      <td>0.54</td>\n    </tr>\n    <tr>\n      <th>expanding_mean</th>\n      <td>0.03</td>\n      <td>0.31</td>\n    </tr>\n    <tr>\n      <th>expanding_max</th>\n      <td>0.05</td>\n      <td>0.76</td>\n    </tr>\n    <tr>\n      <th>expanding_min</th>\n      <td>0.05</td>\n      <td>0.47</td>\n    </tr>\n    <tr>\n      <th>expanding_std</th>\n      <td>0.09</td>\n      <td>0.41</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_mean</th>\n      <td>0.05</td>\n      <td>3.89</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_max</th>\n      <td>0.18</td>\n      <td>4.27</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_min</th>\n      <td>0.18</td>\n      <td>3.75</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_std</th>\n      <td>0.08</td>\n      <td>4.38</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_mean</th>\n      <td>0.04</td>\n      <td>3.18</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_max</th>\n      <td>0.06</td>\n      <td>3.29</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_min</th>\n      <td>0.06</td>\n      <td>3.28</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_std</th>\n      <td>0.12</td>\n      <td>3.89</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n``` python\nspeedups = times['pandas'] / times['window_ops']\nspeedups = speedups.to_frame('times faster')\nspeedups.applymap('{:.0f}'.format)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>times faster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>rolling_mean</th>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>rolling_max</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>rolling_min</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>rolling_std</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>expanding_mean</th>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>expanding_max</th>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>expanding_min</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>expanding_std</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_mean</th>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_max</th>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_min</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>seasonal_rolling_std</th>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_mean</th>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_max</th>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_min</th>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>seasonal_expanding_std</th>\n      <td>33</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n### online\n\nif you have an array for which you want to compute a window statistic\nand then keep updating it as more samples come in you can use the\nclasses in the `window_ops.online` module. they all have a\n`fit_transform` method which take the array and return the\ntransformations defined above but also have an `update` method that take\na single value and return the new statistic.\n\n#### benchmarks\n\naverage time in milliseconds it takes to transform the array and perform\n100 updates.\n\n``` python\ntimes.to_frame().applymap('{:.2f}'.format)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>average time (ms)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>rollingmean</th>\n      <td>0.12</td>\n    </tr>\n    <tr>\n      <th>rollingmax</th>\n      <td>0.23</td>\n    </tr>\n    <tr>\n      <th>rollingmin</th>\n      <td>0.22</td>\n    </tr>\n    <tr>\n      <th>rollingstd</th>\n      <td>0.32</td>\n    </tr>\n    <tr>\n      <th>expandingmean</th>\n      <td>0.10</td>\n    </tr>\n    <tr>\n      <th>expandingmax</th>\n      <td>0.07</td>\n    </tr>\n    <tr>\n      <th>expandingmin</th>\n      <td>0.07</td>\n    </tr>\n    <tr>\n      <th>expandingstd</th>\n      <td>0.17</td>\n    </tr>\n    <tr>\n      <th>seasonalrollingmean</th>\n      <td>0.28</td>\n    </tr>\n    <tr>\n      <th>seasonalrollingmax</th>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>seasonalrollingmin</th>\n      <td>0.38</td>\n    </tr>\n    <tr>\n      <th>seasonalrollingstd</th>\n      <td>0.42</td>\n    </tr>\n    <tr>\n      <th>seasonalexpandingmean</th>\n      <td>0.17</td>\n    </tr>\n    <tr>\n      <th>seasonalexpandingmax</th>\n      <td>0.14</td>\n    </tr>\n    <tr>\n      <th>seasonalexpandingmin</th>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>seasonalexpandingstd</th>\n      <td>0.23</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n",
  "docs_url": null,
  "keywords": "rolling,expanding",
  "license": "apache software license 2.0",
  "name": "window-ops",
  "package_url": "https://pypi.org/project/window-ops/",
  "project_url": "https://pypi.org/project/window-ops/",
  "project_urls": {
    "Homepage": "https://github.com/jmoralez/window_ops/tree/master/"
  },
  "release_url": "https://pypi.org/project/window-ops/0.0.14/",
  "requires_dist": [
    "numba",
    "numpy",
    "pandas ; extra == 'dev'"
  ],
  "requires_python": ">=3.6",
  "summary": "implementations of window operations such as rolling and expanding.",
  "version": "0.0.14",
  "releases": [],
  "developers": [
    "jmorales@grupoabraxas.com"
  ],
  "kwds": "seasonal_rolling_mean rolling_mean seasonal_rolling_std seasonal_rolling_max seasonal_rolling_min",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_window_ops",
  "homepage": "https://github.com/jmoralez/window_ops/tree/master/",
  "release_count": 14,
  "dependency_ids": [
    "pypi_numba",
    "pypi_numpy",
    "pypi_pandas"
  ]
}
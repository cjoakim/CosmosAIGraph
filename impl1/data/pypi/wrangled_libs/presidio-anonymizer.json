{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# presidio anonymizer\n\n## description\n\nthe presidio anonymizer is a python based module for anonymizing detected pii text\nentities with desired values.\n\n![anonymizer design](../docs/assets/anonymizer-design.png)\n\n### deploy presidio anonymizer to azure\n\nuse the following button to deploy presidio anonymizer to your azure subscription.\n\n[![deploy to azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/microsoft.template/uri/https%3a%2f%2fraw.githubusercontent.com%2fmicrosoft%2fpresidio%2fmain%2fpresidio-anonymizer%2fdeploytoazure.json)\n\n\nthe presidio-anonymizer package contains both anonymizers and deanonymizers.\n- *anonymizers* are used to replace a pii entity text with some other value.\n- *deanonymizers* are used to revert the anonymization operation. \n  for example, to decrypt an encrypted text.\n\n### anonymizer\n\npresidio anonymizer comes by default with the following anonymizers:\n\n-   **replace**: replaces the pii with desired value.\n    -   parameters: `new_value` - replaces existing text with the given value.\n        if `new_value` is not supplied or empty, default behavior will be: <entity_type>\n        e.g: <phone_number>\n\n-   **redact**: removes the pii completely from text.\n    -   parameters: none\n-   **hash**: hashes the pii using either sha256, sha512 or md5. \n    -   parameters:\n        - `hash_type`: sets the type of hashing. \n          can be either `sha256`, `sha512` or `md5`.\n          the default hash type is `sha256`.\n-   **mask**: replaces the pii with a sequence of a given character.\n    -   parameters:\n\n        -   `chars_to_mask`: the amount of characters out of the pii that should be\n            replaced.\n        -   `masking_char`: the character to be replaced with.\n        -   `from_end`: whether to mask the pii from it's end.\n\n-   **encrypt**: encrypt the pii entity text and replace the original with the encrypted string. \n-   **custom**: replace the pii with the result of the function executed on the pii string.\n    - parameters: `lambda`: lambda function to execute on the pii string.\n    the lambda return type must be a string.\n\n\nthe **anonymizer** default setting is to use the advanced encryption standard (aes) as the encryption algorithm, also known as rijndael. \n\n-  parameters:\n    - `key`: a cryptographic key used for the encryption. \n      the length of the key needs to be of 128, 192 or 256 bits, in a string format.\n\nnote: if the default anonymizer is not provided, \nthe default anonymizer is \"replace\" for all entities. \nthe replacing value will be the entity type e.g.: <phone_number>\n\n#### handling overlaps between entities\n\nas the input text could potentially have overlapping pii entities, there are different\nanonymization scenarios:\n\n-   **no overlap (single pii)**: when there is no overlap in spans of entities, \n    presidio anonymizer uses a given or default anonymization operator to anonymize \n    and replace the pii text entity.\n-   **full overlap of pii entity spans**: when entities have overlapping substrings,  \n    the pii with the higher score will be taken. \n    between piis with identical scores, the selection is arbitrary.\n-   **one pii is contained in another**: presidio anonymizer will use the pii with the larger text even if it's score is lower.\n-   **partial intersection**: presidio anonymizer will anonymize each individually and will return a concatenation of the anonymized text. \n    for example: \n    for the text\n    ```\n    i'm george washington square park.\n    ``` \n    assuming one entity is `george washington` and the other is `washington state park` \n    and assuming the default anonymizer, the result would be \n    ```\n    i'm <person><location>.\n    ```\n\nadditional examples for overlapping pii scenarios:\n\ntext:\n```\nmy name is inigo montoya. you killed my father. prepare to die. btw my number is:\n03-232323.\n```\n\n-   no overlaps: assuming only `inigo` is recognized as name:\n    ```\n    my name is <name> montoya. you killed my father. prepare to die. btw my number is:\n    03-232323.\n    ```\n-   full overlap: assuming the number is recognized as phone_number with score of 0.7 and as ssn\n    with score of 0.6, the higher score would count:\n    ```\n    my name is inigo montoya. you killed my father. prepare to die. btw my number is: <\n    phone_number>.\n    ```\n-   one pii is contained is another: assuming inigo is recognized as first_name and inigo montoya\n    was recognized as name, the larger one will be used:\n    ```\n    my name is <name>. you killed my father. prepare to die. btw my number is: 03-232323.\n    ```\n-   partial intersection: assuming the number 03-2323 is recognized as a phone_number but 232323\n    is recognized as ssn:\n    ```\n    my name is inigo montoya. you killed my father. prepare to die. btw my number is: <\n    phone_number><ssn>.\n    ```\n\n### deanonymizer\n\npresidio deanonymizer currently contains one operator:\n\n-   **decrypt**: replace the encrypted text with decrypted text. \n    uses advanced encryption standard (aes) as the encryption algorithm, also known as rijndael. \n    -  parameters:\n        -   `key` - a cryptographic key used for the encryption. \n            the length of the key needs to be of 128, 192 or 256 bits, in a string format.\n\nplease notice: you can use \"default\" as an operator key to define an operator over all entities.\n\n## installation\n\n### as a python package:\n\nto install presidio anonymizer, run the following, preferably in a virtual environment:\n\n```sh\npip install presidio-anonymizer\n```\n\n#### getting started\n\n```python\nfrom presidio_anonymizer import anonymizerengine\nfrom presidio_anonymizer.entities import recognizerresult, operatorconfig\n\n# initialize the engine with logger.\nengine = anonymizerengine()\n\n# invoke the anonymize function with the text, \n# analyzer results (potentially coming from presidio-analyzer) and\n# operators to get the anonymization output:\nresult = engine.anonymize(\n    text=\"my name is bond, james bond\",\n    analyzer_results=[\n        recognizerresult(entity_type=\"person\", start=11, end=15, score=0.8),\n        recognizerresult(entity_type=\"person\", start=17, end=27, score=0.8),\n    ],\n    operators={\"person\": operatorconfig(\"replace\", {\"new_value\": \"bip\"})},\n)\n\nprint(result)\n```\nthis example take the output of the anonymizerengine with encrypted pii entities, \nand decrypt it back to the original text:\n```python\nfrom presidio_anonymizer import deanonymizeengine\nfrom presidio_anonymizer.entities import operatorresult, operatorconfig\n\n# initialize the engine with logger.\nengine = deanonymizeengine()\n\n# invoke the deanonymize function with the text, anonymizer results and\n# operators to define the deanonymization type.\nresult = engine.deanonymize(\n    text=\"my name is s184cmt9drj7qakq21jtrpyzghnbotf9pn/nen8jme0=\",\n    entities=[\n        operatorresult(start=11, end=55, entity_type=\"person\"),\n    ],\n    operators={\"default\": operatorconfig(\"decrypt\", {\"key\": \"wmzq4t7w!z%c&f)j\"})},\n)\n\nprint(result)\n\n```\n\n### as docker service:\n\nin folder presidio/presidio-anonymizer run:\n\n```\ndocker-compose up -d\n```\n\n### http api\n\nfollow the [api spec](https://microsoft.github.io/presidio/api-docs/api-docs.html#tag/anonymizer) for the\nanonymizer rest api reference details\n\n\n",
  "docs_url": null,
  "keywords": "presidio_anonymizer",
  "license": "mit license",
  "name": "presidio-anonymizer",
  "package_url": "https://pypi.org/project/presidio-anonymizer/",
  "project_url": "https://pypi.org/project/presidio-anonymizer/",
  "project_urls": {
    "Homepage": "https://github.com/microsoft/presidio"
  },
  "release_url": "https://pypi.org/project/presidio-anonymizer/2.2.351/",
  "requires_dist": [
    "pycryptodome >=3.10.1"
  ],
  "requires_python": ">=3.5",
  "summary": "persidio anonymizer package - replaces analyzed text with desired values.",
  "version": "2.2.351",
  "releases": [],
  "developers": [],
  "kwds": "presidio_anonymizer anonymizerengine anonymizer deanonymizer anonymizers",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_presidio_anonymizer",
  "homepage": "https://github.com/microsoft/presidio",
  "release_count": 31,
  "dependency_ids": [
    "pypi_pycryptodome"
  ]
}
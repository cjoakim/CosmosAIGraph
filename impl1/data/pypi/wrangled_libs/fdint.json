{
  "classifiers": [],
  "description": "fermi-dirac integrals (fdint)\n=============================\n\nfdint is a free, open-source python package that provides fast, double\nprecision (64-bit floating point) approximations to the fermi-dirac\nintegrals of integer and half integer order, based on the work by\nprof. fukushima [1-3]. fdint is written predominantly in cython_, which\nis compiled to native code through an intermediate c source, resulting\nin c-like performance.\n\n.. [1] t. fukushima, \"precise and fast computation of fermi-dirac integral of\n   integer and half integer order by piecewise minimax rational approximation,\"\n   applied mathematics and computation, vol. 259, pp. 708-729, may 2015.\n   doi: 10.1016/j.amc.2015.03.009\n\n.. [2] t. fukushima, \"precise and fast computation of inverse fermi-dirac\n   integral of order 1/2 by minimax rational function approximation,\"\n   applied mathematics and computation, vol. 259, pp. 698-707, may 2015.\n   doi: 10.1016/j.amc.2015.03.015\n    \n.. [3] t. fukushima, \"precise and fast computation of generalized fermi-dirac\n   integral by parameter polynomial approximation,\" 2014.\n   doi: 10.13140/2.1.1094.6566\n\nthe `source code`_ and `documentation`_ (coming soon) are graciously hosted\nby github.\n\ninstallation\n============\n\nin order to use fdint, you must have a working `python`_ distribution\ninstalled. python 3 support has not yet been tested, so python 2.7 is\nsuggested. you will also need to install `numpy`_ before proceeding. if\nyou're not familiar with python, you might consider installing a\n`python distribution`_ that comes prepackaged with numpy.\n\nfrom pypi\n---------\n\nthis is the recommended method for installing fdint. `pypi`_ is the python\npackage index, which contains many python packages that can be easily installed\nwith a single command. to install fdint from `pypi`_, open up a command\nprompt and run the following command::\n\n    pip install fdint\n\n\nfrom github\n-----------\n\nto install the latest release of fdint from github, go to the\n`fdint releases page`_, download the latest ``.zip`` or ``.tar.gz``\nsource package, extract its contents, and run ``python setup.py install``\nfrom within the extracted directory.\n\n\ntesting\n=======\n\nonce installed, you can test the package by running the following command::\n\n    python -m fdint.tests\n\nif you have matplotlib_ installed, you can also plot a sample of the\navailable functions by running the following command::\n\n    python -m fdint.examples.plot\n\ntutorial\n========\n\nfirst, start up an interactive python shell from the command line::\n\n    $ python\n\nnext, import everything from the ``fdint`` package::\n\n    >>> from fdint import *\n\nnow you can access the fermi-dirac integral and derivative convenience\nfunctions, ``fdk`` and ``dfdk``::\n\n    >>> fdk(k=0.5,phi=-10)\n    4.0233994366893939e-05\n    >>> fdk(0.5,-10)\n    4.0233994366893939e-05\n    >>> fdk(k=0.5,phi=5)\n    7.837976057293096\n    >>> fdk(k=0.5,phi=50)\n    235.81861512588432\n    >>> dfdk(k=0.5,phi=-10) # first derivative\n    4.0233348580568672e-05\n\nyou can also pass in numpy arrays as phi::\n\n    >>> import numpy\n    >>> fdk(k=0.5,phi=numpy.linspace(-100,10,3))\n    array([  3.29683149e-44,   2.53684104e-20,   2.13444715e+01])\n\nif you request an order or derivative that is not implemented, a\nnotimplementederror is raised::\n\n    >>> fdk(1,0)\n    traceback (most recent call last):\n      file \"<stdin>\", line 1, in <module>\n      file \"fdint/__init__.py\", line 50, in fdk\n        raise notimplementederror()\n    notimplementederror\n\nfor semiconductor calculations, ``parabolic``, ``dparabolic``, ``iparabolic``,\n``nonparabolic``, and ``dnonparabolic`` are provided::\n\n    >>> parabolic(0)\n    0.7651470246254078\n    >>> dparabolic(0)\n    0.6048986434216304\n    >>> iparabolic(.7)\n    -0.11156326391089397\n    >>> nonparabolic(0,0)\n    0.7651470705342294\n    >>> nonparabolic(0,0.07) # inas\n    1.006986898726782\n    >>> dnonparabolic(0,0.07) # inas\n    0.8190058991462952\n\nbenchmarks\n==========\n\nbelow are a few benchmarking runs. first, ``numpy.exp``::\n\n    $ python -m timeit -s \"import numpy; from numpy import exp; x=numpy.linspace(-100,10,10000)\" \"exp(x)\"\n    10000 loops, best of 3: 72.6 usec per loop\n\nthe same arguments to the fermi-dirac integral of order k=1/2, ``fdint.fd1h``,\ntakes only ~2.2x the runtime::\n\n    $ python -m timeit -s \"from fdint import fd1h; import numpy; x=numpy.linspace(-100,10,10000)\" \"fd1h(x)\"\n    10000 loops, best of 3: 158 usec per loop\n\nsimilarly, the inverse fermi-dirac integral of order k=1/2, ``fdint.ifd1h``,\ntakes only ~2.4x the runtime of ``numpy.log``::\n\n    $ python -m timeit -s \"import numpy; from numpy import exp,log; x=numpy.linspace(-100,10,10000);y=exp(x)\" \"log(y)\"\n    10000 loops, best of 3: 69.9 usec per loop\n    $ python -m timeit -s \"from fdint import fd1h,ifd1h; import numpy; x=numpy.linspace(-100,10,10000);y=fd1h(x)\" \"ifd1h(y)\"\n    10000 loops, best of 3: 178 usec per loop\n    \nthe generalized fermi-dirac integrals are also quite fast. for order\nk=1/2 with zero nonparabolicity, ``fdint.gfd1h`` takes only ~3.7x the runtime\nof ``numpy.exp`` for zero nonparabolicity::\n\n    $ python -m timeit -s \"from fdint import gfd1h; import numpy; x=numpy.linspace(-100,10,10000);b=numpy.zeros(10000);b.fill(0.)\" \"gfd1h(x,b)\"\n    1000 loops, best of 3: 266 usec per loop\n\nhowever, if there is significant nonparabolicity, ``fdint.gfd1h`` can take a\nup to ~10x longer than ``numpy.exp``::\n\n    $ python -m timeit -s \"from fdint import gfd1h; import numpy; x=numpy.linspace(-100,10,10000);b=numpy.zeros(10000);b.fill(0.1)\" \"gfd1h(x,b)\"\n    1000 loops, best of 3: 467 usec per loop\n\n    $ python -m timeit -s \"from fdint import gfd1h; import numpy; x=numpy.linspace(-100,10,10000);b=numpy.zeros(10000);b.fill(0.3)\" \"gfd1h(x,b)\"\n    /usr/local/cellar/python/2.7.8_2/frameworks/python.framework/versions/2.7/lib/python2.7/timeit.py:6: runtimewarning: gfd1h: less than 24 bits of accuracy\n    1000 loops, best of 3: 696 usec per loop\n\nthe full calculation for a nonparabolic band takes ~5-17x longer than\n``numpy.exp``, depending on the level of nonparabolicity (note: for\nsome reason the timing for this command is unreasonably high when timed\nfrom the command line. when timed inside of ipython, it works fine)::\n\n    $ ipython\n    in [1]: from fdint import *\n    \n    in [2]: import numpy\n    \n    in [3]: phi = numpy.linspace(-100,10,10000)\n    \n    in [4]: %timeit numpy.exp(phi)\n    10000 loops, best of 3: 72.9 \u00b5s per loop\n    \n    in [5]: %timeit parabolic(phi)\n    10000 loops, best of 3: 165 \u00b5s per loop\n    \n    in [6]: alpha = numpy.empty(10000); alpha.fill(0.0) # parabolic\n    \n    in [7]: %timeit nonparabolic(phi, alpha)\n    1000 loops, best of 3: 346 \u00b5s per loop\n    \n    in [8]: alpha = numpy.empty(10000); alpha.fill(0.07) # inas\n    \n    in [9]: %timeit nonparabolic(phi, alpha)\n    1000 loops, best of 3: 695 \u00b5s per loop\n    \n    in [10]: alpha = numpy.empty(10000); alpha.fill(0.15) # insb\n    \n    in [11]: %timeit nonparabolic(phi, alpha)\n    /usr/local/bin/ipython:257: runtimewarning: nonparabolic: less than 24 bits of accuracy\n    1000 loops, best of 3: 1.26 ms per loop\n\ndocumentation\n=============\n\nthe `documentation`_ (coming soon) is graciously hosted by github.\n\n.. _`source code`: http://github.com/scott-maddox/fdint\n.. _`documentation`: http://scott-maddox.github.io/fdint\n.. _`pypi`: http://pypi.python.org/pypi\n.. _`python`: https://www.python.org/download/\n.. _`cython`: http://docs.cython.org/src/quickstart/install.html\n.. _`numpy`: http://docs.scipy.org/doc/numpy/user/install.html\n.. _`matplotlib`: http://matplotlib.org/users/installing.html\n.. _`python distribution`: https://www.scipy.org/install.html#scientific-python-distributions\n.. _`fdint releases page`: http://github.com/scott-maddox/fdint/releases/latest",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "fdint",
  "package_url": "https://pypi.org/project/fdint/",
  "project_url": "https://pypi.org/project/fdint/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://scott-maddox.github.io/fdint"
  },
  "release_url": "https://pypi.org/project/fdint/2.0.2/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a free, open-source python package for quickly and precisely approximating fermi-dirac integrals.",
  "version": "2.0.2",
  "releases": [],
  "developers": [
    "scott_j",
    "smaddox@utexas.edu"
  ],
  "kwds": "fermi benchmarks approximations ipython benchmarking",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_fdint",
  "homepage": "http://scott-maddox.github.io/fdint",
  "release_count": 7,
  "dependency_ids": []
}
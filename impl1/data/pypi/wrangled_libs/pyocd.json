{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: manufacturing",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: debuggers",
    "topic :: software development :: embedded systems",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "pyocd\n=====\n\n[\\[pyocd.io\\]](https://pyocd.io/) [\\[docs\\]](https://pyocd.io/docs) [\\[slack\\]](https://join.slack.com/t/pyocd/shared_invite/zt-wmy3zvg5-nrlj1gbwyh708tvfix9llg) [\\[mailing list\\]](https://groups.google.com/g/pyocd) [\\[ci results\\]](https://dev.azure.com/pyocd/pyocd/_build?definitionid=1&_a=summary)\n\n<table><tr><td>\n\n### news\n\n- the v0.35 release adds [open-cmsis-pack debug sequence support](https://pyocd.io/docs/open_cmsis_pack_support.html).\n\nsee the [wiki news page](https://github.com/pyocd/pyocd/wiki/news) for all recent news.\n\n</td></tr></table>\n\npyocd is an open source python based tool and package for programming and debugging arm cortex-m microcontrollers\nwith a wide range of debug probes. it is fully cross-platform, with support for linux, macos, windows, and freebsd.\n\na command line tool is provided that covers most use cases, or you can make use of the python\napi to facilitate custom target control. a common use for the python api is to run and control ci\ntests.\n\nsupport for more than 70 popular mcus is built-in. in addition, through the use of cmsis device\nfamily packs, [nearly every cortex-m device](https://www.keil.com/dd2/pack/) on the market is supported.\n\nthe `pyocd` command line tool gives you total control over your device with these subcommands:\n\n- `gdbserver`: gdb remote server allows you to debug using gdb via either the console or\n    [several gui debugger options](https://pyocd.io/docs/gdb_setup).\n- `load`: program files of various formats into flash or ram.\n- `erase`: erase part or all of an mcu's flash memory.\n- `pack`: manage [cmsis device family packs](https://open-cmsis-pack.github.io/open-cmsis-pack-spec/main/html/index.html)\n    that provide additional target device support.\n- `commander`: interactive repl control and inspection of the mcu.\n- `server`: share a debug probe with a tcp/ip server.\n- `reset`: hardware or software reset of a device.\n- `rtt`: stream segger rtt io with _any_ debug probe.\n- `list`: show connected devices.\n\nthe api and tools provide these features:\n\n-  halt, step, resume control\n-  read/write memory\n-  read/write core registers\n-  set/remove hardware and software breakpoints\n-  set/remove watchpoints\n-  write to flash memory\n-  load binary, hex, or elf files into flash\n-  reset control\n-  access coresight dp and aps\n-  swo and swv\n-  and more!\n\nconfiguration and customization is supported through [config files](https://pyocd.io/docs/configuration),\n[user scripts](https://pyocd.io/docs/user_scripts), and the python api.\n\n\nrequirements\n------------\n\n- python 3.7.0 or later.\u2020\n- macos, linux, windows 7 or newer, or freebsd\n- a recent version of [libusb](https://libusb.info/). see [libusb installation](#libusb-installation) for details.\n- microcontroller with an arm cortex-m cpu\n- supported debug probe\n  - [cmsis-dap](https://arm-software.github.io/cmsis_5/dap/html/index.html) v1 (hid) or v2 (winusb), including:\n    - atmel edbg/nedbg\n    - atmel-ice\n    - cypress kitprog3 or miniprog4\n    - [daplink](https://github.com/armmbed/daplink) based debug probe, either on-board or standalone\n    - keil ulinkplus\n    - nxp lpc-linkii\n    - nxp mcu-link\n    - wch-link (1a86:8011, 2a86:8011 and others)\n  - [pe micro](https://pemicro.com/) cyclone and multilink\n  - raspberry pi picoprobe\n  - segger j-link\n  - stlinkv2 or stlinkv3, either on-board or the standalone versions\n\n\u2020 version [0.29](https://github.com/pyocd/pyocd/releases/tag/v0.29.0) is the last version to support python 2.\n\nstatus\n------\n\npyocd is beta quality.\n\nthe python api is considered stable for version 0.x, but will be changed in version 1.0.\n\n\ndocumentation\n-------------\n\nthe pyocd documentation is available on the [pyocd.io website](https://pyocd.io/docs).\n\nin addition to user guides, you can generate reference documentation using doxygen with the\nsupplied [config file](docs/doxyfile).\n\n\ninstalling\n----------\n\n**the full installation guide is available [in the documentation](https://pyocd.io/docs/installing).**\n\nfor notes about installing and using on non-x86 systems such as raspberry pi, see the\n[relevant documentation](https://pyocd.io/docs/installing_on_non_x86).\n\nthe latest stable version of pyocd may be installed via [pip](https://pip.pypa.io/en/stable/index.html)\nas follows:\n\n```\n$ python3 -mpip install -u pyocd\n```\n\n_note: depending on your system, you may need to use `python` instead of `python3`._\n\nthe latest pyocd package is available [on pypi](https://pypi.python.org/pypi/pyocd/) as well as\n[on github](https://github.com/pyocd/pyocd/releases).\n\nto install the latest prerelease version from the head of the `develop` branch, you can do\nthe following:\n\n```\n$ python3 -mpip install --pre -u git+https://github.com/pyocd/pyocd.git@develop\n```\n\nyou can also install directly from the source by cloning the git repository and running:\n\n```\n$ python3 pip install .\n```\n\nnote that, depending on your operating system, you may run into permissions issues running these commands.\nyou have a few options here:\n\n1. under linux, run with `sudo -h` to install pyocd and dependencies globally. on macos, installing with sudo\n    should never be required, although sometimes permissions can become modified such that installing without\n    using sudo fails.\n3. specify the `--user` option to install local to your user account.\n4. run the command in a [virtualenv](https://virtualenv.pypa.io/en/latest/)\n   local to a specific project working set.\n\n### udev rules on linux\n\non linux, particularly ubuntu 16.04+, you must configure udev rules to allow pyocd to access debug\nprobes from user space. otherwise you will need to run pyocd as root, using sudo, which is very\nhighly discouraged. (you should _never_ run pyocd as root on any os.)\n\nto help with this, example udev rules files are included with pyocd in the\n[udev](https://github.com/pyocd/pyocd/tree/main/udev) folder. the\n[readme](https://github.com/pyocd/pyocd/tree/main/udev/readme.md) in this folder has detailed\ninstructions.\n\n### target support\n\nsee the [target support documentation](https://pyocd.io/docs/target_support) for information on how to check if\nthe mcu(s) you are using have built-in support, and how to install support for additional mcus via\ncmsis-packs.\n\n\nusing gdb\n---------\n\nsee the [gdb setup](https://pyocd.io/docs/gdb_setup) documentation for a guide for setting up\nand using pyocd with gdb and ides.\n\n\ncommunity resources\n-------------------\n\njoin the pyocd community!\n\n[pyocd.io website](https://pyocd.io) \\\n[documentation](https://pyocd.io/docs) \\\n[issues](https://github.com/pyocd/pyocd/issues) \\\n[discussions](https://github.com/pyocd/pyocd/discussions) \\\n[wiki](https://github.com/pyocd/pyocd/wiki) \\\n[mailing list](https://groups.google.com/g/pyocd) for announcements\n\nin order to foster a healthy and safe environment, we expect contributors and all members of the community to\nfollow our [code of conduct](https://github.com/pyocd/pyocd/tree/main/code_of_conduct.md).\n\n\ncontributions\n-------------\n\nwe welcome contributions in any area, even if you just create an issue. if you would like to get involved but\naren't sure what to start with, just ask on\n[slack](https://join.slack.com/t/pyocd/shared_invite/zt-zqjv6zr5-zfgaxl_mfcggmflb_8riha) or [github\ndiscussions](https://github.com/pyocd/pyocd/discussions) and we'll be happy to help you. or you can look for\nan open issue. any work on major changes should be discussed with the maintainers to make everyone is aligned.\n\nplease see the [contribution guidelines](https://github.com/pyocd/pyocd/tree/main/contributing.md) for detailed requirements. the [developers'\nguide](https://pyocd.io/docs/developers_guide) has instructions on how to set up a development environment for pyocd.\n\nnew pull requests should be [created](https://github.com/pyocd/pyocd/pull/new) against the `develop` branch. (you have to change the \"base\" to `develop`.)\n\n\nlicense\n-------\n\npyocd is licensed with the permissive apache 2.0 license. see the\n[license](https://github.com/pyocd/pyocd/tree/main/license) file for the full text of the license. all\ndocumentation and the website are licensed with [cc by 4.0](https://creativecommons.org/licenses/by/4.0/).\n\ncopyright \u00a9 2006-2022 pyocd authors\n",
  "docs_url": null,
  "keywords": "embedded,debug,debugger,arm,gdb,gdbserver,flash,test",
  "license": "apache 2.0",
  "name": "pyocd",
  "package_url": "https://pypi.org/project/pyocd/",
  "project_url": "https://pypi.org/project/pyocd/",
  "project_urls": {
    "Discussions": "https://github.com/pyocd/pyOCD/discussions",
    "Documentation": "https://pyocd.io//docs",
    "Homepage": "https://github.com/pyocd/pyOCD",
    "Issues": "https://github.com/pyocd/pyOCD/issues",
    "Releases": "https://github.com/pyocd/pyOCD/releases",
    "Source": "https://github.com/pyocd/pyOCD",
    "Website": "https://pyocd.io/"
  },
  "release_url": "https://pypi.org/project/pyocd/0.36.0/",
  "requires_dist": [
    "capstone <5.0,>=4.0",
    "cmsis-pack-manager <1.0,>=0.5.2",
    "colorama <1.0",
    "importlib-metadata >=3.6",
    "importlib-resources",
    "intelhex <3.0,>=2.0",
    "intervaltree <4.0,>=3.0.2",
    "lark <2.0,>=1.1.5",
    "libusb-package <2.0,>=1.0",
    "natsort <9.0,>=8.0.0",
    "prettytable <4.0,>=2.0",
    "pyelftools <1.0",
    "pylink-square <2.0,>=1.0",
    "pyusb <2.0,>=1.2.1",
    "pyyaml <7.0,>=6.0",
    "six <2.0,>=1.15.0",
    "typing-extensions <5.0,>=4.0",
    "hidapi <1.0,>=0.10.1 ; platform_system != \"Linux\"",
    "pyocd-pemicro >=1.0.6 ; extra == 'pemicro'",
    "pytest >=6.2 ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "coverage ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "pylint ; extra == 'test'",
    "tox ; extra == 'test'"
  ],
  "requires_python": ">=3.7.0",
  "summary": "cortex-m debugger for python",
  "version": "0.36.0",
  "releases": [],
  "developers": [
    "chris.reed@arm.com",
    "chris_reed"
  ],
  "kwds": "pyocd open_cmsis_pack_support debugger debugging debug",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_pyocd",
  "homepage": "https://github.com/pyocd/pyocd",
  "release_count": 81,
  "dependency_ids": [
    "pypi_capstone",
    "pypi_cmsis_pack_manager",
    "pypi_colorama",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_hidapi",
    "pypi_importlib_metadata",
    "pypi_importlib_resources",
    "pypi_intelhex",
    "pypi_intervaltree",
    "pypi_lark",
    "pypi_libusb_package",
    "pypi_natsort",
    "pypi_prettytable",
    "pypi_pyelftools",
    "pypi_pylink_square",
    "pypi_pylint",
    "pypi_pyocd_pemicro",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pyusb",
    "pypi_pyyaml",
    "pypi_six",
    "pypi_tox",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: financial and insurance industry",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: office/business :: financial",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "# ta-lib\n\n![tests](https://github.com/ta-lib/ta-lib-python/actions/workflows/tests.yml/badge.svg)\n\nthis is a python wrapper for [ta-lib](http://ta-lib.org) based on cython\ninstead of swig. from the homepage:\n\n> ta-lib is widely used by trading software developers requiring to perform\n> technical analysis of financial market data.\n>\n> * includes 150+ indicators such as adx, macd, rsi, stochastic, bollinger\n>   bands, etc.\n> * candlestick pattern recognition\n> * open-source api for c/c++, java, perl, python and 100% managed .net\n\nthe original python bindings included with ta-lib use\n[swig](http://swig.org) which unfortunately are difficult to install and\naren't as efficient as they could be. therefore this project uses\n[cython](https://cython.org) and [numpy](https://numpy.org) to efficiently\nand cleanly bind to ta-lib -- producing results 2-4 times faster than the\nswig interface.\n\nin addition, this project also supports the use of the\n[polars](https://www.pola.rs) and [pandas](https://pandas.pydata.org)\nlibraries.\n\n## installation\n\nyou can install from pypi:\n\n```\n$ python -m pip install ta-lib\n```\n\nor checkout the sources and run ``setup.py`` yourself:\n\n```\n$ python setup.py install\n```\n\nit also appears possible to install via \n[conda forge](https://anaconda.org/conda-forge/ta-lib):\n\n```\n$ conda install -c conda-forge ta-lib\n```\n\n### dependencies\n\nto use ta-lib for python, you need to have the\n[ta-lib](http://ta-lib.org/hdr_dw.html) already installed. you should\nprobably follow their installation directions for your platform, but some\nsuggestions are included below for reference.\n\n> some conda forge users have reported success installing the underlying ta-lib c\n> library using [the libta-lib package](https://anaconda.org/conda-forge/libta-lib):\n>\n> ``$ conda install -c conda-forge libta-lib``\n\n##### mac os x\n\nyou can simply install using homebrew:\n\n```\n$ brew install ta-lib\n```\n\nif you are using apple silicon, such as the m1 processors, and building mixed\narchitecture homebrew projects, you might want to make sure it's being built\nfor your architecture:\n\n```\n$ arch -arm64 brew install ta-lib\n```\n\nand perhaps you can set these before installing with ``pip``:\n\n```\n$ export ta_include_path=\"$(brew --prefix ta-lib)/include\"\n$ export ta_library_path=\"$(brew --prefix ta-lib)/lib\"\n```\n\nyou might also find this helpful, particularly if you have tried several\ndifferent installations without success:\n\n```\n$ your-arm64-python -m pip install --no-cache-dir ta-lib\n```\n\n##### windows\n\ndownload [ta-lib-0.4.0-msvc.zip](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip)\nand unzip to ``c:\\ta-lib``.\n\n> this is a 32-bit binary release.  if you want to use 64-bit python, you will\n> need to build a 64-bit version of the library. some unofficial (**and\n> unsupported**) instructions for building on 64-bit windows 10, here for\n> reference:\n>\n> 1. download and unzip ``ta-lib-0.4.0-msvc.zip``\n> 2. move the unzipped folder ``ta-lib`` to ``c:\\``\n> 3. download and install visual studio community (2015 or later)\n>    * remember to select ``[visual c++]`` feature\n> 4. build ta-lib library\n>    * from windows start menu, start ``[vs2015 x64 native tools command\n>      prompt]``\n>    * move to ``c:\\ta-lib\\c\\make\\cdr\\win32\\msvc``\n>    * build the library ``nmake``\n\nyou might also try these unofficial windows binaries for both 32-bit and\n64-bit:\n\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib\n\n##### linux\n\ndownload [ta-lib-0.4.0-src.tar.gz](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz) and:\n\n```\n$ tar -xzf ta-lib-0.4.0-src.tar.gz\n$ cd ta-lib/\n$ ./configure --prefix=/usr\n$ make\n$ sudo make install\n```\n\n> if you build ``ta-lib`` using ``make -jx`` it will fail but that's ok!\n> simply rerun ``make -jx`` followed by ``[sudo] make install``.\n\nnote: if your directory path includes spaces, the installation will probably\nfail with ``no such file or directory`` errors.\n\n### troubleshooting\n\nif you get a warning that looks like this:\n\n```\nsetup.py:79: userwarning: cannot find ta-lib library, installation may fail.\nwarnings.warn('cannot find ta-lib library, installation may fail.')\n```\n\nthis typically means ``setup.py`` can't find the underlying ``ta-lib``\nlibrary, a dependency which needs to be installed.\n\n---\n\nif you installed the underlying ``ta-lib`` library with a custom prefix\n(e.g., with ``./configure --prefix=$prefix``), then when you go to install\nthis python wrapper you can specify additional search paths to find the\nlibrary and include files for the underlying ``ta-lib`` library using the\n``ta_library_path`` and ``ta_include_path`` environment variables:\n\n```sh\n$ export ta_library_path=$prefix/lib\n$ export ta_include_path=$prefix/include\n$ python setup.py install # or pip install ta-lib\n```\n\n---\n\nsometimes installation will produce build errors like this:\n\n```\ntalib/_ta_lib.c:601:10: fatal error: ta-lib/ta_defs.h: no such file or directory\n  601 | #include \"ta-lib/ta_defs.h\"\n      |          ^~~~~~~~~~~~~~~~~~\ncompilation terminated.\n```\n\nor:\n\n```\ncommon.obj : error lnk2001: unresolved external symbol ta_setunstableperiod\ncommon.obj : error lnk2001: unresolved external symbol ta_shutdown\ncommon.obj : error lnk2001: unresolved external symbol ta_initialize\ncommon.obj : error lnk2001: unresolved external symbol ta_getunstableperiod\ncommon.obj : error lnk2001: unresolved external symbol ta_getversionstring\n```\n\nthis typically means that it can't find the underlying ``ta-lib`` library, a\ndependency which needs to be installed.  on windows, this could be caused by\ninstalling the 32-bit binary distribution of the underlying ``ta-lib`` library,\nbut trying to use it with 64-bit python.\n\n---\n\nsometimes installation will fail with errors like this:\n\n```\ntalib/common.c:8:22: fatal error: pyconfig.h: no such file or directory\n #include \"pyconfig.h\"\n                      ^\ncompilation terminated.\nerror: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n```\n\nthis typically means that you need the python headers, and should run\nsomething like:\n\n```\n$ sudo apt-get install python3-dev\n```\n\n---\n\nsometimes building the underlying ``ta-lib`` library has errors running\n``make`` that look like this:\n\n```\n../libtool: line 1717: cd: .libs/libta_lib.lax/libta_abstract.a: no such file or directory\nmake[2]: *** [libta_lib.la] error 1\nmake[1]: *** [all-recursive] error 1\nmake: *** [all-recursive] error 1\n```\n\nthis might mean that the directory path to the underlying ``ta-lib`` library\nhas spaces in the directory names.  try putting it in a path that does not have\nany spaces and trying again.\n\n---\n\nsometimes you might get this error running ``setup.py``:\n\n```\n/usr/include/limits.h:26:10: fatal error: bits/libc-header-start.h: no such file or directory\n#include <bits/libc-header-start.h>\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nthis is likely an issue with trying to compile for 32-bit platform but\nwithout the appropriate headers.  you might find some success looking at the\nfirst answer to [this question](https://stackoverflow.com/questions/54082459/fatal-error-bits-libc-header-start-h-no-such-file-or-directory-while-compili).\n\n---\n\nif you get an error on macos like this:\n\n```\ncode signature in <141bc883-189b-322c-ae90-cbf6b5206f67>\n'python3.9/site-packages/talib/_ta_lib.cpython-39-darwin.so' not valid for\nuse in process: trying to load an unsigned library)\n```\n\nyou might look at [this question](https://stackoverflow.com/questions/69610572/how-can-i-solve-the-below-error-while-importing-nltk-package)\nand use ``xcrun codesign`` to fix it.\n\n---\n\nif you wonder why ``stochrsi`` gives you different results than you expect,\nprobably you want ``stoch`` applied to ``rsi``, which is a little different\nthan the ``stochrsi`` which is ``stochf`` applied to ``rsi``:\n\n```python\n>>> import talib\n>>> import numpy as np\n>>> c = np.random.randn(100)\n\n# this is the library function\n>>> k, d = talib.stochrsi(c)\n\n# this produces the same result, calling stochf\n>>> rsi = talib.rsi(c)\n>>> k, d = talib.stochf(rsi, rsi, rsi)\n\n# you might want this instead, calling stoch\n>>> rsi = talib.rsi(c)\n>>> k, d = talib.stoch(rsi, rsi, rsi)\n```\n\n---\n\nif the build appears to hang, you might be running on a vm with not enough\nmemory -- try 1 gb or 2 gb.\n\n---\n\nif you get \"permission denied\" errors such as this, you might need to give\nyour user access to the location where the underlying ta-lib c library is\ninstalled -- or install it to a user-accessible location.\n\n```\ntalib/_ta_lib.c:747:28: fatal error: /usr/include/ta-lib/ta_defs.h: permission denied\n #include \"ta-lib/ta-defs.h\"\n                            ^\ncompilation terminated\nerror: command 'gcc' failed with exit status 1\n```\n\n## function api\n\nsimilar to ta-lib, the function api provides a lightweight wrapper of the\nexposed ta-lib indicators.\n\neach function returns an output array and have default values for their\nparameters, unless specified as keyword arguments. typically, these functions\nwill have an initial \"lookback\" period (a required number of observations\nbefore an output is generated) set to ``nan``.\n\nfor convenience, the function api supports both ``numpy.ndarray`` and\n``pandas.series`` and ``polars.series`` inputs.\n\nall of the following examples use the function api:\n\n```python\nimport numpy as np\nimport talib\n\nclose = np.random.random(100)\n```\n\ncalculate a simple moving average of the close prices:\n\n```python\noutput = talib.sma(close)\n```\n\ncalculating bollinger bands, with triple exponential moving average:\n\n```python\nfrom talib import ma_type\n\nupper, middle, lower = talib.bbands(close, matype=ma_type.t3)\n```\n\ncalculating momentum of the close prices, with a time period of 5:\n\n```python\noutput = talib.mom(close, timeperiod=5)\n```\n\n##### nan's\n\nthe underlying ta-lib c library handles nan's in a sometimes surprising manner\nby typically propagating nan's to the end of the output, for example:\n\n```python\n>>> c = np.array([1.0, 2.0, 3.0, np.nan, 4.0, 5.0, 6.0])\n\n>>> talib.sma(c, 3)\narray([nan, nan,  2., nan, nan, nan, nan])\n```\n\nyou can compare that to a pandas rolling mean, where their approach is to\noutput nan until enough \"lookback\" values are observed to generate new outputs:\n\n```python\n>>> c = pandas.series([1.0, 2.0, 3.0, np.nan, 4.0, 5.0, 6.0])\n\n>>> c.rolling(3).mean()\n0    nan\n1    nan\n2    2.0\n3    nan\n4    nan\n5    nan\n6    5.0\ndtype: float64\n```\n\n## abstract api\n\nif you're already familiar with using the function api, you should feel right\nat home using the abstract api.\n\nevery function takes a collection of named inputs, either a ``dict`` of\n``numpy.ndarray`` or ``pandas.series`` or ``polars.series``, or a\n``pandas.dataframe`` or ``polars.dataframe``. if a ``pandas.dataframe`` or\n``polars.dataframe`` is provided, the output is returned as the same type\nwith named output columns.\n\nfor example, inputs could be provided for the typical \"ohlcv\" data:\n\n```python\nimport numpy as np\n\n# note that all ndarrays must be the same length!\ninputs = {\n    'open': np.random.random(100),\n    'high': np.random.random(100),\n    'low': np.random.random(100),\n    'close': np.random.random(100),\n    'volume': np.random.random(100)\n}\n```\n\nfunctions can either be imported directly or instantiated by name:\n\n```python\nfrom talib import abstract\n\n# directly\nsma = abstract.sma\n\n# or by name\nsma = abstract.function('sma')\n```\n\nfrom there, calling functions is basically the same as the function api:\n\n```python\nfrom talib.abstract import *\n\n# uses close prices (default)\noutput = sma(inputs, timeperiod=25)\n\n# uses open prices\noutput = sma(inputs, timeperiod=25, price='open')\n\n# uses close prices (default)\nupper, middle, lower = bbands(inputs, 20, 2.0, 2.0)\n\n# uses high, low, close (default)\nslowk, slowd = stoch(inputs, 5, 3, 0, 3, 0) # uses high, low, close by default\n\n# uses high, low, open instead\nslowk, slowd = stoch(inputs, 5, 3, 0, 3, 0, prices=['high', 'low', 'open'])\n```\n\n## streaming api\n\nan experimental streaming api was added that allows users to compute the latest\nvalue of an indicator.  this can be faster than using the function api, for\nexample in an application that receives streaming data, and wants to know just\nthe most recent updated indicator value.\n\n```python\nimport talib\nfrom talib import stream\n\nclose = np.random.random(100)\n\n# the function api\noutput = talib.sma(close)\n\n# the streaming api\nlatest = stream.sma(close)\n\n# the latest value is the same as the last output value\nassert (output[-1] - latest) < 0.00001\n```\n\n## supported indicators and functions\n\nwe can show all the ta functions supported by ta-lib, either as a ``list`` or\nas a ``dict`` sorted by group (e.g. \"overlap studies\", \"momentum indicators\",\netc):\n\n```python\nimport talib\n\n# list of functions\nprint talib.get_functions()\n\n# dict of functions by group\nprint talib.get_function_groups()\n```\n\n### indicator groups\n\n* overlap studies\n* momentum indicators\n* volume indicators\n* volatility indicators\n* price transform\n* cycle indicators\n* pattern recognition\n\n##### overlap studies\n```\nbbands               bollinger bands\ndema                 double exponential moving average\nema                  exponential moving average\nht_trendline         hilbert transform - instantaneous trendline\nkama                 kaufman adaptive moving average\nma                   moving average\nmama                 mesa adaptive moving average\nmavp                 moving average with variable period\nmidpoint             midpoint over period\nmidprice             midpoint price over period\nsar                  parabolic sar\nsarext               parabolic sar - extended\nsma                  simple moving average\nt3                   triple exponential moving average (t3)\ntema                 triple exponential moving average\ntrima                triangular moving average\nwma                  weighted moving average\n```\n\n##### momentum indicators\n```\nadx                  average directional movement index\nadxr                 average directional movement index rating\napo                  absolute price oscillator\naroon                aroon\naroonosc             aroon oscillator\nbop                  balance of power\ncci                  commodity channel index\ncmo                  chande momentum oscillator\ndx                   directional movement index\nmacd                 moving average convergence/divergence\nmacdext              macd with controllable ma type\nmacdfix              moving average convergence/divergence fix 12/26\nmfi                  money flow index\nminus_di             minus directional indicator\nminus_dm             minus directional movement\nmom                  momentum\nplus_di              plus directional indicator\nplus_dm              plus directional movement\nppo                  percentage price oscillator\nroc                  rate of change : ((price/prevprice)-1)*100\nrocp                 rate of change percentage: (price-prevprice)/prevprice\nrocr                 rate of change ratio: (price/prevprice)\nrocr100              rate of change ratio 100 scale: (price/prevprice)*100\nrsi                  relative strength index\nstoch                stochastic\nstochf               stochastic fast\nstochrsi             stochastic relative strength index\ntrix                 1-day rate-of-change (roc) of a triple smooth ema\nultosc               ultimate oscillator\nwillr                williams' %r\n```\n\n##### volume indicators\n```\nad                   chaikin a/d line\nadosc                chaikin a/d oscillator\nobv                  on balance volume\n```\n\n##### cycle indicators\n```\nht_dcperiod          hilbert transform - dominant cycle period\nht_dcphase           hilbert transform - dominant cycle phase\nht_phasor            hilbert transform - phasor components\nht_sine              hilbert transform - sinewave\nht_trendmode         hilbert transform - trend vs cycle mode\n```\n\n##### price transform\n```\navgprice             average price\nmedprice             median price\ntypprice             typical price\nwclprice             weighted close price\n```\n\n##### volatility indicators\n```\natr                  average true range\nnatr                 normalized average true range\ntrange               true range\n```\n\n##### pattern recognition\n```\ncdl2crows            two crows\ncdl3blackcrows       three black crows\ncdl3inside           three inside up/down\ncdl3linestrike       three-line strike\ncdl3outside          three outside up/down\ncdl3starsinsouth     three stars in the south\ncdl3whitesoldiers    three advancing white soldiers\ncdlabandonedbaby     abandoned baby\ncdladvanceblock      advance block\ncdlbelthold          belt-hold\ncdlbreakaway         breakaway\ncdlclosingmarubozu   closing marubozu\ncdlconcealbabyswall  concealing baby swallow\ncdlcounterattack     counterattack\ncdldarkcloudcover    dark cloud cover\ncdldoji              doji\ncdldojistar          doji star\ncdldragonflydoji     dragonfly doji\ncdlengulfing         engulfing pattern\ncdleveningdojistar   evening doji star\ncdleveningstar       evening star\ncdlgapsidesidewhite  up/down-gap side-by-side white lines\ncdlgravestonedoji    gravestone doji\ncdlhammer            hammer\ncdlhangingman        hanging man\ncdlharami            harami pattern\ncdlharamicross       harami cross pattern\ncdlhighwave          high-wave candle\ncdlhikkake           hikkake pattern\ncdlhikkakemod        modified hikkake pattern\ncdlhomingpigeon      homing pigeon\ncdlidentical3crows   identical three crows\ncdlinneck            in-neck pattern\ncdlinvertedhammer    inverted hammer\ncdlkicking           kicking\ncdlkickingbylength   kicking - bull/bear determined by the longer marubozu\ncdlladderbottom      ladder bottom\ncdllongleggeddoji    long legged doji\ncdllongline          long line candle\ncdlmarubozu          marubozu\ncdlmatchinglow       matching low\ncdlmathold           mat hold\ncdlmorningdojistar   morning doji star\ncdlmorningstar       morning star\ncdlonneck            on-neck pattern\ncdlpiercing          piercing pattern\ncdlrickshawman       rickshaw man\ncdlrisefall3methods  rising/falling three methods\ncdlseparatinglines   separating lines\ncdlshootingstar      shooting star\ncdlshortline         short line candle\ncdlspinningtop       spinning top\ncdlstalledpattern    stalled pattern\ncdlsticksandwich     stick sandwich\ncdltakuri            takuri (dragonfly doji with very long lower shadow)\ncdltasukigap         tasuki gap\ncdlthrusting         thrusting pattern\ncdltristar           tristar pattern\ncdlunique3river      unique 3 river\ncdlupsidegap2crows   upside gap two crows\ncdlxsidegap3methods  upside/downside gap three methods\n```\n\n##### statistic functions\n```\nbeta                 beta\ncorrel               pearson's correlation coefficient (r)\nlinearreg            linear regression\nlinearreg_angle      linear regression angle\nlinearreg_intercept  linear regression intercept\nlinearreg_slope      linear regression slope\nstddev               standard deviation\ntsf                  time series forecast\nvar                  variance\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "ta-lib",
  "package_url": "https://pypi.org/project/TA-Lib/",
  "project_url": "https://pypi.org/project/TA-Lib/",
  "project_urls": {
    "Download": "https://github.com/ta-lib/ta-lib-python/releases",
    "Homepage": "http://github.com/ta-lib/ta-lib-python"
  },
  "release_url": "https://pypi.org/project/TA-Lib/0.4.28/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python wrapper for ta-lib",
  "version": "0.4.28",
  "releases": [],
  "developers": [
    "john_benediktsson",
    "mrjbq7@gmail.com"
  ],
  "kwds": "pythonlibs ta python indicators matype",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_ta_lib",
  "homepage": "http://github.com/ta-lib/ta-lib-python",
  "release_count": 24,
  "dependency_ids": []
}
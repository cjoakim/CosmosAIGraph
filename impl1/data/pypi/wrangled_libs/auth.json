{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.5",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: jython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "====================================\nauth | authorization for humans\n====================================\n\nrestful, simple authorization system with zero configuration.\n\n.. image:: https://badge.fury.io/py/auth.svg\n    :target: https://badge.fury.io/py/auth\n\n.. image:: https://img.shields.io/pypi/dm/auth.svg\n    :target: https://pypi.python.org/pypi/auth\n\n\n\n\n.. image:: https://api.travis-ci.org/ourway/auth.svg\n    :target: https://travis-ci.org/ourway/auth\n\n.. image:: https://codecov.io/github/ourway/auth/coverage.svg?branch=master\n    :target: https://codecov.io/github/ourway/auth?branch=master\n\n\n\n\n***************\nwhat is auth?\n***************\nauth is a module that makes authorization simple and also scalable and powerful.  it also has a beautiful restful api for use in micro-service architectures and platforms.  it is originally desinged to use in appido, a scalable media market in iran.\n\nit supports python2.6+ and if you have a mongodb backbone, you need zero configurations steps.  just type ``auth-server`` and press enter!\n\ni use travis and codecov to keep myself honest.\n\n*******************\nrequirements\n*******************\n\nyou need to access to **mongodb**.  if you are using a remote mongodb,  provide these environment variables:\n\n``mongo_host`` and ``mongo_port``\n\n\n*******************\ninstallation\n*******************\n\n.. code:: bash\n\n    pip install auth\n\n\n*******************\nshow me an example\n*******************\nok, lets image you have two users, **jack** and **sara**.  sara can cook and jack can dance. both can laugh.\n\nyou also need to choose a secret key for your application.  because you may want to use auth in various tools and each must have a secret key for seperating their scope.\n\n.. code:: python\n\n    my_secret_key = \"pleasedon0tkillmyc_at\"\n    from auth import authorization\n    cas = authorization(my_secret_key)\n\nnow, lets add 3 groups, cookers, dancers and laughers.  remember that groups are roles.  so when we create a group, indeed we create a role:\n\n.. code:: python\n\n    cas.add_group('cookers')\n    cas.add_group('dancers')\n    cas.add_group('laughers')\n\n\nok, great. you have 3 groups and you need to authorize them to do special things.\n\n.. code:: python\n\n    cas.add_permission('cookers', 'cook')\n    cas.add_permission('dancers', 'dance')\n    cas.add_permission('laughers', 'laugh')\n\n\ngood.  you let cookers to cook and dancers to dance etc...\nthe final part is to set memberships for sara and jack:\n\n.. code:: python\n\n    cas.add_membership('sara', 'cookers')\n    cas.add_membership('sara', 'laughers')\n    cas.add_membership('jack', 'dancers')\n    cas.add_membership('jack', 'laughers')\n\n\n\nthat's all we need.  now lets ensure that jack can dance:\n\n.. code:: python\n\n    if cas.user_has_permission('jack', 'dance'):\n        print('yes!!! jack can dance.')\n\n\n\n**********************\nauthirization methods\n**********************\n\nuse pydoc to see all methods:\n\n.. code:: bash\n\n    pydoc auth.authorization\n\n\n*******************\nrestful api\n*******************\nlets run the server on port 4000:\n\n.. code:: python\n\n    from auth import api, serve\n    serve('localhost', 4000, api)\n\nor, from version 0.1.2+ you can use this command:\n\n.. code:: bash\n\n    auth-server\n\n\nsimple! authorization server is ready to use.\n\n.. image:: https://raw.githubusercontent.com/ourway/auth/master/docs/api_usage_teminal.gif\n\n\nyou can use it via simple curl or using mighty requests module.  so in you remote application, you can do something like this:\n\n.. code:: python\n\n    import requests\n    secret_key = \"pleasedon0tkillmyc_at\"\n    auth_api = \"http://127.0.0.1:4000/api\"\n\n\nlets create admin group:\n\n.. code:: python\n\n    requests.post(auth_api+'/role/'+secret_key+'/admin')\n\n\nand lets make jack an admin:\n\n.. code:: python\n\n    requests.post(auth_api+'/permission/'+secret_key+'/jack/admin')\n\nand finally let's check if sara still can cook:\n\n.. code:: python\n\n    requests.get(auth_api+'/has_permission/'+secret_key+'/sara/cook')\n\n\n\n********************\nrestful api helpers\n********************\nauth comes with a helper class that makes your life easy.\n\n.. code:: python\n\n    from auth.client import client\n    service = client('srv201', 'http://192.168.99.100:4000')\n    print(service)\n    service.get_roles()\n    service.add_role(role='admin')\n\n\n*******************\napi methods\n*******************\n\n\n.. code:: bash\n\n    pydoc auth.cas.rest.service\n\n\n\n\n- ``/ping`` [get]\n\n\n ping api, useful for your monitoring tools\n\n\n- ``/api/membership/{key}/{user}/{role}`` [get/post/delete]\n\n adding, removing and getting membership information.\n\n\n- ``/api/permission/{key}/{role}/{name}`` [get/post/delete]\n\n adding, removing and getting permissions\n\n\n- ``/api/has_permission/{key}/{user}/{name}`` [get]\n\n getting user permission info\n\n\n- ``/api/role/{key}/{role}`` [get/post/delete]\n\n  adding, removing and getting roles\n\n\n- ``/api/which_roles_can/{key}/{name}`` [get]\n\n  for example:  which roles can send_mail?\n\n\n- ``/api/which_users_can/{key}/{name}`` [get]\n\n  for example:  which users can send_mail?\n\n\n- ``/api/user_permissions/{key}/{user}`` [get]\n\n  get all permissions that a user has\n\n- ``/api/role_permissions/{key}/{role}`` [get]\n\n  get all permissions that a role has\n\n\n- ``/api/user_roles/{key}/{user}`` [get]\n\n    get roles that user assinged to\n\n- ``/api/roles/{key}`` [get]\n\n    get all available roles\n\n\n*******************\ndeployment\n*******************\n\ndeploying auth module in production environment is easy:\n\n\n.. code:: bash\n\n    gunicorn auth:api\n\n\n\n\n*******************\ndockerizing\n*******************\n\nit's simple:\n\n.. code:: bash\n\n    docker build -t python/auth-server https://raw.githubusercontent.com/ourway/auth/master/dockerfile\n    docker run --name=auth -e mongo_host='192.168.99.100' -p 4000:4000 -d --restart=always --link=mongodb-server python/auth-server\n\n\n\n*******************\ncopyright\n*******************\n\n- farsheed ashouri `@ <mailto:rodmena@me.com>`_\n\n\n*******************\ndocumentation\n*******************\nfeel free to dig into source code.  if you think you can improve the documentation, please do so and send me a pull request.\n\n************************\nunit tests and coverage\n************************\ni am trying to add tests as much as i can, but still there are areas that need improvement.\n\n\n**********\nto do\n**********\n- add authentication features\n- improve code coverage",
  "docs_url": null,
  "keywords": "authorizarion role auth groups membership ensure ldap",
  "license": "apache 2.0",
  "name": "auth",
  "package_url": "https://pypi.org/project/auth/",
  "project_url": "https://pypi.org/project/auth/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://github.com/ourway/auth/"
  },
  "release_url": "https://pypi.org/project/auth/0.5.3/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "authorization for humans",
  "version": "0.5.3",
  "releases": [],
  "developers": [
    "farsheed_ashouri",
    "rodmena@me.com"
  ],
  "kwds": "auth_api auth authorization role_permissions add_role",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_auth",
  "homepage": "http://github.com/ourway/auth/",
  "release_count": 11,
  "dependency_ids": []
}
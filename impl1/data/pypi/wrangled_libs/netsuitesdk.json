{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: internet :: www/http"
  ],
  "description": "# netsuite-sdk-py\n\nnetsuite-sdk-py is a python sdk. it uses the soap client library zeep(https://python-zeep.readthedocs.io/en/master/) for accessing netsuite resources via the netsuite soap web service suitetalk(http://www.netsuite.com/portal/platform/developer/suitetalk.shtml), but hides the complexity from the sdk user.\n\n## installation\n\n\t$ pip install netsuitesdk \n\n## get started\n\nthere are two ways to access a netsuite account via web services: \n- use token-based auth (tba) (within each request). this is the mechanism supported by this sdk.\n- use email, password, role and account id to login and start a session. this is not supported by this sdk\n\n### token-based auth\n\nfirst, setup tba credentials using environment variables.\n\n```\n# tba credentials\nexport ns_account=xxxx\nexport ns_consumer_key=xxxx\nexport ns_consumer_secret=xxxx\nexport ns_token_key=xxxx\nexport ns_token_secret=xxxx\n\n```\n\nthe following snippet shows how to use tba to initialize the sdk.\n\n```python\nimport os\nimport itertools\nimport json\nfrom netsuitesdk import netsuiteconnection\n\ndef connect_tba():\n    ns_account = os.getenv('ns_account')\n    ns_consumer_key = os.getenv('ns_consumer_key')\n    ns_consumer_secret = os.getenv('ns_consumer_secret')\n    ns_token_key = os.getenv('ns_token_key')\n    ns_token_secret = os.getenv('ns_token_secret')\n    nc = netsuiteconnection(\n        account=ns_account,\n        consumer_key=ns_consumer_key,\n        consumer_secret=ns_consumer_secret,\n        token_key=ns_token_key,\n        token_secret=ns_token_secret\n    )\n    return nc\n\nnc = connect_tba()\n\n# use get_all methods to get all objects of certain types\ncurrencies = nc.currencies.get_all()\nlocations = nc.locations.get_all()\ndepartments = nc.departments.get_all()\nclassifications = nc.classifications.get_all()\nsubsidiaries = nc.subsidiaries.get_all()\nexpense_categories = nc.expense_categories.get_all()\nemployees = nc.employees.get_all()\nall_accounts = list(itertools.islice(nc.accounts.get_all_generator(), 100))\naccounts = [a for a in all_accounts if a['accttype'] == '_expense']\nvendor_bills = list(itertools.islice(nc.vendor_bills.get_all_generator(), 10))\nvendors = list(itertools.islice(nc.vendors.get_all_generator(), 10))\nvendor_payments = nc.vendor_payments.get_all()\n\ndata = {\n  'accounts': accounts,\n  'classifications': classifications,\n  'departments': departments,\n  'locations': locations,\n  'currencies': currencies,\n  'vendors': vendors,\n  'vendor_bills': vendor_bills,\n  'subsidiaries': subsidiaries,\n  'expense_categories': expense_categories,\n  'employees': employees,\n  'vendor_payments': vendor_payments\n}\nwith open('/tmp/netsuite.json', 'w') as oj:\n\toj.write(json.dumps(data, default=str, indent=2))\n\n# there are also generator methods to iterate over potentially large lists\nfor c in nc.currencies.get_all_generator():\n    print(c)\n\n# get a specific object\nnc.currencies.get(internalid='1')\n\n# post operation is only supported on vendor_bills, expense_reports, journal_entries and vendor_payments currently (see tests on how to construct vendor bill, expense report and journal entry)\nvb = {...}\nnc.vendor_bills.post(vb)\n\ner = {...}\nnc.expense_reports.post(er)\n\nje = {...}\nnc.journal_entries.post(je)\n\nvp = {...}\nnc.vendor_payments.post(vp)\n\n### upsert files\nfile = open('receipt.pdf', 'rb').read()\n\ncreated_folder = nc.folders.post(\n    {\n        \"externalid\": 'new-folder',\n        \"name\": 'receipts'\n    }\n)\n\nuploaded_file = nc.files.post({\n    \"externalid\": \"receipt 1\",\n    \"name\": 'receipt.pdf',\n    'content': file,\n    'filetype': '_pdf',\n    \"folder\": {\n                \"name\": none,\n                \"internalid\": 695,\n                \"externalid\": 'new-folder',\n                \"type\": \"folder\"\n            }\n    }\n)\n```\n\n<!-- ### password-based auth\n\npassword-based auth is less preferred. you can set the following environment variables for convenience:\n\n```\nexport ns_email=xxxx\nexport ns_password=xxxx\nexport ns_role=xxx\nexport ns_account=xxxx\nexport ns_appid=xxxx\n```\n\nhere's a snippet that shows how the client can be initialized.\n\n```python\nimport os\n\nfrom netsuitesdk import netsuiteclient\n\ndef connect_password():\n    ns_email = os.getenv(\"ns_email\")\n    ns_password = os.getenv(\"ns_password\")\n    ns_role = os.getenv(\"ns_role\")\n    ns_account = os.getenv(\"ns_account\")\n    ns_appid = os.getenv(\"ns_appid\")\n\n    ns = netsuiteclient(account=ns_account)\n    ns.login(email=ns_email, password=ns_password, role=ns_role, application_id=ns_appid)\n    return ns\n\nns = connect_password()\n\n# do things with ns..\n\nns.logout()\n``` -->\n\n### remarks and possible errors regarding authentication\n**note:** netsuite requires two-factor authentication (2fa) for\nall administrator and other highly privileged roles in all netsuite accounts.\ninstead, you can login with a non-highly privileged role or use\ntoken based authentication (tba) with your requests. for tba, see below.\n\nif login fails, a netsuiteloginerror is thrown. \n\nfor more information about netsuite authentication, see:\n\t(https://docs.oracle.com/cloud/latest/netsuitecs_gs/nsath/nsath.pdf)\n\n\n<!-- ### get request\na basic example (`ns` is a reference to a `netsuiteclient` instance):\n```python\nvendor = ns.get('vendor', internalid=ref.internalid)\nns.print_values(vendor)\n```\n\n### search\nto perform a search request, use `netsuite.search`.\nthe sdk provides some utility functions/classes:\n\n- `basic_stringfield_search`: a basic example (`ns` is a reference to a `netsuiteclient` instance):\n```python\nrecords = ns.basic_stringfield_search(type_name='vendor',\n                                attribute='entityid',\n                                value='alexander valley vineyards',\n                                operator='is')\nprint(records[0].internalid)\n```\n\n- `paginatedsearch` (in utils.py):\nits usage can be seen inside the utility function `netsuiteclient.paginated_search`\n\n### upsert\nbasic example(`ns` is a reference to a `netsuiteclient` instance):\n```python\nvendor = ns.vendor()\nvendor.externalid = 'test_vendor'\nvendor.companyname = 'another test inc.'\nref = ns.upsert(record=vendor)\n```\n\n### upsertlist\nbasic example(`ns` is a reference to a `netsuiteclient` instance):\n```python\ncustomer1 = ns.customer(externalid='customer', email='test1@example.com')\ncustomer2 = ns.customer(externalid='another_customer', email='test2@example.com')\nns.upsertlist(records=[customer1, customer2])\n``` -->\n\n\n## integration tests\n\nto run integration tests, you will set both login and tba credentials for an actual netsuite account with the right permissions. \n```\n# tba credentials\nexport ns_account=xxxx\nexport ns_consumer_key=xxxx\nexport ns_consumer_secret=xxxx\nexport ns_token_key=xxxx\nexport ns_token_secret=xxxx\n\npython -m pytest test/integration\n```\ncurrently the code coverage is at 90%\n\nto run integration tests on a newly added / modified file\n\n```python\npython -m pytest -vv test/integration/test_filename.py; \n\n```\n\n## code coverage\n\nto get code coverage report, run this command:\n\n```python\npython -m pytest --cov=netsuitesdk\n\n<snipped output>\nname                                                   stmts   miss  cover   \n----------------------------------------------------------------------------\nnetsuitesdk/__init__.py                                    4      0   100%\nnetsuitesdk/api/__init__.py                                0      0   100%\nnetsuitesdk/api/accounts.py                                6      0   100%\nnetsuitesdk/api/adv_inter_company_journal_entries.py       7      0   100%\nnetsuitesdk/api/base.py                                   90      9    90%   \nnetsuitesdk/api/classifications.py                         6      0   100%\nnetsuitesdk/api/currencies.py                             10      0   100%\nnetsuitesdk/api/custom_record_types.py                    11      0   100%\nnetsuitesdk/api/custom_records.py                         17      0   100%\nnetsuitesdk/api/customers.py                              21      0   100%\nnetsuitesdk/api/departments.py                             6      0   100%\nnetsuitesdk/api/employees.py                              34      0   100%\nnetsuitesdk/api/expense_categories.py                      6      0   100%\nnetsuitesdk/api/expense_reports.py                        58      2    97%   \nnetsuitesdk/api/files.py                                  23      0   100%\nnetsuitesdk/api/folders.py                                17      0   100%\nnetsuitesdk/api/journal_entries.py                        41      0   100%\nnetsuitesdk/api/locations.py                               6      0   100%\nnetsuitesdk/api/price_level.py                             6      0   100%\nnetsuitesdk/api/projects.py                                6      0   100%\nnetsuitesdk/api/subsidiaries.py                            6      0   100%\nnetsuitesdk/api/tax_groups.py                              6      0   100%\nnetsuitesdk/api/tax_items.py                               6      0   100%\nnetsuitesdk/api/vendor_bills.py                           55      1    98%  \nnetsuitesdk/api/vendor_payments.py                        46      1    98%   \nnetsuitesdk/api/vendors.py                                21      0   100%\nnetsuitesdk/connection.py                                 68      0   100%\nnetsuitesdk/internal/__init__.py                           0      0   100%\nnetsuitesdk/internal/client.py                           305     79    74%   \nnetsuitesdk/internal/constants.py                          4      0   100%\nnetsuitesdk/internal/exceptions.py                        16      3    81%   \nnetsuitesdk/internal/netsuite_types.py                     2      0   100%\nnetsuitesdk/internal/utils.py                             40      4    90%   \n----------------------------------------------------------------------------\ntotal                                                    950     99    90%\n\n```\n\nto get an html report, run this command:\n\n```python\npython -m pytest --cov=netsuitesdk --cov-report html:cov_html\n```\n\nwe want to maintain code coverage of more than 90% for this project at all times.\n\n## documentation\ndocumentation can be found in the docs/_build/html folder (open index.html) and soon in readthedocs.\nfor contributors: to build the documentation (cd to /docs and) run `make buildapi`\nas well as `make html`\n\n## contributions\n\nwe are actively accepting contributions. please mail shwetabh.kumar@fylehq.com if you wish to collaborate on this. (please write test cases for new additions.)\n",
  "docs_url": null,
  "keywords": "netsuite,api,python,sdk",
  "license": "mit",
  "name": "netsuitesdk",
  "package_url": "https://pypi.org/project/netsuitesdk/",
  "project_url": "https://pypi.org/project/netsuitesdk/",
  "project_urls": {
    "Homepage": "https://github.com/fylein/netsuite-sdk-py"
  },
  "release_url": "https://pypi.org/project/netsuitesdk/2.21.0/",
  "requires_dist": [
    "zeep"
  ],
  "requires_python": "",
  "summary": "python sdk for accessing the netsuite soap webservice",
  "version": "2.21.0",
  "releases": [],
  "developers": [
    "siva@fyle.in",
    "siva_narayanan"
  ],
  "kwds": "netsuiteclient netsuiteconnection netsuiteloginerror netsuitesdk netsuitecs_gs",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_netsuitesdk",
  "homepage": "https://github.com/fylein/netsuite-sdk-py",
  "release_count": 70,
  "dependency_ids": [
    "pypi_zeep"
  ]
}
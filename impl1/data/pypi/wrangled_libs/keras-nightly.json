{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "operating system :: macos",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "# keras 3: a new multi-backend keras\n\nkeras 3 is a new multi-backend implementation of the keras api, with support for tensorflow, jax, and pytorch.\n\n## installation\n\n### install with pip\n\nkeras 3 is available on pypi as `keras`. note that keras 2 remains available as the `tf-keras` package.\n\n1. install `keras`:\n\n```\npip install keras --upgrade\n```\n\n2. install backend package(s).\n\nto use `keras`, you should also install the backend of choice: `tensorflow`, `jax`, or `torch`.\nnote that `tensorflow` is required for using certain keras 3 features: certain preprocessing layers\nas well as `tf.data` pipelines.\n\n### local installation\n\n#### minimal installation\n\nkeras 3 is compatible with linux and macos systems. for windows users, we recommend using wsl2 to run keras.\nto install a local development version:\n\n1. install dependencies:\n\n```\npip install -r requirements.txt\n```\n\n2. run installation command from the root directory.\n\n```\npython pip_build.py --install\n```\n\n#### adding gpu support\n\nthe `requirements.txt` file will install a cpu-only version of tensorflow, jax, and pytorch. for gpu support, we also\nprovide a separate `requirements-{backend}-cuda.txt` for tensorflow, jax, and pytorch. these install all cuda\ndependencies via `pip` and expect a nvidia driver to be pre-installed. we recommend a clean python environment for each\nbackend to avoid cuda version mismatches. as an example, here is how to create a jax gpu environment with `conda`:\n\n```shell\nconda create -y -n keras-jax python=3.10\nconda activate keras-jax\npip install -r requirements-jax-cuda.txt\npython pip_build.py --install\n```\n\n## configuring your backend\n\nyou can export the environment variable `keras_backend` or you can edit your local config file at `~/.keras/keras.json`\nto configure your backend. available backend options are: `\"tensorflow\"`, `\"jax\"`, `\"torch\"`. example:\n\n```\nexport keras_backend=\"jax\"\n```\n\nin colab, you can do:\n\n```python\nimport os\nos.environ[\"keras_backend\"] = \"jax\"\n\nimport keras\n```\n\n**note:** the backend must be configured before importing `keras`, and the backend cannot be changed after \nthe package has been imported.\n\n## backwards compatibility\n\nkeras 3 is intended to work as a drop-in replacement for `tf.keras` (when using the tensorflow backend). just take your\nexisting `tf.keras` code, make sure that your calls to `model.save()` are using the up-to-date `.keras` format, and you're\ndone.\n\nif your `tf.keras` model does not include custom components, you can start running it on top of jax or pytorch immediately.\n\nif it does include custom components (e.g. custom layers or a custom `train_step()`), it is usually possible to convert it\nto a backend-agnostic implementation in just a few minutes.\n\nin addition, keras models can consume datasets in any format, regardless of the backend you're using:\nyou can train your models with your existing `tf.data.dataset` pipelines or pytorch `dataloaders`.\n\n## why use keras 3?\n\n- run your high-level keras workflows on top of any framework -- benefiting at will from the advantages of each framework,\ne.g. the scalability and performance of jax or the production ecosystem options of tensorflow.\n- write custom components (e.g. layers, models, metrics) that you can use in low-level workflows in any framework.\n    - you can take a keras model and train it in a training loop written from scratch in native tf, jax, or pytorch.\n    - you can take a keras model and use it as part of a pytorch-native `module` or as part of a jax-native model function.\n- make your ml code future-proof by avoiding framework lock-in.\n- as a pytorch user: get access to power and usability of keras, at last!\n- as a jax user: get access to a fully-featured, battle-tested, well-documented modeling and training library.\n\n\nread more in the [keras 3 release announcement](https://keras.io/keras_3/).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "keras-nightly",
  "package_url": "https://pypi.org/project/keras-nightly/",
  "project_url": "https://pypi.org/project/keras-nightly/",
  "project_urls": {
    "Homepage": "https://github.com/keras-team/keras"
  },
  "release_url": "https://pypi.org/project/keras-nightly/3.0.2.dev2023122403/",
  "requires_dist": [
    "absl-py",
    "numpy",
    "rich",
    "namex",
    "h5py",
    "dm-tree"
  ],
  "requires_python": ">=3.9",
  "summary": "multi-backend keras.",
  "version": "3.0.2.dev2023122403",
  "releases": [],
  "developers": [
    "keras-users@googlegroups.com",
    "keras_team"
  ],
  "kwds": "keras_backend keras_3 keras tensorflow pip_build",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_keras_nightly",
  "homepage": "https://github.com/keras-team/keras",
  "release_count": 973,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_dm_tree",
    "pypi_h5py",
    "pypi_namex",
    "pypi_numpy",
    "pypi_rich"
  ]
}
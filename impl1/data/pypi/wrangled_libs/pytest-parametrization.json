{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: build tools"
  ],
  "description": "# pytest-parametrization\nsimpler pytest parametrization\n\n## how to install\n```bash\npip install pytest-parametrization\n```\n\n\n## how to use\n### explicit parameters\n```python\nfrom parametrization import parametrization\n \n@parametrization.parameters(\"actual\", \"expected\")\n@parametrization.case(name=\"some_case_0\", actual=1, expected=2)\n@parametrization.case(\"some_case_1\", actual=1, expected=2)\n@parametrization.case(\"some_case_2\", 1, expected=1)\n@parametrization.case(\"some_case_3\", 2, 2)\n@parametrization.case(\"some_case_4\", 3, 3)\ndef test_somthing(actual, expected):\n    assert actual == expected\n```\n### auto-detect parameters\n```python\nfrom parametrization import parametrization\n \n@parametrization.autodetect_parameters()\n@parametrization.case(name=\"some_case_0\", actual=1, expected=2)\n@parametrization.case(\"some_case_1\", actual=1, expected=2)\n@parametrization.case(\"some_case_2\", actual=1, expected=1)\ndef test_somthing(actual, expected):\n    assert actual == expected\n```\n### auto-detect parameters with default parameter\n```python\nfrom parametrization import parametrization\n \n@parametrization.autodetect_parameters()\n@parametrization.default_parameters(expected=none)\n@parametrization.case(name=\"some_case_0\", actual=1, expected=2)\n@parametrization.case(\"some_case_1\", actual=1, expected=2)\n@parametrization.case(\"some_case_2\", actual=1, expected=1)\n@parametrization.case(\"some_case_2\", actual=1)\ndef test_somthing(actual, expected):\n    assert actual == expected\n```\n### generate name based on arguments\n```python\nfrom parametrization import parametrization\n\n@parametrization.name_factory(lambda actual, expected: '{}=={}'.format(actual, expected))\n@parametrization.case(actual=1, expected=1)\n@parametrization.case(actual=2, expected=2)\n@parametrization.case('special-name', actual=3, expected=3)\ndef test_somthing(actual, expected):\n    assert actual == expected\n```\n\nas can be seen from the example, you can also give explicit name for a case\neven if you are using name factory.",
  "docs_url": null,
  "keywords": "pytest,parametrize,parametrization,singular",
  "license": "mit license",
  "name": "pytest-parametrization",
  "package_url": "https://pypi.org/project/pytest-parametrization/",
  "project_url": "https://pypi.org/project/pytest-parametrization/",
  "project_urls": {
    "Homepage": "https://github.com/singular-labs/parametrization"
  },
  "release_url": "https://pypi.org/project/pytest-parametrization/2022.2.1/",
  "requires_dist": [],
  "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "summary": "simpler pytest parametrization",
  "version": "2022.2.1",
  "releases": [],
  "developers": [
    "devs@singular.net",
    "singular_labs"
  ],
  "kwds": "parametrize pytest parameters parametrization test_somthing",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pytest_parametrization",
  "homepage": "https://github.com/singular-labs/parametrization",
  "release_count": 5,
  "dependency_ids": []
}
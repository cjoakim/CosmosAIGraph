{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: django",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "django-multiselectfield\n=======================\n\n.. image:: https://travis-ci.org/goinnn/django-multiselectfield.png?branch=master\n    :target: https://travis-ci.org/goinnn/django-multiselectfield\n\n.. image:: https://coveralls.io/repos/goinnn/django-multiselectfield/badge.png?branch=master\n    :target: https://coveralls.io/r/goinnn/django-multiselectfield\n\n.. image:: https://badge.fury.io/py/django-multiselectfield.png\n    :target: https://badge.fury.io/py/django-multiselectfield\n\na new model field and form field. with this you can get a multiple select from a choices. stores to the database as a charfield of comma-separated values.\n\nthis egg is inspired by this `snippet <http://djangosnippets.org/snippets/1200/>`_.\n\nsupported python versions: 2.7, 3.4+\n\nsupported django versions: 1.4-2.0+\n\ninstallation\n============\n\n\ninstall with pip\n----------------\n\n.. code-block:: bash\n\n    $ pip install django-multiselectfield\n\nconfigure your models.py\n------------------------\n\n.. code-block:: python\n\n    from multiselectfield import multiselectfield\n\n    # ...\n\n    my_choices = (('item_key1', 'item title 1.1'),\n                  ('item_key2', 'item title 1.2'),\n                  ('item_key3', 'item title 1.3'),\n                  ('item_key4', 'item title 1.4'),\n                  ('item_key5', 'item title 1.5'))\n\n    my_choices2 = ((1, 'item title 2.1'),\n                   (2, 'item title 2.2'),\n                   (3, 'item title 2.3'),\n                   (4, 'item title 2.4'),\n                   (5, 'item title 2.5'))\n\n    class mymodel(models.model):\n\n        # .....\n\n        my_field = multiselectfield(choices=my_choices)\n        my_field2 = multiselectfield(choices=my_choices2,\n                                     max_choices=3,\n                                     max_length=3)\n\n\nin your settings.py\n-------------------\n\nonly you need it, if you want the translation of django-multiselectfield\n\n.. code-block:: python\n\n    installed_apps = (\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        'django.contrib.admin',\n\n        #.....................#\n\n        'multiselectfield',\n    )\n\n\ncustomizing templates\n---------------------\n\nit is possible to customize the html of this widget in your form template. to do so, you will need to loop through ``form.{field}.field.choices``. here is an example that displays the field label underneath/after the checkbox for a ``multiselectfield`` called ``providers``:\n\n.. code-block:: html+django\n\n    {% for value, text in form.providers.field.choices %}\n      <div class=\"ui slider checkbox\">\n        <input id=\"id_providers_{{ forloop.counter0 }}\" name=\"{{ form.providers.name }}\" type=\"checkbox\" value=\"{{ value }}\"{% if value in checked_providers %} checked=\"checked\"{% endif %}>\n        <label>{{ text }}</label>\n      </div>\n    {% endfor %}\n\n\ndjango rest framework\n---------------------\n\ndjango rest framework comes with a ``multiplechoicefield`` that works perfectly with this:\n\n.. code-block:: python\n\n    from rest_framework import fields, serializers\n\n    from myapp.models import my_choices, my_choices2\n\n    class mymodelserializer(serializers.hyperlinkedmodelserializer):\n        # ...\n        my_field = fields.multiplechoicefield(choices=my_choices)\n        my_field2 = fields.multiplechoicefield(choices=my_choices2)\n        # ...\n\n\nknown bugs and limitations\n==========================\n\nall tests pass on django 1.4, 1.5, and 1.8+, so if you can, use a modern version of django. however, if you must use django 1.6 or 1.7 there are two known issues you will need to be aware of:\n\n1. `named groups <https://github.com/goinnn/django-multiselectfield/pull/30#issue-52149983>`_ do not render properly in django 1.6. the workaround is to manually render the field in your form or use a custom widget. if your workaround is suitably generic, please submit a pull request with it.\n\n2. only in django 1.6 and 1.7, due to `django bug #9619 <https://code.djangoproject.com/ticket/9619>`_, passing a multiselectfield to ``values()`` or ``values_list()`` will return the database representation of the field (a string of comma-separated values). the workaround is to manually call ``.split(',')`` on the result.\n\n   the django bug was introduced in django 1.6 and is fixed in django 1.8 and onward, so ``values()`` and ``values_list()`` return a vanilla python list of values for django <= 1.5 and django >= 1.8.\n\n   see `issue #40 <https://github.com/goinnn/django-multiselectfield/issues/40>`_ for discussion about this bug.\n\n\ndevelopment\n===========\n\nyou can get the last bleeding edge version of django-multiselectfield by doing a clone\nof its git repository:\n\n.. code-block:: bash\n\n    git clone https://github.com/goinnn/django-multiselectfield\n\n\nexample project\n===============\n\nthere is a fully configured example project in the `example directory <https://github.com/goinnn/django-multiselectfield/tree/master/example/>`_. you can run it as usual:\n\n.. code-block:: bash\n\n    python manage.py migrate  # or python manage.py syncdb --noinput\n    python manage.py loaddata app_data\n    python manage.py runserver\n\n\n0.1.12 (2020-02-20)\n-------------------\n\n* optimize multiselectfield to_python method\n* thanks to:\n    * `daimon99  <https://github.com/daimon99>`_\n\n0.1.11 (2019-12-19)\n-------------------\n\n* added support for django 3\n* added support for python 3.8\n* thanks to:\n    * `thijsboehme  <https://github.com/thijsboehme>`_\n\n0.1.9 (2019-10-02)\n------------------\n\n* added support for django 2\n* added support for python 3.6\n* drop support for python (2.6, 3.3)\n* thanks to:\n    * `hirokinko <https://github.com/hirokinko>`_\n\n0.1.6 (2017-05-10)\n------------------\n\n* added support for django 1.11\n* added support for python 3.6\n* improved rendering in django admin\n* improved documentation\n* thanks to:\n    * `atten <https://github.com/atten>`_\n    * `ixc <https://github.comixc>`_\n    * `leilaniann <https://github.comleilaniann>`_\n\n0.1.5 (2017-01-02)\n------------------\n\n* added support for django 1.8-1.10\n* added support for named groups in choices\n* added support for min_choices argument\n* various fixes\n* more tests\n* thanks to:\n    * `danilogbotelho <https://github.comdanilogbotelho>`_\n    * `dmitry-krasilnikov <https://github.comdmitry-krasilnikov>`_\n    * `kamil d\u0119bowski <https://github.comkdebowski>`_\n\n0.1.4 (2016-02-23)\n------------------\n\n* fixed warning about subfieldbase\n* added support for django 1.8+\n* added support for named groups\n* we now play nice with django-dynamic-fixture\n* more tests\n\n0.1.3 (2014-10-13)\n------------------\n\n* support to django 1.7 (i'm sorry to the delay)\n* adding get_field_list function\n* fix an error when a multiselectfield was reandonly at the admin site\n* thanks to:\n    * `hernil <https://github.com/hernil>`_\n    * `vasyl stanislavchuk <https://github.com/vasyabigi>`_\n    * `litchfield <https://github.com/litchfield/>`_\n    * `chris-erickson <https://github.com/chris-erickson>`_\n\n0.1.2 (2014-04-04)\n------------------\n\n* include the spanish translations to the pypi egg\n* improvements in the readme file\n* windows os compatibility\n* thanks to:\n    * `stillnewb <https://github.com/stillnewb>`_\n    * `diego yungh <https://github.com/diegoyungh>`_\n\n0.1.1 (2013-12-04)\n------------------\n* move the multiselectfield app to parent folder\n* details\n\n0.1.0 (2013-11-30)\n------------------\n\n* test/example project\n* now works if the first composant of the list of tuple is an integer\n* now max_length is not required, the multiselect field calculate it automatically.\n* the max_choices attr can be a attr in the model field\n* refactor the code\n* spanish translations\n* support to python2.6\n* thanks to:\n    * `daniele procida <https://github.com/evildmp>`_\n\n0.0.3 (2013-09-11)\n------------------\n\n* python 3 compatible\n* fix an error, the snippet had another error when the choices were translatables\n* improvements in the readme file\n\n\n0.0.2 (2012-09-28)\n------------------\n\n* fix an error, the snippet had an error.\n\n0.0.1 (2012-09-27)\n------------------\n\n* initial version from the next `snippet <http://djangosnippets.org/snippets/1200/>`_\n\n\n",
  "docs_url": null,
  "keywords": "django,multiple,select,field,choices",
  "license": "lgpl 3",
  "name": "django-multiselectfield",
  "package_url": "https://pypi.org/project/django-multiselectfield/",
  "project_url": "https://pypi.org/project/django-multiselectfield/",
  "project_urls": {
    "Homepage": "https://github.com/goinnn/django-multiselectfield"
  },
  "release_url": "https://pypi.org/project/django-multiselectfield/0.1.12/",
  "requires_dist": [
    "django (>=1.4)"
  ],
  "requires_python": "",
  "summary": "django multiple select field",
  "version": "0.1.12",
  "releases": [],
  "developers": [
    "goinnn@gmail.com",
    "pablo_martin"
  ],
  "kwds": "multiselectfield multiplechoicefield multiselect djangosnippets django",
  "license_kwds": "lgpl 3",
  "libtype": "pypi",
  "id": "pypi_django_multiselectfield",
  "homepage": "https://github.com/goinnn/django-multiselectfield",
  "release_count": 18,
  "dependency_ids": [
    "pypi_django"
  ]
}
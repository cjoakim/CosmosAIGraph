{
  "classifiers": [],
  "description": "cylp\n====\n\ncylp is a python interface to coin-or\u2019s linear and mixed-integer program solvers\n(clp, cbc, and cgl). cylp\u2019s unique feature is that you can use it to alter the\nsolution process of the solvers from within python. for example, you may\ndefine cut generators, branch-and-bound strategies, and primal/dual simplex\npivot rules completely in python.\n\nyou may read your lp from an mps file or use the cylp\u2019s easy modeling\nfacility. please find examples in the `documentation\n<http://coin-or.github.io/cylp/>`_.\n\ndocker\n======\n\nif you're comfortable with docker, you can get started right away with the container \navailable on dockerhub that comes with cylp pre-installed. \n\nhttps://hub.docker.com/repository/docker/coinor/cylp\n\notherwise, read on. \n\nprerequisites and installation\n==============================\n\non windows: installation as a binary wheel\n------------------------------------------\n\non windows, a binary wheel is available and it is not necessary to install cbc.\njust do::\n\n    $ python -m pip install cylp\n\non linux/macos: installation as a binary wheel\n---------------------------------------------------------\n\nbinary wheels are available for linux and some versions of os x \nfor some versions of python. to see if there is a wheel available\nfor your platform, you can browse \n\nhttps://pypi.org/project/cylp/#files\n\nor just try::\n\n    $ python -m pip install cylp\n\nin case this fails, it is most likely that there is no wheel for your platform.\nif you are on linux, this can probably be addressed by switching to \na supported python version with, e.g., conda::\n\n    $ conda create -n cylp python=3.9\n    $ conda activate cylp\n    \nif all else fails, it is easy to install from source, but cbc must be \ninstalled first, as detailed below. the easiest route for this is to use\nconda.\n\non linux/macos with conda: installation from source\n---------------------------------------------------\n\ncylp depends on `numpy <https://numpy.org>`_ and `cython <https://cython.org/>`_\nas prerequisites for building from source (`build-system requires`).\nyou will also need to install binaries for cbc. the version should be 2.10 (recommended) or earlier \n(current master branch of cbc will not work with this version of cylp).\n\nthe following commands will create and activate a new conda environment with all\nthese prerequisites installed::\n\n    $ conda create -n cylp coin-or-cbc cython numpy pkg-config scipy -c conda-forge\n    $ conda activate cylp\n\nnow you can install cylp from pypi::\n\n    $ pip install --no-build-isolation cylp\n\n(the option `--no-build-isolation` ensures that `cylp` uses the python packages\ninstalled by conda in the build phase.)\n\nalternatively, if you have cloned cylp from github::\n\n    $ pip install --no-build-isolation .\n\non linux/macos with pip: installation from source\n-------------------------------------------------\n\nfirst of all, you will need to install binaries for cbc. the version should be 2.10 (recommended) or earlier \n(current master branch of cbc will not work with this version of cylp).\nyou can install cbc by either by installing with your system's package manager, by downloading pre-built binaries,\nor by building yourself from source using `coinbrew <https://github.com/coin-or/coinbrew>`_.\n\n1. to install cbc in linux, the easiest way is to use a package manager. install\n   `coinor-libcbc-dev` on ubuntu/debian or `coin-or-cbc-devel` on fedora, or the\n   `corresponding package on your distribution\n   <https://doc.sagemath.org/html/en/reference/spkg/cbc.html#equivalent-system-packages>`_.\n\n#. on macos, it is easiest to install cbc with homebrew:\n         \n   ``$ brew install cbc pkg-config``\n\nyou should no longer need to build cbc from source on any platform unless for some reason, none of the\nabove recipes applies to you. if you do need to build from source, please go to the `cbc <https://github.com/coin-or/cbc>`_\nproject page and follow the instructions there. after building and installing, make sure to \neither set the `coin_install_dir` variable to point to the installation or set `pkg_config_path` to point to\nthe directory where the `.pc` files are installed. you may also need to set either `ld_library_path` (linux)\nor `dyld_library_path` (macos).\n\nnext, build and install cylp::\n\n    $ python -m pip install cylp\n\nthis will build cylp in an isolated environment that provides the build prerequisites\nand install it together with its runtime dependencies (`install-requires`),\nnumpy and `scipy <https://scipy.org>`.\n\ntesting your installation\n=========================\n\noptional step:\n    if you want to run the doctests (i.e. ``make doctest`` in the ``doc`` directory)\n    you should also define::\n\n        $ export cylp_source_dir=/path/to/cylp\n\nnow you can use cylp in your python code. for example::\n\n    >>> from cylp.cy import cyclpsimplex\n    >>> s = cyclpsimplex()\n    >>> s.readmps('../input/netlib/adlittle.mps')\n    0\n    >>> s.initialsolve()\n    'optimal'\n    >>> round(s.objectivevalue, 3)\n    225494.963\n\nor simply go to cylp and run::\n\n    $ python -m unittest discover\n\nto run all cylp unit tests (this is currently broken).\n\nmodeling example\n================\n\nhere is an example of how to model with cylp's modeling facility::\n\n    import numpy as np\n    from cylp.cy import cyclpsimplex\n    from cylp.py.modeling.cylpmodel import cylparray\n\n    s = cyclpsimplex()\n\n    # add variables\n    x = s.addvariable('x', 3)\n    y = s.addvariable('y', 2)\n\n    # create coefficients and bounds\n    a = np.matrix([[1., 2., 0],[1., 0, 1.]])\n    b = np.matrix([[1., 0, 0], [0, 0, 1.]])\n    d = np.matrix([[1., 2.],[0, 1]])\n    a = cylparray([5, 2.5])\n    b = cylparray([4.2, 3])\n    x_u= cylparray([2., 3.5])\n\n    # add constraints\n    s += a * x <= a\n    s += 2 <= b * x + d * y <= b\n    s += y >= 0\n    s += 1.1 <= x[1:3] <= x_u\n\n    # set the objective function\n    c = cylparray([1., -2., 3.])\n    s.objective = c * x + 2 * y.sum()\n\n    # solve using primal simplex\n    s.primal()\n    print(s.primalvariablesolution['x'])\n\nthis is the expected output::\n\n    clp0006i 0  obj 1.1 primal inf 2.8999998 (2) dual inf 5.01e+10 (5) w.o. free dual inf (4)\n    clp0006i 5  obj 1.3\n    clp0000i optimal - objective value 1.3\n    [ 0.2  2.   1.1]\n\ndocumentation\n=============\n\nyou may access cylp's documentation:\n\n1. *online* : please visit http://coin-or.github.io/cylp/\n\n2. *offline* : to install cylp's documentation in your repository, you need\n   sphinx (https://www.sphinx-doc.org/). you can generate the documentation by\n   going to cylp/doc and run ``make html`` or ``make latex`` and access the\n   documentation under cylp/doc/build. you can also run ``make doctest`` to\n   perform all the doctest.\n   \nwho uses cylp\n=============\n\nthe following software packages make use of cylp:\n\n#. `cvxpy <https://www.cvxpy.org/>`_, a python-embedded modeling language for\n   convex optimization problems, uses cylp for interfacing to cbc, which is one\n   of the `supported mixed-integer solvers\n   <https://www.cvxpy.org/tutorial/advanced/index.html#mixed-integer-programs>`_.\n\ncylp has been used in a wide range of practical and research fields. some of the users include:\n\n#. `pyart <https://github.com/arm-doe/pyart>`_, the python arm radar toolkit,\n   used by atmospheric radiation measurement (u.s. department of energy).\n#. meteorological institute university of bonn.\n#. sherbrooke university hospital (centre hospitalier universitaire de sherbrooke): cylp is used for nurse scheduling.\n#. maisonneuve-rosemont hospital (l'h\u00f4pital hmr): cylp is used for  physician scheduling with preferences.\n#. lehigh university: cylp is used to teach mixed-integer cuts.\n#. ibm t. j. watson research center\n#. saarland university, germany\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "eclipse public license",
  "name": "cylp",
  "package_url": "https://pypi.org/project/cylp/",
  "project_url": "https://pypi.org/project/cylp/",
  "project_urls": {
    "Homepage": "https://github.com/coin-or/cylp"
  },
  "release_url": "https://pypi.org/project/cylp/0.92.2/",
  "requires_dist": [
    "numpy >=1.5.0",
    "scipy >=0.10.0"
  ],
  "requires_python": "",
  "summary": "a python interface for clp, cbc, and cgl",
  "version": "0.92.2",
  "releases": [],
  "developers": [
    "mehdi.towhidi@gerad.ca",
    "mehdi_towhidi",
    "ted@lehigh.edu",
    "ted_ralphs"
  ],
  "kwds": "cylp cylp_source_dir solvers cyclpsimplex cylparray",
  "license_kwds": "eclipse public license",
  "libtype": "pypi",
  "id": "pypi_cylp",
  "homepage": "https://github.com/coin-or/cylp",
  "release_count": 27,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy"
  ]
}
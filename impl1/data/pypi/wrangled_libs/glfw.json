{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: macos x",
    "environment :: x11 applications",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: multimedia :: graphics",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "pyglfw\n======\n\nthis module provides python bindings for `glfw <http://www.glfw.org/>`__\n(on github: `glfw/glfw <http://github.com/glfw/glfw>`__). it is a\n``ctypes`` wrapper which keeps very close to the original glfw api,\nexcept for:\n\n-  function names use the pythonic ``words_with_underscores`` notation\n   instead of ``camelcase``\n-  ``glfw_`` and ``glfw`` prefixes have been removed, as their function\n   is replaced by the module namespace\n   (you can use ``from glfw.glfw import *`` if you prefer the naming\n   convention used by the glfw c api)\n-  structs have been replaced with python sequences and namedtuples\n-  functions like ``glfwgetmonitors`` return a list instead of a pointer\n   and an object count\n-  gamma ramps use floats between 0.0 and 1.0 instead of unsigned shorts\n   (use ``glfw.normalize_gamma_ramps=false`` to disable this)\n-  glfw errors are reported as ``glfw.glfwerror`` warnings if no error\n   callback is set (use ``glfw.error_reporting=false`` to disable this,\n   set it to 'warn' instead to issue warnings, set it to 'log' to log it\n   using the 'glfw' logger or set it to a dict to define the behavior for\n   specific error codes)\n-  instead of a sequence for ``glfwimage`` structs, pil/pillow ``image``\n   objects can be used\n\ninstallation\n------------\n\npyglfw can be installed using pip:\n\n.. code:: sh\n\n    pip install glfw\n\nwindows\n~~~~~~~\n\nthe glfw shared library and visual c++ runtime are included in the python wheels.\n\nto use a different glfw library, you can set ``pyglfw_library`` to its location.\n\nmacos\n~~~~~\n\nthe glfw shared library for 64-bit is included in the python wheels for macos.\n\nif you are using a 32-bit python installation or otherwise cannot use the\nlibrary downloaded with the wheel, you can build and install it yourself by\n`compiling glfw from source <http://www.glfw.org/docs/latest/compile.html>`__\n(use ``-dbuild_shared_libs=on``).\n\npyglfw will search for the library in a list of search paths (including those\nin ``dyld_library_path``). if you want to use a specific library, you can set\nthe ``pyglfw_library`` environment variable to its path.\n\nlinux\n~~~~~\n\nthe glfw shared library is included in the python wheels for linux. although\npyglfw will try to detect whether the glfw library for wayland or x11 should\nbe used, you can set the ``pyglfw_library_variant`` variable to ``wayland`` or\n``x11`` to select either variant of the library.\n\nif you cannot use these on your system, you can install the glfw shared\nlibrary using a package management system (e.g. ``apt install libglfw3``\non debian or ubuntu) or you can build and install it yourself by\n`compiling glfw from source <http://www.glfw.org/docs/latest/compile.html>`__\n(use ``-dbuild_shared_libs=on``).\n\npyglfw will search for the library in a list of search paths (including those\nin ``ld_library_path``). if you want to use a specific library, you can set\nthe ``pyglfw_library`` environment variable to its path.\n\ncx_freeze / pyinstaller\n~~~~~~~~~~~~~~~~~~~~~~~\n\npyglfw will search for the glfw library in the current working directory, the directory\nof the executable and in the package on non-windows platforms if running in an\nexecutable frozen with cx_freeze or pyinstaller, unless the ``pyglfw_library``\nenvironment variable is set.\n\ndevelopment version\n~~~~~~~~~~~~~~~~~~~\n\nif you are using the development version of glfw and would like to use wrappers\nfor currently unreleased macros and functions, you can instead install:\n\n.. code:: sh\n\n    pip install glfw[preview]\n\nor set the ``pyglfw_preview`` environment variable.\n\nnote, however, that there will be a slight delay between the development\nversion of glfw and the wrappers provided by this package.\n\nexample code\n------------\n\nthe example from the `glfw\ndocumentation <http://www.glfw.org/documentation.html>`__ ported to\npyglfw:\n\n.. code:: python\n\n    import glfw\n\n    def main():\n        # initialize the library\n        if not glfw.init():\n            return\n        # create a windowed mode window and its opengl context\n        window = glfw.create_window(640, 480, \"hello world\", none, none)\n        if not window:\n            glfw.terminate()\n            return\n\n        # make the window's context current\n        glfw.make_context_current(window)\n\n        # loop until the user closes the window\n        while not glfw.window_should_close(window):\n            # render here, e.g. using pyopengl\n\n            # swap front and back buffers\n            glfw.swap_buffers(window)\n\n            # poll for and process events\n            glfw.poll_events()\n\n        glfw.terminate()\n\n    if __name__ == \"__main__\":\n        main()\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "glfw",
  "package_url": "https://pypi.org/project/glfw/",
  "project_url": "https://pypi.org/project/glfw/",
  "project_urls": {
    "Homepage": "https://github.com/FlorianRhiem/pyGLFW"
  },
  "release_url": "https://pypi.org/project/glfw/2.6.4/",
  "requires_dist": [
    "glfw-preview ; extra == 'preview'"
  ],
  "requires_python": "",
  "summary": "a ctypes-based wrapper for glfw3.",
  "version": "2.6.4",
  "releases": [],
  "developers": [
    "florian.rhiem@gmail.com",
    "florian_rhiem"
  ],
  "kwds": "pyglfw_library pyglfw_library_variant glfw pyglfw pyglfw_preview",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_glfw",
  "homepage": "https://github.com/florianrhiem/pyglfw",
  "release_count": 56,
  "dependency_ids": [
    "pypi_glfw_preview"
  ]
}
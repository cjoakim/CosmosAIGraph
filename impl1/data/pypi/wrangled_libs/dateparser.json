{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "==========================\nintroduction to dateparser\n==========================\n\n\nfeatures\n========\n\n* generic parsing of dates in over 200 language locales plus numerous formats in a language agnostic fashion.\n* generic parsing of relative dates like: ``'1 min ago'``, ``'2 weeks ago'``, ``'3 months, 1 week and 1 day ago'``, ``'in 2 days'``, ``'tomorrow'``.\n* generic parsing of dates with time zones abbreviations or utc offsets like: ``'august 14, 2015 est'``, ``'july 4, 2013 pst'``, ``'21 july 2013 10:15 pm +0500'``.\n* date lookup in longer texts.\n* support for non-gregorian calendar systems. see `supported calendars`_.\n* extensive test coverage.\n\n\nbasic usage\n===========\n\nthe most straightforward way is to use the `dateparser.parse <#dateparser.parse>`_ function,\nthat wraps around most of the functionality in the module.\n\n\n   \n   :noindex:\n\n\npopular formats\n---------------\n\n    >>> import dateparser\n    >>> dateparser.parse('12/12/12')\n    datetime.datetime(2012, 12, 12, 0, 0)\n    >>> dateparser.parse('fri, 12 dec 2014 10:55:50')\n    datetime.datetime(2014, 12, 12, 10, 55, 50)\n    >>> dateparser.parse('martes 21 de octubre de 2014')  # spanish (tuesday 21 october 2014)\n    datetime.datetime(2014, 10, 21, 0, 0)\n    >>> dateparser.parse('le 11 d\u00e9cembre 2014 \u00e0 09:00')  # french (11 december 2014 at 09:00)\n    datetime.datetime(2014, 12, 11, 9, 0)\n    >>> dateparser.parse('13 \u044f\u043d\u0432\u0430\u0440\u044f 2015 \u0433. \u0432 13:34')  # russian (13 january 2015 at 13:34)\n    datetime.datetime(2015, 1, 13, 13, 34)\n    >>> dateparser.parse('1 \u0e40\u0e14\u0e37\u0e2d\u0e19\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21 2005, 1:00 am')  # thai (1 october 2005, 1:00 am)\n    datetime.datetime(2005, 10, 1, 1, 0)\n\nthis will try to parse a date from the given string, attempting to\ndetect the language each time.\n\nyou can specify the language(s), if known, using ``languages`` argument. in this case, given languages are used and language detection is skipped:\n\n    >>> dateparser.parse('2015, ago 15, 1:08 pm', languages=['pt', 'es'])\n    datetime.datetime(2015, 8, 15, 13, 8)\n\nif you know the possible formats of the dates, you can\nuse the ``date_formats`` argument:\n\n    >>> dateparser.parse('22 d\u00e9cembre 2010', date_formats=['%d %b %y'])\n    datetime.datetime(2010, 12, 22, 0, 0)\n\n\nrelative dates\n--------------\n\n    >>> parse('1 hour ago')\n    datetime.datetime(2015, 5, 31, 23, 0)\n    >>> parse('il ya 2 heures')  # french (2 hours ago)\n    datetime.datetime(2015, 5, 31, 22, 0)\n    >>> parse('1 anno 2 mesi')  # italian (1 year 2 months)\n    datetime.datetime(2014, 4, 1, 0, 0)\n    >>> parse('yakla\u015f\u0131k 23 saat \u00f6nce')  # turkish (23 hours ago)\n    datetime.datetime(2015, 5, 31, 1, 0)\n    >>> parse('hace una semana')  # spanish (a week ago)\n    datetime.datetime(2015, 5, 25, 0, 0)\n    >>> parse('2\u5c0f\u65f6\u524d')  # chinese (2 hours ago)\n    datetime.datetime(2015, 5, 31, 22, 0)\n\n.. note:: testing above code might return different values for you depending on your environment's current date and time.\n\n.. note:: for `finnish` language, please specify ``settings={'skip_tokens': []}`` to correctly parse relative dates.\n\nootb language based date order preference\n-----------------------------------------\n\n   >>> # parsing ambiguous date\n   >>> parse('02-03-2016')  # assumes english language, uses mdy date order\n   datetime.datetime(2016, 2, 3, 0, 0)\n   >>> parse('le 02-03-2016')  # detects french, uses dmy date order\n   datetime.datetime(2016, 3, 2, 0, 0)\n\n.. note:: ordering is not locale based, that's why do not expect `dmy` order for uk/australia english. you can specify date order in that case as follows using `settings`:\n\n    >>> parse('18-12-15 06:00', settings={'date_order': 'dmy'})\n    datetime.datetime(2015, 12, 18, 6, 0)\n\nfor more on date order, please look at `settings`.\n\n\ntimezone and utc offset\n-----------------------\n\nby default, `dateparser` returns tzaware `datetime` if timezone is present in date string. otherwise, it returns a naive `datetime` object.\n\n    >>> parse('january 12, 2012 10:00 pm est')\n    datetime.datetime(2012, 1, 12, 22, 0, tzinfo=<statictzinfo 'est'>)\n\n    >>> parse('january 12, 2012 10:00 pm -0500')\n    datetime.datetime(2012, 1, 12, 22, 0, tzinfo=<statictzinfo 'utc\\-05:00'>)\n\n    >>> parse('2 hours ago est')\n    datetime.datetime(2017, 3, 10, 15, 55, 39, 579667, tzinfo=<statictzinfo 'est'>)\n\n    >>> parse('2 hours ago -0500')\n    datetime.datetime(2017, 3, 10, 15, 59, 30, 193431, tzinfo=<statictzinfo 'utc\\-05:00'>)\n\n if date has no timezone name/abbreviation or offset, you can specify it using `timezone` setting.\n\n    >>> parse('january 12, 2012 10:00 pm', settings={'timezone': 'us/eastern'})\n    datetime.datetime(2012, 1, 12, 22, 0)\n\n    >>> parse('january 12, 2012 10:00 pm', settings={'timezone': '+0500'})\n    datetime.datetime(2012, 1, 12, 22, 0)\n\n``timezone`` option may not be useful alone as it only attaches given timezone to\nresultant ``datetime`` object. but can be useful in cases where you want conversions from and to different\ntimezones or when simply want a tzaware date with given timezone info attached.\n\n    >>> parse('january 12, 2012 10:00 pm', settings={'timezone': 'us/eastern', 'return_as_timezone_aware': true})\n    datetime.datetime(2012, 1, 12, 22, 0, tzinfo=<dsttzinfo 'us/eastern' est-1 day, 19:00:00 std>)\n\n\n    >>> parse('10:00 am', settings={'timezone': 'est', 'to_timezone': 'edt'})\n    datetime.datetime(2016, 9, 25, 11, 0)\n\nsome more use cases for conversion of timezones.\n\n    >>> parse('10:00 am est', settings={'to_timezone': 'edt'})  # date string has timezone info\n    datetime.datetime(2017, 3, 12, 11, 0, tzinfo=<statictzinfo 'edt'>)\n\n    >>> parse('now est', settings={'to_timezone': 'utc'})  # relative dates\n    datetime.datetime(2017, 3, 10, 23, 24, 47, 371823, tzinfo=<statictzinfo 'utc'>)\n\nin case, no timezone is present in date string or defined in `settings`. you can still\nreturn tzaware ``datetime``. it is especially useful in case of relative dates when uncertain\nwhat timezone is relative base.\n\n    >>> parse('2 minutes ago', settings={'return_as_timezone_aware': true})\n    datetime.datetime(2017, 3, 11, 4, 25, 24, 152670, tzinfo=<dsttzinfo 'asia/karachi' pkt+5:00:00 std>)\n\nin case, you want to compute relative dates in utc instead of default system's local timezone, you can use `timezone` setting.\n\n    >>> parse('4 minutes ago', settings={'timezone': 'utc'})\n    datetime.datetime(2017, 3, 10, 23, 27, 59, 647248, tzinfo=<statictzinfo 'utc'>)\n\n.. note:: in case, when timezone is present both in string and also specified using `settings`, string is parsed into tzaware representation and then converted to timezone specified in `settings`.\n\n   >>> parse('10:40 pm pkt', settings={'timezone': 'utc'})\n   datetime.datetime(2017, 3, 12, 17, 40, tzinfo=<statictzinfo 'utc'>)\n\n   >>> parse('20 mins ago est', settings={'timezone': 'utc'})\n   datetime.datetime(2017, 3, 12, 21, 16, 0, 885091, tzinfo=<statictzinfo 'utc'>)\n\nfor more on timezones, please look at `settings`.\n\n\nincomplete dates\n----------------\n\n    >>> from dateparser import parse\n    >>> parse('december 2015')  # default behavior\n    datetime.datetime(2015, 12, 16, 0, 0)\n    >>> parse('december 2015', settings={'prefer_day_of_month': 'last'})\n    datetime.datetime(2015, 12, 31, 0, 0)\n    >>> parse('december 2015', settings={'prefer_day_of_month': 'first'})\n    datetime.datetime(2015, 12, 1, 0, 0)\n\n    >>> parse('march')\n    datetime.datetime(2015, 3, 16, 0, 0)\n    >>> parse('march', settings={'prefer_dates_from': 'future'})\n    datetime.datetime(2016, 3, 16, 0, 0)\n    >>> # parsing with preference set for 'past'\n    >>> parse('august', settings={'prefer_dates_from': 'past'})\n    datetime.datetime(2015, 8, 15, 0, 0)\n\n    >>> import dateparser\n    >>> dateparser.parse(\"2015\") # default behavior\n    datetime.datetime(2015, 3, 27, 0, 0)\n    >>> dateparser.parse(\"2015\", settings={\"prefer_month_of_year\": \"last\"})\n    datetime.datetime(2015, 12, 27, 0, 0)\n    >>> dateparser.parse(\"2015\", settings={\"prefer_month_of_year\": \"first\"})\n    datetime.datetime(2015, 1, 27, 0, 0)\n    >>> dateparser.parse(\"2015\", settings={\"prefer_month_of_year\": \"current\"})\n    datetime.datetime(2015, 3, 27, 0, 0)\n\nyou can also ignore parsing incomplete dates altogether by setting `strict_parsing` flag as follows:\n\n    >>> parse('december 2015', settings={'strict_parsing': true})\n    none\n\nfor more on handling incomplete dates, please look at `settings`.\n\n\nsearch for dates in longer chunks of text\n-----------------------------------------\n\n.. warning:: support for searching dates is really limited and needs a lot of improvement, we look forward to community's contribution to get better on that part. see \"`contributing`\".\n\n\nyou can extract dates from longer strings of text. they are returned as list of tuples with text chunk containing the date and parsed datetime object.\n\n\n\n   \n   :noindex:\n\nadvanced usage\n==============\nif you need more control over what is being parser check the `settings` section as well as the `using-datedataparser` section.\n\n\ndependencies\n============\n\n`dateparser` relies on following libraries in some ways:\n\n  * dateutil_'s module ``relativedelta`` for its freshness parser.\n  * convertdate_ to convert *jalali* dates to *gregorian*.\n  * hijri-converter_ to convert *hijri* dates to *gregorian*.\n  * tzlocal_ to reliably get local timezone.\n  * ruamel.yaml_ (optional) for operations on language files.\n\n.. _dateutil: https://pypi.python.org/pypi/python-dateutil\n.. _convertdate: https://pypi.python.org/pypi/convertdate\n.. _hijri-converter: https://pypi.python.org/pypi/hijri-converter\n.. _tzlocal: https://pypi.python.org/pypi/tzlocal\n.. _ruamel.yaml: https://pypi.python.org/pypi/ruamel.yaml\n\nsupported languages and locales\n===============================\nyou can check the supported locales by visiting the \"`supported-locales`\" section.\n\n\nsupported calendars\n===================\n\napart from the georgian calendar, `dateparser` supports the `persian jalali calendar` and the `hijri/islami calendar`\n\nto be able to use them you need to install the `calendar` extra by typing:\n\n    pip install dateparser[calendars]\n\n\n* example using the `persian jalali calendar`. for more information, refer to `persian jalali calendar <https://en.wikipedia.org/wiki/iranian_calendars#zoroastrian_calendar>`_.\n\n    >>> from dateparser.calendars.jalali import jalalicalendar\n    >>> jalalicalendar('\u062c\u0645\u0639\u0647 \u0633\u06cc \u0627\u0645 \u0627\u0633\u0641\u0646\u062f \u06f1\u06f3\u06f8\u06f7').get_date()\n    datedata(date_obj=datetime.datetime(2009, 3, 20, 0, 0), period='day', locale=none)\n\n\n* example using the `hijri/islamic calendar`. for more information, refer to `hijri calendar <https://en.wikipedia.org/wiki/islamic_calendar>`_.\n\n    >>> from dateparser.calendars.hijri import hijricalendar\n    >>> hijricalendar('17-01-1437 \u0647\u0640 08:30 \u0645\u0633\u0627\u0621\u064b').get_date()\n    datedata(date_obj=datetime.datetime(2015, 10, 30, 20, 30), period='day', locale=none)\n\n.. note:: `hijricalendar` only works with python \u2265 3.6.\n\n\n.. :changelog:\n\nhistory\n=======\n\n1.2.0 (2023-11-17)\n------------------\n\nnew features:\n\n- new ``prefer_month_of_year`` setting (#1146)\n\nfixes:\n\n- absolute years in russian are no longer being treated as a number of years in\n  the past (#1129)\n\ncleanups and internal improvements:\n\n- removed the use of ``datetime.utcnow``, deprecated on python 3.12 (#1179)\n- applied black formatting to the code base (#1158)\n- initial integration with ossfuzz (#1198)\n- extended test cases (#1191)\n\n\n1.1.8 (2023-03-22)\n------------------\n\nimprovements:\n\n- improved date parsing for chinese (#1148)\n- improved date parsing for czech (#1151)\n- reorder language by popularity (#1152)\n- fix leak of memory in cache (#1140)\n- add support for \"\\d units later\" (#1154)\n- move modification in cldr data to yaml (#1153)\n- add support to use timezone via settings to get prefer_dates_from result (#1155)\n\n\n1.1.7 (2023-02-02)\n------------------\n\nimprovements:\n\n- add an \u201cago\u201d synonym for arabic (#1128)\n- improved date parsing for czech (#1131)\n- improved date parsing for indonesian (#1134)\n\n\n1.1.6 (2023-01-12)\n------------------\n\nimprovements:\n\n- fix the bug where monday is parsed as a month (#1121)\n- prevent redos in spanish sentence splitting regex (#1084)\n\n\n1.1.5 (2022-12-29)\n------------------\n\nimprovements:\n\n- parse short versions of day, month, and year (#1103)\n- add a test for \u201cin 1d\u201d (#1104)\n- update languages_info (#1107)\n- add a workaround for zipimporter not having exec_module before python 3.10 (#1069)\n- stabilize tests at midnight (#1111)\n- add a test case for french (#1110)\n\ncleanups:\n\n- remove the requirements-build file (#1113)\n\n\n1.1.4 (2022-11-21)\n------------------\n\nimprovements:\n\n- improved support for languages such as slovak, indonesian, hindi, german and japanese (#1064, #1094, #986, #1071, #1068)\n- recursively create a model home (#996)\n- replace regex sub with simple string replace (#1095)\n- add python 3.10, 3.11 support (#1096)\n- drop support for python 3.5, 3.6 versions (#1097)\n\n\n1.1.3 (2022-11-03)\n------------------\n\nnew features:\n\n- add support for fractional units (#876)\n\nimprovements:\n\n- fix the returned datetime skipping a day with time+timezone input and prefer_dates_from = 'future' (#1002)\n- fix input translatation breaking keep_formatting (#720)\n- english: support \"till date\" (#1005)\n- english: support \u201cafter\u201d and \u201cbefore\u201d in relative dates (#1008)\n\ncleanups:\n\n- reorganize internal data (#1090)\n- ci updates (#1088)\n\n\n1.1.2 (2022-10-20)\n------------------\n\nimprovements:\n\n- added support for negative timestamp (#1060)\n- fixed pytzusagewarning for python versions >= 3.6 (#1062)\n- added support for dates with dots and spaces (#1028)\n- improved support for ukrainian, croatian and russian (#1072, #1074, #1079, #1082, #1073, #1083)\n- added support for parsing unix timestamps consistently regardless of timezones (#954)\n- improved tests (#1086)\n\n\n1.1.1 (2022-03-17)\n------------------\n\nimprovements:\n\n- fixed issue with regex library by pinning dependencies to an earlier version (< 2022.3.15, #1046).\n- extended support for russian language dates starting with lowercase (#999).\n- allowed to use_given_order for languages too (#997).\n- fixed link to settings section (#1018).\n- defined utf-8 encoding for windows (#998).\n- fixed directories creation error in cli utils (#1022).\n\n\n1.1.0 (2021-10-04)\n------------------\n\nnew features:\n\n* support language detection based on ``langdetect``, ``fasttext``, or a\n  custom implementation (see #932)\n* add support for 'by <time>' (see #839)\n* sort default language list by internet usage (see #805)\n\nimprovements:\n\n* improved support of chinese (#910), czech (#977)\n* improvements in ``search_dates`` (see #953)\n* make order of previous locales deterministic (see #851)\n* fix parsing with trailing space (see #841)\n* consider ``return_time_as_period`` for timestamp times (see #922)\n* exclude failing regex version (see #974)\n* ongoing work multithreading support (see #881, #885)\n* add demo url (see #883)\n\nqa:\n\n* migrate pipelines from travis ci to github actions (see #859, #879, #884,\n  #886, #911, #966)\n* use versioned cldr data (see #825)\n* add a script to update table of supported languages and locales (see #601)\n* sort 'skip' keys in yaml files (see #844)\n* improve test coverage (see #827)\n* code cleanup (see #888, #907, #951, #958, #957)\n\n\n1.0.0 (2020-10-29)\n------------------\n\nbreaking changes:\n\n* drop support for python 2.7 and pypy (see #727, #744, #748, #749, #754, #755, #758, #761, #763, #764, #777 and #783)\n* now ``datedataparser.get_date_data()`` returns a ``datedata`` object instead of a ``dict`` (see #778).\n* from now wrong ``settings`` are not silenced and raise ``settingvalidationerror`` (see #797)\n* now ``dateparser.parse()`` is deterministic and doesn't try previous locales. also, ``datedataparser.get_date_data()`` doesn't try the previous locales by default (see #781)\n* remove the ``'base-formats'`` parser (see #721)\n* extract the ``'no-spaces-time'`` parser from the ``'absolute-time'`` parser and make it an optional parser (see #786)\n* remove ``numeral_translation_data`` (see #782)\n* remove the undocumented ``skip_tokens_parser`` and ``fuzzy`` settings (see #728, #794)\n* remove support for using strings in ``date_formats`` (see #726)\n* the undocumented ``exactlanguagesearch`` class has been moved to the private scope and some internal methods have changed (see #778)\n* changes in ``dateparser.utils``: ``normalize_unicode()`` doesn't accept ``bytes`` as input and ``convert_to_unicode`` has been deprecated (see #749)\n\nnew features:\n\n* add python 3.9 support (see #732, #823)\n* detect hours separated with a period/dot (see #741)\n* add support for \"decade\" (see #762)\n* add support for the hijri calendar in python \u2265 3.6 (see #718)\n\nimprovements:\n\n* new logo! (see #719)\n* improve the readme and docs (see #779, #722)\n* fix the \"calendars\" extra (see #740)\n* fix leap years when ``prefer_dates_from`` is set (see #738)\n* fix ``strict_parsing`` setting in ``no-spaces-time`` parser (see #715)\n* consider ``return_as_time_period`` setting for ``relative-time`` parser (see #807)\n* parse the 24hr time format with meridian info (see #634)\n* other small improvements (see #698, #709, #710, #712, #730, #731, #735, #739, #784, #788, #795 and #801)\n\n\n0.7.6 (2020-06-12)\n------------------\n\nimprovements:\n\n* rename ``scripts`` to ``dateparser_scripts`` to avoid name collisions with modules from other packages or projects (see #707)\n\n\n0.7.5 (2020-06-10)\n------------------\n\nnew features:\n\n* add python 3.8 support (see #664)\n* implement a ``require_parts`` setting (see #703)\n* add support for subscript and superscript numbers (see #684)\n* extended french support (see #672)\n* extended german support (see #673)\n\n\nimprovements:\n\n* migrate test suite to pytest (see #662)\n* add test to check the `yaml` and `json` files content (see #663 and #692)\n* add flake8 pipeline with pytest-flake8 (see #665)\n* add partial support for 8-digit dates without separators (see #639)\n* fix possible ``overflowerror`` errors and explicitly avoid to raise ``valueerror`` when parsing relative dates (see #686)\n* fix double-digit gmt and utc parsing (see #632)\n* fix bug when using ``date_order`` (see #628)\n* fix bug when parsing relative time with timezone (see #503)\n* fix milliseconds parsing (see #572 and #661)\n* fix wrong values to be interpreted as ``'future'`` in ``prefer_dates_from`` (see #629)\n* other small improvements (see #667, #675, #511, #626, #512, #509, #696, #702 and #699)\n\n\n0.7.4 (2020-03-06)\n------------------\nnew features:\n\n* extended norwegian support (see #598)\n* implement a ``parsers`` setting (see #603)\n\nimprovements:\n\n* add support for ``prefer_dates_from`` in relative/freshness parser (see #414)\n* add support for ``prefer_day_of_month`` in base-formats parser (see #611)\n* added utc -00:00 as a valid offset (see #574)\n* fix support for \u201cone\u201d (see #593)\n* fix typeerror when parsing some invalid dates (see #536)\n* fix tokenizer for non recognized characters (see #622)\n* prevent installing regex 2019.02.19 (see #600)\n* resolve deprecationwarning related to raw string escape sequences (see #596)\n* implement a tox environment to build the documentation (see #604)\n* improve tests stability (see #591, #605)\n* documentation improvements (see #510, #578, #619, #614, #620)\n* performance improvements (see #570, #569, #625)\n\n\n0.7.3 (2020-03-06)\n------------------\n* broken version\n\n\n0.7.2 (2019-09-17)\n------------------\n\nfeatures:\n\n* extended czech support\n* added ``time`` to valid periods\n* added timezone information to dates found with ``search_dates()``\n* support strings as date formats\n\n\nimprovements:\n\n* fixed collections abcs depreciation warning\n* fixed dates with trailing colons not being parsed\n* fixed date format override on any settings change\n* fixed parsing current weekday as past date, regardless of settings\n* added utc -2:30 as a valid offset\n* added python 3.7 to supported versions, dropped support for python 3.3 and 3.4\n* moved to importlib from imp where possible\n* improved support for catalan\n* documentation improvements\n\n\n0.7.1 (2019-02-12)\n------------------\n\nfeatures/news:\n\n* added detected language to return value of ``search_dates()``\n* performance improvements\n* refreshed versions of dependencies\n\nimprovements:\n\n* fixed unpickleable ``datetime`` objects with timezones\n* fixed regex pattern to avoid new behaviour of re.split in python 3.7\n* fixed an exception thrown when parsing colons\n* fixed tests failing on days with number greater than 30\n* fixed ``zerodivisionerror`` exceptions\n\n\n\n0.7.0 (2018-02-08)\n------------------\n\nfeatures added during google summer of code 2017:\n\n* harvesting language data from unicode cldr database (https://github.com/unicode-cldr/cldr-json), which includes over 200 locales (#321) - authored by sarthak maddan.\n  see full currently supported locale list in readme.\n* extracting dates from longer strings of text (#324) - authored by elena zakharova.\n  special thanks for their awesome contributions!\n\n\nnew features:\n\n* added (independently from cldr) georgian (#308) and swedish (#305)\n\nimprovements:\n\n* improved support of chinese (#359), thai (#345), french (#301, #304), russian (#302)\n* removed ruamel.yaml from dependencies (#374). this should reduce the number of installation issues and improve performance as the result of moving away from yaml as basic data storage format.\n  note that yaml is still used as format for support language files.\n* improved performance through using pre-compiling frequent regexes and lazy loading of data (#293, #294, #295, #315)\n* extended tests (#316, #317, #318, #323)\n* updated nose_parameterized to its current package, parameterized (#381)\n\n\nplanned for next release:\n\n* full language and locale names\n* performance and stability improvements\n* documentation improvements\n\n\n0.6.0 (2017-03-13)\n------------------\n\nnew features:\n\n* consistent parsing in terms of true python representation of date string. see #281\n* added support for bangla, bulgarian and hindi languages.\n\nimprovements:\n\n* major bug fixes related to parser and system's locale. see #277, #282\n* type check for timezone arguments in settings. see #267\n* pinned dependencies' versions in requirements. see #265\n* improved support for cn, es, dutch languages. see #274, #272, #285\n\npackaging:\n\n* make calendars extras to be used at the time of installation if need to use calendars feature.\n\n\n0.5.1 (2016-12-18)\n------------------\n\nnew features:\n\n* added support for hebrew\n\nimprovements:\n\n* safer loading of yaml. see #251\n* better timezone parsing for freshness dates. see #256\n* pinned dependencies' versions in requirements. see #265\n* improved support for zh, fi languages. see #249, #250, #248, #244\n\n\n0.5.0 (2016-09-26)\n------------------\n\nnew features:\n\n* ``datedataparser`` now also returns detected language in the result dictionary.\n* explicit and lucid timezone conversion for a given datestring using ``timezone``, ``to_timezone`` settings.\n* added hungarian language.\n* added setting, ``strict_parsing`` to ignore incomplete dates.\n\nimprovements:\n\n* fixed quite a few parser bugs reported in issues #219, #222, #207, #224.\n* improved support for chinese language.\n* consistent interface for both jalali and hijri parsers.\n\n\n0.4.0 (2016-06-17)\n------------------\n\nnew features:\n\n* support for language based date order preference while parsing ambiguous dates.\n* support for parsing dates with no spaces in between components.\n* support for custom date order preference using ``settings``.\n* support for parsing generic relative dates in future.e.g. \"tomorrow\", \"in two weeks\", etc.\n* added ``relative_base`` settings to set date context to any datetime in past or future.\n* replaced ``dateutil.parser.parse`` with dateparser's own parser.\n\nimprovements:\n\n* added simplifications for \"12 noon\" and \"12 midnight\".\n* fixed several bugs\n* replaced pyyaml library by its active fork `ruamel.yaml` which also fixed the issues with installation on windows using python35.\n* more predictable ``date_formats`` handling.\n\n\n0.3.5 (2016-04-27)\n------------------\n\nnew features:\n\n* danish language support.\n* japanese language support.\n* support for parsing date strings with accents.\n\nimprovements:\n\n* transformed languages.yaml into base file and separate files for each language.\n* fixed vietnamese language simplifications.\n* no more version restrictions for python-dateutil.\n* timezone parsing improvements.\n* fixed test environments.\n* cleaned language codes. now we strictly follow codes as in iso 639-1.\n* improved chinese dates parsing.\n\n\n0.3.4 (2016-03-03)\n------------------\n\nimprovements:\n\n* fixed broken version 0.3.3 by excluding latest python-dateutil version.\n\n0.3.3 (2016-02-29)\n------------------\n\nnew features:\n\n* finnish language support.\n\nimprovements:\n\n* faster parsing with switching to regex module.\n* ``return_as_timezone_aware`` setting to return tz aware date object.\n* fixed conflicts with month/weekday names similarity across languages.\n\n0.3.2 (2016-01-25)\n------------------\n\nnew features:\n\n* added hijri calendar support.\n* added settings for better control over parsing dates.\n* support to convert parsed time to the given timezone for both complete and relative dates.\n\nimprovements:\n\n* fixed problem with caching `datetime.now` in `freshnessdatedataparser`.\n* added month names and week day names abbreviations to several languages.\n* more simplifications for russian and ukrainian languages.\n* fixed problem with parsing time component of date strings with several kinds of apostrophes.\n\n\n0.3.1 (2015-10-28)\n------------------\n\nnew features:\n\n* support for jalali calendar.\n* belarusian language support.\n* indonesian language support.\n\n\nimprovements:\n\n* extended support for russian and polish.\n* fixed bug with time zone recognition.\n* fixed bug with incorrect translation of \"second\" for portuguese.\n\n\n0.3.0 (2015-07-29)\n------------------\n\nnew features:\n\n* compatibility with python 3 and pypy.\n\nimprovements:\n\n* `languages.yaml` data cleaned up to make it human-readable.\n* improved spanish date parsing.\n\n\n0.2.1 (2015-07-13)\n------------------\n\n* support for generic parsing of dates with utc offset.\n* support for tagalog/filipino dates.\n* improved support for french and spanish dates.\n\n\n0.2.0 (2015-06-17)\n------------------\n\n* easy to use ``parse`` function\n* languages definitions using yaml.\n* using translation based approach for parsing non-english languages. previously, `dateutil.parserinfo` was used for language definitions.\n* better period extraction.\n* improved tests.\n* added a number of new simplifications for more comprehensive generic parsing.\n* improved validation for dates.\n* support for polish, thai and arabic dates.\n* support for `pytz` timezones.\n* fixed building and packaging issues.\n\n\n0.1.0 (2014-11-24)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "dateparser",
  "license": "bsd",
  "name": "dateparser",
  "package_url": "https://pypi.org/project/dateparser/",
  "project_url": "https://pypi.org/project/dateparser/",
  "project_urls": {
    "History": "https://dateparser.readthedocs.io/en/latest/history.html",
    "Homepage": "https://github.com/scrapinghub/dateparser"
  },
  "release_url": "https://pypi.org/project/dateparser/1.2.0/",
  "requires_dist": [
    "python-dateutil",
    "pytz",
    "regex !=2019.02.19,!=2021.8.27",
    "tzlocal",
    "hijri-converter ; extra == 'calendars'",
    "convertdate ; extra == 'calendars'",
    "fasttext ; extra == 'fasttext'",
    "langdetect ; extra == 'langdetect'"
  ],
  "requires_python": ">=3.7",
  "summary": "date parsing library designed to parse dates from html pages",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "opensource@zyte.com",
    "scrapinghub"
  ],
  "kwds": "dateparser datestring dates calendars iranian_calendars",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_dateparser",
  "homepage": "https://github.com/scrapinghub/dateparser",
  "release_count": 30,
  "dependency_ids": [
    "pypi_convertdate",
    "pypi_fasttext",
    "pypi_hijri_converter",
    "pypi_langdetect",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_regex",
    "pypi_tzlocal"
  ]
}
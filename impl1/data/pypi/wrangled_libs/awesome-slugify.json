{
  "classifiers": [
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4"
  ],
  "description": "===============\nawesome-slugify\n===============\n.. image:: https://travis-ci.org/dimka665/awesome-slugify.svg?branch=master\n    :target: https://travis-ci.org/dimka665/awesome-slugify\n\n**python flexible slugify function**\n\n| pypi: https://pypi.python.org/pypi/awesome-slugify\n| github: https://github.com/dimka665/awesome-slugify\n\n\ninstall\n=======\n.. code-block:: bash\n\n    pip install awesome-slugify\n\nusage\n=====\n\n.. code-block:: python\n\n    from slugify import slugify\n\n    slugify('any text')  # 'any-text'\n\ncustom slugify\n==============\n\n.. code-block:: python\n\n    from slugify import slugify, slugify, uniqueslugify\n\n    slugify('any text', to_lower=true)  # 'any-text'\n\n    custom_slugify = slugify(to_lower=true)\n    custom_slugify('any text')          # 'any-text'\n\n    custom_slugify.separator = '_'\n    custom_slugify('any text')          # 'any_text'\n\n    custom_slugify = uniqueslugify()\n    custom_slugify('any text')          # 'any-text'\n    custom_slugify('any text')          # 'any-text-1'\n\nslugify function optional args\n------------------------------\n\n.. code-block:: python\n\n    to_lower              # if true convert text to lowercase\n    max_length            # output string max length\n    separator             # separator string\n    capitalize            # if true upper first letter\n\n\nslugify class args\n------------------\n\n.. code-block:: python\n\n    pretranslate = none               # function or dict for replace before translation\n    translate = unidecode.unidecode   # function for slugifying or none\n    safe_chars = ''                   # additional safe chars\n    stop_words = ()                   # remove these words from slug\n\n    to_lower = false                  # default to_lower value\n    max_length = none                 # default max_length value\n    separator = '-'                   # default separator value\n    capitalize = false                # default capitalize value\n\nuniqueslugify class args\n------------------------\n\n.. code-block:: python\n\n    # all slugify class args +\n    uids = []                         # initial unique ids\n\npredefined slugify functions\n============================\n\nsome slugify functions is predefined this way:\n\n.. code-block:: python\n\n    from slugify import slugify, cyrillic, german, greek\n\n    slugify = slugify()\n    slugify_unicode = slugify(translate=none)\n\n    slugify_url = slugify()\n    slugify_url.to_lower = true\n    slugify_url.stop_words = ('a', 'an', 'the')\n    slugify_url.max_length = 200\n\n    slugify_filename = slugify()\n    slugify_filename.separator = '_'\n    slugify_filename.safe_chars = '-.'\n    slugify_filename.max_length = 255\n\n    slugify_ru = slugify(pretranslate=cyrillic)\n    slugify_de = slugify(pretranslate=german)\n    slugify_el = slugify(pretranslate=greek)\n\nexamples\n========\n\n.. code-block:: python\n\n    from slugify import slugify, uniqueslugify, slugify, slugify_unicode\n    from slugify import slugify_url, slugify_filename\n    from slugify import slugify_ru, slugify_de\n\n    slugify('one ko\u017eu\u0161\u010dek')                       # one-kozuscek\n    slugify('one two three', separator='.')       # one.two.three\n    slugify('one two three four', max_length=12)  # one-two-four   (12 chars)\n    slugify('one two', to_lower=true)             # one-two\n    slugify('one two', capitalize=true)           # one-two\n\n    slugify_filename(u'\u0434r\u0430ft \u21162.txt')             # draft_2.txt\n    slugify_url(u'\u0434r\u0430ft \u21162.txt')                  # draft-2-txt\n\n    my_slugify = slugify()\n    my_slugify.separator = '.'\n    my_slugify.pretranslate = {'\u044f': 'i', '\u2665': 'love'}\n    my_slugify('\u044f \u2665 \u0431\u043e\u0440\u0449')                        # i.love.borshch  (custom translate)\n\n    slugify('\u044f \u2665 \u0431\u043e\u0440\u0449')                           # ia-borshch  (standard translation)\n    slugify_ru('\u044f \u2665 \u0431\u043e\u0440\u0449')                        # ya-borsch   (alternative russian translation)\n    slugify_unicode('\u044f \u2665 \u0431\u043e\u0440\u0449')                   # \u044f-\u0431\u043e\u0440\u0449      (sanitize only)\n\n    slugify_de('\u00fcber \u00fcber slugify')               # ueber-ueber-slugify\n\n    slugify_unique = uniqueslugify(separator='_')\n    slugify_unique('one two')                     # one_two\n    slugify_unique('one two')                     # one_two_1\n\n    slugify_unique = uniqueslugify(uids=['cellar-door'])\n    slugify_unique('cellar door')                 # cellar-door-1\n\n\ncustom unique slugify checker\n=============================\n\n.. code-block:: python\n\n    from slugify import uniqueslugify\n\n    def my_unique_check(text, uids):\n        if text in uids:\n            return false\n        return not somedbclass.objects.filter(slug_field=text).exists()\n\n    custom_slugify_unique = uniqueslugify(unique_check=my_unique_check)\n\n    # checks the database for a matching document\n    custom_slugify_unique('te occidere possunt')\n\n\nrunning unittests\n=================\n\n.. code-block:: bash\n\n    $ virtualenv venv\n    $ venv/bin/pip install -r requirements.txt\n    $ venv/bin/nosetests slugify\n",
  "docs_url": null,
  "keywords": "slugify slug transliteration russian german unicode translation flexible",
  "license": "gnu gplv3",
  "name": "awesome-slugify",
  "package_url": "https://pypi.org/project/awesome-slugify/",
  "project_url": "https://pypi.org/project/awesome-slugify/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/dimka665/awesome-slugify"
  },
  "release_url": "https://pypi.org/project/awesome-slugify/1.6.5/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "python flexible slugify function",
  "version": "1.6.5",
  "releases": [],
  "developers": [
    "dimka665@gmail.com",
    "dmitry_voronin"
  ],
  "kwds": "slugify_unicode slugify_ru custom_slugify slugify_de my_slugify",
  "license_kwds": "gnu gplv3",
  "libtype": "pypi",
  "id": "pypi_awesome_slugify",
  "homepage": "https://github.com/dimka665/awesome-slugify",
  "release_count": 26,
  "dependency_ids": []
}
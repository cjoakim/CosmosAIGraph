{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3.8"
  ],
  "description": "![sagemaker](https://github.com/aws/sagemaker-training-toolkit/raw/master/branding/icon/sagemaker-banner.png)\n\n# sagemaker training toolkit\n\n[![latest version](https://img.shields.io/pypi/v/sagemaker-training.svg)](https://pypi.python.org/pypi/sagemaker-training) [![supported python versions](https://img.shields.io/pypi/pyversions/sagemaker-training.svg)](https://pypi.python.org/pypi/sagemaker-training) [![code style: black](https://img.shields.io/badge/code_style-black-000000.svg)](https://github.com/python/black)\n\ntrain machine learning models within a docker container using amazon sagemaker.\n\n\n## :books: background\n\n[amazon sagemaker](https://aws.amazon.com/sagemaker/) is a fully managed service for data science and machine learning (ml) workflows.\nyou can use amazon sagemaker to simplify the process of building, training, and deploying ml models.\n\nto train a model, you can include your training script and dependencies in a [docker container](https://www.docker.com/resources/what-container) that runs your training code.\na container provides an effectively isolated environment, ensuring a consistent runtime and reliable training process. \n\nthe **sagemaker training toolkit** can be easily added to any docker container, making it compatible with sagemaker for [training models](https://aws.amazon.com/sagemaker/train/).\nif you use a [prebuilt sagemaker docker image for training](https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html), this library may already be included.\n\nfor more information, see the amazon sagemaker developer guide sections on [using docker containers for training](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).\n\n## :hammer_and_wrench: installation\n\nto install this library in your docker image, add the following line to your [dockerfile](https://docs.docker.com/engine/reference/builder/):\n\n``` dockerfile\nrun pip3 install sagemaker-training\n```\n\n## :computer: usage\n\nthe following are brief how-to guides.\nfor complete, working examples of custom training containers built with the sagemaker training toolkit, please see [the example notebooks](https://github.com/awslabs/amazon-sagemaker-examples/tree/master/advanced_functionality/custom-training-containers).\n\n### create a docker image and train a model\n\n1. write a training script (eg. `train.py`).\n\n2. [define a container with a dockerfile](https://docs.docker.com/get-started/part2/#define-a-container-with-dockerfile) that includes the training script and any dependencies.\n\n    the training script must be located in the `/opt/ml/code` directory.\n    the environment variable `sagemaker_program` defines which file inside the `/opt/ml/code` directory to use as the training entry point.\n    when training starts, the interpreter executes the entry point defined by `sagemaker_program`.\n    python and shell scripts are both supported.\n    \n    ``` docker\n    from yourbaseimage:tag\n  \n    # install the sagemaker training toolkit \n    run pip3 install sagemaker-training\n\n    # copy the training script inside the container\n    copy train.py /opt/ml/code/train.py\n\n    # define train.py as the script entry point\n    env sagemaker_program train.py\n    ```\n\n3. build and tag the docker image.\n\n    ``` shell\n    docker build -t custom-training-container .\n    ```\n\n4. use the docker image to start a training job using the [sagemaker python sdk](https://github.com/aws/sagemaker-python-sdk).\n\n    ``` python\n    from sagemaker.estimator import estimator\n\n    estimator = estimator(image_name=\"custom-training-container\",\n                          role=\"sagemakerrole\",\n                          train_instance_count=1,\n                          train_instance_type=\"local\")\n\n    estimator.fit()\n    ```\n    \n    to train a model using the image on sagemaker, [push the image to ecr](https://docs.aws.amazon.com/amazonecr/latest/userguide/docker-push-ecr-image.html) and start a sagemaker training job with the image uri.\n    \n\n### pass arguments to the entry point using hyperparameters\n\nany hyperparameters provided by the training job are passed to the entry point as script arguments.\nthe sagemaker python sdk uses this feature to pass special hyperparameters to the training job, including `sagemaker_program` and `sagemaker_submit_directory`.\nthe complete list of sagemaker hyperparameters is available [here](https://github.com/aws/sagemaker-training-toolkit/blob/master/src/sagemaker_training/params.py).\n\n1. implement an argument parser in the entry point script. for example, in a python script:\n\n    ``` python\n    import argparse\n\n    if __name__ == \"__main__\":\n      parser = argparse.argumentparser()\n\n      parser.add_argument(\"--learning-rate\", type=int, default=1)\n      parser.add_argument(\"--batch-size\", type=int, default=64)\n      parser.add_argument(\"--communicator\", type=str)\n      parser.add_argument(\"--frequency\", type=int, default=20)\n\n      args = parser.parse_args()\n      ...\n    ```\n\n2. start a training job with hyperparameters.\n\n    ``` python\n    {\"hyperparameters\": {\"batch-size\": 256, \"learning-rate\": 0.0001, \"communicator\": \"pure_nccl\"}}\n    ```\n\n### read additional information using environment variables\n\nan entry point often needs additional information not available in `hyperparameters`.\nthe sagemaker training toolkit writes this information as environment variables that are available from within the script.\nfor example, this training job includes the channels `training` and `testing`:\n\n``` python\nfrom sagemaker.pytorch import pytorch\n\nestimator = pytorch(entry_point=\"train.py\", ...)\n\nestimator.fit({\"training\": \"s3://bucket/path/to/training/data\", \n               \"testing\": \"s3://bucket/path/to/testing/data\"})\n```\n\nthe environment variables `sm_channel_training` and `sm_channel_testing` provide the paths to the channels:\n\n``` python\nimport argparse\nimport os\n\nif __name__ == \"__main__\":\n  parser = argparse.argumentparser()\n\n  ...\n\n  # reads input channels training and testing from the environment variables\n  parser.add_argument(\"--training\", type=str, default=os.environ[\"sm_channel_training\"])\n  parser.add_argument(\"--testing\", type=str, default=os.environ[\"sm_channel_testing\"])\n\n  args = parser.parse_args()\n\n  ...\n```\n\nwhen training starts, sagemaker training toolkit will print all available environment variables. please see the [reference on environment variables](https://github.com/aws/sagemaker-training-toolkit/blob/master/environment_variables.md) for a full list of provided environment variables.\n\n### get information about the container environment\n\nto get information about the container environment, initialize an `environment` object.\n`environment` provides access to aspects of the environment relevant to training jobs, including hyperparameters, system characteristics, filesystem locations, environment variables and configuration settings.\nit is a read-only snapshot of the container environment during training, and it doesn't contain any form of state.\n\n``` python\nfrom sagemaker_training import environment\n\nenv = environment.environment()\n\n# get the path of the channel \"training\" from the `inputdataconfig.json` file\ntraining_dir = env.channel_input_dirs[\"training\"]\n\n# get a the hyperparameter \"training_data_file\" from `hyperparameters.json` file\nfile_name = env.hyperparameters[\"training_data_file\"]\n\n# get the folder where the model should be saved\nmodel_dir = env.model_dir\n\n# train the model\ndata = np.load(os.path.join(training_dir, file_name))\nx_train, y_train = data[\"features\"], keras.utils.to_categorical(data[\"labels\"])\nmodel = resnet50(weights=\"imagenet\")\n...\nmodel.fit(x_train, y_train)\n\n#save the model to the model_dir at the end of training\nmodel.save(os.path.join(model_dir, \"saved_model\"))\n```\n\n### execute the entry point\n\nto execute the entry point, call `entry_point.run()`.\n\n``` python\nfrom sagemaker_training import entry_point, environment\n\nenv = environment.environment()\n\n# read hyperparameters as script arguments\nargs = env.to_cmd_args()\n\n# get the environment variables\nenv_vars = env.to_env_vars()\n\n# execute the entry point\nentry_point.run(uri=env.module_dir,\n                user_entry_point=env.user_entry_point,\n                args=args,\n                env_vars=env_vars)\n\n```\n\nif the entry point execution fails, `trainer.train()` will write the error message to `/opt/ml/output/failure`. otherwise, it will write to the file `/opt/ml/success`.\n\n## :scroll: license\n\nthis library is licensed under the [apache 2.0 license](http://aws.amazon.com/apache2.0/).\nfor more details, please take a look at the [license](https://github.com/aws/sagemaker-training-toolkit/blob/master/license) file.\n\n## :handshake: contributing\n\ncontributions are welcome!\nplease read our [contributing guidelines](https://github.com/aws/sagemaker-training-toolkit/blob/master/contributing.md)\nif you'd like to open an issue or submit a pull request.",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "sagemaker-training",
  "package_url": "https://pypi.org/project/sagemaker-training/",
  "project_url": "https://pypi.org/project/sagemaker-training/",
  "project_urls": {
    "Homepage": "https://github.com/aws/sagemaker-training-toolkit/"
  },
  "release_url": "https://pypi.org/project/sagemaker-training/4.7.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "open source library for creating containers to run on amazon sagemaker.",
  "version": "4.7.4",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "sagemaker_training sagemaker sagemaker_program sagemakerrole sagemaker_submit_directory",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_sagemaker_training",
  "homepage": "https://github.com/aws/sagemaker-training-toolkit/",
  "release_count": 74,
  "dependency_ids": []
}
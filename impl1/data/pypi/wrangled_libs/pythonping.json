{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: system administrators",
    "natural language :: english"
  ],
  "description": "# pythonping\npythonping is simple way to ping in python. with it, you can send icmp probes to remote devices like\nyou would do from the terminal. pythonping is modular, so that you can run it in a script as a\nstandalone function, or integrate its components in a fully-fledged application.\n\n## basic usage\nthe simplest usage of pythonping is in a script. you can use the `ping` function to ping a target.\nif you want to see the output immediately, emulating what happens on the terminal, use the\n`verbose` flag as below.\n\n```python\nfrom pythonping import ping\n\nping('127.0.0.1', verbose=true)\n```\nthis will yeld the following result.\n```\nreply from 127.0.0.1, 9 bytes in 0.17ms\nreply from 127.0.0.1, 9 bytes in 0.14ms\nreply from 127.0.0.1, 9 bytes in 0.12ms\nreply from 127.0.0.1, 9 bytes in 0.12ms\n```\n\nregardless of the verbose mode, the `ping` function will always return a `responselist` object.\nthis is a special iterable object, containing a list of `response` items. in each response, you can\nfind the packet received and some meta information, like the time it took to receive the response\nand any error message.\n\nyou can also tune your ping by using some of its additional parameters:\n* `size` is an integer that allows you to specify the size of the icmp payload you desire\n* `timeout` is the number of seconds you wish to wait for a response, before assuming the target\nis unreachable\n* `payload` allows you to use a specific payload (bytes)\n* `count` specify allows you to define how many icmp packets to send\n* `interval` the time to wait between pings, in seconds\n* `sweep_start` and `sweep_end` allows you to perform a ping sweep, starting from payload size\ndefined in `sweep_start` and growing up to size defined in `sweep_end`. here, we repeat the payload\nyou provided to match the desired size, or we generate a random one if no payload was provided.\nnote that if you defined `size`, these two fields will be ignored\n* `df` is a flag that, if set to true, will enable the *don't fragment* flag in the ip header\n* `verbose` enables the verbose mode, printing output to a stream (see `out`)\n* `out` is the target stream of verbose mode. if you enable the verbose mode and do not provide\n`out`, verbose output will be send to the `sys.stdout` stream. you may want to use a file here.\n* `match` is a flag that, if set to true, will enable payload matching between a ping request\nand reply (default behaviour follows that of windows which counts a successful reply by a\nmatched packet identifier only; linux behaviour counts a non equivalent payload with a matched\npacket identifier in reply as fail, such as when pinging 8.8.8.8 with 1000 bytes and the reply\nis truncated to only the first 74 of request payload with a matching packet identifier)\n\n## faq\n### do i need privileged mode or root?\nyes, you need to be root to use pythonping.\n\n### why do i need to be root to use pythonping?\nall operating systems allow programs to create tcp or udp sockets without requiring particular\npermissions. however, ping runs in icmp (which is neither tcp or udp). this means we have to create\nraw ip packets, and sniff the traffic on the network card.\n**operating systems are designed to require root for such operations**. this is because having\nunrestricted access to the nic can expose the user to risks if the application running has bad\nintentions. this is not the case with pythonping of course, but nonetheless we need this capability\nto create custom ip packets. unfortunately, there is simply no other way to create icmp packets.\n\n## advanced usage\nif you wish to extend pythonping, or integrate it in your application, we recommend to use the\nclasses that are part of python ping instead of the `ping` function. `executor.communicator` \nhandles the communication with the target device, it takes care of sending icmp requests and \nprocessing responses (note that for it to be thread safe you must then handle making a unique\nseed id for each thread instance, see ping.__init\\__ for an example of this). it ultimately\nproduces the `executor.responselist` object. the `communicator` needs to know a target and\nwhich payloads to send to the remote device. for that, we have several classes in the\n`payload_provider` module. you may want to create your own provider by extending\n`payload_provider.payloadprovider`. if you are interested in that, you should check the\ndocumentation of both `executor` and `payload_provider` module.\n\n## code structure\n\n### top level directory layout\nour project directory structure contains all src files in the pythonping folder, test cases in another folder, and helping documentation in on the top level directory.\n\n```\n.\n\u251c\u2500\u2500 pythonping              # source files \n\u251c\u2500\u2500 test                    # automated testcases for the package\n\u251c\u2500\u2500 code_of_conduct         # an md file containing code of conduct\n\u251c\u2500\u2500 contributing            # contributing guidlins\n\u251c\u2500\u2500 license                 # mit license\n\u251c\u2500\u2500 readme.md               # an md file\n\u2514\u2500\u2500 setup.py                # instalation\n```\n\na uml diagram of the code structure is below:\n\n![er1](https://raw.githubusercontent.com/alessandromaggio/pythonping/master/docs/uml-diagram.png)\n\nas per the uml diagram above five distinct classes outside of init exist in this package: executor, icmp, payload provider, and utils. each of them rely on attributes which have been listed as sub-classes for brevities sake. an overview of each class is as follows.\n\n### utils \nsimply generates random text. see function random_text.\n\n### network \nopens a socket to send and recive data. see functions send, recv, and del.\n\n### payload provider\ngenerates icmp payloads with no headers. it's functionaly a interface. it has three\nfunctions init, iter, and next, which are all implmented by subclasses list, repeat, and sweep which store payloads in diffrent lists.\n\n### icmp\ngenerates the icmp heaser through subclass icmptype, and various helper functions.\n\n### executor\nhas various subclasses including message, response, success, and communicator used for sending icmp packets and collecting data.\n\n### init\nuses network, executor, payload_provider and utils.random_text to construct and send icmp packets to ping a network. \n\n## tests\na test package exists under the folder test, and contains a serise of unit tests. before commiting changes make sure to run the test bench and make sure all corrisponding cases pass. for new functionality new test cases must be added and documented.\n\nto run testcases we can simply use the ```unitest discover``` utility by running the following command:\n\n```\npython -m unittest discover <test_directory>\n```\n\nto run the test cases in a specific file file we must run the following command:\n\n```\npython -m unittest discover -s <test_directory> -p file\n```\n\nanother option is to run the following from the top level directory:\n\n```\npytest test\n```\n\nto test for coverage simply run:\n\n```\ncoverage run -m pytest test\n```\n\n## contributing\nbefore contributing read through the contribution guidlines found the contributing file. \n\n### code style\na few key points when contributing to this repo are as follows:\n1. use tabs over spaces.\n2. format doc strings as such:\n    ```\n    description\n\n        :param x: description\n        :type x: type\n        :param y: description\n        :type y: type\n    ```\n    please add doc strings to all functions added.\n3. do not add spaces between docstring and first function line.\n4. do not go over 200 characters per line.\n5. when closing multiline items under brackets('()', '[]', ... etc) put the closing bracket on it's own line. \n",
  "docs_url": null,
  "keywords": "ping,icmp,network",
  "license": "mit",
  "name": "pythonping",
  "package_url": "https://pypi.org/project/pythonping/",
  "project_url": "https://pypi.org/project/pythonping/",
  "project_urls": {
    "Homepage": "https://github.com/alessandromaggio/pythonping"
  },
  "release_url": "https://pypi.org/project/pythonping/1.1.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a simple way to ping in python",
  "version": "1.1.4",
  "releases": [],
  "developers": [
    "alessandro_maggio",
    "me@alessandromaggio.com"
  ],
  "kwds": "ping pinging pings pythonping python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pythonping",
  "homepage": "https://github.com/alessandromaggio/pythonping",
  "release_count": 24,
  "dependency_ids": []
}
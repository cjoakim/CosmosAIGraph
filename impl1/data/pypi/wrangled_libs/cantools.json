{
  "classifiers": [
    "license :: osi approved :: mit license"
  ],
  "description": "|github-actions| |coverage| |nala|\n\nabout\n=====\n\ncan bus tools in python 3.\n\n- `dbc`_, `kcd`_, sym, arxml 3&4 and cdd file parsing.\n\n- can message encoding and decoding.\n\n- simple and extended signal multiplexing.\n\n- diagnostic did encoding and decoding.\n\n- ``candump`` output decoder.\n\n- node `tester`_.\n\n- `c` source code generator.\n\n- can bus monitor.\n\n- graphical plots of signals.\n\nproject homepage: https://github.com/cantools/cantools\n\ndocumentation: https://cantools.readthedocs.io\n\ninstallation\n============\n\n.. code-block:: bash\n\n    python3 -m pip install cantools\n\nexample usage\n=============\n\nscripting\n---------\n\nthe example starts by parsing a `small dbc-file`_ and printing its\nmessages and signals.\n\n.. code-block:: python\n\n   >>> import cantools\n   >>> from pprint import pprint\n   >>> db = cantools.database.load_file('tests/files/dbc/motohawk.dbc')\n   >>> db.messages\n   [message('examplemessage', 0x1f0, false, 8, 'example message used as template in motohawk models.')]\n   >>> example_message = db.get_message_by_name('examplemessage')\n   >>> pprint(example_message.signals)\n   [signal('enable', 7, 1, 'big_endian', false, 1.0, 0, 0.0, 0.0, '-', false, none, {0: 'disabled', 1: 'enabled'}, none),\n    signal('averageradius', 6, 6, 'big_endian', false, 0.1, 0, 0.0, 5.0, 'm', false, none, none, ''),\n    signal('temperature', 0, 12, 'big_endian', true, 0.01, 250, 229.53, 270.47, 'degk', false, none, none, none)]\n\nthe example continues `encoding`_ a message and sending it on a can\nbus using the `python-can`_ package.\n\n.. code-block:: python\n\n   >>> import can\n   >>> can_bus = can.interface.bus('vcan0', bustype='socketcan')\n   >>> data = example_message.encode({'temperature': 250.1, 'averageradius': 3.2, 'enable': 1})\n   >>> message = can.message(arbitration_id=example_message.frame_id, data=data)\n   >>> can_bus.send(message)\n\nalternatively, a message can be encoded using the `encode_message()`_\nmethod on the database object.\n\nthe last part of the example receives and `decodes`_ a can message.\n\n.. code-block:: python\n\n   >>> message = can_bus.recv()\n   >>> db.decode_message(message.arbitration_id, message.data)\n   {'averageradius': 3.2, 'enable': 'enabled', 'temperature': 250.09}\n\nsee `examples`_ for additional examples.\n\ncommand line tool\n-----------------\n\nthe decode subcommand\n^^^^^^^^^^^^^^^^^^^^^\n\ndecode can frames captured with the linux program ``candump``.\n\n.. code-block:: text\n\n   $ candump vcan0 | python3 -m cantools decode tests/files/dbc/motohawk.dbc\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 ::\n   examplemessage(\n       enable: 'enabled' -,\n       averageradius: 0.0 m,\n       temperature: 255.92 degk\n   )\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 ::\n   examplemessage(\n       enable: 'enabled' -,\n       averageradius: 0.0 m,\n       temperature: 255.92 degk\n   )\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 ::\n   examplemessage(\n       enable: 'enabled' -,\n       averageradius: 0.0 m,\n       temperature: 255.92 degk\n   )\n\nalternatively, the decoded message can be printed on a single line:\n\n.. code-block:: text\n\n   $ candump vcan0 | python3 -m cantools decode --single-line tests/files/dbc/motohawk.dbc\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 :: examplemessage(enable: 'enabled' -, averageradius: 0.0 m, temperature: 255.92 degk)\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 :: examplemessage(enable: 'enabled' -, averageradius: 0.0 m, temperature: 255.92 degk)\n     vcan0  1f0   [8]  80 4a 0f 00 00 00 00 00 :: examplemessage(enable: 'enabled' -, averageradius: 0.0 m, temperature: 255.92 degk)\n\nthe plot subcommand\n^^^^^^^^^^^^^^^^^^^\n\nthe plot subcommand is similar to the decode subcommand but messages are visualized using `matplotlib`_ instead of being printed to stdout.\n\n.. code-block:: bash\n\n    $ candump -l vcan0\n    $ cat candump-2021-01-04_180521.log\n    (1609779922.655421) vcan0 00000343#b204b9049c049c04\n    (1609779922.655735) vcan0 0000024a#120527052e051905\n    (1609779923.657524) vcan0 00000343#c404c404cb04c404\n    (1609779923.658086) vcan0 0000024a#8b058b058b059205\n    (1609779924.659912) vcan0 00000343#5c04790479045504\n    (1609779924.660471) vcan0 0000024a#44064b0659064406\n    (1609779925.662277) vcan0 00000343#15040704f203f203\n    (1609779925.662837) vcan0 0000024a#8b069906a706a706\n    (1609779926.664191) vcan0 00000343#bc03b503a703bc03\n    (1609779926.664751) vcan0 0000024a#a006a706c406c406\n\n    $ cat candump-2021-01-04_180521.log | python3 -m cantools plot tests/files/dbc/abs.dbc\n\n.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-1.png\n\nif you don't want to show all signals you can select the desired signals with command line arguments.\na ``*`` can stand for any number of any character, a ``?`` for exactly one arbitrary character.\nsignals separated by a ``-`` are displayed in separate subplots.\noptionally a format can be specified after a signal, separated by a colon.\n\n.. code-block:: bash\n\n    $ cat candump-2021-01-04_180521.log | python3 -m cantools plot tests/files/dbc/abs.dbc '*33.*fl:-<' '*33.*fr:->' - '*33.*rl:-<' '*33.*rr:->'\n\n.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-2-subplots.png\n\nsignals with a different range of values can be displayed in the same subplot on different vertical axes by separating them with a comma.\n\n.. code-block:: bash\n\n   $ cat candump-2021-01-04_180521.log | cantools plot --auto-color tests/files/dbc/abs.dbc -- \\\n      --ylabel 'bremse 33' '*_33.*fl*:-<' '*_33.*fr*:>' '*_33.*rl*:3' '*_33.*rr*:4' , \\\n      --ylabel 'bremse 2' '*_2.*fl*:-<' '*_2.*fr*:>' '*_2.*rl*:3' '*_2.*rr*:4'\n\n.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-2-axes.png\n\nmatplotlib comes with different preinstalled styles that you can use:\n\n.. code-block:: bash\n\n   $ cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc --style seaborn\n\n.. image:: https://github.com/cantools/cantools/raw/master/docs/plot-seaborn.png\n\nyou can try all available styles with\n\n.. code-block:: bash\n\n   $ cantools plot --list-styles . | sed -n '/^- /s/^- //p' | while ifs= read -r style; do\n         cat candump-2021-01-04_180521.log | cantools plot tests/files/dbc/abs.dbc --style \"$style\" --title \"--style '$style'\"\n     done\n\nfor more information see\n\n.. code-block:: bash\n\n    $ python3 -m cantools plot --help\n\nnote that by default matplotlib is not installed with cantools. but it can be by specifying an extra\nat installation:\n\n.. code-block:: bash\n\n    $ python3 -m pip install cantools[plot]\n\nthe dump subcommand\n^^^^^^^^^^^^^^^^^^^\n\ndump given database in a human readable format:\n\n.. code-block:: text\n\n   $ python3 -m cantools dump tests/files/dbc/motohawk.dbc\n   ================================= messages =================================\n\n     ------------------------------------------------------------------------\n\n     name:       examplemessage\n     id:         0x1f0\n     length:     8 bytes\n     cycle time: - ms\n     senders:    pcm1\n     layout:\n\n                             bit\n\n                7   6   5   4   3   2   1   0\n              +---+---+---+---+---+---+---+---+\n            0 |<-x|<---------------------x|<--|\n              +---+---+---+---+---+---+---+---+\n                |                       +-- averageradius\n                +-- enable\n              +---+---+---+---+---+---+---+---+\n            1 |-------------------------------|\n              +---+---+---+---+---+---+---+---+\n            2 |----------x|   |   |   |   |   |\n        b     +---+---+---+---+---+---+---+---+\n        y               +-- temperature\n        t     +---+---+---+---+---+---+---+---+\n        e   3 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            4 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            5 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            6 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n            7 |   |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+---+\n\n     signal tree:\n\n       -- {root}\n          +-- enable\n          +-- averageradius\n          +-- temperature\n\n     signal choices:\n\n       enable\n           0 disabled\n           1 enabled\n\n     ------------------------------------------------------------------------\n\nthe list subcommand\n^^^^^^^^^^^^^^^^^^^\n\nprint all information of a given database in a human readable\nformat. this is very similar to the \"dump\" subcommand, but the output\nis less pretty, slightly more comprehensive and easier to parse by\nshell scripts:\n\n.. code-block:: bash\n\n    $ python3 -m cantools list -a tests/files/dbc/motohawk.dbc\n    examplemessage:\n      comment[none]: example message used as template in motohawk models.\n      frame id: 0x1f0 (496)\n      size: 8 bytes\n      is extended frame: false\n      signals:\n        enable:\n          type: integer\n          start bit: 7\n          length: 1 bits\n          unit: -\n          is signed: false\n          named values:\n            0: disabled\n\nthe generate c source subcommand\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ngenerate `c` source code from given database.\n\nthe generated code contains:\n\n- message `structs`_.\n\n- message `pack`_ and `unpack`_ functions.\n\n- signal `encode`_ and `decode`_ functions.\n\n- frame id, length, type, cycle time and signal choices `defines`_.\n\nknown limitations:\n\n- the maximum signal size is 64 bits, which in practice is never\n  exceeded.\n\nbelow is an example of how to generate c source code from a\ndatabase. the database is ``tests/files/dbc/motohawk.dbc``.\n\n.. code-block:: text\n\n   $ python3 -m cantools generate_c_source tests/files/dbc/motohawk.dbc\n   successfully generated motohawk.h and motohawk.c.\n\nsee `motohawk.h`_ and `motohawk.c`_ for the contents of the generated\nfiles.\n\nin this example we use ``--use-float`` so floating point numbers in the generated\ncode are single precision (``float``) instead of double precision (``double``).\n\n.. code-block:: text\n\n   $ python3 -m cantools generate_c_source --use-float tests/files/dbc/motohawk.dbc\n   successfully generated motohawk.h and motohawk.c.\n\nin the next example we use ``--database-name`` to set a custom\nnamespace for all generated types, defines and functions. the output\nfile names are also changed by this option.\n\n.. code-block:: text\n\n   $ python3 -m cantools generate_c_source --database-name my_database_name tests/files/dbc/motohawk.dbc\n   successfully generated my_database_name.h and my_database_name.c.\n\nsee `my_database_name.h`_ and `my_database_name.c`_ for the contents\nof the generated files.\n\nin the next example we use ``--no-floating-point-numbers`` to generate\ncode without floating point types, i.e. ``float`` and ``double``.\n\n.. code-block:: text\n\n   $ python3 -m cantools generate_c_source --no-floating-point-numbers tests/files/dbc/motohawk.dbc\n   successfully generated motohawk.h and motohawk.c.\n\nsee `motohawk_no_floating_point_numbers.h`_ and\n`motohawk_no_floating_point_numbers.c`_ for the contents of the\ngenerated files.\n\nin the last example ``--node`` is used to generate\nmessage pack functions only for messages sent by the specified node and unpack\nfunctions only for messages with its signal receivers belonging to that node. \n\n.. code-block:: text\n\n   $ cantools generate_c_source tests/files/dbc/motohawk.dbc --node pcm1\n   successfully generated motohawk.h and motohawk.c.\n\nsee `motohawk_sender_node.h`_ and\n`motohawk_sender_node.c`_ for the contents of the\ngenerated files.\n\nother c code generators:\n\n- http://www.coderdbc.com\n\n- https://github.com/howerj/dbcc\n\n- https://github.com/lonkamikaze/hsk-libs/blob/master/scripts/dbc2c.awk\n\n- https://sourceforge.net/projects/comframe/\n\nthe monitor subcommand\n^^^^^^^^^^^^^^^^^^^^^^\n\nmonitor can bus traffic in a text based user interface.\n\n.. code-block:: text\n\n   $ python3 -m cantools monitor tests/files/dbc/motohawk.dbc\n\n.. image:: https://github.com/cantools/cantools/raw/master/docs/monitor.png\n\nthe menu at the bottom of the monitor shows the available commands.\n\n- quit: quit the monitor. ctrl-c can be used as well.\n\n- filter: only display messages matching given regular\n  expression. press <enter> to return to the menu from the filter\n  input line.\n\n- play/pause: toggle between playing and paused (or running and freezed).\n\n- reset: reset the monitor to its initial state.\n\ncontributing\n============\n\n#. fork the repository.\n\n#. install prerequisites.\n\n   .. code-block:: text\n\n      python3 -m pip install -e .[dev]\n\n#. implement the new feature or bug fix.\n\n#. implement test case(s) to ensure that future changes do not break\n   legacy.\n\n#. run the linters\n\n   .. code-block:: text\n\n      ruff check src\n      mypy src\n\n#. run the tests.\n\n   .. code-block:: text\n\n      tox -e py\n\n#. create a pull request.\n\n.. |github-actions| image:: https://github.com/cantools/cantools/actions/workflows/pythonpackage.yml/badge.svg?branch=master\n   :target: https://github.com/cantools/cantools/actions/workflows/pythonpackage.yml\n   :alt: github actions workflow status\n\n.. |coverage| image:: https://coveralls.io/repos/github/cantools/cantools/badge.svg?branch=master\n   :target: https://coveralls.io/github/cantoolscantools?branch=master\n   :alt: test coverage reports on coveralls.io\n\n.. |nala| image:: https://img.shields.io/badge/nala-test-blue.svg\n   :target: https://github.com/cantools/nala\n\n.. _small dbc-file: https://github.com/cantools/cantools/blob/master/tests/files/dbc/motohawk.dbc\n\n.. _motohawk.dbc: https://github.com/cantools/cantools/blob/master/tests/files/dbc/motohawk.dbc\n\n.. _python-can: https://python-can.readthedocs.io/en/master/\n\n.. _dbc: http://www.socialledge.com/sjsu/index.php?title=dbc_format\n\n.. _kcd: https://github.com/julietkilo/kcd\n\n.. _tester: http://cantools.readthedocs.io/en/latest/#cantools.tester.tester\n\n.. _encoding: http://cantools.readthedocs.io/en/latest/#cantools.database.can.message.encode\n\n.. _encode_message(): http://cantools.readthedocs.io/en/latest/#cantools.database.can.database.encode_message\n\n.. _decodes: http://cantools.readthedocs.io/en/latest/#cantools.database.can.database.decode_message\n\n.. _examples: https://github.com/cantools/cantools/blob/master/examples\n\n.. _structs: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l58\n\n.. _pack: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l88\n\n.. _unpack: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l102\n\n.. _encode: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l116\n\n.. _decode: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l125\n\n.. _defines: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h#l42\n\n.. _motohawk.h: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.h\n\n.. _motohawk.c: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk.c\n\n.. _my_database_name.h: https://github.com/cantools/cantools/blob/master/tests/files/c_source/my_database_name.h\n\n.. _my_database_name.c: https://github.com/cantools/cantools/blob/master/tests/files/c_source/my_database_name.c\n\n.. _motohawk_no_floating_point_numbers.h: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.h\n\n.. _motohawk_no_floating_point_numbers.c: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.c\n\n.. _motohawk_sender_node.h: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk_sender_node.h\n\n.. _motohawk_sender_node.c: https://github.com/cantools/cantools/blob/master/tests/files/c_source/motohawk_sender_node.c\n\n.. _matplotlib: https://matplotlib.org/\n",
  "docs_url": null,
  "keywords": "can,can bus,arxml,dbc,kcd,automotive",
  "license": "mit",
  "name": "cantools",
  "package_url": "https://pypi.org/project/cantools/",
  "project_url": "https://pypi.org/project/cantools/",
  "project_urls": {
    "documentation": "https://cantools.readthedocs.io/",
    "homepage": "https://github.com/cantools/cantools",
    "repository": "https://github.com/cantools/cantools"
  },
  "release_url": "https://pypi.org/project/cantools/39.4.1/",
  "requires_dist": [
    "bitstruct >=8.16.1",
    "python-can >=3.3.4",
    "textparser >=0.21.1",
    "diskcache",
    "argparse-addons",
    "crccheck",
    "mypy ; extra == 'dev'",
    "pipx ; extra == 'dev'",
    "ruff ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "matplotlib ; extra == 'plot'",
    "windows-curses ; (platform_system == \"Windows\" and platform_python_implementation == \"CPython\") and extra == 'windows-all'"
  ],
  "requires_python": ">=3.8",
  "summary": "can bus tools.",
  "version": "39.4.1",
  "releases": [],
  "developers": [
    "erik.moqvist@gmail.com"
  ],
  "kwds": "can_bus cantools candump cantoolscantools decode_message",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cantools",
  "homepage": "",
  "release_count": 196,
  "dependency_ids": [
    "pypi_argparse_addons",
    "pypi_bitstruct",
    "pypi_crccheck",
    "pypi_diskcache",
    "pypi_matplotlib",
    "pypi_mypy",
    "pypi_pipx",
    "pypi_python_can",
    "pypi_ruff",
    "pypi_textparser",
    "pypi_tox",
    "pypi_windows_curses"
  ]
}
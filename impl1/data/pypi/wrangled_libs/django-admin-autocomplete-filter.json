{
  "classifiers": [
    "framework :: django",
    "framework :: django :: 2.0",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: os independent",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![pypi version](https://badge.fury.io/py/django-admin-autocomplete-filter.svg?kill_cache=1)](https://badge.fury.io/py/django-admin-autocomplete-filter)\n\n\ndjango admin autocomplete filter\n================================\na simple django app to render list filters in django admin using an autocomplete widget. this app is heavily inspired by [dal-admin-filters.](https://github.com/shamanu4/dal_admin_filters)\n\n\noverview:\n---------\n\ndjango comes preshipped with an admin panel which is a great utility to create quick crud's.\nversion 2.0 came with a much needed [`autocomplete_fields`](https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#django.contrib.admin.modeladmin.autocomplete_fields \"autocomplete_fields\") property which uses a select2 widget to load the options asynchronously.  we leverage this in `django-admin-list-filter`.\n\n\n\nrequirements:\n-------------\n\nrequires django version >= 2.0\n\n\nfeatures:\n-------------\n\n* custom search view/endpoint ([more details](#functionality-to-provide-custom-view-for-search))\n* `list_filter` filter factory support ([more details](#shortcut-for-creating-filters))\n* custom widget text ([more details](#customizing-widget-text))\n* support for [grappelli](https://grappelliproject.com/)\n\n\ninstallation:\n-------------\n\nyou can install it via pip.  to get the latest version clone this repo.\n\n```shell script\npip install django-admin-autocomplete-filter\n```\n\nadd `admin_auto_filters` to your `installed_apps` inside settings.py of your project.\n\n\nusage:\n------\n\nlet's say we have following models:\n```python\nfrom django.db import models\n\nclass artist(models.model):\n    name = models.charfield(max_length=128)\n\nclass album(models.model):\n    name = models.charfield(max_length=64)\n    artist = models.foreignkey(artist, on_delete=models.cascade)\n    cover = models.charfield(max_length=256, null=true, default=none)\n```\n\nand you would like to filter results in `albumadmin` on the basis of `artist`.  you need to define `search fields` in `artist` and then define filter like this:\n\n```python\nfrom django.contrib import admin\nfrom admin_auto_filters.filters import autocompletefilter\n\n\nclass artistfilter(autocompletefilter):\n    title = 'artist' # display title\n    field_name = 'artist' # name of the foreign key field\n\n\nclass artistadmin(admin.modeladmin):\n    search_fields = ['name'] # this is required for django's autocomplete functionality\n    # ...\n\n\nclass albumadmin(admin.modeladmin):\n    list_filter = [artistfilter]\n    # ...\n```\n\nafter following these steps you may see the filter as:\n\n![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot1.png)\n\n![](https://raw.githubusercontent.com/farhan0581/django-admin-autocomplete-filter/master/admin_auto_filters/media/screenshot2.png)\n\n\nfunctionality to provide a custom view for search:\n--------------------------------------------------\n\nyou can also register your custom view instead of using django admin's `search_results` to control the results in the autocomplete. for this you will need to create your custom view and register the url in your admin class as shown below:\n\nin your `views.py`:\n\n```python\nfrom admin_auto_filters.views import autocompletejsonview\n\n\nclass customsearchview(autocompletejsonview):\n    def get_queryset(self):\n        \"\"\"\n           your custom logic goes here.\n        \"\"\"\n        queryset = super().get_queryset()\n        queryset = queryset.order_by('name')\n        return queryset\n```\n\nafter this, register this view in your admin class:\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\n\n\nclass albumadmin(admin.modeladmin):\n    list_filter = [artistfilter]\n\n    def get_urls(self):\n        urls = super().get_urls()\n        custom_urls = [\n            path('custom_search/', self.admin_site.admin_view(customsearchview.as_view(model_admin=self)),\n                 name='custom_search'),\n        ]\n        return custom_urls + urls\n```\n\nfinally, just tell the filter class to use this new view:\n\n```python\nfrom django.shortcuts import reverse\nfrom admin_auto_filters.filters import autocompletefilter\n\n\nclass artistfilter(autocompletefilter):\n    title = 'artist'\n    field_name = 'artist'\n\n    def get_autocomplete_url(self, request, model_admin):\n        return reverse('admin:custom_search')\n```\n\n\nshortcut for creating filters:\n------------------------------\n\nit's also possible to use the `autocompletefilterfactory` shortcut to create\nfilters on the fly, as shown below. nested relations are supported too, with\nno need to specify the model.\n\n```python\nfrom django.contrib import admin\nfrom admin_auto_filters.filters import autocompletefilterfactory\n\n\nclass albumadmin(admin.modeladmin):\n    list_filter = [\n        autocompletefilterfactory('artist', 'artist', 'admin:custom_search', true)\n    ]\n\n    def get_urls(self):\n        \"\"\"as above...\"\"\"\n```\n\n\ncustomizing widget text\n-----------------------\n\nyou can customize the text displayed in the filter widget, to use something\nother than `str(obj)`. this needs to be configured for both the dropdown\nendpoint and the widget itself.\n\nin your `views.py`, override `display_text`:\n\n```python\nfrom admin_auto_filters.views import autocompletejsonview\n\n\nclass customsearchview(autocompletejsonview):\n\n    @staticmethod\n    def display_text(obj):\n        return obj.my_str_method()\n\n    def get_queryset(self):\n        \"\"\"as above...\"\"\"\n```\n\nthen use either of two options to customize the text.\n\noption one is to specify the form_field in an autocompletefilter in your\n`admin.py`:\n\n```python\nfrom django import forms\nfrom django.contrib import admin\nfrom django.shortcuts import reverse\nfrom admin_auto_filters.filters import autocompletefilter\n\n\nclass foodchoicefield(forms.modelchoicefield):\n    def label_from_instance(self, obj):\n        return obj.my_str_method()\n\n\nclass artistfilter(autocompletefilter):\n    title = 'artist'\n    field_name = 'artist'\n    form_field = foodchoicefield\n\n    def get_autocomplete_url(self, request, model_admin):\n        return reverse('admin:custom_search')\n\n\nclass albumadmin(admin.modeladmin):\n    list_filter = [artistfilter]\n\n    def get_urls(self):\n        \"\"\"as above...\"\"\"\n```\n\noption two is to use an autocompletefilterfactory in your `admin.py`\nadd a `label_by` argument:\n\n```python\nfrom django.contrib import admin\nfrom admin_auto_filters.filters import autocompletefilterfactory\n\n\nclass albumadmin(admin.modeladmin):\n    list_filter = [\n        autocompletefilterfactory('artist', 'artist', 'admin:custom_search', true, label_by='my_str_method')\n    ]\n\n    def get_urls(self):\n        \"\"\"as above...\"\"\"\n```\n\n\ncontributing:\n------------\n\nthis project is a combined effort of a lot of selfless developers who try to make things easier. your contribution is most welcome.\n\nplease make a pull-request to the branch `pre_release`, make sure your branch does not have any conflicts, and clearly mention the problems or improvements your pr is addressing.\n\n\nlicense:\n--------\n\ndjango admin autocomplete filter is an open source project licensed under the terms of the gnu general public license.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "django-admin-autocomplete-filter",
  "package_url": "https://pypi.org/project/django-admin-autocomplete-filter/",
  "project_url": "https://pypi.org/project/django-admin-autocomplete-filter/",
  "project_urls": {
    "Homepage": "https://github.com/farhan0581/django-admin-autocomplete-filter"
  },
  "release_url": "https://pypi.org/project/django-admin-autocomplete-filter/0.7.1/",
  "requires_dist": [
    "django (>=2.0)"
  ],
  "requires_python": "",
  "summary": "a simple django app to render list filters in django admin using autocomplete widget",
  "version": "0.7.1",
  "releases": [],
  "developers": [
    "farhan0581@gmail.com",
    "farhan_khan"
  ],
  "kwds": "admin_auto_filters autocompletefilter autocompletefilterfactory autocomplete_fields django",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_admin_autocomplete_filter",
  "homepage": "https://github.com/farhan0581/django-admin-autocomplete-filter",
  "release_count": 8,
  "dependency_ids": [
    "pypi_django"
  ]
}
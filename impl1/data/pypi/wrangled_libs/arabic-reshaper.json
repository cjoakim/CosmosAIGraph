{
  "classifiers": [
    "natural language :: arabic",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "## python arabic reshaper\n\n[![build status](https://app.travis-ci.com/mpcabd/python-arabic-reshaper.svg?branch=master)](https://app.travis-ci.com/mpcabd/python-arabic-reshaper)\n\nreconstruct arabic sentences to be used in applications that don't support\narabic script.\n\nworks with python 3.x\n\n## description\n\narabic script is very special with two essential features:\n\n1. it is written from right to left.\n2. the characters change shape according to their surrounding characters.\n\nso when you try to print text written in arabic script in an application\n\u2013 or a library \u2013 that doesn\u2019t support arabic you\u2019re pretty likely to end up\nwith something that looks like this:\n\n![arabic text written from left to right with no reshaping](http://mpcabd.xyz/wp-content/uploads/2012/05/arabic-1.png)\n\nwe have two problems here, first, the characters are in the isolated form,\nwhich means that every character is rendered regardless of its surroundings,\nand second is that the text is written from left to right.\n\nto solve the latter issue all we have to do is to use the\n[unicode bidirectional algorithm](http://unicode.org/reports/tr9/), which is\nimplemented purely in python in\n[python-bidi](https://github.com/meirkriheli/python-bidi).\nif you use it you\u2019ll end up with something that looks like this:\n\n![arabic text written from right to left with no reshaping](http://mpcabd.xyz/wp-content/uploads/2012/05/arabic-6.png)\n\nthe only issue left to solve is to reshape those characters and replace them\nwith their correct shapes according to their surroundings. using this library\nhelps with the reshaping so we can get the proper result like this:\n\n![arabic text written from right to left with reshaping](http://mpcabd.xyz/wp-content/uploads/2012/05/arabic-3.png)\n\n## installation\n\n    pip install --upgrade arabic-reshaper\n\nif you're using anaconda you can use\n\n    conda install -c mpcabd arabic-reshaper\n\n## usage\n\n```python\nimport arabic_reshaper\n\ntext_to_be_reshaped = '\u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0631\u0627\u0626\u0639\u0629'\nreshaped_text = arabic_reshaper.reshape(text_to_be_reshaped)\n```\n\n### example using pil image\n\npil image does not support reshaping out of the box, so to draw arabic text on an `image` instance you would need to reshape\nthe text for sure.\n\nfor this example to work you need to run `pip install --upgrade arabic-reshaper python-bidi pillow`\n\n```python\n\nimport arabic_reshaper\n\ntext_to_be_reshaped = '\u0627\u0644\u0644\u063a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0631\u0627\u0626\u0639\u0629'\nreshaped_text = arabic_reshaper.reshape(text_to_be_reshaped)\n\n# at this stage the text is reshaped, all letters are in their correct form\n# based on their surroundings, but if you are going to print the text in a\n# left-to-right context, which usually happens in libraries/apps that do not\n# support arabic and/or right-to-left text rendering, then you need to use\n# get_display from python-bidi.\n# note that this is optional and depends on your usage of the reshaped text.\n\nfrom bidi.algorithm import get_display\nbidi_text = get_display(reshaped_text)\n\n# at this stage the text in bidi_text can be easily rendered in any library\n# that doesn't support arabic and/or right-to-left, so use it as you'd use\n# any other string. for example if you're using pil.imagedraw.text to draw\n# text over an image you'd just use it like this...\n\nfrom pil import image, imagedraw, imagefont\n\n# we load arial since it's a well known font that supports arabic unicode\nfont = imagefont.truetype('arial', 40)\n\nimage = image.new('rgba', (800, 600), (255,255,255,0))\nimage_draw = imagedraw.draw(image)\nimage_draw.text((10,10), bidi_text, fill=(255,255,255,128), font=font)\n\n# now the text is rendered properly on the image, you can save it to a file or just call `show` to see it working\nimage.show()\n\n# for more details on pil.image and pil.imagedraw check the documentation\n# see http://pillow.readthedocs.io/en/5.1.x/reference/imagedraw.html?#pil.imagedraw.pil.imagedraw.draw.text\n\n```\n\n## settings\n\nyou can configure the reshaper to your preferences, it has the following\nsettings defined:\n\n* `language` (default: `'arabic'`): ignored, the reshaper works with arabic,\nfarsi, and urdu, and most probably all other languages that use arabic script.\n* `support_ligatures` (default: `true`): when this is set to `false`, the\nreshaper will not replace any ligatures, otherwise it will replace enabled\nligatures.\n* `delete_harakat` (default: `true`): when this is set to `false` the reshaper\nwill not delete the harakat from the text, this will result in them showing up\nin the reshaped text, you should enable this option if you are going to pass\nthe reshaped text to `bidi.algorithm.get_display` because it will reverse the\ntext and you'd end up with harakat applied to the next letter instead of the\nprevious letter.\n* `delete_tatweel` (default `false`): when this is set to `true` the reshaper\nwill delete the tatweel character (u+0640) from the text before reshaping, this\ncan be useful when you want to support ligatures and don't care about tatweel\ngetting deleted.\n* `shift_harakat_position` (default `false`): whether to shift the harakat\n(tashkeel) one position so they appear correctly when string is reversed, this\nmight solve the problem of tashkeel in some systems, although for `pil.image`\nfor example, this is not needed.\n* `support_zwj` (default `true`): whether to support zwj (`u+200d`) or not.\n* `use_unshaped_instead_of_isolated` (default `false`): use unshaped form\ninstead of isolated form, useful in some fonts that are missing the isolated\nform of letters.\n\nbesides the settings above, you can enable/disable supported ligatures. for a\nfull list of supported ligatures and their default status check the file\n[default-config.ini](https://github.com/mpcabd/python-arabic-reshaper/blob/32f7497aa24a68ab880d0248b21715928f0ce212/arabic_reshaper/default-config.ini).\n\nthere are multiple ways that you can configure the reshaper in, choose the one\nthat suits your deployment:\n\n### via arabicreshaper instance `configuration`\n\ninstead of directly using `arabic_reshaper.reshape` function, define an\ninstance of `arabic_reshaper.arabicreshaper`, and pass your config dictionary\nto its constructor's `configuration` parameter like this:\n\n```python\nfrom arabic_reshaper import arabicreshaper\nconfiguration = {\n    'delete_harakat': false,\n    'support_ligatures': true,\n    'rial sign': true,  # replace \u0631 \u064a \u0627 \u0644 with \ufdfc\n}\nreshaper = arabicreshaper(configuration=configuration)\ntext_to_be_reshaped = '\u0633\u0639\u0631 \u0627\u0644\u0645\u0646\u062a\u062c \u0661\u0665\u0660 \u0631' + '\u064a\u0627\u0644'  # had to split the string for display\nreshaped_text = reshaper.reshape(text_to_be_reshaped)\n```\n\n### via arabicreshaper instance `configuration_file`\n\nyou can separte the configuration from your code, by copying the file\n[default-config.ini](default-config.ini) and change its settings,\nthen save it somewhere in your project, and then you can tell the reshaper\nto use your new config file, just pass the path to your config file to its\nconstructor's `configuration_file` parameter like this:\n\n```python\nfrom arabic_reshaper import arabicreshaper\nreshaper = arabicreshaper(configuration_file='/path/to/your/config.ini')\ntext_to_be_reshaped = '\u0633\u0639\u0631 \u0627\u0644\u0645\u0646\u062a\u062c \u0661\u0665\u0660 \u0631' + '\u064a\u0627\u0644'  # had to split the string for display\nreshaped_text = reshaper.reshape(text_to_be_reshaped)\n```\n\nwhere in you `config.ini` you can have something like this:\n\n```\n[arabicreshaper]\ndelete_harakat = no\nsupport_ligatures = yes\nrial sign = yes\n```\n\n### via `python_arabic_reshaper_configuration_file` environment variable\n\ninstead of having to rewrite your old code to configure it like above, you can\ndefine an environment variable with the name\n`python_arabic_reshaper_configuration_file` and in its value put the full path\nto the configuration file. this way the reshape function will pick it\nautomatically, and you won't have to change your old code.\n\n## settings based on a truetype\u00ae font\n\nif you intend to render the text in a truetype\u00ae font, you can tell the library\nto generate its configuration by reading the font file to figure out what's\nsupported in the font and what's not.\n\nto use this feature you need to install the library with an extra option\n(not necessary when you install it with conda):\n\n    pip install --upgrade arabic-reshaper[with-fonttools]\n\nthen you can use the reshaper like this:\n\n```python\nimport arabic_reshaper\n\nreshaper = arabic_reshaper.arabicreshaper(\n    arabic_reshaper.config_for_true_type_font(\n        '/path/to/true-type-font.ttf',\n        arabic_reshaper.enable_all_ligatures\n    )\n)\n```\n\nthis will parse the font file, and figure out what ligatures it supports and enable them,\nas well as whether it has isolated forms or `use_unshaped_instead_of_isolated` should be\nenabled.\n\nthe second parameter to `config_for_true_type_font` can be one of\n\n- `enable_no_ligatures`\n- `enable_sentences_ligatures`\n- `enable_words_ligatures`\n- `enable_letters_ligatures`\n- `enable_all_ligatures` (default)\n\nwhich controls what ligatures to look for, depending on your usage,\nsee [default-config.ini](default-config.ini) to know what ligatures are there.\n\n## tashkeel/harakat issue\n\n[harakat or tashkeel](http://en.wikipedia.org/wiki/arabic_diacritics#tashkil_.28marks_used_as_phonetic_guides.29)\nmight not show up properly in their correct place, depending on the application\nor the library that is doing the rendering for you, so you might want to enable\nthe `shift_harakat_position` option if you face this problem.\n\n## license\n\nthis work is licensed under\n[mit license](https://opensource.org/licenses/mit).\n\n## demo\n\nonline arabic reshaper: http://pydj.mpcabd.xyz/arabic-reshaper/\n\n## download\n\nhttps://github.com/mpcabd/python-arabic-reshaper/tarball/master\n\n## version history\n\n### 3.0.0\n* stop supporting python 2.7\n* remove dependency on `future`. see #88.\n\n### 2.1.4\n\n* fix unparseable version bound for `fonttools` under python 2\n\n### 2.1.3\n\n* remove dependency on `__version__.py` and `default-config.ini` files, as they were causing problems for people who package their apps using pyinstaller or buildozer.\n\n### 2.1.1\n\n* fix a warning. see #57. thanks @fbernhart\n\n### 2.1.0\n\n* added support for settings based on a truetype\u00ae font\n\n### 2.0.14\n\n* new option `use_unshaped_instead_of_isolated` to get around some fonts missing the isolated form for letters.\n\n### 2.0.13\n\n**broken** please make sure not to use this version.\n\n### 2.0.12\n\n* updated letters and ligatures\n* new option `shift_harakat_position` to try to get around the tashkeel problem\n\n### 2.0.11\n\n* proper support for zwj\n\n### 2.0.10\n\n* fix shadda ligatures\n\n### 2.0.9\n\n* added support for zwj (zero-width joiner) (u+200d)\n\n### 2.0.8\n\n* added `delete_tatweel`\n* added more test cases\n\n### 2.0.7\n\n* fix tests for python 2.7\n\n### 2.0.6\n\n* fixed a bug with harakat breaking the reshaping\n* wrote two small unit tests, more to come\n* moved letters and ligatures to separate files for readability/maintainability\n* moved package to its own folder for readability/maintainability\n\n### 2.0.5\n\nfix error message formatting\n\n### 2.0.4\n\nfix error message formatting\n\n### 2.0.3\n\nuse `exception` instead of `error`.\n\n### 2.0.2\n\nuse `pkg_resources.resource_filename` instead of depending on `__file__` to access `default-config.ini`.\n\n### 2.0.1\n\ninclude default-config.ini in setup.py\n\n### 2.0.0\n\n* totally rewrote the code;\n* faster and better performance;\n* added the ability to configure and customise the reshaper.\n\n### 1.0.1\n\n* new glyphs for farsi;\n* added setup.py;\n* bugfixes.\n\n### 1.0\n\n* ported [better arabic reshaper](https://github.com/agawish/better-arabic-reshaper/)\nto python.\n\n## contact\n\nabdullah diab (mpcabd)\nemail:  mpcabd@gmail.com\nblog:   http://mpcabd.xyz\n\nfor more info visit my blog\n[post here](http://mpcabd.xyz/python-arabic-text-reshaper/)\n",
  "docs_url": null,
  "keywords": "arabic shaping reshaping reshaper",
  "license": "mit",
  "name": "arabic-reshaper",
  "package_url": "https://pypi.org/project/arabic-reshaper/",
  "project_url": "https://pypi.org/project/arabic-reshaper/",
  "project_urls": {
    "Download": "https://github.com/mpcabd/python-arabic-reshaper/tarball/master",
    "Homepage": "https://github.com/mpcabd/python-arabic-reshaper/"
  },
  "release_url": "https://pypi.org/project/arabic-reshaper/3.0.0/",
  "requires_dist": [
    "fonttools (>=4.0) ; extra == 'with-fonttools'"
  ],
  "requires_python": "",
  "summary": "reconstruct arabic sentences to be used in applications that do not support arabic",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "abdullah_diab",
    "mpcabd@gmail.com"
  ],
  "kwds": "arabic_reshaper python_arabic_reshaper_configuration_file arabicreshaper arabic_diacritics text_to_be_reshaped",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_arabic_reshaper",
  "homepage": "https://github.com/mpcabd/python-arabic-reshaper/",
  "release_count": 20,
  "dependency_ids": [
    "pypi_fonttools"
  ]
}
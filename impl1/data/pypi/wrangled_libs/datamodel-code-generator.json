{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "# datamodel-code-generator\n\nthis code generator creates [pydantic v1 and v2](https://docs.pydantic.dev/) model, [dataclasses.dataclass](https://docs.python.org/3/library/dataclasses.html), [typing.typeddict](https://docs.python.org/3/library/typing.html#typing.typeddict) \nand [msgspec.struct](https://github.com/jcrist/msgspec) from an openapi file and others.\n\n[![pypi version](https://badge.fury.io/py/datamodel-code-generator.svg)](https://pypi.python.org/pypi/datamodel-code-generator)\n[![conda-forge](https://img.shields.io/conda/v/conda-forge/datamodel-code-generator)](https://anaconda.org/conda-forge/datamodel-code-generator)\n[![downloads](https://pepy.tech/badge/datamodel-code-generator/month)](https://pepy.tech/project/datamodel-code-generator)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/datamodel-code-generator)](https://pypi.python.org/pypi/datamodel-code-generator)\n[![codecov](https://codecov.io/gh/koxudaxi/datamodel-code-generator/graph/badge.svg?token=plzssfb9li)](https://codecov.io/gh/koxudaxi/datamodel-code-generator)\n![license](https://img.shields.io/github/license/koxudaxi/datamodel-code-generator.svg)\n[![ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![pydantic v1](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v1.json)](https://pydantic.dev)\n[![pydantic v2](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/pydantic/pydantic/main/docs/badge/v2.json)](https://pydantic.dev)\n\n## help\nsee [documentation](https://koxudaxi.github.io/datamodel-code-generator) for more details.\n\n## sponsors\n[![jetbrains](https://avatars.githubusercontent.com/u/60931315?s=200&v=4)](https://github.com/jetbrainsofficial)\n\n## quick installation\n\nto install `datamodel-code-generator`:\n```bash\n$ pip install datamodel-code-generator\n```\n\n## simple usage\nyou can generate models from a local file.\n```bash\n$ datamodel-codegen --input api.yaml --output model.py\n```\n\n<details>\n<summary>api.yaml</summary>\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: swagger petstore\n  license:\n    name: mit\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: list all pets\n      operationid: listpets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: how many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: a paged array of pets\n          headers:\n            x-next:\n              description: a link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n                x-amazon-apigateway-integration:\n                  uri:\n                    fn::sub: arn:aws:apigateway:${aws::region}:lambda:path/2015-03-31/functions/${pythonversionfunction.arn}/invocations\n                  passthroughbehavior: when_no_templates\n                  httpmethod: post\n                  type: aws_proxy\n    post:\n      summary: create a pet\n      operationid: createpets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n                x-amazon-apigateway-integration:\n                  uri:\n                    fn::sub: arn:aws:apigateway:${aws::region}:lambda:path/2015-03-31/functions/${pythonversionfunction.arn}/invocations\n                  passthroughbehavior: when_no_templates\n                  httpmethod: post\n                  type: aws_proxy\n  /pets/{petid}:\n    get:\n      summary: info for a specific pet\n      operationid: showpetbyid\n      tags:\n        - pets\n      parameters:\n        - name: petid\n          in: path\n          required: true\n          description: the id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n    x-amazon-apigateway-integration:\n      uri:\n        fn::sub: arn:aws:apigateway:${aws::region}:lambda:path/2015-03-31/functions/${pythonversionfunction.arn}/invocations\n      passthroughbehavior: when_no_templates\n      httpmethod: post\n      type: aws_proxy\ncomponents:\n  schemas:\n    pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/pet\"\n    error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    apis:\n      type: array\n      items:\n        type: object\n        properties:\n          apikey:\n            type: string\n            description: to be used as a dataset parameter value\n          apiversionnumber:\n            type: string\n            description: to be used as a version parameter value\n          apiurl:\n            type: string\n            format: uri\n            description: \"the url describing the dataset's fields\"\n          apidocumentationurl:\n            type: string\n            format: uri\n            description: a url to the api console for each api\n```\n\n</details>\n\n<details>\n<summary>model.py</summary>\n\n```python\n# generated by datamodel-codegen:\n#   filename:  api.yaml\n#   timestamp: 2020-06-02t05:28:24+00:00\n\nfrom __future__ import annotations\n\nfrom typing import list, optional\n\nfrom pydantic import anyurl, basemodel, field\n\n\nclass pet(basemodel):\n    id: int\n    name: str\n    tag: optional[str] = none\n\n\nclass pets(basemodel):\n    __root__: list[pet]\n\n\nclass error(basemodel):\n    code: int\n    message: str\n\n\nclass api(basemodel):\n    apikey: optional[str] = field(\n        none, description='to be used as a dataset parameter value'\n    )\n    apiversionnumber: optional[str] = field(\n        none, description='to be used as a version parameter value'\n    )\n    apiurl: optional[anyurl] = field(\n        none, description=\"the url describing the dataset's fields\"\n    )\n    apidocumentationurl: optional[anyurl] = field(\n        none, description='a url to the api console for each api'\n    )\n\n\nclass apis(basemodel):\n    __root__: list[api]\n```\n</details>\n\n## projects that use datamodel-code-generator\n \nthese oss projects use datamodel-code-generator to generate many models. \nsee the following linked projects for real world examples and inspiration.\n\n- [airbytehq/airbyte](https://github.com/airbytehq/airbyte)\n  - *[code-generator/dockerfile](https://github.com/airbytehq/airbyte/blob/master/tools/code-generator/dockerfile)*\n- [apache/iceberg](https://github.com/apache/iceberg)\n  - *[generate python code](https://github.com/apache/iceberg/blob/d2e1094ee0cc6239d43f63ba5114272f59d605d2/open-api/readme.md?plain=1#l39)* \n    *[`make generate`](https://github.com/apache/iceberg/blob/d2e1094ee0cc6239d43f63ba5114272f59d605d2/open-api/makefile#l24-l34)*\n- [argoproj-labs/hera](https://github.com/argoproj-labs/hera)\n  - *[`makefile`](https://github.com/argoproj-labs/hera/blob/c8cbf0c7a676de57469ca3d6aeacde7a5e84f8b7/makefile#l53-l62)*\n- [awslabs/aws-lambda-powertools-python](https://github.com/awslabs/aws-lambda-powertools-python)\n  - *recommended for [advanced-use-cases](https://awslabs.github.io/aws-lambda-powertools-python/2.6.0/utilities/parser/#advanced-use-cases) in the official documentation*\n- [datadog/integrations-core](https://github.com/datadog/integrations-core)\n  - *[config models](https://github.com/datadog/integrations-core/blob/master/docs/developer/meta/config-models.md)*\n- [hashintel/hash](https://github.com/hashintel/hash)\n  - *[`codegen.sh`](https://github.com/hashintel/hash/blob/9762b1a1937e14f6b387677e4c7fe4a5f3d4a1e1/libs/%40local/hash-graph-client/python/scripts/codegen.sh#l21-l39)*\n- [ibm/compliance-trestle](https://github.com/ibm/compliance-trestle)\n  - *[building the models from the oscal schemas.](https://github.com/ibm/compliance-trestle/blob/develop/docs/contributing/website.md#building-the-models-from-the-oscal-schemas)*\n- [netflix/consoleme](https://github.com/netflix/consoleme)\n  - *[how do i generate models from the swagger specification?](https://github.com/netflix/consoleme/blob/master/docs/gitbook/faq.md#how-do-i-generate-models-from-the-swagger-specification)*\n- [nike-inc/brickflow](https://github.com/nike-inc/brickflow)\n  - *[code generate tools](https://github.com/nike-inc/brickflow/blob/e3245bf638588867b831820a6675ada76b2010bf/tools/readme.md?plain=1#l8)[`./tools/gen-bundle.sh`](https://github.com/nike-inc/brickflow/blob/e3245bf638588867b831820a6675ada76b2010bf/tools/gen-bundle.sh#l15-l22)*\n- [open-metadata/openmetadata](https://github.com/open-metadata/openmetadata)\n  - *[makefile](https://github.com/open-metadata/openmetadata/blob/main/makefile)*\n- [posthog/posthog](https://github.com/posthog/posthog)\n  - *[generate models via `npm run`](https://github.com/posthog/posthog/blob/e1a55b9cb38d01225224bebf8f0c1e28faa22399/package.json#l41)* \n- [seldonio/mlserver](https://github.com/seldonio/mlserver)\n  - *[generate-types.sh](https://github.com/seldonio/mlserver/blob/master/hack/generate-types.sh)*\n\n## supported input types\n-  openapi 3 (yaml/json, [openapi data type](https://github.com/oai/openapi-specification/blob/main/versions/3.0.2.md#data-types));\n-  json schema ([json schema core](http://json-schema.org/draft/2019-09/json-schema-validation.html)/[json schema validation](http://json-schema.org/draft/2019-09/json-schema-validation.html));\n-  json/yaml/csv data (it will be converted to json schema);\n-  python dictionary (it will be converted to json schema);\n-  graphql schema ([graphql schemas and types](https://graphql.org/learn/schema/));\n\n## supported output types\n- [pydantic](https://docs.pydantic.dev/1.10/).basemodel;\n- [pydantic_v2](https://docs.pydantic.dev/2.0/).basemodel;\n- [dataclasses.dataclass](https://docs.python.org/3/library/dataclasses.html);\n- [typing.typeddict](https://docs.python.org/3/library/typing.html#typing.typeddict);\n- [msgspec.struct](https://github.com/jcrist/msgspec);\n- custom type from your [jinja2](https://jinja.palletsprojects.com/en/3.1.x/) template;\n\n## installation\n\nto install `datamodel-code-generator`:\n```bash\n$ pip install datamodel-code-generator\n```\n\n### `http` extra option\nif you want to resolve `$ref` for remote files then you should specify `http` extra option.\n```bash\n$ pip install 'datamodel-code-generator[http]'\n```\n\n### `graphql` extra option\n\nif you want to generate data model from a graphql schema then you should specify `graphql` extra option.\n```bash\n$ pip install 'datamodel-code-generator[graphql]'\n```\n\n### docker image\nthe docker image is in [docker hub](https://hub.docker.com/r/koxudaxi/datamodel-code-generator)\n```bash\n$ docker pull koxudaxi/datamodel-code-generator\n```\n\n## advanced uses\nyou can generate models from a url.\n```bash\n$ datamodel-codegen --url https://<input file url> --output model.py\n```\nthis method needs the [http extra option](#http-extra-option)\n\n\n## all command options\n\nthe `datamodel-codegen` command:\n```bash\nusage:\n  datamodel-codegen [options]\n\ngenerate python data models from schema definitions or structured data\n\noptions:\n  --http-headers http_header [http_header ...]\n                        set headers in http requests to the remote host.\n                        (example: \"authorization: basic dxnlcjpwyxnz\")\n  --http-ignore-tls     disable verification of the remote host's tls\n                        certificate\n  --input input         input file/directory (default: stdin)\n  --input-file-type {auto,openapi,jsonschema,json,yaml,dict,csv}\n                        input file type (default: auto)\n  --output output       output file (default: stdout)\n  --output-model-type {pydantic.basemodel,pydantic_v2.basemodel,dataclasses.dataclass,typing.typeddict,msgspec.struct}\n  --url url             input file url. `--input` is ignored when `--url` is\n                        used\n\ntyping customization:\n  --base-class base_class\n                        base class (default: pydantic.basemodel)\n  --enum-field-as-literal {all,one}\n                        parse enum field as literal. all: all enum field type\n                        are literal. one: field type is literal when an enum\n                        has only one possible value\n  --field-constraints   use field constraints and not con* annotations\n  --set-default-enum-member\n                        set enum members as default values for enum field\n  --strict-types {str,bytes,int,float,bool} [{str,bytes,int,float,bool} ...]\n                        use strict types\n  --use-annotated       use typing.annotated for field(). also, `--field-\n                        constraints` option will be enabled.\n  --use-generic-container-types\n                        use generic container types for type hinting\n                        (typing.sequence, typing.mapping). if `--use-standard-\n                        collections` option is set, then import from\n                        collections.abc instead of typing\n  --use-non-positive-negative-number-constrained-types\n                        use the non{positive,negative}{floatint} types instead\n                        of the corresponding con* constrained types.\n  --use-one-literal-as-default\n                        use one literal as default value for one literal field\n  --use-standard-collections\n                        use standard collections for type hinting (list, dict)\n  --use-subclass-enum   define enum class as subclass with field type when\n                        enum has type (int, float, bytes, str)\n  --use-union-operator  use | operator for union type (pep 604).\n  --use-unique-items-as-set\n                        define field type as `set` when the field attribute\n                        has `uniqueitems`\n\nfield customization:\n  --capitalise-enum-members, --capitalize-enum-members\n                        capitalize field names on enum\n  --empty-enum-field-name empty_enum_field_name\n                        set field name when enum value is empty (default: `_`)\n  --field-extra-keys field_extra_keys [field_extra_keys ...]\n                        add extra keys to field parameters\n  --field-extra-keys-without-x-prefix field_extra_keys_without_x_prefix [field_extra_keys_without_x_prefix ...]\n                        add extra keys with `x-` prefix to field parameters.\n                        the extra keys are stripped of the `x-` prefix.\n  --field-include-all-keys\n                        add all keys to field parameters\n  --force-optional      force optional for required fields\n  --original-field-name-delimiter original_field_name_delimiter\n                        set delimiter to convert to snake case. this option\n                        only can be used with --snake-case-field (default: `_`\n                        )\n  --remove-special-field-name-prefix\n                        remove field name prefix if it has a special meaning\n                        e.g. underscores\n  --snake-case-field    change camel-case field name to snake-case\n  --special-field-name-prefix special_field_name_prefix\n                        set field name prefix when first character can't be\n                        used as python field name (default: `field`)\n  --strip-default-none  strip default none on fields\n  --use-default         use default value even if a field is required\n  --use-default-kwarg   use `default=` instead of a positional argument for\n                        fields that have default values.\n  --use-field-description\n                        use schema description to populate field docstring\n\nmodel customization:\n  --allow-extra-fields  allow to pass extra fields, if this flag is not\n                        passed, extra fields are forbidden.\n  --allow-population-by-field-name\n                        allow population by field name\n  --class-name class_name\n                        set class name of root model\n  --collapse-root-models\n                        models generated with a root-type field will be\n                        mergedinto the models using that root-type model\n  --disable-appending-item-suffix\n                        disable appending `item` suffix to model name in an\n                        array\n  --disable-timestamp   disable timestamp on file headers\n  --enable-faux-immutability\n                        enable faux immutability\n  --enable-version-header\n                        enable package version on file headers\n  --keep-model-order    keep generated models' order\n  --reuse-model         re-use models on the field when a module has the model\n                        with the same content\n  --target-python-version {3.6,3.7,3.8,3.9,3.10,3.11}\n                        target python version (default: 3.7)\n  --use-schema-description\n                        use schema description to populate class docstring\n  --use-title-as-name   use titles as class names of models\n\ntemplate customization:\n  --aliases aliases     alias mapping file\n  --custom-file-header custom_file_header\n                        custom file header\n  --custom-file-header-path custom_file_header_path\n                        custom file header file path\n  --custom-template-dir custom_template_dir\n                        custom template directory\n  --encoding encoding   the encoding of input and output (default: utf-8)\n  --extra-template-data extra_template_data\n                        extra template data\n  --use-double-quotes   model generated with double quotes. single quotes or\n                        your black config skip_string_normalization value will\n                        be used without this option.\n  --wrap-string-literal\n                        wrap string literal by using black `experimental-\n                        string-processing` option (require black 20.8b0 or\n                        later)\n  --additional-imports  custom imports for output (delimited list input).\n                        for example \"datetime.date,datetime.datetime\"\n  --custom-formatters   list of modules with custom formatter (delimited list input).\n  --custom-formatters-kwargs a file with kwargs for custom formatters.\n\nopenapi-only options:\n  --openapi-scopes {schemas,paths,tags,parameters} [{schemas,paths,tags,parameters} ...]\n                        scopes of openapi model generation (default: schemas)\n  --strict-nullable     treat default field as a non-nullable field (only\n                        openapi)\n  --use-operation-id-as-name\n                        use operation id of openapi as class names of models\n  --validation          deprecated: enable validation (only openapi). this\n                        option is deprecated. it will be removed in future\n                        releases\n\ngeneral options:\n  --debug               show debug message (require \"debug\". `$ pip install 'datamodel-code-generator[debug]'`)\n  --disable-warnings    disable warnings\n  --no-color            disable colorized output\n  --version             show version\n  -h, --help            show this help message and exit\n```\n\n## related projects\n### fastapi-code-generator\nthis code generator creates [fastapi](https://github.com/tiangolo/fastapi) app from an openapi file.\n\n[https://github.com/koxudaxi/fastapi-code-generator](https://github.com/koxudaxi/fastapi-code-generator)\n\n### pydantic-pycharm-plugin\n[a jetbrains pycharm plugin](https://plugins.jetbrains.com/plugin/12861-pydantic) for [`pydantic`](https://github.com/samuelcolvin/pydantic).\n\n[https://github.com/koxudaxi/pydantic-pycharm-plugin](https://github.com/koxudaxi/pydantic-pycharm-plugin)\n\n## pypi\n\n[https://pypi.org/project/datamodel-code-generator](https://pypi.org/project/datamodel-code-generator)\n\n## contributing\n\nsee `docs/development-contributing.md` for how to get started!\n\n## license\n\ndatamodel-code-generator is released under the mit license. http://www.opensource.org/licenses/mit-license\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "datamodel-code-generator",
  "package_url": "https://pypi.org/project/datamodel-code-generator/",
  "project_url": "https://pypi.org/project/datamodel-code-generator/",
  "project_urls": {
    "Homepage": "https://github.com/koxudaxi/datamodel-code-generator",
    "Repository": "https://github.com/koxudaxi/datamodel-code-generator"
  },
  "release_url": "https://pypi.org/project/datamodel-code-generator/0.25.2/",
  "requires_dist": [
    "PySnooper (>=0.4.1,<2.0.0) ; extra == \"debug\"",
    "argcomplete (>=1.10,<4.0)",
    "black (>=19.10b0)",
    "genson (>=1.2.1,<2.0)",
    "graphql-core (>=3.2.3,<4.0.0) ; extra == \"graphql\"",
    "httpx ; extra == \"http\"",
    "inflect (>=4.1.0,<6.0)",
    "isort (>=4.3.21,<6.0)",
    "jinja2 (>=2.10.1,<4.0)",
    "openapi-spec-validator (>=0.2.8,<0.7.0) ; extra == \"validation\"",
    "packaging",
    "prance (>=0.18.2) ; extra == \"validation\"",
    "pydantic[email] (>=1.10.0,!=2.0.0,!=2.0.1,<3.0,!=2.4.0) ; python_version >= \"3.12\" and python_version < \"4.0\"",
    "pydantic[email] (>=1.10.0,<3.0,!=2.4.0) ; python_version >= \"3.11\" and python_version < \"4.0\"",
    "pydantic[email] (>=1.5.1,<3.0,!=2.4.0) ; python_version < \"3.10\"",
    "pydantic[email] (>=1.9.0,<3.0,!=2.4.0) ; python_version >= \"3.10\" and python_version < \"3.11\"",
    "pyyaml (>=6.0.1)",
    "toml (>=0.10.0,<1.0.0) ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "datamodel code generator",
  "version": "0.25.2",
  "releases": [],
  "developers": [
    "koudai_aono",
    "koxudaxi@gmail.com"
  ],
  "kwds": "pydantic_v2 openapi python dataclasses typeddict",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_datamodel_code_generator",
  "homepage": "https://github.com/koxudaxi/datamodel-code-generator",
  "release_count": 182,
  "dependency_ids": [
    "pypi_argcomplete",
    "pypi_black",
    "pypi_genson",
    "pypi_graphql_core",
    "pypi_httpx",
    "pypi_inflect",
    "pypi_isort",
    "pypi_jinja2",
    "pypi_openapi_spec_validator",
    "pypi_packaging",
    "pypi_prance",
    "pypi_pydantic",
    "pypi_pysnooper",
    "pypi_pyyaml",
    "pypi_toml"
  ]
}
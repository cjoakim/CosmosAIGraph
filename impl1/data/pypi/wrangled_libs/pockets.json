{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "pockets full of useful python tools!\n====================================\n\n*let me check my pockets...*\n----------------------------\n\nthe pockets library pulls together many of the python helper functions i've\nfound useful over the years.\n\nif you've worked on a project that exports an api and accesses a data store,\nyou've probably seen some code that looks like this::\n\n    # receive a data type with underscores from some api\n    data_type = 'user_preference'\n\n    # convert underscored data type to camelcase to match the data model\n    model_name = camel(data_type)\n\n    # resolve the model name into a model class\n    model_class = resolve(model_name, modules=[\"webapp.model.admin\",\n                                               \"webapp.model.user\",\n                                               \"webapp.model.businesslogic\"]\n\n    # instantiate the model class and do stuff with the instance...\n    instance = model_class()\n\n\nthere's an impedance mismatch any time you work with two different frameworks;\nespecially when you want to update your back-end while maintaining legacy\ncompatibility with an external api.\n\npockets is full of highly tested, well maintained functions that help bridge\nthe gap. here are just a few examples...\n\n.. rubric :: easily get the right logger no matter where you are\n\n::\n\n    >>> from pockets.autolog import log\n    >>> log.error(\"always log from the correct module.class!\")\n    mymodule.myclass: always log from the correct module.class!\n\n.. rubric :: convert underscore_separated string to camelcase\n\n::\n\n    >>> from pockets import camel\n    >>> camel(\"xml_http_request\", upper_segments=[1])\n    'xmlhttprequest'\n\n.. rubric :: convert camelcase string to underscore_separated\n\n::\n\n    >>> from pockets import uncamel\n    >>> uncamel(\"xmlhttprequest\")\n    'xml_http_request'\n\n.. rubric :: resolve a string into an object\n\n::\n\n    >>> from pockets import resolve\n    >>> resolve(\"calendar.textcalendar\")\n    <class 'calendar.textcalendar'>\n\n.. rubric :: peek ahead iterator\n\n::\n\n    >>> from pockets import iterpeek\n    >>> p = iterpeek([\"a\", \"b\", \"c\", \"d\", \"e\"])\n    >>> p.peek()\n    'a'\n    >>> p.next()\n    'a'\n    >>> p.peek(3)\n    ['b', 'c', 'd']\n\n\ndownloads and docs\n------------------\n\nfull documentation is available on `read the docs\n<http://pockets.readthedocs.org>`_.\n\nbuilt packages are available on `pypi <https://pypi.python.org/pypi/pockets>`_.\n\n`source code <https://github.com/robruana/pockets>`_ is available on `github\n<https://github.com/robruana/pockets>`_. feel free to:\n\n- `create an issue <https://github.com/robruana/pockets/issues>`_ to request a\n  feature or a report a bug.\n- `fork the repository <https://github.com/robruana/pockets/fork>`_ and make\n  changes to the **master** branch for next release.\n- send a pull request and pester the maintainer until it's merged. make sure\n  to add yourself to `authors\n  <https://github.com/robruana/pockets/blob/master/authors>`_ and update\n  `changes <https://github.com/robruana/pockets/blob/master/changes>`_.\n\n\nbuild status\n------------\n\n.. image:: https://travis-ci.org/robruana/pockets.svg\n    :target: https://travis-ci.org/robruana/pockets\n    :alt: build status\n\n\n.. image:: https://coveralls.io/repos/robruana/pockets/badge.svg\n    :target: https://coveralls.io/r/robruana/pockets\n    :alt: coverage status\n\n\n.. image:: https://readthedocs.org/projects/pockets/badge/?version=latest\n    :target: https://readthedocs.org/projects/pockets/?badge=latest\n    :alt: documentation status\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pockets",
  "package_url": "https://pypi.org/project/pockets/",
  "project_url": "https://pypi.org/project/pockets/",
  "project_urls": {
    "Download": "http://pypi.python.org/pypi/pockets",
    "Homepage": "http://pockets.readthedocs.org"
  },
  "release_url": "https://pypi.org/project/pockets/0.9.1/",
  "requires_dist": [
    "six (>=1.5.2)"
  ],
  "requires_python": "",
  "summary": "a collection of helpful python tools!",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "rob@robruana.com",
    "rob_ruana"
  ],
  "kwds": "api model_name data_type model_class python",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pockets",
  "homepage": "http://pockets.readthedocs.org",
  "release_count": 29,
  "dependency_ids": [
    "pypi_six"
  ]
}
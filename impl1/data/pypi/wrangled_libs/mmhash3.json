{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: cc0 1.0 universal (cc0 1.0) public domain dedication",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "# mmhash3\n\nfork of the original [mmh3](https://github.com/hajimes/mmh3/) library since it is unmaintained.\n\nmmhash3 is a python wrapper for [murmurhash (murmurhash3)](https://en.wikipedia.org/wiki/murmurhash), a set of fast and robust non-cryptographic hash functions invented by austin appleby.\n\ncombined with probabilistic techniques like a [bloom filter](https://en.wikipedia.org/wiki/bloom_filter), [minhash](https://en.wikipedia.org/wiki/minhash), and [feature hashing](https://en.wikipedia.org/wiki/feature_hashing), mmh3 allows you to develop high-performance systems in fields such as data mining, machine learning, and natural language processing.\n\n## how to use\ninstall:\n```shell\npip install mmhash3 # for macos, use \"pip3 install mmhash3\" and python3\n```\n\nquickstart:\n```shell\n>>> import mmh3\n>>> mmh3.hash(\"foo\") # returns a 32-bit signed int\n-156908512\n>>> mmh3.hash(\"foo\", 42) # uses 42 as a seed\n-1322301282\n>>> mmh3.hash(\"foo\", signed=false) # returns a 32-bit unsigned int\n4138058784\n```\n\nother functions:\n```shell\n>>> mmh3.hash64(\"foo\") # two 64 bit signed ints (by using the 128-bit algorithm as its backend)\n(-2129773440516405919, 9128664383759220103)\n>>> mmh3.hash64(\"foo\", signed=false) #  two 64 bit unsigned ints\n(16316970633193145697, 9128664383759220103)\n>>> mmh3.hash128(\"foo\", 42) # 128 bit unsigned int\n215966891540331383248189432718888555506\n>>> mmh3.hash128(\"foo\", 42, signed=true) # 128 bit signed int\n-124315475380607080215185174712879655950\n>>> mmh3.hash_bytes(\"foo\") # 128 bit value as bytes\n'ae\\xf5\\x01w\\x86q\\xe2\\x87}\\xba+\\xe4\\x87\\xaf~'\n>>> import numpy as np\n>>> a = np.zeros(2 ** 32, dtype=np.int8)\n>>> mmh3.hash_bytes(a)\nb'v\\x8f}\\xad\\x8enm\\xa84\\x07fu\\x9c\\xc4\\xcc\\x8e'\n```\n\nbeware that `hash64` returns **two** values, because it uses the 128-bit version of murmurhash3 as its backend.\n\n`hash_from_buffer` hashes byte-likes without memory copying. the method is suitable when you hash a large memory-view such as `numpy.ndarray`.\n\n```shell\n>>> mmh3.hash_from_buffer(numpy.random.rand(100))\n-2137204694\n>>> mmh3.hash_from_buffer(numpy.random.rand(100), signed=false)\n3812874078\n```\n\n`hash64`, `hash128`, and `hash_bytes` have the third argument for architecture optimization. use true for x64 and false for x86 (default: true):\n\n```shell\n>>> mmh3.hash64(\"foo\", 42, true)\n(-840311307571801102, -6739155424061121879)\n```\n\n## changelog\n\n\n### 3.0.0 (2021-02-23)\n*\n* python wheels are now available, thanks to the power of [cibuildwheel](https://github.com/joerick/cibuildwheel).\n  * supported platforms are `manylinux1_x86_64`, `manylinux2010_x86_64`, `manylinux2014_aarch64`, `win32`, `win_amd64`, `macosx_10_9_x86_64`, and `macosx_11_0_arm64` (apple silicon).\n* add support for newer macos environments. thanks [matthew honnibal](https://github.com/honnibal)!\n* drop support for python 2.7, 3.3, 3.4, and 3.5.\n* add support for python 3.7, 3.8, 3.9, 3.10 and 3.11\n* migrate travis ci and appveyor to github actions.\n\n### 2.5.1 (2017-10-31)\n* bug fix for `hash_bytes`. thanks [doozr](https://github.com/doozr)!\n\n### 2.5 (2017-10-28)\n* add `hash_from_buffer`. thanks [dimitri vorona](https://github.com/alendit)!\n* add a keyword argument `signed`.\n\n### 2.4 (2017-05-27)\n* support seeds with 32-bit unsigned integers; thanks [alexander maznev](https://github.com/pik)!\n* support 64-bit data (under 64-bit environments)\n* fix compile errors for python 3.6 under windows systems.\n* add unit testing and continuous integration with travis ci and appveyor.\n\n### 2.3.2 (2017-05-26)\n* relicensed from public domain to [cc0-1.0](./license).\n\n### 2.3.1 (2015-06-07)\n* fix compile errors for gcc >=5.\n\n### 2.3 (2013-12-08)\n* add `hash128`, which returns a 128-bit signed integer.\n* fix a misplaced operator which could cause memory leak in a rare condition.\n* fix a malformed value to a python/c api function which may cause runtime errors in recent python 3.x versions.\n\nthe first two commits are from [derek wilson](https://github.com/underrun). thanks!\n\n### 2.2 (2013-03-03)\n* improve portability to support systems with old gcc (version < 4.4) such as centos/rhel 5.x. (commit from [micha gorelick](https://github.com/mynameisfiber). thanks!)\n\n### 2.1 (2013-02-25)\n* add `__version__` constant. check if it exists when the following revision matters for your application.\n* incorporate the revision r147, which includes robustness improvement and minor tweaks.\n\nbeware that due to this revision, **the result of 32-bit version of 2.1 is not the same as that of 2.0**. e.g.,:\n\n```shell\n>>> mmh3.hash(\"foo\") # in mmh3 2.0\n-292180858\n>>> mmh3.hash(\"foo\") # in mmh3 2.1\n-156908512\n```\n\nthe results of hash64 and hash_bytes remain unchanged. austin appleby, the author of murmurhash, ensured this revision was the final modification to murmurhash3's results and any future changes would be to improve performance only.\n\n## license\n[cc0-1.0](./license).\n\n## known issues\n### getting different results from other murmurhash3-based libraries\nby default, mmh3 returns **signed** values for 32-bit and 64-bit versions and **unsigned** values for `hash128`, due to historical reasons. please use the keyword argument `signed` to obtain a desired result.\n\nfor compatibility with google guava (java), see <https://stackoverflow.com/questions/29932956/murmur3-hash-different-result-between-python-and-java-implementation>\n\n### unexpected results when given non 32-bit seeds\nversion 2.4 changed the type of seeds from signed 32-bit int to unsigned 32-bit int. the resulting values with signed seeds still remain the same as before, as long as they are 32-bit.\n\n```shell\n>>> mmh3.hash(\"aaaa\", -1756908916) # signed representation for 0x9747b28c\n1519878282\n>>> mmh3.hash(\"aaaa\", 2538058380) # unsigned representation for 0x9747b28c\n1519878282\n```\n\nbe careful so that these seeds do not exceed 32-bit. unexpected results may happen with invalid values.\n\n```shell\n>>> mmh3.hash(\"foo\", 2 ** 33)\n-156908512\n>>> mmh3.hash(\"foo\", 2 ** 34)\n-156908512\n```\n\n## authors\nmurmurhash3 was originally developed by austin appleby and distributed under public domain.\n\n* <https://github.com/aappleby/smhasher>\n\nported and modified for python by hajime senuma.\n\n* <http://pypi.python.org/pypi/mmh3>\n* <http://github.com/hajimes/mmh3>\n\n## see also\n### tutorials\nthe following textbooks and tutorials are great sources to learn how to use mmh3 (and other hash algorithms in general) for high-performance computing.\n\n* chapter 11: using less ram in micha gorelick and ian ozsvald. 2014. *high performance python: practical performant programming for humans*. o'reilly media. [isbn: 978-1-4493-6159-4](https://www.amazon.com/dp/1449361595).\n* duke university. [efficient storage of data in memory](http://people.duke.edu/~ccc14/sta-663-2016/20b_big_data_structures.html).\n* max burstein. [creating a simple bloom filter](http://www.maxburstein.com/blog/creating-a-simple-bloom-filter/).\n* bugra akyildiz. [a gentle introduction to bloom filter](https://www.kdnuggets.com/2016/08/gentle-introduction-bloom-filter.html).\n\n### similar libraries\n* <https://github.com/wc-duck/pymmh3>: mmh3 in pure python (fredrik kihlander and swapnil gusani)\n* <https://github.com/escherba/python-cityhash>: python bindings for cityhash (eugene scherba)\n* <https://github.com/veelion/python-farmhash>: python bindigs for farmhash (veelion chong)\n* <https://github.com/escherba/python-metrohash>: python bindings for metrohash (eugene scherba)\n",
  "docs_url": null,
  "keywords": "utility hash murmurhash",
  "license": "license :: cc0 1.0 universal (cc0 1.0) public domain dedication",
  "name": "mmhash3",
  "package_url": "https://pypi.org/project/mmhash3/",
  "project_url": "https://pypi.org/project/mmhash3/",
  "project_urls": {
    "Homepage": "https://github.com/Fokko/mmhash"
  },
  "release_url": "https://pypi.org/project/mmhash3/3.0.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python wrapper for murmurhash (murmurhash3), a set of fast and robust hash functions.",
  "version": "3.0.1",
  "releases": [],
  "developers": [
    "hajime.senuma@gmail.com",
    "hajime_senuma"
  ],
  "kwds": "murmurhash3 murmurhash hashing mmhash3 hash",
  "license_kwds": "license :: cc0 1.0 universal (cc0 1.0) public domain dedication",
  "libtype": "pypi",
  "id": "pypi_mmhash3",
  "homepage": "https://github.com/fokko/mmhash",
  "release_count": 2,
  "dependency_ids": []
}
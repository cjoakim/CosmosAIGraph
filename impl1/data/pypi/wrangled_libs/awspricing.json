{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "==========\nawspricing\n==========\n\na python library for working with the `aws price list query api <https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/pricing.html>`_.\n\nas of version 2.0.0, `awspricing` uses boto3 price list query api.\nthis requires price list query api iam roles: https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-permissions-ref.html#example-policy-pe-api\n\nversions before 2.0.0 utilized aws price offer files.\n\nfeatures:\n\n* service-specific helpers (only ec2 and rds thus far)\n* local caching support\n\ninstallation\n------------\n\n.. code-block:: sh\n\n    $ pip install awspricing\n\nusage\n-----\n\n.. code-block:: python\n\n    import awspricing\n\n    ec2_offer = awspricing.offer('amazonec2')\n\n    ec2_offer.search_skus(\n      instance_type='c4.large',\n      location='us east (n. virginia)',\n      operating_system='linux',\n    )  # {'4c7n4apu9geuz6h6', 'mbqpydjsy3by84bh', 'mdkvajxmjgzfdjue'}\n\n    ec2_offer.reserved_hourly(\n      'c4.xlarge',\n      operating_system='linux',\n      lease_contract_length='3yr',\n      offering_class='convertible',\n      purchase_option='partial upfront',\n      region='us-east-1'\n    )  # 0.10845205479452055\n\n    rds_offer = awspricing.offer('amazonrds')\n\n    rds_offer.search_skus(\n      instance_type='db.m4.large',\n      location='us east (n. virginia)',\n      database_engine='mysql',\n      license_model='no license required',\n      deployment_option='multi-az'\n    ) # {'qpznr6myn432xtpu'}\n\n    rds_offer.ondemand_hourly(\n      'db.m4.large',\n      'mysql',\n      license_model='no license required',\n      deployment_option='multi-az',\n      region='us-east-1'\n    ) # 0.35\n..\n\n**note** : aws provides the pricing list in json format with no warranty of format change.  if a format change by aws causes a breaking change; the below mitigation can be used at the cost of \"stale\" pricing.\n\n.. code-block:: python\n\n    import awspricing\n\n    # for finding ec2 price list versions see script below or download https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/amazonec2/index.json\n    ec2_offer_old = awspricing.offer('amazonec2', version='some_other_version')\n\n    # for finding rds price list versions see script below or download https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/amazonrds/index.json\n    rds_offer_old = awspricing.offer('amazonrds', version='some_other_version')\n\n\n.. code-block:: sh\n\n    $ # ec2\n    $ curl https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/amazonec2/index.json | python -m json.tool\n\n    $ # rds\n    $ curl https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/amazonrds/index.json | python -m json.tool\n\n\nconfiguration\n-------------\n\ncache\n~~~~~\n\ncache can be configured via the following environment variables:\n\n``awspricing_use_cache``: whether to use a simple file-based cache. valid values are ``0|1``. defaults to ``0`` (false).\n\n``awspricing_cache_path``: prefix to write cache files. defaults to ``/tmp/awspricing``.\n\n``awspricing_cache_minutes``: number of minutes to keep cache for. defaults to ``1440`` (1 day).\n\n\ndeveloping\n----------\n\nenvironment setup\n~~~~~~~~~~~~~~~~~\n\nrun the following commands (preferably in a virtualenv) to setup your environment:\n\n.. code-block:: sh\n    python setup.py develop\n    pip install -r test-requirements.txt\n\nrunning unit tests\n~~~~~~~~~~~~~~~~~~\n\nsimply run `make test` after environment setup to run unit tests.\n\nrunning mypy (type checker)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe following commands can be used to run type checks. note that a ``python3``\ninterpreter is required for mypy.\n\n.. code-block:: sh\n\n    pip install mypy\n    make test_mypy",
  "docs_url": null,
  "keywords": "",
  "license": "apache2",
  "name": "awspricing",
  "package_url": "https://pypi.org/project/awspricing/",
  "project_url": "https://pypi.org/project/awspricing/",
  "project_urls": {
    "Homepage": "https://github.com/lyft/awspricing"
  },
  "release_url": "https://pypi.org/project/awspricing/2.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "an sdk for aws pricing",
  "version": "2.0.3",
  "releases": [],
  "developers": [
    "capacity@lyft.com",
    "garrett_heel"
  ],
  "kwds": "awsaccountbilling awspricing_use_cache awspricing_cache_path ec2_offer ec2_offer_old",
  "license_kwds": "apache2",
  "libtype": "pypi",
  "id": "pypi_awspricing",
  "homepage": "https://github.com/lyft/awspricing",
  "release_count": 10,
  "dependency_ids": []
}
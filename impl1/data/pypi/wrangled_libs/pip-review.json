{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: system :: systems administration"
  ],
  "description": ".. image:: https://travis-ci.org/jgonggrijp/pip-review.svg?branch=master\n    :alt: build status\n    :target: https://secure.travis-ci.org/jgonggrijp/pip-review\n\npip-review\n==========\n\n*looking for a new maintainer! see https://github.com/jgonggrijp/pip-review/issues/76.*\n\n``pip-review`` is a convenience wrapper around ``pip``. it can list available updates by deferring to ``pip list --outdated``. it can also automatically or interactively install available updates for you by deferring to ``pip install``.\n\nexample, report-only:\n\n.. code:: console\n\n    $ pip-review\n    requests==0.13.4 is available (you have 0.13.2)\n    redis==2.4.13 is available (you have 2.4.9)\n    rq==0.3.2 is available (you have 0.3.0)\n\nexample, actually install everything:\n\n.. code:: console\n\n    $ pip-review --auto\n    ... <pip install output>\n\nexample, run interactively, ask to upgrade for each package:\n\n.. code:: console\n\n    $ pip-review --interactive\n    requests==0.14.0 is available (you have 0.13.2)\n    upgrade now? [y]es, [n]o, [a]ll, [q]uit y\n    ...\n    redis==2.6.2 is available (you have 2.4.9)\n    upgrade now? [y]es, [n]o, [a]ll, [q]uit n\n    rq==0.3.2 is available (you have 0.3.0)\n    upgrade now? [y]es, [n]o, [a]ll, [q]uit y\n    ...\n\nrun ``pip-review -h`` for a complete overview of the options.\n\nnote: if you want to pin specific packages to prevent them from automatically\nbeing upgraded, you can use a constraint file (similar to ``requirements.txt``):\n\n.. code:: console\n\n    $ export pip_constraint=\"${home}/constraints.txt\n    $ cat $pip_constraint\n    pyarrow==0.14.1\n    pandas<0.24.0\n\n    $ pip-review --auto\n    ...\n\nset this variable in ``.bashrc`` or ``.zshenv`` to make it persistent.\nalternatively, this option can be specified in ``pip.conf``, e.g.:\n\n* linux:\n\n.. code:: console\n\n    $ cat ~/.config/pip/pip.conf\n    [global]\n    constraint = /home/username/constraints.txt\n    \n* windows:\n\n.. code:: console\n\n    $ cat $home\\appdata\\roaming\\pip\\pip.ini\n    [global]\n    constraint = '$home\\roaming\\pip\\constraints.txt'\n\nthe conf file are dependent of the user, so if you use multiple users you must define config file for each of them.\nhttps://pip.pypa.io/en/stable/user_guide/#constraints-files\n\nsince version 0.5, you can also invoke pip-review as ``python -m pip_review``. this can be useful if you are using multiple versions of python next to each other.\n\nbefore version 1.0, ``pip-review`` had its own logic for finding package updates instead of relying on ``pip list --outdated``.\n\nlike ``pip``, ``pip-review`` updates **all** packages, including ``pip`` and ``pip-review``.\n\n\ninstallation\n============\n\nto install, simply use pip:\n\n.. code:: console\n\n    $ pip install pip-review\n\ndecide for yourself whether you want to install the tool system-wide, or\ninside a virtual env.  both are supported.\n\n\ntesting\n=======\n\nto test with your active python version:\n\n.. code:: console\n\n    $ ./run-tests.sh\n\nto test under all (supported) python versions:\n\n.. code:: console\n\n    $ tox\n\nthe tests run quite slow, since they actually interact with pypi, which\ninvolves downloading packages, etc.  so please be patient.\n\n\norigins\n=======\n\n``pip-review`` was originally part of pip-tools_ but\nhas been discontinued_ as such. see `pin your packages`_ by vincent\ndriessen for the original introduction. since there are still use cases, the\ntool now lives on as a separate package.\n\n\n.. _pip-tools: https://github.com/nvie/pip-tools/\n.. _discontinued: https://github.com/nvie/pip-tools/issues/185\n.. _pin your packages: http://nvie.com/posts/pin-your-packages/\n.. _cram: https://bitheap.org/cram/",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pip-review",
  "package_url": "https://pypi.org/project/pip-review/",
  "project_url": "https://pypi.org/project/pip-review/",
  "project_urls": {
    "Homepage": "https://github.com/jgonggrijp/pip-review"
  },
  "release_url": "https://pypi.org/project/pip-review/1.3.0/",
  "requires_dist": [],
  "requires_python": ">=2.7, !=3.0, !=3.1, !=3.2",
  "summary": "pip-review lets you smoothly manage all available pypi updates.",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "j.gonggrijp@gmail.com",
    "julian_gonggrijp"
  ],
  "kwds": "pip_review pip _pip pip_constraint travis",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pip_review",
  "homepage": "https://github.com/jgonggrijp/pip-review",
  "release_count": 11,
  "dependency_ids": []
}
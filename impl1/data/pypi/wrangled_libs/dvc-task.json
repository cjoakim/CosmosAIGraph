{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "dvc-task\n========\n\n|pypi| |status| |python version| |license|\n\n|tests| |codecov| |pre-commit| |black|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/dvc-task.svg\n   :target: https://pypi.org/project/dvc-task/\n   :alt: pypi\n.. |status| image:: https://img.shields.io/pypi/status/dvc-task.svg\n   :target: https://pypi.org/project/dvc-task/\n   :alt: status\n.. |python version| image:: https://img.shields.io/pypi/pyversions/dvc-task\n   :target: https://pypi.org/project/dvc-task\n   :alt: python version\n.. |license| image:: https://img.shields.io/pypi/l/dvc-task\n   :target: https://opensource.org/licenses/apache-2.0\n   :alt: license\n.. |tests| image:: https://github.com/iterative/dvc-task/workflows/tests/badge.svg\n   :target: https://github.com/iterative/dvc-task/actions?workflow=tests\n   :alt: tests\n.. |codecov| image:: https://codecov.io/gh/iterative/dvc-task/branch/main/graph/badge.svg\n   :target: https://app.codecov.io/gh/iterative/dvc-task\n   :alt: codecov\n.. |pre-commit| image:: https://img.shields.io/badge/pre--commit-enabled-lreen?logo=pre-commit&logocolor=white\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: black\n\n\ndvc-task is a library for queuing, running and managing background jobs\n(processes) from standalone python applications. dvc-task is built on celery_,\nbut does not require a full amqp messaging server (or any other \"heavy\" servers\nwhich are traditionally used as celery brokers).\n\n\nfeatures\n--------\n\n* ``dvc_task.proc`` module for running and managing background processes in\n  celery tasks\n* preconfigured celery app intended for use in standalone desktop\n  applications\n\n  * uses kombu_ filesystem transport as the message broker, and the standard\n    filesystem celery results backend\n  * allows standalone applications to make use of celery without the use of\n    additional messaging and results backend servers\n* preconfigured \"temporary\" celery worker which will automatically terminate\n  itself when the celery queue is empty\n\n  * allows standalone applications to start celery workers as needed directly\n    from python code (as opposed to requiring a \"run-forever\" daemonized\n    cli ``celery`` worker)\n\n\nrequirements\n------------\n\n* celery 5.3 or later\n* kombu 5.3 or later\n\nnote: windows is not officially supported in celery, but dvc-task is tested on\nwindows (and used in dvc on windows).\n\n\ninstallation\n------------\n\nyou can install *dvc-task* via pip_ from pypi_:\n\n.. code:: console\n\n   $ pip install dvc-task\n\n\nusage\n-----\n\nprocesses (``dvc_task.proc``)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthe process module provides a simple api for managing background processes in\nbackground tasks. background processes are run in celery tasks, but process\nstate is stored separately from celery, so information about managed processes\ncan be accessed from outside of the celery producer or consumer application.\n\nafter you have configured a celery application, jobs can be queued (and run) via\n``processmanager.run`` (which returns a signature for the ``proc.tasks.run``\ncelery task):\n\n.. code-block:: python\n\n    from dvc_task.proc import processmanager\n\n    @app.task\n    def my_task():\n        manager = processmanager(wdir=\".\")\n        manager.run([\"echo\", \"hello world\"], name=\"foo\").delay()\n\nthe ``processmanager`` will create a subdirectory in ``wdir`` for each managed process.\n\n.. code-block:: none\n\n    $ tree .\n    .\n    \u2514\u2500\u2500 25myd6mylnewxxdmvyccr3\n        \u251c\u2500\u2500 25myd6mylnewxxdmvyccr3.json\n        \u251c\u2500\u2500 25myd6mylnewxxdmvyccr3.out\n        \u2514\u2500\u2500 25myd6mylnewxxdmvyccr3.pid\n    1 directory, 3 files\n\nat a minimum, the directory will contain ``<id>.pid`` and ``<id>.json`` files.\n\n* ``<id>.json``: a json file describing the process containing the following dictionary keys:\n    * ``pid``: process pid\n    * ``stdout``: redirected stdout file path for the process (redirected to\n      ``<id>.out`` by default)\n    * ``stderr``: redirected stderr file path for the process (stderr is\n      redirected to ``stdout`` by default)\n    * ``stdin``: redirected stdin file path for the process (interactive\n      processes are not yet supported, stdin is currently always ``null``)\n    * ``returncode``: return code for the process (``null`` if the process\n      has not exited)\n* ``<id>.pid``: a standard pidfile containing only the process pid\n\n``processmanager`` instances can be created outside of a celery task to manage\nand monitor processes as needed:\n\n.. code-block:: python\n\n    >>> from dvc_task.proc import processmanager\n    >>> manager = processmanager(wdir=\".\")\n    >>> names = [name for name, _info in manager.processes()]\n    ['25myd6mylnewxxdmvyccr3']\n    >>> for line in manager.follow(names[0]):\n    ...     print(line)\n    ...\n    hello world\n\ncelery workers (``dvc_task.worker``)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndvc-task includes a pre-configured celery worker (``temporaryworker``) which\ncan be started from python code. the ``temporaryworker`` will consume celery\ntasks until the queue is empty. once the queue is empty, the worker will wait\nup until a specified timeout for new tasks to be added to the queue. if the\nqueue remains empty after the timeout expires, the worker will exit.\n\nto instantiante a worker with a 60-second timeout, with the celery worker name\n``my-worker-1``:\n\n.. code-block:: python\n\n    >>> from dvc_task.worker import temporaryworker\n    >>> worker = temporaryworker(my_app, timeout=60)\n    >>> worker.start(\"my-worker-1\")\n\nnote that ``worker.start`` runs the celery worker within the calling thread.\n\ncelery applications (``dvc_task.app``)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndvc-task includes a pre-configured celery application (``fsapp``) which uses\nthe kombu filesystem transport as the celery broker along with the celery\nfilesystem results storage backend. ``fsapp`` is intended to be used in\nstandalone python applications where a traditional celery producer/consumer\nsetup (with the appropriate messaging and storage backends) is unavailable.\n\n.. code-block:: python\n\n    >>> from dvc_task.app import fsapp\n    >>> my_app = fsapp(wdir=\".\")\n\n``fsapp`` provides iterators for accessing kombu messages which are either\nwaiting in the queue or have already been processed. this allows the caller\nto access celery task information without using the celery ``inspect`` api\n(which is only functional when a celery worker is actively running).\n\n.. code-block:: python\n\n    >>> for msg in my_app.iter_processed():\n    ...     msg\n    <message object at 0x102e7f0d0 with details {'state': 'received', 'content_type': 'application/json', 'delivery_tag': '0244c11a-1bcc-47fc-8587-66909a55fdc6', ...}>\n    <message object at 0x1027fd4c0 with details {'state': 'received', 'content_type': 'application/json', 'delivery_tag': '491415d1-9527-493a-a5d7-88ed355da77c', ...}>\n    <message object at 0x102e6f160 with details {'state': 'received', 'content_type': 'application/json', 'delivery_tag': 'ea6ab7a4-0398-42ab-9f12-8da1f8e12a8a', ...}>\n    <message object at 0x102e6f310 with details {'state': 'received', 'content_type': 'application/json', 'delivery_tag': '77c4a335-2102-4bee-9cb8-ef4d8ef9713f', ...}>\n\ncontributing\n------------\n\ncontributions are very welcome.\nto learn more, see the `contributor guide`_.\n\n\nlicense\n-------\n\ndistributed under the terms of the `apache 2.0 license`_,\n*dvc-task* is free and open source software.\n\n\nissues\n------\n\nif you encounter any problems,\nplease `file an issue`_ along with a detailed description.\n\n\n.. _0282e14: https://github.com/celery/kombu/commit/0282e1419fad98da5ae956ff38c7e87e539889ac\n.. _apache 2.0 license: https://opensource.org/licenses/apache-2.0\n.. _celery: https://github.com/celery/celery\n.. _kombu: https://github.com/celery/kombu\n.. _pypi: https://pypi.org/\n.. _file an issue: https://github.com/iterative/dvc-task/issues\n.. _pip: https://pip.pypa.io/\n.. github-only\n.. _contributor guide: contributing.rst\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "dvc-task",
  "package_url": "https://pypi.org/project/dvc-task/",
  "project_url": "https://pypi.org/project/dvc-task/",
  "project_urls": {
    "Homepage": "https://github.com/iterative/dvc-task"
  },
  "release_url": "https://pypi.org/project/dvc-task/0.3.0/",
  "requires_dist": [
    "celery (<6,>=5.3.0)",
    "kombu (<6,>=5.3.0)",
    "funcy (>=1.17)",
    "shortuuid (>=1.0.8)",
    "pywin32 (>=225) ; sys_platform == \"win32\"",
    "pytest (==7.2.0) ; extra == 'dev'",
    "pytest-sugar (==0.9.6) ; extra == 'dev'",
    "pytest-cov (==3.0.0) ; extra == 'dev'",
    "pytest-mock (==3.8.2) ; extra == 'dev'",
    "pylint (==2.15.0) ; extra == 'dev'",
    "mypy (==0.971) ; extra == 'dev'",
    "flaky (==3.7.0) ; extra == 'dev'",
    "pytest-test-utils (>=0.0.6) ; extra == 'dev'",
    "pytest-celery ; extra == 'dev'",
    "celery-types (==0.15.0) ; extra == 'dev'",
    "mkdocs (==1.3.1) ; extra == 'dev'",
    "mkdocs-gen-files (==0.3.5) ; extra == 'dev'",
    "mkdocs-material (==8.4.1) ; extra == 'dev'",
    "mkdocs-section-index (==0.3.4) ; extra == 'dev'",
    "mkdocstrings-python (==0.7.1) ; extra == 'dev'",
    "mkdocs (==1.3.1) ; extra == 'docs'",
    "mkdocs-gen-files (==0.3.5) ; extra == 'docs'",
    "mkdocs-material (==8.4.1) ; extra == 'docs'",
    "mkdocs-section-index (==0.3.4) ; extra == 'docs'",
    "mkdocstrings-python (==0.7.1) ; extra == 'docs'",
    "pytest (==7.2.0) ; extra == 'tests'",
    "pytest-sugar (==0.9.6) ; extra == 'tests'",
    "pytest-cov (==3.0.0) ; extra == 'tests'",
    "pytest-mock (==3.8.2) ; extra == 'tests'",
    "pylint (==2.15.0) ; extra == 'tests'",
    "mypy (==0.971) ; extra == 'tests'",
    "flaky (==3.7.0) ; extra == 'tests'",
    "pytest-test-utils (>=0.0.6) ; extra == 'tests'",
    "pytest-celery ; extra == 'tests'",
    "celery-types (==0.15.0) ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "extensible task queue used in dvc.",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "support@dvc.org"
  ],
  "kwds": "dvc_task pyversions dvc codecov pypi_",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_dvc_task",
  "homepage": "https://github.com/iterative/dvc-task",
  "release_count": 18,
  "dependency_ids": [
    "pypi_celery",
    "pypi_celery_types",
    "pypi_flaky",
    "pypi_funcy",
    "pypi_kombu",
    "pypi_mkdocs",
    "pypi_mkdocs_gen_files",
    "pypi_mkdocs_material",
    "pypi_mkdocs_section_index",
    "pypi_mkdocstrings_python",
    "pypi_mypy",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_celery",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_sugar",
    "pypi_pytest_test_utils",
    "pypi_pywin32",
    "pypi_shortuuid"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "optimized pytree utilities.\n<!-- markdownlint-disable html -->\n\n# optree\n\n![python 3.7+](https://img.shields.io/badge/python-3.7%2b-brightgreen)\n[![pypi](https://img.shields.io/pypi/v/optree?logo=pypi)](https://pypi.org/project/optree)\n![github workflow status](https://img.shields.io/github/actions/workflow/status/metaopt/optree/build.yml?label=build&logo=github)\n![github workflow status](https://img.shields.io/github/actions/workflow/status/metaopt/optree/tests.yml?label=tests&logo=github)\n[![codecov](https://img.shields.io/codecov/c/github/metaopt/optree/main?logo=codecov)](https://codecov.io/gh/metaopt/optree)\n[![documentation status](https://img.shields.io/readthedocs/optree?logo=readthedocs)](https://optree.readthedocs.io)\n[![downloads](https://static.pepy.tech/personalized-badge/optree?period=total&left_color=grey&right_color=blue&left_text=downloads)](https://pepy.tech/project/optree)\n[![github repo stars](https://img.shields.io/github/stars/metaopt/optree?color=brightgreen&logo=github)](https://github.com/metaopt/optree/stargazers)\n\noptimized pytree utilities.\n\n--------------------------------------------------------------------------------\n\n### table of contents  <!-- omit in toc --> <!-- markdownlint-disable heading-increment -->\n\n- [installation](#installation)\n- [pytrees](#pytrees)\n  - [tree nodes and leaves](#tree-nodes-and-leaves)\n    - [built-in pytree node types](#built-in-pytree-node-types)\n    - [registering a container-like custom type as non-leaf nodes](#registering-a-container-like-custom-type-as-non-leaf-nodes)\n    - [notes about the pytree type registry](#notes-about-the-pytree-type-registry)\n  - [`none` is non-leaf node vs. `none` is leaf](#none-is-non-leaf-node-vs-none-is-leaf)\n  - [key ordering for dictionaries](#key-ordering-for-dictionaries)\n- [benchmark](#benchmark)\n  - [tree flatten](#tree-flatten)\n  - [tree unflatten](#tree-unflatten)\n  - [tree flatten with path](#tree-flatten-with-path)\n  - [tree copy](#tree-copy)\n  - [tree map](#tree-map)\n  - [tree map (nargs)](#tree-map-nargs)\n  - [tree map with path](#tree-map-with-path)\n  - [tree map with path (nargs)](#tree-map-with-path-nargs)\n- [changelog](#changelog)\n- [license](#license)\n\n--------------------------------------------------------------------------------\n\n## installation\n\ninstall from pypi ([![pypi](https://img.shields.io/pypi/v/optree?logo=pypi)](https://pypi.org/project/optree) / ![status](https://img.shields.io/pypi/status/optree)):\n\n```bash\npip3 install --upgrade optree\n```\n\ninstall from conda-forge ([![conda-forge](https://img.shields.io/conda/v/conda-forge/optree?logo=condaforge)](https://anaconda.org/conda-forge/optree)):\n\n```bash\nconda install -c conda-forge optree\n```\n\ninstall the latest version from github:\n\n```bash\npip3 install git+https://github.com/metaopt/optree.git#egg=optree\n```\n\nor, clone this repo and install manually:\n\n```bash\ngit clone --depth=1 https://github.com/metaopt/optree.git\ncd optree\npip3 install .\n```\n\ncompiling from the source requires python 3.7+, a compiler (`gcc` / `clang` / `icc` / `cl.exe`) that supports c++20 and a `cmake` installation.\n\n--------------------------------------------------------------------------------\n\n## pytrees\n\na pytree is a recursive structure that can be an arbitrarily nested python container (e.g., `tuple`, `list`, `dict`, `ordereddict`, `namedtuple`, etc.) or an opaque python object.\nthe key concepts of tree operations are tree flattening and its inverse (tree unflattening).\nadditional tree operations can be performed based on these two basic functions (e.g., `tree_map = tree_unflatten \u2218 map \u2218 tree_flatten`).\n\ntree flattening is traversing the entire tree in a left-to-right depth-first manner and returning the leaves of the tree in a deterministic order.\n\n```python\n>>> tree = {'b': (2, [3, 4]), 'a': 1, 'c': 5, 'd': 6}\n>>> optree.tree_flatten(tree)\n([1, 2, 3, 4, 5, 6], pytreespec({'a': *, 'b': (*, [*, *]), 'c': *, 'd': *}))\n>>> optree.tree_flatten(1)\n([1], pytreespec(*))\n>>> optree.tree_flatten(none)\n([], pytreespec(none))\n```\n\nthis usually implies that the equal pytrees return equal lists of leaves and the same tree structure.\nsee also section [key ordering for dictionaries](#key-ordering-for-dictionaries).\n\n```python\n>>> {'a': [1, 2], 'b': [3]} == {'b': [3], 'a': [1, 2]}\ntrue\n>>> optree.tree_leaves({'a': [1, 2], 'b': [3]}) == optree.tree_leaves({'b': [3], 'a': [1, 2]})\ntrue\n>>> optree.tree_structure({'a': [1, 2], 'b': [3]}) == optree.tree_structure({'b': [3], 'a': [1, 2]})\ntrue\n```\n\n### tree nodes and leaves\n\na tree is a collection of non-leaf nodes and leaf nodes, where the leaf nodes have no children to flatten.\n`optree.tree_flatten(...)` will flatten the tree and return a list of leaf nodes while the non-leaf nodes will store in the tree specification.\n\n#### built-in pytree node types\n\noptree out-of-box supports the following python container types in the registry:\n\n- [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple)\n- [`list`](https://docs.python.org/3/library/stdtypes.html#list)\n- [`dict`](https://docs.python.org/3/library/stdtypes.html#dict)\n- [`collections.namedtuple`](https://docs.python.org/3/library/collections.html#collections.namedtuple) and its subclasses\n- [`collections.ordereddict`](https://docs.python.org/3/library/collections.html#collections.ordereddict)\n- [`collections.defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict)\n- [`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque)\n- [`pystructsequence`](https://docs.python.org/3/c-api/tuple.html#struct-sequence-objects) types created by c api [`pystructsequence_newtype`](https://docs.python.org/3/c-api/tuple.html#c.pystructsequence_newtype)\n\nwhich are considered non-leaf nodes in the tree.\npython objects that the type is not registered will be treated as leaf nodes.\nthe registration lookup uses the `is` operator to determine whether the type is matched.\nso subclasses will need to explicitly register in the registry, otherwise, an object of that type will be considered a leaf.\nthe [`nonetype`](https://docs.python.org/3/library/constants.html#none) is a special case discussed in section [`none` is non-leaf node vs. `none` is leaf](#none-is-non-leaf-node-vs-none-is-leaf).\n\n#### registering a container-like custom type as non-leaf nodes\n\na container-like python type can be registered in the type registry with a pair of functions that specify:\n\n- `flatten_func(container) -> (children, metadata, entries)`: convert an instance of the container type to a `(children, metadata, entries)` triple, where `children` is an iterable of subtrees and `entries` is an iterable of path entries of the container (e.g., indices or keys).\n- `unflatten_func(metadata, children) -> container`: convert such a pair back to an instance of the container type.\n\nthe `metadata` is some necessary data apart from the children to reconstruct the container, e.g., the keys of the dictionary (the children are values).\n\nthe `entries` can be omitted (only returns a pair) or is optional to implement (returns `none`). if so, use `range(len(children))` (i.e., flat indices) as path entries of the current node. the function signature can be `flatten_func(container) -> (children, metadata)` or `flatten_func(container) -> (children, metadata, none)`.\n\nthe following examples show how to register custom types and utilize them for `tree_flatten` and `tree_map`. please refer to section [notes about the pytree type registry](#notes-about-the-pytree-type-registry) for more information.\n\n```python\n# registry a python type with lambda functions\noptree.register_pytree_node(\n    set,\n    # (set) -> (children, metadata, none)\n    lambda s: (sorted(s), none, none),\n    # (metadata, children) -> (set)\n    lambda _, children: set(children),\n    namespace='set',\n)\n\n# register a python type into a namespace\nimport torch\n\noptree.register_pytree_node(\n    torch.tensor,\n    # (tensor) -> (children, metadata)\n    flatten_func=lambda tensor: (\n        (tensor.cpu().detach().numpy(),),\n        {'dtype': tensor.dtype, 'device': tensor.device, 'requires_grad': tensor.requires_grad},\n    ),\n    # (metadata, children) -> tensor\n    unflatten_func=lambda metadata, children: torch.tensor(children[0], **metadata),\n    namespace='torch2numpy',\n)\n```\n\n```python\n>>> tree = {'weight': torch.ones(size=(1, 2)).cuda(), 'bias': torch.zeros(size=(2,))}\n>>> tree\n{'weight': tensor([[1., 1.]], device='cuda:0'), 'bias': tensor([0., 0.])}\n\n# flatten without specifying the namespace\n>>> optree.tree_flatten(tree)  # `torch.tensor`s are leaf nodes\n([tensor([0., 0.]), tensor([[1., 1.]], device='cuda:0')], pytreespec({'bias': *, 'weight': *}))\n\n# flatten with the namespace\n>>> leaves, treespec = optree.tree_flatten(tree, namespace='torch2numpy')\n>>> leaves, treespec\n(\n    [array([0., 0.], dtype=float32), array([[1., 1.]], dtype=float32)],\n    pytreespec(\n        {\n            'bias': customtreenode(tensor[{'dtype': torch.float32, 'device': device(type='cpu'), 'requires_grad': false}], [*]),\n            'weight': customtreenode(tensor[{'dtype': torch.float32, 'device': device(type='cuda', index=0), 'requires_grad': false}], [*])\n        },\n        namespace='torch2numpy'\n    )\n)\n\n# `entries` are not defined and use `range(len(children))`\n>>> optree.tree_paths(tree, namespace='torch2numpy')\n[('bias', 0), ('weight', 0)]\n\n# unflatten back to a copy of the original object\n>>> optree.tree_unflatten(treespec, leaves)\n{'bias': tensor([0., 0.]), 'weight': tensor([[1., 1.]], device='cuda:0')}\n```\n\nusers can also extend the pytree registry by decorating the custom class and defining an instance method `tree_flatten` and a class method `tree_unflatten`.\n\n```python\nfrom collections import userdict\n\n@optree.register_pytree_node_class(namespace='mydict')\nclass mydict(userdict):\n    def tree_flatten(self):  # -> (children, metadata, entries)\n        reversed_keys = sorted(self.keys(), reverse=true)\n        return (\n            [self[key] for key in reversed_keys],  # children\n            reversed_keys,  # metadata\n            reversed_keys,  # entries\n        )\n\n    @classmethod\n    def tree_unflatten(cls, metadata, children):\n        return cls(zip(metadata, children))\n```\n\n```python\n>>> tree = mydict(b=4, a=(2, 3), c=mydict({'d': 5, 'f': 6}))\n\n# flatten without specifying the namespace\n>>> optree.tree_flatten_with_path(tree)  # `mydict`s are leaf nodes\n(\n    [()],\n    [mydict(b=4, a=(2, 3), c=mydict({'d': 5, 'f': 6}))],\n    pytreespec(*)\n)\n\n# flatten with the namespace\n>>> optree.tree_flatten_with_path(tree, namespace='mydict')\n(\n    [('c', 'f'), ('c', 'd'), ('b',), ('a', 0), ('a', 1)],\n    [6, 5, 4, 2, 3],\n    pytreespec(\n        customtreenode(mydict[['c', 'b', 'a']], [customtreenode(mydict[['f', 'd']], [*, *]), *, (*, *)]),\n        namespace='mydict'\n    )\n)\n```\n\n#### notes about the pytree type registry\n\nthere are several key attributes of the pytree type registry:\n\n1. **the type registry is per-interpreter-dependent.** this means registering a custom type in the registry affects all modules that use optree.\n\n    ```diff\n    - !!! warning !!!\n      for safety reasons, a `namespace` must be specified while registering a custom type. it is\n      used to isolate the behavior of flattening and unflattening a pytree node type. this is to\n      prevent accidental collisions between different libraries that may register the same type.\n    ```\n\n2. **the elements in the type registry are immutable.** users can neither register the same type twice in the same namespace (i.e., update the type registry), nor remove a type from the type registry. to update the behavior of an already registered type, simply register it again with another `namespace`.\n\n3. **users cannot modify the behavior of already registered built-in types** listed in [built-in pytree node types](#built-in-pytree-node-types), such as key order sorting for `dict` and `collections.defaultdict`.\n\n4. **inherited subclasses are not implicitly registered.** the registration lookup uses `type(obj) is registered_type` rather than `isinstance(obj, registered_type)`. users need to register the subclasses explicitly. to register all subclasses, it is easy to implement with [`metaclass`](https://docs.python.org/3/reference/datamodel.html#metaclasses) or [`__init_subclass__`](https://docs.python.org/3/reference/datamodel.html#customizing-class-creation), for example:\n\n    ```python\n    from collections import userdict\n\n    @optree.register_pytree_node_class(namespace='mydict')\n    class mydict(userdict):\n        def __init_subclass__(cls):  # define this in the base class\n            super().__init_subclass__()\n            # register a subclass to namespace 'mydict'\n            optree.register_pytree_node_class(cls, namespace='mydict')\n\n        def tree_flatten(self):  # -> (children, metadata, entries)\n            reversed_keys = sorted(self.keys(), reverse=true)\n            return (\n                [self[key] for key in reversed_keys],  # children\n                reversed_keys,  # metadata\n                reversed_keys,  # entries\n            )\n\n        @classmethod\n        def tree_unflatten(cls, metadata, children):\n            return cls(zip(metadata, children))\n\n    # subclasses will be automatically registered in namespace 'mydict'\n    class myanotherdict(mydict):\n        pass\n    ```\n\n    ```python\n    >>> tree = mydict(b=4, a=(2, 3), c=myanotherdict({'d': 5, 'f': 6}))\n    >>> optree.tree_flatten_with_path(tree, namespace='mydict')\n    (\n        [('c', 'f'), ('c', 'd'), ('b',), ('a', 0), ('a', 1)],\n        [6, 5, 4, 2, 3],\n        pytreespec(\n            customtreenode(mydict[['c', 'b', 'a']], [customtreenode(myanotherdict[['f', 'd']], [*, *]), *, (*, *)]),\n            namespace='mydict'\n        )\n    )\n    ```\n\n5. **be careful about the potential infinite recursion of the custom flatten function.** the returned `children` from the custom flatten function are considered subtrees. they will be further flattened recursively. the `children` can have the same type as the current node. users must design their termination condition carefully.\n\n    ```python\n    import numpy as np\n    import torch\n\n    optree.register_pytree_node(\n        np.ndarray,\n        # children are nest lists of python objects\n        lambda array: (np.atleast_1d(array).tolist(), array.ndim == 0),\n        lambda scalar, rows: np.asarray(rows) if not scalar else np.asarray(rows[0]),\n        namespace='numpy1',\n    )\n\n    optree.register_pytree_node(\n        np.ndarray,\n        # children are python objects\n        lambda array: (\n            list(array.ravel()),  # list(1darray[t]) -> list[t]\n            dict(shape=array.shape, dtype=array.dtype)\n        ),\n        lambda metadata, children: np.asarray(children, dtype=metadata['dtype']).reshape(metadata['shape']),\n        namespace='numpy2',\n    )\n\n    optree.register_pytree_node(\n        np.ndarray,\n        # returns a list of `np.ndarray`s without termination condition\n        lambda array: ([array.ravel()], array.dtype),\n        lambda shape, children: children[0].reshape(shape),\n        namespace='numpy3',\n    )\n\n    optree.register_pytree_node(\n        torch.tensor,\n        # children are nest lists of python objects\n        lambda tensor: (torch.atleast_1d(tensor).tolist(), tensor.ndim == 0),\n        lambda scalar, rows: torch.tensor(rows) if not scalar else torch.tensor(rows[0])),\n        namespace='torch1',\n    )\n\n    optree.register_pytree_node(\n        torch.tensor,\n        # returns a list of `torch.tensor`s without termination condition\n        lambda tensor: (\n            list(tensor.view(-1)),  # list(1dtensor[t]) -> list[0dtensor[t]] (still tensors!)\n            tensor.shape\n        ),\n        lambda shape, children: torch.stack(children).reshape(shape),\n        namespace='torch2',\n    )\n    ```\n\n    ```python\n    >>> optree.tree_flatten(np.arange(9).reshape(3, 3), namespace='numpy1')\n    (\n        [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        pytreespec(\n            customtreenode(ndarray[false], [[*, *, *], [*, *, *], [*, *, *]]),\n            namespace='numpy1'\n        )\n    )\n    # implicitly casts `float`s to `np.float64`\n    >>> optree.tree_map(lambda x: x + 1.5, np.arange(9).reshape(3, 3), namespace='numpy1')\n    array([[1.5, 2.5, 3.5],\n           [4.5, 5.5, 6.5],\n           [7.5, 8.5, 9.5]])\n\n    >>> optree.tree_flatten(np.arange(9).reshape(3, 3), namespace='numpy2')\n    (\n        [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        pytreespec(\n            customtreenode(ndarray[{'shape': (3, 3), 'dtype': dtype('int64')}], [*, *, *, *, *, *, *, *, *]),\n            namespace='numpy2'\n        )\n    )\n    # explicitly casts `float`s to `np.int64`\n    >>> optree.tree_map(lambda x: x + 1.5, np.arange(9).reshape(3, 3), namespace='numpy2')\n    array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]])\n\n    # children are also `np.ndarray`s, recurse without termination condition.\n    >>> optree.tree_flatten(np.arange(9).reshape(3, 3), namespace='numpy3')\n    traceback (most recent call last):\n        ...\n    recursionerror: maximum recursion depth exceeded during flattening the tree.\n\n    >>> optree.tree_flatten(torch.arange(9).reshape(3, 3), namespace='torch1')\n    (\n        [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        pytreespec(\n            customtreenode(tensor[false], [[*, *, *], [*, *, *], [*, *, *]]),\n            namespace='torch1'\n        )\n    )\n    # implicitly casts `float`s to `torch.float32`\n    >>> optree.tree_map(lambda x: x + 1.5, torch.arange(9).reshape(3, 3), namespace='torch1')\n    tensor([[1.5000, 2.5000, 3.5000],\n            [4.5000, 5.5000, 6.5000],\n            [7.5000, 8.5000, 9.5000]])\n\n    # children are also `torch.tensor`s, recurse without termination condition.\n    >>> optree.tree_flatten(torch.arange(9).reshape(3, 3), namespace='torch2')\n    traceback (most recent call last):\n        ...\n    recursionerror: maximum recursion depth exceeded during flattening the tree.\n    ```\n\n### `none` is non-leaf node vs. `none` is leaf\n\nthe [`none`](https://docs.python.org/3/library/constants.html#none) object is a special object in the python language.\nit serves some of the same purposes as `null` (a pointer does not point to anything) in other programming languages, which denotes a variable is empty or marks default parameters.\nhowever, the `none` object is a singleton object rather than a pointer.\nit may also serve as a sentinel value.\nin addition, if a function has returned without any return value or the return statement is omitted, the function will also implicitly return the `none` object.\n\nby default, the `none` object is considered a non-leaf node in the tree with arity 0, i.e., _**a non-leaf node that has no children**_.\nthis is like the behavior of an empty tuple.\nwhile flattening a tree, it will remain in the tree structure definitions rather than in the leaves list.\n\n```python\n>>> tree = {'b': (2, [3, 4]), 'a': 1, 'c': none, 'd': 5}\n>>> optree.tree_flatten(tree)\n([1, 2, 3, 4, 5], pytreespec({'a': *, 'b': (*, [*, *]), 'c': none, 'd': *}))\n>>> optree.tree_flatten(tree, none_is_leaf=true)\n([1, 2, 3, 4, none, 5], pytreespec({'a': *, 'b': (*, [*, *]), 'c': *, 'd': *}, noneisleaf))\n>>> optree.tree_flatten(1)\n([1], pytreespec(*))\n>>> optree.tree_flatten(none)\n([], pytreespec(none))\n>>> optree.tree_flatten(none, none_is_leaf=true)\n([none], pytreespec(*, noneisleaf))\n```\n\noptree provides a keyword argument `none_is_leaf` to determine whether to consider the `none` object as a leaf, like other opaque objects.\nif `none_is_leaf=true`, the `none` object will place in the leaves list.\notherwise, the `none` object will remain in the tree specification (structure).\n\n```python\n>>> import torch\n\n>>> linear = torch.nn.linear(in_features=3, out_features=2, bias=false)\n>>> linear._parameters  # a container has none\nordereddict([\n    ('weight', parameter containing:\n               tensor([[-0.6677,  0.5209,  0.3295],\n                       [-0.4876, -0.3142,  0.1785]], requires_grad=true)),\n    ('bias', none)\n])\n\n>>> optree.tree_map(torch.zeros_like, linear._parameters)\nordereddict([\n    ('weight', tensor([[0., 0., 0.],\n                       [0., 0., 0.]])),\n    ('bias', none)\n])\n\n>>> optree.tree_map(torch.zeros_like, linear._parameters, none_is_leaf=true)\ntraceback (most recent call last):\n    ...\ntypeerror: zeros_like(): argument 'input' (position 1) must be tensor, not nonetype\n\n>>> optree.tree_map(lambda t: torch.zeros_like(t) if t is not none else 0, linear._parameters, none_is_leaf=true)\nordereddict([\n    ('weight', tensor([[0., 0., 0.],\n                       [0., 0., 0.]])),\n    ('bias', 0)\n])\n```\n\n### key ordering for dictionaries\n\nthe built-in python dictionary (i.e., [`builtins.dict`](https://docs.python.org/3/library/stdtypes.html#dict)) is an unordered mapping that holds the keys and values.\nthe leaves of a dictionary are the values. although since python 3.6, the built-in dictionary is insertion ordered ([pep 468](https://peps.python.org/pep-0468)).\nthe dictionary equality operator (`==`) does not check for key ordering.\nto ensure [referential transparency](https://en.wikipedia.org/wiki/referential_transparency) that \"equal `dict`\" implies \"equal ordering of leaves\", the order of values of the dictionary is sorted by the keys.\nthis behavior is also applied to [`collections.defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict).\n\n```python\n>>> optree.tree_flatten({'a': [1, 2], 'b': [3]})\n([1, 2, 3], pytreespec({'a': [*, *], 'b': [*]}))\n>>> optree.tree_flatten({'b': [3], 'a': [1, 2]})\n([1, 2, 3], pytreespec({'a': [*, *], 'b': [*]}))\n```\n\nif users want to keep the values in the insertion order in pytree traversal, they should use [`collections.ordereddict`](https://docs.python.org/3/library/collections.html#collections.ordereddict), which will take the order of keys under consideration:\n\n```python\n>>> ordereddict([('a', [1, 2]), ('b', [3])]) == ordereddict([('b', [3]), ('a', [1, 2])])\nfalse\n>>> optree.tree_flatten(ordereddict([('a', [1, 2]), ('b', [3])]))\n([1, 2, 3], pytreespec(ordereddict([('a', [*, *]), ('b', [*])])))\n>>> optree.tree_flatten(ordereddict([('b', [3]), ('a', [1, 2])]))\n([3, 1, 2], pytreespec(ordereddict([('b', [*]), ('a', [*, *])])))\n```\n\n**since optree v0.9.0, the key order of the reconstructed output dictionaries from `tree_unflatten` is guaranteed to be consistent with the key order of the input dictionaries in `tree_flatten`.**\n\n```python\n>>> leaves, treespec = optree.tree_flatten({'b': [3], 'a': [1, 2]})\n>>> leaves, treespec\n([1, 2, 3], pytreespec({'a': [*, *], 'b': [*]}))\n>>> optree.tree_unflatten(treespec, leaves)\n{'b': [3], 'a': [1, 2]}\n>>> optree.tree_map(lambda x: x, {'b': [3], 'a': [1, 2]})\n{'b': [3], 'a': [1, 2]}\n>>> optree.tree_map(lambda x: x + 1, {'b': [3], 'a': [1, 2]})\n{'b': [4], 'a': [2, 3]}\n```\n\nthis property is also preserved during serialization/deserialization.\n\n```python\n>>> leaves, treespec = optree.tree_flatten({'b': [3], 'a': [1, 2]})\n>>> leaves, treespec\n([1, 2, 3], pytreespec({'a': [*, *], 'b': [*]}))\n>>> restored_treespec = pickle.loads(pickle.dumps(treespec))\n>>> optree.tree_unflatten(treespec, leaves)\n{'b': [3], 'a': [1, 2]}\n>>> optree.tree_unflatten(restored_treespec, leaves)\n{'b': [3], 'a': [1, 2]}\n```\n\n> note that there are no restrictions on the `dict` to require the keys to be comparable (sortable).\n> there can be multiple types of keys in the dictionary.\n> the keys are sorted in ascending order by `key=lambda k: k` first if capable otherwise fallback to `key=lambda k: (f'{k.__class__.__module__}.{k.__class__.__qualname__}', k)`. this handles most cases.\n>\n> ```python\n> >>> sorted({1: 2, 1.5: 1}.keys())\n> [1, 1.5]\n> >>> sorted({'a': 3, 1: 2, 1.5: 1}.keys())\n> traceback (most recent call last):\n>     ...\n> typeerror: '<' not supported between instances of 'int' and 'str'\n> >>> sorted({'a': 3, 1: 2, 1.5: 1}.keys(), key=lambda k: (f'{k.__class__.__module__}.{k.__class__.__qualname__}', k))\n> [1.5, 1, 'a']\n> ```\n\n--------------------------------------------------------------------------------\n\n## benchmark\n\nwe benchmark the performance of:\n\n- tree flatten\n- tree unflatten\n- tree copy (i.e., `unflatten(flatten(...))`)\n- tree map\n\ncompared with the following libraries:\n\n- optree ([`@v0.9.0`](https://github.com/metaopt/optree/tree/v0.9.0))\n- jax xla ([`jax[cpu] == 0.4.6`](https://pypi.org/project/jax/0.4.6))\n- pytorch ([`torch == 2.0.0`](https://pypi.org/project/torch/2.0.0))\n- dm-tree ([`dm-tree == 0.1.8`](https://pypi.org/project/dm-tree/0.1.8))\n\n| average time cost (\u2193)      | optree (v0.9.0) | jax xla (v0.4.6) | pytorch (v2.0.0) | dm-tree (v0.1.8) |\n| :------------------------- | --------------: | ---------------: | ---------------: | ---------------: |\n| tree flatten               |           x1.00 |             2.33 |            22.05 |             1.12 |\n| tree unflatten             |           x1.00 |             2.69 |             4.28 |            16.23 |\n| tree flatten with path     |           x1.00 |            16.16 |    not supported |            27.59 |\n| tree copy                  |           x1.00 |             2.56 |             9.97 |            11.02 |\n| tree map                   |           x1.00 |             2.56 |             9.58 |            10.62 |\n| tree map (nargs)           |           x1.00 |             2.89 |    not supported |            31.33 |\n| tree map with path         |           x1.00 |             7.23 |    not supported |            19.66 |\n| tree map with path (nargs) |           x1.00 |             6.56 |    not supported |            29.61 |\n\nall results are reported on a workstation with an amd ryzen 9 5950x cpu @ 4.45ghz in an isolated virtual environment with python 3.10.9.\nrun with the following commands:\n\n```bash\nconda create --name optree-benchmark anaconda::python=3.10 --yes --no-default-packages\nconda activate optree-benchmark\npython3 -m pip install --editable '.[benchmark]' --extra-index-url https://download.pytorch.org/whl/cpu\npython3 benchmark.py --number=10000 --repeat=5\n```\n\nthe test inputs are nested containers (i.e., pytrees) extracted from `torch.nn.module` objects.\nthey are:\n\n```python\ntiny_mlp = nn.sequential(\n    nn.linear(1, 1, bias=true),\n    nn.batchnorm1d(1, affine=true, track_running_stats=true),\n    nn.relu(),\n    nn.linear(1, 1, bias=false),\n    nn.sigmoid(),\n)\n```\n\nand alexnet, resnet18, resnet34, resnet50, resnet101, resnet152, visiontransformerh14 (vit-h/14), and swintransformerb (swin-b) from [`torchvsion`](https://github.com/pytorch/vision).\nplease refer to [`benchmark.py`](https://github.com/metaopt/optree/blob/head/benchmark.py) for more details.\n\n### tree flatten\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |       29.70 |        71.06 |       583.66 |        31.32 |            2.39 |           19.65 |            1.05 |\n| alexnet   |   188 |      103.92 |       262.56 |      2304.36 |       119.61 |            2.53 |           22.17 |            1.15 |\n| resnet18  |   698 |      368.06 |       852.69 |      8440.31 |       420.43 |            2.32 |           22.93 |            1.14 |\n| resnet34  |  1242 |      644.96 |      1461.55 |     14498.81 |       712.81 |            2.27 |           22.48 |            1.11 |\n| resnet50  |  1702 |      919.95 |      2080.58 |     20995.96 |      1006.42 |            2.26 |           22.82 |            1.09 |\n| resnet101 |  3317 |     1806.36 |      3996.90 |     40314.12 |      1955.48 |            2.21 |           22.32 |            1.08 |\n| resnet152 |  4932 |     2656.92 |      5812.38 |     57775.53 |      2826.92 |            2.19 |           21.75 |            1.06 |\n| vit-h/14  |  3420 |     1863.50 |      4418.24 |     41334.64 |      2128.71 |            2.37 |           22.18 |            1.14 |\n| swin-b    |  2881 |     1631.06 |      3944.13 |     36131.54 |      2032.77 |            2.42 |           22.15 |            1.25 |\n|           |       |             |              |              |  **average** |        **2.33** |       **22.05** |        **1.12** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140610-dce44f1b-3a91-43e6-85b5-7566ae4c8769.png\" width=\"90%\" />\n</div>\n\n### tree unflatten\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |       55.13 |       152.07 |       231.94 |       940.11 |            2.76 |            4.21 |           17.05 |\n| alexnet   |   188 |      226.29 |       678.29 |       972.90 |      4195.04 |            3.00 |            4.30 |           18.54 |\n| resnet18  |   698 |      766.54 |      1953.26 |      3137.86 |     12049.88 |            2.55 |            4.09 |           15.72 |\n| resnet34  |  1242 |     1309.22 |      3526.12 |      5759.16 |     20966.75 |            2.69 |            4.40 |           16.01 |\n| resnet50  |  1702 |     1914.96 |      5002.83 |      8369.43 |     29597.10 |            2.61 |            4.37 |           15.46 |\n| resnet101 |  3317 |     3672.61 |      9633.29 |     15683.16 |     57240.20 |            2.62 |            4.27 |           15.59 |\n| resnet152 |  4932 |     5407.58 |     13970.88 |     23074.68 |     82072.54 |            2.58 |            4.27 |           15.18 |\n| vit-h/14  |  3420 |     4013.18 |     11146.31 |     17633.07 |     66723.58 |            2.78 |            4.39 |           16.63 |\n| swin-b    |  2881 |     3595.34 |      9505.31 |     15054.88 |     57310.03 |            2.64 |            4.19 |           15.94 |\n|           |       |             |              |              |  **average** |        **2.69** |        **4.28** |       **16.23** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140674-1edc9fc5-f8db-481a-817d-a40b93c12b32.png\" width=\"90%\" />\n</div>\n\n### tree flatten with path\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |       36.49 |       543.67 |          n/a |       919.13 |           14.90 |             n/a |           25.19 |\n| alexnet   |   188 |      115.44 |      2185.21 |          n/a |      3752.11 |           18.93 |             n/a |           32.50 |\n| resnet18  |   698 |      431.84 |      7106.55 |          n/a |     12286.70 |           16.46 |             n/a |           28.45 |\n| resnet34  |  1242 |      845.61 |     13431.99 |          n/a |     22860.48 |           15.88 |             n/a |           27.03 |\n| resnet50  |  1702 |     1166.27 |     18426.52 |          n/a |     31225.05 |           15.80 |             n/a |           26.77 |\n| resnet101 |  3317 |     2312.77 |     34770.49 |          n/a |     59346.86 |           15.03 |             n/a |           25.66 |\n| resnet152 |  4932 |     3304.74 |     50557.25 |          n/a |     85847.91 |           15.30 |             n/a |           25.98 |\n| vit-h/14  |  3420 |     2235.25 |     37473.53 |          n/a |     64105.24 |           16.76 |             n/a |           28.68 |\n| swin-b    |  2881 |     1970.25 |     32205.83 |          n/a |     55177.50 |           16.35 |             n/a |           28.01 |\n|           |       |             |              |              |  **average** |       **16.16** |             n/a |       **27.59** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140719-d0040671-57f8-4dee-a0b8-02ee6d008723.png\" width=\"90%\" />\n</div>\n\n### tree copy\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |       89.81 |       232.26 |       845.20 |       981.48 |            2.59 |            9.41 |           10.93 |\n| alexnet   |   188 |      334.58 |       959.32 |      3360.46 |      4316.05 |            2.87 |           10.04 |           12.90 |\n| resnet18  |   698 |     1128.11 |      2840.71 |     11471.07 |     12297.07 |            2.52 |           10.17 |           10.90 |\n| resnet34  |  1242 |     2160.57 |      5333.10 |     20563.06 |     21901.91 |            2.47 |            9.52 |           10.14 |\n| resnet50  |  1702 |     2746.84 |      6823.88 |     29705.99 |     28927.88 |            2.48 |           10.81 |           10.53 |\n| resnet101 |  3317 |     5762.05 |     13481.45 |     56968.78 |     60115.93 |            2.34 |            9.89 |           10.43 |\n| resnet152 |  4932 |     8151.21 |     20805.61 |     81024.06 |     84079.57 |            2.55 |            9.94 |           10.31 |\n| vit-h/14  |  3420 |     5963.61 |     15665.91 |     59813.52 |     68377.82 |            2.63 |           10.03 |           11.47 |\n| swin-b    |  2881 |     5401.59 |     14255.33 |     53361.77 |     62317.07 |            2.64 |            9.88 |           11.54 |\n|           |       |             |              |              |  **average** |        **2.56** |        **9.97** |       **11.02** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140744-d87eedf8-6fa8-44ad-9bac-7475a5a73f5e.png\" width=\"90%\" />\n</div>\n\n### tree map\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |       95.13 |       243.86 |       867.34 |      1026.99 |            2.56 |            9.12 |           10.80 |\n| alexnet   |   188 |      348.44 |       987.57 |      3398.32 |      4354.81 |            2.83 |            9.75 |           12.50 |\n| resnet18  |   698 |     1190.62 |      2982.66 |     11719.94 |     12559.01 |            2.51 |            9.84 |           10.55 |\n| resnet34  |  1242 |     2205.87 |      5417.60 |     20935.72 |     22308.51 |            2.46 |            9.49 |           10.11 |\n| resnet50  |  1702 |     3128.48 |      7579.55 |     30372.71 |     31638.67 |            2.42 |            9.71 |           10.11 |\n| resnet101 |  3317 |     6173.05 |     14846.57 |     59167.85 |     60245.42 |            2.41 |            9.58 |            9.76 |\n| resnet152 |  4932 |     8641.22 |     22000.74 |     84018.65 |     86182.21 |            2.55 |            9.72 |            9.97 |\n| vit-h/14  |  3420 |     6211.79 |     17077.49 |     59790.25 |     69763.86 |            2.75 |            9.63 |           11.23 |\n| swin-b    |  2881 |     5673.66 |     14339.69 |     53309.17 |     59764.61 |            2.53 |            9.40 |           10.53 |\n|           |       |             |              |              |  **average** |        **2.56** |        **9.58** |       **10.62** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140788-6bb37706-f441-46c8-8897-a778e8679e05.png\" width=\"90%\" />\n</div>\n\n### tree map (nargs)\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |      137.06 |       389.96 |          n/a |      3908.77 |            2.85 |             n/a |           28.52 |\n| alexnet   |   188 |      467.24 |      1496.96 |          n/a |     15395.13 |            3.20 |             n/a |           32.95 |\n| resnet18  |   698 |     1603.79 |      4534.01 |          n/a |     50323.76 |            2.83 |             n/a |           31.38 |\n| resnet34  |  1242 |     2907.64 |      8435.33 |          n/a |     90389.23 |            2.90 |             n/a |           31.09 |\n| resnet50  |  1702 |     4183.77 |     11382.51 |          n/a |    121777.01 |            2.72 |             n/a |           29.11 |\n| resnet101 |  3317 |     7721.13 |     22247.85 |          n/a |    238755.17 |            2.88 |             n/a |           30.92 |\n| resnet152 |  4932 |    11508.05 |     31429.39 |          n/a |    360257.74 |            2.73 |             n/a |           31.30 |\n| vit-h/14  |  3420 |     8294.20 |     24524.86 |          n/a |    270514.87 |            2.96 |             n/a |           32.61 |\n| swin-b    |  2881 |     7074.62 |     20854.80 |          n/a |    241120.41 |            2.95 |             n/a |           34.08 |\n|           |       |             |              |              |  **average** |        **2.89** |             n/a |       **31.33** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140815-754fd476-0dee-42df-a809-40c953d7aff5.png\" width=\"90%\" />\n</div>\n\n### tree map with path\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |      109.82 |       778.30 |          n/a |      2186.40 |            7.09 |             n/a |           19.91 |\n| alexnet   |   188 |      365.16 |      2939.36 |          n/a |      8355.37 |            8.05 |             n/a |           22.88 |\n| resnet18  |   698 |     1308.26 |      9529.58 |          n/a |     25758.24 |            7.28 |             n/a |           19.69 |\n| resnet34  |  1242 |     2527.21 |     18084.89 |          n/a |     45942.32 |            7.16 |             n/a |           18.18 |\n| resnet50  |  1702 |     3226.03 |     22935.53 |          n/a |     61275.34 |            7.11 |             n/a |           18.99 |\n| resnet101 |  3317 |     6663.52 |     46878.89 |          n/a |    126642.14 |            7.04 |             n/a |           19.01 |\n| resnet152 |  4932 |     9378.19 |     66136.44 |          n/a |    176981.01 |            7.05 |             n/a |           18.87 |\n| vit-h/14  |  3420 |     7033.69 |     50418.37 |          n/a |    142508.11 |            7.17 |             n/a |           20.26 |\n| swin-b    |  2881 |     6078.15 |     43173.22 |          n/a |    116612.71 |            7.10 |             n/a |           19.19 |\n|           |       |             |              |              |  **average** |        **7.23** |             n/a |       **19.66** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140830-ab8dfb6e-ea59-449e-af86-ae89897258be.png\" width=\"90%\" />\n</div>\n\n### tree map with path (nargs)\n\n| module    | nodes | optree (\u03bcs) | jax xla (\u03bcs) | pytorch (\u03bcs) | dm-tree (\u03bcs) | speedup (j / o) | speedup (p / o) | speedup (d / o) |\n| :-------- | ----: | ----------: | -----------: | -----------: | -----------: | --------------: | --------------: | --------------: |\n| tinymlp   |    53 |      146.05 |       917.00 |          n/a |      3940.61 |            6.28 |             n/a |           26.98 |\n| alexnet   |   188 |      489.27 |      3560.76 |          n/a |     15434.71 |            7.28 |             n/a |           31.55 |\n| resnet18  |   698 |     1712.79 |     11171.44 |          n/a |     50219.86 |            6.52 |             n/a |           29.32 |\n| resnet34  |  1242 |     3112.83 |     21024.58 |          n/a |     95505.71 |            6.75 |             n/a |           30.68 |\n| resnet50  |  1702 |     4220.70 |     26600.82 |          n/a |    121897.57 |            6.30 |             n/a |           28.88 |\n| resnet101 |  3317 |     8631.34 |     54372.37 |          n/a |    236555.54 |            6.30 |             n/a |           27.41 |\n| resnet152 |  4932 |    12710.49 |     77643.13 |          n/a |    353600.32 |            6.11 |             n/a |           27.82 |\n| vit-h/14  |  3420 |     8753.09 |     58712.71 |          n/a |    286365.36 |            6.71 |             n/a |           32.72 |\n| swin-b    |  2881 |     7359.29 |     50112.23 |          n/a |    228866.66 |            6.81 |             n/a |           31.10 |\n|           |       |             |              |              |  **average** |        **6.56** |             n/a |       **29.61** |\n\n<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/16078332/227140850-bd3744aa-363d-46a7-9e92-4279d14d9be6.png\" width=\"90%\" />\n</div>\n\n--------------------------------------------------------------------------------\n\n## changelog\n\nsee [changelog.md](https://github.com/metaopt/optree/blob/head/changelog.md).\n\n--------------------------------------------------------------------------------\n\n## license\n\noptree is released under the apache license 2.0.\n\noptree is heavily based on jax's implementation of the pytree utility, with deep refactoring and several improvements.\nthe original licenses can be found at [jax's apache license 2.0](https://github.com/google/jax/blob/head/license) and [tensorflow's apache license 2.0](https://github.com/tensorflow/tensorflow/blob/head/license).\n",
  "docs_url": null,
  "keywords": "pytree,tree manipulation,tree traversal,functional programming",
  "license": "apache license, version 2.0",
  "name": "optree",
  "package_url": "https://pypi.org/project/optree/",
  "project_url": "https://pypi.org/project/optree/",
  "project_urls": {
    "Bug Report": "https://github.com/metaopt/optree/issues",
    "Documentation": "https://optree.readthedocs.io",
    "Homepage": "https://github.com/metaopt/optree",
    "Repository": "https://github.com/metaopt/optree"
  },
  "release_url": "https://pypi.org/project/optree/0.10.0/",
  "requires_dist": [
    "typing-extensions >=4.0.0",
    "jax[cpu] <0.5.0a0,>=0.4.6 ; extra == 'benchmark'",
    "torch <2.1.0a0,>=2.0 ; extra == 'benchmark'",
    "torchvision ; extra == 'benchmark'",
    "dm-tree <0.2.0a0,>=0.1 ; extra == 'benchmark'",
    "pandas ; extra == 'benchmark'",
    "tabulate ; extra == 'benchmark'",
    "termcolor ; extra == 'benchmark'",
    "sphinx >=5.2.1 ; extra == 'docs'",
    "sphinx-autoapi ; extra == 'docs'",
    "sphinx-autobuild ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinxcontrib-bibtex ; extra == 'docs'",
    "sphinx-autodoc-typehints >=1.19.2 ; extra == 'docs'",
    "docutils ; extra == 'docs'",
    "jax[cpu] ; extra == 'docs'",
    "numpy ; extra == 'docs'",
    "torch ; extra == 'docs'",
    "jax ; extra == 'jax'",
    "isort >=5.11.0 ; extra == 'lint'",
    "black >=22.6.0 ; extra == 'lint'",
    "pylint[spelling] >=2.15.0 ; extra == 'lint'",
    "mypy >=0.990 ; extra == 'lint'",
    "flake8 ; extra == 'lint'",
    "flake8-bugbear ; extra == 'lint'",
    "flake8-comprehensions ; extra == 'lint'",
    "flake8-docstrings ; extra == 'lint'",
    "flake8-pyi ; extra == 'lint'",
    "flake8-simplify ; extra == 'lint'",
    "ruff ; extra == 'lint'",
    "doc8 <1.0.0a0 ; extra == 'lint'",
    "pydocstyle ; extra == 'lint'",
    "pyenchant ; extra == 'lint'",
    "xdoctest ; extra == 'lint'",
    "cpplint ; extra == 'lint'",
    "pre-commit ; extra == 'lint'",
    "numpy ; extra == 'numpy'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-xdist ; extra == 'test'",
    "torch ; extra == 'torch'"
  ],
  "requires_python": ">=3.7",
  "summary": "optimized pytree utilities.",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "jieren9806@gmail.com",
    "optree_contributors",
    "xuehaipan@pku.edu.cn"
  ],
  "kwds": "optree pytreespec pytree pytrees tree_structure",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_optree",
  "homepage": "",
  "release_count": 15,
  "dependency_ids": [
    "pypi_black",
    "pypi_cpplint",
    "pypi_dm_tree",
    "pypi_doc8",
    "pypi_docutils",
    "pypi_flake8",
    "pypi_flake8_bugbear",
    "pypi_flake8_comprehensions",
    "pypi_flake8_docstrings",
    "pypi_flake8_pyi",
    "pypi_flake8_simplify",
    "pypi_isort",
    "pypi_jax",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pydocstyle",
    "pypi_pyenchant",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_ruff",
    "pypi_sphinx",
    "pypi_sphinx_autoapi",
    "pypi_sphinx_autobuild",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_bibtex",
    "pypi_tabulate",
    "pypi_termcolor",
    "pypi_torch",
    "pypi_torchvision",
    "pypi_typing_extensions",
    "pypi_xdoctest"
  ],
  "documentation_summary": "OpTree, a Python package for optimized PyTree utilities, was released in its latest version 0.10.0 on November 7, 2023. It provides tools for manipulating and traversing tree structures in Python, supporting operations like tree flattening and mapping. The package requires Python 3.7 or higher and is compatible with various operating systems including MacOS, Windows, and Linux. OpTree is designed for developers, educators, and researchers interested in functional programming and tree manipulation. It is licensed under the Apache License, Version 2.0, and is available for installation via pip and conda. The project emphasizes the importance of JavaScript for full functionality and warns against using unsupported browsers.",
  "embedding": [
    -0.021518344059586525,
    -0.0006657461053691804,
    -0.010101468302309513,
    -0.04160689562559128,
    -0.00624818354845047,
    0.03125521540641785,
    0.008450060151517391,
    0.003000772325322032,
    -0.009400870651006699,
    -0.0065913330763578415,
    0.012725133448839188,
    0.0015227266121655703,
    -0.031912919133901596,
    0.01931646652519703,
    -0.008121208287775517,
    -0.0021625577937811613,
    0.006319672800600529,
    -0.03717454522848129,
    0.0018515783594921231,
    0.009214998222887516,
    -0.003040091600269079,
    0.004889882635325193,
    -0.02630814164876938,
    -0.017457738518714905,
    0.020860640332102776,
    0.012160366401076317,
    0.014476626180112362,
    -0.017100291326642036,
    0.012289047241210938,
    -0.016971610486507416,
    0.04003412649035454,
    -0.00405345531180501,
    -0.034314967691898346,
    -0.02665129117667675,
    -0.008850401267409325,
    -0.03548739477992058,
    -0.009286487475037575,
    -0.009579595178365707,
    0.01585637405514717,
    0.012939602136611938,
    0.016900120303034782,
    -0.0032599216792732477,
    -0.020474595949053764,
    -0.0004964052932336926,
    0.008650231175124645,
    0.00653414148837328,
    0.014283604919910431,
    -0.030654702335596085,
    -0.021961579099297523,
    0.006877291016280651,
    -0.009272189810872078,
    0.02617945894598961,
    -0.006216013338416815,
    -0.023748816922307014,
    0.021418258547782898,
    -0.000450160528998822,
    -0.009558147750794888,
    0.013640198856592178,
    -0.01040172390639782,
    -0.018630167469382286,
    0.04929916933178902,
    -0.004271498415619135,
    -0.03874731436371803,
    0.002881027292460203,
    -0.011638492345809937,
    0.019502339884638786,
    -0.0017505994765087962,
    0.020417405292391777,
    0.012045983225107193,
    -0.013754582032561302,
    0.02962525375187397,
    0.04172128066420555,
    -0.02014574408531189,
    0.002791665494441986,
    0.001853365683928132,
    -0.012667941860854626,
    -0.0340862013399601,
    0.0057370332069695,
    -0.016485482454299927,
    -0.01918778568506241,
    0.01742914319038391,
    -0.02922491356730461,
    0.001768471789546311,
    0.047383248805999756,
    0.02635103464126587,
    -0.00013024495274294168,
    -0.010537554509937763,
    0.01995987258851528,
    -0.021489746868610382,
    -0.025578947737812996,
    0.014476626180112362,
    -0.014826925471425056,
    0.005794225260615349,
    0.0297110415995121,
    -0.027909506112337112,
    0.02416345477104187,
    -0.006820099428296089,
    0.023391367867588997,
    -0.0323418565094471,
    0.0009074700064957142,
    0.0049327765591442585,
    0.02673707716166973,
    -0.02656550332903862,
    -0.01435509417206049,
    -0.019516637548804283,
    -0.022047365084290504,
    0.008314230479300022,
    0.014583860523998737,
    0.011545556597411633,
    -0.008514400571584702,
    0.008507251739501953,
    0.03740331158041954,
    -0.016070842742919922,
    -0.00397839117795229,
    0.006301800720393658,
    -0.003374305088073015,
    0.0297110415995121,
    0.0037496250588446856,
    -0.029024742543697357,
    0.015970757231116295,
    0.008878997527062893,
    0.019101997837424278,
    0.03557318076491356,
    -0.010301638394594193,
    -0.00149681163020432,
    0.009429466910660267,
    -0.011652790941298008,
    -0.01995987258851528,
    -0.01853008195757866,
    -0.02586490660905838,
    0.041177958250045776,
    0.008593039587140083,
    0.004096349235624075,
    -0.010408872738480568,
    0.001604939578101039,
    0.029310699552297592,
    0.01751493103802204,
    0.021689917892217636,
    -0.015484628267586231,
    0.008900444023311138,
    -0.001424428541213274,
    0.00932938139885664,
    -0.013082580640912056,
    -0.0055011180229485035,
    0.001998131861910224,
    0.03734612092375755,
    0.010508958250284195,
    0.0013681305572390556,
    0.01421926449984312,
    -0.026422524824738503,
    0.017200376838445663,
    0.018315613269805908,
    0.0025539628695696592,
    0.01953093521296978,
    0.03285657986998558,
    -0.007692271377891302,
    0.014412285760045052,
    -0.007649377919733524,
    -0.021504046395421028,
    0.004210732411593199,
    0.002788091078400612,
    0.00847865641117096,
    -0.024106264114379883,
    -0.015613310039043427,
    -0.018715955317020416,
    0.022218940779566765,
    0.004536009393632412,
    -0.003420773195102811,
    -0.004779073875397444,
    0.0039891148917376995,
    0.013075431808829308,
    0.022662175819277763,
    -0.022790856659412384,
    -0.004289370961487293,
    0.01284666545689106,
    0.007649377919733524,
    0.013733135536313057,
    0.0041356682777404785,
    -0.004271498415619135,
    0.023148303851485252,
    -0.002323409076780081,
    -0.002246557967737317,
    -0.005522564984858036,
    0.03557318076491356,
    -0.004153540823608637,
    -0.00810691062361002,
    -0.009508104994893074,
    0.015842076390981674,
    0.018973316997289658,
    0.026665588840842247,
    0.013289900496602058,
    0.011373981833457947,
    0.0033760922960937023,
    0.0017783016664907336,
    -0.5929626226425171,
    -0.018515784293413162,
    -0.016199523583054543,
    -0.05959365889430046,
    0.026279544457793236,
    -0.015284458175301552,
    0.008435762487351894,
    0.04003412649035454,
    -0.011524109169840813,
    0.014383690431714058,
    -0.024134859442710876,
    0.040091317147016525,
    0.009651084430515766,
    -0.020774852484464645,
    -0.023276984691619873,
    -0.015370245091617107,
    0.00974402017891407,
    -0.0362594798207283,
    0.0007930867723189294,
    -0.017371952533721924,
    -0.02573622390627861,
    0.03259921818971634,
    -0.039519403129816055,
    -0.004407328553497791,
    3.177932376274839e-05,
    0.017672207206487656,
    0.021704215556383133,
    0.00010835129069164395,
    -0.01599935255944729,
    0.0017327270470559597,
    0.004546733107417822,
    0.030340149998664856,
    -0.006223162170499563,
    -0.02700873836874962,
    0.04355141147971153,
    -0.002757708076387644,
    -0.03740331158041954,
    0.04295089840888977,
    0.003785369684919715,
    0.045982055366039276,
    -0.008771763183176517,
    -0.017929570749402046,
    0.014147774316370487,
    -0.0002244100469397381,
    -0.009686828590929508,
    -0.004300094209611416,
    0.023276984691619873,
    0.0042357537895441055,
    0.0003652667219284922,
    -0.014583860523998737,
    0.017143184319138527,
    -0.0062410347163677216,
    0.018344208598136902,
    -0.028867464512586594,
    0.02127527818083763,
    -0.00810691062361002,
    0.011474066413939,
    -0.013525815680623055,
    -5.398016583058052e-05,
    -0.04378017783164978,
    -0.014841223135590553,
    0.013611603528261185,
    -0.00703456811606884,
    0.0017291526310145855,
    -0.01564190536737442,
    0.004014136269688606,
    0.009021976962685585,
    -0.0025646863505244255,
    0.001572769251652062,
    -0.019202083349227905,
    0.01687152497470379,
    -0.00974402017891407,
    0.0074063134379684925,
    -0.0027863038703799248,
    0.012289047241210938,
    0.042321790009737015,
    0.04643958806991577,
    -0.013332794420421124,
    -0.0009776190854609013,
    0.01634250208735466,
    0.01844429410994053,
    0.0013037900207564235,
    -0.012339089997112751,
    -0.04875584691762924,
    0.034629520028829575,
    0.0032617091201245785,
    0.017986761406064034,
    0.008764614351093769,
    0.0283956341445446,
    -0.013289900496602058,
    0.0358305424451828,
    0.02350575104355812,
    0.018773145973682404,
    -0.03111223690211773,
    -0.009736871346831322,
    -0.005036436021327972,
    -0.0007113206665962934,
    0.0279666967689991,
    -0.022218940779566765,
    -0.021689917892217636,
    -0.023305581882596016,
    -0.015327351167798042,
    -0.006201715208590031,
    0.004893457051366568,
    -0.014562414027750492,
    0.03111223690211773,
    0.002968602115288377,
    -0.00703456811606884,
    0.004897031467407942,
    0.010323085822165012,
    -0.003272432368248701,
    -0.04215021803975105,
    -0.00684869522228837,
    -0.02499273419380188,
    0.007706569507718086,
    -0.032227471470832825,
    0.015112883411347866,
    -0.023791709914803505,
    -0.024620987474918365,
    -0.009386572986841202,
    -0.016371099278330803,
    -0.017200376838445663,
    -0.0009499168954789639,
    0.012532111257314682,
    0.03162696212530136,
    -0.01068053301423788,
    0.0218471959233284,
    -0.013475772924721241,
    -0.021346768364310265,
    -0.0009257891797460616,
    -0.0023806008975952864,
    -0.0005276819574646652,
    0.004868435673415661,
    -0.006648524664342403,
    0.011502662673592567,
    -0.013211262412369251,
    0.023791709914803505,
    0.010752023197710514,
    0.007806655019521713,
    -0.01774369738996029,
    -0.008635933510959148,
    0.010573298670351505,
    0.011538407765328884,
    -0.01544173527508974,
    -3.325937723275274e-05,
    -0.02494983933866024,
    0.02197587676346302,
    0.004446647595614195,
    -0.0038389868568629026,
    0.02241911180317402,
    -0.02656550332903862,
    0.002727324841544032,
    -0.03957659378647804,
    0.00516511732712388,
    0.024192051962018013,
    -0.02433503046631813,
    -0.001604939578101039,
    -0.029510870575904846,
    -0.009486658498644829,
    0.006459077354520559,
    0.01568479835987091,
    0.021475449204444885,
    0.0007510866853408515,
    -0.008778912015259266,
    -0.02301962301135063,
    -0.035115648061037064,
    -0.0432654544711113,
    0.014698243699967861,
    -0.008871848694980145,
    -0.026980143040418625,
    -0.002725537633523345,
    -0.01821552775800228,
    0.0028988998383283615,
    -0.026007885113358498,
    -0.003122304566204548,
    0.006870142184197903,
    -0.0013493645237758756,
    -0.00891474261879921,
    0.012074578553438187,
    0.0014360456261783838,
    -0.003846135688945651,
    0.04094919189810753,
    -0.023877497762441635,
    -0.033399902284145355,
    0.015656203031539917,
    0.02110370434820652,
    0.0038961784448474646,
    0.026022182777523994,
    -0.021118002012372017,
    0.0013136197812855244,
    -0.0011956620728597045,
    0.0275234617292881,
    0.0006384907173924148,
    0.03717454522848129,
    0.005851416848599911,
    0.010730575770139694,
    -0.0014190668007358909,
    0.02420634962618351,
    2.216593884440954e-06,
    0.06840116530656815,
    0.009379424154758453,
    0.011960195377469063,
    0.004096349235624075,
    -0.021003618836402893,
    -0.005969374440610409,
    -0.030025595799088478,
    0.016242416575551033,
    -0.04383736848831177,
    0.0009146189549937844,
    0.0029221337754279375,
    0.01953093521296978,
    -0.016842929646372795,
    -0.010945044457912445,
    -0.017271867021918297,
    0.015284458175301552,
    0.019101997837424278,
    -0.0011634918628260493,
    0.009322232566773891,
    -0.013082580640912056,
    -0.01948804035782814,
    0.019116295501589775,
    -0.006448354106396437,
    0.006516268942505121,
    0.0009606403182260692,
    -0.0011161300353705883,
    -0.013461475260555744,
    0.024192051962018013,
    0.013461475260555744,
    0.014347945339977741,
    -0.03814680501818657,
    -0.005072181113064289,
    0.01315407082438469,
    -0.0009525977657176554,
    -0.004024859517812729,
    0.016113735735416412,
    -0.023234091699123383,
    0.026236651465296745,
    -0.03294236585497856,
    0.04029148817062378,
    -0.027409078553318977,
    0.007577888201922178,
    0.023062516003847122,
    0.018158337101340294,
    -0.023105410858988762,
    -0.009536701254546642,
    -0.006845120806246996,
    0.04772640019655228,
    0.0025861330796033144,
    -0.02106081135571003,
    -0.036945778876543045,
    0.0065198433585464954,
    0.00847865641117096,
    0.01830131560564041,
    0.027866611257195473,
    0.03700297325849533,
    0.0019874083809554577,
    0.007224015425890684,
    0.031055044382810593,
    0.03228466585278511,
    0.017028801143169403,
    0.015284458175301552,
    -0.015541819855570793,
    0.0196596160531044,
    0.007856697775423527,
    0.026022182777523994,
    -0.02660839632153511,
    0.0034726031590253115,
    -0.03574475646018982,
    0.01997417025268078,
    -0.019244976341724396,
    0.002972176531329751,
    -0.022490600124001503,
    -0.01997417025268078,
    -0.02879597619175911,
    0.030969256535172462,
    0.009858404286205769,
    -0.015212967991828918,
    0.022476302459836006,
    0.016156630590558052,
    -0.0010392788099125028,
    -0.013018240220844746,
    -0.02454949915409088,
    0.028152570128440857,
    0.025235798209905624,
    -0.00891474261879921,
    0.009751169942319393,
    -0.01634250208735466,
    -0.012489218264818192,
    0.0023251965176314116,
    0.011002236045897007,
    0.002580771455541253,
    -0.008564443327486515,
    0.011760025285184383,
    0.02394898608326912,
    -0.011953046545386314,
    0.0014959180261939764,
    0.03783224895596504,
    -0.024435115978121758,
    0.026193758472800255,
    -0.0018337060464546084,
    0.0020535362418740988,
    0.006323247216641903,
    -0.0123462388291955,
    0.025750523433089256,
    0.034143391996622086,
    0.031169427558779716,
    -0.02176140807569027,
    -0.03285657986998558,
    -0.012038834393024445,
    -0.0009785126894712448,
    0.0008618954452686012,
    -0.025135712698101997,
    0.0023806008975952864,
    -0.02849571965634823,
    -0.00997993629425764,
    -0.01717178151011467,
    0.007585037499666214,
    -0.0009794062934815884,
    0.024449413642287254,
    0.001912344479933381,
    -0.011195257306098938,
    -0.016742844134569168,
    -0.006526992656290531,
    0.05381730571389198,
    0.019602425396442413,
    0.04618222638964653,
    0.012589302845299244,
    0.009250743314623833,
    -0.05041440576314926,
    -0.008986231870949268,
    -0.03437215834856033,
    0.02669418416917324,
    0.004500264767557383,
    -0.0006049799849279225,
    -0.011223853565752506,
    -0.013325645588338375,
    0.017071695998311043,
    -0.0023555795196443796,
    0.019116295501589775,
    0.0038282633759081364,
    -0.0209750235080719,
    0.0017470249440521002,
    -0.004771925043314695,
    -0.02612226828932762,
    -0.016628460958600044,
    -0.0027988143265247345,
    0.01256070751696825,
    0.00037286250153556466,
    0.00919355172663927,
    0.024020476266741753,
    0.005014989525079727,
    0.024763967841863632,
    0.026293842121958733,
    -0.010108617134392262,
    -0.008557294495403767,
    -0.01585637405514717,
    0.005683416500687599,
    0.03460092470049858,
    -0.04686852544546127,
    0.025064222514629364,
    0.0075349947437644005,
    0.008936189115047455,
    0.016199523583054543,
    0.01695731282234192,
    0.03600211814045906,
    0.015827778726816177,
    -0.009858404286205769,
    -0.003760348306968808,
    -0.005426053889095783,
    0.001620131079107523,
    -0.0003190219576936215,
    0.018973316997289658,
    -0.007334824185818434,
    0.0062875025905668736,
    -0.006755759008228779,
    0.01782948523759842,
    -0.037460505962371826,
    0.0008779806084930897,
    0.00954385008662939,
    0.0074063134379684925,
    0.026365332305431366,
    0.0066199288703501225,
    0.006115927826613188,
    -0.04129234328866005,
    0.0036531141959130764,
    -0.019673913717269897,
    -0.012617899104952812,
    -0.012096025981009007,
    -0.0034922626800835133,
    -0.016013650223612785,
    -0.013182666152715683,
    -0.01306828297674656,
    -0.031483981758356094,
    -0.0192306786775589,
    -0.00036839439417235553,
    0.0013583007967099547,
    -0.027023036032915115,
    0.005182989872992039,
    0.015127181075513363,
    0.004468094557523727,
    0.009086317382752895,
    -0.0013082580408081412,
    0.031312406063079834,
    0.001033023465424776,
    0.001061619259417057,
    -0.037031568586826324,
    -0.004947074223309755,
    -0.02460668981075287,
    0.015298755839467049,
    0.009293636307120323,
    0.004825542215257883,
    0.009958488866686821,
    0.025049924850463867,
    0.02284804917871952,
    -0.006133800372481346,
    -0.014033391140401363,
    0.010659086517989635,
    0.009050572291016579,
    0.0052366070449352264,
    0.02843852899968624,
    -0.014841223135590553,
    0.0077566122636199,
    0.021561237052083015,
    -0.022090259939432144,
    0.010516107082366943,
    0.006076608784496784,
    0.011023682542145252,
    -0.026937248185276985,
    -0.00598724652081728,
    0.015098584815859795,
    0.00685941893607378,
    -0.007706569507718086,
    -0.012746579945087433,
    -0.009994233958423138,
    0.048126738518476486,
    -0.0022983879316598177,
    -0.003846135688945651,
    0.0024109838996082544,
    0.03054031915962696,
    0.025278691202402115,
    -0.003091921331360936,
    0.030168574303388596,
    -0.0072097172960639,
    -0.03136959671974182,
    0.007828101515769958,
    -0.0002828303840942681,
    0.003999838139861822,
    0.01918778568506241,
    -0.006773631554096937,
    0.02123238518834114,
    -0.021775705739855766,
    -0.00617311941459775,
    -0.0003424794413149357,
    0.03254202753305435,
    0.033399902284145355,
    -0.00339217740111053,
    0.006148098036646843,
    -0.004678988829255104,
    0.014061987400054932,
    -0.0015200458001345396,
    -0.021432556211948395,
    0.004768350627273321,
    -0.004364434629678726,
    0.014519520103931427,
    0.001314513385295868,
    0.0159421619027853,
    -0.005704862996935844,
    -0.031055044382810593,
    -0.006770056672394276,
    -0.01874455064535141,
    -0.027852313593029976,
    0.027251802384853363,
    0.009493807330727577,
    0.031741343438625336,
    0.002668346045538783,
    0.004653967451304197,
    -0.016671353951096535,
    -0.007835250347852707,
    -0.023491453379392624,
    -0.017457738518714905,
    -0.01599935255944729,
    0.0032885177060961723,
    0.010980789549648762,
    0.01844429410994053,
    2.4141672838595696e-05,
    0.01391900796443224,
    0.02486405335366726,
    0.0034386455081403255,
    0.008929040282964706,
    -0.012160366401076317,
    0.0024163455236703157,
    -0.00521158566698432,
    -0.026236651465296745,
    -0.017486335709691048,
    -0.010909299366176128,
    0.008006825111806393,
    0.000999065930955112,
    -0.027466271072626114,
    -0.011080874130129814,
    0.03125521540641785,
    0.010065723210573196,
    0.02770933508872986,
    -0.008800359442830086,
    -0.011502662673592567,
    -0.005283074919134378,
    -0.002301962347701192,
    0.01599935255944729,
    0.04483822360634804,
    -0.026165161281824112,
    -0.00757073936983943,
    0.027823718264698982,
    -0.003365368815138936,
    0.013947604224085808,
    0.0030186446383595467,
    -0.007835250347852707,
    -0.013518666848540306,
    0.01782948523759842,
    0.025764821097254753,
    0.004925627261400223,
    -0.002511069178581238,
    0.007198994047939777,
    -0.03242764249444008,
    -0.020202936604619026,
    -0.03251343220472336,
    0.010373128578066826,
    0.011109470389783382,
    -0.013961901888251305,
    0.013075431808829308,
    -0.018429996445775032,
    0.022504897788167,
    0.012489218264818192,
    0.000628660898655653,
    0.02813827246427536,
    -0.014347945339977741,
    -0.0037103057838976383,
    -0.0056762672029435635,
    -0.024763967841863632,
    -0.025278691202402115,
    0.028695890679955482,
    0.00797108095139265,
    0.0010169383604079485,
    -0.003040091600269079,
    -0.019287871196866035,
    -0.03411479666829109,
    0.008228442631661892,
    0.003508347785100341,
    0.03299956023693085,
    0.01621382124722004,
    0.027766527608036995,
    0.01463390327990055,
    0.022490600124001503,
    -0.007349121849983931,
    -0.0016648119781166315,
    -0.011302491649985313,
    0.03045453317463398,
    0.0273089949041605,
    0.012567856349050999,
    -0.007341973017901182,
    -0.01774369738996029,
    0.014998500235378742,
    -0.011130916886031628,
    -0.03514424338936806,
    -0.019259274005889893,
    0.03708875924348831,
    0.001439620042219758,
    0.027065929025411606,
    -0.0238203052431345,
    -0.004625371657311916,
    -0.015584713779389858,
    0.026079373434185982,
    -0.0036549014039337635,
    -0.009808361530303955,
    0.0038103910628706217,
    0.006505545694380999,
    -0.013618752360343933,
    0.011302491649985313,
    0.0010365978814661503,
    -0.00033153261756524444,
    -0.0072597600519657135,
    -0.024520903825759888,
    0.010559001006186008,
    -0.036373864859342575,
    -0.00387830613180995,
    -0.004757626913487911,
    -0.0015164712676778436,
    0.0384613573551178,
    -0.010494660586118698,
    -0.026665588840842247,
    0.032656408846378326,
    0.017228972166776657,
    -0.015613310039043427,
    -0.0023251965176314116,
    -0.008099761791527271,
    0.03345709294080734,
    0.0048326910473406315,
    -0.004475243389606476,
    -0.012053132057189941,
    -0.0005875544156879187,
    0.012303344905376434,
    0.001002640463411808,
    -0.006258906796574593,
    -0.014619605615735054,
    -0.001437832834199071,
    -0.012324792332947254,
    0.024706775322556496,
    0.008950486779212952,
    -0.02922491356730461,
    -0.00996563769876957,
    -0.009315083734691143,
    -0.004546733107417822,
    -0.02620805613696575,
    -0.025049924850463867,
    0.02076055482029915,
    -0.01542743667960167,
    -0.006780780386179686,
    0.016585566103458405,
    -0.0052366070449352264,
    0.0010437469463795424,
    0.023920390754938126,
    -0.010058574378490448,
    0.008214144967496395,
    0.03883310407400131,
    -0.03011138364672661,
    0.026808567345142365,
    -0.002312685828655958,
    0.01581348106265068,
    -0.035115648061037064,
    0.003603071440011263,
    -0.007163249421864748,
    -0.015370245091617107,
    0.03854714706540108,
    -0.03151257708668709,
    -0.026851460337638855,
    -0.014698243699967861,
    0.0015960034215822816,
    0.023691624402999878,
    -0.0008601081790402532,
    -0.017800888046622276,
    -0.013297049328684807,
    0.01978829689323902,
    0.03171274811029434,
    -0.015084287151694298,
    -0.02996840327978134,
    0.020646171644330025,
    -0.02259068563580513,
    -0.01983119174838066,
    0.0026826439425349236,
    -0.013182666152715683,
    0.020431702956557274,
    -0.009150657802820206,
    0.013161219656467438,
    0.00023926646099425852,
    -0.015842076390981674,
    -0.04987108334898949,
    -0.004889882635325193,
    0.005905033554881811,
    -0.007527845911681652,
    0.006888014730066061,
    -0.006058736238628626,
    0.007685122545808554,
    -0.004929202143102884,
    0.024578094482421875,
    -0.003526220330968499,
    0.003696007886901498,
    0.00563694816082716,
    0.024020476266741753,
    0.0017255780985578895,
    -0.012131770141422749,
    -0.023105410858988762,
    -0.012003089301288128,
    -0.0354016050696373,
    -0.01687152497470379,
    -0.028367038816213608,
    -0.03237045183777809,
    -0.0045896265655756,
    0.018901826813817024,
    0.03514424338936806,
    -0.022919537499547005,
    -0.02835274115204811,
    0.004300094209611416,
    -0.034801095724105835,
    -0.004003412555903196,
    -0.032885175198316574,
    0.0292821042239666,
    0.009872701950371265,
    0.019688211381435394,
    0.00714537687599659,
    0.008643082343041897,
    -0.020646171644330025,
    0.03219887614250183,
    -0.046210821717977524,
    0.004475243389606476,
    0.008335676975548267,
    -0.00048344783135689795,
    -0.004132093861699104,
    -0.016371099278330803,
    -0.01987408474087715,
    -0.017586419358849525,
    -0.004696860909461975,
    -0.006627077702432871,
    0.010930746793746948,
    0.022662175819277763,
    -0.0009901297744363546,
    0.0011920876568183303,
    -0.010587597265839577,
    -0.004121370613574982,
    -0.01142402458935976,
    0.0011384704848751426,
    0.007492100819945335,
    -0.021432556211948395,
    -0.004157115239650011,
    0.021604130044579506,
    0.016614163294434547,
    -0.010609043762087822,
    -0.020731959491968155,
    0.0030061339493840933,
    -0.009958488866686821,
    0.006187417544424534,
    -0.008371422067284584,
    -0.015613310039043427,
    -0.02486405335366726,
    -0.00963678676635027,
    0.0034386455081403255,
    0.003906901925802231,
    0.023605836555361748,
    0.01642828993499279,
    -0.013490071520209312,
    0.00795678235590458,
    -0.008700273931026459,
    0.0019641744438558817,
    -0.03797522932291031,
    -0.0038068166468292475,
    0.0045574563555419445,
    -0.0008131932117976248,
    -0.009272189810872078,
    -0.017529228702187538,
    0.039347827434539795,
    -0.013225560076534748,
    -0.0020535362418740988,
    0.010537554509937763,
    -0.011745726689696312,
    -0.03788944333791733,
    -0.012746579945087433,
    0.02788091078400612,
    -0.0292821042239666,
    0.004171412903815508,
    0.012331941165030003,
    -0.015870671719312668,
    0.009443764574825764,
    -0.01225330214947462,
    -0.021875791251659393,
    -0.0017505994765087962,
    0.0025003456976264715,
    -0.017143184319138527,
    -0.01206028088927269,
    -0.03986255079507828,
    0.006244609132409096,
    -0.002003493718802929,
    -0.021332470700144768,
    0.014283604919910431,
    0.16745702922344208,
    0.001223364262841642,
    0.0345151387155056,
    0.005082904361188412,
    0.007978229783475399,
    0.01033023465424776,
    0.005905033554881811,
    -0.013961901888251305,
    -0.028824571520090103,
    0.0010401724139228463,
    -0.0031419640872627497,
    -0.018973316997289658,
    0.00920070055872202,
    0.004621797241270542,
    0.0070131211541593075,
    -0.0006045331829227507,
    -0.012224706821143627,
    -0.0314553864300251,
    -0.04206442832946777,
    -0.0012260451912879944,
    0.0059943958185613155,
    -0.01599935255944729,
    -0.011180959641933441,
    -0.027280397713184357,
    0.010687681846320629,
    -0.010816363617777824,
    -0.0070417169481515884,
    0.0021357492078095675,
    -0.0004807669611182064,
    -0.0038032419979572296,
    -0.004836265463382006,
    0.00919355172663927,
    -0.004346562549471855,
    0.0010491085704416037,
    0.0034136243630200624,
    -0.009929893538355827,
    0.026107970625162125,
    -0.0011545555898919702,
    0.017843782901763916,
    0.007349121849983931,
    -0.020303022116422653,
    -0.022218940779566765,
    0.004335838835686445,
    -0.02490694634616375,
    -0.019588125869631767,
    0.01306828297674656,
    0.011960195377469063,
    0.02023153193295002,
    -0.025407372042536736,
    0.03763207793235779,
    -0.015842076390981674,
    -0.0028935379814356565,
    0.04992827773094177,
    -0.024706775322556496,
    -0.024678179994225502,
    -0.01634250208735466,
    0.010737724602222443,
    0.01840140111744404,
    0.02503562718629837,
    0.01778659038245678,
    -0.016070842742919922,
    0.0414925143122673,
    0.0007515334873460233,
    0.008707422763109207,
    -0.0380038246512413,
    0.012903857044875622,
    -0.005754905752837658,
    -0.016499780118465424,
    0.018773145973682404,
    -0.002092855516821146,
    0.0013797476422041655,
    -0.009944191202521324,
    -0.00035811777343042195,
    -0.0038282633759081364,
    -0.013161219656467438,
    -0.03076908551156521,
    0.013947604224085808,
    0.008428613655269146,
    -0.0020195788238197565,
    0.01400479581207037,
    -0.025893501937389374,
    -0.017014503479003906,
    -0.03279938921332359,
    0.024706775322556496,
    -0.0123462388291955,
    0.005115074571222067,
    0.017843782901763916,
    -0.025536054745316505,
    0.00841431599110365,
    -0.005075755529105663,
    -0.014998500235378742,
    -0.018687358126044273,
    0.01148836500942707,
    0.002666558837518096,
    0.012324792332947254,
    0.030254362151026726,
    -0.015170074999332428,
    0.037775058299303055,
    -0.04277932643890381,
    0.005983672104775906,
    -0.021118002012372017,
    0.03691718354821205,
    0.008028272539377213,
    0.014869818463921547,
    -0.009250743314623833,
    -0.0002470856416039169,
    -0.0009052359382621944,
    0.019588125869631767,
    0.009286487475037575,
    -0.027065929025411606,
    0.015027095563709736,
    -0.04337983578443527,
    0.0019874083809554577,
    0.013389986008405685,
    0.009293636307120323,
    0.009021976962685585,
    -0.017228972166776657,
    -0.006873716600239277,
    -0.02333417721092701,
    0.008435762487351894,
    0.023691624402999878,
    -0.020374510437250137,
    -0.014376540668308735,
    -0.0004879159387201071,
    -0.01398334838449955,
    0.009858404286205769,
    -0.037203144282102585,
    0.018244123086333275,
    -0.0069952490739524364,
    0.02080344781279564,
    0.023877497762441635,
    -0.014898414723575115,
    0.01987408474087715,
    0.029825424775481224,
    -0.008085464127361774,
    -0.029339296743273735,
    -0.02473537065088749,
    -0.013818922452628613,
    -0.004543158691376448,
    -0.011903003789484501,
    -0.007492100819945335,
    -0.021132299676537514,
    0.01398334838449955,
    -0.013811773620545864,
    0.02433503046631813,
    -0.008378570899367332,
    0.005290223751217127,
    -0.029396487399935722,
    0.028867464512586594,
    -0.001696088700555265,
    0.007277632597833872,
    -0.01804395392537117,
    0.02647971548140049,
    -0.01293245330452919,
    0.0006746822618879378,
    -0.024006178602576256,
    -0.010895001702010632,
    -0.018415698781609535,
    -0.011538407765328884,
    -0.010651937685906887,
    -0.04177847132086754,
    0.006048012990504503,
    -0.0168143343180418,
    0.010666235350072384,
    -0.034629520028829575,
    -0.006430481560528278,
    -0.18209809064865112,
    -0.0017327270470559597,
    0.029310699552297592,
    -0.016571268439292908,
    0.007728016469627619,
    0.0038068166468292475,
    0.009851254522800446,
    -0.007985378615558147,
    0.011152364313602448,
    -0.011359683237969875,
    0.025578947737812996,
    0.015370245091617107,
    -0.016900120303034782,
    -0.0042929453775286674,
    0.01857297495007515,
    -0.02101791650056839,
    0.008049719035625458,
    0.020174341276288033,
    0.02760924957692623,
    -0.00015649500710424036,
    0.02699444070458412,
    -0.024106264114379883,
    0.016328204423189163,
    -0.0032849430572241545,
    0.008950486779212952,
    0.0004879159387201071,
    -0.015956459566950798,
    -0.030054191127419472,
    -0.01494130864739418,
    -0.02210455760359764,
    -0.02953946590423584,
    0.01651407778263092,
    -0.008843252435326576,
    0.0009275764459744096,
    0.023076815530657768,
    -0.006333970930427313,
    0.02590779960155487,
    -0.028681593015789986,
    0.004246477037668228,
    0.023791709914803505,
    0.013776029460132122,
    0.019673913717269897,
    0.003365368815138936,
    -0.005329543258994818,
    -0.016271013766527176,
    0.020288724452257156,
    0.02376311458647251,
    -0.013826072216033936,
    5.420357047114521e-05,
    -0.014169221743941307,
    0.026536908000707626,
    -0.026093672960996628,
    -0.010130063630640507,
    0.008492954075336456,
    0.009522403590381145,
    -0.029510870575904846,
    0.0016094077145680785,
    -0.0024360050447285175,
    -0.001088427845388651,
    -0.033056750893592834,
    -0.014683946035802364,
    -0.014683946035802364,
    -0.009357977658510208,
    0.005222308915108442,
    -0.020417405292391777,
    -0.010323085822165012,
    0.0021750684827566147,
    -0.00014007477147970349,
    -0.033886030316352844,
    0.011030832305550575,
    0.004997116979211569,
    0.03551599010825157,
    0.03783224895596504,
    0.0046754139475524426,
    0.020603276789188385,
    0.017586419358849525,
    0.0038068166468292475,
    0.03591633215546608,
    0.019645318388938904,
    -0.009150657802820206,
    -0.019016209989786148,
    0.032141685485839844,
    -0.0011768961558118463,
    0.0318843238055706,
    0.039433617144823074,
    0.010973640717566013,
    0.0024681754875928164,
    -0.0029525167774409056,
    -0.01033738348633051,
    -0.024492306634783745,
    0.018515784293413162,
    -0.04154970496892929,
    0.015842076390981674,
    -0.009400870651006699,
    0.03345709294080734,
    0.022390514612197876,
    -0.0036298800259828568,
    -0.009729722514748573,
    0.018901826813817024,
    -0.018072549253702164,
    0.006569886114448309,
    0.011345385573804379,
    -0.000833746453281492,
    -0.010294489562511444,
    0.04975670203566551,
    0.009057721123099327,
    -0.01042317133396864,
    0.010287340730428696,
    0.019688211381435394,
    0.009593892842531204,
    0.0008520656265318394,
    0.004468094557523727,
    0.0016058331821113825,
    -0.005794225260615349,
    -0.0023823881056159735,
    0.007224015425890684,
    0.0229338351637125,
    -0.00695950398221612,
    0.005826395470649004,
    -0.024535201489925385,
    0.03883310407400131,
    0.004360860213637352,
    -0.03946221247315407,
    0.020331617444753647,
    0.0036227309610694647,
    -0.01564190536737442,
    -0.11066576838493347,
    -0.05012844502925873,
    0.00473975483328104,
    0.01498420163989067,
    -0.024806860834360123,
    -0.02376311458647251,
    -0.011953046545386314,
    0.016070842742919922,
    -0.020774852484464645,
    0.01585637405514717,
    -0.003728178096935153,
    0.0019284295849502087,
    -0.003277794225141406,
    0.006526992656290531,
    -0.026150863617658615,
    -0.015027095563709736,
    -0.04246477037668228,
    0.0010643000714480877,
    -0.028424229472875595,
    0.019116295501589775,
    -0.011595599353313446,
    -0.013683092780411243,
    0.0045896265655756,
    0.00812835805118084,
    0.008349975571036339,
    0.02214745059609413,
    -0.03420058265328407,
    0.0013547262642532587,
    0.0201028510928154,
    0.02437792345881462,
    0.019130593165755272,
    -0.015613310039043427,
    0.010659086517989635,
    -0.0037424759939312935,
    0.010937895625829697,
    0.024363625794649124,
    -0.03345709294080734,
    -0.024449413642287254,
    0.027909506112337112,
    -0.012961048632860184,
    -0.008793209679424763,
    0.001259109005331993,
    0.02626524679362774,
    -0.003481539199128747,
    -0.006176693830639124,
    -0.008886146359145641,
    -0.02233332395553589,
    0.02429213561117649,
    0.001878386945463717,
    -0.023234091699123383,
    -0.01371883787214756,
    -0.01168853510171175,
    -0.004089199937880039,
    -0.016285311430692673,
    0.010687681846320629,
    -0.01376173086464405,
    0.0004740648437291384,
    -0.01385466754436493,
    -0.004993542563170195,
    -0.002611154457554221,
    0.0069952490739524364,
    -0.000619277881924063,
    0.01227474957704544,
    0.04114936292171478,
    0.01542743667960167,
    -0.004393030423671007,
    0.00010382734762970358,
    0.005268777254968882,
    0.03279938921332359,
    -0.008028272539377213,
    -0.017900973558425903,
    0.03920485079288483,
    -0.01369739044457674,
    0.012639345601201057,
    -0.004275072831660509,
    -0.02067476697266102,
    0.0021965152118355036,
    -0.017286164686083794,
    0.011917301453649998,
    -0.020345915108919144,
    -0.029253508895635605,
    -0.006880865432322025,
    0.004403754137456417,
    -0.008557294495403767,
    0.0008949593175202608,
    0.011531258001923561,
    0.005497543606907129,
    -5.453867925098166e-05,
    0.029825424775481224,
    -0.03900467976927757,
    0.025092819705605507,
    -0.010122914798557758,
    -0.0005401926464401186,
    -0.014047689735889435,
    0.013861816376447678,
    -0.007892441935837269,
    -0.007073887158185244,
    -0.0054617989808321,
    -0.00623745983466506,
    0.015198670327663422,
    -0.060623105615377426,
    -0.015741990879178047,
    -0.0773230567574501,
    0.019373657181859016,
    -0.009493807330727577,
    -0.01672854647040367,
    -0.007341973017901182,
    0.01369739044457674,
    0.003871157066896558,
    -0.04909899830818176,
    0.024020476266741753,
    -0.013833221048116684,
    -0.02775222808122635,
    0.004257200285792351,
    -0.012038834393024445,
    -0.004167838487774134,
    -0.009250743314623833,
    -0.0024699626956135035,
    0.02722320705652237,
    -0.028367038816213608,
    0.06565596908330917,
    0.01840140111744404,
    -0.00832137931138277,
    0.004525286145508289,
    0.01978829689323902,
    0.003788944100961089,
    -0.015212967991828918,
    -0.018844636157155037,
    -0.013833221048116684,
    0.009408019483089447,
    0.001726471702568233,
    -0.008621634915471077,
    -0.011738577857613564,
    -0.018973316997289658,
    -0.0007233844953589141,
    0.03162696212530136,
    0.024978436529636383,
    0.006555588450282812,
    0.02241911180317402,
    -0.007770909927785397,
    0.011359683237969875,
    0.013883263804018497,
    -0.029739636927843094,
    -0.023834602907299995,
    0.03154117241501808,
    -0.003431496676057577,
    -0.005118648987263441,
    -0.013768880628049374,
    0.013247006572782993,
    0.011138065718114376,
    0.03139819577336311,
    -0.0004986393614672124,
    0.03623088449239731,
    0.015370245091617107,
    -0.013990498147904873,
    -0.016928717494010925,
    0.0033689432311803102,
    -0.03094066120684147,
    0.017529228702187538,
    -0.008099761791527271,
    -4.632855416275561e-05,
    -0.001118810847401619,
    0.01700020581483841,
    -0.0005227670772001147,
    -0.005897884722799063,
    0.023305581882596016,
    -0.020288724452257156,
    -0.011323939077556133,
    -0.033971816301345825,
    -0.029510870575904846,
    0.015341649763286114,
    0.0005647671641781926,
    -0.03534441441297531,
    -0.003849710337817669,
    0.023148303851485252,
    0.010530405677855015,
    0.043408431112766266,
    -0.0005741501227021217,
    -0.024406520649790764,
    0.0005911288899369538,
    -0.013268454000353813,
    0.04709729179739952,
    0.03834697604179382,
    0.008929040282964706,
    -0.01083781011402607,
    0.004468094557523727,
    0.023934688419103622,
    -0.018730252981185913,
    -0.0362594798207283,
    0.013168368488550186,
    -0.00867167767137289,
    0.02660839632153511,
    0.008621634915471077,
    0.0218471959233284,
    -0.02612226828932762,
    0.006501971278339624,
    -0.005897884722799063,
    -0.0031884321942925453,
    -0.00397839117795229,
    -0.003452943405136466,
    0.014283604919910431,
    0.004257200285792351,
    0.007670824881643057,
    -0.008164102211594582,
    0.01591356471180916,
    -0.01328275166451931,
    -0.01691441796720028,
    0.014540966600179672,
    -0.029997000470757484,
    -0.016585566103458405,
    -0.012331941165030003,
    0.033800240606069565,
    0.008428613655269146,
    -0.020303022116422653,
    0.0007533207535743713,
    0.0086287846788764,
    -0.0011420450173318386,
    0.03279938921332359,
    0.014433732256293297,
    -0.016528375446796417,
    -0.024263540282845497,
    -0.0007667250465601683,
    0.008986231870949268,
    0.00732052605599165,
    0.041092172265052795,
    -0.011366833001375198,
    0.011373981833457947,
    0.023963285610079765,
    0.020860640332102776,
    -0.03282798454165459,
    0.007685122545808554,
    -0.011316790245473385,
    -0.02106081135571003,
    -0.0017863442189991474,
    -0.03334270790219307,
    -0.030740490183234215,
    1.3561365221903543e-06,
    -0.0012108535738661885,
    0.01514147873967886,
    -0.00184621661901474,
    0.009114912711083889,
    0.07577888667583466,
    0.01369739044457674,
    -0.011724280193448067,
    -0.01804395392537117,
    0.012903857044875622,
    0.013926156796514988,
    0.011516960337758064,
    0.01514147873967886,
    0.009157806634902954,
    -0.002938218880444765,
    -0.0009910233784466982,
    -0.014512371271848679,
    -0.039176251739263535,
    0.010752023197710514,
    -0.027537761256098747,
    -0.011345385573804379,
    -0.02573622390627861,
    0.02399188093841076,
    -0.016585566103458405,
    0.005847841966897249,
    0.01678573712706566,
    0.01717178151011467,
    -0.02180430106818676,
    0.007163249421864748,
    -0.04272213205695152,
    0.000681831210386008,
    0.013118325732648373,
    0.0025200052186846733,
    -0.010308788157999516,
    -0.04269353672862053,
    0.024020476266741753,
    0.03225606679916382,
    -0.02953946590423584,
    -0.0033528581261634827,
    0.004611073527485132,
    -0.009586744010448456,
    -0.011381130665540695,
    -0.029510870575904846,
    0.027123121544718742,
    0.004160689655691385,
    -0.006426907144486904,
    -0.021832896396517754,
    -0.029596658423542976,
    -0.020331617444753647,
    -0.004793372005224228,
    -0.01197449304163456,
    0.0018354932544752955,
    0.006880865432322025,
    -0.07360560446977615
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# jupyter packaging\n\ntools to help build and install jupyter python packages that require a pre-build step that may include javascript build steps.\n\n## install\n\n`pip install jupyter-packaging`\n\n## usage\n\nthere are three ways to use `jupyter-packaging` in another package.\nin general, you should not depend on `jupyter_packaging` as a runtime dependency, only as a build dependency.\n\n### as a build requirement\n\nuse a `pyproject.toml` file as outlined in [pep-518](https://www.python.org/dev/peps/pep-0518/).\nan example:\n\n```toml\n[build-system]\nrequires = [\"jupyter_packaging>=0.10,<2\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\nbelow is an example `setup.py` using the above config.\nit assumes the rest of your metadata is in [`setup.cfg`](https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html).\nwe wrap the import in a try/catch to allow the file to be run without `jupyter_packaging`\nso that `python setup.py` can be run directly when not building.\n\n```py\nfrom setuptools import setup\n\ntry:\n    from jupyter_packaging import wrap_installers, npm_builder\n    builder = npm_builder()\n    cmdclass = wrap_installers(pre_develop=builder, pre_dist=builder)\nexcept importerror:\n    cmdclass = {}\n\nsetup(cmdclass=cmdclass))\n```\n\n### as a build backend\n\nuse the `jupyter_packaging` build backend.\nthe pre-build command is specified as metadata in `pyproject.toml`:\n\n```toml\n[build-system]\nrequires = [\"jupyter_packaging>=0.10,<2\"]\nbuild-backend = \"jupyter_packaging.build_api\"\n\n[tool.jupyter-packaging.builder]\nfactory = \"jupyter_packaging.npm_builder\"\n\n[tool.jupyter-packaging.build-args]\nbuild_cmd = \"build:src\"\n```\n\nthe corresponding `setup.py` would be greatly simplified:\n\n```py\nfrom setuptools import setup\nsetup()\n```\n\nthe `tool.jupyter-packaging.builder` section expects a `func` value that points to an importable\nmodule and a function with dot separators.  if not given, no pre-build function will run.\n\nthe optional `tool.jupyter-packaging.build-args` sections accepts a dict of keyword arguments to\ngive to the pre-build command.\n\nthe build backend does not handle the `develop` command (`pip install -e .`).\nif desired, you can wrap just that command:\n\n```py\nimport setuptools\n\ntry:\n    from jupyter_packaging import wrap_installers, npm_builder\n    builder = npm_builder(build_cmd=\"build:dev\")\n    cmdclass = wrap_installers(pre_develop=builder)\nexcept importerror:\n    cmdclass = {}\n\nsetup(cmdclass=cmdclass))\n```\n\nthe optional `tool.jupyter-packaging.options` section accepts the following options:\n\n- `skip-if-exists`: a list of local files whose presence causes the prebuild to skip\n- `ensured-targets`: a list of local file paths that should exist when the dist commands are run\n\n### as a vendored file\n\nvendor `setupbase.py` locally alongside `setup.py` and import the module directly.\n\n```py\nimport setuptools\nfrom setupbase import wrap_installers, npm_builder\nfunc = npm_builder()\ncmdclass = wrap_installers(post_develop=func, pre_dist=func)\nsetup(cmdclass=cmdclass)\n```\n\n## usage notes\n\n- this package does not work with the deprecated `python setup.py bdist_wheel` or `python setup.py sdist` commands, pypa recommends using the [build](https://pypa-build.readthedocs.io/en/latest/index.html) package (`pip install build && python -m build .`).\n- we recommend using `include_package_data=true` and `manifest.in` to control the assets included in the [package](https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html).\n- tools like [`check-manifest`](https://github.com/mgedmin/check-manifest) or [`manifix`](https://github.com/vidartf/manifix) can be used to ensure the desired assets are included.\n- simple uses of `data_files` can be handled in `setup.cfg` or in `setup.py`.  if recursive directories are needed use `get_data_files()` from this package.\n- unfortunately `data_files` are not supported in `develop` mode (a limitation of `setuptools`).  you can work around it by doing a full install (`pip install .`) before the develop install (`pip install -e .`), or by adding a script to push the data files to `sys.base_prefix`.\n\n## development install\n\n```bash\ngit clone https://github.com/jupyter/jupyter-packaging.git\ncd jupyter-packaging\npip install -e .[test]\npre-commit install\n```\n\nyou can test changes locally by creating a `pyproject.toml` with the following, replacing the local path to the git checkout:\n\n```toml\n[build-system]\nrequires = [\"jupyter_packaging@file://<path-to-git-checkout>\"]\nbuild-backend = \"setuptools.build_meta\"\n```\n\nnote: you need to run `pip cache remove jupyter_packaging` any time changes are made to prevent `pip` from using a cached version of the source.\n",
  "docs_url": null,
  "keywords": "ipython,jupyter,packaging",
  "license": "bsd 3-clause license  copyright (c) 2017, project jupyter all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  * redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  * neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.",
  "name": "jupyter-packaging",
  "package_url": "https://pypi.org/project/jupyter-packaging/",
  "project_url": "https://pypi.org/project/jupyter-packaging/",
  "project_urls": {
    "Bug Tracker": "https://github.com/jupyter/jupyter-packaging/issues",
    "Homepage": "http://jupyter.org",
    "Source": "https://github.com/jupyter/jupyter-packaging/"
  },
  "release_url": "https://pypi.org/project/jupyter-packaging/0.12.3/",
  "requires_dist": [
    "deprecation",
    "packaging",
    "setuptools>=60.2.0",
    "tomlkit",
    "wheel",
    "build; extra == 'test'",
    "coverage; extra == 'test'",
    "pre-commit; extra == 'test'",
    "pytest; extra == 'test'",
    "pytest-cov; extra == 'test'",
    "pytest-mock; extra == 'test'",
    "pytest-timeout; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "jupyter packaging utilities.",
  "version": "0.12.3",
  "releases": [],
  "developers": [
    "jupyter@googlegroups.com"
  ],
  "kwds": "jupyter_packaging jupyter include_package_data importerror build_api",
  "license_kwds": "liability liable copyright negligence disclaimer",
  "libtype": "pypi",
  "id": "pypi_jupyter_packaging",
  "homepage": "",
  "release_count": 39,
  "dependency_ids": [
    "pypi_build",
    "pypi_coverage",
    "pypi_deprecation",
    "pypi_packaging",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_timeout",
    "pypi_setuptools",
    "pypi_tomlkit",
    "pypi_wheel"
  ]
}
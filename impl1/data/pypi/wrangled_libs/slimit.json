{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: unix",
    "programming language :: python",
    "topic :: software development :: compilers"
  ],
  "description": "::\n\n      _____ _      _____ __  __ _____ _______\n     / ____| |    |_   _|  \\/  |_   _|__   __|\n    | (___ | |      | | | \\  / | | |    | |\n     \\___ \\| |      | | | |\\/| | | |    | |\n     ____) | |____ _| |_| |  | |_| |_   | |\n    |_____/|______|_____|_|  |_|_____|  |_|\n\n\nwelcome to slimit\n==================================\n\n`slimit` is a javascript minifier written in python.\nit compiles javascript into more compact code so that it downloads\nand runs faster.\n\n`slimit` also provides a library that includes a javascript parser,\nlexer, pretty printer and a tree visitor.\n\n`http://slimit.readthedocs.org/ <http://slimit.readthedocs.org/>`_\n\ninstallation\n------------\n\n::\n\n    $ [sudo] pip install slimit\n\nor the bleeding edge version from the git master branch:\n\n::\n\n    $ [sudo] pip install git+https://github.com/rspivak/slimit.git#egg=slimit\n\n\nthere is also an official deb package available at\n`http://packages.debian.org/sid/slimit <http://packages.debian.org/sid/slimit>`_\n\n\nlet's minify some code\n----------------------\n\nfrom the command line:\n\n::\n\n    $ slimit -h\n    usage: slimit [options] [input file]\n\n    if no input file is provided stdin is used by default.\n    minified javascript code is printed to stdout.\n\n    options:\n      -h, --help            show this help message and exit\n      -m, --mangle          mangle names\n      -t, --mangle-toplevel\n                            mangle top level scope (defaults to false)\n\n    $ cat test.js\n    var foo = function( obj ) {\n            for ( var name in obj ) {\n                    return false;\n            }\n            return true;\n    };\n    $\n    $ slimit --mangle < test.js\n    var foo=function(a){for(var b in a)return false;return true;};\n\nor using library api:\n\n>>> from slimit import minify\n>>> text = \"\"\"\n... var foo = function( obj ) {\n...         for ( var name in obj ) {\n...                 return false;\n...         }\n...         return true;\n... };\n... \"\"\"\n>>> print minify(text, mangle=true, mangle_toplevel=true)\nvar a=function(a){for(var b in a)return false;return true;};\n\n\niterate over, modify a javascript ast and pretty print it\n---------------------------------------------------------\n\n>>> from slimit.parser import parser\n>>> from slimit.visitors import nodevisitor\n>>> from slimit import ast\n>>>\n>>> parser = parser()\n>>> tree = parser.parse('for(var i=0; i<10; i++) {var x=5+i;}')\n>>> for node in nodevisitor.visit(tree):\n...     if isinstance(node, ast.identifier) and node.value == 'i':\n...         node.value = 'hello'\n...\n>>> print tree.to_ecma() # print awesome javascript :)\nfor (var hello = 0; hello < 10; hello++) {\n  var x = 5 + hello;\n}\n>>>\n\nwriting custom node visitor\n---------------------------\n\n>>> from slimit.parser import parser\n>>> from slimit.visitors.nodevisitor import astvisitor\n>>>\n>>> text = \"\"\"\n... var x = {\n...     \"key1\": \"value1\",\n...     \"key2\": \"value2\"\n... };\n... \"\"\"\n>>>\n>>> class myvisitor(astvisitor):\n...     def visit_object(self, node):\n...         \"\"\"visit object literal.\"\"\"\n...         for prop in node:\n...             left, right = prop.left, prop.right\n...             print 'property key=%s, value=%s' % (left.value, right.value)\n...             # visit all children in turn\n...             self.visit(prop)\n...\n>>>\n>>> parser = parser()\n>>> tree = parser.parse(text)\n>>> visitor = myvisitor()\n>>> visitor.visit(tree)\nproperty key=\"key1\", value=\"value1\"\nproperty key=\"key2\", value=\"value2\"\n\nusing lexer in your project\n---------------------------\n\n>>> from slimit.lexer import lexer\n>>> lexer = lexer()\n>>> lexer.input('a = 1;')\n>>> for token in lexer:\n...     print token\n...\nlextoken(id,'a',1,0)\nlextoken(eq,'=',1,2)\nlextoken(number,'1',1,4)\nlextoken(semi,';',1,5)\n\nyou can get one token at a time using ``token`` method:\n\n>>> lexer.input('a = 1;')\n>>> while true:\n...     token = lexer.token()\n...     if not token:\n...         break\n...     print token\n...\nlextoken(id,'a',1,0)\nlextoken(eq,'=',1,2)\nlextoken(number,'1',1,4)\nlextoken(semi,';',1,5)\n\n`lextoken` instance has different attributes:\n\n>>> lexer.input('a = 1;')\n>>> token = lexer.token()\n>>> token.type, token.value, token.lineno, token.lexpos\n('id', 'a', 1, 0)\n\nbenchmarks\n----------\n\n**sam** - jquery size after minification in bytes (the smaller number the better)\n\n+-------------------------------+------------+------------+------------+\n| original jquery 1.6.1 (bytes) | slimit sam | rjsmin sam | jsmin sam  |\n+===============================+============+============+============+\n| 234,995                       | 94,290     | 134,215    | 134,819    |\n+-------------------------------+------------+------------+------------+\n\nroadmap\n-------\n- when doing name mangling handle cases with 'eval' and 'with'\n- foo[\"bar\"] ==> foo.bar\n- consecutive declarations: var a = 10; var b = 20; ==> var a=10,b=20;\n- reduce simple constant expressions if the result takes less space:\n  1 +2 * 3 ==> 7\n- if statement optimizations\n\n  1. if (foo) bar(); else baz(); ==> foo?bar():baz();\n  2. if (!foo) bar(); else baz(); ==> foo?baz():bar();\n  3. if (foo) bar(); ==> foo&&bar();\n  4. if (!foo) bar(); ==> foo||bar();\n  5. if (foo) return bar(); else return baz(); ==> return foo?bar():baz();\n  6. if (foo) return bar(); else something(); ==> {if(foo)return bar();something()}\n\n- remove unreachable code that follows a return, throw, break or\n  continue statement, except function/variable declarations\n- parsing speed improvements\n\nacknowledgments\n---------------\n- the lexer and parser are built with `ply <http://www.dabeaz.com/ply/>`_\n- several test cases and regexes from `jslex <https://bitbucket.org/ned/jslex>`_\n- some visitor ideas - `pycparser <http://code.google.com/p/pycparser/>`_\n- many grammar rules are taken from `rkelly <https://github.com/tenderlove/rkelly>`_\n- name mangling and different optimization ideas - `uglifyjs <https://github.com/mishoo/uglifyjs>`_\n- asi implementation was inspired by `pyjsparser <http://bitbucket.org/mvantellingen/pyjsparser>`_\n\nlicense\n-------\nthe mit license (mit)\n\nchange history\n==============\n0.8.1 (2013-03-26)\n------------------\n- bug fix: https://github.com/rspivak/slimit/pull/45\n  fix syntax error in the output of for statement with some form of expressions\n\n0.8.0 (2013-03-23)\n------------------\n- python 3.x support\n- bug fix: https://github.com/rspivak/slimit/issues/42\n  slimit removes parentheses from ternary expression, causes syntax error in jquery\n- bug fix: https://github.com/rspivak/slimit/issues/37\n  simple identifier in for init\n- bug fix: https://github.com/rspivak/slimit/issues/36\n  using $ for mangled function names conflicts with jquery\n\n0.7.4 (2012-06-5)\n------------------\n- bug fix: https://github.com/rspivak/slimit/issues/34\n  'class' is reserved keyword now\n\n0.7.3 (2012-05-21)\n------------------\n- bug fix (unary op in for init): https://github.com/rspivak/slimit/pull/33\n\n0.7.2 (2012-05-17)\n------------------\n- added support for get/set properties:\n  https://github.com/rspivak/slimit/issues/32\n\n0.7.1 (2012-05-10)\n------------------\n- function call support in for init section:\n  https://github.com/rspivak/slimit/pull/31\n\n0.7 (2012-04-16)\n----------------\n- multiline string support: https://github.com/rspivak/slimit/issues/24\n\n0.6.2 (2012-04-07)\n------------------\n- bug fix: https://github.com/rspivak/slimit/issues/29\n- bug fix: https://github.com/rspivak/slimit/issues/28\n\n0.6.1 (2012-03-15)\n------------------\n- added command-line option *-t/--mangle-toplevel* to turn on\n  global scope name mangling. as of this version it's off by\n  default: https://github.com/rspivak/slimit/issues/27\n- removed dependency on a 'distribute' package\n- bug fix: https://github.com/rspivak/slimit/issues/26\n- bug fix: https://github.com/rspivak/slimit/issues/25\n\n0.6 (2012-02-04)\n----------------\n- added optimization: foo[\"bar\"] ==> foo.bar\n- added base class for custom ast node visitors\n- documentation updates\n- bug fix: https://github.com/rspivak/slimit/issues/22\n- bug fix: https://github.com/rspivak/slimit/issues/21\n\n0.5.5 (2011-10-05)\n------------------\n- bugfix: https://github.com/rspivak/slimit/issues/7\n\n0.5.4 (2011-10-01)\n------------------\n- bugfix: https://github.com/rspivak/slimit/issues/6\n  division with \"this\" fails\n\n0.5.3 (2011-06-29)\n------------------\n- bugfix: https://github.com/rspivak/slimit/issues/5\n\n0.5.2 (2011-06-14)\n------------------\n- bugfix: https://github.com/rspivak/slimit/issues/4\n- bugfix: https://github.com/rspivak/slimit/issues/3\n\n0.5.1 (2011-06-06)\n------------------\n- bugfix: https://github.com/rspivak/slimit/issues/2\n\n0.5 (2011-06-06)\n----------------\n- added name mangling\n\n0.4 (2011-05-12)\n----------------\n- minify more by removing block braces { }\n- more tests\n\n0.3.2 (2011-05-09)\n------------------\n- more hacks to use pre-generated lex and yacc tables when called from\n  the command line\n\n0.3.1 (2011-05-09)\n------------------\n- use pre-generated lex and yacc tables when called from the command line\n\n0.3 (2011-05-09)\n----------------\n- added minifier\n\n0.2 (2011-05-07)\n----------------\n- added a javascript parser\n- added pretty printer\n- added node visitor\n\n0.1 (2011-05-02)\n----------------\n- initial public version. it contains only a javascript lexer",
  "docs_url": "https://pythonhosted.org/slimit/",
  "keywords": "",
  "license": "mit",
  "name": "slimit",
  "package_url": "https://pypi.org/project/slimit/",
  "project_url": "https://pypi.org/project/slimit/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://slimit.readthedocs.org"
  },
  "release_url": "https://pypi.org/project/slimit/0.8.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "slimit - javascript minifier",
  "version": "0.8.1",
  "releases": [],
  "developers": [
    "ruslan.spivak@gmail.com",
    "ruslan_spivak"
  ],
  "kwds": "slimit minifier minified minify pyjsparser",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_slimit",
  "homepage": "http://slimit.readthedocs.org",
  "release_count": 20,
  "dependency_ids": []
}
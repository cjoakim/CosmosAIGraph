{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: isc license (iscl)",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "==========\nresolvelib\n==========\n\nresolvelib at the highest level provides a ``resolver`` class that includes\ndependency resolution logic. you give it some things, and a little information\non how it should interact with them, and it will spit out a resolution result.\n\n\nintended usage\n==============\n\n::\n\n    import resolvelib\n\n    # things i want to resolve.\n    requirements = [...]\n\n    # implement logic so the resolver understands the requirement format.\n    class myprovider:\n        ...\n\n    provider = myprovider()\n    reporter = resolvelib.basereporter()\n\n    # create the (reusable) resolver.\n    resolver = resolvelib.resolver(provider, reporter)\n\n    # kick off the resolution process, and get the final result.\n    result = resolver.resolve(requirements)\n\nthe provider interface is specified in ``resolvelib.providers``. you don't\nneed to inherit anything, however, only need to implement the right methods.\n\n\nterminology\n===========\n\nthe intention of this section is to unify the terms we use when talking about\nthis code base, and packaging in general, to avoid confusion. class and\nvariable names in the code base should try to stick to terms defined here.\n\nthings passed into ``resolver.resolve()`` and provided by the provider are all\nconsidered opaque. they don't need to adhere to this set of terminologies.\nnothing can go wrong as long as the provider implementers can keep their heads\nstraight.\n\npackage\n-------\n\na thing that can be installed. a package can have one or more versions\navailable for installation.\n\nversion\n-------\n\na string, usually in a number form, describing a snapshot of a package. this\nnumber should increase when a package posts a new snapshot,\ni.e a higher number means a more up-to-date snapshot.\n\nspecifier\n---------\n\na collection of one or more versions. this could be a wildcard, indicating that\nany version is acceptable.\n\ncandidate\n---------\n\na combination of a package and a version, i.e. a \"concrete requirement\". python\npeople sometimes call this a \"locked\" or \"pinned\" dependency. both of\n\"requirement\" and \"dependency\", however, should not be used when describing a\ncandidate, to avoid confusion.\n\nsome resolver architectures refer this as a \"specification\", but it is not\nused here to avoid confusion with a *specifier*.\n\nrequirement\n-----------\n\nan intention to acquire a needed package, i.e. an \"abstract requirement\". a\n\"dependency\", if not clarified otherwise, also refers to this concept.\n\na requirement should specify two things: a package, and a specifier.\n\ncontributing\n============\n\nplease see `developer documentation <./development.rst>`__.\n",
  "docs_url": null,
  "keywords": "dependency,resolution",
  "license": "isc license",
  "name": "resolvelib",
  "package_url": "https://pypi.org/project/resolvelib/",
  "project_url": "https://pypi.org/project/resolvelib/",
  "project_urls": {
    "Homepage": "https://github.com/sarugaku/resolvelib"
  },
  "release_url": "https://pypi.org/project/resolvelib/1.0.1/",
  "requires_dist": [
    "html5lib ; extra == 'examples'",
    "packaging ; extra == 'examples'",
    "pygraphviz ; extra == 'examples'",
    "requests ; extra == 'examples'",
    "black ; extra == 'lint'",
    "flake8 ; extra == 'lint'",
    "mypy ; extra == 'lint'",
    "isort ; extra == 'lint'",
    "types-requests ; extra == 'lint'",
    "build ; extra == 'release'",
    "towncrier ; extra == 'release'",
    "twine ; extra == 'release'",
    "commentjson ; extra == 'test'",
    "packaging ; extra == 'test'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "resolve abstract dependencies into concrete ones",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "tzu",
    "uranusjr@gmail.com"
  ],
  "kwds": "resolvelib resolver resolve resolution dependency",
  "license_kwds": "isc license",
  "libtype": "pypi",
  "id": "pypi_resolvelib",
  "homepage": "https://github.com/sarugaku/resolvelib",
  "release_count": 19,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_commentjson",
    "pypi_flake8",
    "pypi_html5lib",
    "pypi_isort",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pygraphviz",
    "pypi_pytest",
    "pypi_requests",
    "pypi_towncrier",
    "pypi_twine",
    "pypi_types_requests"
  ]
}
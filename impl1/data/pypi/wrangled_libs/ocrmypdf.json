{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: end users/desktop",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: image recognition",
    "topic :: text processing :: indexing",
    "topic :: text processing :: linguistic"
  ],
  "description": "<!-- spdx-filecopyrighttext: 2014 julien pfefferkorn -->\n<!-- spdx-filecopyrighttext: 2015 james r. barlow -->\n<!-- spdx-license-identifier: cc-by-sa-4.0 -->\n\n<img src=\"docs/images/logo.svg\" width=\"240\" alt=\"ocrmypdf\">\n\n[![build status](https://github.com/ocrmypdf/ocrmypdf/actions/workflows/build.yml/badge.svg)](https://github.com/ocrmypdf/ocrmypdf/actions/workflows/build.yml) [![pypi version][pypi]](https://pypi.org/project/ocrmypdf/) ![homebrew version][homebrew] ![readthedocs][docs] ![python versions][pyversions]\n\n[pypi]: https://img.shields.io/pypi/v/ocrmypdf.svg \"pypi version\"\n[homebrew]: https://img.shields.io/homebrew/v/ocrmypdf.svg \"homebrew version\"\n[docs]: https://readthedocs.org/projects/ocrmypdf/badge/?version=latest \"rtd\"\n[pyversions]: https://img.shields.io/pypi/pyversions/ocrmypdf \"supported python versions\"\n\nocrmypdf adds an ocr text layer to scanned pdf files, allowing them to be searched or copy-pasted.\n\n```bash\nocrmypdf                      # it's a scriptable command line program\n   -l eng+fra                 # it supports multiple languages\n   --rotate-pages             # it can fix pages that are misrotated\n   --deskew                   # it can deskew crooked pdfs!\n   --title \"my pdf\"           # it can change output metadata\n   --jobs 4                   # it uses multiple cores by default\n   --output-type pdfa         # it produces pdf/a by default\n   input_scanned.pdf          # takes pdf input (or images)\n   output_searchable.pdf      # produces validated pdf output\n```\n\n[see the release notes for details on the latest changes](https://ocrmypdf.readthedocs.io/en/latest/release_notes.html).\n\n## main features\n\n- generates a searchable [pdf/a](https://en.wikipedia.org/?title=pdf/a) file from a regular pdf\n- places ocr text accurately below the image to ease copy / paste\n- keeps the exact resolution of the original embedded images\n- when possible, inserts ocr information as a \"lossless\" operation without disrupting any other content\n- optimizes pdf images, often producing files smaller than the input file\n- if requested, deskews and/or cleans the image before performing ocr\n- validates input and output files\n- distributes work across all available cpu cores\n- uses [tesseract ocr](https://github.com/tesseract-ocr/tesseract) engine to recognize more than [100 languages](https://github.com/tesseract-ocr/tessdata)\n- keeps your private data private.\n- scales properly to handle files with thousands of pages.\n- battle-tested on millions of pdfs.\n\n<img src=\"misc/screencast/demo.svg\" alt=\"demo of ocrmypdf in a terminal session\">\n\nfor details: please consult the [documentation](https://ocrmypdf.readthedocs.io/en/latest/).\n\n## motivation\n\ni searched the web for a free command line tool to ocr pdf files: i found many, but none of them were really satisfying:\n\n- either they produced pdf files with misplaced text under the image (making copy/paste impossible)\n- or they did not handle accents and multilingual characters\n- or they changed the resolution of the embedded images\n- or they generated ridiculously large pdf files\n- or they crashed when trying to ocr\n- or they did not produce valid pdf files\n- on top of that none of them produced pdf/a files (format dedicated for long time storage)\n\n...so i decided to develop my own tool.\n\n## installation\n\nlinux, windows, macos and freebsd are supported. docker images are also available, for both x64 and arm.\n\n| operating system              | install command               |\n| ----------------------------- | ------------------------------|\n| debian, ubuntu                | ``apt install ocrmypdf``      |\n| windows subsystem for linux   | ``apt install ocrmypdf``      |\n| fedora                        | ``dnf install ocrmypdf``      |\n| macos (homebrew)              | ``brew install ocrmypdf``     |\n| macos (nix)                   | ``nix-env -i ocrmypdf``       |\n| linuxbrew                     | ``brew install ocrmypdf``     |\n| freebsd                       | ``pkg install py-ocrmypdf``   |\n| conda                         | ``conda install ocrmypdf``    |\n| ubuntu snap                   | ``snap install ocrmypdf``     |\n\nfor everyone else, [see our documentation](https://ocrmypdf.readthedocs.io/en/latest/installation.html) for installation steps.\n\n## languages\n\nocrmypdf uses tesseract for ocr, and relies on its language packs. for linux users, you can often find packages that provide language packs:\n\n```bash\n# display a list of all tesseract language packs\napt-cache search tesseract-ocr\n\n# debian/ubuntu users\napt-get install tesseract-ocr-chi-sim  # example: install chinese simplified language pack\n\n# arch linux users\npacman -s tesseract-data-eng tesseract-data-deu # example: install the english and german language packs\n\n# brew macos users\nbrew install tesseract-lang\n```\n\nyou can then pass the `-l lang` argument to ocrmypdf to give a hint as to what languages it should search for. multiple languages can be requested.\n\nocrmypdf supports tesseract 4.1.1+. it will automatically use whichever version it finds first on the `path` environment variable. on windows, if `path` does not provide a tesseract binary, we use the highest version number that is installed according to the windows registry.\n\n## documentation and support\n\nonce ocrmypdf is installed, the built-in help which explains the command syntax and options can be accessed via:\n\n```bash\nocrmypdf --help\n```\n\nour [documentation is served on read the docs](https://ocrmypdf.readthedocs.io/en/latest/index.html).\n\nplease report issues on our [github issues](https://github.com/ocrmypdf/ocrmypdf/issues) page, and follow the issue template for quick response.\n\n## requirements\n\nin addition to the required python version (3.8+), ocrmypdf requires external program installations of ghostscript and tesseract ocr. ocrmypdf is pure python, and runs on pretty much everything: linux, macos, windows and freebsd.\n\n## press & media\n\n- [going paperless with ocrmypdf](https://medium.com/@ikirichenko/going-paperless-with-ocrmypdf-e2f36143f46a)\n- [converting a scanned document into a compressed searchable pdf with redactions](https://medium.com/@treyharris/converting-a-scanned-document-into-a-compressed-searchable-pdf-with-redactions-63f61c34fe4c)\n- [c't 1-2014, page 59](https://heise.de/-2279695): detailed presentation of ocrmypdf v1.0 in the leading german it magazine c't\n- [heise open source, 09/2014: texterkennung mit ocrmypdf](https://heise.de/-2356670)\n- [heise durchsuchbare pdf-dokumente mit ocrmypdf erstellen](https://www.heise.de/ratgeber/durchsuchbare-pdf-dokumente-mit-ocrmypdf-erstellen-4607592.html)\n- [excellent utilities: ocrmypdf](https://www.linuxlinks.com/excellent-utilities-ocrmypdf-add-ocr-text-layer-scanned-pdfs/)\n- [linuxuser texterkennung mit ocrmypdf und scanbd automatisieren](https://www.linux-community.de/ausgaben/linuxuser/2021/06/texterkennung-mit-ocrmypdf-und-scanbd-automatisieren/)\n- [y combinator discussion](https://news.ycombinator.com/item?id=32028752)\n\n## business enquiries\n\nocrmypdf would not be the software that it is today without companies and users choosing to provide support for feature development and consulting enquiries. we are happy to discuss all enquiries, whether for extending the existing feature set, or integrating ocrmypdf into a larger system.\n\n## license\n\nthe ocrmypdf software is licensed under the mozilla public license 2.0 (mpl-2.0). this license permits integration of ocrmypdf with other code, included commercial and closed source, but asks you to publish source-level modifications you make to ocrmypdf.\n\nsome components of ocrmypdf have other licenses, as indicated by standard spdx license identifiers or the dep5 copyright and licensing information file. generally speaking, non-core code is licensed under mit, and the documentation and test files are licensed under creative commons sharealike 4.0 (cc-by-sa 4.0).\n\n## disclaimer\n\nthe software is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied.\n",
  "docs_url": null,
  "keywords": "pdf,ocr,optical character recognition,pdf/a,scanning",
  "license": "mpl-2.0",
  "name": "ocrmypdf",
  "package_url": "https://pypi.org/project/ocrmypdf/",
  "project_url": "https://pypi.org/project/ocrmypdf/",
  "project_urls": {
    "Documentation": "https://ocrmypdf.readthedocs.io/",
    "Source": "https://github.com/ocrmypdf/OCRmyPDF",
    "Tracker": "https://github.com/ocrmypdf/OCRmyPDF/issues"
  },
  "release_url": "https://pypi.org/project/ocrmypdf/16.0.2/",
  "requires_dist": [
    "Pillow >=10.0.1",
    "deprecation >=2.1.0",
    "img2pdf >=0.5",
    "packaging >=20",
    "pdfminer.six >=20220319",
    "pikepdf >=8.10.1",
    "pluggy >=1",
    "rich >=13",
    "sphinx ; extra == 'docs'",
    "sphinx-issues ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "PyMuPDF >=1.19.1 ; extra == 'extended_test'",
    "coverage[toml] >=6.2 ; extra == 'test'",
    "hypothesis >=6.36.0 ; extra == 'test'",
    "pytest >=6.2.5 ; extra == 'test'",
    "pytest-cov >=3.0.0 ; extra == 'test'",
    "pytest-xdist >=2.5.0 ; extra == 'test'",
    "python-xmp-toolkit ==2.0.1 ; extra == 'test'",
    "reportlab >=3.6.8 ; extra == 'test'",
    "types-Pillow ; extra == 'test'",
    "types-humanfriendly ; extra == 'test'",
    "watchdog >=1.0.2 ; extra == 'watcher'",
    "typer[all] ; extra == 'watcher'",
    "python-dotenv ; extra == 'watcher'",
    "Flask >=2.0.1 ; extra == 'webservice'"
  ],
  "requires_python": ">=3.10",
  "summary": "ocrmypdf adds an ocr text layer to scanned pdf files, allowing them to be searched",
  "version": "16.0.2",
  "releases": [],
  "developers": [
    "james@purplerock.ca"
  ],
  "kwds": "ocrmypdf ocr pdfs pdf scanned",
  "license_kwds": "mpl-2.0",
  "libtype": "pypi",
  "id": "pypi_ocrmypdf",
  "homepage": "",
  "release_count": 222,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_deprecation",
    "pypi_flask",
    "pypi_hypothesis",
    "pypi_img2pdf",
    "pypi_packaging",
    "pypi_pdfminer.six",
    "pypi_pikepdf",
    "pypi_pillow",
    "pypi_pluggy",
    "pypi_pymupdf",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_python_dotenv",
    "pypi_python_xmp_toolkit",
    "pypi_reportlab",
    "pypi_rich",
    "pypi_sphinx",
    "pypi_sphinx_issues",
    "pypi_sphinx_rtd_theme",
    "pypi_typer",
    "pypi_types_humanfriendly",
    "pypi_types_pillow",
    "pypi_watchdog"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# msoffcrypto-tool\n\n[![pypi](https://img.shields.io/pypi/v/msoffcrypto-tool.svg)](https://pypi.org/project/msoffcrypto-tool/)\n[![pypi downloads](https://img.shields.io/pypi/dm/msoffcrypto-tool.svg)](https://pypistats.org/packages/msoffcrypto-tool)\n[![build](https://github.com/nolze/msoffcrypto-tool/actions/workflows/ci.yaml/badge.svg)](https://github.com/nolze/msoffcrypto-tool/actions/workflows/ci.yaml)\n[![coverage status](https://codecov.io/gh/nolze/msoffcrypto-tool/branch/master/graph/badge.svg)](https://codecov.io/gh/nolze/msoffcrypto-tool)\n[![documentation status](https://readthedocs.org/projects/msoffcrypto-tool/badge/?version=latest)](http://msoffcrypto-tool.readthedocs.io/en/latest/?badge=latest)\n\nmsoffcrypto-tool (formerly ms-offcrypto-tool) is python tool and library for decrypting encrypted ms office files with password, intermediate key, or private key which generated its escrow key.\n\n## contents\n\n* [install](#install)\n* [examples](#examples)\n* [supported encryption methods](#supported-encryption-methods)\n* [tests](#tests)\n* [todo](#todo)\n* [resources](#resources)\n* [use cases and mentions](#use-cases-and-mentions)\n* [contributors](#contributors)\n\n## install\n\n```\npip install msoffcrypto-tool\n```\n\n## examples\n\n### as cli tool (with password)\n\n```\nmsoffcrypto-tool encrypted.docx decrypted.docx -p passw0rd\n```\n\npassword is prompted if you omit the password argument value:\n\n```bash\n$ msoffcrypto-tool encrypted.docx decrypted.docx -p\npassword:\n```\n\ntest if the file is encrypted or not (exit code 0 or 1 is returned):\n\n```\nmsoffcrypto-tool document.doc --test -v\n```\n\n### as library\n\npassword and more key types are supported with library functions.\n\nbasic usage:\n\n```python\nimport msoffcrypto\n\nencrypted = open(\"encrypted.docx\", \"rb\")\nfile = msoffcrypto.officefile(encrypted)\n\nfile.load_key(password=\"passw0rd\")  # use password\n\nwith open(\"decrypted.docx\", \"wb\") as f:\n    file.decrypt(f)\n\nencrypted.close()\n```\n\nbasic usage (in-memory):\n\n```python\nimport msoffcrypto\nimport io\nimport pandas as pd\n\ndecrypted = io.bytesio()\n\nwith open(\"encrypted.xlsx\", \"rb\") as f:\n    file = msoffcrypto.officefile(f)\n    file.load_key(password=\"passw0rd\")  # use password\n    file.decrypt(decrypted)\n\ndf = pd.read_excel(decrypted)\nprint(df)\n```\n\nadvanced usage:\n\n```python\n# verify password before decryption (default: false)\n# the ecma-376 agile/standard crypto system allows one to know whether the supplied password is correct before actually decrypting the file\n# currently, the verify_password option is only meaningful for ecma-376 agile/standard encryption\nfile.load_key(password=\"passw0rd\", verify_password=true)\n\n# use private key\nfile.load_key(private_key=open(\"priv.pem\", \"rb\"))\n\n# use intermediate key (secretkey)\nfile.load_key(secret_key=binascii.unhexlify(\"ae8c36e68b4bb9ea46e5544a5fdb6693875b2fde1507cbc65c8bcf99e25c2562\"))\n\n# check the hmac of the data payload before decryption (default: false)\n# currently, the verify_integrity option is only meaningful for ecma-376 agile encryption\nfile.decrypt(open(\"decrypted.docx\", \"wb\"), verify_integrity=true)\n```\n\n## supported encryption methods\n\n### ms-offcrypto specs\n\n* [x] ecma-376 (agile encryption/standard encryption)\n  * [x] ms-docx (ooxml) (word 2007-2016)\n  * [x] ms-xlsx (ooxml) (excel 2007-2016)\n  * [x] ms-pptx (ooxml) (powerpoint 2007-2016)\n* [x] office binary document rc4 cryptoapi\n  * [x] ms-doc (word 2002, 2003, 2004)\n  * [x] ms-xls (excel 2002, 2003, 2004) (experimental)\n  * [x] ms-ppt (powerpoint 2002, 2003, 2004) (partial, experimental)\n* [x] office binary document rc4\n  * [x] ms-doc (word 97, 98, 2000)\n  * [x] ms-xls (excel 97, 98, 2000) (experimental)\n* [ ] ecma-376 (extensible encryption)\n* [ ] xor obfuscation\n\n### other\n\n* [ ] word 95 encryption (word 95 and prior)\n* [ ] excel 95 encryption (excel 95 and prior)\n* [ ] powerpoint 95 encryption (powerpoint 95 and prior)\n\nprs are welcome!\n\n## tests\n\nwith [coverage](https://github.com/nedbat/coveragepy) and [pytest](https://pytest.org/):\n\n```\npoetry install\npoetry run coverage run -m pytest -v\n```\n\n## todo\n\n* [x] add tests\n* [x] support decryption with passwords\n* [x] support older encryption schemes\n* [x] add function-level tests\n* [x] add api documents\n* [x] publish to pypi\n* [x] add decryption tests for various file formats\n* [x] integrate with more comprehensive projects handling ms office files (such as [oletools](https://github.com/decalage2/oletools/)?) if possible\n* [x] add the password prompt mode for cli\n* [x] improve error types (v4.12.0)\n* [ ] redesign apis (v6.0.0)\n* [ ] introduce something like `ctypes.structure`\n* [ ] support encryption\n* [ ] isolate parser\n\n## resources\n\n* \"backdooring ms office documents with secret master keys\" <http://secuinside.com/archive/2015/2015-1-9.pdf>\n* technical documents <https://msdn.microsoft.com/en-us/library/cc313105.aspx>\n  * [ms-offcrypto] agile encryption <https://msdn.microsoft.com/en-us/library/dd949735(v=office.12).aspx>\n* [ms-offdi] microsoft office file format documentation introduction <https://learn.microsoft.com/en-us/openspecs/office_file_formats/ms-offdi/24ed256c-eb5b-494e-b4f6-fb696ad2b4dc>\n* libreoffice/core <https://github.com/libreoffice/core>\n* libreoffice/mso-dumper <https://github.com/libreoffice/mso-dumper>\n* wvdecrypt <http://www.skynet.ie/~caolan/packages/wvdecrypt.html>\n* microsoft office password protection - wikipedia <https://en.wikipedia.org/wiki/microsoft_office_password_protection#history_of_microsoft_encryption_password>\n* office2john.py <https://github.com/magnumripper/johntheripper/blob/bleeding-jumbo/run/office2john.py>\n\n## alternatives\n\n* herumi/msoffice <https://github.com/herumi/msoffice>\n* docrecrypt <https://blogs.technet.microsoft.com/office_resource_kit/2013/01/23/now-you-can-reset-or-remove-a-password-from-a-word-excel-or-powerpoint-filewith-office-2013/>\n* apache poi - the java api for microsoft documents <https://poi.apache.org/>\n\n## use cases and mentions\n\n### general\n\n* <https://repology.org/project/python:msoffcrypto-tool/versions> (kudos to maintainers!)\n* <https://checkroth.com/unlocking-password-protected-files.html>\n\n### malware/maldoc analysis\n\n* <https://github.com/jbremer/sflock/commit/3f6a96abe1dbb4405e4fb7fd0d16863f634b09fb>\n* <https://isc.sans.edu/forums/diary/video+analyzing+encrypted+malicious+office+documents/24572/>\n\n### ctf\n\n* <https://github.com/shombo/cyberstakes-writeps-2018/tree/master/word_up>\n* <https://github.com/willi123yao/cyberthon2020_writeups/blob/master/csit/lost_magic>\n\n### in other languages\n\n* <https://github.com/dtjohnson/xlsx-populate>\n* <https://github.com/opendocument-app/opendocument.core/blob/233663b039/src/internal/ooxml/ooxml_crypto.h>\n* <https://github.com/jaydadhania08/phpdecryptxlsxwithpassword>\n\n### in publications\n\n* [excel\u3001\u30c7\u30fc\u30bf\u6574\u7406\uff06\u5206\u6790\u3001\u753b\u50cf\u51e6\u7406\u306e\u81ea\u52d5\u5316\u30ef\u30b6\u3092\u5b8c\u5168\u7db2\u7f85\uff01 \u8d85\u901fpython\u4ed5\u4e8b\u8853\u5927\u5168](https://books.google.co.jp/books?id=tbdveaaaqbaj&q=msoffcrypto) (\u4f0a\u6ca2\u525b, 2022)\n* [\"analyse de documents malveillants en 2021\"](https://twitter.com/decalage2/status/1435255507846053889), misc hors-s\u00e9rie n\u00b0 24, \"reverse engineering : apprenez \u00e0 analyser des binaires\" (lagadec philippe, 2021)\n* [\u30b7\u30b4\u30c8\u304c\u306f\u304b\u3069\u308b python\u81ea\u52d5\u51e6\u7406\u306e\u6559\u79d1\u66f8](https://books.google.co.jp/books?id=xeyueaaaqbaj&q=msoffcrypto) (\u30af\u30b8\u30e9\u98db\u884c\u673a, 2020)\n\n## contributors\n\n* <https://github.com/nolze/msoffcrypto-tool/graphs/contributors>\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "msoffcrypto-tool",
  "package_url": "https://pypi.org/project/msoffcrypto-tool/",
  "project_url": "https://pypi.org/project/msoffcrypto-tool/",
  "project_urls": {
    "Homepage": "https://github.com/nolze/msoffcrypto-tool"
  },
  "release_url": "https://pypi.org/project/msoffcrypto-tool/5.1.1/",
  "requires_dist": [
    "cryptography (>=35.0)",
    "olefile (>=0.46)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "python tool and library for decrypting ms office files with passwords or other keys",
  "version": "5.1.1",
  "releases": [],
  "developers": [
    "nolze",
    "nolze@archlinux.us"
  ],
  "kwds": "msoffcrypto offcrypto ooxml_crypto cryptoapi history_of_microsoft_encryption_password",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_msoffcrypto_tool",
  "homepage": "https://github.com/nolze/msoffcrypto-tool",
  "release_count": 28,
  "dependency_ids": [
    "pypi_cryptography",
    "pypi_olefile"
  ]
}
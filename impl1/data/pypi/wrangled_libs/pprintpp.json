{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": "``pprint++``: a drop-in replacement for ``pprint`` that's actually pretty\n=========================================================================\n\n.. image:: https://travis-ci.org/wolever/pprintpp.svg?branch=master\n    :target: https://travis-ci.org/wolever/pprintpp\n\nnow with python 3 support!\n\ninstallation\n------------\n\n\n``pprint++`` can be installed with python 2 or python 3 using ``pip`` or\n``easy_install``::\n\n    $ pip install pprintpp\n    - or -\n    $ easy_install pprintpp\n\nusage\n-----\n\n``pprint++`` can be used in three ways:\n\n1. through the separate ``pp`` package::\n\n    $ pip install pp-ez\n    $ python\n    ...\n    >>> import pp\n    >>> pp([\"hello\", \"world\"])\n    [\"hello\", \"world\"]\n\n   for more, see https://pypi.python.org/pypi/pp-ez\n\n2. as a command-line program, which will read python literals from standard in\n   and pretty-print them::\n\n    $ echo \"{'hello': 'world'}\" | pypprint\n    {'hello': 'world'}\n\n3. as an `ipython <https://github.com/ipython/ipython>`_ extension::\n\n    in [1]: %load_ext pprintpp\n   \n   this will use pprintpp for ipython's output.\n   \n   to load this extension when ipython starts, put the previous line in your `startup file <https://ipython.org/ipython-doc/1/config/overview.html#startup-files>`_.\n   \n   you can change the indentation level like so::\n    \n    in [2]: %config pprintpp.indentation = 4 \n\n4. to monkeypatch ``pprint``::\n\n    >>> import pprintpp\n    >>> pprintpp.monkeypatch()\n    >>> import pprint\n    >>> pprint.pprint(...)\n\n   note: the original ``pprint`` module will be available with ``import\n   pprint_original``. additionally, a warning will be issued if ``pprint`` has\n   already been imported. this can be suppressed by passing ``quiet=true``.\n\n5. and, if you *really* want, it can even be imported as a regular module:\n\n   >>> import pprintpp\n   >>> pprintpp.pprint(...)\n\n\nusability protips\n-----------------\n\n``pp``\n~~~~~~\n\nfor bonus code aesthetics, ``pprintpp.pprint`` can be imported as ``pp``:\n\n.. code:: pycon\n\n    >>> from pprintpp import pprint as pp\n    >>> pp(...)\n\nand if that is just too many letters, the ``pp-ez`` package can be installed\nfrom pypi, ensuring that pretty-printing is never more than an ``import pp``\naway::\n\n    $ pip install pp-ez\n    $ python\n    ...\n    >>> import pp\n    >>> pp([\"hello\", \"world\"])\n    [\"hello\", \"world\"]\n\nfor more, see https://pypi.python.org/pypi/pp-ez\n\n\nwhy is it prettier?\n-------------------\n\nunlike ``pprint``, ``pprint++`` strives to emit a readable, largely\npep8-compliant, representation of its input.\n\nit also has explicit support for: the ``collections`` module (``defaultdict``\nand ``counter``) and ``numpy`` arrays:\n\n.. code:: pycon\n\n    >>> import numpy as np\n    >>> from collections import defaultdict, counter\n    >>> pprint([np.array([[1,2],[3,4]]), defaultdict(int, {\"foo\": 1}), counter(\"aaabbc\")])\n    [\n        array([[1, 2],\n               [3, 4]]),\n        defaultdict(<type 'int'>, {'foo': 1}),\n        counter({'a': 3, 'b': 2, 'c': 1}),\n    ]\n\nunicode characters, when possible, will be printed un-escaped. this is done by\nchecking both the output stream's encoding (defaulting to ``utf-8``) and the\ncharacter's unicode category. an effort is made to print only characters which\nwill be visually unambiguous: letters and numbers will be printed un-escaped,\nspaces, combining characters, and control characters will be escaped:\n\n.. code:: pycon\n\n    >>> unistr = u\"\\xe9e\\u0301\"\n    >>> print unistr\n    \u00e9\u00e9\n    >>> pprint(unistr)\n    u'\u00e9e\\u0301'\n\nthe output stream's encoding will be considered too:\n\n.. code:: pycon\n\n    >>> import io\n    >>> stream = io.bytesio()\n    >>> stream.encoding = \"ascii\"\n    >>> pprint(unistr, stream=stream)\n    >>> print stream.getvalue()\n    u'\\xe9e\\u0301'\n\nsubclassess of built-in collection types which don't define a new ``__repr__``\nwill have their class name explicitly added to their repr. for example:\n\n.. code:: pycon\n\n    >>> class mylist(list):\n    ...     pass\n    ...\n    >>> pprint(mylist())\n    mylist()\n    >>> pprint(mylist([1, 2, 3]))\n    mylist([1, 2, 3])\n\nnote that, as you might expect, custom ``__repr__`` methods will be respected:\n\n.. code:: pycon\n\n    >>> class mylist(list):\n    ...     def __repr__(self):\n    ...         return \"custom repr!\"\n    ...\n    >>> pprint(mylist())\n    custom repr!\n\n**note**: ``pprint++`` is still under development, so the format *will* change\nand improve over time.\n\nexample\n~~~~~~~\n\nwith ``printpp``:\n\n.. code:: pycon\n\n    >>> import pprintpp\n    >>> pprintpp.pprint([\"hello\", np.array([[1,2],[3,4]])])\n    [\n        'hello',\n        array([[1, 2],\n               [3, 4]]),\n    ]\n    >>> pprintpp.pprint(tweet)\n    {\n        'coordinates': none,\n        'created_at': 'mon jun 27 19:32:19 +0000 2011',\n        'entities': {\n            'hashtags': [],\n            'urls': [\n                {\n                    'display_url': 'tumblr.com/xnr37hf0yz',\n                    'expanded_url': 'http://tumblr.com/xnr37hf0yz',\n                    'indices': [107, 126],\n                    'url': 'http://t.co/cciwiwg',\n                },\n            ],\n            'user_mentions': [],\n        },\n        'place': none,\n        'source': '<a href=\"http://www.tumblr.com/\" rel=\"nofollow\">tumblr</a>',\n        'truncated': false,\n        'user': {\n            'contributors_enabled': true,\n            'default_profile': false,\n            'entities': {'hashtags': [], 'urls': [], 'user_mentions': []},\n            'favourites_count': 20,\n            'id_str': '6253282',\n            'profile_link_color': '0094c2',\n        },\n    }\n\nwithout ``printpp``::\n\n    >>> import pprint\n    >>> import numpy as np\n    >>> pprint.pprint([\"hello\", np.array([[1,2],[3,4]])])\n    ['hello', array([[1, 2],\n           [3, 4]])]\n    >>> tweet = {'coordinates': none, 'created_at': 'mon jun 27 19:32:19 +0000 2011', 'entities': {'hashtags': [], 'urls': [{'display_url': 'tumblr.com/xnr37hf0yz', 'expanded_url': 'http://tumblr.com/xnr37hf0yz', 'indices': [107, 126], 'url': 'http://t.co/cciwiwg'}], 'user_mentions': []}, 'place': none, 'source': '<a href=\"http://www.tumblr.com/\" rel=\"nofollow\">tumblr</a>', 'truncated': false, 'user': {'contributors_enabled': true, 'default_profile': false, 'entities': {'hashtags': [], 'urls': [], 'user_mentions': []}, 'favourites_count': 20, 'id_str': '6253282', 'profile_link_color': '0094c2'}} \n    >>> pprint.pprint(tweet)\n    {'coordinates': none,\n     'created_at': 'mon jun 27 19:32:19 +0000 2011',\n     'entities': {'hashtags': [],\n                  'urls': [{'display_url': 'tumblr.com/xnr37hf0yz',\n                            'expanded_url': 'http://tumblr.com/xnr37hf0yz',\n                            'indices': [107, 126],\n                            'url': 'http://t.co/cciwiwg'}],\n                  'user_mentions': []},\n     'place': none,\n     'source': '<a href=\"http://www.tumblr.com/\" rel=\"nofollow\">tumblr</a>',\n     'truncated': false,\n     'user': {'contributors_enabled': true,\n              'default_profile': false,\n              'entities': {'hashtags': [], 'urls': [], 'user_mentions': []},\n              'favourites_count': 20,\n              'id_str': '6253282',\n              'profile_link_color': '0094c2'}}\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pprintpp",
  "package_url": "https://pypi.org/project/pprintpp/",
  "project_url": "https://pypi.org/project/pprintpp/",
  "project_urls": {
    "Homepage": "https://github.com/wolever/pprintpp"
  },
  "release_url": "https://pypi.org/project/pprintpp/0.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a drop-in replacement for pprint that's actually pretty",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "david@wolever.net",
    "david_wolever"
  ],
  "kwds": "pprintpp pprint pp pprint_original pycon",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pprintpp",
  "homepage": "https://github.com/wolever/pprintpp",
  "release_count": 10,
  "dependency_ids": []
}
{
  "classifiers": [
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: quality assurance"
  ],
  "description": "# flake8-pie [![circleci](https://circleci.com/gh/sbdchd/flake8-pie.svg?style=svg)](https://circleci.com/gh/sbdchd/flake8-pie) [![pypi](https://img.shields.io/pypi/v/flake8-pie.svg)](https://pypi.org/project/flake8-pie/)\n\n> a flake8 extension that implements misc. lints\n\n## lints\n\n### pie781: assign-and-return\n\nbased on clippy's\n[`let_and_return`](https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return)\nand microsoft's tslint rule\n[`no-unnecessary-local-variable`](https://github.com/microsoft/tslint-microsoft-contrib).\n\nfor more info on the structure of this lint, see the [accompanying blog\npost](https://steve.dignam.xyz/2018/12/16/creating-a-flake8-lint/).\n\n#### examples\n\n```python\n# error\ndef foo():\n   x = bar()\n   return x\n\n# allowed\ndef foo():\n   x, _ = bar()\n   return x\n```\n\n### pie783: celery-explicit-names\n\nwarn about [celery](https://pypi.org/project/celery/) task definitions that don't have explicit names.\n\nnote: this lint is kind of naive considering any decorator with a `.task()`\nmethod or any decorator called `shared_task()` a celery decorator.\n\n#### examples\n\n```python\n# error\n@app.task()\ndef foo():\n    pass\n\n# ok\n@app.task(name=\"app_name.tasks.foo\")\ndef foo():\n    pass\n```\n\n### pie784: celery-explicit-crontab-args\n\nthe `crontab` class provided by celery has some default args that are\nsuprising to new users. specifically, `crontab(hour=\"0,12\")` won't run a task\nat midnight and noon, it will run the task at every minute during those two\nhours. this lint makes that call an error, forcing you to write\n`crontab(hour=\"0, 12\", minute=\"*\")`.\n\nadditionally, the lint is a bit more complex in that it requires you specify\nevery smaller increment than the largest time increment you provide. so if you\nprovide `days_of_week`, then you need to provide `hour`s and `minute`s\nexplicitly.\n\nnote: if you like the default behavior of `crontab()` then you can either\ndisable this lint or pass `\"*\"` for the `kwarg` value, e.g., `minutes=\"*\"`.\n\nalso, since this lint is essentially a naive search for calls to a\n`crontab()` function, if you have a function named the same then this will\ncause false positives.\n\n### pie785: celery-require-tasks-expire\n\ncelery tasks can bunch up if they don't have expirations.\n\nthis enforces specifying expirations in both the celery beat config dict and\nin `.apply_async()` calls.\n\nthe same caveat applies about how this lint is naive.\n\n### pie786: precise-exception-handlers\n\nbe precise in what exceptions you catch. bare `except:` handlers, catching `baseexception`, or catching `exception` can lead to unexpected bugs.\n\n#### examples\n\n```python\n# error\ntry:\n    save_file(name=\"export.csv\")\nexcept:\n    pass\n\n# error\ntry:\n    save_file(name=\"export.csv\")\nexcept baseexception:\n    pass\n\n# error\ntry:\n    save_file(name=\"export.csv\")\nexcept exception:\n    pass\n\n# error\ntry:\n    save_file(name=\"export.csv\")\nexcept (valueerror, exception):\n    pass\n\n\n# ok\ntry:\n    save_file(name=\"export.csv\")\nexcept oserror:\n    pass\n```\n\n### pie787: no-len-condition\n\nempty collections are fasley in python so calling `len()` is unnecessary when\nchecking for emptiness in an if statement/expression.\n\ncomparing to explicit scalars is allowed.\n\n```python\n# error\nif len(foo): ...\nif not len(foo): ...\n\n# ok\nif foo: ...\nif not foo: ...\nif len(foo) > 0: ...\nif len(foo) == 0: ...\n```\n\n### pie788: no-bool-condition\n\nif statements/expressions evalute the truthiness of the their test argument,\nso calling `bool()` is unnecessary.\n\ncomparing to `true`/`false` is allowed.\n\n```python\n# error\nif bool(foo): ...\nif not bool(foo): ...\n\n# ok\nif foo: ...\nif not foo: ...\nif bool(foo) is true: ...\nif bool(foo) is false: ...\n```\n\n### pie789: prefer-isinstance-type-compare\n\nusing `type()` doesn't take into account subclassess and type checkers won't\nrefine the type, use `isinstance` instead.\n\n```python\n# error\nif type(foo) == str: ...\nif type(foo) is str: ...\nif type(foo) in [int, str]: ...\n\n# ok\nif isinstance(foo, str): ...\nif isinstance(foo, (int, str)): ...\n```\n\n### pie790: no-unnecessary-pass\n\n`pass` is unnecessary when definining a `class` or function with an empty\nbody.\n\n```python\n# error\nclass baderror(exception):\n    \"\"\"\n    some doc comment\n    \"\"\"\n    pass\n\ndef foo() -> none:\n    \"\"\"\n    some function\n    \"\"\"\n    pass\n\n# ok\nclass baderror(exception):\n    \"\"\"\n    some doc comment\n    \"\"\"\n\ndef foo() -> none:\n    \"\"\"\n    some function\n    \"\"\"\n```\n\n### pie791: no-pointless-statements\n\ncomparisions without an assignment or assertion are probably a typo.\n\n```python\n# error\n\"foobar\" in data\nres.json() == []\nuser.is_authenticated() is true\n\n# ok\nassert \"foobar\" in data\nfoo = res.json() == []\nuse.is_authenticated()\n```\n\n### pie792: no-inherit-object\n\ninheriting from `object` isn't necessary in python 3.\n\n```python\n# error\nclass foo(object):\n    ...\n\n# ok\nclass foo:\n    ...\n```\n\n### pie793: prefer-dataclass\n\nattempts to find cases where the `@dataclass` decorator is unintentionally\nmissing.\n\n```python\n# error\nclass foo:\n    z: dict[int, int]\n    def __init__(self) -> none: ...\n\nclass bar:\n    x: list[str]\n\n# ok\nclass bar(foo):\n    z: dict[int, int]\n\n@dataclass\nclass bar:\n    x: list[str]\n```\n\n### pie794: dupe-class-field-definitions\n\nfinds duplicate definitions for the same field, which can occur in large orm\nmodel definitions.\n\n```python\n# error\nclass user(basemodel):\n    email = fields.emailfield()\n    # ...80 more properties...\n    email = fields.emailfield()\n\n# ok\nclass user(basemodel):\n    email = fields.emailfield()\n    # ...80 more properties...\n```\n\n### pie795: prefer-stdlib-enums\n\ninstead of defining various constant properties on a class, use the stdlib\nenum which typecheckers support for type refinement.\n\n```python\n# error\nclass foo:\n    a = \"a\"\n    b = \"b\"\n    c = \"c\"\n\n# ok\nimport enum\nclass foo(enum.enum):\n    a = \"a\"\n    b = \"b\"\n    c = \"c\"\n```\n\n### pie796: prefer-unique-enums\n\nby default the stdlib enum allows multiple field names to map to the same\nvalue, this lint requires each enum value be unique.\n\n```python\n# error\nclass foo(enum.enum):\n    a = \"a\"\n    b = \"b\"\n    c = \"c\"\n    d = \"c\"\n\n# ok\nclass foo(enum.enum):\n    a = \"a\"\n    b = \"b\"\n    c = \"c\"\n    d = \"d\"\n```\n\n### pie797: no-unnecessary-if-expr\n\ncall `bool()` directly rather than reimplementing its functionality.\n\n```python\n# error\nfoo(is_valid=true if buzz() else false)\n\n# ok\nfoo(is_valid=bool(buzz()))\n```\n\n### pie798: no-unnecessary-class\n\ninstead of using class to namespace functions, use a module.\n\n```python\n# error\nclass usermanager:\n    class user(namedtuple):\n        name: str\n\n    @classmethod\n    def update_user(cls, user: user) -> none:\n        ...\n\n    @staticmethod\n    def sync_users() -> none:\n        ...\n\n# ok\nclass user(namedtuple):\n    name: str\n\ndef update_user(user: user) -> none:\n    ...\n\ndef sync_users() -> none:\n    ...\n```\n\n### pie799: prefer-col-init\n\ncheck that values are passed in when collections are created rather than\ncreating an empty collection and then inserting.\n\n```python\n# error\nbars = []\nbar = bar()\nbars.append(bar)\n\n# ok\nbar = bar()\nbars = [bar]\n\n# error\ns = deque()\ns.append(foo)\n\n# ok\ns = deque([foo])\n```\n\n### pie800: no-unnecessary-spread\n\ncheck for unnecessary dict unpacking.\n\n```python\n# error\n{**foo, **{\"bar\": 10}}\n\n# ok\n{**foo, \"bar\": 10}\n```\n\n### pie801: prefer-simple-return\n\nreturn boolean expressions directly instead of returning `true` and `false`.\n\n```python\n# error\ndef main():\n    if foo > 5:\n        return true\n    return false\n\n# error\ndef main():\n    if foo > 5:\n        return true\n    else:\n        return false\n\n# ok\ndef main():\n    return foo > 5\n```\n\n### pie802: prefer-simple-any-all\n\nremove unnecessary comprehensions for `any` and `all`\n\n```python\n# error\nany([x.id for x in bar])\nall([x.id for x in bar])\n\n# ok\nall(x.id for x in bar)\nany(x.id for x in bar)\nany({x.id for x in bar})\n```\n\n### pie803: prefer-logging-interpolation\n\ndon't format strings before logging. let `logging` interpolate arguments.\n\nthis allows sentry to aggregate logs, prevents raising exceptions if interpolation fails, and improves performance if the log level is disabled. see [\"pycqa/pylint#1788\"](https://github.com/pycqa/pylint/issues/1788#issuecomment-461279687).\n\n```python\n# error\nlogger.info(\"login error for %s\" % user)\nlogger.info(\"login error for %s, %s\" % (user_id, name))\n\n# error\nlogger.info(\"login error for {}\".format(user))\nlogger.info(\"login error for {}, {}\".format(user_id, name))\n\n# error\nlogger.info(f\"login error for {user}\")\nlogger.info(f\"login error for {user_id}, {name}\")\n\n# ok\nlogger.info(\"login error for %s\", user)\nlogger.info(\"login error for %s, %s\", user_id, name)\n```\n\n### pie804: no-unnecessary-dict-kwargs\n\nas long as the keys of the dict are valid python identifier names, we can safely\nremove the surrounding dict.\n\n```python\n# error\nfoo(**{\"bar\": true})\n\n# ok\nfoo(bar=true)\nfoo(**buzz)\nfoo(**{\"bar foo\": true})\n```\n\n## dev\n\n```shell\n# install dependencies\npoetry install\n\ns/lint\ns/test\n```\n\n### pie805: prefer-literal\n\ncurrently only checks for byte string literals.\n\n```python\n# error\n\"foo\".encode()\n\n# ok\nb\"foo\"\n\"\ud83d\ude00\".encode()\n```\n\n### pie806: no-assert-except\n\ninstead of `assert`ing and catching the exception, use an if statement.\n\n```python\n# error\ntry:\n    assert \"@\" in bar\nexcept assertionerror:\n    ...\n\n# ok\nif \"@\" in bar:\n    ...\n```\n\n### pie807: prefer-list-builtin\n\n`lambda: []` is equivalent to the builtin `list`\n\n```python\n# error\n@dataclass\nclass foo:\n    foo: list[str] = field(default_factory=lambda: [])\n\n# ok\n@dataclass\nclass foo:\n    foo: list[str] = field(default_factory=list)\n```\n\n### pie808: prefer-simple-range\n\nwe can leave out the first argument to `range` in some cases since the default\nstart position is 0.\n\n```python\n# err\nrange(0, 10)\n\n# ok\nrange(10)\nrange(x, 10)\nrange(0, 10, x)\n```\n\n### pie809: django-prefer-bulk\n\nbulk create multiple objects instead of executing o(n) queries.\n\n```python\n# error\n[item.objects.create(item) for item in items]\n\n# error\n[item.objects.create(item) for item in [bar for bar in buzz]]\n\n# error\n(item.objects.create(item) for item in items)\n\n# ok\nitem.objects.insert(items)\nitem.objects.create(item)\n```\n\n## development\n\n### examining the ast\nyou can use `astpretty` to dump the ast of a piece of code.\n\n```shell\n./.venv/bin/astpretty <(pbpaste)\n```\n\n### uploading a new version to [pypi](https://pypi.org)\n\n```shell\n# increment `flake8piecheck.version` and pyproject.toml `version`\n\n# build new distribution files and upload to pypi\n# note: this will ask for login credentials\nrm -rf dist && poetry publish --build\n```\n",
  "docs_url": null,
  "keywords": "flake8,lint",
  "license": "bsd-2-clause",
  "name": "flake8-pie",
  "package_url": "https://pypi.org/project/flake8-pie/",
  "project_url": "https://pypi.org/project/flake8-pie/",
  "project_urls": {
    "Homepage": "https://github.com/sbdchd/flake8-pie",
    "Repository": "https://github.com/sbdchd/flake8-pie"
  },
  "release_url": "https://pypi.org/project/flake8-pie/0.16.0/",
  "requires_dist": [
    "typing_extensions"
  ],
  "requires_python": ">=3.7",
  "summary": "a flake8 extension that implements misc. lints",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "steve@dignam.xyz",
    "steve_dignam"
  ],
  "kwds": "flake8piecheck flake8 pie clippy rust",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_flake8_pie",
  "homepage": "https://github.com/sbdchd/flake8-pie",
  "release_count": 27,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
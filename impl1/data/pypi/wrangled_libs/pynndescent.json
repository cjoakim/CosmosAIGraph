{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": ".. image:: doc/pynndescent_logo.png\n  :width: 600\n  :align: center\n  :alt: pynndescent logo\n\n.. image:: https://dev.azure.com/tutteinstitute/build-pipelines/_apis/build/status%2flmcinnes.pynndescent?branchname=master\n    :target: https://dev.azure.com/tutteinstitute/build-pipelines/_build?definitionid=17\n    :alt: azure pipelines build status\n.. image:: https://readthedocs.org/projects/pynndescent/badge/?version=latest\n    :target: https://pynndescent.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n===========\npynndescent\n===========\n\npynndescent is a python nearest neighbor descent for approximate nearest neighbors.\nit provides a python implementation of nearest neighbor\ndescent for k-neighbor-graph construction and approximate nearest neighbor\nsearch, as per the paper:\n\ndong, wei, charikar moses, and kai li.\n*\"efficient k-nearest neighbor graph construction for generic similarity\nmeasures.\"*\nproceedings of the 20th international conference on world wide web. acm, 2011.\n\nthis library supplements that approach with the use of random projection trees for\ninitialisation. this can be particularly useful for the metrics that are\namenable to such approaches (euclidean, minkowski, angular, cosine, etc.). graph\ndiversification is also performed, pruning the longest edges of any triangles in the\ngraph.\n\ncurrently this library targets relatively high accuracy \n(80%-100% accuracy rate) approximate nearest neighbor searches.\n\n--------------------\nwhy use pynndescent?\n--------------------\n\npynndescent provides fast approximate nearest neighbor queries. the\n`ann-benchmarks <https://github.com/erikbern/ann-benchmarks>`_ system puts it\nsolidly in the mix of top performing ann libraries:\n\n**sift-128 euclidean**\n\n.. image:: https://pynndescent.readthedocs.io/en/latest/_images/sift.png\n    :alt: ann benchmark performance for sift 128 dataset\n\n**nytimes-256 angular**\n\n.. image:: https://pynndescent.readthedocs.io/en/latest/_images/nytimes.png\n    :alt: ann benchmark performance for nytimes 256 dataset\n\nwhile pynndescent is among fastest ann library, it is also both easy to install (pip\nand conda installable) with no platform or compilation issues, and is very flexible,\nsupporting a wide variety of distance metrics by default:\n\n**minkowski style metrics**\n\n- euclidean\n- manhattan\n- chebyshev\n- minkowski\n\n**miscellaneous spatial metrics**\n\n- canberra\n- braycurtis\n- haversine\n\n**normalized spatial metrics**\n\n- mahalanobis\n- wminkowski\n- seuclidean\n\n**angular and correlation metrics**\n\n- cosine\n- dot\n- correlation\n- spearmanr\n- tsss\n- true_angular\n\n**probability metrics**\n\n- hellinger\n- wasserstein\n\n**metrics for binary data**\n\n- hamming\n- jaccard\n- dice\n- russelrao\n- kulsinski\n- rogerstanimoto\n- sokalmichener\n- sokalsneath\n- yule\n\nand also custom user defined distance metrics while still retaining performance.\n\npynndescent also integrates well with scikit-learn, including providing support\nfor the kneighbortransformer as a drop in replacement for algorithms\nthat make use of nearest neighbor computations.\n\n----------------------\nhow to use pynndescent\n----------------------\n\npynndescent aims to have a very simple interface. it is similar to (but more\nlimited than) kdtrees and balltrees in ``sklearn``. in practice there are\nonly two operations -- index construction, and querying an index for nearest\nneighbors.\n\nto build a new search index on some training data ``data`` you can do something\nlike\n\n.. code:: python\n\n    from pynndescent import nndescent\n    index = nndescent(data)\n\nyou can then use the index for searching (and can pickle it to disk if you\nwish). to search a pynndescent index for the 15 nearest neighbors of a test data\nset ``query_data`` you can do something like\n\n.. code:: python\n\n    index.query(query_data, k=15)\n\nand that is pretty much all there is to it. you can find more details in the\n`documentation <https://pynndescent.readthedocs.org>`_.\n\n----------\ninstalling\n----------\n\npynndescent is designed to be easy to install being a pure python module with\nrelatively light requirements:\n\n* numpy\n* scipy\n* scikit-learn >= 0.22\n* numba >= 0.51\n\nall of which should be pip or conda installable. the easiest way to install should be\nvia conda:\n\n.. code:: bash\n\n    conda install -c conda-forge pynndescent\n\nor via pip:\n\n.. code:: bash\n\n    pip install pynndescent\n\nto manually install this package:\n\n.. code:: bash\n\n    wget https://github.com/lmcinnes/pynndescent/archive/master.zip\n    unzip master.zip\n    rm master.zip\n    cd pynndescent-master\n    python setup.py install\n\n----------------\nhelp and support\n----------------\n\nthis project is still young. the documentation is still growing. in the meantime please\n`open an issue <https://github.com/lmcinnes/pynndescent/issues/new>`_\nand i will try to provide any help and guidance that i can. please also check\nthe docstrings on the code, which provide some descriptions of the parameters.\n\n-------\nlicense\n-------\n\nthe pynndescent package is 2-clause bsd licensed. enjoy.\n\n------------\ncontributing\n------------\n\ncontributions are more than welcome! there are lots of opportunities\nfor potential projects, so please get in touch if you would like to\nhelp out. everything from code to notebooks to\nexamples and documentation are all *equally valuable* so please don't feel\nyou can't contribute. to contribute please `fork the project <https://github.com/lmcinnes/pynndescent/issues#fork-destination-box>`_ make your changes and\nsubmit a pull request. we will do our best to work through any issues with\nyou and get your code merged into the main branch.\n\n\n",
  "docs_url": null,
  "keywords": "nearest neighbor,knn,ann",
  "license": "bsd",
  "name": "pynndescent",
  "package_url": "https://pypi.org/project/pynndescent/",
  "project_url": "https://pypi.org/project/pynndescent/",
  "project_urls": {
    "Homepage": "http://github.com/lmcinnes/pynndescent"
  },
  "release_url": "https://pypi.org/project/pynndescent/0.5.11/",
  "requires_dist": [
    "scikit-learn >=0.18",
    "scipy >=1.0",
    "numba >=0.51.2",
    "llvmlite >=0.30",
    "joblib >=0.11",
    "importlib-metadata >=4.8.1 ; python_version < \"3.8\""
  ],
  "requires_python": "",
  "summary": "nearest neighbor descent",
  "version": "0.5.11",
  "releases": [],
  "developers": [
    "leland.mcinnes@gmail.com",
    "leland_mcinnes"
  ],
  "kwds": "pynndescent_logo pynndescent nndescent nearest neighbor",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pynndescent",
  "homepage": "http://github.com/lmcinnes/pynndescent",
  "release_count": 30,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_joblib",
    "pypi_llvmlite",
    "pypi_numba",
    "pypi_scikit_learn",
    "pypi_scipy"
  ]
}
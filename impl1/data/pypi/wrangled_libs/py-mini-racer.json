{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: isc license (iscl)",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/py_mini_racer.svg\n        :target: https://pypi.python.org/pypi/py_mini_racer\n\n.. image:: https://dev.azure.com/sqreenci/pyminiracer/_apis/build/status/sqreen.pyminiracer?branchname=master\n        :target: https://dev.azure.com/sqreenci/pyminiracer/_build/latest?definitionid=10&branchname=master\n\n.. image:: https://img.shields.io/badge/license-isc-blue.svg\n        :target: https://opensource.org/licenses/isc\n\nminimal, modern embedded v8 for python.\n\n.. image:: https://github.com/sqreen/pyminiracer/raw/master/data/py_mini_racer.png\n        :align: center\n\nfeatures\n--------\n\n* latest ecmascript support\n* web assembly support\n* unicode support\n* thread safe\n* re-usable contexts\n\nminiracer can be easily used by django or flask projects to minify assets, run\nbabel or wasm modules.\n\nexamples\n--------\n\nminiracer is straightforward to use:\n\n.. code-block:: python\n\n    >>> from py_mini_racer import miniracer\n    >>> ctx = miniracer()\n    >>> ctx.eval(\"1+1\")\n    2\n    >>> ctx.eval(\"var x = {company: 'sqreen'}; x.company\")\n    'sqreen'\n    >>> print(ctx.eval(\"'\\n{heavy black heart}'\"))\n    \u2764\n    >>> ctx.eval(\"var fun = () => ({ foo: 1 });\")\n\nvariables are kept inside of a context:\n\n.. code-block:: python\n\n    >>> ctx.eval(\"x.company\")\n    'sqreen'\n\n\nwhile ``eval`` only supports returning primitive data types such as\nstrings, ``call`` supports returning composite types such as objects:\n\n.. code-block:: python\n\n    >>> ctx.call(\"fun\")\n    {'foo': 1}\n\n\ncomposite values are serialized using json.\nuse a custom json encoder when sending non-json encodable parameters:\n\n.. code-block:: python\n\n    import json\n\n    from datetime import datetime\n\n    class customencoder(json.jsonencoder):\n\n            def default(self, obj):\n                if isinstance(obj, datetime):\n                    return obj.isoformat()\n\n                return json.jsonencoder.default(self, obj)\n\n\n.. code-block:: python\n\n    >>> ctx.eval(\"var f = function(args) { return args; }\")\n    >>> ctx.call(\"f\", datetime.now(), encoder=customencoder)\n    '2017-03-31t16:51:02.474118'\n\n\nminiracer is es6 capable:\n\n.. code-block:: python\n\n    >>> ctx.execute(\"[1,2,3].includes(5)\")\n    false\n\nv8 heap information can be retrieved:\n\n.. code-block:: python\n\n    >>> ctx.heap_stats()\n    {'total_physical_size': 1613896,\n     'used_heap_size': 1512520,\n     'total_heap_size': 3997696,\n     'total_heap_size_executable': 3145728,\n     'heap_size_limit': 1501560832}\n\n\na wasm example is available in the `tests`_.\n\n.. _`tests`: https://github.com/sqreen/pyminiracer/blob/master/tests/test_wasm.py\n\n\ncompatibility\n-------------\n\npyminiracer is compatible with python 2 & 3 and based on ctypes.\n\nthe binary builds have been tested on x86_64 with:\n\n* macos >= 10.13\n* ubuntu >= 16.04\n* debian >= 9\n* centos >= 7\n* alpine >= 3.11\n* windows 10\n\nit should work on any linux with a libc >= 2.12 and a wheel compatible pip (>= 8.1).\n\nif you're running alpine linux, you may need to install required dependencies manually using the following command:\n\n.. code-block:: bash\n\n    $ apk add libgcc libstdc++\n\nif you have a up-to-date pip and it doesn't use a wheel, you might have an environment for which no wheel is built. please open an issue.\n\ninstallation\n------------\n\nwe built python wheels (prebuilt binaries) for macos 64 bits, linux 64 bits and windows 64 bits.\n\n.. code:: bash\n\n    $ pip install py-mini-racer\n\nbuild\n-----\n\n**warning**: building this package from source takes several gb of disk space and takes ~60 minutes.\n\nfirst check that your current python executable is version 2.7. this is required\nby the v8 build system.\n\n.. code:: bash\n\n    $ python --version\n    python 2.7.16\n\nyou can build the extension with the following command:\n\n.. code:: bash\n\n    $ python helpers/v8_build.py\n\nyou can generate a wheel for whatever python version with the command:\n\n.. code:: bash\n\n    $ python3 helpers/build_package.py wheel dist\n\nit will then build v8, the extension, and generates a wheel for your current\npython version. the v8 builds are cached in the ``py_mini_racer/extension/v8/``\ndirectory.\n\nnotes for building on macos\n'''''''''''''''''''''''''''\n\nthe legacy python binary builds (osx 10.6) need to be downloaded from:\n    https://www.python.org/downloads/\n\nthey will allow to build a wheel compatible with former osx versions.\n\ntests\n-----\n\nif you want to run the tests, you need to build the extension first, first install pytest:\n\n.. code-block:: bash\n\n    $ python -m pip install pytest\n\nthen launch:\n\n.. code:: bash\n\n    $ python -m pytest tests\n\ncredits\n-------\n\nbuilt with love by sqreen_.\n\n.. _sqreen: https://www.sqreen.com\n\npyminiracer launch was described in `this blog post`_.\n\n.. _`this blog post`: https://blog.sqreen.com/embedding-javascript-into-python/\n\npyminiracer is inspired by mini_racer_, built for the ruby world by sam saffron.\n\n.. _`mini_racer`: https://github.com/samsaffron/mini_racer\n\n`cookiecutter-pypackage`_ was used as this package skeleton.\n\n.. _`cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n\n\nhistory\n-------\n\n0.6.0 (2020-04-20)\n'''''''''''''''''''\n* update v8 to 8.9\n* optimize function calls without arguments\n* switch v8 to single threaded mode to avoid crashes after fork\n* switch to strict mode by default\n* revamp documentation\n\n0.5.0 (2020-02-25)\n'''''''''''''''''''\n* update v8 to 8.8\n\n0.4.0 (2020-09-22)\n'''''''''''''''''''\n* universal wheels for linux, mac and windows\n* fallback to source package for alpine linux\n\n0.3.0 (2020-06-29)\n'''''''''''''''''''\n* introduce a strict mode\n* fix array conversion when size changes dynamically (cve-2020-25489)\n\n0.2.0 (2020-03-11)\n'''''''''''''''''''\n* support for alpine linux\n* avoid pip private modules in setup.py\n\n0.2.0b1 (2020-01-09)\n'''''''''''''''''''''\n* support for windows 64 bits\n* support for python 3.8\n* upgrade v8 to 7.8\n* support soft memory limits\n\n0.1.18 (2019-01-04)\n''''''''''''''''''''\n* support memory and time limits\n\n0.1.17 (2018-19-12)\n''''''''''''''''''''\n* upgrade libv8\n* fix a memory leak\n\n0.1.16 (2018-07-11)\n''''''''''''''''''''\n* add wheel for python without pymalloc\n\n0.1.15 (2018-06-18)\n''''''''''''''''''''\n* add wheel for python 3.7\n\n\n0.1.14 (2018-05-25)\n''''''''''''''''''''\n* add support for pip 10\n* update package metadata\n\n0.1.13 (2018-03-15)\n''''''''''''''''''''\n* add heap_stats function\n* fix issue with returned strings containing null bytes\n\n0.1.12 (2018-17-04)\n''''''''''''''''''''\n* remove dependency to enum\n\n0.1.11 (2017-07-11)\n''''''''''''''''''''\n* add compatibility for centos6\n\n0.1.10 (2017-03-31)\n''''''''''''''''''''\n* add the possibility to pass a custom json encoder in call.\n\n0.1.9 (2017-03-24)\n'''''''''''''''''''\n* fix the compilation for ubuntu 12.04 and glibc < 2.17.\n\n0.1.8 (2017-03-02)\n'''''''''''''''''''\n* update targets build for better compatibility with old mac os x and linux platforms.\n\n0.1.7 (2016-10-04)\n'''''''''''''''''''\n* improve general performances of the js execution.\n* add the possibility to build a different version of v8 (for example with debug symbols).\n* fix a conflict that could happens between statically linked libraries and dynamic ones.\n\n0.1.6 (2016-08-12)\n'''''''''''''''''''\n* add error message when py_mini_racer sdist fails to build asking to update pip in order to download the pre-compiled wheel instead of the source distribution.\n\n0.1.5 (2016-08-04)\n'''''''''''''''''''\n* build py_mini_racer against a static python. when built against a shared library python, it doesn't work with a static python.\n\n0.1.4 (2016-08-04)\n'''''''''''''''''''\n* ensure jsevalexception message is converted to unicode\n\n0.1.3 (2016-08-04)\n'''''''''''''''''''\n* fix extension loading for python3\n* add a make target for building distributions (sdist + wheels)\n* fix eval conversion for python 3\n\n0.1.2 (2016-08-03)\n'''''''''''''''''''\n* fix date support\n* fix dockerfile for generating python3 wheels\n\n\n0.1.1 (2016-08-02)\n'''''''''''''''''''\n* fix sdist distribution.\n\n\n0.1.0 (2016-08-01)\n'''''''''''''''''''\n* first release on pypi.\n\n\n",
  "docs_url": null,
  "keywords": "py_mini_racer",
  "license": "iscl",
  "name": "py-mini-racer",
  "package_url": "https://pypi.org/project/py-mini-racer/",
  "project_url": "https://pypi.org/project/py-mini-racer/",
  "project_urls": {
    "Homepage": "https://github.com/sqreen/PyMiniRacer"
  },
  "release_url": "https://pypi.org/project/py-mini-racer/0.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "minimal, modern embedded v8 for python.",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "sqreen",
    "support@sqreen.com"
  ],
  "kwds": "py_mini_racer mini_racer pyminiracer mini_racer_ miniracer",
  "license_kwds": "iscl",
  "libtype": "pypi",
  "id": "pypi_py_mini_racer",
  "homepage": "https://github.com/sqreen/pyminiracer",
  "release_count": 27,
  "dependency_ids": []
}
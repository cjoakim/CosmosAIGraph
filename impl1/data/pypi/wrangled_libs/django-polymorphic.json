{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database"
  ],
  "description": ".. image::  https://travis-ci.org/django-polymorphic/django-polymorphic.svg?branch=master\n    :target: http://travis-ci.org/django-polymorphic/django-polymorphic\n.. image:: https://img.shields.io/pypi/v/django-polymorphic.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic/\n.. image:: https://img.shields.io/codecov/c/github/django-polymorphic/django-polymorphic/master.svg\n    :target: https://codecov.io/github/django-polymorphic/django-polymorphic?branch=master\n.. image:: https://readthedocs.org/projects/django-polymorphic/badge/?version=stable\n    :target: https://django-polymorphic.readthedocs.io/en/stable/\n\npolymorphic models for django\n=============================\n\ndjango-polymorphic simplifies using inherited models in django projects.\nwhen a query is made at the base model, the inherited model classes are returned.\n\nwhen we store models that inherit from a ``project`` model...\n\n.. code-block:: python\n\n    >>> project.objects.create(topic=\"department party\")\n    >>> artproject.objects.create(topic=\"painting with tim\", artist=\"t. turner\")\n    >>> researchproject.objects.create(topic=\"swallow aerodynamics\", supervisor=\"dr. winter\")\n\n...and want to retrieve all our projects, the subclassed models are returned!\n\n.. code-block:: python\n\n    >>> project.objects.all()\n    [ <project:         id 1, topic \"department party\">,\n      <artproject:      id 2, topic \"painting with tim\", artist \"t. turner\">,\n      <researchproject: id 3, topic \"swallow aerodynamics\", supervisor \"dr. winter\"> ]\n\nusing vanilla django, we get the base class objects, which is rarely what we wanted:\n\n.. code-block:: python\n\n    >>> project.objects.all()\n    [ <project: id 1, topic \"department party\">,\n      <project: id 2, topic \"painting with tim\">,\n      <project: id 3, topic \"swallow aerodynamics\"> ]\n\nthis also works when the polymorphic model is accessed via\nforeignkeys, manytomanyfields or onetoonefields.\n\nfeatures\n--------\n\n* full admin integration.\n* orm integration:\n\n  * support for foreignkey, manytomanyfield, onetoonefield descriptors.\n  * filtering/ordering of inherited models (``artproject___artist``).\n  * filtering model types: ``instance_of(...)`` and ``not_instance_of(...)``\n  * combining querysets of different models (``qs3 = qs1 | qs2``)\n  * support for custom user-defined managers.\n* uses the minumum amount of queries needed to fetch the inherited models.\n* disabling polymorphic behavior when needed.\n\nwhile *django-polymorphic* makes subclassed models easy to use in django,\nwe still encourage to use them with caution. each subclassed model will require\ndjango to perform an ``inner join`` to fetch the model fields from the database.\nwhile taking this in mind, there are valid reasons for using subclassed models.\nthat's what this library is designed for!\n\nthe current release of *django-polymorphic* supports django 2.1, 2.2, 3.0, 3.1\nand python 3.5+ is supported.\nfor older django versions, install *django-polymorphic==1.3*.\n\nfor more information, see the `documentation at read the docs <https://django-polymorphic.readthedocs.io/>`_.\n\ninstallation\n------------\n\ninstall using ``pip``\\ ...\n\n.. code:: bash\n\n    $ pip install django-polymorphic\n\nlicense\n=======\n\ndjango-polymorphic uses the same license as django (bsd-like).\n\n\n",
  "docs_url": null,
  "keywords": "django,polymorphic",
  "license": "",
  "name": "django-polymorphic",
  "package_url": "https://pypi.org/project/django-polymorphic/",
  "project_url": "https://pypi.org/project/django-polymorphic/",
  "project_urls": {
    "Download": "https://github.com/django-polymorphic/django-polymorphic/tarball/master",
    "Homepage": "https://github.com/django-polymorphic/django-polymorphic"
  },
  "release_url": "https://pypi.org/project/django-polymorphic/3.1.0/",
  "requires_dist": [
    "Django (>=2.1)"
  ],
  "requires_python": "",
  "summary": "seamless polymorphic inheritance for django models",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "bert.constantin@gmx.de",
    "bert_constantin",
    "christopher_glass",
    "tribaal@ubuntu.com"
  ],
  "kwds": "polymorphic django instance_of badge not_instance_of",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_polymorphic",
  "homepage": "https://github.com/django-polymorphic/django-polymorphic",
  "release_count": 40,
  "dependency_ids": [
    "pypi_django"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "# django - deprecate field\n\n[![pypi](https://img.shields.io/pypi/v/django-deprecate-fields.svg?branch=master)](https://pypi.python.org/pypi/django-deprecate-fields/)\n[![license](https://img.shields.io/github/license/3yourmind/django-deprecate-fields.svg)](./license)\n[![contributing](https://img.shields.io/badge/pr-welcome-green.svg)](https://github.com/3yourmind/django-deprecate-fields/pulls)\n[![3yourmind-careers](https://img.shields.io/badge/3yourmind-hiring-brightgreen.svg)](https://www.3yourmind.com/career)\n[![stars](https://img.shields.io/github/stars/3yourmind/django-deprecate-fields.svg?style=social&label=stars)](https://github.com/3yourmind/django-deprecate-fields/stargazers)\n\n## installation\n\n```\npip install django-deprecate-fields\n```\n\n## usage\n\nassume the simple following model:\n```python\nfrom django.db import models\n\nclass mymodel(models.model):\n    field1 = models.charfield()\n    field2 = models.charfield()\n```\n\nin order to remove `field1`, it should first be marked as deprecated:\n```python\nfrom django.db import models\nfrom django_deprecate_fields import deprecate_field\n\nclass mymodel(models.model):\n    field1 = deprecate_field(models.charfield())\n    field2 = models.charfield()\n```\n\nsecondly, `makemigrations` should be called, which will change the field to be nullable. any lingering references to it\nin your code will return `none` (or optionally any value or callable passed to `deprecate_field` as the\n`return_instead` argument)\n\nlastly, after the changes above have been deployed, `field1` can then safely be removed in the model (plus another\n`makemigrations` run)\n\n## contributing\n\nfirst of all, thank you very much for contributing to this project. please base\nyour work on the `master` branch and target `master` in your pull request.\n\n## license\n\n`django-deprecate-fields` is released under the [apache 2.0 license](./license).\n\n\n",
  "docs_url": null,
  "keywords": "django migration deprecation database backward compatibility",
  "license": "apache license 2.0",
  "name": "django-deprecate-fields",
  "package_url": "https://pypi.org/project/django-deprecate-fields/",
  "project_url": "https://pypi.org/project/django-deprecate-fields/",
  "project_urls": {
    "Homepage": "https://github.com/3YOURMIND/django-deprecate-fields"
  },
  "release_url": "https://pypi.org/project/django-deprecate-fields/0.1.1/",
  "requires_dist": [
    "Django (>=2.1)"
  ],
  "requires_python": "",
  "summary": "this package allows deprecating model fields and allows removing them in a backwards compatible manner.",
  "version": "0.1.1",
  "releases": [],
  "developers": [
    "3yourmind_gmbh"
  ],
  "kwds": "django_deprecate_fields django deprecate_field field2 badge",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_django_deprecate_fields",
  "homepage": "https://github.com/3yourmind/django-deprecate-fields",
  "release_count": 6,
  "dependency_ids": [
    "pypi_django"
  ]
}
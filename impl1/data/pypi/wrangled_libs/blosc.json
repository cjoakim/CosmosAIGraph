{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: archiving :: compression"
  ],
  "description": "============\npython-blosc\n============\n\na python wrapper for the extremely fast blosc compression library\n=================================================================\n\n:author: the blosc development team\n:contact: blosc@blosc.org\n:github: https://github.com/blosc/python-blosc\n:url: https://www.blosc.org/python-blosc/python-blosc.html\n:pypi: |version|\n:anaconda: |anaconda|\n:gitter: |gitter|\n:code of conduct: |contributor covenant|\n\n.. |version| image:: https://img.shields.io/pypi/v/blosc.png\n        :target: https://pypi.python.org/pypi/blosc\n.. |anaconda| image:: https://anaconda.org/conda-forge/python-blosc/badges/version.svg\n        :target: https://anaconda.org/conda-forge/python-blosc\n.. |gitter| image:: https://badges.gitter.im/blosc/c-blosc.svg\n        :target: https://gitter.im/blosc/c-blosc\n.. |contributor covenant| image:: https://img.shields.io/badge/contributor%20covenant-v2.0%20adopted-ff69b4.svg\n        :target: https://github.com/blosc/community/blob/master/code_of_conduct.md\n\n\nwhat it is\n==========\n\nblosc (http://blosc.org) is a high performance compressor optimized for\nbinary data.  it has been designed to transmit data to the processor\ncache faster than the traditional, non-compressed, direct memory fetch\napproach via a memcpy() os call.\n\nblosc works well for compressing numerical arrays that contains data\nwith relatively low entropy, like sparse data, time series, grids with\nregular-spaced values, etc.\n\npython-blosc a python package that wraps blosc.  python-blosc supports\npython 3.8 or higher versions.\n\n\ninstalling\n==========\n\n\nblosc is now offering python wheels for the main os (win, mac and linux) and platforms. you can install binary packages from pypi using ``pip``:\n\n.. code-block:: console\n\n    $ pip install blosc\n\n\ndocumentation\n=============\n\nthe sphinx based documentation is here:\n\nhttps://blosc.org/python-blosc/python-blosc.html\n\nalso, some examples are available on python-blosc wiki page:\n\nhttps://github.com/blosc/python-blosc/wiki\n\nlastly, here is the `recording\n<https://www.youtube.com/watch?v=rilu44j_wuu&list=plnkwzv63corw83ny3u93guar645jtxpjf&index=15>`_\nand the `slides\n<http://www.blosc.org/docs/haenel-ep14-compress-me-stupid.pdf>`_ from the talk\n\"compress me stupid\" at the europython 2014.\n\nbuilding\n========\n\nif you need more control, there are different ways to compile python-blosc,\ndepending if you want to link with an already installed blosc library or not.\n\n\ninstalling via setuptools\n-------------------------\n\n`python-blosc` comes with the blosc sources with it and can be built with:\n\n.. code-block:: console\n\n    $ python -m pip install -r requirements-dev.txt\n    $ python setup.py build_ext --inplace\n\nany codec can be enabled (`=1`) or disabled (`=0`) on this build-path with the appropriate\nos environment variables `include_lz4`, `include_snappy`, `include_zlib`, and\n`include_zstd`. by default all the codecs in blosc are enabled except snappy\n(due to some issues with c++ with the `gcc` toolchain).\n\ncompiler specific optimisations are automatically enabled by inspecting\nthe cpu flags building blosc. they can be manually disabled by setting\nthe following environmental variables: `disable_blosc_sse2` and\n`disable_blosc_avx2`.\n\n`setuptools` is limited to using the compiler specified in the environment\nvariable `cc` which on posix systems is usually `gcc`. this often causes\ntrouble with the snappy codec, which is written in c++, and as a result snappy\nis no longer compiled by default. this problem is not known to affect msvc or\nclang. snappy is considered optional in blosc as its compression performance\nis below that of the other codecs.\n\nthat's all. you can proceed with testing section now.\n\n\ncompiling with an installed blosc library\n-----------------------------------------\n\nthis approach uses pre-built, fully optimized versions of blosc built via\ncmake.\n\ngo to https://github.com/blosc/c-blosc/releases and download and install\nthe c-blosc library.  then, you can tell python-blosc where is the\nc-blosc library in a couple of ways:\n\nusing an environment variable:\n\n.. code-block:: console\n\n    $ export use_system_blosc=1                 # or \"set use_system_blosc=1\" on windows\n    $ export blosc_root=/usr/local/customprefix # if you installed blosc into a custom location\n    $ python setup.py build_ext --inplace\n\nusing flags:\n\n.. code-block:: console\n\n    $ python setup.py build_ext --inplace -duse_system_blosc:bool=yes -dblosc_root:path=/usr/local/customprefix\n\n\ntesting\n=======\n\nafter compiling, you can quickly check that the package is sane by\nrunning the doctests in ``blosc/test.py``:\n\n.. code-block:: console\n\n    $ python -m blosc.test  (add -v for verbose mode)\n\nonce installed, you can re-run the tests at any time with:\n\n.. code-block:: console\n\n    $ python -c \"import blosc; blosc.test()\"\n\nbenchmarking\n============\n\nif curious, you may want to run a small benchmark that compares a plain\nnumpy array copy against compression through different compressors in\nyour blosc build:\n\n.. code-block:: console\n\n  $ pythonpath=. python bench/compress_ptr.py\n\njust to whet your appetite, here are the results for an intel xeon\ne5-2695 v3 @ 2.30ghz, running python 3.5, centos 7, but ymmv (and\nwill vary!)::\n\n  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  python-blosc version: 1.5.1.dev0\n  blosc version: 1.11.2 ($date:: 2017-01-27 #$)\n  compressors available: ['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']\n  compressor library versions:\n    blosclz: 1.0.5\n    lz4: 1.7.5\n    snappy: 1.1.1\n    zlib: 1.2.7\n    zstd: 1.1.2\n  python version: 3.5.2 |continuum analytics, inc.| (default, jul  2 2016, 17:53:06)\n  [gcc 4.4.7 20120313 (red hat 4.4.7-1)]\n  platform: linux-3.10.0-327.18.2.el7.x86_64-x86_64 (#1 smp thu may 12 11:03:55 utc 2016)\n  linux dist: centos linux 7.2.1511\n  processor: x86_64\n  byte-ordering: little\n  detected cores: 56\n  number of threads to use by default: 4\n    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  creating numpy arrays with 10**8 int64/float64 elements:\n    *** ctypes.memmove() *** time for memcpy():\t0.276 s\t(2.70 gb/s)\n\n  times for compressing/decompressing with clevel=5 and 24 threads\n\n  *** the arange linear distribution ***\n    *** blosclz , noshuffle  ***  0.382 s (1.95 gb/s) / 0.300 s (2.48 gb/s)\tcompr. ratio:   1.0x\n    *** blosclz , shuffle    ***  0.042 s (17.77 gb/s) / 0.027 s (27.18 gb/s)\tcompr. ratio:  57.1x\n    *** blosclz , bitshuffle ***  0.094 s (7.94 gb/s) / 0.041 s (18.28 gb/s)\tcompr. ratio:  74.0x\n    *** lz4     , noshuffle  ***  0.156 s (4.79 gb/s) / 0.052 s (14.30 gb/s)\tcompr. ratio:   2.0x\n    *** lz4     , shuffle    ***  0.033 s (22.58 gb/s) / 0.034 s (22.03 gb/s)\tcompr. ratio:  68.6x\n    *** lz4     , bitshuffle ***  0.059 s (12.63 gb/s) / 0.053 s (14.18 gb/s)\tcompr. ratio:  33.1x\n    *** lz4hc   , noshuffle  ***  0.443 s (1.68 gb/s) / 0.070 s (10.62 gb/s)\tcompr. ratio:   2.0x\n    *** lz4hc   , shuffle    ***  0.102 s (7.31 gb/s) / 0.029 s (25.42 gb/s)\tcompr. ratio:  97.5x\n    *** lz4hc   , bitshuffle ***  0.206 s (3.62 gb/s) / 0.038 s (19.85 gb/s)\tcompr. ratio: 180.5x\n    *** snappy  , noshuffle  ***  0.154 s (4.84 gb/s) / 0.056 s (13.28 gb/s)\tcompr. ratio:   2.0x\n    *** snappy  , shuffle    ***  0.044 s (16.89 gb/s) / 0.047 s (15.95 gb/s)\tcompr. ratio:  17.4x\n    *** snappy  , bitshuffle ***  0.064 s (11.58 gb/s) / 0.061 s (12.26 gb/s)\tcompr. ratio:  18.2x\n    *** zlib    , noshuffle  ***  1.172 s (0.64 gb/s) / 0.135 s (5.50 gb/s)\tcompr. ratio:   5.3x\n    *** zlib    , shuffle    ***  0.260 s (2.86 gb/s) / 0.086 s (8.67 gb/s)\tcompr. ratio: 120.8x\n    *** zlib    , bitshuffle ***  0.262 s (2.84 gb/s) / 0.094 s (7.96 gb/s)\tcompr. ratio: 260.1x\n    *** zstd    , noshuffle  ***  0.973 s (0.77 gb/s) / 0.093 s (8.00 gb/s)\tcompr. ratio:   7.8x\n    *** zstd    , shuffle    ***  0.093 s (7.97 gb/s) / 0.023 s (32.71 gb/s)\tcompr. ratio: 156.7x\n    *** zstd    , bitshuffle ***  0.115 s (6.46 gb/s) / 0.029 s (25.60 gb/s)\tcompr. ratio: 320.6x\n\n  *** the linspace linear distribution ***\n    *** blosclz , noshuffle  ***  0.341 s (2.19 gb/s) / 0.291 s (2.56 gb/s)\tcompr. ratio:   1.0x\n    *** blosclz , shuffle    ***  0.132 s (5.65 gb/s) / 0.023 s (33.10 gb/s)\tcompr. ratio:   2.0x\n    *** blosclz , bitshuffle ***  0.166 s (4.50 gb/s) / 0.036 s (20.89 gb/s)\tcompr. ratio:   2.8x\n    *** lz4     , noshuffle  ***  0.142 s (5.26 gb/s) / 0.028 s (27.07 gb/s)\tcompr. ratio:   1.0x\n    *** lz4     , shuffle    ***  0.093 s (8.01 gb/s) / 0.030 s (24.87 gb/s)\tcompr. ratio:   3.4x\n    *** lz4     , bitshuffle ***  0.102 s (7.31 gb/s) / 0.039 s (19.13 gb/s)\tcompr. ratio:   5.3x\n    *** lz4hc   , noshuffle  ***  0.700 s (1.06 gb/s) / 0.044 s (16.77 gb/s)\tcompr. ratio:   1.1x\n    *** lz4hc   , shuffle    ***  0.203 s (3.67 gb/s) / 0.021 s (36.22 gb/s)\tcompr. ratio:   8.6x\n    *** lz4hc   , bitshuffle ***  0.342 s (2.18 gb/s) / 0.028 s (26.50 gb/s)\tcompr. ratio:  14.2x\n    *** snappy  , noshuffle  ***  0.271 s (2.75 gb/s) / 0.274 s (2.72 gb/s)\tcompr. ratio:   1.0x\n    *** snappy  , shuffle    ***  0.099 s (7.54 gb/s) / 0.042 s (17.55 gb/s)\tcompr. ratio:   4.2x\n    *** snappy  , bitshuffle ***  0.127 s (5.86 gb/s) / 0.043 s (17.20 gb/s)\tcompr. ratio:   6.1x\n    *** zlib    , noshuffle  ***  1.525 s (0.49 gb/s) / 0.158 s (4.70 gb/s)\tcompr. ratio:   1.6x\n    *** zlib    , shuffle    ***  0.346 s (2.15 gb/s) / 0.098 s (7.59 gb/s)\tcompr. ratio:  10.7x\n    *** zlib    , bitshuffle ***  0.420 s (1.78 gb/s) / 0.104 s (7.20 gb/s)\tcompr. ratio:  18.0x\n    *** zstd    , noshuffle  ***  1.061 s (0.70 gb/s) / 0.096 s (7.79 gb/s)\tcompr. ratio:   1.9x\n    *** zstd    , shuffle    ***  0.203 s (3.68 gb/s) / 0.052 s (14.21 gb/s)\tcompr. ratio:  14.2x\n    *** zstd    , bitshuffle ***  0.251 s (2.97 gb/s) / 0.047 s (15.84 gb/s)\tcompr. ratio:  22.2x\n\n  *** the random distribution ***\n    *** blosclz , noshuffle  ***  0.340 s (2.19 gb/s) / 0.285 s (2.61 gb/s)\tcompr. ratio:   1.0x\n    *** blosclz , shuffle    ***  0.091 s (8.21 gb/s) / 0.017 s (44.29 gb/s)\tcompr. ratio:   3.9x\n    *** blosclz , bitshuffle ***  0.080 s (9.27 gb/s) / 0.029 s (26.12 gb/s)\tcompr. ratio:   6.1x\n    *** lz4     , noshuffle  ***  0.150 s (4.95 gb/s) / 0.027 s (28.05 gb/s)\tcompr. ratio:   2.4x\n    *** lz4     , shuffle    ***  0.068 s (11.02 gb/s) / 0.029 s (26.03 gb/s)\tcompr. ratio:   4.5x\n    *** lz4     , bitshuffle ***  0.063 s (11.87 gb/s) / 0.054 s (13.70 gb/s)\tcompr. ratio:   6.2x\n    *** lz4hc   , noshuffle  ***  0.645 s (1.15 gb/s) / 0.019 s (39.22 gb/s)\tcompr. ratio:   3.5x\n    *** lz4hc   , shuffle    ***  0.257 s (2.90 gb/s) / 0.022 s (34.62 gb/s)\tcompr. ratio:   5.1x\n    *** lz4hc   , bitshuffle ***  0.128 s (5.80 gb/s) / 0.029 s (25.52 gb/s)\tcompr. ratio:   6.2x\n    *** snappy  , noshuffle  ***  0.164 s (4.54 gb/s) / 0.048 s (15.46 gb/s)\tcompr. ratio:   2.2x\n    *** snappy  , shuffle    ***  0.082 s (9.09 gb/s) / 0.043 s (17.39 gb/s)\tcompr. ratio:   4.3x\n    *** snappy  , bitshuffle ***  0.071 s (10.48 gb/s) / 0.046 s (16.08 gb/s)\tcompr. ratio:   5.0x\n    *** zlib    , noshuffle  ***  1.223 s (0.61 gb/s) / 0.093 s (7.97 gb/s)\tcompr. ratio:   4.0x\n    *** zlib    , shuffle    ***  0.636 s (1.17 gb/s) / 0.126 s (5.89 gb/s)\tcompr. ratio:   5.5x\n    *** zlib    , bitshuffle ***  0.327 s (2.28 gb/s) / 0.109 s (6.81 gb/s)\tcompr. ratio:   6.2x\n    *** zstd    , noshuffle  ***  1.432 s (0.52 gb/s) / 0.103 s (7.27 gb/s)\tcompr. ratio:   4.2x\n    *** zstd    , shuffle    ***  0.388 s (1.92 gb/s) / 0.031 s (23.71 gb/s)\tcompr. ratio:   5.9x\n    *** zstd    , bitshuffle ***  0.127 s (5.86 gb/s) / 0.033 s (22.77 gb/s)\tcompr. ratio:   6.4x\n\n\nalso, blosc works quite well on arm processors (even without neon support yet)::\n\n    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n    python-blosc version: 1.4.4\n    blosc version: 1.11.2 ($date:: 2017-01-27 #$)\n    compressors available: ['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']\n    compressor library versions:\n      blosclz: 1.0.5\n      lz4: 1.7.5\n      snappy: 1.1.1\n      zlib: 1.2.8\n      zstd: 1.1.2\n    python version: 3.6.0 (default, dec 31 2016, 21:20:16)\n    [gcc 4.9.2]\n    platform: linux-3.4.113-sun8i-armv7l (#50 smp preempt mon nov 14 08:41:55 cet 2016)\n    linux dist: debian 9.0\n    processor: not recognized\n    byte-ordering: little\n    detected cores: 4\n    number of threads to use by default: 4\n    -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n      *** ctypes.memmove() *** time for memcpy():   0.015 s (93.57 mb/s)\n\n    times for compressing/decompressing with clevel=5 and 4 threads\n\n    *** user input ***\n      *** blosclz , noshuffle  ***  0.015 s (89.93 mb/s) / 0.010 s (138.32 mb/s)    compr. ratio:   2.7x\n      *** blosclz , shuffle    ***  0.023 s (60.25 mb/s) / 0.012 s (112.71 mb/s)    compr. ratio:   2.3x\n      *** blosclz , bitshuffle ***  0.018 s (77.63 mb/s) / 0.021 s (66.76 mb/s)     compr. ratio:   7.3x\n      *** lz4     , noshuffle  ***  0.008 s (177.14 mb/s) / 0.009 s (159.00 mb/s)   compr. ratio:   3.6x\n      *** lz4     , shuffle    ***  0.010 s (131.29 mb/s) / 0.012 s (117.69 mb/s)   compr. ratio:   3.5x\n      *** lz4     , bitshuffle ***  0.015 s (89.97 mb/s) / 0.022 s (63.62 mb/s)     compr. ratio:   8.4x\n      *** lz4hc   , noshuffle  ***  0.071 s (19.30 mb/s) / 0.007 s (186.64 mb/s)    compr. ratio:   8.6x\n      *** lz4hc   , shuffle    ***  0.079 s (17.30 mb/s) / 0.014 s (95.99 mb/s)     compr. ratio:   6.2x\n      *** lz4hc   , bitshuffle ***  0.062 s (22.23 mb/s) / 0.027 s (51.53 mb/s)     compr. ratio:   9.7x\n      *** snappy  , noshuffle  ***  0.008 s (173.87 mb/s) / 0.009 s (148.77 mb/s)   compr. ratio:   4.4x\n      *** snappy  , shuffle    ***  0.011 s (123.22 mb/s) / 0.016 s (85.16 mb/s)    compr. ratio:   4.4x\n      *** snappy  , bitshuffle ***  0.015 s (89.02 mb/s) / 0.021 s (64.87 mb/s)     compr. ratio:   6.2x\n      *** zlib    , noshuffle  ***  0.047 s (29.26 mb/s) / 0.011 s (121.83 mb/s)    compr. ratio:  14.7x\n      *** zlib    , shuffle    ***  0.080 s (17.20 mb/s) / 0.022 s (63.61 mb/s)     compr. ratio:   9.4x\n      *** zlib    , bitshuffle ***  0.059 s (23.50 mb/s) / 0.033 s (41.10 mb/s)     compr. ratio:  10.5x\n      *** zstd    , noshuffle  ***  0.113 s (12.21 mb/s) / 0.011 s (124.64 mb/s)    compr. ratio:  15.6x\n      *** zstd    , shuffle    ***  0.154 s (8.92 mb/s) / 0.026 s (52.56 mb/s)      compr. ratio:   9.9x\n      *** zstd    , bitshuffle ***  0.116 s (11.86 mb/s) / 0.036 s (38.40 mb/s)     compr. ratio:  11.4x\n\nfor details on the arm benchmark see: https://github.com/blosc/python-blosc/issues/105\n\nin case you find your own results interesting, please report them back\nto the authors!\n\nlicense\n=======\n\nthe software is licenses under a 3-clause bsd licsense. a copy of the\npython-blosc license can be found in\n`license.txt <https://github.com/blosc/python-blosc/blob/main/license.txt>`_.\n\nmailing list\n============\n\ndiscussion about this module is welcome in the blosc list:\n\nblosc@googlegroups.com\n\nhttp://groups.google.es/group/blosc\n\n----\n\n  **enjoy data!**\n\n\n.. local variables:\n.. mode: rst\n.. coding: utf-8\n.. fill-column: 72\n.. end:\n",
  "docs_url": null,
  "keywords": "",
  "license": "https://opensource.org/licenses/bsd-3-clause",
  "name": "blosc",
  "package_url": "https://pypi.org/project/blosc/",
  "project_url": "https://pypi.org/project/blosc/",
  "project_urls": {
    "Homepage": "http://github.com/blosc/python-blosc"
  },
  "release_url": "https://pypi.org/project/blosc/1.11.1/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "blosc data compressor",
  "version": "1.11.1",
  "releases": [],
  "developers": [
    "blosc@blosc.org",
    "the_blosc_development_team"
  ],
  "kwds": "blosc compression use_system_blosc blosc_root blosclz",
  "license_kwds": "https://opensource.org/licenses/bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_blosc",
  "homepage": "http://github.com/blosc/python-blosc",
  "release_count": 47,
  "dependency_ids": []
}
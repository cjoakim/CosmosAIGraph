{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: sql",
    "topic :: database",
    "topic :: database :: front-ends",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "sqlalchemy dialect for sap hana\n===============================\n\n.. image:: https://api.reuse.software/badge/github.com/sap/sqlalchemy-hana\n    :target: https://api.reuse.software/info/github.com/sap/sqlalchemy-hana\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\nthis dialect allows you to use the sap hana database with sqlalchemy.\nit uses ``hdbcli`` to connect to sap hana.\nplease notice that sqlalchemy-hana isn't an official sap product and isn't covered by sap support.\n\nprerequisites\n-------------\n* python 3.8+\n* sqlalchemy 1.4 or 2.x\n* `hdbcli <https://help.sap.com/viewer/f1b440ded6144a54ada97ff95dac7adf/latest/en-us/f3b8fabf34324302b123297cdbe710f0.html>`_\n\ninstall\n-------\ninstall from the python package index:\n\n.. code-block:: bash\n\n    $ pip install sqlalchemy-hana\n\nversioning\n----------\nsqlalchemy-hana follows the semantic versioning standard, meaning that breaking changes will\nonly be added in major releases.\nplease note, that only the following modules are considered to be part of the public api\n\n- ``sqlalchemy_hana.types``\n\nfor these, only exported members (part of ``__all__`` ) are guaranteed to be stable.\n\ngetting started\n---------------\nif you do not have access to a sap hana server, you can also use the\n`sap hana express edition <https://www.sap.com/cmp/td/sap-hana-express-edition.html>`_.\n\nafter installation of sqlalchemy-hana, you can create a engine which connects to a sap hana\ninstance. this engine works like all other engines of sqlalchemy.\n\n.. code-block:: python\n\n    from sqlalchemy import create_engine\n    engine = create_engine('hana://username:password@example.de:30015')\n\nalternatively, you can use hdb user store to avoid entering connection-related information manually\neach time you want to establish a connection to an sap hana database:\n\n.. code-block:: python\n\n    from sqlalchemy import create_engine\n    engine = create_engine('hana://userkey=my_user_store_key')\n\nyou can create your user key in the user store using the following command:\n\n.. code-block::\n\n\thdbuserstore set <key> <host:port> <username> <password>\n\nin case of a tenant database, you may use:\n\n.. code-block:: python\n\n    from sqlalchemy import create_engine\n    engine = engine = create_engine('hana://user:pass@host/tenant_db_name')\n\nusage\n-----\n\nspecial create table argument\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsqlalchemy-hana provides a special argument called \u201chana_table_type\u201d which can be used to\nspecify the type of table one wants to create with sap hana (i.e. row/column).\nthe default table type depends on your sap hana configuration and version.\n\n.. code-block:: python\n\n    t = table('my_table', metadata, column('id', integer), hana_table_type = 'column')\n\ncase sensitivity\n~~~~~~~~~~~~~~~~\nin sap hana, all case insensitive identifiers are represented using uppercase text.\nin sqlalchemy on the other hand all lower case identifier names are considered to be case insensitive.\nthe sqlalchemy-hana dialect converts all case insensitive and case sensitive identifiers to the\nright casing during schema level communication.\nin the sqlalchemy-hana dialect, using an uppercase name on the sqlalchemy side indicates a case\nsensitive identifier, and sqlalchemy will quote the name,which may cause case mismatches between\ndata received from sap hana.\nunless identifier names have been truly created as case sensitive (i.e. using quoted names),\nall lowercase names should be used on the sqlalchemy side.\n\nauto increment behavior\n~~~~~~~~~~~~~~~~~~~~~~~\nsqlalchemy table objects which include integer primary keys are usually assumed to have\n\u201cauto incrementing\u201d behavior, which means that primary key values can be automatically generated\nupon insert.\nsince sap hana has no auto-increment feature, sqlalchemy relies upon sequences to automatically\ngenerate primary key values.\nthese sequences must be explicitly specified to enable auto-incrementing behavior.\n\nto create sequences, use the ``sqlalchemy.schema.sequence`` object which is passed to a\n``column`` construct.\n\n.. code-block:: python\n\n    t = table('my_table', metadata, column('id', integer, sequence('id_seq'), primary key=true))\n\nlimit/offset support\n~~~~~~~~~~~~~~~~~~~~\nsap hana supports both ``limit`` and ``offset``, but it only supports ``offset`` in conjunction with\n``limit`` i.e. in the select statement the offset parameter cannot be set without the ``limit``\nclause, hence in sqlalchemy-hana if the user tries to use offset without limit, a limit of\n``2147384648`` would be set, this has been done so that the users can smoothly use ``limit`` or\n``offset`` as in other databases that do not have this limitation.\n``2147384648`` was chosen, because it is the maximum number of records per result set.\n\nreturning support\n~~~~~~~~~~~~~~~~~\nsqlalchemy-hana does not support ``returning`` in the ``insert``, ``update`` and ``delete``\nstatements to retrieve result sets of matched rows from ``insert``, ``update`` and ``delete``\nstatements because newly generated primary key values are neither fetched nor returned automatically\nin sap hana and sap hana does not support the syntax ``insert... returning...``.\n\nreflection\n~~~~~~~~~~\nthe sqlalchemy-hana dialect supports all reflection capabilities of sqlalchemy.\nthe inspector used for the sap hana database is an instance of ``hanainspector`` and offers an\nadditional method which returns the oid (object id) for the given table name.\n\n.. code-block:: python\n\n    from sqlalchemy import create_engine, inspect\n\n    engine = create_engine(\"hana://username:password@example.de:30015\")\n    insp = inspect(engine)  # will be a hanainspector\n    print(insp.get_table_oid('my_table'))\n\nforeign key constraints\n~~~~~~~~~~~~~~~~~~~~~~~\nin sap hana the following ``update`` and ``delete`` foreign key referential actions are available:\n\n* restrict\n* cascade\n* set null\n* set default\n\nthe foreign key referential option ``no action`` does not exist in sap hana.\nthe default is ``restrict``.\n\nunique constraints\n~~~~~~~~~~~~~~~~~~\nfor each unique constraint an index is created in sap hana, this may lead to unexpected behavior\nin programs using reflection.\n\ndata types\n~~~~~~~~~~\nas with all sqlalchemy dialects, all uppercase types that are known to be valid with sap hana are\nimportable from the top level dialect, whether they originate from sqlalchemy types or from the\nlocal dialect.\ntherefore all supported types are part of the ``sqlalchemy_hana.types`` module and can be used from\nthere.\n\nsqlalchemy-hana aims to support as many sqlalchemy types as possible and to fallback to a similar\ntype of the requested type is not supported in sap hana.\nthe following table shows the mapping:\n\n.. list-table::\n    :header-rows: 1\n\n    * - sqlalchemy type\n      - hana type\n    * - datetime\n      - timestamp\n    * - numeric\n      - decimal\n    * - string\n      - nvarchar\n    * - unicode\n      - nvarchar\n    * - text\n      - nclob\n    * - binary\n      - varbinary\n    * - double_precision\n      - double\n    * - uuid\n      - nvarchar(32)\n    * - largebinary\n      - blob\n    * - unicodetext\n      - nclob\n\nplease note, that some types might not support a length, precision or scale, even if the sqlalchemy\ntype class accepts them.\nthe type compiler will then just ignore these arguments are render a type which will not lead to a\nsql error.\n\nregex\n~~~~~\nsqlalchemy-hana supports the ``regexp_match`` and ``regexp_replace``\nfunctions provided by sqlalchemy.\n\nbound parameter styles\n~~~~~~~~~~~~~~~~~~~~~~\nthe default parameter style for the sqlalchemy-hana dialect is ``qmark``, where sql is rendered\nusing the following style:\n\n.. code-block:: sql\n\n    where my_column = ?\n\nboolean\n~~~~~~~\nby default, sqlalchemy-hana uses native boolean types.\nhowever, older versions of sqlalchemy-hana used integer columns to represent these values leading\nto a compatibility gap.\nto *disable* native boolean support, add ``use_native_boolean=false`` to ``create_engine``.\n\nusers are encouraged to switch to native booleans.\nthis can be e.g. done by using ``alembic``:\n\n.. code-block:: python\n\n    from sqlalchemy import false\n\n    # assuming a table tab with a tinyint column named valid\n    def upgrade() -> none:\n        op.add_column(column(\"tab\", column('valid_tmp', boolean, server_default=false())))\n        op.get_bind().execute(\"update tab set valid_tmp = true where valid = 1\")\n        op.drop_column(\"tab\", \"valid\")\n        op.get_bind().execute(\"rename column tab.valid_tmp to valid\")\n        # optionally, remove also the server default by using alter column\n\ncomputed columns\n~~~~~~~~~~~~~~~~\nsap hana supports two computed/calculated columns:\n\n* <col> as <expr>: the column is fully virtual and the expression is evaluated with each select\n* <col> generated always as <expr>: the expression is evaluated during insertion and the value\n    is stored in the table\n\nby default, sqlalchemy-hana creates a ``generated always as`` if a ``computed`` column is used.\nif ``computed(persisted=false)`` is used, a fully virtual column using ``as`` is created.\n\nalembic\n-------\nthe sqlalchemy-hana dialect also contains a dialect for ``alembic``.\nthis dialect is active as soon as ``alembic`` is installed.\nto ensure version compatibility, install sqlalchemy-hana as followed:\n\n.. code-block:: bash\n\n    $ pip install sqlalchemy-hana[alembic]\n\ncookbook\n--------\n\nidentity feature\n~~~~~~~~~~~~~~~~\nsap hana also comes with an option to have an ``identity`` column which can also be used to create\nnew primary key values for integer-based primary key columns.\nbuilt-in support for rendering of ``identity`` is not available yet, however the following compilation\nhook may be used to make use of\nthe identity feature.\n\n.. code-block:: python\n\n    from sqlalchemy.schema import createcolumn\n    from sqlalchemy.ext.compiler import compiles\n\n    @compiles(createcolumn, 'hana')\n    def use_identity(element, compiler, **kw):\n        text = compiler.visit_create_column(element, **kw)\n        text = text.replace('not null', 'not null generated by default as identity')\n        return text\n\n    t = table('t', meta, column('id', integer, primary_key=true), column('data', string))\n\n    t.create(engine)\n\ndevelopment setup\n-----------------\nwe recommend the usage of ``pyenv`` to install a proper 3.11 python version for development.\n\n* ``pyenv install 3.11``\n* ``python311 -m venv venv``\n* ``source venv/bin/activate``\n* ``pip install -u pip``\n* ``pip install -e .[dev,test,alembic]``\n\nto execute the tests, use ``pyenv``.\nthe linters and formatters can be executed using ``pre-commit``: ``pre-commit run -a``.\n\ntesting\n-------\n**pre-submit**: linters, formatters and test matrix\n**post-submit**: linters and formatters\n\nrelease actions\n---------------\n* update the version in the pyproject.toml\n* add an entry in the changelog\n* push a new tag like vx.x.x to trigger the release\n\nsupport, feedback, contributing\n-------------------------------\nthis project is open to feature requests/suggestions, bug reports etc.\nvia `github issues <https://github.com/sap/sqlalchemy-hana/issues>`_.\ncontribution and feedback are encouraged and always welcome.\nfor more information about how to contribute, the project structure,\nas well as additional contribution information, see our\n`contribution guidelines <https://github.com/sap/sqlalchemy-hana/blob/main/contributing.md>`_.\n\nsecurity / disclosure\n---------------------\nif you find any bug that may be a security problem, please follow our instructions at\n`in our security policy <https://github.com/sap/sqlalchemy-hana/security/policy>`_ on how to report it.\nplease do not create github issues for security-related doubts or problems.\n\ncode of conduct\n---------------\nwe as members, contributors, and leaders pledge to make participation in our community a\nharassment-free experience for everyone.\nby participating in this project, you agree to abide by its\n`code of conduct <https://github.com/sap/.github/blob/main/code_of_conduct.md>`_ at all times.\n\nlicensing\n---------\ncopyright 2023 sap se or an sap affiliate company and sqlalchemy-hana contributors.\nplease see our `license <https://github.com/sap/sqlalchemy-hana/blob/main/license>`_\nfor copyright and license information.\ndetailed information including third-party components and their licensing/copyright information\nis available `via the reuse tool <https://api.reuse.software/info/github.com/sap/sqlalchemy-hana>`_.\n",
  "docs_url": null,
  "keywords": "sqlalchemy,sap,hana",
  "license": "apache-2.0",
  "name": "sqlalchemy-hana",
  "package_url": "https://pypi.org/project/sqlalchemy-hana/",
  "project_url": "https://pypi.org/project/sqlalchemy-hana/",
  "project_urls": {
    "Changelog": "https://github.com/SAP/sqlalchemy-hana/blob/main/CHANGES.rst",
    "Issue Tracker": "https://github.com/SAP/sqlalchemy-hana/issues",
    "Repository": "https://github.com/SAP/sqlalchemy-hana"
  },
  "release_url": "https://pypi.org/project/sqlalchemy-hana/1.1.1/",
  "requires_dist": [
    "sqlalchemy <3,>=1.4.0",
    "hdbcli ~=2.10",
    "alembic ~=1.12 ; extra == 'alembic'",
    "isort ==5.12.0 ; extra == 'dev'",
    "black ==23.11.0 ; extra == 'dev'",
    "pre-commit ==3.5.0 ; extra == 'dev'",
    "flake8 ==6.1.0 ; extra == 'dev'",
    "pylint ==3.0.2 ; extra == 'dev'",
    "mypy ==1.7.0 ; extra == 'dev'",
    "types-hdbcli ==2.18.0.1 ; extra == 'dev'",
    "pytest ==7.4.3 ; extra == 'test'",
    "pytest-cov ==4.1.0 ; extra == 'test'",
    "coverage[toml] ==7.3.2 ; extra == 'test'",
    "diff-cover[toml] ==8.0.1 ; extra == 'test'"
  ],
  "requires_python": "~=3.8",
  "summary": "sqlalchemy dialect for sap hana",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "christoph.heer@sap.com",
    "kai.mueller01@sap.com"
  ],
  "kwds": "sqlalchemy_hana hana_table_type sqlalchemy sap hanainspector",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_sqlalchemy_hana",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": [
    "pypi_alembic",
    "pypi_black",
    "pypi_coverage",
    "pypi_diff_cover",
    "pypi_flake8",
    "pypi_hdbcli",
    "pypi_isort",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sqlalchemy",
    "pypi_types_hdbcli"
  ]
}
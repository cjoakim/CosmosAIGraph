{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: financial and insurance industry",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering"
  ],
  "description": "bottleneck is a collection of fast numpy array functions written in c.\n\nlet's give it a try. create a numpy array::\n\n    >>> import numpy as np\n    >>> a = np.array([1, 2, np.nan, 4, 5])\n\nfind the nanmean::\n\n    >>> import bottleneck as bn\n    >>> bn.nanmean(a)\n    3.0\n\nmoving window mean::\n\n    >>> bn.move_mean(a, window=2, min_count=1)\n    array([ 1. ,  1.5,  2. ,  4. ,  4.5])\n\nbenchmark\n=========\n\nbottleneck comes with a benchmark suite::\n\n    >>> bn.bench()\n    bottleneck performance benchmark\n        bottleneck 1.3.0.dev0+122.gb1615d7; numpy 1.16.4\n        speed is numpy time divided by bottleneck time\n        nan means approx one-fifth nans; float64 used\n\n                  no nan     no nan      nan       no nan      nan\n                   (100,)  (1000,1000)(1000,1000)(1000,1000)(1000,1000)\n                   axis=0     axis=0     axis=0     axis=1     axis=1\n    nansum         29.7        1.4        1.6        2.0        2.1\n    nanmean        99.0        2.0        1.8        3.2        2.5\n    nanstd        145.6        1.8        1.8        2.7        2.5\n    nanvar        138.4        1.8        1.8        2.8        2.5\n    nanmin         27.6        0.5        1.7        0.7        2.4\n    nanmax         26.6        0.6        1.6        0.7        2.5\n    median        120.6        1.3        4.9        1.1        5.7\n    nanmedian     117.8        5.0        5.7        4.8        5.5\n    ss             13.2        1.2        1.3        1.5        1.5\n    nanargmin      66.8        5.5        4.8        3.5        7.1\n    nanargmax      57.6        2.9        5.1        2.5        5.3\n    anynan         10.2        0.3       52.3        0.8       41.6\n    allnan         15.1      196.0      156.3      135.8      111.2\n    rankdata       45.9        1.2        1.2        2.1        2.1\n    nanrankdata    50.5        1.4        1.3        2.4        2.3\n    partition       3.3        1.1        1.6        1.0        1.5\n    argpartition    3.4        1.2        1.5        1.1        1.6\n    replace         9.0        1.5        1.5        1.5        1.5\n    push         1565.6        5.9        7.0       13.0       10.9\n    move_sum     2159.3       31.1       83.6      186.9      182.5\n    move_mean    6264.3       66.2      111.9      361.1      246.5\n    move_std     8653.6       86.5      163.7      232.0      317.7\n    move_var     8856.0       96.3      171.6      267.9      332.9\n    move_min     1186.6       13.4       30.9       23.5       45.0\n    move_max     1188.0       14.6       29.9       23.5       46.0\n    move_argmin  2568.3       33.3       61.0       49.2       86.8\n    move_argmax  2475.8       30.9       58.6       45.0       82.8\n    move_median  2236.9      153.9      151.4      171.3      166.9\n    move_rank     847.1        1.2        1.4        2.3        2.6\n\nyou can also run a detailed benchmark for a single function using, for\nexample, the command::\n\n    >>> bn.bench_detailed(\"move_median\", fraction_nan=0.3)\n\nonly arrays with data type (dtype) int32, int64, float32, and float64 are\naccelerated. all other dtypes result in calls to slower, unaccelerated\nfunctions. in the rare case of a byte-swapped input array (e.g. a big-endian\narray on a little-endian operating system) the function will not be\naccelerated regardless of dtype.\n\nwhere\n=====\n\n===================   ========================================================\n download             https://pypi.python.org/pypi/bottleneck\n docs                 https://bottleneck.readthedocs.io\n code                 https://github.com/pydata/bottleneck\n mailing list         https://groups.google.com/group/bottle-neck\n===================   ========================================================\n\nlicense\n=======\n\nbottleneck is distributed under a simplified bsd license. see the license file\nand licenses directory for details.\n\ninstall\n=======\n\nrequirements:\n\n======================== ====================================================\nbottleneck               python 2.7, 3.5, 3.6, 3.7, 3.8; numpy 1.16.0+\ncompile                  gcc, clang, mingw or msvc\nunit tests               pytest\ndocumentation            sphinx, numpydoc\n======================== ====================================================\n\nto install bottleneck on linux, mac os x, et al.::\n\n    $ pip install .\n\nto install bottleneck on windows, first install mingw and add it to your\nsystem path. then install bottleneck with the command::\n\n    python setup.py install --compiler=mingw32\n\nalternatively, you can use the windows binaries created by christoph gohlke:\nhttp://www.lfd.uci.edu/~gohlke/pythonlibs/#bottleneck\n\nunit tests\n==========\n\nafter you have installed bottleneck, run the suite of unit tests::\n\n  in [1]: import bottleneck as bn\n\n  in [2]: bn.test()\n  ============================= test session starts =============================\n  platform linux -- python 3.7.4, pytest-4.3.1, py-1.8.0, pluggy-0.12.0\n  hypothesis profile 'default' -> database=directorybasedexampledatabase('/home/chris/code/bottleneck/.hypothesis/examples')\n  rootdir: /home/chris/code/bottleneck, inifile: setup.cfg\n  plugins: openfiles-0.3.2, remotedata-0.3.2, doctestplus-0.3.0, mock-1.10.4, forked-1.0.2, cov-2.7.1, hypothesis-4.32.2, xdist-1.26.1, arraydiff-0.3\n  collected 190 items\n  \n  bottleneck/tests/input_modification_test.py ........................... [ 14%]\n  ..                                                                      [ 15%]\n  bottleneck/tests/list_input_test.py .............................       [ 30%]\n  bottleneck/tests/move_test.py .................................         [ 47%]\n  bottleneck/tests/nonreduce_axis_test.py ....................            [ 58%]\n  bottleneck/tests/nonreduce_test.py ..........                           [ 63%]\n  bottleneck/tests/reduce_test.py ....................................... [ 84%]\n  ............                                                            [ 90%]\n  bottleneck/tests/scalar_input_test.py ..................                [100%]\n  \n  ========================= 190 passed in 46.42 seconds =========================\n  out[2]: true\n\nif developing in the git repo, simply run ``py.test``\n",
  "docs_url": null,
  "keywords": "",
  "license": "simplified bsd",
  "name": "bottleneck",
  "package_url": "https://pypi.org/project/Bottleneck/",
  "project_url": "https://pypi.org/project/Bottleneck/",
  "project_urls": {
    "Download": "http://pypi.python.org/pypi/Bottleneck",
    "Homepage": "https://github.com/pydata/bottleneck"
  },
  "release_url": "https://pypi.org/project/Bottleneck/1.3.7/",
  "requires_dist": [
    "numpy",
    "numpydoc ; extra == 'doc'",
    "sphinx ; extra == 'doc'",
    "gitpython ; extra == 'doc'"
  ],
  "requires_python": "",
  "summary": "fast numpy array functions written in c",
  "version": "1.3.7",
  "releases": [],
  "developers": [
    "bottle-neck@googlegroups.com",
    "christopher_whelan"
  ],
  "kwds": "bottleneck nanmax numpy nans nanstd",
  "license_kwds": "simplified bsd",
  "libtype": "pypi",
  "id": "pypi_bottleneck",
  "homepage": "https://github.com/pydata/bottleneck",
  "release_count": 37,
  "dependency_ids": [
    "pypi_gitpython",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_sphinx"
  ]
}
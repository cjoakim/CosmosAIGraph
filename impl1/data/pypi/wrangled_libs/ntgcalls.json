{
  "classifiers": [
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "# nativetgcalls: <br/> an experimental implementation of telegram group calls\n[![build and publish](https://github.com/pytgcalls/ntgcalls/actions/workflows/build.yml/badge.svg)](https://github.com/pytgcalls/ntgcalls/actions/workflows/build.yml)\n[![codeql](https://github.com/pytgcalls/ntgcalls/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/pytgcalls/ntgcalls/actions/workflows/github-code-scanning/codeql)\n[![pypi - version](https://img.shields.io/pypi/v/ntgcalls?logo=python&logocolor=%23959da5&label=pypi&labelcolor=%23282f37)](https://pypi.org/project/ntgcalls/)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/ntgcalls?logo=python&logocolor=%23959da5&labelcolor=%23282f37)](https://www.python.org/)\n[![github](https://img.shields.io/github/license/pytgcalls/ntgcalls?logo=unlicense&logocolor=%23959da5&labelcolor=%23282f37)](https://github.com/pytgcalls/ntgcalls/blob/master/license)\n[![downloads](https://pepy.tech/badge/ntgcalls)](https://pepy.tech/project/ntgcalls)\n\nwelcome to nativetgcalls, an innovative open-source project. nativetgcalls represents the next evolution in telegram calling, building on the foundation laid by pytgcalls.\n\n|                                                                                     powerful                                                                                      |                                                                                 simple                                                                                 |                                                                                                   light                                                                                                    |\n|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| <img src=\"https://raw.githubusercontent.com/pytgcalls/ntgcalls/master/.github/images/fast.gif\" width=150 alt=\"fast logo\"/><br>built from scratch in c++ using boost and libwebrtc | <img src=\"https://raw.githubusercontent.com/pytgcalls/ntgcalls/master/.github/images/simple.gif\" width=150 alt=\"simple logo\"/><br>simple python, go and c bindings<br> | <img src=\"https://raw.githubusercontent.com/pytgcalls/ntgcalls/master/.github/images/light.gif\" width=150 alt=\"light logo\"/><br>we removed anything that could burden the library, including <b>nodejs</b> |\n\n...and more, **without even rewriting your code that uses pytgcalls!**\n\n## overview\nnativetgcalls, often referred to as ntgcalls, is an exciting open-source venture. this project redefines the \ntelegram calling experience and introduces innovative features while preserving the legacy of pytgcalls.\n\n## build status\n| architecture |                                                                   windows                                                                   |                                                                linux                                                                |                                                                  macos                                                                  |\n|:------------:|:-------------------------------------------------------------------------------------------------------------------------------------------:|:-----------------------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------:|\n|    x86_64    |   ![build](https://img.shields.io/badge/build-passing-dark_green?logo=windows11&logocolor=%23959da5&labelcolor=%23282f37&color=%2328a745)   | ![build](https://img.shields.io/badge/build-passing-dark_green?logo=linux&logocolor=%23959da5&labelcolor=%23282f37&color=%2328a745) | ![build](https://img.shields.io/badge/build-unsupported-dark_green?logo=apple&logocolor=%23959da5&labelcolor=%23282f37&color=%23959da5) |\n|    arm64     | ![build](https://img.shields.io/badge/build-unsupported-dark_green?logo=windows11&logocolor=%23959da5&labelcolor=%23282f37&color=%23959da5) | ![build](https://img.shields.io/badge/build-failing-dark_green?logo=linux&logocolor=%23959da5&labelcolor=%23282f37&color=%23d12f3d) |   ![build](https://img.shields.io/badge/build-passing-dark_green?logo=apple&logocolor=%23959da5&labelcolor=%23282f37&color=%2328a745)   |\n\n## key features\n\n### experimentation and customization\nnativetgcalls is a playground for experimentation. we understand the importance of customization for developers, \nempowering you to tailor your telegram calling solutions to your precise requirements.\n\n### advancing with pytgcalls\nbuilding upon the success of pytgcalls, nativetgcalls provides a natural progression for developers familiar with its predecessor. \nthis evolution streamlines the development process and extends the capabilities of telegram calling.\n\n<i>importantly, pytgcalls will seamlessly integrate the new core (ntgcalls) to ensure backward compatibility.</i>\n\n## compiling\n\n### python bindings\nnativetgcalls offers py bindings, enabling seamless integration with python. follow these steps to compile nativetgcalls with python bindings:\n1. ensure you are in the root directory of the nativetgcalls project.\n2. run the following command to install the py bindings:\n\n   ```shell\n   python3 setup.py install\n   ```\n### c bindings\nfor developers looking to use nativetgcalls with c and c++, we provide c bindings. follow these steps to compile nativetgcalls with c bindings:\n1. ensure you are in the root directory of the nativetgcalls project.\n2. run the following command to generate the shared libs:\n   ```shell\n   python3 setup.py build_shared\n   ```\n3. upon successful execution, a shared library will be generated in the \"shared-output\" directory. \n   you can now use this library to develop applications with nativetgcalls.\n4. to include the necessary headers in your c/c++ projects, you will find the \"include\" folder in the root of the project. \n   utilize this folder for including the required header files.\n\n## key contributors\n* <b><a href=\"https://github.com/laky-64\">@laky-64</a> (devops engineer, software architect, porting engineer):</b>\n    * played a crucial role in developing ntgcalls.\n    * created the python bindings that made the library accessible to python developers.\n    * developed the c bindings, enabling the library's use in various environments.\n* <b><a href=\"https://github.com/dadadani\">@dadadani</a> (senior c++ developer, performance engineer):</b>\n    * contributed to setting up cmakelists and integrating with pybind11,\n      greatly simplifying the library's usage for c++ developers.\n* <b><a href=\"https://github.com/kuogi\">@kuogi</a> (senior ui/ux designer, documenter):</b>\n    * as a senior ui/ux designer, kuogi has significantly improved the user interface of our documentation, \n      making it more visually appealing and user-friendly.\n    * it has also played a key role in writing and structuring our documentation, ensuring that it is clear,\n      informative, and accessible to all users.\n* <b><a href=\"https://github.com/vrumger\">@vrumger</a> (mid-level nodejs developer):</b>\n    * avrumy has made important fixes and enhancements to the webrtc component of the library, \n      improving its stability and performance.\n\n## junior developers\n* <b><a href=\"https://github.com/turiog\">@turiog</a> (junior python developer):</b>\n    * currently working on integrating ntgcalls into <a href=\"//github.com/pytgcalls/pytgcalls\">pytgcalls</a>, an important step\n      in expanding the functionality and usability of the library.\n* <b><a href=\"https://github.com/doggyhaha\">@doggyhaha</a> (junior devops, tester):</b>\n    * performs testing of ntgcalls on linux to ensure its reliability and compatibility.\n    * specializes in creating and maintaining github actions, focusing on automation tasks.\n* <b><a href=\"https://github.com/tappo03\">@tappo03</a> (junior go developer, tester):</b>\n    * performs testing of ntgcalls on windows to ensure its reliability and compatibility.\n    * it is in the process of integrating ntgcalls into a go wrapper, further enhancing the library's\n      versatility and accessibility.\n\n## special thanks\n* <b><a href=\"https://github.com/shiguredo\">@shiguredo</a>:</b>\n  we extend our special thanks to \u6642\u96e8\u5802 (shiguredo) for their invaluable assistance in integrating the webrtc component. their contributions,\n  utilizing the sora c++ sdk, have been instrumental in enhancing the functionality of our library.\n\n* <b><a href=\"https://github.com/evgeny-nadymov\">@evgeny-nadymov</a>:</b>\n  a heartfelt thank you to evgeny nadymov for graciously allowing us to use their code from telegram-react.\n  his contribution has been pivotal to the success of this project.\n\n* <b><a href=\"https://github.com/morethanwords\">@morethanwords</a>:</b>\n  we extend our special thanks to morethanwords for their invaluable help in integrating the connection to webrtc with telegram web k. \n  their assistance has been instrumental in enhancing the functionality of our library.\n\n\n_we would like to extend a special thanks to <b><a href='https://github.com/null-nick'>@null-nick</a></b>\nand <b><a href='https://github.com/branchscope'>@branchscope</a></b> for their valuable contributions to the testing phase of the library.\ntheir dedication to testing and optimizing the library has been instrumental in its success._\n\n_additionally, we extend our gratitude to all contributors for their exceptional work in making this project a reality._\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ntgcalls",
  "package_url": "https://pypi.org/project/ntgcalls/",
  "project_url": "https://pypi.org/project/ntgcalls/",
  "project_urls": {
    "Homepage": "https://github.com/pytgcalls/ntgcalls"
  },
  "release_url": "https://pypi.org/project/ntgcalls/1.0.2/",
  "requires_dist": [
    "pytest >=6.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "iraci.matteo@gmail.com",
    "laky"
  ],
  "kwds": "pytgcalls nativetgcalls telegram ntgcalls github",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ntgcalls",
  "homepage": "https://github.com/pytgcalls/ntgcalls",
  "release_count": 3,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
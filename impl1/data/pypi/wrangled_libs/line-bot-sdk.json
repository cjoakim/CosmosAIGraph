{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "line messaging api sdk for python\n=================================\n\n|pypi version|\n\nsdk of the line messaging api for python.\n\nintroduction\n------------\nthe line messaging api sdk for python makes it easy to develop bots using line messaging api, and you can create a sample bot within minutes.\n\n\ndocumentation\n-------------\n\nsee the official api documentation for more information\n\nenglish: https://developers.line.biz/en/docs/messaging-api/overview/\n\njapanese: https://developers.line.biz/ja/docs/messaging-api/overview/\n\nrequirements\n------------\n\n-  python >= 3.8\n\ninstallation\n------------\n\n::\n\n    $ pip install line-bot-sdk\n\nsynopsis\n--------\n\nusage:\n\n.. code:: python\n\n    from flask import flask, request, abort\n\n    from linebot.v3 import (\n        webhookhandler\n    )\n    from linebot.v3.exceptions import (\n        invalidsignatureerror\n    )\n    from linebot.v3.messaging import (\n        configuration,\n        apiclient,\n        messagingapi,\n        replymessagerequest,\n        textmessage\n    )\n    from linebot.v3.webhooks import (\n        messageevent,\n        textmessagecontent\n    )\n\n    app = flask(__name__)\n\n    configuration = configuration(access_token='your_channel_access_token')\n    handler = webhookhandler('your_channel_secret')\n\n\n    @app.route(\"/callback\", methods=['post'])\n    def callback():\n        # get x-line-signature header value\n        signature = request.headers['x-line-signature']\n\n        # get request body as text\n        body = request.get_data(as_text=true)\n        app.logger.info(\"request body: \" + body)\n\n        # handle webhook body\n        try:\n            handler.handle(body, signature)\n        except invalidsignatureerror:\n            app.logger.info(\"invalid signature. please check your channel access token/channel secret.\")\n            abort(400)\n\n        return 'ok'\n\n\n    @handler.add(messageevent, message=textmessagecontent)\n    def handle_message(event):\n        with apiclient(configuration) as api_client:\n            line_bot_api = messagingapi(api_client)\n            line_bot_api.reply_message_with_http_info(\n                replymessagerequest(\n                    reply_token=event.reply_token,\n                    messages=[textmessage(text=event.message.text)]\n                )\n            )\n\n    if __name__ == \"__main__\":\n        app.run()\n\napi\n---\n\nsee `linebot/v3/messaging/docs <linebot/v3/messaging/docs/messagingapi.md>`__ . other docs are in ``linebot/v3/<feature>/docs/*.md``.\n\n\nwebhook\n-------\n\nwebhookparser\n~~~~~~~~~~~~~\n\n\u203b you can use webhookparser\n\n\\_\\_init\\_\\_(self, channel\\_secret)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    parser = linebot.v3.webhookparser('your_channel_secret')\n\nparse(self, body, signature, as_payload=false)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nparses the webhook body, and returns a list of event objects or a webhookpayload object (depending on as_payload).\nif the signature does not match, ``invalidsignatureerror`` is raised.\n\n.. code:: python\n\n    events = parser.parse(body, signature)\n\n    for event in events:\n        do_something(event)\n\n.. code:: python\n\n    payload = parser.parse(body, signature, as_payload=true)\n\n    for event in payload.events:\n        do_something(payload.event, payload.destination)\n\nwebhookhandler\n~~~~~~~~~~~~~~\n\n\u203b you can use webhookhandler\n\n\\_\\_init\\_\\_(self, channel\\_secret)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    handler = linebot.v3.webhookhandler('your_channel_secret')\n\nhandle(self, body, signature)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nhandles webhooks with **handlers** added\nby the decorators `add <#add-self-event-message-none>`__ and `default <#default-self>`__.\nif the signature does not match, ``invalidsignatureerror`` is raised.\n\n.. code:: python\n\n    handler.handle(body, signature)\n\nadd(self, event, message=none)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nadd a **handler** method by using this decorator.\n\n.. code:: python\n\n    @handler.add(messageevent, message=textmessage)\n    def handle_message(event):\n        line_bot_api.reply_message(\n            replymessagerequest(\n                reply_token=event.reply_token,\n                messages=[textmessage(text=event.message.text)]\n            )\n        )\n\nwhen the event is an instance of messageevent and event.message is an instance of textmessage,\nthis handler method is called.\n\n.. code:: python\n\n    @handler.add(messageevent)\n    def handle_message(event, destination):\n        # do something\n\nif the arity of the handler method is more than one,\na destination property in a webhook request is passed to it as the second argument.\n\n.. code:: python\n\n    @handler.add(followevent)\n    def handle_follow():\n        # do something\n\nif the arity of the handler method is zero, the handler method is called with no arguments.\n\ndefault(self)\n^^^^^^^^^^^^^\n\nset the default **handler** method by using this decorator.\n\n.. code:: python\n\n    @handler.default()\n    def default(event):\n        print(event)\n\nif there is no handler for an event, this default handler method is called.\n\nwebhookpayload\n~~~~~~~~~~~~~~~\n\nhttps://developers.line.biz/en/reference/messaging-api/#request-body\n\n- webhookpayload\n    - destination\n    - events: list[`event`]\n\nwebhook event object\n~~~~~~~~~~~~~~~~~~~~\n\nhttps://developers.line.biz/en/reference/messaging-api/#webhook-event-objects\n\n\nhints\n-----\n\nexamples\n~~~~~~~~\n\n`aiohttp-echo <examples/aiohttp-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsample echo-bot with asynchronous processings.\n\n`fastapi-echo <examples/fastapi-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsample echo-bot using `fastapi <https://fastapi.tiangolo.com/>`__\n\n\n`flask-echo <examples/flask-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsample echo-bot using `flask <http://flask.pocoo.org/>`__\n\n`flask-kitchensink <examples/flask-kitchensink>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsample bot using `flask <http://flask.pocoo.org/>`__\n\n\n`rich-menu <examples/rich-menu>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nswitching richmenu script\n\n`simple-server-echo <examples/simple-server-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsample echo-bot using\n`wsgiref.simple\\_server <https://docs.python.org/3/library/wsgiref.html>`__\n\n\nhow to deserializes json to flexmessage or richmenu\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nline-bot-python-sdk provides ``from_json`` method for each model.\nit deserializes the json into the specified model.\nthus, you can send a json designed with `flex message simulator <https://developers.line.biz/console/fx/>`__.\n\n.. code:: python\n\n    bubble_string = \"\"\"{ type:\"bubble\", ... }\"\"\"\n    message = flexmessage(alt_text=\"hello\", contents=flexcontainer.from_json(bubble_string))\n    line_bot_api.reply_message(\n        replymessagerequest(\n            reply_token=event.reply_token,\n            messages=[message]\n        )\n    )\n\n\nhelp and media\n--------------\nfaq: https://developers.line.biz/en/faq/\n\ncommunity q&a: https://www.line-community.me/questions\n\nnews: https://developers.line.biz/en/news/\n\ntwitter: @line_dev\n\nversioning\n----------\nthis project respects semantic versioning\n\nsee http://semver.org/\n\n\nversion 3.x\n-----------\nline's sdk developer team decided to generate sdk code based on openapi spec. https://github.com/line/line-openapi\n\nas a result, line bot sdk 3.x is not compatible with 2.x. it can follow the future api changes very quickly.\n\nwe will be maintaining only ``linebot.v3`` going forward.\nto utilize the latest features, we recommend you gradually transition to ``linebot.v3`` modules in your application, although you can still continue to use the 2.x ``linebot`` modules.\n\nwhile we won't update ``linebot`` modules anymore, users can still continue to use the version 2.x ``linebot`` modules.\nwe also welcome pull requests for the version ``2.x`` and ``3.x`` modules.\n\n\nhow to suppress deprecation warnings\n------------------------------------\nif you keep using old line-bot-sdk library (``version < 3.x``) but use ``3.x``, you'll get\n\n::\n\n  linebotsdkdeprecatedin30: call to deprecated method get_bot_info. (use 'from linebot.v3.messaging import messagingapi' and 'messagingapi(...).get_bot_info(...)' instead. see https://github.com/line/line-bot-sdk-python/blob/master/readme.rst for more details.) -- deprecated since version 3.0.0.\n\n\nif it's noisy, you can suppress this warning as follows.\n\n\n.. code:: python\n\n    import warnings\n    from linebot import linebotsdkdeprecatedin30\n\n    ## your code here\n    ...\n\n    if __name__ == '__main__':\n        warnings.filterwarnings(\"ignore\", category=linebotsdkdeprecatedin30)\n\n\ncontributing\n------------\nplease check `contributing <contributing.md>`__ before making a contribution.\n\nfor sdk developers\n------------------\n\nfirst install for development.\n\n::\n\n    $ pip install -r requirements-dev.txt\n\n\nyou can generate new or fixed models and apis by this command.\n\n::\n\n    $ python generate-code.py\n\n\nwhen you update line-bot-sdk-python version, please update `linebot/__about__.py <linebot/__about__.py>`__ and generate code again.\n\n\nif you edit `readme.rst <readme.rst>`__, you should execute the following command to check the syntax of readme.\n\n::\n\n    $ python -m readme_renderer readme.rst\n\n\nrun tests\n~~~~~~~~~\n\ntest by using tox. we test against the following versions.\n\n-  3.8\n-  3.9\n-  3.10\n-  3.11\n-  3.12\n\nto run all tests and to run ``flake8`` against all versions, use:\n\n::\n\n    tox\n\nto run all tests against version 3.10, use:\n\n::\n\n    $ tox -e py3.10\n\nto run a test against version 3.10 and against a specific file, use:\n\n::\n\n    $ tox -e py3.10 -- tests/test_webhook.py\n\n\n.. |pypi version| image:: https://badge.fury.io/py/line-bot-sdk.svg\n   :target: https://badge.fury.io/py/line-bot-sdk\n\nlicense\n--------\n\n::\n\n    copyright (c) 2016 line corp.\n\n    licensed under the apache license, version 2.0 (the \"license\");\n    you may not use this file except in compliance with the license.\n    you may obtain a copy of the license at\n\n       http://www.apache.org/licenses/license-2.0\n\n    unless required by applicable law or agreed to in writing, software\n    distributed under the license is distributed on an \"as is\" basis,\n    without warranties or conditions of any kind, either express or implied.\n    see the license for the specific language governing permissions and\n    limitations under the license.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "line-bot-sdk",
  "package_url": "https://pypi.org/project/line-bot-sdk/",
  "project_url": "https://pypi.org/project/line-bot-sdk/",
  "project_urls": {
    "Homepage": "https://github.com/line/line-bot-sdk-python"
  },
  "release_url": "https://pypi.org/project/line-bot-sdk/3.5.1/",
  "requires_dist": [
    "requests ==2.31.0",
    "urllib3 <3,>=2.0.5",
    "aiohttp ==3.9.0",
    "future",
    "pydantic <3,>=2.0.3",
    "aenum >=3.1.11",
    "python-dateutil >=2.5.3",
    "Deprecated"
  ],
  "requires_python": ">=3.8.0",
  "summary": "line messaging api sdk for python",
  "version": "3.5.1",
  "releases": [],
  "developers": [
    "hsb.1014@gmail.com",
    "ryosukehasebe"
  ],
  "kwds": "line_bot_api linebot linebotsdkdeprecatedin30 get_bot_info handle_message",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_line_bot_sdk",
  "homepage": "https://github.com/line/line-bot-sdk-python",
  "release_count": 43,
  "dependency_ids": [
    "pypi_aenum",
    "pypi_aiohttp",
    "pypi_deprecated",
    "pypi_future",
    "pypi_pydantic",
    "pypi_python_dateutil",
    "pypi_requests",
    "pypi_urllib3"
  ]
}
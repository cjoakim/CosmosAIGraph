{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "timeout decorator\n=================\n\n|build status| |pypi status| |coveralls status|\n\ninstallation\n------------\n\nfrom source code:\n\n::\n\n    python setup.py install\n\nfrom pypi:\n\n::\n\n    pip install timeout-decorator\n\nusage\n-----\n\n::\n\n    import time\n    import timeout_decorator\n\n    @timeout_decorator.timeout(5)\n    def mytest():\n        print(\"start\")\n        for i in range(1,10):\n            time.sleep(1)\n            print(\"{} seconds have passed\".format(i))\n\n    if __name__ == '__main__':\n        mytest()\n\nspecify an alternate exception to raise on timeout:\n\n::\n\n    import time\n    import timeout_decorator\n\n    @timeout_decorator.timeout(5, timeout_exception=stopiteration)\n    def mytest():\n        print(\"start\")\n        for i in range(1,10):\n            time.sleep(1)\n            print(\"{} seconds have passed\".format(i))\n\n    if __name__ == '__main__':\n        mytest()\n\nmultithreading\n--------------\n\nby default, timeout-decorator uses signals to limit the execution time\nof the given function. this appoach does not work if your function is\nexecuted not in a main thread (for example if it's a worker thread of\nthe web application). there is alternative timeout strategy for this\ncase - by using multiprocessing. to use it, just pass\n``use_signals=false`` to the timeout decorator function:\n\n::\n\n    import time\n    import timeout_decorator\n\n    @timeout_decorator.timeout(5, use_signals=false)\n    def mytest():\n        print \"start\"\n        for i in range(1,10):\n            time.sleep(1)\n            print(\"{} seconds have passed\".format(i))\n\n    if __name__ == '__main__':\n        mytest()\n\n.. warning::\n    make sure that in case of multiprocessing strategy for timeout, your function does not return objects which cannot\n    be pickled, otherwise it will fail at marshalling it between master and child processes.\n\n\nacknowledgement\n---------------\n\nderived from\nhttp://www.saltycrane.com/blog/2010/04/using-python-timeout-decorator-uploading-s3/\nand https://code.google.com/p/verse-quiz/source/browse/trunk/timeout.py\n\ncontribute\n----------\n\ni would love for you to fork and send me pull request for this project.\nplease contribute.\n\nlicense\n-------\n\nthis software is licensed under the `mit license <http://en.wikipedia.org/wiki/mit_license>`_\n\nsee `license file <https://github.com/pnpnpn/timeout-decorator/blob/master/license.txt>`_\n\n.. |build status| image:: https://travis-ci.org/pnpnpn/timeout-decorator.svg?branch=master\n   :target: https://travis-ci.org/pnpnpn/timeout-decorator\n.. |pypi status| image:: https://badge.fury.io/py/timeout-decorator.svg\n    :target: https://badge.fury.io/py/timeout-decorator\n.. |coveralls status| image:: https://coveralls.io/repos/pnpnpn/timeout-decorator/badge.png?branch=master\n    :target: https://coveralls.io/r/pnpnpn/timeout-decorator\n\nchangelog\n=========\n\n0.3.1\n-----\n- fixed issue with picklingerror causes the timeout to never be reached.\n\n0.3.0\n-----\n\n- added optional threading support via python multiprocessing (bubenkoff)\n- switched to pytest test runner (bubenkoff)\n\n\n0.2.1\n-----\n\n- initial public release",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "timeout-decorator",
  "package_url": "https://pypi.org/project/timeout-decorator/",
  "project_url": "https://pypi.org/project/timeout-decorator/",
  "project_urls": {
    "Homepage": "https://github.com/pnpnpn/timeout-decorator"
  },
  "release_url": "https://pypi.org/project/timeout-decorator/0.5.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "timeout decorator",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "patrick_ng",
    "pn.appdev@gmail.com"
  ],
  "kwds": "timeout_decorator timeout_exception timeout seconds pypi",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_timeout_decorator",
  "homepage": "https://github.com/pnpnpn/timeout-decorator",
  "release_count": 10,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "trame: simple, powerful, innovative\n===========================================================\n\n|badge_1| |badge_2|\n\n.. |badge_1| image:: https://github.com/kitware/trame/actions/workflows/test_and_release.yml/badge.svg\n    :target: https://github.com/kitware/trame/actions/workflows/test_and_release.yml\n    :alt: test and release\n\n.. |badge_2| image:: https://img.shields.io/pypi/dm/trame\n    :alt: download stats\n\n**trame** - a web framework that weaves together open source components into customized visual analytics easily.\n\n**trame** is french for\n\n* the core that ties things together\n* a guide providing the essence of a task\n\n.. image:: https://raw.githubusercontent.com/kitware/trame/master/docs/vitepress/assets/images/examples/mstar.jpg\n  :alt: welcome to trame and 3d visualization\n\nwith **trame**, create stunning, interactive web applications compactly and intuitively.\n\n|image_1| |image_2| |image_3|\n\n.. |image_1| image:: https://raw.githubusercontent.com/kitware/trame/master/docs/vitepress/assets/images/examples/carotidflow.jpg\n  :width: 30%\n.. |image_2| image:: https://raw.githubusercontent.com/kitware/trame/master/docs/vitepress/assets/images/examples/uberpickupsnyc.jpg\n  :width: 30%\n.. |image_3| image:: https://raw.githubusercontent.com/kitware/trame/master/docs/vitepress/assets/images/examples/finiteelementanalysis.jpg\n  :width: 30%\n\n3d visualization\n-----------------------------------------------------------\n\nwith best-in-class vtk and paraview platforms at its core, **trame** provides complete control of 3d visualizations and data movements.\ndevelopers benefit from a write-once environment while **trame** simply exposes both local and remote rendering through a single method.\n\nrich features\n-----------------------------------------------------------\n\n**trame** leverages existing libraries and tools such as vuetify, altair, vega, deck.gl, vtk, paraview, and more, to create vivid content for visual analytics applications.\n\nproblem focused\n-----------------------------------------------------------\n\nby relying simply on python, **trame** focuses on one's data and associated analysis and visualizations while hiding the complications of web app development.\n\ndesktop to cloud\n-----------------------------------------------------------\n\nthe resulting **trame** applications can act as local desktop applications or remote cloud applications both accessed through a browser.\n\n\ninstalling\n-----------------------------------------------------------\n\ntrame can be installed with `pip <https://pypi.org/project/trame/>`_:\n\n.. code-block:: bash\n\n    pip install --upgrade trame\n\nusage\n-----------------------------------------------------------\n\nthe `trame tutorial <https://kitware.github.io/trame/guide/tutorial/>`_ is the place to go to learn how to use the library and start building your own application.\n\nthe `api reference <https://trame.readthedocs.io/en/latest/index.html>`_ documentation provides api-level documentation.\n\n\nlicense\n-----------------------------------------------------------\n\ntrame is made available under the apache license, version 2.0. for more details, see `license <https://github.com/kitware/trame/blob/master/license>`_\n\n\ncommunity\n-----------------------------------------------------------\n\n`trame <https://kitware.github.io/trame/>`_ | `discussions <https://github.com/kitware/trame/discussions>`_ | `issues <https://github.com/kitware/trame/issues>`_ | `roadmap <https://github.com/kitware/trame/projects/1>`_ | `contact us <https://www.kitware.com/contact-us/>`_\n\n.. image:: https://zenodo.org/badge/410108340.svg\n    :target: https://zenodo.org/badge/latestdoi/410108340\n\n\nenjoying trame?\n-----------------------------------------------------------\n\nshare your experience `with a testimonial <https://github.com/kitware/trame/issues/18>`_ or `with a brand approval <https://github.com/kitware/trame/issues/19>`_.\n\n\noptional dependencies\n-----------------------------------------------------------\n\nwhen installing trame using pip (`pip install trame`) you will get the core infrastructure for any trame application to work but more advanced usage may require additional dependencies.\nthe list below captures what may need to add depending on your usage:\n\n* **pywebview**  : needed for desktop usage (--app)\n* **jupyterlab** : needed to run inside jupyter-lab\n* **notebook**   : needed to run inside jupyter-notebook\n* **requests**   : needed when using remote assets such as gdrive files\n\n\nenvironments variables\n-----------------------------------------------------------\n\n* **trame_log_network**     : path to log file for capturing network exchange. (default: none)\n* **trame_ws_max_msg_size** : maximum size in bytes of any ws message. (default: 10mb)\n* **trame_ws_heart_beat**   : time in second before assuming the server is non-responsive. (default: 30s)\n\n\nlife cycle callbacks\n--------------------------------------------------------------------------\n\nlife cycle events are directly managed on the application controller\nand are prefixed with `on_*`.\n\n* **on_server_ready**     : all protocols initialized and available for client to connect\n* **on_client_connected** : connection established to server\n* **on_client_exited**    : linked to browser \"beforeunload\" event\n* **on_server_exited**    : trame is exiting its event loop\n\n* **on_server_reload**    : if callback registered it is used for reloading server side modules\n\n\nreserved state entries\n--------------------------------------------------------------------------\n\nthe shared state allow us to synchronize the server with the client.\nrather than creating another mechanism to handle similar needs throughout\nthe application we purposely reuse that state internally. to prevent any conflict with any user we are prefixing our internal\nvariable with `trame__*`. in general those state values should not be use\nor changed by the user except for the one listed below:\n\nread/write:\n  - **trame__favicon**: update it to replace the displayed favicon in your\n    browser. the content needs to be an image encoded url.\n  - **trame__title**: update it to replace your page title\n    (tab name / window name).\n\nread-only:\n  - **trame__busy**: provide information if we have pending requests waiting\n    for the server to respond.\n  - **tts**: template time stamp to regenerate sub elements when a template\n    gets updated. usually used as `:key=\"tts\"` to force some component\n    rebuild.\n",
  "docs_url": null,
  "keywords": "python,interactive,web,application,framework",
  "license": "apache license 2.0",
  "name": "trame",
  "package_url": "https://pypi.org/project/trame/",
  "project_url": "https://pypi.org/project/trame/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/trame/3.4.0/",
  "requires_dist": [
    "trame-server >=2.13.1",
    "trame-client >=2.14.0"
  ],
  "requires_python": "",
  "summary": "trame, a framework to build applications in plain python",
  "version": "3.4.0",
  "releases": [],
  "developers": [
    "kitware_inc"
  ],
  "kwds": "badge_2 badge_1 badge trame__title trame",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_trame",
  "homepage": "",
  "release_count": 133,
  "dependency_ids": [
    "pypi_trame_client",
    "pypi_trame_server"
  ]
}
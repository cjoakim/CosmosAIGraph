{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![build status](https://travis-ci.org/delighted/delighted-python.svg?branch=master)](https://travis-ci.org/delighted/delighted-python)\n\n# delighted api python client\n\nofficial python client for the [delighted api](https://delighted.com/docs/api).\n\n## installation\n\n```\npip install --upgrade delighted\n```\n\nor\n\n```\neasy_install --upgrade delighted\n```\n\n### upgrading from delighted-python\n\nif you previously used the python package named `delighted-python`, please note that the package name is now just `delighted`.\n\n## configuration\n\nto get started, you need to configure the client with your secret api key.\n\n```python\nimport delighted\ndelighted.api_key = 'your_api_key'\n```\n\nfor further options, read the [advanced configuration section](#advanced-configuration).\n\n**note:** your api key is secret, and you should treat it like a password. you can find your api key in your delighted account, under *settings* > *api*.\n\n## usage\n\nadding/updating people and scheduling surveys:\n\n```python\n# add a new person, and schedule a survey immediately\nperson1 = delighted.person.create(email='foo+test1@delighted.com')\n\n# add a new person, and schedule a survey after 1 minute (60 seconds)\nperson2 = delighted.person.create(email='foo+test2@delighted.com', delay=60)\n\n# add a new person, but do not schedule a survey\nperson3 = delighted.person.create(email='foo+test3@delighted.com', send=false)\n\n# add a new person with full set of attributes, including a custom question\n# product name, and schedule a survey with a 30 second delay\nperson4 = delighted.person.create(\n        email='foo+test4@delighted.com',\n        name='joe bloggs',\n        properties={'customer_id': 123, 'country': 'usa',\n                    'question_product_name': 'the london trench'},\n        delay=30)\n\n# update an existing person (identified by email), adding a name, without\n# scheduling a survey\nupdated_person1 = delighted.person.create(email='foo+test1@delighted.com',\n                                          name='james scott', send=false)\n```\n\nunsubscribing people:\n\n```python\n# unsubscribe an existing person\ndelighted.unsubscribe.create(person_email='foo+test1@delighted.com')\n```\n\nlisting people:\n\n```python\n# list all people, auto pagination\n# note: make sure to handle the possible rate limits error\npeople = delighted.person.list()\nwhile true:\n    try:\n        for person in people.auto_paging_iter():\n            # do something with person\n    except toomanyrequestserror as e:\n        # indicates how long to wait (in seconds) before making this request again\n        e.retry_after\n        continue\n\n# for convenience, this method can use a sleep to automatically handle rate limits\npeople = delighted.person.list(auto_handle_rate_limits=true)\nfor person in people.auto_paging_iter():\n    # do something with person\n```\n\nlisting people who have unsubscribed:\n\n```python\n# list all people who have unsubscribed, 20 per page, first 2 pages\ndelighted.unsubscribe.all()\ndelighted.unsubscribe.all(page=2)\n```\n\nlisting people whose emails have bounced:\n\n```python\n# list all people whose emails have bounced, 20 per page, first 2 pages\ndelighted.bounce.all()\ndelighted.bounce.all(page=2)\n```\n\ndeleting a person and all of the data associated with them:\n\n```python\n# delete by person id\ndelighted.person.delete(id=42)\n# delete by email address\ndelighted.person.delete(email='test@example.com')\n# delete by phone number (must be e.164 format)\ndelighted.person.delete(phone_number='+14155551212')\n```\n\ndeleting pending survey requests\n\n```python\n# delete all pending (scheduled but unsent) survey requests for a person, by email.\ndelighted.surveyrequest.delete_pending(person_email='foo+test1@delighted.com')\n```\n\nadding survey responses:\n\n```python\n# add a survey response, score only\nsurvey_response1 = delighted.surveyresponse.create(person=person1.id,\n                                                   score=10)\n\n# add *another* survey response (for the same person), score and comment\nsurvey_response2 = delighted.surveyresponse.create(person=person1.id,\n                                                   score=5,\n                                                   comment='really nice.')\n```\n\nretrieving a survey response:\n\n```python\n# retrieve an existing survey response\nsurvey_response3 = delighted.surveyresponse.retrieve('123')\n```\n\nupdating survey responses:\n\n```python\n# update a survey response score\nsurvey_response4 = delighted.surveyresponse.retrieve('234')\nsurvey_response4.score = 10\nsurvey_response4.save()\n# <delighted.surveyresponse object at 0xabc123>\n\n# update (or add) survey response properties\nsurvey_response4.person_properties = {'segment': 'online'}\nsurvey_response4.save()\n# <delighted.surveyresponse object at 0xabc123>\n\n# update person who recorded the survey response\nsurvey_response4.person = '321'\nsurvey_response4.save()\n# <delighted.surveyresponse object at 0xabc123>\n```\n\nlisting survey responses:\n\n```python\n# list all survey responses, 20 per page, first 2 pages\nsurvey_responses_page1 = delighted.surveyresponse.all()\nsurvey_responses_page2 = delighted.surveyresponse.all(page=2)\n\n# list all survey responses, 20 per page, expanding person object\nsurvey_responses_page1_expanded = delighted.surveyresponse.all(expand=['person'])\nsurvey_responses_page1_expanded[0].person\n# <delighted.person object at 0xabc123>\n\n# list all survey responses, 20 per page, for a specific trend (id: 123)\nsurvey_responses_page1_trend = delighted.surveyresponse.all(trend='123')\n\n# list all survey responses, 20 per page, in reverse chronological order (newest first)\nsurvey_responses_page1_desc = delighted.surveyresponse.all(order='desc')\n\n# list all survey responses, 100 per page, page 5, with a time range\nimport pytz\ntimezone = pytz.timezone('america/chicago')\nfiltered_survey_responses = delighted.surveyresponse.all(\n    page=5,\n    per_page=100,\n    since=timezone.localize(datetime.datetime(2014, 3, 1)),\n    until=timezone.localize(datetime.datetime(2014, 4, 30))\n)\n```\n\nretrieving metrics:\n\n```python\n# get current metrics, 30-day simple moving average, from most recent response\nmetrics = delighted.metrics.retrieve()\n\n# get current metrics, 30-day simple moving average, from most recent response,\n# for a specific trend (id: 123)\nmetrics = delighted.metrics.retrieve(trend='123')\n\n# get metrics, for given time range\nimport pytz\ntimezone = pytz.timezone('america/chicago')\nmetrics = delighted.metrics.retrieve(\n    since=timezone.localize(datetime.datetime(2013, 10, 1)),\n    until=timezone.localize(datetime.datetime(2013, 11, 1))\n)\n```\n\nmanaging autopilot:\n\n```python\n# get autopilot configuration for the `email` platform\nautopilot = delighted.autopilotconfiguration.retrieve('email')\n\n# list people in autopilotmembership for the `email` platform\npeople_autopilot = delighted.autopilotmembership.foremail().list(auto_handle_rate_limits=true)\nfor person in people_autopilot.auto_paging_iter():\n  # do something with person\n\n# add people to autopilotmembership\nautopilot = delighted.autopilotmembership.foremail().create(person_email='test@example.com')\n\n# add people to autopilotmembership, with a full set of attributes\nproperties = {'customer_id': 123, 'country': 'usa', 'question_product_name': 'the london trench'}\nautopilot = delighted.autopilotmembership.forsms().create(person_phone_number='+14155551212', properties=properties)\n\n# delete by person id\ndelighted.autopilotmembership.forsms().delete(person_id=42)\n\n# delete by email address\ndelighted.autopilotmembership.foremail().delete(person_email='test@example.com')\n\n# delete by phone number (must be e.164 format)\ndelighted.autopilotmembership.forsms().delete(person_phone_number='+14155551212')\n```\n\n## rate limits\n\nif a request is rate limited, a `toomanyrequestserror` exception is raised. you can rescue that exception to implement exponential backoff or retry strategies. the exception provides a `retry_after` attribute to tell you how many seconds you should wait before retrying. for example:\n\n```python\ntry:\n    metrics = delighted.metrics.retrieve()\nexcept delighted.errors.toomanyrequestserror as err:\n    retry_after_seconds = err.retry_after\n    # wait for retry_after_seconds before retrying\n    # add your retry strategy here ...\n```\n\n## <a name=\"advanced-configuration\"></a> advanced configuration & testing\n\nthe following options are configurable for the client:\n\n```python\ndelighted.api_key\ndelighted.api_base_url # default: 'https://api.delighted.com/v1/'\ndelighted.http_adapter # default: delighted.httpadapter\n```\n\nby default, a shared instance of `delighted.client` is created lazily in `delighted.get_shared_client()`. if you want to create your own client, perhaps for test or if you have multiple api keys, you can:\n\n```python\n# create an custom client instance, and pass as last argument to resource actions\nimport delighted\nfrom delighted import client\nclient = client(api_key='api_key',\n                api_base_url='https://api.delighted.com/v1/',\n                http_adapter=httpadapter())\nmetrics_from_custom_client = delighted.metrics.retrieve(client=client)\n\n# or, you can set delighted.shared_client yourself\ndelighted.shared_client = delighted.client(\n    api_key='api_key',\n    api_base_url='https://api.delighted.com/v1/',\n    http_adapter=delighted.httpadapter()\n)\nmetrics_from_custom_shared_client = delighted.metrics.retrieve()\n```\n\n## supported versions\n\n- 2.6+, 3.3+ (pypy supported)\n\n## contributing\n\n1. fork it\n2. create your feature branch (`git checkout -b my-new-feature`)\n3. run the tests (`tox`)\n4. commit your changes (`git commit -am 'add some feature'`)\n5. push to the branch (`git push origin my-new-feature`)\n6. create new pull request\n\n## releasing\n\n1. bump the version in `delighted/__init__.py`.\n2. update the readme and changelog as needed.\n3. tag the commit for release.\n4. create the distribution `python setup.py sdist`\n5. update the package against pypi's test server with [twine](https://pypi.org/project/twine/)\n`twine upload --repository-url https://test.pypi.org/legacy/ dist/test_package_name`.\n6. if (4 and 5) work, repeat all steps, then push to pypi's live servers with `twine upload dist/package_name`.\n\n## author\n\noriginally by [jason pearson](https://github.com/kaeawc). graciously transfered and now officially maintained by delighted.",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "delighted",
  "package_url": "https://pypi.org/project/delighted/",
  "project_url": "https://pypi.org/project/delighted/",
  "project_urls": {
    "Homepage": "https://delighted.com/"
  },
  "release_url": "https://pypi.org/project/delighted/4.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "delighted api python client.",
  "version": "4.1.0",
  "releases": [],
  "developers": [
    "ben@delighted.com",
    "ben_turner"
  ],
  "kwds": "travis delighted pip your_api_key py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_delighted",
  "homepage": "https://delighted.com/",
  "release_count": 17,
  "dependency_ids": []
}
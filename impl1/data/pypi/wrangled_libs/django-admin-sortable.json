{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: utilities"
  ],
  "description": "django admin sortable\n=====================\n\n|pypi version| |python versions| |build status|\n\nthis project makes it easy to add drag-and-drop ordering to any model in\ndjango admin. inlines for a sortable model may also be made sortable,\nenabling individual items or groups of items to be sortable.\n\nif you find django admin sortable to be helpful, consider `buying me a\ncoffee <https://www.buymeacoffee.com/ny9tuaewf>`__!\n\nsorting model instances with a sortable parent:\n\n.. figure:: http://res.cloudinary.com/alsoicode/image/upload/v1451237555/django-admin-sortable/sortable-models.jpg\n   :alt: sortable-models\n\n   sortable-models\n\nsorting inlines:\n\n.. figure:: http://res.cloudinary.com/alsoicode/image/upload/v1451237555/django-admin-sortable/sortable-inlines.jpg\n   :alt: sortable-inlines\n\n   sortable-inlines\n\nsupported django versions\n-------------------------\n\nfor django 4 use the latest version\n\nfor django 3 use 2.2.4\n\nfor django 1.8.x < 3.0, use 2.1.8.\n\nfor django 1.5.x to 1.7.x, use version 2.0.18.\n\nother notes of interest regarding versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndjango-admin-sortable 1.5.2 introduced backward-incompatible changes for\ndjango 1.4.x\n\ndjango-admin-sortable 1.6.6 introduced a backward-incompatible change\nfor the ``sorting_filters`` attribute. please convert your attributes to\nthe new tuple-based format if you haven\u2019t already.\n\ndjango-admin-sortable 1.7.1 and higher are compatible with python 3.\n\ndjango-admin-sortable 2.1.6 has a bug. please don\u2019t use it :)\n\ninstallation\n------------\n\n1. ``$ pip install django-admin-sortable``\n\n\u2013or\u2013\n\ndownload django-admin-sortable from\n`source <https://github.com/iambrandontaylor/django-admin-sortable/archive/master.zip>`__\n\n1. unzip the directory and cd into the uncompressed project directory\n\n2.\n\n   -  optional: enable your virtualenv\n\n3. run ``$ python setup.py install`` or add ``adminsortable`` to your\n   pythonpath.\n\nconfiguration\n-------------\n\n1. add ``adminsortable`` to your ``installed_apps``.\n2. ensure ``django.template.context_processors.static`` is in your\n   ``templates[\"options\"][\"context_processors\"]``.\n\n   -  (in older versions of django, ensure\n      ``django.core.context_processors.static`` is in\n      ``template_context_processors`` instead.)\n\n3. ensure that ``csrf_cookie_httponly`` has not been set to ``true``, as\n   django-admin-sortable is currently incompatible with that setting.\n\nstatic media\n~~~~~~~~~~~~\n\npreferred: use the `staticfiles\napp <https://docs.djangoproject.com/en/3.0/howto/static-files/>`__\n\nalternate: copy the ``adminsortable`` folder from the ``static`` folder\nto the location you serve static files from.\n\ntesting\n~~~~~~~\n\nhave a look at the included sample_project to see working examples. the\nlogin credentials for admin are: admin/admin\n\nwhen a model is sortable, a tool-area link will be added that says\n\u201cchange order\u201d. click this link, and you will be taken to the custom\nview where you can drag-and-drop the records into order.\n\ninlines may be drag-and-dropped into any order directly from the change\nform.\n\nusage\n-----\n\nmodels\n~~~~~~\n\nto add \u201csortability\u201d to a model, you need to inherit ``sortablemixin``\nand at minimum, define:\n\n-  the field which should be used for ``meta.ordering``, which must\n   resolve to one of the integer fields defined in django\u2019s orm:\n\n-  ``positiveintegerfield``\n\n-  ``integerfield``\n\n-  ``positivesmallintegerfield``\n\n-  ``smallintegerfield``\n\n-  ``bigintegerfield``\n\n-  ``meta.ordering`` **must only contain one value**, otherwise, your\n   objects will not be sorted correctly.\n\n-  **important**: you must name the field you use for ordering something\n   other than \u201corder_field\u201d as this name is reserved by the\n   ``sortablemixin`` class.\n\n-  it is recommended that you set ``editable=false`` and\n   ``db_index=true`` on the field defined in ``meta.ordering`` for a\n   seamless django admin experience and faster lookups on the objects.\n\nsample model:\n\n.. code:: python\n\n   # models.py\n   from adminsortable.models import sortablemixin\n\n   class mysortableclass(sortablemixin):\n       title = models.charfield(max_length=50)\n\n       class meta:\n           verbose_name = 'my sortable class'\n           verbose_name_plural = 'my sortable classes'\n           ordering = ['the_order']\n\n\n       # define the field the model should be ordered by\n       the_order = models.positiveintegerfield(default=0, editable=false, db_index=true)\n\n       def __unicode__(self):\n           return self.title\n\nsupport for models that don\u2019t use an ``autofield`` for their primary key\nare also supported in version 2.0.20 or higher.\n\ncommon use case\n^^^^^^^^^^^^^^^\n\na common use case is to have child objects that are sortable relative to\na parent. if your parent object is also sortable, here\u2019s how you would\nset up your models and admin options:\n\n.. code:: python\n\n   # models.py\n   from adminsortable.fields import sortableforeignkey\n\n   class category(sortablemixin):\n       class meta:\n           ordering = ['category_order']\n           verbose_name_plural = 'categories'\n\n       title = models.charfield(max_length=50)\n\n       # ordering field\n       category_order = models.positiveintegerfield(default=0, editable=false, db_index=true)\n\n   class project(sortablemixin):\n       class meta:\n           ordering = ['project_order']\n\n       category = sortableforeignkey(category)\n       title = models.charfield(max_length=50)\n\n       # ordering field\n       project_order = models.positiveintegerfield(default=0, editable=false, db_index=true)\n\n       def __unicode__(self):\n           return self.title\n\n   # admin.py\n   from adminsortable.admin import sortableadmin\n\n   from your_app.models import category, project\n\n   admin.site.register(category, sortableadmin)\n   admin.site.register(project, sortableadmin)\n\nsometimes you might have a parent model that is not sortable, but has\nchild models that are. in that case define your models and admin options\nas such:\n\n.. code:: python\n\n   from adminsortable.fields import sortableforeignkey\n\n   # models.py\n   class category(models.model):\n       class meta:\n           verbose_name_plural = 'categories'\n\n       title = models.charfield(max_length=50)\n       ...\n\n   class project(sortablemixin):\n       class meta:\n           ordering = ['project_order']\n\n       category = sortableforeignkey(category)\n       title = models.charfield(max_length=50)\n\n       # ordering field\n       project_order = models.positiveintegerfield(default=0, editable=false, db_index=true)\n\n       def __unicode__(self):\n           return self.title\n\n   # admin\n   from adminsortable.admin import nonsortableparentadmin, sortablestackedinline\n\n   from your_app.models import category, project\n\n   class projectinline(sortablestackedinline):\n       model = project\n       extra = 1\n\n   class categoryadmin(nonsortableparentadmin):\n       inlines = [projectinline]\n\n   admin.site.register(category, categoryadmin)\n\nthe ``nonsortableparentadmin`` class is necessary to wire up the\nadditional url patterns and javascript that django admin sortable needs\nto make your models sortable. the child model does not have to be an\ninline model, it can be wired directly to django admin and the objects\nwill be grouped by the non-sortable foreign key when sorting.\n\nbackwards compatibility\n~~~~~~~~~~~~~~~~~~~~~~~\n\nif you previously used django admin sortable, **don\u2019t panic** -\neverything will still work exactly as before **without any changes to\nyour code**. going forward, it is recommended that you use the new\n``sortablemixin`` on your models, as pre-2.0 compatibility might not be\na permanent thing.\n\nplease note however that the ``sortable`` class still contains the\nhard-coded ``order`` field, and meta inheritance requirements:\n\n.. code:: python\n\n   # legacy model definition\n\n   from adminsortable.models import sortable\n\n   class project(sortable):\n       class meta(sortable.meta):\n           pass\n       title = models.charfield(max_length=50)\n\n       def __unicode__(self):\n           return self.title\n\nmodel instance methods\n^^^^^^^^^^^^^^^^^^^^^^\n\neach instance of a sortable model has two convenience methods to get the\nnext or previous instance:\n\n.. code:: python\n\n       .get_next()\n       .get_previous()\n\nby default, these methods will respect their order in relation to a\n``sortableforeignkey`` field, if present. meaning, that given the\nfollowing data:\n\n::\n\n   | parent model 1 |               |\n   |                | child model 1 |\n   |                | child model 2 |\n   | parent model 2 |               |\n   |                | child model 3 |\n   |                | child model 4 |\n   |                | child model 5 |\n\n\u201cchild model 2\u201d ``get_next()`` would return ``none`` \u201cchild model 3\u201d\n``get_previous`` would return ``none``\n\nif you wish to override this behavior, pass in:\n``filter_on_sortable_fk=false``:\n\n.. code:: python\n\n       your_instance.get_next(filter_on_sortable_fk=false)\n\nyou may also pass in additional orm \u201cfiler_args\u201d as a list, or\n\u201cfilter_kwargs\u201d as a dictionary, should you need to:\n\n.. code:: python\n\n       your_instance.get_next(\n           filter_args=[q(field1=true) | q(field2=true)],\n           filter_kwargs={'title__icontains': 'blue'}\n       )\n\ndeprecation warning\n^^^^^^^^^^^^^^^^^^^\n\npreviously \u201cfilter_kwargs\u201d was named \u201cextra_filters\u201d. with the addition\nof \u201cfilter_args\u201d, \u201cextra_filters\u201d was renamed for consistency.\n\nadding sorting to an existing model\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndjango 1.5.x to 1.6.x\n^^^^^^^^^^^^^^^^^^^^^\n\nif you\u2019re adding sorting to an existing model, it is recommended that\nyou use `django-south <http://south.areacode.com/>`__ to create a schema\nmigration to add the \u201corder\u201d field to your model. you will also need to\ncreate a data migration in order to add the appropriate values for the\n\u201corder\u201d column.\n\nexample assuming a model named \u201ccategory\u201d:\n\n.. code:: python\n\n   def forwards(self, orm):\n       for index, category in enumerate(orm.category.objects.all()):\n           category.order = index + 1\n           category.save()\n\nsee: `this\nlink <http://south.readthedocs.org/en/latest/tutorial/part3.html>`__ for\nmore information on south data migrations.\n\ndjango 1.7.x or higher\n^^^^^^^^^^^^^^^^^^^^^^\n\nsince schema migrations are built into django 1.7, you don\u2019t have to use\nsouth, but the process of adding and running migrations is nearly\nidentical. take a look at the\n`migrations <https://docs.djangoproject.com/en/1.7/topics/migrations/>`__\ndocumentation to get started.\n\ndjango admin integration\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nto enable sorting in the admin, you need to inherit from\n``sortableadmin``:\n\n.. code:: python\n\n   from django.contrib import admin\n   from myapp.models import mysortableclass\n   from adminsortable.admin import sortableadmin\n\n   class mysortableadminclass(sortableadmin):\n       \"\"\"any admin options you need go here\"\"\"\n\n   admin.site.register(mysortableclass, mysortableadminclass)\n\nto enable sorting on tabularinline models, you need to inherit from\nsortabletabularinline:\n\n.. code:: python\n\n   from adminsortable.admin import sortabletabularinline\n\n   class mysortabletabularinline(sortabletabularinline):\n       \"\"\"your inline options go here\"\"\"\n\nto enable sorting on stackedinline models, you need to inherit from\nsortablestackedinline:\n\n.. code:: python\n\n   from adminsortable.admin import sortablestackedinline\n\n   class mysortablestackedinline(sortablestackedinline):\n      \"\"\"your inline options go here\"\"\"\n\nthere are also generic equivalents that you can inherit from:\n\n.. code:: python\n\n   from adminsortable.admin import (sortablegenerictabularinline,\n       sortablegenericstackedinline)\n       \"\"\"your generic inline options go here\"\"\"\n\nif your parent model is *not* sortable, but has child inlines that are,\nyour parent model needs to inherit from ``nonsortableparentadmin``:\n\n.. code:: python\n\n   from adminsortable.admin import (nonsortableparentadmin,\n       sortabletabularinline)\n\n   class childtabularinline(sortabletabularinline):\n       model = yourmodel\n\n   class parentadmin(nonsortableparentadmin):\n       inlines = [childtabularinline]\n\noverriding ``queryset()``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndjango-admin-sortable supports custom queryset overrides on admin models\nand inline models in django admin!\n\nif you\u2019re providing an override of a sortableadmin or sortable inline\nmodel, you don\u2019t need to do anything extra. django-admin-sortable will\nautomatically honor your queryset.\n\nhave a look at the widgetadmin class in the sample project for an\nexample of an admin class with a custom ``queryset()`` override.\n\noverriding ``queryset()`` for an inline model\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthis is a special case, which requires a few lines of extra code to\nproperly determine the sortability of your model. example:\n\n.. code:: python\n\n   # add this import to your admin.py\n   from adminsortable.utils import get_is_sortable\n\n\n   class componentinline(sortablestackedinline):\n       model = component\n\n       def queryset(self, request):\n           qs = super(componentinline, self).queryset(request).filter(\n               title__icontains='foo')\n\n           # you'll need to add these lines to determine if your model\n           # is sortable once we hit the change_form() for the parent model.\n\n           if get_is_sortable(qs):\n               self.model.is_sortable = true\n           else:\n               self.model.is_sortable = false\n           return qs\n\nif you override the queryset of an inline, the number of objects present\nmay change, and adminsortable won\u2019t be able to automatically determine\nif the inline model is sortable from here, which is why we have to set\nthe ``is_sortable`` property of the model in this method.\n\nsorting subsets of objects\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nit is also possible to sort a subset of objects in your model by adding\na ``sorting_filters`` tuple. this works exactly the same as\n``.filter()`` on a queryset, and is applied *after* ``get_queryset()``\non the admin class, allowing you to override the queryset as you would\nnormally in admin but apply additional filters for sorting. the text\n\u201cchange order of\u201d will appear before each filter in the change list\ntemplate, and the filter groups are displayed from left to right in the\norder listed. if no ``sorting_filters`` are specified, the text \u201cchange\norder\u201d will be displayed for the link.\n\nself-referential sortableforeignkey\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can specify a self-referential sortableforeignkey field, however the\nadmin interface will currently show a model that is a grandchild at the\nsame level as a child. i\u2019m working to resolve this issue.\n\nimportant!\n''''''''''\n\ndjango-admin-sortable 1.6.6 introduced a backwards-incompatible change\nfor ``sorting_filters``. previously this attribute was defined as a\ndictionary, so you\u2019ll need to change your values over to the new\ntuple-based format.\n\nan example of sorting subsets would be a \u201cboard of directors\u201d. in this\nuse case, you have a list of \u201cpeople\u201d objects. some of these people are\non the board of directors and some not, and you need to sort them\nindependently.\n\n.. code:: python\n\n   class person(sortable):\n       class meta(sortable.meta):\n           verbose_name_plural = 'people'\n\n       first_name = models.charfield(max_length=50)\n       last_name = models.charfield(max_length=50)\n       is_board_member = models.booleanfield('board member', default=false)\n\n       sorting_filters = (\n           ('board members', {'is_board_member': true}),\n           ('non-board members', {'is_board_member': false}),\n       )\n\n       def __unicode__(self):\n           return '{} {}'.format(self.first_name, self.last_name)\n\nextending custom templates\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nby default, adminsortable\u2019s change form and change list views inherit\nfrom django admin\u2019s standard templates. sometimes you need to have a\ncustom change form or change list, but also need adminsortable\u2019s css and\njavascript for inline models that are sortable for example.\n\nsortableadmin has two attributes you can override for this use case:\n\n.. code:: python\n\n   change_form_template_extends\n   change_list_template_extends\n\nthese attributes have default values of:\n\n.. code:: python\n\n   change_form_template_extends = 'admin/change_form.html'\n   change_list_template_extends = 'admin/change_list.html'\n\nif you need to extend the inline change form templates, you\u2019ll need to\nselect the right one, depending on your version of django. for 1.10.x or\nbelow, you\u2019ll need to extend one of the following:\n\n::\n\n   templates/adminsortable/edit_inline/stacked-1.10.x.html\n   templates/adminsortable/edit_inline/tabular-inline-1.10.x.html\n\notherwise, extend:\n\n::\n\n   templates/adminsortable/edit_inline/stacked.html\n   templates/adminsortable/edit_inline/tabular.html\n\na special note about stacked inlines\u2026\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthe height of a stacked inline model can dynamically increase, which can\nmake them difficult to sort. if you anticipate the height of a stacked\ninline is going to be very tall, i would suggest using\nsortabletabularinline instead.\n\ncustom js callbacks after sorting is complete\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you need to define a custom event or other callback to be executed\nafter sorting is completed, you\u2019ll need to:\n\n1. create a custom template for to add your javascript\n2. populate the ``after_sorting_js_callback_name`` on your model admin\n\nan example of this can be found in the \u201csamples\u201d application in the\nsource. here\u2019s a model admin for a model called \u201cproject\u201d:\n\n.. code:: python\n\n   class projectadmin(sortableadmin):\n       inlines = [\n           creditinline, noteinline, genericnoteinline,\n           nonsortablecreditinline, nonsortablenoteinline\n       ]\n       list_display = ['__str__', 'category']\n\n       after_sorting_js_callback_name = 'aftersortcallback'  # do not include () - just function name\n       sortable_change_list_template = 'adminsortable/custom_change_list.html'\n       sortable_change_form_template = \"adminsortable/custom_change_form.html\"\n\nthis example is going to add a custom callback on the parent model, and\nit\u2019s inlines. here is the javascript added to the custom change list:\n\n.. code:: html+django\n\n   {% extends 'adminsortable/change_list.html' %}\n\n   {% block extrahead %}\n     {{ block.super }}\n\n     <script>\n       django.jquery(document).on('order:changed', function(event) {\n         console.log(event.message);\n         // your code here\n       });\n\n       window['{{ after_sorting_js_callback_name }}'] = function() {\n         django.jquery(document).trigger({ type: 'order:changed', message: 'order changed', time: new date() });\n       };\n     </script>\n   {% endblock %}\n\nand the custom change form, for the inline models:\n\n.. code:: html+django\n\n   {% extends \"adminsortable/change_form.html\" %}\n\n   {% block extrahead %}\n     {{ block.super }}\n\n     <script>\n       django.jquery(document).on('order:changed', function(event) {\n         console.log(event.message);\n         // your code here\n       });\n\n       window['{{ after_sorting_js_callback_name }}'] = function() {\n         django.jquery(document).trigger({ type: 'order:changed', message: 'order changed', time: new date() });\n       };\n     </script>\n   {% endblock %}\n\nideally, you\u2019d pull in a shared piece of code for your callback to keep\nyour code dry.\n\ndjango-cms integration\n~~~~~~~~~~~~~~~~~~~~~~\n\ndjango-cms plugins use their own change form, and thus won\u2019t\nautomatically include the necessary javascript for django-admin-sortable\nto work. fortunately, this is easy to resolve, as the ``cmsplugin``\nclass allows a change form template to be specified:\n\n.. code:: python\n\n   # example plugin\n   from cms.plugin_base import cmspluginbase\n\n   class cmscarouselplugin(cmspluginbase):\n       admin_preview = false\n       change_form_template = 'cms/sortable-stacked-inline-change-form.html'\n       inlines = [slideinline]\n       model = carousel\n       name = _('carousel')\n       render_template = 'carousels/carousel.html'\n\n       def render(self, context, instance, placeholder):\n           context.update({\n               'carousel': instance,\n               'placeholder': placeholder\n           })\n           return context\n\n   plugin_pool.register_plugin(cmscarouselplugin)\n\nthe contents of ``sortable-stacked-inline-change-form.html`` at a\nminimum need to extend the extrahead block with:\n\n.. code:: html+django\n\n   {% extends \"admin/cms/page/plugin_change_form.html\" %}\n   {% load static from staticfiles %}\n\n   {% block extrahead %}\n       {{ block.super }}\n       <script src=\"{% static 'adminsortable/js/jquery-ui-django-admin.min.js' %}\"></script>\n       <script src=\"{% static 'adminsortable/js/jquery.ui.touch-punch.min.js' %}\"></script>\n       <script src=\"{% static 'adminsortable/js/jquery.django-csrf.js' %}\"></script>\n       <script src=\"{% static 'adminsortable/js/admin.sortable.stacked.inlines.js' %}\"></script>\n\n       <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'adminsortable/css/admin.sortable.inline.css' %}\" />\n   {% endblock extrahead %}\n\nsorting within django-cms is really only feasible for inline models of a\nplugin as django-cms already includes sorting for plugin instances. for\ntabular inlines, just substitute:\n\n.. code:: html+django\n\n   <script src=\"{% static 'adminsortable/js/admin.sortable.stacked.inlines.js' %}\"></script>\n\nwith:\n\n.. code:: html+django\n\n   <script src=\"{% static 'adminsortable/js/admin.sortable.tabular.inlines.js' %}\"></script>\n\nnotes\n~~~~~\n\nfrom ``django-cms 3.x`` the path of change_form.html has changed.\nreplace the follwing line:\n\n.. code:: html+django\n\n   {% extends \"admin/cms/page/plugin_change_form.html\" %}\n\nwith\n\n.. code:: html+django\n\n   {% extends \"admin/cms/page/plugin/change_form.html\" %}\n\nfrom ``django-admin-sortable 2.0.13`` the ``jquery.django-csrf.js`` was\nremoved and you have to include the snippet-template. change the\nfollowing line:\n\n.. code:: html+django\n\n   <script type=\"text/javascript\" src=\"{% static 'adminsortable/js/jquery.django-csrf.js' %}\"></script>\n\nto\n\n.. code:: html+django\n\n   {% include 'adminsortable/csrf/jquery.django-csrf.html' with csrf_cookie_name='csrftoken' %}\n\nplease note, if you change the ``csrf_cookie_name`` you have to adjust\n``csrf_cookie_name='your_csrf_cookie_name'``\n\nrationale\n~~~~~~~~~\n\nother projects have added drag-and-drop ordering to the changelist view,\nhowever this introduces a couple of problems\u2026\n\n-  the changelist view supports pagination, which makes drag-and-drop\n   ordering across pages impossible.\n-  the changelist view by default, does not order records based on a\n   foreign key, nor distinguish between rows that are associated with a\n   foreign key. this makes ordering the records grouped by a foreign key\n   impossible.\n-  the changelist supports in-line editing, and adding drag-and-drop\n   ordering on top of that just seemed a little much in my opinion.\n\nstatus\n~~~~~~\n\ndjango-admin-sortable is currently used in production.\n\nwhat\u2019s new in 2.3.0?\n~~~~~~~~~~~~~~~~~~~~\n\n-  django 4 compatibility\n\nfuture\n~~~~~~\n\n-  better template support for foreign keys that are self referential.\n   if someone would like to take on rendering recursive sortables, that\n   would be super.\n\nlicense\n~~~~~~~\n\ndjango-admin-sortable is released under the apache public license v2.\n\n.. |pypi version| image:: https://img.shields.io/pypi/v/django-admin-sortable.svg\n   :target: https://pypi.python.org/pypi/django-admin-sortable\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/django-admin-sortable.svg\n   :target: https://pypi.python.org/pypi/django-admin-sortable\n.. |build status| image:: https://travis-ci.org/alsoicode/django-admin-sortable.svg?branch=master\n   :target: https://travis-ci.org/alsoicode/django-admin-sortable\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apl",
  "name": "django-admin-sortable",
  "package_url": "https://pypi.org/project/django-admin-sortable/",
  "project_url": "https://pypi.org/project/django-admin-sortable/",
  "project_urls": {
    "Homepage": "https://github.com/iambrandontaylor/django-admin-sortable"
  },
  "release_url": "https://pypi.org/project/django-admin-sortable/2.3/",
  "requires_dist": [
    "django"
  ],
  "requires_python": "",
  "summary": "drag and drop sorting for models and inline models in django admin.",
  "version": "2.3",
  "releases": [],
  "developers": [
    "alsoicode@gmail.com",
    "brandon_taylor"
  ],
  "kwds": "sortableadmin sortables is_sortable get_is_sortable sortable",
  "license_kwds": "apl",
  "libtype": "pypi",
  "id": "pypi_django_admin_sortable",
  "homepage": "https://github.com/iambrandontaylor/django-admin-sortable",
  "release_count": 91,
  "dependency_ids": [
    "pypi_django"
  ]
}
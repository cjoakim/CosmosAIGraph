{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: build tools"
  ],
  "description": "# wavedrompy\n\nthis is a python module and command line fully compatible with [wavedrom](https://wavedrom.com/), which is originally implemented in javascript. it is useful if you want to generate wavedrom diagrams from a python environment or simply don't want to install the _node.js_ environment just to use wavedrom as simple command line.\n\nwavedrompy is for example used in [sphinxcontrib-wavedrom](https://pypi.org/project/sphinxcontrib-wavedrom/) to render wavedrom for sphinx documentation. while the original project renders the diagrams in javascript in the browser, wavedrompy renders them to svg files.\n\nthis tool is a direct translation of original javascript file _wavedrom.js_ to python. no extra feature added. we seek to have it fully compatible.\n\nthe tool _wavedrompy_ directly converts _wavedrom_ compatible json files into svg format.\n\n[![build status](https://travis-ci.org/wallento/wavedrompy.svg?branch=master)](https://travis-ci.org/wallento/wavedrompy)\n[![pypi version](https://badge.fury.io/py/wavedrom.svg)](https://badge.fury.io/py/wavedrom)\n\n## installation\n\nit is most easy to just install wavedrom via pip/pypi:\n\n    pip install wavedrom\n    \nalternatively you can install the latest version from this repository:\n\n    pip install git+https://github.com/wallento/wavedrompy\n    \nor from your local copy:\n\n    pip install .\n\n## usage\n\nyou can either use the tool from python:\n\n    import wavedrom\n    svg = wavedrom.render(\"\"\"\n    { \"signal\": [\n     { \"name\": \"ck\",   \"wave\": \"p.......\",                                              \"period\": 2  },\n     { \"name\": \"cmd\",  \"wave\": \"x.3x=x4x=x=x=x=x\", \"data\": \"ras nop cas nop nop nop nop\", \"phase\": 0.5 },\n     { \"name\": \"addr\", \"wave\": \"x.=x..=x........\", \"data\": \"row col\",                     \"phase\": 0.5 },\n     { \"name\": \"dqs\",  \"wave\": \"z.......0.1010z.\" },\n     { \"name\": \"dq\",   \"wave\": \"z.........5555z.\", \"data\": \"d0 d1 d2 d3\" }\n    ]}\"\"\")\n    svg.saveas(\"demo1.svg\")\n    \nthis will render a waveform as:\n\n![example 1](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo1.svg?sanitize=true \"example 1\")\n\nyou can find more examples [in the wavedrom tutorial](https://wavedrom.com/tutorial.html).\n\na second feature is that wavedrom can render logic circuit diagrams:\n\n    import wavedrom\n    svg = wavedrom.render(\"\"\"\n    { \"assign\":[\n      [\"out\",\n        [\"|\",\n          [\"&\", [\"~\", \"a\"], \"b\"],\n          [\"&\", [\"~\", \"b\"], \"a\"]\n        ]\n      ]\n    ]}\"\"\")\n    svg.saveas(\"demo2.svg\")\n \nthis will render a as:\n\n![example 2](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo2.svg?sanitize=true \"example 2\")\n\nyou can find more examples [in the wavedrom tutorial2](https://wavedrom.com/tutorial2.html).\n\nfinally, wavedrom can draw registers as bitfields:\n\n    import wavedrom\n    svg = wavedrom.render(\"\"\"\n    {\"reg\": [\n      { \"name\": \"ipo\",   \"bits\": 8, \"attr\": \"ro\" },\n      {                  \"bits\": 7 },\n      { \"name\": \"<o>b</o><b>r<i>k</i></b>\",   \"bits\": 5, \"attr\": \"rw\", \"type\": 4 },\n      { \"name\": \"cpk\",   \"bits\": 1 },\n      { \"name\": \"clear\", \"bits\": 3 },\n      { \"bits\": 8 }\n      ]\n    ]}\"\"\")\n    svg.saveas(\"demo3.svg\")\n\n    \nthis will render as:\n\n![example 3](https://raw.githubusercontent.com/wallento/wavedrompy/2e8568d50561f534133d036fee3bd35756f416d9/doc/demo3.svg?sanitize=true \"example 3\")\n\nthis mode is documented as part of the [bit-field](https://www.npmjs.com/package/bit-field) javascript package.\n\nalternatively, wavedrompy can be called from the command line:\n\n    wavedrompy --input input.json --svg output.svg\n\n## important notice\n\nthe command line uses python's json interpreter that is more restrictive (coherent with the jsoc spec), while the javascript json is more relaxed:\n\n * all strings have to be written between quotes (\"\"),\n * extra comma (,) not supported at end of lists or dictionaries\n \n## asciidoctor example\n\nan _asciidoctor_ example is provided to directly generate timing diagrams from _asciidoctor_ formatted documents.\n\n",
  "docs_url": null,
  "keywords": "wavedrom svg",
  "license": "",
  "name": "wavedrom",
  "package_url": "https://pypi.org/project/wavedrom/",
  "project_url": "https://pypi.org/project/wavedrom/",
  "project_urls": {
    "Homepage": "https://github.com/wallento/wavedrompy"
  },
  "release_url": "https://pypi.org/project/wavedrom/2.0.3.post3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "wavedrom compatible python command line",
  "version": "2.0.3.post3",
  "releases": [],
  "developers": [
    "aliaksei_chapyzhenka",
    "k4zuki@github.com",
    "stefan@wallentowitz.de"
  ],
  "kwds": "wavedrompy _wavedrompy_ wavedrom sphinxcontrib _wavedrom_",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_wavedrom",
  "homepage": "https://github.com/wallento/wavedrompy",
  "release_count": 17,
  "dependency_ids": []
}
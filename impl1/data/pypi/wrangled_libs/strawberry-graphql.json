{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<img src=\"https://github.com/strawberry-graphql/strawberry/raw/main/.github/logo.png\" width=\"124\" height=\"150\">\n\n# strawberry graphql\n\n> python graphql library based on dataclasses\n\n[![circleci](https://img.shields.io/circleci/token/307b40d5e152e074d34f84d30d226376a15667d5/project/github/strawberry-graphql/strawberry/main.svg?style=for-the-badge)](https://circleci.com/gh/strawberry-graphql/strawberry/tree/main)\n[![discord](https://img.shields.io/discord/689806334337482765?label=discord&logo=discord&logocolor=white&style=for-the-badge&color=blue)](https://discord.gg/zkrtejq)\n[![pypi](https://img.shields.io/pypi/v/strawberry-graphql?logo=pypi&logocolor=white&style=for-the-badge)](https://pypi.org/project/strawberry-graphql/)\n\n## installation ( quick start )\n\nthe quick start method provides a server and cli to get going quickly. install\nwith:\n\n```shell\npip install \"strawberry-graphql[debug-server]\"\n```\n\n## getting started\n\ncreate a file called `app.py` with the following code:\n\n```python\nimport strawberry\n\n\n@strawberry.type\nclass user:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass query:\n    @strawberry.field\n    def user(self) -> user:\n        return user(name=\"patrick\", age=100)\n\n\nschema = strawberry.schema(query=query)\n```\n\nthis will create a graphql schema defining a `user` type and a single query\nfield `user` that will return a hardcoded user.\n\nto run the debug server run the following command:\n\n```shell\nstrawberry server app\n```\n\nopen the debug server by clicking on the following link:\n[http://0.0.0.0:8000/graphql](http://0.0.0.0:8000/graphql)\n\nthis will open graphiql where you can test the api.\n\n### type-checking\n\nstrawberry comes with a [mypy] plugin that enables statically type-checking your\ngraphql schema. to enable it, add the following lines to your `mypy.ini`\nconfiguration:\n\n```ini\n[mypy]\nplugins = strawberry.ext.mypy_plugin\n```\n\n[mypy]: http://www.mypy-lang.org/\n\n### django integration\n\na django view is provided for adding a graphql endpoint to your application.\n\n1. add the app to your `installed_apps`.\n\n```python\ninstalled_apps = [\n    ...,  # your other apps\n    \"strawberry.django\",\n]\n```\n\n2. add the view to your `urls.py` file.\n\n```python\nfrom strawberry.django.views import graphqlview\nfrom .schema import schema\n\nurlpatterns = [\n    ...,\n    path(\"graphql\", graphqlview.as_view(schema=schema)),\n]\n```\n\n## websockets\n\nto support graphql subscriptions over websockets you need to provide a websocket\nenabled server. the debug server can be made to support websockets with these\ncommands:\n\n```shell\npip install 'strawberry-graphql[debug-server]'\npip install 'uvicorn[standard]'\n```\n\n## examples\n\n* [various examples on how to use strawberry](https://github.com/strawberry-graphql/examples)\n* [full stack example using starlette, sqlalchemy, typescript codegen and next.js](https://github.com/jokull/python-ts-graphql-demo)\n* [quart + strawberry tutorial](https://github.com/rockyburt/ketchup)\n\n## contributing\n\nwe use [poetry](https://github.com/sdispater/poetry) to manage dependencies, to\nget started follow these steps:\n\n```shell\ngit clone https://github.com/strawberry-graphql/strawberry\ncd strawberry\npoetry install --with integrations\npoetry run pytest\n```\n\nthis will install all the dependencies (including dev ones) and run the tests.\n\n### pre commit\n\nwe have a configuration for\n[pre-commit](https://github.com/pre-commit/pre-commit), to add the hook run the\nfollowing command:\n\n```shell\npre-commit install\n```\n\n## links\n\n- project homepage: https://strawberry.rocks\n- repository: https://github.com/strawberry-graphql/strawberry\n- issue tracker: https://github.com/strawberry-graphql/strawberry/issues\n  - in case of sensitive bugs like security vulnerabilities, please contact\n    patrick.arminio@gmail.com directly instead of using the issue tracker. we\n    value your effort to improve the security and privacy of this project!\n\n## licensing\n\nthe code in this project is licensed under mit license. see [license](./license)\nfor more information.\n\n![recent activity](https://images.repography.com/0/strawberry-graphql/strawberry/recent-activity/d751713988987e9331980363e24189ce.svg)\n",
  "docs_url": null,
  "keywords": "graphql,api,rest,starlette,async",
  "license": "mit",
  "name": "strawberry-graphql",
  "package_url": "https://pypi.org/project/strawberry-graphql/",
  "project_url": "https://pypi.org/project/strawberry-graphql/",
  "project_urls": {
    "Changelog": "https://strawberry.rocks/changelog",
    "Discord": "https://discord.com/invite/3uQ2PaY",
    "Documentation": "https://strawberry.rocks/",
    "Homepage": "https://strawberry.rocks/",
    "Mastodon": "https://farbun.social/@strawberry",
    "Repository": "https://github.com/strawberry-graphql/strawberry",
    "Sponsor on GitHub": "https://github.com/sponsors/strawberry-graphql",
    "Sponsor on Open Collective": "https://opencollective.com/strawberry-graphql",
    "Twitter": "https://twitter.com/strawberry_gql"
  },
  "release_url": "https://pypi.org/project/strawberry-graphql/0.217.0/",
  "requires_dist": [
    "graphql-core (>=3.2.0,<3.3.0)",
    "typing-extensions (>=4.5.0)",
    "python-dateutil (>=2.7.0,<3.0.0)",
    "starlette (>=0.18.0) ; extra == \"asgi\" or extra == \"debug-server\"",
    "typer (>=0.7.0) ; extra == \"debug-server\" or extra == \"cli\"",
    "pygments (>=2.3,<3.0) ; extra == \"debug-server\" or extra == \"cli\"",
    "uvicorn (>=0.11.6) ; extra == \"debug-server\"",
    "Django (>=3.2) ; extra == \"django\"",
    "asgiref (>=3.2,<4.0) ; extra == \"django\" or extra == \"channels\"",
    "flask (>=1.1) ; extra == \"flask\"",
    "quart (>=0.19.3) ; extra == \"quart\"",
    "opentelemetry-api (<2) ; extra == \"opentelemetry\"",
    "opentelemetry-sdk (<2) ; extra == \"opentelemetry\"",
    "chalice (>=1.22,<2.0) ; extra == \"chalice\"",
    "pydantic (>1.6.1) ; extra == \"pydantic\"",
    "python-multipart (>=0.0.5,<0.0.7) ; extra == \"asgi\" or extra == \"debug-server\" or extra == \"fastapi\"",
    "sanic (>=20.12.2) ; extra == \"sanic\"",
    "aiohttp (>=3.7.4.post0,<4.0.0) ; extra == \"aiohttp\"",
    "fastapi (>=0.65.2) ; extra == \"fastapi\"",
    "starlite (>=1.48.0) ; (python_version >= \"3.8\") and (extra == \"starlite\")",
    "channels (>=3.0.5) ; extra == \"channels\"",
    "astunparse (>=1.6.3,<2.0.0) ; python_version < \"3.9\"",
    "libcst (>=0.4.7) ; extra == \"debug\" or extra == \"debug-server\" or extra == \"cli\"",
    "rich (>=12.0.0) ; extra == \"debug\" or extra == \"debug-server\" or extra == \"cli\"",
    "pyinstrument (>=4.0.0) ; extra == \"pyinstrument\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "a library for creating graphql apis",
  "version": "0.217.0",
  "releases": [],
  "developers": [
    "patrick.arminio@gmail.com",
    "patrick_arminio"
  ],
  "kwds": "graphql graphiql graphqlview discord strawberry",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_strawberry_graphql",
  "homepage": "https://strawberry.rocks/",
  "release_count": 794,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_asgiref",
    "pypi_astunparse",
    "pypi_chalice",
    "pypi_channels",
    "pypi_django",
    "pypi_fastapi",
    "pypi_flask",
    "pypi_graphql_core",
    "pypi_libcst",
    "pypi_opentelemetry_api",
    "pypi_opentelemetry_sdk",
    "pypi_pydantic",
    "pypi_pygments",
    "pypi_pyinstrument",
    "pypi_python_dateutil",
    "pypi_python_multipart",
    "pypi_quart",
    "pypi_rich",
    "pypi_sanic",
    "pypi_starlette",
    "pypi_starlite",
    "pypi_typer",
    "pypi_typing_extensions",
    "pypi_uvicorn"
  ]
}
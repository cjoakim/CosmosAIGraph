{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "async praw: the asynchronous python reddit api wrapper\n======================================================\n\n.. image:: https://img.shields.io/pypi/v/asyncpraw.svg\n    :alt: latest async praw version\n    :target: https://pypi.python.org/pypi/asyncpraw\n\n.. image:: https://img.shields.io/pypi/pyversions/asyncpraw\n    :alt: supported python versions\n    :target: https://pypi.python.org/pypi/asyncpraw\n\n.. image:: https://img.shields.io/pypi/dm/asyncpraw\n    :alt: pypi - downloads - monthly\n    :target: https://pypi.python.org/pypi/asyncpraw\n\n.. image:: https://coveralls.io/repos/github/praw-dev/asyncpraw/badge.svg?branch=master\n    :alt: coveralls coverage\n    :target: https://coveralls.io/github/praw-dev/asyncpraw?branch=master\n\n.. image:: https://github.com/praw-dev/asyncpraw/workflows/ci/badge.svg\n    :alt: github actions status\n    :target: https://github.com/praw-dev/asyncpraw/actions?query=branch%3amaster\n\n.. image:: https://img.shields.io/badge/contributor%20covenant-v2.0%20adopted-ff69b4.svg\n    :alt: contributor covenant\n    :target: https://github.com/praw-dev/.github/blob/main/code_of_conduct.md\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white\n    :alt: pre-commit\n    :target: https://github.com/pre-commit/pre-commit\n\nasync praw, an abbreviation for \"asynchronous python reddit api wrapper\", is a python\npackage that allows for simple access to reddit's api. async praw aims to be easy to use\nand internally follows all of `reddit's api rules\n<https://github.com/reddit/reddit/wiki/api>`_. with async praw there's no need to\nintroduce ``sleep`` calls in your code. give your client an appropriate user agent and\nyou're set.\n\n.. _installation:\n\ninstallation\n------------\n\nasync praw is supported on python 3.7+. the recommended way to install async praw is via\n`pip <https://pypi.python.org/pypi/pip>`_.\n\n.. code-block:: bash\n\n    pip install asyncpraw\n\nto install the latest development version of async praw run the following instead:\n\n.. code-block:: bash\n\n    pip install --upgrade https://github.com/praw-dev/asyncpraw/archive/master.zip\n\nfor instructions on installing python and pip see \"the hitchhiker's guide to python\"\n`installation guides <https://docs.python-guide.org/en/latest/starting/installation/>`_.\n\nquickstart\n----------\n\nassuming you already have a credentials for a script-type oauth application you can\ninstantiate an instance of async praw like so:\n\n.. code-block:: python\n\n    import asyncpraw\n\n    reddit = asyncpraw.reddit(\n        client_id=\"client_id\",\n        client_secret=\"client_secret\",\n        password=\"password\",\n        user_agent=\"useragent\",\n        username=\"username\",\n    )\n\nwith the ``reddit`` instance you can then interact with reddit:\n\n.. code-block:: python\n\n    # create a submission to r/test\n    subreddit = await reddit.subreddit(\"test\")\n    await subreddit.submit(\"test submission\", url=\"https://reddit.com\")\n\n    # comment on a known submission\n    submission = await reddit.submission(\n        url=\"https://www.reddit.com/comments/5e1az9\", fetch=false\n    )\n    await submission.reply(\"super rad!\")\n\n    # reply to the first comment of a weekly top thread of a moderated community\n    subreddit = await reddit.subreddit(\"mod\")\n    async for submission in subreddit.top(time_filter=\"week\"):\n        comments = await submission.comments()\n        await comments[0].reply(\"an automated reply\")\n\n    # output score for the first 256 items on the frontpage\n    async for submission in reddit.front.hot(limit=256):\n        print(submission.score)\n\n    # obtain the moderator listing for r/test\n    subreddit = await reddit.subreddit(\"test\")\n    async for moderator in subreddit.moderator:\n        print(moderator)\n\nplease see async praw's `documentation <https://asyncpraw.readthedocs.io/>`_ for more\nexamples of what you can do with async praw.\n\nasync praw discussion and support\n---------------------------------\n\nfor those new to python, or would otherwise consider themselves a python beginner,\nplease consider asking questions on the `r/learnpython\n<https://www.reddit.com/r/learnpython>`_ subreddit. there are wonderful people there who\ncan help with general python and simple async praw related questions.\n\notherwise, there are a few official places to ask questions about async praw:\n\n`r/redditdev <https://www.reddit.com/r/redditdev>`_ is the best place on reddit to ask\nasync praw related questions. this subreddit is for all reddit api related discussion so\nplease tag submissions with *[async praw]*. please perform a search on the subreddit\nfirst to see if anyone has similar questions.\n\nreal-time chat can be conducted via the `praw slack organization\n<https://join.slack.com/t/praw/shared_invite/enqtotuwmdcxotq0nzy5lwvkmgq3zdk5ymq5mdewytzmmmjkmtjknjbknty3otu0y2e2ngrly2zhztazmwzmmwrimtmwyjdjodkxogyyzjy>`_\n(please create an issue if that invite link has expired).\n\nplease do not directly message any of the contributors via reddit, email, or slack\nunless they have indicated otherwise. we strongly encourage everyone to help others with\ntheir questions.\n\nplease file bugs and feature requests as issues on `github\n<https://github.com/praw-dev/asyncpraw/issues>`_ after first searching to ensure a\nsimilar issue was not already filed. if such an issue already exists please give it a\nthumbs up reaction. comments to issues containing additional information are certainly\nwelcome.\n\n.. note::\n\n    this project is released with a `contributor code of conduct\n    <https://github.com/praw-dev/.github/blob/main/code_of_conduct.md>`_. by\n    participating in this project you agree to abide by its terms.\n\ndocumentation\n-------------\n\nasync praw's documentation is located at https://asyncpraw.readthedocs.io/.\n\nhistory\n-------\n\n`february 2019\n<https://github.com/praw-dev/asyncpraw/commit/55480eb3d59dc7bc3d1480d83b98c95effc77181>`_:\njoel forked praw and began work on async praw, an asynchronous compatible version of\npraw.\n\n`july 2020\n<https://github.com/praw-dev/asyncpraw/commit/b8b8a4bf3618639968e8be379e85e2ff84f2307a>`_:\nasync praw was moved into the praw-dev namespace.\n\nlicense\n-------\n\nasync praw's source (v7.1.1+) is provided under the `simplified bsd license\n<https://github.com/praw-dev/asyncpraw/blob/30796acc29b4ba2335cf0eab414477702c29452f/license.txt>`_.\n\n- copyright \u00a9, 2020, joel payne\n",
  "docs_url": null,
  "keywords": "reddit api wrapper asyncpraw praw async asynchronous",
  "license": "simplified bsd license",
  "name": "asyncpraw",
  "package_url": "https://pypi.org/project/asyncpraw/",
  "project_url": "https://pypi.org/project/asyncpraw/",
  "project_urls": {
    "Change Log": "https://asyncpraw.readthedocs.io/en/latest/package_info/change_log.html",
    "Documentation": "https://asyncpraw.readthedocs.io/",
    "Issue Tracker": "https://github.com/praw-dev/asyncpraw/issues",
    "Source Code": "https://github.com/praw-dev/asyncpraw"
  },
  "release_url": "https://pypi.org/project/asyncpraw/7.7.1/",
  "requires_dist": [
    "aiofiles (<1)",
    "aiohttp (<4)",
    "aiosqlite (<=0.17.0)",
    "asyncprawcore (<3,>=2.1)",
    "update-checker (>=0.18)",
    "coveralls ; extra == 'ci'",
    "packaging ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-rtd-dark-mode ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "sphinxcontrib-trio ; extra == 'dev'",
    "mock (==4.*) ; extra == 'dev'",
    "pytest (==7.*) ; extra == 'dev'",
    "pytest-asyncio (==0.18.*) ; extra == 'dev'",
    "pytest-vcr (==1.*) ; extra == 'dev'",
    "testfixtures (==6.*) ; extra == 'dev'",
    "urllib3 (==1.*) ; extra == 'dev'",
    "vcrpy (==4.2.1) ; extra == 'dev'",
    "asynctest (==0.13.*) ; (python_version < \"3.8\") and extra == 'dev'",
    "pre-commit ; extra == 'lint'",
    "sphinx ; extra == 'lint'",
    "sphinx-rtd-dark-mode ; extra == 'lint'",
    "sphinx-rtd-theme ; extra == 'lint'",
    "sphinxcontrib-trio ; extra == 'lint'",
    "sphinx ; extra == 'readthedocs'",
    "sphinx-rtd-dark-mode ; extra == 'readthedocs'",
    "sphinx-rtd-theme ; extra == 'readthedocs'",
    "sphinxcontrib-trio ; extra == 'readthedocs'",
    "mock (==4.*) ; extra == 'test'",
    "pytest (==7.*) ; extra == 'test'",
    "pytest-asyncio (==0.18.*) ; extra == 'test'",
    "pytest-vcr (==1.*) ; extra == 'test'",
    "testfixtures (==6.*) ; extra == 'test'",
    "urllib3 (==1.*) ; extra == 'test'",
    "vcrpy (==4.2.1) ; extra == 'test'",
    "asynctest (==0.13.*) ; (python_version < \"3.8\") and extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "async praw, an abbreviation for \"asynchronous python reddit api wrapper\", is a python package that allows for simple access to reddit's api.",
  "version": "7.7.1",
  "releases": [],
  "developers": [
    "joel_payne",
    "lilspazjoekp@gmail.com"
  ],
  "kwds": "asyncpraw async pyversions asynchronous api",
  "license_kwds": "simplified bsd license",
  "libtype": "pypi",
  "id": "pypi_asyncpraw",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_aiohttp",
    "pypi_aiosqlite",
    "pypi_asyncprawcore",
    "pypi_asynctest",
    "pypi_coveralls",
    "pypi_mock",
    "pypi_packaging",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_vcr",
    "pypi_sphinx",
    "pypi_sphinx_rtd_dark_mode",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_trio",
    "pypi_testfixtures",
    "pypi_update_checker",
    "pypi_urllib3",
    "pypi_vcrpy"
  ]
}
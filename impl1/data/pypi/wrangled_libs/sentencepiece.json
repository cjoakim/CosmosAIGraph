{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: unix",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: linguistic"
  ],
  "description": "# sentencepiece python wrapper\n\npython wrapper for sentencepiece. this api will offer the encoding, decoding and training of sentencepiece.\n\n## build and install sentencepiece\nfor linux (x64/i686), macos, and windows(win32/x64) environment, you can simply use pip command to install sentencepiece python module.\n\n```\n% pip install sentencepiece\n```\n\nto build and install the python wrapper from source, try the following commands to build and install wheel package.\n```\n% git clone https://github.com/google/sentencepiece.git \n% cd sentencepiece\n% mkdir build\n% cd build\n% cmake .. -dspm_enable_shared=off -dcmake_install_prefix=./root\n% make install\n% cd ../python\n% python setup.py bdist_wheel\n% pip install dist/sentencepiece*.whl\n```\n\nif you don\u2019t have write permission to the global site-packages directory or don\u2019t want to install into it, please try:\n```\n% python setup.py install --user\n```\n\n## usage\n\nsee [this google colab page](https://github.com/google/sentencepiece/blob/master/python/sentencepiece_python_module_example.ipynb) to run sentencepiece interactively.\n\n### segmentation\n```\n% python\n>>> import sentencepiece as spm\n>>> sp = spm.sentencepieceprocessor(model_file='test/test_model.model')\n\n>>> sp.encode('this is a test')\n[284, 47, 11, 4, 15, 400]\n\n>>> sp.encode(['this is a test', 'hello world'], out_type=int)\n[[284, 47, 11, 4, 15, 400], [151, 88, 21, 887]]\n\n>>> sp.encode_as_ids(['this is a test', 'hello world'])\n[[284, 47, 11, 4, 15, 400], [151, 88, 21, 887]]\n\n>>> sp.encode('this is a test', out_type=str)\n['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est']\n\n>>> sp.encode(['this is a test', 'hello world'], out_type=str)\n[['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est'], ['\u2581he', 'll', 'o', '\u2581world']]\n\n>>> sp.encode_as_pieces(['this is a test', 'hello world'])\n[['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est'], ['\u2581he', 'll', 'o', '\u2581world']]\n\n>>> proto = sp.encode('this is a test', out_type='immutable_proto')\n>>> for n in proto.pieces:\n...     print('piece=\"{}\" surface=\"{}\" id={} begin={} end={}'.format(n.piece, n.surface, n.id, n.begin, n.end))\n... \npiece=\"\u2581this\" surface=\"this\" id=284 begin=0 end=4\npiece=\"\u2581is\" surface=\" is\" id=47 begin=4 end=7\npiece=\"\u2581a\" surface=\" a\" id=11 begin=7 end=9\npiece=\"\u2581\" surface=\" \" id=4 begin=9 end=10\npiece=\"t\" surface=\"t\" id=15 begin=10 end=11\npiece=\"est\" surface=\"est\" id=400 begin=11 end=14\n\n>>> [[x.id for x in proto.pieces], [x.piece for x in proto.pieces], [x.begin for x in proto.pieces], [x.end for x in proto.pieces]]\n[[284, 47, 11, 4, 15, 400], ['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est'], [0, 4, 7, 9, 10, 11], [4, 7, 9, 10, 11, 14]]\n\n>>> proto2 = sp.encode_as_immutable_proto('this is a test')\n>>> proto2 == proto\ntrue\n\n>>> for _ in range(10):\n...     sp.encode('this is a test', out_type=str, enable_sampling=true, alpha=0.1, nbest_size=-1)\n... \n['\u2581', 'this', '\u2581', 'is', '\u2581a', '\u2581', 't', 'e', 'st']\n['\u2581t', 'h', 'i', 's', '\u2581is', '\u2581a', '\u2581', 'te', 's', 't']\n['\u2581t', 'h', 'is', '\u2581', 'is', '\u2581', 'a', '\u2581', 't', 'est']\n['\u2581', 'this', '\u2581is', '\u2581', 'a', '\u2581', 't', 'e', 'st']\n['\u2581', 'this', '\u2581', 'is', '\u2581', 'a', '\u2581', 't', 'e', 's', 't']\n['\u2581this', '\u2581is', '\u2581a', '\u2581', 'te', 's', 't']\n['\u2581this', '\u2581is', '\u2581', 'a', '\u2581', 't', 'e', 'st']\n['\u2581', 't', 'h', 'is', '\u2581', 'is', '\u2581', 'a', '\u2581', 'te', 'st']\n['\u2581', 'this', '\u2581', 'i', 's', '\u2581a', '\u2581', 't', 'e', 'st']\n['\u2581this', '\u2581', 'is', '\u2581a', '\u2581', 't', 'est']\n\n>> sp.nbest_encode('this is a test', nbest_size=5, out_type=str)\n[['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est'], \n['\u2581this', '\u2581is', '\u2581a', '\u2581', 'te', 'st'], \n['\u2581this', '\u2581is', '\u2581a', '\u2581', 'te', 's', 't'],\n['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'e', 'st'],\n['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'es', 't']]\n\n>>> sp.sample_encode_and_score('this is a test', num_samples=5, alpha=0.1, out_type=str, wor=true)\n[(['\u2581this', '\u2581', 'i', 's', '\u2581a', '\u2581', 'te', 's', 't'], -3.043105125427246),\n(['\u2581this', '\u2581', 'i', 's', '\u2581a', '\u2581', 'te', 'st'], -2.8475849628448486),\n(['\u2581', 'this', '\u2581is', '\u2581', 'a', '\u2581', 'te', 'st'], -3.043248176574707),\n(['\u2581', 'this', '\u2581is', '\u2581a', '\u2581', 't', 'e', 'st'], -2.87727689743042),\n(['\u2581', 'this', '\u2581', 'i', 's', '\u2581', 'a', '\u2581', 't', 'est'], -3.6284031867980957)]\n\n>>> sp.decode([284, 47, 11, 4, 15, 400])\n'this is a test'\n\n>>> sp.decode([[284, 47, 11, 4, 15, 400], [151, 88, 21, 887]])\n['this is a test', 'hello world']\n\n>>> proto = sp.decode([284, 47, 11, 4, 15, 400], out_type='immutable_proto') \n>>> proto.text\n'this is a test'\n\n>>> sp.decode(['\u2581', 'this', '\u2581', 'is', '\u2581a', '\u2581', 't', 'e', 'st'])\n'this is a test'\n\n>>> sp.decode([['\u2581this', '\u2581is', '\u2581a', '\u2581', 't', 'est'], ['\u2581he', 'll', 'o', '\u2581world']])\n['this is a test', 'hello world']\n\n>>> sp.get_piece_size()\n1000\n\n>>> sp.id_to_piece(2)\n'</s>'\n\n>>> sp.id_to_piece([2, 3, 4])\n['</s>', '\\r', '\u2581']\n\n>>> sp.piece_to_id('<s>')\n1\n\n>>> sp.piece_to_id(['</s>', '\\r', '\u2581'])\n[2, 3, 4]\n\n>>> len(sp)\n1000\n\n>>> sp['</s>']\n2\n```\n\n### model training\ntraining is performed by passing parameters of [spm_train](https://github.com/google/sentencepiece#train-sentencepiece-model) to  sentencepiecetrainer.train() function.\n\n```\n>>> import sentencepiece as spm\n>>> spm.sentencepiecetrainer.train(input='test/botchan.txt', model_prefix='m', vocab_size=1000, user_defined_symbols=['foo', 'bar'])\nsentencepiece_trainer.cc(73) log(info) starts training with : \ntrainer_spec {\n  input: test/botchan.txt\n  .. snip\nunigram_model_trainer.cc(500) log(info) em sub_iter=1 size=1188 obj=10.2839 num_tokens=32182 num_tokens/piece=27.0892\nunigram_model_trainer.cc(500) log(info) em sub_iter=0 size=1100 obj=10.4269 num_tokens=33001 num_tokens/piece=30.0009\nunigram_model_trainer.cc(500) log(info) em sub_iter=1 size=1100 obj=10.4069 num_tokens=33002 num_tokens/piece=30.0018\ntrainer_interface.cc(595) log(info) saving model: m.model\ntrainer_interface.cc(619) log(info) saving vocabs: m.vocab\n>>>\n```\n\n### training without local filesystem\nsentencepiece trainer can receive any iterable object to feed training sentences. you can also pass a file object (instance with write() method) to emit the output model to any devices. these features are useful to run sentencepiece on environment that have limited access to the local file system (e.g., google colab.)\n\n```\nimport urllib.request\nimport io\nimport sentencepiece as spm\n\n# loads model from url as iterator and stores the model to bytesio.\nmodel = io.bytesio()\nwith urllib.request.urlopen(\n    'https://raw.githubusercontent.com/google/sentencepiece/master/data/botchan.txt'\n) as response:\n  spm.sentencepiecetrainer.train(\n      sentence_iterator=response, model_writer=model, vocab_size=1000)\n\n# serialize the model as file.\n# with open('out.model', 'wb') as f:\n#   f.write(model.getvalue())\n\n# directly load the model from serialized model.\nsp = spm.sentencepieceprocessor(model_proto=model.getvalue())\nprint(sp.encode('this is test'))\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "sentencepiece",
  "package_url": "https://pypi.org/project/sentencepiece/",
  "project_url": "https://pypi.org/project/sentencepiece/",
  "project_urls": {
    "Homepage": "https://github.com/google/sentencepiece"
  },
  "release_url": "https://pypi.org/project/sentencepiece/0.1.99/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "sentencepiece python wrapper",
  "version": "0.1.99",
  "releases": [],
  "developers": [
    "taku@google.com",
    "taku_kudo"
  ],
  "kwds": "sentencepiece_python_module_example sentencepieceprocessor sentencepiece_trainer sentencepiecetrainer sentencepiece",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_sentencepiece",
  "homepage": "https://github.com/google/sentencepiece",
  "release_count": 31,
  "dependency_ids": []
}
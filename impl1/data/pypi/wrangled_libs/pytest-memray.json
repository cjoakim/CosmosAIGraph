{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: debuggers"
  ],
  "description": "<img src=\"https://raw.githubusercontent.com/bloomberg/pytest-memray/main/docs/_static/images/logo.png\" width=\"70%\" style=\"display: block; margin: 0 auto\"  alt=\"logo\"/>\n\n# pytest-memray\n\n[![pypi](https://img.shields.io/pypi/v/pytest-memray?style=flat-square)](https://pypi.org/project/pytest-memray)\n[![pypi - implementation](https://img.shields.io/pypi/implementation/pytest-memray?style=flat-square)](https://pypi.org/project/pytest-memray)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/pytest-memray?style=flat-square)](https://pypi.org/project/pytest-memray)\n[![pypi - downloads](https://img.shields.io/pypi/dm/pytest-memray?style=flat-square)](https://pypistats.org/packages/pytest-memray)\n[![pypi - license](https://img.shields.io/pypi/l/pytest-memray?style=flat-square)](https://opensource.org/licenses/mit)\n[![tests](https://github.com/bloomberg/pytest-memray/actions/workflows/build.yml/badge.svg)](https://github.com/bloomberg/pytest-memray/actions/workflows/build.yml)\n![code style](https://img.shields.io/badge/code%20style-black-000000.svg)\n\npytest-memray is a pytest plugin for easy integration of\n[memray](https://github.com/bloomberg/memray).\n\n## installation\n\npytest-memray requires python 3.8 or higher and can be easily installed using most\ncommon python packaging tools. we recommend installing the latest stable release from\n[pypi](https://pypi.org/project/pytest-memray/) with pip:\n\n```shell\npip install pytest-memray\n```\n\n## documentation\n\nyou can find the latest documentation available\n[here](https://pytest-memray.readthedocs.io/en/latest/).\n\n## quick introduction\n\nto use the plugin in a pytest run, simply add `--memray` to the command line invocation:\n\n```shell\npytest --memray tests\n```\n\nafter the test suite runs you'll see a memory report printed:\n\n```bash\n=================================== test session starts ====================================\nplatform linux -- python 3.10.4, pytest-7.1.2, pluggy-1.0.0\ncachedir: /v/.pytest_cache\nrootdir: /w\nplugins: memray-1.1.0\ncollected 2 items\n\ndemo/test_ok.py .m                                                                   [100%]\n\n========================================= failures =========================================\n____________________________________ test_memory_exceed ____________________________________\ntest was limited to 100.0kib but allocated 117.2kib\n------------------------------------ memray-max-memory -------------------------------------\ntest is using 117.2kib out of limit of 100.0kib\nlist of allocations:\n\t- <listcomp>:/w/demo/test_ok.py:17 -> 117.2kib\n\n====================================== memray report =======================================\nallocations results for demo/test_ok.py::test_memory_exceed\n\n\t \ud83d\udce6 total memory allocated: 117.2kib\n\t \ud83d\udccf total allocations: 30\n\t \ud83d\udcca histogram of allocation sizes: |\u2588|\n\t \ud83e\udd47 biggest allocating functions:\n\t\t- <listcomp>:/w/demo/test_ok.py:17 -> 117.2kib\n\n\nallocations results for demo/test_ok.py::test_track\n\n\t \ud83d\udce6 total memory allocated: 54.9kib\n\t \ud83d\udccf total allocations: 71\n\t \ud83d\udcca histogram of allocation sizes: |\u2588   \u2585    |\n\t \ud83e\udd47 biggest allocating functions:\n\t\t- test_track:/w/demo/test_ok.py:12 -> 39.1kib\n\t\t- _compile_bytecode:<frozen importlib._bootstrap_external>:672 -> 7.2kib\n\t\t- _call_with_frames_removed:<frozen importlib._bootstrap>:241 -> 4.7kib\n\t\t- _call_with_frames_removed:<frozen importlib._bootstrap>:241 -> 1.8kib\n\t\t- _is_marked_for_rewrite:/v/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:240 -> 1.1kib\n\n\n================================= short test summary info ==================================\nmemory problems demo/test_ok.py::test_memory_exceed\n=============================== 1 failed, 1 passed in 0.01s ================================\n```\n\n## configuration - cli flags\n\n- `--memray` - activate memray tracking\n- `--most-allocations=most_allocations` - show the n tests that allocate most memory\n  (n=0 for all)\n- `--hide-memray-summary` - hide the memray summary at the end of the execution\n- `--memray-bin-path` - path where to write the memray binary dumps (by default a\n  temporary folder)\n- `--memray-bin-prefix` - prefix to use for the binary dump (by default a random uuid4\n  hex)\n- `--stacks=stacks` - show the n stack entries when showing tracebacks of memory allocations\n- `--native` - show native frames when showing tracebacks of memory allocations (will be slower)\n- `--trace-python-allocators` - record allocations made by the pymalloc allocator (will be slower)\n\n## configuration - ini\n\n- `memray(bool)` - activate memray tracking\n- `most-allocations(string)` - show the n tests that allocate most memory (n=0 for all)\n- `hide_memray_summary(bool)` - hide the memray summary at the end of the execution\n- `stacks(int)` - show the n stack entries when showing tracebacks of memory allocations\n- `native(bool)`- show native frames when showing tracebacks of memory allocations (will be slower)\n- `trace_python_allocators` - record allocations made by the pymalloc allocator (will be slower)\n\n## license\n\npytest-memray is apache-2.0 licensed, as found in the [license](license) file.\n\n## code of conduct\n\n- [code of conduct](https://github.com/bloomberg/.github/blob/main/code_of_conduct.md)\n\nthis project has adopted a code of conduct. if you have any concerns about the code, or\nbehavior which you have experienced in the project, please contact us at\nopensource@bloomberg.net.\n\n## security policy\n\n- [security policy](https://github.com/bloomberg/pytest-memray/security/policy)\n\nif you believe you have identified a security vulnerability in this project, please send\nemail to the project team at opensource@bloomberg.net, detailing the suspected issue and\nany methods you've found to reproduce it.\n\nplease do not open an issue in the github repository, as we'd prefer to keep\nvulnerability reports private until we've had an opportunity to review and address them.\n\n## contributing\n\nwe welcome your contributions to help us improve and extend this project!\n\nbelow you will find some basic steps required to be able to contribute to the project.\nif you have any questions about this process or any other aspect of contributing to a\nbloomberg open source project, feel free to email opensource@bloomberg.net, and we'll\nget your questions answered as quickly as we can.\n\n### contribution licensing\n\nsince this project is distributed under the terms of an [open source license](license),\ncontributions that you make are licensed under the same terms. in order for us to be\nable to accept your contributions, we will need explicit confirmation from you that you\nare able and willing to provide them under these terms, and the mechanism we use to do\nthis is called a developer's certificate of origin\n[(dco)](https://github.com/bloomberg/.github/blob/main/dco.md). this is very similar to\nthe process used by the linux(r) kernel, samba, and many other major open source\nprojects.\n\nto participate under these terms, all that you must do is include a line like the\nfollowing as the last line of the commit message for each commit in your contribution:\n\n```git\nsigned-off-by: random j. developer <random@developer.example.org>\n```\n\nthe simplest way to accomplish this is to add `-s` or `--signoff` to your `git commit`\ncommand.\n\nyou must use your real name (sorry, no pseudonyms, and no anonymous contributions).\n\n### steps\n\n- create an issue, selecting 'feature request', and explain the proposed change.\n- follow the guidelines in the issue template presented to you.\n- submit the issue.\n- submit a pull request and link it to the issue by including \"#<issue number>\" in the\n  pull request summary.\n\n### development\n\nthe project requires a linux os to work. to set up a dev environment use tox (or\ndirectly the make targets). you can use docker to run the test suite on non linux as in\n(you can parametrize tox by passing additional arguments at the end):\n\n```shell\ndocker-compose run --rm test tox\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pytest-memray",
  "package_url": "https://pypi.org/project/pytest-memray/",
  "project_url": "https://pypi.org/project/pytest-memray/",
  "project_urls": {
    "Bug Tracker": "https://github.com/bloomberg/pytest-memray/issues",
    "Documentation": "https://pytest-memray.readthedocs.io",
    "Source Code": "https://github.com/bloomberg/pytest-memray"
  },
  "release_url": "https://pypi.org/project/pytest-memray/1.5.0/",
  "requires_dist": [
    "memray>=1.5",
    "pytest>=7.2",
    "furo>=2022.12.7; extra == 'docs'",
    "sphinx-argparse>=0.4; extra == 'docs'",
    "sphinx-inline-tabs>=2022.1.2b11; extra == 'docs'",
    "sphinx>=6.1.3; extra == 'docs'",
    "sphinxcontrib-programoutput>=0.17; extra == 'docs'",
    "towncrier>=22.12; extra == 'docs'",
    "black==22.12; extra == 'lint'",
    "isort==5.11.4; extra == 'lint'",
    "mypy==0.991; extra == 'lint'",
    "ruff==0.0.272; extra == 'lint'",
    "covdefaults>=2.2.2; extra == 'test'",
    "coverage>=7.0.5; extra == 'test'",
    "flaky>=3.7; extra == 'test'",
    "pytest-xdist>=3.1; extra == 'test'",
    "pytest>=7.2; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "a simple plugin to use with pytest",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "pgalindo3@bloomberg.net"
  ],
  "kwds": "pytest _pytest memray pytest_cache pypi",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pytest_memray",
  "homepage": "",
  "release_count": 9,
  "dependency_ids": [
    "pypi_black",
    "pypi_covdefaults",
    "pypi_coverage",
    "pypi_flaky",
    "pypi_furo",
    "pypi_isort",
    "pypi_memray",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_ruff",
    "pypi_sphinx",
    "pypi_sphinx_argparse",
    "pypi_sphinx_inline_tabs",
    "pypi_sphinxcontrib_programoutput",
    "pypi_towncrier"
  ]
}
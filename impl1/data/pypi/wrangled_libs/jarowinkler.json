{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "\n<h1 align=\"center\">\n jarowinkler\n</h1>\n<p align=\"center\">\n  <a href=\"https://github.com/maxbachmann/jarowinkler/actions\">\n    <img src=\"https://github.com/maxbachmann/jarowinkler/workflows/build/badge.svg\"\n         alt=\"continous integration\">\n  </a>\n  <a href=\"https://pypi.org/project/jarowinkler/\">\n    <img src=\"https://img.shields.io/pypi/v/jarowinkler\"\n         alt=\"pypi package version\">\n  </a>\n  <a href=\"https://www.python.org\">\n    <img src=\"https://img.shields.io/pypi/pyversions/jarowinkler\"\n         alt=\"python versions\">\n  </a><br/>\n  <a href=\"https://github.com/maxbachmann/jarowinkler/blob/main/license\">\n    <img src=\"https://img.shields.io/github/license/maxbachmann/jarowinkler\"\n         alt=\"github license\">\n  </a>\n</p>\n\n<h4 align=\"center\">jarowinkler is a library to calculate the jaro and jaro-winkler similarity. it is easy to use, is far more performant than all alternatives and is designed to integrate seemingless with <a href=\"https://github.com/maxbachmann/rapidfuzz\">rapidfuzz</a>.</h4>\n\n\n\n## :zap: quickstart\n```python\n>>> from jarowinkler import *\n\n>>> jaro_similarity(\"johnathan\", \"jonathan\")\n0.8796296296296297\n\n>>> jarowinkler_similarity(\"johnathan\", \"jonathan\")\n0.9037037037037037\n```\n\n## \ud83d\ude80 benchmarks\nthe implementation is based on a novel approach to calculate the jaro-winkler similarity using bitparallelism. this is significantly faster than the original approach used in other libraries. the following benchmark shows the performance difference to jellyfish and python-levenshtein. \n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/maxbachmann/jarowinkler/main/bench/results/jarowinkler.svg?sanitize=true\" alt=\"benchmark jarowinkler\">\n</p>\n\n## \u2699\ufe0f installation\n\nyou can install this library from [pypi](https://pypi.org/project/jarowinkler/) with pip:\n```\npip install jarowinkler\n```\njarowinkler provides binary wheels for all common platforms.\n\n### source builds\n\nfor a source build (for example from a sdist packaged) you only require a c++14 compatible compiler. you can install directly from github if you would like.\n```\npip install git+https://github.com/maxbachmann/jarowinkler.git@main\n```\n\n## \ud83d\udcd6 usage\n\nany algorithms in jarowinkler can not only be used with strings, but with any arbitary sequences of hashable objects:\n```python\nfrom jarowinkler import jarowinkler_similarity\n\n\njarowinkler_similarity(\"this is an example\".split(), [\"this\", \"is\", \"a\", \"example\"])\n# 0.8666666666666667\n```\n\nso as long as two objects have the same hash they are treated as similar. you can provide a `__hash__` method for your own object instances.\n\n```python\nclass myobject:\n    def __init__(self, hash):\n        self.hash = hash\n\n    def __hash__(self):\n        return self.hash\n\njarowinkler_similarity([myobject(1), myobject(2)], [myobject(1), myobject(2), myobject(3)])\n# 0.9111111111111111\n```\n\nall algorithms provide a `score_cutoff` parameter. this parameter can be used to filter out bad matches. internally this allows jarowinkler to select faster implementations in some places:\n\n```python\njaro_similarity(\"johnathan\", \"jonathan\", score_cutoff=0.9)\n# 0.0\n\njaro_similarity(\"johnathan\", \"jonathan\", score_cutoff=0.85)\n# 0.8796296296296297\n```\n\njarowinkler can be used with rapidfuzz, which provides multiple methods to compute string metrics on collections of inputs. jarowinkler implements the rapidfuzz c-api which allows rapidfuzz to call the functions without any of the usual overhead of python, which makes this even faster.\n\n```python\nfrom rapidfuzz import process\n\nprocess.cdist([\"johnathan\", \"jonathan\"], [\"johnathan\", \"jonathan\"], scorer=jarowinkler_similarity)\narray([[1.       , 0.9037037],\n       [0.9037037, 1.       ]], dtype=float32)\n```\n\n## \ud83d\udc4d contributing\n\nprs are welcome!\n- found a bug? report it in form of an [issue](https://github.com/maxbachmann/jarowinkler/issues) or even better fix it!\n- can make something faster? great! just avoid external dependencies and remember that existing functionality should still work.\n- something else that do you think is good? do it! just make sure that ci passes and everything from the readme is still applicable (interface, features, and so on).\n- have no time to code? tell your friends and subscribers about jarowinkler. more users, more contributions, more amazing features.\n\nthank you :heart:\n\n## \u26a0\ufe0f license\ncopyright 2021 - present [maxbachmann](https://github.com/maxbachmann). `jarowinkler` is free and open-source software licensed under the [mit license](https://github.com/maxbachmann/jarowinkler/blob/main/license).\n",
  "docs_url": null,
  "keywords": "string,comparison,edit-distance",
  "license": "mit",
  "name": "jarowinkler",
  "package_url": "https://pypi.org/project/jarowinkler/",
  "project_url": "https://pypi.org/project/jarowinkler/",
  "project_urls": {
    "Homepage": "https://github.com/maxbachmann/JaroWinkler"
  },
  "release_url": "https://pypi.org/project/jarowinkler/2.0.1/",
  "requires_dist": [
    "rapidfuzz <4.0.0,>=3.5.2"
  ],
  "requires_python": ">=3.8",
  "summary": "library for fast approximate string matching using jaro and jaro-winkler similarity",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "max_bachmann",
    "pypi@maxbachmann.de"
  ],
  "kwds": "jarowinkler_similarity jarowinkler jaro_similarity python pyversions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jarowinkler",
  "homepage": "https://github.com/maxbachmann/jarowinkler",
  "release_count": 15,
  "dependency_ids": [
    "pypi_rapidfuzz"
  ]
}
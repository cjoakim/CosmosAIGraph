{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: testing",
    "topic :: system :: filesystems"
  ],
  "description": "# pyfakefs [![pypi version](https://badge.fury.io/py/pyfakefs.svg)](https://badge.fury.io/py/pyfakefs) [![python version](https://img.shields.io/pypi/pyversions/pyfakefs.svg)](https://img.shields.io/pypi/pyversions/pyfakefs.svg) ![testsuite](https://github.com/pytest-dev/pyfakefs/workflows/testsuite/badge.svg) [![documentation status](https://readthedocs.org/projects/pytest-pyfakefs/badge/?version=latest)](https://pytest-pyfakefs.readthedocs.io/en/latest/?badge=latest) [![pre-commit.ci status](https://results.pre-commit.ci/badge/github/pytest-dev/pyfakefs/main.svg)](https://results.pre-commit.ci/latest/github/pytest-dev/pyfakefs/main)\n\n\npyfakefs implements a fake file system that mocks the python file system modules.\nusing pyfakefs, your tests operate on a fake file system in memory without\ntouching the real disk. the software under test requires no modification to\nwork with pyfakefs.\n\npyfakefs creates a new empty in-memory file system at each test start, which replaces\nthe real filesystem during the test. think of pyfakefs as making a per-test temporary\ndirectory, except for an entire file system.\n\nthere are several means to achieve this: by using\nthe `fs` fixture if running pytest, by using `fake_filesystem_unittest.testcase` as a\nbase class if using unittest, by using a `fake_filesystem_unittest.patcher` instance\nas a context manager, or by using the `patchfs` decorator.\n\n\n\npyfakefs works with current versions of linux, windows and macos.\n\n## documentation\n\nthis document provides a general overview for pyfakefs.  there is more:\n\n* the documentation at **read the docs**:\n  * the [release documentation](https://pytest-pyfakefs.readthedocs.io/en/stable)\n    contains usage documentation for pyfakefs and a description of the\n    most relevant classes, methods and functions for the last version\n    released on pypi\n  * the [development documentation](https://pytest-pyfakefs.readthedocs.io/en/latest)\n    contains the same documentation for the current main branch\n  * the [release 3.7 documentation](https://pytest-pyfakefs.readthedocs.io/en/v3.7.2/)\n    contains usage documentation for the last version of pyfakefs\n    supporting python 2.7\n* the [release notes](https://github.com/pytest-dev/pyfakefs/blob/main/changes.md)\n  show a list of changes in the latest versions\n\n## usage\nthe simplest method to use pyfakefs is using the `fs` fixture with `pytest`.\nrefer to the\n[usage documentation](https://pytest-pyfakefs.readthedocs.io/en/latest/usage.html)\nfor information on other test scenarios, test customization and\nusing convenience functions.\n\n## features\napart from automatically mocking most file-system functions, pyfakefs\nprovides some additional features:\n- mapping files and directories from the real file system into the fake filesystem\n- configuration and tracking of the file system size\n- pause and resume of patching to be able to use the real file system inside a\n  test step\n- (limited) emulation of other oses (linux, macos or windows)\n- configuration to behave as if running as a non-root user while running\n  under root\n\n## compatibility\npyfakefs works with cpython 3.7 and above, on linux, windows and macos, and\nwith pypy3.\n\npyfakefs works with [pytest](http://doc.pytest.org) version 3.0.0 or above,\nthough a current version is recommended.\n\npyfakefs will not work with python libraries that use c libraries to access the\nfile system. this is because pyfakefs cannot patch the underlying c libraries'\nfile access functions--the c libraries will always access the real file\nsystem. refer to the\n[documentation](https://pytest-pyfakefs.readthedocs.io/en/latest/intro.html#limitations)\nfor more information about the limitations of pyfakefs.\n\n## development\n\n### continuous integration\n\npyfakefs is currently automatically tested on linux, macos and windows, with\npython 3.7 to 3.12, and with pypy3 on linux, using\n[github actions](https://github.com/pytest-dev/pyfakefs/actions).\n\n### running pyfakefs unit tests\n\n#### on the command line\npyfakefs unit tests can be run using `pytest` (all tests) or `unittest`\n(all tests except `pytest`-specific ones):\n\n```bash\n$ cd pyfakefs/\n$ export pythonpath=$pwd\n\n$ python -m pytest pyfakefs\n$ python -m pyfakefs.tests.all_tests\n```\n\nsimilar scripts are called by `tox` and github actions. `tox` can be used to\nrun tests locally against supported python versions:\n\n```bash\n$ tox\n```\n\n#### in a docker container\n\nthe `dockerfile` at the repository root will run the tests on the latest\nubuntu version.  build the container:\n```bash\ncd pyfakefs/\ndocker build -t pyfakefs .\n```\nrun the unit tests in the container:\n```bash\ndocker run -t pyfakefs\n```\n\n### contributing to pyfakefs\n\nwe always welcome contributions to the library. check out the\n[contributing guide](https://github.com/pytest-dev/pyfakefs/blob/main/contributing.md)\nfor more information.\n\n## history\npyfakefs.py was initially developed at google by mike bland as a modest fake\nimplementation of core python modules.  it was introduced to all of google\nin september 2006. since then, it has been enhanced to extend its\nfunctionality and usefulness.  at last count, pyfakefs was used in over 2,000\npython tests at google.\n\ngoogle released pyfakefs to the public in 2011 as google code project\n[pyfakefs](http://code.google.com/p/pyfakefs/):\n* fork\n  [jmcgeheeiv-pyfakefs](http://code.google.com/p/jmcgeheeiv-pyfakefs/) added\n  [direct support for unittest and doctest](../../wiki/automatically-find-and-patch-file-functions-and-modules)\n* fork\n  [shiffdane-jmcgeheeiv-pyfakefs](http://code.google.com/p/shiffdane-jmcgeheeiv-pyfakefs/)\n  added further corrections\n\nafter the [shutdown of google code](http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html)\nwas announced, [john mcgehee](https://github.com/jmcgeheeiv) merged all three google code projects together\n[here on github](https://github.com/pytest-dev/pyfakefs) where an enthusiastic community actively supports, maintains\nand extends pyfakefs. in 2022, the repository has been transferred to\n[pytest-dev](https://github.com/pytest-dev) to ensure continuous maintenance.\n",
  "docs_url": null,
  "keywords": "testing,test,file,os,shutil,pathlib,mocking,unittest,pytest,fakes,filesystem",
  "license": "http://www.apache.org/licenses/license-2.0",
  "name": "pyfakefs",
  "package_url": "https://pypi.org/project/pyfakefs/",
  "project_url": "https://pypi.org/project/pyfakefs/",
  "project_urls": {
    "Homepage": "https://github.com/pytest-dev/pyfakefs"
  },
  "release_url": "https://pypi.org/project/pyfakefs/5.3.2/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "pyfakefs implements a fake file system that mocks the python file system modules.",
  "version": "5.3.2",
  "releases": [],
  "developers": [
    "google",
    "google-pyfakefs@google.com",
    "john_mcgehee",
    "pyfakefs@johnnado.com"
  ],
  "kwds": "pyfakefs pyversions pytest pathlib fake_filesystem_unittest",
  "license_kwds": "http://www.apache.org/licenses/license-2.0",
  "libtype": "pypi",
  "id": "pypi_pyfakefs",
  "homepage": "https://github.com/pytest-dev/pyfakefs",
  "release_count": 64,
  "dependency_ids": []
}
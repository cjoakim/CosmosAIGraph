{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# datadog-api-client-python\n\nthis repository contains a python api client for the [datadog api](https://docs.datadoghq.com/api/).\n\n## requirements\n\nbuilding and using the api client library requires [python 3.7+](https://www.python.org/downloads/).\n\n## installation\n\nto install the api client library, simply execute:\n\n```shell\npip install datadog-api-client\n```\n\n## getting started\n\nplease follow the [installation](#installation) instruction and execute the following python code:\n\n```python\nfrom datadog_api_client import apiclient, configuration\nfrom datadog_api_client.v1.api.monitors_api import monitorsapi\nfrom datadog_api_client.v1.model.monitor import monitor\nfrom datadog_api_client.v1.model.monitor_type import monitortype\n\nbody = monitor(\n    name=\"example\",\n    type=monitortype(\"log alert\"),\n    query='logs(\"service:foo and type:error\").index(\"main\").rollup(\"count\").by(\"source\").last(\"5m\") > 2',\n    message=\"some message notify: @hipchat-channel\",\n    tags=[\"test:example\", \"env:ci\"],\n    priority=3,\n)\n\nconfiguration = configuration()\nwith apiclient(configuration) as api_client:\n    api_instance = monitorsapi(api_client)\n    response = api_instance.create_monitor(body=body)\n    print(response)\n```\n\n### authentication\n\nby default the library will use the `dd_api_key` and `dd_app_key` environment variables to authenticate against the datadog api.\nto provide your own set of credentials, you need to set some keys on the configuration:\n\n```python\nconfiguration.api_key[\"apikeyauth\"] = \"<api key>\"\nconfiguration.api_key[\"appkeyauth\"] = \"<application key>\"\n```\n\n### unstable endpoints\n\nthis client includes access to datadog api endpoints while they are in an unstable state and may undergo breaking changes. an extra configuration step is required to enable these endpoints:\n\n```python\nconfiguration.unstable_operations[\"<operationname>\"] = true\n```\n\nwhere `<operationname>` is the name of the method used to interact with that endpoint. for example: `list_log_indexes`, or `get_logs_index`\n\n### changing server\n\nwhen talking to a different server, like the `eu` instance, change the `server_variables` on your configuration object:\n\n```python\nconfiguration.server_variables[\"site\"] = \"datadoghq.eu\"\n```\n\n### disable compressed payloads\n\nif you want to disable gzip compressed responses, set the `compress` flag\non your configuration object:\n\n```python\nconfiguration.compress = false\n```\n\n### enable requests logging\n\nif you want to enable requests logging, set the `debug` flag on your configuration object:\n\n```python\nconfiguration.debug = true\n```\n\n### enable retry\n\nif you want to enable retry when getting status code `429` rate-limited, set `enable_retry` to `true`\n\n```python\n    configuration.enable_retry = true\n```\n\nthe default max retry is `3`, you can change it with `max_retries`\n\n```python\n    configuration.max_retries = 5\n```\n\n### configure proxy\n\nyou can configure the client to use proxy by setting the `proxy` key on configuration object:\n\n```python\nconfiguration.proxy = \"http://127.0.0.1:80\"\n```\n\n### threads support\n\nyou can run api calls in a thread by using `threadedapiclient` in place of `apiclient`. api calls will then\nreturn a `asyncresult` instance on which you can call get to retrieve the result:\n\n```python\nfrom datadog_api_client import configuration, threadedapiclient\nfrom datadog_api_client.v1.api.dashboards_api import dashboardsapi\n\nconfiguration = configuration()\nwith threadedapiclient(configuration) as api_client:\n    api_instance = dashboardsapi(api_client)\n    result = api_instance.list_dashboards()\n    dashboards = result.get()\n    print(dashboards)\n```\n\n### asyncio support\n\nthe library supports asynchronous operations when using `asyncapiclient` for the transport. when that client is used,\nthe api methods will then return coroutines that you can wait for.\n\nto make async support available, you need to install the extra `async` qualifiers during installation: `pip install datadog-api-client[async]`.\n\n```python\nimport asyncio\n\nfrom datadog_api_client import configuration, asyncapiclient\nfrom datadog_api_client.v1.api.dashboards_api import dashboardsapi\n\nasync def main():\n    configuration = configuration()\n    async with asyncapiclient(configuration) as api_client:\n        api_instance = dashboardsapi(api_client)\n        dashboards = await api_instance.list_dashboards()\n        print(dashboards)\n\nasyncio.run(main())\n```\n\n### pagination\n\nseveral listing operations have a pagination method to help consume all the items available.\nfor example, to retrieve all your incidents:\n\n```python\nfrom datadog_api_client import apiclient, configuration\nfrom datadog_api_client.v2.api.incidents_api import incidentsapi\n\nconfiguration = configuration()\nconfiguration.unstable_operations[\"list_incidents\"] = true\nwith apiclient(configuration) as api_client:\n    api_instance = incidentsapi(api_client)\n    for incident in api_instance.list_incidents_with_pagination():\n        print(incident.id)\n```\n\n## documentation for api endpoints and models\n\ndocumentation for api endpoints and models are available on [readthedocs](https://datadog-api-client.readthedocs.io/).\n\n## documentation for authorization\n\nauthenticate with the api by providing your api and application keys in the configuration:\n\n```python\nconfiguration.api_key[\"apikeyauth\"] = \"your_api_key\"\nconfiguration.api_key[\"appkeyauth\"] = \"your_application_key\"\n```\n\n## author\n\nsupport@datadoghq.com\n",
  "docs_url": null,
  "keywords": "openapi,api,client,openapi-generator,datadog",
  "license": "bsd",
  "name": "datadog-api-client",
  "package_url": "https://pypi.org/project/datadog-api-client/",
  "project_url": "https://pypi.org/project/datadog-api-client/",
  "project_urls": {
    "Bug Tracker": "https://github.com/DataDog/datadog-api-client-python/issues",
    "Documentation": "https://docs.datadoghq.com/api/",
    "Homepage": "https://github.com/DataDog/datadog-api-client-python",
    "Source Code": "https://github.com/DataDog/datadog-api-client-python"
  },
  "release_url": "https://pypi.org/project/datadog-api-client/2.20.0/",
  "requires_dist": [
    "urllib3 >=1.15",
    "certifi",
    "python-dateutil",
    "typing-extensions >=4.0.0",
    "ddtrace >=1.15.0 ; extra == 'apm'",
    "aiosonic ==0.15.1 ; extra == 'async'",
    "aiosonic ==0.15.1 ; extra == 'tests'",
    "glom ; extra == 'tests'",
    "jinja2 ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-bdd ==6.0.1 ; extra == 'tests'",
    "pytest-asyncio ; extra == 'tests'",
    "pytest-randomly ; extra == 'tests'",
    "pytest-recording ; extra == 'tests'",
    "python-dateutil ; extra == 'tests'",
    "mypy ; extra == 'tests'",
    "types-python-dateutil ; extra == 'tests'",
    "zstandard ; extra == 'tests'",
    "zstandard ; extra == 'zstandard'"
  ],
  "requires_python": ">=3.7",
  "summary": "collection of all datadog public endpoints",
  "version": "2.20.0",
  "releases": [],
  "developers": [
    "datadog",
    "packages@datadoghq.com"
  ],
  "kwds": "datadog_api_client monitors_api datadog datadoghq api_client",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_datadog_api_client",
  "homepage": "https://github.com/datadog/datadog-api-client-python",
  "release_count": 45,
  "dependency_ids": [
    "pypi_aiosonic",
    "pypi_certifi",
    "pypi_ddtrace",
    "pypi_glom",
    "pypi_jinja2",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_bdd",
    "pypi_pytest_randomly",
    "pypi_pytest_recording",
    "pypi_python_dateutil",
    "pypi_types_python_dateutil",
    "pypi_typing_extensions",
    "pypi_urllib3",
    "pypi_zstandard"
  ]
}
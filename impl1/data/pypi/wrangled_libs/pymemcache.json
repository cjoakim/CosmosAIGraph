{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: database"
  ],
  "description": "pymemcache\n==========\n\n.. image:: https://img.shields.io/pypi/v/pymemcache.svg\n    :target: https://pypi.python.org/pypi/pymemcache\n\n.. image:: https://readthedocs.org/projects/pymemcache/badge/?version=master\n        :target: https://pymemcache.readthedocs.io/en/latest/\n        :alt: master documentation status\n\na comprehensive, fast, pure-python memcached client.\n\npymemcache supports the following features:\n\n* complete implementation of the memcached text protocol.\n* connections using unix sockets, or tcp over ipv4 or ipv6.\n* configurable timeouts for socket connect and send/recv calls.\n* access to the \"noreply\" flag, which can significantly increase the speed of writes.\n* flexible, modular and simple approach to serialization and deserialization.\n* the (optional) ability to treat network and memcached errors as cache misses.\n\ninstalling pymemcache\n=====================\n\ninstall from pip:\n\n.. code-block:: bash\n\n  pip install pymemcache\n\nfor development, clone from github and run the tests:\n\n.. code-block:: bash\n\n    git clone https://github.com/pinterest/pymemcache.git\n    cd pymemcache\n\nrun the tests (make sure you have a local memcached server running):\n\n.. code-block:: bash\n\n    tox\n\nusage\n=====\n\nsee the documentation here: https://pymemcache.readthedocs.io/en/latest/\n\ndjango\n------\n\nsince version 3.2, django has included a pymemcache-based cache backend.\nsee `its documentation \n<https://docs.djangoproject.com/en/stable/topics/cache/#memcached>`__.\n\non older django versions, you can use\n`django-pymemcache <https://github.com/django-pymemcache/django-pymemcache>`_.\n\ncomparison with other libraries\n===============================\n\npylibmc\n-------\n\nthe pylibmc library is a wrapper around libmemcached, implemented in c. it is\nfast, implements consistent hashing, the full memcached protocol and timeouts.\nit does not provide access to the \"noreply\" flag. it also isn't pure python,\nso using it with libraries like gevent is out of the question, and its\ndependency on libmemcached poses challenges (e.g., it must be built against\nthe same version of libmemcached that it will use at runtime).\n\npython-memcached\n----------------\n\nthe python-memcached library implements the entire memcached text protocol, has\na single timeout for all socket calls and has a flexible approach to\nserialization and deserialization. it is also written entirely in python, so\nit works well with libraries like gevent. however, it is tied to using thread\nlocals, doesn't implement \"noreply\", can't treat errors as cache misses and is\nslower than both pylibmc and pymemcache. it is also tied to a specific method\nfor handling clusters of memcached servers.\n\nmemcache_client\n---------------\n\nthe team at mixpanel put together a pure python memcached client as well. it\nhas more fine grained support for socket timeouts, only connects to a single\nhost. however, it doesn't support most of the memcached api (just get, set,\ndelete and stats), doesn't support \"noreply\", has no serialization or\ndeserialization support and can't treat errors as cache misses.\n\nexternal links\n==============\n\nthe memcached text protocol reference page:\n  https://github.com/memcached/memcached/blob/master/doc/protocol.txt\n\nthe python-memcached library (another pure-python library):\n  https://github.com/linsomniac/python-memcached\n\nmixpanel's blog post about their memcached client for python:\n  https://engineering.mixpanel.com/we-went-down-so-we-wrote-a-better-pure-python-memcache-client-b409a9fe07a9\n\nmixpanel's pure python memcached client:\n  https://github.com/mixpanel/memcache_client\n  \nbye-bye python-memcached, hello pymemcache (migration guide)\n  https://jugmac00.github.io/blog/bye-bye-python-memcached-hello-pymemcache/\n\ncredits\n=======\n\n* `charles gordon <http://github.com/cgordon>`_\n* `dave dash <http://github.com/davedash>`_\n* `dan crosta <http://github.com/dcrosta>`_\n* `julian berman <http://github.com/julian>`_\n* `mark shirley <http://github.com/maspwr>`_\n* `tim bart <http://github.com/pims>`_\n* `thomas orozco <http://github.com/krallin>`_\n* `marc abramowitz <http://github.com/msabramo>`_\n* `marc-andre courtois <http://github.com/mcourtois>`_\n* `julien danjou <http://github.com/jd>`_\n* `inada naoki <http://github.com/methane>`_\n* `james socol <http://github.com/jsocol>`_\n* `joshua harlow <http://github.com/harlowja>`_\n* `john anderson <http://github.com/sontek>`_\n* `adam chainz <http://github.com/adamchainz>`_\n* `ernest w. durbin iii <https://github.com/ewdurbin>`_\n* `remco van oosterhout <https://github.com/vhab>`_\n* `nicholas charriere <https://github.com/nichochar>`_\n* `joe gordon <https://github.com/jogo>`_\n* `jon parise <https://github.com/jparise>`_\n* `stephen rosen <https://github.com/sirosen>`_\n* `feras alazzeh <https://github.com/ferasalazzeh>`_\n* `mois\u00e9s guimar\u00e3es de medeiros <https://github.com/moisesguimaraes>`_\n* `nick pope <https://github.com/ngnpope>`_\n* `herv\u00e9 beraud <https://github.com/4383>`_\n* `martin j\u00f8rgensen <https://github.com/martinnj>`_\n\nwe're hiring!\n=============\nare you really excited about open-source? or great software engineering?\npinterest is `hiring <https://careers.pinterest.com/>`_!\n\nchangelog\n=========\nnew in version 4.0.0\n--------------------\n* dropped python 2 and 3.6 support\n  `#321 <https://github.com/pinterest/pymemcache/pull/321>`_\n  `#363 <https://github.com/pinterest/pymemcache/pull/363>`_\n* begin adding typing\n* add pluggable compression serde\n  `#407 <https://github.com/pinterest/pymemcache/pull/407>`_\n\n\nnew in version 3.5.2\n--------------------\n* handle blank ``stat`` values.\n\nnew in version 3.5.1\n--------------------\n* ``client.get`` returns the default when using ``ignore_exc`` and if memcached\n  is unavailable\n* added ``noreply`` support to ``hashclient.flush_all``.\n\nnew in version 3.5.0\n--------------------\n* sockets are now closed on ``memcacheunexpectedcloseerror``.\n* added support for tcp keepalive for client sockets on linux platforms.\n* added retrying mechanisms by wrapping clients.\n\nnew in version 3.4.4\n--------------------\n* idle connections will be removed from the pool after ``pool_idle_timeout``.\n\nnew in version 3.4.3\n--------------------\n* fix ``hashclient.{get,set}_many()`` with unix sockets.\n\nnew in version 3.4.2\n--------------------\n* remove trailing space for commands that don't take arguments, such as\n  ``stats``. this was a violation of the memcached protocol.\n\nnew in version 3.4.1\n--------------------\n* cas operations will now raise ``memcacheillegalinputerror`` when ``none`` is\n  given as the ``cas`` value.\n\nnew in version 3.4.0\n--------------------\n* added ipv6 support for tcp socket connections. note that ipv6 may be used in\n  preference to ipv4 when passing a domain name as the host if an ipv6 address\n  can be resolved for that domain.\n* ``hashclient`` now supports unix sockets.\n\nnew in version 3.3.0\n--------------------\n* ``hashclient`` can now be imported from the top-level ``pymemcache`` package\n  (e.g. ``pymemcache.hashclient``).\n* ``hashclient.get_many()`` now longer stores ``false`` for missing keys from\n  unavailable clients. instead, the result won't contain the key at all.\n* added missing ``hashclient.close()`` and ``hashclient.quit()``.\n\nnew in version 3.2.0\n--------------------\n* ``pooledclient`` and ``hashclient`` now support custom ``client`` classes\n\nnew in version 3.1.1\n--------------------\n* improve ``mockmemcacheclient`` to behave even more like ``client``\n\nnew in version 3.1.0\n--------------------\n* add tls support for tcp sockets.\n* fix corner case when dead hashed server comes back alive.\n\nnew in version 3.0.1\n--------------------\n* make mockmemcacheclient more consistent with the real client.\n* pass ``encoding`` from hashclient to its pooled clients when ``use_pooling``\n  is enabled.\n\nnew in version 3.0.0\n--------------------\n* the serialization api has been reworked. instead of consuming a serializer\n  and deserializer as separate arguments, client objects now expect an argument\n  ``serde`` to be an object which implements ``serialize`` and ``deserialize``\n  as methods. (``serialize`` and ``deserialize`` are still supported but\n  considered deprecated.)\n* validate integer inputs for ``expire``, ``delay``, ``incr``, ``decr``, and\n  ``memlimit`` -- non-integer values now raise ``memcacheillegalinputerror``\n* validate inputs for ``cas`` -- values which are not integers or strings of\n  0-9 now raise ``memcacheillegalinputerror``\n* add ``prepend`` and ``append`` support to ``mockmemcacheclient``.\n* add the ``touch`` method to ``hashclient``.\n* added official support for python 3.8.\n\nnew in version 2.2.2\n--------------------\n* fix ``long_description`` string in python packaging.\n\nnew in version 2.2.1\n--------------------\n* fix ``flags`` when setting multiple differently-typed values at once.\n\nnew in version 2.2.0\n--------------------\n* drop official support for python 3.4.\n* use ``setup.cfg`` metadata instead ``setup.py`` config to generate package.\n* add ``default_noreply`` parameter to ``hashclient``.\n* add ``encoding`` parameter to ``client`` constructors (defaults to ``ascii``).\n* add ``flags`` parameter to write operation methods.\n* handle unicode key values in ``mockmemcacheclient`` correctly.\n* improve ascii encoding failure exception.\n\nnew in version 2.1.1\n--------------------\n* fix ``setup.py`` dependency on six already being installed.\n\nnew in version 2.1.0\n--------------------\n* public classes and exceptions can now be imported from the top-level\n  ``pymemcache`` package (e.g. ``pymemcache.client``).\n  `#197 <https://github.com/pinterest/pymemcache/pull/197>`_\n* add unix domain socket support and document server connection options.\n  `#206 <https://github.com/pinterest/pymemcache/pull/206>`_\n* add support for the ``cache_memlimit`` command.\n  `#211 <https://github.com/pinterest/pymemcache/pull/211>`_\n* commands key are now always sent in their original order.\n  `#209 <https://github.com/pinterest/pymemcache/pull/209>`_\n  \nnew in version 2.0.0\n--------------------\n* change set_many and set_multi api return value. `#179 <https://github.com/pinterest/pymemcache/pull/179>`_\n* fix support for newbytes from python-future. `#187 <https://github.com/pinterest/pymemcache/pull/187>`_\n* add support for python 3.7, and drop support for python 3.3\n* properly batch client.set_many() call. `#182 <https://github.com/pinterest/pymemcache/pull/182>`_\n* improve _check_key() and _store_cmd() performance. `#183 <https://github.com/pinterest/pymemcache/pull/183>`_\n* properly batch client.delete_many() call. `#184 <https://github.com/pinterest/pymemcache/pull/184>`_\n* add option to explicitly set pickle version used by serde. `#190 <https://github.com/pinterest/pymemcache/pull/190>`_\n\nnew in version 1.4.4\n--------------------\n* pypy3 to travis test matrix\n* full benchmarks in test\n* fix flake8 issues\n* have mockmemcacheclient support non-ascii strings\n* switch from using pickle format 0 to the highest available version. see `#156 <https://github.com/pinterest/pymemcache/pull/156>`_\n\n  *warning*: different versions of python have different highest pickle versions: https://docs.python.org/3/library/pickle.html\n\n\nnew in version 1.4.3\n--------------------\n* documentation improvements\n* fixed cachedump stats command, see `#103 <https://github.com/pinterest/pymemcache/issues/103>`_\n* honor default_value in hashclient\n\nnew in version 1.4.2\n--------------------\n* drop support for python 2.6, see `#109 <https://github.com/pinterest/pymemcache/issues/139>`_\n\nnew in version 1.4.1\n--------------------\n* python 3 serializations fixes `#131 <https://github.com/pinterest/pymemcache/pull/131>`_\n* drop support for pypy3\n* comment cleanup\n* add gets_many to hash_client\n* better checking for illegal chars in key\n\nnew in version 1.4.0\n--------------------\n* unicode keys support. it is now possible to pass the flag ``allow_unicode_keys`` when creating the clients, thanks @jogo!\n* fixed a bug where pooledclient wasn't following ``default_noreply`` arg set on init, thanks @kols!\n* improved documentation\n\nnew in version 1.3.8\n--------------------\n* use cpickle instead of pickle when possible (python2)\n\nnew in version 1.3.7\n--------------------\n* default parameter on get(key, default=0)\n* fixed docs to autogenerate themselves with sphinx\n* fix linter to work with python3\n* improve error message on illegal input for the key\n* refactor stat parsing\n* fix mockmemcacheclient\n* fix unicode char in middle of key bug\n\nnew in version 1.3.6\n--------------------\n* fix flake8 and cleanup tox building\n* fix security vulnerability by sanitizing key input\n\nnew in version 1.3.5\n--------------------\n* bug fix for hashclient when retries is set to zero.\n* adding the version command to the clients.\n\nnew in version 1.3.4\n--------------------\n* bug fix for the hashclient that corrects behavior when there are no working servers.\n\nnew in version 1.3.3\n--------------------\n* adding caching to the travis build.\n* a bug fix for pluggable hashing in hashclient.\n* adding a default_noreply argument to the client ctor.\n\nnew in version 1.3.2\n--------------------\n* making the location of memcache exceptions backwards compatible.\n\nnew in version 1.3.0\n--------------------\n* python 3 support\n* introduced hashclient that uses consistent hasing for allocating keys across many memcached nodes. it also can detect servers going down and rebalance keys across the available nodes.\n* retry sock.recv() when it raises eintr\n\nnew in version 1.2.9\n--------------------\n* introduced pooledclient a thread-safe pool of clients\n",
  "docs_url": null,
  "keywords": "memcache,client,database",
  "license": "apache license 2.0",
  "name": "pymemcache",
  "package_url": "https://pypi.org/project/pymemcache/",
  "project_url": "https://pypi.org/project/pymemcache/",
  "project_urls": {
    "Homepage": "https://github.com/pinterest/pymemcache"
  },
  "release_url": "https://pypi.org/project/pymemcache/4.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a comprehensive, fast, pure python memcached client",
  "version": "4.0.0",
  "releases": [],
  "developers": [
    "jon@pinterest.com",
    "jon_parise"
  ],
  "kwds": "pymemcache memcache_client memcache memcached memcacheillegalinputerror",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pymemcache",
  "homepage": "https://github.com/pinterest/pymemcache",
  "release_count": 55,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: other audience",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.1",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: jython",
    "programming language :: python :: implementation :: pypy",
    "topic :: education",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "overview\n========\n\n``uncertainties`` allows **calculations** such as (2 +/- 0.1)*2 = 4 +/-\n0.2 to be **performed transparently**.  much more complex mathematical\nexpressions involving numbers with uncertainties can also be evaluated\ndirectly.\n\nthe ``uncertainties`` package **takes the pain and complexity out**\nof uncertainty calculations.\n\n**detailed information** about this package can be found on its `main\nwebsite`_.\n\nbasic examples\n==============\n\n.. code-block:: python\n\n    >>> from uncertainties import ufloat\n\n    >>> x = ufloat(2, 0.25)\n    >>> x\n    2.0+/-0.25\n\n    >>> square = x**2  # transparent calculations\n    >>> square\n    4.0+/-1.0\n    >>> square.nominal_value\n    4.0\n    >>> square.std_dev  # standard deviation\n    1.0\n\n    >>> square - x*x\n    0.0  # exactly 0: correlations taken into account\n\n    >>> from uncertainties.umath import *  # sin(), etc.\n    >>> sin(1+x**2)\n    -0.95892427466313845+/-0.2836621854632263\n\n    >>> print (2*x+1000).derivatives[x]  # automatic calculation of derivatives\n    2.0\n\n    >>> from uncertainties import unumpy  # array manipulation\n    >>> random_vars = unumpy.uarray([1, 2], [0.1, 0.2])\n    >>> print random_vars\n    [1.0+/-0.1 2.0+/-0.2]\n    >>> print random_vars.mean()\n    1.50+/-0.11\n    >>> print unumpy.cos(random_vars)\n    [0.540302305868+/-0.0841470984808 -0.416146836547+/-0.181859485365]\n\nmain features\n=============\n\n- **transparent calculations with uncertainties**: **no or little\n  modification of existing code** is needed.  similarly, the python_ (or\n  ipython_) shell can be used as **a powerful calculator** that\n  handles quantities with uncertainties (``print`` statements are\n  optional, which is convenient).\n\n- **correlations** between expressions are correctly taken into\n  account.  thus, ``x-x`` is exactly zero, for instance (most\n  implementations found on the web yield a non-zero uncertainty for\n  ``x-x``, which is incorrect).\n\n- **almost all mathematical operations** are supported, including most\n  functions from the standard math_ module (sin,...).  comparison\n  operators (``>``, ``==``, etc.) are supported too.\n\n- many **fast operations on arrays and matrices** of numbers with\n  uncertainties are supported.\n\n- **extensive support for printing** numbers with uncertainties\n  (including latex support and pretty-printing).\n\n- most uncertainty calculations are performed **analytically**.\n\n- this module also gives access to the **derivatives** of any\n  mathematical expression (they are used by error\n  propagation theory, and are thus automatically calculated by this\n  module).\n\n\ninstallation or upgrade\n=======================\n\ninstallation instructions are available on the `main web site\n<http://uncertainties-python-package.readthedocs.io/en/latest/index.html#installation-and-download>`_\nfor this package.\n\ncontact\n=======\n\nplease send **feature requests, bug reports, or feedback** to\n`eric o. lebigot (eol)`_.\n\nversion history\n===============\n\nmain changes:\n\n- 3.1.6: the pretty-print and latex format can now be customized.\n- 3.1.5: added a \"p\" formatting option, that makes sure that there are always\n  parentheses around the \u2026 \u00b1 \u2026 part of printed numbers.\n- 3.1.4: python 2.7+ is now required.\n- 3.1.2: fix for numpy 1.17 and ``unumpy.ulinalg.pinv()``.\n- 3.1: variables built through a correlation or covariance matrix, and that\n  have uncertainties that span many orders of magnitude are now\n  calculated more accurately (improved ``correlated_values()`` and\n  ``correlated_values_norm()`` functions).\n- 3.0: massive speedup for some operations involving large numbers of numbers with uncertainty, like ``sum(ufloat(1, 1) for _ in xrange(100000))`` (this is about 5,000 times faster than before).\n- 2.4.8: friendlier completions in python shells, etc.: internal functions should not appear anymore (for the user modules: ``uncertainties``, ``uncertainties.umath`` and  ``uncertainties.unumpy``). parsing the shorthand notation (e.g. ``3.1(2)``) now works with infinite values (e.g. ``-inf(inf)``); this mirrors the ability to print such numbers with uncertainty. the particle data group rounding rule is applied in more cases (e.g. printing 724.2\u00b126.2 now gives ``724\u00b126``). the shorthand+latex formatting of numbers with an infinite nominal value is fixed. ``uncertainties.unumpy.matrix`` now uses ``.std_devs`` instead of ``.std_devs()``, for consistency with floats with uncertainty (automatic conversion of code added to ``uncertainties.1to2``).\n- 2.4.7: string formatting now works for ``(-)inf+/-...`` numbers.\n- 2.4.5: string formatting now works for ``nan+/-...`` numbers.\n- 2.4.4: the documentation license now allows its commercial use.\n- 2.4.2: `numpy 1.8 compatibility <https://github.com/numpy/numpy/issues/4063>`_.\n- 2.4.1: in ``uncertainties.umath``, functions ``ceil()``, ``floor()``,\n  ``isinf()``, ``isnan()`` and ``trunc()`` now return values of\n  the same type as the corresponding ``math`` module function\n  (instead of generally returning a value with a zero uncertainty\n  ``...+/-0``).\n- 2.4: extensive support for the formatting_ of numbers with uncertainties.\n  a zero uncertainty is now explicitly displayed as the integer 0.\n  the new formats are generally understood by ``ufloat_fromstr()``.\n  abbreviations for the nominal value (``n``) and the standard\n  deviation (``s``) are now available.\n- 2.3.6:  full support for limit cases of the power operator\n  ``umath.pow()``.\n- 2.3.5: uncertainties and derivatives can now be nan (not-a-number).\n  full support for numbers with a zero uncertainty\n  (``sqrt(ufloat(0, 0))`` now works).\n  full support for limit cases of the power operator (``x**y``).\n- 2.3: functions wrapped\n  so that they accept numbers with uncertainties instead of floats\n  now have full keyword arguments support\n  (improved ``wrap()`` function). incompatible change:\n  ``wrap(..., none)`` should be replaced by ``wrap(...)`` or\n  ``wrap(..., [])``.\n- 2.2: creating arrays and matrices of numbers with uncertainties\n  with ``uarray()`` and ``umatrix()`` now requires two simple arguments\n  (nominal values and standard deviations) instead of a tuple argument.\n  this is consistent with the new, simpler ``ufloat()`` interface.\n  the previous\n  usage will be supported for some time. users are encouraged to update\n  their code, for instance through the newly provided `code updater`_,\n  which in addition now automatically converts ``.set_std_dev(v)`` to\n  ``.std_dev = v``.\n- 2.1: numbers with uncertainties are now created more directly like\n  ``ufloat(3, 0.1)``, ``ufloat(3, 0.1, \"pi\")``,\n  ``ufloat_fromstr(\"3.0(1)\")``, or ``ufloat_fromstr(\"3.0(1)\", \"pi\")``.\n  the previous ``ufloat((3, 0.1))`` and ``ufloat(\"3.0(1)\")`` forms\n  will be supported for some time. users are encouraged to update\n  their code, for instance through the newly provided `code updater`_.\n- 2.0: the standard deviation is now obtained more directly without an\n  explicit\n  call (``x.std_dev`` instead of ``x.std_dev()``). ``x.std_dev()``\n  will be supported for some time. users are encouraged to update\n  their code. the standard deviation of a variable can now be\n  directly updated with ``x.std_dev = 0.1``. as a consequence,\n  ``x.set_std_dev()`` is deprecated.\n- 1.9.1: support added for pickling subclasses of ``ufloat`` (= ``variable``).\n- 1.9: added functions for handling correlation matrices:\n  ``correlation_matrix()`` and\n  ``correlated_values_norm()``. (these new functions mirror the\n  covariance-matrix based ``covariance_matrix()`` and\n  ``correlated_values()``.) ``ufloat.position_in_sigmas()`` is\n  now named ``ufloat.std_score()``, so as to follow the common\n  naming convention (`standard score\n  <http://en.wikipedia.org/wiki/standard_score>`_).  obsolete\n  functions were removed (from the main module:\n  ``numberwithuncert``, ``num_with_uncert``, ``array_u``,\n  ``nominal_values``, ``std_devs``).\n- 1.8: compatibility with python 3.2 added.\n- 1.7.2: compatibility with python 2.3, python 2.4, jython 2.5.1 and\n  jython 2.5.2 added.\n- 1.7.1: new semantics: ``ufloat(\"12.3(78)\")`` now represents 12.3+/-7.8\n  instead of 12.3+/-78.\n- 1.7: ``ufloat()`` now raises valueerror instead of a generic exception,\n  when given an incorrect\n  string representation, like ``float()`` does.\n- 1.6: testing whether an object is a number with uncertainty should now\n  be done with ``isinstance(..., ufloat)``.\n  ``affinescalarfunc`` is not imported by ``from uncertainties import *``\n  anymore, but its new alias ``ufloat`` is.\n- 1.5.5: the first possible license is now the revised bsd license\n  instead of gplv2, which\n  makes it easier to include this package in other projects.\n- 1.5.4.2: added ``umath.modf()`` and ``umath.frexp()``.\n- 1.5.4: ``ufloat`` does not accept a single number (nominal value) anymore.\n  this removes some potential confusion about\n  ``ufloat(1.1)`` (zero uncertainty) being different from\n  ``ufloat(\"1.1\")`` (uncertainty of 1 on the last digit).\n- 1.5.2: ``float_u``, ``array_u`` and ``matrix_u`` renamed ``ufloat``,\n  ``uarray`` and ``umatrix``, for ease of typing.\n- 1.5:  added functions ``nominal_value`` and ``std_dev``, and\n  modules ``unumpy`` (additional support for numpy_ arrays and\n  matrices) and ``unumpy.ulinalg`` (generalization of some\n  functions from ``numpy.linalg``).\n  memory footprint of arrays of numbers with uncertainties\n  divided by 3.\n  function ``array_u`` is 5 times faster.\n  main function ``num_with_uncert`` renamed\n  ``float_u``, for consistency with ``unumpy.array_u`` and\n  ``unumpy.matrix_u``, with the added benefit of a shorter name.\n- 1.4.5: added support for the standard ``pickle`` module.\n- 1.4.2: added support for the standard ``copy`` module.\n- 1.4: added utilities for manipulating numpy_ arrays of numbers with\n  uncertainties (``array_u``, ``nominal_values`` and ``std_devs``).\n- 1.3: numbers with uncertainties are now constructed with\n  ``num_with_uncert()``, which replaces ``numberwithuncert()``.  this\n  simplifies the class hierarchy by removing the ``numberwithuncert`` class.\n- 1.2.5: numbers with uncertainties can now be entered as\n  ``numberwithuncert(\"1.23+/-0.45\")`` too.\n- 1.2.3: ``log(x, base)`` is now supported by ``umath.log()``, in addition\n  to ``log(x)``.\n- 1.2.2: values with uncertainties are now output like 3+/-1, in order\n  to avoid confusing 3+-1 with 3+(-1).\n- 1.2: a new function, ``wrap()``, is exposed, which allows non-python\n  functions (e.g. fortran or c used through a module such as scipy) to\n  handle numbers with uncertainties.\n- 1.1: mathematical functions (such as cosine, etc.) are in a new\n  uncertainties.umath module;\n  they do not override functions from the ``math`` module anymore.\n- 1.0.12: main class (``number_with_uncert``) renamed ``numberwithuncert``\n  so as to follow `pep 8`_.\n- 1.0.11: ``origin_value`` renamed more appropriately as\n  ``nominal_value``.\n- 1.0.9: ``correlations()`` renamed more appropriately as\n  ``covariance_matrix()``.\n\n.. _python: http://docs.python.org/tutorial/interpreter.html\n.. _ipython: http://ipython.readthedocs.io/en/stable/\n.. _numpy: http://numpy.scipy.org/\n.. _math: http://docs.python.org/library/math.html\n.. _pep 8: http://www.python.org/dev/peps/pep-0008/\n.. _error propagation theory: http://en.wikipedia.org/wiki/propagation_of_uncertainty\n.. _eric o. lebigot (eol): mailto:eric.lebigot@normalesup.org\n.. _paypal: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4tk7kndtedt4s\n.. _main website: http://uncertainties-python-package.readthedocs.io/\n.. _code updater: http://uncertainties-python-package.readthedocs.io/en/latest/index.html#migration-from-version-1-to-version-2\n.. _formatting: http://uncertainties-python-package.readthedocs.io/en/latest/user_guide.html#printing\n",
  "docs_url": "https://pythonhosted.org/uncertainties/",
  "keywords": "error propagation,uncertainties,uncertainty calculations,standard deviation,derivatives,partial derivatives,differentiation",
  "license": "revised bsd license",
  "name": "uncertainties",
  "package_url": "https://pypi.org/project/uncertainties/",
  "project_url": "https://pypi.org/project/uncertainties/",
  "project_urls": {
    "Documentation": "https://uncertainties-python-package.readthedocs.io/",
    "Homepage": "http://uncertainties-python-package.readthedocs.io/",
    "Source": "https://github.com/lebigot/uncertainties"
  },
  "release_url": "https://pypi.org/project/uncertainties/3.1.7/",
  "requires_dist": [
    "future",
    "sphinx ; extra == 'all'",
    "nose ; extra == 'all'",
    "numpy ; extra == 'all'",
    "sphinx ; extra == 'docs'",
    "numpy ; extra == 'optional'",
    "nose ; extra == 'tests'",
    "numpy ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "transparent calculations with uncertainties on the quantities involved (aka error propagation); fast calculation of derivatives",
  "version": "3.1.7",
  "releases": [],
  "developers": [
    "eric.lebigot@normalesup.org",
    "eric_o"
  ],
  "kwds": "propagation_of_uncertainty uncertainty uncertainties deviations python",
  "license_kwds": "revised bsd license",
  "libtype": "pypi",
  "id": "pypi_uncertainties",
  "homepage": "http://uncertainties-python-package.readthedocs.io/",
  "release_count": 78,
  "dependency_ids": [
    "pypi_future",
    "pypi_nose",
    "pypi_numpy",
    "pypi_sphinx"
  ]
}
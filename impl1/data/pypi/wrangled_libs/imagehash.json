{
  "classifiers": [],
  "description": "===========\nimagehash\n===========\n\nan image hashing library written in python. imagehash supports:\n\n* average hashing\n* perceptual hashing\n* difference hashing\n* wavelet hashing\n* hsv color hashing (colorhash)\n* crop-resistant hashing\n\n|ci|_ |coveralls|_ \n\nrationale\n=========\n\nimage hashes tell whether two images look nearly identical.\nthis is different from cryptographic hashing algorithms (like md5, sha-1)\nwhere tiny changes in the image give completely different hashes. \nin image fingerprinting, we actually want our similar inputs to have\nsimilar output hashes as well.\n\nthe image hash algorithms (average, perceptual, difference, wavelet)\nanalyse the image structure on luminance (without color information).\nthe color hash algorithm analyses the color distribution and \nblack & gray fractions (without position information).\n\ninstallation\n============\n\nbased on pil/pillow image, numpy and scipy.fftpack (for phash)\neasy installation through `pypi`_::\n\n\tpip install imagehash\n\nbasic usage\n===========\n::\n\n\t>>> from pil import image\n\t>>> import imagehash\n\t>>> hash = imagehash.average_hash(image.open('tests/data/imagehash.png'))\n\t>>> print(hash)\n\tffd7918181c9ffff\n\t>>> otherhash = imagehash.average_hash(image.open('tests/data/peppers.png'))\n\t>>> print(otherhash)\n\t9f172786e71f1e00\n\t>>> print(hash == otherhash)\n\tfalse\n\t>>> print(hash - otherhash)  # hamming distance\n\t33\n\neach algorithm can also have its hash size adjusted (or in the case of\ncolorhash, its :code:`binbits`). increasing the hash size allows an\nalgorithm to store more detail in its hash, increasing its sensitivity\nto changes in detail.\n\nthe demo script **find_similar_images** illustrates how to find similar\nimages in a directory.\n\nsource hosted at github: https://github.com/johannesbuchner/imagehash\n\nreferences\n-----------\n\n* average hashing (`ahashref`_)\n* perceptual hashing (`phashref`_)\n* difference hashing (`dhashref`_)\n* wavelet hashing (`whashref`_)\n* crop-resistant hashing (`crop_resistant_hashref`_)\n\n.. _ahashref: http://www.hackerfactor.com/blog/index.php?/archives/432-looks-like-it.html\n.. _phashref: http://www.hackerfactor.com/blog/index.php?/archives/432-looks-like-it.html\n.. _dhashref: http://www.hackerfactor.com/blog/index.php?/archives/529-kind-of-like-that.html\n.. _whashref: https://fullstackml.com/2016/07/02/wavelet-image-hash-in-python/\n.. _pypi: https://pypi.python.org/pypi/imagehash\n.. _crop_resistant_hashref: https://ieeexplore.ieee.org/document/6980335\n\nexamples\n=========\n\nto help evaluate how different hashing algorithms behave, below are a few hashes applied\nto two datasets. this will let you know what images an algorithm thinks are basically identical.\n\nexample 1: icon dataset\n-----------------------\n\nsource: 7441 free icons on github (see examples/github-urls.txt).\n\nthe following pages show groups of images with the same hash (the hashing method sees them as the same).\n\n* `phash <https://johannesbuchner.github.io/imagehash/index3.html>`__ (or `with z-transform <https://johannesbuchner.github.io/imagehash/index9.html>`__)\n* `dhash <https://johannesbuchner.github.io/imagehash/index4.html>`__ (or `with z-transform <https://johannesbuchner.github.io/imagehash/index10.html>`__)\n* `colorhash <https://johannesbuchner.github.io/imagehash/index7.html>`__\n* `average_hash <https://johannesbuchner.github.io/imagehash/index2.html>`__ (`with z-transform <https://johannesbuchner.github.io/imagehash/index8.html>`__)\n\nthe hashes use hashsize=8; colorhash uses binbits=3.\nyou may want to adjust the hashsize or require some manhattan distance (hash1 - hash2 < threshold).\n\nexample 2: art dataset\n----------------------\n\nsource: 109259 art pieces from http://parismuseescollections.paris.fr/en/recherche/image-libre/.\n\nthe following pages show groups of images with the same hash (the hashing method sees them as the same).\n\n* `phash <https://johannesbuchner.github.io/imagehash/art3.html>`__ (or `with z-transform <https://johannesbuchner.github.io/imagehash/art9.html>`__)\n* `dhash <https://johannesbuchner.github.io/imagehash/art4.html>`__ (or `with z-transform <https://johannesbuchner.github.io/imagehash/art10.html>`__)\n* `colorhash <https://johannesbuchner.github.io/imagehash/art7.html>`__\n* `average_hash <https://johannesbuchner.github.io/imagehash/art2.html>`__ (`with z-transform <https://johannesbuchner.github.io/imagehash/art8.html>`__)\n\nfor understanding hash distances, check out these excellent blog posts:\n* https://tech.okcupid.com/evaluating-perceptual-image-hashes-at-okcupid-e98a3e74aa3a\n* https://content-blockchain.org/research/testing-different-image-hash-functions/\n\nstoring hashes\n==============\n\nas illustrated above, hashes can be turned into strings.\nthe strings can be turned back into a imagehash object as follows.\n\nfor single perceptual hashes::\n\n\t>>> original_hash = imagehash.phash(image.open('tests/data/imagehash.png'))\n\t>>> hash_as_str = str(original_hash)\n\t>>> print(hash_as_str)\n\tffd7918181c9ffff\n\t>>> restored_hash = imagehash.hex_to_hash(hash_as_str)\n\t>>> print(restored_hash)\n\tffd7918181c9ffff\n\t>>> assert restored_hash == original_hash\n\t>>> assert str(restored_hash) == hash_as_str\n\nfor crop_resistant_hash::\n\n\t>>> original_hash = imagehash.crop_resistant_hash(image.open('tests/data/imagehash.png'), min_segment_size=500, segmentation_image_size=1000)\n\t>>> hash_as_str = str(original_hash)\n\t>>> restored_hash = imagehash.hex_to_multihash(hash_as_str)\n\t>>> assert restored_hash == original_hash\n\t>>> assert str(restored_hash) == hash_as_str\n\nfor colorhash::\n\n\t>>> original_hash = imagehash.colorhash(image.open('tests/data/imagehash.png'), binbits=3)\n\t>>> hash_as_str = str(original_hash)\n\t>>> restored_hash = imagehash.hex_to_flathash(hash_as_str, hashsize=3)\n\nfor storing the hashes in a database and using fast hamming distance\nsearches, see pointers at https://github.com/johannesbuchner/imagehash/issues/127\n(a blog post on how to do this would be a great contribution!)\n\n\n\nchangelog\n----------\n\n* 4.3: typing annotations by @avasam @spanglelabs and @nh2\n\n* 4.2: cropping-resistant image hashing added by @joshcoales\n\n* 4.1: add examples and colorhash\n\n* 4.0: changed binary to hex implementation, because the previous one was broken for various hash sizes. this change breaks compatibility to previously stored hashes; to convert them from the old encoding, use the \"old_hex_to_hash\" function.\n\n* 3.5: image data handling speed-up\n\n* 3.2: whash now also handles smaller-than-hash images\n\n* 3.0: dhash had a bug: it computed pixel differences vertically, not horizontally.\n       i modified it to follow `dhashref`_. the old function is available as dhash_vertical.\n\n* 2.0: added whash\n\n* 1.0: initial ahash, dhash, phash implementations.\n\ncontributing\n=============\n\npull requests and new features are warmly welcome.\n\nif you encounter a bug or have a question, please open a github issue. you can also try stack overflow.\n\nother projects\n==============\n\n* http://blockhash.io/\n* https://github.com/acoomans/instagram-filters\n* https://pippy360.github.io/transformationinvariantimagesearch/\n* https://www.phash.org/\n* https://pypi.org/project/dhash/\n* https://github.com/thorn-oss/perception (based on imagehash code, depends on opencv)\n* https://docs.opencv.org/3.4/d4/d93/group__img__hash.html\n\n.. |ci| image:: https://github.com/johannesbuchner/imagehash/actions/workflows/testing.yml/badge.svg\n.. _ci: https://github.com/johannesbuchner/imagehash/actions/workflows/testing.yml\n\n.. |coveralls| image:: https://coveralls.io/repos/github/johannesbuchner/imagehash/badge.svg\n.. _coveralls: https://coveralls.io/github/johannesbuchner/imagehash\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "2-clause bsd license",
  "name": "imagehash",
  "package_url": "https://pypi.org/project/ImageHash/",
  "project_url": "https://pypi.org/project/ImageHash/",
  "project_urls": {
    "Homepage": "https://github.com/JohannesBuchner/imagehash"
  },
  "release_url": "https://pypi.org/project/ImageHash/4.3.1/",
  "requires_dist": [
    "PyWavelets",
    "numpy",
    "pillow",
    "scipy"
  ],
  "requires_python": "",
  "summary": "image hashing library",
  "version": "4.3.1",
  "releases": [],
  "developers": [
    "buchner.johannes@gmx.at",
    "johannes_buchner"
  ],
  "kwds": "imagehash colorhash crop_resistant_hash crop_resistant_hashref _crop_resistant_hashref",
  "license_kwds": "2-clause bsd license",
  "libtype": "pypi",
  "id": "pypi_imagehash",
  "homepage": "https://github.com/johannesbuchner/imagehash",
  "release_count": 20,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_pillow",
    "pypi_pywavelets",
    "pypi_scipy"
  ]
}
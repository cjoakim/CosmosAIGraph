{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: testing"
  ],
  "description": "[![circleci](https://circleci.com/gh/adamgleave/pytest-shard.svg?style=svg)](https://circleci.com/gh/adamgleave/pytest-shard)\n[![pypi version](https://badge.fury.io/py/pytest-shard.svg)](https://badge.fury.io/py/pytest-shard)\n\n# pytest-shard\n\nshards tests based on a hash of their test name enabling easy parallelism across machines, suitable for a wide variety of continuous integration services. tests are split at the finest level of granularity, individual test cases, enabling parallelism even if all of your tests are in a single file (or even single parameterized test method).\n\n## features\n\n`pytest-shard` aims for simplicity. when installed, simply run:\n\n```\n$ pytest --shard-id=i --num-shards=n\n```\n\nwhere `i` is the index of this shard and `n` the total number of shards. for example, to split tests across two machines:\n\n```\n# on machine 1:\n$ pytest --shard-id=0 --num-shards=2\n# on machine 2:\n$ pytest --shard-id=1 --num-shards=2\n```\n\nthe intended use case is for continuous integration services that allow you to run jobs in parallel. for circleci, enable [parallelism](https://circleci.com/docs/2.0/parallelism-faster-jobs/) and then use:\n```\npytest --shard-id=${circle_node_index} --num-shards=${circle_node_total}\n```\n\non travis, you must define the environment variables explicitly, but can use a [similar approach](https://docs.travis-ci.com/user/speeding-up-the-build/).\n\n## alternatives\n\n[pytest-xdist](https://github.com/pytest-dev/pytest-xdist) allows you to parallelize tests across cores on a single machine, and can also schedule tests on a remote machine. i use `pytest-shard` to split tests across ci workers, and `pytest-xdist` to parallelize across cpu cores within each worker.\n\n`pytest-shard` does not take into account the run time of tests, which can lead to suboptimal allocations. [pytest-circleci-parallelized](https://github.com/ryanwilsonperkin/pytest-circleci-parallelized) uses test run time, but can only split at the granularity of classes, and is specific to circleci.\n\nplease open a pr if there are other promising alternatives that i have overlooked.\n\n## installation\n\nyou can install `pytest-shard` via `pip`:\n\n```\n$ pip install pytest-shard\n```\n\n## contributions\n\ncontributions are welcome. test may be run using `tox`.\n\n## license\n\nthis software is mit licensed.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-shard",
  "package_url": "https://pypi.org/project/pytest-shard/",
  "project_url": "https://pypi.org/project/pytest-shard/",
  "project_urls": {
    "Homepage": "https://github.com/AdamGleave/pytest-shard"
  },
  "release_url": "https://pypi.org/project/pytest-shard/0.1.2/",
  "requires_dist": [
    "pytest"
  ],
  "requires_python": ">=3.6",
  "summary": "",
  "version": "0.1.2",
  "releases": [],
  "developers": [],
  "kwds": "pytest shard shards pypi pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_shard",
  "homepage": "https://github.com/adamgleave/pytest-shard",
  "release_count": 3,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "sacred\n======\n\n    | *every experiment is sacred*\n    | *every experiment is great*\n    | *if an experiment is wasted*\n    | *god gets quite irate*\n\n|pypi| |py_versions| |license| |rtfd| |doi|\n\n|build| |coverage| |code_quality| |black|\n\n\n\n\nsacred is a tool to help you configure, organize, log and reproduce experiments.\nit is designed to do all the tedious overhead work that you need to do around\nyour actual experiment in order to:\n\n- keep track of all the parameters of your experiment\n- easily run your experiment for different settings\n- save configurations for individual runs in a database\n- reproduce your results\n\nsacred achieves this through the following main mechanisms:\n\n-  **config scopes** a very convenient way of the local variables in a function\n   to define the parameters your experiment uses.\n-  **config injection**: you can access all parameters of your configuration\n   from every function. they are automatically injected by name.\n-  **command-line interface**: you get a powerful command-line interface for each\n   experiment that you can use to change parameters and run different variants.\n-  **observers**: sacred provides observers that log all kinds of information\n   about your experiment, its dependencies, the configuration you used,\n   the machine it is run on, and of course the result. these can be saved\n   to a mongodb, for easy access later.\n-  **automatic seeding** helps controlling the randomness in your experiments,\n   such that the results remain reproducible.\n\nexample\n-------\n+------------------------------------------------+--------------------------------------------+\n| **script to train an svm on the iris dataset** | **the same script as a sacred experiment** |\n+------------------------------------------------+--------------------------------------------+\n| .. code:: python                               | .. code:: python                           |\n|                                                |                                            |\n|  from numpy.random import permutation          |   from numpy.random import permutation     |\n|  from sklearn import svm, datasets             |   from sklearn import svm, datasets        |\n|                                                |   from sacred import experiment            |\n|                                                |   ex = experiment('iris_rbf_svm')          |\n|                                                |                                            |\n|                                                |   @ex.config                               |\n|                                                |   def cfg():                               |\n|  c = 1.0                                       |     c = 1.0                                |\n|  gamma = 0.7                                   |     gamma = 0.7                            |\n|                                                |                                            |\n|                                                |   @ex.automain                             |\n|                                                |   def run(c, gamma):                       |\n|  iris = datasets.load_iris()                   |     iris = datasets.load_iris()            |\n|  perm = permutation(iris.target.size)          |     per = permutation(iris.target.size)    |\n|  iris.data = iris.data[perm]                   |     iris.data = iris.data[per]             |\n|  iris.target = iris.target[perm]               |     iris.target = iris.target[per]         |\n|  clf = svm.svc(c=c, kernel='rbf',              |     clf = svm.svc(c=c, kernel='rbf',       |\n|          gamma=gamma)                          |             gamma=gamma)                   |\n|  clf.fit(iris.data[:90],                       |     clf.fit(iris.data[:90],                |\n|          iris.target[:90])                     |             iris.target[:90])              |\n|  print(clf.score(iris.data[90:],               |     return clf.score(iris.data[90:],       |\n|                  iris.target[90:]))            |                      iris.target[90:])     |\n+------------------------------------------------+--------------------------------------------+\n\ndocumentation\n-------------\nthe documentation is hosted at `readthedocs <http://sacred.readthedocs.org/>`_.\n\ninstalling\n----------\nyou can directly install it from the python package index with pip:\n\n    pip install sacred\n\nor if you want to do it manually you can checkout the current version from git\nand install it yourself:\n\n   | git clone https://github.com/idsia/sacred.git\n   | cd sacred\n   | python setup.py install\n\nyou might want to also install the ``numpy`` and the ``pymongo`` packages. they are\noptional dependencies but they offer some cool features:\n\n    pip install numpy pymongo\n\ntests\n-----\nthe tests for sacred use the `pytest <http://pytest.org/latest/>`_ package.\nyou can execute them by running ``pytest`` in the sacred directory like this:\n\n    pytest\n\nthere is also a config file for `tox <https://tox.readthedocs.io/en/latest/>`_ so you\ncan automatically run the tests for various python versions like this:\n\n    tox\n\nupdate pytest version\n+++++++++++++++++++++\n\nif you update or change the pytest version, the following files need to be changed:\n\n- ``dev-requirements.txt``\n- ``tox.ini``\n- ``test/test_utils.py``\n- ``setup.py``\n\ncontributing\n------------\nif you find a bug, have a feature request or want to discuss something general you are welcome to open an\n`issue <https://github.com/idsia/sacred/issues>`_. if you have a specific question related\nto the usage of sacred, please ask a question on stackoverflow under the\n`python-sacred tag <https://stackoverflow.com/questions/tagged/python-sacred>`_. we value documentation\na lot. if you find something that should be included in the documentation please\ndocument it or let us know whats missing. if you are using sacred in one of your projects and want to share\nyour code with others, put your repo in the `projects using sacred <docs/projects_using_sacred.rst`>_ list.\npull requests are highly welcome!\n\nfrontends\n---------\nat this point there are three frontends to the database entries created by sacred (that i'm aware of).\nthey are developed externally as separate projects.\n\n`omniboard <https://github.com/vivekratnavel/omniboard>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/omniboard-table.png\n.. image:: docs/images/omniboard-metric-graphs.png\n\nomniboard is a web dashboard that helps in visualizing the experiments and metrics / logs collected by sacred.\nomniboard is written with react, node.js, express and bootstrap.\n\n\n`incense <https://github.com/jarnorfb/incense>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/incense-artifact.png\n.. image:: docs/images/incense-metric.png\n\nincense is a python library to retrieve runs stored in a mongodb and interactively display metrics and artifacts\nin jupyter notebooks.\n\n`sacredboard <https://github.com/chovanecm/sacredboard>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/sacredboard.png\n\nsacredboard is a web-based dashboard interface to the sacred runs stored in a\nmongodb.\n\n`neptune <https://neptune.ai/>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/neptune-compare.png\n.. image:: docs/images/neptune-collaboration.png\n\nneptune is a metadata store for mlops, built for teams that run a lot of experiments.\nit gives you a single place to log, store, display, organize, compare, and query all your model-building metadata via api available for both python and r programming languages:\n\n.. image:: docs/images/neptune-query-api.png\n\nin order to log your sacred experiments to neptune, all you need to do is add an observer:\n\n.. code-block:: python\n\n    from neptune.new.integrations.sacred import neptuneobserver\n    ex.observers.append(neptuneobserver(api_token='<your_api_token>',\n                                        project='<your_workspace/your_project>'))\n\nfor more info, check the `neptune + sacred integration guide <https://docs.neptune.ai/integrations-and-supported-tools/experiment-tracking/sacred>`_.\n\n`sacredbrowser <https://github.com/michaelwand/sacredbrowser>`_\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n.. image:: docs/images/sacred_browser.png\n\nsacredbrowser is a pyqt4 application to browse the mongodb entries created by\nsacred experiments.\nfeatures include custom queries, sorting of the results,\naccess to the stored source-code, and many more.\nno installation is required and it can connect to a local\ndatabase or over the network.\n\n\n`prophet <https://github.com/qwlouse/prophet>`_\n+++++++++++++++++++++++++++++++++++++++++++++++\nprophet is an early prototype of a webinterface to the mongodb entries created by\nsacred experiments, that is discontinued.\nit requires you to run `restheart <http://restheart.org>`_ to access the database.\n\n\nrelated projects\n----------------\n\n`sumatra <https://pythonhosted.org/sumatra/>`_\n++++++++++++++++++++++++++++++++++++++++++++++\n   | sumatra is a tool for managing and tracking projects based on numerical\n   | simulation and/or analysis, with the aim of supporting reproducible research.\n   | it can be thought of as an automated electronic lab notebook for\n   | computational projects.\n\nsumatra takes a different approach by providing commandline tools to initialize\na project and then run arbitrary code (not just python).\nit tracks information about all runs in a sql database and even provides a nice browser tool.\nit integrates less tightly with the code to be run, which makes it easily\napplicable to non-python experiments.\nbut that also means it requires more setup for each experiment and\nconfiguration needs to be done using files.\nuse this project if you need to run non-python experiments, or are ok with the additional setup/configuration overhead.\n\n\n`future gadget laboratory <https://github.com/kaixhin/fglab>`_\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n   | fglab is a machine learning dashboard, designed to make prototyping\n   | experiments easier. experiment details and results are sent to a database,\n   | which allows analytics to be performed after their completion. the server\n   | is fglab, and the clients are fgmachines.\n\nsimilar to sumatra, fglab is an external tool that can keep track of runs from\nany program. projects are configured via a json schema and the program needs to\naccept these configurations via command-line options.\nfglab also takes the role of a basic scheduler by distributing runs over several\nmachines.\n\n\nlicense\n-------\nthis project is released under the terms of the `mit license <http://opensource.org/licenses/mit>`_.\n\n\nciting sacred\n-------------\n`k. greff, a. klein, m. chovanec, f. hutter, and j. schmidhuber, \u2018the sacred infrastructure for computational research\u2019,\nin proceedings of the 15th python in science conference (scipy 2017), austin, texas, 2017, pp. 49\u201356\n<http://conference.scipy.org/proceedings/scipy2017/klaus_greff.html>`_.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/sacred.svg\n    :target: https://pypi.python.org/pypi/sacred\n    :alt: current pypi version\n\n.. |py_versions| image:: https://img.shields.io/pypi/pyversions/sacred.svg\n    :target: https://pypi.python.org/pypi/sacred\n    :alt: supported python versions\n\n.. |license| image:: https://img.shields.io/badge/license-mit-blue.png\n    :target: http://choosealicense.com/licenses/mit/\n    :alt: mit licensed\n\n.. |rtfd| image:: https://readthedocs.org/projects/sacred/badge/?version=latest&style=flat\n    :target: https://sacred.readthedocs.io/en/stable/\n    :alt: readthedocs\n\n.. |doi| image:: https://zenodo.org/badge/doi/10.5281/zenodo.16386.svg\n    :target: http://dx.doi.org/10.5281/zenodo.16386\n    :alt: doi for this release\n\n.. |build| image:: https://github.com/idsia/sacred/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/idsia/sacred/actions/workflows/test.yml/badge.svg\n    :alt: github actions pytest\n\n.. |coverage| image:: https://coveralls.io/repos/idsia/sacred/badge.svg\n    :target: https://coveralls.io/r/idsia/sacred\n    :alt: coverage report\n\n.. |code_quality| image:: https://scrutinizer-ci.com/g/idsia/sacred/badges/quality-score.png?b=master\n    :target: https://scrutinizer-ci.com/g/idsia/sacred/\n    :alt: code scrutinizer quality\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n    :alt: code style: black\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "sacred",
  "package_url": "https://pypi.org/project/sacred/",
  "project_url": "https://pypi.org/project/sacred/",
  "project_urls": {
    "Homepage": "https://github.com/IDSIA/sacred"
  },
  "release_url": "https://pypi.org/project/sacred/0.8.5/",
  "requires_dist": [
    "docopt <1.0,>=0.3",
    "jsonpickle >=2.2.0",
    "munch <5.0,>=2.5",
    "wrapt <2.0,>=1.0",
    "py-cpuinfo >=4.0",
    "colorama >=0.4",
    "packaging >=18.0",
    "GitPython"
  ],
  "requires_python": ">=3.8",
  "summary": "facilitates automated and reproducible experimental research",
  "version": "0.8.5",
  "releases": [],
  "developers": [
    "klaus.greff@startmail.com",
    "klaus_greff"
  ],
  "kwds": "experiments projects_using_sacred test_utils py_versions pyversions",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_sacred",
  "homepage": "https://github.com/idsia/sacred",
  "release_count": 29,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_docopt",
    "pypi_gitpython",
    "pypi_jsonpickle",
    "pypi_munch",
    "pypi_packaging",
    "pypi_py_cpuinfo",
    "pypi_wrapt"
  ]
}
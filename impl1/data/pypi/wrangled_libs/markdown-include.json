{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "programming language :: python",
    "topic :: internet :: www/http :: site management",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: filters",
    "topic :: text processing :: markup :: html"
  ],
  "description": "# markdown-include\n\nthis is an extension to [python-markdown](https://pythonhosted.org/markdown/)\nwhich provides an \"include\" function, similar to that found in\nlatex (and also the c pre-processor and fortran). i originally wrote it for my\n[ford](https://github.com/cmacmackin/ford) fortran auto-documentation generator.\n\n\n## installation\nthis module can now be installed using ``pip``.\n\n    pip install markdown-include\n\n## tests\nuse the unittest module\n```bash\npython -m unittest discover unittests/\n```\n\n## usage\nthis module can be used in a program in the following way:\n\n```python\nimport markdown\nhtml = markdown.markdown(source, extensions=['markdown_include.include'])\n```\n\nmarkdown-include can also be included in mkdocs projects like below:\n\n```yaml\nmarkdown_extensions:\n    - markdown_include.include:\n        base_path: docs\n```\n\nthe syntax for use within your markdown files is ``{!filename!}``. this\nstatement will be replaced by the contents of ``filename``. markdown-include\nwill work recursively, so any included files within ``filename`` will also be\nincluded. this replacement is done prior to any other\nmarkdown processing, so any markdown syntax that you want can be used within\nyour included files. note that this is a change from the previous version.\nit was felt that this syntax was less likely to conflict with any code\nfragments present in the markdown.\n\nby default, all file-names are evaluated relative to the location from which\nmarkdown is being called. if you would like to change the directory relative to\nwhich paths are evaluated, then this can be done by specifying the extension\nsetting ``base_path``.\n\n### line ranges\n\nyou can also define specific lines or line ranges to include by specifying `lines`:\n\n```markdown\n{!filename!lines=1  3 8-10  2}\n```\n\n`lines` takes a sequence of integers separated by spaces (one or more), or it can also\ntake line ranges specified with a start line and an end line separated by a dash (`-`).\n\nin the example above, it would read the file called `filename` and include the lines\n`1`, `3`, `8`, `9`, `10`, `2`.\n\nnotice that line `9` was not explicitly set. but it was still included as part of the\nrange `8-10`.\n\nalso, notice that line `2` is set *after* the range `8-10`. this means that the\nline `2` in `filename` will be included *after* (below) the range `8-10`.\n\nyou can use this to include lines in a different order than the original file. but it\nalso means that if you want to preserve the original order, you have to pay attention\nto the order in which you specify the lines.\n\n## configuration\n\nthe following settings can be specified when initialising the plugin.\n\n- __base_path__: default location from which to evaluate relative\n  paths for the include statement. (default: the run-directory.)\n- __encoding__: encoding of the files used by the include statement. (default: utf-8.)\n- __inheritheadingdepth__ : if true, increases headings on include\n  file by amount of previous heading. combiens with headingoffset\n  option, below. (default: false.)\n- __headingoffset__: increases heading depth by a specific ammount, in\n  addition to the inheritheadingdepth option. (default: 0)\n- __throwexception__: when true, if the extension is unable to find an\n  included file it will throw an exception which the user can\n  catch. if false (default), a warning will be printed and markdown\n  will continue parsing the file.\n\n## examples\n\nan example of setting the base path and file encoding is given below:\n```python\nimport markdown\nfrom markdown_include.include import markdowninclude\n\n# markdown extensions\nmarkdown_include = markdowninclude(\n    configs={'base_path':'/srv/content/', 'encoding': 'iso-8859-1'}\n)\nhtml = markdown.markdown(source, extensions=[markdown_include])\n```\n\nincluded files can inherit the heading depth of the location\n``inheritheadingdepth``, as well as receive a specific offset, ``headingoffset``\nfor example, consider the  files\n```markdown\nsource file\n# heading level 1 of main file\n\n{!included_file.md!}\n\n## heading level 2 of main file\n\n{!included_file.md!}\n```\n\nand included_file.md\n\n```markdown\n# this heading will be one level deeper from the previous heading\nmore included file content.\nend of included content.\n```\nthen running the script\n```python\nimport markdown\nfrom markdown_include.include import markdowninclude\n\n# markdown extensions\nmarkdown_include = markdowninclude(\n    configs={'inheritheadingdepth':true}\n)\nhtml = markdown.markdown(source, extensions=[markdown_include])\n```\nproduces\n```html\n<p>source file</p>\n<h1>heading level 1 of main file</h1>\n<h2>this heading will be one level deeper from the previous heading</h2>\n<p>more included file content.</p>\n<p>end of included content.</p>\n<h2>heading level 2 of main file</h2>\n<h3>this heading will be one level deeper from the previous heading</h3>\n<p>more included file content.</p>\n<p>end of included content.</p>\n```\n\n\n## changelog\n### version 0.7.0\nmodified to work with python-markdown 3.4. this makes the plugin\nincompatible with versions < 3.0.\n### version 0.6.0\n- added ability ot offset headers in the included file so they fall under the header level in which the include occurs\n- add option to throw exception when can't find an include file (instead of printing a warning)\n- fixed stripping of last character in file, so only occurs if it is a new-line\n- some behind-the-scenes improvement to code and documentation\n### version 0.5.1\nbugfix for a syntax error.\n### version 0.5\ncorrected some errors in documentation and merged in commits of\n[diegobz](https://github.com/diegobz) to add support for encoding and tidy up\nthe source code.\n### version 0.4\nfixed problem related to passing configurations to the extension.\n### version 0.3\nadded support for python 3.\n### version 0.2\nchanged the api to be less likely to conflict with other syntax.\n### version 0.1\ninitial release.\n",
  "docs_url": null,
  "keywords": "markdown,typesetting,include,plugin,extension",
  "license": "gnu general public license v3 (gplv3)",
  "name": "markdown-include",
  "package_url": "https://pypi.org/project/markdown-include/",
  "project_url": "https://pypi.org/project/markdown-include/",
  "project_urls": {
    "project": "https://github.com/cmacmackin/markdown-include"
  },
  "release_url": "https://pypi.org/project/markdown-include/0.8.1/",
  "requires_dist": [
    "markdown (>=3.0)",
    "pytest ; extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "a python-markdown extension which provides an 'include' function",
  "version": "0.8.1",
  "releases": [],
  "developers": [
    "cmacmackin@gmail.com"
  ],
  "kwds": "markdown_include markdown_extensions markdown included_file markdowninclude",
  "license_kwds": "gnu general public license v3 (gplv3)",
  "libtype": "pypi",
  "id": "pypi_markdown_include",
  "homepage": "",
  "release_count": 14,
  "dependency_ids": [
    "pypi_markdown",
    "pypi_pytest"
  ]
}
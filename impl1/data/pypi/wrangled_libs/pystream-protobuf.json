{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "[![build status](https://img.shields.io/travis/cartoonist/pystream-protobuf.svg?style=flat-square)](https://travis-ci.org/cartoonist/pystream-protobuf)\n[![pypi release](https://img.shields.io/pypi/v/pystream-protobuf.svg?style=flat-square)](https://pypi.python.org/pypi/pystream-protobuf)\n[![pypi status](https://img.shields.io/pypi/status/pystream-protobuf.svg?style=flat-square)](https://pypi.python.org/pypi/pystream-protobuf)\n[![python](https://img.shields.io/pypi/pyversions/pystream-protobuf.svg?style=flat-square)](https://www.python.org/download/releases/3.0/)\n[![license](https://img.shields.io/pypi/l/pystream-protobuf.svg?style=flat-square)](https://github.com/cartoonist/pystream-protobuf/blob/master/license)\n\n# pystream\npython implementation of [stream library](https://github.com/vgteam/stream).\n\n## introduction\nthis library enables _stream processing_ of protobuf messages (or any serializable\nobjects since v1.6.3); i.e. multiple protobuf messages can be written/read into/from a\nsingle stream or file.\n\nit was originally developed to parse/write [vg](https://github.com/vgteam/vg)\nfile formats (`.vg`, `.gam`, etc). however, it can be used for any arbitrary\nprotocol buffer messages.\n\nrefer to the c++ [stream library](https://github.com/vgteam/stream) for more\ndetails.\n\n---\n\n**note**\n\n**@vg users:** the new version of stream library, now as a part of\n[libvgio](https://github.com/vgteam/libvgio), writes a header tag at the start of\nthe stream depending on the output format. for example, headers like `b'gam'`\nor `b'vg'` can be found before the actual protobuf messages in gam and vg files\nrepectively. in this case, you should provide the expected value using `header`\nkeyword argument; e.g.\n`stream.parse('file.gam', vg_pb2.alignment, header=b'gam', persistent_header=true)`\nfor gam files (since version v1.6.2).\n\n---\n\n## encoding\nthe encoding is simple. messages are written in groups of different sizes. each\ngroup starts with its size; i.e. the number of messages in that group. then, the\nsize of each message is followed by the encoded message itself. quoted from\n[google protobuf developer guide](https://developers.google.com/protocol-buffers/docs/techniques#streaming):\n\n> the protocol buffer wire format is not self-delimiting, so protocol buffer\n> parsers cannot determine where a message ends on their own. the easiest way to\n> solve this problem is to write the size of each message before you write the\n> message itself. when you read the messages back in, you read the size, then\n> read the bytes into a separate buffer, then parse from that buffer.\n\nby default, the stream is considered compressed by gzip. however, uncompressed\nstream processing is possible by passing `gzip=false` to any api calls.\n\n## installation\nyou can install pystream using `pip`:\n\n    pip install pystream-protobuf\n\n## usage\nsee [wiki](https://github.com/cartoonist/pystream-protobuf/wiki) for usage documentation.\n\n## development\nin case, you work with the source code and need to build the package:\n\n    python setup.py build\n\nthe proto files in the test module required to be compiled before running test\ncases. to do so, it is required to have google protobuf compiler (>=3.0.2)\ninstalled. after installing protobuf compiler, run:\n\n    make init\n\nto compile proto files required for test module and then:\n\n    make test\n\nto run tests.\n",
  "docs_url": null,
  "keywords": "stream protocol buffer protobuf",
  "license": "mit",
  "name": "pystream-protobuf",
  "package_url": "https://pypi.org/project/pystream-protobuf/",
  "project_url": "https://pypi.org/project/pystream-protobuf/",
  "project_urls": {
    "Download": "https://github.com/cartoonist/pystream-protobuf/tarball/1.6.4",
    "Homepage": "https://github.com/cartoonist/pystream-protobuf"
  },
  "release_url": "https://pypi.org/project/pystream-protobuf/1.6.4/",
  "requires_dist": [
    "protobuf (>=3.4.0)",
    "async-generator (>=1.10)",
    "click (>=6.0.0)",
    "future",
    "nose (>=1.0) ; extra == 'test'",
    "coverage ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "python implementation of stream library",
  "version": "1.6.4",
  "releases": [],
  "developers": [
    "ali.ghaffaari@mpi-inf.mpg.de",
    "ali_ghaffaari"
  ],
  "kwds": "protobuf proto pypi pystream _stream",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pystream_protobuf",
  "homepage": "https://github.com/cartoonist/pystream-protobuf",
  "release_count": 27,
  "dependency_ids": [
    "pypi_async_generator",
    "pypi_click",
    "pypi_coverage",
    "pypi_future",
    "pypi_nose",
    "pypi_protobuf"
  ]
}
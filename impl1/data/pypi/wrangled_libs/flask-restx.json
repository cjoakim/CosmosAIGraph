{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: software distribution"
  ],
  "description": "===========\nflask restx\n===========\n\n.. image:: https://github.com/python-restx/flask-restx/workflows/tests/badge.svg?tag=1.3.0&event=push\n    :target: https://github.com/python-restx/flask-restx/actions?query=workflow%3atests\n    :alt: tests status\n.. image:: https://codecov.io/gh/python-restx/flask-restx/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/python-restx/flask-restx\n    :alt: code coverage\n.. image:: https://readthedocs.org/projects/flask-restx/badge/?version=1.3.0\n    :target: https://flask-restx.readthedocs.io/en/1.3.0/\n    :alt: documentation status\n.. image:: https://img.shields.io/pypi/l/flask-restx.svg\n    :target: https://pypi.org/project/flask-restx\n    :alt: license\n.. image:: https://img.shields.io/pypi/pyversions/flask-restx.svg\n    :target: https://pypi.org/project/flask-restx\n    :alt: supported python versions\n.. image:: https://badges.gitter.im/join%20chat.svg\n    :target: https://gitter.im/python-restx?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n    :alt: join the chat at https://gitter.im/python-restx\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: code style: black\n\n\nflask-restx is a community driven fork of `flask-restplus <https://github.com/noirbizarre/flask-restplus>`_.\n\n\nflask-restx is an extension for `flask`_ that adds support for quickly building rest apis.\nflask-restx encourages best practices with minimal setup.\nif you are familiar with flask, flask-restx should be easy to pick up.\nit provides a coherent collection of decorators and tools to describe your api\nand expose its documentation properly using `swagger`_.\n\n\ncompatibility\n=============\n\nflask-restx requires python 3.8+.\n\non flask compatibility\n======================\n\nflask and werkzeug moved to versions 2.0 in march 2020. this caused a breaking change in flask-restx.\n\n.. list-table:: restx and flask / werkzeug compatibility\n    :widths: 25 25 25\n    :header-rows: 1\n\n\n    * - flask-restx version\n      - flask version\n      - note\n    * - <= 0.3.0\n      - < 2.0.0\n      - unpinned in flask-restx. pin your projects!\n    * - == 0.4.0\n      - < 2.0.0\n      - pinned in flask-restx.\n    * - >= 0.5.0\n      - < 3.0.0\n      - unpinned, import statements wrapped for compatibility\n    * - == 1.2.0\n      - < 3.0.0\n      - pinned in flask-restx.\n    * - >= 1.3.0\n      - >= 2.0.0 (flask >= 3.0.0 support)\n      - unpinned, import statements wrapped for compatibility\n    * - trunk branch in github\n      - >= 2.0.0 (flask >= 3.0.0 support)\n      - unpinned, will address issues faster than releases.\n\ninstallation\n============\n\nyou can install flask-restx with pip:\n\n.. code-block:: console\n\n    $ pip install flask-restx\n\nor with easy_install:\n\n.. code-block:: console\n\n    $ easy_install flask-restx\n\n\nquick start\n===========\n\nwith flask-restx, you only import the api instance to route and document your endpoints.\n\n.. code-block:: python\n\n    from flask import flask\n    from flask_restx import api, resource, fields\n\n    app = flask(__name__)\n    api = api(app, version='1.0', title='todomvc api',\n        description='a simple todomvc api',\n    )\n\n    ns = api.namespace('todos', description='todo operations')\n\n    todo = api.model('todo', {\n        'id': fields.integer(readonly=true, description='the task unique identifier'),\n        'task': fields.string(required=true, description='the task details')\n    })\n\n\n    class tododao(object):\n        def __init__(self):\n            self.counter = 0\n            self.todos = []\n\n        def get(self, id):\n            for todo in self.todos:\n                if todo['id'] == id:\n                    return todo\n            api.abort(404, \"todo {} doesn't exist\".format(id))\n\n        def create(self, data):\n            todo = data\n            todo['id'] = self.counter = self.counter + 1\n            self.todos.append(todo)\n            return todo\n\n        def update(self, id, data):\n            todo = self.get(id)\n            todo.update(data)\n            return todo\n\n        def delete(self, id):\n            todo = self.get(id)\n            self.todos.remove(todo)\n\n\n    dao = tododao()\n    dao.create({'task': 'build an api'})\n    dao.create({'task': '?????'})\n    dao.create({'task': 'profit!'})\n\n\n    @ns.route('/')\n    class todolist(resource):\n        '''shows a list of all todos, and lets you post to add new tasks'''\n        @ns.doc('list_todos')\n        @ns.marshal_list_with(todo)\n        def get(self):\n            '''list all tasks'''\n            return dao.todos\n\n        @ns.doc('create_todo')\n        @ns.expect(todo)\n        @ns.marshal_with(todo, code=201)\n        def post(self):\n            '''create a new task'''\n            return dao.create(api.payload), 201\n\n\n    @ns.route('/<int:id>')\n    @ns.response(404, 'todo not found')\n    @ns.param('id', 'the task identifier')\n    class todo(resource):\n        '''show a single todo item and lets you delete them'''\n        @ns.doc('get_todo')\n        @ns.marshal_with(todo)\n        def get(self, id):\n            '''fetch a given resource'''\n            return dao.get(id)\n\n        @ns.doc('delete_todo')\n        @ns.response(204, 'todo deleted')\n        def delete(self, id):\n            '''delete a task given its identifier'''\n            dao.delete(id)\n            return '', 204\n\n        @ns.expect(todo)\n        @ns.marshal_with(todo)\n        def put(self, id):\n            '''update a task given its identifier'''\n            return dao.update(id, api.payload)\n\n\n    if __name__ == '__main__':\n        app.run(debug=true)\n\n\ncontributors\n============\n\nflask-restx is brought to you by @python-restx. since early 2019 @steadbytes,\n@a-luna, @j5awry, @ziirish volunteered to help @python-restx keep the project up\nand running, they did so for a long time! since the beginning of 2023, the project\nis maintained by @peter-doggart with help from @ziirish.\nof course everyone is welcome to contribute and we will be happy to review your\npr's or answer to your issues.\n\n\ndocumentation\n=============\n\nthe documentation is hosted `on read the docs <http://flask-restx.readthedocs.io/en/latest/>`_\n\n\n.. _flask: https://flask.palletsprojects.com/\n.. _swagger: https://swagger.io/\n\n\ncontribution\n============\nwant to contribute! that's awesome! check out `contributing.rst! <https://github.com/python-restx/flask-restx/blob/master/contributing.rst>`_\n\n\n\n",
  "docs_url": null,
  "keywords": "flask restx rest api swagger openapi",
  "license": "bsd-3-clause",
  "name": "flask-restx",
  "package_url": "https://pypi.org/project/flask-restx/",
  "project_url": "https://pypi.org/project/flask-restx/",
  "project_urls": {
    "Homepage": "https://github.com/python-restx/flask-restx"
  },
  "release_url": "https://pypi.org/project/flask-restx/1.3.0/",
  "requires_dist": [
    "aniso8601 >=0.82",
    "jsonschema",
    "Flask !=2.0.0,>=0.8",
    "werkzeug !=2.0.0",
    "pytz",
    "importlib-resources",
    "blinker ; extra == 'dev'",
    "Faker ==2.0.0 ; extra == 'dev'",
    "mock ==3.0.5 ; extra == 'dev'",
    "pytest ==7.0.1 ; extra == 'dev'",
    "pytest-benchmark ==3.4.1 ; extra == 'dev'",
    "pytest-cov ==4.0.0 ; extra == 'dev'",
    "pytest-flask ==1.3.0 ; extra == 'dev'",
    "pytest-mock ==3.6.1 ; extra == 'dev'",
    "pytest-profiling ==1.7.0 ; extra == 'dev'",
    "tzlocal ; extra == 'dev'",
    "invoke ==2.2.0 ; extra == 'dev'",
    "twine ==3.8.0 ; extra == 'dev'",
    "setuptools ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "black ; extra == 'dev'",
    "alabaster ==0.7.12 ; extra == 'doc'",
    "Sphinx ==5.3.0 ; extra == 'doc'",
    "sphinx-issues ==3.0.1 ; extra == 'doc'",
    "blinker ; extra == 'test'",
    "Faker ==2.0.0 ; extra == 'test'",
    "mock ==3.0.5 ; extra == 'test'",
    "pytest ==7.0.1 ; extra == 'test'",
    "pytest-benchmark ==3.4.1 ; extra == 'test'",
    "pytest-cov ==4.0.0 ; extra == 'test'",
    "pytest-flask ==1.3.0 ; extra == 'test'",
    "pytest-mock ==3.6.1 ; extra == 'test'",
    "pytest-profiling ==1.7.0 ; extra == 'test'",
    "tzlocal ; extra == 'test'",
    "invoke ==2.2.0 ; extra == 'test'",
    "twine ==3.8.0 ; extra == 'test'",
    "setuptools ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "fully featured framework for fast, easy and documented api development with flask",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "python"
  ],
  "kwds": "flask_restx restx swagger flask _swagger",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_flask_restx",
  "homepage": "https://github.com/python-restx/flask-restx",
  "release_count": 16,
  "dependency_ids": [
    "pypi_alabaster",
    "pypi_aniso8601",
    "pypi_black",
    "pypi_blinker",
    "pypi_faker",
    "pypi_flask",
    "pypi_importlib_resources",
    "pypi_invoke",
    "pypi_jsonschema",
    "pypi_mock",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_flask",
    "pypi_pytest_mock",
    "pypi_pytest_profiling",
    "pypi_pytz",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_sphinx_issues",
    "pypi_tox",
    "pypi_twine",
    "pypi_tzlocal",
    "pypi_werkzeug"
  ]
}
{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "aiostream\n=========\n\n\n.. image:: https://readthedocs.org/projects/aiostream/badge/?version=latest\n   :target: http://aiostream.readthedocs.io/en/latest/?badge=latest\n   :alt:\n\n.. image:: https://codecov.io/gh/vxgmichel/aiostream/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/vxgmichel/aiostream\n   :alt:\n\n.. image:: https://travis-ci.org/vxgmichel/aiostream.svg?branch=master\n   :target: https://travis-ci.org/vxgmichel/aiostream\n   :alt:\n\n.. image:: https://img.shields.io/pypi/v/aiostream.svg\n   :target: https://pypi.python.org/pypi/aiostream\n   :alt:\n\n.. image:: https://img.shields.io/pypi/pyversions/aiostream.svg\n   :target: https://pypi.python.org/pypi/aiostream/\n   :alt:\n\ngenerator-based operators for asynchronous iteration\n\n\nsynopsis\n--------\n\naiostream_ provides a collection of stream operators that can be combined to create\nasynchronous pipelines of operations.\n\nit can be seen as an asynchronous version of itertools_, although some aspects are slightly different.\nessentially, all the provided operators return a unified interface called a stream.\na stream is an enhanced asynchronous iterable providing the following features:\n\n- **operator pipe-lining** - using pipe symbol ``|``\n- **repeatability** - every iteration creates a different iterator\n- **safe iteration context** - using ``async with`` and the ``stream`` method\n- **simplified execution** - get the last element from a stream using ``await``\n- **slicing and indexing** - using square brackets ``[]``\n- **concatenation** - using addition symbol ``+``\n\n\nrequirements\n------------\n\nthe stream operators rely heavily on asynchronous generators (`pep 525`_):\n\n- python >= 3.6\n\n\nstream operators\n----------------\n\nthe `stream operators`_ are separated in 7 categories:\n\n+--------------------+---------------------------------------------------------------------------------------+\n| **creation**       | iterate_, preserve_, just_, call_, empty_, throw_, never_, repeat_, count_, range_    |\n+--------------------+---------------------------------------------------------------------------------------+\n| **transformation** | map_, enumerate_, starmap_, cycle_, chunks_                                           |\n+--------------------+---------------------------------------------------------------------------------------+\n| **selection**      | take_, takelast_, skip_, skiplast_, getitem_, filter_, until_, takewhile_, dropwhile_ |\n+--------------------+---------------------------------------------------------------------------------------+\n| **combination**    | map_, zip_, merge_, chain_, ziplatest_                                                |\n+--------------------+---------------------------------------------------------------------------------------+\n| **aggregation**    | accumulate_, reduce_, list_                                                           |\n+--------------------+---------------------------------------------------------------------------------------+\n| **advanced**       | concat_, flatten_, switch_, concatmap_, flatmap_, switchmap_                          |\n+--------------------+---------------------------------------------------------------------------------------+\n| **timing**         | spaceout_, timeout_, delay_                                                           |\n+--------------------+---------------------------------------------------------------------------------------+\n| **miscellaneous**  | action_, print_                                                                       |\n+--------------------+---------------------------------------------------------------------------------------+\n\n\ndemonstration\n-------------\n\nthe following example demonstrates most of the streams capabilities:\n\n.. sourcecode:: python\n\n    import asyncio\n    from aiostream import stream, pipe\n\n\n    async def main():\n\n        # create a counting stream with a 0.2 seconds interval\n        xs = stream.count(interval=0.2)\n\n        # operators can be piped using '|'\n        ys = xs | pipe.map(lambda x: x**2)\n\n        # streams can be sliced\n        zs = ys[1:10:2]\n\n        # use a stream context for proper resource management\n        async with zs.stream() as streamer:\n\n            # asynchronous iteration\n            async for z in streamer:\n\n                # print 1, 9, 25, 49 and 81\n                print('->', z)\n\n        # streams can be awaited and return the last value\n        print('9\u00b2 = ', await zs)\n\n        # streams can run several times\n        print('9\u00b2 = ', await zs)\n\n        # streams can be concatenated\n        one_two_three = stream.just(1) + stream.range(2, 4)\n\n        # print [1, 2, 3]\n        print(await stream.list(one_two_three))\n\n\n    # run main coroutine\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n    loop.close()\n\nmore examples are available in the `example section`_ of the documentation.\n\n\ncontact\n-------\n\nvincent michel: vxgmichel@gmail.com\n\n\n.. _aiostream: https://github.com/vxgmichel/aiostream\n.. _pep 525: http://www.python.org/dev/peps/pep-0525/\n.. _rx: http://reactivex.io/\n.. _aioreactive: http://github.com/dbrattli/aioreactive\n.. _itertools: http://docs.python.org/3/library/itertools.html\n\n.. _stream operators: http://aiostream.readthedocs.io/en/latest/operators.html\n.. _example section: http://aiostream.readthedocs.io/en/latest/examples.html\n\n.. _iterate: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.iterate\n.. _preserve: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.preserve\n.. _just: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.just\n.. _call: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.call\n.. _throw: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.throw\n.. _empty: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.empty\n.. _never: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.never\n.. _repeat: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.repeat\n.. _range: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.range\n.. _count: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.count\n\n.. _map: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.map\n.. _enumerate: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.enumerate\n.. _starmap: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.starmap\n.. _cycle: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.cycle\n.. _chunks: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.chunks\n\n.. _take: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.take\n.. _takelast: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.takelast\n.. _skip: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.skip\n.. _skiplast: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.skiplast\n.. _getitem: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.getitem\n.. _filter: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.filter\n.. _until: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.until\n.. _takewhile: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.takewhile\n.. _dropwhile: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.dropwhile\n\n.. _chain: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.chain\n.. _zip: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.zip\n.. _merge: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.merge\n.. _ziplatest: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.ziplatest\n\n.. _accumulate: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.accumulate\n.. _reduce: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.reduce\n.. _list: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.list\n\n.. _concat: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.concat\n.. _flatten: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.flatten\n.. _switch: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.switch\n.. _concatmap: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.concatmap\n.. _flatmap: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.flatmap\n.. _switchmap: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.switchmap\n\n.. _spaceout: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.spaceout\n.. _delay: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.delay\n.. _timeout: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.timeout\n\n.. _action: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.action\n.. _print: http://aiostream.readthedocs.io/en/latest/operators.html#aiostream.stream.print\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "gplv3",
  "name": "aiostream",
  "package_url": "https://pypi.org/project/aiostream/",
  "project_url": "https://pypi.org/project/aiostream/",
  "project_urls": {
    "Homepage": "https://github.com/vxgmichel/aiostream"
  },
  "release_url": "https://pypi.org/project/aiostream/0.5.2/",
  "requires_dist": [
    "typing-extensions"
  ],
  "requires_python": ">=3.8",
  "summary": "generator-based operators for asynchronous iteration",
  "version": "0.5.2",
  "releases": [],
  "developers": [
    "vincent_michel",
    "vxgmichel@gmail.com"
  ],
  "kwds": "badge svg graph aiostream_ alt",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_aiostream",
  "homepage": "https://github.com/vxgmichel/aiostream",
  "release_count": 20,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
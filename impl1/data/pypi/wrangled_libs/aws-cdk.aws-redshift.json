{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon redshift construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\n## starting a redshift cluster database\n\nto set up a redshift cluster, define a `cluster`. it will be launched in a vpc.\nyou can specify a vpc, otherwise one will be created. the nodes are always launched in private subnets and are encrypted by default.\n\n```python\nimport aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.vpc(self, \"vpc\")\ncluster = cluster(self, \"redshift\",\n    master_user=login(\n        master_username=\"admin\"\n    ),\n    vpc=vpc\n)\n```\n\nby default, the master password will be generated and stored in aws secrets manager.\n\na default database named `default_db` will be created in the cluster. to change the name of this database set the `defaultdatabasename` attribute in the constructor properties.\n\nby default, the cluster will not be publicly accessible.\ndepending on your use case, you can make the cluster publicly accessible with the `publiclyaccessible` property.\n\n## connecting\n\nto control who can access the cluster, use the `.connections` attribute. redshift clusters have\na default port, so you don't need to specify the port:\n\n```python\ncluster.connections.allow_default_port_from_any_ipv4(\"open to the world\")\n```\n\nthe endpoint to access your database cluster will be available as the `.clusterendpoint` attribute:\n\n```python\ncluster.cluster_endpoint.socket_address\n```\n\n## database resources\n\nthis module allows for the creation of non-cloudformation database resources such as users\nand tables. this allows you to manage identities, permissions, and stateful resources\nwithin your redshift cluster from your cdk application.\n\nbecause these resources are not available in cloudformation, this library leverages\n[custom\nresources](https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html)\nto manage them. in addition to the iam permissions required to make redshift service\ncalls, the execution role for the custom resource handler requires database credentials to\ncreate resources within the cluster.\n\nthese database credentials can be supplied explicitly through the `adminuser` properties\nof the various database resource constructs. alternatively, the credentials can be\nautomatically pulled from the redshift cluster's default administrator\ncredentials. however, this option is only available if the password for the credentials\nwas generated by the cdk application (ie., no value vas provided for [the `masterpassword`\nproperty](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.login.html#masterpasswordspan-classapi-icon-api-icon-experimental-titlethis-api-element-is-experimental-it-may-change-without-noticespan)\nof\n[`cluster.masteruser`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-redshift.cluster.html#masteruserspan-classapi-icon-api-icon-experimental-titlethis-api-element-is-experimental-it-may-change-without-noticespan)).\n\n### creating users\n\ncreate a user within a redshift cluster database by instantiating a `user` construct. this\nwill generate a username and password, store the credentials in a [aws secrets manager\n`secret`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.secret.html),\nand make a query to the redshift cluster to create a new database user with the\ncredentials.\n\n```python\nuser(self, \"user\",\n    cluster=cluster,\n    database_name=\"databasename\"\n)\n```\n\nby default, the user credentials are encrypted with your aws account's default secrets\nmanager encryption key. you can specify the encryption key used for this purpose by\nsupplying a key in the `encryptionkey` property.\n\n```python\nimport aws_cdk.aws_kms as kms\n\n\nencryption_key = kms.key(self, \"key\")\nuser(self, \"user\",\n    encryption_key=encryption_key,\n    cluster=cluster,\n    database_name=\"databasename\"\n)\n```\n\nby default, a username is automatically generated from the user construct id and its path\nin the construct tree. you can specify a particular username by providing a value for the\n`username` property. usernames must be valid identifiers; see: [names and\nidentifiers](https://docs.aws.amazon.com/redshift/latest/dg/r_names.html) in the *amazon\nredshift database developer guide*.\n\n```python\nuser(self, \"user\",\n    username=\"myuser\",\n    cluster=cluster,\n    database_name=\"databasename\"\n)\n```\n\nthe user password is generated by aws secrets manager using the default configuration\nfound in\n[`secretsmanager.secretstringgenerator`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-secretsmanager.secretstringgenerator.html),\nexcept with password length `30` and some sql-incompliant characters excluded. the\nplaintext for the password will never be present in the cdk application; instead, a\n[cloudformation dynamic\nreference](https://docs.aws.amazon.com/awscloudformation/latest/userguide/dynamic-references.html)\nwill be used wherever the password value is required.\n\n### creating tables\n\ncreate a table within a redshift cluster database by instantiating a `table`\nconstruct. this will make a query to the redshift cluster to create a new database table\nwith the supplied schema.\n\n```python\ntable(self, \"table\",\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\"), column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databasename\"\n)\n```\n\nthe table can be configured to have diststyle attribute and a distkey column:\n\n```python\ntable(self, \"table\",\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\", dist_key=true), column(name=\"col2\", data_type=\"float\")\n    ],\n    cluster=cluster,\n    database_name=\"databasename\",\n    dist_style=tablediststyle.key\n)\n```\n\nthe table can also be configured to have sortstyle attribute and sortkey columns:\n\n```python\ntable(self, \"table\",\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\", sort_key=true), column(name=\"col2\", data_type=\"float\", sort_key=true)\n    ],\n    cluster=cluster,\n    database_name=\"databasename\",\n    sort_style=tablesortstyle.compound\n)\n```\n\n### granting privileges\n\nyou can give a user privileges to perform certain actions on a table by using the\n`table.grant()` method.\n\n```python\nuser = user(self, \"user\",\n    cluster=cluster,\n    database_name=\"databasename\"\n)\ntable = table(self, \"table\",\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\"), column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databasename\"\n)\n\ntable.grant(user, tableaction.drop, tableaction.select)\n```\n\ntake care when managing privileges via the cdk, as attempting to manage a user's\nprivileges on the same table in multiple cdk applications could lead to accidentally\noverriding these permissions. consider the following two cdk applications which both refer\nto the same user and table. in application 1, the resources are created and the user is\ngiven `insert` permissions on the table:\n\n```python\ndatabase_name = \"databasename\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = user(self, \"user\",\n    username=username,\n    cluster=cluster,\n    database_name=database_name\n)\ntable = table(self, \"table\",\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\"), column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=database_name\n)\ntable.grant(user, tableaction.insert)\n```\n\nin application 2, the resources are imported and the user is given `insert` permissions on\nthe table:\n\n```python\ndatabase_name = \"databasename\"\nusername = \"myuser\"\ntable_name = \"mytable\"\n\nuser = user.from_user_attributes(self, \"user\",\n    username=username,\n    password=secretvalue.unsafe_plain_text(\"not_for_production\"),\n    cluster=cluster,\n    database_name=database_name\n)\ntable = table.from_table_attributes(self, \"table\",\n    table_name=table_name,\n    table_columns=[column(name=\"col1\", data_type=\"varchar(4)\"), column(name=\"col2\", data_type=\"float\")],\n    cluster=cluster,\n    database_name=\"databasename\"\n)\ntable.grant(user, tableaction.insert)\n```\n\nboth applications attempt to grant the user the appropriate privilege on the table by\nsubmitting a `grant user` sql query to the redshift cluster. note that the latter of these\ntwo calls will have no effect since the user has already been granted the privilege.\n\nnow, if application 1 were to remove the call to `grant`, a `revoke user` sql query is\nsubmitted to the redshift cluster. in general, application 1 does not know that\napplication 2 has also granted this permission and thus cannot decide not to issue the\nrevocation. this leads to the undesirable state where application 2 still contains the\ncall to `grant` but the user does not have the specified permission.\n\nnote that this does not occur when duplicate privileges are granted within the same\napplication, as such privileges are de-duplicated before any sql query is submitted.\n\n## rotating credentials\n\nwhen the master password is generated and stored in aws secrets manager, it can be rotated automatically:\n\n```python\ncluster.add_rotation_single_user()\n```\n\nthe multi user rotation scheme is also available:\n\n```python\nuser = user(self, \"user\",\n    cluster=cluster,\n    database_name=\"databasename\"\n)\ncluster.add_rotation_multi_user(\"multiuserrotation\",\n    secret=user.secret\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-redshift",
  "package_url": "https://pypi.org/project/aws-cdk.aws-redshift/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-redshift/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-redshift/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::redshift",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk cdk_aws aws_kms redshift aws_ec2",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_redshift",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
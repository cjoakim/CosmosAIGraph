{
  "classifiers": [],
  "description": "aioesphomeapi\n=============\n\n.. image:: https://github.com/esphome/aioesphomeapi/workflows/ci/badge.svg\n   :target: https://github.com/esphome/aioesphomeapi?query=workflow%3aci+branch%3amain\n\n.. image:: https://img.shields.io/pypi/v/aioesphomeapi.svg\n    :target: https://pypi.python.org/pypi/aioesphomeapi\n\n.. image:: https://codecov.io/gh/esphome/aioesphomeapi/branch/main/graph/badge.svg\n   :target: https://app.codecov.io/gh/esphome/aioesphomeapi/tree/main\n\n``aioesphomeapi`` allows you to interact with devices flashed with `esphome <https://esphome.io/>`_.\n\ninstallation\n------------\n\nthe module is available from the `python package index <https://pypi.python.org/pypi>`_.\n\n.. code:: bash\n\n    $ pip3 install aioesphomeapi\n\nan optional cython extension is available for better performance, and the module will try to build it automatically.\n\nthe extension requires a c compiler and python development headers. the module will fall back to the pure python implementation if they are unavailable.\n\nbuilding the extension can be forcefully disabled by setting the environment variable ``skip_cython`` to ``1``.\n\nusage\n-----\n\nit's required that you enable the `native api <https://esphome.io/components/api.html>`_ component for the device.\n\n.. code:: yaml\n\n   # example configuration entry\n   api:\n     password: 'mypassword'\n\ncheck the output to get the local address of the device or use the ``name:``under ``esphome:`` from the device configuration.\n\n.. code:: bash\n\n   [17:56:38][c][api:095]: api server:\n   [17:56:38][c][api:096]:   address: api_test.local:6053\n\n\nthe sample code below will connect to the device and retrieve details.\n\n.. code:: python\n\n   import aioesphomeapi\n   import asyncio\n\n   async def main():\n       \"\"\"connect to an esphome device and get details.\"\"\"\n\n       # establish connection\n       api = aioesphomeapi.apiclient(\"api_test.local\", 6053, \"mypassword\")\n       await api.connect(login=true)\n\n       # get api version of the device's firmware\n       print(api.api_version)\n\n       # show device details\n       device_info = await api.device_info()\n       print(device_info)\n\n       # list all entities of the device\n       entities = await api.list_entities_services()\n       print(entities)\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\nsubscribe to state changes of an esphome device.\n\n.. code:: python\n\n   import aioesphomeapi\n   import asyncio\n\n   async def main():\n       \"\"\"connect to an esphome device and wait for state changes.\"\"\"\n       cli = aioesphomeapi.apiclient(\"api_test.local\", 6053, \"mypassword\")\n\n       await cli.connect(login=true)\n\n       def change_callback(state):\n           \"\"\"print the state changes of the device..\"\"\"\n           print(state)\n\n       # subscribe to the state changes\n       await cli.subscribe_states(change_callback)\n\n   loop = asyncio.get_event_loop()\n   try:\n       asyncio.ensure_future(main())\n       loop.run_forever()\n   except keyboardinterrupt:\n       pass\n   finally:\n       loop.close()\n\nother examples:\n\n- `camera <https://gist.github.com/micw/202f9dee5c990f0b0f7e7c36b567d92b>`_\n- `async print <https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-print-async-py>`_\n- `simple print <https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-print-simple-py>`_\n- `influxdb <https://gist.github.com/fpletz/d071c72e45d17ba274fd61ca7a465033#file-esphome-sensor-influxdb-py>`_\n\ndevelopment\n-----------\n\nfor development is recommended to use a python virtual environment (``venv``).\n\n.. code:: bash\n\n    # setup virtualenv (optional)\n    $ python3 -m venv .\n    $ source bin/activate\n    # install aioesphomeapi and development depenencies\n    $ pip3 install -e .\n    $ pip3 install -r requirements_test.txt\n\n    # run linters & test\n    $ script/lint\n    # update protobuf _pb2.py definitions (requires a protobuf compiler installation)\n    $ script/gen-protoc\n\na cli tool is also available for watching logs:\n\n.. code:: bash\n\n   aioesphomeapi-logs --help\n\na cli tool is also available to discover devices:\n\n.. code:: bash\n\n   aioesphomeapi-discover\n\nlicense\n-------\n\n``aioesphomeapi`` is licensed under mit, for more details check license.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aioesphomeapi",
  "package_url": "https://pypi.org/project/aioesphomeapi/",
  "project_url": "https://pypi.org/project/aioesphomeapi/",
  "project_urls": {
    "Download": "https://github.com/esphome/aioesphomeapi/archive/21.0.1.zip",
    "Homepage": "https://esphome.io/"
  },
  "release_url": "https://pypi.org/project/aioesphomeapi/21.0.1/",
  "requires_dist": [
    "aiohappyeyeballs >=2.3.0",
    "protobuf >=3.19.0",
    "zeroconf <1.0,>=0.128.4",
    "chacha20poly1305-reuseable >=0.12.0",
    "noiseprotocol <1.0,>=0.3.1",
    "async-timeout >=4.0 ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.9",
  "summary": "python api for interacting with esphome devices.",
  "version": "21.0.1",
  "releases": [],
  "developers": [
    "esphome@nabucasa.com",
    "otto_winter"
  ],
  "kwds": "aioesphomeapi esphome device_info workflows workflow",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aioesphomeapi",
  "homepage": "https://esphome.io/",
  "release_count": 197,
  "dependency_ids": [
    "pypi_aiohappyeyeballs",
    "pypi_async_timeout",
    "pypi_chacha20poly1305_reuseable",
    "pypi_noiseprotocol",
    "pypi_protobuf",
    "pypi_zeroconf"
  ]
}
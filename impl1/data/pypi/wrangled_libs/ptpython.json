{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "ptpython\n========\n\n|build status|  |pypi|  |license|\n\n*a better python repl*\n\n::\n\n    pip install ptpython\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/example1.png\n\nptpython is an advanced python repl. it should work on all\npython versions from 2.6 up to 3.9 and work cross platform (linux,\nbsd, os x and windows).\n\nnote: this version of ptpython requires at least python 3.6. install ptpython\n2.0.5 for older python versions.\n\n\ninstallation\n************\n\ninstall it using pip:\n\n::\n\n    pip install ptpython\n\nstart it by typing ``ptpython``.\n\n\nfeatures\n********\n\n- syntax highlighting.\n- multiline editing (the up arrow works).\n- autocompletion.\n- mouse support. [1]\n- support for color schemes.\n- support for `bracketed paste <https://cirw.in/blog/bracketed-paste>`_ [2].\n- both vi and emacs key bindings.\n- support for double width (chinese) characters.\n- ... and many other things.\n\n\n[1] disabled by default. (enable in the menu.)\n\n[2] if the terminal supports it (most terminals do), this allows pasting\nwithout going into paste mode. it will keep the indentation.\n\ncommand line options\n********************\n\nthe help menu shows basic command-line options.\n\n::\n\n    $ ptpython --help\n    usage: ptpython [-h] [--vi] [-i] [--light-bg] [--dark-bg] [--config-file config_file]\n                    [--history-file history_file] [-v]\n                    [args ...]\n\n    ptpython: interactive python shell.\n\n    positional arguments:\n      args                  script and arguments\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --vi                  enable vi key bindings\n      -i, --interactive     start interactive shell after executing this file.\n      --asyncio             run an asyncio event loop to support top-level \"await\".\n      --light-bg            run on a light background (use dark colors for text).\n      --dark-bg             run on a dark background (use light colors for text).\n      --config-file config_file\n                            location of configuration file.\n      --history-file history_file\n                            location of history file.\n      -v, --version         show program's version number and exit\n\n    environment variables:\n      ptpython_config_home: a configuration directory to use\n      pythonstartup: file executed on interactive startup (no default)\n\n\n__pt_repr__: a nicer repr with colors\n*************************************\n\nwhen classes implement a ``__pt_repr__`` method, this will be used instead of\n``__repr__`` for printing. any `prompt_toolkit \"formatted text\"\n<https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html>`_\ncan be returned from here. in order to avoid writing a ``__repr__`` as well,\nthe ``ptpython.utils.ptrepr_to_repr`` decorator can be applied. for instance:\n\n.. code:: python\n\n    from ptpython.utils import ptrepr_to_repr\n    from prompt_toolkit.formatted_text import html\n\n    @ptrepr_to_repr\n    class myclass:\n        def __pt_repr__(self):\n            return html('<yellow>hello world!</yellow>')\n\nmore screenshots\n****************\n\nthe configuration menu:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-menu.png\n\nthe history page and its help:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ptpython-history-help.png\n\nautocompletion:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/file-completion.png\n\n\nembedding the repl\n******************\n\nembedding the repl in any python application is easy:\n\n.. code:: python\n\n    from ptpython.repl import embed\n    embed(globals(), locals())\n\nyou can make ptpython your default python repl by creating a `pythonstartup file\n<https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file>`_ containing code\nlike this:\n\n.. code:: python\n\n   import sys\n   try:\n       from ptpython.repl import embed\n   except importerror:\n       print(\"ptpython is not available: falling back to standard prompt\")\n   else:\n       sys.exit(embed(globals(), locals()))\n\nnote config file support currently only works when invoking `ptpython` directly.\nthat it, the config file will be ignored when embedding ptpython in an application.\n\nmultiline editing\n*****************\n\nmulti-line editing mode will automatically turn on when you press enter after a\ncolon.\n\nto execute the input in multi-line mode, you can either press ``alt+enter``, or\n``esc`` followed by ``enter``. (if you want the first to work in the os x\nterminal, you have to check the \"use option as meta key\" checkbox in your\nterminal settings. for iterm2, you have to check \"left option acts as +esc\" in\nthe options.)\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/multiline.png\n\n\nsyntax validation\n*****************\n\nbefore execution, ``ptpython`` will see whether the input is syntactically\ncorrect python code. if not, it will show a warning, and move the cursor to the\nerror.\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/validation.png\n\n\nasyncio repl and top level await\n********************************\n\nin order to get top-level ``await`` support, start ptpython as follows:\n\n.. code::\n\n   ptpython --asyncio\n\nthis will spawn an asyncio event loop and embed the async repl in the event\nloop. after this, top-level await will work and statements like ``await\nasyncio.sleep(10)`` will execute.\n\n\nadditional features\n*******************\n\nrunning system commands: press ``meta-!`` in emacs mode or just ``!`` in vi\nnavigation mode to see the \"shell command\" prompt. there you can enter system\ncommands without leaving the repl.\n\nselecting text: press ``control+space`` in emacs mode or ``v`` (major v) in vi\nnavigation mode.\n\n\nconfiguration\n*************\n\nit is possible to create a ``config.py`` file to customize configuration.\nptpython will look in an appropriate platform-specific directory via `appdirs\n<https://pypi.org/project/appdirs/>`. see the ``appdirs`` documentation for the\nprecise location for your platform. a ``ptpython_config_home`` environment\nvariable, if set, can also be used to explicitly override where configuration\nis looked for.\n\nhave a look at this example to see what is possible:\n`config.py <https://github.com/jonathanslenders/ptpython/blob/master/examples/ptpython_config/config.py>`_\n\nnote config file support currently only works when invoking `ptpython` directly.\nthat it, the config file will be ignored when embedding ptpython in an application.\n\n\nipython support\n***************\n\nrun ``ptipython`` (prompt_toolkit - ipython), to get a nice interactive shell\nwith all the power that ipython has to offer, like magic functions and shell\nintegration. make sure that ipython has been installed. (``pip install\nipython``)\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/ipython.png\n\nthis is also available for embedding:\n\n.. code:: python\n\n    from ptpython.ipython import embed\n    embed(globals(), locals())\n\n\ndjango support\n**************\n\n`django-extensions <https://github.com/django-extensions/django-extensions>`_\nhas a ``shell_plus`` management command. when ``ptpython`` has been installed,\nit will by default use ``ptpython`` or ``ptipython``.\n\n\npdb\n***\n\nthere is an experimental pdb replacement: `ptpdb\n<https://github.com/jonathanslenders/ptpdb>`_.\n\n\nwindows support\n***************\n\n``prompt_toolkit`` and ``ptpython`` works better on linux and os x than on\nwindows. some things might not work, but it is usable:\n\n.. image :: https://github.com/jonathanslenders/ptpython/raw/master/docs/images/windows.png\n\n\nfaq\n***\n\n**q**: the ``ctrl-s`` forward search doesn't work and freezes my terminal.\n\n**a**: try to run ``stty -ixon`` in your terminal to disable flow control.\n\n**q**: the ``meta``-key doesn't work.\n\n**a**: for some terminals you have to enable the alt-key to act as meta key, but you\ncan also type ``escape`` before any key instead.\n\n\nalternatives\n************\n\n- `bpython <http://bpython-interpreter.org/downloads.html>`_\n- `ipython <https://ipython.org/>`_\n\nif you find another alternative, you can create an issue and we'll list it\nhere. if you find a nice feature somewhere that is missing in ``ptpython``,\nalso create a github issue and maybe we'll implement it.\n\n\nspecial thanks to\n*****************\n\n- `pygments <http://pygments.org/>`_: syntax highlighter.\n- `jedi <http://jedi.jedidjah.ch/en/latest/>`_: autocompletion library.\n- `wcwidth <https://github.com/jquast/wcwidth>`_: determine columns needed for a wide characters.\n- `prompt_toolkit <http://github.com/jonathanslenders/python-prompt-toolkit>`_ for the interface.\n\n.. |build status| image:: https://api.travis-ci.org/prompt-toolkit/ptpython.svg?branch=master\n    :target: https://travis-ci.org/prompt-toolkit/ptpython#\n\n.. |license| image:: https://img.shields.io/github/license/prompt-toolkit/ptpython.svg\n    :target: https://github.com/prompt-toolkit/ptpython/blob/master/license\n\n.. |pypi| image:: https://pypip.in/version/ptpython/badge.svg\n    :target: https://pypi.python.org/pypi/ptpython/\n    :alt: latest version\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ptpython",
  "package_url": "https://pypi.org/project/ptpython/",
  "project_url": "https://pypi.org/project/ptpython/",
  "project_urls": {
    "Homepage": "https://github.com/prompt-toolkit/ptpython"
  },
  "release_url": "https://pypi.org/project/ptpython/3.0.25/",
  "requires_dist": [
    "appdirs",
    "jedi >=0.16.0",
    "prompt-toolkit <3.1.0,>=3.0.34",
    "pygments",
    "importlib-metadata ; python_version < \"3.8\"",
    "black ; extra == 'all'",
    "ipython ; extra == 'ptipython'"
  ],
  "requires_python": ">=3.7",
  "summary": "python repl build on top of prompt_toolkit",
  "version": "3.0.25",
  "releases": [],
  "developers": [
    "jonathan_slenders"
  ],
  "kwds": "ptpython ptpython_config ptpython_config_home ptipython bpython",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ptpython",
  "homepage": "https://github.com/prompt-toolkit/ptpython",
  "release_count": 72,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_black",
    "pypi_importlib_metadata",
    "pypi_ipython",
    "pypi_jedi",
    "pypi_prompt_toolkit",
    "pypi_pygments"
  ]
}
{
  "classifiers": [],
  "description": "\n`pyjanitor` is a python implementation of the r package [`janitor`][janitor], and\nprovides a clean api for cleaning data.\n\n[janitor]: https://github.com/sfirke/janitor\n\n## quick start\n\n- installation: `conda install -c conda-forge pyjanitor`. read more installation instructions [here](https://pyjanitor-devs.github.io/pyjanitor/#installation).\n- check out the collection of [general functions](https://pyjanitor-devs.github.io/pyjanitor/api/functions/).\n\n## why janitor?\n\noriginally a port of the r package,\n`pyjanitor` has evolved from a set of convenient data cleaning routines\ninto an experiment with the [`method chaining`][mc] paradigm.\n\n[mc]: https://towardsdatascience.com/the-unreasonable-effectiveness-of-method-chaining-in-pandas-15c2109e3c69\n\ndata preprocessing usually consists of a series of steps\nthat involve transforming raw data into an understandable/usable format.\nthese series of steps need to be run in a certain sequence to achieve success.\nwe take a base data file as the starting point,\nand perform actions on it,\nsuch as removing null/empty rows,\nreplacing them with other values,\nadding/renaming/removing columns of data,\nfiltering rows and others.\nmore formally, these steps along with their relationships\nand dependencies are commonly referred to as a directed acyclic graph (dag).\n\nthe `pandas` api has been invaluable for the python data science ecosystem,\nand implements method chaining of a subset of methods as part of the api.\nfor example, resetting indexes (`.reset_index()`),\ndropping null values (`.dropna()`), and more,\nare accomplished via the appropriate `pd.dataframe` method calls.\n\ninspired by the ease-of-use\nand expressiveness of the `dplyr` package\nof the r statistical language ecosystem,\nwe have evolved `pyjanitor` into a language\nfor expressing the data processing dag for `pandas` users.\n\n## installation\n\n`pyjanitor` is currently installable from pypi:\n\n```bash\npip install pyjanitor\n```\n\n`pyjanitor` also can be installed by the conda package manager:\n\n```bash\nconda install pyjanitor -c conda-forge\n```\n\n`pyjanitor` can be installed by the pipenv environment manager too. this requires enabling prerelease dependencies:\n\n```bash\npipenv install --pre pyjanitor\n```\n\n`pyjanitor` requires python 3.6+.\n\n## functionality\n\ncurrent functionality includes:\n\n- cleaning columns name (multi-indexes are possible!)\n- removing empty rows and columns\n- identifying duplicate entries\n- encoding columns as categorical\n- splitting your data into features and targets (for machine learning)\n- adding, removing, and renaming columns\n- coalesce multiple columns into a single column\n- date conversions (from matlab, excel, unix) to python datetime format\n- expand a single column that has delimited, categorical values\n  into dummy-encoded variables\n- concatenating and deconcatenating columns, based on a delimiter\n- syntactic sugar for filtering the dataframe based on queries on a column\n- experimental submodules for finance, biology, chemistry, engineering, and pyspark\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyjanitor",
  "package_url": "https://pypi.org/project/pyjanitor/",
  "project_url": "https://pypi.org/project/pyjanitor/",
  "project_urls": {
    "Homepage": "https://github.com/pyjanitor-devs/pyjanitor"
  },
  "release_url": "https://pypi.org/project/pyjanitor/0.26.0/",
  "requires_dist": [
    "natsort",
    "pandas-flavor",
    "multipledispatch",
    "scipy",
    "biopython ; extra == 'all'",
    "isort >=4.3.18 ; extra == 'all'",
    "mkdocs ; extra == 'all'",
    "mkdocstrings >=0.19.0 ; extra == 'all'",
    "hypothesis >=4.4.0 ; extra == 'all'",
    "pytest >=3.4.2 ; extra == 'all'",
    "tqdm ; extra == 'all'",
    "mkdocstrings-python ; extra == 'all'",
    "mkdocs-material ; extra == 'all'",
    "pyspark ; extra == 'all'",
    "black >=19.3b0 ; extra == 'all'",
    "darglint ; extra == 'all'",
    "unyt ; extra == 'all'",
    "py >=1.10.0 ; extra == 'all'",
    "pip-tools ; extra == 'all'",
    "pytest-xdist ; extra == 'all'",
    "flake8 ; extra == 'all'",
    "pytest-cov ; extra == 'all'",
    "pre-commit ; extra == 'all'",
    "ipython >7.31.1 ; extra == 'all'",
    "interrogate ; extra == 'all'",
    "pandas-vet ; extra == 'all'",
    "biopython ; extra == 'biology'",
    "tqdm ; extra == 'chemistry'",
    "pip-tools ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "isort >=4.3.18 ; extra == 'dev'",
    "black >=19.3b0 ; extra == 'dev'",
    "darglint ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mkdocs ; extra == 'docs'",
    "mkdocs-material ; extra == 'docs'",
    "mkdocstrings >=0.19.0 ; extra == 'docs'",
    "mkdocstrings-python ; extra == 'docs'",
    "ipython >7.31.1 ; extra == 'docs'",
    "biopython ; extra == 'docs'",
    "tqdm ; extra == 'docs'",
    "unyt ; extra == 'docs'",
    "pyspark ; extra == 'docs'",
    "unyt ; extra == 'engineering'",
    "pyspark ; extra == 'spark'",
    "pytest-cov ; extra == 'test'",
    "pytest-xdist ; extra == 'test'",
    "pytest >=3.4.2 ; extra == 'test'",
    "hypothesis >=4.4.0 ; extra == 'test'",
    "interrogate ; extra == 'test'",
    "pandas-vet ; extra == 'test'",
    "py >=1.10.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "tools for cleaning pandas dataframes",
  "version": "0.26.0",
  "releases": [],
  "developers": [
    "ericmajinglong@gmail.com",
    "pyjanitor_devs"
  ],
  "kwds": "pyjanitor janitor python pyspark cleaning",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyjanitor",
  "homepage": "https://github.com/pyjanitor-devs/pyjanitor",
  "release_count": 58,
  "dependency_ids": [
    "pypi_biopython",
    "pypi_black",
    "pypi_darglint",
    "pypi_flake8",
    "pypi_hypothesis",
    "pypi_interrogate",
    "pypi_ipython",
    "pypi_isort",
    "pypi_mkdocs",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings",
    "pypi_mkdocstrings_python",
    "pypi_multipledispatch",
    "pypi_natsort",
    "pypi_pandas_flavor",
    "pypi_pandas_vet",
    "pypi_pip_tools",
    "pypi_pre_commit",
    "pypi_py",
    "pypi_pyspark",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_scipy",
    "pypi_tqdm",
    "pypi_unyt"
  ]
}
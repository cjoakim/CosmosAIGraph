{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: linguistic"
  ],
  "description": "name parser\n===========\n\n|build status| |pypi| |pypi version| |documentation|\n\na simple python (3.2+ & 2.6+) module for parsing human names into their\nindividual components. \n\n* hn.title\n* hn.first\n* hn.middle\n* hn.last\n* hn.suffix\n* hn.nickname\n* hn.surnames *(middle + last)*\n* hn.initials *(first initial of each name part)*\n\nsupported name structures\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe supported name structure is generally \"title first middle last suffix\", where all pieces \nare optional. comma-separated format like \"last, first\" is also supported.\n\n1. title firstname \"nickname\" middle middle lastname suffix\n2. lastname [suffix], title firstname (nickname) middle middle[,] suffix [, suffix]\n3. title firstname m lastname [suffix], suffix [suffix] [, suffix]\n\ninstantiating the `humanname` class with a string splits on commas and then spaces, \nclassifying name parts based on placement in the string and matches against known name \npieces like titles and suffixes. \n\nit correctly handles some common conjunctions and special prefixes to last names\nlike \"del\". titles and conjunctions can be chained together to handle complex\ntitles like \"asst secretary of state\". it can also try to correct capitalization\nof names that are all upper- or lowercase names.\n\nit attempts the best guess that can be made with a simple, rule-based approach. \nits main use case is english and it is not likely to be useful for languages \nthat do not conform to the supported name structure. it's not perfect, but it \ngets you pretty far.\n\ninstallation\n------------\n\n::\n\n  pip install nameparser\n\nif you want to try out the latest code from github you can\ninstall with pip using the command below.\n\n``pip install -e git+git://github.com/derek73/python-nameparser.git#egg=nameparser``\n\nif you need to handle lists of names, check out\n`namesparser <https://github.com/gwu-libraries/namesparser>`_, a\ncompliment to this module that handles multiple names in a string.\n\n\nquick start example\n-------------------\n\n::\n\n    >>> from nameparser import humanname\n    >>> name = humanname(\"dr. juan q. xavier de la vega iii (doc vega)\")\n    >>> name \n    <humanname : [\n    \ttitle: 'dr.' \n    \tfirst: 'juan' \n    \tmiddle: 'q. xavier' \n    \tlast: 'de la vega' \n    \tsuffix: 'iii'\n    \tnickname: 'doc vega'\n    ]>\n    >>> name.last\n    'de la vega'\n    >>> name.as_dict()\n    {'last': 'de la vega', 'suffix': 'iii', 'title': 'dr.', 'middle': 'q. xavier', 'nickname': 'doc vega', 'first': 'juan'}\n    >>> str(name)\n    'dr. juan q. xavier de la vega iii (doc vega)'\n    >>> name.string_format = \"{first} {last}\"\n    >>> str(name)\n    'juan de la vega'\n\n\nthe parser does not attempt to correct mistakes in the input. it mostly just splits on white\nspace and puts things in buckets based on their position in the string. this also means\nthe difference between 'title' and 'suffix' is positional, not semantic. \"dr\" is a title\nwhen it comes before the name and a suffix when it comes after. (\"pre-nominal\"\nand \"post-nominal\" would probably be better names.)\n\n::\n\n    >>> name = humanname(\"1 & 2, 3 4 5, mr.\")\n    >>> name \n    <humanname : [\n    \ttitle: '' \n    \tfirst: '3' \n    \tmiddle: '4 5' \n    \tlast: '1 & 2' \n    \tsuffix: 'mr.'\n    \tnickname: ''\n    ]>\n\ncustomization\n-------------\n\nyour project may need some adjustment for your dataset. you can\ndo this in your own pre- or post-processing, by `customizing the configured pre-defined \nsets`_ of titles, prefixes, etc., or by subclassing the `humanname` class. see the \n`full documentation`_ for more information.\n\n\n`full documentation`_\n~~~~~~~~~~~~~~~~~~~~~\n\n.. _customizing the configured pre-defined sets: http://nameparser.readthedocs.org/en/latest/customize.html\n.. _full documentation: http://nameparser.readthedocs.org/en/latest/\n\n\ncontributing\n------------\n\nif you come across name piece that you think should be in the default config, you're\nprobably right. `start a new issue`_ and we can get them added. \n\nplease let me know if there are ways this library could be structured to make\nit easier for you to use in your projects. read contributing.md_ for more info\non running the tests and contributing to the project.\n\n**github project**\n\nhttps://github.com/derek73/python-nameparser\n\n.. _contributing.md: https://github.com/derek73/python-nameparser/tree/master/contributing.md\n.. _start a new issue: https://github.com/derek73/python-nameparser/issues\n.. _click here to propose changes to the titles: https://github.com/derek73/python-nameparser/edit/master/nameparser/config/titles.py\n\n.. |build status| image:: https://github.com/derek73/python-nameparser/actions/workflows/python-package.yml/badge.svg\n   :target: https://github.com/derek73/python-nameparser/actions/workflows/python-package.yml\n.. |pypi| image:: https://img.shields.io/pypi/v/nameparser.svg\n   :target: https://pypi.org/project/nameparser/\n.. |documentation| image:: https://readthedocs.org/projects/nameparser/badge/?version=latest\n   :target: http://nameparser.readthedocs.io/en/latest/?badge=latest\n.. |pypi version| image:: https://img.shields.io/pypi/pyversions/nameparser.svg\n   :target: https://pypi.org/project/nameparser/\n",
  "docs_url": null,
  "keywords": "names,parser",
  "license": "lgpl",
  "name": "nameparser",
  "package_url": "https://pypi.org/project/nameparser/",
  "project_url": "https://pypi.org/project/nameparser/",
  "project_urls": {
    "Homepage": "https://github.com/derek73/python-nameparser"
  },
  "release_url": "https://pypi.org/project/nameparser/1.1.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a simple python module for parsing human names into their individual components.",
  "version": "1.1.3",
  "releases": [],
  "developers": [
    "derek73@gmail.com",
    "derek_gulbranson"
  ],
  "kwds": "surnames nameparser namesparser firstname names",
  "license_kwds": "lgpl",
  "libtype": "pypi",
  "id": "pypi_nameparser",
  "homepage": "https://github.com/derek73/python-nameparser",
  "release_count": 51,
  "dependency_ids": []
}
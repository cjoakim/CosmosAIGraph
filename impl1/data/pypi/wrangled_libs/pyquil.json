{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "pyquil: quantum programming in python\n=====================================\n\n[![binder](https://mybinder.org/badge_logo.svg)][binder]\n[![docs][docs-badge]][docs-repo]\n[![docker][docker-badge]][docker-repo]\n[![pepy][pepy-badge]][pepy-repo]\n[![pypi][pypi-badge]][pypi-repo]\n[![slack][slack-badge]][slack-invite]\n\npyquil is a python library for quantum programming using [quil](https://arxiv.org/abs/1608.03355),\nthe quantum instruction language developed at [rigetti computing](https://www.rigetti.com/).\npyquil serves three main functions:\n\n- easily generating quil programs from quantum gates and classical operations\n- compiling and simulating quil programs using the [quil compiler](https://github.com/rigetti/quilc)\n  (quilc) and the [quantum virtual machine](https://github.com/rigetti/qvm) (qvm)\n- executing quil programs on real quantum processors (qpus) using\n  [quantum cloud services][qcs-paper] (qcs)\n\npyquil has a ton of other features, which you can learn more about in the\n[docs](http://pyquil.readthedocs.io/en/latest/). however, you can also keep reading\nbelow to get started with running your first quantum program!\n\nquickstart with interactive tutorial notebooks\n----------------------------------------------\n\nwithout installing anything, you can quickly get started with quantum programming by exploring\nour interactive [jupyter][jupyter] notebook tutorials and examples. to run them in a preconfigured\nexecution environment on [binder][mybinder], click the \"launch binder\" badge at the top of the\nreadme or the link [here][binder]! to learn more about the tutorials and how you can add your own,\nvisit the [rigetti/forest-tutorials][forest-tutorials] repository. if you'd rather set everything\nup locally, or are interested in contributing to pyquil, continue onto the next section for\ninstructions on installing pyquil and the forest sdk.\n\ninstalling pyquil and the forest sdk\n------------------------------------\n\n[![pypi][pypi-badge]][pypi-repo]\n[![conda-forge][conda-forge-badge]][conda-forge-badge]\n[![conda-rigetti][conda-rigetti-badge]][conda-rigetti-repo]\n\npyquil can be installed using `conda`, `pip`, or from source. to install it from pypi (via `pip`),\ndo the following:\n\n```bash\npip install pyquil\n```\n\nto instead install pyquil from source, do the following from within the repository after cloning it:\n\n```bash\npip install -e .\n```\n\nif you choose to use `pip`, we highly recommend installing pyquil within a virtual environment.\n\npyquil, along with quilc, the qvm, and other libraries, make up what is called the forest\nsdk. to make full use of pyquil, you will need to additionally have installed\n[quilc](https://github.com/quil-lang/quilc) and the [qvm](https://github.com/quil-lang/qvm).\nfor more information, check out the docs!\n\nrunning your first quantum program\n----------------------------------\n\nin just a few lines, we can use pyquil with the forest sdk to simulate a bell state!\n\n```python\nfrom pyquil import get_qc, program\nfrom pyquil.gates import cnot, h, measure\n \nqvm = get_qc('2q-qvm')\n \np = program()\np += h(0)\np += cnot(0, 1)\nro = p.declare('ro', 'bit', 2)\np += measure(0, ro[0])\np += measure(1, ro[1])\np.wrap_in_numshots_loop(10)\n\nqvm.run(p).get_register_map()['ro'].tolist()\n```\n\nthe output of the above program should look something like the following,\nthe statistics of which are consistent with a two-qubit entangled state.\n\n```\n[[0, 0],\n [1, 1],\n [1, 1],\n [1, 1],\n [1, 1],\n [0, 0],\n [0, 0],\n [1, 1],\n [0, 0],\n [0, 0]]\n```\n\nusing the forest sdk, you can simulate the operation of a real quantum processor (qpu). if you\nwould like to run on the real qpus in our lab in berkeley, you can sign up for an account\non [quantum cloud services][qcs-request-access] (qcs)!\n\njoining the forest community\n----------------------------\n\nif you'd like to get involved with pyquil and forest, joining the\n[rigetti forest slack workspace][slack-invite] is a great place to start! you can do so by\nclicking the invite link in the previous sentence, or in the badge at the top of this readme.\nthe slack workspace is a great place to ask general questions, join high-level design discussions,\nand hear about updates to pyquil and the forest sdk.\n\nto go a step further and start contributing to the development of pyquil, good first steps are\n[reporting a bug][bug], [requesting a feature][feature], or picking up one of the issues with the\n[good first issue][first] or [help wanted][help] labels. once you find an issue to work\non, make sure to [fork this repository][fork] and then [open a pull request][pr] once your changes\nare ready. for more information on all the ways you can contribute to pyquil (along with\nsome helpful tips for developers and maintainers) check out our\n[contributing guide](contributing.md)!\n\nto see what people have contributed in the past, check out the [changelog](changelog.md) for\na detailed list of all announcements, improvements, changes, and bugfixes. the\n[releases](https://github.com/rigetti/pyquil/releases) page for pyquil contains similar\ninformation, but with links to the pull request for each change and its corresponding author.\nthanks for contributing to pyquil! \ud83d\ude42\n\nciting pyquil, forest, and quantum cloud services\n-------------------------------------------------\n\n[![zenodo][zenodo-badge]][zenodo-doi]\n\nif you use pyquil, grove, or other parts of the forest sdk in your research, please cite\nthe [quil specification][quil-paper] using the following bibtex snippet:\n\n```bibtex\n@misc{smith2016practical,\n    title={a practical quantum instruction set architecture},\n    author={robert s. smith and michael j. curtis and william j. zeng},\n    year={2016},\n    eprint={1608.03355},\n    archiveprefix={arxiv},\n    primaryclass={quant-ph}\n}\n```\n\nadditionally, if your research involves taking data on rigetti quantum processors (qpus) via\nthe quantum cloud services (qcs) platform, please reference the [qcs paper][qcs-paper] using the\nfollowing bibtex snippet:\n\n```bibtex\n@article{karalekas_2020,\n    title = {a quantum-classical cloud platform optimized for variational hybrid algorithms},\n    author = {peter j karalekas and nikolas a tezak and eric c peterson\n              and colm a ryan and marcus p da silva and robert s smith},\n    year = 2020,\n    month = {apr},\n    publisher = {{iop} publishing},\n    journal = {quantum science and technology},\n    volume = {5},\n    number = {2},\n    pages = {024003},\n    doi = {10.1088/2058-9565/ab7559},\n    url = {https://doi.org/10.1088%2f2058-9565%2fab7559},\n}\n```\n\nthe preprint of the qcs paper is available on [arxiv][qcs-arxiv], and the supplementary\ninteractive notebooks and datasets for the paper can be found in the [rigetti/qcs-paper][qcs-repo]\nrepository.\n\nlicense\n-------\n\npyquil is licensed under the\n[apache license 2.0](https://github.com/rigetti/pyquil/blob/master/license).\n\n[binder]: https://mybinder.org/v2/gh/rigetti/forest-tutorials/master?urlpath=lab/tree/welcome.ipynb\n[conda-forge-badge]: https://img.shields.io/conda/vn/conda-forge/pyquil.svg\n[conda-forge-repo]: https://anaconda.org/conda-forge/pyquil\n[conda-rigetti-badge]: https://img.shields.io/conda/vn/rigetti/pyquil?label=conda-rigetti\n[conda-rigetti-repo]: https://anaconda.org/rigetti/pyquil\n[docker-badge]: https://img.shields.io/docker/pulls/rigetti/forest\n[docker-repo]: https://hub.docker.com/r/rigetti/forest\n[docs-badge]: https://readthedocs.org/projects/pyquil/badge/?version=latest\n[docs-repo]: http://pyquil.readthedocs.io/en/latest/?badge=latest\n[forest-tutorials]: https://github.com/rigetti/forest-tutorials\n[jupyter]: https://jupyter.org/\n[mybinder]: https://mybinder.org\n[pepy-badge]: https://pepy.tech/badge/pyquil\n[pepy-repo]: https://pepy.tech/project/pyquil\n[pypi-badge]: https://img.shields.io/pypi/v/pyquil.svg\n[pypi-repo]: https://pypi.org/project/pyquil/\n[qcs-request-access]: https://qcs.rigetti.com/request-access\n[slack-badge]: https://img.shields.io/badge/slack-rigetti--forest-812f82.svg?\n[zenodo-badge]: https://zenodo.org/badge/doi/10.5281/zenodo.3553165.svg\n[zenodo-doi]: https://doi.org/10.5281/zenodo.3553165\n\n[qcs-arxiv]: https://arxiv.org/abs/2001.04449\n[qcs-paper]: https://dx.doi.org/10.1088/2058-9565/ab7559\n[qcs-repo]: https://github.com/rigetti/qcs-paper\n[quil-paper]: https://arxiv.org/abs/1608.03355\n\n[bug]: https://github.com/rigetti/pyquil/issues/new?assignees=&labels=bug+%3abug%3a&template=bug_report.md&title=\n[feature]: https://github.com/rigetti/pyquil/issues/new?assignees=&labels=enhancement+%3asparkles%3a&template=feature_request.md&title=\n[first]: https://github.com/rigetti/pyquil/labels/good%20first%20issue%20%3ababy%3a\n[help]: https://github.com/rigetti/pyquil/labels/help%20wanted%20%3awave%3a\n[fork]: https://github.com/rigetti/pyquil/fork\n[pr]: https://github.com/rigetti/pyquil/compare\n[slack-invite]: https://join.slack.com/t/rigetti-forest/shared_invite/enqtntuynte1odg3mze2lwqwnzblmjzlmmnln2m5mzqyzdlmogviodq5odi0nwmwnmyzody4ytc2zjdjotnmnzhiytk2yjvhnte2ntrkody\n",
  "docs_url": null,
  "keywords": "quantum,quil,programming,hybrid",
  "license": "apache-2.0",
  "name": "pyquil",
  "package_url": "https://pypi.org/project/pyquil/",
  "project_url": "https://pypi.org/project/pyquil/",
  "project_urls": {
    "Documentation": "https://pyquil-docs.rigetti.com",
    "Homepage": "https://github.com/rigetti/pyquil.git",
    "Repository": "https://github.com/rigetti/pyquil.git"
  },
  "release_url": "https://pypi.org/project/pyquil/4.4.0/",
  "requires_dist": [
    "numpy (>=1.22,<2.0)",
    "scipy (>=1.7.3,<2.0.0)",
    "lark (>=0.11.1,<0.12.0)",
    "rpcq (>=3.10.0,<4.0.0)",
    "pydantic (>=1.10.7,<2.0.0)",
    "networkx (>=2.5)",
    "importlib-metadata (>=3.7.3,<5) ; python_version < \"3.8\"",
    "qcs-sdk-python (==0.16.0)",
    "tenacity (>=8.2.2,<9.0.0)",
    "types-python-dateutil (>=2.8.19,<3.0.0)",
    "types-retry (>=0.9.9,<0.10.0)",
    "packaging (>=23.1,<24.0)",
    "ipython (>=7.21.0,<8.0.0) ; extra == \"latex\"",
    "Sphinx (>=7.1.2,<8.0.0) ; extra == \"docs\"",
    "sphinx-rtd-theme (>=1.3.0,<2.0.0) ; extra == \"docs\"",
    "nbsphinx (>=0.9.1,<0.10.0) ; extra == \"docs\"",
    "recommonmark (>=0.7.1,<0.8.0) ; extra == \"docs\"",
    "pandoc (==2.4b0) ; extra == \"docs\"",
    "matplotlib (>=3.7.1,<4.0.0) ; extra == \"docs\"",
    "matplotlib-inline (>=0.1.6,<0.2.0)",
    "seaborn (>=0.12.2,<0.13.0) ; extra == \"docs\"",
    "deprecated (>=1.2.13,<2.0.0)",
    "types-deprecated (>=1.2.9.2,<2.0.0.0)"
  ],
  "requires_python": ">=3.8,<=3.12",
  "summary": "a python library for creating quantum instruction language (quil) programs.",
  "version": "4.4.0",
  "releases": [],
  "developers": [
    "rigetti_computing",
    "softapps@rigetti.com"
  ],
  "kwds": "pyquil get_qc quantum qubit quil",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_pyquil",
  "homepage": "https://github.com/rigetti/pyquil.git",
  "release_count": 208,
  "dependency_ids": [
    "pypi_deprecated",
    "pypi_importlib_metadata",
    "pypi_ipython",
    "pypi_lark",
    "pypi_matplotlib",
    "pypi_matplotlib_inline",
    "pypi_nbsphinx",
    "pypi_networkx",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandoc",
    "pypi_pydantic",
    "pypi_qcs_sdk_python",
    "pypi_recommonmark",
    "pypi_rpcq",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_tenacity",
    "pypi_types_deprecated",
    "pypi_types_python_dateutil",
    "pypi_types_retry"
  ]
}
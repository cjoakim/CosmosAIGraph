{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "aiounittest\n===========\n\n|image0|_ |image1|_\n\n.. |image0| image:: https://api.travis-ci.com/kwarunek/aiounittest.svg?branch=master\n.. _image0: https://travis-ci.com/kwarunek/aiounittest\n\n.. |image1| image:: https://badge.fury.io/py/aiounittest.svg\n.. _image1: https://badge.fury.io/py/aiounittest\n\ninfo\n====\n\nthe `aiounittest` is a helper library to ease of your pain (and boilerplate), when writing a test of the asynchronous code (:code:`asyncio`). you can test:\n\n* synchronous code (same as the :code:`unittest.testcase`)\n* asynchronous code, it supports syntax with :code:`async`/:code:`await` (python 3.5+) and :code:`asyncio.coroutine`/:code:`yield from` (python 3.4)\n\n\nin the python 3.8 (`release note <https://docs.python.org/3/whatsnew/3.8.html#unittest>`_) and newer consider to use the `unittest.isolatedasynciotestcase <https://docs.python.org/3/library/unittest.html#unittest.isolatedasynciotestcase>`_. builtin :code:`unittest` module is now asyncio-featured.\n\n\ninstallation\n============\n\nuse pip:\n\n::\n\n    pip install aiounittest\n\n\nusage\n=====\n\nit's as simple as use of :code:`unittest.testcase`. full docs at http://aiounittest.readthedocs.io.\n\n.. code-block:: python\n\n    import asyncio\n    import aiounittest\n\n\n    async def add(x, y):\n        await asyncio.sleep(0.1)\n        return x + y\n\n    class mytest(aiounittest.asynctestcase):\n\n        async def test_async_add(self):\n            ret = await add(5, 6)\n            self.assertequal(ret, 11)\n\n        # or 3.4 way\n        @asyncio.coroutine\n        def test_sleep(self):\n            ret = yield from add(5, 6)\n            self.assertequal(ret, 11)\n\n        # some regular test code\n        def test_something(self):\n            self.asserttrue(true)\n\nlibrary provides some additional tooling:\n\n* async_test_,\n* asyncmockiterator_ mocking for `async for`,\n* futurized_ mock for coroutines.\n\n.. _futurized: http://aiounittest.readthedocs.io/en/latest/futurized.html\n.. _async_test: http://aiounittest.readthedocs.io/en/latest/async_test.html\n.. _asyncmockiterator: http://aiounittest.readthedocs.io/en/latest/asyncmockiterator.html\n\nlicense\n=======\n\nmit\n\n\n",
  "docs_url": null,
  "keywords": "asyncio,async,unittest,coroutine",
  "license": "mit",
  "name": "aiounittest",
  "package_url": "https://pypi.org/project/aiounittest/",
  "project_url": "https://pypi.org/project/aiounittest/",
  "project_urls": {
    "Homepage": "https://github.com/kwarunek/aiounittest"
  },
  "release_url": "https://pypi.org/project/aiounittest/1.4.2/",
  "requires_dist": [
    "wrapt"
  ],
  "requires_python": "",
  "summary": "test asyncio code more easily.",
  "version": "1.4.2",
  "releases": [],
  "developers": [
    "krzysztof@warunek.net",
    "krzysztof_warunek"
  ],
  "kwds": "_async_test async_test_ async_test test_async_add async",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiounittest",
  "homepage": "https://github.com/kwarunek/aiounittest",
  "release_count": 9,
  "dependency_ids": [
    "pypi_wrapt"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# `pure_eval`\n\n[![build status](https://travis-ci.org/alexmojaki/pure_eval.svg?branch=master)](https://travis-ci.org/alexmojaki/pure_eval) [![coverage status](https://coveralls.io/repos/github/alexmojaki/pure_eval/badge.svg?branch=master)](https://coveralls.io/github/alexmojaki/pure_eval?branch=master) [![supports python versions 3.5+](https://img.shields.io/pypi/pyversions/pure_eval.svg)](https://pypi.python.org/pypi/pure_eval)\n\nthis is a python package that lets you safely evaluate certain ast nodes without triggering arbitrary code that may have unwanted side effects.\n\nit can be installed from pypi:\n\n    pip install pure_eval\n\nto demonstrate usage, suppose we have an object defined as follows:\n\n```python\nclass rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    @property\n    def area(self):\n        print(\"calculating area...\")\n        return self.width * self.height\n\n\nrect = rectangle(3, 5)\n```\n\ngiven the `rect` object, we want to evaluate whatever expressions we can in this source code:\n\n```python\nsource = \"(rect.width, rect.height, rect.area)\"\n```\n\nthis library works with the ast, so let's parse the source code and peek inside:\n\n```python\nimport ast\n\ntree = ast.parse(source)\nthe_tuple = tree.body[0].value\nfor node in the_tuple.elts:\n    print(ast.dump(node))\n```\n\noutput:\n\n```python\nattribute(value=name(id='rect', ctx=load()), attr='width', ctx=load())\nattribute(value=name(id='rect', ctx=load()), attr='height', ctx=load())\nattribute(value=name(id='rect', ctx=load()), attr='area', ctx=load())\n```\n\nnow to actually use the library. first construct an evaluator:\n\n```python\nfrom pure_eval import evaluator\n\nevaluator = evaluator({\"rect\": rect})\n```\n\nthe argument to `evaluator` should be a mapping from variable names to their values. or if you have access to the stack frame where `rect` is defined, you can instead use:\n\n```python\nevaluator = evaluator.from_frame(frame)\n```\n\nnow to evaluate some nodes, using `evaluator[node]`:\n\n```python\nprint(\"rect.width:\", evaluator[the_tuple.elts[0]])\nprint(\"rect:\", evaluator[the_tuple.elts[0].value])\n```\n\noutput:\n\n```\nrect.width: 3\nrect: <__main__.rectangle object at 0x105b0dd30>\n```\n\nok, but you could have done the same thing with `eval`. the useful part is that it will refuse to evaluate the property `rect.area` because that would trigger unknown code. if we try, it'll raise a `cannoteval` exception.\n\n```python\nfrom pure_eval import cannoteval\n\ntry:\n    print(\"rect.area:\", evaluator[the_tuple.elts[2]])  # fails\nexcept cannoteval as e:\n    print(e)  # prints cannoteval\n```\n\nto find all the expressions that can be evaluated in a tree:\n\n```python\nfor node, value in evaluator.find_expressions(tree):\n    print(ast.dump(node), value)\n```\n\noutput:\n\n```python\nattribute(value=name(id='rect', ctx=load()), attr='width', ctx=load()) 3\nattribute(value=name(id='rect', ctx=load()), attr='height', ctx=load()) 5\nname(id='rect', ctx=load()) <__main__.rectangle object at 0x105568d30>\nname(id='rect', ctx=load()) <__main__.rectangle object at 0x105568d30>\nname(id='rect', ctx=load()) <__main__.rectangle object at 0x105568d30>\n```\n\nnote that this includes `rect` three times, once for each appearance in the source code. since all these nodes are equivalent, we can group them together:\n\n```python\nfrom pure_eval import group_expressions\n\nfor nodes, values in group_expressions(evaluator.find_expressions(tree)):\n    print(len(nodes), \"nodes with value:\", values)\n```\n\noutput:\n\n```\n1 nodes with value: 3\n1 nodes with value: 5\n3 nodes with value: <__main__.rectangle object at 0x10d374d30>\n```\n\nif we want to list all the expressions in a tree, we may want to filter out certain expressions whose values are obvious. for example, suppose we have a function `foo`:\n\n```python\ndef foo():\n    pass\n```\n\nif we refer to `foo` by its name as usual, then that's not interesting:\n\n```python\nfrom pure_eval import is_expression_interesting\n\nnode = ast.parse('foo').body[0].value\nprint(ast.dump(node))\nprint(is_expression_interesting(node, foo))\n```\n\noutput:\n\n```python\nname(id='foo', ctx=load())\nfalse\n```\n\nbut if we refer to it by a different name, then it's interesting:\n\n```python\nnode = ast.parse('bar').body[0].value\nprint(ast.dump(node))\nprint(is_expression_interesting(node, foo))\n```\n\noutput:\n\n```python\nname(id='bar', ctx=load())\ntrue\n```\n\nin general `is_expression_interesting` returns false for the following values:\n- literals (e.g. `123`, `'abc'`, `[1, 2, 3]`, `{'a': (), 'b': ([1, 2], [3])}`)\n- variables or attributes whose name is equal to the value's `__name__`, such as `foo` above or `self.foo` if it was a method.\n- builtins (e.g. `len`) referred to by their usual name.\n\nto make things easier, you can combine finding expressions, grouping them, and filtering out the obvious ones with:\n\n```python\nevaluator.interesting_expressions_grouped(root)\n```\n\nto get the source code of an ast node, i recommend [asttokens](https://github.com/gristlabs/asttokens).\n\nhere's a complete example that brings it all together:\n\n```python\nfrom asttokens import asttokens\nfrom pure_eval import evaluator\n\nsource = \"\"\"\nx = 1\nd = {x: 2}\ny = d[x]\n\"\"\"\n\nnames = {}\nexec(source, names)\natok = asttokens(source, parse=true)\nfor nodes, value in evaluator(names).interesting_expressions_grouped(atok.tree):\n    print(atok.get_text(nodes[0]), \"=\", value)\n```\n\noutput:\n\n```python\nx = 1\nd = {1: 2}\ny = 2\nd[x] = 2\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pure-eval",
  "package_url": "https://pypi.org/project/pure-eval/",
  "project_url": "https://pypi.org/project/pure-eval/",
  "project_urls": {
    "Homepage": "http://github.com/alexmojaki/pure_eval"
  },
  "release_url": "https://pypi.org/project/pure-eval/0.2.2/",
  "requires_dist": [
    "pytest ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "safely evaluate ast nodes without side effects",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "alex.mojaki@gmail.com",
    "alex_hall"
  ],
  "kwds": "pure_eval eval evaluated pyversions evaluator",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pure_eval",
  "homepage": "http://github.com/alexmojaki/pure_eval",
  "release_count": 8,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
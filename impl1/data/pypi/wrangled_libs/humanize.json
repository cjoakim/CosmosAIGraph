{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: text processing",
    "topic :: text processing :: general"
  ],
  "description": "# humanize\n\n[![pypi version](https://img.shields.io/pypi/v/humanize.svg?logo=pypi&logocolor=ffe873)](https://pypi.org/project/humanize/)\n[![supported python versions](https://img.shields.io/pypi/pyversions/humanize.svg?logo=python&logocolor=ffe873)](https://pypi.org/project/humanize/)\n[![documentation status](https://readthedocs.org/projects/python-humanize/badge/?version=latest)](https://humanize.readthedocs.io/en/latest/?badge=latest)\n[![pypi downloads](https://img.shields.io/pypi/dm/humanize.svg)](https://pypistats.org/packages/humanize)\n[![github actions status](https://github.com/python-humanize/humanize/workflows/test/badge.svg)](https://github.com/python-humanize/humanize/actions)\n[![codecov](https://codecov.io/gh/python-humanize/humanize/branch/main/graph/badge.svg)](https://codecov.io/gh/python-humanize/humanize)\n[![mit license](https://img.shields.io/github/license/python-humanize/humanize.svg)](licence)\n[![tidelift](https://tidelift.com/badges/package/pypi/humanize)](https://tidelift.com/subscription/pkg/pypi-humanize?utm_source=pypi-humanize&utm_medium=badge)\n\nthis modest package contains various common humanization utilities, like turning a\nnumber into a fuzzy human-readable duration (\"3 minutes ago\") or into a human-readable\nsize or throughput. it is localized to:\n\n- arabic\n- basque\n- bengali\n- brazilian portuguese\n- catalan\n- danish\n- dutch\n- esperanto\n- european portuguese\n- finnish\n- french\n- german\n- greek\n- hebrew\n- indonesian\n- italian\n- japanese\n- klingon\n- korean\n- norwegian\n- persian\n- polish\n- russian\n- simplified chinese\n- slovak\n- slovenian\n- spanish\n- swedish\n- turkish\n- ukrainian\n- vietnamese\n\n## api reference\n\n[https://humanize.readthedocs.io](https://humanize.readthedocs.io/)\n\n<!-- usage-start -->\n\n## installation\n\n### from pypi\n\n```bash\npython3 -m pip install --upgrade humanize\n```\n\n### from source\n\n```bash\ngit clone https://github.com/python-humanize/humanize\ncd humanize\npython3 -m pip install -e .\n```\n\n## usage\n\n### integer humanization\n\n```pycon\n>>> import humanize\n>>> humanize.intcomma(12345)\n'12,345'\n>>> humanize.intword(123455913)\n'123.5 million'\n>>> humanize.intword(12345591313)\n'12.3 billion'\n>>> humanize.apnumber(4)\n'four'\n>>> humanize.apnumber(41)\n'41'\n```\n\n### date & time humanization\n\n```pycon\n>>> import humanize\n>>> import datetime as dt\n>>> humanize.naturalday(dt.datetime.now())\n'today'\n>>> humanize.naturaldelta(dt.timedelta(seconds=1001))\n'16 minutes'\n>>> humanize.naturalday(dt.datetime.now() - dt.timedelta(days=1))\n'yesterday'\n>>> humanize.naturalday(dt.date(2007, 6, 5))\n'jun 05'\n>>> humanize.naturaldate(dt.date(2007, 6, 5))\n'jun 05 2007'\n>>> humanize.naturaltime(dt.datetime.now() - dt.timedelta(seconds=1))\n'a second ago'\n>>> humanize.naturaltime(dt.datetime.now() - dt.timedelta(seconds=3600))\n'an hour ago'\n```\n\n### precise time delta\n\n```pycon\n>>> import humanize\n>>> import datetime as dt\n>>> delta = dt.timedelta(seconds=3633, days=2, microseconds=123000)\n>>> humanize.precisedelta(delta)\n'2 days, 1 hour and 33.12 seconds'\n>>> humanize.precisedelta(delta, minimum_unit=\"microseconds\")\n'2 days, 1 hour, 33 seconds and 123 milliseconds'\n>>> humanize.precisedelta(delta, suppress=[\"days\"], format=\"%0.4f\")\n'49 hours and 33.1230 seconds'\n```\n\n#### smaller units\n\nif seconds are too large, set `minimum_unit` to milliseconds or microseconds:\n\n```pycon\n>>> import humanize\n>>> import datetime as dt\n>>> humanize.naturaldelta(dt.timedelta(seconds=2))\n'2 seconds'\n```\n\n```pycon\n>>> delta = dt.timedelta(milliseconds=4)\n>>> humanize.naturaldelta(delta)\n'a moment'\n>>> humanize.naturaldelta(delta, minimum_unit=\"milliseconds\")\n'4 milliseconds'\n>>> humanize.naturaldelta(delta, minimum_unit=\"microseconds\")\n'4 milliseconds'\n```\n\n```pycon\n>>> humanize.naturaltime(delta)\n'now'\n>>> humanize.naturaltime(delta, minimum_unit=\"milliseconds\")\n'4 milliseconds ago'\n>>> humanize.naturaltime(delta, minimum_unit=\"microseconds\")\n'4 milliseconds ago'\n```\n\n### file size humanization\n\n```pycon\n>>> import humanize\n>>> humanize.naturalsize(1_000_000)\n'1.0 mb'\n>>> humanize.naturalsize(1_000_000, binary=true)\n'976.6 kib'\n>>> humanize.naturalsize(1_000_000, gnu=true)\n'976.6k'\n```\n\n### human-readable floating point numbers\n\n```pycon\n>>> import humanize\n>>> humanize.fractional(1/3)\n'1/3'\n>>> humanize.fractional(1.5)\n'1 1/2'\n>>> humanize.fractional(0.3)\n'3/10'\n>>> humanize.fractional(0.333)\n'333/1000'\n>>> humanize.fractional(1)\n'1'\n```\n\n### scientific notation\n\n```pycon\n>>> import humanize\n>>> humanize.scientific(0.3)\n'3.00 x 10\u207b\u00b9'\n>>> humanize.scientific(500)\n'5.00 x 10\u00b2'\n>>> humanize.scientific(\"20000\")\n'2.00 x 10\u2074'\n>>> humanize.scientific(1**10)\n'1.00 x 10\u2070'\n>>> humanize.scientific(1**10, precision=1)\n'1.0 x 10\u2070'\n>>> humanize.scientific(1**10, precision=0)\n'1 x 10\u2070'\n```\n\n## localization\n\nhow to change locale at runtime:\n\n```pycon\n>>> import humanize\n>>> import datetime as dt\n>>> humanize.naturaltime(dt.timedelta(seconds=3))\n'3 seconds ago'\n>>> _t = humanize.i18n.activate(\"ru_ru\")\n>>> humanize.naturaltime(dt.timedelta(seconds=3))\n'3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u043d\u0430\u0437\u0430\u0434'\n>>> humanize.i18n.deactivate()\n>>> humanize.naturaltime(dt.timedelta(seconds=3))\n'3 seconds ago'\n```\n\nyou can pass additional parameter `path` to `activate` to specify a path to search\nlocales in.\n\n```pycon\n>>> import humanize\n>>> humanize.i18n.activate(\"xx_xx\")\n<...>\nfilenotfounderror: [errno 2] no translation file found for domain: 'humanize'\n>>> humanize.i18n.activate(\"pt_br\", path=\"path/to/my/own/translation/\")\n<gettext.gnutranslations instance ...>\n```\n\n<!-- usage-end -->\n\nhow to add new phrases to existing locale files:\n\n```sh\nxgettext --from-code=utf-8 -o humanize.pot -k'_' -k'n_' -k'p_:1c,2' -k'ns_:1,2' -k'_ngettext:1,2' -l python src/humanize/*.py  # extract new phrases\nmsgmerge -u src/humanize/locale/ru_ru/lc_messages/humanize.po humanize.pot # add them to locale files\n```\n\nhow to add a new locale:\n\n```sh\nmsginit -i humanize.pot -o humanize/locale/<locale name>/lc_messages/humanize.po --locale <locale name>\n```\n\nwhere `<locale name>` is a locale abbreviation, eg. `en_gb`, `pt_br` or just `ru`, `fr`\netc.\n\nlist the language at the top of this readme.\n",
  "docs_url": null,
  "keywords": "humanize time size",
  "license": "mit",
  "name": "humanize",
  "package_url": "https://pypi.org/project/humanize/",
  "project_url": "https://pypi.org/project/humanize/",
  "project_urls": {
    "Documentation": "https://humanize.readthedocs.io/",
    "Funding": "https://tidelift.com/subscription/pkg/pypi-humanize?utm_source=pypi-humanize&utm_medium=pypi",
    "Homepage": "https://github.com/python-humanize/humanize",
    "Issue tracker": "https://github.com/python-humanize/humanize/issues",
    "Release notes": "https://github.com/python-humanize/humanize/releases",
    "Source": "https://github.com/python-humanize/humanize"
  },
  "release_url": "https://pypi.org/project/humanize/4.9.0/",
  "requires_dist": [
    "freezegun; extra == 'tests'",
    "pytest; extra == 'tests'",
    "pytest-cov; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "python humanize utilities",
  "version": "4.9.0",
  "releases": [],
  "developers": [
    "hugo_van_kemenade",
    "jmoiron@jmoiron.net"
  ],
  "kwds": "pypi humanize humanization pyversions py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_humanize",
  "homepage": "",
  "release_count": 48,
  "dependency_ids": [
    "pypi_freezegun",
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
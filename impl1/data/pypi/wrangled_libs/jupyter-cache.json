{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: sphinx :: extension",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# jupyter-cache\n\n[![github-ci][github-ci]][github-link]\n[![coverage status][codecov-badge]][codecov-link]\n[![documentation status][rtd-badge]][rtd-link]\n[![code style: black][black-badge]][black-link]\n[![pypi][pypi-badge]][pypi-link]\n\na defined interface for working with a cache of jupyter notebooks.\n\n## why use jupyter-cache?\n\nif you have a number of notebooks whose execution outputs you want to ensure are kept up to date, without having to re-execute them every time (particularly for long running code, or text-based formats that do not store the outputs).\n\nthe notebooks must have deterministic execution outputs:\n\n- you use the same environment to run them (e.g. the same installed packages)\n- they run no non-deterministic code (e.g. random numbers)\n- they do not depend on external resources (e.g. files or network connections) that change over time\n\nfor example, it is utilised by [jupyter-book](https://jupyterbook.org/content/execute.html#caching-the-notebook-execution), to allow for fast document re-builds.\n\n## install\n\n```bash\npip install jupyter-cache\n```\n\nfor development:\n\n```bash\ngit clone https://github.com/executablebooks/jupyter-cache\ncd jupyter-cache\ngit checkout develop\npip install -e .[cli,code_style,testing]\n```\n\nsee the documentation for usage.\n\n## development\n\nsome desired requirements (not yet all implemented):\n\n- persistent\n- separates out \"edits to content\" from \"edits to code cells\". cell\n  rearranges and code cell changes should require a re-execution. content changes should not.\n- allow parallel access to notebooks (for execution)\n- store execution statistics/reports\n- store external assets: notebooks being executed often require external assets: importing scripts/data/etc. these are prepared by the users.\n- store execution artefacts: created during execution\n- a transparent and robust cache invalidation: imagine the user updating an external dependency or a python module, or checking out a different git branch.\n\n## contributing\n\njupyter-cache follows the [executable book contribution guide](https://executablebooks.org/en/latest/contributing.html). we'd love your help!\n\n### code style\n\ncode style is tested using [flake8](http://flake8.pycqa.org),\nwith the configuration set in `.flake8`,\nand code formatted with [black](https://github.com/ambv/black).\n\ninstalling with `jupyter-cache[code_style]` makes the [pre-commit](https://pre-commit.com/)\npackage available, which will ensure this style is met before commits are submitted, by reformatting the code\nand testing for lint errors.\nit can be setup by:\n\n```shell\n>> cd jupyter-cache\n>> pre-commit install\n```\n\noptionally you can run `black` and `flake8` separately:\n\n```shell\n>> black .\n>> flake8 .\n```\n\neditors like vs code also have automatic code reformat utilities, which can adhere to this standard.\n\n[github-ci]: https://github.com/executablebooks/jupyter-cache/workflows/continuous-integration/badge.svg?branch=master\n[github-link]: https://github.com/executablebooks/jupyter-cache\n[codecov-badge]: https://codecov.io/gh/executablebooks/jupyter-cache/branch/master/graph/badge.svg\n[codecov-link]: https://codecov.io/gh/executablebooks/jupyter-cache\n[rtd-badge]: https://readthedocs.org/projects/jupyter-cache/badge/?version=latest\n[rtd-link]: https://jupyter-cache.readthedocs.io/en/latest/?badge=latest\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[pypi-badge]: https://img.shields.io/pypi/v/jupyter-cache.svg\n[pypi-link]: https://pypi.org/project/jupyter-cache\n[black-link]: https://github.com/ambv/black\n",
  "docs_url": null,
  "keywords": "sphinx extension material design web components",
  "license": "",
  "name": "jupyter-cache",
  "package_url": "https://pypi.org/project/jupyter-cache/",
  "project_url": "https://pypi.org/project/jupyter-cache/",
  "project_urls": {
    "Documentation": "https://jupyter-cache.readthedocs.io",
    "Homepage": "https://github.com/executablebooks/jupyter-cache"
  },
  "release_url": "https://pypi.org/project/jupyter-cache/1.0.0/",
  "requires_dist": [
    "attrs",
    "click",
    "importlib-metadata",
    "nbclient>=0.2",
    "nbformat",
    "pyyaml",
    "sqlalchemy>=1.3.12,<3",
    "tabulate",
    "click-log ; extra == \"cli\"",
    "pre-commit>=2.12 ; extra == \"code_style\"",
    "nbdime ; extra == \"rtd\"",
    "ipykernel ; extra == \"rtd\"",
    "jupytext ; extra == \"rtd\"",
    "myst-nb ; extra == \"rtd\"",
    "sphinx-book-theme ; extra == \"rtd\"",
    "sphinx-copybutton ; extra == \"rtd\"",
    "nbdime ; extra == \"testing\"",
    "coverage ; extra == \"testing\"",
    "ipykernel ; extra == \"testing\"",
    "jupytext ; extra == \"testing\"",
    "matplotlib ; extra == \"testing\"",
    "nbformat>=5.1 ; extra == \"testing\"",
    "numpy ; extra == \"testing\"",
    "pandas ; extra == \"testing\"",
    "pytest>=6,<8 ; extra == \"testing\"",
    "pytest-cov ; extra == \"testing\"",
    "pytest-regressions ; extra == \"testing\"",
    "sympy ; extra == \"testing\""
  ],
  "requires_python": ">=3.9",
  "summary": "a defined interface for working with a cache of jupyter notebooks.",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "chrisj_sewell@hotmail.com"
  ],
  "kwds": "sphinx cache jupyter jupyterbook caching",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jupyter_cache",
  "homepage": "",
  "release_count": 15,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_click",
    "pypi_click_log",
    "pypi_coverage",
    "pypi_importlib_metadata",
    "pypi_ipykernel",
    "pypi_jupytext",
    "pypi_matplotlib",
    "pypi_myst_nb",
    "pypi_nbclient",
    "pypi_nbdime",
    "pypi_nbformat",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_regressions",
    "pypi_pyyaml",
    "pypi_sphinx_book_theme",
    "pypi_sphinx_copybutton",
    "pypi_sqlalchemy",
    "pypi_sympy",
    "pypi_tabulate"
  ]
}
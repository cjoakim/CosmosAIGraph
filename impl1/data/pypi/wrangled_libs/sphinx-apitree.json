{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": "# sphinx-apitree\n\n[![unittests](https://github.com/conchylicultor/sphinx-apitree/actions/workflows/pytest_and_autopublish.yml/badge.svg)](https://github.com/conchylicultor/sphinx-apitree/actions/workflows/pytest_and_autopublish.yml)\n[![pypi version](https://badge.fury.io/py/sphinx-apitree.svg)](https://badge.fury.io/py/sphinx-apitree)\n\n\n`apitree` is a small library to generate a ready-to-use documentation with minimal friction!\n\n`apitree` takes care of everything, so you can only focus on the code.\n\n## usage\n\nin `docs/conf.py`, replace everything by:\n\n```python\nimport apitree\n\napitree.make_project(\n    # e.g. `import visu3d as v3d` -> {'v3d': 'visu3d'}\n    project_name={'alias': 'my_module'},\n    globals=globals(),\n)\n```\n\nthen to generate the doc:\n\n```sh\nsphinx-build -b html docs/ docs/_build\n```\n\nto add `api/my_module/index` somewhere in your toctree, like:\n\n```md\n..toctree:\n  :caption: api\n\n  api/my_module/index\n```\n\n## features\n\n* all included: single function call include the theme, the api generation,...\n* auto-generate the api tree:\n  * do not require `__all__` (smart detect of which symbols are documented)\n  * add expandable toc tree with all symbols\n* add links to `github`.\n* markdown (`.md`) / jupyter (`.ipynb`) support out of the box\n* auto-cross-references (just annotate markdown inline-code `my_symbol` and links are auto-added)\n* contrary to `autodoc` and `apitree`, it also document:\n  * type annotations (`union[]`, ...)\n  * attributes\n* ...\n\n## installation in a project\n\n1.  in `pyproject.toml`\n\n    ```toml\n    [project.optional-dependencies]\n    # installed through `pip install .[docs]`\n    docs = [\n        # install `apitree` with all extensions (sphinx, theme,...)\n        \"sphinx-apitree[ext]\",\n    ]\n    ```\n\n1.  in `.readthedocs.yaml`\n\n    ```yaml\n    sphinx:\n    configuration: docs/conf.py\n\n    python:\n    install:\n        - method: pip\n        path: .\n        extra_requirements:\n            - docs\n    ```\n\n## options\n\nby default, `apitree` tries to infer everything automatically. however there's sometimes\ntimes where the user want to overwrite the default choices.\n\n*   package vs module: by default, all `__init__.py` define the public api (imports documented), while\n    the modules (`module.py`) define the implementation (imports not documented).\n    you can explicitly mark a module as package, so it's import are documented, by adding in the\n    module definition:\n\n    ```python\n    __apitree__ = dict(\n        is_package=true,\n    )\n    ```\n\n## examples of projects using apitree\n\n* https://github.com/google-research/visu3d (https://visu3d.readthedocs.io/)\n* https://github.com/google-research/dataclass_array (https://dataclass-array.readthedocs.io/)\n* https://github.com/google-research/etils (https://etils.readthedocs.io/)\n* https://github.com/google-research/kauldron (https://kauldron.readthedocs.io/)\n\ngenerated with:\n\n```\necho start \\\n&& cd ../visu3d          && sphinx-build -b html docs/ docs/_build \\\n&& cd ../dataclass_array && sphinx-build -b html docs/ docs/_build \\\n&& cd ../etils           && sphinx-build -b html docs/ docs/_build \\\n&& cd ../kauldron        && sphinx-build -b html docs/ docs/_build \\\n&& echo finished\n```\n\n",
  "docs_url": null,
  "keywords": "sphinx,doc",
  "license": "",
  "name": "sphinx-apitree",
  "package_url": "https://pypi.org/project/sphinx-apitree/",
  "project_url": "https://pypi.org/project/sphinx-apitree/",
  "project_urls": {
    "homepage": "https://github.com/conchylicultor/sphinx-apitree",
    "repository": "https://github.com/conchylicultor/sphinx-apitree"
  },
  "release_url": "https://pypi.org/project/sphinx-apitree/1.5.3/",
  "requires_dist": [
    "etils[edc,enp,epath,epy,etree]",
    "typing_extensions",
    "pytest>=3.4 ; extra == \"dev\"",
    "pytest-xdist ; extra == \"dev\"",
    "pylint>=2.6.0 ; extra == \"dev\"",
    "pyink ; extra == \"dev\"",
    "sphinx-apitree[ext] ; extra == \"dev\"",
    "etils[ecolab] ; extra == \"dev\"",
    "sphinx ; extra == \"ext\"",
    "myst_nb ; extra == \"ext\"",
    "sphinx_book_theme ; extra == \"ext\""
  ],
  "requires_python": ">=3.10",
  "summary": "sphinx extension to auto-generate api tree.",
  "version": "1.5.3",
  "releases": [],
  "developers": [
    "etiennefg.pot@mail.com"
  ],
  "kwds": "__apitree__ sphinx apitree toctree documentation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_sphinx_apitree",
  "homepage": "",
  "release_count": 12,
  "dependency_ids": [
    "pypi_etils",
    "pypi_myst_nb",
    "pypi_pyink",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_sphinx",
    "pypi_sphinx_apitree",
    "pypi_sphinx_book_theme",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [],
  "description": "# grayskull\n-------------\n[![tests](https://github.com/conda/grayskull/actions/workflows/tests.yml/badge.svg)](https://github.com/conda/grayskull/actions/workflows/tests.yml) [![deployment (pypi)](https://github.com/conda/grayskull/actions/workflows/publish_pypi.yml/badge.svg)](https://github.com/conda/grayskull/actions/workflows/publish_pypi.yml)\n\n[![codecov](https://codecov.io/gh/conda/grayskull/branch/master/graph/badge.svg)](https://codecov.io/gh/conda/grayskull) [![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) ![](https://img.shields.io/badge/python-3.8+-blue.svg) ![](https://img.shields.io/github/license/conda/grayskull.svg) [![pypi version](https://badge.fury.io/py/grayskull.svg)](https://badge.fury.io/py/grayskull) [![conda version](https://img.shields.io/conda/vn/conda-forge/grayskull.svg)](https://anaconda.org/conda-forge/grayskull) [![gitter](https://badges.gitter.im/conda_grayskull/community.svg)](https://gitter.im/conda_grayskull/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n-------------\n<span align=\"center\">\n    <br>\n    <img src=\"https://static.wikia.nocookie.net/heman/images/3/33/grayskull.jpg\" align=\"center\" />\n    <br>\n    <i>\"skeleto<strike>n</strike>r's main goal is to conquer the mysterious fortress of castle grayskull, from which he-man draws his powers. if he succeeds, skeletor would be able to conquer not only eternia, but the whole universe.\"</i> </br>adapted from <a href=https://en.wikipedia.org/wiki/skeletor>wikipedia</a>. image credits: <a href=https://he-man.fandom.com>https://he-man.fandom.com</a>\n</span>\n\n\n-------------\n## introduction\n\ngrayskull is an automatic conda recipe generator. <br>\nthe main goal of this project is to generate concise recipes\nfor [conda-forge](https://conda-forge.org/).\nthe grayskull project was created with the intention to eventually replace `conda skeleton`. <br>\npresently grayskull can generate recipes for python packages available on pypi and also those not published on pypi but available as github repositories.\ngrayskull can also generate recipes for r packages published on cran.\nfuture versions of grayskull will support recipe generation for packages of other repositories such as conan and cpan etc..\n\n## installation\n\nit is possible to install this project using `pip`:\n```bash\npip install grayskull\n```\n\nor `conda`, using the ``conda-forge`` channel:\n```bash\nconda install -c conda-forge grayskull\n```\n\nit is also possible to clone this repo and install it using `pip`:\n```bash\ngit clone https://github.com/conda/grayskull.git\ncd grayskull\npip install -e .\n```\n\n## usage\n\nit is pretty simple to use `grayskull`. just call it, pass the repository\n (`pypi` or `cran`) and the package name.\n\n* example:\n```bash\ngrayskull pypi pytest\n```\n\nafter that `grayskull` will create a folder with the same name as the package\nand inside this folder the generated recipe will be present (`meta.yaml`).\n\n* example with `pytest` (`grayskull pypi pytest`):\n\n![grayskull cli](https://github.com/conda/grayskull/raw/main/images/cli_example_grayskull.gif)\n\nif your package is a github repository just replace the package name with the github repository url. <br>\nfor example: <br>\n\n```bash\ngrayskull pypi https://github.com/confluentinc/confluent-kafka-python\n```\n\nyou can also generate a recipe from a local sdist archive:\n\n```bash\ngrayskull pypi ./pytest-5.3.5.tar.gz\n```\n\nnote that such a recipe isn't really portable as it will depend on the local path of the\nsdist file. it can be useful if you want to automatically generate a conda package.\n\n### online grayskull\n\nit is also possible to use grayskull without any installation. you can go to this website [marcelotrevisani.com/grayskull](https://www.marcelotrevisani.com/grayskull) and inform the name and the version (optional) of the package and it will create the recipe for you.\n\n\n## license\ncopyright marcelo duarte trevisani and contributors, 2020-2023.\n\ndistributed under the terms of the apache 2.0 license, grayskull is free and open source software.\n",
  "docs_url": null,
  "keywords": "conda",
  "license": "apache-2.0",
  "name": "grayskull",
  "package_url": "https://pypi.org/project/grayskull/",
  "project_url": "https://pypi.org/project/grayskull/",
  "project_urls": {
    "Source": "https://github.com/conda/grayskull"
  },
  "release_url": "https://pypi.org/project/grayskull/2.5.1/",
  "requires_dist": [
    "beautifulsoup4",
    "colorama",
    "conda-souschef >=2.2.3",
    "packaging >=21.3",
    "pip",
    "pkginfo",
    "progressbar2 >=3.53.0",
    "rapidfuzz >=3.0.0",
    "requests",
    "ruamel.yaml >=0.16.10",
    "ruamel.yaml.jinja2",
    "setuptools >=30.3.0",
    "semver ~=3.0.0",
    "stdlib-list",
    "tomli",
    "tomli-w",
    "furo ; extra == 'docs'",
    "sphinx ; extra == 'docs'",
    "sphinx-argparse ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "mdit-py-plugins >=0.3.0 ; extra == 'docs'",
    "mock ; extra == 'testing'",
    "pytest ; extra == 'testing'",
    "pytest-console-scripts ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-mock ; extra == 'testing'",
    "setuptools-scm ; extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "project to generate recipes for conda packages",
  "version": "2.5.1",
  "releases": [],
  "developers": [
    "marceloduartetrevisani@gmail.com"
  ],
  "kwds": "badge yaml yml badges cli_example_grayskull",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_grayskull",
  "homepage": "",
  "release_count": 65,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_colorama",
    "pypi_conda_souschef",
    "pypi_furo",
    "pypi_mdit_py_plugins",
    "pypi_mock",
    "pypi_myst_parser",
    "pypi_packaging",
    "pypi_pip",
    "pypi_pkginfo",
    "pypi_progressbar2",
    "pypi_pytest",
    "pypi_pytest_console_scripts",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_rapidfuzz",
    "pypi_requests",
    "pypi_ruamel.yaml",
    "pypi_ruamel.yaml.jinja2",
    "pypi_semver",
    "pypi_setuptools",
    "pypi_setuptools_scm",
    "pypi_sphinx",
    "pypi_sphinx_argparse",
    "pypi_stdlib_list",
    "pypi_tomli",
    "pypi_tomli_w"
  ]
}
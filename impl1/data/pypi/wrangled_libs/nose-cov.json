{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.4",
    "programming language :: python :: 2.5",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.0",
    "programming language :: python :: 3.1",
    "topic :: software development :: testing"
  ],
  "description": "nose-cov\n========\n\nthis plugin produces coverage reports.  it also supports coverage of subprocesses.\n\nall features offered by the coverage package should be available, either through nose-cov or\nthrough coverage's config file.\n\n\ninstallation\n------------\n\ninstall with pip::\n\n    pip install nose-cov\n\n.. note::\n\n    ensure you use pip instead of easy_install as the latter does not correctly install the\n    init_cov_core.pth file needed for subprocess measurement.\n\n\nuninstallation\n--------------\n\nuninstall with pip::\n\n    pip uninstall nose-cov\n    pip uninstall cov-core\n\n.. note::\n\n    ensure that you manually delete the init_cov_core.pth file in your site-packages directory.\n\n    this file starts coverage collection of subprocesses if appropriate during site initialisation\n    at python startup.\n\n\nusage\n-----\n\nthe following will report on the combined coverage of the main process and all of it's subprocesses::\n\n    nosetests --with-cov --cov myproj tests/\n\nshows a terminal report::\n\n    ---------- coverage: platform linux2, python 2.6.5-final-0 -----------\n    name                 stmts   miss  cover\n    ----------------------------------------\n    myproj/__init__          2      0   100%\n    myproj/myproj          257     13    95%\n    myproj/feature4286      94      9    90%\n    ----------------------------------------\n    total                  353     22    94%\n    ----------------------------------------------------------------------\n\n\nreporting\n---------\n\nit is possible to generate any combination of the reports for a single test run.\n\nthe available reports are terminal (with or without missing line numbers shown), html, xml and\nannotated source code.\n\nthe terminal report without line numbers (default)::\n\n    nosetests --with-cov --cov-report term --cov myproj tests/\n\n    ---------- coverage: platform linux2, python 2.6.5-final-0 -----------\n    name                 stmts   miss  cover\n    ----------------------------------------\n    myproj/__init__          2      0   100%\n    myproj/myproj          257     13    95%\n    myproj/feature4286      94      9    90%\n    ----------------------------------------\n    total                  353     22    94%\n    ----------------------------------------------------------------------\n\n\nthe terminal report with line numbers::\n\n    nosetests --with-cov --cov-report term-missing --cov myproj tests/\n\n    ---------- coverage: platform linux2, python 2.6.5-final-0 -----------\n    name                 stmts   miss  cover   missing\n    --------------------------------------------------\n    myproj/__init__          2      0   100%\n    myproj/myproj          257     13    95%   24-26, 99, 149, 233-236, 297-298, 369-370\n    myproj/feature4286      94      9    90%   37, 40, 183-188, 197\n    --------------------------------------------------\n    total                  353     22    94%\n    ----------------------------------------------------------------------\n\n\nthe remaining three reports output to files without showing anything on the terminal (useful for\nwhen the output is going to a continuous integration server)::\n\n    nosetests --with-cov\n              --cov-report html\n              --cov-report xml\n              --cov-report annotate\n              --cov myproj tests/\n\n\ncoverage data file\n------------------\n\nthe data file is erased at the beginning of testing to ensure clean data for each test run.\n\nthe data file is left at the end of testing so that it is possible to use normal coverage tools to\nexamine it.\n\n\ncoverage config file\n--------------------\n\nthis plugin provides a clean minimal set of command line options that are added to nosetests.  for\nfurther control of coverage use a coverage config file.\n\nfor example if tests are contained within the directory tree being measured the tests may be\nexcluded if desired by using a .coveragerc file with the omit option set::\n\n    nosetests --cov-config .coveragerc\n              --cov myproj\n              myproj/tests/\n\nwhere the .coveragerc file contains file globs::\n\n    [run]\n    omit = tests/*\n\nfor full details refer to the `coverage config file`_ documentation.\n\n.. _`coverage config file`: http://nedbatchelder.com/code/coverage/config.html\n\nnote that this plugin controls some options and setting the option in the config file will have no\neffect.  these include specifying source to be measured (source option) and all data file handling\n(data_file and parallel options).\n\n\nlimitations\n-----------\n\nfor subprocess measurement environment variables must make it from the main process to the\nsubprocess.  the python used by the subprocess must have nose-cov installed.  the subprocess must\ndo normal site initialisation so that the environment variables can be detected and coverage\nstarted.\n\n\nnose multiprocess plugin\n------------------------\n\nthe nose cov plugin partially works with the nose multiprocess plugin.\n\nthe nose multiprocess plugin does not join with its child processes so nose cov plugin has coverage\nmeasured but can't merge coverage results and report them.\n\nwork around by using cov plugin and multiprocess plugin together to run tests, note coverage report\nfrom this command will be incorrect::\n\n    nosetests --with-cov --processes=4 tests/\n\nafter there will be coverage data files for the main nose process and each subprocess::\n\n    .coverage\n    .coverage.hostname.7323.198266\n    .coverage.hostname.7339.177156\n    .coverage.hostname.7358.543616\n    .coverage.hostname.7393.997428\n\ntell coverage to merge coverage results into one coverage data file::\n\n    coverage combine\n\n\ntell coverage to report::\n\n    coverage report\n\n\nacknowledgements\n----------------\n\nwhilst this plugin has been built fresh from the ground up it has been influenced by the work done\non pytest-coverage (ross lawley, james mills, holger krekel) and nose-cover (jason pellerin) which are\nother coverage plugins.\n\nned batchelder for coverage and its ability to combine the coverage results of parallel runs.\n\nholger krekel for pytest with its distributed testing support.\n\njason pellerin for nose.\n\nmichael foord for unittest2.\n\nno doubt others have contributed to these tools as well.",
  "docs_url": null,
  "keywords": "nose nosetest cover coverage",
  "license": "mit license",
  "name": "nose-cov",
  "package_url": "https://pypi.org/project/nose-cov/",
  "project_url": "https://pypi.org/project/nose-cov/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://bitbucket.org/memedough/nose-cov/overview"
  },
  "release_url": "https://pypi.org/project/nose-cov/1.6/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "nose plugin for coverage reporting, including subprocesses and multiprocessing",
  "version": "1.6",
  "releases": [],
  "developers": [
    "meme_dough",
    "memedough@gmail.com"
  ],
  "kwds": "nosetest nosetests init_cov_core subprocess pip",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_nose_cov",
  "homepage": "http://bitbucket.org/memedough/nose-cov/overview",
  "release_count": 8,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: systems administration :: authentication/directory :: ldap"
  ],
  "description": "ldap3\n=====\n\n.. image:: https://img.shields.io/pypi/v/ldap3.svg\n    :target: https://pypi.python.org/pypi/ldap3/\n    :alt: latest version\n\n.. image:: https://img.shields.io/pypi/l/ldap3.svg\n    :target: https://pypi.python.org/pypi/ldap3/\n    :alt: license\n\n.. image:: https://img.shields.io/travis/cannatag/ldap3/master.svg\n    :target: https://travis-ci.org/cannatag/ldap3\n    :alt: travis-ci build status for master branch\n\n\nldap3 is a strictly rfc 4510 conforming **ldap v3 pure python client** library. the same codebase runs in python 2, python 3, pypy and pypy3.\n\n\na more pythonic ldap\n--------------------\n\nldap operations look clumsy and hard-to-use because they reflect the old-age idea that time-consuming operations should be performed client-side\nto not hog the server with heavy elaborations. to alleviate this ldap3 includes a fully functional **abstraction layer** that lets you\ninteract with the ldap server in a modern and *pythonic* way. with the abstraction layer you don't need to directly issue any ldap operation at all.\n\n\nthread safe strategies\n----------------------\n\nin multithreaded programs you must use on of **safe_sync** (synchronous connection strategy), **safe_restartable** (restartable syncronous connection strategy) or **async** (asynchronous connection strategy).\n   each ldap operation with safe_sync or safe_restartable strategies returns a tuple of four elements: status, result, response and request.\n\n   * status: states if the operation was successful\n\n   * result: the ldap result of the operation\n\n   * response: the response of a ldap search operation\n\n   * request: the original request of the operation\n\n   the safesync strategy can be used with the abstract layer, but the abstract layer currently is not thread safe.\n   for example, to use *safe_sync*::\n\n      from ldap3 import server, connection, safe_sync\n      server = server('my_server')\n      conn = connection(server, 'my_user', 'my_password', client_strategy=safe_sync, auto_bind=true)\n      status, result, response, _ = conn.search('o=test', '(objectclass=*)')  # usually you don't need the original request (4th element of the returned tuple)\n\n\n  with *async* you must request the response with the *get_response()* method.\n\nhome page\n---------\n\nthe home page of the ldap3 project is https://github.com/cannatag/ldap3\n\n\ndocumentation\n-------------\n\ndocumentation is available at http://ldap3.readthedocs.io\n\n\nlicense\n-------\n\nthe ldap3 project is open source software released under the **lgpl v3 license**.\ncopyright 2013 - 2020 giovanni cannata\n\n\npep8 compliance\n---------------\n\nldap3 is pep8 compliant, except for line length.\n\n\ndownload\n--------\n\npackage download is available at https://pypi.python.org/pypi/ldap3.\n\n\ninstall\n-------\n\ninstall with **pip install ldap3**\n\n\ngit repository\n--------------\n\nyou can download the latest source at https://github.com/cannatag/ldap3\n\n\ncontinuous integration\n----------------------\n\ncontinuous integration for testing is at https://travis-ci.org/cannatag/ldap3\n\n\nsupport & development\n---------------------\n\nyou can submit support tickets on https://github.com/cannatag/ldap3/issues/new\nyou can submit pull request on the **dev** branch at https://github.com/cannatag/ldap3/tree/dev\n\n\nthanks to\n---------\n\n* **ilya etingof**, the author of the *pyasn1* package for his excellent work and support.\n\n* **mark lutz** for his *learning python* and *programming python* excellent books series and **john goerzen** and **brandon rhodes** for their book *foundations of python network programming*. these books are wonderful tools for learning python and this project owes a lot to them.\n\n* **jetbrains** for donating to this project the open source license of *pycharm professional*.\n\n* **github** for providing the *free source repository space and the tools* i use to develop this project.\n\n* the **freeipa** team for letting me use their demo ldap server in the ldap3 tutorial.\n\n\ncontact me\n----------\n\nfor information and suggestions you can contact me at cannatag@gmail.com. you can also open a support ticket on https://github.com/cannatag/ldap3/issues/new\n\n\ndonate\n------\n\nif you want to keep this project up and running you can send me an amazon gift card. i will use it to improve my skills in information and communication technologies.\n\n\nchangelog\n---------\n\nupdated changelog at https://ldap3.readthedocs.io/changelog.html\n\n\n\n",
  "docs_url": null,
  "keywords": "python3 python2 ldap",
  "license": "lgpl v3",
  "name": "ldap3",
  "package_url": "https://pypi.org/project/ldap3/",
  "project_url": "https://pypi.org/project/ldap3/",
  "project_urls": {
    "Homepage": "https://github.com/cannatag/ldap3"
  },
  "release_url": "https://pypi.org/project/ldap3/2.9.1/",
  "requires_dist": [
    "pyasn1 (>=0.4.6)"
  ],
  "requires_python": "",
  "summary": "a strictly rfc 4510 conforming ldap v3 pure python client library",
  "version": "2.9.1",
  "releases": [],
  "developers": [
    "cannatag@gmail.com",
    "giovanni_cannata"
  ],
  "kwds": "ldap3 ldap pypy3 python3 python2",
  "license_kwds": "lgpl v3",
  "libtype": "pypi",
  "id": "pypi_ldap3",
  "homepage": "https://github.com/cannatag/ldap3",
  "release_count": 31,
  "dependency_ids": [
    "pypi_pyasn1"
  ]
}
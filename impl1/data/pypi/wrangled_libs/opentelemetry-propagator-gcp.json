{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "opentelemetry google cloud propagator\n======================================\n\n.. image:: https://badge.fury.io/py/opentelemetry-propagator-gcp.svg\n    :target: https://badge.fury.io/py/opentelemetry-propagator-gcp\n\n.. image:: https://readthedocs.org/projects/google-cloud-opentelemetry/badge/?version=latest\n    :target: https://google-cloud-opentelemetry.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\nthis library provides support for propagating trace context in the google\ncloud ``x-cloud-trace-context`` format.\n\ninstallation\n------------\n\n.. code:: bash\n\n    pip install opentelemetry-propagator-gcp\n\nusage\n-----\n\nthe ``cloudtraceonewaypropagator`` reads the google cloud\n``x-cloud-trace-context`` format, but does not write the\n``x-cloud-trace-context`` header on outgoing requests. it is intended for use\nwith a compositepropagator as below.\n\n.. code-block:: python\n\n    from opentelemetry.propagate import set_global_textmap\n    from opentelemetry.propagators.composite import compositepropagator\n    from opentelemetry.propagators.cloud_trace_propagator import (\n        cloudtraceonewaypropagator,\n    )\n    set_global_textmap(\n        compositepropagator([\n            cloudtraceonewaypropagator(),\n            propagate.get_global_textmap(),\n        ]),\n    )\n\nthe ``cloudtraceformatpropagator`` reads and writes the\n``x-cloud-trace-context`` header formats. note that when using this propagator,\nthe ``sampled`` bit is interpreted as the ``trace_true`` flag, which may cause a\nhigher sampling rate than desired. see the `trace documentation\n<https://cloud.google.com/trace/docs/setup#force-trace>` for additional context.\n\n.. code-block:: python\n\n    from opentelemetry.propagate import set_global_textmap\n    from opentelemetry.propagators.cloud_trace_propagator import (\n        cloudtraceformatpropagator,\n    )\n\n    # set the x-cloud-trace-context header\n    set_global_textmap(cloudtraceformatpropagator())\n.. code-block:: python\n\n    from opentelemetry.propagate import set_global_textmap\n    from opentelemetry.propagators.cloud_trace_propagator import (\n        cloudtraceformatpropagator,\n    )\n\n    # set the x-cloud-trace-context header\n    set_global_textmap(cloudtraceformatpropagator())\n\n\nreferences\n----------\n\n* `cloud trace <https://cloud.google.com/trace/>`_\n* `opentelemetry project <https://opentelemetry.io/>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "opentelemetry-propagator-gcp",
  "package_url": "https://pypi.org/project/opentelemetry-propagator-gcp/",
  "project_url": "https://pypi.org/project/opentelemetry-propagator-gcp/",
  "project_urls": {
    "Homepage": "https://github.com/GoogleCloudPlatform/opentelemetry-operations-python/tree/main/opentelemetry-propagator-gcp"
  },
  "release_url": "https://pypi.org/project/opentelemetry-propagator-gcp/1.6.0/",
  "requires_dist": [
    "opentelemetry-api ~=1.0"
  ],
  "requires_python": ">=3.7",
  "summary": "google cloud propagator for opentelemetry",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "google",
    "opentelemetry-pypi@google.com"
  ],
  "kwds": "cloud_trace_propagator cloudtraceformatpropagator cloudtraceonewaypropagator gcp trace",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_opentelemetry_propagator_gcp",
  "homepage": "https://github.com/googlecloudplatform/opentelemetry-operations-python/tree/main/opentelemetry-propagator-gcp",
  "release_count": 8,
  "dependency_ids": [
    "pypi_opentelemetry_api"
  ]
}
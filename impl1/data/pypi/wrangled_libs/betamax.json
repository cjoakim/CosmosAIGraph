{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "betamax\n=======\n\nbetamax is a vcr_ imitation for requests. this will make mocking out requests\nmuch easier. it is tested on `travis ci`_.\n\nput in a more humorous way: \"betamax records your http interactions so the nsa\ndoes not have to.\"\n\nexample use\n-----------\n\n.. code-block:: python\n\n    from betamax import betamax\n    from requests import session\n    from unittest import testcase\n\n    with betamax.configure() as config:\n        config.cassette_library_dir = 'tests/fixtures/cassettes'\n\n\n    class testgithubapi(testcase):\n        def setup(self):\n            self.session = session()\n            self.headers.update(...)\n\n        # set the cassette in a line other than the context declaration\n        def test_user(self):\n            with betamax(self.session) as vcr:\n                vcr.use_cassette('user')\n                resp = self.session.get('https://api.github.com/user',\n                                        auth=('user', 'pass'))\n                assert resp.json()['login'] is not none\n\n        # set the cassette in line with the context declaration\n        def test_repo(self):\n            with betamax(self.session).use_cassette('repo'):\n                resp = self.session.get(\n                    'https://api.github.com/repos/sigmavirus24/github3.py'\n                    )\n                assert resp.json()['owner'] != {}\n\nwhat does it even do?\n---------------------\n\nif you are unfamiliar with vcr_, you might need a better explanation of what\nbetamax does.\n\nbetamax intercepts every request you make and attempts to find a matching\nrequest that has already been intercepted and recorded. two things can then\nhappen:\n\n1. if there is a matching request, it will return the response that is\n   associated with it.\n2. if there is **not** a matching request and it is allowed to record new\n   responses, it will make the request, record the response and return the\n   response.\n\nrecorded requests and corresponding responses - also known as interactions -\nare stored in files called cassettes. (an example cassette can be seen in\nthe `examples section of the documentation`_.) the directory you store your\ncassettes in is called your library, or your `cassette library`_.\n\nvcr cassette compatibility\n--------------------------\n\nbetamax can use any vcr-recorded cassette as of this point in time. the only\ncaveat is that python-requests returns a url on each response. vcr does not\nstore that in a cassette now but we will. any vcr-recorded cassette used to\nplayback a response will unfortunately not have a url attribute on responses\nthat are returned. this is a minor annoyance but not something that can be\nfixed.\n\ncontributing\n------------\n\nyou can check out the project board on waffle.io_ to see what the status of\neach issue is.\n\n.. _vcr: https://github.com/vcr/vcr\n.. _travis ci: https://travis-ci.org/sigmavirus24/betamax\n.. _waffle.io: https://waffle.io/sigmavirus24/betamax\n.. _examples section of the documentation:\n    http://betamax.readthedocs.org/en/latest/api.html#examples\n.. _cassette library:\n    http://betamax.readthedocs.org/en/latest/cassettes.html\n\n\nhistory\n=======\n\n0.8.1 - 2018-03-13\n------------------\n\n- previous attempts to sanitize cassette names were incomplete.\n  sanitization has become more thorough which could have some affects on\n  existing cassette files. **this may cause new cassettes to be generated.**\n\n- fix bug where there may be an exception raised in a\n  ``betamax.exceptions.betamaxerror`` repr.\n\n0.8.0 - 2016-08-16\n------------------\n\n- add ``betamax_parametrized_recorder`` and ``betamax_parametrized_session``\n  to our list of pytest fixtures so that users will have parametrized cassette\n  names when writing parametrized tests with our fixtures. (i wonder if i can\n  mention parametrization a bunch more times so i can say parametrize a lot in\n  this bullet note.)\n- add ``validationerror`` and a set of subclasses for each possible validation\n  error.\n- raise ``invalidoption`` on unknown cassette options rather than silently\n  ignoring extra options.\n- raise a subclass of ``validationerror`` when a particular cassette option is\n  invalid, rather than silently ignoring the validation failure.\n\n0.7.2 - 2016-08-04\n------------------\n\n- fix bug with query string matcher where query-strings without values (e.g.,\n  ``?foo&bar`` as opposed to ``?foo=1&bar=2``) were treated as if there were\n  no query string.\n\n0.7.1 - 2016-06-14\n------------------\n\n- fix issue #108 by effectively copying the items in the match_requests_on\n  list into the match_options set on a cassette instance\n\n0.7.0 - 2016-04-29\n------------------\n\n- add ``before_record`` and ``before_playback`` hooks\n\n- allow per-cassette placeholders to be merged and override global\n  placeholders\n\n- fix bug where the ``querymatcher`` failed matching on high unicode points\n\n0.6.0 - 2016-04-12\n------------------\n\n- add ``betamax_recorder`` pytest fixture\n\n- change default behaviour to allow duplicate interactions to be recorded in\n  single cassette\n\n- add ``allow_playback_repeats`` to allow an interaction to be used more than\n  once from a single cassette\n\n- always return a new ``response`` object from an interaction to allow for a\n  streaming response to be usable multiple times\n\n- remove ci support for pythons 2.6 and 3.2\n\n0.5.1 - 2015-10-24\n------------------\n\n- fix bugs with requests 2.8.x integration\n\n- fix bugs with older versions of requests that were missing an httpheaderdict\n  implementation\n\n0.5.0 - 2015-07-15\n------------------\n\n- add unittest integration in ``betamax.fixtures.unittest``\n\n- add pytest integration in ``betamax.fixtures.pytest``\n\n- add a decorator as a short cut for ``use_cassette``\n\n- fix bug where body bytes were not always encoded on python 3.2+\n\n  fixed by @bboe\n\n0.4.2 - 2015-04-18\n------------------\n\n- fix issue #58 reported by @bboe\n\n  multiple cookies were not being properly stored or replayed after being\n  recorded.\n\n- @leighlondon converted ``__all__`` to a tuple\n\n0.4.1 - 2014-09-24\n------------------\n\n- fix issue #39 reported by @buttscicles\n\n  this bug did not properly parse the set-cookie header with multiple cookies\n  when replaying a recorded response.\n\n0.4.0 - 2014-07-29\n------------------\n\n- allow the user to pass placeholders to ``betamax#use_cassette``.\n\n- include betamax's version number in cassettes\n\n0.3.2 - 2014-06-05\n------------------\n\n- fix request and response bodies courtesy of @dgouldin\n\n0.3.1 - 2014-05-28\n------------------\n\n- fix github issue #35 - placeholders were not being properly applied to\n  request bodies. this release fixes that so placeholders are now behave as\n  expected with recorded request bodies.\n\n0.3.0 - 2014-05-23\n------------------\n\n- add ``betamax#start`` and ``betamax#stop`` to allow users to start recording\n  and stop without using a context-manager.\n\n- add ``digest-auth`` matcher to help users match the right request when using\n  requests' ``httpdigestauth``.\n\n- reorganize and refactor the cassettes, matchers, and serializers modules.\n\n- refactor some portions of code a bit.\n\n- ``cassette.cassette_name`` no longer is the relative path to the file in\n  which the cassette is saved. to access that information use\n  ``cassette.cassette_path``. the ``cassette_name`` attribute is now the name\n  that you pass to ``betamax#use_cassette``.\n\n0.2.0 - 2014-04-12\n------------------\n\n- fix bug where new interactions recorded under ``new_episodes`` or ``all``\n  were not actually saved to disk.\n\n- match uris in a far more intelligent way.\n\n- use the session's original adapters when making new requests\n\n  in the event the session has a custom adapter mounted, e.g., the ssladapter\n  in requests-toolbelt, then we should probably use that.\n\n- add ``on_init`` hook to ``basematcher`` so matcher authors can customize\n  initialization\n\n- add support for custom serialization formats. see the docs for more info.\n\n- add support for preserving exact body bytes.\n\n- deprecate ``serialize`` keyword to ``betamax#use_cassette`` in preference\n  for ``serialize_with`` (to be more similar to vcr).\n\n0.1.6 - 2013-12-07\n------------------\n\n- fix how global settings and per-invocation options are persisted and\n  honored. (#10)\n\n- support ``match_requests_on`` as a parameter sent to\n  ``betamax#use_cassette``. (no issue)\n\n0.1.5 - 2013-09-27\n------------------\n\n- make sure what we pass to ``base64.b64decode`` is a bytes object\n\n0.1.4 - 2013-09-27\n------------------\n\n- do not try to sanitize something that may not exist.\n\n0.1.3 - 2013-09-27\n------------------\n\n- fix issue when response has a content-encoding of gzip and we need to\n  preserve the original bytes of the message.\n\n0.1.2 - 2013-09-21\n------------------\n\n- fix issues with how requests parses cookies out of responses\n\n- fix unicode issues with ``response#text`` (trying to use ``response#json``\n  raises exception because it cannot use string decoding on a unicode string)\n\n0.1.1 - 2013-09-19\n------------------\n\n- fix issue where there is a unicode character not in ``range(128)``\n\n0.1.0 - 2013-09-17\n------------------\n\n- initial release\n\n- support for vcr generated cassettes (json only)\n\n- support for ``re_record_interval``\n\n- support for the ``once``, ``all``, ``new_episodes``, ``all`` cassette modes\n\n- support for filtering sensitive data\n\n- support for the following methods of request matching:\n\n  - method\n\n  - uri\n\n  - host\n\n  - path\n\n  - query string\n\n  - body\n\n  - headers\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "betamax",
  "package_url": "https://pypi.org/project/betamax/",
  "project_url": "https://pypi.org/project/betamax/",
  "project_urls": {
    "Homepage": "https://github.com/sigmavirus24/betamax"
  },
  "release_url": "https://pypi.org/project/betamax/0.8.1/",
  "requires_dist": [
    "requests (>=2.0)"
  ],
  "requires_python": "",
  "summary": "a vcr imitation for python-requests",
  "version": "0.8.1",
  "releases": [],
  "developers": [
    "graffatcolmingov@gmail.com",
    "ian_stapleton_cordasco"
  ],
  "kwds": "test_repo mocking test_user betamax_parametrized_session testgithubapi",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_betamax",
  "homepage": "https://github.com/sigmavirus24/betamax",
  "release_count": 23,
  "dependency_ids": [
    "pypi_requests"
  ]
}
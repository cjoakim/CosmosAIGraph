{
  "classifiers": [
    "license :: other/proprietary license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database"
  ],
  "description": "# databricks sql\n\ndatabricks sql framework, easy to learn, fast to code, ready for production.\n\n## installation\n\n```shell\n$ pip install databricks-sql\n```\n\n## configuration\n\n```python\nfrom databricks_sql.client import configuration\n\nconfiguration = configuration.instance(\n    access_token=\"\",\n    command_directory=\"\",\n    http_path=\"\",\n    server_hostname=\"\",\n)\n```\n\n## usage\n\ndatabricks sql usage description:\n\n### delete\n\n#### delete with where\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .delete(\"catalog.schema.table\")\n        .where(\"id\", \"994238a4-8c18-436a-8c06-29ec89c4c056\")\n        .execute()\n    )\n```\n\n#### delete with where condition\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .delete(\"catalog.schema.table\")\n        .where(\"description\", \"%databricks%\", operator=\"like\")\n        .execute()\n    )\n```\n\n### execute\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .execute(\n            \"\"\"\n                create table if not exists catalog.schema.table (\n                    id string not null,\n                    name string not null,\n                    description string,\n                    constraint table_primary_key primary key(id)\n                ) using delta\n            \"\"\",\n            parameters=none,\n            skip_load=true,\n        )\n    )\n```\n\n### insert\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .insert(\"catalog.schema.table\")\n        .set(\"id\", \"994238a4-8c18-436a-8c06-29ec89c4c056\")\n        .set(\"name\", \"name\")\n        .set(\"description\", \"description\")\n        .execute()\n    )\n```\n\n### paging\n\n#### paging with where condition\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .select(\"catalog.schema.table\")\n        .fields(\"id\", \"name\", \"description\")\n        .where(\"name\", \"%databricks%\", operator=\"like\")\n        .order_by(\"id\")\n        .paging(0, 10)\n    )\n```\n\n#### paging without where condition\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .select(\"catalog.schema.table\")\n        .paging(0, 10)\n    )\n```\n\n### select\n\n#### fetch all\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .select(\"catalog.schema.table\")\n        .execute()\n        .fetch_all()\n    )\n```\n\n#### fetch many\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .select(\"catalog.schema.table\")\n        .execute()\n        .fetch_many(1)\n    )\n```\n\n#### fetch one\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .select(\"catalog.schema.table\")\n        .execute()\n        .fetch_one()\n    )\n```\n\n#### select by file\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .execute(\"command.sql\", {\"id\": \"994238a4-8c18-436a-8c06-29ec89c4c056\"})\n        .fetch_one()\n    )\n```\n\n#### select by command\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .execute(\"select id, name, description from catalog.schema.table where id = %(id)s\", {\"id\": \"994238a4-8c18-436a-8c06-29ec89c4c056\"})\n        .fetch_one()\n    )\n```\n\n### update\n\n#### update with where\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .update(\"catalog.schema.table\")\n        .set(\"name\", \"new name\")\n        .set(\"description\", \"new description\")\n        .where(\"id\", \"994238a4-8c18-436a-8c06-29ec89c4c056\")\n        .execute()\n    )\n```\n\n#### update with where all\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .update(\"catalog.schema.table\")\n        .set(\"name\", \"new name\")\n        .set(\"description\", \"new description\")\n        .where_all({\"id\": \"994238a4-8c18-436a-8c06-29ec89c4c056\", \"name\": \"name\", \"description\": \"description\"})\n        .execute()\n    )\n```\n\n### using mustache\n\n#### sql\n\n```sql\nselect\n    id,\n    name,\n    description\nfrom catalog.schema.table\nwhere 1 = 1\n{{#id}}\nand id = %(id)s\n{{/id}}\n{{#name}}\nand name like %(name)s\n{{/name}}\n```\n\n#### select with filters\n\n```python\nfrom databricks_sql.client import database\n\nwith database() as connection:\n    (\n        connection\n        .execute(\"command.sql\", parameters={\"id\": \"994238a4-8c18-436a-8c06-29ec89c4c056\", \"name\": \"name\"})\n        .fetch_one()\n    )\n```\n\n## license\n\nthis project is licensed under the terms of the [apache license 2.0](https://github.com/bernardocouto/databricks-sql/blob/main/license).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2-0",
  "name": "databricks-sql",
  "package_url": "https://pypi.org/project/databricks-sql/",
  "project_url": "https://pypi.org/project/databricks-sql/",
  "project_urls": {
    "Homepage": "https://github.com/bernardocouto/databricks-sql",
    "Repository": "https://github.com/bernardocouto/databricks-sql"
  },
  "release_url": "https://pypi.org/project/databricks-sql/1.0.0/",
  "requires_dist": [
    "databricks-sql-connector (==2.2.1)",
    "pystache (==0.6.0)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "databricks sql framework, easy to learn, fast to code, ready for production.",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "bernardo_couto",
    "bernardocouto@icloud.com"
  ],
  "kwds": "databricks_sql databricks table_primary_key fetch_all fetch_one",
  "license_kwds": "apache 2-0",
  "libtype": "pypi",
  "id": "pypi_databricks_sql",
  "homepage": "https://github.com/bernardocouto/databricks-sql",
  "release_count": 8,
  "dependency_ids": [
    "pypi_databricks_sql_connector",
    "pypi_pystache"
  ]
}
{
  "classifiers": [
    "environment :: plugins",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: posix :: linux",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: monitoring"
  ],
  "description": "# multiping: a pure-python implemention to monitor ip addresses with pings\n\nmultiping is a python library to monitor one or many ip addresses via icmp echo\n(ping) requests. features:\n\n* it works for python 2 and 3.\n* supports timeouts and retries.\n* supports ipv4 as well as ipv6.\n* small and compact and does not rely on any 3rd party packages, aside from\n  what's included in python.\n\nit is ideally suited to monitor large numbers of hosts in clusters, but is just\nas suitable to check on a single address.\n\nmultiping was originally developed for the\n[vpc-router](https://github.com/romana/vpc-router) project, but can easily\nbe used on its own.\n\n## installation\n\n### installation via pip\n\nmultiping is available in pypi, the python package index. therefore, you can\ninstall it simply with:\n\n    pip install multiping\n\n### installation from source\n\nafter downloading the code or cloning this repository, please run the `setup.py`\nfile, which is included in the source code:\n\n    python setup.py install\n\n## contributions\n\nwe welcome any contributions, bug reports or feedback. please use our\n[issue tracker](https://github.com/romana/multi-ping/issues) to file bugs or\nrequest additional features. we are happy to consider pull requests as well.\n\n## using multiping\n\n_note: icmp packets can only be sent by processes with root privileges._\n\nhere is an example of how to use multiping in your own code:\n\n    from multiping import multiping\n\n    # create a multiping object to test three hosts / addresses\n    mp = multiping([\"8.8.8.8\", \"youtube.com\", \"127.0.0.1\"])\n\n    # send the pings to those addresses\n    mp.send()\n\n    # with a 1 second timout, wait for responses (may return sooner if all\n    # results are received).\n    responses, no_responses = mp.receive(1)\n\nthe `receive()` function returns a tuple containing a results dictionary\n(addresses and response times) as well as a list of addresses that did not\nrespond in time. the results may be processed like this:\n\n    ...\n\n    for addr, rtt in responses.items():\n        print \"%s responded in %f seconds\" % (addr, rtt)\n\n    if no_responses:\n        print \"these addresses did not respond: %s\" % \", \".join(no_responses)\n        # sending pings once more, but just to those addresses that have not\n        # responded, yet. the multiping object 'mp' remembers the state of\n        # which address has responded already, so that another call to\n        # send() just generates packets to those hosts from which we haven't\n        # heard back, yet.\n        mp.send()\n        responses, no_responses = mp.receive(1)\n\n        ...\n\nnote that `send()` can be called multiple times. if there are any addresses\nleft for which no response has been received yet then this will resend pings\nto those remaining addresses.\n\na convenient `multi_ping()` function is provided, which implements retries and\ndelivers results in a single and simple function call:\n\n    from multiping import multi_ping\n\n    addrs = [\"8.8.8.8\", \"youtube.com\", \"127.0.0.1\"]\n\n    # ping the addresses up to 4 times (initial ping + 3 retries), over the\n    # course of 2 seconds. this means that for those addresses that do not\n    # respond another ping will be sent every 0.5 seconds.\n    responses, no_responses = multi_ping(addrs, timeout=2, retry=3)\n\nalso see the `demo.py` file for more examples.\n\nif there are any names or addresses in the list of target addresses, which\ncannot be resolved or looked up, a `socket.gaierror` is raised. this can be\nsurpressed if the `silent_lookup_errors` parameter flag is set. either as named\nparameter for the `multi_ping` function or when a `multiping` object is\ncreated.\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "multiping",
  "package_url": "https://pypi.org/project/multiping/",
  "project_url": "https://pypi.org/project/multiping/",
  "project_urls": {
    "Homepage": "http://github.com/romana/multi-ping/"
  },
  "release_url": "https://pypi.org/project/multiping/1.1.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pure python library to send and receive icmpecho request (ping) to monitor ip addresses",
  "version": "1.1.2",
  "releases": [],
  "developers": [
    "jbrendel@romana.io",
    "juergen_brendel"
  ],
  "kwds": "multi_ping pings ping pip ipv4",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_multiping",
  "homepage": "http://github.com/romana/multi-ping/",
  "release_count": 8,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: c",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# ultrajson\n\n[![pypi version](https://img.shields.io/pypi/v/ujson.svg?logo=pypi&logocolor=ffe873)](https://pypi.org/project/ujson)\n[![supported python versions](https://img.shields.io/pypi/pyversions/ujson.svg?logo=python&logocolor=ffe873)](https://pypi.org/project/ujson)\n[![pypi downloads](https://img.shields.io/pypi/dm/ujson.svg)](https://pypistats.org/packages/ujson)\n[![github actions status](https://github.com/ultrajson/ultrajson/workflows/test/badge.svg)](https://github.com/ultrajson/ultrajson/actions)\n[![codecov](https://codecov.io/gh/ultrajson/ultrajson/branch/main/graph/badge.svg)](https://codecov.io/gh/ultrajson/ultrajson)\n[![doi](https://zenodo.org/badge/1418941.svg)](https://zenodo.org/badge/latestdoi/1418941)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nultrajson is an ultra fast json encoder and decoder written in pure c with bindings for\npython 3.8+.\n\ninstall with pip:\n\n```sh\npython -m pip install ujson\n```\n\n## usage\n\nmay be used as a drop in replacement for most other json parsers for python:\n\n```pycon\n>>> import ujson\n>>> ujson.dumps([{\"key\": \"value\"}, 81, true])\n'[{\"key\":\"value\"},81,true]'\n>>> ujson.loads(\"\"\"[{\"key\": \"value\"}, 81, true]\"\"\")\n[{'key': 'value'}, 81, true]\n```\n\n### encoder options\n\n#### encode_html_chars\n\nused to enable special encoding of \"unsafe\" html characters into safer unicode\nsequences. default is `false`:\n\n```pycon\n>>> ujson.dumps(\"<script>john&doe\", encode_html_chars=true)\n'\"\\\\u003cscript\\\\u003ejohn\\\\u0026doe\"'\n```\n\n#### ensure_ascii\n\nlimits output to ascii and escapes all extended characters above 127. default is `true`.\nif your end format supports utf-8, setting this option to false is highly recommended to\nsave space:\n\n```pycon\n>>> ujson.dumps(\"\u00e5\u00e4\u00f6\")\n'\"\\\\u00e5\\\\u00e4\\\\u00f6\"'\n>>> ujson.dumps(\"\u00e5\u00e4\u00f6\", ensure_ascii=false)\n'\"\u00e5\u00e4\u00f6\"'\n```\n\n#### escape_forward_slashes\n\ncontrols whether forward slashes (`/`) are escaped. default is `true`:\n\n```pycon\n>>> ujson.dumps(\"https://example.com\")\n'\"https:\\\\/\\\\/example.com\"'\n>>> ujson.dumps(\"https://example.com\", escape_forward_slashes=false)\n'\"https://example.com\"'\n```\n\n#### indent\n\ncontrols whether indentation (\"pretty output\") is enabled. default is `0` (disabled):\n\n```pycon\n>>> ujson.dumps({\"foo\": \"bar\"})\n'{\"foo\":\"bar\"}'\n>>> print(ujson.dumps({\"foo\": \"bar\"}, indent=4))\n{\n    \"foo\":\"bar\"\n}\n```\n\n## benchmarks\n\n*ultrajson* calls/sec compared to other popular json parsers with performance gain\nspecified below each.\n\n### test machine\n\nlinux 5.15.0-1037-azure x86_64 #44-ubuntu smp thu apr 20 13:19:31 utc 2023\n\n### versions\n\n- cpython 3.11.3 (main, apr  6 2023, 07:55:46) [gcc 11.3.0]\n- ujson        : 5.7.1.dev26\n- orjson       : 3.9.0\n- simplejson   : 3.19.1\n- json         : 2.0.9\n\n|                                                                               | ujson      | orjson     | simplejson | json       |\n|-------------------------------------------------------------------------------|-----------:|-----------:|-----------:|-----------:|\n| array with 256 doubles                                                        |            |            |            |            |\n| encode                                                                        |     18,282 |     79,569 |      5,681 |      5,935 |\n| decode                                                                        |     28,765 |     93,283 |     13,844 |     13,367 |\n| array with 256 utf-8 strings                                                  |            |            |            |            |\n| encode                                                                        |      3,457 |     26,437 |      3,630 |      3,653 |\n| decode                                                                        |      3,576 |      4,236 |        522 |      1,978 |\n| array with 256 strings                                                        |            |            |            |            |\n| encode                                                                        |     44,769 |    125,920 |     21,401 |     23,565 |\n| decode                                                                        |     28,518 |     75,043 |     41,496 |     42,221 |\n| medium complex object                                                         |            |            |            |            |\n| encode                                                                        |     11,672 |     47,659 |      3,913 |      5,729 |\n| decode                                                                        |     12,522 |     23,599 |      8,007 |      9,720 |\n| array with 256 true values                                                    |            |            |            |            |\n| encode                                                                        |    110,444 |    425,919 |     81,428 |     84,347 |\n| decode                                                                        |    203,430 |    318,193 |    146,867 |    156,249 |\n| array with 256 dict{string, int} pairs                                        |            |            |            |            |\n| encode                                                                        |     14,170 |     72,514 |      3,050 |      7,079 |\n| decode                                                                        |     19,116 |     27,542 |      9,374 |     13,713 |\n| dict with 256 arrays with 256 dict{string, int} pairs                         |            |            |            |            |\n| encode                                                                        |         55 |        282 |         11 |         26 |\n| decode                                                                        |         48 |         53 |         27 |         34 |\n| dict with 256 arrays with 256 dict{string, int} pairs, outputting sorted keys |            |            |            |            |\n| encode                                                                        |         42 |            |          8 |         27 |\n| complex object                                                                |            |            |            |            |\n| encode                                                                        |        462 |            |        397 |        444 |\n| decode                                                                        |        480 |        618 |        177 |        310 |\n\nabove metrics are in call/sec, larger is better.\n\n## build options\n\nfor those with particular needs, such as linux distribution packagers, several\nbuild options are provided in the form of environment variables.\n\n### debugging symbols\n\n#### ujson_build_no_strip\n\nby default, debugging symbols are stripped on linux platforms. setting this\nenvironment variable with a value of `1` or `true` disables this behavior.\n\n### using an external or system copy of the double-conversion library\n\nthese two environment variables are typically used together, something like:\n\n```sh\nexport ujson_build_dc_includes='/usr/include/double-conversion'\nexport ujson_build_dc_libs='-ldouble-conversion'\n```\n\nusers planning to link against an external shared library should be aware of\nthe abi-compatibility requirements this introduces when upgrading system\nlibraries or copying compiled wheels to other machines.\n\n#### ujson_build_dc_includes\n\none or more directories, delimited by `os.pathsep` (same as the `path`\nenvironment variable), in which to look for `double-conversion` header files;\nthe default is to use the bundled copy.\n\n#### ujson_build_dc_libs\n\ncompiler flags needed to link the `double-conversion` library; the default\nis to use the bundled copy.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ujson",
  "package_url": "https://pypi.org/project/ujson/",
  "project_url": "https://pypi.org/project/ujson/",
  "project_urls": {
    "Download": "https://github.com/ultrajson/ultrajson",
    "Homepage": "https://github.com/ultrajson/ultrajson",
    "Source": "https://github.com/ultrajson/ultrajson"
  },
  "release_url": "https://pypi.org/project/ujson/5.9.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "ultra fast json encoder and decoder for python",
  "version": "5.9.0",
  "releases": [],
  "developers": [
    "jonas_tarnstrom"
  ],
  "kwds": "ultrajson ujson_build_no_strip ujson simplejson pycon",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ujson",
  "homepage": "https://github.com/ultrajson/ultrajson",
  "release_count": 37,
  "dependency_ids": []
}
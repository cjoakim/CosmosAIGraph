{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: internet :: www/http",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "[![test & deploy fake-useragent](https://github.com/fake-useragent/fake-useragent/actions/workflows/action.yml/badge.svg?branch=master)](https://github.com/fake-useragent/fake-useragent/actions/workflows/action.yml?query=branch%3amaster)\n\n# fake-useragent\n\nup-to-date simple useragent faker with real world database.\n\n## features\n\n- data is pre-downloaded from [techblog.willshouse.com](https://techblog.willshouse.com/2012/01/03/most-common-user-agents/) and the data is part of the package\n- retrieves user-agent strings locally\n- retrieve user-agent python dictionary\n- supports python 3.x\n\n### installation\n\n```sh\npip install fake-useragent\n```\n\nor if you have multiple python / pip versions installed, use `pip3`:\n\n```sh\npip3 install fake-useragent\n```\n\n### usage\n\nsimple usage examples below, see also next chapters in this readme for more advanced usages:\n\n```py\nfrom fake_useragent import useragent\nua = useragent()\n\n# get a random browser user-agent string\nprint(ua.random)\n\n# or get user-agent string from a specific browser\nprint(ua.chrome)\n# mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/114.0.0.0 safari/537.36\nprint(ua.google)\n# mozilla/5.0 (macintosh; intel mac os x 10_7_4) applewebkit/537.13 (khtml, like gecko) chrome/24.0.1290.1 safari/537.13\nprint(ua['google chrome'])\n# mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/113.0.0.0 safari/537.36\nprint(ua.firefox)\n# mozilla/5.0 (x11; linux x86_64; rv:109.0) gecko/20100101 firefox/115.0\nprint(ua.ff)\n# mozilla/5.0 (x11; linux x86_64; rv:102.0) gecko/20100101 firefox/102.0\nprint(ua.safari)\n# mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/605.1.15 (khtml, like gecko) version/16.2 safari/605.1.15\n```\n\n#### additional usage\n\nadditional features that fake-useragent now offers since v1.2.0.\n\nif you want to specify your own browser list, you can do that via the `browsers` argument (default is: `[\"chrome\", \"edge\", \"firefox\", \"safari\"]`).  \nthis example will only return random useragents from edge and chrome:\n\n```py\nfrom fake_useragent import useragent\nua = useragent(browsers=['edge', 'chrome'])\nua.random\n```\n\n_note:_ fakeuser-agent knowns about: chrome, edge, firefox and safari. other browsers are not popular enough and aren't part of our dataset we use.\n\n---\n\nif you want to specify your own operating systems, you can do that via the `os` argument (default is: `[\"windows\", \"macos\", \"linux\"]`).  \nin this example you will only get linux useragents back:\n\n```py\nfrom fake_useragent import useragent\nua = useragent(os='linux')\nua.random\n```\n\n---\n\nif you want to return more popular useragent strings, you can play with the `min_percentage` argument (default is: `0.0`, meaning all useragents will match).  \nin this example you get only useragents that have a minimum usage percentage of 1.3% (or higher):\n\n```py\nfrom fake_useragent import useragent\nua = useragent(min_percentage=1.3)\nua.random\n```\n\n_hint:_ of-course you can **combine all those arguments** to you liking!\n\n#### user-agent python dictionary\n\nsince version 1.3.0 we now also offer you the following \"get\" properties which return the whole python dictionary of the ua, instead of only the user-agent string:\n\n> **warning**\n> raw json objects (in a python dictionaries) are returned \"as is\".\n> meaning, this data structure could change in the future!\n>\n> be aware that these \"get\" properties below might not return the same key/value pairs in the future.\n> use `ua.random` or alike as mentioned above, if you want to use a stable interface.\n\n```py\nfrom fake_useragent import useragent\nua = useragent()\n\n# random user-agent dictionary (object)\nua.getrandom\n# {'percent': 0.8, 'useragent': 'mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/116.0.0.0 safari/537.36 edg/116.0.1938.76', 'system': 'edge 116.0 win10', 'browser': 'edge', 'version': 116.0, 'os': 'win10'}\n\n# more get properties:\nua.getfirefox\n# {'percent': 0.3, 'useragent': 'mozilla/5.0 (windows nt 10.0; rv:109.0) gecko/20100101 firefox/118.0', 'system': 'firefox 118.0 win10', 'browser': 'firefox', 'version': 118.0, 'os': 'win10'}\nua.getchrome\nua.getsafari\nua.getedge\n\n# and a method with an argument.\n# this is exactly the same as using: ua.getfirefox\nua.getbrowser('firefox')\n```\n\n### notes\n\nyou can override the fallback string using the `fallback` parameter, in very rare cases something failed:\n\n```py\nimport fake_useragent\n\nua = fake_useragent.useragent(fallback='your favorite browser')\n# in case if something went wrong, one more time it is really!!! rare case\nua.random == 'your favorite browser'\n```\n\nif you will try to get unknown browser:\n\n```py\nfrom fake_useragent import useragent\nua = useragent()\nprint(ua.unknown)\n#error occurred during getting browser: randm, but was suppressed with fallback.\n#mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/114.0.0.0 safari/537.36\n```\n\nif you need to safe some attributes from overriding them in useragent by `__getattr__` method\nuse `safe_attrs` you can pass there attributes names.\nat least this will prevent you from raising fakeuseragenterror when attribute not found.\n\nfor example, when using fake*useragent with `injections <https://github.com/tailhook/injections>`* you need to:\n\n```py\nimport fake_useragent\n\nua = fake_useragent.useragent(safe_attrs=('__injections__',))\n```\n\nplease, do not use if you don't understand why you need this.\nthis is magic for rarely extreme case.\n\n### experiencing issues?\n\nmake sure that you using latest version!\n\n```sh\npip install --upgrade fake-useragent\n```\n\nor if that isn't working, try to install the latest package version like this (`1.4.0` is an example, check what the [latest version is on pypi](https://pypi.org/project/fake-useragent/#history)):\n\n```sh\npip install fake-useragent==1.4.0\n```\n\ncheck version via the python console:\n\n```py\nimport fake_useragent\n\nprint(fake_useragent.version)\n```\n\nand you are always welcome to post [issues](https://github.com/fake-useragent/fake-useragent/issues).\n\nplease do not forget to mention the version that you are using.\n\n### for developers\n\nsince github actions is unable to reach willshouse.com and has cloudflare protection. we can run the script below to automatically scrape the user-agent strings from the external data source. the script will copy the [jsonlines](https://jsonlines.org/) file to the `src/fake_useragent/data` directory. execute:\n\n```sh\n./update_data_file.sh\n```\n\nthe data json file is part of the python package, see [pyproject.toml](pyproject.toml). read more about [data files support](https://setuptools.pypa.io/en/latest/userguide/datafiles.html).\n\n### python virtual environment\n\nwe encourage to use python virtual environment before installing pip packages, like so:\n\n```sh\npython -m virtualenv env\nsource env/bin/activate\n```\n\n#### tests\n\n```sh\npip install -r requirements.txt\ntox\n```\n\n#### linting\n\nto fix imports using ruff:\n\n```sh\npip install -r requirements.txt\nruff check --select=\"i\" --fix .\n```\n\nfix black code formatting errors:\n\n```sh\npip install -r requirements.txt\nblack .\n```\n\n_note:_ when ruff v1.0 releases, we most likely move fully towards `ruff` instead of `black`.\n\n### changelog\n\n- 1.4.0 november 24, 2023\n\n  - update all pip packages\n  - support python 3.12 (thanks @vladkens)\n  - fix package conflict in cache scraper\n  - improve ruff cli calls\n\n- 1.3.0 october 2, 2023\n\n  - introducing new `ua.getrandom`, `ua.getfirefox`, `ua.getchrome`, `ua.getsafari`. and a generic method: `ua.getbrowser(..)` (eg. `getbrowser('firefox')`)\n    - these new properties above allows you to retrieve the whole raw python dictionary, instead of only the ua string.\n    - these properties might return different key/values pairs in the future!\n  - fix the `os` argument 'windows' to check for both `win10`and `win7` values (previously only checking on `win10`), thus returning more uas\n  - improved user-agent scraper (now also containing safari browser again)\n  - updated browsers.json data file\n\n- 1.2.1 august 2, 2023\n\n  - small improvements in the `min_percentage` check\n  - update all pip package dependencies\n\n- 1.2.0 august 2, 2023\n\n  - updated browser useragent data\n  - allow filters on browser, os and usage percentage\n  - update the cache scraper to scape the new data source for user-agent strings\n  - adapted the code to work with the new json data format\n  - parameter `use_external_data=true` and `verify_ssl` are **removed**. if you use those parameters, just remove it in your code!\n\n- 1.1.3 march 20, 2023\n\n  - update dependencies\n\n- 1.1.2 february 8, 2023\n\n  - security fixes\n\n- 1.1.1 december 4, 2022\n\n  - remove whitespaces from user agent strings, this is a patch release\n\n- 1.1.0 november 26, 2022\n\n  - add `pkg_resource` as fallback mechanism in trying to retrieve the local json data file\n\n- 1.0.1 november 10, 2022\n\n  - add `importlib-metadata` & `importlib-resources` as dependencies\n  - check on specific python version regarding the importlib resources (python v3.10 or higher) in order to have `files()` working\n  - `importlib_metadata` should now also work on python version before 3.8\n  - remove obsolete `manifest.in` file\n\n- 1.0.0 november 17, 2022\n\n  - make the json lines data file part of the python package, data is retrieved locally\n    - extend the `myproject.toml` file with `package-data` support\n  - remove centralized caching server implementation\n  - make real unit-tests which should run reliable, fast, independent and without internet connection\n\n- 0.1.14 november 5, 2022\n\n  - improve code quality standards using modern python >=3.7 syntax\n  - migrated to `pyproject.toml` build system format + syntax check\n  - add additional classifiers to the toml file\n  - improved `tox.ini` file\n  - improved github actions job using pip cache\n  - and various small fixes\n\n- 0.1.13 october 21, 2022\n\n  - implement `browsers` argument, allowing you to override the browser names you want to use\n  - fix browser listing of internet explorer and edge\n  - don't depend on w3schools.com anymore\n  - clean-up data (temp) file format\n  - update fallback cache server url / use json lines as file format\n  - move to github actions instead of travis\n  - using [`black`](https://pypi.org/project/black/) python formatter in favour of flake\n\n- 0.1.12 march 31, 2022\n\n  - forked\n\n- 0.1.11 october 4, 2018\n\n  - moved `s3 + cloudfront` fallback to `heroku.com`, cuz someone from florida did ~25m requests last month\n\n- 0.1.10 february 11, 2018\n\n  - minor fix docs `cloudfront` url\n\n- 0.1.9 february 11, 2018\n\n  - fix `w3schools.com` renamed `ie/edge` to `edge/ie`\n  - moved `heroku.com` fallback to `s3 + cloudfront`\n  - stop testing python3.3 and pypy\n\n- 0.1.8 november 2, 2017\n\n  - fix `useragentstring.com` `can't connect to local mysql server through socket`\n\n- 0.1.7 april 2, 2017\n\n  - fix broken readme.rst\n\n- 0.1.6 april 2, 2017\n\n  - fixes bug `use_cache_server` do not affected anything\n  - `w3schools.com <https://www.w3schools.com/browsers/browsers_stats.asp>`\\_ moved to `https`\n  - `verify_ssl` options added, by default it is `true` (`urllib.urlopen` ssl context for python 2.7.9- and 3.4.3- is not supported)\n\n- 0.1.5 february 28, 2017\n\n  - added `ua.edge` alias to internet explorer\n  - w3schools.com starts displaying `edge` statistic\n  - python 2.6 is not tested anymore\n  - `use_cache_server` option added\n  - increased `fake_useragent.settings.http_timeout` to 5 seconds\n\n- 0.1.4 december 14, 2016\n\n  - added custom data file location support\n  - added `fallback` browser support, in case of unavailable data sources\n  - added alias `fake_useragent.fakeuseragent` for `fake_useragent.useragent`\n  - added alias `fake_useragent.useragenterror` for `fake_useragent.fakeuseragenterror`\n  - reduced `fake_useragent.settings.http_timeout` to 3 seconds\n  - started migration to new data file format\n  - simplified a lot 4+ years out of date code\n  - better thread/greenlet safety\n  - added verbose logging\n  - added `safe_attrs` for prevent overriding by `__getattr__`\n\n- 0.1.3 november 24, 2016\n\n  - added hosted data file, when remote services is unavailable\n  - raises `fake_useragent.errors.fakeuseragenterror` in case when there is not way to download data\n  - raises `fake_useragent.errors.fakeuseragenterror` instead of `none` in case of unknown browser\n  - added `gevent.sleep` support in `gevent` patched environment when trying to download data\n\n- x.x.x xxxxxxx xx, xxxx\n  - xxxxx ?????\n\n### authors\n\nyou can visit [authors page](https://github.com/fake-useragent/fake-useragent/blob/master/authors).\n",
  "docs_url": null,
  "keywords": "user,agent,user agent,useragent,fake,fake useragent,fake user agent",
  "license": "",
  "name": "fake-useragent",
  "package_url": "https://pypi.org/project/fake-useragent/",
  "project_url": "https://pypi.org/project/fake-useragent/",
  "project_urls": {
    "Homepage": "https://github.com/fake-useragent/fake-useragent"
  },
  "release_url": "https://pypi.org/project/fake-useragent/1.4.0/",
  "requires_dist": [
    "importlib-resources >=5.0 ; python_version < \"3.10\"",
    "importlib-metadata ~=4.0 ; python_version < \"3.8\""
  ],
  "requires_python": "",
  "summary": "up-to-date simple useragent faker with real world database",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "hellysmile@gmail.com",
    "melroy@melroy.org"
  ],
  "kwds": "fake_useragent fakeuseragent fakeuseragenterror useragent useragents",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fake_useragent",
  "homepage": "",
  "release_count": 32,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_importlib_resources"
  ]
}
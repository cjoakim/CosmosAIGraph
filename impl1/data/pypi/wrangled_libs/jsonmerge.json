{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "merge a series of json documents\n================================\n\nthis python module allows you to merge a series of json documents into a\nsingle one.\n\nthis problem often occurs for example when different authors fill in\ndifferent parts of a common document and you need to construct a document\nthat includes contributions from all the authors. it also helps when\ndealing with consecutive versions of a document where different fields get\nupdated over time.\n\nconsider a trivial example with two documents::\n\n    >>> base = {\n    ...         \"foo\": 1,\n    ...         \"bar\": [ \"one\" ],\n    ...      }\n\n    >>> head = {\n    ...         \"bar\": [ \"two\" ],\n    ...         \"baz\": \"hello, world!\"\n    ...     }\n\nwe call the document we are merging changes into *base* and the changed\ndocument *head*. to merge these two documents using *jsonmerge*::\n\n    >>> from pprint import pprint\n\n    >>> from jsonmerge import merge\n    >>> result = merge(base, head)\n\n    >>> pprint(result, width=40)\n    {'bar': ['two'],\n     'baz': 'hello, world!',\n     'foo': 1}\n\nas you can see, when encountering an json object, *jsonmerge* by default\nreturns fields that appear in either *base* or *head* document. for other\njson types, it simply replaces the older value. these principles are also\napplied in case of multiple nested json objects.\n\nin a more realistic use case however, you might want to apply different\n*merge strategies* to different parts of the document. you can tell\n*jsonmerge* how to do that using a syntax based on `json schema`_.\n\nif you already have schemas for your document, you can simply expand them\nwith some additional keywords. apart from the custom keywords described\nbelow, *jsonmerge* by default uses the schema syntax defined in the `draft\n4`_ of the json schema specification.\n\nyou use the *mergestrategy* schema keyword to specify the strategy. the\ndefault two strategies mentioned above are called *objectmerge* for objects\nand *overwrite* for all other types.\n\nlet's say you want to specify that the merged *bar* field in the example\ndocument above should contain elements from all documents, not just the\nlatest one. you can do this with a schema like this::\n\n    >>> schema = {\n    ...             \"properties\": {\n    ...                 \"bar\": {\n    ...                     \"mergestrategy\": \"append\"\n    ...                 }\n    ...             }\n    ...         }\n\n    >>> from jsonmerge import merger\n    >>> merger = merger(schema)\n    >>> result = merger.merge(base, head)\n\n    >>> pprint(result, width=40)\n    {'bar': ['one', 'two'],\n     'baz': 'hello, world!',\n     'foo': 1}\n\nanother common example is when you need to keep a versioned list of values\nthat appeared in the series of documents::\n\n    >>> schema = {\n    ...             \"properties\": {\n    ...                 \"foo\": {\n    ...                     \"type\": \"object\",\n    ...                     \"mergestrategy\": \"version\",\n    ...                     \"mergeoptions\": { \"limit\": 5 }\n    ...                 }\n    ...             },\n    ...             \"additionalproperties\": false\n    ...         }\n    >>> from jsonmerge import merger\n    >>> merger = merger(schema)\n\n    >>> rev1 = {\n    ...     'foo': {\n    ...         'greeting': 'hello, world!'\n    ...     }\n    ... }\n\n    >>> rev2 = {\n    ...     'foo': {\n    ...         'greeting': 'howdy, world!'\n    ...     }\n    ... }\n\n    >>> base = none\n    >>> base = merger.merge(base, rev1, merge_options={\n    ...                     'version': {\n    ...                         'metadata': {\n    ...                             'revision': 1\n    ...                         }\n    ...                     }\n    ...                 })\n    >>> base = merger.merge(base, rev2, merge_options={\n    ...                     'version': {\n    ...                         'metadata': {\n    ...                             'revision': 2\n    ...                         }\n    ...                     }\n    ...                 })\n    >>> pprint(base, width=55)\n    {'foo': [{'revision': 1,\n              'value': {'greeting': 'hello, world!'}},\n             {'revision': 2,\n              'value': {'greeting': 'howdy, world!'}}]}\n\nnote that we use the *mergeoptions* keyword in the schema to supply\nadditional options to the merge strategy. in this case, we tell the\n*version* strategy to retain only 5 most recent versions of this field.\n\nwe also used the *merge_options* argument to supply some options that are\nspecific to each call of the *merge* method. options specified this\nway are applied to all invocations of a specific strategy in a schema (in\ncontrast to *mergeoptions*, which applies only to the strategy invocation\nin that specific location in the schema). options specified in\n*mergeoptions* schema keyword override the options specified in the\n*merge_options* argument.\n\nthe *metadata* option for the *version* strategy can contain some document\nmeta-data that is included for each version of the field. *metadata* can\ncontain an arbitrary json object.\n\nexample above also demonstrates how *jsonmerge* is typically used when\nmerging more than two documents. typically you start with an empty *base*\nand then consecutively merge different *heads* into it.\n\na common source of problems are documents that do not match the schema used\nfor merging. *jsonmerge* by itself does not validate input documents. it\nonly uses the schema to obtain necessary information to apply appropriate merge\nstrategies. since the default strategies are used for parts of the\ndocument that are not covered by the schema it's easy to get unexpected\noutput without any obvious errors raised by *jsonmerge*.\n\nin the following example, the property *foo* (uppercase f) does not match\n*foo* (lowercase f) in the schema and hence the *version* strategy is not\napplied as with previous two revisions::\n\n    >>> rev3 = {\n    ...     'foo': {\n    ...         'greeting': 'howdy, world!'\n    ...     }\n    ... }\n\n    >>> base = merger.merge(base, rev3, merge_options={\n    ...                     'version': {\n    ...                         'metadata': {\n    ...                             'revision': 3\n    ...                         }\n    ...                     }\n    ...                 })\n\n    >>> pprint(base, width=55)\n    {'foo': {'greeting': 'howdy, world!'},\n     'foo': [{'revision': 1,\n              'value': {'greeting': 'hello, world!'}},\n             {'revision': 2,\n              'value': {'greeting': 'howdy, world!'}}]}\n\nhence it is recommended to validate the input documents against the schema\nbefore passing them to *jsonmerge*. this practice is even more effective if\nthe schema is filled in with more information than strictly necessary for\n*jsonmerge* (e.g. adding information about types, restrict valid object\nproperties with *additionalproperties*, etc.)::\n\n    >>> from jsonschema import validate\n    >>> validate(rev1, schema)\n    >>> validate(rev2, schema)\n    >>> validate(rev3, schema)\n    traceback (most recent call last):\n        ...\n    jsonschema.exceptions.validationerror: additional properties are not allowed ('foo' was unexpected)\n\nif you care about well-formedness of your documents, you might also want to\nobtain a schema for the documents that the *merge* method creates.\n*jsonmerge* provides a way to automatically generate it from a schema for\nthe input document::\n\n    >>> result_schema = merger.get_schema()\n\n    >>> pprint(result_schema, width=80)\n    {'additionalproperties': false,\n     'properties': {'foo': {'items': {'properties': {'value': {'type': 'object'}}},\n                            'maxitems': 5,\n                            'type': 'array'}}}\n\nnote that because of the *version* strategy, the type of the *foo* field\nchanged from *object* to *array*.\n\n\nmerge strategies\n----------------\n\nthese are the currently implemented merge strategies.\n\noverwrite\n  overwrite with the value in *base* with value in *head*. works with any\n  type.\n\ndiscard\n  keep the value in *base*, even if *head* contains a different value.\n  works with any type.\n\n  by default, if *base* does not contain any value (i.e. that part of the\n  document is undefined), the value after merge is kept undefined. this can\n  be changed with the *keepifundef* option. if this option is *true*, then\n  the value from *head* will be retained in this case. this is useful if\n  you are merging a series of documents and want to keep the value that\n  first appears in the series, but want to discard further modifications.\n\nappend\n  append arrays. works only with arrays.\n\n  you can specify a *sortbyref* merge option to indicate the key that will\n  be used to sort the items in the array. this option can be an arbitrary\n  *json pointer*. when resolving the pointer the root is placed at the\n  root of the array item. sort order can be reversed by setting the\n  *sortreverse* option.\n\narraymergebyid\n  merge arrays, identifying items to be merged by an id field. resulting\n  arrays have items from both *base* and *head* arrays.  any items that\n  have identical an id are merged based on the strategy specified further\n  down in the hierarchy.\n\n  by default, array items are expected to be objects and id of the item is\n  obtained from the *id* property of the object.\n\n  you can specify an arbitrary *json pointer* to point to the id of the\n  item using the *idref* merge option. when resolving the pointer, document\n  root is placed at the root of the array item (e.g. by default, *idref* is\n  '/id'). you can also set *idref* to '/' to treat an array of integers or\n  strings as a set of unique values.\n\n  array items in *head* for which the id cannot be identified (e.g. *idref*\n  pointer is invalid) are ignored.\n\n  you can specify an additional item id to be ignored using the *ignoreid*\n  merge option.\n\n  a compound id can be specified by setting *idref* to an array of\n  pointers. in that case, if *any* pointer in the array is invalid for an\n  object in *head*, the object is ignored. if using an array for *idref*\n  and if *ignoreid* option is also defined, *ignoreid* must be an array as\n  well.\n\n  you can specify a *sortbyref* merge option to indicate the key that will\n  be used to sort the items in the array. this option can be an arbitrary\n  *json pointer*. the pointer is resolved in the same way as *idref*. sort\n  order can be reversed by setting the *sortreverse* option.\n\narraymergebyindex\n  merge array items by their index in the array. similarly to\n  *arraymergebyid* strategy, the resulting arrays have items from both\n  *base* and *head* arrays. items that occur at identical positions in both\n  arrays will be merged based on the strategy specified further down in the\n  hierarchy.\n\nobjectmerge\n  merge objects. resulting objects have properties from both *base* and\n  *head*. any properties that are present both in *base* and *head* are\n  merged based on the strategy specified further down in the hierarchy\n  (e.g. in *properties*, *patternproperties* or *additionalproperties*\n  schema keywords).\n\n  the *objclass* option allows one to request a different dictionary class\n  to be used to hold the json object. the possible values are names that\n  correspond to specific python classes. built-in names include\n  *ordereddict*, to use the collections.ordereddict class, or *dict*,\n  which uses the python's dict built-in. if not specified, *dict* is\n  used by default.\n\n  note that additional classes or a different default can be configured via\n  the merger() constructor (see below).\n\nversion\n  changes the type of the value to an array. new values are appended to the\n  array in the form of an object with a *value* property. this way all\n  values seen during the merge are preserved.\n\n  you can add additional properties to the appended object using the\n  *metadata* option. additionally, you can use *metadataschema* option to\n  specify the schema for the object in the *metadata* option.\n\n  you can limit the length of the list using the *limit* option in the\n  *mergeoptions* keyword.\n\n  by default, if a *head* document contains the same value as the *base*,\n  document, no new version will be appended. you can change this by setting\n  *ignoredups* option to *false*.\n\nif a merge strategy is not specified in the schema, *objectmerge* is used\nfor objects and *overwrite* for all other values (but see also the section\nbelow regarding keywords that apply subschemas).\n\nyou can implement your own strategies by making subclasses of\njsonmerge.strategies.strategy and passing them to merger() constructor\n(see below).\n\n\nthe merger class\n----------------\n\nthe merger class allows you to further customize the merging of json\ndata by allowing you to:\n\n- set the schema containing the merge strategy configuration,\n- provide additional strategy implementations,\n- set a default class to use for holding json object data and\n- configure additional json object classes selectable via the *objclass*\n  merge option.\n\nthe merger constructor takes the following arguments (all optional, except\nschema):\n\nschema\n   the json schema that contains the merge strategy directives\n   provided as a json object.  an empty dictionary should be provided\n   if no strategy configuration is needed.\n\nstrategies\n   a dictionary mapping strategy names to instances of strategy\n   classes.  these will be combined with the built-in strategies\n   (overriding them with the instances having the same name).\n\nobjclass_def\n   the name of a supported dictionary-like class to hold json data by\n   default in the merged result. the name must match a built-in name or one\n   provided in the *objclass_menu* parameter.\n\nobjclass_menu\n   a dictionary providing additional classes to use as json object\n   containers.  the keys are names that can be used as values for the\n   *objectmerge* strategy's *objclass* option or the *objclass_def*\n   argument. each value is a function or class that produces an instance of\n   the json object container. it must support an optional dictionary-like\n   object as a parameter which initializes its contents.\n\nvalidatorclass\n    a *jsonschema.validator* subclass. this can be used to specify which\n    json schema draft version will be used during merge. some details such\n    as reference resolution are different between versions. by default, the\n    draft 4 validator is used.\n\n\nsupport for keywords that apply subschemas\n------------------------------------------\n\ncomplex merging of documents with schemas that use keywords *allof*,\n*anyof* and *oneof* can be problematic. such documents do not have a\nwell-defined type and might require merging of two values of different\ntypes, which will fail for some strategies. in such cases *get_schema()*\nmight also return schemas that never validate.\n\nthe *overwrite* strategy is usually the safest choice for such schemas.\n\nif you explicitly define a merge strategy at the same level as *allof*,\n*anyof* or *oneof* keyword, then *jsonmerge* will use the defined strategy\nand not further process any subschemas under those keywords. the\nstrategy however will descend as usual (e.g. *objectmerge* will take into\naccount subschemas under the *properties* keyword at the same level as\n*allof*).\n\nif a merge strategy is not explicitly defined and an *allof* or *anyof*\nkeyword is present, *jsonmerge* will raise an error.\n\nif a merge strategy is not explicitly defined and an *oneof* keyword is\npresent, *jsonmerge* will continue on the branch of *oneof* that validates\nboth *base* and *head*. if no branch validates, it will raise an error.\n\nyou can define more complex behaviors by defining for your own strategy\nthat defines what to do in such cases. see docstring documentation for the\n*strategy* class on how to do that.\n\n\nsecurity considerations\n-----------------------\n\na json schema document can contain *$ref* references to external schemas.\n*jsonmerge* resolves uris in these references using the mechanisms provided\nby the *jsonschema* module. external references can cause http or similar\nnetwork requests to be performed.\n\nif *jsonmerge* is used on untrusted input, this may lead to vulnerabilities\nsimilar to the xml external entity (xxe) attack.\n\n\nrequirements\n------------\n\n*jsonmerge* supports python 2 (2.7) and python 3 (3.5 and newer).\n\nyou need *jsonschema* (https://pypi.python.org/pypi/jsonschema) module\ninstalled.\n\n\ninstallation\n------------\n\nto install the latest *jsonmerge* release from the python package index::\n\n    pip install jsonmerge\n\n\nsource\n------\n\nthe latest development version is available on github:\nhttps://github.com/avian2/jsonmerge\n\nto install from source, run the following from the top of the source\ndistribution::\n\n    pip install .\n\n*jsonmerge* uses `tox`_ for testing. to run the test suite run::\n\n    tox\n\n\ntroubleshooting\n---------------\n\nthe most common problem with *jsonmerge* is getting unexpected results from\na merge. finding the exact reason why *jsonmerge* produced a particular\nresult can be complicated, especially when head and base structures are\nvery large. most often the cause is a problem with either the schema or\nhead and base that is passed to *jsonmerge*, not a bug in *jsonmerge*\nitself.\n\nhere are some tips for debugging issues with *jsonmerge*:\n\n* try to minimize the problem. prune branches of head and base structures\n  that are not relevant to your issue and re-run the merge. often just\n  getting a clearer view of the relevant parts exposes the problem.\n\n* *jsonmerge* uses the standard `logging`_ python module to print out what\n  it is doing during the merge. you need to increase verbosity to debug\n  level to see the messages.\n\n* a very common mistake is misunderstanding which part of the schema\n  applies to which part of the head and base structures. debug logs\n  mentioned in the previous point can be very helpful with that, since they\n  show how merge descends into hierarchies of all involved structures and\n  when a default strategy is used.\n\n* with large head and base it's common that parts of them are not what you\n  think they are. validate your inputs against your schema using the\n  *jsonschema* library before passing them onto *jsonmerge*. make sure your\n  schema is restrictive enough.\n\n* pay special attention to parts of the schema that use *oneof*, *anyof*,\n  *allof* keywords. these can sometimes validate in unexpected ways.\n\n* another problem point can be *$ref* pointers if they can cause recursion.\n  using recursive schemas with *jsonmerge* is fine, but they can often\n  product unexpected results.\n\n\nreporting bugs and contributing code\n------------------------------------\n\nthank you for contributing to *jsonmerge*! free software wouldn't be\npossible without contributions from users like you. however, please consider\nthat i maintain this project in my free time. hence i ask you to follow\nthis simple etiquette to minimize the amount of effort needed to include\nyour contribution.\n\nplease use `github issues`_ to report bugs.\n\nbefore reporting the bug, please make sure that:\n\n* you've read this entire readme file.\n* you've read the troubleshooting section of the readme file.\n* you've looked at existing issues if the bug has already been reported.\n\nmake sure that your report includes:\n\n* a *minimal*, but complete, code example that reproduces the problem,\n  including any json data required to run it. it should be something i can\n  copy-paste into a .py file and run.\n* relevant versions of *jsonmerge* and *jsonschema* - either release number\n  on pypi or the git commit hash.\n* copy of the traceback, in case you are reporting an unhandled exception.\n* example of what you think should be the correct output, in case you are\n  reporting wrong result of a merge or schema generation.\n\nplease use `github pull requests`_ to contribute code. make sure that your\npull request:\n\n* passes all existing tests and includes new tests that cover added code.\n* updates *readme.rst* to document added functionality.\n\n\nlicense\n-------\n\ncopyright 2023, tomaz solc <tomaz.solc@tablix.org>\n\nthe mit license (mit)\n\npermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"software\"), to deal\nin the software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is\nfurnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in\nthe software.\n\n.. _json schema: http://json-schema.org\n.. _draft 4: http://json-schema.org/specification-links.html#draft-4\n.. _tox: https://tox.readthedocs.io/en/latest/\n.. _github issues: https://github.com/avian2/jsonmerge/issues\n.. _github pull requests: https://github.com/avian2/jsonmerge/pulls\n.. _logging: https://docs.python.org/3/library/logging.html\n\n..\n    vim: tw=75 ts=4 sw=4 expandtab softtabstop=4\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "jsonmerge",
  "package_url": "https://pypi.org/project/jsonmerge/",
  "project_url": "https://pypi.org/project/jsonmerge/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/jsonmerge/1.9.2/",
  "requires_dist": [
    "jsonschema (>2.4.0)"
  ],
  "requires_python": "",
  "summary": "merge a series of json documents.",
  "version": "1.9.2",
  "releases": [],
  "developers": [
    "tomaz.solc@tablix.org",
    "tomaz_solc"
  ],
  "kwds": "mergeoptions merging merge mergestrategy merge_options",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jsonmerge",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_jsonschema"
  ]
}
{
  "classifiers": [],
  "description": "# python wrapper for embedded conic solver (ecos)\n\n[![build status](http://github.com/embotech/ecos-python/workflows/build/badge.svg?event=push)](https://github.com/embotech/ecos-python/actions/workflows/build.yml)\n\n\n**visit www.embotech.com/ecos for detailed information on ecos.**\n\necos is a numerical software for solving convex second-order cone\nprograms (socps) of type\n```\nmin  c'*x\ns.t. a*x = b\n     g*x <=_k h\n```\nwhere the last inequality is generalized, i.e. `h - g*x` belongs to the\ncone `k`. ecos supports the positive orthant `r_+` and second-order\ncones `q_n` defined as\n```\nq_n = { (t,x) | t >= || x ||_2 }\n```\nin the definition above, t is a scalar and `x` is in `r_{n-1}`. the cone\n`k` is therefore a direct product of the positive orthant and\nsecond-order cones:\n```\nk = r_+ x q_n1 x ... x q_nn\n```\n\n## installation\nthe latest version of ecos is available via `pip`:\n\n    pip install ecos\n\nthis will download the relevant wheel for your machine.\n\n### building from source\nif you are attempting to build the python extension from source, then\nuse\n\n    make install\n\nthis will use the latest tag on git to version your local installation\nof ecos.\n\nyou will need [numpy](http://www.numpy.org/)\nand [scipy](http://www.scipy.org/). for installation instructions, see\ntheir respective pages.\n\nyou may need `sudo` privileges for a global installation.\n\n### windows users\nwindows users may experience some extreme pain when installing ecos from\nsource for python 2.7. we suggest switching to linux or mac osx.\n\nif you must use (or insist on using) windows, we suggest using\nthe [miniconda](http://repo.continuum.io/miniconda/)\ndistribution to minimize this pain.\n\nif during the installation process, you see the error message\n`unable to find vcvarsall.bat`, you will need to install\n[microsoft visual studio express 2008](go.microsoft.com/?linkid=7729279),\nsince *python 2.7* is built against the 2008 compiler.\n\nif using a newer version of python, you can use a newer version of\nvisual studio. for instance, python 3.3 is built against [visual studio\n2010](http://go.microsoft.com/?linkid=9709949).\n\n## calling ecos from python\n\nafter installing the ecos interface, you must import the module with\n```\nimport ecos\n```\nthis module provides a single function `ecos` with one of the following calling sequences:\n```\nsolution = ecos.solve(c,g,h,dims)\nsolution = ecos.solve(c,g,h,dims,a,b,**kwargs)\n```\nthe arguments `c`, `h`, and `b` are numpy arrays (i.e., matrices with a single\ncolumn).  the arguments `g` and `a` are scipy *sparse* matrices in csr format;\nif they are not of the proper format, ecos will attempt to convert them.  the\nargument `dims` is a dictionary with two fields, `dims['l']` and `dims['q']`.\nthese are the same fields as in the matlab case. if the fields are omitted or\nempty, they default to 0.\nthe argument `kwargs` can include the keywords\n+ `feastol`, `abstol`, `reltol`, `feastol_inacc`, `abstol_innac`, and `reltol_inacc` for tolerance values,\n+ `max_iters` for the maximum number of iterations,\n+ the booleans `verbose` and `mi_verbose`,\n+ `bool_vars_idx`, a list of `int`s which index the boolean variables,\n+ `int_vars_idx`, a list of `int`s which index the integer variables,\n+ `mi_max_iters` for maximum number of branch and bound iterations (mixed integer problems only),\n+ `mi_abs_eps` for the absolute tolerance between upper and lower bounds (mixed integer problems only), and\n+ `mi_rel_eps` for the relative tolerance, (u-l)/l, between upper and lower bounds (mixed integer problems only).\n\nthe arguments `a`, `b`, and `kwargs` are optional.\n\nthe returned object is a dictionary containing the fields `solution['x']`, `solution['y']`, `solution['s']`, `solution['z']`, and `solution['info']`.\nthe first four are numpy arrays containing the relevant solution. the last field contains a dictionary with the same fields as the `info` struct in the matlab interface.\n\n## using ecos with cvxpy\n\n[cvxpy](http://cvxpy.org) is a powerful python modeling framework for\nconvex optimization, similar to the matlab counterpart cvx. ecos is one\nof the default solvers in cvxpy, so there is nothing special you have to\ndo in order to use ecos with cvxpy, besides specifying it as a solver.\nhere is a small\n[example](http://www.cvxpy.org/en/latest/tutorial/advanced/index.html#solve-method-options)\nfrom the cvxpy tutorial:\n\n```py\nimport cvxpy as cp\n\n# solving a problem with different solvers.\nx = cp.variable(2)\nobj = cp.minimize(cp.norm(x, 2) + cp.norm(x, 1))\nconstraints = [x >= 2]\nprob = cp.problem(obj, constraints)\n\n# solve with ecos.\nprob.solve(solver=cp.ecos)\nprint(\"optimal value with ecos:\", prob.value)\n```\n\n## ecos versioning\nthe python module contains two version numbers:\n\n1. `ecos.__version__`: this is the version of the python wrapper for\n   ecos\n2. `ecos.__solver_version__`: this is the version of the underlying ecos\n   solver\n\nthese two version numbers should typically agree, but they might not\nwhen a bug in the python module has been fixed and nothing in the\nunderlying c solver has changed. the major version numbers should agree,\nhowever.\n\n### what happened to 2.0.7?\nbecause version-syncing ecos and ecos-python can be tricky, the 2.0.7\nversion did not incorporate some minor changes to ecos. in an\nill-advised move, the release was deleted in hopes it could be\nre-uploaded, despite plenty warnings stating otherwise.\n\ninstead, a post release has been made that contains identical content to\nthe 2.0.7 release. generally, `pip` should pick up the post release for\n2.0.7 and any dependencies such as `pip install \"ecos>=2.0.5\"` should still\nwork as expected.\n\n## deployment\nwhen creating new versions of the python wrapper, please use\n`bumpversion` to bump the version number and also remember to tag the\ncommit so that ci is able to properly pick it up. see\n[release](release.md) for more information.\n\n## python2 support\nstarting with version 2.0.8, ecos-python will no longer support\npython2.7. you may be able to download an [older\nversion](https://github.com/embotech/ecos-python/releases/tag/2.0.7.post1)\nbut moving forward we will no longer publish python2 wheels for use.\n\n## license\n\necos is distributed under the [gnu general public license\nv3.0](http://www.gnu.org/copyleft/gpl.html). other licenses may be\navailable upon request from [embotech](http://www.embotech.com).\n\n\n\n\n## credits\n\nthe solver is essentially based on lieven vandenberghe's [cvxopt](http://cvxopt.org) [conelp](http://www.ee.ucla.edu/~vandenbe/publications/coneprog.pdf) solver, although it differs in the particular way the linear systems are treated.\n\nthe following people have been, and are, involved in the development and maintenance of ecos:\n\n+ alexander domahidi (principal developer)\n+ eric chu (python interface, unit tests)\n+ stephen boyd (methods and maths)\n+ michael grant (cvx interface)\n+ johan l\u00f6fberg (yalmip interface)\n+ jo\u00e3o felipe santos, iain dunning (julia interface)\n+ han wang (ecos branch and bound)\n\nthe main technical idea behind ecos is described in a short [paper](http://www.stanford.edu/~boyd/papers/ecos.html). more details are given in alexander domahidi's [phd thesis](http://e-collection.library.ethz.ch/view/eth:7611?q=domahidi) in chapter 9.\n\nif you find ecos useful, you can cite it using the following bibtex entry:\n\n```\n@inproceedings{bib:domahidi2013ecos,\nauthor={domahidi, a. and chu, e. and boyd, s.},\nbooktitle={european control conference (ecc)},\ntitle={{ecos}: {a}n {socp} solver for embedded systems},\nyear={2013},\npages={3071-3076}\n}\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "gplv3",
  "name": "ecos",
  "package_url": "https://pypi.org/project/ecos/",
  "project_url": "https://pypi.org/project/ecos/",
  "project_urls": {
    "Homepage": "http://github.com/embotech/ecos"
  },
  "release_url": "https://pypi.org/project/ecos/2.0.12/",
  "requires_dist": [
    "numpy (>=1.6)",
    "scipy (>=0.9)"
  ],
  "requires_python": "",
  "summary": "this is the python package for ecos: embedded cone solver. see github page for more information.",
  "version": "2.0.12",
  "releases": [],
  "developers": [
    "alexander_domahidi",
    "domahidi@embotech.com",
    "echu@cs.stanford.edu",
    "hanwang2@stanford.edu",
    "tiagoakle@gmail.com"
  ],
  "kwds": "coneprog cone solvers solver cones",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_ecos",
  "homepage": "http://github.com/embotech/ecos",
  "release_count": 21,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "# prefect-snowflake\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/15331990/217983397-036ddfd1-22c4-4113-8045-d5d9e43b963c.png\">\n    <br>\n    <a href=\"https://pypi.python.org/pypi/prefect-snowflake/\" alt=\"pypi version\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/prefect-snowflake?color=0052ff&labelcolor=090422\"></a>\n    <a href=\"https://github.com/prefecthq/prefect-snowflake/\" alt=\"stars\">\n        <img src=\"https://img.shields.io/github/stars/prefecthq/prefect-snowflake?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://pepy.tech/badge/prefect-snowflake/\" alt=\"downloads\">\n        <img src=\"https://img.shields.io/pypi/dm/prefect-snowflake?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://github.com/prefecthq/prefect-snowflake/pulse\" alt=\"activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/prefecthq/prefect-snowflake?color=0052ff&labelcolor=090422\" /></a>\n    <br>\n    <a href=\"https://prefect-community.slack.com\" alt=\"slack\">\n        <img src=\"https://img.shields.io/badge/slack-join_community-red.svg?color=0052ff&labelcolor=090422&logo=slack\" /></a>\n    <a href=\"https://discourse.prefect.io/\" alt=\"discourse\">\n        <img src=\"https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052ff&labelcolor=090422&logo=discourse\" /></a>\n</p>\n\nvisit the full docs [here](https://prefecthq.github.io/prefect-snowflake) to see additional examples and the api reference.\n\n## welcome!\n\nthe prefect-snowflake collection makes it easy to connect to a snowflake database in your prefect flows. check out the examples below to get started!\n\n## getting started\n\n### integrate with prefect flows\n\nprefect works with snowflake by providing dataflow automation for faster, more efficient data pipeline creation, execution, and monitoring.\n\nthis results in reduced errors, increased confidence in your data, and ultimately, faster insights.\n\nto set up a table, use the `execute` and `execute_many` methods. then, use the `fetch_many` method to retrieve data in a stream until there's no more data.\n\nby using the `snowflakeconnector` as a context manager, you can make sure that the snowflake connection and cursors are closed properly after you're done with them.\n\nbe sure to install [prefect-snowflake](#installation) and [save to block](#saving-credentials-to-block) to run the examples below!\n\n=== \"sync\"\n\n```python\nfrom prefect import flow, task\nfrom prefect_snowflake import snowflakeconnector\n\n\n@task\ndef setup_table(block_name: str) -> none:\n    with snowflakeconnector.load(block_name) as connector:\n        connector.execute(\n            \"create table if not exists customers (name varchar, address varchar);\"\n        )\n        connector.execute_many(\n            \"insert into customers (name, address) values (%(name)s, %(address)s);\",\n            seq_of_parameters=[\n                {\"name\": \"ford\", \"address\": \"highway 42\"},\n                {\"name\": \"unknown\", \"address\": \"space\"},\n                {\"name\": \"me\", \"address\": \"myway 88\"},\n            ],\n        )\n\n@task\ndef fetch_data(block_name: str) -> list:\n    all_rows = []\n    with snowflakeconnector.load(block_name) as connector:\n        while true:\n            # repeated fetch* calls using the same operation will\n            # skip re-executing and instead return the next set of results\n            new_rows = connector.fetch_many(\"select * from customers\", size=2)\n            if len(new_rows) == 0:\n                break\n            all_rows.append(new_rows)\n    return all_rows\n\n@flow\ndef snowflake_flow(block_name: str) -> list:\n    setup_table(block_name)\n    all_rows = fetch_data(block_name)\n    return all_rows\n\nsnowflake_flow()\n```\n\n=== \"async\"\n\n```python\nfrom prefect import flow, task\nfrom prefect_snowflake import snowflakeconnector\nimport asyncio\n\n@task\nasync def setup_table(block_name: str) -> none:\n    with await snowflakeconnector.load(block_name) as connector:\n        await connector.execute(\n            \"create table if not exists customers (name varchar, address varchar);\"\n        )\n        await connector.execute_many(\n            \"insert into customers (name, address) values (%(name)s, %(address)s);\",\n            seq_of_parameters=[\n                {\"name\": \"ford\", \"address\": \"highway 42\"},\n                {\"name\": \"unknown\", \"address\": \"space\"},\n                {\"name\": \"me\", \"address\": \"myway 88\"},\n            ],\n        )\n\n@task\nasync def fetch_data(block_name: str) -> list:\n    all_rows = []\n    with await snowflakeconnector.load(block_name) as connector:\n        while true:\n            # repeated fetch* calls using the same operation will\n            # skip re-executing and instead return the next set of results\n            new_rows = await connector.fetch_many(\"select * from customers\", size=2)\n            if len(new_rows) == 0:\n                break\n            all_rows.append(new_rows)\n    return all_rows\n\n@flow\nasync def snowflake_flow(block_name: str) -> list:\n    await setup_table(block_name)\n    all_rows = await fetch_data(block_name)\n    return all_rows\n\nasyncio.run(snowflake_flow(\"example\"))\n```\n\n### access underlying snowflake connection\n\nif the native methods of the block don't meet your requirements, don't worry.\n\nyou have the option to access the underlying snowflake connection and utilize its built-in methods as well.\n\n```python\nimport pandas as pd\nfrom prefect import flow\nfrom prefect_snowflake.database import snowflakeconnector\nfrom snowflake.connector.pandas_tools import write_pandas\n\n@flow\ndef snowflake_write_pandas_flow():\n    connector = snowflakeconnector.load(\"my-block\")\n    with connector.get_connection() as connection:\n        table_name = \"table_name\"\n        ddl = \"name string, number int\"\n        statement = f'create table if not exists {table_name} ({ddl})'\n        with connection.cursor() as cursor:\n            cursor.execute(statement)\n\n        # case sensitivity matters here!\n        df = pd.dataframe([('marvin', 42), ('ford', 88)], columns=['name', 'number'])\n        success, num_chunks, num_rows, _ = write_pandas(\n            conn=connection,\n            df=df,\n            table_name=table_name,\n            database=snowflake_connector.database,\n            schema=snowflake_connector.schema_  # note the \"_\" suffix\n        )\n```\n\n## resources\n\nfor more tips on how to use tasks and flows in a collection, check out [using collections](https://orion-docs.prefect.io/collections/usage/)!\n\n### installation\n\ninstall `prefect-snowflake` with `pip`:\n\n```bash\npip install prefect-snowflake\n```\n\na list of available blocks in `prefect-snowflake` and their setup instructions can be found [here](https://prefecthq.github.io/prefect-snowflake/blocks_catalog).\n\nrequires an installation of python 3.7+.\n\nwe recommend using a python virtual environment manager such as pipenv, conda or virtualenv.\n\nthese tasks are designed to work with prefect 2.0. for more information about how to use prefect, please refer to the [prefect documentation](https://orion-docs.prefect.io/).\n\n### saving credentials to block\n\nnote, to use the `load` method on blocks, you must already have a block document [saved through code](https://orion-docs.prefect.io/concepts/blocks/#saving-blocks) or [saved through the ui](https://orion-docs.prefect.io/ui/blocks/).\n\nbelow is a walkthrough on saving a `snowflakecredentials` block through code.\n\n1. head over to https://app.snowflake.com/.\n2. login to your snowflake account, e.g. nh12345.us-east-2.aws, with your username and password.\n3. use those credentials to fill replace the placeholders below.\n\n```python\nfrom prefect_snowflake import snowflakecredentials\n\ncredentials = snowflakecredentials(\n    account=\"account-placeholder\",  # resembles nh12345.us-east-2.aws\n    user=\"user-placeholder\",\n    password=\"password-placeholder\"\n)\ncredentials.save(\"credentials-block-name-placeholder\")\n```\n\nthen, to create a `snowflakeconnector` block:\n\n1. after logging in, click on any worksheet.\n2. on the left side, select a database and schema.\n3. on the top right, select a warehouse.\n3. create a short script, replacing the placeholders below.\n\n```python\nfrom prefect_snowflake import snowflakecredentials, snowflakeconnector\n\ncredentials = snowflakecredentials.load(\"credentials-block-name-placeholder\")\n\nconnector = snowflakeconnector(\n    credentials=credentials,\n    database=\"database-placeholder\",\n    schema=\"schema-placeholder\",\n    warehouse=\"compute_wh\",\n)\nconnector.save(\"connector-block-name-placeholder\")\n```\n\ncongrats! you can now easily load the saved block, which holds your credentials and connection info:\n\n```python\nfrom prefect_snowflake import snowflakecredentials, snowflakeconnector\n\nsnowflakecredentials.load(\"credentials-block-name-placeholder\")\nsnowflakeconnector.load(\"connector-block-name-placeholder\")\n```\n\n!!! info \"registering blocks\"\n\nregister blocks in this module to\n[view and edit them](https://orion-docs.prefect.io/ui/blocks/)\non prefect cloud:\n\n```bash\nprefect block register -m prefect_snowflake\n```\n\na list of available blocks in `prefect-snowflake` and their setup instructions can be found [here](https://prefecthq.github.io/prefect-snowflake/blocks_catalog).\n\n### feedback\n\nif you encounter any bugs while using `prefect-snowflake`, feel free to open an issue in the [prefect-snowflake](https://github.com/prefecthq/prefect-snowflake) repository.\n\nif you have any questions or issues while using `prefect-snowflake`, you can find help in either the [prefect discourse forum](https://discourse.prefect.io/) or the [prefect slack community](https://prefect.io/slack).\n\nfeel free to star or watch [`prefect-snowflake`](https://github.com/prefecthq/prefect-snowflake) for updates too!\n\n### contributing\n\nif you'd like to help contribute to fix an issue or add a feature to `prefect-snowflake`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n\nhere are the steps:\n\n1. [fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)\n2. [clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)\n3. install the repository and its dependencies:\n```\npip install -e \".[dev]\"\n```\n4. make desired changes\n5. add tests\n6. insert an entry to [changelog.md](https://github.com/prefecthq/prefect-snowflake/blob/main/changelog.md)\n7. install `pre-commit` to perform quality checks prior to commit:\n```\npre-commit install\n```\n8. `git commit`, `git push`, and create a pull request\n",
  "docs_url": null,
  "keywords": "prefect",
  "license": "apache license 2.0",
  "name": "prefect-snowflake",
  "package_url": "https://pypi.org/project/prefect-snowflake/",
  "project_url": "https://pypi.org/project/prefect-snowflake/",
  "project_urls": {
    "Homepage": "https://github.com/PrefectHQ/prefect-snowflake"
  },
  "release_url": "https://pypi.org/project/prefect-snowflake/0.27.2/",
  "requires_dist": [
    "prefect >=2.13.5",
    "snowflake-connector-python >=2.7.6",
    "pytest ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "mkdocs ; extra == 'dev'",
    "mkdocs-material ; extra == 'dev'",
    "mkdocstrings-python-legacy ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest-asyncio ; extra == 'dev'",
    "mkdocs-gen-files ; extra == 'dev'",
    "interrogate ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "pillow ; extra == 'dev'",
    "mock ; (python_version < \"3.8\") and extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "prefect integrations for interacting with snowflake.",
  "version": "0.27.2",
  "releases": [],
  "developers": [
    "help@prefect.io",
    "prefect_technologies"
  ],
  "kwds": "prefect_snowflake snowflake_flow snowflake_connector snowflake snowflakecredentials",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_prefect_snowflake",
  "homepage": "https://github.com/prefecthq/prefect-snowflake",
  "release_count": 15,
  "dependency_ids": [
    "pypi_black",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_interrogate",
    "pypi_isort",
    "pypi_mkdocs",
    "pypi_mkdocs_gen_files",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings_python_legacy",
    "pypi_mock",
    "pypi_mypy",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_prefect",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_snowflake_connector_python"
  ]
}
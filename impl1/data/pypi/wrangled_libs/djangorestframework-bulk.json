{
  "classifiers": [
    "development status :: 3 - alpha",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: internet :: www/http",
    "topic :: utilities"
  ],
  "description": "django rest framework bulk\n==========================\n\n.. image:: https://badge.fury.io/py/djangorestframework-bulk.png\n    :target: http://badge.fury.io/py/djangorestframework-bulk\n\n.. image:: https://travis-ci.org/miki725/django-rest-framework-bulk.svg?branch=master\n    :target: https://travis-ci.org/miki725/django-rest-framework-bulk\n\ndjango rest framework bulk crud view mixins.\n\noverview\n--------\n\ndjango rest framework comes with many generic views however none\nof them allow to do bulk operations such as create, update and delete.\nto keep the core of django rest framework simple, its maintainer\nsuggested to create a separate project to allow for bulk operations\nwithin the framework. that is the purpose of this project.\n\nrequirements\n------------\n\n* python>=2.7\n* django>=1.3\n* django rest framework >= 3.0.0\n* rest framework >= 2.2.5\n  (**only with** django<1.8 since drf<3 does not support django1.8)\n\ninstalling\n----------\n\nusing pip::\n\n    $ pip install djangorestframework-bulk\n\nor from source code::\n\n    $ pip install -e git+http://github.com/miki725/django-rest-framework-bulk#egg=djangorestframework-bulk\n\nexample\n-------\n\nthe bulk views (and mixins) are very similar to django rest framework's own\ngeneric views (and mixins)::\n\n    from rest_framework_bulk import (\n        bulklistserializer,\n        bulkserializermixin,\n        listbulkcreateupdatedestroyapiview,\n    )\n\n    class fooserializer(bulkserializermixin, modelserializer):\n        class meta(object):\n            model = foomodel\n            # only necessary in drf3\n            list_serializer_class = bulklistserializer\n\n    class fooview(listbulkcreateupdatedestroyapiview):\n        queryset = foomodel.objects.all()\n        serializer_class = fooserializer\n\nthe above will allow to create the following queries\n\n::\n\n    # list queryset\n    get\n\n::\n\n    # create single resource\n    post\n    {\"field\":\"value\",\"field2\":\"value2\"}     <- json object in request data\n\n::\n\n    # create multiple resources\n    post\n    [{\"field\":\"value\",\"field2\":\"value2\"}]\n\n::\n\n    # update multiple resources (requires all fields)\n    put\n    [{\"field\":\"value\",\"field2\":\"value2\"}]   <- json list of objects in data\n\n::\n\n    # partial update multiple resources\n    patch\n    [{\"field\":\"value\"}]                     <- json list of objects in data\n\n::\n\n    # delete queryset (see notes)\n    delete\n\nrouter\n------\n\nthe bulk router can automatically map the bulk actions::\n\n    from rest_framework_bulk.routes import bulkrouter\n\n    class userviewset(bulkmodelviewset):\n        model = user\n\n        def allow_bulk_destroy(self, qs, filtered):\n            \"\"\"don't forget to fine-grain this method\"\"\"\n\n    router = bulkrouter()\n    router.register(r'users', userviewset)\n\ndrf3\n----\n\ndjango rest framework made many api changes which included major changes\nin serializers. as a result, please note the following in order to use\ndrf-bulk with drf3:\n\n* you must specify custom ``list_serializer_class`` if your view(set)\n  will require update functionality (when using ``bulkupdatemodelmixin``)\n* drf3 removes read-only fields from ``serializer.validated_data``.\n  as a result, it is impossible to correlate each ``validated_data``\n  in ``listserializer`` with a model instance to update since ``validated_data``\n  will be missing the model primary key since that is a read-only field.\n  to deal with that, you must use ``bulkserializermixin`` mixin in your serializer\n  class which will add the model primary key field back to the ``validated_data``.\n  by default ``id`` field is used however you can customize that field\n  by using ``update_lookup_field`` in the serializers ``meta``::\n\n    class fooserializer(bulkserializermixin, modelserializer):\n        class meta(object):\n            model = foomodel\n            list_serializer_class = bulklistserializer\n            update_lookup_field = 'slug'\n\nnotes\n-----\n\nmost api urls have two url levels for each resource:\n\n1. ``url(r'foo/', ...)``\n2. ``url(r'foo/(?p<pk>\\d+)/', ...)``\n\nthe second url however is not applicable for bulk operations because\nthe url directly maps to a single resource. therefore all bulk\ngeneric views only apply to the first url.\n\nthere are multiple generic view classes in case only a certail\nbulk functionality is required. for example ``listbulkcreateapiview``\nwill only do bulk operations for creating resources.\nfor a complete list of available generic view classes, please\ntake a look at the source code at ``generics.py`` as it is mostly\nself-explanatory.\n\nmost bulk operations are pretty safe in terms of how they operate,\nthat is you explicitly describe all requests. for example, if you\nneed to update 3 specific resources, you have to explicitly identify\nthose resources in the request's ``put`` or ``patch`` data.\nthe only exception to this is bulk delete. consider a ``delete``\nrequest to the first url. that can potentially delete all resources\nwithout any special confirmation. to try to account for this, bulk delete\nmixin allows to implement a hook to determine if the bulk delete\nrequest should be allowed::\n\n    class fooview(bulkdestroyapiview):\n        def allow_bulk_destroy(self, qs, filtered):\n            # custom logic here\n\n            # default checks if the qs was filtered\n            # qs comes from self.get_queryset()\n            # filtered comes from self.filter_queryset(qs)\n            return qs is not filtered\n\nby default it checks if the queryset was filtered and if not will not\nallow the bulk delete to complete. the logic here is that if the request\nis filtered to only get certain resources, more attention was payed hence\nthe action is less likely to be accidental. on how to filter requests,\nplease refer to django rest\n`docs <http://www.django-rest-framework.org/api-guide/filtering>`_.\neither way, please use bulk deletes with extreme caution since they\ncan be dangerous.\n\n\n\n\nhistory\n-------\n\n0.2.1 (2015-04-26)\n~~~~~~~~~~~~~~~~~~\n\n* fixed a bug which allowed to submit data for update to serializer\n  without update field.\n  see `#34 <https://github.com/miki725/django-rest-framework-bulk/issues/34>`_.\n* removed support for django1.8 with drf2.x\n\n0.2 (2015-02-09)\n~~~~~~~~~~~~~~~~\n\n* added drf3 support. please note that drf2 is still supported.\n  now we support both drf2 and drf3!\n* fixed an issue when using viewsets, single resource update was not working due\n  to ``get_object()`` overwrite in viewset.\n\n0.1.4 (2015-02-01)\n~~~~~~~~~~~~~~~~~~\n\n* added base model viewset.\n* fixed installation issues.\n  see `#18 <https://github.com/miki725/django-rest-framework-bulk/pull/18>`_,\n  `#22 <https://github.com/miki725/django-rest-framework-bulk/pull/22>`_.\n\n0.1.3 (2014-06-11)\n~~~~~~~~~~~~~~~~~~\n\n* fixed bug how ``post_save()`` was called in bulk create.\n\n0.1.2 (2014-04-15)\n~~~~~~~~~~~~~~~~~~\n\n* fixed bug how ``pre_save()`` was called in bulk update.\n* fixed bug of unable to mixins by importing directly ``from rest_framework_bulk import <mixin>``.\n  see `#5 <https://github.com/miki725/django-rest-framework-bulk/pull/5>`_ for more info.\n\n0.1.1 (2014-01-20)\n~~~~~~~~~~~~~~~~~~\n\n* fixed installation bug with setuptools.\n\n0.1 (2014-01-18)\n~~~~~~~~~~~~~~~~\n\n* first release on pypi.\n\n\ncredits\n-------\n\ndevelopment lead\n~~~~~~~~~~~~~~~~\n\n* miroslav shubernetskiy - https://github.com/miki725\n\ncontributors\n~~~~~~~~~~~~\n\n* arien tolner - https://github.com/bounder\n* davide mendolia - https://github.com/davideme\n* kevin brown - https://github.com/kevin-brown\n* martin cavoj - https://github.com/macav\n* matthias erll - https://github.com/merll\n* mjumbe poe - https://github.com/mjumbewu\n* thomas wajs - https://github.com/thomaswajs\n* xavier ordoquy - https://github.com/xordoquy\n\n\nlicense\n-------\n\nsource code can be found at `github <https://github.com/miki725/django-rest-framework-bulk>`_.\n\n`the mit license (mit) <http://opensource.org/licenses/mit>`_::\n\n    copyright (c) 2014-2015, miroslav shubernetskiy\n\n    permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"software\"), to deal\n    in the software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the software, and to permit persons to whom the software is furnished to do so,\n    subject to the following conditions:\n\n    the above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the software.\n\n    the software is provided \"as is\", without warranty of any kind, express or implied,\n    including but not limited to the warranties of merchantability, fitness for a\n    particular purpose and noninfringement. in no event shall the authors or copyright\n    holders be liable for any claim, damages or other liability, whether in an action\n    of contract, tort or otherwise, arising from, out of or in connection with the\n    software or the use or other dealings in the software.",
  "docs_url": null,
  "keywords": "django",
  "license": "mit",
  "name": "djangorestframework-bulk",
  "package_url": "https://pypi.org/project/djangorestframework-bulk/",
  "project_url": "https://pypi.org/project/djangorestframework-bulk/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "https://github.com/miki725/django-rest-framework-bulk"
  },
  "release_url": "https://pypi.org/project/djangorestframework-bulk/0.2.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "django rest framework bulk crud view mixins",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "miroslav@miki725.com",
    "miroslav_shubernetskiy"
  ],
  "kwds": "rest_framework_bulk djangorestframework allow_bulk_destroy django bulkmodelviewset",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_djangorestframework_bulk",
  "homepage": "https://github.com/miki725/django-rest-framework-bulk",
  "release_count": 6,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "implicit\n=======\n\n[![build\nstatus](https://github.com/benfred/implicit/workflows/build/badge.svg)](https://github.com/benfred/implicit/actions?query=workflow%3abuild+branch%3amain)\n[![documentation](https://img.shields.io/badge/documentation-blue.svg)](https://benfred.github.io/implicit/)\n\n\nfast python collaborative filtering for implicit datasets.\n\nthis project provides fast python implementations of several different popular recommendation algorithms for\nimplicit feedback datasets:\n\n * alternating least squares as described in the papers [collaborative filtering for implicit feedback datasets](http://yifanhu.net/pub/cf.pdf) and [applications of the conjugate gradient method for implicit\nfeedback collaborative filtering](https://pdfs.semanticscholar.org/bfdf/7af6cf7fd7bb5e6b6db5bbd91be11597eaf0.pdf).\n\n * [bayesian personalized ranking](https://arxiv.org/pdf/1205.2618.pdf).\n\n * [logistic matrix factorization](https://web.stanford.edu/~rezab/nips2014workshop/submits/logmat.pdf)\n\n * item-item nearest neighbour models using cosine, tfidf or bm25 as a distance metric.\n\nall models have multi-threaded training routines, using cython and openmp to fit the models in\nparallel among all available cpu cores.  in addition, the als and bpr models both have custom cuda\nkernels - enabling fitting on compatible gpu's. approximate nearest neighbours libraries such as [annoy](https://github.com/spotify/annoy), [nmslib](https://github.com/searchivarius/nmslib)\nand [faiss](https://github.com/facebookresearch/faiss) can also be used by implicit to [speed up\nmaking recommendations](https://www.benfrederickson.com/approximate-nearest-neighbours-for-recommender-systems/).\n\n#### installation\n\nimplicit can be installed from pypi with:\n\n```\npip install implicit\n```\n\ninstalling with pip will use prebuilt binary wheels on x86_64 linux, windows\nand osx. these wheels include gpu support on linux.\n\nimplicit can also be installed with conda:\n\n```\n# cpu only package\nconda install -c conda-forge implicit\n\n# cpu+gpu package\nconda install -c conda-forge implicit implicit-proc=*=gpu\n```\n\n#### basic usage\n\n```python\nimport implicit\n\n# initialize a model\nmodel = implicit.als.alternatingleastsquares(factors=50)\n\n# train the model on a sparse matrix of user/item/confidence weights\nmodel.fit(user_item_data)\n\n# recommend items for a user\nrecommendations = model.recommend(userid, user_item_data[userid])\n\n# find related items\nrelated = model.similar_items(itemid)\n```\n\nthe examples folder has a program showing how to use this to [compute similar artists on the\nlast.fm dataset](https://github.com/benfred/implicit/blob/master/examples/lastfm.py).\n\nfor more information see the [documentation](https://benfred.github.io/implicit/).\n\n#### articles about implicit\n\nthese blog posts describe the algorithms that power this library:\n\n * [finding similar music with matrix factorization](https://www.benfrederickson.com/matrix-factorization/)\n * [faster implicit matrix factorization](https://www.benfrederickson.com/fast-implicit-matrix-factorization/)\n * [implicit matrix factorization on the gpu](https://www.benfrederickson.com/implicit-matrix-factorization-on-the-gpu/)\n * [approximate nearest neighbours for recommender systems](https://www.benfrederickson.com/approximate-nearest-neighbours-for-recommender-systems/)\n * [distance metrics for fun and profit](https://www.benfrederickson.com/distance-metrics/)\n\nthere are also several other articles about using implicit to build recommendation systems:\n * [h&m personalized fashion recommendations kaggle competition](https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/discussion/324129)\n * [yandex cup 2022: like prediction](https://github.com/greenwolf-nsk/yandex-cup-2022-recsys)\n * [recommending github repositories with google bigquery and the implicit library](https://medium.com/@jbochi/recommending-github-repositories-with-google-bigquery-and-the-implicit-library-e6cce666c77)\n * [intro to implicit matrix factorization: classic als with sketchfab models](http://blog.ethanrosenthal.com/2016/10/19/implicit-mf-part-1/)\n * [a gentle introduction to recommender systems with implicit feedback](https://jessesw.com/rec-system/).\n\n\n#### requirements\n\nthis library requires scipy version 0.16 or later and python version 3.6 or later.\n\ngpu support requires at least version 11 of the [nvidia cuda toolkit](https://developer.nvidia.com/cuda-downloads).\n\nthis library is tested with python 3.7, 3.8, 3.9, 3.10 and 3.11 on ubuntu, osx and windows.\n\n#### benchmarks\n\nsimple benchmarks comparing the als fitting time versus [spark can be found here](https://github.com/benfred/implicit/tree/master/benchmarks).\n\n#### optimal configuration\n\ni'd recommend configuring scipy to use intel's mkl matrix libraries. one easy way of doing this is by installing the anaconda python distribution.\n\nfor systems using openblas, i highly recommend setting 'export openblas_num_threads=1'. this\ndisables its internal multithreading ability, which leads to substantial speedups for this\npackage. likewise for intel mkl, setting 'export mkl_num_threads=1' should also be set.\n\nreleased under the mit license\n",
  "docs_url": null,
  "keywords": "matrix factorization,implicit alternating least squares,collaborative filtering,recommender systems",
  "license": "mit",
  "name": "implicit",
  "package_url": "https://pypi.org/project/implicit/",
  "project_url": "https://pypi.org/project/implicit/",
  "project_urls": {
    "Homepage": "http://github.com/benfred/implicit/"
  },
  "release_url": "https://pypi.org/project/implicit/0.7.2/",
  "requires_dist": [
    "numpy >=1.17.0",
    "scipy >=0.16",
    "tqdm >=4.27",
    "threadpoolctl"
  ],
  "requires_python": "",
  "summary": "collaborative filtering for implicit feedback datasets",
  "version": "0.7.2",
  "releases": [],
  "developers": [
    "ben@benfrederickson.com",
    "ben_frederickson"
  ],
  "kwds": "recommender recommending recommendations recommendation factorization",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_implicit",
  "homepage": "http://github.com/benfred/implicit/",
  "release_count": 46,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy",
    "pypi_threadpoolctl",
    "pypi_tqdm"
  ]
}
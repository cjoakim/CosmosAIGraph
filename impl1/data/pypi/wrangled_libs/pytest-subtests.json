{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: testing"
  ],
  "description": "===============\npytest-subtests\n===============\n\nunittest ``subtest()`` support and ``subtests`` fixture.\n\n.. image:: https://img.shields.io/pypi/v/pytest-subtests.svg\n    :target: https://pypi.org/project/pytest-subtests\n    :alt: pypi version\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest-subtests.svg\n    :target: https://anaconda.org/conda-forge/pytest-subtests\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-subtests.svg\n    :target: https://pypi.org/project/pytest-subtests\n    :alt: python versions\n\n.. image:: https://github.com/pytest-dev/pytest-subtests/workflows/test/badge.svg\n  :target: https://github.com/pytest-dev/pytest-subtests/actions\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n----\n\nthis `pytest`_ plugin was generated with `cookiecutter`_ along with `@hackebrot`_'s `cookiecutter-pytest-plugin`_ template.\n\n\nfeatures\n--------\n\n* adds support for `testcase.subtest <https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests>`__.\n\n* new ``subtests`` fixture, providing similar functionality for pure pytest tests.\n\n\ninstallation\n------------\n\nyou can install ``pytest-subtests`` via `pip`_ from `pypi`_::\n\n    $ pip install pytest-subtests\n\n\n\nusage\n-----\n\nunittest subtest() example\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    import unittest\n\n\n    class t(unittest.testcase):\n        def test_foo(self):\n            for i in range(5):\n                with self.subtest(\"custom message\", i=i):\n                    self.assertequal(i % 2, 0)\n\n\n    if __name__ == \"__main__\":\n        unittest.main()\n\n\n**output**\n\n.. code-block::\n\n    \u03bb pytest .tmp\\test-unit-subtest.py\n    ======================== test session starts ========================\n    ...\n    collected 1 item\n\n    .tmp\\test-unit-subtest.py ff.                                  [100%]\n\n    ============================= failures ==============================\n    _________________ t.test_foo [custom message] (i=1) _________________\n\n    self = <test-unit-subtest.t testmethod=test_foo>\n\n        def test_foo(self):\n            for i in range(5):\n                with self.subtest('custom message', i=i):\n    >               self.assertequal(i % 2, 0)\n    e               assertionerror: 1 != 0\n\n    .tmp\\test-unit-subtest.py:9: assertionerror\n    _________________ t.test_foo [custom message] (i=3) _________________\n\n    self = <test-unit-subtest.t testmethod=test_foo>\n\n        def test_foo(self):\n            for i in range(5):\n                with self.subtest('custom message', i=i):\n    >               self.assertequal(i % 2, 0)\n    e               assertionerror: 1 != 0\n\n    .tmp\\test-unit-subtest.py:9: assertionerror\n    ================ 2 failed, 1 passed in 0.07 seconds =================\n\n\n``subtests`` fixture example\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    def test(subtests):\n        for i in range(5):\n            with subtests.test(msg=\"custom message\", i=i):\n                assert i % 2 == 0\n\n\n**output**\n\n.. code-block::\n\n    \u03bb pytest .tmp\\test-subtest.py\n    ======================== test session starts ========================\n    ...\n    collected 1 item\n\n    .tmp\\test-subtest.py .f.f..                                    [100%]\n\n    ============================= failures ==============================\n    ____________________ test [custom message] (i=1) ____________________\n\n        def test(subtests):\n            for i in range(5):\n                with subtests.test(msg='custom message', i=i):\n    >               assert i % 2 == 0\n    e               assert (1 % 2) == 0\n\n    .tmp\\test-subtest.py:4: assertionerror\n    ____________________ test [custom message] (i=3) ____________________\n\n        def test(subtests):\n            for i in range(5):\n                with subtests.test(msg='custom message', i=i):\n    >               assert i % 2 == 0\n    e               assert (3 % 2) == 0\n\n    .tmp\\test-subtest.py:4: assertionerror\n    ================ 2 failed, 1 passed in 0.07 seconds =================\n\ncontributing\n------------\ncontributions are very welcome. tests can be run with `tox`_:\n\n.. code-block::\n\n    tox -e py37\n\nlicense\n-------\n\ndistributed under the terms of the `mit`_ license, \"pytest-subtests\" is free and open source software\n\n\nissues\n------\n\nif you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`mit`: http://opensource.org/licenses/mit\n.. _`bsd-3`: http://opensource.org/licenses/bsd-3-clause\n.. _`gnu gpl v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _`apache software license 2.0`: http://www.apache.org/licenses/license-2.0\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/pytest-dev/pytest-subtests/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`pypi`: https://pypi.org/project\n",
  "docs_url": null,
  "keywords": "test,unittest,pytest",
  "license": "mit",
  "name": "pytest-subtests",
  "package_url": "https://pypi.org/project/pytest-subtests/",
  "project_url": "https://pypi.org/project/pytest-subtests/",
  "project_urls": {
    "Homepage": "https://github.com/pytest-dev/pytest-subtests"
  },
  "release_url": "https://pypi.org/project/pytest-subtests/0.11.0/",
  "requires_dist": [
    "pytest (>=7.0)",
    "attrs (>=19.2.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "unittest subtest() support and subtests fixture",
  "version": "0.11.0",
  "releases": [],
  "developers": [
    "bruno_oliveira"
  ],
  "kwds": "pytest pyversions subtests test_foo subtest",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_subtests",
  "homepage": "https://github.com/pytest-dev/pytest-subtests",
  "release_count": 14,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_pytest"
  ]
}
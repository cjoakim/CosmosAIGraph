{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "quart\n=====\n\n.. image:: https://raw.githubusercontent.com/pallets/quart/main/artwork/logo.png\n   :alt: quart logo\n\n|build status| |docs| |pypi| |python| |license| |chat|\n\nquart is an async python web microframework. using quart you can,\n\n* render and serve html templates,\n* write (restful) json apis,\n* serve websockets,\n* stream request and response data,\n* do pretty much anything over the http or websocket protocols.\n\nquickstart\n----------\n\nquart can be installed via `pip\n<https://docs.python.org/3/installing/index.html>`_,\n\n.. code-block:: console\n\n    $ pip install quart\n\nand requires python 3.8.0 or higher (see `python version support\n<https://quart.palletsprojects.com/en/latest/discussion/python_versions.html>`_\nfor reasoning).\n\na minimal quart example is,\n\n.. code-block:: python\n\n    from quart import quart, render_template, websocket\n\n    app = quart(__name__)\n\n    @app.route(\"/\")\n    async def hello():\n        return await render_template(\"index.html\")\n\n    @app.route(\"/api\")\n    async def json():\n        return {\"hello\": \"world\"}\n\n    @app.websocket(\"/ws\")\n    async def ws():\n        while true:\n            await websocket.send(\"hello\")\n            await websocket.send_json({\"hello\": \"world\"})\n\n    if __name__ == \"__main__\":\n        app.run()\n\nif the above is in a file called ``app.py`` it can be run as,\n\n.. code-block:: console\n\n    $ python app.py\n\nto deploy this app in a production setting see the `deployment\n<https://quart.palletsprojects.com/en/latest/tutorials/deployment.html>`_\ndocumentation.\n\ncontributing\n------------\n\nquart is developed on `github <https://github.com/pallets/quart>`_. if\nyou come across an issue, or have a feature request please open an\n`issue <https://github.com/pallets/quart/issues>`_. if you want to\ncontribute a fix or the feature-implementation please do (typo fixes\nwelcome), by proposing a `merge request\n<https://github.com/pallets/quart/pulls>`_.\n\ntesting\n^^^^^^^\n\nthe best way to test quart is with `tox\n<https://tox.readthedocs.io>`_,\n\n.. code-block:: console\n\n    $ pip install tox\n    $ tox\n\nthis will check the code style and run the tests.\n\nhelp\n----\n\nthe quart `documentation <https://quart.palletsprojects.com>`_ or\n`cheatsheet\n<https://quart.palletsprojects.com/en/latest/reference/cheatsheet.html>`_\nare the best places to start, after that try searching `stack overflow\n<https://stackoverflow.com/questions/tagged/quart>`_ or ask for help\n`on discord <https://discord.gg/pallets>`_. if you still\ncan't find an answer please `open an issue\n<https://github.com/pallets/quart/issues>`_.\n\nrelationship with flask\n-----------------------\n\nquart is an asyncio reimplementation of the popular `flask\n<https://flask.palletsprojects.com>`_ microframework api. this means that if you\nunderstand flask you understand quart.\n\nlike flask, quart has an ecosystem of extensions for more specific\nneeds. in addition a number of the flask extensions work with quart.\n\nmigrating from flask\n^^^^^^^^^^^^^^^^^^^^\n\nit should be possible to migrate to quart from flask by a find and\nreplace of ``flask`` to ``quart`` and then adding ``async`` and\n``await`` keywords. see the `docs\n<https://quart.palletsprojects.com/en/latest/how_to_guides/flask_migration.html>`_\nfor more help.\n\n\n.. |build status| image:: https://github.com/pallets/quart/actions/workflows/tests.yaml/badge.svg\n   :target: https://github.com/pallets/quart/commits/main\n\n.. |docs| image:: https://img.shields.io/badge/docs-passing-brightgreen.svg\n   :target: https://quart.palletsprojects.com\n\n.. |pypi| image:: https://img.shields.io/pypi/v/quart.svg\n   :target: https://pypi.python.org/pypi/quart/\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/quart.svg\n   :target: https://pypi.python.org/pypi/quart/\n\n.. |license| image:: https://img.shields.io/badge/license-mit-blue.svg\n   :target: https://github.com/pallets/quart/blob/main/license\n\n.. |chat| image:: https://img.shields.io/badge/chat-join_now-brightgreen.svg\n   :target: https://discord.gg/pallets\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "quart",
  "package_url": "https://pypi.org/project/Quart/",
  "project_url": "https://pypi.org/project/Quart/",
  "project_urls": {
    "Documentation": "https://quart.palletsprojects.com",
    "Homepage": "https://github.com/pallets/quart/",
    "Repository": "https://github.com/pallets/quart/"
  },
  "release_url": "https://pypi.org/project/Quart/0.19.4/",
  "requires_dist": [
    "aiofiles",
    "blinker (>=1.6)",
    "click (>=8.0.0)",
    "flask (>=3.0.0)",
    "hypercorn (>=0.11.2)",
    "importlib_metadata ; python_version < \"3.10\"",
    "itsdangerous",
    "jinja2",
    "markupsafe",
    "pydata_sphinx_theme ; extra == \"docs\"",
    "python-dotenv ; extra == \"dotenv\"",
    "typing_extensions ; python_version < \"3.10\"",
    "werkzeug (>=3.0.0)"
  ],
  "requires_python": ">=3.8",
  "summary": "a python asgi web microframework with the same api as flask",
  "version": "0.19.4",
  "releases": [],
  "developers": [
    "pgjones",
    "philip.graham.jones@googlemail.com"
  ],
  "kwds": "quart websocket websockets quickstart palletsprojects",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_quart",
  "homepage": "https://github.com/pallets/quart/",
  "release_count": 59,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_blinker",
    "pypi_click",
    "pypi_flask",
    "pypi_hypercorn",
    "pypi_importlib_metadata",
    "pypi_itsdangerous",
    "pypi_jinja2",
    "pypi_markupsafe",
    "pypi_pydata_sphinx_theme",
    "pypi_python_dotenv",
    "pypi_typing_extensions",
    "pypi_werkzeug"
  ]
}
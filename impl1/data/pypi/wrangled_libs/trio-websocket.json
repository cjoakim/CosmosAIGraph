{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "# trio websocket\n\nthis library implements both server and client aspects of the [the websocket\nprotocol](https://tools.ietf.org/html/rfc6455), striving for safety,\ncorrectness, and ergonomics. it is based on the [wsproto\nproject](https://wsproto.readthedocs.io/en/latest/), which is a\n[sans-io](https://sans-io.readthedocs.io/) state machine that implements the\nmajority of the websocket protocol, including framing, codecs, and events. this\nlibrary handles i/o using [the trio\nframework](https://trio.readthedocs.io/en/latest/). this library passes the\n[autobahn test suite](https://github.com/crossbario/autobahn-testsuite).\n\nthis readme contains a brief introduction to the project. full documentation [is\navailable here](https://trio-websocket.readthedocs.io).\n\n[![pypi](https://img.shields.io/pypi/v/trio-websocket.svg?style=flat-square)](https://pypi.org/project/trio-websocket/)\n![python versions](https://img.shields.io/pypi/pyversions/trio-websocket.svg?style=flat-square)\n[![build status](https://img.shields.io/github/actions/workflow/status/python-trio/trio-websocket/ci.yml)](https://github.com/python-trio/trio-websocket/actions/workflows/ci.yml)\n[![read the docs](https://img.shields.io/readthedocs/trio-websocket.svg)](https://trio-websocket.readthedocs.io)\n\n## alternatives\n\nif you happen to only need a server, using quart via the [quart-trio](https://github.com/pgjones/quart-trio)\nextension may suffice.  while trio-websocket is more flexible, quart covers\nboth http and websocket within a single framework, and serving both from the\nsame port is straightforward.  there has yet to be a performance comparison.\n\n## installation\n\nthis library requires python 3.7 or greater. to install from pypi:\n\n    pip install trio-websocket\n\n## client example\n\nthis example demonstrates how to open a websocket url:\n\n```python\nimport trio\nfrom sys import stderr\nfrom trio_websocket import open_websocket_url\n\n\nasync def main():\n    try:\n        async with open_websocket_url('wss://echo.websocket.org') as ws:\n            await ws.send_message('hello world!')\n            message = await ws.get_message()\n            print('received message: %s' % message)\n    except oserror as ose:\n        print('connection attempt failed: %s' % ose, file=stderr)\n\ntrio.run(main)\n```\n\nthe websocket context manager connects automatically before entering the block\nand disconnects automatically before exiting the block. the full api offers a\nlot of flexibility and additional options.\n\n## server example\n\na websocket server requires a bind address, a port, and a coroutine to handle\nincoming connections. this example demonstrates an \"echo server\" that replies to\neach incoming message with an identical outgoing message.\n\n```python\nimport trio\nfrom trio_websocket import serve_websocket, connectionclosed\n\nasync def echo_server(request):\n    ws = await request.accept()\n    while true:\n        try:\n            message = await ws.get_message()\n            await ws.send_message(message)\n        except connectionclosed:\n            break\n\nasync def main():\n    await serve_websocket(echo_server, '127.0.0.1', 8000, ssl_context=none)\n\ntrio.run(main)\n```\n\nthe server's handler ``echo_server(\u2026)`` receives a connection request object.\nthis object can be used to inspect the client's request and modify the\nhandshake, then it can be exchanged for an actual websocket object ``ws``.\nagain, the full api offers a lot of flexibility and additional options.\n",
  "docs_url": null,
  "keywords": "websocket client server trio",
  "license": "",
  "name": "trio-websocket",
  "package_url": "https://pypi.org/project/trio-websocket/",
  "project_url": "https://pypi.org/project/trio-websocket/",
  "project_urls": {
    "Bug Reports": "https://github.com/python-trio/trio-websocket/issues",
    "Homepage": "https://github.com/python-trio/trio-websocket",
    "Source": "https://github.com/python-trio/trio-websocket"
  },
  "release_url": "https://pypi.org/project/trio-websocket/0.11.1/",
  "requires_dist": [
    "trio >=0.11",
    "wsproto >=0.14",
    "exceptiongroup ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.7",
  "summary": "websocket library for trio",
  "version": "0.11.1",
  "releases": [],
  "developers": [
    "mark_e",
    "mehaase@gmail.com"
  ],
  "kwds": "websocket trio_websocket serve_websocket open_websocket_url protocol",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_trio_websocket",
  "homepage": "https://github.com/python-trio/trio-websocket",
  "release_count": 19,
  "dependency_ids": [
    "pypi_exceptiongroup",
    "pypi_trio",
    "pypi_wsproto"
  ]
}
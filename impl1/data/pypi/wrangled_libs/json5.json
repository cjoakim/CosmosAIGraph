{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# pyjson5\n\na python implementation of the json5 data format.\n\n[json5](https://json5.org) extends the\n[json](http://www.json.org) data interchange format to make it\nslightly more usable as a configuration language:\n\n* javascript-style comments (both single and multi-line) are legal.\n\n* object keys may be unquoted if they are legal ecmascript identifiers\n\n* objects and arrays may end with trailing commas.\n\n* strings can be single-quoted, and multi-line string literals are allowed.\n\nthere are a few other more minor extensions to json; see the above page for\nthe full details.\n\nthis project implements a reader and writer implementation for python;\nwhere possible, it mirrors the\n[standard python json api](https://docs.python.org/library/json.html)\npackage for ease of use.\n\nthere is one notable difference from the json api: the `load()` and\n`loads()` methods support optionally checking for (and rejecting) duplicate\nobject keys; pass `allow_duplicate_keys=false` to do so (duplicates are\nallowed by default).\n\nthis is an early release. it has been reasonably well-tested, but it is\n**slow**. it can be 1000-6000x slower than the c-optimized json module,\nand is 200x slower (or more) than the pure python json module.\n\n**please note:** this library only handles json5 documents, it does not\nallow you to read arbitrary javascript. for example, bare integers can\nbe legal object keys in javascript, but they aren't in json5.\n\n## known issues\n\n* did i mention that it is **slow**?\n\n* the implementation follows python3's `json` implementation where\n  possible. this means that the `encoding` method to `dump()` is\n  ignored, and unicode strings are always returned.\n\n* the `cls` keyword argument that `json.load()`/`json.loads()` accepts\n  to specify a custom subclass of ``jsondecoder`` is not and will not be\n  supported, because this implementation uses a completely different\n  approach to parsing strings and doesn't have anything like the\n  `jsondecoder` class.\n\n* the `cls` keyword argument that `json.dump()`/`json.dumps()` accepts\n  is also not supported, for consistency with `json5.load()`. the `default`\n  keyword *is* supported, though, and might be able to serve as a\n  workaround.\n\n## running the tests\nto run the tests, setup a venv and install the required dependencies with\n`pip install -e '.[dev]'`, then run the tests with `python setup.py test`.\n\n\n## version history / release notes\n\n* v0.9.14 (2023-05-14)\n    * [github issue #63](https://github.com/dpranke/pyjson5/issues/63)\n      handle `+infinity` as well as `-infinity` and `infinity`.\n* v0.9.13 (2023-03-16)\n    * [github pr #64](https://github.com/dpranke/pyjson5/pull/64)\n      remove a field from one of the json benchmark files to\n      reduce confusion in chromium.\n    * no code changes.\n* v0.9.12 (2023-01-02)\n    * fix github actions config file to no longer test against\n      python 3.6 or 3.7. for now we will only test against an\n      \"oldest\" release (3.8 in this case) and a \"current\"\n      release (3.11 in this case).\n* v0.9.11 (2023-01-02)\n    * [github issue #60](https://github.com/dpranke/pyjson5/issues/60)\n      fixed minor python2 compatibility issue by referring to\n      `float(\"inf\")` instead of `math.inf`.\n* v0.9.10 (2022-08-18)\n    * [github issue #58](https://github.com/dpranke/pyjson5/issues/58)\n      updated the //readme.md to be clear that parsing arbitrary js\n      code may not work.\n    * otherwise, no code changes.\n* v0.9.9 (2022-08-01)\n    * [github issue #57](https://github.com/dpranke/pyjson5/issues/57)\n      fixed serialization for objects that subclass `int` or `float`:\n      previously we would use the objects __str__ implementation, but\n      that might result in an illegal json5 value if the object had\n      customized __str__ to return something illegal. instead,\n      we follow the lead of the `json` module and call `int.__repr__`\n      or `float.__repr__` directly.\n    * while i was at it, i added tests for dumps(-inf) and dumps(nan)\n      when those were supposed to be disallowed by `allow_nan=false`.\n* v0.9.8 (2022-05-08)\n    * [github issue #47](https://github.com/dpranke/pyjson5/issues/47)\n      fixed error reporting in some cases due to how parsing was handling\n      nested rules in the grammar - previously the reported location for\n      the error could be far away from the point where it actually happened.\n\n* v0.9.7 (2022-05-06)\n    * [github issue #52](https://github.com/dpranke/pyjson5/issues/52)\n      fixed behavior of `default` fn in `dump` and `dumps`. previously\n      we didn't require the function to return a string, and so we could\n      end up returning something that wasn't actually valid. this change\n      now matches the behavior in the `json` module. *note: this is a\n      potentially breaking change.*\n* v0.9.6 (2021-06-21)\n    * bump development status classifier to 5 - production/stable, which\n      the library feels like it is at this point. if i do end up significantly\n      reworking things to speed it up and/or to add round-trip editing,\n      that'll likely be a 2.0. if this version has no reported issues,\n      i'll likely promote it to 1.0.\n    * also bump the tested python versions to 2.7, 3.8 and 3.9, though\n      earlier python3 versions will likely continue to work as well.\n    * [github issue #46](https://github.com/dpranke/pyjson5/issues/36)\n      fix incorrect serialization of custom subtypes\n    * make it possible to run the tests if `hypothesis` isn't installed.\n\n* v0.9.5 (2020-05-26)\n    * miscellaneous non-source cleanups in the repo, including setting\n      up github actions for a ci system. no changes to the library from\n      v0.9.4, other than updating the version.\n\n* v0.9.4 (2020-03-26)\n    * [github pull #38](https://github.com/dpranke/pyjson5/pull/38)\n      fix from fredrik@fornwall.net for dumps() crashing when passed\n      an empty string as a key in an object.\n\n* v0.9.3 (2020-03-17)\n    * [github pull #35](https://github.com/dpranke/pyjson5/pull/35)\n      fix from pastelmind@ for dump() not passing the right args to dumps().\n    * fix from p.skouzos@novafutur.com to remove the tests directory from\n      the setup call, making the package a bit smaller.\n\n* v0.9.2 (2020-03-02)\n    * [github pull #34](https://github.com/dpranke/pyjson5/pull/34)\n      fix from roosephu@ for a badly formatted nested list.\n\n* v0.9.1 (2020-02-09)\n    * [github issue #33](https://github.com/dpranke/pyjson5/issues/33):\n       fix stray trailing comma when dumping an object with an invalid key.\n\n* v0.9.0 (2020-01-30)\n    * [github issue #29](https://github.com/dpranke/pyjson5/issues/29):\n       fix an issue where objects keys that started with a reserved\n       word were incorrectly quoted.\n    * [github issue #30](https://github.com/dpranke/pyjson5/issues/30):\n       fix an issue where dumps() incorrectly thought a data structure\n       was cyclic in some cases.\n    * [github issue #32](https://github.com/dpranke/pyjson5/issues/32):\n       allow for non-string keys in dicts passed to ``dump()``/``dumps()``.\n       add an ``allow_duplicate_keys=false`` to prevent possible\n       ill-formed json that might result.\n\n* v0.8.5 (2019-07-04)\n    * [github issue #25](https://github.com/dpranke/pyjson5/issues/25):\n      add license and readme.md to the dist.\n    * [github issue #26](https://github.com/dpranke/pyjson5/issues/26):\n      fix printing of empty arrays and objects with indentation, fix\n      misreporting of the position on parse failures in some cases.\n\n* v0.8.4 (2019-06-11)\n    * updated the version history, too.\n\n* v0.8.3 (2019-06-11)\n    * tweaked the readme, bumped the version, forgot to update the version\n      history :).\n\n* v0.8.2 (2019-06-11)\n    * actually bump the version properly, to 0.8.2.\n\n* v0.8.1 (2019-06-11)\n    * fix bug in setup.py that messed up the description. unfortunately,\n      i forgot to bump the version for this, so this also identifies as 0.8.0.\n\n* v0.8.0 (2019-06-11)\n    * add `allow_duplicate_keys=true` as a default argument to\n      `json5.load()`/`json5.loads()`. if you set the key to `false`, duplicate\n      keys in a single dict will be rejected. the default is set to `true`\n      for compatibility with `json.load()`, earlier versions of json5, and\n      because it's simply not clear if people would want duplicate checking\n      enabled by default.\n\n* v0.7 (2019-03-31)\n    * changes dump()/dumps() to not quote object keys by default if they are\n      legal identifiers. passing `quote_keys=true` will turn that off\n      and always quote object keys.\n    * changes dump()/dumps() to insert trailing commas after the last item\n      in an array or an object if the object is printed across multiple lines\n      (i.e., if `indent` is not none). passing `trailing_commas=false` will\n      turn that off.\n    * the `json5.tool` command line tool now supports the `--indent`,\n      `--[no-]quote-keys`, and `--[no-]trailing-commas` flags to allow\n      for more control over the output, in addition to the existing\n      `--as-json` flag.\n    * the `json5.tool` command line tool no longer supports reading from\n      multiple files, you can now only read from a single file or\n      from standard input.\n    * the implementation no longer relies on the standard `json` module\n      for anything. the output should still match the json module (except\n      as noted above) and discrepancies should be reported as bugs.\n\n* v0.6.2 (2019-03-08)\n    * fix [github issue #23](https://github.com/dpranke/pyjson5/issues/23) and\n      pass through unrecognized escape sequences.\n\n* v0.6.1 (2018-05-22)\n    * cleaned up a couple minor nits in the package.\n\n* v0.6.0 (2017-11-28)\n    * first implementation that attempted to implement 100% of the spec.\n\n* v0.5.0 (2017-09-04)\n    * first implementation that supported the full set of kwargs that\n      the `json` module supports.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "json5",
  "package_url": "https://pypi.org/project/json5/",
  "project_url": "https://pypi.org/project/json5/",
  "project_urls": {
    "Homepage": "https://github.com/dpranke/pyjson5"
  },
  "release_url": "https://pypi.org/project/json5/0.9.14/",
  "requires_dist": [
    "hypothesis ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "a python implementation of the json5 data format.",
  "version": "0.9.14",
  "releases": [],
  "developers": [
    "dirk_pranke",
    "dpranke@chromium.org"
  ],
  "kwds": "pyjson5 json5 json jsondecoder api",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_json5",
  "homepage": "https://github.com/dpranke/pyjson5",
  "release_count": 34,
  "dependency_ids": [
    "pypi_hypothesis"
  ]
}
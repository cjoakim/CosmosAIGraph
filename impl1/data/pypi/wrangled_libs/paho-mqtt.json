{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: communications",
    "topic :: internet"
  ],
  "description": "mqtt version 5.0/3.1.1 client class\neclipse paho\u2122 mqtt python client\n================================\n\nthis document describes the source code for the `eclipse paho <http://eclipse.org/paho/>`_ mqtt python client library, which implements versions 5.0, 3.1.1, and 3.1 of the mqtt protocol.\n\nthis code provides a client class which enable applications to connect to an `mqtt <http://mqtt.org/>`_ broker to publish messages, and to subscribe to topics and receive published messages. it also provides some helper functions to make publishing one off messages to an mqtt server very straightforward.\n\nit supports python 2.7.9+ or 3.6+.\n\nthe mqtt protocol is a machine-to-machine (m2m)/\"internet of things\" connectivity protocol. designed as an extremely lightweight publish/subscribe messaging transport, it is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n\npaho is an `eclipse foundation <https://www.eclipse.org/org/foundation/>`_ project.\n\n\ncontents\n--------\n\n* installation_\n* `known limitations`_\n* `usage and api`_\n    * `client`_\n        * `constructor / reinitialise`_\n        * `option functions`_\n        * `connect / reconnect / disconnect`_\n        * `network loop`_\n        * `publishing`_\n        * `subscribe / unsubscribe`_\n        * `callbacks`_\n        * `external event loop support`_\n        * `global helper functions`_\n    * `publish`_\n        * `single`_\n        * `multiple`_\n    * `subscribe`_\n        * `simple`_\n        * `using callback`_\n* `reporting bugs`_\n* `more information`_\n\n\ninstallation\n------------\n\nthe latest stable version is available in the python package index (pypi) and can be installed using\n\n::\n\n    pip install paho-mqtt\n\nor with ``virtualenv``:\n\n::\n\n    virtualenv paho-mqtt\n    source paho-mqtt/bin/activate\n    pip install paho-mqtt\n\nto obtain the full code, including examples and tests, you can clone the git repository:\n\n::\n\n    git clone https://github.com/eclipse/paho.mqtt.python\n\n\nonce you have the code, it can be installed from your repository as well:\n\n::\n\n    cd paho.mqtt.python\n    python setup.py install\n\nto perform all test (including mqtt v5 test), you also need to clone paho.mqtt.testing in paho.mqtt.python folder::\n\n    git clone https://github.com/eclipse/paho.mqtt.testing.git\n\nknown limitations\n-----------------\n\nthe following are the known unimplemented mqtt feature.\n\nwhen clean_session is false, the session is only stored in memory not persisted. this means that\nwhen client is restarted (not just reconnected, the object is recreated usually because the\nprogram was restarted) the session is lost. this result in possible message lost.\n\nthe following part of client session is lost:\n\n* qos 2 messages which have been received from the server, but have not been completely acknowledged.\n\n  since the client will blindly acknowledge any pubcomp (last message of a qos 2 transaction), it\n  won't hang but will lost this qos 2 message.\n\n* qos 1 and qos 2 messages which have been sent to the server, but have not been completely acknowledged.\n\n  this means that message passed to publish() may be lost. this could be mitigated by taking care\n  that all message passed to publish() has a corresponding on_publish() call.\n\n  it also means that the broker may have the qos2 message in the session. since the client start\n  with an empty session it don't know it and will re-use the mid. this is not yet fixed.\n\nalso when clean_session is true, this library will republish qos > 0 message accross network\nreconnection. this means that qos > 0 message won't be lost. but the standard say that\nif we should discard any message for which the publish packet was sent. our choice means that\nwe are not compliant with the standard and it's possible for qos 2 to be received twice.\nyou should you clean_session = false if you need the qos 2 guarantee of only one delivery.\n\nusage and api\n-------------\n\ndetailed api documentation is available through **pydoc**. samples are available in the **examples** directory.\n\nthe package provides two modules, a full client and a helper for simple publishing.\n\ngetting started\n***************\n\nhere is a very simple example that subscribes to the broker $sys topic tree and prints out the resulting messages:\n\n.. code:: python\n\n    import paho.mqtt.client as mqtt\n\n    # the callback for when the client receives a connack response from the server.\n    def on_connect(client, userdata, flags, rc):\n        print(\"connected with result code \"+str(rc))\n\n        # subscribing in on_connect() means that if we lose the connection and\n        # reconnect then subscriptions will be renewed.\n        client.subscribe(\"$sys/#\")\n\n    # the callback for when a publish message is received from the server.\n    def on_message(client, userdata, msg):\n        print(msg.topic+\" \"+str(msg.payload))\n\n    client = mqtt.client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    client.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n\n    # blocking call that processes network traffic, dispatches callbacks and\n    # handles reconnecting.\n    # other loop*() functions are available that give a threaded interface and a\n    # manual interface.\n    client.loop_forever()\n\nclient\n******\n\nyou can use the client class as an instance, within a class or by subclassing. the general usage flow is as follows:\n\n* create a client instance\n* connect to a broker using one of the ``connect*()`` functions\n* call one of the ``loop*()`` functions to maintain network traffic flow with the broker\n* use ``subscribe()`` to subscribe to a topic and receive messages\n* use ``publish()`` to publish messages to the broker\n* use ``disconnect()`` to disconnect from the broker\n\ncallbacks will be called to allow the application to process events as necessary. these callbacks are described below.\n\nconstructor / reinitialise\n``````````````````````````\n\nclient()\n''''''''\n\n.. code:: python\n\n    client(client_id=\"\", clean_session=true, userdata=none, protocol=mqttv311, transport=\"tcp\")\n\nthe ``client()`` constructor takes the following arguments:\n\nclient_id\n    the unique client id string used when connecting to the broker. if\n    ``client_id`` is zero length or ``none``, then one will be randomly\n    generated. in this case the ``clean_session`` parameter must be ``true``.\n\nclean_session\n    a boolean that determines the client type. if ``true``, the broker will\n    remove all information about this client when it disconnects. if ``false``,\n    the client is a durable client and subscription information and queued\n    messages will be retained when the client disconnects.\n\n    note that a client will never discard its own outgoing messages on\n    disconnect. calling connect() or reconnect() will cause the messages to be\n    resent. use reinitialise() to reset a client to its original state.\n\nuserdata\n    user defined data of any type that is passed as the ``userdata`` parameter\n    to callbacks. it may be updated at a later point with the\n    ``user_data_set()`` function.\n\nprotocol\n    the version of the mqtt protocol to use for this client. can be either\n    ``mqttv31``, ``mqttv311`` or ``mqttv5``\n\ntransport\n    set to \"websockets\" to send mqtt over websockets. leave at the default of\n    \"tcp\" to use raw tcp.\n\n\nconstructor example\n...................\n\n.. code:: python\n\n    import paho.mqtt.client as mqtt\n\n    mqttc = mqtt.client()\n\n\nreinitialise()\n''''''''''''''\n\n.. code:: python\n\n    reinitialise(client_id=\"\", clean_session=true, userdata=none)\n\nthe ``reinitialise()`` function resets the client to its starting state as if it had just been created. it takes the same arguments as the ``client()`` constructor.\n\nreinitialise example\n....................\n\n.. code:: python\n\n    mqttc.reinitialise()\n\noption functions\n````````````````\n\nthese functions represent options that can be set on the client to modify its behaviour. in the majority of cases this must be done *before* connecting to a broker.\n\nmax_inflight_messages_set()\n'''''''''''''''''''''''''''\n\n.. code:: python\n\n    max_inflight_messages_set(self, inflight)\n\nset the maximum number of messages with qos>0 that can be part way through their network flow at once.\n\ndefaults to 20. increasing this value will consume more memory but can increase throughput.\n\nmax_queued_messages_set()\n'''''''''''''''''''''''''\n\n.. code:: python\n\n    max_queued_messages_set(self, queue_size)\n\nset the maximum number of outgoing messages with qos>0 that can be pending in the outgoing message queue.\n\ndefaults to 0. 0 means unlimited, but due to implementation currently limited to 65555 (65535 messages in queue + 20 in flight). when the queue is full, any further outgoing messages would be dropped.\n\nmessage_retry_set()\n'''''''''''''''''''\n\n.. code:: python\n\n    message_retry_set(retry)\n\nset the time in seconds before a message with qos>0 is retried, if the broker does not respond.\n\nthis is set to 5 seconds by default and should not normally need changing.\n\nws_set_options()\n''''''''''''''''\n\n.. code:: python\n\n    ws_set_options(self, path=\"/mqtt\", headers=none)\n\nset websocket connection options. these options will only be used if ``transport=\"websockets\"`` was passed into the ``client()`` constructor.\n\npath\n    the mqtt path to use on the broker.\n\nheaders\n    either a dictionary specifying a list of extra headers which should be appended to the standard websocket headers, or a callable that takes the normal websocket headers and returns a new dictionary with a set of headers to connect to the broker.\n\nmust be called before ``connect*()``. an example of how this can be used with the aws iot platform is in the **examples** folder.\n\n\ntls_set()\n'''''''''\n\n.. code:: python\n\n    tls_set(ca_certs=none, certfile=none, keyfile=none, cert_reqs=ssl.cert_required,\n        tls_version=ssl.protocol_tls, ciphers=none)\n\nconfigure network encryption and authentication options. enables ssl/tls support.\n\nca_certs\n    a string path to the certificate authority certificate files that are to be treated as trusted by this client. if this is the only option given then the client will operate in a similar manner to a web browser. that is to say it will require the broker to have a certificate signed by the certificate authorities in ``ca_certs`` and will communicate using tls v1.2, but will not attempt any form of authentication. this provides basic network encryption but may not be sufficient depending on how the broker is configured. by default, on python 2.7.9+ or 3.4+, the default certification authority of the system is used. on older python version this parameter is mandatory.\n\ncertfile, keyfile\n    strings pointing to the pem encoded client certificate and private keys respectively. if these arguments are not ``none`` then they will be used as client information for tls based authentication. support for this feature is broker dependent. note that if either of these files in encrypted and needs a password to decrypt it, python will ask for the password at the command line. it is not currently possible to define a callback to provide the password.\n\ncert_reqs\n    defines the certificate requirements that the client imposes on the broker. by default this is ``ssl.cert_required``, which means that the broker must provide a certificate. see the ssl pydoc for more information on this parameter.\n\ntls_version\n    specifies the version of the ssl/tls protocol to be used. by default (if the python version supports it) the highest tls version is detected. if unavailable, tls v1.2 is used. previous versions (all versions beginning with ssl) are possible but not recommended due to possible security problems.\n\nciphers\n    a string specifying which encryption ciphers are allowable for this connection, or ``none`` to use the defaults. see the ssl pydoc for more information.\n\nmust be called before ``connect*()``.\n\ntls_set_context()\n'''''''''''''''''\n\n.. code:: python\n\n    tls_set_context(context=none)\n\nconfigure network encryption and authentication context. enables ssl/tls support.\n\ncontext\n    an ssl.sslcontext object. by default, this is given by ``ssl.create_default_context()``, if available (added in python 3.4).\n\nif you're unsure about using this method, then either use the default context, or use the ``tls_set`` method. see the ssl module documentation section about `security considerations <https://docs.python.org/3/library/ssl.html#ssl-security>`_ for more information.\n\nmust be called before ``connect*()``.\n\ntls_insecure_set()\n''''''''''''''''''\n\n.. code:: python\n\n    tls_insecure_set(value)\n\nconfigure verification of the server hostname in the server certificate.\n\nif ``value`` is set to ``true``, it is impossible to guarantee that the host you are connecting to is not impersonating your server. this can be useful in initial server testing, but makes it possible for a malicious third party to impersonate your server through dns spoofing, for example.\n\ndo not use this function in a real system. setting value to true means there is no point using encryption.\n\nmust be called before ``connect*()`` and after ``tls_set()`` or ``tls_set_context()``.\n\nenable_logger()\n'''''''''''''''\n\n.. code:: python\n\n    enable_logger(logger=none)\n\nenable logging using the standard python logging package (see pep 282). this may be used at the same time as the ``on_log`` callback method.\n\nif ``logger`` is specified, then that ``logging.logger`` object will be used, otherwise one will be created automatically.\n\npaho logging levels are converted to standard ones according to the following mapping:\n\n====================  ===============\npaho                  logging\n====================  ===============\n``mqtt_log_err``      ``logging.error``\n``mqtt_log_warning``  ``logging.warning``\n``mqtt_log_notice``   ``logging.info`` *(no direct equivalent)*\n``mqtt_log_info``     ``logging.info``\n``mqtt_log_debug``    ``logging.debug``\n====================  ===============\n\ndisable_logger()\n''''''''''''''''\n\n.. code:: python\n\n    disable_logger()\n\ndisable logging using standard python logging package. this has no effect on the ``on_log`` callback.\n\nusername_pw_set()\n'''''''''''''''''\n\n.. code:: python\n\n    username_pw_set(username, password=none)\n\nset a username and optionally a password for broker authentication. must be called before ``connect*()``.\n\nuser_data_set()\n'''''''''''''''\n\n.. code:: python\n\n    user_data_set(userdata)\n\nset the private user data that will be passed to callbacks when events are generated. use this for your own purpose to support your application.\n\nwill_set()\n''''''''''\n\n.. code:: python\n\n    will_set(topic, payload=none, qos=0, retain=false)\n\nset a will to be sent to the broker. if the client disconnects without calling\n``disconnect()``, the broker will publish the message on its behalf.\n\ntopic\n    the topic that the will message should be published on.\n\npayload\n    the message to send as a will. if not given, or set to ``none`` a zero\n    length message will be used as the will. passing an int or float will\n    result in the payload being converted to a string representing that number.\n    if you wish to send a true int/float, use ``struct.pack()`` to create the\n    payload you require.\n\nqos\n    the quality of service level to use for the will.\n\nretain\n    if set to ``true``, the will message will be set as the \"last known\n    good\"/retained message for the topic.\n\nraises a ``valueerror`` if ``qos`` is not 0, 1 or 2, or if ``topic`` is\n``none`` or has zero string length.\n\nreconnect_delay_set\n'''''''''''''''''''\n\n.. code:: python\n\n    reconnect_delay_set(min_delay=1, max_delay=120)\n\nthe client will automatically retry connection. between each attempt\nit will wait a number of seconds between ``min_delay`` and ``max_delay``.\n\nwhen the connection is lost, initially the reconnection attempt is delayed of\n``min_delay`` seconds. it's doubled between subsequent attempt up to ``max_delay``.\n\nthe delay is reset to ``min_delay`` when the connection complete (e.g. the connack is\nreceived, not just the tcp connection is established).\n\n\nconnect / reconnect / disconnect\n````````````````````````````````\n\nconnect()\n'''''''''\n\n.. code:: python\n\n    connect(host, port=1883, keepalive=60, bind_address=\"\")\n\nthe ``connect()`` function connects the client to a broker. this is a blocking\nfunction. it takes the following arguments:\n\nhost\n    the hostname or ip address of the remote broker\n\nport\n    the network port of the server host to connect to. defaults to 1883. note\n    that the default port for mqtt over ssl/tls is 8883 so if you are using\n    ``tls_set()`` or ``tls_set_context()``, the port may need providing manually\n\nkeepalive\n    maximum period in seconds allowed between communications with the broker.\n    if no other messages are being exchanged, this controls the rate at which\n    the client will send ping messages to the broker\n\nbind_address\n    the ip address of a local network interface to bind this client to,\n    assuming multiple interfaces exist\n\ncallback\n........\n\nwhen the client receives a connack message from the broker in response to the\nconnect it generates an ``on_connect()`` callback.\n\nconnect example\n...............\n\n.. code:: python\n\n    mqttc.connect(\"mqtt.eclipseprojects.io\")\n\nconnect_async()\n'''''''''''''''\n\n.. code:: python\n\n    connect_async(host, port=1883, keepalive=60, bind_address=\"\")\n\nuse in conjunction with ``loop_start()`` to connect in a non-blocking manner.\nthe connection will not complete until ``loop_start()`` is called.\n\ncallback (connect)\n..................\n\nwhen the client receives a connack message from the broker in response to the\nconnect it generates an ``on_connect()`` callback.\n\nconnect_srv()\n'''''''''''''\n\n.. code:: python\n\n    connect_srv(domain, keepalive=60, bind_address=\"\")\n\nconnect to a broker using an srv dns lookup to obtain the broker address. takes\nthe following arguments:\n\ndomain\n    the dns domain to search for srv records. if ``none``, try to determine the\n    local domain name.\n\nsee ``connect()`` for a description of the ``keepalive`` and ``bind_address``\narguments.\n\ncallback (connect_srv)\n......................\n\nwhen the client receives a connack message from the broker in response to the\nconnect it generates an ``on_connect()`` callback.\n\nsrv connect example\n...................\n\n.. code:: python\n\n    mqttc.connect_srv(\"eclipse.org\")\n\nreconnect()\n'''''''''''\n\n.. code:: python\n\n    reconnect()\n\nreconnect to a broker using the previously provided details. you must have\ncalled ``connect*()`` before calling this function.\n\ncallback (reconnect)\n....................\n\nwhen the client receives a connack message from the broker in response to the\nconnect it generates an ``on_connect()`` callback.\n\ndisconnect()\n''''''''''''\n\n.. code:: python\n\n    disconnect()\n\ndisconnect from the broker cleanly. using ``disconnect()`` will not result in a\nwill message being sent by the broker.\n\ndisconnect will not wait for all queued message to be sent, to ensure all messages\nare delivered, ``wait_for_publish()`` from ``mqttmessageinfo`` should be used.\nsee ``publish()`` for details.\n\ncallback (disconnect)\n.....................\n\nwhen the client has sent the disconnect message it generates an\n``on_disconnect()`` callback.\n\nnetwork loop\n````````````\n\nthese functions are the driving force behind the client. if they are not\ncalled, incoming network data will not be processed and outgoing network data\nmay not be sent in a timely fashion. there are four options for managing the\nnetwork loop. three are described here, the fourth in \"external event loop\nsupport\" below. do not mix the different loop functions.\n\nloop()\n''''''\n\n.. code:: python\n\n    loop(timeout=1.0, max_packets=1)\n\ncall regularly to process network events. this call waits in ``select()`` until\nthe network socket is available for reading or writing, if appropriate, then\nhandles the incoming/outgoing data. this function blocks for up to ``timeout``\nseconds. ``timeout`` must not exceed the ``keepalive`` value for the client or\nyour client will be regularly disconnected by the broker.\n\nthe ``max_packets`` argument is obsolete and should be left unset.\n\nloop example\n............\n\n.. code:: python\n\n    run = true\n    while run:\n        mqttc.loop()\n\nloop_start() / loop_stop()\n''''''''''''''''''''''''''\n\n.. code:: python\n\n    loop_start()\n    loop_stop(force=false)\n\nthese functions implement a threaded interface to the network loop. calling\n``loop_start()`` once, before or after ``connect*()``, runs a thread in the\nbackground to call ``loop()`` automatically. this frees up the main thread for\nother work that may be blocking. this call also handles reconnecting to the\nbroker. call ``loop_stop()`` to stop the background thread. the ``force``\nargument is currently ignored.\n\nloop start/stop example\n.......................\n\n.. code:: python\n\n    mqttc.connect(\"mqtt.eclipseprojects.io\")\n    mqttc.loop_start()\n\n    while true:\n        temperature = sensor.blocking_read()\n        mqttc.publish(\"paho/temperature\", temperature)\n\nloop_forever()\n''''''''''''''\n\n.. code:: python\n\n    loop_forever(timeout=1.0, max_packets=1, retry_first_connection=false)\n\nthis is a blocking form of the network loop and will not return until the\nclient calls ``disconnect()``. it automatically handles reconnecting.\n\nexcept for the first connection attempt when using connect_async, use\n``retry_first_connection=true`` to make it retry the first connection.\nwarning: this might lead to situations where the client keeps connecting to an\nnon existing host without failing.\n\nthe ``timeout`` and ``max_packets`` arguments are obsolete and should be left\nunset.\n\npublishing\n``````````\n\nsend a message from the client to the broker.\n\npublish()\n'''''''''\n\n.. code:: python\n\n    publish(topic, payload=none, qos=0, retain=false)\n\nthis causes a message to be sent to the broker and subsequently from the broker\nto any clients subscribing to matching topics. it takes the following\narguments:\n\ntopic\n    the topic that the message should be published on\n\npayload\n    the actual message to send. if not given, or set to ``none`` a zero length\n    message will be used. passing an int or float will result in the payload\n    being converted to a string representing that number. if you wish to send a\n    true int/float, use ``struct.pack()`` to create the payload you require\n\nqos\n    the quality of service level to use\n\nretain\n    if set to ``true``, the message will be set as the \"last known\n    good\"/retained message for the topic.\n\nreturns a mqttmessageinfo which expose the following attributes and methods:\n\n* ``rc``, the result of the publishing. it could be ``mqtt_err_success`` to\n  indicate success, ``mqtt_err_no_conn`` if the client is not currently connected,\n  or ``mqtt_err_queue_size`` when ``max_queued_messages_set`` is used to indicate\n  that message is neither queued nor sent.\n* ``mid`` is the message id for the publish request. the mid value can be used to\n  track the publish request by checking against the mid argument in the\n  ``on_publish()`` callback if it is defined. ``wait_for_publish`` may be easier\n  depending on your use-case.\n* ``wait_for_publish()`` will block until the message is published. it will\n  raise valueerror if the message is not queued (rc ==\n  ``mqtt_err_queue_size``), or a runtimeerror if there was an error when\n  publishing, most likely due to the client not being connected.\n* ``is_published`` returns true if the message has been published. it will\n  raise valueerror if the message is not queued (rc ==\n  ``mqtt_err_queue_size``), or a runtimeerror if there was an error when\n  publishing, most likely due to the client not being connected.\n\na ``valueerror`` will be raised if topic is ``none``, has zero length or is\ninvalid (contains a wildcard), if ``qos`` is not one of 0, 1 or 2, or if the\nlength of the payload is greater than 268435455 bytes.\n\ncallback (publish)\n..................\n\nwhen the message has been sent to the broker an ``on_publish()`` callback will\nbe generated.\n\n\nsubscribe / unsubscribe\n```````````````````````\n\nsubscribe()\n'''''''''''\n\n.. code:: python\n\n    subscribe(topic, qos=0)\n\nsubscribe the client to one or more topics.\n\nthis function may be called in three different ways:\n\nsimple string and integer\n.........................\n\ne.g. ``subscribe(\"my/topic\", 2)``\n\ntopic\n    a string specifying the subscription topic to subscribe to.\n\nqos\n    the desired quality of service level for the subscription. defaults to 0.\n\nstring and integer tuple\n........................\n\ne.g. ``subscribe((\"my/topic\", 1))``\n\ntopic\n    a tuple of ``(topic, qos)``. both topic and qos must be present in the tuple.\n\nqos\n    not used.\n\nlist of string and integer tuples\n.................................\n\ne.g. ``subscribe([(\"my/topic\", 0), (\"another/topic\", 2)])``\n\nthis allows multiple topic subscriptions in a single subscription command,\nwhich is more efficient than using multiple calls to ``subscribe()``.\n\ntopic\n    a list of tuple of format ``(topic, qos)``. both topic and qos must be\n    present in all of the tuples.\n\nqos\n    not used.\n\nthe function returns a tuple ``(result, mid)``, where ``result`` is\n``mqtt_err_success`` to indicate success or ``(mqtt_err_no_conn, none)`` if the\nclient is not currently connected.  ``mid`` is the message id for the subscribe\nrequest. the mid value can be used to track the subscribe request by checking\nagainst the mid argument in the ``on_subscribe()`` callback if it is defined.\n\nraises a ``valueerror`` if ``qos`` is not 0, 1 or 2, or if topic is ``none`` or\nhas zero string length, or if ``topic`` is not a string, tuple or list.\n\ncallback (subscribe)\n....................\n\nwhen the broker has acknowledged the subscription, an ``on_subscribe()``\ncallback will be generated.\n\nunsubscribe()\n'''''''''''''\n\n.. code:: python\n\n    unsubscribe(topic)\n\nunsubscribe the client from one or more topics.\n\ntopic\n    a single string, or list of strings that are the subscription topics to\n    unsubscribe from.\n\nreturns a tuple ``(result, mid)``, where ``result`` is ``mqtt_err_success`` to\nindicate success, or ``(mqtt_err_no_conn, none)`` if the client is not\ncurrently connected. ``mid`` is the message id for the unsubscribe request. the\nmid value can be used to track the unsubscribe request by checking against the\nmid argument in the ``on_unsubscribe()`` callback if it is defined.\n\nraises a ``valueerror`` if ``topic`` is ``none`` or has zero string length, or\nis not a string or list.\n\ncallback (unsubscribe)\n......................\n\nwhen the broker has acknowledged the unsubscribe, an ``on_unsubscribe()``\ncallback will be generated.\n\ncallbacks\n`````````\n\non_connect()\n''''''''''''\n\n.. code:: python\n\n    on_connect(client, userdata, flags, rc)\n\ncalled when the broker responds to our connection request.\n\nclient\n    the client instance for this callback\n\nuserdata\n    the private user data as set in ``client()`` or ``user_data_set()``\n\nflags\n    response flags sent by the broker\nrc\n    the connection result\n\n\nflags is a dict that contains response flags from the broker:\n    flags['session present'] - this flag is useful for clients that are\n        using clean session set to 0 only. if a client with clean\n        session=0, that reconnects to a broker that it has previously\n        connected to, this flag indicates whether the broker still has the\n        session information for the client. if 1, the session still exists.\n\nthe value of rc indicates success or not:\n\n    0: connection successful\n    1: connection refused - incorrect protocol version\n    2: connection refused - invalid client identifier\n    3: connection refused - server unavailable\n    4: connection refused - bad username or password\n    5: connection refused - not authorised\n    6-255: currently unused.\n\non connect example\n..................\n\n.. code:: python\n\n    def on_connect(client, userdata, flags, rc):\n        print(\"connection returned result: \"+connack_string(rc))\n\n    mqttc.on_connect = on_connect\n    ...\n\non_disconnect()\n'''''''''''''''\n\n.. code:: python\n\n    on_disconnect(client, userdata, rc)\n\ncalled when the client disconnects from the broker.\n\nclient\n    the client instance for this callback\n\nuserdata\n    the private user data as set in ``client()`` or ``user_data_set()``\n\nrc\n    the disconnection result\n\nthe rc parameter indicates the disconnection state. if ``mqtt_err_success``\n(0), the callback was called in response to a ``disconnect()`` call. if any\nother value the disconnection was unexpected, such as might be caused by a\nnetwork error.\n\non disconnect example\n.....................\n\n.. code:: python\n\n    def on_disconnect(client, userdata, rc):\n        if rc != 0:\n            print(\"unexpected disconnection.\")\n\n    mqttc.on_disconnect = on_disconnect\n    ...\n\non_message()\n''''''''''''\n\n.. code:: python\n\n    on_message(client, userdata, message)\n\ncalled when a message has been received on a topic that the client subscribes\nto and the message does not match an existing topic filter callback.\nuse ``message_callback_add()`` to define a callback that will be called for\nspecific topic filters. ``on_message`` will serve as fallback when none matched.\n\nclient\n    the client instance for this callback\n\nuserdata\n    the private user data as set in ``client()`` or ``user_data_set()``\n\nmessage\n    an instance of mqttmessage. this is a class with members ``topic``, ``payload``, ``qos``, ``retain``.\n\non message example\n..................\n\n.. code:: python\n\n    def on_message(client, userdata, message):\n        print(\"received message '\" + str(message.payload) + \"' on topic '\"\n            + message.topic + \"' with qos \" + str(message.qos))\n\n    mqttc.on_message = on_message\n    ...\n\nmessage_callback_add()\n''''''''''''''''''''''\n\nthis function allows you to define callbacks that handle incoming messages for\nspecific subscription filters, including with wildcards. this lets you, for\nexample, subscribe to ``sensors/#`` and have one callback to handle\n``sensors/temperature`` and another to handle ``sensors/humidity``.\n\n.. code:: python\n\n    message_callback_add(sub, callback)\n\nsub\n    the subscription filter to match against for this callback. only one\n    callback may be defined per literal sub string\n\ncallback\n    the callback to be used. takes the same form as the ``on_message``\n    callback.\n\nif using ``message_callback_add()`` and ``on_message``, only messages that do\nnot match a subscription specific filter will be passed to the ``on_message``\ncallback.\n\nif multiple sub match a topic, each callback will be called (e.g. sub ``sensors/#``\nand sub ``+/humidity`` both match a message with a topic ``sensors/humidity``, so both\ncallbacks will handle this message).\n\nmessage_callback_remove()\n'''''''''''''''''''''''''\n\nremove a topic/subscription specific callback previously registered using\n``message_callback_add()``.\n\n.. code:: python\n\n    message_callback_remove(sub)\n\nsub\n    the subscription filter to remove\n\non_publish()\n''''''''''''\n\n.. code:: python\n\n    on_publish(client, userdata, mid)\n\ncalled when a message that was to be sent using the ``publish()`` call has\ncompleted transmission to the broker. for messages with qos levels 1 and 2,\nthis means that the appropriate handshakes have completed. for qos 0, this\nsimply means that the message has left the client. the ``mid`` variable matches\nthe mid variable returned from the corresponding ``publish()`` call, to allow\noutgoing messages to be tracked.\n\nthis callback is important because even if the publish() call returns success,\nit does not always mean that the message has been sent.\n\non_subscribe()\n''''''''''''''\n\n.. code:: python\n\n    on_subscribe(client, userdata, mid, granted_qos)\n\ncalled when the broker responds to a subscribe request. the ``mid`` variable\nmatches the mid variable returned from the corresponding ``subscribe()`` call.\nthe ``granted_qos`` variable is a list of integers that give the qos level the\nbroker has granted for each of the different subscription requests.\n\non_unsubscribe()\n''''''''''''''''\n\n.. code:: python\n\n    on_unsubscribe(client, userdata, mid)\n\ncalled when the broker responds to an unsubscribe request. the ``mid`` variable\nmatches the mid variable returned from the corresponding ``unsubscribe()``\ncall.\n\non_log()\n''''''''\n\n.. code:: python\n\n    on_log(client, userdata, level, buf)\n\ncalled when the client has log information. define to allow debugging. the\n``level`` variable gives the severity of the message and will be one of\n``mqtt_log_info``, ``mqtt_log_notice``, ``mqtt_log_warning``, ``mqtt_log_err``,\nand ``mqtt_log_debug``. the message itself is in ``buf``.\n\nthis may be used at the same time as the standard python logging, which can be\nenabled via the ``enable_logger`` method.\n\non_socket_open()\n''''''''''''''''\n\n::\n\n    on_socket_open(client, userdata, sock)\n\ncalled when the socket has been opened.\nuse this to register the socket with an external event loop for reading.\n\non_socket_close()\n'''''''''''''''''\n\n::\n\n    on_socket_close(client, userdata, sock)\n\ncalled when the socket is about to be closed.\nuse this to unregister a socket from an external event loop for reading.\n\non_socket_register_write()\n''''''''''''''''''''''''''\n\n::\n\n    on_socket_register_write(client, userdata, sock)\n\ncalled when a write operation to the socket failed because it would have blocked, e.g. output buffer full.\nuse this to register the socket with an external event loop for writing.\n\non_socket_unregister_write()\n''''''''''''''''''''''''''''\n\n::\n\n    on_socket_unregister_write(client, userdata, sock)\n\ncalled when a write operation to the socket succeeded after it had previously failed.\nuse this to unregister the socket from an external event loop for writing.\n\nexternal event loop support\n```````````````````````````\n\nloop_read()\n'''''''''''\n\n.. code:: python\n\n    loop_read(max_packets=1)\n\ncall when the socket is ready for reading. ``max_packets`` is obsolete and\nshould be left unset.\n\nloop_write()\n''''''''''''\n\n.. code:: python\n\n    loop_write(max_packets=1)\n\ncall when the socket is ready for writing. ``max_packets`` is obsolete and\nshould be left unset.\n\nloop_misc()\n'''''''''''\n\n.. code:: python\n\n    loop_misc()\n\ncall every few seconds to handle message retrying and pings.\n\nsocket()\n''''''''\n\n.. code:: python\n\n    socket()\n\nreturns the socket object in use in the client to allow interfacing with other\nevent loops.\nthis call is particularly useful for select_ based loops. see ``examples/loop_select.py``.\n\n.. _select: https://docs.python.org/3/library/select.html#select.select\n\nwant_write()\n''''''''''''\n\n.. code:: python\n\n    want_write()\n\nreturns true if there is data waiting to be written, to allow interfacing the\nclient with other event loops.\nthis call is particularly useful for select_ based loops. see ``examples/loop_select.py``.\n\nstate callbacks\n'''''''''''''''\n\n::\n\n    on_socket_open\n    on_socket_close\n    on_socket_register_write\n    on_socket_unregister_write\n\nuse these callbacks to get notified about state changes in the socket.\nthis is particularly useful for event loops where you register or unregister a socket\nfor reading+writing. see ``examples/loop_asyncio.py`` for an example.\n\nwhen the socket is opened, ``on_socket_open`` is called.\nregister the socket with your event loop for reading.\n\nwhen the socket is about to be closed, ``on_socket_close`` is called.\nunregister the socket from your event loop for reading.\n\nwhen a write to the socket failed because it would have blocked, e.g. output buffer full,\n``on_socket_register_write`` is called.\nregister the socket with your event loop for writing.\n\nwhen the next write to the socket succeeded, ``on_socket_unregister_write`` is called.\nunregister the socket from your event loop for writing.\n\nthe callbacks are always called in this order:\n\n- ``on_socket_open``\n- zero or more times:\n\n  - ``on_socket_register_write``\n  - ``on_socket_unregister_write``\n\n- ``on_socket_close``\n\nglobal helper functions\n```````````````````````\n\nthe client module also offers some global helper functions.\n\n``topic_matches_sub(sub, topic)`` can be used to check whether a ``topic``\nmatches a ``subscription``.\n\nfor example:\n\n    the topic ``foo/bar`` would match the subscription ``foo/#`` or ``+/bar``\n\n    the topic ``non/matching`` would not match the subscription ``non/+/+``\n\n\n``connack_string(connack_code)`` returns the error string associated with a\nconnack result.\n\n\n``error_string(mqtt_errno)`` returns the error string associated with a paho\nmqtt error number.\n\npublish\n*******\n\nthis module provides some helper functions to allow straightforward publishing\nof messages in a one-shot manner. in other words, they are useful for the\nsituation where you have a single/multiple messages you want to publish to a\nbroker, then disconnect with nothing else required.\n\nthe two functions provided are ``single()`` and ``multiple()``.\n\nboth functions include support for mqtt v5.0, but do not currently let you\nset any properties on connection or when sending messages.\n\nsingle\n``````\n\npublish a single message to a broker, then disconnect cleanly.\n\n.. code:: python\n\n    single(topic, payload=none, qos=0, retain=false, hostname=\"localhost\",\n        port=1883, client_id=\"\", keepalive=60, will=none, auth=none, tls=none,\n        protocol=mqtt.mqttv311, transport=\"tcp\")\n\n\npublish single function arguments\n'''''''''''''''''''''''''''''''''\n\ntopic\n    the only required argument must be the topic string to which the payload\n    will be published.\n\npayload\n    the payload to be published. if \"\" or none, a zero length payload will be\n    published.\n\nqos\n    the qos to use when publishing,  default to 0.\n\nretain\n    set the message to be retained (true) or not (false).\n\nhostname\n    a string containing the address of the broker to connect to. defaults to\n    localhost.\n\nport\n    the port to connect to the broker on. defaults to 1883.\n\nclient_id\n    the mqtt client id to use. if \"\" or none, the paho library will\n    generate a client id automatically.\n\nkeepalive\n    the keepalive timeout value for the client. defaults to 60 seconds.\n\nwill\n    a dict containing will parameters for the client:\n\n    will = {'topic': \"<topic>\", 'payload':\"<payload\">, 'qos':<qos>, 'retain':<retain>}.\n\n    topic is required, all other parameters are optional and will default to\n    none, 0 and false respectively.\n\n    defaults to none, which indicates no will should be used.\n\nauth\n    a dict containing authentication parameters for the client:\n\n    auth = {'username':\"<username>\", 'password':\"<password>\"}\n\n    username is required, password is optional and will default to none if not provided.\n\n    defaults to none, which indicates no authentication is to be used.\n\ntls\n    a dict containing tls configuration parameters for the client:\n\n    dict = {'ca_certs':\"<ca_certs>\", 'certfile':\"<certfile>\", 'keyfile':\"<keyfile>\", 'tls_version':\"<tls_version>\", 'ciphers':\"<ciphers\">}\n\n    ca_certs is required, all other parameters are optional and will default to none if not provided, which results in the client using the default behaviour - see the paho.mqtt.client documentation.\n\n    defaults to none, which indicates that tls should not be used.\n\nprotocol\n    choose the version of the mqtt protocol to use. use either ``mqttv31``,\n    ``mqttv311``, or ``mqttv5``.\n\ntransport\n    set to \"websockets\" to send mqtt over websockets. leave at the default of\n    \"tcp\" to use raw tcp.\n\npublish single example\n''''''''''''''''''''''\n\n.. code:: python\n\n    import paho.mqtt.publish as publish\n\n    publish.single(\"paho/test/single\", \"payload\", hostname=\"mqtt.eclipseprojects.io\")\n\nmultiple\n````````\n\npublish multiple messages to a broker, then disconnect cleanly.\n\nthis function includes support for mqtt v5.0, but does not currently let you\nset any properties on connection or when sending messages.\n\n.. code:: python\n\n    multiple(msgs, hostname=\"localhost\", port=1883, client_id=\"\", keepalive=60,\n        will=none, auth=none, tls=none, protocol=mqtt.mqttv311, transport=\"tcp\")\n\npublish multiple function arguments\n'''''''''''''''''''''''''''''''''''\n\nmsgs\n    a list of messages to publish. each message is either a dict or a tuple.\n\n    if a dict, only the topic must be present. default values will be\n    used for any missing arguments. the dict must be of the form:\n\n    msg = {'topic':\"<topic>\", 'payload':\"<payload>\", 'qos':<qos>, 'retain':<retain>}\n\n    topic must be present and may not be empty.\n    if payload is \"\", none or not present then a zero length payload will be published. if qos is not present, the default of 0 is used. if retain is not present, the default of false is used.\n\n    if a tuple, then it must be of the form:\n\n    (\"<topic>\", \"<payload>\", qos, retain)\n\nsee ``single()`` for the description of ``hostname``, ``port``, ``client_id``, ``keepalive``, ``will``, ``auth``, ``tls``, ``protocol``, ``transport``.\n\npublish multiple example\n''''''''''''''''''''''''\n\n.. code:: python\n\n    import paho.mqtt.publish as publish\n\n    msgs = [{'topic':\"paho/test/multiple\", 'payload':\"multiple 1\"},\n        (\"paho/test/multiple\", \"multiple 2\", 0, false)]\n    publish.multiple(msgs, hostname=\"mqtt.eclipseprojects.io\")\n\n\nsubscribe\n*********\n\nthis module provides some helper functions to allow straightforward subscribing\nand processing of messages.\n\nthe two functions provided are ``simple()`` and ``callback()``.\n\nboth functions include support for mqtt v5.0, but do not currently let you\nset any properties on connection or when subscribing.\n\nsimple\n``````\n\nsubscribe to a set of topics and return the messages received. this is a\nblocking function.\n\n.. code:: python\n\n    simple(topics, qos=0, msg_count=1, retained=false, hostname=\"localhost\",\n        port=1883, client_id=\"\", keepalive=60, will=none, auth=none, tls=none,\n        protocol=mqtt.mqttv311)\n\n\nsimple subscribe function arguments\n'''''''''''''''''''''''''''''''''''\n\ntopics\n    the only required argument is the topic string to which the client will\n    subscribe. this can either be a string or a list of strings if multiple\n    topics should be subscribed to.\n\nqos\n    the qos to use when subscribing, defaults to 0.\n\nmsg_count\n    the number of messages to retrieve from the broker. defaults to 1. if 1, a\n    single mqttmessage object will be returned. if >1, a list of mqttmessages\n    will be returned.\n\nretained\n    set to true to consider retained messages, set to false to ignore messages\n    with the retained flag set.\n\nhostname\n    a string containing the address of the broker to connect to. defaults to localhost.\n\nport\n    the port to connect to the broker on. defaults to 1883.\n\nclient_id\n    the mqtt client id to use. if \"\" or none, the paho library will\n    generate a client id automatically.\n\nkeepalive\n    the keepalive timeout value for the client. defaults to 60 seconds.\n\nwill\n    a dict containing will parameters for the client:\n\n    will = {'topic': \"<topic>\", 'payload':\"<payload\">, 'qos':<qos>, 'retain':<retain>}.\n\n    topic is required, all other parameters are optional and will default to\n    none, 0 and false respectively.\n\n    defaults to none, which indicates no will should be used.\n\nauth\n    a dict containing authentication parameters for the client:\n\n    auth = {'username':\"<username>\", 'password':\"<password>\"}\n\n    username is required, password is optional and will default to none if not\n    provided.\n\n    defaults to none, which indicates no authentication is to be used.\n\ntls\n    a dict containing tls configuration parameters for the client:\n\n    dict = {'ca_certs':\"<ca_certs>\", 'certfile':\"<certfile>\", 'keyfile':\"<keyfile>\", 'tls_version':\"<tls_version>\", 'ciphers':\"<ciphers\">}\n\n    ca_certs is required, all other parameters are optional and will default to\n    none if not provided, which results in the client using the default\n    behaviour - see the paho.mqtt.client documentation.\n\n    defaults to none, which indicates that tls should not be used.\n\nprotocol\n    choose the version of the mqtt protocol to use. use either ``mqttv31``,\n    ``mqttv311``, or ``mqttv5``.\n\n\nsimple example\n''''''''''''''\n\n.. code:: python\n\n    import paho.mqtt.subscribe as subscribe\n\n    msg = subscribe.simple(\"paho/test/simple\", hostname=\"mqtt.eclipseprojects.io\")\n    print(\"%s %s\" % (msg.topic, msg.payload))\n\nusing callback\n``````````````\n\nsubscribe to a set of topics and process the messages received using a user\nprovided callback.\n\n.. code:: python\n\n    callback(callback, topics, qos=0, userdata=none, hostname=\"localhost\",\n        port=1883, client_id=\"\", keepalive=60, will=none, auth=none, tls=none,\n        protocol=mqtt.mqttv311)\n\ncallback subscribe function arguments\n'''''''''''''''''''''''''''''''''''''\n\ncallback\n    an \"on_message\" callback that will be used for each message received, and\n    of the form\n\n    .. code:: python\n\n        def on_message(client, userdata, message)\n\ntopics\n    the topic string to which the client will subscribe. this can either be a\n    string or a list of strings if multiple topics should be subscribed to.\n\nqos\n    the qos to use when subscribing, defaults to 0.\n\nuserdata\n    a user provided object that will be passed to the on_message callback when\n    a message is received.\n\nsee ``simple()`` for the description of ``hostname``, ``port``, ``client_id``, ``keepalive``, ``will``, ``auth``, ``tls``, ``protocol``.\n\ncallback example\n''''''''''''''''\n\n.. code:: python\n\n    import paho.mqtt.subscribe as subscribe\n\n    def on_message_print(client, userdata, message):\n        print(\"%s %s\" % (message.topic, message.payload))\n\n    subscribe.callback(on_message_print, \"paho/test/callback\", hostname=\"mqtt.eclipseprojects.io\")\n\n\nreporting bugs\n--------------\n\nplease report bugs in the issues tracker at https://github.com/eclipse/paho.mqtt.python/issues.\n\nmore information\n----------------\n\ndiscussion of the paho clients takes place on the `eclipse paho-dev mailing list <https://dev.eclipse.org/mailman/listinfo/paho-dev>`_.\n\ngeneral questions about the mqtt protocol itself (not this library) are discussed in the `mqtt google group <https://groups.google.com/forum/?fromgroups#!forum/mqtt>`_.\n\nthere is much more information available via the `mqtt community site <http://mqtt.org/>`_.\n",
  "docs_url": null,
  "keywords": "paho",
  "license": "eclipse public license v2.0 / eclipse distribution license v1.0",
  "name": "paho-mqtt",
  "package_url": "https://pypi.org/project/paho-mqtt/",
  "project_url": "https://pypi.org/project/paho-mqtt/",
  "project_urls": {
    "Homepage": "http://eclipse.org/paho"
  },
  "release_url": "https://pypi.org/project/paho-mqtt/1.6.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "mqtt version 5.0/3.1.1 client class",
  "version": "1.6.1",
  "releases": [],
  "developers": [
    "roger@atchoo.org",
    "roger_light"
  ],
  "kwds": "mqtt mqttmessage mqttmessages mqttc mqtt_errno",
  "license_kwds": "eclipse public license v2.0 / eclipse distribution license v1.0",
  "libtype": "pypi",
  "id": "pypi_paho_mqtt",
  "homepage": "http://eclipse.org/paho",
  "release_count": 19,
  "dependency_ids": [],
  "documentation_summary": "The provided HTML text is a detailed description of the paho-mqtt 2.0.0 package available on PyPI, released on February 10, 2024. It is a Python client library for MQTT protocol versions 5.0, 3.1.1, and 3.1, supporting Python 3.7 and above. The library enables applications to connect to an MQTT broker to publish messages and subscribe to topics to receive messages. It includes features like a simple publishing and subscribing interface, callbacks for various MQTT events, and support for both synchronous and asynchronous operation. The package is licensed under OSI Approved (EPL-2.0 OR BSD-3-Clause) and maintained by Roger Light and PierreF. Known limitations include issues with session persistence and message loss under certain conditions. Installation can be done via pip, and the package also provides helper functions for easy message publishing and subscribing.",
  "embedding": [
    -0.007907523773610592,
    0.01661060005426407,
    0.00046164370724000037,
    -0.013339231722056866,
    0.011062303557991982,
    0.028091255575418472,
    0.013229499571025372,
    -0.007043388672173023,
    -0.014717732556164265,
    -0.024470116943120956,
    -0.007537180092185736,
    0.019326454028487206,
    -0.027103671804070473,
    0.02329050377011299,
    -0.012413372285664082,
    0.004615579731762409,
    0.00907342042773962,
    -0.015115509741008282,
    -0.010136444121599197,
    -0.009697518311440945,
    0.04293243587017059,
    0.019422469660639763,
    -0.02389402687549591,
    -0.00503050209954381,
    -0.010774258524179459,
    0.0005970934871584177,
    -0.00530825974419713,
    -0.015609300695359707,
    0.004282956477254629,
    0.0025666875299066305,
    0.03977765515446663,
    -0.00956721231341362,
    -0.04501733556389809,
    -0.016926078125834465,
    -0.039064403623342514,
    0.006871933117508888,
    0.018256573006510735,
    0.003696578787639737,
    0.033056605607271194,
    -0.004982494283467531,
    0.009724951349198818,
    -0.002366084838286042,
    0.020478634163737297,
    0.0032370781991630793,
    -0.039366163313388824,
    -0.007324575446546078,
    0.016596883535385132,
    -0.025155939161777496,
    -0.02350996620953083,
    0.01729642227292061,
    0.01087713148444891,
    -0.0013210639590397477,
    0.0002293216239195317,
    -0.016240257769823074,
    0.024182071909308434,
    -0.009793533012270927,
    0.014237658120691776,
    0.024785595014691353,
    -0.0113297738134861,
    -0.017474735155701637,
    0.005634025204926729,
    -0.0003641284420154989,
    -0.022110890597105026,
    -0.007221702020615339,
    0.0009704376570880413,
    0.011768699623644352,
    -0.017776496708393097,
    0.026061223819851875,
    0.015088076703250408,
    -0.01418279204517603,
    0.03250794857740402,
    0.03736356273293495,
    -0.01909327507019043,
    -0.016528302803635597,
    0.02604750730097294,
    -0.0094574810937047,
    -0.034428246319293976,
    0.028200987726449966,
    -0.019065842032432556,
    -0.011535520665347576,
    0.00821614358574152,
    -0.012577969580888748,
    0.007598903961479664,
    0.04509963095188141,
    0.020615799352526665,
    0.03453797847032547,
    -0.003401675494387746,
    0.00991012342274189,
    -0.008223001845180988,
    -0.0040394896641373634,
    0.026445282623171806,
    -0.008435606025159359,
    -0.007146261632442474,
    0.03889980539679527,
    -0.006830783560872078,
    0.0452093631029129,
    -0.024058623239398003,
    0.03590962290763855,
    0.008229860104620457,
    -0.021383918821811676,
    -0.0050236438401043415,
    0.016185391694307327,
    -0.02677447721362114,
    -0.005263681057840586,
    -0.023153338581323624,
    -0.009882690384984016,
    -0.002180912997573614,
    -0.0038406013045459986,
    0.012166476808488369,
    0.009203726425766945,
    -0.012818006798624992,
    0.04852874204516411,
    -0.004900195635855198,
    -0.0471845306456089,
    -0.021932577714323997,
    0.00918315164744854,
    -0.00208146870136261,
    -0.012132185511291027,
    -0.002083183266222477,
    0.006000939756631851,
    -0.013483254238963127,
    0.02316705510020256,
    -0.00977981649339199,
    -0.009848399087786674,
    -0.014038769528269768,
    -0.003727440722286701,
    -0.014114209450781345,
    -0.018201706930994987,
    -0.01913442462682724,
    -0.0014496555086225271,
    0.002009457442909479,
    0.023029891774058342,
    0.009286025539040565,
    0.004406404215842485,
    0.004142363090068102,
    0.022920159623026848,
    -0.022042308002710342,
    -0.014608001336455345,
    -0.043481092900037766,
    -0.03050534799695015,
    0.013551835902035236,
    0.02693907544016838,
    -0.008915681391954422,
    -0.004396116826683283,
    -0.0072079855017364025,
    0.011082878336310387,
    -0.002988467924296856,
    -0.0019854537677019835,
    -0.0064501529559493065,
    0.0022752133663743734,
    0.034428246319293976,
    0.01091828104108572,
    -0.03269997611641884,
    0.005243106745183468,
    -0.01724155619740486,
    0.01282486505806446,
    -0.007784076035022736,
    0.018160557374358177,
    -0.011528662405908108,
    0.005548297427594662,
    -0.007598903961479664,
    0.04018915072083473,
    -0.036787472665309906,
    -0.00691994046792388,
    0.007283425889909267,
    0.032151319086551666,
    0.0010630235774442554,
    -0.020067142322659492,
    -0.006309559103101492,
    -0.008853957988321781,
    0.000151095082401298,
    0.02973722666501999,
    -0.027185970917344093,
    -0.0030844828579574823,
    -0.006871933117508888,
    0.013332373462617397,
    0.00866878591477871,
    0.02127418853342533,
    0.008970547467470169,
    0.0017497024964541197,
    -0.0011513230856508017,
    -0.0015302395913749933,
    -0.00124733813572675,
    0.02003970928490162,
    -0.021095873787999153,
    0.0009172864956781268,
    -0.011693259701132774,
    -0.02381172776222229,
    0.018050827085971832,
    0.02853018045425415,
    0.0378299243748188,
    0.04027144983410835,
    -0.000845703820232302,
    -0.02844788320362568,
    -0.602206289768219,
    -6.681403465336189e-05,
    -0.03722640126943588,
    -0.02822841890156269,
    0.0010990292066708207,
    0.0021689110435545444,
    0.021932577714323997,
    0.02677447721362114,
    -0.005397416651248932,
    0.029353167861700058,
    -0.022234339267015457,
    0.03431851789355278,
    -0.004944774322211742,
    -0.026308119297027588,
    -0.003943474497646093,
    4.3185333197470754e-05,
    0.005421420093625784,
    -0.021164456382393837,
    -0.016542019322514534,
    -0.003933187108486891,
    0.0017377006588503718,
    0.017653049901127815,
    -0.022769279778003693,
    0.008415032178163528,
    0.02407233975827694,
    0.007653769571334124,
    0.006820496637374163,
    -0.031081438064575195,
    0.011645251885056496,
    0.016377421095967293,
    -0.03390702232718468,
    0.04057320952415466,
    0.020602082833647728,
    -0.0162128247320652,
    0.040902405977249146,
    0.0019031551200896502,
    -0.01591106317937374,
    0.03234335035085678,
    0.0024552415125072002,
    0.0383511483669281,
    -0.006539309397339821,
    -0.023619698360562325,
    -0.006196398753672838,
    0.0025838331785053015,
    0.010349049232900143,
    0.006957660894840956,
    0.014978345483541489,
    -0.003974336665123701,
    0.00019878112652804703,
    -0.01681634783744812,
    0.006793063599616289,
    -0.019724231213331223,
    0.012866014614701271,
    -0.015513285994529724,
    0.01237908098846674,
    0.015924779698252678,
    0.04337136074900627,
    -0.012900305911898613,
    -0.004982494283467531,
    0.006583888083696365,
    -0.010088436305522919,
    -0.0044852737337350845,
    0.0021397636737674475,
    -0.023413952440023422,
    -0.003744586370885372,
    0.008833383210003376,
    0.009443764574825764,
    -0.008545338176190853,
    0.01156295370310545,
    -0.031300902366638184,
    0.00791438203305006,
    0.0031359195709228516,
    -0.006511876825243235,
    -0.020519783720374107,
    0.011268050409853458,
    0.03985995426774025,
    0.02453869953751564,
    0.023263070732355118,
    -0.00315820868127048,
    0.013332373462617397,
    -0.00971809308975935,
    -0.011062303557991982,
    -0.008415032178163528,
    -0.014553136192262173,
    0.06397344172000885,
    -0.005153949838131666,
    -0.024813028052449226,
    0.0055448682978749275,
    0.022385219112038612,
    0.0019082988146692514,
    0.01977909728884697,
    0.00028461599140428007,
    0.010980004444718361,
    0.0016939794877544045,
    -0.008126987144351006,
    0.017008377239108086,
    -0.02762489579617977,
    -0.0054042749106884,
    -0.02608865685760975,
    -0.015101793222129345,
    0.007235418539494276,
    -0.03058764711022377,
    -0.0016596884233877063,
    -0.010664527304470539,
    0.024785595014691353,
    0.028283284977078438,
    -0.009018555283546448,
    0.010931997559964657,
    0.021383918821811676,
    -0.02260468155145645,
    -0.005287684965878725,
    -0.032974306493997574,
    -0.016706615686416626,
    -0.016569452360272408,
    0.014237658120691776,
    -0.030011555179953575,
    0.029956690967082977,
    -0.007043388672173023,
    0.013997619971632957,
    -0.00971809308975935,
    -0.017858795821666718,
    -0.024566132575273514,
    0.00042692397255450487,
    0.004522993694990873,
    0.012982604093849659,
    0.03261767700314522,
    0.01291402243077755,
    -0.022152040153741837,
    -0.02179541252553463,
    -0.0015542433829978108,
    0.029956690967082977,
    0.013366663828492165,
    0.0006399573176167905,
    0.0006086667417548597,
    0.01703581027686596,
    -0.007838941179215908,
    0.04778805375099182,
    -0.010781116783618927,
    0.009766100905835629,
    0.026362985372543335,
    -0.0076880608685314655,
    0.021397635340690613,
    -0.000209925725357607,
    0.006772488821297884,
    0.0029781805351376534,
    -0.03950332850217819,
    -0.00855905469506979,
    -0.015472136437892914,
    -0.007489172741770744,
    0.008634494617581367,
    -0.026993941515684128,
    -0.015472136437892914,
    -0.023029891774058342,
    0.0329468734562397,
    -0.014704016968607903,
    -0.022728130221366882,
    -0.0014059344539418817,
    -0.006895937025547028,
    -0.002345510059967637,
    0.00991012342274189,
    -0.012221341952681541,
    0.016843780875205994,
    -0.009539779275655746,
    -0.0039023251738399267,
    -0.024867894127964973,
    0.004180083051323891,
    -0.016871212050318718,
    0.022453801706433296,
    -0.0008765658130869269,
    -0.028091255575418472,
    -0.012406514026224613,
    -0.027254553511738777,
    -0.01887381263077259,
    -0.008058404549956322,
    0.016267690807580948,
    0.029545197263360023,
    -0.0015285250265151262,
    -0.02772091142833233,
    -0.01373014971613884,
    -0.015046927146613598,
    0.011062303557991982,
    0.023455100134015083,
    -0.014251374639570713,
    -0.020108291879296303,
    0.0238528773188591,
    0.0032679401338100433,
    0.017707915976643562,
    0.028077539056539536,
    -0.012598544359207153,
    -0.0012387654278427362,
    -0.012235058471560478,
    0.0344008132815361,
    -0.014333672821521759,
    0.03665031120181084,
    -0.015362405218183994,
    0.016281405463814735,
    0.016336271539330482,
    0.0015825334703549743,
    0.002419235883280635,
    0.040051985532045364,
    0.011453221552073956,
    0.025046207010746002,
    -0.012152760289609432,
    -0.0007145404233597219,
    0.0006703906692564487,
    0.003125632181763649,
    0.007509747054427862,
    -0.016103092581033707,
    0.02938060089945793,
    0.015033210627734661,
    0.04611464962363243,
    -0.010109011083841324,
    -0.045456260442733765,
    -0.007694919127970934,
    0.0075166053138673306,
    0.013723291456699371,
    -0.0061072418466210365,
    0.027830643579363823,
    -0.028859375044703484,
    0.009560354053974152,
    0.022124607115983963,
    0.015938496217131615,
    0.014854897744953632,
    -0.013490112498402596,
    0.008840241469442844,
    -0.028859375044703484,
    0.0378299243748188,
    0.028969107195734978,
    0.009388898499310017,
    -0.011823565699160099,
    0.0014410828007385135,
    0.00583291333168745,
    0.015280107036232948,
    -0.015074360184371471,
    0.019628215581178665,
    -0.026033790782094002,
    0.032069019973278046,
    -0.021630816161632538,
    0.040298882871866226,
    -0.019189290702342987,
    0.0029798950999975204,
    0.010280466638505459,
    0.0253616850823164,
    -0.020986143499612808,
    0.014608001336455345,
    0.0029198857955634594,
    0.005068222060799599,
    -0.004889908246695995,
    -0.0065324511379003525,
    0.01057536993175745,
    -0.004293243400752544,
    0.007331433705985546,
    -0.023907743394374847,
    0.014018194749951363,
    0.014388538897037506,
    -0.012351647950708866,
    -0.015801331028342247,
    0.011981304734945297,
    0.016446003690361977,
    -0.00521224457770586,
    0.0005332263535819948,
    -0.023839160799980164,
    0.017488451674580574,
    0.0121870506554842,
    0.0511348620057106,
    -0.021960008889436722,
    0.0021209034603089094,
    -0.03462027758359909,
    -0.0009944414487108588,
    -0.02913370355963707,
    0.0018825804581865668,
    -0.016020793467760086,
    -0.025005057454109192,
    -0.04430408030748367,
    0.020698098465800285,
    -0.00791438203305006,
    0.003171925200149417,
    0.030916839838027954,
    -0.003878321498632431,
    -0.0020334613509476185,
    -0.04419434815645218,
    -0.021137023344635963,
    0.03272740915417671,
    0.0231259074062109,
    0.003916041925549507,
    -0.0034085337538272142,
    -0.015184091404080391,
    0.031026571989059448,
    -0.038378581404685974,
    0.011487512849271297,
    0.008949972689151764,
    -0.0029250294901430607,
    0.010650810785591602,
    0.0004215660155750811,
    -0.01137092337012291,
    -0.010753683745861053,
    0.00967694353312254,
    -0.010012996383011341,
    -0.017899945378303528,
    -0.008140702731907368,
    0.016322555020451546,
    0.011247475631535053,
    -0.018764080479741096,
    0.011487512849271297,
    0.04350852593779564,
    0.021850278601050377,
    0.02733685076236725,
    -0.01737872138619423,
    -0.004725311417132616,
    -0.02030032128095627,
    0.009656368754804134,
    -0.00570603646337986,
    -0.015719031915068626,
    -0.012886589393019676,
    -0.003480545012280345,
    0.004739027936011553,
    0.013572410680353642,
    -0.01927158795297146,
    0.02093127742409706,
    -0.012173334136605263,
    0.0013622132828459144,
    -0.006758772302418947,
    0.00012880588474217802,
    -0.009093995206058025,
    0.025636013597249985,
    0.003768590046092868,
    0.02068438194692135,
    0.007605762220919132,
    -0.014580568298697472,
    0.011117169633507729,
    -0.025965208187699318,
    0.0075920457020401955,
    0.027364283800125122,
    0.016788914799690247,
    -0.024264371022582054,
    0.014841181226074696,
    0.014429687522351742,
    0.006501589436084032,
    0.03217875212430954,
    0.014841181226074696,
    -0.0009764385758899152,
    -0.009642652235925198,
    0.00457785977050662,
    -0.019957410171628,
    -0.005891208071261644,
    -0.021850278601050377,
    -0.002571831224486232,
    0.01758446730673313,
    0.03157522901892662,
    0.021960008889436722,
    0.028173554688692093,
    0.014992062002420425,
    0.009443764574825764,
    -0.01422394160181284,
    0.007283425889909267,
    0.014319956302642822,
    0.0121870506554842,
    0.037473294883966446,
    -0.03250794857740402,
    0.0560179129242897,
    0.006024943199008703,
    -0.012495670467615128,
    0.005057934671640396,
    0.017474735155701637,
    0.019106991589069366,
    0.014854897744953632,
    -0.017214123159646988,
    0.012948312796652317,
    -0.0006382428109645844,
    -0.03248051553964615,
    -0.019120708107948303,
    0.0008958545513451099,
    -0.018174273893237114,
    0.010822266340255737,
    0.00624440610408783,
    0.01570531539618969,
    -0.029846958816051483,
    -0.022467518225312233,
    0.040353745222091675,
    -0.002969607710838318,
    0.016075659543275833,
    -0.010698817670345306,
    -0.002755288500338793,
    -0.04413948208093643,
    -0.023016175255179405,
    -0.033879589289426804,
    0.013634135015308857,
    -0.02758374810218811,
    -0.001494233962148428,
    0.0018808658933266997,
    -0.0035011195577681065,
    0.016075659543275833,
    -0.025238236412405968,
    -0.028722211718559265,
    0.019587066024541855,
    0.01098686270415783,
    -0.012920879758894444,
    -0.0066627576015889645,
    0.040051985532045364,
    0.0070708212442696095,
    0.01763933338224888,
    0.01276314165443182,
    -0.005949502810835838,
    0.002712424611672759,
    0.00570603646337986,
    -0.02252238430082798,
    0.012097894214093685,
    -0.029078839346766472,
    -0.0008992836810648441,
    -0.0007874090224504471,
    0.009340890683233738,
    -0.016103092581033707,
    0.014018194749951363,
    0.029490331187844276,
    -0.025553714483976364,
    -0.014237658120691776,
    -0.0005730897537432611,
    -0.01222820021212101,
    -0.0009592930437065661,
    0.020451202988624573,
    -0.018352588638663292,
    0.004111500922590494,
    -0.008936256170272827,
    0.005009927321225405,
    0.003967478405684233,
    -0.020698098465800285,
    0.014361105859279633,
    -0.02080782875418663,
    0.02960006333887577,
    0.015677882358431816,
    -0.012063602916896343,
    0.018476035445928574,
    -0.04337136074900627,
    0.012962029315531254,
    0.0255674310028553,
    -0.024483833461999893,
    0.00600779801607132,
    0.012735708616673946,
    0.02990182489156723,
    0.016363704577088356,
    -0.002223776653409004,
    0.04221918061375618,
    0.006021514069288969,
    -0.011549237184226513,
    -0.0074754562228918076,
    -0.019463619217276573,
    -0.005997510626912117,
    0.007626336999237537,
    -0.006384999491274357,
    0.021041009575128555,
    -0.0028410162776708603,
    -0.016199108213186264,
    -0.005136804189532995,
    -0.005078509449958801,
    0.033193767070770264,
    0.030916839838027954,
    -0.0013579268706962466,
    -0.023798011243343353,
    0.009574070572853088,
    0.0011504658032208681,
    -0.0004937915946356952,
    -0.0029833242297172546,
    -0.030093854293227196,
    -0.0038234558887779713,
    -0.008497330360114574,
    0.004550426732748747,
    0.0044852737337350845,
    0.009738667868077755,
    -0.021685680374503136,
    -0.022686980664730072,
    -0.044166915118694305,
    0.02106844075024128,
    0.0026146951131522655,
    0.033879589289426804,
    -0.02175426296889782,
    0.002100328914821148,
    -0.0032267910428345203,
    -0.02093127742409706,
    -0.01586991362273693,
    -0.013867313973605633,
    0.019916260614991188,
    -0.02929830178618431,
    0.006268410012125969,
    0.009313458576798439,
    0.018201706930994987,
    0.009327175095677376,
    0.0025701166596263647,
    -0.0037891645915806293,
    0.0035799890756607056,
    -0.00018624344374984503,
    -0.006823925767093897,
    -0.0005306545062921941,
    0.0015388124156743288,
    -0.020903844386339188,
    -0.005369983613491058,
    0.015691598877310753,
    0.011617818847298622,
    -0.010287324897944927,
    0.0005122230504639447,
    -0.013586127199232578,
    0.0022803570609539747,
    0.006481014657765627,
    -0.026952791959047318,
    -0.011185751296579838,
    0.012235058471560478,
    -0.004265810828655958,
    -0.021287905052304268,
    0.030916839838027954,
    -0.04852874204516411,
    -0.02359226532280445,
    0.02131533809006214,
    0.012331073172390461,
    -0.009786674752831459,
    0.007063962984830141,
    0.02449754998087883,
    -0.026925358921289444,
    -0.0034205354750156403,
    0.025718312710523605,
    0.01669289916753769,
    0.0037823065649718046,
    0.0016802630852907896,
    -0.004214374348521233,
    -0.0015688170678913593,
    -0.0024020904675126076,
    0.0383511483669281,
    0.014909762889146805,
    -0.00012098322622478008,
    0.015719031915068626,
    -0.01578761450946331,
    0.01927158795297146,
    0.012845439836382866,
    -0.0243192370980978,
    0.025210805237293243,
    -0.015458419919013977,
    -0.03475744277238846,
    -0.01831143908202648,
    -0.048501309007406235,
    -0.02667846344411373,
    0.00496534863486886,
    0.004197228699922562,
    0.01836630329489708,
    0.009772959165275097,
    0.005095655098557472,
    -0.010760542005300522,
    0.027432866394519806,
    -0.008483613841235638,
    0.04435894638299942,
    0.008613919839262962,
    0.025594864040613174,
    0.013462679460644722,
    -0.0050819385796785355,
    -0.0022289203479886055,
    -0.02282414585351944,
    -0.026266969740390778,
    -0.00031783548183739185,
    0.025471417233347893,
    0.011610960587859154,
    0.01796852797269821,
    -0.007982964627444744,
    0.0045435684733092785,
    0.003099913941696286,
    -0.026870492845773697,
    -0.01836630329489708,
    0.04153335839509964,
    0.03478487581014633,
    -0.00566488690674305,
    -0.014443404041230679,
    -0.0029353166464716196,
    -0.031163737177848816,
    0.02222062274813652,
    -0.017899945378303528,
    -0.021466217935085297,
    0.018736647441983223,
    -0.014786315150558949,
    -0.030011555179953575,
    0.0248404610902071,
    0.002036890247836709,
    -0.0053734127432107925,
    0.013208925724029541,
    0.004588147159665823,
    -0.02264583110809326,
    -0.0076880608685314655,
    -0.014827464707195759,
    -0.014621717855334282,
    0.022810429334640503,
    0.01729642227292061,
    -0.012063602916896343,
    -0.017557034268975258,
    0.045758020132780075,
    0.018983542919158936,
    -0.04156079143285751,
    -0.00901169702410698,
    0.004149220883846283,
    0.0329468734562397,
    0.00021860565175302327,
    -0.017351288348436356,
    -0.013106051832437515,
    -0.02780321054160595,
    0.007324575446546078,
    -0.009107711724936962,
    -0.006690190173685551,
    -0.021164456382393837,
    -0.02530681900680065,
    -0.009615220129489899,
    0.013798732310533524,
    -0.009738667868077755,
    0.013229499571025372,
    -0.021466217935085297,
    -0.0012447662884369493,
    -0.026116089895367622,
    -0.026033790782094002,
    0.0033039457630366087,
    -0.0007916953763924539,
    -0.008126987144351006,
    -0.026829343289136887,
    -0.021850278601050377,
    -0.021438784897327423,
    0.015362405218183994,
    0.011837282218039036,
    0.01335980650037527,
    0.0043721129186451435,
    0.03429108485579491,
    -0.019065842032432556,
    -0.0006193827139213681,
    0.013133484870195389,
    -0.00855905469506979,
    -0.004670445341616869,
    0.0007351150852628052,
    -0.008126987144351006,
    -0.003820026759058237,
    0.026184670627117157,
    -0.006515305954962969,
    -0.02445640042424202,
    -0.03662287816405296,
    0.011384639889001846,
    0.035882189869880676,
    0.010980004444718361,
    -0.011254333890974522,
    0.022892726585268974,
    0.0002644699707161635,
    0.010630236007273197,
    0.01072625070810318,
    -0.004279527347534895,
    0.03774762526154518,
    -0.013935896568000317,
    0.010397056117653847,
    0.029408033937215805,
    0.0055688717402517796,
    0.005623737815767527,
    0.006614749785512686,
    0.005867204163223505,
    0.005273968446999788,
    -0.03615651652216911,
    -0.018928678706288338,
    -0.007880090735852718,
    0.0014162217266857624,
    -0.02338651940226555,
    -0.002110616071149707,
    -0.008223001845180988,
    -0.021438784897327423,
    -0.02054721675813198,
    0.028777077794075012,
    0.011377781629562378,
    0.007228560280054808,
    -0.0022460659965872765,
    0.018599484115839005,
    0.024483833461999893,
    -0.030231019482016563,
    -0.022961309179663658,
    -0.025677163153886795,
    -0.02149365097284317,
    0.01604822650551796,
    -0.04169795662164688,
    -0.033358365297317505,
    -0.007019384764134884,
    0.009937555529177189,
    0.006871933117508888,
    -0.01754331775009632,
    -0.014333672821521759,
    -0.020190589129924774,
    -0.038680341094732285,
    0.01302375365048647,
    -0.0064330073073506355,
    -0.004667016211897135,
    -0.01617167517542839,
    0.017611900344491005,
    0.03895467147231102,
    0.011391498148441315,
    0.013503829017281532,
    0.010054145939648151,
    -0.0398050881922245,
    -0.015389838255941868,
    -0.023798011243343353,
    -0.020012276247143745,
    0.0004899338237009943,
    -0.008545338176190853,
    -0.0324256494641304,
    -0.0024106630589812994,
    0.03497690334916115,
    -0.008037829771637917,
    -0.0033656698651611805,
    0.04466070607304573,
    -0.009087136946618557,
    -0.019847679883241653,
    -0.015307539142668247,
    -0.0034736867528408766,
    -0.005452282261103392,
    -0.0053734127432107925,
    0.010787975043058395,
    -0.0034222500398755074,
    -0.01955963298678398,
    0.002498105401173234,
    0.016157958656549454,
    -0.0007321146549656987,
    -0.030615078285336494,
    0.022193189710378647,
    -0.0024929617065936327,
    0.013291223905980587,
    -0.005860345903784037,
    -0.026458999142050743,
    -0.007221702020615339,
    0.015499569475650787,
    0.004739027936011553,
    0.0009207155671902001,
    -0.0038406013045459986,
    0.025498850271105766,
    -0.018242856487631798,
    0.02453869953751564,
    -0.011837282218039036,
    0.03226105123758316,
    -0.03272740915417671,
    -0.021095873787999153,
    0.04131389781832695,
    0.003252509282901883,
    -0.007886948995292187,
    -0.013949613086879253,
    0.012331073172390461,
    -0.005270539317280054,
    0.002652415307238698,
    0.0024586706422269344,
    -0.021891428157687187,
    -0.004512706771492958,
    -0.0184486024081707,
    -0.010246175341308117,
    -0.028639912605285645,
    0.0055688717402517796,
    -0.004989352542907,
    0.03475744277238846,
    -0.004595004953444004,
    0.0005992366932332516,
    -0.01126119215041399,
    -0.02290644310414791,
    0.008853957988321781,
    -0.012214483693242073,
    -0.0035354106221348047,
    -0.008092695847153664,
    0.022152040153741837,
    0.0018465748289600015,
    0.005366554483771324,
    0.017557034268975258,
    0.16832807660102844,
    0.012852298095822334,
    0.024387817829847336,
    0.012022453360259533,
    0.018818946555256844,
    0.03911926597356796,
    -0.01346953772008419,
    0.010239317081868649,
    -0.008483613841235638,
    0.026239536702632904,
    0.003922899719327688,
    -0.014745165593922138,
    -0.012365364469587803,
    0.0040532061830163,
    0.014319956302642822,
    0.0037171533331274986,
    -0.022494951263070107,
    -0.034428246319293976,
    -0.02874964475631714,
    -0.013462679460644722,
    -0.019765380769968033,
    -0.01861320063471794,
    0.015623017214238644,
    -0.020944993942975998,
    -0.0061243874952197075,
    0.0051779537461698055,
    -0.014786315150558949,
    -0.005949502810835838,
    0.026705896481871605,
    0.010191310197114944,
    -0.028118688613176346,
    0.01377129927277565,
    -0.0062204026617109776,
    -0.029490331187844276,
    -0.02110959030687809,
    -0.0020746104419231415,
    -0.010136444121599197,
    -0.006354137789458036,
    0.015842480584979057,
    0.01655573584139347,
    -0.00817499402910471,
    -0.020999860018491745,
    0.01651458628475666,
    -0.02097242698073387,
    -0.01407306082546711,
    -0.002624982502311468,
    -0.01171383447945118,
    0.006090096198022366,
    -0.015417271293699741,
    -0.013421529904007912,
    -0.010026712901890278,
    -0.010561653412878513,
    0.021658247336745262,
    0.0005439423257485032,
    -0.02183656208217144,
    -0.008058404549956322,
    -0.014978345483541489,
    0.014498270116746426,
    0.0029181712307035923,
    0.005829484201967716,
    -0.030560214072465897,
    0.012056744657456875,
    -0.009670085273683071,
    0.019628215581178665,
    -0.049406591802835464,
    0.00956721231341362,
    -0.031163737177848816,
    0.009807249531149864,
    -0.041423629969358444,
    -0.0001965307747013867,
    -0.0057403272949159145,
    0.010938855819404125,
    -0.015060643665492535,
    0.008161277510225773,
    -0.013901605270802975,
    -0.025759462267160416,
    0.0403263121843338,
    0.02711738832294941,
    0.019545918330550194,
    0.027515165507793427,
    -0.015979643911123276,
    3.0352966859936714e-05,
    -0.0027518593706190586,
    0.002468958031386137,
    0.011899005621671677,
    -0.006758772302418947,
    0.051683519035577774,
    0.008312158286571503,
    -0.014292523264884949,
    -0.00877165887504816,
    -0.005167666357010603,
    -0.02393517643213272,
    0.013394096866250038,
    0.01994369365274906,
    0.003974336665123701,
    0.02350996620953083,
    -0.018434885889291763,
    0.004917341284453869,
    -0.020999860018491745,
    0.010040429420769215,
    -0.015527002513408661,
    0.06836270540952682,
    0.024099772796034813,
    -0.004286385606974363,
    -0.014690300449728966,
    -0.015513285994529724,
    -0.002623267937451601,
    0.019984843209385872,
    0.013448962941765785,
    -0.027556315064430237,
    0.005606592167168856,
    -0.01625397428870201,
    -0.011357206851243973,
    -0.0077292099595069885,
    4.7953935791156255e-06,
    0.00217748386785388,
    -0.015266390517354012,
    -0.0037308698520064354,
    0.0048110391944646835,
    -0.0010895992163568735,
    -0.0006421005236916244,
    -0.02586919255554676,
    -0.006988522596657276,
    0.014786315150558949,
    -0.022248053923249245,
    -0.004831613507121801,
    -0.006553025916218758,
    -0.0034119628835469484,
    -0.007358866278082132,
    -0.012200767174363136,
    0.03135576471686363,
    -0.006940515246242285,
    -0.0019323024898767471,
    0.01533497218042612,
    -0.009244875982403755,
    -0.0015688170678913593,
    -0.028420450165867805,
    -0.007948673330247402,
    0.008332733064889908,
    0.02913370355963707,
    -0.02681562677025795,
    -0.010705675929784775,
    0.011830423958599567,
    -0.009039129130542278,
    -0.01951848529279232,
    -0.0368972048163414,
    0.005877491552382708,
    -0.03409905359148979,
    0.0013442104682326317,
    0.004286385606974363,
    0.0018002819269895554,
    -0.03316633403301239,
    0.007159978151321411,
    -0.014114209450781345,
    0.011089736595749855,
    -0.005997510626912117,
    0.010157018899917603,
    -0.005383700132369995,
    0.00791438203305006,
    -0.0010201596887782216,
    -0.033824723213911057,
    -0.00011541092681000009,
    0.0031496360898017883,
    -0.010301041416823864,
    -0.03250794857740402,
    0.009690660052001476,
    -0.1731562614440918,
    0.020739248022437096,
    0.033468097448349,
    -0.05190298333764076,
    0.0028101543430238962,
    -0.03289200738072395,
    0.015609300695359707,
    -0.009251734241843224,
    -0.011398356407880783,
    -0.015376121737062931,
    0.021342771127820015,
    0.0006245263502933085,
    0.013414671644568443,
    -0.031163737177848816,
    0.01990254409611225,
    -0.008943114429712296,
    -0.0006729625165462494,
    -0.01068510115146637,
    0.010630236007273197,
    0.0072011277079582214,
    0.028393017128109932,
    -0.009087136946618557,
    0.022206906229257584,
    -0.00328165665268898,
    0.015142942778766155,
    -0.014909762889146805,
    -0.02300245873630047,
    -0.0034393956884741783,
    -0.011638393625617027,
    -0.01122004259377718,
    -0.002576974919065833,
    0.012673984281718731,
    0.03401675447821617,
    0.026952791959047318,
    0.015815047547221184,
    0.01006100419908762,
    0.022042308002710342,
    -0.022248053923249245,
    0.002345510059967637,
    0.029929257929325104,
    0.030944272875785828,
    0.030148720368742943,
    0.042191747575998306,
    -0.01831143908202648,
    -0.009052845649421215,
    0.010431347414851189,
    0.003874892368912697,
    -0.016871212050318718,
    -0.0037925937213003635,
    -0.023304220288991928,
    0.03132833540439606,
    -0.024566132575273514,
    0.025498850271105766,
    -0.00483847176656127,
    0.02861247956752777,
    -0.007708635646849871,
    -0.007132545113563538,
    -0.0037034370470792055,
    0.010589086450636387,
    -0.0023575120139867067,
    -0.0021654819138348103,
    -0.016720332205295563,
    -0.0017248415388166904,
    -0.004824755247682333,
    -0.005932357627898455,
    -0.034126486629247665,
    -0.0025049636606127024,
    0.020451202988624573,
    0.006223831791430712,
    -0.0061655365861952305,
    0.011076020076870918,
    -0.006477585528045893,
    0.0053322636522352695,
    0.0009215728496201336,
    0.030532781034708023,
    0.009395756758749485,
    -0.013064902275800705,
    0.02869477868080139,
    0.03673260658979416,
    0.006405574269592762,
    -0.004252094309777021,
    0.012605402618646622,
    -0.011309199035167694,
    0.030176153406500816,
    0.026925358921289444,
    -0.018174273893237114,
    -0.015252673998475075,
    -0.041423629969358444,
    -0.013181492686271667,
    0.009916981682181358,
    -0.00022825002088211477,
    -0.023537399247288704,
    0.027775777503848076,
    -0.02252238430082798,
    -0.006052376236766577,
    -0.0027810067404061556,
    -0.00355598540045321,
    -0.006096954457461834,
    0.0003907040227204561,
    -0.013613560236990452,
    -0.003307374892756343,
    0.008675644174218178,
    -0.008044688031077385,
    -0.014498270116746426,
    0.048803068697452545,
    0.012022453360259533,
    -0.019545918330550194,
    0.012920879758894444,
    0.01422394160181284,
    -0.004889908246695995,
    -0.022152040153741837,
    0.0034754013177007437,
    0.0243741013109684,
    0.030231019482016563,
    -0.019532201811671257,
    0.028941674157977104,
    -0.005225961096584797,
    -0.023825444281101227,
    -0.0036108510103076696,
    -0.0015302395913749933,
    0.046443842351436615,
    -0.018201706930994987,
    0.001777992700226605,
    0.028475316241383553,
    -0.018009677529335022,
    -0.04224661365151405,
    -0.08087208867073059,
    -0.041725389659404755,
    0.022453801706433296,
    -0.010746825486421585,
    -0.032151319086551666,
    -0.007310858927667141,
    0.003984624054282904,
    0.027830643579363823,
    0.018119407817721367,
    -0.013764441013336182,
    -0.014319956302642822,
    0.0036520003341138363,
    -0.009443764574825764,
    0.0038577469531446695,
    0.011610960587859154,
    -0.012550536543130875,
    -0.004152650013566017,
    -0.0045607141219079494,
    -0.005143662448972464,
    0.011103453114628792,
    -0.014909762889146805,
    0.006371283438056707,
    -0.01776278205215931,
    -0.010733108967542648,
    -0.005627166945487261,
    -0.004564143251627684,
    -0.03028588555753231,
    -0.0007312573725357652,
    0.018160557374358177,
    0.020492350682616234,
    0.029929257929325104,
    -0.02324935421347618,
    -0.012536820024251938,
    -0.008332733064889908,
    -0.0009764385758899152,
    0.004972206894308329,
    -0.010719392448663712,
    -0.026266969740390778,
    0.052917998284101486,
    -0.017557034268975258,
    -0.0014273663982748985,
    0.017214123159646988,
    0.03333093225955963,
    -0.020231738686561584,
    0.00948491320014,
    -0.009018555283546448,
    0.0034891178365796804,
    0.028283284977078438,
    0.026445282623171806,
    -0.029078839346766472,
    -0.03796708583831787,
    -0.015883630141615868,
    -0.0031170593574643135,
    -0.029078839346766472,
    0.006210115272551775,
    -0.0025221090763807297,
    0.011981304734945297,
    0.013106051832437515,
    -0.015609300695359707,
    -0.031163737177848816,
    0.01703581027686596,
    -0.01685749739408493,
    0.0005735183949582279,
    0.007681202609091997,
    0.0047561731189489365,
    -0.030752243474125862,
    0.02367456443607807,
    -0.018901245668530464,
    0.03947589546442032,
    -0.012660267762839794,
    -0.029106272384524345,
    0.023455100134015083,
    -0.01634998805820942,
    0.0015130940591916442,
    -0.020711814984679222,
    0.0059117828495800495,
    -0.00045778596540912986,
    -0.007269709836691618,
    -0.0030861974228173494,
    0.005304830614477396,
    -0.009642652235925198,
    -0.0019580209627747536,
    -0.03003898821771145,
    0.011103453114628792,
    0.022536100819706917,
    0.017831362783908844,
    -1.1673702829284593e-05,
    0.007708635646849871,
    0.026952791959047318,
    -0.03582732379436493,
    0.013250074349343777,
    -0.005541439168155193,
    0.023990042507648468,
    0.008312158286571503,
    0.01651458628475666,
    -0.0057403272949159145,
    0.005136804189532995,
    -0.009354607202112675,
    -0.006378141697496176,
    0.00933403242379427,
    -0.04364569112658501,
    -0.018997259438037872,
    -0.08284725993871689,
    0.010143302381038666,
    0.01570531539618969,
    -0.005867204163223505,
    0.016446003690361977,
    -0.026280686259269714,
    0.023263070732355118,
    -0.04027144983410835,
    0.003847459563985467,
    -0.008881391026079655,
    -0.032069019973278046,
    0.0015739607624709606,
    -0.01342838816344738,
    0.0012070460943505168,
    -0.005184812005609274,
    0.021013576537370682,
    0.03772019222378731,
    -0.009690660052001476,
    0.024511266499757767,
    -0.01323635783046484,
    -0.011199467815458775,
    -0.008092695847153664,
    0.02973722666501999,
    0.01278371550142765,
    -0.012372222729027271,
    -0.001478802994824946,
    -0.015636734664440155,
    0.03110887110233307,
    -0.006419290788471699,
    0.00870993547141552,
    0.01655573584139347,
    -0.009388898499310017,
    -0.005424849223345518,
    0.01866806484758854,
    -0.0008804235840216279,
    0.009834682568907738,
    0.004721882287412882,
    0.021383918821811676,
    0.006676474120467901,
    0.016404854133725166,
    -0.01831143908202648,
    -0.003741157241165638,
    0.025882909074425697,
    -0.0184486024081707,
    0.024401534348726273,
    0.02479931153357029,
    -0.010157018899917603,
    0.0024466686882078648,
    0.040957268327474594,
    -0.0022494951263070107,
    0.04194485396146774,
    -0.0005563728045672178,
    -0.028475316241383553,
    -0.03763789311051369,
    -0.018434885889291763,
    -0.029929257929325104,
    0.02497762441635132,
    -0.01595221273601055,
    -0.0108085498213768,
    -0.002283786190673709,
    0.028173554688692093,
    -0.00795553158968687,
    -0.006933656986802816,
    0.01167268492281437,
    -0.005239677615463734,
    -0.02106844075024128,
    -0.018818946555256844,
    -0.008305300027132034,
    -0.021054724231362343,
    -0.014402255415916443,
    -0.022975025698542595,
    -0.047129664570093155,
    0.02693907544016838,
    0.006573600694537163,
    0.04131389781832695,
    0.000681535282637924,
    -0.0014050771715119481,
    0.007866374216973782,
    -0.01955963298678398,
    -0.0014076490188017488,
    0.021548517048358917,
    0.010129585862159729,
    -0.02831071801483631,
    0.004848759155720472,
    0.034894607961177826,
    0.005424849223345518,
    -0.022961309179663658,
    -0.013695858418941498,
    -0.0064330073073506355,
    0.008284726180136204,
    -0.005808909423649311,
    -0.004790464416146278,
    0.02772091142833233,
    0.02093127742409706,
    -0.005445424001663923,
    0.003093055682256818,
    -0.013421529904007912,
    -0.021809129044413567,
    0.0001468086993554607,
    -0.010390197858214378,
    -0.006861645728349686,
    -0.008271009661257267,
    0.01287287287414074,
    -0.022165756672620773,
    -0.022152040153741837,
    -0.015636734664440155,
    -0.0071668364107608795,
    -0.026061223819851875,
    7.779789302730933e-05,
    -0.00468759099021554,
    0.01729642227292061,
    -0.021507367491722107,
    0.016912361606955528,
    0.01707695983350277,
    -0.0179273784160614,
    0.02591034211218357,
    -0.0001800281897885725,
    0.00791438203305006,
    -0.02869477868080139,
    0.014882329851388931,
    -0.016377421095967293,
    0.02639041841030121,
    0.032288484275341034,
    -0.027213403955101967,
    0.00012162618804723024,
    0.03604678809642792,
    0.017282705754041672,
    0.0037377281114459038,
    0.020876411348581314,
    0.00787323247641325,
    0.014292523264884949,
    0.009471197612583637,
    -0.019628215581178665,
    -0.027995239943265915,
    -0.017365004867315292,
    -0.01763933338224888,
    -0.011796132661402225,
    0.00982782430946827,
    0.0006472442182712257,
    0.07922612130641937,
    0.015568152070045471,
    -0.017090676352381706,
    -0.01346953772008419,
    0.008984263986349106,
    0.009683801792562008,
    0.010829123668372631,
    0.02145250141620636,
    0.008648211136460304,
    -0.008593345060944557,
    0.022453801706433296,
    0.005750614684075117,
    -0.023071041330695152,
    -0.030642511323094368,
    -0.022371502593159676,
    -0.006772488821297884,
    -0.039750222116708755,
    0.018818946555256844,
    -0.010102152824401855,
    0.007489172741770744,
    0.032535381615161896,
    0.0258280448615551,
    -0.014813748188316822,
    -0.029408033937215805,
    -0.024689579382538795,
    -0.0060112266801297665,
    0.03667774423956871,
    0.014635434374213219,
    -0.005616879556328058,
    -0.04688276723027229,
    0.005634025204926729,
    0.010486213490366936,
    -0.04123159870505333,
    -0.022152040153741837,
    0.012399655766785145,
    -0.00508536770939827,
    0.003247365588322282,
    -0.024086056277155876,
    -0.004677303601056337,
    0.012653409503400326,
    -0.010547936893999577,
    0.005500289611518383,
    -0.026362985372543335,
    -0.035443264991045,
    0.014992062002420425,
    -0.006597604602575302,
    0.007530321832746267,
    0.009251734241843224,
    -0.021630816161632538
  ]
}
{
  "classifiers": [
    "license :: osi approved :: isc license (iscl)"
  ],
  "description": "requests gssapi authentication library\n===============================================\n\nrequests is an http library, written in python, for human beings. this library\nadds optional gssapi authentication support and supports mutual\nauthentication.\n\nit provides a fully backward-compatible shim for the old\npython-requests-kerberos library: simply replace ``import requests_kerberos``\nwith ``import requests_gssapi``.  a more powerful interface is provided by the\nhttpspnegoauth component, but this is of course not guaranteed to be\ncompatible.  documentation below is written toward the new interface.\n\nbasic get usage:\n\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> r = requests.get(\"http://example.org\", auth=httpspnegoauth())\n    ...\n\nthe entire ``requests.api`` should be supported.\n\nsetup\n-----\n\nin order to use this library, there must already be a kerberos ticket-granting\nticket (tgt) in a credential cache (ccache).  whether a tgt is available can\nbe easily determined by running the ``klist`` command.  if no tgt is\navailable, then it first must be obtained (for instance, by running the\n``kinit`` command, or pointing the $krb5ccname to a credential cache with a\nvalid tgt).\n\nin short, the library will handle the \"negotiations\" of kerberos\nauthentication, but ensuring that a credentials are available and valid is the\nresponsibility of the user.\n\nauthentication failures\n-----------------------\n\nclient authentication failures will be communicated to the caller by returning\na 401 response.  a 401 response may also be the result of expired credentials\n(including the tgt).\n\nmutual authentication\n---------------------\n\nmutual authentication is a poorly-named feature of the gssapi which doesn't\nprovide any additional security benefit to most possible uses of\nrequests_gssapi.  practically speaking, in most mechanism implementations\n(including krb5), it requires another round-trip between the client and server\nduring the authentication handshake.  many clients and servers do not properly\nhandle the authentication handshake taking more than one round-trip.  if you\nencounter a mutualauthenticationerror, this is probably why.\n\nso long as you're running over a tls link whose security guarantees you trust,\nthere's no benefit to mutual authentication.  if you don't trust the link at\nall, mutual authentication won't help (since it's not tamper-proof, and gssapi\nisn't being used post-authentication.  there's some middle ground between the\ntwo where it helps a small amount (e.g., passive adversary over\nencrypted-but-unverified channel), but for negotiate (what we're doing here),\nit's not generally helpful.\n\nfor a more technical explanation of what mutual authentication actually\nguarantees, i refer you to rfc2743 (gssapiv2), rfc4120 (krb5 in gssapi),\nrfc4178 (spnego), and rfc4559 (http negotiate).\n\n\ndisabled\n^^^^^^^^\n\nby default, there's no need to explicitly disable mutual authentication.\nhowever, for compatability with older versions of request_gssapi or\nrequests_kerberos, you can explicitly request it not be attempted:\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth, disabled\n    >>> gssapi_auth = httpspnegoauth(mutual_authentication=disabled)\n    >>> r = requests.get(\"https://example.org\", auth=gssapi_auth)\n    ...\n\nrequired\n^^^^^^^^\n\nthis was historically the default, but no longer is.  if requested,\n``httpspnegoauth`` will require mutual authentication from the server, and if\na server emits a non-error response which cannot be authenticated, a\n``requests_gssapi.errors.mutualauthenticationerror`` will be raised.  (see\nabove for what this means.)  if a server emits an error which cannot be\nauthenticated, it will be returned to the user but with its contents and\nheaders stripped.  if the response content is more important than the need for\nmutual auth on errors, (eg, for certain winrm calls) the stripping behavior\ncan be suppressed by setting ``sanitize_mutual_error_response=false``:\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth, required\n    >>> gssapi_auth = httpspnegoauth(mutual_authentication=required, sanitize_mutual_error_response=false)\n    >>> r = requests.get(\"https://windows.example.org/wsman\", auth=gssapi_auth)\n    ...\n\noptional\n^^^^^^^^\n\nthis will cause ``requests_gssapi`` to attempt mutual authentication if the\nserver advertises that it supports it, and cause a failure if authentication\nfails, but not if the server does not support it at all.  this is probably not\nwhat you want: link tampering will either cause hard failures, or silently\ncause it to not happen at all.  it is retained for compatability.\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth, optional\n    >>> gssapi_auth = httpspnegoauth(mutual_authentication=optional)\n    >>> r = requests.get(\"https://example.org\", auth=gssapi_auth)\n    ...\n\nopportunistic authentication\n----------------------------\n\n``httpspnegoauth`` can be forced to preemptively initiate the gssapi\nexchange and present a token on the initial request (and all\nsubsequent). by default, authentication only occurs after a\n``401 unauthorized`` response containing a negotiate challenge\nis received from the origin server. this can cause mutual authentication\nfailures for hosts that use a persistent connection (eg, windows/winrm), as\nno gssapi challenges are sent after the initial auth handshake. this\nbehavior can be altered by setting  ``opportunistic_auth=true``:\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> gssapi_auth = httpspnegoauth(opportunistic_auth=true)\n    >>> r = requests.get(\"https://windows.example.org/wsman\", auth=gssapi_auth)\n    ...\n\nhostname override\n-----------------\n\nif communicating with a host whose dns name doesn't match its\nhostname (eg, behind a content switch or load balancer),\nthe hostname used for the gssapi exchange can be overridden by\npassing in a custom name (string or ``gssapi.name``):\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> gssapi_auth = httpspnegoauth(target_name=\"internalhost.local\")\n    >>> r = requests.get(\"https://externalhost.example.org/\", auth=gssapi_auth)\n    ...\n\nexplicit principal\n------------------\n\n``httpspnegoauth`` normally uses the default principal (ie, the user for whom\nyou last ran ``kinit`` or ``kswitch``, or an sso credential if\napplicable). however, an explicit credential can be in instead, if desired.\n\n.. code-block:: python\n\n    >>> import gssapi\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> name = gssapi.name(\"user@realm\", gssapi.nametype.hostbased_service)\n    >>> creds = gssapi.credentials(name=name, usage=\"initiate\")\n    >>> gssapi_auth = httpspnegoauth(creds=creds)\n    >>> r = requests.get(\"http://example.org\", auth=gssapi_auth)\n    ...\n\nexplicit mechanism\n------------------\n\n``httpspnegoauth`` normally lets the underlying ``gssapi`` library decide which\nnegotiation mechanism to use. however, an explicit mechanism can be used instead\nif desired. the ``mech`` parameter will be passed straight through to ``gssapi``\nwithout interference. it is expected to be an instance of ``gssapi.mechs.mechanism``.\n\n.. code-block:: python\n\n    >>> import gssapi\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> try:\n    ...   spnego = gssapi.mechs.mechanism.from_sasl_name(\"spnego\")\n    ... except attributeerror:\n    ...   spnego = gssapi.oid.from_int_seq(\"1.3.6.1.5.5.2\")\n    >>> gssapi_auth = httpspnegoauth(mech=spnego)\n    >>> r = requests.get(\"http://example.org\", auth=gssapi_auth)\n    ...\n\ndelegation\n----------\n\n``requests_gssapi`` supports credential delegation (``gss_c_deleg_flag``).\nto enable delegation of credentials to a server that requests delegation, pass\n``delegate=true`` to ``httpspnegoauth``:\n\n.. code-block:: python\n\n    >>> import requests\n    >>> from requests_gssapi import httpspnegoauth\n    >>> r = requests.get(\"http://example.org\", auth=httpspnegoauth(delegate=true))\n    ...\n\nbe careful to only allow delegation to servers you trust as they will be able\nto impersonate you using the delegated credentials.\n\nlogging\n-------\n\nthis library makes extensive use of python's logging facilities.\n\nlog messages are logged to the ``requests_gssapi`` and\n``requests_gssapi.gssapi`` named loggers.\n\nif you are having difficulty we suggest you configure logging. issues with the\nunderlying gssapi libraries will be made apparent. additionally, copious debug\ninformation is made available which may assist in troubleshooting if you\nincrease your log level all the way up to debug.\n\n\nhistory\n=======\n\n1.2.3: 2021-02-08\n-----------------\n\n- drop python2 compat glue\n- drop external mock dependency\n\n1.2.2: 2020-08-07\n-----------------\n\n- use user_name instead of hostbased_service for user principals\n- remove unused imports in example code\n- fix typo in explicit mech example\n\n1.2.1: 2020-03-31\n-----------------\n\n- include tests in sdist tarball\n- don't limit contexts to a single server name\n\n1.2.0: 2020-02-18\n-----------------\n\n- add support for specifing an explicit gssapi mech\n\n1.1.1: 2020-02-18\n-----------------\n\n- fix dos bug around negotiate regular expressoin\n- update readme to include section on setup\n\n1.1.0: 2019-05-21\n-----------------\n\n- disable mutual authentication by default\n- add more documentation on mutualauthenticationerror\n\n1.0.1: 2019-04-10\n-----------------\n\n- fix example in readme\n- fix license detection for pypi\n- fix a problem with regex escaping\n- add copr makefile target\n\n1.0.0: 2017-12-14\n-----------------\n\n- fork project to requests-gssapi\n- replace pykerberos with python-gssapi\n- add httpspnegoauth interface.  httpkerberosauth is retained as a shim, but\n  bump the major version anyway for clarity.\n\n0.11.0: 2016-11-02\n------------------\n\n- switch dependency on windows from kerberos-sspi/pywin32 to winkerberos.\n  this brings custom principal support to windows users.\n\n0.10.0: 2016-05-18\n------------------\n\n- make it possible to receive errors without having their contents and headers\n  stripped.\n- resolve a bug caused by passing the ``principal`` keyword argument to\n  kerberos-sspi on windows.\n\n0.9.0: 2016-05-06\n-----------------\n\n- support for principal, hostname, and realm override.\n\n- added support for mutual auth.\n\n0.8.0: 2016-01-07\n-----------------\n\n- support for kerberos delegation.\n\n- fixed problems declaring kerberos-sspi on windows installs.\n\n0.7.0: 2015-05-04\n-----------------\n\n- added windows native authentication support by adding kerberos-sspi as an\n  alternative backend.\n\n- prevent infinite recursion when a server returns 401 to an authorization\n  attempt.\n\n- reduce the logging during successful responses.\n\n0.6.1: 2014-11-14\n-----------------\n\n- fix httpkerberosauth not to treat non-file as a file\n\n- prevent infinite recursion when gsserrors occurs\n\n0.6: 2014-11-04\n---------------\n\n- handle mutual authentication (see pull request 36_)\n\n  all users should upgrade immediately. this has been reported to\n  oss-security_ and we are awaiting a proper cve identifier.\n\n  **update**: we were issued cve-2014-8650\n\n- distribute as a wheel.\n\n.. _36: https://github.com/requests/requests-kerberos/pull/36\n.. _oss-security: http://www.openwall.com/lists/oss-security/\n\n0.5: 2014-05-14\n---------------\n\n- allow non-http service principals with httpkerberosauth using a new optional\n  argument ``service``.\n\n- fix bug in ``setup.py`` on distributions where the ``compiler`` module is\n  not available.\n\n- add test dependencies to ``setup.py`` so ``python setup.py test`` will work.\n\n0.4: 2013-10-26\n---------------\n\n- minor updates in the readme\n- change requirements to depend on requests above 1.1.0\n\n0.3: 2013-06-02\n---------------\n\n- work with servers operating on non-standard ports\n\n0.2: 2013-03-26\n---------------\n\n- not documented\n\n0.1: never released\n-------------------\n\n- initial release",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "requests-gssapi",
  "package_url": "https://pypi.org/project/requests-gssapi/",
  "project_url": "https://pypi.org/project/requests-gssapi/",
  "project_urls": {
    "Homepage": "https://github.com/pythongssapi/requests-gssapi"
  },
  "release_url": "https://pypi.org/project/requests-gssapi/1.2.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a gssapi authentication handler for python-requests",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "ian_cordasco",
    "rharwood@redhat.com"
  ],
  "kwds": "gssapi_auth requests_gssapi requests_kerberos request_gssapi httpspnegoauth",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_requests_gssapi",
  "homepage": "https://github.com/pythongssapi/requests-gssapi",
  "release_count": 8,
  "dependency_ids": []
}
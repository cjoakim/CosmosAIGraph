{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries"
  ],
  "description": "# drain3\n\n## introduction\n\ndrain3 is an online log template miner that can extract templates (clusters) from a stream of log messages in a timely\nmanner. it employs a parse tree with fixed depth to guide the log group search process, which effectively avoids\nconstructing a very deep and unbalanced tree.\n\ndrain3 continuously learns on-the-fly and extracts log templates from raw log entries.\n\n#### example:\n\nfor the input:\n\n```\nconnected to 10.0.0.1\nconnected to 192.168.0.1\nhex number 0xdeadbeaf\nuser davidoh logged in\nuser eranr logged in\n```\n\ndrain3 extracts the following templates:\n\n```\nid=1     : size=2         : connected to <:ip:>\nid=2     : size=1         : hex number <:hex:>\nid=3     : size=2         : user <:*:> logged in\n```\n\nfull sample program output:\n\n```\nstarting drain3 template miner\nchecking for saved state\nsaved state not found\ndrain3 started with 'file' persistence\nstarting training mode. reading from std-in ('q' to finish)\n> connected to 10.0.0.1\nsaving state of 1 clusters with 1 messages, 528 bytes, reason: cluster_created (1)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 1, \"cluster_size\": 1, \"template_mined\": \"connected to <:ip:>\", \"cluster_count\": 1}\nparameters: [extractedparameter(value='10.0.0.1', mask_name='ip')]\n> connected to 192.168.0.1\n{\"change_type\": \"none\", \"cluster_id\": 1, \"cluster_size\": 2, \"template_mined\": \"connected to <:ip:>\", \"cluster_count\": 1}\nparameters: [extractedparameter(value='192.168.0.1', mask_name='ip')]\n> hex number 0xdeadbeaf\nsaving state of 2 clusters with 3 messages, 584 bytes, reason: cluster_created (2)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 2, \"cluster_size\": 1, \"template_mined\": \"hex number <:hex:>\", \"cluster_count\": 2}\nparameters: [extractedparameter(value='0xdeadbeaf', mask_name='hex')]\n> user davidoh logged in\nsaving state of 3 clusters with 4 messages, 648 bytes, reason: cluster_created (3)\n{\"change_type\": \"cluster_created\", \"cluster_id\": 3, \"cluster_size\": 1, \"template_mined\": \"user davidoh logged in\", \"cluster_count\": 3}\nparameters: []\n> user eranr logged in\nsaving state of 3 clusters with 5 messages, 644 bytes, reason: cluster_template_changed (3)\n{\"change_type\": \"cluster_template_changed\", \"cluster_id\": 3, \"cluster_size\": 2, \"template_mined\": \"user <:*:> logged in\", \"cluster_count\": 3}\nparameters: [extractedparameter(value='eranr', mask_name='*')]\n> q\ntraining done. mined clusters:\nid=1     : size=2         : connected to <:ip:>\nid=2     : size=1         : hex number <:hex:>\nid=3     : size=2         : user <:*:> logged in\n```\n\nthis project is an upgrade of the original [drain](https://github.com/logpai/logparser/blob/master/logparser/drain)\nproject by logpai from python 2.7 to python 3.6 or later with additional features and bug-fixes.\n\nread more information about drain from the following paper:\n\n- pinjia he, jieming zhu, zibin zheng, and michael r.\n  lyu. [drain: an online log parsing approach with fixed depth tree](http://jiemingzhu.github.io/pub/pjhe_icws2017.pdf),\n  proceedings of the 24th international conference on web services (icws), 2017.\n\na drain3 use case is presented in this blog\npost: [use open source drain3 log-template mining project to monitor for network outages](https://developer.ibm.com/blogs/how-mining-log-templates-can-help-ai-ops-in-cloud-scale-data-centers)\n.\n\n#### new features\n\n- [**persistence**](#persistence). save and load drain state into an [apache kafka](https://kafka.apache.org)\n  topic, [redis](https://redis.io/) or a file.\n- **streaming**. support feeding drain with messages one-be-one.\n- [**masking**](#masking). replace some message parts (e.g numbers, ips, emails) with wildcards. this improves the\n  accuracy of template mining.\n- [**packaging**](#installation). as a pip package.\n- [**configuration**](#configuration). support for configuring drain3 using an `.ini` file or a configuration object. \n- [**memory efficiency**](#memory-efficiency). decrease the memory footprint of internal data structures and introduce\n  cache to control max memory consumed (thanks to @stanislawswierc)\n- [**inference mode**](#training-vs-inference-modes). in case you want to separate training and inference phase, drain3\n  provides a function for *fast* matching against already-learned clusters (templates) only, without the usage of\n  regular expressions.\n- [**parameter extraction**](#parameter-extraction). accurate extraction of the variable parts from a log message as an\n  ordered list, based on its mined template and the defined masking instructions (thanks to @impelon).\n\n#### expected input and output\n\nalthough drain3 can be ingested with full raw log message, template mining accuracy can be improved if you feed it with\nonly the unstructured free-text portion of log messages, by first removing structured parts like timestamp, hostname.\nseverity, etc.\n\nthe output is a dictionary with the following fields:\n\n- `change_type` - indicates either if a new template was identified, an existing template was changed or message added\n  to an existing cluster.\n- `cluster_id` - sequential id of the cluster that the log belongs to.\n- `cluster_size`- the size (message count) of the cluster that the log belongs to.\n- `cluster_count` - count clusters seen so far.\n- `template_mined`- the last template of above cluster_id.\n\n## configuration\n\ndrain3 is configured using [configparser](https://docs.python.org/3.4/library/configparser.html). by default, config\nfilename is `drain3.ini` in working directory. it can also be configured passing\na [templateminerconfig](drain3/template_miner_config.py) object to the [templateminer](drain3/template_miner.py)\nconstructor.\n\nprimary configuration parameters:\n\n- `[drain]/sim_th` - similarity threshold. if percentage of similar tokens for a log message is below this number, a new\n  log cluster will be created (default 0.4)\n- `[drain]/depth` - max depth levels of log clusters. minimum is 2. (default 4)\n- `[drain]/max_children` - max number of children of an internal node (default 100)\n- `[drain]/max_clusters` - max number of tracked clusters (unlimited by default). when this number is reached, model\n  starts replacing old clusters with a new ones according to the lru cache eviction policy.\n- `[drain]/extra_delimiters` - delimiters to apply when splitting log message into words (in addition to whitespace) (\n  default none). format is a python list e.g. `['_', ':']`.\n- `[masking]/masking` - parameters masking - in json format (default \"\")\n- `[masking]/mask_prefix` & `[masking]/mask_suffix` - the wrapping of identified parameters in templates. by default, it\n  is `<` and `>` respectively.\n- `[snapshot]/snapshot_interval_minutes` - time interval for new snapshots (default 1)\n- `[snapshot]/compress_state` - whether to compress the state before saving it. this can be useful when using kafka\n  persistence.\n\n## masking\n\nthis feature allows masking of specific variable parts in log message with keywords, prior to passing to drain. a\nwell-defined masking can improve template mining accuracy.\n\ntemplate parameters that do not match any custom mask in the preliminary masking phase are replaced with `<*>` by drain\ncore.\n\nuse a list of regular expressions in the configuration file with the format `{'regex_pattern', 'mask_with'}` to set\ncustom masking.\n\nfor example, following masking instructions in `drain3.ini` will mask ip addresses and integers:\n\n```\n[masking]\nmasking = [\n          {\"regex_pattern\":\"((?<=[^a-za-z0-9])|^)(\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})((?=[^a-za-z0-9])|$)\", \"mask_with\": \"ip\"},\n          {\"regex_pattern\":\"((?<=[^a-za-z0-9])|^)([\\\\-\\\\+]?\\\\d+)((?=[^a-za-z0-9])|$)\", \"mask_with\": \"num\"},\n          ]\n    ]\n```\n\n## persistence\n\nthe persistence feature saves and loads a snapshot of drain3 state in a (compressed) json format. this feature adds\nrestart resiliency to drain allowing continuation of activity and maintain learned knowledge across restarts.\n\ndrain3 state includes the search tree and all the clusters that were identified up until snapshot time.\n\nthe snapshot also persist number of log messages matched each cluster, and it's `cluster_id`.\n\nan example of a snapshot:\n\n```json\n{\n  \"clusters\": [\n    {\n      \"cluster_id\": 1,\n      \"log_template_tokens\": [\n        \"aa\",\n        \"aa\",\n        \"<*>\"\n      ],\n      \"py/object\": \"drain3_core.logcluster\",\n      \"size\": 2\n    },\n    {\n      \"cluster_id\": 2,\n      \"log_template_tokens\": [\n        \"my\",\n        \"ip\",\n        \"is\",\n        \"<ip>\"\n      ],\n      \"py/object\": \"drain3_core.logcluster\",\n      \"size\": 1\n    }\n  ]\n}\n```\n\nthis example snapshot persist two clusters with the templates:\n\n`[\"aa\", \"aa\", \"<*>\"]` - occurs twice\n\n`[\"my\", \"ip\", \"is\", \"<ip>\"]` - occurs once\n\nsnapshots are created in the following events:\n\n- `cluster_created` - in any new template\n- `cluster_template_changed` - in any update of a template\n- `periodic` - after n minutes from the last snapshot. this is intended to save cluster sizes even if no new template\n  was identified.\n\ndrain3 currently supports the following persistence modes:\n\n- **kafka** - the snapshot is saved in a dedicated topic used only for snapshots - the last message in this topic is the\n  last snapshot that will be loaded after restart. for kafka persistence, you need to provide: `topic_name`. you may\n  also provide other `kwargs` that are supported by `kafka.kafkaconsumer` and `kafka.producer` e.g `bootstrap_servers`\n  to change kafka endpoint (default is `localhost:9092`).\n\n- **redis** - the snapshot is saved to a key in redis database (contributed by @matabares).\n\n- **file** - the snapshot is saved to a file.\n\n- **memory** - the snapshot is saved an in-memory object.\n\n- **none** - no persistence.\n\ndrain3 persistence modes can be easily extended to another medium / database by inheriting\nthe [persistencehandler](drain3/persistence_handler.py) class.\n\n## training vs. inference modes\n\nin some use-cases, it is required to separate training and inference phases.\n\nin training phase you should call `template_miner.add_log_message(log_line)`. this will match log line against an\nexisting cluster (if similarity is above threshold) or create a new cluster. it may also change the template of an\nexisting cluster.\n\nin inference mode you should call `template_miner.match(log_line)`. this will match log line against previously learned\nclusters only. no new clusters are created and templates of existing clusters are not changed. match to existing cluster\nhas to be perfect, otherwise `none` is returned. you can use persistence option to load previously trained clusters\nbefore inference.\n\n## memory efficiency\n\nthis feature limits the max memory used by the model. it is particularly important for large and possibly unbounded log\nstreams. this feature is controlled by the `max_clusters\u200b` parameter, which sets the max number of clusters/templates\ntrarcked by the model. when the limit is reached, new templates start to replace the old ones according to the least\nrecently used (lru) eviction policy. this makes the model adapt quickly to the most recent templates in the log stream.\n\n## parameter extraction\n\ndrain3 supports retrieving an ordered list of variables in a log message, after its template was mined. each parameter\nis accompanied by the name of the mask that was matched, or `*` for the catch-all mask.\n\nparameter extraction is performed by generating a regular expression that matches the template and then applying it on\nthe log message. when `exact_matching` is enabled (by default), the generated regex included the regular expression\ndefined in relevant masking instructions. if there are multiple masking instructions with the same name, either match\ncan satisfy the regex. it is possible to disable exact matching so that every variable is matched against a\nnon-whitespace character sequence. this may improve performance on expanse of accuracy.\n\nparameter extraction regexes generated per template are cached by default, to improve performance. you can control cache\nsize with the ` masking/parameter_extraction_cache_capacity` configuration parameter.\n\nsample usage:\n\n```python\nresult = template_miner.add_log_message(log_line)\nparams = template_miner.extract_parameters(\n    result[\"template_mined\"], log_line, exact_matching=true)\n```\n\nfor the input `\"user johndoe logged in 11 minuts ago\"`, the template would be:\n\n```\n\"user <:*:> logged in <:num:> minuts ago\"\n```\n\n... and the extracted parameters:\n\n```\n[\n  extractedparameter(value='johndoe', mask_name='*'), \n  extractedparameter(value='11', mask_name='num')\n]\n```\n\n## installation\n\ndrain3 is available from [pypi](https://pypi.org/project/drain3). to install use `pip`:\n\n```\npip3 install drain3\n```\n\nnote: if you decide to use kafka or redis persistence, you should install relevant client library explicitly, since it\nis declared as an extra (optional) dependency, by either:\n\n```\npip3 install kafka-python\n```\n\n-- or --\n\n```\npip3 install redis\n```\n\n## examples\n\nin order to run the examples directly from the repository, you need to install dependencies. you can do that using *\npipenv* by executing the following command (assuming pipenv already installed):\n\n```shell\npython3 -m pipenv sync\n```\n\n#### example 1 - `drain_stdin_demo`\n\nrun [examples/drain_stdin_demo.py](examples/drain_stdin_demo.py) from the root folder of the repository by:\n\n```\npython3 -m pipenv run python -m examples.drain_stdin_demo\n```\n\nthis example uses drain3 on input from stdin and persist to either kafka / file / no persistence.\n\nchange `persistence_type` variable in the example to change persistence mode.\n\nenter several log lines using the command line. press `q` to end online learn-and-match mode.\n\nnext, demo goes to match (inference) only mode, in which no new clusters are trained and input is matched against\npreviously trained clusters only. press `q` again to finish execution.\n\n#### example 2 - `drain_bigfile_demo`\n\nrun [examples/drain_bigfile_demo](examples/drain_bigfile_demo.py) from the root folder of the repository by:\n\n```\npython3 -m pipenv run python -m examples.drain_bigfile_demo\n```\n\nthis example downloads a real-world log file (of an ssh server) and process all lines, then prints result clusters,\nprefix tree and performance statistics.\n\n#### sample config file\n\nan example `drain3.ini` file with masking instructions can be found in the [examples](examples) folder as well.\n\n## contributing\n\nour project welcomes external contributions. please refer to [contributing.md](contributing.md) for further details.\n\n## change log\n\n##### v0.9.11\n\n* fixed possible dividebyzero error when the profiler is enabled - [issue #65](https://github.com/ibm/drain3/issues/65). \n\n##### v0.9.10\n\n* fixed compatibility issue with python 3.10 caused by removal of `keysview`.\n\n##### v0.9.9\n\n* added support for accurate log message parameter extraction in a new function - `extract_parameters()`. the\n  function `get_parameter_list()` is deprecated (thanks to *@impelon*).\n* refactored `abstractmaskinginstruction` as a base class for `regexmaskinginstruction`, allowing to introduce other\n  types of masking mechanisms.\n\n##### v0.9.8\n\n* added an option `full_search_strategy` option in `templateminer.match()` and `drain.match()`. see more info at\n  issue [#48](https://github.com/ibm/drain3/issues/48).\n* added an option to disable parameterization of tokens that contains digits in\n  configuration: `templateminerconfig.parametrize_numeric_tokens`\n* loading drain snapshot now only restores clusters state and not configuration parameters. this improves backwards\n  compatibility when introducing new drain configuration parameters.\n\n##### v0.9.7\n\n* fixed bug in original drain: log clusters were created multiple times for log messages with fewer tokens\n  than `max_node_depth`.\n* changed `depth` property name to a more descriptive name `max_node_depth` as drain always subtracts 2 of `depth`\n  argument value. also added `log_cluster_depth` property to reflect original value of depth argument (breaking change).\n* restricted `depth` param to minimum sensible value of 3.\n* added log cluster count to nodes in `drain.print_tree()`\n* added optional log cluster details to `drain.print_tree()`\n\n##### v0.9.6\n\n* fix issue https://github.com/ibm/drain3/issues/38: unnecessary update of lru cache in case `max_clusters` is used (\n  thanks *@stanislawswierc*).\n\n##### v0.9.5\n\n* added: `templateminer.match()` function for fast matching against existing clusters only.\n\n##### v0.9.4\n\n* added: `templateminer.get_parameter_list()` function to extract template parameters for raw log message (thanks to *\n  @cwyalpha*)\n* added option to customize mask wrapper - instead of the default `<*>`, `<num>` etc, you can select any wrapper prefix\n  or suffix by overriding `templateminerconfig.mask_prefix` and `templateminerconfig.mask_prefix`\n* fixed: config `.ini` file is always read from same folder as source file in demos in tests (thanks *@robinmaas95*)\n\n##### v0.9.3\n\n* fixed: comparison of type int with type str in function `add_seq_to_prefix_tree` #28 (bug introduced at v0.9.1)\n\n##### v0.9.2\n\n* updated jsonpickle version\n* keys `id_to_cluster` dict are now persisted by jsonpickle as `int` instead of `str` to avoid keys type conversion on\n  load snapshot which caused some issues.\n* added cachetools dependency to `setup.py`.\n\n##### v0.9.1\n\n* added option to configure `templateminer` using a configuration object (without `.ini` file).\n* support for `print_tree()` to a file/stream.\n* added `memorybufferpersistence`\n* added unit tests for state save/load.\n* bug fix: missing type-conversion in state loading, introduced in v0.9.0\n* refactor: drain prefix tree keys are now of type `str` also for 1st level\n  (was `int` before), for type consistency.\n\n##### v0.9.0\n\n* decrease memory footprint of the main data structures.\n* added `max_clusters` option to limit the number of tracked clusters.\n* changed cluster identifier type from str to int\n* added more unit tests and ci\n\n##### v0.8.6\n\n* added `extra_delimiters` configuration option to drain\n\n##### v0.8.5\n\n* profiler improvements\n\n##### v0.8.4\n\n* masking speed improvement\n\n##### v0.8.3\n\n* fix: profiler state after load from snapshot\n\n##### v0.8.2\n\n* fixed snapshot backward compatibility to v0.7.9\n\n##### v0.8.1\n\n* bugfix in profiling configuration read\n\n##### v0.8.0\n\n* added time profiling support (disabled by default)\n* added cluster id to snapshot reason log (credit: @boernd)\n* minor readability and documentation improvements in drain\n\n##### v0.7.9\n\n* fix: `kafkapersistence` now accepts also `bootstrap_servers` as kwargs.\n\n##### v0.7.8\n\n* using `kafka-python` package instead of `kafka` (newer).\n* added support for specifying additional configuration as `kwargs` in kafka persistence handler.\n\n##### v0.7.7\n\n* corrected default drain config values.\n\n##### v0.7.6\n\n* improvement in config file handling (note: new sections were added instead of `default` section)\n\n##### v0.7.5\n\n* made kafka and redis optional requirements\n \n",
  "docs_url": null,
  "keywords": "drain,log,parser,ibm,template,logs,miner",
  "license": "mit",
  "name": "drain3",
  "package_url": "https://pypi.org/project/drain3/",
  "project_url": "https://pypi.org/project/drain3/",
  "project_urls": {
    "Download": "https://github.com/IBM/Drain3/archive/v_01.tar.gz",
    "Homepage": "https://github.com/IBM/Drain3"
  },
  "release_url": "https://pypi.org/project/drain3/0.9.11/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "persistent & streaming log template miner",
  "version": "0.9.11",
  "releases": [],
  "developers": [
    "david.ohana@ibm.com",
    "ibm_research_haifa"
  ],
  "kwds": "drain3 drain3_core template_miner logs drain",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_drain3",
  "homepage": "https://github.com/ibm/drain3",
  "release_count": 31,
  "dependency_ids": []
}
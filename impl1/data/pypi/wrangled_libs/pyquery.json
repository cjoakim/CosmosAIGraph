{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.9"
  ],
  "description": "\npyquery: a jquery-like library for python\n=========================================\n\n.. image:: https://travis-ci.org/gawel/pyquery.svg\n   :alt: build status\n   :target: https://travis-ci.org/gawel/pyquery\n\npyquery allows you to make jquery queries on xml documents.\nthe api is as much as possible similar to jquery. pyquery uses lxml for fast\nxml and html manipulation.\n\nthis is not (or at least not yet) a library to produce or interact with\njavascript code. i just liked the jquery api and i missed it in python so i\ntold myself \"hey let's make jquery in python\". this is the result.\n\nthe `project`_ is being actively developed on a git repository on github. i\nhave the policy of giving push access to anyone who wants it and then reviewing\nwhat they do. so if you want to contribute just email me.\n\nplease report bugs on the `github\n<https://github.com/gawel/pyquery/issues>`_ issue\ntracker.\n\n.. _deliverance: http://www.gawel.org/weblog/en/2008/12/skinning-with-pyquery-and-deliverance\n.. _project: https://github.com/gawel/pyquery/\n\ni've spent hours maintaining this software, with love.\nplease consider tipping if you like it:\n\nbtc: 1pruqawbydndfz7vtejhywefaghazx9rzg\n\neth: 0xb6418036d8e06c60c4d91c17d72df6e1e5b15ce6\n\nltc: ly6cdzcdbxnbx9gfbj45tqvj8nykbbqsmt\n\n..\n   >>> (urlopen, your_url, path_to_html_file) = getfixture('readme_fixt')\n\nquickstart\n==========\n\nyou can use the pyquery class to load an xml document from a string, a lxml\ndocument, from a file or from an url::\n\n    >>> from pyquery import pyquery as pq\n    >>> from lxml import etree\n    >>> import urllib\n    >>> d = pq(\"<html></html>\")\n    >>> d = pq(etree.fromstring(\"<html></html>\"))\n    >>> d = pq(url=your_url)\n    >>> d = pq(url=your_url,\n    ...        opener=lambda url, **kw: urlopen(url).read())\n    >>> d = pq(filename=path_to_html_file)\n\nnow d is like the $ in jquery::\n\n    >>> d(\"#hello\")\n    [<p#hello.hello>]\n    >>> p = d(\"#hello\")\n    >>> print(p.html())\n    hello world !\n    >>> p.html(\"you know <a href='http://python.org/'>python</a> rocks\")\n    [<p#hello.hello>]\n    >>> print(p.html())\n    you know <a href=\"http://python.org/\">python</a> rocks\n    >>> print(p.text())\n    you know python rocks\n\nyou can use some of the pseudo classes that are available in jquery but that\nare not standard in css such as :first :last :even :odd :eq :lt :gt :checked\n:selected :file::\n\n    >>> d('p:first')\n    [<p#hello.hello>]\n\n\n\nsee http://pyquery.rtfd.org/ for the full documentation\n\nnews\n====\n\n2.0.0 (2022-12-28)\n------------------\n\n- breaking change: inputs starting with ``\"http://\"`` or ``\"https://\"`` like\n  ``pyquery(\"http://example.com\")`` will no longer fetch the contents of the url.\n  users desiring the old behavior should switch to ``pyquery(url=\"http://example.com\")``.\n\n- add nextuntil method\n\n- ``.remove()`` no longer inserts a space in place of the removed element\n\n- fix escaping of top-level element text in ``.html()`` output\n\n- support (and require) cssselect 1.2+\n\n- drop support for python 3.5/3.6\n\n\n1.4.3 (2020-11-21)\n------------------\n\n- no longer use a universal wheel\n\n\n1.4.2 (2020-11-21)\n------------------\n\n- fix exception raised when calling `pyquery(\"<textarea></textarea>\").text()`\n\n- python2 is no longer supported\n\n1.4.1 (2019-10-26)\n------------------\n\n- this is the latest release with py2 support\n\n- remove py33, py34 support\n\n- web scraping improvements: default timeout and session support\n\n- add api methods to serialize form-related elements according to spec\n\n- include html markup when querying textarea text/value\n\n\n1.4.0 (2018-01-11)\n------------------\n\n- refactoring of `.text()` to match firefox behavior.\n\n\n1.3.0 (2017-10-21)\n------------------\n\n- remove some unmaintained modules: ``pyquery.ajax`` and ``pyquery.rules``\n\n- code cleanup. no longer use ugly hacks required by python2.6/python3.2.\n\n- run tests with python3.6 on ci\n\n- add a ``method`` argument to ``.outer_html()``\n\n\n1.2.17 (2016-10-14)\n-------------------\n\n- ``pyquery('<input value=\"\">').val()`` is ``''``\n- ``pyquery('<input>').val()`` is ``''``\n\n\n1.2.16 (2016-10-14)\n-------------------\n\n- ``.attr('value', '')`` no longer removes the ``value`` attribute\n\n- ``<input type=\"checkbox\">`` without ``value=\"...\"`` have a ``.val()`` of\n  ``'on'``\n\n- ``<input type=\"radio\">`` without ``value=\"...\"`` have a ``.val()`` of\n  ``'on'``\n\n- ``<select>`` without ``<option selected>`` have the value of their first\n  ``<option>`` (or ``none`` if there are no options)\n\n\n1.2.15 (2016-10-11)\n-------------------\n\n- .val() should never raise\n\n- drop py26 support\n\n- improve .extend() by returning self\n\n\n1.2.14 (2016-10-10)\n-------------------\n\n- fix val() for <textarea> and <select>, to match jquery behavior\n\n\n1.2.13 (2016-04-12)\n-------------------\n\n- note explicit support for python 3.5\n\n1.2.12 (2016-04-12)\n-------------------\n\n- make_links_absolute now take care of whitespaces\n\n- added pseudo selector :has()\n\n- add cookies arguments as allowed arguments for requests\n\n\n1.2.11 (2016-02-02)\n-------------------\n\n- preserve namespaces attribute on pyquery copies.\n\n- do not raise an error when the http response code is 2xx\n\n1.2.10 (2016-01-05)\n-------------------\n\n- fixed #118: implemented usage ``lxml.etree.tostring`` within ``outer_html`` method\n\n- fixed #117: raise http error if http status code is not equal to 200\n\n- fixed #112: make_links_absolute does not apply to form actions\n\n- fixed #98: contains act like jquery\n\n\n1.2.9 (2014-08-22)\n------------------\n\n- support for keyword arguments in pyquery custom functions\n\n- fixed #78: items must take care or the parent\n\n- fixed #65 pyquery.make_links_absolute() no longer creates 'href' attribute\n  when it isn't there\n\n- fixed #19. ``is_()`` was broken.\n\n- fixed #9. ``.replacewith(pyquery element)`` raises error\n\n- remove official python3.2 support (mostly because of 3rd party semi-deps)\n\n\n1.2.8 (2013-12-21)\n------------------\n\n- fixed #22: open by filename fails when file contains invalid xml\n\n- bug fix in .remove_class()\n\n\n1.2.7 (2013-12-21)\n------------------\n\n- use pep8 name for methods but keep an alias for camel case method.\n  eg: remove_attr and removeattr works\n  fix #57\n\n- .text() now return an empty string instead of none if there is no text node.\n  fix #45\n\n- fixed #23: removeclass adds class attribute to elements which previously\n  lacked one\n\n\n1.2.6 (2013-10-11)\n------------------\n\n- readme_fixt.py was not include in the release. fix #54.\n\n\n1.2.5 (2013-10-10)\n------------------\n\n- cssselect compat. see https://github.com/simonsapin/cssselect/pull/22\n\n- tests improvments. no longer require a eth connection.\n\n- fix #55\n\n1.2.4\n-----\n\n- moved to github. so a few files are renamed from .txt to .rst\n\n- added .xhtml_to_html() and .remove_namespaces()\n\n- use requests to fetch urls (if available)\n\n- use restkit's proxy instead of paste (which will die with py3)\n\n- allow to open https urls\n\n- python2.5 is no longer supported (may work, but tests are broken)\n\n1.2.3\n-----\n\n- allow to pass this in .filter() callback\n\n- add .contents() .items()\n\n- add tox.ini\n\n- bug fixes: fix #35 #55 #64 #66\n\n1.2.2\n-----\n\n- fix cssselectpatch to match the newer implementation of cssselect. fixes issue #62, #52 and #59 (haoyu bai)\n\n- fix issue #37 (caleb burns)\n\n1.2.1\n-----\n\n- allow to use a custom css translator.\n\n- fix issue 44: case problem with xml documents\n\n1.2\n---\n\n- pyquery now uses `cssselect <http://pypi.python.org/pypi/cssselect>`_. see issue 43.\n\n- fix issue 40: forward .html() extra arguments to ``lxml.etree.tostring``\n\n1.1.1\n-----\n\n- minor release. include test file so you can run tests from the tarball.\n\n\n1.1\n---\n\n- fix issues 30, 31, 32 - py3 improvements / webob 1.2+ support\n\n\n1.0\n---\n\n- fix issues 24\n\n0.7\n---\n\n- python 3 compatible\n\n- add __unicode__ method\n\n- add root and encoding attribute\n\n- fix issues 19, 20, 22, 23 \n\n0.6.1\n------\n\n- move readme.txt at package root\n\n- add changes.txt and add it to long_description\n\n0.6\n----\n\n- added pyquery.outerhtml\n\n- added pyquery.fn\n\n- added pyquery.map\n\n- change pyquery.each behavior to reflect jquery api\n\n\n\n\n\n\n",
  "docs_url": "https://pythonhosted.org/pyquery/",
  "keywords": "jquery html xml scraping",
  "license": "bsd",
  "name": "pyquery",
  "package_url": "https://pypi.org/project/pyquery/",
  "project_url": "https://pypi.org/project/pyquery/",
  "project_urls": {
    "Homepage": "https://github.com/gawel/pyquery"
  },
  "release_url": "https://pypi.org/project/pyquery/2.0.0/",
  "requires_dist": [
    "lxml (>=2.1)",
    "cssselect (>=1.2.0)",
    "requests ; extra == 'test'",
    "webob ; extra == 'test'",
    "webtest ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "a jquery-like library for python",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "gael@gawel.org",
    "gael_pasgrimaud",
    "olauzanne@gmail.com",
    "olivier_lauzanne"
  ],
  "kwds": "pyquery github jquery scraping py3",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pyquery",
  "homepage": "https://github.com/gawel/pyquery",
  "release_count": 36,
  "dependency_ids": [
    "pypi_cssselect",
    "pypi_lxml",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_webob",
    "pypi_webtest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "|linux build status| |code coverage| |documentation status| |cii best practices|\n\n.. |linux build status| image:: https://github.com/common-workflow-language/schema_salad/actions/workflows/ci-tests.yml/badge.svg?branch=main\n   :target: https://github.com/common-workflow-language/schema_salad/actions/workflows/ci-tests.yml\n.. |code coverage| image:: https://codecov.io/gh/common-workflow-language/schema_salad/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/common-workflow-language/schema_salad\n.. |documentation status| image:: https://readthedocs.org/projects/schema-salad/badge/?version=latest\n   :target: https://schema-salad.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n.. |cii best practices| image:: https://bestpractices.coreinfrastructure.org/projects/1867/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/1867\n\nschema salad\n------------\n\nsalad is a schema language for describing json or yaml structured\nlinked data documents.  salad schema describes rules for\npreprocessing, structural validation, and hyperlink checking for\ndocuments described by a salad schema. salad supports rich data\nmodeling with inheritance, template specialization, object\nidentifiers, object references, documentation generation, code\ngeneration, and transformation to rdf_. salad provides a bridge\nbetween document and record oriented data modeling and the semantic\nweb.\n\nthe schema salad library is python 3.8+ only.\n\ninstallation\n------------\n\n::\n\n   pip3 install schema_salad\n\nif you intend to use the `schema-salad-tool --codegen=python` feature, please\ninclude the `[pycodegen]` extra::\n\n   pip3 install schema_salad[pycodegen]\n\nto install from source::\n\n   git clone https://github.com/common-workflow-language/schema_salad\n   cd schema_salad\n   pip3 install .\n   # or pip3 install .[pycodegen] if needed\n\ncommands\n--------\n\nschema salad can be used as a command line tool or imported as a python module::\n\n   $ schema-salad-tool\n   usage: schema-salad-tool [-h] [--rdf-serializer rdf_serializer] [--skip-schemas]\n                         [--strict-foreign-properties] [--print-jsonld-context]\n                         [--print-rdfs] [--print-avro] [--print-rdf] [--print-pre]\n                         [--print-index] [--print-metadata] [--print-inheritance-dot]\n                         [--print-fieldrefs-dot] [--codegen language] [--codegen-target codegen_target]\n                         [--codegen-examples directory] [--codegen-package dotted.package]\n                         [--codegen-copyright copyright_string] [--print-oneline]\n                         [--print-doc] [--strict | --non-strict]\n                         [--verbose | --quiet | --debug] [--only only] [--redirect redirect]\n                         [--brand brand] [--brandlink brandlink] [--brandstyle brandstyle]\n                         [--brandinverse] [--primtype primtype] [--version]\n                         [schema] [document]\n\n   $ python\n   >>> import schema_salad\n\nvalidate a schema::\n\n   $ schema-salad-tool myschema.yml\n\nvalidate a document using a schema::\n\n   $ schema-salad-tool myschema.yml mydocument.yml\n\ngenerate html documentation::\n\n   $ schema-salad-tool --print-doc myschema.yml > myschema.html\n   $ # or\n   $ schema-salad-doc myschema.yml > myschema.html\n\nget json-ld context::\n\n   $ schema-salad-tool --print-jsonld-context myschema.yml mydocument.yml\n\nconvert a document to json-ld::\n\n   $ schema-salad-tool --print-pre myschema.yml mydocument.yml > mydocument.jsonld\n\ngenerate python classes for loading/generating documents described by the schema\n(requires the `[pycodegen]` extra)::\n\n   $ schema-salad-tool --codegen=python myschema.yml > myschema.py\n\ndisplay inheritance relationship between classes as a graphviz 'dot' file and\nrender as svg::\n\n   $ schema-salad-tool --print-inheritance-dot myschema.yml | dot -tsvg > myschema.svg\n\ncodegen examples\n----------------\n\nthe examples in the tables below are helpful to see how to use the output of `schema-salad-tool --codegen`\nin different languages for loading and/or creating/editing/saving objects.\n\nfirst set of examples is using the `cwl v1.2 schema <https://github.com/common-workflow-language/cwl-v1.2/blob/1.2.1_proposed/commonworkflowlanguage.yml>`_:\n\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| language    | repository                                              | serialization example                                                                                                                                 | deserialization example                                                                                                                                                   |\n+=============+=========================================================+======================================================================================================================================================+============================================================================================================================================================================+\n| python      | https://github.com/common-workflow-language/cwl-utils/  | `create_cwl_from_objects.py <https://github.com/common-workflow-language/cwl-utils/blob/main/create_cwl_from_objects.py>`_                           | `load_document() <https://github.com/common-workflow-language/cwl-utils/blob/main/cwl_utils/parser/__init__.py#l93>`_                                                      |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| java        | https://github.com/common-workflow-language/cwljava/    | (not yet implemented)                                                                                                                                | `packedworkflowclasstest.java <https://github.com/common-workflow-language/cwljava/blob/cwl-1.2.0/src/test/java/org/w3id/cwl/cwl1_2/utils/packedworkflowclasstest.java>`_  |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| typescript  | https://github.com/common-workflow-lab/cwl-ts-auto      | `creating, editing, and saving cwl docs with typescript <https://github.com/common-workflow-lab/cwl-ts-auto#creating-editing-and-saving-documents>`_ | `loading cwl documents with typescript <https://github.com/common-workflow-lab/cwl-ts-auto#loading-documents>`_                                                            |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| .net        | https://github.com/common-workflow-lab/cwldotnet        | `creating, editing, and saving cwl docs with .net <https://github.com/common-workflow-lab/cwldotnet#creating-editing-and-serializing-documents>`_    | `loading cwl documents with .net <https://github.com/common-workflow-lab/cwldotnet#loading-documents>`_                                                                    |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| c++         | https://github.com/common-workflow-lab/cwl-cpp-auto     | `cwl_output_example.cpp <https://github.com/common-workflow-lab/cwl-cpp-auto/blob/main/cwl_output_example.cpp>`_                                     | `cwl_input_example.cpp <https://github.com/common-workflow-lab/cwl-cpp-auto/blob/main/cwl_input_example.cpp>`_                                                             |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| d           | https://github.com/common-workflow-lab/cwl-d-auto       | `how to use <https://github.com/common-workflow-lab/cwl-d-auto#how-to-use>`_                                                                         | `how to use <https://github.com/common-workflow-lab/cwl-d-auto#how-to-use>`_                                                                                               |\n+-------------+---------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\nsecond set of examples is for the `galaxy workflow format 2 <https://github.com/galaxyproject/gxformat2/>`_ schema:\n\n+-------------+------------------------------------------------------------------------------------+\n| language    | path                                                                               |\n+=============+====================================================================================+\n| python      | https://github.com/galaxyproject/gxformat2/blob/master/gxformat2/schema/v19_09.py  |\n+-------------+------------------------------------------------------------------------------------+\n| java        | https://github.com/galaxyproject/gxformat2/tree/master/java                        |\n+-------------+------------------------------------------------------------------------------------+\n| typescript  | https://github.com/galaxyproject/gxformat2/tree/master/typescript                  |\n+-------------+------------------------------------------------------------------------------------+\n\nquick start\n-----------\n\nlet's say you have a 'basket' record that can contain items measured either by\nweight or by count.  here's an example::\n\n   basket:\n     - product: bananas\n       price: 0.39\n       per: pound\n       weight: 1\n     - product: cucumbers\n       price: 0.79\n       per: item\n       count: 3\n\nwe want to validate that all the expected fields are present, the\nmeasurement is known, and that \"count\" cannot be a fractional value.\nhere is an example schema to do that::\n\n   - name: product\n     doc: |\n       the base type for a product.  this is an abstract type, so it\n       can't be used directly, but can be used to define other types.\n     type: record\n     abstract: true\n     fields:\n       product: string\n       price: float\n\n   - name: byweight\n     doc: |\n       a product, sold by weight.  products may be sold by pound or by\n       kilogram.  weights may be fractional.\n     type: record\n     extends: product\n     fields:\n       per:\n         type:\n           type: enum\n           symbols:\n             - pound\n             - kilogram\n         jsonldpredicate: '#per'\n       weight: float\n\n   - name: bycount\n     doc: |\n       a product, sold by count.  the count must be a integer value.\n     type: record\n     extends: product\n     fields:\n       per:\n         type:\n           type: enum\n           symbols:\n             - item\n         jsonldpredicate: '#per'\n       count: int\n\n   - name: basket\n     doc: |\n       a basket of products.  the 'documentroot' field indicates it is a\n       valid starting point for a document.  the 'basket' field will\n       validate subtypes of 'product' (byweight and bycount).\n     type: record\n     documentroot: true\n     fields:\n       basket:\n         type:\n           type: array\n           items: product\n\nyou can check the schema and document in schema_salad/tests/basket_schema.yml\nand schema_salad/tests/basket.yml::\n\n   $ schema-salad-tool basket_schema.yml basket.yml\n   document `basket.yml` is valid\n\n\ndocumentation\n-------------\n\nsee the specification_ and the metaschema_ (salad schema for itself).  for an\nexample application of schema salad see the common workflow language_.\n\n\nrationale\n---------\n\nthe json data model is an popular way to represent structured data.  it is\nattractive because of it's relative simplicity and is a natural fit with the\nstandard types of many programming languages.  however, this simplicity comes\nat the cost that basic json lacks expressive features useful for working with\ncomplex data structures and document formats, such as schemas, object\nreferences, and namespaces.\n\njson-ld is a w3c standard providing a way to describe how to interpret a json\ndocument as linked data by means of a \"context\".  json-ld provides a powerful\nsolution for representing object references and namespaces in json based on\nstandard web uris, but is not itself a schema language.  without a schema\nproviding a well defined structure, it is difficult to process an arbitrary\njson-ld document as idiomatic json because there are many ways to express the\nsame data that are logically equivalent but structurally distinct.\n\nseveral schema languages exist for describing and validating json data, such as\njson schema and apache avro data serialization system, however none\nunderstand linked data.  as a result, to fully take advantage of json-ld to\nbuild the next generation of linked data applications, one must maintain\nseparate json schema, json-ld context, rdf schema, and human documentation,\ndespite significant overlap of content and obvious need for these documents to\nstay synchronized.\n\nschema salad is designed to address this gap.  it provides a schema language\nand processing rules for describing structured json content permitting uri\nresolution and strict document validation.  the schema language supports linked\ndata through annotations that describe the linked data interpretation of the\ncontent, enables generation of json-ld context and rdf schema, and production\nof rdf triples by applying the json-ld context.  the schema language also\nprovides for robust support of inline documentation.\n\n.. _json-ld: http://json-ld.org\n.. _avro: http://avro.apache.org\n.. _metaschema: https://github.com/common-workflow-language/schema_salad/blob/main/schema_salad/metaschema/metaschema.yml\n.. _specification: http://www.commonwl.org/v1.2/schemasalad.html\n.. _language: https://github.com/common-workflow-language/cwl-v1.2/blob/v1.2.0/commandlinetool.yml\n.. _rdf: https://www.w3.org/rdf/\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "schema-salad",
  "package_url": "https://pypi.org/project/schema-salad/",
  "project_url": "https://pypi.org/project/schema-salad/",
  "project_urls": {
    "Download": "https://github.com/common-workflow-language/schema_salad/releases",
    "Homepage": "https://github.com/common-workflow-language/schema_salad"
  },
  "release_url": "https://pypi.org/project/schema-salad/8.5.20231201181309/",
  "requires_dist": [
    "requests >=1.0",
    "ruamel.yaml <0.19,>=0.17.6",
    "rdflib <8.0.0,>=4.2.2",
    "mistune <2.1,>=2.0.3",
    "CacheControl[filecache] <0.14,>=0.11.7",
    "mypy-extensions",
    "importlib-resources >=1.4 ; python_version < \"3.9\"",
    "sphinx >=2.2 ; extra == 'docs'",
    "sphinx-rtd-theme >=1 ; extra == 'docs'",
    "pytest <8 ; extra == 'docs'",
    "sphinx-autoapi ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinxcontrib-autoprogram ; extra == 'docs'",
    "black ; extra == 'pycodegen'"
  ],
  "requires_python": ">=3.8,<3.13",
  "summary": "schema annotations for linked avro data (salad)",
  "version": "8.5.20231201181309",
  "releases": [],
  "developers": [
    "common-workflow-language@googlegroups.com",
    "common_workflow_language_working_group"
  ],
  "kwds": "documentation schema_salad packedworkflowclasstest commonworkflowlanguage workflows",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_schema_salad",
  "homepage": "https://github.com/common-workflow-language/schema_salad",
  "release_count": 183,
  "dependency_ids": [
    "pypi_black",
    "pypi_cachecontrol",
    "pypi_importlib_resources",
    "pypi_mistune",
    "pypi_mypy_extensions",
    "pypi_pytest",
    "pypi_rdflib",
    "pypi_requests",
    "pypi_ruamel.yaml",
    "pypi_sphinx",
    "pypi_sphinx_autoapi",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_autoprogram"
  ]
}
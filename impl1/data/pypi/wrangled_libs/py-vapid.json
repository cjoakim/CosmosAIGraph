{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: internet :: www/http"
  ],
  "description": "|pypi version py_vapid|\n\neasy vapid generation\n=====================\n\nthis minimal library contains the minimal set of functions you need to\ngenerate a vapid key set and get the headers you\u2019ll need to sign a\nwebpush subscription update.\n\nvapid is a voluntary standard for webpush subscription providers (sites\nthat send webpush updates to remote customers) to self-identify to push\nservers (the servers that convey the push notifications).\n\nthe vapid \u201cclaims\u201d are a set of json keys and values. there are two\nrequired fields, one semi-optional and several optional additional\nfields.\n\nat a minimum a vapid claim set should look like:\n\n::\n\n   {\"sub\":\"mailto:youremail@yoursite.com\",\"aud\":\"https://pushserver\",\"exp\":\"expirationtimestamp\"}\n\na few notes:\n\n**sub** is the email address you wish to have on record for this\nrequest, prefixed with \u201c``mailto:``\u201d. if things go wrong, this is the\nemail that will be used to contact you (for instance). this can be a\ngeneral delivery address like \u201c``mailto:push_operations@example.com``\u201d\nor a specific address like \u201c``mailto:bob@example.com``\u201d.\n\n**aud** is the audience for the vapid. this is the scheme and host you\nuse to send subscription endpoints and generally coincides with the\n``endpoint`` specified in the subscription info block.\n\nas example, if a webpush subscription info contains:\n``{\"endpoint\": \"https://push.example.com:8012/v1/push/...\", ...}``\n\nthen the ``aud`` would be \u201c``https://push.example.com:8012``\u201d\n\nwhile some push services consider this an optional field, others may be\nstricter.\n\n**exp** this is the utc timestamp for when this vapid request will\nexpire. the maximum period is 24 hours. setting a shorter period can\nprevent \u201creplay\u201d attacks. setting a longer period allows you to reuse\nheaders for multiple sends (e.g.\u00a0if you\u2019re sending hundreds of updates\nwithin an hour or so.) if no ``exp`` is included, one that will expire\nin 24 hours will be auto-generated for you.\n\nclaims should be stored in a json compatible file. in the examples\nbelow, we\u2019ve stored the claims into a file named ``claims.json``.\n\npy_vapid can either be installed as a library or used as a stand along\napp, ``bin/vapid``.\n\napp installation\n----------------\n\nyou\u2019ll need ``python virtualenv`` run that in the current directory.\n\nthen run\n\n::\n\n   bin/pip install -r requirements.txt\n\n   bin/python setup.py install\n\napp usage\n---------\n\nrun by itself, ``bin/vapid`` will check and optionally create the\npublic_key.pem and private_key.pem files.\n\n``bin/vapid --gen`` can be used to generate a new set of public and\nprivate key pem files. these will overwrite the contents of\n``private_key.pem`` and ``public_key.pem``.\n\n``bin/vapid --sign claims.json`` will generate a set of http headers\nfrom a json formatted claims file. a sample ``claims.json`` is included\nwith this distribution.\n\n``bin/vapid --sign claims.json --json`` will output the headers in json\nformat, which may be useful for other programs.\n\n``bin/vapid --applicationserverkey`` will return the\n``applicationserverkey`` value you can use to make a restricted\nendpoint. see\nhttps://developer.mozilla.org/en-us/docs/web/api/pushmanager/subscribe\nfor more details. be aware that this value is tied to the generated\npublic/private key. if you remove or generate a new key, any restricted\nurl you\u2019ve previously generated will need to be reallocated. please note\nthat some user agents may require you `to decode this string into a\nuint8array <https://github.com/googlechrome/push-notifications/blob/master/app/scripts/main.js>`__.\n\nsee ``bin/vapid -h`` for all options and commands.\n\nchangelog\n---------\n\ni\u2019m terrible about updating the changelog. please see the\n```git log`` <https://github.com/web-push-libs/vapid/pulls?q=is%3apr+is%3aclosed>`__\nhistory for details.\n\n.. |pypi version py_vapid| image:: https://badge.fury.io/py/py-vapid.svg\n   :target: https://pypi.org/project/py-vapid/\n\n\n",
  "docs_url": null,
  "keywords": "vapid push webpush",
  "license": "mpl2",
  "name": "py-vapid",
  "package_url": "https://pypi.org/project/py-vapid/",
  "project_url": "https://pypi.org/project/py-vapid/",
  "project_urls": {
    "Homepage": "https://github.com/mozilla-services/vapid"
  },
  "release_url": "https://pypi.org/project/py-vapid/1.9.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "simple vapid header generation library",
  "version": "1.9.0",
  "releases": [],
  "developers": [
    "jr_conlin",
    "src+vapid@jrconlin.com"
  ],
  "kwds": "py_vapid vapid pushmanager push_operations webpush",
  "license_kwds": "mpl2",
  "libtype": "pypi",
  "id": "pypi_py_vapid",
  "homepage": "https://github.com/mozilla-services/vapid",
  "release_count": 29,
  "dependency_ids": []
}
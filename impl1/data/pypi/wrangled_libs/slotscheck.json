{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: quality assurance",
    "typing :: typed"
  ],
  "description": "\ud83c\udfb0 slotscheck\n=============\n\n.. image:: https://img.shields.io/pypi/v/slotscheck.svg?color=blue\n   :target: https://pypi.python.org/pypi/slotscheck\n\n.. image:: https://img.shields.io/pypi/l/slotscheck.svg\n   :target: https://pypi.python.org/pypi/slotscheck\n\n.. image:: https://img.shields.io/pypi/pyversions/slotscheck.svg\n   :target: https://pypi.python.org/pypi/slotscheck\n\n.. image:: https://img.shields.io/readthedocs/slotscheck.svg\n   :target: http://slotscheck.readthedocs.io/\n\n.. image:: https://github.com/ariebovenberg/slotscheck/actions/workflows/build.yml/badge.svg\n   :target: https://github.com/ariebovenberg/slotscheck/actions/workflows/build.yml\n\n.. image:: https://img.shields.io/codecov/c/github/ariebovenberg/slotscheck.svg\n   :target: https://codecov.io/gh/ariebovenberg/slotscheck\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\nadding ``__slots__`` to a class in python is a great way to improve performance.\nbut to work properly, all base classes need to implement it \u2014 without overlap!\nit's easy to get wrong, and what's worse: there is nothing warning you that you messed up.\n\n\u2728 *until now!* \u2728\n\n``slotscheck`` helps you validate your slots are working properly.\nyou can even use it to enforce the use of slots across (parts of) your codebase.\n\nsee my `blog post <https://dev.arie.bovenberg.net/blog/finding-broken-slots-in-popular-python-libraries/>`_\nfor the origin story behind ``slotscheck``.\n\nquickstart\n----------\n\nusage is quick from the command line:\n\n.. code-block:: bash\n\n   python -m slotscheck [files]...\n   # or\n   slotscheck -m [modules]...\n\nfor example:\n\n.. code-block:: bash\n\n   $ slotscheck -m sanic\n   error: 'sanic.app:sanic' defines overlapping slots.\n   error: 'sanic.response:httpresponse' has slots but superclass does not.\n   oh no, found some problems!\n   scanned 72 module(s), 111 class(es).\n\nnow get to fixing \u2014\nand add ``slotscheck`` to your ci pipeline or\n`pre-commit <https://slotscheck.rtfd.io/en/latest/advanced.html#pre-commit-hook>`_\nto prevent mistakes from creeping in again!\nsee `here <https://github.com/instagram/libcst/pull/615>`__ and\n`here <https://github.com/dry-python/returns/pull/1233>`__ for examples.\n\nfeatures\n--------\n\n- detect broken slots inheritance\n- detect overlapping slots\n- detect duplicate slots\n- `pre-commit <https://slotscheck.rtfd.io/en/latest/advanced.html#pre-commit-hook>`_ hook\n- (optionally) enforce the use of slots\n\nsee `the documentation <https://slotscheck.rtfd.io>`_ for more details\nand configuration options.\n\nwhy not a flake8 plugin?\n------------------------\n\nflake8 plugins need to work without running the code.\nmany libraries use conditional imports, star imports, re-exports,\nand define slots with decorators or metaclasses.\nthis all but requires running the code to determine the slots and class tree.\n\nthere's `an issue <https://github.com/ariebovenberg/slotscheck/issues/6>`_\nto discuss the matter.\n\nnotes\n-----\n\n- ``slotscheck`` will try to import all submodules of the given package.\n  if there are scripts without ``if __name__ == \"__main__\":`` blocks,\n  they may be executed.\n- even in the case that slots are not inherited properly,\n  there may still be an advantage to using them\n  (i.e. attribute access speed and *some* memory savings).\n  however, in most cases this is unintentional.\n  ``slotscheck`` allows you to ignore specific cases.\n\ninstallation\n------------\n\nit's available on pypi.\n\n.. code-block:: bash\n\n  pip install slotscheck\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "slotscheck",
  "package_url": "https://pypi.org/project/slotscheck/",
  "project_url": "https://pypi.org/project/slotscheck/",
  "project_urls": {
    "Homepage": "https://github.com/ariebovenberg/slotscheck",
    "Repository": "https://github.com/ariebovenberg/slotscheck"
  },
  "release_url": "https://pypi.org/project/slotscheck/0.17.1/",
  "requires_dist": [
    "click (>=8.0,<9.0)",
    "tomli (>=0.2.6,<3.0.0) ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8.1,<4",
  "summary": "ensure your __slots__ are working properly.",
  "version": "0.17.1",
  "releases": [],
  "developers": [
    "a.c.bovenberg@gmail.com",
    "arie_bovenberg"
  ],
  "kwds": "slotscheck __slots__ slots shields svg",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_slotscheck",
  "homepage": "https://github.com/ariebovenberg/slotscheck",
  "release_count": 37,
  "dependency_ids": [
    "pypi_click",
    "pypi_tomli"
  ]
}
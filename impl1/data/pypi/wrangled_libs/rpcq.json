{
  "classifiers": [],
  "description": "rpcq\n====\n\n[![pypi version](https://img.shields.io/pypi/v/rpcq.svg)](https://pypi.org/project/rpcq/)\n[![conda-forge version](https://img.shields.io/conda/vn/conda-forge/rpcq.svg)](https://anaconda.org/conda-forge/rpcq)\n[![docker pulls](https://img.shields.io/docker/pulls/rigetti/rpcq.svg)](https://hub.docker.com/r/rigetti/rpcq)\n\nthe asynchronous rpc client-server framework and message specification for\n[rigetti quantum cloud services (qcs)](https://www.rigetti.com/).\n\nimplements an efficient transport protocol by using [zeromq](http://zeromq.org/) (zmq) sockets and\n[messagepack](https://msgpack.org/index.html) (`msgpack`) serialization.\n\nnot intended to be a full-featured replacement for other frameworks like\n[grpc](https://grpc.io/) or [apache thrift](https://thrift.apache.org/).\n\npython installation\n-------------------\n\nto install directly from the source, run `pip install -e .` from within the top-level\ndirectory of the `rpcq` repository. to additionally install the requirements for testing,\nmake sure to run `pip install -r requirements.txt`.\n\nto instead install the latest released verson of `rpcq` from the python package manager pypi,\nrun `pip install rpcq`.\n\n**note**: we strongly encourage users of `rpcq` to install the software within a (python)\nvirtual environment (read up on [`virtualenv`](https://github.com/pypa/virtualenv),\n[`pyenv`](https://github.com/pyenv/pyenv), or [`conda`](https://github.com/conda/conda)\nfor more info).\n\nlisp installation\n-----------------\n\ninstallation is easier with quicklisp. after placing the source for rpcq within your local\nlisp projects directory (cf. `ql:*local-project-directories*`), run `(ql:quickload :rpcq)`\nand quicklisp will download the necessary lisp dependencies.\n\nin addition to the lisp dependencies, rpcq depends on zeromq.  be sure to install both the\nlibrary *and* its development headers (which are necessary for the lisp foreign-function\ninterface to get its bearings).\n\nusing the client-server framework\n---------------------------------\n\nthe following two code samples (first in python, then in lisp) demonstrate how to create a server, add a test handler, and spin it up.\n\n```python\nfrom rpcq import server\n\nserver = server()\n\n@server.rpc_handler\ndef test():\n    return 'test'\n\nserver.run('tcp://*:5555')\n```\n\n```lisp\n(defun test ()\n  \"test\")\n\n(let ((dt (rpcq:make-dispatch-table)))\n  (rpcq:dispatch-table-add-handler dt 'test)\n  (rpcq:start-server :dispatch-table dt\n                     :listen-addresses '(\"tcp://*:5555\")))\n```\n\nin another window, we can (again first in python, then in lisp) create a client that points to the same socket, and call the test method.\n\n```python\nfrom rpcq import client\n\nclient = client('tcp://localhost:5555')\n\nclient.call('test')\n```\n\n```lisp\n(rpcq:with-rpc-client (client \"tcp://localhost:5555\")\n  (rpcq:rpc-call client \"test\"))\n```\n\nin all cases (including interoperating a client/server pair written in different languages), this will return the string `'test'`.\n\nusing the message spec\n----------------------\n\nthe message spec as defined in `src/messages.lisp` (which in turn produces `rpcq/messages.py`)\nis meant to be used with the [rigetti qcs](https://www.rigetti.com/qcs) platform. therefore,\nthese messages are used in [`pyquil`](https://github.com/rigetticomputing/pyquil), in order\nto allow users to communicate with the rigetti quil compiler and quantum processing units (qpus).\npyquil provides utilities for users to interact with the qcs api and write programs in\n[quil](https://arxiv.org/abs/1608.03355), the quantum instruction language developed at rigetti.\n\nthus, most users will not interact with `rpcq.messages` directly. however, for those interested\nin building their own implementation of the qcs api utilities in pyquil, becoming acquainted\nwith the client-server framework, the available messages in the message spec, and how they\nare used in the `pyquil.api` module would be a good place to start!\n\nupdating the python message bindings\n------------------------------------\n\ncurrently only python bindings are available for the message spec, but more language bindings\nare in the works. to update the python message bindings after editing `src/messages.lisp`,\nopen `rlwrap sbcl` and run:\n\n```lisp\n(ql:quickload :rpcq)\n(with-open-file (f \"rpcq/messages.py\" :direction :output :if-exists :supersede)\n  (rpcq:python-message-spec f))\n```\n\n**note**: requires pre-installed\n[`sbcl`](http://www.sbcl.org/),\n[`quicklisp`](https://www.quicklisp.org/beta/), and\n(optionally) [`rlwrap`](https://github.com/hanslub42/rlwrap).\n\nwe can also use the rpcq docker container to update the message spec without to install the\nrequirements.\n\n```bash\n./docker_update_python_spec.sh\n```\n\nrunning the unit tests\n----------------------\n\nthe `rpcq` repository is configured with gitlab ci to automatically run the unit tests.\nthe tests run within a container based off of the\n[`rigetti/lisp`](https://hub.docker.com/r/rigetti/lisp) docker image, which is pinned to a specific\ntag. if you need a more recent version of the image, update the tag in the `.gitlab-ci.yml`.\n\nthe python unit tests can be executed locally by running `pytest` from the top-level\ndirectory of the repository (assuming you have installed the test requirements).\n\nthe lisp unit tests can be run locally by doing the following from within `rlwrap sbcl`:\n\n```lisp\n(ql:quickload :rpcq)\n(asdf:test-system :rpcq)\n```\n\nthere may be some instances of `style-warning`, but if the test run successfully,\nthere should be something near the bottom of the output that looks like:\n\n```\nrpcq-tests (suite)\n  test-defmessage                                                         [ ok ]\n```\n\nautomated packaging with docker\n-------------------------------\n\nthe ci pipeline for `rpcq` produces a docker image, available at\n[`rigetti/rpcq`](https://hub.docker.com/r/rigetti/rpcq). to get the latest stable\nversion of `rpcq`, run `docker pull rigetti/rpcq`. the image is built from the\n[`rigetti/lisp`](https://hub.docker.com/r/rigetti/lisp) docker image, which is pinned to a specific\ntag. if you need a more recent version of the image, update the tag in the `dockerfile`.\n\nto learn more about the `rigetti/lisp` docker image, check out the\n[`docker-lisp`](https://github.com/rigetti/docker-lisp) repository.\n\nrelease process\n---------------\n\n1. update `version.txt` and dependency versions (if applicable) and push the commit to `master`.\n2. push a git tag `vx.y.z` that contains the same version number as in `version.txt`.\n3. verify that the resulting build (triggered by pushing the tag) completes successfully.\n4. push the tagged commit to `pypi` and verify it appears [here](https://pypi.org/project/rpcq/).\n5. publish a [release](https://github.com/rigetti/rpcq/releases) using the tag as the name.\n6. close the [milestone](https://github.com/rigetti/rpcq/milestones) associated with this release,\n   and migrate incomplete issues to the next one.\n\nauthors\n-------\n\ndeveloped at [rigetti computing](https://github.com/rigetticomputing) by\n[nikolas tezak](https://github.com/ntezak),\n[steven heidel](https://github.com/stevenheidel),\n[eric peterson](https://github.com/ecp-rigetti),\n[colm ryan](https://github.com/caryan),\n[peter karalekas](https://github.com/karalekas),\n[guen prawiroatmodjo](https://github.com/guenp),\n[erik davis](https://github.com/kilimanjaro), and\n[robert smith](https://github.com/tarballs-are-good).",
  "docs_url": null,
  "keywords": "quantum rpc qcs",
  "license": "apache-2.0",
  "name": "rpcq",
  "package_url": "https://pypi.org/project/rpcq/",
  "project_url": "https://pypi.org/project/rpcq/",
  "project_urls": {
    "Homepage": "https://github.com/rigetticomputing/rpcq.git"
  },
  "release_url": "https://pypi.org/project/rpcq/3.11.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "the rpc framework and message specification for rigetti qcs.",
  "version": "3.11.0",
  "releases": [],
  "developers": [
    "info@rigetti.com",
    "rigetti_computing"
  ],
  "kwds": "rpcq qcs zeromq rpc rpc_handler",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_rpcq",
  "homepage": "https://github.com/rigetticomputing/rpcq.git",
  "release_count": 33,
  "dependency_ids": []
}
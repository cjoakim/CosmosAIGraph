{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# `supabase-py`\n\npython client for [supabase](https://supabase.com)\n\n- documentation: [supabase.com/docs](https://supabase.com/docs/reference/python/introduction)\n- usage:\n  - [github oauth in your python flask app](https://supabase.com/blog/oauth2-login-python-flask-apps)\n  - [python data loading with supabase](https://supabase.com/blog/loading-data-supabase-python)\n\n## installation\n\nwe recommend activating your virtual environment. for example, we like `poetry` and `conda`!\n\n### pypi installation\n\ninstall the package (for > python 3.7):\n\n```bash\n# with pip\npip install supabase\n\n# with conda\nconda install -c conda-forge supabase\n```\n\n### local installation\n\nyou can also install locally after cloning this repo. install development mode with ``pip install -e``, which makes it so when you edit the source code the changes will be reflected in your python module.\n\n## usage\n\nset your supabase environment variables in a dotenv file, or using the shell:\n\n```bash\nexport supabase_url=\"my-url-to-my-awesome-supabase-instance\"\nexport supabase_key=\"my-supa-dupa-secret-supabase-api-key\"\n```\n\nwe can then read the keys in the python source code:\n\n```python\nimport os\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_url\")\nkey: str = os.environ.get(\"supabase_key\")\nsupabase: client = create_client(url, key)\n```\n\nuse the supabase client to interface with your database.\n\n#### authenticate\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n# create a random user login email and password.\nrandom_email: str = \"3hf82fijf92@supamail.com\"\nrandom_password: str = \"fqj13bnf2hiu23h\"\nuser = supabase.auth.sign_up({ \"email\": random_email, \"password\": random_password })\n```\n\n#### sign-in\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n# sign in using the user email and password.\nrandom_email: str = \"3hf82fijf92@supamail.com\"\nrandom_password: str = \"fqj13bnf2hiu23h\"\nuser = supabase.auth.sign_in_with_password({ \"email\": random_email, \"password\": random_password })\n```\n\n#### insert data\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\ndata = supabase.table(\"countries\").insert({\"name\":\"germany\"}).execute()\nassert len(data.data) > 0\n```\n\n#### select data\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\ndata = supabase.table(\"countries\").select(\"*\").eq(\"country\", \"il\").execute()\n# assert we pulled real data.\nassert len(data.data) > 0\n```\n\n#### update data\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\ndata = supabase.table(\"countries\").update({\"country\": \"indonesia\", \"capital_city\": \"jakarta\"}).eq(\"id\", 1).execute()\n```\n\n#### update data with duplicate keys\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\ncountry = {\n  \"country\": \"united kingdom\",\n  \"capital_city\": \"london\" # this was missing when it was added\n}\n\ndata = supabase.table(\"countries\").upsert(country).execute()\nassert len(data.data) > 0\n```\n\n#### delete data\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\ndata = supabase.table(\"countries\").delete().eq(\"id\", 1).execute()\n```\n\n#### call edge functions\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\ndef test_func():\n  try:\n    resp = supabase.functions.invoke(\"hello-world\", invoke_options={'body':{}})\n    return resp\n  except (functionsrelayerror, functionshttperror) as exception:\n    err = exception.to_dict()\n    print(err.get(\"message\"))\n```\n\n#### download a file from storage\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\nbucket_name: str = \"photos\"\n\ndata = supabase.storage.from_(bucket_name).download(\"photo1.png\")\n```\n\n#### upload a file\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\nbucket_name: str = \"photos\"\nnew_file = getuserfile()\n\ndata = supabase.storage.from_(bucket_name).upload(\"/user1/profile.png\", new_file)\n```\n\n#### remove a file\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\nbucket_name: str = \"photos\"\n\ndata = supabase.storage.from_(bucket_name).remove([\"old_photo.png\", \"image5.jpg\"])\n```\n\n#### list all files\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\nbucket_name: str = \"charts\"\n\ndata = supabase.storage.from_(bucket_name).list()\n```\n\n#### move and rename files\n\n```python\nfrom supabase import create_client, client\n\nurl: str = os.environ.get(\"supabase_test_url\")\nkey: str = os.environ.get(\"supabase_test_key\")\nsupabase: client = create_client(url, key)\n\nbucket_name: str = \"charts\"\nold_file_path: str = \"generic/graph1.png\"\nnew_file_path: str = \"important/revenue.png\"\n\ndata = supabase.storage.from_(bucket_name).move(old_file_path, new_file_path)\n```\n\n## roadmap\n\n- [x] wrap [postgrest-py](https://github.com/supabase-community/postgrest-py/)\n  - [ ] add remaining filters\n  - [ ] add support for explain\n  - [ ] add proper error handling\n- [ ] wrap [realtime-py](https://github.com/supabase-community/realtime-py)\n    - [ ]  integrate with supabase-py\n    - [ ]  support walrus\n    - [ ]  support broadcast (to check if already supported)\n- [x] wrap [auth-py](https://github.com/supabase-community/auth-py)\n    - [x] remove references to gotrue-js v1 and do a proper release\n    - [ ] test and document common flows (e.g. sign in with oauth, sign in with otp)\n    - [ ] add mfa methods and sso methods\n    - [x] add proof key for code exchange (pkce) methods. unlike the js library, we do not currently plan to support magic link (pkce). please use the [token hash](https://supabase.com/docs/guides/auth/server-side/email-based-auth-with-pkce-flow-for-ssr#create-api-endpoint-for-handling-tokenhash) in tandem with `verifyotp` instead.\n- [x] wrap [storage-py](https://github.com/supabase-community/storage-py)\n    - [ ]  support resumable uploads\n    - [x]  setup testing environment\n    - [x]  document how to properly upload different file types (e.g. jpeg/png and download it)\n- [x] wrap [functions-py](https://github.com/supabase-community/functions-py)\n\noverall tasks:\n- [x] add async support across the entire library\n- [ ] add fastapi helper library (external to supabase-py)\n- [ ] add `django-supabase-postgrest` (external to supabase-py)\n\n## contributing\n\ncontributing to the python libraries are a great way to get involved with the supabase community. reach out to us on discord if you want to get involved.\n\n### running tests\n\ncurrently the test suites are in a state of flux. we are expanding our clients tests to ensure things are working, and for now can connect to this test instance, that is populated with the following table:\n\n<p align=\"center\">\n  <img width=\"720\" height=\"481\" src=\"https://i.ibb.co/bq7kdty/db.png\">\n</p>\n\nthe above test database is a blank supabase instance that has populated the `countries` table with the built in countries script that can be found in the supabase ui. you can launch the test scripts and point to the above test database by running\n\n```bash\n./test.sh\n```\n\n## badges\n\n[![license: mit](https://img.shields.io/badge/license-mit-green.svg?label=license)](https://opensource.org/licenses/mit)\n[![ci](https://github.com/supabase-community/supabase-py/actions/workflows/ci.yml/badge.svg)](https://github.com/supabase-community/supabase-py/actions/workflows/ci.yml)\n[![python](https://img.shields.io/pypi/pyversions/supabase)](https://pypi.org/project/supabase)\n[![version](https://img.shields.io/pypi/v/supabase?color=%2334d058)](https://pypi.org/project/supabase)\n[![codecov](https://codecov.io/gh/supabase-community/supabase-py/branch/develop/graph/badge.svg)](https://codecov.io/gh/supabase-community/supabase-py)\n[![last commit](https://img.shields.io/github/last-commit/supabase-community/supabase-py.svg?style=flat)](https://github.com/supabase-community/supabase-py/commits)\n[![github commit activity](https://img.shields.io/github/commit-activity/m/supabase-community/supabase-py)](https://github.com/supabase-community/supabase-py/commits)\n[![github stars](https://img.shields.io/github/stars/supabase-community/supabase-py?style=flat&logo=github)](https://github.com/supabase-community/supabase-py/stargazers)\n[![github forks](https://img.shields.io/github/forks/supabase-community/supabase-py?style=flat&logo=github)](https://github.com/supabase-community/supabase-py/network/members)\n[![github watchers](https://img.shields.io/github/watchers/supabase-community/supabase-py?style=flat&logo=github)](https://github.com/supabase-community/supabase-py)\n[![github contributors](https://img.shields.io/github/contributors/supabase-community/supabase-py)](https://github.com/supabase-community/supabase-py/graphs/contributors)\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "supabase",
  "package_url": "https://pypi.org/project/supabase/",
  "project_url": "https://pypi.org/project/supabase/",
  "project_urls": {
    "Documentation": "https://github.com/supabase-community/supabase-py",
    "Homepage": "https://github.com/supabase-community/supabase-py",
    "Repository": "https://github.com/supabase-community/supabase-py"
  },
  "release_url": "https://pypi.org/project/supabase/2.3.0/",
  "requires_dist": [
    "gotrue (>=1.3,<3.0)",
    "httpx (>=0.24.0,<0.25.0)",
    "postgrest (>=0.10.8,<0.14.0)",
    "realtime (>=1.0.0,<2.0.0)",
    "storage3 (>=0.5.3,<0.8.0)",
    "supafunc (>=0.3.1,<0.4.0)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "supabase client for python.",
  "version": "2.3.0",
  "releases": [],
  "developers": [
    "joel@joellee.org",
    "joel_lee"
  ],
  "kwds": "supabase supabase_url supabase_key supabase_test_url supabase_test_key",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_supabase",
  "homepage": "https://github.com/supabase-community/supabase-py",
  "release_count": 37,
  "dependency_ids": [
    "pypi_gotrue",
    "pypi_httpx",
    "pypi_postgrest",
    "pypi_realtime",
    "pypi_storage3",
    "pypi_supafunc"
  ]
}
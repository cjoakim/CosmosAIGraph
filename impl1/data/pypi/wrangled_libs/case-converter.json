{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "# case converter\n\n[![pipline](https://img.shields.io/gitlab/pipeline/chrisdoherty4/python-case-converter)](https://gitlab.com/chrisdoherty4/python-case-converter/-/pipelines) [![wheel](https://img.shields.io/pypi/wheel/case-converter)](https://pypi.org/project/case-converter/) ![coverage](https://gitlab.com/chrisdoherty4/python-case-converter/badges/master/coverage.svg) ![license](https://img.shields.io/github/license/chrisdoherty4/python-case-converter)\n\na robust python package for transforming string cases such as `hello, world!` into\n `helloworld` (camelcase).\n\n## general usage\n\n```python\nfrom caseconverter import camelcase\n\ncamelcase(\"hello, world!\") # output: helloworld\n```\n\n### delimeter behavior\n\nif multiple delimeter characters are identified next to eachother they will be considered as a single delimeter. for example, `-_` contains 2 different delimeter characters and is considered a single delimeter.\n\n## available conversions\n\n### `camelcase`\n\n```python\nfrom caseconverter import camelcase\n\ncamelcase(\"hello, world!\")\n```\n\n```text\nhelloworld\n```\n\n### `cobolcase`\n\n```python\nfrom caseconverter import cobolcase\n\ncobolcase(\"hello, world!\")\n```\n\n```text\nhello-world\n```\n\n### `flatcase`\n\n```python\nfrom caseconverter import flatcase\n\nflatcase(\"hello, world!\")\n```\n\n```text\nhelloworld\n```\n\n### `kebabcase`\n\n```python\n\nfrom caseconverter import kebabcase\n\nkebabcase(\"hello, world!\")\n```\n\n```text\nhello-world\n```\n\n### `macrocase`\n\n```python\nfrom caseconverter import macrocase\n\nmacrocase(\"hello, world!\")\n```\n\n```text\nhello_world\n```\n\n#### additional options\n\n`delims_only : bool` - only consider delimiters as boundaries (default: `false`).\n\n### `pascalcase`\n\n```python\nfrom caseconverter import pascalcase\n\npascalcase(\"hello, world!\")\n```\n\n```text\nhelloworld\n```\n\n### `snakecase`\n\n```python\nfrom caseconverter import snakecase\n\nsnakecase(\"hello, world!\")\n```\n\n```text\nhello_world\n```\n\n## options for all conversions\n\n### stripping punctuation\n\npunctuation is stripped when doing a case conversion. however, should you\nwish to keep the punctuation you can do so by passing `strip_punctuation=false`.\n\n```python\ncamelcase(\"hello, world!\", strip_punctuation=false) # output: hello,world!\n```\n\n### delimeter customization\n\ndefault delimiters used to denote a token boundary.\n\n```python\ndelimiters = \" -_\"\n```\n\nyou can pass `delims` to each case conversion function to specify a custom\nset of delimiters.\n\n```python\n# use a pipe `|` as the only delimiter.\ncamelcase(\"hello,|world!\", delims=\"|\") # output: helloworld\n```\n\n\n## boundaries definitions\n\n|name|description|\n|---|---|\n|ondelimeteruppercasenext|on a delimieter, upper case the following character|\n|ondelimeterlowercasenext|on a delimeter, lower case the following character|\n|onupperprecededbylowerappendupper|on an upper case character followed by a lower case character, append the upper case character|\n|onupperprecededbylowerappendlower|on an upper case character preceeded by a lower case character append the lower case character|\n|onupperprecededbyupperappendjoin|on an upper case caharacter preceeded by an upper append the join character. join characters are context dependent. example: macro cast join character is `_`|\n|onupperprecededbyupperappendcurrent|on an upper case character preceeded by an upper case character append the upper case character|\n\n## contributing\n\n1. write clean code.\n2. write new tests for new use-cases.\n3. test your code before raising a pr.\n4. use [black](https://pypi.org/project/black/) to format your code.\n\n\n",
  "docs_url": null,
  "keywords": "case,convert,converter,string",
  "license": "",
  "name": "case-converter",
  "package_url": "https://pypi.org/project/case-converter/",
  "project_url": "https://pypi.org/project/case-converter/",
  "project_urls": {
    "Homepage": "https://github.com/chrisdoherty4/python-case-converter"
  },
  "release_url": "https://pypi.org/project/case-converter/1.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a string case conversion package.",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "chris@chrisdoherty.io",
    "chris_doherty"
  ],
  "kwds": "camelcase macrocase snakecase caseconverter python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_case_converter",
  "homepage": "https://github.com/chrisdoherty4/python-case-converter",
  "release_count": 8,
  "dependency_ids": []
}
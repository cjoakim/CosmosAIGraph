{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: utilities"
  ],
  "description": "# scikit-fem\n\n`scikit-fem` is a pure python 3.8+ library for performing [finite element\nassembly](https://en.wikipedia.org/wiki/finite_element_method). its main\npurpose is the transformation of bilinear forms into sparse matrices and linear\nforms into vectors.\n\n<a href=\"https://colab.research.google.com/github/kinnala/scikit-fem-notebooks/blob/master/ex1.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\"></a>\n<a href=\"https://scikit-fem.readthedocs.io/\" alt=\"documentation\"><img src=\"https://readthedocs.org/projects/pip/badge/?version=stable\" /></a>\n<a href=\"https://joss.theoj.org/papers/4120aba1525403e6d0972f4270d7b61e\" alt=\"status\"><img src=\"https://joss.theoj.org/papers/4120aba1525403e6d0972f4270d7b61e/status.svg\" /></a>\n<a href=\"https://pypi.org/project/scikit-fem/\" alt=\"pypi\"><img src=\"https://img.shields.io/pypi/v/scikit-fem\" /></a>\n\nthe library\n\n- has minimal dependencies\n- contains no compiled code\n- supports one-dimensional, triangular, quadrilateral, tetrahedral and hexahedral finite elements\n- includes special elements such as raviart-thomas, n\u00e9d\u00e9lec, mini, crouzeix-raviart, argyris, ...\n\nif you use the library in your research, you can cite the following article:\n```\n@article{skfem2020,\n  doi = {10.21105/joss.02369},\n  year = {2020},\n  volume = {5},\n  number = {52},\n  pages = {2369},\n  author = {tom gustafsson and g. d. mcbain},\n  title = {scikit-fem: a {p}ython package for finite element assembly},\n  journal = {journal of open source software}\n}\n```\n\n## installation\n\nthe most recent release can be installed simply by\n```\npip install scikit-fem[all]\n```\nremove `[all]` to not install the optional dependencies `meshio` for mesh\ninput/output, and `matplotlib` for creating simple visualizations.\nthe minimal dependencies are `numpy` and `scipy`.\nyou can also try the library in browser through [google colab](https://colab.research.google.com/github/kinnala/scikit-fem-notebooks/blob/master/ex1.ipynb).\n\n## examples\n\nsolve the poisson problem (see also [`ex01.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex01.py)):\n```python\nfrom skfem import *\nfrom skfem.helpers import dot, grad\n\n# create the mesh\nmesh = meshtri().refined(4)\n# or, with your own points and elements:\n# mesh = meshtri(points, elements)\n\nbasis = basis(mesh, elementtrip1())\n\n@bilinearform\ndef laplace(u, v, _):\n    return dot(grad(u), grad(v))\n\n@linearform\ndef rhs(v, _):\n    return 1. * v\n\na = laplace.assemble(basis)\nb = rhs.assemble(basis)\n\n# dirichlet boundary conditions\na, b = enforce(a, b, d=mesh.boundary_nodes())\n\n# solve the linear system\nx = solve(a, b)\n\n# plot using matplotlib\nmesh.plot(x, shading='gouraud', colorbar=true).show()\n# or, save to external file:\n# mesh.save('output.vtk', point_data={'solution': x})\n```\n\nmeshes can be initialized manually, loaded from external files using\n[meshio](https://github.com/nschloe/meshio), or created with the help of special\nconstructors:\n\n```python\nimport numpy as np\nfrom skfem import meshline, meshtri, meshtet\n\nmesh = meshline(np.array([0., .5, 1.]))\nmesh = meshtri(\n    np.array([[0., 0.],\n              [1., 0.],\n              [0., 1.]]).t,\n    np.array([[0, 1, 2]]).t,\n)\nmesh = meshtri.load(\"docs/examples/meshes/square.msh\")  # requires meshio\nmesh = meshtet.init_tensor(*((np.linspace(0, 1, 60),) * 3))\n```\n\nwe support [many common finite\nelements](https://github.com/kinnala/scikit-fem/blob/master/skfem/element/__init__.py#l51).\nbelow the stiffness matrix is assembled using second-order tetrahedra:\n\n```python\nfrom skfem import basis, elementtetp2\n\nbasis = basis(mesh, elementtetp2())  # quadratic tetrahedron\na = laplace.assemble(basis)  # type: scipy.sparse.csr_matrix\n```\n\nmore examples can be found in the [gallery](https://scikit-fem.readthedocs.io/en/latest/listofexamples.html).\n\n\n## benchmark\n\n*the following benchmark (`docs/examples/performance.py`) demonstrates the time\nspent on finite element assembly in comparison to the time spent on linear\nsolve.  the given numbers were calculated using a thinkpad x1 carbon laptop (7th\ngen).  note that the timings are only illustrative as they depend on, e.g., the\ntype of element used, the number of quadrature points used, the type of linear\nsolver, and the complexity of the forms.  this benchmark solves the laplace\nequation using linear tetrahedral elements and the default direct sparse solver\nof `scipy.sparse.linalg.spsolve`.*\n\n| degrees-of-freedom | assembly (s) | linear solve (s) |\n| --- | --- | --- |\n| 4096 | 0.04805 | 0.04241 |\n| 8000 | 0.09804 | 0.16269 |\n| 15625 | 0.20347 | 0.87741 |\n| 32768 | 0.46399 | 5.98163 |\n| 64000 | 1.00143 | 36.47855 |\n| 125000 | 2.05274 | nan |\n| 262144 | 4.48825 | nan |\n| 512000 | 8.82814 | nan |\n| 1030301 | 18.25461 | nan |\n\n\n## documentation\n\nthe project is documented using sphinx under `docs/`.\nbuilt version can be found from [read the docs](https://scikit-fem.readthedocs.io/en/latest/).\nhere are direct links to additional resources:\n\n- [examples from our test suite](https://scikit-fem.readthedocs.io/en/latest/listofexamples.html)\n- [examples from the fenics tutorial](https://github.com/gdmcbain/fenics-tuto-in-skfem)\n\n## getting help\n\nif you encounter an issue you can use github issue tracker.  if you cannot find help from the documentation,\nyou can use the github discussions to [ask questions](https://github.com/kinnala/scikit-fem/discussions).\ntry to provide a snippet of code which fails\nand include also the version of the library you are\nusing.  the version can be found as follows:\n```python\nimport skfem; print(skfem.__version__)\n```\n\n## dependencies\n\nthe minimal dependencies for installing `scikit-fem` are\n[numpy](https://numpy.org/) and [scipy](https://www.scipy.org/).  in addition,\nmany\n[examples](https://scikit-fem.readthedocs.io/en/latest/listofexamples.html) use\n[matplotlib](https://matplotlib.org/) for visualization and\n[meshio](https://github.com/nschloe/meshio) for loading/saving different mesh\nfile formats.  some examples demonstrate the use of other external packages;\nsee `requirements.txt` for a list of test dependencies.\n\n## testing\n\nthe tests are run by github actions.  the `makefile` in the repository root has\ntargets for running the testing container locally using `docker`.  for example,\n`make test_py38` runs the tests using `py38` branch from\n[kinnala/scikit-fem-docker-action](https://github.com/kinnala/scikit-fem-docker-action).\nthe releases are tested in\n[kinnala/scikit-fem-release-tests](https://github.com/kinnala/scikit-fem-release-tests).\n\n## licensing\n\nthe contents of `skfem/` and the pypi package `scikit-fem` are licensed under\nthe 3-clause bsd license.  some examples under `docs/examples/` or snippets\nin the documentation may have a different license.\n\n## acknowledgements\n\nthis project was started while working under a grant from the [finnish cultural\nfoundation](https://skr.fi/).  versions 2.0.0+ were prepared while working in\na project funded by academy of finland (decisions nr. 324611 and 338341).\nthe approach used in the finite element assembly has been inspired by the [work\nof a. hannukainen and\nm. juntunen](https://au.mathworks.com/matlabcentral/fileexchange/36108-hjfem_lite).\n\n## contributing\n\nwe are happy to welcome any contributions to the library.  reasonable projects\nfor first timers include:\n\n- reporting a [bug](https://github.com/kinnala/scikit-fem/issues)\n- writing an [example](https://github.com/kinnala/scikit-fem/tree/master/docs/examples)\n- improving the [tests](https://github.com/kinnala/scikit-fem/tree/master/tests)\n- finding typos in the documentation.\n\n*by contributing code to scikit-fem, you are agreeing to release it under bsd-3-clause, see license.md.*\n\n## changelog\n\nthe format is based on [keep a changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [semantic versioning](https://semver.org/spec/v2.0.0.html)\nwith respect to documented and/or tested features.\n\n### [9.0.0] - 2023-12-24\n\n- removed: python 3.7 support\n- removed: `mappingmortar` and `mortarfacetbasis` in favor of\n  `skfem.supermeshing`\n- deprecated: `skfem.visuals.glvis`; current version is broken and no\n  replacement is being planned\n- added: python 3.12 support\n- added: `mesh.load` supports new keyword arguments\n  `ignore_orientation=true` and `ignore_interior_facets=true` which\n  will both speed up the loading of larger three-dimensional meshes by\n  ignoring facet orientation and all tags not on the boundary,\n  respectively.\n- added: `skfem.supermeshing` (requires `shapely>=2`) for creating quadrature\n  rules for interpolating between two 1d or 2d meshes.\n- added: `mesh.remove_unused_nodes`\n- added: `mesh.remove_duplicate_nodes`\n- added: `mesh.remove_elements` now supports passing any subdomain\n  reference through `mesh.normalize_elements`; subdomains and\n  boundaries are also properly preserved\n- fixed: `meshtet` uniform refine was reindexing subdomains incorrectly\n- fixed: `meshdg.draw` did not work; now calls `basis.draw` which\n  works for any mesh topology\n- fixed: `facetbasis` now works with `meshtri2`, `meshquad2`,\n  `meshtet2` and `meshhex2`\n- fixed: `elementglobal` now uses outward normals to initialize dofs\n  on boundary factes\n\n## [8.1.0] - 2023-06-16\n\n- added: `elementtrihhj0` and `elementtrihhj1` matrix finite elements\n  for implementing the hellan-hermann-johnson mixed method (see [`ex48.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex48.py))\n- added: `elementhexskeleton0`, piecewise constant element on the skeleton\n  of a hexahedral mesh\n- added: `elementhexc1`, c1-continuous hexahedral element\n- added: `mesh.restrict` now preserves subdomains and boundaries\n- added: `skfem.utils.mpc` for setting multipoint constraints\n- added: `basis.get_dofs` now supports fetching dofs at specific nodes\n  through kwarg `nodes`\n- added: `dofsview.sort` for sorting a set of dofs returned by\n  `basis.get_dofs`\n- added: `cellbasis.with_elements` as a shortcut for initiating a new basis with subset of elements\n- added: `mesh.refined` now preserves subdomains in adaptive mesh refinement\n- fixed: `mesh.refined` used to modify the element connectivity of the original mesh\n\n## [8.0.0] - 2022-12-16\n\n- removed: the deprecated `basis.find_dofs` method, see `basis.get_dofs` for a\n  replacement\n- added: renamed `elementtetn0` to `elementtrin1` and added alias for backwards\n  compatibility\n- added: `elementquadn1`, first order h(curl) conforming quadrilateral element\n- added: `elementtrin1`, first order h(curl) conforming triangle element\n- added: `elementtrin2`, second order h(curl) conforming triangle element\n- added: `elementtetskeletonp0`, extension of `elementtriskeletonp0` to\n  tetrahedral meshes\n- added: `mesh.restrict` which returns a new mesh given a subset of elements or subdomain\n- added: `mesh.trace` which turns facets into a trace mesh\n- added: `skfem.utils.bmat`, a variant of `scipy.sparse.bmat` which adds the\n  indices of the different blocks as an attribute `out.blocks`\n- added: plane strain to plane stress mapping under `skfem.models.elasticity`\n- added: various methods such as `basis.interpolate` and `basis.project`\n  now support specifying `dtype` and using complex fields\n- fixed:  python 3.11\n- fixed: `basis.intepolate` did not work properly with `elementcomposite`\n  when the basis was defined only for a subset of elements\n- fixed: `basis.split` worked incorrectly for `elementvector` and multiple dofs\n  of same type\n- fixed: caching of `elementquadp` basis for reused quadrature points\n  did not work correctly\n- deprecated: `mappingmortar` and `mortarfacetbasis` in favor of\n  plain `facetbasis` and the upcoming `skfem.experimental.supermeshing` (see [`ex04.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex04.py))\n\n### [7.0.1] - 2022-08-03\n\n- fixed: updated changelog was missing.\n\n### [7.0.0] - 2022-08-03\n\n- changed: removed the optimization of using `discretefield.is_zero` in the\n  helpers to skip the evaluation of zero components in `elementcomposite` to\n  improve type stability with respect to the size of the underlying numpy\n  arrays; this is technically a backwards incompatible change and might affect\n  self-created helper functions\n- deprecated: `facetbasis.trace` in favor of `basis.interpolator` and `basis.project`\n- added: output of `basis.interpolator` supports trailing axes; can be now\n  passed to `basis.project` for (inexact) interpolation between meshes\n- added: renamed `elementtrirt0` to `elementtrirt1` and added alias for\n  backwards compatibility\n- added: renamed `elementtetrt0` to `elementtetrt1` and added alias for\n  backwards compatibility\n- added: renamed `elementquadrt0` to `elementquadrt1` and added alias for\n  backwards compatibility\n- added: `elementtrirt2`, the second order raviart-thomas element\n- added: `elementhexrt1`, the first order raviart-thomas element for hexahedral meshes\n- added: `basis.project` now better supports `elementcomposite`\n- added: `solver_iter_cg`, a simple pure python conjugate gradient solver for\n  environments that do not have sparse solver libraries (e.g., pyodide)\n- added: `elementtrip2b` and `elementtrip1b`, new aliases for `elementtrimini`\n  and `elementtriccr`\n- added: `elementtrip1g` and `elementtrip2g`, variants of `elementtrip1` and\n  `elementtrip2` using `elementglobal` so that second derivatives are available\n  (useful, e.g., for stabilized methods and the stokes problem)\n- added: `basis.plot3`, a wrapper to `skfem.visuals.*.plot3`\n- fixed: calculation of size in `basis.__repr__` was slow and incorrect\n- fixed: subclasses of `elementhdiv` did not work together with `facetbasis`\n\n### [6.0.0] - 2022-03-15\n\n- changed: `discretefield` is now a subclass of `ndarray` instead of\n  `namedtuple` and, consequently, the components of `discretefield` cannot no\n  more be indexed inside forms like `u[1]` (use `u.grad` instead)\n- changed: writing `w['u']` and `w.u` inside the form definition is now\n  equivalent (previously `w.u == w['u'].value`)\n- changed: `mesh.draw` now uses `matplotlib` by default, calling\n  `mesh.draw(\"vedo\")` uses `vedo`\n- changed: `skfem.visuals.matplotlib` now uses `jet` as the default colormap\n- changed: `boundaryfacetbasis` is now an alias of `facetbasis` instead of\n  other way around\n- deprecated: `discretefield.value` remains for backwards-compatibility but is\n  now deprecated and can be dropped\n- added: `mesh.plot`, a wrapper to `skfem.visuals.*.plot`\n- added: `basis.plot`, a wrapper to `skfem.visuals.*.plot`\n- added: `basis.refinterp` now supports vectorial fields\n- added: `skfem.visuals.matplotlib.plot` now has a basic quiver plot for vector\n  fields\n- added: `mesh.facets_around` which constructs a set of facets around a\n  subdomain\n- added: `mesh.save` and `load` now preserve the orientation of boundaries and\n  interfaces\n- added: `orientedboundary` which is a subclass of `ndarray` for facet index\n  arrays with the orientation information (0 or 1 per facet) available as\n  `orientedboundary.ori`\n- added: `facetbasis` will use the facet orientations (if present) to calculate\n  traces and normal vectors\n- added: `skfem.visuals.matplotlib.draw` will visualize the orientations if\n  `boundaries=true` is given\n- added: `mesh.facets_satisfying` allows specifying the keyword argument\n  `normal` for orienting the resulting interface\n- added: `facetbasis` constructor now has the keyword argument `side` which\n  allows changing the side of the facet used to calculate the basis function\n  values and gradients\n- added: `basis.boundary` method to quickly initialize the corresponding\n  `facetbasis`\n- fixed: improvements to backwards compatibility in `asm`/`assemble` keyword\n  arguments\n- fixed: save format issue with meshio 5.3.0+\n- fixed: `cellbasis` did not properly support `elements` argument\n- fixed: `basis.interpolate` did not properly interpolate all components of\n  `elementcomposite`\n\n### [5.2.0] - 2021-12-27\n\n- added: `basis.project`, a more general and easy to use alternative for\n  `projection`\n- added: `basis` and `facetbasis` kwargs `elements` and `facets` can now be a\n  string refering to subdomain and boundary tags\n- added: `elementquadrt0`, lowest-order quadrilateral raviart-thomas element\n- fixed: `functional` returned only the first component for forms with\n  non-scalar output\n\n### [5.1.0] - 2021-11-30\n\n- added: `skfem.helpers.mul` for matrix multiplication\n- added: `basis.split` will now also split `elementvector` into its components\n- fixed: `elementdg` was not included in the wildcard import\n- fixed: automatic visualization of `meshtri2` and `meshquad2` in jupyter\n  notebooks raised exception\n\n### [5.0.0] - 2021-11-21\n\n- changed: `meshio` is now an optional dependency\n- changed: `elementcomposite` uses `discretefield()` to represent zero\n- added: support more argument types in `basis.get_dofs`\n- added: version information in `skfem.__version__`\n- added: preserve `mesh.boundaries` during uniform refinement of `meshline1`,\n  `meshtri1` and `meshquad1`\n- fixed: refinement of quadratic meshes will now fall back to the refinement\n  algorithm of first-order meshes instead of crashing\n- fixed: edge cases in the adaptive refine of `meshtet1` that failed to produce\n  a valid mesh\n- deprecated: `basis.find_dofs` in favor of `basis.get_dofs`\n- deprecated: merging `dofsview` objects via `+` and `|` because of surprising\n  behavior in some edge cases\n\n### [4.0.1] - 2021-10-15\n\n- fixed: `mappingisoparametric` can now be pickled\n\n### [4.0.0] - 2021-09-27\n\n- added: `mesh.save`/`mesh.load` now exports/imports `mesh.subdomains` and\n  `mesh.boundaries`\n- added: `mesh.load` now optionally writes any mesh data to a list passed via\n  the keyword argument `out`, e.g., `out=data` where `data = ['point_data']`\n- added: `mesh.load` (and `skfem.io.meshio.from_file`) now supports the\n  additional keyword argument `force_meshio_type` for loading mesh files that\n  have multiple element types written in the same file, one element type at\n  a time\n- added: `asm` will now accept a list of bases, assemble the same form using\n  all of the bases and sum the result (useful for jump terms and mixed meshes,\n  see [`ex41.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex41.py)\n- added: `mesh.with_boundaries` now allows the definition of internal boundaries/interfaces\n  via the flag `boundaries_only=false`\n- added: `meshtri1dg`, `meshquad1dg`, `meshhex1dg`, `meshline1dg`; new mesh\n  types for describing meshes with a discontinuous topology, e.g., periodic\n  meshes (see [`ex42.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex42.py))\n- added: `elementhexdg` for transforming hexahedral h1 elements to dg/l2 elements.\n- added: `elementtrip1dg`, `elementquad1dg`, `elementhex1dg`,\n  `elementlinep1dg`; shorthands for `elementtridg(elementtrip1())` etc.\n- added: `elementtriskeletonp0` and `elementtriskeletonp1` for defining\n  lagrange multipliers on the skeleton mesh (see [`ex40.py`](https://github.com/kinnala/scikit-fem/blob/master/docs/examples/ex40.py))\n- added: `trilinearform` for assembling a sparse 3-tensor, e.g., when dealing\n  with unknown material data\n- added: `meshtri.oriented` for ccw oriented triangular meshes which can be\n  useful for debugging or interfacing to external tools\n- added: partial support for `meshwedge1` and `elementwedge1`, the lowest order\n  wedge mesh and element\n- added: `elementtrip3`, cubic triangular lagrange element\n- added: `elementtrip4`, quartic triangular lagrange element\n- added: `elementtri15paramplate`, 15-parameter nonconforming triangular element for plates\n- added: `elementtribdm1`, the lowest order brezzi-douglas-marini element\n- added: `mesh.draw().show()` will now visualize any mesh interactively (requires [vedo](https://vedo.embl.es/))\n- added: adaptive refinement for `meshtet1`\n- fixed: `mappingisoparametric` is now about 2x faster for large meshes thanks\n  to additional caching\n- fixed: `meshhex2.save` did not work properly\n- fixed: `mesh.load` ignores unparseable `cell_sets` inserted by `meshio` in msh 4.1\n- changed: `mesh` string representation is now more informative\n- changed: `form.assemble` no more allows keyword arguments with `list` or\n  `dict` type: from now on only `discretefield` or 1d/2d `ndarray` objects are\n  allowed and 1d `ndarray` is passed automatically to `basis.interpolate` for\n  convenience\n- changed: `meshline` is now a function which initializes `meshline1`\n  and not an alias to `meshline1`\n- changed: `facetbasis` is now a shorthand for `boundaryfacetbasis` and no\n  longer initializes `interiorfacetbasis` or `mortarfacetbasis` if the keyword\n  argument `side` is passed to the constructor\n- removed: the deprecated `mesh.define_boundary` method\n\n### [3.2.0] - 2021-08-02\n\n- added: `elementtriccr` and `elementtetccr`, conforming crouzeix-raviart finite elements\n- fixed: `mesh.mirrored` returned a wrong mesh when a point other than the origin was used\n- fixed: `meshline` constructor accepted only numpy arrays and not plain python lists\n- fixed: `mesh.element_finder` (and `cellbasis.probes`, `cellbasis.interpolator`) was not working properly for a small number of elements (<5) or a large number of input points (>1000)\n- fixed: `meshtet` and `meshtri.element_finder` are now more robust against degenerate elements\n- fixed: `mesh.element_finder` (and `cellbasis.probes`, `cellbasis.interpolator`) raises exception if the query point is outside of the domain\n\n### [3.1.0] - 2021-06-18\n\n- added: `basis`, a shorthand for `cellbasis`\n- added: `cellbasis`, a new preferred name for `interiorbasis`\n- added: `boundaryfacetbasis`, a new preferred name for `exteriorfacetbasis`\n- added: `skfem.utils.penalize`, an alternative to `condense` and `enforce` for\n  essential boundary conditions\n- added: `interiorbasis.point_source`, with `ex38`\n- added: `elementtetdg`, similar to `elementtridg` for tetrahedral meshes\n- fixed: `meshline1.element_finder` \n\n### [3.0.0] - 2021-04-19\n\n- added: completely rewritten `mesh` base class which is \"immutable\" and uses\n  `element` classes to define the ordering of nodes; better support for\n  high-order and other more general mesh types in the future\n- added: new quadratic mesh types: `meshtri2`, `meshquad2`, `meshtet2` and `meshhex2`\n- added: `interiorbasis.probes`; like `interiorbasis.interpolator` but returns a matrix\n  that operates on solution vectors to interpolate them at the given points\n- added: more overloads for `discretefield`, e.g., multiplication, summation\n  and subtraction are now explicitly supported inside the form definitions\n- added: `meshhex.to_meshtet` for splitting hexahedra into tetrahedra\n- added: `meshhex.element_finder` for interpolating finite element solutions\n  on hexahedral meshes via `interiorbasis.interpolator`\n- added: `mesh.with_boundaries`, a functional replacement to\n  `mesh.define_boundary`, i.e. defining boundaries via boolean lambda function\n- added: `mesh.with_subdomains` for defining subdomains via boolean lambda function\n- added: `skfem.utils.projection`, a replacement of `skfem.utils.project`\n  with a different, more intuitive order of arguments\n- added: `skfem.utils.enforce` for setting essential boundary conditions by\n  changing matrix rows to zero and diagonals to one.\n- deprecated: `skfem.utils.project` in favor of `skfem.utils.projection`\n- deprecated: `mesh.define_boundary` in favor of `mesh.with_boundaries`\n- removed: `mesh.{refine,scale,translate}`; the replacements are `mesh.{refined,scaled,translated}`\n- removed: `skfem.models.helpers`; available as `skfem.helpers`\n- removed: `discretefield.{f,df,ddf,hod}`; available as `discretefield.{value,grad,hess,grad3,...}`\n- removed: python 3.6 support\n- removed: `skfem.utils.l2_projection`\n- removed: `skfem.utils.derivative`\n- changed: `mesh.refined` no more attempts to fix the indexing of `mesh.boundaries` after refine\n- changed: `skfem.utils.solve` now uses `scipy.sparse.eigs` instead of `scipy.sparse.eigsh` by default;\n  the old behavior can be retained by explicitly passing `solver=solver_scipy_eigs_sym()`\n- fixed: high memory usage in `skfem.visuals.matplotlib` related to 1d plotting\n\n### [2.5.0] - 2021-02-13\n\n- deprecated: `side` keyword argument to `facetbasis` in favor of the more\n  explicit `interiorfacetbasis` and `mortarfacetbasis`.\n- added: `interiorfacetbasis` for integrating over the interior facets, e.g.,\n  evaluating error estimators with jumps and implementing dg methods.\n- added: `mortarfacetbasis` for integrating over the mortar mesh.\n- added: `interiorbasis.with_element` for reinitializing an equivalent basis\n  that uses a different element.\n- added: `form.partial` for applying `functools.partial` to the form function\n  wrapped by `form`.\n- fixed: include explicit python 3.9 support.\n\n### [2.4.0] - 2021-01-20\n\n- deprecated: list and tuple keyword argument types to `asm`.\n- deprecated: `mesh2d.mirror` in favor of the more general `mesh.mirrored`.\n- deprecated: `mesh.refine`, `mesh.scale` and `mesh.translate` in favor of\n  `mesh.refined`, `mesh.scaled` and `mesh.translated`.\n- added: `mesh.refined`, `mesh.scaled`, and `mesh.translated`. the new methods\n  return a copy instead of modifying `self`.\n- added: `mesh.mirrored` for mirroring a mesh using a normal and a point.\n- added: `functional` now supports forms that evaluate to vectors or other\n  tensors.\n- added: `elementhex0`, piecewise constant element for hexahedral meshes.\n- added: `facetbasis.trace` for restricting existing solutions to lower\n  dimensional meshes on boundaries or interfaces.\n- fixed: `meshline.refined` now correctly performs adaptive refinement of\n  one-dimensional meshes.\n\n### [2.3.0] - 2020-11-24\n\n- added: `elementlinep0`, one-dimensional piecewise constant element.\n- added: `skfem.helpers.curl` now calculates the rotated gradient for\n  two-dimensional elements.\n- added: `meshtet.init_ball` for meshing a ball.\n- fixed: `elementquad0` was not compatible with `facetbasis`.\n\n### [2.2.3] - 2020-10-16\n\n- fixed: remove an unnecessary dependency.\n\n### [2.2.2] - 2020-10-15\n\n- fixed: make the preconditioner in `testex32` more robust.\n\n### [2.2.1] - 2020-10-15\n\n- fixed: remove `tests` from the pypi distribution.\n\n### [2.2.0] - 2020-10-14\n\n- deprecated: `l2_projection` will be replaced by `project`.\n- deprecated: `derivative` will be replaced by `project`.\n- added: `meshtet.element_finder` and `meshline.element_finder` for using\n  `interiorbasis.interpolator`.\n- added: `elementtricr`, the nonconforming crouzeix-raviart element for stokes flow.\n- added: `elementtetcr`, tetrahedral nonconforming crouzeix-raviart element.\n- added: `elementtrihermite`, an extension of `elementlinehermite` to triangular\n  meshes.\n- fixed: fix `mesh.validate` for unsigned `mesh.t`.\n\n### [2.1.1] - 2020-10-01\n\n- fixed: further optimizations to `mesh3d.boundary_edges`: tested to run on a laptop\n  with over 10 million elements.\n\n### [2.1.0] - 2020-09-30\n\n- added: `elementhex2`, a triquadratic hexahedral element.\n- added: `meshtri.init_circle`, constructor for a circle mesh.\n- fixed: `mesh3d.boundary_edges` (and, consequently, `basis.find_dofs`) was slow\n  and used lots of memory due to an exhaustive search of all edges.\n\n### [2.0.0] - 2020-08-21\n\n- deprecated: `project` will only support functions like `lambda x: x[0]`\n  instead of `lambda x, y, z: x` in the future.\n- added: support for complex-valued forms: `bilinearform` and `linearform` now take\n  an optional argument `dtype` which defaults to `np.float64`\n  but can be also `np.complex64`.\n- added: `dofs.__or__` and `dofs.__add__`, for merging degree-of-freedom sets\n  (i.e. `dofs` objects) using `|` and `+` operators.\n- added: `dofs.drop` and `dofs.keep`, for further filtering the degree-of-freedom sets\n- removed: support for old-style decorators `bilinear_form`, `linear_form`, and\n  `functional` (deprecated since 1.0.0).\n- fixed: `facetbasis` did not initialize with `elementquadp`.\n\n### [1.2.0] - 2020-07-07\n\n- added: `meshquad._splitquads` aliased as `meshquad.to_meshtri`.\n- added: `mesh.__add__`, for merging meshes using `+` operator: duplicated nodes are\n  joined.\n- added: `elementhexs2`, a 20-node quadratic hexahedral serendipity element.\n- added: `elementlinemini`, mini-element for one-dimensional mesh.\n- fixed: `mesh3d.boundary_edges` was broken in case of hexahedral meshes.\n- fixed: `skfem.utils.project` did not work for `elementglobal`.\n\n### [1.1.0] - 2020-05-18\n\n- added: `elementtetmini`, mini-element for tetrahedral mesh.\n- fixed: `mesh3d.boundary_edges` incorrectly returned all edges where both nodes are on\n  the boundary.\n\n### [1.0.0] - 2020-04-22\n\n- deprecated: old-style form constructors `bilinear_form`, `linear_form`, and `functional`.\n- changed: `basis.interpolate` returns `discretefield` objects instead of ndarray tuples.\n- changed: `basis.interpolate` works now properly for vectorial and high-order elements\n  by interpolating all components and higher order derivatives.\n- changed: `form.assemble` accepts now any keyword arguments (with type `discretefield`)\n  that are passed over to the forms.\n- changed: renamed `skfem.importers` to `skfem.io`.\n- changed: renamed `skfem.models.helpers` to `skfem.helpers`.\n- changed: `skfem.utils.solve` will now expand also the solutions of eigenvalue problems.\n- added: new-style form constructors `bilinearform`, `linearform`, and `functional`.\n- added: `skfem.io.json` for serialization of meshes to/from json-files.\n- added: `elementlinepp`, p-th order one-dimensional elements.\n- added: `elementquadp`, p-th order quadrilateral elements.\n- added: `elementquaddg` for transforming quadrilateral h1 elements to dg elements.\n- added: `elementquadbfs`, bogner-fox-schmit element for biharmonic problems.\n- added: `elementtrimini`, mini-element for stokes problems.\n- added: `elementcomposite` for using multiple elements in one bilinear form.\n- added: `elementquads2`, quadratic serendipity element.\n- added: `elementlinehermite`, cubic hermite element for euler-bernoulli beams.\n- added: `mesh.define_boundary` for defining named boundaries.\n- added: `basis.find_dofs` for finding degree-of-freedom indices.\n- added: `mesh.from_basis` for defining high-order meshes.\n- added: `basis.split` for splitting multicomponent solutions.\n- added: `mortarmapping` with basic support for mortar methods in 2d.\n- added: `basis` constructors now accept `quadrature` keyword argument for specifying\n  a custom quadrature rule.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "scikit-fem",
  "package_url": "https://pypi.org/project/scikit-fem/",
  "project_url": "https://pypi.org/project/scikit-fem/",
  "project_urls": {
    "Code": "https://github.com/kinnala/scikit-fem",
    "Homepage": "https://github.com/kinnala/scikit-fem",
    "Issues": "https://github.com/kinnala/scikit-fem/issues"
  },
  "release_url": "https://pypi.org/project/scikit-fem/9.0.0/",
  "requires_dist": [
    "numpy",
    "scipy",
    "meshio >=4.0.4 ; extra == 'all'",
    "matplotlib ; extra == 'all'"
  ],
  "requires_python": ">=3.8",
  "summary": "simple finite element assemblers",
  "version": "9.0.0",
  "releases": [],
  "developers": [
    "tom_gustafsson"
  ],
  "kwds": "bilinear_form scikit bilinearform solver_scipy_eigs_sym fem",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_scikit_fem",
  "homepage": "https://github.com/kinnala/scikit-fem",
  "release_count": 51,
  "dependency_ids": [
    "pypi_matplotlib",
    "pypi_meshio",
    "pypi_numpy",
    "pypi_scipy"
  ]
}
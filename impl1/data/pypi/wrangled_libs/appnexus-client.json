{
  "classifiers": [
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. _documentation: https://wiki.appnexus.com/display/api/home\n.. _thingy: https://github.com/numberly/thingy\n\n===============\nappnexus-client\n===============\n\n.. image:: https://img.shields.io/pypi/v/appnexus-client.svg\n   :target: https://pypi.python.org/pypi/appnexus-client\n.. image:: https://img.shields.io/github/license/numberly/appnexus-client.svg\n   :target: https://github.com/numberly/appnexus-client/blob/master/license\n.. image:: https://img.shields.io/travis/numberly/appnexus-client/master.svg\n   :target: https://travis-ci.org/numberly/appnexus-client\n.. image:: https://img.shields.io/coveralls/numberly/appnexus-client.svg\n   :target: https://coveralls.io/github/numberly/appnexus-client\n.. image:: http://readthedocs.org/projects/appnexus-client/badge\n   :target: http://appnexus-client.readthedocs.io\n\n|\n\ngeneral purpose python client for the appnexus api.\n\nthis library exists because most of the open-source solutions we found were for\nspecific appnexus tasks, such as reporting. our solution, however, is meant to\nbe used with any appnexus service.\n\nas it heavily relies on the appnexus api, we advise you to read its\ndocumentation_.\n\nthis client uses models in the same way that database orm would do, but you can\nalso hook it to your own data representation class, or simply use python\ndictionaries.\n\n\ninstall\n=======\n\n.. code-block:: sh\n\n    $ pip install appnexus-client\n\n\ngetting started\n===============\n\nservices\n--------\n\na service is an endpoint on the appnexus api, representing an entity such as a\ncreative. here is the complete list of services usable with appnexus-client:\n``accountrecovery``, ``adprofile``, ``adqualityrule``, ``adserver``,\n``advertiser``, ``batchsegment``, ``brand``, ``broker``, ``browser``,\n``budgetsplitter``, ``campaign``, ``carrier``, ``category``, ``changelog``,\n``changelogdetail``, ``city``, ``contentcategory``, ``country``, ``creative``,\n``creativeformat``, ``currency``, ``custommodel``, ``custommodelhash``,\n``custommodellogit``, ``custommodellut``, ``custommodelparser``, ``deal``,\n``dealbuyeraccess``, ``dealfrompackage``, ``dma``, ``devicemake``,\n``devicemodel``, ``domainauditstatus``, ``domainlist``, ``externalinvcode``,\n``insertionorder``, ``inventoryattribute``, ``inventoryresold``,\n``iprangelist``, ``label``, ``language``, ``lineitem``, ``lineitemmodel``,\n``lookup``, ``manualofferranking``, ``mediasubtype``, ``mediatype``, ``member``,\n``memberprofile``, ``mobileapp``, ``mobileappinstance``,\n``mobileappinstancelist``, ``mobileappstore``, ``nativecustomkey``,\n``objectlimit``, ``operatingsystem``, ``operatingsystemextended``,\n``operatingsystemfamily``, ``optimizationzone``, ``package``,\n``packagebuyeraccess``, ``paymentrule``, ``pixel``, ``placement``,\n``platformmember``, ``postalcode``, ``profile``, ``profilesummary``,\n``publisher``, ``region``, ``report``, ``reportstatus``, ``search``,\n``segment``, ``site``, ``technicalattribute``, ``template``,\n``thirdpartypixel``, ``user``, ``usergrouppattern``, ``visibilityprofile``\n\n\nconnecting\n----------\n\nfirst of all, you need to connect the client to appnexus. one simple way is to\nuse the ``connect`` function with your credentials:\n\n.. code-block:: python\n\n    from appnexus import connect\n\n    connect(\"my-username\", \"my-password\")\n\nfrom there, you can use all the features of the library.\n\n\nmodels\n------\n\na model in appnexus-client is an abstraction for a service. most of them are\nalready declared and you just have to import them.\n\nyou can access the fields of an appnexus just like any object:\n``entity.field_name``\n\nfor example, to print the name of each and every city registered in appnexus,\nyou could do:\n\n.. code-block:: python\n\n    from appnexus import city\n\n    for city in city.find():\n        print(city.name)\n\nyou can also retrieve a single result (the first one returned by the api) using\nthe ``find_one`` method:\n\n.. code-block:: python\n\n    city = city.find_one(id=1337)\n\n\nfiltering and sorting\n---------------------\n\nsorting with appnexus-client is easy: just give a ``sort`` parameter with a\nvalue indicating which field is sorted in which order (``asc`` or\n``desc``). this parameter will be supplied to the appnexus api which will\nreturn a sorted response.\n\nyou can filter entities using parameters of the methods ``find`` and\n``find_one``. each parameter stand as a new filter for the field it is named\nafter. for example, you can search for cities whose `country_code` field is\nequal to \"fr\" and sort them by name:\n\n.. code-block:: python\n\n    for city in city.find(country_code=\"fr\", sort=\"name.desc\"):\n        print(city.name)\n\nthe parameters you give to the ``find`` and ``find_one`` methods are translated\ninto query parameters for the requests being send. for example, the snippet\n``creative.find(state=\"active\", advertiser_id=[1, 2, 3])`` will result in a get\nrequest on ``http://api.appnexus.com/creative?state=active&advertiser_id=1,2,3``\n\nplease search in the appnexus api documentation_ to understand the meaning of\neach parameter.\n\n\ncustom data representation\n--------------------------\n\nby default, appnexus-client relies on thingy_ to represent data as objects.\n\nbut you can also hook your own data representation class. for this, you must\nuse a function that exposes this signature:\n\n.. code-block:: python\n\n    function(client, service, object)\n\nthe ``client`` argument is an ``appnexusclient`` instance. ``service`` is the\nstring representation of the service to which the object belongs. ``object`` is\na dictionary containing the data about the appnexus entity. the return value\nof this function will be used as the data representation.\n\nto use this function and get the desired data representation, you must pass it\nto the client as the ``representation`` keyword argument.\n\nif you want your data to be in the form of simple dictionaries rather than\nthingy_ instances, appnexus-client provides a ``raw`` representation that you\ncan use pretty easily:\n\n.. code-block:: python\n\n    from appnexus.representations import raw\n\n    connect(\"username\", \"password\", representation=raw)\n\nbut if, for example, you would prefer to get lists of tuples, you would have to\ncraft your own representation function:\n\n.. code-block:: python\n\n    def custom_representation(client, service_name, object):\n        return object.items()\n\n    connect(\"username\", \"password\", representation=custom_representation)\n\n\nreports\n-------\n\nretrieving report data has 3 steps:\n\n1. creating a report\n2. checking if the report is ready to download\n3. downloading the report\n\n.. code-block:: python\n\n    from appnexus import report\n\n    json = {\n        \"report_type\": \"network_analytics\",\n        \"columns\": [\n            \"clicks\",\n            \"total_convs\",\n            \"insertion_order_id\",\n            \"line_item_id\",\n        ],\n        \"report_interval\": \"lifetime\",\n        \"format\": \"csv\"\n    }\n\n    report = report(json).save()\n    data = report.download()\n\n\nthe ``download`` method on ``report`` object takes care of checking if the\nreport is available for download and retires it by default for 3 times with an\ninterval of 1 second.  the number of retries can be overridden by passing the\nparameter ``retry_count`` to the ``download`` method:\n\n.. code-block:: python\n\n    data = report.download(retry_count=5)\n\n\nchangelogs\n----------\n\nthe ``changelog`` service allows to retrieve information about changes that\nhave been made to an object of those services: ``campaign``,\n``insertion-order``, ``line-item`` and ``profile``.\n\nfor example, you can print the date of every change that was made on a\ncampaign:\n\n.. code-block:: python\n\n   from appnexus import campaign\n\n   campaign = campaign.find_one()\n   for change in campaign.changelog:\n       print(change.created_on)\n\nfor more information on a change, you can use the ``changelogdetail`` service\nwith the returned ``transaction_id`` as a parameter:\n\n.. code-block:: python\n\n   from appnexus import changelogdetail\n\n   detail = changelogdetail.find_one(service=\"campaign\",\n                                     resource_id=change.resource_id,\n                                     transaction_id=change.transaction_id)\n   print(detail.user_full_name)\n\n\ntests\n=====\n\nto run appnexus-client tests:\n\n* install developers requirements with ``pip install -r requirements.txt``;\n* run ``pytest``.\n\n\nlicense\n=======\n\nmit\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "appnexus-client",
  "package_url": "https://pypi.org/project/AppNexus-client/",
  "project_url": "https://pypi.org/project/AppNexus-client/",
  "project_urls": {
    "Download": "https://github.com/numberly/appnexus-client/tags",
    "Homepage": "https://github.com/numberly/appnexus-client"
  },
  "release_url": "https://pypi.org/project/AppNexus-client/0.9.0/",
  "requires_dist": [
    "requests>=2.25.0",
    "Thingy>=0.8.3"
  ],
  "requires_python": "",
  "summary": "general purpose python client for the appnexus api",
  "version": "0.9.0",
  "releases": [],
  "developers": [
    "alexys@1000mercis.com",
    "numberly"
  ],
  "kwds": "appnexusclient appnexus mobileappinstance mobileapp shields",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_appnexus_client",
  "homepage": "https://github.com/numberly/appnexus-client",
  "release_count": 29,
  "dependency_ids": [
    "pypi_requests",
    "pypi_thingy"
  ]
}
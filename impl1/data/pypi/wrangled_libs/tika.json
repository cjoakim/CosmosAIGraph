{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: database :: front-ends",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![build status](https://travis-ci.org/chrismattmann/tika-python.svg?branch=master)](https://travis-ci.org/chrismattmann/tika-python)\n[![coverage status](https://coveralls.io/repos/github/chrismattmann/tika-python/badge.svg?branch=master)](https://coveralls.io/github/chrismattmann/tika-python?branch=master)\n\ntika-python\n===========\na python port of the [apache tika](http://tika.apache.org/)\nlibrary that makes tika available using the\n[tika rest server](https://cwiki.apache.org/confluence/display/tika/tikaserver).\n\nthis makes apache tika available as a python library,\ninstallable via setuptools, pip and easy install.\n\nto use this library, you need to have java 7+ installed on your\nsystem as tika-python starts up the tika rest server in the\nbackground.\n\ninspired by [aptivate tika](https://github.com/aptivate/python-tika).\n\ninstallation (with pip)\n-----------------------\n1. `pip install tika`\n\ninstallation (without pip)\n--------------------------\n1. `python setup.py build`\n2. `python setup.py install`\n\nairgap environment setup\n------------------------\nto get this working in a disconnected environment, download a tika server file (both tika-server.jar and tika-server.jar.md5, which can be found [here](https://repo1.maven.org/maven2/org/apache/tika/tika-server/)) and set the tika_server_jar environment variable to tika_server_jar=\"file:///<yourpath>/tika-server.jar\" which successfully tells `python-tika` to \"download\" this file and move it to `/tmp/tika-server.jar` and run as background process.\n\nthis is the only way to run `python-tika` without internet access. without this set, the default is to check the tika version and pull latest every time from apache.\n\nenvironment variables\n---------------------\nthese are read once, when tika/tika.py is initially loaded and used throughout after that.\n\n1. `tika_version` - set to the version string, e.g., 1.12 or default to current tika version.\n2. `tika_server_jar` - set to the full url to the remote tika server jar to download and cache.\n3. `tika_server_endpoint` - set to the host (local or remote) for the running tika server jar.\n4. `tika_client_only` - if set to true, then `tika_server_jar` is ignored, and relies on the value for `tika_server_endpoint` and treats tika like a rest client.\n5. `tika_translator` - set to the fully qualified class name (defaults to lingo24) for the tika translator implementation.\n6. `tika_server_classpath` - set to a string (delimited by ':' for each additional path) to prepend to the tika server jar path.\n7. `tika_log_path` - set to a directory with write permissions and the `tika.log` and `tika-server.log` files will be placed in this directory.\n8. `tika_path` - set to a directory with write permissions and the `tika_server.jar` file will be placed in this directory.\n9. `tika_java` - set the java runtime name, e.g., `java` or `java9`\n10. `tika_startup_sleep` - number of seconds (`float`) to wait per check if tika server is launched at runtime\n11. `tika_startup_max_retry` - number of checks (`int`) to attempt for tika server startup if launched at runtime\n12. `tika_java_args` - set java runtime arguments, e.g, `-xmx4g`\n13. `tika_log_file` - set the filename for the log file. default: `tika.log`. if it is an empty string (`''`), no log file is created.\n\ntesting it out\n==============\n\nparser interface (backwards compat prior to rest)\n-------------------------------------------------\n```python\n#!/usr/bin/env python\nimport tika\ntika.initvm()\nfrom tika import parser\nparsed = parser.from_file('/path/to/file')\nprint(parsed[\"metadata\"])\nprint(parsed[\"content\"])\n```\n\nparser interface\n----------------------\nthe parser interface extracts text and metadata using the /rmeta\ninterface. this is one of the better ways to get the internal xhtml\ncontent extracted.\n\nnote:\n![alert icon](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon28.png \"alert\")\nthe parser interface needs the following environment variable set on the console for printing of the extracted content.\n```export pythonioencoding=utf8```\n\n```python\n#!/usr/bin/env python\nimport tika\nfrom tika import parser\nparsed = parser.from_file('/path/to/file')\nprint(parsed[\"metadata\"])\nprint(parsed[\"content\"])\n```\n\noptionally, you can pass tika server url along with the call\nwhat's useful for multi-instance execution or when tika is dockerzed/linked.\n\n```python\nparsed = parser.from_file('/path/to/file', 'http://tika:9998/tika')\nstring_parsed = parser.from_buffer('good evening, dave', 'http://tika:9998/tika')\n```\n\nyou can also pass a binary stream\n```\nwith open(file, 'rb') as file_obj:\n    response = tika.parser.from_file(file_obj)\n```\n\ngzip compression\n---------------------\nsince tika 1.24.1 gzip compression of input and output streams is allowed. \n\ninput compression can be achieved with gzip or zlib:\n```\n    import zlib \n\n    with open(file, 'rb') as file_obj:\n        return tika.parser.from_buffer(zlib.compress(file_obj.read()))\n\n...\n\n    import gzip\n \n    with open(file, 'rb') as file_obj:\n        return tika.parser.from_buffer(gzip.compress(file_obj.read()))\n```\n\nand output with the header:\n```\n    with open(file, 'rb') as file_obj:\n        return tika.parser.from_file(file_obj, headers={'accept-encoding': 'gzip, deflate'})\n```\n\nspecify output format to xhtml\n---------------------\nthe parser interface is optionally able to output the content as xhtml rather than plain text.\n\nnote:\n![alert icon](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon28.png \"alert\")\nthe parser interface needs the following environment variable set on the console for printing of the extracted content.\n```export pythonioencoding=utf8```\n\n```python\n#!/usr/bin/env python\nimport tika\nfrom tika import parser\nparsed = parser.from_file('/path/to/file', xmlcontent=true)\nprint(parsed[\"metadata\"])\nprint(parsed[\"content\"])\n\n# note: this is also available when parsing from the buffer.\n```\n\nunpack interface\n----------------\nthe unpack interface handles both metadata and text extraction in a single\ncall and internally returns back a tarball of metadata and text entries that\nis internally unpacked, reducing the wire load for extraction.\n\n```python\n#!/usr/bin/env python\nimport tika\nfrom tika import unpack\nparsed = unpack.from_file('/path/to/file')\n```\n\ndetect interface\n----------------------\nthe detect interface provides a iana mime type classification for the\nprovided file.\n\n```python\n#!/usr/bin/env python\nimport tika\nfrom tika import detector\nprint(detector.from_file('/path/to/file'))\n```\n\nconfig interface\n----------------------\nthe config interface allows you to inspect the tika server environment's\nconfiguration including what parsers, mime types, and detectors the\nserver has been configured with.\n\n```python\n#!/usr/bin/env python\nimport tika\nfrom tika import config\nprint(config.getparsers())\nprint(config.getmimetypes())\nprint(config.getdetectors())\n```\n\nlanguage detection interface\n---------------------------------\nthe language detection interface provides a 2 character language\ncode texted based on the text in provided file.\n\n```python\n#!/usr/bin/env python\nfrom tika import language\nprint(language.from_file('/path/to/file'))\n```\n\ntranslate interface\n------------------------\nthe translate interface translates the text automatically extracted\nby tika from the source language to the destination language.\n\n```python\n#!/usr/bin/env python\nfrom tika import translate\nprint(translate.from_file('/path/to/spanish', 'es', 'en'))\n```\n\nusing a buffer\n--------------\nnote you can also use a parser and detector\n.from_buffer(string|bufferediobase) method to dynamically parser\na string or bytes buffer in python and/or detect its mime\ntype. this is useful if you've already loaded\nthe content into memory.\n```python\nstring_parsed = parser.from_buffer('good evening, dave')\nbyte_data: bytes = b'b\\xc3\\xa4ume'\nparsed = parser.from_buffer(io.bytesio(byte_data))\n```\n\nusing client only mode\n----------------------\nyou can set tika to use client only mode by setting\n```python\nimport tika\ntika.tikaclientonly = true\n```\n\nthen you can run any of the methods and it will fully\nomit the check to see if the service on localhost is\nrunning and omit printing the check messages.\n\nchanging the tika classpath\n---------------------------\nyou can update the classpath that tika server uses by\nsetting the classpath as a set of ':' delimited strings.\nfor example if you want to get tika-python working with\n[geotopicparsing](https://cwiki.apache.org/confluence/display/tika/geotopicparser),\nyou can do this, replace paths below with your own paths, as\nidentified [here](https://cwiki.apache.org/confluence/display/tika/geotopicparser)\nand make sure that you have done this:\n\nkill tika server (if already running):\n\n```bash\nps aux | grep java | grep tika\nkill -9 pid\n```\n\n```python\nimport tika.tika\nimport os\nfrom tika import parser\nhome = os.getenv('home')\ntika.tika.tikaserverclasspath = home + '/git/geotopicparser-utils/mime:'+home+'/git/geotopicparser-utils/models/polar'\nparsed = parser.from_file(home + '/git/geotopicparser-utils/geotopics/polar.geot')\nprint parsed[\"metadata\"]\n```\n\ncustomizing the tika server request\n---------------------------\nyou may customize the outgoing http request to tika server by setting `requestoptions` on the `.from_file` and `.from_buffer` methods (parser, unpack , detect, config, language, translate). it should be a dictionary of arguments that will be passed to the request method. the [request method documentation](https://requests.kennethreitz.org/en/master/api/#requests.request) specifies valid arguments. this will override any defaults except for `url` and `params `/`data`.\n\n```python\nfrom tika import parser\nparsed = parser.from_file('/path/to/file', requestoptions={'timeout': 120})\n```\n\nnew command line client tool\n============================\nwhen you install tika-python you also get a new command\nline client tool, `tika-python` installed in your /path/to/python/bin\ndirectory.\n\nthe options and help for the command line tool can be seen by typing\n`tika-python` without any arguments. this will also download a copy of\nthe tika-server jar and start it if you haven't done so already.\n\n```bash\ntika.py [-v] [-o <outputdir>] [--server <tikaserverendpoint>] [--install <urltotikaserverjar>] [--port <portnumber>] <command> <option> <urlorpathtofile>\n\ntika.py parse all test.pdf test2.pdf                   (write output json metadata files for test1.pdf_meta.json and test2.pdf_meta.json)\ntika.py detect type test.pdf                           (returns mime-type as text/plain)\ntika.py language file french.txt                       (returns language e.g., fr as text/plain)\ntika.py translate fr:en french.txt                     (translates the file french.txt from french to english)\ntika.py config mime-types                              (see what mime-types the tika server can handle)\n\na simple python and command-line client for tika using the standalone tika server (jar file).\nall commands return results in json format by default (except text in text/plain).\n\nto parse docs, use:\ntika.py parse <meta | text | all> <path>\n\nto check the configuration of the tika server, use:\ntika.py config <mime-types | detectors | parsers>\n\ncommands:\n  parse  = parse the input file and write a json doc file.ext_meta.json containing the extracted metadata, text, or both\n  detect type = parse the stream and 'detect' the mime/media type, return in text/plain\n  language file = parse the file stream and identify the language of the text, return its 2 character code in text/plain\n  translate src:dest = parse and extract text and then translate the text from source language to destination language\n  config = return a json doc describing the configuration of the tika server (i.e. mime-types it\n             can handle, or installed detectors or parsers)\n\narguments:\n  urlorpathtofile = file to be parsed, if url it will first be retrieved and then passed to tika\n\nswitches:\n  --verbose, -v                  = verbose mode\n  --encode, -e           = encode response in utf-8\n  --csv, -c    = report detect output in comma-delimited format\n  --server <tikaserverendpoint>  = use a remote tika server at this endpoint, otherwise use local server\n  --install <urltotikaserverjar> = download and exec tika server (jar file), starting server on default port 9998\n\nexample usage as python client:\n-- from tika import runcommand, parse1\n-- jsonoutput = runcommand('parse', 'all', filename)\n or\n-- jsonoutput = parse1('all', filename)\n```\n\nquestions, comments?\n===================\nsend them to [chris a. mattmann](mailto:chris.a.mattmann@jpl.nasa.gov).\n\ncontributors\n============\n* chris a. mattmann, jpl\n* brian d. wilson, jpl\n* dongni zhao, usc\n* kenneth durri, university of maryland\n* tyler palsulich, new york university & google\n* joe germuska, northwestern university\n* vlad shvedov, profinda.com\n* diogo vieira, globo.com\n* aron ahmadia, continuum analytics\n* karanjeet singh, usc\n* renat nasyrov, yandex\n* james brooking, blackbeard\n* yash tanna, usc\n* igor tokarev, freelance\n* imraan parker, freelance\n* annie k. didier, jpl\n* juan elosua, tegra cybersecurity center\n* carina de oliveira antunes, cern\n\nthanks\n======\nthanks to the [darpa memex](http://memex.jpl.nasa.gov) program for funding most of the original portions of this work.\n\nlicense\n=======\n[apache license, version 2](http://www.apache.org/licenses/license-2.0)",
  "docs_url": null,
  "keywords": "tika digital babel fish apache",
  "license": "apache license version 2 (\"alv2\")",
  "name": "tika",
  "package_url": "https://pypi.org/project/tika/",
  "project_url": "https://pypi.org/project/tika/",
  "project_urls": {
    "Download": "http://github.com/chrismattmann/tika-python",
    "Homepage": "http://github.com/chrismattmann/tika-python"
  },
  "release_url": "https://pypi.org/project/tika/2.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "apache tika python library",
  "version": "2.6.0",
  "releases": [],
  "developers": [
    "chris.a.mattmann@jpl.nasa.gov",
    "chris_mattmann"
  ],
  "kwds": "tika_server tika_java tika_server_jar tika_version tika",
  "license_kwds": "apache license version 2 (\"alv2\")",
  "libtype": "pypi",
  "id": "pypi_tika",
  "homepage": "http://github.com/chrismattmann/tika-python",
  "release_count": 35,
  "dependency_ids": []
}
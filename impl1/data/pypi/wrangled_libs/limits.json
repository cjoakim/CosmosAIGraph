{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: os independent",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. |ci| image:: https://github.com/alisaifee/limits/workflows/ci/badge.svg?branch=master\n    :target: https://github.com/alisaifee/limits/actions?query=branch%3amaster+workflow%3aci\n.. |codecov| image:: https://codecov.io/gh/alisaifee/limits/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/alisaifee/limits\n.. |pypi| image:: https://img.shields.io/pypi/v/limits.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/limits\n.. |pypi-versions| image:: https://img.shields.io/pypi/pyversions/limits?style=flat-square\n    :target: https://pypi.python.org/pypi/limits\n.. |license| image:: https://img.shields.io/pypi/l/limits.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/limits\n.. |docs| image:: https://readthedocs.org/projects/limits/badge/?version=latest\n   :target: https://limits.readthedocs.org\n\nlimits\n------\n|docs| |ci| |codecov| |pypi| |pypi-versions| |license|\n\n\n**limits** is a python library to perform rate limiting with commonly used storage backends (redis, memcached, mongodb & etcd).\n\n----\n\nsponsored by zuplo - fully-managed, programmable api management platform.\nadd rate limiting and more to your public api in minutes, try it at `zuplo.com <https://zuplo.link/3dzm9ej>`_\n\n----\n\nsupported strategies\n====================\n`fixed window <https://limits.readthedocs.io/en/latest/strategies.html#fixed-window>`_\n   this strategy resets at a fixed interval (start of minute, hour, day etc).\n   for example, given a rate limit of ``10/minute`` the strategy will:\n\n   - allow 10 requests between ``00:01:00`` and ``00:02:00``\n   - allow 10 requests at ``00:00:59`` and 10 more requests at ``00:01:00``\n\n\n`fixed window (elastic) <https://limits.readthedocs.io/en/latest/strategies.html#fixed-window-with-elastic-expiry>`_\n   identical to fixed window, except every breach of rate limit results in an extension\n   to the time out. for example a rate limit of `1/minute` hit twice within a minute will\n   result in a lock-out for two minutes.\n\n`moving window <https://limits.readthedocs.io/en/latest/strategies.html#moving-window>`_\n   sliding window strategy enforces a rate limit of n/(m time units)\n   on the **last m** time units at the second granularity.\n\n   for example, with a rate limit of ``10/minute``:\n\n   - allow 9 requests that arrive at ``00:00:59``\n   - allow another request that arrives at ``00:01:00``\n   - reject the request that arrives at ``00:01:01``\n\nstorage backends\n================\n\n- `redis <https://limits.readthedocs.io/en/latest/storage.html#redis-storage>`_\n- `memcached <https://limits.readthedocs.io/en/latest/storage.html#memcached-storage>`_\n- `mongodb <https://limits.readthedocs.io/en/latest/storage.html#mongodb-storage>`_\n- `etcd <https://limits.readthedocs.io/en/latest/storage.html#etcd-storage>`_\n- `in-memory <https://limits.readthedocs.io/en/latest/storage.html#in-memory-storage>`_\n\ndive right in\n=============\n\ninitialize the storage backend\n\n.. code-block:: python\n\n   from limits import storage\n   memory_storage = storage.memorystorage()\n   # or memcached\n   memcached_storage = storage.memcachedstorage(\"memcached://localhost:11211\")\n   # or redis\n   redis_storage = storage.redisstorage(\"redis://localhost:6379\")\n   # or use the factory\n   storage_uri = \"memcached://localhost:11211\"\n   some_storage = storage.storage_from_string(storage_uri)\n\ninitialize a rate limiter with the moving window strategy\n\n.. code-block:: python\n\n   from limits import strategies\n   moving_window = strategies.movingwindowratelimiter(memory_storage)\n\n\ninitialize a rate limit\n\n.. code-block:: python\n\n    from limits import parse\n    one_per_minute = parse(\"1/minute\")\n\ninitialize a rate limit explicitly\n\n.. code-block:: python\n\n    from limits import ratelimititempersecond\n    one_per_second = ratelimititempersecond(1, 1)\n\ntest the limits\n\n.. code-block:: python\n\n    assert true == moving_window.hit(one_per_minute, \"test_namespace\", \"foo\")\n    assert false == moving_window.hit(one_per_minute, \"test_namespace\", \"foo\")\n    assert true == moving_window.hit(one_per_minute, \"test_namespace\", \"bar\")\n\n    assert true == moving_window.hit(one_per_second, \"test_namespace\", \"foo\")\n    assert false == moving_window.hit(one_per_second, \"test_namespace\", \"foo\")\n    time.sleep(1)\n    assert true == moving_window.hit(one_per_second, \"test_namespace\", \"foo\")\n\ncheck specific limits without hitting them\n\n.. code-block:: python\n\n    assert true == moving_window.hit(one_per_second, \"test_namespace\", \"foo\")\n    while not moving_window.test(one_per_second, \"test_namespace\", \"foo\"):\n        time.sleep(0.01)\n    assert true == moving_window.hit(one_per_second, \"test_namespace\", \"foo\")\n\nlinks\n=====\n\n* `documentation <http://limits.readthedocs.org/en/latest>`_\n* `changelog <http://limits.readthedocs.org/en/stable/changelog.html>`_\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "limits",
  "package_url": "https://pypi.org/project/limits/",
  "project_url": "https://pypi.org/project/limits/",
  "project_urls": {
    "Homepage": "https://limits.readthedocs.org",
    "Source": "https://github.com/alisaifee/limits"
  },
  "release_url": "https://pypi.org/project/limits/3.7.0/",
  "requires_dist": [
    "deprecated >=1.2",
    "importlib-resources >=1.3",
    "packaging <24,>=21",
    "typing-extensions",
    "redis !=4.5.2,!=4.5.3,<6.0.0,>3 ; extra == 'all'",
    "redis !=4.5.2,!=4.5.3,>=4.2.0 ; extra == 'all'",
    "pymemcache <5.0.0,>3 ; extra == 'all'",
    "pymongo <5,>4.1 ; extra == 'all'",
    "etcd3 ; extra == 'all'",
    "coredis <5,>=3.4.0 ; extra == 'all'",
    "motor <4,>=3 ; extra == 'all'",
    "aetcd ; extra == 'all'",
    "emcache >=0.6.1 ; (python_version < \"3.11\") and extra == 'all'",
    "emcache >=1 ; (python_version >= \"3.11\") and extra == 'all'",
    "aetcd ; extra == 'async-etcd'",
    "emcache >=0.6.1 ; (python_version < \"3.11\") and extra == 'async-memcached'",
    "emcache >=1 ; (python_version >= \"3.11\") and extra == 'async-memcached'",
    "motor <4,>=3 ; extra == 'async-mongodb'",
    "coredis <5,>=3.4.0 ; extra == 'async-redis'",
    "etcd3 ; extra == 'etcd'",
    "pymemcache <5.0.0,>3 ; extra == 'memcached'",
    "pymongo <5,>4.1 ; extra == 'mongodb'",
    "redis !=4.5.2,!=4.5.3,<6.0.0,>3 ; extra == 'redis'",
    "redis !=4.5.2,!=4.5.3,>=4.2.0 ; extra == 'rediscluster'"
  ],
  "requires_python": ">=3.7",
  "summary": "rate limiting utilities",
  "version": "3.7.0",
  "releases": [],
  "developers": [
    "ali",
    "ali@indydevs.org"
  ],
  "kwds": "limits limiting pyversions branch limiter",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_limits",
  "homepage": "https://limits.readthedocs.org",
  "release_count": 64,
  "dependency_ids": [
    "pypi_aetcd",
    "pypi_coredis",
    "pypi_deprecated",
    "pypi_emcache",
    "pypi_etcd3",
    "pypi_importlib_resources",
    "pypi_motor",
    "pypi_packaging",
    "pypi_pymemcache",
    "pypi_pymongo",
    "pypi_redis",
    "pypi_typing_extensions"
  ]
}
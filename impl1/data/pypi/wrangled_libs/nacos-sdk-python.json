{
  "classifiers": [
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\n# nacos-sdk-python\na python implementation of nacos openapi.\n\nsee: https://nacos.io/zh-cn/docs/open-api.html\n\n[![pypi version](https://badge.fury.io/py/nacos-sdk-python.svg)](https://badge.fury.io/py/nacos-sdk-python)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](https://github.com/nacos-group/nacos-sdk-python/blob/master/license)\n\n\n### supported python version\uff1a\n\npython 2.7\npython 3.6\npython 3.7\n\n### supported nacos version\nnacos 0.8.0 ~ 1.3.2\n\n\n## installation\n```shell\npip install nacos-sdk-python\n```\n\n## getting started\n```python\nimport nacos\n\n# both http/https protocols are supported, if not set protocol prefix default is http, and https with no ssl check(verify=false)\n# \"192.168.3.4:8848\" or \"https://192.168.3.4:443\" or \"http://192.168.3.4:8848,192.168.3.5:8848\" or \"https://192.168.3.4:443,https://192.168.3.5:443\"\nserver_addresses = \"server addresses split by comma\"\nnamespace = \"namespace id\"\n\n# no auth mode\nclient = nacos.nacosclient(server_addresses, namespace=namespace)\n# auth mode\n#client = nacos.nacosclient(server_addresses, namespace=namespace, ak=\"{ak}\", sk=\"{sk}\")\n\n# get config\ndata_id = \"config.nacos\"\ngroup = \"group\"\nprint(client.get_config(data_id, group))\n```\n\n## configuration\n```\nclient = nacosclient(server_addresses, namespace=your_ns, ak=your_ak, sk=your_sk)\n```\n\n* *server_addresses* - **required**  - nacos server address, comma separated if more than 1.\n* *namespace* - namespace. | default: `none`\n* *ak* - the accesskey to authenticate. | default: null\n* *sk* - the secretkey to authentication. | default: null\n\n#### extra options\nextra option can be set by `set_options`, as following:\n\n```\nclient.set_options({key}={value})\n# client.set_options(proxies={\"http\":\"192.168.3.50:809\"})\n```\n\nconfigurable options are:\n\n* *default_timeout* - default timeout for get config from server in seconds.\n* *pulling_timeout* - long polling timeout in seconds.\n* *pulling_config_size* - max config items number listened by one polling process.\n* *callback_thread_num* - concurrency for invoking callback.\n* *failover_base* - dir to store failover config files.\n* *snapshot_base* - dir to store snapshot config files.\n* *no_snapshot* - to disable default snapshot behavior, this can be overridden by param *no_snapshot* in *get* method.\n* *proxies* - dict proxy mapping, some environments require proxy access, so you can set this parameter, this way http requests go through the proxy.\n\n## api reference\n \n### get config\n>`nacosclient.get_config(data_id, group, timeout, no_snapshot)`\n\n* `param` *data_id* data id.\n* `param` *group* group, use `default_group` if no group specified.\n* `param` *timeout* timeout for requesting server in seconds.\n* `param` *no_snapshot* whether to use local snapshot while server is unavailable.\n* `return` \nw\nget value of one config item following priority:\n\n* step 1 - get from local failover dir(default: `${cwd}/nacos-data/data`).\n  * failover dir can be manually copied from snapshot dir(default: `${cwd}/nacos-data/snapshot`) in advance.\n  * this helps to suppress the effect of known server failure.\n    \n* step 2 - get from one server until value is got or all servers tried.\n  * content will be save to snapshot dir after got from server.\n\n* step 3 - get from snapshot dir.\n\n### add watchers\n>`nacosclient.add_config_watchers(data_id, group, cb_list)`\n\n* `param` *data_id* data id.\n* `param` *group* group, use `default_group` if no group specified.\n* `param` *cb_list* list of callback functions to add.\n* `return`\n\nadd watchers to a specified config item.\n* once changes or deletion of the item happened, callback functions will be invoked.\n* if the item is already exists in server, callback functions will be invoked for once.\n* multiple callbacks on one item is allowed and all callback functions are invoked concurrently by `threading.thread`.\n* callback functions are invoked from current process.\n\n### remove watcher\n>`nacosclient.remove_config_watcher(data_id, group, cb, remove_all)`\n\n* `param` *data_id* data id.\n* `param` *group* group, use \"default_group\" if no group specified.\n* `param` *cb* callback function to delete.\n* `param` *remove_all* whether to remove all occurrence of the callback or just once.\n* `return`\n\nremove watcher from specified key.\n\n### publish config\n>`nacosclient.publish_config(data_id, group, content, timeout)`\n\n* `param` *data_id* data id.\n* `param` *group* group, use \"default_group\" if no group specified.\n* `param` *content* config value.\n* `param` *timeout* timeout for requesting server in seconds.\n* `return` true if success or an exception will be raised.\n\npublish one data item to nacos.\n* if the data key is not exist, create one first.\n* if the data key is exist, update to the content specified.\n* content can not be set to none, if there is need to delete config item, use function **remove** instead.\n\n### remove config\n>`nacosclient.remove_config(data_id, group, timeout)`\n* `param` *data_id* data id.\n* `param` *group* group, use \"default_group\" if no group specified.\n* `param` *timeout* timeout for requesting server in seconds.\n* `return` true if success or an exception will be raised.\n\nremove one data item from nacos.\n\n### register instance\n>`nacosclient.add_naming_instance(service_name, ip, port, cluster_name, weight, metadata, enable, healthy)`\n* `param` *service_name*  **required** service name to register to.\n* `param` *ip*  **required** ip of the instance.\n* `param` *port* **required** port of the instance.\n* `param` *cluster_name* cluster to register to.\n* `param` *weight* a float number for load balancing weight.\n* `param` *metadata* extra info in json string format or dict format\n* `param` *enable* a bool value to determine whether instance is enabled or not.\n* `param` *healthy* a bool value to determine whether instance is healthy or not.\n* `param` *ephemeral* a bool value to determine whether instance is ephemeral or not.\n* `return` true if success or an exception will be raised.\n\n### deregister instance\n>`nacosclient.remove_naming_instance(service_name, ip, port, cluster_name)`\n* `param` *service_name*  **required** service name to deregister from.\n* `param` *ip*  **required** ip of the instance.\n* `param` *port* **required** port of the instance.\n* `param` *cluster_name* cluster to deregister from.\n* `param` *ephemeral* a bool value to determine whether instance is ephemeral or not.\n* `return` true if success or an exception will be raised.\n\n### modify instance\n>`nacosclient.modify_naming_instance(service_name, ip, port, cluster_name, weight, metadata, enable)`\n* `param` *service_name*  **required** service name.\n* `param` *ip*  **required** ip of the instance.\n* `param` *port* **required** port of the instance.\n* `param` *cluster_name* cluster name.\n* `param` *weight* a float number for load balancing weight.\n* `param` *metadata* extra info in json string format or dict format.\n* `param` *enable* a bool value to determine whether instance is enabled or not.\n* `param` *ephemeral* a bool value to determine whether instance is ephemeral or not.\n* `return` true if success or an exception will be raised.\n\n### query instances\n>`nacosclient.list_naming_instance(service_name, clusters, namespace_id, group_name, healthy_only)`\n* `param` *service_name*  **required** service name to query.\n* `param` *clusters* cluster names separated by comma.\n* `param` *namespace_id* customized group name, default `blank`.\n* `param` *group_name* customized group name , default `default_group`.\n* `param` *healthy_only* a bool value for querying healthy instances or not.\n* `return` instance info list if success or an exception will be raised.\n\n### query instance detail\n>`nacosclient.get_naming_instance(service_name, ip, port, cluster_name)`\n* `param` *service_name*  **required** service name.\n* `param` *ip*  **required** ip of the instance.\n* `param` *port* **required** port of the instance.\n* `param` *cluster_name* cluster name.\n* `return` instance info if success or an exception will be raised.\n\n### send instance beat\n>`nacosclient.send_heartbeat(service_name, ip, port, cluster_name, weight, metadata)`\n* `param` *service_name*  **required** service name.\n* `param` *ip*  **required** ip of the instance.\n* `param` *port* **required** port of the instance.\n* `param` *cluster_name* cluster to register to.\n* `param` *weight* a float number for load balancing weight.\n* `param` *ephemeral* a bool value to determine whether instance is ephemeral or not.\n* `param` *metadata* extra info in json string format or dict format.\n* `return` a json object include server recommended beat interval if success or an exception will be raised.\n\n### subscribe service instances changed\n>`nacosclient.subscribe(listener_fn, listener_interval=7, *args, **kwargs)`\n* `param` *listener_fn*  **required** customized listener function.\n* `param` *listener_interval*  listen interval , default 7 second.\n* `param` *service_name*  **required** service name which subscribes.\n* `param` *clusters* cluster names separated by comma.\n* `param` *namespace_id* customized group name, default `blank`.\n* `param` *group_name* customized group name , default `default_group`.\n* `param` *healthy_only* a bool value for querying healthy instances or not.\n* `return`\n\n### unsubscribe service instances changed\n>`nacosclient.unsubscribe(service_name, listener_name)`\n* `param` *service_name*  **required** service name to subscribed.\n* `param` *listener_name*  listener_name which is customized.\n* `return`\n\n### stop all service subscribe \n>`nacosclient.stop_subscribe()`\n* `return`\n\n## debugging mode\ndebugging mode if useful for getting more detailed log on console.\n\ndebugging mode can be set by:\n```\nnacosclient.set_debugging()\n# only effective within the current process\n```\n\n\n\n",
  "docs_url": null,
  "keywords": "nacos,nacos-sdk-python",
  "license": "apache license 2.0",
  "name": "nacos-sdk-python",
  "package_url": "https://pypi.org/project/nacos-sdk-python/",
  "project_url": "https://pypi.org/project/nacos-sdk-python/",
  "project_urls": {
    "Documentation": "https://github.com/nacos-group/nacos-sdk-python",
    "Homepage": "https://github.com/nacos-group/nacos-sdk-python",
    "Nacos Open API Guide": "https://nacos.io/en-us/docs/open-api.html",
    "Source": "https://github.com/nacos-group/nacos-sdk-python"
  },
  "release_url": "https://pypi.org/project/nacos-sdk-python/0.1.14/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python client for nacos.",
  "version": "0.1.14",
  "releases": [],
  "developers": [
    "755063194@qq.com",
    "nacos"
  ],
  "kwds": "nacos nacosclient openapi python api",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_nacos_sdk_python",
  "homepage": "https://github.com/nacos-group/nacos-sdk-python",
  "release_count": 18,
  "dependency_ids": []
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "<a href=\"https://www.sktime.net\"><img src=\"https://github.com/sktime/sktime/blob/main/docs/source/images/sktime-logo.svg\" width=\"175\" align=\"right\" /></a>\n\n# welcome to sktime\n\n> a unified interface for machine learning with time series\n\n:rocket: **version 0.24.1 out now!** [check out the release notes here](https://www.sktime.net/en/latest/changelog.html).\n\nsktime is a library for time series analysis in python. it provides a unified interface for multiple time series learning tasks. currently, this includes time series classification, regression, clustering, annotation, and forecasting. it comes with [time series algorithms](https://www.sktime.net/en/stable/estimator_overview.html) and [scikit-learn] compatible tools to build, tune and validate time series models.\n\n[scikit-learn]: https://scikit-learn.org/stable/\n\n| overview | |\n|---|---|\n| **open&#160;source** | [![bsd 3-clause](https://img.shields.io/badge/license-bsd%203--clause-blue.svg)](https://github.com/sktime/sktime/blob/main/license) |\n| **tutorials** | [![binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sktime/sktime/main?filepath=examples) [![!youtube](https://img.shields.io/static/v1?logo=youtube&label=youtube&message=tutorials&color=red)](https://www.youtube.com/playlist?list=plks3uggjlwhqnzu0leoelkvnjvvest2d0) |\n| **community** | [![!discord](https://img.shields.io/static/v1?logo=discord&label=discord&message=chat&color=lightgreen)](https://discord.com/invite/54aczafsn7) [![!slack](https://img.shields.io/static/v1?logo=linkedin&label=linkedin&message=news&color=lightblue)](https://www.linkedin.com/company/scikit-time/)  |\n| **ci/cd** | [![github-actions](https://img.shields.io/github/actions/workflow/status/sktime/sktime/wheels.yml?logo=github)](https://github.com/sktime/sktime/actions/workflows/wheels.yml) [![!codecov](https://img.shields.io/codecov/c/github/sktime/sktime?label=codecov&logo=codecov)](https://codecov.io/gh/sktime/sktime) [![readthedocs](https://img.shields.io/readthedocs/sktime?logo=readthedocs)](https://www.sktime.net/en/latest/?badge=latest) [![platform](https://img.shields.io/conda/pn/conda-forge/sktime)](https://github.com/sktime/sktime) |\n| **code** |  [![!pypi](https://img.shields.io/pypi/v/sktime?color=orange)](https://pypi.org/project/sktime/) [![!conda](https://img.shields.io/conda/vn/conda-forge/sktime)](https://anaconda.org/conda-forge/sktime) [![!python-versions](https://img.shields.io/pypi/pyversions/sktime)](https://www.python.org/) [![!black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)  |\n| **downloads**| [![downloads](https://static.pepy.tech/personalized-badge/sktime?period=week&units=international_system&left_color=grey&right_color=blue&left_text=weekly%20(pypi))](https://pepy.tech/project/sktime) [![downloads](https://static.pepy.tech/personalized-badge/sktime?period=month&units=international_system&left_color=grey&right_color=blue&left_text=monthly%20(pypi))](https://pepy.tech/project/sktime) [![downloads](https://static.pepy.tech/personalized-badge/sktime?period=total&units=international_system&left_color=grey&right_color=blue&left_text=cumulative%20(pypi))](https://pepy.tech/project/sktime) |\n| **citation** | [![!zenodo](https://zenodo.org/badge/doi/10.5281/zenodo.3749000.svg)](https://doi.org/10.5281/zenodo.3749000) |\n\n## :books: documentation\n\n| documentation              |                                                                |\n| -------------------------- | -------------------------------------------------------------- |\n| :star: **[tutorials]**        | new to sktime? here's everything you need to know!              |\n| :clipboard: **[binder notebooks]** | example notebooks to play with in your browser.              |\n| :woman_technologist: **[user guides]**      | how to use sktime and its features.                             |\n| :scissors: **[extension templates]** | how to build your own estimator using sktime's api.            |\n| :control_knobs: **[api reference]**      | the detailed reference for sktime's api.                        |\n| :tv: **[video tutorial]**            | our video tutorial from 2021 pydata global.      |\n| :hammer_and_wrench: **[changelog]**          | changes and version history.                                   |\n| :deciduous_tree: **[roadmap]**          | sktime's software and community development plan.                                   |\n| :pencil: **[related software]**          | a list of related software. |\n\n[tutorials]: https://www.sktime.net/en/latest/tutorials.html\n[binder notebooks]: https://mybinder.org/v2/gh/sktime/sktime/main?filepath=examples\n[user guides]: https://www.sktime.net/en/latest/user_guide.html\n[video tutorial]: https://github.com/sktime/sktime-tutorial-pydata-global-2021\n[api reference]: https://www.sktime.net/en/latest/api_reference.html\n[changelog]: https://www.sktime.net/en/latest/changelog.html\n[roadmap]: https://www.sktime.net/en/latest/roadmap.html\n[related software]: https://www.sktime.net/en/latest/related_software.html\n\n## :speech_balloon: where to ask questions\n\nquestions and feedback are extremely welcome! we strongly believe in the value of sharing help publicly, as it allows a wider audience to benefit from it.\n\n| type                            | platforms                               |\n| ------------------------------- | --------------------------------------- |\n| :bug: **bug reports**              | [github issue tracker]                  |\n| :sparkles: **feature requests & ideas** | [github issue tracker]                       |\n| :woman_technologist: **usage questions**          | [github discussions] \u00b7 [stack overflow] |\n| :speech_balloon: **general discussion**        | [github discussions] |\n| :factory: **contribution & development** | `dev-chat` channel \u00b7 [discord] |\n| :globe_with_meridians: **community collaboration session** | [discord] - fridays 3 pm utc, dev/meet-ups channel |\n\n[github issue tracker]: https://github.com/sktime/sktime/issues\n[github discussions]: https://github.com/sktime/sktime/discussions\n[stack overflow]: https://stackoverflow.com/questions/tagged/sktime\n[discord]: https://discord.com/invite/54aczafsn7\n\n## :dizzy: features\nour objective is to enhance the interoperability and usability of the time series analysis ecosystem in its entirety. sktime provides a __unified interface for distinct but related time series learning tasks__. it features [__dedicated time series algorithms__](https://www.sktime.net/en/stable/estimator_overview.html) and __tools for composite model building__  such as pipelining, ensembling, tuning, and reduction, empowering users to apply an algorithm designed for one task to another.\n\nsktime also provides **interfaces to related libraries**, for example [scikit-learn], [statsmodels], [tsfresh], [pyod], and [fbprophet], among others.\n\nfor **deep learning**, see our companion package: [sktime-dl](https://github.com/sktime/sktime-dl).\n\n[statsmodels]: https://www.statsmodels.org/stable/index.html\n[tsfresh]: https://tsfresh.readthedocs.io/en/latest/\n[pyod]: https://pyod.readthedocs.io/en/latest/\n[fbprophet]: https://facebook.github.io/prophet/\n\n| module | status | links |\n|---|---|---|\n| **[forecasting]** | stable | [tutorial](https://www.sktime.net/en/latest/examples/01_forecasting.html) \u00b7 [api reference](https://www.sktime.net/en/latest/api_reference/forecasting.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/forecasting.py)  |\n| **[time series classification]** | stable | [tutorial](https://github.com/sktime/sktime/blob/main/examples/02_classification.ipynb) \u00b7 [api reference](https://www.sktime.net/en/latest/api_reference/classification.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/classification.py) |\n| **[time series regression]** | stable | [api reference](https://www.sktime.net/en/latest/api_reference/regression.html) |\n| **[transformations]** | stable | [tutorial](https://github.com/sktime/sktime/blob/main/examples/03_transformers.ipynb) \u00b7 [api reference](https://www.sktime.net/en/latest/api_reference/transformations.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/transformer.py)  |\n| **[parameter fitting]** | maturing | [api reference](https://www.sktime.net/en/latest/api_reference/param_est.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/transformer.py)  |\n| **[time series clustering]** | maturing | [api reference](https://www.sktime.net/en/latest/api_reference/clustering.html) \u00b7  [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/clustering.py) |\n| **[time series distances/kernels]** | maturing | [tutorial](https://github.com/sktime/sktime/blob/main/examples/03_transformers.ipynb) \u00b7 [api reference](https://www.sktime.net/en/latest/api_reference/dists_kernels.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/dist_kern_panel.py) |\n| **[time series alignment]** | experimental | [api reference](https://www.sktime.net/en/latest/api_reference/alignment.html) \u00b7 [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/alignment.py) |\n| **[annotation]** | experimental | [extension template](https://github.com/sktime/sktime/blob/main/extension_templates/annotation.py) |\n| **[distributions and simulation]** | experimental |  |\n\n[forecasting]: https://github.com/sktime/sktime/tree/main/sktime/forecasting\n[time series classification]: https://github.com/sktime/sktime/tree/main/sktime/classification\n[time series regression]: https://github.com/sktime/sktime/tree/main/sktime/regression\n[time series clustering]: https://github.com/sktime/sktime/tree/main/sktime/clustering\n[annotation]: https://github.com/sktime/sktime/tree/main/sktime/annotation\n[time series distances/kernels]: https://github.com/sktime/sktime/tree/main/sktime/dists_kernels\n[time series alignment]: https://github.com/sktime/sktime/tree/main/sktime/alignment\n[transformations]: https://github.com/sktime/sktime/tree/main/sktime/transformations\n[distributions and simulation]: https://github.com/sktime/sktime/tree/main/sktime/proba\n[parameter fitting]: https://github.com/sktime/sktime/tree/main/sktime/param_est\n\n\n## :hourglass_flowing_sand: install sktime\nfor troubleshooting and detailed installation instructions, see the [documentation](https://www.sktime.net/en/latest/installation.html).\n\n- **operating system**: macos x \u00b7 linux \u00b7 windows 8.1 or higher\n- **python version**: python 3.8, 3.9, 3.10, 3.11, and 3.12 (only 64-bit)\n- **package managers**: [pip] \u00b7 [conda] (via `conda-forge`)\n\n[pip]: https://pip.pypa.io/en/stable/\n[conda]: https://docs.conda.io/en/latest/\n\n### pip\nusing pip, sktime releases are available as source packages and binary wheels.\navailable wheels are listed [here](https://pypi.org/simple/sktime/).\n\n```bash\npip install sktime\n```\n\nor, with maximum dependencies,\n\n```bash\npip install sktime[all_extras]\n```\n\nfor curated sets of soft dependencies for specific learning tasks:\n\n```bash\npip install sktime[forecasting]  # for selected forecasting dependencies\npip install sktime[forecasting,transformations]  # forecasters and transformers\n```\n\nor similar. valid sets are:\n\n* `forecasting`\n* `transformations`\n* `classification`\n* `regression`\n* `clustering`\n* `param_est`\n* `networks`\n* `annotation`\n* `alignment`\n\ncave: in general, not all soft dependencies for a learning task are installed,\nonly a curated selection.\n\n### conda\nyou can also install sktime from `conda` via the `conda-forge` channel.\nthe feedstock including the build recipe and configuration is maintained\nin [this conda-forge repository](https://github.com/conda-forge/sktime-feedstock).\n\n```bash\nconda install -c conda-forge sktime\n```\n\nor, with maximum dependencies,\n\n```bash\nconda install -c conda-forge sktime-all-extras\n```\n\n(as `conda` does not support dependency sets,\nflexible choice of soft dependencies is unavailable via `conda`)\n\n## :zap: quickstart\n\n### forecasting\n\n``` python\nfrom sktime.datasets import load_airline\nfrom sktime.forecasting.base import forecastinghorizon\nfrom sktime.forecasting.model_selection import temporal_train_test_split\nfrom sktime.forecasting.theta import thetaforecaster\nfrom sktime.performance_metrics.forecasting import mean_absolute_percentage_error\n\ny = load_airline()\ny_train, y_test = temporal_train_test_split(y)\nfh = forecastinghorizon(y_test.index, is_relative=false)\nforecaster = thetaforecaster(sp=12)  # monthly seasonal periodicity\nforecaster.fit(y_train)\ny_pred = forecaster.predict(fh)\nmean_absolute_percentage_error(y_test, y_pred)\n>>> 0.08661467738190656\n```\n\n### time series classification\n\n```python\nfrom sktime.classification.interval_based import timeseriesforestclassifier\nfrom sktime.datasets import load_arrow_head\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nx, y = load_arrow_head()\nx_train, x_test, y_train, y_test = train_test_split(x, y)\nclassifier = timeseriesforestclassifier()\nclassifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)\naccuracy_score(y_test, y_pred)\n>>> 0.8679245283018868\n```\n\n## :wave: how to get involved\n\nthere are many ways to join the sktime community. we follow the [all-contributors](https://github.com/all-contributors/all-contributors) specification: all kinds of contributions are welcome - not just code.\n\n| documentation              |                                                                |\n| -------------------------- | --------------------------------------------------------------        |\n| :gift_heart: **[contribute]**        | how to contribute to sktime.          |\n| :school_satchel:  **[mentoring]** | new to open source? apply to our mentoring program! |\n| :date: **[meetings]** | join our discussions, tutorials, workshops, and sprints! |\n| :woman_mechanic:  **[developer guides]**      | how to further develop sktime's code base.                             |\n| :construction: **[enhancement proposals]** | design a new feature for sktime. |\n| :medal_sports: **[contributors]** | a list of all contributors. |\n| :raising_hand: **[roles]** | an overview of our core community roles. |\n| :money_with_wings: **[donate]** | fund sktime maintenance and development. |\n| :classical_building: **[governance]** | how and by whom decisions are made in sktime's community.   |\n\n[contribute]: https://www.sktime.net/en/latest/get_involved/contributing.html\n[donate]: https://opencollective.com/sktime\n[extension templates]: https://github.com/sktime/sktime/tree/main/extension_templates\n[developer guides]: https://www.sktime.net/en/latest/developer_guide.html\n[contributors]: https://github.com/sktime/sktime/blob/main/contributors.md\n[governance]: https://www.sktime.net/en/latest/get_involved/governance.html\n[mentoring]: https://github.com/sktime/mentoring\n[meetings]: https://calendar.google.com/calendar/u/0/embed?src=sktime.toolbox@gmail.com&ctz=utc\n[enhancement proposals]: https://github.com/sktime/enhancement-proposals\n[roles]: https://www.sktime.net/en/latest/about/team.html\n\n## :bulb: project vision\n\n* **by the community, for the community** -- developed by a friendly and collaborative community.\n* the **right tool for the right task** -- helping users to diagnose their learning problem and suitable scientific model types.\n* **embedded in state-of-art ecosystems** and **provider of interoperable interfaces** -- interoperable with [scikit-learn], [statsmodels], [tsfresh], and other community favorites.\n* **rich model composition and reduction functionality** -- build tuning and feature extraction pipelines, solve forecasting tasks with [scikit-learn] regressors.\n* **clean, descriptive specification syntax** -- based on modern object-oriented design principles for data science.\n* **fair model assessment and benchmarking** -- build your models, inspect your models, check your models, and avoid pitfalls.\n* **easily extensible** -- easy extension templates to add your own algorithms compatible with sktime's api.\n",
  "docs_url": null,
  "keywords": "data-mining,data-science,forecasting,machine-learning,scikit-learn,time-series,time-series-analysis,time-series-classification,time-series-regression",
  "license": "bsd 3-clause license  copyright (c) 2019 - present, the sktime developers.  all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  * redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  * neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "sktime",
  "package_url": "https://pypi.org/project/sktime/",
  "project_url": "https://pypi.org/project/sktime/",
  "project_urls": {
    "API Reference": "https://www.sktime.net/en/stable/api_reference.html",
    "Documentation": "https://www.sktime.net",
    "Download": "https://pypi.org/project/sktime/#files",
    "Homepage": "https://www.sktime.net",
    "Release Notes": "https://www.sktime.net/en/stable/changelog.html",
    "Repository": "https://github.com/sktime/sktime"
  },
  "release_url": "https://pypi.org/project/sktime/0.24.1/",
  "requires_dist": [
    "numpy <1.27,>=1.21",
    "packaging",
    "pandas <2.2.0,>=1.1",
    "scikit-base <0.7.0",
    "scikit-learn <1.4.0,>=0.24",
    "scipy <2.0.0,>=1.2",
    "dtw-python <1.4,>=1.3 ; extra == 'alignment'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'alignment'",
    "arch <6.3.0,>=5.6 ; extra == 'all_extras'",
    "cloudpickle ; extra == 'all_extras'",
    "dash !=2.9.0 ; extra == 'all_extras'",
    "dask ; extra == 'all_extras'",
    "dtw-python ; extra == 'all_extras'",
    "gluonts >=0.9 ; extra == 'all_extras'",
    "holidays ; extra == 'all_extras'",
    "kotsu >=0.3.1 ; extra == 'all_extras'",
    "matplotlib >=3.3.2 ; extra == 'all_extras'",
    "mne ; extra == 'all_extras'",
    "pycatch22 <0.4.4 ; extra == 'all_extras'",
    "pykalman-bardo <0.10,>=0.9.7 ; extra == 'all_extras'",
    "scikit-optimize ; extra == 'all_extras'",
    "scikit-posthocs >=0.6.5 ; extra == 'all_extras'",
    "seaborn >=0.11 ; extra == 'all_extras'",
    "seasonal ; extra == 'all_extras'",
    "skpro <2.2.0,>=2 ; extra == 'all_extras'",
    "statsmodels >=0.12.1 ; extra == 'all_extras'",
    "xarray ; extra == 'all_extras'",
    "esig ==0.9.7 ; (python_version < \"3.10\") and extra == 'all_extras'",
    "filterpy >=1.4.5 ; (python_version < \"3.11\") and extra == 'all_extras'",
    "hmmlearn >=0.2.7 ; (python_version < \"3.11\") and extra == 'all_extras'",
    "keras-self-attention ; (python_version < \"3.11\") and extra == 'all_extras'",
    "pyod >=0.8 ; (python_version < \"3.11\") and extra == 'all_extras'",
    "stumpy >=1.5.1 ; (python_version < \"3.11\") and extra == 'all_extras'",
    "tslearn <0.6.0,>=0.5.2 ; (python_version < \"3.11\") and extra == 'all_extras'",
    "h5py ; (python_version < \"3.12\") and extra == 'all_extras'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "pmdarima !=1.8.1,<3.0.0,>=1.8 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "prophet >=1.1 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "statsforecast <1.7.0,>=0.5.2 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "tbats >=1.1 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "tensorflow ; (python_version < \"3.12\") and extra == 'all_extras'",
    "tsfresh >=0.17 ; (python_version < \"3.12\") and extra == 'all_extras'",
    "arch <6.3.0,>=5.6 ; extra == 'all_extras_pandas2'",
    "cloudpickle ; extra == 'all_extras_pandas2'",
    "dash !=2.9.0 ; extra == 'all_extras_pandas2'",
    "dask <2023.7.1 ; extra == 'all_extras_pandas2'",
    "dtw-python ; extra == 'all_extras_pandas2'",
    "gluonts >=0.9 ; extra == 'all_extras_pandas2'",
    "holidays ; extra == 'all_extras_pandas2'",
    "kotsu >=0.3.1 ; extra == 'all_extras_pandas2'",
    "matplotlib >=3.3.2 ; extra == 'all_extras_pandas2'",
    "mne ; extra == 'all_extras_pandas2'",
    "pycatch22 <0.4.4 ; extra == 'all_extras_pandas2'",
    "pykalman-bardo <0.10,>=0.9.7 ; extra == 'all_extras_pandas2'",
    "scikit-posthocs >=0.6.5 ; extra == 'all_extras_pandas2'",
    "seaborn >=0.11 ; extra == 'all_extras_pandas2'",
    "seasonal ; extra == 'all_extras_pandas2'",
    "skpro <2.2.0,>=2 ; extra == 'all_extras_pandas2'",
    "statsmodels >=0.12.1 ; extra == 'all_extras_pandas2'",
    "xarray ; extra == 'all_extras_pandas2'",
    "esig ==0.9.7 ; (python_version < \"3.10\") and extra == 'all_extras_pandas2'",
    "filterpy >=1.4.5 ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "hmmlearn >=0.2.7 ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "keras-self-attention ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "pyod >=0.8 ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "stumpy >=1.5.1 ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "tslearn <0.6.0,>=0.5.2 ; (python_version < \"3.11\") and extra == 'all_extras_pandas2'",
    "h5py ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "pmdarima !=1.8.1,<3.0.0,>=1.8 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "prophet >=1.1 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "statsforecast <1.7.0,>=0.5.2 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "tbats >=1.1 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "tensorflow ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "tsfresh >=0.17 ; (python_version < \"3.12\") and extra == 'all_extras_pandas2'",
    "hmmlearn <0.4,>=0.2.7 ; extra == 'annotation'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'annotation'",
    "pyod <1.2,>=0.8 ; (python_version < \"3.12\") and extra == 'annotation'",
    "jupyter ; extra == 'binder'",
    "pandas <2.0.0 ; extra == 'binder'",
    "esig <0.10,>=0.9.7 ; (python_version < \"3.11\") and extra == 'classification'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'classification'",
    "tensorflow <=2.14,>=2 ; (python_version < \"3.12\") and extra == 'classification'",
    "tsfresh <0.21,>=0.17 ; (python_version < \"3.12\") and extra == 'classification'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'clustering'",
    "tslearn <0.6.3,>=0.5.2 ; (python_version < \"3.12\") and extra == 'clustering'",
    "mrseql ; extra == 'cython_extras'",
    "numba <0.59 ; extra == 'cython_extras'",
    "mrsqm ; (python_version < \"3.11\") and extra == 'cython_extras'",
    "backoff ; extra == 'dev'",
    "httpx ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-randomly ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "tensorflow <=2.14,>=2 ; (python_version < \"3.12\") and extra == 'dl'",
    "torch ; (python_version < \"3.12\") and extra == 'dl'",
    "jupyter ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "nbsphinx >=0.8.6 ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "pydata-sphinx-theme ; extra == 'docs'",
    "Sphinx !=7.2.0,<8.0.0 ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "sphinx-design <0.6.0 ; extra == 'docs'",
    "sphinx-gallery <0.15.0 ; extra == 'docs'",
    "sphinx-issues <4.0.0 ; extra == 'docs'",
    "tabulate ; extra == 'docs'",
    "arch <6.3,>=5.6 ; extra == 'forecasting'",
    "prophet <1.2,>=1.1 ; extra == 'forecasting'",
    "skpro <2.2,>=2 ; extra == 'forecasting'",
    "statsmodels <0.15,>=0.12.1 ; extra == 'forecasting'",
    "pmdarima !=1.8.1,<2.1,>=1.8 ; (python_version < \"3.12\") and extra == 'forecasting'",
    "statsforecast <1.7,>=0.5.2 ; (python_version < \"3.12\") and extra == 'forecasting'",
    "tbats <1.2,>=1.1 ; (python_version < \"3.12\") and extra == 'forecasting'",
    "mlflow ; extra == 'mlflow'",
    "boto3 ; extra == 'mlflow_tests'",
    "botocore ; extra == 'mlflow_tests'",
    "mlflow ; extra == 'mlflow_tests'",
    "moto ; extra == 'mlflow_tests'",
    "keras-self-attention <0.52,>=0.51 ; extra == 'networks'",
    "tensorflow <=2.14,>=2 ; (python_version < \"3.12\") and extra == 'networks'",
    "pandas <2.0.0 ; extra == 'pandas1'",
    "seasonal <0.4,>=0.3.1 ; extra == 'param_est'",
    "statsmodels <0.15,>=0.12.1 ; extra == 'param_est'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'regression'",
    "tensorflow <=2.14,>=2 ; (python_version < \"3.12\") and extra == 'regression'",
    "pytest <7.5,>=7.4 ; extra == 'tests'",
    "pytest-cov <4.2,>=4.1 ; extra == 'tests'",
    "pytest-randomly <3.16,>=3.15 ; extra == 'tests'",
    "pytest-timeout <2.3,>=2.1 ; extra == 'tests'",
    "pytest-xdist <3.4,>=3.3 ; extra == 'tests'",
    "filterpy <1.5,>=1.4.5 ; extra == 'transformations'",
    "holidays <0.36,>=0.29 ; extra == 'transformations'",
    "mne <1.6,>=1.5 ; extra == 'transformations'",
    "pycatch22 <0.4.4,>=0.4 ; extra == 'transformations'",
    "pykalman-bardo <0.10,>=0.9.7 ; extra == 'transformations'",
    "statsmodels <0.15,>=0.12.1 ; extra == 'transformations'",
    "esig <0.10,>=0.9.7 ; (python_version < \"3.11\") and extra == 'transformations'",
    "numba <0.59,>=0.53 ; (python_version < \"3.12\") and extra == 'transformations'",
    "stumpy <1.13,>=1.5.1 ; (python_version < \"3.12\") and extra == 'transformations'",
    "tsfresh <0.21,>=0.17 ; (python_version < \"3.12\") and extra == 'transformations'"
  ],
  "requires_python": "<3.13,>=3.8",
  "summary": "a unified framework for machine learning with time series",
  "version": "0.24.1",
  "releases": [],
  "developers": [
    "sktime.toolbox@gmail.com"
  ],
  "kwds": "timeseriesforestclassifier sklearn sktime forecaster forecasting",
  "license_kwds": "copyright liability liable negligence license",
  "libtype": "pypi",
  "id": "pypi_sktime",
  "homepage": "",
  "release_count": 57,
  "dependency_ids": [
    "pypi_arch",
    "pypi_backoff",
    "pypi_boto3",
    "pypi_botocore",
    "pypi_cloudpickle",
    "pypi_dash",
    "pypi_dask",
    "pypi_dtw_python",
    "pypi_esig",
    "pypi_filterpy",
    "pypi_gluonts",
    "pypi_h5py",
    "pypi_hmmlearn",
    "pypi_holidays",
    "pypi_httpx",
    "pypi_jupyter",
    "pypi_keras_self_attention",
    "pypi_kotsu",
    "pypi_matplotlib",
    "pypi_mlflow",
    "pypi_mne",
    "pypi_moto",
    "pypi_mrseql",
    "pypi_mrsqm",
    "pypi_myst_parser",
    "pypi_nbsphinx",
    "pypi_numba",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pmdarima",
    "pypi_pre_commit",
    "pypi_prophet",
    "pypi_pycatch22",
    "pypi_pydata_sphinx_theme",
    "pypi_pykalman_bardo",
    "pypi_pyod",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_randomly",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_scikit_base",
    "pypi_scikit_learn",
    "pypi_scikit_optimize",
    "pypi_scikit_posthocs",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_seasonal",
    "pypi_skpro",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_design",
    "pypi_sphinx_gallery",
    "pypi_sphinx_issues",
    "pypi_statsforecast",
    "pypi_statsmodels",
    "pypi_stumpy",
    "pypi_tabulate",
    "pypi_tbats",
    "pypi_tensorflow",
    "pypi_torch",
    "pypi_tsfresh",
    "pypi_tslearn",
    "pypi_wheel",
    "pypi_xarray"
  ]
}
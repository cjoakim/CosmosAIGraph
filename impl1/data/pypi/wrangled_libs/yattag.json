{
  "classifiers": [
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://travis-ci.org/leforestier/yattag.svg\n    :target: https://travis-ci.org/leforestier/yattag\n\nwhy use a template engine when you can generate html or xml documents with python in a very readable way?\n\n( full tutorial on yattag.org_ )\n\nbasic example\n-------------\n\nnested html tags, no need to close tags.\n\n.. code:: python\n\n    from yattag import doc\n\n    doc, tag, text = doc().tagtext()\n\n    with tag('html'):\n        with tag('body', id = 'hello'):\n            with tag('h1'):\n                text('hello world!')\n\n    print(doc.getvalue())\n\n\nhtml form rendering\n-------------------\n\nyattag can fill your html forms with default values and error messages.\npass a ``defaults`` dictionary of default values, and an ``errors`` dictionary of error messages to the ``doc`` constructor.\nthen, use the special ``input``, ``textarea``, ``select``, ``option`` methods when generating your documents.\n\n\nexample with default values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from yattag import doc\n\n    doc, tag, text = doc(\n        defaults = {'ingredient': ['chocolate', 'coffee']}\n    ).tagtext()\n\n    with tag('form', action = \"\"):\n        with tag('label'):\n            text(\"select one or more ingredients\")\n        with doc.select(name = 'ingredient', multiple = \"multiple\"):\n            for value, description in (\n                (\"chocolate\", \"dark chocolate\"),\n                (\"almonds\", \"roasted almonds\"),\n                (\"honey\", \"acacia honey\"),\n                (\"coffee\", \"ethiopian coffee\")\n            ):\n                with doc.option(value = value):\n                    text(description)\n        doc.stag('input', type = \"submit\", value = \"validate\")\n\n    print(doc.getvalue())\n\nexample with default values and errors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from yattag import doc\n\n    doc, tag, text = doc(\n        defaults = {\n            'title': 'untitled',\n            'contact_message': 'you just won the lottery!'\n        },\n        errors = {\n            'contact_message': 'your message looks like spam.'\n        }\n    ).tagtext()\n\n    with tag('h1'):\n        text('contact form')\n    with tag('form', action = \"\"):\n        doc.input(name = 'title', type = 'text')\n        with doc.textarea(name = 'contact_message'):\n            pass\n        doc.stag('input', type = 'submit', value = 'send my message')\n\n    print(doc.getvalue())\n\nfull tutorial on yattag.org_\n\ngithub repo: https://github.com/leforestier/yattag\n\n.. _yattag.org: https://www.yattag.org\n",
  "docs_url": null,
  "keywords": "html,template,templating,xml,document,form,rendering",
  "license": "",
  "name": "yattag",
  "package_url": "https://pypi.org/project/yattag/",
  "project_url": "https://pypi.org/project/yattag/",
  "project_urls": {
    "Homepage": "https://www.yattag.org"
  },
  "release_url": "https://pypi.org/project/yattag/1.15.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "generate html or xml in a pythonic way. pure python alternative to web template engines.can fill html forms with default values and error messages.",
  "version": "1.15.2",
  "releases": [],
  "developers": [
    "benjamin@leforestier.org",
    "benjamin_le_forestier"
  ],
  "kwds": "yattag _yattag html templating template",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_yattag",
  "homepage": "https://www.yattag.org",
  "release_count": 48,
  "dependency_ids": []
}
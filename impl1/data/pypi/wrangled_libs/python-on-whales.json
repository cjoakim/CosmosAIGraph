{
  "classifiers": [],
  "description": "<img src=\"https://raw.githubusercontent.com/gabrieldemarmiesse/python-on-whales/master/img/full.png\" alt=\"logo\" class=\"responsive\" style=\"width: 80%; height: auto;\">\n\n------------------------------------------------------------------------\n\n[![run tests](https://github.com/gabrieldemarmiesse/python-on-whales/actions/workflows/python-package.yml/badge.svg?branch=master)](https://github.com/gabrieldemarmiesse/python-on-whales/actions/workflows/python-package.yml)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336)](https://pycqa.github.io/isort/)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/gabrieldemarmiesse/python-on-whales/blob/master/license)\n[![downloads](https://pepy.tech/badge/python-on-whales/month)](https://pepy.tech/project/python-on-whales)\n\n\n------------------------------------------------------------------------\na docker client for python, designed to be fun and intuitive!\n\nworks on linux, macos and windows, for python 3.8 and above. \n\n* [documentation](https://gabrieldemarmiesse.github.io/python-on-whales/)\n* [github repository](https://github.com/gabrieldemarmiesse/python-on-whales)\n\n------------------------------------------------------------------------\n\n## how to install?\n\n```bash\npip install python-on-whales\n```\n\n## some cool examples\n\nstart by doing\n```python\nfrom python_on_whales import docker\n```\nand then:\n\n* `docker run hello-world` -> [`docker.run(\"hello-world\")`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/container/#run)\n* `docker pull ubuntu` -> [`docker.pull(\"ubuntu\")`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/image/#pull)\n* `docker build ./` -> [`docker.build(\"./\")`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/buildx/#build)\n* `docker compose up my_service` -> [`docker.compose.up([\"my_service\"])`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/compose/#up)\n* `docker image ls` -> [`docker.image.list()`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/image/#list)\n* `docker ps` -> [`docker.ps()`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/container/#list)\n* `docker cp` -> [`docker.copy()`](https://gabrieldemarmiesse.github.io/python-on-whales/sub-commands/container/#copy)\n\nyou get the idea \ud83d\ude42 it's the same as the cli we all know and love.\n\n```python\n>>> from python_on_whales import docker\n\n>>> output = docker.run(\"hello-world\")\n>>> print(output)\n\nhello from docker!\nthis message shows that your installation appears to be working correctly.\n\n...\n```\n\n\n```python\n>>> from python_on_whales import docker\n>>> print(docker.run(\"nvidia/cuda:11.0-base\", [\"nvidia-smi\"], gpus=\"all\"))\n+-----------------------------------------------------------------------------+\n| nvidia-smi 450.51.06    driver version: 450.51.06    cuda version: 11.0     |\n|-------------------------------+----------------------+----------------------+\n| gpu  name        persistence-m| bus-id        disp.a | volatile uncorr. ecc |\n| fan  temp  perf  pwr:usage/cap|         memory-usage | gpu-util  compute m. |\n|                               |                      |               mig m. |\n|===============================+======================+======================|\n|   0  tesla t4            on   | 00000000:00:1e.0 off |                    0 |\n| n/a   34c    p8     9w /  70w |      0mib / 15109mib |      0%      default |\n|                               |                      |                  n/a |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| processes:                                                                  |\n|  gpu   gi   ci        pid   type   process name                  gpu memory |\n|        id   id                                                   usage      |\n|=============================================================================|\n|  no running processes found                                                 |\n+-----------------------------------------------------------------------------+\n```\n\n```python\n>>> from python_on_whales import docker\n>>> my_docker_image = docker.pull(\"ubuntu:20.04\")\n20.04: pulling from library/ubuntu\ne6ca3592b144: downloading [=============>                                     ]  7.965mb/28.56mb\n534a5505201d: download complete\n990916bd23bb: download complete\n\n>>> print(my_docker_image.repo_tags)\n['ubuntu:20.04']\n\n>>> docker.image.list()\n[python_on_whales.image(id='sha256:1a437e363abfa', tags=['ubuntu:20.04'])]\n\n>>> my_docker_image.remove()\n```\n\n```python\n>>> from python_on_whales import docker\n>>> my_image = docker.build(\".\", tags=\"some_name\")  # uses buildx/buildkit by default\n[+] building 1.6s (17/17) finished\n => [internal] load build definition from dockerfile                                                            0.0s\n => => transferring dockerfile: 32b                                                                             0.0s\n => [internal] load .dockerignore                                                                               0.0s\n => => transferring context: 2b                                                                                 0.0s\n => [internal] load metadata for docker.io/library/python:3.6                                                   1.4s\n => [python_dependencies 1/5] from docker.io/library/python:3.6@sha256:29328c59adb9ee6acc7bea8eb86d0cb14033c85  0.0s\n => [internal] load build context                                                                               0.1s\n => => transferring context: 72.86kb                                                                            0.0s\n => cached [python_dependencies 2/5] run pip install typeguard pydantic requests tqdm                           0.0s\n => cached [python_dependencies 3/5] copy tests/test-requirements.txt /tmp/                                     0.0s\n => cached [python_dependencies 4/5] copy requirements.txt /tmp/                                                0.0s\n => cached [python_dependencies 5/5] run pip install -r /tmp/test-requirements.txt -r /tmp/requirements.txt     0.0s\n => cached [tests_ubuntu_install_without_buildx 1/7] run apt-get update &&     apt-get install -y       apt-tr  0.0s\n => cached [tests_ubuntu_install_without_buildx 2/7] run curl -fssl https://download.docker.com/linux/ubuntu/g  0.0s\n => cached [tests_ubuntu_install_without_buildx 3/7] run add-apt-repository    \"deb [arch=amd64] https://downl  0.0s\n => cached [tests_ubuntu_install_without_buildx 4/7] run  apt-get update &&      apt-get install -y docker-ce-  0.0s\n => cached [tests_ubuntu_install_without_buildx 5/7] workdir /python-on-whales                                  0.0s\n => cached [tests_ubuntu_install_without_buildx 6/7] copy . .                                                   0.0s\n => cached [tests_ubuntu_install_without_buildx 7/7] run pip install -e .                                       0.0s\n => exporting to image                                                                                          0.1s\n => => exporting layers                                                                                         0.0s\n => => writing image sha256:e1c2382d515b097ebdac4ed189012ca3b34ab6be65ba0c650421ebcac8b70a4d                    0.0s\n => => naming to docker.io/library/some_image_name\n```\n\n## some more `docker.run()` advanced examples with postgres\n\n```bash\ndocker run --name some-postgres -e postgres_password=mysecretpassword -d postgres\n```\nbecomes\n```python\nfrom python_on_whales import docker\n\ndocker.run(\n    \"postgres:9.6\",\n    name=\"some-postgres\",\n    envs={\"postgres_password\": \"mysecretpassword\"},\n    detach=true,\n)\nprint(docker.ps())\n# [python_on_whales.container(id='f5fb939c409d', name='some-postgres')]\n```\n\n-----\n\n```bash\ndocker run -it --rm --network some-network postgres psql -h some-postgres -u postgres\n```\nbecomes\n```python\nfrom python_on_whales import docker\n\n# since it's interactive, you'll be dropped into the psql shell. the python code\n# will continue only after you exit the shell.\ndocker.run(\n    \"postgres:9.6\",\n    [\"psql\", \"-h\", \"some-postgres\", \"-u\", \"postgres\"],\n    networks=[\"some-network\"],\n    interactive=true,\n    tty=true,\n    remove=true,\n)\n```\n----------\n\n\n```bash\ndocker run -d --name some-postgres -e postgres_password=mysecretpassword -e pgdata=/var/lib/postgresql/data/pgdata -v /custom/mount:/var/lib/postgresql/data -v myvolume:/tmp/myvolume postgres -c shared_buffers=256mb -c max_connections=200\n```\nbecomes\n```python\nfrom python_on_whales import docker\n\ndocker.run(\n    \"postgres:9.6\",\n    [\"-c\", \"shared_buffers=256mb\", \"-c\", \"max_connections=200\"],\n    name=\"some-postgres\",\n    envs={\"postgres_password\": \"mysecretpassword\", \"pgdata\": \"/var/lib/postgresql/data/pgdata\"},\n    volumes=[(\"/custom/mount\", \"/var/lib/postgresql/data\"), (\"myvolume\", \"/tmp/myvolume\")],\n    detach=true,\n)\n```\n\n\nany docker object can be used as a context manager to ensure it's removed even if an exception occurs:\n\n```python\nfrom python_on_whales import docker\n\nwith docker.volume.create(\"random_name\") as some_volume:\n    docker.run(\n        \"postgres:9.6\",\n        [\"-c\", \"shared_buffers=256mb\", \"-c\", \"max_connections=200\"],\n        name=\"some-postgres\",\n        envs={\"postgres_password\": \"mysecretpassword\", \"pgdata\": \"/var/lib/postgresql/data/pgdata\"},\n        volumes=[(some_volume, \"/var/lib/postgresql/data\"), (\"myvolume\", \"/tmp/myvolume\")],\n        detach=true,\n    )\n    # so some stuff here\n    \n# here we are out of the context manager, so the volume has been removed, even if there was an exception.\n```\n\n## main features\n\n* 1 to 1 mapping between the cli interface and the python api. no need to look in the docs\nwhat is the name of the function/argument you need.\n* support for the latest docker features: \n[docker buildx/buildkit](https://github.com/docker/buildx), \n`docker run --gpu=all ...`\n* support for docker stack, services and swarm (same api as the command line).\n* progress bars and progressive outputs when pulling, pushing, loading, building...\n* support for some other cli commands that are not in [docker-py](https://docker-py.readthedocs.io/en/stable/): \n`docker cp`, `docker run --cpus ...` and more.\n* nice ssh support for remote daemons.\n* docker object as python objects: container, images, volumes, services... and their\nattributes are updated in real-time!\n* each docker object can be used as a context manager. when getting out of the \ncontext, the docker object is removed automatically, even if an exception occurs.\n* a fully typed api (mypy and ide-friendly) compatible with `pathlib` and `os.path`\n* all docker objects and the docker client are safe to use with multithreading and multiprocessing.\n* display the commands called and the environment variables used by setting the environment variable `python_on_whales_debug=1`.\n\n## why another project? why not build on docker-py?\n\nin a sense this project is built on top of [docker-py](https://docker-py.readthedocs.io/en/stable/) \nbecause the implementation, the organisation and the api is inspired from the project, but the codebases \ncould not be the same.\n\ntwo major differences do not permit that:\n\n1) the api is quite different. the aim of python on whales is to provide a 1-to-1 \nmapping between the docker command line and python, so that users don't even have \nto open the docs to do write code.\n\n2) while [docker-py](https://docker-py.readthedocs.io/en/stable/) is a complete re-implementation of the docker client binary \n(written in go), python on whales sits on top of the docker client binary, which makes \nimplementing new features much easier and safer. for example, it's \n[unlikely that docker-py supports buildx/buildkit](https://github.com/docker/docker-py/issues/2230#issuecomment-454344497)\nanytime soon because rewriting a large go codebase in python is hard work.\n\n\n![](https://github.com/gabrieldemarmiesse/python-on-whales/blob/b09e4b560c7a1428f0d8afa103c2980b89ac467a/img/docker_clients.png)\n\n\n## should i use docker-py or python on whales?\n\nwell, it's written in each project's description!\n\n* docker-py: a python library for the docker engine api\n* python on whales: an awesome python wrapper for an awesome docker cli\n\n\nif you need to talk to the docker engine directly, you need to do low level operations,\nuse docker-py. some good example would be writing the code to control docker from an ide, \nor if the speed of docker calls is very important. \nif you don't want to depend on the docker cli binary (~50mb), use docker-py.\n\n\nif you wanted to call the docker command line from python, \ndo high level operations, use python on whales.\nfor example if you want to write your ci logic in python rather than in bash (a very good choice \ud83d\ude09).\nsome commands are only available in python on whales \ntoo: `docker.buildx.build(...)`, `docker.stack.deploy(...)`...\n\nuse the right tool for the right job \ud83d\ude42\n\n## alternatives to docker: podman, nerdctl...\n\nsupport for docker-compatible clients like [podman](https://podman.io/) and [nerdctl](https://github.com/containerd/nerdctl) was introduced in python-on-whales version 0.44.0.\n\nyou can use an arbitrary binary to execute docker commands by using the argument `client_call` of `python_on_whales.dockerclient`.\nhere is an example:\n```python\n>>> from python_on_whales import dockerclient\n\n>>> nerdctl = dockerclient(client_call=[\"nerdctl\"])\n\n>>> nerdctl.pull(\"python:3.9\")\ndocker.io/library/python:3.9:                                                     resolved       |++++++++++++++++++++++++++++++++++++++|\nindex-sha256:a83c0aa6471527636d7331c30704d0f88e0ab3331bbc460d4ae2e53bbae64dca:    done           |++++++++++++++++++++++++++++++++++++++|\nmanifest-sha256:8ccef93ff3c9e1bb9562d394526cdc6834033a0498073d41baa8b309f4fac20e: done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:f033692e2c5abe1e0ee34bcca759a3e4432b10b0031174b08d48bcc90d14d68b:   done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:9952b1051adaff513c99f86765361450af108b12b0073d0ba40255c4e419b481:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:c766e27afb21eddf9ab3e4349700ebe697c32a4c6ada6af4f08282277a291a28:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:1535e3c1181a81ea66d5bacb16564e4da2ba96304506598be39afe9c82b21c5c:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:6de7cb7bdc8f9b4c4d6539233fe87304aa1a6427c3238183265c9f02d831eddb:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:967757d5652770cfa81b6cc7577d65e06d336173da116d1fb5b2d349d5d44127:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:c357e2c68cb3bf1e98dcb3eb6ceb16837253db71535921d6993c594588bffe04:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:26787c68cf0c92a778db814d327e283fe1da4434a7fea1f0232dae8002e38f33:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:6aefca2dc61dcbcd268b8a9861e552f9cdb69e57242faec64ac120d2355a9c1a:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:32a180f5cf85702e7680719c40c39c07972b1176355df5a621de9eb87ad07ce2:    done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 35.9s                                                                    total:  333.5  (9.3 mib/s)\n\npython_on_whales.image(id='sha256:f033692e2c5ab', tags=['python:3.9'])\n```\n\nyou can do something similar with podman:\n\n```python\nfrom python_on_whales import dockerclient\n\npodman = dockerclient(client_call=[\"podman\"])\n\npodman.pull(\"hello-world\")\npodman.run(\"hello-world\")\nprint(podman.ps())\n...\n```\n\n## contributing\n\nany and all prs are welcome. please see [this documentation](./contributing.md).\n\n\n## what about the license?\n\nit's a mit license, so quite permissive.\n\nthe license can be found [in the git repository](https://github.com/gabrieldemarmiesse/python-on-whales/blob/master/license).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license  copyright (c) 2020 gabriel de marmiesse de lussan  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "python-on-whales",
  "package_url": "https://pypi.org/project/python-on-whales/",
  "project_url": "https://pypi.org/project/python-on-whales/",
  "project_urls": {
    "Bug Tracker": "https://github.com/gabrieldemarmiesse/python-on-whales/issues",
    "Documentation": "https://gabrieldemarmiesse.github.io/python-on-whales/",
    "Source": "https://github.com/gabrieldemarmiesse/python-on-whales"
  },
  "release_url": "https://pypi.org/project/python-on-whales/0.68.0/",
  "requires_dist": [
    "pydantic !=2.0.*,<3,>=1.9",
    "requests",
    "tqdm",
    "typer >=0.4.1",
    "typing-extensions",
    "pytest ; extra == 'test'"
  ],
  "requires_python": "<4,>=3.8",
  "summary": "a docker client for python, designed to be fun and intuitive!",
  "version": "0.68.0",
  "releases": [],
  "developers": [],
  "kwds": "badge py some_image_name python_on_whales logo",
  "license_kwds": "copyright license mit liable liability",
  "libtype": "pypi",
  "id": "pypi_python_on_whales",
  "homepage": "",
  "release_count": 87,
  "dependency_ids": [
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_requests",
    "pypi_tqdm",
    "pypi_typer",
    "pypi_typing_extensions"
  ]
}
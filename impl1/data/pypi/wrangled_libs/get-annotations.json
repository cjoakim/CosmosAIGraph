{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# get-annotations\n\na backport of python 3.10's [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations) function.\n\n## install\n\n```\npip3 install -u get-annotations\n```\n\n## usage\n\n```py\nfrom get_annotations import get_annotations\n\ndef foo(x: int) -> str: ...\n\nprint(get_annotations(foo))\n# {'x': <class 'int'>, 'return': <class 'str'>}\n```\n\n\nif your module uses `from __future__ import annotations`, you'll want to set `eval_str=true`, otherwise `get_annotations` will return strings:\n\n```py\nfrom __future__ import annotations\nimport typing as t\n\ndef bar(x: t.list[myobject]): ...\n\nclass myobject:\n  pass\n\nprint(get_annotations(bar))\n# {'x': 't.list[myobject]'}\n\nprint(get_annotations(bar, eval_str=true))\n# {'x': typing.list[__main__.myobject]}\n```\n\nnote that it does _not_ work with old-style forward ref annotations, such as `t.list[\"myobject\"]`:\n\n```py\n>>> from typing import list\n>>> def foo(a: int) -> list[\"myobject\"]: ...\n...\n>>> class myobject: ...\n...\n>>> print(get_annotations(foo, eval_str=true)) # note that 'myobject' is returned as a string!\n{'a': <class 'int'>, 'return': typing.list[forwardref('myobject')]}\n>>>\n>>> print(get_annotations(foo, eval_str=false)) # identical\n{'a': <class 'int'>, 'return': typing.list[forwardref('myobject')]}\n```\n\n\nif you _really_ don't want to use `from __future__ import annotations` for some reason, you can surround an entire type annotation in quotes to forward ref it:\n\n```py\n>>> def foo(a: int) -> \"list[myobject]\": ...\n...\n>>> print(get_annotations(foo, eval_str=true)) # this works now\n{'a': <class 'int'>, 'return': typing.list[__main__.myobject]}\n>>>\n>>> print(get_annotations(foo, eval_str=false)) # for comparison\n{'a': <class 'int'>, 'return': 'list[myobject]'}\n```\n\n\n## license\n\nmit\n\n## contact\n\na library by [shawn presser](https://www.shawwn.com). if you found it useful, please consider [joining my patreon](https://www.patreon.com/shawwn)!\n\nmy twitter dms are always open; you should [send me one](https://twitter.com/theshawwn)! it's the best way to reach me, and i'm always happy to hear from you.\n\n- twitter: [@theshawwn](https://twitter.com/theshawwn)\n- patreon: [https://www.patreon.com/shawwn](https://www.patreon.com/shawwn)\n- hn: [sillysaurusx](https://news.ycombinator.com/threads?id=sillysaurusx)\n- website: [shawwn.com](https://www.shawwn.com)\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "get-annotations",
  "package_url": "https://pypi.org/project/get-annotations/",
  "project_url": "https://pypi.org/project/get-annotations/",
  "project_urls": {
    "@theshawwn on Twitter": "https://www.twitter.com/theshawwn",
    "Homepage": "https://github.com/shawwn/get-annotations",
    "Shawn's Website": "https://www.shawwn.com",
    "Support me on Patreon": "https://www.patreon.com/shawwn",
    "sillysaurusx on Hacker News": "https://news.ycombinator.com/threads?id=sillysaurusx"
  },
  "release_url": "https://pypi.org/project/get-annotations/0.1.2/",
  "requires_dist": [],
  "requires_python": ">=3.6,<4.0",
  "summary": "a backport of python 3.10's inspect.get_annotation() function",
  "version": "0.1.2",
  "releases": [],
  "developers": [
    "shawn_presser"
  ],
  "kwds": "get_annotations get_annotation annotations annotation pip3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_get_annotations",
  "homepage": "https://github.com/shawwn/get-annotations",
  "release_count": 3,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9"
  ],
  "description": ".. |isrf| image:: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/flag_of_israel.svg/64px-flag_of_israel.svg.png\n   :alt: stand with the people of israel\n\n|isrf| stand with the people of israel\n\n.. image:: https://badgen.net/badge/stand%20with/ukraine/?color=0057b8&labelcolor=ffd700\n\n.. image:: https://github.com/zerwes/hiyapyco/actions/workflows/pylint.yml/badge.svg?branch=master\n    :target: https://github.com/zerwes/hiyapyco/actions/workflows/pylint.yml\n\n.. image:: https://github.com/zerwes/hiyapyco/actions/workflows/test.yml/badge.svg\n     :target: https://github.com/zerwes/hiyapyco/actions/workflows/test.yml\n\nhiyapyco\n========\n\nhiyapyco - a hierarchical yaml python config\n\ndescription\n-----------\n\na simple python lib allowing hierarchical overlay of config files in\nyaml syntax, offering different merge methods and variable interpolation\nbased on jinja2.\n\nthe goal was to have something similar to puppets hiera\n``merge_behavior: deeper`` for python.\n\nkey features\n------------\n\n-  hierarchical overlay of multiple yaml files\n-  multiple merge methods for hierarchical yaml files\n-  variable interpolation using jinja2\n\nrequirements\n------------\n\n-  pyyaml aka. python3-yaml\n-  jinja2 aka. python3-jinja2\n\npython version\n~~~~~~~~~~~~~~\n\nhiyapyco was designed to run on current major python versions\nwithout changes. tested versions:\n\n-  3.9\n-  3.11\n\nusage\n-----\n\na simple example:\n\n::\n\n    import hiyapyco\n    conf = hiyapyco.load('yamlfile1' [,'yamlfile2' [,'yamlfile3' [...]]] [,kwargs])\n    print(hiyapyco.dump(conf, default_flow_style=false))\n\nreal life example:\n~~~~~~~~~~~~~~~~~~\n\n``yaml1.yaml``:\n\n::\n\n    ---\n    first: first element\n    second: xxx\n    deep:\n        k1:\n            - 1\n            - 2\n\n``yaml2.yaml``:\n\n::\n\n    ---\n    second: again {{ first }}\n    deep:\n        k1:\n            - 4 \n            - 6\n        k2:\n            - 3\n            - 6\n\nload ...\n\n::\n\n    >>> import pprint\n    >>> import hiyapyco\n    >>> conf = hiyapyco.load('yaml1.yaml', 'yaml2.yaml', method=hiyapyco.method_merge, interpolate=true, failonmissingfiles=true)\n    >>> pprint.prettyprinter(indent=4).pprint(conf)\n    {   'deep': {   'k1': [1, 2, 4, 6], 'k2': [3, 6]},\n        'first': u'first element',\n        'ma': {   'ones': u'12', 'sum': u'22'},\n        'second': u'again first element'}\n\nreal life example using yaml documents as strings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    >>> import hiyapyco\n    >>> y1=\"\"\"\n    ... yaml: 1\n    ... y:\n    ...   y1: abc\n    ...   y2: xyz\n    ... \"\"\"\n    >>> y2=\"\"\"\n    ... yaml: 2\n    ... y:\n    ...   y2: def\n    ...   y3: xyz\n    ... \"\"\"\n    >>> conf = hiyapyco.load([y1, y2], method=hiyapyco.method_merge)\n    >>> print (conf)\n    ordereddict([('yaml', 2), ('y', ordereddict([('y1', 'abc'), ('y2', 'def'), ('y3', 'xyz')]))])\n    >>> hiyapyco.dump(conf, default_flow_style=true)\n    '{yaml: 2, y: {y1: abc, y2: def, y3: xyz}}\\n'\n\nargs\n~~~~\n\nall ``args`` are handled as *file names* or *yaml documents*. they may\nbe strings or list of strings.\n\nkwargs\n~~~~~~\n\n-  ``method``: bit (one of the listed below):\n\n   -  ``hiyapyco.method_simple``: replace values (except for lists a\n      simple merge is performed) (default method)\n   -  ``hiyapyco.method_merge``: perform a deep merge\n   -  ``hiyapyco.method_substitute``: perform a merge w/ lists substituted (unsupported)\n\n- ``mergelists``: boolean try to merge lists of dict (default: ``true``)\n\n-  ``interpolate``: boolean : perform interpolation after the merge\n   (default: ``false``)\n\n-  ``castinterpolated``: boolean : try to perform a *best possible\n   match* cast for interpolated strings (default: ``false``)\n\n-  ``usedefaultyamlloader``: boolean : force the usage of the default\n   *pyyaml* loader/dumper instead of *hiyapyco*\\ s implementation of a\n   ordereddict loader/dumper (see: ordered dict yaml loader / dumper\n   aka. odyldo) (default: ``false``)\n\n- ``encoding``: string : encoding used to read yaml files (default: ``utf-8``)\n\n-  ``failonmissingfiles``: boolean : fail if a supplied yaml file can\n   not be found (default: ``true``)\n\n-  ``loglevel``: int : loglevel for the hiyapyco logger; should be one\n   of the valid levels from ``logging``: 'warn', 'error', 'debug', 'i\n   nfo', 'warning', 'critical', 'notset' (default: default of\n   ``logging``)\n\n-  ``loglevelmissingfiles``: int : one of the valid levels from\n   ``logging``: 'warn', 'error', 'debug', 'info', 'warning', 'critical',\n   'notset' (default: ``logging.error`` if\n   ``failonmissingfiles = true``, else ``logging.warn``)\n\ninterpolation\n~~~~~~~~~~~~~\n\nfor using interpolation, i strongly recomend *not* to use the default\npyyaml loader, as it sorts the dict entrys alphabetically, a fact that\nmay break interpolation in some cases (see ``test/odict.yaml`` and\n``test/test_odict.py`` for an example). see ordered dict yaml loader /\ndumper aka. odyldo\n\ndefault\n^^^^^^^\n\nthe default jinja2.environment for the interpolation is\n\n::\n\n    hiyapyco.jinja2env = environment(undefined=undefined)\n\nthis means that undefined vars will be ignored and replaced with a empty\nstring.\n\nchange the jinja2 environment\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you like to change the jinja2 environment used for the interpolation,\nset ``hiyapyco.jinja2env`` **before** calling ``hiyapyco.load``!\n\nuse jinja2 debugundefined\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you like to keep the undefined var as string but raise no error, use\n\n::\n\n    from jinja2 import environment, undefined, debugundefined, strictundefined\n    hiyapyco.jinja2env = environment(undefined=debugundefined)\n\nuse jinja2 strictundefined\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nif you like to raise a error on undefined vars, use\n\n::\n\n    from jinja2 import environment, undefined, debugundefined, strictundefined\n    hiyapyco.jinja2env = environment(undefined=strictundefined)\n\nthis will raise a ``hiyapyco.hiyapycoimplementationexception`` wrapped\narround the ``jinja2.undefinederror`` pointing at the string causing the\nerror.\n\nmore informations\n^^^^^^^^^^^^^^^^^\n\nsee:\n`jinja2.environment <http://jinja.pocoo.org/docs/dev/api/#jinja2.environment>`_\n\ncast interpolated strings\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nas you must use interpolation as strings (pyyaml will weep if you try to\nstart a value with ``{{``), you can set ``castinterpolated`` to *true*\nin order to try to get a ``best match`` cast for the interpolated\nvalues. **the ``best match`` cast is currently only a q&d implementation\nand may not give you the expected results!**\n\nordered dict yaml loader / dumper aka. odyldo\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthis is a simple implementation of a pyyaml loader / dumper using\n``ordereddict`` from collections.\n**because chaos is fun but order matters on loading dicts from a yaml\nfile.**\n\n\ninstall\n-------\n\nfrom source\n~~~~~~~~~~~\n\ngithub\n^^^^^^\n\n`https://github.com/zerwes/hiyapyco <https://github.com/zerwes/hiyapyco>`_\n\n::\n\n    git clone https://github.com/zerwes/hiyapyco\n    cd hiyapyco\n    sudo python setup.py install\n\npypi\n^^^^\n\ndownload the latest or desired version of the source package from\n`https://pypi.python.org/pypi/hiyapyco <https://pypi.python.org/pypi/hiyapyco>`_.\nunpack the archive and install by executing:\n\n::\n\n    sudo python setup.py install\n\npip\n~~~\n\ninstall the latest wheel package using:\n\n::\n\n    pip install hiyapyco\n\ndebian packages\n~~~~~~~~~~~~~~~\n\ninstall the latest debian packages from http://repo.zero-sys.net/hiyapyco::\n\n    # create the sources list file:\n    sudo echo \"deb http://repo.zero-sys.net/hiyapyco/deb ./\" > /etc/apt/sources.list.d/hiyapyco.list\n\n    # import the key:\n    gpg --keyserver keys.gnupg.net --recv-key 77de7fb4\n    # or use:\n    wget https://repo.zero-sys.net/77de7fb4.asc -o - | gpg --import -\n\n    # apt tasks:\n    gpg --armor --export 77de7fb4 | sudo tee /etc/apt/trusted.gpg.d/hiyapyco.asc\n    sudo apt-get update\n    sudo apt-get install python3-hiyapyco\n\nrpm packages\n~~~~~~~~~~~~\n\nuse\n`http://repo.zero-sys.net/hiyapyco/rpm <http://repo.zero-sys.net/hiyapyco/rpm>`_\nas url for the yum repo and\n`https://repo.zero-sys.net/77de7fb4.asc <https://repo.zero-sys.net/77de7fb4.asc>`_\nas the url for the key.\n\narch linux\n~~~~~~~~~~\n\nan `aur package <https://aur.archlinux.org/packages/python-hiyapyco/>`_\nis available (provided by `pete crighton <https://github.com/petecrighton>`_ and not always up to date).\n\nlicense\n-------\n\ncopyright |copy| 2014 - 2023 klaus zerwes `zero-sys.net <https://zero-sys.net>`_\n\n.. |copy| unicode:: 0xa9 .. copyright sign\n\nthis package is free software.\nthis software is licensed under the terms of the gnu general public\nlicense version 3 or later, as published by the free software\nfoundation.\nsee\n`https://www.gnu.org/licenses/gpl.html <https://www.gnu.org/licenses/gpl.html>`_\n\nchangelog\n---------\n\n0.5.4\n~~~~~~\n\nfixed: #60 recursive calls to _substmerge\n\nimproved: testing and python support (3.11)\n\n0.5.1\n~~~~~~\n\nmerged: #52 by ryanfaircloth\n\n0.5.0\n~~~~~~\n\nmerged: #41 jinja2 dependency increased to include jinja2 3.x.x\n\nremoved: support for python 2\n\n0.4.16\n~~~~~~\n\nmerged: #37 alex-ber\n\n0.4.15\n~~~~~~\n\nmerged: #30 lesiak:issue-30-utf\n\nmerged: #28 lesiak:issue-28\n\n0.4.14\n~~~~~~\n\nfixed: issue #33\n\nmerged: issue #32\n\n0.4.13\n~~~~~~\n\nimplemented: [issue #27] support multiple yaml documents in one file\n\n0.4.12\n~~~~~~\n\nfixed: logging by regev golan\n\n0.4.11\n~~~~~~\n\nimplemented: mergelists (see issue #25)\n\n0.4.10\n~~~~~~\n\nfixed: issue #24 repo signing\n\n0.4.9\n~~~~~\n\nfixed: issue #23 loglevelonmissingfiles\n\n0.4.8\n~~~~~\n\nfixed pypi doc\n\n0.4.7\n~~~~~\n\nreverted: logger settings to initial state\n\nimproved: dump\n\nmerged:\n\n- flatten mapping from chris petersen geek@ex-nerd.com\n- arch linux package info from peter crighton git@petercrighton.de\n\n0.4.6\n~~~~~\n\nmerged: fixes from mmariani\n\n0.4.5\n~~~~~\n\nfixed: issues #9 and #11\n\n0.4.4\n~~~~~\n\ndeb packages:\n\n- removed support for python 2.6\n- include examples as doc\n\n0.4.3\n~~~~~\n\nfixed: issue #6 *import of hiyapyco **version** in setup.py causes pip\ninstall failures*\n\n0.4.2\n~~~~~\n\nchanged: moved to gpl\n\nimprovements: missing files handling, doc\n\n0.4.1\n~~~~~\n\nimplemented: ``castinterpolated``\n\n0.4.0\n~~~~~\n\nimplemented: loading yaml docs from string\n\n0.3.2\n~~~~~\n\nimproved tests and bool args checks\n\n0.3.0 / 0.3.1\n~~~~~~~~~~~~~\n\nimplemented a ordered dict yaml loader\n\n0.2.0\n~~~~~\n\nfixed unicode handling\n\n0.1.0 / 0.1.1\n~~~~~~~~~~~~~\n\ninitial release\n",
  "docs_url": null,
  "keywords": "configuration parser yaml",
  "license": "gplv3",
  "name": "hiyapyco",
  "package_url": "https://pypi.org/project/HiYaPyCo/",
  "project_url": "https://pypi.org/project/HiYaPyCo/",
  "project_urls": {
    "Homepage": "https://github.com/zerwes/hiyapyco"
  },
  "release_url": "https://pypi.org/project/HiYaPyCo/0.5.4/",
  "requires_dist": [
    "Jinja2 (<4,>3)",
    "MarkupSafe (<3)",
    "PyYAML (<7)"
  ],
  "requires_python": "",
  "summary": "hierarchical yaml python config",
  "version": "0.5.4",
  "releases": [],
  "developers": [
    "klaus_zerwes_zero",
    "zerwes@users.noreply.github.com"
  ],
  "kwds": "yaml yaml2 yamlfile3 yaml1 yamlfile1",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_hiyapyco",
  "homepage": "https://github.com/zerwes/hiyapyco",
  "release_count": 27,
  "dependency_ids": [
    "pypi_jinja2",
    "pypi_markupsafe",
    "pypi_pyyaml"
  ]
}
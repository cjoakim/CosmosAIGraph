{
  "classifiers": [
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# djhtml\n\n***a pure-python django/jinja template indenter without dependencies.***\n\ndjhtml indents mixed html/css/javascript templates that contain\n[django](https://docs.djangoproject.com/en/stable/ref/templates/language/)\nor [jinja](https://jinja.palletsprojects.com/templates/) template\ntags. it works similar to other code-formatting tools such as\n[black](https://github.com/psf/black) and interoperates nicely with\n[pre-commit](https://pre-commit.com/).\n\ndjhtml is an _indenter_ and not a _formatter_: it will only add/remove\nwhitespace at the beginning of lines. it will not insert newlines or\nother characters. the goal is to correctly indent already\nwell-structured templates, not to fix broken ones.\n\n\n### new! multi-line html elements\n\nas of version 3, djhtml indents multi-line html elements and\nmulti-line attribute values like this:\n\n```jinja\n<blockquote cite=\"guido van rossum\"\n            style=\"font-style: italic;\n                   {% if dark_mode %}\n                       background: black;\n                   {% endif %}\n                  \">\n    don't you hate code that's not properly indented?\n</blockquote>\n```\n\n\n### new! multi-line css indentation\n\nmulti-line css values are now continued at the same indentation level:\n\n```jinja\n<style>\n    @font-face {\n        font-family: helvetica;\n        src: {% for format, filename in licensed_fonts %}\n                 url('{% static filename %}') format('{{ format }}'),\n             {% endfor %}\n             url('arial.woff2') format('woff2'),\n             url('arial.woff') format('woff');\n    }\n</style>\n```\n\n\n### new! improved javascript indentation\n\nmany new javascript indention rules have been added, such as the\nindentation of method chaining:\n\n```jinja\n<script>\n    window.fetch('/test.html')\n        .then((html) => {\n            document.body.innerhtml = html;\n            {% block extra_statements %}\n            {% endblock %}\n        });\n</script>\n```\n\n\n### new! tabwidth guessing\n\nwithout the `-t` / `--tabwidth` argument, djhtml no longer defaults to\na tabwidth of 4 but instead guesses the correct tabwidth.\n\n\n## installation\n\ndjhtml requires python 3.8 or higher and is compatible with all\noperating systems supported by python. install djhtml with the\nfollowing command:\n\n    $ pip install djhtml\n\nnote that\n[windows still uses legacy code pages](https://docs.python.org/3/using/windows.html#win-utf8-mode)\ninstead of utf-8. it is highly advised to set the environment variable\n`pythonutf8` to `1` with the\n[setx](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/setx)\ncommand:\n\n    c:\\> setx /m pythonutf8 1\n\n\n## usage\n\nafter installation you can indent templates using the `djhtml`\ncommand:\n\n    $ djhtml template.html\n    reindented template.html\n    1 template has been reindented.\n\nyou can also run `djhtml .` to indent all html files beneath the\ncurrent directory.\n\nan exit status of 0 means that everything went well, regardless of\nwhether any files were changed. when the option `-c` / `--check` is\nused, the exit status is 1 when one or more files would have changed,\nbut no changes are actually made. all available options are given by\n`djthml -h` / `djthml --help`.\n\n\n## `fmt:off` and `fmt:on`\n\nyou can exclude specific lines from being processed with the\n`{# fmt:off #}` and `{# fmt:on #}` operators:\n\n```jinja\n{# fmt:off #}\n   ,-._|\\\n  /     .\\\n  \\_,--._/\n{# fmt:on #}\n```\n\ncontents inside `<pre> ... </pre>`, `<!-- ... --->`, `/* ... */`, and\n`{% comment %} ... {% endcomment %}` tags are also ignored (depending\non the current mode).\n\n\n## modes\n\nthe indenter operates in one of three different modes:\n\n- djhtml mode: the default mode. invoked by using the `djhtml` command\n  or the pre-commit hook.\n\n- djcss mode. will be entered when a `<style>` tag is encountered in\n  djhtml mode. it can also be invoked directly with the command\n  `djcss`.\n\n- djjs mode. will be entered when a `<script>` tag is encountered in\n  djhtml mode. it can also be invoked directly with the command\n  `djjs`.\n\n\n## pre-commit configuration\n\na great way to use djhtml is as a [pre-commit](https://pre-commit.com/)\nhook, so all your html, css and javascript files will automatically be\nindented upon every commit.\n\nfirst, install pre-commit:\n\n    $ pip install pre-commit\n    $ pre-commit install\n\nthen, add the following to your `.pre-commit-config.yaml`:\n\n```yml\nrepos:\n  - repo: https://github.com/rtts/djhtml\n    rev: 'main'  # replace with the latest tag on github\n    hooks:\n      - id: djhtml\n      - id: djcss\n      - id: djjs\n```\n\nnow run `pre-commit autoupdate` to automatically replace `main` with\nthe latest tag on github,\n[as recommended by pre-commit](https://pre-commit.com/#using-the-latest-version-for-a-repository).\n\nif you want to override a command-line option, for example to change\nthe default tabwidth, you change the `entry` point of these hooks:\n\n```yml\n    hooks:\n      - id: djhtml\n        # use a tabwidth of 2 for html files\n        entry: djhtml --tabwidth 2\n      - id: djcss\n      - id: djjs\n```\n\nif you want to limit the files these hooks operate on, you can use\n[pre-commit mechanisms for filtering](https://pre-commit.com/#filtering-files-with-types).\nfor example:\n\n```yml\n    hooks:\n      - id: djhtml\n        # indent only html files in template directories\n        files: .*/templates/.*\\.html$\n      - id: djcss\n        # run this hook only on scss files (css and scss is the default)\n        types: [scss]\n      - id: djjs\n        # exclude javascript files in vendor directories\n        exclude: .*/vendor/.*\n```\n\nnow when you run `git commit` you will see something like the\nfollowing output:\n\n    $ git commit\n\n    djhtml...................................................................failed\n    - hook id: djhtml\n    - files were modified by this hook\n\n    reindented template.html\n    1 template has been reindented.\n\nto inspect the changes that were made, use `git diff`. if you are\nhappy with the changes, you can commit them normally. if you are not\nhappy, please do the following:\n\n1. run `skip=djhtml git commit` to commit anyway, skipping the\n   `djhtml` hook.\n\n2. consider [opening an issue](https://github.com/rtts/djhtml/issues)\n   with the relevant part of the input file that was incorrectly\n   formatted, and an example of how it should have been formatted.\n\nyour feedback for improving djhtml is very welcome!\n\n\n## development\n\nfirst of all, clone this repository:\n\n    $ git clone https://github.com/rtts/djhtml\n    $ cd djhtml\n\nthen, create a python virtualenv and activate it:\n\n    $ python -m venv ~/.virtualenvs/djhtml\n    $ . ~/.virtualenvs/djhtml/bin/activate\n\nthen, install the package in [development\nmode](https://setuptools.pypa.io/en/latest/userguide/development_mode.html)\nincluding the `dev` dependencies, and install the pre-commit hooks:\n\n    $ python -m pip install -e '.[dev]'\n    $ pre-commit install --install-hooks\n\nyou can run the unittests with:\n\n    $ python -m unittest\n\nor use [`nox`](https://nox.thea.codes) to test all supported python\ninterpreters:\n\n    $ nox\n\nfinally, to get a little insight into the tokenization step of the\nindenting algorithm, you can run djhtml with the `-d` / `--debug`\nargument. you will see a python representation of the tokens that are\ncreated.\n",
  "docs_url": null,
  "keywords": "",
  "license": "gplv3+",
  "name": "djhtml",
  "package_url": "https://pypi.org/project/djhtml/",
  "project_url": "https://pypi.org/project/djhtml/",
  "project_urls": {
    "Homepage": "https://github.com/rtts/djhtml"
  },
  "release_url": "https://pypi.org/project/djhtml/3.0.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "django/jinja template indenter",
  "version": "3.0.6",
  "releases": [],
  "developers": [
    "jaap_joris_vens",
    "jj@rtts.eu"
  ],
  "kwds": "djhtml django djthml djangoproject template",
  "license_kwds": "gplv3+",
  "libtype": "pypi",
  "id": "pypi_djhtml",
  "homepage": "https://github.com/rtts/djhtml",
  "release_count": 35,
  "dependency_ids": []
}
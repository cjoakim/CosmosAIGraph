{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.0",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "django-rest-framework-datatables\n================================\n\n|build-status-image| |codecov-image| |documentation-status-image| |pypi-version| |py-versions|\n\noverview\n--------\n\nthis package provides seamless integration between `django rest framework <https://www.django-rest-framework.org>`_ and `datatables <https://datatables.net>`_.\n\ninstall django-rest-framework-datatables, call your api with ``?format=datatables`` and it will return a json structure that is fully compatible with what datatables expects.\nit handles searching, filtering, ordering and most usecases you can imagine with datatables.\n\nthe great benefit of django-rest-framework-datatables is that you don't have to create a different api, your api still work exactly the same unless you specify the ``datatables`` format on your request.\n\nfull documentation is available on `read the docs <http://django-rest-framework-datatables.readthedocs.io/en/latest/>`_ !\n\nyou can play with a demo of the example app on `python anywhere <https://izimobil.pythonanywhere.com>`_.\n\nrequirements\n------------\n\n- python (3.7, 3.8, 3.9)\n- django (2.0, 2.1, 2.2, 3.0, 3.1, 3.2, 4.0)\n- django rest framework (3.7, 3.8, 3.9, 3.10, 3.11, 3.12)\n\nplease note:\n\n- django 3.x branch is only supported with django rest framework 3.11 or superior and drf-datatables version 0.5.1 or superior.\n- django 4.x branch is only supported with django rest framework 3.12 or superior and drf-datatables version 0.7.0 or superior.\n\n\nquickstart\n----------\n\ninstallation\n~~~~~~~~~~~~\n\njust use ``pip``:\n\n.. code:: bash\n\n    $ pip install djangorestframework-datatables\n\nconfiguration\n~~~~~~~~~~~~~\n\nto enable datatables support in your project, add ``'rest_framework_datatables'`` to your ``installed_apps``, and modify your ``rest_framework`` settings like this:\n\n.. code:: python\n\n    rest_framework = {\n        'default_renderer_classes': (\n            'rest_framework.renderers.jsonrenderer',\n            'rest_framework.renderers.browsableapirenderer',\n            'rest_framework_datatables.renderers.datatablesrenderer',\n        ),\n        'default_filter_backends': (\n            'rest_framework_datatables.filters.datatablesfilterbackend',\n        ),\n        'default_pagination_class': 'rest_framework_datatables.pagination.datatablespagenumberpagination',\n        'page_size': 50,\n    }\n\nand that's it !\n~~~~~~~~~~~~~~~\n\nyour api is now fully compatible with datatables and will provide searching, filtering, ordering and pagination without any modification of your api code !\n\nalways serialize specific fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsometimes you may want to expose fields regardless of datatable's url parameters. you can do so by setting the ``datatables_always_serialize`` tuple like so:\n\n.. code:: python\n\n    class artistserializer(serializers.modelserializer):\n        id = serializers.integerfield(read_only=true)\n    \n        class meta:\n            model = artist\n            fields = (\n                'id', 'name',\n            )\n            datatables_always_serialize = ('id',)\n\nan example of datatable\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: html\n\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>rolling stone top 500 albums of all time</title>\n      <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0/css/bootstrap.css\">\n      <link rel=\"stylesheet\" href=\"//cdn.datatables.net/1.10.16/css/datatables.bootstrap4.min.css\">\n    </head>\n    \n    <body>\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <table id=\"albums\" class=\"table table-striped table-bordered\" style=\"width:100%\">\n              <thead>\n                <tr>\n                  <th>rank</th>\n                  <th>artist</th>\n                  <th>album name</th>\n                  <th>year</th>\n                  <th>genres</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n        </div>\n      </div>\n      <script src=\"//code.jquery.com/jquery-1.12.4.js\"></script>\n      <script src=\"//cdn.datatables.net/1.10.16/js/jquery.datatables.min.js\"></script>\n      <script src=\"//cdn.datatables.net/1.10.16/js/datatables.bootstrap4.min.js\"></script>\n      <script>\n          $(document).ready(function() {\n              var table = $('#albums').datatable({\n                  \"serverside\": true,\n                  \"ajax\": \"/api/albums/?format=datatables\",\n                  \"columns\": [\n                      {\"data\": \"rank\", \"searchable\": false},\n                      {\"data\": \"artist_name\", \"name\": \"artist.name\"},\n                      {\"data\": \"name\"},\n                      {\"data\": \"year\"},\n                      {\"data\": \"genres\", \"name\": \"genres.name\", \"sortable\": false},\n                  ]\n              });\n          });\n      </script>\n    </body>\n    </html>\n\nexample project\n---------------\n\nto play with the example project, just clone the repository and run the dev server.\n\n.. code:: bash\n\n    $ git clone https://github.com/izimobil/django-rest-framework-datatables.git\n    $ cd django-rest-framework-datatables\n    $ pip install -r requirements-dev.txt\n    $ python example/manage.py runserver\n    $ firefox http://127.0.0.1:8000\n\ntesting\n-------\n\ninstall development requirements.\n\n.. code:: bash\n\n    $ pip install -r requirements-dev.txt\n\nrun the tests.\n\n.. code:: bash\n\n    $ python example/manage.py test\n\nyou can also use the excellent `tox`_ testing tool to run the tests\nagainst all supported versions of python and django. install tox\nglobally, and then simply run:\n\n.. code:: bash\n\n    $ tox\n\nif you want to check the coverage, use:\n\n.. code:: bash\n\n    $ coverage run ./example/manage.py test\n    $ coverage report -m\n\ndocumentation\n-------------\n\nthe documentation is available online on `read the docs <http://django-rest-framework-datatables.readthedocs.io/en/latest/>`_.\n\nto build the documentation, you\u2019ll need to install ``sphinx``.\n\n.. code:: bash\n\n    $ pip install -r requirements-docs.txt\n\nto build the documentation:\n\n.. code:: bash\n\n    $ cd docs\n    $ make clean && make build\n\n\n.. _tox: http://tox.readthedocs.org/en/latest/\n\n.. |build-status-image| image:: https://api.travis-ci.com/izimobil/django-rest-framework-datatables.svg?branch=master\n   :target: http://travis-ci.com/izimobil/django-rest-framework-datatables?branch=master\n   :alt: travis build\n\n.. |codecov-image| image:: https://codecov.io/gh/izimobil/django-rest-framework-datatables/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/izimobil/django-rest-framework-datatables\n\n.. |pypi-version| image:: https://img.shields.io/pypi/v/djangorestframework-datatables.svg\n   :target: https://pypi.python.org/pypi/djangorestframework-datatables\n   :alt: pypi version\n\n.. |documentation-status-image| image:: https://readthedocs.org/projects/django-rest-framework-datatables/badge/?version=latest\n   :target: http://django-rest-framework-datatables.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/djangorestframework-datatables.svg\n   :target: https://img.shields.io/pypi/pyversions/djangorestframework-datatables.svg\n   :alt: python versions\n\n.. |dj-versions| image:: https://img.shields.io/pypi/djversions/djangorestframework-datatables.svg\n   :target: https://img.shields.io/pypi/djversions/djangorestframework-datatables.svg\n   :alt: django versions\n\n\nchangelog\n=========\n\nversion 0.7.0 (2021-12-09):\n---------------------------\n\n- django 4.0 compatibility\n- added global search support to yadcfmodelmultiplechoicefilter\n- various fixes on filters\n- various fixes on pagination\n- fixed / improved documentation and examples\n\nmany thanks to all the contributors on this release !\n\nversion 0.6.0 (2021-02-09):\n---------------------------\n\n- integration with django-filter\n- example of using yadcf and django-filter to create a multi-select column\n- fixed support for post requests from datatables\n- some fixes on pagination\n\nmany thanks to all the contributors on this release !\n\nversion 0.5.2 (2020-04-10):\n---------------------------\n\n- added support for post requests from datatables\n- avoid extra count queries\n- handle dummy columns gracefully\n\nversion 0.5.1 (2020-01-13):\n---------------------------\n\n- added support for django 3.0\n- added support for disabling pagination when the client requests it with length=-1 parameter\n- added optional column sorting to handle ties\n- minor code fixes\n\nversion 0.5.0 (2019-03-31):\n---------------------------\n\n- fixed total number of rows when view is using multiple filter back-ends\n- new meta option ``datatables_extra_json`` on view for adding key/value pairs to rendered json\n- minor docs fixes\n\nversion 0.4.1 (2018-11-16):\n---------------------------\n\n- added support for django 2.1 and drf 3.9\n- updated readme\n\nversion 0.4.0 (2018-06-22):\n---------------------------\n\n- added top level filtering for nested serializers\n- added multiple field filtering\n- added a ?keep= parameter that allows to bypass the filtering of unused fields\n- better detection of the requested format\n- fixed typo in queryset.count() method name\n\n\nversion 0.3.0 (2018-05-11):\n---------------------------\n\n- added a serializer meta option ``datatables_always_serialize`` that allows to specify a tuple of fields that should always be serialized in the response, regardless of what fields are requested in the datatables request\n- optimize filters\n- use and operator for column filtering instead of or, to be consistant with the client-side behavior of datatables\n\nversion 0.2.1 (2018-04-11):\n---------------------------\n\n- this version replaces the 0.2.0 who was broken (bad setup.py)\n\nversion 0.2.0 (2018-04-11):\n---------------------------\n\n- added full documentation\n- removed serializers, they are no longer necessary, filtering of columns is made by the renderer\n\nversion 0.1.0 (2018-04-10):\n---------------------------\n\ninitial release.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "djangorestframework-datatables",
  "package_url": "https://pypi.org/project/djangorestframework-datatables/",
  "project_url": "https://pypi.org/project/djangorestframework-datatables/",
  "project_urls": {
    "Homepage": "https://github.com/izimobil/django-rest-framework-datatables"
  },
  "release_url": "https://pypi.org/project/djangorestframework-datatables/0.7.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "seamless integration between django rest framework and datatables (https://datatables.net)",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "david_jean_louis",
    "izimobil@gmail.com"
  ],
  "kwds": "rest_framework_datatables djangorestframework rest_framework datatables_extra_json django",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_djangorestframework_datatables",
  "homepage": "https://github.com/izimobil/django-rest-framework-datatables",
  "release_count": 11,
  "dependency_ids": []
}
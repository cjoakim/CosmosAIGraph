{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: utilities"
  ],
  "description": "=============\nimport linter\n=============\n\n.. image:: https://img.shields.io/pypi/v/import-linter.svg\n    :target: https://pypi.org/project/import-linter\n\n.. image:: https://img.shields.io/pypi/pyversions/import-linter.svg\n    :alt: python versions\n    :target: https://pypi.org/project/import-linter/\n\n.. image:: https://github.com/seddonym/import-linter/workflows/ci/badge.svg?branch=master\n     :target: https://github.com/seddonym/import-linter/actions?workflow=ci\n     :alt: ci status\n\nimport linter allows you to define and enforce rules for the imports within and between python packages.\n\n* free software: bsd license\n* documentation: https://import-linter.readthedocs.io.\n\noverview\n--------\n\nimport linter is a command line tool to check that you are following a self-imposed\narchitecture within your python project. it does this by analysing the imports between all the modules in one\nor more python packages, and compares this against a set of rules that you provide in a configuration file.\n\nthe configuration file contains one or more 'contracts'. each contract has a specific\ntype, which determines the sort of rules it will apply. for example, the ``forbidden``\ncontract type allows you to check that certain modules or packages are not imported by\nparts of your project.\n\nimport linter is particularly useful if you are working on a complex codebase within a team,\nwhen you want to enforce a particular architectural style. in this case you can add\nimport linter to your deployment pipeline, so that any code that does not follow\nthe architecture will fail tests.\n\nif there isn't a built in contract type that fits your desired architecture, you can define\na custom one.\n\nquick start\n-----------\n\ninstall import linter::\n\n    pip install import-linter\n\ndecide on the dependency flows you wish to check. in this example, we have\ndecided to make sure that ``myproject.foo`` has dependencies on neither\n``myproject.bar`` nor ``myproject.baz``, so we will use the ``forbidden`` contract type.\n\ncreate an ``.importlinter`` file in the root of your project to define your contract(s). in this case:\n\n.. code-block:: ini\n\n    [importlinter]\n    root_package = myproject\n\n    [importlinter:contract:1]\n    name=foo doesn't import bar or baz\n    type=forbidden\n    source_modules=\n        myproject.foo\n    forbidden_modules=\n        myproject.bar\n        myproject.baz\n\nnow, from your project root, run::\n\n    lint-imports\n\nif your code violates the contract, you will see an error message something like this:\n\n.. code-block:: text\n\n    =============\n    import linter\n    =============\n\n    ---------\n    contracts\n    ---------\n\n    analyzed 23 files, 44 dependencies.\n    -----------------------------------\n\n    foo doesn't import bar or baz broken\n\n    contracts: 1 broken.\n\n\n    ----------------\n    broken contracts\n    ----------------\n\n    foo doesn't import bar or baz\n    -----------------------------\n\n    myproject.foo is not allowed to import myproject.bar:\n\n    -   myproject.foo.blue -> myproject.utils.red (l.16)\n        myproject.utils.red -> myproject.utils.green (l.1)\n        myproject.utils.green -> myproject.bar.yellow (l.3)\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 2-clause license",
  "name": "import-linter",
  "package_url": "https://pypi.org/project/import-linter/",
  "project_url": "https://pypi.org/project/import-linter/",
  "project_urls": {
    "Documentation": "https://import-linter.readthedocs.io/",
    "Source-code": "https://github.com/seddonym/import-linter/"
  },
  "release_url": "https://pypi.org/project/import-linter/1.12.1/",
  "requires_dist": [
    "click >=6",
    "grimp >=3.1",
    "typing-extensions >=3.10.0.0",
    "tomli >=1.2.1 ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "enforces rules for the imports within and between python packages.",
  "version": "1.12.1",
  "releases": [],
  "developers": [
    "david@seddonym.me"
  ],
  "kwds": "importlinter pyversions imports import packages",
  "license_kwds": "bsd 2-clause license",
  "libtype": "pypi",
  "id": "pypi_import_linter",
  "homepage": "",
  "release_count": 33,
  "dependency_ids": [
    "pypi_click",
    "pypi_grimp",
    "pypi_tomli",
    "pypi_typing_extensions"
  ]
}
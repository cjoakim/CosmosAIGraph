{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\r\n# more kwargs!\r\n\r\nobject destructuring of function parameters for python!\r\n\r\n[![pypi latest release](https://img.shields.io/pypi/v/mo-kwargs.svg)](https://pypi.org/project/mo-kwargs/)\r\n[![build status](https://app.travis-ci.com/klahnakoski/mo-kwargs.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-kwargs)\r\n [![coverage status](https://coveralls.io/repos/github/klahnakoski/mo-kwargs/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-kwargs?branch=dev)\r\n[![downloads](https://pepy.tech/badge/mo-kwargs)](https://pepy.tech/project/mo-kwargs)\r\n\r\n\r\n## motivation\r\n\r\njavascript has [object destructuring](https://developer.mozilla.org/en-us/docs/web/javascript/reference/operators/destructuring_assignment#object_destructuring), and it can be used for function parameters. this has a couple of benefts over python's keyword arguments:\r\n\r\n* extra caller parameters are ignored (eg `f({a, b, c})`)\r\n* duplicate parameters are handled elegantly (eg `f({a, a})`) \r\n\r\nthe `mo-kwargs` library provides this functionality with the `@override` decorator, with additional benefits:\r\n \r\n * required parameters throw an error if missing, just like regular python\r\n * all parameters, even ones not in the argument list, are passed in the optional `kwargs` parameter \r\n \r\nthe `@override` decorator adds a `kwargs` argument which can be passed a dict of call parameters; but unlike `**kwargs`, it will not raise duplicate key exceptions.\r\n\r\n## provide default values\r\n\r\nwe decorate the `login()` function with `@override`. `username` is a required parameter, and `password` will default to `none`. \r\n\r\n        @override\r\n        def login(username, password=none):\r\n            pass\r\n\r\ndefine some `dicts` for use with our `kwargs` parameter:\r\n\r\n        creds = {\"userame\": \"ekyle\", \"password\": \"password123\"}\r\n        alt_creds = {\"username\": \"klahnakoski\"}\r\n\r\n\r\nthe simplest case is when we use `kwargs` with no overrides\r\n\r\n        login(kwargs=creds)\r\n        # same as\r\n        login(**creds)\r\n        # same as\r\n        login(username=\"ekyle\", password=\"password123\")\r\n\r\nyou may override any property in `kwargs`: in this case it is `password`\r\n\r\n        login(password=\"123\", kwargs=creds)\r\n        # same as\r\n        login(username=\"ekyle\", password=\"123\")\r\n\r\nthere is no problem with overriding everything in `kwargs`:\r\n\r\n        login(username=\"klahnakoski\", password=\"asd213\", kwargs=creds)\r\n        # same as\r\n        login(username=\"klahnakoski\", password=\"asd213\")\r\n\r\nyou may continue to use `**kwargs`; which provides a way to overlay one parameter template (`creds`) with another (`alt_creds`)\r\n\r\n        login(kwargs=creds, **alt_creds)\r\n        # same as\r\n        login(username=\"klahnakoski\", password=\"password123\")\r\n\r\n## handle too many parameters\r\n\r\nsometimes your method parameters come from a configuration file, or some other outside source which is outside your control. there may be more parameters than your method is willing to accept.  \r\n\r\n        creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\r\n        def login(username, password=none):\r\n             print(kwargs.get(\"port\"))\r\n\r\nwithout `mo-kwargs`, passing the `creds` dictionary directly to `login()` would raise a key error\r\n\r\n        >>> login(**creds)\r\n        traceback (most recent call last):\r\n          file \"<stdin>\", line 1, in <module>\r\n        typeerror: login() got an unexpected keyword argument 'port'\r\n            \r\nthe traditional solution is to pass the parameters explicitly:\r\n\r\n        login(username=creds.username, password=creds.password)\r\n\r\nbut that can get get tedious when done often, or the parameter list get long. `mo-kwargs` allows you to pass the whole dictionary to the `kwargs` parameter; only the parameters used by the method are used:\r\n\r\n        @override\r\n        def login(username, password=none):\r\n            pass\r\n         \r\n        login(kwargs=creds)\r\n        # same as\r\n        login(username=creds.username, password=creds.password)\r\n\r\n## package all parameters\r\n\r\nyour method can accept `kwargs` as a parameter. if it does, ensure it defaults to `none` so that it's not required.\r\n\r\n        @override\r\n        def login(username, password=none, kwargs=none):\r\n            print(kwargs.get(\"username\"))\r\n            print(kwargs.get(\"port\"))\r\n\r\n`kwargs` will always be a dict, possibly empty, with the full set of parameters. this is different from using `**kwargs` which contains only the remainder of the keyword parameters.\r\n\r\n        >>> creds = {\"username\": \"ekyle\", \"password\": \"password123\", \"port\":9000}\r\n        >>> login(**creds)\r\n        ekyle\r\n        9000\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "mo-kwargs",
  "package_url": "https://pypi.org/project/mo-kwargs/",
  "project_url": "https://pypi.org/project/mo-kwargs/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/mo-kwargs"
  },
  "release_url": "https://pypi.org/project/mo-kwargs/7.455.23316/",
  "requires_dist": [
    "mo-dots ==9.455.23316",
    "mo-future ==7.449.23304",
    "mo-testing ; extra == 'tests'",
    "mo-times ; extra == 'tests'",
    "mo-json ; extra == 'tests'",
    "mo-threads ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "object destructuring of function parameters for python!",
  "version": "7.455.23316",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "kwargs object_destructuring pypi ekyle destructuring_assignment",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_mo_kwargs",
  "homepage": "https://github.com/klahnakoski/mo-kwargs",
  "release_count": 73,
  "dependency_ids": [
    "pypi_mo_dots",
    "pypi_mo_future",
    "pypi_mo_json",
    "pypi_mo_testing",
    "pypi_mo_threads",
    "pypi_mo_times"
  ]
}
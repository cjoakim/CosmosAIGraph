{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.2",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pysiphash\n====\n\na python implementation of [siphash](https://131002.net/siphash/), a\nfast short-input prf.\n\nextract from the description:\n\n```\nsiphash is a family of pseudorandom functions (a.k.a. keyed hash\nfunctions) optimized for speed on short messages.\n\ntarget applications include network traffic authentication and defense\nagainst hash-flooding dos attacks.\n\nsiphash is secure, fast, and simple (for real):\n* siphash is simpler and faster than previous cryptographic algorithms\n  (e.g. macs based on universal hashing)\n* siphash is competitive in performance with insecure\n  non-cryptographic algorithms (e.g. murmurhash)\n* we propose that hash tables switch to siphash as a hash\n  function. users of siphash already include opendns, perl 5, ruby, or\n  rust.\n```\n\nusage\n----\n\n`pysiphash` tries to follow the\n[hashlib](http://docs.python.org/2/library/hashlib.html) api. you can\nadd data to the hash by calling an `update` method, or feed data\ndirectly to the constructor:\n\n```:python\n>>> import siphash\n>>> key = '0123456789abcdef'\n>>> sip = siphash.siphash_2_4(key)\n>>> sip.update('a')\n>>> sip.hash()\n12398370950267227270l\n\n>>> siphash.siphash_2_4(key, 'a').hash()\n12398370950267227270l\n```\n\nto extract the hash as a numeric value call `hash()`:\n\n```\n>>> siphash.siphash_2_4(key, 'a').hash()\n12398370950267227270l\n```\n\nor `digest()` to get a raw 8-bytes string:\n```:python\n>>> siphash.siphash_2_4(key, 'a').digest()\n'\\x86l3\\x9c\\xb0\\xdc\\x0f\\xac'\n```\n\nor `hexdigest()` for a 16-bytes hex encoding:\n```:python\n>>> siphash.siphash_2_4(key, 'a').hexdigest()\n'864c339cb0dc0fac'\n```\n\ntesting\n----\n\na series of sanity checks are present inline the main `pysiphash`\ncode, to run it type:\n\n```:bash\n$ python siphash/__init__.py\nall tests ok\n```\n\nspeed\n----\n\ncurrently `pysiphash` is a pure-python code, so don't expect blazing\nspeed. on my machine computing a hash from a ten byte string takes\naround 0.31 ms, and hashing 1mib blob takes 770 ms.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "siphash",
  "package_url": "https://pypi.org/project/siphash/",
  "project_url": "https://pypi.org/project/siphash/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://github.com/majek/pysiphash#readme"
  },
  "release_url": "https://pypi.org/project/siphash/0.0.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "siphash - python siphash implementation",
  "version": "0.0.1",
  "releases": [],
  "developers": [
    "marek@popcount.org",
    "marek_majkowski"
  ],
  "kwds": "pysiphash hashlib siphash siphash_2_4 hashing",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_siphash",
  "homepage": "http://github.com/majek/pysiphash#readme",
  "release_count": 1,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "python-xxhash\n=============\n\n.. image:: https://github.com/ifduyue/python-xxhash/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/ifduyue/python-xxhash/actions/workflows/test.yml\n    :alt: github actions status\n\n.. image:: https://img.shields.io/pypi/v/xxhash.svg\n    :target: https://pypi.org/project/xxhash/\n    :alt: latest version\n\n.. image:: https://img.shields.io/pypi/pyversions/xxhash.svg\n    :target: https://pypi.org/project/xxhash/\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/l/xxhash.svg\n    :target: https://pypi.org/project/xxhash/\n    :alt: license\n\n\n.. _hmac: http://en.wikipedia.org/wiki/hash-based_message_authentication_code\n.. _xxhash: https://github.com/cyan4973/xxhash\n.. _cyan4973: https://github.com/cyan4973\n\n\nxxhash is a python binding for the xxhash_ library by `yann collet`__.\n\n__ cyan4973_\n\ninstallation\n------------\n\n.. code-block:: bash\n\n   $ pip install xxhash\n   \nyou can also install using conda:\n\n.. code-block:: bash\n\n   $ conda install -c conda-forge python-xxhash\n\n\ninstalling from source\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: bash\n\n   $ pip install --no-binary xxhash xxhash\n\nprerequisites\n++++++++++++++\n\non debian/ubuntu:\n\n.. code-block:: bash\n\n   $ apt-get install python-dev gcc\n\non centos/fedora:\n\n.. code-block:: bash\n\n   $ yum install python-devel gcc redhat-rpm-config\n\nlinking to libxxhash.so\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nby default python-xxhash will use bundled xxhash,\nwe can change this by specifying env var ``xxhash_link_so``:\n\n.. code-block:: bash\n\n   $ xxhash_link_so=1 pip install --no-binary xxhash xxhash\n\nusage\n--------\n\nmodule version and its backend xxhash library version can be retrieved using\nthe module properties ``version`` and ``xxhash_version`` respectively.\n\n.. code-block:: python\n\n    >>> import xxhash\n    >>> xxhash.version\n    '2.0.0'\n    >>> xxhash.xxhash_version\n    '0.8.0'\n\nthis module is hashlib-compliant, which means you can use it in the same way as ``hashlib.md5``.\n\n    | update() -- update the current digest with an additional string\n    | digest() -- return the current digest value\n    | hexdigest() -- return the current digest as a string of hexadecimal digits\n    | intdigest() -- return the current digest as an integer\n    | copy() -- return a copy of the current xxhash object\n    | reset() -- reset state\n\nmd5 digest returns bytes, but the original xxh32 and xxh64 c apis return integers.\nwhile this module is made hashlib-compliant, ``intdigest()`` is also provided to\nget the integer digest.\n\nconstructors for hash algorithms provided by this module are ``xxh32()`` and ``xxh64()``.\n\nfor example, to obtain the digest of the byte string ``b'nobody inspects the spammish repetition'``:\n\n.. code-block:: python\n\n    >>> import xxhash\n    >>> x = xxhash.xxh32()\n    >>> x.update(b'nobody inspects')\n    >>> x.update(b' the spammish repetition')\n    >>> x.digest()\n    b'\\xe2);/'\n    >>> x.digest_size\n    4\n    >>> x.block_size\n    16\n\nmore condensed:\n\n.. code-block:: python\n\n    >>> xxhash.xxh32(b'nobody inspects the spammish repetition').hexdigest()\n    'e2293b2f'\n    >>> xxhash.xxh32(b'nobody inspects the spammish repetition').digest() == x.digest()\n    true\n\nan optional seed (default is 0) can be used to alter the result predictably:\n\n.. code-block:: python\n\n    >>> import xxhash\n    >>> xxhash.xxh64('xxhash').hexdigest()\n    '32dd38952c4bc720'\n    >>> xxhash.xxh64('xxhash', seed=20141025).hexdigest()\n    'b559b98d844e0635'\n    >>> x = xxhash.xxh64(seed=20141025)\n    >>> x.update('xxhash')\n    >>> x.hexdigest()\n    'b559b98d844e0635'\n    >>> x.intdigest()\n    13067679811253438005\n\nbe careful that xxh32 takes an unsigned 32-bit integer as seed, while xxh64\ntakes an unsigned 64-bit integer. although unsigned integer overflow is\ndefined behavior, it's better not to make it happen:\n\n.. code-block:: python\n\n    >>> xxhash.xxh32('i want an unsigned 32-bit seed!', seed=0).hexdigest()\n    'f7a35af8'\n    >>> xxhash.xxh32('i want an unsigned 32-bit seed!', seed=2**32).hexdigest()\n    'f7a35af8'\n    >>> xxhash.xxh32('i want an unsigned 32-bit seed!', seed=1).hexdigest()\n    'd8d4b4ba'\n    >>> xxhash.xxh32('i want an unsigned 32-bit seed!', seed=2**32+1).hexdigest()\n    'd8d4b4ba'\n    >>>\n    >>> xxhash.xxh64('i want an unsigned 64-bit seed!', seed=0).hexdigest()\n    'd4cb0a70a2b8c7c1'\n    >>> xxhash.xxh64('i want an unsigned 64-bit seed!', seed=2**64).hexdigest()\n    'd4cb0a70a2b8c7c1'\n    >>> xxhash.xxh64('i want an unsigned 64-bit seed!', seed=1).hexdigest()\n    'ce5087f12470d961'\n    >>> xxhash.xxh64('i want an unsigned 64-bit seed!', seed=2**64+1).hexdigest()\n    'ce5087f12470d961'\n\n\n``digest()`` returns bytes of the **big-endian** representation of the integer\ndigest:\n\n.. code-block:: python\n\n    >>> import xxhash\n    >>> h = xxhash.xxh64()\n    >>> h.digest()\n    b'\\xeff\\xdb7q\\xd8\\xe9\\x99'\n    >>> h.intdigest().to_bytes(8, 'big')\n    b'\\xeff\\xdb7q\\xd8\\xe9\\x99'\n    >>> h.hexdigest()\n    'ef46db3751d8e999'\n    >>> format(h.intdigest(), '016x')\n    'ef46db3751d8e999'\n    >>> h.intdigest()\n    17241709254077376921\n    >>> int(h.hexdigest(), 16)\n    17241709254077376921\n\nbesides xxh32/xxh64 mentioned above, oneshot functions are also provided,\nso we can avoid allocating xxh32/64 state on heap:\n\n    | xxh32_digest(bytes, seed=0)\n    | xxh32_intdigest(bytes, seed=0)\n    | xxh32_hexdigest(bytes, seed=0)\n    | xxh64_digest(bytes, seed=0)\n    | xxh64_intdigest(bytes, seed=0)\n    | xxh64_hexdigest(bytes, seed=0)\n\n.. code-block:: python\n\n    >>> import xxhash\n    >>> xxhash.xxh64('a').digest() == xxhash.xxh64_digest('a')\n    true\n    >>> xxhash.xxh64('a').intdigest() == xxhash.xxh64_intdigest('a')\n    true\n    >>> xxhash.xxh64('a').hexdigest() == xxhash.xxh64_hexdigest('a')\n    true\n    >>> xxhash.xxh64_hexdigest('xxhash', seed=20141025)\n    'b559b98d844e0635'\n    >>> xxhash.xxh64_intdigest('xxhash', seed=20141025)\n    13067679811253438005l\n    >>> xxhash.xxh64_digest('xxhash', seed=20141025)\n    '\\xb5y\\xb9\\x8d\\x84n\\x065'\n\n.. code-block:: python\n\n    in [1]: import xxhash\n\n    in [2]: %timeit xxhash.xxh64_hexdigest('xxhash')\n    268 ns \u00b1 24.1 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n    in [3]: %timeit xxhash.xxh64('xxhash').hexdigest()\n    416 ns \u00b1 17.3 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n\nxxh3 hashes are available since v2.0.0 (xxhash v0.8.0), they are:\n\nstreaming classes:\n\n    | xxh3_64\n    | xxh3_128\n\noneshot functions:\n\n    | xxh3_64_digest(bytes, seed=0)\n    | xxh3_64_intdigest(bytes, seed=0)\n    | xxh3_64_hexdigest(bytes, seed=0)\n    | xxh3_128_digest(bytes, seed=0)\n    | xxh3_128_intdigest(bytes, seed=0)\n    | xxh3_128_hexdigest(bytes, seed=0)\n\nand aliases:\n\n    | xxh128 = xxh3_128\n    | xxh128_digest = xxh3_128_digest\n    | xxh128_intdigest = xxh3_128_intdigest\n    | xxh128_hexdigest = xxh3_128_hexdigest\n\ncaveats\n-------\n\nseed overflow\n~~~~~~~~~~~~~~\n\nxxh32 takes an unsigned 32-bit integer as seed, and xxh64 takes\nan unsigned 64-bit integer as seed. make sure that the seed is greater than\nor equal to ``0``.\n\nendianness\n~~~~~~~~~~~\n\nas of python-xxhash 0.3.0, ``digest()`` returns bytes of the\n**big-endian** representation of the integer digest. it used\nto be little-endian.\n\ndont use xxhash in hmac\n~~~~~~~~~~~~~~~~~~~~~~~\nthough you can use xxhash as an hmac_ hash function, but it's\nhighly recommended not to.\n\nxxhash is **not** a cryptographic hash function, it is a\nnon-cryptographic hash algorithm aimed at speed and quality.\ndo not put xxhash in any position where cryptographic hash\nfunctions are required.\n\n\ncopyright and license\n---------------------\n\ncopyright (c) 2014-2020 yue du - https://github.com/ifduyue\n\nlicensed under `bsd 2-clause license <http://opensource.org/licenses/bsd-2-clause>`_\n\nchangelog\n-----------\n\nv3.4.1 2023-10-05\n~~~~~~~~~~~~~~~~~\n\n- remove setuptools_scm\n\n\nv3.4.0 2023-10-05\n~~~~~~~~~~~~~~~~~\n\n- build wheels for python 3.12\n\nv3.3.0 2023-07-29\n~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.8.2\n- drop support for python 3.6\n\nv3.2.0 2022-12-28\n~~~~~~~~~~~~~~~~~\n\nthis is the last version to support python 3.6\n\n- build python 3.11 wheels.\n- remove setup.py test_suites, call unittest directly\n\nv3.1.0 2022-10-19\n~~~~~~~~~~~~~~~~~\n\n- type annotations.\n- enabled muslinux wheels building.\n\nv3.0.0 2022-02-25\n~~~~~~~~~~~~~~~~~\n\n- new set `algorithms_available` lists all implemented algorithms in `xxhash`\n  package.\n- upgrade xxhash to v0.8.1.\n- drop support for eol python versions, require python >= 3.6 from now on.\n- migrate to github actions and build arm64 wheels for macos.\n- always release gil.\n\n\nv2.0.2 2021-04-15\n~~~~~~~~~~~~~~~~~\n\n- fix travis ci osx dpl python2.7 get-pip.py error\n\nv2.0.1 2021-04-15\n~~~~~~~~~~~~~~~~~\n\n- only to trigger python 3.9 wheels building.\n\nv2.0.0 2020-08-03\n~~~~~~~~~~~~~~~~~\n\n- **require xxhash version >= v0.8.0**\n- upgrade xxhash to v0.8.0\n- xxh3 hashes: `xxh3_64`, `xxh3_128`, and their oneshot functions\n\nv1.4.4 2020-06-20\n~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.7.3\n- stop using pep393 deprecated apis\n- use xxh(32|64)_canonicalfromhash to replace u2bytes and ull2bytes\n\nv1.4.3 2019-11-12\n~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.7.2\n- python 3.8 wheels\n\nv1.4.2 2019-10-13\n~~~~~~~~~~~~~~~~~\n\n- fixed: setup.py fails when reading readme.rst and the default encoding is not utf-8\n\nv1.4.1 2019-08-27\n~~~~~~~~~~~~~~~~~\n\n- fixed: xxh3.h in missing from source tarball\n\nv1.4.0 2019-08-25\n~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.7.1\n\nv1.3.0 2018-10-21\n~~~~~~~~~~~~~~~~~\n\n- wheels are now built automatically\n- split cffi variant into a separate package `ifduyue/python-xxhash-cffi <https://github.com/ifduyue/python-xxhash-cffi>`_\n\nv1.2.0 2018-07-13\n~~~~~~~~~~~~~~~~~\n\n- add oneshot functions xxh{32,64}_{,int,hex}digest\n\nv1.1.0 2018-07-05\n~~~~~~~~~~~~~~~~~\n\n- allow input larger than 2gb\n- release the gil on sufficiently large input\n- drop support for python 3.2\n\nv1.0.1 2017-03-02\n~~~~~~~~~~~~~~~~~~\n\n- free state actively, instead of delegating it to ffi.gc\n\nv1.0.0 2017-02-10\n~~~~~~~~~~~~~~~~~~\n\n- fixed copy() segfault\n- added cffi variant\n\nv0.6.3 2017-02-10\n~~~~~~~~~~~~~~~~~~\n\n- fixed copy() segfault\n\nv0.6.2 2017-02-10\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.6.2\n\nv0.6.1 2016-06-26\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.6.1\n\nv0.5.0 2016-03-02\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to v0.5.0\n\nv0.4.3 2015-08-21\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to r42\n\nv0.4.1 2015-08-16\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to r41\n\nv0.4.0 2015-08-05\n~~~~~~~~~~~~~~~~~~\n\n- added method reset\n- upgrade xxhash to r40\n\nv0.3.2 2015-01-27\n~~~~~~~~~~~~~~~~~~\n\n- fixed some typos in docstrings\n\nv0.3.1 2015-01-24\n~~~~~~~~~~~~~~~~~~\n\n- upgrade xxhash to r39\n\nv0.3.0 2014-11-11\n~~~~~~~~~~~~~~~~~~\n\n- change digest() from little-endian representation to big-endian representation of the integer digest.\n  this change breaks compatibility (digest() results are different).\n\nv0.2.0 2014-10-25\n~~~~~~~~~~~~~~~~~~\n\n- make this package hashlib-compliant\n\nv0.1.3 2014-10-23\n~~~~~~~~~~~~~~~~~~\n\n- update xxhash to r37\n\nv0.1.2 2014-10-19\n~~~~~~~~~~~~~~~~~~\n\n- improve: check xxhnn_init() return value.\n- update xxhash to r36\n\nv0.1.1 2014-08-07\n~~~~~~~~~~~~~~~~~~\n\n- improve: can now be built with visual c++ compiler.\n\nv0.1.0 2014-08-05\n~~~~~~~~~~~~~~~~~~\n\n- new: xxh32 and xxh64 type, which support partially update.\n- fix: build under python 3.4\n\nv0.0.2 2014-08-03\n~~~~~~~~~~~~~~~~~~\n\n- new: support python 3\n\nv0.0.1 2014-07-30\n~~~~~~~~~~~~~~~~~~\n\n- new: xxh32 and xxh64\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "xxhash",
  "package_url": "https://pypi.org/project/xxhash/",
  "project_url": "https://pypi.org/project/xxhash/",
  "project_urls": {
    "Homepage": "https://github.com/ifduyue/python-xxhash"
  },
  "release_url": "https://pypi.org/project/xxhash/3.4.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "python binding for xxhash",
  "version": "3.4.1",
  "releases": [],
  "developers": [
    "ifduyue@gmail.com",
    "yue_du"
  ],
  "kwds": "xxhash_version pyversions xxhash_link_so pip yml",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_xxhash",
  "homepage": "https://github.com/ifduyue/python-xxhash",
  "release_count": 40,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: plugins",
    "environment :: web environment",
    "framework :: sphinx :: extension",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation",
    "topic :: documentation :: sphinx",
    "topic :: software development :: documentation",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "# sphinx-tabs\n\n[![github-ci][github-ci]][github-link]\n[![coverage status][codecov-badge]][codecov-link]\n[![pypi][pypi-badge]][pypi-link]\n\ncreate tabbed content in [sphinx documentation](http://www.sphinx-doc.org) when building html.\n\nfor example, see the [raw] code of [docs/index.rst](docs/index.rst) which generates the following:\n\na live demo can be found here: <https://sphinx-tabs.readthedocs.io>\n\n![tabs](/images/tabs.gif)\n\n## installation\n\n```bash\npip install sphinx-tabs\n```\n\nto enable the extension in sphinx, add the following to your conf.py:\n\n```python\nextensions = ['sphinx_tabs.tabs']\n```\n\nif needed, there is a configuration option to allow additional builders to be considered compatible. for example, to add the `linkcheck` builder, add the following to your conf.py:\n\n```python\nsphinx_tabs_valid_builders = ['linkcheck']\n```\n\nif you are using [read the docs](https://readthedocs.org/) for building your documentation, the extension must be added as a requirement. please add the following to `requirements.txt` at the root of the project:\n\n```\nsphinx-tabs\n```\n\n## contributing\n\nwe welcome all contributions!\nsee the [ebp contributing guide](https://executablebooks.org/en/latest/contributing.html) for general details.\n\nthe simplest way to run tests is to install [pre-commit](https://pre-commit.com/) for linting and [tox](https://tox.readthedocs.io) for unit tests and documentation build:\n\n```console\n$ pre-commit run --all\n```\n\n```console\n$ tox -p\n```\n\n## basic tabs\n\nbasic tabs can be coded as follows:\n\n```rst\n.. tabs::\n\n   .. tab:: apples\n\n      apples are green, or sometimes red.\n\n   .. tab:: pears\n\n      pears are green.\n\n   .. tab:: oranges\n\n      oranges are orange.\n```\n\n![tabs](/images/tabs.gif)\n\nthe contents of each tab can be displayed by clicking on the tab that you wish to show. clicking on the tab that is currently open will hide the tab's content, leaving only the tab set labels visible.\n\nalternatively, tab sets can be focused using :kbd:`tab`. the :kbd:`left arrow` and :kbd:`right arrow` keys can then be used to navigate across the tab set and :kbd:`enter` can be used to select a tab.\n\n## grouped tabs\n\ntabs can be grouped, so that changing the current tab in one tabset changes the current tab in all other tabsets containing a tab with a matching label.\nfor example:\n\n```rst\n.. tabs::\n\n   .. group-tab:: linux\n\n      linux line 1\n\n   .. group-tab:: mac osx\n\n      mac osx line 1\n\n   .. group-tab:: windows\n\n      windows line 1\n\n.. tabs::\n\n   .. group-tab:: linux\n\n      linux line 1\n\n   .. group-tab:: mac osx\n\n      mac osx line 1\n\n   .. group-tab:: windows\n\n      windows line 1\n```\n\n![group tabs](/images/grouptabs.gif)\n\nif permitted by the user's browser, the last selected group tab will be remembered when changing page. as such, if any tabsets on the next page contain a tab with the same label it will be selected.\n\n\n## code tabs\n\ngrouped tabs containing code with syntax highlighting can be created as follows:\n\n```rst\n.. tabs::\n\n   .. code-tab:: c\n\n         int main(const int argc, const char **argv) {\n           return 0;\n         }\n\n   .. code-tab:: c++\n\n         int main(const int argc, const char **argv) {\n           return 0;\n         }\n\n   .. code-tab:: py\n\n         def main():\n             return\n\n   .. code-tab:: java\n\n         class main {\n             public static void main(string[] args) {\n             }\n         }\n\n   .. code-tab:: julia\n\n         function main()\n         end\n\n   .. code-tab:: fortran\n\n         program main\n         end program main\n```\n\n![code tabs](/images/codetabs.gif)\n\ncode tabs also support custom lexers (added via sphinx `conf.py`). pass the lexers alias as the first argument of `code-tab`.\n\nby default, code tabs are labelled with the language name, though a custom label can be provided as an optional second argument to the `code-tabs` directive:\n\n```rst\n.. tabs::\n\n   .. code-tab:: c i love c\n\n         int main(const int argc, const char **argv) {\n           return 0;\n         }\n\n   .. code-tab:: py i love python more\n\n         def main():\n             return\n\n```\n\nthe tab label is used to group tabs, including `code-tabs`. as such, the same custom label should be used to group related tabs.\n\n[github-ci]: https://github.com/executablebooks/sphinx-tabs/workflows/continuous-integration/badge.svg?branch=master\n[github-link]: https://github.com/executablebooks/sphinx-tabs\n[pypi-badge]: https://img.shields.io/pypi/v/sphinx-tabs.svg\n[pypi-link]: https://pypi.org/project/sphinx-tabs\n[codecov-badge]: https://codecov.io/gh/executablebooks/sphinx-tabs/branch/master/graph/badge.svg\n[codecov-link]: https://codecov.io/gh/executablebooks/sphinx-tabs\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "sphinx-tabs",
  "package_url": "https://pypi.org/project/sphinx-tabs/",
  "project_url": "https://pypi.org/project/sphinx-tabs/",
  "project_urls": {
    "Homepage": "https://github.com/executablebooks/sphinx-tabs"
  },
  "release_url": "https://pypi.org/project/sphinx-tabs/3.4.4/",
  "requires_dist": [
    "sphinx",
    "pygments",
    "docutils ~=0.18.0",
    "pre-commit ==2.13.0 ; extra == 'code_style'",
    "coverage ; extra == 'testing'",
    "pytest <8,>=7.1 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-regressions ; extra == 'testing'",
    "pygments ; extra == 'testing'",
    "bs4 ; extra == 'testing'",
    "rinohtype ; extra == 'testing'"
  ],
  "requires_python": "~=3.7",
  "summary": "tabbed views for sphinx",
  "version": "3.4.4",
  "releases": [],
  "developers": [
    "djungelorm",
    "djungelorm@users.noreply.github.com"
  ],
  "kwds": "sphinx_tabs sphinx_tabs_valid_builders sphinx tab tabs",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sphinx_tabs",
  "homepage": "https://github.com/executablebooks/sphinx-tabs",
  "release_count": 34,
  "dependency_ids": [
    "pypi_bs4",
    "pypi_coverage",
    "pypi_docutils",
    "pypi_pre_commit",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_regressions",
    "pypi_rinohtype",
    "pypi_sphinx"
  ]
}
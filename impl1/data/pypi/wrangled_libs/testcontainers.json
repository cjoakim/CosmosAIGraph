{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "testcontainers-python\n=====================\n\n.. image:: https://github.com/testcontainers/testcontainers-python/workflows/testcontainers-python/badge.svg\n   :target: https://github.com/testcontainers/testcontainers-python/actions/workflows/main.yml\n.. image:: https://img.shields.io/pypi/v/testcontainers.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/testcontainers\n.. image:: https://readthedocs.org/projects/testcontainers-python/badge/?version=latest\n   :target: http://testcontainers-python.readthedocs.io/en/latest/?badge=latest\n\npython port for testcontainers-java that allows using docker containers for functional and integration testing. testcontainers-python provides capabilities to spin up docker containers (such as a database, selenium web browser, or any other container) for testing.\n\ncurrently available features:\n\n* selenium grid containers\n* selenium standalone containers\n* mysql db container\n* mariadb container\n* neo4j container\n* oracledb container\n* postgresql db container\n* clickhouse container\n* microsoft sql server container\n* generic docker containers\n* arangodb container\n* localstack\n* rabbitmq\n* keycloak\n* azurite container\n\ninstallation\n------------\n\nthe testcontainers package is available from `pypi <https://pypi.org/project/testcontainers/>`_, and it can be installed using :code:`pip`. depending on which containers are needed, you can specify additional dependencies as `extras <https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies>`_:\n\n.. code-block:: bash\n\n    # install without extras\n    pip install testcontainers\n    # install with one or more extras\n    pip install testcontainers[mysql]\n    pip install testcontainers[mysql,oracle]\n\nbasic usage\n-----------\n\n.. code-block::\n\n    >>> from testcontainers.postgres import postgrescontainer\n    >>> import sqlalchemy\n\n    >>> postgres_container = postgrescontainer(\"postgres:9.5\")\n    >>> with postgres_container as postgres:\n    ...     e = sqlalchemy.create_engine(postgres.get_connection_url())\n    ...     result = e.execute(\"select version()\")\n    ...     version, = result.fetchone()\n    >>> version\n    'postgresql 9.5...'\n\nthe snippet above will spin up a postgres database in a container. the :code:`get_connection_url()` convenience method returns a :code:`sqlalchemy` compatible url we use to connect to the database and retrieve the database version.\n\nmore extensive documentation can be found at `read the docs <http://testcontainers-python.readthedocs.io/>`_.\n\nusage within docker (e.g., in a ci)\n-----------------------------------\n\nwhen trying to launch a testcontainer from within a docker container two things have to be provided:\n\n1. the container has to provide a docker client installation. either use an image that has docker pre-installed (e.g. the `official docker images <https://hub.docker.com/_/docker>`_) or install the client from within the `dockerfile` specification.\n2. the container has to have access to the docker daemon which can be achieved by mounting `/var/run/docker.sock` or setting the `docker_host` environment variable as part of your `docker run` command.\n\n\nsetting up a development environment\n------------------------------------\n\nwe recommend you use a `virtual environment <https://virtualenv.pypa.io/en/stable/>`_ for development. note that a python version :code:`>=3.7` is required. after setting up your virtual environment, you can install all dependencies and test the installation by running the following snippet.\n\n.. code-block:: bash\n\n    pip install -r requirements/$(python -c 'import sys; print(\"%d.%d\" % sys.version_info[:2])').txt\n    pytest -s\n\nadding requirements\n^^^^^^^^^^^^^^^^^^^\n\nwe use :code:`pip-tools` to resolve and manage dependencies. if you need to add a dependency to testcontainers or one of the extras, modify the :code:`setup.py` as well as the :code:`requirements.in` accordingly and then run :code:`pip install pip-tools` followed by :code:`make requirements` to update the requirements files.\n\ncontributing a new container\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can contribute a new container in three steps:\n\n1. create a new module at :code:`testcontainers/[my fancy container].py` that implements the new functionality.\n2. create a new test module at :code:`tests/test_[my fancy container].py` that tests the new functionality.\n3. add :code:`[my fancy container]` to the list of test components in the github action configuration at :code:`.github/workflows/main.yml`.\n\n\n",
  "docs_url": null,
  "keywords": "testing,logging,docker,test automation",
  "license": "",
  "name": "testcontainers",
  "package_url": "https://pypi.org/project/testcontainers/",
  "project_url": "https://pypi.org/project/testcontainers/",
  "project_urls": {
    "Homepage": "https://github.com/testcontainers/testcontainers-python"
  },
  "release_url": "https://pypi.org/project/testcontainers/3.7.1/",
  "requires_dist": [
    "docker (>=4.0.0)",
    "wrapt",
    "deprecation",
    "python-arango ; extra == 'arangodb'",
    "azure-storage-blob ; extra == 'azurite'",
    "clickhouse-driver ; extra == 'clickhouse'",
    "docker-compose ; extra == 'docker-compose'",
    "google-cloud-pubsub (<2) ; extra == 'google-cloud-pubsub'",
    "kafka-python ; extra == 'kafka'",
    "python-keycloak ; extra == 'keycloak'",
    "pymongo ; extra == 'mongo'",
    "pymssql ; extra == 'mssqlserver'",
    "sqlalchemy ; extra == 'mysql'",
    "pymysql ; extra == 'mysql'",
    "neo4j ; extra == 'neo4j'",
    "sqlalchemy ; extra == 'oracle'",
    "cx-Oracle ; extra == 'oracle'",
    "sqlalchemy ; extra == 'postgresql'",
    "psycopg2-binary ; extra == 'postgresql'",
    "pika ; extra == 'rabbitmq'",
    "redis ; extra == 'redis'",
    "selenium ; extra == 'selenium'"
  ],
  "requires_python": ">=3.7",
  "summary": "library provides lightweight, throwaway instances of common databases, selenium web browsers, or anything else that can run in a docker container",
  "version": "3.7.1",
  "releases": [],
  "developers": [
    "automationremarks@gmail.com",
    "sergey_pirogov"
  ],
  "kwds": "testcontainer testcontainers docker dockerfile containers",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_testcontainers",
  "homepage": "https://github.com/testcontainers/testcontainers-python",
  "release_count": 29,
  "dependency_ids": [
    "pypi_azure_storage_blob",
    "pypi_clickhouse_driver",
    "pypi_cx_oracle",
    "pypi_deprecation",
    "pypi_docker",
    "pypi_docker_compose",
    "pypi_google_cloud_pubsub",
    "pypi_kafka_python",
    "pypi_neo4j",
    "pypi_pika",
    "pypi_psycopg2_binary",
    "pypi_pymongo",
    "pypi_pymssql",
    "pypi_pymysql",
    "pypi_python_arango",
    "pypi_python_keycloak",
    "pypi_redis",
    "pypi_selenium",
    "pypi_sqlalchemy",
    "pypi_wrapt"
  ]
}
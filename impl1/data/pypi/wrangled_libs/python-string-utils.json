{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: software development :: libraries"
  ],
  "description": "[![build status](https://travis-ci.com/daveoncode/python-string-utils.svg?branch=develop)](https://travis-ci.com/daveoncode/python-string-utils)\n[![codecov](https://codecov.io/gh/daveoncode/python-string-utils/branch/develop/graph/badge.svg)](https://codecov.io/gh/daveoncode/python-string-utils)\n[![documentation status](https://readthedocs.org/projects/python-string-utils/badge/?version=develop)](https://python-string-utils.readthedocs.io/en/develop)\n[![python 3.5](https://img.shields.io/badge/python-3.5-blue.svg)](https://www.python.org/downloads/release/python-350/)\n[![python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n[![python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)](https://www.python.org/downloads/release/python-380/)\n\n# python string utils\n##### latest version: [1.0.0](https://github.com/daveoncode/python-string-utils/blob/master/changelog.md) (march 2020)\n\na handy library to validate, manipulate and generate strings, which is:\n\n- simple and \"pythonic\"\n- fully documented and with examples! (html version on [readthedocs.io](https://python-string-utils.readthedocs.io/en/develop))\n- 100% code coverage! (see it with your own eyes on [codecov.io](https://codecov.io/gh/daveoncode/python-string-utils/branch/develop))\n- tested (automatically on each push thanks to travis ci) against all officially supported python versions\n- fast (mostly based on compiled regex)\n- free from external dependencies\n- pep8 compliant\n\n\n## what's inside...\n\n### library structure\n\nthe library basically consists in the python package `string_utils`, containing the following modules:\n\n- `validation.py` (contains string check api)\n- `manipulation.py` (contains string transformation api)\n- `generation.py` (contains string generation api)\n- `errors.py` (contains library-specific errors)\n- `_regex.py` (contains compiled regex **for internal usage only**)\n\nplus a secondary package `tests` which includes several submodules.\\\nspecifically one for each test suite and named according to the api to test (eg. tests for `is_ip()` \nwill be in `test_is_ip.py` and so on).\n\nall the public api are importable directly from the main package `string_utils`, so this:\n\n`from string_utils.validation import is_ip`\n\ncan be simplified as:\n\n `from string_utils import is_ip`\n\n### api overview\n\n***bear in mind**: this is just an overview, \nfor the full api documentation see:* [readthedocs.io](https://python-string-utils.readthedocs.io/en/develop)\n\n#### string validation functions:\n\n\n**is_string**: checks if the given object is a string\n~~~~\nis_string('hello') # returns true\nis_string(b'hello') # returns false\n~~~~\n\n**is_full_string**: checks if the given object is non empty string\n~~~~\nis_full_string(none) # returns false\nis_full_string('') # returns false\nis_full_string(' ') # returns false\nis_full_string('foo') # returns true\n~~~~\n\n**is_number**: checks if the given string represents a valid number\n~~~~\nis_number('42') # returns true\nis_number('-25.99') # returns true\nis_number('1e3') # returns true\nis_number(' 1 2 3 ') # returns false\n~~~~\n\n**is_integer**: checks if the given string represents a valid integer\n~~~~\nis_integer('42') # returns true\nis_integer('42.0') # returns false\n~~~~\n\n**is_decimal**: checks if the given string represents a valid decimal number\n~~~~\nis_decimal('42.0') # returns true\nis_decimal('42') # returns false\n~~~~\n\n**is_url**: checks if the given string is an url\n~~~~\nis_url('foo.com') # returns false\nis_url('http://www.foo.com') # returns true\nis_url('https://foo.com') # returns true\n~~~~\n\n**is_email**: checks if the given string is an email\n~~~~\nis_email('my.email@some.provider.com') # returns true\nis_eamil('@gmail.com') # retruns false\n~~~~\n\n**is_credit_card**: checks if the given string is a credit card\n~~~~\nis_credit_card(value)\n\n# returns true if `value` represents a valid card number for one of these:\n# visa, mastercard, american express, diners club, discover or jcb\n~~~~\n\n**is_camel_case**: checks if the given string is formatted as camel case\n~~~~\nis_camel_case('mycamelcase') # returns true\nis_camel_case('hello') # returns false\n~~~~\n\n**is_snake_case**: checks if the given string is formatted as snake case\n~~~~\nis_snake_case('snake_bites') # returns true\nis_snake_case('nope') # returns false\n~~~~\n\n**is_json**: checks if the given string is a valid json\n~~~~\nis_json('{\"first_name\": \"peter\", \"last_name\": \"parker\"}') # returns true\nis_json('[1, 2, 3]') # returns true\nis_json('{nope}') # returns false\n~~~~\n\n**is_uuid**: checks if the given string is a valid uuid\n~~~~\nis_uuid('ce2cd4ee-83de-46f6-a054-5ee4ddae1582') # returns true\n~~~~\n\n**is_ip_v4**: checks if the given string is a valid ip v4 address\n~~~~\nis_ip_v4('255.200.100.75') # returns true\nis_ip_v4('255.200.100.999') # returns false (999 is out of range)\n~~~~\n\n**is_ip_v6**: checks if the given string is a valid ip v6 address\n~~~~\nis_ip_v6('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\nis_ip_v6('123:db8:85a3:0000:0000:8a2e:370,1') # returns false\n~~~~\n\n**is_ip**: checks if the given string is a valid ip (any version)\n~~~~\nis_ip('255.200.100.75') # returns true\nis_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\nis_ip('255.200.100.999') # returns false\nis_ip('123:db8:85a3:0000:0000:8a2e:370,1') # returns false\n~~~~\n\n**is_isnb_13**: checks if the given string is a valid isbn 13\n~~~~\nis_isbn_13('9780312498580') # returns true\nis_isbn_13('978-0312498580') # returns true\nis_isbn_13('978-0312498580', normalize=false) # returns false\n~~~~\n\n**is_isbn_10**: checks if the given string is a valid isbn 10\n~~~~\nis_isbn_10('1506715214') # returns true\nis_isbn_10('150-6715214') # returns true\nis_isbn_10('150-6715214', normalize=false) # returns false\n~~~~\n\n**is_isbn**: checks if the given string is a valid isbn (any version)\n~~~~\nis_isbn('9780312498580') # returns true\nis_isbn('1506715214') # returns true\n~~~~\n\n**is_slug**: checks if the string is a slug (as created by `slugify()`)\n~~~~\nis_slug('my-blog-post-title') # returns true\nis_slug('my blog post title') # returns false\n~~~~\n\n**contains_html**: checks if the strings contains one ore more html/xml tag\n~~~~\ncontains_html('my string is <strong>bold</strong>') # returns true\ncontains_html('my string is not bold') # returns false\n~~~~\n\n**words_count**: returns the number of words contained in the string\n~~~~\nwords_count('hello world') # returns 2\nwords_count('one,two,three') # returns 3 (no need for spaces, punctuation is recognized!)\n~~~~\n\n**is_palindrome**: checks if the string is a palindrome\n~~~~\nis_palindrome('lol') # returns true\nis_palindrome('rotfl') # returns false\n~~~~\n\n**is_pangram**: checks if the string is a pangram\n~~~~\nis_pangram('the quick brown fox jumps over the lazy dog') # returns true\nis_pangram('hello world') # returns false\n~~~~\n\n**is_isogram**: checks if the string is an isogram\n~~~~\nis_isogram('dermatoglyphics') # returns true\nis_isogram('hello') # returns false\n~~~~\n\n#### string manipulation:\n\n**camel_case_to_snake**:  converts a camel case formatted string into a snake case one\n~~~~\ncamel_case_to_snake('thisisacamelstringtest') # returns 'this_is_a_camel_case_string_test'\n~~~~\n\n**snake_case_to_camel**: converts a snake case formatted string into a camel case one\n~~~~\nsnake_case_to_camel('the_snake_is_green') # returns 'thesnakeisgreen'\n~~~~\n\n**reverse**: returns the string in a reversed order\n~~~\nreverse('hello') # returns 'olleh'\n~~~\n\n**shuffle**: returns the string with its original chars but at randomized positions\n~~~~\nshuffle('hello world') # possible output: 'l wodheorll'\n~~~~\n\n**strip_html**: removes all the html/xml tags found in a string\n~~~~\nstrip_html('test: <a href=\"foo/bar\">click here</a>') # returns 'test: '\nstrip_html('test: <a href=\"foo/bar\">click here</a>', keep_tag_content=true) # returns 'test: click here'\n~~~~\n\n**prettify**: reformat a string by applying basic grammar and formatting rules\n~~~~\nprettify(' unprettified string ,, like this one,will be\"prettified\" .it\\' s awesome! ')\n# the ouput will be: 'unprettified string, like this one, will be \"prettified\". it\\'s awesome!'\n~~~~\n\n**asciify**: converts all non-ascii chars contained in a string into the closest possible ascii representation\n~~~~\nasciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00e5\u00e0\u00e1\u00e7\u00ec\u00ed\u00f1\u00f3\u00eb') \n# returns 'eeuuooaaeynaaaciinoe' (string is deliberately dumb in order to show char conversion)\n~~~~\n\n**slugify**: convert a string into a formatted \"slug\"\n~~~~\nslugify('top 10 reasons to love dogs!!!') # returns: 'top-10-reasons-to-love-dogs'\n~~~~\n\n**booleanize**: convert a string into a boolean based on its content\n~~~~\nbooleanize('true') # returns true\nbooleanize('yes') # returns true\nbooleanize('y') # returns true\nbooleanize('1') # returns true\nbooelanize('something else') # returns false\n~~~~\n\n**strip_margin**: removes left indentation from multi-line strings (inspired by scala)\n~~~~\nstrip_margin('''\n        line 1\n        line 2\n        line 3\n''')\n\n#returns:\n'''\nline 1\nline 2\nline 3\n'''\n~~~~\n\n**compress/decompress**: compress strings into shorted ones that can be restored back to the original one later on\n~~~~\ncompressed = compress(my_long_string) # shorter string (url safe base64 encoded)\n\ndecompressed = decompress(compressed) # string restored\n\nassert(my_long_string == decompressed) # yep\n~~~~\n\n**roman_encode**: encode integers/string into roman numbers\n~~~\nroman_encode(37) # returns 'xxxvii'\n~~~~\n\n**roman_decode**: decode roman number into an integer\n~~~~\nroman_decode('xxxvii') # returns 37\n~~~~\n\n**roman_range**: generator which returns roman numbers on each iteration\n~~~~\nfor n in roman_range(10): print(n) # prints: i, ii, iii, iv, v, vi, vii, viii, ix, x\nfor n in roman_range(start=7, stop=1, step=-1): print(n) # prints: vii, vi, v, iv, iii, ii, i\n~~~~\n\n#### string generations:\n\n**uuid**: returns the string representation of a newly created uuid object\n~~~~\nuuid() # possible output: 'ce2cd4ee-83de-46f6-a054-5ee4ddae1582'\nuuid(as_hex=true) # possible output: 'ce2cd4ee83de46f6a0545ee4ddae1582'\n~~~~\n\n**random_string**: creates a string of the specified size with random chars\n~~~~\nrandom_string(9) # possible output: 'k1urtltu5'\n~~~~\n\n**secure_random_hex**: creates an hexadecimal string using a secure strong random generator\n~~~~\nsecure_random_hex(12) \n# possible ouput: 'd1eedff4033a2e9867c37ded' \n# (len is 24, because 12 represents the number of random bytes generated, which are then converted to hexadecimal value)\n~~~~\n\n\n## installation\n\n    pip install python-string-utils\n\n\n## checking installed version\n\n~~~\nimport string_utils\nstring_utils.__version__\n'1.0.0' # (if '1.0.0' is the installed version)\n~~~\n\n## documentation\n\nfull api documentation available on [readthedocs.io](https://python-string-utils.readthedocs.io/en/develop)\n\n\n## support the project!\n\ndo you like this project? would you like to see it updated more often with new features and improvements?\nif so, you can make a small donation by clicking the button down below, it would be really appreciated! :)\n\n<a href=\"https://www.buymeacoffee.com/c4yyuvp\" target=\"_blank\">\n<img src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" width=\"217\" height=\"51\" />\n</a>\n\n\n",
  "docs_url": null,
  "keywords": "string str utilities validation compression development",
  "license": "mit",
  "name": "python-string-utils",
  "package_url": "https://pypi.org/project/python-string-utils/",
  "project_url": "https://pypi.org/project/python-string-utils/",
  "project_urls": {
    "Homepage": "https://github.com/daveoncode/python-string-utils"
  },
  "release_url": "https://pypi.org/project/python-string-utils/1.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "utility functions for strings validation and manipulation.",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "davide_zanotti",
    "davidezanotti@gmail.com"
  ],
  "kwds": "string_utils daveoncode codecov pythonic roman_encode",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_string_utils",
  "homepage": "https://github.com/daveoncode/python-string-utils",
  "release_count": 9,
  "dependency_ids": []
}
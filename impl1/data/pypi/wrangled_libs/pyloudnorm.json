{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: multimedia :: sound/audio",
    "topic :: scientific/engineering"
  ],
  "description": "\n# pyloudnorm  [![build status](https://travis-ci.org/csteinmetz1/pyloudnorm.svg?branch=master)](https://travis-ci.org/csteinmetz1/pyloudnorm) ![zenodo](https://zenodo.org/badge/doi/10.5281/zenodo.3551801.svg)\nflexible audio loudness meter in python. \n\nimplementation of [itu-r bs.1770-4](https://www.itu.int/dms_pubrec/itu-r/rec/bs/r-rec-bs.1770-4-201510-i!!pdf-e.pdf). <br/>\nallows control over gating block size and frequency weighting filters for additional control. \n\nfor full details on the implementation see our [paper](https://csteinmetz1.github.io/pyloudnorm-eval/paper/pyloudnorm_preprint.pdf) with a summary in our [aes presentation video](https://www.youtube.com/watch?v=krsjpq3d4ge).\n\n## installation\nyou can install with pip as follows\n```\npip install pyloudnorm\n```\n\nfor the latest releases always install from the github repo\n```\npip install git+https://github.com/csteinmetz1/pyloudnorm\n```\n## usage\n\n### find the loudness of an audio file\nit's easy to measure the loudness of a wav file. \nhere we use pysoundfile to read a .wav file as an ndarray.\n```python\nimport soundfile as sf\nimport pyloudnorm as pyln\n\ndata, rate = sf.read(\"test.wav\") # load audio (with shape (samples, channels))\nmeter = pyln.meter(rate) # create bs.1770 meter\nloudness = meter.integrated_loudness(data) # measure loudness\n```\n\n### loudness normalize and peak normalize audio files\nmethods are included to normalize audio files to desired peak values or desired loudness.\n```python\nimport soundfile as sf\nimport pyloudnorm as pyln\n\ndata, rate = sf.read(\"test.wav\") # load audio\n\n# peak normalize audio to -1 db\npeak_normalized_audio = pyln.normalize.peak(data, -1.0)\n\n# measure the loudness first \nmeter = pyln.meter(rate) # create bs.1770 meter\nloudness = meter.integrated_loudness(data)\n\n# loudness normalize audio to -12 db lufs\nloudness_normalized_audio = pyln.normalize.loudness(data, loudness, -12.0)\n```\n\n### advanced operation\na number of alternate weighting filters are available, as well as the ability to adjust the analysis block size. \nexamples are shown below.\n```python\nimport soundfile as sf\nimport pyloudnorm as pyln\nfrom pyloudnorm import iirfilter\n\ndata, rate = sf.read(\"test.wav\") # load audio\n\n# block size\nmeter1 = pyln.meter(rate)                               # 400ms block size\nmeter2 = pyln.meter(rate, block_size=0.200)             # 200ms block size\n\n# filter classes\nmeter3 = pyln.meter(rate)                               # bs.1770 meter\nmeter4 = pyln.meter(rate, filter_class=\"deman\")         # fully compliant filters  \nmeter5 = pyln.meter(rate, filter_class=\"fenton/lee 1\")  # low complexity improvement by fenton and lee\nmeter6 = pyln.meter(rate, filter_class=\"fenton/lee 2\")  # higher complexity improvement by fenton and lee\nmeter7 = pyln.meter(rate, filter_class=\"dash et al.\")   # early modification option\n\n# create your own iir filters\nmy_high_pass  = iirfilter(0.0, 0.5, 20.0, rate, 'high_pass')\nmy_high_shelf = iirfilter(2.0, 0.7, 1525.0, rate, 'high_shelf')\n\n# create a meter initialized without filters\nmeter8 = pyln.meter(rate, filter_class=\"custom\")\n\n# load your filters into the meter\nmeter8._filters = {'my_high_pass' : my_high_pass, 'my_high_shelf' : my_high_shelf}\n\n```\n\n## dependancies\n- **scipy** ([https://www.scipy.org/](https://www.scipy.org/))\n- **numpy** ([http://www.numpy.org/](http://www.numpy.org/))\n\n\n## citation\nif you use pyloudnorm in your work please consider citing us.\n```\n@inproceedings{steinmetz2021pyloudnorm,\n        title={pyloudnorm: {a} simple yet flexible loudness meter in python},\n        author={steinmetz, christian j. and reiss, joshua d.},\n        booktitle={150th aes convention},\n        year={2021}}\n```\n\n## references\n\n> ian dash, luis miranda, and densil cabrera, \"[multichannel loudness listening test](http://www.aes.org/e-lib/browse.cfm?elib=14581),\"\n> 124th international convention of the audio engineering society, may 2008\n\n> pedro d. pestana and \u00e1lvaro barbosa, \"[accuracy of itu-r bs.1770 algorithm in evaluating multitrack material](http://www.aes.org/e-lib/online/browse.cfm?elib=16608),\"\n> 133rd international convention of the audio engineering society, october 2012\n\n> pedro d. pestana, josh d. reiss, and \u00e1lvaro barbosa, \"[loudness measurement of multitrack audio content using modifications of itu-r bs.1770](http://www.aes.org/e-lib/browse.cfm?elib=16714),\"\n> 134th international convention of the audio engineering society, may 2013\n\n> steven fenton and hyunkook lee, \"[alternative weighting filters for multi-track program loudness measurement](http://www.aes.org/e-lib/browse.cfm?elib=19215),\"\n> 143rd international convention of the audio engineering society, october 2017\n\n> brecht de man, \"[evaluation of implementations of the ebu r128 loudness measurement](http://www.aes.org/e-lib/browse.cfm?elib=19790),\" \n> 145th international convention of the audio engineering society, october 2018. \n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyloudnorm",
  "package_url": "https://pypi.org/project/pyloudnorm/",
  "project_url": "https://pypi.org/project/pyloudnorm/",
  "project_urls": {
    "Homepage": "https://github.com/csteinmetz1/pyloudnorm"
  },
  "release_url": "https://pypi.org/project/pyloudnorm/0.1.1/",
  "requires_dist": [
    "scipy (>=1.0.1)",
    "numpy (>=1.14.2)",
    "future (>=0.16.0)"
  ],
  "requires_python": ">=3.0",
  "summary": "implementation of itu-r bs.1770-4 loudness algorithm in python.",
  "version": "0.1.1",
  "releases": [],
  "developers": [
    "c.j.steinmetz@qmul.ac.uk",
    "christian_steinmetz"
  ],
  "kwds": "loudness_normalized_audio integrated_loudness peak_normalized_audio pyloudnorm_preprint pysoundfile",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyloudnorm",
  "homepage": "https://github.com/csteinmetz1/pyloudnorm",
  "release_count": 3,
  "dependency_ids": [
    "pypi_future",
    "pypi_numpy",
    "pypi_scipy"
  ]
}
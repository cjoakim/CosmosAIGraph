{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/58739961/187154444-fce76639-ac8d-429b-9354-c6fac64b7ef8.jpg\" width=\"600\"/>\n  <div>&nbsp;</div>\n  <div align=\"center\">\n    <b><font size=\"5\">openmmlab website</font></b>\n    <sup>\n      <a href=\"https://openmmlab.com\">\n        <i><font size=\"4\">hot</font></i>\n      </a>\n    </sup>\n    &nbsp;&nbsp;&nbsp;&nbsp;\n    <b><font size=\"5\">openmmlab platform</font></b>\n    <sup>\n      <a href=\"https://platform.openmmlab.com\">\n        <i><font size=\"4\">try it out</font></i>\n      </a>\n    </sup>\n  </div>\n  <div>&nbsp;</div>\n\n[![pypi - python version](https://img.shields.io/pypi/pyversions/mmengine)](https://pypi.org/project/mmengine/)\n[![pypi](https://img.shields.io/pypi/v/mmengine)](https://pypi.org/project/mmengine)\n[![license](https://img.shields.io/github/license/open-mmlab/mmengine.svg)](https://github.com/open-mmlab/mmengine/blob/main/license)\n[![open issues](https://isitmaintained.com/badge/open/open-mmlab/mmengine.svg)](https://github.com/open-mmlab/mmengine/issues)\n[![issue resolution](https://isitmaintained.com/badge/resolution/open-mmlab/mmengine.svg)](https://github.com/open-mmlab/mmengine/issues)\n\n[\ud83d\udcd8documentation](https://mmengine.readthedocs.io/en/latest/) |\n[\ud83d\udee0\ufe0finstallation](https://mmengine.readthedocs.io/en/latest/get_started/installation.html) |\n[\ud83e\udd14reporting issues](https://github.com/open-mmlab/mmengine/issues/new/choose)\n\n</div>\n\n<div align=\"center\">\n\nenglish | [\u7b80\u4f53\u4e2d\u6587](readme_zh-cn.md)\n\n</div>\n\n<div align=\"center\">\n  <a href=\"https://openmmlab.medium.com/\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219255827-67c1a27f-f8c5-46a9-811d-5e57448c61d1.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://discord.com/channels/1037617289144569886/1073056342287323168\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218347213-c080267f-cbb6-443e-8532-8e1ed9a58ea9.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://twitter.com/openmmlab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218346637-d30c8a0f-3eba-4699-8131-512fb06d46db.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://www.youtube.com/openmmlab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/218346691-ceb2116a-465a-40af-8424-9f30d2348ca9.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://space.bilibili.com/1293512903\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219026751-d7d14cce-a7c9-4e82-9942-8375fca65b99.png\" width=\"3%\" alt=\"\" /></a>\n  <img src=\"https://user-images.githubusercontent.com/25839884/218346358-56cc8e2f-a2b8-487f-9088-32480cceabcf.png\" width=\"3%\" alt=\"\" />\n  <a href=\"https://www.zhihu.com/people/openmmlab\" style=\"text-decoration:none;\">\n    <img src=\"https://user-images.githubusercontent.com/25839884/219026120-ba71e48b-6e94-4bd4-b4e9-b7d175b5e362.png\" width=\"3%\" alt=\"\" /></a>\n</div>\n\n## what's new\n\nv0.10.1 was released on 2023-11-22.\n\nhighlights:\n\n- support installing mmengine-lite with no dependency on opencv. refer to the [installation](https://mmengine.readthedocs.io/en/latest/get_started/installation.html#install-mmengine) for more details.\n\n- support training with [colossalai](https://colossalai.org/). refer to the [training large models](https://mmengine.readthedocs.io/en/latest/common_usage/large_model_training.html#colossalai) for more detailed usages.\n\n- support gradient checkpointing. refer to the [save memory on gpu](https://mmengine.readthedocs.io/en/latest/common_usage/save_gpu_memory.html#gradient-checkpointing) for more details.\n\n- supports multiple visualization backends, including `neptunevisbackend`, `dvclivevisbackend` and `aimvisbackend`. refer to [visualization backends](https://mmengine.readthedocs.io/en/latest/common_usage/visualize_training_log.html) for more details.\n\nread [changelog](./docs/en/notes/changelog.md#v0101-22112023) for more details.\n\n## table of contents\n\n- [introduction](#introduction)\n- [installation](#installation)\n- [get started](#get-started)\n- [learn more](#learn-more)\n- [contributing](#contributing)\n- [citation](#citation)\n- [license](#license)\n- [ecosystem](#ecosystem)\n- [projects in openmmlab](#projects-in-openmmlab)\n\n## introduction\n\nmmengine is a foundational library for training deep learning models based on pytorch. it provides a solid engineering foundation and frees developers from writing redundant codes on workflows. it serves as the training engine of all openmmlab codebases, which support hundreds of algorithms in various research areas. moreover, mmengine is also generic to be applied to non-openmmlab projects.\n\nmajor features:\n\n1. **a universal and powerful runner**:\n\n   - supports training different tasks with a small amount of code, e.g., imagenet can be trained with only 80 lines of code (400 lines of the original pytorch example).\n   - easily compatible with models from popular algorithm libraries such as timm, torchvision, and detectron2.\n\n2. **open architecture with unified interfaces**:\n\n   - handles different algorithm tasks with unified apis, e.g., implement a method and apply it to all compatible models.\n   - provides a unified abstraction for upper-level algorithm libraries, which supports various back-end devices such as nvidia cuda, mac mps, amd, mlu, and more for model training.\n\n3. **customizable training process**:\n\n   - defines the training process just like playing with legos.\n   - provides rich components and strategies.\n   - complete controls on the training process with different levels of apis.\n\n![mmengine_dataflow](https://github.com/open-mmlab/mmengine/assets/58739961/267db9cb-72e4-4af2-a58b-877b30091acc)\n\n## installation\n\nbefore installing mmengine, please ensure that pytorch has been successfully installed following the [official guide](https://pytorch.org/get-started/locally/).\n\ninstall mmengine\n\n```bash\npip install -u openmim\nmim install mmengine\n```\n\nverify the installation\n\n```bash\npython -c 'from mmengine.utils.dl_utils import collect_env;print(collect_env())'\n```\n\n## get started\n\ntaking the training of a resnet-50 model on the cifar-10 dataset as an example, we will use mmengine to build a complete, configurable training and validation process in less than 80 lines of code.\n\n<details>\n<summary>build models</summary>\n\nfirst, we need to define a **model** which 1) inherits from `basemodel` and 2) accepts an additional argument `mode` in the `forward` method, in addition to those arguments related to the dataset.\n\n- during training, the value of `mode` is \"loss\", and the `forward` method should return a `dict` containing the key \"loss\".\n- during validation, the value of `mode` is \"predict\", and the forward method should return results containing both predictions and labels.\n\n```python\nimport torch.nn.functional as f\nimport torchvision\nfrom mmengine.model import basemodel\n\nclass mmresnet50(basemodel):\n    def __init__(self):\n        super().__init__()\n        self.resnet = torchvision.models.resnet50()\n\n    def forward(self, imgs, labels, mode):\n        x = self.resnet(imgs)\n        if mode == 'loss':\n            return {'loss': f.cross_entropy(x, labels)}\n        elif mode == 'predict':\n            return x, labels\n```\n\n</details>\n\n<details>\n<summary>build datasets</summary>\n\nnext, we need to create **dataset**s and **dataloader**s for training and validation.\nin this case, we simply use built-in datasets supported in torchvision.\n\n```python\nimport torchvision.transforms as transforms\nfrom torch.utils.data import dataloader\n\nnorm_cfg = dict(mean=[0.491, 0.482, 0.447], std=[0.202, 0.199, 0.201])\ntrain_dataloader = dataloader(batch_size=32,\n                              shuffle=true,\n                              dataset=torchvision.datasets.cifar10(\n                                  'data/cifar10',\n                                  train=true,\n                                  download=true,\n                                  transform=transforms.compose([\n                                      transforms.randomcrop(32, padding=4),\n                                      transforms.randomhorizontalflip(),\n                                      transforms.totensor(),\n                                      transforms.normalize(**norm_cfg)\n                                  ])))\nval_dataloader = dataloader(batch_size=32,\n                            shuffle=false,\n                            dataset=torchvision.datasets.cifar10(\n                                'data/cifar10',\n                                train=false,\n                                download=true,\n                                transform=transforms.compose([\n                                    transforms.totensor(),\n                                    transforms.normalize(**norm_cfg)\n                                ])))\n```\n\n</details>\n\n<details>\n<summary>build metrics</summary>\n\nto validate and test the model, we need to define a **metric** called accuracy to evaluate the model. this metric needs to inherit from `basemetric` and implements the `process` and `compute_metrics` methods.\n\n```python\nfrom mmengine.evaluator import basemetric\n\nclass accuracy(basemetric):\n    def process(self, data_batch, data_samples):\n        score, gt = data_samples\n        # save the results of a batch to `self.results`\n        self.results.append({\n            'batch_size': len(gt),\n            'correct': (score.argmax(dim=1) == gt).sum().cpu(),\n        })\n    def compute_metrics(self, results):\n        total_correct = sum(item['correct'] for item in results)\n        total_size = sum(item['batch_size'] for item in results)\n        # returns a dictionary with the results of the evaluated metrics,\n        # where the key is the name of the metric\n        return dict(accuracy=100 * total_correct / total_size)\n```\n\n</details>\n\n<details>\n<summary>build a runner</summary>\n\nfinally, we can construct a **runner** with previously defined `model`, `dataloader`, and `metrics`, with some other configs, as shown below.\n\n```python\nfrom torch.optim import sgd\nfrom mmengine.runner import runner\n\nrunner = runner(\n    model=mmresnet50(),\n    work_dir='./work_dir',\n    train_dataloader=train_dataloader,\n    # a wrapper to execute back propagation and gradient update, etc.\n    optim_wrapper=dict(optimizer=dict(type=sgd, lr=0.001, momentum=0.9)),\n    # set some training configs like epochs\n    train_cfg=dict(by_epoch=true, max_epochs=5, val_interval=1),\n    val_dataloader=val_dataloader,\n    val_cfg=dict(),\n    val_evaluator=dict(type=accuracy),\n)\n```\n\n</details>\n\n<details>\n<summary>launch training</summary>\n\n```python\nrunner.train()\n```\n\n</details>\n\n## learn more\n\n<details>\n<summary>tutorials</summary>\n\n- [runner](https://mmengine.readthedocs.io/en/latest/tutorials/runner.html)\n- [dataset and dataloader](https://mmengine.readthedocs.io/en/latest/tutorials/dataset.html)\n- [model](https://mmengine.readthedocs.io/en/latest/tutorials/model.html)\n- [evaluation](https://mmengine.readthedocs.io/en/latest/tutorials/evaluation.html)\n- [optimwrapper](https://mmengine.readthedocs.io/en/latest/tutorials/optim_wrapper.html)\n- [parameter scheduler](https://mmengine.readthedocs.io/en/latest/tutorials/param_scheduler.html)\n- [hook](https://mmengine.readthedocs.io/en/latest/tutorials/hook.html)\n\n</details>\n\n<details>\n<summary>advanced tutorials</summary>\n\n- [registry](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/registry.html)\n- [config](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/config.html)\n- [basedataset](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/basedataset.html)\n- [data transform](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/data_transform.html)\n- [weight initialization](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/initialize.html)\n- [visualization](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/visualization.html)\n- [abstract data element](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/data_element.html)\n- [distribution communication](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/distributed.html)\n- [logging](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/logging.html)\n- [file io](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/fileio.html)\n- [global manager (managermixin)](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/manager_mixin.html)\n- [use modules from other libraries](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/cross_library.html)\n- [test time agumentation](https://mmengine.readthedocs.io/en/latest/advanced_tutorials/test_time_augmentation.html)\n\n</details>\n\n<details>\n<summary>examples</summary>\n\n- [train a gan](https://mmengine.readthedocs.io/en/latest/examples/train_a_gan.html)\n\n</details>\n\n<details>\n<summary>common usage</summary>\n\n- [resume training](https://mmengine.readthedocs.io/en/latest/common_usage/resume_training.html)\n- [speed up training](https://mmengine.readthedocs.io/en/latest/common_usage/speed_up_training.html)\n- [save memory on gpu](https://mmengine.readthedocs.io/en/latest/common_usage/save_gpu_memory.html)\n\n</details>\n\n<details>\n<summary>design</summary>\n\n- [hook](https://mmengine.readthedocs.io/en/latest/design/hook.html)\n- [runner](https://mmengine.readthedocs.io/en/latest/design/runner.html)\n- [evaluation](https://mmengine.readthedocs.io/en/latest/design/evaluation.html)\n- [visualization](https://mmengine.readthedocs.io/en/latest/design/visualization.html)\n- [logging](https://mmengine.readthedocs.io/en/latest/design/logging.html)\n- [infer](https://mmengine.readthedocs.io/en/latest/design/infer.html)\n\n</details>\n\n<details>\n<summary>migration guide</summary>\n\n- [migrate runner from mmcv to mmengine](https://mmengine.readthedocs.io/en/latest/migration/runner.html)\n- [migrate hook from mmcv to mmengine](https://mmengine.readthedocs.io/en/latest/migration/hook.html)\n- [migrate model from mmcv to mmengine](https://mmengine.readthedocs.io/en/latest/migration/model.html)\n- [migrate parameter scheduler from mmcv to mmengine](https://mmengine.readthedocs.io/en/latest/migration/param_scheduler.html)\n- [migrate data transform to openmmlab 2.0](https://mmengine.readthedocs.io/en/latest/migration/transform.html)\n\n</details>\n\n## contributing\n\nwe appreciate all contributions to improve mmengine. please refer to [contributing.md](contributing.md) for the contributing guideline.\n\n## citation\n\nif you find this project useful in your research, please consider cite:\n\n```\n@article{mmengine2022,\n  title   = {{mmengine}: openmmlab foundational library for training deep learning models},\n  author  = {mmengine contributors},\n  howpublished = {\\url{https://github.com/open-mmlab/mmengine}},\n  year={2022}\n}\n```\n\n## license\n\nthis project is released under the [apache 2.0 license](license).\n\n## ecosystem\n\n- [apes: attention-based point cloud edge sampling](https://github.com/junweizheng93/apes)\n- [diffengine: diffusers training toolbox with mmengine](https://github.com/okotaku/diffengine)\n\n## projects in openmmlab\n\n- [mim](https://github.com/open-mmlab/mim): mim installs openmmlab packages.\n- [mmcv](https://github.com/open-mmlab/mmcv): openmmlab foundational library for computer vision.\n- [mmeval](https://github.com/open-mmlab/mmeval): a unified evaluation library for multiple machine learning libraries.\n- [mmpretrain](https://github.com/open-mmlab/mmpretrain): openmmlab pre-training toolbox and benchmark.\n- [mmagic](https://github.com/open-mmlab/mmagic): open**mm**lab **a**dvanced, **g**enerative and **i**ntelligent **c**reation toolbox.\n- [mmdetection](https://github.com/open-mmlab/mmdetection): openmmlab detection toolbox and benchmark.\n- [mmyolo](https://github.com/open-mmlab/mmyolo): openmmlab yolo series toolbox and benchmark.\n- [mmdetection3d](https://github.com/open-mmlab/mmdetection3d): openmmlab's next-generation platform for general 3d object detection.\n- [mmrotate](https://github.com/open-mmlab/mmrotate): openmmlab rotated object detection toolbox and benchmark.\n- [mmtracking](https://github.com/open-mmlab/mmtracking): openmmlab video perception toolbox and benchmark.\n- [mmpose](https://github.com/open-mmlab/mmpose): openmmlab pose estimation toolbox and benchmark.\n- [mmsegmentation](https://github.com/open-mmlab/mmsegmentation): openmmlab semantic segmentation toolbox and benchmark.\n- [mmocr](https://github.com/open-mmlab/mmocr): openmmlab text detection, recognition, and understanding toolbox.\n- [mmhuman3d](https://github.com/open-mmlab/mmhuman3d): openmmlab 3d human parametric model toolbox and benchmark.\n- [mmselfsup](https://github.com/open-mmlab/mmselfsup): openmmlab self-supervised learning toolbox and benchmark.\n- [mmfewshot](https://github.com/open-mmlab/mmfewshot): openmmlab fewshot learning toolbox and benchmark.\n- [mmaction2](https://github.com/open-mmlab/mmaction2): openmmlab's next-generation action understanding toolbox and benchmark.\n- [mmflow](https://github.com/open-mmlab/mmflow): openmmlab optical flow toolbox and benchmark.\n- [mmdeploy](https://github.com/open-mmlab/mmdeploy): openmmlab model deployment framework.\n- [mmrazor](https://github.com/open-mmlab/mmrazor): openmmlab model compression toolbox and benchmark.\n- [playground](https://github.com/open-mmlab/playground): a central hub for gathering and showcasing amazing projects built upon openmmlab.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "mmengine",
  "package_url": "https://pypi.org/project/mmengine/",
  "project_url": "https://pypi.org/project/mmengine/",
  "project_urls": {
    "Homepage": "https://github.com/open-mmlab/mmengine"
  },
  "release_url": "https://pypi.org/project/mmengine/0.10.1/",
  "requires_dist": [
    "addict",
    "matplotlib",
    "numpy",
    "pyyaml",
    "rich",
    "termcolor",
    "yapf",
    "opencv-python >=3",
    "regex ; sys_platform == \"win32\"",
    "addict ; extra == 'all'",
    "matplotlib ; extra == 'all'",
    "numpy ; extra == 'all'",
    "pyyaml ; extra == 'all'",
    "rich ; extra == 'all'",
    "termcolor ; extra == 'all'",
    "yapf ; extra == 'all'",
    "bitsandbytes ; extra == 'all'",
    "clearml ; extra == 'all'",
    "coverage ; extra == 'all'",
    "dadaptation ; extra == 'all'",
    "dvclive ; extra == 'all'",
    "lion-pytorch ; extra == 'all'",
    "lmdb ; extra == 'all'",
    "mlflow ; extra == 'all'",
    "parameterized ; extra == 'all'",
    "pydantic ==1.10.9 ; extra == 'all'",
    "pytest ; extra == 'all'",
    "transformers ; extra == 'all'",
    "aim <=3.17.5 ; (sys_platform != \"win32\") and extra == 'all'",
    "regex ; (sys_platform == \"win32\") and extra == 'all'",
    "bitsandbytes ; extra == 'tests'",
    "clearml ; extra == 'tests'",
    "coverage ; extra == 'tests'",
    "dadaptation ; extra == 'tests'",
    "dvclive ; extra == 'tests'",
    "lion-pytorch ; extra == 'tests'",
    "lmdb ; extra == 'tests'",
    "mlflow ; extra == 'tests'",
    "parameterized ; extra == 'tests'",
    "pydantic ==1.10.9 ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "transformers ; extra == 'tests'",
    "aim <=3.17.5 ; (sys_platform != \"win32\") and extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "engine of openmmlab projects",
  "version": "0.10.1",
  "releases": [],
  "developers": [
    "mmengine_authors",
    "openmmlab@gmail.com"
  ],
  "kwds": "openmmlab mmlab html labels href",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_mmengine",
  "homepage": "https://github.com/open-mmlab/mmengine",
  "release_count": 24,
  "dependency_ids": [
    "pypi_addict",
    "pypi_aim",
    "pypi_bitsandbytes",
    "pypi_clearml",
    "pypi_coverage",
    "pypi_dadaptation",
    "pypi_dvclive",
    "pypi_lion_pytorch",
    "pypi_lmdb",
    "pypi_matplotlib",
    "pypi_mlflow",
    "pypi_numpy",
    "pypi_opencv_python",
    "pypi_parameterized",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_regex",
    "pypi_rich",
    "pypi_termcolor",
    "pypi_transformers",
    "pypi_yapf"
  ]
}
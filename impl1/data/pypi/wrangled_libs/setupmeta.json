{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "operating system :: macos :: macos x",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: version control",
    "topic :: system :: installation/setup",
    "topic :: system :: software distribution",
    "topic :: utilities"
  ],
  "description": "simplify your setup.py\n======================\n\n.. image:: https://img.shields.io/pypi/v/setupmeta.svg\n    :target: https://pypi.org/project/setupmeta/\n    :alt: version on pypi\n\n.. image:: https://github.com/codrsquad/setupmeta/workflows/tests/badge.svg\n    :target: https://github.com/codrsquad/setupmeta/actions\n    :alt: tested with github actions\n\n.. image:: https://codecov.io/gh/codrsquad/setupmeta/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/codrsquad/setupmeta\n    :alt: test code codecov\n\n.. image:: https://img.shields.io/pypi/pyversions/setupmeta.svg\n    :target: https://github.com/codrsquad/setupmeta\n    :alt: python versions tested (link to github project)\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/setupmeta\n    :target: https://anaconda.org/conda-forge/setupmeta\n    :alt: version on conda-forge\n\n----\n\nwriting a ``setup.py`` typically involves lots of boilerplate and copy-pasting from project to project.\n\nthis package aims to simplify that and bring some dry_ principle to python packaging_.\nhere's what your (complete, and ready to ship to pypi) ``setup.py`` could look like with setupmeta_::\n\n    from setuptools import setup\n\n    setup(\n        name=\"myproject\",\n        versioning=\"distance\",          # optional, would activate tag-based versioning\n        setup_requires=\"setupmeta\"      # this is where setupmeta comes in\n    )\n\nand that should be it - setupmeta_ will take it from there, extracting everything else from the rest of your project\n(following typical conventions commonly used).\n\nyou can use the **explain** command (see commands_) to see what setupmeta_ deduced from your project,\nfor the above it would look something like this (you can see which file and which line each setting came from,\nnote that a lot of info is typically extracted from your project, if you follow usual conventions)::\n\n    ~/myproject: python setup.py explain\n\n              author: (auto-adjust     ) your name\n                  \\_: (myproject.py:7  ) your name<your@email.com>\n        author_email: (auto-adjust     ) your@email.com\n         description: (readme.rst:1    ) first line of your readme\n        entry_points: (entry_points.ini) [console_scripts] ...\n    install_requires: (requirements.txt) [\"click\", ...\n             license: (auto-fill       ) mit\n    long_description: (readme.rst      ) long description would be your inlined readme\n                name: (explicit        ) myproject\n          py_modules: (auto-fill       ) [\"myproject\"]\n      setup_requires: (explicit        ) [\"setupmeta\"]\n             version: (git             ) 1.2.3.post2\n          versioning: (explicit        ) distance\n\nsee examples_ for more.\n\n**note**: ``setupmeta``'s versioning is based on::\n\n    git describe --dirty --tags --long --first-parent --match 'v*.*'\n\n    # then, if above yields nothing, we try the more vague '*.*'\n\n    git describe --dirty --tags --long --first-parent --match '*.*'\n\nyou will need **git version >= 1.8.4** if you wish to use ``setupmeta``'s versioning capabilities.\n\n\ngoal\n====\n\nthe goal of this project is to:\n\n* allow to write very short (yet complete) ``setup.py``-s, without boilerplate, and encourage good common packaging_ practices\n\n* point out missing important info (example: version) in ``setup.py explain``\n\n* support tag-based versioning_ (like setuptools_scm_, but with super simple configuration/defaults and automated ``bump`` capability)\n\n* provide useful commands_ to see the metadata (**explain**), **version** (including support for bumping versions),\n  **cleanall**, etc\n\n\nhow it works?\n=============\n\n* everything that you explicitly provide in your original ``setuptools.setup()`` call is taken as-is (never changed),\n  and internally labelled as ``explicit``.\n  so if you don't like something that setupmeta_ deduces, you can always explicitly state it.\n\n* ``name`` is auto-filled from your setup.py's ``__title__`` (if there is one, sometimes having a constant is quite handy...)\n\n* ``packages`` and ``package_dir`` is auto-filled accordingly if you have a ``<name>/__init__.py`` or ``src/<name>/__init__.py`` file\n\n* ``py_modules`` is auto-filled if you have a ``<name>.py`` file\n\n* ``entry_points`` is auto-filled from file ``entry_points.ini`` (bonus: tools like pycharm have a nice syntax highlighter for those)\n\n* ``install_requires`` is auto-filled if you have a ``requirements.txt`` (or ``pinned.txt``) file,\n  pinning is abstracted away by default as per `community recommendation`_, see requirements_ for more info.\n\n* ``tests_require`` is auto-filled if you have a ``tests/requirements.txt``, or ``requirements-dev.txt``,\n  or ``dev-requirements.txt``, or ``test-requirements.txt`` file\n\n* ``description`` will be the 1st line of your readme (unless that 1st line is too short, or is just the project's name),\n  or the 1st line of the first docstring found in the scanned files (see list below)\n\n* ``long_description`` is auto-filled from your readme file (looking for ``readme.rst``, ``readme.md``,\n  then ``readme*``, first one found wins).\n  special tokens can be used (notation aimed at them easily being `rst comments`_):\n\n    * ``.. [[end long_description]]`` as end marker, so you don't have to use the entire file as long description\n\n    * ``.. [[include <relative-path>]]`` if you want another file included as well (for example, people like to add ``history.txt`` as well)\n\n    * these tokens must appear either at beginning/end of line, or be after/before at least one space character\n\n* ``version`` can be stated explicitly, or be computed from git tags using ``versioning=...`` (see versioning_ for more info):\n\n    * with ``versioning=\"distance\"``, your git tags will be of the form ``v{major}.{minor}.0``,\n      the number of commits since latest version tag will be used to auto-fill the \"patch\" part of the version:\n\n        * tag \"v1.0.0\", no commits since tag -> version is \"1.0.0\"\n\n        * tag \"v1.0.0\", 5 commits since tag -> version is \"1.0.5\"\n\n        * if checkout is dirty, a marker is added -> version would be \"1.0.5.post5.dirty\"\n\n    * with ``versioning=\"post\"``, your git tags will be of the form ``v{major}.{minor}.{patch}``,\n      a \"post\" addendum will be present if there are commits since latest version tag:\n\n        * tag \"v1.0.0\", no commits since tag -> version is \"1.0.0\"\n\n        * tag \"v1.0.0\", 5 commits since tag -> version is \"1.0.0.post5\"\n\n        * if checkout is dirty, a marker is added -> version would be \"1.0.0.post5.dirty\"\n\n    * with ``versioning=\"build-id\"``, your git tags will be of the form ``v{major}.{minor}.0``,\n      the number of commits since latest version tag will be used to auto-fill the \"patch\" part of the version:\n\n        * tag \"v1.0.0\", no commits since tag, ``build_id=12`` -> version is \"1.0.0+h12.g123\"\n\n        * tag \"v1.0.0\", no commits since tag, ``build_id`` not defined -> version is \"1.0.0+hlocal.g123\"\n\n        * tag \"v1.0.0\", 5 commits since tag, ``build_id=12`` -> version is \"1.0.5+h12.g456\"\n\n        * tag \"v1.0.0\", 5 commits since tag, ``build_id`` not defined -> version is \"1.0.5+hlocal.g456\"\n\n        * if checkout is dirty, a marker is added -> version would be \"1.0.5+hlocal.g456.dirty\"\n\n    * use the **bump** command (see commands_) to easily bump (ie: increment major, minor or patch + apply git tag)\n\n    * version format can be customized, see versioning_ for more info\n\n* ``version``, ``versioning``, ``url``, ``download_url``, ``bugtrack_url``, ``license``, ``keywords``, ``author``, ``contact``, ``maintainer``,\n  and ``platforms`` will be auto-filled from:\n\n    * lines of the form ``__key__ = \"value\"`` in your modules (simple constants only,\n      expressions are ignored - the modules are not imported but scanned using regexes)\n\n    * lines of the form ``key: value`` in your docstring\n\n    * files are examined in this order (first find wins):\n\n        * ``setup.py``\n\n        * ``<package>.py`` (mccabe_ for example)\n\n        * ``<package>/__about__.py`` (cryptography_ for example)\n\n        * ``<package>/__version__.py`` (requests_ for example)\n\n        * ``<package>/__init__.py`` (changes_, arrow_ for example)\n\n        * ``src/`` is also examined (for those who like to have their packages under ``src``)\n\n    * urls can be simplified:\n\n        * if ``url`` points to your general github repo (like: https://github.com/codrsquad),\n          the ``name`` of your project is auto-appended to it\n\n        * relative urls are auto-filled by prefixing them with ``url``\n\n        * urls may use ``{name}`` and/or ``{version}`` markers, it will be expanded appropriately\n\n    * ``author``, ``maintainer`` and ``contact`` names and emails can be combined into one line\n      (setupmeta_ will figure out the email part and auto-fill it properly)\n\n        * i.e.: ``author: bob d bob@example.com`` will yield the proper ``author`` and ``author_email`` settings\n\n\nthis should hopefully work nicely for the vast majority of python projects out there.\nif you need advanced stuff, you can still leverage setupmeta_ for all the usual stuff above, and go explicit wherever needed.\n\n\n.. _dry: https://en.wikipedia.org/wiki/don%27t_repeat_yourself\n\n.. _commands: https://github.com/codrsquad/setupmeta/blob/main/docs/commands.rst\n\n.. _requirements: https://github.com/codrsquad/setupmeta/blob/main/docs/requirements.rst\n\n.. _versioning: https://github.com/codrsquad/setupmeta/blob/main/docs/versioning.rst\n\n.. _community recommendation: https://packaging.python.org/discussions/install-requires-vs-requirements/\n\n.. _packaging: https://python-packaging.readthedocs.io/en/latest/\n\n.. _setuptools_scm: https://github.com/pypa/setuptools_scm\n\n.. _setupmeta: https://github.com/codrsquad/setupmeta\n\n.. _examples: https://github.com/codrsquad/setupmeta/tree/main/examples\n\n.. _rst comments: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#comments\n\n.. _requests: https://github.com/psf/requests/tree/main/src/requests\n\n.. _cryptography: https://github.com/pyca/cryptography/tree/main/src/cryptography\n\n.. _changes: https://github.com/michaeljoseph/changes/blob/main/changes/__init__.py\n\n.. _arrow: https://github.com/arrow-py/arrow/blob/master/arrow/__init__.py\n\n.. _mccabe: https://github.com/pycqa/mccabe/blob/master/mccabe.py\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "setupmeta",
  "package_url": "https://pypi.org/project/setupmeta/",
  "project_url": "https://pypi.org/project/setupmeta/",
  "project_urls": {
    "Download": "https://github.com/codrsquad/setupmeta/archive/v3.6.0.tar.gz",
    "Homepage": "https://github.com/codrsquad/setupmeta"
  },
  "release_url": "https://pypi.org/project/setupmeta/3.6.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "simplify your setup.py",
  "version": "3.6.0",
  "releases": [],
  "developers": [
    "zoran@simicweb.com",
    "zoran_simic"
  ],
  "kwds": "badge _setupmeta svg setupmeta_ setupmeta",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_setupmeta",
  "homepage": "https://github.com/codrsquad/setupmeta",
  "release_count": 58,
  "dependency_ids": []
}
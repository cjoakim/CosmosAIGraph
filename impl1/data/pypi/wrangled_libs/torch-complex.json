{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pytorch_complex\n\n[![pypi version](https://badge.fury.io/py/torch-complex.svg)](https://badge.fury.io/py/torch-complex)\n[![python versions](https://img.shields.io/pypi/pyversions/torch-complex.svg)](https://pypi.org/project/torch-complex/)\n[![downloads](https://pepy.tech/badge/torch-complex)](https://pepy.tech/project/torch-complex)\n[![build status](https://travis-ci.org/kamo-naoyuki/pytorch_complex.svg?branch=master)](https://travis-ci.org/kamo-naoyuki/pytorch_complex)\n[![codecov](https://codecov.io/gh/kamo-naoyuki/pytorch_complex/branch/master/graph/badge.svg)](https://codecov.io/gh/kamo-naoyuki/pytorch_complex)\n\na temporal python class for pytorch-complextensor\n\n\n## what is this?\na python class to perform as `complextensor` in pytorch: nothing except for the following,\n\n```python\nclass complextensor: \n    def __init__(self, ...):\n        self.real = torch.tensor(...)\n        self.imag = torch.tensor(...)\n```\n\n### why?\npytorch is great dnn python library, except that it doesn't support `complextensor` in python level.\n\nhttps://github.com/pytorch/pytorch/issues/755\n\ni'm looking forward to the completion, but i need `complextensor` for now.\n i created this cheap module for the temporal replacement of it. thus, i'll throw away this project as soon as  `complextensor` is completely supported!\n\n## requirements\n\n```\npython>=3.6\npytorch>=1.0\n```\n\n## install\n\n```\npip install torch_complex\n```\n\n## how to use\n\n### basic mathematical operation\n```python\nimport numpy as np\nfrom torch_complex.tensor import complextensor\n\nreal = np.random.randn(3, 10, 10)\nimag = np.random.randn(3, 10, 10)\n\nx = complextensor(real, imag)\nx.numpy()\n\nx + x\nx * x\nx - x\nx / x\nx ** 1.5\nx @ x  # batch-matmul\nx.conj()\nx.inverse() # batch-inverse\n```\n\nall are implemented with combinations of computation of `realtensor` in python level, thus the speed\u3000is not good enough.\n\n\n### functional\n\n```python\nimport torch_complex.functional as f\nf.cat([x, x])\nf.stack([x, x])\nf.matmul(x, x)  # same as x @ x\nf.einsum('bij,bjk,bkl->bil', [x, x, x])\n```\n\n### for dnn\nalmost all methods that `torch.tensor` has are implemented. \n\n```python\nx.cuda()\nx.cpu()\n(x + x).sum().backward()\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "torch-complex",
  "package_url": "https://pypi.org/project/torch-complex/",
  "project_url": "https://pypi.org/project/torch-complex/",
  "project_urls": {
    "Homepage": "https://github.com/kamo-naoyuki/torch_complex"
  },
  "release_url": "https://pypi.org/project/torch-complex/0.4.3/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "summary": "a fugacious python class for pytorch-complextensor",
  "version": "0.4.3",
  "releases": [],
  "developers": [
    "naoyuki.kamo829@gmail.com",
    "naoyuki_kamo"
  ],
  "kwds": "torch_complex pytorch_complex pytorch pyversions codecov",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_torch_complex",
  "homepage": "https://github.com/kamo-naoyuki/torch_complex",
  "release_count": 9,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
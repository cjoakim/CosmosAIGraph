{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "typing :: typed"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://www.attrs.org/\">\n    <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg\" width=\"35%\" alt=\"attrs\" />\n  </a>\n</p>\n\n\n*attrs* is the python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).\n[trusted by nasa](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for mars missions since 2020!\n\nits main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n\n## sponsors\n\n*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).\nespecially those generously supporting us at the *the organization* tier and higher:\n\n<p align=\"center\">\n   <a href=\"https://www.variomedia.de/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/variomedia.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/tidelift.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://sentry.io/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/sentry.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n\n   <a href=\"https://filepreviews.io/\">\n      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/filepreviews.svg\" width=\"200\" height=\"60\"></img>\n   </a>\n</p>\n\n<p align=\"center\">\n   <strong>please consider <a href=\"https://github.com/sponsors/hynek\">joining them</a> to help make <em>attrs</em>\u2019s maintenance more sustainable!</strong>\n</p>\n\n<!-- teaser-end -->\n\n## example\n\n*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:\n\n<!-- code-begin -->\n\n```pycon\n>>> from attrs import asdict, define, make_class, factory\n\n>>> @define\n... class someclass:\n...     a_number: int = 42\n...     list_of_numbers: list[int] = factory(list)\n...\n...     def hard_math(self, another_number):\n...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n>>> sc = someclass(1, [1, 2, 3])\n>>> sc\nsomeclass(a_number=1, list_of_numbers=[1, 2, 3])\n\n>>> sc.hard_math(3)\n19\n>>> sc == someclass(1, [1, 2, 3])\ntrue\n>>> sc != someclass(2, [3, 2, 1])\ntrue\n\n>>> asdict(sc)\n{'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n>>> someclass()\nsomeclass(a_number=42, list_of_numbers=[])\n\n>>> c = make_class(\"c\", [\"a\", \"b\"])\n>>> c(\"foo\", \"bar\")\nc(a='foo', b='bar')\n```\n\nafter *declaring* your attributes, *attrs* gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable `__repr__`,\n- equality-checking methods,\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\n**hate type annotations**!?\nno problem!\ntypes are entirely **optional** with *attrs*.\nsimply assign `attrs.field()` to the attributes instead of annotating them with types.\n\n---\n\nthis example uses *attrs*'s modern apis that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.\nthe classic apis (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.\n\nplease check out [*on the core api names*](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.\n\n\n## data classes\n\non the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).\nin practice it does a lot more and is more flexible.\nfor instance it allows you to define [special handling of numpy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).\n\nfor more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).\n\n\n## project information\n\n- [**changelog**](https://www.attrs.org/en/stable/changelog.html)\n- [**documentation**](https://www.attrs.org/)\n- [**pypi**](https://pypi.org/project/attrs/)\n- [**source code**](https://github.com/python-attrs/attrs)\n- [**contributing**](https://github.com/python-attrs/attrs/blob/main/.github/contributing.md)\n- [**third-party extensions**](https://github.com/python-attrs/attrs/wiki/extensions-to-attrs)\n- **license**: [mit](https://www.attrs.org/en/latest/license.html)\n- **get help**: please use the `python-attrs` tag on [stackoverflow](https://stackoverflow.com/questions/tagged/python-attrs)\n- **supported python versions**: 3.7 and later\n\n\n### *attrs* for enterprise\n\navailable as part of the tidelift subscription.\n\nthe maintainers of *attrs* and thousands of other packages are working with tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nsave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n[learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## release information\n\n### backwards-incompatible changes\n\n- python 3.6 has been dropped and packaging switched to static package data using [hatch](https://hatch.pypa.io/latest/).\n  [#993](https://github.com/python-attrs/attrs/issues/993)\n\n\n### deprecations\n\n- the support for *zope-interface* via the `attrs.validators.provides` validator is now deprecated and will be removed in, or after, april 2024.\n\n  the presence of a c-based package in our developement dependencies has caused headaches and we're not under the impression it's used a lot.\n\n  let us know if you're using it and we might publish it as a separate package.\n  [#1120](https://github.com/python-attrs/attrs/issues/1120)\n\n\n### changes\n\n- `attrs.filters.exclude()` and `attrs.filters.include()` now support the passing of attribute names as strings.\n  [#1068](https://github.com/python-attrs/attrs/issues/1068)\n- `attrs.has()` and `attrs.fields()` now handle generic classes correctly.\n  [#1079](https://github.com/python-attrs/attrs/issues/1079)\n- fix frozen exception classes when raised within e.g. `contextlib.contextmanager`, which mutates their `__traceback__` attributes.\n  [#1081](https://github.com/python-attrs/attrs/issues/1081)\n- `@frozen` now works with type checkers that implement [pep-681](https://peps.python.org/pep-0681/) (ex. [pyright](https://github.com/microsoft/pyright/)).\n  [#1084](https://github.com/python-attrs/attrs/issues/1084)\n- restored ability to unpickle instances pickled before 22.2.0.\n  [#1085](https://github.com/python-attrs/attrs/issues/1085)\n- `attrs.asdict()`'s and `attrs.astuple()`'s type stubs now accept the `attrs.attrsinstance` protocol.\n  [#1090](https://github.com/python-attrs/attrs/issues/1090)\n- fix slots class cellvar updating closure in cpython 3.8+ even when `__code__` introspection is unavailable.\n  [#1092](https://github.com/python-attrs/attrs/issues/1092)\n- `attrs.resolve_types()` can now pass `include_extras` to `typing.get_type_hints()` on python 3.9+, and does so by default.\n  [#1099](https://github.com/python-attrs/attrs/issues/1099)\n- added instructions for pull request workflow to `contributing.md`.\n  [#1105](https://github.com/python-attrs/attrs/issues/1105)\n- added *type* parameter to `attrs.field()` function for use with `attrs.make_class()`.\n\n  please note that type checkers ignore type metadata passed into `make_class()`, but it can be useful if you're wrapping _attrs_.\n  [#1107](https://github.com/python-attrs/attrs/issues/1107)\n- it is now possible for `attrs.evolve()` (and `attr.evolve()`) to change fields named `inst` if the instance is passed as a positional argument.\n\n  passing the instance using the `inst` keyword argument is now deprecated and will be removed in, or after, april 2024.\n  [#1117](https://github.com/python-attrs/attrs/issues/1117)\n- `attrs.validators.optional()` now also accepts a tuple of validators (in addition to lists of validators).\n  [#1122](https://github.com/python-attrs/attrs/issues/1122)\n\n\n\n---\n\n[full changelog](https://www.attrs.org/en/stable/changelog.html)\n",
  "docs_url": null,
  "keywords": "attribute,boilerplate,class",
  "license": "",
  "name": "attrs",
  "package_url": "https://pypi.org/project/attrs/",
  "project_url": "https://pypi.org/project/attrs/",
  "project_urls": {
    "Bug Tracker": "https://github.com/python-attrs/attrs/issues",
    "Changelog": "https://www.attrs.org/en/stable/changelog.html",
    "Documentation": "https://www.attrs.org/",
    "Funding": "https://github.com/sponsors/hynek",
    "Source Code": "https://github.com/python-attrs/attrs",
    "Tidelift": "https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=pypi"
  },
  "release_url": "https://pypi.org/project/attrs/23.1.0/",
  "requires_dist": [
    "importlib-metadata; python_version < '3.8'",
    "attrs[tests]; extra == 'cov'",
    "coverage[toml]>=5.3; extra == 'cov'",
    "attrs[docs,tests]; extra == 'dev'",
    "pre-commit; extra == 'dev'",
    "furo; extra == 'docs'",
    "myst-parser; extra == 'docs'",
    "sphinx; extra == 'docs'",
    "sphinx-notfound-page; extra == 'docs'",
    "sphinxcontrib-towncrier; extra == 'docs'",
    "towncrier; extra == 'docs'",
    "zope-interface; extra == 'docs'",
    "attrs[tests-no-zope]; extra == 'tests'",
    "zope-interface; extra == 'tests'",
    "cloudpickle; platform_python_implementation == 'CPython' and extra == 'tests-no-zope'",
    "hypothesis; extra == 'tests-no-zope'",
    "mypy>=1.1.1; platform_python_implementation == 'CPython' and extra == 'tests-no-zope'",
    "pympler; extra == 'tests-no-zope'",
    "pytest-mypy-plugins; platform_python_implementation == 'CPython' and python_version < '3.11' and extra == 'tests-no-zope'",
    "pytest-xdist[psutil]; extra == 'tests-no-zope'",
    "pytest>=4.3.0; extra == 'tests-no-zope'"
  ],
  "requires_python": ">=3.7",
  "summary": "classes without boilerplate",
  "version": "23.1.0",
  "releases": [],
  "developers": [
    "hs@ox.cx"
  ],
  "kwds": "python classes documentation attributes dataclasses",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_attrs",
  "homepage": "",
  "release_count": 27,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_cloudpickle",
    "pypi_coverage",
    "pypi_furo",
    "pypi_hypothesis",
    "pypi_importlib_metadata",
    "pypi_mypy",
    "pypi_myst_parser",
    "pypi_pre_commit",
    "pypi_pympler",
    "pypi_pytest",
    "pypi_pytest_mypy_plugins",
    "pypi_pytest_xdist",
    "pypi_sphinx",
    "pypi_sphinx_notfound_page",
    "pypi_sphinxcontrib_towncrier",
    "pypi_towncrier",
    "pypi_zope_interface"
  ]
}
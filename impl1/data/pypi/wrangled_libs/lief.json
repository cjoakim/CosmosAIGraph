{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: c++",
    "programming language :: python :: 3",
    "topic :: software development :: libraries"
  ],
  "description": "about\n=====\n\nthe purpose of this project is to provide a cross platform library that can parse, modify and\nabstract elf, pe and macho formats.\n\nmain features:\n\n  * **parsing**: lief can parse elf, pe, macho, oat, dex, vdex, art and provides an user-friendly api to access to format internals.\n  * **modify**: lief enables to modify some parts of these formats\n  * **abstract**: three formats have common features like sections, symbols, entry point... lief factors them.\n  * **api**: lief can be used in c, c++ and python\n\n\ndownloads / install\n===================\n\nfirst, make sure to have an updated version of setuptools:\n\n.. code-block:: console\n\n   $ pip install setuptools --upgrade\n\nto install the latest **version** (release):\n\n.. code-block:: console\n\n   $ pip install lief\n\nto install nightly build:\n\n.. code-block:: console\n\n   $ pip install [--user] --index-url https://lief.s3-website.fr-par.scw.cloud/latest lief\n\n\ngetting started\n===============\n\npython\n------\n\n.. code-block:: python\n\n  import lief\n\n  # elf\n  binary = lief.parse(\"/usr/bin/ls\")\n  print(binary)\n\n  # pe\n  binary = lief.parse(\"c:\\\\windows\\\\explorer.exe\")\n  print(binary)\n\n  # mach-o\n  binary = lief.parse(\"/usr/bin/ls\")\n  print(binary)\n\nc++\n---\n\n.. code-block:: cpp\n\n  #include <lief/lief.hpp>\n\n  int main(int argc, char** argv) {\n    // elf\n    try {\n      std::unique_ptr<lief::elf::binary> elf = lief::elf::parser::parse(\"/bin/ls\");\n      std::cout << *elf << std::endl;\n    } catch (const lief::exception& err) {\n      std::cerr << err.what() << std::endl;\n    }\n\n    // pe\n    try {\n      std::unique_ptr<lief::pe::binary> pe = lief::pe::parser::parse(\"c:\\\\windows\\\\explorer.exe\");\n      std::cout << *pe << std::endl;\n    } catch (const lief::exception& err) {\n      std::cerr << err.what() << std::endl;\n    }\n\n    // mach-o\n    try {\n      std::unique_ptr<lief::macho::fatbinary> macho = lief::macho::parser::parse(\"/bin/ls\");\n      std::cout << *macho << std::endl;\n    } catch (const lief::exception& err) {\n      std::cerr << err.what() << std::endl;\n    }\n\n    return 0;\n  }\n\nc (limited api)\n----------------\n\n.. code-block:: cpp\n\n  #include <lief/lief.h>\n\n  int main(int argc, char** argv) {\n    elf_binary_t* elf = elf_parse(\"/usr/bin/ls\");\n\n    elf_section_t** sections = elf->sections;\n\n    for (size_t i = 0; sections[i] != null; ++i) {\n      printf(\"%s\\n\", sections[i]->name);\n    }\n\n    elf_binary_destroy(elf);\n    return 0;\n  }\n\ndocumentation\n=============\n\n* `main documentation <https://lief-project.github.io/doc/latest/index.html>`_\n* `tutorial <https://lief-project.github.io/doc/latest/tutorials/index.html>`_\n* `api <https://lief-project.github.io/doc/latest/api/index.html>`_\n* `doxygen <https://lief-project.github.io/doc/latest/doxygen/index.html>`_\n\ncontact\n=======\n\n* **mail**: contact at lief.re\n* **gitter**: `lief-project <https://gitter.im/lief-project>`_\n\n\nauthors\n=======\n\nromain thomas `@rh0main <https://twitter.com/rh0main>`_ - `quarkslab <https://www.quarkslab.com>`_\n\n----\n\nlief is provided under the `apache 2.0 license <https://github.com/lief-project/lief/blob/0.12.3/license>`_\n",
  "docs_url": null,
  "keywords": "parser,elf,pe,macho,reverse-engineering",
  "license": "apache license 2.0",
  "name": "lief",
  "package_url": "https://pypi.org/project/lief/",
  "project_url": "https://pypi.org/project/lief/",
  "project_urls": {
    "Funding": "https://lief-project.github.io/about",
    "Tracker": "https://github.com/lief-project/LIEF/issues",
    "changelog": "https://lief-project.github.io/doc/latest/changelog.html",
    "documentation": "https://lief-project.github.io/doc/latest/",
    "homepage": "https://lief-project.github.io/",
    "repository": "https://github.com/lief-project/LIEF"
  },
  "release_url": "https://pypi.org/project/lief/0.13.2/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "library to instrument executable formats",
  "version": "0.13.2",
  "releases": [],
  "developers": [
    "contact@lief.re"
  ],
  "kwds": "elf_parse formats parser parse printf",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_lief",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: cython",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# srsly: modern high-performance serialization utilities for python\n\nthis package bundles some of the best python serialization libraries into one\nstandalone package, with a high-level api that makes it easy to write code\nthat's correct across platforms and pythons. this allows us to provide all the\nserialization utilities we need in a single binary wheel. currently supports\n**json**, **jsonl**, **messagepack**, **pickle** and **yaml**.\n\n[![tests](https://github.com/explosion/srsly/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/srsly/actions/workflows/tests.yml)\n[![pypi](https://img.shields.io/pypi/v/srsly.svg?style=flat-square&logo=pypi&logocolor=white)](https://pypi.python.org/pypi/srsly)\n[![conda](https://img.shields.io/conda/vn/conda-forge/srsly.svg?style=flat-square&logo=conda-forge&logocolor=white)](https://anaconda.org/conda-forge/srsly)\n[![github](https://img.shields.io/github/release/explosion/srsly/all.svg?style=flat-square&logo=github)](https://github.com/explosion/srsly)\n[![python wheels](https://img.shields.io/badge/wheels-%e2%9c%93-4c1.svg?longcache=true&style=flat-square&logo=python&logocolor=white)](https://github.com/explosion/wheelwright/releases)\n\n## motivation\n\nserialization is hard, especially across python versions and multiple platforms.\nafter dealing with many subtle bugs over the years (encodings, locales, large\nfiles) our libraries like [spacy](https://github.com/explosion/spacy) and\n[prodigy](https://prodi.gy) had steadily grown a number of utility functions to\nwrap the multiple serialization formats we need to support (especially `json`,\n`msgpack` and `pickle`). these wrapping functions ended up duplicated across our\ncodebases, so we wanted to put them in one place.\n\nat the same time, we noticed that having a lot of small dependencies was making\nmaintenance harder, and making installation slower. to solve this, we've made\n`srsly` standalone, by including the component packages directly within it. this\nway we can provide all the serialization utilities we need in a single binary\nwheel.\n\n`srsly` currently includes forks of the following packages:\n\n- [`ujson`](https://github.com/esnme/ultrajson)\n- [`msgpack`](https://github.com/msgpack/msgpack-python)\n- [`msgpack-numpy`](https://github.com/lebedov/msgpack-numpy)\n- [`cloudpickle`](https://github.com/cloudpipe/cloudpickle)\n- [`ruamel.yaml`](https://github.com/pycontribs/ruamel-yaml) (without unsafe\n  implementations!)\n\n## installation\n\n> \u26a0\ufe0f note that `v2.x` is only compatible with **python 3.6+**. for 2.7+\n> compatibility, use `v1.x`.\n\n`srsly` can be installed from pip. before installing, make sure that your `pip`,\n`setuptools` and `wheel` are up to date.\n\n```bash\npython -m pip install -u pip setuptools wheel\npython -m pip install srsly\n```\n\nor from conda via conda-forge:\n\n```bash\nconda install -c conda-forge srsly\n```\n\nalternatively, you can also compile the library from source. you'll need to make\nsure that you have a development environment with a python distribution\nincluding header files, a compiler (xcode command-line tools on macos / os x or\nvisual c++ build tools on windows), pip and git installed.\n\ninstall from source:\n\n```bash\n# clone the repo\ngit clone https://github.com/explosion/srsly\ncd srsly\n\n# create a virtual environment\npython -m venv .env\nsource .env/bin/activate\n\n# update pip\npython -m pip install -u pip setuptools wheel\n\n# compile and install from source\npython -m pip install .\n```\n\nfor developers, install requirements separately and then install in editable\nmode without build isolation:\n\n```bash\n# install in editable mode\npython -m pip install -r requirements.txt\npython -m pip install --no-build-isolation --editable .\n\n# run test suite\npython -m pytest --pyargs srsly\n```\n\n## api\n\n### json\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.ujson`. however, we normally\n> interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.json_dumps`\n\nserialize an object to a json string. falls back to `json` if `sort_keys=true`\nis used (until it's fixed in `ujson`).\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\njson_string = srsly.json_dumps(data)\n```\n\n| argument    | type | description                                            |\n| ----------- | ---- | ------------------------------------------------------ |\n| `data`      | -    | the json-serializable data to output.                  |\n| `indent`    | int  | number of spaces used to indent json. defaults to `0`. |\n| `sort_keys` | bool | sort dictionary keys. defaults to `false`.             |\n| **returns** | str  | the serialized string.                                 |\n\n#### <kbd>function</kbd> `srsly.json_loads`\n\ndeserialize unicode or bytes to a python object.\n\n```python\ndata = '{\"foo\": \"bar\", \"baz\": 123}'\nobj = srsly.json_loads(data)\n```\n\n| argument    | type        | description                     |\n| ----------- | ----------- | ------------------------------- |\n| `data`      | str / bytes | the data to deserialize.        |\n| **returns** | -           | the deserialized python object. |\n\n#### <kbd>function</kbd> `srsly.write_json`\n\ncreate a json file and dump contents or write to standard output.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_json(\"/path/to/file.json\", data)\n```\n\n| argument | type         | description                                            |\n| -------- | ------------ | ------------------------------------------------------ |\n| `path`   | str / `path` | the file path or `\"-\"` to write to stdout.             |\n| `data`   | -            | the json-serializable data to output.                  |\n| `indent` | int          | number of spaces used to indent json. defaults to `2`. |\n\n#### <kbd>function</kbd> `srsly.read_json`\n\nload json from a file or standard input.\n\n```python\ndata = srsly.read_json(\"/path/to/file.json\")\n```\n\n| argument    | type         | description                                |\n| ----------- | ------------ | ------------------------------------------ |\n| `path`      | str / `path` | the file path or `\"-\"` to read from stdin. |\n| **returns** | dict / list  | the loaded json content.                   |\n\n#### <kbd>function</kbd> `srsly.write_gzip_json`\n\ncreate a gzipped json file and dump contents.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_gzip_json(\"/path/to/file.json.gz\", data)\n```\n\n| argument | type         | description                                            |\n| -------- | ------------ | ------------------------------------------------------ |\n| `path`   | str / `path` | the file path.                                         |\n| `data`   | -            | the json-serializable data to output.                  |\n| `indent` | int          | number of spaces used to indent json. defaults to `2`. |\n\n#### <kbd>function</kbd> `srsly.write_gzip_jsonl`\n\ncreate a gzipped jsonl file and dump contents.\n\n```python\ndata = [{\"foo\": \"bar\"}, {\"baz\": 123}]\nsrsly.write_gzip_json(\"/path/to/file.jsonl.gz\", data)\n```\n\n| argument          | type         | description                                                                                                                                                                                                             |\n| ----------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `path`            | str / `path` | the file path.                                                                                                                                                                                                          |\n| `lines`           | -            | the json-serializable contents of each line.                                                                                                                                                                            |\n| `append`          | bool         | whether or not to append to the location. appending to .gz files is generally not recommended, as it doesn't allow the algorithm to take advantage of all data when compressing - files may hence be poorly compressed. |\n| `append_new_line` | bool         | whether or not to write a new line before appending to the file.                                                                                                                                                        |\n\n#### <kbd>function</kbd> `srsly.read_gzip_json`\n\nload gzipped json from a file.\n\n```python\ndata = srsly.read_gzip_json(\"/path/to/file.json.gz\")\n```\n\n| argument    | type         | description              |\n| ----------- | ------------ | ------------------------ |\n| `path`      | str / `path` | the file path.           |\n| **returns** | dict / list  | the loaded json content. |\n\n#### <kbd>function</kbd> `srsly.read_gzip_jsonl`\n\nload gzipped jsonl from a file.\n\n```python\ndata = srsly.read_gzip_jsonl(\"/path/to/file.jsonl.gz\")\n```\n\n| argument    | type         | description               |\n| ----------- | ------------ | ------------------------- |\n| `path`      | str / `path` | the file path.            |\n| **returns** | dict / list  | the loaded jsonl content. |\n\n#### <kbd>function</kbd> `srsly.write_jsonl`\n\ncreate a jsonl file (newline-delimited json) and dump contents line by line, or\nwrite to standard output.\n\n```python\ndata = [{\"foo\": \"bar\"}, {\"baz\": 123}]\nsrsly.write_jsonl(\"/path/to/file.jsonl\", data)\n```\n\n| argument          | type         | description                                                                                                            |\n| ----------------- | ------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| `path`            | str / `path` | the file path or `\"-\"` to write to stdout.                                                                             |\n| `lines`           | iterable     | the json-serializable lines.                                                                                           |\n| `append`          | bool         | append to an existing file. will open it in `\"a\"` mode and insert a newline before writing lines. defaults to `false`. |\n| `append_new_line` | bool         | defines whether a new line should first be written when appending to an existing file. defaults to `true`.             |\n\n#### <kbd>function</kbd> `srsly.read_jsonl`\n\nread a jsonl file (newline-delimited json) or from jsonl data from standard\ninput and yield contents line by line. blank lines will always be skipped.\n\n```python\ndata = srsly.read_jsonl(\"/path/to/file.jsonl\")\n```\n\n| argument   | type       | description                                                          |\n| ---------- | ---------- | -------------------------------------------------------------------- |\n| `path`     | str / path | the file path or `\"-\"` to read from stdin.                           |\n| `skip`     | bool       | skip broken lines and don't raise `valueerror`. defaults to `false`. |\n| **yields** | -          | the loaded json contents of each line.                               |\n\n#### <kbd>function</kbd> `srsly.is_json_serializable`\n\ncheck if a python object is json-serializable.\n\n```python\nassert srsly.is_json_serializable({\"hello\": \"world\"}) is true\nassert srsly.is_json_serializable(lambda x: x) is false\n```\n\n| argument    | type | description                              |\n| ----------- | ---- | ---------------------------------------- |\n| `obj`       | -    | the object to check.                     |\n| **returns** | bool | whether the object is json-serializable. |\n\n### msgpack\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.msgpack`. however, we normally\n> interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.msgpack_dumps`\n\nserialize an object to a msgpack byte string.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nmsg = srsly.msgpack_dumps(data)\n```\n\n| argument    | type  | description            |\n| ----------- | ----- | ---------------------- |\n| `data`      | -     | the data to serialize. |\n| **returns** | bytes | the serialized bytes.  |\n\n#### <kbd>function</kbd> `srsly.msgpack_loads`\n\ndeserialize msgpack bytes to a python object.\n\n```python\nmsg = b\"\\x82\\xa3foo\\xa3bar\\xa3baz{\"\ndata = srsly.msgpack_loads(msg)\n```\n\n| argument    | type  | description                                                                             |\n| ----------- | ----- | --------------------------------------------------------------------------------------- |\n| `data`      | bytes | the data to deserialize.                                                                |\n| `use_list`  | bool  | don't use tuples instead of lists. can make deserialization slower. defaults to `true`. |\n| **returns** | -     | the deserialized python object.                                                         |\n\n#### <kbd>function</kbd> `srsly.write_msgpack`\n\ncreate a msgpack file and dump contents.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_msgpack(\"/path/to/file.msg\", data)\n```\n\n| argument | type         | description            |\n| -------- | ------------ | ---------------------- |\n| `path`   | str / `path` | the file path.         |\n| `data`   | -            | the data to serialize. |\n\n#### <kbd>function</kbd> `srsly.read_msgpack`\n\nload a msgpack file.\n\n```python\ndata = srsly.read_msgpack(\"/path/to/file.msg\")\n```\n\n| argument    | type         | description                                                                             |\n| ----------- | ------------ | --------------------------------------------------------------------------------------- |\n| `path`      | str / `path` | the file path.                                                                          |\n| `use_list`  | bool         | don't use tuples instead of lists. can make deserialization slower. defaults to `true`. |\n| **returns** | -            | the loaded and deserialized content.                                                    |\n\n### pickle\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.cloudpickle`. however, we\n> normally interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.pickle_dumps`\n\nserialize a python object with pickle.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\npickled_data = srsly.pickle_dumps(data)\n```\n\n| argument    | type  | description                                            |\n| ----------- | ----- | ------------------------------------------------------ |\n| `data`      | -     | the object to serialize.                               |\n| `protocol`  | int   | protocol to use. `-1` for highest. defaults to `none`. |\n| **returns** | bytes | the serialized object.                                 |\n\n#### <kbd>function</kbd> `srsly.pickle_loads`\n\ndeserialize bytes with pickle.\n\n```python\npickled_data = b\"\\x80\\x04\\x95\\x19\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x03foo\\x94\\x8c\\x03bar\\x94\\x8c\\x03baz\\x94k{u.\"\ndata = srsly.pickle_loads(pickled_data)\n```\n\n| argument    | type  | description                     |\n| ----------- | ----- | ------------------------------- |\n| `data`      | bytes | the data to deserialize.        |\n| **returns** | -     | the deserialized python object. |\n\n### yaml\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.ruamel_yaml`. however, we\n> normally interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.yaml_dumps`\n\nserialize an object to a yaml string. see the\n[`ruamel.yaml` docs](https://yaml.readthedocs.io/en/latest/detail.html?highlight=indentation#indentation-of-block-sequences)\nfor details on the indentation format.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nyaml_string = srsly.yaml_dumps(data)\n```\n\n| argument          | type | description                                |\n| ----------------- | ---- | ------------------------------------------ |\n| `data`            | -    | the json-serializable data to output.      |\n| `indent_mapping`  | int  | mapping indentation. defaults to `2`.      |\n| `indent_sequence` | int  | sequence indentation. defaults to `4`.     |\n| `indent_offset`   | int  | indentation offset. defaults to `2`.       |\n| `sort_keys`       | bool | sort dictionary keys. defaults to `false`. |\n| **returns**       | str  | the serialized string.                     |\n\n#### <kbd>function</kbd> `srsly.yaml_loads`\n\ndeserialize unicode or a file object to a python object.\n\n```python\ndata = 'foo: bar\\nbaz: 123'\nobj = srsly.yaml_loads(data)\n```\n\n| argument    | type       | description                     |\n| ----------- | ---------- | ------------------------------- |\n| `data`      | str / file | the data to deserialize.        |\n| **returns** | -          | the deserialized python object. |\n\n#### <kbd>function</kbd> `srsly.write_yaml`\n\ncreate a yaml file and dump contents or write to standard output.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_yaml(\"/path/to/file.yml\", data)\n```\n\n| argument          | type         | description                                |\n| ----------------- | ------------ | ------------------------------------------ |\n| `path`            | str / `path` | the file path or `\"-\"` to write to stdout. |\n| `data`            | -            | the json-serializable data to output.      |\n| `indent_mapping`  | int          | mapping indentation. defaults to `2`.      |\n| `indent_sequence` | int          | sequence indentation. defaults to `4`.     |\n| `indent_offset`   | int          | indentation offset. defaults to `2`.       |\n| `sort_keys`       | bool         | sort dictionary keys. defaults to `false`. |\n\n#### <kbd>function</kbd> `srsly.read_yaml`\n\nload yaml from a file or standard input.\n\n```python\ndata = srsly.read_yaml(\"/path/to/file.yml\")\n```\n\n| argument    | type         | description                                |\n| ----------- | ------------ | ------------------------------------------ |\n| `path`      | str / `path` | the file path or `\"-\"` to read from stdin. |\n| **returns** | dict / list  | the loaded yaml content.                   |\n\n#### <kbd>function</kbd> `srsly.is_yaml_serializable`\n\ncheck if a python object is yaml-serializable.\n\n```python\nassert srsly.is_yaml_serializable({\"hello\": \"world\"}) is true\nassert srsly.is_yaml_serializable(lambda x: x) is false\n```\n\n| argument    | type | description                              |\n| ----------- | ---- | ---------------------------------------- |\n| `obj`       | -    | the object to check.                     |\n| **returns** | bool | whether the object is yaml-serializable. |\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "srsly",
  "package_url": "https://pypi.org/project/srsly/",
  "project_url": "https://pypi.org/project/srsly/",
  "project_urls": {
    "Homepage": "https://github.com/explosion/srsly"
  },
  "release_url": "https://pypi.org/project/srsly/2.4.8/",
  "requires_dist": [
    "catalogue <2.1.0,>=2.0.3"
  ],
  "requires_python": ">=3.6",
  "summary": "modern high-performance serialization utilities for python",
  "version": "2.4.8",
  "releases": [],
  "developers": [
    "contact@explosion.ai",
    "explosion"
  ],
  "kwds": "is_yaml_serializable serialize serialization serialized messagepack",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_srsly",
  "homepage": "https://github.com/explosion/srsly",
  "release_count": 39,
  "dependency_ids": [
    "pypi_catalogue"
  ]
}
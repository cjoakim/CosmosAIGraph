{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: cython",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering"
  ],
  "description": "modern high-performance serialization utilities for python\n<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# srsly: modern high-performance serialization utilities for python\n\nthis package bundles some of the best python serialization libraries into one\nstandalone package, with a high-level api that makes it easy to write code\nthat's correct across platforms and pythons. this allows us to provide all the\nserialization utilities we need in a single binary wheel. currently supports\n**json**, **jsonl**, **messagepack**, **pickle** and **yaml**.\n\n[![tests](https://github.com/explosion/srsly/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/srsly/actions/workflows/tests.yml)\n[![pypi](https://img.shields.io/pypi/v/srsly.svg?style=flat-square&logo=pypi&logocolor=white)](https://pypi.python.org/pypi/srsly)\n[![conda](https://img.shields.io/conda/vn/conda-forge/srsly.svg?style=flat-square&logo=conda-forge&logocolor=white)](https://anaconda.org/conda-forge/srsly)\n[![github](https://img.shields.io/github/release/explosion/srsly/all.svg?style=flat-square&logo=github)](https://github.com/explosion/srsly)\n[![python wheels](https://img.shields.io/badge/wheels-%e2%9c%93-4c1.svg?longcache=true&style=flat-square&logo=python&logocolor=white)](https://github.com/explosion/wheelwright/releases)\n\n## motivation\n\nserialization is hard, especially across python versions and multiple platforms.\nafter dealing with many subtle bugs over the years (encodings, locales, large\nfiles) our libraries like [spacy](https://github.com/explosion/spacy) and\n[prodigy](https://prodi.gy) had steadily grown a number of utility functions to\nwrap the multiple serialization formats we need to support (especially `json`,\n`msgpack` and `pickle`). these wrapping functions ended up duplicated across our\ncodebases, so we wanted to put them in one place.\n\nat the same time, we noticed that having a lot of small dependencies was making\nmaintenance harder, and making installation slower. to solve this, we've made\n`srsly` standalone, by including the component packages directly within it. this\nway we can provide all the serialization utilities we need in a single binary\nwheel.\n\n`srsly` currently includes forks of the following packages:\n\n- [`ujson`](https://github.com/esnme/ultrajson)\n- [`msgpack`](https://github.com/msgpack/msgpack-python)\n- [`msgpack-numpy`](https://github.com/lebedov/msgpack-numpy)\n- [`cloudpickle`](https://github.com/cloudpipe/cloudpickle)\n- [`ruamel.yaml`](https://github.com/pycontribs/ruamel-yaml) (without unsafe\n  implementations!)\n\n## installation\n\n> \u26a0\ufe0f note that `v2.x` is only compatible with **python 3.6+**. for 2.7+\n> compatibility, use `v1.x`.\n\n`srsly` can be installed from pip. before installing, make sure that your `pip`,\n`setuptools` and `wheel` are up to date.\n\n```bash\npython -m pip install -u pip setuptools wheel\npython -m pip install srsly\n```\n\nor from conda via conda-forge:\n\n```bash\nconda install -c conda-forge srsly\n```\n\nalternatively, you can also compile the library from source. you'll need to make\nsure that you have a development environment with a python distribution\nincluding header files, a compiler (xcode command-line tools on macos / os x or\nvisual c++ build tools on windows), pip and git installed.\n\ninstall from source:\n\n```bash\n# clone the repo\ngit clone https://github.com/explosion/srsly\ncd srsly\n\n# create a virtual environment\npython -m venv .env\nsource .env/bin/activate\n\n# update pip\npython -m pip install -u pip setuptools wheel\n\n# compile and install from source\npython -m pip install .\n```\n\nfor developers, install requirements separately and then install in editable\nmode without build isolation:\n\n```bash\n# install in editable mode\npython -m pip install -r requirements.txt\npython -m pip install --no-build-isolation --editable .\n\n# run test suite\npython -m pytest --pyargs srsly\n```\n\n## api\n\n### json\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.ujson`. however, we normally\n> interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.json_dumps`\n\nserialize an object to a json string. falls back to `json` if `sort_keys=true`\nis used (until it's fixed in `ujson`).\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\njson_string = srsly.json_dumps(data)\n```\n\n| argument    | type | description                                            |\n| ----------- | ---- | ------------------------------------------------------ |\n| `data`      | -    | the json-serializable data to output.                  |\n| `indent`    | int  | number of spaces used to indent json. defaults to `0`. |\n| `sort_keys` | bool | sort dictionary keys. defaults to `false`.             |\n| **returns** | str  | the serialized string.                                 |\n\n#### <kbd>function</kbd> `srsly.json_loads`\n\ndeserialize unicode or bytes to a python object.\n\n```python\ndata = '{\"foo\": \"bar\", \"baz\": 123}'\nobj = srsly.json_loads(data)\n```\n\n| argument    | type        | description                     |\n| ----------- | ----------- | ------------------------------- |\n| `data`      | str / bytes | the data to deserialize.        |\n| **returns** | -           | the deserialized python object. |\n\n#### <kbd>function</kbd> `srsly.write_json`\n\ncreate a json file and dump contents or write to standard output.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_json(\"/path/to/file.json\", data)\n```\n\n| argument | type         | description                                            |\n| -------- | ------------ | ------------------------------------------------------ |\n| `path`   | str / `path` | the file path or `\"-\"` to write to stdout.             |\n| `data`   | -            | the json-serializable data to output.                  |\n| `indent` | int          | number of spaces used to indent json. defaults to `2`. |\n\n#### <kbd>function</kbd> `srsly.read_json`\n\nload json from a file or standard input.\n\n```python\ndata = srsly.read_json(\"/path/to/file.json\")\n```\n\n| argument    | type         | description                                |\n| ----------- | ------------ | ------------------------------------------ |\n| `path`      | str / `path` | the file path or `\"-\"` to read from stdin. |\n| **returns** | dict / list  | the loaded json content.                   |\n\n#### <kbd>function</kbd> `srsly.write_gzip_json`\n\ncreate a gzipped json file and dump contents.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_gzip_json(\"/path/to/file.json.gz\", data)\n```\n\n| argument | type         | description                                            |\n| -------- | ------------ | ------------------------------------------------------ |\n| `path`   | str / `path` | the file path.                                         |\n| `data`   | -            | the json-serializable data to output.                  |\n| `indent` | int          | number of spaces used to indent json. defaults to `2`. |\n\n#### <kbd>function</kbd> `srsly.write_gzip_jsonl`\n\ncreate a gzipped jsonl file and dump contents.\n\n```python\ndata = [{\"foo\": \"bar\"}, {\"baz\": 123}]\nsrsly.write_gzip_json(\"/path/to/file.jsonl.gz\", data)\n```\n\n| argument          | type         | description                                                                                                                                                                                                             |\n| ----------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `path`            | str / `path` | the file path.                                                                                                                                                                                                          |\n| `lines`           | -            | the json-serializable contents of each line.                                                                                                                                                                            |\n| `append`          | bool         | whether or not to append to the location. appending to .gz files is generally not recommended, as it doesn't allow the algorithm to take advantage of all data when compressing - files may hence be poorly compressed. |\n| `append_new_line` | bool         | whether or not to write a new line before appending to the file.                                                                                                                                                        |\n\n#### <kbd>function</kbd> `srsly.read_gzip_json`\n\nload gzipped json from a file.\n\n```python\ndata = srsly.read_gzip_json(\"/path/to/file.json.gz\")\n```\n\n| argument    | type         | description              |\n| ----------- | ------------ | ------------------------ |\n| `path`      | str / `path` | the file path.           |\n| **returns** | dict / list  | the loaded json content. |\n\n#### <kbd>function</kbd> `srsly.read_gzip_jsonl`\n\nload gzipped jsonl from a file.\n\n```python\ndata = srsly.read_gzip_jsonl(\"/path/to/file.jsonl.gz\")\n```\n\n| argument    | type         | description               |\n| ----------- | ------------ | ------------------------- |\n| `path`      | str / `path` | the file path.            |\n| **returns** | dict / list  | the loaded jsonl content. |\n\n#### <kbd>function</kbd> `srsly.write_jsonl`\n\ncreate a jsonl file (newline-delimited json) and dump contents line by line, or\nwrite to standard output.\n\n```python\ndata = [{\"foo\": \"bar\"}, {\"baz\": 123}]\nsrsly.write_jsonl(\"/path/to/file.jsonl\", data)\n```\n\n| argument          | type         | description                                                                                                            |\n| ----------------- | ------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| `path`            | str / `path` | the file path or `\"-\"` to write to stdout.                                                                             |\n| `lines`           | iterable     | the json-serializable lines.                                                                                           |\n| `append`          | bool         | append to an existing file. will open it in `\"a\"` mode and insert a newline before writing lines. defaults to `false`. |\n| `append_new_line` | bool         | defines whether a new line should first be written when appending to an existing file. defaults to `true`.             |\n\n#### <kbd>function</kbd> `srsly.read_jsonl`\n\nread a jsonl file (newline-delimited json) or from jsonl data from standard\ninput and yield contents line by line. blank lines will always be skipped.\n\n```python\ndata = srsly.read_jsonl(\"/path/to/file.jsonl\")\n```\n\n| argument   | type       | description                                                          |\n| ---------- | ---------- | -------------------------------------------------------------------- |\n| `path`     | str / path | the file path or `\"-\"` to read from stdin.                           |\n| `skip`     | bool       | skip broken lines and don't raise `valueerror`. defaults to `false`. |\n| **yields** | -          | the loaded json contents of each line.                               |\n\n#### <kbd>function</kbd> `srsly.is_json_serializable`\n\ncheck if a python object is json-serializable.\n\n```python\nassert srsly.is_json_serializable({\"hello\": \"world\"}) is true\nassert srsly.is_json_serializable(lambda x: x) is false\n```\n\n| argument    | type | description                              |\n| ----------- | ---- | ---------------------------------------- |\n| `obj`       | -    | the object to check.                     |\n| **returns** | bool | whether the object is json-serializable. |\n\n### msgpack\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.msgpack`. however, we normally\n> interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.msgpack_dumps`\n\nserialize an object to a msgpack byte string.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nmsg = srsly.msgpack_dumps(data)\n```\n\n| argument    | type  | description            |\n| ----------- | ----- | ---------------------- |\n| `data`      | -     | the data to serialize. |\n| **returns** | bytes | the serialized bytes.  |\n\n#### <kbd>function</kbd> `srsly.msgpack_loads`\n\ndeserialize msgpack bytes to a python object.\n\n```python\nmsg = b\"\\x82\\xa3foo\\xa3bar\\xa3baz{\"\ndata = srsly.msgpack_loads(msg)\n```\n\n| argument    | type  | description                                                                             |\n| ----------- | ----- | --------------------------------------------------------------------------------------- |\n| `data`      | bytes | the data to deserialize.                                                                |\n| `use_list`  | bool  | don't use tuples instead of lists. can make deserialization slower. defaults to `true`. |\n| **returns** | -     | the deserialized python object.                                                         |\n\n#### <kbd>function</kbd> `srsly.write_msgpack`\n\ncreate a msgpack file and dump contents.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_msgpack(\"/path/to/file.msg\", data)\n```\n\n| argument | type         | description            |\n| -------- | ------------ | ---------------------- |\n| `path`   | str / `path` | the file path.         |\n| `data`   | -            | the data to serialize. |\n\n#### <kbd>function</kbd> `srsly.read_msgpack`\n\nload a msgpack file.\n\n```python\ndata = srsly.read_msgpack(\"/path/to/file.msg\")\n```\n\n| argument    | type         | description                                                                             |\n| ----------- | ------------ | --------------------------------------------------------------------------------------- |\n| `path`      | str / `path` | the file path.                                                                          |\n| `use_list`  | bool         | don't use tuples instead of lists. can make deserialization slower. defaults to `true`. |\n| **returns** | -            | the loaded and deserialized content.                                                    |\n\n### pickle\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.cloudpickle`. however, we\n> normally interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.pickle_dumps`\n\nserialize a python object with pickle.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\npickled_data = srsly.pickle_dumps(data)\n```\n\n| argument    | type  | description                                            |\n| ----------- | ----- | ------------------------------------------------------ |\n| `data`      | -     | the object to serialize.                               |\n| `protocol`  | int   | protocol to use. `-1` for highest. defaults to `none`. |\n| **returns** | bytes | the serialized object.                                 |\n\n#### <kbd>function</kbd> `srsly.pickle_loads`\n\ndeserialize bytes with pickle.\n\n```python\npickled_data = b\"\\x80\\x04\\x95\\x19\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x03foo\\x94\\x8c\\x03bar\\x94\\x8c\\x03baz\\x94k{u.\"\ndata = srsly.pickle_loads(pickled_data)\n```\n\n| argument    | type  | description                     |\n| ----------- | ----- | ------------------------------- |\n| `data`      | bytes | the data to deserialize.        |\n| **returns** | -     | the deserialized python object. |\n\n### yaml\n\n> \ud83d\udce6 the underlying module is exposed via `srsly.ruamel_yaml`. however, we\n> normally interact with it via the utility functions only.\n\n#### <kbd>function</kbd> `srsly.yaml_dumps`\n\nserialize an object to a yaml string. see the\n[`ruamel.yaml` docs](https://yaml.readthedocs.io/en/latest/detail.html?highlight=indentation#indentation-of-block-sequences)\nfor details on the indentation format.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nyaml_string = srsly.yaml_dumps(data)\n```\n\n| argument          | type | description                                |\n| ----------------- | ---- | ------------------------------------------ |\n| `data`            | -    | the json-serializable data to output.      |\n| `indent_mapping`  | int  | mapping indentation. defaults to `2`.      |\n| `indent_sequence` | int  | sequence indentation. defaults to `4`.     |\n| `indent_offset`   | int  | indentation offset. defaults to `2`.       |\n| `sort_keys`       | bool | sort dictionary keys. defaults to `false`. |\n| **returns**       | str  | the serialized string.                     |\n\n#### <kbd>function</kbd> `srsly.yaml_loads`\n\ndeserialize unicode or a file object to a python object.\n\n```python\ndata = 'foo: bar\\nbaz: 123'\nobj = srsly.yaml_loads(data)\n```\n\n| argument    | type       | description                     |\n| ----------- | ---------- | ------------------------------- |\n| `data`      | str / file | the data to deserialize.        |\n| **returns** | -          | the deserialized python object. |\n\n#### <kbd>function</kbd> `srsly.write_yaml`\n\ncreate a yaml file and dump contents or write to standard output.\n\n```python\ndata = {\"foo\": \"bar\", \"baz\": 123}\nsrsly.write_yaml(\"/path/to/file.yml\", data)\n```\n\n| argument          | type         | description                                |\n| ----------------- | ------------ | ------------------------------------------ |\n| `path`            | str / `path` | the file path or `\"-\"` to write to stdout. |\n| `data`            | -            | the json-serializable data to output.      |\n| `indent_mapping`  | int          | mapping indentation. defaults to `2`.      |\n| `indent_sequence` | int          | sequence indentation. defaults to `4`.     |\n| `indent_offset`   | int          | indentation offset. defaults to `2`.       |\n| `sort_keys`       | bool         | sort dictionary keys. defaults to `false`. |\n\n#### <kbd>function</kbd> `srsly.read_yaml`\n\nload yaml from a file or standard input.\n\n```python\ndata = srsly.read_yaml(\"/path/to/file.yml\")\n```\n\n| argument    | type         | description                                |\n| ----------- | ------------ | ------------------------------------------ |\n| `path`      | str / `path` | the file path or `\"-\"` to read from stdin. |\n| **returns** | dict / list  | the loaded yaml content.                   |\n\n#### <kbd>function</kbd> `srsly.is_yaml_serializable`\n\ncheck if a python object is yaml-serializable.\n\n```python\nassert srsly.is_yaml_serializable({\"hello\": \"world\"}) is true\nassert srsly.is_yaml_serializable(lambda x: x) is false\n```\n\n| argument    | type | description                              |\n| ----------- | ---- | ---------------------------------------- |\n| `obj`       | -    | the object to check.                     |\n| **returns** | bool | whether the object is yaml-serializable. |\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "srsly",
  "package_url": "https://pypi.org/project/srsly/",
  "project_url": "https://pypi.org/project/srsly/",
  "project_urls": {
    "Homepage": "https://github.com/explosion/srsly"
  },
  "release_url": "https://pypi.org/project/srsly/2.4.8/",
  "requires_dist": [
    "catalogue <2.1.0,>=2.0.3"
  ],
  "requires_python": ">=3.6",
  "summary": "modern high-performance serialization utilities for python",
  "version": "2.4.8",
  "releases": [],
  "developers": [
    "contact@explosion.ai",
    "explosion"
  ],
  "kwds": "is_yaml_serializable serialize serialization serialized messagepack",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_srsly",
  "homepage": "https://github.com/explosion/srsly",
  "release_count": 39,
  "dependency_ids": [
    "pypi_catalogue"
  ],
  "documentation_summary": "The HTML text provides information about \"srsly,\" a Python package available on PyPI (Python Package Index) that offers modern high-performance serialization utilities. The latest version, 2.4.8, was released on September 22, 2023. It requires Python 3.6 or newer and is licensed under the MIT License. The package is designed to bundle several Python serialization libraries into one standalone package with a high-level API, supporting formats like JSON, JSONL, MessagePack, Pickle, and YAML. It aims to simplify code across platforms and Python versions, addressing common serialization challenges such as dealing with encodings, locales, and large files. The package is developed and maintained by Explosion and can be installed via pip or conda. It includes forks of ujson, msgpack, msgpack-numpy, cloudpickle, and ruamel.yaml, excluding unsafe implementations.",
  "embedding": [
    -0.007335665635764599,
    0.019598476588726044,
    -0.0010726518230512738,
    -0.006884927861392498,
    -0.024773353710770607,
    0.012111417949199677,
    0.013645989820361137,
    -0.02697543054819107,
    0.005811416078358889,
    -0.029452765360474586,
    0.0007573937182314694,
    0.020809616893529892,
    -0.01979115791618824,
    0.021704211831092834,
    0.014726382680237293,
    -0.00984052661806345,
    0.0063309683464467525,
    -0.015221850015223026,
    0.023025456815958023,
    -0.0199150238186121,
    0.03570115566253662,
    -0.0136941596865654,
    -0.01534571684896946,
    -0.015400768257677555,
    0.00104770646430552,
    0.023479634895920753,
    0.009833645075559616,
    -0.02115369215607643,
    0.014327256940305233,
    0.012393558397889137,
    0.005288423039019108,
    -0.021470241248607635,
    -0.028145283460617065,
    -0.028819669038057327,
    -0.018621305003762245,
    -0.032535672187805176,
    0.004645003937184811,
    0.01928192749619484,
    0.019075483083724976,
    -0.01641922816634178,
    0.010934683494269848,
    -0.014120811596512794,
    -0.015318190678954124,
    -0.021635396406054497,
    -0.02396133914589882,
    -0.006764502264559269,
    0.006083234678953886,
    -0.04261016845703125,
    -0.018786460161209106,
    -0.009517096914350986,
    0.03746281564235687,
    -0.008746370673179626,
    -0.024897221475839615,
    -0.02321813814342022,
    0.007659095339477062,
    -0.015139272436499596,
    -0.0016291921492666006,
    0.015387006103992462,
    0.01109983865171671,
    0.004056636709719896,
    0.01882774941623211,
    0.004689733497798443,
    -0.029177505522966385,
    0.013701041229069233,
    -0.0007139543304219842,
    -0.01990126073360443,
    -0.010342875495553017,
    -0.0199563130736351,
    0.0035267623607069254,
    0.005340034142136574,
    0.026768986135721207,
    0.03861890733242035,
    -0.0012249047867953777,
    -0.003654069732874632,
    0.01830475591123104,
    -0.013487715274095535,
    -0.01824970357120037,
    0.014822723343968391,
    -0.02349339798092842,
    -0.030553804710507393,
    0.0343523845076561,
    -0.03418722748756409,
    0.007542110048234463,
    0.012421084567904472,
    0.018855275586247444,
    0.01465756818652153,
    -0.01248989999294281,
    0.009606556035578251,
    -0.04181191697716713,
    -0.018896564841270447,
    0.015731079503893852,
    0.011526491492986679,
    -0.004411033354699612,
    0.02156658098101616,
    -0.021029826253652573,
    0.018098311498761177,
    0.0009178183972835541,
    0.036994874477386475,
    0.0032515027560293674,
    -0.021194981411099434,
    -0.005567123182117939,
    0.009544623084366322,
    -0.006083234678953886,
    -0.006943420507013798,
    -0.0261771772056818,
    -0.007142983842641115,
    0.0006077213329263031,
    -0.0031654841732233763,
    0.03449001535773277,
    0.026961667463183403,
    -0.017644133418798447,
    0.041261397302150726,
    -0.0016894051805138588,
    -0.029562870040535927,
    0.019364506006240845,
    -0.002047242596745491,
    0.04002273082733154,
    -0.01120994333177805,
    -0.032948561012744904,
    0.006743857637047768,
    -0.005807975307106972,
    -0.013329440727829933,
    0.015868710353970528,
    -0.00034256905200891197,
    0.03616909682750702,
    -0.018731407821178436,
    0.004586511291563511,
    -0.021635396406054497,
    0.0032188156619668007,
    -0.01835980825126171,
    0.009111089631915092,
    0.00022128282580524683,
    0.004916822537779808,
    -0.020162757486104965,
    0.007659095339477062,
    0.012049484066665173,
    -0.024085205048322678,
    0.016295362263917923,
    -0.008533044718205929,
    -0.02572299912571907,
    0.011554017663002014,
    0.012338506989181042,
    -0.03308619186282158,
    0.0037572921719402075,
    -9.139475150732324e-05,
    0.02298416756093502,
    0.027704868465662003,
    0.010879631154239178,
    -0.03005833737552166,
    -0.02846183255314827,
    0.03437991067767143,
    -0.023121798411011696,
    -0.02989318035542965,
    0.01871764473617077,
    -0.017093613743782043,
    0.03215030953288078,
    0.00037181537481956184,
    0.009482689201831818,
    0.0032256972044706345,
    -0.009510215371847153,
    -0.002221000147983432,
    0.0139487748965621,
    -0.029397713020443916,
    -0.01802949607372284,
    -0.015276902355253696,
    0.023176848888397217,
    0.0278975497931242,
    -0.0023121796548366547,
    -0.020148994401097298,
    -0.003943092189729214,
    -0.01166412141174078,
    0.013983182609081268,
    -0.02385123446583748,
    0.0056634643115103245,
    -0.008656910620629787,
    0.0009823322761803865,
    0.018015732988715172,
    -0.006912454031407833,
    -0.02349339798092842,
    -0.017988208681344986,
    0.021139929071068764,
    0.002955598756670952,
    0.005047570914030075,
    0.049932073801755905,
    0.005670345388352871,
    -0.011595305986702442,
    -0.009083563461899757,
    -0.012207758612930775,
    0.01922687515616417,
    0.02800765261054039,
    0.029700499027967453,
    0.02385123446583748,
    -0.010556201450526714,
    -0.03707745298743248,
    -0.5549231171607971,
    -0.025475265458226204,
    -0.014685094356536865,
    -0.05273972079157829,
    0.022942878305912018,
    0.019378269091248512,
    0.005543038249015808,
    0.034655168652534485,
    -0.011271876282989979,
    0.03677466884255409,
    -0.00901474803686142,
    0.01846991293132305,
    0.0137148043140769,
    -0.022516226395964622,
    -0.004321574233472347,
    0.0036265437956899405,
    0.021291321143507957,
    -0.017891867086291313,
    0.0031551618594676256,
    -0.006723213009536266,
    -0.03080153651535511,
    0.03410465270280838,
    -0.028819669038057327,
    0.020740803331136703,
    -0.00887023750692606,
    0.018731407821178436,
    -0.007721028756350279,
    0.002164227655157447,
    0.021305084228515625,
    -0.004490170627832413,
    -0.013522122986614704,
    0.024539383128285408,
    0.009551504626870155,
    -0.02630104497075081,
    0.04808783531188965,
    0.004197707399725914,
    0.007438887841999531,
    0.04222480580210686,
    0.04351852461695671,
    0.05973130837082863,
    0.005680667702108622,
    -0.023465871810913086,
    -0.02572299912571907,
    0.008553688414394855,
    -0.009771712124347687,
    -0.00038729869993403554,
    0.032370515167713165,
    0.01391436718404293,
    -0.013673515059053898,
    -0.025461502373218536,
    0.027333267033100128,
    -0.00989557895809412,
    0.018043259158730507,
    -0.039554789662361145,
    0.038591381162405014,
    0.012840854935348034,
    0.008629385381937027,
    -0.016171494498848915,
    -0.012565596029162407,
    0.005708193872123957,
    0.008533044718205929,
    0.03143463283777237,
    -0.0012876982800662518,
    -0.023176848888397217,
    -0.02104358747601509,
    0.014671331271529198,
    -0.011973788030445576,
    -0.026768986135721207,
    0.0020524035207927227,
    -0.012641292065382004,
    0.020176520571112633,
    0.009620319120585918,
    0.02720940113067627,
    -0.024883458390831947,
    -0.011079194955527782,
    0.04489482194185257,
    0.004015347920358181,
    0.00858121458441019,
    -0.01607515476644039,
    0.022777723148465157,
    0.02851688303053379,
    0.017300060018897057,
    -0.00658902432769537,
    -0.04307810962200165,
    0.03724261000752449,
    -0.010377283208072186,
    -0.003327199025079608,
    -0.0032342991326004267,
    0.03297608718276024,
    -0.014024470932781696,
    0.003361606504768133,
    0.005002841353416443,
    -0.009379466995596886,
    -0.03762797266244888,
    0.013301915489137173,
    0.017258770763874054,
    -0.01670825108885765,
    -0.0028592580929398537,
    -0.02149776555597782,
    -0.013253744691610336,
    0.009496452286839485,
    -0.004452322144061327,
    -0.001852840417996049,
    -0.014230916276574135,
    -0.018662594258785248,
    0.02111240290105343,
    -0.007858658209443092,
    0.01292343344539404,
    -0.011278757825493813,
    -0.0027130264788866043,
    0.011801750399172306,
    -0.026094600558280945,
    -0.005635938141494989,
    -0.007817369885742664,
    -0.010102023370563984,
    -0.033911969512701035,
    0.03754539415240288,
    0.0022588481660932302,
    0.021649159491062164,
    -0.010108904913067818,
    0.021855603903532028,
    -0.0031362378504127264,
    0.005935282912105322,
    0.01893785409629345,
    0.01888280175626278,
    -0.00035009568091481924,
    0.047207001596689224,
    -0.005670345388352871,
    -0.023699842393398285,
    0.007727910298854113,
    0.0224198866635561,
    0.0057357195764780045,
    0.0054501378908753395,
    -0.03850880265235901,
    0.004858329892158508,
    -0.0024979799054563046,
    0.027966365218162537,
    -0.006317205261439085,
    0.007425124756991863,
    -0.010342875495553017,
    -0.02588815614581108,
    0.003390852827578783,
    -0.008656910620629787,
    -0.023355767130851746,
    -0.012187113985419273,
    -0.015620976686477661,
    -0.005746041890233755,
    0.009517096914350986,
    -0.0034373030066490173,
    0.0008627664647065103,
    -0.008856474421918392,
    0.010143312625586987,
    -0.027539711445569992,
    0.021194981411099434,
    -0.0359213650226593,
    -0.010322230868041515,
    -0.03457259386777878,
    -0.005119826644659042,
    -0.02122250758111477,
    0.00039697581087239087,
    0.0030209729447960854,
    0.009379466995596886,
    0.013955656439065933,
    0.014588752761483192,
    -0.038866639137268066,
    -0.02008018083870411,
    -0.02584686689078808,
    0.01864883117377758,
    0.017547791823744774,
    -0.016061391681432724,
    -0.004631240852177143,
    -0.0009315813658758998,
    -0.0015130670508369803,
    0.007769199088215828,
    -0.0017995089292526245,
    0.016914695501327515,
    -0.002742272801697254,
    0.005794212222099304,
    0.018167126923799515,
    -0.005219608079642057,
    -0.0018700441578403115,
    0.02469077706336975,
    -0.038701485842466354,
    -0.0014494132483378053,
    0.03773807734251022,
    -0.0003754711651708931,
    -0.0055327159352600574,
    0.011815513484179974,
    0.006706009618937969,
    0.002938395133242011,
    0.014396071434020996,
    0.020740803331136703,
    0.0003974059072788805,
    0.009702896699309349,
    -0.020892195403575897,
    0.012641292065382004,
    0.006960624363273382,
    -0.012909670360386372,
    -0.0010072777513414621,
    0.00944140087813139,
    0.012338506989181042,
    0.003946532960981131,
    0.0002797754714265466,
    -0.005367560312151909,
    0.010239653289318085,
    -0.019804921001195908,
    0.031104322522878647,
    -0.026879088953137398,
    0.005174878519028425,
    -0.015097983181476593,
    0.026080837473273277,
    -0.015180560760200024,
    -0.030306071043014526,
    -0.023479634895920753,
    0.0033237584866583347,
    0.032480619847774506,
    0.02309427224099636,
    0.009991919621825218,
    -0.032480619847774506,
    -0.014464886859059334,
    -0.0142033901065588,
    -0.011395743116736412,
    0.00838165171444416,
    -0.008319717831909657,
    0.013274389319121838,
    0.012427966110408306,
    -0.01888280175626278,
    0.017726711928844452,
    -0.00984052661806345,
    -0.025640422478318214,
    -0.009104208089411259,
    0.029012350365519524,
    0.03845375031232834,
    -0.0068470798432827,
    0.03204020485281944,
    -0.014960353262722492,
    0.028214098885655403,
    -0.020396728068590164,
    0.031517211347818375,
    -0.027236927300691605,
    -0.015263139270246029,
    0.006833316758275032,
    0.022048285230994225,
    -0.00660278694704175,
    0.013233100064098835,
    0.01505669392645359,
    0.010996616445481777,
    0.005305626895278692,
    -0.011657239869236946,
    0.0211674552410841,
    -0.018635068088769913,
    0.0004006316012237221,
    -0.004156418144702911,
    0.007342547178268433,
    0.015593450516462326,
    0.012359151616692543,
    -0.0005260037141852081,
    0.004607155919075012,
    0.034132178872823715,
    -0.023699842393398285,
    0.006654398050159216,
    0.002358629833906889,
    0.05070279911160469,
    0.012985366396605968,
    0.04357357695698738,
    -0.022323545068502426,
    -0.012090773321688175,
    -0.03201267868280411,
    0.03462764248251915,
    0.013150522485375404,
    -0.03528826683759689,
    -0.03355413302779198,
    -0.032315462827682495,
    0.014616278931498528,
    0.014409834519028664,
    0.016377940773963928,
    0.011870565824210644,
    0.0334165021777153,
    -0.0065374127589166164,
    -0.0031259155366569757,
    0.010735120624303818,
    0.002952157985419035,
    0.0211674552410841,
    0.0038089032750576735,
    -0.0044144741259515285,
    -0.023589737713336945,
    -0.027594763785600662,
    0.01831851899623871,
    0.0038157848175615072,
    0.03303113952279091,
    0.015510872937738895,
    0.02503485046327114,
    0.0039018034003674984,
    0.037903230637311935,
    0.010927801951766014,
    0.022901589050889015,
    0.027195638045668602,
    -0.022034522145986557,
    0.003227417590096593,
    -0.017988208681344986,
    0.005443256348371506,
    0.018167126923799515,
    0.005701312329620123,
    0.004321574233472347,
    0.0291499812155962,
    -0.011554017663002014,
    -0.011251231655478477,
    -0.0045968336053192616,
    0.0026252875104546547,
    -0.02423659898340702,
    0.009585912339389324,
    0.0018304756376892328,
    -0.0349029041826725,
    0.00033310698927380145,
    0.01676330342888832,
    0.005061333999037743,
    -0.0006318065570667386,
    -0.005525834392756224,
    0.020782092586159706,
    -0.00728749530389905,
    -0.026989193633198738,
    -0.027126822620630264,
    -0.006375697907060385,
    0.013467070646584034,
    0.03826107084751129,
    0.03308619186282158,
    0.0027801208198070526,
    -0.006361934822052717,
    -0.007542110048234463,
    -0.016735777258872986,
    -0.03446248918771744,
    -0.002086811000481248,
    -0.018800223246216774,
    0.003002048935741186,
    -0.01602010242640972,
    0.026837801560759544,
    0.008890881203114986,
    0.005598090123385191,
    0.020438017323613167,
    0.003980940207839012,
    0.0033581657335162163,
    -0.014272204600274563,
    -0.0035886955447494984,
    -0.010831461288034916,
    0.018552489578723907,
    -0.004500492941588163,
    0.0012163028586655855,
    0.019323216751217842,
    0.03900426998734474,
    0.013721685856580734,
    0.015387006103992462,
    0.021415188908576965,
    -0.014175863936543465,
    -0.023603500798344612,
    -0.025571607053279877,
    0.033278871327638626,
    -0.005302186124026775,
    0.004252759274095297,
    -0.01846991293132305,
    0.015758605673909187,
    0.04142655432224274,
    0.01098285336047411,
    0.0266864076256752,
    0.015607213601469994,
    0.034820325672626495,
    0.015373243018984795,
    0.00431813346222043,
    -0.006010979413986206,
    0.0027095857076346874,
    -0.022089574486017227,
    -0.0005100902635604143,
    0.004552104044705629,
    0.006355053745210171,
    -0.017024800181388855,
    0.033003613352775574,
    0.003912125714123249,
    -0.020176520571112633,
    -0.015703553333878517,
    0.030774012207984924,
    0.014189627021551132,
    0.009434519335627556,
    -0.010914038866758347,
    -0.03129700571298599,
    -0.017203718423843384,
    0.011031024158000946,
    0.002955598756670952,
    0.011072313413023949,
    -0.027002956718206406,
    -0.012833974324166775,
    0.008271547965705395,
    -0.00798940658569336,
    0.01614397019147873,
    -0.030608855187892914,
    0.029810603708028793,
    -0.0016395143466070294,
    -0.01613020710647106,
    -0.012070128694176674,
    -0.026369860395789146,
    0.02942523919045925,
    0.008223377168178558,
    0.01066630519926548,
    -0.018001971766352654,
    0.014437360689043999,
    -0.01292343344539404,
    0.017410162836313248,
    -0.014795198105275631,
    -0.014616278931498528,
    -0.049601759761571884,
    0.002179711125791073,
    -0.012971603311598301,
    0.020451780408620834,
    -0.009345060214400291,
    -0.015992576256394386,
    0.031104322522878647,
    0.0221859160810709,
    0.011161772534251213,
    0.008608740754425526,
    -0.0006894390098750591,
    -0.0021005740854889154,
    0.0423349104821682,
    -0.0032222564332187176,
    -0.0030639823526144028,
    0.029507817700505257,
    -0.005756364203989506,
    0.01915806159377098,
    -0.001073512015864253,
    -0.0284067802131176,
    -0.010886512696743011,
    0.004854889120906591,
    -0.01542829442769289,
    -0.0074182432144880295,
    0.015786131843924522,
    -0.024057678878307343,
    0.01326062623411417,
    0.043656155467033386,
    -0.013762975111603737,
    -0.016625672578811646,
    0.01835980825126171,
    -0.01474014576524496,
    -0.0009797518141567707,
    -0.02703048288822174,
    0.027594763785600662,
    -0.007191154174506664,
    -0.0009255600743927062,
    0.030306071043014526,
    -0.05100558325648308,
    0.02418154664337635,
    0.009475807659327984,
    -0.0015431735664606094,
    0.006176135037094355,
    -0.006303442642092705,
    -0.016171494498848915,
    -0.01853872649371624,
    0.01613020710647106,
    0.016859643161296844,
    0.02298416756093502,
    -0.005739160347729921,
    -0.027512187138199806,
    -4.919188086205395e-06,
    0.00915237795561552,
    -0.012187113985419273,
    0.015951287001371384,
    0.009675371460616589,
    0.0041013662703335285,
    -0.009654726833105087,
    0.0022760520223528147,
    -0.006406664848327637,
    -0.023988865315914154,
    -0.031241953372955322,
    -0.020561885088682175,
    -0.015139272436499596,
    0.023410819470882416,
    -0.0006911593955010176,
    0.02235107123851776,
    -0.01186368428170681,
    -0.0007027718820609152,
    -0.022516226395964622,
    -0.030553804710507393,
    -0.008429821580648422,
    -0.006946861278265715,
    0.000321279454510659,
    0.013081707060337067,
    0.017864340916275978,
    0.024195309728384018,
    0.02697543054819107,
    -0.015276902355253696,
    0.0015354318311437964,
    0.009668489918112755,
    0.009455163963139057,
    -0.010611253790557384,
    -0.014726382680237293,
    -0.013597819022834301,
    0.0033702084328979254,
    0.002960759913548827,
    0.00832659937441349,
    0.012895907275378704,
    -0.02058940939605236,
    -0.019254401326179504,
    -0.0036609512753784657,
    0.01596505008637905,
    0.008188970386981964,
    -0.002688941080123186,
    -0.014368545264005661,
    -0.03234298899769783,
    -0.011815513484179974,
    0.017410162836313248,
    0.012600003741681576,
    0.014162100851535797,
    -0.05725397542119026,
    -0.01009514182806015,
    0.0363893061876297,
    -0.01608891785144806,
    0.02800765261054039,
    0.001281677046790719,
    0.014877775683999062,
    -0.0013573734322562814,
    0.033333923667669296,
    0.004510814789682627,
    0.004913381766527891,
    0.0007969622383825481,
    -0.0011113601503893733,
    -0.03831612318754196,
    -0.0024566908832639456,
    -0.010184600949287415,
    0.0038226661272346973,
    0.026149651035666466,
    0.018979141488671303,
    0.018222179263830185,
    -0.015896236523985863,
    0.035673629492521286,
    -0.03360918536782265,
    -0.01391436718404293,
    0.023052982985973358,
    -0.0004679411358665675,
    -0.0020885313861072063,
    -0.0137148043140769,
    -0.023520924150943756,
    -0.01910300925374031,
    -0.004170181229710579,
    -0.010143312625586987,
    0.02389252372086048,
    0.020616935566067696,
    -0.00898722279816866,
    0.0130885886028409,
    -0.0066716019064188,
    -0.010157075710594654,
    0.05004217475652695,
    0.023631026968359947,
    0.006988150533288717,
    0.04219727963209152,
    0.005178319290280342,
    -0.03867395967245102,
    0.001541453180834651,
    0.005412289872765541,
    -0.0009203989175148308,
    0.020038891583681107,
    0.006867724470794201,
    -0.0291499812155962,
    -0.028434306383132935,
    0.014850249513983727,
    -0.029067402705550194,
    -0.012971603311598301,
    -0.022089574486017227,
    0.026135889813303947,
    0.016212783753871918,
    -0.0006386880413629115,
    -0.03336144983768463,
    -0.013473952189087868,
    0.00027052845689468086,
    0.008945933543145657,
    -0.023754894733428955,
    -0.0017375755123794079,
    -0.01115489099174738,
    0.010335993953049183,
    -0.0007139543304219842,
    0.04745473712682724,
    0.03820601850748062,
    -0.0015999458264559507,
    0.011767343617975712,
    -0.00012504952610470355,
    -0.0075489915907382965,
    -0.02394757606089115,
    -0.003784818109124899,
    -0.010927801951766014,
    0.0019113330636173487,
    0.025681709870696068,
    -0.0015233892481774092,
    -0.008994104340672493,
    0.017079852521419525,
    -0.000260851375060156,
    -0.011987551115453243,
    0.003294512163847685,
    -0.0030330156441777945,
    0.04005025699734688,
    -0.03058132901787758,
    0.00012827522004954517,
    0.006365375593304634,
    -0.02006641775369644,
    0.0024240040220320225,
    0.00400502560660243,
    -0.028434306383132935,
    -0.012221521697938442,
    -0.019543424248695374,
    -0.01115489099174738,
    0.034077126532793045,
    0.004383507650345564,
    -0.012276573106646538,
    -0.01255183294415474,
    0.0064858016557991505,
    -0.007693503051996231,
    -0.003236019518226385,
    0.008202732540667057,
    0.010308467783033848,
    -0.01699727401137352,
    -0.007769199088215828,
    -0.0138317896053195,
    -0.026548778638243675,
    -0.003313436172902584,
    -0.003960296045988798,
    0.0010967369889840484,
    0.007466413546353579,
    0.04236243665218353,
    -0.013983182609081268,
    0.022268492728471756,
    -0.026025785133242607,
    0.0012300658272579312,
    -0.052051570266485214,
    0.004087603650987148,
    -0.01574484258890152,
    -0.023424582555890083,
    0.008154562674462795,
    -2.822485112119466e-05,
    -0.05670345574617386,
    -0.024498095735907555,
    0.0012988807866349816,
    0.028544409200549126,
    0.0004464364901650697,
    -0.006533972453325987,
    0.015042931772768497,
    0.00013332882372196764,
    -3.395046223886311e-05,
    -0.01717619225382805,
    -4.6907014620956033e-05,
    0.03600394353270531,
    -0.0070810504257678986,
    0.002227881457656622,
    0.008023814298212528,
    -0.02258504182100296,
    0.014038234017789364,
    0.017245007678866386,
    0.006757620722055435,
    -0.027691105380654335,
    -0.001820153440348804,
    -0.01534571684896946,
    -0.0003941801842302084,
    -0.02514495514333248,
    0.021717974916100502,
    0.021924419328570366,
    0.023768657818436623,
    -0.016446754336357117,
    -0.011182417161762714,
    0.018180890008807182,
    0.004362863022834063,
    -0.020561885088682175,
    0.007466413546353579,
    0.04472966864705086,
    0.011457676067948341,
    0.010157075710594654,
    0.002227881457656622,
    -0.022598804906010628,
    -0.011856802739202976,
    -0.026369860395789146,
    -0.021690448746085167,
    -0.023424582555890083,
    -0.009351941756904125,
    0.024938510730862617,
    0.02514495514333248,
    -0.020259099081158638,
    -0.0018063904717564583,
    0.0036575105041265488,
    -0.011127364821732044,
    0.012648173607885838,
    -0.05719892308115959,
    0.028131520375609398,
    0.005835501477122307,
    0.041674286127090454,
    -0.01579989492893219,
    -0.005236811935901642,
    0.004073840565979481,
    0.026149651035666466,
    -0.005505189765244722,
    -0.022117100656032562,
    0.016928458586335182,
    0.02385123446583748,
    0.033746812492609024,
    0.02127755805850029,
    -0.03793075680732727,
    -0.00014881216338835657,
    0.009689134545624256,
    0.01200131420046091,
    0.01021212711930275,
    0.02994823269546032,
    0.007803606800734997,
    0.015882473438978195,
    -0.006988150533288717,
    0.008718844503164291,
    0.006361934822052717,
    -0.002372392686083913,
    0.008340362459421158,
    -0.02601202204823494,
    -0.013398256152868271,
    -0.010377283208072186,
    0.0284067802131176,
    0.01763037033379078,
    -0.019350742921233177,
    0.007500821258872747,
    -0.011939380317926407,
    -0.022392360493540764,
    3.5160101106157526e-05,
    -0.002554752165451646,
    -0.002866139402613044,
    0.007941236719489098,
    0.015896236523985863,
    -0.0016885449877008796,
    0.023231901228427887,
    0.02903987653553486,
    -0.019364506006240845,
    -0.0047826338559389114,
    -0.007273732218891382,
    0.01979115791618824,
    -0.019089246168732643,
    0.0031912897247821093,
    0.035453423857688904,
    -0.02356221340596676,
    -3.6047167668584734e-05,
    -0.011264994740486145,
    0.038068387657403946,
    -0.0032342991326004267,
    0.0005483684944920242,
    0.003881158772855997,
    -0.036141570657491684,
    -0.0398300476372242,
    0.003291071392595768,
    -0.0196810532361269,
    -0.02458067238330841,
    0.004710378125309944,
    -0.016501806676387787,
    -0.007149865385144949,
    0.009482689201831818,
    -0.03195762634277344,
    0.004583070520311594,
    -0.018098311498761177,
    0.012214640155434608,
    -0.02316308580338955,
    -0.0005789051065221429,
    -0.030774012207984924,
    0.0003152581339236349,
    0.02202075906097889,
    -0.02252998948097229,
    0.012056365609169006,
    0.18783707916736603,
    0.007975643500685692,
    0.0548592172563076,
    0.02657630480825901,
    0.006840198300778866,
    0.004073840565979481,
    -0.001575000467710197,
    -0.003746969858184457,
    0.000540626875590533,
    0.02577805146574974,
    -0.01149208378046751,
    0.009290007874369621,
    -0.0013040418270975351,
    0.01157466135919094,
    0.025241294875741005,
    0.0009599674958735704,
    -0.03198515251278877,
    -0.06165812537074089,
    -0.03069143369793892,
    0.0025495910085737705,
    0.002243364928290248,
    0.002540989313274622,
    -0.03751786798238754,
    -0.025241294875741005,
    -0.016377940773963928,
    -0.00304505811072886,
    -0.025007324293255806,
    -0.01534571684896946,
    0.0039052441716194153,
    -0.017313821241259575,
    -0.007521465886384249,
    -0.002313900040462613,
    -0.002128100022673607,
    -0.006633753888309002,
    -0.01214582473039627,
    -0.03170989453792572,
    0.012083891779184341,
    -0.006822994910180569,
    0.004431677982211113,
    0.0219106562435627,
    0.016281599178910255,
    -0.0353708453476429,
    -0.0012283454416319728,
    -0.030388647690415382,
    -0.00717051001265645,
    -0.012579359114170074,
    -0.03718755766749382,
    0.024264125153422356,
    0.00016859643801581115,
    0.0212087444961071,
    -0.004913381766527891,
    -0.019364506006240845,
    0.031627316027879715,
    0.010714475996792316,
    0.007583398837596178,
    -0.03845375031232834,
    0.004885856062173843,
    0.010776408948004246,
    -0.006072912365198135,
    0.041839443147182465,
    -0.028709564357995987,
    0.02492474764585495,
    -0.029232557862997055,
    0.0029848450794816017,
    -0.06270411610603333,
    0.019873734563589096,
    -0.03828859701752663,
    -0.010163957253098488,
    0.004916822537779808,
    -0.003647188190370798,
    -0.015772368758916855,
    0.0045176963321864605,
    -0.010301586240530014,
    -0.014272204600274563,
    -0.029122455045580864,
    -0.018566252663731575,
    0.042004600167274475,
    0.010989734902977943,
    0.014017589390277863,
    0.03754539415240288,
    -0.006891809403896332,
    -0.009420756250619888,
    -0.010026327334344387,
    0.010280942544341087,
    -0.021484004333615303,
    -0.026039548218250275,
    0.01881398633122444,
    -0.03669209033250809,
    -0.007776080630719662,
    -0.018896564841270447,
    -0.03360918536782265,
    -0.028819669038057327,
    0.030718959867954254,
    -0.023342005908489227,
    -0.011987551115453243,
    -0.017245007678866386,
    0.015882473438978195,
    0.027581000700592995,
    0.008436703123152256,
    -0.011960024945437908,
    -0.038701485842466354,
    0.030829062685370445,
    0.0039052441716194153,
    -0.009991919621825218,
    -0.018786460161209106,
    -0.003469990100711584,
    0.008539926260709763,
    0.014382308349013329,
    0.00263732997700572,
    -0.020809616893529892,
    -0.000867497525177896,
    -0.024938510730862617,
    0.015373243018984795,
    -0.004758548457175493,
    0.014437360689043999,
    -0.0019216553773730993,
    0.001993910875171423,
    -0.013852434232831001,
    0.015841184183955193,
    -0.00017795096209738404,
    0.008684436790645123,
    -0.0006382579449564219,
    -0.012744514271616936,
    -0.013928130269050598,
    -0.01365975197404623,
    -0.003435582621023059,
    -0.03063638135790825,
    0.041151292622089386,
    -0.005498308222740889,
    -0.019116772338747978,
    0.01098285336047411,
    0.007968761958181858,
    0.022846538573503494,
    0.004713818896561861,
    -0.009372585453093052,
    -0.011884328909218311,
    -0.014134574681520462,
    0.008553688414394855,
    0.014877775683999062,
    0.0008287891396321356,
    -0.023920049890875816,
    0.013267507776618004,
    0.009868052788078785,
    -0.000260851375060156,
    0.013171167112886906,
    -0.0005569703644141555,
    0.002652813447639346,
    0.0035405252128839493,
    0.003643747651949525,
    0.01306106336414814,
    -0.019089246168732643,
    -0.004940907936543226,
    0.005353797227144241,
    -0.010790172033011913,
    -0.010879631154239178,
    -0.037270136177539825,
    -0.04475719481706619,
    -0.05026238411664963,
    0.008760133758187294,
    0.01984621025621891,
    -0.03994015231728554,
    0.025791814550757408,
    0.0021831518970429897,
    -0.005171437747776508,
    -0.02777368202805519,
    -0.02931513637304306,
    -0.17066088318824768,
    0.019240638241171837,
    0.014795198105275631,
    -0.04946413263678551,
    -0.007438887841999531,
    0.009868052788078785,
    0.029617922380566597,
    0.019749868661165237,
    -0.02122250758111477,
    -0.012290336191654205,
    0.01750650443136692,
    0.010452979244291782,
    -0.024374227970838547,
    -0.03058132901787758,
    -0.027870023623108864,
    -0.014753908850252628,
    0.013921248726546764,
    0.00456586666405201,
    0.007920592091977596,
    0.021745499223470688,
    0.036361780017614365,
    -0.014327256940305233,
    0.002826570998877287,
    0.0142033901065588,
    0.008037577383220196,
    -0.017024800181388855,
    -0.009654726833105087,
    -0.003788258880376816,
    -0.0010081379441544414,
    -0.014726382680237293,
    -0.012331625446677208,
    0.006248390302062035,
    0.01389372255653143,
    -0.02486969530582428,
    0.03016844019293785,
    0.030030811205506325,
    -0.008842711336910725,
    -0.0036196622531861067,
    -0.007755436468869448,
    0.021305084228515625,
    -0.0003404185699764639,
    0.0023276631254702806,
    0.021401425823569298,
    0.0010571684688329697,
    -0.03663703799247742,
    -0.007507702801376581,
    0.013900604099035263,
    -0.012056365609169006,
    0.004256200045347214,
    0.006169253494590521,
    0.02394757606089115,
    -0.03669209033250809,
    -0.014045115560293198,
    0.0031138730701059103,
    0.03999520465731621,
    0.014643805101513863,
    0.009076681919395924,
    0.019185585901141167,
    0.002747433725744486,
    -0.01083834283053875,
    -0.023121798411011696,
    -0.030030811205506325,
    0.036251675337553024,
    0.004259640816599131,
    -0.021318847313523293,
    -0.007954999804496765,
    -0.030994219705462456,
    0.0005617014248855412,
    -0.016281599178910255,
    0.024429280310869217,
    0.008588096126914024,
    0.03096669353544712,
    -0.024332938715815544,
    -0.0007475015590898693,
    0.004445440601557493,
    0.0024910983629524708,
    0.00015687641280237585,
    0.022970404475927353,
    0.00482048187404871,
    -0.00836100708693266,
    -0.01933697983622551,
    0.03581126034259796,
    0.010088260285556316,
    0.0066716019064188,
    0.02075456641614437,
    -0.010459860786795616,
    0.013446426019072533,
    -0.0001419306790921837,
    -0.008526163175702095,
    -0.007012235466390848,
    0.0209334846585989,
    -0.001678222673945129,
    0.025310110300779343,
    -0.011705409735441208,
    0.018786460161209106,
    0.01098285336047411,
    -0.01721748150885105,
    0.010459860786795616,
    -0.003939651418477297,
    0.006007538642734289,
    0.011340690776705742,
    0.008092628791928291,
    -0.01389372255653143,
    -0.019722342491149902,
    0.04321574047207832,
    0.011306283995509148,
    -0.03501300886273384,
    0.019804921001195908,
    0.025516554713249207,
    -0.011148009449243546,
    -0.009971274994313717,
    0.00019407944637350738,
    0.013095470145344734,
    0.026108363643288612,
    0.0034046159125864506,
    0.02036920189857483,
    0.010611253790557384,
    -0.01824970357120037,
    0.045940808951854706,
    -0.02663135528564453,
    0.04806030914187431,
    -0.018070785328745842,
    -0.033856917172670364,
    0.010948446579277515,
    0.03669209033250809,
    -0.032590724527835846,
    -0.11527867615222931,
    -0.022062048316001892,
    -0.009214311838150024,
    0.023286953568458557,
    -0.022268492728471756,
    0.026397384703159332,
    -0.0007302978192456067,
    0.02703048288822174,
    -0.005687549244612455,
    0.024043917655944824,
    -0.017093613743782043,
    0.009634082205593586,
    -0.018387334421277046,
    -0.002282933332026005,
    -0.006351612973958254,
    0.013453307561576366,
    -0.025475265458226204,
    0.004586511291563511,
    -0.03215030953288078,
    0.02071327716112137,
    0.013412019237875938,
    0.000633526942692697,
    -0.01223528478294611,
    0.015166797675192356,
    -0.028709564357995987,
    0.015455820597708225,
    -0.06457588076591492,
    -0.001032223110087216,
    0.009200548753142357,
    0.016405465081334114,
    0.0059456052258610725,
    -0.04250006750226021,
    -0.01831851899623871,
    -0.013529004529118538,
    0.03226041421294212,
    0.03820601850748062,
    -0.03336144983768463,
    -0.031627316027879715,
    0.02926008403301239,
    -0.03872901201248169,
    0.008925288915634155,
    0.011719172820448875,
    0.01681835576891899,
    -0.008684436790645123,
    -0.013301915489137173,
    0.01614397019147873,
    -0.009868052788078785,
    0.025791814550757408,
    0.026617592200636864,
    -0.014643805101513863,
    -0.022447410970926285,
    -0.006630313117057085,
    0.016611911356449127,
    -0.007707265671342611,
    0.01511174626648426,
    -0.013866197317838669,
    0.0065133278258144855,
    0.008402296341955662,
    -0.025709236040711403,
    -0.012950959615409374,
    -0.007961880415678024,
    -0.0009195387247018516,
    -0.012331625446677208,
    0.01864883117377758,
    -0.010425453074276447,
    0.013363848440349102,
    8.339771738974378e-06,
    -0.0076797399669885635,
    0.023809947073459625,
    -0.006840198300778866,
    -0.031049270182847977,
    0.017258770763874054,
    -0.04065582901239395,
    0.005243693478405476,
    -0.02082337997853756,
    0.0015251096338033676,
    0.0023379854392260313,
    0.004503933247178793,
    -0.00540196755900979,
    -0.012193995527923107,
    0.002540989313274622,
    0.0004713818780146539,
    -0.010225890204310417,
    -0.018167126923799515,
    0.00584582332521677,
    0.01796068251132965,
    0.001897570095025003,
    0.006372257135808468,
    0.0035405252128839493,
    -0.0428854301571846,
    0.040931086987257004,
    0.0003479451988823712,
    0.026163414120674133,
    -0.00022063768119551241,
    -0.010046971961855888,
    0.003461388172581792,
    -0.04544534161686897,
    0.017781762406229973,
    -0.013184930197894573,
    -0.0009272804018110037,
    -0.03958231583237648,
    -0.01846991293132305,
    -0.06474103033542633,
    0.020465543493628502,
    0.04357357695698738,
    0.0015285504050552845,
    0.014753908850252628,
    -0.020630698651075363,
    -0.011891210451722145,
    -0.022117100656032562,
    0.014905301854014397,
    0.023410819470882416,
    -0.03399454802274704,
    -0.008932170458137989,
    -0.0030983895994722843,
    -0.009943748824298382,
    0.0006894390098750591,
    -0.00023397056793328375,
    0.03358165919780731,
    0.0018597219604998827,
    0.029617922380566597,
    -0.0037744957953691483,
    0.0017909071175381541,
    -0.014685094356536865,
    0.025984495878219604,
    0.008120154961943626,
    -0.05659335106611252,
    0.01046674232929945,
    -0.010907157324254513,
    0.033168770372867584,
    -0.007466413546353579,
    -0.003356445347890258,
    -0.009764830581843853,
    -0.002811087528243661,
    -0.008828948251903057,
    -0.013446426019072533,
    0.006912454031407833,
    0.011381980031728745,
    0.04277532547712326,
    0.0015362920239567757,
    0.013129877857863903,
    0.004170181229710579,
    -0.04910629242658615,
    -0.016267836093902588,
    0.005594649352133274,
    -0.0002797754714265466,
    -0.02189689315855503,
    -0.0074182432144880295,
    0.02013523131608963,
    0.030718959867954254,
    0.008202732540667057,
    -0.020121468231081963,
    0.026617592200636864,
    0.015758605673909187,
    -0.04979444295167923,
    -0.026163414120674133,
    -0.012710107490420341,
    -0.0139487748965621,
    0.009771712124347687,
    0.005570563953369856,
    -0.03198515251278877,
    -0.013824908062815666,
    0.029287610203027725,
    -0.01497411634773016,
    0.0040497551672160625,
    0.020341675728559494,
    -0.01670825108885765,
    -0.016281599178910255,
    -0.028489356860518456,
    -0.028076468035578728,
    -0.0041013662703335285,
    0.005911197513341904,
    -0.016859643161296844,
    -0.003506117733195424,
    0.03187504783272743,
    0.01705232635140419,
    0.013529004529118538,
    0.009874934330582619,
    -0.012847736477851868,
    -0.014616278931498528,
    -0.03908684849739075,
    0.00861562229692936,
    0.02321813814342022,
    -0.01710737682878971,
    -0.0069503020495176315,
    -0.002952157985419035,
    0.014230916276574135,
    -0.009276244789361954,
    -0.009338178671896458,
    -0.009482689201831818,
    0.003998144064098597,
    0.044069044291973114,
    -0.009393230080604553,
    -0.01137509848922491,
    -0.0286820400506258,
    -0.00584582332521677,
    0.038591381162405014,
    0.008188970386981964,
    -0.024250362068414688,
    -0.015249376185238361,
    0.017712948843836784,
    0.004428237210959196,
    -0.004142655525356531,
    0.0008395414333790541,
    0.025585370138287544,
    -0.021071113646030426,
    -0.0006528811063617468,
    -0.0064341905526816845,
    -0.05012475326657295,
    -0.011430150829255581,
    -0.0027130264788866043,
    0.006977828219532967,
    -0.0041013662703335285,
    -0.0219519454985857,
    -0.014533701352775097,
    0.028764616698026657,
    -0.0284067802131176,
    0.01955718733370304,
    0.014616278931498528,
    -0.00926936324685812,
    0.01574484258890152,
    0.0010786731727421284,
    0.019818684086203575,
    0.01910300925374031,
    0.03988509997725487,
    0.003554288297891617,
    0.011636595241725445,
    0.040931086987257004,
    0.01654309593141079,
    0.008147681131958961,
    -0.00981300137937069,
    -0.025791814550757408,
    -0.012276573106646538,
    -0.008464229293167591,
    0.011960024945437908,
    -0.01414833776652813,
    0.0029504375997930765,
    0.0006898691062815487,
    -0.021704211831092834,
    0.01326062623411417,
    0.0020661666058003902,
    0.06914518773555756,
    -0.015827421098947525,
    -0.008822066709399223,
    0.002900546882301569,
    0.019474608823657036,
    0.032700829207897186,
    -0.006967505905777216,
    -0.0007702964940108359,
    0.0012868380872532725,
    -0.05089547857642174,
    0.001760800601914525,
    -0.014230916276574135,
    -0.00646171672269702,
    -0.023644790053367615,
    0.005367560312151909,
    0.02554408088326454,
    -0.022681381553411484,
    0.020465543493628502,
    -0.012971603311598301,
    0.0007599742384627461,
    0.028737090528011322,
    0.024195309728384018,
    -0.00418050354346633,
    -0.025461502373218536,
    -0.016006339341402054,
    -0.03027854487299919,
    0.05048258975148201,
    0.02309427224099636,
    0.024319175630807877,
    -0.03702240064740181,
    0.011973788030445576,
    0.010253416374325752,
    0.006805791053920984,
    -0.03330639749765396,
    0.004077281337231398,
    0.001273935311473906,
    -0.010191482491791248,
    -0.03371928632259369,
    -0.006441072095185518,
    0.012324743904173374,
    -0.0002475185028742999,
    -0.016694488003849983,
    -0.02429164946079254,
    -0.030718959867954254,
    0.04106871783733368,
    0.020947247743606567,
    0.0026338892057538033,
    0.009744185954332352,
    -0.0443718321621418
  ]
}
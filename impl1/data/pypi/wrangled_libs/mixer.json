{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": ".. image:: https://raw.github.com/klen/mixer/develop/docs/_static/logo.png\n    :width: 100px\n\nthe **mixer** is a helper to generate instances of django or sqlalchemy models.\nit's useful for testing and fixture replacement. fast and convenient test-data\ngeneration.\n\nmixer supports:\n\n* django_;\n* sqlalchemy_;\n* flask-sqlalchemy_;\n* peewee_;\n* pony_;\n* mongoengine_;\n* marshmallow_;\n* custom schemes;\n\n.. _badges:\n\n.. image:: https://github.com/klen/mixer/workflows/tests/badge.svg?style=flat-square\n    :target: https://github.com/klen/mixer/actions\n    :alt: tests status\n\n.. image:: http://img.shields.io/pypi/v/mixer.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/mixer\n    :alt: version\n\n.. image:: http://img.shields.io/pypi/dm/mixer.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/mixer\n    :alt: downloads\n\n.. image:: http://img.shields.io/pypi/l/mixer.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/mixer\n    :alt: license\n\n.. _documentation:\n\n\n**docs are available at https://mixer.readthedocs.org/. pull requests with\ndocumentation enhancements and/or fixes are awesome and most welcome.**\n\n\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435: http://klen.github.io/mixer.html\n\n.. important::\n\n   from version 6.2 the mixer library doesn't support python 2.\n   the latest version with python<3 support is mixer 6.1.3\n\n\n.. _contents:\n\n.. contents::\n\n\nrequirements\n=============\n\n- python 3.7+\n- django (3.0, 3.1) for django orm support;\n- flask-sqlalchemy for sqlalchemy orm support and integration as flask application;\n- faker >= 0.7.3\n- mongoengine for mongoengine odm support;\n- sqlalchemy for sqlalchemy orm support;\n- peewee orm support;\n\n\ninstallation\n=============\n\n**mixer** should be installed using pip: ::\n\n    pip install mixer\n\n\nusage\n=====\n\n |   by default mixer tries to generate fake (human-friendly) data.\n |   if you want to randomize the generated values initialize the mixer\n |   by manual: mixer(fake=false)\n\n\n |   by default mixer saves the generated objects in a database. if you want to disable\n |   this, initialize the mixer by manual like mixer(commit=false)\n\n\ndjango workflow\n---------------\nquick example:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer\n    from customapp.models import user, usermessage\n\n    # generate a random user\n    user = mixer.blend(user)\n\n    # generate an usermessage\n    message = mixer.blend(usermessage, user=user)\n\n    # generate an usermessage and an user. set username for generated user to 'testname'.\n    message = mixer.blend(usermessage, user__username='testname')\n\n    # generate somemodel from someapp and select fk or m2m values from db\n    some = mixer.blend('someapp.somemodel', somerelation=mixer.select)\n\n    # generate somemodel from someapp and force a value of money field from default to random\n    some = mixer.blend('someapp.somemodel', money=mixer.random)\n    \n    # generate somemodel from someapp and skip the generation of money field\n    some = mixer.blend('someapp.somemodel', money=mixer.skip)\n\n    # generate 5 somemodel's instances and take company field's values from custom generator\n    some_models = mixer.cycle(5).blend('somemodel', company=(name for name in company_names))\n\n\nflask, flask-sqlalchemy\n-----------------------\nquick example:\n\n.. code-block:: python\n\n    from mixer.backend.flask import mixer\n    from models import user, usermessage\n\n    mixer.init_app(self.app)\n\n    # generate a random user\n    user = mixer.blend(user)\n\n    # generate an usermessage\n    message = mixer.blend(usermessage, user=user)\n\n    # generate an usermessage and an user. set username for generated user to 'testname'.\n    message = mixer.blend(usermessage, user__username='testname')\n\n    # generate somemodel and select fk or m2m values from db\n    some = mixer.blend('project.models.somemodel', somerelation=mixer.select)\n\n    # generate somemodel from someapp and force a value of money field from default to random\n    some = mixer.blend('project.models.somemodel', money=mixer.random)\n    \n    # generate somemodel from someapp and skip the generation of money field\n    some = mixer.blend('project.models.somemodel', money=mixer.skip)\n\n    # generate 5 somemodel's instances and take company field's values from custom generator\n    some_models = mixer.cycle(5).blend('project.models.somemodel', company=(company for company in companies))\n\n\nsupport for flask-sqlalchemy models that have `__init__` arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nfor support this scheme, just create your own mixer class, like this:\n\n.. code-block:: python\n\n    from mixer.backend.sqlalchemy import mixer\n\n    class myownmixer(mixer):\n\n        def populate_target(self, values):\n            target = self.__scheme(**values)\n            return target\n\n    mixer = myownmixer()\n\n\nsqlalchemy workflow\n-------------------\n\nexample of initialization:\n\n.. code-block:: python\n\n    from mixer.backend.sqlalchemy import mixer\n\n    engine = create_engine('sqlite:///:memory:')\n    base = declarative_base()\n    session = sessionmaker(bind=engine)\n\n    mixer = mixer(session=session(), commit=true)\n    role = mixer.blend('package.models.role')\n\n\nalso, see `flask`_, `flask-sqlalchemy`_.\n\n\nmongoengine workflow\n--------------------\n\nexample usage:\n\n.. code-block:: python\n\n    from mixer.backend.mongoengine import mixer\n\n    class user(document):\n        created_at = datetimefield(default=datetime.datetime.now)\n        email = emailfield(required=true)\n        first_name = stringfield(max_length=50)\n        last_name = stringfield(max_length=50)\n        username = stringfield(max_length=50)\n\n    class post(document):\n        title = stringfield(max_length=120, required=true)\n        author = referencefield(user)\n        tags = listfield(stringfield(max_length=30))\n\n    post = mixer.blend(post, author__username='foo')\n\nmarshmallow workflow\n--------------------\n\nexample usage:\n\n.. code-block:: python\n\n    from mixer.backend.marshmallow import mixer\n    import marshmallow as ma\n\n    class user(ma.schema):\n        created_at = ma.fields.datetime(required=true)\n        email = ma.fields.email(required=true)\n        first_name = ma.fields.string(required=true)\n        last_name = ma.fields.string(required=true)\n        username = ma.fields.string(required=true)\n\n    class post(ma.schema):\n        title = ma.fields.string(required=true)\n        author = ma.fields.nested(user, required=true)\n\n    post = mixer.blend(post, author__username='foo')\n\n\ncommon usage\n------------\nquick example:\n\n.. code-block:: python\n\n    from mixer.main import mixer\n\n    class test:\n        one = int\n        two = int\n        name = str\n\n    class scheme:\n        name = str\n        money = int\n        male = bool\n        prop = test\n\n    scheme = mixer.blend(scheme, prop__one=1)\n\n\ndb commits\n----------\n\nby default 'django', 'flask', 'mongoengine' backends tries to save objects in\ndatabase. for preventing this behavior init `mixer` manually:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer\n\n    mixer = mixer(commit=false)\n\n\nor you can temporary switch context use the mixer as context manager:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer\n\n    # will be save to db\n    user1 = mixer.blend('auth.user')\n\n    # will not be save to db\n    with mixer.ctx(commit=false):\n        user2 = mixer.blend('auth.user')\n\n\n.. _custom:\n\ncustom fields\n-------------\n\nthe mixer allows you to define generators for fields by manually.\nquick example:\n\n.. code-block:: python\n\n        from mixer.main import mixer\n\n        class test:\n            id = int\n            name = str\n\n        mixer.register(test,\n            name=lambda: 'john',\n            id=lambda: str(mixer.faker.small_positive_integer())\n        )\n\n        test = mixer.blend(test)\n        test.name == 'john'\n        isinstance(test.id, str)\n\n        # you could pinned just a value to field\n        mixer.register(test, name='just john')\n        test = mixer.blend(test)\n        test.name == 'just john'\n\nalso, you can make your own factory for field types:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer, genfactory\n\n    def get_func(*args, **kwargs):\n        return \"always same\"\n\n    class myfactory(genfactory):\n        generators = {\n            models.charfield: get_func\n        }\n\n    mixer = mixer(factory=myfactory)\n\nmiddlewares\n-----------\n\nyou can add middleware layers to process generation:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer\n\n    # register middleware to model\n    @mixer.middleware('auth.user')\n    def encrypt_password(user):\n        user.set_password('test')\n        return user\n\nyou can add several middlewares. each middleware should get one argument\n(generated value) and return them.\n\nit's also possible to unregister a middleware:\n\n.. code-block:: python\n\n    mixer.unregister_middleware(encrypt_password)\n\n\nlocales\n-------\n\nby default mixer uses 'en' locale. you could switch mixer default locale by\ncreating your own mixer:\n\n.. code-block:: python\n\n    from mixer.backend.django import mixer\n\n    mixer = mixer(locale='it')\n    mixer.faker.name()          ## u'acchisio conte'\n\nat any time you could switch mixer current locale:\n\n.. code-block:: python\n\n    mixer.faker.locale = 'cz'\n    mixer.faker.name()          ## u'miloslava urbanov\\xe1 csc.'\n\n    mixer.faker.locale = 'en'\n    mixer.faker.name()          ## u'john black'\n\n    # use the mixer context manager\n    mixer.faker.phone()         ## u'1-438-238-1116'\n    with mixer.ctx(locale='fr'):\n        mixer.faker.phone()     ## u'08 64 92 11 79'\n\n    mixer.faker.phone()         ## u'1-438-238-1116'\n\n.. _bugtracker:\n\nbug tracker\n===========\n\nif you have any suggestions, bug reports or\nannoyances please report them to the issue tracker\nat https://github.com/klen/mixer/issues\n\n\ncontributing\n============\n\ndevelopment of mixer happens at github: https://github.com/klen/mixer\n\n\ncontributors\n=============\n\n* antoine bertin            (https://github.com/diaoul)\n* benjamin port             (https://github.com/bport)\n* dmitriy moseev            (https://github.com/dmitriymoseev)\n* eelke hermens             (https://github.com/eelkeh)\n* esteban j. g. gabancho    (https://github.com/egabancho)\n* felix dreissig            (https://github.com/f30)\n* illia volochii            (https://github.com/illia-v)\n* jannis                    (https://github.com/jnns)\n* kirill pavlov             (https://github.com/pavlov99)\n* kwok-kuen cheung          (https://github.com/cheungpat)\n* mahdi yusuf               (https://github.com/myusuf3)\n* marek baczy\u0144ski           (https://github.com/imbaczek)\n* marigold                  (https://github.com/marigold)\n* matt caldwell             (https://github.com/mattcaldwell)\n* mikhail porokhovnichenko  (https://github.com/marazmiki)\n* skylar saveland           (https://github.com/skyl)\n* suriya subramanian        (https://github.com/suriya)\n* gram                      (https://github.com/orsinium)\n* joshua                    (https://github.com/jomasti)\n* lucas rangel cezimbra     (https://github.com/lucasrcezimbra)\n* avi-pomicell              (https://github.com/avi-pomicell)\n* jochen brissier           (https://github.com/jbrissier)\n\n\nlicense\n========\n\nlicensed under a `bsd license`_.\n\n\n.. _links:\n\n.. _django: http://djangoproject.com/\n.. _flask: https://flask.palletsprojects.com/en/1.1.x/\n.. _flask-sqlalchemy: http://flask-sqlalchemy.pocoo.org/\n.. _sqlalchemy: http://www.sqlalchemy.org/\n.. _marshmallow: http://marshmallow.readthedocs.io/en/latest/\n.. _mongoengine: http://mongoengine.org/\n.. _peewee: http://peewee.readthedocs.org/en/latest/\n.. _pony: http://ponyorm.com/\n.. _klen: http://klen.github.io\n.. _bsd license: http://www.linfo.org/bsdlicense.html\n\n\n",
  "docs_url": "https://pythonhosted.org/mixer/",
  "keywords": "django,flask,sqlalchemy,testing,mock,stub,mongoengine,data",
  "license": "bsd",
  "name": "mixer",
  "package_url": "https://pypi.org/project/mixer/",
  "project_url": "https://pypi.org/project/mixer/",
  "project_urls": {
    "Documentation": "https://mixer.readthedocs.org",
    "Homepage": "https://github.com/klen/mixer",
    "Issue tracker": "https://github.com/klen/mixer",
    "Source code": "https://github.com/klen/mixer"
  },
  "release_url": "https://pypi.org/project/mixer/7.2.2/",
  "requires_dist": [
    "Faker (<12.1,>=5.4.0)",
    "Django (>=3.0) ; extra == 'tests'",
    "Flask (>=1.0) ; extra == 'tests'",
    "Marshmallow (>=3.9) ; extra == 'tests'",
    "SQLAlchemy (>=1.1.4) ; extra == 'tests'",
    "flask-sqlalchemy (>=2.1) ; extra == 'tests'",
    "mongoengine (>=0.10.1) ; extra == 'tests'",
    "peewee (>=3.7.0) ; extra == 'tests'",
    "pony (>=0.7) ; extra == 'tests'",
    "psycopg2-binary (>=2.8.4) ; extra == 'tests'",
    "pytest ; extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "mixer -- is a fixtures replacement. supported django orm, sqlalchemy orm, mongoengine odm and custom python objects.",
  "version": "7.2.2",
  "releases": [],
  "developers": [
    "horneds@gmail.com",
    "kirill_klenov"
  ],
  "kwds": "sqlalchemy sqlalchemy_ mixer _sqlalchemy django",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_mixer",
  "homepage": "https://github.com/klen/mixer",
  "release_count": 156,
  "dependency_ids": [
    "pypi_django",
    "pypi_faker",
    "pypi_flask",
    "pypi_flask_sqlalchemy",
    "pypi_marshmallow",
    "pypi_mongoengine",
    "pypi_peewee",
    "pypi_pony",
    "pypi_psycopg2_binary",
    "pypi_pytest",
    "pypi_sqlalchemy"
  ]
}
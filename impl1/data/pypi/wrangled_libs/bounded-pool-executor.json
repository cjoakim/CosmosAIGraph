{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# bounded process&thread pool executor\nboundedsemaphore for [processpoolexecutor](https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor) & [threadpoolexecutor](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor) from [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html)\n\n## installation\n```bash\npip install bounded-pool-executor\n```\n\n# what is the main problem?\nif you use the standard module \"**concurrent.futures**\" and want to simultaneously process several million data, then a queue of workers will take up all the free memory.\n\nif the script is run on a weak vps, this will lead to a **memory leak**.\n\n\n\n## boundedprocesspoolexecutor vs processpoolexecutor\n\n# boundedprocesspoolexecutor\n**boundedprocesspoolexecutor** will put a new worker in queue only when another worker has finished his work.\n\n```python\nfrom bounded_pool_executor import boundedprocesspoolexecutor\nfrom time import sleep\nfrom random import randint\n\ndef do_job(num):\n    sleep_sec = randint(1, 10)\n    print('value: %d, sleep: %d sec.' % (num, sleep_sec))\n    sleep(sleep_sec)\n\nwith boundedprocesspoolexecutor(max_workers=5) as worker:\n    for num in range(10000):\n        print('#%d worker initialization' % num)\n        worker.submit(do_job, num)\n\n```\n### result:\n![boundedprocesspoolexecutor](https://python-scripts.com/wp-content/uploads/2018/12/bounded.gif)\n\n# classic concurrent.futures.processpoolexecutor\n**processpoolexecutor** inserts all workers into the queue and expects tasks to be performed as the new worker is released, depending on the value of `max_workers`.\n\n```python\nimport concurrent.futures\nfrom time import sleep\nfrom random import randint\n\ndef do_job(num):\n    sleep_sec = randint(1, 3)\n    print('value: %d, sleep: %d sec.' % (num, sleep_sec))\n    sleep(sleep_sec)\n\nwith concurrent.futures.processpoolexecutor(max_workers=5) as worker:\n    for num in range(100000):\n        print('#%d worker initialization' % num)\n        worker.submit(do_job, num)\n```\n\n### result:\n![concurrent.futures.processpoolexecutor](https://python-scripts.com/wp-content/uploads/2018/12/future-processpoolexecutor.gif)\n\n\n",
  "docs_url": null,
  "keywords": "concurrent futures processpoolexecutor threadpoolexecutor semaphore memory leak",
  "license": "mit",
  "name": "bounded-pool-executor",
  "package_url": "https://pypi.org/project/bounded-pool-executor/",
  "project_url": "https://pypi.org/project/bounded-pool-executor/",
  "project_urls": {
    "Homepage": "http://github.com/mowshon/bounded_pool_executor"
  },
  "release_url": "https://pypi.org/project/bounded-pool-executor/0.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "bounded process&thread pool executor",
  "version": "0.0.3",
  "releases": [],
  "developers": [
    "mowshon",
    "mowshon@yandex.ru"
  ],
  "kwds": "bounded_pool_executor processpoolexecutor boundedprocesspoolexecutor threadpoolexecutor concurrent",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bounded_pool_executor",
  "homepage": "http://github.com/mowshon/bounded_pool_executor",
  "release_count": 2,
  "dependency_ids": []
}
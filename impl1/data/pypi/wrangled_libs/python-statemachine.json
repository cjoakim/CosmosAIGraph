{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "# python statemachine\n\n[![pypi](https://img.shields.io/pypi/v/python-statemachine.svg)](https://pypi.python.org/pypi/python-statemachine)\n[![downloads](https://img.shields.io/pypi/dm/python-statemachine.svg)](https://pypi.python.org/pypi/python-statemachine)\n[![build status](https://github.com/fgmacedo/python-statemachine/actions/workflows/python-package.yml/badge.svg?branch=develop)](https://github.com/fgmacedo/python-statemachine/actions/workflows/python-package.yml?query=branch%3adevelop)\n[![coverage report](https://codecov.io/gh/fgmacedo/python-statemachine/branch/develop/graph/badge.svg)](https://codecov.io/gh/fgmacedo/python-statemachine)\n[![documentation status](https://readthedocs.org/projects/python-statemachine/badge/?version=latest)](https://python-statemachine.readthedocs.io/en/latest/?badge=latest)\n[![github commits since last release (main)](https://img.shields.io/github/commits-since/fgmacedo/python-statemachine/main/develop)](https://github.com/fgmacedo/python-statemachine/compare/main...develop)\n\n\npython [finite-state machines](https://en.wikipedia.org/wiki/finite-state_machine) made easy.\n\n\n* free software: mit license\n* documentation: https://python-statemachine.readthedocs.io.\n\n\nwelcome to python-statemachine, an intuitive and powerful state machine framework designed for a\ngreat developer experience.\n\n\ud83d\ude80 with statemachine, you can easily create complex, dynamic systems with clean, readable code.\n\n\ud83d\udca1 our framework makes it easy to understand and reason about the different states, events and\ntransitions in your system, so you can focus on building great products.\n\n\ud83d\udd12 python-statemachine also provides robust error handling and ensures that your system stays\nin a valid state at all times.\n\n\na few reasons why you may consider using it:\n\n* \ud83d\udcc8 python-statemachine is designed to help you build scalable,\n  maintainable systems that can handle any complexity.\n* \ud83d\udcaa you can easily create and manage multiple state machines within a single application.\n* \ud83d\udeab prevents common mistakes and ensures that your system stays in a valid state at all times.\n\n\n## getting started\n\n\nto install python state machine, run this command in your terminal:\n\n    pip install python-statemachine\n\nto generate diagrams from your machines, you'll also need `pydot` and `graphviz`. you can\ninstall this library already with `pydot` dependency using the `extras` install option. see\nour docs for more details.\n\n    pip install python-statemachine[diagrams]\n\ndefine your state machine:\n\n```py\n>>> from statemachine import statemachine, state\n\n>>> class trafficlightmachine(statemachine):\n...     \"a traffic light machine\"\n...     green = state(initial=true)\n...     yellow = state()\n...     red = state()\n...\n...     cycle = (\n...         green.to(yellow)\n...         | yellow.to(red)\n...         | red.to(green)\n...     )\n...\n...     def before_cycle(self, event: str, source: state, target: state, message: str = \"\"):\n...         message = \". \" + message if message else \"\"\n...         return f\"running {event} from {source.id} to {target.id}{message}\"\n...\n...     def on_enter_red(self):\n...         print(\"don't move.\")\n...\n...     def on_exit_red(self):\n...         print(\"go ahead!\")\n\n```\n\nyou can now create an instance:\n\n```py\n>>> sm = trafficlightmachine()\n\n```\n\nthis state machine can be represented graphically as follows:\n\n```py\n>>> img_path = \"docs/images/readme_trafficlightmachine.png\"\n>>> sm._graph().write_png(img_path)\n\n```\n\n![](https://raw.githubusercontent.com/fgmacedo/python-statemachine/develop/docs/images/readme_trafficlightmachine.png)\n\n\nwhere on the `trafficlightmachine`, we've defined `green`, `yellow`, and `red` as states, and\none event called `cycle`, which is bound to the transitions from `green` to `yellow`, `yellow` to `red`,\nand `red` to `green`. we also have defined three callbacks by name convention, `before_cycle`, `on_enter_red`, and `on_exit_red`.\n\n\nthen start sending events to your new state machine:\n\n```py\n>>> sm.send(\"cycle\")\n'running cycle from green to yellow'\n\n```\n\nthat's it. this is all an external object needs to know about your state machine: how to send events.\nideally, all states, transitions, and actions should be kept internally and not checked externally to avoid unnecessary coupling.\n\nbut if your use case needs, you can inspect state machine properties, like the current state:\n\n```py\n>>> sm.current_state.id\n'yellow'\n\n```\n\nor get a complete state representation for debugging purposes:\n\n```py\n>>> sm.current_state\nstate('yellow', id='yellow', value='yellow', initial=false, final=false)\n\n```\n\nthe `state` instance can also be checked by equality:\n\n```py\n>>> sm.current_state == trafficlightmachine.yellow\ntrue\n\n>>> sm.current_state == sm.yellow\ntrue\n\n```\n\nor you can check if a state is active at any time:\n\n```py\n>>> sm.green.is_active\nfalse\n\n>>> sm.yellow.is_active\ntrue\n\n>>> sm.red.is_active\nfalse\n\n```\n\neasily iterate over all states:\n\n```py\n>>> [s.id for s in sm.states]\n['green', 'red', 'yellow']\n\n```\n\nor over events:\n\n```py\n>>> [t.name for t in sm.events]\n['cycle']\n\n```\n\ncall an event by its name:\n\n```py\n>>> sm.cycle()\ndon't move.\n'running cycle from yellow to red'\n\n```\nor send an event with the event name:\n\n```py\n>>> sm.send('cycle')\ngo ahead!\n'running cycle from red to green'\n\n>>> sm.green.is_active\ntrue\n\n```\n\nyou can pass arbitrary positional or keyword arguments to the event, and\nthey will be propagated to all actions and callbacks using something similar to dependency injection. in other words, the library will only inject the parameters declared on the\ncallback method.\n\nnote how `before_cycle` was declared:\n\n```py\ndef before_cycle(self, event: str, source: state, target: state, message: str = \"\"):\n    message = \". \" + message if message else \"\"\n    return f\"running {event} from {source.id} to {target.id}{message}\"\n```\n\nthe params `event`, `source`, `target` (and others) are available built-in to be used on any action.\nthe param `message` is user-defined, in our example we made it default empty so we can call `cycle` with\nor without a `message` parameter.\n\nif we pass a `message` parameter, it will be used on the `before_cycle` action:\n\n```py\n>>> sm.send(\"cycle\", message=\"please, now slowdown.\")\n'running cycle from green to yellow. please, now slowdown.'\n\n```\n\n\nby default, events with transitions that cannot run from the current state or unknown events\nraise a `transitionnotallowed` exception:\n\n```py\n>>> sm.send(\"go\")\ntraceback (most recent call last):\nstatemachine.exceptions.transitionnotallowed: can't go when in yellow.\n\n```\n\nkeeping the same state as expected:\n\n```py\n>>> sm.yellow.is_active\ntrue\n\n```\n\na human-readable name is automatically derived from the `state.id`, which is used on the messages\nand in diagrams:\n\n```py\n>>> sm.current_state.name\n'yellow'\n\n```\n\n## a more useful example\n\na simple didactic state machine for controlling an `order`:\n\n```py\n>>> class ordercontrol(statemachine):\n...     waiting_for_payment = state(initial=true)\n...     processing = state()\n...     shipping = state()\n...     completed = state(final=true)\n...\n...     add_to_order = waiting_for_payment.to(waiting_for_payment)\n...     receive_payment = (\n...         waiting_for_payment.to(processing, cond=\"payments_enough\")\n...         | waiting_for_payment.to(waiting_for_payment, unless=\"payments_enough\")\n...     )\n...     process_order = processing.to(shipping, cond=\"payment_received\")\n...     ship_order = shipping.to(completed)\n...\n...     def __init__(self):\n...         self.order_total = 0\n...         self.payments = []\n...         self.payment_received = false\n...         super(ordercontrol, self).__init__()\n...\n...     def payments_enough(self, amount):\n...         return sum(self.payments) + amount >= self.order_total\n...\n...     def before_add_to_order(self, amount):\n...         self.order_total += amount\n...         return self.order_total\n...\n...     def before_receive_payment(self, amount):\n...         self.payments.append(amount)\n...         return self.payments\n...\n...     def after_receive_payment(self):\n...         self.payment_received = true\n...\n...     def on_enter_waiting_for_payment(self):\n...         self.payment_received = false\n\n```\n\nyou can use this machine as follows.\n\n```py\n>>> control = ordercontrol()\n\n>>> control.add_to_order(3)\n3\n\n>>> control.add_to_order(7)\n10\n\n>>> control.receive_payment(4)\n[4]\n\n>>> control.current_state.id\n'waiting_for_payment'\n\n>>> control.current_state.name\n'waiting for payment'\n\n>>> control.process_order()\ntraceback (most recent call last):\n...\nstatemachine.exceptions.transitionnotallowed: can't process_order when in waiting for payment.\n\n>>> control.receive_payment(6)\n[4, 6]\n\n>>> control.current_state.id\n'processing'\n\n>>> control.process_order()\n\n>>> control.ship_order()\n\n>>> control.payment_received\ntrue\n\n>>> control.order_total\n10\n\n>>> control.payments\n[4, 6]\n\n>>> control.completed.is_active\ntrue\n\n```\n\nthere's a lot more to cover, please take a look at our docs:\nhttps://python-statemachine.readthedocs.io.\n\n\n## contributing to the project\n\n* <a class=\"github-button\" href=\"https://github.com/fgmacedo/python-statemachine\" data-icon=\"octicon-star\" aria-label=\"star fgmacedo/python-statemachine on github\">star this project</a>\n* <a class=\"github-button\" href=\"https://github.com/fgmacedo/python-statemachine/issues\" data-icon=\"octicon-issue-opened\" aria-label=\"issue fgmacedo/python-statemachine on github\">open an issue</a>\n* <a class=\"github-button\" href=\"https://github.com/fgmacedo/python-statemachine/fork\" data-icon=\"octicon-repo-forked\" aria-label=\"fork fgmacedo/python-statemachine on github\">fork</a>\n\n- if you found this project helpful, please consider giving it a star on github.\n\n- **contribute code**: if you would like to contribute code to this project, please submit a pull\nrequest. for more information on how to contribute, please see our [contributing.md](contributing.md) file.\n\n- **report bugs**: if you find any bugs in this project, please report them by opening an issue\n  on our github issue tracker.\n\n- **suggest features**: if you have a great idea for a new feature, please let us know by opening\n  an issue on our github issue tracker.\n\n- **documentation**: help improve this project's documentation by submitting pull requests.\n\n- **promote the project**: help spread the word about this project by sharing it on social media,\n  writing a blog post, or giving a talk about it. tag me on twitter\n  [@fgmacedo](https://twitter.com/fgmacedo) so i can share it too!\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "python-statemachine",
  "package_url": "https://pypi.org/project/python-statemachine/",
  "project_url": "https://pypi.org/project/python-statemachine/",
  "project_urls": {
    "Homepage": "https://github.com/fgmacedo/python-statemachine"
  },
  "release_url": "https://pypi.org/project/python-statemachine/2.1.2/",
  "requires_dist": [],
  "requires_python": ">=3.7,<3.13",
  "summary": "python finite state machines made easy.",
  "version": "2.1.2",
  "releases": [],
  "developers": [
    "fernando_macedo",
    "fgmacedo@gmail.com"
  ],
  "kwds": "state_machine statemachine current_state badge py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_statemachine",
  "homepage": "https://github.com/fgmacedo/python-statemachine",
  "release_count": 24,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "`schedule <https://schedule.readthedocs.io/>`__\n===============================================\n\n\n.. image:: https://github.com/dbader/schedule/workflows/tests/badge.svg\n        :target: https://github.com/dbader/schedule/actions?query=workflow%3atests+branch%3amaster\n\n.. image:: https://coveralls.io/repos/dbader/schedule/badge.svg?branch=master\n        :target: https://coveralls.io/r/dbader/schedule\n\n.. image:: https://img.shields.io/pypi/v/schedule.svg\n        :target: https://pypi.python.org/pypi/schedule\n\npython job scheduling for humans. run python functions (or any other callable) periodically using a friendly syntax.\n\n- a simple to use api for scheduling jobs, made for humans.\n- in-process scheduler for periodic jobs. no extra processes needed!\n- very lightweight and no external dependencies.\n- excellent test coverage.\n- tested on python and 3.7, 3.8, 3.9, 3.10, 3.11\n\nusage\n-----\n\n.. code-block:: bash\n\n    $ pip install schedule\n\n.. code-block:: python\n\n    import schedule\n    import time\n\n    def job():\n        print(\"i'm working...\")\n\n    schedule.every(10).seconds.do(job)\n    schedule.every(10).minutes.do(job)\n    schedule.every().hour.do(job)\n    schedule.every().day.at(\"10:30\").do(job)\n    schedule.every(5).to(10).minutes.do(job)\n    schedule.every().monday.do(job)\n    schedule.every().wednesday.at(\"13:15\").do(job)\n    schedule.every().day.at(\"12:42\", \"europe/amsterdam\").do(job)\n    schedule.every().minute.at(\":17\").do(job)\n\n    def job_with_argument(name):\n        print(f\"i am {name}\")\n\n    schedule.every(10).seconds.do(job_with_argument, name=\"peter\")\n\n    while true:\n        schedule.run_pending()\n        time.sleep(1)\n\ndocumentation\n-------------\n\nschedule's documentation lives at `schedule.readthedocs.io <https://schedule.readthedocs.io/>`_.\n\n\nmeta\n----\n\ndaniel bader - `@dbader_org <https://twitter.com/dbader_org>`_ - mail@dbader.org\n\ninspired by `adam wiggins' <https://github.com/adamwiggins>`_ article `\"rethinking cron\" <https://adam.herokuapp.com/past/2010/4/13/rethinking_cron/>`_ and the `clockwork <https://github.com/rykian/clockwork>`_ ruby module.\n\ndistributed under the mit license. see `license.txt <https://github.com/dbader/schedule/blob/master/license.txt>`_ for more information.\n\nhttps://github.com/dbader/schedule\n",
  "docs_url": null,
  "keywords": "schedule,periodic,jobs,scheduling,clockwork,cron,scheduler,job scheduling",
  "license": "mit",
  "name": "schedule",
  "package_url": "https://pypi.org/project/schedule/",
  "project_url": "https://pypi.org/project/schedule/",
  "project_urls": {
    "Download": "https://github.com/dbader/schedule/tarball/1.2.1",
    "Homepage": "https://github.com/dbader/schedule"
  },
  "release_url": "https://pypi.org/project/schedule/1.2.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "job scheduling for humans.",
  "version": "1.2.1",
  "releases": [],
  "developers": [
    "daniel_bader",
    "mail@dbader.org"
  ],
  "kwds": "scheduler schedule scheduling workflows workflow",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_schedule",
  "homepage": "https://github.com/dbader/schedule",
  "release_count": 26,
  "dependency_ids": []
}
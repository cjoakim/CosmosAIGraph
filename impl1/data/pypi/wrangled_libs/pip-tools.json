{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing",
    "topic :: system :: systems administration",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "[![jazzband-image]][jazzband]\n[![pypi][pypi-image]][pypi]\n[![pyversions][pyversions-image]][pyversions]\n[![pre-commit][pre-commit-image]][pre-commit]\n[![buildstatus-gha][buildstatus-gha-image]][buildstatus-gha]\n[![codecov][codecov-image]][codecov]\n[![matrix room badge]][matrix room]\n[![matrix space badge]][matrix space]\n[![discord-chat-image]][discord-chat]\n\n# pip-tools = pip-compile + pip-sync\n\na set of command line tools to help you keep your `pip`-based packages fresh,\neven when you've pinned them. you do pin them, right? (in building your python application and its dependencies for production, you want to make sure that your builds are predictable and deterministic.)\n\n[![pip-tools overview for phase ii][pip-tools-overview]][pip-tools-overview]\n\n## installation\n\nsimilar to `pip`, `pip-tools` must be installed in each of your project's\n[virtual environments](https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments):\n\n```console\n$ source /path/to/venv/bin/activate\n(venv) $ python -m pip install pip-tools\n```\n\n**note**: all of the remaining example commands assume you've activated your\nproject's virtual environment.\n\n## example usage for `pip-compile`\n\nthe `pip-compile` command lets you compile a `requirements.txt` file from\nyour dependencies, specified in either `pyproject.toml`, `setup.cfg`,\n`setup.py`, or `requirements.in`.\n\nrun it with `pip-compile` or `python -m piptools compile` (or\n`pipx run --spec pip-tools pip-compile` if `pipx` was installed with the\nappropriate python version). if you use multiple python versions, you can also\nrun `py -x.y -m piptools compile` on windows and `pythonx.y -m piptools compile`\non other systems.\n\n`pip-compile` should be run from the same virtual environment as your\nproject so conditional dependencies that require a specific python version,\nor other environment markers, resolve relative to your project's\nenvironment.\n\n**note**: if `pip-compile` finds an existing `requirements.txt` file that\nfulfils the dependencies then no changes will be made, even if updates are\navailable. to compile from scratch, first delete the existing\n`requirements.txt` file, or see\n[updating requirements](#updating-requirements)\nfor alternative approaches.\n\n### requirements from `pyproject.toml`\n\nthe `pyproject.toml` file is the\n[latest standard](https://peps.python.org/pep-0621/) for configuring\npackages and applications, and is recommended for new projects. `pip-compile`\nsupports both installing your `project.dependencies` as well as your\n`project.optional-dependencies`. thanks to the fact that this is an\nofficial standard, you can use `pip-compile` to pin the dependencies\nin projects that use modern standards-adhering packaging tools like\n[setuptools](https://setuptools.pypa.io), [hatch](https://hatch.pypa.io/)\nor [flit](https://flit.pypa.io/).\n\nsuppose you have a 'foobar' python application that is packaged using `setuptools`,\nand you want to pin it for production. you can declare the project metadata as:\n\n```toml\n[build-system]\nrequires = [\"setuptools\", \"setuptools-scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nrequires-python = \">=3.9\"\nname = \"foobar\"\ndynamic = [\"dependencies\", \"optional-dependencies\"]\n\n[tool.setuptools.dynamic]\ndependencies = { file = [\"requirements.in\"] }\noptional-dependencies.test = { file = [\"requirements-test.txt\"] }\n\n```\n\nif you have a django application that is packaged using `hatch`, and you\nwant to pin it for production. you also want to pin your development tools\nin a separate pin file. you declare `django` as a dependency and create an\noptional dependency `dev` that includes `pytest`:\n\n```toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-cool-django-app\"\nversion = \"42\"\ndependencies = [\"django\"]\n\n[project.optional-dependencies]\ndev = [\"pytest\"]\n```\n\nyou can produce your pin files as easily as:\n\n```console\n$ pip-compile -o requirements.txt pyproject.toml\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile --output-file=requirements.txt pyproject.toml\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via my-cool-django-app (pyproject.toml)\nsqlparse==0.4.3\n    # via django\n\n$ pip-compile --extra dev -o dev-requirements.txt pyproject.toml\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile --extra=dev --output-file=dev-requirements.txt pyproject.toml\n#\nasgiref==3.6.0\n    # via django\nattrs==22.2.0\n    # via pytest\ndjango==4.1.7\n    # via my-cool-django-app (pyproject.toml)\nexceptiongroup==1.1.1\n    # via pytest\niniconfig==2.0.0\n    # via pytest\npackaging==23.0\n    # via pytest\npluggy==1.0.0\n    # via pytest\npytest==7.2.2\n    # via my-cool-django-app (pyproject.toml)\nsqlparse==0.4.3\n    # via django\ntomli==2.0.1\n    # via pytest\n```\n\nthis is great for both pinning your applications, but also to keep the ci\nof your open-source python package stable.\n\n### requirements from `setup.py` and `setup.cfg`\n\n`pip-compile` has also full support for `setup.py`- and\n`setup.cfg`-based projects that use `setuptools`.\n\njust define your dependencies and extras as usual and run\n`pip-compile` as above.\n\n### requirements from `requirements.in`\n\nyou can also use plain text files for your requirements (e.g. if you don't\nwant your application to be a package). to use a `requirements.in` file to\ndeclare the django dependency:\n\n```\n# requirements.in\ndjango\n```\n\nnow, run `pip-compile requirements.in`:\n\n```console\n$ pip-compile requirements.in\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile requirements.in\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via -r requirements.in\nsqlparse==0.4.3\n    # via django\n```\n\nand it will produce your `requirements.txt`, with all the django dependencies\n(and all underlying dependencies) pinned.\n\n(updating-requirements)=\n\n### updating requirements\n\n`pip-compile` generates a `requirements.txt` file using the latest versions\nthat fulfil the dependencies you specify in the supported files.\n\nif `pip-compile` finds an existing `requirements.txt` file that fulfils the\ndependencies then no changes will be made, even if updates are available.\n\nto force `pip-compile` to update all packages in an existing\n`requirements.txt`, run `pip-compile --upgrade`.\n\nto update a specific package to the latest or a specific version use the\n`--upgrade-package` or `-p` flag:\n\n```console\n# only update the django package\n$ pip-compile --upgrade-package django\n\n# update both the django and requests packages\n$ pip-compile --upgrade-package django --upgrade-package requests\n\n# update the django package to the latest, and requests to v2.0.0\n$ pip-compile --upgrade-package django --upgrade-package requests==2.0.0\n```\n\nyou can combine `--upgrade` and `--upgrade-package` in one command, to\nprovide constraints on the allowed upgrades. for example to upgrade all\npackages whilst constraining requests to the latest version less than 3.0:\n\n```console\n$ pip-compile --upgrade --upgrade-package 'requests<3.0'\n```\n\n### using hashes\n\nif you would like to use _hash-checking mode_ available in `pip` since\nversion 8.0, `pip-compile` offers `--generate-hashes` flag:\n\n```console\n$ pip-compile --generate-hashes requirements.in\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile --generate-hashes requirements.in\n#\nasgiref==3.6.0 \\\n    --hash=sha256:71e68008da809b957b7ee4b43dbccff33d1b23519fb8344e33f049897077afac \\\n    --hash=sha256:9567dfe7bd8d3c8c892227827c41cce860b368104c3431da67a0c5a65a949506\n    # via django\ndjango==4.1.7 \\\n    --hash=sha256:44f714b81c5f190d9d2ddad01a532fe502fa01c4cb8faf1d081f4264ed15dcd8 \\\n    --hash=sha256:f2f431e75adc40039ace496ad3b9f17227022e8b11566f4b363da44c7e44761e\n    # via -r requirements.in\nsqlparse==0.4.3 \\\n    --hash=sha256:0323c0ec29cd52bceabc1b4d9d579e311f3e4961b98d174201d5622a23b85e34 \\\n    --hash=sha256:69ca804846bb114d2ec380e4360a8a340db83f0ccf3afceeb1404df028f57268\n    # via django\n```\n\n### output file\n\nto output the pinned requirements in a filename other than\n`requirements.txt`, use `--output-file`. this might be useful for compiling\nmultiple files, for example with different constraints on django to test a\nlibrary with both versions using [tox](https://tox.readthedocs.io/en/latest/):\n\n```console\n$ pip-compile --upgrade-package 'django<1.0' --output-file requirements-django0x.txt\n$ pip-compile --upgrade-package 'django<2.0' --output-file requirements-django1x.txt\n```\n\nor to output to standard output, use `--output-file=-`:\n\n```console\n$ pip-compile --output-file=- > requirements.txt\n$ pip-compile - --output-file=- < requirements.in > requirements.txt\n```\n\n### forwarding options to `pip`\n\nany valid `pip` flags or arguments may be passed on with `pip-compile`'s\n`--pip-args` option, e.g.\n\n```console\n$ pip-compile requirements.in --pip-args \"--retries 10 --timeout 30\"\n```\n\n### configuration\n\nyou can define project-level defaults for `pip-compile` and `pip-sync` by\nwriting them to a configuration file in the same directory as your requirements\ninput files (or the current working directory if piping input from stdin).\nby default, both `pip-compile` and `pip-sync` will look first\nfor a `.pip-tools.toml` file and then in your `pyproject.toml`. you can\nalso specify an alternate toml configuration file with the `--config` option.\n\nfor example, to by default generate `pip` hashes in the resulting\nrequirements file output, you can specify in a configuration file:\n\n```toml\n[tool.pip-tools]\ngenerate-hashes = true\n```\n\noptions to `pip-compile` and `pip-sync` that may be used more than once\nmust be defined as lists in a configuration file, even if they only have one\nvalue.\n\n`pip-tools` supports default values for [all valid command-line flags](/cli/index.md)\nof its subcommands. configuration keys may contain underscores instead of dashes,\nso the above could also be specified in this format:\n\n```toml\n[tool.pip-tools]\ngenerate_hashes = true\n```\n\nyou might be wrapping the `pip-compile` command in another script. to avoid\nconfusing consumers of your custom script you can override the update command\ngenerated at the top of requirements files by setting the\n`custom_compile_command` environment variable.\n\n```console\n$ custom_compile_command=\"./pipcompilewrapper\" pip-compile requirements.in\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    ./pipcompilewrapper\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via -r requirements.in\nsqlparse==0.4.3\n    # via django\n```\n\n### workflow for layered requirements\n\nif you have different environments that you need to install different but\ncompatible packages for, then you can create layered requirements files and use\none layer to constrain the other.\n\nfor example, if you have a django project where you want the newest `2.1`\nrelease in production and when developing you want to use the django debug\ntoolbar, then you can create two `*.in` files, one for each layer:\n\n```\n# requirements.in\ndjango<2.2\n```\n\nat the top of the development requirements `dev-requirements.in` you use `-c\nrequirements.txt` to constrain the dev requirements to packages already\nselected for production in `requirements.txt`.\n\n```\n# dev-requirements.in\n-c requirements.txt\ndjango-debug-toolbar<2.2\n```\n\nfirst, compile `requirements.txt` as usual:\n\n```\n$ pip-compile\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile\n#\ndjango==2.1.15\n    # via -r requirements.in\npytz==2023.3\n    # via django\n```\n\nnow compile the dev requirements and the `requirements.txt` file is used as\na constraint:\n\n```console\n$ pip-compile dev-requirements.in\n#\n# this file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile dev-requirements.in\n#\ndjango==2.1.15\n    # via\n    #   -c requirements.txt\n    #   django-debug-toolbar\ndjango-debug-toolbar==2.1\n    # via -r dev-requirements.in\npytz==2023.3\n    # via\n    #   -c requirements.txt\n    #   django\nsqlparse==0.4.3\n    # via django-debug-toolbar\n```\n\nas you can see above, even though a `2.2` release of django is available, the\ndev requirements only include a `2.1` version of django because they were\nconstrained. now both compiled requirements files can be installed safely in\nthe dev environment.\n\nto install requirements in production stage use:\n\n```console\n$ pip-sync\n```\n\nyou can install requirements in development stage by:\n\n```console\n$ pip-sync requirements.txt dev-requirements.txt\n```\n\n### version control integration\n\nyou might use `pip-compile` as a hook for the [pre-commit](https://github.com/pre-commit/pre-commit).\nsee [pre-commit docs](https://pre-commit.com/) for instructions.\nsample `.pre-commit-config.yaml`:\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.3.0\n    hooks:\n      - id: pip-compile\n```\n\nyou might want to customize `pip-compile` args by configuring `args` and/or `files`, for example:\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.3.0\n    hooks:\n      - id: pip-compile\n        files: ^requirements/production\\.(in|txt)$\n        args: [--index-url=https://example.com, requirements/production.in]\n```\n\nif you have multiple requirement files make sure you create a hook for each file.\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.3.0\n    hooks:\n      - id: pip-compile\n        name: pip-compile setup.py\n        files: ^(setup\\.py|requirements\\.txt)$\n      - id: pip-compile\n        name: pip-compile requirements-dev.in\n        args: [requirements-dev.in]\n        files: ^requirements-dev\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements-lint.in\n        args: [requirements-lint.in]\n        files: ^requirements-lint\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.in\n        args: [requirements.in]\n        files: ^requirements\\.(in|txt)$\n```\n\n### example usage for `pip-sync`\n\nnow that you have a `requirements.txt`, you can use `pip-sync` to update\nyour virtual environment to reflect exactly what's in there. this will\ninstall/upgrade/uninstall everything necessary to match the\n`requirements.txt` contents.\n\nrun it with `pip-sync` or `python -m piptools sync`. if you use multiple\npython versions, you can also run `py -x.y -m piptools sync` on windows and\n`pythonx.y -m piptools sync` on other systems.\n\n`pip-sync` must be installed into and run from the same virtual\nenvironment as your project to identify which packages to install\nor upgrade.\n\n**be careful**: `pip-sync` is meant to be used only with a\n`requirements.txt` generated by `pip-compile`.\n\n```console\n$ pip-sync\nuninstalling flake8-2.4.1:\n    successfully uninstalled flake8-2.4.1\ncollecting click==4.1\n    downloading click-4.1-py2.py3-none-any.whl (62kb)\n    100% |................................| 65kb 1.8mb/s\n    found existing installation: click 4.0\n    uninstalling click-4.0:\n        successfully uninstalled click-4.0\nsuccessfully installed click-4.1\n```\n\nto sync multiple `*.txt` dependency lists, just pass them in via command\nline arguments, e.g.\n\n```console\n$ pip-sync dev-requirements.txt requirements.txt\n```\n\npassing in empty arguments would cause it to default to `requirements.txt`.\n\nany valid `pip install` flags or arguments may be passed with `pip-sync`'s\n`--pip-args` option, e.g.\n\n```console\n$ pip-sync requirements.txt --pip-args \"--no-cache-dir --no-deps\"\n```\n\n**note**: `pip-sync` will not upgrade or uninstall packaging tools like\n`setuptools`, `pip`, or `pip-tools` itself. use `python -m pip install --upgrade`\nto upgrade those packages.\n\n### should i commit `requirements.in` and `requirements.txt` to source control?\n\ngenerally, yes. if you want a reproducible environment installation available from your source control,\nthen yes, you should commit both `requirements.in` and `requirements.txt` to source control.\n\nnote that if you are deploying on multiple python environments (read the section below),\nthen you must commit a separate output file for each python environment.\nwe suggest to use the `{env}-requirements.txt` format\n(ex: `win32-py3.7-requirements.txt`, `macos-py3.10-requirements.txt`, etc.).\n\n### cross-environment usage of `requirements.in`/`requirements.txt` and `pip-compile`\n\nthe dependencies of a package can change depending on the python environment in which it\nis installed. here, we define a python environment as the combination of operating\nsystem, python version (3.7, 3.8, etc.), and python implementation (cpython, pypy,\netc.). for an exact definition, refer to the possible combinations of [pep 508\nenvironment markers][environment-markers].\n\nas the resulting `requirements.txt` can differ for each environment, users must\nexecute `pip-compile` **on each python environment separately** to generate a\n`requirements.txt` valid for each said environment. the same `requirements.in` can\nbe used as the source file for all environments, using\n[pep 508 environment markers][environment-markers] as\nneeded, the same way it would be done for regular `pip` cross-environment usage.\n\nif the generated `requirements.txt` remains exactly the same for all python\nenvironments, then it can be used across python environments safely. **but** users\nshould be careful as any package update can introduce environment-dependent\ndependencies, making any newly generated `requirements.txt` environment-dependent too.\nas a general rule, it's advised that users should still always execute `pip-compile`\non each targeted python environment to avoid issues.\n\n### other useful tools\n\n- [pipdeptree](https://github.com/tox-dev/pipdeptree) to print the dependency tree of the installed packages.\n- `requirements.in`/`requirements.txt` syntax highlighting:\n\n  - [requirements.txt.vim](https://github.com/raimon49/requirements.txt.vim) for vim.\n  - [python extension for vs code](https://marketplace.visualstudio.com/items?itemname=ms-python.python) for vs code.\n  - [pip-requirements.el](https://github.com/wilfred/pip-requirements.el) for emacs.\n\n### deprecations\n\nthis section lists `pip-tools` features that are currently deprecated.\n\n- in the next major release, the `--allow-unsafe` behavior will be enabled by\n  default (https://github.com/jazzband/pip-tools/issues/989).\n  use `--no-allow-unsafe` to keep the old behavior. it is recommended\n  to pass `--allow-unsafe` now to adapt to the upcoming change.\n- the legacy resolver is deprecated and will be removed in future versions.\n  the new default is `--resolver=backtracking`.\n- in the next major release, the `--strip-extras` behavior will be enabled by\n  default (https://github.com/jazzband/pip-tools/issues/1613).\n  use `--no-strip-extras` to keep the old behavior.\n\n### a note on resolvers\n\nyou can choose from either default backtracking resolver or the deprecated legacy resolver.\n\nthe legacy resolver will occasionally fail to resolve dependencies. the\nbacktracking resolver is more robust, but can take longer to run in general.\n\nyou can continue using the legacy resolver with `--resolver=legacy` although\nnote that it is deprecated and will be removed in a future release.\n\n[jazzband]: https://jazzband.co/\n[jazzband-image]: https://jazzband.co/static/img/badge.svg\n[pypi]: https://pypi.org/project/pip-tools/\n[pypi-image]: https://img.shields.io/pypi/v/pip-tools.svg\n[pyversions]: https://pypi.org/project/pip-tools/\n[pyversions-image]: https://img.shields.io/pypi/pyversions/pip-tools.svg\n[pre-commit]: https://results.pre-commit.ci/latest/github/jazzband/pip-tools/main\n[pre-commit-image]: https://results.pre-commit.ci/badge/github/jazzband/pip-tools/main.svg\n[buildstatus-gha]: https://github.com/jazzband/pip-tools/actions?query=workflow%3aci\n[buildstatus-gha-image]: https://github.com/jazzband/pip-tools/workflows/ci/badge.svg\n[codecov]: https://codecov.io/gh/jazzband/pip-tools\n[codecov-image]: https://codecov.io/gh/jazzband/pip-tools/branch/main/graph/badge.svg\n[matrix room badge]: https://img.shields.io/matrix/pip-tools:matrix.org?label=discuss%20on%20matrix%20at%20%23pip-tools%3amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n[matrix room]: https://matrix.to/#/%23pip-tools:matrix.org\n[matrix space badge]: https://img.shields.io/matrix/jazzband:matrix.org?label=discuss%20on%20matrix%20at%20%23jazzband%3amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n[matrix space]: https://matrix.to/#/%23jazzband:matrix.org\n[pip-tools-overview]: https://github.com/jazzband/pip-tools/raw/main/img/pip-tools-overview.svg\n[environment-markers]: https://peps.python.org/pep-0508/#environment-markers\n[discord-chat]: https://discord.gg/pypa\n[discord-chat-image]: https://img.shields.io/discord/803025117553754132?label=discord%20chat%20%23pip-tools&style=flat-square\n",
  "docs_url": null,
  "keywords": "pip,requirements,packaging",
  "license": "bsd",
  "name": "pip-tools",
  "package_url": "https://pypi.org/project/pip-tools/",
  "project_url": "https://pypi.org/project/pip-tools/",
  "project_urls": {
    "changelog": "https://github.com/jazzband/pip-tools/releases",
    "documentation": "https://pip-tools.readthedocs.io/en/latest/",
    "homepage": "https://github.com/jazzband/pip-tools/",
    "repository": "https://github.com/jazzband/pip-tools"
  },
  "release_url": "https://pypi.org/project/pip-tools/7.3.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "pip-tools keeps your pinned dependencies fresh.",
  "version": "7.3.0",
  "releases": [],
  "developers": [
    "me@nvie.com"
  ],
  "kwds": "pyversions pipcompilewrapper pip piptools packages",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pip_tools",
  "homepage": "",
  "release_count": 119,
  "dependency_ids": []
}
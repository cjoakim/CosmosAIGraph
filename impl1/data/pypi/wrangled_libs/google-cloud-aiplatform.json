{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "vertex ai sdk for python\n=================================================\n\n|ga| |pypi| |versions| |unit-tests| |system-tests| |sample-tests|\n\n\n`vertex ai`_: google vertex ai is an integrated suite of machine learning tools and services for building and using ml models with automl or custom code. it offers both novices and experts the best workbench for the entire machine learning development lifecycle.\n\n- `client library documentation`_\n- `product documentation`_\n\n.. |ga| image:: https://img.shields.io/badge/support-ga-gold.svg\n   :target: https://github.com/googleapis/google-cloud-python/blob/main/readme.rst#general-availability\n.. |pypi| image:: https://img.shields.io/pypi/v/google-cloud-aiplatform.svg\n   :target: https://pypi.org/project/google-cloud-aiplatform/\n.. |versions| image:: https://img.shields.io/pypi/pyversions/google-cloud-aiplatform.svg\n   :target: https://pypi.org/project/google-cloud-aiplatform/\n.. |unit-tests| image:: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-unit-tests.svg\n   :target: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-unit-tests.html\n.. |system-tests| image:: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-system-tests.svg\n   :target: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-system-tests.html\n.. |sample-tests| image:: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-sample-tests.svg\n   :target: https://storage.googleapis.com/cloud-devrel-public/python-aiplatform/badges/sdk-sample-tests.html\n.. _vertex ai: https://cloud.google.com/vertex-ai/docs\n.. _client library documentation: https://cloud.google.com/python/docs/reference/aiplatform/latest\n.. _product documentation:  https://cloud.google.com/vertex-ai/docs\n\nquick start\n-----------\n\nin order to use this library, you first need to go through the following steps:\n\n1. `select or create a cloud platform project.`_\n2. `enable billing for your project.`_\n3. `enable the vertex ai api.`_\n4. `setup authentication.`_\n\n.. _select or create a cloud platform project.: https://console.cloud.google.com/project\n.. _enable billing for your project.: https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project\n.. _enable the vertex ai api.:  https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk\n.. _setup authentication.: https://googleapis.dev/python/google-api-core/latest/auth.html\n\ninstallation\n~~~~~~~~~~~~\n\ninstall this library in a `virtualenv`_ using pip. `virtualenv`_ is a tool to\ncreate isolated python environments. the basic problem it addresses is one of\ndependencies and versions, and indirectly permissions.\n\nwith `virtualenv`_, it's possible to install this library without needing system\ninstall permissions, and without clashing with the installed system\ndependencies.\n\n.. _virtualenv: https://virtualenv.pypa.io/en/latest/\n\n\nmac/linux\n^^^^^^^^^\n\n.. code-block:: console\n\n    pip install virtualenv\n    virtualenv <your-env>\n    source <your-env>/bin/activate\n    <your-env>/bin/pip install google-cloud-aiplatform\n\n\nwindows\n^^^^^^^\n\n.. code-block:: console\n\n    pip install virtualenv\n    virtualenv <your-env>\n    <your-env>\\scripts\\activate\n    <your-env>\\scripts\\pip.exe install google-cloud-aiplatform\n\n\nsupported python versions\n^^^^^^^^^^^^^^^^^^^^^^^^^\npython >= 3.7\n\ndeprecated python versions\n^^^^^^^^^^^^^^^^^^^^^^^^^^\npython == 3.6.\n\nthe last version of this library compatible with python 3.6 is google-cloud-aiplatform==1.12.1.\n\noverview\n~~~~~~~~\nthis section provides a brief overview of the vertex ai sdk for python. you can also reference the notebooks in `vertex-ai-samples`_ for examples.\n\n.. _vertex-ai-samples: https://github.com/googlecloudplatform/vertex-ai-samples/tree/main/notebooks/community/sdk\n\nall publicly available sdk features can be found in the :code:`google/cloud/aiplatform` directory.\nunder the hood, vertex sdk builds on top of gapic, which stands for google api codegen.\nthe gapic library code sits in :code:`google/cloud/aiplatform_v1` and :code:`google/cloud/aiplatform_v1beta1`,\nand it is auto-generated from google's service proto files.\n\nfor most developers' programmatic needs, they can follow these steps to figure out which libraries to import:\n\n1. look through :code:`google/cloud/aiplatform` first -- vertex sdk's apis will almost always be easier to use and more concise comparing with gapic\n2. if the feature that you are looking for cannot be found there, look through :code:`aiplatform_v1` to see if it's available in gapic\n3. if it is still in beta phase, it will be available in :code:`aiplatform_v1beta1`\n\nif none of the above scenarios could help you find the right tools for your task, please feel free to open a github issue and send us a feature request.\n\nimporting\n^^^^^^^^^\nvertex ai sdk functionality can be used by importing the following namespace:\n\n.. code-block:: python\n\n    from google.cloud import aiplatform\n\nvertex ai sdk preview functionality can be used by importing the following namespace:\n\n.. code-block:: python\n\n    from vertexai import preview\n\nvertex ai client library functionality can be used by importing the following namespace:\n\n.. code-block:: python\n\n    import vertexai\n\ninitialization\n^^^^^^^^^^^^^^\ninitialize the sdk to store common configurations that you use with the sdk.\n\n.. code-block:: python\n\n    aiplatform.init(\n        # your google cloud project id or number\n        # environment default used is not set\n        project='my-project',\n\n        # the vertex ai region you will use\n        # defaults to us-central1\n        location='us-central1',\n\n        # google cloud storage bucket in same region as location\n        # used to stage artifacts\n        staging_bucket='gs://my_staging_bucket',\n\n        # custom google.auth.credentials.credentials\n        # environment default credentials used if not set\n        credentials=my_credentials,\n\n        # customer managed encryption key resource name\n        # will be applied to all vertex ai resources if set\n        encryption_spec_key_name=my_encryption_key_name,\n\n        # the name of the experiment to use to track\n        # logged metrics and parameters\n        experiment='my-experiment',\n\n        # description of the experiment above\n        experiment_description='my experiment description'\n    )\n\ndatasets\n^^^^^^^^\nvertex ai provides managed tabular, text, image, and video datasets. in the sdk, datasets can be used downstream to\ntrain models.\n\nto create a tabular dataset:\n\n.. code-block:: python\n\n    my_dataset = aiplatform.tabulardataset.create(\n        display_name=\"my-dataset\", gcs_source=['gs://path/to/my/dataset.csv'])\n\nyou can also create and import a dataset in separate steps:\n\n.. code-block:: python\n\n    from google.cloud import aiplatform\n\n    my_dataset = aiplatform.textdataset.create(\n        display_name=\"my-dataset\")\n\n    my_dataset.import_data(\n        gcs_source=['gs://path/to/my/dataset.csv'],\n        import_schema_uri=aiplatform.schema.dataset.ioformat.text.multi_label_classification\n    )\n\nto get a previously created dataset:\n\n.. code-block:: python\n\n  dataset = aiplatform.imagedataset('projects/my-project/location/us-central1/datasets/{dataset_id}')\n\nvertex ai supports a variety of dataset schemas. references to these schemas are available under the\n:code:`aiplatform.schema.dataset` namespace. for more information on the supported dataset schemas please refer to the\n`preparing data docs`_.\n\n.. _preparing data docs: https://cloud.google.com/ai-platform-unified/docs/datasets/prepare\n\ntraining\n^^^^^^^^\nthe vertex ai sdk for python allows you train custom and automl models.\n\nyou can train custom models using a custom python script, custom python package, or container.\n\n**preparing your custom code**\n\nvertex ai custom training enables you to train on vertex ai datasets and produce vertex ai models. to do so your\nscript must adhere to the following contract:\n\nit must read datasets from the environment variables populated by the training service:\n\n.. code-block:: python\n\n  os.environ['aip_data_format']  # provides format of data\n  os.environ['aip_training_data_uri']  # uri to training split\n  os.environ['aip_validation_data_uri']  # uri to validation split\n  os.environ['aip_test_data_uri']  # uri to test split\n\nplease visit `using a managed dataset in a custom training application`_ for a detailed overview.\n\n.. _using a managed dataset in a custom training application: https://cloud.google.com/vertex-ai/docs/training/using-managed-datasets\n\nit must write the model artifact to the environment variable populated by the training service:\n\n.. code-block:: python\n\n  os.environ['aip_model_dir']\n\n**running training**\n\n.. code-block:: python\n\n  job = aiplatform.customtrainingjob(\n      display_name=\"my-training-job\",\n      script_path=\"training_script.py\",\n      container_uri=\"us-docker.pkg.dev/vertex-ai/training/tf-cpu.2-2:latest\",\n      requirements=[\"gcsfs==0.7.1\"],\n      model_serving_container_image_uri=\"us-docker.pkg.dev/vertex-ai/prediction/tf2-cpu.2-2:latest\",\n  )\n\n  model = job.run(my_dataset,\n                  replica_count=1,\n                  machine_type=\"n1-standard-4\",\n                  accelerator_type='nvidia_tesla_k80',\n                  accelerator_count=1)\n\nin the code block above `my_dataset` is managed dataset created in the `dataset` section above. the `model` variable is a managed vertex ai model that can be deployed or exported.\n\n\nautomls\n-------\nthe vertex ai sdk for python supports automl tabular, image, text, video, and forecasting.\n\nto train an automl tabular model:\n\n.. code-block:: python\n\n  dataset = aiplatform.tabulardataset('projects/my-project/location/us-central1/datasets/{dataset_id}')\n\n  job = aiplatform.automltabulartrainingjob(\n    display_name=\"train-automl\",\n    optimization_prediction_type=\"regression\",\n    optimization_objective=\"minimize-rmse\",\n  )\n\n  model = job.run(\n      dataset=dataset,\n      target_column=\"target_column_name\",\n      training_fraction_split=0.6,\n      validation_fraction_split=0.2,\n      test_fraction_split=0.2,\n      budget_milli_node_hours=1000,\n      model_display_name=\"my-automl-model\",\n      disable_early_stopping=false,\n  )\n\n\nmodels\n------\nto get a model:\n\n\n.. code-block:: python\n\n  model = aiplatform.model('/projects/my-project/locations/us-central1/models/{model_id}')\n\n\n\nto upload a model:\n\n.. code-block:: python\n\n  model = aiplatform.model.upload(\n      display_name='my-model',\n      artifact_uri=\"gs://python/to/my/model/dir\",\n      serving_container_image_uri=\"us-docker.pkg.dev/vertex-ai/prediction/tf2-cpu.2-2:latest\",\n  )\n\n\n\nto deploy a model:\n\n\n.. code-block:: python\n\n  endpoint = model.deploy(machine_type=\"n1-standard-4\",\n                          min_replica_count=1,\n                          max_replica_count=5\n                          machine_type='n1-standard-4',\n                          accelerator_type='nvidia_tesla_k80',\n                          accelerator_count=1)\n\n\nplease visit `importing models to vertex ai`_ for a detailed overview:\n\n.. _importing models to vertex ai: https://cloud.google.com/vertex-ai/docs/general/import-model\n\nmodel evaluation\n----------------\n\nthe vertex ai sdk for python currently supports getting model evaluation metrics for all automl models.\n\nto list all model evaluations for a model:\n\n.. code-block:: python\n\n  model = aiplatform.model('projects/my-project/locations/us-central1/models/{model_id}')\n\n  evaluations = model.list_model_evaluations()\n\n\nto get the model evaluation resource for a given model:\n\n.. code-block:: python\n\n  model = aiplatform.model('projects/my-project/locations/us-central1/models/{model_id}')\n\n  # returns the first evaluation with no arguments, you can also pass the evaluation id\n  evaluation = model.get_model_evaluation()\n\n  eval_metrics = evaluation.metrics\n\n\nyou can also create a reference to your model evaluation directly by passing in the resource name of the model evaluation:\n\n.. code-block:: python\n\n  evaluation = aiplatform.modelevaluation(\n    evaluation_name='projects/my-project/locations/us-central1/models/{model_id}/evaluations/{evaluation_id}')\n\nalternatively, you can create a reference to your evaluation by passing in the model and evaluation ids:\n\n.. code-block:: python\n\n  evaluation = aiplatform.modelevaluation(\n    evaluation_name={evaluation_id},\n    model_id={model_id})\n\n\nbatch prediction\n----------------\n\nto create a batch prediction job:\n\n.. code-block:: python\n\n  model = aiplatform.model('/projects/my-project/locations/us-central1/models/{model_id}')\n\n  batch_prediction_job = model.batch_predict(\n    job_display_name='my-batch-prediction-job',\n    instances_format='csv',\n    machine_type='n1-standard-4',\n    gcs_source=['gs://path/to/my/file.csv'],\n    gcs_destination_prefix='gs://path/to/my/batch_prediction/results/',\n    service_account='my-sa@my-project.iam.gserviceaccount.com'\n  )\n\nyou can also create a batch prediction job asynchronously by including the `sync=false` argument:\n\n.. code-block:: python\n\n  batch_prediction_job = model.batch_predict(..., sync=false)\n\n  # wait for resource to be created\n  batch_prediction_job.wait_for_resource_creation()\n\n  # get the state\n  batch_prediction_job.state\n\n  # block until job is complete\n  batch_prediction_job.wait()\n\n\nendpoints\n---------\n\nto create an endpoint:\n\n.. code-block:: python\n\n  endpoint = aiplatform.endpoint.create(display_name='my-endpoint')\n\nto deploy a model to a created endpoint:\n\n.. code-block:: python\n\n  model = aiplatform.model('/projects/my-project/locations/us-central1/models/{model_id}')\n\n  endpoint.deploy(model,\n                  min_replica_count=1,\n                  max_replica_count=5,\n                  machine_type='n1-standard-4',\n                  accelerator_type='nvidia_tesla_k80',\n                  accelerator_count=1)\n\nto get predictions from endpoints:\n\n.. code-block:: python\n\n  endpoint.predict(instances=[[6.7, 3.1, 4.7, 1.5], [4.6, 3.1, 1.5, 0.2]])\n\nto undeploy models from an endpoint:\n\n.. code-block:: python\n\n  endpoint.undeploy_all()\n\nto delete an endpoint:\n\n.. code-block:: python\n\n  endpoint.delete()\n\n\npipelines\n---------\n\nto create a vertex ai pipeline run and monitor until completion:\n\n.. code-block:: python\n\n  # instantiate pipelinejob object\n  pl = pipelinejob(\n      display_name=\"my first pipeline\",\n\n      # whether or not to enable caching\n      # true = always cache pipeline step result\n      # false = never cache pipeline step result\n      # none = defer to cache option for each pipeline component in the pipeline definition\n      enable_caching=false,\n\n      # local or gcs path to a compiled pipeline definition\n      template_path=\"pipeline.json\",\n\n      # dictionary containing input parameters for your pipeline\n      parameter_values=parameter_values,\n\n      # gcs path to act as the pipeline root\n      pipeline_root=pipeline_root,\n  )\n\n  # execute pipeline in vertex ai and monitor until completion\n  pl.run(\n    # email address of service account to use for the pipeline run\n    # you must have iam.serviceaccounts.actas permission on the service account to use it\n    service_account=service_account,\n\n    # whether this function call should be synchronous (wait for pipeline run to finish before terminating)\n    # or asynchronous (return immediately)\n    sync=true\n  )\n\nto create a vertex ai pipeline without monitoring until completion, use `submit` instead of `run`:\n\n.. code-block:: python\n\n  # instantiate pipelinejob object\n  pl = pipelinejob(\n      display_name=\"my first pipeline\",\n\n      # whether or not to enable caching\n      # true = always cache pipeline step result\n      # false = never cache pipeline step result\n      # none = defer to cache option for each pipeline component in the pipeline definition\n      enable_caching=false,\n\n      # local or gcs path to a compiled pipeline definition\n      template_path=\"pipeline.json\",\n\n      # dictionary containing input parameters for your pipeline\n      parameter_values=parameter_values,\n\n      # gcs path to act as the pipeline root\n      pipeline_root=pipeline_root,\n  )\n\n  # submit the pipeline to vertex ai\n  pl.submit(\n    # email address of service account to use for the pipeline run\n    # you must have iam.serviceaccounts.actas permission on the service account to use it\n    service_account=service_account,\n  )\n\n\nexplainable ai: get metadata\n----------------------------\n\nto get metadata in dictionary format from tensorflow 1 models:\n\n.. code-block:: python\n\n  from google.cloud.aiplatform.explain.metadata.tf.v1 import saved_model_metadata_builder\n\n  builder = saved_model_metadata_builder.savedmodelmetadatabuilder(\n            'gs://python/to/my/model/dir', tags=[tf.saved_model.tag_constants.serving]\n        )\n  generated_md = builder.get_metadata()\n\nto get metadata in dictionary format from tensorflow 2 models:\n\n.. code-block:: python\n\n  from google.cloud.aiplatform.explain.metadata.tf.v2 import saved_model_metadata_builder\n\n  builder = saved_model_metadata_builder.savedmodelmetadatabuilder('gs://python/to/my/model/dir')\n  generated_md = builder.get_metadata()\n\nto use explanation metadata in endpoint deployment and model upload:\n\n.. code-block:: python\n\n  explanation_metadata = builder.get_metadata_protobuf()\n\n  # to deploy a model to an endpoint with explanation\n  model.deploy(..., explanation_metadata=explanation_metadata)\n\n  # to deploy a model to a created endpoint with explanation\n  endpoint.deploy(..., explanation_metadata=explanation_metadata)\n\n  # to upload a model with explanation\n  aiplatform.model.upload(..., explanation_metadata=explanation_metadata)\n\n\ncloud profiler\n----------------------------\n\ncloud profiler allows you to profile your remote vertex ai training jobs on demand and visualize the results in vertex ai tensorboard.\n\nto start using the profiler with tensorflow, update your training script to include the following:\n\n.. code-block:: python\n\n    from google.cloud.aiplatform.training_utils import cloud_profiler\n    ...\n    cloud_profiler.init()\n\nnext, run the job with with a vertex ai tensorboard instance. for full details on how to do this, visit https://cloud.google.com/vertex-ai/docs/experiments/tensorboard-overview\n\nfinally, visit your tensorboard in your google cloud console, navigate to the \"profile\" tab, and click the `capture profile` button. this will allow users to capture profiling statistics for the running jobs.\n\n\nnext steps\n~~~~~~~~~~\n\n-  read the `client library documentation`_ for vertex ai\n   api to see other available methods on the client.\n-  read the `vertex ai api product documentation`_ to learn\n   more about the product and see how-to guides.\n-  view this `readme`_ to see the full list of cloud\n   apis that we cover.\n\n.. _vertex ai api product documentation:  https://cloud.google.com/vertex-ai/docs\n.. _readme: https://github.com/googleapis/google-cloud-python/blob/main/readme.rst\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "google-cloud-aiplatform",
  "package_url": "https://pypi.org/project/google-cloud-aiplatform/",
  "project_url": "https://pypi.org/project/google-cloud-aiplatform/",
  "project_urls": {
    "Homepage": "https://github.com/googleapis/python-aiplatform"
  },
  "release_url": "https://pypi.org/project/google-cloud-aiplatform/1.38.1/",
  "requires_dist": [
    "google-api-core[grpc] (!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,<3.0.0dev,>=1.32.0)",
    "proto-plus (<2.0.0dev,>=1.22.0)",
    "protobuf (!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.19.5)",
    "packaging (>=14.3)",
    "google-cloud-storage (<3.0.0dev,>=1.32.0)",
    "google-cloud-bigquery (<4.0.0dev,>=1.15.0)",
    "google-cloud-resource-manager (<3.0.0dev,>=1.3.3)",
    "shapely (<3.0.0dev)",
    "setuptools ; python_version >= \"3.12\"",
    "mlflow (<=2.1.1,>=1.27.0) ; extra == 'autologging'",
    "tensorboard-plugin-profile (<3.0.0dev,>=2.4.0) ; extra == 'cloud_profiler'",
    "werkzeug (<2.1.0dev,>=2.0.0) ; extra == 'cloud_profiler'",
    "tensorflow (<3.0.0dev,>=2.4.0) ; extra == 'cloud_profiler'",
    "pyarrow (<8.0dev,>=3.0.0) ; (python_version < \"3.11\") and extra == 'datasets'",
    "pyarrow (>=10.0.1) ; (python_version >= \"3.11\") and extra == 'datasets'",
    "requests (>=2.28.1) ; extra == 'endpoint'",
    "urllib3 (<1.27,>=1.21.1) ; extra == 'full'",
    "pyyaml (==5.3.1) ; extra == 'full'",
    "numpy (>=1.15.0) ; extra == 'full'",
    "google-cloud-bigquery ; extra == 'full'",
    "cloudpickle (<3.0) ; extra == 'full'",
    "httpx (<0.25.0,>=0.23.0) ; extra == 'full'",
    "explainable-ai-sdk (>=1.0.0) ; extra == 'full'",
    "tensorflow (<3.0.0dev,>=2.3.0) ; extra == 'full'",
    "requests (>=2.28.1) ; extra == 'full'",
    "pandas (>=1.0.0) ; extra == 'full'",
    "pydantic (<2) ; extra == 'full'",
    "docker (>=5.0.3) ; extra == 'full'",
    "google-cloud-logging (<4.0) ; extra == 'full'",
    "google-cloud-bigquery-storage ; extra == 'full'",
    "fastapi (<0.103.1,>=0.71.0) ; extra == 'full'",
    "starlette (>=0.17.1) ; extra == 'full'",
    "mlflow (<=2.1.1,>=1.27.0) ; extra == 'full'",
    "pyarrow (>=6.0.1) ; extra == 'full'",
    "uvicorn[standard] (>=0.16.0) ; extra == 'full'",
    "lit-nlp (==0.4.0) ; extra == 'full'",
    "pyarrow (<8.0dev,>=3.0.0) ; (python_version < \"3.11\") and extra == 'full'",
    "ray[default] (<2.5,>=2.4) ; (python_version < \"3.11\") and extra == 'full'",
    "google-vizier (>=0.0.14) ; (python_version == \"3.10\") and extra == 'full'",
    "google-vizier (==0.0.4) ; (python_version == \"3.8\") and extra == 'full'",
    "google-vizier (==0.0.11) ; (python_version == \"3.9\") and extra == 'full'",
    "ray[default] (<2.5.1,>=2.5) ; (python_version >= \"3.11\") and extra == 'full'",
    "pyarrow (>=10.0.1) ; (python_version >= \"3.11\") and extra == 'full'",
    "google-vizier (>=0.1.6) ; (python_version >= \"3.11\") and extra == 'full'",
    "tensorflow (<3.0.0dev,>=2.3.0) ; extra == 'lit'",
    "pandas (>=1.0.0) ; extra == 'lit'",
    "lit-nlp (==0.4.0) ; extra == 'lit'",
    "explainable-ai-sdk (>=1.0.0) ; extra == 'lit'",
    "pandas (>=1.0.0) ; extra == 'metadata'",
    "numpy (>=1.15.0) ; extra == 'metadata'",
    "pyyaml (==5.3.1) ; extra == 'pipelines'",
    "docker (>=5.0.3) ; extra == 'prediction'",
    "fastapi (<0.103.1,>=0.71.0) ; extra == 'prediction'",
    "httpx (<0.25.0,>=0.23.0) ; extra == 'prediction'",
    "starlette (>=0.17.1) ; extra == 'prediction'",
    "uvicorn[standard] (>=0.16.0) ; extra == 'prediction'",
    "cloudpickle (<3.0) ; extra == 'preview'",
    "google-cloud-logging (<4.0) ; extra == 'preview'",
    "urllib3 (<1.27,>=1.21.1) ; extra == 'private_endpoints'",
    "requests (>=2.28.1) ; extra == 'private_endpoints'",
    "google-cloud-bigquery-storage ; extra == 'ray'",
    "google-cloud-bigquery ; extra == 'ray'",
    "pandas (>=1.0.0) ; extra == 'ray'",
    "pyarrow (>=6.0.1) ; extra == 'ray'",
    "pydantic (<2) ; extra == 'ray'",
    "ray[default] (<2.5,>=2.4) ; (python_version < \"3.11\") and extra == 'ray'",
    "ray[default] (<2.5.1,>=2.5) ; (python_version >= \"3.11\") and extra == 'ray'",
    "tensorflow (<3.0.0dev,>=2.3.0) ; extra == 'tensorboard'",
    "urllib3 (<1.27,>=1.21.1) ; extra == 'testing'",
    "pyyaml (==5.3.1) ; extra == 'testing'",
    "numpy (>=1.15.0) ; extra == 'testing'",
    "google-cloud-bigquery ; extra == 'testing'",
    "cloudpickle (<3.0) ; extra == 'testing'",
    "httpx (<0.25.0,>=0.23.0) ; extra == 'testing'",
    "explainable-ai-sdk (>=1.0.0) ; extra == 'testing'",
    "tensorflow (<3.0.0dev,>=2.3.0) ; extra == 'testing'",
    "requests (>=2.28.1) ; extra == 'testing'",
    "pandas (>=1.0.0) ; extra == 'testing'",
    "pydantic (<2) ; extra == 'testing'",
    "docker (>=5.0.3) ; extra == 'testing'",
    "google-cloud-logging (<4.0) ; extra == 'testing'",
    "google-cloud-bigquery-storage ; extra == 'testing'",
    "fastapi (<0.103.1,>=0.71.0) ; extra == 'testing'",
    "starlette (>=0.17.1) ; extra == 'testing'",
    "mlflow (<=2.1.1,>=1.27.0) ; extra == 'testing'",
    "pyarrow (>=6.0.1) ; extra == 'testing'",
    "uvicorn[standard] (>=0.16.0) ; extra == 'testing'",
    "lit-nlp (==0.4.0) ; extra == 'testing'",
    "tensorboard-plugin-profile (<3.0.0dev,>=2.4.0) ; extra == 'testing'",
    "werkzeug (<2.1.0dev,>=2.0.0) ; extra == 'testing'",
    "tensorflow (<3.0.0dev,>=2.4.0) ; extra == 'testing'",
    "grpcio-testing ; extra == 'testing'",
    "ipython ; extra == 'testing'",
    "kfp ; extra == 'testing'",
    "pyfakefs ; extra == 'testing'",
    "pytest-asyncio ; extra == 'testing'",
    "pytest-xdist ; extra == 'testing'",
    "scikit-learn ; extra == 'testing'",
    "tensorflow (<=2.12.0,>=2.3.0) ; extra == 'testing'",
    "torch (<2.1.0,>=2.0.0) ; extra == 'testing'",
    "xgboost ; extra == 'testing'",
    "xgboost-ray ; extra == 'testing'",
    "requests-toolbelt (<1.0.0) ; extra == 'testing'",
    "pyarrow (<8.0dev,>=3.0.0) ; (python_version < \"3.11\") and extra == 'testing'",
    "ray[default] (<2.5,>=2.4) ; (python_version < \"3.11\") and extra == 'testing'",
    "google-vizier (>=0.0.14) ; (python_version == \"3.10\") and extra == 'testing'",
    "google-vizier (==0.0.4) ; (python_version == \"3.8\") and extra == 'testing'",
    "google-vizier (==0.0.11) ; (python_version == \"3.9\") and extra == 'testing'",
    "bigframes ; (python_version >= \"3.10\") and extra == 'testing'",
    "ray[default] (<2.5.1,>=2.5) ; (python_version >= \"3.11\") and extra == 'testing'",
    "pyarrow (>=10.0.1) ; (python_version >= \"3.11\") and extra == 'testing'",
    "google-vizier (>=0.1.6) ; (python_version >= \"3.11\") and extra == 'testing'",
    "google-vizier (>=0.0.14) ; (python_version == \"3.10\") and extra == 'vizier'",
    "google-vizier (==0.0.4) ; (python_version == \"3.8\") and extra == 'vizier'",
    "google-vizier (==0.0.11) ; (python_version == \"3.9\") and extra == 'vizier'",
    "google-vizier (>=0.1.6) ; (python_version >= \"3.11\") and extra == 'vizier'",
    "tensorflow (<3.0.0dev,>=2.3.0) ; extra == 'xai'"
  ],
  "requires_python": ">=3.8",
  "summary": "vertex ai api client library",
  "version": "1.38.1",
  "releases": [],
  "developers": [
    "google_llc",
    "googleapis-packages@google.com"
  ],
  "kwds": "vertexai googleapis aip_model_dir aip_training_data_uri _vertex",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_google_cloud_aiplatform",
  "homepage": "https://github.com/googleapis/python-aiplatform",
  "release_count": 80,
  "dependency_ids": [
    "pypi_bigframes",
    "pypi_cloudpickle",
    "pypi_docker",
    "pypi_explainable_ai_sdk",
    "pypi_fastapi",
    "pypi_google_api_core",
    "pypi_google_cloud_bigquery",
    "pypi_google_cloud_bigquery_storage",
    "pypi_google_cloud_logging",
    "pypi_google_cloud_resource_manager",
    "pypi_google_cloud_storage",
    "pypi_google_vizier",
    "pypi_grpcio_testing",
    "pypi_httpx",
    "pypi_ipython",
    "pypi_kfp",
    "pypi_lit_nlp",
    "pypi_mlflow",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_proto_plus",
    "pypi_protobuf",
    "pypi_pyarrow",
    "pypi_pydantic",
    "pypi_pyfakefs",
    "pypi_pytest_asyncio",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_ray",
    "pypi_requests",
    "pypi_requests_toolbelt",
    "pypi_scikit_learn",
    "pypi_setuptools",
    "pypi_shapely",
    "pypi_starlette",
    "pypi_tensorboard_plugin_profile",
    "pypi_tensorflow",
    "pypi_torch",
    "pypi_urllib3",
    "pypi_uvicorn",
    "pypi_werkzeug",
    "pypi_xgboost",
    "pypi_xgboost_ray"
  ]
}
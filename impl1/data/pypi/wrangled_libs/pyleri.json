{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: linguistic"
  ],
  "description": "python left-right parser\n[![ci](https://github.com/cesbit/pyleri/workflows/ci/badge.svg)](https://github.com/cesbit/pyleri/actions)\n[![release version](https://img.shields.io/github/release/cesbit/pyleri)](https://github.com/cesbit/pyleri/releases)\n\npython left-right parser\n========================\npyleri is an easy-to-use parser created for [siridb](http://siridb.net/). we first used [lrparsing](http://lrparsing.sourceforge.net/doc/html/) and wrote [jsleri](https://github.com/cesbit/jsleri) for auto-completion and suggestions in our web console. later we found small issues within the `lrparsing` module and also had difficulties keeping the language the same in all projects. that is when we decided to create pyleri which can export a created grammar to javascript, c, python, go and java.\n\ngabriele tomassetti [wrote a tutorial](https://tomassetti.me/pyleri-tutorial/) about the pyleri library.\n\n---------------------------------------\n  * [related projects](#related-projects)\n  * [installation](#installation)\n  * [quick usage](#quick-usage)\n  * [grammar](#grammar)\n    * [grammar.parse()](#parse)\n    * [grammar.export_js()](#export_js)\n    * [grammar.export_c()](#export_c)\n    * [grammar.export_go()](#export_go)\n    * [grammar.export_java()](#export_java)\n    * [grammar.export_py()](#export_py)\n  * [result](#result)\n    * [is_valid](#is_valid)\n    * [position](#position)\n    * [tree](#tree)\n    * [expecting](#expecting)\n  * [elements](#elements)\n    * [keyword](#keyword)\n    * [regex](#regex)\n    * [token](#token)\n    * [tokens](#tokens)\n    * [sequence](#sequence)\n    * [choice](#choice)\n    * [repeat](#repeat)\n    * [list](#list)\n    * [optional](#optional)\n    * [ref](#ref)\n    * [prio](#prio)\n\n\n---------------------------------------\n## related projects\n- [jsleri](https://github.com/cesbit/jsleri): javascript parser\n- [libcleri](https://github.com/cesbit/libcleri): c parser\n- [goleri](https://github.com/cesbit/goleri): go parser\n- [jleri](https://github.com/cesbit/jleri): java parser\n\n## installation\nthe easiest way is to use pypi:\n\n    sudo pip3 install pyleri\n\n## quick usage\n```python\n# imports, note that we skip the imports in other examples...\nfrom pyleri import (\n    grammar,\n    keyword,\n    regex,\n    sequence)\n\n# create a grammar class to define your language\nclass mygrammar(grammar):\n    r_name = regex('(?:\"(?:[^\"]*)\")+')\n    k_hi = keyword('hi')\n    start = sequence(k_hi, r_name)\n\n# compile your grammar by creating an instance of the grammar class.\nmy_grammar = mygrammar()\n\n# use the compiled grammar to parse 'strings'\nprint(my_grammar.parse('hi \"iris\"').is_valid) # => true\nprint(my_grammar.parse('bye \"iris\"').is_valid) # => false\nprint(my_grammar.parse('bye \"iris\"').as_str()) # => error at position 0, expecting: hi\n```\n\n## grammar\nwhen writing a grammar you should subclass grammar. a grammar expects at least a `start` property so the parser knows where to start parsing. grammar has some default properties which can be overwritten like `re_keywords`, which will be explained later. grammar also has a parse method: `parse()`, and a few export methods: [export_js()](#export_js), [export_c()](#export_c), [export_py()](#export_py), [export_go()](#export_go) and [export_java()](#export_java) which are explained below.\n\n\n### parse\nsyntax:\n```python\ngrammar().parse(string)\n```\nthe `parse()` method returns a result object which has the following properties that are further explained in [result](#result):\n- `expecting`\n- `is_valid`\n- `pos`\n- `tree`\n\n\n### export_js\nsyntax:\n```python\ngrammar().export_js(\n    js_module_name='jsleri',\n    js_template=grammar.js_template,\n    js_indent=' ' * 4)\n```\noptional keyword arguments:\n- `js_module_name`: name of the javascript module. (default: 'jsleri')\n- `js_template`: template string used for the export. you might want to look at the default string which can be found at grammar.js_template.\n- `js_indent`: indentation used in the javascript file. (default: 4 spaces)\n\nfor example when using our quick usage grammar, this is the output when running `my_grammar.export_js()`:\n```javascript\n/* jshint newcap: false */\n\n/*\n * this grammar is generated using the grammar.export_js() method and\n * should be used with the jsleri javascript module.\n *\n * source class: mygrammar\n * created at: 2015-11-04 10:06:06\n */\n\n'use strict';\n\n(function (\n            regex,\n            sequence,\n            keyword,\n            grammar\n        ) {\n    var r_name = regex('^(?:\"(?:[^\"]*)\")+');\n    var k_hi = keyword('hi');\n    var start = sequence(\n        k_hi,\n        r_name\n    );\n\n    window.mygrammar = grammar(start, '^\\w+');\n\n})(\n    window.jsleri.regex,\n    window.jsleri.sequence,\n    window.jsleri.keyword,\n    window.jsleri.grammar\n);\n```\n\n### export_c\nsyntax:\n```python\ngrammar().export_c(\n    target=grammar.c_target,\n    c_indent=' ' * 4)\n```\noptional keyword arguments:\n- `target`: name of the c module. (default: 'grammar')\n- `c_indent`: indentation used in the c files. (default: 4 spaces)\n\nthe return value is a tuple containing the source (c) file and header (h) file.\n\nfor example when using our quick usage grammar, this is the output when running `my_grammar.export_c()`:\n```c\n/*\n * grammar.c\n *\n * this grammar is generated using the grammar.export_c() method and\n * should be used with the libcleri module.\n *\n * source class: mygrammar\n * created at: 2016-05-09 12:16:49\n */\n\n#include \"grammar.h\"\n#include <stdio.h>\n\n#define cleri_case_sensitive 0\n#define cleri_case_insensitive 1\n\n#define cleri_first_match 0\n#define cleri_most_greedy 1\n\ncleri_grammar_t * compile_grammar(void)\n{\n    cleri_t * r_name = cleri_regex(cleri_gid_r_name, \"^(?:\\\"(?:[^\\\"]*)\\\")+\");\n    cleri_t * k_hi = cleri_keyword(cleri_gid_k_hi, \"hi\", cleri_case_insensitive);\n    cleri_t * start = cleri_sequence(\n        cleri_gid_start,\n        2,\n        k_hi,\n        r_name\n    );\n\n    cleri_grammar_t * grammar = cleri_grammar(start, \"^\\\\w+\");\n\n    return grammar;\n}\n```\nand the header file...\n```c\n/*\n * grammar.h\n *\n * this grammar is generated using the grammar.export_c() method and\n * should be used with the libcleri module.\n *\n * source class: mygrammar\n * created at: 2016-05-09 12:16:49\n */\n#ifndef cleri_export_grammar_h_\n#define cleri_export_grammar_h_\n\n#include <grammar.h>\n#include <cleri/cleri.h>\n\ncleri_grammar_t * compile_grammar(void);\n\nenum cleri_grammar_ids {\n    cleri_none,   // used for objects with no name\n    cleri_gid_k_hi,\n    cleri_gid_r_name,\n    cleri_gid_start,\n    cleri_end // can be used to get the enum length\n};\n\n#endif /* cleri_export_grammar_h_ */\n\n```\n### export_go\nsyntax:\n```python\ngrammar().export_go(\n    go_template=grammar.go_template,\n    go_indent='\\t',\n    go_package='grammar')\n```\noptional keyword arguments:\n- `go_template`: template string used for the export. you might want to look at the default string which can be found at grammar.go_template.\n- `go_indent`: indentation used in the go file. (default: one tab)\n- `go_package`: name of the go package. (default: 'grammar')\n\nfor example when using our quick usage grammar, this is the output when running `my_grammar.export_go()`:\n```go\npackage grammar\n\n// this grammar is generated using the grammar.export_go() method and\n// should be used with the goleri module.\n//\n// source class: mygrammar\n// created at: 2017-03-14 19:07:09\n\nimport (\n        \"regexp\"\n\n        \"github.com/cesbit/goleri\"\n)\n\n// element indentifiers\nconst (\n        nogid = iota\n        gidkhi = iota\n        gidrname = iota\n        gidstart = iota\n)\n\n// mygrammar returns a compiled goleri grammar.\nfunc mygrammar() *goleri.grammar {\n        rname := goleri.newregex(gidrname, regexp.mustcompile(`^(?:\"(?:[^\"]*)\")+`))\n        khi := goleri.newkeyword(gidkhi, \"hi\", false)\n        start := goleri.newsequence(\n                gidstart,\n                khi,\n                rname,\n        )\n        return goleri.newgrammar(start, regexp.mustcompile(`^\\w+`))\n}\n```\n### export_java\nsyntax:\n```python\ngrammar().export_java(\n    java_template=grammar.java_template,\n    java_indent=' ' * 4,\n    java_package=none,\n    is_public=true)\n```\noptional keyword arguments:\n- `java_template`: template string used for the export. you might want to look at the default string which can be found at grammar.java_template.\n- `java_indent`: indentation used in the java file. (default: four spaces)\n- `java_package`: name of the java package or none when no package is specified. (default: none)\n- `is_public`: class and constructor are defined as public when true, else they will be defined as package private.\n\nfor example when using our quick usage grammar, this is the output when running `my_grammar.export_java()`:\n```java\n/**\n * this grammar is generated using the grammar.export_java() method and\n * should be used with the jleri module.\n *\n * source class: mygrammar\n * created at: 2018-07-04 12:12:34\n */\n\nimport jleri.grammar;\nimport jleri.element;\nimport jleri.sequence;\nimport jleri.regex;\nimport jleri.keyword;\n\npublic class mygrammar extends grammar {\n    enum ids {\n        k_hi,\n        r_name,\n        start\n    }\n\n    private static final element r_name = new regex(ids.r_name, \"^(?:\\\"(?:[^\\\"]*)\\\")+\");\n    private static final element k_hi = new keyword(ids.k_hi, \"hi\", false);\n    private static final element start = new sequence(\n        ids.start,\n        k_hi,\n        r_name\n    );\n\n    public mygrammar() {\n        super(start, \"^\\\\w+\");\n    }\n}\n```\n### export_py\nsyntax:\n```python\ngrammar().export_py(\n    py_module_name='pyleri',\n    py_template=grammar.py_template,\n    py_indent=' ' * 4)\n```\noptional keyword arguments:\n- `py_module_name`: name of the pyleri module. (default: 'pyleri')\n- `py_template`: template string used for the export. you might want to look at the default string which can be found at grammar.py_template.\n- `py_indent`: indentation used in the python file. (default: 4 spaces)\n\nfor example when using our quick usage grammar, this is the output when running `my_grammar.export_py()`:\n```python\n\"\"\"\n this grammar is generated using the grammar.export_py() method and\n should be used with the pyleri python module.\n\n source class: mygrammar\n created at: 2017-03-14 19:14:51\n\"\"\"\nimport re\nfrom pyleri import sequence\nfrom pyleri import keyword\nfrom pyleri import grammar\nfrom pyleri import regex\n\nclass mygrammar(grammar):\n\n    re_keywords = re.compile('^\\\\w+')\n    r_name = regex('^(?:\"(?:[^\"]*)\")+')\n    k_hi = keyword('hi')\n    start = sequence(\n        k_hi,\n        r_name\n    )\n```\n\n## result\nthe result of the `parse()` method contains 4 properties that will be explained next. a function `as_str(translate=none)` is also available which will\nshow the result as a string. the `translate` argument should be a function which accepts an element as argument. this function can be used to\nreturn custom strings for certain elements. if the return value of `translate` is `none` then the function will fall try to generate a string value. if\nthe return value is an empty string, the value will be ignored.\n\nexample of translate functions:\n```python\n# in case a translation function returns an empty string, no text is used\ndef translate(elem):\n    return ''  # as a result you get something like: 'error at position x'\n\n# text may be returned based on gid\ndef translate(elem):\n    if elem is some_elem:\n        return 'a'   # something like: error at position x, expecting: a\n    elif elem is other_elem:\n        return ''    # other_elem will be ignored\n    else:\n        return none  # normal parsing\n\n# a translate function can be used as follow:\nprint(my_grammar.parse('some string').as_str(translate=translate))\n```\n\n### is_valid\n`is_valid` returns a boolean value, `true` when the given string is valid according to the given grammar, `false` when not valid.\n\nlet us take the example from quick usage.\n```python\nres = my_grammar.parse('bye \"iris\"')\nprint(res.is_valid) # => false\n```\n\n### position\n`pos` returns the position where the parser had to stop. (when `is_valid` is `true` this value will be equal to the length of the given string with `str.rstrip()` applied)\n\nlet us take the example from quick usage.\n```python\nresult = my_grammar.parse('hi iris')\nprint(res.is_valid, result.pos) # => false, 3\n```\n\n### tree\n`tree` contains the parse tree. even when `is_valid` is `false` the parse tree is returned but will only contain results as far as parsing has succeeded. the tree is the root node which can include several `children` nodes. the structure will be further clarified in the following example which explains a way of visualizing the parse tree.\n\nexample:\n```python\nimport json\nfrom pyleri import choice\nfrom pyleri import grammar\nfrom pyleri import keyword\nfrom pyleri import regex\nfrom pyleri import repeat\nfrom pyleri import sequence\n\n\n# create a grammar class to define your language\nclass mygrammar(grammar):\n    r_name = regex('(?:\"(?:[^\"]*)\")+')\n    k_hi = keyword('hi')\n    k_bye = keyword('bye')\n    start = repeat(sequence(choice(k_hi, k_bye), r_name))\n\n\n# returns properties of a node object as a dictionary:\ndef node_props(node, children):\n    return {\n        'start': node.start,\n        'end': node.end,\n        'name': node.element.name if hasattr(node.element, 'name') else none,\n        'element': node.element.__class__.__name__,\n        'string': node.string,\n        'children': children}\n\n\n# recursive method to get the children of a node object:\ndef get_children(children):\n    return [node_props(c, get_children(c.children)) for c in children]\n\n\n# view the parse tree:\ndef view_parse_tree(res):\n    start = res.tree.children[0] \\\n        if res.tree.children else res.tree\n    return node_props(start, get_children(start.children))\n\n\nif __name__ == '__main__':\n    # compile your grammar by creating an instance of the grammar class:\n    my_grammar = mygrammar()\n    res = my_grammar.parse('hi \"pyleri\" bye \"pyleri\"')\n    # the parse tree is visualized as a json object:\n    print(json.dumps(view_parse_tree(res), indent=2))\n```\n\npart of the output is shown below.\n\n```json\n\n    {\n    \"start\": 0,\n    \"end\": 23,\n    \"name\": \"start\",\n    \"element\": \"repeat\",\n    \"string\": \"hi \\\"pyleri\\\" bye \\\"pyleri\\\"\",\n    \"children\": [\n        {\n        \"start\": 0,\n        \"end\": 11,\n        \"name\": null,\n        \"element\": \"sequence\",\n        \"string\": \"hi \\\"pyleri\\\"\",\n        \"children\": [\n            {\n            \"start\": 0,\n            \"end\": 2,\n            \"name\": null,\n            \"element\": \"choice\",\n            \"string\": \"hi\",\n            \"children\": [\n                {\n                \"start\": 0,\n                \"end\": 2,\n                \"name\": \"k_hi\",\n                \"element\": \"keyword\",\n                \"string\": \"hi\",\n                \"children\": []\n                }\n            ]\n            },\n            {\n            \"start\": 3,\n            \"end\": 11,\n            \"name\": \"r_name\",\n            \"element\": \"regex\",\n            \"string\": \"\\\"pyleri\\\"\",\n            \"children\": []\n            }\n\n            \"...\"\n            \"...\"\n\n\n```\na node contains 5 properties that will be explained next:\n\n- `start` property returns the start of the node object.\n- `end` property returns the end of the  node object.\n- `element` returns the [element](#elements)'s type (e.g. repeat, sequence, keyword, etc.). an element can be assigned to a variable; for instance in the example above `keyword('hi')` was assigned to `k_hi`. with `element.name` the assigned name `k_hi` will be returned. note that it is not a given that an element is named; in our example `sequence` was not assigned, thus in this case the element has no attribute `name`.\n- `string` returns the string that is parsed.\n- `children` can return a node object containing deeper layered nodes provided that there are any. in our example the root node has an element type `repeat()`, starts at 0 and ends at 24, and it has two `children`. these children are node objects that have both an element type `sequence`, start at 0 and 12 respectively, and so on.\n\n\n### expecting\n`expecting` returns a python set() containing elements which pyleri expects at `pos`. even if `is_valid` is true there might be elements in this set, for example when an `optional()` element could be added to the string. \"expecting\" is useful if you want to implement things like auto-completion, syntax error handling, auto-syntax-correction etc. the following example will illustrate a way of implementation.\n\nexample:\n```python\nimport re\nimport random\nfrom pyleri import choice\nfrom pyleri import grammar\nfrom pyleri import keyword\nfrom pyleri import repeat\nfrom pyleri import sequence\nfrom pyleri import end_of_statement\n\n\n# create a grammar class to define your language.\nclass mygrammar(grammar):\n    re_keywords = re.compile(r'\\s+')\n    r_name = keyword('\"pyleri\"')\n    k_hi = keyword('hi')\n    k_bye = keyword('bye')\n    start = repeat(sequence(choice(k_hi, k_bye), r_name), mi=2)\n\n\n# print the expected elements as a indented and numbered list.\ndef print_expecting(node_expecting, string_expecting):\n    for loop, e in enumerate(node_expecting):\n        string_expecting = '{}\\n\\t({}) {}'.format(string_expecting, loop, e)\n    print(string_expecting)\n\n\n# complete a string until it is valid according to the grammar.\ndef auto_correction(string, my_grammar):\n    node = my_grammar.parse(string)\n    print('\\nparsed string: {}'.format(node.tree.string))\n\n    if node.is_valid:\n        string_expecting = 'string is valid. \\nexpected: '\n        print_expecting(node.expecting, string_expecting)\n\n    else:\n        string_expecting = 'string is not valid.\\nexpected: ' \\\n            if not node.pos \\\n            else 'string is not valid. \\nafter \"{}\" expected: '.format(\n                                                  node.tree.string[:node.pos])\n        print_expecting(node.expecting, string_expecting)\n\n        selected = random.choice(list(node.expecting))\n        string = '{} {}'.format(node.tree.string[:node.pos],\n                                selected\n                                if selected\n                                is not end_of_statement else '')\n\n        auto_correction(string, my_grammar)\n\n\nif __name__ == '__main__':\n    # compile your grammar by creating an instance of the grammar class.\n    my_grammar = mygrammar()\n    string = 'hello \"pyleri\"'\n    auto_correction(string, my_grammar)\n\n```\n\noutput:\n```\nparsed string: hello \"pyleri\"\nstring is not valid.\nexpected:\n        (1) hi\n        (2) bye\n\nparsed string:  bye\nstring is not valid.\nafter \" bye\" expected:\n        (1) \"pyleri\"\n\nparsed string:  bye \"pyleri\"\nstring is not valid.\nafter \" bye \"pyleri\"\" expected:\n        (1) hi\n        (2) bye\n\nparsed string:  bye \"pyleri\" hi\nstring is not valid.\nafter \" bye \"pyleri\" hi\" expected:\n        (1) \"pyleri\"\n\nparsed string:  bye \"pyleri\" hi \"pyleri\"\nstring is valid.\nexpected:\n        (1) hi\n        (2) bye\n\n```\nin the above example we parsed an invalid string according to the grammar class. the `auto-correction()` method that we built for this example combines all properties from the `parse()` to create a valid string. the output shows every recursion of the `auto-correction()` method and prints successively the set of expected elements. it takes one randomly and adds it to the string. when the string corresponds to the grammar, the property `is_valid` will return `true`. notably the `expecting` property still contains elements even if the `is_valid` returned `true`. the reason in this example is due to the [repeat](#repeat) element.\n\n## elements\npyleri has several elements which are all subclasses of [element](#element) and can be used to create a grammar.\n\n### keyword\nsyntax:\n```python\nkeyword(keyword, ign_case=false)\n```\nthe parser needs to match the keyword which is just a string. when matching keywords we need to tell the parser what characters are allowed in keywords. by default pyleri uses `^\\w+` which is both in python and javascript equal to `^[a-za-z0-9_]+`. we can overwrite the default by setting `re_keywords` in the grammar. keyword() accepts one keyword argument `ign_case` to tell the parser if we should match case insensitive.\n\nexample:\n\n```python\nclass tictactoe(grammar):\n    # let's allow keywords with alphabetic characters and dashes.\n    re_keywords = re.compile('^[a-za-z-]+')\n\n    start = keyword('tic-tac-toe', ign_case=true)\n\nttt_grammar = tictactoe()\nttt_grammar.parse('tic-tac-toe').is_valid  # => true\n```\n\n### regex\nsyntax:\n```python\nregex(pattern, flags=0)\n```\nthe parser compiles a regular expression using the `re` module. the current version of pyleri has only support for the `re.ignorecase` flag.\nsee the [quick usage](#quick-usage) example for how to use `regex`.\n\n### token\nsyntax:\n```python\ntoken(token)\n```\na token can be one or more characters and is usually used to match operators like `+`, `-`, `//` and so on. when we parse a string object where pyleri expects an element, it will automatically be converted to a `token()` object.\n\nexample:\n```python\nclass ni(grammar):\n    t_dash = token('-')\n    # we could just write delimiter='-' because\n    # any string will be converted to token()\n    start = list(keyword('ni'), delimiter=t_dash)\n\nni = ni()\nni.parse('ni-ni-ni-ni-ni').is_valid  # => true\n```\n\n### tokens\nsyntax:\n```python\ntokens(tokens)\n```\ncan be used to register multiple tokens at once. the `tokens` argument should be a string with tokens separated by spaces. if given tokens are different in size the parser will try to match the longest tokens first.\n\nexample:\n```python\nclass ni(grammar):\n    tks = tokens('+ - !=')\n    start = list(keyword('ni'), delimiter=tks)\n\nni = ni()\nni.parse('ni + ni != ni - ni').is_valid  # => true\n```\n\n### sequence\nsyntax:\n```python\nsequence(element, element, ...)\n```\nthe parser needs to match each element in a sequence.\n\nexample:\n```python\nclass tictactoe(grammar):\n    start = sequence(keyword('tic'), keyword('tac'), keyword('toe'))\n\nttt_grammar = tictactoe()\nttt_grammar.parse('tic tac toe').is_valid  # => true\n```\n\n### choice\nsyntax:\n```python\nchoice(element, element, ..., most_greedy=true)\n```\nthe parser needs to choose between one of the given elements. choice accepts one keyword argument `most_greedy` which is `true` by default. when `most_greedy` is set to `false` the parser will stop at the first match. when `true` the parser will try each element and returns the longest match. setting `most_greedy` to `false` can provide some extra performance. note that the parser will try to match each element in the exact same order they are parsed to choice.\n\nexample: let us use `choice` to modify the quick usage example to allow the string 'bye \"iris\"'\n```python\nclass mygrammar(grammar):\n    r_name = regex('(?:\"(?:[^\"]*)\")+')\n    k_hi = keyword('hi')\n    k_bye = keyword('bye')\n    start = sequence(choice(k_hi, k_bye), r_name)\n\nmy_grammar = mygrammar()\nmy_grammar.parse('hi \"iris\"').is_valid  # => true\nmy_grammar.parse('bye \"iris\"').is_valid  # => true\n```\n\n### repeat\nsyntax:\n```python\nrepeat(element, mi=0, ma=none)\n```\nthe parser needs at least `mi` elements and at most `ma` elements. when `ma` is set to `none` we allow unlimited number of elements. `mi` can be any integer value equal or higher than 0 but not larger then `ma`.\n\nexample:\n```python\nclass ni(grammar):\n    start = repeat(keyword('ni'))\n\nni = ni()\nni.parse('ni ni ni ni ni').is_valid  # => true\n```\n\nit is not allowed to bind a name to the same element twice and repeat(element, 1, 1) is a common solution to bind the element a second (or more) time(s).\n\nfor example consider the following:\n```python\nclass mygrammar(grammar):\n    r_name = regex('(?:\"(?:[^\"]*)\")+')\n\n    # raises a syntaxerror because we try to bind a second time.\n    r_address = r_name # wrong\n\n    # instead use repeat\n    r_address = repeat(r_name, 1, 1) # right\n```\n\n### list\nsyntax:\n```python\nlist(element, delimiter=',', mi=0, ma=none, opt=false)\n```\nlist is like repeat but with a delimiter. a comma is used as default delimiter but any element is allowed. when a string is used as delimiter it will be converted to a `token` element. `mi` and `ma` work exactly like with repeat. an optional keyword argument `opt` can be set to `true` to allow the list to end with a delimiter. by default this is set to `false` which means the list has to end with an element.\n\nexample:\n```python\nclass ni(grammar):\n    start = list(keyword('ni'))\n\nni = ni()\nni.parse('ni, ni, ni, ni, ni').is_valid  # => true\n```\n\n### optional\nsyntax:\n```python\noptional(element)\n```\nthe parser looks for an optional element. it is like using `repeat(element, 0, 1)` but we encourage to use `optional` since it is more readable. (and slightly faster)\n\nexample:\n```python\nclass mygrammar(grammar):\n    r_name = regex('(?:\"(?:[^\"]*)\")+')\n    k_hi = keyword('hi')\n    start = sequence(k_hi, optional(r_name))\n\nmy_grammar = mygrammar()\nmy_grammar.parse('hi \"iris\"').is_valid  # => true\nmy_grammar.parse('hi').is_valid  # => true\n```\n\n### ref\nsyntax:\n```python\nref()\n```\nthe grammar can make a forward reference to make recursion possible. in the example below we create a forward reference to start but note that\na reference to any element can be made.\n\n>warning: a reference is not protected against testing the same position in\n>a string. this could potentially lead to an infinite loop.\n>for example:\n>```python\n>r = ref()\n>r = optional(r)  # don't do this\n>```\n>use [prio](#prio) if such recursive construction is required.\n\nexample:\n```python\nclass nestedni(grammar):\n    start = ref()\n    ni_item = choice(keyword('ni'), start)\n    start = sequence('[', list(ni_item), ']')\n\nnested_ni = nestedni()\nnested_ni.parse('[ni, ni, [ni, [], [ni, ni]]]').is_valid  # => true\n```\n\n### prio\nsyntax:\n```python\nprio(element, element, ...)\n```\nchoose the first match from the prio elements and allow `this` for recursive operations. with `this` we point to the `prio` element. probably the example below explains how `prio` and `this` can be used.\n\n>note: use a [ref](#ref) when possible.\n>a `prio` element is required when the same position in a string is potentially\n>checked more than once.\n\nexample:\n```python\nclass ni(grammar):\n    k_ni = keyword('ni')\n    start = prio(\n        k_ni,\n        # '(' and ')' are automatically converted to token('(') and token(')')\n        sequence('(', this, ')'),\n        sequence(this, keyword('or'), this),\n        sequence(this, keyword('and'), this))\n\nni = ni()\nni.parse('(ni or ni) and (ni or ni)').is_valid  # => true\n```",
  "docs_url": null,
  "keywords": "parser,grammar,autocompletion",
  "license": "",
  "name": "pyleri",
  "package_url": "https://pypi.org/project/pyleri/",
  "project_url": "https://pypi.org/project/pyleri/",
  "project_urls": {
    "Download": "https://github.com/cesbit/pyleri/tarball/1.4.2",
    "Homepage": "https://github.com/cesbit/pyleri"
  },
  "release_url": "https://pypi.org/project/pyleri/1.4.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python left-right parser",
  "version": "1.4.2",
  "releases": [],
  "developers": [
    "jeroen@cesbit.com",
    "jeroen_van_der_heijden"
  ],
  "kwds": "autocompletion parser parsing parse parsed",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyleri",
  "homepage": "https://github.com/cesbit/pyleri",
  "release_count": 22,
  "dependency_ids": [],
  "documentation_summary": "Pyleri 1.4.2, released on March 16, 2023, is a Python Left-Right Parser designed for easy use, initially created for SiriDB. It evolved from lrparsing and jsleri, aiming to maintain consistent language across projects. Pyleri allows exporting created grammars to JavaScript, C, Python, Go, and Java, enhancing auto-completion and suggestions in web consoles. It is licensed under the MIT License, developed by Jeroen van der Heijden, and targets developers with its production-stable status. The package supports Python versions 3.7 to 3.10 and is OS-independent. Installation is straightforward via PyPI, and the documentation provides comprehensive guides on usage, grammar creation, and exporting grammars to various programming languages.",
  "embedding": [
    -0.00824308767914772,
    0.019070571288466454,
    -0.01644357480108738,
    -0.0436791330575943,
    -0.019212571904063225,
    0.043253134936094284,
    -0.004274193663150072,
    -0.0186303723603487,
    -0.004004394169896841,
    -0.04546833038330078,
    0.01809077337384224,
    0.034846749156713486,
    -0.03192155063152313,
    0.029848355799913406,
    0.010912683792412281,
    -0.008150788024067879,
    0.014199978671967983,
    -0.016116976737976074,
    0.03283035010099411,
    0.011480682529509068,
    0.025559961795806885,
    -0.0014723603380843997,
    -0.006045640911906958,
    -0.016968974843621254,
    0.011480682529509068,
    0.008988586254417896,
    0.002185021759942174,
    -0.013908878900110722,
    0.010351784527301788,
    0.023415764793753624,
    0.014299378730356693,
    0.006443240214139223,
    -0.014299378730356693,
    0.008456087671220303,
    -0.009705685079097748,
    -0.0040327939204871655,
    0.0331711508333683,
    0.01668497547507286,
    0.016670774668455124,
    0.00999678485095501,
    0.04427553340792656,
    0.006979289464652538,
    -0.006975739728659391,
    -0.024324564263224602,
    -0.035897545516490936,
    0.007809988223016262,
    0.015960775315761566,
    -0.033653948456048965,
    -0.029251955449581146,
    -0.010259484872221947,
    0.012858080677688122,
    0.010578984394669533,
    -0.0023483214899897575,
    -0.026766959577798843,
    -0.019823171198368073,
    -0.012424981221556664,
    0.03209195286035538,
    0.003794944379478693,
    -0.01036598440259695,
    -0.018005572259426117,
    0.01409347914159298,
    -0.009904485195875168,
    -0.014838977716863155,
    -0.0026465209666639566,
    0.02183956652879715,
    -0.0021512967068701982,
    -0.010756484232842922,
    0.01823277212679386,
    -0.008392187766730785,
    -0.02673855982720852,
    0.027618959546089172,
    0.029109956696629524,
    -0.0007131051970645785,
    -0.001915222150273621,
    0.04421873390674591,
    -0.018616171553730965,
    -0.01853097230195999,
    0.006311890669167042,
    -0.020447969436645508,
    0.0006611865246668458,
    0.016471974551677704,
    -0.011225082911550999,
    -0.019922569394111633,
    0.04092434048652649,
    0.004476543515920639,
    -0.00851998757570982,
    -0.004533343017101288,
    0.02213776670396328,
    0.00172707240562886,
    -0.025900760665535927,
    0.008874986320734024,
    -0.0005644491757266223,
    -0.006929589435458183,
    0.0025701960548758507,
    0.007646688725799322,
    -0.0041925436817109585,
    -0.027221359312534332,
    0.020149769261479378,
    -0.005750991404056549,
    -0.016926374286413193,
    -0.005754541605710983,
    0.011984782293438911,
    -0.014207079075276852,
    -0.0028683957643806934,
    -0.013454480096697807,
    0.0034505948424339294,
    -0.0017599099082872272,
    -0.037800341844558716,
    0.04092434048652649,
    0.0003521151083987206,
    -0.025006162002682686,
    0.03697674348950386,
    0.023117564618587494,
    -0.021214768290519714,
    0.004760542884469032,
    -0.012204881757497787,
    0.054243918508291245,
    -0.0010126359993591905,
    -0.01634417474269867,
    -0.010202684439718723,
    0.009805085137486458,
    0.012183581478893757,
    -0.009457185864448547,
    -0.03033115528523922,
    0.01878657191991806,
    0.005431491881608963,
    0.009080886840820312,
    -0.025261761620640755,
    -0.02872655726969242,
    -0.018417373299598694,
    0.00038717128336429596,
    -0.003890794236212969,
    0.010905583389103413,
    0.008129487745463848,
    -0.001481235260143876,
    -0.00234299642033875,
    -0.018601972609758377,
    -0.012332681566476822,
    -0.03987354040145874,
    -0.025801360607147217,
    0.009691485203802586,
    0.0074549890123307705,
    -0.00037474630516953766,
    0.010756484232842922,
    0.018346372991800308,
    0.027107760310173035,
    0.017423374578356743,
    0.01238948106765747,
    -0.0176931731402874,
    -0.00676983967423439,
    0.015932375565171242,
    -0.011856982484459877,
    0.007163889240473509,
    0.01753697358071804,
    -0.00874718651175499,
    -0.0011013858020305634,
    -0.007028989493846893,
    0.016912175342440605,
    -0.012332681566476822,
    -0.001159073319286108,
    -0.015435377135872841,
    -0.003198545193299651,
    -0.021015968173742294,
    -0.007781588472425938,
    -0.004551093094050884,
    0.0405835397541523,
    0.007469188887625933,
    0.005250442307442427,
    -0.014711177907884121,
    -0.02453756332397461,
    0.01399407908320427,
    0.030870754271745682,
    -0.03158075362443924,
    0.004107343964278698,
    -0.013560979627072811,
    0.0007996362983249128,
    0.02543216198682785,
    0.0015158477472141385,
    -0.0029376205056905746,
    0.006929589435458183,
    0.010862983763217926,
    -0.0014794602757319808,
    0.01248888112604618,
    0.03152395412325859,
    -0.006418390199542046,
    -0.03033115528523922,
    -0.026653360575437546,
    0.013667479157447815,
    0.01276578102260828,
    -0.00444459356367588,
    0.03407995030283928,
    0.027192959561944008,
    -0.00040092752897180617,
    -0.02632676064968109,
    -0.5748151540756226,
    -0.004469443112611771,
    0.0014386354014277458,
    -0.026198960840702057,
    0.02183956652879715,
    -0.003688444383442402,
    -0.014739577658474445,
    0.029649555683135986,
    -0.015577376820147038,
    0.026355160400271416,
    -0.01738077402114868,
    -0.002089171903207898,
    0.004803142976015806,
    0.00032415890018455684,
    -0.009265486150979996,
    -0.014278078451752663,
    0.006890539545565844,
    -0.027462758123874664,
    -0.022904565557837486,
    0.01628737524151802,
    -0.03251795098185539,
    0.01853097230195999,
    -0.012559881433844566,
    0.015705175697803497,
    -0.018772371113300323,
    0.018346372991800308,
    0.005182992201298475,
    -0.03498874604701996,
    0.010919783264398575,
    0.013923078775405884,
    -0.02362876385450363,
    0.006535540334880352,
    -0.014086378738284111,
    -0.009932884946465492,
    0.05867431312799454,
    -0.010167185217142105,
    -0.007703488692641258,
    0.03788554295897484,
    -0.004693092778325081,
    0.031239952892065048,
    -0.0126876812428236,
    0.0009034736431203783,
    0.013035580515861511,
    0.006826639641076326,
    0.01206288207322359,
    -0.011885382235050201,
    0.013241480104625225,
    0.011906682513654232,
    0.0015451351646333933,
    0.019808970391750336,
    -0.009336486458778381,
    -0.009016986936330795,
    0.018502572551369667,
    -0.010834584012627602,
    0.036948345601558685,
    0.016457775607705116,
    0.015293377451598644,
    -0.015804575756192207,
    -0.0150661775842309,
    -0.02223716676235199,
    0.001061448361724615,
    -0.006443240214139223,
    0.016855373978614807,
    -0.007525988854467869,
    -0.014405878260731697,
    -0.0025435711722820997,
    -0.0023394464515149593,
    -0.009435885585844517,
    0.0006336740334518254,
    -0.03677794337272644,
    0.012155181728303432,
    0.01533597707748413,
    -0.021910566836595535,
    -0.024324564263224602,
    0.008306987583637238,
    0.03933393955230713,
    0.036295145750045776,
    0.02868395671248436,
    0.02342996560037136,
    0.02663915976881981,
    0.03998713940382004,
    0.002900345716625452,
    -0.011956382542848587,
    -0.01604597643017769,
    0.04362233355641365,
    -0.017863573506474495,
    0.00181759730912745,
    -0.0007996362983249128,
    0.0005884116399101913,
    -0.005275292322039604,
    0.008796886540949345,
    0.014405878260731697,
    -0.011097283102571964,
    0.0008963736472651362,
    -0.0005750991404056549,
    0.0014750227564945817,
    -0.038254741579294205,
    0.015548977069556713,
    0.012503081001341343,
    -0.04808112978935242,
    0.00797328818589449,
    -0.017167774960398674,
    -0.00974118523299694,
    -0.0004357618454378098,
    -0.008534187451004982,
    0.021001769229769707,
    -0.01823277212679386,
    -0.012730280868709087,
    -0.0036564944311976433,
    -0.012410781346261501,
    -0.0018042847514152527,
    -0.05671471357345581,
    -0.021470367908477783,
    -0.003809144254773855,
    -0.00043664933764375746,
    -0.032262351363897324,
    0.024068964645266533,
    -0.003198545193299651,
    0.011118583381175995,
    -0.02813015878200531,
    -0.012432081624865532,
    -0.003780744271352887,
    -0.0028488708194345236,
    -3.0507766496157274e-05,
    0.02223716676235199,
    0.00460789306089282,
    0.008413487114012241,
    -0.00851998757570982,
    -0.011473583057522774,
    0.02259216643869877,
    -0.0016312225488945842,
    -0.006446790415793657,
    0.010614484548568726,
    -0.007937788031995296,
    0.02298976480960846,
    0.021157968789339066,
    0.025417961180210114,
    0.008051387965679169,
    0.01688377559185028,
    -0.012921980582177639,
    -0.00034900885657407343,
    7.020253178779967e-06,
    -0.008157887496054173,
    -0.00690828962251544,
    -0.0007920925854705274,
    -0.001934747095219791,
    -0.01464017853140831,
    -0.0021903468295931816,
    -0.005420841742306948,
    0.0043522934429347515,
    0.0004337649734225124,
    0.006230240687727928,
    -0.019155770540237427,
    0.030444754287600517,
    -0.04487193375825882,
    -0.0022009967360645533,
    -0.023202765733003616,
    0.0018885971512645483,
    -0.01516557764261961,
    -0.01549217663705349,
    0.009357785806059837,
    0.009371985681355,
    0.0028382206801325083,
    0.024793162941932678,
    -0.022208767011761665,
    -0.014611777849495411,
    -0.0070431893691420555,
    0.016273176297545433,
    0.0009039174183271825,
    -0.028754957020282745,
    0.01064288429915905,
    0.020817168056964874,
    -0.010671284049749374,
    -0.0009558360907249153,
    0.01159428246319294,
    -0.0007738988497294486,
    -0.022478565573692322,
    0.02374236471951008,
    -0.003544669598340988,
    0.002053671982139349,
    -0.018573572859168053,
    0.008725887164473534,
    -0.01678437553346157,
    -0.021953167393803596,
    0.0036777944769710302,
    0.04416193440556526,
    0.009954185225069523,
    0.03407995030283928,
    -0.009968385100364685,
    0.021328367292881012,
    -0.01054348424077034,
    0.008285687305033207,
    -0.029109956696629524,
    0.007227789144963026,
    -0.007746088318526745,
    -0.006855039857327938,
    0.013156279921531677,
    0.011359983123838902,
    -0.01569097675383091,
    0.027306558564305305,
    0.0037274945061653852,
    -0.02078876830637455,
    0.0015167351812124252,
    -0.04660433158278465,
    -0.015960775315761566,
    -0.02088816836476326,
    0.007447889074683189,
    -0.020646769553422928,
    0.027391759678721428,
    0.007909388281404972,
    0.02124316804111004,
    -0.03177955374121666,
    -0.03399474918842316,
    -0.005843291059136391,
    0.008811086416244507,
    0.030899154022336006,
    0.0016853599809110165,
    0.02529016137123108,
    -0.017125174403190613,
    -0.005431491881608963,
    0.0006740552489645779,
    0.002976670628413558,
    0.011935082264244556,
    0.021924767643213272,
    -0.005289492197334766,
    0.008448987267911434,
    -0.0038162441924214363,
    0.0023199215065687895,
    -0.0038552943151444197,
    -0.04893312603235245,
    -0.012204881757497787,
    0.02872655726969242,
    0.007930688560009003,
    -0.002957145683467388,
    0.014881577342748642,
    0.011118583381175995,
    0.03811274468898773,
    -0.015875576063990593,
    0.0018637472530826926,
    -0.03342675045132637,
    0.015662577003240585,
    0.03513074666261673,
    -0.01276578102260828,
    -0.014427178539335728,
    0.01809077337384224,
    0.001359647954814136,
    0.026653360575437546,
    0.007760288193821907,
    -0.03887954354286194,
    0.0239411648362875,
    -0.014796378090977669,
    0.015421177260577679,
    -0.01434197835624218,
    0.011466482654213905,
    0.0030192704871296883,
    0.018246972933411598,
    0.025559961795806885,
    0.017749972641468048,
    0.008015887811779976,
    0.01329118013381958,
    0.004373593255877495,
    -0.01914157159626484,
    0.02838575839996338,
    0.013646179810166359,
    0.036948345601558685,
    -0.014320679008960724,
    -0.021711766719818115,
    -0.025219162926077843,
    0.016514575108885765,
    -0.00991868507117033,
    -0.023046566173434258,
    -0.04717233031988144,
    -0.02039116993546486,
    -0.001648085075430572,
    0.0045546432957053185,
    0.008008788339793682,
    -0.005701291374862194,
    0.027405958622694016,
    0.008917586877942085,
    -0.00010877405293285847,
    -0.016571374610066414,
    -0.02947915531694889,
    0.034108348190784454,
    -0.011991881765425205,
    -0.020320169627666473,
    -0.03322795033454895,
    -0.02208096720278263,
    -0.007703488692641258,
    -0.004249343648552895,
    0.007710588630288839,
    -0.007082239259034395,
    0.014107679016888142,
    0.002185021759942174,
    0.026312559843063354,
    -0.0047640930861234665,
    0.007880988530814648,
    0.02418256364762783,
    -0.022506967186927795,
    0.0029695704579353333,
    0.024012163281440735,
    0.021058568730950356,
    0.0004106900014448911,
    -0.0321771502494812,
    0.004295493476092815,
    0.04916032776236534,
    0.0016596225323155522,
    -0.019311971962451935,
    -0.012290081940591335,
    -0.01513717696070671,
    0.014469778165221214,
    -0.005502491723746061,
    0.016926374286413193,
    0.011707882396876812,
    -0.016613975167274475,
    0.003975993953645229,
    -0.004433943424373865,
    0.0019542721565812826,
    0.005129742436110973,
    0.012694780714809895,
    0.017309773713350296,
    -0.040469940751791,
    -0.031211553141474724,
    0.0028204708360135555,
    0.004760542884469032,
    0.020518969744443893,
    0.009073786437511444,
    0.015080377459526062,
    0.02043376863002777,
    -0.04120833799242973,
    -0.017068374902009964,
    -0.017423374578356743,
    -0.012673481367528439,
    0.010202684439718723,
    0.0010649984469637275,
    0.005161692388355732,
    0.022663166746497154,
    0.005364041775465012,
    0.001731509924866259,
    0.019297771155834198,
    -0.006031441036611795,
    0.015705175697803497,
    -0.018871771171689034,
    0.02663915976881981,
    0.004586593247950077,
    0.02158396691083908,
    0.0025080712512135506,
    0.008015887811779976,
    -0.0063012405298650265,
    0.010223984718322754,
    0.011260583065450191,
    0.031211553141474724,
    -0.0001593060151208192,
    0.001638322602957487,
    -0.0038197943940758705,
    -0.0034505948424339294,
    -0.006386440247297287,
    0.0014093478675931692,
    0.019269371405243874,
    -0.019354570657014847,
    0.026823759078979492,
    0.047399528324604034,
    0.02138516865670681,
    -0.014838977716863155,
    -0.005811341106891632,
    0.028456756845116615,
    0.022024167701601982,
    -0.001352548017166555,
    0.005761641543358564,
    0.0062586404383182526,
    -0.002240046625956893,
    -0.02368556521832943,
    0.017948772758245468,
    -0.0055663916282355785,
    -0.011182483285665512,
    0.010202684439718723,
    0.012006081640720367,
    -0.030558355152606964,
    -0.012510181404650211,
    0.01799137331545353,
    0.007852587848901749,
    0.009499785490334034,
    -0.00981928501278162,
    0.01278708130121231,
    -0.015676775947213173,
    0.014143179170787334,
    -0.02953595668077469,
    0.005853941198438406,
    -0.0012052231468260288,
    -0.004416193347424269,
    -0.003965344280004501,
    -0.022819366306066513,
    -0.012623781338334084,
    -0.049586325883865356,
    -0.008377987891435623,
    -0.015875576063990593,
    -0.014079279266297817,
    -0.01409347914159298,
    -0.020419569686055183,
    0.012211982160806656,
    -0.010635783895850182,
    0.0019879969768226147,
    -0.010479584336280823,
    0.028470957651734352,
    -0.022066766396164894,
    0.013376380316913128,
    -0.0254889614880085,
    0.009329386055469513,
    -0.008612287230789661,
    0.023259565234184265,
    0.019922569394111633,
    -0.0013623104896396399,
    -0.005846841260790825,
    0.008612287230789661,
    0.010557684116065502,
    0.01167238224297762,
    0.02219456620514393,
    -0.0005932928761467338,
    -0.030757153406739235,
    -0.013575179502367973,
    0.020107170566916466,
    -0.010614484548568726,
    0.001123573281802237,
    0.006233790889382362,
    -0.024906761944293976,
    -0.0020359219051897526,
    -0.03447754681110382,
    -0.01151618268340826,
    -0.01206288207322359,
    -0.009379086084663868,
    0.010145884938538074,
    0.0013303605373948812,
    0.0068337395787239075,
    -0.02088816836476326,
    0.015903975814580917,
    0.025119762867689133,
    -0.012453380972146988,
    0.009151886217296124,
    0.03544314578175545,
    0.0022986214607954025,
    -0.006691739894449711,
    -0.02273416519165039,
    0.019013771787285805,
    0.012858080677688122,
    -0.045297931879758835,
    -0.015520576387643814,
    -0.048791125416755676,
    0.026056960225105286,
    0.02874075621366501,
    0.03433554992079735,
    -0.003349419916048646,
    -0.019624371081590652,
    0.006972189527004957,
    -0.005655141547322273,
    0.0014696978032588959,
    0.017948772758245468,
    0.017409173771739006,
    0.009258385747671127,
    -0.027150359004735947,
    -0.012978781014680862,
    0.0132130803540349,
    -0.0372607447206974,
    -0.0018548722146078944,
    -0.013624879531562328,
    0.00964178517460823,
    -0.006876339670270681,
    -0.00022553559392690659,
    -0.008292787708342075,
    -0.01993677020072937,
    -0.026497161015868187,
    -0.021711766719818115,
    -0.021924767643213272,
    0.026397760957479477,
    -0.02378496527671814,
    0.007831288501620293,
    -0.02213776670396328,
    0.022350765764713287,
    -0.016926374286413193,
    -0.02303236536681652,
    -0.003681344445794821,
    0.0033050449565052986,
    -0.0005502491840161383,
    -0.0056586917489767075,
    0.015974976122379303,
    0.02333056554198265,
    0.01833217218518257,
    -0.006439690478146076,
    0.015932375565171242,
    0.012609581463038921,
    0.007888088002800941,
    0.013518380001187325,
    -0.009166086092591286,
    0.004792492836713791,
    -0.02229396626353264,
    0.00011903575796168298,
    0.0029731206595897675,
    0.04396313428878784,
    -0.00919448584318161,
    -0.05745311453938484,
    -0.020206570625305176,
    0.017607973888516426,
    -0.009812185540795326,
    0.017210373654961586,
    -0.036209944635629654,
    -0.041094738990068436,
    -0.026340961456298828,
    0.009925785474479198,
    -0.0056196413934230804,
    0.003344095079228282,
    0.005591241642832756,
    -0.03413674980401993,
    0.010926883667707443,
    -0.03927714005112648,
    0.03192155063152313,
    0.0012646856484934688,
    -0.002149521838873625,
    -0.020163970068097115,
    0.02158396691083908,
    -0.002399796387180686,
    0.05677151679992676,
    -0.012950380332767963,
    0.017721572890877724,
    -0.02893955633044243,
    0.005772291216999292,
    -0.024466563016176224,
    0.0059284912422299385,
    0.02114376798272133,
    0.02078876830637455,
    0.017877772450447083,
    -0.003890794236212969,
    -0.0055592916905879974,
    0.014079279266297817,
    -0.006808890029788017,
    0.029109956696629524,
    -0.0029447206761687994,
    0.004455243237316608,
    -0.01654297485947609,
    -0.0023607464972883463,
    -0.010919783264398575,
    0.0038375442381948233,
    -0.0008622049354016781,
    0.004149943590164185,
    0.01211968157440424,
    -0.0014173353556543589,
    -0.02828635834157467,
    -0.0032979450188577175,
    -0.004810242913663387,
    0.04126513749361038,
    0.012694780714809895,
    0.022606365382671356,
    0.03922034054994583,
    0.021399367600679398,
    -0.0012016731780022383,
    0.002540021203458309,
    0.004110893700271845,
    0.00598174100741744,
    0.01699737459421158,
    -0.008725887164473534,
    -0.007540188729763031,
    -0.01513717696070671,
    0.02078876830637455,
    0.008924686349928379,
    -0.04637712985277176,
    -0.031012753024697304,
    0.022464366629719734,
    0.010245284996926785,
    0.017650574445724487,
    -0.04668952897191048,
    -5.5607339163543656e-05,
    -0.04015754163265228,
    0.007511788979172707,
    -0.021853767335414886,
    0.03334154933691025,
    -0.0071532391011714935,
    0.0024796712677925825,
    -0.0005293929716572165,
    0.047399528324604034,
    -0.009464286267757416,
    -0.017906174063682556,
    0.0019329721108078957,
    -0.0005533554358407855,
    -0.005694191437214613,
    -0.0253753624856472,
    -0.013021380640566349,
    0.022719966247677803,
    0.03868074342608452,
    0.016613975167274475,
    -0.014036678709089756,
    -0.0004792492836713791,
    0.03058675490319729,
    -0.012836780399084091,
    0.010231085121631622,
    -0.0006168115651234984,
    0.01598917692899704,
    0.04481513425707817,
    -0.0384819433093071,
    -0.005683541297912598,
    -0.004927392583340406,
    -0.02198156714439392,
    0.01674177497625351,
    0.00939328595995903,
    -0.0202349703758955,
    -0.010806184262037277,
    -0.010699683800339699,
    0.007632488384842873,
    0.03058675490319729,
    0.0054066418670117855,
    -0.013731379061937332,
    0.00694733951240778,
    -0.020149769261479378,
    0.00660654017701745,
    -0.029450755566358566,
    0.021626567468047142,
    0.022847766056656837,
    -0.0007259739213623106,
    -0.01709677465260029,
    -0.02223716676235199,
    -0.015662577003240585,
    0.021257368847727776,
    0.014207079075276852,
    -0.025020362809300423,
    -0.02644035965204239,
    0.03677794337272644,
    0.0003430182405281812,
    0.025460561737418175,
    -0.016670774668455124,
    0.00017062161350622773,
    0.00019369658548384905,
    0.01451947819441557,
    0.008008788339793682,
    0.0033831449691206217,
    0.045695532113313675,
    -0.006741439923644066,
    -0.016571374610066414,
    0.005587691441178322,
    -0.004348743706941605,
    0.02928035706281662,
    0.025801360607147217,
    -0.01046538446098566,
    -0.019169971346855164,
    -0.004469443112611771,
    0.011359983123838902,
    -0.010401484556496143,
    -0.00371684436686337,
    0.01679857447743416,
    0.010841683484613895,
    -0.0022347215563058853,
    -0.017110973596572876,
    -0.024807363748550415,
    0.009968385100364685,
    0.02598596177995205,
    0.0009939984884113073,
    0.006169890984892845,
    -0.007277489174157381,
    -0.024793162941932678,
    0.01803397387266159,
    -0.0012708981521427631,
    -0.005537991877645254,
    0.028243757784366608,
    -0.015960775315761566,
    -0.0051971920765936375,
    -0.010692584328353405,
    0.01848837174475193,
    0.015122977085411549,
    -0.014725377783179283,
    0.008271487429738045,
    0.01688377559185028,
    0.02768995799124241,
    0.02188216708600521,
    -0.005175892263650894,
    -0.016471974551677704,
    -0.007682188414037228,
    -0.0022524716332554817,
    -0.03913514316082001,
    -0.02083136886358261,
    -0.013482879847288132,
    0.04248633608222008,
    0.02913835644721985,
    -0.03314274922013283,
    -0.026014361530542374,
    -0.011885382235050201,
    -0.03302915021777153,
    0.001109373290091753,
    -0.028967956081032753,
    0.036948345601558685,
    0.017153574153780937,
    0.0140153793618083,
    0.007632488384842873,
    0.020916568115353584,
    -0.007298788987100124,
    0.0228335652500391,
    -0.009421685710549355,
    -0.0056196413934230804,
    -0.00299087050370872,
    0.023302165791392326,
    0.008122388273477554,
    0.0038801440969109535,
    -0.034051548689603806,
    -0.011480682529509068,
    0.019965169951319695,
    0.00019569345749914646,
    -0.002067871857434511,
    0.038652341812849045,
    -0.02493516355752945,
    -0.006904739886522293,
    -0.018360571935772896,
    -0.007497588638216257,
    0.014320679008960724,
    0.009790885262191296,
    0.021654967218637466,
    -0.023870164528489113,
    -0.003599694697186351,
    -0.009450085461139679,
    -0.0061911907978355885,
    -0.006965089589357376,
    0.01733817346394062,
    0.013418979942798615,
    -0.0008608737261965871,
    -0.011061783879995346,
    -0.004224493633955717,
    0.004831542726606131,
    -0.014448478817939758,
    -0.004217393696308136,
    0.028442557901144028,
    -0.017068374902009964,
    -0.009627585299313068,
    0.01868717186152935,
    0.005545091815292835,
    0.0015797476517036557,
    -0.016812775284051895,
    0.015761977061629295,
    -0.027462758123874664,
    0.015350176952779293,
    0.01684117503464222,
    -0.0076750884763896465,
    0.022648965939879417,
    -0.021910566836595535,
    0.02372816391289234,
    -0.016173776239156723,
    0.006514240056276321,
    -0.021299967542290688,
    -0.0023838214110583067,
    -0.024395562708377838,
    0.035897545516490936,
    0.03038795478641987,
    -0.025545760989189148,
    -0.001154635800048709,
    0.011956382542848587,
    -0.0012318481458351016,
    -0.016968974843621254,
    -0.03336995095014572,
    0.002907445654273033,
    -0.032148752361536026,
    0.013880479149520397,
    -0.021896367892622948,
    -0.0160885751247406,
    -0.01813337206840515,
    0.017110973596572876,
    0.022677365690469742,
    -0.03402315080165863,
    -0.014980977401137352,
    0.1830093264579773,
    0.006386440247297287,
    0.04881952702999115,
    0.01993677020072937,
    -0.005577041767537594,
    0.012077081948518753,
    0.0207319688051939,
    0.0032003202941268682,
    -0.02098756842315197,
    0.0050942422822117805,
    -0.00949268601834774,
    -0.021427767351269722,
    -0.030047155916690826,
    -0.006517790257930756,
    0.02049056999385357,
    -0.0011262358166277409,
    -0.01698317378759384,
    -0.04248633608222008,
    -0.026667559519410133,
    0.005782941356301308,
    0.014029579237103462,
    -0.003045895369723439,
    -0.019766369834542274,
    -0.040555138140916824,
    0.014391678385436535,
    0.005342741962522268,
    -0.006855039857327938,
    0.0021317717619240284,
    0.0025009713135659695,
    0.012311381287872791,
    -0.023060765117406845,
    0.007135489489883184,
    -0.011232183314859867,
    0.018715571612119675,
    -0.009989685378968716,
    -0.011608482338488102,
    0.004913192708045244,
    -8.226003410527483e-05,
    0.027420159429311752,
    -0.0006296802894212306,
    0.0036103446036577225,
    -0.04967152699828148,
    0.01259538158774376,
    -0.04901832714676857,
    -0.012716080993413925,
    -0.009024086408317089,
    -0.013028480112552643,
    0.006052740849554539,
    -0.010706784203648567,
    0.033057551831007004,
    -0.012105481699109077,
    -0.01644357480108738,
    0.050097525119781494,
    0.021527167409658432,
    0.005637391470372677,
    -0.002110471948981285,
    0.0023873713798820972,
    0.001996872015297413,
    0.019198371097445488,
    0.019397171214222908,
    -0.02882595732808113,
    0.03632354736328125,
    -0.005839741323143244,
    0.02987675555050373,
    -0.033653948456048965,
    0.00452269334346056,
    -0.03666434437036514,
    -0.006223140750080347,
    0.008172087371349335,
    -0.012921980582177639,
    -0.016159575432538986,
    -0.00668463995680213,
    -0.015094577334821224,
    -0.0010623359121382236,
    -0.04186153784394264,
    -0.018062373623251915,
    0.034704748541116714,
    0.01884337142109871,
    0.013071080669760704,
    0.0046859928406775,
    -0.011707882396876812,
    0.003060095477849245,
    -0.01486737746745348,
    0.0020660969894379377,
    -0.02672436088323593,
    -0.016116976737976074,
    -0.0006389990448951721,
    -0.019198371097445488,
    -0.033057551831007004,
    -0.034307148307561874,
    -0.014150278642773628,
    -0.033710747957229614,
    0.006805339828133583,
    0.005388891790062189,
    -0.0030281455256044865,
    -0.0066633401438593864,
    -0.021867968142032623,
    0.033000752329826355,
    -0.01767897419631481,
    -0.014824777841567993,
    -0.04277033731341362,
    0.03359714895486832,
    0.02138516865670681,
    0.03828314319252968,
    -0.02408316358923912,
    0.01674177497625351,
    0.008377987891435623,
    0.0228335652500391,
    -0.015548977069556713,
    -0.013781079091131687,
    0.02193896658718586,
    -0.007146139163523912,
    0.018317973241209984,
    -0.003413319820538163,
    0.0023554214276373386,
    -0.008796886540949345,
    -0.020249169319868088,
    0.001106710871681571,
    -0.006989939603954554,
    0.023415764793753624,
    -0.02513396181166172,
    0.00137384794652462,
    -0.0280307587236166,
    0.0024885463062673807,
    -0.012794180773198605,
    -0.03067195415496826,
    -0.05205712094902992,
    -0.001865522237494588,
    -0.005445691756904125,
    0.017224574461579323,
    -0.014597577974200249,
    -0.05367591977119446,
    0.025261761620640755,
    -0.0038836942985653877,
    -0.011225082911550999,
    -0.014483978040516376,
    -0.020547369495034218,
    -0.0016640600515529513,
    -0.0014377478510141373,
    -0.010067785158753395,
    -0.0022986214607954025,
    0.013631979934871197,
    -0.005530891939997673,
    -0.0013543230015784502,
    0.017565373331308365,
    0.005612541455775499,
    -0.016329975798726082,
    0.02269156649708748,
    -0.010919783264398575,
    -0.007888088002800941,
    -0.030416354537010193,
    -0.03192155063152313,
    0.014597577974200249,
    -0.026397760957479477,
    0.005995940882712603,
    -0.04396313428878784,
    -0.026340961456298828,
    -0.0059888409450650215,
    0.02519076317548752,
    0.0025471211411058903,
    -0.03271675109863281,
    0.014881577342748642,
    -0.0024051214568316936,
    -0.012382381595671177,
    -0.02382756397128105,
    -0.04416193440556526,
    -0.17982852458953857,
    0.023713964968919754,
    0.028541957959532738,
    -0.04225913807749748,
    0.007383989170193672,
    0.013255679979920387,
    0.010479584336280823,
    -0.009102186188101768,
    0.011452282778918743,
    -0.013063980266451836,
    0.03331315144896507,
    -0.021754367277026176,
    -0.023912765085697174,
    -0.03251795098185539,
    -0.0010241734562441707,
    0.0020305970683693886,
    0.01106888335198164,
    0.02342996560037136,
    0.045297931879758835,
    0.018403172492980957,
    0.0080442875623703,
    -0.01823277212679386,
    -0.0026536211371421814,
    0.02999035455286503,
    0.017210373654961586,
    -0.013660379685461521,
    -0.004540443420410156,
    -0.002545346273109317,
    -0.009478486143052578,
    -0.014270978979766369,
    -0.0077247885055840015,
    0.02953595668077469,
    0.037999141961336136,
    0.004249343648552895,
    0.01648617535829544,
    0.004295493476092815,
    0.00250452128238976,
    -0.019595971331000328,
    -0.023600364103913307,
    0.03362555056810379,
    0.02517656236886978,
    0.01584717631340027,
    0.012254581786692142,
    -0.005285941995680332,
    -0.013106580823659897,
    0.012446281500160694,
    0.02458016388118267,
    -0.018104972317814827,
    0.019624371081590652,
    -0.009989685378968716,
    0.021924767643213272,
    -0.014320679008960724,
    0.0015256102196872234,
    -0.0024246464017778635,
    0.025914961472153664,
    0.0062408908270299435,
    0.010408584028482437,
    0.02788875810801983,
    0.013852079398930073,
    0.028272157534956932,
    -0.006056291051208973,
    -0.02663915976881981,
    0.0022560216020792723,
    0.009435885585844517,
    -0.0027423708233982325,
    0.018956972286105156,
    0.004224493633955717,
    0.043338336050510406,
    -0.025843961164355278,
    0.0077673885971307755,
    0.00022309497580863535,
    0.01171498280018568,
    0.006304790731519461,
    -0.02058997005224228,
    0.037345945835113525,
    -0.0046043433248996735,
    -0.006368690636008978,
    0.0351591482758522,
    0.010280784219503403,
    -0.016017576679587364,
    -0.011736282147467136,
    0.03612474724650383,
    0.00822178740054369,
    0.0140153793618083,
    0.01044408418238163,
    -0.01848837174475193,
    0.0034363949671387672,
    -0.009265486150979996,
    0.0011262358166277409,
    -0.01914157159626484,
    0.03231915086507797,
    -0.007937788031995296,
    0.0051971920765936375,
    0.00047126179561018944,
    0.008086888119578362,
    0.025020362809300423,
    -0.009102186188101768,
    -0.002559546148404479,
    0.0006864801980555058,
    0.0011812606826424599,
    0.00027689957641996443,
    0.010429884307086468,
    -0.01914157159626484,
    -0.008292787708342075,
    0.018814971670508385,
    0.022776765748858452,
    -0.038709141314029694,
    0.001893922220915556,
    0.02582976222038269,
    0.019595971331000328,
    -0.008953087031841278,
    -0.01284388080239296,
    0.009450085461139679,
    0.03518754616379738,
    -0.020263370126485825,
    0.00678404001519084,
    0.00010683265281841159,
    -0.01884337142109871,
    0.01634417474269867,
    -0.020959168672561646,
    0.02713616006076336,
    -0.008015887811779976,
    -0.0008817299385555089,
    0.014810577966272831,
    0.008030087687075138,
    -0.030899154022336006,
    -0.11007823795080185,
    -0.04458793252706528,
    0.010557684116065502,
    0.014625977724790573,
    -0.02568776160478592,
    -0.013582279905676842,
    0.009002786129713058,
    0.01749437302350998,
    -0.004217393696308136,
    0.010216884315013885,
    -0.01579037681221962,
    0.016372576355934143,
    -0.013972778804600239,
    0.002474346198141575,
    -0.03067195415496826,
    0.02448076382279396,
    -0.009428786113858223,
    0.007646688725799322,
    -0.0068692397326231,
    0.0020021970849484205,
    -0.010983683168888092,
    -0.007923588156700134,
    0.0009984360076487064,
    0.031239952892065048,
    -0.013589379377663136,
    0.00478539289906621,
    -0.03407995030283928,
    0.014895778149366379,
    0.002413996495306492,
    0.005300141870975494,
    0.004877692554146051,
    -0.024523362517356873,
    0.009066686034202576,
    -0.0068834396079182625,
    0.022052567452192307,
    -0.0036316446494311094,
    -0.02693735994398594,
    -0.021328367292881012,
    0.032858751714229584,
    -0.014654378406703472,
    0.015463776886463165,
    -0.005562841892242432,
    -0.006975739728659391,
    -0.015818776562809944,
    0.0066704400815069675,
    0.00026292147231288254,
    -0.00389789417386055,
    0.02663915976881981,
    0.024409763514995575,
    -0.013681679964065552,
    -0.02448076382279396,
    -0.047995928674936295,
    -0.013603579252958298,
    -0.008235987275838852,
    0.04475833475589752,
    0.006794689688831568,
    -0.0035251446533948183,
    0.010536383837461472,
    -0.023713964968919754,
    -0.029365556314587593,
    0.022350765764713287,
    -0.02003617025911808,
    -0.0011457607615739107,
    0.02269156649708748,
    0.00991868507117033,
    0.02523336187005043,
    -0.00676983967423439,
    -0.007419488858431578,
    0.029393956065177917,
    -0.008086888119578362,
    -0.03586914762854576,
    0.01828957349061966,
    -0.004618543200194836,
    0.006074041128158569,
    -0.011807282455265522,
    0.004380693659186363,
    0.0027033209335058928,
    -0.0003507838409859687,
    0.021825367584824562,
    -0.020163970068097115,
    -0.01813337206840515,
    -0.005932040978223085,
    -0.0025471211411058903,
    -0.018701372668147087,
    0.018119173124432564,
    0.021413568407297134,
    0.013362180441617966,
    0.0040824939496815205,
    0.03459114953875542,
    -0.029365556314587593,
    0.0011883607367053628,
    0.0038197943940758705,
    0.042599935084581375,
    -0.026213161647319794,
    0.00026957772206515074,
    0.0034363949671387672,
    -0.014128979295492172,
    -0.02303236536681652,
    -0.01278708130121231,
    0.01331248041242361,
    -0.03231915086507797,
    -0.012013182044029236,
    -0.06594470143318176,
    0.009095086716115475,
    -0.00026425273972563446,
    -0.04262833669781685,
    0.006056291051208973,
    -0.03461954742670059,
    0.02213776670396328,
    -0.013156279921531677,
    0.007888088002800941,
    0.01329118013381958,
    -0.010870084166526794,
    -0.005431491881608963,
    -0.014022478833794594,
    -0.021910566836595535,
    -0.007845488376915455,
    -0.033653948456048965,
    0.0212857685983181,
    -0.0010570109589025378,
    0.024452364072203636,
    -0.0064609902910888195,
    0.01259538158774376,
    0.014221278950572014,
    0.02124316804111004,
    0.01698317378759384,
    -0.06628549844026566,
    -0.0014244354097172618,
    -0.03231915086507797,
    0.039390742778778076,
    0.009748285636305809,
    -0.04600793123245239,
    0.006034990772604942,
    -0.024210963398218155,
    -0.024849962443113327,
    0.007568588480353355,
    0.03567034751176834,
    0.017196174710989,
    0.032205551862716675,
    0.011402582749724388,
    0.03018915466964245,
    0.003851744346320629,
    -0.03646554425358772,
    -0.036806344985961914,
    0.020859768614172935,
    0.026908960193395615,
    -0.02519076317548752,
    -0.0032624450977891684,
    0.00993998534977436,
    0.00939328595995903,
    0.02513396181166172,
    0.01539277657866478,
    0.033057551831007004,
    0.0046114432625472546,
    -0.012716080993413925,
    -0.02263476699590683,
    -0.011636883020401001,
    -0.018218573182821274,
    -0.0033547449856996536,
    -0.013610679656267166,
    -0.005942691117525101,
    0.00028222458786331117,
    0.03981674090027809,
    0.010905583389103413,
    -0.00575809134170413,
    -0.01079198345541954,
    -0.011679482646286488,
    -0.020675169304013252,
    -0.03862394392490387,
    -0.011509083211421967,
    -0.01436327863484621,
    0.0004279962449800223,
    -0.04685993120074272,
    0.0069331396371126175,
    0.022166166454553604,
    0.04086753726005554,
    0.043395135551691055,
    -0.019666969776153564,
    -0.020249169319868088,
    -0.0015877351397648454,
    -0.022549565881490707,
    0.013965679332613945,
    0.010458284057676792,
    -0.009428786113858223,
    -0.00268557108938694,
    -0.008832386694848537,
    0.010962383821606636,
    0.0032571200281381607,
    -0.007738988380879164,
    -0.010671284049749374,
    -0.01598917692899704,
    0.022805165499448776,
    0.018658772110939026,
    0.003368944860994816,
    -0.008001687936484814,
    0.001307285507209599,
    0.015264976769685745,
    -0.00294827064499259,
    -0.00027157459408044815,
    -0.0140153793618083,
    0.0006855927058495581,
    -0.012346881441771984,
    0.01197058241814375,
    -0.017820972949266434,
    0.003876594128087163,
    -0.009421685710549355,
    -0.0025542210787534714,
    0.0009682610398158431,
    -0.022819366306066513,
    -0.007462088949978352,
    0.027491159737110138,
    0.011523283086717129,
    0.0010809734230861068,
    -0.017224574461579323,
    -0.019524971023201942,
    0.029422355815768242,
    -0.002531146164983511,
    0.020760368555784225,
    0.02209516614675522,
    -0.004994842689484358,
    -0.009797985665500164,
    0.0028293458744883537,
    -0.0021335468627512455,
    0.00713193928822875,
    0.044644732028245926,
    -0.009343585930764675,
    0.0009021423757076263,
    0.027292359620332718,
    0.0223365668207407,
    0.0003818463010247797,
    0.011580082587897778,
    -0.014668578281998634,
    -0.011835682205855846,
    -0.007391089107841253,
    -0.028911156579852104,
    -0.027050958946347237,
    -0.011551682837307453,
    0.013653279282152653,
    0.011381283402442932,
    -0.0030565455090254545,
    -0.00888918712735176,
    0.1099078357219696,
    0.006681090220808983,
    -0.016230575740337372,
    0.0073555889539420605,
    0.023657165467739105,
    0.023500964045524597,
    -0.017948772758245468,
    0.016017576679587364,
    -0.012055781669914722,
    -0.026071161031723022,
    -0.005754541605710983,
    -0.020660968497395515,
    0.006130840629339218,
    -0.03302915021777153,
    -0.006748539861291647,
    -0.008001687936484814,
    -0.020121369510889053,
    0.032063551247119904,
    -0.004810242913663387,
    -0.020717769861221313,
    0.04291233420372009,
    0.00371684436686337,
    -0.003823344362899661,
    -0.008129487745463848,
    -0.02622736059129238,
    0.0014918852830305696,
    0.03342675045132637,
    0.0055060419254004955,
    0.018104972317814827,
    -0.03351195156574249,
    0.020320169627666473,
    -0.004043444059789181,
    -0.020476369187235832,
    -0.018076572567224503,
    -0.014320679008960724,
    -0.008115287870168686,
    0.008037188090384007,
    -0.0032074202317744493,
    0.028357356786727905,
    0.031665951013565063,
    -0.008037188090384007,
    0.006681090220808983,
    -0.010060684755444527,
    -0.02999035455286503,
    -0.012361081317067146,
    -0.0017909723101183772,
    -0.006979289464652538,
    0.019950971007347107,
    -0.049046725034713745
  ]
}
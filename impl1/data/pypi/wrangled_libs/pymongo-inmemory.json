{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.9",
    "topic :: database :: database engines/servers",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "[ [pypi](https://pypi.org/project/pymongo-inmemory/) ][ [github](https://github.com/kaizendorks/pymongo_inmemory) ][ [beta docs](https://kaizendorks.github.io/pymongo_inmemory/)]\n\n# pymongo_inmemory\n\na mongo mocking library with an ephemeral mongodb running in memory.\n\n## what's new?\n\n### v0.4.0\n\n- tooling enhancements. [[pr #90](https://github.com/kaizendorks/pymongo_inmemory/pull/90)]\n- configuration for data directory. [[pr #90](https://github.com/kaizendorks/pymongo_inmemory/pull/91)]\n- configuration for data directory. [[pr #90](https://github.com/kaizendorks/pymongo_inmemory/pull/94)]\n\n### v0.3.1\n\n- development version upped to python 3.9\n- update to build system. contribution by [@pbsds](https://github.com/pbsds)\n- coercing boolean configs correctly. issue [#82](https://github.com/kaizendorks/pymongo_inmemory/issues/82)\n\n## installation\n\n```bash\npip install pymongo-inmemory\n```\n\n## usage\n\n### configure\n\nthere are several ways you can configure `pymongo_inmemory`.\n\n1. insert a new section titled `pymongo_inmemory` to your project's `setup.cfg`\n   version you want to spin up:\n   ```ini\n   [pymongo_inmemory]\n   operating_system = ubuntu\n   os_version = 18\n   mongod_port = 27019\n   ```\n2. define an `all_caps` environment variables with prefix `pymongoim__` (attention to trailing double\n   underscores.) for instance, to override the port, set up an environment variable\n   `pymongoim__mongod_port`.\n\n### import and use\n\n`pymongo_inmemory` wraps the client class `mongoclient` that comes from `pymongo` and configures with an ephemeral mongodb server.\nyou can import this `mongoclient` from `pymongo_inmemory` instead of `pymongo` and use it to perform tests:\n\n```python\nfrom pymongo_inmemory import mongoclient\n\nclient = mongoclient()  # no need to provide host\ndb = client['testdb']\ncollection = db['test-collection']\n# etc., etc.\nclient.close()\n\n# also usable with context manager\nwith mongoclient() as client:\n    # do stuff\n```\n\n## configuration\n\n|         | config parameter     | description                                                                                                | default                                                                                                                    |\n| ------- | -------------------- | ---------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n|         | `mongo_version`      | which mongod version to download and use.                                                                  | latest for the os                                                                                                          |\n|         | `mongod_port`        | override port preference.                                                                                  | automatically picked between `27017` and `28000` after testing availability                                                |\n|         | `operating_system`   | this makes sense for linux setting, where there are several flavours                                       | automatically determined (generic for linux)\\*                                                                             |\n|         | `os_version`         | if an operating system has several versions use this parameter to select one                               | latest version of the os will be selected from the list                                                                    |\n|         | `download_url`       | if set, it won't attempt to determine which mongodb to download. however there won't be a fallback either. | automatically determined from given parameters and using [internal url bank](pymongo_inmemory/downloader/_patterns.py)\\*\\* |\n|         | `ignore_cache`       | even if there is a downloaded version in the cache, download it again.                                     | false                                                                                                                      |\n|         | `use_local_mongod`   | if set, it will try to use a local mongod instance instead of downloading one.                             | false                                                                                                                      |\n|         | `download_folder`    | override the default download location.                                                                    | pymongo_inmemory/.cache/download                                                                                           |\n|         | `extract_folder`     | override the default extraction location.                                                                  | pymongo_inmemory/.cache/extract                                                                                            |\n| **new** | `mongod_data_folder` | provide a data folder to be used by mongod.                                                                | a `temporarydirectory` will be used                                                                                        |\n| **new** | `mongo_client_host`  | hostname or connection string                                                                              |                                                                                                                            |\n| **new** | `dbname`             | provide a database name to connect                                                                         | 'pimtest'                                                                                                                  |\n|         |                      |                                                                                                            |\n\n- \\***_note 1:_** generic linux version offering for mongodb ends with version **4.0.23**. if the operating system is just `linux` and if selected mongodb version is higher, it will default to `4.0.23`.\n- **\\***note 2:\\*\\*\\* url bank is filled with urls collected from [release list](https://www.mongodb.com/download-center/community/releases) and [archived released list](https://www.mongodb.com/download-center/community/releases/archive), so if a version is not in the bank you can use the same list to provide an official download link.\n\n## available mongodb versions\n\nthere is an internal [url bank](pymongo_inmemory/downloader/_patterns.py) that is filled with urls collected from\n\n- [release list](https://www.mongodb.com/download-center/community/releases) and\n- [archived released list](https://www.mongodb.com/download-center/community/releases/archive)\n\nbelow table is a summary of possible setting for `operating_system`, `os_version` and available mongodb versions for\nthem to set as `mongo_version` at `major.minor` level.\n\nnote that, not all `major.minor.patch` level is available for all os versions. for exact patch level range, either see\nrelease pages of mongodb or have a look at the internal [url bank](pymongo_inmemory/downloader/_patterns.py).\n\n|         | `operating_system` | `os_version` | mongodb versions (`major.minor`)                      |\n| ------- | ------------------ | ------------ | ----------------------------------------------------- |\n|         | amazon             | 1            | 3.6, 3.2, 3.4, 4.2, 5.0, 4.0, 3.0, 4.4                |\n|         | amazon             | 2            | 7.0, 6.0, 3.6, 5.0, 4.2, 4.0, 4.4                     |\n| **new** | amazon             | 2023         | 7.0                                                   |\n| **new** | amazon             | 2023-arm     | 7.0                                                   |\n|         | debian             | 7            | 3.6, 3.0, 3.2, 3.4                                    |\n|         | debian             | 8            | 3.6, 4.0, 3.2, 3.4                                    |\n|         | debian             | 9            | 3.6, 5.0, 4.2, 4.0, 4.4                               |\n|         | debian             | 10           | 4.2, 5.0, 6.0, 4.4                                    |\n|         | debian             | 11           | 7.0, 6.0, 5.0                                         |\n|         | rhel               | 5            | 3.0, 3.2                                              |\n|         | rhel               | 6            | 3.6, 3.2, 3.4, 4.2, 4.0, 3.0, 4.4                     |\n|         | rhel               | 7            | 7.0, 6.0, 3.6, 3.2, 3.4, 4.2, 5.0, 4.0, 3.0, 4.4      |\n|         | rhel               | 8            | 7.0, 6.0, 3.6, 5.0, 4.2, 4.0, 4.4                     |\n|         | rhel               | 9            | 7.0, 6.0                                              |\n| **new** | rhel-arm           | 8            | 5.0, 7.0, 6.0, 4.4                                    |\n| **new** | rhel-arm           | 9            | 7.0, 6.0                                              |\n|         | suse               | 11           | 3.6, 3.0, 3.2, 3.4                                    |\n|         | suse               | 12           | 7.0, 6.0, 3.6, 3.2, 3.4, 4.2, 5.0, 4.0, 4.4           |\n|         | suse               | 15           | 7.0, 6.0, 5.0, 4.2, 4.4                               |\n|         | ubuntu             | 12           | 3.6, 3.0, 3.2, 3.4                                    |\n|         | ubuntu             | 14           | 3.6, 3.2, 3.4, 4.0, 3.0                               |\n|         | ubuntu             | 16           | 3.6, 3.2, 3.4, 4.2, 4.0, 4.4                          |\n|         | ubuntu             | 18           | 6.0, 3.6, 5.0, 4.2, 4.0, 4.4                          |\n|         | ubuntu             | 20           | 5.0, 7.0, 6.0, 4.4                                    |\n|         | ubuntu             | 22           | 7.0, 6.0                                              |\n| **new** | ubuntu-arm         | 20           | 5.0, 7.0, 6.0, 4.4                                    |\n| **new** | ubuntu-arm         | 22           | 7.0, 6.0                                              |\n|         | linux              | generic      | 3.6, 3.2, 3.4, 2.6, 4.0, 3.0                          |\n|         | osx                | generic      | 7.0, 6.0, 3.6, 3.2, 3.4, 4.2, 5.0, 2.6, 4.0, 3.0, 4.4 |\n| **new** | macos              | arm          | 7.0, 6.0                                              |\n|         | sunos              | 5            | 3.0, 2.6, 3.2, 3.4                                    |\n|         | windows            | generic      | 7.0, 6.0, 3.6, 3.2, 3.4, 4.2, 5.0, 2.6, 4.0, 3.0, 4.4 |\n\n\\***_note:_** no need to specify `generic`, as it will be chosen automatically since it's the only version for that os.\n\n### how do we determine which mongodb to download?\n\nthere are two (three if it's a linux flavour) bits of information we need to determine a mongodb:\noperating system and mongodb version.\n\n**note:** you can always set `download_url` to provide an exact url to download from.\n\n#### operating system detection\n\npython has limited tools in its standard library to determine the exact version of the operating\nsystem and operating system version. `pymongo_inmemory` basically reads output of [`platform.system()`](<platform.system()>)\nto determine if underlying os is linux, macos or windows.\n\nfor windows and macos, it will download only one flavour of os for a particular mongodb version (64bit and, for windows, windows server version if there is one.)\nhowever, linux has many flavours. up to mongodb `4.0.23`, a mongodb for a generic linux os can still be downloaded, but for later\nversions of mongodb, there are no such builds, hence you will need to explicitly set `operating_system`\nparameter if you want to use mongodb versions higher than that.\n\noperating system detection behaviour of `pymongo_inmemory` might change in the future, if there is a demand for more **magic**,\nbut for now we are keeping things simple.\n\n#### deciding mongodb version\n\n- if no version is provided, highest version of mongodb for the operating system is selected.\n- if only a **major** version is given, like `4`, then highest `minor.patch` version is selected, like 4.4.4.\n- if only **major.minor** version is given, like `4.0`, then highest `patch` version is selected, like 4.0.23.\n- if exact **major.minor.patch** version is given, like `4.0.22`, then that version is selected.\n- if patch version is not found. like `4.0.50`, highest `patch` version is selected, like `4.0.23`.\n- if minor version is not found. like `3.90.50`, highest `minor.patch` version is selected, like `3.6.22`.\n- if major version is not found. like `1.0.0`, highest `major.minor.patch` version is selected, like `4.4.4`.\n\n## supported python versions\n\nsince few development tools only support python version 3.9 and above, all testing and tooling done\nfrom that version up.\n\nthis also limits the minimum python version of tested features. however there shouldn't\nbe a hard limitation to use python 3.5. we recommend upgrading older python versions than that.\n\n## development\n\nproject is set up to develop with [poetry](https://python-poetry.org/). we rely on\n[pyenv](https://github.com/pyenv/pyenv#installation) to maintain the minimum supported\npython version.\n\nafter installing `pyenv`, `poetry`, and cloning the repo, create the shell and install\nall package requirements:\n\n```bash\npyenv install --skip-existing\npoetry install --no-root\npoetry shell\n```\n\nrun the tests:\n\n```bash\npytest\n```\n\nif on nix systems you can run further tests:\n\n```bash\nbash tests/integrity/test_integrity.sh\n```\n\n### adding a new mongodb version\n\nfollow the guide [here](pymongo_inmemory/downloader/readme.md).\n\n### see how you can wet your feet\n\ncheck out [good first issues](https://github.com/kaizendorks/pymongo_inmemory/contribute).\n",
  "docs_url": null,
  "keywords": "mongodb,testing,pymongo",
  "license": "mit",
  "name": "pymongo_inmemory",
  "package_url": "https://pypi.org/project/pymongo_inmemory/",
  "project_url": "https://pypi.org/project/pymongo_inmemory/",
  "project_urls": {
    "Bug Reports": "https://github.com/kaizendorks/pymongo_inmemory/issues",
    "Homepage": "https://github.com/kaizendorks/pymongo_inmemory",
    "Repository": "https://github.com/kaizendorks/pymongo_inmemory"
  },
  "release_url": "https://pypi.org/project/pymongo_inmemory/0.4.0/",
  "requires_dist": [
    "pymongo"
  ],
  "requires_python": ">=3.9,<4.0",
  "summary": "a mongo mocking library with an ephemeral mongodb running in memory.",
  "version": "0.4.0",
  "releases": [],
  "developers": [
    "ekarademir@gmail.com",
    "ertugrul_karademir",
    "kaizen_dorks",
    "kaizendorks@gmail.com"
  ],
  "kwds": "pymongo_inmemory pymongoim__mongod_port mongodb mongod_data_folder use_local_mongod",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pymongo_inmemory",
  "homepage": "https://github.com/kaizendorks/pymongo_inmemory",
  "release_count": 22,
  "dependency_ids": [
    "pypi_pymongo"
  ]
}
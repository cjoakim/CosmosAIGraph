{
  "classifiers": [],
  "description": "logmatic-python\n===============\n*link to the logmatic.io documentation: http://doc.logmatic.io/docs/python*\n\npython helpers to send logs to logmatic.io.\n\nit mainly contains a proper json formatter and a socket handler that\nstreams logs directly to logmatic.io - so no need to use a log shipper\nif you don't wan't to.\n\npre-requirements\n================\n\nto install this library, use the following command:\n\n::\n\n    pip install logmatic-python\n\nusage\n=====\n\nuse the json formatter\n----------------------\n\nto use the json formatter, simply associate it to any handler such as\nthe streamhandler here.\n\n.. code:: python\n\n    import logmatic\n    import logging\n\n    logger = logging.getlogger()\n\n    handler = logging.streamhandler()\n    handler.setformatter(logmatic.jsonformatter(extra={\"hostname\":socket.gethostname()}))\n\n    logger.addhandler(handler)\n    logger.setlevel(logging.info)\n\nonce this setup is done, any child logger will use this configuration\n(eg ``logging.getlogger(\"my_logger\")``). as you can see, you can\nassociate any extra information to the base formatter such as the\nhostname here or any environment variable you'll need depending of your\nusage.\n\n.. code:: python\n\n    test_logger = logging.getlogger(\"test\")\n    test_logger.info(\"classic message\", extra={\"special\": \"value\", \"run\": 12})\n\nreturns the following format:\n\n.. code:: javascript\n\n    {\n      \"asctime\": \"2016-02-16t09:51:31z\",\n      \"name\": \"test\", \"processname\": \"mainprocess\",\n      \"filename\": \"write_in_console.py\",\n      \"funcname\": \"<module>\",\n      \"levelname\": \"info\",\n      \"lineno\": 20,\n      \"module\": \"write_in_console\",\n      \"threadname\": \"mainthread\",\n      \"message\": \"classic message\",\n      \"special\": \"value\",\n      \"run\": 12,\n      \"timestamp\": \"2016-02-16t09:51:31z\",\n      \"hostname\": \"<your_hostname>\"\n    }\n\nlet's take some time here to understand what we have:\n\n-  the default format is \"%(asctime) %(name) %(processname) %(filename)\n   %(funcname) %(levelname) %(lineno) %(module) %(threadname)\n   %(message)\". so that's why all these attributes are present on all\n   the log events. if you need less, you can change the format when\n   defining the formatter: ``logmatic.jsonformatter(fmt=\"\",...)``\n-  the ``hostname`` attribute here is added all the time as it was\n   defined on the root logger.\n-  the ``special`` and ``run`` attributes were added specifically to\n   this log event.\n\ngood to know, an traceback from an exception is totally wrapped into the\njson event. that's suppress the handling of multiline formatting:\n\n.. code:: javascript\n\n    {\n      ...\n      \"exc_info\": \"traceback (most recent call last):\\n  file \\\"test/write_in_console.py\\\", line 24, in exception_test\\n    raise exception('test')\\nexception: test\",\n      ...\n    }\n\nstream log straight to logmatic.io\n----------------------------------\n\nthe logmatichandler can be coupled to the jsonformatter as follow:\n\n.. code:: python\n\n    import logmatic\n    import logging\n\n    logger = logging.getlogger()\n\n    handler = logmatic.logmatichandler(\"<your_api_key>\")\n    handler.setformatter(logmatic.jsonformatter(extra={\"hostname\":socket.gethostname()}))\n\n    logger.addhandler(handler)\n    logger.setlevel(logging.info)\n\ndon't forget to replace by the one provided on your logmatic.io's\nplatform.\n\nwith this configuration, any log coming from your python's application\nwill be sent to your platform and will fulfill the same format as\ndescribed in the previous section.\n\nplease contact us if you want anything more to be added in this toolset!\n",
  "docs_url": null,
  "keywords": "logmatic",
  "license": "mit",
  "name": "logmatic-python",
  "package_url": "https://pypi.org/project/logmatic-python/",
  "project_url": "https://pypi.org/project/logmatic-python/",
  "project_urls": {
    "Download": "https://github.com/logmatic/logmatic-python/tarball/0.1.6",
    "Homepage": "https://github.com/logmatic/logmatic-python"
  },
  "release_url": "https://pypi.org/project/logmatic-python/0.1.7/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python plugin to send logs to logmatic.io",
  "version": "0.1.7",
  "releases": [],
  "developers": [
    "logmatic",
    "support@logmatic.io"
  ],
  "kwds": "logmatic logging logmatichandler test_logger logs",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_logmatic_python",
  "homepage": "https://github.com/logmatic/logmatic-python",
  "release_count": 17,
  "dependency_ids": []
}
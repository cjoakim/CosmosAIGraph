{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing"
  ],
  "description": "===================================\npytest-random-order\n===================================\n\n.. image:: https://img.shields.io/badge/python-3.7%2c%203.8%2c%203.9%2c%203.10-blue.svg\n    :target: https://github.com/jbasko/pytest-random-order\n\n**pytest-random-order** is a `pytest <http://pytest.org>`_ plugin that randomises the order of tests.\nthis can be useful to detect a test that passes just because it happens to run after an unrelated test that\nleaves the system in a *favourable* state.\n\nthe plugin allows user to control the level of randomness they want to introduce and to disable\nreordering on subsets of tests. tests can be rerun in a specific order by passing a seed value reported\nin a previous test run.\n\n.. image:: https://raw.githubusercontent.com/jbasko/pytest-random-order/master/docs/pytest-random-order-design.png\n\n-----------\nquick start\n-----------\n\ninstallation:\n\n::\n\n    $ pip install pytest-random-order\n\nfrom v1.0.0 onwards, **this plugin no longer randomises tests by default**. to enable randomisation, you have to run\npytest in one of the following ways:\n\n::\n\n    pytest --random-order\n    pytest --random-order-bucket=<bucket_type>\n    pytest --random-order-seed=<seed>\n\nif you want to always randomise the order of tests, configure pytest. there are many ways to do it,\nmy favourite one is to add ``addopts = --random-order`` in your project-specific configuration file\nunder the pytest options (usually ``[pytest]`` or ``[tool:pytest]`` section).\n\nalternatively, you can set environment variable ``pytest_addopts``:\n\n::\n\n    export pytest_addopts=\"--random-order\"\n\n\nto randomise the order of tests within modules and shuffle the order of\ntest modules (which is the default behaviour of the plugin), run pytest as follows:\n\n::\n\n    $ pytest --random-order\n\nto change the scope of re-ordering, run pytest with ``--random-order-bucket=<bucket-type>`` option\nwhere ``<bucket-type>`` can be ``class``, ``module``, ``package``, ``global``:\n\n::\n\n    $ pytest -v --random-order-bucket=package\n\nto disable reordering of tests in a module or class, use pytest marker notation:\n\n::\n\n    pytestmark = pytest.mark.random_order(disabled=true)\n\nto rerun tests in a particular order:\n\n::\n\n    $ pytest -v --random-order-seed=<seed>\n\nall runs in which the randomisation is enabled report seed so if you encounter a specific ordering of tests\nthat causes problems you can look up the value in the test report and repeat the run with the above command.\n\n::\n\n    platform darwin -- python 3.5.6, pytest-3.9.1, py-1.7.0, pluggy-0.8.0\n    using --random-order-bucket=module\n    using --random-order-seed=383013\n\n------\ndesign\n------\n\n.. image:: https://raw.githubusercontent.com/jbasko/pytest-random-order/master/docs/pytest-random-order-design.png\n\nthe plugin groups tests in buckets, shuffles them within buckets and then shuffles the buckets.\n\ngiven the test suite above, here are two of a few possible generated orders of tests:\n\n.. image:: https://raw.githubusercontent.com/jbasko/pytest-random-order/master/docs/pytest-random-order-example1.png\n\n.. image:: https://raw.githubusercontent.com/jbasko/pytest-random-order/master/docs/pytest-random-order-example2.png\n\nyou can choose from a few types of buckets:\n\nclass\n    tests will be shuffled within a class and classes will be shuffled,\n    but tests from one class will never have tests from other classes or modules run in-between them.\n\nmodule\n    same as above at module level. this is the setting applied if you run pytest with just ``--random-order`` flag\n    or ``--random-order-seed=<seed>``.\n\npackage\n    same as above at package level. note that modules (and hence tests inside those modules) that\n    belong to package ``x.y.z`` do not belong to package ``x.y``, so they will fall in different buckets\n    when randomising with ``package`` bucket type.\n\nparent\n    if you are using custom test items which don't belong to any module, you can use this to\n    limit reordering of test items to within the ``parent`` to which they belong. for normal test\n    functions the parent is the module in which they are declared.\n\ngrandparent\n    similar to *parent* above, but use the parent of the parent of the test item as the bucket key instead.\n\nglobal\n    all tests fall in the same bucket, full randomness, tests probably take longer to run.\n\nnone (deprecated)\n    disable shuffling. *deprecated since 1.0.4 because this plugin no longer shuffles tests by default\n    so there is nothing to disable.*\n\n\nif you have three buckets of tests ``a``, ``b``, and ``c`` with three tests ``1`` and ``2``, and ``3`` in each of them,\nthen one of many potential orderings that non-global randomisation can produce could be:\n\n::\n\n    c2, c1, c3, a3, a1, a2, b3, b2, b1\n\nas you can see, all c tests are executed \"next\" to each other and so are tests in buckets a and b.\ntests from any bucket x are guaranteed to not be interspersed with tests from another bucket y.\nfor example, if you choose bucket type ``module`` then bucket x contains all tests that are in this module.\n\nby default, when randomisation is enabled, your tests will be randomised at ``module`` level which means that\ntests within a single module x will be executed in no particular order, but tests from\nother modules will not be mixed in between tests of module x.\n\nthe randomised reordering can be disabled per module or per class irrespective of the chosen bucket type.\n\n--------------\nusage and tips\n--------------\n\nbucket type choice\n++++++++++++++++++\n\nit is best to start with smallest bucket type (``class`` or ``module`` depending on whether you have class-based tests),\nand switch to a larger bucket type when you are sure your tests handle that.\n\nif your tests rely on fixtures that are module or session-scoped, more randomised order of tests will mean slower tests.\nyou probably don't want to randomise at ``global`` or ``package`` level while you are coding and need a quick confirmation\nthat nothing big is broken.\n\ndisable shuffling in module or class\n++++++++++++++++++++++++++++++++++++\n\nyou can disable shuffling of tests within a single module or class by marking the module or class\nwith ``random_order`` marker and passing ``disabled=true`` to it:\n\n::\n\n    pytestmark = pytest.mark.random_order(disabled=true)\n\n    def test_number_one():\n        assert true\n\n    def test_number_two():\n        assert true\n\n::\n\n    class mytest(testcase):\n        pytestmark = pytest.mark.random_order(disabled=true)\n\n        def test_number_one(self):\n            self.asserttrue(true)\n\n\nno matter what will be the bucket type for the test run, ``test_number_one`` will always run\nbefore ``test_number_two``.\n\n\nrerun tests in the same order (same seed)\n+++++++++++++++++++++++++++++++++++++++++\n\nif you discover a failing test because you reordered tests, you will probably want to be able to rerun the tests\nin the same failing order. to allow reproducing test order, the plugin reports the seed value it used with pseudo random number\ngenerator:\n\n::\n\n    ============================= test session starts ==============================\n    ..\n    using --random-order-bucket=module\n    using --random-order-seed=24775\n    ...\n\nyou can now use the ``--random-order-seed=...`` bit as an argument to the next run to produce the same order:\n\n::\n\n    $ pytest -v --random-order-seed=24775\n\n\nrun last failed tests first\n+++++++++++++++++++++++++++\n\nsince v0.8.0 pytest cache plugin's ``--failed-first`` flag is supported -- tests that failed in the last run\nwill be run before tests that passed irrespective of shuffling bucket type.\n\n\ndisable the plugin\n+++++++++++++++++++++++++++++++++++\n\nif the plugin misbehaves or you just want to assure yourself that it is not the plugin making your tests fail or\npass undeservedly, you can disable it:\n\n::\n\n    $ pytest -p no:random_order\n\nnote that randomisation is disabled by default. by passing ``-p no:random_order`` you are stopping the plugin\nfrom being registered so its hooks won't be registered and its command line options won't appear in ``--help``.\n\n--------------\nchangelog\n--------------\n\nv1.1.0 (2022-12-03)\n+++++++++++++++++++\n\n * fixes xdist support (thanks @matejsp)\n\n\nv1.0.4 (2018-11-30)\n+++++++++++++++++++\n\n* fixes issues with doctests reported in #36 - ``class``, ``package`` and ``module`` didn't work\n  because ``doctestitem`` doesn't have ``cls`` or ``module`` attributes. thanks @tobywf.\n* deprecate ``none`` bucket type.\n* with tox, run tests of pytest-random-order with both pytest 3 and 4.\n\nv1.0.3 (2018-11-16)\n+++++++++++++++++++\n\n* fixes compatibility issues with pytest 4.0.0, works with pytest 3.0+ as before.\n* tests included in the source distribution.\n\nv1.0.0 (2018-10-20)\n+++++++++++++++++++\n\n* plugin no longer alters the test order by default. you will have to either 1) pass ``--random-order``,\n  or ``--random-order-bucket=<bucket>``, or ``--random-order-seed=<seed>``, or\n  2) edit your pytest configuration file and add one of these options\n  there under ``addopts``, or 3) specify these flags in environment variable ``pytest_addopts``.\n* python 3.5+ is required. if you want to use this plugin with python 2.7, use v0.8.0 which is stable and fine\n  if you are happy with it randomising the test order by default.\n* the name under which the plugin registers itself is changed from ``random-order`` (hyphen) to ``random_order``\n  (underscore). this addresses the issue of consistency when disabling or enabling this plugin via the standard\n  ``-p`` flag. previously, the plugin could be disabled by passing ``-p no:random-order`` yet re-enabled\n  only by passing ``-p pytest_random_order.plugin``. now they are ``-p no:random_order``\n  to disable and ``-p random_order.plugin`` to enable (the ``.plugin`` bit, i think, is required because\n  pytest probably thinks it's an unrelated thing to ``random_order`` and import it, yet without it it's the\n  same thing so doesn't import it).\n\n\nv0.8.0\n++++++\n\n* pytest cache plugin's ``--failed-first`` works now.\n\n-------\ncredits\n-------\n\n* the shuffle icon in the diagram is by artist `daniele de santis`_ and it was found on\n  `iconarchive`_.\n\n* the diagram is drawn with `sketchboard.io`_\n\n.. _daniele de santis: https://www.danieledesantis.net/\n.. _iconarchive: http://www.iconarchive.com/artist/danieledesantis.html\n.. _sketchboard.io: https://sketchboard.io/\n",
  "docs_url": "https://pythonhosted.org/pytest-random-order/",
  "keywords": "pytest random test order shuffle",
  "license": "mit",
  "name": "pytest-random-order",
  "package_url": "https://pypi.org/project/pytest-random-order/",
  "project_url": "https://pypi.org/project/pytest-random-order/",
  "project_urls": {
    "Homepage": "https://github.com/jbasko/pytest-random-order"
  },
  "release_url": "https://pypi.org/project/pytest-random-order/1.1.0/",
  "requires_dist": [
    "pytest (>=3.0.0)"
  ],
  "requires_python": ">=3.5.0",
  "summary": "randomise the order in which pytest tests are run with some control over the randomness",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "jazeps.basko@gmail.com",
    "jazeps_basko"
  ],
  "kwds": "pytest_random_order random_order pytest randomness randomises",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_random_order",
  "homepage": "https://github.com/jbasko/pytest-random-order",
  "release_count": 15,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
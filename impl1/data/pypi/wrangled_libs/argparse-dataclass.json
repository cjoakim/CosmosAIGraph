{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "``argparse_dataclass``\n======================\n\ndeclarative clis with ``argparse`` and ``dataclasses``.\n\n.. image:: https://travis-ci.org/mivade/argparse_dataclass.svg?branch=master\n    :target: https://travis-ci.org/mivade/argparse_dataclass\n\n.. image:: https://img.shields.io/pypi/v/argparse_dataclass\n    :alt: pypi\n\nfeatures\n--------\n\nfeatures marked with a \u2713 are currently implemented; features marked with a \u2298\nare not yet implemented.\n\n- [\u2713] positional arguments\n- [\u2713] boolean flags\n- [\u2713] integer, string, float, and other simple types as arguments\n- [\u2713] default values\n- [\u2713] arguments with a finite set of choices\n- [\u2298] subcommands\n- [\u2298] mutually exclusive groups\n\nexamples\n--------\nusing dataclass decorator\n\n.. code-block:: pycon\n\n    >>> from argparse_dataclass import dataclass\n    >>> @dataclass\n    ... class options:\n    ...     x: int = 42\n    ...     y: bool = false\n    ...\n    >>> print(options.parse_args(['--y']))\n    options(x=42, y=true)\n\na simple parser with flags:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     verbose: bool\n    ...     other_flag: bool\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([]))\n    options(verbose=false, other_flag=false)\n    >>> print(parser.parse_args([\"--verbose\", \"--other-flag\"]))\n    options(verbose=true, other_flag=true)\n\nusing defaults:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     x: int = 1\n    ...     y: int = field(default=2)\n    ...     z: float = field(default_factory=lambda: 3.14)\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([]))\n    options(x=1, y=2, z=3.14)\n\nenabling choices for an option:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> from typing import literal\n    >>> @dataclass\n    ... class options:\n    ...     small_integer: literal[1, 2, 3]\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([\"--small-integer\", \"3\"]))\n    options(small_integer=3)\n\nusing different flag names and positional arguments:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     x: int = field(metadata=dict(args=[\"-x\", \"--long-name\"]))\n    ...     positional: str = field(metadata=dict(args=[\"positional\"]))\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([\"-x\", \"0\", \"positional\"]))\n    options(x=0, positional='positional')\n    >>> print(parser.parse_args([\"--long-name\", 0, \"positional\"]))\n    options(x=0, positional='positional')\n\nusing a custom type converter:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     name: str = field(metadata=dict(type=str.title))\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([\"--name\", \"john doe\"]))\n    options(name='john doe')\n\nconfiguring a flag to have a default value of true:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     verbose: bool = true\n    ...     logging: bool = field(default=true, metadata=dict(args=[\"--logging-off\"]))\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([]))\n    options(verbose=true, logging=true)\n    >>> print(parser.parse_args([\"--no-verbose\", \"--logging-off\"]))\n    options(verbose=false, logging=false)\n\n\nconfiguring a flag so it is required to set:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     logging: bool = field(metadata=dict(required=true))\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([\"--logging\"]))\n    options(logging=true)\n    >>> print(parser.parse_args([\"--no-logging\"]))\n    options(logging=false)\n\nparsing only the known arguments:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     name: str\n    ...     logging: bool = false\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_known_args([\"--name\", \"john\", \"--other-arg\", \"foo\"]))\n    (options(name='john', logging=false), ['--other-arg', 'foo'])\n\n\nconfiguring a field with the optional generic type:\n\n.. code-block:: pycon\n\n    >>> from dataclasses import dataclass, field\n    >>> from typing import optional\n    >>> from argparse_dataclass import argumentparser\n    >>> @dataclass\n    ... class options:\n    ...     name: str\n    ...     id: optional[int] = none\n    ...\n    >>> parser = argumentparser(options)\n    >>> print(parser.parse_args([\"--name\", \"john\"]))\n    options(name='john', id=none)\n    >>> print(parser.parse_args([\"--name\", \"john\", \"--id\", \"1234\"]))\n    options(name='john', id=1234)\n\ncontributors\n------------\n\n* @adsharma\n* @asasine\n* @frank113\n* @jayvdb\n* @jcal-15\n* @mivade\n* @rafi-cohen\n\nlicense\n-------\n\nmit license\n\ncopyright (c) 2019-2023 argparse_dataclass contributors\n\npermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"software\"), to deal\nin the software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is\nfurnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in the\nsoftware.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "argparse-dataclass",
  "package_url": "https://pypi.org/project/argparse-dataclass/",
  "project_url": "https://pypi.org/project/argparse-dataclass/",
  "project_urls": {
    "Homepage": "https://github.com/mivade/argparse_dataclass"
  },
  "release_url": "https://pypi.org/project/argparse-dataclass/2.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "declarative clis with argparse and dataclasses",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "michael_v",
    "mike@depalatis.net"
  ],
  "kwds": "argparse_dataclass argparse parse_known_args argumentparser parse_args",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_argparse_dataclass",
  "homepage": "https://github.com/mivade/argparse_dataclass",
  "release_count": 8,
  "dependency_ids": []
}
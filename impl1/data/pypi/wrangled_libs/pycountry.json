{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "license :: other/proprietary license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: internationalization",
    "topic :: software development :: localization"
  ],
  "description": "pycountry\n=========\n\n.. image:g: https://travis-ci.org/flyingcircusio/pycountry.svg?branch=master\n\npycountry provides the iso databases for the standards:\n\n* `639-3 <https://en.wikipedia.org/wiki/iso_639-3>`_ languages\n* `3166 <https://en.wikipedia.org/wiki/iso_3166>`_ codes for representation of names of countries and their subdivisions\n* `3166-1 <https://en.wikipedia.org/wiki/iso_3166-1>`_ countries\n* `3166-3 <https://en.wikipedia.org/wiki/iso_3166-3>`_ deleted countries\n* `3166-2 <https://en.wikipedia.org/wiki/iso_3166-2>`_ subdivisions of countries\n* `4217 <https://en.wikipedia.org/wiki/iso_4217>`_ currencies\n* `15924 <https://en.wikipedia.org/wiki/iso_15924>`_ scripts\n\nthe package includes a copy from debian's `pkg-isocodes\n<https://salsa.debian.org/iso-codes-team/iso-codes>`_ and makes the data\naccessible through a python api.\n\ntranslation files for the various strings are included as well.\n\ndata update policy\n------------------\n\nno changes to the data will be accepted into pycountry. this is a pure wrapper\naround the iso standard using the `pkg-isocodes` database from debian *as is*.\nif you need changes to the political situation in the world, please talk to\nthe iso or debian people, not me.\n\ndonations / monetary support\n----------------------------\n\nthis is a small project that i maintain in my personal time. i am not\ninterested in personal financial gain. however, if you would like to support\nthe project then i would love if you would donate to `feminist frequency\n<https://feministfrequency.com/donate/>`_ instead. also, let the world know you\ndid so, so that others can follow your path.\n\ncontributions\n-------------\n\nthe code lives in a `git repository on github\n<https://github.com/flyingcircusio/pycountry>`_, and issues must be reported in there as well.\n\ncountries (iso 3166-1)\n----------------------\n\ncountries are accessible through a database object that is already configured\nupon import of pycountry and works as an iterable:\n\n.. code:: pycon\n\n  >>> import pycountry\n  >>> len(pycountry.countries)\n  249\n  >>> list(pycountry.countries)[0]\n  country(alpha_2='af', alpha_3='afg', name='afghanistan', numeric='004', official_name='islamic republic of afghanistan')\n\nspecific countries can be looked up by their various codes and provide the\ninformation included in the standard as attributes:\n\n.. code:: pycon\n\n  >>> germany = pycountry.countries.get(alpha_2='de')\n  >>> germany\n  country(alpha_2='de', alpha_3='deu', name='germany', numeric='276', official_name='federal republic of germany')\n  >>> germany.alpha_2\n  'de'\n  >>> germany.alpha_3\n  'deu'\n  >>> germany.numeric\n  '276'\n  >>> germany.name\n  'germany'\n  >>> germany.official_name\n  'federal republic of germany'\n\nthere's also a \"fuzzy\" search to help people discover \"proper\" countries for\nnames that might only actually be subdivisions. the fuzziness also includes\nnormalizing unicode accents. there's also a bit of prioritization included\nto prefer matches on country names before subdivision names and have countries\nwith more matches be listed before ones with fewer matches:\n\n.. code:: pycon\n\n  >>> pycountry.countries.search_fuzzy('england')\n  [country(alpha_2='gb', alpha_3='gbr', name='united kingdom', numeric='826', official_name='united kingdom of great britain and northern ireland')]\n\n  >>> pycountry.countries.search_fuzzy('cote')\n  [country(alpha_2='ci', alpha_3='civ', name=\"c\u00f4te d'ivoire\", numeric='384', official_name=\"republic of c\u00f4te d'ivoire\"),\n   country(alpha_2='fr', alpha_3='fra', name='france', numeric='250', official_name='french republic'),\n   country(alpha_2='hn', alpha_3='hnd', name='honduras', numeric='340', official_name='republic of honduras')]\n\nattributes for the country class can be accessed using the `__getattr__` method. if the requested attribute is a key for the country class, it will return the corresponding value. in the special cases of missing 'common_name' or 'official_name' attributes, `__getattr__` will return 'name'. here are some examples:\n\n.. code:: pycon\n\n  >>> aland = pycountry.countries.get(alpha_2='ax')\n\n  >>> print(aland)\n  country(alpha_2='ax', alpha_3='ala', flag='\ud83c\udde6\ud83c\uddfd', name='\u00e5land islands', numeric='248')\n\n  >>> aland.common_name\n  userwarning: country's common_name not found. country name provided instead.\n    warnings.warn(warning_message, userwarning)\n  '\u00e5land islands'\n\n  >>> aland.official_name\n  country's official_name not found. country name provided instead.\n    warnings.warn(warning_message, userwarning)\n  '\u00e5land islands'\n\n  >>> aland.flag\n  '\ud83c\udde6\ud83c\uddfd'\n\n  >>> aland.foo  # raises attributeerror\n\nhistoric countries (iso 3166-3)\n-------------------------------\n\nthe `historic_countries` database contains former countries that have been\nremoved from the standard and are now included in iso 3166-3, excluding\nexisting ones:\n\n.. code:: pycon\n\n >>> ussr = pycountry.historic_countries.get(alpha_3='sun')\n >>> ussr\n country(alpha_3='sun', alpha_4='suhh', withdrawal_date='1992-08-30', name='ussr, union of soviet socialist republics', numeric='810')\n >>> ussr.alpha_4\n 'suhh'\n >>> ussr.alpha_3\n 'sun'\n >>> ussr.name\n 'ussr, union of soviet socialist republics'\n >>> ussr.withdrawal_date\n '1992-08-30'\n\n\ncountry subdivisions (iso 3166-2)\n---------------------------------\n\nthe country subdivisions are a little more complex than the countries itself\nbecause they provide a nested and typed structure.\n\nall subdivisons can be accessed directly:\n\n.. code:: pycon\n\n  >>> len(pycountry.subdivisions)\n  4847\n  >>> list(pycountry.subdivisions)[0]\n  subdivision(code='ad-07', country_code='ad', name='andorra la vella', parent_code=none, type='parish')\n\nsubdivisions can be accessed using their unique code. the resulting object will provide at least\ntheir code, name and type:\n\n.. code:: pycon\n\n  >>> de_st = pycountry.subdivisions.get(code='de-st')\n  >>> de_st.code\n  'de-st'\n  >>> de_st.name\n  'sachsen-anhalt'\n  >>> de_st.type\n  'state'\n  >>> de_st.country\n  country(alpha_2='de', alpha_3='deu', name='germany', numeric='276', official_name='federal republic of germany')\n\nsome subdivisions specify another subdivision as a parent:\n\n.. code:: pycon\n\n  >>> al_br = pycountry.subdivisions.get(code='al-bu')\n  >>> al_br.code\n  'al-bu'\n  >>> al_br.name\n  'bulqiz\\xeb'\n  >>> al_br.type\n  'district'\n  >>> al_br.parent_code\n  'al-09'\n  >>> al_br.parent\n  subdivision(code='al-09', country_code='al', name='dib\\xebr', parent_code=none, type='county')\n  >>> al_br.parent.name\n  'dib\\xebr'\n\nthe divisions of a single country can be queried using the country_code index:\n\n.. code:: pycon\n\n  >>> len(pycountry.subdivisions.get(country_code='de'))\n  16\n\n  >>> len(pycountry.subdivisions.get(country_code='us'))\n  57\n\nsimilar to countries, the `search_fuzzy` method has been implemented for subdivisions to facilitate finding relevant subdivision entries. this method includes unicode normalization for accents and prioritizes matches on subdivision names. the search algorithm is designed to return more relevant matches first:\n\nthis method is especially useful for cases where the exact name or code of the subdivision is not known.\n\n.. code:: pycon\n\n  >>> pycountry.subdivisions.search_fuzzy('york')\n    [subdivision(code='gb-yor', country_code='gb', name='york', parent='gb-eng', parent_code='gb-gb-eng', type='unitary authority')\n    subdivision(code='gb-ery', country_code='gb', name='east riding of yorkshire', parent='gb-eng', parent_code='gb-gb-eng', type='unitary authority')\n    subdivision(code='gb-nyk', country_code='gb', name='north yorkshire', parent='gb-eng', parent_code='gb-gb-eng', type='two-tier county')\n    subdivision(code='us-ny', country_code='us', name='new york', parent_code=none, type='state')]\n\nscripts (iso 15924)\n-------------------\n\nscripts are available from a database similar to the countries:\n\n.. code:: pycon\n\n  >>> len(pycountry.scripts)\n  169\n  >>> list(pycountry.scripts)[0]\n  script(alpha_4='afak', name='afaka', numeric='439')\n\n  >>> latin = pycountry.scripts.get(name='latin')\n  >>> latin\n  script(alpha_4='latn', name='latin', numeric='215')\n  >>> latin.alpha4\n  'latn'\n  >>> latin.name\n  'latin'\n  >>> latin.numeric\n  '215'\n\n\ncurrencies (iso 4217)\n---------------------\n\nthe currencies database is, again, similar to the ones before:\n\n.. code:: pycon\n\n  >>> len(pycountry.currencies)\n  182\n  >>> list(pycountry.currencies)[0]\n  currency(alpha_3='aed', name='uae dirham', numeric='784')\n  >>> argentine_peso = pycountry.currencies.get(alpha_3='ars')\n  >>> argentine_peso\n  currency(alpha_3='ars', name='argentine peso', numeric='032')\n  >>> argentine_peso.alpha_3\n  'ars'\n  >>> argentine_peso.name\n  'argentine peso'\n  >>> argentine_peso.numeric\n  '032'\n\n\nlanguages (iso 639-3)\n---------------------\n\nthe languages database is similar too:\n\n.. code:: pycon\n\n  >>> len(pycountry.languages)\n  7874\n  >>> list(pycountry.languages)[0]\n  language(alpha_3='aaa', name='ghotuo', scope='i', type='l')\n\n  >>> aragonese = pycountry.languages.get(alpha_2='an')\n  >>> aragonese.alpha_2\n  'an'\n  >>> aragonese.alpha_3\n  'arg'\n  >>> aragonese.name\n  'aragonese'\n\n  >>> bengali = pycountry.languages.get(alpha_2='bn')\n  >>> bengali.name\n  'bengali'\n  >>> bengali.common_name\n  'bangla'\n\nlocales\n-------\n\nlocales are available in the `pycountry.locales_dir` subdirectory of this\npackage. the translation domains are called `isoxxx` according to the standard\nthey provide translations for. the directory is structured in a way compatible\nto python's gettext module.\n\nhere is an example translating language names:\n\n.. code:: pycon\n\n  >>> import gettext\n  >>> german = gettext.translation('iso3166-1', pycountry.locales_dir,\n  ...                              languages=['de'])\n  >>> german.install()\n  >>> _('germany')\n  'deutschland'\n\n\nlookups\n-------\n\nfor each database (countries, languages, scripts, etc.), you can also look up\nentities case insensitively without knowing which key the value may match.  for\nexample:\n\n.. code:: pycon\n\n  >>> pycountry.countries.lookup('de')\n  <pycountry.db.country object at 0x...>\n\nthe search ends with the first match, which is returned.\n\n\ndict compatibility\n------------------\n\nyou can cast each object type into a `dict`:\n\n.. code:: pycon\n\n >>> country = pycountry.countries.lookup('de')\n >>> dict(country)\n {'alpha_2': 'de', 'name': 'germany', ...}\n\n\ncustom countries\n----------------\n\nwhile pycountry will not be adding non-iso values to its standard library,\nyou can add or remove entries at runtime to fit your needs.\n\nadd a non-iso country:\n\n.. code:: pycon\n\n >>> pycountry.countries.add_entry(alpha_2=\"xk\", alpha_3=\"xxk\", name=\"kosovo\", numeric=\"926\")\n\nremove a country from a database:\n\n.. code:: pycon\n\n >>> pycountry.countries.remove_entry(alpha_2=\"xk\")\n\n\npyinstaller compatibility\n-------------------------\n\nsome users have reported issues using pycountry with pyinstaller guidance on\nhow to handle the issues can be found in the `pyinstaller google group\n<https://groups.google.com/g/pyinstaller/c/oyhjdez9010/m/vlhyawuzaqaj>`_.\n\n",
  "docs_url": null,
  "keywords": "country,subdivision,language,currency,iso,3166,639,4217,15924,3166-1,3166-2,3166-3",
  "license": "lgpl 2.1",
  "name": "pycountry",
  "package_url": "https://pypi.org/project/pycountry/",
  "project_url": "https://pypi.org/project/pycountry/",
  "project_urls": {
    "Homepage": "https://github.com/flyingcircusio/pycountry",
    "Repository": "https://github.com/flyingcircusio/pycountry"
  },
  "release_url": "https://pypi.org/project/pycountry/23.12.11/",
  "requires_dist": [
    "importlib-resources (>=5.12.0,<6.0.0) ; python_version < \"3.9\""
  ],
  "requires_python": ">=3.8",
  "summary": "iso country, subdivision, language, currency and script definitions and their translations",
  "version": "23.12.11",
  "releases": [],
  "developers": [
    "christian_theune",
    "ct@flyingcircus.io",
    "nate_schimmoller",
    "nschimmo@gmail.com"
  ],
  "kwds": "country_code historic_countries countries iso_639 iso_3166",
  "license_kwds": "lgpl 2.1",
  "libtype": "pypi",
  "id": "pypi_pycountry",
  "homepage": "https://github.com/flyingcircusio/pycountry",
  "release_count": 62,
  "dependency_ids": [
    "pypi_importlib_resources"
  ]
}
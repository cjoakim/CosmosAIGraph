{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: software development :: quality assurance"
  ],
  "description": "# libsast\n\ngeneric sast for security engineers. powered by regex based pattern matcher and semantic aware [semgrep](https://github.com/returntocorp/semgrep).\n\nmade with ![love](https://cloud.githubusercontent.com/assets/4301109/16754758/82e3a63c-4813-11e6-9430-6015d98aeaab.png) in india [![tweet](https://img.shields.io/twitter/url?url=https://github.com/ajinabraham/libsast)](https://twitter.com/intent/tweet/?text=generic%20sast%20for%20security%20engineers.%20powered%20by%20regex%20based%20pattern%20matcher%20and%20semantic%20aware%20semgrep%20by%20%40ajinabraham%20%40opensecurity_in&url=https://github.com/ajinabraham/libsast)\n\n[![pypi version](https://badge.fury.io/py/libsast.svg)](https://badge.fury.io/py/libsast)\n[![platform](https://img.shields.io/badge/platform-windows%2fosx%2flinux-green.svg)](https://github.com/ajinabraham/libsast)\n[![license](https://img.shields.io/:license-lgpl3+-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0.en.html)\n[![python](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\n[![build](https://github.com/ajinabraham/libsast/workflows/build/badge.svg)](https://github.com/ajinabraham/libsast/actions?query=workflow%3abuild)\n\n### support libsast\n\n* **donate via paypal:** [![donate via paypal](https://user-images.githubusercontent.com/4301109/76471686-c43b0500-63c9-11ea-8225-2a305efb3d87.gif)](https://paypal.me/ajinabraham)\n* **sponsor the project:** [![github sponsors](https://user-images.githubusercontent.com/4301109/95517226-9e410780-098e-11eb-9ef5-7b8c7561d725.png)](https://github.com/sponsors/ajinabraham)\n\n## install\n\n`pip install libsast`\n\npattern matcher is cross-platform, but semgrep supports only mac and linux.\n\n## command line options\n\n```bash\n$ libsast\nusage: libsast [-h] [-o output] [-p pattern_file] [-s sgrep_pattern_file]\n               [--sgrep-file-extensions sgrep_file_extensions [sgrep_file_extensions ...]]\n               [--file-extensions file_extensions [file_extensions ...]]\n               [--ignore-filenames ignore_filenames [ignore_filenames ...]]\n               [--ignore-extensions ignore_extensions [ignore_extensions ...]]\n               [--ignore-paths ignore_paths [ignore_paths ...]]\n               [--show-progress] [-v]\n               [path [path ...]]\n\npositional arguments:\n  path                  path can be file(s) or directories\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o output, --output output\n                        output filename to save json report.\n  -p pattern_file, --pattern-file pattern_file\n                        yaml pattern file, directory or url\n  -s sgrep_pattern_file, --sgrep-pattern-file sgrep_pattern_file\n                        sgrep rules directory\n  --sgrep-file-extensions sgrep_file_extensions [sgrep_file_extensions ...]\n                        file extensions that should be scanned with sgrep\n  --file-extensions file_extensions [file_extensions ...]\n                        file extensions that should be scanned with pattern\n                        matcher\n  --ignore-filenames ignore_filenames [ignore_filenames ...]\n                        file name(s) to ignore\n  --ignore-extensions ignore_extensions [ignore_extensions ...]\n                        file extension(s) to ignore in lower case\n  --ignore-paths ignore_paths [ignore_paths ...]\n                        path(s) to ignore\n  --show-progress       show scan progress\n  -v, --version         show libsast version\n```\n\n\n## example usage\n\n```json\n$ libsast -s tests/assets/rules/semantic_grep/ -p tests/assets/rules/pattern_matcher/ tests/assets/files/\n{\n  \"pattern_matcher\": {\n    \"test_regex\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            28,\n            28\n          ],\n          \"match_position\": [\n            1141,\n            1149\n          ],\n          \"match_string\": \".close()\"\n        }\n      ],\n      \"metadata\": {}\n    },\n    \"test_regex_and\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            3,\n            3\n          ],\n          \"match_position\": [\n            52,\n            66\n          ],\n          \"match_string\": \"webkit.webview\"\n        },\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            7,\n            7\n          ],\n          \"match_position\": [\n            194,\n            254\n          ],\n          \"match_string\": \".loadurl(\\\"file:/\\\" + environment.getexternalstoragedirectory(\"\n        }\n      ],\n      \"metadata\": {}\n    },\n    \"test_regex_and_not\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            42,\n            42\n          ],\n          \"match_position\": [\n            1415,\n            1424\n          ],\n          \"match_string\": \"wkwebview\"\n        },\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            40,\n            40\n          ],\n          \"match_position\": [\n            1363,\n            1372\n          ],\n          \"match_string\": \"wkwebview\"\n        }\n      ],\n      \"metadata\": {}\n    },\n    \"test_regex_and_or\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            50,\n            50\n          ],\n          \"match_position\": [\n            1551,\n            1571\n          ],\n          \"match_string\": \"telephony.smsmanager\"\n        },\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            58,\n            58\n          ],\n          \"match_position\": [\n            1973,\n            1988\n          ],\n          \"match_string\": \"sendtextmessage\"\n        }\n      ],\n      \"metadata\": {}\n    },\n    \"test_regex_multiline_and_metadata\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            52,\n            52\n          ],\n          \"match_position\": [\n            1586,\n            1684\n          ],\n          \"match_string\": \"public void onrequestpermissionsresult(int requestcode,string permissions[], int[] grantresults) {\"\n        },\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            10,\n            11\n          ],\n          \"match_position\": [\n            297,\n            368\n          ],\n          \"match_string\": \"public static forgeaccount add(context context, forgeaccount account) {\"\n        }\n      ],\n      \"metadata\": {\n        \"cwe\": \"cwe-1051 initialization with hard-coded network resource configuration data\",\n        \"description\": \"this is a rule to test regex\",\n        \"foo\": \"bar\",\n        \"masvs\": \"mstg-storage-3\",\n        \"owasp-mobile\": \"m1: improper platform usage\",\n        \"owasp-web\": \"a10: insufficient logging & monitoring\",\n        \"severity\": \"info\"\n      }\n    },\n    \"test_regex_or\": {\n      \"files\": [\n        {\n          \"file_path\": \"tests/assets/files/test_matcher.test\",\n          \"match_lines\": [\n            26,\n            26\n          ],\n          \"match_position\": [\n            1040,\n            1067\n          ],\n          \"match_string\": \"context.mode_world_readable\"\n        }\n      ],\n      \"metadata\": {}\n    }\n  },\n  \"semantic_grep\": {\n    \"errors\": [\n      {\n        \"code\": 3,\n        \"level\": \"warn\",\n        \"message\": \"semgrep core warn - lexical error in file tests/assets/files/test_matcher.test:40\\n\\tunrecognized symbols: !\",\n        \"path\": \"tests/assets/files/test_matcher.test\",\n        \"type\": \"lexical error\"\n      },\n    ],\n    \"matches\": {\n      \"boto-client-ip\": {\n        \"files\": [\n          {\n            \"file_path\": \"tests/assets/files/example_file.py\",\n            \"match_lines\": [\n              4,\n              4\n            ],\n            \"match_position\": [\n              24,\n              31\n            ],\n            \"match_string\": \"c = boto3.client(host='8.8.8.8')\"\n          }\n        ],\n        \"metadata\": {\n          \"cwe\": \"cwe-1050 excessive platform resource consumption within a loop\",\n          \"description\": \"boto client using ip address\",\n          \"owasp-web\": \"a8: insecure deserialization\",\n          \"severity\": \"error\"\n        }\n      }\n    }\n  }\n}\n```\n\n## python api\n\n```python\n>>> from libsast import scanner\n>>> options = {'match_rules': '/users/ajinabraham/code/njsscan/njsscan/rules/pattern_matcher', 'sgrep_rules': '/users/ajinabraham/code/njsscan/njsscan/rules/semantic_grep', 'sgrep_extensions': {'', '.js'}, 'match_extensions': {'.hbs', '.sh', '.ejs', '.toml', '.mustache', '.tmpl', '.jade', '.json', '.ect', '.vue', '.yml', '.hdbs', '.tl', '.html', '.haml', '.dust', '.pug', '.tpl'}, 'ignore_filenames': {'bootstrap.min.js', '.ds_store', 'bootstrap-tour.js', 'd3.min.js', 'tinymce.js', 'codemirror.js', 'tinymce.min.js', 'react-dom.production.min.js', 'react.js', 'jquery.min.js', 'react.production.min.js', 'codemirror-compressed.js', 'axios.min.js', 'angular.min.js', 'raphael-min.js', 'vue.min.js'}, 'ignore_extensions': {'.7z', '.exe', '.rar', '.zip', '.a', '.o', '.tz'}, 'ignore_paths': {'__macosx', 'jquery', 'fixtures', 'node_modules', 'bower_components', 'example', 'spec'}, 'show_progress': false}\n>>> paths = ['../njsscan/tests/assets/dot_njsscan/']\n>>> scanner = scanner(options, paths)\n>>> scanner.scan()\n{'pattern_matcher': {'handlebar_mustache_template': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/ignore_ext.hbs', 'match_string': '{{{html}}}', 'match_position': (52, 62), 'match_lines': (1, 1)}], 'metadata': {'id': 'handlebar_mustache_template', 'description': 'the handlebar.js/mustache.js template has an unescaped variable. untrusted user input passed to this variable results in cross site scripting (xss).', 'type': 'regex', 'pattern': '{{{.+}}}|{{[ ]*&[\\\\w]+.*}}', 'severity': 'error', 'input_case': 'exact', 'cwe': \"cwe-79: improper neutralization of input during web page generation ('cross-site scripting')\", 'owasp': 'a1: injection'}}}, 'semantic_grep': {'matches': {'node_aes_ecb': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (16, 87), 'match_lines': (14, 14), 'match_string': \"let decipher = crypto.createdecipheriv('aes-128-ecb', buffer.from(encryption_key), iv);\"}], 'metadata': {'owasp': 'a9: using components with known vulnerabilities', 'cwe': 'cwe-327: use of a broken or risky cryptographic algorithm', 'description': 'aes with ecb mode is deterministic in nature and not suitable for encrypting large amount of repetitive data.', 'severity': 'error'}}, 'node_tls_reject': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (9, 58), 'match_lines': (9, 9), 'match_string': \"        process.env['node_tls_reject_unauthorized'] = '0';\"}, {'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (9, 55), 'match_lines': (18, 18), 'match_string': '        process.env.node_tls_reject_unauthorized = \"0\";'}], 'metadata': {'owasp': 'a6: security misconfiguration', 'cwe': 'cwe-295: improper certificate validation', 'description': \"setting 'node_tls_reject_unauthorized' to 0 will allow node server to accept self signed certificates and is not a secure behaviour.\", 'severity': 'error'}}, 'node_curl_ssl_verify_disable': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip_dir/skip_me.js', 'match_position': (5, 11), 'match_lines': (45, 51), 'match_string': '    curl(url,\\n\\n        {\\n\\n            ssl_verifypeer: 0\\n\\n        },\\n\\n        function (err) {\\n\\n            response.end(this.body);\\n\\n        })'}], 'metadata': {'owasp': 'a6: security misconfiguration', 'cwe': 'cwe-599: missing validation of openssl certificate', 'description': 'ssl certificate verification for node-curl is disabled.', 'severity': 'error'}}, 'regex_injection_dos': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 37), 'match_lines': (25, 27), 'match_string': '    var key = req.param(\"key\");\\n\\n    // regex created from user input\\n\\n    var re = new regexp(\"\\\\\\\\b\" + key);'}], 'metadata': {'owasp': 'a1: injection', 'cwe': 'cwe-400: uncontrolled resource consumption', 'description': 'user controlled data in regexp() can make the application vulnerable to layer 7 dos.', 'severity': 'error'}}, 'express_xss': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip.js', 'match_position': (9, 55), 'match_lines': (7, 10), 'match_string': '        var str = new buffer(req.cookies.profile, \\'base64\\').tostring();\\n\\n        var obj = serialize.unserialize(str);\\n\\n        if (obj.username) {\\n\\n            res.send(\"hello \" + escape(obj.username));'}], 'metadata': {'owasp': 'a1: injection', 'cwe': \"cwe-79: improper neutralization of input during web page generation ('cross-site scripting')\", 'description': 'untrusted user input in response will result in reflected cross site scripting vulnerability.', 'severity': 'error'}}, 'generic_path_traversal': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 35), 'match_lines': (36, 37), 'match_string': \"    var filepath = path.join(__dirname, '/' + req.query.load);\\n\\n    filesystem.readfile(filepath); // ignore: generic_path_traversal\"}, {'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 35), 'match_lines': (42, 43), 'match_string': \"    var filepath = path.join(__dirname, '/' + req.query.load);\\n\\n    filesystem.readfile(filepath); // detect this\"}], 'metadata': {'owasp': 'a5: broken access control', 'cwe': 'cwe-23: relative path traversal', 'description': 'untrusted user input in readfile()/readfilesync() can endup in directory traversal attacks.', 'severity': 'error'}}, 'express_open_redirect': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/lorem_scan.js', 'match_position': (5, 26), 'match_lines': (49, 51), 'match_string': '    var target = req.param(\"target\");\\n\\n    // bad: sanitization doesn\\'t apply here\\n\\n    res.redirect(target); //ignore: express_open_redirect'}], 'metadata': {'owasp': 'a1: injection', 'cwe': \"cwe-601: url redirection to untrusted site ('open redirect')\", 'description': 'untrusted user input in redirect() can result in open redirect vulnerability.', 'severity': 'error'}}, 'node_deserialize': {'files': [{'file_path': '../njsscan/tests/assets/dot_njsscan/skip.js', 'match_position': (19, 45), 'match_lines': (8, 8), 'match_string': '        var obj = serialize.unserialize(str);'}], 'metadata': {'owasp': 'a8: insecure deserialization', 'cwe': 'cwe-502: deserialization of untrusted data', 'description': \"user controlled data in 'unserialize()' or 'deserialize()' function can result in object injection or remote code injection.\", 'severity': 'error'}}}, 'errors': [{'type': 'sourceparseerror', 'code': 3, 'short_msg': 'parse error', 'long_msg': 'could not parse .njsscan as javascript', 'level': 'warn', 'spans': [{'start': {'line': 2, 'col': 20}, 'end': {'line': 2, 'col': 21}, 'source_hash': 'c60298be568bfb1325d92cbb3c0bc1450a25b85bb2e4000bdc3267c05f1c8c73', 'file': '.njsscan', 'context_start': none, 'context_end': none}], 'help': 'if the code appears to be valid, this may be a semgrep bug.'}, {'type': 'sourceparseerror', 'code': 3, 'short_msg': 'parse error', 'long_msg': 'could not parse no_ext_scan as javascript', 'level': 'warn', 'spans': [{'start': {'line': 1, 'col': 3}, 'end': {'line': 1, 'col': 5}, 'source_hash': 'f002e2a715be216987dd1b134e7b9fa6eef28e3caa82dead0109c4cdc489e089', 'file': 'no_ext_scan', 'context_start': none, 'context_end': none}], 'help': 'if the code appears to be valid, this may be a semgrep bug.'}]}}\n```\n\n## write you own static analysis tool\n\nwith libsast, you can write your own static analysis tools. libsast provides two matching engines:\n\n1. **pattern matcher**\n2. **semantic grep**\n\n### pattern matcher\n\ncurrently pattern matcher supports any language.\n\nuse [regex 101](https://regex101.com/r/ngbaay/1) to write simple python regex rule patterns.\n\na sample rule looks like\n\n```yaml\n- id: test_regex_or\n  message: this is a rule to test regex_or\n  input_case: exact\n  pattern:\n  - mode_world_readable|context\\.mode_world_readable\n  - openfileoutput\\(\\s*\".+\"\\s*,\\s*1\\s*\\)\n  severity: error\n  type: regexor\n  metadata:\n    owasp-web: a1\n    reference: http://foo.bar\n    foo: some extra metadata\n```\na rule consist of \n\n* `id` : a unique id for the rule.\n* `message`: a description for the rule.\n* `input_case`: it can be `exact`, `upper` or `lower`. data will be converted to lower case/upper case/as it is before comparing with the regex.\n* `pattern`: list of patterns depends on `type`.\n* `severity`: it can be `error`, `warning` or `info`.\n* `type`: pattern matcher supports `regex`, `regexand`, `regexor`, `regexandor`, `regexandnot`.\n* `metadata` (optional): define your own custom fields that you can use as metadata along with standard mappings. \n\n```bash\n1. regex - if regex1 in input\n2. regexand - if regex1 in input and regex2 in input\n3. regexor - if regex1 in input or regex2 in input\n4. regexandor -  if regex1 in input and (regex2 in input or regex3 in input)\n5. regexandnot - if regex1 in input and not regex2 in input\n```\nexample: [pattern matcher rule](https://github.com/ajinabraham/libsast/blob/master/tests/assets/rules/pattern_matcher/patterns.yaml)\n\ntest your pattern matcher rules\n\n`$ libsast -p tests/assets/rules/pattern_matcher/patterns.yaml tests/assets/files/`\n\n#### inbuilt standard mapping support\n\nmetadata fields also support [libsast standard mapping](https://github.com/ajinabraham/libsast/tree/master/libsast/standards).\n\nfor example, the metadata field `owasp-web: a1` will get expanded at runtime as `owasp-web: 'a1: injection'`. \n\n*currently supports*\n\n* [owasp web top 10](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_web_top10_2017.yaml)\n* [owasp mobile top 10](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_mobile_top10_2016.yaml)\n* [owasp masvs](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/owasp_masvs.yaml)\n* [cwe](https://github.com/ajinabraham/libsast/blob/master/libsast/standards/cwe.yaml)\n\n### semantic grep\n\nsemantic grep uses [semgrep](https://github.com/returntocorp/semgrep), a fast and syntax-aware semantic code pattern search for many languages: like grep but for code.\n\ncurrently it supports python, java, javascript, go and c.\n\nuse [semgrep.dev](https://semgrep.dev/vab) to write semantic grep rule patterns.\n\na sample rule for python code looks like\n\n```yaml\nrules:\n  - id: boto-client-ip\n    patterns:\n      - pattern-inside: boto3.client(host=\"...\")\n      - pattern-regex: '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    message: \"boto client using ip address\"\n    languages: [python]\n    severity: error\n    metadata:\n      owasp-web: a2\n      owasp-mobile: m7\n      cwe: cwe-1048\n      foo: some extra metadata\n```\n\nsee semgrep documentation [here](https://semgrep.dev/docs/writing-rules/rule-syntax/).\n\nexample: [semantic grep rule](https://github.com/ajinabraham/libsast/blob/master/tests/assets/rules/semantic_grep/sgrep.yaml)\n\ntest your semgrep rules\n\n`$ libsast -s tests/assets/rules/semantic_grep/sgrep.yaml tests/assets/files/`\n\n## realworld implementations\n\n* [njsscan](https://github.com/ajinabraham/njsscan) sast is built with libsast pattern matcher and semantic grep.\n* [nodejsscan](https://github.com/ajinabraham/nodejsscan) nodejsscan is a static security code scanner for node.js applications.\n* [mobsf](https://mobsf.github.io/mobile-security-framework-mobsf/) static code analyzer for android and ios mobile applications.\n* [mobsfscan](https://github.com/mobsf/mobsfscan) mobsfscan is a static security code scanner for mobile applications built for android (java, kotlin) & ios (swift, objective c).\n",
  "docs_url": null,
  "keywords": "libsast,sast,python sast,sast api,regex sast,pattern matcher",
  "license": "lgpl-3.0-or-later",
  "name": "libsast",
  "package_url": "https://pypi.org/project/libsast/",
  "project_url": "https://pypi.org/project/libsast/",
  "project_urls": {
    "Bug Tracker": "https://github.com/ajinabraham/libsast/issues",
    "Documentation": "https://github.com/ajinabraham/libsast/blob/master/README.md",
    "Homepage": "https://github.com/ajinabraham/libsast",
    "Repository": "https://github.com/ajinabraham/libsast"
  },
  "release_url": "https://pypi.org/project/libsast/2.0.3/",
  "requires_dist": [
    "requests (>=2.27.1)",
    "pyyaml (>=6.0)",
    "semgrep (==0.117.0) ; sys_platform != \"win32\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "a generic sast library built on top of semgrep and regex",
  "version": "2.0.3",
  "releases": [],
  "developers": [
    "ajin@opensecurity.in",
    "ajin_abraham"
  ],
  "kwds": "sast regexandnot regexor regexp regex",
  "license_kwds": "lgpl-3.0-or-later",
  "libtype": "pypi",
  "id": "pypi_libsast",
  "homepage": "https://github.com/ajinabraham/libsast",
  "release_count": 48,
  "dependency_ids": [
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_semgrep"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: anyio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": ".. image:: https://github.com/agronholm/anyio/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/anyio/actions/workflows/test.yml\n  :alt: build status\n.. image:: https://coveralls.io/repos/github/agronholm/anyio/badge.svg?branch=master\n  :target: https://coveralls.io/github/agronholm/anyio?branch=master\n  :alt: code coverage\n.. image:: https://readthedocs.org/projects/anyio/badge/?version=latest\n  :target: https://anyio.readthedocs.io/en/latest/?badge=latest\n  :alt: documentation\n.. image:: https://badges.gitter.im/gitterhq/gitter.svg\n  :target: https://gitter.im/python-trio/anyio\n  :alt: gitter chat\n\nanyio is an asynchronous networking and concurrency library that works on top of either asyncio_ or\ntrio_. it implements trio-like `structured concurrency`_ (sc) on top of asyncio and works in harmony\nwith the native sc of trio itself.\n\napplications and libraries written against anyio's api will run unmodified on either asyncio_ or\ntrio_. anyio can also be adopted into a library or application incrementally \u2013 bit by bit, no full\nrefactoring necessary. it will blend in with the native libraries of your chosen backend.\n\ndocumentation\n-------------\n\nview full documentation at: https://anyio.readthedocs.io/\n\nfeatures\n--------\n\nanyio offers the following functionality:\n\n* task groups (nurseries_ in trio terminology)\n* high-level networking (tcp, udp and unix sockets)\n\n  * `happy eyeballs`_ algorithm for tcp connections (more robust than that of asyncio on python\n    3.8)\n  * async/await style udp sockets (unlike asyncio where you still have to use transports and\n    protocols)\n\n* a versatile api for byte streams and object streams\n* inter-task synchronization and communication (locks, conditions, events, semaphores, object\n  streams)\n* worker threads\n* subprocesses\n* asynchronous file i/o (using worker threads)\n* signal handling\n\nanyio also comes with its own pytest_ plugin which also supports asynchronous fixtures.\nit even works with the popular hypothesis_ library.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _trio: https://github.com/python-trio/trio\n.. _structured concurrency: https://en.wikipedia.org/wiki/structured_concurrency\n.. _nurseries: https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning\n.. _happy eyeballs: https://en.wikipedia.org/wiki/happy_eyeballs\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _hypothesis: https://hypothesis.works/\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "anyio",
  "package_url": "https://pypi.org/project/anyio/",
  "project_url": "https://pypi.org/project/anyio/",
  "project_urls": {
    "Changelog": "https://anyio.readthedocs.io/en/stable/versionhistory.html",
    "Documentation": "https://anyio.readthedocs.io/en/latest/",
    "Issue tracker": "https://github.com/agronholm/anyio/issues",
    "Source code": "https://github.com/agronholm/anyio"
  },
  "release_url": "https://pypi.org/project/anyio/4.2.0/",
  "requires_dist": [
    "idna >=2.8",
    "sniffio >=1.1",
    "exceptiongroup >=1.0.2 ; python_version < \"3.11\"",
    "typing-extensions >=4.1 ; python_version < \"3.11\"",
    "packaging ; extra == 'doc'",
    "Sphinx >=7 ; extra == 'doc'",
    "sphinx-rtd-theme ; extra == 'doc'",
    "sphinx-autodoc-typehints >=1.2.0 ; extra == 'doc'",
    "anyio[trio] ; extra == 'test'",
    "coverage[toml] >=7 ; extra == 'test'",
    "exceptiongroup >=1.2.0 ; extra == 'test'",
    "hypothesis >=4.0 ; extra == 'test'",
    "psutil >=5.9 ; extra == 'test'",
    "pytest >=7.0 ; extra == 'test'",
    "pytest-mock >=3.6.1 ; extra == 'test'",
    "trustme ; extra == 'test'",
    "uvloop >=0.17 ; (platform_python_implementation == \"CPython\" and platform_system != \"Windows\") and extra == 'test'",
    "trio >=0.23 ; extra == 'trio'"
  ],
  "requires_python": ">=3.8",
  "summary": "high level compatibility layer for multiple asynchronous event loop implementations",
  "version": "4.2.0",
  "releases": [],
  "developers": [
    "alex.gronholm@nextday.fi"
  ],
  "kwds": "anyio badge yml badges asyncio_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_anyio",
  "homepage": "",
  "release_count": 50,
  "dependency_ids": [
    "pypi_anyio",
    "pypi_coverage",
    "pypi_exceptiongroup",
    "pypi_hypothesis",
    "pypi_idna",
    "pypi_packaging",
    "pypi_psutil",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_sniffio",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_trio",
    "pypi_trustme",
    "pypi_typing_extensions",
    "pypi_uvloop"
  ]
}
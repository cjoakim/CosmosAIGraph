{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: django :: 1.11",
    "framework :: django :: 2.0",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "framework :: django :: 3.1",
    "framework :: flask",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http"
  ],
  "description": ".. image:: https://travis-ci.com/lmcgartland/graphene-file-upload.svg?branch=master\n    :target: https://travis-ci.com/lmcgartland/graphene-file-upload\n\n.. image:: https://badge.fury.io/py/graphene-file-upload.svg\n    :target: https://badge.fury.io/py/graphene-file-upload\n\n\ngraphene-file-upload\n====================\n\n``graphene-file-upload`` is a drop in replacement for the the graphql\nview in graphene for django, and for flask-graphql. \n\nit supports multi-part file uploads that adhere to the `multipart request spec <https://github.com/jaydenseric/graphql-multipart-request-spec>`_.\n\nit currently supports python 2.7 and 3.4+.\n\ninstallation:\n-------------\n\n.. code:: bash\n\n    $ pip install graphene-file-upload\n\nusage\n-----\n\nto add an upload type to your mutation, import and use ``upload``.\nupload is a scalar type.\n\n.. code:: python\n\n   from graphene_file_upload.scalars import upload\n\n   class uploadmutation(graphene.mutation):\n       class arguments:\n           file = upload(required=true)\n\n       success = graphene.boolean()\n\n       def mutate(self, info, file, **kwargs):\n           # do something with your file\n\n           return uploadmutation(success=true)\n\ndjango integration:\n~~~~~~~~~~~~~~~~~~~\n\nto use, import the view, then add to your list of urls (replace previous\ngraphql view).\n\n.. code:: python\n\n   from graphene_file_upload.django import fileuploadgraphqlview\n\n   urlpatterns = [\n     url(r'^graphql', fileuploadgraphqlview.as_view(graphiql=true)),\n   ]\n\nflask integration:\n~~~~~~~~~~~~~~~~~~\n\nnote that ``flask-graphql`` version ``<2.0`` is not supported. at the\ntime of writing this readme, you must install ``flask-graphql`` with\n``pip install --pre flask-graphql``\n\nsimply import the modified view and create a new url rule on your app:\n\n.. code:: python\n\n   from graphene_file_upload.flask import fileuploadgraphqlview\n\n   app.add_url_rule(\n       '/graphql',\n       view_func=fileuploadgraphqlview.as_view(\n         ...\n       )\n   )\n\ntesting\n-------\n\nflask\n~~~~~\n\n`<https://flask.palletsprojects.com/en/1.1.x/testing/#the-testing-skeleton/>`_\n\n.. code:: python\n\n    # create a fixture using the file_graphql_query helper and `client` fixture.\n    import os\n    import json\n    import tempfile\n\n    from flaskr import flaskr\n    import pytest\n    from graphene_file_upload.django.testing import file_graphql_query\n\n\n    @pytest.fixture\n    def client():\n        db_fd, flaskr.app.config['database'] = tempfile.mkstemp()\n        flaskr.app.config['testing'] = true\n\n        with flaskr.app.test_client() as client:\n            with flaskr.app.app_context():\n                flaskr.init_db()\n            yield client\n\n        os.close(db_fd)\n        os.unlink(flaskr.app.config['database'])\n\n    @pytest.fixture\n    def client_query(client):\n        def func(*args, **kwargs):\n            return file_graphql_query(*args, **kwargs, client=client)\n\n        return func\n\n    # test your query using the client_query fixture\n    def test_some_query(client_query):\n        test_file = simpleuploadedfile(name='test.txt', content=file_text.encode('utf-8'))\n\n        response = client_query(\n            '''\n            mutation testmutation($file: upload!) {\n                myupload(filein: $file) {\n                    ok\n                }\n            }\n            ''',\n            op_name='testmutation'\n            files={'file': test_file},\n        )\n\n        content = json.loads(response.content)\n        assert 'errors' not in content\n\n\ndjango\n~~~~~~\n\nwriting test using `django's test client <https://docs.djangoproject.com/en/3.1/topics/testing/tools/#default-test-client />`_\n\nusing pytest\n############\n\nto use pytest define a simple fixture using the query helper below\n\n.. code:: python\n\n    # create a fixture using the file_graphql_query helper and ``client` fixture from ``pytest-django``.\n\n    import json\n    import pytest\n    from graphene_file_upload.django.testing import file_graphql_query\n\n    @pytest.fixture\n    def client_query(client):\n        def func(*args, **kwargs):\n            return file_graphql_query(*args, **kwargs, client=client)\n\n        return func\n\n    # test your query using the client_query fixture\n    def test_some_query(client_query):\n        test_file = simpleuploadedfile(name='test.txt', content=file_text.encode('utf-8'))\n\n        response = client_query(\n            '''\n            mutation testmutation($file: upload!) {\n                myupload(filein: $file) {\n                    ok\n                }\n            }\n            ''',\n            op_name='testmutation'\n            files={'file': test_file},\n        )\n\n        content = json.loads(response.content)\n        assert 'errors' not in content\n\n\nusing unittest\n##############\n\nyour endpoint is set through the ``graphql_url`` attribute on ``graphqlfileuploadtestcase``. \n\nthe default endpoint is ``graphql_url = \u201c/graphql/\u201d``.\n\n.. code:: python\n\n    import json\n\n    from graphene_file_upload.django.testing import graphqlfileuploadtestcase\n\n    class mutationtestcase(graphqlfileuploadtestcase):\n       def test_some_mutation(self):\n            test_file = simpleuploadedfile(name='test.txt', content=file_text.encode('utf-8'))\n\n            response = self.file_query(\n                '''\n                mutation testmutation($file: upload!) {\n                    myupload(filein: $file) {\n                        ok\n                    }\n                }\n                ''',\n                op_name='testmutation',\n                files={'file': test_file},\n            )\n\n            # this validates the status code and if you get errors\n            self.assertresponsenoerrors(response)\n\n\ncontributing:\n-------------\n\nif you'd like to contribute, please run the test suite prior to sending a pr.\n\nin order to run the testing environment, create a virtual environment, install\ntox, and run the tox commands:\n\n.. code:: bash\n\n    $ python3 -m venv venv\n    $ source venv/bin/activate\n    $ make install\n    # you may have to deactivate and reactivate to have access to the tox command,\n    # depending on your system.\n\n    # run the test suite with the versions of python you have installed\n    $ tox\n    # alternatively, if you're using something like pyenv and can easily install\n    # multiple versions of python, then try running the following command\n    $ tox\n\n    # if for some reason you need to recreate the tox environment (e.g. a new\n    # dependency has been added since you last ran it, add the -r flag to the\n    # tox command)\n    $ tox -r {...additional flags...}\n\ncheck out `pyenv\n<https://github.com/pyenv/pyenv>`_ if you'd like a simple way of\ninstalling multiple python versions to test out.\n\npackaging for pypi:\n-------------------\n\nrun\n\n.. code:: bash\n\n    $ make deploy\n\n\n",
  "docs_url": null,
  "keywords": "graphql,graphene,apollo,upload",
  "license": "",
  "name": "graphene-file-upload",
  "package_url": "https://pypi.org/project/graphene-file-upload/",
  "project_url": "https://pypi.org/project/graphene-file-upload/",
  "project_urls": {
    "Homepage": "https://github.com/lmcgartland/graphene-file-upload"
  },
  "release_url": "https://pypi.org/project/graphene-file-upload/1.3.0/",
  "requires_dist": [
    "six (>=1.11.0)",
    "Flask (>=1.0.2) ; extra == 'all'",
    "graphene (>=2.1.2) ; extra == 'all'",
    "Flask-Graphql (>=2.0.0) ; extra == 'all'",
    "graphene-django (>=2.0.0) ; extra == 'all'",
    "graphene-django (>=2.0.0) ; extra == 'django'",
    "Flask (>=1.0.2) ; extra == 'flask'",
    "graphene (>=2.1.2) ; extra == 'flask'",
    "Flask-Graphql (>=2.0.0) ; extra == 'flask'",
    "coverage ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pytest-django ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "lib for adding file upload functionality to graphql mutations in graphene django and flask-graphql",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "lucas_mcgartland",
    "lucasmcgartland@gmail.com"
  ],
  "kwds": "graphene_file_upload graphqlfileuploadtestcase file_graphql_query fileuploadgraphqlview graphene",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_graphene_file_upload",
  "homepage": "https://github.com/lmcgartland/graphene-file-upload",
  "release_count": 9,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_flask",
    "pypi_flask_graphql",
    "pypi_graphene",
    "pypi_graphene_django",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_django",
    "pypi_six"
  ]
}
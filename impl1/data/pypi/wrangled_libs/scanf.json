{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3"
  ],
  "description": "scanf: a small scanf implementation for python\n==============================================\n\npython has powerful regular expressions but they can be totally\noverkill for many simpler situations. additionally, some common\nnumerical formats require quite complex regex's to match them\nrobustly. this python implementation of scanf internally translates the simple\nscanf format into regular expressions, then returns the parsed values.\n\nusage\n-------------\n\nscanf.scanf(format, s=none, collapsewhitespace=true)\n\n*arguments*\n\n- **format:** this is the format string comprised of plain text and tokens from the\n  table below.\n- **s:** string to be parsed\n- **collapsewhitespace:** when true, tells scanf to perform a greedy match with\n  whitespace in the input string, allowing for easy parsing of text that has\n  been formatted to be read more easily. this enables better matching in log files where the data\n  has been formatted for easier reading. these cases have variable\n  amounts of whitespace between the columns, depending on the number of\n  characters in the data itself.\n\n\nscanf supports the following formats:\n\n| pattern  | meaning                                  |\n| :------- | :--------------------------------------- |\n| %c       | one character                            |\n| %5c      | 5 characters                             |\n| %d, %i   | int value                                |\n| %7d, %7i | int value with length 7                  |\n| %f       | float value                              |\n| %o       | octal value                              |\n| %x, %x   | hex value                                |\n| %s       | string terminated by whitespace          |\n\nany pattern with a * after the % (*e.g.*, '%*f') will result in scanf matching the pattern but\nomitting the matched portion from the results.  this is helpful when parts of\nthe input string may change but should be ignored.\n\nthe underlying regex operation is performed using 'search' rather than 'match',\nso scanf will return a match if the pattern string is matched anywhere in the line.\n\n\n*examples:*\n\n```\n>>> from scanf import scanf\n>>> scanf(\"%s - %d errors, %d warnings\", \"/usr/sbin/sendmail - 0 errors, 4 warnings\")\n('/usr/sbin/sendmail', 0, 4)\n\n>>> scanf(\"%o %x %d\", \"0123 0x123 123\")\n(83, 291, 123)\n\n>>> pattern = 'power: %f [%], %s, stemp: %f'\n>>> text = 'power:   0.0 [%], cool, stemp: 23.73'\n>>> scanf(pattern, text)\n(0.0, 'cool', 23.73)\n\n>>> pattern = 'power: %f [%], %*s, stemp: %f'   # note the '*' in %*s\n>>> scanf(pattern, text)\n(0.0, 23.73)\n```\n\nscanf returns a tuple of parsed values if the input pattern is matched, or none if the format does not match.\n\n\nother resources\n---------------------\n\nfor more information see:\n\n- http://en.wikipedia.org/wiki/scanf\n- https://github.com/joshburnett/scanf\n\noriginal (pre-1.0) code from:\nhttp://code.activestate.com/recipes/502213-simple-scanf-implementation/\n\n\nreleases\n--------\n\n### 1.5.1: 2018-10-04\n\n- fixed installation issue \n\n### 1.5.1: 2018-10-04\n\n- re-added python 2.7 compatibility via backports.functools_lru_cache (thanks @eendebakpt!)\n\n### 1.5: 2018-10-01\n\n- fixed python 3.7 compatibility (scanf_compile broke in 3.7 due to differences in re.sub)\n- changed caching to functools.lru_cache (in python 3 standard library)\n- dropping python 2 support, as lru_cache is not in python 2 standard library\n- caching now takes collapsewhitespace into account (thanks @prittenhouse!)\n\n### 1.4.1: 2017-04-05\n\n- added $^| characters to the list of special characters to escape in 'scanf_compile'. thanks @michaelwedel!\n\n### 1.4: 2016-12-03\n\n- small modification to scanf.py for python3 compatibility. thanks @gattocrucco!\n- changed readme.md to readme.rst, removing pypandoc dependency in setup.py\n- removed most of the comments at the beginning of scanf.py, as they were\n  redundant with those in the readme.\n\n### 1.3.1 - 1.3.3: 2016-06-23\n\n- initial release to pypi\n- fixed various issues with metadata for pypi\n\n### 1.3: 2016-01-18\n\n- added 'extractdata' function.\n\n### 1.2: 2013-05-30\n\n- added 'collapsewhitespace' flag (defaults to true) to take the search\n  string and replace all whitespace with regex string to match repeated\n  whitespace. this enables better matching in log files where the data\n  has been formatted for easier reading. these cases have variable\n  amounts of whitespace between the columns, depending on the number of\n  characters in the data itself.\n\n### 1.1: 2010-10-13\n\n- changed regex from 'match' (only matches at beginning of line) to\n  'search' (matches anywhere in line)\n- bugfix - ignore cast for skipped fields\n\n### 1.0: 2010-10-11\n\n- initial release (internal)\n\n\n\n",
  "docs_url": null,
  "keywords": "scanf",
  "license": "mit",
  "name": "scanf",
  "package_url": "https://pypi.org/project/scanf/",
  "project_url": "https://pypi.org/project/scanf/",
  "project_urls": {
    "Homepage": "https://github.com/joshburnett/scanf"
  },
  "release_url": "https://pypi.org/project/scanf/1.5.2/",
  "requires_dist": [
    "backports.functools-lru-cache; python_version < \"2.9\""
  ],
  "requires_python": "",
  "summary": "a small scanf implementation",
  "version": "1.5.2",
  "releases": [],
  "developers": [
    "josh_burnett",
    "scanf@burnettsonline.org"
  ],
  "kwds": "scanf scanf_compile parsing python regex",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_scanf",
  "homepage": "https://github.com/joshburnett/scanf",
  "release_count": 9,
  "dependency_ids": [
    "pypi_backports.functools_lru_cache"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.5",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: utilities"
  ],
  "description": "bunch\r\n=====\r\n\r\nbunch is a dictionary that supports attribute-style access, a la javascript.\r\n\r\n>>> b = bunch()\r\n>>> b.hello = 'world'\r\n>>> b.hello\r\n'world'\r\n>>> b['hello'] += \"!\"\r\n>>> b.hello\r\n'world!'\r\n>>> b.foo = bunch(lol=true)\r\n>>> b.foo.lol\r\ntrue\r\n>>> b.foo is b['foo']\r\ntrue\r\n\r\n\r\ndictionary methods\r\n------------------\r\n\r\na bunch is a subclass of ``dict``; it supports all the methods a ``dict`` does:\r\n\r\n>>> b.keys()\r\n['foo', 'hello']\r\n\r\nincluding ``update()``:\r\n\r\n>>> b.update({ 'ponies': 'are pretty!' }, hello=42)\r\n>>> print repr(b)\r\nbunch(foo=bunch(lol=true), hello=42, ponies='are pretty!')\r\n\r\nas well as iteration:\r\n\r\n>>> [ (k,b[k]) for k in b ]\r\n[('ponies', 'are pretty!'), ('foo', bunch(lol=true)), ('hello', 42)]\r\n\r\nand \"splats\":\r\n\r\n>>> \"the {knights} who say {ni}!\".format(**bunch(knights='lolcats', ni='can haz'))\r\n'the lolcats who say can haz!'\r\n\r\n\r\nserialization\r\n-------------\r\n\r\nbunches happily and transparently serialize to json and yaml.\r\n\r\n>>> b = bunch(foo=bunch(lol=true), hello=42, ponies='are pretty!')\r\n>>> import json\r\n>>> json.dumps(b)\r\n'{\"ponies\": \"are pretty!\", \"foo\": {\"lol\": true}, \"hello\": 42}'\r\n\r\nif json support is present (``json`` or ``simplejson``), ``bunch`` will have a ``tojson()`` method which returns the object as a json string.\r\n\r\nif you have pyyaml_ installed, bunch attempts to register itself with the various yaml representers so that bunches can be transparently dumped and loaded.\r\n\r\n>>> b = bunch(foo=bunch(lol=true), hello=42, ponies='are pretty!')\r\n>>> import yaml\r\n>>> yaml.dump(b)\r\n'!bunch.bunch\\nfoo: !bunch.bunch {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\r\n>>> yaml.safe_dump(b)\r\n'foo: {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\r\n\r\nin addition, bunch instances will have a ``toyaml()`` method that returns the yaml string using ``yaml.safe_dump()``. this method also replaces ``__str__`` if present, as i find it far more readable. you can revert back to python's default use of ``__repr__`` with a simple assignment: ``bunch.__str__ = bunch.__repr__``. the bunch class will also have a static method ``bunch.fromyaml()``, which loads a bunch out of a yaml string.\r\n\r\nfinally, bunch converts easily and recursively to (``unbunchify()``, ``bunch.todict()``) and from (``bunchify()``, ``bunch.fromdict()``) a normal ``dict``, making it easy to cleanly serialize them in other formats.\r\n\r\n\r\nmiscellaneous\r\n-------------\r\n\r\n* it is safe to ``import *`` from this module. you'll get: ``bunch``, ``bunchify``, and ``unbunchify``.\r\n\r\n* ample doctests::\r\n\r\n    $ python -m bunch.test -v\r\n\r\n\r\nfeedback\r\n--------\r\n\r\nopen a ticket at http://github.com/dsc/bunch or send me an email at dsc@less.ly .\r\n\r\n.. _pyyaml: http://pyyaml.org/wiki/pyyaml",
  "docs_url": null,
  "keywords": "bunch,dict,mapping,container,collection",
  "license": "mit",
  "name": "bunch",
  "package_url": "https://pypi.org/project/bunch/",
  "project_url": "https://pypi.org/project/bunch/",
  "project_urls": {
    "Download": "http://pypi.python.org/packages/source/b/bunch/bunch-1.0.1.tar.gz",
    "Homepage": "http://github.com/dsc/bunch"
  },
  "release_url": "https://pypi.org/project/bunch/1.0.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a dot-accessible dictionary (a la javascript objects)",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "david_schoonover",
    "dsc@less.ly"
  ],
  "kwds": "dict dictionary fromdict bunches bunch",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bunch",
  "homepage": "http://github.com/dsc/bunch",
  "release_count": 2,
  "dependency_ids": []
}
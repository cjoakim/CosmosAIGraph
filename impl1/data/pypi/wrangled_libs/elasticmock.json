{
  "classifiers": [
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# elasticmock\n\npython elasticsearch mock for test purposes\n\n[![build status](https://travis-ci.org/vrcmarcos/elasticmock.svg?branch=master)](https://travis-ci.org/vrcmarcos/elasticmock) [![coverage status](https://coveralls.io/repos/github/vrcmarcos/elasticmock/badge.svg?branch=master)](https://coveralls.io/github/vrcmarcos/elasticmock?branch=master) [![pypi version](https://badge.fury.io/py/elasticmock.svg)](https://badge.fury.io/py/elasticmock) [![github license](https://img.shields.io/github/license/vrcmarcos/elasticmock)](https://github.com/vrcmarcos/elasticmock/blob/master/license) ![pypi - python version](https://img.shields.io/pypi/pyversions/elasticmock) ![elasticsearch version](https://img.shields.io/badge/elasticsearch-1%20%7c%202%20%7c%205%20%7c%206%20%7c%207-blue) \n\n![libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/pypi/elasticmock) [![downloads](https://pepy.tech/badge/elasticmock/month)](https://pepy.tech/project/elasticmock/month)\n\n## installation\n\n```shell\npip install elasticmock\n```\n\n## usage\n\nto use elasticmock, decorate your test method with **@elasticmock** decorator:\n\n```python\nfrom unittest import testcase\n\nfrom elasticmock import elasticmock\n\n\nclass testclass(testcase):\n\n    @elasticmock\n    def test_should_return_something_from_elasticsearch(self):\n        self.assertisnotnone(some_function_that_uses_elasticsearch())\n```\n\n### custom behaviours\n\nyou can also force the behaviour of the elasticsearch instance by importing the `elasticmock.behaviour` module:\n\n```python\nfrom unittest import testcase\n\nfrom elasticmock import behaviour\n\n\nclass testclass(testcase):\n\n    ...\n\n    def test_should_return_internal_server_error_when_simulate_server_error_is_true(self):\n        behaviour.server_failure.enable()\n        ...\n        behaviour.server_failure.disable()\n```\n\nyou can also disable all behaviours by calling `behaviour.disable_all()` (consider put this in your `def teardown(self)` method)\n\n#### available behaviours\n\n* `server_failure`: will make all calls to elasticsearch returns the following error message:\n    ```python\n    {\n        'status_code': 500,\n        'error': 'internal server error'\n    }\n    ```\n\n## code example\n\nlet's say you have a prod code snippet like this one:\n\n```python\nimport elasticsearch\n\nclass fooservice:\n\n    def __init__(self):\n        self.es = elasticsearch.elasticsearch(hosts=[{'host': 'localhost', 'port': 9200}])\n\n    def create(self, index, body):\n        es_object = self.es.index(index, body)\n        return es_object.get('_id')\n\n    def read(self, index, id):\n        es_object = self.es.get(index, id)\n        return es_object.get('_source')\n\n```\n\nthan you should be able to test this class by mocking elasticsearch using the following test class:\n\n```python\nfrom unittest import testcase\nfrom elasticmock import elasticmock\nfrom foo.bar import fooservice\n\nclass fooservicetest(testcase):\n\n    @elasticmock\n    def should_create_and_read_object(self):\n        # variables used to test\n        index = 'test-index'\n        expected_document = {\n            'foo': 'bar'\n        }\n\n        # instantiate service\n        service = fooservice()\n\n        # index document on elasticsearch\n        id = service.create(index, expected_document)\n        self.assertisnotnone(id)\n\n        # retrive dpcument from elasticsearch\n        document = service.read(index, id)\n        self.assertequals(expected_document, document)\n\n```\n\n## notes:\n\n- the mocked **search** method returns **all available documents** indexed on the index with the requested document type.\n- the mocked **suggest** method returns the exactly suggestions dictionary passed as body serialized in elasticsearch.suggest response. **atention:** if the term is an *int*, the suggestion will be ```python term + 1```. if not, the suggestion will be formatted as ```python {0}_suggestion.format(term) ```.\nexample:\n\t- **suggestion body**:\n\t```python\n    suggestion_body = {\n        'suggestion-string': {\n            'text': 'test_text',\n            'term': {\n                'field': 'string'\n            }\n        },\n        'suggestion-id': {\n            'text': 1234567,\n            'term': {\n                'field': 'id'\n            }\n        }\n    }\n    ```\n    - **suggestion response**:\n    ```python\n    {\n        'suggestion-string': [\n            {\n                'text': 'test_text',\n                'length': 1,\n                'options': [\n                    {\n                        'text': 'test_text_suggestion',\n                        'freq': 1,\n                        'score': 1.0\n                    }\n                ],\n                'offset': 0\n            }\n        ],\n        'suggestion-id': [\n            {\n                'text': 1234567,\n                'length': 1,\n                'options': [\n                    {\n                        'text': 1234568,\n                        'freq': 1,\n                        'score': 1.0\n                    }\n                ],\n                'offset': 0\n            }\n        ],\n    }\n    ```\n\n## testing\n\n```bash\npython setup.py test\n```\n\n## changelog\n\n#### 1.8.1:\n- [add support for python 3.9](https://github.com/vrcmarcos/elasticmock/pull/72) (thanks [@singingwolfboy](https://github.com/singingwolfboy))\n- [use unittest.mock instead of mock](https://github.com/vrcmarcos/elasticmock/pull/71) (thanks [@singingwolfboy](https://github.com/singingwolfboy))\n- [add must_not for bool search query](https://github.com/vrcmarcos/elasticmock/pull/70) (thanks [@t-bittarn](https://github.com/t-bittarn))\n\n\n#### 1.8.0:\n- [add multi_match](https://github.com/vrcmarcos/elasticmock/pull/63) (thanks [@carlosgalvez-tiendeo](https://github.com/carlosgalvez-tiendeo))\n- [add mget](https://github.com/vrcmarcos/elasticmock/pull/64) (thanks [@carlosgalvez-tiendeo](https://github.com/carlosgalvez-tiendeo))\n- [add create, update, and delete to bulk api](https://github.com/vrcmarcos/elasticmock/pull/65) (thanks [@fenimore](https://github.com/fenimore))\n- [add should to bool query](https://github.com/vrcmarcos/elasticmock/pull/67) (thanks [@fenimore](https://github.com/fenimore))\n- [update search api return result](https://github.com/vrcmarcos/elasticmock/pull/68) (thanks [@fenimore](https://github.com/fenimore))\n\n#### 1.7.0:\n- [add shards skipped to search and count](https://github.com/vrcmarcos/elasticmock/pull/56) (thanks [@philtweir](https://github.com/philtweir))\n- [allow 'match_all' queries in fakesearch](https://github.com/vrcmarcos/elasticmock/pull/54) (thanks [@jankislinger](https://github.com/jankislinger))\n- [query using nested attributes](https://github.com/vrcmarcos/elasticmock/pull/55) (thanks [@jankislinger](https://github.com/jankislinger))\n- [new features: range, size, aggregations](https://github.com/vrcmarcos/elasticmock/pull/57) (thanks [@jankislinger](https://github.com/jankislinger))\n- [adding \"should\" and \"minimum_should_match\" to querytype](https://github.com/vrcmarcos/elasticmock/pull/62) (thanks [@lunarie16](https://github.com/lunarie16))\n\n#### 1.6.2:\n- [add must to query type](https://github.com/vrcmarcos/elasticmock/pull/47) (thanks [@cuent](https://github.com/cuent))\n- [add match all query type](https://github.com/vrcmarcos/elasticmock/pull/48) (thanks [@cuent](https://github.com/cuent))\n\n#### 1.6.1:\n- fix twine readme.md\n\n#### 1.6.0:\n- [implements several basic search types](https://github.com/vrcmarcos/elasticmock/pull/42) (thanks [@kykopho](https://github.com/kykopho))\n- [allow ignoring of missing documents (404) for get and delete](https://github.com/vrcmarcos/elasticmock/pull/44) (thanks [@joosterman](https://github.com/joosterman))\n\n#### 1.5.1:\n- [fix tests for es > 7](https://github.com/vrcmarcos/elasticmock/pull/38) (thanks [@chesstrian](https://github.com/chesstrian))\n\n#### 1.5.0:\n- [**fakeelasticsearch**: mocked **indices** property](https://github.com/vrcmarcos/elasticmock/issues/22)\n  - **fakeindicesclient**: mocked **create**, **exists**, **refresh** and **delete** methods\n- [**fakeelasticsearch**: mocked **cluster** property](https://github.com/vrcmarcos/elasticmock/issues/8)\n  - **fakeclusterclient**: mocked **health** method\n\n#### 1.4.0\n\n- [fix es.index regression issue](https://github.com/vrcmarcos/elasticmock/issues/34)\n- [add 'force server failure' feature as requested](https://github.com/vrcmarcos/elasticmock/issues/28)\n- reformat code to be compliant with pep8\n- add support to python 3.8\n\n#### 1.3.7\n\n- [adding fix for updating existing doc using index](https://github.com/vrcmarcos/elasticmock/pull/32) (thanks [@adityaghosh](https://github.com/adityaghosh))\n- [added bulk method](https://github.com/vrcmarcos/elasticmock/pull/30) (thanks [@charl-van-niekerk](https://github.com/charl-van-niekerk))\n- [add default value to doc_type in index method as it is by default set to '\\_doc'](https://github.com/vrcmarcos/elasticmock/pull/27) (thanks [@mohantyashish109](https://github.com/mohantyashish109))\n- [add support for python 3.7](https://github.com/vrcmarcos/elasticmock/pull/25) (thanks [@asherf](https://github.com/asherf))\n\n#### 1.3.6\n\n- [fix installation issue](https://github.com/vrcmarcos/elasticmock/pull/20) (thanks [@tdhopper](https://github.com/tdhopper))\n\n#### 1.3.5\n\n- [fix 1.3.4 release](https://github.com/vrcmarcos/elasticmock/pull/19) (thanks [@infinite-joy](https://github.com/infinite-joy))\n\n#### 1.3.4\n\n- [added aggregations to response if requested](https://github.com/vrcmarcos/elasticmock/pull/15) (thanks [@snakeye](https://github.com/snakeye))\n- [implementing new methods for scrolling](https://github.com/vrcmarcos/elasticmock/pull/17) (thanks [@tcatrain](https://github.com/tcatrain))\n\n#### 1.3.3\n\n- [search: doc_type can be a list](https://github.com/vrcmarcos/elasticmock/pull/16) (thanks [@garncarz](https://github.com/garncarz))\n- [exclude tests package](https://github.com/vrcmarcos/elasticmock/pull/13) (thanks [@jmlw](https://github.com/jmlw))\n- [make the fakeelasticsearch __init__ signature match the one from elasticsearch](https://github.com/vrcmarcos/elasticmock/pull/10) (thanks [@xrmx](https://github.com/xrmx))\n- [improve search and count](https://github.com/vrcmarcos/elasticmock/pull/7) (thanks [@frivoire](https://github.com/frivoire))\n\n#### 1.3.2\n\n- **elasticmock**: python 3 fixes (thanks [@barseghyanartur](https://github.com/barseghyanartur))\n- **test**: add information on testing (thanks [@barseghyanartur](https://github.com/barseghyanartur))\n- **readme.md**: fixed typo (thanks [@bowlofstew](https://github.com/bowlofstew))\n\n#### 1.3.1\n\n- **elasticmock**: allow the same arguments to the mock that elasticsearch.elasticsearch allows (thanks [@mattbreeden](https://github.com/mattbreeden))\n\n#### 1.3.0:\n- **fakeelasticsearch**: mocked **count** method (thanks [@theoresources](https://github.com/theoresources))\n\n#### 1.2.0:\n- **fakeelasticsearch**: mocked **suggest** method\n\n#### 1.1.1:\n- **elasticmock**: changing the cleanup older fakeelasticsearch's instances order\n- **fakeelasticsearch.index**: changing the method signature to correctly overrides the elasticsearch.index method\n\n#### 1.1.0:\n- **fakeelasticsearch**: mocked **delete** method\n\n#### 1.0.1:\n- **setup.py**: fixed github link\n\n#### 1.0.0:\n- **elasticmock**: created **@elasticmock** decorator\n- **fakeelasticsearch**: mocked **exists**, **get**, **get_source**, **index**, **info**, **search** and **ping** method",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "elasticmock",
  "package_url": "https://pypi.org/project/ElasticMock/",
  "project_url": "https://pypi.org/project/ElasticMock/",
  "project_urls": {
    "Homepage": "https://github.com/vrcmarcos/elasticmock"
  },
  "release_url": "https://pypi.org/project/ElasticMock/1.8.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python elasticsearch mock for test purposes",
  "version": "1.8.1",
  "releases": [],
  "developers": [
    "marcos_cardoso",
    "vrcmarcos@gmail.com"
  ],
  "kwds": "elasticmock some_function_that_uses_elasticsearch test_should_return_something_from_elasticsearch elasticsearch fakeelasticsearch",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_elasticmock",
  "homepage": "https://github.com/vrcmarcos/elasticmock",
  "release_count": 22,
  "dependency_ids": []
}
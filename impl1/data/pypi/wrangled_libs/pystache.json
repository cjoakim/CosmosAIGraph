{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "pystache\n========\n\n|ci| |conda| |coverage| |bandit| |release|\n\n|pre| |cov| |pylint|\n\n|tag| |license| |python|\n\n\nthis updated fork of pystache is currently tested on python 3.8+ and in\nconda, on linux, macos, and windows (python 2.7 is no longer supported).\n\n|logo|\n\n`pystache <https://github.com/pennydreadfulmtg/pystache>`__ is a python\nimplementation of `mustache <https://github.com/mustache/mustache/>`__.\nmustache is a framework-agnostic, logic-free templating system inspired\nby `ctemplate <https://code.google.com/p/google-ctemplate/>`__ and\net. like ctemplate, mustache \"emphasizes separating logic from presentation:\nit is impossible to embed application logic in this template language.\"\n\nthe `mustache(5) <https://mustache.github.io/mustache.5.html>`__ man\npage provides a good introduction to mustache's syntax. for a more\ncomplete (and more current) description of mustache's behavior, see the\nofficial `mustache spec <https://github.com/mustache/spec>`__.\n\npystache is `semantically versioned <https://semver.org>`__ and older\nversions can still be found on `pypi <https://pypi.python.org/pypi/pystache>`__.\nthis version of pystache now passes all tests in `version 1.1.3\n<https://github.com/mustache/spec/tree/v1.1.3>`__ of the spec.\n\n\nrequirements\n============\n\npystache is tested with:\n\n-  python 3.8\n-  python 3.9\n-  python 3.10\n-  python 3.11\n-  conda (py38 and py310)\n\njson support is needed only for the command-line interface and to run\nthe spec tests; pyyaml can still be used (see the develop section).\n\nofficial support for python 2 has ended with pystache version 0.6.0.\n\n\n.. note:: this project uses setuptools_scm_ to generate and maintain the\n          version file, which only gets included in the sdist/wheel\n          packages. in a fresh clone, running any of the tox_ commands\n          should generate the current version file.\n\n.. _setuptools_scm: https://github.com/pypa/setuptools_scm\n.. _tox: https://github.com/tox-dev/tox\n\n\nquick start\n===========\n\nbe sure to get the latest release from either pypi or github.\n\ninstall it\n----------\n\nfrom pypi::\n\n  $ pip install pystache\n\nor github::\n\n  $ pip install -u pystache -f https://github.com/pennydreadfulmtg/pystache/releases/\n\n\nand test it::\n\n  $ pystache-test\n\nto install and test from source (e.g. from github), see the develop\nsection.\n\nuse it\n------\n\nopen a python console::\n\n  >>> import pystache\n  >>> print(pystache.render('hi {{person}}!', {'person': 'mom'}))\n  hi mom!\n\nyou can also create dedicated view classes to hold your view logic.\n\nhere's your view class (in ../pystache/tests/examples/readme.py):\n\n::\n\n  class sayhello(object):\n      def to(self):\n          return \"pizza\"\n\ninstantiating like so:\n\n::\n\n  >>> from pystache.tests.examples.readme import sayhello\n  >>> hello = sayhello()\n\nthen your template, say_hello.mustache (by default in the same directory\nas your class definition):\n\n::\n\n  hello, {{to}}!\n\npull it together:\n\n::\n\n  >>> renderer = pystache.renderer()\n  >>> print(renderer.render(hello))\n  hello, pizza!\n\nfor greater control over rendering (e.g. to specify a custom template\ndirectory), use the ``renderer`` class like above. one can pass\nattributes to the renderer class constructor or set them on a renderer\ninstance. to customize template loading on a per-view basis, subclass\n``templatespec``. see the docstrings of the\n`renderer <https://github.com/pennydreadfulmtg/pystache/blob/master/pystache/renderer.py>`__\nclass and\n`templatespec <https://github.com/pennydreadfulmtg/pystache/blob/master/pystache/template_spec.py>`__\nclass for more information.\n\nyou can also pre-parse a template:\n\n::\n\n  >>> parsed = pystache.parse(u\"hey {{#who}}{{.}}!{{/who}}\")\n  >>> print(parsed)\n  ['hey ', _sectionnode(key='who', index_begin=12, index_end=18, parsed=[_escapenode(key='.'), '!'])]\n\nand then:\n\n::\n\n  >>> print(renderer.render(parsed, {'who': 'pops'}))\n  hey pops!\n  >>> print(renderer.render(parsed, {'who': 'you'}))\n  hey you!\n\n\nunicode\n-------\n\nthis section describes how pystache handles unicode, strings, and\nencodings.\n\ninternally, pystache uses `only unicode strings`_ (``str`` in python 3).\nfor input, pystache accepts byte strings (``bytes`` in python 3).\nfor output, pystache's template rendering methods return only unicode.\n\n.. _only unicode strings: https://docs.python.org/howto/unicode.html#tips-for-writing-unicode-aware-programs\n\npystache's ``renderer`` class supports a number of attributes to control\nhow pystache converts byte strings to unicode on input. these include\nthe ``file_encoding``, ``string_encoding``, and ``decode_errors`` attributes.\n\nthe ``file_encoding`` attribute is the encoding the renderer uses to\nconvert to unicode any files read from the file system. similarly,\n``string_encoding`` is the encoding the renderer uses to convert any other\nbyte strings encountered during the rendering process into unicode (e.g.\ncontext values that are encoded byte strings).\n\nthe ``decode_errors`` attribute is what the renderer passes as the\n``errors`` argument to python's built-in unicode-decoding function\n(``str()`` in python 3). the valid values for this argument are\n``strict``, ``ignore``, and ``replace``.\n\neach of these attributes can be set via the ``renderer`` class's\nconstructor using a keyword argument of the same name. see the renderer\nclass's docstrings for further details. in addition, the ``file_encoding``\nattribute can be controlled on a per-view basis by subclassing the\n``templatespec`` class. when not specified explicitly, these attributes\ndefault to values set in pystache's ``defaults`` module.\n\n\ndevelop\n=======\n\nto test from a source distribution (without installing)::\n\n  $ python test_pystache.py\n\nto test pystache with multiple versions of python (with a single\ncommand!) and different platforms, you can use [tox](https://pypi.python.org/pypi/tox)::\n\n  $ pip install tox\n  $ tox -e py\n\nto run tests on multiple versions with coverage, run::\n\n  $ tox -e py38-linux,py39-linux  # for example\n\n(substitute your platform above, eg, macos or windows)\n\nthe source distribution tests also include doctests and tests from the\nmustache spec. to include tests from the mustache spec in your test\nruns::\n\n  $ git submodule update --init\n\nthe test harness parses the spec's (more human-readable) yaml files if\n`pyyaml <http://pypi.python.org/pypi/pyyaml>`__ is present. otherwise,\nit parses the json files. to install pyyaml::\n\n  $ pip install pyyaml  # note this is installed automatically by tox\n\nonce the submodule is available, you can run the full test set with::\n\n  $ tox -e setup -- ext/spec/specs\n\n\nmaking changes & contributing\n-----------------------------\n\nwe use the gitchangelog_ action to generate our github release page, as\nwell as the gitchangelog message format to help it categorize/filter\ncommits for a tidier release page. please use the appropriate action\nmodifiers in any pull requests.\n\nthis repo is also pre-commit_ enabled for various linting and format\nchecks.  the checks run automatically on commit and will fail the\ncommit (if not clean) with some checks performing simple file corrections.\n\nif other checks fail on commit, the failure display should explain the error\ntypes and line numbers. note you must fix any fatal errors for the\ncommit to succeed; some errors should be fixed automatically (use\n``git status`` and ``git diff`` to review any changes).\n\nnote ``pylint`` is the primary check that requires your own input, as well\nas a decision as to the appropriate fix action.  you must fix any ``pylint``\nwarnings (relative to the baseline config score) for the commit to succeed.\n\nsee the following pages for more information on gitchangelog and pre-commit.\n\n.. inclusion-marker-1\n\n* generate-changelog_\n* pre-commit-config_\n* pre-commit-usage_\n\n.. _generate-changelog:  docs/source/dev/generate-changelog.rst\n.. _pre-commit-config: docs/source/dev/pre-commit-config.rst\n.. _pre-commit-usage: docs/source/dev/pre-commit-usage.rst\n.. inclusion-marker-2\n\nyou will need to install pre-commit before contributing any changes;\ninstalling it using your system's package manager is recommended,\notherwise install with pip into your usual virtual environment using\nsomething like::\n\n  $ sudo emerge pre-commit  --or--\n  $ pip install pre-commit\n\nthen install it into the repo you just cloned::\n\n  $ git clone https://github.com/pennydreadfulmtg/pystache\n  $ cd pystache/\n  $ pre-commit install\n\nit's usually a good idea to update the hooks to the latest version::\n\n    pre-commit autoupdate\n\n.. _gitchangelog: https://github.com/sarnold/gitchangelog-action\n.. _pre-commit: https://pre-commit.com/\n\n\nmailing list (old)\n------------------\n\nthere is(was) a `mailing list`_. note that there is a bit of a delay\nbetween posting a message and seeing it appear in the mailing list archive.\n\n\n.. _mailing list: https://librelist.com/browser/pystache/\n\ncredits\n=======\n\n  >>> import pystache\n  >>> context = { 'author': 'chris wanstrath', 'maintainer': 'chris jerdonek','refurbisher': 'steve arnold', 'new_maintainer': 'thomas david baker' }\n  >>> print(pystache.render(\"author: {{author}}\\nmaintainer: {{maintainer}}\\nrefurbisher: {{refurbisher}}\\nnew maintainer: {{new_maintainer}}\", context))\n  author: chris wanstrath\n  maintainer: chris jerdonek\n  refurbisher: steve arnold\n  new maintainer: thomas david baker\n\n\npystache logo by `david phillips <http://davidphillips.us/>`__ is\nlicensed under a `creative commons attribution-sharealike 3.0 unported\nlicense <https://creativecommons.org/licenses/by-sa/3.0/deed.en_us>`__.\n\n|ccbysa|\n\n\n.. |ci| image:: https://github.com/pennydreadfulmtg/pystache/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/ci.yml\n    :alt: ci status\n\n.. |conda| image:: https://github.com/pennydreadfulmtg/pystache/actions/workflows/conda.yml/badge.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/conda.yml\n    :alt: conda status\n\n.. |coverage| image:: https://github.com/pennydreadfulmtg/pystache/actions/workflows/coverage.yml/badge.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/coverage.yml\n    :alt: coverage workflow\n\n.. |bandit| image:: https://github.com/pennydreadfulmtg/pystache/actions/workflows/bandit.yml/badge.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/bandit.yml\n    :alt: security check - bandit\n\n.. |release| image:: https://github.com/pennydreadfulmtg/pystache/actions/workflows/release.yml/badge.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/release.yml\n    :alt: release status\n\n.. |cov| image:: https://raw.githubusercontent.com/pennydreadfulmtg/pystache/badges/master/test-coverage.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/\n    :alt: test coverage\n\n.. |pylint| image:: https://raw.githubusercontent.com/pennydreadfulmtg/pystache/badges/master/pylint-score.svg\n    :target: https://github.com/pennydreadfulmtg/pystache/actions/workflows/pylint.yml\n    :alt: pylint score\n\n.. |license| image:: https://img.shields.io/github/license/pennydreadfulmtg/pystache\n    :target: https://github.com/pennydreadfulmtg/pystache/blob/master/license\n    :alt: license\n\n.. |tag| image:: https://img.shields.io/github/v/tag/pennydreadfulmtg/pystache?color=green&include_prereleases&label=latest%20release\n    :target: https://github.com/pennydreadfulmtg/pystache/releases\n    :alt: github tag\n\n.. |python| image:: https://img.shields.io/badge/python-3.6+-blue.svg\n    :target: https://www.python.org/downloads/\n    :alt: python\n\n.. |pre| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logocolor=white\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\n.. |logo| image:: gh/images/logo_phillips_small.png\n\n.. |ccbysa| image:: https://i.creativecommons.org/l/by-sa/3.0/88x31.png\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright (c) 2012 chris jerdonek.  all rights reserved.  copyright (c) 2009 chris wanstrath  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "pystache",
  "package_url": "https://pypi.org/project/pystache/",
  "project_url": "https://pypi.org/project/pystache/",
  "project_urls": {
    "Changelog": "https://github.com/PennyDreadfulMTG/pystache/blob/master/CHANGELOG.rst",
    "Documentation": "http://mustache.github.io/",
    "Homepage": "https://github.com/PennyDreadfulMTG/pystache",
    "Repository": "https://github.com/PennyDreadfulMTG/pystache.git"
  },
  "release_url": "https://pypi.org/project/pystache/0.6.5/",
  "requires_dist": [
    "importlib-metadata (>=4.6) ; python_version < \"3.10\"",
    "coverage ; extra == 'cov'",
    "coverage-python-version ; extra == 'cov'",
    "sphinx ; extra == 'doc'",
    "sphinx-git ; extra == 'doc'",
    "recommonmark ; extra == 'doc'",
    "sphinx-rtd-theme ; extra == 'doc'",
    "sphinxcontrib-apidoc ; extra == 'doc'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "mustache for python",
  "version": "0.6.5",
  "releases": [],
  "developers": [
    "bakert@gmail.com",
    "chris@ozmm.org"
  ],
  "kwds": "pystache mustache test_pystache py38 pyyaml",
  "license_kwds": "copyright liable permission liability noninfringement",
  "libtype": "pypi",
  "id": "pypi_pystache",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_coverage_python_version",
    "pypi_importlib_metadata",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_recommonmark",
    "pypi_sphinx",
    "pypi_sphinx_git",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_apidoc"
  ]
}
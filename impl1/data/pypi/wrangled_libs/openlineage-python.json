{
  "classifiers": [
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# openlineage-python\n\nto install from source, run:\n\n```bash\n$ python -m pip install .\n```\n\n## configuration\n### config file\n\nthe most common way to configure the openlineage client is by `.yaml` file, which contains all the\ndetails of how to connect to your openlineage backend.\n\nthe config file is located by:\n1) looking at the `openlineage_config` environment variable\n2) looking for the `openlineage.yml` file in the current working directory\n3) looking for the `openlineage.yml` file in the `$home/.openlineage` directory.\n\ndifferent ways of connecting to openlineage backend are supported\nby the standardized `transport` interface.\nthis is an example config for specifying `http` transport:\n\n```yaml\ntransport:\n  type: \"http\"\n  url: \"https://backend:5000\"\n  auth:\n    type: \"api_key\"\n    api_key: \"f048521b-dfe8-47cd-9c65-0cb07d57591e\"\n```\n\nthe `type` property is required. it can be one of the built-in transports or a custom one.\nthere are four built-in transports, `http`, `kafka`, `console` and `file`.\ncustom transports `type` is a fully qualified class name that can be imported.\n\nthe rest of the properties are defined by the particular transport.\nspecifications for the built-in options are below.\n\n#### http\n\n* `url` - required string parameter.\n* `endpoint` - optional string parameter specifying the endpoint to which events are sent. by default `api/v1/lineage`.\n* `timeout` - optional float parameter specifying the timeout when sending events. by default 5 seconds.\n* `verify` optional boolean attribute specifying if the client should verify tls certificates of the backend. by default true.\n* `auth` - optional dictionary specifying authentication options. the type property is required.\n    * `type`: required property if an auth dictionary is set. set to `api_key` or to the fully qualified class name of your tokenprovider.\n    * `api_key`: if `api_key` type is set, it sets value at `authentication` http header as `bearer`.\n\n#### kafka\n\nfor kafkatransport, `confluent-kafka` needs to be installed.\nyou can also install `pip install openlineage-python[kafka]`\n\n* `config` - required string parameter. a dictionary that contains a kafka producer config as in [kafka producer config](https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#kafka-client-configuration).\n* `topic` - required string parameter. the topic on what events will be sent.\n* `flush` - optional boolean parameter. if set to true, kafka will flush after each event. by default true.\n\n#### file\n\n* `log_file_path` - required string parameter specifying the path of the file (if `append` is true a file path is expected, otherwise a file prefix is expected).\n* `append` - optional boolean parameter. if set to true, each event will be appended to a single file (log_file_path), otherwise, all event would be written separately in distinct files suffixed by a timestring. by default false.\n\n### custom transport\n\nto implement a custom transport, follow the instructions in the `openlineage/client/transport/transport.py` file.\n\n### config as env vars\n\nif there is no config file found, the openlineage client looks at environment variables.\nthis way of configuring the client supports only `http` transport, and only a subset of its config.\n\n* `openlineage_url` - point to the service that will consume openlineage events.\n* `openlineage_endpoint` - specify the endpoint to send the openlineage events.\n* `openlineage_api_key` - set if the consumer of openlineage events requires a `bearer` authentication key.\n\n`openlineage_url`, `openlineage_endpoint`, and `openlineage_api_key` can also be set up manually when creating a client instance.\n\n#### logging level\nin addition to conventional logging approaches, the openlineage client library provides an alternative way of configuring its logging behavior. by setting the `openlineage_client_logging` environment variable, you can establish the logging level for the `openlineage.client` and its child modules.\n",
  "docs_url": null,
  "keywords": "openlineage",
  "license": "",
  "name": "openlineage-python",
  "package_url": "https://pypi.org/project/openlineage-python/",
  "project_url": "https://pypi.org/project/openlineage-python/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/openlineage-python/1.7.0/",
  "requires_dist": [
    "attrs>=20.0",
    "python-dateutil>=2.8.2",
    "pyyaml>=5.4",
    "requests>=2.20.0",
    "confluent-kafka>=2.1.1; extra == 'kafka'",
    "covdefaults>=2.3; extra == 'test'",
    "pytest-cov>=4.1; extra == 'test'",
    "pytest-mock>=3.10; extra == 'test'",
    "pytest>=7.3.1; extra == 'test'",
    "pyyaml>=5.4; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "openlineage python client",
  "version": "1.7.0",
  "releases": [],
  "developers": [
    "info@openlineage.io"
  ],
  "kwds": "openlineage_config openlineage_api_key openlineage_endpoint openlineage_url openlineage",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_openlineage_python",
  "homepage": "",
  "release_count": 65,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_confluent_kafka",
    "pypi_covdefaults",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_python_dateutil",
    "pypi_pyyaml",
    "pypi_requests"
  ]
}
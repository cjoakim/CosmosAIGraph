{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "**main branch status**\n\n![](https://github.com/pitchblack408/pyawscron/actions/workflows/python-pyawscron.yml/badge.svg?branch=main)\n\n**develop branch status**\n\n![](https://github.com/pitchblack408/pyawscron/actions/workflows/python-pyawscron.yml/badge.svg?branch=develop)\n\n\n\n\n# pyawscron\n\na python port from a typescript project.\n\nhttps://github.com/beemhq/aws-cron-parser\n\n# install\n    pip install pyawscron\n\n## [aws cron expressions](https://docs.aws.amazon.com/amazoncloudwatch/latest/events/scheduledevents.html#cronexpressions)\n### cron(fields)\n<table>\n   <thead>\n      <tr>\n         <th><b>field</b></th>\n         <th><b>values</b></th>\n         <th><b>wildcards</b></th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <td>\n            <p>minutes</p>\n         </td>\n         <td>\n            <p>0-59</p>\n         </td>\n         <td>\n            <p>, - * /</p>\n         </td>\n      </tr>\n      <tr>\n         <td>\n            <p>hours</p>\n         </td>\n         <td>\n            <p>0-23</p>\n         </td>\n         <td>\n            <p>, - * /</p>\n         </td>\n      </tr>\n      <tr>\n         <td>\n            <p>day-of-month</p>\n         </td>\n         <td>\n            <p>1-31</p>\n         </td>\n         <td>\n            <p>, - * ? / l w</p>\n         </td>\n      </tr>\n      <tr>\n         <td>\n            <p>month</p>\n         </td>\n         <td>\n            <p>1-12 or jan-dec</p>\n         </td>\n         <td>\n            <p>, - * /</p>\n         </td>\n      </tr>\n      <tr>\n         <td>\n            <p>day-of-week</p>\n         </td>\n         <td>\n            <p>1-7 or sun-sat</p>\n         </td>\n         <td>\n            <p>, - * ? l #</p>\n         </td>\n      </tr>\n      <tr>\n         <td>\n            <p>year</p>\n         </td>\n         <td>\n            <p>1970-2199</p>\n         </td>\n         <td>\n            <p>, - * /</p>\n         </td>\n      </tr>\n   </tbody>\n</table>\n\n### wildcards\n* the , (comma) wildcard includes additional values. in the month field, jan,feb,mar would include january, february, and march.\n* the - (dash) wildcard specifies ranges. in the day field, 1-15 would include days 1 through 15 of the specified month.\n* the * (asterisk) wildcard includes all values in the field. in the hours field, * would include every hour. you cannot use * in both the day-of-month and day-of-week fields. if you use it in one, you must use ? in the other.\n* the / (forward slash) wildcard specifies increments. in the minutes field, you could enter 1/10 to specify every tenth minute, starting from the first minute of the hour (for example, the 11th, 21st, and 31st minute, and so on).\n* the ? (question mark) wildcard specifies one or another. in the day-of-month field you could enter 7 and if you didn't care what day of the week the 7th was, you could enter ? in the day-of-week field.\n* the l wildcard in the day-of-month or day-of-week fields specifies the last day of the month or week.\n* the w wildcard in the day-of-month field specifies a weekday. in the day-of-month field, 3w specifies the weekday closest to the third day of the month.\n* the # wildcard in the day-of-week field specifies a certain instance of the specified day of the week within a month. for example, 3#2 would be the second tuesday of the month: the 3 refers to tuesday because it is the third day of each week, and the 2 refers to the second day of that type within the month.\n\n\n\n# iterative use\n\n**next**\n\n    from pyawscron import awscron\n    import datetime\n    import calendar\n    \n    def main():\n    \n        aws_cron = awscron(\"0 5 4 * ? *\")\n        today = datetime.datetime.utcnow().date()\n        start_date = datetime.datetime(today.year, today.month, 1, tzinfo=datetime.timezone.utc)\n        last_day = calendar.monthrange(today.year, today.month)[1]\n        end_date = datetime.datetime(today.year, today.month, last_day, tzinfo=datetime.timezone.utc)\n        dt=start_date\n        while true:\n            dt = aws_cron.occurrence(dt).next()\n            if dt > end_date:\n                break\n            print(dt)\n    \n    \n    if __name__ == \"__main__\":\n        main()\n    \n**prev**\n\n    from pyawscron import awscron\n    import datetime\n    \n    def main():\n    \n        aws_cron = awscron(\"0 5 4 * ? *\")\n        today = datetime.datetime.utcnow().date()\n        start_date = datetime.datetime(today.year, today.month, 1, tzinfo=datetime.timezone.utc)\n        end_date = datetime.datetime(today.year, today.month-1, 1, tzinfo=datetime.timezone.utc)\n        dt=start_date\n        while true:\n            dt = aws_cron.occurrence(dt).prev()\n            if dt < end_date:\n                break\n            print(dt)\n    \n    \n    if __name__ == \"__main__\":\n        main()\n\n## helper methods\n### get_all_schedule_bw_dates\nreturns a list of utc datetime objects using a start and end date. the end date has a flag to be inclusive or exclusive.\n\n**note:** this method has no limit on how many datetime object can be returned. use iterative approach or get_next_n_schedule if memory becomes an issue.\n\n```\nfrom_dt = datetime.datetime(2021, 8, 7, 8, 30, 57, tzinfo=datetime.timezone.utc)\nto_date = datetime.datetime(2021, 8, 7, 11, 30, 57, tzinfo=datetime.timezone.utc)\n\nawscron.get_all_schedule_bw_dates(from_dt, to_date, '0/23 * * * ? *')\n\n# resulting list\n[datetime.datetime(2021, 8, 7, 8, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 23, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 23, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 11, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 11, 23, tzinfo=datetime.timezone.utc)]\n```\n### get_next_n_schedule\nreturns a list with the n next datetimes that match the aws cron expression from the provided start date.\n\n```\nfrom_dt = datetime.datetime(2021, 8, 7, 8, 30, 57, tzinfo=datetime.timezone.utc)\n\nawscron.get_next_n_schedule(10, from_dt, '0/23 * * * ? *')\n\n# resulting list\n[datetime.datetime(2021, 8, 7, 8, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 23, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 9, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 23, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 10, 46, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 11, 0, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 11, 23, tzinfo=datetime.timezone.utc),\ndatetime.datetime(2021, 8, 7, 11, 46, tzinfo=datetime.timezone.utc)]\n```\n### get_prev_n_schedule\nreturns a list with the n prev datetimes that match the aws cron expression from the provided start date.\n\n```\nfrom_dt = datetime.datetime(2021, 8, 7, 11, 50, 57, tzinfo=datetime.timezone.utc)\n\nawscron.get_prev_n_schedule(10, from_dt, '0/23 * * * ? *')\n\n# resulting list\n[datetime.datetime(2021, 8, 7, 11, 46, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 11, 23, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 11, 0, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 10, 46, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 10, 23, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 10, 0, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 9, 46, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 9, 23, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 9, 0, tzinfo=datetime.timezone.utc),\n datetime.datetime(2021, 8, 7, 8, 46, tzinfo=datetime.timezone.utc)]\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pyawscron",
  "package_url": "https://pypi.org/project/pyawscron/",
  "project_url": "https://pypi.org/project/pyawscron/",
  "project_urls": {
    "Bug Tracker": "https://github.com/pitchblack408/pyawscron/issues",
    "Homepage": "https://github.com/pitchblack408/pyawscron"
  },
  "release_url": "https://pypi.org/project/pyawscron/1.0.6/",
  "requires_dist": [
    "python-dateutil (~=2.8.1)"
  ],
  "requires_python": ">=3.6",
  "summary": "an aws cron parser",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "michael_martin",
    "pitchblack408@gmail.com"
  ],
  "kwds": "aws_cron cron pyawscron scheduledevents workflows",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyawscron",
  "homepage": "https://github.com/pitchblack408/pyawscron",
  "release_count": 7,
  "dependency_ids": [
    "pypi_python_dateutil"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: rust",
    "topic :: software development",
    "topic :: software development :: compilers",
    "topic :: software development :: interpreters"
  ],
  "description": "# <img height=\"48\" src=\"https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png\" alt=\"wasmer logo\" valign=\"middle\"> wasmer python [![pypi version](https://img.shields.io/pypi/v/wasmer)](https://badge.fury.io/py/wasmer) [![wasmer python documentation](https://img.shields.io/badge/docs-read-green)](https://wasmerio.github.io/wasmer-python/api/wasmer/) [![wasmer pypi downloads](https://pepy.tech/badge/wasmer)](https://pypi.org/project/wasmer/) [![wasmer slack channel](https://img.shields.io/static/v1?label=chat&message=on%20slack&color=green)](https://slack.wasmer.io)\n\na complete and mature webassembly runtime for python based on\n[wasmer](https://github.com/wasmerio/wasmer).\n\nfeatures:\n\n  * **easy to use**: the `wasmer` api mimics the standard webassembly api,\n  * **fast**: `wasmer` executes the webassembly modules as fast as\n    possible, close to **native speed**,\n  * **safe**: all calls to webassembly will be fast, but more\n    importantly, completely safe and sandboxed,\n  * **modular**: `wasmer` can compile the webassembly modules with\n    different engines or compiler.\n\n**documentation**: [browse the detailed api\ndocumentation](https://wasmerio.github.io/wasmer-python/api/wasmer/wasmer.html) full of\nexamples.\n\n**examples** as tutorials: [browse the `examples/`\ndirectory](https://github.com/wasmerio/wasmer-python/tree/master/examples),\nit's the best place for a complete introduction!\n\n## quick introduction\n\nthe `wasmer` package brings the required api to execute webassembly\nmodules. in a nutshell, `wasmer` compiles the webassembly module into\ncompiled code, and then executes it. `wasmer` is designed to work in\nvarious environments and platforms: from nano single-board computers\nto large and powerful servers, including more exotic ones. to address\nthose requirements, wasmer provides 2 engines and 3 compilers.\n\nsuccinctly, an _engine_ is responsible to drive the _compilation_ and\nthe _execution_ of a webassembly module. by extension, a _headless_\nengine can only execute a webassembly module, i.e. a module that has\npreviously been compiled, or compiled, serialized and deserialized. by\ndefault, the `wasmer` package comes with 2 headless engines:\n\n1. `wasmer.engine.jit`, the compiled machine code lives in memory,\n2. `wasmer.engine.native`, the compiled machine code lives in a shared\n   object file (`.so`, `.dylib`, or `.dll`), and is natively executed.\n\nbecause `wasmer` does not embed compilers in its package, engines are\nheadless, i.e. they can't compile webassembly module; they can only\nexecute them. compilers live in their own standalone packages. let's\nbriefly introduce them:\n\n| compiler package | description | pypi |\n|-|-|-|\n| `wasmer_compiler_singlepass` | super fast compilation times, slower execution times. not prone to jit-bombs. *ideal for blockchains* | [![on pypi](https://img.shields.io/pypi/v/wasmer_compiler_singlepass)](https://pypi.org/project/wasmer_compiler_singlepass/) [![downloads](https://pepy.tech/badge/wasmer_compiler_singlepass)](https://pypi.org/project/wasmer_compiler_singlepass/) |\n| `wasmer_compiler_cranelift` | fast compilation times, fast execution times. *ideal for development* | [![on pypi](https://img.shields.io/pypi/v/wasmer_compiler_cranelift)](https://pypi.org/project/wasmer_compiler_cranelift/) [![downloads](https://pepy.tech/badge/wasmer_compiler_cranelift)](https://pypi.org/project/wasmer_compiler_cranelift/) |\n| `wasmer_compiler_llvm` | slow compilation times, very fast execution times (close to native, sometimes faster). *ideal for production* | [![on pypi](https://img.shields.io/pypi/v/wasmer_compiler_llvm)](https://pypi.org/project/wasmer_compiler_llvm/) [![downloads](https://pepy.tech/badge/wasmer_compiler_llvm)](https://pypi.org/project/wasmer_compiler_llvm/) |\n\nwe generally recommend `wasmer_compiler_cranelift` for development\npurposes and `wasmer_compiler_llvm` in production.\n\nlearn more by reading [the documentation of the `wasmer.engine`\nsubmodule](https://wasmerio.github.io/wasmer-python/api/wasmer/wasmer.html#engine).\n\n## install\n\nto install the `wasmer` python package, and let's say the\n`wasmer_compiler_cranelift` compiler, just run those commands in your shell:\n\n```sh\n$ pip install wasmer==1.1.0\n$ pip install wasmer_compiler_cranelift==1.1.0\n```\n\nand you're ready to get fun!\n\n## example\n\nwe highly recommend to read the\n[`examples/`](https://github.com/wasmerio/wasmer-python/tree/master/examples)\ndirectory, which contains a sequence of examples/tutorials. it's the\nbest place to learn by reading examples.\n\nbut for the most eager of you, and we know you're numerous you\nmischievous, there is a quick toy program in\n`examples/appendices/simple.rs`, written in rust:\n\n```rust\n#[no_mangle]\npub extern fn sum(x: i32, y: i32) -> i32 {\n    x + y\n}\n```\n\nafter compilation to webassembly, the\n[`examples/appendices/simple.wasm`](https://github.com/wasmerio/wasmer-python/blob/master/examples/appendices/simple.wasm)\nbinary file is generated. ([download\nit](https://github.com/wasmerio/wasmer-python/raw/master/examples/appendices/simple.wasm)).\n\nthen, we can execute it in python:\n\n```python\nfrom wasmer import engine, store, module, instance\nfrom wasmer_compiler_cranelift import compiler\n\n# let's define the store, that holds the engine, that holds the compiler.\nstore = store(engine.jit(compiler))\n\n# let's compile the module to be able to execute it!\nmodule = module(store, open('simple.wasm', 'rb').read())\n\n# now the module is compiled, we can instantiate it.\ninstance = instance(module)\n\n# call the exported `sum` function.\nresult = instance.exports.sum(5, 37)\n\nprint(result) # 42!\n```\n\nand then, finally, enjoy by running:\n\n```sh\n$ python examples/appendices/simple.py\n```\n\n# development\n\nthe python extension is written in [rust], with [`pyo3`] and\n[`maturin`].\n\nfirst, you need to install rust and python. we will not make you the\naffront to explain to you how to install python (if you really need,\ncheck [`pyenv`](https://github.com/pyenv/pyenv/)). for rust though, we\nadvise to use [`rustup`](https://rustup.rs/), then:\n\n```sh\n$ rustup install stable\n```\n\nto set up your environment, you'll need [`just`], and then, install\nthe prelude of this project:\n\n```sh\n$ cargo install just\n$ just --list # to learn about all the available recipes\n$ just prelude\n```\n\nit will install `pyo3` and `maturin` for python and for rust. it will\nalso install [`virtualenv`].\n\nthen, simply run:\n\n```sh\n$ source .env/bin/activate\n$ just build api\n$ just build compiler-cranelift\n$ python examples/appendices/simple.py\n```\n\n## supported platforms\n\nwe try to provide wheels for as many platforms and architectures as\npossible. for the moment, here are the supported platforms and\narchitectures:\n\n<table>\n  <thead>\n    <tr>\n      <th>platform</th>\n      <th>architecture</th>\n      <th>triple</th>\n      <th colspan=\"2\">packages</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"8\">linux</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-unknown-linux-gnu</code></td>\n      <td><code>wasmer</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\"><code>aarch64</code></td>\n      <td rowspan=\"4\"><code>aarch64-unknown-linux-gnu</code></td>\n      <td><code>wasmer</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>\u274c <sup><a href=\"#wheels-note-1\">1</a></sup></td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">darwin</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-apple-darwin</code></td>\n      <td><code>wasmer</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">windows</td>\n      <td rowspan=\"4\"><code>amd64</code></td>\n      <td rowspan=\"4\"><code>x86_64-pc-windows-msvc</code></td>\n      <td><code>wasmer</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_singlepass</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_cranelift</code></td>\n      <td>\u2705</td>\n    </tr>\n    <tr>\n      <td><code>wasmer_compiler_llvm</code></td>\n      <td>\u274c <sup><a href=\"#wheels-note-2\">2</a></sup></td>\n    </tr>\n  </tbody>\n</table>\n\nnotes:\n\n<ul>\n  <li id=\"wheels-note-1\"><sup>1</sup>\n  <code>wasmer_compiler_singlepass</code> does not support\n  <code>aarch64</code> for the moment</li>\n  <li id=\"wheels-note-2\"><sup>2</sup>\n  <code>wasmer_compiler_llvm</code> is not packaging properly on\n  windows for the moment</li>\n</ul>\n\nwheels are all built for the following python versions:\n\n* python 3.7,\n* python 3.8.\n* python 3.9.\n* python 3.10,\n\n<details>\n<summary>learn about the \u201cfallback\u201d <code>py3-none-any</code> wheel</summary>\n\n### `py3-none-any.whl`\n\na special `wasmer-$(version)-py3-none-any` wheel is built as a\nfallback. the `wasmer` libray will be installable, but it will raise\nan `importerror` exception saying that \u201cwasmer is not available on\nthis system\u201d.\n\nthis wheel will be installed if none matches before (learn more by\nreading the [pep 425, compatibility tags for built\ndistributions](https://www.python.org/dev/peps/pep-0425/)).\n\n</details>\n\n## testing\n\nbuild all the packages and run the tests:\n\n```sh\n$ just build-all\n$ just test\n```\n\n# what is webassembly?\n\nquoting [the webassembly site](https://webassembly.org/):\n\n> webassembly (abbreviated wasm) is a binary instruction format for a\n> stack-based virtual machine. wasm is designed as a portable target\n> for compilation of high-level languages like c/c++/rust, enabling\n> deployment on the web for client and server applications.\n\nabout speed:\n\n> webassembly aims to execute at native speed by taking advantage of\n> [common hardware\n> capabilities](https://webassembly.org/docs/portability/#assumptions-for-efficient-execution)\n> available on a wide range of platforms.\n\nabout safety:\n\n> webassembly describes a memory-safe, sandboxed [execution\n> environment](https://webassembly.org/docs/semantics/#linear-memory) [\u2026].\n\n# license\n\nthe entire project is under the mit license. please read [the\n`license` file][license].\n\n\n[`pyo3`]: https://github.com/pyo3/pyo3\n[`maturin`]: https://github.com/pyo3/maturin\n[`virtualenv`]: https://virtualenv.pypa.io/\n[`just`]: https://github.com/casey/just/\n[license]: https://github.com/wasmerio/wasmer/blob/master/license\n[rust]: https://www.rust-lang.org/\n[compilers]: https://medium.com/wasmer/a-webassembly-compiler-tale-9ef37aa3b537\n\n",
  "docs_url": null,
  "keywords": "python,extension,webassembly",
  "license": "",
  "name": "wasmer",
  "package_url": "https://pypi.org/project/wasmer/",
  "project_url": "https://pypi.org/project/wasmer/",
  "project_urls": {
    "Bug Tracker": "https://github.com/wasmerio/wasmer-python/issues",
    "Documentation": "https://github.com/wasmerio/wasmer-python/",
    "Source Code": "https://github.com/wasmerio/wasmer-python"
  },
  "release_url": "https://pypi.org/project/wasmer/1.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python extension to run webassembly binaries",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "engineering@wasmer.io"
  ],
  "kwds": "wasmer wasmerio wasmer_compiler_singlepass wasmer_compiler_cranelift badge",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_wasmer",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: apache software license"
  ],
  "description": "ratelimiter\n===========\n\n|pypi version| |build status| |python version| |license|\n\nsimple python module providing rate limiting.\n\noverview\n--------\n\nthis package provides the ``ratelimiter`` module, which ensures that an\noperation will not be executed more than a given number of times on a\ngiven period. this can prove useful when working with third parties apis\nwhich require for example a maximum of 10 requests per second.\n\nusage\n-----\n\ndecorator\n~~~~~~~~~\n\n.. code:: python\n\n    from ratelimiter import ratelimiter\n\n    @ratelimiter(max_calls=10, period=1)\n    def do_something():\n        pass\n\ncontext manager\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from ratelimiter import ratelimiter\n\n    rate_limiter = ratelimiter(max_calls=10, period=1)\n\n    for i in range(100):\n        with rate_limiter:\n            do_something()\n\ncallback\n~~~~~~~~\n\nthe callback is called in its own thread, so your callback may use\n``sleep`` without delaying the rate limiter.\n\n.. code:: python\n\n    import time\n\n    from ratelimiter import ratelimiter\n\n    def limited(until):\n        duration = int(round(until - time.time()))\n        print('rate limited, sleeping for {:d} seconds'.format(duration))\n\n    rate_limiter = ratelimiter(max_calls=2, period=3, callback=limited)\n\n    for i in range(3):\n        with rate_limiter:\n            print('iteration', i)\n\noutput:\n\n::\n\n    iteration 0\n    iteration 1\n    rate limited, sleeping for 3 seconds\n    iteration 2\n\nasyncio\n~~~~~~~\n\nthe ``ratelimiter`` object can be used in an ``async with`` statement on\npython 3.5+. note that the callback must be a coroutine in this context.\nthe coroutine callback is not called in a separate thread.\n\n.. code:: python\n\n    import asyncio\n    import time\n\n    from ratelimiter import ratelimiter\n\n    async def limited(until):\n        duration = int(round(until - time.time()))\n        print('rate limited, sleeping for {:d} seconds'.format(duration))\n\n    async def coro():\n        rate_limiter = ratelimiter(max_calls=2, period=3, callback=limited)\n        for i in range(3):\n            async with rate_limiter:\n                print('iteration', i)\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(coro())\n\nlicense\n-------\n\n| original work copyright 2013 arnaud porterie\n| modified work copyright 2016 frazer mclean\n\nlicensed under the apache license, version 2.0 (the \u201clicense\u201d); you may\nnot use this file except in compliance with the license. you may obtain\na copy of the license at\n\nhttp://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \u201cas is\u201d basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n\n.. |pypi version| image:: http://img.shields.io/pypi/v/ratelimiter.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/ratelimiter\n.. |build status| image:: http://img.shields.io/travis/razerm/ratelimiter/master.svg?style=flat-square\n   :target: https://travis-ci.org/razerm/ratelimiter\n.. |python version| image:: https://img.shields.io/badge/python-2.7%2c%203-brightgreen.svg?style=flat-square\n   :target: https://www.python.org/downloads/\n.. |license| image:: http://img.shields.io/badge/license-apache-blue.svg?style=flat-square\n   :target: https://github.com/razerm/ratelimiter/blob/master/license\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "ratelimiter",
  "package_url": "https://pypi.org/project/ratelimiter/",
  "project_url": "https://pypi.org/project/ratelimiter/",
  "project_urls": {
    "Homepage": "https://github.com/RazerM/ratelimiter"
  },
  "release_url": "https://pypi.org/project/ratelimiter/1.2.0.post0/",
  "requires_dist": [
    "pytest (>=3.0); extra == 'test'",
    "pytest-asyncio; python_version>=\"3.5\" and extra == 'test'"
  ],
  "requires_python": "",
  "summary": "simple python rate limiting object",
  "version": "1.2.0.post0",
  "releases": [],
  "developers": [
    "frazer@frazermclean.co.uk",
    "frazer_mclean"
  ],
  "kwds": "rate_limiter ratelimiter max_calls run_until_complete limiter",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_ratelimiter",
  "homepage": "https://github.com/razerm/ratelimiter",
  "release_count": 13,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_asyncio"
  ]
}
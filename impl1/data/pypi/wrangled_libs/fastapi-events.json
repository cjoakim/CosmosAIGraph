{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# fastapi-events\n\nan event dispatching/handling library for fastapi, and starlette.\n\n[![](https://github.com/melvinkcx/fastapi-events/actions/workflows/tests.yml/badge.svg?branch=dev&event=push)](https://github.com/melvinkcx/fastapi-events/actions/workflows/tests.yml)\n![pypi - downloads](https://img.shields.io/pypi/dw/fastapi-events)\n\nfeatures:\n\n* straightforward api to emit events anywhere in your code\n* events are handled after responses are returned (doesn't affect response time)\n* supports event piping to remote queues\n* powerful built-in handlers to handle events locally and remotely\n* coroutine functions (`async def`) are the first-class citizen\n* write your handlers, never be limited to just what `fastapi_events` provides\n* (__>=0.3.0__) supports event payload validation via pydantic (see [here](#event-payload-validation-with-pydantic))\n* (__>=0.4.0__) supports event chaining: dispatching events within handlers (thank [@ndopj](https://github.com/ndopj)\n  for contributing to the idea)\n* (__>=0.7.0__) supports opentelemetry: see [this section](#opentelemetry-otel-support) for details\n* (__>=0.9.0__) supports dependencies in local handlers: see [this section](#using-dependencies-in-local-handler) for details\n* (__>=0.9.1__) supports pydantic v2\n\nif you use or like this project, please consider giving it a star so it can reach more developers. thanks =)\n\n## installation\n\n```shell\npip install fastapi-events\n```\n\nto use it with aws handlers, install:\n\n```shell\npip install fastapi-events[aws]\n```\n\nto use it with gcp handlers. install:\n\n```shell\npip install fastapi-events[google]\n```\n\nto enable opentelemetry (otel) support, install:\n\n```shell\npip install fastapi-events[otel]\n```\n\n# usage\n\n`fastapi-events` supports both fastapi and starlette. to use it, simply configure it as middleware.\n\n* configuring `fastapi-events` for fastapi:\n    ```python\n    from fastapi import fastapi\n    from fastapi.requests import request\n    from fastapi.responses import jsonresponse\n  \n    from fastapi_events.dispatcher import dispatch\n    from fastapi_events.middleware import eventhandlerasgimiddleware\n    from fastapi_events.handlers.local import local_handler\n\n    \n    app = fastapi()\n    app.add_middleware(eventhandlerasgimiddleware, \n                       handlers=[local_handler])   # registering handler(s)\n    \n    \n    @app.get(\"/\")\n    def index(request: request) -> jsonresponse:\n        dispatch(\"my-fancy-event\", payload={\"id\": 1})  # emit events anywhere in your code\n        return jsonresponse()    \n    ```\n\n* configuring `fastapi-events` for starlette:\n\n  ```python\n  from starlette.applications import starlette\n  from starlette.middleware import middleware\n  from starlette.requests import request\n  from starlette.responses import jsonresponse\n  \n  from fastapi_events.dispatcher import dispatch\n  from fastapi_events.handlers.local import local_handler\n  from fastapi_events.middleware import eventhandlerasgimiddleware\n  \n  app = starlette(middleware=[\n      middleware(eventhandlerasgimiddleware,\n                 handlers=[local_handler])  # registering handlers\n  ])\n  \n  @app.route(\"/\")\n  async def root(request: request) -> jsonresponse:\n      dispatch(\"new event\", payload={\"id\": 1})   # emit events anywhere in your code\n      return jsonresponse()\n  ```\n\n* configuring `fastapi-events` for starlite:\n\n  ```python\n  from starlite.app import starlite\n  from starlite.enums import mediatype\n  from starlite.handlers import get\n  from starlite.middleware import definemiddleware\n  \n  from fastapi_events.dispatcher import dispatch\n  from fastapi_events.handlers.local import local_handler\n  from fastapi_events.middleware import eventhandlerasgimiddleware\n  \n  @get(path=\"/\", media_type=mediatype.text)\n  async def root() -> str:\n      dispatch(\"new event\", payload={\"id\": 1})   # emit events anywhere in your code\n      return \"ok\"\n\n  app = starlite(middleware=[\n      definemiddleware(eventhandlerasgimiddleware,\n                 handlers=[local_handler])  # registering handlers\n      ],\n      route_handlers=[root],\n    )\n\n  ```\n\n## dispatching events\n\nevents can be dispatched anywhere in the code, as long as they are dispatched before a response is made.\n\n```python\n# anywhere in code\n\nfrom fastapi_events.dispatcher import dispatch\n\ndispatch(\n    \"cat-requested-a-fish\",  # event name, accepts any valid string\n    payload={\"cat_id\": \"fd375d23-b0c9-4271-a9e0-e028c4cd7230\"}  # event payload, accepts any arbitrary data\n)\n\ndispatch(\"a_cat_is_spotted\")  # this works too!\n```\n\n### event payload validation with pydantic\n\nevent payload validation is possible since version 0.3.0. to enable, simply register\na [pydantic models](https://pydantic-docs.helpmanual.io/usage/models/) with the corresponding event name.\n\n```python\nimport uuid\nfrom enum import enum\nfrom datetime import datetime\n\nfrom pydantic import basemodel\nfrom fastapi_events.registry.payload_schema import registry as payload_schema\n\n\nclass userevents(enum):\n    signed_up = \"user_signed_up\"\n    activated = \"user_activated\"\n\n\n# registering your event payload schema\n@payload_schema.register(event_name=userevents.signed_up)\nclass signuppayload(basemodel):\n    user_id: uuid.uuid\n    created_at: datetime\n```\n\n> wildcard in event name is currently not supported\n\npayload will be validated automatically without any changes made while invoking the dispatcher.\n\n```python\n# events with payload schema registered\ndispatch(userevents.signed_up)  # raises validationerror, missing payload\ndispatch(userevents.signed_up,\n         {\"user_id\": \"9e79cdbb-b216-40f7-9a05-20d223dee89a\"})  # raises validationerror, missing `created_at`\ndispatch(userevents.signed_up,\n         {\"user_id\": \"9e79cdbb-b216-40f7-9a05-20d223dee89a\", created_at: datetime.utcnow()})  # ok!\n\n# events without payload schema -> no validation will be performed\ndispatch(userevents.activated,\n         {\"user_id\": \"9e79cdbb-b216-40f7-9a05-20d223dee89a\"})  # ok! no validation will be performed\n```\n\n> reminder: payload validation is optional.\n> payload of events without its schema registered will not be validated.\n\n## handling events\n\n### handle events locally\n\nthe flexibility of `fastapi-events` allows us to customise how the events should be handled. for starters, you might\nwant to handle your events locally.\n\n```python\n# ex: in handlers.py\n\nfrom fastapi_events.handlers.local import local_handler\nfrom fastapi_events.typing import event\n\n\n@local_handler.register(event_name=\"cat*\")\ndef handle_all_cat_events(event: event):\n    \"\"\"\n    this handler will match with an events prefixed with `cat`.\n    ex: \"cat_eats_a_fish\", \"cat_is_cute\", etc\n    \"\"\"\n    # the `event` argument is nothing more than a tuple of event name and payload\n    event_name, payload = event\n\n    # todo do anything you'd like with the event\n\n\n@local_handler.register(event_name=\"cat*\")  # tip: you can register several handlers with the same event name\ndef handle_all_cat_events_another_way(event: event):\n    pass\n\n\n@local_handler.register(event_name=\"*\")\nasync def handle_all_events(event: event):\n    # event handlers can be coroutine function too (`async def`)\n    pass\n```\n\n#### using dependencies in local handler\n\n> new feature in fastapi-events>=0.9.0\n\ndependencies can now be used with local handler. sub-dependencies are also supported.\n\nhowever, dependencies using generator (with `yield` keyword) is not supported yet. i have the intention to support it in the future.\n\n\n```python\n# ex: in handlers.py\nfrom fastapi import depends\n\nfrom fastapi_events.handlers.local import local_handler\nfrom fastapi_events.typing import event\n\nasync def get_db_conn():\n    pass    # return a db conn\n\n\nasync def get_db_session(\n    db_conn=depends(get_db_conn)\n):\n    pass    # return a db session created from `db_conn`\n\n\n\n@local_handler.register(event_name=\"*\")\nasync def handle_all_events(\n    event: event, \n    db_session=depends(get_db_session)\n):\n    # use the `db_session` here\n    pass\n```\n\n### piping events to remote queues\n\nfor larger projects, you might have services dedicated to handling events separately.\n\nfor instance, `fastapi-events` comes with aws sqs forwarder to forward events to a remote queue.\n\n1. register `sqsforwardhandler` as handlers:\n    ```python\n    app = fastapi()\n    app.add_middleware(eventhandlerasgimiddleware, \n                       handlers=[sqsforwardhandler(queue_url=\"test-queue\",\n                                                   region_name=\"eu-central-1\")])   # registering handler(s)\n    ```\n\n2. start dispatching events! events will be serialised into json format by default:\n    ```python\n    [\"event name\", {\"payload\": \"here is the payload\"}]\n    ```\n\n> tip: to pipe events to multiple queues, provide multiple handlers while adding `eventhandlerasgimiddleware`.\n\n# built-in handlers\n\nhere is a list of built-in event handlers:\n\n* `localhandler` / `local_handler`:\n    * import from `fastapi_events.handlers.local`\n    * for handling events locally. see examples [above](#handle-events-locally)\n    * event name pattern matching is done using unix shell-style matching (`fnmatch`)\n\n* `sqsforwardhandler`:\n    * import from `fastapi_events.handlers.aws`\n    * to forward events to an aws sqs queue\n\n* `echohandler`:\n    * import from `fastapi_events.handlers.echo`\n    * to forward events to stdout with `pprint`. great for debugging purpose\n\n* `googlecloudsimplepubsubhandler`:\n    * import from `fastapi_events.handlers.gcp`\n    * to publish events to a single pubsub topic\n\n# creating your own handler\n\ncreating your own handler is nothing more than inheriting from the `baseeventhandler` class\nin `fastapi_events.handlers.base`.\n\nto handle events, `fastapi_events` calls one of these methods, in the following priority order:\n\n1. `handle_many(events)`:\n   the coroutine function should expect the backlog of the events collected.\n\n2. `handle(event)`:\n   in cases where `handle_many()` weren't defined in your custom handler, `handle()`\n   will be called by iterating through the events in the backlog.\n\n```python\nfrom typing import iterable\n\nfrom fastapi_events.typing import event\nfrom fastapi_events.handlers.base import baseeventhandler\n\n\nclass myowneventhandler(baseeventhandler):\n    async def handle(self, event: event) -> none:\n        \"\"\"\n        handle events one by one\n        \"\"\"\n        pass\n\n    async def handle_many(self, events: iterable[event]) -> none:\n        \"\"\"\n        handle events by batch\n        \"\"\"\n        pass\n```\n\n# opentelemetry (otel) support\n\nsince version 0.7.0, opentelemetry support has been added as an optional feature.\n\nto enable it, make sure you install the optional modules:\n\n```shell\npip install fastapi-events[otel]\n```\n\n> note that no instrumentation library is needed as fastapi_events supports otel natively\n\nspans will be created when:\n\n* `fastapi_events.dispatcher.dispatch` is invoked,\n* `fastapi_events.handlers.local.localhandler` is handling an event\n\nsupport for other handlers will be added in the future.\n\n# cookbook\n\n## 1) suppressing events / disabling `dispatch()` globally\n\nin case you want to suppress events globally especially during testing, you can do so without having to mock or patch\nthe `dispatch()` function. simple set the environment variable `fastapi_events_disable_dispatch` to `1`, `true` or any\ntruthy values.\n\n## 2) validating event payload during dispatch\n\n> requires pydantic, which comes with fastapi.\n> if you're using starlette, you might need to install pydantic\n\nsee [event payload validation with pydantic](#event-payload-validation-with-pydantic)\n\n## 3) dispatching events within handlers (event chaining)\n\nit is now possible to dispatch events within another event handlers. you'll need version 0.4 or above.\n\ncomparison between events dispatched within the request-response cycle and event handlers are:\n\n|                                                                 | dispatched within request-response cycle         | dispatched within event handlers                        |\n|-----------------------------------------------------------------|--------------------------------------------------|---------------------------------------------------------|\n| processing of events                                            | will be handled after the response has been made | will be scheduled to the running event loop immediately |\n| order of processing                                             | always after the response is made                | not guaranteed                                          |\n| supports payload schema validation with pydantic                | yes                                              | yes                                                     |\n| can be disabled globally with `fastapi_events_disable_dispatch` | yes                                              | yes                                                     |\n\n## 4) dispatching events outside of a request\n\none goal of `fastapi-events` is to dispatch events without having to manage which instance\nof `eventhandlerasgimiddleware` is being targeted. by default, this is handled using `contextvars`. there are occasions\nwhen a user may want to dispatch events outside of the standard request sequence though. this can be accomplished by\ngenerating a custom identifier for the middleware.\n\nby default, the middleware identifier is generated from the object id of the `eventhandlerasgimiddleware` instance and\nis managed internally without need for user intervention. if the user needs to dispatch events outside of a\nrequest-response lifecycle, a custom `middleware_id` value can be generated and passed to `eventhandlerasgimiddleware`\nduring its creation. this value can then be used with `dispatch()` to ensure the correct `eventhandlerasgimiddleware`\ninstance is selected.\n\ndispatching events during a request does ***not*** require the `middleware_id`. these will continue to automatically\ndiscover the event handler.\n\nin the following example, the id is being generated using the object id of the `fastapi` instance. the middleware\nidentifier must be unique `int` but there are no other restrictions.\n\n```python\nimport asyncio\n\nfrom fastapi import fastapi\nfrom fastapi.requests import request\nfrom fastapi.responses import jsonresponse\n\nfrom fastapi_events.dispatcher import dispatch\nfrom fastapi_events.middleware import eventhandlerasgimiddleware\nfrom fastapi_events.handlers.local import local_handler\n\napp = fastapi()\nevent_handler_id: int = id(app)\napp.add_middleware(eventhandlerasgimiddleware,\n                   handlers=[local_handler],  # registering handler(s)\n                   middleware_id=event_handler_id)  # register custom middleware id\n\n\nasync def dispatch_task() -> none:\n    \"\"\" background task to dispatch autonomous events \"\"\"\n\n    for i in range(100):\n        # without the middleware_id, this call would raise a lookuperror\n        dispatch(\"date\", payload={\"idx\": i}, middleware_id=event_handler_id)\n        await asyncio.sleep(1)\n\n\n@app.on_event(\"startup\")\nasync def startup_event() -> none:\n    asyncio.create_task(dispatch_task())\n\n\n@app.get(\"/\")\ndef index(request: request) -> jsonresponse:\n    dispatch(\"hello\", payload={\"id\": 1})  # emit events anywhere in your code\n    return jsonresponse({\"detail\": {\"msg\": \"hello world\"}})\n```\n\n# faqs:\n\n1. i'm getting `lookuperror` when `dispatch()` is used:\n    ```bash\n        def dispatch(event_name: str, payload: optional[any] = none) -> none:\n    >       q: deque[event] = event_store.get()\n    e       lookuperror: <contextvar name='fastapi_context' at 0x400a1f12b0>\n    ```\n\n   answer:\n\n   `dispatch()` relies on [contextvars](https://docs.python.org/3/library/contextvars.html) to work properly. there are\n   many reasons why `lookuperror` can occur. a common reason is `dispatch()` is called outside the request-response\n   lifecycle of fastapi/starlette, such as calling `dispatch()` after a response has been returned.\n\n   [this can be worked around by using a user-defined middleware_id.](#4-dispatching-events-outside-of-a-request)\n\n   if you're getting this during testing, you may consider disabling `dispatch()` during testing.\n   see [suppressing events / disabling `dispatch()` globally](#suppressing-events--disabling-dispatch-globally) for\n   details.\n\n2. my event handlers are not registered / local handlers are not being executed:\n\n   answer:\n\n   make sure the module where your local event handlers are defined is loaded during runtime. a simple fix is to import\n   the module in your `__init__.py`. this will ensure the modules are properly loaded during runtime.\n\n# feedback, questions?\n\nany form of feedback and questions are welcome! please create an\nissue [here](https://github.com/melvinkcx/fastapi-events/issues/new).\n",
  "docs_url": null,
  "keywords": "starlette,fastapi,starlite,pydantic",
  "license": "",
  "name": "fastapi-events",
  "package_url": "https://pypi.org/project/fastapi-events/",
  "project_url": "https://pypi.org/project/fastapi-events/",
  "project_urls": {
    "Homepage": "https://github.com/melvinkcx/fastapi-events"
  },
  "release_url": "https://pypi.org/project/fastapi-events/0.9.1/",
  "requires_dist": [
    "boto3 >=1.14 ; extra == 'aws'",
    "google-cloud-pubsub >=2.13.6 ; extra == 'google'",
    "opentelemetry-api <2.0,>=1.12.0 ; extra == 'otel'"
  ],
  "requires_python": ">=3.7",
  "summary": "event dispatching library for fastapi",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "melvin_koh",
    "melvinkcx@gmail.com"
  ],
  "kwds": "fastapi_events fastapi_events_disable_dispatch fastapi fastapi_context handle_all_cat_events",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_fastapi_events",
  "homepage": "https://github.com/melvinkcx/fastapi-events",
  "release_count": 17,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_google_cloud_pubsub",
    "pypi_opentelemetry_api"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# python frontmatter\n\n[jekyll](http://jekyllrb.com/)-style yaml front matter offers a useful way to add arbitrary, structured metadata to text documents, regardless of type.\n\nthis is a small package to load and parse files (or just text) with yaml (or json, toml or other) front matter.\n\n[![tests](https://github.com/eyeseast/python-frontmatter/workflows/test/badge.svg)](https://github.com/eyeseast/python-frontmatter/actions?query=workflow%3atest)\n[![pypi](https://img.shields.io/pypi/v/python-frontmatter.svg)](https://pypi.org/project/python-frontmatter/)\n\n**[documentation](https://python-frontmatter.readthedocs.io/en/latest/)**\n\n## install:\n\n    pip install python-frontmatter\n\n## usage:\n\n```python\n>>> import frontmatter\n\n```\n\nload a post from a filename:\n\n```python\n>>> post = frontmatter.load('tests/yaml/hello-world.txt')\n\n```\n\nor a file (or file-like object):\n\n```python\n>>> with open('tests/yaml/hello-world.txt') as f:\n...     post = frontmatter.load(f)\n\n```\n\nor load from text:\n\n```python\n>>> with open('tests/yaml/hello-world.txt') as f:\n...     post = frontmatter.loads(f.read())\n\n```\n\nif the file has a [byte-order mark](https://en.wikipedia.org/wiki/byte_order_mark) (bom), strip it off first. an easy way to do this is by using the [`utf-8-sig`](https://docs.python.org/3/library/codecs.html?highlight=utf%208%20sig#module-encodings.utf_8_sig) encoding:\n\n```python\n>>> with open('tests/yaml/hello-world.txt', encoding=\"utf-8-sig\") as f:\n...     post = frontmatter.load(f)\n\n```\n\naccess content:\n\n```python\n>>> print(post.content)\nwell, hello there, world.\n\n# this works, too\n>>> print(post)\nwell, hello there, world.\n\n```\n\nuse metadata (metadata gets proxied as post keys):\n\n```python\n>>> print(post['title'])\nhello, world!\n\n```\n\nmetadata is a dictionary, with some handy proxies:\n\n```python\n>>> sorted(post.keys())\n['layout', 'title']\n\n>>> from pprint import pprint\n>>> post['excerpt'] = 'tl;dr'\n>>> pprint(post.metadata)\n{'excerpt': 'tl;dr', 'layout': 'post', 'title': 'hello, world!'}\n\n```\n\nif you don't need the whole post object, just parse:\n\n```python\n>>> with open('tests/yaml/hello-world.txt') as f:\n...     metadata, content = frontmatter.parse(f.read())\n>>> print(metadata['title'])\nhello, world!\n\n```\n\nwrite back to plain text, too:\n\n```python\n>>> print(frontmatter.dumps(post)) # doctest: +normalize_whitespace\n---\nexcerpt: tl;dr\nlayout: post\ntitle: hello, world!\n---\nwell, hello there, world.\n\n```\n\nor write to a file (or file-like object):\n\n```python\n>>> from io import bytesio\n>>> f = bytesio()\n>>> frontmatter.dump(post, f)\n>>> print(f.getvalue().decode('utf-8')) # doctest: +normalize_whitespace\n---\nexcerpt: tl;dr\nlayout: post\ntitle: hello, world!\n---\nwell, hello there, world.\n\n```\n\nfor more examples, see files in the `tests/` directory. each sample file has a corresponding `.result.json` file showing the expected parsed output. see also the `examples/` directory, which covers more ways to customize input and output.\n",
  "docs_url": null,
  "keywords": "frontmatter",
  "license": "mit",
  "name": "python-frontmatter",
  "package_url": "https://pypi.org/project/python-frontmatter/",
  "project_url": "https://pypi.org/project/python-frontmatter/",
  "project_urls": {
    "Homepage": "https://github.com/eyeseast/python-frontmatter"
  },
  "release_url": "https://pypi.org/project/python-frontmatter/1.0.1/",
  "requires_dist": [
    "PyYAML",
    "sphinx ; extra == 'docs'",
    "pytest ; extra == 'test'",
    "toml ; extra == 'test'",
    "pyaml ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "parse and manage posts with yaml (or other) frontmatter",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "chris_amico",
    "eyeseast@gmail.com"
  ],
  "kwds": "frontmatter yaml metadata python documentation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_python_frontmatter",
  "homepage": "https://github.com/eyeseast/python-frontmatter",
  "release_count": 20,
  "dependency_ids": [
    "pypi_pyaml",
    "pypi_pytest",
    "pypi_pyyaml",
    "pypi_sphinx",
    "pypi_toml"
  ]
}
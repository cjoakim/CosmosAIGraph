{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "[![build status](https://travis-ci.org/borisrozumnuk/cognitojwt.svg?branch=master)](https://travis-ci.org/borisrozumnuk/cognitojwt)\n\n# decode and verify [amazon cognito](https://aws.amazon.com/cognito/) jwt tokens\n\n### note: tested on python >= 3.6, compatible with pep-492 (async/await coroutines syntax)\n\n### installation\n\npackage works in two modes: synchronous - [requests](https://github.com/requests/requests) as http-client and asynchronous - [aiohttp](https://github.com/aio-libs/aiohttp) as http-client.\nin order to avoid installing unnecessary dependencies i separated installation flow into two modes:\n\n* async mode - `pip install cognitojwt[async]`\n* sync mode - `pip install cognitojwt[sync]`\n\n### usage\n\n```python\nimport cognitojwt\n\nid_token = '<your_token_here>'\nregion = '**-****-*'\nuserpool_id = 'eu-west-1_*******'\napp_client_id = '1p3*********'\n\n# sync mode\nverified_claims: dict = cognitojwt.decode(\n    id_token,\n    region,\n    userpool_id,\n    app_client_id=app_client_id,  # optional\n    testmode=true  # disable token expiration check for testing purposes\n)\n\n# async mode\nverified_claims: dict = await cognitojwt.decode_async(\n    id_token,\n    region,\n    userpool_id,\n    app_client_id=app_client_id,  # optional\n    testmode=true  # disable token expiration check for testing purposes\n)\n\n```\n\nnote: if the application is deployed inside a private vpc without internet gateway, the application will not be able to download the jwks file.\nin this case set the `aws_cognito_jwks_path` environment variable referencing the absolute or relative path of the jwks.json file.\n\nit is possible to allow multiple app client ids by passing the value as a container instance such as a list or tuple:\n```python\nallowed_client_ids = ('client_one', 'client_two')\n\nverified_claims: dict = cognitojwt.decode(\n    id_token,\n    region,\n    userpool_id,\n    app_client_id=allowed_client_ids,\n    testmode=true  # disable token expiration check for testing purposes\n)\n```\n\n\n",
  "docs_url": null,
  "keywords": "amazon cognito jwt",
  "license": "mit",
  "name": "cognitojwt",
  "package_url": "https://pypi.org/project/cognitojwt/",
  "project_url": "https://pypi.org/project/cognitojwt/",
  "project_urls": {
    "Homepage": "http://github.com/borisrozumnuk/cognitojwt"
  },
  "release_url": "https://pypi.org/project/cognitojwt/1.4.1/",
  "requires_dist": [
    "python-jose[cryptography]",
    "aiofile ; extra == 'async'",
    "aiohttp ; extra == 'async'",
    "async-lru ; extra == 'async'",
    "requests ; extra == 'sync'",
    "async-lru ; extra == 'test'",
    "attrs (==19.1.0) ; extra == 'test'",
    "requests ; extra == 'test'",
    "aiohttp ; extra == 'test'",
    "pytest (==5.4.0) ; extra == 'test'",
    "pytest-asyncio (==0.12.0) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "decode and verify amazon cognito jwt tokens",
  "version": "1.4.1",
  "releases": [],
  "developers": [
    "boris_rozumniuk",
    "borisrozumnuk@gmail.com"
  ],
  "kwds": "aws_cognito_jwks_path cognitojwt coroutines cognito pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cognitojwt",
  "homepage": "http://github.com/borisrozumnuk/cognitojwt",
  "release_count": 18,
  "dependency_ids": [
    "pypi_aiofile",
    "pypi_aiohttp",
    "pypi_async_lru",
    "pypi_attrs",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_python_jose",
    "pypi_requests"
  ]
}
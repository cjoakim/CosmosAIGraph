{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<!---\ncopyright 2023 the huggingface team. all rights reserved.\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n-->\n\n# optimum neuron\n\n\ud83e\udd17 optimum neuron is the interface between the \ud83e\udd17 transformers library and aws accelerators\u00a0including [aws trainium](https://aws.amazon.com/machine-learning/trainium/?nc1=h_ls) and [aws inferentia](https://aws.amazon.com/machine-learning/inferentia/?nc1=h_ls).\nit provides a set of tools enabling easy model loading, training and inference on single- and multi-accelerator settings for different downstream tasks.\nthe list of officially validated models and tasks is available [here](todo:). users can try other models and tasks with only few changes.\n\n## install\nto install the latest release of this package:\n\n* for aws trainium (trn1) or aws inferentia2 (inf2)\n\n```bash\npip install optimum[neuronx]\n```\n\n* for aws inferentia (inf1)\n\n```bash\npip install optimum[neuron]\n```\n\noptimum neuron is a fast-moving project, and you may want to install it from source:\n\n```bash\npip install git+https://github.com/huggingface/optimum-neuron.git\n```\n\n> alternatively, you can install the package without pip as follows:\n> ```bash\n> git clone https://github.com/huggingface/optimum-neuron.git\n> cd optimum-neuron\n> python setup.py install\n> ```\n\n*make sure that you have installed the neuron driver and tools before installing `optimum-neuron`, [more extensive guide here](https://awsdocs-neuron.readthedocs-hosted.com/en/latest/general/setup/torch-neuronx.html#setup-torch-neuronx).*\n\nlast but not least, don't forget to install the requirements for every example:\n\n```bash\ncd <example-folder>\npip install -r requirements.txt\n```\n\n\n## quick start\n\n\ud83e\udd17 optimum neuron was designed with one goal in mind: **to make training and inference straightforward for any \ud83e\udd17 transformers user while leveraging the complete power of aws accelerators**.\n\n### training\n\nthere are two main classes one needs to know:\n- trainiumargumentparser: inherits the original [hfargumentparser](https://huggingface.co/docs/transformers/main/en/internal/trainer_utils#transformers.hfargumentparser) in transformers with additional checks on the argument values to make sure that they will work well with aws trainium instances.\n- [neurontrainer](https://huggingface.co/docs/optimum/neuron/package_reference/trainer): this version trainer takes care of doing the proper checks and changes to the supported models to make them trainable on aws trainium instances.\n\nthe [neurontrainer](https://huggingface.co/docs/optimum/neuron/package_reference/trainer) is very similar to the [\ud83e\udd17 transformers trainer](https://huggingface.co/docs/transformers/main_classes/trainer), and adapting a script using the trainer to make it work with trainium will mostly consist in simply swapping the trainer class for the neurontrainer one.\nthat's how most of the [example scripts](https://github.com/huggingface/optimum-neuron/tree/main/examples) were adapted from their [original counterparts](https://github.com/huggingface/transformers/tree/main/examples/pytorch).\n\n```diff\nfrom transformers import trainingarguments\n+from optimum.neuron import neurontrainer as trainer\n\ntraining_args = trainingarguments(\n  # training arguments...\n)\n\n# a lot of code here\n\n# initialize our trainer\ntrainer = trainer(\n    model=model,\n    args=training_args,  # original training arguments.\n    train_dataset=train_dataset if training_args.do_train else none,\n    eval_dataset=eval_dataset if training_args.do_eval else none,\n    compute_metrics=compute_metrics,\n    tokenizer=tokenizer,\n    data_collator=data_collator,\n)\n```\n\n### inference\n\nyou can compile and export your \ud83e\udd17 transformers models to a serialized format before inference on neuron devices:\n\n```bash\noptimum-cli export neuron \\\n  --model distilbert-base-uncased-finetuned-sst-2-english \\\n  --batch_size 1 \\\n  --sequence_length 32 \\\n  --auto_cast matmul \\\n  --auto_cast_type bf16 \\\n  distilbert_base_uncased_finetuned_sst2_english_neuron/\n```\n\nthe command above will export `distilbert-base-uncased-finetuned-sst-2-english` with static shapes: `batch_size=1` and `sequence_length=32`, and cast all `matmul` operations from fp32 to bf16. check out the [exporter guide](https://huggingface.co/docs/optimum-neuron/guides/export_model) for more compilation options.\n\nthen you can run the exported neuron model on neuron devices with `neuronmodelforxxx` classes which are similar to `automodelforxxx` classes in \ud83e\udd17 transformers:\n\n```diff\nfrom transformers import autotokenizer\n-from transformers import automodelforsequenceclassification\n+from optimum.neuron import neuronmodelforsequenceclassification\n\n# pytorch checkpoint\n-model = automodelforsequenceclassification.from_pretrained(\"distilbert-base-uncased-finetuned-sst-2-english\")\n+model = neuronmodelforsequenceclassification.from_pretrained(\"distilbert_base_uncased_finetuned_sst2_english_neuron\")\n\ntokenizer = autotokenizer.from_pretrained(\"distilbert-base-uncased-finetuned-sst-2-english\")\ninputs = tokenizer(\"hamilton is considered to be the best musical of past years.\", return_tensors=\"pt\")\n\nlogits = model(**inputs).logits\nprint(model.config.id2label[logits.argmax().item()])\n# 'positive'\n```\n\n### documentation\n\ncheck out [the documentation of optimum neuron](https://huggingface.co/docs/optimum-neuron/index) for more advanced usage.\n\n<!---\n\n## validated models\n\nthe following model architectures, tasks and device distributions have been validated for \ud83e\udd17 optimum neuron:\n\n<div align=\"center\">\n\n| architecture     | state | <center>tasks</center>                                                                                                                                                                                                                                                                                                                                 |\n| ---------------- | ----- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| bert             | \u2705     | <li>[text classification](https://github.com/huggingface/optimum-neuron/tree/main/examples/text-classification)</li><li>[question answering](https://github.com/huggingface/optimum-neuron/tree/main/examples/question-answering)</li><li>[language modeling](https://github.com/huggingface/optimum-neuron/tree/main/examples/language-modeling)</li> |\n| roberta          | \u274c     | <li>[question answering](https://github.com/huggingface/optimum-neuron/tree/main/examples/question-answering)</li><li>[language modeling](https://github.com/huggingface/optimum-neuron/tree/main/examples/language-modeling)</li>                                                                                                                     |\n| albert           | \u274c     | <li>[question answering](https://github.com/huggingface/optimum-neuron/tree/main/examples/question-answering)</li><li>[language modeling](https://github.com/huggingface/optimum-neuron/tree/main/examples/language-modeling)</li>                                                                                                                     |\n| distilbert       | \u274c     | <li>[question answering](https://github.com/huggingface/optimum-neuron/tree/main/examples/question-answering)</li><li>[language modeling](https://github.com/huggingface/optimum-neuron/tree/main/examples/language-modeling)</li>                                                                                                                     |\n| gpt2             | \u274c     | <li>[language modeling](https://github.com/huggingface/optimum-neuron/tree/main/examples/language-modeling)</li>                                                                                                                                                                                                                                       |\n| t5               | \u274c     | <li>[summarization](https://github.com/huggingface/optimum-neuron/tree/main/examples/summarization)</li><li>[translation](https://github.com/huggingface/optimum-neuron/tree/main/examples/translation)</li>                                                                                                                                           |\n| vit              | \u274c     | <li>[image classification](https://github.com/huggingface/optimum-neuron/tree/main/examples/image-classification)</li>                                                                                                                                                                                                                                 |\n| swin             | \u274c     | <li>[image classification](https://github.com/huggingface/optimum-neuron/tree/main/examples/image-classification)</li>                                                                                                                                                                                                                                 |\n| wav2vec2         | \u274c     | <li>[audio classification](https://github.com/huggingface/optimum-neuron/tree/main/examples/audio-classification)</li><li>[speech recognition](https://github.com/huggingface/optimum-neuron/tree/main/examples/speech-recognition)</li>                                                                                                               |\n| stable diffusion | \u274c     | <li>[text-to-image generation](https://github.com/huggingface/optimum-neuron/tree/main/examples/stable-diffusion)</li>                                                                                                                                                                                                                                 |\n| clip             | \u274c     | <li>[contrastive image-text training](https://github.com/huggingface/optimum-neuron/tree/main/examples/contrastive-image-text)</li>                                                                                                                                                                                                                    |\n\n</div>\n\nother models and tasks supported by the \ud83e\udd17 transformers library may also work. you can refer to this [section](https://github.com/huggingface/optimum-neuron#how-to-use-it) for using them with \ud83e\udd17 optimum neuron. besides, [this page](https://github.com/huggingface/optimum-neuron/tree/main/examples) explains how to modify any [example](https://github.com/huggingface/transformers/tree/main/examples/pytorch) from the \ud83e\udd17 transformers library to make it work with \ud83e\udd17 optimum neuron.\n\n-->\n\nif you find any issue while using those, please open an issue or a pull request.\n\n## text-generation-inference\n\nthis repository maintains a [text-generation-inference (tgi)](https://github.com/huggingface/optimum-neuron/tree/main/text-generation-inference) docker image for deployment on aws inferentia2.\n",
  "docs_url": null,
  "keywords": "transformers,diffusers,mixed-precision training,fine-tuning,inference,tranium,inferentia,aws",
  "license": "apache",
  "name": "optimum-neuron",
  "package_url": "https://pypi.org/project/optimum-neuron/",
  "project_url": "https://pypi.org/project/optimum-neuron/",
  "project_urls": {
    "Homepage": "https://huggingface.co/hardware/aws"
  },
  "release_url": "https://pypi.org/project/optimum-neuron/0.0.16/",
  "requires_dist": [
    "transformers ==4.35.0",
    "accelerate ==0.23.0",
    "optimum >=1.14.0",
    "huggingface-hub >=0.14.0",
    "numpy <=1.25.2,>=1.22.2",
    "protobuf <4",
    "diffusers >=0.23.0 ; extra == 'diffusers'",
    "wheel ; extra == 'neuron'",
    "torch-neuron ==1.13.1.2.9.6 ; extra == 'neuron'",
    "torch ==1.13.1.* ; extra == 'neuron'",
    "neuron-cc[tensorflow] ==1.20.3 ; extra == 'neuron'",
    "protobuf ; extra == 'neuron'",
    "torchvision ; extra == 'neuron'",
    "wheel ; extra == 'neuronx'",
    "neuronx-cc ==2.11.0.34 ; extra == 'neuronx'",
    "torch-neuronx ==1.13.1.1.12.1 ; extra == 'neuronx'",
    "transformers-neuronx ==0.8.268 ; extra == 'neuronx'",
    "torch ==1.13.1.* ; extra == 'neuronx'",
    "torchvision ==0.14.* ; extra == 'neuronx'",
    "neuronx-distributed ==0.5.0 ; extra == 'neuronx'",
    "black ; extra == 'quality'",
    "ruff ; extra == 'quality'",
    "isort ; extra == 'quality'",
    "pytest ; extra == 'tests'",
    "psutil ; extra == 'tests'",
    "parameterized ; extra == 'tests'",
    "GitPython ; extra == 'tests'",
    "sentencepiece ; extra == 'tests'",
    "datasets ; extra == 'tests'",
    "sacremoses ; extra == 'tests'",
    "diffusers >=0.23.0 ; extra == 'tests'",
    "safetensors ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "optimum neuron is the interface between the hugging face transformers and diffusers libraries and aws tranium and inferentia accelerators. it provides a set of tools enabling easy model loading, training and inference on single and multiple neuron core settings for different downstream tasks.",
  "version": "0.0.16",
  "releases": [],
  "developers": [
    "hardware@huggingface.co",
    "huggingface_inc"
  ],
  "kwds": "neurontrainer neuron neuronx distilbert_base_uncased_finetuned_sst2_english_neuron neuronmodelforsequenceclassification",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_optimum_neuron",
  "homepage": "https://huggingface.co/hardware/aws",
  "release_count": 17,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_black",
    "pypi_datasets",
    "pypi_diffusers",
    "pypi_gitpython",
    "pypi_huggingface_hub",
    "pypi_isort",
    "pypi_neuron_cc",
    "pypi_neuronx_cc",
    "pypi_neuronx_distributed",
    "pypi_numpy",
    "pypi_optimum",
    "pypi_parameterized",
    "pypi_protobuf",
    "pypi_psutil",
    "pypi_pytest",
    "pypi_ruff",
    "pypi_sacremoses",
    "pypi_safetensors",
    "pypi_sentencepiece",
    "pypi_torch",
    "pypi_torch_neuron",
    "pypi_torch_neuronx",
    "pypi_torchvision",
    "pypi_transformers",
    "pypi_transformers_neuronx",
    "pypi_wheel"
  ]
}
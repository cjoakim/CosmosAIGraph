{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "[![pypi - python](https://img.shields.io/badge/python-v3.7+-blue.svg)](https://pypi.org/project/bertopic/)\n[![build](https://img.shields.io/github/actions/workflow/status/maartengr/bertopic/testing.yml?branch=master)](https://github.com/maartengr/bertopic/actions)\n[![docs](https://img.shields.io/badge/docs-passing-green.svg)](https://maartengr.github.io/bertopic/)\n[![pypi - pypi](https://img.shields.io/pypi/v/bertopic)](https://pypi.org/project/bertopic/)\n[![pypi - license](https://img.shields.io/badge/license-mit-green.svg)](https://github.com/maartengr/vlac/blob/master/license)\n[![arxiv](https://img.shields.io/badge/arxiv-2203.05794-<color>.svg)](https://arxiv.org/abs/2203.05794)\n\n\n# bertopic\n\n<img src=\"images/logo.png\" width=\"35%\" height=\"35%\" align=\"right\" />\n\nbertopic is a topic modeling technique that leverages \u00f0\u00ff\u00a4\u2014 transformers and c-tf-idf to create dense clusters\nallowing for easily interpretable topics whilst keeping important words in the topic descriptions.\n\nbertopic supports all kinds of topic modeling techniques:  \n<table>\n  <tr>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/guided/guided.html\">guided</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/supervised/supervised.html\">supervised</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/semisupervised/semisupervised.html\">semi-supervised</a></td>\n </tr>\n   <tr>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/manual/manual.html\">manual</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/distribution/distribution.html\">multi-topic distributions</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/hierarchicaltopics/hierarchicaltopics.html\">hierarchical</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/topicsperclass/topicsperclass.html\">class-based</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/topicsovertime/topicsovertime.html\">dynamic</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/online/online.html\">online/incremental</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/multimodal/multimodal.html\">multimodal</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/multiaspect/multiaspect.html\">multi-aspect</a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/representation/llm.html\">text generation/llm</a></td>\n </tr>\n <tr>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/zeroshot/zeroshot.html\">zero-shot <b>(new!)</b></a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/merge/merge.html\">merge models <b>(new!)</b></a></td>\n    <td><a href=\"https://maartengr.github.io/bertopic/getting_started/seed_words/seed_words.html\">seed words <b>(new!)</b></a></td>\n </tr>\n</table>\n\ncorresponding medium posts can be found [here](https://towardsdatascience.com/topic-modeling-with-bert-779f7db187e6?source=friends_link&sk=0b5a470c006d1842ad4c8a3057063a99), [here](https://towardsdatascience.com/interactive-topic-modeling-with-bertopic-1ea55e7d73d8?sk=03c2168e9e74b6bda2a1f3ed953427e4) and [here](https://towardsdatascience.com/using-whisper-and-bertopic-to-model-kurzgesagts-videos-7d8a63139bdf?sk=b1e0fd46f70cb15e8422b4794a81161d). for a more detailed overview, you can read the [paper](https://arxiv.org/abs/2203.05794) or see a [brief overview](https://maartengr.github.io/bertopic/algorithm/algorithm.html). \n\n## installation\n\ninstallation, with sentence-transformers, can be done using [pypi](https://pypi.org/project/bertopic/):\n\n```bash\npip install bertopic\n```\n\nif you want to install bertopic with other embedding models, you can choose one of the following:\n\n```bash\n# choose an embedding backend\npip install bertopic[flair, gensim, spacy, use]\n\n# topic modeling with images\npip install bertopic[vision]\n```\n\n## getting started\nfor an in-depth overview of the features of bertopic \nyou can check the [**full documentation**](https://maartengr.github.io/bertopic/) or you can follow along \nwith one of the examples below:\n\n| name  | link  |\n|---|---|\n| bertopic - **best practices**  | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1boq_vakevtojsd2x_u6-_x52oouqruj2?usp=sharing)  |\n| topic modeling with bertopic  | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1fiera9fldkqegdimyl0i3mcjsukvf8c-?usp=sharing)  |\n| (custom) embedding models in bertopic  | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/18arppe50szvccp_y6xs56h2ty0m-rlqv?usp=sharing) |\n| advanced customization in bertopic  |  [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1cltyut039t-ldtlcd-oqadxwgcssgtw9?usp=sharing) |\n| (semi-)supervised topic modeling with bertopic  |  [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1bxizkzv5vfxjeb29sntu__zc7pbsipaq?usp=sharing)  |\n| dynamic topic modeling with trump's tweets  | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1un8ooi-7znlrok0mavkyhmnrl0xgk88f?usp=sharing)  |\n| **new** - topic modeling on large data  | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1w7aeddpxc29jp99ggzphulqjmffvktbc?usp=sharing)  |\n| **new** - topic modeling with llama 2 \u00f0\u00ff\u00a6\u2122 | [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1qcersmujqgetggujdrvv_6_eeoicd_9m?usp=sharing)  |\n| topic modeling arxiv abstracts | [![kaggle](https://img.shields.io/static/v1?style=for-the-badge&message=kaggle&color=222222&logo=kaggle&logocolor=20beff&label=)](https://www.kaggle.com/maartengr/topic-modeling-arxiv-abstract-with-bertopic) |\n\n\n## quick start\nwe start by extracting topics from the well-known 20 newsgroups dataset containing english documents:\n\n```python\nfrom bertopic import bertopic\nfrom sklearn.datasets import fetch_20newsgroups\n \ndocs = fetch_20newsgroups(subset='all',  remove=('headers', 'footers', 'quotes'))['data']\n\ntopic_model = bertopic()\ntopics, probs = topic_model.fit_transform(docs)\n```\n\nafter generating topics and their probabilities, we can access all of the topics together with their topic representations:\n\n```python\n>>> topic_model.get_topic_info()\n\ntopic\tcount\tname\n-1\t4630\t-1_can_your_will_any\n0\t693\t49_windows_drive_dos_file\n1\t466\t32_jesus_bible_christian_faith\n2\t441\t2_space_launch_orbit_lunar\n3\t381\t22_key_encryption_keys_encrypted\n...\n```\n\nthe `-1` topic refers to all outlier documents and are typically ignored. each word in a topic describes the underlying theme of that topic and can be used \nfor interpreting that topic. next, let's take a look at the most frequent topic that was generated:\n\n```python\n>>> topic_model.get_topic(0)\n\n[('windows', 0.006152228076250982),\n ('drive', 0.004982897610645755),\n ('dos', 0.004845038866360651),\n ('file', 0.004140142872194834),\n ('disk', 0.004131678774810884),\n ('mac', 0.003624848635985097),\n ('memory', 0.0034840976976789903),\n ('software', 0.0034415334250699077),\n ('email', 0.0034239554442333257),\n ('pc', 0.003047105930670237)]\n```  \n\nusing `.get_document_info`, we can also extract information on a document level, such as their corresponding topics, probabilities, whether they are representative documents for a topic, etc.:\n\n```python\n>>> topic_model.get_document_info(docs)\n\ndocument                               topic\tname\t                        top_n_words                     probability    ...\ni am sure some bashers of pens...\t0\t0_game_team_games_season\tgame - team - games...\t        0.200010       ...\nmy brother is in the market for...      -1     -1_can_your_will_any\t        can - your - will...\t        0.420668       ...\nfinally you said what you dream...\t-1     -1_can_your_will_any\t        can - your - will...            0.807259       ...\nthink! it's the scsi card doing...\t49     49_windows_drive_dos_file\twindows - drive - docs...\t0.071746       ...\n1) i have an old jasmine drive...\t49     49_windows_drive_dos_file\twindows - drive - docs...\t0.038983       ...\n```\n\n**`\u00f0\u00ff\u201d\u00a5 tip`**: use `bertopic(language=\"multilingual\")` to select a model that supports 50+ languages. \n\n## fine-tune topic representations\n\nin bertopic, there are a number of different [topic representations](https://maartengr.github.io/bertopic/getting_started/representation/representation.html) that we can choose from. they are all quite different from one another and give interesting perspectives and variations of topic representations. a great start is `keybertinspired`, which for many users increases the coherence and reduces stopwords from the resulting topic representations:\n\n ```python\nfrom bertopic.representation import keybertinspired\n\n# fine-tune your topic representations\nrepresentation_model = keybertinspired()\ntopic_model = bertopic(representation_model=representation_model)\n```\n\nhowever, you might want to use something more powerful to describe your clusters. you can even use chatgpt or other models from openai to generate labels, summaries, phrases, keywords, and more:\n\n```python\nimport openai\nfrom bertopic.representation import openai\n\n# fine-tune topic representations with gpt\nclient = openai.openai(api_key=\"sk-...\")\nrepresentation_model = openai(client, model=\"gpt-3.5-turbo\", chat=true)\ntopic_model = bertopic(representation_model=representation_model)\n```\n\n**`\u00f0\u00ff\u201d\u00a5 tip`**: instead of iterating over all of these different topic representations, you can model them simultaneously with [multi-aspect topic representations](https://maartengr.github.io/bertopic/getting_started/multiaspect/multiaspect.html) in bertopic. \n\n\n## visualizations\nafter having trained our bertopic model, we can iteratively go through hundreds of topics to get a good \nunderstanding of the topics that were extracted. however, that takes quite some time and lacks a global representation. instead, we can use one of the [many visualization options](https://maartengr.github.io/bertopic/getting_started/visualization/visualization.html) in bertopic. \nfor example, we can visualize the topics that were generated in a way very similar to \n[ldavis](https://github.com/cpsievert/ldavis):\n\n```python\ntopic_model.visualize_topics()\n``` \n\n<img src=\"images/topic_visualization.gif\" width=\"60%\" height=\"60%\" align=\"center\" />\n\n## modularity\nby default, the [main steps](https://maartengr.github.io/bertopic/algorithm/algorithm.html) for topic modeling with bertopic are sentence-transformers, umap, hdbscan, and c-tf-idf run in sequence. however, it assumes some independence between these steps which makes bertopic quite modular. in other words, bertopic not only allows you to build your own topic model but to explore several topic modeling techniques on top of your customized topic model:\n\nhttps://user-images.githubusercontent.com/25746895/218420473-4b2bb539-9dbe-407a-9674-a8317c7fb3bf.mp4\n\nyou can swap out any of these models or even remove them entirely. the following steps are completely modular:\n\n1. [embedding](https://maartengr.github.io/bertopic/getting_started/embeddings/embeddings.html) documents\n2. [reducing dimensionality](https://maartengr.github.io/bertopic/getting_started/dim_reduction/dim_reduction.html) of embeddings\n3. [clustering](https://maartengr.github.io/bertopic/getting_started/clustering/clustering.html) reduced embeddings into topics\n4. [tokenization](https://maartengr.github.io/bertopic/getting_started/vectorizers/vectorizers.html) of topics\n5. [weight](https://maartengr.github.io/bertopic/getting_started/ctfidf/ctfidf.html) tokens\n6. [represent topics](https://maartengr.github.io/bertopic/getting_started/representation/representation.html) with one or [multiple](https://maartengr.github.io/bertopic/getting_started/multiaspect/multiaspect.html) representations\n\n\n## functionality\nbertopic has many functions that quickly can become overwhelming. to alleviate this issue, you will find an overview \nof all methods and a short description of its purpose. \n\n### common\nbelow, you will find an overview of common functions in bertopic. \n\n| method | code  | \n|-----------------------|---|\n| fit the model    |  `.fit(docs)` |\n| fit the model and predict documents  |  `.fit_transform(docs)` |\n| predict new documents    |  `.transform([new_doc])` |\n| access single topic   | `.get_topic(topic=12)`  |   \n| access all topics     |  `.get_topics()` |\n| get topic freq    |  `.get_topic_freq()` |\n| get all topic information|  `.get_topic_info()` |\n| get all document information|  `.get_document_info(docs)` |\n| get representative docs per topic |  `.get_representative_docs()` |\n| update topic representation | `.update_topics(docs, n_gram_range=(1, 3))` |\n| generate topic labels | `.generate_topic_labels()` |\n| set topic labels | `.set_topic_labels(my_custom_labels)` |\n| merge topics | `.merge_topics(docs, topics_to_merge)` |\n| reduce nr of topics | `.reduce_topics(docs, nr_topics=30)` |\n| reduce outliers | `.reduce_outliers(docs, topics)` |\n| find topics | `.find_topics(\"vehicle\")` |\n| save model    |  `.save(\"my_model\", serialization=\"safetensors\")` |\n| load model    |  `bertopic.load(\"my_model\")` |\n| get parameters |  `.get_params()` |\n\n\n### attributes\nafter having trained your bertopic model, several attributes are saved within your model. these attributes, in part, \nrefer to how model information is stored on an estimator during fitting. the attributes that you see below all end in `_` and are \npublic attributes that can be used to access model information. \n\n| attribute | description |\n|------------------------|---------------------------------------------------------------------------------------------|\n| `.topics_`               | the topics that are generated for each document after training or updating the topic model. |\n| `.probabilities_` | the probabilities that are generated for each document if hdbscan is used. |\n| `.topic_sizes_`           | the size of each topic                                                                      |\n| `.topic_mapper_`          | a class for tracking topics and their mappings anytime they are merged/reduced.             |\n| `.topic_representations_` | the top *n* terms per topic and their respective c-tf-idf values.                           |\n| `.c_tf_idf_`              | the topic-term matrix as calculated through c-tf-idf.                                       |\n| `.topic_aspects_`          | the different aspects, or representations, of each topic.                                  |\n| `.topic_labels_`          | the default labels for each topic.                                                          |\n| `.custom_labels_`         | custom labels for each topic as generated through `.set_topic_labels`.                      |\n| `.topic_embeddings_`      | the embeddings for each topic if `embedding_model` was used.                                |\n| `.representative_docs_`   | the representative documents for each topic if hdbscan is used.                             |\n\n\n### variations\nthere are many different use cases in which topic modeling can be used. as such, several variations of bertopic have been developed such that one package can be used across many use cases.\n\n| method | code  | \n|-----------------------|---|\n| [topic distribution approximation](https://maartengr.github.io/bertopic/getting_started/distribution/distribution.html) | `.approximate_distribution(docs)` |\n| [online topic modeling](https://maartengr.github.io/bertopic/getting_started/online/online.html) | `.partial_fit(doc)` |\n| [semi-supervised topic modeling](https://maartengr.github.io/bertopic/getting_started/semisupervised/semisupervised.html) | `.fit(docs, y=y)` |\n| [supervised topic modeling](https://maartengr.github.io/bertopic/getting_started/supervised/supervised.html) | `.fit(docs, y=y)` |\n| [manual topic modeling](https://maartengr.github.io/bertopic/getting_started/manual/manual.html) | `.fit(docs, y=y)` |\n| [multimodal topic modeling](https://maartengr.github.io/bertopic/getting_started/multimodal/multimodal.html) | ``.fit(docs, images=images)`` |\n| [topic modeling per class](https://maartengr.github.io/bertopic/getting_started/topicsperclass/topicsperclass.html) | `.topics_per_class(docs, classes)` |\n| [dynamic topic modeling](https://maartengr.github.io/bertopic/getting_started/topicsovertime/topicsovertime.html) | `.topics_over_time(docs, timestamps)` |\n| [hierarchical topic modeling](https://maartengr.github.io/bertopic/getting_started/hierarchicaltopics/hierarchicaltopics.html) | `.hierarchical_topics(docs)` |\n| [guided topic modeling](https://maartengr.github.io/bertopic/getting_started/guided/guided.html) | `bertopic(seed_topic_list=seed_topic_list)` |\n| [zero-shot topic modeling](https://maartengr.github.io/bertopic/getting_started/zeroshot/zeroshot.html) | `bertopic(zeroshot_topic_list=zeroshot_topic_list)` |\n| [merge multiple models](https://maartengr.github.io/bertopic/getting_started/merge/merge.html) | `bertopic.merge_models([topic_model_1, topic_model_2])` |\n\n\n### visualizations\nevaluating topic models can be rather difficult due to the somewhat subjective nature of evaluation. \nvisualizing different aspects of the topic model helps in understanding the model and makes it easier \nto tweak the model to your liking. \n\n| method | code  | \n|-----------------------|---|\n| visualize topics    |  `.visualize_topics()` |\n| visualize documents    |  `.visualize_documents()` |\n| visualize document hierarchy    |  `.visualize_hierarchical_documents()` |\n| visualize topic hierarchy    |  `.visualize_hierarchy()` |\n| visualize topic tree   |  `.get_topic_tree(hierarchical_topics)` |\n| visualize topic terms    |  `.visualize_barchart()` |\n| visualize topic similarity  |  `.visualize_heatmap()` |\n| visualize term score decline  |  `.visualize_term_rank()` |\n| visualize topic probability distribution    |  `.visualize_distribution(probs[0])` |\n| visualize topics over time   |  `.visualize_topics_over_time(topics_over_time)` |\n| visualize topics per class | `.visualize_topics_per_class(topics_per_class)` | \n\n\n## citation\nto cite the [bertopic paper](https://arxiv.org/abs/2203.05794), please use the following bibtex reference:\n\n```bibtext\n@article{grootendorst2022bertopic,\n  title={bertopic: neural topic modeling with a class-based tf-idf procedure},\n  author={grootendorst, maarten},\n  journal={arxiv preprint arxiv:2203.05794},\n  year={2022}\n}\n```\n\n\n",
  "docs_url": null,
  "keywords": "nlp bert topic modeling embeddings",
  "license": "",
  "name": "bertopic",
  "package_url": "https://pypi.org/project/bertopic/",
  "project_url": "https://pypi.org/project/bertopic/",
  "project_urls": {
    "Documentation": "https://maartengr.github.io/BERTopic/",
    "Homepage": "https://github.com/MaartenGr/BERTopic",
    "Issue Tracker": "https://github.com/MaartenGr/BERTopic/issues",
    "Source Code": "https://github.com/MaartenGr/BERTopic/"
  },
  "release_url": "https://pypi.org/project/bertopic/0.16.0/",
  "requires_dist": [
    "numpy (>=1.20.0)",
    "hdbscan (>=0.8.29)",
    "umap-learn (>=0.5.0)",
    "pandas (>=1.1.5)",
    "scikit-learn (>=0.22.2.post1)",
    "tqdm (>=4.41.1)",
    "sentence-transformers (>=0.4.1)",
    "plotly (>=4.7.0)",
    "mkdocs (==1.1) ; extra == 'dev'",
    "mkdocs-material (==4.6.3) ; extra == 'dev'",
    "mkdocstrings (==0.8.0) ; extra == 'dev'",
    "pytest (>=5.4.3) ; extra == 'dev'",
    "pytest-cov (>=2.6.1) ; extra == 'dev'",
    "mkdocs (==1.1) ; extra == 'docs'",
    "mkdocs-material (==4.6.3) ; extra == 'docs'",
    "mkdocstrings (==0.8.0) ; extra == 'docs'",
    "transformers (>=3.5.1) ; extra == 'flair'",
    "torch (>=1.4.0) ; extra == 'flair'",
    "flair (>=0.7) ; extra == 'flair'",
    "gensim (>=4.0.0) ; extra == 'gensim'",
    "spacy (>=3.0.1) ; extra == 'spacy'",
    "pytest (>=5.4.3) ; extra == 'test'",
    "pytest-cov (>=2.6.1) ; extra == 'test'",
    "tensorflow ; extra == 'use'",
    "tensorflow-hub ; extra == 'use'",
    "tensorflow-text ; extra == 'use'",
    "Pillow (>=9.2.0) ; extra == 'vision'",
    "accelerate (>=0.19.0) ; extra == 'vision'"
  ],
  "requires_python": ">=3.7",
  "summary": "bertopic performs topic modeling with state-of-the-art transformer models.",
  "version": "0.16.0",
  "releases": [],
  "developers": [
    "maarten_p",
    "maartengrootendorst@gmail.com"
  ],
  "kwds": "topic_representations_ topic_embeddings_ bertopic topic_model topic_model_2",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_bertopic",
  "homepage": "https://github.com/maartengr/bertopic",
  "release_count": 35,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_flair",
    "pypi_gensim",
    "pypi_hdbscan",
    "pypi_mkdocs",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_plotly",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scikit_learn",
    "pypi_sentence_transformers",
    "pypi_spacy",
    "pypi_tensorflow",
    "pypi_tensorflow_hub",
    "pypi_tensorflow_text",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_umap_learn"
  ]
}
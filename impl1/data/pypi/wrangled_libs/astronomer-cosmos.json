{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "framework :: apache airflow",
    "framework :: apache airflow :: provider",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": ".. |fury| image:: https://badge.fury.io/py/astronomer-cosmos.svg\n    :target: https://badge.fury.io/py/astronomer-cosmos\n\n.. |ossrank| image:: https://img.shields.io/endpoint?url=https://ossrank.com/shield/2121\n    :target: https://ossrank.com/p/2121-astronomer-cosmos\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/astronomer-cosmos.svg\n    :target: https://img.shields.io/pypi/dm/astronomer-cosmos\n\n.. |pre-commit| image:: https://results.pre-commit.ci/badge/github/astronomer/astronomer-cosmos/main.svg\n   :target: https://results.pre-commit.ci/latest/github/astronomer/astronomer-cosmos/main\n   :alt: pre-commit.ci status\n\n\n\n.. image:: https://raw.githubusercontent.com/astronomer/astronomer-cosmos/main/docs/_static/cosmos-logo.svg\n\n\n===========================================================\n\n|fury| |ossrank| |downloads| |pre-commit|\n\nrun your dbt core projects as `apache airflow <https://airflow.apache.org/>`_ dags and task groups with a few lines of code. benefits include:\n\n- run dbt projects against airflow connections instead of dbt profiles\n- native support for installing and running dbt in a virtual environment to avoid dependency conflicts with airflow\n- run tests immediately after a model is done to catch issues early\n- utilize airflow's data-aware scheduling to run models immediately after upstream ingestion\n- turn each dbt model into a task/task group complete with retries, alerting, etc.\n\nquickstart\n__________\n\ncheck out the quickstart guide on our `docs <https://astronomer.github.io/astronomer-cosmos/#quickstart>`_. see more examples at `/dev/dags <https://github.com/astronomer/astronomer-cosmos/tree/main/dev/dags>`_ and at the `cosmos-demo repo <https://github.com/astronomer/cosmos-demo>`_.\n\n\nexample usage\n___________________\n\nyou can render a cosmos airflow dag using the ``dbtdag`` class. here's an example with the `jaffle_shop project <https://github.com/dbt-labs/jaffle_shop>`_:\n\n..\n   this renders on github but not sphinx:\n\nhttps://github.com/astronomer/astronomer-cosmos/blob/24aa38e528e299ef51ca6baf32f5a6185887d432/dev/dags/basic_cosmos_dag.py#l1-l42\n\nthis will generate an airflow dag that looks like this:\n\n.. figure:: /docs/_static/jaffle_shop_dag.png\n\n\ncommunity\n_________\n- join us on the airflow `slack <https://join.slack.com/t/apache-airflow/shared_invite/zt-1zy8e8h85-es~fn19imzumkhpwnyrt6q>`_ at #airflow-dbt\n\n\nchangelog\n_________\n\nwe follow `semantic versioning <https://semver.org/>`_ for releases.\ncheck `changelog.rst <https://github.com/astronomer/astronomer-cosmos/blob/main/changelog.rst>`_\nfor the latest changes.\n\n\ncontributing guide\n__________________\n\nall contributions, bug reports, bug fixes, documentation improvements, enhancements are welcome.\n\na detailed overview an how to contribute can be found in the `contributing guide <https://astronomer.github.io/astronomer-cosmos/contributing>`_.\n\nas contributors and maintainers to this project, you are expected to abide by the\n`contributor code of conduct <https://github.com/astronomer/astronomer-cosmos/blob/main/code_of_conduct.md>`_.\n\n\nlicense\n_______\n\n`apache license 2.0 <https://github.com/astronomer/astronomer-cosmos/blob/main/license>`_\n",
  "docs_url": null,
  "keywords": "airflow,apache-airflow,astronomer,dags,dbt",
  "license": "",
  "name": "astronomer-cosmos",
  "package_url": "https://pypi.org/project/astronomer-cosmos/",
  "project_url": "https://pypi.org/project/astronomer-cosmos/",
  "project_urls": {
    "Documentation": "https://astronomer.github.io/astronomer-cosmos",
    "Homepage": "https://github.com/astronomer/astronomer-cosmos",
    "Source code": "https://github.com/astronomer/astronomer-cosmos"
  },
  "release_url": "https://pypi.org/project/astronomer-cosmos/1.2.5/",
  "requires_dist": [
    "aenum",
    "apache-airflow>=2.3.0",
    "attrs",
    "importlib-metadata; python_version < '3.8'",
    "jinja2>=3.0.0",
    "pydantic<2.0.0,>=1.10.0",
    "typing-extensions; python_version < '3.8'",
    "virtualenv",
    "astronomer-cosmos[dbt-all]; extra == 'all'",
    "astronomer-cosmos[openlineage]; extra == 'all'",
    "dbt-athena; extra == 'dbt-all'",
    "dbt-bigquery; extra == 'dbt-all'",
    "dbt-databricks; extra == 'dbt-all'",
    "dbt-exasol; extra == 'dbt-all'",
    "dbt-postgres; extra == 'dbt-all'",
    "dbt-redshift; extra == 'dbt-all'",
    "dbt-snowflake; extra == 'dbt-all'",
    "dbt-spark; extra == 'dbt-all'",
    "dbt-athena-community; extra == 'dbt-athena'",
    "dbt-bigquery; extra == 'dbt-bigquery'",
    "dbt-databricks; extra == 'dbt-databricks'",
    "dbt-exasol; extra == 'dbt-exasol'",
    "dbt-postgres; extra == 'dbt-postgres'",
    "dbt-redshift; extra == 'dbt-redshift'",
    "dbt-snowflake; extra == 'dbt-snowflake'",
    "dbt-spark; extra == 'dbt-spark'",
    "apache-airflow-providers-docker>=3.5.0; extra == 'docker'",
    "apache-airflow-providers-cncf-kubernetes>=5.1.1; extra == 'docs'",
    "pydata-sphinx-theme; extra == 'docs'",
    "sphinx; extra == 'docs'",
    "sphinx-autoapi; extra == 'docs'",
    "sphinx-autobuild; extra == 'docs'",
    "apache-airflow-providers-cncf-kubernetes>=5.1.1; extra == 'kubernetes'",
    "openlineage-airflow; extra == 'openlineage'",
    "openlineage-integration-common; extra == 'openlineage'",
    "mypy; extra == 'tests'",
    "packaging; extra == 'tests'",
    "pytest-cov; extra == 'tests'",
    "pytest-describe; extra == 'tests'",
    "pytest-dotenv; extra == 'tests'",
    "pytest-split; extra == 'tests'",
    "pytest>=6.0; extra == 'tests'",
    "requests-mock; extra == 'tests'",
    "sqlalchemy-stubs; extra == 'tests'",
    "types-requests; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "render 3rd party workflows in airflow",
  "version": "1.2.5",
  "releases": [],
  "developers": [
    "humans@astronomer.io"
  ],
  "kwds": "basic_cosmos_dag cosmos astronomer dbtdag svg",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_astronomer_cosmos",
  "homepage": "",
  "release_count": 67,
  "dependency_ids": [
    "pypi_aenum",
    "pypi_apache_airflow",
    "pypi_apache_airflow_providers_cncf_kubernetes",
    "pypi_apache_airflow_providers_docker",
    "pypi_astronomer_cosmos",
    "pypi_attrs",
    "pypi_dbt_athena",
    "pypi_dbt_athena_community",
    "pypi_dbt_bigquery",
    "pypi_dbt_databricks",
    "pypi_dbt_exasol",
    "pypi_dbt_postgres",
    "pypi_dbt_redshift",
    "pypi_dbt_snowflake",
    "pypi_dbt_spark",
    "pypi_importlib_metadata",
    "pypi_jinja2",
    "pypi_mypy",
    "pypi_openlineage_airflow",
    "pypi_openlineage_integration_common",
    "pypi_packaging",
    "pypi_pydantic",
    "pypi_pydata_sphinx_theme",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_describe",
    "pypi_pytest_dotenv",
    "pypi_pytest_split",
    "pypi_requests_mock",
    "pypi_sphinx",
    "pypi_sphinx_autoapi",
    "pypi_sphinx_autobuild",
    "pypi_sqlalchemy_stubs",
    "pypi_types_requests",
    "pypi_typing_extensions",
    "pypi_virtualenv"
  ]
}
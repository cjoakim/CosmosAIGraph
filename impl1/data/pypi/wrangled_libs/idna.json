{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: name service (dns)",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": "internationalized domain names in applications (idna)\n=====================================================\n\nsupport for the internationalized domain names in\napplications (idna) protocol as specified in `rfc 5891\n<https://tools.ietf.org/html/rfc5891>`_. this is the latest version of\nthe protocol and is sometimes referred to as \u201cidna 2008\u201d.\n\nthis library also provides support for unicode technical\nstandard 46, `unicode idna compatibility processing\n<https://unicode.org/reports/tr46/>`_.\n\nthis acts as a suitable replacement for the \u201cencodings.idna\u201d\nmodule that comes with the python standard library, but which\nonly supports the older superseded idna specification (`rfc 3490\n<https://tools.ietf.org/html/rfc3490>`_).\n\nbasic functions are simply executed:\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('\u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    \u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8\n\n\ninstallation\n------------\n\nthis package is available for installation from pypi:\n\n.. code-block:: bash\n\n    $ python3 -m pip install idna\n\n\nusage\n-----\n\nfor typical usage, the ``encode`` and ``decode`` functions will take a\ndomain name argument and perform a conversion to a-labels or u-labels\nrespectively.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('\u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    \u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8\n\nyou may use the codec encoding and decoding methods using the\n``idna.codec`` module:\n\n.. code-block:: pycon\n\n    >>> import idna.codec\n    >>> print('\u0434\u043e\u043c\u0435\u043d.\u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0435'.encode('idna2008'))\n    b'xn--d1acufc.xn--80akhbyknj4f'\n    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna2008'))\n    \u0434\u043e\u043c\u0435\u043d.\u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0435\n\nconversions can be applied at a per-label basis using the ``ulabel`` or\n``alabel`` functions if necessary:\n\n.. code-block:: pycon\n\n    >>> idna.alabel('\u6d4b\u8bd5')\n    b'xn--0zwm56d'\n\ncompatibility mapping (uts #46)\n+++++++++++++++++++++++++++++++\n\nas described in `rfc 5895 <https://tools.ietf.org/html/rfc5895>`_, the\nidna specification does not normalize input from different potential\nways a user may input a domain name. this functionality, known as\na \u201cmapping\u201d, is considered by the specification to be a local\nuser-interface issue distinct from idna conversion functionality.\n\nthis library provides one such mapping that was developed by the\nunicode consortium. known as `unicode idna compatibility processing\n<https://unicode.org/reports/tr46/>`_, it provides for both a regular\nmapping for typical applications, as well as a transitional mapping to\nhelp migrate from older idna 2003 applications.\n\nfor example, \u201ck\u00f6nigsg\u00e4\u00dfchen\u201d is not a permissible label as *latin\ncapital letter k* is not allowed (nor are capital letters in general).\nuts 46 will convert this into lower case prior to applying the idna\nconversion.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('k\u00f6nigsg\u00e4\u00dfchen')\n    ...\n    idna.core.invalidcodepoint: codepoint u+004b at position 1 of 'k\u00f6nigsg\u00e4\u00dfchen' not allowed\n    >>> idna.encode('k\u00f6nigsg\u00e4\u00dfchen', uts46=true)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n    k\u00f6nigsg\u00e4\u00dfchen\n\ntransitional processing provides conversions to help transition from\nthe older 2003 standard to the current standard. for example, in the\noriginal idna specification, the *latin small letter sharp s* (\u00df) was\nconverted into two *latin small letter s* (ss), whereas in the current\nidna specification this conversion is not performed.\n\n.. code-block:: pycon\n\n    >>> idna.encode('k\u00f6nigsg\u00e4\u00dfchen', uts46=true, transitional=true)\n    'xn--knigsgsschen-lcb0w'\n\nimplementers should use transitional processing with caution, only in\nrare cases where conversion from legacy labels to current labels must be\nperformed (i.e. idna implementations that pre-date 2008). for typical\napplications that just need to convert labels, transitional processing\nis unlikely to be beneficial and could produce unexpected incompatible\nresults.\n\n``encodings.idna`` compatibility\n++++++++++++++++++++++++++++++++\n\nfunction calls from the python built-in ``encodings.idna`` module are\nmapped to their idna 2008 equivalents using the ``idna.compat`` module.\nsimply substitute the ``import`` clause in your code to refer to the new\nmodule name.\n\nexceptions\n----------\n\nall errors raised during the conversion following the specification\nshould raise an exception derived from the ``idna.idnaerror`` base\nclass.\n\nmore specific exceptions that may be generated as ``idna.idnabidierror``\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ``idna.invalidcodepoint`` when\na specific codepoint is an illegal character in an idn label (i.e.\ninvalid); and ``idna.invalidcodepointcontext`` when the codepoint is\nillegal based on its positional context (i.e. it is contexto or contextj\nbut the contextual requirements are not satisfied.)\n\nbuilding and diagnostics\n------------------------\n\nthe idna and uts 46 functionality relies upon pre-calculated lookup\ntables for performance. these tables are derived from computing against\neligibility criteria in the respective standards. these tables are\ncomputed using the command-line script ``tools/idna-data``.\n\nthis tool will fetch relevant codepoint data from the unicode repository\nand perform the required calculations to identify eligibility. there are\nthree main modes:\n\n* ``idna-data make-libdata``. generates ``idnadata.py`` and\n  ``uts46data.py``, the pre-calculated lookup tables used for idna and\n  uts 46 conversions. implementers who wish to track this library against\n  a different unicode version may use this tool to manually generate a\n  different version of the ``idnadata.py`` and ``uts46data.py`` files.\n\n* ``idna-data make-table``. generate a table of the idna disposition\n  (e.g. pvalid, contextj, contexto) in the format found in appendix\n  b.1 of rfc 5892 and the pre-computed tables published by `iana\n  <https://www.iana.org/>`_.\n\n* ``idna-data u+0061``. prints debugging output on the various\n  properties associated with an individual unicode codepoint (in this\n  case, u+0061), that are used to assess the idna and uts 46 status of a\n  codepoint. this is helpful in debugging or analysis.\n\nthe tool accepts a number of arguments, described using ``idna-data\n-h``. most notably, the ``--version`` argument allows the specification\nof the version of unicode to be used in computing the table data. for\nexample, ``idna-data --version 9.0.0 make-libdata`` will generate\nlibrary data against unicode 9.0.0.\n\n\nadditional notes\n----------------\n\n* **packages**. the latest tagged release version is published in the\n  `python package index <https://pypi.org/project/idna/>`_.\n\n* **version support**. this library supports python 3.5 and higher.\n  as this library serves as a low-level toolkit for a variety of\n  applications, many of which strive for broad compatibility with older\n  python versions, there is no rush to remove older interpreter support.\n  removing support for older versions should be well justified in that the\n  maintenance burden has become too high.\n\n* **python 2**. python 2 is supported by version 2.x of this library.\n  while active development of the version 2.x series has ended, notable\n  issues being corrected may be backported to 2.x. use \"idna<3\" in your\n  requirements file if you need this library for a python 2 application.\n\n* **testing**. the library has a test suite based on each rule of the\n  idna specification, as well as tests that are provided as part of the\n  unicode technical standard 46, `unicode idna compatibility processing\n  <https://unicode.org/reports/tr46/>`_.\n\n* **emoji**. it is an occasional request to support emoji domains in\n  this library. encoding of symbols like emoji is expressly prohibited by\n  the technical standard idna 2008 and emoji domains are broadly phased\n  out across the domain industry due to associated security risks. for\n  now, applications that need to support these non-compliant labels\n  may wish to consider trying the encode/decode operation in this library\n  first, and then falling back to using `encodings.idna`. see `the github\n  project <https://github.com/kjd/idna/issues/18>`_ for more discussion.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "idna",
  "package_url": "https://pypi.org/project/idna/",
  "project_url": "https://pypi.org/project/idna/",
  "project_urls": {
    "Changelog": "https://github.com/kjd/idna/blob/master/HISTORY.rst",
    "Issue tracker": "https://github.com/kjd/idna/issues",
    "Source": "https://github.com/kjd/idna"
  },
  "release_url": "https://pypi.org/project/idna/3.6/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "internationalized domain names in applications (idna)",
  "version": "3.6",
  "releases": [],
  "developers": [
    "kim+pypi@gumleaf.org"
  ],
  "kwds": "unicode encodings rfc3490 encoding rfc5891",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_idna",
  "homepage": "",
  "release_count": 29,
  "dependency_ids": []
}
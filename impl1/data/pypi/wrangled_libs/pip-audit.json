{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security"
  ],
  "description": "pip-audit\n=========\n\n<!--- badges: start --->\n![ci](https://github.com/pypa/pip-audit/workflows/ci/badge.svg)\n[![pypi version](https://badge.fury.io/py/pip-audit.svg)](https://pypi.org/project/pip-audit)\n[![packaging status](https://repology.org/badge/tiny-repos/python:pip-audit.svg)](https://repology.org/project/python:pip-audit/versions)\n[![openssf scorecard](https://api.securityscorecards.dev/projects/github.com/pypa/pip-audit/badge)](https://api.securityscorecards.dev/projects/github.com/pypa/pip-audit)\n<!--- badges: end --->\n\n`pip-audit` is a tool for scanning python environments for packages\nwith known vulnerabilities. it uses the python packaging advisory database\n(https://github.com/pypa/advisory-database) via the\n[pypi json api](https://warehouse.pypa.io/api-reference/json.html) as a source\nof vulnerability reports.\n\nthis project is maintained in part by [trail of bits](https://www.trailofbits.com/)\nwith support from google. this is not an official google or trail of bits product.\n\n## index\n\n* [features](#features)\n* [installation](#installation)\n  * [third-party packages](#third-party-packages)\n  * [github actions](#github-actions)\n  * [`pre-commit` support](#pre-commit-support)\n* [usage](#usage)\n  * [exit codes](#exit-codes)\n  * [dry runs](#dry-runs)\n* [examples](#examples)\n* [troubleshooting](#troubleshooting)\n* [tips and tricks](#tips-and-tricks)\n* [security model](#security-model)\n* [licensing](#licensing)\n* [contributing](#contributing)\n* [code of conduct](#code-of-conduct)\n\n## features\n\n* support for auditing local environments and requirements-style files\n* support for multiple vulnerability services\n  ([pypi](https://warehouse.pypa.io/api-reference/json.html#known-vulnerabilities),\n  [osv](https://osv.dev/docs/))\n* support for emitting\n  [sboms](https://en.wikipedia.org/wiki/software_bill_of_materials) in\n  [cyclonedx](https://cyclonedx.org/) xml or json\n* support for automatically fixing vulnerable dependencies (`--fix`)\n* human and machine-readable output formats (columnar, markdown, json)\n* seamlessly reuses your existing local `pip` caches\n\n## installation\n\n`pip-audit` requires python 3.8 or newer, and can be installed directly via `pip`:\n\n```bash\npython -m pip install pip-audit\n```\n\n### third-party packages\n\nthere are multiple **third-party** packages for `pip-audit`. the matrices and badges below\nlist some of them:\n\n[![packaging status](https://repology.org/badge/vertical-allrepos/python:pip-audit.svg)](https://repology.org/project/python:pip-audit/versions)\n[![packaging status](https://repology.org/badge/vertical-allrepos/pip-audit.svg)](https://repology.org/project/pip-audit/versions)\n[![conda - platform](https://img.shields.io/conda/pn/conda-forge/pip-audit?logo=anaconda&style=flat)][#conda-forge-package]\n[![conda (channel only)](https://img.shields.io/conda/vn/conda-forge/pip-audit?logo=anaconda&style=flat&color=orange)][#conda-forge-package]\n\n[#conda-forge-package]: https://anaconda.org/conda-forge/pip-audit\n\nin particular, `pip-audit` can be installed via `conda`:\n\n```bash\nconda install -c conda-forge pip-audit\n```\n\nthird-party packages are **not** directly supported by this project. please consult your package manager's\ndocumentation for more detailed installation guidance.\n\n### github actions\n\n`pip-audit` has [an official github action](https://github.com/pypa/gh-action-pip-audit)!\n\nyou can install it from the\n[github marketplace](https://github.com/marketplace/actions/gh-action-pip-audit), or\nadd it to your ci manually:\n\n```yaml\njobs:\n  pip-audit:\n    steps:\n      - uses: pypa/gh-action-pip-audit@v1.0.0\n        with:\n          inputs: requirements.txt\n```\n\nsee the\n[action documentation](https://github.com/pypa/gh-action-pip-audit/blob/main/readme.md)\nfor more details and usage examples.\n\n### `pre-commit` support\n\n`pip-audit` has [`pre-commit`](https://pre-commit.com/) support.\n\nfor example, using `pip-audit` via `pre-commit` to audit a requirements file:\n\n```yaml\n  - repo: https://github.com/pypa/pip-audit\n    rev: v2.6.2\n    hooks:\n      -   id: pip-audit\n          args: [\"-r\", \"requirements.txt\"]\n\nci:\n  # leave pip-audit to only run locally and not in ci\n  # pre-commit.ci does not allow network calls\n  skip: [pip-audit]\n```\n\nany `pip-audit` arguments documented below can be passed.\n\n## usage\n\nyou can run `pip-audit` as a standalone program, or via `python -m`:\n\n```bash\npip-audit --help\npython -m pip_audit --help\n```\n\n<!-- @begin-pip-audit-help@ -->\n```\nusage: pip-audit [-h] [-v] [-l] [-r requirement] [-f format] [-s service] [-d]\n                 [-s] [--desc [{on,off,auto}]] [--cache-dir cache_dir]\n                 [--progress-spinner {on,off}] [--timeout timeout]\n                 [--path path] [-v] [--fix] [--require-hashes]\n                 [--index-url index_url] [--extra-index-url url]\n                 [--skip-editable] [--no-deps] [-o file] [--ignore-vuln id]\n                 [--disable-pip]\n                 [project_path]\n\naudit the python environment for dependencies with known vulnerabilities\n\npositional arguments:\n  project_path          audit a local python project at the given path\n                        (default: none)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -l, --local           show only results for dependencies in the local\n                        environment (default: false)\n  -r requirement, --requirement requirement\n                        audit the given requirements file; this option can be\n                        used multiple times (default: none)\n  -f format, --format format\n                        the format to emit audit results in (choices: columns,\n                        json, cyclonedx-json, cyclonedx-xml, markdown)\n                        (default: columns)\n  -s service, --vulnerability-service service\n                        the vulnerability service to audit dependencies\n                        against (choices: osv, pypi) (default: pypi)\n  -d, --dry-run         without `--fix`: collect all dependencies but do not\n                        perform the auditing step; with `--fix`: perform the\n                        auditing step but do not perform any fixes (default:\n                        false)\n  -s, --strict          fail the entire audit if dependency collection fails\n                        on any dependency (default: false)\n  --desc [{on,off,auto}]\n                        include a description for each vulnerability; `auto`\n                        defaults to `on` for the `json` format. this flag has\n                        no effect on the `cyclonedx-json` or `cyclonedx-xml`\n                        formats. (default: auto)\n  --cache-dir cache_dir\n                        the directory to use as an http cache for pypi; uses\n                        the `pip` http cache by default (default: none)\n  --progress-spinner {on,off}\n                        display a progress spinner (default: on)\n  --timeout timeout     set the socket timeout (default: 15)\n  --path path           restrict to the specified installation path for\n                        auditing packages; this option can be used multiple\n                        times (default: [])\n  -v, --verbose         run with additional debug logging; supply multiple\n                        times to increase verbosity (default: 0)\n  --fix                 automatically upgrade dependencies with known\n                        vulnerabilities (default: false)\n  --require-hashes      require a hash to check each requirement against, for\n                        repeatable audits; this option is implied when any\n                        package in a requirements file has a `--hash` option.\n                        (default: false)\n  --index-url index_url\n                        base url of the python package index; this should\n                        point to a repository compliant with pep 503 (the\n                        simple repository api); this will be resolved by pip\n                        if not specified (default: none)\n  --extra-index-url url\n                        extra urls of package indexes to use in addition to\n                        `--index-url`; should follow the same rules as\n                        `--index-url` (default: [])\n  --skip-editable       don't audit packages that are marked as editable\n                        (default: false)\n  --no-deps             don't perform any dependency resolution; requires all\n                        requirements are pinned to an exact version (default:\n                        false)\n  -o file, --output file\n                        output results to the given file (default: stdout)\n  --ignore-vuln id      ignore a specific vulnerability by its vulnerability\n                        id; this option can be used multiple times (default:\n                        [])\n  --disable-pip         don't use `pip` for dependency resolution; this can\n                        only be used with hashed requirements files or if the\n                        `--no-deps` flag has been provided (default: false)\n```\n<!-- @end-pip-audit-help@ -->\n\n### exit codes\n\non completion, `pip-audit` will exit with a code indicating its status.\n\nthe current codes are:\n\n* `0`: no known vulnerabilities were detected.\n* `1`: one or more known vulnerabilities were found.\n\n`pip-audit`'s exit code cannot be suppressed.\nsee [suppressing exit codes from `pip-audit`](#suppressing-exit-codes-from-pip-audit)\nfor supported alternatives.\n\n### dry runs\n\n`pip-audit` supports the `--dry-run` flag, which can be used to control whether\nan audit (or fix) step is actually performed.\n\n* on its own, `pip-audit --dry-run` skips the auditing step and prints\n  the number of dependencies that *would have been* audited.\n* in fix mode, `pip-audit --fix --dry-run` performs the auditing step and prints\n  out the fix behavior (i.e., which dependencies would be upgraded or skipped)\n  that *would have been performed*.\n\n## examples\n\naudit dependencies for the current python environment:\n```\n$ pip-audit\nno known vulnerabilities found\n```\n\naudit dependencies for a given requirements file:\n```\n$ pip-audit -r ./requirements.txt\nno known vulnerabilities found\n```\n\naudit dependencies for a requirements file, excluding system packages:\n```\n$ pip-audit -r ./requirements.txt -l\nno known vulnerabilities found\n```\n\naudit dependencies for a local python project:\n```\n$ pip-audit .\nno known vulnerabilities found\n```\n`pip-audit` searches the provided path for various python \"project\" files. at the moment, only `pyproject.toml` is supported.\n\naudit dependencies when there are vulnerabilities present:\n```\n$ pip-audit\nfound 2 known vulnerabilities in 1 package\nname  version id             fix versions\n----  ------- -------------- ------------\nflask 0.5     pysec-2019-179 1.0\nflask 0.5     pysec-2018-66  0.12.3\n```\n\naudit dependencies including descriptions:\n```\n$ pip-audit --desc\nfound 2 known vulnerabilities in 1 package\nname  version id             fix versions description\n----  ------- -------------- ------------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nflask 0.5     pysec-2019-179 1.0          the pallets project flask before 1.0 is affected by: unexpected memory usage. the impact is: denial of service. the attack vector is: crafted encoded json data. the fixed version is: 1. note: this may overlap cve-2018-1000656.\nflask 0.5     pysec-2018-66  0.12.3       the pallets project flask version before 0.12.3 contains a cwe-20: improper input validation vulnerability in flask that can result in large amount of memory usage possibly leading to denial of service. this attack appear to be exploitable via attacker provides json data in incorrect encoding. this vulnerability appears to have been fixed in 0.12.3. note: this may overlap cve-2019-1010083.\n```\n\naudit dependencies in json format:\n```\n$ pip-audit -f json | python -m json.tool\nfound 2 known vulnerabilities in 1 package\n[\n  {\n    \"name\": \"flask\",\n    \"version\": \"0.5\",\n    \"vulns\": [\n      {\n        \"id\": \"pysec-2019-179\",\n        \"fix_versions\": [\n          \"1.0\"\n        ],\n        \"description\": \"the pallets project flask before 1.0 is affected by: unexpected memory usage. the impact is: denial of service. the attack vector is: crafted encoded json data. the fixed version is: 1. note: this may overlap cve-2018-1000656.\"\n      },\n      {\n        \"id\": \"pysec-2018-66\",\n        \"fix_versions\": [\n          \"0.12.3\"\n        ],\n        \"description\": \"the pallets project flask version before 0.12.3 contains a cwe-20: improper input validation vulnerability in flask that can result in large amount of memory usage possibly leading to denial of service. this attack appear to be exploitable via attacker provides json data in incorrect encoding. this vulnerability appears to have been fixed in 0.12.3. note: this may overlap cve-2019-1010083.\"\n      }\n    ]\n  },\n  {\n    \"name\": \"jinja2\",\n    \"version\": \"3.0.2\",\n    \"vulns\": []\n  },\n  {\n    \"name\": \"pip\",\n    \"version\": \"21.3.1\",\n    \"vulns\": []\n  },\n  {\n    \"name\": \"setuptools\",\n    \"version\": \"57.4.0\",\n    \"vulns\": []\n  },\n  {\n    \"name\": \"werkzeug\",\n    \"version\": \"2.0.2\",\n    \"vulns\": []\n  },\n  {\n    \"name\": \"markupsafe\",\n    \"version\": \"2.0.1\",\n    \"vulns\": []\n  }\n]\n```\n\naudit and attempt to automatically upgrade vulnerable dependencies:\n```\n$ pip-audit --fix\nfound 2 known vulnerabilities in 1 package and fixed 2 vulnerabilities in 1 package\nname  version id             fix versions applied fix\n----- ------- -------------- ------------ ----------------------------------------\nflask 0.5     pysec-2019-179 1.0          successfully upgraded flask (0.5 => 1.0)\nflask 0.5     pysec-2018-66  0.12.3       successfully upgraded flask (0.5 => 1.0)\n```\n\n## troubleshooting\n\nhave you resolved a problem with `pip-audit`? help us by contributing to this\nsection!\n\n### `pip-audit` shows irrelevant vulnerability reports!\n\nin a perfect world, vulnerability feeds would have an infinite signal-to-noise\nratio: every vulnerability report would be (1) correct, and (2) applicable to\nevery use of every dependency.\n\nunfortunately, neither of these is guaranteed: vulnerability feeds are not\nimmune to extraneous or spam reports, and not all uses of a particular\ndependency map to all potential classes of vulnerabilities.\n\nif your `pip-audit` runs produce vulnerability reports that aren't actionable\nfor your particular application or use case, you can use the `--ignore-vuln id`\noption to ignore specific vulnerability reports. `--ignore-vuln` supports\naliases, so you can use a `ghsa-xxx` or `cve-xxx` id instead of a `pysec-xxx`\nid if the report in question does not have a pysec id.\n\nfor example, here is how you might ignore ghsa-w596-4wvx-j9j6, which is a\ncommon source of noisy vulnerability reports and false positives for users of\n[`pytest`](https://github.com/pytest-dev/pytest):\n\n```console\n# run the audit as normal, but exclude any reports that match ghsa-w596-4wvx-j9j6\n$ pip-audit --ignore-vuln ghsa-w596-4wvx-j9j6\n```\n\nthe `--ignore-vuln id` option works with all other dependency resolution\nand auditing options, meaning that it should function correctly with\nrequirements-style inputs, alternative vulnerability feeds, and so forth.\n\nit can also be passed multiple times, to ignore multiple reports:\n\n```console\n# run the audit as normal, but exclude any reports that match these ids\n$ pip-audit --ignore-vuln cve-xxx-yyyy --ignore-vuln cve-zzz-aaaa\n```\n\n### `pip-audit` takes longer than i expect!\n\ndepending on how you're using it, `pip-audit` may have to perform its\nown dependency resolution, which can take roughly as long as `pip install`\ndoes for a project. see the [security model](#security-model) for an explanation.\n\nyou have two options for avoiding dependency resolution: *audit a pre-installed\nenvironment*, or *ensure that your dependencies are already fully resolved*.\n\nif you know that you've already fully configured an environment equivalent\nto the one that `pip-audit -r requirements.txt` would audit, you can simply\nreuse it:\n\n```console\n# note the absence of any \"input\" arguments, indicating that the environment is used.\n$ pip-audit\n\n# optionally filter out non-local packages, for virtual environments:\n$ pip-audit --local\n```\n\nalternatively, if your input is fully pinned (and optionally hashed), you\ncan tell `pip-audit` to skip dependency resolution with either `--no-deps`\n(pinned without hashes) or `--require-hashes` (pinned including hashes).\n\nthe latter is equivalent to `pip`'s\n[hash-checking mode](https://pip.pypa.io/en/stable/cli/pip_install/#hash-checking-mode)\nand is preferred, since it offers additional integrity.\n\n```console\n# fails if any dependency is not fully pinned\n$ pip-audit --no-deps -r requirements.txt\n\n# fails if any dependency is not fully pinned *or* is missing hashes\n$ pip-audit --require-hashes -r requirements.txt\n```\n\n## tips and tricks\n\n### running against a `pipenv` project\n\n`pipenv` uses both a `pipfile` and `pipfile.lock` file to track and freeze dependencies\ninstead of a `requirements.txt` file. `pip-audit` cannot process the `pipfile[.lock]`\nfiles directly, however, these can be converted to a supported `requirements.txt` file\nthat `pip-audit` can run against. `pipenv` has a built-in command to convert dependencies\nto a `requirements.txt` file (as of [`v2022.4.8`](https://pipenv.pypa.io/en/latest/changelog/#id206)):\n\n```console\n$ pipenv run pip-audit -r <(pipenv requirements)\n```\n\n### suppressing exit codes from `pip-audit`\n\n`pip-audit` intentionally does not support internally suppressing its own\nexit codes.\n\nusers who need to suppress a failing `pip-audit` invocation can use\none of the standard shell idioms for doing so:\n\n```bash\npip-audit || true\n```\n\nor, to exit entirely:\n\n```bash\npip-audit || exit 0\n```\n\nthe exit code can also be captured and handled explicitly:\n\n```bash\npip-audit\nexitcode=\"${?}\"\n# do something with ${exitcode}\n```\n\nsee [exit codes](#exit-codes) for a list of potential codes that need handling.\n\n### reporting only fixable vulnerabilities\nin development workflows, you may want to ignore the vulnerabilities that haven't been remediated yet and only investigate them in your release process. `pip-audit` does not support ignoring unfixed vulnerabilities. however, you can export its output in json format and externally process it. for example, if you want to exit with a non-zero code only when the detected vulnerabilities have known fix versions, you can process the output using [jq](https://github.com/jqlang/jq) as:\n\n```shell\ntest -z \"$(pip-audit -r requirements.txt --format=json 2>/dev/null | jq '.dependencies[].vulns[].fix_versions[]')\"\n```\n\na simple (and inefficient) example of using this method would be:\n\n```shell\ntest -z \"$(pip-audit -r requirements.txt --format=json 2>/dev/null | jq '.dependencies[].vulns[].fix_versions[]')\" || pip-audit -r requirements.txt\n```\n\nwhich runs `pip-audit` as usual and exits with a non-zero code only if there are fixed versions for the known vulnerabilities.\n\n## security model\n\nthis section exists to describe the security assumptions you **can** and **must not**\nmake when using `pip-audit`.\n\ntl;dr: **if you wouldn't `pip install` it, you should not `pip audit` it.**\n\n`pip-audit` is a tool for auditing python environments for packages with\n*known vulnerabilities*. a \"known vulnerability\" is a publicly reported flaw in\na package that, if uncorrected, *might* allow a malicious actor to perform\nunintended actions.\n\n`pip-audit` **can** protect you against known vulnerabilities by telling\nyou when you have them, and how you should upgrade them. for example,\nif you have `somepackage==1.2.3` in your environment, `pip-audit` **can** tell\nyou that it needs to be upgraded to `1.2.4`.\n\nyou **can** assume that `pip-audit` will make a best effort to *fully resolve*\nall of your python dependencies and *either* fully audit each *or* explicitly\nstate which ones it has skipped, as well as why it has skipped them.\n\n`pip-audit` is **not** a static code analyzer. it analyzes dependency trees,\nnot code, and it **cannot** guarantee that arbitrary dependency resolutions\noccur statically. to understand why this is, refer to dustin ingram's\n[excellent post on dependency resolution in python](https://dustingram.com/articles/2018/03/05/why-pypi-doesnt-know-dependencies/).\n\nas such: you **must not** assume that `pip-audit` will **defend** you against\nmalicious packages. in particular, it is **incorrect** to treat\n`pip-audit -r input` as a \"more secure\" variant of `pip-audit`. for all intents\nand purposes, `pip-audit -r input` is functionally equivalent to\n`pip install -r input`, with a small amount of **non-security isolation** to\navoid conflicts with any of your local environments.\n\n`pip-audit` is first and foremost a auditing tool for *python* packages.\nyou **must not** assume that `pip-audit` will detect or flag \"transitive\"\nvulnerabilities that might be exposed through python packages, but are not\nactually part of the package itself. for example, `pip-audit`'s vulnerability\ninformation sources are unlikely to include an advisory for a vulnerable shared\nlibrary that a popular python package *might* use, since the python package's\nversion is not strongly connected to the shared library's version.\n\n## licensing\n\n`pip-audit` is licensed under the apache 2.0 license.\n\n`pip-audit` reuses and modifies examples from\n[`resolvelib`](https://github.com/sarugaku/resolvelib), which is licensed under\nthe isc license.\n\n## contributing\n\nsee [the contributing docs](contributing.md) for details.\n\n## code of conduct\n\neveryone interacting with this project is expected to follow the\n[psf code of conduct](https://github.com/pypa/.github/blob/main/code_of_conduct.md).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pip-audit",
  "package_url": "https://pypi.org/project/pip-audit/",
  "project_url": "https://pypi.org/project/pip-audit/",
  "project_urls": {
    "Homepage": "https://pypi.org/project/pip-audit/",
    "Issues": "https://github.com/pypa/pip-audit/issues",
    "Source": "https://github.com/pypa/pip-audit"
  },
  "release_url": "https://pypi.org/project/pip-audit/2.6.2/",
  "requires_dist": [
    "CacheControl[filecache] >= 0.13.0",
    "cyclonedx-python-lib >= 4,< 6",
    "html5lib>=1.1",
    "packaging>=23.0.0",
    "pip-api>=0.0.28",
    "pip-requirements-parser>=32.0.0",
    "requests >= 2.31.0",
    "rich>=12.4",
    "toml>=0.10",
    "build ; extra == \"dev\"",
    "bump>=1.3.2 ; extra == \"dev\"",
    "pip-audit[doc,test,lint] ; extra == \"dev\"",
    "pdoc ; extra == \"doc\"",
    "ruff < 0.1.9 ; extra == \"lint\"",
    "interrogate ; extra == \"lint\"",
    "mypy ; extra == \"lint\"",
    "types-html5lib ; extra == \"lint\"",
    "types-requests ; extra == \"lint\"",
    "types-toml ; extra == \"lint\"",
    "coverage[toml] ~= 7.0, != 7.3.3 ; extra == \"test\"",
    "pretend ; extra == \"test\"",
    "pytest ; extra == \"test\"",
    "pytest-cov ; extra == \"test\""
  ],
  "requires_python": ">=3.8",
  "summary": "a tool for scanning python environments for known vulnerabilities",
  "version": "2.6.2",
  "releases": [],
  "developers": [
    "alex.cameron@trailofbits.com",
    "di@python.org",
    "william@trailofbits.com"
  ],
  "kwds": "pip_audit pip pipfile pip_install badge",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pip_audit",
  "homepage": "",
  "release_count": 54,
  "dependency_ids": [
    "pypi_build",
    "pypi_bump",
    "pypi_cachecontrol",
    "pypi_coverage",
    "pypi_cyclonedx_python_lib",
    "pypi_html5lib",
    "pypi_interrogate",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pdoc",
    "pypi_pip_api",
    "pypi_pip_audit",
    "pypi_pip_requirements_parser",
    "pypi_pretend",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_rich",
    "pypi_ruff",
    "pypi_toml",
    "pypi_types_html5lib",
    "pypi_types_requests",
    "pypi_types_toml"
  ]
}
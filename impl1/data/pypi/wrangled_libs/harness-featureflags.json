{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "python sdk for harness feature flags\n========================\n\n[![pypi](https://img.shields.io/pypi/v/harness-featureflags.svg)](https://pypi.python.org/pypi/harness-featureflags)\n\n## table of contents\n**[intro](#intro)**<br>\n**[requirements](#requirements)**<br>\n**[quickstart](#quickstart)**<br>\n**[further reading](docs/further_reading.md)**<br>\n**[build instructions](docs/build.md)**<br>\n\n\n## intro\n\nuse this readme to get started with our feature flags (ff) sdk for python. this guide outlines the basics of getting started with the sdk and provides a full code sample for you to try out. \nthis sample doesn\u2019t include configuration options, for in depth steps and configuring the sdk, for example, disabling streaming or using our relay proxy, see the  [python sdk reference](https://ngdocs.harness.io/article/hwoxb6x2oe-python-sdk-reference).\n\nfor a sample ff python sdk project, see our test [test python project](examples/getting_started/getting_started.py).\n\n![featureflags](https://github.com/harness/ff-python-server-sdk/raw/main/docs/images/ff-gui.png)\n\n## requirements\n\n[python 3.7](https://www.python.org/downloads/) or newer (python --version)<br>\n[pip](https://packaging.python.org/en/latest/tutorials/installing-packages/#id12)<br>\n<br>\n[for mac users](https://opensource.com/article/19/5/python-3-default-mac) if you don't already have pyenv or something similar installed for managing python version<br>\n\n\n## quickstart\nto follow along with our test code sample, make sure you\u2019ve:\n\n- [created a feature flag on the harness platform](https://ngdocs.harness.io/article/1j7pdkqh7j-create-a-feature-flag) called harnessappdemodarkmode\n- [created a server sdk key and made a copy of it](https://ngdocs.harness.io/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key)\n- \n### install the sdk\ninstall the python sdk using pip\n```python\npython -m pip install harness-featureflags\n```\n\n### code sample\nthe following is a complete code example that you can use to test the `harnessappdemodarkmode` flag you created on the harness platform. when you run the code it will:\n- connect to the ff service.\n- report the value of the flag every 10 seconds until the connection is closed. every time the harnessappdemodarkmode flag is toggled on or off on the harness platform, the updated value is reported. \n- close the sdk.\n\n```python\nfrom featureflags.client import cfclient\nfrom featureflags.config import *\nfrom featureflags.evaluations.auth_target import target\nfrom featureflags.util import log\nimport os\nimport time\n\n# api key\napikey = os.getenv('ff_api_key', \"changeme\")\n\n# flag name\nflagname = os.getenv('ff_flag_name', \"harnessappdemodarkmode\")\n\ndef main():    \n    # create a feature flag client\n    client = cfclient(apikey)\n\n    # create a target (different targets can get different results based on rules.  this include a custom attribute 'location')\n    target = target(identifier='ht_1', name=\"harness_target_1\", attributes={\"location\": \"emea\"})\n\n    # loop forever reporting the state of the flag\n    while true:\n        result = client.bool_variation(flagname, target, false)\n        log.info(\"flag variation %s\", result)\n        time.sleep(10)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### running the example\n\n```bash\n$ export ff_api_key=<your key here>\n$ python3 examples/getting_started/getting_started.py\n```\n\n### running the example with docker\nif you dont have the right version of python installed locally, or dont want to install the dependancies you can\nuse docker to quickly get started\n\n```bash\n# install the package\ndocker run -v $(pwd):/app -w /app python:3.7-slim python -m pip install -t ./local  harness-featureflags\n\n# run the script\ndocker run  -e pythonpath=/app/local -e ff_api_key=$ff_api_key -v $(pwd):/app -w /app python:3.7-slim python examples/getting_started/getting_started.py\n```\n\n### additional reading\n\nfor further examples and config options, see the [python sdk reference](https://ngdocs.harness.io/article/hwoxb6x2oe-python-sdk-reference).\n\nfor more information about feature flags, see our [feature flags documentation](https://ngdocs.harness.io/article/0a2u2ppp8s-getting-started-with-feature-flags).\n\n-------------------------\n[harness](https://www.harness.io/) is a feature management platform that helps teams to build better software and to\ntest features quicker.\n\n-------------------------\n\n\n\n=======\nhistory\n=======\n\n1.0.1 (2021-07-07)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "featureflags",
  "license": "apache software license 2.0",
  "name": "harness-featureflags",
  "package_url": "https://pypi.org/project/harness-featureflags/",
  "project_url": "https://pypi.org/project/harness-featureflags/",
  "project_urls": {
    "Homepage": "https://github.com/harness/ff-python-server-sdk"
  },
  "release_url": "https://pypi.org/project/harness-featureflags/1.3.0/",
  "requires_dist": [
    "httpx (>=0.24.1)",
    "pyjwt (>=2.4.0)",
    "attrs (>=21.2.0)",
    "mmh3 (>=3.0.0)",
    "requests (>=2.25.1)",
    "tenacity (==8.2.2)"
  ],
  "requires_python": ">=3.5",
  "summary": "feature flag server sdk for python",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "enver.bisevac@harness.io",
    "enver_bisevac"
  ],
  "kwds": "featureflags harnessappdemodarkmode step_3_create_an_sdk_key python3 harness_target_1",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_harness_featureflags",
  "homepage": "https://github.com/harness/ff-python-server-sdk",
  "release_count": 30,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_httpx",
    "pypi_mmh3",
    "pypi_pyjwt",
    "pypi_requests",
    "pypi_tenacity"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: unix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering :: bio-informatics"
  ],
  "description": "|ci| |package| |pypi| |coverage| |depsy| |downloads|\n\ndescription\n-----------\n\nsamtools provides a function \"faidx\" (fasta index), which creates a\nsmall flat index file \".fai\" allowing for fast random access to any\nsubsequence in the indexed fasta file, while loading a minimal amount of the\nfile in to memory. this python module implements pure python classes for\nindexing, retrieval, and in-place modification of fasta files using a samtools\ncompatible index. the pyfaidx module is api compatible with the `pygr`_ seqdb module.\na command-line script \"`faidx`_\" is installed alongside the pyfaidx module, and\nfacilitates complex manipulation of fasta files without any programming knowledge.\n\n.. _`pygr`: https://github.com/cjlee112/pygr\n\nif you use pyfaidx in your publication, please cite:\n\n`shirley md`_, `ma z`_, `pedersen b`_, `wheelan s`_. `efficient \"pythonic\" access to fasta files using pyfaidx <https://dx.doi.org/10.7287/peerj.preprints.970v1>`_. peerj preprints 3:e1196. 2015.\n\n.. _`shirley md`: http://github.com/mdshw5\n.. _`ma z`: http://github.com/azalea\n.. _`pedersen b`: http://github.com/brentp\n.. _`wheelan s`: http://github.com/swheelan\n\ninstallation\n------------\n\nthis package is tested under linux and macos using python 3.7+, and and is available from the pypi:\n\n::\n\n    pip install pyfaidx  # add --user if you don't have root\n\nor download a `release <https://github.com/mdshw5/pyfaidx/releases>`_ and:\n\n::\n\n    pip install .\n\nif using ``pip install --user`` make sure to add ``/home/$user/.local/bin`` to your ``$path`` (on linux) or ``/users/$user/library/python/{python version}/bin`` (on macos) if you want to run the ``faidx`` script.\n\nusage\n-----\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta')\n    >>> genes\n    fasta(\"tests/data/genes.fasta\")  # set strict_bounds=true for bounds checking\n\nacts like a dictionary.\n\n.. code:: python\n\n    >>> genes.keys()\n    ('ab821309.1', 'kf435150.1', 'kf435149.1', 'nr_104216.1', 'nr_104215.1', 'nr_104212.1', 'nm_001282545.1', 'nm_001282543.1', 'nm_000465.3', 'nm_001282549.1', 'nm_001282548.1', 'xm_005249645.1', 'xm_005249644.1', 'xm_005249643.1', 'xm_005249642.1', 'xm_005265508.1', 'xm_005265507.1', 'xr_241081.1', 'xr_241080.1', 'xr_241079.1')\n\n    >>> genes['nm_001282543.1'][200:230]\n    >nm_001282543.1:201-230\n    ctcgttccgcgcccgccatggaaccggatg\n\n    >>> genes['nm_001282543.1'][200:230].seq\n    'ctcgttccgcgcccgccatggaaccggatg'\n\n    >>> genes['nm_001282543.1'][200:230].name\n    'nm_001282543.1'\n\n    # start attributes are 1-based\n    >>> genes['nm_001282543.1'][200:230].start\n    201\n\n    # end attributes are 0-based\n    >>> genes['nm_001282543.1'][200:230].end\n    230\n\n    >>> genes['nm_001282543.1'][200:230].fancy_name\n    'nm_001282543.1:201-230'\n\n    >>> len(genes['nm_001282543.1'])\n    5466\n\nnote that start and end coordinates of sequence objects are [1, 0]. this can be changed to [0, 0] by passing ``one_based_attributes=false`` to ``fasta`` or ``faidx``. this argument only affects the ``sequence .start/.end`` attributes, and has no effect on slicing coordinates.\n\nindexes like a list:\n\n.. code:: python\n\n    >>> genes[0][:50]\n    >ab821309.1:1-50\n    atggtcagctggggtcgtttcatctgcctggtcgtggtcaccatggcaac\n\nslices just like a string:\n\n.. code:: python\n\n    >>> genes['nm_001282543.1'][200:230][:10]\n    >nm_001282543.1:201-210\n    ctcgttccgc\n\n    >>> genes['nm_001282543.1'][200:230][::-1]\n    >nm_001282543.1:230-201\n    gtaggccaaggtaccgcccgcgccttgctc\n\n    >>> genes['nm_001282543.1'][200:230][::3]\n    >nm_001282543.1:201-230\n    cgcccctaca\n\n    >>> genes['nm_001282543.1'][:]\n    >nm_001282543.1:1-5466\n    ccccgcccct........\n\n- slicing start and end coordinates are 0-based, just like python sequences.\n\ncomplements and reverse complements just like dna\n\n.. code:: python\n\n    >>> genes['nm_001282543.1'][200:230].complement\n    >nm_001282543.1 (complement):201-230\n    gagcaaggcgcgggcggtaccttggcctac\n\n    >>> genes['nm_001282543.1'][200:230].reverse\n    >nm_001282543.1:230-201\n    gtaggccaaggtaccgcccgcgccttgctc\n\n    >>> -genes['nm_001282543.1'][200:230]\n    >nm_001282543.1 (complement):230-201\n    catccggttccatggcgggcgcggaacgag\n\n``fasta`` objects can also be accessed using method calls:\n\n.. code:: python\n\n    >>> genes.get_seq('nm_001282543.1', 201, 210)\n    >nm_001282543.1:201-210\n    ctcgttccgc\n\n    >>> genes.get_seq('nm_001282543.1', 201, 210, rc=true)\n    >nm_001282543.1 (complement):210-201\n    gcggaacgag\n\nspliced sequences can be retrieved from a list of [start, end] coordinates:\n**todo** update this section\n\n.. code:: python\n\n    # new in v0.5.1\n    segments = [[1, 10], [50, 70]]\n    >>> genes.get_spliced_seq('nm_001282543.1', segments)\n    >gi|543583786|ref|nm_001282543.1|:1-70\n    ccccgcccctggtttcgagtcgctggcctgc\n\n.. _keyfn:\n\ncustom key functions provide cleaner access:\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta', key_function = lambda x: x.split('.')[0])\n    >>> genes.keys()\n    dict_keys(['nr_104212', 'nm_001282543', 'xm_005249644', 'xm_005249645', 'nr_104216', 'xm_005249643', 'nr_104215', 'kf435150', 'ab821309', 'nm_001282549', 'xr_241081', 'kf435149', 'xr_241079', 'nm_000465', 'xm_005265508', 'xr_241080', 'xm_005249642', 'nm_001282545', 'xm_005265507', 'nm_001282548'])\n    >>> genes['nr_104212'][:10]\n    >nr_104212:1-10\n    ccccgcccct\n\nyou can specify a character to split names on, which will generate additional entries:\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta', split_char='.', duplicate_action=\"first\") # default duplicate_action=\"stop\"\n    >>> genes.keys()\n    dict_keys(['.1', 'nr_104212', 'nm_001282543', 'xm_005249644', 'xm_005249645', 'nr_104216', 'xm_005249643', 'nr_104215', 'kf435150', 'ab821309', 'nm_001282549', 'xr_241081', 'kf435149', 'xr_241079', 'nm_000465', 'xm_005265508', 'xr_241080', 'xm_005249642', 'nm_001282545', 'xm_005265507', 'nm_001282548'])\n\nif your `key_function` or `split_char` generates duplicate entries, you can choose what action to take:\n\n.. code:: python\n\n    # new in v0.4.9\n    >>> genes = fasta('tests/data/genes.fasta', split_char=\"|\", duplicate_action=\"longest\")\n    >>> genes.keys()\n    dict_keys(['gi', '563317589', 'dbj', 'ab821309.1', '', '557361099', 'gb', 'kf435150.1', '557361097', 'kf435149.1', '543583796', 'ref', 'nr_104216.1', '543583795', 'nr_104215.1', '543583794', 'nr_104212.1', '543583788', 'nm_001282545.1', '543583786', 'nm_001282543.1', '543583785', 'nm_000465.3', '543583740', 'nm_001282549.1', '543583738', 'nm_001282548.1', '530384540', 'xm_005249645.1', '530384538', 'xm_005249644.1', '530384536', 'xm_005249643.1', '530384534', 'xm_005249642.1', '530373237','xm_005265508.1', '530373235', 'xm_005265507.1', '530364726', 'xr_241081.1', '530364725', 'xr_241080.1', '530364724', 'xr_241079.1'])\n\nfilter functions (returning true) limit the index:\n\n.. code:: python\n\n    # new in v0.3.8\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta', filt_function = lambda x: x[0] == 'n')\n    >>> genes.keys()\n    dict_keys(['nr_104212', 'nm_001282543', 'nr_104216', 'nr_104215', 'nm_001282549', 'nm_000465', 'nm_001282545', 'nm_001282548'])\n    >>> genes['xm_005249644']\n    keyerror: xm_005249644 not in tests/data/genes.fasta.\n\nor just get a python string:\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta', as_raw=true)\n    >>> genes\n    fasta(\"tests/data/genes.fasta\", as_raw=true)\n\n    >>> genes['nm_001282543.1'][200:230]\n    ctcgttccgcgcccgccatggaaccggatg\n\nyou can make sure that you always receive an uppercase sequence, even if your fasta file has lower case\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> reference = fasta('tests/data/genes.fasta.lower', sequence_always_upper=true)\n    >>> reference['gi|557361099|gb|kf435150.1|'][1:70]\n\n    >gi|557361099|gb|kf435150.1|:2-70\n    tgacatcattttccacctctgctcagtgttcaacatctgacagtgcttgcaggatctctcctggacaaa\n\n\nyou can also perform line-based iteration, receiving the sequence lines as they appear in the fasta file:\n\n.. code:: python\n\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta')\n    >>> for line in genes['nm_001282543.1']:\n    ...   print(line)\n    ccccgcccctctggcggcccgccgtcccagacgcgggaagagcttggccggtttcgagtcgctggcctgc\n    agcttccctgtggtttcccgaggcttccttgcttcccgctctgcgaggagcctttcatccgaaggcggga\n    cgatgccggataatcggcagccgaggaaccggcagccgaggatccgctccgggaacgagcctcgttccgc\n    ...\n\nsequence names are truncated on any whitespace. this is a limitation of the indexing strategy. however, full names can be recovered:\n\n.. code:: python\n\n    # new in v0.3.7\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta')\n    >>> for record in genes:\n    ...   print(record.name)\n    ...   print(record.long_name)\n    ...\n    gi|563317589|dbj|ab821309.1|\n    gi|563317589|dbj|ab821309.1| homo sapiens fgfr2-ahcyl1 mrna for fgfr2-ahcyl1 fusion kinase protein, complete cds\n    gi|557361099|gb|kf435150.1|\n    gi|557361099|gb|kf435150.1| homo sapiens mdm4 protein variant y (mdm4) mrna, complete cds, alternatively spliced\n    gi|557361097|gb|kf435149.1|\n    gi|557361097|gb|kf435149.1| homo sapiens mdm4 protein variant g (mdm4) mrna, complete cds\n    ...\n\n    # new in v0.4.9\n    >>> from pyfaidx import fasta\n    >>> genes = fasta('tests/data/genes.fasta', read_long_names=true)\n    >>> for record in genes:\n    ...   print(record.name)\n    ...\n    gi|563317589|dbj|ab821309.1| homo sapiens fgfr2-ahcyl1 mrna for fgfr2-ahcyl1 fusion kinase protein, complete cds\n    gi|557361099|gb|kf435150.1| homo sapiens mdm4 protein variant y (mdm4) mrna, complete cds, alternatively spliced\n    gi|557361097|gb|kf435149.1| homo sapiens mdm4 protein variant g (mdm4) mrna, complete cds\n\nrecords can be accessed efficiently as numpy arrays:\n\n.. code:: python\n\n    # new in v0.5.4\n    >>> from pyfaidx import fasta\n    >>> import numpy as np\n    >>> genes = fasta('tests/data/genes.fasta')\n    >>> np.asarray(genes['nm_001282543.1'])\n    array(['c', 'c', 'c', ..., 'a', 'a', 'a'], dtype='|s1')\n\nsequence can be buffered in memory using a read-ahead buffer\nfor fast sequential access:\n\n.. code:: python\n\n    >>> from timeit import timeit\n    >>> fetch = \"genes['nm_001282543.1'][200:230]\"\n    >>> read_ahead = \"import pyfaidx; genes = pyfaidx.fasta('tests/data/genes.fasta', read_ahead=10000)\"\n    >>> no_read_ahead = \"import pyfaidx; genes = pyfaidx.fasta('tests/data/genes.fasta')\"\n    >>> string_slicing = \"genes = {}; genes['nm_001282543.1'] = 'n'*10000\"\n\n    >>> timeit(fetch, no_read_ahead, number=10000)\n    0.2204863309962093\n    >>> timeit(fetch, read_ahead, number=10000)\n    0.1121859749982832\n    >>> timeit(fetch, string_slicing, number=10000)\n    0.0033553699977346696\n\nread-ahead buffering can reduce runtime by 1/2 for sequential accesses to buffered regions.\n\n.. role:: red\n\nif you want to modify the contents of your fasta file in-place, you can use the `mutable` argument.\nany portion of the fastarecord can be replaced with an equivalent-length string.\n:red:`warning`: *this will change the contents of your file immediately and permanently:*\n\n.. code:: python\n\n    >>> genes = fasta('tests/data/genes.fasta', mutable=true)\n    >>> type(genes['nm_001282543.1'])\n    <class 'pyfaidx.mutablefastarecord'>\n\n    >>> genes['nm_001282543.1'][:10]\n    >nm_001282543.1:1-10\n    ccccgcccct\n    >>> genes['nm_001282543.1'][:10] = 'nnnnnnnnnn'\n    >>> genes['nm_001282543.1'][:15]\n    >nm_001282543.1:1-15\n    nnnnnnnnnnctggc\n\nthe fastavariant class provides a way to integrate single nucleotide variant calls to generate a consensus sequence.\n\n.. code:: python\n\n    # new in v0.4.0\n    >>> consensus = fastavariant('tests/data/chr22.fasta', 'tests/data/chr22.vcf.gz', het=true, hom=true)\n    runtimewarning: using sample na06984 genotypes.\n\n    >>> consensus['22'].variant_sites\n    (16042793, 21833121, 29153196, 29187373, 29187448, 29194610, 29821295, 29821332, 29993842, 32330460, 32352284)\n\n    >>> consensus['22'][16042790:16042800]\n    >22:16042791-16042800\n    tcgtaggaca\n\n    >>> fasta('tests/data/chr22.fasta')['22'][16042790:16042800]\n    >22:16042791-16042800\n    tcataggaca\n\n    >>> consensus = fastavariant('tests/data/chr22.fasta', 'tests/data/chr22.vcf.gz', sample='na06984', het=true, hom=true, call_filter='gt == \"0/1\"')\n    >>> consensus['22'].variant_sites\n    (16042793, 29187373, 29187448, 29194610, 29821332)\n    \nyou can also specify paths using ``pathlib.path`` objects.\n\n.. code:: python\n    \n    #new in v0.7.1\n    >>> from pyfaidx import fasta\n    >>> from pathlib import path\n    >>> genes = fasta(path('tests/data/genes.fasta'))\n    >>> genes\n    fasta(\"tests/data/genes.fasta\")\n\naccessing fasta files from `filesystem_spec <https://filesystem-spec.readthedocs.io>`_ filesystems:\n\n.. code:: python\n\n    # new in v0.7.0\n    # pip install fsspec s3fs\n    >>> import fsspec\n    >>> from pyfaidx import fasta\n    >>> of = fsspec.open(\"s3://broad-references/hg19/v0/homo_sapiens_assembly19.fasta\", anon=true)\n    >>> genes = fasta(of)\n\n\n.. _faidx:\n\nit also provides a command-line script:\n\ncli script: faidx\n~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    fetch sequences from fasta. if no regions are specified, all entries in the\n    input file are returned. input fasta file must be consistently line-wrapped,\n    and line wrapping of output is based on input line lengths.\n\n    positional arguments:\n      fasta                 fasta file\n      regions               space separated regions of sequence to fetch e.g.\n                            chr1:1-1000\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -b bed, --bed bed     bed file of regions (zero-based start coordinate)\n      -o out, --out out     output file name (default: stdout)\n      -i {bed,chromsizes,nucleotide,transposed}, --transform {bed,chromsizes,nucleotide,transposed} transform the requested regions into another format. default: none\n      -c, --complement      complement the sequence. default: false\n      -r, --reverse         reverse the sequence. default: false\n      -a size_range, --size-range size_range\n                            selected sequences are in the size range [low, high]. example: 1,1000 default: none\n      -n, --no-names        omit sequence names from output. default: false\n      -f, --full-names      output full names including description. default: false\n      -x, --split-files     write each region to a separate file (names are derived from regions)\n      -l, --lazy            fill in --default-seq for missing ranges. default: false\n      -s default_seq, --default-seq default_seq\n                            default base for missing positions and masking. default: none\n      -d delimiter, --delimiter delimiter\n                            delimiter for splitting names to multiple values (duplicate names will be discarded). default: none\n      -e header_function, --header-function header_function\n                            python function to modify header lines e.g: \"lambda x: x.split(\"|\")[0]\". default: lambda x: x.split()[0]\n      -u {stop,first,last,longest,shortest}, --duplicates-action {stop,first,last,longest,shortest}\n                            entry to take when duplicate sequence names are encountered. default: stop\n      -g regex, --regex regex\n                            selected sequences are those matching regular expression. default: .*\n      -v, --invert-match    selected sequences are those not matching 'regions' argument. default: false\n      -m, --mask-with-default-seq\n                            mask the fasta file using --default-seq default: false\n      -m, --mask-by-case    mask the fasta file by changing to lowercase. default: false\n      -e header_function, --header-function header_function\n                            python function to modify header lines e.g: \"lambda x: x.split(\"|\")[0]\". default: none\n      --no-rebuild          do not rebuild the .fai index even if it is out of date. default: false\n      --version             print pyfaidx version number\n\nexamples:\n\n.. code:: bash\n\n    $ faidx -v tests/data/genes.fasta\n    ### creates an .fai index, but supresses sequence output using --invert-match ###\n\n    $ faidx tests/data/genes.fasta nm_001282543.1:201-210 nm_001282543.1:300-320\n    >nm_001282543.1:201-210\n    ctcgttccgc\n    >nm_001282543.1:300-320\n    gtaattgtgtaagtgactgca\n\n    $ faidx --full-names tests/data/genes.fasta nm_001282543.1:201-210\n    >nm_001282543.1| homo sapiens brca1 associated ring domain 1 (bard1), transcript variant 2, mrna\n    ctcgttccgc\n\n    $ faidx --no-names tests/data/genes.fasta nm_001282543.1:201-210 nm_001282543.1:300-320\n    ctcgttccgc\n    gtaattgtgtaagtgactgca\n\n    $ faidx --complement tests/data/genes.fasta nm_001282543.1:201-210\n    >nm_001282543.1:201-210 (complement)\n    gagcaaggcg\n\n    $ faidx --reverse tests/data/genes.fasta nm_001282543.1:201-210\n    >nm_001282543.1:210-201\n    cgccttgctc\n\n    $ faidx --reverse --complement tests/data/genes.fasta nm_001282543.1:201-210\n    >nm_001282543.1:210-201 (complement)\n    gcggaacgag\n\n    $ faidx tests/data/genes.fasta nm_001282543.1\n    >nm_001282543.1:1-5466\n    ccccgcccct........\n    ..................\n    ..................\n    ..................\n\n    $ faidx --regex \"^nm_00128254[35]\" genes.fasta\n    >nm_001282543.1\n    ..................\n    ..................\n    ..................\n    >nm_001282545.1\n    ..................\n    ..................\n    ..................\n\n    $ faidx --lazy tests/data/genes.fasta nm_001282543.1:5460-5480\n    >nm_001282543.1:5460-5480\n    aaaaaaannnnnnnnnnnnnn\n\n    $ faidx --lazy --default-seq='q' tests/data/genes.fasta nm_001282543.1:5460-5480\n    >nm_001282543.1:5460-5480\n    aaaaaaaqqqqqqqqqqqqqq\n\n    $ faidx tests/data/genes.fasta --bed regions.bed\n    ...\n\n    $ faidx --transform chromsizes tests/data/genes.fasta\n    ab821309.1\t3510\n    kf435150.1\t481\n    kf435149.1\t642\n    nr_104216.1\t4573\n    nr_104215.1\t5317\n    nr_104212.1\t5374\n    ...\n\n    $ faidx --transform bed tests/data/genes.fasta\n    ab821309.1\t1    3510\n    kf435150.1\t1    481\n    kf435149.1\t1    642\n    nr_104216.1\t1   4573\n    nr_104215.1\t1   5317\n    nr_104212.1\t1   5374\n    ...\n\n    $ faidx --transform nucleotide tests/data/genes.fasta\n    name\tstart\tend\ta\tt\tc\tg\tn\n    ab821309.1\t1\t3510\t955\t774\t837\t944\t0\n    kf435150.1\t1\t481\t149\t120\t103\t109\t0\n    kf435149.1\t1\t642\t201\t163\t129\t149\t0\n    nr_104216.1\t1\t4573\t1294\t1552\t828\t899\t0\n    nr_104215.1\t1\t5317\t1567\t1738\t968\t1044\t0\n    nr_104212.1\t1\t5374\t1581\t1756\t977\t1060\t0\n    ...\n\n    faidx --transform transposed tests/data/genes.fasta\n    ab821309.1\t1\t3510\tatggtcagctggggtcgtttcatc...\n    kf435150.1\t1\t481\tatgacatcattttccacctctgct...\n    kf435149.1\t1\t642\tatgacatcattttccacctctgct...\n    nr_104216.1\t1\t4573\tccccgcccctctggcggcccgccg...\n    nr_104215.1\t1\t5317\tccccgcccctctggcggcccgccg...\n    nr_104212.1\t1\t5374\tccccgcccctctggcggcccgccg...\n    ...\n\n    $ faidx --split-files tests/data/genes.fasta\n    $ ls\n    ab821309.1.fasta\tnm_001282549.1.fasta\txm_005249645.1.fasta\n    kf435149.1.fasta\tnr_104212.1.fasta\txm_005265507.1.fasta\n    kf435150.1.fasta\tnr_104215.1.fasta\txm_005265508.1.fasta\n    nm_000465.3.fasta\tnr_104216.1.fasta\txr_241079.1.fasta\n    nm_001282543.1.fasta\txm_005249642.1.fasta\txr_241080.1.fasta\n    nm_001282545.1.fasta\txm_005249643.1.fasta\txr_241081.1.fasta\n    nm_001282548.1.fasta\txm_005249644.1.fasta\n\n    $ faidx --delimiter='_' tests/data/genes.fasta 000465.3\n    >000465.3\n    ccccgcccctctggcggcccgccgtcccagacgcgggaagagcttggccggtttcgagtcgctggcctgc\n    agcttccctgtggtttcccgaggcttccttgcttcccgctctgcgaggagcctttcatccgaaggcggga\n    .......\n\n    $ faidx --size-range 5500,6000 -i chromsizes tests/data/genes.fasta\n    nm_000465.3\t5523\n\n    $ faidx -m --bed regions.bed tests/data/genes.fasta\n    ### modifies tests/data/genes.fasta by masking regions using --default-seq character ###\n\n    $ faidx -m --bed regions.bed tests/data/genes.fasta\n    ### modifies tests/data/genes.fasta by masking regions using lowercase characters ###\n\n    $ faidx -e \"lambda x: x.split('.')[0]\" tests/data/genes.fasta -i bed\n    ab821309\t1\t3510\n    kf435150\t1\t481\n    kf435149\t1\t642\n    nr_104216\t1\t4573\n    nr_104215\t1\t5317\n    .......\n\n\nsimilar syntax as ``samtools faidx``\n\n\na lower-level faidx class is also available:\n\n.. code:: python\n\n    >>> from pyfaidx import faidx\n    >>> fa = faidx('genes.fa')  # can return str with as_raw=true\n    >>> fa.index\n    ordereddict([('ab821309.1', indexrecord(rlen=3510, offset=12, lenc=70, lenb=71)), ('kf435150.1', indexrecord(rlen=481, offset=3585, lenc=70, lenb=71)),... ])\n\n    >>> fa.index['ab821309.1'].rlen\n    3510\n\n    fa.fetch('ab821309.1', 1, 10)  # these are 1-based genomic coordinates\n    >ab821309.1:1-10\n    atggtcagct\n\n\n-  if the fasta file is not indexed, when ``faidx`` is initialized the\n   ``build_index`` method will automatically run, and\n   the index will be written to \"filename.fa.fai\" with ``write_fai()``.\n   where \"filename.fa\" is the original fasta file.\n-  start and end coordinates are 1-based.\n\nsupport for compressed fasta\n----------------------------\n\n``pyfaidx`` can create and read ``.fai`` indices for fasta files that have\nbeen compressed using the `bgzip <https://www.htslib.org/doc/bgzip.html>`_\ntool from `samtools <http://www.htslib.org/>`_. ``bgzip`` writes compressed\ndata in a ``bgzf`` format. ``bgzf`` is ``gzip`` compatible, consisting of\nmultiple concatenated ``gzip`` blocks, each with an additional ``gzip``\nheader making it possible to build an index for rapid random access. i.e.,\nfiles compressed with ``bgzip`` are valid ``gzip`` and so can be read by\n``gunzip``.  see `this description\n<http://pydoc.net/python/biopython/1.66/bio.bgzf/>`_ for more details on\n``bgzip``.\n\nchangelog\n---------\n\nplease see the `releases <https://github.com/mdshw5/pyfaidx/releases>`_ for a\ncomprehensive list of version changes.\n\nknown issues\n------------\n\ni try to fix as many bugs as possible, but most of this work is supported by a single developer. please check the `known issues <https://github.com/mdshw5/pyfaidx/issues?utf8=\u2713&q=is%3aissue+is%3aopen+label%3aknown>`_ for bugs relevant to your work. pull requests are welcome.\n\n\ncontributing\n------------\n\ncreate a new pull request with one feature. if you add a new feature, please\ncreate also the relevant test.\n\nto get test running on your machine:\n - create a new virtualenv and install the `dev-requirements.txt`.\n \n      pip install -r dev-requirements.txt\n      \n - download the test data running:\n\n      python tests/data/download_gene_fasta.py\n\n - run the tests with\n\n      pytests\n\nacknowledgements\n----------------\n\nthis project is freely licensed by the author, `matthew\nshirley <http://mattshirley.com>`_, and was completed under the\nmentorship and financial support of drs. `sarah\nwheelan <http://sjwheelan.som.jhmi.edu>`_ and `vasan\nyegnasubramanian <http://yegnalab.onc.jhmi.edu>`_ at the sidney kimmel\ncomprehensive cancer center in the department of oncology.\n\n.. |travis| image:: https://travis-ci.com/mdshw5/pyfaidx.svg?branch=master\n    :target: https://travis-ci.com/mdshw5/pyfaidx\n    \n.. |ci| image:: https://github.com/mdshw5/pyfaidx/actions/workflows/main.yml/badge.svg?branch=master\n    :target: https://github.com/mdshw5/pyfaidx/actions/workflows/main.yml\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pyfaidx.svg?branch=master\n    :target: https://pypi.python.org/pypi/pyfaidx\n\n.. |landscape| image:: https://landscape.io/github/mdshw5/pyfaidx/master/landscape.svg\n   :target: https://landscape.io/github/mdshw5/pyfaidx/master\n   :alt: code health\n\n.. |coverage| image:: https://codecov.io/gh/mdshw5/pyfaidx/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/mdshw5/pyfaidx\n\n.. |depsy| image:: http://depsy.org/api/package/pypi/pyfaidx/badge.svg\n   :target: http://depsy.org/package/python/pyfaidx\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/80ihlw30a003596w?svg=true\n   :target: https://ci.appveyor.com/project/mdshw5/pyfaidx\n   \n.. |package| image:: https://github.com/mdshw5/pyfaidx/actions/workflows/pypi.yml/badge.svg\n   :target: https://github.com/mdshw5/pyfaidx/actions/workflows/pypi.yml\n   \n.. |downloads| image:: https://img.shields.io/pypi/dm/pyfaidx.svg\n   :target: https://pypi.python.org/pypi/pyfaidx/\n",
  "docs_url": "https://pythonhosted.org/pyfaidx/",
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "pyfaidx",
  "package_url": "https://pypi.org/project/pyfaidx/",
  "project_url": "https://pypi.org/project/pyfaidx/",
  "project_urls": {
    "Author homepage": "http://mattshirley.com",
    "Homepage": "https://github.com/mdshw5/pyfaidx/"
  },
  "release_url": "https://pypi.org/project/pyfaidx/0.7.2.2/",
  "requires_dist": [
    "six",
    "setuptools",
    "importlib-metadata"
  ],
  "requires_python": ">=3.7",
  "summary": "pyfaidx: efficient pythonic random access to fasta subsequences",
  "version": "0.7.2.2",
  "releases": [],
  "developers": [
    "mdshw5@gmail.com"
  ],
  "kwds": "pyfaidx download_gene_fasta python indexes pygr",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_pyfaidx",
  "homepage": "",
  "release_count": 85,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_setuptools",
    "pypi_six"
  ]
}
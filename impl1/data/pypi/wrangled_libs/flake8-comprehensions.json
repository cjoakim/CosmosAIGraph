{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "=====================\nflake8-comprehensions\n=====================\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/flake8-comprehensions/main.yml?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/flake8-comprehensions/actions?workflow=ci\n\n.. image:: https://img.shields.io/pypi/v/flake8-comprehensions.svg?style=for-the-badge\n   :target: https://pypi.org/project/flake8-comprehensions/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\na `flake8 <https://flake8.readthedocs.io/en/latest/index.html>`_ plugin that helps you write better list/set/dict comprehensions.\n\nrequirements\n============\n\npython 3.8 to 3.12 supported.\n\ninstallation\n============\n\nfirst, install with ``pip``:\n\n.. code-block:: sh\n\n     python -m pip install flake8-comprehensions\n\nsecond, if you define flake8\u2019s ``select`` setting, add the ``c4`` prefix to it.\notherwise, the plugin should be active by default.\n\n----\n\n**linting a django project?**\ncheck out my book `boost your django dx <https://adamchainz.gumroad.com/l/byddx>`__ which covers flake8 and many other code quality tools.\n\n----\n\nrules\n=====\n\nc400-402: unnecessary generator - rewrite as a ``<list/set/dict>`` comprehension.\n---------------------------------------------------------------------------------\n\nrules:\n\n* c400 unnecessary generator - rewrite as a list comprehension.\n* c401 unnecessary generator - rewrite as a set comprehension.\n* c402 unnecessary generator - rewrite as a dict comprehension.\n\nit's unnecessary to use ``list``, ``set``, or ``dict`` around a generator expression, since there are equivalent comprehensions for these types.\nfor example:\n\n* rewrite ``list(f(x) for x in foo)`` as ``[f(x) for x in foo]``\n* rewrite ``set(f(x) for x in foo)`` as ``{f(x) for x in foo}``\n* rewrite ``dict((x, f(x)) for x in foo)`` as ``{x: f(x) for x in foo}``\n\nc403-404: unnecessary list comprehension - rewrite as a ``<set/dict>`` comprehension.\n-------------------------------------------------------------------------------------\n\nrules:\n\n* c403 unnecessary list comprehension - rewrite as a set comprehension.\n* c404 unnecessary list comprehension - rewrite as a dict comprehension.\n\nit's unnecessary to use a list comprehension inside a call to ``set`` or ``dict``, since there are equivalent comprehensions for these types.\nfor example:\n\n* rewrite ``set([f(x) for x in foo])`` as ``{f(x) for x in foo}``\n* rewrite ``dict([(x, f(x)) for x in foo])`` as ``{x: f(x) for x in foo}``\n\nc405-406: unnecessary ``<list/tuple>`` literal - rewrite as a ``<set/dict>`` literal.\n-------------------------------------------------------------------------------------\n\n* c405 unnecessary ``<list/tuple>`` literal - rewrite as a set literal.\n* c406 unnecessary ``<list/tuple>`` literal - rewrite as a dict literal.\n\nit's unnecessary to use a list or tuple literal within a call to ``set`` or ``dict``.\nfor example:\n\n* rewrite ``set([1, 2])`` as ``{1, 2}``\n* rewrite  ``set((1, 2))`` as ``{1, 2}``\n* rewrite ``set([])`` as ``set()``\n* rewrite ``dict([(1, 2)])`` as ``{1: 2}``\n* rewrite ``dict(((1, 2),))`` as ``{1: 2}``\n* rewrite ``dict([])`` as ``{}``\n\nc407: unnecessary ``<dict/list>`` comprehension - ``<builtin>`` can take a generator\n------------------------------------------------------------------------------------\n\nthis rule was dropped in version 3.4.0, because it promoted an increase in laziness which could lead to bugs.\n\nc408: unnecessary ``<dict/list/tuple>`` call - rewrite as a literal.\n--------------------------------------------------------------------\n\nit's slower to call e.g. ``dict()`` than using the empty literal, because the name ``dict`` must be looked up in the global scope in case it has been rebound.\nsame for the other two basic types here.\nfor example:\n\n* rewrite ``dict()`` as ``{}``\n* rewrite ``dict(a=1, b=2)`` as ``{\"a\": 1, \"b\": 2}``\n* rewrite ``list()`` as ``[]``\n* rewrite ``tuple()`` as ``()``\n\nc409-410: unnecessary ``<list/tuple>`` passed to ``<list/tuple>``\\() - ``<advice>``.\n------------------------------------------------------------------------------------\n\nrules:\n\n* c409 unnecessary ``<list/tuple>`` passed to tuple() - ``<advice>``.\n* c410 unnecessary list passed to list() - ``<advice>``.\n\nwhere ``<advice>`` is either:\n\n* remove the outer call to ``<list/tuple>``\\()\n* rewrite as a ``<list/tuple>`` literal\n\nit's unnecessary to use a list or tuple literal within a call to ``list`` or ``tuple``, since there is literal syntax for these types.\nfor example:\n\n* rewrite ``tuple([1, 2])`` as ``(1, 2)``\n* rewrite ``tuple((1, 2))`` as ``(1, 2)``\n* rewrite ``tuple([])`` as ``()``\n* rewrite ``list([1, 2])`` as ``[1, 2]``\n* rewrite ``list((1, 2))`` as ``[1, 2]``\n* rewrite ``list([])`` as ``[]``\n\nc411: unnecessary list call - remove the outer call to list().\n--------------------------------------------------------------\n\nit's unnecessary to use a ``list`` around a list comprehension, since it is equivalent without it.\nfor example:\n\n* rewrite ``list([f(x) for x in foo])`` as ``[f(x) for x in foo]``\n\nc412: unnecessary ``<dict/list/set>`` comprehension - 'in' can take a generator.\n--------------------------------------------------------------------------------\n\nthis rule was dropped in version 3.4.0, because it promoted an increase in laziness which could lead to bugs.\n\nc413: unnecessary ``<list/reversed>`` call around sorted().\n-----------------------------------------------------------\n\nit's unnecessary to use ``list()`` around ``sorted()`` as it already returns a list.\nit is also unnecessary to use ``reversed()`` around ``sorted()`` as the latter has a ``reverse`` argument.\nfor example:\n\n* rewrite ``list(sorted([2, 3, 1]))`` as ``sorted([2, 3, 1])``\n* rewrite ``reversed(sorted([2, 3, 1]))`` as ``sorted([2, 3, 1], reverse=true)``\n* rewrite ``reversed(sorted([2, 3, 1], reverse=true))`` as ``sorted([2, 3, 1])``\n\nc414: unnecessary ``<list/reversed/set/sorted/tuple>`` call within ``<list/set/sorted/tuple>``\\().\n--------------------------------------------------------------------------------------------------\n\nit's unnecessary to double-cast or double-process iterables by wrapping the listed functions within ``list``/``set``/``sorted``/``tuple``.\nfor example:\n\n* rewrite ``list(list(iterable))`` as ``list(iterable)``\n* rewrite ``list(tuple(iterable))`` as ``list(iterable)``\n* rewrite ``tuple(list(iterable))`` as ``tuple(iterable)``\n* rewrite ``tuple(tuple(iterable))`` as ``tuple(iterable)``\n* rewrite ``set(set(iterable))`` as ``set(iterable)``\n* rewrite ``set(list(iterable))`` as ``set(iterable)``\n* rewrite ``set(tuple(iterable))`` as ``set(iterable)``\n* rewrite ``set(sorted(iterable))`` as ``set(iterable)``\n* rewrite ``set(reversed(iterable))`` as ``set(iterable)``\n* rewrite ``sorted(list(iterable))`` as ``sorted(iterable)``\n* rewrite ``sorted(tuple(iterable))`` as ``sorted(iterable)``\n* rewrite ``sorted(sorted(iterable))`` as ``sorted(iterable)``\n* rewrite ``sorted(reversed(iterable))`` as ``sorted(iterable)``\n\nc415: unnecessary subscript reversal of iterable within ``<reversed/set/sorted>``\\().\n-------------------------------------------------------------------------------------\n\nit's unnecessary to reverse the order of an iterable when passing it into one of the listed functions will change the order again.\nfor example:\n\n* rewrite ``set(iterable[::-1])`` as ``set(iterable)``\n* rewrite ``sorted(iterable)[::-1]`` as ``sorted(iterable, reverse=true)``\n* rewrite ``reversed(iterable[::-1])`` as ``iterable``\n\nc416: unnecessary ``<dict/list/set>`` comprehension - rewrite using ``<dict/list/set>``\\().\n-------------------------------------------------------------------------------------------\n\nit's unnecessary to use a dict/list/set comprehension to build a data structure if the elements are unchanged.\nwrap the iterable with ``dict()``, ``list()``, or ``set()`` instead.\nfor example:\n\n* rewrite ``{a: b for a, b in iterable}`` as ``dict(iterable)``\n* rewrite ``[x for x in iterable]`` as ``list(iterable)``\n* rewrite ``{x for x in iterable}`` as ``set(iterable)``\n\nc417: unnecessary ``map`` usage - rewrite using a generator expression/``<list/set/dict>`` comprehension.\n---------------------------------------------------------------------------------------------------------\n\n``map(func, iterable)`` has great performance when ``func`` is a built-in function, and it makes sense if your function already has a name.\nbut if your func is a ``lambda``, it\u2019s faster to use a generator expression or a comprehension, as it avoids the function call overhead.\nfor example:\n\n* rewrite ``map(lambda x: x + 1, iterable)`` to ``(x + 1 for x in iterable)``\n* rewrite ``map(lambda item: get_id(item), items)`` to ``(get_id(item) for item in items)``\n* rewrite ``list(map(lambda num: num * 2, nums))`` to ``[num * 2 for num in nums]``\n* rewrite ``set(map(lambda num: num % 2 == 0, nums))`` to ``{num % 2 == 0 for num in nums}``\n* rewrite ``dict(map(lambda v: (v, v ** 2), values))`` to ``{v : v ** 2 for v in values}``\n\nc418: unnecessary ``<dict/dict comprehension>`` passed to dict() - remove the outer call to dict()\n--------------------------------------------------------------------------------------------------\n\nit's unnecessary to use a ``dict`` around a dict literal or dict comprehension, since either syntax already constructs a dict.\nfor example:\n\n* rewrite ``dict({})`` as ``{}``\n* rewrite ``dict({\"a\": 1})`` as ``{\"a\": 1}``\n\nc419 unnecessary list comprehension in ``<any/all>``\\() prevents short-circuiting - rewrite as a generator.\n-----------------------------------------------------------------------------------------------------------\n\nusing a list comprehension inside a call to ``any()``/``all()`` prevents short-circuiting when a ``true`` / ``false`` value is found.\nthe whole list will be constructed before calling ``any()``/``all()``, potentially wasting work.part-way.\nrewrite to use a generator expression, which can stop part way.\nfor example:\n\n* rewrite ``all([condition(x) for x in iterable])`` as ``all(condition(x) for x in iterable)``\n* rewrite ``any([condition(x) for x in iterable])`` as ``any(condition(x) for x in iterable)``\n",
  "docs_url": null,
  "keywords": "flake8,comprehensions,list comprehension,set comprehension,dict comprehension",
  "license": "mit",
  "name": "flake8-comprehensions",
  "package_url": "https://pypi.org/project/flake8-comprehensions/",
  "project_url": "https://pypi.org/project/flake8-comprehensions/",
  "project_urls": {
    "Changelog": "https://github.com/adamchainz/flake8-comprehensions/blob/main/CHANGELOG.rst",
    "Homepage": "https://github.com/adamchainz/flake8-comprehensions",
    "Mastodon": "https://fosstodon.org/@adamchainz",
    "Twitter": "https://twitter.com/adamchainz"
  },
  "release_url": "https://pypi.org/project/flake8-comprehensions/3.14.0/",
  "requires_dist": [
    "flake8 (!=3.2.0,>=3.0)"
  ],
  "requires_python": ">=3.8",
  "summary": "a flake8 plugin to help you write better list/set/dict comprehensions.",
  "version": "3.14.0",
  "releases": [],
  "developers": [
    "adam_johnson",
    "me@adamj.eu"
  ],
  "kwds": "flake8 badge comprehensions dict comprehension",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_comprehensions",
  "homepage": "https://github.com/adamchainz/flake8-comprehensions",
  "release_count": 39,
  "dependency_ids": [
    "pypi_flake8"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<br />\n<p align=\"center\">\n    <!--\n    note that this readme will be used for both github and pypi.\n    we therefore:\n    - keep all image urls absolute.\n    - in the github action we use for publishing, strip some html tags that aren't supported by pypi.\n    -->\n        <img alt=\"tyro logo\" src=\"https://brentyi.github.io/tyro/_static/logo-light.svg\" width=\"200px\" />\n\n</p>\n\n<p align=\"center\">\n    <em><a href=\"https://brentyi.github.io/tyro\">documentation</a></em>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <em><code>pip install tyro</code></em>\n</p>\n\n<p align=\"center\">\n    <img alt=\"build\" src=\"https://github.com/brentyi/tyro/actions/workflows/build.yml/badge.svg\" />\n    <img alt=\"mypy\" src=\"https://github.com/brentyi/tyro/actions/workflows/mypy.yml/badge.svg\" />\n    <img alt=\"pyright\" src=\"https://github.com/brentyi/tyro/actions/workflows/pyright.yml/badge.svg\" />\n    <img alt=\"ruff\" src=\"https://github.com/brentyi/tyro/actions/workflows/ruff.yml/badge.svg\" />\n    <a href=\"https://codecov.io/gh/brentyi/tyro\">\n        <img alt=\"codecov\" src=\"https://codecov.io/gh/brentyi/tyro/branch/main/graph/badge.svg\" />\n    </a>\n    <a href=\"https://pypi.org/project/tyro/\">\n        <img alt=\"codecov\" src=\"https://img.shields.io/pypi/pyversions/tyro\" />\n    </a>\n</p>\n\n<br />\n\n<strong><code>tyro</code></strong> is a tool for generating command-line\ninterfaces and configuration objects in python.\n\nour core api, `tyro.cli()`,\n\n- **generates cli interfaces** from python type signatures.\n- **populates helptext automatically** from defaults, annotations, and\n  docstrings.\n- **understands nesting** of `dataclasses`, `pydantic`, and `attrs` structures.\n- **prioritizes static analysis** for type checking and autocompletion with\n  tools like\n  [pylance](https://marketplace.visualstudio.com/items?itemname=ms-python.vscode-pylance),\n  [pyright](https://github.com/microsoft/pyright), and\n  [mypy](https://github.com/python/mypy).\n\nfor advanced users, it also supports:\n\n- **subcommands**, as well as choosing between and overriding values in\n  configuration objects.\n- **completion script generation** for `bash`, `zsh`, and `tcsh`.\n- **fine-grained configuration** via pep 529 runtime annotations\n  (`tyro.conf.*`).\n\nfor examples and the api reference, see our\n[documentation](https://brentyi.github.io/tyro).\n\n### in the wild\n\n`tyro` is designed to be lightweight enough for throwaway scripts, while\nfacilitating type safety and modularity for larger projects. examples:\n\n<table>\n  <tr>\n    <td>\n      <a href=\"https://github.com/nerfstudio-project/nerfstudio/\">\n        nerfstudio-project/nerfstudio\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/nerfstudio-project/nerfstudio?style=social\"\n        />\n      </a>\n    </td>\n    <td>\n      open-source tools for neural radiance fields.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/sea-snell/jaxseq/\">\n        sea-snell/jaxseq\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/sea-snell/jaxseq?style=social\"\n        />\n      </a>\n    </td>\n    <td>library for distributed training of large language models in jax.</td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/kevinzakka/obj2mjcf\">\n        kevinzakka/obj2mjcf\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/kevinzakka/obj2mjcf?style=social\"\n        />\n      </a>\n    </td>\n    <td>interface for processing composite wavefront obj files for mujoco.</td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/blurgyy/jaxngp\">\n        blurgyy/jaxngp\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/blurgyy/jaxngp?style=social\"\n        />\n      </a>\n    </td>\n    <td>\n      cuda-accelerated implementation of\n      <a href=\"https://nvlabs.github.io/instant-ngp/\">instant-ngp</a>, in jax.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/nvidiagameworks/kaolin-wisp\">\n        nvidiagameworks/kaolin-wisp\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/nvidiagameworks/kaolin-wisp?style=social\"\n        />\n      </a>\n    </td>\n    <td>pytorch library for neural fields.</td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/autonomousvision/sdfstudio\">\n        autonomousvision/sdfstudio\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/autonomousvision/sdfstudio?style=social\"\n        />\n      </a>\n    </td>\n    <td>unified framework for surface reconstruction.</td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://github.com/openrlbenchmark/openrlbenchmark\">\n        openrlbenchmark/openrlbenchmark\n        <br /><img\n          alt=\"github star count\"\n          src=\"https://img.shields.io/github/stars/openrlbenchmark/openrlbenchmark?style=social\"\n        />\n      </a>\n    </td>\n    <td>collection of tracked experiments for reinforcement learning.</td>\n  </tr>\n</table>\n\n### alternatives\n\n`tyro` bakes many opinions into its design decisions. if any of them don't make\nsense, feel free to file an issue!\n\nyou might also consider one of many alternative libraries. some that we\nparticularly like:\n\n- [simple-parsing](https://github.com/lebrice/simpleparsing) and\n  [jsonargparse](https://github.com/omni-us/jsonargparse), which provide deeper\n  integration with configuration file formats like yaml and json.\n- [clipstick](https://github.com/sander76/clipstick), which focuses on\n  generating clis from pydantic models.\n- [datargs](https://github.com/roee30/datargs), which provides a minimal api for\n  dataclasses.\n- [fire](https://github.com/google/python-fire) and\n  [clize](https://github.com/epsy/clize), which support arguments without type\n  annotations.\n\nwe also have some notes on `tyro`'s design goals and other alternatives in the\ndocs [here](https://brentyi.github.io/tyro/goals_and_alternatives/).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "tyro",
  "package_url": "https://pypi.org/project/tyro/",
  "project_url": "https://pypi.org/project/tyro/",
  "project_urls": {
    "GitHub": "https://github.com/brentyi/tyro"
  },
  "release_url": "https://pypi.org/project/tyro/0.6.1/",
  "requires_dist": [
    "docstring-parser >=0.14.1",
    "typing-extensions >=4.3.0",
    "rich >=11.1.0",
    "shtab >=1.5.6",
    "colorama >=0.4.0 ; platform_system == \"Windows\"",
    "backports.cached-property >=1.0.2 ; python_version < \"3.8\"",
    "PyYAML >=6.0 ; extra == 'dev'",
    "frozendict >=2.3.4 ; extra == 'dev'",
    "pytest >=7.1.2 ; extra == 'dev'",
    "pytest-cov >=3.0.0 ; extra == 'dev'",
    "omegaconf >=2.2.2 ; extra == 'dev'",
    "attrs >=21.4.0 ; extra == 'dev'",
    "torch >=1.10.0 ; extra == 'dev'",
    "pyright >=1.1.264 ; extra == 'dev'",
    "ruff >=0.1.7 ; extra == 'dev'",
    "mypy >=1.4.1 ; extra == 'dev'",
    "numpy >=1.20.0 ; extra == 'dev'",
    "pydantic >=2.5.2 ; extra == 'dev'",
    "coverage[toml] >=6.5.0 ; extra == 'dev'",
    "flax >=0.6.9 ; (python_version >= \"3.8\") and extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "strongly typed, zero-effort cli interfaces",
  "version": "0.6.1",
  "releases": [],
  "developers": [
    "brentyi@berkeley.edu"
  ],
  "kwds": "github pypi logo href tyro",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tyro",
  "homepage": "",
  "release_count": 41,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_backports.cached_property",
    "pypi_colorama",
    "pypi_coverage",
    "pypi_docstring_parser",
    "pypi_flax",
    "pypi_frozendict",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_omegaconf",
    "pypi_pydantic",
    "pypi_pyright",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pyyaml",
    "pypi_rich",
    "pypi_ruff",
    "pypi_shtab",
    "pypi_torch",
    "pypi_typing_extensions"
  ]
}
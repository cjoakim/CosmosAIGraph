{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "topic :: utilities"
  ],
  "description": "pytimeparse2: time expression parser\n=====================================\n\n.. image:: https://github.com/onegreyonewhite/pytimeparse2/actions/workflows/check.yml/badge.svg?branch=master\n    :target: https://github.com/onegreyonewhite/pytimeparse2/actions\n    :alt: pipeline status\n\n.. image:: https://badge.fury.io/py/pytimeparse2.svg\n    :target: https://badge.fury.io/py/pytimeparse2\n\n\nthis is a `pytimeparse <https://github.com/wroberts/pytimeparse>`_ based project with the aim of optimizing functionality and providing stable support.\n\ncopyright (c) 2021 sergey klyuykov <onegreyonewhite@mail.ru>\n\nlicensed under the mit license (see source file ``pytimeparse2.py`` for\ndetails).\n\na small python library to parse various kinds of time expressions,\ninspired by\n`this stackoverflow question <http://stackoverflow.com/questions/4628122/how-to-construct-a-timedelta-object-from-a-simple-string>`_.\n\nthe single function ``pytimeparse2.parse`` defined in the library parses time\nexpressions like the following:\n\n- ``32m``\n- ``2h32m``\n- ``3d2h32m``\n- ``1w3d2h32m``\n- ``1w 3d 2h 32m``\n- ``1 w 3 d 2 h 32 m``\n- ``4:13``\n- ``4:13:02``\n- ``4:13:02.266``\n- ``2:04:13:02.266``\n- ``2 days,  4:13:02`` (``uptime`` format)\n- ``2 days,  4:13:02.266``\n- ``5hr34m56s``\n- ``5 hours, 34 minutes, 56 seconds``\n- ``5 hrs, 34 mins, 56 secs``\n- ``2 days, 5 hours, 34 minutes, 56 seconds``\n- ``1.2 m``\n- ``1.2 min``\n- ``1.2 mins``\n- ``1.2 minute``\n- ``1.2 minutes``\n- ``172 hours``\n- ``172 hr``\n- ``172 h``\n- ``172 hrs``\n- ``172 hour``\n- ``1.24 days``\n- ``5 d``\n- ``5 day``\n- ``5 days``\n- ``5.6 wk``\n- ``5.6 week``\n- ``5.6 weeks``\n\nit returns the time as a number of seconds (an integer value if\npossible, otherwise a floating-point number)::\n\n    >>> from pytimeparse import parse\n    >>> parse('1.2 minutes')\n    72\n\nfor months and years, the library does not consider complications such as leap-\nyears and leap-seconds. instead, it assumes \"30 days for a month\" and \"365 days\nfor a year\" as the basis for calculations with those units.\n\n- ``2 mo``\n- ``2 months``\n- ``3y``\n- ``3 years``\n- ``1y2mo3w4d5h6m7s8ms``\n\nfor better capability with dates, use keyword ``as_timedelta=true`` which mark for function returns\nvalue as ``datetime.timedelta`` or ``dateutil.relitivedelta.relativedelta`` (if installed)::\n\n    >>> from pytimeparse import parse\n    >>> parse('24h', as_timedelta=true)\n    relativedelta(days=+1)\n\nyou can also forced disable dateutil support by calling ``disable_dateutil()`` before ``parse(...)``.\nfor returning support call ``enable_dateutil()``.\n\nnotes\n-----\n\na number of seconds can be converted back into a string using the\n``datetime`` module in the standard library, as noted in\n`this other stackoverflow question <http://stackoverflow.com/questions/538666/python-format-timedelta-to-string>`_::\n\n    >>> from pytimeparse import parse\n    >>> import datetime\n    >>> parse('1 day, 14:20:16')\n    138016\n    >>> str(datetime.timedelta(seconds=138016))\n    '1 day, 14:20:16'\n\nfuture work\n-----------\n\n1. speed up with cython for some python versions.\n2. use github actions for testing and releasing.\n\n\n",
  "docs_url": null,
  "keywords": "parsing,time,timeparsing,text",
  "license": "mit",
  "name": "pytimeparse2",
  "package_url": "https://pypi.org/project/pytimeparse2/",
  "project_url": "https://pypi.org/project/pytimeparse2/",
  "project_urls": {
    "Homepage": "https://github.com/onegreyonewhite/pytimeparse2",
    "Issue Tracker": "https://github.com/onegreyonewhite/pytimeparse2/-/issues",
    "Releases": "https://pypi.org/project/pytimeparse2/#history",
    "Source Code": "https://github.com/onegreyonewhite/pytimeparse2.git"
  },
  "release_url": "https://pypi.org/project/pytimeparse2/1.7.1/",
  "requires_dist": [
    "python-dateutil (~=2.8.2); extra == 'dateutil'"
  ],
  "requires_python": ">=3.6",
  "summary": "time expression parser.",
  "version": "1.7.1",
  "releases": [],
  "developers": [
    "onegreyonewhite@mail.ru",
    "sergey_klyuykov"
  ],
  "kwds": "pytimeparse pytimeparse2 timeparsing parse workflows",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytimeparse2",
  "homepage": "https://github.com/onegreyonewhite/pytimeparse2",
  "release_count": 8,
  "dependency_ids": [
    "pypi_python_dateutil"
  ]
}
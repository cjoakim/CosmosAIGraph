{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<img src=\"https://github.com/google/brax/raw/main/docs/img/brax_logo.gif\" width=\"336\" height=\"80\" alt=\"brax\"/>\n\nbrax is a fast and fully differentiable physics engine used for research and\ndevelopment of robotics, human perception, materials science, reinforcement\nlearning, and other simulation-heavy applications.\n\nbrax is written in [jax](https://github.com/google/jax) and is designed for use\non acceleration hardware. it is both efficient for single-device simulation, and\nscalable to massively parallel simulation on multiple devices, without the need\nfor pesky datacenters.\n\n<img src=\"https://github.com/google/brax/raw/main/docs/img/humanoid_v2.gif\" width=\"160\" height=\"160\"/><img src=\"https://github.com/google/brax/raw/main/docs/img/a1.gif\" width=\"160\" height=\"160\"/><img src=\"https://github.com/google/brax/raw/main/docs/img/ant_v2.gif\" width=\"160\" height=\"160\"/><img src=\"https://github.com/google/brax/raw/main/docs/img/ur5e.gif\" width=\"160\" height=\"160\"/>\n\nbrax simulates environments at millions of physics steps per second on tpu, and includes a suite of learning algorithms that train agents in seconds\nto minutes:\n\n*   baseline learning algorithms such as\n    [ppo](https://github.com/google/brax/blob/main/brax/training/agents/ppo),\n    [sac](https://github.com/google/brax/blob/main/brax/training/agents/sac),\n    [ars](https://github.com/google/brax/blob/main/brax/training/agents/ars), and\n    [evolutionary strategies](https://github.com/google/brax/blob/main/brax/training/agents/es).\n*   learning algorithms that leverage the differentiability of the simulator, such as [analytic policy gradients](https://github.com/google/brax/blob/main/brax/training/agents/apg).\n\n## one api, three pipelines\n\nbrax offers three distinct physics pipelines that are easy to swap:\n\n* [generalized](https://github.com/google/brax/blob/main/brax/v2/generalized/)\ncalculates motion in [generalized coordinates](https://en.wikipedia.org/wiki/generalized_coordinates) using the same accurate robot\ndynamics algorithms as [mujoco](https://mujoco.org/) and [tds](https://github.com/erwincoumans/tiny-differentiable-simulator).\n* [positional](https://github.com/google/brax/blob/main/brax/v2/positional/)\nuses [position based dynamics](https://matthias-research.github.io/pages/publications/posbaseddyn.pdf),\na fast but stable method of resolving joint and collision constraints.\n* [spring](https://github.com/google/brax/blob/main/brax/v2/spring/) provides\nfast and cheap simulation for rapid experimentation, using simple impulse-based\nmethods often found in video games.\n\nthese pipelines share the same api and can run side-by-side within the same\nsimulation.  this makes brax well suited for experiments in transfer learning\nand closing the gap between simulation and the real world.\n\n## quickstart: colab in the cloud\n\nexplore brax easily and quickly through a series of colab notebooks:\n\n* [brax basics](https://colab.research.google.com/github/google/brax/blob/main/notebooks/basics.ipynb) introduces the brax api, and shows how to simulate basic physics primitives.\n* [brax training](https://colab.research.google.com/github/google/brax/blob/main/notebooks/training.ipynb) introduces brax's training algorithms, and lets you train your own policies directly within the colab. it also demonstrates loading and saving policies.\n* [brax training with pytorch on gpu](https://colab.research.google.com/github/google/brax/blob/main/notebooks/training_torch.ipynb) demonstrates how brax can be used in other ml frameworks for fast training, in this case pytorch.\n\n## using brax locally\n\nto install brax from pypi, install it with:\n\n```\npython3 -m venv env\nsource env/bin/activate\npip install --upgrade pip\npip install brax\n```\n\nyou may also install from [conda](https://docs.conda.io/en/latest/) or [mamba](https://github.com/mamba-org/mamba):\n\n```\nconda install -c conda-forge brax  # s/conda/mamba for mamba\n```\n\nalternatively, to install brax from source, clone this repo, `cd` to it, and then:\n\n```\npython3 -m venv env\nsource env/bin/activate\npip install --upgrade pip\npip install -e .\n```\n\nto train a model:\n\n```\nlearn\n```\n\ntraining on nvidia gpu is supported, but you must first install\n[cuda, cudnn, and jax with gpu support](https://github.com/google/jax#installation).\n\n## learn more\n\nfor a deep dive into brax's design and performance characteristics, please see\nour paper, [brax -- a differentiable physics engine for large scale rigid body simulation\n](https://arxiv.org/abs/2106.13281), which appeared in the [datasets and benchmarks track](https://neurips.cc/conferences/2021/callfordatasetsbenchmarks) at [neurips 2021](https://nips.cc/conferences/2021).\n\n## citing brax\n\nif you would like to reference brax in a publication, please use:\n\n```\n@software{brax2021github,\n  author = {c. daniel freeman and erik frey and anton raichuk and sertan girgin and igor mordatch and olivier bachem},\n  title = {brax - a differentiable physics engine for large scale rigid body simulation},\n  url = {http://github.com/google/brax},\n  version = {0.9.3},\n  year = {2021},\n}\n```\n\n## acknowledgements\n\nbrax has come a long way since its original publication.  we offer gratitude and\neffusive praise to the following people:\n\n* manu orsini and nikola momchev who provided a major refactor of brax's\ntraining algorithms to make them more accessible and reusable.\n* erwin coumans who has graciously offered advice and mentorship, and many\nuseful references from [tiny differentiable simulator](https://github.com/erwincoumans/tiny-differentiable-simulator).\n* baruch tabanpour, a colleague who helped launch brax v2 and overhauled the contact library.\n* [shixiang shane gu](https://sites.google.com/corp/view/gugurus) and [hiroki furuta](https://frt03.github.io/), who contributed big-gym and braxlines, and a scene composer to brax.\n* our awesome [open source collaborators and contributors](https://github.com/google/brax/graphs/contributors).  thank you!\n",
  "docs_url": null,
  "keywords": "jax reinforcement learning rigidbody physics",
  "license": "apache 2.0",
  "name": "brax",
  "package_url": "https://pypi.org/project/brax/",
  "project_url": "https://pypi.org/project/brax/",
  "project_urls": {
    "Homepage": "http://github.com/google/brax"
  },
  "release_url": "https://pypi.org/project/brax/0.9.3/",
  "requires_dist": [
    "absl-py",
    "dm-env",
    "etils",
    "flask",
    "flask-cors",
    "flax",
    "grpcio",
    "gym",
    "jax >=0.4.6",
    "jaxlib >=0.4.6",
    "jaxopt",
    "jinja2",
    "ml-collections",
    "mujoco",
    "numpy",
    "optax",
    "Pillow",
    "pytinyrenderer",
    "scipy",
    "tensorboardX",
    "trimesh",
    "typing-extensions",
    "dataclasses ; python_version < \"3.7\"",
    "pytest ; extra == 'develop'",
    "transforms3d ; extra == 'develop'"
  ],
  "requires_python": "",
  "summary": "a differentiable physics engine written in jax.",
  "version": "0.9.3",
  "releases": [],
  "developers": [
    "brax_authors",
    "no-reply@google.com"
  ],
  "kwds": "brax jax simulation rigidbody robotics",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_brax",
  "homepage": "http://github.com/google/brax",
  "release_count": 22,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_dataclasses",
    "pypi_dm_env",
    "pypi_etils",
    "pypi_flask",
    "pypi_flask_cors",
    "pypi_flax",
    "pypi_grpcio",
    "pypi_gym",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_jaxopt",
    "pypi_jinja2",
    "pypi_ml_collections",
    "pypi_mujoco",
    "pypi_numpy",
    "pypi_optax",
    "pypi_pillow",
    "pypi_pytest",
    "pypi_pytinyrenderer",
    "pypi_scipy",
    "pypi_tensorboardx",
    "pypi_transforms3d",
    "pypi_trimesh",
    "pypi_typing_extensions"
  ]
}
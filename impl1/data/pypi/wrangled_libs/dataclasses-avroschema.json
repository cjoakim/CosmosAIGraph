{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "# dataclasses avro schema generator\n\ngenerate [avro schemas](https://avro.apache.org/docs/1.8.2/spec.html) from python dataclasses. [code generation](https://marcosschroh.github.io/dataclasses-avroschema/model_generator/) from avro schemas. [serialize/deserialize](https://marcosschroh.github.io/dataclasses-avroschema/serialization/) python instances with avro schemas\n\n[![tests](https://github.com/marcosschroh/dataclasses-avroschema/actions/workflows/tests.yaml/badge.svg)](https://github.com/marcosschroh/dataclasses-avroschema/actions/workflows/tests.yaml)\n[![github license](https://img.shields.io/github/license/marcosschroh/dataclasses-avroschema.svg)](https://github.com/marcosschroh/dataclasses-avroschema/blob/master/license)\n[![codecov](https://codecov.io/gh/marcosschroh/dataclasses-avroschema/branch/master/graph/badge.svg)](https://codecov.io/gh/marcosschroh/dataclasses-avroschema)\n![python version](https://img.shields.io/badge/python-3.8%2b-yellowgreen)\n\n## requirements\n\n`python 3.8+`\n\n## installation\n\nwith `pip` or `poetry`:\n\n`pip install dataclasses-avroschema` or `poetry install`\n\n### extras\n\n- [pydantic](https://docs.pydantic.dev/): `pip install 'dataclasses-avroschema[pydantic]'` or `poetry install --extras \"pydantic\"`\n- [faust-streaming](https://github.com/faust-streaming/faust): `pip install 'dataclasses-avroschema[faust]'` or `poetry install --extras \"faust\"`\n- [faker](https://github.com/joke2k/faker): `pip install 'dataclasses-avroschema[faker]'` or `poetry install --extras \"faker\"`\n\n*note*: you can install all extra dependencies with `pip install dataclasses-avroschema[faust, pydantic, faker]` or `poetry install --extras \"pydantic faust faker\"`\n\n### cli\n\nto add `avro schemas cli` install [dc-avro](https://marcosschroh.github.io/dc-avro/)\n\n`pip install 'dataclasses-avroschema[cli]'` or `poetry install --with cli`\n\n## documentation\n\nhttps://marcosschroh.github.io/dataclasses-avroschema/\n\n## usage\n\n### generating the avro schema\n\n```python\nfrom dataclasses import dataclass\nimport enum\n\nimport typing\n\nfrom dataclasses_avroschema import avromodel, types\n\n\nclass favoritecolor(enum.enum):\n    blue = \"blue\"\n    yellow = \"yellow\"\n    green = \"green\"\n\n\n@dataclass\nclass user(avromodel):\n    \"an user\"\n    name: str\n    age: int\n    pets: typing.list[str]\n    accounts: typing.dict[str, int]\n    favorite_colors: favoritecolor\n    country: str = \"argentina\"\n    address: str = none\n\n    class meta:\n        namespace = \"user.v1\"\n        aliases = [\"user-v1\", \"super user\"]\n\nuser.avro_schema()\n\n'{\n    \"type\": \"record\",\n    \"name\": \"user\",\n    \"doc\": \"an user\",\n    \"namespace\": \"user.v1\",\n    \"aliases\": [\"user-v1\", \"super user\"],\n    \"fields\": [\n        {\"name\": \"name\", \"type\": \"string\"},\n        {\"name\": \"age\", \"type\": \"long\"},\n        {\"name\": \"pets\", \"type\": \"array\", \"items\": \"string\"},\n        {\"name\": \"accounts\", \"type\": \"map\", \"values\": \"long\"},\n        {\"name\": \"favorite_color\", \"type\": {\"type\": \"enum\", \"name\": \"favoritecolor\", \"symbols\": [\"blue\", \"yellow\", \"green\"]}}\n        {\"name\": \"country\", \"type\": \"string\", \"default\": \"argentina\"},\n        {\"name\": \"address\", \"type\": [\"null\", \"string\"], \"default\": null}\n    ]\n}'\n\nuser.avro_schema_to_python()\n\n{\n    \"type\": \"record\",\n    \"name\": \"user\",\n    \"doc\": \"an user\",\n    \"namespace\": \"user.v1\",\n    \"aliases\": [\"user-v1\", \"super user\"],\n    \"fields\": [\n        {\"name\": \"name\", \"type\": \"string\"},\n        {\"name\": \"age\", \"type\": \"long\"},\n        {\"name\": \"pets\", \"type\": {\"type\": \"array\", \"items\": \"string\", \"name\": \"pet\"}},\n        {\"name\": \"accounts\", \"type\": {\"type\": \"map\", \"values\": \"long\", \"name\": \"account\"}},\n        {\"name\": \"favorite_colors\", \"type\": {\"type\": \"enum\", \"name\": \"favoritecolor\", \"symbols\": [\"blue\", \"yellow\", \"green\"]}},\n        {\"name\": \"country\", \"type\": \"string\", \"default\": \"argentina\"},\n        {\"name\": \"address\", \"type\": [\"null\", \"string\"], \"default\": none}\n    ],\n}\n```\n\n### serialization to avro or avro-json and json payload\n\nfor serialization is neccesary to use python class/dataclasses instance\n\n```python\nfrom dataclasses import dataclass\n\nimport typing\n\nfrom dataclasses_avroschema import avromodel\n\n\n@dataclass\nclass address(avromodel):\n    \"an address\"\n    street: str\n    street_number: int\n\n\n@dataclass\nclass user(avromodel):\n    \"user with multiple address\"\n    name: str\n    age: int\n    addresses: typing.list[address]\n\naddress_data = {\n    \"street\": \"test\",\n    \"street_number\": 10,\n}\n\n# create an address instance\naddress = address(**address_data)\n\ndata_user = {\n    \"name\": \"john\",\n    \"age\": 20,\n    \"addresses\": [address],\n}\n\n# create an user instance\nuser = user(**data_user)\n\nuser.serialize()\n# >>> b\"\\x08john(\\x02\\x08test\\x14\\x00\"\n\nuser.serialize(serialization_type=\"avro-json\")\n# >>> b'{\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}'\n\n# get the json from the instance\nuser.to_json()\n# >>> '{\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}'\n\n# get a python dict\nuser.to_dict()\n# >>> {\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}\n\n```\n\n### deserialization\n\ndeserialization could take place with an instance dataclass or the dataclass itself. can return the dict representation or a new class instance\n\n```python\nimport typing\nimport dataclasses\n\nfrom dataclasses_avroschema import avromodel\n\n\n@dataclasses.dataclass\nclass address(avromodel):\n    \"an address\"\n    street: str\n    street_number: int\n\n@dataclasses.dataclass\nclass user(avromodel):\n    \"user with multiple address\"\n    name: str\n    age: int\n    addresses: typing.list[address]\n\navro_binary = b\"\\x08john(\\x02\\x08test\\x14\\x00\"\navro_json_binary = b'{\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}'\n\n# return a new class instance!!\nuser.deserialize(avro_binary)\n# >>>> user(name='john', age=20, addresses=[address(street='test', street_number=10)])\n\n# return a python dict\nuser.deserialize(avro_binary, create_instance=false)\n# >>> {\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}\n\n# return a new class instance!!\nuser.deserialize(avro_json_binary, serialization_type=\"avro-json\")\n# >>>> user(name='john', age=20, addresses=[address(street='test', street_number=10)])\n\n# return a python dict\nuser.deserialize(avro_json_binary, serialization_type=\"avro-json\", create_instance=false)\n# >>> {\"name\": \"john\", \"age\": 20, \"addresses\": [{\"street\": \"test\", \"street_number\": 10}]}\n```\n\n## pydantic integration\n\nto add `dataclasses-avroschema` functionality to `pydantic` you only need to replace `basemodel` by `avrobasemodel`:\n\n```python\nimport typing\nimport enum\nimport dataclasses\n\nfrom dataclasses_avroschema.avrodantic import avrobasemodel\n\nfrom pydantic import field\n\n\nclass favoritecolor(str, enum.enum):\n    blue = \"blue\"\n    yellow = \"yellow\"\n    green = \"green\"\n\n\n@dataclasses.dataclass\nclass useradvance(avrobasemodel):\n    name: str\n    age: int\n    pets: typing.list[str] = field(default_factory=lambda: [\"dog\", \"cat\"])\n    accounts: typing.dict[str, int] = field(default_factory=lambda: {\"key\": 1})\n    has_car: bool = false\n    favorite_colors: favoritecolor = favoritecolor.blue\n    country: str = \"argentina\"\n    address: str = none\n\n    class meta:\n        schema_doc = false\n\n\n# avro schema\nuseradvance.avro_schema()\n'{\n    \"type\": \"record\",\n    \"name\": \"useradvance\",\n    \"fields\": [\n        {\"name\": \"name\", \"type\": \"string\"},\n        {\"name\": \"age\", \"type\": \"long\"},\n        {\"name\": \"pets\", \"type\": {\"type\": \"array\", \"items\": \"string\", \"name\": \"pet\"}, \"default\": [\"dog\", \"cat\"]},\n        {\"name\": \"accounts\", \"type\": {\"type\": \"map\", \"values\": \"long\", \"name\": \"account\"}, \"default\": {\"key\": 1}},\n        {\"name\": \"has_car\", \"type\": \"boolean\", \"default\": false},\n        {\"name\": \"favorite_colors\", \"type\": {\"type\": \"enum\", \"name\": \"favorite_color\", \"symbols\": [\"blue\", \"yellow\", \"green\"]}, \"default\": \"blue\"},\n        {\"name\": \"country\", \"type\": \"string\", \"default\": \"argentina\"},\n        {\"name\": \"address\", \"type\": [\"null\", \"string\"], \"default\": null}\n    ]\n}'\n\n# json schema\nuseradvance.json_schema()\n\n{\n    \"title\": \"useradvance\",\n    \"description\": \"useradvance(*, name: str, age: int, pets: list[str] = none, ...\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"title\": \"name\", \"type\": \"string\"},\n        \"age\": {\"title\": \"age\", \"type\": \"integer\"},\n        \"pets\": {\"title\": \"pets\", \"type\": \"array\", \"items\": {\"type\": \"string\"}},\n        \"accounts\": {\"title\": \"accounts\", \"type\": \"object\", \"additionalproperties\": {\"type\": \"integer\"}},\n        \"has_car\": {\"title\": \"has car\", \"default\": false, \"type\": \"boolean\"},\n        \"favorite_colors\": {\"default\": \"blue\", \"allof\": [{\"$ref\": \"#/definitions/favoritecolor\"}]},\n        \"country\": {\"title\": \"country\", \"default\": \"argentina\", \"type\": \"string\"},\n        \"address\": {\"title\": \"address\", \"type\": \"string\"}}, \"required\": [\"name\", \"age\"], \"definitions\": {\"favoritecolor\": {\"title\": \"favoritecolor\", \"description\": \"an enumeration.\", \"enum\": [\"blue\", \"yellow\", \"green\"], \"type\": \"string\"}}\n}\n\nuser = useradvance(name=\"bond\", age=50)\n\n# pydantic\nuser.dict()\n# >>> {'name': 'bond', 'age': 50, 'pets': ['dog', 'cat'], 'accounts': {'key': 1}, 'has_car': false, 'favorite_colors': <favoritecolor.blue: 'blue'>, 'country': 'argentina', 'address': none}\n\n# pydantic\nuser.json()\n# >>> '{\"name\": \"bond\", \"age\": 50, \"pets\": [\"dog\", \"cat\"], \"accounts\": {\"key\": 1}, \"has_car\": false, \"favorite_colors\": \"blue\", \"country\": \"argentina\", \"address\": null}'\n\n# pydantic\nuser = useradvance(name=\"bond\")\n\n# validationerror: 1 validation error for useradvance\n# age\n# field required (type=value_error.missing)\n\n\n# dataclasses-avroschema\nevent = user.serialize()\nprint(event)\n# >>> b'\\x08bondd\\x04\\x06dog\\x06cat\\x00\\x02\\x06key\\x02\\x00\\x00\\x00\\x12argentina\\x00'\n\nuseradvance.deserialize(data=event)\n# >>> useradvance(name='bond', age=50, pets=['dog', 'cat'], accounts={'key': 1}, has_car=false, favorite_colors=<favoritecolor.blue: 'blue'>, country='argentina', address=none)\n```\n\n## examples with python streaming drivers (kafka and redis)\n\nunder [examples](https://github.com/marcosschroh/dataclasses-avroschema/tree/master/examples) folder you can find 3 differents kafka examples, one with [aiokafka](https://github.com/aio-libs/aiokafka) (`async`) showing the simplest use case when a `avromodel` instance is serialized and sent it thorught kafka, and the event is consumed.\nthe other two examples are `sync` using the [kafka-python](https://github.com/dpkp/kafka-python) driver, where the `avro-json` serialization and `schema evolution` (`full` compatibility) is shown.\nalso, there are two `redis` examples using `redis streams` with [walrus](https://github.com/coleifer/walrus) and [redisgears-py](https://github.com/redisgears/redisgears-py)\n\n## factory and fixtures\n\n[dataclasses avro schema](https://github.com/marcosschroh/dataclasses-avroschema) also includes a `factory` feature, so you can generate `fast` python instances and use them, for example, to test your data streaming pipelines. instances can be generated using the `fake` method.\n\n*note*: this feature is not enabled by default and requires you have the `faker` extra installed. you may install it with `pip install 'dataclasses-avroschema[faker]'`\n\n\n```python\nimport typing\nimport dataclasses\n\nfrom dataclasses_avroschema import avromodel\n\n\n@dataclasses.dataclass\nclass address(avromodel):\n    \"an address\"\n    street: str\n    street_number: int\n\n\n@dataclasses.dataclass\nclass user(avromodel):\n    \"user with multiple address\"\n    name: str\n    age: int\n    addresses: typing.list[address]\n\n\naddress.fake()\n# >>>> address(street='pxzjildrgbxyhwrrpwxq', street_number=2067)\n\nuser.fake()\n# >>>> user(name='vgsbbogfsgjkmdnefhiz', age=8974, addresses=[address(street='vnppygesihuwwzgcmmis', street_number=4790)])\n```\n\n## features\n\n* [x] primitive types: int, long, double, float, boolean, string and null support\n* [x] complex types: enum, array, map, fixed, unions and records support\n* [x] `typing.annotated` supported\n* [x] `typing.literal` supported\n* [x] logical types: date, time (millis and micro), datetime (millis and micro), uuid support\n* [x] schema relations (onetoone, onetomany)\n* [x] recursive schemas\n* [x] generate avro schemas from `faust.record`\n* [x] instance serialization correspondent to `avro schema` generated\n* [x] data deserialization. return python dict or class instance\n* [x] generate json from python class instance\n* [x] case schemas\n* [x] generate models from `avsc` files\n* [x] examples of integration with `kafka` drivers: [aiokafka](https://github.com/aio-libs/aiokafka), [kafka-python](https://github.com/dpkp/kafka-python)\n* [x] example of integration  with `redis` drivers: [walrus](https://github.com/coleifer/walrus) and [redisgears-py](https://github.com/redisgears/redisgears-py)\n* [x] factory instances\n* [x] [pydantic](https://pydantic-docs.helpmanual.io/) integration\n\n## development\n\n[poetry](https://python-poetry.org/docs/) is needed to install the dependencies and develope locally\n\n1. install dependencies: `poetry install --all-extras`\n2. code linting: `./scripts/format`\n3. run tests: `./scripts/test`\n\nfor commit messages we use [commitizen](https://commitizen-tools.github.io/commitizen/) in order to standardize a way of committing rules\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "dataclasses-avroschema",
  "package_url": "https://pypi.org/project/dataclasses-avroschema/",
  "project_url": "https://pypi.org/project/dataclasses-avroschema/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/dataclasses-avroschema/0.54.2/",
  "requires_dist": [
    "fastavro (>=1.7.3,<2.0.0)",
    "dacite (>=1.8.0,<2.0.0)",
    "faker (>=18.3.1,<21.0.0) ; extra == \"faker\"",
    "inflector (>=3.1.0,<4.0.0)",
    "faust-streaming (>=0.10.11,<0.11.0) ; extra == \"faust\"",
    "casefy (>=0.1.7,<0.2.0)",
    "typing-extensions (>=4.2.0,<5.0.0) ; python_version < \"3.9\"",
    "pydantic[email] (>=2.4.2,<3.0.0) ; extra == \"pydantic\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "generate avro schemas from python classes. serialize/deserialize python instances with avro schemas",
  "version": "0.54.2",
  "releases": [],
  "developers": [
    "marcos_schroh",
    "schrohm@gmail.com"
  ],
  "kwds": "avro_schema avro_schema_to_python dataclasses_avroschema avrobasemodel avro_json_binary",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dataclasses_avroschema",
  "homepage": "",
  "release_count": 142,
  "dependency_ids": [
    "pypi_casefy",
    "pypi_dacite",
    "pypi_faker",
    "pypi_fastavro",
    "pypi_faust_streaming",
    "pypi_inflector",
    "pypi_pydantic",
    "pypi_typing_extensions"
  ]
}
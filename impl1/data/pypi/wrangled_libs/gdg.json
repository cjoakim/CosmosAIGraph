{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "gdg - generation data groups with python\n========================================\n\nfeatures\n--------\n\n- acts similarly to an ibm mainframe gdg - generation data group\n  - see https://www.ibm.com/support/knowledgecenter/zosbasics/com.ibm.zos.zconcepts/zconcepts_175.htm\n\n- you define the number of generations, or versions, in the gdg \n- the gdg specifies a filesystem directory, a filename pattern, and a number of generations to keep\n- invoke method next() to get the next logical filename \n- invoke method current() to get the current, or most recent, filename\n- invoke method previous() to get the filename before current()\n- invoke method all_generations() to get all filenames within the gdg\n- invoke method all_files() to get all filenames within the gdg directory\n- invoke method prune() to delete the older files greater than the number of generations \n\n\nwhy use this library?\n---------------------------\n- to keep your filenames tidy; consistent filename pattern\n- to keep your directories tidy; delete older/obsolete generations \n- you have weekly/monthly batch processing and want to process the last 7 or 30 versions of a file \n- you have large backup files and only want to keep the latest 3 of them\n- you come from a \"big iron\" background and miss the concept of a gdg on linux/mac/windows\n- you like regular expressions\n\nthe four patterns supported, and examples:\n------------------------------------------\n\n.. code-block:: console\n\n    filename                                             gdg type \n\n    ...your-gdg-directory/sample-000020.txt              generation number (with 6 digits) type, 'g'\n    ...your-gdg-directory/sample-1612735756.txt          epoch type, 'e'\n    ...your-gdg-directory/sample-20210207-172005.txt     utc timestamp type, 'ts_utc'\n    ...your-gdg-directory/sample-20210207-172005.txt     local timestamp type, 'ts_local'\n\nquick start\n-----------\n\ninstallation:\n\n.. code-block:: console\n\n    $ pip install gdg\n\nuse:\n\ncase 1: filenames with an embedded generation number ('g') sequence\n\n.. code-block:: pycon\n\n    >>> import gdg\n\n    >>> g = gdg.gdg(...some_dir_path...)    # provide either an absolute or relative dir path for the gdg \n    >>> g.set_pattern('sample-%.txt', 'g')  # pass one of the values ['g','e','ts_utc','ts_local'] into this method\n    >>> g.set_generations(3)                # set the number of generations to any positive integer\n\n    >>> n = g.get_generations()             # returns the int number of generations to retain in the gdg \n    >>> d = g.get_state()                   # returns the state of the gdg as a dict\n\n    >>> filename = g.next()                 # obtain the next filename in the gdg. your code then writes to the file \n    >>> filename = g.next()\n    >>> filename = g.next()\n\n    >>> fname = g.current()                 # returns a string filename or none\n    >>> fname = g.previous()                # returns a string filename or none\n    >>> flist = g.all_generations()         # returns a list\n    >>> flist = g.all_files()               # returns a list \n\n    >>> n = g.prune()                       # delete older generations, return the number of files deleted\n\ncase 2: filenames with an embedded epoch ('e') time\n\n.. code-block:: pycon\n\n    >>> import gdg\n\n    >>> g = gdg.gdg(...some_dir_path...)\n    >>> g.set_generations(24)\n    >>> g.set_pattern('sample-%.txt', 'e')  # 'e' for epoch time, the value of % is populated at runtime\n\n    >>> # same usage otherwise as in case 1 above\n\ncase 3: filenames with an embedded utc timestamp ('ts_utc') time\n\n.. code-block:: pycon\n\n    >>> import gdg\n\n    >>> g = gdg.gdg(...some_dir_path...)\n    >>> g.set_pattern('sample-%.txt', 'ts_utc')  # 'ts_utc' for utc timestamp, the value of % is populated at runtime\n    >>> g.set_generations(24)\n\n    >>> # same usage otherwise as in case 1 above\n\ncase 4: filenames with an embedded local timestamp ('ts_local') time\n\n.. code-block:: pycon\n\n    >>> import gdg\n\n    >>> g = gdg.gdg(...some_dir_path...)\n    >>> g.set_pattern('sample-%.txt', 'ts_local')  # 'ts_local' for local timestamp, the value of % is populated at runtime\n    >>> g.set_generations(40)\n\n    >>> # same usage otherwise as in case 1 above\n\n\nsource code\n===========\n\nsee https://github.com/cjoakim/gdg-py\n\nchangelog\n=========\n\nversion 0.1.0\n-------------\n\n-  2021/02/13. 0.1.0 beta\n-  2021/02/07. 0.0.2 pre-alpha\n-  2021/02/02. 0.0.1 pre-alpha\n-  2021/02/02. 0.0.0 pre-alpha\n",
  "docs_url": null,
  "keywords": "generation data groups (gdg) with python",
  "license": "mit",
  "name": "gdg",
  "package_url": "https://pypi.org/project/gdg/",
  "project_url": "https://pypi.org/project/gdg/",
  "project_urls": {
    "Homepage": "https://github.com/cjoakim/gdg-py"
  },
  "release_url": "https://pypi.org/project/gdg/0.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "gdg - generation data groups with python",
  "version": "0.1.0",
  "releases": [],
  "developers": [
    "christopher.joakim@gmail.com",
    "christopher_joakim"
  ],
  "kwds": "get_generations set_generations all_generations generation generations",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gdg",
  "homepage": "https://github.com/cjoakim/gdg-py",
  "release_count": 4,
  "dependency_ids": []
}
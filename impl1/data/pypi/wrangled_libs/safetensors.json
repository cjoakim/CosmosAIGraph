{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "typing :: typed"
  ],
  "description": "## installation\n\n```\npip install safetensors\n```\n\n\n## usage\n\n### numpy\n\n```python\nfrom safetensors.numpy import save_file, load_file\nimport numpy as np\n\ntensors = {\n   \"a\": np.zeros((2, 2)),\n   \"b\": np.zeros((2, 3), dtype=np.uint8)\n}\n\nsave_file(tensors, \"./model.safetensors\")\n\n\n# now loading\nloaded = load_file(\"./model.safetensors\")\n```\n\n### torch\n\n```python\nfrom safetensors.torch import save_file, load_file\nimport torch\n\ntensors = {\n   \"a\": torch.zeros((2, 2)),\n   \"b\": torch.zeros((2, 3), dtype=torch.uint8)\n}\n\nsave_file(tensors, \"./model.safetensors\")\n\n\n# now loading\nloaded = load_file(\"./model.safetensors\")\n```\n\n### developing\n\n```\n# inside ./safetensors/bindings/python\npip install .[dev]\n```\nshould be enough to install this library locally.\n\n### testing\n\n```\n# inside ./safetensors/bindings/python\npip install .[dev]\npytest -sv tests/\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "safetensors",
  "package_url": "https://pypi.org/project/safetensors/",
  "project_url": "https://pypi.org/project/safetensors/",
  "project_urls": {
    "Homepage": "https://github.com/huggingface/safetensors",
    "Source": "https://github.com/huggingface/safetensors"
  },
  "release_url": "https://pypi.org/project/safetensors/0.4.1/",
  "requires_dist": [
    "numpy >=1.21.6 ; extra == 'numpy'",
    "safetensors[numpy] ; extra == 'torch'",
    "torch >=1.10 ; extra == 'torch'",
    "safetensors[numpy] ; extra == 'tensorflow'",
    "tensorflow >=2.11.0 ; extra == 'tensorflow'",
    "safetensors[numpy] ; extra == 'pinned-tf'",
    "tensorflow ==2.11.0 ; extra == 'pinned-tf'",
    "safetensors[numpy] ; extra == 'jax'",
    "flax >=0.6.3 ; extra == 'jax'",
    "jax >=0.3.25 ; extra == 'jax'",
    "jaxlib >=0.3.25 ; extra == 'jax'",
    "safetensors[numpy] ; extra == 'paddlepaddle'",
    "paddlepaddle >=2.4.1 ; extra == 'paddlepaddle'",
    "black ==22.3 ; extra == 'quality'",
    "click ==8.0.4 ; extra == 'quality'",
    "isort >=5.5.4 ; extra == 'quality'",
    "flake8 >=3.8.3 ; extra == 'quality'",
    "safetensors[numpy] ; extra == 'testing'",
    "h5py >=3.7.0 ; extra == 'testing'",
    "huggingface_hub >=0.12.1 ; extra == 'testing'",
    "setuptools_rust >=1.5.2 ; extra == 'testing'",
    "pytest >=7.2.0 ; extra == 'testing'",
    "pytest-benchmark >=4.0.0 ; extra == 'testing'",
    "hypothesis >=6.70.2 ; extra == 'testing'",
    "safetensors[torch] ; extra == 'all'",
    "safetensors[numpy] ; extra == 'all'",
    "safetensors[pinned-tf] ; extra == 'all'",
    "safetensors[jax] ; extra == 'all'",
    "safetensors[paddlepaddle] ; extra == 'all'",
    "safetensors[quality] ; extra == 'all'",
    "safetensors[testing] ; extra == 'all'",
    "safetensors[all] ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "",
  "version": "0.4.1",
  "releases": [],
  "developers": [
    "patry.nicolas@protonmail.com"
  ],
  "kwds": "torch tensors safetensors pip numpy",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_safetensors",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_black",
    "pypi_click",
    "pypi_flake8",
    "pypi_flax",
    "pypi_h5py",
    "pypi_huggingface_hub",
    "pypi_hypothesis",
    "pypi_isort",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_numpy",
    "pypi_paddlepaddle",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_safetensors",
    "pypi_setuptools_rust",
    "pypi_tensorflow",
    "pypi_torch"
  ]
}
{
  "classifiers": [
    "environment :: console",
    "environment :: web environment",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft",
    "operating system :: unix",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "python webdav client 3\n=========\n[![build status](https://travis-ci.com/ezhov-evgeny/webdav-client-python-3.svg?branch=develop)](https://travis-ci.com/ezhov-evgeny/webdav-client-python-3)\n[![quality gate status](https://sonarcloud.io/api/project_badges/measure?project=ezhov-evgeny_webdav-client-python-3&metric=alert_status)](https://sonarcloud.io/dashboard?id=ezhov-evgeny_webdav-client-python-3)\n[![coverage](https://sonarcloud.io/api/project_badges/measure?project=ezhov-evgeny_webdav-client-python-3&metric=coverage)](https://sonarcloud.io/dashboard?id=ezhov-evgeny_webdav-client-python-3)\n[![pypi](https://img.shields.io/pypi/v/webdavclient3)](https://pypi.org/project/webdavclient3/) ![pypi - python version](https://img.shields.io/pypi/pyversions/webdavclient3)  \n\npackage webdavclient3 based on https://github.com/designerror/webdav-client-python but uses `requests` instead of `pycurl`.\nit provides easy way to work with webdav-servers.\n\ninstallation\n------------\n```bash\n$ pip install webdavclient3\n```\n\nsample usage\n------------\n```python\nfrom webdav3.client import client\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"login\",\n 'webdav_password': \"password\"\n}\nclient = client(options)\nclient.verify = false # to not check ssl certificates (default = true)\nclient.session.proxies(...) # to set proxy directly into the session (optional)\nclient.session.auth(...) # to set proxy auth directly into the session (optional)\nclient.execute_request(\"mkdir\", 'directory_name')\n```\n\nwebdav api\n==========\n\nwebdav api is a set of webdav actions of work with cloud storage. this set includes the following actions:\n`check`, `free`, `info`, `list`, `mkdir`, `clean`, `copy`, `move`, `download`, `upload`, `publish` and `unpublish`.\n\n**configuring the client**\n\nrequired key is host name or ip address of the wevdav-server with param name `webdav_hostname`.  \nfor authentication in webdav server use `webdav_login`, `webdav_password`.  \nfor an anonymous login do not specify auth properties.\n\n```python\nfrom webdav3.client import client\n\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"login\",\n 'webdav_password': \"password\"\n}\nclient = client(options)\n```\n\nif your server does not support `head` method or there are other reasons to override default webdav methods for actions use a dictionary option `webdav_override_methods`. \nthe key should be in the following list: `check`, `free`, `info`, `list`, `mkdir`, `clean`, `copy`, `move`, `download`, `upload`,\n `publish` and `unpublish`. the value should a string name of webdav method, for example `get`.\n \n```python\nfrom webdav3.client import client\n\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"login\",\n 'webdav_password': \"password\",\n 'webdav_override_methods': {\n            'check': 'get'\n        }\n\n}\nclient = client(options)\n```\n\nfor configuring a requests timeout you can use an option `webdav_timeout` with int value in seconds, by default the timeout is set to 30 seconds.\n\n```python\nfrom webdav3.client import client\n\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"login\",\n 'webdav_password': \"password\",\n 'webdav_timeout': 30\n}\nclient = client(options)\n```\n\nwhen a proxy server you need to specify settings to connect through it.\n\n```python\nfrom webdav3.client import client\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"w_login\",\n 'webdav_password': \"w_password\", \n 'proxy_hostname':  \"http://127.0.0.1:8080\",\n 'proxy_login':     \"p_login\",\n 'proxy_password':  \"p_password\"\n}\nclient = client(options)\n```\n\nif you want to use the certificate path to certificate and private key is defined as follows:\n\n```python\nfrom webdav3.client import client\noptions = {\n 'webdav_hostname': \"https://webdav.server.ru\",\n 'webdav_login':    \"w_login\",\n 'webdav_password': \"w_password\",\n 'cert_path':       \"/etc/ssl/certs/certificate.crt\",\n 'key_path':        \"/etc/ssl/private/certificate.key\"\n}\nclient = client(options)\n```\n\nor you want to limit the speed or turn on verbose mode:\n\n```python\noptions = {\n ...\n 'recv_speed' : 3000000,\n 'send_speed' : 3000000,\n 'verbose'    : true\n}\nclient = client(options)\n```\n\nrecv_speed: rate limit data download speed in bytes per second. defaults to unlimited speed.  \nsend_speed: rate limit data upload speed in bytes per second. defaults to unlimited speed.  \nverbose:    set verbose mode on/off. by default verbose mode is off.\n\nalso if your server does not support `check` it is possible to disable it:\n\n```python\noptions = {\n ...\n 'disable_check': true\n}\nclient = client(options)\n```\n\nby default, checking of remote resources is enabled.\n\nfor configuring chunk size of content downloading use `chunk_size` param, by default it is `65536`\n\n```python\noptions = {\n ...\n 'chunk_size': 65536\n}\nclient = client(options)\n```\n\n**synchronous methods**\n\n```python\n# checking existence of the resource\n\nclient.check(\"dir1/file1\")\nclient.check(\"dir1\")\n```\n\n```python\n# get information about the resource\n\nclient.info(\"dir1/file1\")\nclient.info(\"dir1/\")\n```\n\n```python\n# check free space\n\nfree_size = client.free()\n```\n\n```python\n# get a list of resources\n\nfiles1 = client.list()\nfiles2 = client.list(\"dir1\")\nfiles3 = client.list(\"dir1\", get_info=true) # returns a list of dictionaries with files details\n```\n\n```python\n# create directory\n\nclient.mkdir(\"dir1/dir2\")\n```\n\n```python\n# delete resource\n\nclient.clean(\"dir1/dir2\")\n```\n\n```python\n# copy resource\n\nclient.copy(remote_path_from=\"dir1/file1\", remote_path_to=\"dir2/file1\")\nclient.copy(remote_path_from=\"dir2\", remote_path_to=\"dir3\")\n```\n\n```python\n# move resource\n\nclient.move(remote_path_from=\"dir1/file1\", remote_path_to=\"dir2/file1\")\nclient.move(remote_path_from=\"dir2\", remote_path_to=\"dir3\")\n```\n\n```python\n# download a resource\n\nclient.download_sync(remote_path=\"dir1/file1\", local_path=\"~/downloads/file1\")\nclient.download_sync(remote_path=\"dir1/dir2/\", local_path=\"~/downloads/dir2/\")\n```\n\n```python\n# upload resource\n\nclient.upload_sync(remote_path=\"dir1/file1\", local_path=\"~/documents/file1\")\nclient.upload_sync(remote_path=\"dir1/dir2/\", local_path=\"~/documents/dir2/\")\n```\n\n```python\n# publish the resource\n\nlink = client.publish(\"dir1/file1\")\nlink = client.publish(\"dir2\")\n```\n\n```python\n# unpublish resource\n\nclient.unpublish(\"dir1/file1\")\nclient.unpublish(\"dir2\")\n```\n\n```python\n# exception handling\n\nfrom webdav3.client import webdavexception\ntry:\n...\nexcept webdavexception as exception:\n...\n```\n\n```python\n# get the missing files\n\nclient.pull(remote_directory='dir1', local_directory='~/documents/dir1')\n```\n\n```python\n# send missing files\n\nclient.push(remote_directory='dir1', local_directory='~/documents/dir1')\n```\n\n**asynchronous methods**\n\n```python\n# load resource\n\nkwargs = {\n 'remote_path': \"dir1/file1\",\n 'local_path':  \"~/downloads/file1\",\n 'callback':    callback\n}\nclient.download_async(**kwargs)\n\nkwargs = {\n 'remote_path': \"dir1/dir2/\",\n 'local_path':  \"~/downloads/dir2/\",\n 'callback':    callback\n}\nclient.download_async(**kwargs)\n```\n\n```python\n# unload resource\n\nkwargs = {\n 'remote_path': \"dir1/file1\",\n 'local_path':  \"~/downloads/file1\",\n 'callback':    callback\n}\nclient.upload_async(**kwargs)\n\nkwargs = {\n 'remote_path': \"dir1/dir2/\",\n 'local_path':  \"~/downloads/dir2/\",\n 'callback':    callback\n}\nclient.upload_async(**kwargs)\n```\n\nresource api\n============\n\nresource api using the concept of oop that enables cloud-level resources.\n\n```python\n# get a resource\n\nres1 = client.resource(\"dir1/file1\")\n```\n\n```python\n# work with the resource\n\nres1.rename(\"file2\")\nres1.move(\"dir1/file2\")\nres1.copy(\"dir2/file1\")\ninfo = res1.info()\nres1.read_from(buffer)\nres1.read(local_path=\"~/documents/file1\")\nres1.read_async(local_path=\"~/documents/file1\", callback)\nres1.write_to(buffer)\nres1.write(local_path=\"~/downloads/file1\")\nres1.write_async(local_path=\"~/downloads/file1\", callback)\n```\n\n# for contributors\n\n### prepare development environment\n1. install docker on your development machine\n1. start webdav server for testing by following commands from the project's root folder or change path to `conf` dir in second command to correct:\n```shell script\ndocker pull bytemark/webdav\ndocker run -d --name webdav -e auth_type=basic -e username=alice -e password=secret1234 -v conf:/usr/local/apache2/conf -p 8585:80 bytemark/webdav\n``` \n\n### code convention\n\nplease check your code according pep8 style guides.\n\n### run tests\n1. check that webdav container is started on your local machine\n1. execute following command in the project's root folder:\n```shell script\npython -m unittest discover -s tests\n```\n\n### prepare a pull request\n\nplease use this check list before creating pr:\n1. you code should be formatted according pep8\n1. all tests should successfully pass\n1. your changes shouldn't change previous default behaviour, exclude defects\n1. all changes are covered by tests",
  "docs_url": null,
  "keywords": "webdav,client,python,module,library,packet,yandex.disk,dropbox,google disk,box,4shared",
  "license": "mit license",
  "name": "webdavclient3",
  "package_url": "https://pypi.org/project/webdavclient3/",
  "project_url": "https://pypi.org/project/webdavclient3/",
  "project_urls": {
    "Homepage": "https://github.com/ezhov-evgeny/webdav-client-python-3"
  },
  "release_url": "https://pypi.org/project/webdavclient3/3.14.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "webdav client, based on original package https://github.com/designerror/webdav-client-python but uses requests instead of pycurl",
  "version": "3.14.6",
  "releases": [],
  "developers": [
    "evgeny_ezhov",
    "ezhov.evgeny@gmail.com"
  ],
  "kwds": "webdav3 evgeny_webdav webdav sonarcloud webdavclient3",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_webdavclient3",
  "homepage": "https://github.com/ezhov-evgeny/webdav-client-python-3",
  "release_count": 21,
  "dependency_ids": []
}
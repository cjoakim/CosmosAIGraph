{
  "classifiers": [
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "python-plexapi\n==============\n.. image:: https://github.com/pkkid/python-plexapi/workflows/ci/badge.svg\n    :target: https://github.com/pkkid/python-plexapi/actions?query=workflow%3aci\n.. image:: https://readthedocs.org/projects/python-plexapi/badge/?version=latest\n    :target: http://python-plexapi.readthedocs.io/en/latest/?badge=latest\n.. image:: https://codecov.io/gh/pkkid/python-plexapi/branch/master/graph/badge.svg?token=foecznumtw\n    :target: https://codecov.io/gh/pkkid/python-plexapi\n.. image:: https://img.shields.io/github/tag/pkkid/python-plexapi.svg?label=github+release\n    :target: https://github.com/pkkid/python-plexapi/releases\n.. image:: https://badge.fury.io/py/plexapi.svg\n    :target: https://badge.fury.io/py/plexapi\n.. image:: https://img.shields.io/github/last-commit/pkkid/python-plexapi.svg\n    :target: https://img.shields.io/github/last-commit/pkkid/python-plexapi.svg\n\n\noverview\n--------\nunofficial python bindings for the plex api. our goal is to match all capabilities of the official\nplex web client. a few of the many features we currently support are:\n\n* navigate local or remote shared libraries.\n* perform library actions such as scan, analyze, empty trash.\n* remote control and play media on connected clients, including `controlling sonos speakers`_\n* listen in on all plex server notifications.\n\n\ninstallation & documentation\n----------------------------\n\n.. code-block:: python\n\n    pip install plexapi\n\n*install extra features:*\n\n.. code-block:: python\n\n    pip install plexapi[alert]  # install with dependencies required for plexapi.alert\n\ndocumentation_ can be found at read the docs.\n\n.. _documentation: http://python-plexapi.readthedocs.io/en/latest/\n\njoin our discord_ for support and discussion.\n\n.. _discord: https://discord.gg/gtannzakuw\n\n\ngetting a plexserver instance\n-----------------------------\n\nthere are two types of authentication. if you are running on a separate network\nor using plex users you can log into myplex to get a plexserver instance. an\nexample of this is below. note: servername below is the name of the server (not\nthe hostname and port).  if logged into plex web you can see the server name in\nthe top left above your available libraries.\n\n.. code-block:: python\n\n    from plexapi.myplex import myplexaccount\n    account = myplexaccount('<username>', '<password>')\n    plex = account.resource('<servername>').connect()  # returns a plexserver instance\n\nif you want to avoid logging into myplex and you already know your auth token\nstring, you can use the plexserver object directly as above, by passing in\nthe baseurl and auth token directly.\n\n.. code-block:: python\n\n    from plexapi.server import plexserver\n    baseurl = 'http://plexserver:32400'\n    token = '2fflub84dqlswk9sklos'\n    plex = plexserver(baseurl, token)\n\n\nusage examples\n--------------\n\n.. code-block:: python\n\n    # example 1: list all unwatched movies.\n    movies = plex.library.section('movies')\n    for video in movies.search(unwatched=true):\n        print(video.title)\n\n\n.. code-block:: python\n\n    # example 2: mark all game of thrones episodes as played.\n    plex.library.section('tv shows').get('game of thrones').markplayed()\n\n\n.. code-block:: python\n\n    # example 3: list all clients connected to the server.\n    for client in plex.clients():\n        print(client.title)\n\n\n.. code-block:: python\n\n    # example 4: play the movie cars on another client.\n    # note: client must be on same network as server.\n    cars = plex.library.section('movies').get('cars')\n    client = plex.client(\"michael's iphone\")\n    client.playmedia(cars)\n\n\n.. code-block:: python\n\n    # example 5: list all content with the word 'game' in the title.\n    for video in plex.search('game'):\n        print(f'{video.title} ({video.type})')\n\n\n.. code-block:: python\n\n    # example 6: list all movies directed by the same person as elephants dream.\n    movies = plex.library.section('movies')\n    elephants_dream = movies.get('elephants dream')\n    director = elephants_dream.directors[0]\n    for movie in movies.search(none, director=director):\n        print(movie.title)\n\n\n.. code-block:: python\n\n    # example 7: list files for the latest episode of the 100.\n    last_episode = plex.library.section('tv shows').get('the 100').episodes()[-1]\n    for part in last_episode.iterparts():\n        print(part.file)\n\n\n.. code-block:: python\n\n    # example 8: get audio/video/all playlists\n    for playlist in plex.playlists():\n        print(playlist.title)\n\n\n.. code-block:: python\n\n    # example 9: rate the 100 four stars.\n    plex.library.section('tv shows').get('the 100').rate(8.0)\n\n\ncontrolling sonos speakers\n--------------------------\n\nto control sonos speakers directly using plex apis, the following requirements must be met:\n\n1. active plex pass subscription\n2. sonos account linked to plex account\n3. plex remote access enabled\n\ndue to the design of sonos music services, the api calls to control sonos speakers route through https://sonos.plex.tv\nand back via the plex server's remote access. actual media playback is local unless networking restrictions prevent the\nsonos speakers from connecting to the plex server directly.\n\n.. code-block:: python\n\n    from plexapi.myplex import myplexaccount\n    from plexapi.server import plexserver\n\n    baseurl = 'http://plexserver:32400'\n    token = '2fflub84dqlswk9sklos'\n\n    account = myplexaccount(token)\n    server = plexserver(baseurl, token)\n\n    # list available speakers/groups\n    for speaker in account.sonos_speakers():\n        print(speaker.title)\n\n    # obtain plexsonosplayer instance\n    speaker = account.sonos_speaker(\"kitchen\")\n\n    album = server.library.section('music').get('stevie wonder').album('innervisions')\n\n    # speaker control examples\n    speaker.playmedia(album)\n    speaker.pause()\n    speaker.setvolume(10)\n    speaker.skipnext()\n\n\nrunning tests over plexapi\n--------------------------\n\nuse:\n\n.. code-block:: bash\n\n     tools/plex-boostraptest.py \n\nwith appropriate\narguments and add this new server to a shared user which username is defined in environment variable `shared_username`.\nit uses `official docker image`_ to create a proper instance.\n\nfor skipping the docker and reuse a existing server use \n\n.. code-block:: bash\n\n    python plex-bootstraptest.py --no-docker --username username --password password --server-name name-of-your-sever\n\nalso in order to run most of the tests you have to provide some environment variables:\n\n* `plexapi_auth_server_baseurl` containing an url to your plex instance, e.g. `http://127.0.0.1:32400` (without trailing\n  slash)\n* `plexapi_auth_myplex_username` and `plexapi_auth_myplex_password` with your myplex username and password accordingly\n\nafter this step you can run tests with following command:\n\n.. code-block:: bash\n\n    py.test tests -rxxs --ignore=tests/test_sync.py\n\nsome of the tests in main test-suite require a shared user in your account (e.g. `test_myplex_users`,\n`test_myplex_updatefriend`, etc.), you need to provide a valid shared user's username to get them running you need to\nprovide the username of the shared user as an environment variable `shared_username`. you can enable a guest account and\nsimply pass `guest` as `shared_username` (or just create a user like `plexapitest` and play with it).\n\nto be able to run tests over mobile sync api you have to some some more environment variables, to following values\nexactly:\n\n* plexapi_header_provides='controller,sync-target'\n* plexapi_header_platform=ios\n* plexapi_header_platform_version=11.4.1\n* plexapi_header_device=iphone\n\nand finally run the sync-related tests:\n\n.. code-block:: bash\n\n    py.test tests/test_sync.py -rxxs\n\n.. _official docker image: https://hub.docker.com/r/plexinc/pms-docker/\n\ncommon questions\n----------------\n\n**why are you using camelcase and not following pep8 guidelines?**\n\nthis api reads xml documents provided by myplex and the plex server.\nwe decided to conform to their style so that the api variable names directly\nmatch with the provided xml documents.\n\n\n**why don't you offer feature xyz?**\n\nthis library is meant to be a wrapper around the xml pages the plex\nserver provides. if we are not providing an api that is offered in the\nxml pages, please let us know! -- adding additional features beyond that\nshould be done outside the scope of this library.\n\n\n**what are some helpful links if trying to understand the raw plex api?**\n\n* https://github.com/plexinc/plex-media-player/wiki/remote-control-api\n* https://forums.plex.tv/discussion/104353/pms-web-api-documentation\n* https://github.com/arcanemagus/plex-api/wiki\n\n\n",
  "docs_url": null,
  "keywords": "plex,api",
  "license": "",
  "name": "plexapi",
  "package_url": "https://pypi.org/project/PlexAPI/",
  "project_url": "https://pypi.org/project/PlexAPI/",
  "project_urls": {
    "Homepage": "https://github.com/pkkid/python-plexapi"
  },
  "release_url": "https://pypi.org/project/PlexAPI/4.15.7/",
  "requires_dist": [
    "requests",
    "websocket-client >=1.3.3 ; extra == 'alert'"
  ],
  "requires_python": ">=3.8",
  "summary": "python bindings for the plex api.",
  "version": "4.15.7",
  "releases": [],
  "developers": [
    "michael.shepanski@gmail.com",
    "michael_shepanski"
  ],
  "kwds": "plexapi plex plexapi_header_platform plexapi_auth_myplex_password plexapi_header_device",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_plexapi",
  "homepage": "https://github.com/pkkid/python-plexapi",
  "release_count": 72,
  "dependency_ids": [
    "pypi_requests",
    "pypi_websocket_client"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# python mathematical expression evaluator\n\n[![build status](https://travis-ci.org/axiacore/py-expression-eval.svg?branch=master)](https://travis-ci.org/axiacore/py-expression-eval)\n\n[![pypi version](https://img.shields.io/pypi/v/py_expression_eval.svg)](https://pypi.python.org/pypi/py_expression_eval/)\n[![pypi downloads](https://img.shields.io/pypi/dm/py_expression_eval.svg)](https://pypi.python.org/pypi/py_expression_eval/)\n\n[![coverage status](https://coveralls.io/repos/github/axiacore/py-expression-eval/badge.svg?branch=master)](https://coveralls.io/github/axiacore/py-expression-eval?branch=master)\n\nbased on js-expression-eval, by matthew crumley (email@matthewcrumley.com, http://silentmatt.com/)\nhttps://github.com/silentmatt/js-expression-eval\n\nported to python and modified by @cansadadeserfeliz.\n\nyou are free to use and modify this code in anyway you find useful. please leave this comment in the code\nto acknowledge its original source. if you feel like it, i enjoy hearing about projects that use my code,\nbut don't feel like you have to let me know or ask permission.\n\n## installation\n\n    pip install py_expression_eval\n\n## tests\n\n    python setup.py test\n\n## documentation\n\nall the classes and methods of ``py-expression-eval`` were written as similar as possible to their analogues from   [js-expression-eval](https://github.com/silentmatt/js-expression-eval) to make it easier to use for validation on back-end side.\n\n### parser\n\n\n``parser`` is the main class of the library that contains the methods to parse, evaluate and simplify mathematical expressions. in order to use the library you need to create an instance of this class:\n\n```python\n> from py_expression_eval import parser\n> parser = parser()\n```\n\nonce you instantiated ``parser`` class, you can create ``expression`` object using ``parse`` method:\n\n```python\n> parser.parse('2 * 3')\nout: <py_expression_eval.expression instance at 0x7f40cc4e5ef0>\n```\n\n### parser.expression\n\n``evaluate()`` takes a dictionary with variables as a parameter and returns the value of the expression:\n\n```python\n> parser.parse('2 * 3').evaluate({})\nout: 6\n> parser.parse('2 * 3.0').evaluate({})\nout: 6.0\n> parser.parse('2 * x').evaluate({'x': 7})\nout: 14\n> parser.parse('2 * x').evaluate({'x': 7.0})\nout: 14.0\n```\n\n``substitute()`` creates a new expression where specified variables are replaces with a new expression. for example, to replace ``x`` with ``3 + x`` in ``2 * x`` expression we use the following code:\n\n```python\n> parser.parse('2 * x').substitute('x', '3 + x').tostring()\nout: '(2*(3+x))'\n```\n\n``variables()`` returns a list of the variables for the expression:\n\n```python\n> parser.parse('2 * x + y').variables()\nout: ['x', 'y']\n```\n\n``simplify()`` simplifies the expression. for example,\n\n```python\n> parser.parse('2 * 3 * x + y').simplify({}).tostring()\nout: '((6*x)+y)'\n> parser.parse('2 * 3 * x + y').simplify({'x': -1}).tostring()\nout: '(-6+y)'\n> parser.parse('cos(pi) + x').simplify({}).tostring()\nout: '(-1.0+x)'\n```\n\n``tostring()`` converts the expression to a string.\n\n### available operators, constants and functions\n\n| expression  | example | output\n| ----------  | ------- | ------\n| +           | ``parser.parse('2 + 2').evaluate({})`` | 4\n| -           | ``parser.parse('3 - 1').evaluate({})`` | 2\n| `*`         | ``parser.parse('2 * 3').evaluate({})`` | 6\n| /           | ``parser.parse('5 / 2').evaluate({})`` | 2.5\n| %           | ``parser.parse('5 % 2').evaluate({})`` | 1\n| ^           | ``parser.parse('5 ^ 2').evaluate({})`` | 25.0\n| pi          | ``parser.parse('pi').evaluate({})`` | 3.141592653589793\n| e           | ``parser.parse('e').evaluate({})`` | 2.718281828459045\n| sin(x)      | ``parser.parse('sin(0)').evaluate({})`` | 0.0\n| cos(x)      | ``parser.parse('cos(pi)').evaluate({})`` | - 1.0\n| tan(x)      |  ``parser.parse('tan(0)').evaluate({})`` | 0.0\n| asin(x)     | ``parser.parse('asin(0)').evaluate({})`` | 0.0\n| acos(x)     | ``parser.parse('acos(-1)').evaluate({})`` | 3.141592653589793\n| atan(x)     | ``parser.parse('atan(pi)').evaluate({})`` | 1.2626272556789118\n| log(x)      | ``parser.parse('log(1)').evaluate({})`` | 0.0\n| log(x, base)| ``parser.parse('log(16, 2)').evaluate({})`` | 4.0\n| abs(x)      | ``parser.parse('abs(-1)').evaluate({})`` | 1\n| ceil(x)     | ``parser.parse('ceil(2.7)').evaluate({})`` | 3.0\n| floor(x)    | ``parser.parse('floor(2.7)').evaluate({})`` | 2.0\n| round(x)    | ``parser.parse('round(2.7)').evaluate({})`` | 3.0\n| exp(x)      | ``parser.parse('exp(2)').evaluate({})`` | 7.38905609893065\n| and         | ``parser.parse('a and b').evaluate({'a':true, 'b':true})`` | true\n| or          | ``parser.parse('a or b').evaluate({'a':true, 'b':true})`` | true\n| xor         | ``parser.parse('a xor b').evaluate({'a':true, 'b':true})`` | false\n| not         | ``parser.parse('a and not b').evaluate({'a':true, 'b':true})`` | false\n| in          | ``parser.parse('1 in (1,2,3)').evaluate({})`` | true\n\n## examples\n\n```python\nfrom py_expression_eval import parser\n\nparser = parser()\nparser.parse('2 * 3').evaluate({})  # 6\nparser.parse('2 ^ x').evaluate({'x': 3})  # 8.0\nparser.parse('2 * x + 1').evaluate({'x': 3})  # 7\nparser.parse('2 + 3 * x').evaluate({'x': 4})  # 14\nparser.parse('(2 + 3) * x').evaluate({'x': 4}) # 20\nparser.parse('2-3^x').evaluate({'x': 4})  # -79.0\nparser.parse('-2-3^x').evaluate({'x': 4})  # -83.0\nparser.parse('-3^x').evaluate({'x': 4})  # -81.0\nparser.parse('(-3)^x').evaluate({'x': 4})  # 81.0\nparser.parse('2*x + y').evaluate({'x': 4, 'y': 1})  # 9\nparser.parse('round(log(2.7))').evaluate({}) # 1.0\n\n# substitute\nexpr = parser.parse('2 * x + 1')\nexpr2 = expr.substitute('x', '4 * x')  # ((2*(4*x))+1)\nexpr2.evaluate({'x': 3})  # 25\n\n# simplify\nexpr = parser.parse('x * (y * atan(1))').simplify({'y': 4})\nexpr.tostring()  # x*3.141592\nexpr.evaluate({'x': 2})  # 6.283185307179586\n\n# get variables\nexpr = parser.parse('x * (y * atan(1))')\nexpr.variables()  # ['x', 'y']\nexpr.simplify({'y': 4}).variables()  # ['x']\n```\n\navailable operations\n--------------------\n\n```python\nfrom py_expression_eval import parser\n\nparser = parser()\nparser.parse('2 + 3').evaluate({})  # 5\nparser.parse('2 - 3').evaluate({})  # -1\nparser.parse('2 * 3').evaluate({})  # 6\nparser.parse('2 / 3').evaluate({})  # 0.6666666666666666\nparser.parse('2 % 3').evaluate({})  # 2\nparser.parse('-2').evaluate({})  # -2\nparser.parse('abs(-2)').evaluate({}) # 2\n\nparser.parse('ceil(1.4)').evaluate({})  # 2.0\nparser.parse('floor(1.4)').evaluate({})  # 1.0\nparser.parse('round(1.4)').evaluate({})  # 1.0\n\nparser.parse('2^3').evaluate({})  # 8.0\nparser.parse('sqrt(16)').evaluate({}) # 4.0\n\nparser.parse('sin(3.14)').evaluate({})  # 0.0015926529164868282\nparser.parse('cos(3.14)').evaluate({})  # -0.9999987317275395\nparser.parse('tan(3.14)').evaluate({})  # -0.0015926549364072232\n\nparser.parse('asin(1)').evaluate({})  # 1.5707963267948966\nparser.parse('acos(1)').evaluate({})  # 0.0\nparser.parse('atan(1)').evaluate({})  # 0.7853981633974483\n\nparser.parse('log(2.7)').evaluate({})  # 0.9932517730102834\nparser.parse('exp(1)').evaluate({})  # 2.718281828459045\n\nparser.parse('log(e)').evaluate({})  # 1.0\nparser.parse('cos(pi)').evaluate({})  # -1.0\n\nparser.parse('x||y').evaluate({'x': 2, 'y': 3})  # '23'\n\nparser.parse('num in (1,2,3)').evaluate({'num': 1})  # true\nparser.parse('\"word\" in \"word in sentence\"').evaluate({})  # true\n```\n\n## upload package to pypi\n\ngenerating distribution archives\n\n    python3 setup.py sdist bdist_wheel\n\nupload distribution\n\n    ls -a dist/\n    twine upload dist/py_expression_eval-0.3.9*\n\ncheck on: https://pypi.org/project/py-expression-eval/0.3.9/\n\nmore details: https://packaging.python.org/tutorials/packaging-projects/\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "py-expression-eval",
  "package_url": "https://pypi.org/project/py-expression-eval/",
  "project_url": "https://pypi.org/project/py-expression-eval/",
  "project_urls": {
    "Homepage": "https://github.com/AxiaCore/py-expression-eval/"
  },
  "release_url": "https://pypi.org/project/py-expression-eval/0.3.14/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python mathematical expression evaluator",
  "version": "0.3.14",
  "releases": [],
  "developers": [
    "cansadadeserfeliz",
    "vero4ka.ru@gmail.com"
  ],
  "kwds": "py_expression_eval evaluator eval expressions python3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_py_expression_eval",
  "homepage": "https://github.com/axiacore/py-expression-eval/",
  "release_count": 16,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "application insights for python\n===============================\n\n.. image:: https://github.com/brennerm/python-appinsights/workflows/.github/workflows/ci.yml/badge.svg\n    :target: .github/workflows/ci.yml\n\n.. image:: https://badge.fury.io/py/appinsights.svg\n    :target: http://badge.fury.io/py/appinsights\n\n\nthis project extends the application insights api surface to support python.\n`application insights\n<http://azure.microsoft.com/services/application-insights/>`_ is a service that\nallows developers to keep their application available, performing and\nsucceeding. this python module will allow you to send telemetry of various kinds\n(event, trace, exception, etc.) to the application insights service where they\ncan be visualized in the azure portal. a link to the application insights api\ndocumentation can be found `here\n<https://brennerm.github.io/python-appinsights/>`_.\n\nthis project is not officially supported and not recommended for high load\nproduction use. the project is open source and welcomes contributions.\n\nrequirements\n------------\n\npython >=2.7 and python >=3.4 are currently supported by this module.\n\ninstallation\n------------\n\nto install the latest release you can use `pip <http://www.pip-installer.org/>`_.\n\n::\n\n    $ pip install appinsights\n\ndocumentation\n-------------\n\nplease see https://brennerm.github.io/python-appinsights/ for full documentation.\n\nusage\n-----\n\nonce installed, you can send telemetry to application insights. here are a few samples.\n\n    **note**: before you can send data to you will need an instrumentation key. please see the `getting an application insights instrumentation key <https://github.com/microsoft/appinsights-home/wiki#getting-an-application-insights-instrumentation-key>`_ section for more information.\n\n**sending a simple event telemetry item**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.track_event('test event')\n    tc.flush()\n\n**sending an event telemetry item with custom properties and measurements**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.track_event('test event', { 'foo': 'bar' }, { 'baz': 42 })\n    tc.flush()\n\n**sending a trace telemetry item with custom properties**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.track_trace('test trace', { 'foo': 'bar' })\n    tc.flush()\n\n**sending a metric telemetry item**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.track_metric('my metric', 42)\n    tc.flush()\n\n**sending an availability telemetry item**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.track_availability('my service', 250, true, \"west europe\")\n    tc.flush()\n\n**sending an exception telemetry item with custom properties and measurements**\n\n.. code:: python\n\n    import sys\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    try:\n        raise exception('blah')\n    except:\n        tc.track_exception()\n\n    try:\n        raise exception(\"blah\")\n    except:\n        tc.track_exception(*sys.exc_info(), properties={ 'foo': 'bar' }, measurements={ 'x': 42 })\n    tc.flush()\n\n**configuring context for a telemetry client instance**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.context.application.ver = '1.2.3'\n    tc.context.device.id = 'my current device'\n    tc.context.device.oem_name = 'asus'\n    tc.context.device.model = 'x31a'\n    tc.context.device.type = \"other\"\n    tc.context.user.id = 'santa@northpole.net'\n    tc.context.properties['my_property'] = 'my_value'\n    tc.track_trace('my trace with context')\n    tc.flush()\n\n**establishing correlation between telemetry objects**\n\ncontext field called operation_id can be set to associate telemetry items.\nsince operation_id is being set as a property of telemetry client, the client shouldn't be reused in parallel threads as it might lead to concurrency issues.\n\n.. code:: python\n  \n    tc = telemetryclient(instrumentation_key=instrumentation_key)\n    tc.context.operation.id = <operation_id>\n    tc.track_trace('test trace')\n    tc.flush()\n\n**configuring channel related properties**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    tc = telemetryclient('<your instrumentation key goes here>')\n    # flush telemetry every 30 seconds (assuming we don't hit max_queue_item_count first)\n    tc.channel.sender.send_interval_in_milliseconds = 30 * 1000\n    # flush telemetry if we have 10 or more telemetry items in our queue\n    tc.channel.queue.max_queue_length = 10\n\n**configuring telemetryprocessor**\n\n.. code:: python\n\n    from applicationinsights import telemetryclient\n    def process(data, context):\n       data.properties[\"new_prop\"] = \"myprop\"  # add property\n       context.user.id = \"myid\"   # change id\n       return true # not filtered\n    tc = telemetryclient('<your instrumentation key goes here>')\n    tc.add_telemetry_processor(process)\n\n**basic logging configuration (first option)**\n\n.. code:: python\n\n    import logging\n    from applicationinsights.logging import enable\n\n    # set up logging\n    enable('<your instrumentation key goes here>')\n\n    # log something (this will be sent to the application insights service as a trace)\n    logging.info('this is a message')\n\n    # logging shutdown will cause a flush of all un-sent telemetry items\n    logging.shutdown()\n\n**basic logging configuration (second option)**\n\n.. code:: python\n\n    import logging\n    from applicationinsights.logging import logginghandler\n\n    # set up logging\n    handler = logginghandler('<your instrumentation key goes here>')\n    logging.basicconfig(handlers=[ handler ], format='%(levelname)s: %(message)s', level=logging.debug)\n\n    # log something (this will be sent to the application insights service as a trace)\n    logging.debug('this is a message')\n\n    try:\n        raise exception('some exception')\n    except:\n        # this will send an exception to the application insights service\n        logging.exception('code went boom!')\n\n    # logging shutdown will cause a flush of all un-sent telemetry items\n    # alternatively flush manually via handler.flush()\n    logging.shutdown()\n\n**advanced logging configuration**\n\n.. code:: python\n\n    import logging\n    from applicationinsights import channel\n    from applicationinsights.logging import logginghandler\n\n    # set up channel with context\n    telemetry_channel = channel.telemetrychannel()\n    telemetry_channel.context.application.ver = '1.2.3'\n    telemetry_channel.context.properties['my_property'] = 'my_value'\n\n    # set up logging\n    handler = logginghandler('<your instrumentation key goes here>', telemetry_channel=telemetry_channel)\n    handler.setlevel(logging.debug)\n    handler.setformatter(logging.formatter('%(levelname)s: %(message)s'))\n    my_logger = logging.getlogger('simple_logger')\n    my_logger.setlevel(logging.debug)\n    my_logger.addhandler(handler)\n\n    # log something (this will be sent to the application insights service as a trace)\n    my_logger.debug('this is a message')\n\n    # logging shutdown will cause a flush of all un-sent telemetry items\n    # alternatively flush manually via handler.flush()\n    logging.shutdown()\n\n**logging unhandled exceptions**\n\n.. code:: python\n\n    from applicationinsights.exceptions import enable\n\n    # set up exception capture\n    enable('<your instrumentation key goes here>')\n\n    # raise an exception (this will be sent to the application insights service as an exception telemetry object)\n    raise exception('boom!')\n\n    # exceptions will cause a flush of all un-sent telemetry items\n\n**logging unhandled exceptions with context**\n\n.. code:: python\n\n    from applicationinsights import channel\n    from applicationinsights.exceptions import enable\n\n    # set up channel with context\n    telemetry_channel = channel.telemetrychannel()\n    telemetry_channel.context.application.ver = '1.2.3'\n    telemetry_channel.context.properties['my_property'] = 'my_value'\n\n    # set up exception capture\n    enable('<your instrumentation key goes here>', telemetry_channel=telemetry_channel)\n\n    # raise an exception (this will be sent to the application insights service as an exception telemetry object)\n    raise exception('boom!')\n\n    # exceptions will cause a flush of all un-sent telemetry items\n\n**track dependency telemetry for http requests with requests**\n\n.. code:: python\n\n    from applicationinsights.client import enable_for_requests\n    import requests\n\n    enable_for_requests('<your instrumentation key goes here>')\n\n    requests.get(\"https://www.python.org/\")\n    # a dependency telemetry will be sent to the application insights service\n\n**track dependency telemetry for http requests with urllib**\n\n.. code:: python\n\n    from applicationinsights.client import enable_for_urllib\n    import urllib.requests\n\n    enable_for_urllib('<your instrumentation key goes here>')\n\n    urllib.request.urlopen(\"https://www.python.org/\")\n    # a dependency telemetry will be sent to the application insights service\n\n**track dependency telemetry for http requests with urllib2**\n\n.. code:: python\n\n    from applicationinsights.client import enable_for_urllib2\n    import urllib2\n\n    enable_for_urllib2('<your instrumentation key goes here>')\n\n    urllib2.urlopen(\"https://www.python.org/\")\n    # a dependency telemetry will be sent to the application insights service\n\n\n**track dependency telemetry for http requests with urllib3**\n\n.. code:: python\n\n    from applicationinsights.client import enable_for_urllib3\n    import urllib3.requests\n\n    enable_for_urllib3('<your instrumentation key goes here>')\n\n    urllib3.poolmanager().request(\"get\", \"https://www.python.org/\")\n    # a dependency telemetry will be sent to the application insights service\n\n\n**integrating with flask**\n\n.. code:: python\n\n    from flask import flask\n    from applicationinsights.flask.ext import appinsights\n    \n    # instantiate the flask application\n    app = flask(__name__)\n    app.config['appinsights_instrumentationkey'] = '<your instrumentation key goes here>'\n\n    # log requests, traces and exceptions to the application insights service\n    appinsights = appinsights(app)\n\n    # define a simple route\n    @app.route('/')\n    def hello_world():\n        # the following message will be sent to the flask log as well as application insights\n        app.logger.info('hello world route was called')\n\n        return 'hello world!'\n\n    # run the application\n    if __name__ == '__main__':\n        app.run()\n\n**integrating with django**\n\nplace the following in your `settings.py` file:\n\n.. code:: python\n\n    # if on django < 1.10\n    middleware_classes = [\n        # ... or whatever is below for you ...\n        'django.middleware.security.securitymiddleware',\n        'django.contrib.sessions.middleware.sessionmiddleware',\n        'django.middleware.common.commonmiddleware',\n        'django.middleware.csrf.csrfviewmiddleware',\n        'django.contrib.auth.middleware.authenticationmiddleware',\n        'django.contrib.auth.middleware.sessionauthenticationmiddleware',\n        'django.contrib.messages.middleware.messagemiddleware',\n        'django.middleware.clickjacking.xframeoptionsmiddleware',\n        # ... or whatever is above for you ...\n        'applicationinsights.django.applicationinsightsmiddleware',   # add this middleware to the end\n    ]\n\n    # if on django >= 1.10\n    middleware = [\n        # ... or whatever is below for you ...\n        'django.middleware.security.securitymiddleware',\n        'django.contrib.sessions.middleware.sessionmiddleware',\n        'django.middleware.common.commonmiddleware',\n        'django.middleware.csrf.csrfviewmiddleware',\n        'django.contrib.auth.middleware.authenticationmiddleware',\n        'django.contrib.messages.middleware.messagemiddleware',\n        'django.middleware.clickjacking.xframeoptionsmiddleware',\n        # ... or whatever is above for you ...\n        'applicationinsights.django.applicationinsightsmiddleware',   # add this middleware to the end\n    ]\n\n    application_insights = {\n        # (required) your application insights instrumentation key\n        'ikey': \"00000000-0000-0000-0000-000000000000\",\n        \n        # (optional) by default, request names are logged as the request method\n        # and relative path of the url.  to log the fully-qualified view names\n        # instead, set this to true.  defaults to false.\n        'use_view_name': true,\n        \n        # (optional) to log arguments passed into the views as custom properties,\n        # set this to true.  defaults to false.\n        'record_view_arguments': true,\n        \n        # (optional) exceptions are logged by default, to disable, set this to false.\n        'log_exceptions': false,\n        \n        # (optional) events are submitted to application insights asynchronously.\n        # send_interval specifies how often the queue is checked for items to submit.\n        # send_time specifies how long the sender waits for new input before recycling\n        # the background thread.\n        'send_interval': 1.0, # check every second\n        'send_time': 3.0, # wait up to 3 seconds for an event\n        \n        # (optional, uncommon) if you must send to an endpoint other than the\n        # default endpoint, specify it here:\n        'endpoint': \"https://dc.services.visualstudio.com/v2/track\",\n    }\n\nthis will log all requests and exceptions to the instrumentation key\nspecified in the `application_insights` setting.  in addition, an\n`appinsights` property will be placed on each incoming `request` object in\nyour views.  this will have the following properties:\n\n* `client`: this is an instance of the `applicationinsights.telemetryclient`\n  type, which will submit telemetry to the same instrumentation key, and\n  will parent each telemetry item to the current request.\n* `request`: this is the `applicationinsights.channel.contracts.requestdata`\n  instance for the current request.  you can modify properties on this\n  object during the handling of the current request.  it will be submitted\n  when the request has finished.\n* `context`: this is the `applicationinsights.channel.telemetrycontext`\n  object for the current applicationinsights sender.\n\nyou can also hook up logging to django.  for example, to log all builtin\ndjango warnings and errors, use the following logging configuration in\n`settings.py`:\n\n.. code:: python\n\n    logging = {\n        'version': 1,\n        'disable_existing_loggers': false,\n        'handlers': {\n            # the application insights handler is here\n            'appinsights': {\n                'class': 'applicationinsights.django.logginghandler',\n                'level': 'warning'\n            }\n        },\n        'loggers': {\n            'django': {\n                'handlers': ['appinsights'],\n                'level': 'warning',\n                'propagate': true,\n            }\n        }\n    }\n\nsee django's `logging documentation <https://docs.djangoproject.com/en/1.11/topics/logging/>`_\nfor more information.\n\n**integrating with other web frameworks**\n\nfor any other python web framework that is `wsgi compliant <https://www.python.org/dev/peps/pep-0333/>`_,\nthe `wsgiapplication <https://github.com/brennerm/python-appinsights/blob/master/applicationinsights/requests/wsgiapplication.py>`_\ncan be used as a middleware to log requests to application insights.\n\nadd common properties to wsgiapplication request events by passing in a dictionary to the wsgiapplication constructor:\n\n.. code:: python\n\n    from wsgiref.simple_server import make_server\n    from pyramid.config import configurator\n    from pyramid.response import response\n    from applicationinsights.requests import wsgiapplication\n\n    # define a simple pyramid route\n    def hello_world(request):\n        return response('hello world!')\n\n    # construct dictionary which contains properties to be included with every request event\n    common_properties = {\n        \"service\": \"hello_world_flask_app\",\n        \"environment\": \"production\"\n    }\n\n    if __name__ == '__main__':\n        # create a simple pyramid app\n        with configurator() as config:\n            config.add_route('hello', '/')\n            config.add_view(hello_world, route_name='hello')\n            app = config.make_wsgi_app()\n\n            # wrap the app in the application insights request logging middleware\n            app = wsgiapplication('<your instrumentation key goes here>', app, common_properties=common_properties)\n\n        # run the app\n        server = make_server('0.0.0.0', 6543, app)\n        server.serve_forever()",
  "docs_url": null,
  "keywords": "analytics applicationinsights telemetry appinsights development",
  "license": "mit",
  "name": "appinsights",
  "package_url": "https://pypi.org/project/appinsights/",
  "project_url": "https://pypi.org/project/appinsights/",
  "project_urls": {
    "Download": "https://github.com/brennerm/python-appinsights",
    "Homepage": "https://github.com/brennerm/python-appinsights"
  },
  "release_url": "https://pypi.org/project/appinsights/0.13.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "this project extends the application insights api surface to support python.",
  "version": "0.13.0",
  "releases": [],
  "developers": [
    "max_brenner",
    "xamrennerb@gmail.com"
  ],
  "kwds": "application_insights appinsights_instrumentationkey applicationinsights telemetryprocessor telemetryclient",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_appinsights",
  "homepage": "https://github.com/brennerm/python-appinsights",
  "release_count": 8,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: compilers",
    "topic :: text processing",
    "typing :: typed"
  ],
  "description": "pyparsing -- a python parsing module\n====================================\n\n|version| |build status| |coverage| |license| |python versions| |snyk score|\n\nintroduction\n============\n\nthe pyparsing module is an alternative approach to creating and\nexecuting simple grammars, vs. the traditional lex/yacc approach, or the\nuse of regular expressions. the pyparsing module provides a library of\nclasses that client code uses to construct the grammar directly in\npython code.\n\n*[since first writing this description of pyparsing in late 2003, this\ntechnique for developing parsers has become more widespread, under the\nname parsing expression grammars - pegs. see more information on pegs*\n`here <https://en.wikipedia.org/wiki/parsing_expression_grammar>`__\n*.]*\n\nhere is a program to parse ``\"hello, world!\"`` (or any greeting of the form\n``\"salutation, addressee!\"``):\n\n.. code:: python\n\n    from pyparsing import word, alphas\n    greet = word(alphas) + \",\" + word(alphas) + \"!\"\n    hello = \"hello, world!\"\n    print(hello, \"->\", greet.parsestring(hello))\n\nthe program outputs the following::\n\n    hello, world! -> ['hello', ',', 'world', '!']\n\nthe python representation of the grammar is quite readable, owing to the\nself-explanatory class names, and the use of '+', '|' and '^' operator\ndefinitions.\n\nthe parsed results returned from ``parsestring()`` is a collection of type\n``parseresults``, which can be accessed as a\nnested list, a dictionary, or an object with named attributes.\n\nthe pyparsing module handles some of the problems that are typically\nvexing when writing text parsers:\n\n- extra or missing whitespace (the above program will also handle ``\"hello,world!\"``, ``\"hello , world !\"``, etc.)\n- quoted strings\n- embedded comments\n\nthe examples directory includes a simple sql parser, simple corba idl\nparser, a config file parser, a chemical formula parser, and a four-\nfunction algebraic notation parser, among many others.\n\ndocumentation\n=============\n\nthere are many examples in the online docstrings of the classes\nand methods in pyparsing. you can find them compiled into `online docs <https://pyparsing-docs.readthedocs.io/en/latest/>`__. additional\ndocumentation resources and project info are listed in the online\n`github wiki <https://github.com/pyparsing/pyparsing/wiki>`__. an\nentire directory of examples can be found `here <https://github.com/pyparsing/pyparsing/tree/master/examples>`__.\n\nlicense\n=======\n\nmit license. see header of the `pyparsing __init__.py <https://github.com/pyparsing/pyparsing/blob/master/pyparsing/__init__.py#l1-l23>`__ file.\n\nhistory\n=======\n\nsee `changes <https://github.com/pyparsing/pyparsing/blob/master/changes>`__ file.\n\n.. |build status| image:: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml\n\n.. |coverage| image:: https://codecov.io/gh/pyparsing/pyparsing/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/pyparsing/pyparsing\n\n.. |version| image:: https://img.shields.io/pypi/v/pyparsing?style=flat-square\n    :target: https://pypi.org/project/pyparsing/\n    :alt: version\n\n.. |license| image:: https://img.shields.io/pypi/l/pyparsing.svg?style=flat-square\n    :target: https://pypi.org/project/pyparsing/\n    :alt: license\n\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/pyparsing.svg?style=flat-square\n    :target: https://pypi.org/project/python-liquid/\n    :alt: python versions\n\n.. |snyk score| image:: https://snyk.io//advisor/python/pyparsing/badge.svg\n   :target: https://snyk.io//advisor/python/pyparsing\n   :alt: pyparsing\n\n",
  "docs_url": "https://pythonhosted.org/pyparsing/",
  "keywords": "",
  "license": "",
  "name": "pyparsing",
  "package_url": "https://pypi.org/project/pyparsing/",
  "project_url": "https://pypi.org/project/pyparsing/",
  "project_urls": {
    "Homepage": "https://github.com/pyparsing/pyparsing/"
  },
  "release_url": "https://pypi.org/project/pyparsing/3.1.1/",
  "requires_dist": [
    "railroad-diagrams ; extra == \"diagrams\"",
    "jinja2 ; extra == \"diagrams\""
  ],
  "requires_python": ">=3.6.8",
  "summary": "pyparsing module - classes and methods to define and execute parsing grammars",
  "version": "3.1.1",
  "releases": [],
  "developers": [
    "ptmcg.gm+pyparsing@gmail.com"
  ],
  "kwds": "parsing_expression_grammar parsers parsing parser parsestring",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyparsing",
  "homepage": "",
  "release_count": 70,
  "dependency_ids": [
    "pypi_jinja2",
    "pypi_railroad_diagrams"
  ]
}
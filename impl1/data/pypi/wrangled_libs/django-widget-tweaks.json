{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "====================\ndjango-widget-tweaks\n====================\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: jazzband\n\n.. image:: https://img.shields.io/pypi/v/django-widget-tweaks.svg\n   :target: https://pypi.python.org/pypi/django-widget-tweaks\n   :alt: pypi version\n\n.. image:: https://github.com/jazzband/django-widget-tweaks/workflows/test/badge.svg\n   :target: https://github.com/jazzband/django-widget-tweaks/actions\n   :alt: github actions\n\n.. image:: https://codecov.io/gh/jazzband/django-widget-tweaks/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/jazzband/django-widget-tweaks\n   :alt: coverage\n\ntweak the form field rendering in templates, not in python-level\nform definitions. altering css classes and html attributes is supported.\n\nthat should be enough for designers to customize field presentation (using\ncss and unobtrusive javascript) without touching python code.\n\nlicense is mit.\n\ninstallation\n============\n\nyou can get django widget tweaks by using pip::\n\n    $ pip install django-widget-tweaks\n\nto enable `widget_tweaks` in your project you need to add it to `installed_apps` in your projects\n`settings.py` file:\n\n.. code-block:: python\n\n    installed_apps += [\n        'widget_tweaks',\n    ]\n\nusage\n=====\n\nthis app provides two sets of tools that may be used together or standalone:\n\n1. a ``render_field`` template tag for customizing form fields by using an\n   html-like syntax.\n2. several template filters for customizing form field html attributes and css\n   classes\n\nthe ``render_field`` tag should be easier to use and should make form field\ncustomizations much easier for designers and front-end developers.\n\nthe template filters are more powerful than the ``render_field`` tag, but they\nuse a more complex and less html-like syntax.\n\nrender_field\n------------\n\nthis is a template tag that can be used as an alternative to aforementioned\nfilters.  this template tag renders a field using a syntax similar to plain\nhtml attributes.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to html5) -->\n    {% render_field form.search_query type=\"search\" %}\n\n    <!-- add/change several attributes -->\n    {% render_field form.text rows=\"20\" cols=\"20\" title=\"hello, world!\" %}\n\n    <!-- append to an attribute -->\n    {% render_field form.title class+=\"css_class_1 css_class_2\" %}\n\n    <!-- template variables can be used as attribute values -->\n    {% render_field form.text placeholder=form.text.label %}\n\n    <!-- double colon -->\n    {% render_field form.search_query v-bind::class=\"{active:isactive}\" %}\n\n\nfor fields rendered with ``{% render_field %}`` tag it is possible\nto set error class and required fields class by using\n``widget_error_class`` and  ``widget_required_class`` template variables:\n\n.. code-block:: html+django\n\n    {% with widget_error_class='my_error' widget_required_class='my_required' %}\n        {% render_field form.field1 %}\n        {% render_field form.field2 %}\n        {% render_field form.field3 %}\n    {% endwith %}\n\nyou can be creative with these variables: e.g. a context processor could\nset a default css error class on all fields rendered by\n``{% render_field %}``.\n\n\nattr\n----\nadds or replaces any single html attribute for the form field.\n\nexamples:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- change input type (e.g. to html5) -->\n    {{ form.search_query|attr:\"type:search\" }}\n\n    <!-- add/change several attributes -->\n    {{ form.text|attr:\"rows:20\"|attr:\"cols:20\"|attr:\"title:hello, world!\" }}\n\n    <!-- attributes without parameters -->\n    {{ form.search_query|attr:\"autofocus\" }}\n\n\n    <!-- attributes with double colon vuejs output: v-bind:class=\"{active:valueenabled}\" -->\n    {{ form.search_query|attr:\"v-bind::class:{active:valueenabled}\" }}\n\n\nadd_class\n---------\n\nadds css class to field element. split classes by whitespace in order to add\nseveral classes at once.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|add_class:\"css_class_1 css_class_2\" }}\n\nset_data\n--------\n\nsets html5 data attribute ( http://ejohn.org/blog/html-5-data-attributes/ ).\nuseful for unobtrusive javascript. it is just a shortcut for 'attr' filter\nthat prepends attribute names with 'data-' string.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- data-filters:\"overtext\" will be added to input field -->\n    {{ form.title|set_data:\"filters:overtext\" }}\n\nappend_attr\n-----------\n\nappends attribute value with extra data.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field element -->\n    {{ form.title|append_attr:\"class:css_class_1 css_class_2\" }}\n\n'add_class' filter is just a shortcut for 'append_attr' filter that\nadds values to the 'class' attribute.\n\n\nremove_attr\n-----------\nremoves any single html attribute for the form field.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- removes autofocus attribute from field element -->\n    {{ form.title|remove_attr:\"autofocus\" }}\n\n\nadd_label_class\n---------------\n\nthe same as `add_class` but adds css class to form labels.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add 2 extra css classes to field label element -->\n    {{ form.title|add_label_class:\"label_class_1 label_class_2\" }}\n\n\nadd_error_class\n---------------\n\nthe same as 'add_class' but adds css class only if validation failed for\nthe field (field.errors is not empty).\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add 'error-border' css class on field error -->\n    {{ form.title|add_error_class:\"error-border\" }}\n\n\nadd_error_attr\n--------------\n\nthe same as 'attr' but sets an attribute only if validation failed for\nthe field (field.errors is not empty). this can be useful when dealing\nwith accessibility:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add aria-invalid=\"true\" attribute on field error -->\n    {{ form.title|add_error_attr:\"aria-invalid:true\" }}\n\nadd_required_class\n------------------\n\nthe same as 'add_error_class' adds css class only for required field.\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <!-- add 'is-required' css class on field required -->\n    {{ form.title|add_required_class:\"is-required\" }}\n\n\nfield_type and widget_type\n--------------------------\n\n``'field_type'`` and ``'widget_type'`` are template filters that return\nfield class name and field widget class name (in lower case).\n\nexample:\n\n.. code-block:: html+django\n\n    {% load widget_tweaks %}\n\n    <div class=\"field {{ field|field_type }} {{ field|widget_type }} {{ field.html_name }}\">\n        {{ field }}\n    </div>\n\noutput:\n\n.. code-block:: html+django\n\n    <div class=\"field charfield textinput name\">\n        <input id=\"id_name\" type=\"text\" name=\"name\" maxlength=\"100\" />\n    </div>\n\n\nmixing render_field and filters\n===============================\n\nthe render_field tag and filters mentioned above can be mixed.\n\nexample:\n\n.. code-block:: html+django\n\n    {% render_field form.category|append_attr:\"readonly:readonly\" type=\"text\" placeholder=\"category\" %}\n\n\nreturns:\n\n.. code-block:: html+django\n\n    <input name=\"category\" placeholder=\"profession\" readonly=\"readonly\" type=\"text\">\n\n\nfilter chaining\n===============\n\nthe order django-widget-tweaks filters apply may seem counter-intuitive\n(leftmost filter wins):\n\n.. code-block:: html+django\n\n    {{ form.simple|attr:\"foo:bar\"|attr:\"foo:baz\" }}\n\nreturns:\n\n.. code-block:: html+django\n\n    <input foo=\"bar\" type=\"text\" name=\"simple\" id=\"id_simple\" />\n\nit is not a bug, it is a feature that enables creating reusable templates\nwith overridable defaults.\n\nreusable field template example:\n\n.. code-block:: html+django\n\n    {# inc/field.html #}\n    {% load widget_tweaks %}\n    <div>{{ field|attr:\"foo:default_foo\" }}</div>\n\nexample usage:\n\n.. code-block:: html+django\n\n    {# my_template.html #}\n    {% load widget_tweaks %}\n    <form method='post' action=''> {% csrf_token %}\n        {% include \"inc/field.html\" with field=form.title %}\n        {% include \"inc/field.html\" with field=form.description|attr:\"foo:non_default_foo\" %}\n    </form>\n\nwith 'rightmost filter wins' rule it wouldn't be possible to override\n``|attr:\"foo:default_foo\"`` in main template.\n\ncontributing\n============\n\nif you've found a bug, implemented a feature or have a suggestion,\ndo not hesitate to contact me, fire an issue or send a pull request.\n\n* source code: https://github.com/jazzband/django-widget-tweaks/\n* bug tracker: https://github.com/jazzband/django-widget-tweaks/issues\n\ntesting\n-------\n\nmake sure you have `tox <http://tox.testrun.org/>`_ installed, then type\n\n::\n\n    tox\n\nfrom the source checkout.\n\nnot supported\n=============\n\nmultiwidgets: splitdatetimewidget, splithiddendatetimewidget\n\n\nchanges\n=======\n\n\n1.5.0 (2023-08-25)\n------------------\n\n* add django 4.2 support.\n* add django 4.1 support.\n* drop django 4.0 support.\n* drop django 2.2 support.\n* add python 3.11 support.\n* drop python 3.7 support.\n\n\n1.4.12 (2022-01-13)\n-------------------\n\n* set minimum required python version to 3.7.\n* add better documentation syntax highlighting.\n* adjust build settings and stop building deprecated universal python 2 wheels.\n\n\n1.4.11 (2022-01-08)\n-------------------\n\n* add support for django 4.0\n* drop support for django 3.0 and 3.1\n* add support for python 3.10\n* drop support for python 3.6\n\n\n1.4.9 (2021-09-02)\n------------------\n\n* add support for django 3.2\n* move to github actions.\n* drop support for django 1.11.\n* add support for python 3.9.\n\n\n1.4.8 (2020-03-12)\n------------------\n\n* fix release version\n\n\n1.4.7 (2020-03-10)\n------------------\n\n* fix travis deployment to jazzband site\n\n\n1.4.6 (2020-03-09)\n------------------\n\n* feature remove attribute from field\n* added documentation for remove_attr feature\n* reformat code with black for pep8 compatibility \n* more consistent tox configuration\n* adding a new templatetag, unittest and documentation\n* deprecate python 2.7 support\n* use automatic formatting for all files\n\n\n1.4.5 (2019-06-08)\n------------------\n\n* fix rst formatting errors.\n\n\n1.4.4 (2019-06-05)\n------------------\n\n* add support for type attr.\n* add python 3.7 and drop python 3.3 support.\n* add support for double colon syntax.\n\n\n1.4.3 (2018-09-6)\n------------------\n\n* added add_label_class filter for css on form labels\n* removed compatibility code for unsupported django versions\n* fixed support for non-value attributes in django < 1.8\n* support non-value attributes in html5 by setting their value to true\n\n\n1.4.2 (2018-03-19)\n------------------\n\n* update readme to make installation more clear\n* shallow copy field before updating attributes\n* drop python 2.6 and python 3.2 support\n* always cast the result of render to a string\n* fix import for django >= 2.0\n* moved to jazzband\n\n\n1.4.1 (2015-06-29)\n------------------\n\n* fixed a regression in django-widget-tweaks v1.4\n  (the field is no longer deep copied).\n\n1.4 (2015-06-27)\n----------------\n\n* django 1.7, 1.8 and 1.9 support;\n* setup.py is switched to setuptools;\n* testing improvements;\n* python 3.4 support is added;\n* python 2.5 is not longer supported;\n* bitbucket repository is no longer supported (development is moved to github).\n\n1.3 (2013-04-05)\n----------------\n\n* added support for ``widget_error_class`` and  ``widget_required_class``\n  template variables that affect ``{% render_field %}``.\n\n1.2 (2013-03-23)\n----------------\n\n* new ``add_error_attr`` template filter;\n* testing improvements.\n\n1.1.2 (2012-06-06)\n------------------\n\n* support for template variables is added to ``render_field`` tag;\n* new ``field_type`` and ``widget_type`` filters.\n\n1.1.1 (2012-03-22)\n------------------\n\n* some issues with ``render_field`` tag are fixed.\n\n1.1 (2012-03-22)\n----------------\n\n* ``render_field`` template tag.\n\n1.0 (2012-02-06)\n----------------\n\n* filters return empty strings instead of raising exceptions if field is missing;\n* test running improvements;\n* python 3 support;\n* undocumented 'behave' filter is removed.\n\n0.3 (2011-03-04)\n----------------\n\n* ``add_error_class`` filter.\n\n0.2.1 (2011-02-03)\n------------------\n\n* attributes customized in widgets are preserved;\n* no more extra whitespaces;\n* tests;\n\n0.1 (2011-01-12)\n----------------\n\ninitial release.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "django-widget-tweaks",
  "package_url": "https://pypi.org/project/django-widget-tweaks/",
  "project_url": "https://pypi.org/project/django-widget-tweaks/",
  "project_urls": {
    "Homepage": "https://github.com/jazzband/django-widget-tweaks"
  },
  "release_url": "https://pypi.org/project/django-widget-tweaks/1.5.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "tweak the form field rendering in templates, not in python-level form definitions.",
  "version": "1.5.0",
  "releases": [],
  "developers": [
    "kmike84@gmail.com",
    "mikhail_korobov"
  ],
  "kwds": "widget_tweaks widget widgets django tweaks",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_django_widget_tweaks",
  "homepage": "https://github.com/jazzband/django-widget-tweaks",
  "release_count": 22,
  "dependency_ids": []
}
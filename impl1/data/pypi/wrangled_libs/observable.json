{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# observable\n[![build status](https://travis-ci.com/timofurrer/observable.svg?branch=master)](https://travis-ci.com/timofurrer/observable)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n**pyobservable** is a minimalist event system for python. it provides you an easy-to-use interface to trigger arbitrary functions when specific events occur.\n\n```python\nfrom observable import observable\n\nobs = observable()\n\n@obs.on(\"error\")\ndef error_handler(message):\n    # do some fancy error handling\n    logging.error(f\"an error occured: {message}\")\n\n...\n\ndef do_time_travel():\n    # do some time traveling\n    ...\n    if year != 1291:\n        obs.trigger(\"error\", \"time travel to 1291 didn't work\")\n```\n\n**note:** we are python 3 only! only python versions >= 3.5 are supported. use [v0.3.2](https://pypi.org/project/observable/0.3.2/) for older python versions.\n\n## how to use\n\nuse a `pip` to install it from pypi:\n\n    pip install observable\n\nafter completion you can start using `observable`:\n\n```python\nfrom observable import observable\n\nobs = observable()\n```\n\n## usage\n\n### `on`: register event handler with `on`\nthere are two ways to register a function to an event.<br />\nthe first way is to register the event with a decorator like this:\n\n```python\n@obs.on(\"error\")\ndef error_func(message):\n    print(\"error: %s\" % message)\n```\n\nthe second way is to register it with a method call:\n\n```python\ndef error_func(message):\n    print(\"error: %s\" % message)\nobs.on(\"error\", error_func)\n```\n\n### `once`: register event handler with `once`\n`once` works like `on`, but once the event handler is triggered it will be removed and cannot be triggered again.\n\n### `trigger`: trigger event\nyou can trigger a registered event with the `trigger` method:\n\n```python\nobs.trigger(\"error\", \"this is my error message\")\n```\n\nif no handler for the event `error` could be found an `observable.nohandlerfound`-exception will be raised.\n\n### `off`: remove handler and events\nremove a handler from a specified event:\n\n```python\nobs.off(\"error\", error_func)\n```\n\n```python\nobs.off(\"error\", [error_func, second_error_func])\n```\n\nremove all handlers from a specified event:\n\n```python\nobs.off(\"error\")\n```\n\nclear all events:\n\n```python\nobs.off()\n```\n\n### `get_all_handlers`, `get_handlers` and `is_registered`: check which handlers are registered\nimagine you registered the following handlers:\n\n```python\n@obs.on(\"success\")\ndef success_func():\n    print(\"success!\")\n\n@obs.on(\"error\")\ndef error_func(message):\n    print(\"error: %s\" % message)\n```\n\nthen you can do the following to inspect the registered handlers:\n```python\n>>> obs.get_all_handlers()\n{'success': [<function success_func at 0x7f7f32d0a1e0>], 'error': [<function error_func at 0x7f7f32d0a268>]}\n>>> obs.get_handlers(\"success\")\n[<function success_func at 0x7f7f32d0a1e0>]\n>>> obs.get_handlers(\"other_event\")\n[]\n```\n\n***\n\n*<p align=\"center\">this project is published under [mit](license).<br>a [timo furrer](https://tuxtimo.me) project.<br>- :tada: -</p>*\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "observable",
  "package_url": "https://pypi.org/project/observable/",
  "project_url": "https://pypi.org/project/observable/",
  "project_urls": {
    "Homepage": "https://github.com/timofurrer/observable"
  },
  "release_url": "https://pypi.org/project/observable/1.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "minimalist event system",
  "version": "1.0.3",
  "releases": [],
  "developers": [
    "timo_furrer",
    "tuxtimo@gmail.com"
  ],
  "kwds": "pyobservable other_event error_handler event events",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_observable",
  "homepage": "https://github.com/timofurrer/observable",
  "release_count": 9,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# dashvector client python library\n\ndashvector is a scalable and fully-managed vector-database service for building various machine learning applications. the dashvector client sdk is your gateway to access the dashvector service.\n\nfor more information about dashvector, please visit: https://help.aliyun.com/document_detail/2510225.html\n\n## installation\nto install the dashvector client python sdk, simply run:\n```shell\npip install dashvector\n```\n\n## quickstart\n\n```python\nimport numpy as np\nimport dashvector\n\n# use dashvector `client` api to communicate with the backend vectordb service.\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\n# create a collection named \"quickstart\" with dimension of 4, using the default cosine distance metric\nrsp = client.create(name='quickstart', dimension=4)\nassert rsp\n\n# get a collection by name\ncollection = client.get(name='quickstart')\n\n# operations on 'collection' includes inert/query/upsert/update/delete/fetch of docs\n# here we insert sample data (4-dimensional vectors) in batches of 16\ncollection.insert(\n    [\n        dashvector.doc(id=str(i), vector=np.random.rand(4), fields={'anykey': 'anyvalue'}) \n        for i in range(16)\n    ]\n)\n\n# query a vector from the collection\ndocs = collection.query([0.1, 0.2, 0.3, 0.4], topk=5)\nprint(docs)\n\n# get statistics about collection\nstats = collection.stats()\nprint(stats)\n\n# delete a collection by name\nclient.delete(name='quickstart')\n```\n\n## reference\n\n### create a client\n`client` host various apis for interacting with dashvector `collection`.\n\n```python\ndashvector.client(\n    api_key: str,\n    endpoint: str = 'dashvector.cn-hangzhou.aliyuncs.com',\n    protocal: dashvector.dashvectorprotocol = dashvector.dashvectorprotocol.grpc, \n    timeout: float = 10.0\n) -> client\n```\n\n| parameters | type               | required | description                                                                                  |\n|------------|--------------------|----------|----------------------------------------------------------------------------------------------|\n| api_key    | str                | yes      | your dashvector api-key                                                                      |\n| endpoint   | str                | no       | service endpoint. <br/>default value: `dashvector.cn-hangzhou.aliyuncs.com`                  |\n| protocol   | dashvectorprotocol | no       | communication protocol, support http and grpc. <br/>default value: `dashvectorprotocol.grpc` |\n| timeout    | float              | no       | timeout period (in seconds), -1 means no timeout. <br/>default value: `10.0`                 |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nassert client\n```\n\n### create collection\n```python\nclient.create(\n    name: str,\n    dimension: int,\n    dtype: union[type[int], type[float]] = float,\n    fields_schema: optional[dict[str, union[type[str], type[int], type[float], type[bool]]]] = none,\n    metric: str = 'cosine',\n    timeout: optional[int] = none\n) -> dashvectorresponse\n```\n\n| parameters     | type                                                                       | required | description                                                                                                      |\n|----------------|----------------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------|\n| name           | str                                                                        | yes      | the name of the collection to create.                                                                            |\n| dimension      | int                                                                        | yes      | the dimensions of the collection's vectors. valid values:  1-20,000                                              |\n| dtype          | union[type[int], type[float]]                                              | no       | the date type of the collection's vectors.<br/>default value: `type[float]`                                      |\n| fields_schema  | optional[dict[str, union[type[str], type[int], type[float], type[bool]]]]  | no       | fields schema of the collection.<br/>default value: `none`<br/>e.g. `{\"name\": str, \"age\": int}`                  |\n| metric         | str                                                                        | no       | vector similarity metric. for `cosine`, dtype must be `float`.<br/>valid values:<br/> 1. (default)`cosine`<br/>2. `dotproduct`<br/>3. `euclidean`    |\n| timeout        | optional[int]                                                              | no       | timeout period (in seconds), -1 means asynchronous creation collection.<br/>default value: `none`                |\n\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\nrsp = client.create('your-collection-name', dimension=4)\nassert rsp\n```\n\n### list collections\n`client.list() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\ncollections = client.list()\n\nfor collection in collections:\n    print(collection)\n# outputs:\n# 'quickstart'\n```\n\n### describe collection\n`client.describe(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                             |\n|------------|-------|----------|-----------------------------------------|\n| name       | str   | yes      | the name of the collection to describe. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nrsp = client.describe('your-collection-name')\n\nprint(rsp)\n# example output:\n# {\n#   \"request_id\": \"8d3ac14e-5382-4736-b77c-4318761ddfab\",\n#   \"code\": 0,\n#   \"message\": \"\",\n#   \"output\": {\n#     \"name\": \"quickstart\",\n#     \"dimension\": 4,\n#     \"dtype\": \"float\",\n#     \"metric\": \"dotproduct\",\n#     \"fields_schema\": {\n#       \"name\": \"string\",\n#       \"age\": \"int\",\n#       \"height\": \"float\"\n#     },\n#     \"status\": \"serving\",\n#     \"partitions\": {\n#       \"default\": \"serving\"\n#     }\n#   }\n# }\n```\n\n### delete collection\n`client.delete(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                           |\n|------------|-------|----------|---------------------------------------|\n| name       | str   | yes      | the name of the collection to delete. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nclient.delete('your-collection-name')\n```\n\n### get a collection instance\n`collection` provides apis for accessing `doc` and `partition`\n\n`client.get(name: str) -> collection`\n\n| parameters | type  | required | description                        |\n|------------|-------|----------|------------------------------------|\n| name       | str   | yes      | the name of the collection to get. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nassert collection\n```\n\n### describe collection statistics\n`collection.stats() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.stats()\n\nprint(rsp)\n# example output:\n# {\n#   \"request_id\": \"14448bcb-c9a3-49a8-9152-0de3990bce59\",\n#   \"code\": 0,\n#   \"message\": \"success\",\n#   \"output\": {\n#     \"total_doc_count\": \"26\",\n#     \"index_completeness\": 1.0,\n#     \"partitions\": {\n#       \"default\": {\n#         \"total_doc_count\": \"26\"\n#       }\n#     }\n#   }\n# }\n```\n\n### insert/update/upsert docs\n```python\ncollection.insert(\n    docs: union[doc, list[doc], tuple, list[tuple]],\n    partition: optional[str] = none,\n    async_req: false\n) -> dashvectorresponse\n```\n\n| parameters | type                                      | required | description                                                            |\n|------------|-------------------------------------------|----------|------------------------------------------------------------------------|\n| docs       | union[doc, list[doc], tuple, list[tuple]] | yes      | the docs to insert/update/upsert.                                      |\n| partition  | optional[str]                             | no       | name of the partition to insert/update/upsert.<br/>default value: `none` |\n| async_req  | bool                                      | no       | enable async request or not.<br/>default value: `false`                  |\n\nexample:\n```python\nimport dashvector\nimport numpy as np\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\n# insert a doc with tuple\ncollection.insert(('your-doc-id1', [0.1, 0.2, 0.3, 0.4]))\ncollection.insert(('your-doc-id2', [0.2, 0.3, 0.4, 0.5], {'age': 30, 'name': 'alice', 'anykey': 'anyvalue'}))\n\n# insert a doc with dashvector.doc\ncollection.insert(\n    dashvector.doc(\n        id='your-doc-id3', \n        vector=[0.3, 0.4, 0.5, 0.6], \n        fields={'foo': 'bar'}\n    )\n)\n\n# insert in batches\nret = collection.insert(\n    [\n        ('your-doc-id4', [0.2, 0.7, 0.8, 1.3], {'age': 1}),\n        ('your-doc-id4', [0.3, 0.6, 0.9, 1.2], {'age': 2}),\n        ('your-doc-id6', [0.4, 0.5, 1.0, 1.1], {'age': 3})\n    ]\n)\n\n# insert in batches\nret = collection.insert(\n    [\n        dashvector.doc(id=str(i), vector=np.random.rand(4)) for i in range(10)\n    ]\n)\n\n# async insert\nret_funture = collection.insert(\n    [\n        dashvector.doc(id=str(i+10), vector=np.random.rand(4)) for i in range(10)\n    ],\n    async_req=true\n)\nret = ret_funture.get()\n```\n\n### query a collection\n```python\ncollection.query(\n    vector: optional[union[list[union[int, float]], np.ndarray]] = none,\n    id: optional[str] = none,\n    topk: int = 10,\n    filter: optional[str] = none,\n    include_vector: bool = false,\n    partition: optional[str] = none,\n    output_fields: optional[list[str]] = none,\n    async_req: false\n) -> dashvectorresponse\n```\n\n| parameters      | type                                                 | required | description                                                                                                  |\n|-----------------|------------------------------------------------------|----------|--------------------------------------------------------------------------------------------------------------|\n| vector          | optional[union[list[union[int, float]], np.ndarray]] | no       | the vector to query                                                                                          |\n| id              | optional[str]                                        | no       | the doc id to query.<br/>setting `id` means searching by vector corresponding to the id                      |\n| topk            | optional[str]                                        | no       | number of similarity results to return.<br/>default value: `10`                                              |\n| filter          | optional[str]                                        | no       | expression used to filter results <br/>default value: none <br/>e.g. `age>20`                                |\n| include_vector  | bool                                                 | no       | return vector details or not.<br/>default value: `false`                                                     |\n| partition       | optional[str]                                        | no       | name of the partition to query.<br/>default value: `none`                                                    |\n| output_fields   | optional[list[str]]                                  | no       | list of field names to return.<br/>default value: `none`, means return all fields<br/>e.g. `['name', 'age']` |\n| async_req       | bool                                                 | no       | enable async request or not.<br/>default value: `false`                                                      |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nmatch_docs = collection.query([0.1, 0.2, 0.3, 0.4], topk=100, filter='age>20', include_vector=true, output_fields=['age','name','foo'])\nif match_docs:\n    for doc in match_docs:\n        print(doc.id)\n        print(doc.vector)\n        print(doc.fields)\n        print(doc.score)\n```\n\n### delete docs\n```python\ncollection.delete(\n    ids: union[str, list[str]],\n    delete_all: bool = false,\n    partition: optional[str] = none,\n    async_req: bool = false\n) -> dashvectorresponse\n```\n\n| parameters | type                  | required | description                                                     |\n|------------|-----------------------|----------|-----------------------------------------------------------------|\n| ids        | union[str, list[str]] | yes      | the id (or list of ids) for the doc(s) to delete                |\n| delete_all | bool                  | no       | delete all vectors from partition.<br/>default value: `false`    |\n| partition  | optional[str]         | no       | name of the partition to delete from.<br/>default value: `none` |\n| async_req  | bool                  | no       | enable async request or not.<br/>default value: `false`         |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\ncollection.delete(['your-doc-id1','your-doc-id2'])\n```\n\n### fetch docs\n```python\ncollection.fetch(\n    ids: union[str, list[str]],\n    partition: optional[str] = none,\n    async_req: bool = false\n) -> dashvectorresponse\n```\n\n| parameters | type                  | required | description                                                    |\n|------------|-----------------------|----------|----------------------------------------------------------------|\n| ids        | union[str, list[str]] | yes      | the id (or list of ids) for the doc(s) to fetch                |\n| partition  | optional[str]         | no       | name of the partition to fetch from.<br/>default value: `none` |\n| async_req  | bool                  | no       | enable async request or not.<br/>default value: `false`        |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nfetch_docs = collection.fetch(['your-doc-id1', 'your-doc-id2'])\nif fetch_docs:\n    for doc_id in fetch_docs:\n        doc = fetch_docs[doc_id]\n        print(doc.id)\n        print(doc.vector)\n        print(doc.fields)\n```\n\n### create collection partition\n`collection.create_partition(name: str) -> dashvectorresponse`\n\n| parameters | type           | required | description                                                                                           |\n|------------|----------------|----------|-------------------------------------------------------------------------------------------------------|\n| name       | str            | yes      | the name of the partition to create.                                                                  |\n| timeout    | optional[int]  | no       | timeout period (in seconds), -1 means asynchronous creation partition.<br/>default value: `none`      |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.create_partition('your-partition-name')\nassert rsp\n```\n\n### delete collection partition\n`collection.delete_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                          |\n|------------|-------|----------|--------------------------------------|\n| name       | str   | yes      | the name of the partition to delete. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.delete_partition('your-partition-name')\nassert rsp\n```\n\n### list collection partitions\n`collection.list_partitions() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\npartitions = collection.list_partitions()\n\nassert partitions\nfor pt in partitions:\n    print(pt)\n```\n\n### describe collection partition\n`collection.describe_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                            |\n|------------|-------|----------|----------------------------------------|\n| name       | str   | yes      | the name of the partition to describe. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\nrsp = collection.describe_partition('shoes')\nprint(rsp)\n# example output:\n# {\"request_id\":\"296267a7-68e2-483a-87e6-5992d85a5806\",\"code\":0,\"message\":\"\",\"output\":\"serving\"}\n```\n\n### statistics for collection partition\n`collection.stats_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                                  |\n|------------|-------|----------|----------------------------------------------|\n| name       | str   | yes      | the name of the partition to get statistics. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\nrsp = collection.stats_partition('shoes')\nprint(rsp)\n# example outptut:\n# {\n#     \"code\":0,\n#     \"message\":\"\",\n#     \"requests_id\":\"330a2bcb-e4a7-4fc6-a711-2fe5f8a24e8c\",\n#     \"output\":{\n#         \"total_doc_count\":0\n#     }\n# }\n```\n\n\n## class\n### dashvector.doc\n```python\n@dataclass(frozen=true)\nclass doc(object):\n    id: str\n    vector: union[list[int], list[float], numpy.ndarray]\n    fields: optional[dict[str, union[type[str], type[int], type[float], type[bool]]]] = none \n    score: float = 0.0\n```\n\n### dashvector.dashvectorresponse\n\n```python\nclass dashvectorresponse(object):\n    code: dashvectorcode\n    message: str\n    request_id: str\n    output: any\n```\n\n## license\nthis project is licensed under the apache license (version 2.0).",
  "docs_url": null,
  "keywords": "dashvector,vector,database,cloud",
  "license": "apache-2.0",
  "name": "dashvector",
  "package_url": "https://pypi.org/project/dashvector/",
  "project_url": "https://pypi.org/project/dashvector/",
  "project_urls": {
    "Documentation": "https://help.aliyun.com/document_detail/2510225.html",
    "Homepage": "https://github.com/alibaba/proxima"
  },
  "release_url": "https://pypi.org/project/dashvector/1.0.9/",
  "requires_dist": [
    "aiohttp (>=3.1.0,<4.0.0)",
    "numpy",
    "protobuf (>=3.8.0,<4.0.0)",
    "grpcio (<=1.56.0) ; sys_platform == \"win32\"",
    "grpcio (>=1.22.0) ; python_version < \"3.11\"",
    "grpcio (>=1.49.1) ; python_version >= \"3.11\"",
    "certifi (>=2023.7.22,<2024.0.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "dashvector client python sdk library",
  "version": "1.0.9",
  "releases": [],
  "developers": [
    "alibaba"
  ],
  "kwds": "dashvector dashvectorcode dashvectorprotocol dashvectorresponse vectordb",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_dashvector",
  "homepage": "https://github.com/alibaba/proxima",
  "release_count": 9,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_certifi",
    "pypi_grpcio",
    "pypi_numpy",
    "pypi_protobuf"
  ]
}
{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "natural language :: english",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "======\nndjson\n======\n\nsupport for ndjson. plain and simple.\n\n.. image:: https://img.shields.io/pypi/v/ndjson.svg\n        :target: https://pypi.python.org/pypi/ndjson\n\n.. image:: https://img.shields.io/travis/rhgrant10/ndjson.svg\n        :target: https://travis-ci.org/rhgrant10/ndjson\n\n.. image:: https://img.shields.io/pypi/pyversions/ndjson\n    :target: https://pypi.python.org/pypi/ndjson\n\n.. image:: https://img.shields.io/pypi/l/ndjson\n    :target: https://pypi.python.org/pypi/ndjson\n\n\nfeatures\n--------\n\n* familiar interface\n* very small\n* no dependencies\n* works as advertised\n* has tests\n\n\nusage\n-----\n\n``ndjson`` exposes the same api as the builtin ``json`` and ``pickle`` packages.\n\n.. code-block:: python\n\n    import ndjson\n\n    # load from file-like objects\n    with open('data.ndjson') as f:\n        data = ndjson.load(f)\n\n    # convert to and from objects\n    text = ndjson.dumps(data)\n    data = ndjson.loads(text)\n\n    # dump to file-like objects\n    with open('backup.ndjson', 'w') as f:\n        ndjson.dump(items, f)\n\n\nit contains ``jsonencoder`` and ``jsondecoder`` classes for easy\nuse with other libraries, such as ``requests``:\n\n.. code-block:: python\n\n    import ndjson\n    import requests\n\n    response = requests.get('https://example.com/api/data')\n    items = response.json(cls=ndjson.decoder)\n\nthe library also packs ``reader`` and ``writer`` classes very similar to standard csv ones:\n\n.. code-block:: python\n\n    import ndjson\n\n    # streaming lines from ndjson file:\n    with open('./posts.ndjson') as f:\n        reader = ndjson.reader(f)\n\n        for post in reader:\n            print(post)\n\n    # writing items to a ndjson file\n    with open('./posts.ndjson', 'w') as f:\n        writer = ndjson.writer(f, ensure_ascii=false)\n\n        for post in posts:\n            writer.writerow(post)\n\n\ncredits\n-------\n\nthis package was created with cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nhistory\n=======\n\n0.3.1 (2020-02-24)\n------------------\n\n* fix a small spelling mistake\n\n0.3.0 (2020-02-24)\n------------------\n\n* add ``ndjson.writer``\n* add ``ndjson.reader``\n\n0.2.0 (2019-08-01)\n------------------\n\n* add 3.7 support\n* remove 3.4 support\n\n0.1.0 (2018-05-17)\n------------------\n\n* first release on pypi.\n\n\n",
  "docs_url": null,
  "keywords": "ndjson",
  "license": "gnu general public license v3",
  "name": "ndjson",
  "package_url": "https://pypi.org/project/ndjson/",
  "project_url": "https://pypi.org/project/ndjson/",
  "project_urls": {
    "Homepage": "https://github.com/rhgrant10/ndjson"
  },
  "release_url": "https://pypi.org/project/ndjson/0.3.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "jsondecoder for ndjson",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "rhgrant10@gmail.com",
    "robert_grant"
  ],
  "kwds": "ndjson shields pyversions jsonencoder svg",
  "license_kwds": "gnu general public license v3",
  "libtype": "pypi",
  "id": "pypi_ndjson",
  "homepage": "https://github.com/rhgrant10/ndjson",
  "release_count": 4,
  "dependency_ids": []
}
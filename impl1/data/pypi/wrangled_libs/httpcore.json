{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "framework :: asyncio",
    "framework :: trio",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "# http core\n\n[![test suite](https://github.com/encode/httpcore/workflows/test%20suite/badge.svg)](https://github.com/encode/httpcore/actions)\n[![package version](https://badge.fury.io/py/httpcore.svg)](https://pypi.org/project/httpcore/)\n\n> *do one thing, and do it well.*\n\nthe http core package provides a minimal low-level http client, which does\none thing only. sending http requests.\n\nit does not provide any high level model abstractions over the api,\ndoes not handle redirects, multipart uploads, building authentication headers,\ntransparent http caching, url parsing, session cookie handling,\ncontent or charset decoding, handling json, environment based configuration\ndefaults, or any of that jazz.\n\nsome things http core does do:\n\n* sending http requests.\n* thread-safe / task-safe connection pooling.\n* http(s) proxy & socks proxy support.\n* supports http/1.1 and http/2.\n* provides both sync and async interfaces.\n* async backend support for `asyncio` and `trio`.\n\n## requirements\n\npython 3.8+\n\n## installation\n\nfor http/1.1 only support, install with:\n\n```shell\n$ pip install httpcore\n```\n\nthere are also a number of optional extras available...\n\n```shell\n$ pip install httpcore['asyncio,trio,http2,socks']\n```\n\n# sending requests\n\nsend an http request:\n\n```python\nimport httpcore\n\nresponse = httpcore.request(\"get\", \"https://www.example.com/\")\n\nprint(response)\n# <response [200]>\nprint(response.status)\n# 200\nprint(response.headers)\n# [(b'accept-ranges', b'bytes'), (b'age', b'557328'), (b'cache-control', b'max-age=604800'), ...]\nprint(response.content)\n# b'<!doctype html>\\n<html>\\n<head>\\n<title>example domain</title>\\n\\n<meta charset=\"utf-8\"/>\\n ...'\n```\n\nthe top-level `httpcore.request()` function is provided for convenience. in practice whenever you're working with `httpcore` you'll want to use the connection pooling functionality that it provides.\n\n```python\nimport httpcore\n\nhttp = httpcore.connectionpool()\nresponse = http.request(\"get\", \"https://www.example.com/\")\n```\n\nonce you're ready to get going, [head over to the documentation](https://www.encode.io/httpcore/).\n\n## motivation\n\nyou *probably* don't want to be using http core directly. it might make sense if\nyou're writing something like a proxy service in python, and you just want\nsomething at the lowest possible level, but more typically you'll want to use\na higher level client library, such as `httpx`.\n\nthe motivation for `httpcore` is:\n\n* to provide a reusable low-level client library, that other packages can then build on top of.\n* to provide a *really clear interface split* between the networking code and client logic,\n  so that each is easier to understand and reason about in isolation.\n\n## dependencies\n\nthe `httpcore` package has the following dependencies...\n\n* `h11`\n* `certifi`\n\nand the following optional extras...\n\n* `anyio` - required by `pip install httpcore['asyncio']`.\n* `trio` - required by `pip install httpcore['trio']`.\n* `h2` - required by `pip install httpcore['http2']`.\n* `socksio` - required by `pip install httpcore['socks']`.\n\n## versioning\n\nwe use [semver for our versioning policy](https://semver.org/).\n\nfor changes between package versions please see our [project changelog](changelog.md).\n\nwe recommend pinning your requirements either the most current major version, or a more specific version range:\n\n```python\npip install 'httpcore==1.*'\n```\n# changelog\n\nall notable changes to this project will be documented in this file.\n\nthe format is based on [keep a changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 1.0.2 (november 10th, 2023) \n\n- fix `float(\"inf\")` timeouts in `event.wait` function. (#846)\n\n## 1.0.1 (november 3rd, 2023)\n\n- fix pool timeout to account for the total time spent retrying. (#823)\n- raise a neater runtimeerror when the correct async deps are not installed. (#826)\n- add support for synchronous tls-in-tls streams. (#840)\n\n## 1.0.0 (october 6th, 2023)\n\nfrom version 1.0 our async support is now optional, as the package has minimal dependencies by default.\n\nfor async support use either `pip install 'httpcore[asyncio]'` or `pip install 'httpcore[trio]'`.\n\nthe project versioning policy is now explicitly governed by semver. see https://semver.org/.\n\n- async support becomes fully optional. (#809)\n- add support for python 3.12. (#807)\n\n## 0.18.0 (september 8th, 2023)\n\n- add support for https proxies. (#745, #786)\n- drop python 3.7 support. (#727)\n- handle `sni_hostname` extension with socks proxy. (#774)\n- handle http/1.1 half-closed connections gracefully. (#641)\n- change the type of `extensions` from `mapping[str, any]` to `mutablemapping[str, any]`. (#762)\n\n## 0.17.3 (july 5th, 2023)\n\n- support async cancellations, ensuring that the connection pool is left in a clean state when cancellations occur. (#726)\n- the networking backend interface has [been added to the public api](https://www.encode.io/httpcore/network-backends). some classes which were previously private implementation detail are now part of the top-level public api. (#699)\n- graceful handling of http/2 goaway frames, with requests being transparently retried on a new connection. (#730)\n- add exceptions when a synchronous `trace callback` is passed to an asynchronous request or an asynchronous `trace callback` is passed to a synchronous request. (#717)\n- drop python 3.7 support. (#727)\n\n## 0.17.2 (may 23th, 2023)\n\n- add `socket_options` argument to `connectionpool` and `httproxy` classes. (#668)\n- improve logging with per-module logger names. (#690)\n- add `sni_hostname` request extension. (#696)\n- resolve race condition during import of `anyio` package. (#692)\n- enable tcp_nodelay for all synchronous sockets. (#651)\n\n## 0.17.1 (may 17th, 2023)\n\n- if 'retries' is set, then allow retries if an ssl handshake error occurs. (#669)\n- improve correctness of tracebacks on network exceptions, by raising properly chained exceptions. (#678)\n- prevent connection-hanging behaviour when http/2 connections are closed by a server-sent 'goaway' frame. (#679)\n- fix edge-case exception when removing requests from the connection pool. (#680)\n- fix pool timeout edge-case. (#688)\n\n## 0.17.0 (march 16th, 2023)\n\n- add debug level logging. (#648)\n- respect http/2 max concurrent streams when settings updates are sent by server. (#652)\n- increase the allowable http header size to 100kb. (#647)\n- add `retries` option to socks proxy classes. (#643)\n\n## 0.16.3 (december 20th, 2022)\n\n- allow `ws` and `wss` schemes. allows us to properly support websocket upgrade connections. (#625)\n- forwarding http proxies use a connection-per-remote-host. required by some proxy implementations. (#637)\n- don't raise `runtimeerror` when closing a connection pool with active connections. removes some error cases when cancellations are used. (#631)\n- lazy import `anyio`, so that it's no longer a hard dependancy, and isn't imported if unused. (#639)\n\n## 0.16.2 (november 25th, 2022)\n\n- revert 'fix async cancellation behaviour', which introduced race conditions. (#627)\n- raise `runtimeerror` if attempting to us unix domain sockets on windows. (#619)\n\n## 0.16.1 (november 17th, 2022)\n\n- fix http/1.1 interim informational responses, such as \"100 continue\". (#605)\n\n## 0.16.0 (october 11th, 2022)\n\n- support http/1.1 informational responses. (#581)\n- fix async cancellation behaviour. (#580)\n- support `h11` 0.14. (#579)\n\n## 0.15.0 (may 17th, 2022)\n\n- drop python 3.6 support (#535)\n- ensure http proxy connect requests include `timeout` configuration. (#506)\n- switch to explicit `typing.optional` for type hints. (#513)\n- for `trio` map oserror exceptions to `connecterror`. (#543)\n\n## 0.14.7 (february 4th, 2022)\n\n- requests which raise a pooltimeout need to be removed from the pool queue. (#502)\n- fix attributeerror that happened when socks5connection were terminated. (#501)\n\n## 0.14.6 (february 1st, 2022)\n\n- fix socks support for `http://` urls. (#492)\n- resolve race condition around exceptions during streaming a response. (#491)\n\n## 0.14.5 (january 18th, 2022)\n\n- socks proxy support. (#478)\n- add proxy_auth argument to httpproxy. (#481)\n- improve error message on 'remoteprotocolerror' exception when server disconnects without sending a response. (#479)\n\n## 0.14.4 (january 5th, 2022)\n\n- support http/2 on https tunnelling proxies. (#468)\n- fix proxy headers missing on http forwarding. (#456)\n- only instantiate ssl context if required. (#457)\n- more robust http/2 handling. (#253, #439, #440, #441)\n\n## 0.14.3 (november 17th, 2021)\n\n- fix race condition when removing closed connections from the pool. (#437)\n\n## 0.14.2 (november 16th, 2021)\n\n- failed connections no longer remain in the pool. (pull #433)\n\n## 0.14.1 (november 12th, 2021)\n\n- `max_connections` becomes optional. (pull #429)\n- `certifi` is now included in the install dependancies. (pull #428)\n- `h2` is now strictly optional. (pull #428)\n\n## 0.14.0 (november 11th, 2021)\n\nthe 0.14 release is a complete reworking of `httpcore`, comprehensively addressing some underlying issues in the connection pooling, as well as substantially redesigning the api to be more user friendly.\n\nsome of the lower-level api design also makes the components more easily testable in isolation, and the package now has 100% test coverage.\n\nsee [discussion #419](https://github.com/encode/httpcore/discussions/419) for a little more background.\n\nthere's some other neat bits in there too, such as the \"trace\" extension, which gives a hook into inspecting the internal events that occur during the request/response cycle. this extension is needed for the httpx cli, in order to...\n\n* log the point at which the connection is established, and the ip/port on which it is made.\n* determine if the outgoing request should log as http/1.1 or http/2, rather than having to assume it's http/2 if the --http2 flag was passed. (which may not actually be true.)\n* log ssl version info / certificate info.\n\nnote that `curio` support is not currently available in 0.14.0. if you're using `httpcore` with `curio` please get in touch, so we can assess if we ought to prioritize it as a feature or not.\n\n## 0.13.7 (september 13th, 2021)\n\n- fix broken error messaging when url scheme is missing, or a non http(s) scheme is used. (pull #403)\n\n## 0.13.6 (june 15th, 2021)\n\n### fixed\n\n- close sockets when read or write timeouts occur. (pull #365)\n\n## 0.13.5 (june 14th, 2021)\n\n### fixed\n\n- resolved niggles with anyio eof behaviours. (pull #358, #362)\n\n## 0.13.4 (june 9th, 2021)\n\n### added\n\n- improved error messaging when url scheme is missing, or a non http(s) scheme is used. (pull #354)\n\n### fixed\n\n- switched to `anyio` as the default backend implementation when running with `asyncio`. resolves some awkward [tls timeout issues](https://github.com/encode/httpx/discussions/1511).\n\n## 0.13.3 (may 6th, 2021)\n\n### added\n\n- support http/2 prior knowledge, using `httpcore.syncconnectionpool(http1=false)`. (pull #333)\n\n### fixed\n\n- handle cases where environment does not provide `select.poll` support. (pull #331)\n\n## 0.13.2 (april 29th, 2021)\n\n### added\n\n- improve error message for specific case of `remoteprotocolerror` where server disconnects without sending a response. (pull #313)\n\n## 0.13.1 (april 28th, 2021)\n\n### fixed\n\n- more resiliant testing for closed connections. (pull #311)\n- don't raise exceptions on ungraceful connection closes. (pull #310)\n\n## 0.13.0 (april 21st, 2021)\n\nthe 0.13 release updates the core api in order to match the httpx transport api,\nintroduced in httpx 0.18 onwards.\n\nan example of making requests with the new interface is:\n\n```python\nwith httpcore.syncconnectionpool() as http:\n    status_code, headers, stream, extensions = http.handle_request(\n        method=b'get',\n        url=(b'https', b'example.org', 443, b'/'),\n        headers=[(b'host', b'example.org'), (b'user-agent', b'httpcore')]\n        stream=httpcore.bytestream(b''),\n        extensions={}\n    )\n    body = stream.read()\n    print(status_code, body)\n```\n\n### changed\n\n- the `.request()` method is now `handle_request()`. (pull #296)\n- the `.arequest()` method is now `.handle_async_request()`. (pull #296)\n- the `headers` argument is no longer optional. (pull #296)\n- the `stream` argument is no longer optional. (pull #296)\n- the `ext` argument is now named `extensions`, and is no longer optional. (pull #296)\n- the `\"reason\"` extension keyword is now named `\"reason_phrase\"`. (pull #296)\n- the `\"reason_phrase\"` and `\"http_version\"` extensions now use byte strings for their values. (pull #296)\n- the `httpcore.plainbytestream()` class becomes `httpcore.bytestream()`. (pull #296)\n\n### added\n\n- streams now support a `.read()` interface. (pull #296)\n\n### fixed\n\n- task cancellation no longer leaks connections from the connection pool. (pull #305)\n\n## 0.12.3 (december 7th, 2020)\n\n### fixed\n\n- abort ssl connections on close rather than waiting for remote eof when using `asyncio`.  (pull #167)\n- fix exception raised in case of connect timeouts when using the `anyio` backend. (pull #236)\n- fix `host` header precedence for `:authority` in http/2. (pull #241, #243)\n- handle extra edge case when detecting for socket readability when using `asyncio`. (pull #242, #244)\n- fix `asyncio` ssl warning when using proxy tunneling. (pull #249)\n\n## 0.12.2 (november 20th, 2020)\n\n### fixed\n\n- properly wrap connect errors on the asyncio backend. (pull #235)\n- fix `importerror` occurring on python 3.9 when using the http/1.1 sync client in a multithreaded context. (pull #237)\n\n## 0.12.1 (november 7th, 2020)\n\n### added\n\n- add connect retries. (pull #221)\n\n### fixed\n\n- tweak detection of dropped connections, resolving an issue with open files limits on linux. (pull #185)\n- avoid leaking connections when establishing an http tunnel to a proxy has failed. (pull #223)\n- properly wrap os errors when using `trio`. (pull #225)\n\n## 0.12.0 (october 6th, 2020)\n\n### changed\n\n- http header casing is now preserved, rather than always sent in lowercase. (#216 and python-hyper/h11#104)\n\n### added\n\n- add python 3.9 to officially supported versions.\n\n### fixed\n\n- gracefully handle a stdlib asyncio bug when a connection is closed while it is in a paused-for-reading state. (#201)\n\n## 0.11.1 (september 28nd, 2020)\n\n### fixed\n\n- add await to async semaphore release() coroutine (#197)\n- drop incorrect curio classifier (#192)\n\n## 0.11.0 (september 22nd, 2020)\n\nthe transport api with 0.11.0 has a couple of significant changes.\n\nfirstly we've moved changed the request interface in order to allow extensions, which will later enable us to support features\nsuch as trailing headers, http/2 server push, and connect/upgrade connections.\n\nthe interface changes from:\n\n```python\ndef request(method, url, headers, stream, timeout):\n    return (http_version, status_code, reason, headers, stream)\n```\n\nto instead including an optional dictionary of extensions on the request and response:\n\n```python\ndef request(method, url, headers, stream, ext):\n    return (status_code, headers, stream, ext)\n```\n\nhaving an open-ended extensions point will allow us to add later support for various optional features, that wouldn't otherwise be supported without these api changes.\n\nin particular:\n\n* trailing headers support.\n* http/2 server push\n* sendfile.\n* exposing raw connection on connect, upgrade, http/2 bi-di streaming.\n* exposing debug information out of the api, including template name, template context.\n\ncurrently extensions are limited to:\n\n* request: `timeout` - optional. timeout dictionary.\n* response: `http_version` - optional. include the http version used on the response.\n* response: `reason` - optional. include the reason phrase used on the response. only valid with http/1.*.\n\nsee https://github.com/encode/httpx/issues/1274#issuecomment-694884553 for the history behind this.\n\nsecondly, the async version of `request` is now namespaced as `arequest`.\n\nthis allows concrete transports to support both sync and async implementations on the same class.\n\n### added\n\n- add curio support. (pull #168)\n- add anyio support, with `backend=\"anyio\"`. (pull #169)\n\n### changed\n\n- update the transport api to use 'ext' for optional extensions. (pull #190)\n- update the transport api to use `.request` and `.arequest` so implementations can support both sync and async. (pull #189)\n\n## 0.10.2 (august 20th, 2020)\n\n### added\n\n- added unix domain socket support. (pull #139)\n\n### fixed\n\n- always include the port on proxy connect requests. (pull #154)\n- fix `max_keepalive_connections` configuration. (pull #153)\n- fixes behaviour in http/1.1 where server disconnects can be used to signal the end of the response body. (pull #164)\n\n## 0.10.1 (august 7th, 2020)\n\n- include `max_keepalive_connections` on `asynchttpproxy`/`synchttpproxy` classes.\n\n## 0.10.0 (august 7th, 2020)\n\nthe most notable change in the 0.10.0 release is that http/2 support is now fully optional.\n\nuse either `pip install httpcore` for http/1.1 support only, or `pip install httpcore[http2]` for http/1.1 and http/2 support.\n\n### added\n\n- http/2 support becomes optional. (pull #121, #130)\n- add `local_address=...` support. (pull #100, #134)\n- add `plainbytestream`, `iteratorbytestream`, `asynciteratorbytestream`. the `asyncbytesteam` and `syncbytestream` classes are now pure interface classes. (#133)\n- add `localprotocolerror`, `remoteprotocolerror` exceptions. (pull #129)\n- add `unsupportedprotocol` exception. (pull #128)\n- add `.get_connection_info()` method. (pull #102, #137)\n- add better trace logs. (pull #101)\n\n### changed\n\n- `max_keepalive` is deprecated in favour of `max_keepalive_connections`. (pull #140)\n\n### fixed\n\n- improve handling of server disconnects. (pull #112)\n\n## 0.9.1 (may 27th, 2020)\n\n### fixed\n\n- proper host resolution for sync case, including ipv6 support. (pull #97)\n- close outstanding connections when connection pool is closed. (pull #98)\n\n## 0.9.0 (may 21th, 2020)\n\n### changed\n\n- url port becomes an `optional[int]` instead of `int`. (pull #92)\n\n### fixed\n\n- honor http/2 max concurrent streams settings. (pull #89, #90)\n- remove incorrect debug log. (pull #83)\n\n## 0.8.4 (may 11th, 2020)\n\n### added\n\n- logging via httpcore_log_level and httpx_log_level environment variables\nand trace level logging. (pull #79)\n\n### fixed\n\n- reuse of connections on http/2 in close concurrency situations. (pull #81)\n\n## 0.8.3 (may 6rd, 2020)\n\n### fixed\n\n- include `host` and `accept` headers on proxy \"connect\" requests.\n- de-duplicate any headers also contained in proxy_headers.\n- http/2 flag not being passed down to proxy connections.\n\n## 0.8.2 (may 3rd, 2020)\n\n### fixed\n\n- fix connections using proxy forwarding requests not being added to the\nconnection pool properly. (pull #70)\n\n## 0.8.1 (april 30th, 2020)\n\n### changed\n\n- allow inherintance of both `httpcore.asyncbytestream`, `httpcore.syncbytestream` without type conflicts.\n\n## 0.8.0 (april 30th, 2020)\n\n### fixed\n\n- fixed tunnel proxy support.\n\n###\u00a0added\n\n- new `timeoutexception` base class.\n\n## 0.7.0 (march 5th, 2020)\n\n- first integration with httpx.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "httpcore",
  "package_url": "https://pypi.org/project/httpcore/",
  "project_url": "https://pypi.org/project/httpcore/",
  "project_urls": {
    "Documentation": "https://www.encode.io/httpcore",
    "Homepage": "https://www.encode.io/httpcore/",
    "Source": "https://github.com/encode/httpcore"
  },
  "release_url": "https://pypi.org/project/httpcore/1.0.2/",
  "requires_dist": [
    "certifi",
    "h11<0.15,>=0.13",
    "anyio<5.0,>=4.0; extra == 'asyncio'",
    "h2<5,>=3; extra == 'http2'",
    "socksio==1.*; extra == 'socks'",
    "trio<0.23.0,>=0.22.0; extra == 'trio'"
  ],
  "requires_python": ">=3.8",
  "summary": "a minimal low-level http client.",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "tom@tomchristie.com"
  ],
  "kwds": "httpcore httpcore_log_level http httpproxy httpx",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_httpcore",
  "homepage": "",
  "release_count": 57,
  "dependency_ids": [
    "pypi_anyio",
    "pypi_certifi",
    "pypi_h11",
    "pypi_h2",
    "pypi_socksio",
    "pypi_trio"
  ]
}
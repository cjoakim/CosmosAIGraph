{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "opc ua / iec 62541 client and server for python >= 3.7 and pypy3 .\nhttp://freeopcua.github.io/, https://github.com/freeopcua/opcua-asyncio\n\n[![python package](https://github.com/freeopcua/opcua-asyncio/workflows/python%20package/badge.svg)](https://github.com/freeopcua/opcua-asyncio/actions)\n\n[![pypi package](https://badge.fury.io/py/asyncua.svg)](https://badge.fury.io/py/asyncua)\n\n# opcua-asyncio\n\nopcua-asyncio is an asyncio-based asynchronous opc ua client and server based on python-opcua, removing support of python < 3.7.\nasynchronous programming allows for simpler code (e.g. less need for locks) and can potentially provide performance improvements.\nthis library also provides a [synchronous wrapper](https://github.com/freeopcua/opcua-asyncio/blob/master/asyncua/sync.py) over the async api, which can be used in synchronous code instead of python-opcua.\n\n---\n\nthe opc ua binary protocol implementation has undergone extensive testing with various opc ua stacks. the api offers both a low level interface to send and receive all ua defined structures and high level classes allowing to write a server or a client in a few lines. it is easy to mix high level objects and low level ua calls in one application. most low level code is autogenerated from xml specification.\n\nthe test coverage reported by coverage.py is over 95%, with the majority of the non-tested code being autogenerated code that is not currently in use.\n\n# warnings\n\nopcua-asyncio is open-source and comes with absolutely no warranty. we try to keep it as bug-free as possible, and try to keep the api stable, but bugs and api changes will happen! in particular, api changes are expected to take place prior to any 1.0 release.\n\nsome renaming of methods from get_xx to read_xx and set_xx to write_xxx have been made to better follow opc ua naming conventions\n\nversion 0.9.9 introduces some argument renaming due to more automatic code generation. especially the arguments to nodeid, browsename, localizedtext and datavalue, which are now camelcase instead of lower case, following the opc ua conventions used in all other structures in this library\n\n# installation\n\nwith pip\n\n    pip install asyncua\n\n# usage\n\nwe assume that you already have some experience with python, the asyncio module, the async / await syntax and the concept of asyncio tasks.\n\n## client class\n\nthe `client` class provides a high level api for connecting to opc ua servers, session management and access to basic\naddress space services.\nthe client can be used as a context manager. the client will then automatically connect and disconnect withing the `with`syntax.\n\n```python\nfrom asyncua import client\n\nasync with client(url='opc.tcp://localhost:4840/freeopcua/server/') as client:\n    while true:\n        # do something with client\n        node = client.get_node('i=85')\n        value = await node.read_value()\n```\n\nof course, you can also call the `connect`, `disconnect` methods yourself if you do not want to use the context manager.\n\nsee the example folder and the code for more information on the client api.\n\n## node class\n\nthe `node` class provides a high level api for management of nodes as well as data access services.\n\n## subscription class\n\nthe `subscription` class provides a high level api for management of monitored items.\n\n## server class\n\nthe `server` class provides a high level api for creation of opc ua server instances.\n\n# documentation\n\nthe documentation is available here [readthedocs](http://opcua-asyncio.readthedocs.org/en/latest/).\n\nthe api remains mostly unchanged with regards to [python-opcua](http://opcua-asyncio.rtfd.io/).\nthe main difference is that most methods are now asynchronous.\nplease have a look at [the examples](https://github.com/freeopcua/opcua-asyncio/blob/master/examples) and/or the code.\n\na simple gui client is available at: https://github.com/freeopcua/opcua-client-gui\n\nbrowse the examples: https://github.com/freeopcua/opcua-asyncio/tree/master/examples\n\nthe minimal examples are a good starting point.\nminimal client example: https://github.com/freeopcua/opcua-asyncio/blob/master/examples/client-minimal.py\nminimal server example: https://github.com/freeopcua/opcua-asyncio/blob/master/examples/server-minimal.py\n\na set of command line tools also available: https://github.com/freeopcua/opcua-asyncio/tree/master/tools\n\n-   `uadiscover `(find_servers, get_endpoints and find_servers_on_network calls)\n-   `uals `(list children of a node)\n-   `uahistoryread`\n-   `uaread `(read attribute of a node)\n-   `uawrite `(write attribute of a node)\n-   `uacall `(call method of a node)\n-   `uasubscribe `(subscribe to a node and print datachange events)\n-   `uaclient `(connect to server and start python shell)\n-   `uaserver `(starts a demo opc ua server)\n    `tools/uaserver --populate --certificate cert.pem --private_key pk.pem`\n\nhow to generate certificate: https://github.com/freeopcua/opcua-asyncio/tree/master/examples/generate_certificate.sh\n\n## client support\n\nwhat works:\n\n-   connection to server, opening channel, session\n-   browsing and reading attributes value\n-   getting nodes by path and nodeids\n-   creating subscriptions\n-   subscribing to items for data change\n-   subscribing to events\n-   adding nodes\n-   method call\n-   user and password\n-   history read\n-   login with certificate\n-   communication encryption\n-   removing nodes\n\ntested servers: freeopcua c++, freeopcua python, prosys, kepware, beckhoff, wincc, b&r, \u2026\n\nnot implemented yet:\n\n-   localized text feature\n-   xml protocol\n-   udp (pubsub stuff)\n-   websocket\n-   maybe automatic reconnection...\n\n## server support\n\nwhat works:\n\n-   creating channel and sessions\n-   read/set attributes and browse\n-   getting nodes by path and nodeids\n-   autogenerate address space from spec\n-   adding nodes to address space\n-   datachange events\n-   events\n-   methods\n-   basic user implementation (one existing user called admin, which can be disabled, all others are read only)\n-   encryption\n-   certificate handling\n-   removing nodes\n-   history support for data change and events\n-   more high level solution to create custom structures\n\ntested clients: freeopcua c++, freeopcua python, uaexpert, prosys, quickopc\n\nnot yet implemented:\n\n-   udp (pubsub stuff)\n-   websocket\n-   session restore\n-   alarms\n-   xml protocol\n-   views\n-   localized text features\n-   better security model with users and password\n\n### running a server on a raspberry pi\n\nsetting up the standard address-space from xml is the most time-consuming step of the startup process which may lead to\nlong startup times on less powerful devices like a raspberry pi. by passing a path to a cache-file to the server constructor,\na shelve holding the address space will be created during the first startup. all following startups will make use of the\ncache-file which leads to significantly better startup performance (~3.5 vs 125 seconds on a raspberry pi model b).\n\n# development\n\ncode follows pep8 apart for line lengths which should be max 160 characters and opc ua structures that keep camel case\nfrom xml definition.\n\nall protocol code is under opcua directory\n\n-   `asyncua/ua` contains all ua structures from specification, most are autogenerated\n-   `asyncua/common` contains high level objects and methods used both in server and client\n-   `asyncua/client` contains client specific code\n-   `asyncua/server` contains server specific code\n-   `asyncua/utils` contains some utilities function and classes\n-   `asyncua/tools` contains code for command lines tools\n-   `schemas` contains the xml and text files from specification and the python scripts used to autogenerate code\n-   `tests` contains tests\n-   `docs` contains files to auto generate documentation from doc strings\n-   `examples` contains many example files\n-   `examples/sync` contains many example files using sync api\n-   `tools` contains python scripts that can be used to run command line tools from repository without installing\n\n## running tests:\n\n```\npython -m pip install -r requirements.txt\npython -m pip install -r dev_requirements.txt\npytest -v -s\n```\n\nor\n\n```\n./run-test.sh -v -s\n```\n\n## coverage\n\n```\npytest -v -s --cov asyncua --cov-report=html\n```\n\nor\n\n```\n./run-test.sh -v -s --cov asyncua --cov-report=html\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "gnu lesser general public license v3 or later",
  "name": "asyncua",
  "package_url": "https://pypi.org/project/asyncua/",
  "project_url": "https://pypi.org/project/asyncua/",
  "project_urls": {
    "Homepage": "http://freeopcua.github.io/"
  },
  "release_url": "https://pypi.org/project/asyncua/1.0.6/",
  "requires_dist": [
    "aiofiles",
    "aiosqlite",
    "python-dateutil",
    "pytz",
    "cryptography >40.0.1",
    "sortedcontainers",
    "pyOpenSSL",
    "typing-extensions",
    "importlib-metadata ; python_version < \"3.8\""
  ],
  "requires_python": "",
  "summary": "pure python opc-ua client and server library",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "olivier.roulet@gmail.com",
    "olivier_roulet"
  ],
  "kwds": "asyncio asyncua pypy3 python opcua",
  "license_kwds": "gnu lesser general public license v3 or later",
  "libtype": "pypi",
  "id": "pypi_asyncua",
  "homepage": "http://freeopcua.github.io/",
  "release_count": 38,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_aiosqlite",
    "pypi_cryptography",
    "pypi_importlib_metadata",
    "pypi_pyopenssl",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_sortedcontainers",
    "pypi_typing_extensions"
  ]
}
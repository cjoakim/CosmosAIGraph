{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: utilities"
  ],
  "description": "filterpy - kalman filters and other optimal and non-optimal estimation filters in python.\n-----------------------------------------------------------------------------------------\n\n.. image:: https://img.shields.io/pypi/v/filterpy.svg\n        :target: https://pypi.python.org/pypi/filterpy\n\n**note**: imminent drop of support of python 2.7, 3.4. see section below for details.\n\nthis library provides kalman filtering and various related optimal and\nnon-optimal filtering software written in python. it contains kalman\nfilters, extended kalman filters, unscented kalman filters, kalman\nsmoothers, least squares filters, fading memory filters, g-h filters,\ndiscrete bayes, and more.\n\nthis is code i am developing in conjunction with my book kalman and\nbayesian filter in python, which you can read/download at\nhttps://github.com/rlabbe/kalman-and-bayesian-filters-in-python/\n\nmy aim is largely pedalogical - i opt for clear code that matches the\nequations in the relevant texts on a 1-to-1 basis, even when that has a\nperformance cost. there are places where this tradeoff is unclear - for\nexample, i find it somewhat clearer to write a small set of equations\nusing linear algebra, but numpy's overhead on small matrices makes it\nrun slower than writing each equation out by hand. furthermore, books\nsuch zarchan present the written out form, not the linear algebra form.\nit is hard for me to choose which presentation is 'clearer' - it depends\non the audience. in that case i usually opt for the faster implementation.\n\ni use numpy and scipy for all of the computations. i have experimented\nwith numba and it yields impressive speed ups with minimal costs, but i \nam not convinced that i want to add that requirement to my project. it \nis still on my list of things to figure out, however.\n\nsphinx generated documentation lives at http://filterpy.readthedocs.org/.\ngeneration is triggered by git when i do a check in, so this will always\nbe bleeding edge development version - it will often be ahead of the\nreleased version. \n\n\nplan for dropping python 2.7 support\n------------------------------------\n\ni haven't finalized my decision on this, but numpy is dropping\npython 2.7 support in december 2018. i will certainly drop python\n2.7 support by then; i will probably do it much sooner.\n\nat the moment filterpy is on version 1.x. i plan to fork the project\nto version 2.0, and support only python 3.5+. the 1.x version \nwill still be available, but i will not support it. if i add something\namazing to 2.0 and someone really begs, i might backport it; more\nlikely i would accept a pull request with the feature backported\nto 1.x. but to be honest i don't forsee this happening.\n\nwhy 3.5+, and not 3.4+? 3.5 introduced the matrix multiply symbol,\nand i want my code to take advantage of it. plus, to be honest,\ni'm being selfish. i don't want to spend my life supporting this\npackage, and moving as far into the present as possible means\na few extra years before the python version i choose becomes\nhopelessly dated and a liability. i recognize this makes people\nrunning the default python in their linux distribution more\npainful. all i can say is i did not decide to do the python\n3 fork, and i don't have the time to support the bifurcation\nany longer.\n\ni am making edits to the package now in support of my book;\nonce those are done i'll probably create the 2.0 branch. \ni'm contemplating a slam addition to the book, and am not\nsure if i will do this in 3.5+ only or not.\n\n\ninstallation\n------------\n\nthe most general installation is just to use pip, which should come with\nany modern python distribution.\n\n.. image:: https://img.shields.io/pypi/v/filterpy.svg\n        :target: https://pypi.python.org/pypi/filterpy\n        \n::\n\n    pip install filterpy\n\nif you prefer to download the source yourself\n\n::\n\n    cd <directory you want to install to>\n    git clone http://github.com/rlabbe/filterpy\n    python setup.py install\n\nif you use anaconda, you can install from the conda-forge channel. you\nwill need to add the conda-forge channel if you haven't already done so:\n\n::\n    conda config --add channels conda-forge\n    \nand then install with:\n\n::\n    conda install filterpy\n    \n    \nand, if you want to install from the bleeding edge git version\n\n::\n\n    pip install git+https://github.com/rlabbe/filterpy.git\n\nnote: i make no guarantees that everything works if you install from here.\ni'm the only developer, and so i don't worry about dev/release branches and\nthe like. unless i fix a bug for you and tell you to get this version because\ni haven't made a new release yet, i strongly advise not installing from git.\n\n\n    \n\nbasic use\n---------\n\nfull documentation is at\nhttps://filterpy.readthedocs.io/en/latest/\n\n\nfirst, import the filters and helper functions.\n\n.. code-block:: python\n\n    import numpy as np\n    from filterpy.kalman import kalmanfilter\n    from filterpy.common import q_discrete_white_noise\n\nnow, create the filter\n\n.. code-block:: python\n\n    my_filter = kalmanfilter(dim_x=2, dim_z=1)\n\n\ninitialize the filter's matrices.\n\n.. code-block:: python\n\n    my_filter.x = np.array([[2.],\n                    [0.]])       # initial state (location and velocity)\n\n    my_filter.f = np.array([[1.,1.],\n                    [0.,1.]])    # state transition matrix\n\n    my_filter.h = np.array([[1.,0.]])    # measurement function\n    my_filter.p *= 1000.                 # covariance matrix\n    my_filter.r = 5                      # state uncertainty\n    my_filter.q = q_discrete_white_noise(2, dt, .1) # process uncertainty\n\n\nfinally, run the filter.\n\n.. code-block:: python\n\n    while true:\n        my_filter.predict()\n        my_filter.update(get_some_measurement())\n\n        # do something with the output\n        x = my_filter.x\n        do_something_amazing(x)\n\nsorry, that is the extent of the documentation here. however, the library\nis broken up into subdirectories: gh, kalman, memory, leastsq, and so on.\neach subdirectory contains python files relating to that form of filter.\nthe functions and methods contain pretty good docstrings on use.\n\nmy book https://github.com/rlabbe/kalman-and-bayesian-filters-in-python/\nuses this library, and is the place to go if you are trying to learn\nabout kalman filtering and/or this library. these two are not exactly in \nsync - my normal development cycle is to add files here, test them, figure \nout how to present them pedalogically, then write the appropriate section\nor chapter in the book. so there is code here that is not discussed\nyet in the book.\n\n\nrequirements\n------------\n\nthis library uses numpy, scipy, matplotlib, and python. \n\ni haven't extensively tested backwards compatibility - i use the\nanaconda distribution, and so i am on python 3.6 and 2.7.14, along with\nwhatever version of numpy, scipy, and matplotlib they provide. but i am\nusing pretty basic python - numpy.array, maybe a list comprehension in\nmy tests.\n\ni import from **__future__** to ensure the code works in python 2 and 3.\n\n\ntesting\n-------\n\nall tests are written to work with py.test. just type ``py.test`` at the\ncommand line.\n\nas explained above, the tests are not robust. i'm still at the stage\nwhere visual plots are the best way to see how things are working.\napologies, but i think it is a sound choice for development. it is easy\nfor a filter to perform within theoretical limits (which we can write a\nnon-visual test for) yet be 'off' in some way. the code itself contains\ntests in the form of asserts and properties that ensure that arrays are\nof the proper dimension, etc.\n\nreferences\n----------\n\ni use three main texts as my refererence, though i do own the majority\nof the kalman filtering literature. first is paul zarchan's\n'fundamentals of kalman filtering: a practical approach'. i think it by\nfar the best kalman filtering book out there if you are interested in\npractical applications more than writing a thesis. the second book i use\nis eli brookner's 'tracking and kalman filtering made easy'. this is an\nastonishingly good book; its first chapter is actually readable by the\nlayperson! brookner starts from the g-h filter, and shows how all other\nfilters - the kalman filter, least squares, fading memory, etc., all\nderive from the g-h filter. it greatly simplifies many aspects of\nanalysis and/or intuitive understanding of your problem. in contrast,\nzarchan starts from least squares, and then moves on to kalman\nfiltering. i find that he downplays the predict-update aspect of the\nalgorithms, but he has a wealth of worked examples and comparisons\nbetween different methods. i think both viewpoints are needed, and so i\ncan't imagine discarding one book. brookner also focuses on issues that\nare ignored in other books - track initialization, detecting and\ndiscarding noise, tracking multiple objects, an so on.\n\ni said three books. i also like and use bar-shalom's estimation with\napplications to tracking and navigation. much more mathematical than the\nprevious two books, i would not recommend it as a first text unless you\nalready have a background in control theory or optimal estimation. once\nyou have that experience, this book is a gem. every sentence is crystal\nclear, his language is precise, but each abstract mathematical statement\nis followed with something like \"and this means...\".\n\n\nlicense\n-------\n.. image:: https://anaconda.org/rlabbe/filterpy/badges/license.svg   :target: https://anaconda.org/rlabbe/filterpy\n\nthe mit license (mit)\n\ncopyright (c) 2015 roger r. labbe jr\n\npermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"software\"), to deal\nin the software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the software, and to permit persons to whom the software is\nfurnished to do so, subject to the following conditions:\n\nthe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the software.\n\nthe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and noninfringement. in no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in\nthe software.tion of contract,\ntort or otherwise, arising from, out of or in connection with the\nsoftware or the use or other dealings in the software.",
  "docs_url": null,
  "keywords": "kalman filters filtering optimal estimation tracking",
  "license": "mit",
  "name": "filterpy",
  "package_url": "https://pypi.org/project/filterpy/",
  "project_url": "https://pypi.org/project/filterpy/",
  "project_urls": {
    "Homepage": "https://github.com/rlabbe/filterpy"
  },
  "release_url": "https://pypi.org/project/filterpy/1.4.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "kalman filtering and optimal estimation library",
  "version": "1.4.5",
  "releases": [],
  "developers": [
    "rlabbejr@gmail.com",
    "roger_labbe"
  ],
  "kwds": "kalmanfilter filterpy kalman python filters",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_filterpy",
  "homepage": "https://github.com/rlabbe/filterpy",
  "release_count": 47,
  "dependency_ids": []
}
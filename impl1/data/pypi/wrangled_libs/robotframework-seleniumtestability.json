{
  "classifiers": [
    "development status :: 3 - alpha",
    "framework :: robot framework",
    "framework :: robot framework :: library",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: testing"
  ],
  "description": "robotframework-seleniumtestability\r\n==================================\r\n\r\nseleniumtestability is a plugin to robot framework's seleniumlibrary that adds\r\nfunctionality to it doesn't fit into its mission. these new features are archived\r\nby sl's plugin api that then automatically instrumentents the web application via\r\njavascript calls and provides  keywords to bridge those into robot framework.\r\n\r\nplugin provides automatic detection of asyncronous events happening within\r\nthe web application. for example, if a rest api is called from the application,\r\ntestcase can automatically wait for that call to finish before doing any\r\ninteraction in the ui. there's also a bunch of functionality like fetching of\r\nbrowser logs,  keywords to interact with local and session storage.  see the\r\nkeyword documentation [here](https://marketsquare.github.io/robotframework-seleniumtestability/index.html?tag=plugin)\r\nfor more details.\r\n\r\nseleniumtestability relies on core selenium's feature eventfiringwebdriver\r\nand provides it's own listener interface that takes care of waiting in right\r\nplaces and instrumenting the sut whenever it is needed.\r\n\r\nin the future, its also possible to extend the javascript parts of\r\nseleniumtestability to incorporate more state inspections.\r\n\r\nmonitoring of the asyncronous events is archived with help of [testability.js](https://github.com/alfonso-presa/testability.js)\r\nand its [bindings](https://github.com/alfonso-presa/testability-browser-bindings)\r\n\r\n# support\r\n\r\n\"official\" support channel available in [gitter.im](https://gitter.im/robotframework-seleniumtestability/community)\r\n\r\n# installation\r\n\r\n```\r\npip install robotframework-seleniumtestability\r\n```\r\n\r\n# usage\r\n\r\n## initialize library\r\n\r\n```\r\nlibrary         seleniumlibrary     plugins=seleniumtestability;true;30 seconds;true\r\n```\r\n\r\nfor parameter descriptions, refer to keyword docmentation.\r\n\r\n## example\r\n\r\n```robotframework\r\n  click element             id:button_that_triggers_ajax_request\r\n  click element             id:some_other_element\r\n  log to console            this will happen right after clicking\r\n```\r\n\r\nin here, if automatic_wait has been enabled, second `click element` keyword wont\r\nbe executed before action triggered by the first button is finished.\r\n\r\nif automatic_wait is not enabled, test case can request the wait itself and previous\r\nexample would look something like this.\r\n\r\n```\r\n  click element               id:button_that_triggers_ajax_request\r\n  wait for testability ready\r\n  click element               id:some_other_element\r\n  wait for testability ready\r\n  log to console              this would show after events triggered by second click are done.\r\n```\r\n\r\n# currently supported asyncronous features\r\n\r\n* settimeout & setimmediate calls and wait for them.\r\n* fetch() call and wait for it to finish\r\n* xhr requests and wait for them to finish\r\n* css animations and wait form them to finish\r\n* css transitions and wait form them to finish\r\n* viewport scrolling.\r\n\r\ndo note that catching css animations and transitions is browser dependant. in the past\r\ncertain browsers did not implement these features as \"the standard\" would require.\r\n\r\n# other functionality.\r\n\r\nseleniumtestability also provides other conveniance keywords that do not make sense to incorporate into\r\nseleniumlibrary itself, mainly due to functionality not being in scope of seleniumlibrary and selenium\r\npython bindings. do check the keyword documentation for up to date list of keywords.\r\n\r\n\r\n# keyword documentation\r\n\r\nkeyword documentation [here](https://marketsquare.github.io/robotframework-seleniumtestability/index.html?tag=plugin) and if you need to create one for offline usage:\r\n\r\n```\r\npython -m robot.libdoc seleniumlibrary::plugins=seleniumtestability\r\n```\r\n\r\n# contributing\r\n\r\n[contributing.md](https://github.com/marketsquare/robotframework-seleniumtestability/blob/master/contributing.md) documents how to setup the environment for further development of seleniumtestability.\r\n\r\n",
  "docs_url": null,
  "keywords": "robot framework testing automation selenium seleniumlibrarytestability async javascript softwaretesting",
  "license": "apache license 2.0",
  "name": "robotframework-seleniumtestability",
  "package_url": "https://pypi.org/project/robotframework-seleniumtestability/",
  "project_url": "https://pypi.org/project/robotframework-seleniumtestability/",
  "project_urls": {
    "Homepage": "https://github.com/marketsquare/robotframework-seleniumtestability"
  },
  "release_url": "https://pypi.org/project/robotframework-seleniumtestability/2.1.0/",
  "requires_dist": [
    "robotframework-seleniumlibrary (>=4.0.0)",
    "furl",
    "wrapt"
  ],
  "requires_python": "",
  "summary": "seleniumtestability library that helps speed up tests withasyncronous evens",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "jani.mikkonen@gmail.com",
    "jani_mikkonen"
  ],
  "kwds": "seleniumtestability selenium automation softwaretesting testing",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_robotframework_seleniumtestability",
  "homepage": "https://github.com/marketsquare/robotframework-seleniumtestability",
  "release_count": 21,
  "dependency_ids": [
    "pypi_furl",
    "pypi_robotframework_seleniumlibrary",
    "pypi_wrapt"
  ]
}
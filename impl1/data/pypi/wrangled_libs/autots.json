{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# autots\r\n\r\n<img src=\"/img/autots_1280.png\" width=\"400\" height=\"184\" title=\"autots logo\">\r\n\r\nautots is a time series package for python designed for rapidly deploying high-accuracy forecasts at scale. \r\n\r\nin 2023, autots has won in the m6 forecasting competition, delivering the highest performance investment decisions across 12 months of stock market forecasting.\r\n\r\nthere are dozens of forecasting models usable in the `sklearn` style of `.fit()` and `.predict()`. \r\nthese includes naive, statistical, machine learning, and deep learning models. \r\nadditionally, there are over 30 time series specific transforms usable in the `sklearn` style of `.fit()`, `.transform()` and `.inverse_transform()`. \r\nall of these function directly on pandas dataframes, without the need for conversion to proprietary objects. \r\n\r\nall models support forecasting multivariate (multiple time series) outputs and also support probabilistic (upper/lower bound) forecasts. \r\nmost models can readily scale to tens and even hundreds of thousands of input series. \r\nmany models also support passing in user-defined exogenous regressors. \r\n\r\nthese models are all designed for integration in an automl feature search which automatically finds the best models, preprocessing, and ensembling for a given dataset through genetic algorithms. \r\n\r\nhorizontal and mosaic style ensembles are the flagship ensembling types, allowing each series to receive the most accurate possible models while still maintaining scalability.\r\n\r\na combination of metrics and cross-validation options, the ability to apply subsets and weighting, regressor generation tools, simulation forecasting mode, event risk forecasting, live datasets, template import and export, plotting, and a collection of data shaping parameters round out the available feature set. \r\n\r\n## table of contents\r\n* [installation](https://github.com/winedarksea/autots#installation)\r\n* [basic use](https://github.com/winedarksea/autots#basic-use)\r\n* [tips for speed and large data](https://github.com/winedarksea/autots#tips-for-speed-and-large-data)\r\n* extended tutorial [github](https://github.com/winedarksea/autots/blob/master/extended_tutorial.md) or [docs](https://winedarksea.github.io/autots/build/html/source/tutorial.html)\r\n* [production example](https://github.com/winedarksea/autots/blob/master/production_example.py)\r\n\r\n## installation\r\n```\r\npip install autots\r\n```\r\nthis includes dependencies for basic models, but [additonal packages](https://github.com/winedarksea/autots/blob/master/extended_tutorial.md#installation-and-dependency-versioning) are required for some models and methods.\r\n\r\n## basic use\r\n\r\ninput data for autots is expected to come in either a *long* or a *wide* format:\r\n\r\n- the *wide* format is a `pandas.dataframe` with a `pandas.datetimeindex` and each column a distinct series. \r\n- the *long* format has three columns: \r\n  - date (ideally already in pandas-recognized `datetime` format)\r\n  - series id. for a single time series, series_id can be `= none`.\r\n  - value\r\n- for *long* data, the column name for each of these is passed to `.fit()` as `date_col`, `id_col`, and `value_col`. no parameters are needed for *wide* data.\r\n\r\nlower-level functions are only designed for `wide` style data.\r\n\r\n```python\r\n# also load: _hourly, _monthly, _weekly, _yearly, or _live_daily\r\nfrom autots import autots, load_daily\r\n\r\n# sample datasets can be used in either of the long or wide import shapes\r\nlong = false\r\ndf = load_daily(long=long)\r\n\r\nmodel = autots(\r\n    forecast_length=21,\r\n    frequency='infer',\r\n    prediction_interval=0.9,\r\n    ensemble='auto',\r\n    model_list=\"fast\",  # \"superfast\", \"default\", \"fast_parallel\"\r\n    transformer_list=\"fast\",  # \"superfast\",\r\n    drop_most_recent=1,\r\n    max_generations=4,\r\n    num_validations=2,\r\n    validation_method=\"backwards\"\r\n)\r\nmodel = model.fit(\r\n    df,\r\n    date_col='datetime' if long else none,\r\n    value_col='value' if long else none,\r\n    id_col='series_id' if long else none,\r\n)\r\n\r\nprediction = model.predict()\r\n# plot a sample\r\nprediction.plot(model.df_wide_numeric,\r\n                series=model.df_wide_numeric.columns[0],\r\n                start_date=\"2019-01-01\")\r\n# print the details of the best model\r\nprint(model)\r\n\r\n# point forecasts dataframe\r\nforecasts_df = prediction.forecast\r\n# upper and lower forecasts\r\nforecasts_up, forecasts_low = prediction.upper_forecast, prediction.lower_forecast\r\n\r\n# accuracy of all tried model results\r\nmodel_results = model.results()\r\n# and aggregated from cross validation\r\nvalidation_results = model.results(\"validation\")\r\n```\r\n\r\nthe lower-level api, in particular the large section of time series transformers in the scikit-learn style, can also be utilized independently from the automl framework.\r\n\r\ncheck out [extended_tutorial.md](https://winedarksea.github.io/autots/build/html/source/tutorial.html) for a more detailed guide to features.\r\n\r\nalso take a look at the [production_example.py](https://github.com/winedarksea/autots/blob/master/production_example.py)\r\n\r\n## tips for speed and large data:\r\n* use appropriate model lists, especially the predefined lists:\r\n\t* `superfast` (simple naive models) and `fast` (more complex but still faster models, optimized for many series)\r\n\t* `fast_parallel` (a combination of `fast` and `parallel`) or `parallel`, given many cpu cores are available\r\n\t\t* `n_jobs` usually gets pretty close with `='auto'` but adjust as necessary for the environment\r\n\t* see a dict of predefined lists (some defined for internal use) with `from autots.models.model_list import model_lists`\r\n* use the `subset` parameter when there are many similar series, `subset=100` will often generalize well for tens of thousands of similar series.\r\n\t* if using `subset`, passing `weights` for series will weight subset selection towards higher priority series.\r\n\t* if limited by ram, it can be distributed by running multiple instances of autots on different batches of data, having first imported a template pretrained as a starting point for all.\r\n* set `model_interrupt=true` which passes over the current model when a `keyboardinterrupt` ie `crtl+c` is pressed (although if the interrupt falls between generations it will stop the entire training).\r\n* use the `result_file` method of `.fit()` which will save progress after each generation - helpful to save progress if a long training is being done. use `import_results` to recover.\r\n* while transformations are pretty fast, setting `transformer_max_depth` to a lower number (say, 2) will increase speed. also utilize `transformer_list` == 'fast' or 'superfast'.\r\n* check out [this example](https://github.com/winedarksea/autots/discussions/76) of using autots with pandas udf.\r\n* ensembles are obviously slower to predict because they run many models, 'distance' models 2x slower, and 'simple' models 3x-5x slower.\r\n\t* `ensemble='horizontal-max'` with `model_list='no_shared_fast'` can scale relatively well given many cpu cores because each model is only run on the series it is needed for.\r\n* reducing `num_validations` and `models_to_validate` will decrease runtime but may lead to poorer model selections.\r\n* for datasets with many records, upsampling (for example, from daily to monthly frequency forecasts) can reduce training time if appropriate.\r\n\t* this can be done by adjusting `frequency` and `aggfunc` but is probably best done before passing data into autots.\r\n* it will be faster if nan's are already filled. if a search for optimal nan fill method is not required, then fill any nan with a satisfactory method before passing to class.\r\n* set `runtime_weighting` in `metric_weighting` to a higher value. this will guide the search towards faster models, although it may come at the expense of accuracy. \r\n\r\n## how to contribute:\r\n* give feedback on where you find the documentation confusing\r\n* use autots and...\r\n\t* report errors and request features by adding issues on github\r\n\t* posting the top model templates for your data (to help improve the starting templates)\r\n\t* feel free to recommend different search grid parameters for your favorite models\r\n* and, of course, contributing to the codebase directly on github.\r\n\r\n\r\n*also known as project cats (catlin's automated time series) hence the logo.*\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "autots",
  "package_url": "https://pypi.org/project/autots/",
  "project_url": "https://pypi.org/project/autots/",
  "project_urls": {
    "Bug Tracker": "https://github.com/winedarksea/AutoTS/issues",
    "Homepage": "https://github.com/winedarksea/AutoTS"
  },
  "release_url": "https://pypi.org/project/autots/0.6.6/",
  "requires_dist": [
    "numpy >=1.14.6",
    "pandas >=0.25.0",
    "statsmodels >=0.10.0",
    "scikit-learn >=0.20.0",
    "holidays >=0.9 ; extra == 'additional'",
    "prophet >=0.4.0 ; extra == 'additional'",
    "fredapi ; extra == 'additional'",
    "tensorflow ; extra == 'additional'",
    "xgboost >=1.6 ; extra == 'additional'",
    "lightgbm ; extra == 'additional'",
    "joblib ; extra == 'additional'",
    "scipy ; extra == 'additional'",
    "arch ; extra == 'additional'",
    "numexpr ; extra == 'additional'",
    "bottleneck ; extra == 'additional'",
    "yfinance ; extra == 'additional'",
    "pytrends ; extra == 'additional'",
    "matplotlib ; extra == 'additional'",
    "requests ; extra == 'additional'",
    "seaborn ; extra == 'additional'"
  ],
  "requires_python": ">=3.6",
  "summary": "automated time series forecasting",
  "version": "0.6.6",
  "releases": [],
  "developers": [
    "colin.catlin@gmail.com",
    "colin_catlin"
  ],
  "kwds": "forecasts_df forecasts autots forecasting forecast",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_autots",
  "homepage": "https://github.com/winedarksea/autots",
  "release_count": 53,
  "dependency_ids": [
    "pypi_arch",
    "pypi_bottleneck",
    "pypi_fredapi",
    "pypi_holidays",
    "pypi_joblib",
    "pypi_lightgbm",
    "pypi_matplotlib",
    "pypi_numexpr",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_prophet",
    "pypi_pytrends",
    "pypi_requests",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_seaborn",
    "pypi_statsmodels",
    "pypi_tensorflow",
    "pypi_xgboost",
    "pypi_yfinance"
  ]
}
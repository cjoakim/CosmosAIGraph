{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# awesomeversion\n\n[![codecov](https://codecov.io/gh/ludeeus/awesomeversion/branch/main/graph/badge.svg)](https://codecov.io/gh/ludeeus/awesomeversion)\n![python version](https://img.shields.io/badge/python-3.8=><=3.12-blue.svg)\n![dependencies](https://img.shields.io/badge/dependencies-0-blue.svg)\n[![pypi](https://img.shields.io/pypi/v/awesomeversion)](https://pypi.org/project/awesomeversion)\n![actions](https://github.com/ludeeus/awesomeversion/workflows/actions/badge.svg?branch=main)\n\n_one version package to rule them all, one version package to find them, one version package to bring them all, and in the darkness bind them._\n\nmake anything a version object, and compare against a vast section of other version formats.\n\n## installation\n\n```bash\npython3 -m pip install awesomeversion\n```\n\n## awesomeversion class\n\nthe awesomeversion class takes a version as the first argument, you can also pass in additional kwargs to customize the version object.\n\nargument | description\n--- | ---\n`version` | the version string to parse.\n`ensure_strategy` | match the `awesomeversion` object against spesific strategies when creating if. if it does not match `awesomeversionstrategyexception` will be raised\n`find_first_match` | if true, the version given will be scanned for the first match of the given `ensure_strategy`. raises `awesomeversionstrategyexception` if it is not found for any of the given strategies.\n\n## awesomeversion methods\n\n<details>\n<summary><code>awesomeversion.in_range</code></summary>\n\nthis is a helper method to check if the version is in a range.\nthis method takes two arguments, `lowest` and `highest`, both are required, and returns a boolean.\n\n> **note** this method is the same as doing `lowest <= awesomeversion <= highest`\n\nexample:\n\n```python\nfrom awesomeversion import awesomeversion\nprint(awesomeversion(\"1.2.2\").in_range(\"1.2.1\", \"1.3\"))\n> true\nprint(awesomeversion(\"1.2.0\").in_range(\"1.2.1\", \"1.3\"))\n> false\n```\n\n</details>\n\n<details>\n<summary><code>awesomeversion.diff</code></summary>\n\nthis is a helper method to get the difference between two versions.\nthis method takes one argument which is the version to compare against, and returns a `awesomeversiondiff` object.\n\n> **note** this method is the same as doing `awesomeversion - version`\n\nexample:\n\n```python\nfrom awesomeversion import awesomeversion\n> print(awesomeversion(\"1.0\").diff(\"2.1\"))\nawesomeversiondiff(major=true, minor=true, patch=false, modifier=false, strategy=false)\n```\n\n</details>\n\n\n<details>\n<summary><code>awesomeversion.section</code></summary>\n\nthis is a helper method to get a section of the version.\nthis method takes one argument which is the section to get, and returns an integer representing it (or 0 if it does not exist).\n\nexample:\n\n```python\nfrom awesomeversion import awesomeversion\n> print(awesomeversion(\"1.0\").section(0))\n1\n```\n\n</details>\n\n\n## awesomeversion properties\n\nargument | description\n--- | ---\n`alpha` | this is a boolean representing if the version is an alpha version.\n`beta` | this is a boolean representing if the version is a beta version.\n`dev` | this is a boolean representing if the version is a dev version.\n`major` | this is an `awesomeversion` object representing the major version or `none` if not present.\n`micro` | this is an `awesomeversion` object representing the micro version or `none` if not present.\n`minor` | this is an `awesomeversion` object representing the minor version or `none` if not present.\n`modifier_type` | this is a string representing the modifier type of the version or `none` if not present.\n`modifier` | this is a string representing the modifier of the version or `none` if not present.\n`patch` | this is an `awesomeversion` object representing the patch version or `none` if not present.\n`prefix` | this is the prefix of the version or `none` if not present.\n`release_candidate` | this is a boolean representing if the version is a release candidate version.\n`simple` | this is a boolean representing if the version is a simple version.\n`strategy_description` | this is a `awesomeversionstrategydescription` object representing the strategy description of the version.\n`strategy` | this is a `awesomeversionstrategy` object representing the strategy of the version.\n`string` | this is the string representation of the version (without the v prefix if present).\n`valid` | this is a boolean representing if the version is valid (not unknown strategy).\n`year` | this is alias to `major`, and is an `awesomeversion` object representing the year.\n\n\n## example usage\n\nhere are some examples of how you can use this package, more examples can be found in the `tests` directory.\n\n<details>\n<summary><code>basic compare</code></summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\ncurrent = awesomeversion(\"1.2.2\")\nupstream = awesomeversion(\"1.2.3\")\n\nprint(upstream > current)\n> true\n```\n\n</details>\n\n<details>\n<summary><code>compare beta version</code></summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\ncurrent = awesomeversion(\"2021.1.0\")\nupstream = awesomeversion(\"2021.1.0b2\")\n\nprint(current > upstream)\n> true\n```\n\n</details>\n\n<details>\n<summary><code>check if version is a beta version</code></summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\nprint(awesomeversion(\"1.2.3b0\").beta)\n> true\n\nprint(awesomeversion(\"1.2.3\").beta)\n> false\n```\n\n</details>\n\n<details>\n<summary>use <code>awesomeversion</code> with <code>with ...</code></summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\nwith awesomeversion(\"20.12.0\") as current:\n    with awesomeversion(\"20.12.1\") as upstream:\n        print(upstream > current)\n> true\n```\n\n</details>\n\n<details>\n<summary>compare <code>awesomeversion</code> with other non-<code>awesomeversion</code> formats</summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\nbase = awesomeversion(\"20.12.0\")\n\nprint(base > \"20.12.1\")\n> false\n\nprint(base > \"19\")\n> true\n\nprint(base > 5)\n> true\n```\n\n</details>\n\n\n## general behavior\n\nyou can test your versions on the [demo page][awesomeversion_demo].\n\n### modifiers\n\nwhen comparing versions with modifiers, if the base version is the same the modifier will be used to determine the order.\nif one of the versions do not have a modifier, the one without will be considered newer.\n\nthe order of the modifiers are:\n- no modifier\n- rc\n- beta\n- alpha\n- dev\n\n<details>\n<summary>examples</summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\nprint(awesomeversion(\"1.0.0\") > awesomeversion(\"1.0.0b6\"))\n> true\nprint(awesomeversion(\"1.0.0\") > awesomeversion(\"1.0.0.dev6\"))\n> true\nprint(awesomeversion(\"1.0.0.dev19\") > awesomeversion(\"1.0.0b4\"))\n> false\n```\n\n</details>\n\n\n### special versions (container)\n\nthere are some special versions for container that are handled differently than typical version formats.\nthe special versions are in the following order:\n- `dev` (newest)\n- `latest`\n- `beta`\n- `stable` (oldest)\n\nif only the first version is this special version, it will be considered newer.\nif only the second version is this special version, it will be considered older.\n\n\n<details>\n<summary>examples</summary>\n\n```python\nfrom awesomeversion import awesomeversion\n\nprint(awesomeversion(\"latest\") > awesomeversion(\"1.0.0b6\"))\n> true\nprint(awesomeversion(\"1.0.0\") > awesomeversion(\"latest\"))\n> false\nprint(awesomeversion(\"stable\") > awesomeversion(\"latest\"))\n> false\nprint(awesomeversion(\"beta\") > awesomeversion(\"dev\"))\n> false\n```\n\n</details>\n\n\n\n\n## contribute\n\n**all** contributions are welcome!\n\n1. fork the repository\n2. clone the repository locally and open the devcontainer or use github codespaces\n3. do your changes\n4. lint the files with `make lint`\n5. ensure all tests passes with `make test`\n6. ensure 100% coverage with `make coverage`\n7. commit your work, and push it to github\n8. create a pr against the `main` branch\n\n\n[awesomeversion_demo]: https://ludeeus.github.io/awesomeversion/\n",
  "docs_url": null,
  "keywords": "calver,semver,0ver,version,pep440,buildver",
  "license": "mit",
  "name": "awesomeversion",
  "package_url": "https://pypi.org/project/awesomeversion/",
  "project_url": "https://pypi.org/project/awesomeversion/",
  "project_urls": {
    "Homepage": "https://github.com/ludeeus/awesomeversion",
    "Repository": "https://github.com/ludeeus/awesomeversion"
  },
  "release_url": "https://pypi.org/project/awesomeversion/23.11.0/",
  "requires_dist": [],
  "requires_python": ">=3.8,<4.0",
  "summary": "one version package to rule them all, one version package to find them, one version package to bring them all, and in the darkness bind them.",
  "version": "23.11.0",
  "releases": [],
  "developers": [
    "ludeeus",
    "ludeeus@ludeeus.dev"
  ],
  "kwds": "awesomeversionstrategydescription awesomeversiondiff badge awesomeversion package",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_awesomeversion",
  "homepage": "https://github.com/ludeeus/awesomeversion",
  "release_count": 41,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "programming language :: python",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "pulp\n**************************\n.. image:: https://travis-ci.org/coin-or/pulp.svg?branch=master\n    :target: https://travis-ci.org/coin-or/pulp\n\npulp is an lp modeler written in python. pulp can generate mps or lp files\nand call glpk_, coin-or clp/`cbc`_, cplex_, gurobi_, mosek_, xpress_, choco_, mipcl_, scip_ to solve linear\nproblems.\n\ninstallation\n================\n\nthe easiest way to install pulp is via `pypi <https://pypi.python.org/pypi/pulp>`_\n\nif pip is available on your system::\n\n     python -m pip install pulp\n\notherwise follow the download instructions on the pypi page.\n\n\nif you want to install the latest version from github you can run the following::\n\n    python -m pip install -u git+https://github.com/coin-or/pulp\n\n\non linux and osx systems the tests must be run to make the default\nsolver executable.\n\n::\n\n     sudo pulptest\n\nexamples\n================\n\nsee the examples directory for examples.\n\npulp requires python 2.7 or python >= 3.4.\n\nthe examples use the default solver (cbc). to use other solvers they must be available (installed and accessible). for more information on how to do that, see the `guide on configuring solvers <https://coin-or.github.io/pulp/guides/how_to_configure_solvers.html>`_.\n\ndocumentation\n================\n\ndocumentation is found on https://coin-or.github.io/pulp/.\n\n\nuse lpvariable() to create new variables. to create a variable 0 <= x <= 3::\n\n     x = lpvariable(\"x\", 0, 3)\n\nto create a variable 0 <= y <= 1::\n\n     y = lpvariable(\"y\", 0, 1)\n\nuse lpproblem() to create new problems. create \"myproblem\"::\n\n     prob = lpproblem(\"myproblem\", lpminimize)\n\ncombine variables to create expressions and constraints, then add them to the\nproblem::\n\n     prob += x + y <= 2\n\nif you add an expression (not a constraint), it will\nbecome the objective::\n\n     prob += -4*x + y\n\nto solve with the default included solver::\n\n     status = prob.solve()\n\nto use another sovler to solve the problem::\n\n     status = prob.solve(glpk(msg = 0))\n\ndisplay the status of the solution::\n\n     lpstatus[status]\n     > 'optimal'\n\nyou can get the value of the variables using value(). ex::\n\n     value(x)\n     > 2.0\n\nexported classes:\n\n* ``lpproblem`` -- container class for a linear programming problem\n* ``lpvariable`` -- variables that are added to constraints in the lp\n* ``lpconstraint`` -- a constraint of the general form\n\n      a1x1+a2x2 ...anxn (<=, =, >=) b\n\n*  ``lpconstraintvar`` -- used to construct a column of the model in column-wise modelling\n\nexported functions:\n\n* ``value()`` -- finds the value of a variable or expression\n* ``lpsum()`` -- given a list of the form [a1*x1, a2x2, ..., anxn] will construct a linear expression to be used as a constraint or variable\n* ``lpdot()`` --given two lists of the form [a1, a2, ..., an] and [ x1, x2, ..., xn] will construct a linear expression to be used as a constraint or variable\n\n\nbuilding the documentation\n--------------------------\n\nthe pulp documentation is built with `sphinx <https://www.sphinx-doc.org>`_.  we recommended using a \n`virtual environment <https://docs.python.org/3/library/venv.html>`_ to build the documentation locally. \n\nto build, run the following in a terminal window, in the pulp root directory\n\n::\n\n    cd pulp\n    python -m pip install -r requirements-dev.txt\n    cd doc\n    make html\n\na folder named html will be created inside the ``build/`` directory.\nthe home page for the documentation is ``doc/build/html/index.html`` which can be opened in a browser.\n\n\n\n\n\n\n**comments, bug reports, patches and suggestions are welcome.**\n\n* comments and suggestions: https://github.com/coin-or/pulp/discussions\n* bug reports: https://github.com/coin-or/pulp/issues\n* patches: https://github.com/coin-or/pulp/pulls\n\n     copyright j.s. roy, 2003-2005\n     copyright stuart a. mitchell\n     see the license file for copyright information.\n\n.. _python: http://www.python.org/\n\n.. _glpk: http://www.gnu.org/software/glpk/glpk.html\n.. _cbc: https://github.com/coin-or/cbc\n.. _cplex: http://www.cplex.com/\n.. _gurobi: http://www.gurobi.com/\n.. _mosek: https://www.mosek.com/\n.. _xpress: https://www.fico.com/es/products/fico-xpress-solver\n.. _choco: https://choco-solver.org/\n.. _mipcl: http://mipcl-cpp.appspot.com/\n.. _scip: https://www.scipopt.org/\n\n\n",
  "docs_url": null,
  "keywords": "optimization,linear programming,operations research",
  "license": "",
  "name": "pulp",
  "package_url": "https://pypi.org/project/PuLP/",
  "project_url": "https://pypi.org/project/PuLP/",
  "project_urls": {
    "Homepage": "https://github.com/coin-or/pulp"
  },
  "release_url": "https://pypi.org/project/PuLP/2.7.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pulp is an lp modeler written in python. pulp can generate mps or lp files and call glpk, coin clp/cbc, cplex, and gurobi to solve linear problems.",
  "version": "2.7.0",
  "releases": [],
  "developers": [
    "pulp@stuartmitchell.com"
  ],
  "kwds": "pulp pulptest lpconstraint how_to_configure_solvers python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pulp",
  "homepage": "https://github.com/coin-or/pulp",
  "release_count": 40,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: c",
    "programming language :: python",
    "programming language :: python :: 3.4",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/hdbscan.svg\n    :target: https://pypi.python.org/pypi/hdbscan/\n    :alt: pypi version\n.. image:: https://anaconda.org/conda-forge/hdbscan/badges/version.svg\n    :target: https://anaconda.org/conda-forge/hdbscan\n    :alt: conda-forge version\n.. image:: https://anaconda.org/conda-forge/hdbscan/badges/downloads.svg\n    :target: https://anaconda.org/conda-forge/hdbscan\n    :alt: conda-forge downloads\n.. image:: https://img.shields.io/pypi/l/hdbscan.svg\n    :target: https://github.com/scikit-learn-contrib/hdbscan/blob/master/license\n    :alt: license\n.. image:: https://travis-ci.org/scikit-learn-contrib/hdbscan.svg\n    :target: https://travis-ci.org/scikit-learn-contrib/hdbscan\n    :alt: travis build status\n.. image:: https://codecov.io/gh/scikit-learn-contrib/hdbscan/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/scikit-learn-contrib/hdbscan\n    :alt: test coverage\n.. image:: https://readthedocs.org/projects/hdbscan/badge/?version=latest\n    :target: https://hdbscan.readthedocs.org\n    :alt: docs\n.. image:: http://joss.theoj.org/papers/10.21105/joss.00205/status.svg\n    :target: http://joss.theoj.org/papers/10.21105/joss.00205\n    :alt: joss article\n.. image:: https://mybinder.org/badge.svg \n    :target: https://mybinder.org/v2/gh/scikit-learn-contrib/hdbscan\n    :alt: launch example notebooks in binder\n\n\n=======\nhdbscan\n=======\n\nhdbscan - hierarchical density-based spatial clustering of applications\nwith noise. performs dbscan over varying epsilon values and integrates \nthe result to find a clustering that gives the best stability over epsilon.\nthis allows hdbscan to find clusters of varying densities (unlike dbscan),\nand be more robust to parameter selection.\n\nin practice this means that hdbscan returns a good clustering straight\naway with little or no parameter tuning -- and the primary parameter,\nminimum cluster size, is intuitive and easy to select.\n\nhdbscan is ideal for exploratory data analysis; it's a fast and robust\nalgorithm that you can trust to return meaningful clusters (if there\nare any).\n\nbased on the papers:\n\n    mcinnes l, healy j. *accelerated hierarchical density based clustering* \n    in: 2017 ieee international conference on data mining workshops (icdmw), ieee, pp 33-42.\n    2017 `[pdf] <http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8215642>`_\n\n    r. campello, d. moulavi, and j. sander, *density-based clustering based on\n    hierarchical density estimates*\n    in: advances in knowledge discovery and data mining, springer, pp 160-172.\n    2013\n    \ndocumentation, including tutorials, are available on readthedocs at http://hdbscan.readthedocs.io/en/latest/ .  \n    \nnotebooks `comparing hdbscan to other clustering algorithms <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/comparing%20clustering%20algorithms.ipynb>`_, explaining `how hdbscan works <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/how%20hdbscan%20works.ipynb>`_ and `comparing performance with other python clustering implementations <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/benchmarking%20scalability%20of%20clustering%20implementations-v0.7.ipynb>`_ are available.\n\n------------------\nhow to use hdbscan\n------------------\n\nthe hdbscan package inherits from sklearn classes, and thus drops in neatly\nnext to other sklearn clusterers with an identical calling api. similarly it\nsupports input in a variety of formats: an array (or pandas dataframe, or\nsparse matrix) of shape ``(num_samples x num_features)``; an array (or sparse matrix)\ngiving a distance matrix between samples.\n\n.. code:: python\n\n    import hdbscan\n    from sklearn.datasets import make_blobs\n    \n    data, _ = make_blobs(1000)\n    \n    clusterer = hdbscan.hdbscan(min_cluster_size=10)\n    cluster_labels = clusterer.fit_predict(data)\n\n-----------\nperformance\n-----------\n\nsignificant effort has been put into making the hdbscan implementation as fast as \npossible. it is `orders of magnitude faster than the reference implementation <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/python%20vs%20java.ipynb>`_ in java,\nand is currently faster than highly optimized single linkage implementations in c and c++.\n`version 0.7 performance can be seen in this notebook <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/benchmarking%20scalability%20of%20clustering%20implementations-v0.7.ipynb>`_ .\nin particular `performance on low dimensional data is better than sklearn's dbscan <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/benchmarking%20scalability%20of%20clustering%20implementations%202d%20v0.7.ipynb>`_ ,\nand via support for caching with joblib, re-clustering with different parameters\ncan be almost free.\n\n------------------------\nadditional functionality\n------------------------\n\nthe hdbscan package comes equipped with visualization tools to help you\nunderstand your clustering results. after fitting data the clusterer\nobject has attributes for:\n\n* the condensed cluster hierarchy\n* the robust single linkage cluster hierarchy\n* the reachability distance minimal spanning tree\n\nall of which come equipped with methods for plotting and converting\nto pandas or networkx for further analysis. see the notebook on\n`how hdbscan works <http://nbviewer.jupyter.org/github/scikit-learn-contrib/hdbscan/blob/master/notebooks/how%20hdbscan%20works.ipynb>`_ for examples and further details.\n\nthe clusterer objects also have an attribute providing cluster membership\nstrengths, resulting in optional soft clustering (and no further compute \nexpense). finally each cluster also receives a persistence score giving\nthe stability of the cluster over the range of distance scales present\nin the data. this provides a measure of the relative strength of clusters.\n\n-----------------\noutlier detection\n-----------------\n\nthe hdbscan clusterer objects also support the glosh outlier detection algorithm. \nafter fitting the clusterer to data the outlier scores can be accessed via the\n``outlier_scores_`` attribute. the result is a vector of score values, one for\neach data point that was fit. higher scores represent more outlier like objects.\nselecting outliers via upper quantiles is often a good approach.\n\nbased on the paper:\n    r.j.g.b. campello, d. moulavi, a. zimek and j. sander \n    *hierarchical density estimates for data clustering, visualization, and outlier detection*, \n    acm trans. on knowledge discovery from data, vol 10, 1 (july 2015), 1-51.\n\n---------------------\nrobust single linkage\n---------------------\n\nthe hdbscan package also provides support for the *robust single linkage*\nclustering algorithm of chaudhuri and dasgupta. as with the hdbscan \nimplementation this is a high performance version of the algorithm \noutperforming scipy's standard single linkage implementation. the\nrobust single linkage hierarchy is available as an attribute of\nthe robust single linkage clusterer, again with the ability to plot\nor export the hierarchy, and to extract flat clusterings at a given\ncut level and gamma value.\n\nexample usage:\n\n.. code:: python\n\n    import hdbscan\n    from sklearn.datasets import make_blobs\n    \n    data, _ = make_blobs(1000)\n    \n    clusterer = hdbscan.robustsinglelinkage(cut=0.125, k=7)\n    cluster_labels = clusterer.fit_predict(data)\n    hierarchy = clusterer.cluster_hierarchy_\n    alt_labels = hierarchy.get_clusters(0.100, 5)\n    hierarchy.plot()\n\n\nbased on the paper:\n    k. chaudhuri and s. dasgupta.\n    *\"rates of convergence for the cluster tree.\"*\n    in advances in neural information processing systems, 2010.\n\n----------\ninstalling\n----------\n\neasiest install, if you have anaconda (thanks to conda-forge which is awesome!):\n\n.. code:: bash\n\n    conda install -c conda-forge hdbscan\n\npypi install, presuming you have an up to date pip:\n\n.. code:: bash\n\n    pip install hdbscan\n\nbinary wheels for a number of platforms are available thanks to the work of\nryan helinski <rlhelinski@gmail.com>.\n\nif pip is having difficulties pulling the dependencies then we'd suggest to first upgrade\npip to at least version 10 and try again:\n\n.. code:: bash\n\n    pip install --upgrade pip\n    pip install hdbscan\n\notherwise install the dependencies manually using anaconda followed by pulling hdbscan from pip:\n\n.. code:: bash\n\n    conda install cython\n    conda install numpy scipy\n    conda install scikit-learn\n    pip install hdbscan\n\n\nfor a manual install of the latest code directly from github:\n\n.. code:: bash\n\n    pip install --upgrade git+https://github.com/scikit-learn-contrib/hdbscan.git#egg=hdbscan\n\n\nalternatively download the package, install requirements, and manually run the installer:\n\n\n.. code:: bash\n\n    wget https://github.com/scikit-learn-contrib/hdbscan/archive/master.zip\n    unzip master.zip\n    rm master.zip\n    cd hdbscan-master\n    \n    pip install -r requirements.txt\n    \n    python setup.py install\n\n-----------------\nrunning the tests\n-----------------\n\nthe package tests can be run after installation using the command:\n\n.. code:: bash\n\n    nosetests -s hdbscan\n\nor, if ``nose`` is installed but ``nosetests`` is not in your ``path`` variable:\n\n.. code:: bash\n\n    python -m nose -s hdbscan\n\nif one or more of the tests fail, please report a bug at https://github.com/scikit-learn-contrib/hdbscan/issues/new\n\n--------------\npython version\n--------------\n\nthe hdbscan library supports both python 2 and python 3. however we recommend python 3 as the better option if it is available to you.\n    \n----------------\nhelp and support\n----------------\n\nfor simple issues you can consult the `faq <https://hdbscan.readthedocs.io/en/latest/faq.html>`_ in the documentation.\nif your issue is not suitably resolved there, please check the `issues <https://github.com/scikit-learn-contrib/hdbscan/issues>`_ on github. finally, if no solution is available there feel free to `open an issue <https://github.com/scikit-learn-contrib/hdbscan/issues/new>`_ ; the authors will attempt to respond in a reasonably timely fashion.\n\n------------\ncontributing\n------------\n\nwe welcome contributions in any form! assistance with documentation, particularly expanding tutorials,\nis always welcome. to contribute please `fork the project <https://github.com/scikit-learn-contrib/hdbscan/issues#fork-destination-box>`_ make your changes and submit a pull request. we will do our best to work through any issues with\nyou and get your code merged into the main branch.\n\n------\nciting\n------\n\nif you have used this codebase in a scientific publication and wish to cite it, please use the `journal of open source software article <http://joss.theoj.org/papers/10.21105/joss.00205>`_.\n\n    l. mcinnes, j. healy, s. astels, *hdbscan: hierarchical density based clustering*\n    in: journal of open source software, the open journal, volume 2, number 11.\n    2017\n    \n.. code:: bibtex\n\n    @article{mcinnes2017hdbscan,\n      title={hdbscan: hierarchical density based clustering},\n      author={mcinnes, leland and healy, john and astels, steve},\n      journal={the journal of open source software},\n      volume={2},\n      number={11},\n      pages={205},\n      year={2017}\n    }\n    \nto reference the high performance algorithm developed in this library please cite our paper in icdmw 2017 proceedings.\n\n    mcinnes l, healy j. *accelerated hierarchical density based clustering* \n    in: 2017 ieee international conference on data mining workshops (icdmw), ieee, pp 33-42.\n    2017\n\n\n.. code:: bibtex\n\n    @inproceedings{mcinnes2017accelerated,\n      title={accelerated hierarchical density based clustering},\n      author={mcinnes, leland and healy, john},\n      booktitle={data mining workshops (icdmw), 2017 ieee international conference on},\n      pages={33--42},\n      year={2017},\n      organization={ieee}\n    }\n\n---------\nlicensing\n---------\n\nthe hdbscan package is 3-clause bsd licensed. enjoy.\n",
  "docs_url": null,
  "keywords": "cluster clustering density hierarchical",
  "license": "bsd",
  "name": "hdbscan",
  "package_url": "https://pypi.org/project/hdbscan/",
  "project_url": "https://pypi.org/project/hdbscan/",
  "project_urls": {
    "Homepage": "http://github.com/scikit-learn-contrib/hdbscan"
  },
  "release_url": "https://pypi.org/project/hdbscan/0.8.33/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "clustering based on density with variable density clusters",
  "version": "0.8.33",
  "releases": [],
  "developers": [
    "leland.mcinnes@gmail.com",
    "leland_mcinnes"
  ],
  "kwds": "cluster_hierarchy_ hdbscan clusters get_clusters cluster",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_hdbscan",
  "homepage": "http://github.com/scikit-learn-contrib/hdbscan",
  "release_count": 51,
  "dependency_ids": []
}
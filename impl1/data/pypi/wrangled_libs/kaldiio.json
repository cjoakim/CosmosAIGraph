{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: sound/audio :: analysis"
  ],
  "description": "# kaldiio\n[![pypi](https://img.shields.io/pypi/v/kaldiio.svg)](https://pypi.python.org/pypi/kaldiio)\n[![supported python versions](https://img.shields.io/pypi/pyversions/kaldiio.svg)](https://pypi.python.org/pypi/kaldiio)\n[![codecov](https://codecov.io/gh/nttcslab-sp/kaldiio/branch/master/graph/badge.svg)](https://codecov.io/gh/nttcslab-sp/kaldiio)\n\na pure python module for reading and writing kaldi ark files\n\n- [introduction](#introduction)\n    - [what is this? what are `ark` and `scp`?](#what-is-this-what-are-ark-and-scp)\n    - [features](#features)\n    - [similar projects](#similar-projects)\n- [install](#install)\n- [usage](#usage)\n    - [readhelper](#readhelper)\n    - [writehelper](#writehelper)\n- [more low level api](#more-low-level-api)\n\n## introduction\n### what are `ark` and `scp`?\n`kaldiio` is an io utility  implemented in pure python language for several file formats used in [kaldi](https://github.com/kaldi-asr/kaldi), which are named as`ark` and `scp`.  `ark` and `scp` are used in  in order to archive some objects defined in kaldi, typically it is matrix object of kaldi.\n\nin this section, we describe the basic concept of `ark` and `scp`. more detail about the file-io in `kaldi-asr`: http://kaldi-asr.org/doc/io.html\n\n\n#### basic of file io in kaldi: ark and copy-feats\n`ark` is an archive format to save any `kaldi objects`. this library mainly support `kaldimatrix/kaldivector`.\nthis ia an example of ark file of kaldimatrix: [ark file](tests/arks/test.ark)\n\nif you have `kaldi`, you can convert it to text format as following\n\n```bash\n# copy-feats <read-specifier> <write-specifier>\ncopy-feats ark:test.ark ark,t:text.ark\n```\n\n\n`copy-feats` is designed to have high affinity with unix command line:\n\n1. `ark` can be flushed to and from unix pipe.\n\n        cat test.ark | copy-feats ark:- ark,t:- | less # show the contents in the ark\n    `-` indicates standard input stream or output stream.\n1. unix command can be used as `read-specifier` and `wspecifier`\n\n        copy-feats ark:'gunzip -c some.ark.gz |' ark:some.ark\n\n#### scp file\n`scp` is a text file such as,\n\n```\nuttid1 /some/where/feats.ark:123\nuttid2 /some/where/feats.ark:156\nuttid3 /some/where/feats.ark:245\n```\nthe first column, `uttid1`, indicates the utterance id and the second, `/some/where/feats.ark:123`, is the file path of matrix/vector of kaldi formats.  the number after colon is a starting addressof the object of the file.\n\n`scp` looks very simple format, but has several powerful features.\n\n1. mutual conversion between`ark` and `scp`\n\n        copy-feats scp:foo.scp ark:foo.ark  # scp -> ark\n        copy-feats ark:foo.ark ark,scp:bar.ark,bar.scp  # ark -> ark,scp\n\n1. unix command can be used insead of direct file path\n\n    for example, the following scp file can be also used.\n\n        uttid1 cat /some/where/feats1.mat |\n        uttid2 cat /some/where/feats2.mat |\n        uttid3 cat /some/where/feats3.mat |\n\n#### wav.scp\n`wav.scp` is a `scp` to describe wave file paths.\n\n```\nuttid1 /some/path/a.wav\nuttid2 /some/path/b.wav\nuttid3 /some/path/c.wav\n```\n\n`wav.scp` is also can be embeded unix command as normal scp file. this is often used for converting file format in kaldi recipes.\n\n```\nuttid1 sph2pipe -f wav /some/path/a.wv1 |\nuttid2 sph2pipe -f wav /some/path/b.wv1 |\nuttid3 sph2pipe -f wav /some/path/c.wv1 |\n```\n\n### features\nkaldiio supports:\n\n- read/write for archive formats: ark, scp\n  - binary/text - float/double matrix: dm, fm\n  - binary/text - float/double vector: dv, fv\n  - compressed matrix for loading: cm, cm2, cm3\n  - compressed matrix for writing: all compressoin_method are supported: 1,2,3,4,5,6,7\n  - binary/text for int-vector, typically used for `ali` files.\n- read/write via a pipe: e.g. \"ark: cat feats.ark |\"\n- read wav.scp / wav.ark\n- (new!) some extended ark format **not supported** in kaldi originally.\n  - the ark file for numpy, pickle, wav, flac files.\n\nthe followings are **not supported**\n\n- write in existing scp file\n- nnet2/nnet3 egs\n- lattice file\n\n### similar projects\n- python-c++ binding\n   - https://github.com/pykaldi/pykaldi\n      - looks great. i recommend pykaldi if you aren't particular about pure python.\n   - https://github.com/janchorowski/kaldi-python/\n      - maybe not enough maintained now.\n   - https://github.com/t13m/kaldi-readers-for-tensorflow\n      - ark reader for tensorflow\n   - https://github.com/csukuangfj/kaldi_native_io\n      - implemented in c++\n      - have interface for python\n      - support all types of `rspecifier` and `wspecifier`\n      - have a uniform interface for writing, sequential reading, and random access reading\n      - `pip install kaldi_native_io`\n- pure python\n   - https://github.com/vesis84/kaldi-io-for-python\n      - `kaldiio` is based on this module, but `kaldiio` supports more features than it.\n   - https://github.com/funcwj/kaldi-python-io\n      - python>=3.6. `nnet3-egs`is also supported.\n\n## install\n\n```bash\npip install kaldiio\n```\n\n## usage\n`kaldiio` doesn't distinguish the api for each kaldi-objects, i.e.\n`kaldi-matrix`, `kaldi-vector`, not depending on whether it is binary or text, or compressed or not,\ncan be handled by the same api.\n\n### readhelper\n`readhelper` supports sequential accessing for `scp` or `ark`. if you need to access randomly, then use `kaldiio.load_scp`.\n\n\n- read matrix-scp\n\n```python\nfrom kaldiio import readhelper\nwith readhelper('scp:file.scp') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n\n- read gziped ark\n\n```python\nfrom kaldiio import readhelper\nwith readhelper('ark: gunzip -c file.ark.gz |') as reader:\n    for key, numpy_array in reader:\n        ...\n\n# ali file\nwith readhelper('ark: gunzip -c exp/tri3_ali/ali.*.gz |') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n\n- read wav.scp\n\n```python\nfrom kaldiio import readhelper\nwith readhelper('scp:wav.scp') as reader:\n    for key, (rate, numpy_array) in reader:\n        ...\n```\n\n\u3000\u3000\u3000\u3000- v2.11.0: removed `wav` option. you can load `wav.scp` without any addtional argument.\n\n- read wav.scp with segments\n\n```python\nfrom kaldiio import readhelper\nwith readhelper('scp:wav.scp', segments='segments') as reader\n    for key, (rate, numpy_array) in reader:\n        ...\n```\n\n- read from stdin\n\n```python\nfrom kaldiio import readhelper\nwith readhelper('ark:-') as reader:\n    for key, numpy_array in reader:\n        ...\n```\n\n### writehelper\n- write matrices and vectors in a ark with scp\n\n```python\nimport numpy\nfrom kaldiio import writehelper\nwith writehelper('ark,scp:file.ark,file.scp') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n        # the following is equivalent\n        # writer[str(i)] = numpy.random.randn(10, 10)\n```\n\n- write in compressed matrix\n\n```python\nimport numpy\nfrom kaldiio import writehelper\nwith writehelper('ark:file.ark', compression_method=2) as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n- write matrices in text\n\n```python\nimport numpy\nfrom kaldiio import writehelper\nwith writehelper('ark,t:file.ark') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n- write in gziped ark\n\n```python\nimport numpy\nfrom kaldiio import writehelper\nwith writehelper('ark:| gzip -c > file.ark.gz') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n- write matrice to stdout\n\n```python\nimport numpy\nfrom kaldiio import writehelper\nwith writehelper('ark:-') as writer:\n    for i in range(10):\n        writer(str(i), numpy.random.randn(10, 10))\n```\n\n\n- (new!) extended ark format using numpy, pickle, soundfile\n\n```python\nimport numpy\nfrom kaldiio import writehelper\n\n# npy ark\nwith writehelper('ark:-', write_function=\"numpy\") as writer:\n    writer(\"foo\", numpy.random.randn(10, 10))\n\n# pickle ark\nwith writehelper('ark:-', write_function=\"pickle\") as writer:\n    writer(\"foo\", numpy.random.randn(10, 10))\n    \n# flac ark\nwith writehelper('ark:-', write_function=\"soundfile_flac\") as writer:\n    writer(\"foo\", numpy.random.randn(1000))\n```\n\nnote that `soundfile` is an optional module and you need to install it to use this feature.\n\n```sh\npip install soundfile\n```\n\n## more low level api\n`writehelper` and `readhelper` are high level wrapper of the following api to support kaldi style arguments.\n\n### load_ark\n\n```python\nimport kaldiio\n\nd = kaldiio.load_ark('a.ark')  # d is a generator object\nfor key, numpy_array in d:\n    ...\n\n# === load_ark can accepts file descriptor, too\nwith open('a.ark') as fd:\n    for key, numpy_array in kaldiio.load_ark(fd):\n        ...\n\n# === use with open_like_kaldi\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('gunzip -c file.ark.gz |', 'r') as f:\n    for key, numpy_array in kaldiio.load_ark(fd):\n        ...\n```\n\n- `load_ark` can load both matrices of ark and vectors of ark and also, it can be both text and binary.\n\n### load_scp\n`load_scp` creates \"lazy dict\", i.e.\nthe data are loaded in memory when accessing the element.\n\n```python\nimport kaldiio\n\nd = kaldiio.load_scp('a.scp')\nfor key in d:\n    numpy_array = d[key]\n\n\nwith open('a.scp') as fd:\n    kaldiio.load_scp(fd)\n\nd = kaldiio.load_scp('data/train/wav.scp', segments='data/train/segments')\nfor key in d:\n    rate, numpy_array = d[key]\n```\n\nthe object created by `load_scp` is a dict-like object, thus it has methods of `dict`.\n\n```python\nimport kaldiio\nd = kaldiio.load_scp('a.scp')\nd.keys()\nd.items()\nd.values()\n'uttid' in d\nd.get('uttid')\n```\n\n### load_scp_sequential (from v2.13.0)\n\n`load_scp_sequential` creates \"generator\" as same as `load_ark`.\nif you don't need random-accessing for each elements\nand use it just to iterate for whole data,\nthen this method possibly performs faster than `load_scp`.\n\n```python\nimport kaldiio\nd = kaldiio.load_scp_sequential('a.scp')\nfor key, numpy_array in d:\n    ...\n```\n\n### load_wav_scp\n```python\nd = kaldiio.load_scp('wav.scp')\nfor key in d:\n    rate, numpy_array = d[key]\n\n# supporting \"segments\"\nd = kaldiio.load_scp('data/train/wav.scp', segments='data/train/segments')\nfor key in d:\n    rate, numpy_array = d[key]\n```\n\n- v2.11.0: `load_wav_scp` is deprecated now. use `load_scp`.\n\n### load_mat\n```python\nnumpy_array = kaldiio.load_mat('a.mat')\nnumpy_array = kaldiio.load_mat('a.ark:1134')  # seek and load\n\n# if the file is wav, gets tuple[int, numpy.ndarray]\nrate, numpy_array = kaldiio.load_mat('a.wav')\n```\n- `load_mat` can load kaldi-matrix, kaldi-vector, and wave\n\n### save_ark\n```python\n\n# === create ark file from numpy\nkaldiio.save_ark('b.ark', {'key': numpy_array, 'key2': numpy_array2})\n# create ark with scp _file, too\nkaldiio.save_ark('b.ark', {'key': numpy_array, 'key2': numpy_array2},\n                 scp='b.scp')\n\n# === writes arrays to sys.stdout\nimport sys\nkaldiio.save_ark(sys.stdout, {'key': numpy_array})\n\n# === writes arrays for each keys\n# generate a.ark\nkaldiio.save_ark('a.ark', {'key': numpy_array, 'key2': numpy_array2})\n# after here, a.ark is opened with 'a' (append) mode.\nkaldiio.save_ark('a.ark', {'key3': numpy_array3}, append=true)\n\n\n# === use with open_like_kaldi\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('| gzip a.ark.gz', 'w') as f:\n    kaldiio.save_ark(f, {'key': numpy_array})\n    kaldiio.save_ark(f, {'key2': numpy_array2})\n```\n### save_mat\n```python\n# array.ndim must be 1 or 2\nkaldiio.save_mat('a.mat', numpy_array)\n```\n- `save_mat` can save both kaldi-matrix and kaldi-vector\n\n\n### open_like_kaldi\n\n``kaldiio.open_like_kaldi`` is a useful tool if you are familiar with kaldi. this function can performs as following,\n\n```python\nfrom kaldiio import open_like_kaldi\nwith open_like_kaldi('echo -n hello |', 'r') as f:\n    assert f.read() == 'hello'\nwith open_like_kaldi('| cat > out.txt', 'w') as f:\n    f.write('hello')\nwith open('out.txt', 'r') as f:\n    assert f.read() == 'hello'\n\nimport sys\nwith open_like_kaldi('-', 'r') as f:\n    assert f is sys.stdin\nwith open_like_kaldi('-', 'w') as f:\n    assert f is sys.stdout\n```\n\nfor example, if there are gziped alignment file, then you can load it as:\n\n```python\nfrom kaldiio import open_like_kaldi, load_ark\nwith open_like_kaldi('gunzip -c exp/tri3_ali/ali.*.gz |', 'rb') as f:\n    # alignment format equals ark of intvector\n    g = load_ark(f)\n    for k, numpy_array in g:\n        ...\n```\n\n### parse_specifier\n\n```python\nfrom kaldiio import parse_specifier, open_like_kaldi, load_ark\nrspecifier = 'ark:gunzip -c file.ark.gz |'\nspec_dict = parse_specifier(rspecifier)\n# spec_dict = {'ark': 'gunzip -c file.ark.gz |'}\n\nwith open_like_kaldi(spec_dict['ark'], 'rb') as fark:\n    for key, numpy_array in load_ark(fark):\n        ...\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "kaldiio",
  "package_url": "https://pypi.org/project/kaldiio/",
  "project_url": "https://pypi.org/project/kaldiio/",
  "project_urls": {
    "Homepage": "https://github.com/nttcslab-sp/kaldiio"
  },
  "release_url": "https://pypi.org/project/kaldiio/2.18.0/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "summary": "kaldi-ark loading and writing module",
  "version": "2.18.0",
  "releases": [],
  "developers": [
    "nttcslab"
  ],
  "kwds": "kaldi_native_io python kaldiio load_ark open_like_kaldi",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_kaldiio",
  "homepage": "https://github.com/nttcslab-sp/kaldiio",
  "release_count": 17,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
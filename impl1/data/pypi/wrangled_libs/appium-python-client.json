{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: win32 (ms windows)",
    "intended audience :: developers",
    "intended audience :: other audience",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing"
  ],
  "description": "# appium python client\n\n[![pypi version](https://badge.fury.io/py/appium-python-client.svg)](https://badge.fury.io/py/appium-python-client)\n[![downloads](https://pepy.tech/badge/appium-python-client)](https://pepy.tech/project/appium-python-client)\n\n[![build status](https://dev.azure.com/appiumci/appium%20ci/_apis/build/status/appium.python-client?branchname=master)](https://dev.azure.com/appiumci/appium%20ci/_build/latest?definitionid=56&branchname=master)\n\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nan extension library for adding [webdriver protocol](https://www.w3.org/tr/webdriver/) and appium commands to the selenium python language binding for use with the mobile testing framework [appium](https://appium.io).\n\n## getting the appium python client\n\nthere are three ways to install and use the appium python client.\n\n1. install from [pypi](https://pypi.org), as\n['appium-python-client'](https://pypi.org/project/appium-python-client/).\n\n    ```shell\n    pip install appium-python-client\n    ```\n\n    you can see the history from [here](https://pypi.org/project/appium-python-client/#history)\n\n2. install from source, via [pypi](https://pypi.org). from ['appium-python-client'](https://pypi.org/project/appium-python-client/),\ndownload and unarchive the source tarball (appium-python-client-x.x.tar.gz).\n\n    ```shell\n    tar -xvf appium-python-client-x.x.tar.gz\n    cd appium-python-client-x.x\n    python setup.py install\n    ```\n\n3. install from source via [github](https://github.com/appium/python-client).\n\n    ```shell\n    git clone git@github.com:appium/python-client.git\n    cd python-client\n    python setup.py install\n    ```\n\n## compatibility matrix\n\n|appium python client| selenium binding| python version |\n|----|----|----|\n|`3.0.0`+ |`4.12.0`+ | 3.8+ |\n|`2.10.0` - `2.11.1` |`4.1.0` - `4.11.2` | 3.7+ |\n|`2.2.0` - `2.9.0` |`4.1.0` - `4.9.0` | 3.7+ |\n|`2.0.0` - `2.1.4` |`4.0.0` | 3.7+ |\n|`1.0.0` - `1.1.0` |`3.x`| 3.7, 3.8 |\n|`0.52` and below|`3.x`| 2.7, 3.4 - 3.7 |\n\nthe appium python client depends on [selenium python binding](https://pypi.org/project/selenium/), thus\nthe selenium python binding update might affect the appium python client behavior.\nfor example, some changes in the selenium binding could break the appium client.\n\n> **note**\n> we strongly recommend you manage dependencies with version management tools such as pipenv and requirements.txt\n> to keep compatible version combinations.\n\n\n### quick migration guide from v2 to v3\n- `options` keyword argument in the `webdriver.remote` constructor such as `xcuitestoptions` instead of `desired_capabilities`\n    - available options are https://github.com/appium/python-client/tree/master/appium/options\n        - please check the [usage](#usage) below as an exampple.\n    - not a \"new\" change, but the `desired_capabilities` argument has been removed since v3.\n- replacement\n    - `start_activity` method: please use [`mobile: startactivity`](https://github.com/appium/appium-uiautomator2-driver?tab=readme-ov-file#mobile-startactivity)\n    - `launch_app`, `close_app` and `reset` methods: please refer to https://github.com/appium/appium/issues/15807\n    - `available_ime_engines`, `is_ime_active`, `activate_ime_engine`, `deactivate_ime_engine` and `active_ime_engine` methods: please use [`mobile: shell`](https://github.com/appium/appium-uiautomator2-driver?tab=readme-ov-file#mobile-shell)\n    - `set_value` and `set_text` methods: please use `element.send_keys` or `send_keys` by w3c actions\n- removal\n    - `end_test_coverage` method is no longer available\n    - `session` property is no longer available\n    - `all_sessions` property is no longer available\n\n### quick migration guide from v1 to v2\n- enhancement\n    - updated base selenium python binding version to v4\n        - removed `forcemjsonwp` since selenium v4 and appium python client v2 expect only w3c webdriver protocol\n    - methods `actionhelpers#scroll`, `actionhelpers#drag_and_drop`, `actionhelpers#tap`, `actionhelpers#swipe` and `actionhelpers#flick` now call w3c actions as its backend\n        - please check each behavior. their behaviors could slightly differ.\n    - added `strict_ssl` to relax ssl errors such as self-signed ones\n- deprecated\n    - `multiaction` and `touchaction` are deprecated. please use w3c webdriver actions.\n        - e.g.\n            - [appium/webdriver/extensions/action_helpers.py](appium/webdriver/extensions/action_helpers.py)\n            - https://www.selenium.dev/documentation/support_packages/mouse_and_keyboard_actions_in_detail/\n            - https://www.youtube.com/watch?v=oaj7jwmnfvu\n            - https://appiumpro.com/editions/30-ios-specific-touch-action-methods\n            - https://appiumpro.com/editions/29-automating-complex-gestures-with-the-w3c-actions-api\n    - `launch_app`, `close_app`, and `reset` are deprecated. please read [issues#15807](https://github.com/appium/appium/issues/15807) for more details\n\n#### multiaction/touchaction to w3c actions\n\non uia2, some elements can be handled with `touch` pointer action instead of the default `mouse` pointer action in the selenium python client.\nfor example, the below action builder is to replace the default one with the `touch` pointer action.\n\n```python\nfrom selenium.webdriver.common.actions import interaction\nfrom selenium.webdriver.common.actions.action_builder import actionbuilder\n\nactions = actionchains(driver)\n# override as 'touch' pointer action\nactions.w3c_actions = actionbuilder(driver, mouse=pointerinput(interaction.pointer_touch, \"touch\"))\nactions.w3c_actions.pointer_action.move_to_location(start_x, start_y)\nactions.w3c_actions.pointer_action.pointer_down()\nactions.w3c_actions.pointer_action.pause(2)\nactions.w3c_actions.pointer_action.move_to_location(end_x, end_y)\nactions.w3c_actions.pointer_action.release()\nactions.perform()\n```\n\n## usage\n\nthe appium python client is fully compliant with the webdriver protocol\nincluding several helpers to make mobile testing in python easier.\n\nto use the new functionality now, and to use the superset of functions, instead of\nincluding the selenium `webdriver` module in your test code, use that from\nappium instead.\n\n```python\nfrom appium import webdriver\n```\n\nfrom there much of your test code will work with no change.\n\nas a base for the following code examples, the following set up the [unittest](https://docs.python.org/3/library/unittest.html)\nenvironment:\n\n```python\n# python/pytest\nimport pytest\n\nfrom appium import webdriver\n# options are only available since client version 2.3.0\n# if you use an older client then switch to desired_capabilities\n# instead: https://github.com/appium/python-client/pull/720\nfrom appium.options.android import uiautomator2options\nfrom appium.options.ios import xcuitestoptions\nfrom appium.webdriver.appium_service import appiumservice\nfrom appium.webdriver.common.appiumby import appiumby\n\nappium_port = 4723\nappium_host = '127.0.0.1'\n\n\n# hint: fixtures below could be extracted into conftest.py\n# hint: and shared across all tests in the suite\n@pytest.fixture(scope='session')\ndef appium_service():\n    service = appiumservice()\n    service.start(\n        # check the output of `appium server --help` for the complete list of\n        # server command line arguments\n        args=['--address', appium_host, '-p', str(appium_port)],\n        timeout_ms=20000,\n    )\n    yield service\n    service.stop()\n\n\ndef create_ios_driver(custom_opts = none):\n    options = xcuitestoptions()\n    options.platformversion = '13.4'\n    options.udid = '123456789abc'\n    if custom_opts is not none:\n        options.load_capabilities(custom_opts)\n    # appium1 points to http://127.0.0.1:4723/wd/hub by default\n    return webdriver.remote(f'http://{appium_host}:{appium_port}', options=options)\n\n\ndef create_android_driver(custom_opts = none):\n    options = uiautomator2options()\n    options.platformversion = '10'\n    options.udid = '123456789abc'\n    if custom_opts is not none:\n        options.load_capabilities(custom_opts)\n    # appium1 points to http://127.0.0.1:4723/wd/hub by default\n    return webdriver.remote(f'http://{appium_host}:{appium_port}', options=options)\n\n\n@pytest.fixture\ndef ios_driver_factory():\n    return create_ios_driver\n\n\n@pytest.fixture\ndef ios_driver():\n    # prefer this fixture if there is no need to customize driver options in tests\n    driver = create_ios_driver()\n    yield driver\n    driver.quit()\n\n\n@pytest.fixture\ndef android_driver_factory():\n    return create_android_driver\n\n\n@pytest.fixture\ndef android_driver():\n    # prefer this fixture if there is no need to customize driver options in tests\n    driver = create_android_driver()\n    yield driver\n    driver.quit()\n\n\ndef test_ios_click(appium_service, ios_driver_factory):\n    # usage of the context manager ensures the driver session is closed properly\n    # after the test completes. otherwise, make sure to call `driver.quit()` on teardown.\n    with ios_driver_factory({\n        'appium:app': '/path/to/app/uicatalog.app.zip'\n    }) as driver:\n        el = driver.find_element(by=appiumby.accessibility_id, value='item')\n        el.click()\n\n\ndef test_android_click(appium_service, android_driver_factory):\n    # usage of the context manager ensures the driver session is closed properly\n    # after the test completes. otherwise, make sure to call `driver.quit()` on teardown.\n    with android_driver_factory({\n        'appium:app': '/path/to/app/test-app.apk',\n        'appium:udid': '567890',\n    }) as driver:\n        el = driver.find_element(by=appiumby.accessibility_id, value='item')\n        el.click()\n```\n\n## direct connect urls\n\nif your selenium/appium server decorates the new session capabilities response with the following keys:\n\n- `directconnectprotocol`\n- `directconnecthost`\n- `directconnectport`\n- `directconnectpath`\n\nthen python client will switch its endpoint to the one specified by the values of those keys.\n\n```python\nfrom appium import webdriver\n# options are only available since client version 2.3.0\n# if you use an older client then switch to desired_capabilities\n# instead: https://github.com/appium/python-client/pull/720\nfrom appium.options.ios import xcuitestoptions\n\n# load_capabilities api could be used to\n# load options mapping stored in a dictionary\noptions = xcuitestoptions().load_capabilities({\n    'platformversion': '13.4',\n    'devicename': 'iphone simulator',\n    'app': '/full/path/to/app/uicatalog.app.zip',\n})\n\ndriver = webdriver.remote(\n    # appium1 points to http://127.0.0.1:4723/wd/hub by default\n    'http://127.0.0.1:4723',\n    options=options,\n    direct_connection=true\n)\n```\n\n## relax ssl validation\n\n`strict_ssl` option allows you to send commands to an invalid certificate host like a self-signed one.\n\n```python\nfrom appium import webdriver\n# options are only available since client version 2.3.0\n# if you use an older client then switch to desired_capabilities\n# instead: https://github.com/appium/python-client/pull/720\nfrom appium.options.common import appiumoptions\n\noptions = appiumoptions()\noptions.platform_name = 'mac'\noptions.automation_name = 'safari'\n# set_capability api allows to provide any custom option\n# calls to it could be chained\noptions.set_capability('browser_name', 'safari')\n\n# appium1 points to http://127.0.0.1:4723/wd/hub by default\ndriver = webdriver.remote('http://127.0.0.1:4723', options=options, strict_ssl=false)\n```\n\n## set custom `appiumconnection`\n\nthe first argument of `webdriver.remote` can set an arbitrary command executor for you.\n\n1. set init arguments for the pool manager appium python client uses to manage http requests.\n\n```python\nfrom appium import webdriver\nfrom appium.options.ios import xcuitestoptions\n\nimport urllib3\nfrom appium.webdriver.appium_connection import appiumconnection\n\n# retry connection error up to 3 times.\ninit_args_for_pool_manage = {\n    'retries': urllib3.util.retry.retry(total=3, connect=3, read=false)\n}\nappium_executor = appiumconnection(\n    remote_server_addr='http://127.0.0.1:4723',\n    init_args_for_pool_manage=init_args_for_pool_manage\n)\n\noptions = xcuitestoptions()\noptions.platformversion = '13.4'\noptions.udid = '123456789abc'\noptions.app = '/full/path/to/app/uicatalog.app.zip'\ndriver = webdriver.remote(appium_executor, options=options)\n```\n\n\n2. define a subclass of `appiumconnection`\n\n```python\nfrom appium import webdriver\nfrom appium.options.ios import xcuitestoptions\n\nfrom appium.webdriver.appium_connection import appiumconnection\n\nclass customappiumconnection(appiumconnection):\n    # can add your own methods for the custom class\n    pass\n\ncustom_executor = customappiumconnection(remote_server_addr='http://127.0.0.1:4723')\n\noptions = xcuitestoptions().load_capabilities({\n    'platformversion': '13.4',\n    'devicename': 'iphone simulator',\n    'app': '/full/path/to/app/uicatalog.app.zip',\n})\ndriver = webdriver.remote(custom_executor, options=options)\n\n```\n\n\n## documentation\n\n- https://appium.github.io/python-client-sphinx/ is detailed documentation\n- [functional tests](test/functional) also may help to see concrete examples.\n\n## development\n\n- code style: [pep-0008](https://www.python.org/dev/peps/pep-0008/)\n  - apply `black`, `isort` and `mypy` as pre commit hook\n  - run `make` command for development. see `make help` output for details\n- docstring style: [google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)\n- `gitchangelog` generates `changelog.rst`\n\n### setup\n\n- `pip install --user pipenv`\n- `python -m pipenv lock --clear`\n  - if you experience `locking failed! unknown locale: utf-8` error, then refer [pypa/pipenv#187](https://github.com/pypa/pipenv/issues/187) to solve it.\n- `python -m pipenv install --dev --system`\n- `pre-commit install`\n\n### run tests\n\nyou can run all of the tests running on ci via `tox` in your local.\n\n```bash\n$ tox\n```\n\nyou also can run particular tests like below.\n\n#### unit\n\n```bash\n$ pytest test/unit\n```\n\nrun with `pytest-xdist`\n\n```bash\n$ pytest -n 2 test/unit\n```\n\n#### functional\n\n```bash\n$ pytest test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n```\n\n#### in parallel for ios\n\n1. create simulators named 'iphone x - 8100' and 'iphone x - 8101'\n2. install test libraries via pip, `pip install pytest pytest-xdist`\n3. run tests\n\n```bash\n$ pytest -n 2 test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n```\n\n## release\n\nfollow the below steps.\n\n```bash\n$ pip install twine\n$ pip install git+git://github.com/vaab/gitchangelog.git # getting via github repository is necessary for python 3.7\n# type the new version number and 'yes' if you can publish it\n# you can test the command with dry_run\n$ dry_run=1 ./release.sh\n$ ./release.sh # release\n```\n\n## license\n\napache license v2\n",
  "docs_url": null,
  "keywords": "appium,selenium,selenium 4,python client,mobile automation",
  "license": "apache 2.0",
  "name": "appium-python-client",
  "package_url": "https://pypi.org/project/Appium-Python-Client/",
  "project_url": "https://pypi.org/project/Appium-Python-Client/",
  "project_urls": {
    "Homepage": "http://appium.io/"
  },
  "release_url": "https://pypi.org/project/Appium-Python-Client/3.1.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python client for appium",
  "version": "3.1.1",
  "releases": [],
  "developers": [
    "isaac@saucelabs.com",
    "isaac_murchie",
    "kazuaki_matsuo"
  ],
  "kwds": "appium appiumpro appium1 appiumby appiumci",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_appium_python_client",
  "homepage": "http://appium.io/",
  "release_count": 96,
  "dependency_ids": []
}
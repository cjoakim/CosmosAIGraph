{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3"
  ],
  "description": "|travis| |codecov| |docs-status|\n\ndjango extra views - the missing class-based generic views for django\n========================================================================\n\ndjango-extra-views is a django package which introduces additional class-based views\nin order to simplify common design patterns such as those found in the django\nadmin interface.\n\nfull documentation is available at `read the docs`_.\n\n.. _read the docs: https://django-extra-views.readthedocs.io/\n\n.. |travis| image:: https://secure.travis-ci.org/andrewingram/django-extra-views.svg?branch=master\n    :target: https://travis-ci.org/andrewingram/django-extra-views\n    :alt: build status\n\n.. |codecov| image:: https://codecov.io/github/andrewingram/django-extra-views/coverage.svg?branch=master\n    :target: https://codecov.io/github/andrewingram/django-extra-views?branch=master\n    :alt: coverage status\n\n.. |docs-status| image:: https://readthedocs.org/projects/django-extra-views/badge/?version=latest\n    :target: https://django-extra-views.readthedocs.io/\n    :alt: documentation status\n\n.. installation-start\n\ninstallation\n------------\n\ninstall the stable release from pypi (using pip):\n\n.. code-block:: sh\n\n    pip install django-extra-views\n\nor install the current master branch from github:\n\n.. code-block:: sh\n\n    pip install -e git://github.com/andrewingram/django-extra-views.git#egg=django-extra-views\n\nthen add ``'extra_views'`` to your ``installed_apps``:\n\n.. code-block:: python\n\n    installed_apps = [\n        ...\n        'extra_views',\n        ...\n    ]\n\n.. installation-end\n\n.. features-start\n\nfeatures\n--------\n\n- ``formset`` and ``modelformset`` views - the formset equivalents of\n  ``formview`` and ``modelformview``.\n- ``inlineformsetview`` - lets you edit a formset related to a model (using\n  django's ``inlineformset_factory``).\n- ``createwithinlinesview`` and ``updatewithinlinesview`` - lets you edit a\n  model and multiple inline formsets all in one view.\n- ``genericinlineformsetview``, the equivalent of ``inlineformsetview`` but for\n  ``genericforeignkeys``.\n- support for generic inlines in ``createwithinlinesview`` and\n  ``updatewithinlinesview``.\n- support for naming each inline or formset in the template context with\n  ``namedformsetsmixin``.\n- ``sortablelistmixin`` - generic mixin for sorting functionality in your views.\n- ``searchablelistmixin`` - generic mixin for search functionality in your views.\n- ``successmessagemixin`` and ``formsetsuccessmessagemixin`` - generic mixins\n  to display success messages after form submission.\n\n.. features-end\n\nstill to do\n-----------\n\nadd support for pagination in modelformsetview and its derivatives, the goal\nbeing to be able to mimic the change_list view in django's admin. currently this\nis proving difficult because of how django's multipleobjectmixin handles pagination.\n\n.. quick-examples-start\n\nquick examples\n--------------\n\nformsetview\n^^^^^^^^^^^^^^^^^^^^^^^\n\ndefine a :code:`formsetview`, a view which creates a single formset from\n:code:`django.forms.formset_factory` and adds it to the context.\n\n.. code-block:: python\n\n    from extra_views import formsetview\n    from my_forms import addressform\n\n    class addressformset(formsetview):\n        form_class = addressform\n        template_name = 'address_formset.html'\n\nthen within ``address_formset.html``, render the formset like this:\n\n.. code-block:: html\n\n    <form method=\"post\">\n      ...\n      {{ formset }}\n      ...\n      <input type=\"submit\" value=\"submit\" />\n    </form>\n\nmodelformsetview\n^^^^^^^^^^^^^^^^^^^^\n\ndefine a :code:`modelformsetview`, a view which works as :code:`formsetview`\nbut instead renders a model formset using\n:code:`django.forms.modelformset_factory`.\n\n.. code-block:: python\n\n    from extra_views import modelformsetview\n\n\n    class itemformsetview(modelformsetview):\n        model = item\n        fields = ['name', 'sku']\n        template_name = 'item_formset.html'\n\ncreatewithinlinesview or updatewithinlinesview\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ndefine :code:`createwithinlinesview` and :code:`updatewithinlinesview`,\nviews which render a form to create/update a model instance and its related\ninline formsets. each of the :code:`inlineformsetfactory` classes use similar\nclass definitions as the :code:`modelformsetview`.\n\n.. code-block:: python\n\n    from extra_views import createwithinlinesview, updatewithinlinesview, inlineformsetfactory\n\n\n    class iteminline(inlineformsetfactory):\n        model = item\n        fields = ['sku', 'price', 'name']\n\n\n    class contactinline(inlineformsetfactory):\n        model = contact\n        fields = ['name', 'email']\n\n\n    class createorderview(createwithinlinesview):\n        model = order\n        inlines = [iteminline, contactinline]\n        fields = ['customer', 'name']\n        template_name = 'order_and_items.html'\n\n\n    class updateorderview(updatewithinlinesview):\n        model = order\n        inlines = [iteminline, contactinline]\n        fields = ['customer', 'name']\n        template_name = 'order_and_items.html'\n\n\nthen within ``order_and_items.html``, render the formset like this:\n\n.. code-block:: html\n\n    <form method=\"post\">\n      ...\n      {{ form }}\n\n      {% for formset in inlines %}\n        {{ formset }}\n      {% endfor %}\n      ...\n      <input type=\"submit\" value=\"submit\" />\n    </form>\n\n.. quick-examples-end",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-extra-views",
  "package_url": "https://pypi.org/project/django-extra-views/",
  "project_url": "https://pypi.org/project/django-extra-views/",
  "project_urls": {
    "Homepage": "https://github.com/AndrewIngram/django-extra-views"
  },
  "release_url": "https://pypi.org/project/django-extra-views/0.14.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "extra class-based views for django",
  "version": "0.14.0",
  "releases": [],
  "developers": [
    "andrew_ingram",
    "andy@andrewingram.net"
  ],
  "kwds": "extra_views django views view form_class",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_extra_views",
  "homepage": "https://github.com/andrewingram/django-extra-views",
  "release_count": 26,
  "dependency_ids": []
}
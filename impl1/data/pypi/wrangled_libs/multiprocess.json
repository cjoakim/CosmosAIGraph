{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "-----------------------------------------------------------------\nmultiprocess: better multiprocessing and multithreading in python\n-----------------------------------------------------------------\n\nabout multiprocess\n==================\n\n``multiprocess`` is a fork of ``multiprocessing``. ``multiprocess`` extends ``multiprocessing`` to provide enhanced serialization, using `dill`. ``multiprocess`` leverages ``multiprocessing`` to support the spawning of processes using the api of the python standard library's ``threading`` module. ``multiprocessing`` has been distributed as part of the standard library since python 2.6.\n\n``multiprocess`` is part of ``pathos``,  a python framework for heterogeneous computing.\n``multiprocess`` is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  a list of issues is located at https://github.com/uqfoundation/multiprocess/issues, with a legacy list maintained at https://uqfoundation.github.io/project/pathos/query.\n\n\nmajor features\n==============\n\n``multiprocess`` enables:\n\n    - objects to be transferred between processes using pipes or multi-producer/multi-consumer queues\n    - objects to be shared between processes using a server process or (for simple data) shared memory\n\n``multiprocess`` provides:\n\n    - equivalents of all the synchronization primitives in ``threading``\n    - a ``pool`` class to facilitate submitting tasks to worker processes\n    - enhanced serialization, using ``dill``\n\n\ncurrent release\n===============\n\nthe latest released version of ``multiprocess`` is available from:\n\n    https://pypi.org/project/multiprocess\n\n``multiprocess`` is distributed under a 3-clause bsd license, and is a fork of ``multiprocessing``.\n\n\ndevelopment version\n===================\n\nyou can get the latest development version with all the shiny new features at:\n\n    https://github.com/uqfoundation\n\nif you have a new contribution, please submit a pull request.\n\n\ninstallation\n============\n\n``multiprocess`` can be installed with ``pip``::\n\n    $ pip install multiprocess\n\nfor python 2, a c compiler is required to build the included extension module from source. python 3 and binary installs do not require a c compiler.\n\n\nrequirements\n============\n\n``multiprocess`` requires:\n\n    - ``python`` (or ``pypy``), **>=3.7**\n    - ``setuptools``, **>=42**\n    - ``dill``, **>=0.3.7**\n\n\nbasic usage\n===========\n\nthe ``multiprocess.process`` class follows the api of ``threading.thread``.\nfor example ::\n\n    from multiprocess import process, queue\n\n    def f(q):\n        q.put('hello world')\n\n    if __name__ == '__main__':\n        q = queue()\n        p = process(target=f, args=[q])\n        p.start()\n        print (q.get())\n        p.join()\n\nsynchronization primitives like locks, semaphores and conditions are\navailable, for example ::\n\n    >>> from multiprocess import condition\n    >>> c = condition()\n    >>> print (c)\n    <condition(<rlock(none, 0)>), 0>\n    >>> c.acquire()\n    true\n    >>> print (c)\n    <condition(<rlock(mainprocess, 1)>), 0>\n\none can also use a manager to create shared objects either in shared\nmemory or in a server process, for example ::\n\n    >>> from multiprocess import manager\n    >>> manager = manager()\n    >>> l = manager.list(range(10))\n    >>> l.reverse()\n    >>> print (l)\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    >>> print (repr(l))\n    <proxy[list] object at 0x00e1b3b0>\n\ntasks can be offloaded to a pool of worker processes in various ways,\nfor example ::\n\n    >>> from multiprocess import pool\n    >>> def f(x): return x*x\n    ...\n    >>> p = pool(4)\n    >>> result = p.map_async(f, range(10))\n    >>> print (result.get(timeout=1))\n    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nwhen ``dill`` is installed, serialization is extended to most objects,\nfor example ::\n\n    >>> from multiprocess import pool\n    >>> p = pool(4)\n    >>> print (p.map(lambda x: (lambda y:y**2)(x) + x, xrange(10)))\n    [0, 2, 6, 12, 20, 30, 42, 56, 72, 90]\n\n\nmore information\n================\n\nprobably the best way to get started is to look at the documentation at\nhttp://multiprocess.rtfd.io. also see ``multiprocess.tests`` for scripts that\ndemonstrate how ``multiprocess`` can be used to leverge multiple processes\nto execute python in parallel. you can run the test suite with\n``python -m multiprocess.tests``. as ``multiprocess`` conforms to the\n``multiprocessing`` interface, the examples and documentation found at\nhttp://docs.python.org/library/multiprocessing.html also apply to\n``multiprocess`` if one will ``import multiprocessing as multiprocess``.\nsee https://github.com/uqfoundation/multiprocess/tree/master/py3.11/examples\nfor a set of examples that demonstrate some basic use cases and benchmarking\nfor running python code in parallel. please feel free to submit a ticket on\ngithub, or ask a question on stackoverflow (**@mike mckerns**). if you would\nlike to share how you use ``multiprocess`` in your work, please send an email\n(to **mmckerns at uqfoundation dot org**).\n\n\ncitation\n========\n\nif you use ``multiprocess`` to do research that leads to publication, we ask that you\nacknowledge use of ``multiprocess`` by citing the following in your publication::\n\n    m.m. mckerns, l. strand, t. sullivan, a. fang, m.a.g. aivazis,\n    \"building a framework for predictive science\", proceedings of\n    the 10th python in science conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    michael mckerns and michael aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    https://uqfoundation.github.io/project/pathos\n\nplease see https://uqfoundation.github.io/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "multiprocess",
  "package_url": "https://pypi.org/project/multiprocess/",
  "project_url": "https://pypi.org/project/multiprocess/",
  "project_urls": {
    "Bug Tracker": "https://github.com/uqfoundation/multiprocess/issues",
    "Documentation": "http://multiprocess.rtfd.io",
    "Download": "https://pypi.org/project/multiprocess/#files",
    "Homepage": "https://github.com/uqfoundation/multiprocess",
    "Source Code": "https://github.com/uqfoundation/multiprocess"
  },
  "release_url": "https://pypi.org/project/multiprocess/0.70.15/",
  "requires_dist": [
    "dill (>=0.3.7)"
  ],
  "requires_python": ">=3.7",
  "summary": "better multiprocessing and multithreading in python",
  "version": "0.70.15",
  "releases": [],
  "developers": [
    "mike_mckerns",
    "mmckerns@uqfoundation.org"
  ],
  "kwds": "multiprocess multiprocessing processes mainprocess multithreading",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_multiprocess",
  "homepage": "https://github.com/uqfoundation/multiprocess",
  "release_count": 20,
  "dependency_ids": [
    "pypi_dill"
  ]
}
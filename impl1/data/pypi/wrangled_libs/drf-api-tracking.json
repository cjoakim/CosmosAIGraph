{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 1.11",
    "framework :: django :: 2.0",
    "framework :: django :: 2.1",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http"
  ],
  "description": "# drf-api-tracking\n\n[![build-status-image]][travis]\n[![pypi-version]][pypi]\n[![requirements status](https://requires.io/github/lingster/drf-api-tracking/requirements.svg?branch=master)](https://requires.io/github/lingster/drf-api-tracking/requirements/?branch=master)\n[![coverage status](https://coveralls.io/repos/github/lingster/drf-api-tracking/badge.svg?branch=master)](https://coveralls.io/github/lingster/drf-api-tracking?branch=master)\n\n## overview\n\ndrf-api-tracking provides a django model and drf view mixin that work together to log django rest framework requests to the database. you'll get these attributes for every request/response cycle to a view that uses the mixin:\n\n\n model field name | description | model field type\n------------------|-------------|-----------------\n`user` | user if authenticated, none if not | foreign key\n`username_persistent` | static field that persists the username even if the user model object is deleted | charfield\n`requested_at` | date-time that the request was made | datetimefield\n`response_ms` | number of milliseconds spent in view code | positiveintegerfield\n`path` | target uri of the request, e.g., `\"/api/\"` | charfield\n`view` | target view of the request, e.g., `\"views.api.apiview\"` | charfield\n`view_method` | target method of the view of the request, e.g., `\"get\"` | charfield\n`remote_addr` | ip address where the request originated (x_forwarded_for if available, remote_addr if not), e.g., `\"127.0.0.1\"` | genericipaddressfield\n`host` | originating host of the request, e.g., `\"example.com\"` | urlfield\n`method` | http method, e.g., `\"get\"` | charfield\n`query_params` | dictionary of request query parameters, as text | textfield\n`data` | dictionary of post data (json or form), as text | textfield\n`response` | json response data | textfield\n`status_code` | http status code, e.g., `200` or `404` | positiveintegerfield\n\n\n## requirements\n\n* django 1.11, 2.0, 2.1, 2.2, 3.0\n* django rest framework and python release supporting the version of django you are using\n\ndjango | python | drf\n-------|--------|----\n1.11 | 2.7, 3.5, 3.6 | 3.5, 3.6, 3.7, 3.8, 3.9\n2.0 | 3.5, 3.6, 3.7 | 3.7, 3.8, 3.9\n2.1 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n2.2 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n3.0 | 3.5, 3.6, 3.7, 3.8 | 3.7, 3.8, 3.9\n\n## installation\n\ninstall using `pip`...\n\n``` bash\n$ pip install drf-api-tracking\n```\n\nregister with your django project by adding `rest_framework_tracking`\nto the `installed_apps` list in your project's `settings.py` file.\nthen run the migrations for the `apirequestlog` model:\n\n``` bash\n$ python manage.py migrate\n```\n\n## usage\n\nadd the `rest_framework_tracking.mixins.loggingmixin` to any drf view\nto create an instance of `apirequestlog` every time the view is called.\n\nfor instance:\n``` python\n# views.py\nfrom rest_framework import generics\nfrom rest_framework.response import response\nfrom rest_framework_tracking.mixins import loggingmixin\n\nclass loggingview(loggingmixin, generics.genericapiview):\n    def get(self, request):\n        return response('with logging')\n```\n\nfor performance enhancement, explicitly choose methods to be logged using `logging_methods` attribute:\n\n``` python\nclass loggingview(loggingmixin, generics.createmodelmixin, generics.genericapiview):\n    logging_methods = ['post', 'put']\n    model = ...\n```\n\nmoreover, you could define your own rules by overriding `should_log` method.\nif `should_log` evaluates to true a log is created.\n\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    def should_log(self, request, response):\n        \"\"\"log only errors\"\"\"\n        return response.status_code >= 400\n```\n\nat the example above, `logging_methods` attribute will be ignored. if you want to provide some extra rules\non top of the http method filtering you should rewrite the `should_log` method.\n\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    def should_log(self, request, response):\n        \"\"\"log only errors with respect on `logging_methods` attributes\"\"\"\n        should_log_method = super(loggingview, self).should_log(request, response)\n        if not should_log_method:\n            return false\n        return response.status_code >= 400\n```\n\n a bit simpler.\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    def should_log(self, request, response):\n        \"\"\"log only errors with respect on `logging_methods` attributes\"\"\"\n        if not request.method in self.logging_methods:\n            return false\n        return response.status_code >= 400\n```\n\nfinally, you can also apply your customizations by overriding `handle_log` method.\nby default, all requests that satisfy `should_log` method are saved on the database.\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    def handle_log(self):\n        # do some stuff before saving.\n        super(mockcustomloghandlerview, self).handle_log()\n        # do some stuff after saving.\n```\n\n\nthough, you could define your own handling. for example save on an in-memory data structure store, remote logging system etc.\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n\n    def handle_log(self):\n        cache.set('my_key', self.log, 86400)\n```\n\nor you could omit save a request to the database. for example,\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    def handle_log(self):\n        \"\"\"\n        save only very slow requests. requests that took more than a second.\n        \"\"\"\n        if self.log['response_ms'] > 1000:\n            super(mockcustomloghandlerview, self).handle_log()\n```\n\nif your endpoint accepts large file uploads, drf-api-tracking's default behavior to decode the request body may cause a `requestdatatoobig` exception. this behavior can be disabled globally by setting `drf_tracking_decode_request_body = false` in your `settings.py`file.\n\nyou can also customize this behavior for individual views by setting the `decode_request_body` attribute:\n\n``` python\nclass loggingview(loggingmixin, generics.genericapiview):\n    decode_request_body = false\n```\n\n## security\n\nby default drf-api-tracking is hiding the values of those fields `{'api', 'token', 'key', 'secret', 'password', 'signature'}`.\nthe default list hast been taken from django itself ([https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#l50](https://github.com/django/django/blob/stable/1.11.x/django/contrib/auth/__init__.py#l50)).\n\nyou can complete this list with your own list by putting the fields you want to be hidden in the `sensitive_fields` parameter of your view.\n\n``` python\nclass loggingview(loggingmixin, generics.createmodelmixin, generics.genericapiview):\n    sensitive_fields = {'my_secret_key', 'my_secret_recipe'}\n```\n\nby default drf-tracking allows api request log entries to be modified from django admin. this can present a data integrity issue in production environments. in order to change this behavior, you can set `drf_tracking_admin_log_readonly` to `true` in your `settings.py` file.\n\n## development\nin the folder there is a sample drf project: `drf_api_sample` if changes are made to this packages models, use this project\nto help generate new migrations, which should be checked in.\n\n## testing\n\ninstall testing requirements.\n\n``` bash\n$ pip install -r requirements.txt\n```\n\nrun with runtests.\n\n``` bash\n$ ./runtests.py\n```\n\nyou can also use the excellent [tox](http://tox.readthedocs.org/en/latest/) testing tool to run the tests against all supported versions of python and django. install tox globally, and then simply run:\n\n``` bash\n$ tox\n```\nyou can also use pyenv to install multiple versions of python and ensure they are found by tox by issuing:\n``` bash\npyenv install 3.8.4\npyenv install 3.7.7\npyenv install 3.6.11\npyenv local 3.8.4 3.7.7 3.6.11\npyenv global 3.8.4 3.7.7 3.6.11\n```\nalso ensure that you don't have a virtualenv activated when you run the tests else you might get the following error, or similar:\n`\nerror: interpreternotfound: python3.6\n`\n\n## contributing\n\nin order to make changes to the package itself, providing migrations or something else,\nmake sure to install the current package with pip, otherwise using the `drf_api_sample` won't work.\n\n``` bash\npip install -e .\n```\n\nafter this, you can edit models and creating migrations with\n\n``` bash\npython drf_api_sample/manage.py makemigrations\n```\n\n## documentation\n\nto build the documentation, you'll need to install `mkdocs`.\n\n``` bash\n$ pip install mkdocs\n```\n\nto preview the documentation:\n\n``` bash\n$ mkdocs serve\nrunning at: http://127.0.0.1:8000/\n```\n\nto build the documentation:\n\n``` bash\n$ mkdocs build\n```\n\n\n[build-status-image]: https://secure.travis-ci.org/lingster/drf-api-tracking.png?branch=master\n[travis]: http://travis-ci.org/lingster/drf-api-tracking?branch=master\n[pypi-version]: https://img.shields.io/pypi/v/drf-api-tracking.svg\n[pypi]: https://pypi.python.org/pypi/drf-api-tracking\n\n\n# travis\ninstall rvm to have a local user version of ruby/gem:\n`https://rvm.io/rvm/install`\nthen install travis like this:\n`gem install travis`\nadd your secret key as per the link below:\n`https://docs.travis-ci.com/user/encryption-keys/`\n\npyenv\n---\nusing pyenv you can install multiple versions of python so that tox can run tests against all installed versions of python\n``` bash\npyenv global 3.6.8 3.7.7 3.8.2\n```\nensure that before running tox you don't have a virtualenv created and tox has been installed globally or via pipx\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "drf-api-tracking",
  "package_url": "https://pypi.org/project/drf-api-tracking/",
  "project_url": "https://pypi.org/project/drf-api-tracking/",
  "project_urls": {
    "Homepage": "https://github.com/lingster/drf-api-tracking"
  },
  "release_url": "https://pypi.org/project/drf-api-tracking/1.8.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "utils to log django rest framework requests to the database",
  "version": "1.8.4",
  "releases": [],
  "developers": [
    "anna@watttime.org",
    "anna_schneider"
  ],
  "kwds": "drf_tracking_decode_request_body drf_api_sample rest_framework_tracking drf_tracking_admin_log_readonly drf",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_drf_api_tracking",
  "homepage": "https://github.com/lingster/drf-api-tracking",
  "release_count": 15,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": "==============\nasync_property\n==============\n\n\n.. image:: https://img.shields.io/pypi/v/async_property.svg\n    :target: https://pypi.org/project/async-property/\n\n.. image:: https://app.travis-ci.com/ryananguiano/async_property.svg?branch=master\n    :target: https://app.travis-ci.com/github/ryananguiano/async_property\n\n.. image:: https://readthedocs.org/projects/async-property/badge/?version=latest\n    :target: https://async-property.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n.. image:: https://pyup.io/repos/github/ryananguiano/async_property/shield.svg\n    :target: https://pyup.io/repos/github/ryananguiano/async_property/\n    :alt: updates\n\n\npython decorator for async properties.\n\n* python: 3.7+\n* free software: mit license\n* documentation: https://async-property.readthedocs.io\n* package: https://pypi.org/project/async-property\n* source code: https://github.com/ryananguiano/async_property\n\ninstall\n-------\n\nto install async_property, run this command in your terminal:\n\n.. code-block:: console\n\n    $ pip install async-property\n\n\nor if you have pipenv:\n\n.. code-block:: console\n\n    $ pipenv install async-property\n\n\nusage\n-----\n\nyou can use ``@async_property`` just as you would with ``@property``, but on an async function.\n\n.. code-block:: python\n\n    class foo:\n        @async_property\n        async def remote_value(self):\n            return await get_remote_value()\n\nthe property ``remote_value`` now returns an awaitable coroutine.\n\n.. code-block:: python\n\n    instance = foo()\n    await instance.remote_value\n\n\ncached properties\n~~~~~~~~~~~~~~~~~\n\n``@async_cached_property`` will call the function only once. subsequent awaits to the property will return a cached value.\n\n.. code-block:: python\n\n    class foo:\n        @async_cached_property\n        async def value(self):\n            print('loading value')\n            return 123\n\n    >>> instance = foo()\n    >>> instance.value\n    <awaitableonly \"foo.value\">\n\n    >>> await instance.value\n    loading value\n    123\n    >>> await instance.value\n    123\n    >>> instance.value\n    123\n\n    >>> instance.value = 'abc'\n    >>> instance.value\n    'abc'\n    >>> await instance.value\n    'abc'\n\n    >>> del instance.value\n    >>> await instance.value\n    loading value\n    123\n\n\nawaitloader\n~~~~~~~~~~~\n\nif you have an object with multiple cached properties, you can subclass ``awaitloader``. this will make your class instances awaitable and will load all ``@async_cached_property`` fields concurrently. ``awaitloader`` will call ``await instance.load()``, if it exists, before loading properties.\n\n.. code-block:: python\n\n\n    class foo(awaitloader):\n        async def load(self):\n            print('load called')\n\n        @async_cached_property\n        async def db_lookup(self):\n            return 'success'\n\n        @async_cached_property\n        async def api_call(self):\n            print('calling api')\n            return 'works every time'\n\n    >>> instance = await foo()\n    load called\n    calling api\n    >>> instance.db_lookup\n    'success'\n    >>> instance.api_call\n    'works every time'\n\nfeatures\n--------\n\n* both regular and cached property.\n* cached properties can be accessed multiple times without repeating function call.\n* uses asyncio.lock to ensure cached functions are called only once.\n* full test coverage with py.test\n\n\ncredits\n-------\n\nthis package was created with cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\nthe objectproxy_ class was taken from wrapt_ library by graham dumpleton.\n\n.. _objectproxy: https://github.com/grahamdumpleton/wrapt/blob/master/src/wrapt/wrappers.py\n.. _wrapt: https://github.com/grahamdumpleton/wrapt\n\n\n=======\nhistory\n=======\n\n0.2.2 (2023-07-03)\n------------------\n\n* add python 3.11 support and drop python 3.6.\n\n0.2.1 (2019-04-13)\n------------------\n\n* update docs and readme\n\n0.2.0 (2019-04-12)\n------------------\n\n* use instance state to hold cache and locks\n\n0.1.4 (2019-04-12)\n------------------\n\n* fix inheritance issues on awaitloader\n\n0.1.3 (2019-04-12)\n------------------\n\n* cleanup code\n\n0.1.2 (2019-04-12)\n------------------\n\n* fix asyncio.lock issues\n\n0.1.1 (2019-04-11)\n------------------\n\n* complete test coverage and update readme\n\n\n0.1.0 (2019-04-11)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "async_property",
  "license": "mit license",
  "name": "async-property",
  "package_url": "https://pypi.org/project/async-property/",
  "project_url": "https://pypi.org/project/async-property/",
  "project_urls": {
    "Homepage": "https://github.com/ryananguiano/async_property"
  },
  "release_url": "https://pypi.org/project/async-property/0.2.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python decorator for async properties.",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "ryan.anguiano@gmail.com",
    "ryan_anguiano"
  ],
  "kwds": "async_property async_cached_property async asyncio awaitable",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_async_property",
  "homepage": "https://github.com/ryananguiano/async_property",
  "release_count": 8,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: plugins",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: software development :: testing"
  ],
  "description": "pytest-tornado\n==============\n\n.. image:: https://travis-ci.org/eugeniy/pytest-tornado.svg?branch=master\n    :target: https://travis-ci.org/eugeniy/pytest-tornado\n\n.. image:: https://coveralls.io/repos/eugeniy/pytest-tornado/badge.svg\n    :target: https://coveralls.io/r/eugeniy/pytest-tornado\n\na py.test_ plugin providing fixtures and markers to simplify testing\nof asynchronous tornado applications.\n\ninstallation\n------------\n\n::\n\n    pip install pytest-tornado\n\n\nexample\n-------\n\n.. code-block:: python\n\n    import pytest\n    import tornado.web\n\n    class mainhandler(tornado.web.requesthandler):\n        def get(self):\n            self.write(\"hello, world\")\n\n    application = tornado.web.application([\n        (r\"/\", mainhandler),\n    ])\n\n    @pytest.fixture\n    def app():\n        return application\n\n    @pytest.mark.gen_test\n    def test_hello_world(http_client, base_url):\n        response = yield http_client.fetch(base_url)\n        assert response.code == 200\n\n\nrunning tests\n-------------\n\n::\n\n    py.test\n\n\nfixtures\n--------\n\nio_loop\n    creates an instance of the `tornado.ioloop.ioloop`_ for each test case\n\nhttp_port\n    get a port used by the test server\n\nbase_url\n    get an absolute base url for the test server,\n    for example ``http://localhost:59828``.\n    can also be used in a test with https fixture and will then return\n    a corresponding url, for example ``http://localhost:48372``.\n\nhttp_server\n    start a tornado http server, you must create an ``app`` fixture,\n    which returns the `tornado.web.application`_ to be tested\n\nhttp_client\n    get an asynchronous http client\n\n\nthere is also the possibility to test applications with https.\nfor running a server with https you need a certificate.\n\nhttps_port\n    get a port used by the test server.\n\nhttps_server\n    start a tornado https server. you must create an ``app`` fixture,\n    which returns the `tornado.web.application`_ to be tested, and\n    an ``ssl_options`` fixture which returns the ssl options for the\n    `tornado.httpserver.httpserver`_.\n\nhttps_client\n    get an asynchronous http client.\n    in case your test uses an self-signed certificate you can set\n    ``verify=false`` on the fetch method.\n\n\nshow fixtures provided by the plugin::\n\n    py.test --fixtures\n\n\nmarkers\n-------\n\na ``gen_test`` marker lets you write a coroutine-style tests used with the\n`tornado.gen`_ module:\n\n.. code-block:: python\n\n    @pytest.mark.gen_test\n    def test_tornado(http_client):\n        response = yield http_client.fetch('http://www.tornadoweb.org/')\n        assert response.code == 200\n\n\nthis marker supports writing tests with async/await syntax as well:\n\n.. code-block:: python\n\n    @pytest.mark.gen_test\n    async def test_tornado(http_client):\n        response = await http_client.fetch('http://www.tornadoweb.org/')\n        assert response.code == 200\n\n\nmarked tests will time out after 5 seconds. the timeout can be modified by\nsetting an ``async_test_timeout`` environment variable,\n``--async-test-timeout`` command line argument or a marker argument.\n\n.. code-block:: python\n\n    @pytest.mark.gen_test(timeout=5)\n    def test_tornado(http_client):\n        yield http_client.fetch('http://www.tornadoweb.org/')\n\nthe mark can also receive a run_sync flag, which if turned off will, instead of running the test synchronously, will add it as a coroutine and run the ioloop (until the timeout). for instance, this allows to test things on both a client and a server at the same time.\n\n.. code-block:: python\n\n    @pytest.mark.gen_test(run_sync=false)\n    def test_tornado(http_server, http_client):\n        response = yield http_client.fetch('http://localhost:5555/my_local_server_test/')\n        assert response.body == 'run on the same ioloop!'\n\n\nshow markers provided by the plugin::\n\n    py.test --markers\n\n\n.. _py.test: http://pytest.org/\n.. _`tornado.httpserver.httpserver`: https://www.tornadoweb.org/en/latest/httpserver.html#http-server\n.. _`tornado.ioloop.ioloop`: http://tornado.readthedocs.org/en/latest/ioloop.html#ioloop-objects\n.. _`tornado.web.application`: http://tornado.readthedocs.org/en/latest/web.html#application-configuration\n.. _`tornado.gen`: http://tornado.readthedocs.org/en/latest/gen.html\n\n\n",
  "docs_url": null,
  "keywords": "pytest py.test tornado async asynchronous testing unit tests plugin",
  "license": "apache license, version 2.0",
  "name": "pytest-tornado",
  "package_url": "https://pypi.org/project/pytest-tornado/",
  "project_url": "https://pypi.org/project/pytest-tornado/",
  "project_urls": {
    "Homepage": "https://github.com/eugeniy/pytest-tornado"
  },
  "release_url": "https://pypi.org/project/pytest-tornado/0.8.1/",
  "requires_dist": [
    "pytest (>=3.6)",
    "tornado (>=4.1)",
    "setuptools"
  ],
  "requires_python": "",
  "summary": "a py.test plugin providing fixtures and markers to simplify testing of asynchronous tornado applications.",
  "version": "0.8.1",
  "releases": [],
  "developers": [
    "burump@gmail.com",
    "eugeniy_kalinin",
    "vidar_tonaas_fauske",
    "vidartf@gmail.com"
  ],
  "kwds": "test_tornado tornadoweb tornado pytest async_test_timeout",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_pytest_tornado",
  "homepage": "https://github.com/eugeniy/pytest-tornado",
  "release_count": 10,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_setuptools",
    "pypi_tornado"
  ]
}
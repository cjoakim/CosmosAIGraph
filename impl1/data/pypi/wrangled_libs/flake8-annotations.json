{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance",
    "typing :: typed"
  ],
  "description": "# flake8-annotations\n[![pypi - python version](https://img.shields.io/pypi/pyversions/flake8-annotations/3.0.1?logo=python&logocolor=ffd43b)](https://pypi.org/project/flake8-annotations/)\n[![pypi](https://img.shields.io/pypi/v/flake8-annotations?logo=python&logocolor=ffd43b)](https://pypi.org/project/flake8-annotations/)\n[![pypi - license](https://img.shields.io/pypi/l/flake8-annotations?color=magenta)](https://github.com/sco1/flake8-annotations/blob/main/license)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/sco1/flake8-annotations/main.svg)](https://results.pre-commit.ci/latest/github/sco1/flake8-annotations/main)\n[![open in visual studio code](https://img.shields.io/badge/open%20in-vscode.dev-blue)](https://github.dev/sco1/flake8-annotations)\n\n`flake8-annotations` is a plugin for [flake8](http://flake8.pycqa.org/en/latest/) that detects the absence of [pep 3107-style](https://www.python.org/dev/peps/pep-3107/) function annotations.\n\nwhat this won't do: replace [mypy](http://mypy-lang.org/), check type comments (see: [pep 484](https://peps.python.org/pep-0484/#type-comments)), check variable annotations (see: [pep 526](https://www.python.org/dev/peps/pep-0526/)), or respect stub files.\n\n## installation\ninstall from pypi with your favorite `pip` invocation:\n\n```bash\n$ pip install flake8-annotations\n```\n\nit will then be run automatically as part of flake8.\n\nyou can verify it's being picked up by invoking the following in your shell:\n\n\n<!-- [[[cog\nimport cog\nfrom subprocess import pipe, run\nout = run([\"flake8\", \"--version\"], stdout=pipe, encoding=\"ascii\")\nver_str = out.stdout.replace(\"\\n\", \"\")\ncog.out(\n    f\"```bash\\n$ flake8 --version\\n{ver_str}\\n```\"\n)\n]]] -->\n```bash\n$ flake8 --version\n6.0.0 (flake8-annotations: 3.0.1, mccabe: 0.7.0, pycodestyle: 2.10.0, pyflakes: 3.0.1) cpython 3.11.0 on darwin\n```\n<!-- [[[end]]] -->\n\n## table of warnings\nwith the exception of `ann4xx`-level warnings, all warnings are enabled by default.\n\n### function annotations\n| id       | description                                   |\n|----------|-----------------------------------------------|\n| `ann001` | missing type annotation for function argument |\n| `ann002` | missing type annotation for `*args`           |\n| `ann003` | missing type annotation for `**kwargs`        |\n\n### method annotations\n| id       | description                                                  |\n|----------|--------------------------------------------------------------|\n| `ann101` | missing type annotation for `self` in method<sup>1</sup>     |\n| `ann102` | missing type annotation for `cls` in classmethod<sup>1</sup> |\n\n### return annotations\n| id       | description                                           |\n|----------|-------------------------------------------------------|\n| `ann201` | missing return type annotation for public function    |\n| `ann202` | missing return type annotation for protected function |\n| `ann203` | missing return type annotation for secret function    |\n| `ann204` | missing return type annotation for special method     |\n| `ann205` | missing return type annotation for staticmethod       |\n| `ann206` | missing return type annotation for classmethod        |\n\n### opinionated warnings\nthese warnings are disabled by default.\n| id       | description                                                             |\n|----------|-------------------------------------------------------------------------|\n| `ann401` | dynamically typed expressions (typing.any) are disallowed<sup>2,3</sup> |\n| `ann402` | type comments are disallowed<sup>3</sup>                                |\n\nuse [`extend-select`](https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-extend-ignore) to enable opinionated warnings without overriding other implicit configurations<sup>4</sup>.\n\n**notes:**\n1. see: [pep 484](https://www.python.org/dev/peps/pep-0484/#annotating-instance-and-class-methods) and [pep 563](https://www.python.org/dev/peps/pep-0563/) for suggestions on annotating `self` and `cls` arguments\n2. see: [dynamic typing caveats](#dynamic-typing-caveats)\n3. only function declarations are considered by this plugin; type annotations in function/module bodies are not checked \n4. common pitfall: the use of [`ignore`](https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-ignore) will enable all implicitly disabled warnings\n\n## configuration options\nsome opinionated flags are provided to tailor the linting errors emitted.\n\n### `--suppress-none-returning`: `bool`\nsuppress `ann200`-level errors for functions that meet one of the following criteria:\n  * contain no `return` statement, or\n  * explicit `return` statement(s) all return `none` (explicitly or implicitly).\n\ndefault: `false`\n\n### `--suppress-dummy-args`: `bool`\nsuppress `ann000`-level errors for dummy arguments, defined as `_`.\n\ndefault: `false`\n\n### `--allow-untyped-defs`: `bool`\nsuppress all errors for dynamically typed functions. a function is considered dynamically typed if it does not contain any type hints.\n\ndefault: `false`\n\n### `--allow-untyped-nested`: `bool`\nsuppress all errors for dynamically typed nested functions. a function is considered dynamically typed if it does not contain any type hints.\n\ndefault: `false`\n\n### `--mypy-init-return`: `bool`\nallow omission of a return type hint for `__init__` if at least one argument is annotated. see [mypy's documentation](https://mypy.readthedocs.io/en/stable/class_basics.html?#annotating-init-methods) for additional details.\n\ndefault: `false`\n\n### `--dispatch-decorators`: `list[str]`\ncomma-separated list of decorators flake8-annotations should consider as dispatch decorators. linting errors are suppressed for functions decorated with at least one of these functions.\n\ndecorators are matched based on their attribute name. for example, `\"singledispatch\"` will match any of the following:\n  * `import functools; @functools.singledispatch`\n  * `import functools as <alias>; @<alias>.singledispatch`\n  * `from functools import singledispatch; @singledispatch`\n\n**note:** deeper imports, such as `a.b.singledispatch` are not supported.\n\nsee: [generic functions](#generic-functions) for additional information.\n\ndefault: `\"singledispatch, singledispatchmethod\"`\n\n### `--overload-decorators`: `list[str]`\ncomma-separated list of decorators flake8-annotations should consider as [`typing.overload`](https://docs.python.org/3/library/typing.html#typing.overload) decorators.\n\ndecorators are matched based on their attribute name. for example, `\"overload\"` will match any of the following:\n  * `import typing; @typing.overload`\n  * `import typing as <alias>; @<alias>.overload`\n  * `from typing import overload; @overload`\n\n**note:** deeper imports, such as `a.b.overload` are not supported.\n\nsee: [the `typing.overload` decorator](#the-typingoverload-decorator) for additional information.\n\ndefault: `\"overload\"`\n\n### `--allow-star-arg-any`\nsuppress `ann401` for dynamically typed `*args` and `**kwargs`.\n\ndefault: `false`\n\n## generic functions\nper the python glossary, a [generic function](https://docs.python.org/3/glossary.html#term-generic-function) is defined as:\n\n> a function composed of multiple functions implementing the same operation for different types. which implementation should be used during a call is determined by the dispatch algorithm.\n\nin the standard library we have some examples of decorators for implementing these generic functions: [`functools.singledispatch`](https://docs.python.org/3/library/functools.html#functools.singledispatch) and [`functools.singledispatchmethod`](https://docs.python.org/3/library/functools.html#functools.singledispatchmethod). in the spirit of the purpose of these decorators, errors for missing annotations for functions decorated with at least one of these are ignored.\n\nfor example, this code:\n\n```py\nimport functools\n\n@functools.singledispatch\ndef foo(a):\n    print(a)\n\n@foo.register\ndef _(a: list) -> none:\n    for idx, thing in enumerate(a):\n        print(idx, thing)\n```\n\nwill not raise any linting errors for `foo`.\n\ndecorator(s) to treat as defining generic functions may be specified by the [`--dispatch-decorators`](#--dispatch-decorators-liststr) configuration option.\n\n## the `typing.overload` decorator\nper the [`typing`](https://docs.python.org/3/library/typing.html#typing.overload) documentation:\n\n> the `@overload` decorator allows describing functions and methods that support multiple different combinations of argument types. a series of `@overload`-decorated definitions must be followed by exactly one non-`@overload`-decorated definition (for the same function/method).\n\nin the spirit of the purpose of this decorator, errors for missing annotations for non-`@overload`-decorated functions are ignored if they meet this criteria.\n\nfor example, this code:\n\n```py\nimport typing\n\n\n@typing.overload\ndef foo(a: int) -> int:\n    ...\n\ndef foo(a):\n    ...\n```\n\nwill not raise linting errors for missing annotations for the arguments & return of the non-decorated `foo` definition.\n\ndecorator(s) to treat as `typing.overload` may be specified by the [`--overload-decorators`](#--overload-decorators-liststr) configuration option.\n\n## dynamic typing caveats\nsupport is only provided for the following patterns:\n  * `from typing import any; foo: any`\n  * `import typing; foo: typing.any`\n  * `import typing as <alias>; foo: <alias>.any`\n\nnested dynamic types (e.g. `typing.tuple[typing.any]`) and redefinition (e.g. `from typing import any as foo`) will not be identified.\n\n## contributing\n\n### development environment\nthis project uses [poetry](https://python-poetry.org/) to manage dependencies. with your fork cloned to your local machine, you can install the project and its dependencies to create a development environment using:\n\n```bash\n$ poetry install\n```\n\nnote: an editable installation of `flake8-annotations` in the developer environment is required in order for the plugin to be registered for flake8. by default, poetry includes an editable install of the project itself when `poetry install` is invoked.\n\na [pre-commit](https://pre-commit.com) configuration is also provided to create a pre-commit hook so linting errors aren't committed:\n\n```bash\n$ pre-commit install\n```\n\n### testing & coverage\na [pytest](https://docs.pytest.org/en/latest/) suite is provided, with coverage reporting from [pytest-cov](https://github.com/pytest-dev/pytest-cov). a [tox](https://github.com/tox-dev/tox/) configuration is provided to test across all supported versions of python. testing will be skipped for python versions that cannot be found.\n\n```bash\n$ tox\n```\n\ndetails on missing coverage, including in the test suite, is provided in the report to allow the user to generate additional tests for full coverage.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "flake8-annotations",
  "package_url": "https://pypi.org/project/flake8-annotations/",
  "project_url": "https://pypi.org/project/flake8-annotations/",
  "project_urls": {
    "Homepage": "https://github.com/sco1/flake8-annotations",
    "Issue Tracker": "https://github.com/sco1/flake8-annotations/issues",
    "Repository": "https://github.com/sco1/flake8-annotations"
  },
  "release_url": "https://pypi.org/project/flake8-annotations/3.0.1/",
  "requires_dist": [
    "attrs (>=21.4)",
    "flake8 (>=5.0)"
  ],
  "requires_python": ">=3.8.1",
  "summary": "flake8 type annotation checks",
  "version": "3.0.1",
  "releases": [],
  "developers": [
    "s_co1",
    "sco1.git@gmail.com"
  ],
  "kwds": "flake8 pypi pyversions pyflakes functools",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_annotations",
  "homepage": "https://github.com/sco1/flake8-annotations",
  "release_count": 24,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_flake8"
  ]
}
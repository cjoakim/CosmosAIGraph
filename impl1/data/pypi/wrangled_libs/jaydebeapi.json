{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "programming language :: java",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: database",
    "topic :: software development :: libraries :: java libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "=================================================================\n jaydebeapi - bridge from jdbc database drivers to python db-api\n=================================================================\n\n.. image:: https://img.shields.io/travis/baztian/jaydebeapi/master.svg\n   :target: https://travis-ci.org/baztian/jaydebeapi\n\n.. image:: https://img.shields.io/coveralls/baztian/jaydebeapi/master.svg\n    :target: https://coveralls.io/r/baztian/jaydebeapi\n\n.. image:: https://img.shields.io/badge/python-2.7,_3.5,_3.6-blue.svg\n    :target: https://pypi.python.org/pypi/jaydebeapi/\n\n.. image:: https://img.shields.io/badge/jython-2.7.2-blue.svg\n    :target: https://pypi.python.org/pypi/jaydebeapi/\n\n.. image:: https://img.shields.io/github/tag/baztian/jaydebeapi.svg\n    :target: https://pypi.python.org/pypi/jaydebeapi/\n\n.. image:: https://img.shields.io/pypi/dm/jaydebeapi.svg\n    :target: https://pypi.python.org/pypi/jaydebeapi/\n\nthe jaydebeapi module allows you to connect from python code to\ndatabases using java `jdbc\n<http://java.sun.com/products/jdbc/overview.html>`_. it provides a\npython db-api_ v2.0 to that database.\n\nit works on ordinary python (cpython) using the jpype_ java\nintegration or on `jython <http://www.jython.org/>`_ to make use of\nthe java jdbc driver.\n\nin contrast to zxjdbc from the jython project jaydebeapi let's you\naccess a database with jython and python with only minor code\nmodifications. jaydebeapi's future goal is to provide a unique and\nfast interface to different types of jdbc-drivers through a flexible\nplug-in mechanism.\n\n.. contents::\n\ninstall\n=======\n\nyou can get and install jaydebeapi with `pip <http://pip.pypa.io/>`_\n::\n\n    $ pip install jaydebeapi\n\nif you want to install jaydebeapi in jython make sure to have pip or\neasyinstall available for it.\n\nor you can get a copy of the source by cloning from the `jaydebeapi\ngithub project <https://github.com/baztian/jaydebeapi>`_ and install\nwith ::\n\n    $ python setup.py install\n\nor if you are using jython use ::\n\n    $ jython setup.py install\n\nit has been tested with jython 2.7.2.\n\nif you are using cpython ensure that you have installed jpype_\nproperly. it has been tested with jpype1 0.6.3 and 0.7.5 for python 3 and\nwith jpype1 0.6.3 and 0.7.0 for python 2.7. older jpype\ninstallations may cause problems.\n\nusage\n=====\n\nbasically you just import the ``jaydebeapi`` python module and execute\nthe ``connect`` method. this gives you a db-api_ conform connection to\nthe database.\n\nthe first argument to ``connect`` is the name of the java driver\nclass. the second argument is a string with the jdbc connection\nurl. third you can optionally supply a sequence consisting of user and\npassword or alternatively a dictionary containing arguments that are\ninternally passed as properties to the java\n``drivermanager.getconnection`` method. see the javadoc of\n``drivermanager`` class for details.\n\nthe next parameter to ``connect`` is optional as well and specifies\nthe jar-files of the driver if your classpath isn't set up\nsufficiently yet. the classpath set in ``classpath`` environment\nvariable will be honored. see the documentation of your java runtime\nenvironment.\n\nhere is an example:\n\n>>> import jaydebeapi\n>>> conn = jaydebeapi.connect(\"org.hsqldb.jdbcdriver\",\n...                           \"jdbc:hsqldb:mem:.\",\n...                           [\"sa\", \"\"],\n...                           \"/path/to/hsqldb.jar\",)\n>>> curs = conn.cursor()\n>>> curs.execute('create table customer'\n...              '(\"cust_id\" integer not null,'\n...              ' \"name\" varchar(50) not null,'\n...              ' primary key (\"cust_id\"))'\n...             )\n>>> curs.execute(\"insert into customer values (1, 'john')\")\n>>> curs.execute(\"select * from customer\")\n>>> curs.fetchall()\n[(1, u'john')]\n>>> curs.close()\n>>> conn.close()\n\nif you're having trouble getting this work check if your ``java_home``\nenvironmentvariable is set correctly. for example i have to set it on\nmy ubuntu machine like this ::\n\n    $ java_home=/usr/lib/jvm/java-8-openjdk python\n\nan alternative way to establish connection using connection\nproperties:\n\n>>> conn = jaydebeapi.connect(\"org.hsqldb.jdbcdriver\",\n...                           \"jdbc:hsqldb:mem:.\",\n...                           {'user': \"sa\", 'password': \"\",\n...                            'other_property': \"foobar\"},\n...                           \"/path/to/hsqldb.jar\",)\n\nalso using the ``with`` statement might be handy:\n\n>>> with jaydebeapi.connect(\"org.hsqldb.jdbcdriver\",\n...                         \"jdbc:hsqldb:mem:.\",\n...                         [\"sa\", \"\"],\n...                         \"/path/to/hsqldb.jar\",) as conn:\n...     with conn.cursor() as curs:\n...         curs.execute(\"select count(*) from customer\")\n...         curs.fetchall()\n[(1,)]\n\nsupported databases\n===================\n\nin theory *every database with a suitable jdbc driver should work*. it\nis confirmed to work with the following databases:\n\n* sqlite\n* hypersonic sql (hsqldb)\n* ibm db2\n* ibm db2 for mainframes\n* oracle\n* teradata db\n* netezza\n* mimer db\n* microsoft sql server\n* mysql\n* postgresql\n* many more...\n\ncontributing\n============\n\nplease submit `bugs and patches\n<https://github.com/baztian/jaydebeapi/issues>`_. all contributors\nwill be acknowledged. thanks!\n\nlicense\n=======\n\njaydebeapi is released under the gnu lesser general public license\n(lgpl). see the file ``copying`` and ``copying.lesser`` in the\ndistribution for details.\n\n\nchangelog\n=========\n\n- next version - unreleased\n- 1.2.3 - 2020-06-12\n\n  - make pip install for python 2 work by changing jpype1 requirement to older\n    version\n  - make pip install for jython work by removing jpype1 requirement for jython\n  - removed cursor destructor to avoid issues with some jpype versions (please\n    make sure you're always closing your cursors properly)\n\n- 1.2.2 - 2020-06-04\n\n  - return (big) decimal types as long value if scale is zero (thanks\n    to @ministat)\n  - fix `decimal` and `numeric` type conversion for jython\n\n- 1.2.1 - 2020-05-27\n\n  - increased thread safety. should resolve some of the\n    `no suitable driver found` errors (thanks to @thealmightygrant)\n\n- 1.2.0 - 2020-05-22\n\n  - added compatibility to jpype1 0.7.2+ (thanks to @dpd)\n  - support `with` statement (thanks to @szczepanov)\n\n- 1.1.2 - 2019-09-02\n\n  - added compatibility to jpype1 0.7 (thanks to @iverian, @thrameos)\n  - dropped python 2.6 support\n  - fix build working with newer maven versions\n  - accidently force-pushed to master branch. sorry for that.\n\n- 1.1.1 - 2017-03-21\n\n  - don't fail on dates before 1900 on python < 3.\n\n- 1.1.0 - 2017-03-19\n\n  - support bit and tinyint type mappings (thanks @mokubyow for\n    reporting the issue).\n\n- 1.0.0 - 2017-01-10\n\n  - allow for db properties to be passed to the connect\n    method. *probably incompatible to code based on previous\n    versions.* see documentation of the connect method. (thanks\n    @testlnord for you efforts and the patience.)\n\n  - new major version due to possible api incompatibility.\n\n- 0.2.0 - 2015-04-26\n\n  - python 3 support (requires jpype1 >= 0.6.0).\n\n- 0.1.6 - 2015-04-10\n\n  - fix jython handling of java exceptions that don't subclass python exception\n\n  - enrich exceptions with message from java sqlexceptions\n\n  - be more specific about db api exceptions: distinguish databaseerror and\n    interfaceerror.\n\n  - fix typo longnarchar vs longvarchar (thanks @datdo for reporting #4)\n\n- 0.1.5 - 2015-03-02\n\n  - add version number to module.\n\n  - improve robustness of java to python type conversion.\n\n  - support time type.\n\n  - add db-api compliant exception handling.\n\n  - minor documentation improvements.\n\n  - some development related changes (host project at github, use\n    travis ci, use jpype1 for tests).\n\n- 0.1.4 - 2013-10-29\n\n  - more convenient way to setup java classpath. *important note*\n    check the changes to the ``connect`` method and adapt your code.\n\n  - honor ``classpath`` if used in jpype mode.\n\n  - set ``.rowcount`` properly.\n\n  - changed signature of ``.setoutputsize()`` to be db-api compliant.\n\n- 0.1.3 - 2011-01-27\n\n  - fixed db-api_ violation: use ``curs.execute('foo ?', (bar, baz))``\n    instead of ``curs.execute('foo ?', bar, baz)``.\n\n  - free resources after ``executemany`` call.\n\n  - improved type handling. initial support for blob columns.\n\n- 0.1.2 - 2011-01-25\n\n  - ``easy_install jaydebeapi`` should really work.\n\n- 0.1.1 - 2010-12-12\n\n  - fixed bug #688290 \"null values with converters error on fetch\".\n  - fixed bug #684909 \"selecting rowids errors out on fetch\".\n\n- 0.1 - 2010-08-10\n\n  - initial release.\n\nto do\n=====\n\n- extract java calls to separate java methods to increase performance.\n- check if https://code.launchpad.net/dbapi-compliance can help making\n  jaydebeapi more db-api compliant.\n- test it on different databases and provide a flexible db specific\n  pluign mechanism.\n- sqlalchemy modules (separate project)\n\n.. _db-api: http://www.python.org/dev/peps/pep-0249/\n.. _jpype: https://pypi.python.org/pypi/jpype1/\n\n\n",
  "docs_url": null,
  "keywords": "db api java jdbc bridge connect sql jpype jython",
  "license": "gnu lgpl",
  "name": "jaydebeapi",
  "package_url": "https://pypi.org/project/JayDeBeApi/",
  "project_url": "https://pypi.org/project/JayDeBeApi/",
  "project_urls": {
    "Homepage": "https://github.com/baztian/jaydebeapi"
  },
  "release_url": "https://pypi.org/project/JayDeBeApi/1.2.3/",
  "requires_dist": [
    "JPype1 (<=0.7.1) ; python_version <= \"2.7\" and platform_python_implementation != \"Jython\"",
    "JPype1 ; python_version > \"2.7\" and platform_python_implementation != \"Jython\""
  ],
  "requires_python": "",
  "summary": "use jdbc database drivers from python 2/3 or jython with a db-api.",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "bastian.dev@gmail.com",
    "bastian_bowe"
  ],
  "kwds": "jdbcdriver databaseerror jdbc sqlalchemy dbapi",
  "license_kwds": "gnu lgpl",
  "libtype": "pypi",
  "id": "pypi_jaydebeapi",
  "homepage": "https://github.com/baztian/jaydebeapi",
  "release_count": 15,
  "dependency_ids": [
    "pypi_jpype1"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "|githubactions| |circleci| |appveyor| |codecov| |pypi| |pypidownloads| |readthedocs|\n\n\n.. the large version wont work because github strips rst image rescaling.\n.. image:: https://i.imgur.com/u0tyyxm.png\n   :height: 100px\n   :align: left\n\n\nxdoctest - execute doctests. a python package for executing tests in\ndocumentation strings!\n\nwhat is a `doctest <https://en.wikipedia.org/wiki/doctest>`__?\nit is example code you write in a docstring!\nwhat is a `docstring <https://en.wikipedia.org/wiki/docstring>`__?\nits a string you use as a comment! they get attached to python functions and\nclasses as metadata. they are often used to auto-generate documentation.\nwhy is it cool?\nbecause you can write tests while you code!\n\ntests are good. documentation is good. examples are good.  doctests have low\nboilerplate, you write them in the same file you write your code. it often can\nhelp you write the function. write down how to construct minimal demo inputs\n(it helps to have tools to create these) in your file.  copy that code into\nipython/jupyter, and play with your implementation.  copy your finished code\ninto the body. write down how to call the function with the demo inputs. if you\nfeel inclined, check that the result matches an expected result (while asserts\nand checks are nice, a test that just shows how to run the code is better than\nno test at all).\n\n.. code:: python\n\n\n    def an_algorithm(data, config):\n        \"\"\"\n        example:\n            >>> data = '([()[]])[{}([[]])]'\n            >>> config = {'outer': sum, 'inner': ord}\n            >>> an_algorithm(data, config)\n            1411\n        \"\"\"\n        # i wrote this function by first finding some interesting demodata\n        # then i wrote the body in ipython and copied it back in.\n        # now i can re-use this test code i wrote in development as a test!\n        # covered code is much easier to debug (we have a mwe)!\n        result = config['outer'](map(config['inner'], data))\n        return result\n\n\nthe problem? how do you run the code in your doctest?\n\n\nxdoctest finds and executes your doctests for you.\njust run ``xdoctest <path-to-my-module>``.\nit plugs into pytest to make it easy to run on a ci. install and run\n``pytest --xdoctest``.\n\n\nthe ``xdoctest`` package is a re-write of python's builtin ``doctest``\nmodule. it replaces the old regex-based parser with a new\nabstract-syntax-tree based parser (using python's ``ast`` module). the\ngoal is to make doctests easier to write, simpler to configure, and\nencourage the pattern of test driven development.\n\n\n+------------------+----------------------------------------------+\n| read the docs    | https://xdoctest.readthedocs.io              |\n+------------------+----------------------------------------------+\n| github           | https://github.com/erotemic/xdoctest         |\n+------------------+----------------------------------------------+\n| pypi             | https://pypi.org/project/xdoctest            |\n+------------------+----------------------------------------------+\n| pycon 2020       | `youtube video`_ and `google slides`_        |\n+------------------+----------------------------------------------+\n\n.. _youtube video: https://www.youtube.com/watch?v=cujcqow_ofk\n.. _google slides: https://docs.google.com/presentation/d/1563xl-n7534qmktrklsjvqx36z5uhjufrpw8wio6z1c\n\n\nquick start\n-----------\n\ninstallation: from pypi\n^^^^^^^^^^^^^^^^^^^^^^^\n\nxdoctest is distributed on pypi as a universal wheel and can be pip installed on\npython 3.6+ (python 2.7 and 3.4 / 3.5 support was removed in version 1.1.0).\ninstallations are tested on cpython and pypy implementations.\n\n::\n\n    pip install xdoctest\n\n\ndistributions on pypi are signed with a gpg public key: ``d297d757``. if you\ncare enough to check the gpg signature (hopefully pip will just do this in the\nfuture), you should also verify this agrees with the contents of\n``dev/public_gpg_key``.\n\n\nusage: run your doctests\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n\nafter installing, the fastest way to run all doctests in your project\nis:\n\n::\n\n    python -m xdoctest /path/to/your/pkg-or-module.py\n\nor if your module has been pip-installed / is in the pythonpath run\n\n::\n\n    python -m xdoctest yourmodname\n\ngetting started\n---------------\n\nthere are two ways to use ``xdoctest``: via ``pytest`` or via the native\ninterface. the native interface is less opaque and implicit, but its\npurpose is to run doctests. the other option is to use the widely used\n``pytest`` package. this allows you to run both unit tests and doctests\nwith the same command and has many other advantages.\n\nit is recommended to use ``pytest`` for automatic testing (e.g. in your\nci scripts), but for debugging it may be easier to use the native\ninterface.\n\ncheck if xdoctest will work on your package\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can quickly check if ``xdoctest`` will work on your package\nout-of-the box by installing it via pip and running\n``python -m xdoctest <pkg> all``, where ``<pkg>`` is the path to your\npython package / module (or its name if it is installed in your\n``pythonpath``).\n\nfor example with you might test if ``xdoctest`` works on ``networkx`` or\n``sklearn`` as such: ``python -m xdoctest networkx all`` /\n``python -m xdoctest sklearn all``.\n\nusing the pytest interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwhen ``pytest`` is run, ``xdoctest`` is automatically discovered, but is\ndisabled by default. this is because ``xdoctest`` needs to replace the builtin\n``doctest`` plugin.\n\nto enable this plugin, run ``pytest`` with ``--xdoctest`` or ``--xdoc``.\nthis can either be specified on the command line or added to your\n``addopts`` options in the ``[pytest]`` section of your ``pytest.ini``\nor ``tox.ini``.\n\nto run a specific doctest, ``xdoctest`` sets up ``pytest`` node names\nfor these doctests using the following pattern:\n``<path/to/file.py>::<callname>:<num>``. for example a doctest for a\nfunction might look like this ``mymod.py::funcname:0``, and a class\nmethod might look like this: ``mymod.py::classname::method:0``\n\nusing the native interface.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nin addition to the ``pytest`` plugin, xdoctest has a native doctest runner.\nyou can use the ``xdoctest`` command line tool that is installed with the\npackage and point it a module directory or a particular file.\n\nyou can also make it such that invoking your module as ``__main__`` invokes the\nxdoctest native runner using the using the ``xdoctest.doctest_module(path)``\nmethod, which can be placed in the ``__main__`` section of any module as such:\n\n.. code:: python\n\n    if __name__ == '__main__':\n        import xdoctest\n        xdoctest.doctest_module(__file__)\n\nthis sets up the ability to invoke the ``xdoctest`` command line\ninterface. ``python -m <modname> <command>``.\n\nhowever, it is typically prefered to just use the ``xdoctest`` executable and\npass it the path to your file, or the name of an installed module. in this case\nit is invoked like ``xdoctest -m <modname> <command>``.\n\nusing either of these methods you can natively invoke xdoctest on a module or\npackage, which exposes the command line interface. both of these expose the\ncommand line interface, allowing you to pass a command to xdoctest.\n\n-  if ``<command>`` is ``all``, then each enabled doctest in the module\n   is executed: ``python -m <modname> all``\n\n-  if ``<command>`` is ``list``, then the names of each enabled doctest\n   is listed.\n\n-  if ``<command>`` is ``dump``, then all doctests are converted into a format\n   suitable for unit testing, and dumped to stdout (new in 0.4.0).\n\n-  if ``<command>`` is a ``callname`` (name of a function or a class and\n   method), then that specific doctest is executed:\n   ``python -m <modname> <callname>``. note: you can execute disabled\n   doctests or functions without any arguments (zero-args) this way.\n\nfor example if you created a module ``mymod.py`` with the following\ncode:\n\n.. code:: python\n\n\n    def func1():\n        \"\"\"\n        example:\n            >>> assert func1() == 1\n        \"\"\"\n        return 1\n\n    def func2(a):\n        \"\"\"\n        example:\n            >>> assert func2(1) == 2\n            >>> assert func2(2) == 3\n        \"\"\"\n        return a + 1\n\nyou could\n\n* use the command ``xdoctest -m mymod list`` to list the names of all functions with doctests\n* use the command ``xdoctest -m mymod all`` to run all functions with doctests\n* use the command ``xdoctest -m mymod func1`` to run only func1's doctest\n* use the command ``xdoctest -m mymod func2`` to run only func2's doctest\n\n\npassing ``--help`` to either way of invoking the native runner will result in\nsomething similar to the following that outlines what other options are\navailable:\n\n.. code::\n\n    usage: xdoctest [-h] [--version] [-m modname] [-c command] [--style {auto,google,freeform}] [--analysis {auto,static,dynamic}] [--durations durations] [--time]\n                    [--colored colored] [--nocolor] [--offset] [--report {none,cdiff,ndiff,udiff,only_first_failure}] [--options options] [--global-exec global_exec]\n                    [--verbose verbose] [--quiet] [--silent]\n                    [arg ...]\n\n    xdoctest 1.0.1 - on python - 3.9.9 (main, jun 10 2022, 17:45:11)\n    [gcc 11.2.0] - discover and run doctests within a python package\n\n    positional arguments:\n      arg                   ignored if optional arguments are specified, otherwise: defaults --modname to arg.pop(0). defaults --command to arg.pop(0). (default: none)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             display version info and quit (default: false)\n      -m modname, --modname modname\n                            module name or path. if specified positional modules are ignored (default: none)\n      -c command, --command command\n                            a doctest name or a command (list|all|<callname>). defaults to all (default: none)\n      --style {auto,google,freeform}\n                            choose the style of doctests that will be parsed (default: auto)\n      --analysis {auto,static,dynamic}\n                            how doctests are collected (default: auto)\n      --durations durations\n                            specify execution times for slowest n tests.n=0 will show times for all tests (default: none)\n      --time                same as if durations=0 (default: false)\n      --colored colored     enable or disable ansi coloration in stdout (default: true)\n      --nocolor             disable ansi coloration in stdout\n      --offset              if true formatted source linenumbers will agree with their location in the source file. otherwise they will be relative to the doctest itself. (default:\n                            false)\n      --report {none,cdiff,ndiff,udiff,only_first_failure}\n                            choose another output format for diffs on xdoctest failure (default: udiff)\n      --options options     default directive flags for doctests (default: none)\n      --global-exec global_exec\n                            custom python code to execute before every test (default: none)\n      --verbose verbose     verbosity level. 0 is silent, 1 prints out test names, 2 additionally prints test stdout, 3 additionally prints test source (default: 3)\n      --quiet               sets verbosity to 1\n      --silent              sets verbosity to 0\n\n\nzero-args runner\n^^^^^^^^^^^^^^^^\n\nthe native interface has a \"zero-args\" mode in the\n``xdoctest`` runner. this allows you to run functions in your modules\nvia the command line as long as they take no arguments. the purpose is\nto create a quick entry point to functions in your code (because\n``xdoctest`` is taking the space in the ``__main__`` block).\n\nfor example, you might create a module ``mymod.py`` with the following\ncode:\n\n.. code:: python\n\n    def myfunc():\n        print('hello world')\n\n    if __name__ == '__main__':\n        import xdoctest\n        xdoctest.doctest_module(__file__)\n\neven though ``myfunc`` has no doctest it can still be run using the\ncommand ``python -m mymod myfunc``.\n\nnote, even though \"zero-arg\" functions can be run via this interface\nthey are not run by ``python -m mymod all``, nor are they listed by\n``python -m mymod list``.\n\nhowever, if you are doing this often, you may be better served by `fire\n<https://github.com/google/python-fire>`__.\n\nenhancements\n------------\n\nthe main enhancements ``xdoctest`` offers over ``doctest`` are:\n\n1. all lines in the doctest can now be prefixed with ``>>>``. there is\n   no need for the developer to differentiate between ``ps1`` and\n   ``ps2`` lines. however, old-style doctests where ``ps2`` lines are\n   prefixed with ``...`` are still valid.\n2. additionally, the multi-line strings don't require any prefix (but\n   its ok if they do have either prefix).\n3. tests are executed in blocks, rather than line-by-line, thus\n   comment-based directives (e.g. ``# doctest: +skip``) can now applied\n   to an entire block (by placing it one the line above), in addition to having\n   it just apply to a single line (by placing it in-line at the end).\n4. tests without a \"want\" statement will ignore any stdout / final\n   evaluated value. this makes it easy to use simple assert statements\n   to perform checks in code that might write to stdout.\n5. if your test has a \"want\" statement and ends with both a value and\n   stdout, both are checked, and the test will pass if either matches.\n6. ouptut from multiple sequential print statements can now be checked by\n   a single \"got\" statement. (new in 0.4.0).\n\nsee code in ``dev/_compare/demo_enhancements.py`` for a demo that illustrates\nseveral of these enhancements. this demo shows cases where ``xdoctest`` works\nbut ``doctest`` fails. as of version 0.9.1, there are no known syntax backwards\nincompatability. please submit an issue if you can find any backwards\nincompatible cases.\n\n\nexamples\n--------\n\nhere is an example demonstrating the new relaxed (and\nbackwards-compatible) syntax:\n\n.. code:: python\n\n    def func():\n        \"\"\"\n        # old way\n        >>> def func():\n        ...     print('the old regex-based parser required specific formatting')\n        >>> func()\n        the old regex-based parser required specific formatting\n\n        # new way\n        >>> def func():\n        >>>     print('the new ast-based parser lets you prefix all lines with >>>')\n        >>> func()\n        the new ast-based parser lets you prefix all lines with >>>\n        \"\"\"\n\n.. code:: python\n\n    def func():\n        \"\"\"\n        # old way\n        >>> print('''\n        ... it would be nice if we didnt have to deal with prefixes\n        ... in multiline strings.\n        ... '''.strip())\n        it would be nice if we didnt have to deal with prefixes\n        in multiline strings.\n\n        # new way\n        >>> print('''\n            multiline can now be written without prefixes.\n            editing them is much more natural.\n            '''.strip())\n        multiline can now be written without prefixes.\n        editing them is much more natural.\n\n        # this is ok too\n        >>> print('''\n        >>> just prefix everything with >>> and the doctest should work\n        >>> '''.strip())\n        just prefix everything with >>> and the doctest should work\n\n        \"\"\"\n\nxdoctest parsing style\n----------------------\n\nthere are currently two main doctest parsing styles: ``google`` and\n``freeform``, as well as a third style: ``auto``, which is a hybrid.\n\nthe parsing style can be set via the ``--style`` command line argument in the\nxdoctest cli, or via the ``--xdoctest-style`` if using pytest.\n\n\nsetting ``--style=google`` (or ``--xdoctest-style=google`` in pytest) enables\ngoogle-style parsing.\na `google-style <https://sphinxcontrib-napoleon.readthedocs.io>`__ doctest is\nexpected to exist in  google \"docblock\" with an ``example:`` or ``doctest:``\ntag. all code in this block is parsed out as a single doctest.\n\nsetting ``--style=freeform`` (or ``--xdoctest-style=freeform`` in pytest) enables\nfreeform-style parsing.\na freeform style doctest is any contiguous block of lines prefixed by ``>>>``.\nthis is the original parsing style of the builtin doctest module. each block is\nlisted as its own test.\n\nby default xdoctest sets ``--style=auto`` (or ``--xdoctest-style=auto`` in\npytest) which will pull all google-style blocks out as single doctests, while\nstill all other ``>>>`` prefixed code out as a freeform doctest.\n\n\nnotes on got/want tests\n-----------------------\n\nthe new got/want tester is very permissive by default; it ignores\ndifferences in whitespace, tries to normalize for python 2/3\nunicode/bytes differences, ansi formatting, and it uses the old doctest\nellipsis fuzzy matcher by default. if the \"got\" text matches the \"want\"\ntext at any point, the test passes.\n\ncurrently, this permissiveness is not highly configurable as it was in\nthe original doctest module. it is an open question as to whether or not\nthis module should support that level of configuration. if the test\nrequires a high degree of specificity in the got/want checker, it may\njust be better to use an ``assert`` statement.\n\nbackwards compatibility\n-----------------------\nthere are no known syntax incompatibilities with original doctests. this is\nbased on running doctests on real life examples in ``boltons``, ``ubelt``,\n``networkx``, ``pytorch``, and on a set of extensive testing suite. please\nraise an issue or submit a merge/pull request if you find any incompatibility.\n\ndespite full syntax backwards compatibility, there some runtime\nincompatibilities by design. specifically, xdoctest enables a different set of\ndefault directives, such that the \"got\"/\"want\" checker is more permissive.\nthus, a test that fails in ``doctest`` based on a \"got\"/\"want\" check, may pass\nin ``xdoctest``. for this reason it is recommended that you rely on coded\n``assert``-statements for system-critical code. this also makes it much easier\nto transform your ``xdoctest`` into a ``unittest`` when you realize your\ndoctests are getting too long.\n\n\none last example\n----------------\n\nxdoctest is a good demonstration of itself. after pip installing xdoctest, try\nrunning xdoctest on xdoctest.\n\n.. code:: bash\n\n    xdoctest xdoctest\n\nif you would like a slightly less verbose output, try\n\n.. code:: bash\n\n    xdoctest xdoctest --verbose=1\n\n    # or\n\n    xdoctest xdoctest --verbose=0\n\n\nyou could also consider running xdoctests tests through pytest:\n\n\n.. code:: bash\n\n    pytest $(python -c 'import xdoctest, pathlib; print(pathlib.path(xdoctest.__file__).parent)') --xdoctest\n\n\nif you would like a slightly more verbose output, try\n\n.. code:: bash\n\n    pytest -s --verbose --xdoctest-verbose=3 --xdoctest $(python -c 'import xdoctest, pathlib; print(pathlib.path(xdoctest.__file__).parent)')\n\n\nif you ran these commands, the myriad of characters that flew across your\nscreen are lots more examples of what you can do with doctests.\n\n\n.. |circleci| image:: https://circleci.com/gh/erotemic/xdoctest.svg?style=svg\n    :target: https://circleci.com/gh/erotemic/xdoctest\n.. |travis| image:: https://img.shields.io/travis/erotemic/xdoctest/main.svg?label=travis%20ci\n   :target: https://travis-ci.org/erotemic/xdoctest\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/erotemic/xdoctest?branch=main&svg=true\n   :target: https://ci.appveyor.com/project/erotemic/xdoctest/branch/main\n.. |codecov| image:: https://codecov.io/github/erotemic/xdoctest/badge.svg?branch=main&service=github\n   :target: https://codecov.io/github/erotemic/xdoctest?branch=main\n.. |pypi| image:: https://img.shields.io/pypi/v/xdoctest.svg\n   :target: https://pypi.python.org/pypi/xdoctest\n.. |pypidownloads| image:: https://img.shields.io/pypi/dm/xdoctest.svg\n   :target: https://pypistats.org/packages/xdoctest\n.. |condadownloads| image:: https://anaconda.org/conda-forge/xdoctest/badges/downloads.svg\n   :target: https://anaconda.org/conda-forge/xdoctest\n.. |readthedocs| image:: https://readthedocs.org/projects/xdoctest/badge/?version=latest\n    :target: https://xdoctest.readthedocs.io\n.. |githubactions| image:: https://github.com/erotemic/xdoctest/actions/workflows/tests.yml/badge.svg?branch=main\n    :target: https://github.com/erotemic/xdoctest/actions?query=branch%3amain\n\n\n",
  "docs_url": null,
  "keywords": "xdoctest,doctest,test,docstr,pytest",
  "license": "apache 2",
  "name": "xdoctest",
  "package_url": "https://pypi.org/project/xdoctest/",
  "project_url": "https://pypi.org/project/xdoctest/",
  "project_urls": {
    "Homepage": "https://github.com/Erotemic/xdoctest"
  },
  "release_url": "https://pypi.org/project/xdoctest/1.1.2/",
  "requires_dist": [
    "pyflakes (>=2.2.0) ; extra == 'all'",
    "pyflakes (==2.2.0) ; extra == 'all-strict'",
    "colorama (==0.4.1) ; (platform_system == \"Windows\") and extra == 'all-strict'",
    "debugpy (==1.3.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all-strict'",
    "tomli (==0.2.0) ; (python_version < \"3.11.0\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "ipykernel (==6.0.0) ; (python_version < \"3.12\" and python_version >= \"3.7\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all-strict'",
    "Pygments (==2.0.0) ; (python_version < \"3.5.0\" and python_version >= \"2.7.0\") and extra == 'all-strict'",
    "jupyter-client (==6.1.5) ; (python_version < \"3.6.1\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "IPython (==7.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all-strict'",
    "ipykernel (==5.2.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all-strict'",
    "nbconvert (==6.0.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\" and platform_python_implementation != \"PyPy\") and extra == 'all-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all-strict'",
    "ipykernel (==6.11.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all-strict'",
    "typing (==3.7.4) ; (python_version <= \"3.4\") and extra == 'all-strict'",
    "debugpy (==1.6.0) ; (python_version >= \"3.10\") and extra == 'all-strict'",
    "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all-strict'",
    "Pygments (==2.4.1) ; (python_version >= \"3.5.0\") and extra == 'all-strict'",
    "attrs (==19.2.0) ; (python_version >= \"3.6\") and extra == 'all-strict'",
    "jedi (==0.16) ; (python_version >= \"3.6\") and extra == 'all-strict'",
    "jupyter-core (==4.7.0) ; (python_version >= \"3.6\") and extra == 'all-strict'",
    "ipython-genutils (==0.2.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'all-strict'",
    "jinja2 (==3.0.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'all-strict'",
    "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all-strict'",
    "jupyter-client (==7.0.0) ; (python_version >= \"3.6.1\") and extra == 'all-strict'",
    "IPython (==7.23.1) ; (python_version >= \"3.7\") and extra == 'all-strict'",
    "nbconvert (==6.1.0) ; (python_version >= \"3.7.0\" and platform_python_implementation != \"PyPy\") and extra == 'all-strict'",
    "colorama (>=0.4.1) ; (platform_system == \"Windows\") and extra == 'all'",
    "debugpy (>=1.3.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'all'",
    "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'all'",
    "tomli (>=0.2.0) ; (python_version < \"3.11.0\" and python_version >= \"3.6\") and extra == 'all'",
    "ipykernel (>=6.0.0) ; (python_version < \"3.12\" and python_version >= \"3.7\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all'",
    "Pygments (>=2.0.0) ; (python_version < \"3.5.0\" and python_version >= \"2.7.0\") and extra == 'all'",
    "jupyter-client (>=6.1.5) ; (python_version < \"3.6.1\" and python_version >= \"3.6\") and extra == 'all'",
    "IPython (>=7.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
    "debugpy (>=1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'all'",
    "ipykernel (>=5.2.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all'",
    "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'all'",
    "nbconvert (>=6.0.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\" and platform_python_implementation != \"PyPy\") and extra == 'all'",
    "debugpy (>=1.0.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'all'",
    "debugpy (>=1.0.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'all'",
    "ipykernel (>=6.11.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'all'",
    "typing (>=3.7.4) ; (python_version <= \"3.4\") and extra == 'all'",
    "debugpy (>=1.6.0) ; (python_version >= \"3.10\") and extra == 'all'",
    "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'all'",
    "Pygments (>=2.4.1) ; (python_version >= \"3.5.0\") and extra == 'all'",
    "attrs (>=19.2.0) ; (python_version >= \"3.6\") and extra == 'all'",
    "jedi (>=0.16) ; (python_version >= \"3.6\") and extra == 'all'",
    "jupyter-core (>=4.7.0) ; (python_version >= \"3.6\") and extra == 'all'",
    "ipython-genutils (>=0.2.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'all'",
    "jinja2 (>=3.0.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'all'",
    "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'all'",
    "jupyter-client (>=7.0.0) ; (python_version >= \"3.6.1\") and extra == 'all'",
    "IPython (>=7.23.1) ; (python_version >= \"3.7\") and extra == 'all'",
    "nbconvert (>=6.1.0) ; (python_version >= \"3.7.0\" and platform_python_implementation != \"PyPy\") and extra == 'all'",
    "colorama ; (platform_system == \"Windows\") and extra == 'colors'",
    "Pygments ; (python_version < \"3.5.0\" and python_version >= \"2.7.0\") and extra == 'colors'",
    "Pygments ; (python_version >= \"3.5.0\") and extra == 'colors'",
    "debugpy ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'jupyter'",
    "ipykernel ; (python_version < \"3.12\" and python_version >= \"3.7\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'jupyter'",
    "jupyter-client ; (python_version < \"3.6.1\" and python_version >= \"3.6\") and extra == 'jupyter'",
    "IPython ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'jupyter'",
    "debugpy ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'jupyter'",
    "ipykernel ; (python_version < \"3.7\" and python_version >= \"3.6\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'jupyter'",
    "nbconvert ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\" and platform_python_implementation != \"PyPy\") and extra == 'jupyter'",
    "debugpy ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'jupyter'",
    "debugpy ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'jupyter'",
    "ipykernel ; (python_version < \"4.0\" and python_version >= \"3.12\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'jupyter'",
    "debugpy ; (python_version >= \"3.10\") and extra == 'jupyter'",
    "attrs ; (python_version >= \"3.6\") and extra == 'jupyter'",
    "jedi ; (python_version >= \"3.6\") and extra == 'jupyter'",
    "jupyter-core ; (python_version >= \"3.6\") and extra == 'jupyter'",
    "ipython-genutils ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'jupyter'",
    "jinja2 ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'jupyter'",
    "jupyter-client ; (python_version >= \"3.6.1\") and extra == 'jupyter'",
    "IPython ; (python_version >= \"3.7\") and extra == 'jupyter'",
    "nbconvert ; (python_version >= \"3.7.0\" and platform_python_implementation != \"PyPy\") and extra == 'jupyter'",
    "pyflakes (>=2.2.0) ; extra == 'optional'",
    "pyflakes (==2.2.0) ; extra == 'optional-strict'",
    "colorama (==0.4.1) ; (platform_system == \"Windows\") and extra == 'optional-strict'",
    "debugpy (==1.3.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional-strict'",
    "tomli (==0.2.0) ; (python_version < \"3.11.0\" and python_version >= \"3.6\") and extra == 'optional-strict'",
    "ipykernel (==6.0.0) ; (python_version < \"3.12\" and python_version >= \"3.7\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional-strict'",
    "Pygments (==2.0.0) ; (python_version < \"3.5.0\" and python_version >= \"2.7.0\") and extra == 'optional-strict'",
    "jupyter-client (==6.1.5) ; (python_version < \"3.6.1\" and python_version >= \"3.6\") and extra == 'optional-strict'",
    "IPython (==7.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional-strict'",
    "ipykernel (==5.2.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional-strict'",
    "nbconvert (==6.0.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\" and platform_python_implementation != \"PyPy\") and extra == 'optional-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional-strict'",
    "debugpy (==1.0.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional-strict'",
    "ipykernel (==6.11.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional-strict'",
    "debugpy (==1.6.0) ; (python_version >= \"3.10\") and extra == 'optional-strict'",
    "Pygments (==2.4.1) ; (python_version >= \"3.5.0\") and extra == 'optional-strict'",
    "attrs (==19.2.0) ; (python_version >= \"3.6\") and extra == 'optional-strict'",
    "jedi (==0.16) ; (python_version >= \"3.6\") and extra == 'optional-strict'",
    "jupyter-core (==4.7.0) ; (python_version >= \"3.6\") and extra == 'optional-strict'",
    "ipython-genutils (==0.2.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'optional-strict'",
    "jinja2 (==3.0.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'optional-strict'",
    "jupyter-client (==7.0.0) ; (python_version >= \"3.6.1\") and extra == 'optional-strict'",
    "IPython (==7.23.1) ; (python_version >= \"3.7\") and extra == 'optional-strict'",
    "nbconvert (==6.1.0) ; (python_version >= \"3.7.0\" and platform_python_implementation != \"PyPy\") and extra == 'optional-strict'",
    "colorama (>=0.4.1) ; (platform_system == \"Windows\") and extra == 'optional'",
    "debugpy (>=1.3.0) ; (python_version < \"3.10\" and python_version >= \"3.9\") and extra == 'optional'",
    "tomli (>=0.2.0) ; (python_version < \"3.11.0\" and python_version >= \"3.6\") and extra == 'optional'",
    "ipykernel (>=6.0.0) ; (python_version < \"3.12\" and python_version >= \"3.7\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional'",
    "Pygments (>=2.0.0) ; (python_version < \"3.5.0\" and python_version >= \"2.7.0\") and extra == 'optional'",
    "jupyter-client (>=6.1.5) ; (python_version < \"3.6.1\" and python_version >= \"3.6\") and extra == 'optional'",
    "IPython (>=7.10.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
    "debugpy (>=1.0.0) ; (python_version < \"3.7\" and python_version >= \"3.6\") and extra == 'optional'",
    "ipykernel (>=5.2.0) ; (python_version < \"3.7\" and python_version >= \"3.6\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional'",
    "nbconvert (>=6.0.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\" and platform_python_implementation != \"PyPy\") and extra == 'optional'",
    "debugpy (>=1.0.0) ; (python_version < \"3.8\" and python_version >= \"3.7\") and extra == 'optional'",
    "debugpy (>=1.0.0) ; (python_version < \"3.9\" and python_version >= \"3.8\") and extra == 'optional'",
    "ipykernel (>=6.11.0) ; (python_version < \"4.0\" and python_version >= \"3.12\" and (platform_system != \"Windows\" or platform_python_implementation != \"PyPy\")) and extra == 'optional'",
    "debugpy (>=1.6.0) ; (python_version >= \"3.10\") and extra == 'optional'",
    "Pygments (>=2.4.1) ; (python_version >= \"3.5.0\") and extra == 'optional'",
    "attrs (>=19.2.0) ; (python_version >= \"3.6\") and extra == 'optional'",
    "jedi (>=0.16) ; (python_version >= \"3.6\") and extra == 'optional'",
    "jupyter-core (>=4.7.0) ; (python_version >= \"3.6\") and extra == 'optional'",
    "ipython-genutils (>=0.2.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'optional'",
    "jinja2 (>=3.0.0) ; (python_version >= \"3.6\" and platform_python_implementation != \"PyPy\") and extra == 'optional'",
    "jupyter-client (>=7.0.0) ; (python_version >= \"3.6.1\") and extra == 'optional'",
    "IPython (>=7.23.1) ; (python_version >= \"3.7\") and extra == 'optional'",
    "nbconvert (>=6.1.0) ; (python_version >= \"3.7.0\" and platform_python_implementation != \"PyPy\") and extra == 'optional'",
    "cmake (==3.21.2) ; (python_version < \"3.11\") and extra == 'tests-binary-strict'",
    "ninja (==1.10.2) ; (python_version < \"3.11\") and extra == 'tests-binary-strict'",
    "pybind11 (==2.7.1) ; (python_version < \"3.11\") and extra == 'tests-binary-strict'",
    "scikit-build (==0.11.1) ; (python_version < \"3.11\") and extra == 'tests-binary-strict'",
    "cmake (==3.25.0) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary-strict'",
    "ninja (==1.11.1) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary-strict'",
    "pybind11 (==2.10.3) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary-strict'",
    "scikit-build (==0.16.1) ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary-strict'",
    "cmake ; (python_version < \"3.11\") and extra == 'tests-binary'",
    "ninja ; (python_version < \"3.11\") and extra == 'tests-binary'",
    "pybind11 ; (python_version < \"3.11\") and extra == 'tests-binary'",
    "scikit-build ; (python_version < \"3.11\") and extra == 'tests-binary'",
    "cmake ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary'",
    "ninja ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary'",
    "pybind11 ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary'",
    "scikit-build ; (python_version < \"4.0\" and python_version >= \"3.11\") and extra == 'tests-binary'",
    "pytest (==4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests-strict'",
    "pytest (==4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests-strict'",
    "typing (==3.7.4) ; (python_version <= \"3.4\") and extra == 'tests-strict'",
    "pytest (==6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests-strict'",
    "pytest-cov (==3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests-strict'",
    "pytest (>=4.6.0) ; (python_version < \"3.10.0\" and python_version >= \"3.7.0\") and extra == 'tests'",
    "pytest (>=4.6.0) ; (python_version < \"3.7.0\" and python_version >= \"3.6.0\") and extra == 'tests'",
    "typing (>=3.7.4) ; (python_version <= \"3.4\") and extra == 'tests'",
    "pytest (>=6.2.5) ; (python_version >= \"3.10.0\") and extra == 'tests'",
    "pytest-cov (>=3.0.0) ; (python_version >= \"3.6.0\") and extra == 'tests'"
  ],
  "requires_python": ">=3.6",
  "summary": "a rewrite of the builtin doctest module",
  "version": "1.1.2",
  "releases": [],
  "developers": [
    "erotemic@gmail.com",
    "jon_crall"
  ],
  "kwds": "doctest doctest_module doctests docstring documentation",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_xdoctest",
  "homepage": "https://github.com/erotemic/xdoctest",
  "release_count": 68,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_cmake",
    "pypi_colorama",
    "pypi_debugpy",
    "pypi_ipykernel",
    "pypi_ipython",
    "pypi_ipython_genutils",
    "pypi_jedi",
    "pypi_jinja2",
    "pypi_jupyter_client",
    "pypi_jupyter_core",
    "pypi_nbconvert",
    "pypi_ninja",
    "pypi_pybind11",
    "pypi_pyflakes",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scikit_build",
    "pypi_tomli",
    "pypi_typing"
  ]
}
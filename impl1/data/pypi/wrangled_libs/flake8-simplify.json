{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "[![pypi version](https://badge.fury.io/py/flake8-simplify.svg)](https://badge.fury.io/py/flake8-simplify)\n[![code on github](https://img.shields.io/badge/code-github-brightgreen)](https://github.com/martinthoma/flake8-simplify)\n[![actions status](https://github.com/martinthoma/flake8-simplify/workflows/unit%20tests/badge.svg)](https://github.com/martinthoma/flake8-simplify/actions)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# flake8-simplify\n\na [flake8](https://flake8.pycqa.org/en/latest/index.html) plugin that helps you simplify your code.\n\n## installation\n\ninstall with `pip`:\n\n```bash\npip install flake8-simplify\n```\n\npython 3.8 to 3.11 are supported.\n\n\n## usage\n\njust call `flake8 .` in your package or `flake your.py`:\n\n```\n$ flake8 .\n./foo/__init__.py:690:12: sim101 multiple isinstance-calls which can be merged into a single call for variable 'other'\n```\n\n\n## rules\n\npython-specific rules:\n\n* `sim101`: multiple isinstance-calls which can be merged into a single call by\n  using a tuple as a second argument ([example](#sim101))\n* [`sim104`](https://github.com/martinthoma/flake8-simplify/issues/4) ![](https://shields.io/badge/-legacyfix-inactive): use 'yield from iterable' (introduced in python 3.3, see [pep 380](https://docs.python.org/3/whatsnew/3.3.html#pep-380)) ([example](#sim104))\n* [`sim105`](https://github.com/martinthoma/flake8-simplify/issues/5): use ['contextlib.suppress(...)'](https://docs.python.org/3/library/contextlib.html#contextlib.suppress) instead of try-except-pass ([example](#sim105))\n* [`sim107`](https://github.com/martinthoma/flake8-simplify/issues/9): don't use `return` in try/except and finally  ([example](#sim107))\n* [`sim108`](https://github.com/martinthoma/flake8-simplify/issues/12): use the ternary operator if it's reasonable  ([example](#sim108))\n* [`sim109`](https://github.com/martinthoma/flake8-simplify/issues/11): use a tuple to compare a value against multiple values ([example](#sim109))\n* [`sim110`](https://github.com/martinthoma/flake8-simplify/issues/15): use [any(...)](https://docs.python.org/3/library/functions.html#any)  ([example](#sim110))\n* [`sim111`](https://github.com/martinthoma/flake8-simplify/issues/15): use [all(...)](https://docs.python.org/3/library/functions.html#all) ([example](#sim111))\n* [`sim113`](https://github.com/martinthoma/flake8-simplify/issues/18): use enumerate instead of manually incrementing a counter ([example](#sim113))\n* [`sim114`](https://github.com/martinthoma/flake8-simplify/issues/10): combine conditions via a logical or to prevent duplicating code ([example](#sim114))\n* [`sim115`](https://github.com/martinthoma/flake8-simplify/issues/17): use context handler for opening files ([example](#sim115))\n* [`sim116`](https://github.com/martinthoma/flake8-simplify/issues/31): use a dictionary instead of many if/else equality checks ([example](#sim116))\n* [`sim117`](https://github.com/martinthoma/flake8-simplify/issues/35): merge with-statements that use the same scope ([example](#sim117))\n* `sim119`: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 63](https://github.com/martinthoma/flake8-simplify/issues/63)\n* `sim120` ![](https://shields.io/badge/-legacyfix-inactive): use 'class foobar:' instead of 'class foobar(object):' ([example](#sim120))\n* `sim121`: reserved for [sim908](#sim908) once it's stable\n* `sim125`: reserved for [sim905](#sim905) once it's stable\n* `sim126`: reserved for [sim906](#sim906) once it's stable\n* `sim127`: reserved for [sim907](#sim907) once it's stable\n\nsimplifying comparisons:\n\n* `sim201`: use 'a != b' instead of 'not a == b' ([example](#sim201))\n* `sim202`: use 'a == b' instead of 'not a != b' ([example](#sim202))\n* `sim203`: use 'a not in b' instead of 'not (a in b)' ([example](#sim203))\n* `sim204`: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 116](https://github.com/martinthoma/flake8-simplify/issues/116)\n* `sim205`: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 116](https://github.com/martinthoma/flake8-simplify/issues/116)\n* `sim206`: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 116](https://github.com/martinthoma/flake8-simplify/issues/116)\n* `sim207`: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 116](https://github.com/martinthoma/flake8-simplify/issues/116)\n* `sim208`: use 'a' instead of 'not (not a)' ([example](#sim208))\n* `sim210`: use 'bool(a)' instead of 'true if a else false' ([example](#sim210))\n* `sim211`: use 'not a' instead of 'false if a else true' ([example](#sim211))\n* [`sim212`](https://github.com/martinthoma/flake8-simplify/issues/6): use 'a if a else b' instead of 'b if not a else a' ([example](#sim212))\n* [`sim220`](https://github.com/martinthoma/flake8-simplify/issues/6): use 'false' instead of 'a and not a' ([example](#sim220))\n* [`sim221`](https://github.com/martinthoma/flake8-simplify/issues/6): use 'true' instead of 'a or not a' ([example](#sim221))\n* [`sim222`](https://github.com/martinthoma/flake8-simplify/issues/6): use 'true' instead of '... or true' ([example](#sim222))\n* [`sim223`](https://github.com/martinthoma/flake8-simplify/issues/6): use 'false' instead of '... and false' ([example](#sim223))\n* [`sim224`](https://github.com/martinthoma/flake8-simplify/issues/88): reserved for [sim901](#sim901) once it's stable\n* [`sim300`](https://github.com/martinthoma/flake8-simplify/issues/16): use 'age == 42' instead of '42 == age' ([example](#sim300))\n\nsimplifying usage of dictionaries:\n\n* [`sim401`](https://github.com/martinthoma/flake8-simplify/issues/72): use 'a_dict.get(key, \"default_value\")' instead of an if-block ([example](#sim401))\n* [`sim118`](https://github.com/martinthoma/flake8-simplify/issues/40): use 'key in dict' instead of 'key in dict.keys()' ([example](#sim118))\n* `sim119` reserved for [sim911](#sim911) once it's stable\n\ngeneral code style:\n\n* `sim102`: use a single if-statement instead of nested if-statements ([example](#sim102))\n* [`sim103`](https://github.com/martinthoma/flake8-simplify/issues/3): return the boolean condition directly ([example](#sim103))\n* [`sim106`](https://github.com/martinthoma/flake8-simplify/issues/8): handle error-cases first ([example](#sim106)). this rule was removed due to too many false-positives.\n* [`sim112`](https://github.com/martinthoma/flake8-simplify/issues/19): use capital environment variables ([example](#sim112))\n* `sim122` / sim902: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 125](https://github.com/martinthoma/flake8-simplify/issues/125)\n* `sim123` / sim902: ![](https://img.shields.io/badge/-removed-lightgrey) moved to [flake8-scream](https://github.com/martinthoma/flake8-scream) due to [issue 130](https://github.com/martinthoma/flake8-simplify/issues/130)\n* `sim124`: reserved for sim909 once it's stable\n\n**experimental rules:**\n\ngetting rules right for every possible case is hard. i don't want to disturb\npeoples workflows. for this reason, flake8-simplify introduces new rules with\nthe `sim9` prefix. every new rule will start with sim9 and stay there for at\nleast 6 months. in this time people can give feedback. once the rule is stable,\nthe code will change to another number.\n\ncurrent experimental rules:\n\n* `sim901`: use comparisons directly instead of wrapping them in a `bool(...)` call ([example](#sim901))\n* `sim904`: assign values to dictionary directly at initialization ([example](#sim904))\n* [`sim905`](https://github.com/martinthoma/flake8-simplify/issues/86): split string directly if only constants are used ([example](#sim905))\n* [`sim906`](https://github.com/martinthoma/flake8-simplify/issues/101): merge nested os.path.join calls ([example](#sim906))\n* [`sim907`](https://github.com/martinthoma/flake8-simplify/issues/64): use optional[type] instead of union[type, none] ([example](#sim907))\n* [`sim908`](https://github.com/martinthoma/flake8-simplify/issues/50): use dict.get(key) ([example](#sim908))\n* [`sim909`](https://github.com/martinthoma/flake8-simplify/issues/114): avoid reflexive assignments ([example](#sim909))\n* [`sim910`](https://github.com/martinthoma/flake8-simplify/issues/171): avoid to use `dict.get(key, none)` ([example](#sim910))\n* [`sim911`](https://github.com/martinthoma/flake8-simplify/issues/161): avoid using `zip(dict.keys(), dict.values())` ([example](#sim911))\n\n## disabling rules\n\nyou might have good reasons to\n[ignore some flake8 rules](https://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html).\nto do that, use the standard flake8 configuration. for example, within the `setup.cfg` file:\n\n```python\n[flake8]\nignore = sim106, sim113, sim119, sim9\n```\n\n\n## examples\n\n### sim101\n\n```python\n# bad\nisinstance(a, int) or isinstance(a, float)\n\n# good\nisinstance(a, (int, float))\n```\n\n### sim102\n\n```python\n# bad\nif a:\n    if b:\n        c\n\n# good\nif a and b:\n    c\n```\n\n### sim105\n\n```python\n# bad\ntry:\n    foo()\nexcept valueerror:\n    pass\n\n# good\nfrom contextlib import suppress\n\nwith suppress(valueerror):\n    foo()\n```\n\nplease note that `contextlib.suppress` is roughly 3x slower than `try/except`\n([source](https://github.com/martinthoma/flake8-simplify/issues/91)).\n\n### sim107\n\n```python\n# bad: this example returns 3!\ndef foo():\n    try:\n        1 / 0\n        return \"1\"\n    except:\n        return \"2\"\n    finally:\n        return \"3\"\n\n\n# good\ndef foo():\n    return_value = none\n    try:\n        1 / 0\n        return_value = \"1\"\n    except:\n        return_value = \"2\"\n    finally:\n        return_value = \"3\"  # you might also want to check if \"except\" happened\n    return return_value\n```\n\n### sim108\n\n```python\n# bad\nif a:\n    b = c\nelse:\n    b = d\n\n# good\nb = c if a else d\n```\n\n### sim109\n\n```python\n# bad\nif a == b or a == c:\n    d\n\n# good\nif a in (b, c):\n    d\n```\n\n### sim110\n\n```python\n# bad\nfor x in iterable:\n    if check(x):\n        return true\nreturn false\n\n# good\nreturn any(check(x) for x in iterable)\n```\n\n### sim111\n\n```python\n# bad\nfor x in iterable:\n    if check(x):\n        return false\nreturn true\n\n# good\nreturn all(not check(x) for x in iterable)\n```\n\n### sim112\n\n```python\n# bad\nos.environ[\"foo\"]\nos.environ.get(\"bar\")\n\n# good\nos.environ[\"foo\"]\nos.environ.get(\"bar\")\n```\n\n### sim113\n\nusing [`enumerate`](https://docs.python.org/3/library/functions.html#enumerate) in simple cases like the loops below is a tiny bit easier to read as the reader does not have to figure out where / when the loop variable is incremented (or if it is incremented in multiple places).\n\n```python\n# bad\nidx = 0\nfor el in iterable:\n    ...\n    idx += 1\n\n# good\nfor idx, el in enumerate(iterable):\n    ...\n```\n\n### sim114\n\n```python\n# bad\nif a:\n    b\nelif c:\n    b\n\n# good\nif a or c:\n    b\n```\n\n### sim115\n\n```python\n# bad\nf = open(...)\n...  # (do something with f)\nf.close()\n\n# good\nwith open(...) as f:\n    ...  # (do something with f)\n```\n\n### sim116\n\n```python\n# bad\nif a == \"foo\":\n    return \"bar\"\nelif a == \"bar\":\n    return \"baz\"\nelif a == \"boo\":\n    return \"ooh\"\nelse:\n    return 42\n\n# good\nmapping = {\"foo\": \"bar\", \"bar\": \"baz\", \"boo\": \"ooh\"}\nreturn mapping.get(a, 42)\n```\n\n### sim117\n\n```python\n# bad\nwith a() as a:\n    with b() as b:\n        print(\"hello\")\n\n# good\nwith a() as a, b() as b:\n    print(\"hello\")\n```\n\nthank you for pointing this one out, [aaron gokaslan](https://github.com/skylion007)!\n\n### sim118\n\n```python\n# bad\nkey in a_dict.keys()\n\n# good\nkey in a_dict\n```\n\nthank you for pointing this one out, [aaron gokaslan](https://github.com/skylion007)!\n\n\n### sim120\n\n```python\n# bad\nclass foobar(object):\n    ...\n\n\n# good\nclass foobar:\n    ...\n```\n\nboth notations are equivalent in python 3, but the second one is shorter.\n\n\n### sim201\n\n```python\n# bad\nnot a == b\n\n# good\na != b\n```\n\n### sim202\n\n```python\n# bad\nnot a != b\n\n# good\na == b\n```\n\n### sim203\n\n```python\n# bad\nnot a in b\n\n# good\na not in b\n```\n\n\n### sim208\n\n```python\n# bad\nnot (not a)\n\n# good\na\n```\n\n### sim210\n\n```python\n# bad\ntrue if a else false\n\n# good\nbool(a)\n```\n\n### sim211\n\n```python\n# bad\nfalse if a else true\n\n# good\nnot a\n```\n\n### sim212\n\n```python\n# bad\nb if not a else a\n\n# good\na if a else b\n```\n\n### sim220\n\n```python\n# bad\na and not a\n\n# good\nfalse\n```\n\n### sim221\n\n```python\n# bad\na or not a\n\n# good\ntrue\n```\n\n### sim222\n\n```python\n# bad\n... or true\n\n# good\ntrue\n```\n\n### sim223\n\n```python\n# bad\n... and false\n\n# good\nfalse\n```\n\n### sim300\n\n```python\n# bad; this is called a \"yoda-condition\"\n42 == age\n\n# good\nage == 42\n```\n\n### sim401\n\n```python\n# bad\nif key in a_dict:\n    value = a_dict[key]\nelse:\n    value = \"default_value\"\n\n# good\nthing = a_dict.get(key, \"default_value\")\n```\n\n### sim901\n\nthis rule will be renamed to `sim224` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 23rd of january and will end on 23rd of august 2022.\n\n```python\n# bad\nbool(a == b)\n\n# good\na == b\n```\n\n\n### sim904\n\nthis rule will be renamed to `sim224` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 12th of february and will end on 12th of september 2022.\n\n\n```python\n# bad\na = {}\na[\"b\"] = \"c\"\n\n# good\na = {\"b\": \"c\"}\n```\n\n### sim905\n\nthis rule will be renamed to `sim225` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 13th of february and will end on 13th of september 2022.\n\n```python\n# bad\ndomains = \"de com net org\".split()\n\n# good\ndomains = [\"de\", \"com\", \"net\", \"org\"]\n```\n\n### sim906\n\nthis rule will be renamed to `sim126` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 20th of february and will end on 20th of september 2022.\n\n```python\n# bad\nos.path.join(a, os.path.join(b, c))\n\n# good\nos.path.join(a, b, c)\n```\n\n### sim907\n\nthis rule will be renamed to `sim127` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 28th of march and will end on 28th of september 2022.\n\n```python\n# bad\ndef foo(a: union[int, none]) -> union[int, none]:\n    return a\n\n\n# good\ndef foo(a: optional[int]) -> optional[int]:\n    return a\n```\n\n### sim908\n\nthis rule will be renamed to `sim121` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 28th of march and will end on 28th of september 2022.\n\n```python\n# bad\nname = \"some_default\"\nif \"some_key\" in some_dict:\n    name = some_dict[\"some_key\"]\n\n# good\nname = some_dict.get(\"some_key\", \"some_default\")\n```\n\n### sim909\n\nthank you ryan delaney for the idea!\n\nthis rule will be renamed to `sim124` after its 6-month trial period is over.\nplease report any issues you encounter with this rule!\n\nthe trial period starts on 28th of march and will end on 28th of september 2022.\n\n```python\n# bad\nfoo = foo\n\n# good: nothing. reflexive assignments have no purpose.\n```\n\nor\n\n```python\n# bad\nfoo = foo = 42\n\n# good\nfoo = 42\n```\n\n### sim910\n\n```python\n# bad\ndict.get(key, none)\n\n# good\ndict.get(key)\n```\n",
  "docs_url": null,
  "keywords": "flake8",
  "license": "",
  "name": "flake8_simplify",
  "package_url": "https://pypi.org/project/flake8_simplify/",
  "project_url": "https://pypi.org/project/flake8_simplify/",
  "project_urls": {
    "Homepage": "https://github.com/MartinThoma/flake8-simplify"
  },
  "release_url": "https://pypi.org/project/flake8_simplify/0.21.0/",
  "requires_dist": [
    "astor>=0.1",
    "flake8>=3.7",
    "importlib-metadata>=0.9; python_version < \"3.8\""
  ],
  "requires_python": ">=3.6.1",
  "summary": "flake8 plugin which checks for code that can be simplified",
  "version": "0.21.0",
  "releases": [],
  "developers": [
    "info@martin-thoma.de"
  ],
  "kwds": "flake8 flake badge code svg",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_flake8_simplify",
  "homepage": "",
  "release_count": 38,
  "dependency_ids": [
    "pypi_astor",
    "pypi_flake8",
    "pypi_importlib_metadata"
  ]
}
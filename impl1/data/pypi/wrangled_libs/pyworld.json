{
  "classifiers": [],
  "description": "# pyworld - a python wrapper of world vocoder\n\n\n| **`linux`** | **`windows`** |\n|-----------------|-----------|\n| [![build status](https://app.travis-ci.com/jeremycchsu/python-wrapper-for-world-vocoder.svg?branch=master)](https://app.travis-ci.com/jeremycchsu/python-wrapper-for-world-vocoder) | [![build status](https://ci.appveyor.com/api/projects/status/github/jeremycchsu/python-wrapper-for-world-vocoder?svg=true)](https://ci.appveyor.com/project/jeremycchsu/python-wrapper-for-world-vocoder) |\n\n\n\n\nworld vocoder is a fast and high-quality vocoder\nwhich parameterizes speech into three components:\n\n  1. `f0`: pitch contour\n  2. `sp`: harmonic spectral envelope\n  3. `ap`: aperiodic spectral envelope (relative to the harmonic spectral envelope)\n\nit can also (re)synthesize speech using these features (see examples below).\n\nfor more information, please visit dr. morise's [world repository](https://github.com/mmorise/world)\nand the [official website of world vocoder](http://ml.cs.yamanashi.ac.jp/world/english)\n\n\n## apis\n\n### vocoder functions\n```python\nimport pyworld as pw\n_f0, t = pw.dio(x, fs)    # raw pitch extractor\nf0 = pw.stonemask(x, _f0, t, fs)  # pitch refinement\nsp = pw.cheaptrick(x, f0, t, fs)  # extract smoothed spectrogram\nap = pw.d4c(x, f0, t, fs)         # extract aperiodicity\n\ny = pw.synthesize(f0, sp, ap, fs) # synthesize an utterance using the parameters\n```\n\n\n### utility\n```python\n# convert speech into features (using default arguments)\nf0, sp, ap = pw.wav2world(x, fs)\n```\n<br/>\n\nyou can change the default arguments of the function, too.\nsee more info using `help`.\n\n\n## installation\n\n### using pip\n`pip install pyworld`\n<br/>\n\n### building from source\n```bash\ngit clone https://github.com/jeremycchsu/python-wrapper-for-world-vocoder.git\ncd python-wrapper-for-world-vocoder\ngit submodule update --init\npip install -u pip\npip install -r requirements.txt\npip install .\n```\nit will automatically `git clone` morise's world vocoder (c++ version).<br/>\n(it seems to me that using `virtualenv` or `conda` is the best practice.)<br/>\n<br/>\n\n### installation validation\nyou can validate installation by running\n```bash\ncd demo\npython demo.py\n```\nto see if you get results in `test/` direcotry.\n(please avoid writing and executing codes in the `python-wrapper-for-world-vocoder` folder for now.)<br/>\n\n### environment/dependencies\n- operating systems\n  - linux ubuntu 14.04+\n  - windows (thanks to [wuaalb](https://github.com/wuaalb))\n  - wsl\n- python\n  - 3.7+\n\nyou can install dependencies these by `pip install -r requirements.txt`\n\n\n\n## notice\n- world vocoder is designed for speech sampled \u2265 16 khz.\n  applying world to 8 khz speech will fail.\n  see a possible workaround [here](https://github.com/jeremycchsu/python-wrapper-for-world-vocoder/issues/54).\n- when the snr is low, extracting pitch using `harvest` instead of `dio`\n  is a better option.\n\n\n## troubleshooting\n1. upgrade your cython version to 0.24.<br/>\n   (i failed to build it on cython 0.20.1post0)<br/>\n   it'll require you to download cython form http://cython.org/<br/>\n   unzip it, and `python setup.py install` it.<br/>\n   (i tried `pip install cython` but the upgrade didn't seem correct)<br/>\n   (again, add `--user` if you don't have root access.)\n2. upon executing `demo/demo.py`, the following code might be needed in some environments (e.g. when you're working on a remote linux server):<br/>\n\n ```python\n import matplotlib\n matplotlib.use('agg')\n ```\n3. if you encounter `library not found: sndfile` error upon executing `demo.py`,\n   you might have to install it by `apt-get install libsoundfile1`.\n   you can also replace `pysoundfile` with `scipy` or `librosa`, but some modification is needed:\n   - librosa:\n     - load(fiilename, dtype=np.float64)\n     - output.write_wav(filename, wav, fs)\n     - remember to pass `dtype` argument to ensure that the method gives you a `double`.\n   - scipy:\n     - you'll have to write a customized utility function based on the following methods\n     - scipy.io.wavfile.read (but this gives you `short`)\n     - scipy.io.wavfile.write\n\n4. if you have installation issue on windows, i probably could not provide\n   much help because my development environment is ubuntu\n   and windows subsystem for linux ([read this if you are interested in installing it](https://github.com/jeremycchsu/wsl)).\n\n\n### other installation suggestions\n1. use `pip install .` is safer and you can easily uninstall pyworld by `pip uninstall pyworld`\n  - for mac users: you might need to do `macosx_deployment_target=10.9 pip install .` see [issue](https://github.com/seannaren/warp-ctc/issues/129#issuecomment-502349652).\n2. another way to install pyworld is via<br/>\n   `python setup.py install`<br/>\n   - add `--user` if you don't have root access<br/>\n   - add `--record install.txt` to track the installation dir<br/>\n3. if you just want to try out some experiments, execute<br/>\n  `python setup.py build_ext --inplace`<br/>\n  then you can use pyworld from this directory.<br/>\n  you can also copy the resulting **pyworld.so** (pyworld.{arch}.pyd on windows) file to\n  `~/.local/lib/python2.7/site-packages` (or corresponding windows directory)\n  so that you can use it everywhere like an installed package.<br/>\n  alternatively you can copy/symlink the compiled files using pip, e.g. `pip install -e .`\n\n\n\n## acknowledgement\nthank all contributors ([tats-u](https://github.com/tats-u), [wuaalb](https://github.com/wuaalb), [r9y9](https://github.com/r9y9), [rikrd](https://github.com/rikrd), [kudan2510](https://github.com/kundan2510)) for making this repo better and [sotelo](https://github.com/sotelo) whose [world.py](https://github.com/sotelo/world.py) inspired this repo.<br/>\n",
  "docs_url": null,
  "keywords": "vocoder",
  "license": "",
  "name": "pyworld",
  "package_url": "https://pypi.org/project/pyworld/",
  "project_url": "https://pypi.org/project/pyworld/",
  "project_urls": {
    "Homepage": "https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder"
  },
  "release_url": "https://pypi.org/project/pyworld/0.3.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pyworld: a python wrapper for world vocoder",
  "version": "0.3.4",
  "releases": [],
  "developers": [
    "jeremycchsu@gmail.com",
    "pyworld_contributors"
  ],
  "kwds": "vocoder wav2world python write_wav python2",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyworld",
  "homepage": "https://github.com/jeremycchsu/python-wrapper-for-world-vocoder",
  "release_count": 16,
  "dependency_ids": []
}
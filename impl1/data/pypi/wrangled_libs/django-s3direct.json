{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "# django-s3direct\n\n## directly upload files to s3 compatible services with django.\n\n<img src=\"https://raw.githubusercontent.com/bradleyg/django-s3direct/master/screenshot.png\" width=\"100%\"/>\n\n## installation\n\ninstall with pip:  \n`pip install django-s3direct`\n\n## access setup\n\n### when setting up access credentials you have two options:\n\n### option 1:\n\n**generate access credentials and add them directly to your django settings**.\nif using amazon s3 you'll also need to create an iam policy which grants\npermission to upload to your bucket for your newly created credentials.\n\n```json\n{\n  \"version\": \"2012-10-17\",\n  \"statement\": [\n    {\n      \"action\": [\n        \"s3:abortmultipartupload\",\n        \"s3:getobject\",\n        \"s3:listmultipartuploadparts\",\n        \"s3:putobject\",\n        \"s3:putobjectacl\"\n      ],\n      \"effect\": \"allow\",\n      \"resource\": \"arn:aws:s3:::your_bucket_name/*\"\n    }\n  ]\n}\n```\n\n### option 2:\n\n**use the ec2 instance profile and its attached iam role (aws only)**  \nensure the following trust policy is in place in addition to the policy\nabove. you'll also need the\n[boto3](https://github.com/boto/boto3) package installed.\n\n```json\n{\n  \"version\": \"2012-10-17\",\n  \"statement\": [\n    {\n      \"effect\": \"allow\",\n      \"principal\": {\n        \"service\": \"ec2.amazonaws.com\"\n      },\n      \"action\": \"sts:assumerole\"\n    }\n  ]\n}\n```\n\n### cors setup\n\nadd a cors policy to your bucket. note the etag header is\nimportant as it is used for multipart uploads. for more information see\n[here](https://github.com/ttlabs/evaporatejs/wiki/configuring-the-aws-s3-bucket).\n\n```json\n[\n  {\n    \"allowedheaders\": [\"*\"],\n    \"allowedmethods\": [\"get\", \"head\", \"put\", \"post\", \"delete\"],\n    \"allowedorigins\": [\"http://localhost:8080\"],\n    \"exposeheaders\": [\"etag\"],\n    \"maxageseconds\": 3000\n  }\n]\n```\n\n## django setup\n\n### settings.py\n\n```python\ninstalled_apps = [\n    ...\n    's3direct',\n    ...\n]\n\ntemplates = [{\n    ...\n    'app_dirs': true,\n    ...\n}]\n\n# aws\n\n# if these are set to none, the ec2 instance profile and iam role are used.\naws_access_key_id = 'your-aws-access-key-id'\naws_secret_access_key = 'your-aws-secret-access-key'\n\n# bucket name\naws_storage_bucket_name = 'your-aws-s3-bucket-name'\n\n# the region of your bucket, more info:\n# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\naws_s3_region_name = 'eu-west-1'\n\n# the endpoint of your bucket, more info:\n# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\naws_s3_endpoint_url = 'https://s3.eu-west-1.amazonaws.com'\n\ns3direct_destinations = {\n    'example_destination': {\n        # \"key\" [required] the location to upload file\n        #       1. string: folder path to upload to\n        #       2. function: generate folder path + filename using a function\n        'key': 'uploads/images',\n\n        # \"auth\" [optional] limit to specfic django users\n        #        function: acl function\n        'auth': lambda u: u.is_staff,\n\n        # \"allowed\" [optional] limit to specific mime types\n        #           list: list of mime types\n        'allowed': ['image/jpeg', 'image/png', 'video/mp4'],\n\n        # \"bucket\" [optional] bucket if different from aws_storage_bucket_name\n        #          string: bucket name\n        'bucket': 'custom-bucket',\n\n        # \"endpoint\" [optional] endpoint if different from aws_s3_endpoint_url\n        #            string: endpoint url\n        'endpoint': 'custom-endpoint',\n\n        # \"region\" [optional] region if different from aws_s3_region_name\n        #          string: region name\n        'region': 'custom-region', # default is 'aws_s3_region_name'\n\n        # \"acl\" [optional] custom acl for object, default is 'public-read'\n        #       string: acl\n        'acl': 'private',\n\n        # \"cache_control\" [optional] custom cache control header\n        #                 string: header\n        'cache_control': 'max-age=2592000',\n\n        # \"content_disposition\" [optional] custom content disposition header\n        #                       string: header\n        'content_disposition': lambda x: 'attachment; filename=\"{}\"'.format(x),\n\n        # \"content_length_range\" [optional] limit file size\n        #                        tuple: (from, to) in bytes\n        'content_length_range': (5000, 20000000),\n\n        # \"server_side_encryption\" [optional] use serverside encryption\n        #                          string: encrytion standard\n        'server_side_encryption': 'aes256',\n\n        # \"allow_existence_optimization\" [optional] checks to see if file already exists,\n        #                                returns the url to the object if so (no upload)\n        #                                boolean: true, false\n        'allow_existence_optimization': false,\n    },\n    'example_destination_two': {\n        'key': lambda filename, args: args + '/' + filename,\n    \t'key_args': 'uploads/images',\n    }\n}\n```\n\n### urls.py\n\n```python\nurlpatterns = [\n    ...\n    url(r'^s3direct/', include('s3direct.urls')),\n    ...\n]\n```\n\nrun `python manage.py collectstatic` if required.\n\n## use in django admin\n\n### models.py\n\n```python\nfrom django.db import models\nfrom s3direct.fields import s3directfield\n\nclass example(models.model):\n    video = s3directfield(dest='example_destination')\n```\n\n## use the widget in a custom form\n\n### forms.py\n\n```python\nfrom django import forms\nfrom s3direct.widgets import s3directwidget\n\nclass s3directuploadform(forms.form):\n    images = forms.urlfield(widget=s3directwidget(dest='example_destination'))\n```\n\n**\\*optional.** you can modify the html of the widget by overiding template **s3direct/templates/s3direct-widget.tpl**\n\n### views.py\n\n```python\nfrom django.views.generic import formview\nfrom .forms import s3directuploadform\n\nclass myview(formview):\n    template_name = 'form.html'\n    form_class = s3directuploadform\n```\n\n### templates/form.html\n\n```html\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>s3direct</title>\n    {{ form.media }}\n  </head>\n  <body>\n    <form action=\"\" method=\"post\">{% csrf_token %} {{ form.as_p }}</form>\n  </body>\n</html>\n```\n\n## examples\n\nexamples of both approaches can be found in the examples folder. to run them:\n\n```shell\n$ git clone git@github.com:bradleyg/django-s3direct.git\n$ cd django-s3direct\n$ python setup.py install\n$ cd example\n\n# add config to your environment\nexport aws_access_key_id='\u2026'\nexport aws_secret_access_key='\u2026'\nexport aws_storage_bucket_name='\u2026'\nexport aws_s3_region_name='\u2026'\nexport aws_s3_endpoint_url='\u2026'\n\n$ python manage.py migrate\n$ python manage.py createsuperuser\n$ python manage.py runserver\n```\n\nvisit `http://localhost:8080/admin` to view the admin widget and\n`http://localhost:8080/form` to view the custom form widget.\n\n## development\n\n```shell\n$ git clone git@github.com:bradleyg/django-s3direct.git\n$ cd django-s3direct\n\n# add your aws keys/details to .env file and export\n$ cp .env-dist .env\n\n# frontend deps\n$ npm i\n\n# install locally\n$ python setup.py develop\n\n# run examples\n$ python example/manage.py migrate\n$ python example/manage.py createsuperuser\n$ python example/manage.py runserver 0.0.0.0:8080\n\n# run tests\n$ npm run test\n\n# run frontend bundler and django server\n$ npm run dev\n\n# watch and build frontend (dev)\n$ npm run watch\n\n# build frontend (prod)\n$ npm run build\n\n# format python // pep8\n$ npm run yapf\n\n# upload to pypi\n$ npm run pypi\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "django-s3direct",
  "package_url": "https://pypi.org/project/django-s3direct/",
  "project_url": "https://pypi.org/project/django-s3direct/",
  "project_urls": {
    "Homepage": "https://github.com/bradleyg/django-s3direct#readme"
  },
  "release_url": "https://pypi.org/project/django-s3direct/2.0.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "add direct uploads to s3 functionality with a progress bar to file input fields.",
  "version": "2.0.3",
  "releases": [],
  "developers": [
    "bradley.griffiths@gmail.com",
    "bradley_griffiths"
  ],
  "kwds": "aws_s3_endpoint_url s3directuploadform s3direct s3direct_destinations s3directfield",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_s3direct",
  "homepage": "https://github.com/bradleyg/django-s3direct#readme",
  "release_count": 77,
  "dependency_ids": []
}
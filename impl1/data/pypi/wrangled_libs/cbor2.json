{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": ".. image:: https://github.com/agronholm/cbor2/actions/workflows/test.yml/badge.svg\n  :target: https://github.com/agronholm/cbor2/actions/workflows/test.yml\n  :alt: testing status\n.. image:: https://github.com/agronholm/cbor2/actions/workflows/publish.yml/badge.svg\n  :target: https://github.com/agronholm/cbor2/actions/workflows/publish.yml\n  :alt: publish status\n.. image:: https://coveralls.io/repos/github/agronholm/cbor2/badge.svg?branch=master\n  :target: https://coveralls.io/github/agronholm/cbor2?branch=master\n  :alt: code coverage\n.. image:: https://readthedocs.org/projects/cbor2/badge/?version=latest\n  :target: https://cbor2.readthedocs.io/en/latest/?badge=latest\n  :alt: documentation status\n\nabout\n=====\n\nthis library provides encoding and decoding for the concise binary object representation (cbor)\n(`rfc 8949`_) serialization format. the specification is fully compatible with the original rfc 7049.\n`read the docs <https://cbor2.readthedocs.io/>`_ to learn more.\n\nit is implemented in pure python with an optional c backend.\n\non pypy, cbor2 runs with almost identical performance to the c backend.\n\n.. _rfc 8949: https://www.rfc-editor.org/rfc/rfc8949.html\n\nfeatures\n--------\n\n* simple api like ``json`` or ``pickle`` modules.\n* support many `cbor tags`_ with `stdlib objects`_.\n* generic tag decoding.\n* `shared value`_ references including cyclic references.\n* `string references`_ compact encoding with repeated strings replaced with indices.\n* optional c module backend tested on big- and little-endian architectures.\n* extensible `tagged value handling`_ using ``tag_hook`` and ``object_hook`` on decode and ``default`` on encode.\n* command-line diagnostic tool, converting cbor file or stream to json ``python -m cbor2.tool``\n  (this is a lossy conversion, for diagnostics only)\n* thorough test suite.\n\n.. _cbor tags: https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\n.. _stdlib objects: https://cbor2.readthedocs.io/en/latest/usage.html#tag-support\n.. _shared value: http://cbor.schmorp.de/value-sharing\n.. _string references: http://cbor.schmorp.de/stringref\n.. _tagged value handling: https://cbor2.readthedocs.io/en/latest/customizing.html#using-the-cbor-tags-for-custom-types\n\ninstallation\n============\n\n::\n\n    pip install cbor2\n\nrequirements\n------------\n\n* python >= 3.8 (or `pypy3`_ 3.8+)\n* c-extension: any c compiler that can build python extensions.\n  any modern libc with the exception of glibc<2.9\n\n.. _pypy3: https://www.pypy.org/\n\nbuilding the c-extension\n------------------------\n\nto force building of the optional c-extension, set os env ``cbor2_build_c_extension=1``.\nto disable building of the optional c-extension, set os env ``cbor2_build_c_extension=0``.\nif this environment variable is unset, setup.py will default to auto detecting a compatible c library and\nattempt to compile the extension.\n\n\nusage\n=====\n\n`basic usage <https://cbor2.readthedocs.io/en/latest/usage.html#basic-usage>`_\n\ncommand-line usage\n==================\n\n``python -m cbor2.tool`` converts cbor data in raw binary or base64 encoding into\na representation that allows printing as json. this is a lossy transformation as\neach datatype is converted into something that can be represented as a json value.\n\nusage::\n\n    # pass hexadecimal through xxd.\n    $ echo a16568656c6c6f65776f726c64 | xxd -r -ps | python -m cbor2.tool --pretty\n    {\n        \"hello\": \"world\"\n    }\n    # decode base64 directly\n    $ echo ggec | python -m cbor2.tool --decode\n    [1, 2]\n    # read from a file encoded in base64\n    $ python -m cbor2.tool -d tests/examples.cbor.b64\n    {...}\n\nit can be used in a pipeline with json processing tools like `jq`_ to allow syntax\ncoloring, field extraction and more.\n\ncbor data items concatenated into a sequence can be decoded also::\n\n    $ echo ggecggmeggug | python -m cbor2.tool -d --sequence\n    [1, 2]\n    [3, 4]\n    [5, 6]\n\nmultiple files can also be sent to a single output file::\n\n    $ python -m cbor2.tool -o all_files.json file1.cbor file2.cbor ... filen.cbor\n\n.. _jq: https://stedolan.github.io/jq/\n\nsecurity\n========\n\nthis library has not been tested against malicious input. in theory it should be\nas safe as json, since unlike ``pickle`` the decoder does not execute any code.\n",
  "docs_url": null,
  "keywords": "serialization,cbor",
  "license": "mit",
  "name": "cbor2",
  "package_url": "https://pypi.org/project/cbor2/",
  "project_url": "https://pypi.org/project/cbor2/",
  "project_urls": {
    "Changelog": "https://cbor2.readthedocs.io/en/latest/versionhistory.html",
    "Documentation": "https://cbor2.readthedocs.org/en/latest/",
    "Issue Tracker": "https://github.com/agronholm/cbor2/issues",
    "Source Code": "https://github.com/agronholm/cbor2"
  },
  "release_url": "https://pypi.org/project/cbor2/5.5.1/",
  "requires_dist": [
    "pytest-benchmark ==4.0.0 ; extra == 'benchmarks'",
    "packaging ; extra == 'doc'",
    "Sphinx >=7 ; extra == 'doc'",
    "sphinx-rtd-theme >=1.3.0 ; extra == 'doc'",
    "sphinx-autodoc-typehints >=1.2.0 ; extra == 'doc'",
    "typing-extensions ; (python_version < \"3.12\") and extra == 'doc'",
    "coverage >=7 ; extra == 'test'",
    "pytest ; extra == 'test'",
    "hypothesis ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "cbor (de)serializer with extensive tag support",
  "version": "5.5.1",
  "releases": [],
  "developers": [
    "alex.gronholm@nextday.fi",
    "kio@mothers-arms.co.uk"
  ],
  "kwds": "yml badge status workflows branch",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cbor2",
  "homepage": "",
  "release_count": 31,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_hypothesis",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: database",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": ".. contents:: **simplesqlite**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`simplesqlite <https://github.com/thombashi/simplesqlite>`__ is a python library to simplify sqlite database operations: table creation, data insertion and get data as other data formats. simple orm functionality for sqlite.\n\n.. image:: https://badge.fury.io/py/simplesqlite.svg\n    :target: https://badge.fury.io/py/simplesqlite\n    :alt: pypi package version\n\n.. image:: https://img.shields.io/pypi/pyversions/simplesqlite.svg\n    :target: https://pypi.org/project/simplesqlite\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/simplesqlite.svg\n    :target: https://pypi.org/project/simplesqlite\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/simplesqlite/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/thombashi/simplesqlite/actions/workflows/ci.yml\n    :alt: ci status of linux/macos/windows\n\n.. image:: https://github.com/thombashi/simplesqlite/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/simplesqlite/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\n.. image:: https://coveralls.io/repos/github/thombashi/simplesqlite/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/simplesqlite?branch=master\n    :alt: test coverage\n\nfeatures\n--------\n- automated sqlite table creation from data\n- support various data types of record(s) insertion into a table:\n    - ``dict``\n    - ``namedtuple``\n    - ``list``\n    - ``tuple``\n- create table(s) from:\n    - csv file/text\n    - json file/text\n    - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.html>`__ instance\n    - `tabledata.tabledata <https://tabledata.readthedocs.io/en/latest/pages/reference/data.html>`__ instance loaded by `pytablereader <https://github.com/thombashi/pytablereader>`__\n- get data from a table as:\n    - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/generated/pandas.dataframe.html>`__ instance\n    - `tabledata.tabledata <https://github.com/thombashi/tabledata>`__ instance\n- simple object-relational mapping (orm) functionality\n\nexamples\n==========\ncreate a table\n----------------\ncreate a table from a data matrix\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import simplesqlite\n\n\n        table_name = \"sample_table\"\n        con = simplesqlite(\"sample.sqlite\", \"w\")\n\n        # create table -----\n        data_matrix = [[1, 1.1, \"aaa\", 1, 1], [2, 2.2, \"bbb\", 2.2, 2.2], [3, 3.3, \"ccc\", 3, \"ccc\"]]\n        con.create_table_from_data_matrix(\n            table_name,\n            [\"attr_a\", \"attr_b\", \"attr_c\", \"attr_d\", \"attr_e\"],\n            data_matrix,\n        )\n\n        # display data type for each column in the table -----\n        print(con.schema_extractor.fetch_table_schema(table_name).dumps())\n\n        # display values in the table -----\n        print(\"records:\")\n        result = con.select(select=\"*\", table_name=table_name)\n        for record in result.fetchall():\n            print(record)\n\n:output:\n    .. code-block::\n\n        .. table:: sample_table\n\n            +---------+-------+-----------+--------+------+-----+\n            |attribute| type  |primary key|not null|unique|index|\n            +=========+=======+===========+========+======+=====+\n            |attr_a   |integer|           |        |      |     |\n            +---------+-------+-----------+--------+------+-----+\n            |attr_b   |real   |           |        |      |     |\n            +---------+-------+-----------+--------+------+-----+\n            |attr_c   |text   |           |        |      |     |\n            +---------+-------+-----------+--------+------+-----+\n            |attr_d   |real   |           |        |      |     |\n            +---------+-------+-----------+--------+------+-----+\n            |attr_e   |text   |           |        |      |     |\n            +---------+-------+-----------+--------+------+-----+\n\n\n        records:\n        (1, 1.1, 'aaa', 1.0, '1')\n        (2, 2.2, 'bbb', 2.2, '2.2')\n        (3, 3.3, 'ccc', 3.0, 'ccc')\n\ncreate a table from csv\n~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import simplesqlite\n\n        with open(\"sample_data.csv\", \"w\") as f:\n            f.write(\"\\n\".join([\n                '\"attr_a\",\"attr_b\",\"attr_c\"',\n                '1,4,\"a\"',\n                '2,2.1,\"bb\"',\n                '3,120.9,\"ccc\"',\n            ]))\n\n        # create table ---\n        con = simplesqlite(\"sample.sqlite\", \"w\")\n        con.create_table_from_csv(\"sample_data.csv\")\n\n        # output ---\n        table_name = \"sample_data\"\n        print(con.fetch_attr_names(table_name))\n        result = con.select(select=\"*\", table_name=table_name)\n        for record in result.fetchall():\n            print(record)\n\n:output:\n    .. code-block::\n\n        ['attr_a', 'attr_b', 'attr_c']\n        (1, 4.0, 'a')\n        (2, 2.1, 'bb')\n        (3, 120.9, 'ccc')\n\ncreate a table from pandas.dataframe\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import simplesqlite\n        import pandas\n\n        con = simplesqlite(\"pandas_df.sqlite\")\n\n        con.create_table_from_dataframe(pandas.dataframe(\n            [\n                [0, 0.1, \"a\"],\n                [1, 1.1, \"bb\"],\n                [2, 2.2, \"ccc\"],\n            ],\n            columns=['id', 'value', 'name']\n        ), table_name=\"pandas_df\")\n\n:output:\n    .. code-block:: sql\n\n        $ sqlite3 pandas_df.sqlite\n        sqlite> .schema\n        create table 'pandas_df' (id integer, value real, name text);\n\ninsert records into a table\n-----------------------------\ninsert dictionary\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import simplesqlite\n\n        table_name = \"sample_table\"\n        con = simplesqlite(\"sample.sqlite\", \"w\")\n        con.create_table_from_data_matrix(\n            table_name,\n            [\"attr_a\", \"attr_b\", \"attr_c\", \"attr_d\", \"attr_e\"],\n            [[1, 1.1, \"aaa\", 1,   1]])\n\n        con.insert(\n            table_name,\n            record={\n                \"attr_a\": 4,\n                \"attr_b\": 4.4,\n                \"attr_c\": \"ddd\",\n                \"attr_d\": 4.44,\n                \"attr_e\": \"hoge\",\n            })\n        con.insert_many(\n            table_name,\n            records=[\n                {\n                    \"attr_a\": 5,\n                    \"attr_b\": 5.5,\n                    \"attr_c\": \"eee\",\n                    \"attr_d\": 5.55,\n                    \"attr_e\": \"foo\",\n                },\n                {\n                    \"attr_a\": 6,\n                    \"attr_c\": \"fff\",\n                },\n            ])\n\n        result = con.select(select=\"*\", table_name=table_name)\n        for record in result.fetchall():\n            print(record)\n\n:output:\n    .. code-block::\n\n        (1, 1.1, 'aaa', 1, 1)\n        (4, 4.4, 'ddd', 4.44, 'hoge')\n        (5, 5.5, 'eee', 5.55, 'foo')\n        (6, none, 'fff', none, none)\n\n\ninsert list/tuple/namedtuple\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n:sample code:\n    .. code-block:: python\n\n        from collections import namedtuple\n        from simplesqlite import simplesqlite\n\n        table_name = \"sample_table\"\n        con = simplesqlite(\"sample.sqlite\", \"w\")\n        con.create_table_from_data_matrix(\n            table_name,\n            [\"attr_a\", \"attr_b\", \"attr_c\", \"attr_d\", \"attr_e\"],\n            [[1, 1.1, \"aaa\", 1, 1]],\n        )\n\n        # insert namedtuple\n        sampletuple = namedtuple(\"sampletuple\", \"attr_a attr_b attr_c attr_d attr_e\")\n\n        con.insert(table_name, record=[7, 7.7, \"fff\", 7.77, \"bar\"])\n        con.insert_many(\n            table_name,\n            records=[(8, 8.8, \"ggg\", 8.88, \"foobar\"), sampletuple(9, 9.9, \"ggg\", 9.99, \"hogehoge\")],\n        )\n\n        # print\n        result = con.select(select=\"*\", table_name=table_name)\n        for record in result.fetchall():\n            print(record)\n\n:output:\n    .. code-block::\n\n        (1, 1.1, 'aaa', 1, 1)\n        (7, 7.7, 'fff', 7.77, 'bar')\n        (8, 8.8, 'ggg', 8.88, 'foobar')\n        (9, 9.9, 'ggg', 9.99, 'hogehoge')\n\nfetch data from a table as pandas dataframe\n---------------------------------------------\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import simplesqlite\n\n        con = simplesqlite(\"sample.sqlite\", \"w\", profile=true)\n\n        con.create_table_from_data_matrix(\n            \"sample_table\",\n            [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            [\n                [1, 1.1, \"aaa\", 1,   1],\n                [2, 2.2, \"bbb\", 2.2, 2.2],\n                [3, 3.3, \"ccc\", 3,   \"ccc\"],\n            ])\n\n        print(con.select_as_dataframe(table_name=\"sample_table\"))\n\n:output:\n    .. code-block::\n\n        $ sample/select_as_dataframe.py\n           a    b    c    d    e\n        0  1  1.1  aaa  1.0    1\n        1  2  2.2  bbb  2.2  2.2\n        2  3  3.3  ccc  3.0  ccc\n\norm functionality\n-------------------\n:sample code:\n    .. code-block:: python\n\n        from simplesqlite import connect_memdb\n        from simplesqlite.model import integer, model, real, text\n\n\n        class sample(model):\n            foo_id = integer(primary_key=true)\n            name = text(not_null=true, unique=true)\n            value = real(default=0)\n\n\n        def main() -> none:\n            con = connect_memdb()\n\n            sample.attach(con)\n            sample.create()\n            sample.insert(sample(name=\"abc\", value=0.1))\n            sample.insert(sample(name=\"xyz\", value=1.11))\n            sample.insert(sample(name=\"bar\"))\n\n            print(sample.fetch_schema().dumps())\n            print(\"records:\")\n            for record in sample.select():\n                print(f\"    {record}\")\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        .. table:: sample\n\n            +--------+---------+----------+-----+---------+-------+-------+\n            | field  |  type   | nullable | key | default | index | extra |\n            +========+=========+==========+=====+=========+=======+=======+\n            | foo_id | integer | yes      | pri | null    |   x   |       |\n            +--------+---------+----------+-----+---------+-------+-------+\n            | name   | text    | no       | uni |         |   x   |       |\n            +--------+---------+----------+-----+---------+-------+-------+\n            | value  | real    | yes      |     | 0       |       |       |\n            +--------+---------+----------+-----+---------+-------+-------+\n\n        records:\n            sample (foo_id=1, name=abc, value=0.1)\n            sample (foo_id=2, name=xyz, value=1.11)\n            sample (foo_id=3, name=bar, value=0.0)\n\nfor more information\n----------------------\nmore examples are available at \nhttps://simplesqlite.rtfd.io/en/latest/pages/examples/index.html\n\ninstallation\n============\ninstall from pypi\n------------------------------\n::\n\n    pip install simplesqlite\n\ninstall from ppa (for ubuntu)\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-simplesqlite\n\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/simplesqlite/network/dependencies>`__\n\noptional dependencies\n----------------------------------\n- `loguru <https://github.com/delgan/loguru>`__\n    - used for logging if the package installed\n- `pandas <https://pandas.pydata.org/>`__\n- `pytablereader <https://github.com/thombashi/pytablereader>`__\n\ndocumentation\n===============\nhttps://simplesqlite.rtfd.io/\n\nrelated project\n=================\n- `sqlitebiter <https://github.com/thombashi/sqlitebiter>`__: cli tool to convert csv/excel/html/json/ltsv/markdown/tsv/google-sheets sqlite database by using simplesqlite\n\nsponsors\n====================================\n.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&u=6da7176e51ae2654bcfd22564772ef8a3bb22318&v=4\n   :target: https://github.com/chasbecker\n   :alt: charles becker (chasbecker)\n.. image:: https://avatars.githubusercontent.com/u/46711571?s=48&u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&v=4\n   :target: https://github.com/arturi0\n   :alt: onetime: arturi0\n.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&v=4\n   :target: https://github.com/b4tman\n   :alt: onetime: dmitry belyaev (b4tman)\n\n`become a sponsor <https://github.com/sponsors/thombashi>`__\n\n",
  "docs_url": null,
  "keywords": "sqlite,csv,google sheets,json",
  "license": "mit license",
  "name": "simplesqlite",
  "package_url": "https://pypi.org/project/SimpleSQLite/",
  "project_url": "https://pypi.org/project/SimpleSQLite/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/SimpleSQLite/releases",
    "Documentation": "https://SimpleSQLite.rtfd.io/",
    "Homepage": "https://github.com/thombashi/SimpleSQLite",
    "Source": "https://github.com/thombashi/SimpleSQLite",
    "Tracker": "https://github.com/thombashi/SimpleSQLite/issues"
  },
  "release_url": "https://pypi.org/project/SimpleSQLite/1.5.2/",
  "requires_dist": [
    "DataProperty <2,>=1.0.1",
    "mbstrdecoder <2,>=1.0.0",
    "pathvalidate <4,>=2.5.2",
    "sqliteschema <3,>=1.4.0",
    "tabledata <2,>=1.1.3",
    "typepy <2,>=1.2.0",
    "sphinx-rtd-theme >=1.2.2 ; extra == 'docs'",
    "Sphinx >=2.4 ; extra == 'docs'",
    "loguru <1,>=0.4.1 ; extra == 'logging'",
    "pytablereader >=0.31.3 ; extra == 'test'",
    "pytablewriter >=0.50 ; extra == 'test'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytest-discord >=0.1.6 ; extra == 'test'",
    "pytest-md-report >=0.5 ; extra == 'test'",
    "beautifulsoup4 >=4.10 ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "simplesqlite is a python library to simplify sqlite database operations: table creation, data insertion and get data as other data formats. simple orm functionality for sqlite.",
  "version": "1.5.2",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "simplesqlite sqlite sqlite3 sqlitebiter create_table_from_csv",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_simplesqlite",
  "homepage": "https://github.com/thombashi/simplesqlite",
  "release_count": 135,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_dataproperty",
    "pypi_loguru",
    "pypi_mbstrdecoder",
    "pypi_pathvalidate",
    "pypi_pytablereader",
    "pypi_pytablewriter",
    "pypi_pytest",
    "pypi_pytest_discord",
    "pypi_pytest_md_report",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_sqliteschema",
    "pypi_tabledata",
    "pypi_typepy"
  ]
}
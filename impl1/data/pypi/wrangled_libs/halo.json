{
  "classifiers": [
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/manrajgrover/halo/master/art/halo.png\" height=\"50px\"/>\n  <br>\n  halo\n</h1>\n\n[![build status](https://travis-ci.com/manrajgrover/halo.svg?branch=master)](https://travis-ci.com/manrajgrover/halo) [![build status](https://ci.appveyor.com/api/projects/status/wa6t414gltr403ff?svg=true)](https://ci.appveyor.com/project/manrajgrover/halo) [![coverage status](https://coveralls.io/repos/github/manrajgrover/halo/badge.svg?branch=master)](https://coveralls.io/github/manrajgrover/halo?branch=master)\n [![pypi](https://img.shields.io/pypi/v/halo.svg)](https://github.com/manrajgrover/halo) ![awesome](https://img.shields.io/badge/awesome-yes-green.svg) [![downloads](https://pepy.tech/badge/halo)](https://pepy.tech/project/halo) [![downloads](https://pepy.tech/badge/halo/month)](https://pepy.tech/project/halo/month)\n> beautiful spinners for terminal, ipython and jupyter\n\n![halo](https://raw.github.com/manrajgrover/halo/master/art/doge_spin.svg?sanitize=true)\n\n## install\n\n```shell\n$ pip install halo\n```\n\n## usage\n\n```py\nfrom halo import halo\n\nspinner = halo(text='loading', spinner='dots')\nspinner.start()\n\n# run time consuming work here\n# you can also change properties for spinner as and when you want\n\nspinner.stop()\n```\n\nalternatively, you can use halo with python's `with` statement:\n\n```py\nfrom halo import halo\n\nwith halo(text='loading', spinner='dots'):\n    # run time consuming work here\n```\n\nfinally, you can use halo as a decorator:\n\n```py\nfrom halo import halo\n\n@halo(text='loading', spinner='dots')\ndef long_running_function():\n    # run time consuming work here\n    pass\n\nlong_running_function()\n```\n\n## api\n\n#### `halo([text|text_color|spinner|animation|placement|color|interval|stream|enabled])`\n\n##### `text`\n*type*: `str`\n\ntext shown along with spinner.\n\n##### `text_color`\n*type*: `str`\n*values*: `grey`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, `white`\n\ncolor of the spinner text. defaults to `none`.\n\n##### `spinner`\n*type*: `str|dict`\n\nif string, it should be one of the spinners listed in the given [json](https://github.com/sindresorhus/cli-spinners/blob/dac4fc6571059bb9e9bc204711e9dfe8f72e5c6f/spinners.json) file. if a dict is passed, it should define `interval` and `frames`. something like:\n\n```py\n{\n    'interval': 100,\n    'frames': ['-', '+', '*', '+', '-']\n}\n```\n\ndefaults to `dots` spinner. for windows users, it defaults to `line` spinner.\n\n##### `animation`\n*type*: `str`\n*values*: `bounce`, `marquee`\n\nanimation to apply to the text if it's too large and doesn't fit in the terminal. if no animation is defined, the text will be ellipsed.\n\n##### `placement`\n*type*: `str`\n*values*: `left`, `right`\n\nwhich side of the text the spinner should be displayed. defaults to `left`\n\n##### `color`\n*type*: `str`\n*values*: `grey`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, `white`\n\ncolor of the spinner. defaults to `cyan`.\n\n##### `interval`\n*type*: `float`\n\ninterval between each frame. defaults to spinner interval (recommended).\n\n##### `stream`\n*type*: `file`\n\nstream to write the output. defaults to `sys.stdout`.\n\n##### `enabled`\n*type*: `bool`\n\nenable or disable the spinner. defaults to `true`.\n\n### methods\n\nfollowing are the methods available:\n\n#### `spinner.start([text])`\n\nstarts the spinner. if `text` is passed, it is set as spinner text. returns the instance.\n\n#### `spinner.stop()`\n\nstops and clears the spinner. returns the instance.\n\n#### `spinner.clear()`\n\nclears the spinner. returns the instance.\n\n#### `spinner.render()`\n\nmanually renders a new frame. returns the instance.\n\n#### `spinner.frame()`\n\nreturns next frame to be rendered.\n\n#### `spinner.succeed([text])`\n##### `text`: *type*: `str`\n\nstops the spinner and changes symbol to `\u2714`. if text is provided, it is persisted else current text is persisted. returns the instance.\n\n#### `spinner.fail([text])`\n##### `text`: *type*: `str`\n\nstops the spinner and changes symbol to `\u2716`. if text is provided, it is persisted else current text is persisted. returns the instance.\n\n#### `spinner.warn([text])`\n##### `text`: *type*: `str`\n\nstops the spinner and changes symbol to `\u26a0`. if text is provided, it is persisted else current text is persisted. returns the instance.\n\n#### `spinner.info([text])`\n##### `text`: *type*: `str`\n\nstops the spinner and changes symbol to `\u2139`. if text is provided, it is persisted else current text is persisted. returns the instance.\n\n#### `spinner.stop_and_persist([symbol|text])`\nstops the spinner and changes symbol and text. returns the instance.\n\n##### `symbol`\n*type*: `str`\n\nsymbol to replace the spinner with. defaults to `' '`.\n\n##### `text`\n*type*: `str`\n\ntext to be persisted. defaults to instance text.\n\n![persist spin](https://raw.github.com/manrajgrover/halo/master/art/persist_spin.svg?sanitize=true)\n\n#### `spinner.text`\nchange the text of spinner.\n\n#### `spinner.color`\nchange the color of spinner\n\n#### `spinner.spinner`\nchange the spinner itself.\n\n#### `spinner.enabled`\nenable or disable the spinner.\n\n## how to contribute?\n\nplease see [contributing guidelines](https://github.com/manrajgrover/halo/blob/master/.github/contributing.md) for more information.\n\n## like it?\n\n\ud83c\udf1f this repo to show support. let me know you liked it on [twitter](https://twitter.com/manrajsgrover).\nalso, share the [project](https://twitter.com/intent/tweet?url=https%3a%2f%2fgithub.com%2fmanrajgrover%2fhalo&via=manrajsgrover&text=checkout%20%23halo%20-%20a%20beautiful%20%23terminal%20%23spinners%20library%20for%20%23python&hashtags=github%2c%20pypi).\n\n## related\n\n* [py-spinners](https://github.com/manrajgrover/py-spinners) - spinners in python\n* [py-log-symbols](https://github.com/manrajgrover/py-log-symbols) - log symbols in python\n* [ora](https://github.com/sindresorhus/ora) - elegant terminal spinners in javascript (inspiration behind this project) \n\n## license\n[mit](https://github.com/manrajgrover/halo/blob/master/license) \u00a9 manraj singh\n\n\n",
  "docs_url": null,
  "keywords": "console,loading,indicator,progress,cli,spinner,spinners,terminal,term,busy,wait,idle",
  "license": "mit",
  "name": "halo",
  "package_url": "https://pypi.org/project/halo/",
  "project_url": "https://pypi.org/project/halo/",
  "project_urls": {
    "Homepage": "https://github.com/manrajgrover/halo"
  },
  "release_url": "https://pypi.org/project/halo/0.0.31/",
  "requires_dist": [
    "log-symbols (>=0.0.14)",
    "spinners (>=0.0.24)",
    "termcolor (>=1.1.0)",
    "colorama (>=0.3.9)",
    "six (>=1.12.0)",
    "backports.shutil-get-terminal-size (>=1.0.0) ; python_version < \"3.3\"",
    "IPython (==5.7.0) ; extra == 'ipython'",
    "ipywidgets (==7.1.0) ; extra == 'ipython'"
  ],
  "requires_python": ">=3.4",
  "summary": "beautiful terminal spinners in python",
  "version": "0.0.31",
  "releases": [],
  "developers": [
    "manraj_singh",
    "manrajsinghgrover@gmail.com"
  ],
  "kwds": "halo build status progress cli",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_halo",
  "homepage": "https://github.com/manrajgrover/halo",
  "release_count": 31,
  "dependency_ids": [
    "pypi_backports.shutil_get_terminal_size",
    "pypi_colorama",
    "pypi_ipython",
    "pypi_ipywidgets",
    "pypi_log_symbols",
    "pypi_six",
    "pypi_spinners",
    "pypi_termcolor"
  ]
}
{
  "classifiers": [
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "a lab to do simple and accurate memory experiments on pytorch\npytorch_memlab\n======\n[![build status](https://travis-ci.com/stonesjtu/pytorch_memlab.svg?token=vytdxhbi1pcrzv6dishp&branch=master)](https://travis-ci.com/stonesjtu/pytorch_memlab)\n![pypi](https://img.shields.io/pypi/v/pytorch_memlab.svg)\n[![codeql: python](https://github.com/stonesjtu/pytorch_memlab/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/stonesjtu/pytorch_memlab/actions/workflows/github-code-scanning/codeql)\n![pypi - downloads](https://img.shields.io/pypi/dm/pytorch_memlab.svg)\n\na simple and accurate **cuda** memory management laboratory for pytorch,\nit consists of different parts about the memory:\n\n- features:\n\n  - memory profiler: a `line_profiler` style cuda memory profiler with simple api.\n  - memory reporter: a reporter to inspect tensors occupying the cuda memory.\n  - courtesy: an interesting feature to temporarily move all the cuda tensors into\n    cpu memory for courtesy, and of course the backward transferring.\n  - ipython support through `%mlrun`/`%%mlrun` line/cell magic\n    commands.\n\n\n- table of contents\n  * [installation](#installation)\n  * [user-doc](#user-doc)\n    + [memory profiler](#memory-profiler)\n    + [ipython support](#ipython-support)\n    + [memory reporter](#memory-reporter)\n    + [courtesy](#courtesy)\n    + [ack](#ack)\n  * [changes](#changes)\n\ninstallation\n-----\n\n- released version:\n```bash\npip install pytorch_memlab\n```\n\n- newest version:\n```bash\npip install git+https://github.com/stonesjtu/pytorch_memlab\n```\n\nwhat's for\n-----\n\nout-of-memory errors in pytorch happen frequently, for new-bees and\nexperienced programmers. a common reason is that most people don't really\nlearn the underlying memory management philosophy of pytorch and gpus.\nthey wrote memory in-efficient codes and complained about pytorch eating too\nmuch cuda memory.\n\nin this repo, i'm going to share some useful tools to help debugging oom, or\nto inspect the underlying mechanism if anyone is interested in.\n\n\nuser-doc\n-----\n\n### memory profiler\n\nthe memory profiler is a modification of python's `line_profiler`, it gives\nthe memory usage info for each line of code in the specified function/method.\n\n#### sample:\n\n```python\nimport torch\nfrom pytorch_memlab import lineprofiler\n\ndef inner():\n    torch.nn.linear(100, 100).cuda()\n\ndef outer():\n    linear = torch.nn.linear(100, 100).cuda()\n    linear2 = torch.nn.linear(100, 100).cuda()\n    linear3 = torch.nn.linear(100, 100).cuda()\n\nwork()\n```\n\nafter the script finishes or interrupted by keyboard, it gives the following\nprofiling info if you're in a jupyter notebook:\n\n<p align=\"center\"><img src=\"readme-output.png\" width=\"640\"></p>\n\nor the following info if you're in a text-only terminal:\n\n```\n## outer\n\nactive_bytes reserved_bytes line  code\n         all            all\n        peak           peak\n       0.00b          0.00b    7  def outer():\n      40.00k          2.00m    8      linear = torch.nn.linear(100, 100).cuda()\n      80.00k          2.00m    9      linear2 = torch.nn.linear(100, 100).cuda()\n     120.00k          2.00m   10      inner()\n\n\n## inner\n\nactive_bytes reserved_bytes line  code\n         all            all\n        peak           peak\n      80.00k          2.00m    4  def inner():\n     120.00k          2.00m    5      torch.nn.linear(100, 100).cuda()\n```\n\nan explanation of what each column means can be found in the [torch documentation](https://pytorch.org/docs/stable/cuda.html#torch.cuda.memory_stats). the name of any field from `memory_stats()`\ncan be passed to `display()` to view the corresponding statistic.\n\nif you use `profile` decorator, the memory statistics are collected during\nmultiple runs and only the maximum one is displayed at the end.\nwe also provide a more flexible api called `profile_every` which prints the\nmemory info every *n* times of function execution. you can simply replace\n`@profile` with `@profile_every(1)` to print the memory usage for each\nexecution.\n\nthe `@profile` and `@profile_every` can also be mixed to gain more control\nof the debugging granularity.\n\n- you can also add the decorator in the module class:\n\n```python\nclass net(torch.nn.module):\n    def __init__(self):\n        super().__init__()\n    @profile\n    def forward(self, inp):\n        #do_something\n```\n\n- the *line profiler* profiles the memory usage of cuda device 0 by default,\nyou may want to switch the device to profile by `set_target_gpu`. the gpu\nselection is globally,  which means you have to remember which gpu you are\nprofiling on during the whole process:\n\n```python\nimport torch\nfrom pytorch_memlab import profile, set_target_gpu\n@profile\ndef func():\n    net1 = torch.nn.linear(1024, 1024).cuda(0)\n    set_target_gpu(1)\n    net2 = torch.nn.linear(1024, 1024).cuda(1)\n    set_target_gpu(0)\n    net3 = torch.nn.linear(1024, 1024).cuda(0)\n\nfunc()\n```\n\n\nmore samples can be found in `test/test_line_profiler.py`\n\n### ipython support\n\nmake sure you have `ipython` installed, or have installed `pytorch-memlab` with\n`pip install pytorch-memlab[ipython]`.\n\nfirst, load the extension:\n\n```python\n%load_ext pytorch_memlab\n```\n\nthis makes the `%mlrun` and `%%mlrun` line/cell magics available for use. for\nexample, in a new cell run the following to profile an entire cell\n\n```python\n%%mlrun -f func\nimport torch\nfrom pytorch_memlab import profile, set_target_gpu\ndef func():\n    net1 = torch.nn.linear(1024, 1024).cuda(0)\n    set_target_gpu(1)\n    net2 = torch.nn.linear(1024, 1024).cuda(1)\n    set_target_gpu(0)\n    net3 = torch.nn.linear(1024, 1024).cuda(0)\n```\n\nor you can invoke the profiler for a single statement on via the `%mlrun` cell\nmagic.\n\n```python\nimport torch\nfrom pytorch_memlab import profile, set_target_gpu\ndef func(input_size):\n    net1 = torch.nn.linear(input_size, 1024).cuda(0)\n%mlrun -f func func(2048)\n```\n\nsee `%mlrun?` for help on what arguments are supported. you can set the gpu\ndevice to profile, dump profiling results to a file, and return the\n`lineprofiler` object for post-profile inspection.\n\nfind out more by checking out the [demo jupyter notebook](./demo.ipynb)\n\n\n### memory reporter\n\nas *memory profiler* only gives the overall memory usage information by lines,\na more low-level memory usage information can be obtained by *memory reporter*.\n\n*memory reporter* iterates all the `tensor` objects and gets the underlying\n`storage` object to get the actual memory usage instead of the surface\n`tensor.size`.\n\n#### sample\n\n- a minimal one:\n\n```python\nimport torch\nfrom pytorch_memlab import memreporter\nlinear = torch.nn.linear(1024, 1024).cuda()\nreporter = memreporter()\nreporter.report()\n```\noutputs:\n```\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nparameter0                                      (1024, 1024)     4.00m\nparameter1                                           (1024,)     4.00k\n-------------------------------------------------------------------------------\ntotal tensors: 1049600  used memory: 4.00m\nthe allocated memory on cuda:0: 4.00m\n-------------------------------------------------------------------------------\n```\n\n- you can also pass in a model object for automatically name inference.\n\n```python\nimport torch\nfrom pytorch_memlab import memreporter\n\nlinear = torch.nn.linear(1024, 1024).cuda()\ninp = torch.tensor(512, 1024).cuda()\n# pass in a model to automatically infer the tensor names\nreporter = memreporter(linear)\nout = linear(inp).mean()\nprint('========= before backward =========')\nreporter.report()\nout.backward()\nprint('========= after backward =========')\nreporter.report()\n```\n\noutputs:\n```\n========= before backward =========\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nweight                                          (1024, 1024)     4.00m\nbias                                                 (1024,)     4.00k\ntensor0                                          (512, 1024)     2.00m\ntensor1                                                 (1,)   512.00b\n-------------------------------------------------------------------------------\ntotal tensors: 1573889  used memory: 6.00m\nthe allocated memory on cuda:0: 6.00m\n-------------------------------------------------------------------------------\n========= after backward =========\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nweight                                          (1024, 1024)     4.00m\nweight.grad                                     (1024, 1024)     4.00m\nbias                                                 (1024,)     4.00k\nbias.grad                                            (1024,)     4.00k\ntensor0                                          (512, 1024)     2.00m\ntensor1                                                 (1,)   512.00b\n-------------------------------------------------------------------------------\ntotal tensors: 2623489  used memory: 10.01m\nthe allocated memory on cuda:0: 10.01m\n-------------------------------------------------------------------------------\n```\n\n\n- the reporter automatically deals with the sharing weights parameters:\n\n```python\nimport torch\nfrom pytorch_memlab import memreporter\n\nlinear = torch.nn.linear(1024, 1024).cuda()\nlinear2 = torch.nn.linear(1024, 1024).cuda()\nlinear2.weight = linear.weight\ncontainer = torch.nn.sequential(\n    linear, linear2\n)\ninp = torch.tensor(512, 1024).cuda()\n# pass in a model to automatically infer the tensor names\n\nout = container(inp).mean()\nout.backward()\n\n# verbose shows how storage is shared across multiple tensors\nreporter = memreporter(container)\nreporter.report(verbose=true)\n```\n\noutputs:\n```\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\n0.weight                                        (1024, 1024)     4.00m\n0.weight.grad                                   (1024, 1024)     4.00m\n0.bias                                               (1024,)     4.00k\n0.bias.grad                                          (1024,)     4.00k\n1.bias                                               (1024,)     4.00k\n1.bias.grad                                          (1024,)     4.00k\ntensor0                                          (512, 1024)     2.00m\ntensor1                                                 (1,)   512.00b\n-------------------------------------------------------------------------------\ntotal tensors: 2625537  used memory: 10.02m\nthe allocated memory on cuda:0: 10.02m\n-------------------------------------------------------------------------------\n```\n\n- you can better understand the memory layout for more complicated module:\n\n```python\nimport torch\nfrom pytorch_memlab import memreporter\n\nlstm = torch.nn.lstm(1024, 1024).cuda()\nreporter = memreporter(lstm)\nreporter.report(verbose=true)\ninp = torch.tensor(10, 10, 1024).cuda()\nout, _ = lstm(inp)\nout.mean().backward()\nreporter.report(verbose=true)\n```\n\nas shown below, the `(->)` indicates the re-use of the same storage back-end\noutputs:\n```\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nweight_ih_l0                                    (4096, 1024)    32.03m\nweight_hh_l0(->weight_ih_l0)                    (4096, 1024)     0.00b\nbias_ih_l0(->weight_ih_l0)                           (4096,)     0.00b\nbias_hh_l0(->weight_ih_l0)                           (4096,)     0.00b\ntensor0                                       (10, 10, 1024)   400.00k\n-------------------------------------------------------------------------------\ntotal tensors: 8499200  used memory: 32.42m\nthe allocated memory on cuda:0: 32.52m\nmemory differs due to the matrix alignment\n-------------------------------------------------------------------------------\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nweight_ih_l0                                    (4096, 1024)    32.03m\nweight_ih_l0.grad                               (4096, 1024)    32.03m\nweight_hh_l0(->weight_ih_l0)                    (4096, 1024)     0.00b\nweight_hh_l0.grad(->weight_ih_l0.grad)          (4096, 1024)     0.00b\nbias_ih_l0(->weight_ih_l0)                           (4096,)     0.00b\nbias_ih_l0.grad(->weight_ih_l0.grad)                 (4096,)     0.00b\nbias_hh_l0(->weight_ih_l0)                           (4096,)     0.00b\nbias_hh_l0.grad(->weight_ih_l0.grad)                 (4096,)     0.00b\ntensor0                                       (10, 10, 1024)   400.00k\ntensor1                                       (10, 10, 1024)   400.00k\ntensor2                                        (1, 10, 1024)    40.00k\ntensor3                                        (1, 10, 1024)    40.00k\n-------------------------------------------------------------------------------\ntotal tensors: 17018880         used memory: 64.92m\nthe allocated memory on cuda:0: 65.11m\nmemory differs due to the matrix alignment\n-------------------------------------------------------------------------------\n```\n\nnotice:\n> when forwarding with `grad_mode=true`, pytorch maintains tensor buffers for\n> future back-propagation, in c level. so these buffers are not going to be\n> managed or collected by pytorch. but if you store these intermediate results\n> as python variables, then they will be reported.\n\n- you can also filter the device to report on by passing extra arguments:\n`report(device=torch.device(0))`\n\n- a failed example due to pytorch's c side tensor buffers\n\nin the following example, a temp buffer is created at `inp * (inp + 2)` to\nstore both `inp` and `inp + 2`, unfortunately python only knows the existence\nof inp, so we have *2m* memory lost, which is the same size of tensor `inp`.\n\n```python\nimport torch\nfrom pytorch_memlab import memreporter\n\nlinear = torch.nn.linear(1024, 1024).cuda()\ninp = torch.tensor(512, 1024).cuda()\n# pass in a model to automatically infer the tensor names\nreporter = memreporter(linear)\nout = linear(inp * (inp + 2)).mean()\nreporter.report()\n```\n\noutputs:\n```\nelement type                                            size  used mem\n-------------------------------------------------------------------------------\nstorage on cuda:0\nweight                                          (1024, 1024)     4.00m\nbias                                                 (1024,)     4.00k\ntensor0                                          (512, 1024)     2.00m\ntensor1                                                 (1,)   512.00b\n-------------------------------------------------------------------------------\ntotal tensors: 1573889  used memory: 6.00m\nthe allocated memory on cuda:0: 8.00m\nmemory differs due to the matrix alignment or invisible gradient buffer tensors\n-------------------------------------------------------------------------------\n```\n\n\n### courtesy\n\nsometimes people would like to preempt your running task, but you don't want\nto save checkpoint and then load, actually all they need is gpu resources (\ntypically cpu resources and cpu memory is always spare in gpu clusters), so\nyou can move all your workspaces from gpu to cpu and then halt your task until\na restart signal is triggered, instead of saving&loading checkpoints and\nbootstrapping from scratch.\n\nstill developing..... but you can have fun with:\n```python\nfrom pytorch_memlab import courtesy\n\niamcourtesy = courtesy()\nfor i in range(num_iteration):\n    if something_happens:\n        iamcourtesy.yield_memory()\n        wait_for_restart_signal()\n        iamcourtesy.restore()\n```\n\n#### known issues\n\n- as is stated above in `memory_reporter`, intermediate tensors are not covered\nproperly, so you may want to insert such courtesy logics after `backward` or\nbefore `forward`.\n- currently the cuda context of pytorch requires about 1 gb cuda memory, which\nmeans even all tensors are on cpu, 1gb of cuda memory is wasted, :-(. however\nit's still under investigation if i can fully destroy the context and then\nre-init.\n\n\n### ack\n\ni suffered a lot debugging weird memory usage during my 3-years of developing\nefficient deep learning models, and of course learned a lot from the great\nopen source community.\n\n## changes\n\n\n##### 0.2.4 (2021-10-28)\n  - fix colab error (#35)\n  - support python3.8 (#38)\n  - support sparse tensor (#30)\n##### 0.2.3 (2020-12-01)\n  - fix name mapping in `memreporter` (#24)\n  - fix reporter without model input (#22 #25)\n##### 0.2.2 (2020-10-23)\n  - fix memory leak in `memreporter`\n##### 0.2.1 (2020-06-18)\n  - fix `line_profiler` not found\n##### 0.2.0 (2020-06-15)\n  - add jupyter notebook figure and ipython support\n##### 0.1.0 (2020-04-17)\n  - add ipython magic support (#8)\n##### 0.0.4 (2019-10-08)\n  - add gpu switch for line-profiler(#2)\n  - add device filter for reporter\n##### 0.0.3 (2019-06-15)\n  - install dependency for pip installation\n##### 0.0.2 (2019-06-04)\n  - fix statistics shift in loop\n##### 0.0.1 (2019-05-28)\n  - initial release\n\n\n",
  "docs_url": null,
  "keywords": "pytorch memory profile",
  "license": "mit",
  "name": "pytorch-memlab",
  "package_url": "https://pypi.org/project/pytorch-memlab/",
  "project_url": "https://pypi.org/project/pytorch-memlab/",
  "project_urls": {
    "Homepage": "https://github.com/Stonesjtu/pytorch_memlab"
  },
  "release_url": "https://pypi.org/project/pytorch-memlab/0.3.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a lab to do simple and accurate memory experiments on pytorch",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "kaiyu_shi",
    "skyisno.1@gmail.com"
  ],
  "kwds": "pytorch_memlab pytorch memory_reporter memory_stats yield_memory",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytorch_memlab",
  "homepage": "https://github.com/stonesjtu/pytorch_memlab",
  "release_count": 11,
  "dependency_ids": [],
  "documentation_summary": "PyTorch-Memlab is a Python package available on PyPI, designed for conducting simple and accurate memory experiments on PyTorch. It offers features like a CUDA memory profiler with a simple API, a memory reporter for inspecting tensors occupying CUDA memory, and support for temporarily moving CUDA tensors into CPU memory. The package also includes IPython support for easier integration into Jupyter notebooks. The latest version, 0.3.0, was released on July 29, 2023. It aims to help users understand and debug out-of-memory (OOM) errors in PyTorch by providing tools to inspect the underlying memory management mechanisms. PyTorch-Memlab is licensed under MIT, with Kaiyu Shi as the author.",
  "embedding": [
    -0.015742382034659386,
    -0.0018306751735508442,
    0.01400430966168642,
    -0.05171479284763336,
    -0.017836617305874825,
    0.03165572136640549,
    0.015087042935192585,
    -0.01730949804186821,
    -0.019275514408946037,
    -0.01703881472349167,
    0.009160499088466167,
    0.016013065353035927,
    -0.022139061242341995,
    -0.013455819338560104,
    0.003264229279011488,
    -0.022537963464856148,
    0.019489211961627007,
    -0.009502415545284748,
    -0.0028172454331070185,
    -0.0046407971531152725,
    0.024831648916006088,
    0.008213107474148273,
    -0.032852429896593094,
    0.010592272505164146,
    -0.002186837838962674,
    0.009124883450567722,
    0.012800480239093304,
    -0.024646444246172905,
    0.008676118217408657,
    0.023620696738362312,
    0.02114180661737919,
    -0.007657493464648724,
    -0.028749436140060425,
    -0.011062406934797764,
    -0.02010181173682213,
    -0.0010177342919632792,
    0.03265297785401344,
    0.000311864772811532,
    0.042369090020656586,
    -0.003255325136706233,
    0.02689739130437374,
    0.02732478640973568,
    -0.002751355292275548,
    0.007450919598340988,
    -0.0025323154404759407,
    0.005285451654344797,
    0.014730880968272686,
    -0.025615205988287926,
    -0.01779387891292572,
    0.0038429934065788984,
    0.01779387891292572,
    0.006724347826093435,
    -0.001780812512151897,
    0.003424502443522215,
    0.004594495985656977,
    -0.00938844308257103,
    -0.014175266958773136,
    0.03823760524392128,
    -0.0264272578060627,
    -0.032709963619709015,
    -0.004736961331218481,
    -0.00043273743358440697,
    -0.036670491099357605,
    0.006382431834936142,
    0.01626950316131115,
    -0.01703881472349167,
    -0.004769015591591597,
    0.022139061242341995,
    0.023179056122899055,
    -0.006175857502967119,
    0.022765906527638435,
    0.025216305628418922,
    0.005078877322375774,
    -0.027923138812184334,
    0.043195389211177826,
    -0.05014767870306969,
    -0.02453247271478176,
    0.007522151805460453,
    0.019147295504808426,
    0.004220525734126568,
    0.012693631462752819,
    -0.012900205329060555,
    -0.02121303789317608,
    0.038693495094776154,
    0.005616682581603527,
    0.03641405329108238,
    0.005641614086925983,
    -0.01046405453234911,
    -0.035701729357242584,
    -0.007208728697150946,
    0.03761075809597969,
    0.026726434007287025,
    0.011404323391616344,
    -3.041293894057162e-05,
    0.021398242563009262,
    0.023122068494558334,
    -0.016112791374325752,
    0.016939088702201843,
    -0.02092810906469822,
    -0.017437715083360672,
    -0.01655443198978901,
    0.014061295427381992,
    -0.02155495434999466,
    -0.011026791296899319,
    -0.021398242563009262,
    -0.014267869293689728,
    0.006321884226053953,
    -0.001389924087561667,
    0.021113311871886253,
    0.029775185510516167,
    -0.03610062971711159,
    0.053139444440603256,
    -0.002893820172175765,
    -0.03615761548280716,
    -0.01439608819782734,
    0.0067670876160264015,
    0.01800757646560669,
    -0.0469849556684494,
    -0.014388964511454105,
    -0.007486535701900721,
    0.0031751885544508696,
    0.00837694201618433,
    0.016426214948296547,
    0.004694221541285515,
    0.015671148896217346,
    -0.007757219020277262,
    -0.0014112938661128283,
    0.002274097641929984,
    0.008148998022079468,
    -0.007650370243936777,
    -0.005524080246686935,
    0.009416935965418816,
    -0.00023395424068439752,
    0.009794468991458416,
    -0.02612808160483837,
    -0.007629000581800938,
    0.01883387193083763,
    -0.02913409285247326,
    -0.016910595819354057,
    -0.012508426792919636,
    0.008120505139231682,
    0.036812957376241684,
    -0.01619827002286911,
    0.005556134972721338,
    -0.04735536500811577,
    0.05080301687121391,
    0.01008652150630951,
    0.009979672729969025,
    -0.008832830004394054,
    -0.004747645929455757,
    0.002876012120395899,
    -0.030743947252631187,
    -0.015899093821644783,
    0.009993920102715492,
    -0.0028403960168361664,
    0.013740749098360538,
    -0.013327600434422493,
    0.0073868101462721825,
    -0.044449079781770706,
    0.005766270682215691,
    0.003584775608032942,
    0.04088745638728142,
    -0.015272247605025768,
    0.005057507660239935,
    -0.009153376333415508,
    0.04493346065282822,
    0.03578720614314079,
    -0.006104625295847654,
    -0.01522950828075409,
    -0.024803156033158302,
    0.03108586184680462,
    0.032026130706071854,
    -0.03900691494345665,
    0.006945168599486351,
    0.006816950161010027,
    0.005246273707598448,
    0.002329302718862891,
    0.02336425893008709,
    -0.01800757646560669,
    0.008868446573615074,
    -0.000116198010800872,
    0.011561034247279167,
    0.0053495606407523155,
    0.02320754900574684,
    -0.005235588643699884,
    0.002876012120395899,
    -0.008604886010289192,
    -0.013548421673476696,
    0.0033942286390811205,
    0.005374492146074772,
    0.01251555047929287,
    0.028678204864263535,
    -0.022509470582008362,
    -0.011667883023619652,
    -0.5539039373397827,
    -0.010884325951337814,
    -0.02295111119747162,
    -0.006026269402354956,
    -0.013690886087715626,
    0.0005800996441394091,
    -0.0011958156246691942,
    -0.004911480937153101,
    -0.03199763968586922,
    0.028549985960125923,
    -0.04518989846110344,
    0.032994892448186874,
    0.0014611566439270973,
    -0.028678204864263535,
    -0.011233365163207054,
    -0.007133934646844864,
    -0.016369229182600975,
    -0.017637167125940323,
    -0.02357795648276806,
    -0.011340213939547539,
    -0.021982349455356598,
    0.022922618314623833,
    -0.0007185578579083085,
    0.005695038475096226,
    -0.025216305628418922,
    0.017637167125940323,
    0.0173807293176651,
    -0.002851080847904086,
    0.03211161121726036,
    0.018605928868055344,
    -0.006571197882294655,
    0.015215261839330196,
    0.00012521338067017496,
    -0.003615049412474036,
    0.054250672459602356,
    -0.01919003576040268,
    -0.020002085715532303,
    0.0632544606924057,
    0.012073908932507038,
    0.04407867044210434,
    -0.01924702152609825,
    -0.033194344490766525,
    -0.009359950199723244,
    0.017822371795773506,
    0.010471177287399769,
    -0.006179419346153736,
    0.004110115114599466,
    0.02648424357175827,
    0.004202717449516058,
    -0.0017594427336007357,
    -0.007230098824948072,
    0.011874457821249962,
    -0.011197748593986034,
    0.0036720354110002518,
    0.016782376915216446,
    0.010976928286254406,
    0.02295111119747162,
    -0.01317801233381033,
    0.008540776558220387,
    0.005869558081030846,
    0.0004229429760016501,
    0.028307795524597168,
    0.01933250017464161,
    -0.015272247605025768,
    -0.03413461521267891,
    0.005969283636659384,
    -0.03630008175969124,
    -0.023264534771442413,
    0.00264094490557909,
    -0.01436047162860632,
    0.014673895202577114,
    -0.008441051468253136,
    -0.007262153085321188,
    -0.008134751580655575,
    0.0277379360049963,
    0.05048959702253342,
    0.0216261874884367,
    0.012373085133731365,
    -0.003853678237646818,
    0.04359428957104683,
    0.025757672265172005,
    0.008775844238698483,
    -0.0068062650971114635,
    -0.033336810767650604,
    0.02461795136332512,
    0.008882693015038967,
    0.019232774153351784,
    0.009765975177288055,
    -0.003718336345627904,
    -0.009053650312125683,
    0.006873936392366886,
    0.026726434007287025,
    -0.01863442175090313,
    -0.05017617344856262,
    0.010506793856620789,
    0.023948365822434425,
    -0.01813579350709915,
    0.020871121436357498,
    -0.011924320831894875,
    -0.018107300624251366,
    -0.01379773486405611,
    -0.020130304619669914,
    0.0017843741225078702,
    0.009167622774839401,
    -0.008092012256383896,
    0.014310609549283981,
    -0.03564474359154701,
    0.016041558235883713,
    0.014645401388406754,
    -0.012401578016579151,
    -0.010485423728823662,
    -0.020942354574799538,
    0.01181747205555439,
    -0.027125336229801178,
    0.03003162145614624,
    -0.03877897188067436,
    0.024162063375115395,
    0.03772473335266113,
    -0.008262969553470612,
    -0.013370339758694172,
    -0.005705723073333502,
    -0.04011814296245575,
    0.027068350464105606,
    0.01780812442302704,
    0.015457452274858952,
    0.0022188923321664333,
    0.02802286483347416,
    -0.0092459786683321,
    -0.01431773230433464,
    0.0168251171708107,
    -0.004562441725283861,
    -0.0037290214095264673,
    0.014759373851120472,
    -0.03060148097574711,
    0.02580041065812111,
    0.024347268044948578,
    0.012636645697057247,
    -0.011703499592840672,
    0.010670628398656845,
    -0.003497515805065632,
    0.009302964434027672,
    0.022423990070819855,
    0.005053945817053318,
    -0.02383439429104328,
    -0.033336810767650604,
    -0.009473922662436962,
    -0.012992807663977146,
    0.008433927781879902,
    0.009637757204473019,
    -0.012900205329060555,
    -0.022224539890885353,
    0.012323222123086452,
    -0.01056377962231636,
    0.016981827095150948,
    0.008284339681267738,
    -0.0074010565876960754,
    -0.010421314276754856,
    -0.0133133539929986,
    -0.03373571112751961,
    -0.0168251171708107,
    -0.0020443727262318134,
    0.018862366676330566,
    -0.00837694201618433,
    0.01577087491750717,
    -0.02161194011569023,
    -0.02703985758125782,
    -0.023050837218761444,
    0.016255255788564682,
    -0.015030057169497013,
    -0.038750480860471725,
    -0.00889693945646286,
    -0.00547777907922864,
    -0.014773620292544365,
    0.02788040041923523,
    -0.0022331387735903263,
    0.002074646530672908,
    0.0015982792247086763,
    0.0023364259395748377,
    -0.024774663150310516,
    -0.014944578520953655,
    -7.306896441150457e-05,
    0.034163106232881546,
    -0.012415824458003044,
    -0.018962090834975243,
    0.03441954404115677,
    0.027139581739902496,
    0.028663957491517067,
    0.019004831090569496,
    0.01073473785072565,
    0.029775185510516167,
    -0.010435560718178749,
    0.019090309739112854,
    -0.0314277783036232,
    0.008953925222158432,
    -0.009203239344060421,
    0.017124293372035027,
    0.011724869720637798,
    -0.03379269689321518,
    0.0020176605321466923,
    0.04593071714043617,
    0.018748393282294273,
    0.012102401815354824,
    -0.002646287437528372,
    -0.01634073443710804,
    -0.0038251851219683886,
    -0.029575733467936516,
    0.006702978163957596,
    -0.021569199860095978,
    0.004818878602236509,
    -0.011347336694598198,
    0.0028190261218696833,
    -0.025130825117230415,
    -0.03370722010731697,
    -0.025344522669911385,
    -0.006236405111849308,
    0.04151429980993271,
    -0.017608674243092537,
    0.03017408587038517,
    -0.030430523678660393,
    -0.020871121436357498,
    0.014096911996603012,
    0.02997463569045067,
    4.8944519221549854e-05,
    0.005182164255529642,
    0.023663436993956566,
    0.004712029825896025,
    0.01431773230433464,
    0.01299993135035038,
    0.007799958810210228,
    -0.02404809184372425,
    0.006560513284057379,
    0.010727614164352417,
    0.017437715083360672,
    -0.015813615173101425,
    0.024147817865014076,
    0.0017647851491346955,
    0.02453247271478176,
    -0.017152786254882812,
    0.02030126191675663,
    -0.004466277547180653,
    -0.007012839429080486,
    0.008455297909677029,
    0.008013656362891197,
    -0.019204281270503998,
    -0.005050383973866701,
    0.03231106325984001,
    0.02295111119747162,
    0.014025678858160973,
    -0.004658605437725782,
    -0.0010239671682938933,
    -0.037354324012994766,
    0.030829425901174545,
    -0.03108586184680462,
    0.012031168676912785,
    -0.004701344761997461,
    -0.01379773486405611,
    -0.003136010840535164,
    0.0184919573366642,
    0.012935821898281574,
    -0.010314465500414371,
    0.030345045030117035,
    -0.0039213490672409534,
    0.020757149904966354,
    -0.016853610053658485,
    0.027780674397945404,
    -0.01911880262196064,
    0.014289239421486855,
    -0.0369839146733284,
    0.01174623891711235,
    -0.031114354729652405,
    -0.025472741574048996,
    -0.0008165025501511991,
    -0.016910595819354057,
    -0.029433269053697586,
    0.0168251171708107,
    -0.012544043362140656,
    0.022438237443566322,
    0.0325390063226223,
    0.022010842338204384,
    0.012551166117191315,
    -0.04191320389509201,
    -0.04373675584793091,
    0.02343549206852913,
    0.007614754140377045,
    0.001428211573511362,
    -0.013754995539784431,
    -0.051059454679489136,
    -0.006496403831988573,
    -0.011411446146667004,
    -0.008768720552325249,
    0.019702909514307976,
    -0.011482679285109043,
    -0.011511172167956829,
    0.0011788979172706604,
    -0.012337468564510345,
    -0.0016517036128789186,
    0.038551028817892075,
    -0.015428959392011166,
    -0.008156120777130127,
    0.007835574448108673,
    0.014467320404946804,
    0.01822127401828766,
    -0.018021821975708008,
    0.004402168560773134,
    0.03108586184680462,
    0.0075292750261723995,
    0.011504048481583595,
    -0.01940373331308365,
    -0.020685918629169464,
    -0.008398311212658882,
    -0.004142169840633869,
    -0.016924841329455376,
    -0.011753362603485584,
    -0.01518676895648241,
    0.031057368963956833,
    0.00024909115745685995,
    0.005160794593393803,
    0.019702909514307976,
    0.013420202769339085,
    0.03151325881481171,
    -0.005313944537192583,
    -0.016440460458397865,
    -0.015628410503268242,
    0.0042561418376863,
    0.036812957376241684,
    0.026099586859345436,
    0.015001564286649227,
    8.93745236680843e-05,
    -0.042369090020656586,
    -0.005310382694005966,
    -0.016910595819354057,
    0.009723235853016376,
    0.033821191638708115,
    0.006428733002394438,
    -0.021156052127480507,
    0.012088155373930931,
    0.013548421673476696,
    0.003488611662760377,
    0.005645175464451313,
    0.010841586627066135,
    -0.0016187585424631834,
    0.00955227855592966,
    0.021113311871886253,
    0.012722124345600605,
    -0.00477970065549016,
    -0.007379686925560236,
    0.027424512431025505,
    -0.010407067835330963,
    0.01564265601336956,
    0.0049043577164411545,
    0.01383335143327713,
    0.010456930845975876,
    0.0072265369817614555,
    -0.01661141961812973,
    -0.0004222751595079899,
    0.007728726137429476,
    0.0015368411550298333,
    0.007465166039764881,
    -0.025273291394114494,
    0.03783870488405228,
    0.02440425381064415,
    0.012365961447358131,
    0.011931443586945534,
    0.009922686964273453,
    0.017081553116440773,
    0.03578720614314079,
    -0.007365440484136343,
    0.0036862818524241447,
    -0.005232027266174555,
    -0.008270093239843845,
    -0.010934188961982727,
    0.026242053136229515,
    -0.0053353141993284225,
    0.013562668114900589,
    0.025672193616628647,
    -0.01725251041352749,
    -0.0584106482565403,
    -0.0184919573366642,
    0.0006548938108608127,
    0.006439418066293001,
    0.022423990070819855,
    -0.013854720629751682,
    0.016810869798064232,
    -0.006606814451515675,
    0.0020336878951638937,
    -0.025914384052157402,
    0.020543452352285385,
    0.006282706279307604,
    -0.003974773455411196,
    0.0023684806656092405,
    -0.007757219020277262,
    0.018434971570968628,
    -0.008711734786629677,
    -0.003264229279011488,
    -0.013562668114900589,
    -0.022367004305124283,
    -0.020386740565299988,
    0.012522673234343529,
    0.01109089981764555,
    0.014502936974167824,
    -0.005994214676320553,
    -0.006574759725481272,
    0.011739116162061691,
    0.012109524570405483,
    0.0059158592484891415,
    -0.013007054105401039,
    -0.013940200209617615,
    -0.04046006128191948,
    -0.001387252938002348,
    -0.012572536244988441,
    0.01463115494698286,
    -0.02010181173682213,
    -0.00838406477123499,
    0.019560445100069046,
    0.011553911492228508,
    -0.014730880968272686,
    -0.002975737676024437,
    0.00043296001967974007,
    -0.0010168439475819468,
    -0.010278849862515926,
    -0.0018467025365680456,
    0.003604364348575473,
    -0.00799228623509407,
    0.007443796377629042,
    0.018791133537888527,
    -0.0421411469578743,
    -0.026042601093649864,
    0.0015083481557667255,
    -0.024090832099318504,
    -0.0003327893209643662,
    -0.0160700511187315,
    0.015115536749362946,
    -0.011012543924152851,
    0.003638199996203184,
    0.02703985758125782,
    -0.015956079587340355,
    -0.00789256114512682,
    0.003374639665707946,
    0.007999409921467304,
    -0.012216373346745968,
    -0.011967060156166553,
    0.02997463569045067,
    0.00035549470339901745,
    -0.01109089981764555,
    -0.007052017375826836,
    -0.02461795136332512,
    0.024105077609419823,
    0.019774142652750015,
    0.017010319977998734,
    0.034875430166721344,
    -0.014018556103110313,
    -0.027566976845264435,
    -0.02413357049226761,
    0.02320754900574684,
    0.022894125431776047,
    0.029376283288002014,
    0.002737108850851655,
    -0.02216755412518978,
    -0.014324855990707874,
    -0.025273291394114494,
    -0.005449286196380854,
    0.01675388403236866,
    0.023236041888594627,
    0.003185873618349433,
    -0.03573022037744522,
    -0.001894784509204328,
    -0.010699121281504631,
    -0.0026979309041053057,
    0.01554293092340231,
    -0.035359811037778854,
    -0.0015395124210044742,
    0.015941834077239037,
    -0.0023221794981509447,
    0.010321589186787605,
    -0.0004768125363625586,
    0.01876264065504074,
    -0.05322492495179176,
    -0.02085687592625618,
    -0.007906807586550713,
    0.0019375239498913288,
    -0.02557246759533882,
    -0.0062043508514761925,
    0.04350880905985832,
    0.021526461467146873,
    0.024204803630709648,
    0.006834758445620537,
    0.024019598960876465,
    0.011098023504018784,
    0.002165467943996191,
    0.011333090253174305,
    -0.026669448241591454,
    0.0018556065624579787,
    -0.01725251041352749,
    -0.026868898421525955,
    0.0026587529573589563,
    0.009687620215117931,
    0.00806351937353611,
    -0.027168074622750282,
    -0.007814205251634121,
    0.021939609199762344,
    0.001075610751286149,
    0.008134751580655575,
    -0.0034725842997431755,
    -0.020700164139270782,
    -0.013754995539784431,
    0.010784599930047989,
    -0.01042843796312809,
    0.022224539890885353,
    -0.016597172245383263,
    -0.01938948594033718,
    0.020628931000828743,
    -0.029946142807602882,
    0.037924181669950485,
    0.019004831090569496,
    0.009160499088466167,
    -0.008790090680122375,
    0.03957677632570267,
    0.022623442113399506,
    0.012316099368035793,
    -0.0021850569173693657,
    0.005556134972721338,
    -0.03296640142798424,
    -0.016454707831144333,
    -0.001238555065356195,
    0.010984051041305065,
    -0.0021440982818603516,
    -0.007258591707795858,
    0.023406999185681343,
    -0.01564265601336956,
    0.037639252841472626,
    -0.0004888330004177988,
    -0.015428959392011166,
    0.02753848396241665,
    -0.02884916216135025,
    -0.010649258270859718,
    -0.018933597952127457,
    -0.019788388162851334,
    -0.024774663150310516,
    9.071013664652128e-06,
    0.00017062410188373178,
    -0.013334724120795727,
    0.012643768452107906,
    -0.01484485249966383,
    0.0007390371756628156,
    0.011176379397511482,
    0.02612808160483837,
    0.03359324485063553,
    0.01891935244202614,
    0.014025678858160973,
    0.03974773362278938,
    -0.00042694978765212,
    -0.003932034131139517,
    0.002288344083353877,
    0.024446994066238403,
    0.010157754644751549,
    0.033194344490766525,
    0.03664199635386467,
    -0.029803678393363953,
    -0.029319297522306442,
    0.024304529651999474,
    0.006129556335508823,
    -0.015443205833435059,
    -0.02350672520697117,
    0.010969804599881172,
    0.021113311871886253,
    0.011019667610526085,
    -0.032852429896593094,
    -0.0078070820309221745,
    -0.014602662064135075,
    0.001503896084614098,
    -0.015656903386116028,
    -0.01619827002286911,
    0.010585149750113487,
    -0.009993920102715492,
    -0.01157528068870306,
    0.04479099437594414,
    0.01689634844660759,
    -0.003974773455411196,
    -0.008248723112046719,
    -0.014018556103110313,
    -0.007336947601288557,
    -0.016739636659622192,
    -0.01931825466454029,
    -0.0003372413630131632,
    0.011589528061449528,
    0.0362715870141983,
    -0.03268146887421608,
    0.0014175267424434423,
    0.03302338719367981,
    -0.01695333421230316,
    -0.008704611100256443,
    -0.01834949105978012,
    -0.026797665283083916,
    0.03607213869690895,
    -0.02406233735382557,
    -0.002113824477419257,
    0.0031217641662806273,
    -0.02823656238615513,
    0.016739636659622192,
    -0.028906147927045822,
    -0.008711734786629677,
    -0.042369090020656586,
    0.011233365163207054,
    0.014645401388406754,
    0.015115536749362946,
    -0.012950068339705467,
    -0.02404809184372425,
    -0.007949546910822392,
    -0.013199382461607456,
    0.004861617926508188,
    -0.032909415662288666,
    0.003588337218388915,
    -0.010385698638856411,
    -0.036755967885255814,
    -0.016283748671412468,
    -0.008191737346351147,
    -0.011553911492228508,
    0.003506419714540243,
    -0.004095868673175573,
    0.006485719233751297,
    -0.007465166039764881,
    0.03852253407239914,
    -0.015557177364826202,
    0.03023107349872589,
    0.026370272040367126,
    0.0033390233293175697,
    -0.004159978125244379,
    0.004206279292702675,
    -0.019004831090569496,
    0.015428959392011166,
    0.022680427879095078,
    -0.02705410309135914,
    -0.0403175950050354,
    -0.03023107349872589,
    -0.010969804599881172,
    0.03157024458050728,
    0.026726434007287025,
    -0.008768720552325249,
    -0.0066566769964993,
    -0.0004759221337735653,
    0.002192180138081312,
    -0.02099934034049511,
    -0.00023729326494503766,
    0.012551166117191315,
    -0.04895097389817238,
    0.0022188923321664333,
    -0.0032072432804852724,
    -0.01877688616514206,
    0.002229577163234353,
    -0.009573647752404213,
    -0.004149293061345816,
    0.022894125431776047,
    -0.04823864996433258,
    -0.016426214948296547,
    -0.008647625334560871,
    0.010221864096820354,
    -0.015742382034659386,
    0.03379269689321518,
    -0.01648320071399212,
    -0.02614232711493969,
    -0.01626950316131115,
    0.025686439126729965,
    0.005096685141324997,
    -0.002343549160286784,
    -0.008946801535785198,
    0.03336530178785324,
    0.012907329015433788,
    0.02223878540098667,
    0.004231210332363844,
    0.007714479696005583,
    -0.0019125925609841943,
    0.011639390140771866,
    -0.03003162145614624,
    -0.025771917775273323,
    -0.012935821898281574,
    0.015286494046449661,
    0.010656381957232952,
    -0.014054171741008759,
    -0.02745300531387329,
    -0.012501304037868977,
    -0.02669794112443924,
    -0.009103513322770596,
    -0.027709441259503365,
    0.036385562270879745,
    -0.009758852422237396,
    0.02121303789317608,
    -0.006802703719586134,
    0.02320754900574684,
    0.005328190978616476,
    0.042084161192178726,
    -0.0038857327308505774,
    0.011240487918257713,
    0.018962090834975243,
    0.0028439576271921396,
    0.024489732459187508,
    -0.02641301043331623,
    -0.0050468225963413715,
    -0.006532020401209593,
    -0.010592272505164146,
    0.005830380134284496,
    0.0099013177677989,
    0.05379478260874748,
    -0.0011940348194912076,
    -0.007016401272267103,
    0.006001337897032499,
    0.012487056665122509,
    -0.013562668114900589,
    0.01059939619153738,
    0.025686439126729965,
    -0.034989405423402786,
    -0.007970917038619518,
    0.00770023325458169,
    0.019831128418445587,
    -0.005673668347299099,
    -0.001437115715816617,
    0.024076584726572037,
    -0.01439608819782734,
    -0.003264229279011488,
    -0.020272769033908844,
    -0.001311568426899612,
    0.009951179847121239,
    0.00700215483084321,
    0.007636123802512884,
    0.0008832829771563411,
    -0.016297996044158936,
    0.03863650932908058,
    -0.0037931306287646294,
    -0.007287084590643644,
    -0.04638660326600075,
    0.021583447232842445,
    -0.024304529651999474,
    0.002348891692236066,
    0.026398764923214912,
    0.004996960051357746,
    0.0027282047085464,
    0.0015902655432000756,
    0.04268251359462738,
    0.0027032734360545874,
    -0.017979083582758904,
    -0.029290802776813507,
    -0.024432746693491936,
    -0.006418048404157162,
    -0.016725391149520874,
    0.010884325951337814,
    -0.02307933010160923,
    -0.013128149323165417,
    -0.012016922235488892,
    -0.014474444091320038,
    -0.009573647752404213,
    -0.01456704642623663,
    -0.013462942093610764,
    -0.017394976690411568,
    0.002632040763273835,
    0.009153376333415508,
    -0.0034903923515230417,
    -0.034448035061359406,
    -0.021725911647081375,
    -0.0010720491409301758,
    -0.0011575281387194991,
    0.009089266881346703,
    0.1942082792520523,
    -0.0012777330121025443,
    0.014068418182432652,
    0.027994371950626373,
    0.01330623123794794,
    -0.006453664507716894,
    -0.002929436508566141,
    0.008156120777130127,
    0.011276104487478733,
    0.03929184749722481,
    0.008291463367640972,
    -0.0026160136330872774,
    -0.015485945157706738,
    -0.007205167319625616,
    -0.008277215994894505,
    -0.00945967622101307,
    -0.032282568514347076,
    -0.04430661350488663,
    -0.037439800798892975,
    -0.002514507155865431,
    -0.023891380056738853,
    -0.009801591746509075,
    -0.017694152891635895,
    -0.023036589846014977,
    0.014773620292544365,
    -0.005730654578655958,
    -0.0008080436382442713,
    -0.016939088702201843,
    0.03815212473273277,
    0.007101880386471748,
    -0.027695195749402046,
    0.01247993391007185,
    -0.012729248031973839,
    -0.04667153209447861,
    -0.017822371795773506,
    -0.0069807847030460835,
    -0.0007105441763997078,
    -0.010927065275609493,
    0.021042080596089363,
    0.010022412985563278,
    0.009530908428132534,
    -0.03829459100961685,
    0.02467493712902069,
    -0.01313527300953865,
    0.00187697634100914,
    -0.015457452274858952,
    -0.019417978823184967,
    -0.010670628398656845,
    0.02058619260787964,
    0.021113311871886253,
    -0.01931825466454029,
    -0.0017300592735409737,
    0.01960318349301815,
    -0.0015973887639120221,
    0.001151295262388885,
    -0.0425400473177433,
    -0.001224308623932302,
    0.0069380453787744045,
    0.0266267079859972,
    0.019161542877554893,
    -0.03914938122034073,
    0.013370339758694172,
    -0.0253160297870636,
    0.016112791374325752,
    -0.024831648916006088,
    0.001419307547621429,
    -0.030259566381573677,
    0.02309357561171055,
    0.01064213551580906,
    0.0032695718109607697,
    -0.022295773029327393,
    -0.012031168676912785,
    -0.02383439429104328,
    -0.02300809696316719,
    -0.009160499088466167,
    -0.02399110607802868,
    0.02578616514801979,
    0.014730880968272686,
    0.025273291394114494,
    0.017266757786273956,
    -0.008369818329811096,
    -0.005185726098716259,
    -0.027011362835764885,
    0.001512800226919353,
    -0.019218528643250465,
    0.007799958810210228,
    -0.009687620215117931,
    -0.013377463445067406,
    -0.005224904045462608,
    -0.01806456223130226,
    -0.01641196757555008,
    -0.03704090043902397,
    0.0031716269440948963,
    0.016782376915216446,
    0.006560513284057379,
    0.006977223325520754,
    0.022352758795022964,
    0.02044372819364071,
    -0.01577087491750717,
    -0.00945967622101307,
    -0.05755585804581642,
    0.03225407749414444,
    0.03128531202673912,
    -0.017352236434817314,
    -0.0050895619206130505,
    -0.01327773742377758,
    -0.014616908505558968,
    0.0314277783036232,
    -0.014588415622711182,
    -0.0038572398480027914,
    0.013712256215512753,
    -0.02863546460866928,
    0.011838841252028942,
    0.011169255711138248,
    -0.008797213435173035,
    0.021811392158269882,
    -0.020201535895466805,
    0.011076653376221657,
    0.03085791878402233,
    -0.0022545086685568094,
    -0.007564891595393419,
    -0.013811981305480003,
    0.004494770895689726,
    -0.04541784152388573,
    -0.015671148896217346,
    -0.014802113175392151,
    -0.005705723073333502,
    0.01987386681139469,
    0.0023203985765576363,
    0.003127106698229909,
    0.006824073381721973,
    -0.002940121339634061,
    0.04479099437594414,
    -0.016013065353035927,
    -0.010699121281504631,
    -0.014787866733968258,
    -0.00102574797347188,
    -0.0043523055501282215,
    -0.028208069503307343,
    0.004259703680872917,
    -0.020073318853974342,
    0.0068098269402980804,
    0.0006508869701065123,
    -0.01634073443710804,
    0.007828451693058014,
    -0.021241530776023865,
    -0.0003401351859793067,
    0.032225582748651505,
    0.03199763968586922,
    -0.024105077609419823,
    -0.02225303277373314,
    -0.0037468294613063335,
    0.004330935887992382,
    -0.026512736454606056,
    0.031256821006536484,
    -0.0329379066824913,
    -0.01436047162860632,
    -0.022580701857805252,
    0.018306752666831017,
    -0.003474365221336484,
    -0.058638595044612885,
    -0.006977223325520754,
    0.0011005421401932836,
    0.005431477911770344,
    -0.02807985059916973,
    0.003030942752957344,
    -0.1798478066921234,
    0.013598283752799034,
    0.003465461079031229,
    -0.039320338517427444,
    0.01648320071399212,
    0.001201158040203154,
    0.0050468225963413715,
    -0.008733103983104229,
    -0.00911063700914383,
    -0.00803502555936575,
    0.02780916728079319,
    -0.01703881472349167,
    -0.01074186060577631,
    -0.009958303533494473,
    -0.009260225109755993,
    -0.0011860211379826069,
    0.026370272040367126,
    -0.0010284192394465208,
    0.03313735872507095,
    0.0046265507116913795,
    0.02399110607802868,
    -0.02899162657558918,
    0.020187290385365486,
    0.0249598678201437,
    0.014239376410841942,
    -0.026868898421525955,
    -0.007322700694203377,
    0.007586261257529259,
    0.0051038083620369434,
    -0.035416796803474426,
    -0.015343480743467808,
    -0.007593384478241205,
    0.022196047008037567,
    0.006891744211316109,
    0.012016922235488892,
    0.013933076523244381,
    -0.005908736027777195,
    -0.026740679517388344,
    -0.009338581003248692,
    0.00630763778463006,
    0.008661871775984764,
    0.029632719233632088,
    0.010535286739468575,
    -0.009495291858911514,
    -0.0036186110228300095,
    0.025130825117230415,
    0.019375240430235863,
    -0.05006220191717148,
    0.011041037738323212,
    -0.02823656238615513,
    0.045075926929712296,
    -0.024917127564549446,
    0.01891935244202614,
    0.01786511018872261,
    0.019631676375865936,
    -0.008740227669477463,
    0.016525939106941223,
    0.016283748671412468,
    0.027552731335163116,
    0.006004899740219116,
    -0.028393274173140526,
    -0.03259599208831787,
    0.020899616181850433,
    0.0033621739130467176,
    -0.013455819338560104,
    -0.0073440708220005035,
    -0.018677162006497383,
    0.017822371795773506,
    -0.02023003064095974,
    -0.010022412985563278,
    0.017922095954418182,
    -0.00578764034435153,
    0.0049043577164411545,
    0.01501581072807312,
    0.023406999185681343,
    0.017466207966208458,
    0.008298586122691631,
    0.000378867844119668,
    0.0190475694835186,
    0.008469544351100922,
    -0.019930852577090263,
    0.02105632610619068,
    -0.006239966955035925,
    0.00187697634100914,
    0.007458042819052935,
    -0.01668265089392662,
    0.005752024240791798,
    0.008654749020934105,
    -0.02974669076502323,
    -0.022367004305124283,
    0.013811981305480003,
    0.002646287437528372,
    0.008583515882492065,
    -0.0157138891518116,
    0.020344002172350883,
    0.02988915704190731,
    -0.015457452274858952,
    -0.006001337897032499,
    0.03433406352996826,
    -0.016582926735281944,
    -0.01946071907877922,
    0.03031655214726925,
    -0.03909239545464516,
    -0.012487056665122509,
    0.043280865997076035,
    0.01213801745325327,
    -0.0588095523416996,
    -0.01007939875125885,
    0.0294047761708498,
    -0.0184919573366642,
    -0.0026213559322059155,
    0.01632648892700672,
    0.02426178939640522,
    0.027780674397945404,
    0.008740227669477463,
    0.015215261839330196,
    -0.0005324629601091146,
    -0.017565933987498283,
    0.007465166039764881,
    0.007130373269319534,
    0.023891380056738853,
    -0.005616682581603527,
    -0.015599917620420456,
    0.020187290385365486,
    -0.00717667443677783,
    -0.010670628398656845,
    -0.11334515362977982,
    -0.044050175696611404,
    0.0034084750805050135,
    0.0160700511187315,
    -0.018178533762693405,
    -0.025971369817852974,
    0.00462298933416605,
    0.038123633712530136,
    -0.00529969809576869,
    0.008839952759444714,
    -0.007066263817250729,
    0.007978039793670177,
    -0.0013560886727645993,
    0.021668925881385803,
    -0.023022344335913658,
    -0.0047583309933543205,
    -0.027267800644040108,
    -0.006268459837883711,
    -0.033479273319244385,
    0.028136836364865303,
    -0.001909030950628221,
    0.015286494046449661,
    0.004793947096914053,
    -0.0010070494608953595,
    0.0025572467129677534,
    0.0026160136330872774,
    -0.023791654035449028,
    0.028820669278502464,
    0.0140470489859581,
    0.029461761936545372,
    0.025430001318454742,
    -0.01883387193083763,
    0.0008641392341814935,
    0.0012510208180174232,
    0.028051357716321945,
    -0.002587520517408848,
    -0.012536919675767422,
    -0.0280940979719162,
    0.03191215917468071,
    -0.013434449210762978,
    0.010862955823540688,
    0.02342124655842781,
    0.004979151766747236,
    -0.006396678276360035,
    -0.010456930845975876,
    -0.014403210952877998,
    -0.013541297987103462,
    0.025145072489976883,
    0.0016543747624382377,
    -0.01662566512823105,
    -0.0015875942772254348,
    -0.0031698462553322315,
    -0.01522950828075409,
    0.027339033782482147,
    0.017437715083360672,
    -0.016027312725782394,
    0.010442684404551983,
    0.009196115657687187,
    -0.03356475383043289,
    -0.03601515293121338,
    -0.02433302253484726,
    0.011881580576300621,
    0.014688141644001007,
    0.0214694757014513,
    0.011482679285109043,
    -0.0032802566420286894,
    -0.0005342437652871013,
    -0.002984641818329692,
    0.028037112206220627,
    -0.0032161474227905273,
    -0.026740679517388344,
    0.006927360314875841,
    -0.02092810906469822,
    -0.01234459225088358,
    -0.018036069348454475,
    0.006888182833790779,
    -0.001259034383110702,
    -0.017537441104650497,
    -0.012672261334955692,
    0.007963793352246284,
    -0.017836617305874825,
    -0.005253396928310394,
    -0.03678446263074875,
    -0.022025087848305702,
    0.016212517395615578,
    0.010164877399802208,
    2.5223538614227436e-05,
    -0.006136680021882057,
    0.030345045030117035,
    -0.039662256836891174,
    -0.0008298585889860988,
    0.02001633308827877,
    0.022124813869595528,
    -0.005858873017132282,
    -0.019788388162851334,
    0.004199155606329441,
    -0.012586782686412334,
    0.00029606008320115507,
    -3.0079036150709726e-05,
    0.0062435283325612545,
    -0.023934120312333107,
    -0.028963133692741394,
    -0.08097710460424423,
    0.025401508435606956,
    0.011041037738323212,
    -0.003378201276063919,
    0.01655443198978901,
    -0.011518294923007488,
    -0.0012608151882886887,
    -0.02879217639565468,
    1.9101997168036178e-05,
    0.0022723167203366756,
    -0.022765906527638435,
    0.020059071481227875,
    0.004402168560773134,
    -0.0017416345654055476,
    -0.015756629407405853,
    -0.0004229429760016501,
    0.03327982500195503,
    -0.003287379862740636,
    0.026669448241591454,
    0.012031168676912785,
    0.004088745452463627,
    -0.022708920761942863,
    0.02128427103161812,
    0.000722564640454948,
    -0.02649848908185959,
    -0.005132301710546017,
    -0.009822961874306202,
    0.03815212473273277,
    -0.00013723385927733034,
    -0.028450259938836098,
    -0.004818878602236509,
    -0.013291984796524048,
    0.0017914973432198167,
    -0.0007158865919336677,
    -0.010328711941838264,
    -0.0011682129697874188,
    0.028934640809893608,
    -0.012757740914821625,
    0.03567323461174965,
    0.009808715432882309,
    -0.0249598678201437,
    -0.02078564278781414,
    0.0340491347014904,
    0.004679975099861622,
    -0.03023107349872589,
    -0.0027086157351732254,
    -0.023620696738362312,
    0.005278327967971563,
    0.01181747205555439,
    -0.0024379321839660406,
    0.0443635992705822,
    -0.014581292867660522,
    -0.015044303610920906,
    -0.03470447286963463,
    -0.0043273745104670525,
    0.010271726176142693,
    0.007871191017329693,
    0.003657788736745715,
    -0.014616908505558968,
    -0.011639390140771866,
    0.02911984547972679,
    0.003638199996203184,
    0.01786511018872261,
    -0.00013656605733558536,
    -0.0017656756099313498,
    -0.006727909669280052,
    -0.025771917775273323,
    -0.013612530194222927,
    0.009274471551179886,
    -0.02383439429104328,
    0.0001620539405848831,
    -0.02128427103161812,
    0.04518989846110344,
    0.02287987805902958,
    0.028208069503307343,
    -0.006784895434975624,
    0.008391188457608223,
    -0.03456201031804085,
    -0.0354737862944603,
    0.01759442687034607,
    0.03245352581143379,
    -0.032510511577129364,
    -0.030686961486935616,
    0.002938340650871396,
    0.03752528131008148,
    0.02802286483347416,
    -0.028535738587379456,
    0.02245248295366764,
    0.0030220388434827328,
    -0.002060400089249015,
    -0.0140470489859581,
    0.016184024512767792,
    0.006410924717783928,
    0.011112269945442677,
    0.008697488345205784,
    0.023820146918296814,
    -0.01815004087984562,
    -0.019987840205430984,
    0.030430523678660393,
    0.007928176783025265,
    0.013064040802419186,
    -0.01695333421230316,
    -0.014502936974167824,
    -0.028265055269002914,
    -0.016098544001579285,
    -0.01199555303901434,
    -0.002509164856746793,
    0.0043238126672804356,
    0.018463464453816414,
    0.045161403715610504,
    0.020215783268213272,
    -0.029148338362574577,
    -0.02315056137740612,
    0.018406478688120842,
    -0.017950590699911118,
    0.011418569833040237,
    0.008847076445817947,
    0.009844331070780754,
    0.003351489081978798,
    0.0329379066824913,
    0.015471698716282845,
    -0.005705723073333502,
    0.04858056455850601,
    0.01786511018872261,
    0.01716703176498413,
    0.030060114338994026,
    0.03080093301832676,
    -0.01199555303901434,
    -0.0016508131520822644,
    0.004537510219961405,
    -0.0066566769964993,
    0.0017451961757615209,
    -0.02350672520697117,
    -0.030088607221841812,
    -0.0019036885350942612,
    -0.001037323265336454,
    -0.019232774153351784,
    0.009894194081425667,
    0.008832830004394054,
    0.09773098677396774,
    -0.00019154863548465073,
    -0.013740749098360538,
    -0.009566524997353554,
    0.019845373928546906,
    0.015115536749362946,
    0.01182459481060505,
    0.009780222550034523,
    0.01854894310235977,
    -0.01750894822180271,
    -0.013199382461607456,
    -0.01282897312194109,
    -0.023620696738362312,
    -0.021355504170060158,
    -0.0015412932261824608,
    -0.00766461668536067,
    -0.00784982182085514,
    0.006211474072188139,
    0.001393485814332962,
    -0.015386220067739487,
    0.0443635992705822,
    -0.002078208141028881,
    0.007393933366984129,
    0.0140470489859581,
    -0.016084298491477966,
    0.0050468225963413715,
    0.032567497342824936,
    0.02028701640665531,
    -0.0020995778031647205,
    -0.04906494542956352,
    0.032083116471767426,
    -0.0018039630958810449,
    -0.014659648761153221,
    -0.0085122836753726,
    0.004541071597486734,
    0.00443066144362092,
    -0.01899058371782303,
    0.012472810223698616,
    -0.004580249544233084,
    0.006959415040910244,
    -0.0036827202420681715,
    -0.00615092646330595,
    -0.01752319559454918,
    -0.04219813272356987,
    0.018876612186431885,
    -0.014944578520953655,
    0.004006828181445599,
    -0.00017930555623024702,
    -0.03641405329108238
  ]
}
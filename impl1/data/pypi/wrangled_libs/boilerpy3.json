{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "# boilerpy3\n\n![build](https://github.com/jmriebold/boilerpy3/workflows/tests/badge.svg)\n\n\n## about\n\nboilerpy3 is a native python [port](https://github.com/natural/java2python) of christian kohlsch\u00fctter's [boilerpipe](https://github.com/kohlschutter/boilerpipe) library, released under the apache 2.0 licence.\n\nthis package is based on [sammyer's](https://github.com/sammyer) [boilerpy](https://github.com/sammyer/boilerpy), specifically [mercuree's](https://github.com/mercuree) [python3-compatible fork](https://github.com/mercuree/boilerpy). this fork updates the codebase to be more pythonic (proper attribute access, docstrings, type-hinting, snake case, etc.) and make use python 3.6 features (f-strings), in addition to switching testing frameworks from unittest to pytest.\n\n**note**: this package is based on boilerpipe 1.2 (at or before [this commit](https://github.com/kohlschutter/boilerpipe/tree/b0816590340f4317f500c64565b23beb4fb9a827)), as that's when the code was originally ported to python. i experimented with updating the code to match boilerpipe 1.3, however because it performed worse in my tests, i ultimately decided to leave it at 1.2-equivalent.\n\n\n## installation\n\nto install the latest version from pypi, execute:\n\n```shell\npip install boilerpy3\n```\n\nif you'd like to try out any unreleased features you can install directly from github like so:\n\n```shell\npip install git+https://github.com/jmriebold/boilerpy3\n```\n\n\n## usage\n\n### text extraction\n\nthe top-level interfaces are the extractors. use the `get_content()` methods to extract the filtered text.\n\n```python\nfrom boilerpy3 import extractors\n\nextractor = extractors.articleextractor()\n\n# from a url\ncontent = extractor.get_content_from_url('http://example.com/')\n\n# from a file\ncontent = extractor.get_content_from_file('tests/test.html')\n\n# from raw html\ncontent = extractor.get_content('<html><body><h1>example</h1></body></html>')\n```\n\n\n### marked html extraction\n\nto extract the html chunks containing filtered text, use the `get_marked_html()` methods.\n\n```python\nfrom boilerpy3 import extractors\n\nextractor = extractors.articleextractor()\n\n# from a url\ncontent = extractor.get_marked_html_from_url('http://example.com/')\n\n# from a file\ncontent = extractor.get_marked_html_from_file('tests/test.html')\n\n# from raw html\ncontent = extractor.get_marked_html('<html><body><h1>example</h1></body></html>')\n```\n\n\n### other\n\nalternatively, use `get_doc()` to return a boilerpipe document from which you can get more detailed information.\n\n```python\nfrom boilerpy3 import extractors\n\nextractor = extractors.articleextractor()\n\ndoc = extractor.get_doc_from_url('http://example.com/')\ncontent = doc.content\ntitle = doc.title\n```\n\n\n## extractors\n\nall extractors have a `raise_on_failure` parameter (defaults to `true`). when set to `false`, the `extractor` will handle exceptions raised during text extraction and return any text that was successfully extracted. leaving this at the default setting may be useful if you want to fall back to another algorithm in the event of an error.\n\n\n### defaultextractor\n\nusually worse than articleextractor, but simpler/no heuristics. a quite generic full-text extractor.\n\n\n### articleextractor\n\na full-text extractor which is tuned towards news articles. in this scenario it achieves higher accuracy than defaultextractor. works very well for most types of article-like html.\n\n\n### articlesentencesextractor\n\na full-text extractor which is tuned towards extracting sentences from news articles.\n\n\n### largestcontentextractor\n\na full-text extractor which extracts the largest text component of a page. for news articles, it may perform better than the defaultextractor but usually worse than articleextractor\n\n\n### canolaextractor\n\na full-text extractor trained on [krdwrd](http://krdwrd.org) [canola](https://krdwrd.org/trac/attachment/wiki/corpora/canola/canola.pdf). works well with simpleestimator, too.\n\n\n### keepeverythingextractor\n\ndummy extractor which marks everything as content. should return the input text. use this to double-check that your problem is within a particular extractor or somewhere else.\n\n\n### numwordsrulesextractor\n\na quite generic full-text extractor solely based upon the number of words per block (the current, the previous and the next block).\n\n\n## notes\n\n\n### getting content from urls\n\nwhile boilerpy3 provides `extractor.*_from_url()` methods as a convenience, these are intended for testing only. for more robust functionality, in addition to full control over the request itself, it is strongly recommended to use the [requests package](https://docs.python-requests.org/) instead, calling `extractor.get_content()` with the resulting html.\n\n```python\nimport requests\nfrom boilerpy3 import extractors\n\nextractor = extractors.articleextractor()\n\n# make request to url\nresp = requests.get('http://example.com/')\n\n# pass html to extractor\ncontent = extractor.get_content(resp.text)\n```\n",
  "docs_url": null,
  "keywords": "boilerpipe,boilerpy,html text extraction,text extraction,full text extraction",
  "license": "apache 2.0",
  "name": "boilerpy3",
  "package_url": "https://pypi.org/project/boilerpy3/",
  "project_url": "https://pypi.org/project/boilerpy3/",
  "project_urls": {
    "Homepage": "https://github.com/jmriebold/BoilerPy3"
  },
  "release_url": "https://pypi.org/project/boilerpy3/1.0.7/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "python port of boilerpipe, for html boilerplate removal and text extraction",
  "version": "1.0.7",
  "releases": [],
  "developers": [
    "jmriebold@gmail.com",
    "john_riebold"
  ],
  "kwds": "boilerpy3 boilerpy boilerpipe boilerplate pip",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_boilerpy3",
  "homepage": "https://github.com/jmriebold/boilerpy3",
  "release_count": 7,
  "dependency_ids": []
}
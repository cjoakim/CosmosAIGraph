{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "package description\n-------------------\nthis package provides encoding and decoding routines that enable the\nserialization and deserialization of numerical and array data types provided by \n[numpy](http://www.numpy.org/) using the highly efficient\n[msgpack](http://msgpack.org/) format. serialization of python's\nnative complex data types is also supported.\n\n[![latest version](https://img.shields.io/pypi/v/msgpack-numpy.svg)](https://pypi.python.org/pypi/msgpack-numpy)\n[![build status](https://travis-ci.org/lebedov/msgpack-numpy.svg?branch=master)](https://travis-ci.org/lebedov/msgpack-numpy)\n\ninstallation\n------------\nmsgpack-numpy requires msgpack-python and numpy. if you \nhave [pip](http://www.pip-installer.org/) installed on your\nsystem, run\n\n    pip install msgpack-numpy\n\nto install the package and all dependencies. you can also download \nthe source tarball, unpack it, and run\n\n    python setup.py install\n\nfrom within the source directory.\n\nusage\n-----\nthe easiest way to use msgpack-numpy is to call its monkey patching\nfunction after importing the python msgpack package:\n\n    import msgpack\n    import msgpack_numpy as m\n    m.patch()\n\nthis will automatically force all msgpack serialization and deserialization\nroutines (and other packages that use them) to become numpy-aware. \nof course, one can also manually pass the encoder and \ndecoder provided by msgpack-numpy to the msgpack routines:\n\n    import msgpack\n    import msgpack_numpy as m\n    import numpy as np\n\n    x = np.random.rand(5)\n    x_enc = msgpack.packb(x, default=m.encode)\n    x_rec = msgpack.unpackb(x_enc, object_hook=m.decode)\n\nmsgpack-numpy will try to use the binary (fast) extension in msgpack by default.  \nif msgpack was not compiled with cython (or if the ``msgpack_purepython`` \nvariable is set), it will fall back to using the slower pure python msgpack \nimplementation.\n\nnotes\n-----\nthe primary design goal of msgpack-numpy is ensuring preservation of numerical\ndata types during msgpack serialization and deserialization. inclusion of type\ninformation in the serialized data necessarily incurs some storage overhead; if\npreservation of type information is not needed, one may be able to avoid some\nof this overhead by writing a custom encoder/decoder pair that produces more\nefficient serializations for those specific use cases. \n\nnumpy arrays with a dtype of 'o' are serialized/deserialized using pickle as \na fallback solution to enable msgpack-numpy to handle\nsuch arrays. as the additional overhead of pickle serialization negates one\nof the reasons to use msgpack, it may be advisable to either write a custom\nencoder/decoder to handle the specific use case efficiently or else not bother\nusing msgpack-numpy.\n\nnote that numpy arrays deserialized by msgpack-numpy are read-only and must be copied \nif they are to be modified.\n\ndevelopment\n-----------\nthe latest source code can be obtained from [github](https://github.com/lebedov/msgpack-numpy/).\n\nmsgpack-numpy maintains compatibility with python versions 2.7 and 3.5+.\n\ninstall [`tox`](https://tox.readthedocs.io/en/latest/) to support testing\nacross multiple python versions in your development environment. if you\nuse [`conda`](https://docs.conda.io/en/latest/) to install `python` use\n[`tox-conda`](https://github.com/tox-dev/tox-conda) to automatically manage\ntesting across all supported python versions.\n\n    # using a system python\n    pip install tox\n\n    # additionally, using a conda-provided python\n    pip install tox tox-conda\n\nexecute tests across supported python versions:\n\n    tox\n\nauthors\n-------\nsee the included [authors.md](https://github.com/lebedov/msgpack-numpy/blob/master/authors.md) file for \nmore information.\n\nlicense\n-------\nthis software is licensed under the [bsd license](http://www.opensource.org/licenses/bsd-license).\nsee the included [license.md](https://github.com/lebedov/msgpack-numpy/blob/master/license.md) file for \nmore information.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "msgpack-numpy",
  "package_url": "https://pypi.org/project/msgpack-numpy/",
  "project_url": "https://pypi.org/project/msgpack-numpy/",
  "project_urls": {
    "Homepage": "https://github.com/lebedov/msgpack-numpy"
  },
  "release_url": "https://pypi.org/project/msgpack-numpy/0.4.8/",
  "requires_dist": [
    "numpy (>=1.9.0)",
    "msgpack (>=0.5.2)"
  ],
  "requires_python": "",
  "summary": "numpy data serialization using msgpack",
  "version": "0.4.8",
  "releases": [],
  "developers": [
    "lev@columbia.edu",
    "lev_e"
  ],
  "kwds": "msgpack_numpy msgpack_purepython msgpack serializations serialization",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_msgpack_numpy",
  "homepage": "https://github.com/lebedov/msgpack-numpy",
  "release_count": 21,
  "dependency_ids": [
    "pypi_msgpack",
    "pypi_numpy"
  ]
}
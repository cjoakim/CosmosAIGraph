{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# phunspell\n\na pure python spell checker utilizing [spylls](https://github.com/zverok/spylls) a port of [hunspell](https://hunspell.github.io/).\n\n*note: if you are only supporting languages: english, russian or swedish then use [spylls](https://github.com/zverok/spylls) directly: (`pip install spylls`)*\n\nthis library includes [dictionaries](https://github.com/libreoffice/dictionaries) for all languages supported by [libreoffice](https://wiki.documentfoundation.org/development/dictionaries).\n\njust a note giving credit where it's due, [spylls](https://github.com/zverok/spylls) is a fantastic project which deserves all the credit. there is a [corresponding blog](https://zverok.github.io/blog/2021-01-05-spellchecker-1.html) entry which is a good read. (and of course [hunspell](https://hunspell.github.io/) itself)\n\n### usage\n\n    import phunspell\n\n    pspell = phunspell.phunspell('en_us')\n    print(pspell.lookup(\"phunspell\")) # false\n    print(pspell.lookup(\"about\")) # true\n\n    mispelled = pspell.lookup_list(\"bill's tv is borken\".split(\" \"))\n    print(mispelled) # [\"borken\"]\n\n    for suggestion in pspell.suggest('phunspell'):\n        print(suggestion) # hunspell\n\n### installation\n\n```shell\npip install phunspell\n```\n\n#### supported languages\nlanguage                     | language code\n---------------------------- | -------------\nafrikaans                    | af_za\naragonese                    | an_es\narabic                       | ar\nbelarusian                   | be_by\nbulgarian                    | bg_bg\nbreton                       | br_fr\ncatalan\t                     | ca_es\nczech                        | cs_cz\ndanish                       | da_dk\ngerman                       | de_at\ngerman                       | de_ch\ngerman                       | de_de\ngreek                        | el_gr\nenglish (australian)         | en_au\nenglish (canada)             | en_ca\nenglish (great britain)\t     | en_gb\nenglish (us)                 | en_us\nenglish (south african)\t     | en_za\nspanish\t(all variants)       | es\nspanish                      | es_ar\nspanish                      | es_bo\nspanish                      | es_cl\nspanish                      | es_co\nspanish                      | es_cr\nspanish                      | es_cu\nspanish                      | es_do\nspanish                      | es_ec\nspanish                      | es_es\nspanish                      | es_gq\nspanish                      | es_gt\nspanish                      | es_hn\nspanish                      | es_mx\nspanish                      | es_ni\nspanish                      | es_pa\nspanish                      | es_pe\nspanish                      | es_ph\nspanish                      | es_pr\nspanish                      | es_py\nspanish                      | es_sv\nspanish                      | es_us\nspanish                      | es_uy\nspanish                      | es_ve\nestonian                     | et_ee\nfrench                       | fr_fr\nscottish gaelic              | gd_gb\ngujarati                     | gu_in\nguarani\t                     | gug_py\nhebrew\t                     | he_il\nhindi\t                     | hi_in\ncroatian\t                 | hr_hr\nhungarian\t                 | hu_hu (*todo*)\nicelandic\t                 | is\nindonesian\t                 | id_id\nitalian\t                     | it_it\nkurdish (turkey)\t         | ku_tr\nlithuanian\t                 | lt_lt\nlatvian\t                     | lv_lv\nmapud\u00fcngun\t                 | md (arn) (*todo*)\nnetherlands\t                 | nl_nl\nnorwegian\t                 | nb_no\nnorwegian\t                 | nn_no\noccitan\t                     | oc_fr\npolish\t                     | pl_pl\nbrazilian portuguese\t     | pt_br\nportuguese\t                 | pt_pt\nromanian\t                 | ro_ro\nsinhala\t                     | si_lk\nslovak\t                     | sk_sk\nslovenian\t                 | sl_si\nserbian (cyrillic)           | sr\nserbian (latin)              | sr-latn\nswedish\t                     | sv_se\nswahili\t                     | sw_tz\ntamil\t                     | ta (*todo*)\nthai\t                     | th_th\nturkish\t                     | tr_tr\nukrainian\t                 | uk_ua\nvietnamese\t                 | vi_vn\n\n#### tests\n```shell\npython -m unittest discover -s phunspell/tests -p \"test_*.py\"\n```\n\n#### experimental\n\n```python\n\n    # extended optional:\n\n    # first time usage:\n    # create a directory of dictionaries stored as object\n    # makes loading/access much faster\n\n    storage_path = \"/home/dvwright/data/phunspell/dictionary_objects\"\n    # run once only:\n    pspell_object_create = phunspellobjectstore(path=storage_path)\n\n\n    # then, typical usage:\n    pspell = phunspell(object_storage=storage_path)\n\n    dicts_words = {\n        \"an_es\": \"vengar\",\n        \"be_by\": \"\u0456\u0434\u0430\u043b\u0430\u043f\u0430\u043a\u043b\u043e\u043d\u043d\u0456\u0446\u043a\u0456\",\n        \"bg_bg\": \"\u0443\u0434\u044a\u0440\u0436\u0435\u0445\u043c\u0435\",\n    }\n\n    for loc in dicts_words.keys():\n        print(pspell.lookup(dicts_words[loc], locs=loc))\n```\n\nthere is an option to build/store all the dictionaries as pickled data. since there are security risks associated with pickled data we will not include that data in the distrubution.\n\nto create your own local pickled dictionaries:\n\nenter a python shell:\n```python\n$ python\nstorage_path = \"/home/dvwright/data/phunspell/dictionary_objects\"\npspell = phunspellobjectstore(path=storage_path)\n```\n\n*note: you only have to do this once before using the library and it's optional (this will consume a lot of resources!)*\n\nonce completed you should have a picked object for every dictionary supported by this lib.\n\n```shell\n$ ls /home/dwright/python/phunspell/pickled_data/\naf_za\nan_es\nbe_by\nbg_bg\nbn_bd\nbr_fr\nbs_ba\ncs_cz\nda_dk\nde_at\nde_ch\n...\n...\n...\n```\n\n*note: will take up almost 2 gb of space*\n\n```shell\n$ du -sh .\n1.4g\n```\n\nfor all future uses of the library just pass the directory as an argument.\n\n```python\nstorage_path = \"/home/dvwright/data/phunspell/dictionary_objects\"\npspell = phunspell(object_storage=storage_path)\n\n# load the specific locale on lookups\npspell.lookup_list(['us-word1', 'us-word2'], locs='en_us')\npspell.lookup('german-word', locs='de_de')\n\n```\n\n*note: if you ever update dictionary data, you will need to create a new pickle store for it.*\n\nand it should find the dictionaries and load them quickly\n\n\n#### misc\n`python`, `python3`, `hunspell`, `libreoffice`, `spell`, `spell checking`",
  "docs_url": null,
  "keywords": "spelling,hunspell,spylls,python",
  "license": "mit",
  "name": "phunspell",
  "package_url": "https://pypi.org/project/phunspell/",
  "project_url": "https://pypi.org/project/phunspell/",
  "project_urls": {
    "Download": "https://github.com/dvwright/phunspell/archive/v0.1.6.tar.gz",
    "Homepage": "https://github.com/dvwright/phunspell"
  },
  "release_url": "https://pypi.org/project/phunspell/0.1.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pure python spell checker, utilizing spylls a port of hunspell",
  "version": "0.1.6",
  "releases": [],
  "developers": [
    "david_wright",
    "dvwright@cpan.org"
  ],
  "kwds": "dictionaries spellchecker dicts_words hunspell dictionary",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_phunspell",
  "homepage": "https://github.com/dvwright/phunspell",
  "release_count": 7,
  "dependency_ids": []
}
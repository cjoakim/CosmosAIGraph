{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "[![cruft - fight back against the boilerplate monster!](https://raw.github.com/cruft/cruft/master/art/logo_large.png)](https://cruft.github.io/cruft/)\n_________________\n\n[![pypi version](https://badge.fury.io/py/cruft.svg)](http://badge.fury.io/py/cruft)\n[![conda version](https://img.shields.io/conda/vn/conda-forge/cruft.svg)](https://anaconda.org/conda-forge/cruft)\n[![build status](https://github.com/cruft/cruft/workflows/run%20tests/badge.svg)](https://github.com/cruft/cruft/actions?query=workflow%3a%22run+tests%22+branch%3amaster)\n[![codecov](https://codecov.io/gh/cruft/cruft/branch/master/graph/badge.svg)](https://codecov.io/gh/cruft/cruft)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelcolor=ef8336)](https://timothycrosley.github.io/isort/)\n[![join the chat at https://gitter.im/cruft/community](https://badges.gitter.im/cruft/community.svg)](https://gitter.im/cruft/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://pypi.python.org/pypi/cruft/)\n[![downloads](https://pepy.tech/badge/cruft)](https://pepy.tech/project/cruft)\n\n#### trending contributors\n\n[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/0)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/0)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/1)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/1)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/2)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/2)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/3)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/3)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/4)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/4)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/5)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/5)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/6)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/6)[![](https://sourcerer.io/fame/samj1912/cruft/cruft/images/7)](https://sourcerer.io/fame/samj1912/cruft/cruft/links/7)\n_________________\n\n[read latest documentation](https://cruft.github.io/cruft/) - [browse github code repository](https://github.com/cruft/cruft/)\n_________________\n\n**cruft** allows you to maintain all the necessary boilerplate for packaging and building projects separate from the code you intentionally write.\nfully compatible with existing [cookiecutter](https://github.com/cookiecutter/cookiecutter) templates.\n\ncreating new projects from templates using cruft is easy:\n\n![example usage new project](https://raw.githubusercontent.com/cruft/cruft/master/art/example.gif)\n\nand, so is updating them as the template changes overtime:\n\n![example usage new project](https://raw.githubusercontent.com/cruft/cruft/master/art/example_update.gif)\n\nmany project template utilities exist that automate the copying and pasting of code to create new projects. this *seems* great! however, once created, most leave you with that copy-and-pasted code to manage through the life of your project.\n\ncruft is different. it automates the creation of new projects like the others, but then it also helps you to manage the boilerplate through the life of the project. cruft makes sure your code stays in-sync with the template it came from for you.\n\n## key features\n\n* **cookiecutter compatible**: cruft utilizes [cookiecutter](https://github.com/cookiecutter/cookiecutter) as its template expansion engine. meaning it retains full compatibility with all existing [cookiecutter](https://github.com/cookiecutter/cookiecutter) templates.\n* **template validation**: cruft can quickly validate whether or not a project is using the latest version of a template using `cruft check`. this check can easily be added to ci pipelines to ensure your projects stay in-sync.\n* **automatic template updates**: cruft automates the process of updating code to match the latest version of a template, making it easy to utilize template improvements across many projects.\n\n## installation\n\nto get started - install `cruft` using a python package manager:\n\n`pip3 install cruft`\n\nor\n\n`poetry add cruft`\n\nor\n\n`pipenv install cruft`\n\n\n## creating a new project\n\nto create a new project using cruft run `cruft create project_url` from the command line.\n\nfor example:\n\n        cruft create https://github.com/timothycrosley/cookiecutter-python/\n\ncruft will then ask you any necessary questions to create your new project. it will use your answers to expand the provided template, and then return the directory it placed the expanded project.\nbehind the scenes, cruft uses [cookiecutter](https://github.com/cookiecutter/cookiecutter) to do the project expansion. the only difference in the resulting output is a `.cruft.json` file that\ncontains the git hash of the template used as well as the template variables specified.\n\n## updating a project\n\nto update an existing project, that was created using cruft, run `cruft update` in the root of the project.\nif there are any updates, cruft will have you review them before applying. if you accept the changes cruft will apply them to your project\nand update the `.cruft.json` file for you.\n\n!!! tip\n    sometimes certain files just aren't good fits for updating. such as test cases or `__init__` files. you can tell cruft to always skip updating these files on a project by generating project with `--skip cruft/__init__.py --skip tests` arguments or manually adding them to a skip section within your `.cruft.json` file:\n\n        {\n            \"template\": \"https://github.com/timothycrosley/cookiecutter-python\",\n            \"commit\": \"8a65a360d51250221193ed0ec5ed292e72b32b0b\",\n            \"skip\": [\n                \"cruft/__init__.py\",\n                \"tests\"\n            ],\n            ...\n        }\n\n    or, if you have toml installed, you can add skip files directly to a `tool.cruft` section of your `pyproject.toml` file:\n\n        [tool.cruft]\n        skip = [\"cruft/__init__.py\", \"tests\"]\n    \n    note that it is possible to use glob patterns for selecting the files to skip:\n        {\n            \"skip\": [\n                \"**/__init__.py\",\n                \"tests/*\"\n            ],\n            ...\n        }\n\n## updating values of template variables\n\n`cruft` can also be used to update a project to use new values of template variables; avoiding the need to regenerate\nthe project from sratch using `cookiecutter`.\n\nfor example, imagine a project that was initially generated some while ago, and then later on, you want to change the\nvalues of some of the template variables, e.g. to change `use_some_feature` to `\"yes\"` or to change `project_name` to\n`\"new-project-name\"`.\n\nthere are 2 ways this can be done, as described below.\n\n### update variables via the command line\n\nyou can perform the update directly via the command line if you have only a handful of simple variables.\n\nthis will change `use_some_feature` to `\"yes\"` while leaving all other variables unchanged:\n```bash\ncruft update --variables-to-update '{ \"use_some_feature\" : \"yes\" }'\n```\n\nthis will change both `use_some_feature` to `\"yes\"` and `project_name` to `\"new-project-name\"` (and still leaving all\nother variables unchanged):\n```bash\ncruft update --variables-to-update '{ \"use_some_feature\" : \"yes\", \"project_name\" : \"new-project-name\" }'\n```\n\nthe provided argument must be a valid json string (i.e. using double quotes, no trailing comma etc.).\n\n### update variables via a cruft file\n\nif you prefer to use and editor or you have many or complex variables, you can also perform the changes via providing an\nupdated .cruft.json.\n\n```bash\n# copy the existing cruft file to a temporary location (outside of your repo)\ncp .cruft.json ~/tmp/new-cruft.json\n\n# edit the file using your faviourite editor\nedit ~/tmp/new-cruft.json\n\n# perform the update\n# (this will also update your original .cruft.json automatically)\ncruft update --variables-to-update-file ~/tmp/new-cruft.json\n```\n\n## checking a project\n\nchecking to see if a project is missing a template update is as easy as running `cruft check`. if the project is out-of-date an error and exit code 1 will be returned.\n`cruft check` can be added to ci pipelines to ensure projects don't unintentionally drift.\n\n\n## linking an existing project\n\nhave an existing project that you created from a template in the past using cookiecutter directly? you can link it to the template that was used to create it using: `cruft link template_repository`.\n\nfor example:\n\n        cruft link https://github.com/timothycrosley/cookiecutter-python/\n\nyou can then specify the last commit of the template the project has been updated to be consistent with, or accept the default of using the latest commit from the template.\n\n## compute the diff\n\nwith time, your boilerplate may end up being very different from the actual cookiecutter template. cruft allows you to quickly see what changed in your local project compared to the template. it is as easy as running `cruft diff`. if any local file differs from the template, the diff will appear in your terminal in a similar fashion to `git diff`.\n\nthe `cruft diff` command optionally accepts an `--exit-code` flag that will make cruft exit with a non-0 code should any diff is found. you can combine this flag with the `skip` section of your `.cruft.json` to make stricter ci checks that ensures any improvement to the template is always submitted upstream.\n\n## automating updates with github actions\n\nif you have many repositories to manage, you can automate the change detection process with github actions. this example runs every monday at 2am utc and creates a new pull request if there are changes detected which a maintainer can accept or reject. it creates two prs - one to pull in the new files to the repository and one to update the `.cruft.json` file only, which has the effect of rejecting the change from the upstream repository.\n\n> since jan 2022, registries/organisations must explicitly grant the authority to create a pull request. this can be enabled on a per-organisation level, or a per-registry level for personal projects. see [github](https://github.blog/changelog/2022-05-03-github-actions-prevent-github-actions-from-creating-and-approving-pull-requests/) for more details.\n\n```yaml\n# /.github/workflows/cruft-update.yml\nname: update repository with cruft\npermissions:\n  contents: write\n  pull-requests: write\non:\n  schedule:\n    - cron: \"0 2 * * 1\" # every monday at 2am\njobs:\n  update:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: true\n      matrix:\n        include:\n          - add-paths: .\n            body: use this to merge the changes to this repository.\n            branch: cruft/update\n            commit-message: \"chore: accept new cruft update\"\n            title: new updates detected with cruft\n          - add-paths: .cruft.json\n            body: use this to reject the changes in this repository.\n            branch: cruft/reject\n            commit-message: \"chore: reject new cruft update\"\n            title: reject new updates detected with cruft\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      - name: install cruft\n        run: pip3 install cruft\n\n      - name: check if update is available\n        continue-on-error: false\n        id: check\n        run: |\n          changes=0\n          if [ -f .cruft.json ]; then\n            if ! cruft check; then\n              changes=1\n            fi\n          else\n            echo \"no .cruft.json file\"\n          fi\n\n          echo \"has_changes=$changes\" >> \"$github_output\"\n\n      - name: run update if available\n        if: steps.check.outputs.has_changes == '1'\n        run: |\n          git config --global user.email \"you@example.com\"\n          git config --global user.name \"github\"\n\n          cruft update --skip-apply-ask --refresh-private-variables\n          git restore --staged .\n\n      - name: create pull request\n        if: steps.check.outputs.has_changes == '1'\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.github_token }}\n          add-paths: ${{ matrix.add-paths }}\n          commit-message: ${{ matrix.commit-message }}\n          branch: ${{ matrix.branch }}\n          delete-branch: true\n          branch-suffix: timestamp\n          title: ${{ matrix.title }}\n          body: |\n            this is an autogenerated pr. ${{ matrix.body }}\n\n            [cruft](https://cruft.github.io/cruft/) has detected updates from the cookiecutter repository.\n```\n\n## why create cruft?\n\nsince i first saw videos of [quickly](https://www.youtube.com/watch?v=9ectxzh2dss) being used to automate ubuntu application creation, i've had a love/hate relationship with these kinds of tools.\ni've used them for many projects and certainly seen them lead to productivity improvements. however, i've always felt like they were a double-edged sword. sure, they would automate away the copying and pasting many would do to create projects. however, by doing so,\nthey encouraged more code to be copied and pasted! then, over time, you could easily be left with hundreds of projects that contained copy-and-pasted code with no way to easy way to update them. i created cruft to be a tool that recognized that balance between project creation and maintenance and provided mechanisms to keep built projects up-to-date.\n\ni hope you too find `cruft` useful!\n\n~timothy crosley\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "cruft",
  "package_url": "https://pypi.org/project/cruft/",
  "project_url": "https://pypi.org/project/cruft/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/cruft/2.15.0/",
  "requires_dist": [
    "cookiecutter (>=1.7)",
    "gitpython (>=3.0)",
    "toml (>=0.10) ; (python_version < \"3.11\") and (extra == \"pyproject\")",
    "typer (>=0.4.0)",
    "click (>=7.1.2)",
    "importlib-metadata (>=2.0.0,<5.0.0) ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "allows you to maintain all the necessary cruft for packaging and building projects separate from the code you intentionally write. built on-top of cookiecutter.",
  "version": "2.15.0",
  "releases": [],
  "developers": [
    "timothy.crosley@gmail.com",
    "timothy_crosley"
  ],
  "kwds": "badge badges templates template cron",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_cruft",
  "homepage": "",
  "release_count": 30,
  "dependency_ids": [
    "pypi_click",
    "pypi_cookiecutter",
    "pypi_gitpython",
    "pypi_importlib_metadata",
    "pypi_toml",
    "pypi_typer"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: public domain",
    "operating system :: os independent",
    "topic :: text processing :: markup"
  ],
  "description": "restructuredtext-lint\n=====================\n\n.. image:: https://travis-ci.org/twolfson/restructuredtext-lint.png?branch=master\n   :target: https://travis-ci.org/twolfson/restructuredtext-lint\n   :alt: build status\n\n`restructuredtext`_ `linter`_\n\nthis was created out of frustration with `pypi`_; it sucks finding out your `rest`_ is invalid **after** uploading it. it is being developed in junction with a `sublime text`_ linter.\n\n.. _`restructuredtext`: http://docutils.sourceforge.net/rst.html\n.. _`linter`: http://en.wikipedia.org/wiki/lint_%28software%29\n.. _`rest`: `restructuredtext`_\n.. _`pypi`: http://pypi.python.org/\n.. _`sublime text`: http://sublimetext.com/\n\ngetting started\n---------------\ninstall the module with: ``pip install restructuredtext_lint``\n\n.. code:: python\n\n    import restructuredtext_lint\n    errors = restructuredtext_lint.lint(\"\"\"\n    hello world\n    =======\n    \"\"\")\n\n    # `errors` will be list of system messages\n    # [<system_message: <paragraph...><literal_block...>>]\n    errors[0].message  # title underline too short.\n\ncli utility\n^^^^^^^^^^^\nfor your convenience, we present a cli utility ``rst-lint`` (also available as ``restructuredtext-lint``).\n\n.. code:: console\n\n    $ rst-lint --help\n    usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding encoding]\n                    [--level {debug,info,warning,error,severe}]\n                    [--rst-prolog rst_prolog]\n                    path [path ...]\n\n    lint restructuredtext files. returns 0 if all files pass linting, 1 for an\n    internal error, and 2 if linting failed.\n\n    positional arguments:\n      path                  file/folder to lint\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      --format {text,json}  format of the output (default: \"text\")\n      --encoding encoding   encoding of the input file (e.g. \"utf-8\")\n      --level {debug,info,warning,error,severe}\n                            minimum error level to report (default: \"warning\")\n      --rst-prolog rst_prolog\n                            restructuredtext content to prepend to all files\n                            (useful for substitutions)\n\n    $ rst-lint readme.rst\n    warning readme.rst:2 title underline too short.\n\nother tools\n^^^^^^^^^^^\n``restructuredtext-lint`` is also integrated in other tools. a list can be found and updated in our wiki\n\nhttps://github.com/twolfson/restructuredtext-lint/wiki/integration-in-other-tools\n\npypi issues\n^^^^^^^^^^^\nwhile a document may lint cleanly locally, there can be issues when submitted it to `pypi`_. here are some common problems:\n\n- usage of non-builtin lexers (e.g. ``bibtex``) will pass locally but not be recognized/parsable on `pypi`_\n\n  - this is due to `pypi`_ not having a non-builtin lexer installed\n  - please avoid non-builtin lexers to avoid complications\n  - for more information, see `#27`_\n\n- relative hyperlinks will not work (e.g. ``./unlicense``)\n\n  - according to stack overflow, hyperlinks must use a scheme (e.g. ``http``, ``https``) and that scheme must be whitelisted\n\n    - http://stackoverflow.com/a/16594755\n\n  - please use absolute hyperlinks (e.g. ``https://github.com/twolfson/restructuredtext-lint/blob/master/unlicense``)\n\n.. _`#27`: https://github.com/twolfson/restructuredtext-lint/issues/27\n\ndocumentation\n-------------\n``restructuredtext-lint`` exposes a ``lint`` and ``lint_file`` function\n\n``restructuredtext_lint.lint(content, filepath=none, rst_prolog=none)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlint `restructuredtext`_ and return errors\n\n- content ``string`` - `restructuredtext`_ to be linted\n- filepath ``string`` - optional path to file, this will be returned as the source\n- rst_prolog ``string`` - optional content to prepend to content, line numbers will be offset to ignore this\n\nreturns:\n\n- errors ``list`` - list of errors\n\n  - each error is a class from `docutils`_ with the following attrs\n\n    - line ``integer|none`` - line where the error occurred\n\n      - on rare occasions, this will be ``none`` (e.g. anonymous link mismatch)\n\n    - source ``string`` - ``filepath`` provided in parameters\n    - level ``integer`` - level of the warning\n\n      - levels represent 'info': 1, 'warning': 2, 'error': 3, 'severe': 4\n\n    - type ``string`` - noun describing the error level\n\n      - levels can be 'info', 'warning', 'error', or 'severe'\n    - message ``string`` - error message\n    - full_message ``string`` - error message and source lines where the error occurred\n\n  - it should be noted that ``level``, ``type``, ``message``, and ``full_message`` are custom attrs added onto the original ``system_message``\n\n.. _`docutils`: http://docutils.sourceforge.net/\n\n``restructuredtext_lint.lint_file(filepath, encoding=none, *args, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nlint a `restructuredtext`_ file and return errors\n\n- filepath ``string`` - path to file for linting\n- encoding ``string`` - encoding to read file in as\n\n  - when ``none`` is provided, it will use os default as provided by `locale.getpreferredencoding`_\n  - the list of supported encodings can be found at http://docs.python.org/2/library/codecs.html#standard-encodings\n\n- ``*args`` - additional arguments to be passed to ``lint``\n- ``**kwargs`` - additional keyword arguments to be passed to ``lint``\n\n.. _`locale.getpreferredencoding`: http://docs.python.org/2/library/locale.html#locale.getpreferredencoding\n\nreturns: same structure as ``restructuredtext_lint.lint``\n\nextension\n---------\nunder the hood, we leverage `docutils`_ for parsing restructuredtext documents. `docutils`_ supports adding new directives and roles via ``register_directive`` and ``register_role``.\n\nsphinx\n^^^^^^\nunfortunately due to customizations in `sphinx's parser`_ we cannot include all of its directives/roles (see `#29`_). however, we can include some of them as one-offs. here is an example of adding a directive from `sphinx`_.\n\n.. _`sphinx`: http://sphinx-doc.org/\n.. _`sphinx's parser`:  sphinx_\n.. _`#29`: https://github.com/twolfson/restructuredtext-lint/issues/29#issuecomment-243456787\n\nhttps://github.com/sphinx-doc/sphinx/blob/1.3/sphinx/directives/code.py\n\n**sphinx.rst**\n\n.. code:: rst\n\n    hello\n    =====\n    world\n\n    .. highlight:: python\n\n        hello world!\n\n**sphinx.py**\n\n.. code:: python\n\n    # load in our dependencies\n    from docutils.parsers.rst.directives import register_directive\n    from sphinx.directives.code import highlight\n    import restructuredtext_lint\n\n    # load our new directive\n    register_directive('highlight', highlight)\n\n    # lint our readme\n    errors = restructuredtext_lint.lint_file('docs/sphinx/readme.rst')\n    print errors[0].message # error in \"highlight\" directive: no content permitted.\n\nexamples\n--------\nhere is an example of all invalid properties\n\n.. code:: python\n\n    rst = \"\"\"\n    some content.\n\n    hello world\n    =======\n    some more content!\n    \"\"\"\n    errors = restructuredtext_lint.lint(rst, 'myfile.py')\n    errors[0].line  # 5\n    errors[0].source  # myfile.py\n    errors[0].level  # 2\n    errors[0].type  # warning\n    errors[0].message  # title underline too short.\n    errors[0].full_message  # title underline too short.\n                            #\n                            # hello world\n                            # =======\n\ncontributing\n------------\nin lieu of a formal styleguide, take care to maintain the existing coding style. add unit tests for any new or changed functionality. test via ``nosetests``.\n\ndonating\n--------\nsupport this project and `others by twolfson`_ via `donations`_.\n\nhttp://twolfson.com/support-me\n\n.. _`others by twolfson`: http://twolfson.com/projects\n.. _donations: http://twolfson.com/support-me\n\nunlicense\n---------\nas of nov 22 2013, todd wolfson has released this repository and its contents to the public domain.\n\nit has been released under the `unlicense`_.\n\n.. _unlicense: https://github.com/twolfson/restructuredtext-lint/blob/master/unlicense\n\n\n",
  "docs_url": null,
  "keywords": "restructuredtext,restructured text,rest,rst,lint",
  "license": "unlicense",
  "name": "restructuredtext-lint",
  "package_url": "https://pypi.org/project/restructuredtext-lint/",
  "project_url": "https://pypi.org/project/restructuredtext-lint/",
  "project_urls": {
    "Download": "https://github.com/twolfson/restructuredtext-lint/archive/master.zip",
    "Homepage": "https://github.com/twolfson/restructuredtext-lint"
  },
  "release_url": "https://pypi.org/project/restructuredtext-lint/1.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "restructuredtext linter",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "todd@twolfson.com",
    "todd_wolfson"
  ],
  "kwds": "restructuredtext_lint restructuredtext sublimetext restructured lint_",
  "license_kwds": "unlicense",
  "libtype": "pypi",
  "id": "pypi_restructuredtext_lint",
  "homepage": "https://github.com/twolfson/restructuredtext-lint",
  "release_count": 45,
  "dependency_ids": []
}
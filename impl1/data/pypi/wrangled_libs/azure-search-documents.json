{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure cognitive search client library for python\n\n[azure cognitive search](https://docs.microsoft.com/azure/search/) is a\nsearch-as-a-service cloud solution that gives developers apis and tools\nfor adding a rich search experience over private, heterogeneous content\nin web, mobile, and enterprise applications.\n\nthe azure cognitive search service is well suited for the following\n application scenarios:\n\n* consolidate varied content types into a single searchable index.\n  to populate an index, you can push json documents that contain your content,\n  or if your data is already in azure, create an indexer to pull in data\n  automatically.\n* attach skillsets to an indexer to create searchable content from images\n  and large text documents. a skillset leverages ai from cognitive services\n  for built-in ocr, entity recognition, key phrase extraction, language\n  detection, text translation, and sentiment analysis. you can also add\n  custom skills to integrate external processing of your content during\n  data ingestion.\n* in a search client application, implement query logic and user experiences\n  similar to commercial web search engines.\n\nuse the azure.search.documents client library to:\n\n* submit queries for simple and advanced query forms that include fuzzy\n  search, wildcard search, regular expressions.\n* implement filtered queries for faceted navigation, geospatial search,\n  or to narrow results based on filter criteria.\n* create and manage search indexes.\n* upload and update documents in the search index.\n* create and manage indexers that pull data from azure into an index.\n* create and manage skillsets that add ai enrichment to data ingestion.\n* create and manage analyzers for advanced text analysis or multi-lingual content.\n* optimize results through scoring profiles to factor in business logic or freshness.\n\n[source code](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/search/azure-search-documents)\n| [package (pypi)](https://pypi.org/project/azure-search-documents/)\n| [package (conda)](https://anaconda.org/microsoft/azure-search-documents/)\n| [api reference documentation](https://azuresdkdocs.blob.core.windows.net/$web/python/azure-search-documents/latest/index.html)\n| [product documentation](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n| [samples](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples)\n\n## getting started\n\n### install the package\n\ninstall the azure cognitive search client library for python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-search-documents\n```\n\n### prerequisites\n\n* python 3.7 or later is required to use this package.\n* you need an [azure subscription][azure_sub] and an\n[azure cognitive search service][search_resource] to use this package.\n\nto create a new search service, you can use the [azure portal][create_search_service_docs], [azure powershell][create_search_service_ps], or the [azure cli][create_search_service_cli].\n\n```powershell\naz search service create --name <mysearch> --resource-group <mysearch-rg> --sku free --location westus\n```\n\nsee [choosing a pricing tier](https://docs.microsoft.com/azure/search/search-sku-tier)\n for more information about available options.\n\n### authenticate the client\n\nto interact with the search service, you'll need to create an instance of the appropriate client class: `searchclient` for searching indexed documents, `searchindexclient` for managing indexes, or `searchindexerclient` for crawling data sources and loading search documents into an index. to instantiate a client object, you'll need an **endpoint** and an **api key**. you can refer to the documentation for more information on [supported authenticating approaches](https://learn.microsoft.com/azure/search/search-security-overview#authentication) with the search service.\n\n#### get an api key\n\nyou can get the **endpoint** and an **api key** from the search service in the [azure portal](https://portal.azure.com/). please refer the [documentation](https://docs.microsoft.com/azure/search/search-security-api-keys) for instructions on how to get an api key.\n\nalternatively, you can use the following [azure cli](https://learn.microsoft.com/cli/azure/) command to retrieve the api key from the search service:\n\n```powershell\naz search admin-key show --service-name <mysearch> --resource-group <mysearch-rg>\n```\n\nthere are two types of keys used to access your search service: **admin**\n*(read-write)* and **query** *(read-only)* keys.  restricting access and\noperations in client apps is essential to safeguarding the search assets on your\nservice.  always use a query key rather than an admin key for any query\noriginating from a client app.\n\n*note: the example azure cli snippet above retrieves an admin key so it's easier\nto get started exploring apis, but it should be managed carefully.*\n\n#### create a searchclient\n\nto instantiate the `searchclient`, you'll need the **endpoint**, **api key** and **index name**:\n\n<!-- snippet:sample_authentication.create_search_client_with_key -->\n\n```python\nfrom azure.core.credentials import azurekeycredential\nfrom azure.search.documents import searchclient\n\nservice_endpoint = os.environ[\"azure_search_service_endpoint\"]\nindex_name = os.environ[\"azure_search_index_name\"]\nkey = os.environ[\"azure_search_api_key\"]\n\nsearch_client = searchclient(service_endpoint, index_name, azurekeycredential(key))\n```\n\n<!-- end snippet -->\n\n#### create a client using azure active directory authentication\n\nyou can also create a `searchclient`, `searchindexclient`, or `searchindexerclient` using azure active directory (aad) authentication. your user or service principal must be assigned the \"search index data reader\" role.\nusing the [defaultazurecredential](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md#defaultazurecredential) you can authenticate a service using managed identity or a service principal, authenticate as a developer working on an application, and more all without changing code. please refer the [documentation](https://learn.microsoft.com/azure/search/search-security-rbac?tabs=config-svc-portal%2croles-portal%2ctest-portal%2ccustom-role-portal%2cdisable-keys-portal) for instructions on how to connect to azure cognitive search using azure role-based access control (azure rbac).\n\nbefore you can use the `defaultazurecredential`, or any credential type from [azure.identity](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md), you'll first need to [install the azure.identity package](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md#install-the-package).\n\nto use `defaultazurecredential` with a client id and secret, you'll need to set the `azure_tenant_id`, `azure_client_id`, and `azure_client_secret` environment variables; alternatively, you can pass those values\nto the `clientsecretcredential` also in azure.identity.\n\nmake sure you use the right namespace for `defaultazurecredential` at the top of your source file:\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.search.documents import searchclient\n\nservice_endpoint = os.getenv(\"azure_search_service_endpoint\")\nindex_name = os.getenv(\"azure_search_index_name\")\ncredential = defaultazurecredential()\n\nsearch_client = searchclient(service_endpoint, index_name, credential)\n```\n\n## key concepts\n\nan azure cognitive search service contains one or more indexes that provide\npersistent storage of searchable data in the form of json documents.  _(if\nyou're brand new to search, you can make a very rough analogy between\nindexes and database tables.)_  the azure.search.documents client library\nexposes operations on these resources through two main client types.\n\n* `searchclient` helps with:\n  * [searching](https://docs.microsoft.com/azure/search/search-lucene-query-architecture)\n    your indexed documents using\n    [rich queries](https://docs.microsoft.com/azure/search/search-query-overview)\n    and [powerful data shaping](https://docs.microsoft.com/azure/search/search-filters)\n  * [autocompleting](https://docs.microsoft.com/rest/api/searchservice/autocomplete)\n    partially typed search terms based on documents in the index\n  * [suggesting](https://docs.microsoft.com/rest/api/searchservice/suggestions)\n    the most likely matching text in documents as a user types\n  * [adding, updating or deleting documents](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents)\n    documents from an index\n\n* `searchindexclient` allows you to:\n  * [create, delete, update, or configure a search index](https://docs.microsoft.com/rest/api/searchservice/index-operations)\n  * [declare custom synonym maps to expand or rewrite queries](https://docs.microsoft.com/rest/api/searchservice/synonym-map-operations)\n  * most of the `searchserviceclient` functionality is not yet available in our current preview\n\n* `searchindexerclient` allows you to:\n  * [start indexers to automatically crawl data sources](https://docs.microsoft.com/rest/api/searchservice/indexer-operations)\n  * [define ai powered skillsets to transform and enrich your data](https://docs.microsoft.com/rest/api/searchservice/skillset-operations)\n\nazure cognitive search provides two powerful features: **semantic search** and **vector search**.\n\n**semantic search** enhances the quality of search results for text-based queries. by enabling semantic search on your search service, you can improve the relevance of search results in two ways:\n- it applies secondary ranking to the initial result set, promoting the most semantically relevant results to the top.\n- it extracts and returns captions and answers in the response, which can be displayed on a search page to enhance the user's search experience.\n\nto learn more about semantic search, you can refer to the [documentation](https://learn.microsoft.com/azure/search/vector-search-overview).\n\n**vector search** is an information retrieval technique that overcomes the limitations of traditional keyword-based search. instead of relying solely on lexical analysis and matching individual query terms, vector search utilizes machine learning models to capture the contextual meaning of words and phrases. it represents documents and queries as vectors in a high-dimensional space called an embedding. by understanding the intent behind the query, vector search can deliver more relevant results that align with the user's requirements, even if the exact terms are not present in the document. moreover, vector search can be applied to various types of content, including images and videos, not just text.\n\nto learn how to index vector fields and perform vector search, you can refer to the [sample](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples/sample_vector_search.py). this sample provides detailed guidance on indexing vector fields and demonstrates how to perform vector search.\n\nadditionally, for more comprehensive information about vector search, including its concepts and usage, you can refer to the [documentation](https://learn.microsoft.com/azure/search/vector-search-overview). the documentation provides in-depth explanations and guidance on leveraging the power of vector search in azure cognitive search.\n\n_the `azure.search.documents` client library (v1) is a brand new offering for\npython developers who want to use search technology in their applications.  there\nis an older, fully featured `microsoft.azure.search` client library (v10) with\nmany similar looking apis, so please be careful to avoid confusion when\nexploring online resources._\n\n## examples\n\nthe following examples all use a simple [hotel data set](https://github.com/azure-samples/azure-search-sample-data/blob/master/readme.md)\nthat you can [import into your own index from the azure portal.](https://docs.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source)\nthese are just a few of the basics - please [check out our samples](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples) for\nmuch more.\n\n\n* [querying](#querying)\n* [creating an index](#creating-an-index)\n* [adding documents to your index](#adding-documents-to-your-index)\n* [retrieving a specific document from your index](#retrieving-a-specific-document-from-your-index)\n* [async apis](#async-apis)\n\n\n### querying\n\nlet's start by importing our namespaces.\n\n```python\nimport os\nfrom azure.core.credentials import azurekeycredential\nfrom azure.search.documents import searchclient\n```\n\nwe'll then create a `searchclient` to access our hotels search index.\n\n```python\nindex_name = \"hotels\"\n# get the service endpoint and api key from the environment\nendpoint = os.environ[\"search_endpoint\"]\nkey = os.environ[\"search_api_key\"]\n\n# create a client\ncredential = azurekeycredential(key)\nclient = searchclient(endpoint=endpoint,\n                      index_name=index_name,\n                      credential=credential)\n```\n\nlet's search for a \"luxury\" hotel.\n\n```python\nresults = client.search(search_text=\"luxury\")\n\nfor result in results:\n    print(\"{}: {})\".format(result[\"hotelid\"], result[\"hotelname\"]))\n```\n\n\n### creating an index\n\nyou can use the `searchindexclient` to create a search index. fields can be\ndefined using convenient `simplefield`, `searchablefield`, or `complexfield`\nmodels. indexes can also define suggesters, lexical analyzers, and more.\n\n<!-- snippet:sample_index_crud_operations.create_index -->\n\n```python\nclient = searchindexclient(service_endpoint, azurekeycredential(key))\nname = \"hotels\"\nfields = [\n    simplefield(name=\"hotelid\", type=searchfielddatatype.string, key=true),\n    simplefield(name=\"baserate\", type=searchfielddatatype.double),\n    searchablefield(name=\"description\", type=searchfielddatatype.string, collection=true),\n    complexfield(\n        name=\"address\",\n        fields=[\n            simplefield(name=\"streetaddress\", type=searchfielddatatype.string),\n            simplefield(name=\"city\", type=searchfielddatatype.string),\n        ],\n        collection=true,\n    ),\n]\ncors_options = corsoptions(allowed_origins=[\"*\"], max_age_in_seconds=60)\nscoring_profiles: list[scoringprofile] = []\nindex = searchindex(name=name, fields=fields, scoring_profiles=scoring_profiles, cors_options=cors_options)\n\nresult = client.create_index(index)\n```\n\n<!-- end snippet -->\n\n### adding documents to your index\n\nyou can `upload`, `merge`, `mergeorupload`, and `delete` multiple documents from\nan index in a single batched request.  there are\n[a few special rules for merging](https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents#document-actions)\nto be aware of.\n\n<!-- snippet:sample_crud_operations.upload_document -->\n\n```python\ndocument = {\n    \"category\": \"hotel\",\n    \"hotelid\": \"1000\",\n    \"rating\": 4.0,\n    \"rooms\": [],\n    \"hotelname\": \"azure inn\",\n}\n\nresult = search_client.upload_documents(documents=[document])\n\nprint(\"upload of new document succeeded: {}\".format(result[0].succeeded))\n```\n\n<!-- end snippet -->\n\n### authenticate in a national cloud\n\nto authenticate in a [national cloud](https://docs.microsoft.com/azure/active-directory/develop/authentication-national-cloud), you will need to make the following additions to your client configuration:\n\n- set the `authorityhost` in the credential options or via the `azure_authority_host` environment variable\n- set the `audience` in `searchclient`, `searchindexclient`, or `searchindexerclient`\n\n```python\n# create a searchclient that will authenticate through aad in the china national cloud.\nimport os\nfrom azure.identity import defaultazurecredential, azureauthorityhosts\nfrom azure.search.documents import searchclient\n\nindex_name = \"hotels\"\nendpoint = os.environ[\"search_endpoint\"]\nkey = os.environ[\"search_api_key\"]\ncredential = defaultazurecredential(authority=azureauthorityhosts.azure_china)\n\nsearch_client = searchclient(endpoint, index_name, credential=credential, audience=\"https://search.azure.cn\")\n```\n\n### retrieving a specific document from your index\n\nin addition to querying for documents using keywords and optional filters,\nyou can retrieve a specific document from your index if you already know the\nkey. you could get the key from a query, for example, and want to show more\ninformation about it or navigate your customer to that document.\n\n<!-- snippet:sample_get_document.get_document -->\n\n```python\nfrom azure.core.credentials import azurekeycredential\nfrom azure.search.documents import searchclient\n\nsearch_client = searchclient(service_endpoint, index_name, azurekeycredential(key))\n\nresult = search_client.get_document(key=\"23\")\n\nprint(\"details for hotel '23' are:\")\nprint(\"        name: {}\".format(result[\"hotelname\"]))\nprint(\"      rating: {}\".format(result[\"rating\"]))\nprint(\"    category: {}\".format(result[\"category\"]))\n```\n\n<!-- end snippet -->\n\n### async apis\n\nthis library includes a complete async api. to use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nsee\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md#transport)\nfor more information.\n\n<!-- snippet:sample_simple_query_async.simple_query_async -->\n\n```python\nfrom azure.core.credentials import azurekeycredential\nfrom azure.search.documents.aio import searchclient\n\nsearch_client = searchclient(service_endpoint, index_name, azurekeycredential(key))\n\nasync with search_client:\n    results = await search_client.search(search_text=\"spa\")\n\n    print(\"hotels containing 'spa' in the name (or other fields):\")\n    async for result in results:\n        print(\"    name: {} (rating {})\".format(result[\"hotelname\"], result[\"rating\"]))\n```\n\n<!-- end snippet -->\n\n## troubleshooting\n\n### general\n\nthe azure cognitive search client will raise exceptions defined in [azure core][azure_core].\n\n### logging\n\nthis library uses the standard [logging][python_logging] library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` keyword argument:\n```python\nimport sys\nimport logging\nfrom azure.core.credentials import azurekeycredential\nfrom azure.search.documents import searchclient\n\n# create a logger for the 'azure' sdk\nlogger = logging.getlogger('azure')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\n# this client will log detailed information about its http sessions, at debug level\nclient = searchclient(\"<service endpoint>\", \"<index_name>\", azurekeycredential(\"<api key>\"), logging_enable=true)\n\n```\n\nsimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nresult =  client.search(search_text=\"spa\", logging_enable=true)\n```\n\n## next steps\n\n* go further with azure.search.documents and our [https://github.com/azure/azure-sdk-for-python/blob/master/sdk/search/azure-search-documents/samples](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/search/azure-search-documents/samples)\n* watch a [demo or deep dive video](https://azure.microsoft.com/resources/videos/index/?services=search)\n* read more about the [azure cognitive search service](https://docs.microsoft.com/azure/search/search-what-is-azure-search)\n\n## contributing\n\nsee our [search contributing.md][search_contrib] for details on building,\ntesting, and contributing to this library.\n\nthis project welcomes contributions and suggestions.  most contributions require\nyou to agree to a contributor license agreement (cla) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. for\ndetails, visit [cla.microsoft.com][cla].\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct].\nfor more information see the [code of conduct faq][coc_faq]\nor contact [opencode@microsoft.com][coc_contact] with any\nadditional questions or comments.\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2fsdk%2fsearch%2fazure.search.documents%2freadme.png)\n\n## related projects\n\n* [microsoft azure sdk for python](https://github.com/azure/azure-sdk-for-python)\n\n<!-- links -->\n\n![impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2fsdk%2fsearch%2fazure-search-documents%2freadme.png)\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_core]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md\n[azure_sub]: https://azure.microsoft.com/free/\n[search_resource]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[azure_portal]: https://portal.azure.com\n\n[create_search_service_docs]: https://docs.microsoft.com/azure/search/search-create-service-portal\n[create_search_service_ps]: https://docs.microsoft.com/azure/search/search-manage-powershell#create-or-delete-a-service\n[create_search_service_cli]: https://docs.microsoft.com/cli/azure/search/service?view=azure-cli-latest#az-search-service-create\n[search_contrib]: https://github.com/azure/azure-sdk-for-python/blob/main/contributing.md\n[python_logging]: https://docs.python.org/3.5/library/logging.html\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-search-documents",
  "package_url": "https://pypi.org/project/azure-search-documents/",
  "project_url": "https://pypi.org/project/azure-search-documents/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/search/azure-search-documents"
  },
  "release_url": "https://pypi.org/project/azure-search-documents/11.4.0/",
  "requires_dist": [
    "azure-core<2.0.0,>=1.28.0",
    "azure-common~=1.1",
    "isodate>=0.6.0"
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure cognitive search client library for python",
  "version": "11.4.0",
  "releases": [],
  "developers": [
    "ascl@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_search_api_key azure_search_index_name azuresdkdocs azure azure_core",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_search_documents",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/search/azure-search-documents",
  "release_count": 36,
  "dependency_ids": [
    "pypi_azure_common",
    "pypi_azure_core",
    "pypi_isodate"
  ]
}
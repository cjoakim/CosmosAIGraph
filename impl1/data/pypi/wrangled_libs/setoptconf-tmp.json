{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "==========\nimportant!\n==========\n\nthis is a fork of `setoptconf <https://github.com/jayclassless/setoptconf>`_ .\nit is a temporary solution to fix `prospector <https://github.com/pycqa/prospector>`_\nbeing unable to install due to setoptconf not working with setuptools >= 58 - \nsee `the issue here <https://github.com/pycqa/prospector/issues/438>`_.\n\nthis package is only meant as a temporary solution to fix ci builds using prosector\nuntil setoptconf can be removed from there. therefore do not expect this fork to be \nmaintained and it will be purged once prospector is updated.\n\n==============\nsetoptconf-tmp\n==============\n\n``setoptconf`` is a python library that can be used to retrieve program settings\nfrom a variety of common sources:\n\n* command line\n* environment variables\n* ini files\n* json files\n* yaml files\n* python objects/modules\n\nthe goal of this project is to define your desired settings in a simple and\nconsistent way, and then point setoptconf at as many of the sources as you'd\nlike to use, and let it comb them all, looking for your settings.\n\nthis readme is admittedly very light on details. full documentation will come\nin time. for now, here's an example of its use:\n\nimport the library::\n\n    import setoptconf as soc\n\ninstantiate the manager::\n\n    manager = soc.configurationmanager('myprogram')\n\ndefine the settings we'd like to collect::\n\n    manager.add(soc.stringsetting('foo'))\n    manager.add(soc.integersetting('bar', required=true))\n    manager.add(soc.booleansetting('baz', default=true))\n\nretreive the settings from our desired sources, combining the settings and\noverriding with the priority implied by the order of the sources we pass::\n\n    config = manager.retrieve(\n        # this source pulls from the command line using argparse.\n        soc.commandlinesource,\n\n        # this source pulls from environment variables that are prefixed\n        # with myprogram_*\n        soc.environmentvariablesource,\n\n        # this source pulls from the named ini files. it stops at the first\n        # file it finds.\n        soc.configfilesource(('.myprogramrc', '/etc/myprogram.conf')),\n    )\n\nwe now have a configuration object named ``config`` that has three attributes;\n``foo``, ``bar``, and ``baz``.\n\n\n\n",
  "docs_url": null,
  "keywords": "settings,options,configuration,config,arguments",
  "license": "mit",
  "name": "setoptconf-tmp",
  "package_url": "https://pypi.org/project/setoptconf-tmp/",
  "project_url": "https://pypi.org/project/setoptconf-tmp/",
  "project_urls": {
    "Homepage": "https://github.com/carlio/setoptconf-tmp"
  },
  "release_url": "https://pypi.org/project/setoptconf-tmp/0.3.1/",
  "requires_dist": [
    "pyyaml ; extra == 'yaml'"
  ],
  "requires_python": "",
  "summary": "a module for retrieving program settings from various sources in a consistant method.",
  "version": "0.3.1",
  "releases": [],
  "developers": [
    "carl_crowder",
    "git@carlcrowder.com",
    "jason_simeone",
    "jay@classless.net"
  ],
  "kwds": "setoptconf prospector setuptools configurationmanager configfilesource",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_setoptconf_tmp",
  "homepage": "https://github.com/carlio/setoptconf-tmp",
  "release_count": 2,
  "dependency_ids": [
    "pypi_pyyaml"
  ]
}
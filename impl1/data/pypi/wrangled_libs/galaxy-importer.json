{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "### install\n\n#### from pypi\n\n`pip install galaxy-importer`\n\n#### from source\n\nclone repo and go into project directory\n\ninstall into environment the local setup.py including its development dependencies:\n\n`pip install -e .[dev]`\n\n### run importer\n\nrun parsing/validation standalone to view log output and importer result for a build collection artifact file:\n\n`python -m galaxy_importer.main [collection_artifact_file]`\n\nsupports legacy roles (note: must be in the parent directory of the legacy role):\n\n`python -m galaxy_importer.main --legacy-role [legacy_role_directory] --namespace [namespace]`\n\nview log output in terminal, and view the importer result in the written file `importer_result.json`\n\n#### structure of output\n\n* `metadata` (all data from manifest.json, set by collectionloader.\\_load_collection_manifest())\n* `docs_blob` (set by collectionloader.\\_build_docs_blob())\n * `collection_readme`\n * `documentation_files`\n * `contents`\n* `contents`\n* `requires_ansible`\n\n\n### configuration\n\nan optional ini configuration file is supported, the following locations are checked in this order:\n\n```\n/etc/galaxy-importer/galaxy-importer.cfg\n<code_source>/galaxy_importer/galaxy-importer.cfg\n```\n\nyou can override the above paths by setting `galaxy_importer_config` in the environment. for example:\n\n```\n$ export galaxy_importer_config=~/galaxy-importer.cfg\n```\n\nconfiguration options and their defaults are defined in `defaults` at [galaxy_importer/config.py](galaxy_importer/config.py)\n\nexample configuration file with subset of config options:\n\n```\n[galaxy-importer]\nlog_level_main = info\nrun_ansible_test = false\nansible_local_tmp = '~/.ansible/tmp'\n```\n\n- `run_ansible_test` - set to `true` to run `ansible-test` during collection import. defaults to `false`.\n\n- `ansible_test_local_image` - set to `true` to run `ansible-test` sandboxed within a container image. requires installation of either podman or docker to run the container. defaults to `false`.\n\n- `local_image_docker` - set to `true` to run the `ansible-test` container image via docker; otherwise, podman will be used. defaults to `false`.\n\n\n\n### issues and process\n\nto file an issue, visit the [automation hub jira project](https://issues.redhat.com/projects/aah/issues)\n\nprocess details for `galaxy-importer`: [process.md](process.md)\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "galaxy-importer",
  "package_url": "https://pypi.org/project/galaxy-importer/",
  "project_url": "https://pypi.org/project/galaxy-importer/",
  "project_urls": {
    "Homepage": "https://github.com/ansible/galaxy-importer"
  },
  "release_url": "https://pypi.org/project/galaxy-importer/0.4.18/",
  "requires_dist": [
    "ansible-core",
    "ansible-builder <4.0,>=1.2.0",
    "ansible-lint <=6.14.3,>=6.2.2",
    "attrs <23,>=21.4.0",
    "bleach <4,>=3.3.0",
    "bleach-allowlist <2,>=1.0.3",
    "flake8 <7,>=5.0.0",
    "markdown <4,>=3.3.4",
    "pyyaml <7,>=5.4.1",
    "requests <3,>=2.28.0",
    "semantic-version <3,>=2.9.0",
    "black >=21.7b0 ; extra == 'dev'",
    "GitPython >=3.1.20 ; extra == 'dev'",
    "pyfakefs <5,>=4.4.0 ; extra == 'dev'",
    "pytest <8,>=7.0.0 ; extra == 'dev'",
    "pytest-cov <5,>=3.0.0 ; extra == 'dev'",
    "pytest-mock <4,>=3.8.0 ; extra == 'dev'",
    "towncrier ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "galaxy content importer",
  "version": "0.4.18",
  "releases": [],
  "developers": [
    "info@ansible.com",
    "red_hat"
  ],
  "kwds": "galaxy_importer galaxy_importer_config legacy_role_directory requires_ansible ansible",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_galaxy_importer",
  "homepage": "https://github.com/ansible/galaxy-importer",
  "release_count": 78,
  "dependency_ids": [
    "pypi_ansible_builder",
    "pypi_ansible_core",
    "pypi_ansible_lint",
    "pypi_attrs",
    "pypi_black",
    "pypi_bleach",
    "pypi_bleach_allowlist",
    "pypi_flake8",
    "pypi_gitpython",
    "pypi_markdown",
    "pypi_pyfakefs",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_semantic_version",
    "pypi_towncrier"
  ]
}
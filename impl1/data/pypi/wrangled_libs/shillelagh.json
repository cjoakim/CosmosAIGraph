{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: sql"
  ],
  "description": "==========\nshillelagh\n==========\n\n.. image:: https://coveralls.io/repos/github/betodealmeida/shillelagh/badge.svg?branch=master\n   :target: https://coveralls.io/github/betodealmeida/shillelagh?branch=master\n.. image:: https://readthedocs.org/projects/shillelagh/badge/?version=latest\n   :target: https://shillelagh.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n.. image:: https://badge.fury.io/py/shillelagh.svg\n   :target: https://badge.fury.io/py/shillelagh\n.. image:: https://img.shields.io/pypi/pyversions/shillelagh\n   :alt: pypi - python version\n\n.. image:: docs/logo.png\n   :width: 25 %\n\nshillelagh (\u0283\u026a\u02c8le\u026al\u026a) is a python library and cli that allows you to query many resources (apis, files, in memory objects) using sql. it's both user and developer friendly, making it trivial to access resources and easy to add support for new ones.\n\nlearn more on the `documentation <https://shillelagh.readthedocs.io/en/latest/>`_.\n\nthe library is an implementation of the `python db api 2.0 <https://www.python.org/dev/peps/pep-0249/>`_ based on `sqlite <https://sqlite.org/index.html>`_ (using the `apsw <https://rogerbinns.github.io/apsw/>`_ library):\n\n.. code-block:: python\n\n    from shillelagh.backends.apsw.db import connect\n\n    connection = connect(\":memory:\")\n    cursor = connection.cursor()\n\n    query = \"select * from a_table\"\n    for row in cursor.execute(query):\n        print(row)\n\nthere is also a `sqlalchemy <https://www.sqlalchemy.org/>`_ dialect:\n\n.. code-block:: python\n\n    from sqlalchemy.engine import create_engine\n\n    engine = create_engine(\"shillelagh://\")\n    connection = engine.connect()\n\n    query = \"select * from a_table\"\n    for row in connection.execute(query):\n        print(row)\n\nand a command-line utility:\n\n.. code-block:: bash\n\n    $ shillelagh\n    sql> select * from a_table\n\nwhy sql?\n========\n\nsharks have been around for a long time. they're older than trees and the rings of saturn, actually! the reason they haven't changed that much in hundreds of millions of years is because they're really good at what they do.\n\nsql has been around for some 50 years for the same reason: it's really good at what it does.\n\nwhy \"shillelagh\"?\n=================\n\npicture a leprechaun hitting apis with a big stick so that they accept sql.\n\nhow is it different?\n====================\n\nshillelagh allows you to easily query non-sql resources. for example, if you have a `google spreadsheet <https://docs.google.com/spreadsheets/d/1_rn3lm0r_bu3nemo0s9pbfky5lqpcuy1pscv8zxptg8/edit#gid=0>`_ you can query it directly as if it were a table in a database:\n\n.. code-block:: sql\n\n    select country, sum(cnt)\n    from \"https://docs.google.com/spreadsheets/d/1_rn3lm0r_bu3nemo0s9pbfky5lqpcuy1pscv8zxptg8/edit#gid=0\"\n    where cnt > 0\n    group by country\n\nyou can even run ``insert``/``delete``/``update`` queries against the spreadsheet:\n\n.. code-block:: sql\n\n    update \"https://docs.google.com/spreadsheets/d/1_rn3lm0r_bu3nemo0s9pbfky5lqpcuy1pscv8zxptg8/edit#gid=0\"\n    set cnt = cnt + 1\n    where country != 'br'\n\nqueries like this are supported by `adapters <https://shillelagh.readthedocs.io/en/latest/adapters.html>`_. currently shillelagh has the following adapters:\n\n============= ============ ========================================================================== =====================================================================================================\n name          type         uri pattern                                                                example uri\n============= ============ ========================================================================== =====================================================================================================\n csv           file/api     ``/path/to/file.csv``; ``http(s)://*``                                     ``/home/user/sample_data.csv``\n datasette     api          ``http(s)://*``                                                            ``https://global-power-plants.datasettes.com/global-power-plants/global-power-plants``\n generic json  api          ``http(s)://*``                                                            ``https://api.stlouisfed.org/fred/series?series_id=gnpca&api_key=xxx&file_type=json#$.seriess[*]``\n generic xml   api          ``http(s)://*``                                                            ``https://api.congress.gov/v3/bill/118?format=xml&offset=0&limit=2&api_key=xxx#.//bill``\n github        api          ``https://api.github.com/repos/${owner}/{$repo}/pulls``                    ``https://api.github.com/repos/apache/superset/pulls``\n gsheets       api          ``https://docs.google.com/spreadsheets/d/${id}/edit#gid=${sheet_id}``      ``https://docs.google.com/spreadsheets/d/1lcwzmsdcl92g7na-d6qgrqg1t5tihyukjuy1u9xansk/edit#gid=0``\n html table    api          ``http(s)://*``                                                            ``https://en.wikipedia.org/wiki/list_of_countries_and_dependencies_by_population``\n pandas        in memory    any variable name (local or global)                                        ``my_df``\n s3            api          ``s3://bucket/path/to/file``                                               ``s3://shillelagh/sample_data.csv``\n socrata       api          ``https://${domain}/resource/${dataset-id}.json``                          ``https://data.cdc.gov/resource/unsk-b7fc.json``\n system        api          ``system://${resource}``                                                   ``system://cpu?interval=2``\n weatherapi    api          ``https://api.weatherapi.com/v1/history.json?key=${key}&q=${location}``    ``https://api.weatherapi.com/v1/history.json?key=xxx&q=london``\n============= ============ ========================================================================== =====================================================================================================\n\nthere are also 3rd-party adapters:\n\n- `airtable <https://github.com/cancan101/airtable-db-api>`_\n- `graphql <https://github.com/cancan101/graphql-db-api>`_\n\na query can combine data from multiple adapters:\n\n.. code-block:: sql\n\n    insert into \"/tmp/file.csv\"\n    select time, chance_of_rain\n    from \"https://api.weatherapi.com/v1/history.json?q=london\"\n    where time in (\n      select datetime\n      from \"https://docs.google.com/spreadsheets/d/1_rn3lm0r_bu3nemo0s9pbfky5lqpcuy1pscv8zxptg8/edit#gid=1648320094\"\n    )\n\nthe query above reads timestamps from a google sheet, uses them to filter weather data from `weatherapi <https://www.weatherapi.com/>`_, and writes the chance of rain into a (pre-existing) csv file.\n\nnew adapters are relatively easy to implement. there's a `step-by-step tutorial <https://shillelagh.readthedocs.io/en/latest/development.html>`_ that explains how to create a new adapter to an api or filetype.\n\ninstallation\n============\n\ninstall shillelagh with ``pip``:\n\n.. code-block:: bash\n\n    $ pip install 'shillelagh'\n\nyou also need to install optional dependencies, depending on the adapter you want to use:\n\n.. code-block:: bash\n\n    $ pip install 'shillelagh[console]'        # to use the cli\n    $ pip install 'shillelagh[genericjsonapi]' # for generic json\n    $ pip install 'shillelagh[genericxmlapi]'  # for generic xml\n    $ pip install 'shillelagh[githubapi]'      # for github\n    $ pip install 'shillelagh[gsheetsapi]'     # for gsheets\n    $ pip install 'shillelagh[htmltableapi]'   # for html tables\n    $ pip install 'shillelagh[pandasmemory]'   # for pandas in memory\n    $ pip install 'shillelagh[s3selectapi]'    # for s3 files\n    $ pip install 'shillelagh[systemapi]'      # for cpu information\n\nalternatively, you can install everything with:\n\n.. code-block:: bash\n\n    $ pip install 'shillelagh[all]'\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "shillelagh",
  "package_url": "https://pypi.org/project/shillelagh/",
  "project_url": "https://pypi.org/project/shillelagh/",
  "project_urls": {
    "Documentation": "https://shillelagh.readthedocs.io/",
    "Homepage": "https://github.com/betodealmeida/shillelagh/"
  },
  "release_url": "https://pypi.org/project/shillelagh/1.2.12/",
  "requires_dist": [
    "apsw >=3.9.2",
    "python-dateutil >=2.8.1",
    "requests >=2.31.0",
    "requests-cache >=0.7.1",
    "sqlalchemy >=1.3",
    "greenlet >=2.0.2",
    "typing-extensions >=3.7.4.3",
    "packaging",
    "importlib-metadata ; python_version < \"3.10\"",
    "PyYAML >=5.4 ; extra == 'all'",
    "appdirs >=1.4.4 ; extra == 'all'",
    "beautifulsoup4 >=4.11.1 ; extra == 'all'",
    "boto3 >=1.24.28 ; extra == 'all'",
    "defusedxml >=0.7.1 ; extra == 'all'",
    "google-auth >=1.23.0 ; extra == 'all'",
    "holidays >=0.23 ; extra == 'all'",
    "html5lib >=1.1 ; extra == 'all'",
    "jsonpath-python >=1.0.5 ; extra == 'all'",
    "pandas >=1.2.2 ; extra == 'all'",
    "prison >=0.2.1 ; extra == 'all'",
    "prompt-toolkit >=3 ; extra == 'all'",
    "psutil >=5.8.0 ; extra == 'all'",
    "pygments >=2.8 ; extra == 'all'",
    "tabulate ==0.8.9 ; extra == 'all'",
    "yarl >=1.8.1 ; extra == 'all'",
    "PyYAML >=5.4 ; extra == 'console'",
    "appdirs >=1.4.4 ; extra == 'console'",
    "prompt-toolkit >=3 ; extra == 'console'",
    "pygments >=2.8 ; extra == 'console'",
    "tabulate ==0.8.9 ; extra == 'console'",
    "sphinx >=4.0.1 ; extra == 'docs'",
    "jsonpath-python >=1.0.5 ; extra == 'genericjsonapi'",
    "prison >=0.2.1 ; extra == 'genericjsonapi'",
    "yarl >=1.8.1 ; extra == 'genericjsonapi'",
    "defusedxml >=0.7.1 ; extra == 'genericxmlapi'",
    "prison >=0.2.1 ; extra == 'genericxmlapi'",
    "yarl >=1.8.1 ; extra == 'genericxmlapi'",
    "jsonpath-python >=1.0.5 ; extra == 'githubapi'",
    "google-auth >=1.23.0 ; extra == 'gsheetsapi'",
    "holidays >=0.23 ; extra == 'holidaysmemory'",
    "beautifulsoup4 >=4.11.1 ; extra == 'htmltableapi'",
    "html5lib >=1.1 ; extra == 'htmltableapi'",
    "pandas >=1.2.2 ; extra == 'htmltableapi'",
    "pandas >=1.2.2 ; extra == 'pandasmemory'",
    "boto3 >=1.24.28 ; extra == 's3selectapi'",
    "psutil >=5.8.0 ; extra == 'systemapi'",
    "PyYAML >=5.4 ; extra == 'testing'",
    "appdirs >=1.4.4 ; extra == 'testing'",
    "beautifulsoup4 >=4.11.1 ; extra == 'testing'",
    "boto3 >=1.24.28 ; extra == 'testing'",
    "codespell >=2.1.0 ; extra == 'testing'",
    "defusedxml >=0.7.1 ; extra == 'testing'",
    "dill >=0.3.6 ; extra == 'testing'",
    "freezegun >=1.1.0 ; extra == 'testing'",
    "google-auth >=1.23.0 ; extra == 'testing'",
    "holidays >=0.23 ; extra == 'testing'",
    "html5lib >=1.1 ; extra == 'testing'",
    "jsonpath-python >=1.0.5 ; extra == 'testing'",
    "pandas >=1.2.2 ; extra == 'testing'",
    "pip-tools >=6.4.0 ; extra == 'testing'",
    "pre-commit >=2.13.0 ; extra == 'testing'",
    "prison >=0.2.1 ; extra == 'testing'",
    "prompt-toolkit >=3 ; extra == 'testing'",
    "psutil >=5.8.0 ; extra == 'testing'",
    "pyfakefs >=4.3.3 ; extra == 'testing'",
    "pygments >=2.8 ; extra == 'testing'",
    "pylint >=2.16.2 ; extra == 'testing'",
    "pytest-cov >=2.11.1 ; extra == 'testing'",
    "pytest-integration ==0.2.2 ; extra == 'testing'",
    "pytest-mock >=3.5.1 ; extra == 'testing'",
    "pytest >=7.2.0 ; extra == 'testing'",
    "requests-mock >=1.8.0 ; extra == 'testing'",
    "tabulate ==0.8.9 ; extra == 'testing'",
    "yarl >=1.8.1 ; extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "making it easy to query apis via sql",
  "version": "1.2.12",
  "releases": [],
  "developers": [
    "beto_dealmeida",
    "roberto@dealmeida.net"
  ],
  "kwds": "shillelagh badge svg fury pyversions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_shillelagh",
  "homepage": "https://github.com/betodealmeida/shillelagh/",
  "release_count": 64,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_apsw",
    "pypi_beautifulsoup4",
    "pypi_boto3",
    "pypi_codespell",
    "pypi_defusedxml",
    "pypi_dill",
    "pypi_freezegun",
    "pypi_google_auth",
    "pypi_greenlet",
    "pypi_holidays",
    "pypi_html5lib",
    "pypi_importlib_metadata",
    "pypi_jsonpath_python",
    "pypi_packaging",
    "pypi_pandas",
    "pypi_pip_tools",
    "pypi_pre_commit",
    "pypi_prison",
    "pypi_prompt_toolkit",
    "pypi_psutil",
    "pypi_pyfakefs",
    "pypi_pygments",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_integration",
    "pypi_pytest_mock",
    "pypi_python_dateutil",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_requests_cache",
    "pypi_requests_mock",
    "pypi_sphinx",
    "pypi_sqlalchemy",
    "pypi_tabulate",
    "pypi_typing_extensions",
    "pypi_yarl"
  ]
}
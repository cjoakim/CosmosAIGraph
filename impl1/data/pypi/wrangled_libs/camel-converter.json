{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# camel converter\n\n[![ci status](https://github.com/sanders41/camel-converter/workflows/ci/badge.svg?branch=main&event=push)](https://github.com/sanders41/camel-converter/actions?query=workflow%3ci+branch%3amain+event%3apush)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/sanders41/camel-converter/main.svg)](https://results.pre-commit.ci/latest/github/sanders41/camel-converter/main)\n[![coverage](https://codecov.io/github/sanders41/camel-converter/coverage.svg?branch=main)](https://codecov.io/gh/sanders41/camel-converter)\n[![pypi version](https://badge.fury.io/py/camel-converter.svg)](https://badge.fury.io/py/camel-converter)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/camel-converter?color=5cc141)](https://github.com/sanders41/camel-converter)\n\nin json keys are frequently in camelcase format, while variable names in python are typically\nsnake_case. the purpose of this pacakgae is to help convert between the two formats.\n\n## usage\n\n- to convert from camel case to snake case:\n\n  ```py\n  from camel_converter import to_snake\n\n  snake = to_snake(\"mystring\")\n  ```\n\n  this will convert `mystring` into `my_string`\n\n- to convert a dictonary's keys from camel case to snake case:\n\n  ```py\n  from camel_converter import dict_to_snake\n\n  snake = dict_to_snake({\"mystring\": \"val 1\"})\n  ```\n\n  this will convert `{\"mystring\": \"val 1\"}` into `{\"my_string\": \"val 1\"}`. non-string keys will be\n  left unchanged.\n\n  this is also available as a decorator for functions that return a dictionary.\n\n  ```py\n  from camel_converter.decorators import dict_to_snake\n\n  @dict_to_snake\n  def my_func() -> dict[str, str]:\n      return {\"mystring\": \"val 1\"}\n\n  snake = my_func()\n  ```\n\n  `my_func` will return `{\"my_string\": \"val 1\"}`. non-string keys will be\n  left unchanged.\n\n- to convert from snake case to camel case:\n\n  ```py\n  from camel_converter import to_camel\n\n  camel = to_camel(\"my_string\")\n  ```\n\n  this will convert `my_string` into `mystring`\n\n- to convert from a dictionary's keys from snake case to camel case:\n\n  ```py\n  from camel_converter import dict_to_camel\n\n  camel = to_camel({\"my_string\": \"val 1\"})\n  ```\n\n  this will convert `{\"my_string\": \"val 1\"}` into `{\"mystring\": \"val 1\"}` non-string keys will be\n  left unchanged.\n\n  this is also available as a decorator for functions that return a dictionary.\n\n  ```py\n  from camel_converter.decorators import dict_to_camel\n\n  @dict_to_camel\n  def my_func() -> dict[str, str]:\n      return {\"my_string\": \"val 1\"}\n\n  camel = my_func()\n  ```\n\n  `my_func` will return `{\"mystring\": \"val 1\"}`. non-string keys will be\n  left unchanged.\n\n- to convert from snake to pascal case:\n\n  ```py\n  from camel_converter import to_pascal\n\n  pascal = to_pascal(\"my_string\")\n  ```\n\n  this will convert `my_string` into `mystring`\n\n- to convert from a dictionary's keys from snake case to pascal case:\n\n  ```py\n  from camel_converter import dict_to_pascal\n\n  pascal = to_pascal({\"my_string\": \"val 1\"})\n  ```\n\n  this will convert `{\"my_string\": \"val 1\"}` into `{\"mystring\": \"val 1\"}` non-string keys will be\n  left unchanged.\n\n  this is also available as a decorator for functions that return a dictionary.\n\n  ```py\n  from camel_converter.decorators import dict_to_pascal\n\n  @dict_to_pascal\n  def my_func() -> dict[str, str]:\n      return {\"my_string\": \"val 1\"}\n\n  pascal = my_func()\n  ```\n\n  `my_func` will return `{\"mystring\": \"val 1\"}`. non-string keys will be\n  left unchanged.\n\n### optional extras\n\nan optional extra is provided for [pydantic](https://pydantic-docs.helpmanual.io/) that provides a\nbase class to automatically convert between snake case and camel case. to use this pydantic class\ninstall camel converter with:\n\n```sh\npip install camel-converter[pydantic]\n```\n\nthen your pydantic classes can inherit from camelbase.\n\n```py\nfrom camel_converter.pydantic_base import camelbase\n\n\nclass mymodel(camelbase):\n    test_field: str\n\n\nmy_data = mymodel(**{\"testfield\": \"my value\"})\nprint(my_data.test_field)\n```\n\nwill result in `my value` being printed.\n\nwith setting up your model in this way `myfield` from the source, i.e. json data, will map to `my_field` in your model.\n\n## contributing\n\nif you are interested in contributing to this project please see our [contributing guide](contributing.md)\n",
  "docs_url": null,
  "keywords": "python,pydantic",
  "license": "mit",
  "name": "camel-converter",
  "package_url": "https://pypi.org/project/camel-converter/",
  "project_url": "https://pypi.org/project/camel-converter/",
  "project_urls": {
    "Documentation": "https://github.com/sanders41/camel-converter",
    "Homepage": "https://github.com/sanders41/camel-converter",
    "Repository": "https://github.com/sanders41/camel-converter"
  },
  "release_url": "https://pypi.org/project/camel-converter/3.1.1/",
  "requires_dist": [
    "pydantic (>=1.8.2) ; extra == \"pydantic\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "converts a string from snake case to camel case or camel case to snake case",
  "version": "3.1.1",
  "releases": [],
  "developers": [
    "paul_sanders",
    "psanders1@gmail.com"
  ],
  "kwds": "camel_converter dict_to_camel to_camel camel camelbase",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_camel_converter",
  "homepage": "https://github.com/sanders41/camel-converter",
  "release_count": 22,
  "dependency_ids": [
    "pypi_pydantic"
  ]
}
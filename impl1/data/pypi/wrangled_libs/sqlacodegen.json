{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: database",
    "topic :: software development :: code generators"
  ],
  "description": "this is a tool that reads the structure of an existing database and generates the appropriate\nsqlalchemy model code, using the declarative style if possible.\n\nthis tool was written as a replacement for `sqlautocode`_, which was suffering from several issues\n(including, but not limited to, incompatibility with python 3 and the latest sqlalchemy version).\n\n.. _sqlautocode: http://code.google.com/p/sqlautocode/\n\n\nfeatures\n========\n\n* supports sqlalchemy 0.8.x - 1.3.x\n* produces declarative code that almost looks like it was hand written\n* produces `pep 8`_ compliant code\n* accurately determines relationships, including many-to-many, one-to-one\n* automatically detects joined table inheritance\n* excellent test coverage\n\n.. _pep 8: http://www.python.org/dev/peps/pep-0008/\n\n\nusage instructions\n==================\n\ninstallation\n------------\n\nto install, do::\n\n    pip install sqlacodegen\n\n\nexample usage\n-------------\n\nat the minimum, you have to give sqlacodegen a database url. the url is passed directly to\nsqlalchemy's `create_engine()`_ method so please refer to `sqlalchemy's documentation`_ for\ninstructions on how to construct a proper url.\n\nexamples::\n\n    sqlacodegen postgresql:///some_local_db\n    sqlacodegen mysql+oursql://user:password@localhost/dbname\n    sqlacodegen sqlite:///database.db\n\nto see the full list of options::\n\n    sqlacodegen --help\n\n\n.. _create_engine(): http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine\n.. _sqlalchemy's documentation: http://docs.sqlalchemy.org/en/latest/core/engines.html\n\n\nwhy does it sometimes generate classes and sometimes tables?\n------------------------------------------------------------\n\nunless the ``--noclasses`` option is used, sqlacodegen tries to generate declarative model classes\nfrom each table. there are two circumstances in which a ``table`` is generated instead:\n\n* the table has no primary key constraint (which is required by sqlalchemy for every model class)\n* the table is an association table between two other tables (see below for the specifics)\n\n\nmodel class naming logic\n------------------------\n\nthe table name (which is assumed to be in english) is converted to singular form using the\n\"inflect\" library. then, every underscore is removed while transforming the next letter to upper\ncase. for example, ``sales_invoices`` becomes ``salesinvoice``.\n\n\nrelationship detection logic\n----------------------------\n\nrelationships are detected based on existing foreign key constraints as follows:\n\n* **many-to-one**: a foreign key constraint exists on the table\n* **one-to-one**: same as **many-to-one**, but a unique constraint exists on the column(s) involved\n* **many-to-many**: an association table is found to exist between two tables\n\na table is considered an association table if it satisfies all of the following conditions:\n\n#. has exactly two foreign key constraints\n#. all its columns are involved in said constraints\n\n\nrelationship naming logic\n-------------------------\n\nrelationships are typically named based on the opposite class name. for example, if an ``employee``\nclass has a column named ``employer`` which has a foreign key to ``company.id``, the relationship\nis named ``company``.\n\na special case for single column many-to-one and one-to-one relationships, however, is if the\ncolumn is named like ``employer_id``. then the relationship is named ``employer`` due to that\n``_id`` suffix.\n\nif more than one relationship would be created with the same name, the latter ones are appended\nnumeric suffixes, starting from 1.\n\n\ngetting help\n============\n\nif you have problems or other questions, you can either:\n\n* ask on the `sqlalchemy google group`_, or\n* ask on the ``#sqlalchemy`` channel on `freenode irc`_\n\n.. _sqlalchemy google group: http://groups.google.com/group/sqlalchemy\n.. _freenode irc: http://freenode.net/irc_servers.shtml\n",
  "docs_url": null,
  "keywords": "sqlalchemy",
  "license": "mit",
  "name": "sqlacodegen",
  "package_url": "https://pypi.org/project/sqlacodegen/",
  "project_url": "https://pypi.org/project/sqlacodegen/",
  "project_urls": {
    "Bug Tracker": "https://github.com/agronholm/sqlacodegen/issues",
    "Source Code": "https://github.com/agronholm/sqlacodegen"
  },
  "release_url": "https://pypi.org/project/sqlacodegen/2.3.0.post1/",
  "requires_dist": [
    "SQLAlchemy (<2.0,>=0.9.0)",
    "inflect (>=0.2.0)",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "psycopg2-binary ; extra == 'test'",
    "mysql-connector-python ; extra == 'test'"
  ],
  "requires_python": "!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,>=2.7",
  "summary": "automatic model code generator for sqlalchemy",
  "version": "2.3.0.post1",
  "releases": [],
  "developers": [
    "alex.gronholm@nextday.fi"
  ],
  "kwds": "_sqlalchemy sqlalchemy _sqlautocode sqlautocode sqlacodegen",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sqlacodegen",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": [
    "pypi_inflect",
    "pypi_mysql_connector_python",
    "pypi_psycopg2_binary",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_sqlalchemy"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: pl/sql",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "a sql query builder api for python\npypika - python query builder\n=============================\n\n.. _intro_start:\n\n|buildstatus|  |coveragestatus|  |codacy|  |docs|  |pypi|  |license|\n\nabstract\n--------\n\nwhat is |brand|?\n\n|brand| is a python api for building sql queries. the motivation behind |brand| is to provide a simple interface for\nbuilding sql queries without limiting the flexibility of handwritten sql. designed with data analysis in mind, |brand|\nleverages the builder design pattern to construct queries to avoid messy string formatting and concatenation. it is also\neasily extended to take full advantage of specific features of sql database vendors.\n\nwhat are the design goals for |brand|?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n|brand| is a fast, expressive and flexible way to replace handwritten sql (or even orm for the courageous souls amongst you).\nvalidation of sql correctness is not an explicit goal of |brand|. with such a large number of\nsql database vendors providing a robust validation of input data is difficult. instead you are encouraged to check inputs you provide to |brand| or appropriately handle errors raised from\nyour sql database - just as you would have if you were writing sql yourself.\n\n.. _intro_end:\n\nread the docs: http://pypika.readthedocs.io/en/latest/\n\ninstallation\n------------\n\n.. _installation_start:\n\n|brand| supports python ``3.6+``.  it may also work on pypy, cython, and jython, but is not being tested for these versions.\n\nto install |brand| run the following command:\n\n.. code-block:: bash\n\n    pip install pypika\n\n\n.. _installation_end:\n\n\ntutorial\n--------\n\n.. _tutorial_start:\n\nthe main classes in pypika are ``pypika.query``, ``pypika.table``, and ``pypika.field``.\n\n.. code-block:: python\n\n    from pypika import query, table, field\n\n\nselecting data\n^^^^^^^^^^^^^^\n\nthe entry point for building queries is ``pypika.query``.  in order to select columns from a table, the table must\nfirst be added to the query.  for simple queries with only one table, tables and columns can be references using\nstrings.  for more sophisticated queries a ``pypika.table`` must be used.\n\n.. code-block:: python\n\n    q = query.from_('customers').select('id', 'fname', 'lname', 'phone')\n\nto convert the query into raw sql, it can be cast to a string.\n\n.. code-block:: python\n\n    str(q)\n\nalternatively, you can use the `query.get_sql()` function:\n\n.. code-block:: python\n\n    q.get_sql()\n\n\ntables, columns, schemas, and databases\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nin simple queries like the above example, columns in the \"from\" table can be referenced by passing string names into\nthe ``select`` query builder function. in more complex examples, the ``pypika.table`` class should be used. columns can be\nreferenced as attributes on instances of ``pypika.table``.\n\n.. code-block:: python\n\n    from pypika import table, query\n\n    customers = table('customers')\n    q = query.from_(customers).select(customers.id, customers.fname, customers.lname, customers.phone)\n\nboth of the above examples result in the following sql:\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers\n\nan alias for the table can be given using the ``.as_`` function on ``pypika.table``\n\n.. code-block:: sql\n\n    customers = table('x_view_customers').as_('customers')\n    q = query.from_(customers).select(customers.id, customers.phone)\n\n.. code-block:: sql\n\n    select id,phone from x_view_customers customers\n\na schema can also be specified. tables can be referenced as attributes on the schema.\n\n.. code-block:: sql\n\n    from pypika import table, query, schema\n\n    views = schema('views')\n    q = query.from_(views.customers).select(customers.id, customers.phone)\n\n.. code-block:: sql\n\n    select id,phone from views.customers\n\nalso references to databases can be used. schemas can be referenced as attributes on the database.\n\n.. code-block:: sql\n\n    from pypika import table, query, database\n\n    my_db = database('my_db')\n    q = query.from_(my_db.analytics.customers).select(customers.id, customers.phone)\n\n.. code-block:: sql\n\n    select id,phone from my_db.analytics.customers\n\n\nresults can be ordered by using the following syntax:\n\n.. code-block:: python\n\n    from pypika import order\n    query.from_('customers').select('id', 'fname', 'lname', 'phone').orderby('id', order=order.desc)\n\nthis results in the following sql:\n\n.. code-block:: sql\n\n    select \"id\",\"fname\",\"lname\",\"phone\" from \"customers\" order by \"id\" desc\n\narithmetic\n\"\"\"\"\"\"\"\"\"\"\n\narithmetic expressions can also be constructed using pypika.  operators such as `+`, `-`, `*`, and `/` are implemented\nby ``pypika.field`` which can be used simply with a ``pypika.table`` or directly.\n\n.. code-block:: python\n\n    from pypika import field\n\n    q = query.from_('account').select(\n        field('revenue') - field('cost')\n    )\n\n.. code-block:: sql\n\n    select revenue-cost from accounts\n\nusing ``pypika.table``\n\n.. code-block:: python\n\n    accounts = table('accounts')\n    q = query.from_(accounts).select(\n        accounts.revenue - accounts.cost\n    )\n\n.. code-block:: sql\n\n    select revenue-cost from accounts\n\nan alias can also be used for fields and expressions.\n\n.. code-block:: sql\n\n    q = query.from_(accounts).select(\n        (accounts.revenue - accounts.cost).as_('profit')\n    )\n\n.. code-block:: sql\n\n    select revenue-cost profit from accounts\n\nmore arithmetic examples\n\n.. code-block:: python\n\n    table = table('table')\n    q = query.from_(table).select(\n        table.foo + table.bar,\n        table.foo - table.bar,\n        table.foo * table.bar,\n        table.foo / table.bar,\n        (table.foo+table.bar) / table.fiz,\n    )\n\n.. code-block:: sql\n\n    select foo+bar,foo-bar,foo*bar,foo/bar,(foo+bar)/fiz from table\n\n\nfiltering\n\"\"\"\"\"\"\"\"\"\n\nqueries can be filtered with ``pypika.criterion`` by using equality or inequality operators\n\n.. code-block:: python\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id, customers.fname, customers.lname, customers.phone\n    ).where(\n        customers.lname == 'mustermann'\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers where lname='mustermann'\n\nquery methods such as select, where, groupby, and orderby can be called multiple times.  multiple calls to the where\nmethod will add additional conditions as\n\n.. code-block:: python\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id, customers.fname, customers.lname, customers.phone\n    ).where(\n        customers.fname == 'max'\n    ).where(\n        customers.lname == 'mustermann'\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers where fname='max' and lname='mustermann'\n\nfilters such as in and between are also supported\n\n.. code-block:: python\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id,customers.fname\n    ).where(\n        customers.age[18:65] & customers.status.isin(['new', 'active'])\n    )\n\n.. code-block:: sql\n\n    select id,fname from customers where age between 18 and 65 and status in ('new','active')\n\nfiltering with complex criteria can be created using boolean symbols ``&``, ``|``, and ``^``.\n\nand\n\n.. code-block:: python\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id, customers.fname, customers.lname, customers.phone\n    ).where(\n        (customers.age >= 18) & (customers.lname == 'mustermann')\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers where age>=18 and lname='mustermann'\n\nor\n\n.. code-block:: python\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id, customers.fname, customers.lname, customers.phone\n    ).where(\n        (customers.age >= 18) | (customers.lname == 'mustermann')\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers where age>=18 or lname='mustermann'\n\nxor\n\n.. code-block:: python\n\n customers = table('customers')\n q = query.from_(customers).select(\n     customers.id, customers.fname, customers.lname, customers.phone\n ).where(\n     (customers.age >= 18) ^ customers.is_registered\n )\n\n.. code-block:: sql\n\n    select id,fname,lname,phone from customers where age>=18 xor is_registered\n\n\nconvenience methods\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nin the `criterion` class, there are the static methods `any` and `all` that allow building chains and and or expressions with a list of terms.\n\n.. code-block:: python\n\n    from pypika import criterion\n\n    customers = table('customers')\n    q = query.from_(customers).select(\n        customers.id,\n        customers.fname\n    ).where(\n        criterion.all([\n            customers.is_registered,\n            customers.age >= 18,\n            customers.lname == \"jones\",\n        ])\n    )\n\n.. code-block:: sql\n\n    select id,fname from customers where is_registered and age>=18 and lname = \"jones\"\n\n\ngrouping and aggregating\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ngrouping allows for aggregated results and works similar to ``select`` clauses.\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    customers = table('customers')\n    q = query \\\n        .from_(customers) \\\n        .where(customers.age >= 18) \\\n        .groupby(customers.id) \\\n        .select(customers.id, fn.sum(customers.revenue))\n\n.. code-block:: sql\n\n    select id,sum(\"revenue\") from \"customers\" where \"age\">=18 group by \"id\"\n\nafter adding a ``group by`` clause to a query, the ``having`` clause becomes available.  the method\n``query.having()`` takes a ``criterion`` parameter similar to the method ``query.where()``.\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    payments = table('payments')\n    q = query \\\n        .from_(payments) \\\n        .where(payments.transacted[date(2015, 1, 1):date(2016, 1, 1)]) \\\n        .groupby(payments.customer_id) \\\n        .having(fn.sum(payments.total) >= 1000) \\\n        .select(payments.customer_id, fn.sum(payments.total))\n\n.. code-block:: sql\n\n    select customer_id,sum(total) from payments\n    where transacted between '2015-01-01' and '2016-01-01'\n    group by customer_id having sum(total)>=1000\n\n\njoining tables and subqueries\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ntables and subqueries can be joined to any query using the ``query.join()`` method.  joins can be performed with either\na ``using`` or ``on`` clauses.  the ``using`` clause can be used when both tables/subqueries contain the same field and\nthe ``on`` clause can be used with a criterion. to perform a join, ``...join()`` can be chained but then must be\nfollowed immediately by ``...on(<criterion>)`` or ``...using(*field)``.\n\n\njoin types\n~~~~~~~~~~\n\nall join types are supported by |brand|.\n\n.. code-block:: python\n\n    query \\\n        .from_(base_table)\n        ...\n        .join(join_table, jointype.left)\n        ...\n\n\n.. code-block:: python\n\n    query \\\n        .from_(base_table)\n        ...\n        .left_join(join_table) \\\n        .left_outer_join(join_table) \\\n        .right_join(join_table) \\\n        .right_outer_join(join_table) \\\n        .inner_join(join_table) \\\n        .outer_join(join_table) \\\n        .full_outer_join(join_table) \\\n        .cross_join(join_table) \\\n        .hash_join(join_table) \\\n        ...\n\nsee the list of join types here ``pypika.enums.jointypes``\n\nexample of a join using `on`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    history, customers = tables('history', 'customers')\n    q = query \\\n        .from_(history) \\\n        .join(customers) \\\n        .on(history.customer_id == customers.id) \\\n        .select(history.star) \\\n        .where(customers.id == 5)\n\n\n.. code-block:: sql\n\n    select \"history\".* from \"history\" join \"customers\" on \"history\".\"customer_id\"=\"customers\".\"id\" where \"customers\".\"id\"=5\n\nas a shortcut, the ``query.join().on_field()`` function is provided for joining the (first) table in the ``from`` clause\nwith the joined table when the field name(s) are the same in both tables.\n\nexample of a join using `on`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    history, customers = tables('history', 'customers')\n    q = query \\\n        .from_(history) \\\n        .join(customers) \\\n        .on_field('customer_id', 'group') \\\n        .select(history.star) \\\n        .where(customers.group == 'a')\n\n\n.. code-block:: sql\n\n    select \"history\".* from \"history\" join \"customers\" on \"history\".\"customer_id\"=\"customers\".\"customer_id\" and \"history\".\"group\"=\"customers\".\"group\" where \"customers\".\"group\"='a'\n\n\nexample of a join using `using`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    history, customers = tables('history', 'customers')\n    q = query \\\n        .from_(history) \\\n        .join(customers) \\\n        .using('customer_id') \\\n        .select(history.star) \\\n        .where(customers.id == 5)\n\n\n.. code-block:: sql\n\n    select \"history\".* from \"history\" join \"customers\" using \"customer_id\" where \"customers\".\"id\"=5\n\n\nexample of a correlated subquery in the `select`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    history, customers = tables('history', 'customers')\n    last_purchase_at = query.from_(history).select(\n        history.purchase_at\n    ).where(history.customer_id==customers.customer_id).orderby(\n        history.purchase_at, order=order.desc\n    ).limit(1)\n    q = query.from_(customers).select(\n        customers.id, last_purchase_at.as_('last_purchase_at')\n    )\n\n\n.. code-block:: sql\n\n    select\n      \"id\",\n      (select \"history\".\"purchase_at\"\n       from \"history\"\n       where \"history\".\"customer_id\" = \"customers\".\"customer_id\"\n       order by \"history\".\"purchase_at\" desc\n       limit 1) \"last_purchase_at\"\n    from \"customers\"\n\n\nunions\n\"\"\"\"\"\"\n\nboth ``union`` and ``union all`` are supported. ``union distinct`` is synonomous with \"union`` so |brand| does not\nprovide a separate function for it.  unions require that queries have the same number of ``select`` clauses so\ntrying to cast a unioned query to string will throw a ``setoperationexception`` if the column sizes are mismatched.\n\nto create a union query, use either the ``query.union()`` method or `+` operator with two query instances. for a\nunion all, use ``query.union_all()`` or the `*` operator.\n\n.. code-block:: python\n\n    provider_a, provider_b = tables('provider_a', 'provider_b')\n    q = query.from_(provider_a).select(\n        provider_a.created_time, provider_a.foo, provider_a.bar\n    ) + query.from_(provider_b).select(\n        provider_b.created_time, provider_b.fiz, provider_b.buz\n    )\n\n.. code-block:: sql\n\n    select \"created_time\",\"foo\",\"bar\" from \"provider_a\" union select \"created_time\",\"fiz\",\"buz\" from \"provider_b\"\n\nintersect\n\"\"\"\"\"\"\"\"\"\n\n``intersect`` is supported. intersects require that queries have the same number of ``select`` clauses so\ntrying to cast a intersected query to string will throw a ``setoperationexception`` if the column sizes are mismatched.\n\nto create a intersect query, use the ``query.intersect()`` method.\n\n.. code-block:: python\n\n    provider_a, provider_b = tables('provider_a', 'provider_b')\n    q = query.from_(provider_a).select(\n        provider_a.created_time, provider_a.foo, provider_a.bar\n    )\n    r = query.from_(provider_b).select(\n        provider_b.created_time, provider_b.fiz, provider_b.buz\n    )\n    intersected_query = q.intersect(r)\n\n.. code-block:: sql\n\n    select \"created_time\",\"foo\",\"bar\" from \"provider_a\" intersect select \"created_time\",\"fiz\",\"buz\" from \"provider_b\"\n\nminus\n\"\"\"\"\"\n\n``minus`` is supported. minus require that queries have the same number of ``select`` clauses so\ntrying to cast a minus query to string will throw a ``setoperationexception`` if the column sizes are mismatched.\n\nto create a minus query, use either the ``query.minus()`` method or `-` operator with two query instances.\n\n.. code-block:: python\n\n    provider_a, provider_b = tables('provider_a', 'provider_b')\n    q = query.from_(provider_a).select(\n        provider_a.created_time, provider_a.foo, provider_a.bar\n    )\n    r = query.from_(provider_b).select(\n        provider_b.created_time, provider_b.fiz, provider_b.buz\n    )\n    minus_query = q.minus(r)\n\n    (or)\n\n    minus_query = query.from_(provider_a).select(\n        provider_a.created_time, provider_a.foo, provider_a.bar\n    ) - query.from_(provider_b).select(\n        provider_b.created_time, provider_b.fiz, provider_b.buz\n    )\n\n.. code-block:: sql\n\n    select \"created_time\",\"foo\",\"bar\" from \"provider_a\" minus select \"created_time\",\"fiz\",\"buz\" from \"provider_b\"\n\nexcept\n\"\"\"\"\"\"\n\n``except`` is supported. minus require that queries have the same number of ``select`` clauses so\ntrying to cast a except query to string will throw a ``setoperationexception`` if the column sizes are mismatched.\n\nto create a except query, use the ``query.except_of()`` method.\n\n.. code-block:: python\n\n    provider_a, provider_b = tables('provider_a', 'provider_b')\n    q = query.from_(provider_a).select(\n        provider_a.created_time, provider_a.foo, provider_a.bar\n    )\n    r = query.from_(provider_b).select(\n        provider_b.created_time, provider_b.fiz, provider_b.buz\n    )\n    minus_query = q.except_of(r)\n\n.. code-block:: sql\n\n    select \"created_time\",\"foo\",\"bar\" from \"provider_a\" except select \"created_time\",\"fiz\",\"buz\" from \"provider_b\"\n\ndate, time, and intervals\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nusing ``pypika.interval``, queries can be constructed with date arithmetic.  any combination of intervals can be\nused except for weeks and quarters, which must be used separately and will ignore any other values if selected.\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    fruits = tables('fruits')\n    q = query.from_(fruits) \\\n        .select(fruits.id, fruits.name) \\\n        .where(fruits.harvest_date + interval(months=1) < fn.now())\n\n.. code-block:: sql\n\n    select id,name from fruits where harvest_date+interval 1 month<now()\n\n\ntuples\n\"\"\"\"\"\"\n\ntuples are supported through the class ``pypika.tuple`` but also through the native python tuple wherever possible.\ntuples can be used with ``pypika.criterion`` in **where** clauses for pairwise comparisons.\n\n.. code-block:: python\n\n    from pypika import query, tuple\n\n    q = query.from_(self.table_abc) \\\n        .select(self.table_abc.foo, self.table_abc.bar) \\\n        .where(tuple(self.table_abc.foo, self.table_abc.bar) == tuple(1, 2))\n\n.. code-block:: sql\n\n    select \"foo\",\"bar\" from \"abc\" where (\"foo\",\"bar\")=(1,2)\n\nusing ``pypika.tuple`` on both sides of the comparison is redundant and |brand| supports native python tuples.\n\n.. code-block:: python\n\n    from pypika import query, tuple\n\n    q = query.from_(self.table_abc) \\\n        .select(self.table_abc.foo, self.table_abc.bar) \\\n        .where(tuple(self.table_abc.foo, self.table_abc.bar) == (1, 2))\n\n.. code-block:: sql\n\n    select \"foo\",\"bar\" from \"abc\" where (\"foo\",\"bar\")=(1,2)\n\ntuples can be used in **in** clauses.\n\n.. code-block:: python\n\n    query.from_(self.table_abc) \\\n            .select(self.table_abc.foo, self.table_abc.bar) \\\n            .where(tuple(self.table_abc.foo, self.table_abc.bar).isin([(1, 1), (2, 2), (3, 3)]))\n\n.. code-block:: sql\n\n    select \"foo\",\"bar\" from \"abc\" where (\"foo\",\"bar\") in ((1,1),(2,2),(3,3))\n\n\nstrings functions\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nthere are several string operations and function wrappers included in |brand|.  function wrappers can be found in the\n``pypika.functions`` package.  in addition, `like` and `regex` queries are supported as well.\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    customers = tables('customers')\n    q = query.from_(customers).select(\n        customers.id,\n        customers.fname,\n        customers.lname,\n    ).where(\n        customers.lname.like('mc%')\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname from customers where lname like 'mc%'\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    customers = tables('customers')\n    q = query.from_(customers).select(\n        customers.id,\n        customers.fname,\n        customers.lname,\n    ).where(\n        customers.lname.regex(r'^[abc][a-za-z]+&')\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname from customers where lname regex '^[abc][a-za-z]+&';\n\n\n.. code-block:: python\n\n    from pypika import functions as fn\n\n    customers = tables('customers')\n    q = query.from_(customers).select(\n        customers.id,\n        fn.concat(customers.fname, ' ', customers.lname).as_('full_name'),\n    )\n\n.. code-block:: sql\n\n    select id,concat(fname, ' ', lname) full_name from customers\n\n\ncustom functions\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ncustom functions allows us to use any function on queries, as some functions are not covered by pypika as default, we can appeal\nto custom functions.\n\n.. code-block:: python\n\n    from pypika import customfunction\n\n    customers = tables('customers')\n    datediff = customfunction('date_diff', ['interval', 'start_date', 'end_date'])\n\n    q = query.from_(customers).select(\n        customers.id,\n        customers.fname,\n        customers.lname,\n        datediff('day', customers.created_date, customers.updated_date)\n    )\n\n.. code-block:: sql\n\n    select id,fname,lname,date_diff('day',created_date,updated_date) from customers\n\ncase statements\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\ncase statements allow fow a number of conditions to be checked sequentially and return a value for the first condition\nmet or otherwise a default value.  the case object can be used to chain conditions together along with their output\nusing the ``when`` method and to set the default value using ``else_``.\n\n\n.. code-block:: python\n\n    from pypika import case, functions as fn\n\n    customers = tables('customers')\n    q = query.from_(customers).select(\n        customers.id,\n        case()\n           .when(customers.fname == \"tom\", \"it was tom\")\n           .when(customers.fname == \"john\", \"it was john\")\n           .else_(\"it was someone else.\").as_('who_was_it')\n    )\n\n\n.. code-block:: sql\n\n    select \"id\",case when \"fname\"='tom' then 'it was tom' when \"fname\"='john' then 'it was john' else 'it was someone else.' end \"who_was_it\" from \"customers\"\n\n\nwith clause\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nwith clause allows give a sub-query block a name, which can be referenced in several places within the main sql query.\nthe sql with clause is basically a drop-in replacement to the normal sub-query.\n\n.. code-block:: python\n\n    from pypika import table, aliasedquery, query\n\n    customers = table('customers')\n\n    sub_query = (query\n                .from_(customers)\n                .select('*'))\n\n    test_query = (query\n                .with_(sub_query, \"an_alias\")\n                .from_(aliasedquery(\"an_alias\"))\n                .select('*'))\n\nyou can use as much as `.with_()` as you want.\n\n.. code-block:: sql\n\n    with an_alias as (select * from \"customers\") select * from an_alias\n\n\ninserting data\n^^^^^^^^^^^^^^\n\ndata can be inserted into tables either by providing the values in the query or by selecting them through another query.\n\nby default, data can be inserted by providing values for all columns in the order that they are defined in the table.\n\ninsert with values\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = query.into(customers).insert(1, 'jane', 'doe', 'jane@example.com')\n\n.. code-block:: sql\n\n    insert into customers values (1,'jane','doe','jane@example.com')\n\n.. code-block:: python\n\n    customers =  table('customers')\n\n    q = customers.insert(1, 'jane', 'doe', 'jane@example.com')\n\n.. code-block:: sql\n\n    insert into customers values (1,'jane','doe','jane@example.com')\n\nmultiple rows of data can be inserted either by chaining the ``insert`` function or passing multiple tuples as args.\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = query.into(customers).insert(1, 'jane', 'doe', 'jane@example.com').insert(2, 'john', 'doe', 'john@example.com')\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = query.into(customers).insert((1, 'jane', 'doe', 'jane@example.com'),\n                                     (2, 'john', 'doe', 'john@example.com'))\n\ninsert with constraint violation handling\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nmysql\n~~~~~\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = mysqlquery.into(customers) \\\n        .insert(1, 'jane', 'doe', 'jane@example.com') \\\n        .on_duplicate_key_ignore())\n\n.. code-block:: sql\n\n    insert into `customers` values (1,'jane','doe','jane@example.com') on duplicate key ignore\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = mysqlquery.into(customers) \\\n        .insert(1, 'jane', 'doe', 'jane@example.com') \\\n        .on_duplicate_key_update(customers.email, values(customers.email))\n\n.. code-block:: sql\n\n    insert into `customers` values (1,'jane','doe','jane@example.com') on duplicate key update `email`=values(`email`)\n\n``.on_duplicate_key_update`` works similar to ``.set`` for updating rows, additionally it provides the ``values``\nwrapper to update to the value specified in the ``insert`` clause.\n\npostgresql\n~~~~~~~~~~\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = postgresqlquery.into(customers) \\\n        .insert(1, 'jane', 'doe', 'jane@example.com') \\\n        .on_conflict(customers.email) \\\n        .do_nothing()\n\n.. code-block:: sql\n\n    insert into \"customers\" values (1,'jane','doe','jane@example.com') on conflict (\"email\") do nothing\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = postgresqlquery.into(customers) \\\n        .insert(1, 'jane', 'doe', 'jane@example.com') \\\n        .on_conflict(customers.email) \\\n        .do_update(customers.email, 'bob@example.com')\n\n.. code-block:: sql\n\n    insert into \"customers\" values (1,'jane','doe','jane@example.com') on conflict (\"email\") do update set \"email\"='bob@example.com'\n\n\ninsert from a select sub-query\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: sql\n\n    insert into \"customers\" values (1,'jane','doe','jane@example.com'),(2,'john','doe','john@example.com')\n\n\nto specify the columns and the order, use the ``columns`` function.\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = query.into(customers).columns('id', 'fname', 'lname').insert(1, 'jane', 'doe')\n\n.. code-block:: sql\n\n    insert into customers (id,fname,lname) values (1,'jane','doe','jane@example.com')\n\n\ninserting data with a query works the same as querying data with the additional call to the ``into`` method in the\nbuilder chain.\n\n.. code-block:: python\n\n    customers, customers_backup = tables('customers', 'customers_backup')\n\n    q = query.into(customers_backup).from_(customers).select('*')\n\n.. code-block:: sql\n\n    insert into customers_backup select * from customers\n\n.. code-block:: python\n\n    customers, customers_backup = tables('customers', 'customers_backup')\n\n    q = query.into(customers_backup).columns('id', 'fname', 'lname')\n        .from_(customers).select(customers.id, customers.fname, customers.lname)\n\n.. code-block:: sql\n\n    insert into customers_backup select \"id\", \"fname\", \"lname\" from customers\n\nthe syntax for joining tables is the same as when selecting data\n\n.. code-block:: python\n\n    customers, orders, orders_backup = tables('customers', 'orders', 'orders_backup')\n\n    q = query.into(orders_backup).columns('id', 'address', 'customer_fname', 'customer_lname')\n        .from_(customers)\n        .join(orders).on(orders.customer_id == customers.id)\n        .select(orders.id, customers.fname, customers.lname)\n\n.. code-block:: sql\n\n   insert into \"orders_backup\" (\"id\",\"address\",\"customer_fname\",\"customer_lname\")\n   select \"orders\".\"id\",\"customers\".\"fname\",\"customers\".\"lname\" from \"customers\"\n   join \"orders\" on \"orders\".\"customer_id\"=\"customers\".\"id\"\n\nupdating data\n^^^^^^^^^^^^^^\npypika allows update queries to be constructed with or without where clauses.\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    query.update(customers).set(customers.last_login, '2017-01-01 10:00:00')\n\n    query.update(customers).set(customers.lname, 'smith').where(customers.id == 10)\n\n.. code-block:: sql\n\n    update \"customers\" set \"last_login\"='2017-01-01 10:00:00'\n\n    update \"customers\" set \"lname\"='smith' where \"id\"=10\n\nthe syntax for joining tables is the same as when selecting data\n\n.. code-block:: python\n\n    customers, profiles = tables('customers', 'profiles')\n\n    query.update(customers)\n         .join(profiles).on(profiles.customer_id == customers.id)\n         .set(customers.lname, profiles.lname)\n\n.. code-block:: sql\n\n   update \"customers\"\n   join \"profiles\" on \"profiles\".\"customer_id\"=\"customers\".\"id\"\n   set \"customers\".\"lname\"=\"profiles\".\"lname\"\n\nusing ``pypika.table`` alias to perform the update\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    customers.update()\n            .set(customers.lname, 'smith')\n            .where(customers.id == 10)\n\n.. code-block:: sql\n\n    update \"customers\" set \"lname\"='smith' where \"id\"=10\n\nusing ``limit`` for performing update\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    customers.update()\n            .set(customers.lname, 'smith')\n            .limit(2)\n\n.. code-block:: sql\n\n    update \"customers\" set \"lname\"='smith' limit 2\n\n\nparametrized queries\n^^^^^^^^^^^^^^^^^^^^\n\npypika allows you to use ``parameter(str)`` term as a placeholder for parametrized queries.\n\n.. code-block:: python\n\n    customers = table('customers')\n\n    q = query.into(customers).columns('id', 'fname', 'lname')\n        .insert(parameter(':1'), parameter(':2'), parameter(':3'))\n\n.. code-block:: sql\n\n    insert into customers (id,fname,lname) values (:1,:2,:3)\n\nthis allows you to build prepared statements, and/or avoid sql-injection related risks.\n\ndue to the mix of syntax for parameters, depending on connector/driver, it is required that you specify the\nparameter token explicitly or use one of the specialized parameter types per [pep-0249](https://www.python.org/dev/peps/pep-0249/#paramstyle):\n``qmarkparameter()``, ``numericparameter(int)``,  ``namedparameter(str)``, ``formatparameter()``, ``pyformatparameter(str)``\n\nan example of some common sql parameter styles used in python drivers are:\n\npostgresql:\n    ``$number`` or ``%s`` + ``:name`` (depending on driver)\nmysql:\n    ``%s``\nsqlite:\n    ``?``\nvertica:\n    ``:name``\noracle:\n    ``:number`` + ``:name``\nmssql:\n    ``%(name)s`` or ``:name`` + ``:number`` (depending on driver)\n\nyou can find out what parameter style is needed for dbapi compliant drivers here: https://www.python.org/dev/peps/pep-0249/#paramstyle or in the db driver documentation.\n\ntemporal support\n^^^^^^^^^^^^^^^^\n\ntemporal criteria can be added to the tables.\n\nselect\n\"\"\"\"\"\"\n\nhere is a select using system time.\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(t.for_(system_time.as_of('2020-01-01'))).select(\"*\")\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for system_time as of '2020-01-01'\n\nyou can also use between.\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(\n        t.for_(system_time.between('2020-01-01', '2020-02-01'))\n    ).select(\"*\")\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for system_time between '2020-01-01' and '2020-02-01'\n\nyou can also use a period range.\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(\n        t.for_(system_time.from_to('2020-01-01', '2020-02-01'))\n    ).select(\"*\")\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for system_time from '2020-01-01' to '2020-02-01'\n\nfinally you can select for all times:\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(t.for_(system_time.all_())).select(\"*\")\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for system_time all\n\na user defined period can also be used in the following manner.\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(\n        t.for_(t.valid_period.between('2020-01-01', '2020-02-01'))\n    ).select(\"*\")\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for \"valid_period\" between '2020-01-01' and '2020-02-01'\n\njoins\n\"\"\"\"\"\n\nwith joins, when the table object is used when specifying columns, it is\nimportant to use the table from which the temporal constraint was generated.\nthis is because `table(\"abc\")` is not the same table as `table(\"abc\").for_(...)`.\nthe following example demonstrates this.\n\n.. code-block:: python\n\n    t0 = table(\"abc\").for_(system_time.as_of('2020-01-01'))\n    t1 = table(\"efg\").for_(system_time.as_of('2020-01-01'))\n    query = (\n        query.from_(t0)\n        .join(t1)\n        .on(t0.foo == t1.bar)\n        .select(\"*\")\n    )\n\nthis produces:\n\n.. code-block:: sql\n\n    select * from \"abc\" for system_time as of '2020-01-01'\n    join \"efg\" for system_time as of '2020-01-01'\n    on \"abc\".\"foo\"=\"efg\".\"bar\"\n\nupdate & deletes\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nan update can be written as follows:\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.update(\n        t.for_portion(\n            system_time.from_to('2020-01-01', '2020-02-01')\n        )\n    ).set(\"foo\", \"bar\")\n\nthis produces:\n\n.. code-block:: sql\n\n    update \"abc\"\n    for portion of system_time from '2020-01-01' to '2020-02-01'\n    set \"foo\"='bar'\n\nhere is a delete:\n\n.. code-block:: python\n\n    t = table(\"abc\")\n    q = query.from_(\n        t.for_portion(t.valid_period.from_to('2020-01-01', '2020-02-01'))\n    ).delete()\n\nthis produces:\n\n.. code-block:: sql\n\n    delete from \"abc\"\n    for portion of \"valid_period\" from '2020-01-01' to '2020-02-01'\n\ncreating tables\n^^^^^^^^^^^^^^^\n\nthe entry point for creating tables is ``pypika.query.create_table``, which is used with the class ``pypika.column``.\nas with selecting data, first the table should be specified. this can be either a\nstring or a `pypika.table`. then the columns, and constraints. here's an example\nthat demonstrates much of the functionality.\n\n.. code-block:: python\n\n    stmt = query \\\n        .create_table(\"person\") \\\n        .columns(\n            column(\"id\", \"int\", nullable=false),\n            column(\"first_name\", \"varchar(100)\", nullable=false),\n            column(\"last_name\", \"varchar(100)\", nullable=false),\n            column(\"phone_number\", \"varchar(20)\", nullable=true),\n            column(\"status\", \"varchar(20)\", nullable=false, default=valuewrapper(\"new\")),\n            column(\"date_of_birth\", \"datetime\")) \\\n        .unique(\"last_name\", \"first_name\") \\\n        .primary_key(\"id\")\n\nthis produces:\n\n.. code-block:: sql\n\n    create table \"person\" (\n        \"id\" int not null,\n        \"first_name\" varchar(100) not null,\n        \"last_name\" varchar(100) not null,\n        \"phone_number\" varchar(20) null,\n        \"status\" varchar(20) not null default 'new',\n        \"date_of_birth\" datetime,\n        unique (\"last_name\",\"first_name\"),\n        primary key (\"id\")\n    )\n\nthere is also support for creating a table from a query.\n\n.. code-block:: python\n\n    stmt = query.create_table(\"names\").as_select(\n        query.from_(\"person\").select(\"last_name\", \"first_name\")\n    )\n\nthis produces:\n\n.. code-block:: sql\n\n        create table \"names\" as (select \"last_name\",\"first_name\" from \"person\")\n\n.. _tutorial_end:\n\n\n.. _license_start:\n\n\nlicense\n-------\n\ncopyright 2020 kayak germany, gmbh\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n\n\ncrafted with \u2665 in berlin.\n\n.. _license_end:\n\n\n.. _appendix_start:\n\n.. |brand| replace:: *pypika*\n\n.. _appendix_end:\n\n.. _available_badges_start:\n\n.. |buildstatus| image:: https://github.com/kayak/pypika/workflows/unit%20tests/badge.svg\n   :target: https://github.com/kayak/pypika/actions\n.. |coveragestatus| image:: https://coveralls.io/repos/kayak/pypika/badge.svg?branch=master\n   :target: https://coveralls.io/github/kayak/pypika?branch=master\n.. |codacy| image:: https://api.codacy.com/project/badge/grade/6d7e44e5628b4839a23da0bd82eaafcf\n   :target: https://www.codacy.com/app/twheys/pypika\n.. |docs| image:: https://readthedocs.org/projects/pypika/badge/?version=latest\n   :target: http://pypika.readthedocs.io/en/latest/\n.. |pypi| image:: https://img.shields.io/pypi/v/pypika.svg?style=flat\n   :target: https://pypi.python.org/pypi/pypika\n.. |license| image:: https://img.shields.io/hexpm/l/plug.svg?maxage=2592000\n   :target: http://www.apache.org/licenses/license-2.0\n\n.. _available_badges_end:\n\n\n",
  "docs_url": null,
  "keywords": "pypika python query builder querybuilder sql mysql postgres psql oracle vertica aggregated relational database rdbms business analytics bi data science analysis pandas orm object mapper",
  "license": "apache license version 2.0",
  "name": "pypika",
  "package_url": "https://pypi.org/project/PyPika/",
  "project_url": "https://pypi.org/project/PyPika/",
  "project_urls": {
    "Homepage": "https://github.com/kayak/pypika"
  },
  "release_url": "https://pypi.org/project/PyPika/0.48.9/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a sql query builder api for python",
  "version": "0.48.9",
  "releases": [],
  "developers": [
    "theys@kayak.com",
    "timothy_heys"
  ],
  "kwds": "brand querybuilder sql queries querying",
  "license_kwds": "apache license version 2.0",
  "libtype": "pypi",
  "id": "pypi_pypika",
  "homepage": "https://github.com/kayak/pypika",
  "release_count": 214,
  "dependency_ids": [],
  "documentation_summary": "PyPika is a Python API designed for building SQL queries in a flexible, expressive, and fast manner, aiming to replace handwritten SQL or ORM. It supports Python 3.6+ and is compatible with various SQL databases like MySQL, PostgreSQL, and Oracle. PyPika utilizes the builder design pattern to construct queries, avoiding messy string formatting and concatenation. It allows for complex query operations such as selecting, joining, filtering, and aggregating data, with support for arithmetic operations, string functions, and custom functions. PyPika also offers features for creating, updating, and inserting data into tables, along with parametrized queries to prevent SQL injection. The project is licensed under the Apache License Version 2.0 and is considered production-stable.",
  "embedding": [
    -0.0001908197591546923,
    0.003951500169932842,
    0.004643099848181009,
    -0.05249204859137535,
    -0.022339703515172005,
    0.025092201307415962,
    -0.0064398678950965405,
    -0.030194049701094627,
    0.0009461705922149122,
    -0.038229115307331085,
    0.004434577189385891,
    -0.003687371965497732,
    0.012629508972167969,
    0.03831252455711365,
    -0.011142048984766006,
    -0.008945613168179989,
    0.017793914303183556,
    -0.014318540692329407,
    -0.007576315198093653,
    -0.001191184506751597,
    0.040647976100444794,
    0.005546696949750185,
    -0.016375962644815445,
    -0.01429073791950941,
    -0.007423399016261101,
    0.035421013832092285,
    0.004660476464778185,
    -0.02496708743274212,
    -0.0008718844619579613,
    0.003445833455771208,
    0.020880047231912613,
    -0.0034423579927533865,
    -0.01764099858701229,
    -0.0026239072903990746,
    -0.038924187421798706,
    0.0027038410771638155,
    0.019809631630778313,
    0.013442746363580227,
    0.022687241435050964,
    0.016626188531517982,
    0.03881297633051872,
    -0.018753118813037872,
    0.01090572401881218,
    -0.019475996494293213,
    -0.007770936470478773,
    0.016375962644815445,
    0.0013023964129388332,
    -0.022381408140063286,
    -0.021978264674544334,
    0.0025926290545612574,
    0.0029384286608546972,
    0.019545502960681915,
    -0.010592940263450146,
    -0.0072009749710559845,
    0.015903310850262642,
    -0.007645823061466217,
    0.016612287610769272,
    0.030833518132567406,
    -0.007416448090225458,
    0.0013858054298907518,
    0.008368700742721558,
    -0.005984594114124775,
    -0.015722591429948807,
    -0.009209740906953812,
    -0.00041813094867393374,
    0.0071175661869347095,
    -0.008563322015106678,
    0.024869777262210846,
    0.017126644030213356,
    0.011176803149282932,
    0.03138957917690277,
    0.04153767228126526,
    0.01719615049660206,
    -0.020977357402443886,
    0.035448815673589706,
    -0.008340897969901562,
    -0.01832217164337635,
    0.02676038071513176,
    -0.032195866107940674,
    0.004865523427724838,
    0.004976735450327396,
    -0.019184064120054245,
    0.009995175525546074,
    0.031222760677337646,
    0.014693881385028362,
    0.008236636407673359,
    -0.03147298842668533,
    0.017738308757543564,
    -0.01335238665342331,
    -0.006269574631005526,
    -0.00915413536131382,
    0.01583380438387394,
    0.0033850143663585186,
    0.031917836517095566,
    -0.009056825190782547,
    0.04331706091761589,
    -0.0336972251534462,
    0.02530072256922722,
    -0.007618019822984934,
    -0.024814169853925705,
    -0.009042923338711262,
    0.017015431076288223,
    -0.012080400250852108,
    -0.01251829694956541,
    -0.03689457103610039,
    0.005546696949750185,
    -0.016612287610769272,
    -0.027038410305976868,
    0.033586014062166214,
    0.017015431076288223,
    0.0012980522587895393,
    0.03522638976573944,
    0.017766112461686134,
    -0.03770085796713829,
    -0.014075265266001225,
    0.006064527668058872,
    0.022117281332612038,
    -0.02222849242389202,
    0.0008154096431098878,
    -0.004420675802975893,
    0.02007376030087471,
    0.016626188531517982,
    5.4438474762719125e-05,
    -0.0125043960288167,
    0.028053218498826027,
    -0.012831080704927444,
    0.002012241631746292,
    -0.009571179747581482,
    -0.006332131568342447,
    -0.022770650684833527,
    -0.005404206458479166,
    0.015291646122932434,
    0.015291646122932434,
    0.002012241631746292,
    -0.017168348655104637,
    -0.007242679595947266,
    -0.011051689274609089,
    -0.014457556419074535,
    -0.03478154167532921,
    -0.03275192528963089,
    0.025926290079951286,
    0.015263842418789864,
    -0.01303265243768692,
    -0.024397125467658043,
    -0.0008957776590250432,
    0.020226676017045975,
    -0.006168788764625788,
    -0.020866146311163902,
    0.010766709223389626,
    0.0020608967170119286,
    0.036088284105062485,
    0.006106232292950153,
    -0.026649167761206627,
    0.003614389104768634,
    -0.014930207282304764,
    -0.007319137919694185,
    -0.0019340456929057837,
    0.022395310923457146,
    0.007986409589648247,
    0.006714422721415758,
    0.0019548980053514242,
    0.021672433242201805,
    -0.016084030270576477,
    -0.0056544337421655655,
    0.003027050755918026,
    0.031139351427555084,
    0.016987629234790802,
    0.002630858216434717,
    -0.021964363753795624,
    -0.011350571177899837,
    0.02293746918439865,
    0.027691779658198357,
    -0.005970692727714777,
    -0.0015587052330374718,
    -0.005671810358762741,
    -0.016695696860551834,
    -0.01040526945143938,
    0.009265347383916378,
    -0.019559405744075775,
    0.006742225494235754,
    0.016973726451396942,
    -0.00011577340046642348,
    0.008181030862033367,
    0.038201309740543365,
    -0.027900302782654762,
    -0.03138957917690277,
    -0.025259017944335938,
    -0.018085846677422523,
    -0.005265191663056612,
    0.03197344020009041,
    0.021297091618180275,
    0.03486495092511177,
    0.0008810073486529291,
    -0.024786368012428284,
    -0.5898683071136475,
    -0.02361864224076271,
    -0.0009661539806984365,
    -0.028942914679646492,
    0.028720490634441376,
    -0.0016090981662273407,
    0.007037632633000612,
    0.0037777316756546497,
    -0.0008384339744225144,
    -0.0004813393170479685,
    -0.012268070131540298,
    0.03158419951796532,
    -0.00493850652128458,
    -0.006523277144879103,
    -0.027219129726290703,
    -0.012594755738973618,
    0.03333578631281853,
    -0.04192691296339035,
    -0.008389553055167198,
    -0.0002721652272157371,
    0.00934875663369894,
    0.030722307041287422,
    -0.007009829394519329,
    0.01583380438387394,
    -0.008292242884635925,
    0.006106232292950153,
    -0.006881240755319595,
    -0.008326996117830276,
    0.030221853405237198,
    0.014401949942111969,
    -0.034003060311079025,
    0.0316954106092453,
    0.006276525557041168,
    -0.046625617891550064,
    0.04712607339024544,
    -0.015583577565848827,
    -0.014151723124086857,
    0.03917441517114639,
    -0.005282568745315075,
    0.0508238710463047,
    -0.009119381196796894,
    0.01687641628086567,
    0.008605025708675385,
    0.00934875663369894,
    -0.008361750282347202,
    0.0035118653904646635,
    0.013282879255712032,
    0.010530383326113224,
    0.0023215499240905046,
    -0.006196592003107071,
    -0.0028376427944749594,
    -0.02182534895837307,
    -0.0008093277574516833,
    -0.024438830092549324,
    0.018516791984438896,
    0.011343620717525482,
    0.00845210999250412,
    -0.02221459150314331,
    -0.011698109097778797,
    -0.003982778638601303,
    0.030194049701094627,
    -0.009626786224544048,
    -0.004045335575938225,
    -0.022770650684833527,
    -0.039257824420928955,
    0.014554866589605808,
    0.017432475462555885,
    -0.018405580893158913,
    0.01090572401881218,
    -0.02961018681526184,
    0.026524053886532784,
    0.0023180744610726833,
    -0.008890006691217422,
    -0.013915397226810455,
    0.011906631290912628,
    0.01691812090575695,
    0.023868868127465248,
    0.018155353143811226,
    -0.00060384621610865,
    0.009842258878052235,
    0.0031608527060598135,
    -0.008855253458023071,
    -0.02603750303387642,
    -0.019545502960681915,
    0.051963791251182556,
    0.0039063203148543835,
    -0.04048115760087967,
    -0.009286199696362019,
    0.03094473108649254,
    -0.0006086248904466629,
    0.004886375740170479,
    -0.005317322444170713,
    -0.0016985890688374639,
    -0.012601706199347973,
    -0.014235132373869419,
    0.004660476464778185,
    -0.020574213936924934,
    -0.005383354611694813,
    -0.005918561946600676,
    -0.02991602011024952,
    -0.011670306324958801,
    -0.0331689715385437,
    -0.010224550031125546,
    -0.013456648215651512,
    -0.0006333868950605392,
    -0.002528334502130747,
    -0.0067109474912285805,
    -0.0034232435282319784,
    0.007604118436574936,
    0.005011489149183035,
    0.01762709766626358,
    -0.054744090884923935,
    -0.0003184311499353498,
    -0.025564851239323616,
    0.029332157224416733,
    -0.034725937992334366,
    0.036477524787187576,
    -0.012059547938406467,
    -0.007023730780929327,
    0.003590061329305172,
    -0.007100189104676247,
    0.009383509866893291,
    0.002682988764718175,
    -0.020560313016176224,
    0.016640091314911842,
    0.03592146560549736,
    0.001968799391761422,
    -0.009578131139278412,
    -0.016626188531517982,
    0.011746764183044434,
    -0.009578131139278412,
    0.012747672386467457,
    0.01251829694956541,
    -0.006332131568342447,
    0.004747360944747925,
    0.00536597752943635,
    0.009216692298650742,
    0.010495629161596298,
    0.0030426899902522564,
    -0.008382602594792843,
    0.00012467904889490455,
    0.0005973299266770482,
    0.020977357402443886,
    0.006151412148028612,
    -0.01251829694956541,
    -0.028275642544031143,
    -0.020921751856803894,
    0.005063619930297136,
    -0.002538760658353567,
    0.01533334981650114,
    -0.02321549877524376,
    -0.02530072256922722,
    -0.03300215303897858,
    0.03027745895087719,
    -0.007618019822984934,
    -0.03175101801753044,
    -0.024383224546909332,
    -0.004601395223289728,
    0.010655497200787067,
    -0.007548512425273657,
    -0.00011284105130471289,
    0.011253261007368565,
    -0.017376869916915894,
    -0.019948646426200867,
    -0.015917213633656502,
    -0.017432475462555885,
    -0.011830173432826996,
    0.03138957917690277,
    0.0022589932195842266,
    -0.02671867609024048,
    0.010954379104077816,
    -0.009918717667460442,
    0.008382602594792843,
    0.005282568745315075,
    0.0035935367923229933,
    -0.0025491868145763874,
    -0.018878232687711716,
    -0.014304639771580696,
    -0.008841351605951786,
    -0.012900588102638721,
    -0.0026621364522725344,
    -0.00045657725422643125,
    -0.027316439896821976,
    -0.018405580893158913,
    0.02645454742014408,
    0.027969811111688614,
    -0.003895894391462207,
    0.03914661332964897,
    -0.009605933912098408,
    0.009188888594508171,
    -0.012594755738973618,
    0.01288668718189001,
    -0.018794823437929153,
    0.027010606601834297,
    -0.0008379995706491172,
    -0.008132374845445156,
    0.01288668718189001,
    0.005995020270347595,
    0.006325180642306805,
    0.035087376832962036,
    -0.012441839091479778,
    -0.004017532337456942,
    -0.01480509340763092,
    -0.015430660918354988,
    0.002865445800125599,
    -0.004882900509983301,
    0.00740254670381546,
    -0.02845636196434498,
    0.03970267251133919,
    -0.009640687145292759,
    0.027955908328294754,
    0.0009470393997617066,
    -0.013943200930953026,
    0.006995928008109331,
    0.010738905519247055,
    0.028067121282219887,
    -0.044484786689281464,
    0.014346344396471977,
    -0.015263842418789864,
    0.005560598336160183,
    0.022756749764084816,
    0.019086753949522972,
    0.013282879255712032,
    0.002125191269442439,
    0.0022346654441207647,
    -0.015986720100045204,
    -0.0047369347885251045,
    0.027219129726290703,
    0.017891226336359978,
    -0.017752209678292274,
    -0.0055814506486058235,
    0.014047461561858654,
    0.0017750472761690617,
    -0.0096615394577384,
    0.022784551605582237,
    0.00900121871381998,
    0.04412334784865379,
    -0.02325720340013504,
    0.033224575221538544,
    -0.009453017264604568,
    0.013088258914649487,
    0.02321549877524376,
    -0.005077521316707134,
    0.0012024794705212116,
    0.006373836193233728,
    -0.0020348315592855215,
    0.02820613607764244,
    0.011920533142983913,
    -0.019531602039933205,
    0.03458692133426666,
    -0.009119381196796894,
    -0.008883056230843067,
    -0.01722395420074463,
    0.017404673621058464,
    0.007235728669911623,
    -0.025245117023587227,
    0.00985616073012352,
    0.015180434100329876,
    0.02502269297838211,
    0.004855097737163305,
    -0.005171356722712517,
    -0.011044738814234734,
    0.011162901297211647,
    0.019851336255669594,
    0.04537448287010193,
    -0.017057135701179504,
    -0.003753403900191188,
    -0.037867676466703415,
    -0.016125734895467758,
    -0.012455740943551064,
    -0.012636460363864899,
    -0.03547661751508713,
    0.00966849084943533,
    -0.0358380563557148,
    0.0071870735846459866,
    0.0023615167010575533,
    0.0010669397888705134,
    0.030583292245864868,
    -0.00423648115247488,
    0.013616515323519707,
    -0.009355707094073296,
    -0.03528199717402458,
    0.052241820842027664,
    -0.005744793452322483,
    -0.0026169565971940756,
    -0.02293746918439865,
    -0.010516481474041939,
    -0.017084939405322075,
    -0.031139351427555084,
    0.007034156937152147,
    -0.01615353859961033,
    0.007044583093374968,
    -0.0071314675733447075,
    0.013088258914649487,
    -0.02396618016064167,
    0.001958373235538602,
    0.04412334784865379,
    -0.01056513749063015,
    -0.006995928008109331,
    0.0006490261293947697,
    0.006620587781071663,
    0.007833492942154408,
    -0.007180122658610344,
    0.0014361983630806208,
    0.04581933096051216,
    0.004090515431016684,
    0.02289576455950737,
    -0.023312808945775032,
    -0.009390460327267647,
    -0.020212775096297264,
    -0.001463132444769144,
    -0.0021721087396144867,
    -0.018502891063690186,
    -0.00034840626176446676,
    -0.006092330906540155,
    -0.0020956506486982107,
    0.01252524834126234,
    0.006648390553891659,
    0.039674870669841766,
    -0.007451201789081097,
    -0.009814456105232239,
    -0.04164888337254524,
    -0.004267759155482054,
    0.016514977440238,
    0.039285629987716675,
    -0.021297091618180275,
    0.022033872082829475,
    0.018892133608460426,
    -0.015639184042811394,
    0.012914489954710007,
    -0.02714962139725685,
    -0.020866146311163902,
    0.01340104267001152,
    -0.015375054441392422,
    -0.0024744663387537003,
    0.017015431076288223,
    0.02188095450401306,
    0.027942007407546043,
    0.020907850936055183,
    0.01376248151063919,
    -0.01759929396212101,
    -0.0387851744890213,
    -0.005810825619846582,
    -0.00913328304886818,
    -0.020254479721188545,
    0.00034862346365116537,
    -0.012817179784178734,
    0.01077365968376398,
    0.021575121209025383,
    0.013609564863145351,
    0.04648660495877266,
    -0.004365069791674614,
    0.0018210960552096367,
    -0.04554130136966705,
    -0.013665170408785343,
    0.001838472904637456,
    0.02220068871974945,
    0.013296781107783318,
    -0.00546328816562891,
    0.035393208265304565,
    0.021019062027335167,
    -0.005560598336160183,
    -0.008181030862033367,
    0.034336697310209274,
    0.012580853886902332,
    0.022951370105147362,
    0.007152319885790348,
    3.4889497328549623e-05,
    0.012858884409070015,
    -0.019587207585573196,
    -0.009501672349870205,
    0.0031104597728699446,
    -0.005557123105973005,
    0.004590969067066908,
    -0.006036724895238876,
    0.0009661539806984365,
    -0.036477524787187576,
    -0.029332157224416733,
    0.01793293096125126,
    0.01128106378018856,
    0.017780013382434845,
    -0.040119718760252,
    -0.006738750264048576,
    -0.03795108571648598,
    0.01757149025797844,
    0.0017932930495589972,
    0.011065591126680374,
    -0.021310994401574135,
    0.011336670257151127,
    -0.005894234403967857,
    -0.004337267018854618,
    0.02849806658923626,
    -0.01833607256412506,
    -0.024466633796691895,
    -0.003239048644900322,
    -0.031556397676467896,
    -0.017071036621928215,
    -0.018071945756673813,
    0.010641595348715782,
    0.0010712840594351292,
    0.0055258446373045444,
    0.009508623741567135,
    -0.015277744270861149,
    -0.007485955487936735,
    -0.005494566168636084,
    -0.027663977816700935,
    -0.0046674273908138275,
    -0.03439230099320412,
    -0.019934745505452156,
    -0.004111367277801037,
    0.00295059266500175,
    -0.00934180524200201,
    -0.007312186993658543,
    0.01580600067973137,
    -0.009258395992219448,
    -0.00022350999643094838,
    -0.00747900502756238,
    0.0023406643886119127,
    -0.010697200894355774,
    0.016793007031083107,
    0.005247814580798149,
    -0.01265731267631054,
    -0.015569675713777542,
    -0.004709132015705109,
    -0.007701429072767496,
    -0.022298000752925873,
    0.0023719428572803736,
    -0.015778198838233948,
    0.012261119671165943,
    0.015694789588451385,
    0.01499971468001604,
    -0.0003879386349581182,
    -0.012810228392481804,
    0.016737401485443115,
    0.013922348618507385,
    -0.03836812824010849,
    0.011315817944705486,
    0.009863111190497875,
    0.036783359944820404,
    0.017821718007326126,
    -0.007395595777779818,
    0.03478154167532921,
    0.006446818821132183,
    -0.017835618928074837,
    -0.004100941587239504,
    -0.00019451233674772084,
    0.002964494051411748,
    0.011065591126680374,
    -0.013449697755277157,
    0.00983530841767788,
    -0.01586160622537136,
    -0.023882770910859108,
    -0.009314002469182014,
    -0.01969842053949833,
    0.045569103211164474,
    0.0179190281778574,
    -0.006662291940301657,
    -0.005334699060767889,
    0.011913582682609558,
    0.006926420610398054,
    -0.010120289400219917,
    0.00880659744143486,
    -0.0175853930413723,
    -0.012803277932107449,
    -0.013456648215651512,
    0.008403453975915909,
    0.002613481367006898,
    -0.014360245317220688,
    -0.027260834351181984,
    -0.020490804687142372,
    -0.045235469937324524,
    0.014582669362425804,
    0.008153227157890797,
    0.011162901297211647,
    0.022617734968662262,
    -0.0016568845603615046,
    0.015083122998476028,
    -0.028372954577207565,
    0.005776071455329657,
    0.006436392664909363,
    0.0007871722336858511,
    0.012699016369879246,
    0.00971019547432661,
    0.04796016216278076,
    0.015236039645969868,
    0.015611380338668823,
    0.018391679972410202,
    0.011274113319814205,
    -0.007541561499238014,
    0.0021721087396144867,
    -0.017891226336359978,
    -0.0033919650595635176,
    -0.008486863225698471,
    -0.027580568566918373,
    -0.0018558497540652752,
    0.018085846677422523,
    0.005904660560190678,
    -0.017654899507761,
    -0.01862800493836403,
    0.0021860103588551283,
    -0.0026430219877511263,
    0.009751899167895317,
    -0.024105194956064224,
    -0.004337267018854618,
    -0.012288922443985939,
    0.016139637678861618,
    -0.0017698341980576515,
    0.003864615922793746,
    -0.03283533453941345,
    -0.004497134126722813,
    0.015945015475153923,
    -0.02258993126451969,
    0.020866146311163902,
    -0.0047369347885251045,
    0.013630417175590992,
    -0.011378374882042408,
    0.013679072260856628,
    0.009091578423976898,
    0.031083745881915092,
    0.010189796797931194,
    0.008382602594792843,
    -0.010655497200787067,
    -0.00766667490825057,
    -0.002933215582743287,
    0.03333578631281853,
    0.02919314242899418,
    -0.006672718096524477,
    0.02916533872485161,
    -0.011600798927247524,
    0.037450630217790604,
    0.02961018681526184,
    0.008042015135288239,
    0.009939569979906082,
    -0.02215898409485817,
    -0.020240578800439835,
    -0.017126644030213356,
    -0.028664885088801384,
    -0.011718961410224438,
    0.010704152286052704,
    0.017696604132652283,
    0.016264749690890312,
    0.006578883156180382,
    -0.014096117578446865,
    -0.023076483979821205,
    0.010273206047713757,
    -0.010189796797931194,
    0.051602352410554886,
    -0.0033937026746571064,
    0.02961018681526184,
    0.03286313638091087,
    0.02181144803762436,
    0.00879269652068615,
    -0.022089477628469467,
    -0.024188604205846786,
    -0.01249744463711977,
    0.0020487329456955194,
    0.022061673924326897,
    0.009029021486639977,
    -0.021658530458807945,
    0.019976450130343437,
    -0.00025283347349613905,
    -0.020685426890850067,
    -0.012462691403925419,
    0.04395652934908867,
    0.002151256427168846,
    -0.00465352600440383,
    -0.02716352418065071,
    0.012414036318659782,
    -0.0011008246801793575,
    0.01971232146024704,
    -0.037450630217790604,
    0.0013076094910502434,
    0.008542469702661037,
    -0.02366034686565399,
    0.005508468020707369,
    0.007207925897091627,
    0.008625878021121025,
    -0.0003477546270005405,
    0.00447975704446435,
    -0.03956365957856178,
    -0.004757787100970745,
    -0.025940191000699997,
    -0.01352615561336279,
    0.011149000376462936,
    0.013136913999915123,
    0.01619524322450161,
    0.0023858442436903715,
    -0.0005595352267846465,
    0.035782452672719955,
    0.00025934979203157127,
    -0.0015248203417286277,
    0.010836216621100903,
    0.002139092655852437,
    0.043122440576553345,
    -0.017446378245949745,
    -0.0015587052330374718,
    -0.011003034189343452,
    -0.017168348655104637,
    0.018544595688581467,
    0.0033380966633558273,
    -0.016389863565564156,
    -0.01039136853069067,
    -0.010127239860594273,
    0.01124631054699421,
    0.005682236514985561,
    -0.04117623344063759,
    -0.002969707129523158,
    -0.015444561839103699,
    -0.007659724447876215,
    -0.009293150156736374,
    -0.017696604132652283,
    0.016834711655974388,
    0.01826656609773636,
    0.0036352411843836308,
    -0.02858147583901882,
    -0.012949244119226933,
    -0.0058629559352993965,
    0.007079336792230606,
    0.017738308757543564,
    -0.0030305262189358473,
    -0.01373467780649662,
    0.008632829412817955,
    -0.01836387626826763,
    0.012045646086335182,
    0.017349068075418472,
    -0.014346344396471977,
    -0.008174079470336437,
    0.0161813423037529,
    -0.021283190697431564,
    0.011274113319814205,
    0.040369946509599686,
    -0.03161200135946274,
    -0.009543376974761486,
    -0.004027958493679762,
    0.018141452223062515,
    0.06961869448423386,
    -0.006676193326711655,
    -0.025272920727729797,
    0.014116968959569931,
    0.027928106486797333,
    0.02047690376639366,
    0.016125734895467758,
    -0.01055818609893322,
    0.023868868127465248,
    0.009939569979906082,
    0.007868247106671333,
    0.023396218195557594,
    -0.005845579318702221,
    0.01354700792580843,
    0.004010581877082586,
    0.009897865355014801,
    0.0031434758566319942,
    -0.03739502653479576,
    -0.012219415046274662,
    -0.027024509385228157,
    -0.005915086716413498,
    -3.475373887340538e-05,
    0.024911481887102127,
    -0.02678818255662918,
    0.004396348260343075,
    -0.028998520225286484,
    0.038173507899045944,
    0.02257603034377098,
    0.006853437516838312,
    -0.0015300334198400378,
    0.03163980692625046,
    0.0250087920576334,
    0.011003034189343452,
    -0.007576315198093653,
    -0.007319137919694185,
    -0.021978264674544334,
    0.00934180524200201,
    -0.04290001839399338,
    -0.027010606601834297,
    -0.0211302749812603,
    0.023006975650787354,
    0.013268978334963322,
    -0.029693596065044403,
    -0.015013615600764751,
    -0.011308867484331131,
    -0.0323626846075058,
    -0.01689031720161438,
    -0.024508338421583176,
    0.015305547043681145,
    0.02151951566338539,
    -0.002413647249341011,
    0.008841351605951786,
    0.012900588102638721,
    0.008605025708675385,
    0.013317633420228958,
    -0.03692237287759781,
    -0.00043811433715745807,
    -0.0025040069594979286,
    -0.00083756516687572,
    0.009432164952158928,
    -0.009619835764169693,
    -0.00295059266500175,
    -0.014429752714931965,
    0.009543376974761486,
    -0.01971232146024704,
    0.01694592460989952,
    0.0437341071665287,
    -0.001025235396809876,
    -0.017057135701179504,
    0.010620743036270142,
    -0.008257488720119,
    0.0031712788622826338,
    0.032946545630693436,
    -0.0005108799668960273,
    -0.02820613607764244,
    -0.012295872904360294,
    0.01904504932463169,
    0.011593847535550594,
    0.021575121209025383,
    0.012261119671165943,
    0.01406136341392994,
    -0.022381408140063286,
    0.02432761900126934,
    -0.01975402608513832,
    -0.0267464779317379,
    0.009883963502943516,
    0.02249262109398842,
    0.025189511477947235,
    -0.00449018320068717,
    0.02637113817036152,
    0.016820810735225677,
    -0.004093990661203861,
    0.003795108525082469,
    -0.021255386993288994,
    0.018947739154100418,
    -0.03861835598945618,
    0.005115750711411238,
    0.010092486627399921,
    0.006971600465476513,
    0.0063703604973852634,
    -0.02004595659673214,
    0.0005921168485656381,
    -0.0028359051793813705,
    -0.016389863565564156,
    0.012935342267155647,
    0.0018054568208754063,
    -0.0037742562126368284,
    -0.010460875928401947,
    0.0033745882101356983,
    -0.0077639855444431305,
    0.006245247088372707,
    0.017432475462555885,
    0.029443368315696716,
    -0.0005191339878365397,
    -0.01690421998500824,
    -0.0070584844797849655,
    -0.015138729475438595,
    0.008007261902093887,
    -0.0024414502549916506,
    -0.007145368959754705,
    -0.012414036318659782,
    0.018892133608460426,
    -0.00949472188949585,
    -0.01650107651948929,
    0.002132141962647438,
    0.18372216820716858,
    0.013262026943266392,
    0.03547661751508713,
    0.02423030696809292,
    0.020921751856803894,
    0.0414542630314827,
    -0.002133879577741027,
    0.003576159942895174,
    -0.004073138348758221,
    0.019823534414172173,
    -0.01796073280274868,
    -0.021255386993288994,
    0.010488678701221943,
    -0.0024379747919738293,
    0.025523146614432335,
    -0.01288668718189001,
    -0.011892730370163918,
    -0.04303903132677078,
    -0.04565251246094704,
    -0.01654278114438057,
    0.0027611847035586834,
    -0.016612287610769272,
    -0.00880659744143486,
    -0.009446066804230213,
    0.009258395992219448,
    0.0034249811433255672,
    -0.019587207585573196,
    0.0018836527597159147,
    0.026996705681085587,
    0.0011885779676958919,
    -0.012302824296057224,
    0.009883963502943516,
    0.01372077688574791,
    -0.026621365919709206,
    -0.02681598626077175,
    -0.007520709652453661,
    0.00811152346432209,
    -0.01586160622537136,
    0.024758564308285713,
    0.017043234780430794,
    -0.0039063203148543835,
    -0.014777290634810925,
    0.007374743930995464,
    -0.014485359191894531,
    -0.011100344359874725,
    -0.023688148707151413,
    -0.0394524447619915,
    0.03756184130907059,
    -5.7126460887957364e-05,
    0.011322768405079842,
    -0.018169255927205086,
    -0.013129963539540768,
    0.03836812824010849,
    -0.0023232875391840935,
    -0.011670306324958801,
    -0.039285629987716675,
    0.00827834103256464,
    -0.0027160048484802246,
    0.00863977987319231,
    0.0076249707490205765,
    -0.01230977475643158,
    0.045263271778821945,
    -0.0066032106988132,
    0.012580853886902332,
    -0.05037902295589447,
    0.0027750860899686813,
    -0.03172321245074272,
    0.015917213633656502,
    -0.014096117578446865,
    0.0002832429890986532,
    0.007889099419116974,
    -0.007020255550742149,
    -0.0161813423037529,
    -0.009480820037424564,
    -0.031167155131697655,
    -0.02321549877524376,
    0.04684804379940033,
    0.018919935449957848,
    0.029498975723981857,
    0.009084627963602543,
    -0.01658448576927185,
    -0.02493928372859955,
    -0.0060749538242816925,
    0.0009105480276048183,
    -0.012407084926962852,
    0.011406177654862404,
    0.026927197352051735,
    -0.00651632621884346,
    -0.03389184921979904,
    -0.02436932362616062,
    -0.0032199339475482702,
    -0.025203412398695946,
    -0.006359934341162443,
    -0.011524340137839317,
    0.0011555618839338422,
    0.01495801005512476,
    -0.0036109136417508125,
    0.03333578631281853,
    -0.022617734968662262,
    -0.011712010949850082,
    -0.015764296054840088,
    0.05799704045057297,
    -0.0011242835316807032,
    -0.007576315198093653,
    -0.03669995069503784,
    -0.00023784591758158058,
    -0.014262935146689415,
    0.03692237287759781,
    0.001172069925814867,
    -0.055133335292339325,
    0.007006354164332151,
    -0.009383509866893291,
    0.011698109097778797,
    -0.016014523804187775,
    0.007166221272200346,
    -0.02783079445362091,
    -0.0053729284554719925,
    -0.004347692709416151,
    0.004914178978651762,
    -0.002702103229239583,
    0.006436392664909363,
    -0.010273206047713757,
    0.006151412148028612,
    -0.018183156847953796,
    -0.010516481474041939,
    -0.005529320333153009,
    -0.04006411135196686,
    0.01056513749063015,
    0.013825037516653538,
    -0.008931711316108704,
    0.038201309740543365,
    -0.056523483246564865,
    0.011489586904644966,
    0.01623694784939289,
    -0.023507429286837578,
    0.000712451699655503,
    -0.01164250262081623,
    0.00014118707622401416,
    0.021032962948083878,
    0.0011703321943059564,
    -0.006797831505537033,
    0.01077365968376398,
    0.0060054464265704155,
    -0.005126176867634058,
    0.0024344995617866516,
    -0.040703579783439636,
    0.007284384220838547,
    -0.014200378209352493,
    0.023674247786402702,
    0.016987629234790802,
    -0.005181782878935337,
    2.4667009711265564e-05,
    0.03239048644900322,
    -0.01790512725710869,
    0.024035686627030373,
    0.0008966465247794986,
    -0.0026030552107840776,
    -0.004090515431016684,
    0.033224575221538544,
    0.021575121209025383,
    -0.004462380427867174,
    -0.007009829394519329,
    0.03230707719922066,
    -0.010982181876897812,
    -0.040258731693029404,
    -0.038173507899045944,
    -0.17549248039722443,
    0.03700578212738037,
    0.011301916092634201,
    -0.026357237249612808,
    0.036143891513347626,
    -0.0036665196530520916,
    0.008007261902093887,
    -0.008201883174479008,
    0.02493928372859955,
    -0.017418574541807175,
    -0.0034597348421812057,
    0.006735275033861399,
    -0.004907228052616119,
    -0.03097253292798996,
    0.028261741623282433,
    -0.008764893747866154,
    -0.007569364737719297,
    0.01499971468001604,
    0.024814169853925705,
    0.010488678701221943,
    0.01020369865000248,
    -0.0012459215940907598,
    0.0006929027149453759,
    0.0038298622239381075,
    -0.0019722748547792435,
    -0.005240864120423794,
    -0.0316954106092453,
    -0.010078584775328636,
    -0.015527971088886261,
    -0.012247217819094658,
    -0.01975402608513832,
    0.019795730710029602,
    0.029026323929429054,
    -0.0047508361749351025,
    0.003986253868788481,
    0.00285328202880919,
    0.004657001234591007,
    0.000125113467220217,
    -0.022242393344640732,
    0.016125734895467758,
    0.015903310850262642,
    0.02359083853662014,
    0.02815053053200245,
    -0.010287106968462467,
    -0.0027299062348902225,
    0.036116085946559906,
    0.009765801019966602,
    -0.027636174112558365,
    0.011739813722670078,
    -0.035448815673589706,
    0.03692237287759781,
    -0.003638716647401452,
    0.008340897969901562,
    -0.012344528920948505,
    0.02001815475523472,
    0.005664859898388386,
    0.00493850652128458,
    -0.0060610524378716946,
    0.005821251310408115,
    -0.01389454584568739,
    -0.014721684157848358,
    -0.013769431971013546,
    0.009056825190782547,
    0.0017646211199462414,
    -0.0050149648450315,
    -0.010085535235702991,
    -0.012761573307216167,
    0.05560598522424698,
    -0.0004617903323378414,
    0.007367793004959822,
    0.02431371621787548,
    0.015778198838233948,
    -0.004997587762773037,
    0.019253572449088097,
    -0.004910703748464584,
    0.008438208140432835,
    -0.01871141418814659,
    0.01587550900876522,
    0.015597478486597538,
    0.012935342267155647,
    -0.015666985884308815,
    0.0069333710707724094,
    -0.006130559835582972,
    -0.004166973289102316,
    0.01004383061081171,
    -0.004024483263492584,
    0.01160774938762188,
    -0.008876104839146137,
    -0.011044738814234734,
    -0.011885778978466988,
    0.041092824190855026,
    -0.021408304572105408,
    0.003419768065214157,
    -0.006189641077071428,
    0.004382446873933077,
    0.02644064649939537,
    0.0015821640845388174,
    -0.01826656609773636,
    0.004406774416565895,
    -0.028386855497956276,
    0.00457706768065691,
    -0.0004422413476277143,
    -0.02215898409485817,
    0.0175853930413723,
    0.031917836517095566,
    0.02784469723701477,
    -0.014749487861990929,
    0.01141312811523676,
    0.03914661332964897,
    0.009967372752726078,
    -0.00021677646145690233,
    0.002144305733963847,
    0.011447882279753685,
    0.024035686627030373,
    -0.040314339101314545,
    0.008750991895794868,
    -0.01764099858701229,
    -0.012594755738973618,
    -0.0048203435726463795,
    -0.01757149025797844,
    0.03920222073793411,
    -0.007065435405820608,
    0.022089477628469467,
    0.0044693308882415295,
    -0.018030241131782532,
    -0.025842880830168724,
    -0.09425214678049088,
    -0.041009414941072464,
    0.032529499381780624,
    0.007423399016261101,
    -0.022409211844205856,
    -0.015430660918354988,
    0.00545286200940609,
    0.015597478486597538,
    -0.011009984649717808,
    0.0037985837552696466,
    -0.00043181522050872445,
    -0.017654899507761,
    -0.016806907951831818,
    0.011385325342416763,
    -0.0006203542579896748,
    -0.0022033872082829475,
    -0.006631013471633196,
    0.008035064674913883,
    -0.0013293306110426784,
    0.012212464585900307,
    -0.027650075033307076,
    0.021255386993288994,
    0.018850428983569145,
    0.016640091314911842,
    -0.029777005314826965,
    0.002488367725163698,
    -0.02467515505850315,
    -0.009487771429121494,
    0.017529787495732307,
    0.011892730370163918,
    0.002133879577741027,
    -0.023688148707151413,
    -0.007312186993658543,
    0.008326996117830276,
    -0.006843011360615492,
    -0.0011520865373313427,
    -0.036143891513347626,
    -0.01655668206512928,
    0.03875737264752388,
    -0.012219415046274662,
    0.007388645317405462,
    -0.006012396886944771,
    0.012212464585900307,
    -0.003923697397112846,
    -0.014874600805342197,
    0.007812640629708767,
    0.014721684157848358,
    0.02849806658923626,
    0.02742765285074711,
    -0.030750108882784843,
    -0.028233937919139862,
    -0.02706621214747429,
    0.006797831505537033,
    -0.013651269488036633,
    0.024577844887971878,
    0.003815960604697466,
    0.0021043389569967985,
    0.009772751480340958,
    0.014047461561858654,
    -0.008869154378771782,
    -0.0019270948832854629,
    -0.020518608391284943,
    -0.012462691403925419,
    0.009842258878052235,
    0.004802966956049204,
    -0.019281374290585518,
    0.00141013297252357,
    -0.016375962644815445,
    0.03667214512825012,
    -0.004785589873790741,
    -0.017821718007326126,
    0.0020991258788853884,
    -0.02185315266251564,
    0.01019674725830555,
    -0.009619835764169693,
    -0.004712607245892286,
    -0.0015361153054982424,
    -0.02742765285074711,
    0.01408221572637558,
    0.0032790154218673706,
    -0.0025874159764498472,
    -0.015736494213342667,
    -0.02961018681526184,
    -0.0253424271941185,
    0.011983090080320835,
    0.014214280061423779,
    0.015152630396187305,
    -0.0041287443600595,
    0.032223667949438095,
    -0.02366034686565399,
    0.005494566168636084,
    -0.024730762466788292,
    0.029443368315696716,
    -0.009585081599652767,
    -0.0014553128276020288,
    -0.009654588997364044,
    0.009807505644857883,
    -0.006280000787228346,
    -0.02749715931713581,
    0.02118588052690029,
    -0.04837720841169357,
    -0.030055034905672073,
    -0.08174079656600952,
    0.007249630056321621,
    0.015764296054840088,
    -0.008737090043723583,
    0.00789604987949133,
    -0.03728381171822548,
    -0.0014692143304273486,
    -0.029721397906541824,
    -0.022047773003578186,
    -0.002245091600343585,
    -0.04095380753278732,
    0.00896646548062563,
    -0.020351789891719818,
    -0.02858147583901882,
    -0.028664885088801384,
    0.004907228052616119,
    0.02222849242389202,
    -0.013665170408785343,
    0.03658873960375786,
    -0.011399227194488049,
    -0.028692688792943954,
    0.005251290276646614,
    0.04128744453191757,
    -0.009432164952158928,
    -0.0358380563557148,
    -0.02924874797463417,
    -0.038534946739673615,
    0.014110018499195576,
    -0.012914489954710007,
    -0.019128458574414253,
    0.01109339389950037,
    -0.016417667269706726,
    -0.009112430736422539,
    0.03336359187960625,
    0.00915413536131382,
    -0.006533703301101923,
    0.03061109408736229,
    -0.007107140030711889,
    0.03353041037917137,
    -0.00245882710441947,
    -0.010092486627399921,
    -0.035087376832962036,
    0.015708690509200096,
    -0.007736182771623135,
    -0.002608268288895488,
    0.006540653761476278,
    0.002740332391113043,
    0.0010938739869743586,
    0.022298000752925873,
    0.002788987709209323,
    0.003941074013710022,
    0.010815364308655262,
    -0.02288186177611351,
    -0.02186705358326435,
    0.003082656767219305,
    -0.02634333446621895,
    0.03656093403697014,
    0.010259304195642471,
    -0.009362657554447651,
    0.01623694784939289,
    0.022951370105147362,
    0.01288668718189001,
    0.006304328329861164,
    0.004417200572788715,
    0.010113338008522987,
    -0.03239048644900322,
    -0.03720040246844292,
    -0.013477500528097153,
    -0.006380786653608084,
    -0.019601110368967056,
    -0.01830827072262764,
    -0.0414542630314827,
    0.01199004054069519,
    0.014221230521798134,
    0.032640714198350906,
    0.006113182753324509,
    0.014346344396471977,
    -0.0019357833079993725,
    -0.005859480705112219,
    0.03831252455711365,
    0.0422605499625206,
    -0.012587804347276688,
    -0.020977357402443886,
    0.01935088261961937,
    0.04762652516365051,
    -0.000601674139034003,
    -0.011135098524391651,
    -7.135377381928265e-05,
    0.013178618624806404,
    0.012024793773889542,
    -0.0020244054030627012,
    -0.0019062426872551441,
    -0.015402858145534992,
    0.022033872082829475,
    -0.009466919116675854,
    -0.009939569979906082,
    -0.02815053053200245,
    -0.02468905784189701,
    0.006589309312403202,
    -0.0009253183379769325,
    0.0021929610520601273,
    -0.02573166973888874,
    0.01305350475013256,
    -0.013088258914649487,
    -0.013595663011074066,
    -0.0004044466477353126,
    -0.01654278114438057,
    -0.011406177654862404,
    0.0023910573218017817,
    0.0386461578309536,
    0.0017142283031716943,
    -0.019656715914607048,
    -0.0012215939350426197,
    0.0107319550588727,
    0.0009678916539996862,
    0.017654899507761,
    -0.004848146811127663,
    -0.004698705859482288,
    -0.012198562733829021,
    0.018475089222192764,
    -0.016111833974719048,
    0.02991602011024952,
    0.019239671528339386,
    -0.016514977440238,
    0.00012533068365883082,
    0.03405866399407387,
    0.0064989496022462845,
    -0.01335238665342331,
    0.01619524322450161,
    -0.006717897951602936,
    0.02468905784189701,
    0.002276370069012046,
    -0.019086753949522972,
    -0.01339409127831459,
    0.005661384202539921,
    -0.030555488541722298,
    -0.01459657121449709,
    -0.003119148313999176,
    -0.0055953520350158215,
    0.08229685574769974,
    -0.009842258878052235,
    0.010683299973607063,
    -0.001925357268191874,
    -0.0012215939350426197,
    0.003676945809274912,
    -0.005939414259046316,
    -0.00913328304886818,
    -0.007972507737576962,
    -0.014374147169291973,
    0.02075493335723877,
    -0.022659439593553543,
    -0.021199781447649002,
    -0.03261290863156319,
    -0.0051574548706412315,
    0.004924605134874582,
    -0.017335165292024612,
    0.022325802594423294,
    -0.0031747540924698114,
    0.0017811291618272662,
    0.023493528366088867,
    0.05099068954586983,
    -0.012448789551854134,
    0.002349352929741144,
    -0.044957440346479416,
    -0.009717145934700966,
    0.012427937239408493,
    0.015194335021078587,
    0.016362061724066734,
    -0.07940534502267838,
    0.02499488927423954,
    0.013435795903205872,
    -0.014888502657413483,
    -0.006283476483076811,
    0.0034423579927533865,
    -0.006276525557041168,
    0.0026864642277359962,
    -0.01286583486944437,
    -0.00242581102065742,
    0.03553222492337227,
    0.010363565757870674,
    -0.0043164147064089775,
    -0.04715387523174286,
    -0.028011513873934746,
    0.0019097180338576436,
    0.003438882529735565,
    0.010328811593353748,
    -0.0034249811433255672,
    -0.032279275357723236
  ]
}
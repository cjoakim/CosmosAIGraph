{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# aws::iotevents construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\naws iot events enables you to monitor your equipment or device fleets for\nfailures or changes in operation, and to trigger actions when such events\noccur.\n\n## installation\n\ninstall the module:\n\n```console\n$ npm i @aws-cdk/aws-iotevents\n```\n\nimport it into your code:\n\n```python\nimport aws_cdk.aws_iotevents as iotevents\n```\n\n## `detectormodel`\n\nthe following example creates an aws iot events detector model to your stack.\nthe detector model need a reference to at least one aws iot events input.\naws iot events inputs enable the detector to get mqtt payload values from iot core rules.\n\nyou can define built-in actions to use a timer or set a variable, or send data to other aws resources.\nsee also [@aws-cdk/aws-iotevents-actions](https://docs.aws.amazon.com/cdk/api/v1/docs/aws-iotevents-actions-readme.html) for other actions.\n\n```python\nimport aws_cdk.aws_iotevents as iotevents\nimport aws_cdk.aws_iotevents_actions as actions\nimport aws_cdk.aws_lambda as lambda_\n\n# func: lambda.ifunction\n\n\ninput = iotevents.input(self, \"myinput\",\n    input_name=\"my_input\",  # optional\n    attribute_json_paths=[\"payload.deviceid\", \"payload.temperature\"]\n)\n\nwarm_state = iotevents.state(\n    state_name=\"warm\",\n    on_enter=[iotevents.event(\n        event_name=\"test-enter-event\",\n        condition=iotevents.expression.current_input(input),\n        actions=[actions.lambdainvokeaction(func)]\n    )],\n    on_input=[iotevents.event( # optional\n        event_name=\"test-input-event\",\n        actions=[actions.lambdainvokeaction(func)])],\n    on_exit=[iotevents.event( # optional\n        event_name=\"test-exit-event\",\n        actions=[actions.lambdainvokeaction(func)])]\n)\ncold_state = iotevents.state(\n    state_name=\"cold\"\n)\n\n# transit to coldstate when temperature is less than 15\nwarm_state.transition_to(cold_state,\n    event_name=\"to_coldstate\",  # optional property, default by combining the names of the states\n    when=iotevents.expression.lt(\n        iotevents.expression.input_attribute(input, \"payload.temperature\"),\n        iotevents.expression.from_string(\"15\")),\n    executing=[actions.lambdainvokeaction(func)]\n)\n# transit to warmstate when temperature is greater than or equal to 15\ncold_state.transition_to(warm_state,\n    when=iotevents.expression.gte(\n        iotevents.expression.input_attribute(input, \"payload.temperature\"),\n        iotevents.expression.from_string(\"15\"))\n)\n\niotevents.detectormodel(self, \"mydetectormodel\",\n    detector_model_name=\"test-detector-model\",  # optional\n    description=\"test-detector-model-description\",  # optional property, default is none\n    evaluation_method=iotevents.eventevaluation.serial,  # optional property, default is iotevents.eventevaluation.batch\n    detector_key=\"payload.deviceid\",  # optional property, default is none and single detector instance will be created and all inputs will be routed to it\n    initial_state=warm_state\n)\n```\n\nto grant permissions to put messages in the input,\nyou can use the `grantwrite()` method:\n\n```python\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_iotevents as iotevents\n\n# grantable: iam.igrantable\n\ninput = iotevents.input.from_input_name(self, \"myinput\", \"my_input\")\n\ninput.grant_write(grantable)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-iotevents",
  "package_url": "https://pypi.org/project/aws-cdk.aws-iotevents/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-iotevents/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-iotevents/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::iotevents",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_iotevents aws_iotevents_actions aws_cdk iotevents aws_iam",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_iotevents",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 240,
  "dependency_ids": [
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
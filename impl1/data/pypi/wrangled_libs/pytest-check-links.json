{
  "classifiers": [
    "framework :: jupyter",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "topic :: documentation",
    "topic :: documentation :: sphinx",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing"
  ],
  "description": "# pytest-check-links\n\npytest plugin that checks urls for html-containing files.\n\n[![tests](https://github.com/jupyterlab/pytest-check-links/workflows/tests/badge.svg)](https://github.com/jupyterlab/pytest-check-links/actions?query=workflow%3atests+branch%3amaster)\n[![pypi version](https://badge.fury.io/py/pytest-check-links.svg)](https://badge.fury.io/py/pytest-check-links)\n![pypi - python version](https://img.shields.io/pypi/pyversions/pytest-check-links)\n\n## supported files\n\n- `.html`\n- `.rst`\n- `.md` (todo: select renderer)\n- `.ipynb` (requires `nbconvert`)\n\n## install\n\n```\npip install pytest-check-links\n```\n\n## use\n\n```\npytest --check-links mynotebook.ipynb\n```\n\n## configure\n\n#### --links-ext\n\n> default: `md,rst,html,ipynb`\n\na comma-separated list of extensions to check\n\n#### --check-anchors\n\nalso check whether links with `#anchors` html files (either local, or with\nserved with `html` in the `content-type`) actually exist, and point to _exactly one_\nnamed anchor.\n\n#### --check-links-ignore\n\na regular expression that matches uris that should not be checked.\ncan be specified multiple times for multiple ignore patterns.\nthis can be used for files that have a lot of links to github pages,\nsuch as a changelog. github has rate limiting, which would normally cause these files to take up to an hour to complete for larger repositories. for example:\n\n```\npytest --check-links --check-links-ignore \"https://github.com/.*/pull/.*\" changelog.md\n```\n\n### cache\n\ncaching requires the installation of `requests-cache`.\n\n```\npip install requests-cache\n```\n\nif enabled, each occurance of a link will be checked, no matter how many times\nit appears in a collection of files to check.\n\n#### --check-links-cache\n\ncache requests when checking links. caching is disabled by default, and this option\nmust be provided, even if other cache configuration options are provided.\n\n#### --check-links-cache-name\n\n> default: `.pytest-check-links-cache`\n\nname of link cache, either the base name of a file or similar, depending on backend.\n\n#### --check-links-cache-backend\n\n> default: `sqlite3`\n\ncache persistence backend. the other known backends are:\n\n- `memory`\n- `redis`\n- `mongodb`\n\nsee the [requests-cache documentation](https://requests-cache.readthedocs.io)\nfor more information.\n\n#### --check-links-cache-expire-after\n\n> default: `none` (unlimited)\n\ntime to cache link responses (seconds).\n\n#### --check-links-cache-backend-opt\n\nbackend-specific options for link cache, provided as `key:value`. these are passed\ndirectly to the `requests_cache.cachedsession` constructor, as they vary depending\non the backend.\n\nvalues will be parsed as json first, so to overload the default of caching all\nhttp response codes (which requires a list of `int`s):\n\n```bash\n--check-links-backend-opt allowable_codes:[200]\n```\n\n## code styling\n\n`pytest-check-links` has adopted automatic code formatting so you shouldn't\nneed to worry too much about your code style.\nas long as your code is valid,\nthe pre-commit hook should take care of how it should look.\nyou can invoke the pre-commit hook by hand at any time with:\n\n```bash\npre-commit run\n```\n\nwhich should run any autoformatting on your code\nand tell you about any errors it couldn't fix automatically.\nyou may also install [black integration](https://black.readthedocs.io/en/stable/integrations/editors.html)\ninto your text editor to format code automatically.\n\nif you have already committed files before setting up the pre-commit\nhook with `pre-commit install`, you can fix everything up using\n`pre-commit run --all-files`. you need to make the fixing commit\nyourself after that.\n\nsome of the hooks only run on ci by default, but you can invoke them by\nrunning with the `--hook-stage manual` argument.\n\n## todo\n\n- pick a markdown renderer (probably commonmark) or make the markdown renderer pluggable\n- options for validating links (allow absolute links, only remote or local, etc.)\n- find urls in python docstrings\n",
  "docs_url": null,
  "keywords": "documentation,html,links,testing",
  "license": "copyright (c) 2019 project jupyter contributors all rights reserved.  copyright (c) 2017, min rk all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.",
  "name": "pytest-check-links",
  "package_url": "https://pypi.org/project/pytest-check-links/",
  "project_url": "https://pypi.org/project/pytest-check-links/",
  "project_urls": {
    "Homepage": "https://github.com/jupyterlab/pytest-check-links"
  },
  "release_url": "https://pypi.org/project/pytest-check-links/0.9.0/",
  "requires_dist": [
    "docutils",
    "html5lib",
    "nbconvert",
    "nbformat",
    "pytest>=7.0",
    "requests",
    "requests-cache>=0.9.7; extra == 'cache'",
    "flaky; extra == 'test'",
    "pre-commit; extra == 'test'",
    "requests-cache>=0.9.7; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "check links in files",
  "version": "0.9.0",
  "releases": [],
  "developers": [
    "jupyter@googlegroups.com"
  ],
  "kwds": "pytest pyversions pypi jupyterlab py",
  "license_kwds": "copyright liable liability redistributions redistribution",
  "libtype": "pypi",
  "id": "pypi_pytest_check_links",
  "homepage": "",
  "release_count": 22,
  "dependency_ids": [
    "pypi_docutils",
    "pypi_flaky",
    "pypi_html5lib",
    "pypi_nbconvert",
    "pypi_nbformat",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_requests",
    "pypi_requests_cache"
  ]
}
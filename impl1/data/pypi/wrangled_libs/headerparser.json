{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications :: email",
    "topic :: communications :: usenet news",
    "topic :: internet :: www/http",
    "topic :: text processing",
    "typing :: typed"
  ],
  "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: project status: active \u2014 the project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://github.com/jwodder/headerparser/workflows/test/badge.svg?branch=master\n    :target: https://github.com/jwodder/headerparser/actions?workflow=test\n    :alt: ci status\n\n.. image:: https://codecov.io/gh/jwodder/headerparser/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/headerparser\n\n.. image:: https://img.shields.io/pypi/pyversions/headerparser.svg\n    :target: https://pypi.org/project/headerparser\n\n.. image:: https://img.shields.io/github/license/jwodder/headerparser.svg\n    :target: https://opensource.org/licenses/mit\n    :alt: mit license\n\n`github <https://github.com/jwodder/headerparser>`_\n| `pypi <https://pypi.org/project/headerparser>`_\n| `documentation <https://headerparser.readthedocs.io>`_\n| `issues <https://github.com/jwodder/headerparser/issues>`_\n| `changelog <https://github.com/jwodder/headerparser/blob/master/changelog.md>`_\n\n``headerparser`` parses key-value pairs in the style of rfc 822 (e-mail)\nheaders and converts them into case-insensitive dictionaries with the trailing\nmessage body (if any) attached.  fields can be converted to other types, marked\nrequired, or given default values using an api based on the standard library's\n``argparse`` module.  (everyone loves ``argparse``, right?)  low-level\nfunctions for just scanning header fields (breaking them into sequences of\nkey-value pairs without any further processing) are also included.\n\nthe format\n==========\nrfc 822-style headers are header fields that follow the general format of\ne-mail headers as specified by rfc 822 and friends: each field is a line of the\nform \"``name: value``\", with long values continued onto multiple lines\n(\"folded\") by indenting the extra lines.  a blank line marks the end of the\nheader section and the beginning of the message body.\n\nthis basic grammar has been used by numerous textual formats besides e-mail,\nincluding but not limited to:\n\n- http request & response headers\n- usenet messages\n- most python packaging metadata files\n- debian packaging control files\n- ``meta-inf/manifest.mf`` files in java jars\n- a subset of the `yaml <http://www.yaml.org/>`_ serialization format\n\n\u2014 all of which this package can parse.\n\n\ninstallation\n============\n``headerparser`` requires python 3.7 or higher.  just use `pip\n<https://pip.pypa.io>`_ for python 3 (you have pip, right?) to install\n``headerparser``::\n\n    python3 -m pip install headerparser\n\n\nexamples\n========\n\ndefine a parser:\n\n>>> import headerparser\n>>> parser = headerparser.headerparser()\n>>> parser.add_field('name', required=true)\n>>> parser.add_field('type', choices=['example', 'demonstration', 'prototype'], default='example')\n>>> parser.add_field('public', type=headerparser.bool, default=false)\n>>> parser.add_field('tag', multiple=true)\n>>> parser.add_field('data')\n\nparse some headers and inspect the results:\n\n>>> msg = parser.parse('''\\\n... name: sample input\n... public: yes\n... tag: doctest, examples,\n...   whatever\n... tag: readme\n...\n... wait, why i am using a body instead of the \"data\" field?\n... ''')\n>>> sorted(msg.keys())\n['name', 'public', 'tag', 'type']\n>>> msg['name']\n'sample input'\n>>> msg['public']\ntrue\n>>> msg['tag']\n['doctest, examples,\\n  whatever', 'readme']\n>>> msg['type']\n'example'\n>>> msg['data']\ntraceback (most recent call last):\n    ...\nkeyerror: 'data'\n>>> msg.body\n'wait, why i am using a body instead of the \"data\" field?\\n'\n\nfail to parse headers that don't meet your requirements:\n\n>>> parser.parse('type: demonstration')\ntraceback (most recent call last):\n    ...\nheaderparser.errors.missingfielderror: required header field 'name' is not present\n>>> parser.parse('name: bad type\\ntype: other')\ntraceback (most recent call last):\n    ...\nheaderparser.errors.invalidchoiceerror: 'other' is not a valid choice for 'type'\n>>> parser.parse('name: unknown field\\nfield: value')\ntraceback (most recent call last):\n    ...\nheaderparser.errors.unknownfielderror: unknown header field 'field'\n\nallow fields you didn't even think of:\n\n>>> parser.add_additional()\n>>> msg = parser.parse('name: unknown field\\nfield: value')\n>>> msg['field']\n'value'\n\njust split some headers into names & values and worry about validity later:\n\n>>> for field in headerparser.scan('''\\\n... name: scanner sample\n... unknown headers: no problem\n... unparsed-boolean: yes\n... case-sensitive-results: true\n... whitespace around colons:optional\n... whitespace around colons  :  i already said it's optional.\n...   that means you have the _option_ to use as much as you want!\n...\n... and there's a body, too, i guess.\n... '''): print(field)\n('name', 'scanner sample')\n('unknown headers', 'no problem')\n('unparsed-boolean', 'yes')\n('case-sensitive-results', 'true')\n('whitespace around colons', 'optional')\n('whitespace around colons', \"i already said it's optional.\\n  that means you have the _option_ to use as much as you want!\")\n(none, \"and there's a body, too, i guess.\\n\")\n",
  "docs_url": null,
  "keywords": "e-mail,email,mail,rfc822,headers,rfc2822,rfc5322,parser",
  "license": "mit",
  "name": "headerparser",
  "package_url": "https://pypi.org/project/headerparser/",
  "project_url": "https://pypi.org/project/headerparser/",
  "project_urls": {
    "Bug Tracker": "https://github.com/jwodder/headerparser/issues",
    "Documentation": "https://headerparser.readthedocs.io",
    "Homepage": "https://github.com/jwodder/headerparser",
    "Source Code": "https://github.com/jwodder/headerparser"
  },
  "release_url": "https://pypi.org/project/headerparser/0.5.1/",
  "requires_dist": [
    "attrs >=20.1.0",
    "Deprecated ~=1.2"
  ],
  "requires_python": ">=3.7",
  "summary": "argparse for mail-style headers",
  "version": "0.5.1",
  "releases": [],
  "developers": [
    "headerparser@varonathe.org",
    "john_thorvald_wodder_ii"
  ],
  "kwds": "headers header headerparser rfc5322 rfc822",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_headerparser",
  "homepage": "https://github.com/jwodder/headerparser",
  "release_count": 6,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_deprecated"
  ]
}
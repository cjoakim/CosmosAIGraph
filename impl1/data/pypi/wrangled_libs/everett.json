{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. note: make sure to edit the template for this file in docs_tmpl/ and\n.. not the cog-generated version.\n\n=======\neverett\n=======\n\neverett is a python configuration library for your app.\n\n:code:          https://github.com/willkg/everett\n:issues:        https://github.com/willkg/everett/issues\n:license:       mpl v2\n:documentation: https://everett.readthedocs.io/\n\n\ngoals\n=====\n\ngoals of everett:\n\n1. flexible configuration from multiple configured environments\n2. easy testing with configuration\n3. easy automated documentation of configuration for users\n\nfrom that, everett has the following features:\n\n* is flexible for your configuration environment needs and supports\n  process environment, env files, dicts, ini files, yaml files,\n  and writing your own configuration environments\n* facilitates helpful error messages for users trying to configure your\n  software\n* has a sphinx extension for documenting configuration including\n  ``autocomponentconfig`` and ``automoduleconfig`` directives for\n  automatically generating configuration documentation\n* facilitates testing of configuration values\n* supports parsing values of a variety of types like bool, int, lists of\n  things, classes, and others and lets you write your own parsers\n* supports key namespaces\n* supports component architectures\n* works with whatever you're writing--command line tools, web sites, system\n  daemons, etc\n\neverett is inspired by `python-decouple\n<https://github.com/henriquebastos/python-decouple>`_ and `configman\n<https://configman.readthedocs.io/en/latest/>`_.\n\n\ninstall\n=======\n\nrun::\n\n    $ pip install everett\n\nsome configuration environments require additional dependencies::\n\n    # for ini support\n    $ pip install 'everett[ini]'\n\n    # for yaml support\n    $ pip install 'everett[yaml]'\n\nadditionally, if you want to use the sphinx extension to document\nyour configuration, you need to add sphinx::\n\n    # to use the sphinx extension\n    $ pip install 'everett[sphinx]'\n\nquick start\n===========\n\nexample::\n\n    # myserver.py\n\n    \"\"\"\n    minimal example showing how to use configuration for a web app.\n    \"\"\"\n\n    from everett.manager import configmanager\n\n    config = configmanager.basic_config(\n        doc=\"check https://example.com/configuration for documentation.\"\n    )\n\n    host = config(\"host\", default=\"localhost\")\n    port = config(\"port\", default=\"8000\", parser=int)\n    debug_mode = config(\n        \"debug\",\n        default=\"false\",\n        parser=bool,\n        doc=\"set to true for debugmode; false for regular mode\",\n    )\n\n    print(f\"host: {host}\")\n    print(f\"port: {port}\")\n    print(f\"debug_mode: {debug_mode}\")\n\nthen you can run it::\n\n    $ python myserver.py\n    host: localhost\n    port: 8000\n    debug_mode: false\n\nyou can set environment variables to affect configuration::\n\n    $ port=7000 python myserver.py\n    host: localhost\n    port: 7000\n    debug_mode: false\n\nit checks a ``.env`` file in the current directory::\n\n    $ echo \"host=127.0.0.1\" > .env\n    $ python myserver.py\n    host: 127.0.0.1\n    port: 8000\n    debug_mode: false\n\nit spits out useful error information if configuration is wrong::\n\n    $ debug=foo python myserver.py\n    <traceback>\n    everett.invalidvalueerror: valueerror: 'foo' is not a valid bool value\n    debug requires a value parseable by everett.manager.parse_bool\n    debug docs: set to true for debugmode; false for regular mode\n    project docs: check https://example.com/configuration for documentation.\n\nyou can test your code using ``config_override`` in your tests to test various\nconfiguration values::\n\n    # testdebug.py\n\n    \"\"\"\n    minimal example showing how to override configuration values when testing.\n    \"\"\"\n\n    import unittest\n\n    from everett.manager import configmanager, config_override\n\n\n    class app:\n        def __init__(self):\n            config = configmanager.basic_config()\n            self.debug = config(\"debug\", default=\"false\", parser=bool)\n\n\n    class testdebug(unittest.testcase):\n        def test_debug_on(self):\n            with config_override(debug=\"on\"):\n                app = app()\n                self.asserttrue(app.debug)\n\n        def test_debug_off(self):\n            with config_override(debug=\"off\"):\n                app = app()\n                self.assertfalse(app.debug)\n\n\n    if __name__ == \"__main__\":\n        unittest.main()\n\nrun that::\n\n    ..\n    ----------------------------------------------------------------------\n    ran 2 tests in 0.000s\n\n    ok\n\nthat's perfectly fine for a `12-factor <https://12factor.net/>`_ app.\n\nwhen you outgrow that or need different variations of it, you can switch to\ncreating a ``configmanager`` instance that meets your needs.\n\n\nwhy not other libs?\n===================\n\nmost other libraries i looked at had one or more of the following issues:\n\n* were tied to a specific web app framework\n* didn't allow you to specify configuration sources\n* provided poor error messages when users configure things wrong\n* had a global configuration object\n* made it really hard to override specific configuration when writing tests\n* had no facilities for autogenerating configuration documentation\n\n\nhistory\n=======\n\n3.3.0 (in development)\n----------------------\n\nbackwards incompatible changes:\n\n* dropped support for python 3.7. (#220)\n\nfixes and features:\n\n* added support for python 3.12 (#221)\n\n* fix env file parsing in regards to quotes. (#230)\n\n\n3.2.0 (march 21st, 2023)\n------------------------\n\nfixes and features:\n\n* implement ``default_if_empty`` argument which will return the default value\n  (if specified) if the value is the empty string. (#205)\n\n* implement ``parse_time_period`` parser for converting time periods like \"10m4s\"\n  into the total number of seconds that represents.\n\n  ::\n\n      >>> from everett.manager import parse_time_period\n      >>> parse_time_period(\"4m\")\n      240\n\n  (#203)\n\n* implement ``parse_data_size`` parser for converting values like \"40gb\" into\n  the total number of bytes that represents.\n\n  ::\n\n      >>> from everett.manager import parse_data_size\n      >>> parse_time_period(\"40gb\")\n      40000000000\n\n  (#204)\n\n* fix an ``unboundlocalerror`` when using ``automoduleconfig`` and providing a\n  python dotted path to a thing that either kicks up an ``importerror`` or\n  doesn't exist. now it raises a more helpful error. (#201)\n\n\n3.1.0 (october 26th, 2022)\n--------------------------\n\nfixes and features:\n\n* add support for python 3.11. (#187)\n\n* add ``raise_configuration_error`` method on ``configmanager``. (#185)\n\n* improve ``automoduleconfig`` to walk the whole ast and document configuration\n  set by assign::\n\n      somevar = _config(\"somevar\")\n\n  and dict::\n     \n      somegroup = {\n          \"somevar\": _config(\"somevar\"),\n      }\n\n  (#184)\n\n* fix options not showing up on readthedocs. (#186)\n\n\n3.0.0 (january 13th, 2022)\n--------------------------\n\nbackwards incompatible changes:\n\n* dropped support for python 3.6. (#176)\n\n* dropped ``autocomponent`` sphinx directive in favor of\n  ``autocomponentconfig``.\n\nfixes and features:\n\n* add support for python 3.10. (#173)\n\n* rework namespaces so that you can apply a namespace (``with_namespace()``)\n  after binding a component (``with_options()``) (#175)\n\n* overhauled, simplified, and improved documentation. files with example output\n  are now generated using `cog <https://pypi.org/project/cogapp/>`_.\n\n* rewrite sphinx extension.\n\n  this now supports manually documenting configuration using\n  ``everett:component`` and ``everett:option`` directives.\n\n  this adds ``:everett:component:`` and ``:everett:option:`` roles for linking\n  to specific configuration in the docs.\n\n  it also addsh ``autocomponentconfig`` and ``automoduleconfig`` directives for\n  automatically generating documentation.\n\n  when using these directives, items are added to the index and everything is\n  linkable making it easier to find and talk to users about specific\n  configuration items. (#172)\n\n\n2.0.1 (august, 23rd, 2021)\n--------------------------\n\nfixes:\n\n* fix sphinx warning about roles in everett sphinxext. (#165)\n\n* fix ``get_runtime_config`` to work with slots (#166)\n\n\n2.0.0 (july 27th, 2021)\n-----------------------\n\nbackwards incompatible changes:\n\n* this radically reduces the boilerplate required to define components. it also\n  improves the connections between things so it's easier to:\n\n  * determine the configuration required for a single component (taking into\n    account superclasses, overriding, etc)\n  * determine the runtime configuration for a component tree given a\n    configuration manager\n\n  previously, components needed to subclass requiredconfigmixin and provide a\n  \"required_config\" class attribute. something like this::\n\n      from everett.component import requiredconfigmixin, configoptions\n\n      class someclass(requiredconfigmixin):\n          required_config = configoptions()\n          required_config.add_option(\n              \"some_option\",\n              default=\"42\",\n          )\n\n  that's been slimmed down and now looks like this::\n\n      from everett.manager import option\n\n      class someclass:\n          class config:\n              some_option = option(default=\"42\")\n\n  that's much simpler and the underlying implementation code is less tangled\n  and complex, too.\n\n  if you used ``everett.component.requiredconfigmixin`` or\n  ``everett.component.configoptions``, you'll need to update your classes.\n\n  if you didn't use those things, then you don't have to make any changes.\n\n  see the documentation on components for how it all works now.\n\n* changed the way configuration variables are referred to in configuration\n  error messages. previously, i tried to use a general way \"namespace=something\n  key=somethingelse\" but that's confusing and won't match up with project\n  documentation.\n\n  i changed it to the convention used in the process environment and\n  env files. for example, ``foo_bar``.\n\n  if you use ini or yaml for configuration, you can specify a ``msg_builder``\n  argument when you build the ``configmanager`` and build error messages\n  tailored to your users.\n\nfixes:\n\n* switch to ``src/`` repository layout.\n\n* added type annotations and type checking during ci. (#155)\n\n* standardized on f-strings across the codebase.\n\n* switched sphinx theme.\n\n* update of documentation, fleshed out and simplified examples, cleaned up\n  language, reworked structure of api section (previously called library or\n  some unhelpful thing like that), etc.\n\n\n1.0.3 (october 28th, 2020)\n--------------------------\n\nbackwards incompatible changes:\n\n* dropped support for python 3.4. (#96)\n\n* dropped support for python 3.5. (#116)\n\nfixes:\n\n* add support for python 3.7. (#68)\n\n* add support for python 3.8. (#102)\n\n* add support for python 3.9. (#117)\n\n* reformatted code with black, added makefile, switched to github actions.\n\n* fix ``get_runtime_config()`` to infer namespaces. (#118)\n\n* fix ``removedinsphinx50warning``. (#115)\n\n* documentation fixes and clarifications.\n\n\n1.0.2 (february 22nd, 2019)\n---------------------------\n\nfixes:\n\n* improve documentation.\n\n* fix problems when there are nested ``boundconfigs``. now they work\n  correctly. (#90)\n\n* add \"meta\" to options letting you declare additional data on the option\n  when you're adding it.\n\n  for example, this lets you do things like mark options as \"secrets\"\n  so that you know which ones to ``******`` out when logging your\n  configuration. (#88)\n\n\n1.0.1 (january 8th, 2019)\n-------------------------\n\nfixes:\n\n* fix documentation issues.\n\n* package missing ``everett.ext``. thank you, dsblank! (#84)\n\n\n1.0.0 (january 7th, 2019)\n-------------------------\n\nbackwards incompatible changes:\n\n* dropped support for python 2.7. everett no longer supports python 2. (#73)\n\n* dropped support for python 3.3 and added support for python 3.7. thank you,\n  pjz! (#68)\n\n* moved ``configinienv`` to a different module. now you need to import it\n  like this::\n\n      from everett.ext.inifile import configinienv\n\n  (#79)\n\nfeatures:\n\n* everett now logs configuration discovery in the ``everett`` logger at the\n  ``logging.debug`` level. this is helpful for trouble-shooting some kinds of\n  issues. (#74)\n\n* everett now has a yaml configuration environment. in order to use it, you\n  need to install its requirements::\n\n      $ pip install everett[yaml]\n\n  then you can import it like this::\n\n      from everett.ext.yamlfile import configyamlenv\n\n  (#72)\n\nfixes:\n\n* everett no longer requires ``configobj``--it's now optional. if you use\n  ``configinienv``, you can install it with::\n\n      $ pip install everett[ini]\n\n  (#79)\n\n* fixed list parsing and file discovery in configinienv so they match the\n  docs and are more consistent with other envs. thank you, apollo13! (#71)\n\n* added a ``.basic_config()`` for fast opinionated setup that uses the\n  process environment and a ``.env`` file in the current working directory.\n\n* switching to semver.\n\n\n0.9 (april 7th, 2017)\n---------------------\n\nchanged:\n\n* rewrite sphinx extension. the extension is now in the ``everett.sphinxext``\n  module and the directive is now ``.. autocomponent::``. it generates better\n  documentation and it now indexes everett components and options.\n\n  this is backwards-incompatible. you will need to update your sphinx\n  configuration and documentation.\n\n* changed the ``history.rst`` structure.\n\n* changed the repr for ``everett.no_value`` to ``\"no_value\"``.\n\n* ``invalidvalueerror`` and ``configurationmissingerror`` now have\n  ``namespace``, ``key``, and ``parser`` attributes allowing you to build your\n  own messages.\n\nfixed:\n\n* fix an example in the docs where the final key was backwards. thank you, pjz!\n\ndocumentation fixes and updates.\n\n\n0.8 (january 24th, 2017)\n------------------------\n\nadded:\n\n* add ``:namespace:`` and ``:case:`` arguments to autoconfig directive. these\n  make it easier to cater your documentation to your project's needs.\n\n* add support for python 3.6.\n\nminor documentation fixes and updates.\n\n\n0.7 (january 5th, 2017)\n-----------------------\n\nadded:\n\n* feature: you can now include documentation hints and urls for\n  ``configmanager`` objects and config options. this will make it easier for\n  your users to debug configuration errors they're having with your software.\n\nfixed:\n\n* fix ``listof`` so it returns empty lists rather than a list with a single\n  empty string.\n\ndocumentation fixes and updates.\n\n\n0.6 (november 28th, 2016)\n-------------------------\n\nadded:\n\n* add ``requiredconfigmixin.get_runtime_config()`` which returns the runtime\n  configuration for a component or tree of components. this lets you print\n  runtime configuration at startup, generate ini files, etc.\n\n* add ``configobjenv`` which lets you use an object for configuration. this\n  works with argparse's namespace amongst other things.\n\nchanged:\n\n* change ``:show-docstring:`` to take an optional value which is the attribute\n  to pull docstring content from. this means you don't have to mix programming\n  documentation with user documentation--they can be in different attributes.\n\n* improve configuration-related exceptions. with python 3, configuration errors\n  all derive from ``configurationerror`` and have helpful error messages that\n  should make it clear what's wrong with the configuration value. with python 2,\n  you can get other kinds of exceptions thrown depending on the parser used, but\n  configuration error messages should still be helpful.\n\ndocumentation fixes and updates.\n\n\n0.5 (november 8th, 2016)\n------------------------\n\nadded:\n\n* add ``:show-docstring:`` flag to ``autoconfig`` directive.\n\n* add ``:hide-classname:`` flag to ``autoconfig`` directive.\n\nchanged:\n\n* rewrite ``configinienv`` to use configobj which allows for nested sections in\n  ini files. this also allows you to specify multiple ini files and have later\n  ones override earlier ones.\n\nfixed:\n\n* fix ``autoconfig`` sphinx directive and add tests--it was all kinds of broken.\n\ndocumentation fixes and updates.\n\n\n0.4 (october 27th, 2016)\n------------------------\n\nadded:\n\n* add ``raw_value`` argument to config calls. this makes it easier to write code\n  that prints configuration.\n\nfixed:\n\n* fix ``listify(none)`` to return ``[]``.\n\ndocumentation fixes and updates.\n\n\n0.3.1 (october 12th, 2016)\n--------------------------\n\nfixed:\n\n* fix ``alternate_keys`` with components. previously it worked for everything\n  but components. now it works with components, too.\n\ndocumentation fixes and updates.\n\n\n0.3 (october 6th, 2016)\n-----------------------\n\nadded:\n\n* add ``configmanager.from_dict()`` shorthand for building configuration\n  instances.\n\n* add ``.get_namespace()`` to ``configmanager`` and friends for getting\n  the complete namespace for a given config instance as a list of strings.\n\n* add ``alternate_keys`` to config call. this lets you specify a list of keys in\n  order to try if the primary key doesn't find a value. this is helpful for\n  deprecating keys that you used to use in a backwards-compatible way.\n\n* add ``root:`` prefix to keys allowing you to look outside of the current\n  namespace and at the configuration root for configuration values.\n\nchanged:\n\n* make ``configdictenv`` case-insensitive to keys and namespaces.\n\ndocumentation fixes and updates.\n\n\n0.2 (august 16th, 2016)\n-----------------------\n\nadded:\n\n* add ``configenvfileenv`` for supporting ``.env`` files. thank you, paul!\n\n* add \"on\" and \"off\" as valid boolean values. this makes it easier to use config\n  for feature flippers. thank you, paul!\n\nchanged:\n\n* change ``configinienv`` to take a single path or list of paths. thank you,\n  paul!\n\n* make ``no_value`` falsy.\n\nfixed:\n\n* fix ``__call__`` returning none--it should return ``no_value``.\n\nlots of docs updates: finished the section about making your own parsers, added\na section on using dj-database-url, added a section on django-cache-url and\nexpanded on existing examples.\n\n\n0.1 (august 1st, 2016)\n----------------------\n\ninitial writing.\n",
  "docs_url": null,
  "keywords": "conf config configuration component",
  "license": "mplv2",
  "name": "everett",
  "package_url": "https://pypi.org/project/everett/",
  "project_url": "https://pypi.org/project/everett/",
  "project_urls": {
    "Documentation": "https://everett.readthedocs.io/",
    "Homepage": "https://github.com/willkg/everett",
    "Source": "https://github.com/willkg/everett/",
    "Tracker": "https://github.com/willkg/everett/issues"
  },
  "release_url": "https://pypi.org/project/everett/3.3.0/",
  "requires_dist": [
    "configobj ; extra == 'ini'",
    "sphinx ; extra == 'sphinx'",
    "PyYAML ; extra == 'yaml'"
  ],
  "requires_python": ">=3.8",
  "summary": "configuration library for python applications",
  "version": "3.3.0",
  "releases": [],
  "developers": [
    "will_kahn",
    "willkg@mozilla.com"
  ],
  "kwds": "configdictenv _config get_runtime_config required_config basic_config",
  "license_kwds": "mplv2",
  "libtype": "pypi",
  "id": "pypi_everett",
  "homepage": "https://github.com/willkg/everett",
  "release_count": 20,
  "dependency_ids": [
    "pypi_configobj",
    "pypi_pyyaml",
    "pypi_sphinx"
  ]
}
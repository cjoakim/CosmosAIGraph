{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: science/research",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: information analysis"
  ],
  "description": "# kneed\n knee-point detection in python\n\n[![downloads](https://pepy.tech/badge/kneed)](https://pepy.tech/project/kneed) [![downloads](https://pepy.tech/badge/kneed/week)](https://pepy.tech/project/kneed) ![dependents](https://badgen.net/github/dependents-repo/arvkevi/kneed/?icon=github) [![open in streamlit](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://share.streamlit.io/arvkevi/ikneed/main/ikneed.py) [![build status](https://travis-ci.com/arvkevi/kneed.svg?branch=main)](https://travis-ci.com/arvkevi/kneed) [![codecov](https://codecov.io/gh/arvkevi/kneed/branch/main/graph/badge.svg)](https://codecov.io/gh/arvkevi/kneed)[![doi](https://zenodo.org/badge/113799037.svg)](https://zenodo.org/badge/latestdoi/113799037)\n\n\nthis repository is an attempt to implement the kneedle algorithm, published [here](https://www1.icsi.berkeley.edu/~barath/papers/kneedle-simplex11.pdf). given a set of `x` and `y` values, `kneed` will return the knee point of the function. the knee point is the point of maximum curvature.\n\n![](https://raw.githubusercontent.com/arvkevi/kneed/main/images/functions_args_summary.png)\n\n## table of contents\n- [installation](#installation)\n- [usage](#usage)\n  - [input data](#input-data)\n  - [find knee](#find-knee)\n  - [visualize](#visualize)\n- [documentation](#documentation)\n- [interactive](#interactive)\n- [contributing](#contributing)\n- [citation](#citation)\n\n## installation  \n`kneed` has been tested with python 3.7, 3.8, 3.9, and 3.10.\n\n**anaconda**\n```bash\n$ conda install -c conda-forge kneed\n```\n\n**pip**\n```bash\n$ pip install kneed # to install only knee-detection algorithm\n$ pip install kneed[plot] # to also install plotting functions for quick visualizations\n```\n\n**clone from github**\n```bash\n$ git clone https://github.com/arvkevi/kneed.git && cd kneed\n$ pip install -e .\n```\n\n## usage\nthese steps introduce how to use `kneed` by reproducing figure 2 from the manuscript.\n\n### input data\nthe `datagenerator` class is only included as a utility to generate sample datasets. \n>  note: `x` and `y` must be equal length arrays.\n```python\nfrom kneed import datagenerator, kneelocator\n\nx, y = datagenerator.figure2()\n\nprint([round(i, 3) for i in x])\nprint([round(i, 3) for i in y])\n\n[0.0, 0.111, 0.222, 0.333, 0.444, 0.556, 0.667, 0.778, 0.889, 1.0]\n[-5.0, 0.263, 1.897, 2.692, 3.163, 3.475, 3.696, 3.861, 3.989, 4.091]\n```\n\n### find knee  \nthe knee (or elbow) point is calculated simply by instantiating the `kneelocator` class with `x`, `y` and the appropriate `curve` and `direction`.  \nhere, `kneedle.knee` and/or `kneedle.elbow` store the point of maximum curvature.\n\n```python\nkneedle = kneelocator(x, y, s=1.0, curve=\"concave\", direction=\"increasing\")\n\nprint(round(kneedle.knee, 3))\n0.222\n\nprint(round(kneedle.elbow, 3))\n0.222\n```\n\nthe knee point returned is a value along the `x` axis. the `y` value at the knee can be identified:\n\n```python\nprint(round(kneedle.knee_y, 3))\n1.897\n```\n\n### visualize\nthe `kneelocator` class also has two plotting functions for quick visualizations.\n**note that all (x, y) are transformed for the normalized plots**\n```python\n# normalized data, normalized knee, and normalized distance curve.\nkneedle.plot_knee_normalized()\n```\n\n![](https://raw.githubusercontent.com/arvkevi/kneed/main/images/figure2.knee.png)\n\n```python\n# raw data and knee.\nkneedle.plot_knee()\n```\n\n![](https://raw.githubusercontent.com/arvkevi/kneed/main/images/figure2.knee.raw.png)\n\n## documentation\ndocumentation of the parameters and a full api reference can be found [here](https://kneed.readthedocs.io/).\n\n## interactive\nan interactive streamlit app was developed to help users explore the effect of tuning the parameters.\nthere are two sites where you can test out kneed by copy-pasting your own data:\n1. https://share.streamlit.io/arvkevi/ikneed/main/ikneed.py\n2. https://ikneed.herokuapp.com/\n\nyou can also run your own version -- head over to the [source code for ikneed](https://github.com/arvkevi/ikneed).\n\n![ikneed](images/ikneed.gif)\n\n## contributing\n\ncontributions are welcome, please refer to [contributing](https://github.com/arvkevi/kneed/blob/main/contributing.md) \nto learn more about how to contribute.                            \n\n## citation\n\nfinding a \u201ckneedle\u201d in a haystack:\ndetecting knee points in system behavior\nville satopa\n\u2020\n, jeannie albrecht\u2020\n, david irwin\u2021\n, and barath raghavan\u00a7\n\u2020williams college, williamstown, ma\n\u2021university of massachusetts amherst, amherst, ma\n\u00a7\ninternational computer science institute, berkeley, ca\n",
  "docs_url": null,
  "keywords": "elbow-method,knee-detection,system",
  "license": "",
  "name": "kneed",
  "package_url": "https://pypi.org/project/kneed/",
  "project_url": "https://pypi.org/project/kneed/",
  "project_urls": {
    "Documentation": "https://kneed.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/arvkevi/kneed"
  },
  "release_url": "https://pypi.org/project/kneed/0.8.5/",
  "requires_dist": [
    "numpy>=1.14.2",
    "scipy>=1.0.0",
    "matplotlib>=2.2.5; extra == 'plot'",
    "matplotlib>=2.2.5; extra == 'testing'",
    "pytest-cov>=3.0.0; extra == 'testing'",
    "pytest>=5.0.1; extra == 'testing'"
  ],
  "requires_python": ">=3.5",
  "summary": "knee-point detection in python",
  "version": "0.8.5",
  "releases": [],
  "developers": [
    "arvkevi@gmail.com"
  ],
  "kwds": "kneelocator knee streamlit_badge_black_white knee_y plot_knee",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_kneed",
  "homepage": "",
  "release_count": 27,
  "dependency_ids": [
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scipy"
  ]
}
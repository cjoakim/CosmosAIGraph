{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: sound/audio"
  ],
  "description": "![pedalboard logo](https://user-images.githubusercontent.com/213293/131147303-4805181a-c7d5-4afe-afb2-f591a4b8e586.png)\n\n\n[![license: gpl v3](https://img.shields.io/badge/license-gplv3-blue.svg)](https://github.com/spotify/pedalboard/blob/master/license)\n[![documentation](https://img.shields.io/badge/documentation-on%20github.io-brightgreen)](https://spotify.github.io/pedalboard)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/pedalboard)](https://pypi.org/project/pedalboard)\n[![supported platforms](https://img.shields.io/badge/platforms-macos%20%7c%20windows%20%7c%20linux-green)](https://pypi.org/project/pedalboard)\n[![apple silicon support for macos and linux (docker)](https://img.shields.io/badge/apple%20silicon-macos%20and%20linux-brightgreen)](https://pypi.org/project/pedalboard)\n[![pypi - wheel](https://img.shields.io/pypi/wheel/pedalboard)](https://pypi.org/project/pedalboard)\n[![test badge](https://github.com/spotify/pedalboard/actions/workflows/all.yml/badge.svg)](https://github.com/spotify/pedalboard/actions/workflows/all.yml)\n[![coverage badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/psobot/8736467e9952991ef44a67915ee7c762/raw/coverage.json)](https://gist.githubusercontent.com/psobot/8736467e9952991ef44a67915ee7c762/raw/coverage.json)\n[![pypi - downloads](https://img.shields.io/pypi/dm/pedalboard)](https://pypistats.org/packages/pedalboard)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.7817838.svg)](https://doi.org/10.5281/zenodo.7817838)\n[![github repo stars](https://img.shields.io/github/stars/spotify/pedalboard?style=social)](https://github.com/spotify/pedalboard/stargazers)\n\n\n`pedalboard` is a python library for working with audio: reading, writing, rendering, adding effects, and more. it supports most popular audio file formats and a number of common audio effects out of the box, and also allows the use of [vst3\u00ae](https://www.steinberg.net/en/company/technologies/vst3.html) and [audio unit](https://en.wikipedia.org/wiki/audio_units) formats for loading third-party software instruments and effects.\n\n`pedalboard` was built by [spotify's audio intelligence lab](https://research.atspotify.com/audio-intelligence/) to enable using studio-quality audio effects from within python and tensorflow. internally at spotify, `pedalboard` is used for [data augmentation](https://en.wikipedia.org/wiki/data_augmentation) to improve machine learning models and to help power features like [spotify's ai dj](https://newsroom.spotify.com/2023-02-22/spotify-debuts-a-new-ai-dj-right-in-your-pocket/) and [ai voice translation](https://newsroom.spotify.com/2023-09-25/ai-voice-translation-pilot-lex-fridman-dax-shepard-steven-bartlett/). `pedalboard` also helps in the process of content creation, making it possible to add effects to audio without using a digital audio workstation.\n\n[![documentation](https://img.shields.io/badge/documentation-on%20github.io-brightgreen)](https://spotify.github.io/pedalboard)\n\n## features \n\n - built-in audio i/o utilities ([pedalboard.io](https://spotify.github.io/pedalboard/reference/pedalboard.io.html))\n   - support for reading and writing aiff, flac, mp3, ogg, and wav files on all platforms with no dependencies\n   - additional support for reading aac, ac3, wma, and other formats depending on platform\n   - support for on-the-fly resampling of audio files and streams with `o(1)` memory usage\n   - live audio effects via [`audiostream`](https://spotify.github.io/pedalboard/reference/pedalboard.io.html#pedalboard.io.audiostream)\n - built-in support for a number of basic audio transformations, including:\n   - guitar-style effects: `chorus`, `distortion`, `phaser`, `clipping`\n   - loudness and dynamic range effects: `compressor`, `gain`, `limiter`\n   - equalizers and filters: `highpassfilter`, `ladderfilter`, `lowpassfilter`\n   - spatial effects: `convolution`, `delay`, `reverb`\n   - pitch effects: `pitchshift`\n   - lossy compression: `gsmfullratecompressor`, `mp3compressor`\n   - quality reduction: `resample`, `bitcrush`\n - supports vst3\u00ae instrument and effect plugins on macos, windows, and linux ([`pedalboard.load_plugin`](https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.load_plugin))\n - supports instrument and effect audio units on macos\n - strong thread-safety, memory usage, and speed guarantees\n   - releases python's global interpreter lock (gil) to allow use of multiple cpu cores\n     - no need to use `multiprocessing`!\n   - even when only using one thread:\n     - processes audio up to **300x** faster than [pysox](https://github.com/rabitt/pysox) for single transforms, and 2-5x faster than [soxbindings](https://github.com/pseeth/soxbindings) (via [icorv](https://github.com/icorv/pedalboard_with_tfdata))\n     - reads audio files up to **4x** faster than [librosa.load](https://librosa.org/doc/main/generated/librosa.load.html) (in many cases)\n - tested compatibility with tensorflow - can be used in `tf.data` pipelines!\n\n## installation\n\n`pedalboard` is available via pypi (via [platform wheels](https://packaging.python.org/guides/distributing-packages-using-setuptools/#platform-wheels)):\n```\npip install pedalboard  # that's it! no other dependencies required.\n```\n\nif you are new to python, follow [installation.md](https://github.com/spotify/pedalboard/blob/master/installation.md) for a robust guide.\n\n### compatibility\n\n`pedalboard` is thoroughly tested with python 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, and 3.12 as well as experimental support for pypy 3.7, 3.8, and 3.9.\n\n- linux\n  - tested heavily in production use cases at spotify\n  - tested automatically on github with vsts\n  - platform `manylinux` and `musllinux` wheels built for `x86_64` (intel/amd) and `aarch64` (arm/apple silicon)\n  - most linux vsts require a relatively modern linux installation (with glibc > 2.27)\n- macos\n  - tested manually with vsts and audio units\n  - tested automatically on github with vsts\n  - platform wheels available for both intel and apple silicon\n  - compatible with a wide range of vsts and audio units\n- windows\n  - tested automatically on github with vsts\n  - platform wheels available for `amd64` (x86-64, intel/amd)\n\n## examples\n\n> **note**: if you'd rather watch a video instead of reading examples or documentation, **watch [_working with audio in python (feat. pedalboard)_ on youtube](https://www.youtube.com/watch?v=nyhkqxpfalg)**.\n\n### quick start\n\n```python\nfrom pedalboard import pedalboard, chorus, reverb\nfrom pedalboard.io import audiofile\n\n# make a pedalboard object, containing multiple audio plugins:\nboard = pedalboard([chorus(), reverb(room_size=0.25)])\n\n# open an audio file for reading, just like a regular file:\nwith audiofile('some-file.wav') as f:\n  \n  # open an audio file to write to:\n  with audiofile('output.wav', 'w', f.samplerate, f.num_channels) as o:\n  \n    # read one second of audio at a time, until the file is empty:\n    while f.tell() < f.frames:\n      chunk = f.read(f.samplerate)\n      \n      # run the audio through our pedalboard:\n      effected = board(chunk, f.samplerate, reset=false)\n      \n      # write the output to our output file:\n      o.write(effected)\n```\n\n> **note**: for more information about how to process audio through\n> pedalboard plugins, including how the `reset` parameter works,\n> see [the documentation for `pedalboard.plugin.process`](\n> https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.plugin.process).\n\n### making a guitar-style pedalboard\n\n```python\n# don't do import *! (it just makes this example smaller)\nfrom pedalboard import *\nfrom pedalboard.io import audiofile\n\n# read in a whole file, resampling to our desired sample rate:\nsamplerate = 44100.0\nwith audiofile('guitar-input.wav').resampled_to(samplerate) as f:\n  audio = f.read(f.frames)\n\n# make a pretty interesting sounding guitar pedalboard:\nboard = pedalboard([\n    compressor(threshold_db=-50, ratio=25),\n    gain(gain_db=30),\n    chorus(),\n    ladderfilter(mode=ladderfilter.mode.hpf12, cutoff_hz=900),\n    phaser(),\n    convolution(\"./guitar_amp.wav\", 1.0),\n    reverb(room_size=0.25),\n])\n\n# pedalboard objects behave like lists, so you can add plugins:\nboard.append(compressor(threshold_db=-25, ratio=10))\nboard.append(gain(gain_db=10))\nboard.append(limiter())\n\n# ... or change parameters easily:\nboard[0].threshold_db = -40\n\n# run the audio through this pedalboard!\neffected = board(audio, samplerate)\n\n# write the audio back as a wav file:\nwith audiofile('processed-output.wav', 'w', samplerate, effected.shape[0]) as f:\n  f.write(effected)\n```\n\n### using vst3\u00ae or audio unit instrument and effect plugins\n\n```python\nfrom pedalboard import pedalboard, reverb, load_plugin\nfrom pedalboard.io import audiofile\nfrom mido import message # not part of pedalboard, but convenient!\n\n# load a vst3 or audio unit plugin from a known path on disk:\ninstrument = load_plugin(\"./vsts/magical8bitplug2.vst3\")\neffect = load_plugin(\"./vsts/roughrider3.vst3\")\n\nprint(effect.parameters.keys())\n# dict_keys([\n#   'sc_hpf_hz', 'input_lvl_db', 'sensitivity_db',\n#   'ratio', 'attack_ms', 'release_ms', 'makeup_db',\n#   'mix', 'output_lvl_db', 'sc_active',\n#   'full_bandwidth', 'bypass', 'program',\n# ])\n\n# set the \"ratio\" parameter to 15\neffect.ratio = 15\n\n# render some audio by passing midi to an instrument:\nsample_rate = 44100\naudio = instrument(\n  [message(\"note_on\", note=60), message(\"note_off\", note=60, time=5)],\n  duration=5, # seconds\n  sample_rate=sample_rate,\n)\n\n# apply effects to this audio:\neffected = effect(audio, sample_rate)\n\n# ...or put the effect into a chain with other plugins:\nboard = pedalboard([effect, reverb()])\n# ...and run that pedalboard with the same vst instance!\neffected = board(audio, sample_rate)\n```\n\n### creating parallel effects chains\n\nthis example creates a delayed pitch-shift effect by running\nmultiple pedalboards in parallel on the same audio. `pedalboard`\nobjects are themselves `plugin` objects, so you can nest them\nas much as you like:\n\n```python\nfrom pedalboard import pedalboard, compressor, delay, distortion, gain, pitchshift, reverb, mix\n\npassthrough = gain(gain_db=0)\n\ndelay_and_pitch_shift = pedalboard([\n  delay(delay_seconds=0.25, mix=1.0),\n  pitchshift(semitones=7),\n  gain(gain_db=-3),\n])\n\ndelay_longer_and_more_pitch_shift = pedalboard([\n  delay(delay_seconds=0.5, mix=1.0),\n  pitchshift(semitones=12),\n  gain(gain_db=-6),\n])\n\nboard = pedalboard([\n  # put a compressor at the front of the chain:\n  compressor(),\n  # run all of these pedalboards simultaneously with the mix plugin:\n  mix([\n    passthrough,\n    delay_and_pitch_shift,\n    delay_longer_and_more_pitch_shift,\n  ]),\n  # add a reverb on the final mix:\n  reverb()\n])\n```\n\n### running pedalboard on live audio\n\non macos or windows, pedalboard supports streaming live audio through\n[an `audiostream` object](https://spotify.github.io/pedalboard/reference/pedalboard.io.html#pedalboard.io.audiostream),\nallowing for real-time manipulation of audio by adding effects in python.\n\n```python\nfrom pedalboard import pedalboard, chorus, compressor, delay, gain, reverb, phaser\nfrom pedalboard.io import audiostream\n\n# open up an audio stream:\nwith audiostream(\n  input_device_name=\"apogee jam+\",  # guitar interface\n  output_device_name=\"macbook pro speakers\"\n) as stream:\n  # audio is now streaming through this pedalboard and out of your speakers!\n  stream.plugins = pedalboard([\n      compressor(threshold_db=-50, ratio=25),\n      gain(gain_db=30),\n      chorus(),\n      phaser(),\n      convolution(\"./guitar_amp.wav\", 1.0),\n      reverb(room_size=0.25),\n  ])\n  input(\"press enter to stop streaming...\")\n\n# the live audiostream is now closed, and audio has stopped.\n```\n\n### using pedalboard in `tf.data` pipelines\n\n```python\nimport tensorflow as tf \n\nsr = 48000 \n\n# put whatever plugins you like in here:\nplugins = pedalboard.pedalboard([pedalboard.gain(), pedalboard.reverb()]) \n\n# make a dataset containing random noise:\n# note: for real training, here's where you'd want to load your audio somehow:\nds = tf.data.dataset.from_tensor_slices([np.random.rand(sr)])\n\n# apply our pedalboard instance to the tf.data pipeline:\nds = ds.map(lambda audio: tf.numpy_function(plugins.process, [audio, sr], tf.float32)) \n\n# create and train a (dummy) ml model on this audio:\nmodel = tf.keras.models.sequential([tf.keras.layers.inputlayer(input_shape=(sr,)), tf.keras.layers.dense(1)])\nmodel.compile(loss=\"mse\") \nmodel.fit(ds.map(lambda effected: (effected, 1)).batch(1), epochs=10)\n```\n\nfor more examples, see:\n - [the \"examples\" folder of this repository](https://github.com/spotify/pedalboard/tree/master/examples)\n - [the \"pedalboard demo\" colab notebook](https://colab.research.google.com/drive/1bhjhjj1acoolxkl_lofg99xs3qwvrhch)\n - [_working with audio in python (feat. pedalboard)_ by peter sobot at europython 2022](https://www.youtube.com/watch?v=nyhkqxpfalg)\n - [an interactive web demo on hugging face spaces and gradio](https://huggingface.co/spaces/akhaliq/pedalboard) (via [@ak391](https://github.com/ak391)) \n\n## contributing\n\ncontributions to `pedalboard` are welcomed! see [contributing.md](https://github.com/spotify/pedalboard/blob/master/contributing.md) for details.\n\n## citing\n\nto cite `pedalboard` in academic work, use [its entry on zenodo](https://doi.org/10.5281/zenodo.7817838): [![doi 7817838](https://zenodo.org/badge/doi/10.5281/zenodo.7817838.svg)](https://doi.org/10.5281/zenodo.7817838)\n\nto cite via bibtex:\n\n```tex\n@software{sobot_peter_2023_7817838,\n  author       = {sobot, peter},\n  title        = {pedalboard},\n  month        = jul,\n  year         = 2021,\n  publisher    = {zenodo},\n  doi          = {10.5281/zenodo.7817838},\n  url          = {https://doi.org/10.5281/zenodo.7817838}\n}\n```\n\n## license\n`pedalboard` is copyright 2021-2023 spotify ab.\n\n`pedalboard` is licensed under the [gnu general public license v3](https://www.gnu.org/licenses/gpl-3.0.en.html). `pedalboard` includes a number of libraries that are statically compiled, and which carry the following licenses:\n\n - the core audio processing code is pulled from [juce 6](https://juce.com/), which is [dual-licensed under a commercial license and the gplv3](https://juce.com/juce-6-licence).\n - the [vst3 sdk](https://github.com/steinbergmedia/vst3sdk), bundled with juce, is owned by [steinberg\u00ae media technologies gmbh](https://www.steinberg.net/en/home.html) and licensed under the gplv3.\n - the `pitchshift` plugin uses [the rubber band library](https://github.com/breakfastquay/rubberband), which is [dual-licensed under a commercial license](https://breakfastquay.com/technology/license.html) and the gplv2 (or newer).\n - the `mp3compressor` plugin uses [libmp3lame from the lame project](https://lame.sourceforge.io/), which is [licensed under the lgplv2](https://github.com/lameproject/lame/blob/master/readme) and [upgraded to the gplv3 for inclusion in this project (as permitted by the lgplv2)](https://www.gnu.org/licenses/gpl-faq.html#allcompatibility).\n - the `gsmfullratecompressor` plugin uses [libgsm](http://quut.com/gsm/), which is [licensed under the isc license](https://github.com/timothytylee/libgsm/blob/master/copyright) and [compatible with the gplv3](https://www.gnu.org/licenses/license-list.en.html#isc).\n\n_vst is a registered trademark of steinberg media technologies gmbh._\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pedalboard",
  "package_url": "https://pypi.org/project/pedalboard/",
  "project_url": "https://pypi.org/project/pedalboard/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/pedalboard/0.8.7/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "summary": "a python library for adding effects to audio.",
  "version": "0.8.7",
  "releases": [],
  "developers": [
    "peter_sobot",
    "psobot@spotify.com"
  ],
  "kwds": "pedalboard pedalboards pedalboard_with_tfdata badge spotify",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pedalboard",
  "homepage": "",
  "release_count": 53,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
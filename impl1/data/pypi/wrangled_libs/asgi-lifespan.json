{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "framework :: trio",
    "intended audience :: developers",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# asgi-lifespan\n\n[![build status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.asgi-lifespan?branchname=master)](https://dev.azure.com/florimondmanca/public/_build?definitionid=12)\n[![coverage](https://codecov.io/gh/florimondmanca/asgi-lifespan/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/asgi-lifespan)\n[![package version](https://badge.fury.io/py/asgi-lifespan.svg)](https://pypi.org/project/asgi-lifespan)\n\nprogrammatically send startup/shutdown [lifespan](https://asgi.readthedocs.io/en/latest/specs/lifespan.html) events into [asgi](https://asgi.readthedocs.io) applications. when used in combination with an asgi-capable http client such as [httpx](https://www.python-httpx.org), this allows mocking or testing asgi applications without having to spin up an asgi server.\n\n## features\n\n- send lifespan events to an asgi app using `lifespanmanager`.\n- support for [`asyncio`](https://docs.python.org/3/library/asyncio) and [`trio`](https://trio.readthedocs.io).\n- fully type-annotated.\n- 100% test coverage.\n\n## installation\n\n```bash\npip install 'asgi-lifespan==2.*'\n```\n\n## usage\n\n`asgi-lifespan` provides a `lifespanmanager` to programmatically send asgi lifespan events into an asgi app. this can be used to programmatically startup/shutdown an asgi app without having to spin up an asgi server.\n\n`lifespanmanager` can run on either `asyncio` or `trio`, and will auto-detect the async library in use.\n\n### basic usage\n\n```python\n# example.py\nfrom contextlib import asynccontextmanager\nfrom asgi_lifespan import lifespanmanager\nfrom starlette.applications import starlette\n\n# example lifespan-capable asgi app. any asgi app that supports\n# the lifespan protocol will do, e.g. fastapi, quart, responder, ...\n\n@asynccontextmanager\nasync def lifespan(app):\n    print(\"starting up!\")\n    yield\n    print(\"shutting down!\")\n\napp = starlette(lifespan=lifespan)\n\nasync def main():\n    async with lifespanmanager(app) as manager:\n        print(\"we're in!\")\n\n# on asyncio:\nimport asyncio; asyncio.run(main())\n\n# on trio:\n# import trio; trio.run(main)\n```\n\noutput:\n\n```console\n$ python example.py\nstarting up!\nwe're in!\nshutting down!\n```\n\n### sending lifespan events for testing\n\nthe example below demonstrates how to use `asgi-lifespan` in conjunction with [httpx](https://www.python-httpx.org) and `pytest` in order to send test requests into an asgi app.\n\n- install dependencies:\n\n```\npip install asgi-lifespan httpx starlette pytest pytest-asyncio\n```\n\n- test script:\n\n```python\n# test_app.py\nfrom contextlib import asynccontextmanager\nimport httpx\nimport pytest\nimport pytest_asyncio\nfrom asgi_lifespan import lifespanmanager\nfrom starlette.applications import starlette\nfrom starlette.responses import plaintextresponse\nfrom starlette.routing import route\n\n\n@pytest_asyncio.fixture\nasync def app():\n    @asynccontextmanager\n    async def lifespan(app):\n        print(\"starting up\")\n        yield\n        print(\"shutting down\")\n\n    async def home(request):\n        return plaintextresponse(\"hello, world!\")\n\n    app = starlette(\n        routes=[route(\"/\", home)],\n        lifespan=lifespan,\n    )\n\n    async with lifespanmanager(app) as manager:\n        print(\"we're in!\")\n        yield manager.app\n\n\n@pytest_asyncio.fixture\nasync def client(app):\n    async with httpx.asyncclient(app=app, base_url=\"http://app.io\") as client:\n        print(\"client is ready\")\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_home(client):\n    print(\"testing\")\n    response = await client.get(\"/\")\n    assert response.status_code == 200\n    assert response.text == \"hello, world!\"\n    print(\"ok\")\n```\n\n- run the test suite:\n\n```console\n$ pytest -s test_app.py\n======================= test session starts =======================\n\ntest_app.py starting up\nwe're in!\nclient is ready\ntesting\nok\n.shutting down\n\n======================= 1 passed in 0.88s =======================\n```\n\n### accessing state\n\n`lifespanmanager` provisions a [lifespan state](https://asgi.readthedocs.io/en/latest/specs/lifespan.html#lifespan-state) which persists data from the lifespan cycle for use in request/response handling.\n\nfor your app to be aware of it, be sure to use `manager.app` instead of the `app` itself when inside the context manager.\n\nfor example if using httpx as an async test client:\n\n```python\nasync with lifespanmanager(app) as manager:\n    async with httpx.asyncclient(app=manager.app) as client:\n        ...\n```\n\n## api reference\n\n### `lifespanmanager`\n\n```python\ndef __init__(\n    self,\n    app: callable,\n    startup_timeout: optional[float] = 5,\n    shutdown_timeout: optional[float] = 5,\n)\n```\n\nan [asynchronous context manager](https://docs.python.org/3/reference/datamodel.html#async-context-managers) that starts up an asgi app on enter and shuts it down on exit.\n\nmore precisely:\n\n- on enter, start a `lifespan` request to `app` in the background, then send the `lifespan.startup` event and wait for the application to send `lifespan.startup.complete`.\n- on exit, send the `lifespan.shutdown` event and wait for the application to send `lifespan.shutdown.complete`.\n- if an exception occurs during startup, shutdown, or in the body of the `async with` block, it bubbles up and no shutdown is performed.\n\n**example**\n\n```python\nasync with lifespanmanager(app) as manager:\n    # 'app' was started up.\n    ...\n\n# 'app' was shut down.\n```\n\n**parameters**\n\n- `app` (`callable`): an asgi application.\n- `startup_timeout` (`optional[float]`, defaults to 5): maximum number of seconds to wait for the application to startup. use `none` for no timeout.\n- `shutdown_timeout` (`optional[float]`, defaults to 5): maximum number of seconds to wait for the application to shutdown. use `none` for no timeout.\n\n**yields**\n\n- `manager` (`lifespanmanager`): the `lifespanmanager` itself. in case you use [lifespan state](https://asgi.readthedocs.io/en/latest/specs/lifespan.html#lifespan-state), use `async with lifespanmanager(app) as manager: ...` then access `manager.app` to get a reference to the state-aware app.\n\n**raises**\n\n- `lifespannotsupported`: if the application does not seem to support the lifespan protocol. based on the rationale that if the app supported the lifespan protocol then it would successfully receive the `lifespan.startup` asgi event, unsupported lifespan protocol is detected in two situations:\n  - the application called `send()` before calling `receive()` for the first time.\n  - the application raised an exception during startup before making its first call to `receive()`. for example, this may be because the application failed on a statement such as `assert scope[\"type\"] == \"http\"`.\n- `timeouterror`: if startup or shutdown timed out.\n- `exception`: any exception raised by the application (during startup, shutdown, or within the `async with` body) that does not indicate it does not support the lifespan protocol.\n\n## license\n\nmit\n\n# changelog\n\nall notable changes to this project will be documented in this file.\n\nthe format is based on [keep a changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 2.1.0 - 2023-03-28\n\n### added\n\n- add support for lifespan state. (pull #59)\n\n## 2.0.0 - 2022-11-11\n\n### removed\n\n- drop support for python 3.6. (pull #55)\n\n### added\n\n- add official support for python 3.11. (pull #55)\n- add official support for python 3.9 and 3.10. (pull #46 - thanks @euri10)\n\n### fixed\n\n- ensure compatibility with mypy 0.990+, which made `no_implicit_optional` the default. (pull #53 - thanks @allseeingeyetolledewesew)\n\n## 1.0.1 - 2020-06-08\n\n### fixed\n\n- update development status to `5 - production/stable`. (pull #32)\n\n## 1.0.0 - 2020-02-02\n\n### removed\n\n- drop `lifespan` and `lifespanmiddleware`. please use starlette's built-in lifespan capabilities instead. (pull #27)\n\n### fixed\n\n- use `sniffio` for auto-detecting the async environment. (pull #28)\n- enforce 100% test coverage on ci. (pull #29)\n\n### changed\n\n- enforce importing from the top-level package by switching to private internal modules. (pull #26)\n\n## 0.6.0 - 2019-11-29\n\n### changed\n\n- move `lifespan` to the `lifespan` module. (pull #21)\n- refactor `lifespanmanager` to drop dependency on `asynccontextmanager` on 3.6. (pull #20)\n\n## 0.5.0 - 2019-11-29\n\n- enter beta development status.\n\n### removed\n\n- remove `curio` support. (pull #18)\n\n### added\n\n- ship binary distributions (wheels) alongside source distributions.\n\n### changed\n\n- use custom concurrency backends instead of `anyio` for asyncio and trio support. (pull #18)\n\n## 0.4.2 - 2019-10-06\n\n### fixed\n\n- ensure `py.typed` is bundled with the package so that type checkers can detect type annotations. (pull #16)\n\n## 0.4.1 - 2019-09-29\n\n### fixed\n\n- improve error handling in `lifespanmanager` (pull #11):\n  - exceptions raised in the context manager body or during shutdown are now properly propagated.\n  - unsupported lifespan is now also detected when the app calls `send()` before calling having called `receive()` at least once.\n\n## 0.4.0 - 2019-09-29\n\n- enter alpha development status.\n\n## 0.3.1 - 2019-09-29\n\n### added\n\n- add configurable timeouts to `lifespanmanager`. (pull #10)\n\n## 0.3.0 - 2019-09-29\n\n### added\n\n- add `lifespanmanager` for sending lifespan events into an asgi app. (pull #5)\n\n## 0.2.0 - 2019-09-28\n\n### added\n\n- add `lifespanmiddleware`, an asgi middleware to add lifespan support to an asgi app. (pull #9)\n\n## 0.1.0 - 2019-09-28\n\n### added\n\n- add `lifespan`, an asgi app implementing the lifespan protocol with event handler registration support. (pull #7)\n\n## 0.0.2 - 2019-09-28\n\n### fixed\n\n- installation from pypi used to fail due to missing `manifest.in`.\n\n## 0.0.1 - 2019-09-28\n\n### added\n\n- empty package.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "asgi-lifespan",
  "package_url": "https://pypi.org/project/asgi-lifespan/",
  "project_url": "https://pypi.org/project/asgi-lifespan/",
  "project_urls": {
    "Homepage": "https://github.com/florimondmanca/asgi-lifespan"
  },
  "release_url": "https://pypi.org/project/asgi-lifespan/2.1.0/",
  "requires_dist": [
    "sniffio"
  ],
  "requires_python": ">=3.7",
  "summary": "programmatic startup/shutdown of asgi apps.",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "florimond.manca@protonmail.com"
  ],
  "kwds": "asgi_lifespan asgi lifespanmiddleware lifespanmanager lifespannotsupported",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_asgi_lifespan",
  "homepage": "",
  "release_count": 15,
  "dependency_ids": [
    "pypi_sniffio"
  ]
}
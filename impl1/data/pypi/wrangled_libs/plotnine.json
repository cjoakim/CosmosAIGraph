{
  "classifiers": [
    "framework :: matplotlib",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: unix",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "# plotnine\n\n[![release](https://img.shields.io/pypi/v/plotnine.svg)](https://pypi.python.org/pypi/plotnine)\n[![license](https://img.shields.io/pypi/l/plotnine.svg)](https://pypi.python.org/pypi/plotnine)\n[![doi](https://zenodo.org/badge/89276692.svg)](https://zenodo.org/badge/latestdoi/89276692)\n[![build status](https://github.com/has2k1/plotnine/workflows/build/badge.svg?branch=main)](https://github.com/has2k1/plotnine/actions?query=branch%3amain+workflow%3a%22build%22)\n[![documentation](https://readthedocs.org/projects/plotnine/badge/?version=latest)](https://plotnine.readthedocs.io/en/latest/)\n[![coverage](https://codecov.io/github/has2k1/plotnine/coverage.svg?branch=main)](https://codecov.io/github/has2k1/plotnine?branch=main)\n\nplotnine is an implementation of a *grammar of graphics* in python\nbased on [ggplot2](https://github.com/tidyverse/ggplot2).\nthe grammar allows you to compose plots by explicitly mapping variables in a\ndataframe to the visual objects that make up the plot.\n\n<img width=\"33%\" align=\"right\" src=\"./doc/images/logo-540.png\">\n\nplotting with a *grammar of graphics* is powerful. custom (and otherwise\ncomplex) plots are easy to think about and build incrementaly, while the\nsimple plots remain simple to create.\n\nto learn more about how to use plotnine, check out the\n[documentation](https://plotnine.readthedocs.io/en/latest/). since plotnine\nhas an api similar to ggplot2, where it lacks in coverage the\n[ggplot2 documentation](http://ggplot2.tidyverse.org/reference/index.html)\nmay be helpful.\n\n\n## example\n\n```python\nfrom plotnine import *\nfrom plotnine.data import mtcars\n```\n\nbuilding a complex plot piece by piece.\n\n1. scatter plot\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\"))\n    + geom_point())\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-1.png\">\n\n2. scatter plot colored according some variable\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point())\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-2.png\">\n\n3. scatter plot colored according some variable and\n   smoothed with a linear model with confidence intervals.\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\"))\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-3.png\">\n\n4. scatter plot colored according some variable,\n   smoothed with a linear model with confidence intervals and\n   plotted on separate panels.\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"~gear\"))\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-4.png\">\n\n5. adjust the themes\n\n   i) make it playful\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"~gear\")\n    + theme_xkcd())\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-5.png\">\n\n   ii) or professional\n\n   ```python\n   (ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"~gear\")\n    + theme_tufte())\n   ```\n\n   <img width=\"90%\" align=\"center\" src=\"./doc/images/readme-image-5alt.png\">\n\n\n## installation\n\nofficial release\n\n```console\n# using pip\n$ pip install plotnine             # 1. should be sufficient for most\n$ pip install 'plotnine[extra]'    # 2. includes extra/optional packages\n$ pip install 'plotnine[test]'     # 3. testing\n$ pip install 'plotnine[doc]'      # 4. generating docs\n$ pip install 'plotnine[dev]'      # 5. development (making releases)\n$ pip install 'plotnine[all]'      # 6. everyting\n\n# or using conda\n$ conda install -c conda-forge plotnine\n```\n\ndevelopment version\n\n```console\n$ pip install git+https://github.com/has2k1/plotnine.git\n```\n\n## contributing\n\nour documentation could use some examples, but we are looking for something\na little bit special. we have two criteria:\n\n1. simple looking plots that otherwise require a trick or two.\n2. plots that are part of a data analytic narrative. that is, they provide\n   some form of clarity showing off the `geom`, `stat`, ... at their\n   differential best.\n\nif you come up with something that meets those criteria, we would love to\nsee it. see [plotnine-examples](https://github.com/has2k1/plotnine-examples).\n\nif you discover a bug checkout the [issues](https://github.com/has2k1/plotnine/issues)\nif it has not been reported, yet please file an issue.\n\nand if you can fix a bug, your contribution is welcome.\n\ntesting\n-------\n\nplotnine has tests that generate images which are compared to baseline images known\nto be correct. to generate images that are consistent across all systems you have\nto install matplotlib from source. you can do that with ``pip`` using the command.\n\n```console\n$ pip install matplotlib --no-binary matplotlib\n```\n\notherwise there may be small differences in the text rendering that throw off the\nimage comparisons.\n",
  "docs_url": null,
  "keywords": "",
  "license": "the mit license (mit)  copyright (c) 2022 hassan kibirige  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "plotnine",
  "package_url": "https://pypi.org/project/plotnine/",
  "project_url": "https://pypi.org/project/plotnine/",
  "project_urls": {
    "changelog": "https://plotnine.readthedocs.io/en/stable/changelog.html",
    "ci": "https://github.com/has2k1/plotnine/actions",
    "homepage": "https://plotnine.readthedocs.io/en/stable",
    "repository": "https://github.com/has2k1/plotnine"
  },
  "release_url": "https://pypi.org/project/plotnine/0.12.4/",
  "requires_dist": [
    "matplotlib >=3.6.0",
    "mizani <0.10.0,>0.9.0",
    "numpy >=1.23.0",
    "pandas >=1.5.0",
    "patsy >=0.5.1",
    "scipy >=1.5.0",
    "statsmodels >=0.14.0",
    "plotnine[extra] ; extra == 'all'",
    "plotnine[doc] ; extra == 'all'",
    "plotnine[lint] ; extra == 'all'",
    "plotnine[test] ; extra == 'all'",
    "plotnine[build] ; extra == 'all'",
    "plotnine[dev] ; extra == 'all'",
    "build ; extra == 'build'",
    "wheel ; extra == 'build'",
    "twine ; extra == 'dev'",
    "plotnine[typing] ; extra == 'dev'",
    "jupyter ; extra == 'doc'",
    "nbsphinx ; extra == 'doc'",
    "numpydoc >=0.9.1 ; extra == 'doc'",
    "sphinx >=6.1.0 ; extra == 'doc'",
    "importlib-resources ; extra == 'doc'",
    "adjustText ; extra == 'extra'",
    "geopandas ; extra == 'extra'",
    "scikit-learn ; extra == 'extra'",
    "scikit-misc >=0.2.0 ; extra == 'extra'",
    "black >=23.1.0 ; extra == 'lint'",
    "ruff ; extra == 'lint'",
    "pytest-cov ; extra == 'test'",
    "pyright ; extra == 'typing'",
    "ipython ; extra == 'typing'",
    "pandas-stubs ; extra == 'typing'"
  ],
  "requires_python": ">=3.8",
  "summary": "a grammar of graphics for python",
  "version": "0.12.4",
  "releases": [],
  "developers": [
    "has2k1@gmail.com"
  ],
  "kwds": "plots documentation plotnine badge svg",
  "license_kwds": "copyright license mit liable liability",
  "libtype": "pypi",
  "id": "pypi_plotnine",
  "homepage": "",
  "release_count": 19,
  "dependency_ids": [
    "pypi_adjusttext",
    "pypi_black",
    "pypi_build",
    "pypi_geopandas",
    "pypi_importlib_resources",
    "pypi_ipython",
    "pypi_jupyter",
    "pypi_matplotlib",
    "pypi_mizani",
    "pypi_nbsphinx",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_pandas",
    "pypi_pandas_stubs",
    "pypi_patsy",
    "pypi_plotnine",
    "pypi_pyright",
    "pypi_pytest_cov",
    "pypi_ruff",
    "pypi_scikit_learn",
    "pypi_scikit_misc",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_statsmodels",
    "pypi_twine",
    "pypi_wheel"
  ]
}
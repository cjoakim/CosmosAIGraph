{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "![metaflow_logo_horizontal_fullcolor_ribbon_dark_rgb](https://user-images.githubusercontent.com/763451/89453116-96a57e00-d713-11ea-9fa6-82b29d4d6eff.png)\n\n# metaflow\n\nmetaflow is a human-friendly library that helps scientists and engineers build and manage real-life data science projects. metaflow was [originally developed at netflix](https://netflixtechblog.com/open-sourcing-metaflow-a-human-centric-framework-for-data-science-fa72e04a5d9) to boost productivity of data scientists who work on a wide variety of projects from classical statistics to state-of-the-art deep learning.\n\nfor more information, see [metaflow's website](https://metaflow.org) and [documentation](https://docs.metaflow.org).\n\n## from prototype to production (and back)\n\nmetaflow provides a simple, friendly api that covers foundational needs of ml, ai, and data science projects:\n<img src=\"./docs/prototype-to-prod.png\" width=\"800px\">\n\n1. [rapid local prototyping](https://docs.metaflow.org/metaflow/basics), [support for notebooks](https://docs.metaflow.org/metaflow/visualizing-results), and [built-in experiment tracking and versioning](https://docs.metaflow.org/metaflow/client).\n2. [horizontal and vertical scalability to the cloud](https://docs.metaflow.org/scaling/remote-tasks/introduction), utilizing both cpus and gpus, and [fast data access](https://docs.metaflow.org/scaling/data).\n3. [managing dependencies](https://docs.metaflow.org/scaling/dependencies) and [one-click deployments to highly available production orchestrators](https://docs.metaflow.org/production/introduction).\n\n\n## getting started\n\ngetting up and running is easy. if you don't know where to start, [metaflow sandbox](https://outerbounds.com/sandbox) will have you running and exploring metaflow in seconds.\n\n### installing metaflow in your python environment\n\nto install metaflow in your local environment, you can install from [pypi](https://pypi.org/project/metaflow/):\n\n```sh\npip install metaflow\n```\nalternatively, you can also install from [conda-forge](https://anaconda.org/conda-forge/metaflow):\n\n```sh\nconda install -c conda-forge metaflow\n```\nif you are eager to try out metaflow in practice, you can start with the [tutorial](https://docs.metaflow.org/getting-started/tutorials). after the tutorial, you can learn more about how metaflow works [here](https://docs.metaflow.org/metaflow/basics).\n\n### deploying infrastructure for metaflow in your cloud\n<img src=\"./docs/multicloud.png\" width=\"800px\">\n\n\nwhile you can get started with metaflow easily on your laptop, the main benefits of metaflow lie in its ability to [scale out to external compute clusters](https://docs.metaflow.org/scaling/remote-tasks/introduction) \nand to [deploy to production-grade workflow orchestrators](https://docs.metaflow.org/production/introduction). to benefit from these features, follow this [guide](https://outerbounds.com/engineering/welcome/) to \nconfigure metaflow and the infrastructure behind it appropriately.\n\n## [resources](https://docs.metaflow.org/introduction/metaflow-resources)\n\n### [slack community](http://slack.outerbounds.co/)\nan active [community](http://slack.outerbounds.co/) of thousands of data scientists and ml engineers discussing the ins-and-outs of applied machine learning.\n\n### [tutorials](https://outerbounds.com/docs/tutorials-index/)\n- [introduction to metaflow](https://outerbounds.com/docs/intro-tutorial-overview/)\n- [natural language processing with metaflow](https://outerbounds.com/docs/nlp-tutorial-overview/)\n- [computer vision with metaflow](https://outerbounds.com/docs/cv-tutorial-overview/)\n- [recommender systems with metaflow](https://outerbounds.com/docs/recsys-tutorial-overview/)\n- and more advanced content [here](https://outerbounds.com/docs/tutorials-index/)\n\n### [generative ai and llm use cases](https://outerbounds.com/blog/?category=foundation%20models)\n- [infrastructure stack for large language models](https://outerbounds.com/blog/llm-infrastructure-stack/)\n- [parallelizing stable diffusion for production use cases](https://outerbounds.com/blog/parallelizing-stable-diffusion-production-use-cases/)\n- [whisper with metaflow on kubernetes](https://outerbounds.com/blog/whisper-kubernetes/)\n- [training a large language model with metaflow, featuring dolly](https://outerbounds.com/blog/train-dolly-metaflow/)\n\n## get in touch\nthere are several ways to get in touch with us:\n- [slack community](http://slack.outerbounds.co/)\n- [github issues](https://github.com/netflix/metaflow/issues)\n\n## contributing\nwe welcome contributions to metaflow. please see our [contribution guide](https://docs.metaflow.org/introduction/contributing-to-metaflow) for more details.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "metaflow",
  "package_url": "https://pypi.org/project/metaflow/",
  "project_url": "https://pypi.org/project/metaflow/",
  "project_urls": {
    "Documentation": "https://docs.metaflow.org",
    "Issues": "https://github.com/Netflix/metaflow/issues",
    "Source": "https://github.com/Netflix/metaflow"
  },
  "release_url": "https://pypi.org/project/metaflow/2.10.8/",
  "requires_dist": [
    "requests",
    "boto3"
  ],
  "requires_python": "",
  "summary": "metaflow: more data science, less engineering",
  "version": "2.10.8",
  "releases": [],
  "developers": [
    "help@metaflow.org",
    "metaflow_developers"
  ],
  "kwds": "metaflow metaflow_logo_horizontal_fullcolor_ribbon_dark_rgb netflixtechblog prototyping workflow",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_metaflow",
  "homepage": "",
  "release_count": 102,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_requests"
  ]
}
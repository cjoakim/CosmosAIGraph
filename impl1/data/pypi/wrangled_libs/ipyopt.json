{
  "classifiers": [
    "programming language :: python :: 3"
  ],
  "description": "[![pipeline status](https://gitlab.com/ipyopt-devs/ipyopt/badges/main/pipeline.svg)](https://gitlab.com/ipyopt-devs/ipyopt/-/commits/main)\n[![python version](https://img.shields.io/pypi/pyversions/ipyopt.svg?logo=python&logocolor=white)](https://pypi.org/project/ipyopt)\n[![latest version](https://img.shields.io/pypi/v/ipyopt.svg)](https://pypi.org/project/ipyopt)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![checked with pylint](https://img.shields.io/badge/pylint-checked-blue)](https://github.com/pycqa/pylint)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.3249818.svg)](https://doi.org/10.5281/zenodo.3249818)\n\n# ipyopt\n\n`ipyopt` is a python \ud83d\udc0d c++ extension that allows you to use\n[ipopt](http://www.coin-or.org/ipopt/) in python.\n\nipopt solves general nonlinear programming problems of the form\n\n```\nmin f(x)\n```\n\nunder the constraints\n\n```\ng_l <= g(x) <= g_u,\nx_l <= x <= x_u,\n```\n\nwhere `x` is `n` dimensional and `g(x)` is `m` dimensional.\n\n## goal\n\nprovide as much performance as possible. this is also reflected in the\nfact that the shipped `scipy.optimize.minimize` `ipopt` method\ndeviates in some concerns from the usual methods in scipy.\nif you are interested in a more `scipy` like interface, have a look at [cyipopt](https://github.com/mechmotum/cyipopt).\n\n## installation\n\n*note* the pypi repository currently only provides \ud83d\udc27 linux wheels.\n\n```bash\npip install [--user] ipyopt\n```\n\nthis will install a precompiled binary version from pypi. please note,\nthat the precompiled binary is linked against the unoptimized\nreference implementation of blas/lapack. if you want to take advantage\nof optimized versions of blas/lapack, compile from source:\n\n```bash\npip install --no-binary ipyopt ipyopt\n```\nin this case, you also need [ipopt](https://github.com/coin-or/ipopt) and\n[numpy](https://numpy.org/).\non a debian based system:\n\n```bash\nsudo apt-get install python3-numpy coinor-ipopt\n```\n\nif `coinor-ipopt` does not link correctly, you might have to compile\n`ipopt` yourself.\nsee the section [build](#build) below or [.ci/dockerfile](.ci/dockerfile) on\nhow this can be done.\n\n## usage\n\nyou can use `ipyopt` like this:\n\n```python\nimport ipyopt\n# define your call back functions\nnlp = ipyopt.problem(...)\nnlp.solve(...)\n```\n\nfor an example, see [examples/hs071.py](examples/hs071.py).\n\nnote that the `ipyopt.problem.solve(.)` mutates some its arguments, including the initial guess for the variables, and the multipliers.\n\nfor maximal performance, there is also support for [pycapsules](https://docs.python.org/3/c-api/capsule.html) /\n[scipy.lowlevelcallable](https://docs.scipy.org/doc/scipy/reference/generated/scipy.lowlevelcallable.html). by\nusing this approach, there will be no c++ <-> python interactions\nduring ipopt optimization. here is an example\n[test/c_capsules/](test/c_capsules) (c code) and\n[test/test_ipyopt.py](test/test_ipyopt.py) (python code using the\npycapsules provided by the c code).\n\nfor more details and hints, see the [docs](https://ipyopt-devs.gitlab.io/ipyopt).\n\n## build\n\n`ipyopt` depends on the following packages:\n\n1. a compiler and a linker, e.g. gcc, ld\n2. [ipopt](https://github.com/coin-or/ipopt)\n3. [numpy](http://numpy.org/)\n4. python.h (part of the python source code, you can download it from\n   [python.org](https://python.org))\n\nto build from source, first, get the latest source code using:\n\n```sh\ngit clone https://gitlab.com/ipyopt-devs/ipyopt.git\n```\n\ncheck whether a file `ipopt.pc` was distributed with your ipopt installation.\nif this is the case and `ipopt.pc` is in the search path of `pkg-config`\n(on unix systems:\n`/usr/lib/pkgconfig`, `/usr/share/pkgconfig`, `/usr/local/lib/pkgconfig`,\n`/usr/local/share/pkgconfig`), nothing has to be modified.\n\nin this case run\n\n```sh\npython setup.py build\nsudo python setup.py install\n```\n\t\nif `pkg-config` is not available for your system, you will need to\npass appropriate information to `setup.py` by setting the environment\nvariable `cflags`. example:\n```sh\ncflags=\"-i/usr/include/coin/ -l/usr/lib64 -lipopt -lmumps_common -ldmumps -lzmumps -lsmumps -lcmumps -llapack -lblas -lblas -lblas -lm  -ldl' ./setup.py build\nsudo python setup.py install\n```\n\t\nif you have an `ipopt.pc` which is not in the `pkg-config` search path,\nspecify the path via the `pkg_config_path` environment variable (see below).\nif you cannot find an `ipopt.pc` in your `ipopt` installation, there is an\nexample pc file [pkgconfig/ipopt.pc](pkgconfig/ipopt.pc).\ncopy it to a location (best of all directly in a subfolder named\n`pkgconfig` of your ipopt installation) and edit it to reflect the\nlibrary and include paths of the dependencies.\n\nthen do\n\n```sh\npkg_config_path=<dir containing ipopt.pc> python setup.py build\nsudo python setup.py install\n```\n\n## testing\n\n**unit tests:**\n\n```sh\npython -m unittest\n```\n\n**run examples:**\n\nuse the following command under the\n[examples](examples) directory. \n\n```sh\npython hs071.py\n```\n\t\nthe file [examples/hs071.py](examples/hs071.py) contains a toy\noptimization problem. if everything is ok, `ipyopt` will invoke\n`ipopt` to solve it for you. this python file is self-documented and\ncan be used as a template for writing your own optimization problems.\n\n**hessian estimation**: since hessian estimation is usually tedious,\nipopt can solve problems without hessian estimation. `ipyopt` also\nsupports this feature. the file [examples/hs071.py](examples/hs071.py)\ndemonstrates the idea. if you provide the `ipyopt.problem` constructor\nwith an `eval_h` callback function, `ipopt` will delegate the hessian matrix calculation to your\nfunction (otherwise `ipopt` will approximate hessian for you).\n\n## contributing\n\n1. fork it.\n2. create a branch (`git checkout -b new_branch`)\n3. commit your changes (`git commit -am \"your awesome message\"`)\n4. push to the branch (`git push origin new_branch`)\n5. create a merge request\n\n## credits\n* modifications on logger made by openmdao at nasa glenn research center, 2010 and 2011\n* added \"eval_intermediate_callback\" by openmdao at nasa glenn research center, 2010 and 2011\n* modifications on the safe_free macro made by guillaume jacquenot, 2012\n* changed logger from code contributed by alanfalloon\n* originally developed by eric xu when he was a phd student at\n[washington university](https://wustl.edu/) and issued under the bsd\nlicense. original repository: [xuy/pyipopt](https://github.com/xuy/pyipopt).\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ipyopt",
  "package_url": "https://pypi.org/project/ipyopt/",
  "project_url": "https://pypi.org/project/ipyopt/",
  "project_urls": {
    "Documentation": "https://ipyopt-devs.gitlab.io/ipyopt",
    "Homepage": "https://gitlab.com/ipyopt-devs/ipyopt",
    "Source": "https://gitlab.com/ipyopt-devs/ipyopt"
  },
  "release_url": "https://pypi.org/project/ipyopt/0.12.7/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "summary": "python interface to ipopt",
  "version": "0.12.7",
  "releases": [],
  "developers": [
    "g.braeunlich@disroot.org",
    "nrontsis@gmail.com"
  ],
  "kwds": "ipyopt test_ipyopt mypy_badge pypi ipopt",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ipyopt",
  "homepage": "https://gitlab.com/ipyopt-devs/ipyopt",
  "release_count": 12,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "flask-admin\n===========\n\nthe project was recently moved into its own organization. please update your\nreferences to *git@github.com:flask-admin/flask-admin.git*.\n\n.. image:: https://d322cqt584bo4o.cloudfront.net/flask-admin/localized.svg\n\t:target: https://crowdin.com/project/flask-admin\n\n.. image:: https://github.com/flask-admin/flask-admin/actions/workflows/test.yaml/badge.svg\n\t:target: https://github.com/flask-admin/flask-admin/actions/workflows/test.yaml\n\n\nintroduction\n------------\n\nflask-admin is a batteries-included, simple-to-use `flask <http://flask.pocoo.org/>`_ extension that lets you\nadd admin interfaces to flask applications. it is inspired by the *django-admin* package, but implemented in such\na way that the developer has total control of the look, feel and functionality of the resulting application.\n\nout-of-the-box, flask-admin plays nicely with various orm's, including\n\n- `sqlalchemy <http://www.sqlalchemy.org/>`_,\n\n- `mongoengine <http://mongoengine.org/>`_,\n\n- `pymongo <http://api.mongodb.org/python/current/>`_ and\n\n- `peewee <https://github.com/coleifer/peewee>`_.\n\nit also boasts a simple file management interface and a `redis client <http://redis.io/>`_ console.\n\nthe biggest feature of flask-admin is flexibility. it aims to provide a set of simple tools that can be used for\nbuilding admin interfaces of any complexity. so, to start off with you can create a very simple application in no time,\nwith auto-generated crud-views for each of your models. but then you can go further and customize those views & forms\nas the need arises.\n\nflask-admin is an active project, well-tested and production ready.\n\nexamples\n--------\nseveral usage examples are included in the */examples* folder. please add your own, or improve\non the existing examples, and submit a *pull-request*.\n\nto run the examples in your local environment::\n\n  1. clone the repository::\n\n        git clone https://github.com/flask-admin/flask-admin.git\n        cd flask-admin\n\n  2. create and activate a virtual environment::\n\n        virtualenv env -p python3\n        source env/bin/activate\n\n  3. install requirements::\n\n        pip install -r examples/sqla/requirements.txt\n\n  4. run the application::\n\n        python examples/sqla/run_server.py\n\ndocumentation\n-------------\nflask-admin is extensively documented, you can find all of the documentation at `https://flask-admin.readthedocs.io/en/latest/ <https://flask-admin.readthedocs.io/en/latest/>`_.\n\nthe docs are auto-generated from the *.rst* files in the */doc* folder. so if you come across any errors, or\nif you think of anything else that should be included, then please make the changes and submit them as a *pull-request*.\n\nto build the docs in your local environment, from the project directory::\n\n    tox -e docs-html\n\nand if you want to preview any *.rst* snippets that you may want to contribute, go to `http://rst.ninjs.org/ <http://rst.ninjs.org/>`_.\n\ninstallation\n------------\nto install flask-admin, simply::\n\n    pip install flask-admin\n\nor alternatively, you can download the repository and install manually by doing::\n\n    git clone git@github.com:flask-admin/flask-admin.git\n    cd flask-admin\n    python setup.py install\n\ntests\n-----\ntest are run with *pytest*. if you are not familiar with this package you can get some more info from `their website <https://pytest.org/>`_.\n\nto run the tests, from the project directory, simply::\n\n    pip install -r requirements-dev.txt\n    pytest\n\nyou should see output similar to::\n\n    .............................................\n    ----------------------------------------------------------------------\n    ran 102 tests in 13.132s\n\n    ok\n\nfor all the tests to pass successfully, you'll need postgres & mongodb to be running locally. for postgres::\n\n    > psql postgres\n    create database flask_admin_test;\n    \\q\n\n    > psql flask_admin_test\n    create extension postgis;\n    create extension hstore;\n\nif you're using homebrew on macos, you might need this::\n\n    # install postgis\n    > brew install postgis\n\n    # set up postgresql user\n    > createuser -s postgresql\n    > brew services restart postgresql\n\nyou can also run the tests on multiple environments using *tox*.\n\n3rd party stuff\n---------------\n\nflask-admin is built with the help of `bootstrap <http://getbootstrap.com/>`_,  `select2 <https://github.com/ivaynberg/select2>`_\nand `bootswatch <http://bootswatch.com/>`_.\n\nif you want to localize your application, install the `flask-babelex <https://pypi.python.org/pypi/flask-babelex>`_ package.\n\nyou can help improve flask-admin's translations through crowdin: https://crowdin.com/project/flask-admin\n",
  "docs_url": "https://pythonhosted.org/Flask-Admin/",
  "keywords": "",
  "license": "bsd",
  "name": "flask-admin",
  "package_url": "https://pypi.org/project/Flask-Admin/",
  "project_url": "https://pypi.org/project/Flask-Admin/",
  "project_urls": {
    "Homepage": "https://github.com/flask-admin/flask-admin/"
  },
  "release_url": "https://pypi.org/project/Flask-Admin/1.6.1/",
  "requires_dist": [
    "Flask (>=0.7)",
    "wtforms",
    "boto ; extra == 'aws'",
    "azure-storage-blob ; extra == 'azure'"
  ],
  "requires_python": ">=3.6",
  "summary": "simple and extensible admin interface framework for flask",
  "version": "1.6.1",
  "releases": [],
  "developers": [
    "flask",
    "serge.koval+github@gmail.com"
  ],
  "kwds": "flask_admin_test flask yaml admin django",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_flask_admin",
  "homepage": "https://github.com/flask-admin/flask-admin/",
  "release_count": 39,
  "dependency_ids": [
    "pypi_azure_storage_blob",
    "pypi_boto",
    "pypi_flask",
    "pypi_wtforms"
  ]
}
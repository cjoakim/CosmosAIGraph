{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: system :: filesystems",
    "typing :: typed"
  ],
  "description": "# pyartifactory\n\n[![github actions workflow](https://github.com/anancarv/python-artifactory/workflows/check%20code/badge.svg)](https://github.com/anancarv/python-artifactory/actions)\n[![pypi version](https://badge.fury.io/py/pyartifactory.svg)](https://badge.fury.io/py/pyartifactory)\n[![codacy badge](https://app.codacy.com/project/badge/grade/c02851e5b9f24fe299783b48eab18f54)](https://www.codacy.com/gh/anancarv/python-artifactory/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=anancarv/python-artifactory&amp;utm_campaign=badge_grade)\n[![codacy badge](https://app.codacy.com/project/badge/coverage/c02851e5b9f24fe299783b48eab18f54)](https://www.codacy.com/gh/anancarv/python-artifactory/dashboard?utm_source=github.com&utm_medium=referral&utm_content=anancarv/python-artifactory&utm_campaign=badge_coverage)\n![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)\n\n\n`pyartifactory` is a python library to access the [artifactory rest api](https://www.jfrog.com/confluence/display/rtf/artifactory+rest+api).\n\nthis library enables you to manage artifactory resources such as users, groups, permissions, repositories, artifacts and access tokens in your applications. based on python 3.8+ type hints.\n\n<!-- toc -->\n\n- [requirements](#requirements)\n- [install](#install)\n- [usage](#usage)\n  * [authentication](#authentication)\n  * [ssl cert verification options](#ssl-cert-verification-options)\n  * [admin objects](#admin-objects)\n    + [user](#user)\n    + [group](#group)\n    + [security](#security)\n    + [repository](#repository)\n    + [permission](#permission)\n      - [artifactory lower than 6.6.0](#artifactory-lower-than-660)\n      - [artifactory 6.6.0 or higher](#artifactory-660-or-higher)\n  * [artifacts](#artifacts)\n    + [get the information about a file or folder](#get-the-information-about-a-file-or-folder)\n    + [deploy an artifact](#deploy-an-artifact)\n    + [download an artifact](#download-an-artifact)\n    + [retrieve artifact list](#retrieve-artifact-list)\n    + [retrieve artifact properties](#retrieve-artifact-properties)\n    + [set artifact properties](#set-artifact-properties)\n    + [update artifact properties](#update-artifact-properties)\n    + [retrieve artifact stats](#retrieve-artifact-stats)\n    + [copy artifact to a new location](#copy-artifact-to-a-new-location)\n    + [move artifact to a new location](#move-artifact-to-a-new-location)\n    + [delete an artifact](#delete-an-artifact)\n  * [contributing](#contributing)\n\n<!-- tocstop -->\n\n## requirements\n\n- python 3.8+\n\n## install\n\n```python\npip install pyartifactory\n```\n\n## usage\n\n### authentication\n\nsince artifactory 6.6.0 there is version 2 of the rest api for permission management, in case you have that version or higher, you need to pass api_version=2 to the constructor when you instantiate the class.\n\n```python\nfrom pyartifactory import artifactory\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'), api_version=1)\n```\n\n### ssl cert verification options\n\nspecify a local cert to use as client side certificate\n\n```python\nfrom pyartifactory import artifactory\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'), cert=\"/path_to_file/server.pem\", api_version=1)\n```\n\nspecify a local cert to use as custom ca certificate\n\n```python\nfrom pyartifactory import artifactory\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'), verify=\"/path_to_file/ca.pem\", cert=\"/path_to_file/server.pem\", api_version=1)\n```\n\n> `verify` and `cert` configure certificates for distinct purposes. `verify` determines ssl/tls certificate validation for the server, while `cert` supplies a client certificate for mutual authentication, as required by the server. you can use either one or both parameters as needed.\n\ndisable host cert verification\n\n```python\nfrom pyartifactory import artifactory\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'), verify=false, api_version=1)\n```\n\n> `verify` can be also set as a boolean to enable/disable ssl host verification.\n\n### admin objects\n\n#### user\n\nfirst, you need to create a new artifactory object.\n```python\nfrom pyartifactory import artifactory\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'))\n```\n\nget the list of users:\n```python\nusers = art.users.list()\n```\n\nget a single user:\n```python\nuser = art.users.get(\"test_user\")\n```\n\ncreate a user:\n```python\nfrom pyartifactory.models import newuser\n\n# create user\nuser = newuser(name=\"test_user\", password=\"test_password\", email=\"user@user.com\")\nnew_user = art.users.create(user)\n\n# update user\nuser.email = \"test@test.com\"\nupdated_user = art.users.update(user)\n```\n\nupdate a user:\n```python\nfrom pyartifactory.models import user\n\nuser = art.users.get(\"test_user\")\n\n# update user\nuser.email = \"test@test.com\"\nupdated_user = art.users.update(user)\n```\n\ndelete a user:\n```python\nart.users.delete(\"test_user\")\n```\n\nunlock a user:\n```python\nart.users.unlock(\"test_user\")\n```\n\n#### group\n\nget the list of groups:\n```python\ngroups = art.groups.list()\n```\n\nget a single group:\n```python\ngroup = art.groups.get(\"group_name\")\n```\n\ncreate/update a group:\n```python\nfrom pyartifactory.models import group\n\n# create a group\ngroup = group(name=\"test_group\", description=\"test_group\")\nnew_group = art.groups.create(group)\n\n# update a group\ngroup.description = \"test_group_2\"\nupdated_group = art.groups.update(group)\n```\n\ndelete a group:\n```python\nart.groups.delete(\"test_group\")\n```\n\n#### security\n\na set of methods for performing operations on apikeys, passwords ...\n```python\n>>> art.security.\nart.security.create_api_key(          art.security.get_encrypted_password(  art.security.revoke_api_key(\nart.security.get_api_key(             art.security.regenerate_api_key(      art.security.revoke_user_api_key(\n```\n\ncreate an access token (for a transient user):\n```python\ntoken = art.security.create_access_token(user_name='transient_artifactory_user',\n                                         groups=['g1', 'g2'],\n                                         refreshable=true)\n```\n\ncreate an access token for an existing user (groups are implied from the existing user):\n```python\ntoken = art.security.create_access_token(user_name='existing_artifactory_user',\n                                         refreshable=true)\n```\n\nrevoke an existing revocable token:\n```python\nart.security.revoke_access_token(token.access_token)\n```\n\n#### repository\n\nget the list of repositories:\n\n```python\nrepositories = art.repositories.list()\n```\n\nget a single repository\n```python\nrepo = art.repositories.get_repo(\"repo_name\")\n# according to the repo type, you'll have either a local, virtual or remote repository returned\n```\n\ncreate/update a repository:\n```python\nfrom pyartifactory.models import localrepository, virtualrepository, remoterepository\n\n# create local repo\nlocal_repo = localrepository(key=\"test_local_repo\")\nnew_local_repo = art.repositories.create_repo(local_repo)\n\n# create virtual repo\nvirtual_repo = virtualrepository(key=\"test_virtual_repo\")\nnew_virtual_repo = art.repositories.create_repo(virtual_repo)\n\n# create remote repo\nremote_repo = remoterepository(key=\"test_remote_repo\")\nnew_remote_repo = art.repositories.create_repo(remote_repo)\n\n# update a repository\nlocal_repo = art.repositories.get_repo(\"test_local_repo\")\nlocal_repo.description = \"test_local_repo\"\nupdated_local_repo = art.repositories.update_repo(local_repo)\n```\n\ndelete a repository:\n```python\nart.repositories.delete(\"test_local_repo\")\n```\n\n#### permission\nget the list of permissions:\n\n```python\npermissions = art.permissions.list()\n```\n\nget a single permission:\n```python\nusers = art.permissions.get(\"test_permission\")\n```\n\ncreate/update a permission:\n\n##### artifactory lower than 6.6.0\n\n```python\n\nfrom pyartifactory.models import permission\n\n# create a permission\npermission = permission(\n    **{\n        \"name\": \"test_permission\",\n        \"repositories\": [\"test_repository\"],\n        \"principals\": {\n            \"users\": {\"test_user\": [\"r\", \"w\", \"n\", \"d\"]},\n            \"groups\": {\"developers\": [\"r\"]},\n        },\n    }\n)\nperm = art.permissions.create(permission)\n\n# update permission\npermission.repositories = [\"test_repository_2\"]\nupdated_permission = art.permissions.update(permission)\n```\n\n##### artifactory 6.6.0 or higher\n```python\nfrom pyartifactory import artifactory\nfrom pyartifactory.models import permissionv2\nfrom pyartifactory.models.permission import permissionenumv2, principalspermissionv2, repov2, buildv2, releasebundlev2\n\n# to use permissionv2, make sure to set api_version=2\nart = artifactory(url=\"artifactory_url\", auth=('username','password_or_api_key'), api_version=2)\n\n# create a permission\npermission = permissionv2(\n    name=\"test_permission\",\n    repo=repov2(\n        repositories=[\"test_repository\"],\n        actions=principalspermissionv2(\n            users={\n                \"test_user\": [\n                    permissionenumv2.read,\n                    permissionenumv2.annotate,\n                    permissionenumv2.write,\n                    permissionenumv2.delete,\n                ]\n            },\n            groups={\n                \"developers\": [\n                    permissionenumv2.read,\n                    permissionenumv2.annotate,\n                    permissionenumv2.write,\n                    permissionenumv2.delete,\n                ],\n            },\n        ),\n        includepatterns=[\"**\"],\n        excludepatterns=[],\n    ),\n    build=buildv2(\n          actions=principalspermissionv2(\n              users={\n                  \"test_user\": [\n                      permissionenumv2.read,\n                      permissionenumv2.write,\n                  ]\n              },\n              groups={\n                  \"developers\": [\n                      permissionenumv2.read,\n                      permissionenumv2.write,\n                  ],\n              },\n          ),\n          includepatterns=[\"\"],\n          excludepatterns=[\"\"],\n      ),\n    releasebundle=releasebundlev2(\n          repositories=[\"release-bundles\"],\n          actions=principalspermissionv2(\n              users={\n                  \"test_user\": [\n                      permissionenumv2.read,\n                  ]\n              },\n              groups={\n                  \"developers\": [\n                      permissionenumv2.read,\n                  ],\n              },\n          ),\n          includepatterns=[\"\"],\n          excludepatterns=[\"\"],\n      )\n  # you don't have to set all the objects repo, build and releasebundle\n  # if you only need repo for example, you can set only the repo object\n)\nperm = art.permissions.create(permission)\n\n# update permission\npermission.repo.repositories = [\"test_repository_2\"]\nupdated_permission = art.permissions.update(permission)\n```\n\ndelete a permission:\n```python\nart.permissions.delete(\"test_permission\")\n```\n\n### artifacts\n\n#### get the information about a file or folder\n```python\nartifact_info = art.artifacts.info(\"<artifact_path_in_artifactory>\")\n# file_info = art.artifacts.info(\"my-repository/my/artifact/directory/file.txt\")\n# folder_info = art.artifacts.info(\"my-repository/my/artifact/directory\")\n```\n\n#### deploy an artifact\n```python\nartifact = art.artifacts.deploy(\"<local_file_location>\", \"<artifact_path_in_artifactory>\")\n# artifact = art.artifacts.deploy(\"desktop/mynewfile.txt\", \"my-repository/my/new/artifact/directory/file.txt\")\n```\n\n#### download an artifact\n```python\nartifact = art.artifacts.download(\"<artifact_path_in_artifactory>\", \"<local_directory_path>\")\n# artifact = art.artifacts.download(\"my-artifactory-repository/my/new/artifact/file.txt\", \"desktop/my/local/directory\")\n# the artifact location is returned by the download method\n# if you have not set a <local_directory_path>, the artifact will be downloaded in the current directory\n```\n\n#### retrieve artifact list\n```python\nartifacts = art.artifacts.list(\"<artifact_path_in_artifactory>\")\n# files_only = art.artifacts.list(\"<artifact_path_in_artifactory>\", list_folders=false)\n# non_recursive = art.artifacts.list(\"<artifact_path_in_artifactory>\", recursive=false)\n# max_depth = art.artifacts.list(\"<artifact_path_in_artifactory>\", depth=3)\n```\n\n#### retrieve artifact properties\n```python\nartifact_properties = art.artifacts.properties(\"<artifact_path_in_artifactory>\")  # returns all properties\n# artifact_properties = art.artifacts.properties(\"my-repository/my/new/artifact/directory/file.txt\")\nartifact_properties = art.artifacts.properties(\"<artifact_path_in_artifactory>\", [\"prop1\", \"prop2\"])  # returns specific properties\nartifact_properties.properties[\"prop1\"]  # [\"value1\", \"value1-bis\"]\n```\n\n#### set artifact properties\n```python\nartifact_properties = art.artifacts.set_properties(\"<artifact_path_in_artifactory>\", {\"prop1\": [\"value\"], \"prop2\": [\"value1\", \"value2\", \"etc\"})  # recursive mode is enabled by default\nartifact_properties = art.artifacts.set_properties(\"<artifact_path_in_artifactory>\", {\"prop1\": [\"value\"], \"prop2\": [\"value1\", \"value2\", \"etc\"]}, false) # disable recursive mode\n```\n\n#### update artifact properties\n```python\nartifact_properties = art.artifacts.update_properties(\"<artifact_path_in_artifactory>\", {\"prop1\": [\"value\"], \"prop2\": [\"value1\", \"value2\", \"etc\"})  # recursive mode is enabled by default\nartifact_properties = art.artifacts.update_properties(\"<artifact_path_in_artifactory>\", {\"prop1\": [\"value\"], \"prop2\": [\"value1\", \"value2\", \"etc\"}, false) # disable recursive mode\n```\n\n#### retrieve artifact stats\n```python\nartifact_stats = art.artifacts.stats(\"<artifact_path_in_artifactory>\")\n# artifact_stats = art.artifacts.stats(\"my-repository/my/new/artifact/directory/file.txt\")\n```\n\n#### copy artifact to a new location\n```python\nartifact = art.artifacts.copy(\"<current_artifact_path_in_artifactory>\",\"<new_artifact_path_in_artifactory>\")\n\n# if you want to run a dryrun test, you can do the following:\n# artifact = art.artifacts.copy(\"my-repository/current/artifact/path/file.txt\",\"my-repository/new/artifact/path/file.txt\", dryrun=true)\n# it will return properties of the newly copied artifact\n```\n\n#### move artifact to a new location\n```python\nartifact = art.artifacts.move(\"<current_artifact_path_in_artifactory>\",\"<new_artifact_path_in_artifactory>\")\n\n# you can also run a dryrun test with the move operation\n# it will return properties of the newly moved artifact\n```\n\n#### delete an artifact\n```python\nart.artifacts.delete(\"<artifact_path_in_artifactory>\")\n```\n\n\n### contributing\nplease read the [development - contributing](./contributing.md) guidelines.\n",
  "docs_url": null,
  "keywords": "artifactory",
  "license": "mit",
  "name": "pyartifactory",
  "package_url": "https://pypi.org/project/PyArtifactory/",
  "project_url": "https://pypi.org/project/PyArtifactory/",
  "project_urls": {
    "Bug Tracker": "https://github.com/anancarv/python-artifactory/issues",
    "Documentation": "https://github.com/anancarv/python-artifactory",
    "Homepage": "https://github.com/anancarv/python-artifactory",
    "Repository": "https://github.com/anancarv/python-artifactory"
  },
  "release_url": "https://pypi.org/project/PyArtifactory/2.1.3/",
  "requires_dist": [
    "requests (>=2.31,<3.0)",
    "typing_extensions (>=4.7.1,<5.0.0)",
    "pydantic[email] (>=2.4.0,<3.0.0)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "typed interactions with the jfrog artifactory rest api",
  "version": "2.1.3",
  "releases": [],
  "developers": [
    "ananias_carvalho",
    "carvalhoananias@hotmail.com"
  ],
  "kwds": "badge_grade badge pyartifactory artifact_stats badge_coverage",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyartifactory",
  "homepage": "https://github.com/anancarv/python-artifactory",
  "release_count": 37,
  "dependency_ids": [
    "pypi_pydantic",
    "pypi_requests",
    "pypi_typing_extensions"
  ]
}
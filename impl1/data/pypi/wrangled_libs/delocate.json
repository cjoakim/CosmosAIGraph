{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "programming language :: python :: 3",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/delocate\n    :target: https://pypi.org/project/delocate/\n.. image:: https://codecov.io/gh/matthew-brett/delocate/branch/master/graph/badge.svg?token=wvawrbk5di\n    :target: https://codecov.io/gh/matthew-brett/delocate\n\n########\ndelocate\n########\n\nmacos utilities to:\n\n* find dynamic libraries imported from python extensions\n* copy needed dynamic libraries to directory within package\n* update macos ``install_names`` and ``rpath`` to cause code to load from copies\n  of libraries\n\nprovides scripts:\n\n* ``delocate-listdeps`` -- show libraries a tree depends on\n* ``delocate-path`` -- copy libraries a tree depends on into the tree and relink\n* ``delocate-wheel`` -- rewrite wheel having copied and relinked library\n  dependencies into the wheel tree.\n* ``delocate-fuse`` -- combine two wheels with different architectures into one\n  wheel with dual architecture binaries.\n\n`auditwheel <https://github.com/pypa/auditwheel>`_ is a similar tool for linux.\nauditwheel started life as a partial fork of delocate.\n\n***********\nthe problem\n***********\n\nlet's say you have built a wheel somewhere, but it's linking to dynamic\nlibraries elsewhere on the machine, so you can't distribute it, because others\nmay not have these same libraries.  here we analyze the dependencies for\na scipy wheel::\n\n    $ delocate-listdeps scipy-0.14.0b1-cp34-cp34m-macosx_10_6_intel.whl\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgcc_s.1.dylib\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgfortran.3.dylib\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libquadmath.0.dylib\n\nby default, this does not include libraries in ``/usr/lib`` and ``/system``.\nsee those too with::\n\n    $ delocate-listdeps --all scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    /system/library/frameworks/accelerate.framework/versions/a/accelerate\n    /usr/lib/libsystem.b.dylib\n    /usr/lib/libstdc++.6.dylib\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgcc_s.1.dylib\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgfortran.3.dylib\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libquadmath.0.dylib\n\nthe output tells me that scipy has picked up dynamic libraries from my\nhomebrew installation of ``gfortran`` (as well as the system libs).\n\nyou can get a listing of the files depending on each of the libraries,\nusing the ``--depending`` flag::\n\n    $ delocate-listdeps --depending scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgcc_s.1.dylib:\n        scipy/interpolate/dfitpack.so\n        scipy/special/specfun.so\n        scipy/interpolate/_fitpack.so\n        ...\n\n**********\na solution\n**********\n\nwe can fix like this::\n\n    $ delocate-wheel -w fixed_wheels -v scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    fixing: scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    copied to package .dylibs directory:\n        /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgcc_s.1.dylib\n        /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgfortran.3.dylib\n        /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libquadmath.0.dylib\n\nthe ``-w`` flag tells `delocate-wheel` to output to a new wheel directory\ninstead of overwriting the old wheel.  ``-v`` (verbose) tells you what\n`delocate-wheel` is doing.  in this case it has made a new directory in the\nwheel zipfile, named ``scipy/.dylibs``. it has copied all the library\ndependencies that are outside the macos system trees into this directory, and\npatched the python ``.so`` extensions in the wheel to use these copies instead\nof looking in ``/usr/local/cellar/gfortran/4.8.2/gfortran/lib``.\n\ncheck the links again to confirm::\n\n    $ delocate-listdeps --all fixed_wheels/scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    /system/library/frameworks/accelerate.framework/versions/a/accelerate\n    /usr/lib/libsystem.b.dylib\n    /usr/lib/libstdc++.6.0.9.dylib\n    @loader_path/../../../../.dylibs/libgcc_s.1.dylib\n    @loader_path/../../../../.dylibs/libgfortran.3.dylib\n    @loader_path/../../../../.dylibs/libquadmath.0.dylib\n    @loader_path/../../../.dylibs/libgcc_s.1.dylib\n    @loader_path/../../../.dylibs/libgfortran.3.dylib\n    @loader_path/../../../.dylibs/libquadmath.0.dylib\n    @loader_path/../../.dylibs/libgcc_s.1.dylib\n    @loader_path/../../.dylibs/libgfortran.3.dylib\n    @loader_path/../../.dylibs/libquadmath.0.dylib\n    @loader_path/../.dylibs/libgcc_s.1.dylib\n    @loader_path/../.dylibs/libgfortran.3.dylib\n    @loader_path/../.dylibs/libquadmath.0.dylib\n    @loader_path/libgcc_s.1.dylib\n    @loader_path/libquadmath.0.dylib\n\nso - system dylibs the same, but the others moved into the wheel tree.\n\nthis makes the wheel more likely to work on another machine which does not have\nthe same version of gfortran installed - in this example.\n\nchecking required architectures\n===============================\n\ncurrent python.org python and the macos system python (``/usr/bin/python``)\nare both dual architecture binaries.  for example::\n\n    $ lipo -info /usr/bin/python\n    architectures in the fat file: /usr/bin/python are: x86_64 arm64e\n\n**note**: you can compile arm binaries for basic arm (``arm64``), or to use\nsome extended arm capabilities (``arm64e``) - see `this so post\n<https://stackoverflow.com/questions/52624308/xcode-arm64-vs-arm64e>`_.  both\ntypes of binaries work on mac m1 and m2 machines, so we will use ``arm64`` to\nrefer to either ``arm64`` or ``arm64e``.\n\nthe big sur macos python above has both ``x86_64`` and ``arm64`` (m1) versions\nfused into one file.  earlier versions of macos had dual architectures that\nwere 32-bit (``i386``) and 64-bit (``x86_64``).\n\nfor full compatibility with system and python.org python, wheels built for\npython.org python or system python should have the corresponding architectures\n\u2014 e.g. ``x86_64`` and ``arm64`` versions of the python extensions and their\nlibraries.  it is easy to link python extensions against single architecture\nlibraries by mistake, and therefore get single architecture extensions and /\nor libraries. in fact my scipy wheel is one such example, because i\ninadvertently linked against the homebrew libraries, which were ``x86_64``\nonly. to check this you can use the ``--require-archs`` flag::\n\n    $ delocate-wheel --require-archs=intel scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    traceback (most recent call last):\n    file \"/users/mb312/.virtualenvs/delocate/bin/delocate-wheel\", line 77, in <module>\n        main()\n    file \"/users/mb312/.virtualenvs/delocate/bin/delocate-wheel\", line 69, in main\n        check_verbose=opts.verbose)\n    file \"/users/mb312/.virtualenvs/delocate/lib/python2.7/site-packages/delocate/delocating.py\", line 477, in delocate_wheel\n        \"some missing architectures in wheel\")\n    delocate.delocating.delocationerror: some missing architectures in wheel\n\nnotice that this command was using an earlier version of delocate that\nsupported python 2; we now support python 3 only.\n\nthe ``intel`` argument to ``--require-arch`` above requires dual 32- and 64-\nbit architecture extensions and libraries. you can see which extensions are at\nfault by adding the ``-v`` (verbose) flag::\n\n    $ delocate-wheel -w fixed_wheels --require-archs=intel -v scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    fixing: scipy-0.14.0-cp34-cp34m-macosx_10_6_intel.whl\n    required arch i386 missing from /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libgfortran.3.dylib\n    required arch i386 missing from /usr/local/cellar/gfortran/4.8.2/gfortran/lib/libquadmath.0.dylib\n    required arch i386 missing from scipy/fftpack/_fftpack.so\n    required arch i386 missing from scipy/fftpack/convolve.so\n    required arch i386 missing from scipy/integrate/_dop.so\n    ...\n\ni need to rebuild this wheel to link with dual-architecture libraries.\n\nmaking dual-architecture binaries\n=================================\n\nmodern mac wheels can be either ``arm64`` (m1/m2 arm), ``x86_64`` (64-bit\nintel) or both (``universal2``).\n\nbuilding an entire python wheel as dual-architecture can be difficult, perhaps\nbecause you need to link different libraries in the two cases, or you need\ndifferent compiler flags, or because you build for ``arm64`` on one continuous\nintegration platform (such as - at time of writing - cirrus ci), and ``x86_64``\non another.\n\none solution to this problem is to do an entire ``arm64`` wheel build, and then\nan entire ``x86_64`` wheel build, and *fuse* the two wheels into a universal\nwheel.\n\nthat is what the ``delocate-fuse`` command does.\n\nlet's say you have built an arm and intel wheel, called, respectively:\n\n* ``scipy-1.9.3-cp311-cp311-macosx_12_0_arm64.whl``\n* ``scipy-1.9.3-cp311-cp311-macosx_10_9_x86_64.whl``\n\nthen you could create a new fused (``universal2``) wheel in the `tmp`\nsubdirectory with::\n\n    delocate-fuse scipy-1.9.3-cp311-cp311-macosx_12_0_arm64.whl scipy-1.9.3-cp311-cp311-macosx_10_9_x86_64.whl -w tmp\n\nthe output wheel in that case would be:\n\n* ``tmp/scipy-1.9.3-cp311-cp311-macosx_12_0_arm64.whl``\n\nnote that we specified an output directory above with the ``-w`` flag.  if we\nhad not done that, then we overwrite the first wheel with the fused wheel.  and\nnote that the wheel written into the ``tmp`` subdirectory has the same name as\nthe first-specified wheel.\n\nin the new wheel, you will find, using ``lipo -archs`` - that all binaries with\nthe same name in each wheel are now universal (``x86_64`` and ``arm64``).\n\nto be useful, you should rename the output wheel to reflect the fact that it is\nnow a universal wheel - in this case to:\n\n* ``tmp/scipy-1.9.3-cp311-cp311-macosx_12_0_universal2.whl``\n\ntroubleshooting\n===============\n\ndelocationerror: \"library does not exist\"\n-----------------------------------------\n\nwhen running ``delocate-wheel`` or its sister command ``delocate-path``, you\nmay get errors like this::\n\n    delocate.delocating.delocationerror: library \"<long temporary path>/wheel/libme.dylib\" does not exist\n\nthis happens when one of your libraries gives a library dependency with a\nrelative path.  for example, let's say that some file in my wheel has this for\nthe output of ``otool -l myext.so``::\n\n    myext.so:\n        libme.dylib (compatibility version 10.0.0, current version 10.0.0)\n        /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 60.0.0)\n        /usr/lib/libsystem.b.dylib (compatibility version 1.0.0, current version 1197.1.1)\n\nthe first line means that ``myext.so`` expects to find ``libme.dylib`` at\nexactly the path ``./libme.dylib`` - the current working directory from which\nyou ran the executable.  the output *should* be something like::\n\n    myext.so:\n        /path/to/libme.dylib (compatibility version 10.0.0, current version 10.0.0)\n        /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 60.0.0)\n        /usr/lib/libsystem.b.dylib (compatibility version 1.0.0, current version 1197.1.1)\n\nto set the path to the library, the linker is using the `install name id`_ of\nthe linked library.  in this bad case, then ``otool -l libme.dylib`` will give\nsomething like::\n\n    libme.dylib (compatibility version 10.0.0, current version 10.0.0)\n    /usr/lib/libsystem.b.dylib (compatibility version 1.0.0, current version 1197.1.1)\n\nwhere the first line is the `install name id`_ that the linker picked up when\nlinking ``myext.so`` to ``libme.dylib``.  your job is to fix the build process\nso that ``libme.dylib`` has install name id ``/path/to/libme.dylib``.\nthis is not a problem specific to delocate; you will need to do this to\nmake sure that ``myext.so`` can load ``libme.dylib`` without ``libme.dylib``\nbeing in the current working directory.  for ``cmake`` builds you may want to\ncheck out cmake_install_name_dir_.\n\n****\ncode\n****\n\nsee https://github.com/matthew-brett/delocate\n\nreleased under the bsd two-clause license - see the file ``license`` in the\nsource distribution.\n\n`travis-ci <https://travis-ci.org/matthew-brett/delocate>`_ kindly tests the\ncode automatically under python 3.6 through 3.9.\n\nthe latest released version is at https://pypi.python.org/pypi/delocate\n\n*******\nsupport\n*******\n\nplease put up issues on the `delocate issue tracker\n<https://github.com/matthew-brett/delocate/issues>`_.\n\n.. _install name id:\n   http://matthew-brett.github.io/docosx/mac_runtime_link.html#the-install-name\n.. _cmake_install_name_dir:\n   http://www.cmake.org/cmake/help/v3.0/variable/cmake_install_name_dir.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright (c) 2014-2023, matthew brett and the delocate contributors. all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "delocate",
  "package_url": "https://pypi.org/project/delocate/",
  "project_url": "https://pypi.org/project/delocate/",
  "project_urls": {
    "Homepage": "http://github.com/matthew-brett/delocate"
  },
  "release_url": "https://pypi.org/project/delocate/0.10.7/",
  "requires_dist": [
    "packaging >=20.9",
    "typing-extensions",
    "bindepend ; sys_platform == \"win32\"",
    "machomachomangler ; sys_platform == \"win32\""
  ],
  "requires_python": ">=3.7",
  "summary": "move macos dynamic libraries into package",
  "version": "0.10.7",
  "releases": [],
  "developers": [
    "matthew.brett@gmail.com"
  ],
  "kwds": "libraries binaries mac_runtime_link delocate _fitpack",
  "license_kwds": "liability liable copyright negligence disclaimer",
  "libtype": "pypi",
  "id": "pypi_delocate",
  "homepage": "",
  "release_count": 30,
  "dependency_ids": [
    "pypi_bindepend",
    "pypi_machomachomangler",
    "pypi_packaging",
    "pypi_typing_extensions"
  ]
}
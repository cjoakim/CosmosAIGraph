{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: user interfaces"
  ],
  "description": "# qtawesome\r\n\r\n[![license](https://img.shields.io/pypi/l/qtawesome.svg)](./license)\r\n[![pypi version](https://img.shields.io/pypi/v/qtawesome.svg)](https://pypi.org/project/qtawesome/)\r\n[![conda version](https://img.shields.io/conda/vn/conda-forge/qtawesome.svg)](https://www.anaconda.com/download/)\r\n[![download count](https://img.shields.io/conda/d/conda-forge/qtawesome.svg)](https://www.anaconda.com/download/)\r\n[![opencollective backers](https://opencollective.com/spyder/backers/badge.svg?color=blue)](#backers)\r\n[![join the chat at https://gitter.im/spyder-ide/public](https://badges.gitter.im/spyder-ide/spyder.svg)](https://gitter.im/spyder-ide/public)<br>\r\n[![pypi status](https://img.shields.io/pypi/status/qtawesome.svg)](https://github.com/spyder-ide/qtawesome)\r\n[![github windows build status](https://github.com/spyder-ide/qtawesome/workflows/windows%20tests/badge.svg)](https://github.com/spyder-ide/qtawesome/actions)\r\n[![github linux build status](https://github.com/spyder-ide/qtawesome/workflows/linux%20tests/badge.svg)](https://github.com/spyder-ide/qtawesome/actions)\r\n[![github macos build status](https://github.com/spyder-ide/qtawesome/workflows/macos%20tests/badge.svg)](https://github.com/spyder-ide/qtawesome/actions)\r\n[![documentation status](https://readthedocs.org/projects/qtawesome/badge/?version=latest)](https://qtawesome.readthedocs.io/en/latest/?badge=latest)\r\n[![codecov](https://codecov.io/gh/spyder-ide/qtawesome/branch/master/graph/badge.svg?token=cylan0teq1)](https://codecov.io/gh/spyder-ide/qtawesome)\r\n\r\n*copyright \u00a9 2015- spyder project contributors*\r\n\r\n\r\n## description\r\n\r\nqtawesome enables iconic fonts such as font awesome and elusive icons\r\nin pyqt and pyside applications.\r\n\r\nit started as a python port of the [qtawesome](\r\nhttps://github.com/gamecreature/qtawesome)\r\nc++ library by rick blommers.\r\n\r\n\r\n## installation\r\n\r\nusing `conda`:\r\n\r\n```\r\nconda install qtawesome\r\n```\r\n\r\nor using `pip` (only if you don't have conda installed):\r\n\r\n```\r\npip install qtawesome\r\n```\r\n\r\n\r\n## usage\r\n\r\n### supported fonts\r\n\r\nqtawesome identifies icons by their **prefix** and their **icon name**, separated by a *period* (`.`) character.\r\n\r\nthe following prefixes are currently available to use:\r\n\r\n- [**fontawesome**](https://fontawesome.com):\r\n\r\n  - fa 5.15.4 features 1,608 free icons in different styles:\r\n\r\n    - `fa5` prefix has [151 icons in the \"**regular**\" style.](https://fontawesome.com/v5/search?o=r&m=free&s=regular)\r\n    - `fa5s` prefix has [1001 icons in the \"**solid**\" style.](https://fontawesome.com/v5/search?o=r&m=free&s=solid)\r\n    - `fa5b` prefix has [456 icons of various **brands**.](https://fontawesome.com/v5/search?o=r&m=free&f=brands)\r\n\r\n  - `fa` is the legacy [fa 4.7 version with its 675 icons](https://fontawesome.com/v4.7.0/icons/) but **all** of them (*and more!*) are part of fa 5.x so you should probably use the newer version above.\r\n\r\n- `ei` prefix holds [**elusive icons** 2.0 with its 304 icons](http://elusiveicons.com/icons/).\r\n\r\n- [**material design icons**](https://pictogrammers.com/library/mdi/)\r\n\r\n  - `mdi6` prefix holds [**material design icons** 6.9.96 with its 6997 icons.](https://cdn.materialdesignicons.com/6.9.96/)\r\n\r\n  - `mdi` prefix holds [**material design icons** 5.9.55 with its 5955 icons.](https://cdn.materialdesignicons.com/5.9.55/)\r\n\r\n- `ph` prefix holds [**phosphor** 1.3.0 with its 4470 icons (894 icons * 5 weights: thin, light, regular, bold and fill).](https://github.com/phosphor-icons/phosphor-icons)\r\n\r\n- `ri` prefix holds [**remix icon** 2.5.0 with its 2271 icons.](https://github.com/remix-design/remixicon)\r\n\r\n- `msc` prefix holds microsoft's [**codicons** 0.0.35 with its 446 icons.](https://github.com/microsoft/vscode-codicons)\r\n\r\n### examples\r\n\r\n```python\r\nimport qtawesome as qta\r\n```\r\n\r\n- use font awesome, elusive icons, material design icons, phosphor, remix icon or microsoft's codicons.\r\n\r\n```python\r\n# get fontawesome 5.x icons by name in various styles:\r\nfa5_icon = qta.icon('fa5.flag')\r\nfa5_button = qtwidgets.qpushbutton(fa5_icon, 'font awesome! (regular)')\r\nfa5s_icon = qta.icon('fa5s.flag')\r\nfa5s_button = qtwidgets.qpushbutton(fa5s_icon, 'font awesome! (solid)')\r\nfa5b_icon = qta.icon('fa5b.github')\r\nfa5b_button = qtwidgets.qpushbutton(fa5b_icon, 'font awesome! (brands)')\r\n\r\n# or elusive icons:\r\nasl_icon = qta.icon('ei.asl')\r\nelusive_button = qtwidgets.qpushbutton(asl_icon, 'elusive icons!')\r\n\r\n# or material design icons:\r\napn_icon = qta.icon('mdi6.access-point-network')\r\nmdi6_button = qtwidgets.qpushbutton(apn_icon, 'material design icons!')\r\n\r\n# or phosphor:\r\nmic_icon = qta.icon('ph.microphone-fill')\r\nph_button = qtwidgets.qpushbutton(mic_icon, 'phosphor!')\r\n\r\n# or remix icon:\r\ntruck_icon = qta.icon('ri.truck-fill')\r\nri_button = qtwidgets.qpushbutton(truck_icon, 'remix icon!')\r\n\r\n# or microsoft's codicons:\r\nsquirrel_icon = qta.icon('msc.squirrel')\r\nmsc_button = qtwidgets.qpushbutton(squirrel_icon, 'codicons!')\r\n\r\n```\r\n\r\n- apply some styling\r\n\r\n```python\r\n# styling icons\r\nstyling_icon = qta.icon('fa5s.music',\r\n                        active='fa5s.balance-scale',\r\n                        color='blue',\r\n                        color_active='orange')\r\nmusic_button = qtwidgets.qpushbutton(styling_icon, 'styling')\r\n```\r\n\r\n- set alpha in colors\r\n\r\n```python\r\n# setting an alpha of 120 to the color of this icon. alpha must be a number\r\n# between 0 and 255.\r\nicon_with_alpha = qta.icon('mdi.heart',\r\n                           color=('red', 120))\r\nheart_button = qtwidgets.qpushbutton(icon_with_alpha, 'setting alpha')\r\n```\r\n\r\n- stack multiple icons\r\n\r\n```python\r\n# stacking icons\r\ncamera_ban = qta.icon('fa5s.camera', 'fa5s.ban',\r\n                      options=[{'scale_factor': 0.5,\r\n                                'active': 'fa5s.balance-scale'},\r\n                               {'color': 'red'}])\r\nstack_button = qtwidgets.qpushbutton(camera_ban, 'stack')\r\nstack_button.seticonsize(qtcore.qsize(32, 32))\r\n```\r\n\r\n- define the way to draw icons (`text`- default for icons without animation, `path` - default for icons with animations, `glyphrun` and `image`)\r\n\r\n```python\r\n# icon drawn with the `image` option\r\ndrawn_image_icon = qta.icon('ri.truck-fill',\r\n                            options=[{'draw': 'image'}])\r\ndrawn_image_button = qtwidgets.qpushbutton(drawn_image_icon,\r\n                                           'icon drawn as an image')\r\n```\r\n\r\n- animations\r\n\r\n```python\r\n# spining icons\r\nspin_button = qtwidgets.qpushbutton(' spinning icon')\r\nanimation = qta.spin(spin_button)\r\nspin_icon = qta.icon('fa5s.spinner', color='red', animation=animation)\r\nspin_button.seticon(spin_icon)\r\n\r\n# stop the animation when needed\r\nanimation.stop()\r\n```\r\n\r\n- display icon as a widget\r\n\r\n```python\r\n# spining icon widget\r\nspin_widget = qta.iconwidget()\r\nanimation = qta.spin(spin_widget, autostart=false)\r\nspin_icon = qta.icon('mdi.loading', color='red', animation=animation)\r\nspin_widget.seticon(spin_icon)\r\n\r\n# simple icon widget\r\nsimple_widget = qta.iconwidget('mdi.web', color='blue', \r\n                               size=qtcore.qsize(16, 16))\r\n\r\n# start and stop the animation when needed\r\nanimation.start()\r\nanimation.stop()\r\n```\r\n\r\n- screenshot\r\n\r\n![qtawesome screenshot](qtawesome-screenshot.gif)\r\n\r\n\r\nto check these options you can launch the `example.py` script and pass to it the options as arguments. for example, to test how the icons could look using the `glyphrun` draw option, you can run something like:\r\n\r\n```\r\npython example.py draw=glyphrun\r\n```\r\n\r\n## other features\r\n\r\n- qtawesome comes bundled with _font awesome_, _elusive icons_, _material design_\r\n  _icons_, _phosphor_, _remix icon_ and microsoft's _codicons_\r\n  but it can also be used with other iconic fonts. the `load_font`\r\n  function allows to load other fonts dynamically.\r\n- qtawesome relies on the [qtpy](https://github.com/spyder-ide/qtpy.git)\r\n  project as a compatibility layer on the top ot pyqt or pyside.\r\n\r\n### icon browser\r\n\r\nqtawesome ships with a browser that displays all the available icons.  you can\r\nuse this to search for an icon that suits your requirements and then copy the\r\nname that should be used to create that icon!\r\n\r\nonce installed, run `qta-browser` from a shell to start the browser.\r\n\r\n![qta-browser](qtawesome-browser.png)\r\n\r\n\r\n## license\r\n\r\nmit license. copyright 2015 - the spyder development team.\r\nsee the [license](license) file for details.\r\n\r\nthe [font awesome](https://github.com/fortawesome/font-awesome/blob/master/license.txt) and [elusive icons](http://elusiveicons.com/license/) fonts are licensed under the [sil open font license](http://scripts.sil.org/ofl).\r\n\r\nthe phosphor font is licensed under the [mit license](https://github.com/phosphor-icons/phosphor-icons/blob/master/license).\r\n\r\nthe [material design icons](https://github.com/templarian/materialdesign/blob/master/license) font is licensed under the [apache license version 2.0](http://www.apache.org/licenses/license-2.0).\r\n\r\nthe remix icon font is licensed under the [apache license version 2.0](https://github.com/remix-design/remixicon/blob/master/license).\r\n\r\nmicrosoft's codicons are licensed under a [creative commons attribution 4.0 international public license](https://github.com/microsoft/vscode-codicons/blob/master/license).\r\n\r\n## sponsors\r\n\r\nspyder and its subprojects are funded thanks to the generous support of\r\n\r\n[![quansight](https://user-images.githubusercontent.com/16781833/142477716-53152d43-99a0-470c-a70b-c04bbfa97dd4.png)](https://www.quansight.com/)[![numfocus](https://i2.wp.com/numfocus.org/wp-content/uploads/2017/07/numfocus_lrg.png?fit=320%2c148&ssl=1)](https://numfocus.org/)\r\n\r\nand the donations we have received from our users around the world through [open collective](https://opencollective.com/spyder/):\r\n\r\n[![sponsors](https://opencollective.com/spyder/sponsors.svg)](https://opencollective.com/spyder#support)\r\n",
  "docs_url": null,
  "keywords": "pyqt,pyside,icons,font awesome,fonts",
  "license": "mit",
  "name": "qtawesome",
  "package_url": "https://pypi.org/project/QtAwesome/",
  "project_url": "https://pypi.org/project/QtAwesome/",
  "project_urls": {
    "Homepage": "https://github.com/spyder-ide/qtawesome"
  },
  "release_url": "https://pypi.org/project/QtAwesome/1.3.0/",
  "requires_dist": [
    "qtpy"
  ],
  "requires_python": ">=3.7",
  "summary": "fontawesome icons in pyqt and pyside applications",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "spyder.python@gmail.com",
    "spyder_development_team_and_qtawesome_contributors",
    "sylvain_corlay_and_the_spyder_development_team"
  ],
  "kwds": "icons qtwidgets qtpy pyqt pyside",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_qtawesome",
  "homepage": "https://github.com/spyder-ide/qtawesome",
  "release_count": 45,
  "dependency_ids": [
    "pypi_qtpy"
  ]
}
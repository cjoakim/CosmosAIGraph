{
  "classifiers": [
    "environment :: console",
    "framework :: flake8",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "# flake8-function-order\n\nan extension for flake8 to report on wrong class attributes order and\nclass level logic, adapted from the `flake8-class-attributes-order` package by @best-doctor.\n\nthe validator can extract class attribute type: docstring, property,\nnested class, `global_var`, etc.\nif django model fields are detected, the validator can detect,\nif the field is link to another table (foreign key, generic key, etc)\nor not.\n\nafter resolving each attribute type, validator checks attributes order.\n\ndefault configuration checks for the following order of attributes:\n\n- `__new__`\n- `__init__`\n- `__post_init__`\n- other magic methods\n- `@property`\n- `@staticmethod`\n- `@classmethod`\n- other methods\n- private methods\n\nif the order is broken, validator will report on it.\n\nbesides methods, the validator checks other attributes methods:\ndocstrings, nested classes, constants, attributes, and so on.\n\nalso validator checks, if class has no class level logic and report\nif any. here is an example:\n\n```python\nclass phoneform(forms.form):\n    phone = forms.charfield(17, label='\u0442\u0435\u043b\u0435\u0444\u043e\u043d'.upper())\n\n    # this should happen in __init__!\n    phone.widget.attrs.update({'class': 'form-control phone'})\n\n```\n\n## installation\n\n```\npip install flake8-function-order\n```\n\nconfigurable options:\n\n| option                |               description           | fallbacks to\\* |\n|:---------------------:|:-----------------------------------:|:--------------:|\n|meta_class             |class meta: (e.g. in django projects)| nested_class   |\n|nested_class           |other nested classes                 | none\\*         |\n|constant               |some_constants                       | field          |\n|outer_field            |some = models.foreignkey etc.        | field          |\n|field                  |other fields                         | none           |\n|`__new__`              |`__new__`                            | magic_method   |\n|`__init__`             |`__init__`                           | magic_method   |\n|`__post_init__`        |`__post_init__`                      | magic_method   |\n|`__str__`              |`__str__`                            | magic_method   |\n|magic_method           |other magic methods                  | method         |\n|save                   |def save(...)                        | method         |\n|delete                 |def delete(...)                      | method         |\n|property_method        |@property/@cached_property etc.      | method         |\n|private_property_method|@property/@cached_property with _    | property_method|\n|static_method          |@staticmethod                        | method         |\n|private_static_method  |@staticmethod beginning with _       | static_method  |\n|class_method           |@classmethod                         | method         |\n|private_class_method   |@classmethod beginning with _        | class_method   |\n|private_method         |other methods beginning with _       | method         |\n|method                 |other methods                        | none           |\n\n\\* if not provided, will use its supertype order\n\n\\*\\*  if not defined, such base types and all their subtypes (unless defined)\nwill be ignored during validation. it's recommended\nto set at least `nested_class`, `field` and `method`\n\nyou choose how detailed your configuration is.\nfor example, you can define order of each supported magic method\n(`__new__`, `__str__`, etc.), or set `magic_method`\nto allow any order among them or even just use `method`\n\nusage:\n\n```terminal\n$ flake8 test.py\ntest.py:5:5: cce001 user.fetch_info_from_crm should be after user.login_field\ntest.py:15:5: cce002 class level expression detected model usernode, line 15\n```\n\ntested on python 3.7.x and flake8 3.7.5.\n\n## error codes\n\n| error code |                     description                          |\n|:----------:|:--------------------------------------------------------:|\n|   cce001   | wrong class attributes order (`xxx should be after yyy`) |\n|   cce002   | class level expression detected                          |\n\n\n",
  "docs_url": null,
  "keywords": "flake8",
  "license": "mit",
  "name": "flake8-function-order",
  "package_url": "https://pypi.org/project/flake8-function-order/",
  "project_url": "https://pypi.org/project/flake8-function-order/",
  "project_urls": {
    "Homepage": "https://github.com/TylerYep/flake8-function-order"
  },
  "release_url": "https://pypi.org/project/flake8-function-order/0.0.5/",
  "requires_dist": [
    "flake8",
    "setuptools"
  ],
  "requires_python": ">=3.6",
  "summary": "flake8 extension that checks function order within a class",
  "version": "0.0.5",
  "releases": [],
  "developers": [
    "tyep@cs.stanford.edu",
    "tyler_yep"
  ],
  "kwds": "flake8 class_method validator magic_method nested_class",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_function_order",
  "homepage": "https://github.com/tyleryep/flake8-function-order",
  "release_count": 5,
  "dependency_ids": [
    "pypi_flake8",
    "pypi_setuptools"
  ]
}
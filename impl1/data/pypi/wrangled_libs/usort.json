{
  "classifiers": [],
  "description": "# \u03bcsort\n\n**safe, minimal import sorting for python projects.**\n\n[![documentation](https://readthedocs.org/projects/usort/badge/?version=stable)](https://usort.readthedocs.io/en/stable/?badge=stable)\n[![version](https://img.shields.io/pypi/v/usort.svg)](https://pypi.org/project/usort)\n[![changelog](https://img.shields.io/badge/change-log-blue.svg)](https://usort.readthedocs.io/en/latest/changelog.html)\n[![license](https://img.shields.io/pypi/l/usort.svg)](https://github.com/facebook/usort/blob/main/license)\n\n\u03bcsort is a safe, minimal import sorter. its primary goal is to make no \"dangerous\"\nchanges to code. this is achieved by detecting distinct \"blocks\" of imports that are\nthe most likely to be safely interchangeable, and only reordering imports within these\nblocks without altering formatting. code style is left as an exercise for linters\nand formatters.\n\nwithin a block, \u00b5sort will follow common python conventions for grouping imports based\non source (standard library, third-party, first-party, or relative), and then sorting\nlexicographically within each group. this will commonly look like:\n\n```py\nimport re\nfrom pathlib import path\nfrom typing import iterable\nfrom unittest.mock import call, mock, patch\n\nimport aiohttp\nfrom aiosqlite import connect\n\nimport foo\nfrom bar import bar\n\nfrom .main import main\n```\n\nblocks are inferred from a number of real world conditions, including any intermediate\nstatements between imports:\n\n```py\nimport warnings\nwarnings.filterwarnings(...)\n\nimport re\nimport sys\n```\n\nin this case, \u00b5sort detects two blocks\u2013separated by the call to `filterwarnings()`,\nand will only sort imports inside of each block. running \u00b5sort on this code\nwill generate no changes, because each block is already sorted.\n\nimports can be excluded from blocks using the `#usort:skip` directive, or with\n`#isort:skip` for compatibility with existing codebases. \u00b5sort will leave\nthese imports unchanged, and treat them as block separators.\n\nsee the [user guide][] for more details about how blocks are detected,\nand how sorting is performed.\n\n\n## install\n\n\u00b5sort requires python 3.6 or newer to run. install \u00b5sort with:\n\n```shell-session\n$ pip install usort\n```\n\n\n## usage\n\nto format one or more files or directories in-place:\n\n```shell-session\n$ usort format <path> [<path> ...]\n```\n\nto generate a diff of changes without modifying files:\n\n```shell-session\n$ usort diff <path>\n```\n\nto just validate that files are formatted correctly, like during ci:\n\n```shell-session\n$ usort check <path>\n```\n\n### pre-commit\n\n\u00b5sort provides a [pre-commit](https://pre-commit.com/) hook. to enforce sorted\nimports before every commit, add the following to your `.pre-commit-config.yaml`\nfile:\n\n```yaml\n- repo: https://github.com/facebook/usort\n  rev: v1.0.7\n  hooks:\n    - id: usort\n```\n\n## license\n\n\u03bcsort is mit licensed, as found in the [license][] file.\n\n[license]: https://github.com/facebook/usort/tree/main/license\n[user guide]: https://usort.readthedocs.io/en/stable/guide.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "usort",
  "package_url": "https://pypi.org/project/usort/",
  "project_url": "https://pypi.org/project/usort/",
  "project_urls": {
    "Homepage": "https://github.com/facebook/usort"
  },
  "release_url": "https://pypi.org/project/usort/1.0.7/",
  "requires_dist": [
    "attrs (>=21.2.0)",
    "click (>=7.0.0)",
    "LibCST (>=0.3.7)",
    "moreorless (>=0.3.0)",
    "stdlibs (>=2021.4.1)",
    "toml (>=0.10.0)",
    "trailrunner (>=1.0)"
  ],
  "requires_python": ">=3.6",
  "summary": "a small, safe import sorter",
  "version": "1.0.7",
  "releases": [],
  "developers": [
    "thatch@fb.com",
    "tim_hatch"
  ],
  "kwds": "\u03bcsort sorting sort \u00b5sort sorter",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_usort",
  "homepage": "https://github.com/facebook/usort",
  "release_count": 23,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_click",
    "pypi_libcst",
    "pypi_moreorless",
    "pypi_stdlibs",
    "pypi_toml",
    "pypi_trailrunner"
  ]
}
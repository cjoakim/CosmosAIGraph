{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development",
    "topic :: software development :: build tools",
    "topic :: software development :: version control :: git"
  ],
  "description": "# generate changelog\n\n<!-- start badges -->\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/callowayproject/generate-changelog/master.svg)](https://results.pre-commit.ci/latest/github/callowayproject/generate-changelog/master)\n[![codecov](https://codecov.io/gh/callowayproject/generate-changelog/branch/master/graph/badge.svg?token=iprmv15d17)](https://codecov.io/gh/callowayproject/generate-changelog)\n\nuse your commit log to make a beautiful changelog file.\n<!-- end badges -->\n\n- [documentation](https://callowayproject.github.io/generate-changelog/)\n- [github](https://github.com/callowayproject/generate-changelog)\n\n`generate-changelog` does what it says: it generates a full changelog, or updates an existing one. git tags and commits are the inputs by which `generate-changelog` performs its task.\n\nthe primary goal of this tool was to provide the benefits of [conventional commits](https://www.conventionalcommits.org/) without requiring a strict syntax. `generate-changelog` accomplishes this using configurable regular expressions or commit metadata matching. the thought is natural language is easier for developers to remember and requires less tooling to enforce.\n\n## features\n\n### commit and tag processing\n\n- filter out commits and tags based on regular expression matching.\n- classify commit messages into sections such as \"new\", \"fixes\", and \"changes\" using configurable regular expressions, metadata, or custom criteria.\n- rewrite commit summary or commit body using pipelines of actions.\n- extract parts of the commit summary or body into metadata available for templates and filters.\n- built-in issue parsers for jira, github, azure devops board.\n- built-in conventional commit parser\n\n### changelog rendering\n\n- templated using [jinja](https://jinja.palletsprojects.com/en/3.0.x/) templates.\n- each template has a large amount of metadata that allows linking to a commit, a version diff, and issue trackers.\n- easily customize just the template you want.\n- supports full or incremental changelog generation.\n\n### release hints\n\n- can use user-defined rules to suggest a release type for use in another part of your ci pipeline.\n\n### git support\n\n- supports your merge or rebase workflows and complicated git histories.\n- supports of multi-authors for one commit through configurable [trailers key values](https://git.wiki.kernel.org/index.php/commitmessageconventions).\n- built-in parser for turning [trailers key values](https://zerokspot.com/weblog/2020/10/24/git-commit-messages-with-attributes/) into metadata.\n\n## requirements\n\npython 3.7 or higher.\n\n## installation\n\n```bash\n$ pip install generate-changelog\n```\n\n## usage\n\ncreate a default configuration file.\n\n```bash\n$ generate-changelog --generate-config\n```\n\nthis creates a file named `.changelog-config.yaml`. you can make changes to the default configuration.\n\ngenerate your changelog via:\n\n```bash\n$ generate-changelog\n```\n",
  "docs_url": null,
  "keywords": "changelog,change,git,commit",
  "license": "mit",
  "name": "generate-changelog",
  "package_url": "https://pypi.org/project/generate-changelog/",
  "project_url": "https://pypi.org/project/generate-changelog/",
  "project_urls": {
    "Documentation": "https://callowayproject.github.io/generate-changelog/",
    "Homepage": "https://github.com/callowayproject/generate_changelog",
    "Source": "https://github.com/callowayproject/generate-changelog"
  },
  "release_url": "https://pypi.org/project/generate-changelog/0.10.0/",
  "requires_dist": [
    "GitPython",
    "jinja2",
    "more-itertools",
    "ruamel.yaml",
    "typer >=0.9.0",
    "typing-extensions ; python_version < \"3.10\"",
    "backports.cached-property ; python_version < \"3.8\"",
    "bump-my-version ; extra == 'dev'",
    "generate-changelog ; extra == 'dev'",
    "git-fame >=1.12.2 ; extra == 'dev'",
    "furo ; extra == 'docs'",
    "ghp-import ; extra == 'docs'",
    "linkify-it-py ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "Sphinx ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinx-click ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "coverage[toml] ; extra == 'test'",
    "faker ; extra == 'test'",
    "pre-commit ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-mock ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "generate a changelog file from a local git checkout",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "coreyoordt@gmail.com"
  ],
  "kwds": "changelog commits badge badges commitmessageconventions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_generate_changelog",
  "homepage": "",
  "release_count": 7,
  "dependency_ids": [
    "pypi_backports.cached_property",
    "pypi_bump_my_version",
    "pypi_coverage",
    "pypi_faker",
    "pypi_furo",
    "pypi_generate_changelog",
    "pypi_ghp_import",
    "pypi_git_fame",
    "pypi_gitpython",
    "pypi_jinja2",
    "pypi_linkify_it_py",
    "pypi_more_itertools",
    "pypi_myst_parser",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_ruamel.yaml",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_click",
    "pypi_sphinx_copybutton",
    "pypi_typer",
    "pypi_typing_extensions"
  ]
}
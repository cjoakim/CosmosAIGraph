{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "=============\nsphinx gitref\n=============\n\n.. image:: https://travis-ci.org/wildfish/sphinx-gitref.svg?branch=master\n    :target: https://travis-ci.org/wildfish/sphinx-gitref\n\n.. image:: https://codecov.io/gh/wildfish/sphinx-gitref/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/wildfish/sphinx-gitref\n\nadds a ``:gitref:`..``` role to sphinx to link to your code on github, gitlab or\nbitbucket, and to make sure the references in your docs match the code.\n\nkey features:\n\n* check code references are up to date\n* link to source code on github\n* incorporate into tests or git hooks\n\nsupports python 3.6+\n\n\ninstallation\n============\n\ninstall::\n\n    pip install sphinx-gitref\n\n\nmodify your sphinx ``conf.py``:\n\n#. add ``sphinx_gitref`` to the ``extensions`` list in your sphinx ``conf.py``::\n\n      extensions = [\n          ...\n          'sphinx_gitref',\n      ]\n\n#. optional: explicitly specify the remote url.\n\n   gitref will try to detect your remote origin url from the ``.git`` dir in your docs'\n   parent dir. if it can't find it, or detects the wrong remote, you can set or override\n   the remote url explicitly with::\n\n      gitref_remote_url = \"https://github.com/username/repository.git\"\n\n#. optional: explicitly specify the branch to link to.\n\n   gitref will try to detect your current branch from the ``.git`` dir in your docs'\n   parent dir. if it can't find it, or you'd like it to use a different branch, you can\n   set or override it explicitly with::\n\n      gitref_branch = \"master\"\n\n#. optional: change the link label format when a coderef is provided without an\n   explicit label, eg ``:gitref:`filename.py::coderef```\n\n   gitref defaults to using showing the coderef and dropping the filename. this can be\n   overridden by setting a format string::\n\n        gitref_label_format = \"{filename} {coderef}\"\n\n\nusage\n=====\n\nthe ``:gitref:`..``` role supports the following features:\n\n* ``:gitref:`path/to/filename```\n* ``:gitref:`path/to/filename.py::coderef```\n\nyou can optionally use them with a text label:\n\n* ``:gitref:`text <path/to/filename>```\n* ``:gitref:`text <path/to/filename.py::coderef>```\n\nwhere ``coderef`` is a python class, function or variable. you can also refer to class\nattributes as you would in python, eg ``myclass.attribute``.\n\nthese will be replaced by a link to the code.\n\nif you do not provide a ``coderef``, gitref will just check that the file exists.\n\nwhere you provide a ``coderef``, gitref will check that an object with that name exists\nin the code, and will add its line number to the link.\n\n\nexamples\n--------\n\nlink to a file on gitref::\n\n    this file is :gitref:`readme.rst`\n    for more information, see the :gitref:`project readme <readme.rst>`\n\nlink to a variable, function or class in a python file::\n\n    the method which turns a reference into a line number\n    is :gitref:`sphinx_python/parse.py::python_to_lineno` -\n    this will raise a warning if the reference is not found.\n\n    reference class attributes as you would in python, such\n    as :gitref:`sphinx_python/git.py::repo.path`.\n\n\nusing in tests\n--------------\n\nbecause ``sphinx-gitref`` integrates into sphinx, you can test the references are valid\nby performing a test build of your documentation.\n\n\ncustom remotes\n--------------\n\nif your code is stored somewhere other than one of the supported platforms, you can add\na custom remote by subclassing ``sphinx_github.remotes.remote`` in your sphinx\n``conf.py``; for example::\n\n    from sphinx_github.remotes import remote\n    class gitea(remote):\n        remote_match = re.compile(r\"^git@gitea.example.com:(?p<repo>.+?)\\.git$\")\n        url_pattern = \"https://gitea.example.com/{repo}/blob/{branch}/{filename}{line}\"\n        url_pattern_line = \"#l{line}\"\n\n\ncontributing\n============\n\ncontributions are welcome by pull request.\n\nthey will be merged more quickly if they are provided with unit tests; to run tests\nlocally with tox::\n\n    pip install tox\n    tox\n\n\nchangelog\n=========\n\n======= ====\n0.1.0   initial release\n\n0.2.0   add custom label formatting with ``gitref_label_format``\n\n        fix bug when node target has no id\n\n        improve branch detection to support a recently detached ``head``\n\n0.2.1   improve repository pattern matching\n======= ====\n\n\n",
  "docs_url": null,
  "keywords": "sphinx,documentation,git,source",
  "license": "bsd",
  "name": "sphinx-gitref",
  "package_url": "https://pypi.org/project/sphinx-gitref/",
  "project_url": "https://pypi.org/project/sphinx-gitref/",
  "project_urls": {
    "Homepage": "https://github.com/wildfish/sphinx-gitref"
  },
  "release_url": "https://pypi.org/project/sphinx-gitref/0.2.1/",
  "requires_dist": [
    "docutils",
    "sphinx"
  ],
  "requires_python": ">=3.6",
  "summary": "link to source code and validate references in documentation",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "developers@wildfish.com",
    "wildfish"
  ],
  "kwds": "sphinx_github sphinx_gitref sphinx_python sphinx gitref_branch",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_sphinx_gitref",
  "homepage": "https://github.com/wildfish/sphinx-gitref",
  "release_count": 4,
  "dependency_ids": [
    "pypi_docutils",
    "pypi_sphinx"
  ]
}
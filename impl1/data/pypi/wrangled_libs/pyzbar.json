{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "pyzbar\n======\n\n.. image:: https://img.shields.io/badge/python-2.7%2c%203.5%2c%203.6%2c%203.7%2c%203.8%2c%203.9%2c%203.10-blue.svg\n    :target: https://github.com/naturalhistorymuseum/pyzbar\n\n.. image:: https://badge.fury.io/py/pyzbar.svg\n    :target: https://pypi.python.org/pypi/pyzbar\n\n.. image:: https://img.shields.io/github/workflow/status/naturalhistorymuseum/pyzbar/tests/master?label=tests\n    :target: https://github.com/naturalhistorymuseum/pyzbar/actions?query=workflow%3a%22tests%22\n\n.. image:: https://coveralls.io/repos/github/naturalhistorymuseum/pyzbar/badge.svg?branch=master\n    :target: https://coveralls.io/github/naturalhistorymuseum/pyzbar?branch=master\n\nread one-dimensional barcodes and qr codes from python 2 and 3 using the\n`zbar <http://zbar.sourceforge.net/>`__ library.\n\n-  pure python\n-  works with pil / pillow images, opencv / imageio / numpy ``ndarray``\\ s, and raw bytes\n-  decodes locations of barcodes\n-  no dependencies, other than the zbar library itself\n-  tested on python 2.7, and python 3.5 to 3.10\n\nthe older `zbar <https://sourceforge.net/p/zbar/code/ci/default/tree/python/>`__\npackage is stuck in python 2.x-land.\nthe `zbarlight <https://github.com/polyconseil/zbarlight/>`__ package does not\nprovide support for windows and depends upon pillow.\n\ninstallation\n------------\n\nthe ``zbar`` dlls are included with the windows python wheels.\non other operating systems, you will need to install the ``zbar`` shared\nlibrary.\n\nmac os x:\n\n::\n\n   brew install zbar\n\nlinux:\n\n::\n\n   sudo apt-get install libzbar0\n\ninstall this python wrapper; use the second form to install dependencies of the\ncommand-line scripts:\n\n::\n\n   pip install pyzbar\n   pip install pyzbar[scripts]\n\nexample usage\n-------------\n\nthe ``decode`` function accepts instances of ``pil.image``.\n\n::\n\n   >>> from pyzbar.pyzbar import decode\n   >>> from pil import image\n   >>> decode(image.open('pyzbar/tests/code128.png'))\n   [\n       decoded(\n           data=b'foramenifera', type='code128',\n           rect=rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               point(x=37, y=551), point(x=37, y=625), point(x=361, y=626),\n               point(x=361, y=550)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n       decoded(\n           data=b'rana temporaria', type='code128',\n           rect=rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               point(x=4, y=1), point(x=4, y=75), point(x=394, y=76),\n               point(x=394, y=0)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n   ]\n\nit also accepts instances of ``numpy.ndarray``, which might come from loading\nimages using `opencv <http://opencv.org/>`__.\n\n::\n\n   >>> import cv2\n   >>> decode(cv2.imread('pyzbar/tests/code128.png'))\n   [\n       decoded(\n           data=b'foramenifera', type='code128',\n           rect=rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               point(x=37, y=551), point(x=37, y=625), point(x=361, y=626),\n               point(x=361, y=550)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n       decoded(\n           data=b'rana temporaria', type='code128',\n           rect=rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               point(x=4, y=1), point(x=4, y=75), point(x=394, y=76),\n               point(x=394, y=0)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n   ]\n\nyou can also provide a tuple ``(pixels, width, height)``, where the image data\nis eight bits-per-pixel.\n\n::\n\n   >>> image = cv2.imread('pyzbar/tests/code128.png')\n   >>> height, width = image.shape[:2]\n\n   >>> # 8 bpp by considering just the blue channel\n   >>> decode((image[:, :, 0].astype('uint8').tobytes(), width, height))\n   [\n       decoded(\n           data=b'foramenifera', type='code128',\n           rect=rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               point(x=37, y=551), point(x=37, y=625), point(x=361, y=626),\n               point(x=361, y=550)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n       decoded(\n           data=b'rana temporaria', type='code128',\n           rect=rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               point(x=4, y=1), point(x=4, y=75), point(x=394, y=76),\n               point(x=394, y=0)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n   ]\n\n   >>> # 8 bpp by converting image to greyscale\n   >>> grey = cv2.cvtcolor(image, cv2.color_bgr2gray)\n   >>> decode((grey.tobytes(), width, height))\n   [\n       decoded(\n           data=b'foramenifera', type='code128',\n           rect=rect(left=37, top=550, width=324, height=76),\n           polygon=[\n               point(x=37, y=551), point(x=37, y=625), point(x=361, y=626),\n               point(x=361, y=550)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n       decoded(\n           data=b'rana temporaria', type='code128',\n           rect=rect(left=4, top=0, width=390, height=76),\n           polygon=[\n               point(x=4, y=1), point(x=4, y=75), point(x=394, y=76),\n               point(x=394, y=0)\n           ],\n           orientation=\"up\",\n           quality=77\n       )\n   ]\n\n   >>> # if you don't provide 8 bpp\n   >>> decode((image.tobytes(), width, height))\n   traceback (most recent call last):\n     file \"<stdin>\", line 1, in <module>\n     file \"/users/lawh/projects/pyzbar/pyzbar/pyzbar.py\", line 102, in decode\n       raise pyzbarerror('unsupported bits-per-pixel [{0}]'.format(bpp))\n   pyzbar.pyzbar_error.pyzbarerror: unsupported bits-per-pixel [24]\n\nthe default behaviour is to decode all symbol types. you can look for just your\nsymbol types\n\n::\n\n   >>> from pyzbar.pyzbar import zbarsymbol\n   >>> # look for just qrcode\n   >>> decode(image.open('pyzbar/tests/qrcode.png'), symbols=[zbarsymbol.qrcode])\n   [\n       decoded(\n           data=b'thalassiodracon', type='qrcode',\n           rect=rect(left=27, top=27, width=145, height=145),\n           polygon=[\n               point(x=27, y=27), point(x=27, y=172), point(x=172, y=172),\n               point(x=172, y=27)\n           ],\n           orientation=\"up\",\n           quality=1\n       )\n   ]\n\n\n   >>> # if we look for just code128, the qrcodes in the image will not be detected\n   >>> decode(image.open('pyzbar/tests/qrcode.png'), symbols=[zbarsymbol.code128])\n   []\n\nzbar versions\n-------------\n\ndevelopment of the `original zbar <http://zbar.sourceforge.net/>`__ stopped in 2012.\ndevelopment was started again in 2019 under a `new project <https://github.com/mchehab/zbar/>`__\nthat has added some new features, including support for decoding\nbarcode orientation. at the time of writing this new project does not produce windows dlls.\nthe ``zbar`` dlls that are included with the windows python wheels are built from the original\nproject and so do not include support for decoding barcode orientation.\nif you see ``orientation=none`` then your system has an older release of zbar that does\nnot support orientation.\n\nquality field\n-------------\nfrom\n`zbar.h <https://sourceforge.net/p/zbar/code/ci/default/tree/include/zbar.h#l359>`__, the quality field is\n\n  ...an unscaled, relative quantity: larger values are better than smaller\n  values, where \"large\" and \"small\" are application dependent. expect the exact\n  definition of this quantity to change as the metric is refined. currently,\n  only the ordered relationship between two values is defined and will remain\n  stable in the future\n\nbounding boxes and polygons\n---------------------------\n\nthe blue and pink boxes show ``rect`` and ``polygon``, respectively, for\nbarcodes in ``pyzbar/tests/qrcode.png`` (see\n`bounding_box_and_polygon.py <https://github.com/naturalhistorymuseum/pyzbar/blob/master/bounding_box_and_polygon.py>`__).\n\n.. figure:: https://github.com/naturalhistorymuseum/pyzbar/raw/master/bounding_box_and_polygon.png\n   :alt: two barcodes with bounding boxes and polygons\n\nwindows error message\n---------------------\n\nif you see an ugly ``importerror`` when importing ``pyzbar`` on windows\nyou will most likely need the `visual c++ redistributable packages for visual\nstudio 2013\n<https://www.microsoft.com/en-us/download/details.aspx?id=40784>`__.\ninstall ``vcredist_x64.exe`` if using 64-bit python, ``vcredist_x86.exe`` if\nusing 32-bit python.\n\ncontributors\n------------\n\n-  alex (@globophobe) - first implementation of barcode locations\n-  dmytro ferens (@dferens) - barcode orientation\n-  ismail bento (@isman7) - support for images loaded using imageio\n-  @jaant - read barcodes containing null characters\n\nlicense\n-------\n\n``pyzbar`` is distributed under the mit license (see ``licence.txt``).\nthe ``zbar`` shared library is distributed under the\n`gnu lesser general public license, version 2.1 <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>`__\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyzbar",
  "package_url": "https://pypi.org/project/pyzbar/",
  "project_url": "https://pypi.org/project/pyzbar/",
  "project_urls": {
    "Homepage": "https://github.com/NaturalHistoryMuseum/pyzbar/"
  },
  "release_url": "https://pypi.org/project/pyzbar/0.1.9/",
  "requires_dist": [
    "enum34 (>=1.1.6) ; python_version==\"2.7\"",
    "pathlib (>=1.0.1) ; python_version==\"2.7\"",
    "Pillow (>=3.2.0) ; extra == 'scripts'"
  ],
  "requires_python": "",
  "summary": "read one-dimensional barcodes and qr codes from python 2 and 3.",
  "version": "0.1.9",
  "releases": [],
  "developers": [
    "lawrence_hudson",
    "quicklizard@googlemail.com"
  ],
  "kwds": "pyzbar pyzbar_error pyzbarerror zbar libzbar0",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyzbar",
  "homepage": "https://github.com/naturalhistorymuseum/pyzbar/",
  "release_count": 9,
  "dependency_ids": [
    "pypi_enum34",
    "pypi_pathlib",
    "pypi_pillow"
  ]
}
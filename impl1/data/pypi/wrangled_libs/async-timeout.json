{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "async-timeout\n=============\n.. image:: https://travis-ci.com/aio-libs/async-timeout.svg?branch=master\n    :target: https://travis-ci.com/aio-libs/async-timeout\n.. image:: https://codecov.io/gh/aio-libs/async-timeout/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/async-timeout\n.. image:: https://img.shields.io/pypi/v/async-timeout.svg\n    :target: https://pypi.python.org/pypi/async-timeout\n.. image:: https://badges.gitter.im/join%20chat.svg\n    :target: https://gitter.im/aio-libs/lobby\n    :alt: chat on gitter\n\nasyncio-compatible timeout context manager.\n\n\nusage example\n-------------\n\n\nthe context manager is useful in cases when you want to apply timeout\nlogic around block of code or in cases when ``asyncio.wait_for()`` is\nnot suitable. also it's much faster than ``asyncio.wait_for()``\nbecause ``timeout`` doesn't create a new task.\n\nthe ``timeout(delay, *, loop=none)`` call returns a context manager\nthat cancels a block on *timeout* expiring::\n\n   from async_timeout import timeout\n   async with timeout(1.5):\n       await inner()\n\n1. if ``inner()`` is executed faster than in ``1.5`` seconds nothing\n   happens.\n2. otherwise ``inner()`` is cancelled internally by sending\n   ``asyncio.cancellederror`` into but ``asyncio.timeouterror`` is\n   raised outside of context manager scope.\n\n*timeout* parameter could be ``none`` for skipping timeout functionality.\n\n\nalternatively, ``timeout_at(when)`` can be used for scheduling\nat the absolute time::\n\n   loop = asyncio.get_event_loop()\n   now = loop.time()\n\n   async with timeout_at(now + 1.5):\n       await inner()\n\n\nplease note: it is not posix time but a time with\nundefined starting base, e.g. the time of the system power on.\n\n\ncontext manager has ``.expired`` property for check if timeout happens\nexactly in context manager::\n\n   async with timeout(1.5) as cm:\n       await inner()\n   print(cm.expired)\n\nthe property is ``true`` if ``inner()`` execution is cancelled by\ntimeout context manager.\n\nif ``inner()`` call explicitly raises ``timeouterror`` ``cm.expired``\nis ``false``.\n\nthe scheduled deadline time is available as ``.deadline`` property::\n\n   async with timeout(1.5) as cm:\n       cm.deadline\n\nnot finished yet timeout can be rescheduled by ``shift_by()``\nor ``shift_to()`` methods::\n\n   async with timeout(1.5) as cm:\n       cm.shift(1)  # add another second on waiting\n       cm.update(loop.time() + 5)  # reschedule to now+5 seconds\n\nrescheduling is forbidden if the timeout is expired or after exit from ``async with``\ncode block.\n\n\ninstallation\n------------\n\n::\n\n   $ pip install async-timeout\n\nthe library is python 3 only!\n\n\n\nauthors and license\n-------------------\n\nthe module is written by andrew svetlov.\n\nit's *apache 2* licensed and freely available.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2",
  "name": "async-timeout",
  "package_url": "https://pypi.org/project/async-timeout/",
  "project_url": "https://pypi.org/project/async-timeout/",
  "project_urls": {
    "CI: GitHub Actions": "https://github.com/aio-libs/async-timeout/actions",
    "Chat: Gitter": "https://gitter.im/aio-libs/Lobby",
    "Coverage: codecov": "https://codecov.io/github/aio-libs/async-timeout",
    "GitHub: issues": "https://github.com/aio-libs/async-timeout/issues",
    "GitHub: repo": "https://github.com/aio-libs/async-timeout",
    "Homepage": "https://github.com/aio-libs/async-timeout"
  },
  "release_url": "https://pypi.org/project/async-timeout/4.0.3/",
  "requires_dist": [
    "typing-extensions >=3.6.5 ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "timeout context manager for asyncio programs",
  "version": "4.0.3",
  "releases": [],
  "developers": [
    "andrew.svetlov@gmail.com"
  ],
  "kwds": "async_timeout timeout_at timeouterror async timeout",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_async_timeout",
  "homepage": "https://github.com/aio-libs/async-timeout",
  "release_count": 18,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
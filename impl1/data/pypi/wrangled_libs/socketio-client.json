{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python"
  ],
  "description": ".. image:: https://travis-ci.org/invisibleroads/socketio-client.svg?branch=master\n    :target: https://travis-ci.org/invisibleroads/socketio-client\n\n\nsocketio-client\n===============\nhere is a `socket.io <http://socket.io>`_ client library for python.  you can use it to write test code for your socket.io server.\n\nplease note that this version implements `socket.io protocol 1.x <https://github.com/automattic/socket.io-protocol>`_, which is not backwards compatible.  if you want to communicate using `socket.io protocol 0.9 <https://github.com/learnboost/socket.io-spec>`_ (which is compatible with `gevent-socketio <https://github.com/abourget/gevent-socketio>`_), please use `socketio-client 0.5.7.2 <https://pypi.python.org/pypi/socketio-client/0.5.7.2>`_.\n\n\ninstallation\n------------\ninstall the package in an isolated environment. ::\n\n    virtual_env=$home/.virtualenv\n\n    # prepare isolated environment\n    virtualenv $virtual_env\n\n    # activate isolated environment\n    source $virtual_env/bin/activate\n\n    # install package\n    pip install -u socketio-client\n\n\nusage\n-----\nactivate isolated environment. ::\n\n    virtual_env=$home/.virtualenv\n    source $virtual_env/bin/activate\n\nlaunch your socket.io server. ::\n\n    cd $(python -c \"import os, socketio_client;\\\n        print(os.path.dirname(socketio_client.__file__))\")\n\n    debug=* node tests/serve.js  # start socket.io server in terminal one\n    debug=* node tests/proxy.js  # start proxy server in terminal two\n    nosetests                    # run tests in terminal three\n\nfor debugging information, run these commands first. ::\n\n    import logging\n    logging.getlogger('socketio-client').setlevel(logging.debug)\n    logging.basicconfig()\n\nemit. ::\n\n    from socketio_client import socketio, loggingnamespace\n\n    with socketio('localhost', 8000, loggingnamespace) as socketio:\n        socketio.emit('aaa')\n        socketio.wait(seconds=1)\n\nemit with callback. ::\n\n    from socketio_client import socketio, loggingnamespace\n\n    def on_bbb_response(*args):\n        print('on_bbb_response', args)\n\n    with socketio('localhost', 8000, loggingnamespace) as socketio:\n        socketio.emit('bbb', {'xxx': 'yyy'}, on_bbb_response)\n        socketio.wait_for_callbacks(seconds=1)\n\ndefine events. ::\n\n    from socketio_client import socketio, loggingnamespace\n\n    def on_connect():\n        print('connect')\n\n    def on_disconnect():\n        print('disconnect')\n\n    def on_reconnect():\n        print('reconnect')\n\n    def on_aaa_response(*args):\n        print('on_aaa_response', args)\n\n    socketio = socketio('localhost', 8000, loggingnamespace)\n    socketio.on('connect', on_connect)\n    socketio.on('disconnect', on_disconnect)\n    socketio.on('reconnect', on_reconnect)\n\n    # listen\n    socketio.on('aaa_response', on_aaa_response)\n    socketio.emit('aaa')\n    socketio.emit('aaa')\n    socketio.wait(seconds=1)\n\n    # stop listening\n    socketio.off('aaa_response')\n    socketio.emit('aaa')\n    socketio.wait(seconds=1)\n\n    # listen only once\n    socketio.once('aaa_response', on_aaa_response)\n    socketio.emit('aaa')  # activate aaa_response\n    socketio.emit('aaa')  # ignore\n    socketio.wait(seconds=1)\n\ndefine events in a namespace. ::\n\n    from socketio_client import socketio, basenamespace\n\n    class namespace(basenamespace):\n\n        def on_aaa_response(self, *args):\n            print('on_aaa_response', args)\n            self.emit('bbb')\n\n    socketio = socketio('localhost', 8000, namespace)\n    socketio.emit('aaa')\n    socketio.wait(seconds=1)\n\ndefine standard events. ::\n\n    from socketio_client import socketio, basenamespace\n\n    class namespace(basenamespace):\n\n        def on_connect(self):\n            print('[connected]')\n\n        def on_reconnect(self):\n            print('[reconnected]')\n\n        def on_disconnect(self):\n            print('[disconnected]')\n\n    socketio = socketio('localhost', 8000, namespace)\n    socketio.wait(seconds=1)\n\ndefine different namespaces on a single socket. ::\n\n    from socketio_client import socketio, basenamespace\n\n    class chatnamespace(basenamespace):\n\n        def on_aaa_response(self, *args):\n            print('on_aaa_response', args)\n\n    class newsnamespace(basenamespace):\n\n        def on_aaa_response(self, *args):\n            print('on_aaa_response', args)\n\n    socketio = socketio('localhost', 8000)\n    chat_namespace = socketio.define(chatnamespace, '/chat')\n    news_namespace = socketio.define(newsnamespace, '/news')\n\n    chat_namespace.emit('aaa')\n    news_namespace.emit('aaa')\n    socketio.wait(seconds=1)\n\nconnect via ssl (https://github.com/invisibleroads/socketio-client/issues/54). ::\n\n    from socketio_client import socketio\n\n    # skip server certificate verification\n    socketio('https://localhost', verify=false)\n    # verify the server certificate\n    socketio('https://localhost', verify='server.crt')\n    # verify the server certificate and encrypt using client certificate\n    socketio = socketio('https://localhost', verify='server.crt', cert=(\n        'client.crt', 'client.key'))\n\nspecify params, headers, cookies, proxies thanks to the `requests <http://python-requests.org>`_ library. ::\n\n    from socketio_client import socketio\n    from base64 import b64encode\n\n    socketio(\n        localhost', 8000,\n        params={'q': 'qqq'},\n        headers={'authorization': 'basic ' + b64encode('username:password')},\n        cookies={'a': 'aaa'},\n        proxies={'https': 'https://proxy.example.com:8080'})\n\nwait forever. ::\n\n    from socketio_client import socketio\n\n    socketio = socketio('localhost', 8000)\n    socketio.wait()\n\n\nlicense\n-------\nthis software is available under the mit license.\n\n\ncredits\n-------\n- `guillermo rauch <https://github.com/rauchg>`_ wrote the `socket.io specification <https://github.com/automattic/socket.io-protocol>`_.\n- `hiroki ohtani <https://github.com/liris>`_ wrote `websocket-client <https://github.com/liris/websocket-client>`_.\n- `rod <http://stackoverflow.com/users/370115/rod>`_ wrote a `prototype for a python client to a socket.io server <http://stackoverflow.com/questions/6692908/formatting-messages-to-send-to-socket-io-node-js-server-from-python-client>`_.\n- `alexandre bourget <https://github.com/abourget>`_ wrote `gevent-socketio <https://github.com/abourget/gevent-socketio>`_, which is a socket.io server written in python.\n- `paul kienzle <https://github.com/pkienzle>`_, `zac lee <https://github.com/zratic>`_, `josh vanderlinden <https://github.com/codekoala>`_, `ian fitzpatrick <https://github.com/ifitzpatrick>`_, `lucas klein <https://github.com/lukasklein>`_, `rui chicoria <https://github.com/rchicoria>`_, `travis odom <https://github.com/burstaholic>`_, `patrick huber <https://github.com/stackmagic>`_, `brad campbell <https://github.com/bradjc>`_, `daniel <https://github.com/dabidan>`_, `sean arietta <https://github.com/sarietta>`_, `sacha stafyniak <https://github.com/stafyniaksacha>`_ submitted code to expand support of the socket.io protocol.\n- `bernard pratz <https://github.com/guyzmo>`_, `francis bull <https://github.com/franbull>`_ wrote prototypes to support xhr-polling and jsonp-polling.\n- `joe palmer <https://github.com/softforge>`_ sponsored development.\n- `eric chen <https://github.com/taiyangc>`_, `denis zinevich <https://github.com/dzinevich>`_, `thiago hersan <https://github.com/thiagohersan>`_, `nayef copty <https://github.com/nayefc>`_, `j\u00f6rgen karlsson <https://github.com/jorgen-k>`_, `branden ghena <https://github.com/brghena>`_, `tim landscheidt <https://github.com/scfc>`_, `matt porritt <https://github.com/mattporritt>`_, `matt dainty <https://github.com/bodgit>`_, `thomaz de oliveira dos reis <https://github.com/thor27>`_, `felix k\u00f6nig <https://github.com/felk>`_, `george wilson <https://github.com/wilsonge>`_, `andreas strikos <https://github.com/astrikos>`_, `alessio sergi <https://github.com/asergi>`_ `claudio yacarini <https://github.com/cyacarinic>`_, `khairi hafsham <https://github.com/khairihafsham>`_, `robbie clarken <https://github.com/robbieclarken>`_ suggested ways to make the connection more robust.\n- `merlijn van deen <https://github.com/valhallasw>`_, `frederic sureau <https://github.com/fredericsureau>`_, `marcus cobden <https://github.com/leth>`_, `drew hutchison <https://github.com/drewhutchison>`_, `wuurrd <https://github.com/wuurrd>`_, `adam kecer <https://github.com/amfg>`_, `alex monk <https://github.com/krenair>`_, `vishal p r <https://github.com/vishalwy>`_, `john vandenberg <https://github.com/jayvdb>`_, `thomas grainger <https://github.com/graingert>`_, `daniel quinn <https://github.com/danielquinn>`_, `adric worley <https://github.com/adricepic>`_, `adam roses wight <https://github.com/adamwight>`_, `jan v\u010del\u00e1k <https://github.com/fcelda>`_ proposed changes that make the library more friendly and practical for you!\n\n\n0.7\n---\n- fixed thread cleanup\n- fixed disconnect detection if defined directly thanks to andreas strikos\n\n0.6\n---\n- upgraded to socket.io protocol 1.x thanks to sean arietta and joe palmer\n- fixed support for python 3\n- fixed ssl support\n- added locks to fix concurrency issues with polling transport\n- added socketio.off() and socketio.once()\n\n0.5\n---\n- added support for python 3\n- added support for jsonp-polling thanks to bernard pratz\n- added support for xhr-polling thanks to francis bull\n- added support for query params and cookies\n- fixed sending acknowledgments in custom namespaces thanks to travis odom\n- rewrote library to use coroutines instead of threads to save memory\n\n0.4\n---\n- added support for custom headers and proxies thanks to rui and sajal\n- added support for server-side callbacks thanks to zac lee\n- merged channel functionality into basenamespace thanks to alexandre bourget\n\n0.3\n---\n- added support for secure connections\n- added socketio.wait()\n- improved exception handling in _rhythmicthread and _listenerthread\n\n0.2\n---\n- added support for callbacks and channels thanks to paul kienzle\n- incorporated suggestions from josh vanderlinden and ian fitzpatrick\n\n0.1\n---\n- wrapped `code from stackoverflow <http://stackoverflow.com/questions/6692908/formatting-messages-to-send-to-socket-io-node-js-server-from-python-client>`_\n- added exception handling to destructor in case of connection failure",
  "docs_url": null,
  "keywords": "socket.io node.js",
  "license": "mit",
  "name": "socketio-client",
  "package_url": "https://pypi.org/project/socketIO-client/",
  "project_url": "https://pypi.org/project/socketIO-client/",
  "project_urls": {
    "Homepage": "https://github.com/invisibleroads/socketIO-client"
  },
  "release_url": "https://pypi.org/project/socketIO-client/0.7.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a socket.io client library",
  "version": "0.7.2",
  "releases": [],
  "developers": [
    "rhh@crosscompute.com",
    "roy_hyunjin_han"
  ],
  "kwds": "socketio_client socketio socket websocket node",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_socketio_client",
  "homepage": "https://github.com/invisibleroads/socketio-client",
  "release_count": 22,
  "dependency_ids": []
}